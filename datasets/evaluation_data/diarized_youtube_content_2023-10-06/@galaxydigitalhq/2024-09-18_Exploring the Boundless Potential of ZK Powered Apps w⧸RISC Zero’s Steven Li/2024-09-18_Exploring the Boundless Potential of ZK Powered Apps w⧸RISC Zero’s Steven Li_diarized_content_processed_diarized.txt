00:00:10.120 - 00:00:17.809, Speaker A: Welcome to the Infinite Jungle. On today's show I have Steven Lee, head of strategy at Risk Zero. Hi Stephen, thanks for being on the show.
00:00:17.857 - 00:00:18.905, Speaker B: Hi. Excited to be here.
00:00:18.985 - 00:00:38.719, Speaker A: I know it's great because you used to be a former Galaxy intern and during your time at Galaxy you helped me immensely with my ZKEVM report. And now here you are on the show. We're going to be able to talk about ZKE again, but this time you're a builder of zero knowledge vm.
00:00:38.847 - 00:00:47.975, Speaker B: Yeah, it's been really exciting to be on this side of the spectrum building zk. It's obviously a super exciting technology. So I think we've been really pushing the frontiers forward.
00:00:48.095 - 00:01:13.717, Speaker A: Yeah, it's so cool to see. I mean, you are on the Ventures team at Galaxy. Obviously you were looking at a lot of different ZK projects and yeah, now you're on the builder side. Congrats on everything with RISC 0. Maybe just to give a little refresher for our listeners, give a bit of an overview of what Risk Zero does and its biggest milestone with launching the ZK VM this year.
00:01:13.861 - 00:01:59.743, Speaker B: Yeah. So at Risk Zero, what we're trying to build is this idea of a ZK vm, not a zkevm. And what principally that means is we're able to prove any sort of RISC V execution, which in and of itself is still a little confusing. But what that kind of looks like for a developer is anytime you write Rust code, that can be proven. So instead of writing evm, instead of writing Solidity, you can just write in Rust. And generally what we've seen from developers is instead of needing to do a bunch of math, a bunch of really, really complicated cryptography folks can now build ZK provable applications fully in Rust. And that has drastically increased the amount of developers that can utilize zk.
00:01:59.743 - 00:02:05.903, Speaker B: And also the use cases we're starting to see. Yeah, that's been, I think, the most exciting part of what we've been doing.
00:02:05.999 - 00:02:47.515, Speaker A: Let's talk about some of those use cases, because I am a little bit confused about the true use cases for zkvm. Because when you think about it, the reason why people write in solidity is because they want to execute their applications on Ethereum. And Ethereum is of course the most adopted smart contract platform. And that that's where the users are, that's where the wallets are, that's where all the integrations are. If you build some Rust coded in Rust, Java, whatever, this application, and then the ZKVM can verify it. Great. What's the point? Tell me a little bit about the cool use cases you've been seeing with the ZK VM that you guys have launched and come out with.
00:02:47.595 - 00:04:04.855, Speaker B: Yeah, I think something to think about is at the end of the day, EVM is super cool. Ethereum is amazing, right? But there are still a lot of limitations and restrictions we put in place to make Ethereum work, right? EVM being one of them, solidity being relatively an obscure language, if you're looking at coding generally, right? And that's all because of the limitations you put in, because of consensus, because of how you deal with decentralization, right? In the zkvm, because you're able to code in Rust, you're able to use any Rust library, any sort of repo you find on GitHub, effectively the amount of stuff you can build is significantly more functional and you can also build a lot more. One use case that I'm really excited about is from a team called Hash Flow. And specifically what they're doing is they're basically building a centralized exchange. So the order book runs fully off chain, it runs with sub second latency. The users get gasless bids and asks, but the entire order book itself is written in Rust and proven in zk. So you can verify the order matching, you can verify the liquidation engine, you can verify basically everything about the order book and then these proofs can be submitted back on Ethereum where users can do the deposits and withdrawals.
00:04:04.855 - 00:05:09.145, Speaker B: So what you basically get here is in some ways a trustless, a cryptographically trustless, verifiable order book that lives on Ethereum that you can interact with using Metamask but gives you sub second transaction latency, gives you gases, bids and asks, and principally the order book itself will just look very similarly to like Coinbase, for example. So you know, when you think about functionality, right, you can obviously write an order book in EVM or even svm. But to get to that final leap in UX in functionality and buildability, that's where, you know, building in Rust, building in something like a ZK VM really does a, like a paradigm shift in how we think about on chain applications. And we're working with a lot of other teams like, like eigenlayer, like automata, and in a lot of these cases these apps would have taken, you know, millions of gas on Ethereum, like 8 million gas. I think some eigenator stuff, they're, they're talking billions of gas. So like just not feasible, period. Even when you start looking at chains like Monad and mega eth.
00:05:09.145 - 00:05:23.121, Speaker B: It's just like these are insane amounts of computation. And part of that is just the inefficiencies that EVM introduces. And by just rewriting all that in Rust in the zkvm, they're able to actually do it on chain.
00:05:23.313 - 00:05:59.741, Speaker A: Okay, I see, so the proofs live on Ethereum. Correct, but all of the computation happens off chain. Okay, remind. Okay, explain the. Is the vm, the zkvm similar to EVM in that it's like a global compute platform in that everybody pays a certain amount. Is it its own blockchain in that people pay to use that zkvm and then that VM is something that nodes run and they all compute it together, or is it something that happens locally and then once you have those proofs, you submit those down to Ethereum?
00:05:59.853 - 00:06:36.985, Speaker B: Yeah, so in Ethereum, when I want to do a transaction, I need consensus, right? You need a bunch of nodes and they need to agree that the transaction you did is true and valid. But because of zk, whatever execution you do, you can cryptographically prove that you did the transaction properly because of that, for the ZK vm, there are no such things as nodes or anything like that. All that can be done locally or done with approver. You do the computation once and then you submit the proof on Ethereum and they know that person that did the computation did it correctly. There's no need for consensus or anything like that.
00:06:37.145 - 00:06:56.139, Speaker A: I see. So technically, could you also have then almost like the activities of a roll up all happen through a ZKVM and then you just put the proof of whatever transactions you batched, et cetera, et cetera, on Ethereum. Could the ZKVM be generalized to even some kind of an application like that?
00:06:56.217 - 00:07:28.491, Speaker B: Yeah, I think that's kind of like the idea that Vitalik's been pushing, the idea of like enshrined zk. Right. Moving all execution outside of proof verification off of Ethereum and into zk. So you can be doing as much computation as you want in the ZKVM or in the zkevm. And the only thing being done on Ethereum is a proof verification. Right. And like we're actually talking to the EF slowly behind the scenes building some of this out, mainly because I think it's like been a shift in how the entire industry thinks about zkevms.
00:07:28.491 - 00:07:50.407, Speaker B: But basically everyone is building the zkevms on ZKEVM platforms now instead of hand writing ZKEVM circuits themselves because the upgradeability and extensibility is just so much better. Like the EF basically assumes the best ZKEVM implementation is just running reference on the zkevm.
00:07:50.551 - 00:08:53.735, Speaker A: I got to do an update to the ZKEVM report with these kind of developments. It's been a while since we started to evaluate or relook at the ZKEVM designs. Let's talk about some of the bottlenecks that exist with this, because as you've been talking about some of these other use cases, the ones that Vitalik were talking about, I'm sure there's got to be some very hard technical challenges still left. I'm curious to know, since you guys have launched the ZK VM and obviously there's some really cool app applications that are being built on top of it, how generalizable is this? What are some of the tooling that you guys need to build for this to really be more widely adopted? I noticed that Risk Zero has been trying to expand its VM to other chains like Solana. What have been some of the main challenges in getting this VM to be used? That was probably like six questions at once. I kind of do this, but I'm curious. My mind sometimes moves a little bit faster than mine.
00:08:54.795 - 00:09:34.681, Speaker B: I'll try to start with one of the first ones. When it comes to limitations, I think performance remains a very clear one. And we have competitors and we're constantly shooting it off trying to see who can get to the fastest, like benchmarks. A number to kind of benchmark and keep in your head is basically to prove a single Ethereum transaction. Your average Ethereum transaction in the ZKVM, it's about 1/10 of a cent. Okay, so it's good. It's not great useful for Ethereum obviously, but when you're looking at roll ups and then when you start looking at more long tail things like Solana, it's still a little expensive.
00:09:34.681 - 00:09:59.837, Speaker B: Especially we're trying to do really like huge amounts of computation like 8 million gas. Something of that. Something like that. And then something else we think about is latency. Proving takes a lot of time. So any application you build in the CK CO processor paradigm or even ZK rollups, there is a soft finality and a hard finality. So you have the soft finality and that's normally what the roll up figures out.
00:09:59.837 - 00:10:15.385, Speaker B: But the hard finality is after the proof gets generated. And for zksync, for starkware, even for us, the proof generation times vary between about five minutes to an hour or Two, depending on the complexity.
00:10:15.505 - 00:10:16.585, Speaker A: That's a huge gap.
00:10:16.665 - 00:10:54.755, Speaker B: It is a huge gap, but also for users, isn't that different if they're waiting 10 minutes or an hour. And principally for developers, unless we can get it to sub 12 seconds. So you have that sort of composability where within a block I can generate a ZK proof, do my computation and validate it in a single transaction. Until that is possible, there isn't like perfect composability between ZK CO processors or ZK off chain compute and Ethereum transactions. And that's like kind of a goal. And that's basically what Vitalik is like waiting around for. I think the starkware team is making a lot of strides in that direction.
00:10:54.755 - 00:11:07.919, Speaker B: But until we really are able to get the performance down a lot. Sorry, performance up a lot and latency down a lot, that's basically like the remaining big jump that we need to.
00:11:08.007 - 00:11:11.303, Speaker A: Enable more use cases, performance and latency.
00:11:11.439 - 00:11:39.795, Speaker B: Yeah. And then going to one of your other questions can definitely talk about tooling. At the end of the day, the ZKVM is a very novel idea. These architectures are very new. There's very, very few real world applications that users and developers have been using. It's not that tangible yet and we hope to change that over the next year. But because of that we need to build a lot of tooling to support development on the zkvm.
00:11:39.795 - 00:12:15.371, Speaker B: Like take for example, because the ZKVM is fully in rust. How do you parse and work with Ethereum data? Right, because EVM has its own data structures. Moving data, you're taking data from Ethereum onto the ZKVM and then moving back to Ethereum. You can imagine there's a lot of weird knobs that you need to turn. It's a little weird to move the data in between those two environments. Also, as you mentioned, deploying the verifier across a lot of chains, including Solana, including basically all the L2 roll ups. And we're also looking at places like Bitcoin because there's a lot of potential in all these ecosystems.
00:12:15.371 - 00:12:33.347, Speaker B: And then like building out these sort of templates, these examples, to really enable people to build CO processors has been one of our main goals because without that it really is a really big blank slate that is definitely relatively hard to approach to the average Ethereum developer.
00:12:33.451 - 00:12:44.339, Speaker A: And just to clarify, when you say CO processor that's different from the VM that's generating the proof, is the CO processor like a piece of hardware or software?
00:12:44.427 - 00:13:16.559, Speaker B: I'D say the CO processor is more of an architecture, just like how a roll up is an architecture. A CO processor is a similar scaling architecture that's specifically used by applications. Right. So an application itself can port its logic onto the zkvm, get its computation done, and the proof gets sent back to Ethereum to get verified. That's the CO processor architecture. While in the roll up architecture, the application might move onto another chain entirely. Something like Optimism, Arbitrum, zksync.
00:13:16.559 - 00:13:23.943, Speaker B: Do whatever it needs to do, do lots of execution, and then the rollup will handle the proving and the submitting back to Ethereum.
00:13:24.039 - 00:14:00.015, Speaker A: Gotcha. That makes sense. Well, let's talk a little bit also about some of the other ZK tools that RISC0 is working on. So we talked a lot about the VM and kind of other parts or improvements that you guys are working on for the vm, which is improving its performance, its latency, some of the tooling that you mentioned, expanding it to other chains actually quickly. Is there a potential to expand or like create the ZKVM for like other smart contract or not smart contract linkages, but other like coding languages?
00:14:00.355 - 00:14:41.441, Speaker B: Yeah, definitely. So the RISC0ZKVM principally is improving RISC V and that obviously supports Rust. But our RISC v is RISC V32, so it doesn't have that much compatibility. But long term we're thinking about building out V2 and part of V2 will make it significantly more extensible. So we might target low level languages like RISC v64 or WASM, and that gives us much broader support for like C TypeScript, all the other languages that people in the space use. And we also do have more naive implementations of evm, SVM and all that sort. And that's been really useful for all of our rollup partners.
00:14:41.553 - 00:14:44.637, Speaker A: Cool. When's V2 coming out? What's the timeline for that?
00:14:44.701 - 00:14:49.981, Speaker B: TBD, big TBD. I'd say maybe early next year.
00:14:50.093 - 00:15:12.811, Speaker A: Okay, gotcha. Are there any other announcements related to, say, other products? Let's talk a little bit about what other things Risk zero is building. You had mentioned in our preparation for this episode that there was going to be a decentralized, verifiable compute layer. Talk to me a little bit about some of the exciting things that users can still expect from RISC 0 for the rest of the year.
00:15:12.883 - 00:15:56.431, Speaker B: Yeah, basically, you know what we've been thinking about is we talk to all these CO processor, all these roll up partners, and they're really interested in using our ZK vm. But at the end of the day it's hard to use, right? There's a lot of infrastructure that comes with zk. You need provers, you need aggregators. How do you decentralize that sort of, you know, how do you decentralize that stack? Also, as I mentioned, it's just hard to work with to get data from Ethereum to the CO processor and back. That's a complicated workflow. So sort of idea that we are building, and we're actually announcing the first part of it today, is this idea of a verifiable compute layer. A decentralized verifiable compute layer.
00:15:56.431 - 00:15:58.635, Speaker B: The name is Boundless.
00:15:59.255 - 00:16:06.553, Speaker A: Sorry, I don't know who came up with that, but all right, you said Boundless, it's called Boundless.
00:16:06.649 - 00:16:14.313, Speaker B: Boundless. Maybe a little sick, you know, you never know, maybe hear it a few more times, see it on Twitter and then you might be like, oh, okay.
00:16:14.409 - 00:16:16.805, Speaker A: Okay, well let's talk about it. What is Boundless?
00:16:17.945 - 00:17:30.945, Speaker B: I mean, at its core it is basically a place for rollups and CO processors to upload their guest programs, that's basically their ZK programs and then seamlessly call them and get them proven, get them executed from anychain. So whether it's Ethereum or Optimism or Arbitrum or Solana, I as an application can say, hey, I need to get this computation done. And as a developer, all I need to do is write that Rust code, it's a single Rust file, I need to write the solidity code, there's a smart contract you can call, I need to pay the fees and that's it. Basically all that computation that you traditionally would be doing on chain can be ported off chain in a really seamless end to end manner. And you get all that decentralization that comes with this network, which is really important for teams like Eigenlayer that really value that sort of like redundancy and trustlessness of decentralization. And it's also not just useful for CO processors, right? It's useful for rollups. If I'm Tyco, for example, which really uses ZK VMs, I don't want a single prover run on AWS.
00:17:30.945 - 00:17:49.977, Speaker B: I want a real distributed set of provers. And similarly, when they are proving their chain on top of the risk 0zkvm, they can just send a request to Boundless and then all approvers, all the aggregators will be coordinated together. They'll generate the proof and submit that onto Ethereum.
00:17:50.121 - 00:18:03.981, Speaker A: How does the incentive mechanisms on Boundless work? Is there A token. Are there these. How are they incentivized, these provers, this decentralized network of stakeholders that are going to be executing these requests? I mean, what does that look like?
00:18:04.013 - 00:18:38.267, Speaker B: Yeah. So at its core, it will be actually a fee on top of the base proving fees. You know, just like how AWS or Google Cloud charge fees for their services. Naturally, the provers on Boundless will charge, you know, upcharge on their base electricity costs for generating the proofs. And we really do believe these fees can sustain the network long term. But similarly to a lot of chains, a lot of proof of work chains, we will have a token mechanism to start. The details around it are truthfully TBD and up in the air.
00:18:38.267 - 00:18:49.515, Speaker B: But something along the lines of block rewards that incentivizes provers to start is really core to, I think, making sure we get good adoption to start.
00:18:49.635 - 00:18:59.787, Speaker A: I see. Interesting. And I'm guessing there's. Well, when you mentioned proof of work, there's the consensus protocols and then ways to try and scale the network, et cetera, et cetera.
00:18:59.931 - 00:19:26.645, Speaker B: Right. It's not proof of work in the sense that there's no consensus. Right. It's simply a marketplace that matches people that want proofs with people that can generate proofs. In all intents and purposes, it's a marketplace. There's no, like, blocks or anything of that sort. So really, the incentive mechanisms are just for people that generate proofs to maybe even subsidize the cost a little bit to start.
00:19:26.645 - 00:19:36.937, Speaker B: We're not trying to figure out building a really novel consensus mechanism that's a little above our pay grade. What we're really trying to do is just connect decentralized provers with the projects that need them.
00:19:37.041 - 00:20:03.985, Speaker A: I see. Interesting. I wouldn't put it past you guys in terms of above your pay grade because ZK is very complex. It's very math heavy, more cryptography heavy field. Which is why I'm always nervous getting into conversations around zk because it requires a lot of technical lingo. Well, this is very and very fascinating to hear more about what Risk Zero is talking about or working on. And I feel like I understand it better thanks to you, Steven.
00:20:03.985 - 00:21:36.519, Speaker A: I want to shift our focus a little bit for the last couple minutes of our conversation around this debate that's been going on in the Ethereum ecosystem related to all of these infra projects, all of these ZK rollups, these ZK VMs, really trying to put the cost of computation super low. Like, really make sure that the cost of executing transactions is like subsense and obviously you guys are working towards it and Ethereum is doing a lot of DA improvements to try and make putting proofs on chain much, much cheaper and costs are pretty cheap. But there is the question of is there just too much blocks? Is there really enough revenue to go around between these infra projects for all that's being built? And I was thinking about this the other night and I really wonder if the reason why we're seeing so many infra projects and so many and not a lot of apps is because there's still a lot of regulatory overhang for people building applications that directly interface with users. Still a lot of regulatory uncertainty in the US especially for DeFi projects. I wonder if that's really what's dampening app activity. Whereas for infra it's a little bit easier to finagle. Like I will become one day decentralized and maybe one day then our tokens won't be a security, but et cetera, et cetera.
00:21:36.519 - 00:21:38.515, Speaker A: I would love your take on.
00:21:41.295 - 00:21:41.607, Speaker B: How.
00:21:41.631 - 00:22:01.801, Speaker A: You see valuations for infra changing in the future, how you see the cycle of perhaps adoption happening. When do the apps. You had mentioned that interesting kind of centralized exchange and what's really blocking adoption right now? What do you think is the reason why we don't really see a lot of users?
00:22:01.913 - 00:22:24.175, Speaker B: Yeah, definitely have a few controversial takes there. But yeah, there's too much infra, that's for sure. And not enough apps. Even if you look at Web2, there's actually not that much infrastructure around. How many big cloud providers are there? Maybe two or three. How many big like CRM platforms are there? Maybe two or three. It's not like 10 for every single category or 20 for every single category.
00:22:24.175 - 00:23:20.635, Speaker B: But really at least like the thesis I think our team works on and the thesis I work on is at the end of the day, building on Ethereum or any chain kind of sucks, right? Even if I have crazy amounts of block space, I'm like, hey, you know, you have zero gas fees, but you need to work in evm, but you need to deal with finality. You need to deal with blocks and gas fees and how to wrangle your application around this completely new architecture. It's not that appealing. If I go to all developers that come out of university, hey, do you want to build in this really obscure language? Sure, it might be really fast in a decentralized context, but in the non decentralized context it sucks. The answer is probably no. And the other thing we think about is where are all the Apps. Where have we seen the app ecosystem explode in the past two decades? You got to look at your phone.
00:23:20.635 - 00:24:10.355, Speaker B: That's where all apps are on your phone. What does building apps on your iPhone mean? It's like a super seamless, really approachable experience in languages that have no limitations. Like EVM at the end of the day is quite limited in a really end to end platform where developers can just write their logic and everything else is handled. So that's kind of like the thesis we're going on when it comes to building apps. And that's also why we've been focusing a lot on this co processor idea, right? Writing your apps in rust. We do think that is a big change in how developers can approach this. I saw these numbers the other day, I feel like they're wrong, but there was something like there's like 10,000 active EVM developers, which feels low, but There are like 2 million Rust developers and there's like 100 million Java developers.
00:24:10.355 - 00:24:50.905, Speaker B: We're talking magnitudes here and that's kind of what we're trying to tap into. And also this idea is at the end of the day, what are the best use cases of crypto? I think Defi has seen a lot of traction. NFTs actually at the end of the day are pretty novel and for what they do, it's really unique. But a lot of things it feels like you're fitting like a round peg in a square hole, right? Like gaming. Why are you trying to squeeze all the game logic on chain? Everything on chain is slow, expensive, hard to use and you're trying to put your game on it. That's a little tough. Or even things like social fi.
00:24:50.905 - 00:25:46.941, Speaker B: I don't think we need to squeeze everything on chain and the applications that have seen the most traction. Polymarket Forecaster the parts of the app that are actually on chain are really minimal, but the parts that are on chain really benefit from being on chain. Like Polymarket's able to succeed because they put like the deposits and the withdrawals on chain while Kalshi and those folks need to deal with a bunch of regulatory overhead because they don't have that sort of flexibility. So kind of what we're thinking and because you can verify a lot of this is. So let's take for example my Kava rewards app. Instead of putting the entire rewards program on chain, which is what has been done in the past, I think Avalanche or a few of those other folks have roll ups specifically for rewards programs, which is just a huge, huge lift. What if I can Prove that I bought a carvool that translates to some sort of rewards program on chain.
00:25:46.941 - 00:26:15.745, Speaker B: But the app, the ux, everything else, the basic logic is still on your iPhone. It's still fully centralized. But what you gain there is the development is seamless. The UX is really nice. And that's kind of, I think the thesis we go on when we work with cash flow on their centralized exchanges. Also when we talk to gaming companies like don't prove your game logic, it's too much, it's pointless. Just give us like the item exchange.
00:26:15.745 - 00:26:34.285, Speaker B: How do you swap your skins, how do you port what actually matters to be put on chain? On chain, everything else keep off chain. Whether it's the Defi projects or the socialfi projects or depin, only put what's important on chain. And ZK is a really good tool to accomplish that.
00:26:34.585 - 00:27:53.809, Speaker A: Okay, getting a little bit meta related to the on chain stuff and putting things on chain. If most of what people think is on chain starts to become on chain on rollups, not directly on Ethereum, and that on chain is to some extent centralized, doesn't really inherit the decentralization or the security of Ethereum. Do you foresee a future where people do start using ZK more for consumer applications, but there's just no blockchain involved? Like you do have like very easy proofs that people can verify and it does benefit Web2 applications, but there's just no reason really to use crypto in any of this other than, I guess, you know, those short term like token incentives. Like to what extent is it really? Do you foresee ZK's you know, primary use case and application being directly connected to crypto's value? Because I kind of worry sometimes if there's not really a use case for blockchain. This sounds very depressing, but if there's not really a use case there, I still foresee value in just zero knowledge being more widely as a technology used within for consumer facing like applications.
00:27:53.897 - 00:28:39.465, Speaker B: Yeah, like definitely outside of like the big crypto use cases, we still see ZK having a lot of really strong and important use cases. Specifically in the privacy field, the verifiable compute field, very early stage. Because at the end of the day, ZK is kind of a new technology. Well, it's actually been around for a long time, but proper implementations of it are really new. But really as I mentioned in privacy, there's a lot of regulation these days, especially coming from the eu to have websites, to have social media companies give users their data back. And if I Am say an ad engine on Google, for example. And I want to give you really targeted ads in a ZK proof.
00:28:39.465 - 00:29:33.093, Speaker B: I can say that you've been on a lot of car websites, but I won't exactly reveal what websites you've been on, what cars you're looking at, what your location is. But I can say, yeah, you've been on a lot of car websites looking at cars in the New York area. So it's that sort of data privacy that ZK is actually really well positioned to accomplish that we're really bullish on. But at the same time, there's a lot of stuff in between reaching that goal and where we are right now, breaking into that space, implementation, even having people trust zk, because zk, it's voodoo magic. It's like a black box of math and cryptography. Connecting those dots is going to be a huge lift. We see a lot of interest and a lot of really important use cases to be solved there and not to go on this train.
00:29:33.093 - 00:30:11.775, Speaker B: But like, there are a lot of ZKML projects, zk, AI, things like that. And truthfully, ZK performance is really, really bad and ML performance is really, really bad. So you multiply those two together and you get extremely bad performance. But kind of what we're thinking about in that space is there's no, like, provenance in AI. If you give inputs into a model, you don't know that the output is relevant to the input unless you track it the entire way, unless you basically do the math by hand. So in ZK proofs, you can basically draw that connection. Given this image input, I was able to get this as an output.
00:30:11.775 - 00:30:46.423, Speaker B: The output's cat. The input is a picture of a cat. You can't actually connect the dots unless you have a proof. So there's a lot of authenticity things that go into that, like, how do I prove that this image is from this model? Or things like that. So there's a bunch of really, I think, innovative things about ZK that we think are going to be core to how we deal with privacy, ownership, verifiability in this new era that we're going into. But the technology has a ways to go. We got to work with a lot of teams, and these teams are a lot slower.
00:30:46.423 - 00:31:05.695, Speaker B: At the end of the day, people in crypto like pushing the cutting edge. The same probably can't be said with a team like Facebook. Although they're probably extremely good in R and D, crypto is just a lot more degen. They're willing to take risks on these New technologies. So, yeah, definitely a big goal of ours, but not, not there yet.
00:31:05.815 - 00:31:32.043, Speaker A: That's fascinating. I think that people used to say that about blockchains too. It would be the AI provenance, whatever. And I will say those use cases that you told me about, right now, frankly, I'm slightly more excited about those, which I agree with you, those are way more far off. But I can see why the crypto applications for ZK are more, they're more lucrative now than some of these other more far off goals.
00:31:32.179 - 00:32:08.683, Speaker B: And part of it isn't like it being lucrative, we think, like, hey, if you, if we build a really exciting, you know, ZK based Web3 app, maybe something that reaches the same popularity as polymarket, then you have a million plus people using ZK, getting that into the mind, like the mind space. And then that's how you build the reputation of the technology. When we take this technology to web, two companies right now, they're like, okay, cool, show us who's actually using it. Show us being battle tested. And we're like, there's not much. There's literally nothing in the entire industry. There is zkkyc, there's ZK Passports, but who's actually using it? No one.
00:32:08.683 - 00:32:12.645, Speaker B: So, yeah, definitely, we want to connect those dots.
00:32:12.755 - 00:32:28.337, Speaker A: Yeah, 100%. Well, thank you so much, Stephen. This has been a wonderful conversation. And yeah, I'm excited to see the kind of developments that come out of Res zero and the, and the ZK projects that you guys are ZK products, you guys are building.
00:32:28.401 - 00:32:31.657, Speaker B: Yeah, you know, we're trying our best. And thank you for having me.
00:32:31.721 - 00:33:03.415, Speaker A: Of course. And thank you to all of our listeners who was listening to this episode of the Infinite Jungle. We hope that you learn something new about Ethereum, but also about ZK. Zero knowledge, the cool kind of zero knowledge, the use cases that exist for zero knowledge in crypto in the crypto space. And we are signing off from New York City. We hope everyone has a good week. Tune in again next week for more episodes of Infinite Jungle.
00:33:03.415 - 00:33:08.855, Speaker A: Until next time in your explorations of the infinite Jungle that is Ethereum. Stay safe out there.
