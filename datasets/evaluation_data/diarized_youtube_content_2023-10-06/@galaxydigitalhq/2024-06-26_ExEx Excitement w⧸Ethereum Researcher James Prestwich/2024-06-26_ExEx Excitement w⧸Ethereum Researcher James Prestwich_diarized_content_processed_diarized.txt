00:00:10.320 - 00:00:22.406, Speaker A: Welcome back to the infinite Jungle. I have with me on Today's show, James Prestwich, a researcher at Init four Tech and ethereum focused research collective. Thank you for being on the show, James.
00:00:22.478 - 00:00:23.774, Speaker B: Oh, it's good to be here.
00:00:23.902 - 00:00:59.052, Speaker A: Tell me a little bit about init four for tech, because I have not heard about this research collective and I've known about you, James, for so long. James's twitter is pretty iconic, I would say. I'm going to link to it in the show notes iconic person that I followed in the Ethereum space for a really long time. I didn't really know though, exactly what it is you do. So I want to get a little bit of a start. Start with what? Init four is how you came to innit four, what you were doing before, etcetera.
00:00:59.156 - 00:01:13.612, Speaker B: The problem with me is I've done a different thing every few years for the last ten years. I got into crypto before Ethereum was a thing, before anything important happened. I've been full time for ten years this year.
00:01:13.716 - 00:01:15.280, Speaker A: Wow, congratulations.
00:01:16.020 - 00:02:06.090, Speaker B: Multiple different companies, a bunch of different projects, uh, distributed storage, bridging, uh, cross chain tech. Uh, like the last five or six years, I've mostly been focused on protocol research around bridges, roll ups, everything else. Uh, so init four is a group of friends, protocol researchers, engineers. Uh, we got together to kind of solve what we saw as important problems, engineering problems. We're not on the PEPC restaking MeVP's train. We think there are enough important, strictly engineering problems that can be solved in ethereum today. So that's what we research, work on and care about.
00:02:06.710 - 00:02:28.534, Speaker A: That seems like still a very broad focus, because even when you take out Mev EPbs, PEPC, you've got scalability, you've got client diversity. What is the work that you primarily focus on? I want to get into a little bit of our conversation on the rep client development, but give us a little bit of a context.
00:02:28.622 - 00:02:54.192, Speaker B: I like to ship code, I like to make things that work, and I like to get them out into the world. Init four is a group. That's what we collectively like to do too, is we like to release software. We like to make things. So the first thing that we as a group did and released was a collaboration with the Reth team. So Reth is a rust Ethereum client. It's an execution layer node, like Geth.
00:02:54.192 - 00:03:35.360, Speaker B: It's produced by a team at Paradigm. We have some pretty strong beliefs about Ethereum and clients and running software and how you should build scalability. We're not the people designing the scalability solutions. We're the people designing how you build that. How should you realize a roll up in code? All of the research done in this space tends to be very top down, like they design some crypto mechanism and then they work backwards from that to applying it and building something. And we're very much bottom up, like we want to ship code. We want to turn these things into running software.
00:03:35.360 - 00:04:28.348, Speaker B: So collaborating with the Reth team, we designed and helped implement something called execution extensions. This is a way that your app can be built into RET, built into a full node. The reason this is important is that applications get built as consumers of a full node. They're downstream, they're way far away from the full node, and it adds a huge amount of headache to every app developer of how do I figure out if the blockchain reorged, and how do I know what the state of the node is? And I'm writing this web3 consumer provider thing, and I don't actually know how that works, and it's a huge headache. And instead of building your app as something outside that talks to Reth, you can build it inside Reth. You can use Reth as a platform for your application.
00:04:28.524 - 00:04:52.668, Speaker A: That's really fascinating. Is it also helping to increase the number of people actually running full nodes? Because as I understand, whenever you're an application developer trying to build an app on Ethereum, you just use Infuria and use that as the backend, the other people that run the software, but you just focus on deploying a smart contract when you're talking about the execution. What did you call it?
00:04:52.684 - 00:04:55.020, Speaker B: The execution layer or execution client?
00:04:55.100 - 00:04:57.520, Speaker A: Execution client? No, no, no.
00:04:57.940 - 00:04:59.440, Speaker B: Oh, execution extensions.
00:05:01.240 - 00:05:10.216, Speaker A: Does it require the application developer to then run that full node? And does that help with the verifiability and the decentralization of Ethereum as a network?
00:05:10.368 - 00:05:47.820, Speaker B: Ideally, yes. There are so many things that are written as just using infuria that would be better, cheaper to maintain, easier to write if they were written as an extension instead. And if they're written as an extension, then you're running a reth node. You're running a full node. These are usually not the consumer facing applications like the frontends. These are usually things like the oracles, the agents, all of the backend stuff that's submitting transactions to the chain or is indexing information about the chain. So things like block explorers are better as execution extensions.
00:05:47.820 - 00:06:15.326, Speaker B: They get immediate access to everything the node does instead of having to wait for the node to tell them about it. They get notified of Reorgs as soon as Reth knows a Reorg has occurred, rather than having to repeatedly ask Reth if a reorg has happened. Anything that is like long lived important infrastructural software is better as an extension than as independent programs.
00:06:15.518 - 00:06:37.576, Speaker A: This is pretty fascinating. Do you think that execution extensions will extend then and become a very natural part to all clients? As in this started with Reth, we've tried it with Reth. Are you seeing a ton of pickup for it, adoption of it? Do you think you're going to start to see an execution extension for nethermine Geth, maybe.
00:06:37.728 - 00:07:28.394, Speaker B: Geth has what they call live tracing, which is kind of conceptually related, so you're getting transactions as Geth executes them. This is also relatively new, and there's a bunch of different complex trade offs to talk about with the Reth version versus the Geth live tracing. I don't know what Nethermind is planning. I don't read C hash very well, so I don't go into their code base as much. But we are seeing pickup and adoption by companies in the space so far. I don't want to name names, so I'm not going to. But we are seeing people ask us how to use this, how to build with it, and start releasing example projects and start migrating some of their infrastructure.
00:07:28.394 - 00:08:08.562, Speaker B: The core insight is that almost everybody wants to wait for a block, see what's in the block, and react to it somehow. If you're doing that over the standard web3 interface, over infuria or something, you have to do so much just wrangling of the RPC, and it's terrible and everything is unreliable. If you're doing that from inside the execution client, you get reorgs for free. You just get notified there's been a reorg. You don't have to do any extra management yourself. Everything is more reliable because it's the same piece of software instead of multiple pieces communicating over the Internet.
00:08:08.746 - 00:09:15.786, Speaker A: That's a pretty huge paradigm shift for how applications are built on Ethereum, because I was always under the impression that client software is really out of the box. You don't modify it or customize it very much as a validator. Validators are really the ones that just use it. Layer twos. If you're building your own chain that is trying to be EVM compatible, of course you build a version of, say, the Gethklein, but it's really cool to hear the kind of product you guys have built for application developers, specifically based on your work with building this for the Reth client? I have heard some other types of tools and applications being built for the Reth client. There's been a lot of interest and expectation that the Reth client is an up and coming client that MEV searchers and some other stakeholders in the ecosystem will start to use. Do you also foresee, given your experience, that Reth is going to be a major client right now? It's like, I think when I saw the client diversity tracker, it's like less than 1% of nodes are running the ref client.
00:09:15.786 - 00:09:29.938, Speaker A: Do you foresee that number getting a lot larger? If so, how quickly do you think it's going to overtake, say, geth as the primary client, what is your kind of view on the potential for this client software?
00:09:30.074 - 00:10:13.160, Speaker B: One of their main strengths is how willing they are to modify the software to add integration points and to help people use it and modify it directly, moving quickly on things like Opreth or execution extensions. I'm not sure if Reth will ever be the majority client on the network, but I think it's likely that it will be the majority client for infrastructure applications for things like indexers and block explorers for more professional deployments going forward. So it might not ever pick up full network market share, but as long as it picks up industry infrastructural market share, it's a huge success for the paradigm team.
00:10:13.780 - 00:10:32.180, Speaker A: And do you think that the modifiability of ref also makes that client a lot more vulnerable to bugs and people misusing or mishandling the software? Are you concerned at all that this kind of flexibility from the RET team might come to bite them in the butt later?
00:10:33.200 - 00:11:34.126, Speaker B: Yeah, well, once you start modifying software, I feel like you've taken off all the stickers and the warranty is no longer good. And once you pull it open and start removing pieces or adding stuff, that's kind of on you at that point. That's not the RET team's responsibility anymore. I think that they have done very well at moving quickly and still being consensus compatible. Reth has not yet been the center of a consensus failure the way Geth or parity client have, and that's probably because Reth is still very young. Consensus failures are just a unavoidable side effect of having multiple clients and multiple client versions. So I'm not personally too concerned because the Ethereum core devs have historically been very good at handling consensus failures and at correcting them and minimizing harm.
00:11:34.238 - 00:12:33.248, Speaker A: Are you concerned at all about the continued lack of, say, client diversity on the execution layer front. I know we were talking a little bit about the growth of rest, but wondering what your thoughts are on kind of the overall landscape of other client of other execution layer clients that are either not gaining enough market share in your view, or maybe have too much in your view and curious to know. Also your thoughts on, say, what the future of client development for Ethereum looks like as Ethereum becomes more adopted. Client software always seems to me like a public good. You put so much money, so much investment into it, but what do you really get out of it? How do you really monetize that product? I don't know to the extent to which what the future kind of client development looks like and curious to know your thoughts on that.
00:12:33.344 - 00:12:38.328, Speaker B: I've always believed that client diversity is a huge distraction.
00:12:38.424 - 00:12:39.384, Speaker A: I'm sorry, say that again.
00:12:39.472 - 00:13:32.856, Speaker B: Who really benefits if there's three clients with equal adoption? Like, nope, no, but nobody benefits. When there were three different subway systems in New York, you know what happened? The city said that's too expensive and stupid, and stepped in and turned it into one system. We are spending three, four times as much money on client development as is actually useful for anyone. And we're doing it because of an idealist idea that, you know, more clients is more decentralized when what we should be focusing on is decentralizing validator holdings and staking services. The money is aggregating while we pay attention to the client adoption percentages. Proof of stake is an inherently centralizing force. And if we don't address that, it doesn't matter how many execution clients there are.
00:13:32.928 - 00:13:52.076, Speaker A: That is a hot take, because what if that one client, if we don't promote client diversity, what happens if there's a bug in gath? What happens if there's a catastrophic in that one majority client? Don't you want a lot of diversity so that if everybody has equally one third share, then if we lose a third of the network, we'll be fine?
00:13:52.268 - 00:14:22.476, Speaker B: I don't think anybody's fine if we lose a third of the network. I don't think the third is happy. I don't think the two thirds are happy. And I think that everybody is having a bad day and spending a lot of money fixing that. Having more clients makes it more likely that that happens. If you have three equal clients, then you have three times as many chances to have a bug that splits off a third of the network. If you have one client, you have a smaller chance of a bug that splits off more of the network.
00:14:22.476 - 00:15:04.832, Speaker B: We have clients, we have very few consensus failures. You can count them on one hand for the whole history of Ethereum, this seems like a pretty good space, and we should focus on preventing more consensus failures, not minimizing the harm. Well, it's not even minimizing the harm, not like pretending to mitigate the harm of consensus failures the way client diversity does. We are no happier if a third of the network breaks than if half the network breaks, or if 90% of the network breaks. Regardless of if it's a third of the network or 90% of the network, everybody's miserable and everybody is losing money.
00:15:04.976 - 00:15:32.254, Speaker A: It'S still a really big problem. Okay, that's a really fascinating perspective that I haven't heard before, but I hear your point. I see your point. Curious to know your thoughts then, on the kind of development happening on the consensus layer side. Because as you say, the reF team is bringing in quite a bit of fresh energy. A fresh perspective on being more modul. What do you call it? Modul, like customizable.
00:15:32.254 - 00:16:06.330, Speaker A: That's the word. I don't know why I kept thinking about modularity, but on the consensus layer side, you've got prism, you've got lighthouse. Is there a project or are there efforts in the init four tag that's working on the robustness of consensus layer clients? Obviously execution is important, but when it comes to the stability of consensus on Ethereum, especially as the proof of stake protocol for Ethereum becomes a lot more complex. Curious to know your guys efforts and thoughts around the robustness of consensus layer clients?
00:16:07.250 - 00:17:09.560, Speaker B: We're interested in this, but it's not our primary area of expertise or what we like to work on. It's much more difficult to ship consensus layer changes than it is to ship execution layer improvements or infrastructural improvements like execution extensions and Reth, the consensus layer client's behavior is still very poorly understood. This is why you get issues like the time last year when lighthouse accidentally dos the other clients. There is a lot more complexity in that behavior and a lot more difficulty in knowing how to adjust it correctly. At the same time, the average user or developer doesn't interface with the CL client at all. If you're using a DAP or writing a DAP, you're not going to worry about it. You get that for free as part of your docker compose file for your full node.
00:17:09.560 - 00:18:08.420, Speaker B: The only people who actually, as engineers and infrastructure deployers, interact with the CL are the staking services, and they are highly specialized and very good at that. So in general, we pay attention to the execution layer. We do think that there are some major improvements to be made in how the consensus layer and the execution layer talk to each other, especially when it comes to rollups. If you're running an optimism node or an arbitrum node, you're actually running four different pieces of software that are all communicating with each other. You're running the Ethereum CL, the Ethereum El, the optimism Cl, and the optimism eldest. And four is a lot of pieces of software to talk to each other and to manage and to deploy and to track errors and to make reliable. In order to make something reliable, you want as little surface area as possible.
00:18:08.420 - 00:19:33.550, Speaker B: So one of the main benefits of execution extensions, of building into a full node, of building into rest, is that instead of four different clients communicating with each other, you get two. You go back to just two. Ideally it would be just one, the way it was before the merge, but we seem to be married to having at least two using execution extensions, implementing a roll up, optimism, arbitrum, whatever, as an execution extension is better for everyone and is more reliable, but has complex interactions with the sequencing model that make it a little difficult to do so. We expect to see execution extensions used for things like block explorers, for optimism, that are lagging the sequencers somewhat, and okay, doing that, we expect to see it used for analysis of chain data on optimism, or for publishing price feeds, or for things like that, where it is important to be on the most current chain information. And we expect those services to be more reliable, faster to build, cheaper to maintain, because they're built on ref, on execution extensions.
00:19:33.710 - 00:20:23.196, Speaker A: Yeah. And you don't have to build a whole nother client or have a whole nother piece of software that's interfacing with all these other softwares. I want. Well, you had mentioned something in the beginning of really focusing on things from a bottom up perspective, but there are some top down things that are coming up, and I want to shift our conversation to talking a little bit more about the broader trends and the broader changes that are happening from the more protocol layers perspective. An important one that is trying to make the EL and the CL more compatible. Are SSE changes, changes to the way that data is serialized on Ethereum, because consensus layer uses RLP execution layer. Yeah, from Merkel, Patricia trees, and trying to make those two compatible.
00:20:23.196 - 00:20:55.488, Speaker A: There's a major consensus layer change coming through peer das, the networking layer of consensys. The way that consensus layer clients will propagate data is about to change in a pretty significant way. That will impact rollups. Have you guys been looking into these changes, you and your team of researchers? Are there any among the upcoming consensus layer changes that you think are not talked about enough, or that you have a strong opinion about the serialization?
00:20:55.584 - 00:22:17.056, Speaker B: Changes are always just technically a pain to manage. Ethereum has a nasty habit of inventing their own serialization for everything, and I personally have had to maintain RLP and Merkel fisher trees and sometimes an SSE implementation. I'm just personally a little not looking forward to having to manage new changes to it. Other than that, I don't think that many of these changes are going to be consequential to day to day development to people trying to use the chain. Things like peer desks become more relevant to rollups, to the teams producing rollups, but then only if you're using the peer to peer network instead of some other source of blobs. A lot of these are so far removed from your average Ethereum developer that they're going to have just trickle down effects, and it's hard to say exactly what you need to build in order to minimize impact or to allow people to take advantage of new features, because how blobs are propagated on the network is completely irrelevant to your average Ethereum user, I guess.
00:22:17.208 - 00:23:45.872, Speaker A: On that note, any other thoughts or sentiments that you want to share on the focus of core protocol development for Ethereum? And primarily you are very focused on Ethereum protocol development, but I'm sure you've seen the kind of protocol development that's happening on Solana in Polkadot, Avalanche, cosmos, celestia. Are there learnings from these other ecosystems or particular focuses on these other ecosystems that you think should be adopted by Ethereum? And like a game changer, some of the things that I think about is what if Ethereum core protocol developers had thought, had listened or taken some learnings from how proof of stake and the struggles that proof of stake was happening from cosmos developers with some of the advices. What about svms, other really performant programming languages like move? I wonder if there's a primary kind of learning that developers should really focus on incorporating sooner rather than later. Obviously the merge proof of stake already happened, so we can't go back in time, but Ethereum is still in a really pivotal moment I think, to try and retain its lead as the primary general purpose blockchain. So curious to know your thoughts on all of that, which is a big.
00:23:45.896 - 00:24:51.670, Speaker B: Question, but it is a big question. Obviously there are tons of technical learnings out there. People are trying stuff the SVM is interesting, cosmos is interesting. We see all of these different experiments happening, and we can learn a lot of technical things from them. And having someone like Anatoly, who is so out of the Overton window for Ethereum design and development is great because it leads to fascinating conversations and diverse opinions. The thing that I don't feel like I can answer about the question is, what should Ethereum adopt? Ethereum a few years ago embarked on this thing called the roll up centric roadmap, which is essentially the EF kind of opting out of these design decisions. They canceled the sharding project and said, we just won't solve that.
00:24:51.670 - 00:25:38.254, Speaker B: We will let other people solve scalability for us. And so anything related to scaling Ethereum is now officially outside of the EF's purview, right? They have a roll up centric roadmap. They will enable rollups. They won't build them, they won't design them, they won't say what they should be. This has been somewhat repeated over the years with other areas of the protocol, things like delegation that would be in house in protocol developments in Cosmos or in Solana are not in Ethereum. They made a deliberate decision to not design delegation. And so Ethereum doesn't have in protocol delegation or restaking.
00:25:38.254 - 00:26:19.514, Speaker B: Or restaking, yeah, and with restaking, it's a bit of a complicated situation. The EF is apparently deciding not to design restaking in house anymore. The people responsible for that have taken very lucrative deals from a specific restaking company and are still at the EF. So I have to assume that the EF has decided to not design restaking. So it's very difficult for me to say what the EFDE should do or what Ethereum should do because the policy has been to not answer that question.
00:26:19.682 - 00:27:02.282, Speaker A: That sounds like a very dangerous policy, one that will not win out in the long run, because when you export all of these decisions, you create areas where there's huge monopolies of power outside of the Ethereum core protocol. So you have centralization in certain liquid staking markets. Now I'm starting to get very specific in liquid restaking markets. However, I won't name name. You guys can do that research on your own. But when that happens, obviously there are certain factions within the Ethereum foundation that look at that problem and say, well, the problem isn't native delegation. Maybe we should solve it through issuance.
00:27:02.282 - 00:27:31.370, Speaker A: But I mean, I'm not going to get into all of this because now we're going to close the pod soon, but based on this strategy that Ethereum takes in 25 years, in 50 years, how confident are you, James, that Ethereum will continue to be the primary general purpose blockchain? Do you think that Ethereum will be around then, and do you think that its market share will be as large as it is today?
00:27:31.510 - 00:28:17.028, Speaker B: You know, it's very, very hard to kill a blockchain. I booted up some nodes from 2014 a little while ago and the chains are still running somehow. Sure, they're not traded anywhere, you probably can't go out and buy Grossel coin anywhere, or vertcoin or whatever, but the chains still exist. In terms of market share, I think that's a very complicated question. What is market share for Ethereum? Is economic activity on optimism Ethereum market share, or is it? I think so. So is economic activity on base also not ethereum?
00:28:17.084 - 00:28:22.980, Speaker A: No. I think this idea that transaction activity on l two s is part of the transaction activity on Ethereum is just wild to me.
00:28:23.020 - 00:29:33.276, Speaker B: But anyways, you have to kind of look at all of these somewhat competitively, is like when you're choosing to transact on base, like you're not choosing to transact on optimism or on Ethereum. We're seeing all of these like l two s with, what do they call it? Like alternative Das with Eigen da or Celestia da or. They're not purchasing DA from Ethereum anymore. So what actually connects those to Ethereum in any way? Like the technical decisions, Ethereum is giving up market share and directional control over itself to these officialized rollups. The roll up centric roadmap is not just for technical decisions. It's for things like market share and for users, and for new businesses and apps and everything. Whether that's good or bad for Ethereum, or whether it means in the long run it loses all of its market share, I don't know, but we can observe these decisions being made.
00:29:33.428 - 00:30:07.160, Speaker A: Some food for thought. I appreciate being able to be so candid with you, James, though, about some of these very tough questions and my personally, I think very bleak outlook sometimes. However, it's very cool to know that you are still working on Ethereum and a lot of the tooling that will be important for people over the long term to use Ethereum better and more efficiently and with more features.
00:30:07.700 - 00:31:06.364, Speaker B: So we care an awful lot about impact is we are not monetizing execution extensions in any way. This is free, open source work that init four help design and the RET team implemented. We care about making the developer experience better for the most people possible. We care about how many people run our code, how many people use the things we designed, even if they don't know we designed it or worked on it. So Ethereum is still the best place to have impact on more people. Code used in Ethereum gets downstreamed into all of these EVM roll ups. So we care an awful lot about contributing to we care an awful lot about making sure our efforts are having the most impact on the most people.
00:31:06.492 - 00:31:15.636, Speaker A: Very quickly. Final question and then we're wrapping up the pod execution extensions. Done. What's the next thing?
00:31:15.788 - 00:31:46.888, Speaker B: They're mostly done. There's a lot of figuring out, the rough edges and the bugs, and we talked to the rest team about how to test it and what we're playing with right now and limitations and gotchas and documentation and there's software is never done. Usually writing the code is just 10% of the work. And you spend two months writing code, you're going to spend two years on maintenance. So done?
00:31:47.064 - 00:31:50.340, Speaker A: Done. The writing part is done. What's next? What's the next writing part?
00:31:52.320 - 00:32:25.996, Speaker B: We are excited about applications of execution extensions. We're excited about things like base roll ups, we're interested in sequencer marketplaces, and we're interested in all of this work that's being done at the boundary point between Ethereum and its roll ups and l two s. So we're toying with the idea of writing something significant in that space, but we haven't settled on a specific design, a specific project, or exactly what it's going to look like.
00:32:26.068 - 00:32:49.290, Speaker A: Looking forward to more details as they come out. Thank you so much James, for coming onto the show. And thank you so much to everyone who is listening to this episode of infinite Jungle. We hope that you learned something new about Ethereum and we hope you will join back again for another episode. We are signing off from New York City. We hope you have a good week. Until next time, stay safe out there, everyone.
