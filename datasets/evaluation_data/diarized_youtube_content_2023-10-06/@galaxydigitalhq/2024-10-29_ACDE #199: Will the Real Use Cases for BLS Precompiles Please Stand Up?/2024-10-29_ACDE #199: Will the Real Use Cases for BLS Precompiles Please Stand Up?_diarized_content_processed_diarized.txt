00:00:10.080 - 00:00:47.743, Speaker A: Welcome to the Infinite Jungle. On today's episode, I'm going to be talking about the main takeaways of all core developers execution call number 199 where developers reconfirmed the decision to include EIP7742 in Pectra, and they also had a debate on whether or not developers should slowly increase the block gas limit and double it effectively over the course of two years. So we're going to get into that discussion, but before we get started with the show, here is a quick show disclaimer.
00:00:47.919 - 00:01:04.597, Speaker B: I need to remind you to please refer to the disclaimer linked in the podcast Show Notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities.
00:01:04.741 - 00:03:03.445, Speaker A: To start off, I wanted to give a few updates on the Petra Devnets Petra Devnet 4 did officially launch on Friday, October 18th. There is lots of debugging work already happening on the latest Devnet Barnabas, who is an Ethereum foundation developer operations engineer, talked about some of the client issues that the Aragon Ethereum JS and Grandin clients were facing. He said that Pector DevNet 3 has officially been shut down and now developers will continue to battle test the client specifications on DevNet 4, probably do so for the next week or two before setting their sights on Petra DevNet 5. The next part of the call was all focused on some of the additional code changes and other fixes to the EIPs that they want to include in DevNet 5 but couldn't get in in time for DevNet 4. One of the pieces of information that I thought was missing from the conversation around the picture devnets was was there wasn't any updates on whether or not we would get a public Pectra testnet by the time of the Ethereum developer conference Devcon, which is happening in mid November, November 12th to the 15th if I'm not mistaken. And on prior calls developers had talked about how it would be a great goal to try and get a public Pectra testnet live up and running for all of the developers that are attending that conference to be able to test out various applications on, try to interact with some of the new features that will be live on the network through the Petra upgrade. There wasn't really much discussion on plans for that on this call.
00:03:03.445 - 00:04:05.605, Speaker A: Really no discussions. The last that developers had talked about this plan, they were talking about basing the public picture testnet on top of Devnet 4 code specifications. So now that Devnet 4 is live, I do wonder if developers still intend to make another version of Pector Devnet 4 for Devcon. However, they didn't talk about it on ACDE199, so I think the chances could be slim that there actually is a public picture testnet. This was also ACDE number 199. So on the call developers were talking about how the next time developers meet It'll be the 200 mark of these calls. And it is quite interesting to think about how long developers have been keeping up this cadence of gathering together over an ACD call, how this norm of having these public calls, public zoom calls has really shaped Ethereum governance.
00:04:05.605 - 00:04:40.600, Speaker A: I too was thinking about how to make ACDE 200 a special, perhaps Infinite Jungle episode or somehow commemorate the moment. That's also what developers were talking about a little bit on the call. It's close. It's a big, I would say milestone, a big round number. Reaching a big round number like 200 is always something to celebrate. So developers were getting excited. So next developers talked about some of the additional changes that they'd like to see for DevNet 5.
00:04:40.600 - 00:05:57.105, Speaker A: I would imagine that DevNet 5 is not going to be ready until after DevCon, especially if developers do plan on doing the public picture testnet for devcon, which again they didn't mention it on this call, so I don't think it's likely. But that would take up their focus until mid November and then probably DevNet 5 after that. But so for Pectra DevNet 5, one of the key specifications changes that I wanted to highlight was around EIP2537. This is the precompile for the BLS 12381 curve operations and the precompile allows smart contract developers to be able to utilize a new cryptographic signature scheme on Ethereum. And the BLS curve is the cryptographic curve I believe is that's already used on the beacon chain, the consensus layer of Ethereum to aggregate validator signatures. But it is one of those features that would make signature aggregation, cryptographic signature aggregation more efficient for smart contract developers. It is also said to make zero knowledge proof generation more efficient as well.
00:05:57.105 - 00:07:10.853, Speaker A: So this is a cryptographic scheme that smart contract developers that applications on Ethereum did not have access to through the evm. The EVM is a general purpose execution engine, so you can really execute arbitrary. The complexity of the code that you execute through the EVM can be arbitrarily complex. However, there are very complex cryptography that would be prohibitively expensive to try and run through the evm, especially if you don't have a precompile for it. So a precompile makes some of these very complex operations, bakes it into the evm, and it sets a fixed cost for these operations, such that launching and doing these operations along a new cryptographic curve is more cost effective than it otherwise would be. I think the BLS curve is something that smart contract developers have been asking for years. Now finally it's going into petra.
00:07:10.853 - 00:08:47.885, Speaker A: But over the last couple months, and I think we've discussed this on the show before, there has been quite a bit of discussion about how to price the operations along the BLS curve. And to that end there was a developer on the call, Paul Bailika Paul, who was talking about how the current proposal to change the costs of the curve to be more accurate was not actually that accurate in his view. Originally the proposal was that the precompile is priced far too low and to across the board make the precompile operations two times more expensive. Powell was saying that the baseline costs that were given for the EIP should be redone from scratch. So rather than increasing the cost of these operations 2x across the board in that proposal, start off with completely new baseline cost estimates for how much computation these operations really require and to move forward with a whole new updated set of numbers. This is not the first time that developers have been talking about how to reprice the BLS precompiles. Since August there has been that proposal to increase the costs of these operations by 2x.
00:08:47.885 - 00:10:04.671, Speaker A: And over the last couple of months, various client teams have been benchmarking the operations with their own local devices to make sure that this 2x increase would be effective is a change that makes sense. And now here we are. Rather than reaching a decision about whether the benchmarking analysis agrees or not, developers are going to scratch the entire proposal to to increase the cost by 2x and just restart from the ground up. Like recalculate what the costs should be in the first place and then do another round of benchmarking with the various client teams. So slowly but surely developers are trying to figure out the pricing for BLS precompiles. And while this definitely this isn't the only eip, I would say that continues to have a few issues that developers have not been able to resolve. I think another one is maxeb the increase to the effective balance of validators.
00:10:04.671 - 00:10:54.041, Speaker A: There continues to be new bugs and issues found in that code. So this isn't anything to say that is alarming. I will say one of the comments though about in context of the BLS precompiles did alarm me was when one of the developers shared on the call that he wasn't quite sure what the use case for this EIP would be. He said, quote, some of the app developers have infrastructure that make it pretty hard to switch away from BM254 to BLS 1238, 381. So I'm not sure what the use case for this for this precompile is. And this developer, he had the screen name Kev. I don't know the background of this developer.
00:10:54.041 - 00:12:04.845, Speaker A: He clearly has some of these developers, they have their full names, very easy to look them up and see what they do. This developer did point out a pretty Kev he pointed out one of the something that's very alarming. I mean developers are spending all this time figuring out how to price these precompiles correctly. It's been months, there's implementation work going into this. It was said that this EIP is something that smart contract developers have been asking for years. All of the benefits of this EIP have been talked about quite a bit on the call, talking about how it would make signature aggregations, zero knowledge proof generation, these kinds of things more cost effective for apps on Ethereum to be able to utilize. And then here comes Kev to kind of illustrate that most of the applications that the at least the applications that I guess he's talked to are not thinking of migrating their operations from the cryptographic new signature scheme that they're currently using to this new one that it would be hard for them to switch over.
00:12:04.845 - 00:13:12.875, Speaker A: So I was pretty concerned about this. I was thinking in my head this is the kind of work to see whether or not an EIP is really effective is really something that applications would want. That kind of research and that kind of digging is something that has to happen before the EIP is implemented. And given that Ethereum developers have tons of priorities, putting the time and the effort to implement any IP that applications are not going to use is an awful waste of time. However, I will note there were other developers on the call who said that they would do more research, they would reach out to application developers, reach out to smart contract developers to see how they would utilize this eap, utilize this precompile once it goes live. So hopefully there are some real use cases for this part of the picture upgrade that developers are spending a lot of time on. It would definitely be a shame if the BLS precompile goes live and Nobody uses it.
00:13:12.875 - 00:14:29.923, Speaker A: Yes, there was a bunch of other specifications changes that developers talked about in preparation for Pector DevNet 5, but I'm not going to go into those, I thought. One other part of the call that I wanted to highlight some takeaways from was the debate on increasing the block gas limit as a refresher for my listeners. If you have been following along with the show, you should know this. But the way that the amount of transactions that can be included in Ethereum block are limited, the way that it's limited and capped out is through a unit of measurement called gas. So every single operation on Ethereum has a requires a set number of gas and gas is this unit that measures the computational work required to execute that operation. So the more like complex your smart contract application is, the more gas it's going to require to pay for it and to execute it on chain. And then there is a gas rate which means that gas, that number of gas is converted into units of GUI, which is I believe like a 1 billionth of ETH.
00:14:29.923 - 00:15:26.455, Speaker A: So it's converted into the native cryptocurrency of Ethereum in units of eth. And that's how you get pricing for transactions. And every single block on Ethereum has a maximum limit of 30 million gas. So this ensures that blocks on Ethereum can't be so large that it fails to be propagated throughout the network, the peer to peer network, and doesn't overload nodes, which are computers that are running Ethereum software that doesn't overload the nodes on the network. So the limit right now the block gas limit is 30 million. And there was a proposal shared on the latest call to double the block gas limit from 30 million to 60 million. This was EIP7790.
00:15:26.455 - 00:16:26.655, Speaker A: It was proposed by the same developer, Aragon developer Julio Rebuffo, who had proposed EIP 7790 a couple of calls earlier. EIP 7790 creates a mechanism for clients, for Ethereum software clients to be able to gradually increase the block gas limit. I think in a prior episode I incorrectly called this a cliff like structure. It's actually the opposite of that. In my head when I was thinking about gradual, I was like oh, you know, a cliff like structure is very gradual. It's not when you think about like a cliff like structure it goes, it's like one size or like one number and then it spikes up, you know, stays that way and then spikes up again. So that's the way that gas increases technically have happened On Ethereum forever.
00:16:26.655 - 00:17:50.727, Speaker A: When the previously before the merge, when it was miners that were producing blocks and proposing blocks on the network, they would come to consensus about what the block gas limit should be. And if they thought that the block gas limit should be increased, then miners could collectively, could collectively choose to increase that limit. And once the increase happened, it would jump, the block gas limit would jump up from say like 15 million to 20 million, 20 million to 25 million, et cetera. So Julia's proposal, which was shared a couple of calls ago, was this idea to rather than have that cliff like structure of increasing the gas limit to introduce a gradual mechanism in this structure, to be clear, would be a linear increase. So if you wanted, if client teams change the default behavior of the way that block gas limit increases happen on Ethereum, that default behavior. So that now validators, since the merge, the block proposers of Ethereum are now validators. If validators decide to increase the block gas limit, that increase would happen in a linear fashion.
00:17:50.727 - 00:19:00.351, Speaker A: So it would take more time to reach the increase. But developers could then better track how the network and network health is doing as the increase happens. So developers were talking on prior calls about how this would be a safer way to implement block gas limit increases, especially if that increase is a large one, kind of like a doubling. And on this call, Julio followed up with EIP7790, with EIP 7783 and. Oh, sorry, he followed up with EIP 7783 with his proposal EIP 7790 because the initial proposal talked about the mechanism to gradually increase the block gas limit. And his second proposal was a proposal to utilize that mechanism and suggest a specific increase. And he was asking on the call if developers could commit to implementing these changes into the clients shortly after the Pectra upgrade.
00:19:00.351 - 00:19:46.601, Speaker A: These proposals do not require a hard fork. It doesn't require client teams to all upgrade at the same time. These changes can be implemented asynchronously. However, in order to see the effects of these code changes on the network, you would want all of the clients to be able to implement it together. So Julio was basically asking for feedback on these proposals to get a sense a temperature check of whether or not client teams would actually spend the time to do this. And he faced quite a bit of pushback on his suggestions. One of the pushbacks was that the suggestion to double the block gas limit was not researched enough.
00:19:46.601 - 00:21:18.725, Speaker A: There wasn't concrete data to suggest that that is what the increase should be. Julio kind of pushed back on this comment as well, saying that his research was based on the feedback that he got from client teams and the kind of conversations that he's been having with with other Ethereum client developers, especially the Nethermine team. Ethereum foundation researcher Tony Warstatter he was saying that a block gas limit increase shouldn't be implemented until developers also implement EIP 7623, which would increase the cost of call data. And that increase in cost of the call data would effectively reduce and limit the maximum size that a block can be. Call data was the part of a transaction where quite a bit of arbitrary data was usually put there in that part of a transaction by L2 roll ups. But now of course, L2 roll ups can utilize blobs to do the same thing. And so Tony was saying that an increase to the block gas limit should either be coupled with limiting to the maximum block size in order to ensure that an increase to the block gas limit doesn't make Ethereum blocks far too large for the network.
00:21:18.725 - 00:23:07.545, Speaker A: Another developer Geth developer by the pseudonym Light client, was saying that if there is going to be a block gas limit increase, developers should first make progress on history expiry, which is this initiative to reduce the amount of data that nodes are storing about the history of the blockchain, all of the past transactions and records of accounts and their balances. The history of the chain continues to grow as more blocks are proposed. So there was quite a bit of disagreement, I would say, about is a doubling to the block gas limit? Is that even the right increase? Should it be not double, but say like a 25% increase? Should it be more than a Double? Should it be 3x? Developers were pushing back on that and then developers were also pushing back on some of the other initiatives that developers can be focusing on to reduce the technical requirements to operate a node on Ethereum. There were concerns about home stakers. We've talked about this on prior episodes, but particularly the users that are operating validators on resource constrained devices with perhaps not the most performant hardware. These are people that would probably be impacted the most by a block by a block gas limit increase. And so concerns about, you know, just moving ahead with a block gas limit increase and doubling it without history expiry, without say the EIP of Tony around increasing the cost of call data, that would all make it potentially harder for home stakers to be able to operate.
00:23:07.545 - 00:24:26.225, Speaker A: All in all, it did not quite seem like Ethereum developers were on board with this. There was a lack of consensus I would say. But then Tim, who chairs these calls, he noted something quite interesting at the very end of the conversation he recommended, given that there was so much disagreement, tabling the discussion and continuing continuing to talk about it on these other forums like the Ethereum Magicians website. But he also noted that it's not that big of a deal if developers cannot come to an agreement about these EIPs related to the block gas limit, because at the end of the day the block gas limit is something that Ethereum protocol developers don't control. Ethereum protocol developers can change many aspects of the Ethereum protocol and they will with the PETRA upgrade. But when it comes to the block gas limit, this is something that block proposers of Ethereum have control over. So whether developers think it's a good idea or not, if there's a ton of activity on Ethereum and fees on Ethereum are increasing and there's clearly a need to scale Ethereum, all one then validators can agree come to consensus to increase that threshold.
00:24:26.225 - 00:25:45.975, Speaker A: This has been done by miners before the merge when miners were block proposers, they did increase effectively the block size of Ethereum multiple times. Since the merge I have not seen this type of coordination or consensus from validators. Of course, since the merge the rollup centric roadmap has been a lot more important has been at the forefront of conversations in the Ethereum community. Many of the stakeholders of Ethereum are in agreement that most of the user activity should be happening on L2s and scaling will happen through L2s rather than scaling on the L1. It's clear that scaling Ethereum the base chain is not the highest priority. However, I do think that based on this discussion and based on the fact that it will be hard, I think for developers protocol developers to come to consensus about improvements to the block size of Ethereum. I think it is a good opportunity for validators and for the staking community to consider whether or not a block gas limit increase is something that should be coordinated.
00:25:45.975 - 00:27:33.525, Speaker A: This would increase the scalability of Ethereum. This could have some downside impacts on home stakers, but I believe home stakers are a minority of the network and the vast majority of validators are operated by professional entities that have access to quite more performant hardware and thus potentially validators have the ability to safely increase the block size of Ethereum without damage to the health of the network. So I thought that last comment from Tim was an important one and hopefully one that highlights the agency that validators have over this part of the Ethereum protocol and something and a block gas limit increase, something Julio was arguing for. I think that his arguments and his rationale for why a block gas limit increase is timely now and could safely be done over the in a gradual manner. I think this is something that validators should seriously consider. It's not just up to Ethereum Protocol developers to figure this out, and it's clear they likely will not be able to come to consensus on this anytime soon, especially as developers are very focused on PETRA and their bandwidth is constrained. But but for the staking community and for validators, this is a scalability increase that they themselves could take charge on and do themselves if they wanted.
00:27:33.525 - 00:28:13.687, Speaker A: Yes, those were my main takeaways from ACDE199. I hope that you learned something new about Ethereum on today's episode. Thank you for tuning into another episode of the Infinite Jungle. We have a new episode of Infinite Jungle coming out tomorrow with with two guests. I will have Robert Miller from Flashbots and Lily from Astria. We are going to be talking about the latest developments in the MEV space, so be sure to tune in for that episode. I am signing off from the Concrete Jungle New York City in your explorations of the Infinite Jungle that is Ethereum.
00:28:13.687 - 00:28:14.455, Speaker A: Stay safe out there.
