00:00:00.240 - 00:00:00.820, Speaker A: Foreign.
00:00:09.760 - 00:00:26.100, Speaker B: Welcome back to the Infinite Jungle. I am so excited for this episode because we have two extremely talented developers on this show. We have Terence and POTUS from Off Chain Labs. They work on the Prism client. Hi, POTUS and Terrence, thank you for being on the show.
00:00:26.650 - 00:00:28.466, Speaker C: Hello. Thank you for having us.
00:00:28.618 - 00:00:29.950, Speaker A: Hello. Thank you.
00:00:30.250 - 00:01:11.890, Speaker B: Welcome back, Terrence. We love the frog hat from DEVCON. We are going to talk about EPBs enshrined payload block separation. Now, instead of enshrined proposal separation, we're going to separate out the execution payload from the consensus block. We're going to talk about this, why it's an important proposal, why it should get into Fusaka, and a couple other questions regarding EPBs. But before we get started, here is a quick show disclaimer for our listeners. I need to remind you to please refer to the disclaimer linked in the podcast Show Notes.
00:01:11.890 - 00:01:48.220, Speaker B: And note that none of the information in this podcast constitutes investment advice, an offer recommendation or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities. Okay, so before we get into EPBs, POTUS and Terence, this is the week after DEVCON, I thought to start us off easy, we should talk a little bit about devcon takeaways and highlights before we get into the technical stuff, because obviously our listeners love technical discussions, but that was a big conference. Potus, what would you say were your main takeaways, highlights from the week?
00:01:48.870 - 00:02:08.930, Speaker C: Oh, I love defcon. It was fantastic. I typically dislike these large conferences. I like more focused workshop type conferences. But this was perfect. We had a small workshop for L1 core developers, like the weekend before, which is more technically oriented. And then during defcon, it was a lot of meetings.
00:02:08.930 - 00:02:16.420, Speaker C: The talks were high signal to noise ratio. It was, it was a fantastic conference. I loved it.
00:02:17.200 - 00:02:21.980, Speaker B: Do you feel like you got really good constructive feedback on epbs?
00:02:24.080 - 00:02:57.446, Speaker C: I did. I did get. It's sort of like I feel like there's a dichotomy, like I get some feedback from core developers, from client developers that they're strongly committed to it. Most of them are strongly committed to it. They're already trying to implement it and they all believe that that is sort of like urgent to have. And then from EF research, I get some sort of different kind of vibe where, no, we better push back and prioritize other kind of things. So I feel like there's a dichotomy between research and implementers here.
00:02:57.518 - 00:03:02.278, Speaker B: Terence, what about you? What were your main takeaways and highlights from the conference? Sure.
00:03:02.334 - 00:03:58.540, Speaker A: I think before DEF con, we had like a finalized devnet, so I thought that was pretty awesome. That like, I was a little bit worried that like, we don't have anything to show for at defcon, but I think they kind of just like left the stress out of our hand. So defcon was definitely more enjoyable knowing that we had some implementation, we had a DEF net and we could finalize it. I guess my biggest takeaway from defcon is that like, it was surprising to me that I think the biggest supporter out of everyone besides us may be the EL dev. Because I went to a few EL talks and they were like shielding EPBs, like it is already happening. Because I guess for reasons that we will get more into in the next 30 minutes, the EPBs really helps the institutional layer client. So to me, that was the biggest surprise that I have.
00:03:58.840 - 00:04:15.468, Speaker B: Okay, interesting. So, I mean, from that terence, it sounds like you really went into devcon trying to shell epps. Because when you said devnet, I was thinking about like Mekong. I was thinking about Petra, but I guess you were thinking about like finalize DevNet for Epps.
00:04:15.644 - 00:04:36.156, Speaker A: Yeah, this is a local interrupt DevNet between a prism and the GIF. I mean, it is very early in terms of implementation. We are skipping up a few details, but we were able to prove that we were able to separate the block with the execution payload and have a finalized checkpoint on top of that.
00:04:36.308 - 00:05:07.816, Speaker B: Okay, gotcha. All right, let's get into why EPPS is actually that important though. Because I think originally the idea around on epbs, at least from the way the community understood it, was, oh well, like it's going to remove this need for a trusted entity, the relay. That doesn't seem like the biggest selling point anymore for EPBs. Would you agree with that, Terrence, that that's not the main point of EPBs anymore?
00:05:08.008 - 00:05:20.202, Speaker A: I think the EPBs, to me, the biggest selling point right now is the notion of pipelining that in a way that you could pipeline consensus block with the execution payload. And that opens up a lot of magic.
00:05:20.266 - 00:05:20.490, Speaker C: Right?
00:05:20.530 - 00:05:52.322, Speaker A: If you look at POTUS talk at devcon that you have more time to validate the execution payload, you have more time to propagate the block and the blobs, and it opens up future design space like peer dos, fossil and stuff. And to me, that is probably the most exciting part about EPBs. Of course there's the other part that if you remove the relayer, you allow the builder and the validator to work directly together. That is also better, that is more neutral, but that is more debatable with other parties.
00:05:52.386 - 00:06:23.890, Speaker B: But yeah, and you mentioned POTUS in your talk that one of the big reasons for it, outside of I guess what you also mentioned terence of open possibilities with some of these other kind of proposals around inclusionless and pure das is the bandwidth. Bandwidth improving, bandwidth constraints. Can you talk a little bit POTUS about how important of a, I guess like advantage that is to arguing for EPBs, bandwidth improvements in bandwidth constraints for nodes.
00:06:24.950 - 00:06:58.620, Speaker C: So there's today bandwidth is the bottleneck. Probably you're going to have trouble listening to me in this call. And this is because I'm on the same homeward network where I run my node and so you can actually see that I cannot really have a good call while I have my home staking node. And this is a big capital in the world. Bandwidth is the problem for most home stakers. And bandwidth is the biggest problem that we have to actually scale blob count. So if we want to actually scale Ethereum, we need to have more blobs per block.
00:06:58.620 - 00:07:42.102, Speaker C: And if you increase the number of blobs, there are two main concerns. One is peak bandwidth at the time that you need to broadcast the blobs. The other one is average bandwidth. EPBS does not change the average bandwidth. You're going to have to broadcast as many blocks as you can. But what EPBS does is that it gives you instead of the two seconds that you currently have from sending your blog with all the blobs and getting all those blobs broadcasted throughout all the network, EPBs would give you about from 9 to 12 seconds to do that. So that removes entirely the problem of having to broadcast a lot of blobs in a very short period of time.
00:07:42.102 - 00:08:23.620, Speaker C: So it only average bandwidth that now actually matters. So if you couple this with solutions like Beer does that are aiming to actually scale and actually increase by a large amount the number of blobs, then you're going to realize that nodes can actually not increase the number of blobs currently on PR DevNet because they need to do a lot of things very fast. They need to produce not only upload the blobs, but they actually need to produce the proofs for the blobs, and they have a very short time to that. So what BPPS does in that context is it gives them several seconds instead of just a couple of seconds to do that. With regards to pipelining, that's the advantage.
00:08:24.320 - 00:09:01.190, Speaker B: Even with this idea that you don't have to like upload or download the full blob, you can sample it with peerdas and in addition to all of the other kind of networking improvements related to like attestation refactoring that's coming in in PETRA and the MAX EB which will allow consolidations, there seems to be quite a few other proposals out there trying to impact this bandwidth constraints problem. Is epbs going to, you know, is it really all that necessary in comparison to all these other kind of improvements that we expect are going to be coming anyways for nodes?
00:09:01.850 - 00:09:52.350, Speaker C: Definitely. We're talking about orders of magnitude. It's not like a palliative solution like reducing the number of aggregations, which is true, that definitely helps us and that actually helps us in the hot path, which is a attestations is on the hot path. But what EPBS gives us is orders of magnitude more time to propagate the data and to propagate the actual transactions instead of just the tiny bit which is the consensus block. So I think we're talking about completely different orders of magnitude in the timing that you get on bandwidth from EPBs versus all the other solutions. Besides bandwidth advantages, you get a lot of execution advantages and better pipeline for your cpu. Today you need to validate three things.
00:09:52.350 - 00:10:27.190, Speaker C: When you get a block, you need to validate that the consensus part was correct. That's a state transition on the consensus layer. You need to validate the whole execution of the block. So execute all transactions and you need to validate the fact that the data was available. So bandwidth is about the data being available and broadcasting the block, but execution is about cpu. You need to execute the whole block and there are those constraints. That's why our blocks are not so large and we just cannot hash a lot of things because we need our CPU in that very short period of time, which is two seconds with the pbs, you get nine seconds to do that.
00:10:27.190 - 00:11:25.460, Speaker C: So that means that your CPU can, you can run this in a much smaller computer or you can pack in more transactions and execute more stuff because now you have more time to execute your flow. So that is directly a scaling factor. It is true that execution is not today a bottleneck. Disk is and bandwidth are. But if we could solve those other two, then EPBS enables us to have very large blocks. Now the other thing that we discuss off chain, off chain, that we discuss offline is the fact, sort of like a hub for censorship, but it's more than censorship, or rather than censorship is accountability. Today, if something bad happens, whatever it is, if there's a bug and the builder doesn't produce a block, or if the builder is censoring and you're going through a non censoring relay because you expressed I want to take only non censoring relays, but the builder decides to censor, there's nothing you can do.
00:11:25.460 - 00:12:12.474, Speaker C: You cannot choose non censoring builders. You can even choose trusting them because there's no advertising for this. So what this does, what EPBS does, is that when you, When I see a block that wasn't for me, I am just an observer in the chain. The block was produced by Terrence's chain, by Terrence's node that he just contacted Chris Builder. Then if Chris's builder is censoring, I can detect this immediately because I see transactions in my mempool that weren't connected and I can blacklist immediately. And this I can do because I have a signed block from them that I know that has been not including transactions that I see are includable. So today this is impossible because we do not know.
00:12:12.474 - 00:12:47.730, Speaker C: The software cannot know in a trustless manner who built that block. It would only see Terrence's block. So if vanilla software immediately blacklists builders for censoring, for badly censoring something like transactions that weren't included for a long time or transactions that are reorged, those are the worst type of censoring. Vanilla software can immediately blacklist them. So accountability is a big thing. I'm not claiming that EPBS solves censorship for that. We have fossil, we have other solutions, but accountability allows us to make actually the builder accountable for mistakes and to.
00:12:47.770 - 00:13:04.878, Speaker B: Confirm relays themselves though have that kind of ability to see where blocks are coming, like which builders are building which blocks. But relays themselves are not open source. I mean some of them are, but like they're not publishing this information. Correct.
00:13:05.054 - 00:13:40.526, Speaker C: But also you cannot do this on chain. You cannot do this in a trustless manner, in an automatic manner on the node. Because the way that we do today, what happens today when there is block Trout had a couple of bugs and we had to go on a closed telegram channel asking, hey guys, can you give me the logs? Can you give me the headers? Who gave you this header? I want to know who is proposing these blocks. Our sync was producing bad blocks eventually. And to get back to this, to diagnose this, we have our users complaining on discord. Hey, I lost a block, I just lost a blog. I propose one every six months and I just lost a lot of money.
00:13:40.526 - 00:14:02.326, Speaker C: And it turns out that it was a builder's bug. But we can only find out on a closed telegram Channel like begging for logs because they don't want to give us the logs either because the logs themselves reveal something that they don't want to have in the open. So we need to just trust what is the postmortem that we're going to get. So this kind of like backdoor deals is something that EPBS completely solves.
00:14:02.518 - 00:14:29.042, Speaker B: I mean completely is a little bit of a strong word because isn't all of these bugs that you have to kind of do due diligence on with the relay something that users are going to have to do with the builder if there is a particular bug? Obviously yes, it's true that you can just blacklist the builder. You can just switch over to another builder. Similar thing with a relay. If a relay has a bug, you have the ability to fall back on a other relays and you don't ever have to do follow up.
00:14:29.146 - 00:15:04.814, Speaker C: That's not true today. If the relay fails and it doesn't give me the block, then I need to trust that the relay is going to honor the bid. I just got a bid and I just proposed a blinded block and I was promised money. Where is it today? I just need to trust it and epbs. That's not going to happen. Not only can I blacklist the builder, but also I am sure that I'm going to get my money no matter what. If there is a bug on a builder, I don't need to go and circuit break it and cut all of the MEV blocks, which is our solution today.
00:15:04.814 - 00:15:29.748, Speaker C: I can actually circuit break only that builder that is having a bug and I do not forfeit MEV on the stakers. So there's a lot of advantages on accountability and this removal of the trust assumption that. Do we know if actually Block Trout honored every single block on the last event they might have. They promised to.
00:15:29.884 - 00:15:36.324, Speaker B: Yeah, no, that makes sense because of the whole staked part too. You know that you will get your bid no matter what.
00:15:36.492 - 00:15:42.040, Speaker C: You get it immediately as soon as the payload is. Well now we're changing that, but you get it on chain immediately.
00:15:42.700 - 00:15:53.026, Speaker B: Okay. Even if the builder themselves fails, which again would have a higher accountability for the builder not to fail because they know that they have that. Okay, that makes sense.
00:15:53.058 - 00:16:13.058, Speaker C: And it goes both ways. It goes both ways. Today the relay can actually screw the builder. The relay can take the block and not. They don't do it because the relays are builders today anyways. But the relay today could take a block and not broadcast it on time. Are they honoring that block? Are they honoring The MEV that was in that block, I do not know.
00:16:13.058 - 00:16:29.976, Speaker C: This is behind some closed doors. EPBS solves that for the builder itself. If the block is weak, EPBS guarantees that the builder can not produce their block and they're not going to have to pay the bid. So there are guarantees both ways for the builder and for the proposer.
00:16:30.168 - 00:17:15.356, Speaker B: Yeah, I guess right now too, a lot of that depends on the builder's reputation and how relays work with the assumptions around builder reputation and how far that goes. This would be enshrining more of those trust assumptions though into the protocol. So I see the added benefits. Terence, you mentioned it could open up the design space for other proposals like inclusion lists. I kind of want to get into some of the concerns around EPBs, but any other kind of important aspects of why EBPBS is important, what it would unlock before we get into some of the problems.
00:17:15.388 - 00:18:42.784, Speaker A: Terence, I think like I still think there is a reason to do EPBS because of today that to propose a block using MEV boost you have to use a relayer because you cannot trust the builder, builder cannot trust you. And EPBS opens up that design space by saying the must trust part to basically you may trust. And to me I think that's very profound. That's very different, right? Just in a way you can think of. Like today builders are restaurants and they want to serve food to the customers and the customers are proposers, right? And imagine today the restaurants can only serve food through like doordash or like uber eat, right? You have to always like go through the third party service. And to me that to me is slightly, I, I would say more dystopia in a way because like there, as you see there are definitely, I don't want to name name, but there are definitely backroom deals out there, right? For example, they do like second price and auction and stuff. And as a builder, as a, as a small builder, it's not clear to me like am I getting the best price? Like do I trust this relayer not gonna scoop me over down the line just because they have better relationship with the other builder does solve that does make him more neutral.
00:18:42.784 - 00:18:46.620, Speaker A: And to me I think that is one of the reasons as well.
00:18:47.320 - 00:19:26.340, Speaker B: Does it help small builders though? Because I'm under the impression small builders likely won't be able to stake the amount required that they need to to be directly connected to the proposer. So they'll have to connect with a relay anyways. And if relays as we understand it are as unprofitable as we know that they are technically proposers are already interfacing with builders directly. They are looking at a relay, but the relay is controlled by the builder and the builders themselves are likely I guess to vertically integrate anyways with relays over time. Isn't this just accelerating the process?
00:19:27.520 - 00:19:39.564, Speaker A: So in the current design we have the proposal as validator and then the stake amounts 32 ETH. And we do that for simplicity, right? But we can say in the future design lower that down to one eth.
00:19:39.612 - 00:19:39.964, Speaker C: Right?
00:19:40.052 - 00:20:08.140, Speaker A: But if you look at today, if today for a builder to use an optimistic relayer, which is all of the designs out there, they have to stake one eth with optimistic relayer, right? And they also scares up like oh man, if today a builder wants to register with 5Optimist Relayer, they basically have to stake 5 ETH, right? And they have to do it five different times versus just doing one time with EPBs. And that is significantly better in my opinion.
00:20:09.120 - 00:21:13.528, Speaker B: Only having to stake one time through epbs. And just to confirm in the way that EPBS work and its specifications right now MEV Boost as a software simply allows, I'm under the impression that it simply allows proposers to connect to multiple relays at a time. So MEV Boost, the idea is that you don't have to connect to just one relay, but you can connect to multiple at the same time. In the EPBS model, this will allow a validator to connect to multiple builders directly at the same time. Is that correct, Terrence? Okay, good. And also just to clarify in the way that this works in the current designs, POTUS you mentioned in your latest kind of blog post or hackmd post which I will link to in the show, notes that proposers or not proposers, builders may have to stake according to the value of the block. So if the Block's value is like 400 ETH, they'll have to stake 400 ETH.
00:21:13.528 - 00:21:23.220, Speaker B: Does this mean that the amount that a proposer will or a builder will have to stake will change every single block or does the stake amount stay the same?
00:21:24.880 - 00:22:05.230, Speaker C: So let me describe a little bit. What is the problem? What is the design decision here? But right off the bat is yes. So if you want to bid for a block that is worth 5000 ETH, then you better have 5000 ETH in the beacon chain at that time. But actually the way that works, first of all, we haven't seen blocks that actually create that money. But actually there's no way, there's no known way. Even if we process Payments on the execution layer. There is no known way today to process a payment from money that was extracted from the block that you're building.
00:22:05.230 - 00:22:50.900, Speaker C: I know it sounds confusing, but the whole idea is that if we do it on the beacon chain, then you have to have the money already staked. But if you do it on the execution layer in a trustless manner, in a way that we are certain that if you don't produce the block, if you don't serve the block, still the proposal will be paid the amount that you promised. The only way that we know how to do this today forces the builder to already have that money up front. It's not money that he can actually produce from the block itself that he's bidding for to be able to pay it, because there's no way of doing that today. We don't have the ZK magic that is needed to do that. So even if we were not to stake the builders, the builders would have to have the money up front. So that's there and that's what it is.
00:22:50.900 - 00:23:15.708, Speaker C: Having said so today, builders, as Terence was explaining, they need to be whitelisted by relics. That's an opaque market. I do not know how it works. This is something that is happening behind closed doors. If I wanted to have my own builder potasses builder, I do not know how I'm going to get people to connect to myself. I don't know whom do I need to talk. I probably need to go to ultrasound or flashbots.
00:23:15.708 - 00:23:51.632, Speaker C: Hey guys, I'm trusted. Let me build blocks on EPBs. We're looking into solutions with sort of like lidos or rocket pool that allow for 1 ETH or 1.3 ETH. Currently, the CSM and rocket pool, it's likely more, but then you have a low amount of stake and then you have a validator to stake with. And we're looking for solutions along those lines. And there's some promising ideas that would allow like CSM validators to stake only one ETH and build blocks.
00:23:51.632 - 00:23:59.360, Speaker C: So that would be a completely decentralized way and trustless, free, no white listing for builders with a very low stake.
00:23:59.520 - 00:24:22.988, Speaker B: I do think that those efforts are important and it would be good to see the viability of small, small builders. I guess the truth is that there is kind of a handful of large builders that dominate the market, will likely continue to dominate the and they will for sure have enough capital to to.
00:24:23.044 - 00:25:22.084, Speaker C: Connect with proposals the large two builders already are in. They told me there's. We don't have any problem with taking we don't care at all. But actually so the problem that is on the background here is that the reason why the building set is so centralized is private order flow and neither epbs nor any of the solutions that we have nothing in the roadmap that I'm aware of solves that problem. Private overflow seems to be here to stay. I am not trying to attack that problem because I just don't know how to solve it. What I do know is that if we go with a system that allows for a decentralized way of having builders which are low state, like using sort of like a LIDO validator, we may allow for app owners that eventually have from time to time have a very large amount of MEV in their own transactions that they own not to sell that private order flow and exploit themselves by having to be staked a low amount.
00:25:22.084 - 00:25:43.690, Speaker C: So that's why I'm looking to solutions to this problem of allowing like decentralized builders this way. I don't expect ever to lose the fact that the Beaver and Titan are here to stay. They're going to win. Probably one of them is going to kill the other one. I do not know how that works. It seems to be a centralized market, but from time to time I hope to get a small builder to win one or other objects.
00:25:44.670 - 00:26:11.628, Speaker B: That does seem like the bigger problem I'm sure. I mean there I'm sure there's some kind of research to this event to try and decentralize the builder market. But on the topic of an app that might have a lot of MEV at some point or another to confirm. You mean like being able to sell that odor flow to a specific app builder like a smaller local builder that this app knows just to be the builder?
00:26:11.724 - 00:26:37.330, Speaker C: Like I have an app. I am. I run as part of my infra. I run a simple validator that I just take with one it and from time to time if I see my my order flow of transaction that I have out of my own ui, I can actually exploit that MVD and I mean redistributed among my users for example. Yeah, instead of having to rely rely on trusted players as it is the market today.
00:26:37.450 - 00:27:08.280, Speaker B: Another kind of point or concern that you had raised POTUS in your in your post about the EPBS design is that it will make transactions getting into blocks longer by six seconds. You mentioned that this UX degradation may not be a problem with something called slot auctions. Can you talk about what that is? Is that even available today? How, how, yeah, how feasible? I guess Is that a solution to this problem of ux?
00:27:08.860 - 00:27:41.516, Speaker C: This is a technical point. So currently on the EPBS that we're proposing, again, the auction itself is sort of like a trivial part of it. You can swap whatever auction you want. The core thing is the separation of the payload and the block. And then as an implementation detail, you can use different kind of auctions. EF Research, for example, likes this idea of execution tickets or execution auctions in which the protocol itself is the auctioneer. And that's absolutely compatible.
00:27:41.516 - 00:28:35.026, Speaker C: It's just that there are some research questions that we do not know how to answer. That's why we cannot implement this today. So today the only two things that seem to be implementable are either the builder, the proposer, sends a block with a bid from the builder. So this is a promise of payment. And the question is, that bid, what does it include? If the bid includes a commitment to a particular payload, that means that the builder already has built that payload and it's just holding it off until he sees the commitment on chain to that particular payload. Then there's a delay between the bid being accepted and the payload being revealed, in which no one can include any transaction because the payload has already been built, it has been committed to, but it's not on chain. So that's the extra delay that happens.
00:28:35.026 - 00:29:12.988, Speaker C: On the current version of epbs, this is called a block auction. Now there's an option in which you have a slot auction in which instead of committing to a particular payload, you just commit to a builder and you say, I am going to take three ethics. This is the bid that the builder has promised me. And the builder can reveal any payload he wants. He can do it three seconds later. The point is that then in that situation, the builder can include a transaction that he just saw right on time, right before building the block. But the problem with that approach is that indeed it produces a huge advantage to not go in the protocol.
00:29:12.988 - 00:29:19.894, Speaker C: If we go with this approach, we expect validators to go off protocol for clients and run backdoor deals.
00:29:20.022 - 00:29:34.930, Speaker B: That makes sense. And I guess it also makes the whole staking part too, a little bit harder because you don't know the value of the block that you would have to stake for. I mean, you wouldn't know that it's a 400 ETH block. You wouldn't only know that it's going to be a block with some amount of money in it.
00:29:35.550 - 00:30:16.520, Speaker C: That's a fantastic point, because that actually is a centralizing force for builders as well. Only very, very advanced players like, say, Wintermute or these market makers are the ones that are able to pinpoint exactly what the value would be of a block, or not exactly, but much better than many others what the value would be on a block on the future. So that's one of the critiques that people have. For example, Arbitrum is now running these fast lanes and one of the concerns was that big players might be winning those lanes because they're much more specialized in knowing what the value would be in the future. So that's another disadvantage of having slot auctions on L1.
00:30:16.820 - 00:30:38.400, Speaker B: I see. And without slot auctions, assuming that there is that delay that happens the six seconds, I mean, Terrence, do you think that's a blocker to the epbs? Do you think that it's going to be used as kind of one of the reasons why further research is necessary, why epbs isn't ready for inclusion in the next Ethereum upgrade after Petra?
00:30:39.270 - 00:31:07.048, Speaker A: I don't think so. I think definitely we have been exploring the trade off space between slot auction and block auction and currently we are going with block option. And it's honestly from the specs perspective or even implementation perspective, it's not hard to switch to slot auction. If we can clear proof that is better. But I don't think neither is a blocker to say that we should not do EPBs for the F fork.
00:31:07.174 - 00:31:47.060, Speaker B: Hmm. Is another blocker in your view though, Terence? This idea that, oh well, commit boost is going to be ready and Eigenlayer will have some proposals ready to really secure these out of protocol ways to remove the need for a trusted relay to get the same benefits. Maybe not the benefit of actually bandwidth constraints, but like to get some of the other benefits of separating the proposer from the builder. Are all these other out of protocols solutions in your review sufficient to delay the implementation of enshrined pbs?
00:31:47.640 - 00:32:56.040, Speaker A: I don't think commit boost helps in any way with regards to what the benefit the EPBS bring. I think commit boost has more of a centralizing factor because now you need to have the relayer that runs the commit boost software, you need to have the builder that runs commit boost software, you need to have the builder or the proposal that run the community software. So you need all three parties to opt in and then as a builder or proposer it becomes more confusing because which layer should I use? Oh, I have to use this layer now or I have to only opt into this proposal. And that to me, like, to me it's become more messy, right? And it turns out that epbs does help this type of pre conf or proposal commitment in a way that it opens up defense space to be able to slash the builder because now the builder is actually registered on chain. Yes, and to me that kind of makes it better, but I just don't see how commit boost solve the current problem in any way.
00:32:57.060 - 00:34:05.402, Speaker B: I had the commip Goose Kaizen on this podcast and one of the rationales was that the various sidecar mechanisms that they could have outside of, you know, MEV boost being attaching in like a sidecar. You could have other types of sidecars that you could attach to the Ethereum block and one of them could be the removal of I guess existing relays. It could be a different kind of relay that they implement, but it doesn't I guess remove any trust assumptions around relays in general. So that's a. That's definitely a fair point. Any other I guess push, what do you think is going to be the main pushback I guess to including EPBS in Fusaka potus? Do you have any additional based on your conversations with developers, you mentioned in the beginning of the podcast that execution layer teams are very gung ho, very enthusiastic about separating out the payload. What do you think is going to be the biggest challenge to getting I guess the Ethereum foundation researchers on board with this?
00:34:05.586 - 00:34:39.821, Speaker C: Just a couple of quick comments on previous topics. The six seconds thing that's definitely not a blocker. If you look today, which are the users that are time sensitive to transactions? These are users that are anyways, I mean they're trading, they're trading on high frequency and they really need the pre confirmation. They will get this pre confirmation anyways from the builder beforehand. So it doesn't matter. People that are transacting on a timely manner, they already know the transaction will be in. So POTUS that is sending their transaction on their own node to the worldwide.
00:34:39.821 - 00:35:32.418, Speaker C: I am going to have to wait for the next block, but still is the next block. So that's so the degradation is really minor. For people that are actually time sensitive, they're going to get immediate confirmation anyways. So for the second topic which is the commit boost, all the designs that I know about that use commit boost actually they become better because this is not about removing the relay. You should think that the builder itself becomes a relay. So on EPBs since the builder becomes a relay then you can attach as much sidecars as you want. But because now you're doing this on the relay side so all of your protocol moves into towards enforcing whatever you're Doing whatever Eigen layer or restaking sidecar that you want to put or whatever pre confirmation sidecar you want to put.
00:35:32.418 - 00:36:10.172, Speaker C: You put this on the builder side and you force your proposers that are using to white list just a particular builder that are now called like preconfig gateways, relays or whatever it is. Now they're just going to be the builders that are relays. So it becomes much simpler to design. Now as to what is the pushback that I would expect from 40 PBS, I can tell you what the pushback would be on my side would be no, this is just too complex. It is a large EIP why we should have it today. And I think I made a very compelling argument as to why we should have it today. But as with any large change, you need to convince people that it's important to do today.
00:36:10.172 - 00:36:42.092, Speaker C: And there's many people that have important changes that they also want to have in the next fork. If you talk to Guillaume, he's going to tell you, no, we need to do VERKL now. If you talk to people from Aragon, they're going to tell you we need to have EOF right now in the previous fork. And I agree. So I mean there's many developers that are. All of us are arguing for something that we consider important and we sort of like have a niche of the things that we work on. I consider this problem very important and that's why I want it right now and that's why I'm working to have it implemented right now.
00:36:42.092 - 00:36:59.460, Speaker C: But I suspect that that's going to be the main pushback. Like we just have that much bandwidth. Do we really need to prioritize this over other things? And I do think that this is a big priority because it enables peer DAs, it enables other scaling solutions that we don't have otherwise.
00:37:00.280 - 00:38:03.524, Speaker B: I think that's right. I think that is probably going to be the biggest pushback because on ACD calls it's very rare that you see somebody propose a call code change that everybody agrees is absolutely wrong or unnecessary. Everybody usually agrees there's value to it, but is it enough value to kind of like prioritize over and ahead of other code changes? How is it in the governance process that you POTUS think those disagreements should best be resolved? Because in Pectra, I think the way that those disagreements were resolved was cut quite contentious. It drew out the planning process in for many months until developers were able to agree on kind of like a finalized set of things. But it still irked many developers to see EOF peer das, I don't know ssc things that were not included. So there is no technical roadmap anymore post merge for Ethereum to follow. There is no one priority that all developers agree on is more important than others.
00:38:03.524 - 00:38:20.378, Speaker B: Every developer is trying to push their own code change and developers generally agree all these code changes are helpful. What is the best way to resolve these agreements in such a way that kind of doesn't delay the Ethereum upgrade timeline?
00:38:20.474 - 00:38:54.820, Speaker C: I don't have a good answer to that. You just pinpointed what is the current trade off that we have today in Ethereum governance? We are a much larger group than we were four years ago when I got in. And the people that were before that time, they were a much smaller group. So we have many more cooks in the kitchen today. That makes it much harder to come to agreement on anything. That makes it much slower to advance on anything. At the same time it makes it much more robust.
00:38:54.820 - 00:39:26.944, Speaker C: We now have five consensus layer clients. Our chain is much more robust just because of that. Just because we have five different clients that they need to agree, they need to have five different implementations of the same thing. And so this comes at a cost. And with regard to governance, we still have this situation in which certain people within ACD have different weights on their opinion. Like if I say something it's going to be very, very different than if Vitalik comes and says something. And there's a reason for that and it's a valid, very valid reason for that.
00:39:26.944 - 00:40:21.110, Speaker C: So I mean playing this game of like political weights or like, whom do you need to convince before or not is not the kind of game that I'm good at. And I'm sure that there's other people that are much smarter than me that have thought deeply about the situation of Ethereum governance. I would say that yes, it is a trade off. We are in a good spot in that trade off in that we have a very robust chain, by far the most decentralized one and by far the one that, that is susceptible to not to. Even if we are attacked, if we have a strong attack from very heavily invested people, we are going to survive. And this comes at this cost that we're just slower in making decisions, especially when you want to make big changes. So I'm just hopefully trying to convince everyone.
00:40:21.110 - 00:40:58.530, Speaker C: And it seems that I got, and I say I, but I mean, of course it's a few of us and Terence is here, but there's many other people that are working on this and it seems that we got a Few people from the client teams interested in this. I wouldn't be so far as Terence. That said ol clients, I think Terence was referring to a talk by Marek from nethermind. Nethermind is certainly on board with this. I think Aragon for the most part is on board with this. I'm not sure. But for example, the Geth crowd is not really clear that they're in favor or they themselves are separated on this.
00:40:58.990 - 00:41:46.786, Speaker B: Yeah, it's not. And I do think that those efforts to try and get everyone on board is really helpful. But for an example like eof, almost everybody was on board except for one team. And so it doesn't always seem as though the amount of consensus for an upgrade is what means the upgrade gets into an upgrade. So. And I think what you mentioned POTUS of having of certain people for right reason, having political weight in the process can matter more at times. Terrence, any thoughts to add on how these disagreements should be resolved and whether you think, I guess like whether you think the way that I guess your team is going about trying to get EPBs into Fusaka is effective is going to be effective or not?
00:41:46.858 - 00:42:36.414, Speaker A: I don't really have a good answer on how to handle disagreement as well. I mean, just like Porter said that like, I think that's a trade off, that the fact that we have disagreement means that we have a bunch of smart people thinking on things and trying to make the things better. And I think that's fairly positive in terms of how we can get this into Fusaka. I think we just need to keep pushing along. We have 12 breakout calls there and then we have, I think four out of five instances that our client team either has expressed interest on implementing or is in the process of implementing it. I think our SPAC is in a pretty good place, almost as good place as PIA does and just keep implementing it, finding bots and just chugging along.
00:42:36.582 - 00:42:57.916, Speaker B: Well, thank you so much, POTUS and Terrence for sharing your thoughts on pbs. I look forward to seeing how things shake out for Fusaka and I hope I'll be able to have you guys again on the pod 2 as the EPBS festival specifications get more finalized and fleshed out. Yeah. So POTUS and Terence, thank you for being on the show.
00:42:57.988 - 00:42:59.180, Speaker C: Thank you for having us.
00:42:59.300 - 00:43:00.680, Speaker A: Thank you for having us.
00:43:01.300 - 00:43:14.760, Speaker B: And thank you to our listeners who were listening in to another episode of the Infinite Jungle. We hope that you learned something new about Ethereum. I am signing off from the concrete jungle that is New York City. Terrence and potus, where are you guys signing off from.
00:43:16.430 - 00:43:18.966, Speaker A: I'm from Seattle, so that's where I'm right now.
00:43:19.038 - 00:43:20.810, Speaker C: And I'm in Rio de Janeiro.
00:43:21.390 - 00:43:42.774, Speaker B: Very cool. Very cool. Great. Well, we're signing off from all various parts of the world. I hope that you'll join in for another episode of the Infinite Jungle in two weeks time. Again, there is American Thanksgiving happening this week by the time people are going to be listening to it. So yeah, tune in again in two weeks time for a new episode of the Infinite Jungle.
00:43:42.774 - 00:43:48.140, Speaker B: Thank you everyone for listening in your explorations of the Infinite Jungle, that is Ethereum. Stay safe out there.
