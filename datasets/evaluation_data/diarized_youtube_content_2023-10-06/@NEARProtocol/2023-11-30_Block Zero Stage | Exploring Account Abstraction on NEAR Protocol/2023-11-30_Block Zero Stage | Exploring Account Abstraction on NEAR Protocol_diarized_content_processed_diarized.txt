00:00:00.170 - 00:00:20.160, Speaker A: Amazing. Say it all the time. There are so many exciting things happening on near. And next up, I mean, we have an amazing person coming up to give us a speech on exploring account abstraction on your protocol. Edward Chu from, you probably know, meteor wallet. Let's give a round of applause for Edward, everybody.
00:00:36.650 - 00:01:03.002, Speaker B: Hello, guys. Is it clear? Good. I'm a little bit nervous now, but thanks for coming. So my name is Edward and today I'm very proud to sort of share my perspective on account abstractions, especially on Nier, and why we are so bullish about it. So before we start, just a little bit about me. I'm Edward. I'm from Malaysia.
00:01:03.002 - 00:02:01.378, Speaker B: I've been a software developer with more than five years of experience, highly passionate about Defi and crypto. That's why we're here. I'm the founder of Near Tinker union and also media wallet, and I'm also currently the maintainer of Miniawallet. Why should you stay? Why should you listen to this session? I think there are a couple of things that is very interesting and can bring value to you. So first of all, I think you would love to know a little bit about account abstractions and why we believe they are game changers. There are huge things in account abstractions that we have often heard people talk about, but today I would like to bring that to you in a very easy to understand way. Second thing is, if you're excited to create on near or even just smart contract, but you're not sure about what to do, I'm going to share a couple of problems or issues that we're currently facing in terms of like smart contract account and the contractions, be it on Nier or on EVM ecosystem, maybe there will be some inspirations for you.
00:02:01.378 - 00:02:48.638, Speaker B: And the last thing would be, if you're passionate about onboarding, well, then you must listen to this, because smart contract account is all about onboarding. So what is account abstractions? We all hate jargons, and in crypto it's just everywhere. You cannot just learn crypto without going through this jargon. But in simple words, account abstraction just means programmable crypto account or just smart contract account. So what is so fascinating about being programmable? If we think about account or crypto account, essentially it only does one thing, which is signing transactions. That actually defines a few things. First, who can sign, what are we going to sign, how to sign a transaction, and when to sign the transactions.
00:02:48.638 - 00:03:46.980, Speaker B: There are a couple of things that we can sort of hack through and customize it to a certain extent without going through smart contract account. But essentially smart contract account would allow us to do this at a very high level of freedom. And whatever we mentioned just now just sort of enables features like first two FA account recovery, daily transaction threshold, custody, partner and insurance. This is particularly interesting because if you think about smart contract account, it can sort of provide you with an interface to connect with Oracle and real world API. Then we've got granular permissions, you can just define the key. How many keys do you want to have, what permissions they have, how long you're going to give them, what can they do? It's really, really into detail. And the last thing is with that key you can just sort of enable automation when it comes to signing transactions, automating, defi deploying strategy and stuff.
00:03:46.980 - 00:04:35.554, Speaker B: Well, it might sound like smart contract account is really interesting and really powerful, but when we really look at smart contract account day, it is definitely not as useful and not as good as we think. If we start to compare smart contract account to different type of way that you can manage a wallet, you would easily find that smart contract account is actually sort of lagged behind. If you look at cost, you sort of need that gas fee and storage fee when it comes to deploying smart contract account. The worst is if you're not on near you are in EVM, then you just need to deploy it every time you go to a new blockchain. Second thing, easy to use? Is it really easy to use? I think we're going to go through this later, but right now, just think about it. Every transactions you do is going to cost you 200% to 500% more in terms of gas fees and setting up smart contract account. There are many ways.
00:04:35.554 - 00:05:04.658, Speaker B: There are different vendors. Once you engage in them, you might get vendor lock in, which doesn't sort of give you that compatibility in terms of like Webtree, which we always like. Third thing is robustness. I mean, that's really good because it's basically programmable. You can do whatever things you like. In terms of security. It's not as good as ledger for sure, because essentially you still sort of have your wallet key somewhere that's accessible and have access to Internet.
00:05:04.658 - 00:05:40.730, Speaker B: And the last thing is cross chain compatibility. This is a really big issue right now. There are a couple of solutions that we're going to go through, but it's generally just not good enough. And if you look at this table interesting enough, you'll find that the best way right now to onboard mass users is just MPC, which is essentially what sort of passoff is doing. So here's a shout out to them. I think they're definitely doing a great job. And then we definitely believe that in a short term, at least, short to medium term MPC solution is most likely going to be the most affordable, easy to use and also less burden way to onboard users.
00:05:40.730 - 00:06:11.090, Speaker B: Well, so we've mentioned a couple of things just now, and here let's summarize some of the big problems that we're seeing. The first one is fragmented UX or vendor login. Basically, we talked about it just now like you've got a couple of different smart contract account vendor. They all sort of have their own features, they have their own way of create wallet. That means they are not compatible to each other. Say you've created a smart contract account with vendor a. If you go to vendor b and trying to use their wallet, it's probably not going to work.
00:06:11.090 - 00:06:52.302, Speaker B: Second thing is inconsistent account across blockchains. Unfortunately, when we talk about account abstraction, it's often about EVM ecosystem. It's a good thing and bad thing, but EVM ecosystem itself is kind of, not to say fragmented, but has their own implementations. How do they support account abstractions? In what level do they support abstractions? Is that true smart contract level or is that true native protocol level that is still not so compatible with each other? Third thing is higher gas fee. We mentioned about that. And the last thing is every account requires gas to deploy. If you look at it right now, we do have a lot of problems, but there are many talents and projects and smart people that are trying to resolve these issues.
00:06:52.302 - 00:07:20.742, Speaker B: If you look at it, ERC 6900 is trying to define how we have the modular smart contract account. Before this, it was just started from project like safe protocol, like rhinestone. But right now they're trying to do it on protocol level. And then we have safe protocol rhinestone. We mentioned just now in terms of like inconsistent account across blockchains, we have different parties managing them as well. Higher gas fee, maybe best transactions. I'm not so sure about this because it seems like it can reduce gas fee, but it has certain conditions.
00:07:20.742 - 00:08:03.590, Speaker B: And eventually, if people is batching your transaction is trying to get that lower gas fee for you, they also want to extract some value. That's essentially, what do you call it? Just forgot the word. But that's essentially what's happening. If people is providing you value, they would also sort of want to take it either through swap or either to maximum value, maximum mev. Sorry. And the last thing is native gas sponsor, this is currently happening on polygons. Even though it might appear a little bit hard for users to actually get onboarded with smart contract account, it is easy for protocol or blockchain itself to just sponsor and allow users to get onboarded with smart contract account directly.
00:08:03.590 - 00:08:50.934, Speaker B: So with what we have mentioned just now, I think it is very clear that smart contract account might not be the best way for us to onboard the mass users. It is very likely that we are still going to see smart contract account being used only for sophisticated users in specialized area. For example organizations where they need security, privacy or delegations. In terms of gamers, they always want uninterrupted sessions and the session key can come in and help DeFi traders. They want automation, better strategy, NFT collectors, they want safety and scam prevention. Social users, they want identity and communication. That identity is often connected to the web, two application as well.
00:08:50.934 - 00:09:46.230, Speaker B: And we have seen all players across these different domains and they are doing pretty well coming back here. How about AA on near? Do we have anything similar? We have mentioned about the current situation of account abstractions on EVM. What are we seeing on Nier currently we do have account extension that is sort of equivalent to modular account abstractions on EVM? Well we have throw two more jargons here. First is account extension and second thing is modular account abstractions. We're going to talk about it right away. So first, what is modular smart contract account? Just now we mentioned about things like vendor login and there's another issue that we did mention, which is if you deploy your smart contract to your account and you want to upgrade it with more modules or features, how are you going to do it? Is that easy to do? Maybe or maybe not. It often comes to a balance of flexibility and security.
00:09:46.230 - 00:10:38.618, Speaker B: If you want it to be super simple, to be upgradable, then it might comes with security concerns. And if you want it to be very secure then you probably don't want to touch your smart contract account as frequent. And the last thing is reusability with the things we mentioned just now. Different smart contract vendor, they just sort of have similar set of features. For example social recovery, two FA and everyone just sort of have their own solution. That's why on EVM we sort of see projects coming up with modular smart contract account which different party can just create the module of features, then they can publish it. Of course these features come with a certain set of standard interface and whatsoever, but anyone can essentially just develop and deliver their own feature and anyone can just plug these features into their account and play it.
00:10:38.618 - 00:11:14.610, Speaker B: So that just presents to us a solution that's easier to manage, upgradable and reliable. So we mentioned about modular smart contract account. Why is that similar to account extension? What is account extension about? Well, on near account extension is actually a collective of any piece more than one, not just one missing the s there that aims to increase the usability of network. And there are a few of them. First, global shared storage. Second, synchronous WaSM submodules. Third, account namespace, and a few others.
00:11:14.610 - 00:12:03.374, Speaker B: Disclaimer these are all based on my own researchers on GitHub discussions and stuff. I have no idea whether or not they are really being implemented, whether or not what I'm trying to deliver right now really match the outcome of the development and whatsoever. But here's a few things that I sort of got to know. First, global shared storage. What it does is it would allow in near protocol a shared storage that anyone sort of just gained access to. That would allow us to, instead of deploying our own smart contract account to our id, you can point your accounts to those sets of smart contracts. So for example, we're probably going to see a very commonly reused social recovery smart contract feature.
00:12:03.374 - 00:12:44.622, Speaker B: So instead of you deploying that smart contract feature, that chunk of code onto your account, we have this shared global storage. Instead of doing that, you just point it to that now, immediately your account get extended with that features. And if we have more features like this, essentially your account will just be like a Lego blocks that you have different piece of features that you put in, and if you don't want them, you just disable them. It will make things a lot more reusable and composable. Second thing, synchronous WaSM sub modules. And this is super interesting one because we have often known near broker as layer one. That's quick, has very low finality and stuff.
00:12:44.622 - 00:13:49.858, Speaker B: But if you try to do a swap, there might be cases where you might need to wait more than 10 seconds, 15 seconds or even 20 seconds. If you are missing out some things, like for example, storage deposit. For example, you are communicating through different smart contract because the nature of near protocol is that it is running transactions in asynchronous way in which a block might not finalize your state of the transactions and it might pass the rest of the transactions to the next block to be executed. So if you are trying to communicate with say, five smart contract accounts, sorry, five smart contract, most likely this is going to span across next five to six blocks. And if you have things like storage deposit, and if you're doing more things, then it's essentially going to take like seven to ten blocks. That's why even though near has around 1 second block times, we often still have to wait more than 5 seconds or even 10 seconds. Synchronous wasm submodules just allowed us to execute things in an environment that is synchronous.
00:13:49.858 - 00:14:31.154, Speaker B: So if we have this, we can sort of put some of our codes in this WaSM submodules and then we can execute things within this environment itself that we doesn't have to follow the way near define the asynchronous transactions. So in these sub modules it will just finalize the details, it will give you the output, you just change the state so it can reduce the finality by a lot. And the last thing is account name spaces. Just now we mentioned about global shared storage. That is just a shared storage. Essentially it is account name spaces that allows you to extend the features of your smart contract account. There are a couple more others and I just doesn't have enough time to research more about them.
00:14:31.154 - 00:15:27.570, Speaker B: But based on what we have mentioned just now, the outcome would be we are going to see very soon composable near accounts that easily. You can easily plug and play with different features and it is extremely cheap to deploy and you will have a lot quicker transactions. So how that might look like in the future. Just now we mentioned about smart contract account and we compare that to different ways to manage your accounts with the account extensions coming in, here's the improvement we're going to see. So first, in term of cost, cost is going to be extremely low because now you're not going to redeploy your smart contract over and over again. You're just going to point your things to the counts and then it allows you to immediately gain the similar upside of deploying that smart contract account. Second thing, you're going to be able to have a better user experience in which the transaction times is going to be minimized because otherwise if you are deploying different features of your smart contract account, the cross contract cost is just going to take way too long.
00:15:27.570 - 00:16:19.006, Speaker B: So having them under the sub module, sub modules WaSM execution environment would just allow it to be much, much quicker. And the next improvement is about cross chain compatibility. So this is something Elijah mentioned yesterday about account aggregations. Of course this is something that we are still not entirely sure what's the detail for implementation, but it is pretty possible that this is going to be the way the future wallet is going to handle cross chain transactions because it just provides you with a much more consistent user experience that you can sort of just inherit the benefits of your smart contract account while still being able to abstract out and interact with dapps from different blockchains. So after mentioning all this, I'm representing meteor wallets. Here are the next few things that we're going to do. So first we're going to deliver our mobile apps.
00:16:19.006 - 00:16:52.014, Speaker B: It's sort of like delayed, but we're still working very hard on it. Second thing, we're going to work closely with the ecosystem to bring out the full potential of near protocol. The third thing is we'll try our best to deliver the first smart contract count product, which is medial savings account. This is very interesting. Just imagine that you have all the funds in your non custodial wallet right now, and every day you just see extra cash coming in without doing anything else and the money is still there, still have 100% control, 100% transparent. You can withdraw your funds anytime. And the last thing is we're going to explore the possibilities on modular smart contract account.
00:16:52.014 - 00:17:26.290, Speaker B: Of course, this is all it's about. So that's it about the sharing. If you want to chat a little bit more about wallet or smart contract card, here's my TG. And then that's my twitter as well. And just doing a shout out to Banyan and Dev group. We sort of have an account extraction hack on near Broko right now and the URL is abstracting.org. So if you're interested about smart contract account and you want to try and hack something, go ahead and participate in the hackathon.
00:17:26.290 - 00:17:28.280, Speaker B: So that's it about. Thank you.
00:17:53.600 - 00:18:27.640, Speaker C: Thank you so much. Nice talk. I have one question about account aggregation. So when we say account aggregation, are we also talking about accounts that are created outside the near ecosystem? For example, I don't know, metamask, phantom and others. And if so, will they still have to go through the meteor ecosystem or will you create an interface where I can still use metamask, not go through the meteor ecosystem and still use them on any DaP, maybe on near or any other chain?
00:18:28.540 - 00:18:56.384, Speaker B: That's a very good question. So again, a disclaimer because this thing is rather new. I hope what I'm understanding is correct. What I'm foreseeing this is we sort of have the smart contract account on meteor that would just implement all the logic to verify the transactions before you want to sign anything. It sort of control the logic on whether a transaction can be signed on any other blockchain. So if you have that, you send the transactions on near blockchain. It sort of go through all the checking, validation and stuff.
00:18:56.384 - 00:19:43.450, Speaker B: It approves transactions being signed and that transaction can be propagated to other networks through the near validators and stuff. So it first inherits the benefits of having smart contract accounts. And second thing, you can still interact with smart contract or Dapps on any other blockchains without having the burden of worrying about whether or not I want to care about the smart contract there. Why I need to care about that? It just abstract out the complexity of other blockchains while you being able to interact with it. Media water. So I guess that's it about it. Thank you guys.
