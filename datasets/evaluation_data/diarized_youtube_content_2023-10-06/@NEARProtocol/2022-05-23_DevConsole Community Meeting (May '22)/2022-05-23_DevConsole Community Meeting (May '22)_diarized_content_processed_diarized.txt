00:00:11.530 - 00:00:29.254, Speaker A: All right, well, welcome everyone. We are going to have our second meeting of the Devconsole Explorer monthly community meetups. This week we're going to be talking all things Devconsol with Josh Quintal. Josh, you want to introduce yourself and take it away?
00:00:29.452 - 00:01:02.080, Speaker B: Yes, thank you. So, hey everyone, I'm Josh Quintel. I am the product manager on the dev council and explorer teams here at Pagoda. And today I'm really excited to kind of walk through really all of it with you. I'm going to talk about what Dev console is, how it fits in with the rest of the pagoda products and the near ecosystem. We're going to go through a little demo of what's available today and then I'm going to talk to you about what we're working on this quarter and then in the more distant future as well. Definitely excited to get your feedback on those things.
00:01:02.080 - 00:01:03.470, Speaker B: Cool.
00:01:03.540 - 00:01:21.490, Speaker A: And yeah, just before Josh gets started, just as a reminder, if you have any questions, please feel free to drop them in the Q A section in the bottom, post them as we go. And yeah, we'll try to answer them as the presentation moves. We'll find a spot to address all of your questions or comments.
00:01:21.650 - 00:02:07.854, Speaker B: So yeah, take it away. Cool. All right, good stuff. So, developer console, what is it? What is this thing that we're talking about? So before I actually dive into that, I'll plug right away that if you go to console Pagoda Co, you'll be able to try this out at any point during this. So the place I always like to start this discussion is the development lifecycle. And so there's various different versions of this, but I like this very simplified one just for talking through this. So of course if you're going to develop any kind of DAP or even software application, generally you're going to need to start coding.
00:02:07.854 - 00:02:36.240, Speaker B: And this is of course assuming that you have requirements, you've done user research, all that good stuff. So it's time to develop. You need to actually code your application. We've got many great tools to help with that. Right, you've got near Cli, you've got near API Js for developing on the front end, things of that nature. Then after that point, of course you need to test what you've done up to this point. So of course near sandbox, our various workspaces, libraries for JavaScript or rust are great candidates for that.
00:02:36.240 - 00:03:27.294, Speaker B: And so once you've got your code written and tested, it's time to actually deploy it to a network. Accidentally clicked there. Of course doing that through near CLI is going to be how that's going to get done. And then once it's on the live network, where do we go from here? We've created our DAP, now it's in the wild, people are using it. It's time to actually monitor and operate this DAP. And that's really where dev console comes into play. So your Daps made it to production and now it's time to start observing what's happening with it, right? In the sense of analytics, monitoring happenings to your smart contracts as the app is live, things of that nature really, like I said, managing, operating and monitoring the application, it's really kind of where it fits in, but even more broadly than that.
00:03:27.294 - 00:04:02.906, Speaker B: So if you do go to the pagoda web page, and I don't want to belabor this too much because we're not really here yet, kind of looking at the future. So currently we're focused on this monitoring and operations aspect. But if you go to the Pagoda website, you're going to see this tagline. That pagoda is the first ever web3 startup platform. And so you're going to hear me use the word integrate a lot later on in this presentation when we talk about the future of dev console. And that's because it is going to really broaden out into being this web3 startup platform. So currently it's very much focused on development and even more narrowly on that monitoring piece.
00:04:02.906 - 00:04:38.440, Speaker B: But eventually you're going to see integrations with other departments in pagoda. So things like having your Dao manage aspects of the app that'll be hooked into of course, funding and things that the Dao generates. So really hooking up really the development lifecycle to really the broader business lifecycle as well. I don't want to go too deep on that yet because that's still very much in development. But just to give you sort of a sneak peek of what's happening there. So definitely don't want to belabor you with a bunch of slides and reading right away. So let's hop right into a demo.
00:04:38.440 - 00:05:15.114, Speaker B: And so I'm going to go over a portion of an NFT marketplace tutorial that we have integrated into the developer console, which is really great for onboarding because in addition to the tutorial that you would get if you went to the docs, there are some interactive aspects that we're able to add with the power of Devconsol. And then we'll also take a look at the analytics and contract screens that Devconsol offers as well. So I will hop into that actually, let's test windows out here. Okay, cool. Did that Josh or someone, can you confirm, did that actually switch my desktop.
00:05:15.162 - 00:05:18.638, Speaker A: Or do I need just see, I just see the demo. Yeah.
00:05:18.804 - 00:05:55.160, Speaker B: Okay. Yeah, I will stop and restart that then. It. Interesting. Okay, maybe it's a windows thing. Hold on one moment. I'm just going to drag these windows back from one of my desktops back into this main one.
00:05:55.160 - 00:06:30.950, Speaker B: Okay, cool. Nice. Yeah. Note for anyone watching. Yeah. If you use multiple desktops and windows, zoom is not going to share anything other than the main one. Okay, cool.
00:06:30.950 - 00:06:42.700, Speaker B: So on the left hand side here we've got dev console. On the right hand side I have my actual Cli over here. Let me zoom in on this so you can see it a little better. I'm sure it's not great.
00:06:43.150 - 00:06:44.506, Speaker A: Yeah, that's better.
00:06:44.688 - 00:07:05.438, Speaker B: Yeah, I can do the same here. No promises on the dev console interface. Scaling, politely for zooming. Okay, cool. So I've already logged in in this case, but I will mention that you can log in with either your email, GitHub or Google. So either way, I've created an account here. This is the list of projects.
00:07:05.438 - 00:07:28.006, Speaker B: Projects are kind of the main organizational unit within dev console, for lack of a better word. And so I've got a couple here. You can of course create a new one. I'll briefly show you a look at that. So you're going to make a new project here. You could of course start a blank one. If you maybe have an existing DAP or you already know what you're doing, you're going to be writing a new DAP and you're familiar with near.
00:07:28.006 - 00:08:05.540, Speaker B: But then there's also this tutorial option here, which we'll take a look at. And this is where you can select this NFT marketplace tutorial that we're going to go through right now. This already exists in the documentation. It's a great tutorial. Takes you fully zero to hero from nothing to a system of contracts for an NFT marketplace, but with some extra interactivity here in dev console. And then other options would be like our crossword tutorial which is on near SDK IO if you're interested in that. So in this case, I'll click into this existing project.
00:08:05.540 - 00:08:56.550, Speaker B: And actually when you initially create it here, you'll land on this tutorial page, which is actually the tutorial itself. And so we're not going to read through the whole thing, but I'll kind of hit the highlights so you can see exactly what you're getting here benefits wise. So what you won't see here on the documentation is actually this card over here in the lower left hand side, this live contract data card. So you can see here that we have my account name that I'm using for this contract. And then we can actually see the status of that as I was moving through the tutorial. So we can see that the account exists, the contract is deployed to it and it's been initialized. And also down here we get a list of the tokens that have been minted, the NFTs rather, that have been minted throughout the course of this tutorial.
00:08:56.550 - 00:09:30.974, Speaker B: So let me actually back out here and I will start a new one so you can see it just kind of from the ground up. Cool. And so going through here, you can see that. Yeah. You'd have an opportunity to of course, input your account here. In this case, I won't use ETH Denver. Let me just use my testnet account.
00:09:30.974 - 00:09:59.382, Speaker B: So this account exists? Yes, but there is not a contract deployed to it or anything. And of course without it being deployed, it hasn't been initialized. So just kind of a little overview. I'm not going to go too far into this. We're really just going to go to upgrading the contract so you can kind of see that everything responds live. But what you start out with in this tutorial, like I said, zero to hero. So you start out with this pre deployed contract, you can then mint NFTs with and then we start to go through and break down exactly how that contract's composed.
00:09:59.382 - 00:10:44.180, Speaker B: And then once the NFT itself is built, we then move on to the full on marketplace system from there. So in this case, I'm actually just going to hop right into the minting step because that has the full code that we're going to need to deploy here. Tutorial on my left hand side, make sure I'm in the right range, actually. Sorry. Minting. Okay, Nick, it's because it's not. Get cool.
00:10:44.180 - 00:11:13.940, Speaker B: All right. In this case, yeah, we've gone through, we've described sort of what looked at the contract itself as far as the structure of the NFT contract. This is really nice. This is a standard on here, of course, like you would expect on other ledgers. So really we're at the stage here where we're going to deploy the full fledged NFT contract. We're actually going to mint an NFT. So I'm going to come over here and I'm just going to literally follow along.
00:11:13.940 - 00:12:11.246, Speaker B: And so this build step here for those actually, this would be an interesting exercise in the chat. If you really quick put in your experience level of developing with near, that'll kind of help me with how much I should be describing exactly what I'm doing. So for now I'll kind of default to just describing it in mid level detail. So here this build step we have in near you can write smart contracts in rust or in assembly script and coming soon JavaScript. This particular contracts are written in rust. So we're going to run yarn build here because that's going to compile it into webassembly, which is what we can actually deploy to the network. You can see here, this is running cargo build in the background and then it put that output in a res folder.
00:12:11.246 - 00:13:06.834, Speaker B: I need to log in here real quick. Actually I want to import a different account. Let me bring in my Josh Q account here that I added to the card earlier. Very cool. And this is connecting my oops testnet. This is connecting my wallet account with, or my near account rather through the near web wallet with near Cli. So there you go, see the action completed there in the console.
00:13:06.834 - 00:13:40.906, Speaker B: Now I'm logged in. We can close that window and then from here we're just going to, for convenience throughout the rest of the tutorial, export our contract name as a variable that'll be really helpful. Throughout the rest of it we won't have to continually retype that, echoing that just to confirm you can see, yep, Joshq testnet is there. And so now throughout the rest when we copy paste these commands, you can see we just have the token for NFT contract ID there. That'll make this much easier.
00:13:41.098 - 00:13:58.630, Speaker A: And just for those that aren't familiar, what you just did was ran a near login, which saves a key, a full access key to your local machine. That way you're able to perform all these transactions like launching the contract and everything moving forward by using that full access key that you just saved.
00:13:59.530 - 00:14:53.702, Speaker B: Yes, thank you and cool. So you can see here. So if you remember correctly, the account checkmark was done, of course, because JoShq testnet existed, but you could see there actually live once the contract was deployed that it is, it actually was reflected here within the console, little blurb on the quick info card itself. And so let's actually mint an NFT now. Cool. And yeah, quickly for reference we show here the token metadata that you'll want to include for this. So here I'll just kind of quickly note we're just filling in the ID here, we're giving it a title, a description, and actually we've got a media URL here.
00:14:53.702 - 00:15:35.780, Speaker B: This is an image hosted on IPFs that you'll see here in a bit. In this case, the receiver is the NFT contract itself. Ah, but that didn't work, right, because it's not initialized as we can see here. So let's actually go back and do that. In this case, initialization for the NFT standard sets the owner. And look at that. There we go.
00:15:35.780 - 00:16:03.096, Speaker B: So it is initialized, but we don't have any NFTs minted yet. So let's actually go back and do that. And now that it's initialized, this transaction should succeed here in a moment. And it did. We didn't get anything back because it was success. But we don't see any tokens. Oh man, I'm just full of errors during this presentation.
00:16:03.096 - 00:16:55.516, Speaker B: But it's because we actually don't have this total supply method implemented, or NFT tokens for that matter. So we're not able to enumerate the NFTs that have been minted by this contract or even to show the total supply. So on other protocols, this would be potentially a panic moment. If you didn't have a proxy router implemented or something like that, you would be unable to upgrade this. You would just have to kind of deal with it, potentially alert your users or something like that. If this were in production but on near, you are able to upgrade in place, which I will demonstrate here. Know TV magic.
00:16:55.516 - 00:17:29.784, Speaker B: I'm just skipping ahead into the end of the enumeration step here, since I know that we want to enumerate the tokens and show the total supply. But if you were going through this, you'd want to definitely read through the enumeration section as we break down the methods in more detail there. And so from here, it's actually going to be just as simple as repeating what we did previously. I'll talk more about upgrades in a second here. There are some constraints. So we build the new contract, we're good, it's done. In fact, it happened even more quickly that time.
00:17:29.784 - 00:18:01.872, Speaker B: That's thanks to rust, or thanks to cargo, I should say. And then we will actually just redeploy it. Come down here. And so you can see it's noted in the tutorial, but we're going to get a warning first. Yes, and it notes you already have a contract deployed here. Do you want to proceed? And you do want to think a little bit? Well, preferably before this point, but this is at least a little reminder. So in this case, we're upgrading the contract.
00:18:01.872 - 00:18:22.584, Speaker B: We do want to replace it, that's fine. But you do need to make sure when you upgrade a contract that the serialization of your data is the same. So basically that the data structure is the same. There are ways you can translate it. There's a lot more detail. I'll drop some links in the chat after this. But in this case, we don't have to deal with that.
00:18:22.584 - 00:18:49.564, Speaker B: We're actually just adding methods to access the data that already exists in this contract. Specifically, once again, the NFT total supply. So we want to get that total number and then a function to actually enumerate the tokens. So since we're just adding accessor functions, this will be totally fine. I will proceed. And like magic, look at that. Now we also get the total supply.
00:18:49.564 - 00:19:11.316, Speaker B: And of course we minted that one earlier that I showed as an example. And there it is. We've got the go team gif that's hosted on IPFs. You can see all the metadata down here. So yeah, that super exciting to me. I came from ethereum a little bit about my background. I worked at Truffle for five years before this, so that kind of blew my mind when I came over to near initially.
00:19:11.316 - 00:19:42.980, Speaker B: So I really love showing that off. So that's really all I'll cover now. Just kind of like highlight some cool features of near and also show the benefits of seeing this live. As you're going through the tutorial, you get that kind of nice moment of like, yeah, I did something without having to query back and forth in the CLI. So let's take a look at some of those other screens I was talking about. You can see there's analytics and contracts over here on the left. So I'm actually going to switch projects.
00:19:42.980 - 00:20:45.080, Speaker B: And so first you got this contracts screen right here. So this is eventually like, we'll talk more about the expanding feature set of this, but for now, the contract screen at this point allows you to add your various contracts for your dap in here. Since this is to the point of monitoring and operations like what you'll mainly be managing as the components of your project are of course the contracts that compose your DAP. And so currently, you add these contracts to this screen, you see some quick stats that you could get here without necessarily having to go to the explorer, and you get a nice merged up transaction list down here. So you can see here that this is actually coming from both contracts. So just a nice quick place to kind of at a glance view recent activity from your DaP in the future this is going to expand to have much greater integration with the explorer in the sense that this will be a full paginated scrolling list of transactions. You could break them down individually by contract.
00:20:45.080 - 00:21:07.070, Speaker B: There will even be forms to interact with your contracts, things like that. But we'll talk more about that in a little bit. And then there is also an analytics page over here. And so I don't have any, let me see. Maybe I fired them off on main net. Okay, perhaps we haven't picked them up yet. I did fire them off only like a second ago.
00:21:07.070 - 00:21:21.764, Speaker B: So either way. Oh yeah, it's fetched. Okay. That's right, it's fetched once per hour. So either way. But on this screen, actually when you sign up for dev console, I need to take a step back. You get some API keys for our RPC service.
00:21:21.764 - 00:21:58.290, Speaker B: So currently, you know the near RPC, you could just use it logged out. It's a free service at the moment, but in this case you get these keys. This is nice because then you can actually track your usage and get some usage analytics on that. So this is things like calls over time, breakdowns by method call, your total number of calls, things like that. So collecting some basic usage stats around your use of the RPC. Eventually that's going to expand into full kind of build your own dashboard type of setup around smart contracts. But yeah, we'll talk about that in a little bit as well.
00:21:58.290 - 00:22:37.404, Speaker B: Come back down here, switch over to the presentation again, back to dark mode. So that's really kind of the in dark mode is on the way as well, actually for dev console on that note. So that's kind of the long and short of what's available now. We're in a very kind of foundational state right now, I would say. But if you're starting out, definitely check out that NFT tutorial and the interactive features there. That should be very helpful. And of course, like I said, getting some metrics around your RPC activity, very useful as well, especially when you're making calls from the front end.
00:22:37.404 - 00:23:20.628, Speaker B: Now you're actually getting some basic user data as well, not necessarily just your own CLI usage. But where is this going? Right? I mentioned monitoring, I mentioned operations, all these big things and yeah, so those are in the works. So as far as the infrastructure management, right. We talked a little bit about RPC as a service. So that's there. But there's also, if you've been following near lately, we also came out with something recently called near Lake, which is essentially kind of the next iteration or replacement of our near indexer framework that you might be familiar with. So now we just have a nice unstructured data lake.
00:23:20.628 - 00:23:57.540, Speaker B: It's actually s three on AWS. You can just pull down data from that. With writing your own indexers, it's much easier to use than the previous indexer framework was. And so using that service and managing that is going to be surfaced through the Dev console as well, kind of to the point of integration. Another thing we're working on also contract forms. So this is if you're familiar in the near ecosystem with Stats gallery, for example. You know that that site can list out the methods for a contract that you give it, but we're going to take that a step further and actually implement a full interactive form.
00:23:57.540 - 00:24:54.612, Speaker B: So really great for like quick demos, quick integration tests, things like that. You'd be on that contract screen, you drill into your contract, you can execute a method and then with that additional explorer integration, you can then see the result of that call, including the full execution path and all that, without even having to leave dev console. So makes this really nice kind of like integration testing lifecycle happen there all in one place. Next up, alerts for sure. So this is anything that happens on chain. So things like if a transaction succeeds or fails, if a certain method is called on a contract with certain parameters or a certain output, if certain actual events like your smart contract, events that you've coded are fired, things of that nature, we want to let you know about those things, whether you're in the console or not. And so this is where I'd love to hear, where people would like to be alerted.
00:24:54.612 - 00:25:40.804, Speaker B: So our first instinct was email, of course, right? When you're on the go, when you're anywhere you get an email, you're going to want to be able to see that. But then also providing webhooks so that you could potentially hook up whatever service you'd like. But to that end, we do want to provide convenience. So if there's any other services people would like to see, definitely drop them in, chat, something like telegram, SMS, things of that nature, any destination you can think of that you'd want alerts to go to. Another great thing about this in the future as well is that eventually we'd like to be able to trigger mitigation functions in the case of potentially negative alerts. Right? Like let's say your balance is draining. You may want to trigger something to stop that, but we'll take a look at that in a second.
00:25:40.804 - 00:26:29.616, Speaker B: And then finally, greater analytics. They're actually building your own dashboard. So we didn't get a chance to look at the charts today, but the RPC usage data is pre configured and it's limited to the RPC. But where we really want to go with that analytics screen is the ability for you to build your own dashboard based on metrics around your smart contract. So let's say your Astro Dao, you might want to actually see like number of DAOs created or a breakdown of dows by type, things of that nature. So really visualizing your smart contract data, not just usage of the network itself. So to kind of go into deeper on the alerts and then also on the building your own dashboard features, kind of like to present these a little more stories rather than just dry descriptions.
00:26:29.616 - 00:26:57.472, Speaker B: And so here are around alerts. I sort of preempted myself here, but we'll go through a scenario here. So our defi smart contracts been hacked. Oh no. What can we do? Or at least in this case, how could developer console have prevented this scenario or can prevent it in the future? So you'll be able to configure alerts here, like I mentioned. And so this is just a very bare mockup of what this might look like. And you can actually just read it left to right.
00:26:57.472 - 00:27:44.780, Speaker B: So our DFI dap here has a vault contract and we want this alert to trigger on certain conditions. In this case, if the balance changes by 20%. And of course, in this case, we're kind of looking for negative 20% in a sense, and then also not from our allowed list. So potentially we, as the owners of DFI DAP, would want to be able to move that balance around without triggering any mitigation or things like that. So we put ourselves on the allowed list there and then this one's definitely a little in the further out future, we're not going to have actions right away, so you'll definitely get alerted. But in the more distant future, it'd be nice to have actions. So in this case, to mitigate this negative event, right, this balance changing by 20%, we could automatically call the pause method on this vault contract.
00:27:44.780 - 00:28:24.140, Speaker B: So stopping any transactions going in or out thereafter. In this case, we're going to get alerted via email and a text message. So right here you could see an example of what this might look like. We get an email from alerts at Pagoda that says, oh, the balance drained 20% in this contract, we note when it happened. We give you some quick links here to view this contract or your allowed list, just to make sure of what's going on. And then down here we note the actions that have been taken. And so in this case, we called the pause method on this contract and then over here, a link out to actually see that transaction status.
00:28:24.140 - 00:29:28.228, Speaker B: So as an interesting interim step we could do here is since we are alerting you anyway, we may provide a quick link for you to actually trigger this action or call this pause contract as kind of a middle step to actually all the key management and necessary things that would have to be taken for us to trigger that automatically. And then actually, before moving on from alerts, another thing to drop in chat, definitely if you have any alerts that you'd like to see of any complexity, really, I mean, we're going to have to start out simple, but anything that you thought you've wanted to be alerted on, definitely drop that in chat. Would love to hear more about that. So second scenario here, I mentioned analytics. This one's a little less dire here, but an NFT marketplace wants to see their best performing collections and artists. How can we do this? Well, with access to near lake, we're able to query all kinds of different on chain data. And so in this case, it's as simple as adding a tile to our analytics dashboard.
00:29:28.228 - 00:29:53.764, Speaker B: In this case, we want to see our top ten artists by revenue. And in this case, I displayed it here as a SQL query. This isn't really decided yet. Maybe it'll be SQl, maybe it'll be graphql, maybe it'll be a form builder, something of that nature. But either way, just representing that we are in a fully custom way, like gathering the data that we're looking for. And of course we're going to visualize this in some way. And in this case, it's going to be a bar chart.
00:29:53.764 - 00:30:30.196, Speaker B: But maybe you want a table if it's over time, a line graph, things of that nature. So all the visualizations you would expect would be included here. And so just to make it even more concrete what this might look like, we've got a dashboard we built here called artist revenue. We can see that we clicked this, add a tile earlier, and here's the result of what we did. We've got our top ten artists by revenue here. And then just kind of as an example of some other things, maybe you just want even a single number. So, like our highest and lowest selling pieces are also represented on here.
00:30:30.196 - 00:31:05.608, Speaker B: Just to kind of give you an idea of exactly where that's going. Cool. So what's next was perhaps not a great name from this slide. So as far as what's immediately. Next are the things we already talked about. Alerts, contract forms, build your own dashboard when I just went over. But this is really more like the more distant future, right? So things like Dow integration, right, like now that we have useful alerts, triggers, contract forms, things of that nature, maybe we want to expand the scope of this beyond a single developer, right? Like Daos are going to want to manage these dapps.
00:31:05.608 - 00:31:35.400, Speaker B: Of course we'll do this with Astrodao. There are a lot of interesting possibilities there. If you're a member of a DAO or thinking of starting a DaO, definitely drop that in chat as well. I would love to have a conversation around that. We've already been kind of investigating some ways this integration could take place, and they are very interesting. Deployment management is another area there, so kind of expanding out into the rest of the development. You know, you kind of have to deploy via the clI.
00:31:35.400 - 00:32:18.532, Speaker B: It'd be nice if that could be a little more organized, visualized. You track the status of multiple deployments within the same network, things of that nature. Of course, GitHub integration, currently it's separated in the sense that you code in one place, then you're managing it in dev console. But as we're kind of like coming around the development lifecycle, it'd be nice to have access to your repository within dev console for various reasons, including, like I mentioned, version deployments, things like that. And then finally, really, there's a lot of places this could go. So I'm curious what you'd like to see. To make that a little less vague, I kind of added two little seed questions for thought down there.
00:32:18.532 - 00:32:47.890, Speaker B: What's preventing you from building a Dap right now if you haven't built one, or what's perhaps a pain point or holding you up? And then secondly, if you have a Dap in production, what's holding back your existing dap? Is there something like you don't want to have to build your own indexer, you need better visualization tools, things of that nature. Definitely would love to hear what you're looking for in that sense. And with that, I will turn it over to questions, because I did see that there were some, actually, there's nine.
00:32:48.740 - 00:33:29.230, Speaker A: Yeah, we got a few questions, and I think so much, Josh, for that presentation. Yeah, we'll just go through some of the questions that have been posted throughout the presentation. But yeah, if any more come up or if we don't completely answer your question, please feel free to follow up. Yeah, we'll keep taking questions until we run out. So the first one, actually, you went over, is there any plan to import GitHub repositories? So yeah, we kind of have that in the works. At least it's roadmapped out or you guys are thinking about it. So yeah, that's definitely going to be something that they'll work on.
00:33:29.230 - 00:33:46.130, Speaker A: Next question is the last meeting there was a mention of the near equivalent of an ABI coming out. Are there plans to integrate it into dev console? So we know what methods are contained within an account or contract should one have some code deployed to?
00:33:47.400 - 00:34:24.648, Speaker B: So yep, there is an equivalent of the ABI coming out. We call it an ACI in near Ethereum and other chains. It's like AbI's application binary interface for us. We call it abstract contract interface, which is where ACI comes from. And that's actually what's going to power those contract forms that I mentioned. So we'll be able to generate that ACI and that's going to include things like the methods in the contract along with their inputs, the function signatures, things of that nature. So that'll lead to those interactive contract forms where you'll actually be able to, just within your browser, fire off a method against a contract.
00:34:24.648 - 00:34:39.270, Speaker B: And then, as I mentioned, to kind of close that loop with the greater explorer integration, you'll actually be able to then see the result of that transaction within dev console. So like a nice integration test lifecycle, kind of living in that one place there.
00:34:39.880 - 00:34:52.580, Speaker A: Awesome. Cool. This is really cool. Super awesome. To get the live data while doing the tutorial, are there any plans to release more tutorials or migrating existing ones into dev console?
00:34:53.500 - 00:35:19.536, Speaker B: Definitely plans for more to integrate with that live data card. So I mentioned the crossword tutorial, which actually, if I can pull it up real quick, I'll drop that in the chat because it's a good one. That one definitely will be part of it. Sorry. For everyone's benefit, let me pop this in here. Crossword tutorial and for those of you.
00:35:19.558 - 00:35:24.530, Speaker A: That are watching this on YouTube after the fact, we'll put this in the comments and description below.
00:35:25.220 - 00:35:50.170, Speaker B: Nice. Yes. So it'll persist. Yeah, thank you. Yes. But in addition to tutorials, actually one area we're interested in expanding this is actually templates. So tutorials, of course are great when you are getting started and you want to learn more, but perhaps living in dev console is not the best option, even though it's helpful for it to borrow features from it.
00:35:50.170 - 00:36:42.110, Speaker B: So we're thinking more of going this direction of having templated projects within Devconsol. So you'd start it up rather than a blank project, you'd have these two other options, one being you could select a template. So in this case, if it is an NFT marketplace, again, you'd actually just get the result of that, that system of contracts and then be able to build on top of it, potentially that potentially like a defi template, things of that nature. And then the other option would be, if anyone's familiar with create near app, it's kind of like been getting phased out recently, but it's going to have new life, not only in the CLI, but in the sense of potentially in dev console, allowing you to then build your own, kind of create your own template from selecting various contracts, a certain type of front end, things of that nature, to sort of start out with a bit of a starter project of your own design.
00:36:42.640 - 00:36:49.420, Speaker A: Cool, that sounds awesome. Is there any simple way to add the API keys in near API Js?
00:36:50.000 - 00:36:58.784, Speaker B: Yes, there is. And let me, I don't think I closed that window. I can just show you real quick.
00:36:58.902 - 00:36:59.570, Speaker A: Cool.
00:37:03.720 - 00:37:43.324, Speaker B: Share this. Cool. So actually let me show you how I got here. So once you've logged in and created a project, when you're in that project on the settings screen here, in addition to actually showing your API keys, we have various instructions down here for how to add them to the libraries. So near Cli, near API Js. And we even went one step further and actually, well, I'm not going to use this API key for anything, but if you were doing a real presentation, don't show people your full key, but either way you can actually just copy paste this and it already has the necessary information filled in. So you can see up here I have the testnet environment selected.
00:37:43.324 - 00:37:54.340, Speaker B: So we've already filled in Testnet as the endpoint and we've even helpfully filled in the API key for you. So it would just be as easy as copy pasting this into your project where you're implementing near API Js.
00:37:57.000 - 00:38:05.480, Speaker A: Awesome. Will you somehow be able to send the analytics to your DAP from dev console?
00:38:06.940 - 00:38:14.460, Speaker B: Send to your DAP? Can you describe more what you might send the analytics to your DAP?
00:38:14.800 - 00:38:34.240, Speaker A: Maybe like rendering them on your front end? Like maybe there's some sort of API where, I don't know, I'm just guessing what the individual is asking. But yeah, maybe there's some sort of API that you can see, like some live interactivity that's going on with your contract as you go to the DAP, you can see those stats.
00:38:34.580 - 00:38:53.288, Speaker B: Yes, okay, so we definitely do want to have a concept of public pages. The dashboards will probably be the first thing to get that feature, actually. So yeah, you'll be able to. If we're interpreting that question correctly, there will be a way to share a certain dashboard publicly. So yes, in that sense, let me.
00:38:53.294 - 00:39:08.540, Speaker A: Know if we answered that question correctly or if we interpret that correctly. Cool. Hi there. Alerts are good. Just curious, how are the alerts implemented? I suppose you have a near lake or indexer listening to the blockchain events, or is there some sort of alternative?
00:39:09.520 - 00:39:16.430, Speaker B: Yes, it is near lake and indexer currently listening to the events. You have it exactly right.
00:39:17.120 - 00:39:42.452, Speaker A: Cool. So like the listening for events, and then when it notices, there's some sort of logic that we implement where it starts seeing certain events happen over like a frequency, like too many calls or how is it set up? I guess a user could configure it that if certain things are happening, I guess, what are the configurations that you guys are thinking of when it comes to alerts?
00:39:42.596 - 00:40:20.680, Speaker B: Yeah, definitely. So things like at the most basic, right. Just whether a transaction against a certain contract or account has succeeded or failed, getting a little more complex, like whether a method has been called on a contract and actually being alerted based on certain parameters in that method call, or potentially in results resulting data from that method call. There is. Hold on. I literally have a design doc here that I was discussing in a meeting previous to. So I will enumerate everything to you mentioned methods calls.
00:40:20.680 - 00:41:04.210, Speaker B: Oh, of course, events, right. Because events now are a first class citizen in contracts in near. So if a certain event has been logged and then of course for accounts really just balances, right? So if the balance has changed by a certain number or a certain percentage initially, that'll be momentary, kind of block by block, like whether a single transaction has changed that balance. But over time we will be combining the subscription to near lake with indexed data so that you could do more advanced things like a balance change, like in that vault example, like a balance change over time. So maybe in the last 8 hours has the balance drained. X percentage things of that nature that are a little more useful for detecting like a sophisticated attack. Things like that.
00:41:05.160 - 00:42:07.524, Speaker A: Cool. When upgrading contracts that have already been deployed, will redeploying also work when the data has been generated? Example like if an NFT has been minted, if not, on what would it depend for an upgrade to corrupt? Or how the smart contract works? Where can I learn more about upgrading smart contracts? I could actually answer a little bit. Yeah, when you upgrade a smart contract, you're actually replacing the contract code, not the state itself. So sometimes you may notice when you're trying, you're just in a testing phase and you're deleting a smart contract and re uploading things, and then something's not working. Yeah, the state is persisting. So usually you have to either clear out the state of the contract itself, like by having a method in your smart contract that does that, or sometimes you have to delete the count entirely and then recreate it in testnet. But yeah, I wouldn't advise on doing that on Mainnet, but yeah.
00:42:07.524 - 00:42:26.076, Speaker A: So when you are upgrading your contract, you want to make sure that you are migrating your data in a certain way that is compatible moving forward. There is documentation on that in near SDK IO. I can find a link and drop it in the chat. But yeah, I got you, you got me.
00:42:26.098 - 00:42:26.670, Speaker B: Cool.
00:42:27.360 - 00:42:38.960, Speaker A: Is there anything that you want to. Oh yeah, looks like Ben also. Thank you very much. Anything else you wanted to add to that, Josh?
00:42:39.780 - 00:42:44.530, Speaker B: No, I actually think you gave a more succinct description than I did initially during the.
00:42:47.060 - 00:42:58.660, Speaker A: Um. Will devcouncil provide some guided Gui for the developer on upgrading deployed smart contracts? How will it look like and where can I add ideas?
00:42:59.400 - 00:43:26.560, Speaker B: Yeah, okay. A bunch of good questions there. Yes, would definitely love to see that because that's something we get questions around us and devtools, I get questions all the time around upgrading contracts. How do they work? How do I get more confidence in how it works? Yeah. So definitely we'll be building some sort of Ui or helpers around that. That's very early, though. We're not exactly sure what that will look like, but it's going to be relevant actually.
00:43:26.560 - 00:43:56.744, Speaker B: Also, just as a little insight here in the sense of the Dow integration, because Sputnik Dow v three is going to V three or V four. It's one of the two. Either the next or one after version of Sputnik Dao is going to allow for upgrade, like Dao managed contract upgrades. And so surfacing that in the console is going to necessitate us thinking a lot more about this. So it'll definitely be in there both apart from the Dow portion and as part of that.
00:43:56.942 - 00:44:06.170, Speaker A: Cool. So Dow integration or Sputnik Dao or Astrodou integration of jump console is definitely coming to the.
00:44:07.100 - 00:44:14.700, Speaker B: Yes. I don't have a timeline on that yet though, but it's definitely like, yeah, we definitely do want to do it.
00:44:14.770 - 00:44:35.620, Speaker A: Cool. Yeah, no to that question. Yeah, that would definitely make for a good user experience of, okay, I'm upgrading my contract now. I have like checklists on the side. Did you migrate your state? Here's what your state looks like. Yes. Certain ways in which we can guide you through the process so that way you can have a successful upgrade or migration of your contract.
00:44:35.620 - 00:45:10.640, Speaker A: Good feedback for sure. Yeah. And as far as where we can add ideas too, I know we're doing a little bit of kind of posting and chat and that's what these meetings are for. But yeah, as we're doing this presentation, I'm thinking, oh yeah, there's going to be a lot more individuals that are going to watch this on YouTube and yeah, definitely having links where we can have people give feedback, direct feedback and have discussions, maybe have a poll of what you like, what you don't like. Yeah, Josh and I will talk more about that after this call. And then when we upload this video, hopefully we can have some sort of place where you can go and leave that direct feedback for us and have a conversation.
00:45:11.620 - 00:45:36.630, Speaker B: Yeah, that would be ideal. For now, I will preface this. We're testing out product board right now. We're really not sure that we're going to use it, but at least for the purpose of this meeting, to capture any ideas that anyone has. And then we can always manually migrate them. I'll put this link in here so you can go on this product board and this will allow you to add suggestions and then, yeah, we can kind of chat about them in there.
00:45:38.280 - 00:45:45.820, Speaker A: Cool. All will Devconsol allow devs to monitor gas costs for smart contract calls?
00:45:47.680 - 00:46:16.228, Speaker B: Yes, that will definitely be part of it. We have not gone too deep on that yet, though. I mean, I'd love to even see like full on, not to mention a competitor here, but they're not on near, so it doesn't matter. Tool called tenderly actually has a really cool thing, gas profiler. They call it show like. Yeah, really nice flame graph drill down into the gas usage, even of each individual function and operation. So would love to even get there at some point.
00:46:16.314 - 00:46:38.700, Speaker A: Yeah, that'd be really cool. Deploying a contract and then being able to visualize and see where gas is going and being able to profile it. Definitely something. Yeah, we've heard before and would love to see that. Cool. Will dove council create the project files on my local machine or are they created in GitHub by default or someplace else on some server?
00:46:39.760 - 00:47:31.096, Speaker B: Yeah, that is a question we're still kind of thinking through. Like when I mentioned the template projects, for example, the initial thought was probably just to keep that within the scope of GitHub for now. So we'd either clone like, if it were a pre configured template, we would just clone it into your account. Potentially similar thing for the building your own system. Like, not exactly sure how that would work yet, but for now, yeah, I think the path we'd probably go would be doing GitHub just because of the additional security concerns and things like that of accessing your local machine. But that's not to say that wouldn't potentially be a thing in the future. I know as one example, and I'm totally spitballing here, this is not on the roadmap, but given that we have near sandbox now, it would be pretty cool if you could integrate near sandbox with your local instance of it with dev console.
00:47:31.096 - 00:47:39.840, Speaker B: So you could get those same benefits of the contract forms and seeing activity and things like that. So yeah, there's definitely possibilities for local interaction.
00:47:40.180 - 00:48:11.468, Speaker A: Cool. Awesome. Well, we're getting just about to time and I don't see any questions. I think we answered them all. If anybody has any last minute questions before we conduct the meeting or conclude the meeting, please feel free to post them. Otherwise, yeah, we could probably wrap up. I'll give just a minute or so for anybody to post any final questions if they do have them, but yeah, no, awesome.
00:48:11.468 - 00:48:39.528, Speaker A: Thanks so much for the presentation, Josh. Yeah, a lot of really cool things, exciting things coming down with Devconsl. I'm excited to see it grow and develop as we're going. And yeah, we'll definitely leave these calls to action links on the YouTube site once we post this up. But yeah, anything that you'd like to add before we conclude, just to stay tuned?
00:48:39.564 - 00:48:54.100, Speaker B: I mean, I know today we went through a lot of slides and what's the word I'm looking for mockups and things like that, but you're going to see here at a much more rapid pace. We'll definitely be demoing a lot of these features here in future meetings.
00:48:54.440 - 00:49:12.956, Speaker A: Cool, awesome. Well, yeah, I don't see anything else coming through, so thanks so much, everyone for joining. Thanks Josh, for a wonderful presentation and update in dev council. And yeah, we'll see you next month, same time, first Thursday of the month. And yeah, talk to you then.
00:49:13.138 - 00:49:13.930, Speaker B: Yeah, thanks everyone.
