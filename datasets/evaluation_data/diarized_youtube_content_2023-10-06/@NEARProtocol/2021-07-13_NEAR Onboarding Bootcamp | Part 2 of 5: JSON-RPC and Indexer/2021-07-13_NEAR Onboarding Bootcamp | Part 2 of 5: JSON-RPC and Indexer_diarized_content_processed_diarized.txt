00:00:00.330 - 00:00:44.134, Speaker A: Let me know if you can see it. Yes. Okay, so, hello everyone. I'm here to tell you about to talk with you about JSON RPC and Indexer. Like an overview, not going to deep dive into details during this presentation. So my goal is to give you a little bit of understanding how things are are working related to GSON RPC and indexer. So I am Bhardan Haraletz, software engineer in superheroes team public node interfaces, and we're starting so to introduce you JSON RPC or indexer.
00:00:44.134 - 00:01:28.330, Speaker A: I want us to be on the same page when I ask you to imagine your core. I really hope that the gods of New York will forgive me for all my representation of New York. So I want to represent New York in our imagination with a small amount of simplification. Sorry, it's too simplified. So let's change it to a bit more proper form. Yeah, so this is a new core. Basically I want you to imagine the new core is a simple core with a lot of complex logic inside and other stuff happening somewhere.
00:01:28.330 - 00:02:12.390, Speaker A: And in order to work with outside world, we want to build different components that are tightly connected to near core, but are doing something outdoors. And these components we will describe as this red triangle. And once we can imagine your core and common way, we can move to JSON RPC. Introduction. So, to introduce JSON RPC component to you, I want to explain its reasoning. For this, I'm going to use your imagination again, hopefully for the last time, but still, maybe I'm lying back to the reasoning. So let's imagine that we have some average advanced developer, sorry, it's too advanced for our case.
00:02:12.390 - 00:02:55.602, Speaker A: Okay, this one will do. So we have an average advanced developer who is thinking like how can I interact with near blockchain? And the reason is obvious, just use GSON RPC API. So how JSOn RPC works? JSOn RPC is just a simple API. So it's working like this. Like we have a user, we have a near core with JSON RPC component. User just sends some request. JSON RPC is moving to another component internal, which is client.
00:02:55.602 - 00:03:54.280, Speaker A: This client can go very deeply into near core, grab some data or write something there, then it gets the result, returns it back to JSON RPC. JSON RPC is translating to something that user can understand and just respond like this. That's all. So I guess you wonder, what can you do with JSON RPC? And the answer is literally everything. I'm not going to read aloud all the stuff. I hope you see the list what I want to highlight is an action that sends transactions which actually the only thing which can write into the blockchain or at least trigger some changes that will change the state in the blockchain itself. All other methods are just the read methods and nothing more.
00:03:54.280 - 00:04:57.530, Speaker A: So let's discuss GSON RPC like overview it as a use case with Explorer that Vlad has told us about a few moments ago. I hope you missed for Explorer. So Explorer used to have a pool model which is simple as working with different APIs. Explorer is just a regular website which uses some source of data to represent it. So it used to use JSON RPC like we have a near core. With the JSON RPC, Explorer sends requests, some data near core, just throw it back with the help of JSON RPC. So this model has some like it's kind of a lot of work of exchanging with the requests and responses.
00:04:57.530 - 00:05:54.400, Speaker A: Not all the data were available at the day when Explorer used to use this JSON RPC so heavily, and it's considered not so stable as it's actually wanted to be. So that's why indexer arise. Check the transition from something that frol has done to something I'm doing. Okay, never mind. So Explorer is the way of listening what is happening, recording all the data processes somehow, and then pass it to whoever is going to listen. As I were saying, it's just a component. So we can imagine how Explorer is landing on near core, what is actually important.
00:05:54.400 - 00:06:37.850, Speaker A: Whenever we say indexer, we actually can mean different ways, different stuff. So there is an indexer micro framework which is a component of near core. It's tightly connected to near core. It's a micro framework which gives some tools and ways to listen what is happening on the blockchain and then pass it to whoever is listening. But it's simple. We saw this diagram. And also I need to mention that we try to skip the word micro when we're talking.
00:06:37.850 - 00:07:33.706, Speaker A: So we're using indexer framework. Don't know what to do with this, free 15 seconds per year, but still we're saving some time. And there is an indexer which is basically the same near core node, but with a little difference. It's a wrapper around the near core node and the circle is not aligned by purpose. I made it so you can feel like the Rupper is touching the indexer, not JSON RPC. And of course it's not completed without some logic, and now it is more suitable. So we have Indexer micro framework, which is a component of near core and indexer is the implementation like someone has taken all the near core node, put a wrapper and then made an indexer so it's under the hood.
00:07:33.706 - 00:08:39.022, Speaker A: It's the same near core but works a bit differently. And we're going to check our Explorer use case but that's this time with the indexer. So the same familiar Explorer but indexer instead of GSON or just a GSON RPC and this indexer for Explorer like check out the naming indexer for Explorer is made for Explorer and it's listening for a data on the blockchain, somehow processes it and stores it in the postgres database in the way Explorer is happy to consume this data. So the model looks like Indexer putting the data into the explorer, not like directly but still. And this method has some props. It's less work from the Explorer perspective. Who has all the blockchain data if not the near core node.
00:08:39.022 - 00:09:51.900, Speaker A: So we have all the necessary data which we're storing into postgres and the responsibilities somehow divided like downtime of Explorer doesn't mean that indexer is down and data continues to be stored in the database. So explorer can have some rest and lay down for a couple of hours at least and no one will hurt from it. So as I was saying, indexer for Explorer is one of the hugest indexer for now I hope it actually utilizes all the data we have in the blockchain. So like storing everything, processing everything. But we can actually make indexers different, smaller. Like for example we can store only specific data we're interested in and ignore all the other data. We can for example store the data related to specific account or a contract, like we can trigger some events, for example pin view and ICQ when you have some tokens transferred to your account.
00:09:51.900 - 00:10:25.070, Speaker A: For example we can proxy data. I'm currently working on an indexer which just getting the data and puts it into Apache Kafka streamer. So anyone can consume this data from any programming language, even from node js. Literally you can do anything like any indexer that can do anything with data you can imagine or you at least know how to do it. So something like that. And I am. Thank you for all your attention.
00:10:25.070 - 00:10:38.580, Speaker A: Now you can finally ask the questions you actually had during this talk and stuff. Thank you Bogdan. Yeah.
