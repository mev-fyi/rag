00:00:04.170 - 00:00:16.506, Speaker A: Hi everybody, this is Ilya from Nier and we're today with Taylor from Topnetwork. Today we'll learn more how Topnetwork operates and interesting things about it. Do you want to introduce yourself a little bit before kind of diving deep?
00:00:16.618 - 00:01:08.020, Speaker B: Okay. Hello everyone, my name is Taylor Way, co founder and CTO of Topnet Network. Let's start a little bit talk about what about the top network, maybe many people are not familiar. Top network, our vision provides a public infrastructure for communication and social media, but in a different way as a decentralized way. So that's kind of sense. That's why we say Telegram if it has our competitor. So actually top network, you have three piece, one is general purpose public blockchain because top chain is a high performance chain to enable real world business.
00:01:08.020 - 00:01:43.470, Speaker B: Second one is a bunch of top service. There is a cloud communication service, just decentralized. For example in like VPN service, messaging, CDN, like that. Third piece is top token critical currency. The third piece on top of them is our ecosystem from real business. So that is a top network. But today we have time limited, so we more focus on top chain.
00:01:43.470 - 00:02:33.930, Speaker B: Yeah, but we can give a very high level is image of whatever top plan work. So let me draw something here. Okay, so top, just like we said, we have three piece. Top chain is top service is top token. So that is a very simple presenter, but inside with more details like this is more technical. On the bottom we call infrastructure. Layer is p to P communication network is a storage network.
00:02:33.930 - 00:02:58.120, Speaker B: Okay. That is bottom line on top of them. On top of them is that service. We are service layer, VPN message.
00:02:58.730 - 00:03:01.318, Speaker A: That's more like applications built on infrastructure, right?
00:03:01.404 - 00:03:42.340, Speaker B: Yeah, but it's a service provider. So both of the node is from the minor or service provider is from a decentralized way. So it's service layer. So a bunch of applications they leverage by SDK API interactive with those services. So we call our app of VPN app, message app, maybe it's a top messenger. So they use an SDK API. So interactive is the top service.
00:03:42.340 - 00:04:10.074, Speaker B: But the top network we call infrastructure is support the service. So this is over picture, but it's decentralized. We want to give the application more choice. So actually we have another one is like marketplace, a decentralized marketplace that app developer can choose which service provider, which.
00:04:10.112 - 00:04:13.226, Speaker A: Service they can use for the same purpose.
00:04:13.338 - 00:04:14.458, Speaker B: The same purpose.
00:04:14.634 - 00:04:19.950, Speaker A: So is this services like pretty much this fixed API, but then implementation can be different.
00:04:20.100 - 00:04:49.202, Speaker B: Yeah. So we offer the common SDK API, say support. I mean the common feature like a core feature, VPN feature, but based on the SDK, you can add on some new one based on that and then deploy the service. But underline the protocol must be compatible. So the whole ecosystem must be run together. So you can play a service on marketplace. I offer something like.
00:04:49.202 - 00:05:20.740, Speaker B: So that's why we call it decentralized cloud communication service. They see as a service it's not a sale, so it's a platform as service, but it's decentralized. But how incentive them is top token. You using top token for app, so they can consume the service. So service get a token paid to a minor. So that's the easy ecosystem in line.
00:05:22.150 - 00:05:24.834, Speaker A: Do the services have business models themselves?
00:05:25.032 - 00:06:07.680, Speaker B: Yes, they can have their business model itself. For example they can free, but maybe they can charge it in other way. That depends on how they cost. Of course. At the beginning we have a bunch of application, we have own, actually we have the user daily active user, we have over 2 million sort of huge user. We have a VPN application, secure message, application, voice call, video call, those. So we prepare more those user to the decentralized way.
00:06:07.680 - 00:06:14.178, Speaker B: So at the beginning, when mannand launch at the day one, a lot of user will be on the chain, on.
00:06:14.184 - 00:06:16.214, Speaker A: The ecosystem, because they're already using application.
00:06:16.332 - 00:06:26.280, Speaker B: Yes, their application of course. So we convert our decentralized application to decentralized way, so off to our user. So they're using this one.
00:06:27.790 - 00:06:29.306, Speaker A: Let's dive deeper into.
00:06:29.408 - 00:07:13.574, Speaker B: Yeah, deeper in the end. That's interesting too. So top chain at beginning, actually we not intend to create our developer, our own chain. We try to fund some chain on the market to support our cloud service, I mean decentralized service. But finally we realized one thing is no chain can be supported them. The reason is current blockchain is so expensive. I mean if we do one transaction we need to pay something.
00:07:13.574 - 00:08:16.540, Speaker B: But for real business, especially for the cloud, the communication service, they have something like very huge warrant, but each transaction is very tiny. Like if you using one VPN for 1 hour maybe pays some sense, but if your transfer fee is more than that, it not makes sense. Yeah, so that let us decide. We create our own chain going to total different way. What's the way we have to make it to go in like the TPS must be enough high to handle the huge volume, because we are real user have on the currently we have 2 million DAU. So they have to support circumstance TPS. Second, the cost is much low, in most case the transaction is zero.
00:08:16.540 - 00:08:51.574, Speaker B: So in most time I'm not always asked. Most time is zillow transaction. They have the flexible to support other service because it is a platform. So have it flexible. So those kind of tag is conflict actually is a huge challenge. So based on those, we design our top chain. So the top chain actually is a multiple chain design.
00:08:51.574 - 00:09:00.486, Speaker B: It's like have the main chain. We have the main chain at the top. Then another bunch of the service chain.
00:09:00.598 - 00:09:02.362, Speaker A: The main chain is on the top.
00:09:02.496 - 00:09:20.590, Speaker B: Yeah, that is service chain. For example, VPN service chain. The main chain is for the financial settlement. The service chain. More about business logic. Business service. But that is not enough.
00:09:20.590 - 00:09:53.190, Speaker B: So we have a third layer. We call is layer two solution. We have a state channel to make a payment. For example, if you have finished one VPN session, it's very tiny, but it's one session. So it's very easy to match the layer two solution. But at the same time you may be using messaging VPN. So bunch of can be combined together on the Service chain.
00:09:53.190 - 00:10:18.290, Speaker B: They get more the better performance. The final submitted main chain. So we call three layer ledger. Okay, but this is chain. But each service chain mentioned inside them. We have support shading. We call two layer shedding.
00:10:18.290 - 00:11:10.294, Speaker B: The top layer is like bitcoin chain. But we have difference other project in like we have zone. Each zone have classified. So each class manages some shot. So zoom is a logic concept. Like that. Inside the zone, we have the physical class one class, two.
00:11:10.294 - 00:11:12.230, Speaker B: Each class measures some shot.
00:11:13.070 - 00:11:15.820, Speaker A: So what do you mean by class class?
00:11:16.430 - 00:11:29.394, Speaker B: You can trade as like a minimal beacon chain. They manage the shadow. So they cross link those shadow. So inside is. That's a two layer shutting.
00:11:29.462 - 00:11:31.582, Speaker A: So that's inside main chain, right?
00:11:31.636 - 00:11:33.974, Speaker B: Inside the main chain. Inside service chain.
00:11:34.122 - 00:11:36.334, Speaker A: So each of those chains has this structure.
00:11:36.382 - 00:11:37.870, Speaker B: Yes. Same architecture.
00:11:37.950 - 00:11:38.546, Speaker A: I see.
00:11:38.648 - 00:12:01.750, Speaker B: Yeah. So a little different from the other sharding project. They more like have the global bitcoin chain on the top. Or they manage some shard. Even the ETH 2.0 version, that problem there, that could be the bottleneck. Why we need to use sharding.
00:12:01.750 - 00:12:29.520, Speaker B: Because sharding give us the advantage. Like we put more node there, the TPS grow, increase, but the cost will be down, which means our final goal is like horizontal scale. So even that's only the bitcoin chain in the top. And direct manager, the shard means they cannot horizontal scale finally be partnered there.
00:12:30.610 - 00:12:40.742, Speaker A: All right, let's dive deeper. So let's say we have, what, four shards, right? Even more. Right? You have.
00:12:40.796 - 00:12:42.854, Speaker B: Yeah, exactly four.
00:12:42.972 - 00:12:44.342, Speaker A: And then same here, right?
00:12:44.396 - 00:12:45.000, Speaker B: Yeah.
00:12:46.890 - 00:13:08.160, Speaker A: So there's few questions here. One is kind of like how does fork choice rule kind of propagate through this? What is the consensus here? What is the fork choice? If there is a fork here, which of this gets picked up?
00:13:08.770 - 00:14:02.478, Speaker B: Let me give you, we talk about from the one transaction, we talk about the whole process. Actually consensus is done either here. The beacon chain is not a manager's consensus, okay? They just manage voting, staking and random time block. I mean the clock, but the consensus is shallow. And the class, what it costs for there is actually secondary auditory secondary auditor for the consensus. So if from the one transaction, actually one transaction is sended to the top chain, they are going to source sender, I mean the sender account based on sender account address based on the select election block. So we can know which zone is handled them.
00:14:02.478 - 00:14:25.654, Speaker B: So is a transaction going to the zone? The zone is more deeply determined which class manage them. So they go into the shadow one, maybe the sender account ad. So here we're doing consensus. Draw the fund from the account. Consensus is a PBFT, just to check.
00:14:25.692 - 00:14:31.282, Speaker A: First, the accounts are statically in each shard.
00:14:31.426 - 00:14:32.546, Speaker B: It's dynamically.
00:14:32.658 - 00:14:34.120, Speaker A: Dynamically. Okay.
00:14:35.290 - 00:14:44.800, Speaker B: There is a big part about how to use a dynamic. It's not very dynamically, but time by time is changing that. Changing that.
00:14:45.570 - 00:14:53.134, Speaker A: Okay, so transaction went into s one, you're saying on s one, I mean this is pretty much a chain. It's on its own, right?
00:14:53.252 - 00:14:53.920, Speaker B: Yeah.
00:14:54.390 - 00:14:57.458, Speaker A: And so you're running PBFT here.
00:14:57.624 - 00:15:16.520, Speaker B: Okay, so once the broker come out, they're not directly broadcast. The market goes through class. So class will be choose a random node to second PPFT. So that PBFT is audit. The result.
00:15:18.330 - 00:15:21.580, Speaker A: Is class. Like a node or what is this?
00:15:21.950 - 00:15:23.706, Speaker B: No, they have a node inside.
00:15:23.808 - 00:15:25.386, Speaker A: This is like its own chain as well.
00:15:25.488 - 00:15:25.898, Speaker B: Yeah.
00:15:25.984 - 00:15:34.586, Speaker A: Okay, so this is its own chain. So block was produced. It gets included here like it's sent as.
00:15:34.688 - 00:15:56.782, Speaker B: That's irregular way, I mean the traditional way to the cross link. We are different actually. When the Broc is come out, the consensus process, one step have to go up to class. They do audit once the audit is finished. So that block come out.
00:15:56.856 - 00:16:05.622, Speaker A: I see. So what is the information that's been sent from the validators of shard to the validators of class?
00:16:05.756 - 00:16:39.482, Speaker B: Yeah, raw transaction, actually, raw transaction, actually go first. Class first. So they know raw transaction. I mean original transaction, then transacting dispatch to shard. Okay, so shard is they create their proposal and going to PBFT, they create some signature. They think they should be passed so they send the result to class again. So that block include transaction hash.
00:16:39.626 - 00:16:54.726, Speaker A: So this is just hashes of transaction, right? Plus I'm assuming at least two third signatures of shard one validators. Okay, so this is sent to class.
00:16:54.828 - 00:17:21.466, Speaker B: Class node, the class node. They have the raw transaction, so they can compare, check the transaction is valid or not, then check the account balance enough or not. So classes, they do secondary pbft, they generate multiple signature, then put on this one, then return back to shadow lead, the leader of the shard.
00:17:21.578 - 00:17:34.622, Speaker A: So what is if they have all the transactions and they have all of the state of the shards that are under the class, why do you need to have those separate chains?
00:17:34.766 - 00:18:10.654, Speaker B: It's a good question. The reason is, if everything put here, that is about a security concern of shedding. Shedding mean like your staking is shedding, your protector is shedding. Actually, if some rishi code node is here, it means for example one. Also there'll be a crap as the consensus. But we separate two layer is a good benefit. In like two layer is run their own.
00:18:10.654 - 00:18:22.434, Speaker B: Logically they are different node. It's hard to find who will be audited. Me, which one will be those consent. Who is a leader? They don't know. Totally don't know.
00:18:22.552 - 00:18:24.414, Speaker A: I mean, you know, who's the leaders.
00:18:24.462 - 00:18:52.186, Speaker B: Here and you know, they don't know. Why not? They send out, they don't know who will be audited. Them all is based on VIF, based on the transaction law transaction, they have the random, and based on the signature, they have increased random number. Based on the time block, they have random number. So based on those together, we will be calculated to who should be the audit them.
00:18:52.368 - 00:18:59.278, Speaker A: Okay, so you're saying not all. So let's say how many validators do you have or how many people in.
00:18:59.284 - 00:19:02.158, Speaker B: The committee here, minimum is 127.
00:19:02.244 - 00:19:03.550, Speaker A: 127.
00:19:03.700 - 00:19:07.890, Speaker B: How many in the class, same minimum is 127.
00:19:07.960 - 00:19:22.280, Speaker A: Okay, so let's say one of them is a leader, right? Now, they produced a block, they collected signature from some subset of this. And you're saying they don't send it to everyone, they send it to a subset of these people.
00:19:22.970 - 00:19:38.778, Speaker B: They send it to a subset actually, but they don't know which subject. So actually they broadcast forced. Okay, class nodes receives a broadcast. Then each node decided, okay, I'm in the subset or not.
00:19:38.944 - 00:20:09.060, Speaker A: Okay, but then your security is just two x. That's all. Right. Because you know, if you did not have this, you only had class and they were doing all the transactions validation. Then for a single account the security of it will be like, you need to compromise two thirds of 127 or like one third to stall two thirds. To actually produce invalid block here, you need two thirds of.
00:20:12.870 - 00:20:13.646, Speaker B: Both layers.
00:20:13.678 - 00:20:25.018, Speaker A: Yeah, 256. When you say that this is sent to a random subset, how big is that subset? And how many of them can, like.
00:20:25.184 - 00:20:27.738, Speaker B: The big set is 61.
00:20:27.824 - 00:20:38.638, Speaker A: 61. Okay, so send to 61 in class. So how many of them, what if.
00:20:38.804 - 00:20:56.222, Speaker B: One says, oh, this is invalid based on ViF? So first, using Vif get as a separate in the class, the second one in Vif select, choose one leader to do PPF to audit.
00:20:56.286 - 00:21:02.310, Speaker A: Okay, so let's say I select it as a leader and I say this is invalid. Look.
00:21:02.460 - 00:21:02.918, Speaker B: Yeah.
00:21:03.004 - 00:21:04.360, Speaker A: So what happens next?
00:21:06.250 - 00:21:14.442, Speaker B: They broadcast the proposal in this class. Ask the other people, other node to sign on that. Sign that.
00:21:14.496 - 00:21:14.954, Speaker A: Yes.
00:21:15.072 - 00:21:17.398, Speaker B: So to second round PPF.
00:21:17.494 - 00:21:27.280, Speaker A: Yeah. If, for example, I'm malicious, I get view state, view change.
00:21:28.610 - 00:21:44.530, Speaker B: If the leader is Malaysia. Yeah. Yes. If the leader is malicious, maybe they can don't send out the proposal. That's okay, because the shadow leader, they will be time out, not finished. Then we send it to a second chai.
00:21:45.190 - 00:21:46.338, Speaker A: So the next step.
00:21:46.424 - 00:21:54.390, Speaker B: Yeah, next step. Next step is using different random number. They're using different subset, different leader.
00:21:55.690 - 00:22:03.638, Speaker A: You need pretty much out of the 61. How many confirmations do you need for this to be accepted?
00:22:03.734 - 00:22:06.940, Speaker B: Same thing. Yeah.
00:22:09.790 - 00:22:19.738, Speaker A: Okay. If you do have two thirds of malicious here and here, you can produce invalid blocks.
00:22:19.834 - 00:22:47.030, Speaker B: Yeah. So actually, why we design this two layer shutting? Another reason is actually between shedding, reshuffling the node, advanced node. So the node is like, just like water is flowing, so the staking is like flowing, so is it random? Is perdition in and out.
00:22:47.180 - 00:22:50.470, Speaker A: So how frequently do you shuffle?
00:22:51.930 - 00:22:54.358, Speaker B: Right now is about like 30 minutes.
00:22:54.444 - 00:22:55.158, Speaker A: 30 minutes?
00:22:55.244 - 00:22:55.554, Speaker B: Yeah.
00:22:55.612 - 00:23:02.766, Speaker A: So you expect in 30 minutes for them when they change to this class to sync up all of the state of all of the shards here.
00:23:02.788 - 00:23:14.158, Speaker B: Right? Yeah. If the node is from the class of one to class two, the new node joins the class two. They need to synchronize some state.
00:23:14.244 - 00:23:17.890, Speaker A: Yeah, they need to download the full state. Do you give them time to do that?
00:23:18.040 - 00:23:26.334, Speaker B: Yes, actually ahead half strike time. I mean, they give the 15 minutes to prepare.
00:23:26.382 - 00:23:26.702, Speaker A: Nice.
00:23:26.776 - 00:23:41.720, Speaker B: Yeah, ahead of the, I mean, we call election. So when the election is effect before the halftime is like 15 minutes. So that is enough time to download something like that.
00:23:42.090 - 00:23:50.550, Speaker A: Makes sense. Okay. But at the end, so you only have like two shards pretty much per class.
00:23:50.700 - 00:24:00.810, Speaker B: No. Depends on how many node we have. That's why we define just a minimum node. If we have more node, we're going to do more shadow.
00:24:00.970 - 00:24:10.130, Speaker A: I see. So then the idea is that you have more shards here and then if there is three of 61, then you can get like three shards in it.
00:24:10.200 - 00:24:18.950, Speaker B: Yeah, of course. The node more is more classic here like this. So both layer is dynamically be expand.
00:24:19.370 - 00:24:28.310, Speaker A: So this doesn't actually run its own chain, right? Correctly understand this is just a set of nodes. This is not its own chain.
00:24:28.650 - 00:24:30.062, Speaker B: Yeah, they're just a validator.
00:24:30.146 - 00:24:35.814, Speaker A: Yeah, they're just validators elected to kind of double check the shards.
00:24:35.862 - 00:24:49.120, Speaker B: Yeah, it's like a shift load into another layer. They just do audit the Vedas. So that's why they can handle more transaction than shard node. They do heavy job is here.
00:24:51.250 - 00:24:52.254, Speaker A: I see. Okay.
00:24:52.292 - 00:25:01.490, Speaker B: Yeah. So in that case, horizontal can scale more node in more crust, more zone, and more shard.
00:25:02.870 - 00:25:11.240, Speaker A: But why did you decide to scale classes versus just use the same structure on top level?
00:25:13.210 - 00:25:14.854, Speaker B: You mean why are we using this one?
00:25:14.892 - 00:25:25.722, Speaker A: Yeah, no, I mean you have beacon chain and zones and classes, right? So you have like beacon chain zone class shard, right?
00:25:25.776 - 00:25:26.378, Speaker B: Yeah.
00:25:26.544 - 00:25:35.526, Speaker A: So class already scales with number of nodes. So what if you just had class on top and just shard shards?
00:25:35.718 - 00:25:57.186, Speaker B: Yeah, but we have built multiple zone. We have one global unique one to synchronize something. Like for example, node join time block. Synchronize the time for every node. So beacon chain will be generated the time block every ten second.
00:25:57.288 - 00:25:58.260, Speaker A: I see.
00:25:59.030 - 00:26:14.390, Speaker B: And over that time block will be have the random nodes there so you can push it to everybody. They're driving them. Every block have to include reference to one time block.
00:26:15.850 - 00:26:17.286, Speaker A: Every block in the shard?
00:26:17.398 - 00:26:18.870, Speaker B: Yeah, they have to reference.
00:26:18.950 - 00:26:21.950, Speaker A: So they pretty much reference like this.
00:26:22.020 - 00:26:24.560, Speaker B: Yeah, actually they reference them.
00:26:25.250 - 00:26:26.478, Speaker A: They send it back.
00:26:26.564 - 00:26:50.966, Speaker B: No, it's like utah block. It broadcasts every node so they know what's the current time block. They know. So they put on the hash random from the time block into their own block so that in the other layer, node can be veted or checked. They could prevent something. Like you hold some block, like you.
00:26:50.988 - 00:26:52.406, Speaker A: Produce them ahead of time.
00:26:52.508 - 00:26:55.400, Speaker B: Yeah, they can prevent this kind of attack.
00:26:59.290 - 00:27:02.630, Speaker A: Okay, but why do you need zones.
00:27:02.710 - 00:27:28.630, Speaker B: In this case zone? That's long story. Because currently, let's say example for bitcom, their node is distributed globally, randomly, which means you don't know where your neighborhood node, it could be very far, near network performance is randomly, but zone. We try to give a concept in like geographic. Yeah, directory.
00:27:28.730 - 00:27:35.140, Speaker A: I see. So you're actually trying to cluster shards within one geography, not one.
00:27:36.890 - 00:28:08.410, Speaker B: Algorithm in node is. For example if you have the bunch node on the California here, the netcoming node could be the five at China. At that case for network issue, other issue could be the use slower than other people. So your consensus cannot catch up. So you'll be slowly, slowly out. That's like a business real world. If you know there is more hair latency.
00:28:08.410 - 00:28:34.098, Speaker B: Yeah, latency, yeah. So be more wins get a financial gain. So we increase you more node here. So that is not centralized way, but we try to increase people is going to put your node is like what kind node is there in the America? So you can put a node there, but not exactly ask you same place, same ger location.
00:28:34.194 - 00:28:40.280, Speaker A: Yeah, no, I understand, but who is deciding which zone will be?
00:28:40.890 - 00:29:16.930, Speaker B: We not decided there at the beginning, the seed node is deployed. We can say the seed node, we put some node on the very important place. What place? For example, international data center like us, West, US East European, Singapore, Japan. So those node as a seed is there, that's there. Then next is just like a community, like javasing. I put a note, whatever they want that you random assign.
00:29:17.510 - 00:29:20.614, Speaker A: No, but let's say I have my computer running there, right?
00:29:20.652 - 00:29:20.902, Speaker B: Yeah.
00:29:20.956 - 00:29:23.640, Speaker A: I spin it up, which zone I'll end up in.
00:29:24.010 - 00:29:27.046, Speaker B: Which zone is do I decide which.
00:29:27.068 - 00:29:27.942, Speaker A: Zone I want to be in?
00:29:27.996 - 00:29:29.022, Speaker B: You cannot decide.
00:29:29.106 - 00:29:31.878, Speaker A: I cannot decide. Okay, so then how is it decided?
00:29:32.054 - 00:29:35.222, Speaker B: That is big country, another purpose exacting.
00:29:35.286 - 00:29:35.754, Speaker A: Okay.
00:29:35.872 - 00:30:25.020, Speaker B: They will do measure, actually we call Pob, like pro bandwidth or pro network. So they will do the test. The test measure is like what's the best zone for this node? But it's not exactly like fts. Follow the satoshi. If I'm more sticking still random, but is a more high possibility. So if your network is very close to zone one, okay, you still be random, could be zone two or zone one, but high possibility is going to zone one.
00:30:25.390 - 00:30:34.526, Speaker A: Okay. But pretty much this requires consensus on a floating value or on a bunch of floating values in a way a.
00:30:34.548 - 00:30:36.720, Speaker B: Little bit not fully do that.
00:30:38.450 - 00:30:44.670, Speaker A: Maybe. Let's talk about what's the consensus on the beacon chain then, like how it actually operates.
00:30:47.090 - 00:30:50.254, Speaker B: If you look into the architecture, it's very big.
00:30:50.372 - 00:30:51.002, Speaker A: Yeah.
00:30:51.156 - 00:31:20.410, Speaker B: They have the three layer ledger, two layer shedding. They actually have the become chain on the top. All of it is not just for technical, all of it. We want to solve the problem. We get a lot of trouble when we develop this chain because nobody can give a reference. That's the kind of architecture nobody have one on the industry right now. So everything we need.
00:31:20.410 - 00:31:35.458, Speaker B: Okay. Find a problem, find a solution, continue that. Okay, so we are talking about some two layer sheding. Yeah. So we can go ahead.
00:31:35.544 - 00:31:50.930, Speaker A: I guess maybe before then. Well, it's kind of related, but. So if you send money from shard one, right to shard eight. So yeah. Okay. We deducted money here. This block is published.
00:31:50.930 - 00:31:52.966, Speaker A: How does it make it here?
00:31:53.148 - 00:32:13.866, Speaker B: Yeah. When we deduct here, we actually do consensus. And just as we said, we do audit there. After audit, they generate one recept. The receptor will be broadcast. Send it to the received sharding. So that sharding can verde.
00:32:13.866 - 00:32:21.034, Speaker B: The receipt is signature by the valid people. Is enough for people is a signature.
00:32:21.162 - 00:32:21.694, Speaker A: Okay.
00:32:21.812 - 00:32:29.618, Speaker B: Then once they using PBFT determine is a valid receptor. They add in the fund to this account.
00:32:29.784 - 00:32:33.266, Speaker A: So what if receipt got lost during this travel?
00:32:33.368 - 00:32:54.300, Speaker B: Okay, that's a very deep question. Yeah, that is deep something. It's very difficult to solve. The mean. We got a lot of problem here. Yeah. If receipt is lost, we have two mechanism to fix them.
00:32:54.300 - 00:33:24.754, Speaker B: One is like. Because the lost transaction actually send it to receiving side. At the beginning the transaction one is going to s one shutting. Another one is going to receive account shutting for here. So actually they know the transaction is coming. They expect the consensus should be received, should be generated in the proper time. If not time out.
00:33:24.754 - 00:33:37.240, Speaker B: So that will be on the leader. Something someone will be asking, proposed asking pull something back. Is like what comes in there.
00:33:37.770 - 00:33:41.142, Speaker A: So they will pull to here.
00:33:41.276 - 00:33:42.586, Speaker B: Yeah, to here.
00:33:42.768 - 00:33:45.302, Speaker A: And they will ask like what's happening with this transaction.
00:33:45.366 - 00:34:00.960, Speaker B: Yeah, what happened? They valid or not deny or something. The process will continue on. I see. Second one here is this one. Why we have two layers. This one generator received here. They have a job.
00:34:00.960 - 00:34:27.100, Speaker B: They should be delivered to there. Get the receipt. They deliver receipt to this shard. They have to make sure they receive their job. So we call it rotting network. So maybe we jump to the Australia network. Maybe more clear about this one.
00:34:27.100 - 00:34:59.250, Speaker B: The top chain. That is different angle. Actually top network have a three layer network. We call age network is a routing network. Routing audit network. And the low one is like consensus. Sorry, what is this age? Actually that is app or client.
00:34:59.250 - 00:35:35.554, Speaker B: They're not a direct contact class. Also you're not directly contact consensus node. Actually they go into a bunch of age node. I see. Yeah. The age node is going to the reach like the cast then going to shut. So their job is routing and audit.
00:35:35.554 - 00:35:47.980, Speaker B: Once finished audit, their job changed to routing. So they deliver the recept or confirmation to the other room, other cluster, then waiting there back to receipt to them.
00:35:56.600 - 00:36:12.644, Speaker A: So what happens for the audit and routing if you do have like a fork here? So somebody got a hold of 66% of stake in the shard, and they actually created a fork. Two blocks that are fully finalized.
00:36:12.772 - 00:36:13.768, Speaker B: You mean they're here?
00:36:13.854 - 00:36:36.300, Speaker A: Yeah. Okay, so, like, one set of people receive this block on the cluster, one set of people, because it's different random number, right, will receive this block, like, they will validate it separately, audit it, sign in it, and then route it to other shards.
00:36:36.380 - 00:37:21.090, Speaker B: Yeah. On the top chain. Actually no folk, I mean, it's not a lot of folk. Even back to the occasion. If the hook, I mean, the most node unclassed and a sha is a mauritian node, you cannot prevent, they generate the block, all the block is a signature where the people sign enough there, they can throw out. So that's the way, if the most node is malicious, you cannot stop them. So we use a different angle to fix the problem.
00:37:21.090 - 00:37:41.812, Speaker B: That's why we call it like a random partition node into the class. Random node is refined to outshot and the staking, higher staking node, there'll be high possibility select relief. And so that way to solve the.
00:37:41.866 - 00:38:22.412, Speaker A: Problem, in this case, I'm not even half like, let's say there's in a cluster, right? Nobody's malicious in a cluster, but I did somehow get in the shard malicious like majority, and I produced two blocks, like create a fork. Very terrible. But I sent it to the cluster for audit, and different set of people received it, because you send it to a random set, right. So what happens when you have those two different sets in a cluster, seeing different alternative blocks for the same height?
00:38:22.476 - 00:38:46.028, Speaker B: Yeah. If we every node in class join the audit, your problem will be another. Yeah, but you only have only 61, that's why only 61 half node join. So possibly is going to the left or going to right. If they can control the network. Okay. Yeah.
00:38:46.028 - 00:39:16.310, Speaker B: In that case, when they actually, inside detail, actually like one half node is, if we have say node is 127, totally half node joins the audit. But then the receiver is not sent by there, the receiver by sended by other people.
00:39:18.520 - 00:39:22.320, Speaker A: But you have half people, so you have a cluster, right?
00:39:22.410 - 00:39:22.952, Speaker B: Yeah.
00:39:23.086 - 00:39:41.070, Speaker A: Half received one block, like half received this one, half received this one. So they will send different receipts, right. These guys will send like that. You didn't, or whatever did spend like hundred. This one said you spend 1000. For example.
00:39:42.800 - 00:39:53.250, Speaker B: Photoboard is for same account, that not happen same. And each channel must be one by one, one finish and another.
00:39:53.860 - 00:39:56.848, Speaker A: But this is blocks of the same height, right?
00:39:57.014 - 00:39:57.296, Speaker B: Yeah.
00:39:57.318 - 00:39:59.648, Speaker A: So they're kind of happening at the same time.
00:39:59.814 - 00:40:02.050, Speaker B: The one, it must be fit.
00:40:03.000 - 00:40:04.244, Speaker A: Must be what?
00:40:04.442 - 00:40:28.716, Speaker B: Because every node can where only one semi is allowed to produce. But problem right now is this node know this transaction, other node don't know. So that's why we say once audited here, when you finish audit, the receipt is not sent by there. They send other people.
00:40:28.818 - 00:40:32.908, Speaker A: I see, but how do they know about it? Or you just sent them as well?
00:40:32.994 - 00:40:41.060, Speaker B: Because we can vf calculate who will be subset to audit. Of course, other node will be sender.
00:40:41.160 - 00:40:50.196, Speaker A: I see. So pretty much everybody needs to receive everything. So if you have more than two shards, right, let's say you have like ten shards here.
00:40:50.298 - 00:40:50.948, Speaker B: Yeah.
00:40:51.114 - 00:41:03.588, Speaker A: So this guy's verifying this block. This guy's verifying this block. For this block, who is going to be? All of them will be senders.
00:41:03.764 - 00:41:09.048, Speaker B: Once the block is audit, the other people have to know that.
00:41:09.134 - 00:41:09.704, Speaker A: All of them?
00:41:09.742 - 00:41:15.320, Speaker B: Yeah, all of them. But they're just waiting to say not take action if they save.
00:41:15.390 - 00:41:17.368, Speaker A: Okay, but they do need to receive all of the blocks.
00:41:17.384 - 00:41:18.796, Speaker B: They need to receive that?
00:41:18.898 - 00:41:21.948, Speaker A: Yeah. So the bandwidth they need to have is pretty high.
00:41:22.034 - 00:41:27.150, Speaker B: Yes, that's why the class have been shutting same way.
00:41:28.580 - 00:41:29.408, Speaker A: What do you mean?
00:41:29.494 - 00:41:42.740, Speaker B: I mean, the one class, they have limited benefits, so they cannot too manage transaction. That's why on this layer we also need to do sharding.
00:41:43.400 - 00:41:48.944, Speaker A: But this is already sharded, right? This is like different shards processed by different folks.
00:41:48.992 - 00:41:55.640, Speaker B: Yeah, so that's why the one class is managed limited shard. The class of manager, another bunch of shard.
00:41:57.420 - 00:42:07.320, Speaker A: I see. So then it's mostly limited by how much like the computers here can receive all of the blocks from all of the shards at the same time, how strong the node.
00:42:07.400 - 00:42:41.264, Speaker B: Maybe if the supercompute, maybe they can handle everything. But our goal is a lot is cheaper node like cloud node. But then maybe $50 per month they can play in the v class node or shut node. So we cannot expect to their house drone. So that's why we say mono. We sprayed more shadow, more class. The case will be still it would be horizontal.
00:42:41.264 - 00:42:42.310, Speaker B: Scale out.
00:42:43.560 - 00:42:45.076, Speaker A: Let's go over the beacon chain.
00:42:45.188 - 00:42:49.076, Speaker B: Okay, so what kind of thing you want to know from beacon chain?
00:42:49.188 - 00:43:02.990, Speaker A: Well, you said it pretty much provides time, right? Provides randomness and keeps track of validators, detect zones. So, yeah, interesting how that operates as well as kind of.
00:43:03.600 - 00:43:59.980, Speaker B: Actually, beacon chain is like the node is shared by all of there of course some dedicated node can be joined the beginning chain, but it's not economically. So every advanced node we call advanced node on class. So that can give you some term. We have the validate node like in the shot we call advanced node in the class. Also we have archive node, archive node in a different network. Okay. Those node can become node.
00:43:59.980 - 00:44:42.036, Speaker B: I mean node will become, become chain. Yeah. So become chain actually is a big network. That's why they not manage the consensus or transaction because they must be slow, must be secure. So for that it's more like with bitcoin chain. What's the thing they need to generate a time block every ten second. They do also do ppft, but slow ppft, just only time block.
00:44:42.168 - 00:44:46.496, Speaker A: What do you mean slow Ppft? They just wait or a lot of.
00:44:46.518 - 00:44:48.092, Speaker B: Node join the ppft.
00:44:48.236 - 00:44:49.676, Speaker A: Okay. Oh, just a lot of nodes.
00:44:49.708 - 00:44:50.988, Speaker B: Yeah, a lot of node.
00:44:51.164 - 00:44:54.224, Speaker A: How many nodes participate or how many expected nodes participate?
00:44:54.272 - 00:45:11.770, Speaker B: At least 256. Okay, at least. So that eternal block will generate the block. This sign then publish to everybody. First job, then second job.
00:45:12.540 - 00:45:16.364, Speaker A: How is this 10 seconds determined why.
00:45:16.402 - 00:45:17.576, Speaker B: We decided 10 seconds.
00:45:17.608 - 00:45:23.710, Speaker A: No, as a node, am I just measuring my time myself or this verifiable delay function?
00:45:25.200 - 00:46:08.190, Speaker B: Several ways. Of course, at the beginning, every computer have a different time, even you synchronize, they will be later will be changed. But at the beginning, the genius brock, they writing, okay, start. This is some seed node, we generate the brock. At that time the time is synchronized. So as a new node join that maybe the UTC time is not same, but they will receive time block. So based on time block we adject the local time.
00:46:08.190 - 00:46:31.680, Speaker B: Not exactly good, but it could be the offset will be removed something so not exact ten second, but around the z one. Because we not ask this, that just is time on the blockchain, not asking like some industrial clock.
00:46:33.940 - 00:46:39.104, Speaker A: The question is Kansas folks start like accelerating time, can they start producing blocks every 5 seconds?
00:46:39.152 - 00:46:50.184, Speaker B: Every 2 seconds is a rod there? It's what I mean, five second maybe is not possible. Nine second, eleven second, twelve second is possible.
00:46:50.302 - 00:47:02.540, Speaker A: Can they do it if they want to? If I change the code that I'm running my machine and I suggest it for everybody to run, will it go to 5 seconds?
00:47:03.280 - 00:47:52.460, Speaker B: If you opt too much from the other node syncing it will be dropped. Yeah, so that's why we're still using PBFT to the consensus. They have the same step on the time. So second job is like node join. So that's a different process for other projects. Each node join actually they have smart contract running on bitcoin chain, they check what you're staking. Do we have the token there signature? Actually when node joins, you have to need to do the PoW to prove they is not attacked.
00:47:52.460 - 00:48:19.540, Speaker B: So some bunch of things that they're valid, the node is good to join, then include the test network, after that they is assigned to some zone, they either generate a block, the block include what's the node address, what's the node staking received the proof they have staking there, how much staking.
00:48:19.960 - 00:48:22.630, Speaker A: So how do they prove that? How do you prove that.
00:48:24.440 - 00:48:29.210, Speaker B: Bitcoin chain? Have ever noticed accountation information?
00:48:30.540 - 00:48:38.056, Speaker A: Where does it get it though? Like the recent one, how do you get the latest data from shards on the beacon chain?
00:48:38.168 - 00:49:06.768, Speaker B: Because this is designed for automatic contracting line for the node. If you will want to join, you have to football, you have to already create account, they have the top token lockup there, then you have to go into your shard to get a receipt, then the receipt is going to send it to their smart contract.
00:49:06.864 - 00:49:10.832, Speaker A: I see, so you have a way to send information from shard to beacon chain.
00:49:10.896 - 00:49:18.260, Speaker B: Yeah, exactly. I see, okay, so beacon chain when vetted is a receptor, it's like a special transaction.
00:49:18.340 - 00:49:21.844, Speaker A: Yeah, in this case beacon chain is like another shard.
00:49:21.892 - 00:49:24.956, Speaker B: Pretty much, yeah, exactly, because you'll pretty.
00:49:24.978 - 00:49:26.604, Speaker A: Much send the same thing, right?
00:49:26.642 - 00:49:47.340, Speaker B: Like you'll send, yes. So the job is not join, it's like valid send recommend to the other class. So that's the major job there of course is staking and slash reward.
00:49:47.500 - 00:49:54.864, Speaker A: So slashing, I'm assuming if somebody like here at audit detects something wrong, they'll just send a receipt to beacon chain.
00:49:54.912 - 00:50:01.556, Speaker B: Yeah, so they do all of a slow thing, but it's a very important thing over there.
00:50:01.658 - 00:50:13.640, Speaker A: And then reward, they just send receipt back to the shard to give the reward back. And then if I want to unstake like I send the receipt as well or how does that work?
00:50:13.710 - 00:50:39.940, Speaker B: If you unstake like I want to stop quit, you want to quit? Okay, yeah, you have to send it to them, I will need to quit, so they will be generated another. It's not a join, it's like a node leave block announced to everybody, they not leave, they're not a joint consensus anymore auditor anymore. So everybody can leave, they can continue accrued that node.
00:50:41.240 - 00:50:44.020, Speaker A: So how fast does node leave propagate?
00:50:44.840 - 00:50:54.490, Speaker B: Long time. Yeah, a lot of node is join leave very quickly if we want to join. Actually you have to wait in 12 hours.
00:50:54.860 - 00:50:55.688, Speaker A: 12 hours?
00:50:55.774 - 00:51:15.790, Speaker B: Yeah, you have to waiting on the 12 hours in the pool then we be user proudly queue is one by one recommended to the top chain when you leave it's similar process, you have to wait but more longer is 24 hours to 72 hours actually that's good.
00:51:16.160 - 00:51:16.476, Speaker A: Yeah.
00:51:16.498 - 00:51:20.210, Speaker B: Otherwise the network change very fast.
00:51:23.060 - 00:51:25.936, Speaker A: Okay, and then you also said it.
00:51:25.958 - 00:52:06.316, Speaker B: Generates randomness, some sorts of randomness, randomness not a wholly controlled by them actually. So shuffling actually is shuffling actually why we are called zone actually we call Zec election committed include all our advanced node in class. So they decide how to shuffle between class.
00:52:06.498 - 00:52:09.660, Speaker A: But how is the shuffling determined?
00:52:10.640 - 00:52:15.052, Speaker B: Randomly is based on staking.
00:52:15.196 - 00:52:17.200, Speaker A: Yeah. So what's the source of randomness?
00:52:17.540 - 00:52:52.876, Speaker B: Yeah, source random is like couple of source, one source, I mean random one source is a global time block because for the chef run for them every 30 minutes. Okay. That you have to include some time block. The tombrock have randoms 1st 1 second one the shuffling, they generate their own Brock actually they have to announce General Brock to announce the shuffling who in.
00:52:52.898 - 00:52:53.948, Speaker A: This case does it?
00:52:54.034 - 00:52:56.232, Speaker B: Yes, the election committee.
00:52:56.296 - 00:53:02.912, Speaker A: So there's another blockchain here, they are insider. Yeah I see, so there's a blockchain on the zone level.
00:53:03.046 - 00:53:05.692, Speaker B: Yes, but they just do election.
00:53:05.756 - 00:53:07.520, Speaker A: So it's like once every 30 minutes.
00:53:07.590 - 00:53:15.750, Speaker B: They produce a block, they generally want block, they generate block. So each block have the random inside.
00:53:19.160 - 00:53:23.296, Speaker A: So when you say there is randomness inside, what kind of randomness?
00:53:23.488 - 00:54:14.892, Speaker B: Yeah, another year which is like talking about staking and random. So each node will be sought by staking. We use FTS, it's called follow the satoshi algorithm. So that algorithm we give us sorting the node by staking, but gives a random. So in that case we be random, choose some node from the class, then go into the pool putting in the pool, actually have the pool here go in the pool. Then another class of shell random choose the pool from pool to replace some node in their shell.
00:54:15.056 - 00:54:20.552, Speaker A: I see, but this randomness is deterministic, right?
00:54:20.686 - 00:54:21.416, Speaker B: Sorry.
00:54:21.598 - 00:54:24.096, Speaker A: This random selection is deterministic.
00:54:24.228 - 00:54:24.716, Speaker B: Yeah.
00:54:24.818 - 00:54:33.292, Speaker A: So where is the source of randomness? Right. Do you just use last hash of the block or you have something?
00:54:33.426 - 00:54:43.760, Speaker B: Yeah, that three is combined together is a source that is drive the committee, election committee, they generate the block.
00:54:45.700 - 00:54:50.020, Speaker A: All right, so my favorite question and if there is a fork on beacon chain.
00:54:52.280 - 00:54:52.788, Speaker B: Sorry.
00:54:52.874 - 00:54:54.228, Speaker A: If there is a fork on a.
00:54:54.234 - 00:55:01.444, Speaker B: Beacon chain, not a raw fork because must be two or so the people agree.
00:55:01.562 - 00:55:03.488, Speaker A: Yeah. So what happened if two thirds agreed.
00:55:03.504 - 00:55:07.752, Speaker B: To fork disagree or they did agree.
00:55:07.806 - 00:55:12.052, Speaker A: To fork like you have two blocks with two thirds of signatures.
00:55:12.116 - 00:55:12.440, Speaker B: Yeah.
00:55:12.510 - 00:55:13.370, Speaker A: What happens?
00:55:14.460 - 00:55:35.436, Speaker B: What happened? The worst case, just like you said there is generate some block is wrong. But even that way they not impact the chain match. Because they just generate a time block. They generate the node join, leave something like that. They're not really destroyed.
00:55:35.628 - 00:55:39.776, Speaker A: But the blocks here may include different hashes of different time blocks.
00:55:39.808 - 00:55:40.292, Speaker B: Right?
00:55:40.426 - 00:55:44.240, Speaker A: Like you may have two shards which have different time blocks.
00:55:44.320 - 00:56:01.604, Speaker B: Yeah. That's why we say we have the protecting here. They will be validated. Like which one shall choose? You have two block generated by bitcoin chain. They will choose one. If they choose. Okay, that is valid.
00:56:01.732 - 00:56:04.552, Speaker A: But you have different clusters, right? They may choose differently.
00:56:04.696 - 00:56:15.870, Speaker B: Yeah, exactly. So that's why the sharding. They manage their own for their sink. This time block is bad. Another shadow may be a different thinking. That's okay.
00:56:16.180 - 00:56:16.928, Speaker A: Is it?
00:56:17.014 - 00:56:30.390, Speaker B: Yeah, because for them, they just read it that time block. They is determined. They is determined. They will check everything. If they both agree that is valid time block it is.
00:56:30.760 - 00:56:35.408, Speaker A: And it's independent that the receipts now kind of coming from different time blocks.
00:56:35.504 - 00:56:38.336, Speaker B: Receive is not time blocked.
00:56:38.448 - 00:56:41.264, Speaker A: Like, not reference time blocks they receive.
00:56:41.312 - 00:57:02.110, Speaker B: They just check who signs a receipt, how many people sign. So that is decided. There is enough power, enough staking. They decided that receipt is correct. Yeah. Maybe the block reference time block is duplicate on here or the focus there. That's the second problem.
00:57:02.110 - 00:57:04.510, Speaker B: It's a small issue.
00:57:06.880 - 00:57:07.580, Speaker A: That's cool.
00:57:07.650 - 00:57:21.030, Speaker B: Yeah, that's why we call bitcoin. We don't want to direct, join the consensus, don't relate about the money. They just do some regular things so they're not incensed as people to fork them.
00:57:25.320 - 00:57:55.100, Speaker A: Yeah, definitely more interesting to fork here and create more receipts with different amounts of money. I mean, that's the problem with sharding, right? Is that we split the security so it's easier to attack and depends. I mean, shuffling every half an hour, obviously is better. Our main concern with shuffling every half an hour is that as your state grows, right. It may become too slow to sync. Right.
00:57:55.250 - 00:57:57.792, Speaker B: Like right now, Ethereum, you may sync it too much.
00:57:57.926 - 00:58:04.050, Speaker A: Yeah. As you go from one shot to another, you may be thinking like gigabytes of state.
00:58:05.140 - 00:58:16.180, Speaker B: Yeah, I know your concerns. They have other design inside. But I'm not talking about the. To solve this concern, we have lettuce.
00:58:16.680 - 00:58:17.280, Speaker A: Lettuce?
00:58:17.360 - 00:58:38.216, Speaker B: Yeah. Dag, ladies. Actually, each account have their own chain different. So they can regularly prune the account. So that's why cast the advanced node. They don't keep a whole history. They just want to keep the last full unit.
00:58:38.328 - 00:58:44.828, Speaker A: Yeah. Well, even full unit like ethereum right now is at 100 gigs. Just the state, not even the history.
00:58:44.994 - 00:59:23.960, Speaker B: Yeah, they have another design like asynchronization on demand. They have to work together today, the blockchain, the one block include a lot of account. You don't know what account include. So that's why when you synchronize, you have to synchronize a whole bunch of block. You don't know? No idea. Dagratis gave us an idea when this transaction is really about account a, so we just want to synchronize. Account A is a block.
00:59:23.960 - 00:59:28.104, Speaker B: There is much light that can be done on demand.
00:59:28.232 - 00:59:32.412, Speaker A: I see. Yeah. I mean, would be interesting to figure.
00:59:32.466 - 00:59:40.510, Speaker B: Out, but yeah, so that's easy. One question problem. There's another design, another solution, one problem.
00:59:40.820 - 00:59:44.848, Speaker A: No, it's good. All right, well, thanks a lot. That was very.
00:59:44.934 - 00:59:45.808, Speaker B: A lot of things.
00:59:45.894 - 00:59:55.460, Speaker A: Yeah. A lot of different components check out. I'm assuming it's top network. Top network. For more details.
00:59:56.120 - 01:00:25.516, Speaker B: Yeah. From the top detail you can visit topnetwork.org. They have a lot of information there. Of course, you can email us, we can give you the response about the technical question or other things. And we also encourage people join our community. They're more easy to get more information. Whatever technical progress or mention.
01:00:25.516 - 01:00:54.896, Speaker B: Actually, we mentioned we develop finisher. We tested. Right now we just hiring the third party company. They are auditing their code. Once I finish the auditing, we be public or source code and then launch mannet. So that's why you ask a lot of question in practice. But that question we also problem challenge.
01:00:54.896 - 01:01:04.872, Speaker B: You also express before. So we have solutions. Yeah, that's great. You are very strong on engineering. You are engineering, you're coding.
01:01:04.936 - 01:01:05.550, Speaker A: Yes.
01:01:06.400 - 01:01:09.450, Speaker B: Good. Okay, thank you, everybody. Thanks.
