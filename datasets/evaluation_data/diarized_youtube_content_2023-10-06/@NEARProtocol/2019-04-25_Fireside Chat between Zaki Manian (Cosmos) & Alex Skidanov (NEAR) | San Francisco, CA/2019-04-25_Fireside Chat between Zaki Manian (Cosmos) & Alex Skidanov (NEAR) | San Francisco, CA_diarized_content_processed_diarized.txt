00:00:05.050 - 00:00:07.600, Speaker A: Let's just, like, chat about, like.
00:00:08.050 - 00:00:11.726, Speaker B: So you're saying cosmos cannot. Cosmos with fishermen cannot work, right.
00:00:11.828 - 00:00:19.022, Speaker A: Well, okay, so here, let's. Let's talk about, like, why I. Why I'm, like, super, super suspicious. No, I'm good.
00:00:19.076 - 00:00:19.920, Speaker C: We're good.
00:00:20.690 - 00:00:38.822, Speaker A: We're not going to be here that long. I think everybody wants to go home eventually. It. Okay, so why do I think fishermen don't work? Okay, fishermen are this validators, I think. We don't know that they work, but they seem to be working. Like, we have this cosmos hub. It has validators.
00:00:38.822 - 00:01:32.230, Speaker A: It's alive. There are other blockchains. They're alive. So, empirically, we have some evidence that this model seems to work and that people participate in this validation process, but validators have to do work every block like, they're out there making decisions about what blocks are valid and invalid every block. And if they go offline, the blockchain halts in sufficient number. The challenge with fishermen is always fishermen in their sort of natural state only have to do work in black swan events. So you have this black swan event, which is a validators generated an invalid state transition, and now the fishermen have to immediately wake up, see that this black swan event has happened, and then respond to it.
00:01:32.230 - 00:01:48.810, Speaker A: And the concern that I've always had, my suspicion that fishermen aren't going to work is I've always been suspicious that anyone will actually run this, effectively run these systems to respond to these black swan events.
00:01:48.890 - 00:01:55.138, Speaker B: Right. But in whale fishing, the fisherman, he's closer to a validator, conceptually. Right?
00:01:55.224 - 00:01:55.522, Speaker C: Yes.
00:01:55.576 - 00:01:57.522, Speaker A: And this is one thing I like about it.
00:01:57.656 - 00:02:05.522, Speaker B: So they're getting reward, no matter, for acknowledging blocks as well. So the fact that they are validators, but they delayed.
00:02:05.586 - 00:02:22.810, Speaker A: Yeah. They're what? Like, in BFT terminology, I think we would call witnesses. They're like active witnesses. But traditionally, witnesses in systems have been a mechanism of convincing people that data is available because a bunch of people are like, yeah, I got this block.
00:02:24.510 - 00:02:31.690, Speaker B: Right. But I guess interesting question would be, since we started talking about Cosmos with fishermen, aka polkadot.
00:02:32.830 - 00:02:34.700, Speaker A: Aka polkadot. Exactly.
00:02:37.090 - 00:02:43.418, Speaker B: What would be your short comparison between security model of Cosmos and security model of Polkadot with fishermen?
00:02:43.514 - 00:03:27.470, Speaker A: Okay. And this is the core of what we are trying to enable with Cosmos, which is my. My. My history with sharding goes, like, way back, probably 2016, I was, like, sitting across a desk from Dominic Williams, from definity. We talk about sharding, like, every single day. And sharding has these problems, which is, one is adaptive state corruption, and the other one is data availability, which are really hard. And I kept being really frustrated by how hard these things are to bring to market as engineering.
00:03:27.470 - 00:04:07.994, Speaker A: I think Alex and the near team are way better engineers than I am and kind of assumed that at some point someone like them would come along and start solving these problems. But I wanted to figure out whether or not we could build scalable systems without solving these problems. And I think there are a lot of advantages to having systems that don't solve these problems. So the security model of cosmos is like a zone with evil validators, or an evil zone. You send your money to it and terrible things can happen. The validators can steal all your money. You're like, oh, I looked at this zone, I read all the source code, it all looks good.
00:04:07.994 - 00:05:10.800, Speaker A: I audited everything. But the evil validators was just like, I hate Zucky. He sent me his money, and I'm going to take it all. And that's basically what fishermen are designed to prevent, is fishermen are designed to enable a system where you can assume that if one part of the system, if sort of like whatever this relay chain, core, shard, et cetera, whatever you call it, is functioning, no shard is ever actually going to do an invalid state transition, isn't going to be able to steal all your money. The goal of Cosmos is we're going to allow this bad thing where like, an evil zone can steal all your money, but we're not going to allow the other bad thing, which is an evil zone can corrupt arbitrary blockchains around it that it's connected to.
00:05:11.410 - 00:05:11.774, Speaker C: Right.
00:05:11.812 - 00:05:14.286, Speaker B: And I guess Ethereum takes it to the further extreme.
00:05:14.318 - 00:05:14.514, Speaker A: Right.
00:05:14.552 - 00:05:17.966, Speaker B: They're also saying we also want to survive a nuclear winter.
00:05:18.078 - 00:05:18.642, Speaker A: Yes.
00:05:18.776 - 00:05:21.822, Speaker B: Which is strictly not easier.
00:05:21.966 - 00:05:46.902, Speaker A: Yeah. Where Ethereum takes this, even like Ethereum 2.0 is taking the system even further, is they essentially want the system to autonomously recover from catastrophic failure of almost all of the validators. And I'm skeptical that this happens without essentially losing all security properties.
00:05:47.046 - 00:05:50.470, Speaker B: But maybe under proof of Vitalik model, it works very well.
00:05:50.560 - 00:05:55.680, Speaker A: Yeah, but how are you going to get your proof of Vitalik after a nuclear war?
00:05:56.530 - 00:05:59.386, Speaker B: Well, you have 50% chance that it's still operating.
00:05:59.578 - 00:06:00.320, Speaker C: Right.
00:06:03.650 - 00:06:20.358, Speaker A: What is the problem that. Can you talk a little bit about more about why the adaptive state corruption problem is so important and why you're trying to solve it with near and why fishermen are good.
00:06:20.524 - 00:06:21.334, Speaker C: Right.
00:06:21.532 - 00:06:31.550, Speaker B: And that is a very different security model between. So effectively, Cosmos says every zone is completely independent. And so I, as a user, I will use a particular zone.
00:06:31.570 - 00:06:31.754, Speaker A: Right.
00:06:31.792 - 00:06:42.694, Speaker B: I will use a particular zone. That zone, I will be synchronizing. And for as long as everything stays within the zone, that's good. And if there's any IBC happening, inter blockchain communication.
00:06:42.742 - 00:06:43.438, Speaker C: Right? Yeah.
00:06:43.524 - 00:07:01.286, Speaker B: If anything happens, then either I will have to ensure myself the security of the zone, I can go there and see the validators and say, well, those validators actually legit, except for that IQ, whatever that guy I don't trust. Or I can just sync the zone.
00:07:01.338 - 00:07:02.500, Speaker C: Right? Yeah. Right.
00:07:03.190 - 00:07:37.760, Speaker B: While what we want trying to do is we're trying to say, so that's heterogeneous approach versus homogeneous. What we're trying to say is this is single system, which you use as a whole. You're not using every shard separately. And so therefore, if one shard gets corrupted and tokens arrive. And that's actually my question about cosmos. So, effectively, in cosmos, let's say zone got corrupted, and let's say that zone was ethermint. And so someone claimed all the ethermint tokens and they sent them to another zone, which was an exchange on that zone, was sufficiently negligent not to verify it, and they gave you money.
00:07:37.760 - 00:07:46.980, Speaker B: The second zone will not be rolled back. Right. That will be attributed to be a failure of the first zone. And the exchange, which was negligent, not.
00:07:51.670 - 00:08:36.366, Speaker A: The sort of origin thought process of cosmos, is. So back in the distant past, there were dinosaurs, and there were these people who were working on smart contracts on this website that's still around called erights.org. Now, they work at a company called Agoric, and they have this really interesting idea. And it comes out of the broader history of object capabilities research. Basically, the idea was that names are really important. And what you can do with a distributed computing system is assign a namespace to the security properties of the thing. So let's say you have the ethermint zone.
00:08:36.366 - 00:09:19.418, Speaker A: The ethermint zone has evil validators. They steal everyone's money. Every token that was originated from the Ethermint zone that is floating around cosmos will be like Ethermint die or Ethermint rep or whatever. Let's say that the Ethermint zone was compromised and starts doing all this evil stuff. The people who are affected are the people who hold things in that namespace. But if you hold things in the BNB namespace, you don't care. And that's sort of the approach of cosmos.
00:09:19.418 - 00:09:33.378, Speaker A: And I think one thing that's really important to understand is also is the approach that near protocol is taking and the approach that cosmos is taking are actually fairly complementary. Go ahead.
00:09:33.464 - 00:09:35.540, Speaker B: Yes. Nier will be a zone at some.
00:09:35.990 - 00:10:29.910, Speaker A: You know, and calling something a zone almost sounds, makes it sound like unimportant. What the core thing we are trying to achieve with cosmos ultimately is not about technology, it's about politics. And what we are trying to do is have a pattern for interaction and scalability that doesn't require political integration. And if you kind of zoom out to how something like Polkadot is different from how something is, Cosmos is, binance is building a cosmos own and using our software, but they don't care about the atom holders, and they don't need to. The atom holders can do whatever they want, can change their protocols in any way, and BNB and Binance can continue to do whatever they want. And I think if that wasn't true, they wouldn't be using our stuff. That's the product market fit that we're going for.
00:10:29.910 - 00:11:02.186, Speaker A: And so near protocol can have an amazing community. It can be the best, most usable blockchain in the world. But there's always going to be somebody who's like, I don't like the decisions that this community makes. I want to make my own. And Cosmos is basically the way, what we've been trying to do is make sure that the rails and the protocols to make those two systems be politically independent but economically still able to interact, exist while all these kinds of awesome blockchains, like near protocol, come into existence.
00:11:02.298 - 00:11:02.766, Speaker C: Cool.
00:11:02.868 - 00:11:11.634, Speaker B: And so, coming back to your question, the goal of near protocol design, the use case, is completely different.
00:11:11.672 - 00:11:11.874, Speaker C: Right?
00:11:11.912 - 00:11:20.850, Speaker B: So near protocol tries to be a single blockchain effectively, so user will interact not with a particular shard. And ideally, user should not even know the shards exist.
00:11:20.930 - 00:11:21.174, Speaker C: Exactly.
00:11:21.212 - 00:11:28.758, Speaker B: They just interact with the system. And so now if a shard gets corrupted and something goes to another shard, that's a big problem, right?
00:11:28.844 - 00:11:29.190, Speaker C: Yes.
00:11:29.260 - 00:11:41.440, Speaker B: And so from there, the question is whether we believe or not that adaptive adversary can actually be that fast and can actually corrupt 66% of a shard. And it feels like it is possible.
00:11:42.130 - 00:12:30.010, Speaker A: I'll tell you why it is possible. And this is the thing that people don't like to think about when they're building scalable blockchain systems is I don't have to break it. Like, corrupting someone a validator is not like, I'm sitting there in my bedroom in the middle of night, electronica playing, like hacking into their computer. I go to Ethereum or a cosmos chain or definity or whatever. I make a very nice smart contract which says, if you can show me a valid, fully signed transaction with this invalid state transition in it, I will give you a million dollars. You've adaptively corrupted because people will corrupt themselves.
00:12:30.080 - 00:12:34.510, Speaker B: And then algorithm doesn't help you much because you don't need to know the person in advance. Right?
00:12:34.580 - 00:12:34.862, Speaker C: Exactly.
00:12:34.916 - 00:12:37.530, Speaker B: Yeah. It's sufficient for them to prove that they exist.
00:12:37.610 - 00:12:38.126, Speaker C: Exactly. Right.
00:12:38.148 - 00:13:02.086, Speaker B: And so from there, the question is, however, algorithm, for example, let's talk about cosmos. Let's say I'm so rich, I'm capable of corrupting validators in the zone. It's actually relatively easy to reach to them because they're in the same discord channel. Right. From here, there are multiple ways you can go to the Discord channel. It exists. And even if Cosmos didn't maintain one, validators like Polkadot might not have one.
00:13:02.086 - 00:13:04.342, Speaker B: Right. Validators will create it.
00:13:04.396 - 00:13:07.170, Speaker A: Yeah, but validators will be social. It's their nature.
00:13:07.250 - 00:13:20.138, Speaker B: Exactly. Then they can hack it. So this is something that ethereum is a little bit ahead of everybody by having eight different clients. So hacking is a little harder. But then it could be a bug in the spec that will not save you.
00:13:20.304 - 00:13:25.870, Speaker A: Then it doesn't help ask people to change social engineer people changing their software.
00:13:27.010 - 00:13:50.134, Speaker B: Once we think that validators are corruptible, and that is possible, then the second thought is that corruption is probably faster than validator rotation, because the usual solution says, well, let's rotate validators so fast that the time it takes for you to corrupt them is bigger than the time between the rotations. But Cosmos is already pretty big.
00:13:50.172 - 00:13:50.326, Speaker A: Right?
00:13:50.348 - 00:14:11.850, Speaker B: And it's been around not that long. And so the state will be large and validator rotation, they need to download state. So Polkadot says, well, they're going to be stateless. I don't know how well that's going to work. In my analysis, it's pretty challenging. So effectively, every transaction needs to have all the Merkel proofs for everything they touch. And so transaction, which is payment transaction.
00:14:11.850 - 00:14:53.740, Speaker B: Today it's two accounts, so two public keys and amount. And suddenly it will become like 64 shot, 256 hashes. So it will become like, how many, 30 times bigger. And so rotation, like, realistically, it's going to be every few days, and with a smart contract, it's going to take 15 seconds. If validator is aware that that can happen, corruption can happen very quickly. And so that's why, for example, our present design, right until we commit to whale phishing, is very close to Ethereum design, and Ethereum design is very susceptible to adaptive corruption. You know, validators in advance, they're there for a day.
00:14:53.740 - 00:14:59.206, Speaker B: You corrupt them, the shard is corrupted. It's a disaster.
00:14:59.238 - 00:14:59.386, Speaker C: Right.
00:14:59.408 - 00:15:03.546, Speaker B: And so that's why what we're trying to figure out is how do we secure it?
00:15:03.568 - 00:15:03.706, Speaker C: Right?
00:15:03.728 - 00:15:06.798, Speaker B: And so quick overview of how you can actually secure it.
00:15:06.804 - 00:15:06.926, Speaker A: Right?
00:15:06.948 - 00:15:32.738, Speaker B: So fishermen is one approach, there's actually two more. One approach says, have so few shorts, that is actually possible to validate all of them. And that's actually a valid approach if you think about it. If you think validator is actually someone who invests a lot of money. So probably 100 people who validate cosmos, they quite reach people. It's actually possible for them just to launch 100 Amazon instances for as long as the reward pays for it, and they can validate 100 charts. So that's one approach, it's a perfectly valid approach.
00:15:32.738 - 00:15:35.702, Speaker B: The second approach, which seems like very.
00:15:35.756 - 00:15:39.914, Speaker A: Reasonable, that occlusion is going to be validating 100 zones by the end, right?
00:15:39.952 - 00:15:50.838, Speaker B: Yeah. Right. Or rather, I think the opposite is also, I think it's very likely that for a while, most of the zones will be validated by all the validators.
00:15:50.854 - 00:15:51.082, Speaker C: Right?
00:15:51.136 - 00:16:09.058, Speaker B: And the second approach, which is more futuristic, says instead of trusting people that computation was done correctly, let them prove to you that it was done correctly. There's this fancy construction called snorks, which allows you to do that, but it's super expensive and so it is unlikely we will see it being widely used.
00:16:09.144 - 00:16:09.346, Speaker C: Right.
00:16:09.368 - 00:16:15.326, Speaker B: There are solutions today, Matterlabs, I think Matterlabs is the most sophisticated, but we're not going to see huge adoption.
00:16:15.358 - 00:16:15.506, Speaker C: Right.
00:16:15.528 - 00:16:18.310, Speaker B: And so fishermen seems to be the most promising approach.
00:16:20.170 - 00:17:26.794, Speaker A: So I had this idea that I mentioned to you on the Ethereum research forums, which may or may not be a good idea. I'm not even sure if it's implementable, but it's actually like, I don't know. I was reading your post and it was the first thing about fishermen that I didn't completely hate, and I was like, oh, how can you make this better? And what I think is probably, like, the idea I like is probably some sort of lottery system where the underlying Merkel transcripts of the state execution are like lottery tickets. And so if you're a fisherman, you have an incentive then to actually go in and look around inside of these state transitions that you're getting, looking for lottery tickets that you might be able to make money of. And that might give you a really high degree of confidence that there's actually someone out there looking at these transcripts to get these who will also detect as a side effect this black swan event.
00:17:26.912 - 00:17:27.580, Speaker C: Right.
00:17:28.990 - 00:17:33.354, Speaker B: That would not complement well fishing. That would be a different approach. Because they cannot be hidden now.
00:17:33.392 - 00:17:33.834, Speaker A: Right?
00:17:33.952 - 00:17:45.734, Speaker B: Because by saying, look, this is a transcript of the execution, you're saying, oh, I'm actually looking at the shard. So at that point, the moment you publish a transcript, the adaptive adversary says, okay, this guy I will need to corrupt if I want to take over the shard.
00:17:45.802 - 00:17:46.370, Speaker C: It's true.
00:17:46.440 - 00:18:01.414, Speaker B: Right. But then the effective idea says that there are going to be so many of them because they're phishing for the lottery tickets, that it will be unfeasible just to identify all of them, and you're always going to miss one. And then the only problem is you need some sible resistance mechanism, right?
00:18:01.532 - 00:18:06.726, Speaker A: It's not like you're pinning in that mechanism to a particular shard, but you.
00:18:06.748 - 00:18:13.418, Speaker B: Have a state effectively by phishing, you're saying, I actually committed to downloading the state. So it is unlikely I have too many of those.
00:18:13.504 - 00:18:13.802, Speaker C: Sure.
00:18:13.856 - 00:18:34.702, Speaker B: Right. Well, actually we just figured out it is likely, but let's say it is unlikely. And then what was I about to say? All right, the problem now is that obviously the payout should be proportional to the stake. They still need to have a stake, otherwise I would be grinding private keys until I get something that pays me out.
00:18:34.836 - 00:18:35.134, Speaker C: Right.
00:18:35.172 - 00:18:38.558, Speaker B: And so that means that the whole set of fishermen is still known in advance.
00:18:38.654 - 00:18:38.914, Speaker C: Sure.
00:18:38.952 - 00:18:40.558, Speaker B: That's actually people who committed.
00:18:40.734 - 00:18:43.150, Speaker A: Isn't that already the case in whale fish?
00:18:43.230 - 00:18:47.586, Speaker B: In whale fish, yes, but it's not whale fish, but whale fishing.
00:18:47.698 - 00:18:49.010, Speaker A: Still whale fishing.
00:18:49.170 - 00:19:03.606, Speaker B: But in whale fishing, the fishermen are not revealed. Like, you don't know who's at the very end of the epoch until they rotate. You don't know who was fishing where. While here, the moment they submit one request for the fee they revealed, unless.
00:19:03.638 - 00:19:09.942, Speaker A: You actually force them, you could say that they can't collect the fees until the end of the epoch.
00:19:10.006 - 00:19:11.642, Speaker B: That's actually becoming a very good idea.
00:19:11.696 - 00:19:11.914, Speaker C: Yeah.
00:19:11.952 - 00:19:12.858, Speaker A: Isn't that a good idea?
00:19:12.944 - 00:19:14.942, Speaker B: Yeah, that actually sounds pretty cool.
00:19:14.996 - 00:19:21.374, Speaker A: I really like it. I think I finally made. We'll see if it's broken. But I think I finally found a fisherman thing that I like.
00:19:21.572 - 00:19:24.078, Speaker B: Yeah, that starts sounding very cool.
00:19:24.164 - 00:20:13.870, Speaker A: Yeah. To a large extent, from my view, the view of what we've been trying to accomplish in Cosmos is that my background is not even in distributed computing, really. I build scientific instruments before I started getting into this blockchain stuff, all of us who were in the first generation of blockchain stuff are amateurs. And so I've been trying to build rails, pathways, and roads for future people who come down who are better at this than I am to build amazing things. And so cosmos is the first step there. And I think near protocol is a big step forward.
00:20:13.940 - 00:20:14.862, Speaker C: Yeah. Cool.
00:20:14.996 - 00:20:17.100, Speaker B: Okay. Shall we wrap up here? Yeah.
