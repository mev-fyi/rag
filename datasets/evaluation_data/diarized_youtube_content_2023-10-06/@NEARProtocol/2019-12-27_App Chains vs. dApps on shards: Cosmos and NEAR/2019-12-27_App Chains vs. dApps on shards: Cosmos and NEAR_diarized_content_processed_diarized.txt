00:00:20.810 - 00:00:39.400, Speaker A: Hey, I'm Ramir. I'm here to tell you we're about to motherfucking break to brain. Like, hello, world, got the blockchain spinning. Everyone here? Hope you're enjoying dinner. Last line in the future here. I don't know, but it's about to start because it's near. All right.
00:00:39.400 - 00:00:58.730, Speaker A: I just made that up, so that's why it's sad. But my name is Peter. I work at near. Usually these events are really boring, so I wanted to kind of kick it up a little bit. So I think you guys read the tag. So I'm not going to do a long intro. This is Ducky from Cosmos, total badass.
00:00:58.730 - 00:01:16.594, Speaker A: This is Ilya from near, also total badass. And we're going to hear them talking about some cool stuff. Oh, thanks. I can take my phone. So, just so you know the format, if you have some burning questions, hold them, because about halfway in, I'm going to pass it to the audience. Somebody's got a little square in the audience. Yeah.
00:01:16.594 - 00:01:32.486, Speaker A: Let me show you. No. So this looks weird, but this is so we can record this for later the audience questions. So if you want a question, if you have a question you want to ask, someone will pass you the square. You can talk it into the square and record it. So just a preview. So you can forget that.
00:01:32.486 - 00:01:40.282, Speaker A: But if someone gives you a weird square, that's why. All right, let's get started. Ilia, do you want to ask the first question or do you want me to ask a seat question?
00:01:40.336 - 00:01:41.294, Speaker B: I'll let you go ahead.
00:01:41.332 - 00:01:41.822, Speaker C: Okay.
00:01:41.956 - 00:01:51.840, Speaker A: So I'm going to start with one of the most technical questions burning on everyone's mind, which is, if you were an animal, which animal would you be?
00:01:53.830 - 00:02:00.318, Speaker C: I think I've always had a natural affinity for hedgehogs, so I think that is my spirit animal.
00:02:00.494 - 00:02:01.858, Speaker D: Haley, what about you?
00:02:02.024 - 00:02:03.010, Speaker B: Dragon.
00:02:07.830 - 00:02:14.040, Speaker A: That's all I've got. So I'm going to pass these guys. They're going to have a quick discussion about whatever they want to talk about. I think it'll be really cool.
00:02:15.530 - 00:02:38.640, Speaker B: Yeah. So, hey, everyone, thanks for coming on. Very busy night, I'm sure, in San Francisco, blockchain week. So the topic of this kind of discussion is upchains versus dapps. And this is kind of the discussion we've been having for a bit now, which spun off from the idea of what's better, cosmos or near.
00:02:39.810 - 00:02:41.898, Speaker C: Or is near just part of Cosmos.
00:02:41.994 - 00:03:13.910, Speaker B: Or near part of Cosmos or Cosmos is part of near or Cosmos is near. We can figure this kind of where this is coming from is this idea that if I'm a developer, right, I want to build some application. Which platform should I choose? Right. Really? This is kind of a big question that a lot of people are asking, and let's just start. What's a good arguments for choosing an app chain or, like, a Cosmos chain? Cosmos zone.
00:03:14.070 - 00:04:35.794, Speaker C: Okay, so I guess the first question to ask is, in my mind, what is Cosmos? How do you know? What is a Cosmos chain? So the core idea of Cosmos is building tendermint was a means to an end. Building the Cosmos SDK was a means to an end. The end is this thing that we're demoing either tomorrow or the day after at the DFI hackathon called IBC, interblockchain communication and inter blockchain communication is an idea that goes back, really to the 1990s, where the first. Where Mark Miller and all the founders of what is now Agoric were working under Xerox and a variety of different other entities, startup companies, et cetera, on this idea of smart contracts as asynchronous communication between sovereign systems. And I found this work on the Internet. I didn't know Mark or any of the agoric people at the time, but it came out of my frustration with the whole sharding conversation. Basically, in 2016, we have time.
00:04:35.794 - 00:05:01.050, Speaker C: I'm just going to do the whole story. I feel like I have to frame the whole story. It has to make sense, like, why cosmos is the way it is. So we'll do the whole story. So 2016, I'm sitting across a desk every day. I'm doing an enterprise blockchain startup, sitting across a desk from Dominic Williams, who's working on definity. It was kind of a side project for him at the time.
00:05:01.050 - 00:05:57.514, Speaker C: And every day at lunch, we would argue about sharding. Then I would go on the Internet and argue with Vitalik and vlad about sharding. I talked to Jay about tendermint, and I got real frustrated by what Alex has, I think, actually branded really nicely the adaptive corruption problem. But it was a problem that really frustrated me in 2016. So I was, like, real sad about it, because basically what happens with the adaptive corruption problem is if you build a sharded system, the whole system, if one shard gets taken over by an evil set of validators and they do an invalid state transition and it gets recorded to the rest of the system, there's not really any completely sane way to go and fix the system. You kind of have to stop the entire universe and fix it again. So I found this work on the Internet at this super 90s website called erights.org.
00:05:57.514 - 00:06:30.234, Speaker C: It's still up. It's the most 90s website ever. It's full of brilliant ideas. And I'm like, I don't know how to adapt these ideas to blockchains, but I think they're really cool. And they basically have a framework where if evil validators take over, if you end up interacting with an evil computer in their system, you can actually figure out what that evil computer did and manage the damage. So I got really excited about this. I started talking to Jay and Ethan about it.
00:06:30.234 - 00:07:02.370, Speaker C: That idea turned into cosmos. We realized that in order to build this idea, you needed consensus and a machine for building blockchains. So we spent basically the last two ish years building that. And then once we built that, we could actually implement IBC. Along the way, all of the people whose ideas this originally was started a company called Agoric. And we have the privilege of working with the original creators of the idea to deliver IBC. And IBC now is the sort of formative thing of cosmos.
00:07:02.370 - 00:07:48.482, Speaker C: But when you say an app chain, you see, I think we have, like, two really good canonical examples of them. One is a chain. Actually, we have three. I would say we have the binance chain, the binance Dex chain, probably, like, the most heavily used, highly transacted upon, value carrying Cosmos network, Cosmos SDK, tendermint network in the world. We have the terra blockchain, which is probably the blockchain that is most used for non speculative applications in the world. It's used for payments. And you have to ask the question, would either of those chains? And Libra is kind of also like.
00:07:48.482 - 00:08:39.138, Speaker C: It's like alt cosmos take all of the ideas I've been working on five years to get out the door, and they are like, we'll hire 40 Facebook engineers to remake them. Cool, thank you. It was free. Those are the kinds of things that I think of as when we talk about app chains. And I think the best argument for why app chains will always exist is there's fundamental social reasons why a company like an organization like Binance, an organization like Terra, would want total control of the environment that they're operating in. They want a blockchain, but they want their community, their aligned self interests to fully control the system. And I think that is probably why.
00:08:39.138 - 00:08:44.900, Speaker C: I think IBC and app chains are a big part of the future.
00:08:46.890 - 00:09:19.040, Speaker B: Cool. Yeah, that's a good story. I mean, one thing that's like, the way I like to portray the kind of difference between app chains versus, like, building an app on Ethereum or some other smart contract platform is that spinning up your chain is actually a lot of work. And that's actually the reason why it makes sense for these companies is because they have resources to do this work. And in case of binance, the. Most of the work is integrating with themselves.
00:09:20.130 - 00:09:31.106, Speaker C: Yeah. And strategic integration in the same way with terror. Most of the work is go to market. The blockchain is just like a real time growth settlement system for them.
00:09:31.288 - 00:09:50.074, Speaker B: So, yeah, if I'm a developer, right, and I'm trying to spin up a product, the amount of work you need to do to actually get from. I have Cosmos SDK to this. Cosmos SDK is accepted everywhere. It's in everybody's wallet and it's on exchanges and people can use it. That's a lot of work, right?
00:09:50.192 - 00:09:52.890, Speaker C: Yeah, but maybe IBC makes that easier.
00:09:53.390 - 00:10:37.314, Speaker B: Let's talk about it. So the kind of flip side of this, if you're just deploying an app on Ethereum, you kind of get a lot of it for free in a way, because you're working in the same common environment. So the idea I use is pretty much building an app chain is like building up your own data center or building up your own server rack. Right. It's a lot of work you need buy the hardware, set it up, configure, hook it all together. You get a lot of value out of it because you have full control. You can install some better networking equipment, et cetera, or you can go and launch an app on the cloud and kind of get maybe less performance, a little bit higher price, but you can do it today, right now from your computer.
00:10:37.314 - 00:11:33.080, Speaker B: So that's kind of the way I like to look at it. And obviously, there is a reason why Google and Facebook would not use Amazon to run all of their computation there, because they're way too big. And at some scale, it actually makes sense to set up your own infrastructure and actually do all this work. But the good example is like Netflix, which kind of grown up with Amazon. And even though probably now it would totally make sense for them to have their own infrastructure, it is embedded into ecosystem so much that it actually will be really hard to integrate. So I think we had the discussion before that you said for some applications like Maker, it would actually make sense to move out of Ethereum and spin their own chain because they're actually not leveraging Ethereum as much as they could have or as well.
00:11:34.110 - 00:12:21.640, Speaker C: Yeah, well, they're paying a lot to use Ethereum. They're not getting additional security for. Well, they and things that are functionally competitors to them have become, like, essentially. And Leland and Haseeb had a great paper about this, I think that came out yesterday or this morning. I saw it on Twitter this morning about how effectively all of these applications have become de facto the governance layer of to, like, let's try and systematize this conversation, because on the whole, I think we probably agree with each other. I think near is a great project. I think building sharded blockchains is awesome, and I'm super excited that it works.
00:12:21.640 - 00:12:57.342, Speaker C: I think we're working towards two pieces or many? There are many pieces that we have to get right to build a global crypto economy. I think Nier is going to be super happy that IBC exists so they can connect to the binance Dex and get liquidity and assets from there to interact with and bootstrap liquidity on near. I think that'll be cool. And basically what IBC should ideally allow for the entire fast blockchain ecosystem. Near is a fast blockchain. Cosmos chains are a fast blockchain. Polka dot is a fast blockchain.
00:12:57.342 - 00:13:46.610, Speaker C: E 2.0 is a fast blockchain. All of these fast blockchains, you'll be able to instantly be able to bootstrap liquidity in the same way that you can instantly bootstrap liquidity on Ethereum if you're ERC 20 via IBC. Because near can implement IBC, they can connect to the finance Dex's implementation of IBC, or the Cosmos hub's implementation of IBC and immediately get access to all the exchanges that have already integrated on the Cosmos hub, et cetera. So when we think about what the cosmos vision is really enabling, the core goal is to get as many of the benefits of being on one big integrated chain sort of available to this entire ecosystem of fast blockchains.
00:13:46.770 - 00:14:03.354, Speaker B: So let's actually dig deeper how IBC actually enables it. Right. Because from the perspective of, let's say I'm an exchange that would be integrating binance Dex is one example, right?
00:14:03.552 - 00:14:51.130, Speaker C: Yeah, I think let's talk about the Binance Dex and imagine this world, because it's like concrete. And I think most of the people in this room have a mental model of what near live will look like when near is live. There'll be defi applications, there'll be gaming applications. Digital assets of all kinds will be issued on this chain. It'll be this rich know over time, probably will get many exchanges that integrate with it, but you also will have this binance Dex ecosystem. The binance Dex ecosystem will have many appealing things. It'll have on ramps and off ramps in many jurisdictions.
00:14:51.130 - 00:15:33.490, Speaker C: You'll have liquidity on it. So all of these things will be really attractive features of the binance decks. And so you're video game developer, you've issued a bunch of assets on near, and you want people to be able to sell them. There'll definitely be various decentralized, centralized NFT exchanges that connect directly to near. But you see this like possibly giant pool of liquidity that is the binance Dex. So there's an IBC connection between the binance Dex and near. You freeze your NFT on near, you generate an IBC packet, it gets sent to the binance decks.
00:15:33.490 - 00:15:51.034, Speaker C: Your NFT gets created on the finance decks. People can trade it, they can collateralize loans with it, they can do all kinds of crazy shit. They can go 100 x leverage on your cryptokitty. And that's the world that I've been working towards.
00:15:51.232 - 00:15:59.470, Speaker B: Well, at the same time, IBC right now connects two tendermint chains, right? So you still need a peg zone, which will pretty much for near.
00:15:59.540 - 00:16:10.286, Speaker C: All we need is a white client. That's canonically all IBC needs. It's just nobody else has written down how a white client works for any of their consensus protocols.
00:16:10.478 - 00:16:13.380, Speaker B: Because for fast chains, light clients are really hard.
00:16:13.750 - 00:16:22.166, Speaker C: I mean, we did it. Celo is doing it. I'm sure there's a way to make near work.
00:16:22.268 - 00:16:36.710, Speaker B: I think the joke was, I think James made it that everything that starts with c has a light. Coda, cello, Cosmos.
00:16:37.050 - 00:16:51.918, Speaker C: Sure. I mean, yeah, I don't know. We were talking a little bit about how near's consensus works, and I haven't figured out exactly how a light client is going to work, but I suspect there's a way.
00:16:52.004 - 00:16:56.714, Speaker D: Quick interjection. This is a moderator question, which is how light of a light client.
00:16:56.762 - 00:16:56.974, Speaker C: Right.
00:16:57.012 - 00:17:04.190, Speaker D: This gets thrown around a lot, the idea that you need a light client. But I mean, I could just make an argument, oh, this node I'm running is a light client.
00:17:04.270 - 00:17:04.514, Speaker C: Right.
00:17:04.552 - 00:17:07.814, Speaker D: So can you define how light of a client it would have to be?
00:17:07.932 - 00:18:03.590, Speaker C: Yeah, this is a really great question that James brings up many times. So in proof of work, you can have these super light clients, and James is super well known for having built them for many protocols. And so it's actually good enough that you can do slow blockchain to slow blockchain. So you can actually do bitcoin to Ethereum 10. But in the world of proof of stake in the world of fast blockchains, you need to track additional contextual information, basically how the validator set changed. How do you know if a new block header is valid? So ideally you want to be able to track that with as little information as possible. And so the canonical smallest amount of information is just like a zero knowledge proof.
00:18:03.590 - 00:18:51.110, Speaker C: What we do in and what we fall back to in the tendermint world and some of the hot stuff designs, hot stuff is kind of another consensus protocol that is vaguely like tendermint is if the validator set hasn't changed very much between the last block you saw and the next block you saw, you don't need the intervening blocks. And that mechanism, while not as theoretically perfect as a zero knowledge proof that all the intervening plots were correct and exist, is, we think, probably good enough. That's what we mean by how light a light client.
00:18:51.530 - 00:19:06.300, Speaker B: But I guess the interesting question still is you still only verify pretty much for light client the validity of the kind of block based on whatever civil resistance is. You don't verify the validity of state.
00:19:08.750 - 00:19:10.386, Speaker C: For IBC, you don't need to validate.
00:19:10.438 - 00:19:29.746, Speaker B: And so this is where the problem with sharded systems comes in, is that because we have possibility that some shards go rogue and obviously like at near, we have a way to contract it, but it takes time and may revert to chain that actually requires, yeah, you.
00:19:29.768 - 00:19:31.246, Speaker C: Have to wait longer for an IBC.
00:19:31.278 - 00:19:46.146, Speaker B: Pack, you need to wait longer, but also you need some kind of way of still recovering from that type of activity. Right. And the normal way of recovering it is to providing fraud proof, which actually tells you that that wasn't valid.
00:19:46.338 - 00:20:58.960, Speaker C: I think we can probably potentially get this kind of thing to work inside of have the ability. There's nothing in IBC that says that the sending chain can't just declare a packet that it previously sent as invalid. It's possible the semantics of that require, because what IBC does, and this is one of the experiments that is IBC, that if this works, we'll argue in favor of app chains, and if it fails, argues in favor of sharded chains, is that we can push a lot of the responsibility for validating whether or not onto sort of end users. And that end user could be like an exchange that just monitors the source chain of things. It could be the wallet that does it, or a wallet provider, or a block explorer. There are people out there who will keep an eye on these source chains and be like, oh, something either terrible has happened there or something that is part of the process, but like sort of a black swan event, like a state reversion has happened and sort of make enough of the economy aware of it that gets priced in.
00:20:59.330 - 00:21:35.210, Speaker B: Yeah, I mean, that's actually my main argument against something like ABC is that now you're kind of pushing the security on the user side, where as a user, I need to be aware of that. The asset I'm trading on, binance, Dax, is actually issued by a cryptokitty chain, for example, which may or may not be valid at this point. Right. So I need to be aware and kind of know what's happening, what's the source of this, and ideally be looking at, hey, is that chain actually still alive? Right. Maybe all validators quit and that chain stalled and this cryptokitty doesn't actually worse anything.
00:21:35.360 - 00:21:45.598, Speaker C: Yeah, it's really an interesting open question about how well markets price this kind of thing at maturity, and we may not know for like ten years, but.
00:21:45.684 - 00:22:11.080, Speaker B: When you say price, that means you're mostly talking about assets that can be priced by, let's just call it some market forces, right? If you're talking about user data or some other information which has value to me but to nobody else, now, you cannot use that anymore. You cannot use market pricing as a kind of argument for data validity in a way.
00:22:11.850 - 00:22:23.706, Speaker C: Yeah, let's think a little bit about that. So what's like a good example of a use case, though?
00:22:23.888 - 00:23:15.386, Speaker B: I mean, the example we like is like social graphs, right? It's like, let's say I have my social graph, which is encrypted, and I, for example, want to use it in some other application on another chain, and I need to prove that this is my social, some connections about it. So I need a Merkle root of that or whatever. And I have a zero knowledge proof that I know those people. I mean, I'm just making this up right now, but you actually need to send that Merkel root to the other chain for it to kind of validate it and some history of it. And if I do that, but the other chain disappeared, that Merkel root has no value to anybody else in a way, except me. And maybe a actually trading, maybe I'm selling my data to Facebook for whatever reason and to Facebook. It has value to me.
00:23:15.386 - 00:23:22.910, Speaker B: It has value. Nobody else would pay any money for it, partially because I'm not going to give keys to my data to anybody else as well.
00:23:22.980 - 00:24:32.210, Speaker C: Yeah. So this is what I would describe as sort of some variant on the data availability problem, which is in cosmos. So in most sharded blockchains, and there are some not exactly sharded blockchains that also have these properties in cosmos blockchains. We don't assume that data is available across chains, which has one upside, which is it allows sort of private proprietary systems to interact with public blockchains using the same protocols that we use to do public blockchain to public blockchain interaction, which seems to be a useful factor, potentially is useful, but it has this downside, which is you don't know whether or not the source chain is going to exist. And if the source chain becomes unavailable to you, it's going to have some impact on your ability to use the wider ecosystem, and that might end up being really hard to reason about. And I fully accept that that might be a downside to a cosmos like system. It may not be a problem in practice.
00:24:32.210 - 00:24:42.134, Speaker C: It may be that you look at the validator set of a chain and you're like, okay, this is pretty likely to be to remain available because that.
00:24:42.172 - 00:24:43.446, Speaker B: Sells the same people.
00:24:43.628 - 00:25:11.520, Speaker C: I mean, there's 200 ish validators in the world right now. I think one of the biggest constraints on growing the validator set is proof of stake. Blockchains have to become a lot more valuable before we can afford to pay significantly more people to run validators. Cosmos, as a practical matter, can't even pay 100 validators right now, enough money for them even to break even.
00:25:13.570 - 00:25:18.414, Speaker B: Yeah, that's definitely kind of a significant.
00:25:18.462 - 00:26:04.400, Speaker C: Challenge in this, I think IBC, these are the challenges that we won't really start to understand until the system is live and has been out there for a while. So I'm really glad that other system designs are also evolving in parallel. And I think short term, a big use case is going to be like bootstrapping liquidity, bootstrapping initial applications on all of these different fast chain design variants so we can quickly. You don't have as hard a problem of bootstrapping an entire economy as we try out new technology.
00:26:06.130 - 00:26:43.646, Speaker B: Yeah, I mean, I agree that that's definitely like, given cosmos is already here and with game of zones launching, that's definitely interesting. I think looking forward, the question is where the balance will lean toward. Where would the newcomers, new developers in the ecosystem come in and how do we guide them from like, well, if you're building this kind of application, you should choose this type of platform. Let's assuming there is a platform that is fast chain, scalable and actually has enough of this liquidity and partnerships already set up as well.
00:26:43.748 - 00:27:10.502, Speaker C: Yeah, so what I expect is that both will exist. I think larger organizations, large communities, preexisting communities will almost always choose to build their own sovereign chain rather than jump on some existing chain just because they want the sort of full integration of the stack. We'll see. Well, you want to push back against that.
00:27:10.556 - 00:27:38.222, Speaker B: I mean, the question I have, and this is like a pricing question as well, right? Because if you're launching, let's say I'm a community, we were just talking. There's some communities from Reddit that actually spun off as their own website and their own, it's not a blockchain at all. They just literally need a way to monetize the community. And they wanted sovereignty and they wanted sovereignty on features, but they don't really care where the financial system comes.
00:27:38.276 - 00:27:38.878, Speaker C: Sure.
00:27:39.044 - 00:27:41.102, Speaker B: I mean, they're not using blockchain right now.
00:27:41.236 - 00:27:45.790, Speaker C: What I'm saying, yeah, they're just using databases, but blockchains are just databases.
00:27:46.550 - 00:28:13.834, Speaker B: But the question there is mostly like how much they're willing to pay. Right. Because you're saying Cosmos hub right now is not breaking even. If we're talking about something even smaller that has a smaller community, then it's even harder to break even to have validators to care. And then you have smaller set of validators, which are, by the way, very correlated with every other validator set. So at the end, you're kind of getting the same security as from an individual.
00:28:13.952 - 00:29:36.866, Speaker C: You only need on the whole, one high value blockchain to sort of anchor a set of validators into existence. And then this is our hypothesis, but I think it does describe the world as it is, which is mostly what has happened is, okay, so there's been enough cosmos is profitable enough to bootstrap 20, 30, 40 validators into existence. Those validators can make money to sort of pay the bills and keep the lights on by running cosmos validators. Hopefully with launching IBC, they'll make some more money, not just from atoms going up in price, but actually like transaction activity, securing other chains, like actually interesting crypto economics. And then they use that as kind of their base, and then they go out and secure all the, go out and talk to all the other chains and find other things to secure and find incremental value. It's not like one of the things that's, I think, interesting about the proof of stake world is it's not clear that every chain fully pays for their own security. It may be that all of proof of stake collectively sort of subsidizes the security of all of proof of stake, that there is like one stake security pool.
00:29:36.866 - 00:30:24.660, Speaker C: And because reputation effects are so large that effectively you can be a much less secure chain. But let's say because polychain labs or occlusion or somebody else who has a lot of reputational skin in the game decides to validate on you. Occlusion makes almost no money validating on terra. We do it because it is an interesting project in the cosmos ecosystem. We think we can probably upsell other services to the terra ecosystem. There are a variety of reasons to do it, but on an operational day to day basis, where we have lost money on the terra ecosystem, but we still run terra on our production ecosystem, and the terra ecosystem benefits from the security of the full occlusion system.
00:30:25.850 - 00:30:32.200, Speaker B: So you're saying if somebody comes in and tries to bribe you for terra specifically, probably not going to do it.
00:30:32.810 - 00:30:48.198, Speaker C: There have been oracle attacks on the terra stability oracle. I haven't done a lot of analysis on how those happened, though. But for validator infrastructure, they do run on occlusions production infrastructure.
00:30:48.294 - 00:30:50.170, Speaker B: I mean, Oracle is a separate story.
00:30:50.240 - 00:31:07.746, Speaker C: Because there's, I think any validator can contribute to the Oracle, though. So it may have been some validators involved in the tag. We also had the largest double signing slashing event on Cosmos so far on the terra blockchain. Like a $50,000 slashing event.
00:31:07.848 - 00:31:44.160, Speaker D: So this is a good point to sort of turn it over to the audience. I think actually the first question I'll ask because I have moderator power, which is kind of changing gears. I'm really curious about sort of looking inside of. I mean, I know a lot of the stuff that goes on inside of near, but this is to both of you either way, which is looking inside of your organization. What are some of the mess ups or things that you wish you would have done differently or things that you were, oh, shit. Moments that you learned a lot from that were formative for how you moved forward.
00:31:45.330 - 00:32:55.774, Speaker C: I guess the thing that has been honestly a real challenge for Cosmos is that transition from launching that launch moment to we're six months out from launch. And while we were working towards launching, we had singular purpose. We knew how to prioritize resources. It was obvious what needed to be done next. We agreed on a launch roadmap that we essentially followed in April 2018, and that took us all the way, basically to March of 2019. We had a year of just like, this is the thing on the list that's done, we'll do the next thing that's done. I think it is really hard as an ecosystem once you get past launch to figure out what to prioritize, what's more important, what's less important, should we be making tendermint faster, higher throughput? Should we focus on more features that are appropriate for, should we do like lines? And honestly, at least we have IBC to get out the door.
00:32:55.774 - 00:33:28.174, Speaker C: So that gives us some amount of focus and pretty soon we'll have IBC out of the door and then it'll become even less clear what is the obvious next solution and maybe what happens. Part of our strategy has been to help spin up other teams that are beyond tendermint and that has worked okay. But yeah, the next phase, the phase that comes as hard as launch is the phase after launch also super hard.
00:33:28.372 - 00:33:29.662, Speaker D: Got stuff to look forward to?
00:33:29.716 - 00:34:34.660, Speaker B: Yeah, that's something to look forward to and make a note for sure. I think on our side, I think the kind of hardest pivot of sort that we did was switching pretty much totally how we do sharding. Pretty much at some point we realized that the design that pretty much everybody else's uses right now and kind of was what Ethereum has been doing before is very much affected by adaptive adversarial corruption, it's affected by data availability issues and also very hard to implement. And that was kind of like we actually implemented it, big part of it. And as we were trying to figure out what is all possible thing that can go wrong with this, we're like, well, just figuring out how to get it to actually production state would take so much time. And at the same time we know all of this known issues with how to break it.
00:34:35.670 - 00:34:39.942, Speaker C: And as I mentioned, if it breaks, it's really not obvious how to put it back together.
00:34:39.996 - 00:35:27.080, Speaker B: Yeah, so that was like, let's just say somebody did break it. There was no clear way to reverse it. So that's where pretty much spent some time, and specifically Alex, spend a lot of time thinking like, is there better way to do sharding in general? And then we just kind of sat down by whiteboard and just cut down all those things, making it simpler and simpler and simpler until we actually made design very simple such that a, it's easy to implement, b, it's easy to understand, and C, it solves all its problems. And that was like a pretty transformative moment and obviously pushed down a little bit from what we expected to launch. It also forced me to implement tendermint with our runtime just so we have something running for some of the developers we have.
00:35:27.770 - 00:36:42.700, Speaker C: Well, I would say that for instance, with IBC, what we decided many of the pieces of the Cosmos stack have been rewritten in once or twice or three times. And a lot of the reason why we think that was necessary is we didn't do a lot of design work up front. So one of the things that we really focused on with IBC is literally four months of design work in an open community process where it was mostly tendermint, interchange foundation and agoric folks. But there were other contributors as well who would come along and do a design process with all of us. And hopefully the plan is that that allows us to deliver IBC in a faster way now that we've shifted into development so far, going pretty well, and we'll find out. We have this demo, we have security audits, we have a somewhat unclear idea of what launching looks like. So there's still a lot of work to be done.
00:36:42.700 - 00:36:44.266, Speaker C: Cool. All right.
00:36:44.288 - 00:36:49.182, Speaker D: Yeah, I want to turn it over. So does anyone have a question? I can pass you the magical feel.
00:36:49.236 - 00:37:08.226, Speaker B: It was awesome listening to you guys, but I feel like the very, very first question was never answered. Like, if I'm a developer today, why do I use cosmos? Why do I use Nier? Can near work on Cosmos? What am I supposed to develop? Where? Which chain do I choose? So if you're a big company, then you can go with Cosmos.
00:37:08.418 - 00:37:27.878, Speaker C: I mean, smallish startups have had some success, but there is admittedly no real clear path for a solo or two person, three person team to end to end launch a Cosmos chain.
00:37:27.974 - 00:37:40.746, Speaker B: And I would say if you're a smaller startup, it really depends on what your goals are, because if you really want to deliver a product, if you really want to get in front of the users, you should go and build on something that provides you all the infrastructure.
00:37:40.778 - 00:37:41.022, Speaker C: Right?
00:37:41.076 - 00:37:55.220, Speaker B: It's same with if you're building a startup and really what you're trying to do is get your product in front of the users, you should go on AWS or in Google Cloud if you're trying to build a robotics farm or something, or if you're trying to build.
00:37:55.770 - 00:39:02.540, Speaker C: Some cool stuff that we've seen on Cosmos is something called Akash Network, which is by one of the founders of Firebase, or actually, I think the founder of Firebase and CEO before he sold it to Google of Firebase, and he built this whole control plane for arbitrary Kubernetes workers on top of the Cosmos SDK. It's insanely complicated. Or if you are a big company, but you only have a small number of developers, but you have a very clear product vision, like did, like Terra, I think, probably had like three or four developers, even though they've raised lots of money. They're part of a large corporate entity like network in Korea. It allowed them to just get a fully integrated system out the door really fast because there is a ledger app and validator infrastructure and HSM integration and a web wallet that you can fork and all of that stuff. All those pieces actually are there. So it does accelerate your time to market.
00:39:02.540 - 00:39:57.546, Speaker C: Where people are obviously frustrated in the cosmos ecosystem is that I have some simple idea that I want to try. I want to try some financial primitive, some variant on staking. I want to just change things up in maybe a small way or experiment with something new. Cosmos does not currently offer any real path to this now, probably potentially months or years down the road. We intend to have things like cross chain validation, where you can just pay some cosmos hub validators to validate your chain, sort of in protocol. And so a single developer could sort of negotiate all of that in protocol and have a chain come into existence. So I imagine things like that become possible in two or three years.
00:39:57.546 - 00:40:06.400, Speaker C: But near might just be, like, completely awesome by then, and maybe people aren't as excited about that. So there's two sides to this.
00:40:07.090 - 00:40:08.462, Speaker D: Does that answer your question?
00:40:08.596 - 00:40:09.342, Speaker B: All right, cool.
00:40:09.396 - 00:40:11.280, Speaker D: Anyone else got questions in the back?
00:40:14.630 - 00:40:18.580, Speaker C: I mean, Alex has to. Alex has a bunch of code to write.
00:40:20.070 - 00:40:40.358, Speaker D: I just got a quick question primarily on IBC. So let's just stick with like, an ERC 20 token. If I'm trying to send it to two different blockchains integrated with IBC, let's say finance Dex and somewhere else, do I need to also build the original smart contract on both of those other chains in order to mint it on those new chains?
00:40:40.454 - 00:41:48.286, Speaker C: No, basically the way. So this is called ICS 20. For whatever reason, it is the token transfer standard. And basically, IBC is designed to be between heterogeneous systems. So you might have a minting contract that is in a minting and freezing contract that is in solidity on one chain and runs on the EVM, and you might have go coded the Cosmos SDK on the other chain that implements the comparable business logic. But if the ICS 20 standard is implemented on both sides, there will be a freezing and minting contract on one side, and there will be some module that implements freezing and minting on the other side. So you should be able to send your token, whichever chain you're on, to that implementation, and immediately get it in the form that it is in.
00:41:48.286 - 00:42:24.220, Speaker C: The other implication and things that we had to do in order to preserve that vision of compatibility are like, for instance, Cosmos SDK integers are 256 bits, like Ethereum integers, which everyone hates. But there's so much fighting about this because we really don't need anything more than 64 bit integers, but we made them 256 bits to make sure that we could support ERC 20 denominations, which are 128 bit. Does that make sense?
00:42:26.110 - 00:42:41.962, Speaker D: Yeah, I guess so. Either way, if you were trying to send a maker token and a die from Ethereum to Cosmos, wouldn't you need two separate contracts on Cosmos to track ownership of the cosmos maker token and the Cosmos die token?
00:42:42.026 - 00:43:19.286, Speaker C: No. So the ICS 20 implementation on, let's say the Cosmos hub knows how to handle tokens coming from arbitrary blockchains. So it basically says, you don't have to implement a new contract, it just says, oh, an ICS 20 message has come in. I do this now. There's a maker token that originated on Ethereum on my chain. Same thing with die. Typically in the ICS 20 ecosystem, all of the complex business logic about when do you issue and stuff like that all has to will reside on the source chain.
00:43:19.286 - 00:43:35.890, Speaker C: So you'll have arbitrary things, but then you just implement this uniform ICS 20 packet, and then any other chain that understands ICS 20 can just know that the token is frozen on the source chain and instantiate a movable token on the destination chain.
00:43:36.310 - 00:43:43.566, Speaker B: So you can only move the kind of, let's just say NFT or like fungible token.
00:43:43.678 - 00:44:24.434, Speaker C: So that's ICs 20. And then there's another iCs that I don't remember for NFTs. And no, I don't think I forget what they. Also, we imagine there will be many of these other application layer protocols. Like another one that's being worked on right now is cross chain accounts. So accounts that sit between blockchains. So you have an account on one blockchain that is essentially controlled by the validator set of another blockchain that's an example of not token transfer, use case cross chain staking, all that stuff.
00:44:24.434 - 00:44:46.790, Speaker C: And then you have what agoric has been working on, which is sort of a generic code and message in JavaScript transfer system that also will live on top of IBC. So we have all of those. And I'm kind of hoping over the next months to see the developer community come up with lots of new application layer protocols.
00:44:50.430 - 00:44:59.340, Speaker B: We just have it easy, we just have it all in one chain in the same protocol. So sure, you can call anything, get anything, and it all works.
00:45:00.190 - 00:45:12.320, Speaker C: Yeah, you just have, like, a function call interface between that is exposed either both on the same chain and on multiple chains. Yeah. I have so many questions.
00:45:13.890 - 00:45:16.050, Speaker B: Have you considered the Geoff incubator.
00:45:17.830 - 00:46:07.374, Speaker C: Like IBC incubator or Cosmos apps incubator? So I guess the big thing that I really feel about. So if such a thing existed, I would want it to be a Dap, is basically what I would say. I think that one of the biggest. I'm hugely critical of ecosystem funds and incubators from the project team. All of your judgment about what is good and what is bad is totally corrupted. Your ability to capital is completely misaligned with incentives. You're bad at judging things, and it only gets harder.
00:46:07.374 - 00:46:43.790, Speaker C: So I would say that we're six months into having Cosmos be live, and it's kind of been completely obvious, like, what we should put resources into. And I think every month that goes by and more of the sort of general investment investing community starts to believe in our ideas, it becomes harder and harder to figure out what's under resourced, what's good, what's bad. So if there isn't some sort of novel investing decision making structure on top of this, I have never really believed in that kind of a mechanism.
00:46:46.370 - 00:46:53.220, Speaker B: From our perspective, the way we think is this space right now is missing really successful companies.
00:46:54.230 - 00:46:55.220, Speaker C: Hell, yeah.
00:46:55.750 - 00:47:01.698, Speaker B: And part of it is when we go and talk with our friends outside of crypto and say, hey, oh, you.
00:47:01.704 - 00:47:03.330, Speaker C: Have friends outside of crypto?
00:47:03.990 - 00:47:04.738, Speaker B: Yeah.
00:47:04.904 - 00:47:07.934, Speaker C: You're a lucky man. Well, I don't have any friends outside.
00:47:07.992 - 00:47:14.710, Speaker B: Of crypto, and we're trying to convince them to quit their job and start building in crypto. So we have more friends in crypto.
00:47:15.130 - 00:47:20.114, Speaker C: See, that's what happened to me. I convinced all my friends who were not in crypto to be in crypto.
00:47:20.162 - 00:48:12.650, Speaker B: We didn't exhaust that pool yet. The kind of the feedback there is that, hey, we've been building and been successful in doing web two. So Sasha has a friend who built Patreon, for example. And there's huge amount of tools you can build really quickly, there's huge amount of users you can onboard, and there's business models you can use. And here in blockchain, we're kind of lacking. Even if we have ideas how to solve some of those problems, we still lack an examples that people can like, oh, yes. And like, Firebase actually is, like, interesting example where when they launched, they had, like, few example apps which people like, oh, I don't care about the apps that they have, but it's a good example of the use case that I want to use in my own app, right? And that's how I actually started using Firebase myself, was like, oh, I don't care what that is.
00:48:12.650 - 00:48:18.186, Speaker B: But it was interesting experience that I tried and like, okay, now I'm going to go build something on myself.
00:48:18.368 - 00:49:29.380, Speaker C: So I feel really torn right now. It was obvious that until we had scalable fast proof of stake blockchains, it was going to be really hard to build anything that anyone would want to build with. So it was like, it basically lasts like three years of my life to make sure those came into existence and now they exist. So now what's the question? And we struggle with this internally inside cosmos, and we argue about this a lot. And this is part of having a live system, but trying to pick direction, which is, there's one strategy which is go all in on base layer tooling, build a mobile SDK, build a JavaScript SDK, get ide integration, just make all of those tools come into existence. But all of that still assumes that someone else is going to come along and actually build the application. The alternative strategy is to go all in and building an end to end application yourself and maybe hive off any of the tools that you had to build along the way.
00:49:29.380 - 00:49:51.146, Speaker C: But focus on one good solid use case as an organization, as a company. Certainly both approaches sort of exist inside cosmos. We don't know which one to pick, but I think almost every project is going to face a similar dilemma, I think.
00:49:51.168 - 00:50:13.882, Speaker B: I mean, the kind of incubator idea, right, is kind of doing both. I agree that it's totally biased, and when you're giving money to somebody, that's where the judgment is totally off for sure. But there's so much other help you can provide to projects being ecosystem. Right. With the knowledge.
00:50:13.946 - 00:50:41.690, Speaker C: Yeah, give them access to developers, you can prioritize their tech support requests, you can build libraries that they need based on what they do. And we've done some of that. And there's an application we'll show up at DeFi hackathon called Microtech that is very much, there's no formal incubator, but we definitely incubated that application using a combination of resources from externally, the originators of the project, and our internal resources.
00:50:42.590 - 00:50:44.938, Speaker B: We've been doing that for projects building on us.
00:50:45.024 - 00:50:49.034, Speaker C: Yeah, I've been seeing it and I'm excited about it.
00:50:49.232 - 00:51:01.422, Speaker B: And a big part of it actually helps us a lot to improve our own developer experience and user experience, because that kind of is immediate feedback loop from their users and their developers too.
00:51:01.556 - 00:51:35.930, Speaker C: Yeah. If you don't have a close relationship with your developers and you're just building tooling, it is easy to sort of wander off in the weeds. Sure. Well, I mean, I think that's what consensus was able to fill. None of their applications were really that successful, but there was some benefit to sort of co locating application and tooling development. Like the tools are the parts that have succeeded and actually have adoption. Basically none of the applications succeeded, but maybe there wasn't some benefit having a feedback loop.
00:51:37.310 - 00:51:45.600, Speaker B: So if I want to go about implementing IBC, let's say for example on near, where do I start?
00:51:47.250 - 00:52:19.034, Speaker C: There is a rust implementation of IBC that is being like some of the pieces of IBC that's under the interchange GitHub, which would probably be pretty helpful for building one that targets near. You can probably build all of the pieces of IBC targeting just the near VM. You don't have to make any base layer changes. And then the other part, which is the hard part, is how to build a light client for their consensus protocol, which may require some more help.
00:52:19.152 - 00:52:40.750, Speaker B: Yeah, we're working on that because we're actually building a bridge to Ethereum and we already fully figured out how to verify Ethereum headers in very nice, cheap way nice. And now we're trying to figure that out the other way. We're verifying our headers pretty much on Ethereum, which is way harder.
00:52:42.050 - 00:53:51.362, Speaker C: Yeah, I think there's lots of people on the sort of Cosmos research team that would love to talk to you about it. We're frankly very interested in helping build white clients for other protocols. We've really not seen any other research efforts that are. We just had a presentation today from the chainsafe team on east two like clients, which went well, but it was also very confusing. East one, I would say that white clients were a thing that we thought were easy, and then over time realized was, and then we tried to do it and we realized they were hard. And then we spent a lot of time running specs and now we have implementations of those specs and hopefully that's good enough. I do think the approach that the Celo team has been following is also pretty rigorous, but we desperately need white clients are the basic building block of interoperability.
00:53:51.362 - 00:53:54.914, Speaker C: So we've got to figure them out for a lot of different protocols.
00:53:55.042 - 00:53:56.840, Speaker D: We got a question over here as well.
00:53:57.210 - 00:54:57.734, Speaker B: You guys have been talking a lot about slow and fast blockchains. What makes you feel like the new generation of blockchains is fast enough or significantly fast enough that it's going to be different than what you're calling slow. I mean, from our perspective, we're building a sharded blockchain, but more specifically we're building dynamically sharded blockchain, which means that over time, as usage grows, we actually add more capacity to the network and resize it, add more shards, which really means that obviously there's like theoretical limit on networking, et cetera, and it is quadratic sharding at the end. So a lot of asterisks, but it is actually expands with demand. So it doesn't have this idea of slowing down or it doesn't have this idea that at some capacity now you're kind of either bidding or waiting for transactions to settle. And then the other side of it is proof of stakes in general are faster because you know who is the next validators are. And you don't actually need to wait for block propagation.
00:54:57.734 - 00:55:21.778, Speaker B: You can just send them directly. You can pipeline a lot of things, kind of align everything, such as that, every single thing happening as fast as possible. For example, we were just talking about the finality gadgets. The tendermint is finalizes every block, but that requires two rounds of communication. You can actually pipeline even that and have like two blocks in advance already produced when you're finalizing two blocks before.
00:55:21.864 - 00:55:26.760, Speaker C: Crazy Chinese people actually implemented this and then ran out of money, but their GitHub is still there.
00:55:28.410 - 00:55:30.200, Speaker B: So Alex implemented that.
00:55:32.170 - 00:56:16.550, Speaker C: And that's how Libra works. Also implemented pipeline consensus. I would say there's a couple of things in my mind that distinguish fast and slow. And I mostly think that once you are also I'll describe what sort of gets you into the category I call fast. And then I will argue that once you're in the fast category, being faster probably doesn't really matter that much at infinity. There are certain applications and certain use cases where it does, and there will definitely be specialization. There are going to be use cases where the insane throughput of something like Solana is appealing.
00:56:16.550 - 00:57:04.942, Speaker C: There are going to be applications where a slower tendermint style chain is appropriate. Okay, so one of the big things that differentiates slow and fast blockchains, there's like two characteristics in my mind. One is synchronously safe versus asynchronously safe consensus. So bitcoin is slow because of its consensus. Nakamoto consensus is only safe if you can assume that all of the parties that care about your blockchain will be able to receive a block within a certain amount of time. And that time bitcoin has parameterized as ten minutes. Ethereum has parameterized it as, I don't know, some number of seconds.
00:57:04.942 - 00:57:14.006, Speaker C: 12 seconds. Yeah. Ethereum's parameters are clearly far more aggressive and probably represent the upper limit of what you can do.
00:57:14.188 - 00:57:20.266, Speaker B: They're also using uncles as a way to kind of circumvent some of the game theory that comes in.
00:57:20.368 - 00:58:31.674, Speaker C: Yeah, but that doesn't get you around, like pure delay. Whereas a protocol like tendermint, the validator set, can finalize blocks as fast as they want, as fast as they can, and you are not going to end up on a fork of the network or like seeing inconsistent state, because you're receiving blocks slower than that. And at some point we'll have state sync enabled. Binance already did it, but under weaker security assumptions. And you won't even have to have the burden, if you're not a validator node, of seeing all the blocks, and you'll have basically the same security guarantees. So from that, the sort of optimal, given infinite time and infinite money, what tendermint would actually look like is if you were running a full node, you'd never, you wouldn't actually sync all of the blocks, you'd only sync state from blocks that you care about. You'd ignore the transaction data, and the only things that would ever see all of the block data are the validators.
00:58:31.674 - 00:59:38.098, Speaker C: And that can be very fast. And so that's fast and you might have caught on to a little bit in. My explanation is one of the consequences of that is state becomes a lot cheaper state for Ethereum, state for bitcoin is really expensive because that state has to be globally propagated to everyone who cares across a global network. And because state is expensive, things like lite clients for other chains, highly stateful applications like gaming, et cetera, become. Whereas there's a tenderament based chain loom that at least over the summer, has like a 200 gigabyte state and is mostly chugging along just fine. Hopefully we made some improvements to our Merkel trees that made those less I o intensive. But in general, you can have these very stateful, very large blockchains when you have asynchronous consensus, asynchronously safe consensus that you can't have in the slow Nakamoto regime.
00:59:38.098 - 00:59:56.342, Speaker C: So that's why I think the emergence of these fast blockchains fundamentally transform what the use cases are for blockchains, but is going to be at least ten years, if not longer, before we have confidence in these systems. As base layer money. Cool.
00:59:56.396 - 01:00:02.082, Speaker D: We have time for one last question from the audience. Were you guys raising your hands or just scratching?
01:00:02.226 - 01:00:03.162, Speaker C: No. Okay.
01:00:03.296 - 01:00:03.690, Speaker D: Anyone?
01:00:03.760 - 01:00:10.634, Speaker C: I think there was a question. No? Okay. What's your current working?
01:00:10.832 - 01:00:11.994, Speaker A: How are you going to build a.
01:00:12.032 - 01:00:32.814, Speaker B: Light client on solidity for near. So the idea right now. So we do have actually a light client. It's just not that light. That's the main issue. So we actually have state sync. It works like if you run a node right now, you will not need to validate every single block.
01:00:32.814 - 01:01:10.074, Speaker B: And in the sharded system in the first place, you cannot validate every single block. That's a kind of whole assumption. So we do have light client, we just validate headers. The way we elect and select validators is somewhat complicated because we're working around a lot of kind of proof of stake. Inherent problems that capital efficiency of proof of stake as price fluctuates is very unclear. So you actually need to adjust the price per validator seat. So like Ethereum has 32 ether, which is like an arbitrary number taken from, I'm assuming sky.
01:01:10.074 - 01:01:35.270, Speaker B: But I hope there's some math laptop. Yeah, I think it may be 42 minus ten. That's probably what happened. But we actually have adjustable kind of stake size that you need to be a validator. And that requires actually doing pretty much like a sort and shuffle. Right. And that is insolidity expensive because you actually need to transport that information.
01:01:35.420 - 01:01:40.280, Speaker C: Can't you just have the last validator set, sign the next validator set and do that?
01:01:43.230 - 01:02:04.814, Speaker B: You know how many times I have argued that this is the worst idea ever? Because if I'm a validator now and somebody kicked me out because I don't have the stake anymore, why in the hell I would sign it ever? Well, instead I should sign me myself. Right. And if you have a majority, but.
01:02:04.932 - 01:02:06.298, Speaker C: That'S just holding the chain.
01:02:06.394 - 01:02:20.946, Speaker B: It is holding. I mean, I agree that this is an option. If there is a better option, I would prefer using that. I think relying on this assumption that you have like two thirds carrying over from epoch to epoch. Because that's kind of what you're saying. If there's less than two thirds.
01:02:21.138 - 01:02:23.240, Speaker C: No, that's not what I'm saying.
01:02:24.970 - 01:02:34.618, Speaker B: If there's more than a half that got kicked out, that half should collude and sign themselves back into the next block and control the light.
01:02:34.704 - 01:02:36.810, Speaker C: But that only tricks light clients.
01:02:37.790 - 01:02:38.298, Speaker B: Yes.
01:02:38.384 - 01:02:41.690, Speaker C: And it's slashable on the main chain because they're still bonded.
01:02:42.430 - 01:02:48.350, Speaker B: Yes. If you're adding slashing conditions from other chains. That's true.
01:02:48.500 - 01:02:55.274, Speaker C: Yeah. No, it's not slashing conditions from other chains. This is really getting into the weed.
01:02:55.322 - 01:02:58.926, Speaker B: Yeah. Okay, but I got your point. Yeah. So there may be some way, we.
01:02:58.948 - 01:03:03.046, Speaker C: Have a great write up on all of this on our client.
01:03:03.098 - 01:03:30.838, Speaker B: But the one important thing that we want to add is such thing called skip block. And this is the idea that you're actually building a skip list of blocks. So you don't need to verify. So we're producing right now one block a second. And this is a lot of blocks. So you actually want to skip a bunch of blocks when you traversing a chain. So if you just produce a skip blocks within an epoch, that's fine because it's the same validator set and you kind of can just skip epochs.
01:03:31.014 - 01:03:32.410, Speaker C: Skipping validator.
01:03:34.030 - 01:03:53.014, Speaker B: Yeah. So I'm sure there's some more ideas how to get it to the state where it actually works. And the main problem again is the prices of ethereum gas on signature verification and things like that, and our desire to have more validators as network expands.
01:03:53.082 - 01:03:56.530, Speaker C: We've mostly given up on the idea of. That's why we have pegs.
01:03:56.870 - 01:04:02.420, Speaker B: Yes, that's why I was asking how are you going to do it for other chains because.
01:04:02.890 - 01:04:26.250, Speaker C: Well, I think for fast blockchains it should be fine. E 10, is this weird? It's not a fast blockchain, but has some interesting programmability properties. There don't seem to be options for doing low trust bridges, but it's tough. Look how complicated.
01:04:29.230 - 01:04:41.854, Speaker B: TBDCs. But stay tuned for a video we actually have with Matt Long and James about TBDC, I guess on our YouTube or on their YouTube.
01:04:41.982 - 01:05:07.962, Speaker D: So yeah, I want to wrap up on something that a lot of these conversations go super deep in the weeds. And so I want to pull back because these conversations happen in rooms, but they don't often happen on the stage, which is, and try to keep it super short because we're going to go over time by two minutes. So what is your 100 year vision? The Sci-Fi future where blockchain wins. You have to think about that at some time. Maybe when you're going to bed or in the shower or whatever.
01:05:08.016 - 01:05:09.446, Speaker B: Decentralized spaceship markets.
01:05:09.478 - 01:05:10.300, Speaker D: There you go.
01:05:13.070 - 01:05:16.910, Speaker C: Like global mass participation in political systems.
01:05:17.570 - 01:05:18.634, Speaker D: That's your end goal?
01:05:18.682 - 01:05:23.482, Speaker C: That's the end goal. I don't think you can have global money until you have global participation.
01:05:23.626 - 01:05:28.430, Speaker D: Cool. It's like one world order. Are you in the Illuminati?
01:05:28.770 - 01:05:29.566, Speaker C: Yes.
01:05:29.748 - 01:05:31.162, Speaker D: All right, you guys heard it here.
01:05:31.236 - 01:05:31.426, Speaker C: Cool.
01:05:31.448 - 01:05:34.242, Speaker D: Ellie, do you want to say anything to that or are you good?
01:05:34.376 - 01:05:45.170, Speaker B: I mean, I think what's really interesting is as we go, especially if we go, interplanetary governance, for sure, economics, how these things will actually be evolving.
01:05:45.330 - 01:05:47.720, Speaker C: You definitely need IBC if you go.
01:05:49.370 - 01:05:51.190, Speaker B: Because you're going to Cosmos.
01:05:52.590 - 01:05:59.174, Speaker C: Well, you just can't be synchronous between the earth shards and the Mars shards.
01:05:59.302 - 01:06:01.260, Speaker B: I mean, it's solely synchronous, man.
01:06:02.110 - 01:06:20.114, Speaker D: Cool. All right, thanks, everyone for coming. That's a wrap. I do want to make one quick announcement, which is that near stake wars is starting on Monday, so we're actually kicking it off. That's our incentivized testnet. Kind of like Cosmos game of mistakes, right? Yeah, game of stakes. So, yeah, we learned a lot from them.
01:06:20.114 - 01:06:36.222, Speaker D: And Takini is lucky, of course. So, yeah, if you guys want to participate, test out running a node. Even if you don't plan on being a validator, it's going to help us a great deal. And it's incentivized, which means at the end you can get tokens on main net. So check it out. It's nearprotectocol.com slash stakewars or near AI slash stakewars.
01:06:36.222 - 01:06:41.280, Speaker D: So thanks very much. You guys have been an awesome audience. You want to give them a round of applause? It's been awesome. Yeah.
