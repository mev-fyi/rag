00:00:00.410 - 00:00:30.882, Speaker A: Hey everyone, Dorian here. Well, I'm pretty sure if you're a developer within near ecosystem you've probably heard the term pagoda console. Developer console, developer Pagoda console. I'm pretty sure you're wondering what it is. What's this? I'm going to answer questions about the pagoda console in this video and give you a look and introduction into the platform. With that, let's get started. So what is the pagoda console? Well, it's an all in one tool that allows developers to interact with the contract's account methods with a rather convenient UI.
00:00:30.882 - 00:01:08.020, Speaker A: Get data analytics on deployed application with useful information such as user retention data. Also, the total number of transactions that are committed on a contract account, to name a few. You can also create alerts and triggers that react to on chain conditions and provide an alert in the form of webhooks or telegram messages and more. So in short, it's an all in one tool that allow developers to interact with and get analytical data on their smart contract account. So I think that's enough with the overview and summary. Let's jump right into the pagoda console. Okay everyone, to begin I want you guys to head on over to console pagoda co sign in, create your account and then you should be exposed to this page here.
00:01:08.020 - 00:01:52.190, Speaker A: Hit on the examples button and hit the nonfungible token example and click on deploy and explore contract that's going to create a developer account for you. A developer account is simply an account that gets automatically generated and automatically funded with 200 testnet tokens for you to freely manipulate and interact with. What's cool about these developer accounts again, is that because these are just testnet tokens, they don't pose any financial risk to you and you can freely delete them or do everyone with them without any risk to the actual developer itself, which is really cool. So this is what the developer account name actually looks like. Again, there's no difference between this account and like a normal testnet account. This is a whole different naming convention. In this contracts window in the pagoda console you can add as many different contracts as you want.
00:01:52.190 - 00:02:34.986, Speaker A: So when it says add contract, that simply means to add another account to this list. Every account on near is an empty smart contract. And then every time we deploy smart contract onto a near account, that just simply means we're populating empty smart contract with some sort of information with the WASM file. So we're going to just go ahead and click on the contract name. You can see this next window here describing the recent transactions, the balance and then the actual storage, the storage is the amount of state storage that's being taken up on this particular contract state. And this balance is just the amount of testnet tokens we have here right now. So then next thing I know, next thing we have to go to is contract Abi.
00:02:34.986 - 00:03:09.094, Speaker A: So contract AbI is really interesting. It just exposes the contract methods that are existing within this particular wasm file. You can see the method name which is like this one says NFT approve the parameter type or the parameter name which is token id and the parameter type which is of type string. So again, it's pretty useful. If you want to create your own API, simply go to near Abi this near Abi repo and install this into your application upon your deployment phase. And it should automatically generate this AbI for you as well. And you can get more information at this link.
00:03:09.094 - 00:03:44.642, Speaker A: I'll put this in the description for you guys below. Back to our pagoda console. I want you guys heading over to the interact button and then we're going to follow these on screen prompts here. So I'm gonna actually change this and resign back. Going to first thing I'm going to do is connect our near wallet to the poda console and make a function call access key for this particular contract account. So head over to my near wallet if you don't have it already, go to testnet mynearwallet.com. You can go slash create if you want, and you can just enter in your testnet account name and then just follow the on screen prompts to create your account.
00:03:44.642 - 00:04:31.780, Speaker A: It's pretty straightforward. So again, that's testnet my nearwall.com. To create your contract account or to create your account, I'm going to select Blockhead 29, Testnet, hit next, hit connect and then we should be good to go. So again, why is this interact page useful? If you're a developer, you have a few ways of testing out your contract methods outside of this, you can either create a demo front end with some buttons to make contract calls, or you can do what's more common and use the near CLI, which is perfectly useful. Perfectly fine. I do that all the time. But it can get rather annoying if you have to type in near call contract name method name within a stringified object reckoning to a CLI over and over again.
00:04:31.780 - 00:05:07.386, Speaker A: So this gives you a much more robust and convenient way of entering in and testing out your contract methods. So every contract on near has to be initialized. So this particular initialization function is called new default metadata. Initialization function is simply a function that can only be called once. Typically it's called upon deployment and it's typically used to set the metadata for the contract. In this particular case, the only thing you have to pass in is the owner id, which is of type string, which you can see right here. And you have these other cool parameters here called gas and deposit.
00:05:07.386 - 00:05:37.894, Speaker A: So gas is the amount of, I guess like near gas you want to attach to a particular call to prepay for the gas. So what is gas in general? Gas is the cost of computation for a particular transaction on near. So again, gas is the cost of computation for a particular transaction on near. And then next up is deposit. Deposit is the amount of near that we want to send directly to this contract account. So let's just say you're using an escrow account. You have an escrow application and you're processing the deal over a house.
00:05:37.894 - 00:06:01.966, Speaker A: You can send the say cost of the house to this escrow contract by attaching a deposit of near directly to the function call. Or if you want to buy an NFT, you can attach the amount that the NFT costs onto the function call through that deposit field. A deposit does not pay for gas. That's a question I get commonly asked. So they are two separate things. So I want to make sure that's clear. You can keep that zero for now.
00:06:01.966 - 00:06:23.314, Speaker A: You can also switch this between Yocto near or near Yocto near. It's like one times ten to the 24th worth of near. And then there's just near. So keep that zero. Keep this as ten. And just type in your account name that you signed in with. So I'm going to type in blockhead 29 testnet.
00:06:23.314 - 00:06:57.202, Speaker A: Right. I wrote that here a while ago. So I'm going to hit send transaction and then it'll give me a little notification on the bottom right hand corner that says transaction was sent successfully. And then here, if we were to wait for a little while, we can actually get the transaction details. But I want to move forward and I want to head over to the alerts page for a second. So alerts are probably one of my favorite things about the pagoda console. They're really cool because they're going to essentially give you information about changes to or changes or actions that have taken place on your contract account.
00:06:57.202 - 00:08:08.166, Speaker A: So let's hit new alert and look at what we have for options. Hit this empty field and just click on this contract account name or dev account name that automatically populates free so I don't have to retype the entire thing and could select the condition that I want. So what's cool about alerts again is that they will literally just alert you if something happens to your account. So let's just say we have a successful transaction as our condition, which is we're going to be using. For this example, someone makes a call to my smart contract and then it can notify me that someone made a successful call through in the form of a telegram message, a webhook which makes calls to a specific endpoint or an email, right? So we're going to be using email for this particular example. You can also, just, to give you another use case, just say you have a defi project and you have some account with some large sum of balance, like large sum near tokens and that balance had a sharp drop. You probably want to know if that balance dropped sharply, right? So you can set up so that this pagoda console will send you alert in the form of telegram message and let you know that hey, your account went down, you probably want to check it out.
00:08:08.166 - 00:08:58.886, Speaker A: Or if you were having an NFT marketplace, you want to sell an NFT, you want to probably see when someone hit that purchase button, right? So you can specify the function that's being called on a particular account as well. So let's just click successful action as our trigger and we're going to specify an email. So I'm going to use this temporary email that I created and hit copy here. If you go to like temp mail, you can use that if you want to or you can use your personal email. I'm going to hit create and it's going to send that email a verification link. So I'm just going to wait for a hot second and it says go to email verification. I'm just going to hit this link to confirm it.
00:08:58.886 - 00:09:17.486, Speaker A: And then it says now it's ready to receive alerts. So I can see destination is verified and ready to go. So I have my contract count name specified. I want to get alerts for the conditions specified and the email I want the alert to be sent to. So I'm just going to hit create alert. And there we go. Our alert is created, which is really cool.
00:09:17.486 - 00:10:08.080, Speaker A: Let's head back over to the contracts page and then just click on our contract name again, go back to interact and then hit let's just select new NFT mint, give it a token id of one. Set your receiver name as to whoever you want. Let's just keep it blockadoy, nine, testnet or whatever your account name is and then just keep this as an empty object for now this is normally where the metadata such as the media link token id or whatever metadata would go. But for this example it's going to keep that metadata empty. And for NFT mint we actually have to attach one near token to pay for storage of this new NFT because storage on, because the contract account will have to pay for its own storage. It's used on its own state. So typically that particular method is set up so that the user who wants to mint to an NFT has to pay for the storage on behalf of the account.
00:10:08.080 - 00:10:40.830, Speaker A: So it's typically very small cost but it's still a cost. So I'm going to attach one near to that and I'm just going to send that transaction and because I attach a near it's actually going to redirect me back to the near wallet to prove sending this near token. Because this particular method, this particular contract account only has a function call access to my account which is restricted access to my account. And the wallet itself has a full access to it. So it needs that full access key to sign off on sending near. Okay awesome. So I just sent off that transaction.
00:10:40.830 - 00:11:09.700, Speaker A: It's kind of like loading here but we're going to check our email. So let's go back to here, go back from this page, go back to the list. Just going to wait for a minute. And if this transaction was successful I should get an email here. So awesome. Okay so again I can say successful transaction for this contract account name which is what this whole thing is for. If I were to click on it you can get a link to the Explorer for more details about it.
00:11:09.700 - 00:11:31.430, Speaker A: And yeah it's pretty handy. So you can see yeah, succeeded. It's really cool. And then the token metadata actually here. So token id, one receiver id blockade testnet, then the empty metadata. So it's really cool. So now one more feature I want to show you is this analytics feature.
00:11:31.430 - 00:12:02.642, Speaker A: So let's go over ahead and switch this over to Mainnet and we're going to actually look at a real mainnet account. And the account I want to look at is called. So I hit this plus account or add contract button. The account I look at is v two ref finance. Near ref finance is one of our major d five projects on the near ecosystem. It's really cool to check it out. So I'm going to hit add and then you can see contract added refinance here, see how many new tokens they have and what's the storage of that particular contract account.
00:12:02.642 - 00:12:27.706, Speaker A: This is just one of their many sub accounts. You can actually look up ref finance accounts, contracts to see what other contracts they have. This is just one of them. Head on over to this analytics page and you can see a whole bunch of cool useful information about this. You can see total number of transactions. You can see the total number of transacted value, total number of users for this particular sub account. You can see what I think is really cool.
00:12:27.706 - 00:13:05.942, Speaker A: These are retention rates, so like how it drops off over time. This is particularly common curve for most applications. I think you can even see the monthly active users as well, which is really useful. So this provides a really cool and convenient way to get information about your project and your application. Yeah, finally what I want to show you again is just like just some additional resources so you can use this to get redirected to near lake for indexing purposes. We have an upcoming API as well you can take a look at right now. This is in the works still, but you can come here and test it out if you want to.
00:13:05.942 - 00:13:33.066, Speaker A: And yeah, this is mostly like what you can do with the pagoda console. I'm going to have another video shortly so keep an eye out for this really cool thing you can do with alerts. This is again my favorite feature and we're have a lot of fun with it later on. Cool. So that's all I have for you guys today on this fairly short introduction into the pagoda console. Thank you guys so much for watching. Be sure to like subscribe and leave a comment below if you want to see more of stay tuned for some more videos about the pagoda console.
00:13:33.066 - 00:13:40.060, Speaker A: Have some really cool activities we can do later on, so keep an eye out for that with that. Thank you guys for watching and have a wonderful day.
