00:00:00.250 - 00:00:00.800, Speaker A: You.
00:00:03.170 - 00:00:12.640, Speaker B: Hi, everybody. This is Ilyan, Alex from near, and we are here with James from Sumo. He'll tell us about his project. Do you want to start with a little bit about yourself?
00:00:13.330 - 00:00:38.440, Speaker A: Sure. My name is James Prestwich. I've been working full time on blockchain stuff for the last five years. I co founded a company called Storage back in 2014, which is still going things for a year and a bit now. I've been working on Suma. We're a design and implementation firm for cross chain interoperability. We work on markets that link bitcoin and ethereum and other.
00:00:40.810 - 00:00:44.938, Speaker B: I mean, super interesting to learn how this actually works. So let's dive in.
00:00:45.104 - 00:01:16.740, Speaker A: All right, well, high level, where do we want to start? There's a whole history of interoperability solutions here. There's so many different approaches and nobody has written it down and nobody seems to know what the different approaches are. And so we actually work on five different broad tech categories for interoperability, but explaining them is a little difficult sometimes you need a lot of background information.
00:01:18.570 - 00:01:24.790, Speaker B: Let's just build it up from start, right? Let's say, yeah, you have two chains. Like what is their properties?
00:01:25.210 - 00:01:43.854, Speaker A: So we have these things called blockchains. They seem to work fairly well so far, but jury is kind of still out. They're only ten years old. I'm older than that. So we have these things called blockchains, and they. Let's actually get the arrows going a better direction here.
00:01:44.052 - 00:01:45.130, Speaker B: The right direction?
00:01:45.210 - 00:02:10.758, Speaker A: Yes, the right direction. And it's a set of transactions in a block, and they build up over time. And we get this nice state out of them. In bitcoin and other Utxo chains, that state is the Utxo set, which is the unspent transaction outputs. In Ethereum, we have this nice state tree. That's everything. That is the state.
00:02:10.758 - 00:02:12.566, Speaker A: I don't know how to say it better than that.
00:02:12.668 - 00:02:16.166, Speaker B: It's a key value store. Right. And then you have hash of.
00:02:16.348 - 00:02:44.914, Speaker A: It's a key value store encoded in a Merkel tree. Yeah. That they call a pitchfricia tree because it's some special expanded Merkel tree. So one of the key differences between bitcoin and Ethereum is that in bitcoin, the Utxo set is implicit. It's something that you build up by traversing the history and you don't commit to anywhere. Whereas in ethereum, each block commits to the current state route. And in bitcoin you're building the Utxo set.
00:02:44.914 - 00:03:28.222, Speaker A: In Ethereum, you're building the state tree. But one of the super important things here is that bitcoin's Utxos progress from don't exist to exist to spend, so unspent spend. Right? Whereas Ethereum state can just be anything, anytime, whatever it feels like. And so bitcoin has a much more constrained, but also a much more predictable system. Bitcoin utxos have what we call script pub keys. A script pub key is basically a program that describes who owns it and when they're allowed to spend it. Whereas Ethereum, your account either has a pub key or a smart contract code, or maybe both.
00:03:28.222 - 00:04:05.018, Speaker A: In really weird edge cases, the only way to get both is like two to the 80 operations. So it's really expensive. Okay, so what we're trying to do is take these completely disparate state models on different chains that have completely different data formats and layouts. Really about the only thing they share is this blockchain structure and a signature scheme. And we want to make those talk to each other in meaningful ways. And we have a bunch of different tools for doing that that all have pros and cons. Any questions so far?
00:04:05.104 - 00:04:08.054, Speaker B: No. I mean, let's get into the tools.
00:04:08.102 - 00:04:43.990, Speaker A: All right, so there goes my marker cap. I'm not going to worry about that. Crosschain communication. We want to know something about bitcoin from Ethereum, for example. A lot of these can be generalized to any pair of chains. Sometimes there's really specific technical considerations here, but generally we just want to know something about bitcoin from Ethereum. We want this Ethereum block to reference this bitcoin block or some past bitcoin block.
00:04:43.990 - 00:05:38.742, Speaker A: Okay. There's actually four different broad models of cross chain communication that we've identified so far, and we work on all of them as much as we can. I'm going to come over to your side of the board. We have atomic SPV relay and merged, so each of these has a very different mechanism. You can actually mix and match these, so you can combine atomic with spv or relay. Each of these has very different chain considerations. So you can't use spv with proof of stake chains at all.
00:05:38.742 - 00:06:27.400, Speaker A: You can only use it with proof of work chains. We can get into that a little later. If you want merged consensus, you have to design the chain from the ground up with that in mind. So these are things like Ethereum's e two sharding, maybe near sharding polka dot cosmos and other kind of chain of chain ecosystems. So relay is when we follow one chain's consensus from within another chain. So it's a one way communication mechanism where we follow every bitcoin block from Ethereum or every Tezos block from Nier or something like that.
00:06:28.090 - 00:06:33.354, Speaker B: This is where there's an oracle reading bitcoin blocks and posting them on.
00:06:33.472 - 00:07:10.578, Speaker A: Right, right. And because bitcoin uses proof of work, and proof of work is objective, that oracle could be anyone. If we're tracking a proof of stake chain using relay, we have to follow, like the validator set changes over time, which is doable. It just can get a little weird and fuzzy sometimes, and it depends on which consensus system we're trying to track. Okay, so relays and merged consensus have been deployed. In the wild. BTC relay is a relay.
00:07:10.578 - 00:07:36.190, Speaker A: There have been designs for Peace Relay, which is an ETH to ETH, classic relay. Someone has talked about doing an EOS to ETH relay, but BTC relay is the only one that's been deployed. It turned out to be horrendously expensive and nobody used it, and it's been dead since late 2017. Basically, like Ether's picture of bitcoin in BTC relay has just stopped. Updating.
00:07:38.370 - 00:07:42.186, Speaker B: UTC to ath relay costs 40% of the block.
00:07:42.298 - 00:08:30.810, Speaker A: Well, the BTC, yeah, it's really expensive. And when we said relay is one way communication like ETH can track bitcoin, but there's no way to make bitcoin track ETH anyways. So we developed, this is our contribution is SPV. This is something that we invented back at ETH Berlin that I don't think anyone else has ever worked on. So instead of relaying every block, we relay just the latest few blocks to prove something specific. So in this case, we want Ethereum to inspect some specific event in bitcoin's history. And we have the Ethereum contract check the latest few blocks and that bitcoin transaction.
00:08:30.810 - 00:09:11.980, Speaker A: So you take the transaction, you put a merkel proof of inclusion in the bitcoin header, and then you put a bunch of headers on top of that to show that there's real work on top of it. SPV is way cheaper than relay for any individual transaction, for any individual user, until you hit like several thousand regular users. So with SPV, though, you don't get certainty, you get an economic security parameter, whereas with the relay, you're tracking the whole consensus indefinitely. With SPV, you're only looking at a tiny slice of it and you only get that much security.
00:09:14.510 - 00:09:21.646, Speaker B: Just as an example, right? Pretty much just as example, right? You have like three blocks and you're checking them in so let's say we.
00:09:21.668 - 00:10:09.200, Speaker A: Have this nice little TX out here, right? We have this TX and three blocks after it. And after it. Yeah. And so our Ethereum chain is not sure where the bitcoin main chain is or what else is going on, but it does know about this TX and these three blocks, and it can determine how hard those blocks were to make, how expensive they were, by checking bitcoin's proof of work. And this is why SPV only works with proof of work chains, is because we're actually looking at these blocks, we're parsing the headers, we're examining the difficulty, and we're totaling that across all the blocks. And that gives us a pretty good economic idea of how expensive that proof was to make.
00:10:09.730 - 00:10:12.802, Speaker B: How do you convert difficulty to actual.
00:10:12.856 - 00:10:16.398, Speaker A: Money, roughly and probabilistically?
00:10:16.494 - 00:10:20.526, Speaker B: Okay, you're not using some bitcoin gas station.
00:10:20.638 - 00:10:47.402, Speaker A: No, there's not like a real money oracle involved here. We're just saying I'll believe in anything that has at least this much work put into it. So you get economic security out of that and you can adjust it. If you want more security, you ask for more work. If you want less security, which I'm not sure why you would want less security, you can ask for less work.
00:10:47.456 - 00:10:54.160, Speaker B: But I mean, there is some amount of money attached to this. Right, right. It would be nice to have those.
00:10:54.930 - 00:11:41.466, Speaker A: The rule of thumb right now is that six bitcoin headers at the current difficulty is in the neighborhood of $250,000. And so as long as this transaction is not half a million dollars, six headers is going to be more than enough. And it's important to know that in SPV we're not doing a relay, we're not tracking the whole state of the chain over time. We're just getting tiny little insights into the chain. While you can fake proofs, it's very expensive to do so. And if you want to fake a proof, you're going to spend a quarter million dollars faking it. But if I'm an honest user, the main chain is going to make it for me for free.
00:11:41.466 - 00:12:05.278, Speaker A: I'll pay nothing for it. And if you have 10% of the hash rate, it's going to take you 10 hours to make six block headers. But the main chain is going to make them for me, the honest user, for free, in 1 hour. So we have this nice economic and time based security to SPV. So this is a lot of what we've been working on lately, is implementing that and trying to tell people about so.
00:12:05.384 - 00:12:07.046, Speaker B: But this is Utxo, right?
00:12:07.148 - 00:12:09.030, Speaker A: Yeah, this is Utxo.
00:12:09.690 - 00:12:16.390, Speaker B: Let's work through a use case, probably. What am I trying to do with this transaction?
00:12:17.790 - 00:12:42.702, Speaker A: The first thing that we're building is fast cross chain transactions. So maybe I will sell ether and you will buy it with BTC, and we can do that twice as fast as any other construction on chain. So the way it works is you would commit to selling ether, right?
00:12:42.836 - 00:12:46.260, Speaker B: Yeah. So you lock it in a contract, right?
00:12:46.790 - 00:13:36.370, Speaker A: You would lock it in a contract and specify your bitcoin payment info and how much you want to be paid. So you would commit to a transaction, a partial bitcoin transaction that pays you money to an address you control, and anybody can come over here on bitcoin and try to make this transaction and pay you that money. So if you're selling one etH, maybe you're asking for zero, two bitcoin. I'm not actually sure what ether is worth today. It seems to change a lot. So you've committed to selling your ether. Anybody can come in and pay you money on bitcoin, and whoever does that can build this nice proof here and submit it to the contract to get your ether.
00:13:36.370 - 00:14:07.322, Speaker A: And so all told, this takes about an hour for each participant because you have to wait for some blocks to confirm. Can be actually shorter than that. And one of the super cool things is that anybody can try to buy your ether. It doesn't have to be me. Like with an atomic swap, anybody can come in, look at your sell order and try to fill it. So we get a nice cross chain market here. All right.
00:14:07.376 - 00:14:18.080, Speaker B: Interesting. Yeah. Even if you span this utxo somewhere here, it doesn't matter because you actually kind of got it.
00:14:20.130 - 00:14:30.962, Speaker A: The really cool thing is that what you care about as the seller is that somebody paid you money at some point, you don't care whether that money is still there because it was paid to you and you got it.
00:14:31.016 - 00:14:35.586, Speaker B: Yeah. So what are the rules on canceling this order?
00:14:35.768 - 00:14:44.294, Speaker A: So that's a really fun question, because you, as the seller, cancel the order the same way anyone fills it.
00:14:44.412 - 00:14:45.590, Speaker B: Oh, you just buy it out.
00:14:45.660 - 00:15:34.966, Speaker A: You just buy it yourself. But you're the seller, so you can buy it for nothing. But the really important thing here is that if you could cancel this order, the sell order on ethereum, without touching this, it breaks the security assumptions. Exactly. You could steal people's bitcoin. So you, the seller, you've locked up this ETH, and you've made it so that the ETH is completely dependent on some transaction on some other chain, and we can use that to read any bitcoin state that we want, as long as it's a historical state and we don't care what happens after that .1 of the really fun tricks that we use in production, this has been main net for four or five months now.
00:15:34.966 - 00:16:12.610, Speaker A: One of the really neat tricks that we use is this bitcoin transaction commits to an ETH address where the contract should deliver the ether. So the contract, when it sees this transaction, can grab the ETH address out of it and deliver the ether there. And that ETH address can't be changed because this transaction is signed by the buyer. So we get this really neat, we're using bitcoin state from Ethereum and we're writing Ethereum addresses and maybe eventually smart contract call info into bitcoin.
00:16:14.890 - 00:16:22.466, Speaker B: So what if somebody, by mistake, so somebody already executed this transaction it did not include here. So this is not sold.
00:16:22.498 - 00:16:22.694, Speaker A: Right.
00:16:22.732 - 00:16:26.114, Speaker B: Somebody made another buy transaction.
00:16:26.242 - 00:17:12.082, Speaker A: So what if there are two people trying to buy at the same time? Basically. So normally this would be a race condition, but we have tools in bitcoin to make transactions mutually exclusive. And so we can use a bitcoin protocol feature that as far as I know, nobody else has ever used called sig hash single. Anyone can pay. And in a nutshell, what this does is it lets you, the seller, create a one time payment invoice where anybody can pay you those bitcoin, but only one person can do so. As soon as one person has paid you, everybody else's transactions trying to pay you will fail. They'll become invalid.
00:17:12.146 - 00:17:16.230, Speaker B: So this is like you create a new, like a special address.
00:17:16.380 - 00:18:19.334, Speaker A: We're creating a Utxo that you, the seller, own. Basically what it looks like is bitcoin transactions are a list of inputs and a list of outputs, and they have to sum up to the same amount. And so you as the seller, are creating this transaction that has like 550 satoshi, tiny, tiny little amounts of money, less than a penny in, and it's going to send you zero, two out, right? So this is a validly formatted transaction, but it can't go on chain because it doesn't balance. I see. And so anyone can come in and make it balance and submit it to the chain, and making it balance pays you this money. Interesting. And so because we're including this tiny little dust input, everyone who tries to make that TX balance and tries to submit it to the chain, they are all mutually exclusive.
00:18:19.462 - 00:18:20.954, Speaker B: Yeah, like as soon as one gets.
00:18:20.992 - 00:18:22.554, Speaker A: Included, everything else everything else.
00:18:22.592 - 00:18:24.350, Speaker B: Can that TTX already?
00:18:24.420 - 00:18:26.202, Speaker A: Yeah, because it's already been spent.
00:18:26.266 - 00:18:29.054, Speaker B: So is this transaction pretty much like part of the.
00:18:29.172 - 00:18:31.630, Speaker A: Yes, it's part of the initial listing.
00:18:32.390 - 00:18:35.586, Speaker B: So the price is not like market, right? You pretty much define the price?
00:18:35.688 - 00:18:46.098, Speaker A: Yeah, we think that we can make it market price eventually, but it's actually really complex.
00:18:46.194 - 00:18:52.230, Speaker B: Yeah, I mean, if you're using this right, you kind of need to specify end goal.
00:18:54.010 - 00:19:37.286, Speaker A: So if we're using this, we need to specify the end goal if we want to make it market based. The alternative is that you don't specify what you're going to be paid, but the smart contract refuses to dispense your ether to anyone who pays the wrong amount. And in that case the buyer has some risk because they don't know whether they're paying the right amount. And there's a whole bunch of other problems to solve there. But we think it's doable. It might need one of the planned bitcoin protocol upgrades, which is something I'm not willing to wait for. I'm not going to pin my hopes on bitcoin upgrading things anytime soon.
00:19:37.388 - 00:19:39.046, Speaker B: What about Ethereum upgrading things?
00:19:39.148 - 00:20:23.410, Speaker A: Well, Ethereum is going to upgrade things too much hard fork every six months is quite a lot to keep up with. Okay, so this is a lot of what we're working on recently. This is what's new that we've come up with. These things have been kind of known for a while and the last thing we haven't covered is the atomic swap, which is the most well known of these and was invented in 2014 by a bitcoin talk user that goes by Tier nolan. So we call it the tier Nolan swap. A lot in the tier Nolan swap. We're actually not communicating between the chains directly.
00:20:23.410 - 00:21:12.750, Speaker A: Bitcoin isn't going to read Ethereum state and Ethereum is not going to read bitcoin state. But what we are going to do is we're going to arrange so that both chains state is dependent on something else outside. So in this case it's going to be a secret that we call k an awful lot for some reason. So we're going to start off this swap protocol and it's only useful for exchanging value. It can't actually exchange data at all. We're going to start this off where I know a secret. It doesn't matter what it is as long as I know it and you don't.
00:21:12.750 - 00:21:53.900, Speaker A: It's going to be some long like 32 byte random hex string and nobody cares. Right? So I'm going to commit over here on bitcoin. I'm going to commit to this. I'm going to make a transaction on chain and I'm going to pay in, let's say, zero, two BTC. And this is going to be payable to Ilya if Ilya knows the secret. And James after time. There we go.
00:21:53.900 - 00:22:44.538, Speaker A: That's probably completely illegible, but here we are. Right, so I'm going to do this. You're going to see me do it and check my work and wait for it to confirm so it doesn't roll back. And then once you're happy, we're going to go down here and you're going to make the same commitment with your ether, except instead, you're going to do it in reverse. You're going to pay James if K Ilya after time. So each of these is kind of this nice symmetric contract, right? This one pays you if you know the secret, and this one pays me if I reveal the secret. So once both of these are set up, we're in this nice atomic contract.
00:22:44.538 - 00:23:24.566, Speaker A: We call it atomic because either both things will happen, we'll exchange or nothing will happen. We'll get our funds back after the expiry. Right, so this has two end states once we've both escrowed. One is that I reveal the secret and I take your ether, and then you use the secret, which is public on Ethereum, to get my bitcoin. Right. The other is that I don't reveal the secret and I just wait to get my bitcoin back. And you wait to get your ether back once we've both escrowed.
00:23:24.566 - 00:23:26.134, Speaker A: There's no other outcome?
00:23:26.262 - 00:23:31.238, Speaker B: Well, there's outcome where you reveal the secret and the time expires faster.
00:23:31.334 - 00:24:03.670, Speaker A: Right. So this is a super important thing. I was going to say it. There's no other outcome, apparently. However, on a blockchain, time is all sorts of wibbly wobbly. Time is actually set by miners, and miners can influence how it progresses. And so we have to set these timeouts very carefully so that your timeout always happens before mine.
00:24:03.670 - 00:24:41.666, Speaker A: So mine has to go this long and yours has to be this long. Right. So that ensures that I can't both get my refund and get your money. However, the lower the hash rate of the chain, the more able I am to influence time by using nice hash or something, some hash rental service. And if I can speed up time on this chain enough, then the security assumption is broken. And while it's unlikely time is probabilistic, even in the best case. So it might be you just get really unlucky that day.
00:24:41.666 - 00:25:07.898, Speaker A: And I get to scam you. The other thing to know is we're both escrowed in here. And so for this whole duration. We can't use our money for anything. Right? And I can decide because I know Kay and you don't. I can decide when in this period I want to make the trade. And so that leads to what we call the free option problem.
00:25:07.898 - 00:25:32.254, Speaker A: The trade happens at my choice. So I'll just delay and see how the exchange rate goes. Yeah. So a lot of thought gets put into fixing the free option problem. In atomic constructions. And I don't think anyone's come up with a great solution yet. We've designed a few constructions.
00:25:32.254 - 00:26:05.386, Speaker A: Where you can put in like, a premium payment for that option. And you can intend for it to be an option. Then it's no longer free. Some other people have put in multi phase htlcs. Where if I don't take it, I will be penalized. But that's not even the only problem with this basic atomic construction. What if you just never escrow? What if this just never happens down here? Now I've escrowed my funds.
00:26:05.386 - 00:26:33.254, Speaker A: And you just walk away and I'm just locked up and I get nothing. And so you can liquidity dos me. You can just troll me and convince me to lock up money for no reason. And so the other thing is that we have to agree on all the terms in advance. I can just never do this. And then you'll never do anything. And then we've just agreed on terms.
00:26:33.254 - 00:26:59.726, Speaker A: But we don't actually. Yeah, there's no requirement after we've agreed on terms to go through with this. And so the standard atomic swap that everybody knows is actually kind of a pretty bad trade. You get to troll me, I get to take a free option from you. And the whole thing takes like two to three confirmation cycles. In the best case, it's like two or 3 hours. Yeah.
00:26:59.726 - 00:27:11.774, Speaker A: And if we're not on bitcoin and ethereum, it's not two or 3 hours. It's like two or three weeks. If you think about other proof of work chains. Most of them have very low hash rates.
00:27:11.822 - 00:27:18.020, Speaker B: Yeah, I mean, EDC is what, $4,000 per hour price?
00:27:18.650 - 00:27:50.400, Speaker A: So $4,000 per hour. That means I can pay, what, $100,000 and reorgan entire day. So if this is a big swap, I might just do that for fun. And think about the tiny coins. Like Verge. Verge has like a few thousand dollars per day and was successfully 51% attacked recently. So you almost can't do atomic constructions on Verge at all.
00:27:50.400 - 00:27:56.650, Speaker A: But we could do SPV, but it would also require a lot of headers.
00:27:56.730 - 00:28:05.406, Speaker B: So actually the question I didn't ask was how much actually does it cost to verify? Like, let's say it's a bitcoin ethereum, how much was like six blocks of bitcoin?
00:28:05.518 - 00:29:01.160, Speaker A: Okay, so for atomic stuff it's like super cheap to verify a few hundred gas. It's easy for SPV. Our current implementation does the verification in less than 700,000 gas. And so what this is doing is loading in a bitcoin transaction a Merkel proof, which is going to be twelve or 13 hashes. So somewhere in the neighborhood of like 400 bytes, and then loads in usually five or six bitcoin headers, which is 400 or 480 bytes, give or take. It does 30, 40 shawtoos on all of that. Most of the expense right now is loading in the data and manipulating bytes, getting the right byte strings together.
00:29:01.160 - 00:29:07.074, Speaker A: Solidity does not give you very good tools for slicing and concatenating bytes.
00:29:07.202 - 00:29:17.306, Speaker B: Yeah, but then if you want to do, let's say, ethereum on etc, this way it will cost you.
00:29:17.408 - 00:29:48.522, Speaker A: It'll cost you an awful lot. Last item, pretty much it won't. This is something that bitcoin actually does very well, is because the block time is long, we need many fewer headers. If we want the same amount of security on ethereum, we need something like 200 headers. And then we have to do eth hash on each of those to check the work. And ethash in EVM costs about 2.5 million gas.
00:29:48.522 - 00:29:58.390, Speaker A: And so if you want to spend 500 million gas, that's how many blocks. Again, each block is 8 million.
00:29:58.460 - 00:29:59.174, Speaker B: Yeah.
00:29:59.372 - 00:30:22.938, Speaker A: So if you want to take like 65 blocks, processing one proof, that's fine. Go ahead and do that. It doesn't seem very practical. So remember I said earlier, there's a bunch of weird technical considerations. This is one of them is actually, it's going to be cheaper to do this for bitcoin than for basically any other chain because the blocks are slow.
00:30:23.034 - 00:30:27.358, Speaker B: Yeah. So pretty much if you want to do eth to etc, you go through bitcoin.
00:30:27.534 - 00:30:57.642, Speaker A: Yeah, you can totally do that. If you want to go from ETH to EOS, this chain can be anything with SPV. This chain has to be proof of work. And actually bitcoin is the only chain we know of that we can do it with because of the long block time. And another super important thing. Bitcoin uses Shaw 256 as its proof of work, and every other chain has Shaw. Yeah.
00:30:57.642 - 00:31:24.580, Speaker A: And so litecoin uses scrypt and zcash uses equi hash 209, and grin uses kuka root and tutin something. And beam uses equi hash 150 something. And decred uses Blake. And we've got all of these proof of work functions and solidity. Can't actually check any of those. It can only check Shaw two.
00:31:25.830 - 00:31:28.770, Speaker B: But if you're doing Ethereum to EOS.
00:31:29.270 - 00:31:58.880, Speaker A: Then EOS can check eth hash. But it's expensive, and so it would almost be better to have Eos, or it would almost certainly be better to have eos checking bitcoin and ethereum. Checking bitcoin. Yeah. Unfortunately, there's some limitations in what you can do, because you have to encode data into bitcoin somehow, which means you have to have inbound communication to bitcoin. But we think we have some solutions to that. It's still a little.
00:31:58.880 - 00:32:28.194, Speaker A: We haven't written it up or formalized it yet, so I don't want to talk about it too much. All of this is ongoing research. Everyone in ETH two is thinking about how to merge consensus. We've had multiple relay designs that have failed to take off. SPV is brand new. We came up with it six months ago. And atomic constructions, I guess, are the oldest.
00:32:28.194 - 00:32:45.966, Speaker A: They've been around for five years, but nobody's actually deployed a really good system using them. So all of this is ongoing research. We have no idea where it all ends up or what the most efficient way to do anything is. And we keep discovering new things all the time.
00:32:46.068 - 00:33:03.860, Speaker B: Do you think there's some merged one that is like, let's say it is two different networks, not like sub shards. Is there something that can be done on consensus layer, like if one network is ready to change?
00:33:04.630 - 00:33:27.210, Speaker A: So I think you could probably patch that in after the fact if you're willing to. Hard fork or maybe even soft fork one network. Mark Friedenbach wrote a really interesting paper about how you can soft fork anything into bitcoin. Literally anything. You could change the proof of work. You could change the state model. You could just do anything as a soft fork.
00:33:27.210 - 00:34:13.994, Speaker A: But nobody has really talked about patching this into chains that exist very much, and it seems to us that nobody has expressed a desire to do that yet. A lot of chains are really tribal in their community, and if you talk about merging Ethereum consensus with tezos consensus, people get really squirrely about it. For us, we like anything that promotes cross chain interoperability. But we have to deal with a lot of partisans and a lot of maximalists, and sometimes it's a little difficult and it actually does, I think, have a chilling effect on what research gets done.
00:34:14.192 - 00:34:27.898, Speaker B: Yeah, I mean, a lot of, as you mentioned, like polka dot Cosmos, sharding and hubs of chains. Right. They all kind of work within their own environment.
00:34:27.994 - 00:34:33.614, Speaker A: Right. They require you to follow their, follow their beacon chain. Pretty much, yes.
00:34:33.652 - 00:34:42.740, Speaker B: I mean, you can think of like, it's something that's slower at block producing and defines validators across the board.
00:34:43.190 - 00:34:58.760, Speaker A: So in east two, this is the beacon chain, which selects all the committees for each shard in cosmos. This is the main atom tendermint consensus that coordinates the IBC with.
00:35:00.730 - 00:35:13.770, Speaker B: Mean. That's an interesting question of like, let's say you do have a merged consensus. Right. Is there actually like, at which point you have the secure cross chain communication?
00:35:14.670 - 00:35:58.474, Speaker A: It's really interesting because everybody is going about this in different ways so far. Cosmos is all building around IBC and making it easy to spin up a new zone. Polka dot has their parachains. ETH two is eventually going to have these beacon to shard cross links, but we're still years away from that. Everybody's taking different approaches. Nobody knows what the right model for cross shard or cross chain communication in their ecosystem is. What we like to focus on is when you don't have control over the system, when you're working with deployed things that aren't going to change, like bitcoin and to a lesser extent, ethereum, is not going to change.
00:35:58.474 - 00:36:35.590, Speaker A: How can we get some of those benefits? And we're also spinning up research about how to improve communication in merged systems. How can we go eth two cross chain faster than four consensus cycles? Which sounds pretty. Four consensus cycles is like 25 minutes or so in east two, supposedly, which sounds pretty good for cross shard. For cross shard round trip.
00:36:38.170 - 00:36:58.174, Speaker B: We are maybe on the other side, but we believe that cross shard communication will be all of the communication, pretty much because the more applications want to talk to each other and controlling where applications live would be detrimental to the system because everybody will want to live on one shard if that happens.
00:36:58.292 - 00:37:08.274, Speaker A: Yeah. You also can get some really weird incentive problems when that happens. If maker is all on one, everybody.
00:37:08.312 - 00:37:09.282, Speaker B: Will want to live there.
00:37:09.336 - 00:37:16.978, Speaker A: Yeah. And also ether and dye on other shards are worth less because they can't interact with the maker system.
00:37:17.064 - 00:37:22.758, Speaker B: Yeah. And it costs you to send it there in the first place. And it takes time and time costs money.
00:37:22.844 - 00:38:17.030, Speaker A: And if I have a CDP and I need ether to recolateralize, I can use ether on my shard, but I can't use ether on any other Shard. And that means that ether on my shard is worth more to me at that moment. So there's all kinds of these weird incentive things, and we have to assume that cross shard communication is going to be extremely important for system composability and for users. And so we're starting a lot more research into that, and we think we have some good models to do it with economic security much faster. But again, this is something that I got to write down and talk to protocol designers about. And designing for east two is kind of a losing game right now anyway because it doesn't exist and we don't know what it'll look like when it does exist. We have a specification that changes regularly.
00:38:17.610 - 00:38:26.678, Speaker C: But do you think for crosshard communication, going through the beacon chain helps a lot, as opposed to just sending directly the message between two shards?
00:38:26.854 - 00:38:34.778, Speaker A: So I think it makes it a lot simpler to reason about. But I don't know that it makes it faster or more efficient.
00:38:34.874 - 00:38:36.442, Speaker C: But does it make it more secure?
00:38:36.586 - 00:38:38.270, Speaker A: Does it make it more secure?
00:38:39.090 - 00:38:41.914, Speaker C: Say beacon chain has ultimate security, never forks.
00:38:42.042 - 00:39:11.786, Speaker A: Right. Then hypothetically, what you're looking for is Shard B, to be certain of some past state on Shard A or some past event on Shard A. Right. We care about alternately state or state transitions. If the beacon chain attests to that shard a state, then we can be sure it's not going to fork and we can treat it on Shard B as completely secure. Right.
00:39:11.888 - 00:39:18.646, Speaker C: But the beacon chain, it couldn't be that the beacon chain was able to verify all the state transitions.
00:39:18.678 - 00:39:30.830, Speaker A: Right? Right. So what we know from Shard B is that the beacon chain validators have attested that the Shard A validators have attested that this happened.
00:39:30.980 - 00:39:34.094, Speaker C: So instead, Shard a validators could have directly tested to.
00:39:34.212 - 00:40:14.010, Speaker A: Right. So this is something that we've been toying with as an idea. Eth two casper consensus is going to have validator committee look ahead. So they're going to be known ahead of time. Yes, you're going to be known ahead of time for a period of time. And you can tell who's responsible for proposing the shard a block at height N. And you could accept any block signed by that proposer that claims to be at that height with economic security, because either that's an honest block that was included in shard A, but not attested to by the beacon chain yet, or that proposer will be slashed.
00:40:14.010 - 00:40:30.178, Speaker A: So I think there's all sorts of really interesting things we can do here with Shard A. Proposers directly attesting to shard a state or history on Shard B. And we've started to toy with this design space, but we don't know a lot about eth two yet.
00:40:30.264 - 00:40:55.130, Speaker B: Yeah, this will be a shill of what we're doing, but what we're doing is we have a BFT consensus on shards, which means that if you do have two search plus one signatures on the shard, then, yeah, it's either a final block or somebody actually attacks this shard and has more than one third in the shard, then you can directly route it to another shard.
00:40:55.630 - 00:41:01.690, Speaker A: And so then the question is, how does shard B track the canonical validator set for shard A?
00:41:01.760 - 00:41:08.274, Speaker B: And that's where the beacon chain comes in. That actually lets us, everybody know who is the validators in all the shards.
00:41:08.342 - 00:41:43.100, Speaker A: Yeah, okay, that makes perfect sense. We're talking about like hacking this into eth two after the fact. Which again, ties back to my earlier point. What we care about is adding interoperability where it wasn't designed in place. And this always means anything communicating with bitcoin. Bitcoin was not designed for interop, but at the same time, bitcoin has more than half of the liquidity in the space, and so it wasn't designed for interop. And interop with it is super important.
00:41:43.100 - 00:41:48.380, Speaker A: I got to research your BFT more.
00:41:49.550 - 00:42:12.900, Speaker B: One question I have, and I don't know if you've looked at it at all, but if you do want to have an actual marketplace, right, with actual orders and how like, I mean, there's actually, I know a few people who are actually working on having a separate chain pretty much for doing the orders and doing this kind of communication. If you looked at that at all.
00:42:13.350 - 00:42:40.700, Speaker A: We've looked at it. A lot of it is, it adds a lot of technical complexity, because now we have to maintain, in addition to cross links with bitcoin and Ethereum, we have to maintain an entire chain. We generally want to avoid doing that because it seems like an endless rabbit hole of design issues.
00:42:43.730 - 00:42:48.270, Speaker B: What about something like Zero X or some other relay?
00:42:49.010 - 00:43:08.878, Speaker A: We have thought about it. So with the current spv swap design, there's an order book that lives on chain in Ethereum, and everything is fill by id, self matched. So you look at this on chain contract, you see what orders are available and you fill the ones you want. They're all like a fixed price and.
00:43:08.904 - 00:43:14.678, Speaker B: A fixed size, which is also kind of, you're given an option ish to people, sort of.
00:43:14.764 - 00:43:55.730, Speaker A: We don't usually call an order book an option, but you're posting things for sale and people can decide if they want to buy them or not sure. So we want to eventually. Instead of making like one system that hosts all these order books, make one client that accesses order books. On many chains. The user doesn't need a coordinating chain. The user needs access to liquidity that's already out there. They just need to figure out where the liquidity is.
00:43:55.730 - 00:44:27.566, Speaker A: And we can do that just as effectively by looking at many chains using light clients. So our app today has a bitcoin lite client packaged in. We rely on API for Ethereum right now, but we're working on an Ethereum lite client. If you guys make a great liteclient protocol, let me know, because I'm a little bit frustrated with Ethereum's right now, but a lot of the new chains like cosmos are designing with light clients in mind, which really helps me.
00:44:27.668 - 00:44:32.122, Speaker B: Well, I mean, in the sharding world, kind of everything is a light client.
00:44:32.186 - 00:45:07.002, Speaker A: Yeah. One of the nice things about sharding designs. Cool. The last thing that we kind of add to this list sometimes is federations. And I'm going to separate that from the rest of the list because what we're going for with most of the things we work on is economic assumptions. All of these rely on, someone loses some amount of money if they go wrong. Right.
00:45:07.002 - 00:45:15.550, Speaker A: And we have economic security. Federations rely on honesty instead, which is not my favorite assumption.
00:45:17.570 - 00:45:21.294, Speaker B: So this is more of a, like, just this. Would Oracle providing data?
00:45:21.412 - 00:45:33.860, Speaker A: Yeah, Oracle's providing data. Some group of custody people holding cross chain assets like WBTC, those we find less interesting but are still willing to think about.
00:45:34.870 - 00:45:51.794, Speaker B: Do you think there is, you have a set of pretty much validators who have maybe parts of the key to access some BTC account, right.
00:45:51.932 - 00:46:31.334, Speaker A: We've thought really a lot about that. The main question for us and something that we're actively thinking about and researching is can we make it so that those validators themselves, these custodians holding BTC on someone's behalf, can we make it so that they have risk of loss? Can we make it so that they will lose money if that BTC gets moved inappropriately? And that's what converts it from a federation to something else, some combination of SPV and other stuff.
00:46:31.452 - 00:46:37.346, Speaker B: Probably pretty much like if they move it incorrectly, you can prove that it committed.
00:46:37.538 - 00:47:06.740, Speaker A: Provide SPV, for example, the typical way that people move federations into economic assumptions, they convert honesty to economics is bonds and slashing. So that's kind of where our head is at right now. We can potentially have something there, but we don't know exactly what it will look like. We're thinking about it a lot and we hope to have more announcements for it soon. More public stuff soon.
00:47:07.190 - 00:47:08.018, Speaker B: All right.
00:47:08.184 - 00:47:09.090, Speaker A: Hopefully.
00:47:12.950 - 00:47:15.170, Speaker B: More questions, more topics.
00:47:16.150 - 00:47:30.100, Speaker A: Let's see. This is about the general overview. We can talk about transaction format in depth, but I don't think that's in scope so much.
00:47:31.430 - 00:47:43.990, Speaker B: All right, cool. Well, can wrap it up. All right. Thanks everybody for tuning in. I hope you learned a lot. And leave some comments and check out Suma.
