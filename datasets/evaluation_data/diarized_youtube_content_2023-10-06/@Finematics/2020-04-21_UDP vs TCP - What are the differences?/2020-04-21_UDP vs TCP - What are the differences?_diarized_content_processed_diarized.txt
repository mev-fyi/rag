00:00:02.170 - 00:01:00.190, Speaker A: UDP and TCP are both transport protocols used for communication between different hosts. They're part of the transport layer. In the broadly known OSI model, the transport layer is responsible for delivering data to the correct application processes over a network. UDP and TCP combined together contribute to pretty much all traffic on the Internet, no matter if you're watching a movie on Netflix, browsing the Web, or checking your banking app. Although both UDP and TCP are ultimately used for the same purpose, there are many differences between them. Before we jump into the comparison, let's quickly review both of the protocols. UDP or the User Datagram Protocol, is a simple connectionless protocol that can be used to send messages aka datagrams between different systems.
00:01:00.190 - 00:01:52.950, Speaker A: UDP datagram consists of a header and a data section. The header consists of four fields source port, destination port length, and checksum. Each one of them is two bytes, which make the header size equal to eight bytes. UDP is fast, as it doesn't have to establish a connection before it can start sending data. On top of that, it doesn't care about Acknowledgments, which results in overall less data being sent over a network. The other characteristic that makes it fast is no concept of congestion control, so the data is always sent immediately, even if the receiver cannot keep up with the speed. The main downside of UDP is the fact that it's not reliable.
00:01:52.950 - 00:03:31.390, Speaker A: The way how UDP sends messages is sometimes called fire and forget, as the sender doesn't care if the data was successfully delivered, it doesn't attempt to resend lost messages, and it doesn't wait for any Acknowledgments. On top of having a potential of not delivering all the data, the messages can also arrive in a different order to what they were sent in, or they can contain duplicates. The only thing that UDP provides is integrity verification of the header and the payload that is implemented using checksums. If two systems want to communicate via UDP in a reliable way, they would have to add reliability on the application level. So what kind of applications use UDP? UDP is used across different systems, ranging from simple query response protocols that don't have to establish a connection at all, for example, DNS or NTP protocols, to time sensitive applications that prefer to drop messages instead of waiting for delayed packets caused by retransmission, for example, IPTV, VoIP, or online games. The other group of systems that UDP is suitable for are broadcasting services, where one message has to be delivered to multiple recipients, which can be easily achieved with multicast that UDP supports. Some of the examples are service discovery systems or routing protocols.
00:03:31.390 - 00:04:41.400, Speaker A: It's also worth noting that UDP cannot be used in situations when all data must arrive at the destination in the correct order, so sending an important file or an email via UDP may not be the best idea. Now let's jump into the UDP's biggest rival TCP. TCP or the transmission control Protocol is a complex connection oriented protocol that can be used for reliable communication between different systems. TCP divides data into chunks and adds a TCP header, creating a TCP segment. TCP header consists of multiple fields including source and destination, port, sequence number, Acknowledgment number, and checksum. The total minimum size of the TCP header is 20 bytes. TCP, as a connection oriented protocol, initiates communication by establishing a connection between two parties before data can be sent.
00:04:41.400 - 00:05:45.606, Speaker A: It does it by using a mechanism called a threeway handshake. When parties decides they are done with sending data, the connection can be terminated by another mechanism called a four way handshake, with each side of the connection terminating independently. TCP is a reliable protocol as it provides multiple features for guaranteed data delivery. The main features are a retransmission of lost packets, congestion control, error detection, guaranteed ordering of packets, and sending Acknowledgments for delivered packets. The main downsides are the usually lower speed of sending data and higher latency, as data doesn't always get sent out immediately. Also, overall, more data is being sent over the network because of the Acknowledgments. TCP is one of the most commonly used protocols on the internet.
00:05:45.606 - 00:06:23.190, Speaker A: Http uses it so whenever you're browsing the web, you're using TCP. Other examples include FTP for file transfers, SSH for remote sessions and SMTP for sending emails. Time. For the main comparison, let's compare UDP and TCP one to one. UDP message oriented TCP connection oriented UDP smaller header, eight bytes. TCP bigger header, 20 bytes minimum. UDP not reliable.
00:06:23.190 - 00:06:59.134, Speaker A: No retransmission, no error detection besides checksums, no guaranteed ordering and no congestion control. TCP reliable retransmission. Error detection guaranteed Aldering congestion control. UDP usually faster with lower latency, no axe, no congestion control. TCP usually slower with higher latency. Axe and congestion control. UDP lower bandwidth consumption, no axe.
00:06:59.134 - 00:07:46.270, Speaker A: TCP higher bandwidth consumption. Axe retransmissions. UDP supports multicast TCP doesn't support multicast. UDP and TCP protocols, despite major differences, are both extremely useful in their own way. They provide intrinsic trade offs when it comes to reliability, speed, and simplicity. The key for choosing which one is more appropriate for our system is knowing those trade offs and understanding our system requirements. If you have any questions about UDP and TCP or any suggestion for the next videos, please comment down below and also visit my website phinematics.com.
00:07:46.270 - 00:07:56.360, Speaker A: If you like the video, hit the like button, subscribe to My channel, and click on the Bell icon to be notified when the next video comes out. Thanks for watching.
