00:00:00.410 - 00:01:00.480, Speaker A: You. Have you ever heard the expression code is law where technology is used to enforce rules? In that case, do we even need lawyers? Or maybe we can live in a fully automated world where code dictates what we can and cannot do. With the current development of smart contracts, this futuristic scenario may may be closer than we think. A smart contract is a piece of code that can be executed automatically and in a deterministic way. The smart contract code is usually stored and executed on the blockchain to make it trustless and secure. Smart contracts also have capabilities of receiving, storing and sending funds, and even calling other smart contracts. They follow if then semantics, which makes them fairly easy to program.
00:01:00.480 - 00:02:02.100, Speaker A: Smart contracts aim at removing the human factor from decision making. The human factor is often proven to be the most error prone and unreliable element of the standard traditional contracts. A vending machine comes very often as a good analogy to a smart contract as it shares some of the similarities. A typical vending machine is programmed in a way that allows certain actions and state transitions based on the input. It also works in a fully deterministic way. For example, if you want to buy a can of Coke that costs $2 and you only have $1, no matter how many times you try, you won't be able to get the drink. On the other hand, if you insert $3, the machine will give you a can of Coke, an appropriate change.
00:02:02.100 - 00:03:03.800, Speaker A: Even the change that is given is selected in a predefined and programmed way based on which coins are available and which coins the machine wants to get rid of first. A smart contract can rely purely on the information available on the blockchain. For example, if you give me ten tokens A, I'll give you ten tokens B. Or it can rely on an external data source, for example on the Ethereum or SNP 500 price. The latter example makes smart contracts more difficult, as they have to trust real world data. The needed trust can be minimized by using Oracle services, but even the Oracle services have to be trusted. There are already a few projects that by using certain incentives, make Oracles more likely to provide correct data.
00:03:03.800 - 00:04:02.140, Speaker A: Chainlink is a project that clearly stands out in this category. Ethereum is a good example of a blockchain that supports smart contracts and make it possible for a programmer to implement their own smart contracts. A smart contract can be written in a programming language called Solidity, which was created specifically for that purpose. In Ethereum, all the deployed smart contracts are immutable. This means that once deployed, they cannot be modified, which creates certain risks that we're going to discuss later. Smart contracts on Ethereum are also decentralized, which means there is no single machine controlling the contract. In fact, all the nodes on the Ethereum network store the same contract with exactly the same state.
00:04:02.140 - 00:05:13.630, Speaker A: Although ethereum is currently the most popular general purpose smart contract platform. It is not the only one, and it has a few competitors. Some of them are Cardano, Thesis, EOS, and Tron, but not all of them share the same characteristics. The term smart contract was coined by a wellknown cryptographer Nick Zabo in the early 1990s. The name, although not the most self explanatory, stuck and is commonly used especially in the blockchain industry. To see the benefits of smart contracts, let's compare a hypothetical smart contract to its equivalent in the traditional space. Let's say we want to write the following contract if Alice sends X number of tokens A and Bob sends the same number of tokens B, the tokens will be swapped and Alice will receive Bob's tokens and Bob will receive Alice's tokens.
00:05:13.630 - 00:06:37.130, Speaker A: In a non smart contract world, one way of achieving that without Alice having to trust Bob and Bob having to trust Alice would be to create an escrow contract with a third party. The third party would collect tokens A from Alice, wait for the same number of tokens B from Bob, and send Alice and Bob their respective swapped tokens. This approach already shows a few problems that Alice and Bob may be facing. Trusting Intermediaries there is no guarantee that the third party will not run away with the tokens after receiving funds from Alice and Bob. We have to rely on the reputation of the intermediary and potential insurance. This approach is not deterministic, and if something goes wrong, it may have different outputs depending on multiple factors, including the jurisdiction where a potential case would be settled in. On the other hand, the smart contract would work in a fully automated and deterministic way, making sure that both of the parties receive funds when they meet the initial criteria of depositing coins.
00:06:37.130 - 00:07:50.034, Speaker A: Smart contracts can also hold funds within themselves, which is just not possible to achieve in the traditional world. Speed depending on the intermediary, Alice and Bob may have to wait even up to a few days or weeks to settle the transition of tokens. What if they want to swap tokens on Sunday? Is the intermediary even operating with smart contracts? These kinds of problems go away, and a contract can be fulfilled seconds after the initial criteria are met. Cost traditional contracts are not only expensive because of the intermediary that have to make their profit. There is also a huge risk of hidden costs for things like arbitration and enforcement. If there are any problems with the contract. Reusability, the same smart contract that is responsible for swapping Alice's and Bob's tokens could be used by anyone else who wants to swap tokens in the traditional world.
00:07:50.034 - 00:08:53.746, Speaker A: They would all have to sign separate contracts and pay the respective fees to the intermediary. Fraud this is yet another hidden cost, this time for the intermediary itself. The intermediary would have to make sure that both Alice's and Bob's tokens are legitimate before initializing A swap. Fraud is very common in traditional finance, and most companies have huge teams working purely on preventing fraud. With smart contracts, the tokens can be verified on the blockchain and with digital signatures. It's clear straight away if both Alice and Bob are eligible for spending their tokens. Smart contracts have a growing number of use cases, ranging from payments and decentralized finance to supply chain and crowdfunding.
00:08:53.746 - 00:09:58.890, Speaker A: Smart contracts are also the basic building blocks for decentralized applications, or DApps. Let's talk about a few examples of smart contracts. Decentralized finance, or DeFi, is one of the new industries that rely heavily on smart contracts. Some of the things that have been already built in this space include decentralized Stablecoin with a clever use of smart contracts and certain incentives, we can create a stablecoin that is pegged to the US. Dollar without having to store dollars. In the real world, MakerDAO is one of the companies that makes it possible. Automated Liquidity Provisioning a set of smart contracts can allow users to provide liquidity and swap tokens in a complete permissionless and decentralized fashion.
00:09:58.890 - 00:11:05.300, Speaker A: Uniswap or Kyber Network are good examples of such protocols. Another use case is providing more transparency to the supply chains, where protocols like Origin Trail comes to play. When it comes to crowdfunding, you can imagine a contract that unlocks funds as soon as certain goals are met and verified by the community. This doesn't stop here. Time for a bit more futuristic examples. What if smart contracts could facilitate things like ride sharing, apartment rentals and much more? How about charity? You can imagine a fully automated fund that would send money directly to the people who need them the most without any intermediaries. For example, the fund could determine that certain region was struck by a hurricane and redirect funds to that part of the world.
00:11:05.300 - 00:12:07.186, Speaker A: For now, it sounds quite impossible, but all the necessary elements to make something like this happen are being built while we speak. The use cases for smart contracts are almost infinite, but before we can achieve all of that, we have to tackle a few problems. One of the main risks when it comes to smart contracts is something that haunts every other software. Bugs. The best example of a bug in a smart contract is the Dow hack that resulted in millions of dollars worth of ether lost as the attacker was able to drain funds from the smart contract. This caused ethereum to hard fork and created a lot of disagreement in the ethereum community. Since the Dao hack, the ethereum community came up with a lot of extra security measures.
00:12:07.186 - 00:13:28.030, Speaker A: These days, pretty much all popular smart contracts have gone through a security audit, often by multiple teams. Besides that, there is a trend for using formal verification methods to prove that certain contracts will always behave in an expected way. Protocol Changes even if a smart contract doesn't have any bugs and have been audited, we still cannot guarantee that the change on the platform level will not cause any problems. We can imagine a situation where an upgrade to the Ethereum itself may cause certain smart contracts to start behaving differently to what was expected before real world issues that cannot be easily communicated by Oracle Services. It's true that Oracle Services can provide a reliable way of getting information from the real world into the blockchain. For example, as we mentioned earlier, they can provide an Ethereum or SNP 500 price. Now imagine that you rented an apartment or a car and made some accidental damage.
00:13:28.030 - 00:14:38.760, Speaker A: How would a smart contract without any human intervention possibly know about it? There are multiple examples like that when it's hard to imagine how something unexpected that happens in the real world can be visible to a smart contract. Besides all the above, there are also other risks involved in things like regulation or tax, but I believe that they can all be eventually solved. So can we actually replace lawyers with code? Not quite. At least not right now. In the future, I can certainly see more and more contracts being automated, especially when it comes to finance. But even in a fully automated world, lawyers can provide valuable knowledge that can be translated into code. Besides that, there is a lot of regulatory challenges when it comes to laws around the crypto industry itself that will keep lawyers very busy for a while.
00:14:38.760 - 00:15:58.080, Speaker A: Nevertheless, if I was a lawyer, I would start thinking about learning a little bit more about smart contracts and coding, as I believe they will play a big role in the future. Let's quickly summarize both the pros and cons of smart contracts. Pros Fully automated Deterministic Results trustless fast Precise Secure cost efficient and transparent cons Software bugs Protocol Changes unclear Regulation unclear Tax even though smart contracts carry certain risks, we have to remember that we are still very early and most of the current problems are solvable. If you have any questions about smart contracts or any suggestions for the next videos, please comment down below. If you find this video helpful, hit the like button, subscribe to My channel and click on the Bell icon to be notified when the next video comes out. Thanks for watching.
