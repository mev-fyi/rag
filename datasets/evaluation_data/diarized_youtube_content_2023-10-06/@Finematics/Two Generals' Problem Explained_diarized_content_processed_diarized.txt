00:00:02.490 - 00:00:59.386, Speaker A: The Two Generals Problem, also known as the Two Generals Paradox or the Two Armies problem, is a classic computer science and computer communication thought experiment that we are going to talk about in this video. First of all, to avoid any confusion, we need to remember that the Two Generals problem, although related to the Byzantine generals problem, is not the same. Byzantine general's problem is a more general version of the two Generals problem and it's often discussed when talking about distributed systems, fault tolerance and blockchain. We'll be talking about it in the following video. But now let's move to the story of the two generals. Let's imagine two armies led by two generals planning an attack on a common enemy. The enemy's city is in a valley and has a strong defense that can easily fight off a single army.
00:00:59.386 - 00:01:35.078, Speaker A: The two generals have to communicate with each other to plan a synchronized attack as this is their only chance to win. The only problem is that to communicate with each other, they have to send a messenger across the Anemi's territory. If a messenger is captured, the message he's carrying is lost. Also, each general wants to know that the other general knows when to attack. Otherwise, a general wouldn't be sure if he's attacking alone. And as we know, attacking alone is rather pointless. Now, let's go through a simple scenario.
00:01:35.078 - 00:02:25.450, Speaker A: Let's call our generals A and B and let's assume everything goes perfectly fine. General A, who's the leader, sends a message attack tomorrow at dawn. General B receives the message and sends back an acknowledgment. I confirm attack tomorrow at dawn. A receives b's confirmation. Is this enough to form a consensus between the generals? Unfortunately not, as General B still doesn't know if his confirmation was received by General A. Okay, so what if General A confirms General's B confirmation? Then of course, that confirmation has to be also confirmed and we end up with an infinite exchange of confirmations.
00:02:25.450 - 00:03:35.938, Speaker A: In the second scenario, let's also assume that General A sends a message to General B. Some time has passed and General A starts wondering what happened to his message as there is no confirmation coming back from General B, there are two possibilities here. Either the messenger sent by General A has been captured and hasn't delivered a message, or maybe B's messenger carrying B's confirmation has been captured. In both scenarios, they cannot come to a consensus. Again as A is not able to tell if his message was lost or if it was B's confirmation that didn't get true. Again, we ended up in an inconsistent state which would result in either General A or B attacking by himself. We can quickly realize that no matter how many different scenarios we try and how many messages we send, we cannot guarantee that consensus is reached and each general is certain that his ally will attack at the same time.
00:03:35.938 - 00:04:28.660, Speaker A: To make it even worse, there is no solution to the two Generals problem, so the problem remains unsolvable. I hope you can clearly see an analogy to computer system communication here. Now, instead of two generals, let's imagine two computer systems talking to each other. The main problem here is, again, the untrusted communication channel and inconsistent state between two machines. A very common example that always comes up when talking about the Two Generals problem is the transmission control protocol. As we probably know, TCP uses a mechanism called four way handshake to terminate the connection. In this mechanism, a system that wants to terminate a connection sends a fin message.
00:04:28.660 - 00:05:17.140, Speaker A: The system on the other side of the communication channel replies with an act and sends its own fin message, which is followed by another act from the system, which initialize termination. When all of those messages are received correctly, both sides know that the connection is terminated. So far it looks okay, but the problem here is, again, the shared knowledge between the two systems. When, for example, the second fin message is lost, we end up with a half open connection where one side is not aware that the connection has been closed. That's why, even though TCP is a very reliable protocol, it doesn't solve the Two Generals problem.
00:05:17.590 - 00:05:19.838, Speaker B: So maybe a pragmatic approach.
00:05:20.014 - 00:06:37.366, Speaker A: I'm happier not giving up unsurprisingly. There was a number of people trying to solve the unsolvable two generals problem, and they came up with a few practical approaches. The main assumption here is to accept the uncertainty of the communication channel and mitigate it to a sufficient degree. Let's go back to our generals. What if General A, instead of sending only one messenger, sends 100 of them? Assuming that General B will receive at least one message, how about marking each message with a serial number, starting from one up to 100? General B, based on the missing numbers in the sequence, would be able to gauge how reliable the communication channel is and reply with an appropriate number of confirmations. These approaches, even though quite expensive, are helping the generals to build up their confidence and come to a consensus. If sacrificing messenger is a problem, we can come up with yet another approach where the absence of the messengers would build up general's confidence.
00:06:37.366 - 00:07:27.430, Speaker A: Let's assume that it takes 20 minutes to cross the valley, deliver a message and come back. General A starts sending messengers every 20 minutes until he gets a confirmation from General B. Whenever confirmation arrives, General A stops sending messengers. In the meantime, General B, after sending his messenger with his confirmation, awaits for the other messengers coming from General A. But this time, an absence of messengers builds up B's confidence, as this is what the generals agreed on. In this case, we have a clear speed versus cost tradeoff, and it's up to us which approach is more suitable to our problem. And that's the end of the story of the Two generals.
00:07:27.430 - 00:07:50.500, Speaker A: Time for a quick summary two Generals Problem is a classic computer science problem that remains unsolvable. It comes up whenever we talk about communication over an unreliable channel. The main problem is an inconsistent state caused by lack of common knowledge. There are some pragmatic approaches to the two general's problem.
00:07:51.750 - 00:08:05.858, Speaker B: Two General's Problem was first published in 1975 in some constraints and tradeoffs in the design of network Communications paper and describe a problem with communication between two groups of gangsters.
00:08:05.954 - 00:08:07.330, Speaker A: Yes, gangsters.
00:08:07.490 - 00:08:22.640, Speaker B: If you want to read the original version, check the link in the description box below and also visit my website phinematics.com. If you like the video, please hit the like button and subscribe to my channel. Thanks for watching.
