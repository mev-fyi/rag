00:00:00.890 - 00:00:59.310, Speaker A: Thank you. Yeah, deconstructing PBS is the topic for today. And really when I set out writing up these slides, my target audience was someone thinking about l two sequence of decentralization, coming to having to reason about MeV. A lot of the questions that have been reasoned through on Ethereum, but with slightly different goals, maybe slightly different limitations of what you can do. And so my aim today is to sort of look at what's happened on Ethereum, try isolate some of the important goals and properties that we've looked at and see if we can apply these to the new landscape of l two s, at least looking at some of the dimensions. So for those of you who don't know VBS proposal to separation, I sort of assume you do know that in today's talk, so you might be a little bit confused, but let's see how it goes. So this is a picture from Barnaby's seeing like a protocol post in which he sort of describes how the protocol, Ethereum protocol, doesn't have that much visibility into the outside world.
00:00:59.310 - 00:01:45.082, Speaker A: In particular, he is discussing PBS. But what I'm talking about today is not so much the protocol's view outwards, but rather the view of the outside world of the protocol. When someone uses interacts with your blockchain, with Ethereum, whatever, what do they see? What is the interface like and what are the sort of design requirements and footfalls in and designing this interface? Before I get into too much of the actual content, it might be useful to just establish some definitions first. I'm using users very broadly here. So most users using a blockchain, or many users using a blockchain today use some intermittent service, be it a builder, telegram bot, or some advanced RPC. And so I'm including all of those as users just outside the system. Proposing.
00:01:45.082 - 00:02:48.114, Speaker A: Proposing is the consensus related activities for producing a block, particularly like those carried out by leaders in a leader based protocol. That's not too important for today, but that's like roughly the definition and building. When people think about blockbuilding or building an Ethereum today, they think of ordering transactions. But really, I think what we should be thinking about is a broader, more general concept, which is like aggregating user input. So for example, if someone is taking intents or user Ops or whatever you want to call them, and combining those into a single transaction, this is also a form of building. So any discussion about PBS in Ethereum should at least start with MeV Geth. But even before we get into that, I should lay out maybe what the motivation, what motivation was for Mevgeth and what does Ethereum look like before this was implemented? So at the time MeV gets came online PGAs priority gas auctions as outlined in the flash voice 2.0
00:02:48.114 - 00:03:17.494, Speaker A: paper. I recommend having a look. Were quite prevalent. There are many different interesting aspects of PGAs, but there were two important features of Ethereum that led to what I'll describe now as a PGA. One was that the mempool is completely public, and that's the only way to really get transactions on chain. So if someone puts a valuable transaction in the mempool, other sophisticated users can see this and respond to it. So they might copy a trade or try front run a trade.
00:03:17.494 - 00:04:25.010, Speaker A: And in response to these new transactions entering the mempool again, there'll be a response to those. And so you'd have this compounding effect often with these increasing bids, as you can see there, and this congested the peer to peer layer and the mempool or the mempool. Additionally, we saw a lot of failed transactions on chain, and these came partly from this back and forth response, but also because there was no way to really express ordering preferences for users. What ended up being like the dominant strategy was just to spam the chain and eat the cost of reverting transactions, because sometimes you'd be able to land in the spot in the block that you wanted, and maybe to be a bit more explicit about what the undesirable aspects, or at least some of them were around this time, undesirable aspects of PGAs. We have wasted resources making the chain more expensive, just doing compute on transactions that don't actually permit a state front running for users. That's sort of undesirable because the execution is unpredictable, but also because you just get like worse prices, worse outcomes in general. Also market structure concerns.
00:04:25.010 - 00:05:22.930, Speaker A: The incentive was quite clear for mining pools to integrate with trading firms because that would increase their profits and also make things easier for trading firms. I think there are many issues with these kind of deals, but in particular, one concern was that if one mining pool was able to do this better, if they were like a better trading firm, effectively they would have higher yield. And this would see concentration of hash rate into one or two mining pools, or specifically one, which is bad for decentralization of the network. And so roughly like non uniform returns to proposers. And so Mevgath came along, and this is roughly the design. I'm sure many people here are familiar, so I'll just sort of go through it quite quickly. What Mafge did was introduce in parallel to the public mempool, this flashbot bundle relay, which provided a secondary channel to access miners or proposers in the subtraction.
00:05:22.930 - 00:05:54.640, Speaker A: And what the bundle relay did was roughly three things. It introduced this new message format called a bundle. Bundles are basically like sequences of transactions with a little bit of extra logic. And what these bundles, or the properties of these bundles that were really useful for users was that they are private. So you avoid many of these front running concerns with some trust assumptions. They have revert protection. So if the transaction is going to revert, it won't be included in the next block, which saves you money and also keeps the box clean.
00:05:54.640 - 00:06:29.294, Speaker A: And they can express preferences over multiple transactions. So like transactions A, B and C must come in this order, otherwise not be included at all. And this alleviated many of the problems I was highlighting earlier. But before I move on, I would like to highlight the role of this trusted relay. From the perspective of the users, this relay is really important because the relay is used to ensure these properties. The miners here are trusted entities, and so to make sure there's no front running or infusion of reverting transactions and these kind of things, the bundle needs to monitor these miners and cut them off. They're behaving badly.
00:06:29.294 - 00:07:19.586, Speaker A: Similarly, from the miners perspective, because reverts were no longer allowed, users were now incentivized to just send as many transactions as possible, because there's no real cost to sending failing transactions. This really increased the DevOps required for Nile of service resistance. Additionally, to determine the value of a transaction or a bundle, this needs to be simulated, which is like an expensive process. And so the bundle relay was doing the simulation and filtering these submissions, only sending the highest value ones onto the miners, saving them, I guess, unresourced expenditure. But as you probably know, the Mevgense is not what we see on Ethereum today. And there were some flaws with the design which needed to be iterated on. Firstly, it was hard to police miners.
00:07:19.586 - 00:08:03.158, Speaker A: A lot of the things that you're trying to avoid, a lot of behavior that was bad from miners was non falsifiable. You can't distinguish, often you can't distinguish a front run from just a coincidental submission by another user. Similarly, they were too big to punish, right? If the misbehavior from mining pools was policed only by cutting them out, like denying them bundle flow. If a mining pool is 30% of the hash rate, for example, this would be a huge ux loss. Also, for people trying to submit bundles to the network that have to wait till this mining pool wasn't building a block. Similarly, we still had non uniform yield across miners, even though these bundles were being sent to most miners. There were two problems.
00:08:03.158 - 00:09:06.170, Speaker A: One was that the blockbusting process that still sat on the minor side of things was still challenging and skill based and resource intensive. And so if you were more sophisticated as a mining pool, whatever, you could actually earn higher yield than some of the other mining pools. Another problem was that small miners were completely excluded because this was a reputation based trust system. Small miners couldn't build enough blocks to actually build up any reputation, meaning they were completely denied this import. One thing I forgot to mention on the previous slide, and why I call Mevgeth a form of proposal builder separation, is because we have ordered lists of transactions being sent to miners. In some sense, part of the building process is already happening on the user side, outside of the protocol, because partially built blocks, like subsequences of transactions, are being forwarded to miners just to make the connection to PBS clear there. The third issue with Mevgeth was that flashboards was a trusted entity, and that's not desirable.
00:09:06.170 - 00:10:21.682, Speaker A: So next came Mevboost to address some of these issues mevboost most people are familiar with. So very quickly this basically entailed full blocks being passed on to the proposer, in this case now a validator, not a minor anymore, because we have proof of stake, and almost none of the building process is really happening at the proposer side. An important thing to notice here is that the commit reveal scheme, there's a commit reveal scheme between the relay between the relay and the proposer, meaning that the proposer no longer needs to be trusted or monitored by external parties, because the block is supposed to be committed to the chain before the information is revealed, at least to the proposer. Additionally, unlike in Mevgeth, public mempool was no longer a channel to the proposers, but rather a channel to block builders who were producing the full blocks. Mevboost was supposed to be a stopgap until we had in protocol EPBs enshrined proposal separation. And so it has many flaws, partly because of that, and I guess partly because of unforeseen issues. And so some of these issues include censorship, resistance, because the mempool is no longer a channel to proposers, and Ethereum used to rely on the diversity and the size of the validator set.
00:10:21.682 - 00:11:02.510, Speaker A: So eventually some honest validator would be building a block and therefore would include censored transactions. This is degraded by PBS because this number of blockbusters are much smaller, and so you need a smaller set of entities to collude, to delay a transaction's inclusion for a long time, although probably not completely censor it. Relays are permissioned. That's an issue. I won't go into exactly why, but hopefully everyone sort of on the same page there. Relays are trusted, trusted by the proposer to not cause liveness failures, but also users, blockball, et cetera, to not take advantage of privileged information and front run, et cetera. Builders as well are trusted entities by users.
00:11:02.510 - 00:12:02.770, Speaker A: Now, what also creates some, and I'll come back to the builders being trusted. What is also challenging, or what is also a problem with netboost, is that the commit reveal scheme doesn't actually have a functioning commit. It's not as firm as a commit as you'd like. And if you want an example of this, I'd look at the low car crusader attacks a couple of months ago, but basically there's still hard to pull off. But a kind of attack that a proposer can do to access the information contained in a block before the block is committed to the chain, meaning that they can do is kind of front running or unbundling attacks, which you can read about if you look at that. There's also market structure issues. One of the issues is that there's vertical horizontal integration pressures, meaning that the market of sort of participants like blockbuilders and trading firms, all these kinds of things end up being relays.
00:12:02.770 - 00:12:33.966, Speaker A: There end up being economic incentives for these to become the same entity, sort of centralizing the supply chain. And that really is like a presentation and like a two hour discussion in and of itself. But I'm just highlighting that that is something to think about, and it's very complicated to reason about. For users, this comes back to build the trust. For every slot. There are many blockbuilders who may produce the next block, and each of them have a different sort of trust degree to which they can be trusted. They offer different services.
00:12:33.966 - 00:13:36.866, Speaker A: And so when a user wants to interact with a blockchain, they need to reason about all the different kind of services that are offered, which wallets they can trust, which wallets they can't trust. It's much more complicated than really what you want users to have to go through. And then finally, because metpoons was layered onto Ethereum, there are some technical inefficiencies because it's not in protocol. So for example, when blockbuilders compute bids which they forward onto proposes, they have to compute a state group, for example, which is very expensive, when really all you need is a commitment to a sequence of transactions. So how does this generalize out of Ethereum to l two s coming online and other chains coming online? While we still want to have efficient resource consumption, so the chain is as cheap as it can be, we still want user privacy to avoid front running and these kinds of things. We still want a permissionless market with low barriers to entry. Put a question mark here, because maybe there's specific cases you don't want that.
00:13:36.866 - 00:14:16.906, Speaker A: It's a longer discussion. I think for most cases this is true, and maybe we can talk about it afterwards. But an example of keeping barriers low is like keeping capital costs low. If you require very high stake to participate in a network, to be a blockbuilder, for example, or something like that, this imposes very high barriers to entry. But one thing that certainly changes is that you may not need uniform yield. So for example, if you're in a setup where you have a handful of trusted validators or sequences selected by governance, then maybe it doesn't matter if one is higher yield than another. You may also be willing to increase your resource requirements in the setting.
00:14:16.906 - 00:15:24.494, Speaker A: If you only need a handful of sequences, you can increase the resource requirements. You may also be willing to monitor more closely. All of this is in the sort of proof of governance kind of setting. And so before I give more concrete descriptions of what designs could work for l two s, I think it makes sense to just briefly describe suave, because that's kind of what I ingrained in my vision of the future of AV. So the motivation for suave comes from us identifying these kind of applications like blockbuilding, which are currently quite centralized. And you have to think what kind of technology, why with the decentralized technology we have today, or technology for decentralization, do these applications end up being quite centralized? And the sort of reason that we came up with, or at least how I would summarize it, is that we don't have a way to provide general, credible computation, credible here, meaning that the code, which I expect to be running, is running in a low latency and private way. And our response to this was swab.
00:15:24.494 - 00:16:34.730, Speaker A: And in particular suave is a way to enable these nodes, which we've now decided to call kettles. And the idea with a kettle is that it's a piece of infrastructure that an application can be deployed to and through leveraging TEs, which I want to explain now, hardware, crypto, along with some other tricks, we aim to be able to give guarantees that the code you expect to be running is the code that's running, but additionally that the infrastructure operator who is running the kettle doesn't have any privileged information, privileged access to information, private information, unless the code explicitly gives it to them. And then I'm leaving out some details, obviously, like there's a consensus component to this, even though the kettles operate quite independently, and there's like security models which should be discussed, et cetera, et cetera. So I think I'm running out of time, but just to give a brief outline of some possible designs along the spectrum of the degree of separation between proposing and building. On the one end of the spectrum, we have high separation. Right. This is kind of like meth boost.
00:16:34.730 - 00:17:27.962, Speaker A: And I think this makes sense in an environment where you have a permissionless validator set, which is quite large for all the reasons that it made sense in Ethereum. The advantages here, apart from those reasons, is that it's quite simple and that it can leverage a lot of research which has already been conducted on Ethereum and is being conducted towards EPBs, et cetera. There are still those flaws which I mentioned before. And in order to really motivate why you'd want this, you'd have to be able to address these. I think one way to address many of these is just looking at EPBs. EPBS is meant to address many of these issues already, like censorship, resistance, and improving the commit tribal scheme and technical inefficiencies. And what's nice about bringing a new chain to life is that it's much easier to innovate on these things.
00:17:27.962 - 00:18:00.050, Speaker A: You can choose your consensus algorithms more aptly. And so I think this is much easier to implement EPBs on a new chain than it is on Ethereum. On swab. With the introduction of swab, we have additional benefits. If block building, or building in general happens in Ketles, this improves the trust assumptions for users. If relaying happens in kettles, this improves trust assumptions for both users and the proposer. On the low separation side of things, things that resemble Mevgeth, where a lot of the building happens at the proposer.
00:18:00.050 - 00:18:44.994, Speaker A: This I think makes sense in the proof of governance kind of setting I was describing earlier, we have a small number of validators who are more trusted. The advantages here is that it's much simpler to reason about for users. They don't have to navigate reasoning about all these different kinds of builders and different kinds of trust assumptions. It cuts up middlemen, for example, like block builders, who can often take a margin in terms of fees paid, but also introduce latency and additional trust assumptions. And the protocol can give better guarantees about building policies to users. And I'll elaborate on that in a second when I talk about swap. So again, we have to address some of the.
00:18:44.994 - 00:19:08.138, Speaker A: I'll be quick. We have to address some of the issues from Mevgeth. So one issue was non uniform yield, probably less important in proof of governance. Another issue was policing builders. That's much easier if you have them running in kettles. And running in kettles also means that the protocol can give more concrete commitments to users about the building policies being used. And you have privacy, so you avoid front running these things.
00:19:08.138 - 00:19:33.040, Speaker A: Active governance can also help there. And then lifting resource requirements means that the relay may not be necessary in combination with the kettle. The downside here is that it's much more complex. I left a bunch of things out. I didn't discuss time based policies, I didn't discuss what the implication of proof is. I didn't discuss when the auction should happen, how far in advance. All those are very interesting discussions and you should think about those.
00:19:33.040 - 00:19:43.380, Speaker A: A bunch of useful resources and I couldn't think of a meme. I think cut it off. Okay, great. Can we know who's speaking next? And let's thank.
