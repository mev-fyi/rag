00:00:02.250 - 00:00:55.482, Speaker A: Actually, I'm going to talk about something a little bit more general that a problem that came up while thinking about this project that we're building called Eigen layer. Eigen layer is a mechanism for restaking, which is you stake in Ethereum and make credible commitments, and you can make additional commitments using Eigen layer to validate new protocols. When we were doing this, a lot of people came to us and asked like, hey, you're using the same stake, same economic security multiple times. Are you leveraging this too much? And before we answer this question, we needed to understand whether Ethereum is over leveraging its security or not. So let's go to this. The paper is titled Stake sure, proof of stake mechanisms with strong crypto economic security. Okay, so first question, how do we measure economic security? How do we know some? Let's take Ethereum.
00:00:55.482 - 00:02:20.540, Speaker A: Today, for example, Ethereum has like $40 billion staked and total assets worth maybe 400 plus billion. Are we already over leveraged? $400 billion secured by $40 billion taking, is it over leveraged? What's the economic security of Ethereum? It seems like an unrelated question, but I bring that up here, is asking the question of whether Ethereum prices transactions based on the amount of computation using this mechanism called gas. But really, are you paying for computation, or are you paying for security when you're transacting on Ethereum? What if I have, like a single transaction which has billions of dollars in value and adds a lot of crypto economic load, but it doesn't involve a lot of computation? So one needs to be careful about in thinking about economic security. And finally, we have a concept called unconditional crypto economic safety, which I'll talk about later. So first, let's see, what is this economic safety model? We define the economic safety model using two major concepts. This is prior work in the Ethereum research ecosystem called cost of corruption, which is the cost incurred. Imagine all the stakers collude together and try to pull off an attack.
00:02:20.540 - 00:02:50.482, Speaker A: All the stakers collude together and try to pull off an attack. And if the protocol detects such a behavior and then imposes some negative incentive or negative incentive called slashing on them, then they incur a certain cost. This is called the cost of corruption. It's the cost incurred by a perfectly colluding adversary to conduct a successful attack. That's called the cost of corruption. So this is the cost incurred by an adversary. And the profit from corruption is how much money you can steal if you actually pull off an attack.
00:02:50.482 - 00:03:37.300, Speaker A: How much profit can you extract out of your attack. And a system you can say is crypto economically safe when the cost of corruption is greater. So it's going to cost you more to do the attack than the money you can extract out of the attack. Then you'd say a system is crypto economically safe. Okay, so this is again, like all the concepts, basically from the prior roles in Ethereum. Okay, so what is the cost of mercy in something like Ethereum? Basically the amount slash above, because the protocol guarantees that if there was an attack, then there'll be at least some amount of ETH that can be slashed. And so that is the cost, minimum cost incurred by an adversary in order to conduct an attack.
00:03:37.300 - 00:04:06.182, Speaker A: So usually it's something like the amount of stake divided by three. This is the group that you can attribute to having double signed something. So you go and basically slash those things. Okay, so that's the cost of corruption in Ethereum. This is 40 billion by three. Like 1213, 40 million. Okay, so what is the profit from corruption? The simplest version is the entire TVL.
00:04:06.182 - 00:04:48.590, Speaker A: Like imagine on Ethereum, there is ETH, lots of ERC, 20 tokens, L2s, all these things, right? If you go and make a security attack on ethereum, you could potentially steal all of this money. That's the first attempt, say like the bound on the PFC. PFC's profit from corruption is a total TDL. And how do you steal this is by doing a reorg attack, right? I give you a block. In this block, I say, like, these guys have the money, give you a conflicting block and then transfer the money to somebody else. And basically now you have reordered the chain. It requires a collusion of all the nodes which participated in finalization.
00:04:48.590 - 00:05:42.234, Speaker A: And so the worst case is maybe you will be able to extract the entire TVL out. Okay, so that's the first attempt. So I'm going to basically refine this bound as I go on in this talk. So it turns out that it's very difficult to steal the entire TVL. And the reason is that you can't really steal money, that if you're an attacker, you can't steal money that you don't own because you have to double spend it, spend those money. So here's the idea is when finalization happens, conflicting finalized blocks get slashed. After conflicting finalized blocks get slashed, what happens is one of those blocks is chosen by social consensus to then be built on top of.
00:05:42.234 - 00:05:59.120, Speaker A: So you have two conflicting blocks. Something has to be. The chain continues on. So it continues on. One of those blocks usually what happens is you will continue building on the earlier finalized block because the other one is an attack. It came up later. Right.
00:05:59.120 - 00:06:43.838, Speaker A: Except in situations where these two blocks are nearly contemporaneous, they almost occur together. Two blocks occur together. You don't know which one came first, and you're not going to be able to know that how to, you're not going to be able to know which block came first. But if a conflicting block shows up after some time, imagine somebody tries to reorg a block in Ethereum, which is two months old. Clearly it's not going to be possible, because if you try to produce this alternative block, everybody knows that that's like a new block. So even if this guy gets clashed, they're going to continue on the old chain. That's what's going to happen.
00:06:43.838 - 00:07:37.262, Speaker A: So there's a time period after which blocks get finalized, not by economic security, but by social consensus. Okay, so you can call this the reversion period. The reversion period is when the block is deeply entrenched in the chain, so that if there is a conflicting block, that's not going to be able to win out in being chosen in the canonical chain. So you have the idea of the reversion period. Now, instead of saying that you can steal the entire money, you say that we only are able to steal the amount of money inside the reversion period. Transactions happen before the reversion period are out of bounds for an attacker, because if you try to do anything about it, nobody's going to accept your blocks. So you get a sharper bound on the total transaction value.
00:07:37.262 - 00:08:38.450, Speaker A: So the bound is that instead of the total value locked, which could be insane, it's only the total amount of transactions inside a reversion period. Okay, so this reversion period actually can be like, not that high, because once a block gets finalized and propagated, and everybody knows that that block came first, then any other conflicting block will not be chosen ahead of this earlier published block. So the reversal period is just a little bit over the finalization period. Okay, so can we do even better than this bomb? So apologies for the misformatting. It seems like from the Mac to this computer. Okay, so the idea is that there are certain transactions which even if you double spend, you can't really do anything about. Imagine I go to, or even if you reorg a block, you can't really do anything about.
00:08:38.450 - 00:09:07.142, Speaker A: Imagine I go to uniswap and swap my ETH for USD. This block either gets included or doesn't get included but in any world, I either have my ETH or I have my USD. Okay? Certain kinds of transactions are not all the same. Some transactions have this property that they're atomic on chain. Both value flows are on chain. So either I have my USD or I have my ETH. It can't be that I have neither.
00:09:07.142 - 00:09:54.586, Speaker A: So the profit from reorgang this block doesn't not include transactions that are on chain atomic. So on chain atomic transactions do not induce cryptoeconomic load. So what's happening is only transactions where one end is on chain and the other end is off chain induce a crypto economic load. So what are those examples of transactions? Imagine you're running coinbase, right? Basically, somebody wants to exit their ETH and get. Actually, that's an example of a non atomic transaction. If you're running Starbucks and want to use accept eat, then that's an example of a non atomic transaction. If you're running a right, it's locking value in one chain and releasing value in the other.
00:09:54.586 - 00:10:17.246, Speaker A: If this thing reverses, you can't go and also revert the other chain. So that's a non atomic transaction. So these are the non atomic transactions. So here is a better. So we call them hybrid transactions. And so the profit from corruption is not all value, not even all value inside the reversion period. It's only the hybrid transactions inside the reversion period.
00:10:17.246 - 00:11:09.330, Speaker A: Okay, so what are we trying to do here? We started with there's a kind of cost of corruption in Ethereum, like several tens billions dollars. And we are trying to see what is the profit from corruption. And can we understand the crypto economic load on the system, the profit from corruption. Okay, so till this, it was just like neutral analysis of the system and trying to understand what is a profit to attack Ethereum. Now you can actually start asking the question, can we actually do something to make this even tattered by doing different rules? So first rule is the idea, what we call a secure confirmation rule. This plays on the following idea. We said that if a block is made and no conflicting, this block is made within a reversion period, that block is not going to be reverted.
00:11:09.330 - 00:11:36.922, Speaker A: So if you're coinbase and you want to do like millions of dollars, billions of dollars of transactions, you could say that when you receive a hybrid transaction, you don't confirm it immediately. You wait beyond the reversion time. Wait beyond the reversion time. It's actually like something very practical. And if you go ask Coinbase, they'll actually do something like this high value transactions, they'll just add latency. Right. And kind of seems to make sense, but there's no formal understanding of this.
00:11:36.922 - 00:12:13.826, Speaker A: And our point here is it's basically once you wait beyond the reversion period, your transaction is actually kind of super finalized in the sense that it's finalized by social consensus, not just by economic consensus. So that's the new secure confirmation rule. If people use the secure confirmation rule, then the profit from corruption. So no attacker can ever steal a confirmation. That happened under the secure confirmation rule. So the total profit from corruption is only the total hybrid transactions inside the reversion period, which do not use the secure confirmation rule. Okay, so imagine I'm coinbase.
00:12:13.826 - 00:12:44.430, Speaker A: I want to settle, like, low value transactions instantaneously. So I'm not going to wait for the reversion period for every transaction. So there will be transactions happening where you cannot take the burden of latency. And for all of those, essentially you immediately confirm. But that adds a certain amount of crypto economic load. Okay, so that's the bound that we're getting is written here. But the problem is this bound is completely non calculable.
00:12:44.430 - 00:13:31.360, Speaker A: It's saying total hybrid transaction value inside a reversion period using insecure confirmation. How do we know all the hybrid transactions happening in the world? Maybe an adversity can perfectly coordinate and make sure that lots of Starbucks transactions happening simultaneously and everybody got cheated and the total value is still large. So there's no way to really bound this. And what we fundamentally need is that the profit from corruption should be smaller than the cost of corruption. We need a signaling mechanism to convey how much profit from corruption is running on the network and then ensure that that remains under the cost of corruption. Seems like a very hard, intractable problem. I'm going to present a solution now.
00:13:31.360 - 00:13:56.760, Speaker A: Okay, so we have a new mechanism we call stake. Sure. Which is a mechanism for staking, which actually guarantees these kinds of properties. Titles. Okay, firstly, we define a new concept called strong crypto economic safety. Earlier, we said that crypto economic safety means that the cost of corruption is greater than the profit from corruption. But this doesn't still give you the following property.
00:13:56.760 - 00:14:32.082, Speaker A: So if the cost of corruption is greater than the profit from corruption, it means that it's irrational for an adversary to go and try to attack the system. Right. But there may be all kinds of extrinsic incentives for people to do it. Somebody just may be malicious and try to attack the system. And as a genuine user of the system, somebody may get affected by this kind of an adversarial. Action, but they have no protection against this. So we define a new guarantee we call strong crypto economic safety, which is this is the first time any blockchain system satisfies a property like this.
00:14:32.082 - 00:15:17.582, Speaker A: No honest user of the system suffers any loss of funds. Very, very hard claim, right? If you're an honest user of the system, a client transacting on this blockchain, you should never lose money. I mean, that's the bar we aspire to. Okay, so how do we build this? Essentially what we need is if there was harmed parties due to some kind of double confirmation, then they must be compensated. Okay? If they are compensated more than they got harmed, then they don't suffer any fundamental loss of funds. Okay, so this is what we need. So this means we need the user to reveal how much harm they will suffer.
00:15:17.582 - 00:16:05.746, Speaker A: Right? Otherwise, how does the protocol, we're not going to go around asking everybody, hey, an attack happened, how much did you lose? And a protocol cannot do that in a neutral manner. So we need a neutral protocol level mechanism to actually solicit the amount of harm that may be caused by something like a reversion attack. Okay, so how do we do this? The design is actually like remarkably simple. It's an insurance mechanism against slashing. Okay, so normally what happens in ethereum is whenever there is an attack, you go and detect who convicted the attack and slash their money, slash their funds, slash their stake. But the slash stake is just burnt in a bonfire. Why? Because that's the most neutral thing we know how to do.
00:16:05.746 - 00:16:33.510, Speaker A: Right, but this loses the nuance of who's the harmed party and who we should be compensating for the loss that this attack entailed. So that's what we want to do. We want to go and find the guy who got suffered a loss and then compensate them. How do we do this? We allocate the slash funds to insurance. Insurance is part of the protocol. It's not like a third party sitting out and selling insurance. It's a default part of the staking protocol.
00:16:33.510 - 00:17:34.474, Speaker A: Okay, how do we know who we should sell the insurance to? Basically, each person, when they're transacting, they self buy a certain amount of insurance. Okay? And the idea is like one way to think about it is in a general state system, how do you know how much value somebody transacted? Because I may be transacting in some random token that Ethereum has no way of assessing what the value of it is. This exact same problem happens in a transportation carrier, like, right, or ups or a postal service, you go and ship a package. Who knows what's there in your package? It's general, random items, maybe your grandmother's ring that you're shipping. And when you go to the postal service, the postal service asks you like, hey, how much do you want to insure your package for? You say, oh, you know, $10,000 and you have to pay an insurance premium proportional to that $10,000. So there is truthful solicitation of information. That's exactly the same mechanism that we use.
00:17:34.474 - 00:18:19.770, Speaker A: Users self buy the amount of insurance that they want, say, oh, I want like $1,000 of insurance or 1000 ETH of insurance, depending on what your thing is. But the problem is if insurance is part of the transaction itself, what if the insurance transaction also gets reverted along with your transaction? Okay, so that's a problem. So you have to pre buy insurance so that the insurance itself cannot be reverted. So imagine your coinbase, you know, your daily volume. You can actually go buy like insurance for tomorrow, today. That's the basic idea. And I know a safe transactor policy would be that a safe transactor obtains enough insurance so that the value of insurance they hold is greater than the funds at risk.
00:18:19.770 - 00:19:21.342, Speaker A: And what this leads to as a second order consequence is the self scaling of security today. If you ask why is there $45 billion staked on Ethereum? How did this number come by? You go and look at the curve of, there's a rewards curve on Ethereum, like it says, how much reward do you gain for what amount of stake? There's a curve and people equilibrium. At some macroeconomic equilibrium, like a few percent, 4% seems to be the number that it's equilibrium at today. That's what determines how much is staked. It's not a free market determination of how much security is actually needed to run the Ethereum system. It is some design parameter that somebody had to work out on their board and then put it in. But that is, in this system, if the insurance is allocated via auctions, then what can happen is the more there is demand for crypto economic insurance, the more the price of insurance goes up, the more people stake the total amount.
00:19:21.342 - 00:19:52.182, Speaker A: Staked self scales to the amount that is needed. And there are a couple of attacks here, grieving and stuff, and you can actually deal with it. So just fundamentally, like comparing to traditional insurance, this insurance is non statistical. The total amount of insurance that you underwrite is less than the total amount staked. So there is no statistical component to it. The insurance is a closed system. You are actually identifying the harming party, the attacker, the staker, and then redistributing it to the harmed party.
00:19:52.182 - 00:20:35.842, Speaker A: It's a closed system, kind of like going and getting. If there is fire going and getting money from the fire and redistributing it to the house owner, there's no moral hazard. One of the problems in insurance is like, what if I buy insurance and set the house on fire to gain the insurance? But you can't do this here because double signing is cryptographically attributable. So I cannot force somebody else to double sign without their authority. So there's no moral hazard in the system and there's a grieving attack, which I didn't talk about, so I'll stop with this. But the basic idea of doing this was trying to think about strong crypto economically safe systems so we can build blockchains where users can transact without any risk of loss of funds. The next work we're doing is extending this to Iam.
00:20:35.842 - 00:20:36.180, Speaker A: Thank you.
