00:00:00.330 - 00:00:47.020, Speaker A: You hi, my name is Buka Shosmain and I'm from Nethermind team. I am working on corn Ethereum one development recently I implemented Ryanism Merspec 0.1.2 in Nethermind client. Ryanism is a name chosen for merging Ethereum One and Ethereum two beacon chain into just one ethereum. For anyone interested in the specs internals, it will be linked in the video below. As you can see on my screen there is an Ethereum ryanism repository and here you can find merge spec. You can view it later if you're interested.
00:00:47.020 - 00:01:27.726, Speaker A: Today I want to show you a glimpse into Ethereum future. We will set up Ethereum two and ethereum one nodes and pair them, creating a postmerge node. You can later play with it and even use it for testing of any products that you are developing that target postmerge ecosystem. You can also use it to participate in scaling Ethereum hackathon devnets. More information on that later. Firstly, a small disclaimer. This tutorial is based on Protolambda's written version to which I contributed instructions about how to run Nethermind.
00:01:27.726 - 00:02:03.294, Speaker A: So big thanks to him and all the other teams that contributed there. You can find this tutorial at the link below. It's also available from the rayonism repository. You can find it at the Mergenet tutorial. Let's click it. I am recording it on the 27 April. Please note that there are some planned changes to the written version of a tutorial to make it more accessible and combine some steps into bigger scripts.
00:02:03.294 - 00:03:07.958, Speaker A: If you are watching this later, the process might have changed slightly. As for today, there are instructions on how to run clients that are ready to test the merge for Ethereum one side it's Nethermind and gas. Here in the tutorial called catalyst for Ethereum two it's Teku, Lighthouse and Prism. Please note that prism instructions are still in pull request, so please check if you can't find it in the master version, as Ethereum merge will open a new chapter in Ethereum history. I encourage you to experiment with different clients from both Ethereum One and Ethereum two sites and pick one that suits your needs best. Please note that client diversity is a big strength of ethereum ecosystem that allows us to get where it is now. Here in this tutorial, we will be using Nethermind for Ethereum one client and Teku for Ethereum two client, but most of this tutorial can be also used with other clients.
00:03:07.958 - 00:03:59.290, Speaker A: Just swap the revelance client specific commands for other ones from the written tutorial. Similarly, we'll use Docker for simplicity and convenience of installing and running clients. You can use native packages if they are supported on your operating system, but in order to simplify our setup, we'll use Docker as our environment. We'll use a Linux virtual machine, but thanks to Docker abstraction, this should easily translate to other operating systems, and I was even able to run this on windows. So let's go to our virtual machine. Let's see what distribution is it running as. This might be helpful for you to understand why certain commands work here and might not work on your distribution.
00:03:59.290 - 00:04:47.080, Speaker A: As you can see, it's recent Ubuntu distribution. Now let's look at the tutorial. First thing that we need to do is to clone the tutorial with git to our virtual machine. Let's check if there is a git installed. As you see, there is a git installed, but if you don't have git installed on your machine, you can easily install it like this. Or if you're running different operating system or different distribution, please check how to install git on that. For example, for Windows, most installations will be by double Nixom installer and running it.
00:04:47.080 - 00:05:40.368, Speaker A: So let's clone the mergernet tutorial repository, okay, the merge the tutorial repository is cloned. Let's change directory into it. Okay, now let's check what's next in the tutorial. As you see, we need Python and go version 116 and upper. So let's check if that is installed and if not, install that. To check Python version we can run Python minus v says Python not found, but actually there is a Python version called Python free. Here it's Python free 85.
00:05:40.368 - 00:06:24.080, Speaker A: If you don't have Python, you can install it. How to install it depends on your operating system. Again, we can check to this link and it shows you some instructions how to install Python for different operating systems. Let's alias Python free to Python. That's how most of the tutorial instructions are written. Now we can see that Python version works well. Now we need to check if Go is installed to check that run go version.
00:06:24.080 - 00:07:10.096, Speaker A: It's not installed here. As you can see, we can install it with Snap or apt, but Apt only gives us version 114 while we need version 116. So we will use Snap. Let's use pseudosnap install go minus minus classic. It will download go and install. If you need directions to install go on your operating system, you can go to the Golang doc about installation and you will find here instructions how to install the Linux Macs on Windows. Now when it is installed we can check the Go version and it says it's 116.3.
00:07:10.096 - 00:07:44.170, Speaker A: That's good. What we need to also do is export the Gopath environment variable. So let's set it here and let's add it into the path environment variable. Okay, now we're done. Now we need to check if Docker is installed. Let's write docker minus V no, it's not installed, so let's install it with apt. Apt install docker IO agree to everything.
00:07:44.170 - 00:08:43.510, Speaker A: It will take a minute to download and install Docker. Once docker is installed, we need to check if we have pip, which is Python installer. Python minus M pip minus minus version. We don't have a model called Pip, so let's install it here. Apt install Python free minus pip this will allow us to install Python packages or modules. Actually this will allow us to install Python modules. It might take a minute to install.
00:08:43.510 - 00:10:22.930, Speaker A: There are two packages that are later used in scripts we need web free. So we write python minus mpip install web free. Again, it will take a minute to install. As you can see, the tutorial wants us to install virtual environment for Python. But as I'm using a disposable virtual machine, I don't want to work in virtual environment and I prefer working directly. Let's install the second package which is Ramell Yamu Python minus M pip install rame and when it's installed we can go back to the tutorial and go through its later parts. Firstly, we need to install two tools that are created by protolambda.
00:10:22.930 - 00:11:11.496, Speaker A: So let's do this. Let's install first of a tool. It will take a minute. Those tools will be later used for generating configuration files and ethereum to setup. Okay it finished. That is the second of the tool. Okay, both tools are installed.
00:11:11.496 - 00:12:09.730, Speaker A: Now comes the tricky part. Before we actually will be able to run anything and even before we can generate configurations files for our setup, we need to firstly modify mergenet yaml file. This is explained here why we need to do this. So firstly, before we go there, let's grab a current date time this is current date and time in Linux system as timestamp, which is number of seconds since epoch. Let's grab it somewhere and then let's go to the merge Pm file. This file will be based for generating other files that will orchestrate how the client will operate. But before we do that, let's grab the current time.
00:12:09.730 - 00:13:07.170, Speaker A: Using this command we get a linux timestamp. This is actually current time in some simple format with accuracy up to seconds. To open the file I will use nano, but you can use other text editors of your choice, like Vi or veeam. Nano is preinstalled on the boot too. Here we want to change it. So let's open mergenet here. Are actually interested in two things et one genesis timestamp and et genesis delay.
00:13:07.170 - 00:14:13.620, Speaker A: So the grab timestamp we grabbed a second ago, we'll paste here's and we have 600 seconds delay. That means that 600 seconds from now our ETH two client will think that Genesis happened and will start communicating with our ETH one client. So we have a ten minute window to set up everything properly. Let's save the file with control o enter and control x to exit. Let's check with cat. Is the file was saved properly? Looks like it. Now let's create a testnet name environment variable with the name of our testnet.
00:14:13.620 - 00:15:26.104, Speaker A: Let's call it my network. Then we need to create some directories for the Testnet directory for the Testnet directory, for some public information of the Testnet directory for some private information of the testnet. Lastly, we will use templates and Python to create configuration files for our clients using previously configured mergenet. Yaml nethermind uses different chain genesis file, so we need to both generate the standard genesis file and nevermind. Firstly, we'll generate the gas like Ethereum one configuration. Secondly, we will generate configuration for Ethereum to client. And lastly we will generate configuration for nethermind.
00:15:26.104 - 00:16:11.350, Speaker A: If we scroll down we can have the command here. Now we need to prepare Ethereum to data using previously installed go modules. Firstly, let's create a genetic file in SSD format for Ethereum two client. We can do that with this command. We want to name our node volclient zero. So let's create an environment variable for it. And lastly, we need to create keys for validators.
00:16:11.350 - 00:17:12.922, Speaker A: Please note that if you're participating in devnets, you will either get pre generated keys or your validator will need to register your own keys. So let's copy command for generating the keys and keystore. This will take a minute as it's a cryptographic command. Okay, so now the only thing that's left is to run our validators. Firstly, we should run Su room one validator. So let's go to Nevermind here. Here is nevermind and we want to use Docker.
00:17:12.922 - 00:17:59.680, Speaker A: So we will use this command. Let me copy it. Few things to see here what we are doing here. We are starting Nethermind with json RPC on port 8545 we are using blockouter account zero, X, one and zeros. And we are mapping some paths for the Nethermy client running from Docker that it would be able to access it. The most important one is the config file we pre generated earlier. Okay, let's run it.
00:17:59.680 - 00:18:25.596, Speaker A: Docker wasn't able to find nevermind image because it wasn't installed yet. So it's downloading the nevermind image. Okay, Docker run Nethermind image in the background. So now we will run Teku from Docker. We scroll down here to Teku. Docker. Here it is.
00:18:25.596 - 00:18:52.708, Speaker A: I'll run this command. Let me copy it again. There are some json RPC on the port 500:51 there is some mapping of paths. There is some metrics for detail. I will send you to Teku. It also needed to download the image. And now Teku is started.
00:18:52.708 - 00:19:38.122, Speaker A: As you see, genetics time is 5012 50 615 GMT, which is two minutes from now. So it's good that we specified this ten minutes time. We want to see now Nethermind. So let me open a second session. Okay, I have a second session here and let me attach to netomind console from the docker. Docker logs minus fnetomind. Okay, you see that we are getting some json RPC calls, but it only gives get blocked by number.
00:19:38.122 - 00:21:03.716, Speaker A: So Ethereum two node is able to connect to ethereum one node and ask for this. Now all that's left we need to wait for genesis time. This is still a minute ahead, so let's look at the time and let's look at what's going to happen at the genesis. You we can see that epoch event is happening on tecosign and the communication started. So Echo is now requesting nevermind to create blocks to progress its chain and to set its fed as well as finalizing the blocks on nevermind side if needed. So let's actually explore it a bit deeper. So we have few things here.
00:21:03.716 - 00:21:52.020, Speaker A: We have. Let me check consensus, assemble block calls when the block is created. So this means that Teku is asking nevermind to create a block and add some transactions to it. Then there is consensus new block when this block is being added to the chain. So if Teku decides that it wants to add this block to the chain that was created, it calls consensus new block. Then if it decided that this block would be the head of the chain, it is able to call consensus set head. And when some blocks are finalized, it can call consensus finalized blocks.
00:21:52.020 - 00:22:28.512, Speaker A: That means that these blocks won't be ever changed again. And if they are on the main chain, they will remain on the main chain forever. Okay, as you can see, we are getting bigger and bigger block numbers. Now we are on zero XF which is 15, and now it's 10, which is 16th block. So it's progressing well, and this is the end of the tutorial. Feel free to experiment now. You should be able to interact with both Ethereum one and Ethereum two clients in normal way.
00:22:28.512 - 00:23:26.652, Speaker A: So for example, for ethereum one, that would be JSOn RPC. You should be able to send messages there like transactions, and if you send them, they should be included in new blocks. If you need, you can modify the generated Ethereum one genesis file to give you some fonts for your account. That's completely okay. And as for endnotes, I want to thank everyone involved in this endeavor, especially people working on the written tutorial and client implementations. If you want to take part in devnets or you have more questions about the current state of the merge, I invite you to ethereum R D discord server on the channel called Ryanis. If you have questions about Nevermind, then please go to nevermind discord server.
00:23:26.652 - 00:23:29.984, Speaker A: Thank you for following this tutorial. May the ether be with.
