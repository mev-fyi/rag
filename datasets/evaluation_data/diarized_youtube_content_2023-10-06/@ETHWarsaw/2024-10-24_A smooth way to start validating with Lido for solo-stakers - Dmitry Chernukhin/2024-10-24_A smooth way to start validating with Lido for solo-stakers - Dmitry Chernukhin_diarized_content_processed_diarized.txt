00:00:03.720 - 00:00:53.195, Speaker A: Hello everyone, my name is Dmitry and let's start just right now. And let's start with the following pieces. I think most of us will agree on that Ethereum should be secure, decentralized and censorship resistant. What does Ethereum need to achieve that it needs for more solo stackers aligned with its goals. And where does LIDAR fit into this picture? We used to think about LIDAR as a created set of big professional operators running thousands of file data on their own. But LIDA is not only this and there is a thing I want to talk about today. And this is a CSM community staking module.
00:00:53.195 - 00:01:31.495, Speaker A: It is an extension of the LIDO protocol created specifically for community stakers. Who are these community stakers? It is independent individuals and so on. You got it. It is folks who are interested, who care about the future of Ethereum and want to participate in the Ethereum validation. And with this in mind, CSM was built on the following key values. First, it is to reduce barriers to entry, both economic and technical barriers. Second, it is improve Ethereum's resilience and finally make solo validation more profitable.
00:01:31.495 - 00:02:37.545, Speaker A: And what do you need to actually become a solo staker? First you will need for capital. It is at least 32 ETH to create a validator on the Ethereum network and the last time I checked it was about US$80,000. And this is really huge pile of money. And how can CSM help here? The thing is that you can another operator can get most of the E required to create a validator if they provide a bond such as 2 ETH for example. And this is much, much lower amount of money basically to create a validator compared to the vanilla setup. The second thing you need, it is a hardware so we actually need a validator node is to be properly configured and running. And thanks to the CSM partner integrations it is possible to create a fully configured validator node just in few clicks.
00:02:37.545 - 00:03:51.511, Speaker A: This node will match all the requirements the CSM expect from your operator. And finally, this is the CSAM itself. It offers the easy to use simple user interface to not to make such a complex thing as Ethereum validation even more complicated. And let me prove it. So for this let's just jump into the community staking module widget. It is a basically the interface created for community stakers, for solo stakers. And while we're not connected we can just tap on the link on the page and my bad, it will go straight to the operator portal with extensive documentation how to actually join CSM and we will just go straight To Johnny CSM and for today we will skip the step zero hardware and software preparation because actually we can just jump in without the actual hardware preparation.
00:03:51.511 - 00:04:36.191, Speaker A: And there are a lot of different integrations where you can, as I said, create your validation setup in just a few clicks. And other than that you can just go with your new setup or more complicated complicated options such as distributed validator technology. So it's completely up to you. But anyway, you will need to somehow generate your validator keys and there are also plenty of options because integrations most of the time provide you a way to generate it within the application, for example, something like this. But for today we will just use one of the ways. It is a separate. There are different types of them, graphical ones and command line ones.
00:04:36.191 - 00:06:06.675, Speaker A: For example wagyu, which is primarily graphical user interface oriented but in fact it is a wrapper around just a command line utility created by Ethereum. So if we will go to Ethereum GitHub and go to stacking deposit CLI repository there will be a tool to actually generate keys and there are releases for different platforms. I have already downloaded it for me, I just have to unpack it and in the directory there will be a deposit executable and for this and today we just create a validator schism, a mnemonic. This CLI utility also allows to generate new mnemonic for us and the actual command looks like this. So it basically deposits new mnemonic. And the only argument which is really important for us is the execution address. The thing is that we are supposed to create a validator on Ethereum network and most of the eth will be provided by the protocol and we will have to return the tip back to the protocol and we in DSM it is required to have execution.
00:06:06.675 - 00:06:52.975, Speaker A: It is required to have withdrawal credentials of a validator being a withdrawal vault of lidar. And we can grab it this address directly from documentation and it's called just withdrawal vault. So yeah, it's here. So here I already have this address in my command history. So yeah, just trust me. And this utility will ask for a few options. So continue with language English and I will just to repeat the execution address.
00:06:52.975 - 00:08:08.633, Speaker A: Okay, and the language for the mnemonic and it will be English as well. And for this example we will run create two validators keys and it is important that is for Heleshka network and just create some password for keystore. Okay, so here is generated by the tool mnemonic generated by the tool. We will have to save it for a moment. Okay. And okay and it will just to it ask to retype it back. So just passed in and now it creating our validators case and we yep now we have two key stores one for the every for the every generated key and the deposit data.
00:08:08.633 - 00:09:13.665, Speaker A: The deposit data is an important file. This is the actual data we will upload to the CSM module which will allow for the protocol to create a validator with your validator keys. So let's jump in back to the. I think we don't need this to the stake to the widget connect our wallet, not this one. Okay awesome. So we just duplicate for you an information about how to create a validator or basically the requirements that CSM expects from you. And we now on the step 4 generate key and we prepare deposit data JSON file and let's jump in just to create another operator.
00:09:13.665 - 00:10:42.353, Speaker A: So let's copy the deposit data content. Okay don't worry, we won't need command line anymore I think for this talk and yeah we just have generated two validators keys and the system recognized amount of keys we're supposed to we're going to upload and it automatically calculate amount of if required for a bond to be provided. So it's a little bit less than 2 if per validator key. And now we just hit create another operator and I hope it will do it. So let's confirm the transaction. I think usually like live presentation supposed to fail. So yeah okay awesome.
00:10:42.353 - 00:11:30.155, Speaker A: So yeah if we just uploaded our keys and we have created a new node operator and now we have its id. It's like the basic identifier of a NOD operator. You won't need it most of the time. But just keep in mind sometimes if you will just have to take a look into more details about your node operator you will probably need this id. And now let's go to the dashboard here we will see information about your keys. Now we have two deposable keys, just keys we just created and the name says by itself basically. So this is amount of keys that the protocol can deposit right now for you.
00:11:30.155 - 00:12:08.029, Speaker A: We don't have any active keys now because we just created another operator. There is nothing running at the moment. We will just wait for the protocol to deposit these keys and other things. We also have just zero just because we have no history in our node operator. But I will show you a different one in a moment and we will describe it in more details. And the next thing is to look at it is a bond and rewards. Now we just uploaded some 3.9
00:12:08.029 - 00:12:42.775, Speaker A: ETH. It was converted automatically to Steve because it is a token the bond actually is stored in. And at the moment, just because we just created another operator, there is nothing to claim. There are no rewards earning by another operator and no difference in bond at all. But we will see another picture just in a moment. And another operator has two addresses associated with it. It is manager address and reward address.
00:12:42.775 - 00:13:52.539, Speaker A: Manager address basically makes all the server stuff around the node operator. It means uploading new validators keys, removing them, uploading more bond and so on, and rewarded. This is basically created to receive rewards and sometimes in rare cases when you have no access to the manager address, you can use your reward address to reset it to something else and you actually can change these addresses to basically transfer the manager rights to another address. And before the talk I created this request to change node operator manager address on a different node operator. And now I'm going to accept this and to become a manager of another node operator. Okay, this is not operator three. So it's some kind of early not operators on the testnet and it is.
00:13:52.539 - 00:14:31.455, Speaker A: It has actually some kind of history in it. Awesome. So now here maybe not now. Okay, let's wait a little bit. We will be able to see one more NAD operator. Yeah, so now we see that our node operator created by us has both reward manager address on the connected address, but also we have a manager role on the NAD operator three at the moment. So we can switch to it and go to the dashboard.
00:14:31.455 - 00:15:10.895, Speaker A: And now we see that this NAD operator has five active keys. So it is actually running validators on the consensus layer. And there also a limit. It is sad because actually I was required to exit my keys, but I didn't do it in family manner basically. So my node operator was limited with this amount of keys and I also withdrawn five keys from the network and I was able to unlock bond and withdraw the bond. I have provided for these validators. And here we see rewards.
00:15:10.895 - 00:15:57.719, Speaker A: It consists of two parts. The first one is actually rewards. It is the part of fees created in fair of the protocol and the excess bond. It is a little bit tricky because as I said module stores bond not in the if but in ste. And it means that because STE itself is a rebasing token. So basically with every 24 hour and mainnet it becomes a little bit more in terms of if you earn or with your bond as well. So basically in time you will get something from your bond as well.
00:15:57.719 - 00:16:42.171, Speaker A: So in this case we see that we can basically claim both of it simultaneously and. Yep. And also we can select the token we would like to get our rewards for now we just go with SDE and we can just do it in one transaction. And that's pretty much everything we need from management perspective or something. You just uploading your keys, you kept. You keep your validators running and eventually you just claim the rewards. It doesn't matter when and how.
00:16:42.171 - 00:17:15.115, Speaker A: You can do it like every month, every year, whatever is like suitable for you anyway. It just takes a few transactions for the whole process. And yeah, now we have our rewards claimed. So now it's just zero and some kind of dust. That's it. Yeah. But let's back to the new NAD operator.
00:17:15.115 - 00:18:37.525, Speaker A: The problem with this is that I've just generated keys just right now and I have like pretty much exposed mnemonic for this validator. But before keys being actually deposited deposited by the protocol you still able to remove your keys to avoid them to actually be deposited. We can go straight to the keys tab and select keys that like weren't depositable deposited and click to remove them. I will just reject it for a moment because I forgot to mention one really important thing. Remove keys comes with a price. Actually for the every remove operation you will pay something because otherwise it is really easy to make it really open operation. But at the same time the protocol expect from another operator if they created a validator keys they're supposed to be running and they supposed to be correct.
00:18:37.525 - 00:18:59.645, Speaker A: And because of that there is a small removal charge. It is a fee which is applicable for. I will mention it one more time. It is for every single remove operation. So at this time I will remove two keys at once. So I will just pay once. But if you will try to remove keys one by one you will pay every time.
00:18:59.645 - 00:19:48.015, Speaker A: So let's try it to do it one more time. We have our keys removed. We have nothing here on the dashboard and we also see that we now available to claim just released bond just because we removed the case. The model has no requirements to kept any bond for the protocol. So we can claim it back. But as you can see it is a little bit lower than we created it was before. Just because the charge fee was applied for the node operator.
00:19:48.015 - 00:20:45.395, Speaker A: And the last thing I would like to show here is probably the external dashboards beacon chain has a really nice dashboard for up to 20 validators. And you can see history of your NAD operator and basically track your performance. Performance matters because we understand it is crucial to actually have our validators up and running. That's pretty much it and awesome. I just. I think it's locked. Okay.
00:20:45.395 - 00:21:36.754, Speaker A: Yeah. The last speech for today system introduced such a thing as bond core validator. So basically we can define how much if it is required for our bond for every single validator and because of that we can create a pretty personalized curves and we have a special ones. It's called early. It's curve for early adopters. And it means that if your address is in this early adopters list, you will be able to create your first the very first validator with a discount in the price. So for example 1.1,
00:21:36.754 - 00:22:57.245, Speaker A: 1.5 if instead of 2 if as it works for the rest of the NAD operators and to be added in the list you have a few options. First it is to be the already identified solo stakers and be for example in the rated list and you probably already will be in the early adopters list as well. The second option is to join CSM Testnet and keep your validators running for at least months with a decent performance. Unfortunately, I think it's not the case at the moment is because we will do a snapshot on the 3rd of September or something so basically have no time. But there is another option and it is about this. You can claim your oauth and basically hunt for different odds on different lidar community staking events and you will able to earn enough points to get included in the early adopters list and get their reduced requirements for their very first validator on csm.
00:22:57.245 - 00:23:08.645, Speaker A: Thank you. That's it. Yeah.
00:23:11.395 - 00:23:19.907, Speaker B: Thank you. You showed a way how to establish your that notep. Not operator, right?
00:23:19.931 - 00:23:20.975, Speaker A: Not operator, right.
00:23:21.395 - 00:23:45.425, Speaker B: You use keys use metamask. Is it possible to do that with just smart contract call with solidity? I mean just. I want to apply that on my for 46 to 6 volt to do that automatically and I want to create my own interface and allow my users to do that. Is it possible or.
00:23:45.965 - 00:24:19.865, Speaker A: Yeah, in general, just smart contracts. So you can. You just have to call the function submit like create another operator with deposit data need with addresses or something and you can do it from whatever account on the Ethereum network, even if it is a smart contract, another smart contract for example, it doesn't matter. So you just have to the integration like basically to understand what function to call. That's it. Anybody else? Any questions? Awesome. Thank you.
