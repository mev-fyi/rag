00:00:00.250 - 00:00:01.946, Speaker A: Welcome, David.
00:00:02.058 - 00:00:58.650, Speaker B: Thanks. Okay, hi everyone, my name is David Schlachter and I'm a lead developer at Trueblocks, an open source project started in 2016 by J. Rush, where we develop an indexer for Ethereum and Ethereum compatible chains. And today I'd like to talk about indexing Ethereum, which means finding all the transactions that have ever happened together with addresses linked to these transactions. How we can decentralize our index at Trueblocks, why we think it scales better and web free way of building software. So let's start by figuring out what an indexer is. If you log to your bank account, if you have any, of course, you will probably see transaction history somewhere.
00:00:58.650 - 00:01:55.730, Speaker B: List of your transactions. This is pretty standard in traditional finance world. However, it's a bit more complicated in Ethereum, and the reason is it was an early designed choice made. So Ethereum RPC has no endpoint that we can ask for all of the transactions, all transactions of a given account. And that's why we need additional software, which is an indexer. So indexer goes back in time, it goes back to the very first block ever produced on the given chain, and from there it travels to the present, sorry, towards latest block. So it goes block by block, and for each block it finds transaction ids and tries to extract account addresses.
00:01:55.730 - 00:02:51.060, Speaker B: So if you run an indexer, you will end up with the index. But where should we store it? Right, so one obvious choice would be cloud or maybe my own server. But that actually leads us to a very interesting problem, because the server owner can change the database there and they don't have to tell anyone about it, so it's not transparent. Or they could, if they wanted, power the server off. Right. So we are now in a situation where users have to trust a person or organization that they don't know. And I hope that you agree with me that that's not a very good idea.
00:02:51.060 - 00:03:55.480, Speaker B: And also I would say that such an index stored on someone else's server is very hard to validate or even impossible. On the other hand, we have server owner who has to cover network fees right now and they start charging users, they will charge users for data which is free and publicly available on the chain. So what's the solution? Well, at Trueblocks, we don't want to be the owners of the data, we don't want to be gatekeepers between our users and the data. So in order to do it, we can't simply put index on our own server. We need decentralized storage. Well, anyone knows about any decentralized storage solutions out there. Yeah, great.
00:03:55.480 - 00:04:40.258, Speaker B: Yeah. So with ipfs personally, uploading the file doesn't own the servers. And also data on ipfs is immutable. And because files on ipfs are addressed by the content, which means that whenever you, you can download the file from ipfs, change the content and re upload it, but it will get a different identifier. That means that if users ask for something, they should get what they want. And this gives us a kind of automatic validation. So it's all cool, all great, but the index can be a big file.
00:04:40.258 - 00:05:40.010, Speaker B: And right now for Ethereum mainnet, it's about 140gb, and we don't want our users to have to additionally download 140gb after downloading our software. Right. It's problematic. So what we do is we slice the index into smaller chunks, which are easier to download. And instead of having one giant file on ipfs, we now have a number of smaller files and we have to keep a list of these files. So we create additional file called the manifest, which is simply a list of all chunks, all index chunks deployed to ipfs, but users would still have to download all the chunks to check which chunks holds the address the user is interested in. So additionally we create bloom filters.
00:05:40.010 - 00:06:14.100, Speaker B: And I don't want to go into much detail here. You can think of a bloom filter, the small binary file, which can tell us if an address is present in the given chunk, but without the need of downloading this chunk. And as I said, they are small. So for the user it's easy to download bloom filters. It's not a problem to store them on the hard drive. And for our tools, it's efficient to query them. So it gets even better.
00:06:14.100 - 00:07:08.520, Speaker B: Imagine we have two different users. One user is a data scientist, and they need lots of data to do their job. Another person is only interested in their own transactions. So they are very different, different use cases, they both have very different index chunks, but at some point they will be sharing chunks with each other. And this is huge because it gives us sharing economy, which has this lovely definition. But simply put, sharing economy is receiving something, but also giving something back. So by using the technology, you're helping the community and it's not something you get in web two centralized world.
00:07:08.520 - 00:07:42.990, Speaker B: Yeah, so great. But there is still one big problem. So we're the ones publishing the index. And at trublocks, we don't want to force users to trust us. So the simple solution to that problem is to allow anyone to publish the index. And we do it by storing manifest location. So the list of all index chunks there are storing this manifest in a smart contract deployed to Ethereum mainnet.
00:07:42.990 - 00:08:39.758, Speaker B: And we allow anyone to publish their own manifest and add this information to our smart contract. So now users, they can choose who they trust, and they can even choose to not trust anyone at all, because they can build the index locally on the computer and keep it there. We call our index unchained index. And all the tools we are developing are open source. So you don't have to really trust us. Trueblocks as an organization, you can download the source code, you can audit it and make sure it does what it should do and then compile it from scratch. Furthermore, if you go to our website, you will find a file called untrained index specifications there, and it has instructions on how to greet and create the index.
00:08:39.758 - 00:09:50.330, Speaker B: So even if at some point we decided to stop maintaining true blocks, you can still write a very simple program that would read indexes already published, or write another very simple program that would allow you to create your own index using proven technology. But the one, the technology that we don't own. So that's why we say that our unchained index is truly permissionless. Another interesting thing is that with ipfs, the more users you get, the better, because the more users, the easier it is to fetch chunks. Well, in web two world, the more user you get, the higher network fees you have to cover. And yeah, sure, people can still make profit, of course, but costs will be higher with unchained index. For index publisher, the cost of infrastructure is negligible, and it's always free to read the index for the users.
00:09:50.330 - 00:10:35.640, Speaker B: So we have an index that's decentralized, private, permissionless and cost effective. But the big question is, can we build on it? And of course we can, because otherwise I wouldn't be here, right? So please meet Shifra. Shifra is our command line tool to query the chain. Non chain index is foundation for Shifra. Shifra as a tool has many features, but one important feature is an ability to give you all transactions of a particular account. Here's how it works. So the user asks for a specific address.
00:10:35.640 - 00:11:29.190, Speaker B: Then Shifra scans bloom filters to learn which chunks it should download. It downloads only a small subset of the index, only the chunks that it needs. Then it fetches transaction details and other useful data from the user's own node. And it's actually a feature that we require our user to have their notes. And because blockchains are immutable, we can cache the data and we can make future queries way, way faster. So I would say that we can take the same logic that we've implemented in Shifra and put it in a mobile app. And mobile is our specific development environment because you have limited resources.
00:11:29.190 - 00:12:37.918, Speaker B: But the fact is that, well, we are resource friendly. We only download what we have to download and we catch the data. Now, if you think about it, for example, ether scan is a block explorer, right? But from my own experience, most people use it as a way to get their transaction history. So by taking the logic that's proven to work in Shifra, and please don't trust me, it works, you can test by yourselves, by downloading Shifra, by taking this logic and putting in a mobile app, we can have ethers, kind of like app that's private and decentralized. And my point here is that there's a different way to build software in blockchain space. It's web freeway. And it can be challenging because it's very different from what we know from web two.
00:12:37.918 - 00:13:31.230, Speaker B: And I know that because I used to be a front end developer before I joined trueblocks. So this new way requires learning, learning new technologies, learning protocols, learning skills, how to do stuff. It even can require educating users, for example, that they should run their own nodes. But it's totally worth it because it also creates new possibilities. For example, you get sharing economy for free in your app, or you get free access to chain history. So while there are centralized services in blockchain space, there's very good reason why they are in our space and they solve some problems. It doesn't mean that also to recreate has to be centralized.
00:13:31.230 - 00:13:49.560, Speaker B: So maybe next time you see to design your next app, maybe you can make it decentralized. Okay, thanks you. Any questions?
00:13:54.250 - 00:13:56.840, Speaker A: Okay, let me, come here.
00:14:01.710 - 00:14:26.002, Speaker C: Thank you for a good presentation and this good tool. So my question would be about what kind of data you can curate with ziffer at the moment or what kind of data you index is like all the transactions that touch the account or can you look inside token transfers, NFT transfers and so on. So what's there that you can use?
00:14:26.056 - 00:15:15.460, Speaker B: Today we try to index all of the transactions and then we fetch the details from the node. So token transfers. We even had this weird case where we tried to compile, say, tax records for an account and the numbers didn't adapt. So we went to the low level and we started finding things like for example, the contracts such as struct. So we really try our best to index everything that happens. Am I answering your question?
00:15:18.310 - 00:15:19.060, Speaker A: Think.
00:15:23.110 - 00:15:25.060, Speaker B: Yeah, we do.
00:15:28.310 - 00:16:12.740, Speaker D: Thank you for presentation, too. I would like to ask you, is user that is contributing to the whole project as the one that is basically, I guess, paying for putting the indexes on the network, does he earn anything? Because in the blockchain, for example, in Ethereum, if you are the node and if you are contributing to basically working on the whole network, then you will get a little bit of a reward. In this case, Ethereum, how it works in this project.
00:16:13.270 - 00:17:03.060, Speaker B: So we don't reward our users with a token. We want users to share index because they believe in decentralization and because they want to help each other. So for example, maybe someone's working for Dao in data science team say, right? And they discovered that trueblogs and Shifra is useful tool. So then it would be great if they just created the index and shared it with their colleagues, so their colleagues don't have to spend time building their own indexes. So it's kind of like we are public good as a project and we want people to see the good part in public good.
00:17:05.270 - 00:17:33.630, Speaker E: Hi. The bottleneck in on chain analytics is often not the raw data, but the labeled one. So my question is, is true blocks somehow addressing this part, or is it just focused on raw indexes? Or is it possible for users to publish enriched data like connected wallets?
00:17:35.890 - 00:18:09.080, Speaker B: All right, so we focus only on indexing. Well, unchained index is one part that we do. The second is Shifra, which is tool we give you a method to create index. And also we try to give you best tool to get the most important data. So like transaction lists or logs or traces or cosmic contract that's not related to the index, but Shipra can do it. But we don't go like upper level.
00:18:13.790 - 00:18:16.460, Speaker A: Okay, I think that there was one more question.
00:18:27.890 - 00:18:40.686, Speaker F: Okay, so thanks for the presentation. Really nice tool. So my question is, is it ethereum only or you're prepared for including another blockchains?
00:18:40.798 - 00:18:47.062, Speaker B: So it's only for Ethereum and Ethereum compatible chains, like nosis, for example. Yeah.
00:18:47.116 - 00:19:02.330, Speaker F: And I have second question. So let's say I have an account and I want trueblocks to track it. How does it work? Is it constantly checking the node or is it subscribing? How does it work?
00:19:02.400 - 00:19:22.910, Speaker B: Yeah, so there's another tool, and I didn't want to mention it to not go to detail, but it's called scraper and it constantly monitors the chain. Whenever there's new block produced. Again, it tries to find transactions and the addresses.
00:19:27.350 - 00:19:33.220, Speaker A: Okay, so there is a few more. I'll go first here we have some time.
00:19:35.430 - 00:20:05.966, Speaker G: So I have a question. First of all, how can you trust the data you provide in the first place? Because in the beginning of the presentation you have mentioned you don't want to trust like the storage in the cloud or private servers. Okay, that's fine. But how can we trust your data in the first place? Because if you are making a scraper that goes from the Genesis block up to current block, so you can make a fraud meanwhile. So that's my first question.
00:20:06.068 - 00:20:19.330, Speaker B: Yeah, that's a very good question. You can generate the index by yourself and you can have a friend generate index on their own computer. You can compare.
00:20:19.750 - 00:20:33.922, Speaker G: Okay, but if I'm correct, we are using the data provided by you or am I creating the index yourself? Yeah, by myself. From the blockchain or from the data from the blockchain? From blockchain.
00:20:33.986 - 00:20:58.750, Speaker B: Index is always created from the blockchain. So that's why we require node access. And we as trueblocks, we publish the index by ourselves too. Because sometimes people want to test true blocks and we don't want them to have to go from block zero and wait some time. So we do it. But we don't even do it too often on purpose because we don't want to be gatekeepers. Right.
00:20:58.750 - 00:21:00.158, Speaker B: Okay, thanks. That's cool.
00:21:00.244 - 00:21:11.666, Speaker G: And the second question? If I'm correct, I can only query the data provide connected with a specified wallet. Or can I use the data?
00:21:11.768 - 00:21:30.060, Speaker B: Okay, it would be good if you know the address to start. Right? But there's no limits. You can use trueblocks to query your data or for example, Dao's data, someone else's data. Okay.
00:21:31.230 - 00:21:36.300, Speaker G: But the input is always as contract or wallet address.
00:21:36.830 - 00:21:38.106, Speaker B: Yeah, it can be both.
00:21:38.208 - 00:21:38.922, Speaker G: Okay, cool.
00:21:38.976 - 00:21:39.740, Speaker B: Thank you.
00:21:40.590 - 00:21:50.560, Speaker A: Thanks. So we have one more question, or maybe two. I'll give you first the mic because you had a chance, but you'll have more.
00:21:51.730 - 00:22:02.034, Speaker H: So you've mentioned that there is a contract where we store which data is trusted. So how much data do we actually need to store?
00:22:02.152 - 00:22:12.470, Speaker B: In such contract, we only store ipfs CID for manifest. And then the manifest tells us where the rest of the data is and is also on ipfs.
00:22:13.290 - 00:22:20.886, Speaker H: But this manifest, does it contain like each entry for each block transaction? What's the granularity?
00:22:20.998 - 00:22:36.506, Speaker B: No. So our index is. You can imagine a database. Sorry. And you have two columns. The first one is transaction id. The second one would have all the addresses involved in these transactions.
00:22:36.506 - 00:22:38.270, Speaker B: That's the manifest.
00:22:39.490 - 00:22:40.190, Speaker A: Okay, thanks.
00:22:40.260 - 00:22:43.342, Speaker H: So it's relatively big, right?
00:22:43.476 - 00:22:44.480, Speaker B: Excuse me.
00:22:45.090 - 00:22:49.374, Speaker H: The amount of data there, it's relatively big, isn't it?
00:22:49.412 - 00:23:06.034, Speaker B: Yeah, it's not that big. It depends on the chain. But the data we store on the chain is small. It's really small. It's just CID. Single CID. Then the index can be like a couple of gigabytes.
00:23:06.034 - 00:23:12.410, Speaker B: Big bloom filters are for ethereum mine, and right now it's like 3GB.
00:23:13.070 - 00:23:16.490, Speaker H: Great, thanks. And it's a really interesting tool. I'm going to check it out.
00:23:16.640 - 00:23:17.434, Speaker B: Thanks.
00:23:17.632 - 00:23:20.460, Speaker A: Awesome, thanks. So, the final question.
00:23:22.450 - 00:23:36.820, Speaker D: I don't remember if you mentioned that, but could you tell if there is any bigger third party project that is based on those indexes? Did you know about something like that?
00:23:39.190 - 00:23:53.138, Speaker B: Not at the moment, no, I don't think so. However, for example, give Evev and gitcoin Dow some of the teams, they use true blocks.
00:23:53.314 - 00:23:54.840, Speaker D: Okay, thank you very much.
00:23:58.330 - 00:24:03.590, Speaker G: What's diverse between block and the templates?
00:24:06.030 - 00:24:18.080, Speaker B: Well, if you run your own scraper, there should be no latency at all. Yeah. If you use our index, they're going to be latency because we, on purpose, we don't publish index too often.
00:24:18.770 - 00:24:26.750, Speaker G: But if I don't want to use money code, I can open the people smart contract.
00:24:31.730 - 00:24:33.902, Speaker B: Excuse me, I didn't get it.
00:24:34.036 - 00:24:37.270, Speaker A: Sorry. So maybe the question you can ask later on.
00:24:37.340 - 00:24:38.694, Speaker B: Catch me later. Yeah.
00:24:38.732 - 00:24:45.220, Speaker A: So, David, thank you very much. Very interesting talk. And we'll have a round of applause for David, of course.
