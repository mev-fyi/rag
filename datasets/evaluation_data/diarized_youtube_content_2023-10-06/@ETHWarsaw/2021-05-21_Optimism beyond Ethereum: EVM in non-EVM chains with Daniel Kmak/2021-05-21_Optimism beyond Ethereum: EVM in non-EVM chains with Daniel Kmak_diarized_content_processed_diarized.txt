00:00:04.710 - 00:00:10.810, Speaker A: And we are live. And with me is Daniel Kmak from nervous. Hi, Daniel.
00:00:11.470 - 00:00:12.838, Speaker B: Hi Antek.
00:00:13.014 - 00:00:14.220, Speaker A: How are you today?
00:00:14.830 - 00:00:24.554, Speaker B: I'm good, thank you. I'm really excited to be here alongside so many reputable speakers. And it's great that you're hosting this event.
00:00:24.752 - 00:00:34.690, Speaker A: Awesome. I'm very happy to have you. And you're going to teach us about EVM on L2, nervous network, is that right?
00:00:34.840 - 00:00:39.300, Speaker B: Yeah, teach us a big word. But I'll try to do my best to explain.
00:00:39.990 - 00:00:49.830, Speaker A: Yeah, well, I'll be learning from the basics, but our hackers probably know more. So without further ado, the stage is yours. You can start your presentation.
00:00:50.730 - 00:01:57.040, Speaker B: Thank you so much. All right, so the title of the presentation is optimism beyond Ethereum. And we'll talk about EVM in non EVM chains. So you might be already familiar with what is an optimistic roll up, but to make sure I also explain it. And we'll talk how you can deploy Ethereum contracts on a blockchain, on a nervous blockchain specifically, which we don't have, where the Ethereum virtual machine is built into L2. So you can deploy Ethereum smart contracts to blockchains that are not necessarily that have not much to do with Ethereum, but it's for like crosschain interoperability. Obviously Ethereum has a great community, great developers and bunch of great applications, and it's good if all those blockchains interoperate with each other.
00:01:57.040 - 00:02:56.346, Speaker B: So just a few words about me. I'm in the space since 2017, so I've been working three years in Ethereum, two years in alternative blockchains. Recently I'm working in developer relations team at Nervous network, where we build our own blockchain from scratch. And right now we have this EVM solution on our L2, so you can deploy Ethereum contracts. I have previously worked for chronologic, so for example, we've been creating their Ethereum alarm clock. You might be familiar with it. I've been also working at Polymat where we did security tokens in security tokens industry, and also Energy Web foundation, where we had our fork of Ethereum, where we're using proof of authority.
00:02:56.346 - 00:03:37.338, Speaker B: So I've been doing few things in the space for quite some time. And right now I want to tell you about this, about nervous, and how you can use our L2. So the agenda for today is split into categories. First I'll talk a little bit about architecture, and then we'll talk about how you can actually use it today. Because this is all public source. There are repositories which you can use right now they are using Docker. So just few lines to start it and you can deploy your own Ethereum contract.
00:03:37.338 - 00:04:11.350, Speaker B: But don't worry, it won't be only theory. I have pre recorded demo video. I didn't want to do it live because our system is still being worked on. It's a bit fragile. There are bugs. I have videos where I show you how this works, how you can deploy Ethereum contract, how you can interact using webgjs just by switching rpcrl. So yeah, without further ado, let's jump into what's nervous.
00:04:11.350 - 00:04:59.490, Speaker B: So it will be probably hard for you to understand without this context, like why we are even creating EVM on L2. So nervous utxo blockchain for general purpose, the difference between UTX. So you need to know one thing. There are Utxo blockchains like Cardano Nervos, et cetera, and there are account based blockchains. And if we are talking about Ethereum, Ethereum is account based blockchain. So the difference is basically that in account based blockchain you operate on account balances and there's one balance per account. And in utxo blockchain it's like bitcoin.
00:04:59.490 - 00:05:42.330, Speaker B: So you have many different, like you can think of safes with monies and if you want to gather all your funds, you need to get all those saves. And Utxo stands for unspent transaction output. So you need to collect those outputs and to construct your new transaction. It's quite different programming model to what account based blockchains represent. So yeah, nervous is using proof of work, multi asset consensus. It's a very low level blockchain. I would say you can implement, for example, you can implement holding different locks for your funds.
00:05:42.330 - 00:06:16.430, Speaker B: So you can use, I don't know, Ethereum wallet, Tron wallet, et cetera, to operate with your funds. But yeah, the goal of this presentation isn't necessarily to talk about, to explain deeply what is nervous. So I'll try to keep it short. Yeah, we have layer one for storing and verifying state. And where L2 comes into play is for computation intensive state generation. So that's why we want to have our L2. And for now it happens to operate using solidity smart contracts.
00:06:16.430 - 00:06:51.530, Speaker B: Also, let's talk about what is optimistic. Roll up. So briefly. It's a L2 scaling mechanism and you want to scale blockchains because you want to have better performance, like you don't want your blockchain to be stuck at. I don't know a very low amount of transactions because users will complain that it takes very long time for their transactions to confirm. So that's why you want to scale your blockchain. So optimistic roll up is a scaling mechanism.
00:06:51.530 - 00:08:11.714, Speaker B: So there are two kinds of roll ups. There are optimistic roll ups and ZK roll ups. In optimistic roll up, security is based on assumption that there's at least one honest node, that if this node sees that something is wrong, it's supposed to alert other nodes by challenging them. And if challenge succeeds, aggregators or operator who behave maliciously has to pay because everyone before operating this optimistic roll up should stake some funds for the security. And also one characteristic of those roll ups is you have longer withdrawal periods than in ZK, zero knowledge based roll ups because you need to give people time so they can challenge. And if there's a challenge, you have virtual machine and you go on chain and you try to replay those transactions and you can prove that someone actually behaved in a wrong way. But challenges are very costly because you need to compute it on chain.
00:08:11.714 - 00:09:01.480, Speaker B: So in general you want to avoid. So let's talk about architecture of nervous L2 roll up. So our L2 scaling solution is called godwoken. And it's possible, for example, that you deploy uniswap to our L2 and also use not only Ethereum wallet to interact with it, but also Cardano wallet, Tron wallet, et cetera, et cetera. The reason for that is we split. Like verifying identity from onchain computation, it presents its own challenges, but we'll get to that at the end of the presentation. I'll talk a little bit about it.
00:09:01.480 - 00:09:38.100, Speaker B: So yeah, this is in addition to our layer one because on layer one we have our rust smart contract. But we obviously know that you guys who are watching are probably more familiar with solidity. That's why we support it on our L2. Right now it's using optimistic roll up, but we want our L2 to also be compatible with ZK roll ups in future. Right now we are using proof of authority. It's a big thing. We are not using proof of stake right now, but it's something we have in mind.
00:09:38.100 - 00:10:45.006, Speaker B: So our aggregators are like preselected and they switch roles with them. Who's producing blocks? I'm not sure, but it's possible that they also need to stake right now. But yeah, please do keep in mind we have a different security model than proof of stake. Right now we have proof authority. We support EVM right now, but other virtual machines like EOS, Libra, et cetera are possible because our goodwoken framework is very general. Our L2 is account based, so it's like Ethereum, while our layer one is Utxo based. So we actually take the best from both worlds available actions in our L2 is basically if you have account on layer one, you can deposit into our L2, you can deposit like native token or like we call it sudt, which is like ERC 20 on our blockchain.
00:10:45.006 - 00:11:31.718, Speaker B: But yeah, you can deposit funds from your layer one, from on our layer one to L2. That's how you create your account in a roll up. You can also create so called creator account, which is for example you create creator account for Ethereum. And later when you send transactions to this creator account, it can deploy smart contracts. That's how it works right now. So you can imagine that on our L2 there will be a few creator accounts. One will be for Ethereum, one will be for Libra for example.
00:11:31.718 - 00:12:20.882, Speaker B: And the point is just to provide a way to deploy smart contracts on those different evms. You also have possibility to withdraw. As I said, it may take some time if you want to withdraw because next thing what you can do is you can challenge and basically there needs to be a time for it. So it might take a week before you withdraw. But there are also different stuff that you can do to work around it, like liquidity, bridges, et cetera. But yeah, so far this is what you can do. So this is like very general terms, very general actions.
00:12:20.882 - 00:13:06.286, Speaker B: Of course, the most interesting thing you can deploy smart contracts. So maybe I'll show you the demo right now. So we don't talk so much about theoretical stuff because this is what you're probably most interested in. Okay, so basically I have pre recorded three videos a few hours ago because I wanted it to be smooth process. So there are still some bugs. There are dragons in the demo. For example, if I send transaction, it's sometimes stuck in metamask and I have to restart browser.
00:13:06.286 - 00:14:07.442, Speaker B: I didn't want to do it during the presentation, but what you can see right now is there's a repository on our GitHub and with few actions it will start nervous developer network for you. It will start a L2 node, ethereum compatibility layer, web3 layer. And it will give you this page, and here on this page you can use your metamask to connect to it. Then yeah, maybe I'll play it. First you need to connect your wallet and as you can see the address is changing. Then we clicked deploy CKB so it's basically depositing layer one, CKB asset into L2. So you have some balance in this roll up and we will be later able to deploy Ethereum smart contracts.
00:14:07.442 - 00:14:44.574, Speaker B: So right now we are waiting for this transaction to complete. All right, so deposit succeeded. We need to refresh the page to see the balance, but your account has been created in our L2. By the way, we are using metamask all the time, Ethereum addresses. So you don't need to care about anything nervous related. Okay, and here we press deploy Ethereum contract. I selected a pre compiled bytecode so you have a solidity smart contract.
00:14:44.574 - 00:15:33.950, Speaker B: You need to compile it and then you need to save deployed bytecode in a file. And then when you click it, you will have a file explorer and you need to select it. And now we are waiting for this contract to deploy. And by the way, this is something which is publicly available, and I'll show you a link to this later, but everyone can try it and it's just like two comments to start it. Okay, so our Ethereum contract has been deployed in a roll up and we have the address. So right now we can interact with this smart contract. And I have like Ethereum application that I was using for like, I even run like a blockchain workshop using this concept.
00:15:33.950 - 00:16:14.030, Speaker B: So it's header tails games when you toss a coin. And whether it's head or tail, someone needs to guess. And if you guess, you win. So I was giving this workshop last year on Ethereum and I just switched like RPC URL from Ethereum to our L2 roll up, but it's basically using web3 js. It's not any fork, just original web3 js. So you can see we need to paste the address of the contract. Sorry for the UI, I know it's ugly, but it's still work in progress.
00:16:14.030 - 00:16:58.270, Speaker B: We can call methods on a smart contract, as you can see, for example, there are some addresses saved in a smart contract and we can get their values. If we do deposit action, then basically those addresses should change. Money should be deposited in a smart contract. There are bugs, but they are being ironed out. But yeah, I just wanted to show that we already have something working, which is great. All right, so we press deposit user one. All right, and now we can see that first user address changed.
00:16:58.270 - 00:17:53.274, Speaker B: So actually depositing tokens into smart contract succeeded. The address was saved in a smart contract in a roll up. And one thing to note is the address that is being saved is different from the address that was sending the message, and this is because when you deposit funds into our roll up, another address is being created for you. And this is because we want to interoperate with different wallets. So you can use Ethereum wallet to interact with the smart contract, tron wallet, et cetera, et cetera. And that's why signing these messages is you have a different address when you deposit. But what we plan to do, or we already did that, but I haven't tried it yet, is in your solidity smart contract.
00:17:53.274 - 00:18:40.480, Speaker B: You need to call a function that will take this address that you see now and it will translate it to your original Ethereum address. But this is still being developed, so I didn't want to show it here, but yeah, we successfully called some solidity smart contract methods and right now I'm choosing a second account because this is a bet. So you need to have two sites. Second account is depositing funds. Yeah. And now it broke, so I had to restart my browser, unfortunately. So I have second video.
00:18:40.480 - 00:19:22.996, Speaker B: Yeah. And, and we can see that deposit contract balance has changed. The funds of the first player were successfully deposited in a smart contract. Right now we want to deposit as the second user. We have a different account. So we press guess. Um, yeah, and here it's, here it broke again.
00:19:22.996 - 00:19:59.724, Speaker B: But yeah, as I said, it's fragile, but it's working. We need to just make little things. But yeah, as you can see, second user deposit also worked. And the address is changed. The address is changed, yes. So we can see both users were able to deposit their funds using the solid smart contract in a roll up. And.
00:19:59.724 - 00:20:49.510, Speaker B: Yeah, right now also you can see the l two balance in a console, which is like 399223, which means that this user deposited those funds. But no one already won the bet. But later we will see after the node processed it that, yeah, because at the end we need to submit original choice and settle after two users deposited. So I press this here we are waiting for this to happen. All right. And you can see the l two balance in the console change from 39992 to three to four seven n at the end. It means that this user won the bet.
00:20:49.510 - 00:21:50.280, Speaker B: And it means we have successfully validated the workings of this solidity smart contract on the L2 roll up, which is great. Maybe we can jump back to the presentation where I'll talk more about how it works under the hood. So let's talk a little bit about the block processing in this. So as I said, we have some operators who are operating this roll up. And there's a different transaction format than we have on our layer one. So they work with a slightly different standards on the L2. And then those godwok and L2 operators, they are submitting transactions to our layer one, which you can view as L2 blocks.
00:21:50.280 - 00:22:25.110, Speaker B: So here we have a picture how this works. Yeah, we have layer one blocks, then the operators who are submitting L2 blocks. And aggregators, like aggregating transactions, they also aggregate transactions. So you send your L2 transactions to those aggregators. So you need to run a L2 node and probably you also want to run like web3 layer. So users can just send like normal ethereum transactions. And it works.
00:22:25.110 - 00:23:09.984, Speaker B: This is just like some logs from the running Godwalken node. As you can see, it's watching the network, it's producing new blocks. It's also watching layer one and syncing there. We incentivize those networks. So for example, we have transaction feeds, same as in layer one. It's also possible to have multiple deployments of this L2 networks. So for example, it's not like we have like nervous and there will be only one L2.
00:23:09.984 - 00:24:25.436, Speaker B: You can deploy multiple networks with different tokens to pay the fees. So you can change security model, you can change the people who operate it, you can impose some restrictions, but in the end as a user, you will have a choice which follow up you want to use. And the Ethereum compatibility in Godwalken is built using polyguous because as I said, it's possible to have compatibility also with other blockchains like eos and other. But right now we have built this thing for Ethereum because I think it's the biggest developer community. So yeah, NSLDT smart contract running on Ethereum today should be able to run on polyges. There are some things that you might need to change, like for example, verifying digital signatures on chain, but we will provide a way to make it smooth. Anyways, Polges is using EVMC under the hood.
00:24:25.436 - 00:25:45.460, Speaker B: So like Ethereum virtual machine implementation in C, but we can add some eips that are not implemented on Ethereum, for example, because we control this implementation. And as I said, there are some differences to deploying a smart contract on Ethereum and on our roll up, but we plan to have a ways to make it easy to work around them. So to give you a high level look at all of these things, how they work together, you can think of this like, so first you have layer one, then on layer one you have like scripts. So you can think of it as those funds that are deposited into our L2 are locked with those scripts so they are safe. And when you lock them on layer one, it doesn't mean that, okay, now anyone can take them because you lock them. No, it's secure. It needs to be like sign, it's checking your keys, et cetera, et cetera.
00:25:45.460 - 00:26:22.076, Speaker B: So this is like a security measure for deposited funds. Then we have goodwoken. So you need to run goodwoken node in addition to layer one node. And this node also aggregates L2 transactions. Then you have polyguys, which is a back end, so which you can consider like a plugin to this godwoken node and it's like Ethereum plugin. And then you have godwoken web3. And this is like a service interface that also gives you an endpoint which you can use as RPC URL.
00:26:22.076 - 00:27:02.304, Speaker B: And this is basically to service compatibility layer. It does like the heavy lifting for you. So when you send like Ethereum transaction, for example, you want to send ten tokens to some other person in metamask, when you click, you see the normal dialogue where you send transaction to someone else. And later this transaction is sent to this godwoken Web three layer. It translates this, it sends it to Godwoken. Godwoken uses polyjuice to process it and runs virtual machine to check state transitions. And this is basically how it works.
00:27:02.304 - 00:27:51.020, Speaker B: So it contains multiple elements that you should know that they exist if you want to deploy contracts on our L2. But basically this was all created to abstract those things away from you. So yeah, here you can see some example logs from polyguys back end, how it operates, checking some stuff, and also web3 layer. As I said, this is already working. You can check this out, you can clone the repo, you can start it. So let's talk about more how you can use it. So these are the most important repositories.
00:27:51.020 - 00:28:56.060, Speaker B: So if you type goodwoken GitHub or Goodwoken kicker in Google, you will definitely find it. And Goodwoken kicker is a repository which allows you to start a devnet and also start goodwoken examples. So this page that you saw where you can deposit funds easily into L2 and also deploy ethereum contract, this is what you can do using Goodwoken kicker. Then you have Goodwoc and examples. This is used by Goodwoken Kiker. And also you can use Goodwoc and examples without running our L2 nodes yourself about setting up the infrastructure because you can use godwalken examples with the deployment on our testnet, which is pretty cool, because you don't have to set it up. And then you have Goodwoken web3 which is this compatibility layer, goodwoken polyguys which is this back end.
00:28:56.060 - 00:29:40.768, Speaker B: And you can see how we implemented this EVM compatibility. And then you have Godwalk and itself. So you will find code for running the nodes. What else, the logic, for example for the security model. So the proof of authority code that we have right now, and you can see how the things are being verified cryptographically, et cetera. So developer experience as you saw it, it's basically you just use web3, js and metamask. You just need to add network to the metamask and it works.
00:29:40.768 - 00:30:44.310, Speaker B: It contains some bugs right now sometimes you have to restart the browser or reset the account in metamask, but you can interact with those contracts and it works. And yeah, if you use Goodwalk and kicker it's using Docker and make file to set up the devnet which is pretty great because it makes running our L2 EVM network just like two comments and it's running. So it's pretty great. Yeah, as I said, just a few comments. Here's basically what you already saw in the video. So I already explained it, but this is a screenshot from Godwalk and examples. And we also have this sudt section where you can deploy your token on our layer one.
00:30:44.310 - 00:32:17.760, Speaker B: Then we call them sudt, but you can think of them just like ERC 20 on our layer one. But yeah, you can deploy this using this issue sudt token and then you deposit this sudt token to our L2 and it will be visible as ERC 20 token basically. And you can send it in the same way you can send it and deposit in the same way as we previously dealed with like native tokens. So yeah, to deploy example smart contract, you need to have this smart contract, then you need to compile it, then save it as a file without starting zero x prefix and later using this page that I showed previously by clicking this deploy each contract, you can just deploy it and yeah, you just interact with it like it was a normal Ethereum smart contract. There are some kvs though to using this stuff. So for example this network can be deployed with various tokens for paying transaction fees. So you can imagine for example that right now you have your Ethereum on Ethereum main chain and then using bridge you bridge it to nervous layer one.
00:32:17.760 - 00:33:43.660, Speaker B: Then you start L2 network with this Ethereum bridge from the main net and basically you can pay fees on our roll up using real Ethereum, it's totally possible. But you can also use different tokens. So for example, you could create a L2 network where you use a DAI stablecoin for example. So I don't know, you have your die on Ethereum mainnet, you bridge it to nervous layer one and then you start this L2 network with this stable coin and you pay for gas with a stable coin. It's totally possible as well. So the second thing is, all the tokens in our optimistic roll up are ERC 20 tokens, even the native token. So sometimes maybe it's good, sometimes maybe it's bad, because if you need some additional functionality to ERC 20, you might need to create some a way to translate those tokens, like additional solidity smart contract that takes those ERC 20 tokens and produces different ones.
00:33:43.660 - 00:34:49.562, Speaker B: But this is just for the sake of simplicity of the technology because we do not want to support every possible standard there because it would be impossible. So we just are sticking to ERC 20 tokens then, and this is a big one, we separate identity check from on chain computation or verification. So you might have some problems verifying digital signatures on our chain right now. But this is all being worked on. And as I said, you should have a solidity smart contract call or assist call where you can translate between those addresses. But for example, if you want to verify digital signature using smart contracts deployed on our L2, you might need to specify which address signed it, like whether it was signed by Ethereum wallet or Tron wallet, et cetera. This is because we want different wallets be able to operate with those smart contracts.
00:34:49.562 - 00:35:39.054, Speaker B: Right? And this is kind of related. Last point, each time you create, if you deposit from your Ethereum address to our L2, you will have a new address created. It will look like Ethereum address, but it's actually different. And you should be possible to go from one address to another. But you need to be mindful that solidity smart contracts see only those generated addresses in polyjuice. So as I said, we are providing ways to work around those problems. So yeah, we will provide helper functions to convert between Polygon's address and the identity address and identity address.
00:35:39.054 - 00:36:48.818, Speaker B: Is this Ethereum address, throne address, et cetera? Yeah, if you sign transactions, you obviously use your identity address, not your polygous address because it would be impossible. You would need to have the private key of this address in your wallet, basically, but we want you to just use Metamask, as you saw, to interact with it. Then we have all the Ethereum RPCs and it's obviously super important to have those, to have 100% compatible RPC with Ethereum. So you can just use all the tools that you have right now, take truffle, build those smart contracts, deploy them, and just by switching the network URL, all of it works. And you don't need to care about some differences. There might be some differences, but the address translation will be performed automatically. So I think you should get identity addresses in the end.
00:36:48.818 - 00:37:45.110, Speaker B: But it's possible that for example in your application, sometimes you will get those polygous addresses and you will have to have some kind of like mapping between those addresses or do some call. And as previously being said, EC recover might behave in a slightly different way than you are expected it to see on Ethereum. But yeah, it should be possible to work around it and finishing this presentation. Interesting things for the future. So the thing we are definitely interested in implementing is a true proof of stake based mechanism for issuing blocks. Because right now we are using proof of authority. We are interested in transitioning to AZK roll up from optimistic roll up.
00:37:45.110 - 00:38:41.000, Speaker B: So you can choose whether you want to deploy optimistic roll up or you want to deploy ZK roll up infrastructure. Using our bridge, you can bridge assets. You can take for example Ethereum on Ethereum Mainnet, you can bridge it to our layer one, deposit into our L2, but also our bridge supports for example Tron. And there's also a proposal to support Cardano. So for example, you can take some assets from Cardano, deposit them to our layer one, then to our L2, and then you interact with Ethereum from Ethereum Mainet and I don't know Cardano and using Cardano Wallet and using Ethereum wallet. So users don't need to install any nervous wallets or anything. They can just use tools that they are used to working with.
00:38:41.000 - 00:39:36.570, Speaker B: Same goes for developers. As a developer, you just use your normal tools and all of it works. And yeah, you can take Uniswap, deploy it on our ethereum EVM L2 and then interact with it. Someone uses Ethereum wallet, interacts with it, someone uses tron wallet, interacts with it. And because our blockchain is very low level, we don't have a concept of our blockchain, isn't aware of concept of the account like for example Ethereum is. So you can actually implement accounts of any blockchain that you have out there. You just need to create a script in rust or c that knows how to verify those signatures for different wallets.
00:39:36.570 - 00:40:44.458, Speaker B: And this is a recommended reading so what I recommend for you if you want to deploy Ethereum smart contracts right now on our L2 is I would recommend you to go to nervousnetworkgoodwalken and check the docs. Also definitely check out this goodwoken keycarve thing where you have this page. You can deploy your smart contract and then use web3 to interact with it. I also recommend reading this document about kvolyges and this is because it's worth reading because you might see what you might need to change in your smart contracts. And if you already have some application running on Ethereum and you are thinking of porting it, then it will give you a good idea. What you should be aware of might require some slight modifications. So yeah, as I said, this is all open source.
00:40:44.458 - 00:41:42.370, Speaker B: You can use it right now for creating this presentation. I only used tools that were open source so you can verify it's all working. There are bugs, but if you run into some bugs, please open an issue on our GitHub. And yeah, we are looking for 100% Ethereum compatibility. You can definitely expect anything and that's working on Ethereum to be working on our chain. And yeah, we want to create interoperable cross chain future where users can stick to their wallets whatever they like, but it's all working together and that's why we chose Ethereum for our L2 right now. It has the best developer community right now and that's why we support solidity and those other tools.
00:41:42.370 - 00:41:55.560, Speaker B: So yeah, that's it for this presentation. If there are any questions in the chat, I'm happy to take them.
00:41:58.250 - 00:42:31.410, Speaker A: Thanks a lot Daniel, for the presentation. I have a question for myself, how does nervous fit into the bigger L2 ecosystem? At the moment we have like polygon dominating the L2 market. At the moment we have optimism, launching soon with uniswap d three. Then we have arbitrum and many other players. Can you tell me more about how does nervous fit into this whole ecosystem?
00:42:31.750 - 00:43:31.774, Speaker B: Yeah, so I think it's super interesting how it will all fit together because you can imagine, for example, that you have those liquidity bridges between those different L2s. And from my perspective, it might seem that these L2s might be good, but only for some kind of application. For example, if you build some specific application, you find that for example, the polygon, L2 is best for you, or arbitrum is best for you, et cetera. It's possible that some very good applications will live on different L2s and then how you connect them, because do we see a future where one L2 solution will dominate all of the applications. I'm not sure honestly right now, because as we see with Ethereum, so you have a lot of amazing applications running on Ethereum, right. But also you have different companies that saw that. Okay, Ethereum is not the best for our application and we are building something else.
00:43:31.774 - 00:44:13.698, Speaker B: But they are not upset about. Okay, we don't care about Ethereum anymore. No, they just want to tap into Ethereum ecosystem as well. So I think the same will happen with those L2s. For example, our L2, our blockchain, is focused on interoperability, having being able to interact with metamask on our blockchain, Tron wallet, cardano Wallet, et cetera. So I think our main selling point is this interoperability and maybe someone has to build application where it's very important for them and maybe they will use our L2. But of course you have other applications that will use Polygon and other L2s and they don't want to run on our L2.
00:44:13.698 - 00:44:33.430, Speaker B: Maybe they don't care so much about tapping into other blockchains users. So I just see there will be very interesting solutions for bridging those stuff and yeah, I think these things will work together. I would say it's based on specific for different applications.
00:44:33.770 - 00:44:46.800, Speaker A: Yeah. Ibadbury space for many different solutions. I'm really excited for all the L2s changing the crypto space in the next months.
00:44:47.490 - 00:44:52.480, Speaker B: Yeah, it will be definitely very interesting to see how this all plays out.
00:44:53.570 - 00:45:05.890, Speaker A: Okay, Daniel, thanks a lot for your time. I really appreciate you taking your time to do the presentation. Are there any links that you would like us to share but you can be found or reached.
00:45:09.270 - 00:45:44.160, Speaker B: For this presentation? Just feel free to Google nervous network God woken, or just go to our discord or our telegram groups where we will give you all the information that you need to use this stuff. It's all open source. And yeah, thank you so much for hosting me. It's a great pleasure to be here. As I said, among very big reputable players. I also want to wish everyone who's participating in the hackathon a good coding and I know not everyone can win, but I hope you will do your best.
00:45:45.330 - 00:46:05.346, Speaker A: Yeah, but we still have many bounties so I think a lot of people will win. And yeah, it was my pleasure to host you again. Thanks a lot. And we'll put some links in the description so people can find you. That's it for today. Thanks a lot, Daniel.
00:46:05.458 - 00:46:07.220, Speaker B: Thank you so much guys. Wish you a great day.
