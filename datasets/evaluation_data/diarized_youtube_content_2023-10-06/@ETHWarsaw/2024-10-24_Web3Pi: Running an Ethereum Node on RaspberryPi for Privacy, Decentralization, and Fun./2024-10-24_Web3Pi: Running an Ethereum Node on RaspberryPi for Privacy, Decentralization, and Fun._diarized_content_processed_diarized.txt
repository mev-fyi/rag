00:00:03.120 - 00:00:51.655, Speaker A: Hey everybody. So welcome everyone. We are going to talk about web3pi, which is a community driven project supported by Golem Network that focuses on making the Ethereum ecosystem more decentralized and accessible for everybody. But before we kick it off, I'm going to talk about the team first of all. So I'm going to present our gentleman here from the team. So Robert is our hardware wizard, network specialist and Python developer. Ukas has extensive experience on blockchain including solidity and Python.
00:00:51.655 - 00:01:27.195, Speaker A: Przemek, also known as Blue. There you go. He's a senior software developer. He combines vast experience in Python and blockchain solutions. And my name is Jakub and I'm product manager of the Web3PI project. You see agenda? Yeah, okay, you can see the agenda first of all. So basically quickly through, let's go through the agenda now I'm going to talk about the, let's say the values, the vision, the impact on the product ideas.
00:01:27.195 - 00:02:47.605, Speaker A: Przemek is going to talk about who is this for right? And different points of view. And he will cover also the important topic of staking. All right, then Robert will dive into hardware topics and node deployment and monitoring and then Ukash will walk us through the software section and at the end we have also planned a Q and A session. All right, now in a nutshell, our goal is to simplify the hassle of running your own nodes where the other extreme will be using the third party services with all the limitations, pros and cons. You can see the such a small device, it's really capable and how do we plan to change that approach that has been present in our ecosystem. In the blockchain space we want to provide battle tested hardware specifications based on Raspberry PI. We also deliver the automated simplified deployment procedures and node installation processes.
00:02:47.605 - 00:04:11.515, Speaker A: Then we offer a number of solutions, software solutions like RPC Reverse Proxy, Admin Panel and Transaction Firewall. And these features will allow you to interact with Ethereum network without external limitations on RPC calls, which is super, super important, while ensuring the privacy and security features. So before we go into details, who is this for and how we can use it? Actually I want to talk about the core values behind this project which is the topic that is really close to my heart. First of all, the independence topic, that means you don't have to rely on big companies, right to manage your data and apps. And with web3pi project you actually control how you interact. With Ethereum blockchain you don't have to rely on third party services, third party centralized Services, which is really, really important for us. Then decentralization is about spreading out power so that no single group or legal entity is in control, and then the ownership.
00:04:11.515 - 00:05:11.967, Speaker A: That means that you own your data, your interactions and your role in the network. So with our solution and its future ecosystem, you'll have the tools to take that control back. That's what we plan to do. And there are a couple of benefits of using this approach. So first of all, everyone may have their own preferences in terms of benefits, but we find those here listed on the slide, really, really important. So first of all, we really, really cherish our private privacy in terms of interaction with Ethereum node. Secondly, we really, really appreciate the reduced reliance on third parties.
00:05:11.967 - 00:06:22.977, Speaker A: I really talk really much about it. That's really, really important. And we want you to be censorship resistant and the same time improve the centralization of the interior network. And last but not least, when you run your own node, nobody controls the numbers of RPC calls you can perform every single day, right? And that's really, really cool because we've tested our setup and we had amazing Results. We reached 100 million RPC calls per day, right? In certain setup, we even reached 200 millions, which is amazing. But at the same time, other service providers, centralized service providers, they offer you like 5 million per day. So if you compare those two, right, like 5 million versus 100 or 5 million versus 200, which is amazing.
00:06:22.977 - 00:07:05.445, Speaker A: This is really, really fantastic project because in such a small device, with such a small device, you can actually virtually have multiple unlimited numbers of calls per day and you can share them with your friends, with your colleagues at work and so on, right? So that's really, really, really, really cool. Really, I would say, fantastic project. I'm really excited about it. And that's just the introduction to our presentation. And now I'm going to hand it over to Blue. There you go.
00:07:06.145 - 00:08:36.841, Speaker B: So, hello. So who is web3pi for? So, despite its minuscule footprint, and that means both in terms of physical dimensions and power requirements, but also in terms of the initial setup overhead that's needed to run such a device, Web3PI still allows almost anybody to, to run their own full Ethereum node in the most straightforward possible way. And it's the perfect gadget for anybody who wants to interact with the Ethereum blockchain without relying on external service providers, without paid subscriptions and without any external dependencies. And now I'd like to show you a few use cases for the types of prospective users of our device. So if you're a Decentralized app developer. Your personal full Ethereum node running on Raspberry PI becomes an unlimited playground for you, which you can use to run massive amounts of queries and transactions, as Kuba showed you. And that means you can run various experiments with your apps.
00:08:36.841 - 00:10:17.065, Speaker B: You can develop your apps without ever worrying about running out of subscription quotas, without relying on external services. Similarly, if you're a decentralized app operator or any other entity who wants to run Ethereum nodes for your users, you basically get the same benefits as as a decentralized app developer. But on top of that, if you need more power, more capability, you can easily bridge multiple devices, and we give you the tools to do just that. And the web3pi proxy allows you to connect multiple devices, run them on a single address at the same time, load balancing the queries and giving it the tools to control that usage. For power users of the crypto ecosystem, we give you the independence and security that you need. On one hand, by running your own full Ethereum node, you gain certainty that the results of your queries have not been tampered with, on the other hand, and that your work is not visible to anyone else. But on the other hand, our tools, such as transaction Firewall, give you additional layer of safety by ensuring that you can only interact with the contracts that you have previously whitelisted, and that you can verify the details of the transactions that you sent to the network before you do that.
00:10:17.065 - 00:11:27.755, Speaker B: And finally, what I think is maybe the most sexy aspect of the device is the perfect gadget for solo stakers. And it's small form factor. It's still the device includes all the components required to run your own staking node, that is the execution client, the consensus client, and virtually basically as many validators as you need. And all those of those components have been carefully selected, configured and I must say, positively tested to work seamlessly on the recommended device setup. And thanks to the work of our team, we give it to you in a form of comprehensive package ready to be launched in minutes. And now I'd like to pass voice to Robert, our hardware hacker and magician, who will introduce you to the tiny wonder itself.
00:11:29.535 - 00:12:31.185, Speaker C: Okay, let's dive into the hardware topic. Web3pi was designed for Raspberry PI single board computers. The Raspberry PI 5 is powerful enough to run a full Ethereum node on a single device, but you can also use two Raspberry PI 4 units. When one serves as an execution client and the other one as a consensus client, we choose Raspberry PI as a hardware platform for several reasons. First of all, it has global wide availability and broad network of distributors. It has been well known in the market for years and has built a large, active, larger and active community. Raspberry PI is cost effective and offers a wide range of accessories that exchange their capabilities, for example NVMe adapters for storage cases, displays and much more.
00:12:31.185 - 00:13:58.861, Speaker C: It's very nice ecosystem. The heart of the Raspberry PI is energy efficient ARM processor. The whole setup consumes less than 10 watts of power. With current electricity prices in Poland, it costs worth about 22 US dollar to run your full Ethereum node at home per year. The complete hardware is compact enough to fit in any corner and this Device can operate 24 hours a day, seven days a week without an issue. Did you know that with the web3pi project you can build your full Ethereum node in less time than this presentation? Yes, that's because we have significantly simplified the entire process by creating a dedicated image for Raspberry PI, by developing a fully automated installer, providing step by step instructions, offering detailed documentation and support, and the list of compatible hardware tested in a bottle. With web3pi, anyone, regardless of their level of expertise can set up their own full Ethereum node at As I mentioned earlier, you can use either a single Raspberry PI 5 or two Raspberry PI 4 units.
00:13:58.861 - 00:14:42.845, Speaker C: Version 5 is powerful enough to run both the execution and consensus clients on a single device. This simplifies the setup and reduce hardware requirements. For version four it's recommended to use two devices. One serves as an execution client and the other as a consensus client. This configuration ensures that each client has enough resources to operate efficiently without overloading a single device. On the right side you can see the Raspberry 5 with an active cooling, USB 2 terabyte storage and official power supply. That's all you need to run web3pi and your full Ethereum node.
00:14:42.845 - 00:15:15.885, Speaker C: Here you can see example of dual device setup. It consists of two Raspberry PIs with also active cooling two external storage over the usb. Those are SSD drives, network switch and the power supply. That's all. In a moment I will discuss the deploying process, but first let's take a look at the recommended hardware requirements. Of course you will need Raspberry PI 5 with 8 gigabyte memory. 8 gigabyte is required.
00:15:15.885 - 00:15:43.095, Speaker C: Smaller version will not work. You will also need 2 terabyte of fast storage for ethernet, blockchain, copy and VME or SSD. Do not use HDD. They will not work. It can be either the M2 storage, in which case you will need appropriate adapter or just any USB 3.0 storage as on the previous slide. Both options are supported by web3pi installer.
00:15:43.095 - 00:16:38.325, Speaker C: You will need of course reliable cable Internet connection with unlimited data. Active calling is necessary. The synchronization process utilize 100% Raspberry P's resources, generating significant heat from both the processor and the storage. Active cooling is required to manage this. We support automatic fan control speed to keep the nodes as quiet as possible. You will need a micro SD card 32 gigabytes or bigger for our image. By the way, our image is based on the newest Ubuntu 2404 LTS and as always proper power supply is crucial as the processor combined with big 2 terabyte storage can have significant current draw during the peak usage.
00:16:38.325 - 00:17:33.444, Speaker C: We have created a comprehensive documentation and the list of compatible hardware, so please refer to it for more information and this is what the entire setup might look like after the assembly. Please notice the colorful display integrated into this enclosure. This is our own modification. Using a 3D printer, you can print a custom cover that allows you to mount a colorful LCD display which shows you the most important node and the operating system parameters in real time. We provide both the 3D model and open source source code. You can just download it from our GitHub page. Here you can see the web free PI development deployment process in five steps.
00:17:33.444 - 00:18:54.425, Speaker C: As you can see, the whole process is very easy. All you need to do is download the web free PI image, flash it on a Micro SD card, then assemble the hardware which consists of Raspberry PI power supply, Micro SD card and of course the storage and connect the power. Then the automated installator will do everything within 15 minutes and start the blockchain synchronization. The blockchain synchronization on a raspberry 55 took worse about 19 hours. Of course we have tools which give you an option to monitor the installation process from the very beginning through your browser and also you can watch the synchronization process through Grafana also from your browser. Here you can see our custom Grafana dashboard. Considering the limited resources of the Raspberry PI, we develop a service that queries nodes for statistics in the way that is less resource intense than traditional solution built into the execution and consensus clients.
00:18:54.425 - 00:19:21.555, Speaker C: On this dashboard you can monitor the key information about the node and the operating system like the CPU usage with history, synchronization status, chain head, RAM swap, storage usage and a couple more information. Okay, let's assume you Already have your Ethernet at U node synchronized. What's next? I will hand it over to my colleague Blo.
00:19:23.575 - 00:20:38.203, Speaker B: So, hello again. So, along with the device itself, we are providing, in our ecosystem, we are providing a couple of software components that make the usage of this device more easier and more versatile. And one of them is web3pi proxy or the RPC reverse proxy. So at its very core, it is a reverse proxy listing on a given most likely public TCP port and public address, and forwarding the requests to one or more Ethereum nodes that it has connected. The proxy itself contains a load balancing mechanism which distributes the queries to specific nodes based on their utilization and it keeps a health check with each node. So it disables and re enables queries to specific nodes based on their availability. And even more interestingly, it's also able to parse the JSON RPC requests it receives to keep track of the types of those requests, the volume of those requests, and the potential utilization of the device that caused by those requests.
00:20:38.203 - 00:21:40.905, Speaker B: And those metrics can then be used for data aggregation for statistics purposes and also to control the usage of the device, to control usage quotas. And so just a quick view at how you use the Web3 proxy. And it's straightforward. You install the package, define the endpoints of your nodes with the environment variables, and then you just run the proxy and once it starts, you get the address of the proxy, you confirm that it's connected to the devices, and you get the administration panel address with your own personal token that you can access to manage the device. And now I will pass voice to UKAs who will tell you about the proxy and other software tools that we give you.
00:21:43.565 - 00:22:19.431, Speaker D: Yeah, thank you. Okay. Our ecosystem grows and it contains many components. Admin panel actually is the front end for RPC Reverse Proxy. It is used to manage this component that Blue was describing. This page is actually the single page of the admin panel. It will be replaced with a more friendly dashboard in the near future.
00:22:19.431 - 00:23:38.545, Speaker D: But still it is an excellent place to talk more about our concepts and the directions in our future development. And I will focus on that. The primary goal here is to manage and control access to connected nodes according to defined policies, whatever these policies would be. The overall principle is to make this functionality easy, to extend, to remain open, adaptive, to let others add their stuff to this, to this component and yeah, to remain open for future needs. For the moment we can check the state of connected nodes. It is the right side of Admin panel. First we have this status wherever connected nodes Are healthy, active or disabled because of failures or maybe out of sync because they are delayed with blocks.
00:23:38.545 - 00:24:45.357, Speaker D: The status of connected nodes are detected live by the proxy and updated in admin panel. We have also basic stats in terms of the number of calls processed by a node. In terms of traffic volume processed by a node having at least two endpoints. You can see how our load balancing is working. We will add dynamic nodes management. There will be buttons to add, to remove, to disable, activate new endpoints during the run and we'll add more info on nodes condition. For instance, an average processing time of the requests, how effective nodes are and very small to expect in this section.
00:24:45.357 - 00:25:42.773, Speaker D: For instance, differentiation on archive nodes and not archive nodes. Prioritization of nodes defining backup nodes Connecting via tunnels to nodes while residing in intranet without public ip. This also shows how we are thinking about this component. On the left side we have users management. Users actually are any entity that make calls send calls to the RPC endpoints. So we have API keys. Each user is uniquely identified by its API key.
00:25:42.773 - 00:26:36.455, Speaker D: And this concept actually is similar to those that we can find in other RPC providers. Meaning that the API key is a part of access URL that can be used in dapps. Management consists of adding, removing and updating configuration of users Configuration. The configuration of users contains the limits, the limits of calls that can be processed by a single user and the limits of traffic volume for a user. These are simple quantities. For now, what we are planning to provide is quite obvious. Billing, payment methods, user front end.
00:26:36.455 - 00:27:15.761, Speaker D: Keeping in mind that it is particularly important to remain flexible. Yeah, and we want to use this infrastructure from Web3 user perspective. Let's do a basic thing and connect a wallet to a reverse proxy. And it's simple. Right here we have metamask. Metamask is also obviously just an example. You can use any other wallet as well.
00:27:15.761 - 00:28:16.433, Speaker D: It shouldn't be any difference. In the demonstration we create a new network. It's a copy of mainnet and only thing that matters. Then only thing that is specific for us is the RPC URL and this is the address of drivers proxy along with users API key and that's it. We can also connect web3pi nodes directly. It is just a matter of setting the right RPC URL in this place we can click save and use this and use our infrastructure in a web browser having this network. What next? Let's connect dapps.
00:28:16.433 - 00:29:38.007, Speaker D: We have a wallet connected, we can collect dapps. In this example we connect uniswap. We are not any particularly Related to Uniswap, you can try any other DAPP as well. The routine is quite obvious here. Ensure that metamask switch to the correct network, the Network linked to web3pry infrastructure and connect the wallet to the app when it is done, when everything is set up, we can perform some operations and in admin panel just to generate traffic, just to send some RPC calls. And in admin panel we can check that the usage stats increases so the whole round works and that's it too far. Another example Etterscan There is not much add here, there's not much to talk about here, just it is done and it's working.
00:29:38.007 - 00:30:32.085, Speaker D: But this is an occasion to tell about a possible change in dapps. What change it would be? Quite often DAPPS developers rent RPC endpoints from big and stable, very often centralized Ethereum RPC providers and developers provide these endpoints in their dapps. So DAPPS can run smoothly. And this is very often thing. The change in this paradigm would be to allow end users to choose the RPC they want to use within a DApp. Particularly they could choose Webshift PI Infrastructure. The key word here is trustlessness.
00:30:32.085 - 00:31:40.177, Speaker D: Of course there's other implications and there is a lot of space to discuss, but still the idea is valuable and worth to discuss in the future. Well, privacy, no privacy and that's it. This is another component. Let's switch to another component which is called Transactions Firewall Plant. A general purpose is to increase security. It acts as a proxy between a user and infrastructure and it intercepts transactions and enforce additional confirmation in case it detects some sensitive or suspicious transactions operations. It is still in very early development so far.
00:31:40.177 - 00:32:49.955, Speaker D: A primary scenario is as follows. First you need to configure and run the transactions firear. You can specify authorized addresses, you can specify known contracts, you can specify ABI here. And one of the configuration elements is the backend Ethereum RBC endpoint on front. The transactions firewall exposes its own RPC interface and acting as a proxy, as it should. Now a user sets the transactions firewall address in its wallet or a web page, or a script or a tool. Any client that is capable to send RPC calls and from that point every user's action goes through the transaction firewall.
00:32:49.955 - 00:33:39.785, Speaker D: A source of transaction doesn't matter. The transaction firewall may decide to ask for additional confirmation. And this is the example of such a situation. Well, we plan to integrate this tool with other components. There is some software around with similar functionality, but the point is that we want to keep it flexible, expandable, having in mind the whole our ecosystem to feed this in a bigger picture. And I will pass voice back to back to blue who will tell more about other components.
00:33:42.845 - 00:35:27.835, Speaker B: Well actually maybe not components, but use cases. So staking, if you ever thought about embarking on this exciting journey that is solo staking on the Ethereum Mainnet, we have I think wonderful news for you. It's perfectly possible to run not just one, but as many validators as you need on web3pi. And generally with solid staking you gain control, full control over your stake without relying on staking pools or on liquid staking services. And instead you stake your ether by yourself directly in a deposit contract and you use your own full node to control your stake to run your validators. And the best part of it is that not only we have provided the necessary setup on the device itself, but to confirm with through PI's readiness for this scenario, we were able to conduct some tests using an impressively high number of validators or all running on a single device on the Ethereum mainnet. And we are happy to tell you that the results we've seen are simply impressive.
00:35:27.835 - 00:36:23.181, Speaker B: So just a quick recap on how you would embark on staking with web3pi. So you start with a fully synced node, so we have to wait until your device syncs after it starts. Then you basically follow the launchpad. This is the official website that allows you to stake Ether on your own. Two steps are most important, the generation of your validator keys and using the Interface to deposit your 32 Ether into the deposit contract. Then there is a wait associated with the processing of the deposit by the Beacon chain. You can always check the status on the Beacon chain status website and it can take several hours for this to happen.
00:36:23.181 - 00:37:25.135, Speaker B: But in the meantime you can add your validator keys to Nimbus and you just restart the Nimbus service and you wait for the contract to process your deposit. But anyway, voila, you have your own staking node controlling your own Ether stake. As simple as that. Now I'll talk about for a moment to talk about the staking performance. So our researchers were able to conduct long running tests on the Ethereum Mainnet and were able to test the device with 200 validators. We think that likely many more are possible and it all runs on a single Raspberry PI 5 device. And the best thing is that there were basically no attestation loss, so you don't lose any either because of any issues with the device.
00:37:25.135 - 00:38:49.737, Speaker B: So yeah, while we perform our Tests, the CPU and network load remained moderate. The entire test setup consisting of the staking node running on Raspberry PI 5, the auxiliary helper node running on Raspberry PI also, which was running Lighthouse and was used for additional tuning of those tests. The metrics to be running on Raspberry PI 4, router and switch, all that takes less than 24 watts of power, so not too much and you gain your own full stacking node and some other components. This is the exact setup that we used, so if you want to reproduce it, you can verify that your device is up to par. And as you can see, this is the screen that Robert showed you earlier and this is the statistics for the device while it's running 100 validators. As you can see, the CPU load remains low because it's not even using one CPU core and so the device is just running normally. Also, the network traffic was moderate.
00:38:49.737 - 00:39:21.615, Speaker B: The peak was 200 megabits combined upload and download and maximum 1800 connections. So yeah, these are the statistics for the attestations. This is the data for 60 validators collected over 28 hours. 99.94% hits. Then we have data for 75 validators collected over 17 hours. Also 99.98%
00:39:21.615 - 00:40:01.133, Speaker B: of attestation hits. Some really negligible loss. And this is the most important bit of data. We were able to run 100 validators over 120 hours so far, and the attestation hit ratio is close to 100%. Still no issue for the device. And even better, we were able to run 200 validators over 31 hours so far. And the attestation is with a rounding error 100%.
00:40:01.133 - 00:41:10.495, Speaker B: So yeah, maybe there's still not a limit. As an interesting side note, while performing the mainnet staking tests, the device experienced an Internet downtime. And while the validators obviously lost their attestations during the event itself, after the return of the connectivity, the device was able to sync and to recover fully without any issues and was best while it was rebuilding. The load was very high, it was close to maximum, but still the attestation loss was negligible. So the conclusion here is. I'm going to quote a 2022 study by Adrian Sutton exploring ADH2 cost of adding validators. He in his research, he found out that the first 64 validators that you add to a node are quite expensive in terms of CPU usage and network traffic.
00:41:10.495 - 00:41:37.135, Speaker B: But if you can run 64 validators well, then you can likely run thousands of validators well, because you're already processing the bulk of attestations. So given that we believe that quite impressive number of validators is possible on a single web 3pi node. And now I will pass voice back to Jakub who will tell you about the next steps in our project.
00:41:38.435 - 00:42:45.393, Speaker A: Thank you, Blue. So let's talk about our roadmap. As you can see, we are in the POC phase at the moment, but we have really, really impressive future in front of us at this point. We have an old installer monitoring reverse proxy and admin panel build and tested including staking, as you can see and as Blue was talking about. And upcoming months you can see the next stages of our project, a tunnel and proxy will be done in upcoming months. In MVP version one, we want to improve our admin panel metamask integrations and we want to do some additional benchmarking. And then if you think about the next stage, MVP version two, we want to include public IP mapping services.
00:42:45.393 - 00:44:25.019, Speaker A: So basically you can manage your nodes. We want to also include additional hardware setup and configurations and recommendations of course, with the documentation etc. And then at the end of this year we plan to have a payment gateway in its MVP version and also of course the end user management. So if you think about these things that we have already talked about, like the admin panel and the things that Lucas was talking about, basically that was something that was done from the perspective of a node provider, if you run your own node at home or the office, whatever. But then if you think about end user management, you can create accounts for external users like your friends and others. And that will be also the payment gateway at the very, very beginning of 2025. So basically Q1 we want to launch the Web3pi platform, which is basically the entire full blown, let's say product with the end users, as I said, like staking public ip, all the features that we are going through, the entire roadmap developing them, we want to go to the market with that in 2025.
00:44:25.019 - 00:45:31.099, Speaker A: The exact date will be provided of course, but that's our let's say plan for 2025. So once again we have the P platform go to market and further funding. So if you want to join us, because we are the open source project, you can scan this QR code and we'll simply go to the web3, web3.5, GitHub and then you can also look at our website, web3piio and you can join our Discord. This is our QR code for Discord. And by the way, tomorrow at 2pm we are going to run DIY workshop and we are going to assemble. Everybody will have this opportunity to actually assemble.
00:45:31.099 - 00:46:02.665, Speaker A: Like set up the Raspberry PI from scratch with some welcome boxes and yeah, like, please go to the discord, write your name. You want to say that you want to join tomorrow workshop. The spots are limited. Please bring your laptop. All right. Because you are going to need it. And yeah, that's time for questions.
00:46:02.665 - 00:46:19.199, Speaker A: And I'm not probably able to answer all your questions, but my colleagues probably will. 100%. Obviously that one I can actually answer quickly. Yes, sir.
00:46:19.367 - 00:46:25.847, Speaker E: My question was about the distro. Actually, like, because you said that you are running an image just based.
00:46:25.951 - 00:46:29.315, Speaker A: Yes, if I remember correctly, the latest one. I mean.
00:46:31.815 - 00:46:55.005, Speaker E: Is there any reason for that? Because like, I know that actually many other, you know, like, images that much suitable to Raspberry PI, like for example, Diet PI is like quite, you know, resilient and also optimized for the Raspberry PI. Then you may gain a lot of, you know, performance there.
00:46:56.185 - 00:47:50.475, Speaker C: I think Ubuntu is very universal and everyone likes it. And ubuntu from version 2404 I think is quite suitable for Raspberry PI. And I think optimalized Ubuntu announced that it's ready to run on Raspberry PI products. I make some benchmarks between official Raspberry PI operating system and Ubuntu and the difference in performance was about 4 or 5%. Maybe in single task perform benchmarks there was a little bit bigger difference, but still it's 10 12% in a single single treat task. But in the multi treated task it's worth about 4 or 5% of difference.
00:47:50.975 - 00:48:00.885, Speaker E: Will it be possible to tune these configurations? For example, like if I want to run my Raspberry in different distros.
00:48:01.465 - 00:48:02.801, Speaker C: Could you repeat the last sentence?
00:48:02.873 - 00:48:12.165, Speaker E: Like, the question is basically like, do you have all these configurations and images open source? So I can tune and change the configuration?
00:48:12.665 - 00:48:33.885, Speaker C: Yeah, of course the whole project is open source. You can find it on our GitHub starting from the creating our image. You don't have downloaded our image. You can build it yourself. We have tools for that. Of course you can watch, see our code. Totally.
00:48:33.885 - 00:49:33.743, Speaker C: You can tweak properties parameters for GAV for consensus client. By the way, one of our optimization is to use Nimbus as a consensus client. And we found that GET plus Nimbus is a very good tandem for low resources devices. It's very stable solution and we prefer it, we recommend it, but you can use our Config file, maybe this is quite interesting thing for you. You can choose at the beginning when you write flasher SD card. For those which are familiar with Raspberry PI, there is a config file when you can set some parameters, we use that config and inject there our parameters. So from this, from this simple config file you can choose if you would like to use e.g.
00:49:33.743 - 00:50:00.375, Speaker C: lighthouse or Nimbus. You can choose on which network ports they will talk to the others and some other parameters. And then when you save it and put it on the Raspberry PI, the installator within right now seven minutes will configure, install everything for you and start the synchronization process. So yeah, you have full access to everything.
00:50:02.515 - 00:50:03.575, Speaker A: Other questions?
00:50:05.085 - 00:50:15.109, Speaker D: Previous version of Ubuntu we have some problems with previous version of Ubuntu, but the latest version of Ubuntu works like char. No problem.
00:50:15.197 - 00:50:21.545, Speaker A: Can you beg to slide with Ethereum staking? Because on your website I didn't find.
00:50:21.925 - 00:50:26.825, Speaker C: Yes, this is hot news and you are the first to hear that.
00:50:31.135 - 00:50:32.199, Speaker B: Configuration.
00:50:32.367 - 00:50:45.151, Speaker A: Yeah, yeah, yeah. Back more again. Yeah, configuration. Yeah, this one. One more. One more we can talk about later on if you want. Like I can give you.
00:50:45.151 - 00:50:46.315, Speaker A: Yeah, you want to make.
00:50:54.905 - 00:51:00.457, Speaker B: Good news for you. Tomorrow we will have workshops and we will go for this procedure.
00:51:00.561 - 00:51:25.885, Speaker A: Come to the workshop. Once again, we have a workshop at 2pm tomorrow. Everybody's invited, right? Then we can. Sorry. Yeah, so everybody's invited. Just come to the workshop and we'll like, first of all, as I said, assemble the device itself, right? Then we run the notes and then we go through all these blows and whistles and will play around with the software itself. Right.
00:51:26.045 - 00:51:50.137, Speaker B: Just one caveat is that the first point is you start with a fully synced node. So it's not really possible to start on the workshop with the staking because the synchronization process takes several hours. But we will show you how to do that on Cholesky Testnet and you can do the same on Mainnet if you wish.
00:51:50.321 - 00:51:55.885, Speaker A: But you will need 32 ethers, of course. One more question about it.
00:51:56.265 - 00:51:57.625, Speaker B: We will not give away.
00:51:57.785 - 00:52:07.833, Speaker A: Yeah, I can use Staking node and RPC on the same device.
00:52:07.889 - 00:52:08.525, Speaker B: Yes.
00:52:11.145 - 00:52:20.675, Speaker A: Why not? You can answer. Yeah. Any other question? Yeah, go ahead.
00:52:20.755 - 00:52:23.935, Speaker E: Are you thinking at all about other networks based on cat?
00:52:25.555 - 00:52:52.445, Speaker A: What do you mean by that? Not at this point. We are focusing on Ethereum at this point. First of all, we want to build the entire products itself like a platform. Focus on that. We Want to support Ethereum network, first of all, and the centralization of this network, which is really, really important for us. And there are some discussions but nothing written in stone at this point.
00:52:53.585 - 00:53:03.089, Speaker E: Check, check. When there's questions, can you just make sure to repeat it into the microphone? Because I want to capture it in the. We want to capture it in the short thing.
00:53:03.137 - 00:53:04.845, Speaker A: Yeah, yeah.
00:53:04.965 - 00:53:06.453, Speaker E: Anyone else here?
00:53:06.629 - 00:53:27.829, Speaker A: Yeah, take your mic. All right. Can you show a slide with these roadmaps? With the roadmap. Okay, yeah, let me look for that right now. We still here, not November 24th. September. There you go.
00:53:27.829 - 00:53:49.995, Speaker A: But I already that you have mvp, you know. Yeah, I mean we are in between. We are still testing some features that were already tested. There are some things that we are still improving. Right. What we are showing you right now, they are basically the POC stage of the maturity of software. Right.
00:53:49.995 - 00:54:23.229, Speaker A: But we want to get into the place where we are going to have this, all these features well tested and mature enough to go to the market itself. I don't know. Does that answer your question? Yes, but I want to understand your goal. Go to market. Market. What do you think how much it will be? Market, it's going to be huge. But maybe we don't have the numbers that I'm going to share with you at this point.
00:54:23.229 - 00:55:02.195, Speaker A: Right. But first of all, what we want to, what we want to actually address is the decentralization of the nodes, providers, ecosystem and that's our main focus at this point. I think that not so much people can buy raspberry deployment or not and bring to ecosystem, I think. But I ask you what you think. Maybe you think that everybody will do it. I don't think everybody will do it. And welcome decentralized world.
00:55:02.195 - 00:55:32.537, Speaker A: But everybody should do it. Yeah, exactly. Maybe not everybody will do it, but everybody should. And at the same point, at the same time, I think that, you know, there are certain benefits of running your own node. It's not about decentralization only. Right. If we go back to, you know, early stages of this presentation, there are a couple of numbers that you think about when you think about them.
00:55:32.537 - 00:56:18.891, Speaker A: Like hey, like I can run so much, like so many millions, let's say, of RPC calls per day without limitations. So like when you think about Web3 users, right? And technical, let's say Dapp developers, right? Or people that want to interact with the blockchain in a private way, in a way that they actually own the interaction, the way they interact. They don't want to rely on the centralized entities. These are our Target groups. This is the target group that actually we want to address. Thank you. Thank you.
00:56:19.083 - 00:56:22.335, Speaker E: All right, in the back.
00:56:23.115 - 00:56:24.095, Speaker A: Once again.
00:56:25.035 - 00:56:26.975, Speaker E: What's up, dog here?
00:56:29.605 - 00:56:30.837, Speaker C: So I guess if I buy a.
00:56:30.861 - 00:56:32.317, Speaker E: Bigger drive, I can easily put an.
00:56:32.341 - 00:56:40.997, Speaker A: Archive node on that pie. Archive node. Question to Robert.
00:56:41.141 - 00:56:48.225, Speaker C: I do not try this already, but I think it can be possible with a big enough drive.
00:56:53.925 - 00:57:18.255, Speaker E: I know you guys are. I don't know, like, how's your energy? Do you want to rap? Like, there's so much coming at you right now. If you can, please, just one more slide. Go back, please. I had to. I had to. Yeah, this is great.
00:57:18.255 - 00:57:19.103, Speaker E: This is great.
00:57:19.199 - 00:57:20.215, Speaker A: Please continue. If you want.
00:57:20.295 - 00:57:23.795, Speaker E: I'm happy to run around whoever. Like, please keep it going. Here you go, dude.
00:57:26.205 - 00:57:47.465, Speaker A: So I have a question about performance tests. You said 200 million requests per day. That's more than 2,000 a second. A very impressive number for home usage. But my question is, what hardware configuration did you use to reach these numbers? And what are the requests that you tested?
00:57:49.655 - 00:58:24.685, Speaker C: Okay, I can say about the hardware and my colleague will say about the test itself. The hardware is of course Raspberry PI 5 with 8 gigabyte memory and slight overclock. We usually use 2.8 GHz clock. We use NVMe Drive for the storage blockchain. Copy. And that's all.
00:58:24.685 - 00:58:29.449, Speaker C: This is a regular raspberry PI with 2 TB and VME storage.
00:58:29.577 - 00:58:31.817, Speaker B: And the client was running on another machine.
00:58:31.921 - 00:58:33.849, Speaker A: And you use the network interface, right?
00:58:33.937 - 00:58:39.685, Speaker C: Yeah, the client which makes text. Yes, it's on another device.
00:58:40.035 - 00:58:42.611, Speaker A: And one gigabit normal network interface.
00:58:42.643 - 00:58:43.215, Speaker C: Yes.
00:58:49.995 - 00:59:25.765, Speaker D: About the 200 millions, it was a peak, the highest value we achieved. And of course, everything depends on the setup of benchmark. Right. What is important important here with these 200 millions is that we use Keep Alive for connections. So each call were using previous connection. And the device did not have to create a new connection on operating system. That saved a lot of resources and a lot of time.
00:59:25.765 - 00:59:52.515, Speaker D: So it's a peak. And obviously not every call is the same, does not take the same time. We picked get logs of a benchmark and each call was asking for a different block just to avoid caching. Right. And that was the benchmark. This way we achieved 200 millions.
00:59:52.855 - 00:59:55.631, Speaker A: We have different setups here, Right? That we can talk about.
00:59:55.823 - 00:59:56.383, Speaker D: Yes.
00:59:56.479 - 00:59:59.915, Speaker A: So without Keep Alive, we drop to 3.5 million.
01:00:00.455 - 01:00:43.475, Speaker D: Yes, yes. If each call establish a new connection drops to 3.4 million. But if we put an interceptor between in terms of proxy, the performance increases. Why? Because proxy uses Keep alive by itself connecting to the node. So even if the benchmark tool is creating a new connection each time the proxy handles it and using keep alive connecting to with the device with the Raspberry PI.
01:00:43.855 - 01:01:07.959, Speaker A: Okay, thank you. So basically maybe a quick kind of a summary of that. Like Raspberry PI with no keep alive. That's not that number, which is not really impressive. But if you add the reverse proxy on top of it, you have 95 million. Right. So that's really impressive.
01:01:07.959 - 01:01:32.393, Speaker A: Anyway, of course I was talking about these numbers and I used the 200 as a peak number. Right. But that should be a stable number. We are still in the POC phase, so we are going to test it. Of course. Right. But these are the numbers that we are achieving in our performance test at this point of the.
01:01:32.393 - 01:01:40.325, Speaker A: Of the development stage of POC or MVP phase of this project. Any other question?
01:01:46.275 - 01:01:52.595, Speaker E: And 1. Going once, going twice. Sold to the pie man.
01:01:52.715 - 01:01:53.715, Speaker A: Yeah. Thank you, everybody.
