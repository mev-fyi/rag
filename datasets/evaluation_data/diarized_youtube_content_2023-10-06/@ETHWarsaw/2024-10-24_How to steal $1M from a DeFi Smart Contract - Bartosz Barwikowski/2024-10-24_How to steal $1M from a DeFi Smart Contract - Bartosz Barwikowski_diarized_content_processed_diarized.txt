00:00:02.800 - 00:00:29.531, Speaker A: Are you hackers or in cybersecurity? No. Okay, yeah, you are Perfect. Perfect. Sorry. Okay, so you know I'm gonna speak about dream of every hacker about finding a bug which allowed me to steal $1.1 million in 15 minutes in a smart contract. Of course I didn't steal them, but it was possible.
00:00:29.531 - 00:00:59.461, Speaker A: So I will be telling a story about this. But let me tell a little about me. I work for Haken, it's a cybersecurity security company from Ukraine. I'm mostly doing layer one protocol audits. I found during the last year, last two years, around 70 critical issues. And this presentation will be about one of them. But before we go to the issue and what happened, let me tell you how it started.
00:00:59.461 - 00:01:51.293, Speaker A: So the story starts very, very early. A year ago I had a very interesting audit of project called Radix. Radix is a layer one protocol, probably you don't know it. They asked me for an audit, I did three months audit for them, was able to find eight critical issues and then they went with another audit where they got 10 out of 10 score. All audits of the Radix are public. So you know, if you search for Radix engine audit hacken, you will find them so we can read them. And the important thing about Radix is that actually I like the solution, their platform, you know, their main goal was to make blockchain for defi which is user friendly.
00:01:51.293 - 00:02:36.724, Speaker A: So I liked the concept, I started using it, I checked the wallet, I was checking the ecosystem and was creating some tools for them. A year later in April 2024 I found very interesting decentralized application running in their ecosystem. It was called Weft Finance. It was a very simple lending platform where you can borrow and lend three assets. Nothing hard to code. But let me tell you why it was interesting. So it was very interesting because they were offering 82% returns when you lended them pound when you added liquidity.
00:02:36.724 - 00:03:23.307, Speaker A: This is a huge amount, 82%. You know, if I see value like this, it's either high risk or scam to me because you know, Normally anything above 20% is by default up. It would be amazing offer if it's not a scam or if it's not a high risk. So fortunately I do audits, I have some experience so I decided to check out is it legit offer or is it a scam? Because if it's legit, I'm going to invest a lot of money in this. Okay? So fortunately they had their source code available on a GitHub so I started to checking it. The code was huge, few thousand lines of code. You know, I had to spend few hours just to understand what's going on, how they work.
00:03:23.307 - 00:04:24.365, Speaker A: I was wondering, you know, they have pretty complex logic for a lending platform where you can only lend and borrow free assets. So in the end I decided to verify if all the assets they have on the platforms, all the loans and collateral, is it real or not? Because they can easily claim something else on the website, while on the blockchain is something else. So I decided to write a program for that which will just check every loan they have in the platform and if it's correct or not. So when it comes to checking the loan, we have both healthy and unhealthy loan. So in the loan you have collateral. This collateral needs to be discounted because you cannot use $10 to borrow $10 because it's too risky. So usually when you put $100, you can borrow other coins for $50.
00:04:24.365 - 00:05:17.715, Speaker A: And all you need to have is that your debt, the amount you borrowed must be always less than this collateral. If it's too high, like you have this debt to collateral ratio above 100%, then your loan is unhealthy and it needs to be liquidated. So basically the platform is taking your collateral and repaying debt by using this collateral. So I was basically checking if all the loans are healthy and there's enough collateral to pay for every loan in the system. So as I said, I created this program, I checked all the loans, I simulated it on the copy of my. Net database, basically cloned the database and was running my program against it. I verified everything and it was okay.
00:05:17.715 - 00:06:06.015, Speaker A: When it comes to all the loans, all the debt and all the collateral, the platform was legit. Of course there were other cases which I had to consider, like what will happen if the price changes a lot. But you know, they had very, very high margin of safety because they were discounting this collateral by 30 to 50%, even more. So the risk was low. So my assumption was that the platform is legit and this offer with 80% APR return is okay. And I was ready to invest in the platform. But when I was checking the source code, I noticed something very interesting.
00:06:06.015 - 00:06:40.403, Speaker A: Their project was very complex. As I said, you know, it was a simple landing platform, but the code page was huge. 2000 lines of the code and just like 20 tests very complex logic. So I was almost sure at this point there are going to be some issues, especially that I didn't see any outage of their platform. So I started to dig deeper and I was searching for some potential issue. And I quickly noticed that the most dangerous part of the smart contract is a liquidation process because it works like a flash loan. Okay.
00:06:40.403 - 00:07:22.495, Speaker A: So when someone has an unhealthy loan and the platform needs to take his money to pay for his debt, it has very complex logic because it works like this. First you get the collateral from the loan in end in the same transaction you need to repay the debt of the user. So it works like a flash loan where you get the money in the same transaction upfront, but later you need to repay them. This is usually very complex thing to code. It's very easy to make mistake with that. So I was almost sure at this point there's going to be some problem with that. Okay, let me show you on a diagram how it works.
00:07:22.495 - 00:08:15.145, Speaker A: So we have a loan which is unhealthy, there's too much debt. So the platform needs to take the user money and repay the debt. So it starts by getting $52 from the user in this case, then the platform can, then the user who's taking this collateral can do anything with this $52. But later in the same transaction it needs to repay the debt of the user. So yeah, the idea is that you can take this debt in token X, you can swap it to token egreg on some exchange and repay the debt. A logic where it's very easy to make a mistake. So I started to looking for a potential issues with that.
00:08:15.145 - 00:09:11.715, Speaker A: Okay. And I noticed one more very interesting thing which wasn't available on the website, but they had this logic in a smart contract which was a delegated loans. So basically you can have a single collateral which you can use to have multiple loans. So for example, you put $100 as a collateral and by using it you can have three different loans. Yeah, and the idea is that you can just have that. You can have like sub users or your friends to whom you can borrow, who can borrow from you, stuff like that. But of course if debt of all the smaller loans is higher than the collateral, then you start the platform needs to liquidate the delegator.
00:09:11.715 - 00:10:03.903, Speaker A: And when I was checking how the delegate is created, it works like this. First you create a normal loan, the loan is represented by nft. Basically you want to take a loan, you get an nft, all the data is stored in an nft. So when you wanted to create nft, which allowed you to use the collateral of the delegator. So basically take a loan by using the other loan assets, I Know, I know it's pretty hard. But later we'll show you on telegrams they were checking for the following things. The requirement was that this NFT which you wanted to convert to this different type of NFT has to be fresh.
00:10:03.903 - 00:10:56.895, Speaker A: So in this case it wasn't allowed to have any collateral. And by that it also didn't allow to have end alone. So they were basically validating if this NFT is fresh or not. But there was edge case in this creation. As I said, they were only checking for existing collateral, but they didn't check if there's any debt in this loan which they're trying to convert for link with the delegator. And that's something that could be abused. So what should happen when you have delegator and delegate and you want to add another delegate who already has a deb? In this case it's this delegate to on the right side.
00:10:56.895 - 00:11:27.331, Speaker A: Yeah, it's also right side for you. Okay. So in general, when the new delegate is added and he already has a debt, then the value of debt to collateral and debt for the delegator should be increased. So we started with $10 debt, we added $20 debt from delegate two. So we ended up with $30 of collateral. So this is how it should work. However, it's not how it worked in a practice.
00:11:27.331 - 00:12:16.711, Speaker A: There was an issue with that when I was trying to link a delegate who already had a debt this $20, then this value wouldn't be added to a delegator. So we would end up with still $10 and 20% debt collateral for a delegator. So that's an issue, but it's not a critical issue at this point. Actually we cannot abuse that because it doesn't allow us to do anything. Okay. We were able to link this new delegate with a depth to a delegator, but it doesn't allow us to basically do anything at this point. It doesn't allow us to take the more depth because delegate 2 already had the depth.
00:12:16.711 - 00:13:12.955, Speaker A: So it's not a critical issue. But fortunately or unfortunately there will be ways to abuse it by using other issues. Okay, but the question is, is it even possible to create a loan with no collateral? Because how would you do it? So if you take a $50 loans, you need to have $100 of collateral. So it's close to impossible to actually create such loan where you only have a debt and no collateral. I mean the price will need to change by a lot of the price of the token would be change by like 100% which is actually impossible. And to be honest, the assumption was right that technically it was not possible to create a loan with only debt and no collateral. However, here comes the complicated logic with the flash loan.
00:13:12.955 - 00:14:10.199, Speaker A: Yeah, so when the loan was about to be liquidated because there was more debt than discounted collateral, as I said, it first started by removing the user collateral. So in the first step, we take this, in this case, 52 collateral from the loan. So we ended with the smaller discounted collateral and then we repay it later. So there is actually a way to lower this collateral amount without changing a debt. But as you can see in this diagram, we are only able to take small portion of this. It's not like we can take all collateral from the loan because we cannot take more than the debt is, and the debt is usually two times lower than the collateral. So it's a good starting point.
00:14:10.199 - 00:14:44.325, Speaker A: But what we want is get the collateral to zero, which we cannot do with this approach. However, there will be another issue which will allow us to do it. Yeah, okay. In the liquidation process, there's another bug which I quickly notice. And the bug allowed to start liquidation of the same loan multiple times. So this is how it looked like when the loan was unhealthy. We started the liquidation.
00:14:44.325 - 00:15:41.219, Speaker A: Then we're able to start liquidation of the same loan, second time taking all the collateral we just left. Normally it shouldn't be allowed because it's like taking flash loan inside the flash loan. So it's like reentry back. But in this case, they were thinking that's okay because even if I start this liquidation twice, the transaction will fail because first I will take this $100 collateral. But then when I will be trying to repay a debt which is $100 by the system, then the transaction will fail because the loan had only $52 of debt. And I was trying to repay $100 of debt which doesn't exist. So they were thinking, or maybe not, that such scenario, even if possible, cannot be abused.
00:15:41.219 - 00:16:39.485, Speaker A: Because they were right. By only using this, it was not possible to abuse it. But what we managed to achieve is having collateral equal 00. So if we can create a transaction which is starting this liquidation twice, we can at this point convert this loan with only debt and no collateral to loan which is linked to another collateral, which is just becoming a delegate. I really wonder that, you know, the connection when it comes to diagrams works differently when I present when I'm making a presentation, right. It's changing how it works. Is it because the resolution.
00:16:39.485 - 00:17:13.855, Speaker A: Okay, never mind. Okay, so here's how we could abuse this double liquidation with linking it to delegate. First we have a loan which is unhealthy. We start double liquidation of the loan. So we take all the collateral. There's only loan with a debt. Then we can link this loan to a delegator, because as I said, this linking is only checking that collateral is empty, which shouldn't be possible to have such loan, but in this case it's possible.
00:17:13.855 - 00:17:51.935, Speaker A: Then we can link this loan and later after linking, we need to repay this $100 of debt because otherwise transaction will fail. And in this case, even if we tried something like this, the transaction would still fail because we didn't repay this debt. I mean, we tried to repay more when we had to. Yeah, amazing graphs. Okay. But you know, it's easy to follow. You know, it's going right to right to right.
00:17:51.935 - 00:18:22.509, Speaker A: Next time I will just use images. Okay. So there's a way to make it work. So we start with the same liquidation. So first we start the liquidation twice, we lower collateral to zero. Then we link this loan, a delegator, and then we take another $50 of loan for the same delegate. So now we can take the loan.
00:18:22.509 - 00:19:22.943, Speaker A: Because when we link this loan with no collateral to a delegator, delegator could have more collateral, like let's say $500. So it allows us to take new loans for this delegate number one, which we just created. So the idea is that we take $50 of more debt and now when we try to repay $100, which we need to repay from this double liquidation, we can actually do it. So we managed to create a transaction which actually worked and allowed us to link a loan which has no collateral, but only debt to a delegator. Yeah, pretty complex scenario, but we managed to do it. And actually what does it accomplish? We'll see in a second where the issue is with that. Yeah.
00:19:22.943 - 00:19:51.915, Speaker A: Some quick summary of the process. Starting double liquidation, linking to the legator, taking more depth, and then repaying all the debt. So everything sums to zero. Okay. And the thing is, here's the summary of the delegator. What is happening during the process. First, when we start, let's say we start with an example delegator.
00:19:51.915 - 00:21:01.467, Speaker A: This delegator have $400 collateral, 200 discounted collateral, and at this point it has 100 debt. So it's using like 50% debt to collateral. When we link, when we start the liquidation and we link a new loan, this one with $50 debt, it's being, it's linked to a Delegator but the sum of the debt and debt to the collateral is not updated. It stays like this. Then when we take 50 more dollars of the debt, delegator is updated because taking more collateral works correctly, we end up with 75% debt to collateral ratio. And in the last step, where actually the issue is when we repay right now this $100 of a debt then all $100 is removed from from the sum of the debt of a delegator. So at this point we are able to remove that $50 of the debt from the delegator lowering the debt to collateral value.
00:21:01.467 - 00:21:53.735, Speaker A: But as you can see, the real debt which was at the beginning, $100 is still existing because we didn't repay any debt of the delegate one. So we managed to actually lower the debt by $50. And this is where exploit is. By repeating the same scenario we can abuse it many, many and many times and always lower this depth of the delegator. I know it's a pretty complex, probably hard to understand but later I will be posting more detailed article on on a hacken website. So you know his story is interesting and you want to know it in details, it will be available. Okay, so I had the idea and I started to code exploit which wasn't so simple.
00:21:53.735 - 00:22:25.525, Speaker A: Okay, so I spent like 30 hours. It was you know, the beginning of the May, so everyone has having was having vacations at least in foam. I don't know how it works in other countries. And I was spending that time to code the exploit. It took much longer than expected. I had to spend like 30 hours and code 1000 lines. 1000 lines? Yeah, because I ended up with doing a lot of transactions.
00:22:25.525 - 00:22:59.617, Speaker A: I had to do like 1000 transactions to execute the exploit. When I finished coding it, I run it. Of course I was running it against copy of the mainnet which I had locally. The exploit was running around 15 minutes. That's why the presentation title is obviously $1,000,000 in 15 minutes. It was doing like four transactions per second. Sometimes it had to wait for like 10 seconds to to let the platform update its data.
00:22:59.617 - 00:23:29.596, Speaker A: So it was running and running. Of course we are not going to wait 15 minutes for it to finish. We'll just skip to the final results of the exploit. And it was able to extract everything from the platform. Yeah, after running this 15 minutes. So it took 15 minutes to extract take everything from the platform with that exploit. With 1,000 transactions and $1.1
00:23:29.596 - 00:24:02.735, Speaker A: million in total. Okay, so what happened next? When I only noticed that there's this issue first thing I did, I contacted the platform on a telegram and I asked them about the bug bounty. Yeah, classic approach. And they were fine with this. We negotiated an agreement what we going to do if I find an issue and I can prove it. And at this point I started to coding the exploit. It took me two days to finish everything.
00:24:02.735 - 00:24:49.843, Speaker A: When I had it ready, I contacted them again. I said that hey, I found a critical issue and I have a proof. I send the code and tell them how to run it locally so they can verify everything they did. In a few hours they confirmed that I'm right. And they were quite impressed with how by abusing the small issues, I managed to create a critical issue and was able to steal everything from them. They fulfilled their side of that agreement, they fixed all the bugs which I shared with them. And after all the bugs were fixed, I invested $11,500 on their platform because they were offering 80% returns.
00:24:49.843 - 00:25:13.815, Speaker A: So it was still a pretty good deal. All I had to do is fix the issues. And yeah, it was actually amazing deal. I made a few thousand dollars on that during the last few months because it was in May. Okay, but what would happen in worst case scenario? So let's say someone else found the issue and decided to steal everything. So $1.1 million would be stolen.
00:25:13.815 - 00:25:53.645, Speaker A: The weft, the company, the small startup which was hiring seven people will go bankrupt and they would have a lot of. They would have a lot of troubles. Their token, which was worth around $2 million when it comes to total market cap would drop to zero. Probably the Radix, it would be the first hack in Radix DLT ecosystem. So it would also affect them a lot. And I expect that their token would also go down by a lot, especially that the most of the assets were in their token. So the hacker would need to swap it to some stable coin if you wanted to steal it.
00:25:53.645 - 00:26:43.709, Speaker A: So the total damages would be huge. But fortunately it didn't happen. Okay, so for the end of presentation, how to prevent such issues? First thing, don't keep features in a smart contract which you are not using. Yeah, I mean they had this delegation process which they were not even using but was still available for me to abuse. This was very surprising to have such complex logic and not even using them. Another thing is keep your smart contracts as simple as possible. If you have some complex feature like Flash loan and you don't have much experience with that, then just don't dodge it because it's so risky and potential gains are very, very low.
00:26:43.709 - 00:27:29.125, Speaker A: So it's not worth to add such complexity for this few percent extra gain. We have a lot of tests, that's for sure. This is the first thing which tells me about the project quality. So if I see a huge complex project and 20 tests, then I'm sure that there will be some issues. So, you know, if you ever go for an audit, always have tests because that's the most important thing. Have an audit? Yeah, I mean if they did an audit even with different companies from a fact, and probably with most of the companies, someone would be able to notice those issues pretty quickly because they were very easy to spot. I've seen them after just two hours of just checking the code.
00:27:29.125 - 00:28:14.801, Speaker A: And the last thing which I recommend is having a bug bounty plot program which are pretty popular for web3. There are many payouts for more than $1 million when it comes to bug bounties and there are many interesting platforms to have it listed on. And there's also important thing for the new ecosystem. So the Radix, which you probably don't know, was a new blockchain, it was a new ecosystem. They just launched a platform last year. And the problem is that even if your platform, your technology and everything is amazing, the people, the clients which are using it, they can make mistakes. And it's not your fault that they are making a mistakes.
00:28:14.801 - 00:29:28.495, Speaker A: But if on your platform your clients will be hacked for $1 million, then it will also affect you. So it's also very important to monitor what's going on in your ecosystem and somehow cooperate with these projects to make sure they go for the audits. Or in the worst case have some bug bounty program for entire ecosystem so the hacker finds a project in your ecosystem and he can hack some other project. In the worst case it should go to you, to the owner of the ecosystem of the blockchain platform because paying a bug bounty for him will be still much better than letting this other project get hacked or something like that because the damage for the entire ecosystem will be huge. Okay, that's it for today. So I will be later posting the whole story on the blog with more details where you can read it and try to understand it in more details. So if you want to see it then follow me on Twitter or Czech hacken website.
00:29:28.495 - 00:29:40.525, Speaker A: I will be posting the story within a few days and if you have any questions or you are interested in the topic, feel free to catch me and let's talk about it. I can explain everything after the presentation in detail. Thank you.
