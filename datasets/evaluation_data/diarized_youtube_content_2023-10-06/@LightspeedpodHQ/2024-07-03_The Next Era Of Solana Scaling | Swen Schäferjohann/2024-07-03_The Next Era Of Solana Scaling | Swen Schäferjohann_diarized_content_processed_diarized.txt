00:00:00.400 - 00:00:29.984, Speaker A: Anything that wants to scale on Solana on the l one eventually will hit limits or constraints when they use just like pure on chase for everything. You have apps like Drip, but also protocols like, you know, Helium Hivemepper who want to serve a lot of users and they don't want to build their own, you know, I don't know, l two, l three, or whatever. They want to use the l one compression is a great, great way to do that, right? So to go on the l one and benefit from the l one while still scaling to a lot of users.
00:00:30.112 - 00:00:59.550, Speaker B: This episode is brought to you by Helium Mobile. They've created a crypto native phone plan for unlimited talk, text and data for just $20 a month. We'll chat more about them later in the show. Before we get moving on today's episode, just a quick disclaimer. The views expressed on this podcast by either myself, my co host, or any guests are their personal views and do not represent the views of any associated organization. Nothing in the episode should be construed or relied upon as financial, technical, tax, legal, or any other advice. Okay, let's jump into the episode.
00:00:59.550 - 00:01:27.108, Speaker B: All right, everyone, welcome back to another episode of Lightspeed. Merton and I are joined today by Swen from Light Protocol. Swen, thanks for coming on. You guys recently released ZK compression. It was actually seven days ago to the day. We're recording this on the 28 June, and it was the talk of the town. Some people were arguing over semantics, as we love to do in this industry.
00:01:27.108 - 00:01:53.062, Speaker B: Well, a whole nother cohort of people were excited about this and what it enables to build. So I want to jump into ZK compression and talk about what it is, what led you to building it, and ultimately some potential use case unlocks for this technology. Before we do all that, I think a good starting point here is just going to be your background and what led you to building light protocol and ultimately what the purpose of a light protocol is.
00:01:53.236 - 00:02:25.738, Speaker A: Start pretty long time ago, summer 2021. My now co founder, his name is Joe, and at that time he was working on this sort of like site project of his. He just finished his master thesis back then. He wrote it on private voting using the blockchain. And so he found Solana in the process of that, and he was like, oh, this is cheap. Actually much cheaper than ethereum, so you could actually build private voting on Solana. So that was the whole starting point of this.
00:02:25.738 - 00:03:21.856, Speaker A: And so starting with privacy, and it always had this element of ZK. It was just the sort of like natural interest of my co founder, who, by the way, he's, you know, we've been long time friends since childhood, so it's like just very natural progression there. When he, we met up in building 21 and chatting about stuff, and he was like, oh, I'm working on this thing. It's on Solana. Do you want to help me out writing some rust code? And I was like, sure, why not? My personal background was, for a couple of years before that, just been working on different companies, projects, and it was all in that too. So, like, trying to sell SaaS to small, medium sized businesses in Berlin, so very different space. And I was like, sure, why the hell not? This sounds super interesting.
00:03:21.856 - 00:04:10.700, Speaker A: Solana was pretty hot at that time, actually, summer 21. And so we worked on this thing and we got pre seed funding. We're like, okay, let's do this full time. Let's build the first ZK verification on Solana on chain. Solana didn't have any of that before early 2022, when we released this thing on Devnet and later Mainnet, I think that was April 2022. And the whole thesis here was that Solana wants to reach mainstream adoption, this typical thing, and then you need privacy. If you do payments on chain, there's no way you are not going to have any encryption whatsoever.
00:04:10.700 - 00:05:04.296, Speaker A: So it was like this super like, left curve thesis in a way, because we were like, okay, this obviously has to be true. And I like, if Solana is good enough in scaling to the masses, this is obviously the place to build it compared to any of these other chains where first have to sort of build scaling first. And I'll come back to that because sort of like full circle now with ZK compression, which is more of a scaling solution for Solana. And we built the first ZK verification and growth, 16 proofs, snarks on chain in a pretty primitive way, and just improved on that. And then fast forward. During the bear market, we sort of focused on. So basically what we said was, okay, so there's a bear market, users are gone, liquidity is gone, there's nothing really much happening.
00:05:04.296 - 00:05:35.240, Speaker A: So just ran through the bear and build cool things. And that, again was pretty much like the left curve pieces of ours. Is that okay? It's going to be cool. It's build cool stuff. It will be important in the future. And what we said was, actually, we figured out a couple of things with regards to privacy in the process of shipping the first version, second version, and that was that. Privacy is incredibly hard to solve on a blockchain.
00:05:35.240 - 00:06:07.670, Speaker A: Not so much technically like, you can come up with different solutions. Blockchains have done it before. Z cash has done it before, Monero has done it before. But what's much more important with any product, probably, I think would agree with me, there is distribution. You have to find a way to get to customer. And usually the best way to do it is do something like build a product that users want. And so with privacy, privacy, the problem is it's very intangible.
00:06:07.670 - 00:07:02.540, Speaker A: People sort of need it, but they're not really aware of it. And you do have like a small group of people who are actually very aware that they need it, but they're not necessarily the best customers just because they're a small group or they want to be private. So you're not really, you have no real chance to talk to them because they're not, you know, they're not out there in the open. So there's a couple of really hard problems and headwinds that you get when you want to build for privacy, especially so on the blockchain, which is like this very constrained environment to build anything. And so, fast forward to end of 2023, actually, I'll give it a little bit more context, which is like we said, okay, so let's make ZK verification on Solana really, really powerful, really efficient. So we built a bunch of syscalls in Jisal on a runtime. Took a long time.
00:07:02.540 - 00:08:06.650, Speaker A: We started that process in 2022, and now the last syscalls are going live on Mainnet. So it's been this process of working on fundamental primitives that will later enable us to use CK, which is like, again, thesis was like, CK is really important. Privacy is really important. Let's make sure that Solana is sort of in a really good position now and in the future to support these sort of problem sets and us to solve them. And yeah, in 2023, what we had built then was this private smart contract execution thing, which is pretty cool, actually, because encryption, but it's also generalized VM in a sense, where you do have this sort of notion of stateless verification. So you have some state transition function that is in an off chain environment. In our case, it's like, for instance, a private token transfer, or a private order book or escrow or whatnot.
00:08:06.650 - 00:08:39.370, Speaker A: And you just verify that on chain. And then you apply to state changes onto the ledger. The state changes are encrypted, and then the user fetches the state changes from the ledger. And there's a new transaction, decrypts them. There's a new transaction with other users. This thing, what we had built was ironically something that looks very similar to now ZK compression. And I'll get to that, but inherently was for private state transitions.
00:08:39.370 - 00:09:33.034, Speaker A: And then at the end of 2023, I chatted a bit with Noah from helium, head of protocol engineering there. And he was like, this is really cool. I like the sort of, you know what we could use privacy for voting, etcetera. But actually he was like, what I need, I need cheaper state. And like, sole price had just like this nice run up, and people started complaining about the price of state just being more expensive on sole now and getting more expensive over time. Obviously, as Sol goes up and we had this epiphany, in a little bit, we were like, okay, so no one wants to use our tech, but for something else that we had not really thought about and intended it for. And I think in that process, we talked to a couple other people.
00:09:33.034 - 00:10:24.420, Speaker A: We figured out that Solana foundation was also interested in seeing the ecosystem build a solution for better state compression, which is essentially what CK compression does. And then we chatted with the guys at Helios and his team and had a pretty quick pivot at that time where we were like, okay, let's drop the zero knowledge private transactions part and just focus on the very raw core of that, which is just stateless verification of state using very simple, small, zero knowledge proofs, validity proofs, if you will. And that's what ZK compression is. That's what we've been shipping for the last five, six months, I think. And just as you said last week, Friday we announced that on Tesla, decentralized.
00:10:24.460 - 00:10:58.052, Speaker B: Physical infrastructure networks are a massive point of emphasis in the crypto industry today. And Helium mobile is a fantastic example of a business that is leveraging this distribution approach. Like any network, there's a supply and a demand side. So the supply comes from hotspot deployers, while the demand comes from phone plan subscribers. Together they create and power decentralized wireless network that provides expanded connectivity and amazingly priced phone plans. But let's zoom in on how it works for deployers. So you get this device and you set up this hotspot, and anytime a helium mobile phone user is near your device, they will send and receive data through the Internet using your device instead of their cellular network.
00:10:58.052 - 00:11:37.404, Speaker B: The cool thing here is that you earn mobile token rewards for providing this service based on the amount of data routed by your device and how much coverage you're creating. There's also what are called boosted location, which are directing rewards to the targeted areas that actually help individuals and businesses deploy these devices in the proper areas where coverage is actually needed. Based on where subscribers are currently. That's in LA and Miami, but soon to be coming to New York City again. By creating coverage, you're helping build a better network together while earning mobile token rewards. If providing the service is, is something that's up your alley, head over to hellohelium.com hotspot to get 15% off your indoor or outdoor helium mobile hotspot using the code lightspeed hotspot.
00:11:37.404 - 00:11:42.668, Speaker B: That is all caps, no space lightspeed hotspot. And we'll be sure to put that link in the show notes.
00:11:42.804 - 00:12:39.794, Speaker C: Yeah, that's great context. I'll actually provide some more context from maybe the other side of this, which is that. So about a year ago, maybe over that now, actually, there was NFT compression that was released. And at the time it was very hand wavy, I want to say. And it was kind of just this project where Austin, who was at Metaplex, but then now is at anagram, he had built like this proof of concept reference implementation along with Solana foundation. And at first we were trying to solve the problem of like, how do you mint so many nfts at scale? And it turned out that helium would migrate and that they actually needed this for launch. And then I saw that, or Lakele saw that, and then we looked kind of at the market.
00:12:39.794 - 00:13:05.294, Speaker C: It was still pretty unproven. And I just pulled aside Nick, who was my co founder, and I was like, okay, just stop everything you're doing and focus only on shipping NFT compression to mainnet along with, like, everybody else on the project. And then, so we, like, hustled super hard to get that live. And then Helios was able, or, fuck, helium was able to migrate and clip it.
00:13:05.342 - 00:13:06.450, Speaker B: That was beautiful.
00:13:07.990 - 00:13:44.932, Speaker C: And a bunch of teams and whatnot followed on after. But then we noticed, like, wait a minute, this is only on nfts right now, but it should actually be, because, like, everybody was having the same problem with state costs. It should actually probably be generalized. And we were going to do that, and then we were like, and then it starts to get super complex, actually, when you start getting into, like, PDA's and kind of Solana specific nuances. And at the same time Solana found it. We're talking to John Wong, and he also had the same thoughts. And he, I think, put out, like, a request and we were going to submit to it.
00:13:44.932 - 00:14:11.448, Speaker C: And then we were like, wait a minute. Light is also submitting into it, and they're much better at this. So we should just kind of combine forces here, and then they can do the stuff we're not good at, and then we can just do what we're good at, which is infra. And so, yeah, I guess that was, like, roughly six months ago. We actually, I think both the teams shipped pretty fast on this. So, yeah, that's kind of the additional context that it kind of, like, evolved from NFT compression. And then we.
00:14:11.448 - 00:14:35.520, Speaker C: And because NFT compression is used by a lot of teams today, like drip, for example, use the millions of NFTs. Okay, so with that context set, I guess, let's. Do you want to swen, just describe maybe on two levels, one on a non technical level and one on a technical level, let's say, for researchers or developers, how compression actually works?
00:14:37.540 - 00:15:16.290, Speaker A: Yeah, sure. Okay, I'll start with compression, and then I'll elaborate a little bit on the ZK part of it in the naming. So, on the high level, it's really what you're doing. When you're building an application on Solana and your developer and you want to compress your state, you basically shrink or compress many account states into one. And I'll give context on what an account is. In Solana, it's just like a bucket of state. And in Solana, basically, everything is an account.
00:15:16.290 - 00:16:20.750, Speaker A: And you can think of them as these buckets of state, which is just bytes, and these buckets have ownership and land ports attached to them. When you use compression, essentially what it does, it just compresses many of these different accounts into one. It does that by basically taking this long string of many accounts and account states and hashes them recursively, the different parts together, so that in the end, you have a very small string, in fact, just like 32 bytes, which is called sort of a state route. And you place any on chain account, and then you can basically put this long string of accounts somewhere else. You don't have to store it in the on chain account. You can, for instance, store it on the Solana ledger, which is just the ledger space is much cheaper than the on chain space. And on the technical level, you know, merkle trees are pretty cool.
00:16:20.750 - 00:17:00.386, Speaker A: And you can use binary merkle trees to get to this hashing structure that I just described. And then you store the root on chain, you store the actual underlying account state on the ledger. And then when you do a transaction, you just specify which accounts you want to read or write to, and you send them on chain. In your transaction, you need to somehow prove that the underlying account state corresponds to this root hash that is on chain. And that's essentially what you have to prove. And then you can go ahead and apply your custom state transition function in your program. So that's essentially, I guess, the TL.
00:17:00.418 - 00:17:13.470, Speaker B: Doctor, one of the pieces I want to unpack there is the idea that state is more expensive than the ledger space. Can you elaborate on why that is?
00:17:14.980 - 00:18:15.790, Speaker A: Yeah, for sure. So, on Solana, each validator has to load the different accounts into what you say ROM, which is just more expensive, fast access space, whereas the ledger and mer probably knows more about this. But the ledger is, as far as I know, not necessarily. The validator doesn't really have to keep track of the whole ledger, whereas they need to with the current account states. So that's basically it. What the ledger history basically is, it's just a place where it can be stored in a postgres database, but it basically makes sure that the state has been published on chain, in some chain transaction. When it's being emitted, it's emitted onto the ledger history through some locks or whatnot.
00:18:16.690 - 00:18:56.872, Speaker C: I can maybe follow on that. So just to sum it all up, on Solana, unlike Ethereum, the data capsules, like where you store data. So, for example, your name, let's say, is different than the contract itself. These are decoupled. And so if you want to, let's say, mint 10,000 of t's, what you need to do is you need to tell Solana, allocate me 10,000 different accounts. But obviously, you need to pay for those accounts because they are stored by the validator. And if there weren't a good enough cost for it, you could just allocate billions of accounts and overload the validators.
00:18:56.872 - 00:19:51.630, Speaker C: And so there needs to be a cost to it, which is called rent. And the accounts are super important because that's where the state is stored. And essentially, Solana's only job is to ensure that state n maps to state n plus one, right? It's a state machine. You just go from state, and then you have to ensure the validity of that state. You do not need the ledger, which is, maybe you can colloquially refer to it as transaction history, plus historical blocks for the state transition rights, because there's a hash, and people have already voted on that. And so all the validator actually needs is the current state of everything, which is all in accounts, which is why it's more expensive. So on a Solana node, the transaction history is stored on the validators, let's say fast memory, for up to two or three epochs, which could be up to, like three days.
00:19:51.630 - 00:20:22.220, Speaker C: And once that happens, it gets pruned, and then it gets sent to an archival node. And then the archival nodes are what keep track of the state. So it's actually quite similar to Ethereum in that sense. Right, because Ethereum has the call data, which you don't get all of that unless the entire thing is an archival node. So that's. And obviously, since not every single value store the archival nodes, then you don't have to pay as much for the replication factor.
00:20:23.960 - 00:20:49.280, Speaker B: Okay. And to try to make a parallel here, which I completely understand that it's not always possible, so please do correct me if this doesn't make sense, but if I tried to make a parallel to Ethereum, is the idea, the idea that storing the transaction data, if you will, or that's more like the state data storing that in the ledger, is that comparable to storing data as call data in an ethereum transaction? Is it similar there?
00:20:52.380 - 00:20:59.480, Speaker A: Yeah, I mean, I've never really programmed on Ethereum, but, yeah, from my understanding, that is what it is.
00:21:00.190 - 00:21:35.776, Speaker C: Yeah, it's just about identical. I mean, I also don't know the very, very specific nuances. But for example, on Ethereum, right, if you want to get all the token holdings for an address on Ethereum, there is no actual RPC call that exposes that. What you need to do is you need to go back in history since Genesis, which you need archival node for, and then accumulate that state. Hence why it's called a stateless accumulator, right? Because that is exactly what you're also doing on Solana. You're going through the ledger and then the indexers. For example, what we released with light and ZK, it's the photon indexer.
00:21:35.776 - 00:21:41.500, Speaker C: And all it does is it watches the ledger accumulates that state and then exposes it in a single call.
00:21:42.960 - 00:22:23.358, Speaker B: That makes a ton of sense. Okay. And so if I was to, like, try to tldr this, you know, the last five to ten minutes of this discussion, it's basically, on Solana, pretty much any piece of state is going to get its own account or its own address. Because of that, the validators actually have to store this account list in every active account in their ram or their fast access memory. That costs money to the validator, and therefore it's passed back to the user to try to limit the amount of state load in the form of rent. There's a minimum deposit, I don't know the number off the top of my head, to actually have an active piece of state or an active account. So for, I guess a simple example of this is like a token, let's say the JTO token.
00:22:23.358 - 00:23:17.054, Speaker B: If I were to purchase tokens, I would get a program derived account or a PDA from the JTO token contract that is like my ownership of that token, for example. And so it's not just like, that's a little bit different than ethereum. So I just kind of wanted to highlight that difference. And because of this idea, you can enable unique unlocks on Solana, such as parallelization, for example. And so I think that's important context to the listener just to understand Solana has a different construction than Ethereum, and because of that, state gets expensive. And so it's really interesting to see, Swen, your pivot of saying, okay, privacy was the priority, but then in that journey, you kind of notice that state is expensive and there's people hitting these limits. And if we can find a way to simplify that, there feels like a material unlock here.
00:23:17.054 - 00:23:33.370, Speaker B: But before we jump into the unlocks, I wanted to expand on, I think the indexer was called photon, selfishly, from a data analyst point of view, how easy is it to interact with this new indexer, if you will?
00:23:34.190 - 00:24:01.082, Speaker C: Yeah, we made sure that running it locally was a very high priority. So you can run it locally on your own. And the DevOps and all that is all taken care of for you. You'll need access to a geyser node, which again is like $300 per month from like a terror switch or latitude. And then that's pretty much it. And then obviously, since you know people, that's nice to have, and. Cause you can run your own node, whatever.
00:24:01.082 - 00:24:30.808, Speaker C: And by the way, it doesn't, you know, people will call it the hardware cost, but like these nodes. So there's multiple types of nodes on Solana, but these are the ones that don't have to vote. And so you don't have to worry about like validated profitability or voting costs and all that. It's just a node that watches the chain and then just has that state. And so you just couple that with this. It's an open source repo, and then you can kind of get up and running. And then obviously we have a hosted version where, similar to NFT compression, it's called the Das API digital asset standard.
00:24:30.808 - 00:24:41.690, Speaker C: Wherever I. We perform a lot of optimizations for different types of queries, complex joins, you know, enhancements with metadata and all that stuff for like something a bit more premium and enterprise ready.
00:24:42.830 - 00:24:43.142, Speaker A: So.
00:24:43.166 - 00:25:53.870, Speaker C: Yeah, and then kind of going back to the actual estate thing. One of the reasons this is important is until I referenced this in my kind of launch tweet, which was kind of Tolies screenshot, which he's like, if this works, it'll change the fabric of the universe. And one of the reasons is because what you can do, I mean, this is an idea, it's not really fleshed out, is, I think, something like, I'm not sure if it's 70 or 80% of Solana state is actually cold, meaning it's not actually accessed very often, because certain programs like Jupyter, for example, are obviously hotspots. But not everything that's being stored by validators is necessarily accessed too much. And so what you can do is you can actually compress the state that is cold, which is the majority of it, and then maybe decompress on demand if you even have to. Or maybe you kind of just use this primitive. And so what that means is you can actually make pretty, it's a good proof of concept for later work on Solana core for actually helping kind of solve the state growth problem.
00:25:53.870 - 00:26:27.258, Speaker C: And, you know, this also include maybe new pricing for rent and storage as well. But it's. And this is kind of why I get a little angry, let's say. When people in certain marketing departments are like, well, you can only paralyze innovation and modular ecosystems, it's like, that's clearly not true because we just did it. And if it works well, then it'll be enshrined. Right. And so just, just to say there's direct counterevidence of that argument, is that.
00:26:27.274 - 00:26:32.670, Speaker B: The goal here to kind of get this piece of technology proven, iterated on hardened, and then enshrined?
00:26:35.170 - 00:27:42.404, Speaker A: Yeah, I think. I mean, ostensibly, I think that all good tech that solves a problem for the l, one should know in the long term, will be enshrined, or should be enshrined in some way or another. And I think that's the way how you have this sort of, like, layer of permissionless innovation on top. And I think that's actually some of the strong things that with sort of the modular scaling approach that sort of a lot of people in the e space are taking is you have really permissionless innovation because people can just experiment quickly on their stuff without having to necessarily wait on core protocol changes. What I think, though, is, and very much of the same opinion there as Merritt and what he just said is what you actually need is you need both. You need core protocol innovation and you need the core protocol to ship fast enough. And I'm actually, that's something that I think is going to be an ongoing challenge for Solana as it grows as a network and matures.
00:27:42.404 - 00:28:58.800, Speaker A: But you have to keep protocol changes up. But at the same time, you need to have an active ecosystem of infrastructure builders as well, who improve the protocol and improve the network first on this application layer, and then if it works, why not enshrine it? There's another thing, there's a third thing that ostensibly I want to quickly highlight that's fossil. What's the point in doing all this is it's not really a sort of like this standalone tool that we're building for developers, and we just go on to the next thing. Actually, if you zoom out, what this allows is what it actually does is it provides mercury state to Solana. So Solana doesn't, in a core protocol, state is not mercalized. And there's very good reasons for that, is because mercalization of state, as you see in Ethereum and Ethereum, all state and state changes are localized. The problem with that is that this mercalization process, this hashing process, is extremely slow compared to the block times and what the Solana validator needs to do when they execute stuff.
00:28:58.800 - 00:30:58.120, Speaker A: But there's really good things that you can do with merkelite state, because basically, if you have this state in this Merkle's restructure, every state and state change in state at a moment, time becomes a commitment that you can very easily verify via this hashing. Words and knowledge proofs or other proof constructs it. Once you have state that is localized, it opens up this whole design space, applications and our protocols to utilize that, to have math based verification of state changes that are otherwise sort of relatively speaking, off chain. And if you see a lot of each roll up on e four, l two, while free or whatnot on eth, maintains a state route on Ethereum mainnet and Solana doesn't have that currently. But I basically what ZK compression does is it now places a primitive on the l one and so on l one that allows for these kind of constructs to plug into tl one directly. And I think that's more a long term thing. And you can think of it as now you have not only on chain programs that can do on chain state transitions and define a state transition function on chain, validate it on chain, apply state changes on chain, but now you can have programs and applications that define parts of their state transition function off chain, and then proof the verification proof the state transition, verify it on chain in their Solana program, and then apply to state changes via this state routes on a solana, drop the state on Solana Ledger.
00:30:58.120 - 00:31:40.214, Speaker A: And I think that's pretty cool, because this primitive is something that hasn't existed before. And so long term, I'm very optimistic about what that enables. One specific thing. And coming back to where we started is one of these alternative vms, if you will, that you can define off chain. A classic example of that is encryption. So if you want to have, you know, you want to verify encrypted state transitions on a blockchain, you can't really do that on chain so easily. So you want to describe that in an off chain state position function verified on chain, and then apply to state changes on chain.
00:31:40.214 - 00:31:52.184, Speaker A: So you have now these, like, sort of this permissionless space for alternative vms and so on to plug into it. And I think that's quite powerful. Yep.
00:31:52.352 - 00:32:26.544, Speaker B: My friends, big, big news. Blockworks is hosting permissionless three in Salt Lake City this year. So we're heading west for three days starting October 9. Permissionless is our industry's premier defi event that brings together crypto natives from all over the globe. I've personally been the last two years and can honestly say that the attendees are incredible. It's people who actually care about crypto. We also have more than 200 industry titans speaking at the event, and this includes builders like Lucas Breuder from Labs and Brian Pellegrino from Layer Zero, or investors like Kyle Simone and Joe McCann, and even elected officials like Representative Tom Emmer, who is fighting the good fight in Washington.
00:32:26.544 - 00:32:50.806, Speaker B: And it's narrative season, so we're going to be covering the seven hottest themes in crypto. This includes things like modularity and restaking, or bitcoin and l two s, and even AI and crypto. The goal is to keep you up to speed on major developments in the industry. Ticket prices will be structurally increasing over time, so get your ticket today from my lightspeed family. I got you. We're going to use code lightspeed ten in all caps. No space for 10% off your ticket.
00:32:50.806 - 00:33:26.970, Speaker B: All right, everyone, I look forward to seeing you at permissionless three, and let's get back to the show. Okay, so, yeah, that's really interesting to start unpacking some of the use cases. Right? So that's an interesting one, with the idea of having encrypted transactions. And I like how that kind of ties nicely to your original thesis with light, which was. Which was privacy related. What else do you look out at the market and say okay, this use case, the solution of ZK compression, is perfect for this use case. I saw the airdrop example in the docs as well, but I'm just curious what else you've thought of that really seems to plug a hole for some.
00:33:27.010 - 00:34:33.049, Speaker A: Developers to zoom out. Anything that wants to scale on Solana on the l one eventually will hit limits or constraints when they use just pure onchainstate for everything, just because to give you a specific example, I think right now a single token account costs a little bit less than one dollars to instantiate, and it's this rent. It's not actually rent, it's more like a bond upfront bond that you put on, that you pay, and then you can claim it back later when you close the account. But that's the amount that you pay for a single account. Now imagine you actually want to scale to larger user bases and instantiate an account for each of them. The cost of that is quite constraining. As mentioned previously, you have apps like Drip, but also protocols like helium, Hivemepper who want to serve a lot of users and they don't want to build their own, I don't know, l two, l three, or whatever.
00:34:33.049 - 00:34:49.209, Speaker A: They want to use the l one, and so they need this. Compression is a great way to do that. So to go on the l one and benefit from the l one while still scaling to a lot of users.
00:34:49.629 - 00:34:55.249, Speaker B: Do you forfeit any composability with the l one when using compressed state?
00:34:57.480 - 00:35:53.350, Speaker A: So there's definitely nuance to this, but the way that we've built it, it inherits the basic principles of Solana. Each state tree, if you will, which can have one or many accounts that you want to access in a transaction, is a single account. And so you can define your accounts that you want to compose within a transaction. The nice thing about, about the system is that you can also describe your state transition function for your custom caller program completely on chain. So you can fully compose with all the other programs. You can use the anchor framework to build your programs, and you can mix and match. Basically, some of your accounts that you want to create or just close or update can be compressed, and some of them can be uncompressed.
00:35:53.350 - 00:36:18.520, Speaker A: And then you can also switch between compressed and uncompressed. So that's pretty easy. Then there's some nuances. As I said, one nuance is that this whole compression involves a lot of hashing. It involves a snark, sort of ZKP verification. And so that costs compute. And if blocks are full.
00:36:18.520 - 00:36:43.862, Speaker A: On Solana, there's some prioritization of compute use and priority fees paid. There's this nuance that first you're using more compute, you're passing more data on chain, obviously, because you're passing ledger data onto chain. And so these sort of nuances there, as you can consider for your specific use case.
00:36:43.966 - 00:37:28.600, Speaker B: One thing that comes to my mind here as an interesting user of this, are definitely deep in networks. I think my basic understanding of Hivemapper is they have these cameras and they get people to put them in their cars. Those cars go out and map different areas in the world. And for doing that action of mapping roads, they receive token rewards. I think on some programmatic basis, Hivemapper pushes those tokens to the user. In this example, that would be Hivemapper, the protocol, paying for those token accounts, paying for the state of those token accounts. To me, this seems like an exciting user, because there's some consistent reoccurring action of distributing tokens to users that becomes cheaper when using this.
00:37:28.600 - 00:37:31.840, Speaker B: Does that make sense, or does that add up to you, Mart?
00:37:32.460 - 00:38:14.778, Speaker C: Yeah, that's pretty much it, yeah. I mean, like, the way you can think about the account construct on Solana is like, you have a bank account, and you obviously do not store all your currencies in the same accounts, right? You have a checking account, maybe a US checking account or whatever foreign currency. You have a savings account, all this stuff. And each one of those are different account types, all under your root kind of, let's say public key. And so with something like imapper, probably an easier example is just an airdrop to airdrop to 10,000 people. Let's say that's 10,000 token accounts. And with this, it's not that, right? And you can also get creative and batch stuff and really improve both cost and speed.
00:38:14.778 - 00:38:35.370, Speaker C: And also ux, because people don't have to do this weird game of having to go and claim everything so that they pay for their own costs and stuff like that, which sometimes might be done for tax purposes, but it's anything. So, yeah, facilitating large scale payments, payouts, rewards are a pretty no brainer case for this.
00:38:37.470 - 00:38:54.290, Speaker B: Super interesting there. And then. Just continuing this example, Hivemapper already has a token account. And so for them, they existed before ZK compression was a thing. And now maybe they're super fired up and want to leverage this. I have no idea. I'm just using this as an example.
00:38:54.290 - 00:39:01.460, Speaker B: Is it possible for them to switch over to this, even though the helium token already has an account that exists.
00:39:04.920 - 00:39:39.896, Speaker A: Yeah, you'd have to adapt your smart contract logic. So it's a new primitive. You have to include that. You have to update it or deploy a new contract and then migrate your users over with some button click or whatnot. But yeah, you can do that, right? So you can close your. This is what you'd refer to with like compressing something or compressing an account. You would just like use the input regular account and out comes a compressed account, which is sort of like this hash in a merkle tree in the end.
00:39:39.896 - 00:40:20.890, Speaker A: Right. And if that is a token account that you're compressing, then the funds would be sort of locked up in this. Essentially you could call it like an l one bridge contract. It's not really a different thing, it's just that it's on the l one. And so not to trust assumptions of crosshair bridge, I don't know, wormhole. But essentially what you're doing is you're escrowing your funds, and in exchange for the escrow, you're creating this mercantry representation. And the compressed token program that we've built a is just mirroring the layout of the SBL token.
00:40:20.890 - 00:40:34.050, Speaker A: And so it's compatible with that. And so you can escrow and release. The mercury representation gets created or spent and you can compress and decompress back and forth that way.
00:40:35.510 - 00:40:44.614, Speaker C: So I'm going to switch gears because I realize we haven't actually talked about this. How is Zkhdem used specifically in ZK compression?
00:40:44.702 - 00:41:57.666, Speaker A: There's a lot of confusion about this, for sure, and there's many good points as well. So what we're using at the tech stack is we're using a snark to commonly refer to or commonly referenced when you talk about serial proofs, snark meaning succinct, non argument, non interactive argument of knowledge. Basically, to break it down, 16 just means short. And that's actually the primary thing that we're using here. We're taking many Merkel proofs, which are quite large, say y, and we're compressing it down to constant size, small proof, 128 bytes. So we're using that six sig as the primary property of the start, non interactive, meaning that is actually a very important property that is actually quite powerful. It just means that you have basically constant size verification costs on chain, so you don't have a multi step process of the prover and the verifier interacting with each other.
00:41:57.666 - 00:42:17.952, Speaker A: But it's just put a statement out there. Anyone can verify it, just a one way operation false and true. Right. And that's pretty powerful, actually, because you don't have to re execute the actual computation to know that it's right or wrong. And then. Yeah, basically. So we use snarks for this.
00:42:17.952 - 00:43:18.480, Speaker A: Now, there's a lot of nuance in like whether you want to call this ck or just succinct. There's even like a lot of debate on this in the Ethereum space, meaning basically a lot of the roll ups that are commonly referred to as ckrollups are not actually using that much zero knowledge product property of it, but more like just the succinctness property of it, basically, validity roll ups. And then there are some roll ups who do zero knowledge in a sense of actually hiding token balances or something like that, like Aztec, for instance. And those actually, in the sort of conversation on theorem, they would try to refer to those as like Zkzk roll ups. So there's a lot of this like debate conversation going on. I don't think there's any conclusive outcome out of this, really, so far. And for us, you could say.
00:43:18.480 - 00:43:58.470, Speaker A: You could also refer to it as like, you know, validity compression. The reason why. Why we are. Or succinct compression, whatnot. The reason why we are calling ZK compression is we're basically using this like ZkP snark to compress these merkle proofs, you know, previously with the CNFT compressed NFT, plain compression, if you will, just like plain merkel proofs, um, into a small proof. Uh, so we're using a ZKP to compress the compression. And that's why it's called ZK compression, um, to give a little bit context about the merkle proof.
00:43:58.470 - 00:44:39.548, Speaker A: Merkle proof just means that's the, uh, when you have this like, hash structure that's of, uh. And it's like a tree, like, it's like an upside down tree. I don't know why the software engineers have come up with that, um, upside down tree structure, but I. It's basically to verify the validity of every single leaf in the tree. You check it against the tree root, which is like the single end hash that you have recursively hashing all these leaves together. And to do that, you need the proof path. So you need to the actual intermediary nodes, node hashes, and each node hash being 32 bytes.
00:44:39.548 - 00:45:32.630, Speaker A: So if you have like a tree of height 25, you'd have like 25, these intermediary steps. So if you want to verify that those plain multiple proofs on chain, you'd have to send the whole proof path for each leaf that you want to proof validity of leaf meaning compressed account state that was stored on the ledger. The Solana transaction size limit is like about 1.2 kilobyte. So it's really constrained. So this is how you hit a lot of these composability limits really quickly if you use playing merkle proofs, especially if you want to prove multiple account states or interact with multiple compressed accounts in one transaction. So the ZKP element or the snark element there is quite important.
00:45:32.630 - 00:45:37.350, Speaker A: So you get that down to 128 bytes flat.
00:45:38.890 - 00:46:13.180, Speaker C: Yeah. And you can probably kind of start to see where the terminology gets confusing for why. I mean, I'm sure everybody saw that when we released this, it was like, oh, this is Solange just took a ZK roll up and called it something else. Or like a validium, which, first of all, no, because, like, you can kind of, you know, imagine. Let's do a thought experiment here. Let's say we did call it a roll up, okay? And then we release these developers, and they're like, oh, okay, how do I bridge to it? It's like, well, it doesn't quite apply. I mean, the bridge, not necessarily for users.
00:46:13.180 - 00:46:45.094, Speaker C: Right. It's kind of abstract because it's kind of an extension of Solana. Okay. It's like, where's the sequencer? Well, you know, there's not necessarily sequencer for this one. And then it's like, what are the potential resistance properties? Like, where's the DA? It's like, all this stuff is, like, not very skeuomorphic, because the terminology is extremely ethereum centric. I mean, if you go to just ethereum.org and look up what an l two is, it literally just says it's a scaling solution for batch processing, compute and transactions off chain.
00:46:45.094 - 00:47:17.690, Speaker C: And this is, like, not even close to that, right? Because Solana compute is cheap. That's like, transactions are cheap, storage is different. And then that's what Ethereum is trying to work towards, actually, with kind of the vertical stuff, stateless client architecture and stuff. And so I wanted to get a conclusive, let's say, proof of authority here. And so I just, I said to Vitalik, hey, what would you. What do you think about this? And his first answer was, this is much more stateless client architecture. And if you look at Twitter, like, if you do some soothing.
00:47:17.690 - 00:47:39.724, Speaker C: Tolle has been calling it that since NFT compression, which is, it's literally, there's stuff, there's data, and then you accumulate that data. To kind of construct stateless accumulator. So. But, like, obviously you don't want to call the stateless accumulators or developers because it's like, what the hell is that? So, like, ZK compression is like, okay, you have n accounts and you have compressed them into one account.
00:47:39.812 - 00:48:02.640, Speaker B: I love that. I think that's a crucial point of context. And I think the issue here was everybody wanted to just reframe this in, like, a way that they already understand it. Ethereum roll ups have been around for a while, and there was, like, some properties that had some overlap here. And so it was like the natural progression of thought. Like, I get why it happened, but, yeah, I appreciate you laying it out.
00:48:02.720 - 00:48:27.140, Speaker C: It's like, you know, seeing a bicycle for the first time, or. No, seeing a car for the first time where bicycles have already existed. And you're like, hey, this is just a bicycle with four wheels. It's like, well, I mean, I guess it shares some similarities, but if you start from first principle, it's kind of a different thing altogether. It doesn't require manpower. Right. So anyways, that's kind of the problem with the.
00:48:27.140 - 00:49:01.270, Speaker C: I mean, admittedly, Solana's research community isn't as developed or well known or really even just focused on as much as Ethereum. And so that maybe leads to some confusions there. But, like, make no mistake about it, we work on this thing and we know what roll ups are. And if you start from first principles, yeah, they share, like, some, let's say, similarities, but there's no way that, like, I bet you if you had called this a roll up, it would have caused, first of all, ten times the outrage and, like, 100 times confusion.
00:49:02.210 - 00:49:09.490, Speaker B: Agreed with that. And so I apologize in advance for this next question, but do you kind of think it's a roll up for a single program?
00:49:09.650 - 00:49:50.328, Speaker A: What do you find as a roll up? Right. Like, usually, I guess typically you would think that a roll up sort of rolls up transactions into one transaction, right? Like, off chain transactions into one transaction. Like, I think this batch element is something, like, quite important for, like, calling something a roll up. I know there are people and, like, you know, really smart people, well respected people who are working on small things, and they sort of, like, also call these, like, single transaction roll ups. But I wouldn't refer to that as a single transaction roll up. But, yeah, that's the defining difference. I would say.
00:49:50.328 - 00:50:11.498, Speaker A: It's like every user creates a validity proof and interacts with an on chain program. And there's a lot of subjects ownership, checks all happening on chain. And so NDA is on chain, so it's also clearly not a validity. Um, and so, uh, sure. Like, it's. It's. It's not a roll.
00:50:11.498 - 00:50:42.580, Speaker A: I think what best describes it, especially sort of in the context of Solana, you know, if we may, we can come up with some Solana centric terms as well. I would. I would really call it za compression. You know, I think at some point you can also just refer to it as compression. I think that's a more generalized term. But, you know, fwas, it was like, okay, like, what. What's the defining difference between the CNFTs and this version of compression? Well, it's the snark element, so let's call it ck compression.
00:50:44.880 - 00:50:59.312, Speaker C: Yeah, like, I think just. I mean, the term roll up has the concept of rolling up inside of it. That's kind of like the point of the name. Right. And so we're not actually doing that here, especially with the transactions. The transactions are still regular transactions. Right.
00:50:59.312 - 00:51:26.160, Speaker C: You just send them to the chain as usual. And by the way, I believe there's a team. It was in a slot research channel on Ethereum that's doing kind of something relatively similar. And even they didn't call it a roll up. They call it, like, an l one or something weird. And so, again, the fact that this even needs to be discussed this much kind of shows that the name would not have been proper, because the name is supposed to remove confusion. Right.
00:51:26.160 - 00:52:13.840, Speaker C: I mean, I understand it upsets some people because, I don't know, some weird moral inferiority complex, but, like, it's not actually. We're trying to help developers build things, and if you tell them, build with our roll up, they're gonna be like, okay, but this has nothing that a roll up actually is supposed to have as the way it's been defined for the past six years in the industry. So why did you call this a roll up? Just confuse me. And we're not interested in that. And, like, again, the terminology is derived from Ethereum's, let's say, technical insufficiencies in certain regards. Solana has its own technical insufficiencies that are independent from that. And so you should start from those and then work your way up instead of trying to retrofit random concepts across, you know, different problem sets.
00:52:14.540 - 00:52:19.300, Speaker B: Well said. I think that makes a ton of sense. Swen Myrt, anything else we're missing here? Anything else we need to hit on.
00:52:19.380 - 00:52:24.436, Speaker C: How developers can get started? Go to zkompression.com and the docs are there.
00:52:24.508 - 00:52:46.200, Speaker A: All of this open source. By the way, not only the docs, all the code development is happening completely open source, both for the core protocol like protocol and for the RPC implementation which is built name photon photon indexer. All of this open source. I think it's helioslabs photon.
00:52:47.820 - 00:53:06.990, Speaker B: Awesome. Well Swen, thanks a ton for coming on. Congratulations on the success you've been having with the launch of CK compression. It's exciting to see Solana finding its own scaling path. Super, super awesome to see and just love the energy man continue to keep building. And Murt, loved having you as a half co host, half guest this time around. Cheers gentlemen, have a great rest of your day.
00:53:07.490 - 00:53:07.802, Speaker A: Cool.
00:53:07.826 - 00:53:08.074, Speaker C: Cheers.
00:53:08.122 - 00:53:08.890, Speaker A: Was a pleasure. Thanks.
