00:00:00.090 - 00:00:31.282, Speaker A: This episode is brought to you by Das London blockworks, number one institutional crypto conference, where all the top institutions and people in crypto are going to be this march in London, what's becoming maybe the crypto hub of the world. Have a link in the show notes where you can learn more and also discount code that will get you 10% off. Click the link, find out more, and I'll see you. There's what's up, everybody. Welcome to another episode of Lightspeed. Today we're joined by Liam from Jump and Lucas from Jito. These are two of the smartest devs in the Solano ecosystem.
00:00:31.282 - 00:00:32.680, Speaker A: Guys, welcome to the show.
00:00:33.130 - 00:00:34.070, Speaker B: Thank you.
00:00:34.220 - 00:00:36.134, Speaker C: Thanks for having us. Yeah.
00:00:36.172 - 00:01:03.246, Speaker A: Pumped to have you on. I really am a little bit intimidated by the brain power we have in here, and I will include you in that. But we have a lot to talk about today, because, Liam, you do a lot of work on Fire dancer. Lucas, you work at Jito, who has their own client, but also liquid staking. And I think there's a lot of overlap between you to. And I think the general narrative in Solana right now is a big discussion around fee markets and just what are the optimizations that we think, though? I just want to start with you. We're in this research chat together, and I try to keep up with all the things you say, and you're just cooking the whole time.
00:01:03.246 - 00:01:09.540, Speaker A: I can't keep up. So I'm curious, what is the most important thing to you for Solana right now, to optimize what is top of mind?
00:01:11.190 - 00:02:02.542, Speaker B: Well, I think a lot of the problems are actually general to blockchain as a whole, and they could be generally applied. But I think, in particular, with Solana, what we have found, or at least kind of, once you kind of stare at the data for long enough, what you find is that actually, Solana has spare capacity in various places, and some of the bottlenecks are actually imposed by implementation. And so one of the things that kind of we're seeing is that, okay, people want to fix fees, they want to fix the fee markets and all that, by adding in new rules, things like this EMA fee proposal. Right, lock fee proposal that people have been promoting before. We've kind of fixed the implementation, sorted out the bottlenecks, figured out kind of problems that don't involve changing underlying protocol.
00:02:02.686 - 00:02:03.042, Speaker C: Right.
00:02:03.096 - 00:02:14.626, Speaker B: And so I'll leave it kind of there. But there's a lot of implementation that can get fixed and sorted out in my mind before we actually have to go and change the underlying.
00:02:14.738 - 00:03:03.110, Speaker C: Yeah, I think I definitely agree. There's a lot of implementation things that can be fixed, and some of them have been fixed since they were detected a few months ago. Some will hopefully be rolling out in 118 or 119, I think a big one that's top of mind for anyone that's looked inside the validator is a scheduler. There's definitely a lot of work to better prioritize the packets and execute them more efficiently. So Andrew at Solana Labs has built this kind of new scheduler that basically there's like a centralized planner. It kind of like dispatches workout to these threads. I imagine that's kind of what Liam was referring to and that the scheduler is like the big bottleneck right now.
00:03:03.110 - 00:03:39.300, Speaker C: I do think Solana does need base fees. There's definitely a lot of state that's very hot and getting saturated, and I think it makes sense to start talking about those things now and how one could do them because I think that's going to be like a multi month process to get everyone to agree on something. There is a lot of juice to squeeze out of the current design, but I do think that Solana will need some type of dynamic resource based fee at some point.
00:03:39.750 - 00:03:47.894, Speaker D: What do you guys think about the latest proposal by Tao and Tolly on the economic back pressure so I can.
00:03:47.932 - 00:04:15.674, Speaker B: Give my thoughts and I hope they seem obvious. So I'll start with an example. Do you own a car? Do you own a car? Okay, so suppose you wanted to sell me your car. You may go to the dealer and try and get a good price for it to sell it to them, and they'll sell it to me later on, or maybe I'll just come to you directly.
00:04:15.722 - 00:04:16.126, Speaker C: Right.
00:04:16.228 - 00:04:31.330, Speaker B: And I'll sell it. But those are two different prices, two totally different kind of parts of the market. But you would still consider that part like a car sale, right? Those are both sales of cars. You're in the car selling market. Right? Both of those things are.
00:04:31.480 - 00:04:32.082, Speaker C: Right.
00:04:32.216 - 00:05:51.982, Speaker B: And so I see the same thing in the same sort of behavior in these kind of transaction fee markets, where you have different ways of actually getting a transaction landed, you have different participants that you're passing these transactions through. And how they're getting prioritized is kind of way more complicated than we actually think at the outset. What we end up seeing and what you end up looking at as someone who's doing these analyses is that all you end up seeing is the block has some amount of utilization. You see the statistics about the block, but people seem to be losing the general narrative here that these are actual people who are interacting. The validator is interacting and selling you block space as a user. And that's the interaction that we need to focus on is like, I am a buyer of blockspace as a transaction sender, and there's this other participant, this other individual in the market who is the actual block producer. And this EMA proposal kind of assumes that markets behave as like a hive mind, right? That everybody agrees on a price at some time, and that's never the case, actually.
00:05:52.116 - 00:05:52.800, Speaker C: Right.
00:05:53.570 - 00:06:33.782, Speaker B: I may get a completely different price, and I should. If some block producer doesn't like my transaction, right. Like, they don't think that they can execute it in a reasonable amount of time or it costs them more to run the transaction. Another important consideration is they may think that the network can't execute it in time or that it will make their block less profitable. Right. So it's important that we consider that there's this interaction that's extremely nuanced between the buyers and sellers. And this is something that's solved in traditional markets, and it's been that way for a millennium.
00:06:33.782 - 00:06:39.958, Speaker B: I don't know. You have buyers and sellers, you have barter markets and all that, and it's continued on through to modern day.
00:06:40.064 - 00:06:56.370, Speaker D: So why isn't the complication that there's no real mempool here? It's kind of hard to really reason about how the validators should think about accepting which transactions and which ones to not accept, et cetera.
00:06:58.070 - 00:07:07.618, Speaker B: I think that's definitely part of the issue is that you can think about these things as a streaming auction.
00:07:07.714 - 00:07:08.214, Speaker C: Right.
00:07:08.332 - 00:07:20.982, Speaker B: Ethereum, for example, their auction is also streaming. Actually, you guys had Eugene, and he used this terminology, too, where he said that there's this kind of streaming auction that's going on.
00:07:21.036 - 00:07:21.398, Speaker C: Right.
00:07:21.484 - 00:07:56.370, Speaker B: What you have to realize is that, yeah, you need to have, if you don't have a bunch of transactions in front of you before that auction has happened or started, you're not going to be able to price things out super well. Right. But you could start to look at other things, look at historical blocks, look at other, like, what's the transactions that I saw when I was last leader? There's a lot of data that you can look at to price out transactions, and I don't think the block producers are necessarily doing all that just yet.
00:07:56.440 - 00:08:24.510, Speaker A: This might sound obvious, but what is the end goal for this proposal, for example, that we're asking you, like, who is seeing the benefit of this positive outcome that could be created? And I kind of want to make an analogy here, that if you're in Ethereum land versus Solana, there's often this comparison that in Ethereum the costs are put on the user with high gas fees. Where in Solana the costs are put on the validators because it's higher hardware cost. I'm curious, in this situation, with what we're trying to improve here, who's the benefit going towards? Is it the developers or is it the users?
00:08:25.410 - 00:09:12.990, Speaker C: I think it will be the users. The users will be one of the benefits here. There's a lot, especially in the DeX markets, there's just a ton of spam. We did a study like a year ago, and basically 99% of arbitrage transactions fail, 58% of compute is spent on executing these failed arbitrages. And it's just really cheap to keep spamming these things. And there's not really any economic back pressure here. So I think if you start to back pressure these bots to where it's like instead of 100th of a penny, maybe it's like a 10th of a penny or something like that, then it kind of closes the window on the profitability for Arps.
00:09:12.990 - 00:09:53.034, Speaker C: Anytime someone trades, if they're creating any arbitrage opportunity that's over 100th of a penny, there's going to be an arbitrage transaction that immediately follows that. So if you're bumping up the fees a little bit on these super hot things, it kind of creates less arbitrage here. I think also the network will benefit as well. If that Solana is burned, then that will kind of benefit users of soul as like, I don't think there's an emphasis on the ultrasound money piece here, but it's just a piece of it.
00:09:53.152 - 00:10:39.000, Speaker D: That helps out just to add a few cents there. It's going to be better for the users just because as a user, sometimes, let's say I'm on Jupiter and there's a big airdrop, I submit it, and maybe it doesn't make it to the blockchain. That's because maybe the leaders are overwhelmed or just keeps being forwarded until it expires. And so it's going to be better because today there was. Might as well just talk about this today there was a. When airdrop, or was it an airdrop? It was just like a claim kind of almost, for the new standard that Jupiter is doing with ridslip. And I actually think the network performs better than before in terms of, I think, ecosystem readiness especially.
00:10:39.000 - 00:11:33.020, Speaker D: What happened was jito kind of did the airdrop and literally nobody was ready and nobody had fees on, and everybody was just kind of spamming, and it wasn't obvious which transactions would work. And then now it's becoming more and more predictable. Of course, it's always going to be somewhat stochastic here because the scheduler is relatively subpar in implementation until 1.18. But anyway, Liam, you've had some takes on kind of the network jitter that we've seen in the past, let's say month or maybe two months, and now we're going to be seeing more airdrops. I can see, like, three or four coming in the next month. Can you maybe explain for the audience why this network jitter is happening and what's being done about it?
00:11:34.190 - 00:12:17.750, Speaker B: Well, so we could talk about Jitter, but it's also important to talk about what the downstream effect of that is. Right. And so the jitter comes from a few things. Right. Jitter is just kind of this general thing that's computer science, or we call it networking or what, where it takes a certain amount of time from. It may be that on average, the amount of time it takes for me to get something, a transaction landed, a message from me to you, takes a certain amount of time, typically, maybe, hopefully, that average or that mean time is deterministic, but the deviation we would call jitter. Right.
00:12:17.750 - 00:12:44.430, Speaker B: And so that jitter ends up if it's large enough. And in some cases, in Solana, when you're sending a transaction, that can be the case. A sophisticated actor like a bot or someone trying to do arbitrage or things like that, will not be able to land deterministically, or at least not necessarily deterministically, but with better certainty.
00:12:44.510 - 00:12:45.140, Speaker C: Right.
00:12:45.590 - 00:13:08.710, Speaker B: And the way this ends up playing out is that when you have jitter, the transaction gets placed kind of more randomly within the block as well as your priority fee ends up getting you into the leader at a later time, which ends up resulting in you placing later in the block, which was not your intention.
00:13:08.790 - 00:13:09.082, Speaker C: Right.
00:13:09.136 - 00:13:40.878, Speaker B: What ends up happening is now it's about a probability distribution. How probable is it that I will land if I send n transactions, right, because the priority fee seems to break down when there's a lot of market or when there's a lot of activity in the network. What happens is that people will send end transactions, and so the currency then becomes, how many transactions can you send? Not priority fee.
00:13:40.974 - 00:13:41.330, Speaker C: Right?
00:13:41.400 - 00:13:46.230, Speaker B: You'll send five transactions because you maybe know your probability of successfully landing is 20%.
00:13:46.380 - 00:13:47.080, Speaker C: Right.
00:13:47.690 - 00:14:03.818, Speaker B: And especially when the fee markets break down. So it's like, let's say tomorrow we all started using beads instead of dollars or something. It's the same sort of thing. If the market breaks down for dollars, then we'd go to some other thing.
00:14:03.904 - 00:14:04.394, Speaker C: Right?
00:14:04.512 - 00:14:11.130, Speaker B: Same thing here. The market breaks down, people resort to some other form of currency, and that's just sending a lot more transactions.
00:14:12.030 - 00:14:43.720, Speaker A: It's a good answer. Lucas. I'm curious how Jito comes into play here and how you look at this, because, like Liam was explaining right now, you have an incentive just almost spam the network because you can use latency versus paying a fee to actually land that arbitrage. Once that scheduler improves and we have these updates, then it moves latency to actually using a fee to get placed in the position that you want. And that leads to Jito. So, one, I'm just curious, if the scheduler gets fixed, is that huge for Jito? Because that should direct traffic potentially to you and, yeah, just, I'm curious about your thoughts on the.
00:14:45.850 - 00:15:34.214, Speaker C: It will. I think that Jito would be useful before and after this. And we're seeing a lot of activity right now on Jeto. Jito basically makes this fully, or not fully, but way more deterministic in that you only need to send one bundle or transaction to jeto. And Jito kind of has its own scheduler that we run, which basically takes other factors into account other than the priority fee. And I guess this may be just the implementation detail of Salana, but there's no way to dynamically tip or have a dynamic fee to validators in Salana. I put out a proposal for this.
00:15:34.214 - 00:16:25.720, Speaker C: I think it's some D 109, I think. But basically there are traders that are willing to pay more if you guarantee them access to block space and even like, the ordering within the block so they can send to Jito once. And there's kind of, most searchers are doing dynamic tips where they will say, oh, I arbitrage this thing. My program detected. I arbitrage this thing for 100 soul. I'll give the leader ten Sol if they guarantee me this opportunity and we kind of filter out the stuff and do the simulation for the leaders and send them the profitable trades. So basically, somewhat prevents the spam problem.
00:16:25.720 - 00:16:45.286, Speaker C: Currently, like, almost 52% of stake is running the judo client. So it's not 100% today. But yeah, I think, to answer your question, I think that there will be use cases for Jeto even when the new scheduler is implemented.
00:16:45.478 - 00:16:59.006, Speaker A: Quick question on that, though. I know that jeto has more than 50% of the stake or more than 50% of the stake is using the Jeto MeV client. But how many of ARB transactions do you think are actually going through Jeto versus just going through base layer?
00:16:59.198 - 00:17:37.678, Speaker C: It's a good question. I'll look into that. We were kind of rewriting our database, so it's easier to figure this stuff out. But I don't have the answer for the number of transactions, but for the fees that are getting paid. The fees that are getting paid to leaders through the tips are much higher than priority fees. So I think it's like this week so far, there's been almost a million dollars paid to validators through Jeta and stakers through jetotips. Awesome.
00:17:37.678 - 00:17:40.110, Speaker C: It's much lower for priority fees.
00:17:41.570 - 00:18:24.000, Speaker D: Nice. We covered briefly the boring stuff, the network problems, and some of the low level stuff. Let's talk about some of the high level stuff that our audience will hopefully understand more. So, Liam, sticking to objective facts and as least speculation as possible, a lot of people still don't quite understand what fire dancer is and what it aims to do. Obviously, you're on the team. You have a better idea of this than anybody else. Can you briefly describe what fire dancer is, what it aims to do, and, yeah, we can go from there.
00:18:24.850 - 00:19:34.846, Speaker B: Well, so fire dancer is just a blockchain client, and it is being built here in house at jump. And as we've talked a lot about, and Kevin Bowers, who's the head of this whole project, has talked about a lot, one of the things that was noticed early on in the kind of planning phase and the coordination kind of phases for this whole project was that this thing ends up looking really similar to a lot of the stuff that jumps really good at. They're bread and butter. And so it was kind of a match rate in heaven because we kind of could use a lot of the expertise, pull in a lot of the resources, and also it's something that we care about a lot. A lot of the folks here actually want to see Solana succeed. They're interested know, if not interested in blockchain, necessarily find this project fascinating, because there's a lot of problems that are not something that they'll get in another kind of space. Right.
00:19:34.846 - 00:19:45.158, Speaker B: A lot of the problems that jump has to solve are ones of latency, whereas these blockchain problems are bandwidth problems.
00:19:45.244 - 00:19:45.542, Speaker C: Right.
00:19:45.596 - 00:20:15.120, Speaker B: Instead of being a latency first kind of problem solving approach, there's this kind of bandwidth first approach. This isn't really answering necessarily the question, but more as to why. But I guess more to what? We are blocked. It's a blockchain client. We're building this client for Solana, all out in the open, and the intent is to be high performance. We've published a lot of stuff and talked to breakpoint a lot about where we're at with that.
00:20:17.970 - 00:20:45.930, Speaker A: Okay, Murda, I'm going to butt in for the people that are like me, that aren't super technical. All right, so everyone has, like, a general framework. Liam or Lucas, either one of you, can you explain one, just the difference between what a client is, and then say, like this, SVM? So can you kind of define. It's like there's multiple implementations versus specs. Can you explain that? And then just question that? If this is so important, why don't we just throw, like, 50 people to work on this, just the resources, or what's the issue there?
00:20:46.000 - 00:20:47.740, Speaker D: That's not how engineering works.
00:20:48.750 - 00:21:05.058, Speaker A: Exactly. This is for the non techies. Because to me, fire dancer is the hottest narrative in Spana right now. And it's like, oh, it could improve performance from two to ten times, whatever it might be. It's that important. So, yeah, I think Mark just said it. Why don't you just throw more resources at it? But can you start with just the general question of explaining what a client is?
00:21:05.144 - 00:22:27.290, Speaker C: Yeah, a client is basically a software package, or it's a bunch of code that speaks this language of the blockchain. Every blockchain has some language that it talks, and all these pieces of software communicate with each other. So if you send a transaction through Phantom or Soulflare or any other app on Solana, there is a part of the protocol of the Solana blockchain is the transactions should have this layout to them. There's like these addresses that you interact with. There's these programs, and use instructions to talk to these programs, and all the way down to the virtual machine. Like, how do I write code for this blockchain? How does the code compile? How does it handle, I don't know if you're doing math, how is it handling this math? And so a client is basically a piece of software that implements this logic, in a perfect world, to a spec. There's not currently a spec for Solana, but if you compare something to Ethereum, there's clearly ethereum specification.
00:22:27.290 - 00:23:15.146, Speaker C: There's Ethereum virtual machine, which has a specification to it, and how it handles operation codes and things like that. And so that's basically like a client. So you could. In theory, there's like the Solana Labs client, which is written in rust. Fire dancer is working on one and C, and basically doesn't really matter that the code is like one to one. What matters is that the core pieces of the specification are met. So that when you send a transaction to the Solana Labs client, or the fire dancer client, or the one being written in zig that the syndicate team's working on, or Jito Solana, they all know how to interpret it.
00:23:15.146 - 00:23:24.678, Speaker C: When you process those transactions, they all come to the same result, and they kind of propagate that state out in some format that meets the specification.
00:23:24.774 - 00:23:51.602, Speaker A: Quick break to tell you about an upcoming event, I promise you don't want to miss. It's blockwork's biggest and best institutional conference, called Das London. It's a two day event happening in London this March, where we're going to have over 700 institutions, 130 speakers, and a couple thousand of us all under one roof. Crypto is in a position for the first time to actually onboard these institutions, and they're showing up. We have companies from Blackrock to visa, launching real products in the space space. We have the real world asset narrative taking off. We have things like payments that have been exponentially growing, and then we have things like deepen happening in the salana ecosystem.
00:23:51.602 - 00:24:11.726, Speaker A: There's a ton of capital right now in this institutional space that's going to be coming on chain. It's going to completely change the industry, whether you are an institution or you're a retail user, or you just want to learn more about what's going on in the space, this conference is for you. You're going to be able to meet some of the best and smartest people in the space. The speaker lineup is absolutely incredible, and you'll get to hang out with me. But the best part is, you actually get 10% off your ticket. Use lightspeed. Ten when checking out.
00:24:11.726 - 00:24:21.678, Speaker A: I put a link in the show notes. I recommend buying this today, because, one, you'll forget about it. Two, these ticket prices go up every single month. So, anyways, I hope to see you there. Now let's get back to the show.
00:24:21.844 - 00:25:21.666, Speaker D: So I want to get back to jump and fire dancer with this new validator client. Right? It seems like the goal is basically, or at least this is how Tolia describes it, which is the first version of the client is like, okay, we're engineers. We're going to ship something to production, and then we're going to fix the airplane while it's still flying. But then now jump gets to look at this and says, okay, there's clear problems here, and you're not really under fire, or at least you're not under the same kind of fire. And now you get to kind of rebuild this system, learning from some of the mistakes that the labs client made, and basically try to squeeze as much performance as the software allows you to get out of the hardware as humanly possible. And that results in, ideally some sort of high performance or maybe lower hardware requirements. Now, people don't really know what to expect when it actually goes live.
00:25:21.666 - 00:25:35.240, Speaker D: There's obviously a lot of different scenarios possible, and I don't want to speculate too much. But what do you hope happens when Friday answer goes live? When the project is, let's say, in mainnet by X years.
00:25:35.930 - 00:25:44.458, Speaker B: So my main hopes are that, well, we're going to spend a lot of time testing prior to that eventual date.
00:25:44.544 - 00:25:44.842, Speaker C: Right.
00:25:44.896 - 00:26:29.290, Speaker B: So my hope is that we first provide a client that works. I think there's a huge. It sounds silly, but literally would be great to just have a client that works and we could put that out there into the world. Because there's obvious value, I think most people could see why there's obvious value to having two clients. It would make the network more resilient. And. Sorry, Lucas, I know some people like to say that the Jito client is a totally different second implementation, but I will unfortunately not give you that.
00:26:29.290 - 00:27:16.310, Speaker B: Not today at least. But I think there's obviously a resiliency aspect to it. And certainly when both clients are operating in the same network, you have to operate at the forms of the least common denominator. Right. So the guy running the node and I don't know, name a place that's really far away and in a machine that's completely underpowered and with the client that performs the worst. Right. And so given that that's the case, that's most certainly what it will look like, I think then at that point.
00:27:16.310 - 00:27:58.374, Speaker B: But I've also note that even if fire dancer does provide some improvement in performance or lower hardware requirements, even if it does, Salana Labs is making a lot of performance improvements, and people are actually noticing that. I think Triton pushed out something saying that their CPU usage was down drastically in 117 or something to this effect. It's clear to me that while we are building this out, Solana Labs is also building out and stepping back and also doing similar performance improvements. Right.
00:27:58.412 - 00:28:19.100, Speaker D: So that's interesting, because, Lucas, you guys have your own client for obviously MEV purposes. And one thing that's probably something you're actually still thinking about is how will you guys think about your version of the client once fire dancer goes out. What do you think happens to the MEV landscape as we get closer to that date?
00:28:20.510 - 00:29:28.900, Speaker C: Yeah, I think that fire dancer is open source. We've been keeping an eye on it, how it's evolving. I think it's still too early for us to kind of take a look at it, but I think once there's more written code written in the open that is more relevant to the pieces that we hook into, I think we will start to take a look at it and figure out how to integrate. My gut is it will be much easier to integrate than the Solana Labs client. The fire dancer client consists of, correct me if I'm wrong here, but there's multiple tiles, which are basically multiple processes. The Solana labs client is just one giant process, so it makes it much harder to kind of hook into the Solana Labs client where a fire dancer client. We could spin up another process or maybe make a few changes to the process that handles the scheduler and block packing and hook in anything that's relevant there.
00:29:28.900 - 00:30:30.374, Speaker C: I think when it first comes out, there probably won't be that much impact on what we do. I think on a much longer time horizon. It's interesting to think about what if Anatoly's vision does come true and this is actually something that does compete with Nasdaq, with the latency and throughput? It's definitely interesting to think about. I think current pieces of our system need to change and adapt to that world. And yeah, there's definitely going to be changes if the network is operating at sustained 10,000, 50,000, 10,0000 TPS. Not saying that fire dancer or the salon Labs client will be able to handle that, but I think that's the dream on a multi year time horizon. Also, I wanted to go back to one of your questions earlier, too.
00:30:30.374 - 00:31:15.246, Speaker C: I think we kind of talked about the resiliency of Wi Fi dancer, and I guess to break it down for people, like, why this is important. I think we actually saw this recently with the Ethereum network. I think one of the minority clients can't remember which one. Off the top of my head, there was basically a bug in the client, and part of the Ethereum network went offline for maybe like a few hours or something. And basically because Salana Labs is like the only client, judo Salana, maybe it's not client. It shares like 99% of the code with the Salana Labs client. If there's a bug there, then that has potential to take the entire network offline.
00:31:15.246 - 00:31:45.710, Speaker C: And so if there's multiple clients that are written a little differently, like, fire dancer isn't a copy paste. Like, let's just take this rust code, translate it directly to C, and call it a day. It's like a ground up. Rewrite new algorithms. So basically, if there's a client in one bug, hopefully it doesn't impact the network. And also, there's a big security piece to it as well. So, like Solana Labs client, it's importing all these libraries.
00:31:45.710 - 00:32:26.570, Speaker C: In the worst case, there's some attack or piece of bug that happens to this library, or maybe Solana is using some random crate or, like, a piece of code that they're importing that is used somehow in consensus, and that piece of code changes the way that behaves. And now there's, like, a weird bug that happens. And the goal is security. I think fire dancer isn't really importing that many packages. It's writing a lot by themselves that will be thoroughly tested. So the goal is that if there's, like, a bug in one, then hopefully it doesn't impact the whole network.
00:32:27.470 - 00:33:22.598, Speaker D: Yeah, I think that's, at least for me personally, that's the most interesting part, which is you're reducing the probability of catastrophic failure, because there's two things that are trying to do the same thing with different implementation. And so that's what I look forward to. But a lot of people seem to think that this will eliminate all future outages, which is kind of, in my view, totally wrong. And one of the questions this opens up is assuming a world where fire dancer is live. I think Tolle has the idea that, well, the top performing validators will kind of run both, and then we'll fail over in case of some issue. Do you guys agree with that? Because this has opened a lot of questions on Ethereum, because if you have an activity leak and you're on kind of the wrong client, kind of money just goes in the air. Salon doesn't have an activity leak.
00:33:22.598 - 00:33:31.200, Speaker D: It's much of a problem. How should we think about client diversity with respect to security and liveness when this goes?
00:33:34.130 - 00:33:40.546, Speaker B: So Tolle's idea, when he first mentioned it, I had a lot of issues with it.
00:33:40.648 - 00:33:40.962, Speaker C: Right?
00:33:41.016 - 00:34:35.342, Speaker B: For one, I have a lot of issues with a lot of things, Tolley says, at least at the outset, because they just come out of their stream. But in this case, after I got the principle down, it makes sense. But my issue with it was that I don't want people running fire dancers made to kind of and many validator clients are really made to be run as kind of the primary application running on a particular machine or whatnot. And so I don't really want Solana labs mucking about in the same box as fire dancer and for performance reasons. Right. Like, the two clients take advantage of different parts of the operating system, and they'd actually just mutually, if you ran them on the same box, they'd just not perform well. You want to put them on different boxes.
00:34:35.342 - 00:34:56.902, Speaker B: So once they got over that hurdle. Right, great. They have two different machines. Now, you run these two clients, they're checking each other's results, and fired answer, for example, has an issue, which, I'm going to be honest, Solana is complicated.
00:34:56.966 - 00:34:57.194, Speaker C: Right.
00:34:57.232 - 00:35:26.194, Speaker B: So I don't think it's unrealistic to hit a scenario, and I would much rather build our client to do this failover process of, hey, we had a failure. Let's gracefully and quickly switch back over to labs. Right. I'd much rather, while we're in that transition period where we're starting up, we're coming up on Vena. I'd much rather be built for that. Rather than saying, well, we're perfect. That's just not going to be the case.
00:35:26.194 - 00:35:52.282, Speaker B: We're going to find all sorts of fun bugs, and we're going to sort out as many of them as we can before we hit production. But to assume that we won't exactly reproduce every single transaction that Solana will send day one. And this is not to say, I'm saying that these failures would be like, oh, we can't. Like, we process a transaction. Solana Labs thought it failed. We thought it right, failed back over to Solana Labs.
00:35:52.346 - 00:35:53.838, Speaker C: Right. They're right.
00:35:54.004 - 00:36:07.250, Speaker B: Not that, oh, there's, like, some vulnerability. I more mean, just like we want to make sure that we're replicating labs perfectly, and so we would fail over in that kind of case. Does that make sense?
00:36:07.320 - 00:37:19.074, Speaker C: I think I had the same reaction. I think the hard part, I think will be is I think at first, people, there may be some people that run both or maybe those operators that are feeling a little more comfortable with operating a client like fire dancer and are willing to kind of chew glass. If there's any issues, maybe they'll operate one, and hopefully the network can transition slowly. I think my concern is operating Solana. Hardware is already expensive. So if now the socially accepted practice is running two boxes, how many people can actually afford to do that? What does that do to the breakeven amount of stake that you need? But maybe there will be people that are like, okay, I like what you're doing. I'm going to stake Solana to you guys because I like this, and I think it makes sense for the network, and I guess it's ultimately up to what stakers want to do, I think on a longer time horizon, I think it's a little unclear.
00:37:19.074 - 00:38:19.050, Speaker C: As you mentioned earlier, Salon allows this kind of built as a plane was flying, and they're kind of building it and fixing patching holes and whatnot as the plane's flying. And I think the fire dancer team kind of has this opportunity, and they're definitely leveraging this opportunity. It's like, okay, let's zoom out super big. What are the pieces? How do we most efficiently use the hardware and write software to do what the current client does? And I'm guessing that it will be much more efficient from basically every metric available than the Salana labs client. And then once it's stable, for some definition of stable, as determined by the operators and stakers, then there's going to be like, okay, I'm using 10% of my CPU on this box running fire dancer. If we like five X block capacity, I can make a lot more money. But if we do that, then maybe the salon and labs client can't keep up with that.
00:38:19.050 - 00:38:52.390, Speaker C: And so I think that will be an interesting fork in the road. Ultimately, it's like proof of stake. People can stake where they want, so it'll be up to the stakers, and maybe they'll be guided by engineers and people that understand the software well. But I'm sure, like Solana Labs, as Liam mentioned, their 117 is much more efficient. There's no reason to believe that won't keep getting more efficient. And there's probably places where if there's inefficient pieces of the lab stack, they can plug in fire dancer stack.
00:38:54.170 - 00:38:54.486, Speaker B: To.
00:38:54.508 - 00:39:26.610, Speaker C: Kind of get some more performance there. But, yeah, I think once it's been running and people are like, okay, I'm ready to make more money with this thing. We're hitting capacity. Can we increase the block space by, like two or three or ten X or whatever it is? Then it's like, okay, are people going to run both? And is the salon elabs client just going to be, like, hundreds of blocks behind because it's trying to chug through all this stuff and that's where it gets a little murkier.
00:39:27.670 - 00:40:07.040, Speaker D: So you talked about at a high level. What we're talking about here is optimizing the living hell out of the client to get as much performance as possible on the L1. And if you zoom out a little bit, many people, probably the majority of the industry, doesn't actually agree with that approach, right? They will say, well, the L1's job is not that. Maybe it's mostly for consensus making, running full nodes as accessible as humanly possible, even if the incentives aren't there. And then maybe there's data availability that we must consider. And then let's offload the execution to the L two s. And then Salana is kind of saying like, okay, fine, but we're going to do this way.
00:40:07.040 - 00:40:18.370, Speaker D: Liam, I want to start with you. Why do you think? Because obviously, presumably you're working on this because you believe in scaling the l one more than the alternative. Why do you think that's the right approach?
00:40:20.870 - 00:42:15.810, Speaker B: Well, I think if we're going to talk about as compared to Ethereum, the whole point of the roll up thesis and the l two thesis was that this gets us scaled to where we need to be so that they could have done sharding, right, and then eventually do the full dank charting. And then you have the zero know, beautiful landscape where you have not infinite scale, but you have way more scale in theory than would scale a lot better than Solana, at least in glorious future, where we have hardware for zero knowledge. But that's just taking a lot longer than I think anybody expected or signed up for. And so I think people have accepted that that's now thesis is l two. And so at least personally, I saw this coming way earlier and kind of decided, hey, this whole l one thing, right? We just got to sit down and rewrite some of these guys and maybe we'll have like an actual thing that we can actually scale to something that can run multiple major applications, right? If the question is kind of like, why would I do this? I think it's really that it's all about the fact that, hey, the goal was actually, with all of these things, was to eventually go back to the l one and do everything with the zero knowledge stuff and all the vertical trees and all that craziness, right? So wait a second, why don't we just work on the l one thing all at once? And that was a big motivator for why I ended up joining fire dancer.
00:42:15.890 - 00:43:07.750, Speaker C: Yeah, I don't think anyone's tried anything before. I feel like everyone's just kind of like throwing up their hands and they're like, oh, this won't scale. And so we're just going to create these systems that will scale, but take massive shortcuts or they tend to compromise in certain areas, like decentralization. Obviously, I'm very biased in Solana, have spent the last three years of my life thinking about Solana basically every day. And so I feel like there's a lot more juice to squeeze out of this. And I think we're also seeing this with Ethereum too. Like the paradigm team in Georgia is building ref and making that very fast and very efficient.
00:43:07.750 - 00:43:26.880, Speaker C: And what if people spent all this time focusing on L1s and trying to maximize that versus building all this l two infra that compromises on some of the things that we came here for in the first place?
00:43:28.370 - 00:43:46.710, Speaker A: Well said. I'm curious how you square that with the idea. I was listening to a podcast yesterday and Truan was on it, so I have no idea if this is accurate or not, but one of his points was Ethereum obviously moves pretty slow and they have a reason for a lot of that. One reason, he said, is also because you have four client teams at least that are trying to work on these upgrades together, because at the end of the day, they have to be able to work with each other.
00:43:46.860 - 00:43:47.622, Speaker C: Do you see?
00:43:47.676 - 00:44:19.418, Speaker A: Let's just assume that fired answer doesn't become the only client, Solana. Let's assume there's more than one. Say there's like three to pace. How does that slow down the pace? So R1 question would be like the scheduler, would this affect how quickly that scheduler could roll out? Because Tarun's example was like billions of dollars of equity value has appeared out of Ethereum. Moving slow by that he's talking about, for example, is like, if you only had one client, maybe they could already have dig sharding. And instead of Ethereum capturing that value, now you have all these companies popping up. So I'm just curious, how do you see that playing out in Solana?
00:44:19.514 - 00:44:57.340, Speaker C: It's definitely going to slow things down. I think that has been Solana's superpower up until now. Having a single client, they've been able to move extremely fast. There's kind of like less stakeholders involved. Ultimately, client teams have a lot of say in what happens. And also when you get more people involved and stuff, to your earlier point, why not throw 50 engineers at it? It's like, what's the saying? Like nine women can't make a baby in one? Just engineering doesn't work like that. I don't think anything works like that.
00:44:57.340 - 00:45:33.826, Speaker C: So I think it will slow things down. But I think also if you get the right people involved. Solana is a very engineering focused chain. There's been a lot of rigorous engineering involved with it today. If you want to build a Solana client, you have to be partially crazy, but also very talented as an engineering team. And so I think that while it might slow things down, I think that if you get the right teams involved, it can potentially speed things up. And I could definitely see that happening with Solana.
00:45:33.826 - 00:46:02.750, Speaker C: I think at least, talking to some people at fire dancer, there's a few things in the protocol where it's like, oh, if we switch to this algorithm, that the labs team, they weren't aware of it, or maybe they weren't aware of that. This new algorithm that leverages hardware with forex efficiency, then maybe that will actually speed things up, because you end up going down like lesser rabbit holes.
00:46:05.110 - 00:46:25.122, Speaker B: Yeah, I'll give my piece on we, I'll tell you right now, Solana's development and this pace of things has already slowed down, and not necessarily so, like things like the scheduler, those scheduler improvements actually only affect, really, the individual clients.
00:46:25.266 - 00:46:25.960, Speaker C: Right.
00:46:26.490 - 00:46:38.140, Speaker B: I could write my own, actually, today, Garrett, if you really wanted to, you could go and replace the scheduler yourself. Right. And it wouldn't break anything. It would just change how, when you're the leader, you build blocks. Right. So.
00:46:39.150 - 00:46:39.878, Speaker C: Totally.
00:46:39.974 - 00:46:57.122, Speaker B: A lot of things like that are doable today, where it's performance improvements, and again, they're shipping those without us. We don't have to be a part of that. They just ship that. These performance improvements. Right. There are some fundamental things that, like, okay, these are part of the protocol. We have to go back and change them.
00:46:57.122 - 00:47:26.780, Speaker B: And that kind of stuff has slowed down a lot, but not in a bad way, more in like, okay, let's sit down and really think about the problems. Right. Because we want to make a very precise, small change. Solana is actually a really quite good protocol. Right. Things like the account model make a lot of sense. Things like the way the virtual machine SVM is kind of laid out largely makes a lot of sense.
00:47:26.780 - 00:47:41.822, Speaker B: And so there are pointed things now where we're like, okay, there was a proposal about, oh, the priority, half the priority fees being burned right now, that makes no sense. That's a pretty pointed kind of proposal. Let's go and fix that.
00:47:41.956 - 00:47:42.640, Speaker C: Or.
00:47:45.090 - 00:48:44.418, Speaker B: Sometimes there are a few things that we're kind of holding on to now where it's like, oh, there's this little kind of esoteric thing that's right over here that everybody has to do. But if we didn't have to do it. It would give us back, like, 10% or 20% in this one part of the whole kind of picture of the performance picture. Right. So we're doing a lot of that. And then also with the bigger stuff, they're also stepping back and saying, okay, but how does this now affect another client? And I think at least what I've heard from some people from labs is that that's really helping them sit down and really think about the design and the implementation and how that just kind of, is it generally a good idea to do this thing? Is it generally a good, does this help? Are there other reasons why doing X actually helps the network, other than know patching something that's not working well? Right.
00:48:44.584 - 00:48:56.422, Speaker A: I think you just answered this, but is there any reason for the teams of Solana to be slower with upgrades just because it pushes out the Runway for you working at fire dancer? Because I'm assuming all these upgrades you have to introduce as well.
00:48:56.556 - 00:48:57.286, Speaker C: Yeah, exactly.
00:48:57.388 - 00:48:59.686, Speaker B: And so that's a big part of it.
00:48:59.708 - 00:48:59.894, Speaker C: Right.
00:48:59.932 - 00:49:52.218, Speaker B: So there was a point where they were adding new feature gates and new features that were changed consensus on a fairly regular basis, and we've now caught up to most of them. But there was a joke running around in our team that at least once a month there would be a new hash algorithm or some new cryptography thing that they just pull in a crate for. We have to go and get Kevin Bauer's cryptography guys to come and rebuild it up from scratch. And so that's all kind of slowed down now. And it seems like it's letting labs focus on these performance things, which seemed TPS is a feature, right. So I think it's great, especially when the protocol is kind of in a good spot, excluding fees and a few other kind of minor little minutiae, things seem to be kind of in a.
00:49:52.224 - 00:49:52.780, Speaker C: Good.
00:49:54.510 - 00:49:57.270, Speaker B: Like, at least that's my impression.
00:49:57.430 - 00:50:43.758, Speaker A: Lucas, this is a quick one for you, just because as I'm listening this conversation, it popped up in my head. I bet a lot of people listening are thinking the same thing we were talking about. Whose responsibility is it that we have multiple clients? Should apps actually run more than just one client, like fire dancer and labs, for example? And then my mind jumps to Jito, because so many people run Jito, and you now have Jito Sol, which is the staking product, which reminds me of lido, which the Ethereum community is putting a lot of pressure on them to choose the correct. I say correct. Whatever they think correct is validators, and that could be validators that use certain clients so that you have diversity, a lot of responsibilities on that team. I'm curious how you think about it, but I want to frame it as on Salana, there's only a 5% staking rate or liquid staking rate. So it's not like much of that's actually under GTO.
00:50:43.758 - 00:50:44.778, Speaker A: But yeah, I'm curious what you think.
00:50:44.784 - 00:51:17.560, Speaker C: About that right now. Yeah, I mean, ultimately, it's up to jido governance to decide these things. I don't really have a say in it. I guess my personal take is that I think if judo Soul continues to grow, I think it will become more important. I guess right now it's mainly like Jeto Salana, or Salana labs. They're essentially very similar, like 99% or 98% of code shared. I think when fire dancer goes live, it will be interesting.
00:51:17.560 - 00:52:33.710, Speaker C: Keep coming back to Stakenet. But Stakenet has the ability to track these things on chain, and so that's something that if someone feels strongly about it, they can go and make a governance proposal like, hey, there's the Jeto Solana client, the Solana Labs client, fire dancer sig. Right now, the delegation algorithm does X when taking into account validator clients. We think it should change to where it's like one third each, or we think that you could go the opposite direction and we'll take whatever one pays more. So it's kind of just like it's up to governance to decide. But I do think that as more clients come online on like a multi year time horizon, looking at like two, three, five or more years, you need to take into account the validator client that's running on the liquid staking protocol. The cool thing about Solana with staking is that it's all delegated, so you can kind of pretty easily move stake around to new operators that are running certain clients.
00:52:35.490 - 00:53:20.074, Speaker D: While we're on the topic of staking, I do want to quickly touch on one of the most common criticisms of Solana, which is sustainability, let's say, of validators. And, Lucas, you're probably the best person on the network to answer this. First, I'm curious to get your thoughts on kind of that criticism. I'm sure you know what it is. I know you guys also have, and I know that whenever I post a chart of the priority fees, you'll also post the MEB fees. And you're like, well, Jiro is also doing quite well and enabling validators to earn more. And then you also have something called Stakenet that I know you guys released recently, or at least you finally wrote about it.
00:53:20.074 - 00:53:25.274, Speaker D: So thank you for that. So if you want to just also talk about that as well.
00:53:25.392 - 00:54:02.034, Speaker C: Yeah, I mean, I think there's a lot of things that are happening that will make validator profitability better. One is the thing that Liam suggested earlier where 100% priority fees go to the validator instead of this like 50 50 burn thing. That should help a little bit. That's just like a good change in general to have. It encourages less, like side channel payment, but also it just makes validator profitability better. They're earning 50% more. There's definitely a long way to go for transactions.
00:54:02.034 - 00:54:34.414, Speaker C: Salona can handle whatever, like 5000 or 10,000 transactions per second. That's not the actual demand, it's much lower. So getting more activity happening on Salana will help a lot. There will be more priority fees involved with this more activity. And if there's dynamic base fees, then some piece of that will be burned, which somewhat helps the price of Solana. Unclear how much that will help. And then, yeah, I think also we've seen this play out on Ethereum.
00:54:34.414 - 00:55:08.190, Speaker C: I think it's still pretty early on Solana, but Mev might be a controversial opinion. But I think it's like as a block producer, you kind of are able to build the block however you want. Your main motivation is profitability. That's like one of the main value captures for L1 tokens. Eventually l two tokens will follow. We're seeing a lot of protocols take MeV into account now. And I think that Mev will continue to play increasing role in valid air economics.
00:55:08.190 - 00:55:18.014, Speaker C: And yeah, I think over time the inflation rate goes down. So there needs to be something else that kind of accounts for that in increasing profitability.
00:55:18.142 - 00:55:37.080, Speaker D: And then Lucas, you guys at Jeto announced Stakenet. Can you talk a bit more about that? I know it opens the room or the conversation up for restaking, which is a hot topic. So curious how you would describe it to just other people who are not familiar with it and how to think about it.
00:55:37.450 - 00:56:29.610, Speaker C: Yeah, so when we originally designing Stakenet, it was mainly the focus on liquid staking tokens and to dumb it down the dumbest way possible. I think you can basically compare it to like there's a brain that operates these liquid staking protocols. Right now this brain is off chain. It's running on some gcp server, AWS or whatever. And that brain has like eyes and ears and it's pulling this data from APIs and RPCs and all this stuff. And so that brain is pretty centralized. The main motivation behind Stakenet is basically moving this brain on chain and moving as much of the eyes and ears and sensing ability for this brain on chain as well.
00:56:29.610 - 00:57:44.180, Speaker C: So for the eyes and ears, we have the valid air history program. If you go to judo network, stakenet, you can see the data that these eyes and ears are collecting. The brain is currently wrapping up brain surgery right now, but basically figuring out how to run a stake pool. One thing that we're working now is how do you avoid churning stake pools? If you're constantly redelegating, then you're losing yield on that. And how do you kind of prevent this constant churning, but also like long tail scenarios where something happens and there's like a mass destaking event from the stake pool? I was thinking about over the past few weeks, and I think that it can be much more generalized to not include liquid staking protocols, but basically anything where you want to allocate resources across some network of nodes. One potential use case for that could be restaking. There's probably other use cases as well.
00:57:44.180 - 00:59:08.502, Speaker C: Like, hey, there's these things that are operating these networks, and there's some way to quantify their performance and decentralization and whatever other characteristics you care about. And maybe there's ways that this, like putting this brain on chain can result in these networks being more decentralized and autonomous. So you don't have to get governance involved for every single decision that you make. Because I think a lot of these restaking protocols in Ethereum, for instance, there's going to be a ton of abs or actively valid services that are running. And how do you choose which service that if you're a restaking protocol, you have all this staked Ethereum or liquid staking tokens trying to decide where do you allocate it? You could just say like, oh, we're just going to allocate it to these people, or hey, we're going to do it, allocate it based on this governance vote. But I think that autonomy and having this feedback loop for these protocols will be important, so you can kind of run it off chain. The cool thing about Solana is that compute is so cheap and you can blast like tens or hundreds of thousands of transactions on chain to kind of update the eyes and ears and brain.
00:59:08.502 - 00:59:14.734, Speaker C: And I think that there's some other potentially interesting use cases for this in.
00:59:14.772 - 00:59:31.140, Speaker A: Areas outside of liquid staking, stakenet is super cool. Lucas and Liam, I'm both curious, just like high level, what do you think of restaking and Lucas, when I'm shilling judo to people and I can talk about your liquid staking token, the MEV client, can I also now say that you're getting involved in restaking, or is that not a thing yet?
00:59:32.310 - 00:59:39.090, Speaker C: It's not a thing yet, but definitely researching it. I like how Mert went off camera.
00:59:39.450 - 00:59:40.518, Speaker A: This topic is not.
00:59:40.604 - 01:00:16.674, Speaker C: No comment, but no, I think it's pretty interesting. I think a lot of the. When you look at restaking Ethereum, there's just so much you can't really do on the base layer because it's so expensive. So it's kind of like the l two thing where there's all these l two s popping up that do different things, and you have roll up as a service and coprocessors and all this crazy stuff. It's just like, let's just do this. On Solana. I think that's pretty cool, this machine to machine communication there.
01:00:16.674 - 01:01:07.920, Speaker C: On Solana, I don't think that my personal take on restaking is. I think, I don't hate as a whole, but there's definitely going to be certain use cases that people probably shouldn't endorse. And hopefully people can avoid those use cases or creating things that are systemically risky. But I think that it's very useful in certain contexts. Like if you need a lot of security on a network, then being able to use liquid staking tokens or staked assets of the L1 can be useful and kind of avoid potential death spirals of protocols if there's some issue that pops up.
01:01:09.750 - 01:01:59.700, Speaker B: I haven't followed the restaking stuff as much. I know that there's a lot of that discussion on Ethereum as well. I will say this, and it's kind of my short answer to kind of a very complex question, and I think Lucas kind of was dancing around it. It turns out native staking is extremely powerful and it would be interesting to see if some other bigger networks also decided that, hey, maybe we should probably look at this because it does enable a lot of other use cases that are very useful for internalizing onto the network or building l two s and things like that.
01:02:00.390 - 01:02:53.762, Speaker C: Yeah, I think one more point too, that I'll add real quick is I think just because of the way Ethereum is built, I think restaking is like this very specific thing. But I think when you look at it on Solana, it has the potential to not like, if you build restaking on Solana, it doesn't have to be with staked soul or like liquid staking tokens like, at the end of the day, a lot of stuff's just like SPL token. So if you build a network or code that has restaking type logic, where there's these node operators and people are delegating to them and they're using some asset, it doesn't have to just be liquid staking tokens on Solana. It can be like other SPl tokens, like you could use like USDC if you really wanted to. So I think that's pretty cool.
01:02:53.896 - 01:03:12.650, Speaker D: Let's end on a fun note and maybe more of a lizard brain note. I would like you guys to give one hot take or one hot prediction that you have for the year. It can be about anything within the context of crypto. And one thing you would like to see from the salon network.
01:03:17.230 - 01:03:27.134, Speaker B: Try to think this is a hard. There's a thousand things I could say. I could say that you can be here till like eight or 09:00 p.m.
01:03:27.172 - 01:03:30.250, Speaker D: Or something, list it, just do a whole rent.
01:03:30.330 - 01:04:13.582, Speaker B: I'll answer your second question first. My goal is that we actually see some of the fire dancer code. Outside of just the use for salana, the use for blockchain, there's like a lot of code in there. We've got a really fast Ed 250 519, which is just a cryptography protocol, right. We've got one of the fastest ones there. That was what was demonstrated at breakpoint. We've got a whole bunch of other really high performance things sitting in there that they're not going to see Mainnet use on Solana for some time.
01:04:13.582 - 01:04:51.854, Speaker B: But these are general purpose libraries. Anybody could pull them in. So it'd be cool to see those kind of. If someone wants to pull them into their project and play around with them, they should. It's all open source, and so it'd be really cool to see that. I think my hot take, and I'm going to be really generous, actually. I think my hot take is that we're going to see a lot of really good work, and like I mentioned this before, but we're going to see a lot of really interesting performance work coming out of labs.
01:04:51.854 - 01:05:17.522, Speaker B: I think people don't think some people are like labs. I used to think that labs, how did they get to this state? They'll never be able to fix it. It's all lost. It seems like I was very wrong, so I'm happy to be wrong about that. And I'm excited to see, and we're certainly talking to them a lot about if you did this, it would fix a lot of stuff, and I think they're actually seeing that, and we got to do this.
01:05:17.656 - 01:05:22.574, Speaker C: Nice. All that code. What's the license on the code for that? For fire dancer?
01:05:22.702 - 01:05:24.126, Speaker B: I think it is Apache.
01:05:24.238 - 01:05:42.630, Speaker C: Yes. Nice. Very cool. Cool. Yeah. My hot take is, I think Solana is a focus, like, the core protocol. People and the foundation need to focus a lot more on mev.
01:05:42.630 - 01:07:08.450, Speaker C: I think it's going to come increasingly important on Solana, and they just need to be thinking about it much more than they are today. I think a lot of stuff on Salana was designed when they didn't really know about MEV, like using UDP, for instance, and people spamming 50 or 100 gigabits of transactions at these boxes during the NFT mints and arbitrage, and that just, like, not really thinking about MEV or traders or people abusing the system. But I think quick, no matter what your feelings are on quick are, I think you can say that it definitely improved the performance and, well, improved the performance and reliability of the network. Obviously, people have mixed feelings on quick, but there's probably something in between, just straight UDP protocol, less UDP and quick that can continue to address it. Yeah. The thing I'm looking forward to on Solana network are just more people building on Solana, more people participating in hackathons and building products and protocols that can really drive the success of Solana. I think we're all, like, deeply.
01:07:08.450 - 01:07:46.466, Speaker C: I guess we're all working on infra here, including Garrett, with his new position coming up soon at squads. And the success of the Solana protocol is something that we're heavily tied to. Mer, Liam, a lot of people are, even the DeFi protocols. And so I want to continue to see really talented builders coming into Solana and starting to consider it more and starting to make Solana their home and build more tooling for writing on chain programs and testing and all that stuff. Very well said.
01:07:46.568 - 01:08:16.346, Speaker B: I do have one hot take, actually. Quick needs to die. If it doesn't die, there's no hope. There's just no way we're going to be able to. I think there's definitely intermediate, but also, if you're going to be a professional, you got to handle all the packets you're getting. If you can't, then you need to sit down and really think about your life and consider your life choices and how you got to this point. So just handle all your.
01:08:16.346 - 01:08:35.194, Speaker B: If you're a network engineer and you're listening right now, just handle all the packets. Or if you're working on a blockchain or you're doing something, figure out how you handle all the packets and then decide that you need a protocol to fix all that. Because you don't actually need any of that. You don't need it yet.
01:08:35.332 - 01:08:39.794, Speaker D: Send this directly to Tolly. They're on board.
01:08:39.832 - 01:08:51.000, Speaker B: We've said it so much at this point, we've just been screaming at Richie and all of us are like, quick is not no work. So I think they got the message.
01:08:52.490 - 01:08:52.950, Speaker C: Nice.
01:08:53.020 - 01:09:12.446, Speaker A: I think it's a good way to end it. Lucas and Liam, thanks for coming on. Lucas, you were talking about bringing in talent to the ecosystem. Really do appreciate you guys coming on the podcast because I think this is huge. Just the transparency, you guys talking and getting away from building the apps and the research forms for a bit. A lot of the other ecosystems just don't have that, and that's the only way people find out about Salana and what's going on. So, guys, thanks for coming on.
01:09:12.446 - 01:09:13.486, Speaker A: This is a lot of fun.
01:09:13.668 - 01:09:14.846, Speaker C: Thanks for having us.
01:09:14.948 - 01:09:15.758, Speaker B: Thank you.
01:09:15.924 - 01:09:29.182, Speaker A: All right, we'll see you next time. All right, I've got a little ending note here. First, thank you so much for listening the full episode. If you really liked it, hit subscribe. But secondly, make sure you sign up for Dash. This is Blockwork's biggest institutional conference happening in London in March. I've included a link in the show notes and also a discount code.
01:09:29.182 - 01:09:35.330, Speaker A: Get 10% off. Make sure to use lightspeed ten when you sign up. All right, I'll see you there and I'll see you next time on Nightspeed.
