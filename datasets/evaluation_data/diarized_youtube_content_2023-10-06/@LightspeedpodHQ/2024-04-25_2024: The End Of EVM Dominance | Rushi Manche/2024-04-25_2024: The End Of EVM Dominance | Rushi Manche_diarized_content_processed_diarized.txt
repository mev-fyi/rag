00:00:00.560 - 00:00:31.605, Speaker A: There is a life beyond the EVM. So my market prediction is over the next three or five years, especially as these next gen l two s on Ethereum and next gen l one s really take market trends. A everyone in the EV system is needing to adapt because next gen, we have simply better. They're called next gen. They have higher throughput, better scalability. So the thesis is, I think 2023 is the year of all Das. And I think 2024 is actually the year of the VM, where people wake up and realize EVM is an end all, be all, and it's actually better user experience than other evms.
00:00:31.762 - 00:00:58.956, Speaker B: This episode is brought to you by helium Mobile. Theyve created a crypto native phone plan for unlimited talk, text and data for just $20 a month. Well chat more about them later in the show. Before we get moving on todays episode, just a quick disclaimer. The views expressed on this podcast by either myself, my co host, or any guests are their personal views and do not represent the views of any associated organization. Nothing in the episode should be construed or relied upon as financial, technical, tax, legal, or. Or any other advice.
00:00:58.956 - 00:01:23.420, Speaker B: Okay, let's jump into the episode. All right, everyone, welcome back to another episode of Lightspeed. We are joined today by Rushi, the co founder of movement Labs, which is building a network of move based blockchains. But we got some big news today, Rushi. You guys have just announced a 38 million series a round. So, first of all, congratulations. That's awesome.
00:01:23.420 - 00:01:41.634, Speaker B: I think that's one of the larger, uh, you probably know better than I, but I think it's one of the larger raises in recent times in the, like, high throughput space, more broadly. Um, so let's. What was the pitch to investors, man? Like, what. What's, uh, what is. What's. What is really at the core of what you guys are building? Um, and I'd love to get the problem that you guys are solving as well.
00:01:42.134 - 00:02:03.754, Speaker A: I need a quick background and my kind of us and our mission. Right? So, uh, me and Cooper were two, like, college kids about two years ago. Um, I was a freshman, Cooper was a senior, and we were just. I was just early builders. I've been coding since I was 14. Got into Cosmos, Ethereum early on. Just engineering and cosmoism and solidity.
00:02:03.754 - 00:02:50.444, Speaker A: And quite frankly, it was horrible. Right? Like, the user experience, developer experience, high gas fees. I think everyone involved in the early Ethereum days kind of knew that the EVM wasn't great, but kind of went along with the ride until it became a bottleneck. So then I was a freshman in college, I read this article that said Facebook is building a programming language to power the stable coin for billions of users on Facebook. And that kind of got me going because I was used to these small blockchain environments that really had no users, had limited bandwidth in terms of performance. And here Facebook was building a new framework to really address that. So August 2022, I built one of the first applications app desk system, which, for those that weren't familiar, spun out of the DM project, which is from Facebook.
00:02:50.444 - 00:03:39.814, Speaker A: And then my co founder built like a yarn fork on top of us, on top of the app ecosystem. I think from there it was like post FTX that really got us going, that we really love move language. I'm happy to get more into the thesis later on, but moves designed to be the fastest and most secure va on the market, obviously a block SDM, which has inspired many of the recent innovations of parallelization, like Monad, even Polygon Pos at one point have been inspired from BlocksTM. So bringing that to Ethereum as well as the whole formal verification ground, really looking to be the most secure way to place our contracts. So kind of the generic pitch and narrative to investors and public was, look, Ethereum is good. It has liquidity security. But smart contract developer environment on Ethereum is flawed.
00:03:39.814 - 00:04:21.704, Speaker A: A, transaction fees are way too high, it requires fractal scaling to even remotely scale, which means like l three s, l four s, l five s, which makes no sense, and b, the security is really flawed. There's four and a half billion dollars lost every year, smart contract hacks. And my thesis was, how do I get my college friends to use crypto, right? Anytime I bring it up to them, they're always like, if I buy eth and put it on chain, it's going to get hacked. Which, to be fair, is a good and fair assumption to have. So I think movement is really pushing forward two main angles on Ethereum. The speed next gen narrative realization, and smart contract security, which unfortunately isn't as hot. But we're trying to make security sexy again.
00:04:22.204 - 00:05:08.584, Speaker B: That's the tagline of the century. Let's make security sexy again. So actually, I want to unpack why that is, because a lot of the times you hear people trade off between these newer, maybe more secure, more performant vms and the EVM. The pitch for the EVM is like, yeah, well, the developer tooling is more robust, foundry is ingrained in the process, and developers enjoy it, and there's a lot of developers that center around the EVM. Do you think most of that, as far as both of those things, really, the fact that there's a lot of developers there today and the tooling is at least has been being iterated on for a couple of years now, is that just a function of the EVM being first? And that's what everyone had to code us around for there to even be like a smart contract building industry?
00:05:09.284 - 00:06:07.392, Speaker A: I mean, if you look at the early web too, like the oldest programming languages have the most, you know, have the earliest developers have the best tooling, but we're looking at a very small lens, right? So if we're able to kind of take a step back and realize that this is a byproduct of where in an early industry and EVM was like first to market and you got early developers and early tooling, that isn't that great, but good enough, then you kind of say like, okay, there's actually other languages that can quickly surpass the tooling and benefits of the EVM. I think Solana VM is the best example of this. I think Solana is kind of the cycle shown. The a is kind of the hub for developers and even users these days, and b, there is a life beyond the EVM. So my market prediction is over the next three to five years, especially as these next gen l two s on ethereum and next gen l one s really take market trends. A, everyone in the EV system is needing to adapt because next gen, we're simply better. They're called next gen.
00:06:07.392 - 00:06:21.016, Speaker A: They have higher throughput, better scalability, so that those core input providers, like the metamasks, the infurias, the Coinbase custodies of the world are all going to understand that and eventually migrate over. And we're always seeing that with Solana.
00:06:21.080 - 00:06:44.404, Speaker B: Up just in Sweden today, mostly the transition has been EVM was first. Solana really proved the SVM was valuable and you could get some increased speed. Right. They introduced parallelization at the execution level. And then like, what is the next, like, what is the evolution of move? Like, what is that really unlocking? Is it, is it additional performance or is it really on the security and the security side of things?
00:06:44.744 - 00:07:22.558, Speaker A: Yeah, so I know after, since we are working on like addressing the congestion, things we're seeing in Solana, so I think they already have a fix. Right now we're having transaction batching consensus, but really what we're focused on is security. Right? So you had like the SVM and these parallel svms really fix the localized fee, but fix it with localized fee markets and pay execution for higher purposes. Move has those same benefits, if not better, but also focus on security. So, for example, the EVM is four and a half billion dollars lost every year in smart contract hacks. Things total like 7.8 billion, and it's already with only ten users on chain.
00:07:22.558 - 00:08:22.926, Speaker A: So if you ever get to a point where you actually have real capital, really users, my mom is going to be comfortable deploying funds on top of the EVM. Even SVM is great, but there's been numerous attacks like Cypher, and there's every attack probably a month, whether it's smart contract exploits or just general rust based framework issues, move is designed with the move prover built into mine, which is one of the most important innovations in form verification history. Essentially, for those that aren't familiar, is the moveproover lives within the VM and checks for bytecode and memory, safety, connectivity, directness. So traditionally, when you have a smart contract, let's say, for example, there's integer overflow in the EVM, there's nothing stopping that smart contract for executing. So, like curve Kyber, these blue chip defi protocols on EVM, they were fine. One day there was a new batch, a new push in GitHub that updated their state updated contracts, and there was a human error issue. I think in the case of Kyber, that was like a 99.99%
00:08:22.926 - 00:08:49.726, Speaker A: attack vector where there's pretty much. No, it's actually 0.001% chance of actually finding it. So I think for that, it's like it comes down to human error, ultimately, which you need a software to kind of monitor. So move prover from the move VM checks for runtime safety. So it's a unique benefit that helps for account checks, safety checks. The easy example is to run in depth account checks for the movie.
00:08:49.726 - 00:09:03.454, Speaker A: I mean, it takes about ten lines of code. For Solana, it takes about a page or so, and then EVM takes weeks to even do end to end account checks. So the velocity production for the movie in terms of security trade offs is much quicker.
00:09:04.034 - 00:09:25.174, Speaker B: And is it just not possible to say, okay, to effectively create, to bring these security unlocks back to the EVM? Why does it make sense to evolve away from the EVM and build these new languages versus going the other way where you're bringing the innovations back to the EVM?
00:09:25.594 - 00:09:50.304, Speaker A: Yes. So we actually support EVM as well. One of the core thesis of movement is that we acknowledge EVM as legacy code curve Aaveswap. These Bluetooth defi protocols have a clear PMF on the EVM. And if you want to use curve, it's probably best to use it on the EVM today. Even though the security issues there's still the most amount of liquidity there users there. So with that we have an EVM interpreter.
00:09:50.304 - 00:10:30.656, Speaker A: So you take this literally 142 opcodes, you map it to 54 opcodes and you're able to do EVM translation directly on the move VM. So what that enables is we actually have backwards compatibility for any solidity code. So if you want to deploy Uniswap on us, you have Ethereum smart PC metamask compatible, it works, talks and looks like an EVM. So we can support legacy contracts, but it's clearly marketed that if you want high performance, if you want better security, you have to write move. So with that dual kind of approach we have short term solvency for the cold start problem we see with next gen vms, and we have long term solvency because we're doing a lot of developer adoption and pushing forward to move narrative in markets that have never seen it before.
00:10:30.840 - 00:10:56.716, Speaker B: All right, let's take a quick break to talk about helium mobile. Every month I'm reminded of the pain of a phone bill. For someone who is terminally online, those tainted charges are no joke. Well, helium Mobile is bringing a crypto native solution to this. Its powered by a combination of a decentralized wireless network and the nations largest 5g network to bring reliable coverage to its users. The coolest part for me are definitely the mobile token rewards. Theyre earned by sharing a location which allows more people to build coverage where its needed most.
00:10:56.716 - 00:11:24.330, Speaker B: So effectively the token rewards end up bringing a better product to the customer. But even cooler, you can take these rewards and pay for your phone bill directly within the app. This is a beautiful showcase of arguably cryptos, two strongest use cases, incentivized user action and crypto payment rails. The phone plan is unlimited talk, text and data. Plus it's affordable at just $20 a month. If this sounds interesting to you, go to hellohelium.com to get three free months of service with the code lightspeed mobile.
00:11:24.330 - 00:11:49.834, Speaker B: Again, that's lightspeed mobile. All caps, no spaces. Be sure to check out the link in the show notes for easy access. Alright guys, let's get back to the show. Okay, that's really interesting. So let's say on a chain built on this stack, which we'll get into here in a second, let's say I write a contract in EVM, you write a contract in move. They both live on the same chain, there's still full composability between those two contracts.
00:11:50.134 - 00:12:19.962, Speaker A: Yep. There's two main things. A, we have a shared sequencer. So let's say, for example, you have EVM specific app, and you have a move app on the main roll up hub, which is movement fracturel two, we actually have a shared sequencer that can receive and zero out transaction between the two for rollups. And second thing is obviously the two different token standards. You have Aptos coin, which is the move token standard, and you have ERC 20. We have something called universal token standard, where we're able to put wrappers around the Aptos coin standard and make it look like ERC 20.
00:12:19.962 - 00:12:31.614, Speaker A: So we're able to essentially do atomic composability between any. Let's say you have Tala, which is Aptos, and you have uniswap, which is on ERC 20. Obviously they will function, function the same.
00:12:32.494 - 00:12:41.062, Speaker B: Gotcha. Okay, so you couldn't then. So that would be two separate roll ups. But could you have a single roll up that was like leveraging both languages as well?
00:12:41.238 - 00:12:55.714, Speaker A: Yeah. So the main product is movement, which is the move layer to an ethereum thing, like optimism. And if you have, let's say like tala, which is an Aptos protocol. Aptos move protocol. And then you have uniswap, they can interoperate because one token center called a universal token center.
00:12:56.214 - 00:13:08.664, Speaker B: Sweet, man. Okay, so that's a good segue. So let's, let's talk about the stack here. So to me, it feels like a roll up framework that also comes with a native shared sequencer. Is that a fair description?
00:13:09.284 - 00:13:37.862, Speaker A: I think it's just a move l two with a role framework. The playbook is very similar to optimism, where optimism is the main roll up, where liquidity is liquidity hub, that's movement. You have op stack, which is a role framework for launching roll ups. We have the move stack, which is an execution layer framework, which is actually compatible with all different role frameworks. And you have a shared sequencer, which is our m one or optimal cases to the super chain. So TLDR is. You have a flagship roll up called movement.
00:13:37.862 - 00:13:52.274, Speaker A: It's moved VM on Ethereum. You have a shared sequencer that sequences L2 as well as a L2s that join the network. So kind of the envision is this network of move based chains. But today, and the focus on domain is just launching the move role up on Ethereum.
00:13:52.914 - 00:14:02.418, Speaker B: Awesome. Okay, that's good. Let's start with the move roll up. On Ethereum, then. So what does that look like? Are you using Celestia for DA, or where is the data availability happening here?
00:14:02.546 - 00:14:37.844, Speaker A: Yeah, the current architecture is Celestia with data availability at the time Devnet and Testnet. Celestia is only live. Aging day went live last week. So the thesis is, I think 2023 was the year of all Das, where you have people charge, like, challenge, like dank sharding, and say it's going to be too far ahead. And Celestial and eigenvalue came to market. And I think 2024, I like to call, and actually call it six months ago, is actually the year of the VM, where people wake up and realize the evm isn't the end all, be all, and it's actually better user experience than other evms. So the architecture of the main movement chain is you have move EVM for execution.
00:14:37.844 - 00:14:51.146, Speaker A: It's a move VM with the evm interpreter on top of it. So we call it a paralyzed move evm. You have ethereum for settlement, you have cfa dA, and you have m one, which is our sequencer, um, that sequences alert to awesome.
00:14:51.210 - 00:15:10.894, Speaker B: Okay. And so, you know, you mentioned that the fractal scaling idea of, like, having l two s and l three s live on top of the l two s doesn't make a ton of sense. Um, what do you, like, what? Why don't you think that makes a ton of sense? Like, if you were an l two, uh, like, do you want, like, you are an l two, right? So you have m two. Do you want people to build l three s on top of m two?
00:15:11.434 - 00:15:53.886, Speaker A: I think it, like, we're welcome to do it if you want to do it, like, godspeed. Um, but I think it generally does make sense, right? The whole thesis of parallelization and having multi threaded processing is that you can actually add specific threads. Obviously, you know, if you have, let's say, an inscription events going on one thread, it shouldn't affect the user experience, and you swap another thread or game another thread. That's the thesis behind any counterpart svms. So if you have, let's say, in traditional eVM, you need fractal scaling, because a really big app on base that's going to clog network because only one thread. So you need to own l three. But then the issue comes, what if the l three clogs? Then you l four, and then with l four clocks, then you need l five.
00:15:53.886 - 00:16:13.134, Speaker A: So increase this constant demand and need for infrastructure, which is, quite frankly, unneeded. If you simply optimize the execution layer for L2. You can have processing for multiple threads in L2. So you don't need multiple roll ups, you don't need multiple infrastructure, you don't need multiple nodes, you don't need to pay all the infrastructure costs. You can simply optimize L2.
00:16:13.954 - 00:16:38.474, Speaker B: Right. And so when you think about that vision, that kind of aligns more with even like the Aptos Solana sui vision, where it's like, let's juice this layer and like, maximize the throughput, we can, um. So how do you think about the value trade off between, you know, building like an Aptos or Sui or Solana as an l one versus building movement as an l two or building the m two? Like, what is, what are the trade offs between the two layers?
00:16:38.514 - 00:17:21.450, Speaker A: There's, yeah, so I built one of the first Dexen app does. Like, my co founder also built the first shield diagram app does. And when we launched, the biggest issue was we had obviously, apt and test and token, like. I touched on the trade off. The benefit of launching alert two and doing the modular fashion is this concept of permissionless innovation, where if I want to launch my own custom app roll up, I want a custom Oracle provider, I want my customer bridging provider. I don't need to wait for a foundation or centralized entity to do that for me. So my biggest issue building on a layer one, is that I wanted to bring IBC into my app, but I couldn't because it's highly dependent on top of the layer one at the time, which is app dos.
00:17:21.450 - 00:17:50.306, Speaker A: They all have their own missions. It's not like a downside to them. They have their own narratives and things to push. But as an app builder with my own specific needs and my own target audiences, I want to be able to choose what assets are on my application. So with that, that same Dex that built up Aptos can add a point of movement. You have a aptos and sweep both protocols and both tokens, which was a big issue in aptos because for those that aren't familiar, aptos and sue me are completely different languages. Similar by code, but different languages.
00:17:50.306 - 00:18:24.644, Speaker A: So, for example, we're now combining both APIs and Sui on Ethereum. So that's already a big benefit. The second benefit is that you live on Ethereum, you have a native ETH, you can actually jump start liquidity for user base. So we actually have several near 8100 million of TbL already committed. And this is from family office liquid funds that didn't feel comfortable deploying funds in the past. And now, because it's L2 architecture is living on them. Security, annual form verification, built into the vm, they were actually able to bridge directly ETH to L2 and have it in a trust minimized way.
00:18:24.644 - 00:18:45.476, Speaker A: So that same dex can now have native eTH, ETH liquidity, eVM liquidity and EVM assets. Um, so the same decks can have access assets. We assets, native ETH, EVM assets. And we're actually working with union to be fully IBC compatible. So I've USDC off the bat. Tia, Adam, this you can see kind of the case I'm making. Right.
00:18:45.476 - 00:18:50.184, Speaker A: You have 30 or 40 more assets and asset classes, which makes the Dex a lot more useful.
00:18:51.244 - 00:19:08.388, Speaker B: What was the. What was it like getting IBC integrated to an l two? Because my understanding of that infrastructure, that construction there is, it kind of relies somewhat on the chain speaking, like, the tendermint consensus language. So what was that experience like?
00:19:08.556 - 00:19:38.872, Speaker A: Yeah, this is more of, like, unions role. What they're working on is CK IBC. So they can bring IBC to L2 other networks. So with that partnership, they're bringing out Sol lite client machines that can read the execution as well as read. So they're able to essentially take the IBC state and generate proofs. They're able to communicate between, let's say, our roll up osmosis, cosmos hub, celestia, or any other Cosmos media protocol. I'm a Cosmos guy.
00:19:38.872 - 00:20:15.974, Speaker A: I'm a cosmoxy, but I think the original Cosmos look was we're going to do all these Cosmos zones. The issue was those are all confederate states that no centralized force behind it. My general thesis and I tweeted about this is Cosmos is the Internet of blockchains and achieves that, not the tenderment, but through IBC. So IBC actually wins, and it's the most secure and trustless and actually, like, no central authority behind it. Bridging protocol. And yet they always transport layers on top of it, which can be layer zero, wormhole. We've seen every major bridge adopt IBC, and unions can directly bring native IBC to us.
00:20:16.814 - 00:20:38.086, Speaker B: Okay, no, that makes sense. And so, as a cosmos, Maxi, you got to be passionate about app specific block space. But isn't the l three vision sort of that, like, you want to live on top of the l two because you need your own kind of space. How do you think about the trade off between the app specific space but the benefits of being in a shared state layer?
00:20:38.270 - 00:20:54.812, Speaker A: Yep. So that's exactly why you have to move stack. Right. So we have some high profile candidates partnerships. We're announcing shortly they're launching their own custom move stack rule up. So what that means is they can use whatever role framework they use, opstack, CDK, CK stack, whatever, use whatever DL error. We're not competing on that.
00:20:54.812 - 00:21:28.832, Speaker A: My general thesis is that those both areas are crowded and raised to the bottom. Usually we're actually just focusing on execution layer. So right now, a lot of those kits are focused on do whatever, but use the evm. We're saying do whatever, but use a paralyzed vm on top of that. So we have a few big clients launching a movie vm roll up, use web roll up framework, use web layer, and connect to the shared sequencer. So my thesis is that l three s don't make sense, but custom l two s, their connection to a shared sequencer, make a ton of sense. If you're a deep end project, AI project, gaming project, you need your own block space.
00:21:28.832 - 00:21:38.220, Speaker A: You're correct. But you don't need to build on top of a L2. Just launch your own L2. Have your own community, have your own tokenomics, and stop paying rental evm, too.
00:21:38.312 - 00:22:15.474, Speaker B: All right, so we have m two as the flagship l two that's dogfooding the stack and getting it to market, improving it works, and then you're going to say, okay, well, come build with us. And I want to get to the shared sequencer layer after this. But let's start with the roll up framework stack. So how do you think about who should build? Should it be more general purpose chains? Like, I think OKX just launched their exchange layer. Coinbase obviously has base. M two is like, seems to be a general purpose chain built on top of Ethereum. Like, how do you think about more general purpose chains versus more app specific chains?
00:22:16.334 - 00:23:03.190, Speaker A: I think, well, a general purpose chain is like the way liquidity is usually like the TVL. The go to market base is kind of anomaly because they have a claim based distribution, so it can actually, like, surpass optimism. But that's also the vision, right? We envision the biggest consumer gaming and high profile apps have their own custom block space, their custom roll up that they want to have their own narrative. They want to say that they're actually l two, not connected to another narrative. So I think the general purpose l two is for the smaller projects, the DeFi projects, that you just kind of springboard. So Dexs usually will deploy on top of general purpose l two, liquid staking lending markets. These are kind of general purpose Defi apps, as well as any game that's trying to start off and be within a community.
00:23:03.190 - 00:23:33.606, Speaker A: But once a game, a social app, or even order book reaches escape velocity, and they're like, hey, we actually have users. So think Evo, hyper liquid Dydx. Once you reach that kind of level, it is in your interest to have your own block space, have your own tokenomics, and have your own kind of chain. So with that, the gem purpose l two serves as a springboard. And then once you're at escape velocity, you just launch your own chain of the stack. So we actually encourage rollups to join the network. Start off on a L2, kind of get your grounding.
00:23:33.606 - 00:23:41.034, Speaker A: If you're a defi app, you probably stay longer. But if you're like a gaming app, we want you to eventually migrate to your own custom block space because that's what's in your interest.
00:23:42.854 - 00:24:18.992, Speaker B: And then when building an l two today, there's two different paths, basically, that are most commonly taken an optimistic path and a zero knowledge or a zks path. And they have trade offs. And today a lot of the optimistics use their validity proofs as like fraud proofs, where you basically assume everything is true and you give everyone like a seven day window to make a challenge, if a challenge is found. I don't think a challenge has ever been found in practice. And so that model seems to be working. Of course, there's trade offs on. Some people don't actually have fraud boost live, but we'll assume that they do for now, for the sake of this discussion.
00:24:18.992 - 00:24:31.714, Speaker B: And the other route is ZK. And ZK seems to be faster, but more expensive. So how do you think about the trade offs between the two and which one kind of wins out over the long term?
00:24:32.334 - 00:24:55.452, Speaker A: Yeah, so our current architecture is EK fraud proofs. So it's kind of like the Venn diagram. We have zero knowledge and optimistic fraud proofs. The benefits of ZK fraud proof says you don't have interactive verification game. You can prove a single block as a fraud proof. It's very cheap because you're not running the proof every time you're doing a transaction. You have fast withdrawals and you have cheap transaction fees.
00:24:55.452 - 00:26:01.150, Speaker A: So the current integration for the roll up and the roll that we're launching is as you give our proofs, it doesn't really make sense to ZK next gen VM at the moment because, let's say, for example, you have a cent free transaction you're doing. If you're doing ten k plus TPS, it's pretty expensive. So current ZK infrastructure just can't support an external VM really, but we eventually envisioned on the five, six year lens that we're going to build out a ZK move VM directly from scratch with their own circuits. But today, ZKF Rock proves the best way to do it. So my general thesis is like, optimistic routes are really good, right? Like no one really cares about the challenge. What I learned really quickly, and this contrary belief is like, no one really cares about decentralization, normally cares about security often and actually struggle that we're facing, right? Like we're trying to make security sexy again in an industry where like munchables happens, which is a hacker attack of 50 million known bets, lie, or things like rollbacks happen for L2s, and it's kind of bad, but not really because users still use anyway. So in a long term landscape, yes, validity proof is the best way to go.
00:26:01.150 - 00:26:24.334, Speaker A: ZK ropes the best way to go, and that's where the market needs to head. But today, user experiences don't really care about that. So the question is, how can you deliver the best user experience? And what we found is that ZK, for our bruce, is kind of the perfect middle ground where you're able to essentially have the lower withdrawal times, have a better challenge periods, have better security assumptions, but not have to pay, like insanely high proving cost validity proofs.
00:26:25.434 - 00:26:37.654, Speaker B: To play Devil's advocate, if you wanted to truly give the best user experience, and no one cared about decentralization, just run a server, why does it have to be web3?
00:26:38.234 - 00:26:55.056, Speaker A: Exactly. That is a question. Actually. I spell a lot, but I think ultimately people want to be on chain. People want to transact on a blockchain with a distributed network. It's not like people don't completely care about decentralization. Like people still care that Salana is distributed, people still care that Ethereum is distributed.
00:26:55.056 - 00:27:33.276, Speaker A: They can run their own nodes, they can participate in governance. These are principles from early blockchain days that still apply. My reference is I generally push back on the concept of being you need to be Ethereum line, do you need to prioritize decentralization, censorship? You can never break the law. I agree that as long as you have some form of decentralization, you maintain the general rules. You should optimize for user experience. If it's zero, which is completely not decentralized, and ten, which is fully decentralized, it's okay to be a six or seven. And this optimized for user experience instead of going all the way down the right to nine and ten.
00:27:33.276 - 00:27:41.104, Speaker A: And focus end to end on this ethereum alignment, on focusing end to end on what's right and not actually having any users.
00:27:42.884 - 00:28:24.306, Speaker B: Right. No, that's totally, that's like a far too reasonable take to have. What are you doing? And so, all right, so we have this stack that enables you to build, or users to build more chains that all go down to this shared sequencer. And before we hit the shared sequencer, one of the problems that exists today with Ethereum's role planscape is the fragmentation of, it gets called the fragmentation of liquidity. But quite frankly, when you have three or four or five roles with over a billion dollars of liquidity, that's not the problem. The fragmentation is the fragmentation of applications. And me as a user, I want to use something on base, then I want to use something on arbitrum, and then I want to use something on ZK sync.
00:28:24.306 - 00:28:49.164, Speaker B: And now I have all these bridging transactions that it's just not, at the best case scenario is an extra transaction that I have to run to get somewhere else. So. And at the worst case scenario, it's a fucking miserable experience because it doesn't work. My funds get lost, Yada Yada. So how do you think about the interop solution? I know you mentioned IBC, and as a cosmos, Maxi, you know, the benefits of having good interop. So how do you guys approach that at movement labs?
00:28:49.784 - 00:29:27.890, Speaker A: So with the shared sequencer, I think that's kind of the better direction business, where you have multiple nodes that can sequence alert two as well as alert two s. So the vision is for movement network to merger leading shared sequence network. We have big roll ups that join the network. And if you want to use an application on one roll up versus another roll up plus another roll up is actually a seamless experience because you have one centralized or one shared sequencer. But obviously there's going to be other networks like arbitrams will have a shared sequencer. Optimum is going to have shared sequencer CK things working, shared sequencer. So you've always a big L2 systems launching down shared sequencers and respect systems.
00:29:27.890 - 00:30:14.980, Speaker A: So the question is, how do you connect all these different ecosystems? There's a few groups that are working on these things. I know you obviously have wormhole layer zero, which are the traditional bridges, but obviously some pushback on that with token standards and user experience. You have the IBC route, which has better user experience, but it's been mostly constrained to just Cosmos right now. But this team's working on bringing it out. I think my general thesis is I really like the chain abstraction, the kind of gold market where I know Nir's working on it, light protocol working on it, where if you want to simply use any app on arbitrum, movement, zika, sync, whatever, there's going to be a higher level interface that allows you to kind of navigate between different chains in one click. So we're working with some teams there. Shared sequencers are great, but that's like within our movement ecosystem.
00:30:14.980 - 00:30:56.524, Speaker A: So if you want the best ux within astronomy system, use our stack and state within the ecosystem. But if you want to go beyond that, I think it's going to be a combination of chain abstraction. Chain abstraction also connects intense space. So if you're using a Dex that's like intense Dex, you can essentially swap between different chains and networks at ease. And the last thing is, I really believe that IBMC takes over as the most secure bridging protocol and bridging standard. So if you have arbitrum, optimism, movement labs, all, eventually it's going to be iv's connected, it's going to be a similar feel like to cause today where you have osmosis, Juno, et cetera, and it's pretty easy to do swaps. I think that's the experience that once IBC has escape velocity, we're going to see that in borrowing today.
00:30:57.624 - 00:31:13.032, Speaker B: Cool, cool. And so let's dive into m one. M one is the shared sequencer. The architecture there is built on an avalanche subnet. So how do you. What was the decision to use the avalanche subnet for this layer? Yep. Yeah, let's start there.
00:31:13.208 - 00:31:40.694, Speaker A: Yeah. First of all, we don't really call it a subnet. A subnet is defined as something that stakes the Avax, which is the token from avalanche, as well as our native token. With the new proposal, we will be just taking our native token. So similar to just avail use a substrate, but it's not a parachain version, uses cosmos decay, but isn't a zone. We use the security assumptions of Snowman, but we're using the shared sequencer and we only take our native token.
00:31:40.814 - 00:31:48.848, Speaker B: Okay, so just to jump in right there. So basically you forked the avalanche infrastructure and then created a move vm on that.
00:31:49.046 - 00:31:56.492, Speaker A: It's not a fork. It's actually like part of allergen agenda. They're now enabling subnets to not require to take Avax.
00:31:56.668 - 00:31:58.828, Speaker B: Oh, right, right. So like ACP 13. Okay.
00:31:58.876 - 00:31:59.464, Speaker A: Yeah.
00:32:00.324 - 00:32:13.324, Speaker B: Gotcha. Okay, so you're. Okay. So you guys are like basically subnet only validators within the avalanche ecosystem, and then you're building on top of the infrastructure that they have. Okay, sorry. So you're talking about Snowman consensus.
00:32:13.444 - 00:32:30.718, Speaker A: Yep, yep. So we market as just using stomach consensus. The valors right now are extremely low hard requirements. It's very decentralized. You actually inherit all security that exists on the current island chic system. But we don't have to stake the native token, so there's no price action requirements. It's just our native token.
00:32:30.718 - 00:32:43.994, Speaker A: The valors take the token as part of sequence network. We're going to have 100 nodes start off with an eventually permissionless. The valid stake the token, and then those that stake the token can sequence the L2 as well as other L2s that join the network.
00:32:47.414 - 00:33:08.714, Speaker B: Okay, awesome. And are you guys like paying attention to all the work they're doing with the hyper SDK? And they have a new transaction processing mechanism called bricks. That's, I think just now they just put out the benchmarks. Is that something that you guys are looking at and eager to integrate, or is it mostly on the consensus side that you're like, look, Snowman is a very scalable consensus and that's what enables us to be powerful.
00:33:08.894 - 00:33:33.734, Speaker A: Yeah, we're not really focused on execution. We're simply using Sonoma for decentralization. Sonoma has one of the best consensus in terms of finality, and that's really important for a shared sequencer execution. Virtual is great. They're doing a good job of hyper SDK and performance upgrades, but we're not really involved because m one is an execution environment only movin itself. The main m two roll up is the execution environment. So we don't really focus on that.
00:33:34.694 - 00:33:53.234, Speaker B: Okay, now that makes sense. And then what is like the high, what is the pitch on why shared sequencers are valuable? Because this is something that I consistently struggle with, is like what is the unlock that having multiple roll ups plugged into the same shared sequencer? Like what is the benefit that is driven back to the, to the roll ups?
00:33:53.694 - 00:34:24.372, Speaker A: Yeah. So I'm generally bearish more shared sequencers as like a b two b play because every major L2 is working on their own shared sequencer. Right. So with my take from a shared sequencer within the ecosystem, it makes a lot of sense because current centralized sequencers are pretty broken. For example, if we look at inscriptions, arbitrage went down 100, GPS Zksync went down 120 TPS. And that's because sequencer level issues. So downtime is really bad for centralized sequencers.
00:34:24.372 - 00:34:50.482, Speaker A: B, the tokenomics are pretty bad. So most l two tokens are meme coins and discovered in tokens. There's no actual buy pressure or value. Cool. Back to the token. So with a decentralized or even shared sequencer it actually creates in your tokenomics because valers have to stick the token to get sequencing fees. So it actually creates buy pressure because valers take the token, they participate in sequencing fees, they get emissions and they can use those sequencing fees to run more and more nodes.
00:34:50.482 - 00:35:03.044, Speaker A: So there's actually incentivized to hold the tokens, take the token participate network and it's beyond just a governance meme coin token. So two answers there, performance and liveliness and tokenomics.
00:35:03.384 - 00:35:28.382, Speaker B: Why does the roll up, what is in their best interest to opt into this layer? Because they have to pay sequencing fees. So what do they get in return for the sequencing fees? Is it really just like hey, we're going to have better liveness guarantees and is there interrupt at all unlocked in having your transactions? If rollup a and roll b use the same shared sequencer, do they get any like interoperability unlocks between the two?
00:35:28.558 - 00:36:11.962, Speaker A: Yeah. So the second, second point you get much better interrupt like near one block at time of composability. So if you're swapping from one, if you're on decks on one roll up and index another roll up, you can do one block swaps, which is much more effective than waiting multiple blocks for a traditional bridge or trust assumptions there. And the first point is on like what do they get? Economics. So because we have like a valid set, we enable dual staking. So traditionally if you're launching a custom, let's say you're gaming roll up and launch your own roll up the stack and you connect to share sequencing, you can actually use your token to stake in conjunction with our native token. So let's say for example, you have dancoin, you can stake Dan and stake move within one node and both those as a validator I stake both.
00:36:11.962 - 00:36:25.184, Speaker A: I earn sequencing fees for both movement as well as the dan chain. So that enables me to earn multiple incentives. And from a chain point of view, I actually have the same by pressure tokenomics point of view that I was just discussing.
00:36:26.804 - 00:36:45.504, Speaker B: Okay, so that's really interesting. Is that kind of the target audience for who's going to run a node on the sequencing layer on m one? Like ideally the roll ups run a node and like participate in the shared sequencer network. Or would it be like third parties, you know, like the popular validators today, like let's say a course one or a p, two p or both.
00:36:45.924 - 00:37:29.486, Speaker A: We're going to start off with a security network to have like third party providers. But the vision is eventually permissionless. I really want to push forward the next year or so. A fully permissionless, decentralized sequencer where like avalanche is right now what it is right now, right? Anyone can set up avalanche node and participate in the network that issue, that case for three Miller twos, where if I want to sequence the moving network, or the Aquas and super chain or arbitrary network, I can set up a known laptop, I can stake the Arp token, the move token, the op token, as well as the chains I want. So let's say, for example, I'm a validator that loves gaming. I stake the move token, I stake the token of respected gaming chain. And now I get token emissions from both the gaming chain as well as movement roll up.
00:37:29.486 - 00:37:35.394, Speaker A: If I'm a defi guy, I stake the defi token. If I'm an IO guy or if I'm an AI guy, I can stake that AI token.
00:37:37.134 - 00:38:00.804, Speaker B: Do you think there's power laws around these things over a long enough time horizon where you mentioned that arbitram is going to want their own shared sequencer and Polygon, and the optimism, the op stack network, right? Super chain, how do you think that plays out? Because in a perfect world for the user, you'd probably just want one. So everybody was on the same thing, but again, the incentives aren't there for that to be the case.
00:38:01.184 - 00:38:42.044, Speaker A: Yeah, I mean, you're creating competing environments, right? So that comes down to the BD in a six month horizon, looks competitive and looks like Wiser 32s. In a two year horizon, it is a survival best fit. The chains, the ecosystems that can get the best chains are going to get the best people on their super chain. So right now, I would say that's like obesity in the pack, because they have both optimism and base. And once they create the shared sequencer, that's a pretty attractive hub for the current Defi hub, or we're seeing a good job of the consumer and other focuses. So I think it comes down to bd play. So long term horizon, it's survival of the best fittest, and ideally I think only two or three systems actually make it out.
00:38:42.564 - 00:39:01.864, Speaker B: Yeah, that makes sense. I want to zoom back out from the tech for a second here. And when you as a founder, think about the challenges that you're going to face over the next year, like what are you, what are going to be the hardest hurdles to overcome? But if you hit this landmark, like, all right, like now, now I'm feeling really good about the state of movement labs.
00:39:02.204 - 00:39:52.460, Speaker A: Yeah, I would say current move market penetration is like three to 5% or probably 4%. I would say on average, by the end of 2024, I want to hit like 10% in terms of mood market penetration. So right now it's like 50, 60% evm, like 30% ish, 35% svm, and the rest is alternative vms or other programming languages. I would move with hopefully our initiatives and kind of what we're pushing forward to like 10% by the end of year and the next year probably gets like 20% if we can hit that terms. In terms of developer count, I feel like, a, as an individual, we've been able to do something that a lot of organizations haven't been able to do, and b, we're able to actually get a new program language into developers today. But I think it's less about taking the market penetration. We don't want to fight over the same thousand devs.
00:39:52.460 - 00:40:14.088, Speaker A: We're trying to bring in new devs to ecosystem. So another metric we're tracking is net new devs that weren't web3 devs. So web two devs that we actually converted. And I think a narrative that we have that no one really has is like, Facebook will move. This is Silicon Valley to Palo Alto is the language for consumers. Right. It's also the most intuitive for web two developers to pick up.
00:40:14.088 - 00:40:48.754, Speaker A: So those are two metrics that really tracking is that if we can bring in and actually lead, the metric we get to excite is if we can lead the percentage in most net new developers growth rate, I think we're getting somewhere. Like if the EVM is only bringing in 10%, if slime is bringing 20%, if move can bring in 50% by next twelve months, those are new devs that a, bringing something net new to the blockchain system. It's not predatory vampire devs that are jumping on from EVM to EVM fork. But b, it's actually, we're doing something good here, right? We're pushing for new innovative technology. There's a chance to dethrone everything.
00:40:49.534 - 00:41:04.120, Speaker B: No, that feels like the right goal to be pushing towards. And you mentioned Solana, the SVM is roughly 30 ish percent. That is all. Feels like it's been relatively recent. The last twelve months have been like a. What feels like an awakening of. Yeah, okay.
00:41:04.120 - 00:41:33.844, Speaker B: Like there's always been these next gen vms and like people talking about it and you know, the ideas of, you know, bringing in like web two base level standards, like parallel paralyzed execution and bringing that into web3. You know, that was always something that sounded great on paper, but now we're seeing it like actually play out. And so that that makes sense. But if we get specific here, like, if your goal is to onboard net new devs into web3, how do you do that? What are the initiatives that you need to deploy and run to actually pull this off?
00:41:34.544 - 00:42:05.576, Speaker A: I think it starts for us from an ethos point of view. I think one of the issues I faced starting off and molecular ones is big foundations, big capital formations. And it feels like developers aren't connected to the founders, connected to the core team. Um, and there's like really bad dev role support. I think, like we are priorities from a grounds up point of view. Like being like what they needed, like rape meme culture. I'm embracing that part of life because like today, like meme coins are like one of the biggest use cases of crypto, right.
00:42:05.576 - 00:42:51.618, Speaker A: And a lot of chains don't really embrace that. Like we wholeheartedly embrace like the DJ and meme culture because that's gonna get people excited in the short term, in long term, like you're gonna do the same things like hackathons, accelerators. But the question is like, we don't want, like Vampire does, right? This is like, like the issue with EVM is like, okay, cool, you launch a hackathon for your new EvL two, they'll hack for three months, ship a product, and go to the next new chain. That's hot. With move, we kind of like we're focusing on like getting them to learn move, pick up move, and like pick up move skills so that once they learn move this pretty much like they're kind of stuck to somebody like commit the ecosystem. So like developer education, really important. So I can touch on really focused on onboarding web two developers like doing hackathons, accelerators and audiences that would never really touch crypto.
00:42:51.618 - 00:43:17.204, Speaker A: And that's what's coming over the next two or three months and in the short term as well as we are even compatible. So we're going to play the same game of, okay, how do we get developers running solidity and experiencing the movement network and the realization thesis and the better user experience. The first major unlock is realizing that you can have slot experience on ethereum. So a lot of developers are going to love that. Users will love that. And the second main unlock is how do you get new web two developers that haven't touched the modern day system.
00:43:18.784 - 00:43:41.484, Speaker B: Right. No, that makes sense. And what were the takeaways that you had from building a move based application on an existing l one? What were the shortcomings of that experience that kind of led you down this path of being like, all right, I've noticed that these problems exist and I have an opportunity to go build something that, that really takes us to the next level. Like what were the actual pain points.
00:43:41.524 - 00:44:33.328, Speaker A: That you faced from a good market point of view? Liquidity concerns. Like if you're launching, if you're building a layer one launch post, like in the depths of the bear, liquidity is pretty hard to get. Most family offices, liquid funds, market makers really only feel confident on Ethereum based blockchains in the bear market, like aptos, we say even Solana in the America market, TVL was pretty rough because just generally people didn't believe in Alt vms. I think this time around it'll be a lot easier. But still, it was a big concern. Like how do we bring liquidity to our Dapp? And for any Dapp that's trying to fundraise, the number one protocol any venture or user asks you is what's your TVL if you aren't, if your TVL, if you're on a chain with a tv 100 million, you probably don't have the most attractive app. So learning from that, I was like, okay, I want to still build a next gen VM app, but I want Ethereum liquidity.
00:44:33.328 - 00:45:11.354, Speaker A: I want to be in theme security. So that's the first kind of go to market. Second thing is more from a community point of view, I think like I hate Ethereum online. I don't like saying the word, but is a marketing term, right? Like if you are leveraging Ethereum security or within theme communities right now, that's where liquidity users and kind of mind shares out to Solana layer one itself. So there is like a clear go to market strategy and being Ethereum aligned at least. So short term, we're able to say onboard liquidity providers, onboard users, onboard influencers and people who primarily use Ethereum block space and then from their scale to a vision beyond that.
00:45:12.654 - 00:45:42.548, Speaker B: Right, right. No, that makes sense. And where do you think we are in like the quality of the infrastructure cycle? So if you like rewind, five years ago you couldn't have built an application that 1000 people can use at the same time on chain. It just wasn't possible. And now we're getting to the point where it is possible. Um, but like if we look at Solana, you know, meme coining got pretty hot over there. Um, and they kind of like crapped out around, you know, somewhere between like 1002 thousand tpS.
00:45:42.548 - 00:46:17.184, Speaker B: Um, which is probably the best. That's the best. It has the best sustained TPS we've seen in crypto. Um, like Swe, I think, hit 66 million transaction in a day, which is as far as TPS goes, is like the highest single day TPS. But of course it wasn't sustained by any margin. Um, and so like, I guess my point here is 1000 to 2000 TPS is not, is still not like, you know, to get Facebook on chain. Right? So how much further do you think we need to go to get to a place where we can actually have these large applications that, uh, have web two scale, but are occurring on a web3 platform?
00:46:18.084 - 00:46:34.034, Speaker A: Yeah. So first of all, like, I don't get the fudder on slime. If any people are like backlashing slant. I'm like, my response is it's bullish as long as going down, right? Like they actually have users on chain. Wow. They actually have block space that's filled. They actually have market demand.
00:46:34.034 - 00:47:13.276, Speaker A: It's like if your website goes down on web two from overuse and going viral, that's not bearish on the developers, that's bullish for the go to market distribution. So first of all, hats of Svana, totally Raj, are crushing it. I'm sure they'll have a fit fix up shortly. Is actually a great step into actually getting users on chain. Second thing is, I think infrastructure is getting a lot better. Like, he touched on, like we could do two K tps five months ago or five years ago, a year and a half ago, there was no place to rust base VML there too. So like a lot of like the op stack magic clients, a lot of the ZK stuff they received recently wasn't there a year and a half ago.
00:47:13.276 - 00:47:58.760, Speaker A: We're getting to the point where infrastructure is at like I would say 70% there. For Facebook on chain, there needs to be like probably another year and a half of performance optimizations slides going to do it on the consensus and fix up the validators and stuff. And like L2 guys are focusing execution environments and making that hyper parallelized on Ethereum. I think in around a year and a half, infrastructure will be ready for Facebook on chain. And the kind of movement thesis and the kind of move shield here is like we're all here saying, Facebook on chain, Facebook built move. So like the block SDM pattern optimization parallelization with block STM is much more easier to use and easier to work with than salon's parallel model because obviously it's not optimistic and you have to be more hands on there. The developer experience is much easier.
00:47:58.760 - 00:48:02.244, Speaker A: So if you want Facebook on chain, try using the language Facebook built.
00:48:03.344 - 00:48:21.872, Speaker B: I love that pitch, man. Rushy, this has been a fantastic conversation. You guys are doing some very impressive work at movement Labs and I love the prioritization of both performance and security. Good luck in your endeavors of making security sexy. I'm very bullish on movement labs, but that that piece is a hard task. No, I'm kidding man. Again, thanks for coming on.
00:48:21.872 - 00:48:30.192, Speaker B: We'll put some links to your Twitter profile as you're a great follow as well as that of movement labs. So thanks again man. All the best and cheers. Have a good one.
00:48:30.328 - 00:48:31.704, Speaker A: Thanks so much man. Thanks for having me.
