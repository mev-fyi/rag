00:00:00.640 - 00:00:15.580, Speaker A: I think what's going to win is either Solana because the ecosystem is good at executing and is ahead of all these problems, or something that looks exactly like Solana. And the only reason that it's not Solana is because they executed faster.
00:00:16.000 - 00:00:58.202, Speaker B: This episode is brought to you by Ledger, the most secure hardware wallet trusted by 7 million users and securing 20% of the world's digital assets. Thank you to Ledger for making this episode possible. If you like the Lightspeed podcast, then you need to subscribe to the Lightspeed newsletter. Written by a team including yours truly and delivered to your email inbox daily, Lightspeed is your essential daily briefing on all things Solana. Exclusive news, deep analysis and the latest trends, delivered in a way that's digestible and I think sometimes kind of funny. Stay ahead of the curve with the same insights that guide readers from Brevin, Howard, Gemini, Jito, CME Group, Solana Labs and Foundation, and many more. The link to sign up can be found in Today's Show Notes or if you go to Blockworks.
00:00:58.202 - 00:01:01.480, Speaker B: Catch. Subscribe to the Lightspeed newsletter today.
00:01:06.820 - 00:01:45.574, Speaker C: All right, hello everyone. Welcome to Lightspeed. Today we're going to be doing something different. We're going to be doing 60 minutes Solana edition with the founder, the co founder of Solana Labs, Anatoly. And just a little disclaimer here is that I'm going to ask very pointed questions that are meant to be hard to answer and so I might have to cut him off if he's kind of not answering the question. And we call this in my team, we call this red teaming. Basically we need to shit on Salon as much as possible to uncover any gaps and hopefully improve them.
00:01:45.574 - 00:02:29.940, Speaker C: But all right, let's do it. So totally let's start from the beginning. You started Solana in some regards because you basically got sick of being front run in traditional markets. And you start Solana where the idea is that information is synced across the globe as fast as the speed of light allows and you maximize competition, minimize arbitrage, all the stuff. However, that is not happening. And everybody's getting front run all the time. And in fact, not only is MEB through the roof, Jito Tips have surpassed Solana priority fees in many cases.
00:02:29.940 - 00:02:34.220, Speaker C: What do you think about this? Why is this the case? Why is it acceptable?
00:02:35.040 - 00:02:43.990, Speaker A: So you can set up your own validator and you can submit your own transactions without anyone's interference, right?
00:02:46.610 - 00:02:47.590, Speaker C: Kind of.
00:02:48.850 - 00:03:21.840, Speaker A: And you can't do that in traditional markets. You simply don't have that option. So that was the Democratizing function that piece works. Now the question is, it's hard to set up a validator. It's hard to scale it to enough stake where that's substantial. It's hard to find other peers that will order transactions the way you want them to and whatever you call fair or whatever, but you can do it. It just takes time and effort.
00:03:21.840 - 00:04:33.730, Speaker A: And the markets themselves are not mature enough to where this has created competition between JITO and whoever's competing with them and everyone else to where users can then easily pick. I'm only submitting to order flow creator y vs order floor creator K. So the functionality, kind of the fundamental principles of me as a hobbyist. I could spin up my own validator, get some stake, and then run my algos and submit my own transactions directly into the markets without anyone that all exists. No one can stop you from doing that. Now the question is, are we at a place where this has matured to where the users always see the best possible way to submit transactions? I think we're far from that. But my view is that the way to get there is the dumb way, which is also the hard way is increase bandwidth, reduce latency, optimize the hell out of the network to eliminate all those bottlenecks where things become unfair.
00:04:33.730 - 00:05:01.998, Speaker A: And that includes multiple concurrent leaders and stuff like that. So fundamentally, right, if you have only 1 liter per slot and you get 1% of the stake, you roughly get 1 in 100 slots. But if you have 2 liters per slot with 1% of the stake, you get 1 of every 50 slots, right? So the more liters per second we can add, the less stake. You need to be able to run your algorithm at the quality of service that you need.
00:05:02.134 - 00:05:26.028, Speaker C: Currently, the way it works is you need to amass some amount of stake to be able to prioritize your transactions. And even if that weren't the case, it seems like, you know, having more stake in the system is just going to be useful for perhaps having your own block space and all this. And so there's some dynamic here where the richer you are, the more of an advantage you have, right?
00:05:26.084 - 00:06:37.470, Speaker A: And is that acceptable performance improvements reduce the barrier to entry for honest participants to change the market dynamics. So if we have 2 liters per second, and now it takes half the amount of stake for me to offer the same kind of service as before, and therefore it takes less, there's a slower economic barrier to entry to be able to compete and say, hey, I'm the best validator, you should always submit all your jupyter transactions to me, I'm going to do the thing that you want. I can then run a business offer to users and then competition will force the market to be at the most fair equilibrium. That's the ultimate goal. But to get there, I think that the very different thing about Solana versus Ethereum is I absolutely believe it's just an engineering problem. We just need to optimize the network, increase bandwidth in terms of the number of liters per second in terms of blocks. The block size is just everything, just grow everything until competition forces the markets to be in their optimal spot.
00:06:37.890 - 00:07:00.840, Speaker C: Talking about engineering problems, one of the reasons why JITO tips have surpassed priority fees is not just meb, but because lending transactions, or maybe more accurately the fee markets that are, that we say are local fee markets, don't work deterministically and sometimes don't work that well at all. What's up with that?
00:07:01.620 - 00:08:07.032, Speaker A: Again, this is because of the implementation that actually processes all those transactions are far from optimal. And under extremely high load, like if the load is low, everything works great. We had like during the mini bear that we had over the last six months, there was a time where I was seeing sub 1 second end to end confirmations. Everything was functioning smoothly there because the number of proposed transactions submitted to the leader were so small that those queues, the quick connection table, all this other shit was not being filled up to the point where performance bottlenecks were causing those queues to back up. And when those queues back up, you can't do prioritization in those queues until you get to the scheduler. And that effectively breaks down the local fee market. So again, in my mind this is a engineering problem that probably is the most ecosystem engineering investment right now out of anything else.
00:08:07.032 - 00:08:10.424, Speaker A: It's just optimizing the hell out of those pipelines.
00:08:10.552 - 00:08:36.400, Speaker C: Given that these problems exist and it seems like your answer to them is that, well, they exist, but they're an engineering problem and so they're solvable and hence they will be solved with further iterations. And somebody might say to that well, these problems don't really exist on L2s due to their architecture, right? Like you can't. I mean if you have a centralized sequencer, you can do first come first serve and first come first serve will.
00:08:36.440 - 00:09:15.980, Speaker A: Lead to the exact same problems. So even Arbitrum has like a priority lane. So if you have first come first serve, you encourage spam. It's the same issue. So if you have a generalized L2 that has multiple applications, it'll end up in the same problems. Now one can argue that because they don't have also consensus and everything else vertically integrated that can iterate much faster and just make releases like a Web2 company like every 48 hours, just push a new binary under centralized sequencer and fix it faster. They still have the exact same problems as Solana.
00:09:15.980 - 00:10:17.930, Speaker A: And you can argue that Jito effectively has that opportunity to do now because of their relayers can be updated every 24 hours or they can release them all the time anyways. What they're not doing right now is they're not scheduling and filtering enough of the data to where the output stream from those relayers is capped at a capacity that the validator scheduler can handle no matter what. But you can kind of get the same effect. So like I don't think L2s on their own fix these problems. They fix them only when you launch in L2 and there's only one app that's popular there and no other application. And that's not even true about an app itself. Like if you have an app with multiple markets, you'll have Market A will cause so much congestion that all the other markets are impacted.
00:10:18.910 - 00:10:44.224, Speaker C: Well, let's take the other side of that, where it's not a general purpose L2 but something like Atlas, which is a defi specific chain and it runs the spm. Why? How does Solana compete with something like that? Where they don't have to worry about the overhead of consensus and a bunch of other things or shared block space, but they could just optimize for defi. And with the SVM they can also add fee markets.
00:10:44.272 - 00:11:34.642, Speaker A: What you're talking about is just how does Solana compete with Solana? With a smaller validator stuff in that case it's one, right? So it's simpler to optimize. You can throw a bigger box at it. This is the fundamental question is does Async does synchronous composability matter at scale? And this one smaller network can only cover that tiny portion of the world where that box exists. So information still has to propagate all around the world to that box. In the end state of Solana, you have multiple validators that can submit transactions all at the same time, all globally. And it's a permissionless open sot. And if you solve for that, you end up with Solana.
00:11:34.642 - 00:12:29.282, Speaker A: It doesn't matter if it's submitting Data to the L2. But the really hard question is how do I submit and propagate information everywhere in the world at once and agree on it as fast as possible. As soon as you start working on that problem that's no longer localized to one machine in New York or Singapore or whatever, you need to have some semblance of consensus and consistency and linearization. You will deal with the exact same problems as Solana does, even if later you rely on an L2 to get more harder settlement guarantees. So in my view, These single box SVMs are basically no different than Binance. How do we compete with Binance? This is a more interesting question. You could use this single box SVML too, or you could use Binance.
00:12:29.282 - 00:12:50.482, Speaker A: And to a user, at the end of the day, Binance is a better experience. So we need to be able to be the best version of the centralized exchange. And I think the only way to get there is to embrace this idea of decentralized multi proposer architecture.
00:12:50.626 - 00:13:22.874, Speaker C: The other advantage is that Solana has to do this anyways. And with an L2 they can kind of solve some of these problems faster, right? It's easier to solve problems on a single box than 1500 boxes. And so in the case that they get more traction right out the gate and start amassing network effects, Solana has all these problems regardless of what they do. And so since they run the same architecture, they can just learn from that and perhaps ship it faster. And so how do you compete on a business level?
00:13:22.962 - 00:14:23.216, Speaker A: Question is, can those single boxes survive when they hit? Like, it's not like if you put up a single box, just all of a sudden solve everything, you're going to have almost the exact same engineering challenges. Especially if you look at how that part of the no one is talking about like, oh, Solana is consensus overhead. What they're talking about is the transaction submission pipeline, right? And that piece itself can be centralized on Solana just like it is on an L2. In fact, Jito is effectively that they have a single box relayer. It gets slammed with a whole bunch of transactions and then tries to submit it to the validator. That data rate between the relayer and the validator can be capped to a rate that is so small that the validator will always, you know, always succeed. And then that JITO side can iterate much, much faster.
00:14:23.216 - 00:14:30.224, Speaker A: So that advantage I think is smaller than people realize of an L2.
00:14:30.392 - 00:14:53.602, Speaker C: The other side of this, if we expand the scope a little bit, is solana as an L1 is shared block space. And so you face tragedy of the commons, you know, shooting in the public pool type of problems versus on an L2 or it doesn't have to be an L2, can be an app chain. You have your own block space, you don't have to share with anybody. And for the app dev that might.
00:14:53.626 - 00:15:01.230, Speaker A: Be more attractive only if it's permissioned. It has to be a permissioned environment.
00:15:01.930 - 00:15:02.898, Speaker C: Why is that?
00:15:03.034 - 00:16:02.202, Speaker A: As soon as you have permissionless validators, you don't have that control right? Or permissionless sequencer. As soon as you have multiple applications, it's no longer shared. Even in a single app like Uniswap, if you have multiple markets, the markets are going to interfere with each other. The order priority for Random Ass Meme Coin is going to interfere with the major markets. So if you think of it as a product, imagine we're in the wonderful future where everything's tokenized and I'm deciding where to deploy my IPO company that has just become a unicorn and I look at Uniswap and I see that Shib number five causes so much congestion that people can't trade the majors. That's a failure state for that app specific L2. So they have the exact same challenges as Solana.
00:16:02.202 - 00:16:35.300, Speaker A: They have to isolate each separate piece of state in a way that it doesn't impact everyone else. Because even if it's just Uniswap running in a single box in tees, if a single market impacts everything else causes congestion across all the other markets. Me as somebody that is the IPO CEO, I'm not going to want to have that be my major market, the one that everyone trades on. I want isolation just for my own pair.
00:16:38.120 - 00:16:43.060, Speaker C: What if it is permissioned? Isn't it okay that they're permissioned since they have exit patches?
00:16:44.600 - 00:17:02.096, Speaker A: Even if it's permissioned, they have to still solve that local like isolation problem. And that isolation problem, solving it in that permission environment is no different than solving it in the JITO relayer or the scheduler, that whole pipeline and Solana.
00:17:02.208 - 00:17:06.260, Speaker C: Do you think this market analogy can be mapped to any type of application?
00:17:07.560 - 00:18:22.770, Speaker A: There's some applications that don't have those properties where just peer to peer payments and there's simply no congestion that it's trivial to schedule. So the challenge that why you even designed ISO like isolation and all of these stupid things like why even bother doing all of this is that if you cannot guarantee that a single market or a single app or whatever causes congestion globally, then somebody like Visa will launch their own payment specific L2 because their transactions just never have any contention. They don't care about prioritization because what they care about is just TPS, like just give me raw TPS and make sure the P90 confirmation time is below X. But I don't really care at the cash register if I'm first in the block or last. All I care about is that when I swipe my card in 2 1/2 seconds I can leave, right? So that there's no prioritization scheme there that is really important to payments. And that is a very major use case. It's not like a theoretical use case.
00:18:22.770 - 00:19:43.852, Speaker A: And my belief is that if we can't fix, if we can't implement isolation correctly, the whole idea of giant composable state machine is moot because you will have payments chains, you will even have single market L2s like me as the IPO person in 20 years, why would I even launch on Uniswap Chain? Why wouldn't I launch my own L2 with just my own pair to guarantee good performance? That is a future that's possible, but I think there's no engineering reason why that is going to happen. It would have to be for other reasons altogether. And if we solve the engineering problems, then I think there's a huge advantage from composability being in a single environment where the friction to move money between all the states and all the liquidity is effectively atomically shared. And that's a really, really important property in my mind. I think the reason why Solana Defi survived the depth of the bear that hit Solana worse than anyone else is because it was composable and it was much more capital efficient because of that.
00:19:44.036 - 00:20:20.240, Speaker B: As anyone doing stuff on Chain knows, security for your crypto is super important. That's the benefit you get from Ledger, which has been around for a decade now and is the most secure hardware wallet for your Solana and logins. Ledger's newest devices, Ledger Stacks and Ledger Flex have secure touchscreens, making it easier to manage your crypto. And with Ledger Live, you can seamlessly and securely manage and stake your Solana. Alongside Ledger Stacks and Ledger Flex, Ledger introduced the Ledger security key app, a safer alternative to traditional passwords, enhancing your overall digital security. Thank you Ledger for sponsoring this episode.
00:20:20.580 - 00:20:44.090, Speaker C: Vitalik recently. I mean, I don't know how recent, but he basically commented that in my view, synchronous composability is overrated. And I think he's probably referring to the empirical evidence that we haven't seen too much of it being utilized on Chain. What do you think about that?
00:20:44.390 - 00:21:27.618, Speaker A: I mean, what is Jupiter if not synchronous composability? I think he's only looking at Ethereum. Unfortunately, Jupiter has enormous market share in Solana and its market share is enormous in the entire crypto space. So synchronous composability. But you cannot build Jupyter without synchronous composability. Like, it just doesn't work. You look at one inch, which is the Ethereum competitor, and they cannot scale because the cost to move even between L2s and the same L1 is so astronomically expensive and slow. Yeah, I think he's wrong.
00:21:27.618 - 00:21:59.086, Speaker A: I think you can have finance that's asynchronous and that's how most finance works today. And it's not like those systems will die or something. But I think if Solana succeeds and we, you know, like the ecosystem solves all these problems at the current pace as they're solving them, even if it just continue, like everyone just continues to execute as well as they are, and year after year you can see a dramatic improvement. I think at the end of the day, synchronous composability is going to be the winner.
00:21:59.198 - 00:22:31.632, Speaker C: Let's put aside the engineering problems and let's assume that engineering is at a moat and that other chains can achieve the same outcomes. Let's say something like sweet, they can have atomic composability, synchronous composability, and they can just have a smaller validator size set. And let's say some of these L2s, I mean, they'll face the same problems like you said, but they can also solve them. And so I've asked you in the past, what happens, what's the moat when engineering is not a moat. And you said content and features.
00:22:31.776 - 00:23:14.320, Speaker A: Yes. Solana doesn't have a specific validator target. The reason why the testnet is at like 3500 validators or mainnet is as large as it is is because I want it to be as large as possible simply because it's future proofing the network. If you want to have as many block producers in the world as you can, you just need to have a large validator set. You want to allow anyone to be able to enter and participate in every part of the network permissionlessly, you should be eating your dog food and running it at the highest rate possible. Because right now solving these problems is cheap. We're not.
00:23:14.320 - 00:24:07.840, Speaker A: Solana isn't like trading, you know, a trillion dollars of users 401k like in the United States, which is what Main street does, like Wall street does. It's meme coins, which is great. But that's an opportunity to like throw the best minds in the world at these hard problems and force them to go deal with them. So my view is that like it's more likely that Sui and Aptos will need to do work to increase their validator set than the other way. Then Solana will be like, oh, we better lower a validator set for performance improvements simply because if you, if you hit like pmf, everyone wants to run their own box because you get guarantees. And as that validator set grows, if you start restricting people, it's going to limit how much you can grow.
00:24:10.060 - 00:24:28.720, Speaker C: So actually. Okay, good, you mentioned that. Because one thing I want to talk about is while that is the goal, if you look at the data, the number of validators over time has decreased and it seems like you're kind of attributing that to a lack of PMF and so they don't have an incentive to run their own boxes. Is that right or what's the reason there?
00:24:29.500 - 00:24:45.600, Speaker A: Yeah, well like a. You have some of the Solana foundation stake will distort that. I'd be actually interested to see what is the validator, what's the number of validators that are self sustaining? Is that growing?
00:24:45.680 - 00:24:47.980, Speaker C: We have that one sec.
00:24:48.360 - 00:24:49.504, Speaker A: Year over year.
00:24:49.672 - 00:24:53.140, Speaker C: 420 validators would be self sufficient.
00:24:53.560 - 00:24:55.472, Speaker A: But what was that like two years ago?
00:24:55.576 - 00:25:01.296, Speaker C: I don't think we have that, but we do have that the total stake from Solana foundation has decreased by quite.
00:25:01.328 - 00:25:46.842, Speaker A: A bit since three years ago and fees have increased. So my guess the self sustaining number is much smaller two years ago even if the overall set was larger. So that would be my guess. So my view is that we need the network to be able to scale up to support everyone that wants to run a box. So that's the whole purpose of the delegation program is to get as many hobbyists or whoever to run it and just stress it a little more and do that in the testnet. But testnet can never simulate mainnet characteristics. No matter how many invalidator tests they throw at it.
00:25:46.842 - 00:26:11.360, Speaker A: There's always just main net is so much different. As long as that number is growing, the self sustaining number, to me that is like the positive trend to look at. And the network physically has to be able to scale to support up to whatever that number is, otherwise you start limiting growth.
00:26:12.300 - 00:26:25.542, Speaker C: So basically what you're saying is the delegation helps with stress testing a network to different value set sizes, but fundamentally the only thing that matters or the main thing that matters is the self sustaining ones. Is that right?
00:26:25.646 - 00:27:04.600, Speaker A: There's some argument you can make about the theoretical argument that a single box, it doesn't matter if it's not a self sustaining box. In theory, in a catastrophic failure, if that's the only box that survives, that does help. But this is a tail end nuclear war decentralization question. But from fundamental is the network growing and successful? What matters is self sustaining validators that can pay their own bills and give a shit about the network to commercially keep improving it and digging through the data and doing all this stuff that they do.
00:27:06.340 - 00:27:35.840, Speaker C: So one of the other criticism that's related to this is Solana's inflation schedule where you can argue that it's helping subsidize more validators by giving them more rewards. At the same time, this comes at the expense of let's say people who are, I don't know, let's say just purely investing. When people say that inflation is too high, what are your initial reactions? Like how, how do you think about it?
00:27:36.140 - 00:28:06.950, Speaker A: Just read John Carbon articles on this. Like this is just like beating at that horse, like moving numbers around. A black box doesn't matter. That's it. You can move in a way that impacts people to the point that the black box dies, but in itself doesn't create or destroy any value. It's just accounting. The reason why the inflation is the way it is is because it was copied from Cosmos, because the initial set of validators were a bunch of Cosmos validators.
00:28:06.950 - 00:28:36.832, Speaker A: But if you look at like fundamentally does inflation matter to an individual, to who is in a specific tax regime, it might matter, but to the network as a whole, it is a cost to non stakers and an equal gain to stakers and those add up to zero. So that inflation mathematically, from an accounting perspective doesn't matter to the network as a, as a black box.
00:28:36.956 - 00:28:40.632, Speaker C: I've seen people say if it is arbitrary then why not reduce it?
00:28:40.816 - 00:29:18.690, Speaker A: Go for it. File, post a simd. I personally don't care. I said this like a billion times. Change it to whatever you want, go convince the validators to do it. They basically pick these numbers out of their own hat, right? Like at the time, the major constraint of picking the numbers was that it's not going to be a total disaster to pick this specific thing. And since Cosmos didn't fail because of that, it was good enough in the.
00:29:18.730 - 00:29:29.336, Speaker C: End state where everybody can run fast, cheap, permissionless systems. Why should people pick Solana? How does L compete?
00:29:29.498 - 00:30:21.474, Speaker A: I think what's going to win is either Solana, because the ecosystem is good at executing and is ahead of all these problems or something that looks exactly like Solana. And the only reason that it's not Solana is because they executed faster to a point where they overcame the existing network effects that Solana Main already has. So this is where like I think execution is the only mode always. If you suck at execution, you will get passed by somebody. Yep. But somebody else has to be so much better that it is like a PMF killer. And you can think of PMF like product market fit for those who don't know that is like something that causes user behavior to switch.
00:30:21.474 - 00:31:48.460, Speaker A: Like, why would I switch from Solana to something else? If transactions are 10 times cheaper, would a person switch? Well, not if the person's paying half a cent, but if a person's paying slippage and slippage is sometimes lower somewhere else, that could be enough for them to switch or enough for traders to switch. So you have to look at like the person's overall behavior and is there an improvement that is so fundamentally better that would make him choose a different product? And between Solana and Ethereum there was because the fees to a user, when they sign a transaction, it tells them that you're going to pay $30 to accept this ERC20 in your wallet. Not even just to do anything, just even do a very simple basic state change that was so astronomically out of band to what users wanted to pay that the price difference was enough to get behaviors to change. And then the other one was time. Right. You can't wait two minutes for a confirmation, it's just too long. So Solana is at like 2 seconds right now at P50, but sometimes goes up to as much as 8 seconds, but is going from 8 to 400 milliseconds.
00:31:48.460 - 00:32:31.846, Speaker A: Such a massive behavior change for a user that they're willing to switch products. That's an unknown. But nothing in engineering in Solana is precludes the network to get the same optimizations to improve both latency and throughput. So this is like, I think why people ask, oh, Solana is growing faster than Ethereum, somebody else is going to come next. That marginal difference between Solana and the next thing is much, much smaller. It's much harder for that to be a behavior change difference. So that's kind of like the challenge.
00:32:32.038 - 00:33:20.660, Speaker C: So if execution is the moat, the main one, then fundamentally it becomes a challenge of organization to some extent or coordination. And one of the differences between Solana's vision and let's say modular, even though that's not a real term, is on Solana, let's say you're an app like Drip and you built your application there, you need to wait for the L1 to make certain changes for let's say congestion bug fixes or something like that versus on an L2 if it's an app chain, you can just do that yourself. And so maybe there's an argument there where you can execute faster on this other chain than on a shared space. And so if that's true, then you can execute faster overall. And if execution is the only moat.
00:33:21.480 - 00:34:35.701, Speaker A: Year over year that becomes smaller and smaller of a delta, right? Like Ethereum was so slow that if you're a drip on Ethereum and fees went up to 350 bucks, you're like well let me go ask Vitalik when this is going to be fixed. And he's like, well we have a six year roadmap bro, it's going to take a while. And when you at least ask like Fire Dancer or Agave folks or anyone, they're like, there's already a team trying to fix this or the next release as fast as possible. So there's that difference is that culturally the core L1 and you guys too like the entire infrastructure kind of around submitting transactions, everyone understands that when things are slow or there's global congestion, that that's like a P0 fire that everyone needs to fix. There's times when you need to like when you get really smacked in the face and you're like, oh fuck, we need a design change. The fee market one. But those become further and further less and less likely as the network just simply grows from usage.
00:34:35.701 - 00:35:36.696, Speaker A: So I don't know if there is one of those critical we need to fix a design thing that's going to take six months to a year to deploy. I don't see one right now. There isn't something like that on the horizon. But you're definitely going to run into release bugs or whatever else like that that's unforeseen, that'll need like people working over the weekend, that's part of life. And if you have your own app specific L2 that's not shared and you own that entire infrastack, you can probably move faster. But that's expensive, not everyone can afford that. So the shared infra layer that's composable, that everyone can share and use for the vast majority of use cases is probably going to be cheaper and faster as a software layer, as a service stack and as it fixes bugs and kind of keeps improving, that Delta becomes smaller and Smaller.
00:35:36.808 - 00:36:09.486, Speaker C: So let's go to the other coordination, let's say challenge. We've been hyping up Firedancer and Jerry recently came out and said, well, I mean some people actually now think it's overrated, but Jerry El said it's slowing people down. Onza engineers and fire engineers obviously have to agree on certain things and ship from there. And so it does slow things down initially. And it seems like your argument is that once the specs and interfaces are clean, then you can actually iterate faster. Is that really?
00:36:09.638 - 00:36:46.440, Speaker A: Yeah. So like there's like three, three steps. One is the design step. You got to agree on what you're going to do, then implementation and then testing and verifying that it doesn't cause a safety or liveness bug. And my feeling is that the design step will take longer. Implementation is parallelized so both teams can do it at the same time. But the testing auditing phase should be much faster because the probability of two independent teams shipping the same bug is smaller.
00:36:46.440 - 00:37:35.374, Speaker A: The big difference I think is that I think Ethereum runs in this. Like we're going to have one major release and it's going to land with all these features that are targeted for this release. And what they're picking is the feature set and not the release date. The way that Solana's always functioned is almost the opposite. There is a release date. If your feature doesn't make it, it gets cut and those releases are just much, much faster. So in theory, the iteration cycle could even speed up with two teams that want to speed it up.
00:37:35.374 - 00:38:01.710, Speaker A: That's got to come from the core engineers and they kind of have to have that fire in them, like, hey, we need to release the stuff as fast as reasonable and kind of rely on this implementation like redundancy. I think culturally both teams kind of have that background because they're not academic. All their life they've been under the pressure cooker of tech.
00:38:03.970 - 00:38:26.700, Speaker C: And so that brings me to the third point point of coordination and execution, which is that you must assume that you have zero executional capability because you're working on a phone instead of helping the L1 ship or helping these client teams coordinate. Is that really the right play?
00:38:27.320 - 00:39:13.946, Speaker A: For me personally, like the big, last big changes that I've kind of been involved with was like getting the accounts DB index out of ram. And I like, I could write up a design and a like little implementation that proves that it could work. But the problem is that to land it you need a full time engineer that is specific on that task. And I can hand it off to Jaywash. And then he landed it right. And the testing and the release cycle, all that stuff takes a year. Me as a single ic.
00:39:13.946 - 00:39:58.016, Speaker A: It would be awesome. I would love to just be an IC at Anza or Fire Dancer. Just like, look, staring at Grafana and building stuff, it's just I'm split across like a bajillion of different efforts. So the place that I found to have the highest impact is like, I can define the problem, state growth, or this multiple concurrent leader problem, like the censorship problem there, like the MEV competition problem. And I can propose a solution and I can talk to everyone and they all agree, okay, your analysis of the problem is right. And here's like, maybe how I would do it. And we.
00:39:58.016 - 00:40:28.346, Speaker A: And we all iterate on that design, and eventually it gets kind of gelled and solidified. And then as that fire that I've anticipated starts kind of getting hot and hotter and hotter. People already have the design. We've already done the hard part, which is the agreement part between two teams. And then it's just implementation and testing. So my role is almost like principal engineer at a big company. You don't write any code.
00:40:28.346 - 00:40:46.938, Speaker A: You go talk to a bunch of teams and you're like, hey, I noticed you're struggling with this. And everyone else is. You got to go fix it like this so we can all align on it. That's probably like my. The opportunity that kind of can have the highest impact on the core eng.
00:40:46.994 - 00:40:58.980, Speaker C: Side, your level that does the job, but it's not an easy one. And so are you basically saying, well, Jack Dorsey can do this and so can Elon. So I can also do this while shipping a phone.
00:40:59.960 - 00:42:22.800, Speaker A: I'm not like, there is an amazing engineer that is head of engineering on mobile that's been like one of my close friends for, like, also over a decade that he built, like, BlackBerry's iPhones, like every phone under the sun, and there's an amazing general manager, and between the two of them, they run the show. I kind of set the vision that it's possible to build a. Like, I don't think people fully grasp the vision of this, but if you look at like Android or iOS, it's a cryptographically signed firmware specifically that defines the entire platform. Like, everyone has this device and has effectively trusted boot on it. And when you get a firmware update, it validates that the firmware was signed correctly and rewrites your entire phone. That cryptographic signature is the key part, because that could be Generated by a DAO that signs off on the entire firmware for Apple. Like imagine if Apple itself was controlled the cryptographically signed certificate run by a dao, right? It flips the entire kind of idea of software platforms on its head.
00:42:22.800 - 00:43:31.730, Speaker A: That's the really, really cool, weird kind of hack there. Besides setting that vision and kind of like you know, whipping the team, sell more phones so, so that style is meaningful and then like get to that final milestone where the entire ecosystem controls their own firmware. I'm not like in the day to day grind of, of kind of execution. So like Elon, like the way I think Elon works is that he has a big idea and then he finds an engineer that credibly tells him that that engineer can go and build the whole thing, start to finish. If you can find that person for your big idea, then the only thing that you need is capital to go accelerate that person. They will go give an infinite amount of time, they will themselves build the entire thing. You give them money, they hire people to accelerate themselves.
00:43:31.730 - 00:43:54.334, Speaker A: Right? That's it. That's how like I try to operate. I don't know if that's how Elon operates, but this is how I think you can kind of like work on multiple things is you have a big idea, very concrete vision and then you have somebody that's like credibly, yeah, I can build every piece, give an infinite amount of time, then you give them money and they accelerate themselves.
00:43:54.482 - 00:44:14.006, Speaker C: You say the vision is concrete, but it seems like the ideal outcome is let's say you succeed and you sell a lot of these phones and it actually breaks through Crypto, Twitter, Apple then just reduces their fees. And so basically what you've done is.
00:44:14.158 - 00:44:26.840, Speaker A: We change the world. Midwest software companies are not paying Apple a like a ransom. 30% more productive software, more games gets built. It's great.
00:44:28.260 - 00:44:33.596, Speaker C: But that's an altruistic endeavor as opposed to a business endeavor. Right?
00:44:33.668 - 00:45:21.290, Speaker A: Because you can only succeed as an altruistic endeavor if it's also successful as a business. Because for Apple to change their fees, they have to see competitive pressure from a growing ecosystem that is commercially viable. Otherwise they'll just ride it out until that ecosystem dies because it's not commercially viable. So it has to find its product market fit and be self sustaining and stuff like that. But that doesn't mean it won't change the world, right? It'll take a smaller cut. That's the whole point of capitalism is you see somebody rent Seeker with 30% fee and you sell it for 15%. You've now changed the market economics and now everyone is better off.
00:45:21.290 - 00:45:23.270, Speaker A: All the consumers are better off. Right.
00:45:24.850 - 00:45:37.430, Speaker C: And so you must think you can actually compete with them then in that sense. The two largest companies on earth, really, Google and Apple in some cases. What makes you think you can compete with them?
00:45:38.930 - 00:46:28.480, Speaker A: Well, it's obvious that 30% fee is too much because you have Tim Sweeney suing them everywhere you can. And like it's a problem for the businesses that use Apple and Google as a distribution channel. So Apple and Google have this rent seeking fees. Consumers don't care about these fees because they they're hidden from them. The consumer pays X amount to the app and Apple takes 30%. How do we break that problem is the challenge. And this is a network kind of network creation problem which I think crypto has an advantage in because it has this way to financialize digital assets and scarcity that is different from Web2.
00:46:28.480 - 00:46:54.810, Speaker A: Now again, like it might not work. It could fail. And the reason it's going to fail is not because app developers want lower fees. That's obvious. That's clearly true. It fails because we haven't figured out how to grow the network with the incentives that crypto provides. That's a real hard problem here.
00:46:54.810 - 00:47:06.530, Speaker A: It's not a product problem or like a business model problem. It is literally how do we actually force user behavior and have them switch networks going to shift gears.
00:47:06.880 - 00:47:23.992, Speaker C: I actually want to talk about ZK one end vision of blockchains seems to be where everything is kind of like just ZK powered and you don't need to execute all these things on the full node. All you can do is just verify proofs. Doesn't seem like Solana really has any plans for this. First of all, it's actually adjustments.
00:47:24.056 - 00:48:27.648, Speaker A: If you looked at my asynchronous kind of wrote an article on how APE is going to change. Like validators, you can actually have validators that share a common prover to validate state. So you can have a bunch of validators or use a TE or some other trust model or a ZK1 and once an epoch it rolls up the entire asynchronous execution and computes the whole snapshot hash. So there isn't that idea that fully ZK verifiable rollups are one, that you need a roll up and two, that they're not somehow not compatible with Solana. That's silly. Asynchronous execution allows you to compute that snapshot hash whatever trust model you want to use, run your own full Node, share a TE environment, share prover environment. I don't really care because whatever environment you use doesn't impact my full node.
00:48:27.648 - 00:49:02.446, Speaker A: Run my own full node. You can do whatever you want. The fundamental question is like what is so different about Solana than Ethereum and zk, is that for the network to survive, it has to be commercially viable. It's got to make money. The only business model for L1s in my opinion is priority fees, which is the same thing as mev. And that means building rollups that are generating their own MAV, external doing their own sequencing to the L1 that is parasitic to the L1. So those are competing environments.
00:49:02.446 - 00:49:16.410, Speaker A: They're great. We love competitors. We're all going to make each other better. They can be SVMs too. They're the sequencers. And that's great. We want that competition because if you're LeBron, you want to play against the best, you don't want to play high school league.
00:49:16.410 - 00:49:48.994, Speaker A: All that stuff is great. But it's not the Solana ecosystem. Those are SVMs. They're using the great power of open source to accelerate development everywhere. But in my mind that is the fundamental difference between ZK and all these other technologies and how they apply in Solana versus Ethereum is that Light protocol is great because C SE it's sequencing is happening in the Solana main net by Solana validators.
00:49:49.122 - 00:50:17.430, Speaker C: Let's take a very theoretical example this time and go the total opposite way. Imagine you have increased bandwidth as much as possible and reduced latency. And Moore's law is being taken advantage of fully. And all you have to do during channel saturation is get some extra hardware. Let's say you do that as much as possible and it's still not enough. Assume crypto actually does have more adoption. I know I personally would argue that it probably won't, but let's say it does.
00:50:17.430 - 00:50:19.110, Speaker C: What happens then?
00:50:19.650 - 00:50:40.230, Speaker A: Well, you cannot launch another network anyways because there is a Solana full node that is fully saturating the ISP's bandwidth in every ISP. There's no more capacity for anyone else. We've eaten all of the bandwidth available.
00:50:42.280 - 00:50:48.480, Speaker C: I guess that requires all the engineering kinks to have worked out before that saturated.
00:50:48.640 - 00:50:49.380, Speaker A: Yeah.
00:50:52.840 - 00:50:56.496, Speaker C: Well, that would be nice.
00:50:56.688 - 00:51:33.470, Speaker A: Yeah, we're done. People need to realize that like one gigabit is basically everywhere in the world, even in almost every cell phone in the world at this point, and that is 250,000 TPS, even in the current inefficient turbine. Like the way that Turbine is spec right now, can handle 250k transactions per second in one gigabit. It's astronomically in number. That is an absurd amount of tps. Let's saturate that and then talk about everything else and the end of Moore's Law or whatever. But we're.
00:51:33.470 - 00:51:59.160, Speaker A: Solana is what, 250x behind. We need a 250x improvement in load for us to even start thinking about anything else. One gigabit, which is a 25 year old IEEE standard. Literally it's tech that is older than I've been employed. This is insane.
00:52:00.220 - 00:52:01.282, Speaker C: I have it right now.
00:52:01.396 - 00:52:44.740, Speaker A: Yeah, we're not even there saturating this. So I think when we get there, when we get to fully saturated 1 gigabit turbine, which is what Fire Dancer folks demonstrated in a pretty cool environment, but still distributed, but effectively a lab setting. But it's possible. There's just a shitload of other problems to solve for that to be commercially live and than for applications to actually use it effectively. Because again, most of the load right now on Solana comes from markets to get saturated and then arbitrage that fills the rest of the block and it's not yet what I would call economically saturated.
00:52:46.280 - 00:53:03.228, Speaker C: How do you. Final question. How do you compete in an environment where let's say Ethereum has higher quality assets due to its existing liquidity effects and Solana has volumes. But perhaps the assets or even stables aren't really at the level what needs to change?
00:53:03.364 - 00:53:16.960, Speaker A: We can start calling Ethereum assets legacy assets and have all the new stuff launch at Solana. The meme has to change. Ethereum is for legacy assets.
00:53:18.350 - 00:53:19.210, Speaker C: Okay.
00:53:22.190 - 00:53:31.370, Speaker A: Tweet that and see. See, Throw a firebomb into the crypto Twitter sphere.
00:53:32.510 - 00:53:35.970, Speaker C: Okay, cool. Well, thanks for the time. That's all I got.
00:53:36.350 - 00:53:44.170, Speaker A: Thanks man. This was great. It.
