00:00:00.330 - 00:00:27.986, Speaker A: We've now looked at some introductory examples of solidity program code. So now we're going to look at an interesting mechanism. It's going to be an auction mechanism and in particular, it's going to be the Dutch auction, which is popular in CryptoKitties. Now, you may have heard of CryptoKitties as the first big NFT on Ethereum. This was a really exciting application. It was kind of the first of its kind. It was one of the first applications on Ethereum that became really, really popular.
00:00:27.986 - 00:01:23.830, Speaker A: And if you're interested in NFTs now, then you should definitely know about CryptoKitties because this is really how it all began. And these CryptoKitties are collectibles on the Ethereum network. You could collect and trade them and there was even a breeding game where you could breed these digital cats. Now, the feature that really made CryptoKitties exciting and that makes it a good example of smart contract programming and a good intro to DeFi, is that CryptoKitties was built on an auction mechanism, in particular a Dutch auction. So the way a Dutch auction works is that you start with a buy it now price, which is initially at its highest value that you're offering it for. And what happens is that as time goes on, the item up for sale starts at its highest price and it gradually lowers as time goes on. So the price is lowering and lowering as time goes towards the right.
00:01:23.830 - 00:02:10.006, Speaker A: At any time you can buy the cat at the current price. So if you want to wait for the value of it to go down, you could wait longer. But as soon as someone else goes to buy it, they'll get it at whatever the price is at. So the best strategy for playing in this auction is to wait until the price reaches the largest you're willing to pay for it and then you should hit buy it now, because if you don't, someone else might. So now we will look at the Dutch auction from CryptoKitties implemented in just a few lines of solidity code. So there are a few parameters for this auction. There is the initial price, that's the maximum price that the kitty will be for sale at.
00:02:10.006 - 00:02:40.858, Speaker A: At the beginning there's bidding period. That's how long the auction is going to last for in seconds. Offer price decrement is how much less the kitty is sold for as each second goes by. So this will be in units of Ether per second or way per second. There will also be a timestamp that's the beginning of the auction, the auction will last for. Start time plus bidding period will be the end of the auction. Kitty token here is an external contract.
00:02:40.858 - 00:03:12.842, Speaker A: This is going to be the NFT token that represents this cat. So this is going to be the address of the kitty token instance that we have up for sale. There's also an address for the seller. They're going to get the money at the end of they're going to get whatever someone buys it for, so it's marked as payable. There's also a value that's not going to be a parameter. It's going to initially be zero and it's going to be the address of the winner. So whoever is the first person to make a winning bid, they're the one who have bought the cat.
00:03:12.842 - 00:03:48.258, Speaker A: Now winner address will store their value and initially this will be zero. Now the Dutch auction has only a single method for bidding and it's called Buy Now. Whoever is the first person to call this Buy Now method and provide enough money to pay the price, they're going to win the cat. So the logic of Buy Now is as follows. First of all, we have to figure out what the current price is. So the current price is going to depend on how much time has elapsed since the start of the auction. So here time elapsed is going to be the current block timestamp minus the start time at the beginning of the auction.
00:03:48.258 - 00:04:29.026, Speaker A: The current price is going to be the starting price minus this price decrement times the number of seconds that have elapsed. So that's going to be the current price that'll always be counting down. User bid is going to be message value. So the bid is basically whatever the user is providing when they call this method. Now these require statements, these are going to do the checks necessary to check that the bid here is valid. So first of all, we're going to check that the winner address is zero, meaning that no one has yet claimed this cat. The first person to call Buy Now is going to have their address placed in winner address.
00:04:29.026 - 00:05:13.246, Speaker A: The only way that this will be set to zero is if no one has bought the cat yet. So this is going to check that the auction hasn't already been won by someone. The next require statement is going to check that the bid is timely. It shows up before the deadline, meaning the time elapsed since the start is less than the biding period. Finally, we are going to check that the user has provided enough money in their bid to exceed the current price, in which case they have enough money to pay for the cat. Now, if all of these conditions, these require statements are passed, then it means that this bid is valid and we have to carry out the conclusion of the auction. So the winner address variable that is going to be set to the current sender.
00:05:13.246 - 00:05:55.260, Speaker A: Whoever's invoked this Buy Now method, we are going to transfer the winner the difference between what they sent in Ether and the current price. So they get a refund and the current price is going to be transferred to the seller. So they sold it for a current price. This is what they receive in exchange for the cat. And finally, we invoke the transfer ownership method. Of this cat token, and we are transferring it from the current owner to whoever the winner is. Okay, so here you can see, basically how a simple auction mechanism can be implemented in solidity smart contract code.
