00:00:00.490 - 00:00:39.206, Speaker A: Welcome back. We're going to now discuss Defi attacks and focus, in particular of flash loans, or how flash loans can be used to carry out attacks. Notice that a flash loan is really just a tool. The attack is not just a flash loan attack. It's an inherent issue of the design of a DeFi platform. But a flash loan makes the attack execution particularly simple and cheap. Please, if you're unfamiliar with Defi flash loans, look at the previous lectures where we discuss how flash loans operate.
00:00:39.206 - 00:01:43.934, Speaker A: That's certainly necessary knowledge required to understand the attacks that we're discussing here. So what can go wrong? Right? You have access to billions of capital by just paying for a little bit of transaction fees and minor percentage of interest rates. So what can possibly go wrong? So we've seen that many Defi attacks are really kind of using flash loans, these instantaneous loans of significant size, to carry out attacks. A particular flash loan attack is the pump and arbitrage attack in February 2020. So this is a particular attack where there was a flesh loan transaction in a given block. The input to this attack was only 130 us dollar worth of gas. So this was basically the capital that the adversary had to collect and use to carry out this attack.
00:01:43.934 - 00:02:31.834, Speaker A: And the output of this attack was about 350,000 us dollar, quite a sizable amount. So we will not go into all the details of this attack. We will discuss the second attack in a bit, but just want to show you the general pattern of how a flash loan attack looks like. So we have here in the first step, there's a flash loan, right? So here, the adversary took a flash loan on the platform, DydX. So the flash loan is actually free there, more or less free. It just cost like one way in fees to lend to get this flash loan there. And then there are a few operations, so we don't have to dive into details for this one, which obviously, if you want, as a homework, you can do.
00:02:31.834 - 00:03:27.680, Speaker A: But here, I really just would like to show you that there are a few DeFi actions that are being carried out. For example, there's a lending action, there's a margin trade, there's an exchange, another exchange, and finally, in this transaction, the flash loan is being paid back. So what you notice here is that there are various platforms that are involved, right? So there's compound, there's uniswap. Again, uniswap. There's BZX for the margin trading, and there's Dydx for the flash loan itself. You might also notice here that there are some pools, like amm pools in particular, the eth wrapped bitcoin pool where prices are being dumped here, for instance. And there's another uniswap pool here where, I mean, the same uniswap pool that's also affected here.
00:03:27.680 - 00:04:44.342, Speaker A: So there is a second stage to this attack where there is an amount of ether that's converted to wrapped bitcoin, which is being done on compound. So, again, Kyber is involved here. So you see there are quite a few Defi platforms involved. So the high level message that I just would like you to gather from this particular example is that these types of Defi attacks do basically involve multiple Defi platforms in an atomic transaction. So this first transaction here is atomic, meaning that the actions 1234 and five, they all execute either collectively or they fail. And this very atomic property among different platforms is really something super exciting, super new, something we've not seen in traditional finance domain, just for the sake of this particular attack. So we looked at this attack in detail, and we found that the adversary could have chosen better parameters to carry out the attack.
00:04:44.342 - 00:05:30.390, Speaker A: So, by parameters, I mean parameters, for example here, 10,000 ether. Could we have taken more and made more money? We don't know. Right. So there are a few parameters that could have changed, for example here, how much do we collateralize? How much do we borrow, how much do we convert here, et cetera. Right. So the idea is that given that you see such an attack on chain, you can model this attack, and you can find out whether with an optimization framework, as we will discuss in a bit, you can find out whether the attack is executed in an optimal manner or whether the adversary left money on the table. So the second attack that we are looking at today is the BZX oracle manipulation attack.
00:05:30.390 - 00:06:37.546, Speaker A: So this was actually the second attack that was carried out on BZX in February 2020. So the first step of this attack is an adversary taking a flash loan on BZX. So, BZX we had in the earlier example is a margin trade provider, but also performs or allows performing or allows borrowing a flash loan. So with the 7500 us dollar, the adversary basically takes 540 of this ether, and he exchanges this on Uniswap, and he exchanges this to dollar. So this is the previous market price of ETh SUSD, and this is the market price after the adversary performs the trade. So you can see here that the liquidity in this Uniswap pool is not that high. Right? So the exchange rate is significantly affected because we are adding here, 540.
00:06:37.546 - 00:07:20.374, Speaker A: So here, 880 plus 540, as roughly this 1420 ether. So the price certainly drops. Right? So we have the initial exchange rate here as follows. And the price is clearly dropping here to 106 SUSD per ether. Then, in the second step, what the adversary does is he goes to the Kyber reserve, which is another exchange. And in the Kyber reserve, he sells or she sells 360 ether for Sus dollar. Right? So again, we can see here the Kyber reserve had actually very little ether at the time and quite a lot SUSD.
00:07:20.374 - 00:08:05.126, Speaker A: So very imbalanced, which is generally not very healthy either. But we can see here, this is the change of price. So we can see here as well that the asset price was dumped quite significantly to 108.44 susd per ether. So now we know, okay, in this atomic transaction, given the flash loan, the adversary dumped the price of SUSD on the Uniswap and on the Kyber reserve market. So now what the adversary does is the adversary would like to mint SUSD. And the thing is, the adversary still has quite some ether available.
00:08:05.126 - 00:08:45.634, Speaker A: So the adversary uses 3500 ether to create SUSD. And we can see here that now the adversary has quite some Sus dollar. The adversary can now go to BZ, which is a margin trading platform. And given this SUSD, the adversary can lend now ether at this platform. So we have about 1.1 million s us dollar, which will give us almost 6800 ether. So quite a significant amount in terms of ether.
00:08:45.634 - 00:09:47.110, Speaker A: If you remember, we took roughly this amount at the beginning in the flash loan. The very important insight here is that BZX is using the Uniswap and the Kyber reserve markets as an oracle as a price. Oracle, the BZX on chain market, somehow has to know what is the price of SUSD to ether. And because the adversary dumped the price of SUSD to ether on the Uniswap and carbon reserve pool, which act as an oracle in the BCX platform, we naturally get a really good price for an SUS dollar. So you notice here that the adversary ends up with 9800 ether, which is an incredible amount. And initially, the adversary literally took. So if you go back here in the slides, only took 7500 ether.
00:09:47.110 - 00:10:50.446, Speaker A: So the idea of this attack was really this oracle manipulation. And naturally, the adversary can then pay back the flash loan to BZ, which is minus the 7500 ether, and we end up with over 2000 ether in profit. So you might ask, now, how do we optimize such an attack? So how do we find out what the optimal parameters are to execute such a DFI attack? Well, what we can do is we can formulate the DeFI actions in models, right? I mean, we know that a constant product, amm, for example, can be expressed in this way here. And given the model, we can construct a constraint optimization problem based on the attack vector. I'll give you an example just in the next slide. So, the objective function that we want to maximize is the outcome profit. So what we do is we fetch the onchain state that the attack is expected to be executed on.
00:10:50.446 - 00:11:36.298, Speaker A: And then given the onchain state, we can optimize the parameters. So let's look at how this would work for the BZX attack. Two that we just discussed. So we have an initial borrowing, right, and an end repay. So we have a borrow flash loan and a repay flash loan at the end, if we don't pay back the flash loan, the transaction would fail. Hence we have to naturally pay back. So what's being done in the first step is that we have a parameter, one, we don't know how many ether we want to provide to uniswap, right? So there's a certain function of this p one of Susd that we want.
00:11:36.298 - 00:12:53.070, Speaker A: The second parameter here is how much ether are we going to contribute to Kyber. So you remember, Uniswap and Kyber together are the price oracle for Bzx. The third parameter that we are looking at is how much do we put into synthetics to mint sus dollar? And then how much z sus dollar should we borrow? Should be used to borrow g of z ether on Bzx itself, right? You remember this was the last step. So Bzx here, this is Bzx. Bzx is basically using Kyber and Uniswap as a price oracle. So we can exploit, in a sense, the fact that Bzx relies on this, on chain markets that we can so easily manipulate. So, putting all together, we have here this function, and we have the following objective here that we want to maximize, right? And naturally p one plus p two plus p three has to be smaller than x ether.
00:12:53.070 - 00:13:49.762, Speaker A: So that's the maximum amount of ether that we can lend. That we can borrow, borrow as a flash loan from the Bzics platform. Naturally we can choose any other type of flash loan platform, doesn't have to be Bzx. I just followed in this particular example what the adversary has done before, so you can basically throw it into an optimization algorithm. So we have used the sequential least square programming algorithm, which is available in Scipi. We have executed this on an Ubuntu 1816 cpu cores, 32 gigs of Ram rather small machine and we then validated this by concrete execution on the real blockchain. So if you would like to do this yourself you can use for example hardhat to fork the chain at a particular height.
00:13:49.762 - 00:14:54.660, Speaker A: So I hope this gave you a good introduction how a flash loan attack is possible. Recall flash loans are really just a tool for you to carry out the attack. Maybe think for a little exercise of how would you prevent such an attack? So this was an oracle manipulation. Well if your defi app is relying on a market where the price can be easily manipulated through a flash loan then maybe that's not the safest. So you might want to use additional oracle sources. Uniswap also now provides a time weighted average price which should be less you by an adversary. But this remains a rather difficult kind of challenge to secure a DeFi protocol because the state of other protocols might be dependent on yours and an adversary might be able to create such a market manipulation attack.
