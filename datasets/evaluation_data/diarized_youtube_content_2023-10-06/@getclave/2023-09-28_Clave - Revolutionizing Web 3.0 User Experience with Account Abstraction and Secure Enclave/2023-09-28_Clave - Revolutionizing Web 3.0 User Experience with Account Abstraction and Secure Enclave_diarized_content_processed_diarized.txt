00:00:00.120 - 00:00:37.130, Speaker A: Awesome. Thanks a lot Isha. Then today I would like to, well, we would like to start the whole presentation with a quick presentation of what Clave is. And then following that, we do want to show you guys like a small demo which works both with secure enclave in mobile phone and also webauth and in the web browsers. Following that I think we can do some kind of a q and a section or maybe a quick discussion on how account abstraction and also trusted execution environments can improve the user experience in web3. So I will share my screen. I don't know if you can see it clearly.
00:00:38.110 - 00:00:39.326, Speaker B: Yes, it's fine.
00:00:39.478 - 00:01:26.200, Speaker A: Okay, awesome. So let's start. So we do want to start with what Clave is. Clave is basically a platform that is trying to achieve one huge gap between web two and web3, which is user experience. So what we eventually want to do is that we do want to make web3 users user experience as simple as web two users, which means that this is also a gateway for onboarding web two users to web3. I know it's a bit complex sentence, but this is essentially what we are doing. And as our first product, we are building a mobile first web3 application which is essentially working as a wallethead, but it has some really cool built in features.
00:01:26.200 - 00:01:50.770, Speaker A: Within this wallet we are providing hardware level security thanks to trust execution environments, aka secure enclave for iPhone or trust zone for Android. And meanwhile we are fully aligned with ZK sync vision, which means that we do see a great value in the real world use cases, as well as bringing the web to user experience to web3 by supporting account abstraction natively.
00:01:52.750 - 00:01:53.446, Speaker B: So.
00:01:53.598 - 00:03:06.750, Speaker A: Well, I think this does not make a lot of sense to mention the UX problems of f three in this call, but. Well, what we are meaning by wallet today is that we are just encrypting beep 39 private key and storing it in the cache or the local storage of our browsers and then signing some transactions. And we are calling that a wallet, which has not a quite nice user experience. On top of that, there's not any customization, there's not any flexibility to pay the gas fees, for example, other than meta transactions, which is kind of a workaround to be honest. But also there are some cold wallet solutions which then do require you to connect your usb to your desktop device or your laptop and then sign the transaction, which is kind of complex. Again, there are some MPC solutions which are emerging lately. I do believe they're cool, but then depends on your choice of selection that can basically rely on a centralized server, not talking about the security wise, but talking about the single point of failure.
00:03:06.750 - 00:03:51.440, Speaker A: What we offer enclave. As I've mentioned, we are transforming devices into hardware wallets. Um, this is kind of a sentence for like marketing, but we literally are doing that because um, well, let's talk about secure enclave a bit. Secure enclave is basically an isolated processor inside iPhone devices. So within these processors we can generate keys that are living inside the phone, but encrypted within a key that is stored in secure enclave. And then we can use these keys to sign transactions or any data that we want. But the problem over there is that the signature schema that we are using here is seg P 256 R1, which is not supported by most of the blockchains right now, including bitcoin or ethereum natively.
00:03:51.440 - 00:04:40.970, Speaker A: So we have decided to, well, first we have launched our demo in Ethereum global hackathon and we have decided to build a precompiler for stack P 256 R one precompiler, and then verify the transactions within this precompiler. Following that, we have decided to do that via smart contracts so that any chain can use that. But it was costing a lot of gas. But finally, thanks to laser team, they have reduced the gas quite a lot. But even though I think the best option will be to follow either a precompiler or a circuit, which we have also an EIP that is prepared for that. Well, I will pass the word to after a couple of slides so that he can mention about the dip. So our second offering is batch transactions.
00:04:40.970 - 00:05:27.306, Speaker A: Batch transactions is basically like, it's not something that you are sending to the sequencer or to the validator and being validating at once. But since we are using smart contract accounts, we do have our own custom verifiers for the transaction logic. It does not have to essentially be verified within k one schema, which then has to be one transaction object. But instead we can bring user ops as mentioned in 4337, I'm talking about the IP and then verify them all in one transaction which can be sent as a one transaction to the blockchain in the ZK sync part. The batch transactions are quite possible with smart contracts. The only problem that we have faced as of today is the block explorer. I mean this is, yeah, the block explorer.
00:05:27.306 - 00:06:24.730, Speaker A: I think the UI of that is not like right now, it's not capable of showing those batch transactions and showcasing to the people what the transaction consists of. So currently we are working on that and we do want to propose a common way of like a common approach for ZK sync to execute batch transactions. We do want to submit it to the whole ZK sysing community so that you can review, you can comment, you can send some comments, and then we can merge it. I'm not like not merge it to the native because it's already supporting the smart contracts, but then we can deploy it to the casing and then use it all together. No seed phrases or private keys. Well, so normally in MPC like multi party computational wallets or even in EOas, you are generating a private key that is able to sign transactions. In k one schema in secure enclave part, we do not generate any seed phrases or private keys and then store it manually.
00:06:24.730 - 00:06:58.204, Speaker A: Apple has a pretty strict approach on that. They are generating the key, they are keeping the key in the secure enclave processor and never ever being accessed within the operating system. Now we do not generate any private keys or seed phrases, but the phone itself is signing the transaction directly. Customizable preferences are. It's like this is literally endless possibilities. We are talking about spending limits, which we have already implemented. One of our demo, one of the most hype things for me is session keys.
00:06:58.204 - 00:08:10.850, Speaker A: We have done a demo in eat cc I think two or three months ago. Within those session keys, I think the most viable option to use session keys is inside games. Imagine that you are building a game, but within this game you do need your user to sign a transaction every time they do make an action that change the state of the game. Within session keys, you only need to take one signature from the user at the beginning of the game session, and then the wallet knows that for that amount of time that wallet is willing to give any signature to the game's wallet or like treasury or like the backend. And the wallet of the user is constantly signing or just signing one transaction and then the wallet is verifying every transaction that is related to that game only. So that means that the user is giving one signature and then the game can move the assets related to the game or nfts related to the game without giving additional signatures for a certain amount of time for one account for all, we are building really viable recovery and backup options that can be used all across the ZK sync ecosystem. Currently we are working on two options.
00:08:10.850 - 00:09:07.636, Speaker A: One is social recovery, which implements guardians so that you can make your friend a guardian. And once they start a recovery process there's a time delay for security so that we can send you notification and you can know that your backup recovery process has started. For the second option, we are building some cloud services like iCloud or the Android cloud solution, so that the user can basically generate an UI wallet and then encrypt it with the inbuilt solutions so they can be used as a recovery option. And it also has a pretty good amount of time log so that the security still depends on the secure enclave, but the backup can be done by iCloud. Flexible gas payments like paymasters are already supported natively in Z casing so that you can sponsor to your users transactions. You can make your users pay transactions in any ERC 20 token. You can basically code any logic you want, which currently we are doing some different stuff, I will come to that.
00:09:07.636 - 00:10:07.870, Speaker A: But let's mention briefly in Devconnecthen Istanbul during November, we are planning to basically showcase our users how you can use secure enclave supported wallet as a payment method. And so we do want to sponsor to our users, but we do not want to deploy or airdrop them USDCs, because then we cannot know if these USDCs are basically going to be used to spend for coffee. But instead we are building paymasters. And these paymasters has a credit logic. This credit logic is it has a transaction amount, so the user can make up to five transactions, which is sponsored by us, but these transactions have to be done to the contract that is related with this coffee shop payment. So you can code any logic you want in a paymaster. That's an awesome enhancement in the blockchain area, because like it really improves the user experience a lot.
00:10:11.770 - 00:10:39.240, Speaker B: For testing these items, you can consider these offerings as the base architecture of the playwright system, which will then show some additional applications and use cases that transform into web3 experience and by adding some web two users and native users. And these ecosystem will be evolving with lots of additional features.
00:10:40.420 - 00:11:44.820, Speaker A: Yeah, so the Paymasters, can they probably going to be able to be offered by our SDK, which is available for all the Zksync developers, and you will be able to sponsor your users transactions or then make some pools for Paymasters that you deposit Ethereum and then take the payments as a USDC from your users. So how clay infrastructure works within this infrastructure, we do have the mobile infra, which we are referring to, let's say iPhone for this example. The iPhone has an isolated processor called secure enclave. As I mentioned before, the mobile phone prepares the transaction data. Well, the user prepares the transaction data, but then the secure enclave signs the transaction data and it's essentially taking the transaction data into the secure enclave processor, decrypting the secure enclave key, signing the transaction only, giving the signature back to the operating system level. No one can ever access to the key that is generated by secure enclave. So this transaction data is then being sent to the bundler.
00:11:44.820 - 00:13:30.250, Speaker A: But bear in mind that for the ZK syncates thanks to native account abstraction support of z casing, the boundaries the sequencer so you do not have to send it to a bundler or an, or an alternative mempool as mentioned in 4337. But instead all you need to do is send it to the sequencer of the z casing and then it's not even sending the transaction to the entry point, but directly to the account contract. So in our z casings flow, the sequencer is directly sending the transaction to the account contract and then the account contract is sending the transaction to target contract. If there is a paymaster inside the transaction data, then first the account contract asks to the paymaster to pay for the gas fees and then giving to the target contract to then execute or invoke the function. But a quick note, since a lot of account abstraction infrastructures are already built on top of, well are already relying to entry points, we are planning to co work on a mutual entry point on the casing ecosystem to then deploy and then so that it can be used by variety of account abstraction infrastructure projects. If you do have, if you do want to contribute to this project, that would be awesome to hear more from you so that we can collaborate and then deploy an entry point altogether. Well, I think we have mentioned our advantages quite a lot, but let's talk about the fourth point, which is we are not just building a web3 wallethead, we are trying to build a whole ecosystem that allows your applications to then be used by variety of web two users easily.
00:13:30.250 - 00:14:42.930, Speaker A: So we do want the applications that integrate clay are really really simple to then be interacted from web two users so that it can support payments like session keys or spending limits. We do not like to mention Clave as a web3 wallet, but we do like to mention it as an ecosystem that supports a lot of features that improves the user experience in the web3 ecosystem. What we have done so far we have first launched the claves demo in scaling ethereum hackathon and then we have started working with Matterlabs which was an awesome experience. And then we have launched mobile and web demo. Then I think this part will need an extension. We have submitted EIP seven to 212 which is bringing, well, it is proposing chains to then integrate Seg P 256 R1 natively as a precompiler or as a circuit. I don't know if ULA would like to mention about the current situation of the eipdeh.
00:14:43.500 - 00:16:07.142, Speaker B: Yes, I can add your comments about that. Basically, we need some additional and efficient requirements to work with secure enclaves or similar tees in the mobile device ecosystem and running these cryptographic operations directly via the ZKE EVM. Sorry, the EVM is nearly impossible because it's not Gaza fish and it's kind of a complex operations for a blockchain. And there's pre compiled contracts which are running the operations inside of the clients of the blockchains. Then these complex operations are able to run inside of two blockchains. So we believe that using a precompiled contract for Sec P 256 one elliptic curve would be a valuable contribution for each blockchain. So we want to standardize this addition in Ethereum and different roll ups including the ZK sync and proposed this EIP proposed adding this precompiled contract inside of uM, so that everything can take the initiative and prepare this implementation for their blockchains.
00:16:07.142 - 00:16:15.850, Speaker B: And happy to share that ZK sync has started working on this implementation for the ZKVM.
00:16:17.150 - 00:17:07.980, Speaker A: And also I think we can ask some free reviews for the EIP in the magicians and also in the GitHub. So, yeah, and as of July we have started exploring B two C payment explorations. It's kind of, it's kind of complicated with all the services that you do need to have a payment channel like Visa or Mastercard and then find a pin sponsor and then convert the tokens into fiat money. But I think that will be a great enhancement on top of secure enclave supported wallet, which our users then can pay for anything that they do want in the real world. Well, blockchain is also a real world. Okay, so we have closed the precede funding in August 2023. So like a month ago.
00:17:07.980 - 00:17:50.750, Speaker A: This is our team. I'm really bad about talking the team, but this is our team. I'm skipping that part. Yeah. So I think we can move on to the demo and then if we do have any questions, we can make some q and a in the chat. I will share my screen from my mobile phone. Okay.
00:17:50.750 - 00:17:54.910, Speaker A: Can you see my screen? Yes.
00:17:57.130 - 00:17:58.430, Speaker B: Okay, awesome.
00:18:00.490 - 00:18:31.930, Speaker A: So this demo is like the UI is actually mock. So this is just to show the functionalities of clay. And all you need to generate an account is your nickname, and then it will generate a secure enclave generated key within that identifier. So I do want to generate a wallet. Let's call the nickname Zksync Eco. Once I hit create account. It will scan my face and then it will generate the secure enclave key.
00:18:31.930 - 00:19:01.952, Speaker A: It's taking some time to deploy the account in this demo because there are some flaws, but currently we have. It is. It literally takes milliseconds once you're inside the app. The part that we do want to show is sending a transaction and signing it to secure enclave. So of course we are minting nfts. So to mint an NFT, you do need to sign a transaction to mint the NFT. Once you hit the mint button, you can see that the gas fee is sponsored by Clay with a paymaster.
00:19:01.952 - 00:19:40.424, Speaker A: So to sign this transaction again, all you need to do is scan your face and the transaction is being sent to the, to the chain and the transaction is confirmed. So you can see the authenticated devices for this account. This account can have multiple devices as a signer. As of right now, the only device that is supported is my iPhone. I do want to show you another part that you can see. So I do want to use my Mac to sign a transaction. But first I think I do need to close this screen sharing.
00:19:40.424 - 00:19:58.660, Speaker A: Right again. Can you see my screen?
00:19:59.690 - 00:20:00.470, Speaker C: Yes.
00:20:01.010 - 00:20:50.400, Speaker A: Okay, so now you will see the same exact wallet that is being synced to my MacBook so that I can use my MacBook and sign transactions with webo. Ten to then sign and send transactions. The nickname was the ksync eco. Once I connect, I can see the authenticators. The only signer of this wallet is iPhone 14, which I cannot choose because I'm on my MacBook right now. But if I do want to generate, but if I do want to authenticate this device, then I do need to generate a web authentic inside my Google Chrome MacBook. Then once I scan my finger in my MacBook or I can type my password, it will generate a QR so that I can then scan it to authenticate.
00:20:50.400 - 00:21:23.170, Speaker A: And to authenticate, obviously I do need to sign and send a transaction from my mobile phone which requires my face id. And I'm saying that this MacBook is now authorized for this wallet as well. It is done. So now if I do want to mint an NFT in the same exact wallet, I do need to just scan my finger and then the transaction is done. I'm sorry, I was sharing the Google Chrome. Were you guys able to see the Webauth ten windows that are popping up? So I was scanning my finger.
00:21:31.070 - 00:21:38.166, Speaker D: I don't think we saw that, but. Oh, but I think your explanation was enough. Yeah, we understood it.
00:21:38.318 - 00:21:47.526, Speaker A: Yeah. All right. Okay. So one sec. Okay. Just one more mint. So now can you see that?
00:21:47.718 - 00:21:48.530, Speaker D: Yes.
00:21:49.080 - 00:22:05.940, Speaker A: Okay, awesome. All right, then I'm scanning my finger, and then the transaction is being sent. So it just. It's now three nfTs. I will show you guys the NFTs on Opensea, they do not have an image, but. Okay. Yeah.
00:22:05.940 - 00:22:32.490, Speaker A: So on the opensea, we can see that we do have three items which we have minted 580, 81, and 82. So that now I can use my desktop as my wallet as well. I think this is all for the demo. If you do have any questions or a topic to share, that would be more than welcome.
00:22:38.950 - 00:22:40.548, Speaker C: I've got a bunch of questions.
00:22:40.694 - 00:22:41.380, Speaker A: Yeah.
00:22:43.080 - 00:22:46.620, Speaker C: Rafi, I love your product. It looks really cool.
00:22:46.920 - 00:22:47.940, Speaker A: Thanks a lot.
00:22:50.600 - 00:23:34.880, Speaker C: I'm building a adap, and my biggest problem is the stupid wallet. I have an adapt for registering high end bicycles on the blockchain. It's all built in Zksync. I've abstracted away as much crypto as I can. Like, I don't want users to deal with crypto at all. So I'm using paymasters for the transactions, basically for the minting of the NFTs and so on. So I'm having a hell of a time integrating with metamask and all, you know, whatever other wallets I've tried so far because of the paymaster stuff.
00:23:34.880 - 00:24:33.690, Speaker C: And so I see that you're using paymasters completely. And the other thing is, since you have an account abstracted wallet and you seem to have also the ability to basically create the wallet very simply and very quickly. Is there a way to work together such that we could integrate your wallet solution into our Dapp? So that when we onboard customers that are of. Have nothing to do with crypto, that they simply can log in through your wallet and then basically create the NFT and transactions and all that and transact directly through. Through the wallet. Is that something I want to, like? My goal is really to abstract away anything that has to do with crypto, and I just want to use the blockchain. Like, the payments for.
00:24:33.690 - 00:24:54.310, Speaker C: For my service are being done through fiat currency and not through. Through crypto. Yeah, through kryptos. The only thing is, you know, I'm handling through the Paymaster all the payment of the gas fees and stuff like that. But getting this whole thing to work and integrate and all seamlessly has been terribly challenging.
00:24:54.690 - 00:25:33.640, Speaker A: Yeah, I think that. Yeah, that's a great question. Thanks a lot. The thing is, so, like, we do know certain protocols will want to sponsor to their own users, but not to the other protocols so that we do need a log or a database to know that, which protocol supports which paymaster that they have deployed. So that we can match the paymaster addresses with the protocol addresses. And once the user connects either with a wallet connect to the clave in your application, the application will bring the paymaster that you have deployed automatically. If you have submitted the Paymaster, we do want to fully support that on launch.
00:25:33.640 - 00:25:54.170, Speaker A: So that if the contract that they're transacting or if the contract that they are making anything is your contract and you have submitted that this contract has a paymaster related with it. We will be showcasing the Paymaster under that and saying that this is a sponsored transaction from. From the app owners.
00:25:57.030 - 00:26:39.030, Speaker C: Okay. Is there a way to just get rid of wallet Connect completely and just work directly without wallet connect involved? Because Wallet Connect is another layer of complexity that I don't want to subject my users to. Like, I'm working really hard to get rid of it right now. I'm trying to use the Metamask SDK, which works fine on Apple, but I can't get it to work on Android. And like every. Everywhere I go, there seems to be like, you know, some sort of edge case where there's a problem where, you know, unless you're doing the basic, you know, wallet integration, everything else fails somewhere along the line and I can't.
00:26:40.730 - 00:27:25.370, Speaker A: Yeah, so I was talking about the application support, but as I've mentioned, we do want to prepare and deploy an SDK that can be used by the ZKsync ecosystem developers so that you can choose any part that you do want to integrate in your application or in your web app, either Webauthn secure enclave or any other application that you do want to do. But currently we do want to launch the application first because we do not have that much of human resource to build both of them at the same time. But following the application, there will be an SDK that you do not need your users to deal with our application, but instead, like instantly interact with your application so that the SDK can be used and the transaction can be made.
00:27:26.870 - 00:27:31.130, Speaker C: Okay. And your timeline on something like that is still.
00:27:31.950 - 00:27:54.160, Speaker A: I think I cannot give a timeline for the SDK. Yeah, I can give. I can say the January is the full launch of the application. Following that, we will start to build it. But I can say that for the wallet part, we are building a lot of. Of stuff modularly so that we hope it will be easy to convert it to SDK. But, like, I don't know, I think I do need to look into it a bit more.
00:27:55.540 - 00:28:05.720, Speaker C: Okay. And then the wallet would then work like a standard wallet through a metamask integration, basically, to do the connection, is what you're saying.
00:28:06.620 - 00:28:07.440, Speaker A: Yeah.
00:28:09.990 - 00:28:30.342, Speaker C: And the issue I've had is that is, is that when you're specifically. Metamask is when you're asking for approval of EIP. Sorry. Type 113. Transaction through wallet connect. At least with metamask, it fails. If I go through.
00:28:30.342 - 00:29:16.156, Speaker C: If I go through the Metamask SDK directly, I can get those transactions to work. But if I go through wallet connect, I can't get those, those transactions, they will fail because the metamask, not metamask, sorry, wallet connect. And I suspect it might have something to do with vm, the VM integration, because it's only since wallet connect v two, but the custom data that's required to pass the paymaster data to the transaction is rejected as an unknown key in the object when you try and submit it. I don't know if you guys have dealt with that or had issues with that. It might not be an issue for you guys.
00:29:16.268 - 00:30:03.990, Speaker A: I don't know. To be honest, we did not have any issues in the demo with WorldConnect, but it was using version one, and then they have migrated to version two. And we did not upgrade it, to be honest, because it's just a demo, but we will see it down the road, and I think we can basically have each other's contacts, so that if we can help, we would be more than happy to help. I do know at some cases we were using 712 to sign transactions just for the approval, but for the rest of the signatures, we are using our own verifiers and also signing on SegpR one. The transactions. I'm not talking about the messages, but yeah, so for the messages, we do need to check it out, as you said.
00:30:06.330 - 00:30:14.546, Speaker C: Okay, so can we stay in contact maybe and then.
00:30:14.698 - 00:30:16.070, Speaker A: Yeah, yeah, yeah.
00:30:16.890 - 00:30:21.830, Speaker C: Also, you were looking for contributions for stuff or what? Are you looking for contributions?
00:30:23.170 - 00:30:28.710, Speaker A: I think for the EIP seven to 212, your reviews would be awesome. I'm sending it to the chat.
00:30:32.250 - 00:30:53.414, Speaker B: So I think we will be sharing some acoustic contributions to the casing, and we will also need external support, development and reviews for this kind of proposals in the casing. So when we shared reviews for them would be available soon.
00:30:53.582 - 00:31:24.342, Speaker A: Yeah, we'll be sharing batch transactions, multicols and ens support natively at this. Yeah. And also an entry point. So maybe that could, that could basically solve your solution, I guess, because like, then you do not need to send the transaction directly to the sequence phenomenon. You do need to send it to the sequencer and then sequencer will call the entry point. The validation will be done in the. Okay.
00:31:24.342 - 00:31:30.410, Speaker A: All right. I do need to think a bit more on that. Well, yeah, let's keep touch to then discuss it.
00:31:34.030 - 00:31:42.410, Speaker C: Okay. Why don't I send an email to Isha? Because I have Ish's email with my contact information. Maybe she can pass it on.
00:31:43.910 - 00:31:46.360, Speaker D: I will go ahead and connect you both after this.
00:31:46.550 - 00:31:47.356, Speaker A: Okay.
00:31:47.508 - 00:31:50.540, Speaker C: All right, thank you. Appreciate that. All right.
00:31:50.700 - 00:32:06.040, Speaker D: And another thing, Rafi. Like, wherever you need support, right, in this case, for the entry point and the other places that you mentioned, if you could, like, send across the resources to me and the links, so I can just forward it on, you know, the chats, all the channels, I think that would be pretty useful. No?
00:32:06.340 - 00:32:11.636, Speaker A: Yeah. Okay. Appreciate it. I will. I will send the. Today or. Or tomorrow.
00:32:11.636 - 00:32:17.244, Speaker A: We will be sending the EIP links. And as soon as the rest of the improvements are ready, we will share those things as well.
00:32:17.412 - 00:32:21.240, Speaker D: Perfect. Does anyone else have any more questions?
00:32:27.340 - 00:32:28.732, Speaker A: I think we are all done.
00:32:28.836 - 00:32:44.716, Speaker D: Yeah. Okay, then we can wrap this up already. I will be sharing the links, the demos that are there. We'll reshare it again, the deck that Rafi presented and the recording. So, you know, you guys have everything in place after this workshop. So thank you, everyone, for attending. And thank you, Rafi.
00:32:44.716 - 00:32:51.608, Speaker D: Thank you. Like, this was super informative. This was great. So thank you for making this happen and have a great day. Bye, guys.
00:32:51.784 - 00:32:53.940, Speaker A: Bye bye. Thank you. Bye.
