00:00:04.000 - 00:01:08.334, Speaker A: Hey everyone, this is the firm, this is the k two, or restricting cloud walkthrough. So we're going to touch about three details. What is a k two, what is a restricting cloud, how it works, what is the on chain contract? What's the slashing logic? What's an SVP? What is a lot of technical terms, but also it's an overarching point that what is a k two? Right, Keto bean's case cart. So take a step back. Restaking cloud is an effort to bring, how do you restake economic security right from, we start with the restaked ETH. So how do you bring economic security from the restate ETH and extend the trust to other networks? And we're going to talk about bunch of utilities, what you can restake for. Put it simply, you can restake your economic security for slashing, which means we have hundreds of roll ups are going to come, or all the middlewares, all the oracles or other kind of things.
00:01:08.334 - 00:01:48.798, Speaker A: They need economic security to decentralize or provide the services in a very transparent and verifiable manner for the market space. So what do you need? You need stake, right? You can borrow staked Eid from the pool and then he can use it for other networks to secure them. The decentralized network. That's one option if you think from a slashing perspective. But risk taking is not just limited to slashing. Risk taking is reusing the economic security and trust. So essentially looking at that is a 200 billion asset class.
00:01:48.798 - 00:02:56.614, Speaker A: And if you just take about 70% or 80%, and we want to make sure the sovereign asset as an ETH will be available for other protocols and other networks to be a base layer to build upon their decentralized network or reinforce the service quality operations and things like that. But how do you do this? Just the money will do it. No, you need to have a verification mechanism that outside networks, if they are borrowing this capital, if they are reinforcing their operations, if they are reinforcing their decentralized stack, there is a mechanism, the slashing will happen or payouts will happen. So this is a very important subject. Someone will tell something is going right or wrong and they get paid for that. That's the nutshell that needs to be verified. And if it is an open market, then you can have all kind of problems like, you know, how do you know the guy is telling the truth? So the truthfulness and verifiability is a very important part.
00:02:56.614 - 00:03:34.130, Speaker A: And along with that comes with the report integrity, right? So the k two, leverage a zero knowledge scheme that allow. Anyone can inject a slashing logic. Anyone can inject a. A reporting logic for the oracles price are good. If there is any service is going down, then they can tell that. Or if you are, whatever, that's the cross chain mechanism doing is correct, this is the payout, or it could be slashing. I don't want to confuse a lot, but just let's stick to the slashing logic.
00:03:34.130 - 00:04:52.644, Speaker A: If you say that if a roll up is going, if there is an effort proof and things like that, you can slash it. But this is actually a good thing for the user base and the decentralized network because there's nobody you can go and ask like the money to come back. The decentralized network is more of like reporting and fault tolerance. You know, in ethereum, if something happens in ethereum, you cannot go to somewhere and say that, you know, I need to get my ETH, but rather you want to make sure the chain is not reorgan, you want to make sure the chain, the blocks are not corrupted, not tampered, not just synced. So similarly the toolings that you're getting, the data is not corrupted. So all this kind of stuff, right? So from a decentralized standpoint, anything, any slashing mechanism is positive for the users, it's not a negative thing, but you're just making sure the networks are correct. But if you take a step back and see that economic security is kind of a fallback mechanism, that you can build any kind of logic on top, it's not only about slashing the network liveness or fault tolerance and things like that, but you can inject this economic security available for your own protocol and say that hey, we're doing this kind of liquidation mechanisms are correct, and this we watch out for.
00:04:52.644 - 00:05:32.530, Speaker A: So there will be a watcher network that this, put it simply as a task robots, you can tell them anything that you want to do by them and they will inject this data. One important factor is this, the reporter mechanism. The reporter is a witness endorsement endorsement scheme by the ZK gadget. And this is what it is making possible. And external data is injected to on chain contract with integrity. What does that means? No one can change the data in between the last man flip problem, or there's a absolute integrity on the data. It's proved by zero knowledge scheme and there's a designated verifier.
00:05:32.530 - 00:05:58.944, Speaker A: We're going to walk through some of this stuff, we're going to show some of the UI how these things happens. It's very simple. If you want to use k two, just go and deposit. If you have staked ETH and you get yield on top of your stake. Deed yield, right? That's pretty simple for. So who can deposit, anyone who has an LST or re, you know, deed or any lsts that has been provisioned can actually deposit that one, right. So it's very inclusive.
00:05:58.944 - 00:06:29.912, Speaker A: The middlewares just go and open and say, hey, I want x amount of security. And they, they opened that called SVP. That's a slashable borrow position, or in a secure borrow position, which if you want a million dollar worth of security, you don't really pay that million dollar, but you just pay usage fee for that. But you can enjoy that million dollar security throughout the year. And now all this pooled ETH is available for you to reinforce, protect and extend the trust for you. And again, this is like a click of a button that you have it. That's it.
00:06:29.912 - 00:07:14.156, Speaker A: The slashing logic or proving logic, or you want to verify your data is all you can tell the reporter and then they will just watch out for you and the designator. Verify, do it. It's pretty simple, very go to solution, like a very mainstream defi kind of stuff. One thing too important for the k two, unlike any other slashing logic, everyone say how does the slashing or reporting works is if you have a private data, it needs to be make it public. And that's more or less you make your data doxing rights. There is no such thing here. This is a private publicly validate your private data without revealing it.
00:07:14.156 - 00:07:58.232, Speaker A: That at no point that your data will become doxed in this process. But however, if you think it like if you're taking a data from public blockchain, it is already public, you can go and get that information from that Ethereum blockchain information. You don't really have a privacy. However, the ZK gadget will not reveal that data immediately to a designated provider, so it's still private within that sense. So if you're using the K two as a reporter for your private data repository, it always been private. So your data will never get doxed in between or someone can actually spoof it. So this is one of the most important part is like it remain private within the mechanism and it's also tambor proof.
00:07:58.232 - 00:08:41.812, Speaker A: So K two is by default comply with the privacy aware property. So you can actually use this scheme to reinforce your web two or service schemes or protocols or any kind of things that you want. And that's the beauty of it. This is the first time a coordination is coming together. A public and private composability. The data composability can build any kind of logic. For example, if you're building any kind of lending protocol, you want to know some credit score for somewhere, but you don't want to know, you know, the person who don't want to disclose all the information to the other party, the reporter.
00:08:41.812 - 00:09:09.848, Speaker A: You can just use the service to hire a reporter to do that. It will never reveal the information, but it will just verify the needed information from the. The private data source. So it's kind of a disclosure is also possible. So K two is a platform. You can build additional logic, anything that you want to as a periphery. It's a very simple protocol, a restaking layer, making it available.
00:09:09.848 - 00:09:37.928, Speaker A: The decentralized innovation is finally can go 200 miles speed, or put it simpler, commercial department says that Mac three. So it's not 200 miles. Much faster than that. But it's important that it can go along with private data repositories useful for public blockchain actions. And that's something that makes me always excited. All right, so let's get to it.
00:09:38.096 - 00:10:17.004, Speaker B: I don't know if you, or, like, Derek can maybe. So you talked about Reese utilizing restaked ETH. Like, how are we defining restate ETH? Can I directly use mys ETH or retail? Or how is it working? And how do we understand the different risks associated with all the different assets in the context of economic security? Does an areth and an SD have the same economic security here in the K two platform? I don't know if you guys can help with that.
00:10:18.024 - 00:10:49.066, Speaker A: Right. So the question, if I understood correctly, it's. It's more related to what are you going to. What are you going to do if your asset, that's the. The K two accepted assets, are ETH or not? Right. If you have an esteeth, if you are ETH, if you have other kind of ethnic, how do you ensure that, you know, the underlying asset is being paid out to the recorders or to the people who are saying that they want to get the service?
00:10:49.210 - 00:10:54.898, Speaker B: Yeah. So do I have to pick as a reporter, if I'm selecting, do I pick what Steth I receive or.
00:10:55.066 - 00:11:27.240, Speaker A: No, you actually, what do you do is like, there's a unified mechanism. So currently, K two only accept staked ETH, right. That's the base asset, and it can be represented in many forms, like ste or ret or de. But end of the day, the user will get e. That's more important. So there's a, in between, a unified, you know, protocol called Keith. What it will do is like, it will take all this kind of LST's, make sure it will hold liable for the redeemability part.
00:11:27.240 - 00:12:01.242, Speaker A: And redemption is on ETH. So anyone who is basically getting cathedral can redeem ETH for Keith, right. So regardless of any kind of representation token. So if you, if you're not aware about liquid staking in ethereum, all the staked ETH are not represented coming back as ETH. It's been in the deFi, there is a representation tokens for the liquid staking tokens called Ste 20 billion out there, re 44 rocket pool. And there's like, you know, a few number of other kind of lsts. And then there's LSD networks like stakeouts.
00:12:01.242 - 00:12:45.146, Speaker A: De is there, which is properly redeemable for one is to one ETH. So what happens, you cannot have multiple risk profile for, you know, the payouts. You want to receive Eid for that, right? So you always want to receive that e. That's the, the most advantageous asset that you want to have it. Doing some work, you are hiring reporters to do something, and middleware hiring reporters to tell the world that they are doing great and their systems are working great. The k two pools are telling their poorer. You tell us if there's something happening with our capital at stake, we're getting yield, but we pay them, but only for things that has happened.
00:12:45.146 - 00:13:11.836, Speaker A: So essentially, the unit of economics here is Eid in k two to begin with. There's nothing stopping to have other kind of collateral. But we love Eid because it's ultrasound money. So can eat, enable to add any kind of LSD's out there into the mix. That makes sense. But end of the day, you get Eid. That's the beauty of it.
00:13:12.020 - 00:13:42.976, Speaker C: So, just to, just to kind of clarify and make sure there's some sort of understanding here. You know, the pay, the, the lending and the borrowing and the payouts, it sounds like, are all done in ETH. You know, people can inject their third party tokens within here, but it doesn't mean that people will necessarily receive rewards in these third party tokens. If they're lending ETH, they receive ETH for when people borrow it.
00:13:43.120 - 00:14:17.314, Speaker A: Yeah, they always receive ETH. It's always Ethan, but it's. Anyone can participate in the system. So if you're a lessee token holder, you are incentivized to get more yield. And if you don't want more yield than e, it's okay. But if you want more yield from on top of your staking yield that you're receiving from Ethereum, you can come here and then you can, you can help others to, to source that ETH security and, and it can help them to grow and you get a piece of that.
00:14:17.734 - 00:14:23.114, Speaker B: How are you helping others? Like what are you doing and who is doing what? Sorry, are you talking about proposes here or.
00:14:23.934 - 00:15:07.952, Speaker A: No, no. So any LST token holder can deposit their, deposit their tokens, right. And you go to the DAP and if you have SDE, then it will show select STE, then you deposit. You have your, just like any kind of way you're providing, you know, lending position in Aave or compound, you just deposit and you have this kind of, you know, x amount of tokens have been received and you get your staking yield plus whatever the yield that has been given by the k two. So let's say you have 3.5% for the staking eve, but then you get another nice 5% as the, the k two is giving for all the, the pool depositors. It can be 15%, it can be 20%.
00:15:07.952 - 00:15:18.324, Speaker A: Depends on how many, how many middlewares are sourcing this. So middlewares are paying this usage fee, which is the yield that is going to the k two depositors. Make sense?
00:15:20.904 - 00:15:22.640, Speaker B: Yeah, right. Okay.
00:15:22.792 - 00:15:27.884, Speaker A: You can take it as a first lending pool for ethereum security for all the blockchains.
00:15:29.224 - 00:16:02.214, Speaker C: So there is, you're using the term slashing a lot, and I understand that whole idea. If you're working particularly with ensuring credibility of data or something with there's an oracle and you want to permissionlessly onboard them and say you're able to make sure they have the correct liveness and sending the correct information and it can make that process permissionless. But would you say that the term slashing is kind of blanket to everything that can be done here?
00:16:03.694 - 00:16:47.514, Speaker A: Not necessarily. So the slashing slashing, quote unquote slashing is a very, very non word for everyone. Just like what the slashing, what is a slashing? Slashing means someone is telling you something relevant to a network and they get paid for that. So it's a truth teller, but you need to verify what they're saying is actually relevant and it's qualified somebody has done something deviated from the logic. Right. So here the slashing is one utility. You can actually use this security and say that the reporters will tell you, oh, I want only know if there is any kind of stat, you know, deviation from a standard procedure and want to have a whole liable for that one.
00:16:47.514 - 00:17:22.108, Speaker A: That's a slashing. So you can say that payout could be marked as a slashing. But if you say that, oh, something happens. If you, if I want to give a payout for, how do I, how do I say if anything happened, x and Y payout has to be done. And that's just a simple payout. And it could be order of magnitude higher. Like, you know, if there is a crush in message just didn't went through and then it has to be like 10,010 thousand has been paid.
00:17:22.108 - 00:17:37.464, Speaker A: But you need to, you need to tell the logic currently it's a very simple logic. What the K two has, what kind of SVP that it can borrow. There are two kind of events, which is a, one is a soft.
00:17:41.204 - 00:17:42.144, Speaker B: SVP.
00:17:42.804 - 00:18:02.822, Speaker A: It'S a slashable borrower position or securing borrow position. You can call that one s stand for slashing or security. Right. So not the security in terms of security security, but a secure, you know, just to be very clear, that's not security in any way, we're not doing that. So the secure borrower position, yeah, you.
00:18:02.838 - 00:18:05.034, Speaker B: Take tokens like a borrowing protocol, like.
00:18:05.974 - 00:18:34.994, Speaker A: Oh, that's a good question. So you don't give any kind of collateral. So the secure borrower position, they can take it. That kind of. You getting this kind of, you know, the ETH for your business logic, for collateral free, you only pay a small fee. That's called a secure borrowing position or borrowing position. And then it will offer that kind of, there is a threshold for what kind of, what kind of payouts it's dispensed per time, per event.
00:18:34.994 - 00:19:07.992, Speaker A: Right. Currently there are rules around like per event is half a e or five ETH and you can tell which is the gravity of the things that you want to. And based on your events, the usage fee is calculated and based on how much security is available for you to lease from the pool. So this automatically happens. The smart contract, you don't really have to worry. You say, hey, I will have like, you know, five different categories and three of them I want. Every time it happens, you need to pay 0.2
00:19:07.992 - 00:19:45.214, Speaker A: ETH, another one, three if it, it only happens very, very rarely, but every time it happens, we shall pay three ETH per event. Right. And it can happen anytime in any number of times. Fine. And it automatically calculate the usage fee for that and how much you want in a secured, I'll one have a million dollar worth of feeds. Right. So it just gives you looking at the pool looking at your business logic per event, it gives you a usage fee and that's the only thing that you pay and you get one year full protection and you can terminate anytime.
00:19:45.214 - 00:20:28.002, Speaker A: That's where your input. So it has all the kind of defi capabilities 24/7 you can terminate it, you can cancel it. If the pool goes down, it will automatically readjust the positions. Now in the future we can have separate logics built around this kind of pooling rather than just only two slab items. You can actually have like a preferred pool giving a preferred security like in a per event, you can actually have 100 ETH per event and which may require some sort of additional checkpoints, I don't know, but that could happen. But that's something that can do in down the line. But at the moment it's very like, you know, off the shelf.
00:20:28.002 - 00:21:14.624, Speaker A: We want to onboard as many people to run infrastructure. We want to have like more info and smart contracts to ensure their protocols are working. Extend the confidence, extend the trust to the end user, extend the trust to the integrators, extend the trust to your customers, extend the security to your application built on your infrastructure layer and accelerate your development faster with fraction of capital you need. So you don't really have to go out and raise millions of dollars, rather just get the security, launch your decentralized network, figure it out next time maybe you will have your own token. You want to have much more better security and you can figure that out. So we are really helping everyone to do all kind of innovations.
00:21:19.284 - 00:21:43.698, Speaker C: It sounds like there's really kind of no limit to how this can be used. It's really up to however people want to do it. And there's, there's some like kind of clear cut use cases in current deFi, but it'll likely unlock a bunch of new use cases within three to six months when people actually see what's possible and start to build around these contracts.
00:21:43.866 - 00:21:58.014, Speaker A: Yeah, and you can use it in conjunction with the private or public source because it's the whole process private. The data integrity is maintained because it's okay. So you can actually plug in. It will never leak any kind of information between this point.
00:22:04.884 - 00:22:49.154, Speaker B: Going into the technical details. Maybe just to explore some, some more aspects of the, of the platform is very much, you know, parameterized to the application's needs here. So that makes it quite, that makes it quite flexible really. Right. Maybe what we can do is talk about how we can facilitate the reporting and slashing that you were talking about and link into the contracts themselves. We can have do that. So what I'll do is I'll give, let me host.
00:22:49.154 - 00:23:55.818, Speaker B: Can I please have screen sharing? But whilst I'm getting screen sharing permissions, the, what we give is a middleware package. Is it good now? Yeah, yeah, yeah. So the reporting element here is, is a package that can be dockerized, it can be hosted in any way you want. We call it a middleware. So what Phil going to do is, when we talk about the contracts, is we'll get into the core of this case, k two case code lending platform. And what I'm going to focus on here is the reporting. So these reporters are working for your network, um, and are keeping, um, keeping uh, the entities that are supposed to be running the software accountable.
00:23:55.818 - 00:25:46.906, Speaker B: Um, because at the end of the day you have this stream of, you can see on the right, you've got the stream of um, uh, staked ETH being sent to lenders of the platform, uh, in exchange for doing something. So this is just a continuous stream between a defined period. And if at any point there are problems with your application as a service provider, if there are issues with your network, a reporter can look for those issues, scan for them, report them and get, and present it to the contract in order to get a payout. Service providers as well can run their own reporters in order to limit the, you know, in order to limit the, any issues that you might cause in the, in the protocol. But if there is a, there are certain rules around that, defined in the contract around, you know, there is, there is a line between software being faulty, leading to, leading to a slashing and obviously genuine events around what we call liveness and corruption. So if we go into a bit more detail about that reporting element here, you might get a bit of a picture and you might get some insight into what Matt was talking about regarding how we can leverage public private data in that sense. So what we have here is, so this is the structure on how it's working.
00:25:46.906 - 00:26:35.864, Speaker B: The SLA middleware. The middleware software is given to you as a package that you can just run out of the box that allows you to be compatible with the k two contracts. And it is a standardized interface for the reporters. So this is sort of the beacon that you provide for your network and your software as a service provider. So when you create the SLA agreement between the economic security and yourself, you're going to run the middleware and the reporters will have access to that in order to report slash into the contract. Obviously, if you don't run the middleware, you run the risk of basically.
00:26:38.124 - 00:26:38.484, Speaker A: The.
00:26:38.524 - 00:26:59.424, Speaker B: Interest payment that you pay for upfront, borrowing the economic security, you run the risk. If you don't run a middleware reporter just giving the money away for free for people that potentially aren't even running your software. So it's in your interest to actually run this. So the way it is structured here. So I'll get into what is an RPBS reporter.
00:27:00.044 - 00:27:46.104, Speaker A: So you touched a good point. So if you're borrowing money, make sure that how you want to reuse that security, right? What do you want the reporters to watch out for? You want to watch out for something goes down in your system or you want to make sure that your operational compliance is, you know, like you go to the, you know, if you open status dot apple.com or satisfy blockchain.com, like you have this kind of status machine and it shows like everything is running correctly. And if you want to ensure your customers that everything is okay, that's the confidence. Or if you want to add additional logic, just, just make sure you have, you're getting this economic trust in security. Just tell the reporters what they want to watch out for.
00:27:46.104 - 00:27:53.956, Speaker A: And k two is giving you all the security, right. If you don't use it, then it just, you know, it's like giving money away for free.
00:27:54.060 - 00:27:54.908, Speaker B: Yeah, yeah.
00:27:55.076 - 00:28:10.204, Speaker A: It's a subscription, you know, um, like you made it and everyone just make like in a new year I'm going to get a gym. And then you just take this opportunity. You never hit the gym and you don't get anything. So if you hit the gym and you know, you look good.
00:28:10.704 - 00:28:37.496, Speaker B: Yeah, yeah. But you might still be paying for the membership each month. Right. But not actually benefiting from it, you know. Yeah, I get the point. Yeah, but, yeah, so the middleware tooling. So what you're providing as a service provider so what you're providing as a service provider is there's various APIs that you need to inject into the middleware.
00:28:37.496 - 00:28:53.844, Speaker B: So the middleware, like I said, it's got a standard structure and access that interface. You need to plug in the APIs that the middleware will use in order to verify the authenticity of a report coming from a reporter.
00:28:54.304 - 00:29:09.072, Speaker A: Or they can, or they can put someone else. Yeah. Like if you want to have like some ZK validator to do that, do it. But designated verifier. So you can act yourself or you can just use another part.
00:29:09.248 - 00:29:33.244, Speaker B: Yeah, actually that's a good way of putting it. Yeah. The SLA middle way is a designated verifier. And when you open your SBP, you nominate, you nominated the designated verifier. So you either run it yourself or you get like a known or trusted node runner, or, you know, however you want to do it. When you open the position, you are nominating that designated verifier or if your.
00:29:33.284 - 00:30:09.574, Speaker A: Smart contract is deviating from its logic. Right. So if you have an added proxy and things like that, say some liquidation logic is just completely gone, we believe you don't want to have that. That alert can be, you know, you can just say if you have an oracle from somewhere, somewhere like, oh, if there is any deviation from this, or am I going like more than 3% of the threshold and it's get liquidated, boom, it will, it will get reported. So you can designate a verifier, could be anyone, it could be yourself, it could be, you know, you could basically, for, for that particular purpose, for that particular event reporting, you can say that this is the designated verifier.
00:30:10.274 - 00:30:46.524, Speaker B: It's a good point, actually. It is a good point because you're, so we define, broadly speaking, we define two main types of events. In the middle way, we define issues with liveness, so liveness events, and we define corruption events. So liveness is to do with obviously users who are supposed to be running the software. They are not actually, the software is offline. And there are many metrics that you can use to define liveness. But the source of liveness is, it's down to your application.
00:30:46.524 - 00:30:49.908, Speaker B: It can be an on chain source, it can be an option. It could be a mix of the two.
00:30:49.956 - 00:30:50.284, Speaker A: Right?
00:30:50.364 - 00:30:53.260, Speaker B: You plug it into the middle. Same with corruption.
00:30:53.452 - 00:31:57.792, Speaker A: Yeah. So remember that there was an instance that a lot of, there's many instance, not one instance, many instance. A lot of people actually use some of the Dex as a protocol and then, you know, the volumetric average just goes up and down or tap or something like that. You know, there are like few times the DeFi protocols actually got in a compromise because someone manipulated the oracle because they using this kind of uniswap pool or other pool for Oracle and then integrated. Even the compound has an instance when the die, just like, you know, slipped through thing and then they use the, the coin base that was off. But then it just estimates some of the liquidation happens. You can have, if you're using a spectrum of oracles, if one thing actually off and immediately report and just pause the contract so you can take the, based on the event, if it has been getting reported, you can just simply write a logic and it just pause your things immediately and then the governance can take care of it later.
00:31:57.792 - 00:32:42.756, Speaker A: And this comes very handy when the derivatives trading, the DeFi protocols, lending and borrowing, if something happens at somewhere you can prevent this kind of chain reaction is getting injected, get contaminated, you can just literally stop the condition to your protocol. So now you have someone who's incentivized to watch out for the things. Only you got to see that these are the things, these are the designated verifier. If it is off, let us know. So it's kind of, it's useful in many ways because now you have someone who's paying for that and that's the incentive ice coordination. Reporting, you know, slashing and verifying so.
00:32:42.780 - 00:33:17.694, Speaker B: You can have reports is working all across the world like in different time zones, right? Keeping an eye on your protocol, obviously, because it's, if you're, if you're an on chain protocol, your, you know, protocol is deployed on a public blockchain like Ethereum which is working 24 hours a day. Right? Maybe you have a small team behind your protocol. You don't have the ability to look after your protocol 24 hours a day because physically humanly possible. But across different time zones, you can hire reporters for your platform to do that kind of work and to limit the contagion. You're paying not to lose too much. So you're limiting the contagion as you said.
00:33:18.274 - 00:33:40.568, Speaker A: Yeah, always. Or maybe even in staking. If you detect some sort of slashing you have already bought immediately report and any other validator associated with that node need to be stopped immediately. Right. There are a lot of things you can do. It's more programmable. Now the data reporting is programmable.
00:33:40.568 - 00:33:53.004, Speaker A: You can actually do any kind of off chain data. You can program it and that makes it super useful. And a large pool of deposits, e deposits is readily available for you to lease it at a fraction of cost.
00:33:55.484 - 00:34:58.813, Speaker B: Right, right. I think that's a really good way of putting it. So as a service provider, once you've injected the liveness source, corruption source, and this final one is unique report identification. So multiple reporters may detect the same event and you need a unique way of ensuring that that same event is not reported twice. So you might say that you can only report like liveness issue, you might be able to report like liveness once every x period. So if there are for example, two validators offline or two software runners offline, you might be able to report that every, you know, every ten minutes or every, otherwise you would just report, report, report and it would just get a bit crazy. So you need some way of uniquely identifying the event that has taken place.
00:34:58.813 - 00:35:53.454, Speaker B: And again, you can inject that, that source can be an on chain source, so it can be an on chain nonce, or you can generate that independently off chain, but you plug that in. So basically the report will, the reporter will come to the middleware and say, hey, I detected either a liveness event and a corruption event. Here is the unique, you know, here is the, here is the event details. And it can basically say, yeah, that is definitely an issue, but they're all going to be categorized in the same way under the same unique report identifier. What that means is it just means that the same event cannot be reported more than once to the smart contracts. That takes care of the middleware, that in blue that's given to you out of the box and you just plug in all of these other subjective rules. So the middleware only deals with objective information.
00:35:53.454 - 00:37:25.914, Speaker B: It will basically it takes information given by a reporter and goes to your liveness or your corruption API. And it says, is this true? Can you see this as well? And if it says, yeah, you know, then you go ahead and you authorize slashing and the reporter will be able to walk away and submit that to the contract and get a payout for that, right? That's, you know, so that's what they're working for. So on the reporting side of things, what we were talking about earlier is about how you can avoid the last man flip problem. So this is to say that if I'm a reporter and I come and present to a middleware, a liveness or a corruption event that's been detected in the network, I know that if I reveal this data either partially or fully or depending on the application and the use case, that once I hand over the information that it's not going to be tampered with. The only thing that they can do is verify, sign and allow you to go ahead do the smart contracts. That is through the use of rpbs, CK, self attestation. So reporter looks out and scans for issues in the network and does a self attestation on the data, muting it and producing a signature that has unfortability properties.
00:37:25.914 - 00:38:05.734, Speaker B: And that information can be presented to the biddleware. Now we have like, the data can be revealed partially, so you can give some of the information for verification, and some of the information can be blinded and private. And it's much more than just a simple hash of the data. So it's an entire protocol here with ZK like properties. So we, so as you can see here, you're looking out for live disinterruption events. You're storing them and presenting them to the middleware. You will get a signed report back, report that to the smart contract, which will slash the SBP position.
00:38:05.734 - 00:38:54.770, Speaker B: And the reporter will get a unit of ETH that they can unwrap for underlying ETH. So that gives a high level overview of what is taking place. I can show you. So I have a middleware that I'm running, I have an identify API and a liveness API, because I'm going to show a liveness event. And then for example, we have, here's an example of, so this is the ZK proof, using rpvs of a liveness event that was detected. This is just for illustrative purposes, pre alpha. So the software is being wrapped up.
00:38:54.770 - 00:39:48.698, Speaker B: So some things might change from this walkthrough. But the idea here is that you're at a high level, you're specifying the event type and you specify event data. So basically in this case we've detected, you can see here, the public information that has been revealed for verification is the number of validators that are online, number of validators that are offline, and how many are there in total. And we can have against the liveness API, we can verify this information. So if we run this, in this case, the reporter is saying, I've detected this. And this means based on how you've configured your borrower position. So when you open the position, as we said before, you're specifying a number of parameters that Phil will go through when he goes through the contracts, but you're specifying what the designated verifier is that can authorize slashing.
00:39:48.698 - 00:40:18.950, Speaker B: And you specify how much ETH can you slash per liveness event, how much east new per corruption. Eventually there is a min and max range for those things. And how much ke that you pay in interest to the lenders for utilizing the economic security is based on the risky profile of your SBP. So the higher the, in a sense.
00:40:19.062 - 00:40:47.514, Speaker A: This is an infrastructure layer for sourcing security and then reporting that, that economic security and reporting what are the things happens outside of the chain, right? So the reporter is, can take information and then they, using the ZK, what is a ZK? You're showing a lot of z, one hat and a two head. Do they really need to know the circuit and everything or it's just like very easy to do it because.
00:40:50.614 - 00:41:22.494, Speaker B: There'S a package that comes with the appropriate abstraction layers so that you don't have to worry about, you just supply, you basically say what information you want to be public, what information you want to be blinded and you want to perform a self hesitation so that mutes the data. So this, all of these are points, these z one hat, c one hat, they're just the points on a curve. So that is using the protocol itself. But what that is doing is that it is ensuring that the integrity of the data being verified is not tampered when it is presented for verification.
00:41:23.554 - 00:42:02.994, Speaker A: This is kind of a reporting co processor. This is, this gadget is a reporting coprocessor every single time, something like that. Yeah, yeah. Because normally when you talk about ZK, just like comes people think about oh, do I need to do like XYZ? I don't know anything about zero scheme, but here things has been done in such a way that anyone can integrate freely and easily without knowing much about, you know, underlying ZK tech because it, exactly, it has been done in a gadget way. So it's, you know, it's given in a very standard package. So just inject, inject into your logic just like you do into API endpoint.
00:42:03.334 - 00:43:02.204, Speaker B: Yeah, precisely. And you know, there is, so we have, you know, you can, the verification can be done in JavaScript go language solidity. We have all kinds of verification modules that have been audited and tested already, but it's packaged like you said, in such a way a gadget fashion, so that people can just take it off the shelf and just focus on, they're focusing on their data that they're testing and that they need verifying. And then like we see in this, so something has been reported, it was verified and so we have, so we get a signed report, we can take this now to a smart contract. So we have who's going to be slashed the block when this was detected. This is the signature, this self attestation signature that was generated. How much is going to be slashed and by when the deadline is that it needs to be submitted to the contracts.
00:43:02.204 - 00:44:11.544, Speaker B: And we have here, this is even a lower level of abstraction and the user will see, the user will just have, they will have access to an SDK. So you will just be able to go to, you will just be able to go to po n SDK, you will select this and then you will spin up an installation of the SDK and you will simply access the reporter registry. You will have the, the violation verified and you can report this to the smart contract. So basically it's put in a format that is actually easy to get verified as fast as possible and submitted into the smart contract in an easy to use fashion. Well, it'll be like the pon SDK here. So it's not exactly the same SDK, but it will be like this. You get the violations verified and you can report it.
00:44:12.084 - 00:44:12.864, Speaker D: Yeah.
00:44:13.644 - 00:44:23.544, Speaker B: And that will interact with the middlewares. Like this we can have. Yeah, I think, I think it might be nice for phil to go through the contracts at this point.
00:44:28.724 - 00:44:48.794, Speaker D: Okay, let me share my screen. Can you see my screen? The diagram?
00:44:49.374 - 00:44:51.630, Speaker B: Yeah. Yeah.
00:44:51.662 - 00:45:45.322, Speaker D: So this, this is the case, you know, landing smart contract architecture. So as, as mentioned earlier, um, yeah, we have this core Kscale lending smart contract and also we have some, some, you know, contracts like the report registry and k scale lending deposit contracts. But the main contract is this k scale lending contract. So what is this cascade lending contract? It is the contract that accept, you know, keise liquidity from the LSD owners which is called as lenders and allow the borrowers to borrow, created any, you know, selectable economic security position by paying upfront. So we have a rule here. So you, the borrowers need to pay upfront to create a debt position. And also a borrower can have only one position at any point.
00:45:45.322 - 00:46:45.664, Speaker D: So that's why we have create that position and a, another function like increase that position when they want to increase their position in, you know, while they have already created a depth position like that. And also we have the reporter logic here so reporters can join the reporter registry and submit their report. And we, you know, verify the reporter signature using the designated, you know, verifier as mentioned earlier. And also, yeah, we accept the slash amount report in the case, get a lending contract and we have kind of two, two kind of slash type for one is for Leibniz and one is for corruption. So we, we have that slash logic and based on this lesson ones, we have some liquidation logic as well. Yeah, this is, yeah. And also regarding this case, get a lending deposit contract.
00:46:45.664 - 00:47:51.294, Speaker D: So actually this k schedule lending contract is designed to accept only case. So we introduced a separate cascade lending depositor contract that allow any LST owners can join, you know, let's say a user has ST's and he deposits, you know, she wants to lend his LST token to this scale lending. So the Kscale lending smart contract in this case he can deposit sts into this depositor contract and this depositor contract will deposit his LST to case in mint case and you know, deposit that case back to KSC lending contract and create a liquid deposition for the yielders. Yeah, that's why we need a separate deposit contract. Yeah. So I think that's it in the, our view of the case, get case scaled smart contract architecture level. So we already have those smart contracts implemented.
00:47:51.294 - 00:48:33.894, Speaker D: So this is the case get a lending smart contract which is the main core smart contract for k two. So um, what I want to talk about is the um, the borrower duration. So the borrower can create any, you know, security position, but we only support a fixed borrow position for now. But we can, you know, design that later to support any kind of borrow durations like you know, but it is only designed to, you know, support fixed duration.
00:48:34.554 - 00:48:36.386, Speaker B: You can, but you can terminate early.
00:48:36.450 - 00:48:36.914, Speaker A: Right.
00:48:37.034 - 00:48:40.346, Speaker B: That's, that's the, yeah, yeah we have.
00:48:40.370 - 00:49:20.652, Speaker D: That logic as well. So let me explain the functions one by one. So we have deposit function. So it is to allow, you know, LST owners to deposit his case into this, you know, smart contract and create his liquidity position. We call this liquidity as assumed liquidity in the smart contract level. So when they deposit, you know, we transfer the key is from the user's wallet and we increase the original liquidity. And mint, you know, this k two share token to the user.
00:49:20.652 - 00:50:00.784, Speaker D: So I forgot to say that this is cable lending. Smart contract is ESD 20 token itself. It means that, you know, user can transfer this k to share token to anyone. That means he can transfer the liquidity to any address if they want. It is transferable, you know, token. And yeah, we have withdrawal function which is the opposite of liquidity deposit. So the lender can withdraw his case from the smart contract if they want.
00:50:00.784 - 00:50:59.524, Speaker D: And we have claim function. So as you can see in this diagram, the arrest owners lend keys and you know, they can own some interest from the borrowers. So the borrowers paid upfront and that upfront is distributed to the lenders based on their shares. Yeah, so that's we, so we have the claim function to allow lenders to claim case, that's the function. And also we have this slash function, this is called from the reporter registry. And as mentioned earlier we have the slash type and slash type is one of livelihoods encryptions and yeah, and the selection one can't exist. The bugs flashable amounts set for liveness encryption.
00:50:59.524 - 00:51:08.124, Speaker D: So let me explain about this bug slashable amount later when I explain this interest rate model.
00:51:11.704 - 00:51:12.120, Speaker A: Sorry.
00:51:12.152 - 00:51:52.504, Speaker D: In the borrow function, and also when the slash happens we check the user's debt position. So when you check the outstanding interest and if the outstanding interest is not enough, then we liquidate the debt position. Yeah. And the outstanding interest is distributed lenders if the liquidation happens. Yeah. Here we have the terminate function. This is to allow user to terminate his debt position if the current liquidity is not enough.
00:51:52.504 - 00:52:04.204, Speaker D: In that case he will pay some penalty, but he will, you know, half of the penalties go to lenders and half of the penalty goes dowdlers.
00:52:12.304 - 00:52:13.044, Speaker B: And.
00:52:15.744 - 00:52:27.734, Speaker D: And also, yeah, we have a separate located function that checks the current out of ten. Interesting. If the output and interest is not enough in, you know, liquidate the debtors position.
00:52:28.394 - 00:52:29.202, Speaker A: Yeah.
00:52:29.378 - 00:53:12.840, Speaker D: Anyone can call this liquidate function. And also we have pop up slash amount function, which is for the borrowers. So when the slash happens, we record the slash amount for the depth position and you know, it, borrow can top up his selection month by paying extra kes to this smart contract. Yeah. And yeah, and also we have the main function, this borrow function. It is allowed borrowers to create a depth position. And this is only called when the user doesn't have any depth position.
00:53:12.840 - 00:53:57.478, Speaker D: Yeah. And yeah, we also have to increase that function which is called when a user has already existing, you know, tapped position. So he can, you know, increase the borrow amount, he can increase the bucket selection amount, or he can reset the duration, some of them. There is couple of options for users to choose. And yeah, and yeah, in the borrow function. Okay, so let me explain, explain about the interest rate model. So as I mentioned earlier, when a user create a debt position, he needs to pay affluent interest.
00:53:57.478 - 00:54:47.622, Speaker D: So how this affluent interest calculated? So it's calculated from the interest rate model, which is set for this KSC lending smart contract. So this interest rate model calculates the interest based on the current liquidity. And this means the how much the RsT owners deposited. And, and also when you check the borrowed liquidity, which means how much liquidity the borrowers borrowed from the k two. And also there is some original problems like max legable amount for Leibniz and max legable amount for corruptions. So theories range. So this max flushable amount for lebanese is in range of zero to one.
00:54:47.758 - 00:54:48.166, Speaker B: Yeah.
00:54:48.230 - 00:55:05.224, Speaker D: And for corruptions, it's in range of zero to five is. And yeah. Calculate the interest rate based on the ozone liquidity and borrowed liquidity. And as you can see.
00:55:06.924 - 00:55:07.308, Speaker A: As you.
00:55:07.316 - 00:55:20.984, Speaker D: Can see, if the borrowed liquid increased, then the interest rate is increased. And if it's, you know, past the breakpoint, then it will increase, it will be increased rapidly.
00:55:21.444 - 00:55:22.224, Speaker A: Yeah.
00:55:23.044 - 00:55:32.300, Speaker D: And we, and user needs to pay some additional, you know, interest for more maxillas mounting.
00:55:32.492 - 00:55:32.836, Speaker A: Yeah.
00:55:32.860 - 00:55:40.024, Speaker B: For liveness incorruption, that's, that is a reflection on the risk of the borrower position, right?
00:55:42.084 - 00:55:53.844, Speaker D: Yeah, yeah. If a user wants to create a position with, you know, ball maxillary per month, you know, range, then he needs, you know, pay more interest.
00:56:00.104 - 00:56:01.364, Speaker B: Got it, thanks.
00:56:04.504 - 00:56:04.888, Speaker A: Yeah.
00:56:04.936 - 00:56:12.764, Speaker D: Test the interest affront interest model on borrow and increase that function.
00:56:13.624 - 00:56:14.364, Speaker B: And.
00:56:17.724 - 00:57:19.254, Speaker D: Yeah, and, and also we have some couple query functions and that, and I think I explained about this max borrowable amount. So this is the function that returns the expected max borrow amount using the provided interest rate. Interest amount. So let's say a user has ten case and he wants to borrow a, you know, create a debt position and in that case he can calculate how much, sorry, how much he can borrow from this case, get a learning contract. So yeah this is, this function is used for, to calculate to show how much a user can borrow using his, you know, case balance, something like that. And that's it on the case schedule. And also we have KsC, the lending depositor contract as mentioned.
00:57:19.254 - 00:57:46.714, Speaker D: It's really easy. So we have deposit function and it accepts any tokens supported on k is. So if the provided token is not k eas, we need to deposit this underlying token to case vault and this will mean the case and we transfer the case back to, sorry, the deposit this k is to k scale landing.
00:57:47.934 - 00:57:48.914, Speaker A: That's right.
00:57:49.974 - 00:59:09.484, Speaker D: And, and also we have reporter registry. So, so we have the slash tab defined here and we have some report structure and yeah there is a register report function. So this is the function to register a reporter to this reporter registry. And yeah we have submit report function, we have the patch submit reports as well to support you know by multiple, you know, submit to, so to able to submit multiple repository in one transaction and in the submit transaction function. So yeah we need to check if the report is valid from, with the report signature. So um, and if the report is valid we call this flash function of KSc lending contract. So we already explained about, you know, flash function there and about this valid report check.
00:59:09.484 - 01:00:15.034, Speaker D: So we check if the report is signed by the designated verifier which is set by the captor. So if we check the borrow function, yeah, if you check borrow function, the first problem is designate verifier. So this means that a use the borrower will set the designated verifier when they create depth position. So we use this design identify to verify the report signature. Yeah and that's how the bad report check works. Yeah I think that's it on the report registry. So yeah I think like explains the main workflow of the smart contract.
01:00:15.034 - 01:00:38.474, Speaker D: Do they have any questions?
01:00:39.074 - 01:00:56.454, Speaker A: Yeah, anyone has a question? So this is currently, like, the ETH pool is staked. ETH is the only accepted token. Right, for the k two.
01:00:57.754 - 01:00:58.534, Speaker D: Yeah.
01:00:59.114 - 01:01:18.900, Speaker A: And the representation tokens will just go through the keith, and it will just make sure they. The one thing in the keith is allowing them to redeem ETH. Right. That's why you're basically having Keith here. When you receive keith, you can redeem it for ETH. Right. That's the whole point of accepting any kind of representation tokens.
01:01:18.900 - 01:01:47.152, Speaker A: But the Keith will dispense ETH one is to one whatever the k e that it has. That's the unified risk profile. Okay. Because it's not a different token. It just abstraction of multiple risk and multiple rates into one target rate. So it will help people who are reporting, who are providing ETH here, who are borrowing. Everyone have, like, a unified rate.
01:01:47.152 - 01:01:47.884, Speaker A: Right?
01:01:49.984 - 01:01:52.724, Speaker D: Yeah, yeah.
01:01:53.104 - 01:02:19.358, Speaker C: So when people, you know, they're coming to this k two protocol, and then the tokens, if they're coming with their reth or their spe, because that's what they have, that's what's prevalent, and they want to convert it to this Keith. Is any protocol taking a fee here, or is it really just, you know, what, the conversion rate from re to ste to bring it into.
01:02:19.406 - 01:02:25.294, Speaker A: Kelsey, what do you mean by vertical fee?
01:02:25.714 - 01:02:29.694, Speaker C: Like, is that. Is that something that the k two will do for free for you?
01:02:30.074 - 01:02:46.894, Speaker A: Yeah, I mean, there's no. There's no. There's no commission for K. It's a smart contract. Maybe at some point that, you know, Ethereum will start, like, every smart contract operation has to be paid commission. Then we think about it.
01:02:48.514 - 01:02:49.414, Speaker C: Got it.
01:02:52.314 - 01:03:11.242, Speaker A: Yeah, but. But, you know, maybe the DaP can actually show that. We haven't shown the DaP. Right. So if you come to the DaP, how do you deposit? Is that a question? Like, if you have an se that re. You really have to get this key. It all happens automatically if you go to the DaP.
01:03:11.242 - 01:03:19.074, Speaker A: Phil, do you have the Dap? Or, Winston, do you have Figma fill?
01:03:19.894 - 01:03:21.234, Speaker D: Oh, you mean the Figma?
01:03:22.334 - 01:03:34.462, Speaker A: Well, the DaP might not be having the full features. Yeah, yeah, we do have a Dap. Yeah.
01:03:34.478 - 01:03:36.114, Speaker B: Yeah, we definitely do.
01:03:40.274 - 01:03:41.014, Speaker A: It.
01:04:06.534 - 01:04:07.754, Speaker D: Yeah, this is.
01:04:09.574 - 01:04:10.550, Speaker A: Loading.
01:04:10.742 - 01:04:16.670, Speaker D: Yeah, this is the Figma design for k two prototype.
01:04:16.702 - 01:04:20.726, Speaker A: Right. But, yeah, yeah, yeah.
01:04:20.750 - 01:04:54.256, Speaker D: This is a dashboard which will show the user's position. You know, user position has two kind of positions, like the liquidity position on the lender side and borrow position. On the borrower side. And there is another, you know, on react tab. So this will show the users, sorry, the lenders claimable amount here. And he can, you know, collect the claim and he can, you know, like that. Yeah.
01:04:54.256 - 01:05:03.290, Speaker D: And this is the deposit, you know, a lens page. So where the lenders can lend the case, which means.
01:05:03.402 - 01:05:05.534, Speaker A: No, no, it is.
01:05:09.274 - 01:05:21.546, Speaker D: Yeah, this is land page. Yeah. They can deposit keys, but user can select any, you know, lse tokens. And this will, you know, directly, you know, deposit into keys and min keys. Yeah.
01:05:21.610 - 01:05:38.234, Speaker A: And create, if I have Ste, that will just deposit Ste. Right. It will automatically make. But if you have Ken, if you have any of this listed representation of lsds, you can simply deposit and then you're in. Right. That's all you need to do.
01:05:39.374 - 01:06:13.836, Speaker C: So from a user standpoint, I'm coming in with Ste or re Deth Keith, whatever it might be. And I'm putting it into this, getting this unified risk. And then people are using these borrowing and lending. What is my risk as a lender? Because it seems like a lot of it's managed for the borrower takes on most of that slashing risk. But where does the risk come in for me as a lender? And what do I have to watch out for?
01:06:14.020 - 01:06:36.434, Speaker A: Opportunity risk. You're keeping your, either the pool so you cannot use it for something else. But that's the reason that, you know, the, the pool is paying you based on the borrowing it has from the middleware. So if the borrowing goes down, then you have lesser yields. But that's basically the opportunity cost. Yeah. Okay.
01:06:36.434 - 01:06:42.766, Speaker A: It's ETH, right? Essentially, yeah. But then, yeah.
01:06:42.790 - 01:06:56.194, Speaker B: The other thing is if the, if the service providers are not lending, then you just, but you grow your case slowly. But fundamentally, apart from what Matt said, is not really.
01:06:57.334 - 01:07:00.194, Speaker A: Yeah. You can withdraw it, right? Anytime.
01:07:01.934 - 01:07:09.502, Speaker B: Yeah. And that's a point for the SPV positions. So pardon?
01:07:09.638 - 01:07:16.744, Speaker A: How to deposit and how to withdraw. There is no waiting period or something. Just go to the tab and just click, click, click.
01:07:19.244 - 01:07:31.212, Speaker B: You know. But if the lenders all pull their capital, right, people taking our debt positions can terminate it early on the basis of that.
01:07:31.228 - 01:07:31.332, Speaker A: Right.
01:07:31.348 - 01:08:11.984, Speaker B: If there's no, if there's no slashing security, you can, you can recoup your, your funds, right. So it works on both sides. So lenders can get their money back early and so can debts as well. But the incentive of keeping your capital in k two as a lender is that you're going to accrue more K E. So that's why you want to stay there. Borrowers want it because they, as Matt was saying about the benefits for your protocol and who knows, in terms of the periphery, there's lots of things that we can build. Not us, but anyone can build, you know, additional incentives for K two lp's.
01:08:11.984 - 01:08:17.824, Speaker B: Maybe they offer their own tokens and, you know, they're all kind of things that can be built around this.
01:08:19.804 - 01:08:27.384, Speaker A: Right. How does, how does the termination look like for. Do you have that? If you go to the borrower position, how does the borrow is actually.
01:08:31.424 - 01:08:47.608, Speaker D: Yeah. Here. So we have slightly different page for post borrow and, you know, increase depth, position things. So at the first borrow, you know, you need to input a parallel, you know, designer verifier.
01:08:47.696 - 01:08:55.899, Speaker A: And this is first time that you. That you're basically. The middleware is first time registering. Right. And then go around. Okay, cool.
01:08:56.031 - 01:09:09.051, Speaker D: Hmm. And confirm. Yeah. Position. Yeah, this is another page.
01:09:09.227 - 01:09:16.303, Speaker A: And if you're, if you're a middleware, you just want to terminate your thing with, with the k two. What do you do?
01:09:18.363 - 01:09:21.823, Speaker D: So we just have to terminate SVP button here.
01:09:22.464 - 01:09:25.576, Speaker A: But there's an unpaid one, so you have to pay. You have to top up. Right? Yeah.
01:09:25.600 - 01:09:27.264, Speaker D: This is the slasher much.
01:09:27.424 - 01:09:27.888, Speaker A: Yeah.
01:09:27.976 - 01:09:40.024, Speaker D: That should be paid. So if I click this, this one and it will show, you know, a trend summary to repay the current debt. So currently, you know, suppose the full repay.
01:09:40.184 - 01:09:53.584, Speaker A: Yeah, the splash amount, that's the consumed debt from the pool. So you just display them before you terminate. Confirm any confirm. Then you just. Then you can terminate, right?
01:09:54.164 - 01:10:00.132, Speaker D: Yeah. So when the terminates we need. We check if this month is zero.
01:10:00.308 - 01:10:17.250, Speaker A: Yeah. And then you just terminate. There's another transaction. So just click on button. Anyone can basically do that in DAP. You don't really have to do. Have much technical knowledge or anything, how this thing works.
01:10:17.250 - 01:10:28.498, Speaker A: You don't really have to spend weeks to build your slashing logic. You don't really have to do anything. It's super plug and play. Thanks.
01:10:28.586 - 01:10:32.970, Speaker D: Maybe we need to disable this terminate button, if any. Slasher math.
01:10:33.042 - 01:10:42.234, Speaker A: Right. Thanks. Hey, caution. Gosh.
01:10:43.974 - 01:10:44.526, Speaker B: Now what?
01:10:44.550 - 01:10:44.926, Speaker A: What?
01:10:45.030 - 01:10:52.350, Speaker B: So what's, um. How do we explore the periphery? Then we can share my screen?
01:10:52.502 - 01:10:54.114, Speaker A: Yeah. Yeah, that'll be great.
01:11:01.254 - 01:11:03.078, Speaker B: Let me share my screen, Phil.
01:11:03.126 - 01:11:03.754, Speaker A: Yeah.
01:11:05.294 - 01:11:05.670, Speaker D: Sorry.
01:11:05.702 - 01:11:06.274, Speaker A: Yeah.
01:11:07.154 - 01:11:21.714, Speaker B: Okay. Okay. All right. This is reporter stuff. So, but on the periphery. Right. So from a smart contract perspective.
01:11:21.754 - 01:11:21.930, Speaker A: Right.
01:11:21.962 - 01:11:28.414, Speaker B: So we like. It's very composable in plug and play. So where can we go with this?
01:11:28.754 - 01:11:59.074, Speaker A: Let's talk about what's a. What's a, what's the LST, our owners, you know, the stead holder, reed holder, how they are going to benefit from k two protocol, right. So if you have an let's take ste or re or whatever it is, you deposit to k two, you have a steed, and you deposit to k two, you will get staking yield, right?
01:12:06.384 - 01:12:07.124, Speaker B: So.
01:12:08.864 - 01:12:14.204, Speaker A: The first yield will be the staking yield, right? So you get it.
01:12:14.504 - 01:12:40.324, Speaker B: Okay, so, so we have lsts, including. Right, okay, yeah, plus. Plus. Well, yeah, so, okay, so we have.
01:12:40.364 - 01:12:40.944, Speaker A: The.
01:12:47.684 - 01:13:22.324, Speaker B: Case depository, right? So we have that. So you bring your assets here. So, wait, so user. So you're going to be an LSD user, right. So you're going to bring your asset that's going to lend Keith, right. So basically, so at the base, uh, stake, yield is being accrued.
01:13:22.664 - 01:13:28.124, Speaker A: Yeah. Right. So you have staking yield, some plus 4% in E. Right.
01:13:35.184 - 01:13:56.208, Speaker B: So, so, so basically. So, so, okay, yes, you have, uh, ethereum staking yield, you know, four plus percent. So, so it's worth stating that. So, yes, so basically, Keith is a like. So it's a staked. It's a staked unit with yield, right?
01:13:56.296 - 01:13:57.684, Speaker A: Yeah, yeah, yeah.
01:13:58.664 - 01:13:59.616, Speaker B: Okay.
01:13:59.800 - 01:14:12.774, Speaker A: Now you will get the k two pool yield, right, for the. Because the depositor deposit, if you put the. Every LP holder will also get a provider share of whatever the k two yield in eat.
01:14:14.674 - 01:14:25.546, Speaker B: Okay, let's. Right. Let me give this thing a bit more space here. I'll go back. Okay, sorry. Let's go through that. Go through that again.
01:14:25.546 - 01:14:26.618, Speaker B: So, k two.
01:14:26.666 - 01:14:27.026, Speaker A: All right.
01:14:27.050 - 01:14:39.074, Speaker B: Okay, so we have. So we the lender, right? Lender. The lender has. Owns some.
01:14:39.194 - 01:14:45.404, Speaker A: Those are resellers. They're restaking their eat, right? Right, yeah.
01:14:45.564 - 01:14:48.356, Speaker B: Okay, so, okay, should I call them restakers?
01:14:48.460 - 01:15:05.464, Speaker A: Yeah, let's say. Because their money is not going anywhere. Standard lending is you're giving your money to lend out your money to someone else. That's not happening here. You're rest taking only for certain things. Right. No one is taking your money away.
01:15:07.144 - 01:15:09.288, Speaker B: Right. So the. Yeah, the assets are.
01:15:09.376 - 01:15:09.600, Speaker A: Right.
01:15:09.632 - 01:15:27.792, Speaker B: Okay. Right. So then we have borrowers. So borrowers, they hold. They hold kids as well. They holding. This year we have some, you know, as well.
01:15:27.792 - 01:15:30.644, Speaker B: So the borrowers are. They are.
01:15:32.524 - 01:15:36.944, Speaker A: Or one of these lsts, they can either deposit ste and then it will convert into.
01:15:37.764 - 01:15:52.876, Speaker B: Right, that's true. That's true. Um, and the interest payment, I think.
01:15:52.900 - 01:16:21.762, Speaker A: The yield actually goes from the k two smart contracts because they're paying to the k two. And the k two has more. More yields, not only from the borrowers. But sometimes it's, you know, the termination fees, liquidation percentage. Whenever there's a reporting happens, sometimes half of it actually goes back to the k two pool. The k two pool has that business logic, right? And it has a yield. At any given point of time, you have a k two yield for everyone can enjoy supplying that.
01:16:21.762 - 01:16:25.374, Speaker A: You know. You know, the. The lsts into that pool.
01:16:28.094 - 01:16:35.774, Speaker B: So. So this is the second yield tier, right? Do we calling it a yield here or.
01:16:35.854 - 01:16:43.474, Speaker A: Yeah, yeah, that's a second yield. That's ETH yield. So you have two ETH yields now here staking and the rest taking yield.
01:16:45.374 - 01:16:48.558, Speaker B: Yeah. Okay.
01:16:48.686 - 01:16:50.406, Speaker A: Now what else? You can get it.
01:16:50.590 - 01:16:54.126, Speaker B: So. So the restaker has deposited into k two.
01:16:54.230 - 01:16:54.446, Speaker A: Right?
01:16:54.470 - 01:16:58.868, Speaker B: It's lent. If they've lent their lst, they got a k. They got a keith.
01:16:58.916 - 01:16:59.148, Speaker A: Right?
01:16:59.196 - 01:17:15.084, Speaker B: Which is then represented as a k two lp position. Right. And at the base, if nothing happened, if nobody borrowed. Okay, so what we're saying here is if nobody took a borrowing position in the k two, you're earning yield on Keith itself.
01:17:15.244 - 01:17:16.460, Speaker A: Yeah. Just.
01:17:16.492 - 01:17:26.694, Speaker B: Just by depositing k two. So you don't have to have any demand for usage of k two to be yielding at the ethereum network rate.
01:17:26.734 - 01:17:27.150, Speaker C: Right.
01:17:27.262 - 01:17:40.862, Speaker B: But if you do, if borrowers are opening a position, they'll make an interest payment to the k two's contract, and that will get streamed to the risk taker. So that's your second yield tier, right? That's still ETH. That's still Ethan.
01:17:40.878 - 01:18:05.716, Speaker A: Yeah. Yeah. So that's a restaking yield. Now, can we have emissions like the people who are depositing the borrowers can give their native token to the k two pool. Right. To incentivize the pool to have enough, because that's what was asking. What's the cost? There's an opportunity someone has to put, like, a lot of ETH there.
01:18:05.716 - 01:18:34.854, Speaker A: So you can, like, give bribe or just drip. Let's say we are providing a million dollar worth of that ETH security for us for a year. This is x amount of tokens will be just directly good to the k two, and it will go to the LP holders of the k two from time to time. Yeah. Emissions, right? These are emissions, right? Yeah.
01:18:35.234 - 01:18:39.738, Speaker B: With k two lp, I would k two lp tokens.
01:18:39.786 - 01:18:39.970, Speaker A: Right.
01:18:40.002 - 01:18:57.646, Speaker B: So, yeah, just a simple. These guys will. Hmm. Okay, so that's. That's tier three of yield.
01:18:57.790 - 01:19:08.754, Speaker A: That's the tier three of yield. Yeah. You basically getting this additional tokens. It doesn't need to be, but they can incentivize, right. It's a market.
01:19:11.594 - 01:19:25.494, Speaker C: So I don't want to get ahead of you guys here. And maybe this, this isn't, you know, up for discussion, but, you know, is there anything stopping this restaker from also being a reporter?
01:19:27.194 - 01:19:47.496, Speaker B: No, actually you're. No, no, no. Nothing stopping them. They can actually plug into this reporting and in case, quit lending, receive ke. Yeah. So this. Okay, let's assume this restaker is.
01:19:47.640 - 01:19:50.840, Speaker A: So you basically run a software, any computer. That's it.
01:19:51.032 - 01:20:17.016, Speaker C: Yeah. So what I'm thinking is that this restaker, most of them will likely want to be this passive restaker. Right. Where they put it in their keith. And they get yield from tier one, tier two, tier three. That's why they're not actively doing the validation themselves. But there is a possibility that maybe this is somebody coming in through Steakhouse or something who's already actively running a validator.
01:20:17.080 - 01:20:20.480, Speaker A: They already have anyone who can run a software.
01:20:20.512 - 01:20:22.136, Speaker C: Yeah, yeah, exactly.
01:20:22.200 - 01:20:22.560, Speaker B: Exactly.
01:20:22.592 - 01:20:29.360, Speaker C: It's already somebody with a machine who's running. Who's running an ETH node, even though they don't have to run an ETH node. Could also kind of simple software.
01:20:29.392 - 01:20:39.904, Speaker A: You can run it on your mobile if you want. Yeah. Not a node. Node requires a huge machine like, you know, comparatively, for this. Yeah. Yeah. So this is like a super lightweight software.
01:20:39.904 - 01:20:42.004, Speaker A: You can just run it in your laptop or somewhere.
01:20:44.584 - 01:20:46.884, Speaker B: Can I approve my stakeout slot?
01:20:48.544 - 01:21:05.048, Speaker A: You could if it is proved. Yeah, you could. That's like a node runner. You don't really have to have. But you can actually put the d eat what you could do. Not. You can actually have a not.
01:21:05.048 - 01:21:31.004, Speaker A: Not the slot not. Oh, so that basically, like any existing node runner who has a validator who doesn't really have to have deed, but you have a validator. Right. You're a solo staker. Whatever you are, right. You can simply go and register with the stakeouts before you stake. So you have your validated in the smart contract, and then you restake and you get this not, which is the tokenized position.
01:21:31.004 - 01:21:46.144, Speaker A: Right. And the not. So it just like click off, couple clicks and button. That's nothing. It's just. And you have a not. Now you can approve a not, and then you can restate that into k two.
01:21:46.144 - 01:22:12.924, Speaker A: It's totally possible because now you have a debt position as a not. The k two smart contract can reconcile how much ETH is there for that validator. Right. And if it comes, if it comes back from consensus layer, if you haven't, you're not losing any money here because you're basically giving to k two. And the k two has given. K two will get repaid back from the middlewares. Right.
01:22:12.924 - 01:22:28.244, Speaker A: So you just get the yield and it will go to your not address, right. Not address will have an ecbs there. Right. So if you, if you register that you have. Yeah, it will be given.
01:22:31.424 - 01:22:32.964, Speaker B: Right, right. So.
01:22:35.784 - 01:23:18.158, Speaker A: I mean, it's natively like you're just basically signaling. I'm also joining the, the rest taking market. They don't really have to bring any kind of, if you are a solo staker, if you have, if you're a node runner, if you, if you could just can make sure your validators are tracked on a smart contract, which is the easiest way you can do it is like just register with the stakeouts when you, before you stake and then do another transaction and get this state back. That's, that's all you gotta do. You don't really have any kind of liquid position tokens. Doesn't matter. You can do that, you know, I don't know, light operator or rocket pull operator or any solar sticker whoever wants to.
01:23:18.158 - 01:23:19.874, Speaker A: Nothing stopping in the event.
01:23:24.334 - 01:23:24.710, Speaker C: All right.
01:23:24.742 - 01:23:32.078, Speaker B: I'm trying to look for more tiers of yield. I'm sure somebody with a DJ mindset gonna put, let's see. I'm not saying.
01:23:32.206 - 01:23:45.974, Speaker A: So now, you are a reporter, reporter also get, you run a software, you get eat as a reporter, right. Whenever you're reporting that. So you get that. The third, you have three types of e tilde. First is the state.
01:23:46.714 - 01:23:47.338, Speaker B: Yeah.
01:23:47.466 - 01:23:49.054, Speaker A: Eat, yield, ETH yield.
01:23:49.514 - 01:23:50.738, Speaker B: Oh, okay, okay, okay.
01:23:50.786 - 01:24:09.102, Speaker A: Yeah. You have staking yield, native vanilla staking yield. You have restaking yield which is coming from the k two. If you're running a reporter software, you get this kind of reporting. You know, the, anytime that you report, you get eat for that. So you get that eat. So that's the, the third error.
01:24:09.102 - 01:24:46.090, Speaker A: But then you have emissions in the native ERC, 20 tokens. That is, middlewares are giving. But what if you are an LST network and who want to incentivize for restaking? So LST networks have their own, you know, the staking yield is there. But if they are saying that, you know, our depositors can, you know, deposit into k two pool and we will encourage that. And if you deposit more into k two, they're capturing LST or LST networks. Both. If you're running a liquid staking networks too, like, you know, any new liquid staking networks who want to launch.
01:24:46.090 - 01:25:27.154, Speaker A: Right. Regardless how you do it. And if you are part of a k two Keith, the list of tokens. You can incentivize your tokens to come into the k two pool because it will help your users to capture additional ethiop. All the ethio that we are saying here, that being an LP holder, you can also approve some emissions right in your native token. For example, if, you know, RPL tokens can be re, can be deposited as much as there. And RPL can also be provisioned there if you want to get more and more yield for your native token holders because it is approved for the rest taking.
01:25:28.014 - 01:26:06.772, Speaker C: So there's so many different types of yield available to the restaker and there's so many variables on how people want to kind of utilize this. I'm really curious what the final yield is going to be. Kind of in its prime form. I know we can kind of estimate the first tier at that 4%. If we want to move into the second tier, that can maybe start to be estimated as well. But once we get into the third and fourth and you know, extraneous tiers, it's like this. I'm not, I'm not sure where this can go, but I'm really curious to see where the yield can get to.
01:26:06.908 - 01:26:21.684, Speaker A: If you do a napkin, Matt, like you know, 4% on the staking e they the pool. The K two pool can give like six or 7% easily if it is there is borrowing because all the usage actually goes to the k two pool holders. Right. It's.
01:26:21.724 - 01:26:30.494, Speaker B: Yeah, it's utilization based. The more utilization, the higher interest and the higher the riskier position will mean larger large interest payments from the borrowers.
01:26:32.354 - 01:26:39.534, Speaker A: Some things are talking about 10% in and around 10% without considering the reporter payment.
01:26:39.954 - 01:26:45.842, Speaker C: So that's two. So that's two. The first two tiers that we're looking at about 1010, 12%.
01:26:45.978 - 01:27:11.658, Speaker A: Yeah. Yeah. And then if you're running a reporter, it just depends on how many, how many, how many services that you want to report. And that's a variable that's kind of an MEV kind of stuff. Right. You're not sure about the Eel, but you may end up like capturing about 5% if you really run multiple reporters for multiple services. So if you're a reporter, you can actually run reporting for all of the middleware sets there.
01:27:11.658 - 01:27:27.442, Speaker A: Right instances. So you can capture. Maybe you're too lucky some of the vents has been captured, has been gone through. Maybe you get 10% or 15%. I don't know, maybe you get 1%. Right? Enough reporting.
01:27:27.498 - 01:27:58.954, Speaker C: Yeah, but it's still one that, I mean, I guess, like, it's hard to put a percentage on the reporter, but, you know, even if somebody. Yeah, okay. Yeah. You know, if you're just running this software, the reporter doesn't necessarily need to have ETH at risk. But I guess with the restaker, you know, even if they just put in one ETH, they're getting, you know, 1012 percent off that. And then if they're able to earn, you know, even just get a few reports a year, depending what they are, that could be quite large. Like you said, it's like Mev.
01:27:58.954 - 01:28:03.394, Speaker C: It's hard to estimate how large some of these can be.
01:28:04.014 - 01:28:24.160, Speaker A: I don't know. It really depends on how much market wants ETH as a security. Right. Do you really believe that ETH is a high demand asset then? Yeah. Then there is a yield. There's an opportunity here. The economic security and the trust is really composable here.
01:28:24.160 - 01:29:19.182, Speaker A: So they can go. It really also depends on what the middlewares and other kind of smart contract protocols or web two protocols who want to use this readily available economic security for going the logics that we mentioned how they want to use it for. Because if they borrow, if there is a protocol that says that, I mean, we are reinforced by 100,000 ETH a year security that will actually give confidence to get a million, $2 million worth of the TVL or something like that because that gives a confidence to the market because the protocol has been reinforced with the restake e. Right. If something happens and it's completely verifiable. So it's sort of, it's sort of a positive sum. It's not about the yield, it's about the value accrual through the decentralized systems.
01:29:19.182 - 01:29:48.184, Speaker A: And they can, they can immediately launch their service without spending a lot of money. So their cost to this is super, super minimal. And they can attract a lot of other kind of use cases, which in the normal case will take a lot of time and effort and money. And this is faster, cheaper, better. All three included. Right. Without having any knowledge, without having any kind of technical that plug and play come and click, click, click.
01:29:48.184 - 01:29:51.144, Speaker A: You got to go. And readily available. Makes sense.
01:29:51.304 - 01:29:53.424, Speaker B: No additional blockchains needed?
01:29:53.584 - 01:30:04.298, Speaker A: No, no. Oh, that's, that's a cool thing. So you can actually report any kind of data regardless, any kind of curve that there is no limitations. Right. What kind of data that you want to report?
01:30:04.376 - 01:30:12.758, Speaker B: We, yeah, we support bn. Yeah, we support 128 Ethereum, but all, we also the, what is called Edward. Yeah, yeah.
01:30:12.806 - 01:30:32.384, Speaker A: We support Woodcarf too. So, you know, near Solana, Polkadot, you name it, Cosmos, any kind of things. Like if you. If you're there in the blockchain, they can just use it. You can. You can run a dA. If you are a DA services, you can actually use this just to.
01:30:32.384 - 01:30:37.356, Speaker A: Onboarding services to your DA. And then the payment module is here. Right.
01:30:37.460 - 01:30:43.116, Speaker B: And people will report the likeness of your DA. Right? Likeness is really critical for a DA. So is corruption, actually.
01:30:43.220 - 01:31:12.966, Speaker A: Yeah, yeah, yeah. If you like in a celestial or any kind of data layer or even you're running like in a bundlers and things like that, you can just use this. So the payment modules is built in, so you can just use these contracts and you only need to like, you know, write maybe few lines of code, just call the contracts and just make a decision. So, yeah, that makes sense from a commercial standpoint. Like, just trying to explain how this could be used. It's really a definite. Yeah, yeah.
01:31:12.990 - 01:31:51.464, Speaker C: I think it's. It's really up to the person and the protocol. And, you know what I really like about this is there's so many different opportunities for people to get involved. Just somebody can come in with just eat, they can stake it and get this yield. If somebody wants a little bit more, they can come in as a reporter, download and run a simple software. But then when it comes to the actual middleware itself, it can be applied, you know, really anywhere at any web, two, web3 sort of, sort of blockchain. And I think it's really interesting that you mentioned this whole idea of a DA and being able to verify data, because that seems like such a.
01:31:51.464 - 01:32:03.580, Speaker C: Such a nice fit here. Like this. This protocol K two is so lightweight that it can be utilized with the DA without a huge lift. It's kind of a plug and play thing.
01:32:03.732 - 01:32:27.848, Speaker A: Yeah. You could have multiple das on top of this. You can have multiple blockchains, you can have multiple roll ups, you can have multiple services, you have multiple protocols. It's just really like, you can expand anywhere that you want. But let me ask you this. If you. If I have a k two, I'm a k two LP holder and I have a farming contract, I can accept k two LP tokens because these are standard LP tokens, right?
01:32:28.016 - 01:32:29.604, Speaker B: Standard ERC 20.
01:32:29.944 - 01:32:57.344, Speaker A: So the k two LP token has like, in a native way, I'm saying that an average of ten to 12% e plus all the emissions. So if you're. If you're farming your LP tokens into a farm contract, you're basically talking about ten plus maybe all these other emissions, 25%, but different tokens. But that's a very interesting asset that you want to have a farmer in like, yeah, money or, I don't know, what are the other kind of farming?
01:32:57.884 - 01:33:37.134, Speaker C: Yeah, interesting. Because like even at the base level, because it is, you know, a basic lp token, somebody could take it to, you know, a BT or some sort of auto farm thing where they can plug it in and at the base level it could just keep restaking their, you know, keep staking all their rewards as they're getting them now, you know, kind of interesting point that you're saying too, where I know people are starting to do some really interesting things with these LP positions and it'd be really curious to see what people can build out of this, especially when it is sort of a one sided LP token rather than the two sided.
01:33:37.474 - 01:33:50.724, Speaker A: Yeah, I mean it's totally possible. No one can stop it because it's just smart contracts, they can do it whatever you want. Yeah, yeah, yeah. That's very interesting.
01:33:52.184 - 01:33:56.764, Speaker B: Gives a new mini to roll ups as a service. I mean, I'm gonna stop. I'm gonna stop.
01:33:58.904 - 01:34:45.344, Speaker A: Now. The roll ups needs it, right? So think about this. Every roll ups comes have this kind of a, you know, they need to put their proof back into the chain, right, from time to time. So the Merkle tree. So you have this kind of a sequencer, right, shared sequences, right. And then the proposal, they every, so now you need to have lockspace for everyone. But like, you know, shared sequences say that, you know, I'm going to put some sort of, every time this roll up state route will get injected that, you know, and then the roll up number two, the roll number three roll up number four because that's the shared sequencer will just, just, they provide this kind of data availability, but they also like, you know, extending their stateroot will be injected to Ethereum because the roll ups has to go.
01:34:45.344 - 01:35:11.806, Speaker A: And if there is any kind of problems with the stateroot updation, just get some restricting thing. You don't really have to go through anywhere. Just make sure when you spin up a roll up with the Conte or the other kind of like the roll up frameworks that you can spin it up with an opiset within 30 minutes, get some resetting for your roll up. So people who are bridging asset to their people, their protocols are deploying there. There's some confidence your state router is actually getting reported back in time to.
01:35:11.830 - 01:35:14.886, Speaker B: Time so we can decentralize the sequences then.
01:35:15.030 - 01:35:23.314, Speaker A: Yeah, totally. Yeah, anything. So if the deconsers. If. Sorry. If the sequencers have some sort of a time based event. Right.
01:35:23.314 - 01:35:28.634, Speaker A: Anything required, timely reporting that can be reported.
01:35:31.614 - 01:35:38.978, Speaker B: Yeah, I mean, like fraud troops are notoriously very challenging things. But you can build fraud proof with k two.
01:35:39.146 - 01:36:05.474, Speaker A: Yeah. You could even have like, you know, asset bridgings and that is also correct. Endlessly. It's all liveness and corruptions. It basically tells everything. And you can just inject the business logic in a way that you want to use it for to show the work is done. Or maybe you can compose couple of events into one thing.
01:36:05.474 - 01:36:42.290, Speaker A: Like if I have X and Y, then z can happen. Right? Like kind of a decal for this. So if you have like certain things that happened, then you can open a. You know, the smart contracts are notoriously, like it's automated, but it's not automated. So it's very. It's automated in a sense that it will do what it is and it's supposed to do and it's poked. Yeah, but you need to poke it so you can actually have build this kind of minion robots and you know, the smart contracts will do it.
01:36:42.290 - 01:37:17.734, Speaker A: If you want to have a onboard like real world assets, if something happened there, click, you know, it's just report and it will. It will trigger a smart contract operation and just goes through and everything is like, you know, poking data. But the. It comes down to one thing, data integrity. Right. Once you have a tamper proof data integrity between the exchanges, you can build any kind of logic. And that's why we made sure this is the ZK technology that is programmable to an extent that whatever you want to program on top of it.
01:37:22.054 - 01:37:54.870, Speaker C: Yeah, I think that's kind of a good point. It's very interesting because a lot of what this can do is add to smart contracts into different protocols and even sort of web two and web3, this sort of operational security, this ongoing security that people can do and just ensure the data ongoing and make sure that the core information that's coming through is accurate and presented in a way that is intended by the protocol or application.
01:37:55.062 - 01:37:57.234, Speaker A: Yeah. And you don't have to pay anyone else?
01:37:57.814 - 01:37:58.594, Speaker C: Yeah.
01:38:01.534 - 01:38:04.394, Speaker A: Any questions from your slide deck?
01:38:05.734 - 01:38:06.350, Speaker B: I think we.
01:38:06.382 - 01:38:08.834, Speaker C: I think we covered quite a bit. Yeah.
01:38:09.334 - 01:38:10.714, Speaker A: Any other question? Guys.
01:38:14.214 - 01:38:16.834, Speaker B: Watch this space. I'm sure we're going to do more content.
01:38:17.744 - 01:38:23.584, Speaker A: Cool. And that's a wrap. It's okay, too. Thank you. Right.
01:38:23.624 - 01:38:24.000, Speaker B: Thanks, guys.
01:38:24.032 - 01:38:24.804, Speaker C: Thanks, guys.
