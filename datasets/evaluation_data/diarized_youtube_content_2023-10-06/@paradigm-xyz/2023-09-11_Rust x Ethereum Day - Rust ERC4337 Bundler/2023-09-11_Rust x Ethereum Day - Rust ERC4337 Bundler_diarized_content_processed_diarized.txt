00:00:00.960 - 00:00:29.188, Speaker A: Sweet. So, as Joe just mentioned, we're talking about our rust implementation of an ERC 4337 user operation bundler. Quick show of hands, who here is high level familiar with ERC 4337? Nice, that's pretty good. I'll give a very quick primer and then we'll dive into the actual client. So, technical underpinnings of account abstraction, high level. There's two kinds of accounts. There's EOas, which are what most of you guys are familiar with in terms of how you interface with the blockchain.
00:00:29.188 - 00:01:20.990, Speaker A: And then there's smart contract accounts. For a multitude of reasons, we believe that to get a billion people on chain, we'll need smart contract accounts. This was called out in a few recent blog posts, including one from Vitalik on his three transitions. But the problem is that natively, Ethereum and EVM can only handle EOAS right now. So how do we provide the infrastructure off chain to safely support smart contract accounts? The full flow is something like this, where still every transaction on Ethereum is initiated by an EOA. But the entity managing that EOA is what's called a bundler, and it can accept meta transactions called user operations from a lot of users, bundle them, post a single transaction to Ethereum or any other network, and have those proxy through what's called the entry point contract to the user's account. So quickly, Runler 101 everyone before me made some really nice slides.
00:01:20.990 - 00:01:40.760, Speaker A: I apologize, I did nothing. So there's just a lot of text that we can parse through. Cool. So what's Rundler? It's a modular implementation of the ERC 4237 bundler, drawing a lot from Rest's design principles. There's three main components. There's the RP salayer, the bundle builder, and the mempool. The mempool stateful.
00:01:40.760 - 00:02:25.172, Speaker A: The RPC layer and bundle builder can scale statelessly on top of that mempool. The default connection between these components is GRPC, but we also are building an integrated mode with zero copy. We've built the EUMM pool to handle reorgs in the underlying network. It heavily uses ethers RS, and we're going to be switching to alloy when that's already there's been an absolute truckload of headaches around gas estimation for 4237, and this is compounded by a lot of factors, including different fee markets on l two s and what's called the 164th rule. So we have a binary search implementation implemented in solidity to help streamline some of these things. And there's a four part 15 page blog post on gas estimation. If you guys are interested in more about that.
00:02:25.172 - 00:03:04.570, Speaker A: It's crazy that that topic can be so deep. And then we have a pretty advanced bundle builder right now that optimizes for bundle size. Actually, we had a recent bug last week where it was posting transactions that would use more gas than optimism would have available per block. So that's been patched, but otherwise pretty sophisticated. And it's streamlined so that we can support things like signature aggregation for BLS soon. The high level idea there is that on l two, a lot of users submit UOS signing transactions with the BLS scheme. The bundler can aggregate all those signatures into one signature that's then posted on the underlying network and can save a lot in DA costs.
00:03:04.570 - 00:04:05.636, Speaker A: Then it also handles all of the ERC 4337 simulation rules, which are pretty restrictive, and we can talk a little bit more about that later. So when Runler so we're currently actually sprinting to open source this. It's still not yet been open sourced, but it is in a private beta managing alchemy's managed user operation endpoints on ethereum, arbitrum, polygon, optimism and now actually base. We have this checklist for open source and you can see from some of the like we actually powered an airdrop for this team called Cyber Connect about a week ago, wherever the rundler handled super smoothly, so it's been powering live production use cases. So how Runler we're still waiting for benchmarks. Most of it is going to be just a proxy to the underlying node layer, so writes are theoretically constrained by the best base network gas limits. Reads too are constrained by fan outs to things like ETH logs and underlying node layer.
00:04:05.636 - 00:04:51.900, Speaker A: There are some low hanging fruits for performance optimizations that we'll get in, including things like native tracers that we want to build into ref to support user auth validation. It's currently a current team of four alchemy engineers, but we'll have open source soon. Cool. Looking forward, we're cutting the public beta release in early to mid September. We've been working with a few folks who are writing their own bundlers and the Ethereum foundation on the P two P mempool specs, which will be a key component of this to make it more censorship resistant. There's also general designs for what's called alt mempools to work around the restrictions in core 4337. So the idea is bundlers can subscribe to execute user operations that violate 4337 rules, and in exchange for taking on that risk get compensated higher fees.
00:04:51.900 - 00:05:47.036, Speaker A: We want to build as I mentioned a simulation tracer straight into the rest binary which currently we rely on the JavaScript called Tracer which is not super efficient using the latest and greatest from the EF and the IPFS team for the P two P stuff following rest lead for runlers and SDK. Kind of having some prototypes around AA Reth where like top of block can be the user operation batch being posted from the UoS it receives and yeah a lot of other performance style improvements using all the great tools that folks have mentioned in earlier talks today. Cool. So yeah that's it. High level. We're really excited to get this out to the ecosystem soon. Been just load testing it and running a few experiments in production to make sure that it's all good to go and cleaning up for everyone to be able to onboard and contribute to it soon.
00:05:47.036 - 00:05:55.580, Speaker A: But yeah, if you have any other questions check out our website alchemy.com account dash abstraction or I'm happy to chat about these things at any time. Thank you.
