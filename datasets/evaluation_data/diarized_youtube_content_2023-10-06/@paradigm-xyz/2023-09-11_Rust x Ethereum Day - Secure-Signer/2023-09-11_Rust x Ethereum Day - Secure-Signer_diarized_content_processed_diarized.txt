00:00:00.640 - 00:00:22.478, Speaker A: Okay, thank you. Yeah. As you can see by my desktop, I'm a big puffer fan. I'm CTO at Puffer Finance. So. Okay, I'm going to talk about secure signer today. So this was the tool that we built for the validators within our pool, but it's also applicable to actually all proof of stake chains as well as like people outside of the puffer pool.
00:00:22.478 - 00:01:05.340, Speaker A: So the motivation here, you can kind of think of it like a hardware wallet for your validator. And the goal here is we want to enhance the validator key management through trusted hardware. And so the goal here, there's multiple goals. One is protecting honest validators from themselves, because a lot of these past slashing events have been because of user error, like running multiple validator clients and signing conflicting messages. Another thing is to provide more security in case your actual validator is corrupted or you're trying to be malicious and attack the chain. And another is to reduce the severity of these consensus client bugs. We saw Ethereum lose finality for a little bit a couple months ago.
00:01:05.340 - 00:01:55.434, Speaker A: Luckily it wasn't worse and didn't lead to slashing. But if that were the case, it's better to have these extra defenses in place. And another thing here is to help increase validator software diversity. So we're trying to just like we have lots of consensus clients and execution clients, we want to add to this like remote signing kind of class of software and have people build more diverse clients. So the outcomes if we're able to achieve all this would be to help reduce equivocation across Ethereum, which ultimately leads to a more stable chain, and then actually reduce operational risks for validators in general. And this really helps, like the solo stakers who have kind of less capital to play with here. And finally, I guess for everyone here trying to help increase the design space for staking infrastructure.
00:01:55.434 - 00:02:45.286, Speaker A: So yeah, having different remote signing tools in the mix really adds to this. So what is it? So right now it's developed as a SGX enclave, and we're planning to diversify that in the future. But it has some primary responsibilities of essentially maintaining this EIP 3076 protection database. Do the BLS keygen and signing, as well as being able to speak the language of the ETH, two beacon chain data types and a big shout out to the web3 signer team from consensys who really kick started all of this. They essentially have the same thing implemented as a Java program. So we were able to reuse a lot of the same APIs to speak to all these consensus clients. So yeah, so onto some rust stuff.
00:02:45.286 - 00:03:32.646, Speaker A: So we built this fully rust native. We use a warp web server, and the main thing here is being able to interface with consensus clients. And we use this convenient lib OS abstraction layer for actually building the enclave. But moving forward, we're trying to actually have a modular signing backend that allows you to interchange different types of enclaves besides SGX, because we want to diversify on the hardware manufacturer and then be able to integrate with things like DVT. And actually, one thing that we're really excited about is trying to break up this mono repo into lots of smaller crates that we can open source and contribute back to the community. We've been integrating a lot of lighthouses crates into our project. And yeah, thank you.
00:03:32.646 - 00:03:36.230, Speaker A: This is puffer's discord. So we're a new protocol getting started.
