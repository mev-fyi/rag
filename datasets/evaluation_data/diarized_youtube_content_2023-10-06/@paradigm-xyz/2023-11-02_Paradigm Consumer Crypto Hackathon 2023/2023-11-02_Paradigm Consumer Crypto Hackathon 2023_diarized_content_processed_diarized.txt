00:00:08.360 - 00:00:30.620, Speaker A: Okay, we'll wait a couple seconds for folks to settle in. How is everyone doing?
00:00:31.040 - 00:00:31.780, Speaker B: Good.
00:00:33.400 - 00:01:09.730, Speaker A: First off, thank you guys so much for spending your Friday like this with us. We really, really appreciate it and are excited to build with you guys today. For those of you who I haven't met yet before, I'm Caitlin. I am an investment learner here at Paradigm. On your tables, you are going to find a very important item if you take a look at a green rubber paradigm duck. So you guys have probably mostly interacted with this concept through rubber duck debugging. But today we want to do something a little bit different with it.
00:01:09.730 - 00:02:17.962, Speaker A: Explain why the consumer app that you build today or tomorrow is made ten times better with crypto. Maybe it's because you guys are using it for the original use case of crypto digital money, like uniswap. Or maybe it's because you are using a certain property or aspect of crypto that makes your app experience ten times more fun, like fintech. Or maybe you have a tried and true consumer idea that you think is made more enjoyable or more efficient with crypto parallel. Whatever route you decide to take today, you have the full paradigm hive mind here with you for feedback. Me, Georgios, Arjun, Charlie, Frankie, Doug on the investment research team as well as Achill on the design team. And you also have world class infrastructure founders here with you today and teams here with you today who are going to make your app experience an app building experience ten times this year.
00:02:17.962 - 00:02:39.710, Speaker A: And unlike anything you were able to do a year ago today, those are folks from base, from privy, from Wagme, and from axiom. And then lastly, of course, you guys all have each other here in this room today, and you also have each other in the group chat forever. So can't wait to see what you guys filled.
00:02:41.340 - 00:02:41.908, Speaker B: Yes.
00:02:42.004 - 00:03:13.000, Speaker C: So, first and foremost, thank you for coming. And this is not a coworking space, but it's a Friday and people have companies to build. So if you need to build your company, it's okay. You can build your company. We will not take you. You know, this is not a problem if you don't have a company or if you have some time, look around and find some hackers. So, first and foremost, by show of hands, who here has used Ethereum before? All right, makes sense.
00:03:13.000 - 00:03:30.440, Speaker C: Who here has written a smart contract before? Please raise your hand. Amazing. And who here has used Wacme VM, the whole front and stack before? I can keep going. Who has written a PWA before.
00:03:32.140 - 00:03:32.428, Speaker B: The.
00:03:32.444 - 00:03:54.398, Speaker C: Filter starts to show? Okay, who here has used preview before? That's the final question. All right, great. So we have plenty of builders that have used most of the things that we are going to use. And also this is a consumer event. So I would have hoped that more experts would be here because I don't know anything about consumer. Anyway, why now?
00:03:54.494 - 00:03:55.774, Speaker D: Like why are we doing this?
00:03:55.862 - 00:04:37.838, Speaker C: Because clearly this is kind of a new thing. Over the last two years we've been polishing our arsenal of tools and now it seems like we've reached the phase where what seemed to be hard is now starting to be easy, in particular around three core areas. Firstly, you have the onboarding flows, you have fiat on ramps, passkeys, all of that. That seems to start to be solved. We also have gone in the phase where the wallet phase has also improved a lot. We also have a lot much better tooling. Now we have the whole foundry, VM, whiteme, full stack that we like to use for building things.
00:04:37.838 - 00:05:24.960, Speaker C: There's also a lot of auxiliary services that exist. And finally, we also, it seems like we have solved scaling to some extent, like maybe like not fully trustworthy, but at least we have some kind of notion of elasticity. And when we handle exit demand, people have learned how to build chains, people have learned how to build indexers, scalable RPC's, etcetera. So it seems like we have all the right ingredients in place to start building some more consumer stuff and that's why we're all here together now. So again, I don't know that much about the consumer stuff, but I know a lot about the security and the infra component and it feels like we have enough firepower to do some serious damage today. So I'm personally very excited for today. Thank you all for coming and feel free to use us as resources throughout the, the day.
00:05:28.660 - 00:05:36.084, Speaker E: That's what I want to see. That's exciting. Also, who's used base, who's deployed a contract on base? Testnet, Mainnet. All right, good.
00:05:36.132 - 00:05:37.268, Speaker B: That also good.
00:05:37.324 - 00:06:06.524, Speaker E: So I'm Ryan Nitz. I'm the head of devrel at base. My background is I worked for about 20 years as a software engineer. I spent a lot of time in Internet infrastructure. That's been kind of the core thesis of my career. And moving in more and more on chain is like a natural evolution of that Internet infrastructure. In my spare time, I'm a startup mentor and I also am a venture partner at a local accelerator.
00:06:06.524 - 00:06:34.076, Speaker E: So on to the next slide. What is base? This is a little bit we're going to cover. It's going to be really brief here, we have a lot of fun and a lot of hacking to do today, but we're going to cover what is base. We're going to touch on the consumer focus of base, we're going to touch on what base is doing for public goods funding, and then we're going to announce something new that's pretty exciting for the developer community. And then lastly, we'll just wrap it up. So moving on, you probably know Coinbase. I'll just get this out of the way.
00:06:34.076 - 00:07:08.818, Speaker E: We've been building the crypto ecosystem for about a decade. I like to say that we have about 128 billion in tvl on a private l two. What we're trying to do with base is we're trying to bridge that into on chain more and more. So this is the decade where you're going to see Coinbase move from a centralized exchange, a centralized set of infrastructure, to a decentralized on chain company. And that is going to take some time, but it is in process. So for those that you don't know, it's basically the l two equivalent. That just means it's going to function exactly as the l one.
00:07:08.818 - 00:07:35.648, Speaker E: It's built on top of the op stack. It's being incubated by Coinbase. We do have a path to decentralization and we do have a plan in order to fully decentralized base over time. I'll touch a little bit on some of the technical hurdles in the process, but our goal here is ultimately we want to bring the next million developers on chain. We want to bring the next billion users on chain. All right, you probably have seen this before. It's actually a little bit out of date.
00:07:35.648 - 00:08:08.478, Speaker E: You see on the blue line, you see the l one ethereum transactions that are occurring. It's been basically flat for a number of years now. There's not a ton of extra capacity on that network. And what you're starting to see is you're starting to see, as of two years ago, there was effectively zero l two traffic that was occurring, and now you're actually, this is out of date. This is now a five x scalar of what you're seeing in terms of on top of the l one with l two transactions. So if you go to l two b, you can actually see it's at 4.7 x scaling factor right now.
00:08:08.478 - 00:08:43.110, Speaker E: So this is going to continue to move up into the right. Even Vitalik is like, is indicating that the majority of transactions, the majority of innovation is going to be built on the l two with the l one, underpinning it from security and from infrastructure. This is a little bit of a state of the l two s. So there's. Stage zero is full training wheels. Stage one is less training wheels. And stage two is effectively the equivalent of Ethereum, where you have a completely decentralized, trustless environment.
00:08:43.110 - 00:09:23.980, Speaker E: If you look at all the top six l two s out there right now, you'll see that this is just by TBL. This is maybe not the best metric, but you'll see that there are zero stage twos. There's a couple of stage ones, and the majority, if you actually look at the rest of them going down there, the majority of them are actually stage zeros. So what we're planning on doing through public goods funding and working with optimism collective is actually getting to stage two by the end of no, next year. We hope to get to stage one by the end of this year. That's looking a little iffy, but, you know, we'll get there eventually. And stage two is also, there's other, you know, hurdles in addition to the technology in order to get to that level.
00:09:23.980 - 00:10:01.428, Speaker E: But this is kind of our goal and our commitment with base. And the great part about the work that we're doing together with the optimism foundation is it's not just going to apply to us, it's public, it's available for anybody who's running on the op stack. We'll be able to reach that level of maturation over time. This is just the highlight reel. This is the ecosystem we launched with over 100 blue chip providers, everything from infrastructure to the financial side of it, and even consumer. This continues to grow significantly and rapidly. So I highly, highly recommend, if you're building on base, go to base.org
00:10:01.428 - 00:10:42.594, Speaker E: ecosystem and apply to be a part of the ecosystem. You're definitely welcome. The on chain use cases continue to grow, and especially on the consumer side, this is growing faster and faster, and we're starting to see a lot more innovative use cases, which is why we're super excited to be here today. You've got fronttech bringing social on chain. You've got Blackbird bringing restaurant loyalty and access on chain. You've got parallel, obviously, bringing on chain and base paint is also kind of the sleeper hit of the year, bringing collaborative art on chain. And so these are just a select few kind of gaps that are deployed on top of base.
00:10:42.594 - 00:11:20.990, Speaker E: And this is continuing to grow. We're looking forward to getting some of the logos from your projects out there and up there for the next iteration. Just touching on public good funding public goods funding is incredibly important to base. It's built on top of public goods and we're contributing back to it. So we're getting back roughly, we're giving back 15% of the net sequencer revenue back to the optimism collective in order to fund and continue funding public goods. We're highly supportive of that. We're now the first external organization that is contributing code into the op stack, further decentralizing that project.
00:11:20.990 - 00:11:53.332, Speaker E: We have grants, we have the retro PGF through the Optimism foundation. We have prop house grants. We're contributing to OpVM and Wagme. We released pessimism, a set of invariant controls for anyone who's building on top of the op stack. And then we recently open sourced our smart contracts and we're just totally committed to further contributing to public goods and open sourcing. Everything that's space related, something new. Okay, today, we will announce later today, so don't listen, leak it out.
00:11:53.332 - 00:12:34.986, Speaker E: We're announcing a paymaster on the testnet where for anything, any smart contract, sorry, smart contract wallets will be supplementing gas. And we don't want people to have to sit there and go to faucets and beg their friends and find whoever's holding it, because now we have sofolia coming up and so everybody's got to rebuild their bags and whatnot. So this will, this will be available initially on Gurley. And we're the get down to as well. And we are actually exploring ways that we can actually do this in order to simplify and reduce costs for developers on Mainnet, specifically around contract deployments. So I'm just going to wrap it up. We've got a lot of good speakers today.
00:12:34.986 - 00:13:00.416, Speaker E: Really excited to be here. Part of paradigm. Paradigm is undoubtedly one of the preeminent thought leaders in the space on the EVM side. It's an amazing investor, it's an amazing partner on the venture side. And we want to get in touch. So if you have XMTP enabled, you can send me a message using that QR code. If you're not familiar with XMTP, it's available in any wallet that supports it.
00:13:00.416 - 00:13:25.840, Speaker E: It's an open, decentralized messaging protocol focused for the on chain ecosystem. You can also hit me up on Telegram. More than happy to meet with everyone. We're committed to providing kind of this world class coverage of our builders and building out this ecosystem. So I don't care if you're like two guys or two people in a garage. I don't care if you're like a well established venture funded project reach out to me. We're happy to talk.
00:13:25.840 - 00:13:29.500, Speaker E: We're happy to support. Thank you so much for everyone. Have a great day building.
00:13:36.320 - 00:13:39.060, Speaker A: Next up, we have Ankush from.
00:13:40.020 - 00:13:42.760, Speaker E: Sorry, I forgot the words would lead into grippy.
00:13:55.860 - 00:13:57.628, Speaker B: Cool. Hi everyone.
00:13:57.804 - 00:13:59.452, Speaker E: My name is Raha.
00:13:59.516 - 00:14:01.120, Speaker C: I close on my exterior.
00:14:01.660 - 00:14:21.800, Speaker B: Hello. Cool. Hi everyone. My name is Ankush. I am an engineer at Pravy and today I'm going to be talking a bit about tackling UX and DX challenges in web3 and how tackling one can help tackle the other. And we'll be talking about a stack that uses embedded wallets, account abstraction and gas sponsorship together. So quick agenda.
00:14:21.800 - 00:15:13.400, Speaker B: First, we'll talk a bit about what is privy. Hopefully a lot of you have heard of it before, but we'll do like an overview. Secondly, you all just heard about the new basepay master, which we think is a super exciting tool. So we'll go through an example of using privy with the base paymaster, and then lastly, we'll just go through a quick screenshot of code to see how you can do it yourself. So first, what is privy? Privy is a simple library for onboarding all of your users to web3, regardless of whether they're coming in with the wallet or not. So what that means is that if your user is familiar with web3, maybe has a wallet with existing assets, they can use privy, or your app can use privy to connect their wallet to your site, and you can request signatures and transactions from them, just like normal. Alternatively, if your user doesn't have a wallet, or they maybe don't want to use their existing wallet in your app for privacy reasons or security reasons, they can sign in with an email address, a social login, or a phone number.
00:15:13.400 - 00:15:45.304, Speaker B: And privy generates a non custodial wallet for them behind the scenes. And that's secured by Shmere secret sharing. There's a lot more about that in our documentation, but also if you find anyone with privy share today, we're happy to talk more about that architecture as well. But yeah, these are just some of the customers that have integrated privy. You may have seen it in the wild with like Friendtech, Courtyard, Blackbird, etcetera. And yeah, just to reiterate, I think the three kind of big pillars of privy today are, one, the wallet connectors for external wallets like Metamask, Coinbase, phantom, et cetera. Two is user management.
00:15:45.304 - 00:16:25.158, Speaker B: So for all of your users, you can see their wallet addresses, what login methods they've used, that kind of thing. And then lastly, is the embedded wallet, which is again, where you sign in with a social login, an email address, etcetera, and you immediately get an on custodial wallet behind the scenes. So I want to walk through an example of how you can use privy to build an app. So what are we going to build today? We'll build a really simple app that just mints an ERC 721. But the key aspect here is that we're not going to use any gas. And that means me as a developer, I'm not going to use any gas, I'm not going to touch any gas tanks, I'm not going to touch any faucets. Normally with these gasless setups, like a developer has to fill up a gas tank to pay for gas on behalf of the user, I won't deal with that at all.
00:16:25.158 - 00:16:55.940, Speaker B: And also, of course, the end user shouldn't have to pay any gas for the transaction as well. And just for a sense for the stack, we're going to be using privy for onboarding and embedded wallets, alchemy account kit for smart wallets and this is kind of the account abstraction piece of the stack. They make it really easy to implement account abstraction. We'll be using the base paymaster, which was just introduced to cover gas fees. And then lastly we'll be talking about VM for interfacing between the wallets and all these different toolkits. So this is just a quick demo if it loads.
00:16:57.960 - 00:16:59.700, Speaker C: Never a video mislagic.
00:17:01.960 - 00:17:03.180, Speaker E: The network is.
00:17:06.560 - 00:17:36.404, Speaker B: You can also do it live. Whoever Google account this is, can I use it to sign signed into Tony's Google account and creating an embedded wallet for me. I've entered the demo and.
00:17:36.492 - 00:17:36.860, Speaker D: Cool.
00:17:36.940 - 00:18:01.916, Speaker B: So this address here is the embedded wallet that Prithvi created for me behind the scenes or for Tony rather. And then this is the smart wallet address that we've deployed with alchemy account kit, using the embedded wallet as a signer. And we're going to click this button here to mint an NFT. It's confirming my transaction. Cool. And yeah, you can see that the transaction went through is minted.
00:18:01.988 - 00:18:03.188, Speaker F: I know that looks pretty simple, but.
00:18:03.204 - 00:18:41.586, Speaker B: Like, the important aspect here is that no gas was touched at all by either the end user or the developer. So that's what we think is a really cool aspect of this. And really quickly on why this matters for consumers. Obviously gas is super complicated, so I think abstracting it away as much as possible in your app is the best thing to do. It just eliminates a huge source of friction for apps sponsoring gas, especially wallet deployment costs with account abstraction can be prohibitively expensive. So having a tool like this makes it really easy to just get set up. And then lastly, for developers, faucets are a pain.
00:18:41.586 - 00:19:18.670, Speaker B: I didn't have to do the whole game of transferring test net need between my 15 test wallets to make sure I have enough of the one account I want to test with. It just worked. So I think that's the other really cool aspect of this, is that it's easy to get started. And yeah, that's the first ever live demo of the base paymaster in action on Gurley and we really think, again, building better consumer experiences here through gas abstraction also simplifies the developer experience too. It becomes really easy to test things, build things, try new things out with tools like this. And then I'm going to race through the code really quick. But we also instruct a repo so you can look at all this, you know, more long term.
00:19:18.670 - 00:19:52.550, Speaker B: But in terms of setting your app up with privy, the first thing you do is that privy exports a privy provider react component, which is a react context. You can just wrap your app with it and that allows you to use privy from all of your pages and components. And then if you have this configuration here, it'll create an embedded wallet for the user when they log in. So once the user logs in, you can get their embedded wallet and create a smart wallet for them in the background. Then with the smart wallet you can basically build your user operation. And this looks very similar to just building a transaction without account abstraction. You can see the parameters are mostly the same.
00:19:52.550 - 00:20:25.460, Speaker B: You just query the base paymaster, which is basically connecting an RPC node. Um, send your user operation to it. The base paymaster will send you a response. You populate your user operation in the Paymaster and data field with that response. And this basically says the base paymaster has agreed to pay for this transaction and then you just sign it and submit it. It's a very simple transaction flow. But um, you know, just using tools like the base Paymaster account abstraction, we can take an existing transaction flow and make it completely gasless for everyone who has to kind of deal with it.
00:20:25.460 - 00:21:10.568, Speaker B: And yeah, just to kind of reemphasize the point, look at how all of the test nfts have minted without. This is not even the full list, but I've minted all these nfts without having to touch any test net eth at all, which I think is pretty cool. And yeah, if you want to get started with privy today we have a link for API keys for the hackathon console, privy, IO, Paradigm hackathon, and the password there is paradigm 2023. We're also here if any of you forget it and just need API keys, we can set you up and then some links to our docs. There's a starter repo for this demo, which we definitely recommend that you check out just to see how all this implementation works. And also, we know pwas are super hot right now, so we have a starter rep for pwas as well, if that's of interest. Cool.
00:21:10.568 - 00:21:11.820, Speaker B: Thank you so much.
00:21:17.240 - 00:21:26.340, Speaker A: And the permit team will be putting all of those links in the privy support topic channel in Telegram. Up next we have Tom from wagy.
00:21:30.280 - 00:21:50.540, Speaker D: Hey everyone. I wasn't able to see when Georgia said this earlier, but how many people have used wag me? We'll split it up. Okay, how about vm? Cool, cool. So I'm here to talk about both those really quickly. You probably heard about it, but hopefully, like there's some good resources for getting started really quickly out of hackathons in here.
00:21:52.240 - 00:21:53.416, Speaker F: Do you want me to press this slide?
00:21:53.488 - 00:21:54.100, Speaker A: Yes.
00:21:54.960 - 00:22:50.122, Speaker D: So yeah, we're going to talk about what these things are real quick, since you've all heard of it, plays through that why you want to use them, and then sort of like a stack like for a hackathon, how to get started really quickly, what resources are available to you in like the wagon VM ecosystem? Oh yeah. And first, this is terrace. He's like this typescript crab, kind of like Rust Ferris, but he's really important to everything we're talking about and we always talk about. So, yeah, that's him. So yeah, what is Wagme? Wagme is a reactivate library for Ethereum. Also exports vanilla J's actions, so you can use it with react or other frameworks like Vue svelte, anything like that. Makes it really easy to connect wallets and transactions, sign messages, basically, you know, the communication between your app, whether it's a web app, react native app, and the blockchain, it handles that for you.
00:22:50.122 - 00:23:32.098, Speaker D: And yeah, there's a lot of great ecosystem projects built on top of it. Privy, who just presented is Wagme VM compatible? And a bunch of other things as well. And then VM is a more recent project we worked on. So before wagging was built on ethers, and then because we wanted to like push developer experience a little bit and achieve a couple other things, we rewrote or wrote our own version. And yeah, that's VM it's low level interface. If you're building a backend with node js, or even if you just want to be close to the metal on your front end, you can use VM to handle basically everything that wag me can do in a different way. Yeah, and there's some things about it that we really care about.
00:23:32.098 - 00:24:12.370, Speaker D: Type inference, like, you know, when you're dealing with money and like sending transactions on chain, like making sure that when you're interacting with contracts, like stuff is as safe as possible. So you know, you pop in your API and now like event names, function names, like arguments, return types, you're all strongly typed so you won't deploy something to production where you accidentally pass in a big int instead of like a number. And now you've spent like, you know, an order of magnitude more something. So that's, yeah, that's what we're talking about here. Sort of like why you think these things are important. Developer experience. Like I said, like type difference, like auto completing your way to success as a hackathon.
00:24:12.370 - 00:25:11.226, Speaker D: Like if you want to be able to move really quickly, basically it's like, you know, you could do something like use the Wagner ClI that will go fetch and bring in all your APIs from a block explorer like Etherskin or like, you know, a local foundry project. And then now you have like, you know, sort of like this built in ready to go SDK where you can just sort of like autocomplete, like interacting with a contract signing, like, you know, 712 type data, all these great things, performance really just, you know, make sure that things are like extremely fast in your apps. And you know, we get to, we've like optimized that behind the scenes. Really all you have to worry about is like user experience and like making the interface really responsive. Stability, just like, you know, if you build on top of the wagon vm stack, everything's going to be super stable. You don't have to worry about like random things popping up that cost your users money or make your apps not work and people leave and then bundle. Size is really important if you're in browser.
00:25:11.226 - 00:26:05.860, Speaker D: If you use like, you know, other libraries that are a lot larger, it will take a long time for your app to load, which will keep your users waiting. These things load quickly and then people can get to using your apps right away and yeah, the stack. So this is, I think the really cool part about being in a hackathon is maybe you have to try some new tools that you haven't used before or you get to focus and build one thing that you're really excited about. And wag medium, like the whole ecosystem has you covered from just regular connect, wallet stuff, rainbow kit, Connectkit, web3 modal stuff is already out there. If you want to do something a little bit more advanced in pro, which is like in vogue right now, using something like privy to handle the whole onboarding experience account abstraction and stuff like that, there's some really good templates to get started, which I'll talk about in a sec. And then, yeah, there's some other ecosystem projects that are cool to check out. I think the wagging cli is very underrated.
00:26:05.860 - 00:26:36.192, Speaker D: Not a lot of people know about it. We probably need to do a better job letting people know. But it will handle like all your Abi management for you. You don't have to copy and paste from etherscan, you don't have to grab from local pals and publish your own NPM package and stuff like that. Just manage it all for you. And so, yeah, I guess what I would say to you is there's not a lot of time today, like it's one day hackathon. So I would just like pick an idea, something you're excited about, something that is like narrowly focused, and I would just hack on that and try to get it done.
00:26:36.192 - 00:27:08.060, Speaker D: I personally wouldn't worry about CSS styling and stuff. I just make it work. And then you can always polish it later. And yeah, I'll be around if anyone has any questions. Lastly here, if you want to get started really quickly, you can run this command. This will just lead you through a bunch of prompts for scaffolding a wagon project. And if you want to be really cool, what you'll do is use the alpha version of WAg, which I think is like very stable.
00:27:08.060 - 00:27:31.920, Speaker D: But if you want to like hack with some cool stuff, with like multiple accounts connected and stuff like that, and you want to Yolo it, like, I would totally check that out. And if you run into any issues, which you probably won't using Alpha, but if you run into any issues while you're here, I'd love to hear about them. So, yeah, that's it. And then these are the doc sites if you want to go there really quickly. So thanks for having me and good luck.
00:27:37.410 - 00:27:42.830, Speaker A: And our last livestock of the day will be from Yi from Axiom.
00:27:48.770 - 00:28:19.422, Speaker F: Hey, everyone. I know there's been a lot of talks and you guys want to get hacking, so this will be pretty quick. So I'm one of the co founders of acxiom. We allow you to use ZK superpowers in your smart contract. So just tell you about what we can let you do, what it's useful for, and a couple ideas we have that might be relevant to this ackbomb. So first of all, what is Acxiom? Acxiom lets you do two things in your smart contract that weren't possible before. First, it lets you use ZK to do computation off chain.
00:28:19.422 - 00:29:20.080, Speaker F: And second, it lets you access anything from the entire history of Ethereum in your smart contract without imposing any additional trust assumptions. So we prepared a JavaScript web repl to let you actually specify what you want to do using ZK in your contract. You can check it out at Repl Axiom xyz and this will actually export a client side ZK prover into your web app so you can allow your users to generate a zero knowledge proof. Secondly, the interface actually allows you to query the entire history of Ethereum fully on chain, so you can access things like transactions, receipts or historic balances for your users without imposing any trust merchants. And finally, we let you access all the outputs from this ZK stuff in a fully ZK proven way, but without any complications. All you need to do is to implement a smart contract, callback on your contract and you're good to go. There's no ZK verifier deployment, none of that stuff.
00:29:20.080 - 00:30:06.580, Speaker F: So what is this useful for? Most obvious thing is it gives you access to a much richer set of data on chain. So I mentioned earlier, you can access the transactions your users previously made. You can access states from other applications that maybe you don't know you're integrating with them. And it also allows you to access historic transactions from your app that maybe you didn't anticipate were going to be useful in the future. Finally, a last angle is that sometimes you might want to run an off chain keeper to perform some actions in your application. With axiom. You can actually delegate that to an external infrastructure provider without compromising any trust, because the results from axiom are actually proven in ZK.
00:30:06.580 - 00:31:09.780, Speaker F: Alright, so what can you actually do with this concretely? Well, we think that there's sort of two approaches. One thing is we can offer a set of primitives that you can plug into your application and use in your context. For example, you can mint achievement badges or reward your users based on their historic actions. Or you can gate access to your protocol based on account specific characteristics, for example, the age of the account or past holdings in the account, like whether they held your NFT or your friend tech key. A couple of ideas along these lines are history gated NFT mints, basically making the traits of your nfts dependent on the history of each user's accounts. Verifiable airdrops, allowing an issuer to maintain a private criterion for how much everyone gets but commits and prove that criterion on chain. Generating a social graph based on users on chain history and letting people manipulate that in a trustless way.
00:31:09.780 - 00:31:44.860, Speaker F: Our finally and ambitious idea is to allow frontech users to actually commit to splitting all the features they got among their keyholders. So I think this is possible using axiom. All right, that's it. So we have access to the web repl at Replacment XYZ and we deployed a preview version of our V two for this hackathon can check out our preview box in the second link. We also have a link to some example apps we built using it. I'll drop a link to these slides in our telegram chat after this. Thanks, guys.
00:31:49.640 - 00:32:23.828, Speaker A: Thank you, guys. So we're just about to get started into hacking. It'll be very casual. If you guys have problems with the Wi Fi, let us know and we'll try to triangulate. And then lastly, I just wanted to say thank you to Tony on our events team. He started three weeks ago. On the day that he started, we were like, hey, could we throw like a crazy big hackathon in New York in like a couple weeks? And he pulled all of this together.
00:32:23.828 - 00:32:33.592, Speaker A: So thank you, Tony sticks today and then we'll let you guys get to it.
00:32:33.736 - 00:32:38.168, Speaker G: Yeah. Thank you guys so much for coming. This is a great kickoff to my job.
00:32:38.224 - 00:32:40.340, Speaker F: So I appreciate you being here.
00:32:40.720 - 00:33:01.242, Speaker G: So just some housekeeping points. There's restrooms back there and then out by the lunch or the food as well. Lunch will be coming around 1230. So we'll make an announcement. You can go out and get it when it's here. If you're running low on power, need another cable, let us know and we'll bring it over to you then. Like she mentioned, if you're having problems with the Wifi caller, at me as well.
00:33:01.242 - 00:33:04.430, Speaker G: So I'll be around if you need anything. But otherwise, have a fun day.
00:33:04.890 - 00:33:06.522, Speaker B: And there's plugs on the ground.
00:33:06.666 - 00:33:10.074, Speaker G: There's also plugs on the ground. Yeah, if you surprise.
00:33:10.162 - 00:33:10.930, Speaker F: So yeah.
