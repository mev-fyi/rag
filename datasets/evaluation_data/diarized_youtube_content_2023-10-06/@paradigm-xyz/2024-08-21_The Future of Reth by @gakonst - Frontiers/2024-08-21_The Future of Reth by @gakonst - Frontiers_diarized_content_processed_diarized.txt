00:00:01.280 - 00:00:39.256, Speaker A: And now we're going to get into my talk, which is the future of Reth. And let's maybe talk about the story so far, which is, okay, we have Reth, which is a contributing, friendly implementation of Ethereum. So the text that you see on the screens doesn't exactly matter. Just take that. You see a GitHub repo called Reth with, you know, 300 ish contributors, which is the important takeaway from this. So we built Reth. We started building Reth almost two years ago, or in October 2022 was when we made some of our first commits with basically four core motivations.
00:00:39.256 - 00:01:28.234, Speaker A: A was the client diversity motivation, meaning that you want many different implementations of the Ethereum protocol for staging. And Reth is an ethereum node, it's an execution layer, which means that it's the one half of the Ethereum node, the other half is the consensus layer. We have some people from consensus clients in the crowd, so if you have a problem with your staker, go to support for them, not to us. Now, on the client diversity front, it's not just the client implementation. For the safety of the system, it's also important that you have a ton of people that have tried to learn how the system works. And when you do many re implementations, the thing that knowledge just gets dispersed across the ecosystem that's very valuable. So talent resilience means that basically, instead of onboarding like in months, it's very important that you're able to onboard on the client in weeks, if not days.
00:01:28.234 - 00:02:03.312, Speaker A: And this is why we're so anal about contributor friendliness, because that means that we can take and train a junior and, you know, we can just take a junior and put them on an ethereum node, which is kind of a head scratcher. You know, sometimes you would think that such a junior would never be able to do that, but we have converted people to believing that they can do it. And I think that's important. Client scalability. We just think that performance matters a lot. We don't talk about performance all the time because it's part of our process. But in this day, today, you're going to hear a lot about performance because we have some exciting results to share.
00:02:03.312 - 00:02:46.072, Speaker A: And code extensibility is probably the thing that I'm the most excited about because I'm tired of people forking nodes with our principal and then having to rebase that hundred. Getfork and Matt from our team afterwards give us a bit more on that. So all of these motivations, they got us the online of, okay, blazing fast modular contributor friendly. And contributor friendly is very important because a I think you want to be doing things with friends, not on your own. It's way better when you have a bunch of people doing things with you. It's also better for moving fast because we're able to leverage the collective power of the community to move really fast. We're actually able to hire the best people out of the code bases, which has been really impactful.
00:02:46.072 - 00:03:20.060, Speaker A: And also every bug is shallow in the eyes of 1000 eyes or more, which is a classic old Linux open source quote. There's many reasons on why it's contributor friendly. The issue tracker is pristine. The documentation is really good, it has a lot of tests, it has a lot of benchmarks, and most importantly, the people are there for you. So there's a chat room, there's a paradigm red chat room. We all have the foundry, the alloy, you know, we have a whole stack of chat rooms, and everybody on the team is trained to do support. Some people like it more, some people like it less.
00:03:20.060 - 00:03:51.878, Speaker A: But it's basically expected from everyone that you're in the chat rooms and you're willing to do communications with the customer, the developer and the community. Also, we have very strict rules around engagement. No ads, no job, no job listings. It's always very clear and technical and deep. And if somebody asks a newbie question, we're very welcoming to them, but also we're not afraid to tell them, hey, this is the wrong chat, you should go to there. Not our problem. So we started in 2022 and we released the client in 2023.
00:03:51.878 - 00:04:32.486, Speaker A: That was the alpha one release. That was a year and two months ago. So let's see how we've done since then. In 2024, Reth is adopted by 5% ish on Ethereum Mainnet. Granted this is not a lot, but given the client has been in production for only a few months, we think this is already very high and we hope that we can raise this even further in the coming year. Why do people do that? Well, because RET is really fast and it's really compact, so archive nodes really matter. And for an archive node to have clear integrity on what your data is and to have a lot of speed, you must be using rest.
00:04:32.486 - 00:05:19.650, Speaker A: Otherwise there is nothing that you can do with data analysis with it. And we use the power user as a feedback loop here. So syncing a ret node to date on good hardware, which is like bare metal hardware with NVMe drives, usually commercial Samsung drives, takes about 50 hours, which is huge. People used to think that an Ethereum node takes weeks to sync, whereas Reth does that in two days on Ethereum mainnet archive mode. The database is also basically almost ten x smaller than anything else on the Geth and nethermine end, and it's actually smaller than the Aragon. There is a big caveat here that Aragon did a recent release, at least an alpha release of the Aragon three project. So we're excited to further benchmark that and learn if there's any innovations that we could co adopt as well.
00:05:19.650 - 00:06:46.784, Speaker A: On the contributor friendliness, this is like a bit small, but on the contributor friendliness, the thing I want to highlight is, well, a mats like insane number of prs, but also just it's 500 pull requests, 200 closed issues, 50 contributors, one month, which is a lot. People don't do 500 contributions in their entire year, whereas this project is really actively contributed to, which means it moves fast. But it's also, it highlights that you need to have a very good testing process about it, because otherwise it's going to be breaking all the time. Okay, so this is how we got here, but like, where are we going? So I think the three things that matter the most are feedback loops, or, well, feedback loops matter the most, and the three feedback loops that we think of the rest development are the following. So it's scalability, stability, performance, extensibility for stability, which is the most pristine area for stability. We're Ethereum l one, so by being able to meet the bar of Ethereum L1, we know that the thing that we have is stable, because if people are putting stake that runs on the node, that gives us some sense that, okay, people trust this to be stable and it's not going to break under their legs on performance. Of course, Ethereum L1 is not a place for performance and open debate whether perform until one should or should not exist.
00:06:46.784 - 00:07:32.586, Speaker A: We believe in the L2 vision, and as a result, we're also developing L2 support for ref and we're dumbing out the core SDK that Matt will talk about in the next talk. But basically we're supporting op stack right now, and we're also seeing very exciting results there. Thirdly, we have extensibility, where again, with core SDK and with execution extensions, we're able to modify the node. So let me start going deeper into these, and then the talks will actually go really deep. Then our goal is that basically every piece of crypto infra uses rest for high performance stability and extensibility. And we hope that that's why we're calling it core SDK. We hope that Reth is like this core library that people use to build software and stability is for Ethereum Mainnet.
00:07:32.586 - 00:08:05.670, Speaker A: We released Reth 1.0 a few months ago. It required a long security testing process. We run an audit with Sigma prime, they allocated a lot of engineers on it and we're really thankful for them, but also for stability. It's not about bringing on ref 1.0, it's also about being vocal in the core development process. So we hope to contribute to the core development process for the stability of Ethereum with input on which EIP should go in the next hard forks, and to weigh in on that process in a productive way for performance.
00:08:05.670 - 00:09:01.540, Speaker A: We coined the term gigagas earlier in the year as a reasonable benchmark, something which doll aspire towards. And we'll hear talks about that throughout the day where a by supporting op stack we're able to get a L2 network that actually has support for fault proofs, that can support decentralized sequencing, that can execute the L2 roadmap. And on the other hand, we have the Gigas vision, which involves a lot of optimizations that we're planning to do on the client, of course all open source for the community benefit. And hopefully what we hope to do is that we can commoditize performance so we never need to talk about the marginal DP's or gas per second ever again. And we can go, you know, build some useful things on extensibility. Reth is not just a node, it's an SDK, so you can use or the specific packages that you want, and you can build a bunch of these things that you see on the right. People have been doing a lot of these things.
00:09:01.540 - 00:09:43.584, Speaker A: Again, I don't want to take time from other people's talks, so stay throughout the day to see what people are doing with it. Execution extensions are the ETL moment almost for ethereum nodes. It basically says that after every ethereum block, do something else. Now this is a very common pattern. You see it in mev bots, you see it in indexers, you see it in ZK rollups, you see it in everyone that uses the ETH subscribe method. But generally people lack performance in all of these, whereas execution extensions, they let you co locate off chain services on top of your node. And it's very exciting because you can build an indexer execution extension which shadow we'll talk about today.
00:09:43.584 - 00:10:29.980, Speaker A: You can build a ZK roll up execution extension, which I guess it's a mix of the Clabi and UmA talk later today and you can also build an meve execs that gives you extra information and tightly integrates your math bot in the node. We have a blog post on that and Alexi from our team will talk about it soon. So, all right, these are all the raw ingredients, but surely we are not building just libraries. There is some first party thing here. So we announced earlier in the year res Alphanet, and the idea behind Restalphanet is basically owning our fate and having a clear feedback loop on all of these things that we want to ship. I think if you outsource building your core parts of your ecosystem to others, you're going to fail miserably. So it's very important that we're able to develop a first party application here.
00:10:29.980 - 00:11:01.562, Speaker A: So we thought, all right, since we're building a chain SDK that hopes to be better than Cosmos or substrate SDK, well, what could we do? Let's build a roll up. But surely we're not ready for doing anything on Mainnet. So all right, let's build a testnet roll up. And what should the testnet roll up do? The things that we're the best at. So it should a do high performance. And we hope that Alphanet is the first roll up that breaks through the Gigas barrier. And two, we want to facilitate experimentation on the node side with custom VIP's, which I'll talk about in one moment.
00:11:01.562 - 00:11:44.380, Speaker A: Execution extension. We want to roll out on rethalphanet, and also we want to just accelerate the L2 roadmap. So we hope that Alphanet is also like a good carrot to go after the stage two roadmap, which involves multiple for proofs, ZK proofs on the roll up. The initial release goals of Alphanet is to basically be prag the next Ethereum hard fork. But there's a L2, plus the SeC P 256 r1 curve, which is the curve that you use in the passkey signers. So we wanted to have 1 second block time. We actually have merged some exciting performance improvements in RET recently, which allow us to achieve that.
00:11:44.380 - 00:12:20.732, Speaker A: And we want to launch it initially with 30 mega gas. But hopefully we can launch it, we can ramp it up as we roll out optimization to one gigas. It's going to be Prague compatible, which means four eips that Oliver is going to talk about us about later. And most importantly, it's integrated with the entire stack. So foundry alloy and VM all support all of these eips. So right now, with our tools, you can deploy Eofden code and test it on an Alphanet version running locally. You can deploy a BLS signature verification code drive that does aggregate BLS signature verification, and you can do that.
00:12:20.732 - 00:13:04.750, Speaker A: We'll share later in the day some links on how you can try this out. You can also test out 7702, which is the most exciting thing with regards to account obstruction. And yeah, like, these are all integrated in the stack, which really showcases the power of the full stack deployment. Finally, we want to launch Alphanet. Alphanet stands for Alpha is in edge, but also Alpha is in Alpha software, because we're really good at just like doing frequent releases. So what we really want to do here is like, see if we can do something which frequently restarts. So can we do a devnet that basically every six week is in a tight sprint and launches a bunch of features from a list of features that we brainstormed.
00:13:04.750 - 00:13:34.244, Speaker A: So if people have ideas, please come to us. We're happy to deploy them. Some ideas that I want to highlight are one ZK passport for doing KYC without like any other hardware fhe precompiles for private, for private tokens. We really like the JIT revmc work that we did early in the year, and we want to deploy it. And finally, we just care a lot about the devx and Ux around payments. So anything that makes that better, it's like a core goal of ours. So I think that's it.
00:13:34.244 - 00:14:16.770, Speaker A: We have a lot to do today. Let's build, let's push the ethereum frontier forward, and we'll leave it up to Matt and Dan from our team for the next talk and have maybe a couple minutes for Q and A. Thank you. Okay, cool. Then thank you all. And then now we'll get on. Basically everyone from the team will start doing talks on each of the things that we talked about.
00:14:16.770 - 00:14:37.880, Speaker A: Um, good morning.
