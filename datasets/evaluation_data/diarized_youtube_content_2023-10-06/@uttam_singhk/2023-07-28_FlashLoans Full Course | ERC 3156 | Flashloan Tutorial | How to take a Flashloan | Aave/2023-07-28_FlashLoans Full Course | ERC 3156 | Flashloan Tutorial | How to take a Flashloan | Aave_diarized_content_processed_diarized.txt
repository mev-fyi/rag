00:00:00.250 - 00:00:36.818, Speaker A: Hey everyone, I am Utam Singh and I am back with yet another crash course. And this time the crash course is on flash loans. So flash loans have been in the market for a long time in the d five space and the web3 space for a long time. But I was going through YouTube and finding a good, you know, tutorial and videos, but I couldn't find one explaining in depth how flash loans work. So I, you know, I thought, why not create a crash course, a short crash course on this? So this is going to be a very short crash course on flash loans. Maybe less than an hour, but it will involve a lot of things. So flash loans is basically bigger, better and faster version of traditional loans.
00:00:36.818 - 00:01:04.202, Speaker A: So now let's discuss what is the agenda for this crash course without wasting any time. So the agenda for this crash course is what are flash loans? First of all, we will see in simple terms what flash loans are. So if you're a beginner, if you don't know what flash loans are, we will discuss that in few slides. In two slides. If you already know, you can skip that pass. Then we will discuss what is the purpose of flash loans. Right? So what you can do with this flash loans.
00:01:04.202 - 00:01:49.050, Speaker A: Once you borrow this flash loans, what are the things that you can do with flash loans? Right. We will discuss that and then we will discuss how does the flash loans actually works in depth with good diagrams under the hood. What's going on? How does smart contracts interact? What is a user, you see, what are the things that the platforms, the lending platform, like Ave, for example, example you are getting flash loans from. So we will see that in depth, right? And then after that we will have a tutorial for flash loans as well. Yes. So this is going to be an interesting crash course where we will be doing a hands on tutorial, how to get flash loans, how to learn about it. We will go through documentations of these lending protocols and we will build a flash loan for ourselves in this tutorial.
00:01:49.050 - 00:02:10.338, Speaker A: But this is going to be on testnet, obviously not on main net. It costs money on Mainnet. So we will be doing it on testnet. But you can also perform it on main net, but don't use the same code. I will not suggest you to do that. Cool. Now next we will discuss flash load attacks.
00:02:10.338 - 00:02:35.134, Speaker A: Now, flash load attacks is also one of the things that happens. We will discuss what flash loan attacks are and we will also discuss case study. There have been a lot of attacks about on flash loans recently. I guess one month before also there was an attack, right? So it's pretty common. And people do oracle manipulation, et cetera, things with flash loans. So we will discuss that. We will discuss a few case studies as well, if possible.
00:02:35.134 - 00:03:09.462, Speaker A: And then after that we will discuss bonus. So there will be a bonus stuff as well. Like last time in the last crash course on account obstruction, there was CEO and your serious CEO and co founder of stack up was there in the account obstruction crash course. And that was people like that bonus podcast. If you haven't watched the account obstruction crash course, go and watch that account obstruction crash course and then come back. This time the bonus is not going to be a podcast. It's going to be some extra stuff I'm not going to discuss now.
00:03:09.462 - 00:03:37.426, Speaker A: So stay tuned. Watch the full crash course and that and move forward to the bonus. But yeah, let's move forward to starting our crash course. But before that, subscribe to the channel right now if you are new, if you haven't watched any of the crash course yet, go and watch other crash courses as well. Subscribe like the video comment down. How was your experience? Please follow me on Twitter and LinkedIn as well. Reach out to me if you have any doubt and ping me on Twitter, LinkedIn or just tweet and let me know what your feedback is.
00:03:37.426 - 00:04:11.062, Speaker A: If you like this content or not, if you have any criticism, please let me know. If you don't like my accent or anything else, just let me know. Cool. So let's start our crash course now. What is flash loan? Right? In simple terms. So flash loans are new type of uncollectalized loan without borrowing limits, in which a user borrows funds and returns them in the same transaction. So this is like a loan, right? Traditional loans.
00:04:11.062 - 00:05:11.610, Speaker A: What happens is basically you need intermediaries. Typically when you take any kind of normal loan, you are required to go through another individual or a bank or anything other people to receive that loan. However, with flash loans, that is not the case, right? Defi users can benefit with flash loans since they allow for immediate borrowing. You can just immediately borrow the money without any need of any collateral. But as long as the money and the liquidity is returned in the same transaction, returned to the pool in one transaction block, that is the only condition. And as long as that is fulfilled, you can get a loan, uncollectualized loan, without any borrowing limits as well. Right? And if the users can't repay the loan before the transaction is completed, the smart contract cancels the transaction and returns the money to the lender.
00:05:11.610 - 00:05:37.486, Speaker A: So this is how smart contracts work. In simple terms, that is the definition of smart contract. Flash loans, basically. Sorry. Now let's see a good diagram that will help you clear your mind if you still don't understand what flash loan is. Right? So this is a good diagram. Right? So flash loans makes use of smart contract as programs.
00:05:37.486 - 00:06:38.630, Speaker A: Basically, smart contracts are programs that executes on the blockchain given a certain condition. So when the present criteria is satisfied, these smart contracts execute and recorded on the blockchain. And in this case, in the flash loan case, we leverage these smart contracts. In this case, if the funds will not be given to the borrower back, unless that condition to the lender back funds will not be given to the lender back, this condition will be triggered and your money will. And the money that you have taken from the lender, he will get back and the transaction will fail as it is. Right? So before the transaction ends, if you repay the loan to the lender, then the transaction is only successful. And if you don't, then the transaction fails, right? So in the diagram, what you can see is that basically here, as a borrower, maybe you want some loan, you just want a flash loan.
00:06:38.630 - 00:07:02.590, Speaker A: So you request flash loan from the lender. It lends. Basically, if you want $1 million, for example, you wants $1 million flash loan, you get that and then you can take that loan to do whatever you want, right? So for an instance. For an instance, you will be a millionaire. Yes. Okay. So for an instance, you will be a billionaire.
00:07:02.590 - 00:07:41.502, Speaker A: You take this loan, the borrower will take this loan and do whatever he wants to do with this loan. Now, you might be wondering if you don't know what you can do with this. So there are things that you can do to make profit with this money, right? So that we will discuss that in the few slides. But yeah, for now, say it's something, whatever you're doing, let's say something. You do something, something with that money that you have borrowed the $1 million, you make profit, right? So you make money using that. You make profit and then borrower will get that money. You will get that money back, right? And then what you will do is basically the borrower will repay the $1 million loan with the interest.
00:07:41.502 - 00:08:43.278, Speaker A: There's some interest that is always taken by the lender, right? This is how they make profit with this flash loans. So there is no collateralization, collateral required, but there is some fees, interest, which is very significant, which is very low, right. That you have to pay. So if you pay this, the lender gets it and the flash loan is successful. Right? Now, if the borrower does not pay back the loan before the end of the transaction, the transaction is undone and the lender receives the money that was lent to the borrower. Right? Now, for example, there is a borrower, the borrower, you have got a money of $1 million, like for example. But if you are not able to pay that money, all the transaction, all these transactions that you have done here as well, that will be undone, right? And whatever the borrower did with money, whatever have you done here with something, maybe you made a profit or you made a loss.
00:08:43.278 - 00:10:33.218, Speaker A: But if you haven't paid back the loan, the borrower, all this transaction will be undone and the lender gets back his money, right? So lender is automatically getting back his money, right? So there is like one thing to always remember is that lender is at zero risk, right? Because there are smart contracts that you are using, right? Smart contracts does whatever you want them to do, right? So this reversal of the transaction acts as zero risk for lender, right? And it is worth noticing also that the fees for flash loans are relatively low as compared to other loans, traditional loans, like maybe for example zero point on ave or whatever, you might go and check on the ave platform website, but it's very, relatively low and due to smart contract reversal, as I said, lender is at zero risk for giving this flash loan, right? So this is like the beauty, all the lending protocol, like Aave, example, uniswap, they have zero risk tendency because of the smart contracts reversal component, because they are very sure that they are getting their money back. Whether the person is making profit or whatever they're doing, the lender has zero risk, they will get their money back, right? So this is an interesting thing. Hope you got it. If you haven't still got it, please go and repeat these two slides. Now let's move forward to what are the benefits of flash loans? So as I said, this is going to be a very small crash course on flash loans. And I'm also moving a little fast as well because I want to complete it in less than an hour. But if you should think I'm going very fast or slow, please feel free to switch the speed on the YouTube.
00:10:33.218 - 00:11:18.770, Speaker A: There is an option so you can do that. Cool. Now, what are the benefits of flash loans, right? So flash loans have many benefits. So in a small discussion, like they have speed, they are speed and efficient. So defi flash loans, as I had, gets automatically executed using these smart contracts. And you don't need any intermediates rate like banks or any other third parties and you don't have to submit any documentation, example, whatever these banks requires a lot of these things be bankless. This makes the lending process, flash loans very faster, cheaper and more efficient than traditional loans, basically, right? Other thing is flexibility.
00:11:18.770 - 00:12:04.126, Speaker A: Yes. As I said, borrowers can use these loan amount and various transactions such as arbitrage, liquidity, provision, yield, farming, et cetera, et cetera, right? If you're wondering what are these, don't worry, we will discuss about this in our next slides just after this. Right? So don't worry about this. But yeah, these are flexible. Other thing is no collateral required. So here, as I said, that flash loans requires no collateral. You don't have to put any collateral if you want to get flash loans like this reduces the barrier to entry, entry of people, new people who don't have even money, right? So this is why I like DeFi, because it's just not making people rich more richer.
00:12:04.126 - 00:13:01.314, Speaker A: Even a normal person, not rich, can take flesh loans and make profit with that, right? So DeFi helps in making money with, helps making money to everyone, not just for the richer. If you are amid a poor person, you can also come and make money here if you understand the Defi world. Very good right? Now that the thing is cost effectiveness. Again, flash loans have very lower fees as compared to traditional loans and there's no intermediates involved. So nobody's taking the cut or whatever, right? So that's why flash loans are very cost effective as well, right? So these are few benefits of flash loans. If you're interested more in learning about flash loans and basic concepts, then I will provide you a link to flash loans. You can learn about benefits and other things about flash loans, the basic stuff, right? So now let's move forward to understand what is the purpose of flash loans.
00:13:01.314 - 00:13:41.298, Speaker A: Right? Now. You have taken the flash loan, you know how to take a flash loans and whatever, but you're thinking like, what will I do of all this money just for a single second, right? Are they even worth it? Like I want to be a millionaire, but I want to be for a long time. I want the money to stay. I don't want it to be there for a few seconds and then gone. Right? Basically your right, caution, right? Valid caution. Now, what you can do with this flash loan, how you can make things, how you can make profit, et cetera, et cetera, right? Now. So there are three purposes that I am discussing in this crash course, but there are few other purposes that people are using in the DFI space.
00:13:41.298 - 00:14:04.780, Speaker A: Well, flash loans, you're using flash loans for different purposes. But these are the three basic categories, the main categories that people use flash loans for, right? And I found it on a research. The first one is arbitrage opportunity. The second one is collateral swap. The third one is self liquidation. Now, let's discuss each one of them in detail. So, first of all, arbitrage opportunity.
00:14:04.780 - 00:15:08.894, Speaker A: So arbitrage can be defined basically as the process of buying any asset from one market or exchange to another in order to book any profit. So let's say, for example, if bitcoin is being traded at different prices on two different exchanges, like coinbase and binance, right? So if they are trading at different prices on these two exchanges, then you can make, the trader can book a profit by buying BTC at the cheaper price from one exchange and moving funds to another exchange, and then selling there at a higher price. So now you got this, right. There is a different minimal difference between the price. Then you can make profit by buying here, moving it here, and then selling here, right? This is what, in simple terms, arbitrage opportunity is. So now let's take another example. Like here is an example given on decentralized change.
00:15:08.894 - 00:15:40.262, Speaker A: You can also do there as well. Basically, there is a combo token, I don't know if that exists or not. There is a combo token that is selling for zero point $15 on quickswap, right? Quicksop is a decentral exchange and zero point 20 on sushi swap. So what you can do is you can purchase the token on the quickswap because it is cheaper there, and then you can move the token to Sushiswap, and you can sell it on Sushiswap. Right. You don't move that, but it's in your wallet. That's the case for centralized exchange.
00:15:40.262 - 00:16:21.558, Speaker A: Right? So you buy it on quickswap and then you sell it on sushiswap. This is how you are making profit. Right? So this is basically a potential arbitrage opportunity, right? So this is how the flash loan is being used. Now you must be talking how flash loans are using it, right? So one thing here to notice is that. One thing here to notice is that to make a profit, if you want to make good profit, you need to take and buy and sell large amount of assets. You see, the difference in the assets on different exchanges is very, very less. Like zero point 15 and zero point 20.
00:16:21.558 - 00:17:33.310, Speaker A: Just like $0.5. Sometimes it's even less than that, right? So if you want to make profit, then you have to sell a lot of buy and sell a lot of assets. Like a lot of amount of asset, right? If you want to make a good amount, good profit, maybe a million dollars, right? You might buy million dollar, this combo token and sell million dollar on sushi swap, right? So this is how you're making profit. So this is worth noticing. And this is why I'm saying this. If you want to take this arbitrage opportunity benefit of this arbitrage opportunity, then you have to buy and sell a large amount of assets, right? So this is where the flash loans comes in. You take loans from flash loans via the flash loans, maybe a million dollar, as we have discussed, you buy it from an exchange, you sell it from different exchange, you make profit and then return the flash loan, right? So if you want million dollars to make profits, right? Because if you want to make good profits, you need more money, right? Flash loan is helping you to get that money and then use it for arbitrage and then make profit and then pay back the flash loan, right? Simple as that.
00:17:33.310 - 00:18:12.906, Speaker A: Cool. So this is where flash loan is coming, and this is how flash loan is being used in arbitrage opportunity. The next thing, the next is collateral swap. So another use case of flash loan is collateralized collateral swapping. So, flash loans allow users to swap collateral or debt in a single block of transaction. Now, if you had borrowed dai using ETH collateral, first of all, if you don't know how dai token works like Makerdao works, then please watch my last fresh course on stablecoin. I've discussed the working of Dai and Makerdao contract Makerdao working in that course.
00:18:12.906 - 00:18:41.390, Speaker A: So go and watch that and you can escape directly to that part. And I'm telling you, it will be very helpful for you for this course as well, because there are a few example again in the future that talks about that. So please go and just watch it. It will be helpful if you know. Then let's continue. Suppose for example, if you had borrowed dai using EtH collateral, you have to put a collateral to borrow dai stablecoin. Now what you can do is you can easily swap that collateral from EtH to betrayal.
00:18:41.390 - 00:19:31.630, Speaker A: You have already put ETH as a collateral over there, but using flash node, you can change that collateral from ETH to any other token. For example, let's say bet here, right? So consider an example how this will usually works, right? So you take a dai flash loan, you need dai for a collateral swapping. So you take dai flash loan from platform, from lending platform, example away, et cetera, et cetera. You take a die flash loan, you close the maker dow position by repaying the dai. So there will be a CDP opened. So you close that position by repaying the dai and unlocking the eth collateral. So once you close that position, your collector, the eth that will be unlocked.
00:19:31.630 - 00:20:10.282, Speaker A: Now you can do is you can sell that eth for bet on uniswap or whatever token you want to do it. In this case, bet you can swap it on uniswap or any other decks. Right? Now what you can do is you can open the bet collateral makerdaw position again and again, borrow the Dai itself, right? And close the flash loan by repaying the dai. That's it. Whatever die you have bought, borrowed by opening the bet collateral CDP, you can pay that flash loan back. With that. In simple terms, what you have done is you basically collateral swap to your own collector.
00:20:10.282 - 00:20:53.002, Speaker A: Maybe you had more bat and maybe you wanted to get bat as a collector and not eat. So you have done that in a simple way. There is much of the things involved here, it's just in a single transaction and everything has happened with the use of flash load, right? So there are benefits as well, like with this change exposure to the market. If there is any change, higher apy for other tokens, right? And then better collateral ratio. There is a collateral ratio change, right? So if there are any benefits, these are the benefits that one can take with collateral swap. Cool. Now let's move forward to another purpose.
00:20:53.002 - 00:21:37.286, Speaker A: What is that? Self liquidation. What is self liquidation? So self liquidation is another important use case of flash loans that could help traders to avoid their position from being liquidated. So how does that work? School again talking about dai and haven't. If you don't know, please watch and come back again. If you have borrowed dai using ETH as a collateral again from Makerdao or defi lending protocol. Now if the price of ETH keeps falling downwards, it will raise the fear of your position gets liquidated. Why? Because it is overcollectalized.
00:21:37.286 - 00:23:05.480, Speaker A: Stuff like when you borrow die basically from Makerda, you have to overcollectorize, you have to provide more ETH, more than required, more than what you are minting die off right now. Also, what if the ETH price is getting down, but you have already borrowed money that is more than the price of the ether, right? So what if your price of the ETH goes down and you might get liquidated? Like this is basically a fear that if the price of Ethereum goes down and your position, your CDP that you've opened it might get liquidated, right? So what will you do and how flash loan can help in that case? So user can follow these steps using flash loans to get avoiding liquidated. What you can do is you can take a flash loan Dai flash loan from Aave or any other protocol, close your collateralized depth position using Dai, right. Your CDP that opened using die, close it, then unlock your eth. So as soon as you close that CDP, your ETH will be unlocked and you can swap it with die simple. And then you will close the flash loan position with the die you got and keep the rest of the Ethereum that you have, rest of the eth that you get. Right.
00:23:05.480 - 00:23:44.900, Speaker A: So this is how you can self liquidate yourself. Self liquidation. People use it, all the major whales, all the people, defi traders basically use flash loans for self liquidation. And yeah, this is one of the purpose as well that people have been using for. But as I said, there are other purposes as well that people use flash loan as well. There are other use cases as well. So if you are interested in exploring that, I will provide you a link to a few blocks that you can explore and understand more about basic flash loans and what are the purposes needs.
00:23:44.900 - 00:24:10.922, Speaker A: Right. And now if you want to go in depth of learning this flash loan of under the hood working and tutorial how you can perform that, then please continue watching this crash school. Now let's move forward to flash loan working. Right. So in this slide, I will explain the back end of whatever under the hood. What is going on on the flash loan. Cool.
00:24:10.922 - 00:24:41.702, Speaker A: So there are three components. First of all that you need to understand. First is you, you is someone, a borrower that wants flash loans. So in this case, if you want a flash loan, then you are the person here, right? The borrower. The other component is this contract a, and the third component is this contract b. So this contract b is basically a smart contract of the lending platform. Basically the flash loan contract of the platform that you're using.
00:24:41.702 - 00:25:14.222, Speaker A: For example, Aave in this tutorial, also you'll be using, you know, this is the flash loan contract of AavE that you will have to interact with to get the flash loan. This is basically the flash loan contract of AAvE. So basically Ave has said that, hey, if you want to get flash loan, please interact with this contract. So there is an address where it is deployed. So it's asking everyone, if you go to their documentation, which we will go through, they're asking that, hey, this is the contract. So if you want to flash loan, initiate talk to this smart contract. Cool.
00:25:14.222 - 00:26:05.130, Speaker A: And now this is the smart contract. Now what is this smart contract? So this is a smart contract that you will have to write. This is basically a logic that you will write, right? To get the flash loan from this you are not directly, if you are getting an EOA, basically if you're going to Metamask, you have an externally owned account, right? So you're not directly contacting with this smart contract. You have, you're building another smart contract, you're writing the logic there and the callback function logic. And then this callback function logic is interacting with the flash loan contract, right? So this is like the middle person in between the flash loan and you. Flash loan contract and you, right? And this is basically required, this is one of the thing that is required on the Ave documentation that you have to make this smart contracts and build this logic. Okay, cool.
00:26:05.130 - 00:26:43.722, Speaker A: Now let's move forward to the working. Now you understand there are three components here. Cool. Now what is the first step? So as a user or as an EOA account, what you will do is basically you will initiate the flash loan, cool. So initiating a flash loans means you will make a call to this smart contract, this contract which you have built, right? Cool. So as an UA, you have external account, you are making a call to this contract that you have built that contains the logic. Now what that will do is basically that contract will request a flash loan from this contract.
00:26:43.722 - 00:27:52.514, Speaker A: So this is the contract of the platform of Ave. This contract will then ask for flash loan from the contract b, right? So hey, this guy is asking for this much flash loan and the request will get through the contract b. Then contract b, the lending platform, the ave flash loan contract, what it will do is it will basically provide, it will send the flash loan money to contract a, this contract a via the callback function. Don't worry about callback function, we'll discuss that. But yeah, in the simple terms, this contract B will send flash loan to this contract, right? So now the money is in this contract itself. You got the money, you don't got it in an EOA address, but you got it here in this smart contract which what you have built, where your logic is written, contract a, right? So now you have the money. Now what's next you can do is basically you can do whatever you want, as you said, like R, if you want to perform arbitrage, right? You can perform that arbitrage and also you will write the logic of that arbitrage in this contract itself, right? So you will write the logic, it will perform that arbitrage opportunity.
00:27:52.514 - 00:28:16.410, Speaker A: Then once that is done. Maybe there is a profit. Maybe there is no profit. Now, what it will do is basically it will send funds plus fees back to this contract itself. So here is itself, and the smart contracts are talking themselves. You're not involved, they are just talking themselves, getting the flash loan and then doing the logic, and then again paying back to the contract fee itself. That's it.
00:28:16.410 - 00:28:40.002, Speaker A: You have performed the arbitrage here only. And you will send the funds, whatever you have borrowed, plus the fee that is required, back to the contract, this flash loan, smart contract. Right? And then if there is any extra profit left, your contract will send this profit back to the user, back to the caller. Right. If there is any profit. So this is how now you get all the profit money. Okay, cool.
00:28:40.002 - 00:29:13.710, Speaker A: And this contract will do whatever it tends to do, basically, whatever logic you asked this contract to do. Also, if the contract we checks, if the reserves matches with some criteria, they might have some criteria after you return the fund, maybe the fee is not proper or whatever. If there is anything that goes wrong, what it will do is the transaction will get reverted. And whatever was done here, it will get reverted. And you will not get this as well. If even if you gain the profit, you will not get that, all this will be undone. Right.
00:29:13.710 - 00:29:28.082, Speaker A: And your transaction will be reverted. Right. So as I said before as well, this contract, like Ave, is on zero risk. Why? Because if something goes wrong, your transaction will be reverted and they will get their money. So they have no risk. Right. Cool.
00:29:28.082 - 00:30:08.078, Speaker A: But you will have to pay fees and you will have to, but it's benefiting both of the parties right here. So cool. This is how smart contracts works. On the back end side, this is a simple logic. On the smart contract side, what is happening under the hood? In simple terms, there is also one of the complex diagram which uses two or three smart contracts under the hood. But this is like a simple version of how flash loan contracts work and under the hood, how it is working. And I wanted you to get a no hook of it how this works.
00:30:08.078 - 00:30:34.726, Speaker A: But again, if you are again, not familiar or not comfortable right now, if you didn't understood how it works, we will code a tutorial ourselves. So if you are a coder, then let's move forward. If you're not a coder, then you might want to skip that part. But yeah, if you are the coder, then if you're not even a coder, if you're interested to learn about it, please go ahead. It's beginner friendly coding tutorial. Please learn. Right.
00:30:34.726 - 00:31:06.734, Speaker A: So we will build our this smart contracts itself. So what is required? We will also interact with this smart contract on the Ave. So we will go through Aave docs and we will see how it is instructing us to build this smart contract and interact with this smart contract, like flesh loan contract of AAve. We will build this contract logic. We will perform arbitrage and we will do it on testnet. We will do it on testnet. And I will not suggest, because basically mainnet costs money and this is basically a learning tutorial.
00:31:06.734 - 00:31:43.094, Speaker A: So I will not suggest you to use this code, no guarantees right here. But we will also do arbitrage. We will get an exchange and then we will do arbitrage as well. Cool. And I will show you on ether scan how this flash loans looks like. So let's move forward to coding tutorial and let's see how this works. So let's start with our coding part, right? So I'm on Ave's documentation like for flash loans, right? So I am on the flash loan documentation.
00:31:43.094 - 00:32:50.306, Speaker A: I will provide you the link to this documentation in the description. So you can just click once and you can be in this documentation of flash loan, of AAvE in this particular tutorial. What we will do is we will implement flash loan for AAvE, right? And also there will be like two kind of flash loans. One will be like simple example where we will just take a flash loan, we will not do anything profitable or anything other than flash loan like arbitrage or self liquidation, anything else. We will just take a simple flash loan, we will return it in a simple transaction just to show you guys how flash loan looks like in real life and on ether scan, right? We will do it on testnet of Ethereum. That is so polia, right? So this is going to be an implementation of that. As I said, I don't want this video to be very long, right? So I am not going to code alongside, but this code will be available on GitHub, right? So if you go there, let me just go.
00:32:50.306 - 00:33:12.522, Speaker A: Yeah, so this is like the flash low on avid tutor. I will provide the link to this GitHub repo and I will also update the readme file. So if anybody wants to follow it, they can follow it. They will have to install packages. This is exchange address. I will tell you what is that. So all the code will be there itself on the GitHub, my repo, I will provide the link to that.
00:33:12.522 - 00:33:52.594, Speaker A: So it will be there. So you can just take it from there as we will not be implementing in this particular tutorial, because if we implement it, it would go like 1 hour long just coding tutorial. And this course will go like three of us, which I don't really want. I want to keep it as short as possible. Okay? So starting through this documentation, right? So first of all, it will give overview of what is flash loan. We already know what are flash loans, right? So ave v three offers two options for flash loans, right? This is important. One is the flash loan that allows borrowers to access liquidity of multiple reserves in a single flash loan transaction.
00:33:52.594 - 00:34:49.734, Speaker A: The other one is flash loan simple that allows borrowers to access liquidity for single reserve. So in this particular tutorial, we will do flash loan simple and which will just allow access to only one reserve for this transaction. Liquidity of single reserve for the transaction. Right? So we will do flash loan simple for this particular tutorial. But you can also explore and you can also do flash loan as well. And you can access liquidity of multiple reserves, right? So what the execution flows look like in this, your contract called the pool contract requesting a flash loan of certain amount, right? So your contract, which we will be implementing it, will call the pool contract requesting a flash loan of certain amount using flash loan simple and flash loan or whatever you're using. Flash loan or flash loan simple, right? And also before moving ahead, like as this says, this is aimed to be for developers.
00:34:49.734 - 00:35:16.802, Speaker A: So you have to have a good understanding, maybe a basic understanding of solidity and ethereum and EVM. That would be more than enough for you. Still, if you want, you can watch my EVM crash course. So it will give you a good overview of EVM for solidity. You can watch one of the Patrick's colon crash course for solidity. So that will be helpful for you. And once you have that, you can implement flash loans, right? Cool.
00:35:16.802 - 00:36:03.930, Speaker A: So as I said, this first method is to call the pool contract, and then the second one is the pool contract. Transfer the request of the reserves to your contract, right? So you will have to implement this execute operation as well, which we will do as well. And after that, after you perform the flash loan, your code being finished, you approve flash loans for the flash loan amount plus fee. So you will have to return the flash loan amount itself plus the fee that will be there. So it will be like if we do it like zero point something, 0%, right? You can check it on documentation, it would be there sometime at the present moment, what is the fee for the flash loan? Okay, cool. And all this will be happening in one transaction. Hence in a single ethereum block.
00:36:03.930 - 00:36:31.626, Speaker A: And there are then applications of flash loan which you have already discussed like arbitrage, et cetera, et cetera. Cool. So this is what they're saying. And now step by step as well, saying like your contract that receives the flash loan amount must conform to flash loan receiver interface. So this is like the interface that we have to implement, right. This is the influence of flash loan, simpler. So we will have to implement that and we will do it in our code base.
00:36:31.626 - 00:37:08.846, Speaker A: Don't worry about this. And then second will be calling the flash loan or simple flash loans. We will use remix for calling the flash loan function, right. And after that completing the flash loan, you will have to return the money after whatever the fee along with the particular loan that you have taken. Cool. So this is the documentation of Ave which you can also follow. And also there is one more good website that I want to, good page that I want you guys to be aware of.
00:37:08.846 - 00:37:35.130, Speaker A: This is the ave v three testnet addresses. So these addresses are going to be very important for us. So whenever you are implementing flash nodes, right, you have to provide addresses, right. And this address in the code itself, you have to provide addresses. So this is like the main one for different networks from Sepolia, Goreli, Arbitrum. This is for Testnet. Right? So we are doing it on Sepolia.
00:37:35.130 - 00:38:01.400, Speaker A: Sepolia is a new testnet of Ethereum. Cool. So this is all the addresses and you will have to copy and paste this as well. And this is also the addresses of different token, USDC link and wrapped bitcoin, et cetera, et cetera. And one more thing is that there is ave faucet as well. So if you need faucets, if you need testnet tokens, then you have to visit ave faucet. That will help you.
00:38:01.400 - 00:38:29.710, Speaker A: I was literally worried. It took a lot of time for me to get testnet tokens, basically USDC on my sepolia testnet. But you go to aave faucet and it will help you to do that very quickly. Cool. Now what we will do is we will go through our vs code. So in this particular folder, let me just unfold everything and you will be able to see it. Okay, cool.
00:38:29.710 - 00:39:01.946, Speaker A: So this is the particular folder and this is the same as the GitHub link that I provided. Okay, so let me just give you an overview of this particular folder and this particular implementation of flash clone. Right. So we are using harded as of now for this tutorial. But you can use truffle, you can use foundry, whatever you want to use cool for the contract one. So there are two folder one is exchange that you don't need to worry about. We will talk about that at later part.
00:39:01.946 - 00:39:38.262, Speaker A: And the other one is flash loan. So what we are going to do is basically there is flash loan simple and then flash loan arbitrage. So what's the difference between these two is that in the flash loan we will just take a simple flash loan and we will just return that flash loan in one simple transaction. And in the flash loan arbitrage one what we will do is we will take a flash loan, we will perform arbitrage and we will make profit from that. Then we will return the loan with the fees, right? But in the simple one we will just take a flash loan. Cool. And once this is done we will going to implement this as well.
00:39:38.262 - 00:40:03.594, Speaker A: Cool. So on this flash loan one let me go through the contract itself. But before that just please create a. Env file. I hope you have basic understanding of solidity smart contracts. Then only you will be able to do it. So for that what you have to do is you have to create a DNv file where you will provide your private key that you will find it in your Metamask.
00:40:03.594 - 00:40:37.778, Speaker A: Please google it how to find your private key and then your infra endpoint. So go to any other RPC endpoints and RPC endpoints infrastructure provider ask for APIs for any endpoint, maybe infra or whatever you want to use. You want to use alchemy. So alchemy endpoint for sepolia testnet. So please provide the link in this env file, right? So you can perform this simple tutorial. Cool. Please do that and save it as env file.
00:40:37.778 - 00:41:14.420, Speaker A: This is just I'm saying you as an example, but I'm going to delete it for now. But for you please use a env file and put the same things as I've shown in the env example. Cool. So in this there are three inputs that we have done. One is the flash loan receiver base. So as our ave documentation told us that you will have to implement this. So this is the flash loan receiver base file that we are implementing, right? So this is like the simple file and then this is also the receiver as well.
00:41:14.420 - 00:41:32.922, Speaker A: So this is the interface of the flash throne simple receiver. So there is like function execute operation. It was same in the documentation it was stating. So we are doing exactly as same written in the documentation. It's not something a rocket science. We are just following the documentation. You can do it on your own.
00:41:32.922 - 00:42:02.286, Speaker A: Cool. So execute operation function, right? And then it consists of three things. For us it is totally fine, but for us we will be only using three. So asset is the address of the flash loan borrowed asset. What's the address for that? The amount of the flash loan borrowed asset, what you are borrowing and the premium is the fee of the flash loan. That might be in percentage. And for example here we will be taking one USDC flash loans.
00:42:02.286 - 00:42:19.194, Speaker A: It will be like 0.5 something good. Another one is the initiator, the address of the flash loan initiator. We are not going to use that. The parameters byte encoded params when initiating the flash loan. We also don't need to worry about that because we will not use both of them. Cool.
00:42:19.194 - 00:42:43.450, Speaker A: And then the address provider, which where we have to pass on the pool address as well. So it's just making our work a lot easier. Cool. And then we have ERC 20 token, so that we can call the withdraw function, right. I hope you are aware of what is an ERC 20 token. The interface of that. Cool.
00:42:43.450 - 00:43:20.534, Speaker A: Now moving forward, the flash loan address payable owner. So who will be the owner? The message sender payable, the same basic implementation. And then you'll also have to provide the pool address. So for providing the pool address, what you have to do is when you deploy a smart contract. So here I also have a script for that. So deploy flashloan JS, right? So here, this is the script that we will be using to deploy our smart contract pool, the simple flashloan Sol file. So when you're deploying it, you will have to pass it through a constructor.
00:43:20.534 - 00:43:45.714, Speaker A: So this is like the address of the pool where I found it. So if you go to that Avev three testnet, just type pool address and you will be able to find it. And you just have to copy paste here. And if you don't want to, this will be in the GitHub repo. So you can copy and paste from there itself. Going back where we were. Yeah.
00:43:45.714 - 00:44:16.090, Speaker A: So then there is the function execute operation. We have already talked about this premium, the amount that we want to take and the assets that asset. So this is like the address of the asset. Like for example, USDC. So there will be address of the USDC, whatever, USDC Dai, whatever you want to take. And then there is an amount owned that will be the amount that you have taken plus the premium, that is the fees. And what we are not doing here is the contract.
00:44:16.090 - 00:44:47.462, Speaker A: Here you have to implement the logic. So if you want to move ahead. Right now, as I said, we are doing the simple transaction first of all, right? But if you want to move ahead with an extra step, you want to perform arbitrage. So here you will be implementing your arbitrage logic. And also, one more thing is that there is good video that is providing all this hands on tutorials which you can follow. So I will provide you a link to that video tutorial. I don't know, eat the blocks or there is a YouTube channel that has that good video.
00:44:47.462 - 00:45:11.738, Speaker A: I found it really great. My role is and my motive is just to share good information to you. I don't want to views or anything. Right? If that is good view, I will share it with you even if it's not mine. So you can check that video. I will provide you the link so it will have a hands on implementation and more good explanation of this stuff. I just want to give you a basic overview.
00:45:11.738 - 00:45:59.546, Speaker A: That's why I'm not going to explain each and every bit. Right. Cool. So function flash loans now this will be the function of the flash loan that you have to implement. So if you go to the ipool Sol file, there is this function that you have to implement it receiver address, the address of the contract receiving the funds, the asset, as I said, the asset that has been address of that being flash borrowed, the amount that has been flashed, borrowed and parameters and referral code that you don't have to worry about as we are not using this again. So we have implemented that as well, right? For referral code, you just have to pass zero because you don't have a referral code for this receiver address. This will be the receiver address, this particular contract.
00:45:59.546 - 00:46:30.534, Speaker A: And then the token that we will be passing on when we will be calling this flash loan function. So wait a minute. If you are unable to understand what is going on, we will call this flash loan function. Then you will understand what is this because there is a token that you will have to pass. So for example, if you're taking a flash loan of USDC, so you will have to pass on the address of USDC, comma, the amount of flash loan that you want to borrow. Okay? So you have to do that. Then there is the pool flash loan.
00:46:30.534 - 00:47:14.834, Speaker A: Simple, all the same stuff that we are implementing here. And then basic functions like get balance or get balance of this contract, the withdraw function. So that once we have a profit, we can withdraw this funds and move it to our EO address. Externally owned account modifier only owner so that only owner can call this withdraw function, right? It's very important or anybody else can take the profit, then the receive so that this contract can receive funds. Cool. So this is what the implementation of flash loans from Aave looks like. Now what we have to do is we just have to deploy our flash loan smart contract.
00:47:14.834 - 00:47:40.062, Speaker A: So this is the command for deploying the flash loan smart contract. So let's hit enter and then this will deploy our smart contract. This is an error that might see, but that's a warning that's not an error. So it's deploying our once already file successfully. Let's wait for a minute. I guess my Internet is slow, but it will be done very soon. Cool.
00:47:40.062 - 00:48:10.134, Speaker A: So now we have our flash loan contract deployed. So this is the address that you have to use. So please, please copy this address. Now what you have to do is once you copy this address, go to remix. And on the remix, what you have to do is just go to your folder and there you will see, maybe you will see a different interface. What you have to do is you have to create a flashloan Sol file. And what you have to do is you have to copy your code that you wrote in the vs code.
00:48:10.134 - 00:48:40.094, Speaker A: Whatever we wrote in the Vs code, just copy and paste it over here. Right? So we are just getting an interface so that we can easily call our functions. We can also do it from Vs code, but I want to do it in a simple way. So just copy and paste it to the remix itself. And now what we will do is we will interact with this contract from the remix, right? So just compile, it will automatically compile. Then what you have to do is just connect it with your metamask. So I'm going to connect it with my metamask.
00:48:40.094 - 00:49:08.762, Speaker A: Yeah, it's connected. Cool. And now what you have to do is you have already deployed that contract. So at add address, please copy and paste that address that you just copied. Click on add address and you will be able to see the deployed contracts over here. So when you see it here, you will see all the functions that we implemented, the execute operation function, flash loan withdraw address, get balance, and the pool. Right.
00:49:08.762 - 00:49:56.442, Speaker A: So now what you have to do is just, let's get the balance of the token address, right. So what you have to do is go again to Ave, I will have to again share my screen. That's a problem. Why? Because the thing is that I use metamask on a different browser, so that's why it's creating a problem. I'm so sorry for that, but it's all security issues, so I'm sorry about that, but security is like always, security should be everyone's first priority, right? So this is the USDC address. So please copy this USDC address and then you will have to go again to the remix. Go to remix again.
00:49:56.442 - 00:50:42.262, Speaker A: And then over here, what you have to do is pass on the address here and just click on get balance. So right now, the balance of our USDC on the smart contract is zero. Now what you have to do is, again, as I said, that you will have to pass on. You have to give some, maybe a USDC to your contract. Because if we want to call the flash loan function, then there should be some USDC beforehand before we call the flash loan from our contract. So what you have to do is open your metamask and copy this address like the contract address. And with the contract address, you just have to send some USDC.
00:50:42.262 - 00:51:11.422, Speaker A: So if you have one USDC, just send one USDC to this particular contract. So once you are done, we will again check if the transaction was successful or not. It's taking a lot of time. Ethereum is slow, so you might want to use another l one or maybe an l two. Up to you. But it's taking a lot of time. Yeah, it's still pending, so just give it a few moments.
00:51:11.422 - 00:51:38.742, Speaker A: It will be completed in 1 second. Yes, it says it's completed. Now let's again check our balance of this contract for UDC. Yes, so our balance has been updated. So it's saying one USDC. One thing here to remember is that for USDC, we have six decimal places, unlike other tokens which have 18. And this has, on the security side, this has created a lot of bugs because there has been a lot of confusion.
00:51:38.742 - 00:52:15.062, Speaker A: People don't really remember. And this kind of can cause some bugs and has happened before. So I don't know why USDC choose six decimal places, but let's move forward to back to our crash code. So what you have to now do is you have to call the request flash loan function, right? So for that, what you have to do is you have to pass on the token address. So pass on that same token address that we used here. So just copy and paste this token address of USDC. And now you have to take a flash down of the.
00:52:15.062 - 00:52:35.802, Speaker A: You have to specify the amount as well. So here we might take a flash down. Suppose for example, one USDC, so you have to pass on one and six zeros. Six. Because one USDC, there are six decimal places. So six means one USDC. So you have to then call the request flash loan functions.
00:52:35.802 - 00:53:18.138, Speaker A: So once you do that, either your metamask will pop up here, it's popping up, you will not be able to see it. So it's been popped up. I have successfully clicked the transaction right now. Let's go to the ethereum itself on the block explorer itself, right? Yeah, there, you see. So what we done here is you can see the ESC 20 token is transferred. We have taken a flash loan from this pool. Like we have received one USDC and at the same transaction itself, what we have done is we have returned one USDC from our contract to this contract back, right? From the maybe this is ave pool or whatever.
00:53:18.138 - 00:53:59.418, Speaker A: Let's click on there. This is just USDC ave pool or whatever it is, right? So you got a flash loan of one USDC and then you returned the same one USDC from the same contract itself, along with a fee, and that fee is 0.5 USDC, right? So that simple, this is a simple example of flash loan and how it looks like on chain and how it is implemented. Now it's up to you if you want to, go ahead. If you want to see the arbitrage logic as well. So what you have to do is for the arbitrage logic as well. Let me just again share my vs code.
00:53:59.418 - 00:55:10.874, Speaker A: So on the flash loan arbitrage soul file, it's the same itself. But what we have done here is that I have created an exchange. So in the exchange, so this is the Exchange that we have created, I have taken it from the GitHub itself, right? And this is the interface file for the exchange that you have to take to implement, right? So in that arbitrage one, since we want to do an arbitrage now, we have taken the flash loan, right? Now, you have seen that how to take a flash loan and how to pay it back, you have seen it. Now we want to do is using this flash loan, what you have garried, what you have taken the loan of, you want to use this on arbitrage or anything else, whatever you want to use it for in here, we want to use it for arbitrage. So what we are doing is we have created an exchange file which will help us to perform an arbitrage, right? So as same as what we have done here, you have to now also import the interface of that exchange file that we have created, exchange contract. And then here, you have to also provide addresses for USDC. So for this, again, just go to v three addresses of Ave.
00:55:10.874 - 00:55:45.466, Speaker A: You will find this USDC address from there and also die address. Why die address now again, because since we are performing arbitrage operation, so we will have to provide an arbitrage happens between two tokens, right? You just can't perform arbitrage between one token for one token. So for that you have to provide two token addresses. We will perform arbitrage between these two tokens. Okay. And our exchange file, where this exchange file, our exchange file will be able to do it. And here you will see like 90 ten rate indexes, right? That's where it is creating an arbitrage opportunity.
00:55:45.466 - 00:56:16.660, Speaker A: So we have created an arbitrage opportunity ourselves. But this is going on testnet. But this might can happen on the main net as well. So there will be a little different implementation. But this is how the basic implementation is. There is an arbitrage opportunity in this exchange, right? On this arbitrage, flashlone, there is a flesh loan arbitrage sole file. We have provided the action contract address.
00:56:16.660 - 00:57:01.710, Speaker A: This is the contract address where my exchange is deployed. So you don't have to deploy your own exchange because it's the same itself until, unless you want to use any different tokens. So if you want to use the same and you want to follow the same one, then you don't have to change the address. You can take the simple exchange contract that I have deployed before, right? If you want to again change it, I've also provided the deploy script so you can deploy your own and you can paste the exchange contract address here. But if you don't want, you can use the same contract address. But I don't know if the contract. But what can happen is that this exchange can get out of liquidity.
00:57:01.710 - 00:57:51.314, Speaker A: Like it might not have enough liquidity or enough token. So you will have to send token to this exchange in case if it falls out of token and it doesn't have enough token to provide the arbitrage to perform the arbitrage. Okay, so moving ahead, what we have to again do is, so this is like the constructor, we have already passed the die address over here. Just taking it and the die variable and then moving forward. So where you have to implement the flash loan arbitrage function logic is here. So if you remember our last flash loan file. So we are just continuing that flash loan file only.
00:57:51.314 - 00:58:35.214, Speaker A: We're not creating any another flash loan file, we're just implementing. Moving forward with this file only and implementing it more. Right. So over here in the flash on arbitrage file, this is where you perform the arbitrage logic. So this is like a simple arbitrage logic that you are performing, right? So this is just what arbitrage looks like in the contract, right? So this is where we are implementing the arbitrage logic and then approved pool contract allowances. Whatever the amount owed is, amount plus premium, premium is basically the fee that you have to provide for that flash loan. Other than that, everything is almost same.
00:58:35.214 - 00:59:12.954, Speaker A: The flash loan function is same. Whatever there was in the flash loan file, it's the same in the flash loan arbitrage file. And then there are some few functions that is implemented for approval of USDC and allowance of USDC that are the basic function that you have to implement. And then there is the same function, get balance, withdraw and only owner modifier. Cool. So this is like a simple thing that you have to implement. So now what you have to do is, again, I've run the same transaction, the same command for deploying this particular smart contract.
00:59:12.954 - 01:00:04.986, Speaker A: That is flashstone arbitrage soul file where we are performing the arbitrage, right? So now what you have to do is moving forward. This is kind of your homework. So go to your remix, right? And perform this arbitrary logic. And again, same to same, what we've done, what we did in our last file with flashlone Sol, whichever last example, same to same, you have to do it on flash loan arbitrage file as well. Here there will be few extra functions like arbitrage flash loan where you will also have to provide arbitrage. Things like you will have to also copy and paste the exchange file. So you will have to paste this exchange file on your remix.
01:00:04.986 - 01:00:52.614, Speaker A: And then you will have to approve tokens basically from providing the address of your smart contract that you deployed. Right, this contract, you will have to provide approval from this exchange and then only you will be able to call the flash loan function flash loan arbitrage. Where is it? Yeah, flash loan arbitrage file. So yeah, it's going to be a little tough task, but I want you all to go and just perform it, right. And still, if you are unable to do it, go to my GitHub repository. There will be readme file. I will update that readme file with all the basic step that you have to follow.
01:00:52.614 - 01:01:22.594, Speaker A: And I will also provide a link to another YouTube video of someone's tutorial which you can follow. It is also showing you how to code and everything. But yeah, for that, now, the coding part, we are going to end it since, because if we do that also, it will take a lot of time and the crash codes will go through from more than 1.5 hours. And I don't really want to do that. We still have a lot of theory part left. There have been a lot of good innovations around flash loans.
01:01:22.594 - 01:02:15.170, Speaker A: I want to cover more or more part of that rather than this coding part, right? Because there are literally no videos explaining advanced innovations in flashnoon itself, all that theory stuff. And there are few tutorials already present on YouTube, so you can watch that. And my goal here is to provide you something valuable, content that is already not present on the Internet. Right? So I guess this helps you and this was a good tutorial. Now let's move forward again with our crash course on the theory part. Cool. So moving forward with our crash course right now, what were the problems that you faced while setting up the flash loan setup? Right? So we will talk about few of the problems and then we will also talk about their solution.
01:02:15.170 - 01:04:02.634, Speaker A: Okay, so now when we were implementing flash loans, what were the problem? Right. The problems were that all the callback functions are different for all the different protocols. Even the parameters are different, right? So if you want to take a flash loan from Aave, the implementation of flash loan Aave will be different. If you want to take it from DydX, then the implementation for the DydX flash loan will be different even for uniswap, right? So that's a problem. And even all the parameters are different, right? So that's big problem with flash loan, because every time you want to take a flash loan from a different protocol, you'll have to change your logic, right? And that's a very terrible thing to do. If you're a non developer, then it's a very terrible thing to do, right? So even what you want to do is if you want to take a single contract, and what you do is you might want to lay down all the logic in a single contract, then it might exceed the max contract size, right? Because you can't implement all the functions of all the protocols of all the flash loans functions in a single contract because it might exceed the max contract size, right? So if you can't modulize all this logic, you may exceed the contract size, as I said, and we have seen explosion of all these defi protocols, so it's being hard for people to use flash loans and set up a proper flash loan setup, right? So what was the solution to this? What happened is what? There was an introduction of ERC 3156. Now what is an ERC 3156? We will go through that.
01:04:02.634 - 01:04:53.398, Speaker A: It took me a while to understand what is this? And I got a really great. It's basically a standard for creating a standard for flash loan itself, right? So we have a standard for our tokens like ERC 20 token, NFT. We also have a standard for NFTs, but for flash loan also there was an EIP, that is EIP 3116. I hope you are able to see my screen. Yeah, so there was an EIP for that, creating a standard flash loans, right? So new standard flash loans, unifying the interface, plus wrappers for the existing ecosystem. So as we have already discussed in this, first it will be explaining what is flash loan? We already know what is flash loan, right? So what is EIP one five six standard? Many protocols have extended flash loan implementation. Those include DydX, flash loan ave, flash loan, uniswap flash loans.
01:04:53.398 - 01:05:43.942, Speaker A: Unfortunately, the interface is different for all these. This is not only bad for users of such flash loans, even having to learn how to use flash loan, each ecosystem is newly, right? So if you want to take flash loan from each and every protocol, each and every new ecosystem, then it also will be bad for you to learn it again and again. And also bad for security as well, when everyone is trying to design a secure mechanism on their own, right? So that's why we have standards. EIP 3116 is designed to support various different underlying mechanisms for repaying the loans, right? So there was an EIP three five six specification. Like there was an interface, EIP three one six flash lender. So there are two things. One is on the user side, there is basically a contract that a lender has to implement.
01:05:43.942 - 01:06:18.354, Speaker A: And on the borrower side, whoever the borrower is, for example, you are the borrower. So you have to implement this particular interface, right? So this is like two things that EIP 3156 shows and comes up with. So this is the flash lender contract. So whoever the protocol, basically protocol will have to implement this interface. It tells the same thing, right? So you can go through this, I will provide you a link to this blog. And then there is the flash borrower. So is the borrower.
01:06:18.354 - 01:07:05.534, Speaker A: They will have to implement this logic, right? Simple as that. Borrower example. There's a borrower example, then there might be a lender example as well. This is what ERC three one five is in simple way, basically standardizing the flash loan and another interest project, EIP three one six wrappers for existing flash loans available here. So I will provide you a link to this and all this standard wrappers have been already implemented for DyDx Uniswap ave yield, right? And dividx wrapper is even deployed on the main net according to this particular blog. So you can go that. And this is the real EIP ERC.
01:07:05.534 - 01:07:46.270, Speaker A: Fourth EIC 3156, which you can also say check, which is like the same thing that it is. Saying that the motivation for this was that there should be a standard for the flash loans because it's hard for users and even on the security purposes for the lender side as well. So the motivation was just to get basically a standard for flash loan school. This is like lender specification one. The lender must implement this ERP flash lender interface that we've already discussed. So this is the lender one. And on the borrower side, borrower is basically the user.
01:07:46.270 - 01:08:12.970, Speaker A: In that case, you. If you are taking the flash loan, then you have to implement that particular smart contract, right? Cool. I guess it's saying all the same thing. If you want, you can check out the ERC on your own. We will not go too deep into that. Also, if you are a solidity expert, if you are insecure, if you're interested in solidity, then do check out the security consideration of this ERC. It's really interesting.
01:08:12.970 - 01:08:47.350, Speaker A: I've heard from industry experts that it is really interesting and really thoughtful on the security sides. If you want, you can just check out the security consideration of EIP 3156. It's good, right? Cool. Now moving forward with our slide again, I'm saying I will provide the link to. The link is already in the description, so you can check it. Cool. Now moving forward with our presentation ahead, right, just a second.
01:08:47.350 - 01:09:43.746, Speaker A: Now we have to cover our last topic. That is flash loan attacks. Cool. So what is flash loan attacks? Right, so flash loans can also be harmful, right? Flash loans, we have seen benefits of flash loan, but flash loan can also be harmful. Like for instance, they can be used to distort the market value of a given coin, right? Allowing attacker, any attacker, to profit from an artificially induced difference prices, right? So once you have this flash loan, right, you have all this amount of money, or you're like basically for a second, you are holding millions of dollars, right? So you can do anything with that, right? So people are using it for attack vectors, right? People are using flash loans for attack. This is what called flash loan attacks. People use flash loans for attacking different protocols, right? Now, what can this attack be? Some examples could be like pump and arbitrage.
01:09:43.746 - 01:10:50.970, Speaker A: So what is pump and arbitrage? It's like artificially inflating the price of an asset and then taking advantage of the resulting price difference. Right? So you have this large amount of chunk of money, you are creating difference in the price and then you are taking advantage of that resulting price difference, right? And then another one is oracle price manipulation. So oracle price manipulation, it's like lowering the price of any assets and then buying it at a discount, right? We will discuss it how to prevent flesh loan. But this is like example, right? So the other one is wash trading, artificially inflating the trading volume of a coin, giving the false impression that the coin is being sought by buyers. Such as such sentiment can lead to traders buying coin, increasing its price as well. Last one is the governance takeover. So an attacker might use flash loan to buy out the governance of a targeted protocol, right? They can do it.
01:10:50.970 - 01:11:40.826, Speaker A: They can take a flash loan, buy the governance token, and then they can take the takeover if it's not implemented properly. Now what you can do to prevent these flash loans? There is a great website called Prevent flashloanattacks.com, right? You can visit this website. It is a dedicated list of historic defi attacks and attack vectors that have been done through flash loans, right? All this is historic tax. What has done through flash loan, BZX attack, origin protocol, harvest finance, voludify, all these hacks that have been performed through flash loans called as flash loan attacks. And there are some different causes as well that we have seen, like pump and arbitrage. We just discussed it, right? And then oracle attack, reentrancy attack.
01:11:40.826 - 01:12:17.286, Speaker A: Right? So you can check out this. I was planning to go through one of the attack and explain it to you guys, but it's not possible as of now. This might take a lot of time. So if you want me to explain some attacks, then please comment in the comment section, I will try to explain these attacks. What is flash loan? And then there is an attack vector. What you can do with this particular flash loan, what could happen? We've already discussed arbitrage, a pump and dump, et cetera, et cetera. Cool.
01:12:17.286 - 01:13:04.546, Speaker A: And then there are different type of attacks as well. Oracle manipulation, right? So as I said, they can be done. Oracle manipulation. With the chunk of money that you have using flash loan, what is the prevention of? This is basically using decentralized oracle. So rather than getting price from a particular Dex or whatever, a decentralized exchange, you can use a decentralized oracle to get the price feed. For example, chainlink pith flares, FTSO, right? There are a lot of oracles, decentralized Oracle out there that you can use and you should use and industry is moving towards using these oracles. Right? And the next thing is reentrancy attacks.
01:13:04.546 - 01:13:33.214, Speaker A: Reentrancy attack occurs when you create a function that makes an external call to understand contract before it resolves any pads. Reentry is one of the famous attacks in the web3 and the solidity world. And still it is going on. That is a little shame. Right? So there is a paragraph on this how to prevent that as well, and then moving forward again, pump and arbitrage. We just discussed how to prevent that. So it's a great website.
01:13:33.214 - 01:14:07.002, Speaker A: You should definitely read this out. And then there are some different threats, like BZX attack that happened through flash loan reenter and reentrange attack. I don't know what is that, reentrance C or reentry? I don't know what attack it is. But yeah, there are great thread and links that you can check, and it's a great website, so go and just check it out. If you're hungry for more knowledge, then please go and check this website. It's a great website and. Yeah, cool.
01:14:07.002 - 01:14:31.266, Speaker A: Now, moving again, moving ahead with our course. What is the last thing? The last thing is flesh loan attacks. So, as we have already discussed, like, flesh loans have amplified, like, economics attacks as they require little upfront investment by attackers. Right? They're like, attackers literally don't need any investment. They just have to make sure that they are paying the fees. That's it. That's the only investment they have to do.
01:14:31.266 - 01:15:23.550, Speaker A: So it's almost risk free, right? And all the attackers to lose all the associated gas fees. That's only that they have to do is what they have to take risk of the gas cost. Right? And in the return, they can be literally millions. They can literally earn millions just completing, basically taking care of that gas cost. Right? So flash loan attacks, as I said, that there have been a lot of flash loans, like Jim Boss protocol and arbitram based DFI project has suffered a flash loan attack that resulted in the flash loan more than 4000 ETH tokens. And it is like a lot of value. And then DFI Euler finance drained 197,000,000 in flash loan exploit.
01:15:23.550 - 01:15:53.002, Speaker A: Spartan DFI. There was the BSc flash loan attack, BSC chain one. Right? So a lot of flash loan attacks have happened, and it's a great thing. Still, there are attacks that is happening recently, only there was an attack that happened when I'm creating this video. So it's quite common. Flash loan attacks are quite common. You should go and check out one of the.
01:15:53.002 - 01:16:46.606, Speaker A: Maybe BZX one is good example. So you can go and check out and do your research on BZX flash loan attack how that happened. Do your own research. If you want, I can after this particular crash course, please write down in the comment section if you want me to create a course on this explaining all the attacks, I was planning maybe to create a playlist where I can cover attacks and explain it in 30 minutes how that attack happened on explaining technical works, what were they? But I don't know if anyone will watch that. If anybody is interested in that, I don't know if you are, please let me know in the comment section. If there are like five comments, I might create one video and see how that goes. But you have been very slow creating this content, right? Flash loan one almost took a lot of time.
01:16:46.606 - 01:17:13.714, Speaker A: I was little busy with my visa stuff and a lot of things were happening. I'm so sorry. But yeah, again, there is like last thing that I want to show you guys, that is bonus part. So bonus here. The bonus is this uniswap four. So Uniswap recently announced Uniswap V four, version four. It consists of lot of great things, hooks, et cetera, et cetera.
01:17:13.714 - 01:17:51.282, Speaker A: It's a singleton contract now, right? And yeah, so this is a GitHub repository that I found which explains how to basically perform Flash loan on uniswap V four. So it's a great GitHub repository. Great for you always. If you are early at something, it's good for you, right? So if you want to perform Flash loan on USA V four, then this repository will be helpful to you. I will provide the link to this in the description and you can check out this GitHub repository. Okay, cool. So hey everyone, we have Alberto with us.
01:17:51.282 - 01:18:07.080, Speaker A: Alberto is one of the author of EIP 3156 and co founder and tech yield at tech lead at yield protocol and he has been into blockchain and security space for a long time now. So Alberto, why don't you introduce yourself and tell us more about your experience.
01:18:08.670 - 01:18:58.550, Speaker B: Hi everyone. For those of you that don't know me already, my name is Alberto, Alberto Pesta Canada, which together contracts to Alca, my handle in many places. I've been doing blockchain for, I don't know, five years, six maybe now. And yeah, I've been the tech lead for yield protocol and before that I've done both other things. I've always liked very much side projects and public goods. And here and there I've tried to contribute something to the space relevant to this podcast. Is that at some point I led the creation of the flash loan system, which then it had certain acceptance.
01:18:58.550 - 01:19:14.000, Speaker B: We can talk about that later on. Yeah, I think that there's an introduction. Do you want me to tell you why this actually happened, why I actually happened to create this standard?
01:19:14.610 - 01:19:22.240, Speaker A: Sure, go ahead. Yeah, that was only my first question, like how you came up with this EIP and also give a little bit of introduction about as well.
01:19:22.950 - 01:20:17.930, Speaker B: So the story will actually serve as introduction on why I created the standard and what I think should be the effect of the standard. So one of my side projects a long time ago was to create a different wrapper for ether. The current one is super successful, but someone on Twitter said, let's create a new wrapper. The existing one is too inefficient. And at the time I was code in jail and I was a little bit bothered by a couple of things of the wrapper that was doing the things I wanted to do. So I decided, yeah, let's do this. And at the time as well, I was implementing the fy tokens in yield as tokens that you could flash mint.
01:20:17.930 - 01:21:05.826, Speaker B: They were tokens with flash loans embedded in them. Then there was no standard. And I decided, well, this would be very cool to add to the wrapped ether contract so that you could just flash mint wrapped ether and use it for flash loans, for refinancing, for anything. I thought it would be very powerful. And also because doing it on the wrapped ether contract, it could mean that you could flash loan unlimited amount of wrapped ether and you could do it at zero fee because it's permissionless contract. I didn't want anything. So I said, wow, we can have basically unlimited loans at zero fee as a public good for everyone.
01:21:05.826 - 01:21:45.454, Speaker B: So I thought that was a great idea. And I pushed with that quite hard. That's one of the reasons that the rubber was not really an obsessive. But anyway, I thought it was a great idea. And then I kept on thinking on the idea and I said, hold on. So if we make a standard for flash loan, it will mean that from the point of view of the borrower, all the lenders will be the same except for the fee that they charge. And if all the flash loan lenders look the same except for the fee, they will start competing on fees and the fees will drop down to zero.
01:21:45.454 - 01:22:43.554, Speaker B: And eventually flash loans will be free on most platforms for all assets, and that will be good for the space, less friction and so on. So that's the reason that I led the creation of the flash loan standard, because my hope was that by market forces all lenders would start using that standard and the prices of flashnors would decrease to zero and the spirit would have restriction. And I was somewhat dedicated by that, with Makerdao starting to offer zero flash loans and die using the standard. And later on Euler also offering zero fee flash loans using the standard as a wrapper. But the future that I imagined is kind of coming true. So that was the reason I see.
01:22:43.592 - 01:22:56.022, Speaker A: And also talking about market, how is the adoption like for EIP 3156 and would you still recommend using it if someone were to develop flesh loan contract today?
01:22:56.156 - 01:23:08.700, Speaker B: Yeah, certainly the tiny limitations and shortcomings, it's very difficult to make a perfect standard, but it's just to the test of time and yeah, definitely you should use it.
01:23:09.070 - 01:23:13.900, Speaker A: Would you like to lighten on the concerns that you just talked about?
01:23:15.630 - 01:24:08.300, Speaker B: Well, it depends if you're a very advanced user, it might bother you that you don't receive any meaningful data from the receiver of the flash one. It's only a code that's a little bit troublesome, because if the receiver needs to send some data back, you have to use some intermediate storage place for that. That could be a bother. It's a little bit of a bother that the loan receiver and the callback receiver need to be the same address. I cannot send, I cannot ask the lender, could you please put 1000 ether in this address and then call this other address? And another thing that bothered, that bothers me very much, but it might not bother anyone else.
01:24:08.750 - 01:24:09.210, Speaker A: Okay.
01:24:09.280 - 01:25:01.114, Speaker B: Is that to do the repayment on yearc 35 56, you have to approve the lender to take the assets from you. And I think it would be a lot more convenient if instead of that, you could just transfer the assets to the lender instead of asking the lender to please pull them. There was a long discussion about which one of the two methods was best when we were doing the standard, and I was convinced that the present method was the best one. And I think I shouldn't have been convinced the people that recommended it. I think my method of just transferring the tokens would have worked better. But as I said, those are kind of minor concerns about the standard. The standard in itself, it's very advanced.
01:25:01.114 - 01:25:43.078, Speaker B: I use it personally myself, quite a lot. And I use flashlands mostly for governance actions, not so much for liquidations or refinancing or anything like that. But in governance, I often need flashlands to get over some kind of impasse. And for me, it's very convenient that as long as someone uses the standard, I can use them as a lender. Example, I had my contracts that they were all coded to use the standard, and I was using Euler as the source of all my flash loans because it was perfect. Zero fees, lots of assets, perfect. And then Euler got hacked and disappeared.
01:25:43.078 - 01:26:01.920, Speaker B: It's like, how do I do governance now? Easy. I just went to my library of wrappers that I had built before, and without changing my code, I switched to use flaskmast fund DXPy, where units are dependent on the ask. And it was easy.
01:26:03.650 - 01:26:17.300, Speaker A: Interesting. Also, talking about EIP, a lot of young devs who watch this, right? So can you walk us through the process of publishing an EIP? Like what happens under the hood? It's an interesting one.
01:26:20.890 - 01:27:14.950, Speaker B: Publishing. Well, first you create a pr on the Ethereum GitHub. There is a GitHub repo with Ethereum EIP. You open a pr, your pr number is the EIP number, so it's sequential. And then that EIP goes through a number of phases, like I think it's only draft something else and final. And there are EIP editors that have their own rules about what an EIP needs to meet in order to be final. Needs to have a robust discussion, needs to follow a number of specific rules in terms of links, what it says, what it doesn't say, how clear is the language.
01:27:14.950 - 01:28:38.162, Speaker B: So in a sense of process, basically it's opening a pr on a GitHub repo, writing something according to a certain format that makes things very clear. And if you get through all the steps, if you comply with all the rules, which are formatting rules, basically, of how eips should be written, and there has been discussion about it, there tends to be an associated form for that. The EIP can be made final, right? It doesn't even need to be popular, it just needs to be well written. But that means that anyone can write an EIP about anything, saying anything. A very different matter is if you are specifically writing a standard that needs to be approved, that needs to be accepted by the users of the standard. If you write a standard, no one uses it, you kind of wasting your time. And if you write a standard and a few people use it, but the rest of the people don't, you have probably actually harmed the space, because that means that it was not a very good standard and a better standard is needed.
01:28:38.162 - 01:29:26.746, Speaker B: But when that better standard comes along, there will be two standards. And each time that this is made, you fragment the space a little bit more. So it's the kind of thing, the kind of document, a standard, you should get it right on the first go, a little bit. Like in smart contracts, you should get it right on the first go, because otherwise you will be harming the space. And it's very difficult to get something like that right on the first go, because if you're writing a standard for something that hasn't been done before, you have no idea what you are doing. And if you are writing a standard for something that many people have done in the past in many different ways, some people will be left out of the standard. So you need to assess.
01:29:26.746 - 01:29:45.830, Speaker B: Okay, sure. Do I need to make all the previous guys happy and comply with them, or should I break with the past? So it becomes a very duquass, a lot of strategic thinking, and apart from technical knowledge.
01:29:47.550 - 01:30:13.486, Speaker A: Looks like a lot of efforts are required to writing any AP. Okay, coming back to the flash loans, how do you see what are some ways to avoid the threats with flash loans? Like, there was recently a report, like among last 386 defi hacks, 71% used flash loans. So are there any recommendation that you will type?
01:30:13.588 - 01:31:10.690, Speaker B: Yeah, well, the first one is that a flash loan cannot be distinguished, is not any different than a person with a lot of money. Right. So any hack that could be done with flash loans could be done without flash loans. But if you have a lot of money right from that, the main protection that you need to have against flash loan assisted hack is to make sure that someone with a ridiculous amount of money cannot do something that is wrong. It's just that, right? A flash loan is just giving everyone money. If you already had money to start with, you don't even need the flash loan.
01:31:12.070 - 01:31:19.650, Speaker A: I see a lot of people say that flash loans has harmed the industry more than it has profited, but I guess that's bullshit.
01:31:20.230 - 01:32:06.710, Speaker B: Well, that's a point of view, right? Yeah. There are some well known hackers that don't need flash loans to do their exploits. They can just use the assets that they already have. Makes sense in a way. Flash loans kind of reveal those holes earlier, while the space is smaller and while the impact is smaller as well, because otherwise, if classrooms wouldn't exist, the space might grow to a bigger size, and then there would be a hacker with a lot of money hacking everything around, because no one ever thought that anyone could put so much money together to hack that. So then the impact would have been even worse.
01:32:07.930 - 01:32:23.740, Speaker A: Yeah, makes sense. I guess I'm over with the flash loan question. So now I would love to know more about what are you bullish on these days. Like any new innovations around defi space or anything else that you would like to share.
01:32:25.310 - 01:32:58.754, Speaker B: I'm more a builder than an investor. I really suck at investing, like big time. So in terms of which token is going to go up, I have absolutely no idea. And if I would say something, I would recommend you don't follow my advice because I mostly use money in these things. As to what's exciting these days, I don't know actually, to be honest. I'm just a builder. I like building my own little things, my own side projects.
01:32:58.754 - 01:33:36.978, Speaker B: I have interesting stuff coming on loans that I'm not going to tell you yet. I have interesting things coming on, on better oracles that I'm not going to tell you either about. I recently released an article on contracts for staking and rewards that I had had in the backlog for a long. So that's the kind of things that excite me. This space, right? Not so much either. The money, what goes up, what goes down, not so much. The bleeding edge like this is going to happen in the future is amazing.
01:33:36.978 - 01:34:36.466, Speaker B: The thing that really excites me about the blockchain space is that it's so early and it's so basic. Basically we are coding a smart contraction, the equivalent of a calculator. It's so early and it's so basic that most of the basic building blocks haven't been created yet. And I can go and I can, with just a laptop, I can create a small and tiny tidy building block that then will be used by people. So those are the things that excite me, being able to go and say, look, flash loans, they work like this and you can use them like that and your life is better, perfect. Or look, rewards, you can make a smart contract that you put tokens in and it gives you rewards and you can do it this way in 200 lines of code. I like that kind of conciseness of the space that you can do that you don't need a massive team with lots of people to advance the space that I need.
01:34:36.466 - 01:34:41.160, Speaker B: You can be yourself and do one little thing and helps people. That's what I like.
01:34:42.250 - 01:34:48.482, Speaker A: I see. Yeah. I was hoping maybe you will give some alpha, but yeah, we will be looking. Do follow Alberto on Twitter.
01:34:48.546 - 01:34:49.830, Speaker B: I am Babita.
01:34:51.290 - 01:35:03.760, Speaker A: Yeah, do follow Alberto on Twitter. His new announcement. Yeah, we will all be following you. And also, one last advice to all young devs and engineers that you would like to give from your experience.
01:35:04.690 - 01:35:41.354, Speaker B: Yeah, just jump in, do stuff. Don't be afraid of failing. I had some massive, very public failures in this space. If you go and read my older articles, you will have a proper laugh at how much of an idiot I was and how much I was talking about things and failing a lot and looking like an idiot a lot was very positive for me. So I would encourage you to do the same. Just get out there, try things. Don't be afraid of embarrassing yourself in public and you will learn a lot and you will get far.
01:35:41.354 - 01:35:43.786, Speaker B: That's all awesome.
01:35:43.888 - 01:35:57.934, Speaker A: Yeah. Thank you so much, Alberto. I guess that's it for this podcast. It was just a smaller one. So thank you so much for taking out your time and maybe we will do another podcast once your announcement is live that he talked about.
01:35:58.132 - 01:36:02.240, Speaker B: Sure. Thank you very much. As for your time, take care.
01:36:02.850 - 01:36:34.346, Speaker A: I don't know if this crash course was too long or too short. If there is any feedback, I would love to hear that. If you like this crash course, please like this video comment down. Tell me, how was it? Share it with your family, friends, whoever, and also do follow me on LinkedIn. Do share it on Twitter and LinkedIn as well. And do tag me if you have completed this crash course. What were your learnings? Please tell me that as well.
01:36:34.346 - 01:37:12.198, Speaker A: And what kind of videos do you want next? What crash course do you want next on? Right. And other than that, also please do reach out to me on Twitter if you have any doubt and on LinkedIn and do share your experience there. That's it for this video. Let me know please. It would be helpful if you can let me know which next crash course you want. I'm really happy to do any other crash course. Maybe I was thinking Bridges is one of the hottest topic right now, so I'm going to cover that.
01:37:12.198 - 01:37:24.738, Speaker A: But yeah, let's see. God knows what will be our next topic. So till then, just bye bye, take care and take care of your health. Keep learning and keep exploring. Thank you so much for watching. Take care. Bye.
