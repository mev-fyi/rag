00:00:00.250 - 00:00:23.258, Speaker A: So, hey, everyone, we have John here. John is the cofounder of Stackup, and he did his master's from MIT. And before cofounding stack up, he was working at SpaceX. So John, please do introduce yourself and tell us more about your journey of founding stackup and coming from SpaceX. And how did you entered into web three? What was your goal? And also tell us more about stackup.
00:00:23.434 - 00:01:14.210, Speaker B: Yeah, you bet. I entered web three before working at SpaceX. Before I was at SpaceX, I was at a company called Relativity Space, which was doing 3d printed rockets. And I was lucky enough to be an early employee there. And as I left, I left with all of this fake startup money, and I was like, hey, this is the first time in my life that I actually need to do real financial planning. And so I started taking a look at what my different options were, and that's kind of when I rediscovered crypto. I say rediscovered because I, of course, had known about crypto for a very long time, but I hadn't fully realized it had gotten to the point that you could have really a thriving ecosystem of fully programmable digital assets.
00:01:14.210 - 00:02:16.070, Speaker B: And this was during DFI summer in, actually, it was in 2020, 2021. So it was like a pretty exciting time. But then once I got through it, it was super powerful and amazing. And I saw that it was inevitable that it would be easier to use in some way. So I started looking for solutions, which is when I met my co founder, Hazim on Reddit of all places, as he was basically also trying to solve the same problem. So, long story short, we ended up creating a smart contract wallet. We kept banging our heads against the wall trying to figure out why previous attempts at smart contract wallets didn't really work, and kind of came up with the hard truth that they tended to become closed ecosystems over time, and we needed something that was more like a standard that everyone could kind of work toward.
00:02:16.070 - 00:03:28.720, Speaker B: Right around that time, Erc four three seven was announced, or rather was first published by Vitalik. You have vise and a bunch of others at the Ethereum foundation, and that was kind of like the thing that we were looking for. So, right, as soon as that came out, actually, we quit our jobs. I left SpaceX, left his job at Afterpay, and we started working on a smart contract wallet. We went through Y combinator, building the first ERC four three seven consumer wallet that was on polygon mainnet, but realized we had to build basically the whole infrastructure ourselves, and that we couldn't really realistically be both an infrastructure company and a wallet company. And we were just like way better at building the infrastructure than running a consumer wallet app. And also the way that we saw the ecosystem was there were a lot of great teams working on consumer focused wallets, but almost no one working on actually developing the infrastructure that we thought would kind of inevitably enable them.
00:03:28.720 - 00:04:06.378, Speaker B: So we made that pivot from a wallet to an infrastructure provider middle to late last year. And now stackup is like the primary provider of ERC four through three seven infrastructure. So we provide access to what are called bundlers, which is basically a special piece of software that nodes run to enable ERC four three seven transactions, as well as paymasters and other miscellaneous services to help people develop with ERC four three seven.
00:04:06.464 - 00:04:22.800, Speaker A: That's awesome to know. Thank you so much, John, for that awesome introduction. I really have some technical questions regarding Bundler, but we will get to that. But before that, I would love to hear from you. What does account abstraction mean to you? And if we can get a good technical definition, that would be great.
00:04:23.190 - 00:05:40.410, Speaker B: Okay, so account abstraction is first of all a terrible term because it's super vague. Initially, the word account abstraction came from the perspective of the blockchain, which means right now, almost all blockchains specify how a user's account logic works and how they can sign transactions. In the case of Ethereum, that is, with a certain kind of cryptographic signature called ECDSA signature algorithm. So the term account abstraction means, hey, users can have their own custom logic. It's abstracted from the blockchain. Over time, that term has evolved, I kind of consider there to be, and that term has evolved to mean pretty much any kind of way that a user's account is evolved beyond just being a private key. So I consider there to be kind of like four different flavors.
00:05:40.410 - 00:06:54.180, Speaker B: The first is traditional smart contract wallets, like gnosis safe or argent, where a user still needs to have a private key, but the account itself is a smart contract and so can have other logic in it. The second is where a user's account is a smart contract, but they don't necessarily need a private key because they trust a relayer that itself has a private key to initiate transactions on their behalf. The third is what I consider ERC four three seven, which is where a user can use a trustless relayer to do transactions. In this case, the trustless relayer is the bundler network. And then the fourth and the end goal is native account abstraction, which is where the blockchain itself allows users accounts to have code associated with it. Natively so that a private key is not necessarily needed.
00:06:54.790 - 00:06:55.810, Speaker A: That's awesome.
00:06:55.960 - 00:07:05.550, Speaker B: Yeah. So of those four flavors, the TLDR of account abstraction is. It's a blockchain technology that allows users to have custom logic for their accounts.
00:07:05.630 - 00:07:09.874, Speaker A: Got you. Thank you so much for talking about that four shades of account abstraction.
00:07:09.922 - 00:07:10.930, Speaker B: That's really helpful.
00:07:11.010 - 00:07:33.200, Speaker A: And what do you think? What is the most important use case of account abstraction? Like, there are many we have talked in this course, like sponsoring the transaction fee. And then recently visa also released their blog, if you have heard of them. Right. So what's the most important use case according to you?
00:07:33.570 - 00:08:23.550, Speaker B: Yeah, so this isn't exactly a use case, but the most important thing is account abstraction allows people to use blockchains without having to be an expert at how blockchains work to use them safely. That to me is like the core value proposition. And why it's so important, because if you can't, like, if people have to be experts at using a blockchain to use them, then you don't really have the same kind of equality that blockchains are trying to enable, right? Or trying to create an equitable system of ownership on the Internet. And we can't do that if only the privileged few who have the opportunity to learn about how blockchains work in the first place can use them. I think in the short term.
00:08:26.770 - 00:08:27.086, Speaker A: The.
00:08:27.108 - 00:09:02.390, Speaker B: Most important use cases for the next onboarding, the next really big set of users for whatever that application ends up being, will be with Paymasters, where users can pay for transactions using any ERC 20 token or even for applications themselves to sponsor transactions on behalf of users so that there's no longer the barrier to entry of making that first transaction on chain, of needing ETH or Matic or whatever the native token of the network is in their wallet.
00:09:02.470 - 00:09:31.970, Speaker A: Got you. So I have one question regarding this. So bundle is basically going to pay the fees. It's going to bundle the transaction and it's going to pay the fees on behalf of the users. Right? So suppose, for example, I have USDC and Bundler is going to pay the fees in ETH, right? So how does this, like, how do the bundler knows that in my account I have this much USDC. So is there a swap or a conversion ratio? What does it use under the hood?
00:09:32.310 - 00:10:28.870, Speaker B: Yeah. So the way that it typically works is when a user sends a transaction to the blockchain and that's sent as a new kind of object. It's called a user operation. It includes information about the Paymaster that is going to sponsor the transaction and if required, a signature from the paymaster, or rather just any sort of data. It's actually flexible that the paymaster will use to verify that it will sponsor the transaction. So what the bundler does is the bundler receives this user operation, receives the paymaster, and the data runs a quick simulation that shows that the paymaster will sponsor the transaction and that otherwise the transaction is valid. And then we'll submit it on chain.
00:10:28.870 - 00:12:00.500, Speaker B: When the bundler submits it on chain, really what it does is it takes the user operation from the user and sends it to a contract called the entry point contract, which is basically the on chain component of four, three seven that handles all of the logic of coordinating and executing and verifying transactions. The entry point itself will see that, hey, this Paymaster is sponsoring the transaction. The Paymaster will use its own ETh to pay for the transaction and execute any additional logic, such as withdrawing ERC 20 tokens, as an example, from the like from the user's account. And the Paymaster itself has a deposit within the entry point, and then the entry point will then reimburse the bundler for the gas that was sped. So there's a lot of moving pieces, but the bottom line is that the user operation has a field that specifies that, hey, the Paymaster is going to pay and the bundler simulates it to verify that it's going to work.
00:12:01.510 - 00:12:06.478, Speaker A: Got it. And also, Paymaster is an optional feature. Right? If I'm not wrong.
00:12:06.664 - 00:12:08.630, Speaker B: Yeah, Paymaster is optional.
00:12:09.050 - 00:12:10.950, Speaker A: Okay, got you. Thank you so much, John.
00:12:11.020 - 00:12:11.494, Speaker B: Yeah.
00:12:11.612 - 00:12:32.014, Speaker A: Another one is that a bundler that sends a batch of user operation on chain also must secure itself from front running. Right. So do you think, will there be something called bundler extractable value in future? It's going to be a thing. How does that looks like? Can you talk about that?
00:12:32.212 - 00:13:50.280, Speaker B: Yeah, you bet. So it's funny you bring that up because we actually recently experienced the first instance of a bundler's bundle being front run by what we assume is an MEV search or bot. So in any opportunity where an actor on the blockchain can order transactions, there's an opportunity to extract value out of those transactions beyond just the fee that users pay. So, for example, if you are going to make a swap that changes the conversion price of an asset, that in theory you can do other transactions around it to manipulate the price and then extract a little bit of value out of that. So there will be mev, or maximum extractable value in the bundler network. We haven't seen any bundlers actually try to execute any of that logic. There's just like, frankly not enough volume for it to be profitable right now.
00:13:50.280 - 00:14:02.458, Speaker B: But I do think in the future it'll be part of the MeV landscape and you'll have MEV searchers that are also bundlers, things like that.
00:14:02.544 - 00:14:12.190, Speaker A: Got you. Okay. Can you also talk more about security concerns regarding ERC four three seven and regarding in terms of bundler?
00:14:13.010 - 00:15:57.230, Speaker B: Yeah, so the primary challenge in developing ERC four three seven was in creating this permissionless user operation, mem pool. So basically, a lot of the innovation behind ERC four three seven is that there is a new mem pool specifically for, or transaction pool specifically for ERC four three seven user operations. With any permissionless network like that, you need to do a lot to protect against denial of service attacks in order to make it censorship resistant, so that if anyone submits a transaction, a valid transaction to the pool, other actors can't reasonably censor it. The ERC four three seven transaction pool has a bunch of rules that bundlers need to follow in order to participate in that pool. So one example is there are banned opcodes. Opcodes are kind of like lower level, like the lower level building blocks of how transactions and such are executed on chain. Opcodes have to be banned in certain instances if they can change basically the state of an account from when a bundler simulates a transaction to ensure that it's valid and to when it actually submits it on chain.
00:15:57.230 - 00:17:25.050, Speaker B: The reason for that is if someone can spam the pool of user operations with a bunch of invalid operations that bundlers then submit, they can effectively drain funds from a bundler because the bundler has to initially front the ETH to initiate the transaction on chain. And if they don't get reimbursed, it costs the bundler money. So to protect the bundlers, we have these like band op codes. Additionally, there are certain storage access rules, such as, for example, if you have a paymaster that looks at an on chain oracle to get the price. In theory, you could have a paymaster that has a malicious oracle and so could very cheaply again invalidate transactions in between the simulation by the bundler and the transaction actually being executed on chain. And so there are certain rules about what ERC four three seven accounts can access in terms of storage of their own and other contract accounts. This doesn't mean that you can't do any of those things.
00:17:25.050 - 00:18:07.350, Speaker B: It just means you can't use the unified ERC four three seven mem pool. You can have alternative mem pools that bundlers can opt into to accept those transactions. And I think that we'll see a number of them, especially for enabling things like permissionless paymasters and things like that that would otherwise use like a price oracle or for certain trusted smart contracts where it's advantageous to use some of these banned opcodes, but a bundler is willing to take the risk because they trust the contracts. Got you.
00:18:07.420 - 00:18:31.726, Speaker A: Yeah. Thank you so much, John, for answering that. Security is, I guess, one of the most important thing that should be kept in mind, along with decentralization. Definitely. We will not take much of your time, just a lag. Question, last question. Where do you see the future of account abstraction? Like ERC four three seven is definitely not the end game, right? Native account traction is right.
00:18:31.726 - 00:18:36.466, Speaker A: So how does the roadmap looks like to you? How does the future looks like to you?
00:18:36.648 - 00:19:54.150, Speaker B: Yeah, so in the future we will have native account abstraction on Ethereum and other EVM based networks. I actually think that account abstraction on these networks is table stakes. It's going to be basically required right now. It's kind of a feature of new blockchains, especially some of the like zkevms and such that are popping up. But I think what will happen is we will get momentum around people using ERC four three seven. We will solidify what a safe account abstraction ecosystem really looks like and what those set of rules should be and how it should work. And then I think in parallel, as we create native account abstraction on Ethereum, we also in parallel create the ability for EOAS so normal private key wallets to have code associated with them and to effectively be able to transform them into smart contracts into ERC four three seven accounts.
00:19:54.150 - 00:20:16.640, Speaker B: And then eventually all private key wallets will effectively be turned into smart accounts, or rather accounts that have code associated with them, as account abstraction is enshrined on.
00:20:17.010 - 00:20:31.346, Speaker A: Great, great. Thank you so much, John. That was amazing. I mean, this was just a small podcast and any ending thoughts you want to give for developers watching this, do you want them to try account abstraction, SDK and any other thoughts you have financially?
00:20:31.378 - 00:21:04.014, Speaker B: Yeah, you bet. So the easiest way to get your hands dirty with Erc four three seven is with the stack up quick start guide. It is basically a command line wallet that uses user op JS, which is like ether's js but for user operations. Go ahead, check that out. It's free. Use a burner email address if you want, it doesn't require anything. And we've got a bunch of other documentation there too.
00:21:04.014 - 00:21:33.130, Speaker B: And if you have any suggestions about how we can make it easier for you to understand ERC four, three, seven. Please, by all means, come and talk to us because education and helping people harness this extremely powerful new technology is really important not just to us as a business, but also to the ecosystem as a whole. So please let us know if there's anything we can do to help you on your learning journey.
00:21:34.510 - 00:21:52.142, Speaker A: For sure. I will provide the link to John's Twitter and stack up website in the description. You can just go and follow them. Literally stack up has amazing good content. Like when I was creating this course, I really followed up stack up content. So yeah, great work. Great work over there, John.
00:21:52.142 - 00:22:06.440, Speaker A: So yeah, thank you so much, John, for joining in and telling us more about account abstraction. Looking forward to having you again in few months and talk more about and see where we go with this account abstraction space.
00:22:06.810 - 00:22:10.600, Speaker B: Yeah, of course. Thank you very much. Thank you.
