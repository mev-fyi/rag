00:00:00.170 - 00:00:54.458, Speaker A: So let's talk about gas. Ethereum gas. So what is gas? So gas is nothing but a unit of measurement that measures the amount of computational effort required to perform a certain operation on the ethereum. It is also written on the screen as well. Like, it is a fee that is required to conduct a transaction on the Ethereum blockchain, right? And it is also calculated in GUI as well, which is also one of the unit. And since Ethereum transaction, it requires certain amount of computational resources to complete, there should be a commission. That's why there is a gas fee that actually acts as a commission to successfully run those transactions in the Ethereum blockchain.
00:00:54.458 - 00:02:33.706, Speaker A: The gas fee actually helps to maintain the security of Ethereum network as well, right? So by demanding a fee for each calculation performed on the network, we do not allow attackers to send spam onto the network, right? So to avoid any random infinite loops or any other computational losses in the code, each transaction should actually set up some kind of limit on the number of computational steps for the code execution, right? Because if there is some kind of a person who basically writes a loop that is never ending, then there will be a trouble with the block unit with cogul up, right? So we don't want that, right? So there is a gas fee. Once that gas fee or that particular gas amount is lost, or it is not enough to execute the transaction, the transaction will be reverted back. So in this way, it helps us to maintain the security of Ethereum as well. This gas. Gas is really very important for that as well. And each op code has a fixed cost to be paid upon the execution measured by the gas. So when we were looking into the code example of the working of EVM, we were converting bytecode and EVM, there was actually mention of the gas for that particular opcode, right? So there is a particular gas for all that opcode.
00:02:33.706 - 00:03:10.490, Speaker A: If you haven't seen that video, go and see that video as well. So some opcodes can be triggered for gas refunds. Let's talk about Ethereum gas reference. So some opcode can trigger gas refunds, which reduces the cost of the transaction. So gas refunds are applied at the end of any transaction. But if a transaction is insufficient gas to reach the end of its run, its gas refund cannot be triggered, right? So this is a case and the transaction fails as well. With the introduction of London for hardfolk, two aspects of gas refund has been changed.
00:03:10.490 - 00:03:42.226, Speaker A: First is that the implement to how much gas can be refunded is lowered by the half of the total transaction cost. To one fifth of the total transaction cost. And second is that the self destruct opcode. The self destruct opcode, which destroys and completely deletes the smart contract. And that opcode cannot trigger gas refunds. Right. So only that opcode self destruct cannot trigger the gas refunds as well.
00:03:42.226 - 00:04:43.910, Speaker A: So these are the changes after the London hard fork. And now let's actually talk about Ethereum Turing completeness. So whether ethereum or EVm is a Turing complete machine or not. Right? So what is a Turing complete machine? A Turing complete machine is a system in which a program can be written that will find an answer to any computational problem, although there is no guaranteed regarding the runtime and the memory, right? And if your machine is Turing complete, then it could compute or it can use to solve any computational problem, right? So this is all about Turing machine. So Ethereum is actually. People say that Ethereum is a Turing complete because it can execute any program that a turing complete machine can run while reading and writing the smart contract and memory. So Ethereum is technically not Turing complete, it is quasi Turing complete.
00:04:43.910 - 00:05:11.386, Speaker A: And why I say that? Because there are some things that it doesn't fulfill as Ethereum Turing machine. Right. So what is that thing? Is also one more fact. If you are watching this Turing complete, there was a person who created this Turing machine. In between a war. There is a movie called imitation game, if you want. It is a good way to actually understand the history of Turing machine.
00:05:11.386 - 00:05:34.082, Speaker A: So just go and watch it if you want. So now let's talk about why Ethereum is a EVM. Or Ethereum is a quasi Turing complete. So the properties of Turing machine are as follows. Like a Turing machine can run forever, it can use infinite memory. And Turing machine has random access memory. And Turing machine can simulate any other Turing machine.
00:05:34.082 - 00:06:26.514, Speaker A: But these properties Ethereum doesn't have. Because Ethereum in Ethereum, we cannot have programs that can run forever. We cannot allow programs to use infinite memory. This is the case, right? And if we recall again, if you check out the Turing complete machine, basically in that any program can run forever and use infinite memory. So when EVM is executed a transaction, it carefully accounts for every transaction, right? Ethereum smart contract transaction or smart contract can only execute a transaction so long it has enough gas, right? And each instruction has a cost. That is a guess. So for example, adding two numbers cost three gas.
00:06:26.514 - 00:07:27.274, Speaker A: Calculating catch up to 56 hash cost 30 gas, right? Creating new contract account guess 32,000 gas. So there is a particular guess for every other transaction or every instruction, right? And if a smart contract is executed and it's run into infinite loop, for example, it would eventually run out of gas and transaction would be reverted, right? So that's not possible in Ethereum, right, and the EVM terminates the execution if the amount of gas exceeds the gas available for that transaction. So if the gas is not enough for that particular transaction, the EVM terminates that execution. Right. So that's why EVM is considered to be a quasi Turing complete machine and not a Turing complete machine. Right. So that's all about the crash course.
00:07:27.274 - 00:07:53.598, Speaker A: And finally, we have completed all the topics of Ethereum or the EVM. Ethereum virtual machine. Right. So thanks a lot for watching. Thank you. And there are some links in the description which I have provided some blocks to EVM which you can go through, so please check out those links as well. And I have other videos I've created.
00:07:53.598 - 00:08:42.590, Speaker A: You can visit those videos as well if you like. And if you found this video, this crash course helpful, then please please like to this video and subscribe to the channel. I will be creating more and more crash course for your understanding. My goal is here to simplify the blockchain stuff and actually clear the basics for all those blockchain developers that are out there. Maybe some of the developers, they don't understand the core stuff, so I really want to help them understand the underhood of the working of blockchain, CVM, all that other stuff. So please subscribe to the channel and what other crash course you want me to create. Please write down in the comment section and do follow me on Twitter.
00:08:42.590 - 00:09:13.326, Speaker A: At the rate sink, underscore uttam. You can reach out to me on LinkedIn. If you have any doubts regarding this crash course as well, just tweet it or dm me and whatever it is, I will love to help you, but please share this to your family group, in your WhatsApp group, college group, or wherever you are, please share it on Twitter and LinkedIn. And do tag me. So thanks a lot for watching. I hope you found this video helpful. Yeah, thank you so much for watching.
00:09:13.326 - 00:09:15.466, Speaker A: Till that, take care and bye.
