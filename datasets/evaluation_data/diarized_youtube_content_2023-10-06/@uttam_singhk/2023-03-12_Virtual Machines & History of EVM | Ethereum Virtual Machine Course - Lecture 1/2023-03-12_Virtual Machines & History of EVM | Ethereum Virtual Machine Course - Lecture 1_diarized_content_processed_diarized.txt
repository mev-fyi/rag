00:00:00.410 - 00:00:44.086, Speaker A: Hey, hey everyone. I am Uttam Singh and this is a video and basically a crash course on EVM. That is Ethereum virtual machine, right? So in this course, I will tell you everything about EVM, Ethereum virtual machine, what it is, how it works and everything. And trust me, after you watch this video, you will not have to read any other article or you don't have to watch any other video of how EVM works. I will also go deep inside how bytecode is get compiled and how is EVM running and how your code gets into the EVM and how it runs. It executes, what happens. Right? I will discuss each and everything about the EVM.
00:00:44.086 - 00:01:22.354, Speaker A: So let's not waste more of our time and let's get started and see about what is the agenda of this course. But before getting started, if you are an expert, do leave your feedback in the comment section. You can watch the video if you're an expert, if I left anything or if there is something that I can improve. So do leave your feedback in the comment section and do subscribe to the channel right now. Because this is just one crash course, I'm going to upload other many crash course as well. And my goal is to educate people about blockchain. So please, please subscribe to the channel right now like this video, comment it and also follow me on Twitter and LinkedIn.
00:01:22.354 - 00:01:55.578, Speaker A: And if you have any doubt, please reach out to me. So let's get started with our video. So let's talk about the agenda for this crash course on EVM. And I have tried key, I will cover every topic, right? So first of all, we will talk about the history of EVM, right? It's very important for us to understand what was the history of EVM, who designed it, what was the topic behind it, what was the motive behind it. Right? It's very important for us to know. So we will discuss history of EVM and then we will also discuss virtual machines. Okay, so what are virtual machines? Ethereum is a virtual machine.
00:01:55.578 - 00:02:40.766, Speaker A: So it's very important for us to understand what is a virtual machine, how it works and other things as well. After that, we will be discussing what is EVM, what actually is Ethereum virtual machine. And then we will also discuss Ethereum state, right? Because the job of EVM is actually to update the Ethereum state, right? That's the simple job of EVM, right? And we will be discussing how Ethereum state works, how it gets update every time the EVM runs, and what happens behind the code. Right? And then we will also go into the EVM architecture. What is the architecture of EVM? How it works, what components it have and all other stuff as well. And then we will be talking about machine space of EVM. Right.
00:02:40.766 - 00:03:05.746, Speaker A: So this is a new topic. The EVM can access and store information in multiple places, that is around five to six places. So we are going to discuss that as well. And then we will also discuss EVM opcodes. Like what are operation codes, what are bytecodes, AbI and solidity. Like I'm not going to go deep inside each and every topic. Opcode, bytecode API and solidity.
00:03:05.746 - 00:03:33.166, Speaker A: But it's very important for us, if we are learning about EVM, then it's very important for us to learn how opcode works, how bytecode works, what is Abi and what is solidity? Just an overview is very important. Right. So again, machine cannot understand solidity code. So that's why we need all these things. Opcode, bytecode, Abi. Right, because machine can't directly understand solidity because it's a high level language. Right.
00:03:33.166 - 00:04:03.130, Speaker A: So we will talk about this as well. And we will also going to take a few example, right. We will take a real life example. We will go through remix, we will write a solidity code and we will compile it and we will compare the bytecode and convert a bytecode into opcodes, right, which is a good example. And you will really understand how your code works at a lower level and how it's get turned into opcode which is executed on the eVM. Right. After that we are going to discuss EVM working.
00:04:03.130 - 00:04:44.674, Speaker A: So why I'm not discussing EVM working in the above slides before all these things? Because I want to set up a stage for you guys to understand what is happening behind the scenes and what are these small, small things. Machine spaces, opcode. And once your brain is clear about what is happening, we can discuss about how EVM is working when we have connected the dots. So at the end, when we connect all the dots, we will see EVM working. I will also take an example there as well. And after that the last topic will be Turing completeness. And the guess like what is Turing completeness? EVM is a Turing complete machine.
00:04:44.674 - 00:05:05.822, Speaker A: Is it or is it not? Is a quasi Turing complete machine. And we will also discuss gas as well. What is gas and why it is required. What is the need for it? Right, so this is going to be a small crash course on EBM. Hope so. I have covered everything. If I left anything, just write down in the comment section if you are still watching this video.
00:05:05.822 - 00:05:52.818, Speaker A: I guess you are interested pretty much in the course. So please like the video and hit the subscribe button as well. So let's get started with our first topic. That is the history of EVM, right? So everyone knows who Vitalik is, right? Vitalik Butrin is the founder of Ethereum. He founded Ethereum at the age of 19, around 2013, if I'm not wrong. Then again, at that time only the EVM was also designed as well, right? Because EVM is the heart of Ethereum, right? Ethereum is nothing without of EVM, right? As a human body, we don't have anything without our heart, right? We are nothing without our heart, right? Similarly, Ethereum is nothing without EVM. The EVM is the heart of the Ethereum.
00:05:52.818 - 00:07:12.454, Speaker A: So in similar year in 2013, only the EVM was designed with Vitalik and with Gavin Wood. So most of you know who Vitalik is, the founder of Ethereum, but people outside the industry, people don't know who Gavin Wood is. So Gavin Wood is actually also one of the founder of Ethereum, right? And he was the one who designed the EVM machine in his tenure, right? He's also the inventor of solidity language. He was the one who created the solidity language and now he is the creator of Polkadot and Cosmos ecosystem, right? So I just wanted to discuss who Gavin wood is, because most of us people know Vitalik but don't know Gavin Wood. So he was also one of the founder of Ethereum and he was the one who designed EVM along with Vitalik, and also created the solidity language, right? And you must be thinking why I have this BitTorrent logo in the slide. So according to Vitalik, what he says is that Bittorrent was actually one of the first Dap that was created. BitTorrent was created by Braham Cohen, and it is a file sharing protocol that was invented is around 2001.
00:07:12.454 - 00:08:27.040, Speaker A: And despite several efforts to destroy it, like BitTorrent, you must have been using it to download movies and other stuff as well. And despite several efforts from government and other organization to destroy it, BitTorrent remains very much alive. Why? Because to truly halt or to truly remove the BitTorrent from the Internet, every computer in every home across the world would have to shut down, because it's something that is decentralized also, and it's in every computer, right? So if you want to truly end or truly destroy the BitTorrent, then it has to be removed from each and every computer from around the world, which is a very hard task, right? So similarly, it's like a virtual machine as well. You can say it's more like Ethereum. And that's why Vitalik said that BitTorrent was actually one of the first DAP that was created. It's like virtual machines unbounded by any physical constraints, right? So yeah, this is all about, I guess, the history of EVM. Just a small history I wanted to discuss.
00:08:27.040 - 00:10:07.722, Speaker A: So let's move on to our next topic, as I discussed about virtual machines, right? So what is virtual machine? Why it is important, why we have created this Ethereum virtual machine, right? So virtual machines, as you can see in the diagram as well, virtual machine is nothing, but it's a program that simulates the operation of a computer by isolating its real components and operating system, right? So basically it's an independent machine that is working on top of your computer. So for example, you have a computer, you have an operating system with os like Windows or any other os, right? You have a Mac or any other os. And what will be happened? That virtual machine will run as an independent separate machine on top of your computer with different os, right? So you can do that as well. This is like one short example of virtual machines, right? So this one physical computer can actually run several virtual computers. So your computer can actually run more and more and more virtual machine, maybe two or three depends upon your capabilities of your computer, what are its programs and memory and all that stuff. So your computer can actually run separate virtual computers, to be precisely, we can call it as separate virtual machines, right? So this is like a simple definition of virtual machines. So now virtual machines can actually differ in their capabilities, right? Every virtual machine will have their own different tasks and they will have own capabilities.
00:10:07.722 - 00:11:51.434, Speaker A: So for example virtual machines such as VirtualBox, right? Virtualbox is a type of app that can help you create a virtual machine on top of your hardware and allow you to run any operating system on top of it, right? So you can download virtualbox on your computer and then you can create a virtual machine, basically that will create a different os in your computer which you can run. And maybe if you have Windows you can download the virtualbox and then you can create a Linux OS on your computer as a virtual machine, right? You can do that, right? And other than that, there are several other virtual machines as well, like Java virtual machines, which helps to, that is basically a Java runtime environment, right? It can run the Java code and stuff. We'll not go into the specifics of each and every technology because each of them have its own set of approaches that is worthy of different video, because every virtual machine is different and they have different motive of that virtual machine. However, these virtual machines have some common features and some criteria for their evolution, regardless of what task they are designed to handle. So every virtual machines have some common features which we can discuss in our next slide. So, as I said, that virtual machines run in isolation from the other computer components and using only the computational resources. This is different actually from writing and executing native programs that directly work from the computer components, right? So for example, basically you have a windows, you have an os.
00:11:51.434 - 00:12:28.122, Speaker A: Suppose Windows, you have Windows OS and you are running any DAP and running any of the applications. So that application will actually run on your own computer, right? And that will use your Windows computational resources and that will run on it. But it's not the case for virtual environment. For virtual machine. Like in virtual machine, it will have its own computational resources. And if you're running an application on top on the virtual machine, it will use the computational resources of that virtual machine and not of your computer rights. So this is what EVM it runs like, and you can see it in the diagram as well.
00:12:28.122 - 00:13:14.250, Speaker A: One more interesting thing to know is basically, if you are a developer, then what you will do is you will write your program in a source code and you will compile it into machine code. And that machine code is actually executable by the processor with a specific architecture. So for example, you are a developer, you build a code that is actually running, that is actually a high level language. So what will happen is that your high level level code will be compiled and into a machine code. And that machine code will be not platform independent. It will be like platform dependent. That that machine code, it can only be understand by a particular machine or by a particular component, right? And in the case of virtual machine, it's different.
00:13:14.250 - 00:14:06.694, Speaker A: In case of virtual machine source code, you can see it in the slide as well. The source code is actually compiled to the bytecodes, right? And this bytecode is then compiled to the machine code, right? So bytecode is actually acting as a platform independent thing, right? Because it can actually be executed on any platform using the virtual machine. So for example, you are writing a source code and then this source code that's in a high level language. In our case in EM, it will be in solidity. Right? Now it's in Java. So you compile this code and this will generate a bytecode. Actually, this byte code can be compiled or maybe converted to machine code that is understood by each and every OS, right? So for example, there is a Windows OS there is a Linux OS, right? There is a different os.
00:14:06.694 - 00:15:12.894, Speaker A: And not every machine can understood a single machine code. Every machine has its own architecture, every machine has its own specification. So you have to provide them different machine codes. Depends on their what machine codes they'll understand, right? So it's a very big problem. That's why we have this bytecode. This bytecode is actually acting as a middleman, right? So in the virtual machine this is acting as a middleman. You just compiled your code in bytecode and this bytecode gets convert into the machine code of whatever machine you are using and it will be easier understood, right? So that's why we need this bytecode, because it's very important, right? And also thanks to bytecode, because due to bytecode only we can create this, an isolated universal environment, you can say for executing any of the program and without even worrying about its compatibility with the process architecture or whatever the other computer components is.
00:15:12.894 - 00:15:48.802, Speaker A: You don't have to worry about whether the OS is windows, whether the OS is Linux, or whether the OS is Mac. You just have to write your code. And if you're using a virtual machine, it will create an isolated, basically simple environment, universal environment, and where you can convert the code in bytecode. And then this bytecode gets converted into machine code. So you don't have to worry about the architecture of different os, you don't have to worry about it. So this actually makes the life of developers where. Life of developers very, very easy, right? So this is all about virtual machines.
00:15:48.802 - 00:16:13.500, Speaker A: And I hope you understand what are virtual machines now and you can see it in the diagrams as well. And we will understand what bytecode is, especially in the context of solidity and EVM. So yeah, this is all about evirtion machines. And if you are still watching, I guess please go and write down in the comment section if you are still liking this video and give it a thumbs up as well, right?
