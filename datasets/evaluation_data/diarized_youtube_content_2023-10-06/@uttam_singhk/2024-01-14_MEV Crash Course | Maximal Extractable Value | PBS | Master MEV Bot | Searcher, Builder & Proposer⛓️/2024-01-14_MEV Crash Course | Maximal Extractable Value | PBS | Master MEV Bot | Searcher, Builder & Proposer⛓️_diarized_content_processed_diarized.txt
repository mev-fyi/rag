00:00:00.250 - 00:00:33.206, Speaker A: Hey everyone, I'm Uttam Singh and I'm back with another crash course. And this time the topic is MeV. This is one of the topic that always fascinates me and also one of the most important topics. If you are in the blockchain ecosystem and you know, in the DFI ecosystem, right? So everyone should be aware of MeV. If you are in this ecosystem, any of you are into DFI and web3, right? And yeah, let's get started with this video. Thank you so much for the support that you guys provided in the last video. The count obstruction one was a massive hit.
00:00:33.206 - 00:01:04.190, Speaker A: So if you haven't watched that, go and watch that. And also watch other crash courses like EvM, stable coins and the flash loans ones as well. So without wasting our time, let's get started with this crash course as well. Cool. So what is the agenda for this crash course? So this crash course is on MeV, maximal extractable value or minor extractable value. In this particular crash course, we will call it as maximal extractable value. We will discuss it why it was called minimum and why nomics.
00:01:04.190 - 00:01:14.798, Speaker A: So the first topic will be, as usual, the history of MeV. We will go through what's the history, what's the background, what always happened with MeV, how does it actually exist?
00:01:14.894 - 00:01:15.310, Speaker B: Right?
00:01:15.400 - 00:01:27.990, Speaker A: And after that we will also go through prerequisites of blockchain. Like to understand the MeV ecosystem, how does MEV works? Person needs to know how the basics of blockchain basically.
00:01:28.060 - 00:01:28.294, Speaker B: Right?
00:01:28.332 - 00:01:58.142, Speaker A: So we will go through the basics of blockchain. If you are already a blockchain expert, if you already know how blockchain works, then you can skip this part. The third one is what is MeV? What is MeV actually? We will go through that. How does it actually work? We will go through the diagrams, we will look into all the components and after that we will go through MeV examples. What are the examples of MeV? Like what are the things that MeV is generating and how is it generating?
00:01:58.206 - 00:01:58.578, Speaker B: Right.
00:01:58.664 - 00:02:25.754, Speaker A: There are different types of MeV examples. Arbitrage and sandwich attacks, front running. So we will go through each and every type with example and I will tell you everything about it. After that we will go through mev solutions. So what are the solutions of this space? Like, is that even possible to create an mev resistant blockchain? Or if not, then what are the solutions? How is the industry coping up with it?
00:02:25.792 - 00:02:25.994, Speaker B: Right.
00:02:26.032 - 00:02:46.202, Speaker A: So we will go through flashboard. So flashboard is like one of the major organization in this mev space. That is working on. So we will go through what flashbots is doing. What are the new solutions in the space? Mev boost PBs. PBS is proposal builder separation. It is a proposal.
00:02:46.202 - 00:03:20.170, Speaker A: So we will talk about it, right? And this is like, as of now, it's the hybrid, now, the PBS one. And we will also talk about some. Always. My goal is to provide you guys with more and more knowledge and opportunities, or how you can grow in this blockchain ecosystem, how you can contribute, how you can get a job, or everything, right? So I will tell you all the opportunities that are there in this particular mev space, and you can pursue career in this space as well. And then after that, as usual.
00:03:21.950 - 00:03:22.218, Speaker B: I.
00:03:22.224 - 00:03:54.454, Speaker A: Have separated the coding part with the theory part, because lot of people who watch this crash course are not always developers, right? And they're like, that. We wouldn't want to go through code base. We just want the theory part. So I'm keeping the theory part separate. And once the theory part will be finished, we will go through the live mev, right? We will go through the coding, and we will also code like Mev bot. And I will also show you in real life how I will get myself front run. What is front run? We will show you.
00:03:54.454 - 00:04:31.220, Speaker A: And we will also create IMeV bot, and we will also go through some code bases. So, without wasting my time, let's get started with our video. Cool. So, the history of MeV. So, the first ever recorded case of MeV emerged in 2014 on the Ethereum blockchain. It discovered by an analyst coder. He was extremely interested and hopeful in the technology until he realized a fatal law in the system.
00:04:31.220 - 00:04:34.638, Speaker A: After that, nothing happened till 2019.
00:04:34.734 - 00:04:35.380, Speaker B: Okay.
00:04:35.690 - 00:05:30.802, Speaker A: And then in 2019, a group of researchers from Chainlink Lab published a paper called flashboards 20 that highlighted that MEV isn't just a theoretical practice, that is just not a theoretical practice. Rather, it is already a functionality that was being directly exploited and which can have significant impact on the user experience. So, the paper you are seeing on the screen is that paper that was given by flashboards 2.0. Like these flashbots organization, they were like bunch of janeling labs researchers, right? This got separated, and then they proposed this paper, flashboards 2.0. Front running, transaction reordering. You can even see the date it was submitted on 10 April 2000. 2019, right? So, yeah, this was the paper that was released.
00:05:30.802 - 00:06:24.054, Speaker A: And after this, the history of the mev thing actually started, and people were getting more and more aware about mev, and people realized that this is one of the things that is hindering the user experience of the web. Three users, right? And people started giving importance to it. And then we have multiple solutions. Flashbots came with few of these solutions and how actually we can improve the user experience and how we can come up with more and more solutions to help validators to get maximum mev, right? Yeah. So this is simply the history of MeV, nothing special. But if you're interested, actually, you can go and read this paper. I will provide the link in the description of this video.
00:06:24.054 - 00:06:51.226, Speaker A: So you can just directly go and read this paper, which you might learn a lot of things if you're not even aware of meV. Okay, now let's get started with basics of blockchain. And one more thing before starting. This is all post merge. So whatever we are going to talk about in this video, this will be all post merge. So merge has already happened. That is, the theorem has moved from proof of blockchain to proof of a stake chain.
00:06:51.226 - 00:07:35.582, Speaker A: Okay, so this of everything we will be talking about, this will be all post merge. These basics are like simple for both, but we will talk about postmerge. That is pos. Okay, so what now happens actually? So if you are a user, okay, right. So you did a transaction. Suppose for example, you are a user, you want to swap your funds with ETH and USD, whatever. You go to the uniswap front end, right? And after that you connect your wallet, you provide the permission, right? And after that, what it actually does, it creates call data, okay? It creates call data.
00:07:35.582 - 00:08:36.686, Speaker A: Whenever you want to swap or something, first you already need to authorize your transaction with the wallet. And after that there will be an RPC. So if you're not even aware of that, like your metamask has this RPC that it uses to connect with the blockchain, right? So whenever the communication between the blockchain and the nodes blockchain and the application, basically your metamask wallet, that is happening through that RPC. So with that RPC, this transaction will be sent to these nodes, right? So there is a user. There is a user, right? You went to uniswap, you did your swap or something, right? And then creates call data. And then that your transaction goes to the nodes, okay? And after that? After that your node submits your transaction to the blockchain, right? No, it is not that much simple. Now what? Suppose there is just a single node, or there are even multiple node.
00:08:36.686 - 00:08:55.094, Speaker A: But what if your transaction goes to this nodes and this node goes down, right. This nodes go down, and after that you will have to wait for this node to come back online to submit your transactions. And this way it is not a very good thing.
00:08:55.132 - 00:08:55.478, Speaker B: Right.
00:08:55.564 - 00:09:03.862, Speaker A: If this node goes down and your transaction is with this node, then your transaction will be stuck and your transaction will not go to the blockchain.
00:09:03.926 - 00:09:04.106, Speaker B: Right.
00:09:04.128 - 00:09:16.362, Speaker A: So that's why this is not the case. Now, how does it actually work? We have a user, as usual, user, you did the transaction.
00:09:16.426 - 00:09:16.750, Speaker B: Right?
00:09:16.820 - 00:09:20.234, Speaker A: And you did the transaction and it goes to the node.
00:09:20.282 - 00:09:20.880, Speaker B: Right.
00:09:21.250 - 00:09:23.906, Speaker A: Now what is actually going to happen?
00:09:24.008 - 00:09:24.370, Speaker B: Right.
00:09:24.440 - 00:10:18.046, Speaker A: The receiving node, the node that is going to receive the transaction, it's going to check to confirm that the transaction is valid or not. Okay. And after certifying the validity, it adds the transaction to its collection of pending transactions, the so called mempool. Okay, so there is a thing called mempool. Okay, so what simply mempool is. So mempool is basically a list of pending transactions waiting for validation from a node before it is committed to the block on the blockchain. And after inclusion into the mempool, the transaction stay in appending state until they are selected to be a part of the next block to be added to the blockchain by the validator.
00:10:18.046 - 00:10:39.634, Speaker A: Okay, so your transaction goes to this mempool, and after this mem pool, any node, any validator, they are going to basically pick up the transaction. And after picking up the transaction, it is going to go into a block, and then that blockchain, that particular block will be submitted to the blockchain.
00:10:39.682 - 00:10:39.990, Speaker B: Right.
00:10:40.060 - 00:11:23.426, Speaker A: So this is the case, it's not the case that your transaction goes to only one node and then it directly goes to the blockchain. It goes to a mempool, which is like a public list of spending transaction, and it's waiting for validation from a node. So basically after it goes to the mempool, it is picked up by the validator, and then it goes into the block, and then that block got submitted to the blockchain. Okay. And one interesting thing to note down, actually, is that there is not multiple mempool. There is not single mempool, basically, right? This is not like only mempool that is available. There are multiple mempools.
00:11:23.426 - 00:12:11.642, Speaker A: Like there's no single public mempool available. There were like different mempool that are available to whoever, who is running the node. So let us see in the future example what I'm talking about. Okay, so what is Mev? Now you understand that this is the way, this is how the basics of blockchain is what is the journey of your transaction, right? It goes to the mempool, and then after mempool it goes to the block and then that block is added to the blockchain. Okay, now what is Mev? So Mev is a Maximal extractable value, also known as minor extractable value. Minor, why we used to call it minor because when the ethereum was proof of work, then there were miners, right? So that used to mine the block. And now in proof of stake it is validator.
00:12:11.642 - 00:12:25.114, Speaker A: So we are basically, now people call it like block builders, right? So better to call block builders. And that's why the term has been changed from minor extractable value to maximal extractable value. And we will call maximal extractable value in the sole crash course.
00:12:25.152 - 00:12:25.594, Speaker B: Okay?
00:12:25.712 - 00:13:03.218, Speaker A: So it refers to the maximum amount of value that a blockchain miner or validator basically block proposer can make by including, excluding or changing the order of transaction during the blockchain process, right? So as we have discussed the basics, right? So what is happening right now is that your transaction, like all the transaction, not just your transaction, like there are separate users, like different users, multiple users, thousands of them. So every transaction is in this mempool.
00:13:03.314 - 00:13:03.960, Speaker B: Okay.
00:13:05.930 - 00:13:29.950, Speaker A: And who adds these transaction to the block? That will be the block builder or maybe the validator or the miner in proof of blockchain. So they have this ability to pick up that transaction. It's not like that. If your transaction, you have signed the transaction first and it goes to the mempool, it is not the case that your transaction will be picked up first.
00:13:30.020 - 00:13:30.590, Speaker B: Right.
00:13:30.740 - 00:13:43.214, Speaker A: Anybody's transaction can go to the. It can be picked up first. It also definitely depends upon how much gas fees you are providing, right? So it is not the case that you're just the highest gas fees.
00:13:43.262 - 00:13:43.618, Speaker B: Right.
00:13:43.704 - 00:14:00.982, Speaker A: So there are multiple transactions in this mem pool. So the validator, the block builder, basically the miner or the miner, right. They have the ability to reconstruct. Not the reconstruct, but to change the order of your transactions.
00:14:01.046 - 00:14:01.562, Speaker B: Right.
00:14:01.696 - 00:14:54.906, Speaker A: And by changing the order of this transaction, they exploit this power, right? So simply putting block producers, the validators, can determine the order in which the transaction are processed on the blockchain and exploit that power to their advantage. And how do they exploit their power is that, for example, they can have multiple strategies. We're going to talk about all these strategies. So they can have multiple strategies. So in simple terms, like if you are someone who wants to buy something, so these people can see it in the mempool and they can actually buy it before you buy it before you, right. They can actually submit a transaction before your transaction and they can buy it, right? If you're confused right now, it's okay. When we will talk about examples, you will get it right.
00:14:54.906 - 00:15:48.234, Speaker A: So in simple terms like just now, remember that MeV is just basically that these validators, these block piddlers, have this power to reorder the transaction and censor transactions within the block they produce. With this, they create a value. And that value, or that money created is known as maximal extractable value. Okay, cool. Now let's move forward to another slide. Like again, the blockchain basics. Again, basically talking about continuing our previous example, right? So on ethereum, the default way a block proposer sequence transactions in their block is by gas auction, right? Including the highest paying transaction in decreasing order.
00:15:48.234 - 00:16:15.070, Speaker A: So whoever pays the transaction more gas fees, it is in the decreasing order. When sending a transaction, a user needs to pay a gas fees based on the computational complexity of the transaction. So it depends upon what kind of transaction you're doing. You're swapping, you're deploying a smart contract. So based on that complexity, your user needs to provide a gas fee based on the complexity of the transaction, the current per unit cost of gas.
00:16:15.230 - 00:16:15.746, Speaker B: Right.
00:16:15.848 - 00:16:38.278, Speaker A: In addition to this, they can include a priority fee tip to incentivize a validator to include the transaction ahead of the pending transaction. So if you're submitting a transaction, there is a thing called priority fee. You can give basically a tip to the validator to include your transaction ahead of the pending transactions that are in that mem pool.
00:16:38.294 - 00:16:38.426, Speaker B: Right.
00:16:38.448 - 00:16:40.054, Speaker A: There are multiple pending transactions.
00:16:40.102 - 00:16:40.518, Speaker B: Right.
00:16:40.624 - 00:16:52.746, Speaker A: So you can give a user, basically he can give a priority fee so that his transaction is carried forward first as compared to other transactions in that pending mempool.
00:16:52.778 - 00:16:52.938, Speaker B: Right.
00:16:52.964 - 00:17:30.214, Speaker A: And then the mempool. So, although there are measures to place to prove that all the transactions are valid and not double counted, but there is no way to actually ensure that they will be arranged in the same order that they are posted on chain. So it's like that. If you posted your transaction on 1001 and basically anytime, let's not take time. But if you posted a transaction at any time, if there is a user that posted the transaction after you, maybe his transaction can get confirmed first than yours.
00:17:30.262 - 00:17:30.474, Speaker B: Right?
00:17:30.512 - 00:17:38.874, Speaker A: So this is the case. There's no way to actually ensure that there is a proper order in the transaction that they are posted on the chain.
00:17:38.922 - 00:17:39.278, Speaker B: Right?
00:17:39.364 - 00:18:18.054, Speaker A: So this is why the block producers select the transaction from the mempool, which is like the blockchain queue for. We have talked about the mempool right? And they are able to prioritize transaction with the highest fees before the submission. Right? Again, continuing with our example, there is a transient mempool, right? So what can also happen is that there are a lot of bots that are already deployed on the blockchain, okay? Not basically deployed, but a few of the smart contracts that can see it. Or there are like MeV bots, we will also create one bot. So don't worry.
00:18:18.102 - 00:18:18.314, Speaker B: Right.
00:18:18.352 - 00:19:00.506, Speaker A: So there is basically a program that is there and it always sees the transaction. So this, as I said, that this is a mempool, this is a public mempool. There's no single mempool. Like anybody can run a node and they can see it. And now these days there are like APIs available that can help you to see these mempools live, right? So these MeV bots, they continuously are looking into this mempool. Like hey, what are the pending transactions? They're always looking there, right? And whenever they see any opportunity, they will just copy your transaction before you and provide more gas fees. And then they will basically provide your transaction to the blockchain before you.
00:19:00.506 - 00:19:20.350, Speaker A: So if you are, suppose you won a lottery or something, you did something, basically you found out an answer, you posted the transaction, and then these MeV bot can see that answer. And then they can basically simply go ahead of you and submit that answer.
00:19:20.420 - 00:19:20.798, Speaker B: Right.
00:19:20.884 - 00:20:01.438, Speaker A: It's not a good example, but yeah, to understand that, suppose there is an answer in the mempool since this mempool is public, right? So they can see your answer and they can actually submit your answer before it. So they can get the first string and you get the second one. Okay, so this is like the simple example of how these MEV bots work. And this is only called a maximal extractable value, right? So they are actually gaining a value by creating this, right? So if you are going to get something, a prize or something, right, so they will get that price. And there are different strategies, right. We will talk about in the next slide. So in simple way, this is, they are creating value and this is known as maximum extractable value.
00:20:01.438 - 00:20:48.694, Speaker A: Okay, moving forward, so what is the MEV flow? Okay, so we will go through each and every separate topics in deep, like what is searcher, what is builder, what is relayer? Just don't get confused. As of now, I'm already telling you, we will go through each and every particular component. Okay, so MEV, there are multiple actors involved. There is no single actor involved. There are like multiple actor involved due to the resources and expertise required to extract the MEV, it is common for block producers, like block producers means the validators, basically the block builders, right, also called miners or validators. This is a confusing terms. No, block builder, block proposals.
00:20:48.694 - 00:22:05.454, Speaker A: Don't get confused, okay? Just follow this image and we will talk about it. So, due to the resources and expertise required to extract MEV, it is very common for block producers like the block validators, to outsource the creation of the block to a third party. Okay, so rather than creating the block themselves, right? So there is like, as you see in this diagram as well, right? So rather than creating that, so rather than suppose this is the validator, this node has been choose to be the validator. So they will have to create a block, right? So rather than creating this block by themselves, what they will do is this is the block. So this is a node, right? Just compare this to this. Okay, so this person, this validator, rather than creating this own node itself, what he will do is basically he will outsource his work to different people, different components, different partners. And what they will do is they will help him to get the more and more value out of that particular block, basically the more value of MeV, right? So searchers, for example, these are searchers, they seek out the mev opportunity and create bundle of multiple transactions.
00:22:05.454 - 00:23:34.000, Speaker A: So again, moving from this beginning, there is users all your transaction, like there are different users, right? Your transaction goes to this memory pool, like the mem pool, basically, right? Everything is public, right? And these searchers, basically they look, seek out to mev opportunities, like how they can actually create mev opportunities out of this mempool. And they create a bundle of transactions and often containing another user transaction. These are like transactions that they create in a particular manner. Like this will go first and then this will go first and then this will go first, right? So they create a bundle and then this bundler, this bundle is sent to the builder who combines the bundles into a block, right? Block payload. They create a block and then these builders then make available full block to the relayers, okay? These relayers are there and which serves as the connection point to a blockchain. Block producer. And I will explain every single detail to you after we move forward, after we discuss the type of mev, right? So don't get confused here, okay, we will go through each and every, even after this crash course, even if you want to become a searcher or builder or whatsoever, if you want to deep dive into any component, you will be able to do it.
00:23:34.000 - 00:24:02.460, Speaker A: I will go super deep into these, and we will actually talk about the code base. We will talk about every single detail of it. Trust me. Okay? And then after that, the block producer, it submits the block. Okay, so there are multiple actors involved in this mev flow. So just wanted to clear that to you guys. Okay, now let's move forward to types of Mev attack that are possible right now.
00:24:02.460 - 00:24:42.434, Speaker A: After that, we will go through the different components that are available. Okay, so what types of MeV attacks? Okay, so what are the attacks available? I hope you guys now understood what Mev actually is. This meme is like one of the good memes. Like, suppose, for example, there's a trader, or basically a user, right? He's like, hey, I made this profitable trade. He submits this to the blockchain, and there is, like, mev bot already sitting there. He's like, hey, you made this? He asks this, and he says yes. And after that, he gives it to the bot, basically to the mempool that, hey, please submit this transaction to the blockchain, and I will be rich.
00:24:42.434 - 00:25:00.586, Speaker A: But after that, he's like, oh, I saw this transaction. So I can take this profit. I can be rich first. So he's like, yo, I made this. So it's a good meme. Like traders most of the time, even. There are some security researchers.
00:25:00.586 - 00:25:46.694, Speaker A: So there is a good blog that is by something, right? He's like, famous influencer on Twitter. That is, Ethereum is a dark forest. So I will suggest everyone who is watching this go and read Ethereum is a dark forest. It's a very great blog post that you should check out. Okay, I hope you understand now, mev. So now let's talk about different mev attacks. Basically, mev attacks are strategies used by these miners, like validators, these people, to exploit their ability to reorder, include and exclude transaction, right? They can include any transaction.
00:25:46.694 - 00:26:00.426, Speaker A: They can reorder your transaction, and within that, they maximize their profits, as previously mentioned. And these are some common types of mev attacks done is front running, back running, sandwich tax arbitrage, timebend attacks.
00:26:00.458 - 00:26:00.654, Speaker B: Right?
00:26:00.692 - 00:26:50.282, Speaker A: So they're like multiple of them, but I'm just mentioning the five of them, basically the most famous ones, right? So let's move forward, and I hope you will better understand what Mev is. So let's talk about front running. Okay, so this is like a very single example. So this always happens when a participant observes a profitable transaction waiting in the mempool and quickly creates a similar transaction within the higher guesser prices. Okay, so what is going to happen is there are two characters, Alice and Bob. These are like famous characters, Alice and Bob always used in blockchain, basically cryptography actually. So Alice submits correct answers with less gas fees.
00:26:50.282 - 00:27:14.242, Speaker A: Okay, like 15 Gui, right? But she is very smart. She submits the answers first, right. And what happens is that she is trying to submit that answer to the blockchain on chain. And the process for his transaction to submit on chain is that her transaction is going to go to the mempool.
00:27:14.306 - 00:27:14.870, Speaker B: Right?
00:27:15.020 - 00:27:55.942, Speaker A: Now, basically what is going to happen is like Bob, Bob is also, Bob is not as much smart as Ellis and the class, but he's very different kind of smart. Like he's very a hacker kind of a guy. Okay, so what happened is Bob doesn't know the answer. So what we will do is he's going to monitor this mempool for the transaction to find the answer. He's like, I'm not the smartest one in the class, but I know hacking and I know the coding side. So what he's going to do is he will create a bot or something, and he's always going to look into the mempool. So what he's going to see, like whenever someone submits an answer, right, he's going to submit that answer before that particular answer, but.
00:27:55.942 - 00:28:06.802, Speaker A: Right, in this case, Alice, before Alice, he submits his transaction with higher gas fees. They submit the Transaction and both of their answers are in the mempool.
00:28:06.866 - 00:28:07.480, Speaker B: Right.
00:28:08.010 - 00:28:15.510, Speaker A: Alice has also submitted one. Bob has also submitted one. So Alice also submitted one. But that is, she submitted it before Bob.
00:28:15.590 - 00:28:15.930, Speaker B: Right?
00:28:16.000 - 00:28:21.210, Speaker A: So technically her transaction should go before Bob transaction, but that is not the case.
00:28:21.280 - 00:28:21.900, Speaker B: Right.
00:28:23.390 - 00:28:32.646, Speaker A: Both of the transactions in the mempool and in the mempool, Bob has provided 50 GUi gas fees and Elias has provided 15 transaction gas fees.
00:28:32.698 - 00:28:33.058, Speaker B: Right?
00:28:33.144 - 00:29:21.674, Speaker A: So in this case, the validator, they basically want to create more money, right? So what they will do is basically they will include the brops transaction before Ally's transaction, and then Bob transaction will get executed before Alice due to the higher gas fees. And then it will be submitted on chain. So in this case, Bob won the transaction, won the prize or whatever. He gave the answer first, because on chain transaction, his transaction was shown first. So in this way, he created this value, right? It created the value. And this is basically called front running in simple terms, right. This basically encouraging miners to include my transaction first, but along then benefit to price movement caused by the original transaction.
00:29:21.722 - 00:29:22.282, Speaker B: Right?
00:29:22.436 - 00:29:47.842, Speaker A: So this is like the simple example. Nothing much to mention here. Hope you understand what front running is now, we will go through different actual defi related examples in the future. But I just wanted to give you like a basic, very simple example so that you understand it. Okay, so this is front running. Now, talk about back running. So what is now back running? So back running is like.
00:29:47.842 - 00:29:57.894, Speaker A: So front running was a transaction before someone says transaction. And back running is like inserting a transaction just after someone's transaction.
00:29:57.942 - 00:29:58.394, Speaker B: Right?
00:29:58.512 - 00:30:48.646, Speaker A: Now, one of the example could be, again, in the mempool, there will be multiple transactions, and you are going to make sure that your transaction is after this transaction. So in this case, like Ally submitted a transaction. So there can be any way that the Bob can basically generate more value by submitting its transaction after allies. Like just after allies, right. So this can be the case. Okay, so as in the back running, the user's transactions goes first, and after that, just after that, there will be a target transaction. So one of the example that could be is basically maybe buying large quantities of token as soon as it is launched.
00:30:48.646 - 00:30:57.034, Speaker A: So there is a token that is launched, and just after that, there is someone who is buying another token, like a large quantity of that token.
00:30:57.082 - 00:30:57.246, Speaker B: Right?
00:30:57.268 - 00:31:28.282, Speaker A: So this can be an example of back running. There can be multiple examples. Basically, front running is like submitting a transaction before the user transaction, the targeted transaction. And back running is like submitting a transaction after the targeted transaction, right? So in both the way, the motive is to create value, right? Motive is to create more and more money. Right, by the validators, by the miners or these people. Cool. So this is back running and now moving to sandwich attack.
00:31:28.282 - 00:32:04.180, Speaker A: So sandwich attack is basically mixture of both front running and back running, right? So it's like attacker, they're going to place a transaction before and after the target transaction. And this can actually manipulate the price of a token in a way that allows the attacker to buy and low the high prices. Basically. Let's get into the example, and I will explain to you with this example. Okay, so Bob goes to uniswap or any swaps, right? What he wants to do is.
00:32:06.010 - 00:32:06.326, Speaker B: He.
00:32:06.348 - 00:32:49.534, Speaker A: Has eth in his wallet, he wants USDC, he wants to swap that eth with USDC, okay? So he goes to the swap protocol and he swaps it, and his transaction goes to the mempool, like the public mempool, okay? And then after that, what allies saw is that, hey, pop is trying to swap 100 eth for USDC, okay? What allies will do is she will submit another transaction where she wants to also swap 650 e for USDC, okay? Now this transaction will be submitted.
00:32:49.582 - 00:32:50.130, Speaker B: Okay.
00:32:50.280 - 00:33:01.826, Speaker A: And what she will do is she is very smart, so she knows that if she will provide more gas fees than Bob, then her transaction will be included first. And his transaction has already in the mempool.
00:33:01.858 - 00:33:02.102, Speaker B: Right?
00:33:02.156 - 00:33:12.886, Speaker A: So she can see how much fees Bob has provided. So she can provide basically just a minimum more than this Bob's transaction.
00:33:12.918 - 00:33:13.258, Speaker B: Right?
00:33:13.344 - 00:33:39.282, Speaker A: And after that, she will submit another transaction. So she will submit two transactions. One is that she will also swap ETh for USDC. And another transaction three will be swap USDC to get is like she is doing the same thing. Like she is doing in one transaction, she is swapping ETH to ASDC. And again in the second transaction, she's going to swap USDC to get his wrapped heath back.
00:33:39.336 - 00:33:39.794, Speaker B: Right?
00:33:39.912 - 00:34:24.960, Speaker A: But in between, in these two transactions, there will be a transaction of the bob where he is also trying to swap ETh for USDC. So what is actually happening here? Okay, so this transaction two, that is by allies, that is going to go first. And after that, the transaction of Bob is going to go first. And then again, the transactions by allies, the transaction three is going to go first. So how this uniswap liquidity pool basically works is that if there is one token more in that particular pool, the price of that pool is going to basically go down. So you might get more price if you swap. Following this example.
00:34:24.960 - 00:34:34.674, Speaker A: So transaction two, what allys is doing, like she is swapping ETh for USDC, this is the same thing that Bob also wants to do.
00:34:34.712 - 00:34:35.118, Speaker B: Right?
00:34:35.224 - 00:34:45.282, Speaker A: So when she swaps etH for USDC, so she is basically submitting ETH to that liquidity pool and she is going to get USDC.
00:34:45.346 - 00:34:45.526, Speaker B: Right?
00:34:45.548 - 00:34:54.522, Speaker A: So if you're submitting more eth to that pool, and there will be, yes, less USDC, so the price of eth will go down.
00:34:54.576 - 00:34:54.938, Speaker B: Right?
00:34:55.024 - 00:35:18.114, Speaker A: So in the next transaction, so she has already swapped $63 of ETH for USDC. In the next transaction, when Bob tries to swap ETh for USDC, he is going to get less price. Why he's going to get less price because Elice has already swapped 650 worth of eat for USDC. So she knew that Bob is going to do this.
00:35:18.152 - 00:35:18.354, Speaker B: Right?
00:35:18.392 - 00:35:33.670, Speaker A: So before that, she already swapped $50 worth of east for USDC. What this has done is that this has reduced the price of eth. So this is like the loss of Bob that he's going to get less USDC in return.
00:35:33.740 - 00:35:34.214, Speaker B: Right?
00:35:34.332 - 00:36:00.714, Speaker A: So after death has done again, what Elice is doing is basically whatever the USDC she got from the transaction to. So she swapped this worth of eth to USDC again in the transaction. Third, this USDC she got from this transaction, she's again going to convert this to wrapdeeth. Why? Because in this liquidity pool now there is more wrapdeeth.
00:36:00.762 - 00:36:01.118, Speaker B: Right?
00:36:01.204 - 00:36:06.914, Speaker A: So if you're going to provide USDC to that pool, you are going to get more value out of it.
00:36:06.952 - 00:36:07.154, Speaker B: Right.
00:36:07.192 - 00:36:16.774, Speaker A: So she is basically swapping her USDC to get more money out of it because the price of ethereum is less.
00:36:16.812 - 00:36:17.014, Speaker B: Right.
00:36:17.052 - 00:36:21.190, Speaker A: So she can basically buy Ethereum for a lower price. Simple as that.
00:36:21.260 - 00:36:21.494, Speaker B: Right.
00:36:21.532 - 00:36:34.778, Speaker A: So she now swapped USDC to the transaction, whatever she swapped in transaction to this harpaunch transaction. In this way, the loss is of Bob the user, basically.
00:36:34.864 - 00:36:35.162, Speaker B: Right.
00:36:35.216 - 00:36:39.846, Speaker A: So this is the way that these sandwich attacks occurs.
00:36:39.878 - 00:36:40.122, Speaker B: Right.
00:36:40.176 - 00:37:04.914, Speaker A: In this example also, you can see like simple, like there's again different transactions in the block, right? There's transaction one, transaction, transaction trans four. So transaction two will be like mev bot executor, like allies, basically. In this case, the mev watt. So her transaction is there and then the user transaction that is executed at a worse price.
00:37:04.952 - 00:37:05.154, Speaker B: Right.
00:37:05.192 - 00:37:08.050, Speaker A: So the user transaction is in between.
00:37:08.120 - 00:37:08.450, Speaker B: Right.
00:37:08.520 - 00:37:23.126, Speaker A: And then again, there is a transaction by the me, what? That closes that position. Like for example, whatever she did in transaction two, she's going to do the opposite thing from this. She's going to basically close the position with better price, making a risk free profit.
00:37:23.158 - 00:37:23.306, Speaker B: Right.
00:37:23.328 - 00:37:24.986, Speaker A: So there is no risk involved in this.
00:37:25.008 - 00:37:25.580, Speaker B: Right.
00:37:26.030 - 00:37:32.258, Speaker A: The brot has made the profit, the validator has the block builder invade the profit, and there's like zero risk involved.
00:37:32.294 - 00:37:32.494, Speaker B: Right?
00:37:32.532 - 00:38:15.046, Speaker A: So this is how the sandwich attacks works. And it's one of the most harmful types of mevs, like sandwiching attacks. And it has been executed more than 480,000 times profited miners at least like $190,000,000 at the expanse of users over last twelve months. So this is one of the things, one of the attacks that happens, one of the example could that homework that you can actually do research on is poisoned sandwich. Right, poisoned sandwiching, right. So this is also one of the interesting thing that you might want to learn on. So just go and Google about poisoned sandwiching.
00:38:15.046 - 00:39:08.890, Speaker A: What is that? Okay, moving forward to our different attack, the new tech. So the next strategy is the arbitrage and the liquidation, right? So these attacks take advantage of price differences, disparities between different taxes. The different tax dex is available, right? So it's pretty sure there will be price differences between the price difference very less in the flash loan, cash course, we actually did arbitrage. So if you want to keep perform arbitrage, go and check out my last cash course on flash loans. It was amazing, right? In this case, an attacker can simultaneously buy a token at a lower price on one decks and sell it at a higher price on another. Basically dexes, right? So this is arbitrage that happens. Like Bob sees this.
00:39:08.890 - 00:40:10.942, Speaker A: Basically, the apples are cheaper in another town, so he buys them from another town and then sells them in his town, basically at a higher price. So this is, in simple terms, what arbitrage is. Okay? Now, what is liquidation? Right? All these decentralized lending platform lending applications in the DeFi ecosystem, applications generally have this minimum required collateral value, like collateral balance for all outstanding loans, right? So if you take a loan out of the DeFi application, the lending and borrowing protocol, there will be like a minimum collateral balance required, right? Should the value of collateral, if that goes down below the minimum price, the application will automatically sell the locked collateral to prevent the overall system from getting insolvent or basically going to the bad health.
00:40:10.996 - 00:40:11.502, Speaker B: Right?
00:40:11.636 - 00:40:52.922, Speaker A: The liquidation is basically, it is seen as the positive outcome of the DeFi ecosystem. That's why sometimes people say that MeV is bad, but it's not the case. MeV liquidates position, which is good for maintaining the good health of a system. Right? If you're not even beginner, if you don't know anything about DeFi, check out stablecoin crash course, where I explained about how the makerdao and the DaO ecosystem works. Like the issue Dai tokens. So how the Makerdao actually works. Once the user, if you want to mint I, you have to submit collateral and open basically a CDP.
00:40:52.922 - 00:40:58.558, Speaker A: And if it can get liquidated, the collateral backing that I is not enough.
00:40:58.644 - 00:40:59.280, Speaker B: Right?
00:40:59.650 - 00:41:20.354, Speaker A: Yeah. So again, coming on to the example in the diagram, you will be able to see this mvv type liquidation. Okay, so there is a searcher. One searcher is basically, we'll talk about search in our next slide. Basically, you see Searcher right now as validator, right. He is going to make the block, right? He's involved in that process. Okay? Making the block.
00:41:20.402 - 00:41:20.710, Speaker B: Okay.
00:41:20.780 - 00:41:48.586, Speaker A: He's involved in that process. He's one of the component. So what he's going to see is that he's going to identify a liquidation of 1000 die. Okay? Basically there is a lending protocol, and he's like, he minted 100,000 die. He submitted collateral, but the price of the collector that he submitted, for example, eth, has gone down, and it is not enough for that die that he has minted.
00:41:48.618 - 00:41:48.814, Speaker B: Right?
00:41:48.852 - 00:42:21.942, Speaker A: So there is a liquidation opportunity, right. So what he's going to do is he's going to see that right here, the price of ethereum goes down, right? So he is going to purchase the liquidation assets on auction by lender at like a 10% discounts, right? And after that, he's going to sell that 1000 die at a market value onto the decks, actually. And then he's going to get a profit of 100 die because he auctioned by lender at a 10% discount.
00:42:22.006 - 00:42:22.234, Speaker B: Right?
00:42:22.272 - 00:42:57.418, Speaker A: So in this way, all these searchers, basically, they liquidate these positions and they gain price. So this is like one of the strategy, how they make money. And this is not bad. This is like improving the health of the ecosystem, right? This is not something that is bad. I know the sandwich attacks may be bad, I can understand that. But this is for maintaining the system's health, keeping the system healthy, right. Of this statics.
00:42:57.418 - 00:43:18.026, Speaker A: Like in 2022, over 47.5 total revenue was generated by arbitrage. Arbitrage. We just discussed price desperency, buying and selling it, buying at lower price, sending at a higher price or opposite. The liquidation is 10.8%. That was 33 million. The arbitrage was 47.5.
00:43:18.026 - 00:43:24.030, Speaker A: So arbitrage is like heavy market. And then there is sandwich, that was 41.7%.
00:43:24.100 - 00:43:24.430, Speaker B: Right?
00:43:24.500 - 00:44:01.626, Speaker A: So, yeah, this is like 2022 records. Three months have malled and risk increased. This was research by Argan Phi. So I'm just trusting them. And as I said, with the increased adoption of the DFI ecosystem and growing liquidity within the access, over time, more and more money is flowing to this deFi ecosystem, right? So more and more adoption is taking place, and the current profitable of these arbitrage opportunities have increased. A lot of opportunities has been increased in arbitrage system and lending and growing competition between these arbitrage bots. So people are not doing it.
00:44:01.648 - 00:44:02.026, Speaker B: Right.
00:44:02.128 - 00:44:27.266, Speaker A: Just to understand technical, there are like bots available who always looks for this. People are not always actively looking for these things, right? They create code. They create bots that are there to scan these and then find these and then liquidate positions. Okay, so there are bots, and these bots are competing with each other. So whoever writes the best code, the optimized code, will get this price. Okay, so they all are fighting. Cool.
00:44:27.266 - 00:44:54.534, Speaker A: Now, we have discussed all these strategies, types of MUV attacks, front running time and the attacks. You can google it. It doesn't really happens after the merge. And I already told you this video is after the like. Please read about time and the tracks. What is this? What is uncle Block? What happened with actually happened with Ethereum multiple times. But if I'm not wrong, this can't happen after the merge.
00:44:54.534 - 00:45:10.090, Speaker A: If I'm not wrong, if I'm wrong, please comment in the section. But I don't think so. It can happen after the merge. Okay, read about uncle blocks and how uncle blocks affects the blockchain. Cool. Now what is the problem of meV?
00:45:10.170 - 00:45:10.800, Speaker B: Right?
00:45:11.330 - 00:46:09.506, Speaker A: So as I said, mev is not bad. It is actually also good. But sometimes it can be very bad for the user, for user experience, as we know seen in the example of the sandwich, like in the defi ecosystem, it can be very bad. So what are the problems right now? One is centralization, right? So MEV is basically a threat to decentralization due to the nature of MEV, marketplace is left unchecked, it left to centralization. So whoever these validators and building validators who are building the block, right? So this can become a centralized process, and these few block builders are going to get more profit rather than few other validators, right? So we want to make it as a decentralized process. The topic, the motive of all these things like blockchain and web3, whatever, is decentralization. If we are not even able to make decentralization in every layer link, what is the use of it?
00:46:09.528 - 00:46:09.714, Speaker B: Right?
00:46:09.752 - 00:46:41.614, Speaker A: So we want to make it as decentralized as possible. We want to get everyone's equal support here, and we want to provide equal opportunity to everyone. That's why we want to make this process decentralization. And we are the community, the theorem community is actually working on this. Okay, we will see how that is going to take place in our future slides, which is very interesting. If you are till here, please watch that. That is actually the main thing.
00:46:41.652 - 00:46:41.950, Speaker B: Okay?
00:46:42.020 - 00:47:39.598, Speaker A: This is like the simple thing that everyone knows almost. If you didn't, then I hope you learned about it. The worst user experience, some MEV strategies like sandwiching results, as I said, and worst user experience like you have already seen in the example like this can be unprofitability for the liquid providers on certain blockchains. Dominant strategy for searchers is to simply spam transaction to extract value in simple different blockchains. What they do is validators or whatever the searchers, basically those who are included in that block building process, they simply provide spam transactions on to extract value. They're going to provide multiple transactions just to get the value this time, just increase concession and increases the transaction fee. So definitely user experience is worsened by MeV and we have to solve this together as a community.
00:47:39.598 - 00:48:16.534, Speaker A: And the researchers are working on this. And you can also work on this. After watching this crash course, you can also work on this. I hope you will get enough understanding of it and I will provide you the opportunities of how you can. What are the links? Provide you all the links where you can go and contribute to. Okay, what is flashbots? So now moving towards deeper topics, what is flashbots? Flashbots is so companies like flashbots, they help create rebalance in the ecosystem by searching the developing protocols that attempt to mitigate this negative externalities. Post vime.
00:48:16.534 - 00:48:22.618, Speaker A: Flashbots are like those people only who created the paper that we saw in the history Flashbots 2.0.
00:48:22.704 - 00:48:23.050, Speaker B: Right?
00:48:23.120 - 00:49:13.974, Speaker A: And yeah, the plan, save Ethereum from MEV by building sharing tools. So they have built multiple tools, MeV get MeV boost. We will discuss all these tools in the future. So basically they're like research and development organization, working to mitigate the negative results of the MEv and creating a better blockchain. And around 90% of Ethereum miners, all the miners or the validators, basically they have adopted these flashboards and companies core software, mev get, they're using it and mev relay, along with its open source guides for helping people become searchers, you can become a searcher has helped democratize mev by lowering the barriers to entry. So they've been doing good work. I'm not going to go deep into this slide because we haven't covered those topics.
00:49:13.974 - 00:49:36.370, Speaker A: So they have been doing good work. If you want to learn about them, go to Flashbots website. Just Google flashbots. I will provide the link in the description. You can learn about their different products, what the process they have done, and it can be a good starting point for you in terms of coding and executing it. We will also use flashbots in our coding section. Okay, moving on to our next topic.
00:49:36.370 - 00:50:24.226, Speaker A: That is PBS proposer builder separation. Okay, so what is proposer builder separation? Okay, so you are now already aware of that blockchain basics, like how that works. If you are not, just please go back and again repeat how blockchain transaction actually works. Okay, so proposal builder separation is basically a proposed solution to all the challenges that we discussed of censorship and mev attacks on the blockchain networks. The concept of PBS is rooted in the idea of separating the role of block construction and block proposal within the network itself.
00:50:24.328 - 00:50:24.894, Speaker B: Right.
00:50:25.032 - 00:50:34.690, Speaker A: And this separation of duties is designed to create more decentralized and secure network, while also addressing all these issues of meV.
00:50:34.770 - 00:50:35.350, Speaker B: Okay?
00:50:35.500 - 00:50:51.194, Speaker A: So in a blockchain network, especially talking about Ethereum, we have talked about all the transaction goes to this mempool. And then mempool, the validators, the block builder, they create a block, they include your transaction and that goes onto the blockchain.
00:50:51.242 - 00:50:51.646, Speaker B: Right?
00:50:51.748 - 00:51:27.154, Speaker A: So now what this proposal is saying, this is a very critical operation like transaction processing and block creation. It's very critical, right? This is the main thing, right? So in early blockchain protocols like Ethereum, all these validators were assigned two key duties, right? So these validators, as we talked about, who are going to pick transactions from the mempool, they were assigned two duties. What those duties were, one was that create the block. Like build the block and propose the block to the blockchain.
00:51:27.202 - 00:51:27.462, Speaker B: Right?
00:51:27.516 - 00:51:28.982, Speaker A: Also create one block.
00:51:29.046 - 00:51:29.322, Speaker B: Right?
00:51:29.376 - 00:51:33.994, Speaker A: Create that block and then propose that block onto the chain as well.
00:51:34.032 - 00:51:34.330, Speaker B: Right.
00:51:34.400 - 00:51:46.954, Speaker A: That we discuss. Let me show the diagram. So this notes will basically create the block, create a proper block and then propose this block to the blockchain. So it gets included.
00:51:47.002 - 00:51:47.166, Speaker B: Right?
00:51:47.188 - 00:52:05.646, Speaker A: So these are like the two activities that a validator has to do, right? Now what this proposal is trying to do is the same validator now would gather the pending transaction, like same validator and determine the block contents and order transaction, fully construct new blocks.
00:52:05.678 - 00:52:05.886, Speaker B: Right?
00:52:05.928 - 00:52:23.654, Speaker A: So that validator only used to gather the pending transaction, determine the block content and order transaction, fully construct the new block and propose it to the network. In this way, the block, it gets joined as the blockchain.
00:52:23.702 - 00:52:23.866, Speaker B: Right?
00:52:23.888 - 00:52:51.698, Speaker A: So this is what, how in traditional blockchains that used to happen. Okay, now what we are trying to do is we are trying to separate these two positions. Basically, these two key duties, sorry, right? These two key duties, we are trying to separate it and we want these two key duties, that is the block building and the block proposing to get to two different people.
00:52:51.864 - 00:52:52.338, Speaker B: Right?
00:52:52.424 - 00:53:01.666, Speaker A: So rather than a single person, single validator doing these two key duties, we want them to get separated and two separate entities to perform that duty.
00:53:01.698 - 00:53:01.990, Speaker B: Right?
00:53:02.060 - 00:53:20.134, Speaker A: Now, again, what is block proposer? Simply like? Block proposer is the body of the block, right? The body of the block is all the transaction that will go into that block. Simple as that. That is the block body of that block.
00:53:20.182 - 00:53:20.730, Speaker B: Right?
00:53:20.880 - 00:54:22.842, Speaker A: And the builder, like the building of the block is the proposing of the block is basically proposing that particular block to the blockchain, right? So these are like the QD duties, right? So now what will happen is that Ethereum mem pool, there will be a builder who will receive a bundle from searcher and from searcher we will talk about what searcher is, right? But this builder and proposer. So this builder is going to build the block, then this builder is going to give the block to the proposer, right? And then the proposer basically includes that block to the Ethereum chain, to the validator, like to the blockchain, whatever blockchain it is. Like if it's Ethereum, then yeah, to the Ethereum. It's as simple as that. The basically fundamental of vvs is to make sure that these two key duties, as the proposing and builder is separate.
00:54:22.906 - 00:54:23.326, Speaker B: Okay?
00:54:23.428 - 00:54:48.034, Speaker A: Now we will discuss the architecture of it in the future slide. But the main concept is to make sure that these two key duties, the proposing and building of the block is different, right? Building the block means all the content that are into that block, all the transaction that is into that block, right? And proposing it means that proposing it to the blockchain, okay? The new block has been added to the chain.
00:54:48.082 - 00:54:48.630, Speaker B: Okay?
00:54:48.780 - 00:55:25.886, Speaker A: Now there are two approaches to be implementing to the PBS. And before moving actually to this approach, let me tell you on the PBS side. So the work on PBS, this proposal was introduced by Vitalik, I guess, long time back. And now still the research is still going on, right? So the recent one was that two slot proposal builder separation, that was by Vitalik, right? Slot, basically slot means twelve second slots. That is the time where the validator, basically the builder has the time to propose the block.
00:55:25.918 - 00:55:26.066, Speaker B: Right?
00:55:26.088 - 00:55:45.142, Speaker A: That is the slot, the twelve second one. Okay, so the research is still going on, right? So you can actually go to this article, I will provide the link into this like two slot proposal builder separation. We will discuss it later. So you can actually go through and read this. Like what are the different types? How is this going to implement?
00:55:45.206 - 00:55:45.386, Speaker B: Right?
00:55:45.408 - 00:56:15.846, Speaker A: So still discussion is going on. We have talked about the essence, like what is the goal, what is the motive, but to implement it, there are different strategies, different techniques basically, right? So these techniques have been discussing, Vidalik has been giving ideas, community have been discussing there. So you can actually go and comment in this as well. And you can do your own research, you can get involved, whatever. This is the beauty of the Ethereum that you can use. It is all open source, it's all decentralized. You can get involved in the research.
00:56:15.948 - 00:56:16.502, Speaker B: Right?
00:56:16.636 - 00:56:39.226, Speaker A: People will listen to you if you're talking actually got cool. So before talking about actually the PBS, okay, so let's talk about this only. So there are two approaches to be implementing the PBS, okay? One is out of the protocol PBS. And one is the instriined PBS. What is the difference between that?
00:56:39.328 - 00:56:39.980, Speaker B: Right.
00:56:40.370 - 00:56:52.442, Speaker A: The out of protocol PBS is basically implementing this proposal builder separation outside of the blockchain, like not in the core client itself.
00:56:52.596 - 00:56:53.010, Speaker B: Right.
00:56:53.080 - 00:56:55.202, Speaker A: There is a blockchain running the client running.
00:56:55.256 - 00:56:55.860, Speaker B: Right.
00:56:56.630 - 00:57:29.686, Speaker A: And implementing PBS into the protocol is called instrument PBS. And proposing a solution out of the protocol, like not actually disturbing the main code base. It is called out of the protocol, just like account obstruction, ERC 433 seven. Remember in ERC 433 seven, what we are trying to do is we are trying to implement account obstruction out of the protocol. It's not native account obstruction, like ERC four, three, seven, not a naked ground account obstruction.
00:57:29.718 - 00:57:30.070, Speaker B: Right.
00:57:30.160 - 00:57:38.794, Speaker A: So similarly, out of the protocol PBS is like building another solution to implement PBS out of the protocol.
00:57:38.842 - 00:57:39.150, Speaker B: Right.
00:57:39.220 - 00:58:05.042, Speaker A: So MoV Boost is an existing third party solution from the flashbots that we will talk about and that operates outside the Ethereum protocol. And 90% of the Ethereum blocks has been produced with that. Right. Now, the current, whenever I'm recording this, it relies on centralized relays. That is one of the problem with it. But it is solution for now. And the next is the enshrined PBS.
00:58:05.042 - 00:58:14.982, Speaker A: It is the advocates for integrating PBS into the consensus layer of the Ethereum protocol itself. It aims to address the limitation and risk associated with the relying centralized g layers.
00:58:15.046 - 00:58:15.418, Speaker B: Right.
00:58:15.504 - 00:58:49.350, Speaker A: So current scenario is this out of the protocol PBS is already working in live mev boost protocol is third party solution by flashboards that is already there. We will discuss it. And the instrument PBS, it is basically better version. It solves the problem of whatever the problem out of the protocol PBS. The mev boost is showing us there are difficulties with that. We will discuss about it, censorship, decentralization, whatever. Once this is done, and this will get done.
00:58:49.350 - 00:59:14.800, Speaker A: The research is already going on. I've showed you the paper. So the work on this is already going on and this is already live. So this will come soon, but it's going to be the same. So we will discuss the architecture of the out of the protocol PBS and it will be almost same as the enshrined PBS. Cool. So these are like the two ways and yeah, let's move forward.
00:59:14.800 - 00:59:16.682, Speaker A: Ethereum roadmap.
00:59:16.746 - 00:59:17.070, Speaker B: Cool.
00:59:17.140 - 00:59:32.462, Speaker A: So in the, I have, if you google just Ethereum roadmap, you can see the Vitalik's tweet. So PBS is like one of the most important module on the theorem roadmap. There were different partitions, the merge, the surge, the scourge.
00:59:32.526 - 00:59:33.042, Speaker B: Right.
00:59:33.176 - 01:00:08.474, Speaker A: The merge has already happened at the time I'm recording, there was something called surge and then scourge. The third one was scourge. Scourge is the one basically where he talks about where this will be implemented, like in protocol PBS, right? The roadmap is not really clear. I didn't got the better picture. But yeah, it says like in protocol PBS. And it is one of the part of the theorem roadmap. And this one right there is like the chart one left is the Ethereum roadmap by Vitalik.
01:00:08.474 - 01:00:29.106, Speaker A: This one and the PBS roadmap by Mike Nuder. So Mike Nuder is one of the researcher, he's working on PBS. So he also gives this roadmap like what is two slot, which you discussed Vitalik's paper of two slot. We will discuss it later. PEPC. We will also discuss it. What is PEPC with Eigen layer, how it's that solving the mev boost.
01:00:29.106 - 01:00:48.074, Speaker A: We will discuss this. So this is like a deep side of the PBS roadmap, right? So, yeah, just wanted to show you, this is like the potential parts of PBS R D at this stage. This is like the latest thing that I'm showing you.
01:00:48.192 - 01:00:48.522, Speaker B: Right?
01:00:48.576 - 01:01:21.794, Speaker A: So, yeah. Cool. Let's now move forward to actually mev boost. What is mevboost and how is that learning? Right, so before flashbots, the only stakeholders in the ecosystem were searchers and the miners. Like the mining pools, right? I'm talking a little bit about the history. Not today, after like MeV Geth. MEV gets is one of the protocol that was released where relays were added to the mev extraction supply chain as a trustless communication channel between the miners and the searchers.
01:01:21.842 - 01:01:22.342, Speaker B: Right.
01:01:22.476 - 01:01:53.082, Speaker A: The move to proof of stake brought it with sophisticated level of staking providers, causing consensus level centralization. Okay, so when the merge happened, okay, when the merge happened, when the Ethereum blockchain moved to proof of stake, there was a discussion that we need this PBS, but this PBS not already. So in between there should be a solution, right? So that's why fleshbots actually introduced MeV Boost, to separate this role of block proposer and block builder.
01:01:53.146 - 01:01:53.760, Speaker B: Right.
01:01:54.530 - 01:02:05.446, Speaker A: And avoid centralization at the consensus level. So you might be thinking, why mev boost is there? It is not proper, but we need. This is like the in between solution. Till the Ethereum developers are working on.
01:02:05.468 - 01:02:06.040, Speaker B: The.
01:02:09.610 - 01:02:17.074, Speaker A: In protocol, enshrined PBS. Till that we need out of the protocol solution. That is mev boost, that is by flashlots.
01:02:17.122 - 01:02:17.478, Speaker B: Right?
01:02:17.564 - 01:02:22.246, Speaker A: So after the merge, this was very much required to avoid centralization.
01:02:22.358 - 01:02:22.634, Speaker B: Right?
01:02:22.672 - 01:02:52.862, Speaker A: But it is not perfect. Okay, so mev boost is basically early implementation of the proposer builder separation. We are separating the builder and the proposer, right? On the Ethereum, any validator node has the capability to run mev boost. So anyone, any validator who node, they can run this mev boost tool that allows them to receive bundle transaction constructed by builders such as flashbots. These bundles come with incentives in the form of the tips or brides.
01:02:52.926 - 01:02:53.394, Speaker B: Right.
01:02:53.512 - 01:03:34.962, Speaker A: We will discuss about it. Currently, 90% of the Ethereum Pos blocks use mev boost for block building, resulting in increase of proposer benefits by 55%. Okay, so as I'm saying, as of now, the validator, whoever is running it, they can actually run the mev boost protocol side by side, the tool basically, right? And they can take part in this particular process, the searcher, the builder, the user, and then there will be. So there are four major components. One is the user, user are just transition who are doing transaction. And after that your transaction goes to the searchers and then builders then relay mev boost. We'll talk about it.
01:03:34.962 - 01:04:43.842, Speaker A: Okay, don't get confused. One more thing also to remember is that consensus client and execution engine is different. So before the merge, if I'm correct, there was only one client that a validator has to run, right? The client was Aragon or the geth or the Nethermind client, right? But after the merge, there are like two clients that validator node has to run, the consensus client and the execution client, right? These are like two things that validator has to run and along with that, to make profit, to use this mev boost tool, you also have to run this mev boost tool side by side. Okay, so you just understand the diagram. This is like the validator node that is running the consensus client and the execution client. And then there is like a builder API, whatever, for this communication, right? And then this mev boost is basically this validator only has to run this tool, right, to get profit from this particular tool. Like get another person to build the block for you to optimize the movies.
01:04:43.842 - 01:05:41.450, Speaker A: Okay, now moving forward, don't get confused. Let's discuss the internal components. Okay, so on the block producer end, okay, so understand the diagram. There is execution layer client, there is a consensus layer client, okay, so this is like two clients that a validator has to always run, right? Cool. And now they are on the block producer side. Now what is going to happen is that the validator will connect with this mev boost software, this mev boost software, which is going to help him to get connected with the builder who is going to build the block. Okay, now, Ethereum public mempool, this is like the mempool that we showed all the transaction are here.
01:05:41.450 - 01:06:13.970, Speaker A: So what is going to happen? This searcher, like searcher is when empathy, like there are four main things involved here. Actually three main things, right? Four main things. One is searcher, one is builder, the other is relay, and the other one is proposer. These are like four main components of mev boost or PBS. Now the first one is searcher. Searcher is the one who collects the transaction from the mempool. He builds a bundle of those transactions.
01:06:13.970 - 01:07:30.438, Speaker A: After that he submits that bundle of transaction to the builder. Now, builder creates a block of those transactions and after that it submits the transaction to the relay, right? And from the relay, the block goes to the block proposer. Basically the person who is running the execution client and the consensus client, also known as validators. Okay, so this goes to the validator, right? Now, this is like the simple flow of how mev boost protocol works. And also this is like a win win situation since validators like this validator gets to keep the portion of the mev profits, often a significant majority, like up to 99% in atomic meV, right? And also without investing significant amount of strategy to development. And the searchers get to constantly extract value out of the transaction without 32 staking eth. Now what do I mean by saying that this is a win win situation for both of them, right? So this is like the validator and this is like the builder one, right? So just make sure that these two things are separate.
01:07:30.438 - 01:08:26.622, Speaker A: This is like the proposer, this is the builder. That's what the PBS is trying to do. Proposer, keep the proposer different. Keep the builder different. Okay, so now this is a win win situation for both of them. Now how is that win win situation for both of them is like that? The validator doesn't have to invest much of the time to create this strategy, right? We have talked about different strategy sandwiching, attack, front running, right? So all these strategies requires time and the power of the validators to do this, right? So in this way, on the validator side, the proposal side, he is able to give that time to that work to another person who will do it for him and he will make sure that it is more and more profitable. When we are going to separate the work.
01:08:26.622 - 01:08:46.450, Speaker A: Obviously the person who is more basically expert in a particular thing, like he will be able to extract more value, right? And if we are able to extract more value then this validator, they are going to get more out of it rather than creating their own block.
01:08:46.530 - 01:08:46.918, Speaker B: Right?
01:08:47.004 - 01:09:30.846, Speaker A: And on the other hand, why is this win win situation for builder? Because they are able to generate value without staking 32 e. Right? So to become a validator, to become a proposer in the theorem blockchain, you have to propose 32 ETH to propose those blocks, right? But if someone doesn't have 32 eth, and if they want to participate in this program, how will they do it? They can become a builder and they can become a searcher. They can build the block and they can provide the block to the validator. You provide some value to the validator, like whatever the tip, whatever you want to provide, and then you also get to keep the profit.
01:09:30.878 - 01:09:31.026, Speaker B: Right?
01:09:31.048 - 01:09:34.114, Speaker A: So in this way, this is a win win situation for both of them.
01:09:34.152 - 01:09:34.740, Speaker B: Okay.
01:09:35.210 - 01:10:08.234, Speaker A: Again, step one is very simple. Step two and three have divided into four steps. Step one is very simple. You are a user. Anybody goes to uniswap, whatever DAP, and then they just intent, they pass the intent to the DAP, whatever they want to do. And then their call data goes to the wallet, whatever wallet you're using, your metamask pops up. You sign the transaction, you approve the transaction, you sign that and your transaction goes to the RPC.
01:10:08.234 - 01:10:23.774, Speaker A: So your RPC, like your wallet has this RPC on the back end that is like a connection between your wallet and the blockchain. One can also run their own node, but yeah, whether use RPC or one can run their own node.
01:10:23.822 - 01:10:24.082, Speaker B: Right.
01:10:24.136 - 01:10:54.720, Speaker A: So after that it goes to the searcher. Now, searcher is like the part who is going to create a bundle of transactions. Now what is that bundle of transaction? We will discuss it after this. And after that, that bundle goes to the builder. The builder is going to build a block and after that the builders is going to submit that block to the Relay. And from relay, the most profitable block goes to the proposer. Okay?
01:10:55.330 - 01:10:56.080, Speaker B: Yeah.
01:10:57.490 - 01:11:17.026, Speaker A: If you don't understand like step one, go and read more about Dapps and how blockchain works. You will be able to understand it. But yeah, it's pretty simple. And then step two and three are like simple one. Just make sure that you remember this flow. Okay. Searcher, builder, relay and proposer.
01:11:17.026 - 01:11:23.766, Speaker A: Because now we are going to discuss searcher, builder, relay and proposer in different in depth actually.
01:11:23.868 - 01:11:24.374, Speaker B: Right.
01:11:24.492 - 01:11:33.514, Speaker A: How can you become a searcher? How can one become a builder? What happens under the hood? Internal architecture, each and every technical things, code base.
01:11:33.552 - 01:11:33.706, Speaker B: Right.
01:11:33.728 - 01:11:35.014, Speaker A: And the relay and the proposer.
01:11:35.062 - 01:11:35.322, Speaker B: Okay.
01:11:35.376 - 01:11:46.954, Speaker A: So just remember this flow. You can take a screenshot, save this, whatever, but just remember this flow, right? Transaction goes to searcher, searcher to builder, searcher to builder, to relay, and then relay to proposer.
01:11:47.002 - 01:11:47.502, Speaker B: Okay?
01:11:47.636 - 01:12:40.122, Speaker A: Now let's discuss each and every single topic. Now let's first discuss searcher, okay, so after discussing every single component, I will come back to this diagram, okay, so you get a proper thing, a proper knowledge about it. Cool. So let's discuss the searcher. So as of now, your transaction is gone to the RPC, right? You've signed the transaction. Now from the RPC, your transaction has gone to searcher. Now what is searcher going to do? Okay, so searcher, what is searcher? So searcher can be anyone that uses the blockchain looking to gain a profit by reordering, inserting or censoring transaction in the block, right? So basically searchers scan the pending transaction that is visible in the mempool and compete against each other for opportunities to execute their mev strategies.
01:12:40.122 - 01:13:00.642, Speaker A: Okay, so anyone can be a searcher. You don't need to be a specific person. Anyone can be a searcher, right? And there will be different searches that will compete against each other to find the maximum value that can be generated from reordering the transaction.
01:13:00.706 - 01:13:01.320, Speaker B: Right.
01:13:02.330 - 01:13:08.626, Speaker A: Now you must be asking all these questions like who are these searchers? Can anyone be a searcher? Yes, anyone can be a searcher.
01:13:08.658 - 01:13:08.806, Speaker B: How?
01:13:08.828 - 01:13:35.326, Speaker A: Why do they participate in the extracting game? How they ensure that strategies gets executed? How exactly do they make profit? What makes Searcher competitive? We will discuss it in all these questions in the next slide. But as of now, although there are limited number of opportunities to extract value from the reordering transactions, and the fastest searcher to identify this mev opportunity is often the searcher to earn the most mev.
01:13:35.358 - 01:13:35.650, Speaker B: Okay?
01:13:35.720 - 01:15:26.430, Speaker A: So to maximize the earnings competitive, searchers will write scripts to automate this task of exploiting easily identifiable opportunities for the MEV. And in addition, searchers may run dedicated hardware or subscribe or to pay services, offer low latency to take advantage of the pending user transaction, right? So what here I'm trying to say is that this searcher, this is a searcher, his job is to always look into this pending transaction, right? His job is to always look into this pending transaction and make sure that all the transactions, to make sure that he can extract the more and more value out of these pending transactions, right? So he may run a dedicated hardware, he may run his own node, he may subscribe to paid services because to offer the low latency views, right? So you don't want any latency in the transaction that is coming onto the mempool, because as I already discussed, there is no single mempool, right? There is no single public mempool. There are multiple mempool, like every node. If you're running a node, you will have your own mempool, right? So whoever is running the better hardware whatsoever, he will have low latency. And this gets an advantage over the person who is the searcher who is getting the transaction later in his mempool, right? So this can be the same, this can be the same. And this is like very competitive, right? So these people run, the searchers always run like dedicated scripts and bots, whatever, to maximize the earning, right and to outcome. Other searches, like seasoned and sophisticated searchers may deploy complex strategies involving multiple token swap bots, manual searching on chain activity to achieve higher and higher profits.
01:15:26.430 - 01:16:14.580, Speaker A: So these searchers deploy complex strategies and involving multiple token swaps, it's not an easy job, right? You have to be an expert on this. How can you become a searcher? Let's discuss the searcher's mev process, like how a searcher thinks. How are things going inside in a searcher's head, right? So basically the job of the searcher is to create a bundle, right? Just simple job. Just to remember, the job of the searcher is to create a bundle of transaction, right? And to execute mev opportunities. There are like few key skills. The end concept a searcher needs to possess Tika, there is the discovery period after that. So basically the searcher always discovers the pending transactions here.
01:16:14.580 - 01:17:33.582, Speaker A: Then he understands the opportunity. Right? Now to be a searcher, no, you have to be an expert on DeFi to understand how transactions works, how EVM works, right? Because then only you will be able to understand what is happening, right? And after that he understands the opportunity and then he determines mev prevention or determines the competition, because there will be competition and then there will be like monitoring and logging phase, because you have to make sure that you're always monitoring it. And then there is execution strategy and combining monitoring and execution strategy, right? So in addition, it is very important for searchers to have knowledge of Defi and programming languages like Python, Javascript, rust, basically, et cetera. Then these skills are important because searchers need the ability to extract information from the sending transactions to the blockchain, right? So it's very important, right? Let me tell you a few more things. If you want to connect with the blockchain, you're sending any transactions so there are two things that you can do. Either you can use services from RPC provider like alchemy or Quicknode anchor. These are companies, the organization that is providing you service.
01:17:33.582 - 01:18:23.562, Speaker A: Basically they are running the node for you and you can access that node. The other option is that you run your own node, right? So there are two options right? Now if you use, so there was a research, actually there was someone who created a script for that. It's very simple script, right? So if you're running an alchemy using an alchemy node, if you want to see the transaction mempool, then it was taking more time than actually running your own node. And although running your own node, in running your own node, there are different clients. There is geth, there is Anagon, there is another mind. So now, searcher, always look which client is better for you. So you might want to use Aragon because it shows you better, it gives you low latency, right? You want to use nethermind.
01:18:23.562 - 01:19:03.100, Speaker A: So these searchers are always looking to reduce the latency, like they want low latency because they want the transaction to be visible in their mempool as soon as possible, right? So as low and low latency, and the most optimized their code is, and their code can be written in rust. They can be written in Python from whatever heard, from what I have heard and read Python and rest. I like two more important things, like two more optimized. One, rust is the most optimized. So most of the searchers script are in rust. Okay, yeah, thanks for that short session. Now move forward again to the crash course.
01:19:03.100 - 01:19:49.474, Speaker A: What is the flow of the searcher Mev process again? Flow, we are discussing Searcher, right. So in searcher, what is the job of searcher? Like flow of Searcher's job. Okay, so the first, most thing is, and this is post merge. Okay, this is post merge. So first thing is the transaction is watching phishing from the public mempool. The first step is this, like users sends their transaction to the mempool with the hope of security securing a spot in newly added block. You want, your users want to add their transaction to the block, and these transactions are then routed to the public nodes worldwide.
01:19:49.474 - 01:20:29.554, Speaker A: Okay, and how it's important to note that these mempool lack synchronization and resulting in the absence of, as I said, global, there is no global mempool. So for those of you who are interested in actually exploring the source code for the mempool, actually let's go to the get client and let's see the code base. Okay, that's an interesting thing. Okay, let's actually check out the mempool code. Okay, I hope you're able to see my screen. Yeah, you're able to see my screen and I'm on actually the get client code base. Okay, so now I'm going to take you to the file, to the mempool.
01:20:29.554 - 01:20:51.526, Speaker A: So transaction pool, it should be there. Sorry, transaction pool. Oh cool. Yeah, it's there. So if you want to explore the mem pool, actually mempool in the code base, in the code terms, this is in Golang. Okay, so this is like the transaction pool. This is the actual mem pool that live mem pool.
01:20:51.558 - 01:20:51.754, Speaker B: Okay.
01:20:51.792 - 01:21:19.734, Speaker A: This is the code base for that. So if you are someone who wants to become a searcher or something, then yeah, this is something that you can look to reserve, just different functions, close loop, whatever. I don't even fully understand myself, but yeah, there's just different functions that if you want to become a search and then you should be just aware of this code base.
01:21:19.772 - 01:21:20.758, Speaker B: Okay. Yeah.
01:21:20.924 - 01:21:38.726, Speaker A: Okay, let's move forward to the theory. We will share the code base later. Okay, cool. So as I said, so where we were, how it's important to know that this mempool lacks synchronization. As I already said, there is no single mempool.
01:21:38.838 - 01:21:39.210, Speaker B: Right?
01:21:39.280 - 01:22:48.850, Speaker A: So these mempool are these transaction pools in geth that we just saw, right? So these are like the transaction pools. And searchers sometimes actually they run their own node and others pay to meme pool services. Like there is a company called block native. So what block native does it? It is basically for searchers to provide an API to receive all that mempool data in faster terms at a minimal latency to run their own nodes. So you don't need to run their own nodes, right? So as I was discussing before, right, if you are using RPC services API like for alchemy and anchor, then it will be very slow for you. And if you are running a node, then it might be like you need all this specification, 30 GB GB ram, whatever depends on the clients, right? So rather than running your own node, and you also want low latency. So what these companies are doing is they are providing you APIs, so you don't need to run your own node and you also get low latency as well, right? This is like a whole network now, a whole new ecosystem now, right? So that's just funny.
01:22:48.850 - 01:23:04.834, Speaker A: To receive and not to run their own nodes. As I said, like latency optimization is very important for searchers, and because it actually allows to compete with other opportunities. And just before the end of the 12 seconds, Roth. So everything is happening in like 12 seconds.
01:23:04.882 - 01:23:05.480, Speaker B: Okay.
01:23:06.890 - 01:23:34.762, Speaker A: And this is like the first steps that the searcher is looking into the mempool. We just saw the file. And as I said, that you need something, a PI or run your own node to get access to this mempool. Okay, now next step. What is the next step? The next step is running a simulation, right? So searchers will proceed to run a simulation on the chosen transaction using their privately owned nodes.
01:23:34.826 - 01:23:35.486, Speaker B: Okay?
01:23:35.668 - 01:24:16.106, Speaker A: Nodes or basically whatever. Basically, if you're using the API, you can use tools like ReVM. So the purpose of this simulation is to observe how the execution of the selected transaction will impact the state of the blockchain. By analyzing the opcode, searchers will gain insights into how transaction will unfold. Right, and to receive like to. One approach is to run a simulation. And creating a simulation would be to run a locally hard forked main net, where each transaction can be executed with an isolated EVM environment.
01:24:16.106 - 01:24:23.834, Speaker A: By meticulously analyzing the opcodes, the searchers can actually gain an insight of how the transaction will unfold.
01:24:23.882 - 01:24:24.190, Speaker B: Right?
01:24:24.260 - 01:24:53.302, Speaker A: So to facilitate this process, searchers can employ tools like, they can run their own tools like ReVM or arbiter, right? So it's like they're running their own EvM to make sure, just to see like whatever opcode, not to optimize, just to see how these opcodes are, to analyze these opcodes, how are they running, what is happening? Right. How the transaction that he included in a bundle.
01:24:53.366 - 01:24:53.546, Speaker B: Right?
01:24:53.568 - 01:25:22.334, Speaker A: So basically the job of the searcher is to create a bundle, right? So just to simulate it. Like what will happen if the bundle unfolds? He is running his own EVM to make sure. How is this working? It's just basically a simulation that he's trying to do, right? So let me also just search RevM and show you guys what is that, right? So RevM is cool. Yeah, RevM is all you need. You can actually go to GitHub.
01:25:22.382 - 01:25:22.546, Speaker B: Right?
01:25:22.568 - 01:25:59.578, Speaker A: So this is like REvM, this is like rust Ethereum, virtual machines that mostly searchers use to simulate all these transactions, to simulate all the builders, right? So yeah, just say three vm compatibility, stability, interfacing, and then blah blah. You can just check it out. I need to move faster to complete this transit, complete this course in less than 3 hours. I'm just showing you all these things. Just go and explore it. Okay, I'm just giving an overhead of how things works. If you're actually interested in RevM.
01:25:59.578 - 01:26:05.714, Speaker A: This is like a rust based ethereum virtual machine, which is amazing. And if you are a coder developer, then definitely check it out.
01:26:05.752 - 01:26:06.194, Speaker B: Okay.
01:26:06.312 - 01:26:26.326, Speaker A: Okay, moving forward, simulation, as I said. Now the second step was simulation. Simulation is happening. Either run your own heartfoked main net or with an IVM isolator machine, or run these tools like ReVM and arbiter. Arbiter is also one of the things you can check out. Arbiter. Okay.
01:26:26.326 - 01:27:04.658, Speaker A: Sending transaction bundles to builders. Okay, the third step is that, right. So if the simulated output that he's dead shows a promises, searchers will proceed to bundle the transaction together with the one selected from the public mem pool. The purpose of this building is to ensure that their transactions are executed either before or after the public transaction, right. So after this simulation has been completed, it goes to the builder. And then basically the submission should be promising. No, if he created a bundle and if that bundle is not promising the MEV, it's not creating value, then why would he proceed forward.
01:27:04.658 - 01:28:11.260, Speaker A: And if this simulation is successful, is promising value, then the propose of this buildings to ensure that there is transaction executed, so its transaction will be gone forward. And basically the purpose of bundling why the bundle is creating to ensure that their transactions are actually executed either before or after the public transaction. Enabling strategies such as front running, back running or sandwiching. We all saw that, right? And how much important is the flow? Like the proper, not the flow, the proper executed transaction. It should be properly executed and step by step. And there should be a proper structure to that, right? So we want to make sure that they unfold like line by line, right? So this is very important. That's why it is important to create a bundler to enable these strategies like front running, back running, your transaction should always be before that particular transaction that the user has done or sandwiching whatever it should be in between.
01:28:11.260 - 01:28:51.510, Speaker A: His transaction should be in between your transaction, your two transaction, right? So that is like one of the things. So validators will then execute the transaction within the bundle to specific order and ensuring that the simulator transaction unfold as expected. So this is like the job of the builder. Now, to accomplish this, searcher utilizes private relays where transaction bypasses the mempool. Instead go through builders like flashboards. Okay, so simple as that simulation is completed and after that through private relays, it goes to builders and these builders are flashbots. And then after that, the validator with mev boost will propose a new block to the network.
01:28:51.510 - 01:29:19.578, Speaker A: This is like after searcher's process. So searcher's work here is completed. He has submitted the builder, like the bundle to the Builder and now the builder is going to work. So any validator tool that is running that Mev boost tool that we just discussed. So you have to run this, right? So you have to run this as a builder and you get this bundle from the searcher.
01:29:19.674 - 01:29:20.078, Speaker B: Right.
01:29:20.164 - 01:29:43.990, Speaker A: And the bundle come with incentives in the form of tips or bribes. You have to provide it. That's how things work. You're working together. So you have to distribute prices among you guys and they will receive bundle transaction, propose a new block to the network. Simple as that. We are not going deep from builders into the builders and proposer component for now.
01:29:43.990 - 01:30:25.282, Speaker A: We will go deep once we discuss that. Now we are discussing searchers, right? So searchers drops here, is completed and then the proposers is basically the proposer submits the block to the blockchain and searchers earn profit from successfully executing transactions. So once the proposer submits the transaction to the blockchain, his bundle, the bundle of that searcher is correctly executed, then he gets the profit. Simple. And yeah, so this is the proper searchers Miami V process. Hope you understood it. Now let's discuss some searchers fact.
01:30:25.282 - 01:30:35.170, Speaker A: Okay, so search the fun few searchers fact are like the searcher has to bribe the block builder with a promise of a specific amount being paid to the validator.
01:30:35.250 - 01:30:35.590, Speaker B: Okay.
01:30:35.660 - 01:30:52.578, Speaker A: So in addition to the builder receiving the searchers bundle has to win against the other builders. In the builder auction, there are two work, basically one work of bundle. The searcher is to build a bundle.
01:30:52.694 - 01:30:53.070, Speaker B: Right?
01:30:53.140 - 01:31:03.194, Speaker A: And then it has to make sure that the bundle is included in the blockchain. Because if the bundle is not included in the blockchain, how will the searcher make profit?
01:31:03.242 - 01:31:03.406, Speaker B: Right.
01:31:03.428 - 01:31:11.726, Speaker A: He has created a bundle, but if that bundle is not executed on chain, then how will they will make a profit?
01:31:11.758 - 01:31:11.954, Speaker B: Right.
01:31:11.992 - 01:31:15.934, Speaker A: So this also has to make sure that your bundle is included in the blockchain.
01:31:15.982 - 01:31:16.674, Speaker B: Right?
01:31:16.872 - 01:31:24.274, Speaker A: So this is also one of the things that needs to be taken care of. And this is something that is not in the hands of Searcher.
01:31:24.322 - 01:31:24.582, Speaker B: Right.
01:31:24.636 - 01:31:31.338, Speaker A: So searcher has to bribe the block builder with a promise of a specific amount being paid to the validator itself.
01:31:31.424 - 01:31:31.674, Speaker B: Right.
01:31:31.712 - 01:31:35.082, Speaker A: So there has to be a bribe given to the block builder now.
01:31:35.136 - 01:31:35.498, Speaker B: Right?
01:31:35.584 - 01:32:15.154, Speaker A: So because searchers have little control over this, it relies on the rest of the transaction that the builder has access to. Now, it's the builder's job is to make sure that the block is included. Right now you must be thinking like, as I said, there are different builders, right? So there are different builders. And you must be thinking like the best way to make sure as a searcher that your bundle is included in the blockchain, it goes on chain, is to make sure that let's distribute all the bundles to all the builders that are. Most of the builders that are provided, that are there in the ecosystem.
01:32:15.202 - 01:32:15.414, Speaker B: Right.
01:32:15.452 - 01:32:39.594, Speaker A: In the system. But no, that is not the case. Why? We will talk about it. When we talk about builders, one of the things I can actually tell you, because there is no proper authority, there's no promise that builder might not take your bundle that you have created where the value is and they might take it and they might run away and they create their own block.
01:32:39.642 - 01:32:39.806, Speaker B: Right?
01:32:39.828 - 01:33:09.042, Speaker A: So this can be the case. That's why it is not the optimal strategy. We'll discuss it when we will discuss builder. But yeah, this is one of the thing. The other fact is that theoretically, anyone with a computer and ability to code and willingness to find opportunities can start working on MEB, right? Practically, yes. Like theoretically, yes, but practically, that is not how what happens anymore. It is tough now to compete with experienced Meb traders in this landscape.
01:33:09.042 - 01:33:33.754, Speaker A: The more niche, the more opportunity, the more likely La Solos or just will be able to competitive. So it's not easy. As of now, if I'm not wrong, like one to two years ago, it was little easy because there was less competition. And now I'm saying you can become a searcher. It's not like you can't become, but you have to get more opt. You have to write more optimized code. You have to get more hardware.
01:33:33.754 - 01:34:08.246, Speaker A: You have to invest money in this, right? So you can be a searcher. But it's now hard to compete with just experienced MeV searchers and builders. Okay, you can become a searcher. Just go to flashboard's discord server and you will find a searcher channel there. Start exploring, dude. So as I said, one of the things that this is because the profit opportunity is not enough nowadays to attract the sophisticated teams. Some of the searchers, what they do nowadays is that they focus on alternative chains.
01:34:08.246 - 01:34:17.034, Speaker A: Like some focus on l ones, on different l ones, like the theorem, whatever l ones are there. Solana, Avalanche, flare.
01:34:17.162 - 01:34:17.454, Speaker B: Right?
01:34:17.492 - 01:34:22.682, Speaker A: So these are blockchains. Some MeV searchers, they focus on a single blockchain.
01:34:22.746 - 01:34:23.166, Speaker B: Right.
01:34:23.268 - 01:34:28.818, Speaker A: And some focus on l two s. Right. There are so many l two s out there. Or new chain or application.
01:34:28.904 - 01:34:29.154, Speaker B: Right?
01:34:29.192 - 01:36:18.322, Speaker A: So there was recently friend Tech right? So if you go and Google or search on Twitter about mev opportunities on friend Tech, on friend tech. So these searchers were just targeting friend tech and they made like millions out of it, right? So yeah, a few searches now these days they are just focusing on a single application or they're just focusing on a single chain, right, to just maximize the value out of it because you can't go everywhere now because it's a competitive space now and this competition is going to increase day by day. Okay, cool. And the third one is searchers have deployed smart contracts on Ethereum, which contains actual code that extracts the MeV, like executing a DeX and searchers bundle contains a call to these smart contracts. Okay, simple. So these searchers have already deployed smart contracts on the Ethereum chain or whatever chain and which contains the actual code, right? So you just get very less time to do this, right? So when you're creating a bundle, what will happen is that here is suppose in a sandwich attack, right? So here is your transaction or maybe front running, right? So before the user's transaction on top of it, there will be another transaction that is going to basically call the deployed smart contract in the theorem, which is like, hey, the user is trying to get more and more eth, let's front run him and do something else, whatever example, right? So do it before that. So this transaction is going to call that smart contract that is deployed on the Ethereum blockchain and then that particular operation is going to happen, right? So these contracts are deployed by the searchers to execute swap or whatever.
01:36:18.322 - 01:36:40.922, Speaker A: In a DAX or whatever example you can take any example buying a token uniswap before a retail user. This is like example of Frontrun that I just explained it to you, right? And the searcher's transaction that the searcher wants to extract MVP from, right? So as I said, there are already deployed smart contracts on Ethereum that you have just have to call and just swap it, right? Because you have very less time for that.
01:36:40.976 - 01:36:41.338, Speaker B: Okay.
01:36:41.424 - 01:37:30.234, Speaker A: One more thing that you can actually also that I want to tell you is that if you want to become a searcher, because this is the last slide for searcher, it requires sophisticated traders and engineers these days and opportunities like arbitrage and liquidation, like front running, sandwiche, whatever, are among these like short tail of mev strategies. And you have to get more proper hardware, spend more money on that. We just talked about RPC versus node. You have to run your own node. Don't use alchemy RPC for that. Use like block native API, if you can get paid for that, and then use proper languages to optimize the bots and write the scripts. Use rust or use Python, whatever.
01:37:30.234 - 01:37:45.102, Speaker A: Like rust is better. So go for rust. And sometimes Python is better. JavaScript, whatever. Just make sure that your code or your script is optimized because this is a competitive space. Okay, cool. Now let's move forward to builders.
01:37:45.102 - 01:38:02.994, Speaker A: Okay, but yeah, let's actually go back to the diagram as I promised. Here is searcher. Searcher submits his bundle to the builder. Okay, searcher's operation has been done. We have discussed everything. What a searcher is doing now. He's getting some build that bundle to the builder.
01:38:03.042 - 01:38:03.638, Speaker B: Okay.
01:38:03.804 - 01:38:37.774, Speaker A: Now what is the builder's job to do in depth. Okay, I'm going to go a little fast now because it's getting very broad crash course and I want to complete it as soon as possible. I don't want to create it like for 4 hours because people get poor and they don't watch. So I'm going to go a little faster now. Cool. So as covered in the previous section, like block builders basically collect transactions, collect transaction and search bundles. Searcher bundles to provide block that they submit to the relay, which forwards us to the block proposal in that slot.
01:38:37.822 - 01:38:37.986, Speaker B: Right.
01:38:38.008 - 01:39:32.674, Speaker A: We discussed the overall flow. So builders, right? Now you can say like it's the new stakeholder in the MeV supply chain responsible for packaging a transaction in bundles from searches along with individual transactions from the public mem pool and private transaction order flow into the, basically into a blocks, right. The builders are themselves searchers in some capacity. As the task of building a maximum profitable block does not depend upon rerunning transaction bundles alone. It also depends on simulating how block space not occupied by the bundles can filled up with profitable transactions from the mempool and other sources, right? So basically the job of the builder is to take the bundle of transaction from the searcher and also take transactions from the public mempool, right? So he can also take transaction from the public mempool. It's not just that he wants to that bundle of transaction into this block, he can also take transaction from this mempool as well.
01:39:32.712 - 01:39:33.300, Speaker B: Right?
01:39:33.990 - 01:39:53.594, Speaker A: And there will be different builders like we have already talked about it. And also the reordering searchers. Searcher also sometimes act as a bundles. The block builder also act as sometimes as a searcher because you have to make sure that the profitable transaction included the transaction, the bundle is executed in that way.
01:39:53.632 - 01:39:54.026, Speaker B: Right?
01:39:54.128 - 01:40:52.670, Speaker A: So it's also the job of the builder. And while searchers may specialize in the task of extracting MAV from a specific DeFi protocols. Builders generally have a wider view of eligible transaction for know in block in a specialized task of full block simulating from multiple sources. So as I said, searchers sometimes just focus on single deFi protocol, right, specific deFi protocol. But builder, like this builder has specialized tasks for simulation, has a broader view of the mempool all over the transaction, right? So these block builders try to assemble a block that allows them to maximize the amount that they pray to the proposer of the next block. Like proposer, he's going to submit this block to the proposer, right. From the Mev available.
01:40:52.670 - 01:41:14.126, Speaker A: He has to provide some tips, basically to bribe the proposer so that he can pay more. His block basically gets executed on the blockchain, right? So bundle needs to build blocks from non overlapping bundles, basically meaning that the same transactions cannot be included twice in the block.
01:41:14.158 - 01:41:14.306, Speaker B: Right.
01:41:14.328 - 01:42:11.366, Speaker A: So he have to make sure that. So it's not, again, an easy job. So, searcher, suppose, for example, there is a transaction from searcher in the bundle of the transaction, and he can't include the transaction twice from the transaction mempool here, right? So he has to make sure that a transaction is not just twice in that particular block, right? So you have to make sure of that. So it's just not an easy job to do again, right? So these are the smallest small things that are happening under the hood, okay? Right. So thus, builders usually select the searcher whose bundle promises it to pay it most, right? As I said, there are different builders. So usually the builders always select the bundler, the bundle of the transactions who promises it to pay the most. The bundle where there will be more value, that particular bundle builder is going to pick.
01:42:11.366 - 01:42:33.946, Speaker A: Okay, cool. Now discuss some builders facts. We will have to discuss that, show you some diagrams. But these are like some important facts that you should be aware of. First of all, this diagram is like top ten block builders by block, proposed daily. Like, this is Galaxy Research. So these are like builders, top ten block builders.
01:42:33.946 - 01:42:55.102, Speaker A: Their name, they might be anon, whatever, right? So, yeah, this, how much profit they make? Three. Whatever, right? This is daily, like daily three e. And this amount goes down and then, yeah, these are like top builders. You can go and search these names. You will get it. Number of block proposed blocked with profit. Blocked with subsidy.
01:42:55.102 - 01:42:56.134, Speaker A: You can check it out.
01:42:56.172 - 01:42:56.470, Speaker B: Okay.
01:42:56.540 - 01:44:08.934, Speaker A: Some facts about it is like MeV Boost will select the block that pays the most to the validator. Searching building is also like a highly specialized and competitive marketplace. As I said, the order flow represents the bigger advantage that builders have over each other, right? And if a builder has access to the bundle that other builder doesn't, right? And if those bundles contains more ivv than what competing builders have access to, a builder will be able to submit a higher value block to the validators and land on chain more often. So suppose if a builder has more access to that particular bundle that has more value, then there are high chances that his block is going to get submitted. An MEV boost always selects the most, pays the most, always selects the block that pays most to the validator. So after this process, this is like after the builders have built the block, the mev boost will always select the block that pays the most to the validator. So most profitable block will be already be selected.
01:44:08.934 - 01:45:27.102, Speaker A: Okay, so every searcher does not trust every builder due to the potential for mev stealing. So I talked about this in the previous slide like searchers do not submit their bundles to every builder available, which differentiates the order flow between builders. While it may seem that the optimal strategy for them for the searchers to send their bundles to every builder, but that is not the case. To maximize the chance of being included in the next block, this does not really happen. Practically every Searcher does not trust every builder due to potential for mev stealing, right? And some builders charge a fee for their services, which might affect the profitability of a specific strategy such that they prefer not to send bundles to such builders. In addition, like sophisticated hardware, builder rely on close collaboration with specialized searchers that identify mev from strategies more complex and profitable than their own. And from the perspective of searchers like builder may also front run searchers bundle itself, right? So we have talked about bundle, we have talked about bundle.
01:45:27.102 - 01:45:56.026, Speaker A: We have talked about front runs, front runs as well, right? So this might happen like the searcher. So there are different builders. One, two, three, whatever. In this diagram you can see there are different builders. So you might think that searcher should always provide his bundle to every builder, right? Just to make sure that his bundle get executed and he may get the profit. But this is not the case. What if he provided bundle to this builder and this builder is like that, hey, I got this bundle and now I'm going to front run you.
01:45:56.026 - 01:46:00.154, Speaker A: And actually he submit that bundler of my own, I will not give you any profit.
01:46:00.202 - 01:46:00.366, Speaker B: Right?
01:46:00.388 - 01:46:41.902, Speaker A: So this can happen. This can happen, right? So that's why searchers usually submit transactions to not every builder, only to those who they trust and who they have been working with for a long time. So this may happen, right? So yeah, it's always like trust. Reputation as an honest builder is key here and to facilitate the close collaboration between specialized builder and independent searchers. So they are like independent searchers. So they have close relationship with these builders and this is very important, right? And sometimes people who are searcher and who are builder are like same entity. This also happens, okay.
01:46:41.902 - 01:48:03.078, Speaker A: The new builders can only really break into the less market, potentially operating loss through block subsidies, less like this means that searchers will send their bundles to the block builders who are historically most successful at lending their blocks on chain, right? So this can be the same searcher will only check the reputation of the builder. Like hey, if this is historically most successful lending their block on chain, then why not choose that builder over other builder, right? So this can be happened. So these searchers do not send bundles to lax successful builders unless they're certain that bundles will not get stolen or get front run or get censored. This trust is very defensible mode for incumbents. New builders can really break into the market by actually initially running at a loss and by paying above the value to the block to win the previous auction or by paying for exclusive order flow. Does it like to make sure that their identity or their image in the particular ecosystem is good? Then only builders, the searchers are going to trust it, right? So here also you have to make your image and run at a loss in first. Then only you can enter into that market.
01:48:03.078 - 01:48:10.566, Speaker A: Okay, cool. The other one is, if the builder were to continue stealing bundles, eventually enough searchers would stop using it.
01:48:10.588 - 01:48:10.774, Speaker B: Yes.
01:48:10.812 - 01:49:19.306, Speaker A: So searchers would whose bundle was stolen. So it can be a case like if there is a bundle who stoles the bundle of the particular searcher, then a different address from the executed bundle. Basically if the bundle is executed from different address from the executed, who executed the bundle after this searchers who use MeV was stolen, they would stop using that builder. So if you are a builder and I'm a searcher, if you front run my bundle, or if you stole my bundle, I will not be able to. I will not again provide again work with you, right? So we will stop using that. Now, if this bundle, what you continue stealing bundles where eventually enough searchers would stop using it. Like if you do it once and if you do it again and again, then there is a group and searchers basically talk to each other, right? So they have different groups, they have different discord servers, you can join them, right? So they usually talk and if they talk and they realize that, hey, this block builder is stealing mvv.
01:49:19.306 - 01:49:41.794, Speaker A: So they will discuss and they will blacklist the builder and they will not use it. Right. This is because it would be building blocks from such smaller sections, selection of bundles and other builders, which limits to likelihood that it constructs the most valuable block available. Searchers, they talk to each other, as I said on these groups, and they will get to know if search builders continue stealing the blocks.
01:49:41.842 - 01:49:42.342, Speaker B: Right.
01:49:42.476 - 01:49:47.410, Speaker A: So, yeah, these are some facts and some in depth things about builder.
01:49:47.570 - 01:49:47.990, Speaker B: Okay.
01:49:48.060 - 01:50:10.222, Speaker A: So, yeah, I hope that is very clear. It's not a piece of a cake here. You can also become a builder. Now, I hope you get things started. Now let's move to other component that is relay. But before moving to relay, let's go back again to the diagram. So step three, here is step two and three.
01:50:10.222 - 01:50:26.550, Speaker A: Searcher, he submitted to the builder. Now, builder is gonna, he has created the block. So we are here. Builder has created the block, so we are here. Now, what is going to happen in step four? Relay and proposer. Let's solve this mystery as well. Okay, cool.
01:50:26.550 - 01:51:24.262, Speaker A: So what is relayer? Okay, but before discussing actually relayer. So before flashbots, the only stakeholders in the ecosystem were searchers and the miners mining pools, right? So there were the searchers in the mining pool. Now, after Mev Geth was released, the relays were added to the Mev extraction supply chain as like trustless communication channel between the miners and the searchers, like it was a communication channel. And the move to proof of stake like the merge brought it fears of sophisticated staking providers causing like consensus level centralization. And to address this, like after the merge, flashboards created this mev boost, right. To separate the roles of block proposal and block builders to increase specialization and to avoid centralization. As I said, till the moment the PBS, the enshrined PBS is being worked upon, there was centralization issue.
01:51:24.262 - 01:52:01.502, Speaker A: That's why mv boost came into existence. And they introduced centralization at consensus level. So it's like temporary solution. Okay, so as a background, like we already discussed, relays are off chain marketplaces where builders basically participate in a blind auction to sell their block to a validator so that their block could be proposed on chain. So originators generate these transactions. In this diagram, there are user, like, there are searchers who user and searchers, they are like the originators. So they generate the transactions.
01:52:01.502 - 01:52:03.822, Speaker A: The mempool propagate transactions.
01:52:03.886 - 01:52:04.066, Speaker B: Right?
01:52:04.088 - 01:52:32.446, Speaker A: So there is like the mempool public and private mempool. So they propagate the transaction. Okay. After that, the block builder that we discussed build a block, maximizing the prosper fee. Again, this is like same diagram. The block builder is basically building a block that is maximizing the prosper fee. After that, relay that we are discussing, relays act as a trusted auction house.
01:52:32.446 - 01:53:01.622, Speaker A: And the structured auction house between all these blocks are here, right. And then after that, the proposer selects and signs the winning block in the figure like block c. As you can see in the block c was the winning block because it bits the highest proposer fee. You can see like the 0.20.20, .1 then 0.5. So in the relay, the block c wins because the proposal fee, highest proposal fee is 0.5
01:53:01.622 - 01:53:25.600, Speaker A: in the block third. Okay, block c, right? And the relay auctions hold every block where block builders participate with their bits. So relay is basically holds an auctions, right. Holds an auctions where the block builders participate with their bits, right. And the block builders, which poses the highest bid, wins the block. Like wins the auction, right. Simple.
01:53:27.010 - 01:53:27.710, Speaker B: Cool.
01:53:27.860 - 01:54:06.166, Speaker A: Let's move on to our next slide. Okay, diving deeper into the competitive dynamics of builders, it is important to consider the fact that several builders, like flashbots, also operate their own mev relays. Okay. Despite there being little to no financial incentives for businesses to run their own relay, the number of relay operators were only grown since switch to Pos. So before Pos, there were very less relays. But after that, actually they have seen growth into this relays.
01:54:06.198 - 01:54:06.586, Speaker B: Right?
01:54:06.688 - 01:54:24.910, Speaker A: And the motivation for running a relay is basically like, there is no as such. Most of the people who run relay are like, hey, let's do it for the betterment of the Ethereum or for the protocol for the whole system health, right? And there's no as such profit to become a relayer.
01:54:24.990 - 01:54:25.426, Speaker B: Right?
01:54:25.528 - 01:54:35.646, Speaker A: And the cost of running relay is also a little high. That's why this can be the scene. And centralization is a very important thing with relays.
01:54:35.678 - 01:54:35.874, Speaker B: Right?
01:54:35.912 - 01:55:06.826, Speaker A: So let me actually show you. There was a good block, which was the MeV book. Like what are the problems and what are the things with the relays? Let me just search it, or maybe we can just discuss it later. Okay, I will just provide the link to that blog in the description of this video so you can check it out. As we have already discussed. Again, like the block builders, a, block builder, b block builder c, we build best block possible with available transactions. They build up like blocks.
01:55:06.826 - 01:55:38.150, Speaker A: And there are multiple relays. Relay one, yet another relay, yet another relay. And then the relay picks the backstroke from the connected builders. Then most profitable block is pick best from the MeV boost, as we already discussed. And the most profitable block get to the validator and they run, right? Relay relays. So some facts basically. So some relays censor all blocks containing us sanctioned.
01:55:38.150 - 01:56:33.750, Speaker A: So as I said, there is multiple relays, right? So you can go to this MeV relay list, you can just Google MeV relay list. And there are like MeV relay list, multiple MEV relays you can check out. And they have different things like filtering, consensus. So sometimes some block have filtering, they have some censorship, some relays, right? So there are only few relays operators that actually supply the vast majority of blocks on Ethereum, right. The problem surrounding relay centralization is already created, issued with censorship because some relays censor the blocks containing us sanctioned addresses. Because there are validators who want to avoid any potential legal ramifications of adding blocks with sanctioned transactions. So it's like blacklisted address by the US government.
01:56:33.750 - 01:57:01.774, Speaker A: So as a block builder, as a proposer, I don't want to get in trouble, right? So that's why sometimes some relay is sanctioned and there are some censorship, right? And ensuring there is centralization and ensuring neutrality with regards to regulation is very important for Ethereum, which means that removing this vector of censorship is the key. Like you don't want this censorship in the ecosystem. This is not decentralized. We don't want censorship.
01:57:01.822 - 01:57:02.034, Speaker B: Right.
01:57:02.072 - 01:57:28.198, Speaker A: So some relayers, they block, some us sanction. Yeah. And then relays are currently like brokers of trust between the validators and the builders. Yes. In fact, the original PBS specification did not include an external relay role. This is important. The original PBS specification did not include an external relay role.
01:57:28.198 - 01:57:52.558, Speaker A: The current plan by the Ethereum foundation, which is to enshrine PBS in protocol, involves the creation of neutral in protocol for Ethereum. Because relays are currently the brokers of trust between the builders and the validators. And protocol solution will need to assure that both the parties, like the builders, will not have their MEV stolen to the proposer.
01:57:52.654 - 01:57:53.058, Speaker B: Right?
01:57:53.144 - 01:57:59.074, Speaker A: We discussed it now and the proposers will get the payment that was promised in the block header.
01:57:59.122 - 01:57:59.430, Speaker B: Right?
01:57:59.500 - 01:58:47.494, Speaker A: So this is like two in protocol solution that will need to assure both parties, right? And we will actually talk about one issue that happened with relay right after this, which was very interesting. If you are still watching this course, then you will be interested in the MV ecosystem. And there was recent hack that happened with the out of the protocol PBS implementation, that is with PBS boost. That was interesting. So we will discuss it after this now moving on to the block proposal. After that, we have one more slide where we discuss the relationship between the validator and the relay, like what actually is technically, what actually is happening. Okay, but before that, it is important to understand block proposal or the validator part.
01:58:47.494 - 01:59:18.106, Speaker A: Okay, so moving back to our diagram, as I promised. Okay, so now your searcher has submitted transaction bundle bundles to the builder. Builder has created a block. We've discussed all the things, the facts, technicalities. After that, there is a relay of relay. We have discussed relay, the most profitable block is selected and it goes to the proposer. Now this process left, like how the relay proposes block to the proposer.
01:59:18.106 - 01:59:53.174, Speaker A: And what's the job of the proposer? Okay, so now let's discuss block proposal or validators. What is happening, the next step. Okay, so as block proposer is a validator, basically, who's responsible for submitting valid blocks to the Ethereum blockchain. Like on ethereum, a validator can be chosen to be a block producer if they've staked like 32 eth to deposit contract. Like you can become a validator. And validator gets randomly selected by Ethereum consensus mechanism and in return to become basically block proposal. In return offer this work and for committing their stake to slashed.
01:59:53.174 - 01:59:55.446, Speaker A: If they misbehave, they can get slashed.
01:59:55.478 - 01:59:55.818, Speaker B: Okay?
01:59:55.904 - 02:00:29.966, Speaker A: And they receive a block reward as well. And these block proposals are like the final step before the mev extracting blocks are submitted to the blockchain. And this block proposals, as I said, receives different proposals for blocks from block builders. We are third parties relays that we just discussed and with an associated bribe to the block proposer. Like there's always bribe included. That's why, that's how the proposer is going to select the block, right over other blocks.
02:00:29.998 - 02:00:30.350, Speaker B: Okay?
02:00:30.440 - 02:01:29.514, Speaker A: And actually the proposer only receives so called execution payload header. Now, very important thing to discuss, to focus on. Listen to me very carefully, okay? So as a proposer, this is proposal, this is block builder. You don't get like the validator, the block proposer, the validator doesn't get all the block content from the block builder, right? It only receives execution playload header. When I say block content, it means all the transaction list, whatever. In that block, the block builder doesn't pass all the things to the validators. It only receives so called execution payload headers from the relay, right? This contains like enough information basically to reliably execute, evaluate the value of the block, but not to execute it because it does not have the transaction content.
02:01:29.632 - 02:01:29.914, Speaker B: Right?
02:01:29.952 - 02:02:47.774, Speaker A: And this means that a proposer cannot just steal the MEV by submitting the block provided without paying the searcher, right? So if, suppose one of the case would be like if the builder is providing the whole block to the validator through relay, then this validator may run away and he may front run the builder and he may took the block and he's like, oh, I will not pay you. I have a block, I will just propose it on chain and I will get the price. Why do I have to pay you? And then searchers and whatever, I will just front run it. That's why there is only like execution payload header that is only received to the proposer and the contents of the block are only revealed after the validator has committed to the payload header, after which it can be proposed as the next block. Okay, so this is the case like the validator is only receiving the execution payload header right from the block builder. The validator is not receiving every content from everything out of the block builder. Okay, and execution payload header is like, I've actually gone to the code base of mev boost.
02:02:47.774 - 02:02:59.302, Speaker A: I will share you the link in the description. So this is what execution payload header is. Parenthese, what does it include? Coinbase, straight root, sip root, log, hash, block number, you guess, use timestamp, whatever.
02:02:59.356 - 02:02:59.574, Speaker B: Right?
02:02:59.612 - 02:03:03.362, Speaker A: So this is like the execution payload adder that mev boost tool uses.
02:03:03.426 - 02:03:04.040, Speaker B: Okay.
02:03:04.570 - 02:03:42.526, Speaker A: Yeah. So if you are interested in codebase, I will provide you link in the description validator and relay. Again, discussing the relationship between validator and relay. Why? I'm discussing this because I want to showcase you one example after the slide. So, between the start and the end of the block auction, like, the block builder delivers the block contents and block bits to the relay. A block auction basically lasts like 12 seconds in mev boost. In mev boost and in above figure, like basically this symbol, the lightning symbol, represents bits by the block builder.
02:03:42.526 - 02:03:55.762, Speaker A: Okay, so the relay simulates the block contents to ensure that it's valid and that the proposer receives the fees from the block builder. After the simulation, the bid becomes active in the block action.
02:03:55.826 - 02:03:56.440, Speaker B: Okay.
02:03:58.330 - 02:04:22.346, Speaker A: Now you must be thinking like if the block builder is, this is like what I thought. If the block builder is only providing block header to this validator, how will they make sure that the block is actually valid? What if there is a malicious transaction in that? What if there is wrong transaction in that? Because he is the one proposing the block.
02:04:22.378 - 02:04:22.682, Speaker B: No.
02:04:22.756 - 02:05:03.530, Speaker A: So he will get slashed if there is something bad in that block. Right? So what will happen is that this relay, relay makes sure. It ensures that the block actually a proper block and it simulates the block contents to just to ensure that it is valid. And also, it also just simulates that the proposer receives the fees. Okay. After that, like at the end of the block auction, the proposer request the block header, right? The proposer, the end of the auction. Once the auction is completed, the proposer basically requests the block header.
02:05:03.530 - 02:05:19.634, Speaker A: And once that is completed, like the block header with the highest bid, if the relays share all the block content, then a rock proposer can steal the mev. Again, if the relay shares all the content, then this block proposer can run with that.
02:05:19.672 - 02:05:19.922, Speaker B: Right.
02:05:19.976 - 02:05:30.578, Speaker A: So a relay can also steal this data. Hence the relays need to be trusted by block builders. So relay in between. So if there is a centralized relay, then it's, a relay can also steal the MEV.
02:05:30.674 - 02:05:31.030, Speaker B: Right.
02:05:31.100 - 02:05:32.838, Speaker A: So it's a very big problem.
02:05:32.924 - 02:05:33.560, Speaker B: Okay.
02:05:34.010 - 02:05:39.758, Speaker A: Right. They should also be trusted by the block builder.
02:05:39.794 - 02:05:40.186, Speaker B: Right.
02:05:40.288 - 02:06:23.522, Speaker A: So yeah, this can also be the case. So if several relays are connected to the proposer, the proposer chooses the block header with the highest bid and sends the signed block header back to the relay. Okay, so highest bid. And then what the block proposal do is it basically signs the block header back to the relay, right. And then the relay verifies the signature and then shares the block content to the, basically shares the block content to the block proposer. Okay. And while already also broadcasting the block over the p to P layer.
02:06:23.586 - 02:06:25.142, Speaker B: Okay. Yeah.
02:06:25.196 - 02:07:03.874, Speaker A: So this is like the simple validator and relayer relationship. This is how it works. Now there was one very interesting case that happened, and it was very concerning for the whole ethereum community, and I liked that case. Now what happened? Let's discuss that. Okay, so on 3 April 2023, ImeV boost relay incident and related timing issue happened. This is like the post mortem report, right? This is also known as like sandwich the riper. Sandwich the riper attack.
02:07:03.874 - 02:07:29.734, Speaker A: If I'm not wrong, just google it. Sandwich the riper attack. Okay. So even this was not enough to fully protect the Mev. Stealing it just made it extremely, actually rare. So a vulnerability in the flashbots relay made it possible for a blocked proposer to submit an invalid block header, which allowed to submit to steal $20 million from a searchers without having to outrage the relay.
02:07:29.782 - 02:07:30.006, Speaker B: Right.
02:07:30.048 - 02:08:29.914, Speaker A: So there was a bug, basically there was a vulnerability in the MEV relay, this relay, that allowed the block proposer to gain a profit. And how that happened is that. So the MeV boost works through a commit and reveal scheme where the proposer commits to a block created by builders. We just discussed that without seeing their content, by signing the block header. And only after the block header is signed, the block body, the corresponding transactions is revealed. And the attack on the April 3 was possible because the exploited relay revealed block bodies to the proposer, so long as the proposer correctly signed the block. But however, the relay did not check if the block header was signed, that was invalid.
02:08:29.962 - 02:08:30.174, Speaker B: Right.
02:08:30.212 - 02:09:06.682, Speaker A: The relay would attempt to publish the block to become the beacon chain, where beacon chain notes were rejected. Crucially, regardless of whether the block was rejected, the relay would still reveal the body to the proposer. Okay, so now what happened? Let's listen to this diagram. So I just showed you how this works, right? So the whole body content is not revealed, only the block header is revealed. And then the block proposer has to sign that block header. And then the whole block content is received. But what happened was that this relay, there was a bug in this.
02:09:06.682 - 02:09:51.174, Speaker A: So they asked the block proposer, they sended basically the executed header. And then block proposer was also malicious. What he did was he signed the block incorrectly, right? And the signature was not valid. Okay, so he delivered a wrong, non valid, basically signature to the relay. But relay was not aware of that. So relay, what relay did was relay submitted the transaction basically to the beacon chain, right? So the beacon chain, when the block was submitted to the beacon chain, beacon chain rejected it. Beacon chain rejected it by saying that the block is not valid, the signature is not valid.
02:09:51.174 - 02:10:33.400, Speaker A: But during that the relay had submitted, the block has revealed the block content to the block proposer. And in this case, the block proposer received all the block content from the relayer. And having access to the block body he was allowed the Malaysia proposer extracted the transaction from the stolen block and used them in his own block where he could exploit those transactions. So he was able to see all those content. He was revealed all the content and he was able to create his own block and extracted mev and dissed. Everyone just made the profit. And yeah, this was very interesting.
02:10:33.400 - 02:10:51.586, Speaker A: And after that there was a solution as well. So the solution that was introduced for this was that there will be like a cut off timing into the proposer slot where this time, like 3 seconds after this 3 seconds, the relay will no longer return block to the proposer.
02:10:51.638 - 02:10:51.854, Speaker B: Right.
02:10:51.892 - 02:11:14.178, Speaker A: So there was like a cut off timing. Earlier it was two second, but after that it was moved to 3 seconds after the valid. Like the nice proposer validator requested for that, because 2 seconds was very less timing for that. So there is like a cut off timing for 3 seconds. After that the relay will no longer return a block to the proposer. Simple.
02:11:14.264 - 02:11:14.466, Speaker B: Yeah.
02:11:14.488 - 02:11:43.194, Speaker A: So coming back to our presentation. So this was like very interesting thing that happened. You can actually go and check out this postmortem report. I will provide the link in the description. Cool. Now I guess this completes our mev boost architecture. And we have successfully seen the architecture of the mev boost and the PBS.
02:11:43.194 - 02:12:13.718, Speaker A: So congratulations. Okay, this is funny. So we have already discussed searchers, builders relay and proposal. We have discussed everything in deep, how to become a searcher, what builders do, relays proposal we have discussed for the postmortem report as well. Nobody is going to discuss this then. I'm pretty sure this is one of the best content due to ever get. Okay, now moving forward to our course, few things are left.
02:12:13.718 - 02:12:34.394, Speaker A: Only two topics that are left. And after that we will jump on to coding part. Cool. So MeV products, cowswap, fast lane, colibro. So there are a lot of MeV products that are available in the market that you should check out. Some of the products are like cowswap. So what is cowswap? So cowswap is like you can check in the diagram.
02:12:34.394 - 02:13:17.494, Speaker A: Basically cowswap tries to settle, buy and sell orders between its users. Like basically finding coincidence of wants, right? So you want to do the transaction, you wants to do buy and there is another one who wants to sell. So the cowswap basically connects you to guys which also prevents slippage and fees and order debt. Actually fails to find a peer that are sent to cowswap under amms, normal amms that are sent to cowswaps. Underlying all the automated market makers. After that, after there is fast lane. So Fastlane is like MEV relays to safeguard users and delivers superior results for high frequency traders.
02:13:17.494 - 02:14:24.170, Speaker A: It is on Polygon, you can check out that. After that, Colibro is like the first Bev layer, the broadcaster extractable value that allows transaction broadcaster like node providers, non custodial wallets and bridges to improve user experience and enable MeV ownership. That is one of the first BV relax Colibro that you can check out. Then there is Mev blocker, just like flashbots provides free RPC MeV blocker also provides free RPC endpoint that protects user from fast running and sandwiching which we will see a live example in the coding part. After that there is Jito was very famous these days when I'm creating this video, Jito Labs is like a leading Solana mu infrastructure they did a massive airdrop, which was really cool. So they built a high performance system to basically maximize performance of the Solana blockchain. In this particular course we have discussed, you know, there was no discussion or discussion of Solana.
02:14:24.170 - 02:15:01.994, Speaker A: But yeah, if you want to discuss. The thing is with Solana is that there are very differences between the architecture because the timing for block timing is very fast. In Solana it was 12 seconds here and it was very fast. I don't exactly know the timing of Solana block, but this is very fast in that most probably 1 second or two second or even less than that. You can just google it. Yeah, so this is like, the architecture is very different. So yeah, you can go and check out Jaito if you're a Solana developer and if you want to focus on Solana ecosystem, cool.
02:15:01.994 - 02:15:26.338, Speaker A: And also avalanche is also there. And there are different blockchains, but I want to focus on ethereum as of now. But you can check it out. There are also some blockchains that are claiming to build imev resistant blockchain. I don't know how they're doing it, but they're doing it so you can check them out as well. Suav and PEPC. So what is PEPC? PEPC is not that PEPC that you drink.
02:15:26.338 - 02:16:33.718, Speaker A: So basically PEPC is protocol enforced. Proposer commitment right? Story now only header is revealed and not content. So basically as we discussed, that only the header is revealed and not the content. However, if the additional slashing rules were imposed on the validators through Eigen layer for front running builders, there is a stronger guarantee that a builder proportion of the blocks get included correctly at the beginning of the block or otherwise than restrict validator, right? So Eigen layer is like this new protocol that would act as like the middleware. Eigle is like very famous protocol as a lot, but is a middleware software that would facilitate the bidding process between a building and wide data for the partial block space. And this is very important capability that would eliminate the concern around the relay censorship and ensure the censorship resistant and quality of the ethereum. Reinforced by giving back the ability of value vapors to also propose a transaction for the inclusion in the block.
02:16:33.718 - 02:17:17.910, Speaker A: So we already discussed as of now, right. So that the builder only does not get the content of the block, right. So he is not able to include transaction into that. But the eigle layer is like rest taking tool, whatever you can call it like rest taking protocol. So that they introduced a solution that there will be like additional slashing rules that will be applied to block proposal that if they try to front run the block that was provided by the block builder, they will be slashed. So this is like proposal by Eiglear. So yeah, there will be extra space available.
02:17:17.910 - 02:17:48.558, Speaker A: Like there will be a builder part, there will be like proposer part as well. So proposer can also add transactions to the block. So this is like more decentralized way and more censorship resistant solution that they provided. Like PEPC. That was by Eigen layer. Actually, there is a good presentation by Sri Ram. He's the co founder of Eigen Layer.
02:17:48.558 - 02:18:12.214, Speaker A: So there is a good presentation by him. So you can go and check out just Google, the Google YouTube, search on YouTube, like Sriram, Suev or PEPC, whatever, Eigen layer. It's a good presentation. Okay, the other solution is Suev. So what is Suev? Suev is single unifying auction for value expression. In theory, like sue will be a blockchain. Basically it is introduced by flashbots.
02:18:12.214 - 02:18:48.790, Speaker A: First of all, it's also solution by flashbots. So Sweb will be a blockchain that is able to accept expression of user preferences from multiple blockchains. And not just Ethereum, they're talking about multiple blockchains. And then assist, basically a decentralized networks of block builders to trustlessly propose blocks to each of these networks. Like the Sua chain, will be composed of basically three main components. The universal interface environment and then the universal interface environment. And the other one was optimal execution market.
02:18:48.790 - 02:18:52.962, Speaker A: And the third one was the decentralized block building network.
02:18:53.026 - 02:18:53.590, Speaker B: Right?
02:18:53.740 - 02:19:26.298, Speaker A: So, yeah, so there was different roles. And also the problem right now is that not every much detail is revealed by Suev. It is still in progress. And as of now, when I've researched it, not much detail is provided. So it is very secretive and more information will be coming out soon. But yeah, this is like the product that you should keep an eye on. Because flashboards have been doing amazing work and they have been saying that Suav is the future of MeV.
02:19:26.298 - 02:19:55.930, Speaker A: So definitely check it out, Suav and what they are trying to do. And whenever the information is available, I will create a proper video and I will also share it on Twitter and LinkedIn. So if you're not connected with me on Twitter and LinkedIn, go and just follow me there. I will just provide the things or update there. Okay, cool. I guess this completes our theory part. But before moving on to the theory, I'm going to tell you more about the opportunities in this space.
02:19:55.930 - 02:20:19.406, Speaker A: I want you guys to create career in this Mev space or whatever. I hope so, that this video was helpful for you guys and opportunities are like contribute to these open source projects. MeV Boost Ethereum is open source. Mevcath whatever client you can contribute to that. They are all open source. Mev boost is open source. Go and contribute to these projects.
02:20:19.406 - 02:20:40.460, Speaker A: Join their discord. Ask for good first issues if you are a beginner. After that there is a PBS foundation grant program that recently is introduced and they're like consensus coinbase. They have joined together to form this PBS foundation. So there is a grant program. Go and apply for a grant there. Actually let me share my screen to show that to you guys.
02:20:40.460 - 02:21:05.922, Speaker A: Cool. I hope you're able to see my screen. So this is like a PBS foundation that was introduced as of now, right? So yeah, mission and goals. What is PBS separation? And then there is grant infrastructure grants, research grants, data transparency, community education, whatever. You can fill out this form and you can check that out. Okay, cool. Contribute to research.
02:21:05.922 - 02:21:20.626, Speaker A: Like contribute to researchers. Go and check it out. There is Mev search Fellowship program by flashboards. Go and apply to that. Contribute to the researchers, whatever research. Everything is open source. Everything is there as already showed.
02:21:20.626 - 02:21:40.678, Speaker A: You like proposals are already there on etheresearch ph. Whatever this website is. You can go and participate and talk to people, talk to professors, whatever. Hack an ETH global flashboard MVP hackathons, they organize hackathons. Participate in that. If you are a builder, join the community call. As I said, PBS is open source.
02:21:40.678 - 02:21:57.134, Speaker A: They want people to join the community call. Go and join that community call. Understand more about it. Understand opportunities, how you can contribute. Then after that you can become a searcher, you can become a builder. I've explained to you how to become a searcher builder. I've also showed you actually the tools that were used RevM.
02:21:57.134 - 02:22:38.958, Speaker A: I've showed you the mempool whatever I've showed you like block native API, right? So yeah, Block native, search block native. And then you will get to see an API that you can use as a searcher, then builder. And then all of these companies are hiring, right? All these companies are also hiring flashboards, the Jito whatever we discussed the companies fastlane and then whatever companies we discussed there, they're hiring. So if you are like an MeV expert after this crash course, I guess you will be an MEV expert. So go and find a job and ask if you can be their researcher or community manager. Whatever dude. And then build your own Mev products.
02:22:38.958 - 02:22:45.794, Speaker A: So as I said, Mev is basically a multibillion dollar market, right? So let's move on to the next.
02:22:45.832 - 02:22:46.450, Speaker B: Slide.
02:22:48.550 - 02:23:15.754, Speaker A: MeV is a billion dollar market. So go and build your own products. You can check that out. And it's a big market, there are a lot of opportunities there. And yeah, recently there was the Tito airdrop. So you can just follow what are the things that are coming there, what are the research that are going on, and you can go and contribute to that. Build your own EV products.
02:23:15.754 - 02:23:36.274, Speaker A: It is a big market. So yeah, go ahead and do it. Now let's move forward. I hope that opportunities were clear. I will provide the link to you link to all of those in the description. Now let's move forward to the live MeV where I will get myself front run. I will show you how the MeV works.
02:23:36.274 - 02:24:01.146, Speaker A: And I might do it on l two because Ethereum will be very expensive. I don't want to pay that much fees. I'm not that much rich. Okay, so let's move on to our live mev. We will also try to create mev bot and yeah, let's see how it goes. Let's see how the coding part is, and you will understand more in depth things. So yeah, let's move forward.
02:24:01.146 - 02:24:51.722, Speaker A: Okay, so now I am right now on Rumix Ide, and I've created a code that is a simple front run me contract. You will be able to find this code in the description of the video. I will provide a GitHub link to that. But it's just a very simple smart contract that we have written so that we can make sure that, I want to show you guys an example where our code, basically our contract, whatever we are trying to do, our transaction will get front run. And in the second try we will be using flashpot RPC. So when we will be using flashpot RPC, our transaction will not get frontrun. Okay, so right now, this is the simple code.
02:24:51.722 - 02:25:14.622, Speaker A: Let me just simply go through, over that. Go over that. Okay, so the contract name is contract frontrun me. Then there is a mapping that connects the address to the bytes 32, which we will explain. What is that? Okay, so there are two functions in this particular contract. It's a very simple contract. One is deposit.
02:25:14.622 - 02:26:01.600, Speaker A: So anybody can deposit into this contract by providing a secret code that we will be providing. And then there will be a mapping that will connect that secret code to the particular address, whoever is calling that deposit function. And then there will be a withdraw function. In the withdraw function, whenever that user. So anybody can call that withdraw function and pass on the address and the secret code. It doesn't mean that only the address the owner can call this function, anybody can call this. And if you just pass on, you just need to pass on the address which you used while depositing and the secret code.
02:26:02.210 - 02:26:02.586, Speaker B: Right.
02:26:02.628 - 02:26:14.082, Speaker A: So anybody who knows that secret code, maybe the person who deposited other than that person, also someone else can call this withdraw function.
02:26:14.136 - 02:26:14.402, Speaker B: Okay.
02:26:14.456 - 02:26:36.700, Speaker A: And yeah, if that is not the correct one, then it will return wrong password. It's just simple and that. Simple as that. And then this function, just, this line just directly sends all the contract balances to the caller. Okay. Yeah, just a simple smart contract. Okay, now let's see how this works.
02:26:36.700 - 02:27:07.874, Speaker A: I have tested it on the testnet, it works properly. But on the testnet I didn't got front end by anyone because I don't think so. There were bots and that was enough money for them. But now I'm doing it on polygon main net. So yeah, Ethereum mainnet was very expensive, so I'm trying to do it on Ethereum, sorry, polygon pos main net. So let's see how it goes. Let's just directly connected my metamask here.
02:27:07.874 - 02:27:39.230, Speaker A: I have like 30 metic as of now. So tetimatic right now is around $30. So let's see if that is enough for the bot to front run. So let me just directly deploy my smart contract on the main net. And yeah, it's a little slow. I will have to confirm the transaction. Okay, so hopefully this contract should get deployed soon.
02:27:39.230 - 02:27:56.210, Speaker A: Okay, so our contract had been successfully deployed. It took a time, took some time. Now let's interact with our smart contract. So there are three functions as usual. Two functions actually. Then the deposit and then the withdraw. Then I guess the mapping.
02:27:56.210 - 02:28:17.082, Speaker A: Okay, cool. So the deposit function, we need to deposit some matic first of all. Okay, so now let's call the deposit function. So for that I will pass on the value from here directly. So let's do it like 20 matic. It is around $20. As of now, the price of dollars around one.
02:28:17.082 - 02:28:42.178, Speaker A: Price of matic is around one dollars. Okay, so we are passing 20 matic. So I hope it will be enough for the bot to front run us. So now we have to pass a password. So for that I'm going to use the foundry cast catch up function in my terminal. I don't think so. You will be able to see it.
02:28:42.178 - 02:29:12.766, Speaker A: So the password is just 1234. So I have just has it and I'm going to pass that in that function. Okay, so I'm going to call the deposit function now and hopefully our transaction will be submitted. And yeah, our 20 matic will be deposited to this contract. Okay. And success. If it is submitted successfully, the balance should update to 20 e.
02:29:12.766 - 02:29:52.698, Speaker A: So our balance has been updated to 20 e. That means that this contract contains 20 matic, which we just deposited right now with our secret password. So now to withdraw this, I'm going to call the withdraw function. Okay. And I will pass on the address, and I will also pass on the correct secret code. Now hopefully our transaction will get front run by a bot if $20 are enough for them. Okay, I'm right now using like Metamask's initial RPC URL, which is infuria, if I'm not wrong.
02:29:52.784 - 02:29:53.274, Speaker B: Okay.
02:29:53.392 - 02:30:26.760, Speaker A: I'm not using the flashpots RPC, which will help us to save us from frontrun. Okay, so let's see if our transaction gets frontrun or not. Okay, so I'm going to just copy my address from here, and I'm going to again copy the password that we put it on while depositing. So I have provided both of them. Now I'm going to call the function and let's see if we get front end or not.
02:30:28.330 - 02:30:29.080, Speaker B: Cool.
02:30:29.930 - 02:31:09.282, Speaker A: Let me just sign the transaction, confirm it, and let's see if the balance is updated to 30 ether. Then I guess we will be successfully, we got our token, but if not, then we definitely got front run. So the function has been successfully called. Now you can see here that the withdraw function was successfully succeeded. Okay. And it has been called, and you can see here that the balance of the deployed contract is zero now, which means that $20 was when I called the withdraw function.
02:31:09.416 - 02:31:10.100, Speaker B: Right.
02:31:10.790 - 02:31:36.730, Speaker A: I didn't get those 20 ether back. Why? Because someone, maybe Mev, bought front run me. So now let's actually go to polygon scan to check out what really happened with our contract and how it got front run. So let's go to like polygon scan. Polygon scan. We have to do it on mainnet. Cool.
02:31:36.730 - 02:31:43.786, Speaker A: So on the polygon scan, just paste the contract address which we deployed.
02:31:43.818 - 02:31:44.014, Speaker B: Okay.
02:31:44.052 - 02:31:46.542, Speaker A: So now you can check actually what happened.
02:31:46.596 - 02:31:46.910, Speaker B: Okay.
02:31:46.980 - 02:31:57.390, Speaker A: So let's go line by line and see what happened. Okay. Let me just make myself small. I think I'm pretty big here.
02:31:57.540 - 02:31:58.142, Speaker B: Okay.
02:31:58.276 - 02:32:38.542, Speaker A: Yeah. So the first transaction was that the contract creation one, we created the contract. The second one was that we deposited, we called the deposit function and we deposited 20 matic. And after that we tried to call the withdraw function, but what really happened? We tried to call the withdraw function, but the value here is zero, which means that the transaction was successful. But there was literally nothing inside the contract. The contract balance was zero. That's why there was no transfer of 20 matic back to us.
02:32:38.596 - 02:32:38.862, Speaker B: Right.
02:32:38.916 - 02:32:40.414, Speaker A: Back to the contract or back to us.
02:32:40.452 - 02:32:40.894, Speaker B: Right.
02:32:41.012 - 02:33:21.054, Speaker A: So now if you go to the internal transaction, you will check that there is an internal transaction, which means that a contract called our contract itself. By passing what exactly was happening was. So let's actually go to this transaction. And let's go to this contract. So if you see here, this is a contract. So this is basically a bot that is running on the polygon chain, which called our contract like withdraw function before us by passing the secret hash, which we decided because. Which we passed on.
02:33:21.054 - 02:33:31.082, Speaker A: Right. So the bot actually saw that we called the withdraw function with that particular hash.
02:33:31.146 - 02:33:31.374, Speaker B: Right.
02:33:31.412 - 02:33:55.014, Speaker A: And they simulated the transaction. And after that, the bot saw that, yeah, this is a beneficial transaction for them. They can generate $20 value with that. So they basically called our contract. So, as you can see here, this is basically the eoa. So inside the bot, there must be a private key. So the private keys of this public address.
02:33:55.014 - 02:34:05.850, Speaker A: Right. And then this is the bot that called our contract here, as you can see, like 20 transferred matic from our contract. This is our contract address. To this contract address.
02:34:05.920 - 02:34:06.154, Speaker B: Right.
02:34:06.192 - 02:34:16.142, Speaker A: So this is simply what happened. And one more thing to notice here is that if we go back to the transaction, okay, so this is our withdrawal function.
02:34:16.196 - 02:34:16.366, Speaker B: Right.
02:34:16.388 - 02:34:18.174, Speaker A: So this is the withdraw function that we call.
02:34:18.212 - 02:34:18.366, Speaker B: Right.
02:34:18.388 - 02:34:22.942, Speaker A: So here the gas price is, you can see 43 quay. Simply. You can see.
02:34:22.996 - 02:34:23.406, Speaker B: Right?
02:34:23.508 - 02:34:32.898, Speaker A: And if you go to the internal transactions where bot called. So what he did was what the bot did, he called it with a better grass price.
02:34:32.984 - 02:34:33.234, Speaker B: Right.
02:34:33.272 - 02:34:57.402, Speaker A: So that's why his transaction was successful before us. Right. So basically this means that they front run our transaction. Okay, so yeah, this is simple as that. And we lost $20 to mev bot. Okay, so this is basically the timeline of how things were working. And this is on main net.
02:34:57.402 - 02:35:24.466, Speaker A: So I hope you now have an idea of how a transaction could get front run. Now, if you are a beginner or something, then you might want to understand what's happening here. What is transaction hash? What block number transaction from two. But if you already know this, you can see the transaction fees as well. The internal transaction is basically when a contract calls another contract. Okay? If you even want to see. So one thing would be like.
02:35:24.466 - 02:35:32.742, Speaker A: You must want to be like that. Let's go to the contract, the MeV bot contract, and let's see their code.
02:35:32.796 - 02:35:33.062, Speaker B: Right.
02:35:33.116 - 02:35:35.090, Speaker A: But the contract is not verified.
02:35:35.170 - 02:35:35.414, Speaker B: Right.
02:35:35.452 - 02:36:46.038, Speaker A: So you can't really see their code base. And that's pretty simple because nobody who actually is running a bot on the waynet will never reveal their bot code, right? And even if online, if some of you are trying to search imeb bot or something, that probably it means that someone has, that it's not really working anymore now because nobody really reveals their working bot, right? So that's why it's not really verified here. Although you can use this bytecode to decompile this bytecode, you can copy this, and there are various tools available, but most probably like 99% it will not be decompiled properly. There will be some, maybe this code is also written in assembly or something, right? So this will not be decompiled properly. So yeah, it's not verified, so you can't really see this. Okay, so let's go back to our code now. I hope you understand, if you want, I can provide this scan transaction link in the description, the call out.
02:36:46.038 - 02:37:30.226, Speaker A: Maybe you can just copy this transaction code, whatever. Okay, now let's go back to our remix. Now what we will do is the next thing would be that now we will do the same thing, but after deploying the contract, when we call the withdraw function, we will call it through flashpot RPC. So it's like a mev blocker. So in this, our transaction goes to like a private mempool where the bots are not really scanning all the transactions, right. And it will automatically, it is going to get successful. Okay, so you go to the, maybe just type it on the Google like polygon MevRPC.
02:37:30.226 - 02:38:07.586, Speaker A: And if you go there, you might see someone. Okay, just go to ethereum stack and someone must have pasted it. Okay, so this is the RPC endpoint, the flashbot RPC endpoint for polygon. Okay, so just copy it and then go to your metamask. And after going to your metamask go to settings and just change the RPC. Wait a minute, network, we are on polygon mainnet. Okay, now here, just change the RPC to flashpot.
02:38:07.586 - 02:39:09.542, Speaker A: Could not fetch in sscrPC, correct? Yes. So I just found out that the flashpod RPC doesn't support polygon. Most of like I went to their documentation and their RPC URL is only for the Ethereum main net. Okay, so maybe polygon is not supported, but I found blockpi network that is like distributed RPC that is also meb protected. According to them, there was something that I found out. And now let's actually go and use this RPC to check if our transaction gets front end or not? Or is this RPC MeV safe or not? Okay, cool. So let's copy this and paste it in our metamask or from directly here, just click on that metamask and just directly approve your transaction.
02:39:09.542 - 02:39:30.562, Speaker A: So the polygon mainnet will be added there. Okay, cool. Yeah, so we are on the polygon main net block main net block PI. Okay, cool. Now let's go to our remix and do the same thing again. So again I'm going to just call the deposit function with maybe the same catch up.
02:39:30.616 - 02:39:31.218, Speaker B: Right.
02:39:31.384 - 02:40:27.810, Speaker A: So last time I used 1234-5678 as my password. I think you will not be able to see my screen because using the terminal, I don't know, the screen has not been shared. Okay, but I have copy pasted that hash of the password is simply 123-45-6789 okay, and again we will call the deposit function and this time let's just deposit nine matic. Okay, I don't have much balance, but I guess nine balance will also be enough for an mev bot to calculate that they can front on it. But hopefully since we are using mev protector RPC by block PI, it will not get front run. Okay, so now let's call the deposit function, let me pass on the secret hash. Okay, so calling the deposit function, let me just approve this transaction.
02:40:27.810 - 02:41:09.474, Speaker A: Okay, I'm saving like one metic for the gas fees in the future. Okay, so the deposit function has, it was called successfully. Now you can even see the updated balance as nine matic. It's nine metic here, not nine e. Okay, and now again we will call that fitra function and let's see how it goes. Okay, so to here I will just paste that and let me also just copy my address. I think it's already there.
02:41:09.474 - 02:41:14.020, Speaker A: But yeah, just to be safe aside, let's paste again.
02:41:14.470 - 02:41:15.220, Speaker B: Okay.
02:41:15.930 - 02:41:56.130, Speaker A: I hope it's the right address. Yes, it's the right address. Okay, so now the exciting thing, we will call the withdrawal function. And let's see, hopefully since we are on the polygon main net by block PI, hopefully we will not get front run. And if we get front run then it's the problem of their RPC API. Most probably that's not working because we did everything right. Now let's just call the fitraw function and let's see if we get our nine eth back.
02:41:56.130 - 02:42:12.658, Speaker A: Nine matic back or not. Let's go. I've called the transact function. The metamask is popping up. I'm going to confirm the transaction. We are on polygon main net buy block PI mev protected RPC. I've confirmed the transaction.
02:42:12.658 - 02:42:43.840, Speaker A: Now let's see, hopefully we should get ten matic as our updated balance. Okay, so when I was doing the transaction, I just found out that I never changed the password. I used the same password, which was not a great idea. And I got front run again. And now I'm going to again do the transaction with little asthmatic. And let's see if this is mu protected or not. But yeah, I just did a foolish mistake that I used the same password and it got front end again.
02:42:43.840 - 02:43:17.274, Speaker A: So now let's again do it with a different password and let's see how it goes. And hopefully it will not get front run. Okay, so we are back to the mix and now we again have to deposit some eth and we have to again just call the withdraw function and let's see if we get front run or not. And if this RPC is me protected or not. Okay, so this time I've used a different password. Okay, the password is one, two, three, whatever. This is the hash of that.
02:43:17.274 - 02:43:25.222, Speaker A: You can use whatever password you want. Just the main thing is that the password is changed now. Okay, so I'm just going to deposit one eth.
02:43:25.286 - 02:43:25.862, Speaker B: Okay.
02:43:26.016 - 02:44:07.258, Speaker A: And yeah, I'm just going to call the deposit function and hopefully we are on polygon main net by blockpi. This is like according to them, mev protected RPC. Okay, so one eth has been submitted. So you can see the balance updated is one e, that is one matic. And now let's call the fitd draw function. So for that, let me just change the password with the updated one. Okay, and we have to withdraw to this user is the same one because the contract address is same the US same from atomas which we are calling.
02:44:07.258 - 02:44:35.454, Speaker A: Okay, so now let's hit the withdraw function and let's see if we get back this one eth or one matic or not. Okay, so I'm clicking the transact. Now let's just confirm the transaction. And now let's see if this was me producted or not or we will lose our one dollars as well. Oh cool, we got our one dollars pack here. You can see that 1.51, it was 0.5
02:44:35.454 - 02:44:54.574, Speaker A: before. And I've used a new password. Right. So yeah, I got one matic back. Cool. So this means that this RPC is actually Mev protected. And yeah, kudos to blockpi.
02:44:54.574 - 02:45:44.874, Speaker A: Okay, so we have just completely successfully deployed this contract and we have seen that how in real life a transaction can get frontrun and how we can use these rpcs to save ourselves this MB protected rpcs, right? And yeah, this is a really great thing. I hope you understand stuff. And now what you can do is maybe try yourself. So I hope that you actually understood what is actually happening under the hood. I showed you on the Polygon scan as well, how under the hood things are working. Maybe you can also try to create your own Mev bot, try to run it and create it on rust and create it on python, whatever. If possible, I can provide you some links in the description so you can check out.
02:45:44.874 - 02:46:30.154, Speaker A: But yeah, the motive of this course was not to teach you guys to create how to create MV bot, right? And even if you have to actually understand how EVM works, if you guys don't know how EVM works, go and watch my last crash course, which I created. It was actually my first crash course, which was on EVM. So you have to have a good understanding about EVM. And also you have to write optimized code, mostly in assembly. So whatever bot front run does that was most probably written in Yule, like an assembly code. So yeah, it's very important to optimize those codes. Most of the time is like just reducing the latency and optimizing the code.
02:46:30.154 - 02:47:04.978, Speaker A: So these two things are very important. If you want to write your own MV bot or something. These bots are on most probably every network right now. I was thinking to actually, first, I was thinking to actually show you guys how to code mev bot. But I guess there's something that is more important than that. So I'm going to actually teach you guys and tell you guys about that. There is an actual fraud going on right now, especially in the MeV space and MEV bot space.
02:47:04.978 - 02:47:31.950, Speaker A: So what exactly is the fraud going? First of all, again, telling you, any searcher or anyone who is gaining profit from that bot, they will never, ever share their bot with anyone, even on the Internet, they will never share it. So if you're getting any bot on the Internet, and that is saying that, hey, run this bot and you will get $1,000 per day, whatever.
02:47:32.020 - 02:47:32.350, Speaker B: Right?
02:47:32.420 - 02:47:37.834, Speaker A: $1,000 per eth every day. One eth every day, then that is totally fake.
02:47:37.882 - 02:47:38.480, Speaker B: Okay.
02:47:39.330 - 02:47:59.350, Speaker A: There has been a list of these fraud projects, and I will provide you the link to this in the description. So there are a lot of fake projects. So what they usually do is they have a code smart contract, basically, right? I also have this smart contract here, right? So I will explain you what it is doing.
02:47:59.420 - 02:47:59.894, Speaker B: Right?
02:48:00.012 - 02:48:07.654, Speaker A: So just simply they have a smart contract and then they ask you to run it and it basically transfers all your eth to them.
02:48:07.692 - 02:48:07.894, Speaker B: Right?
02:48:07.932 - 02:48:32.782, Speaker A: So eventually you get wrecked, right? And yeah, these are all these rappers links, so you have to be safe. And even there are YouTube videos as well. They are doing live streaming. They have good videos, they're doing good marketing that, hey, run this movie bot and you will get money. But this is not the case. Please stay away from this. And now if you are, now let's go to the code, actually see what's actually happening.
02:48:32.836 - 02:48:33.198, Speaker B: Okay?
02:48:33.284 - 02:49:20.426, Speaker A: So now if you are even beginner solidity dev, who understands a little bit of solidity, will be able to understand that this is a total fraud. Like, first of the thing is that. First thing that to understand is that you can't just create a bot with solidity script. No, this is not the only thing. This is not the only thing that is required to create a bot. There are several other things that we talked in the video that are required to create a bot, right? So this contract, like, if somebody is saying you that only run this contract and you will get Mev, then it is totally wrong, right? This is like the first red flag. And after that, what is happening is that this contract is actually extremely big, right? So it's like you can say 625 lines.
02:49:20.426 - 02:50:35.506, Speaker A: So what, they are trying to make a fool out of you, right? You have 625 lines of code. And maybe this is true, right? So some people will think like that, right? Yeah, it's a buggy code. Now, what is the bug? So we will not go through each and every line of this, right? So what I've done is I've already deployed this contract, right? So once you deploy this contract, there are four functions. Start, stop, withdrawal and order, right? So how does the fraud actually runs out is that they ask you to deploy this contract on the main net, and then they ask you to transfer some money to this contract. So they ask you to, hey, copy this address and then transfer some money to where? And after that? After you have transferred money to that, they ask you to run any of these functions, right? So if you even run this start function as well. No, what is going to actually happen? Okay, so let's go to the start function. If you're going to call the start function, what it is going to do is basically, it's going to emit the log that, hey, I'm running front ran, attack, blah, blah.
02:50:35.538 - 02:50:35.734, Speaker B: Right?
02:50:35.772 - 02:51:18.318, Speaker A: But after that, what it is basically going to do is it is going to call a function another function, we will look into it what this function is, and then it is going to transfer all the balance that is present in your smart contract to their address that will be returned from this function. So everything that you deposited into this contract will be gone. It's simple assembly and we will go through this functions. But all these functions going to do the same. Like if you see the stop function, right? So if you're going to see stop function here. So see, it is also going to do the same just calling another function, just a fake function. And then it is going to transfer all the balance to that, right? And then withdraw.
02:51:18.318 - 02:51:22.822, Speaker A: So if you go to with a withdraw function, it is going to do the same.
02:51:22.876 - 02:51:23.480, Speaker B: Okay.
02:51:24.330 - 02:51:56.130, Speaker A: It is going to do the same thing if you go to the withdrawal function, right? So this is like simple basic math that it's a proper fraud. Now, if you go to these functions, the inside functions, what they are calling is basically suppose withdrawal profit, right? So it is returning an address, right. It is again calling another function and returning it. So they're trying to make it more and more complex, right? And eventually what it is going to return is very simple.
02:51:56.200 - 02:51:56.386, Speaker B: Right?
02:51:56.408 - 02:52:32.990, Speaker A: So if you see this start exploration function, it is just concatenation. It's going to concatenate some string and eventually return the scammer's address, right? So this is like fake. Everything is fake. If you know a little bit of solidity, even if you know basics of blockchain, then you will understand what is this and why do these numbers and blah, blah. And yeah, everything is fake. Call mempool length. What is this? And then, yeah, everything is a joke.
02:52:32.990 - 02:52:49.842, Speaker A: I just wanted to clarify, you guys that this fraud is going on and anybody will never share their proper strategy bot, which is actually running alive and which is earning money.
02:52:49.896 - 02:52:50.066, Speaker B: Right.
02:52:50.088 - 02:52:54.114, Speaker A: It is very tough to write those contracts and nobody will share it to you.
02:52:54.232 - 02:52:54.514, Speaker B: Right.
02:52:54.552 - 02:54:02.710, Speaker A: So be aware of these scams that is going on, right. And it's actually hard to write these semi v bots. And after this coding part, we have also recorded a podcast with one of Mev Searcher where he actually explains that it is also a big deal if your bot is actually running, right? So code optimization is the second thing. But even if you create a bot that is actually making profit, that is also a big thing, right? So yeah, it's a tough space. It's a competitive space, right? So hope this was helpful. And after this, please do watch the podcast that I recorded with an actual searcher, actual builder who actually explains what is the current mev landscape, how you can get into it 2024 what he is bullish on and yeah, so it's a really good podcast so you can check that out. You should definitely check this out after and thank you so much for watching these course again and if you have any doubts, if you have any questions just follow me on Twitter and dm me on Twitter.
02:54:02.710 - 02:54:34.610, Speaker A: I'm also on LinkedIn. You can check out my LinkedIn. I will provide the link to everything in the description of this video and if you like this crash course, please like comment. Let me know how it was. What other videos do you want to see and just share it with your friends? Just share it on Twitter and LinkedIn. It will be really helpful if you can share it with your friends and spread knowledge and I hope this full course will helpful. There's also a telegram group by the way, you can join there.
02:54:34.610 - 02:55:01.578, Speaker A: And I also post a lot of web3 stuff there. And I also post job opportunities and everything related to web3 and research as well, so you can join that group as well. Okay, thank you so much for watching. I hope this was helpful. Please listen to the podcast. Thank you so much and take care Gm Gm everyone. I'm Uttam and I'm here with Zero X princess who has been really active in this mev space.
02:55:01.578 - 02:55:19.380, Speaker A: So thanks a lot zero x princes for joining this and helping us to understand more about mev and in this crash course, your session would be really helpful. So welcome and go ahead and maybe introduce yourself and share your journey how you got into this mev and crypto space.
02:55:19.910 - 02:57:41.230, Speaker C: Yeah, thanks for inviting me to this podcast and your session. So we were actually MeV searching since 2020, our team is doing arbitrage on Ethereum and we have started along before PBS came out and flashbots became popular and actually the flashbots are introduced all the PBS and the MeV term in particular. And back then everything was called just arbitrage and just we were just running boats without knowing it would be called MeV. Since flashboats have started, I think all the operations got drastically less complex and risky because before you had to send your transactions right to the mempool or transaction pool as you wish, if your transaction didn't land, you would actually see it Jupiter and you would be paying for its fees. And because of the high competition in the space, because there were a lot at stars, liquidation bots, then arbitrage bots and also sandwich bots, there was a huge competition in the space and a lot of back then you would see, like, half of the block, up to half of a block of just bots reversing their transactions, especially at the top of the block. And so that's why Flashbus came out and said, look, we are wasting, like, half of the block space for just revert transactions, and we are making it very hard for just normal people to transact in Ethereum. We would not like to eliminate all this competition and just make, it's impossible to do arbitrage, liquidations, et cetera, but let's make it a separate environment.
02:57:41.230 - 02:59:08.614, Speaker C: And they started, it wasn't PBS at first, so it was back in the proof of work era. But since PBS, it became really popular and commoditized, so it became widely accepted as a norm in the searcher space before the PBS. I think there would still be a lot of searchers and bots sending their transactions to the mempool, especially long tail ones. But I think now, like, 99% of all mev related transactions are sent being sent to the flashbots. And it became so popular that this practice of having such environments became widespread to other chains as well. So we can see other, I would not say, like flashbots, copycats, but other projects that are trying to make environments for auctions for the block space. And they're, like, integrating order flow and the block space from the validator side into the one environment.
02:59:08.614 - 03:00:02.890, Speaker C: So there is a polygon fast lane, for example, on polygon. Yeah, you know, that, and that's like a great auction with a very different design than flashbots, and it's actually much more constrained, and it's better, in a sense that it doesn't allow sandwiches to occur. Yeah. And it's great in this case. So there's also wall chain on many networks, I think, live. It's not really a block space auction, but it's an order flow auction that's also very similar. It just integrates with Dapps right, in their UI, and it connects users directly to searchers.
03:00:02.890 - 03:00:35.122, Speaker C: And there's also blocksroute, who's operating on BSC. They're building blocks in the same manner as flashbots are doing on fume. And their auction is very similar, I think. Flashbots compatible. Totally. And, yeah. So we see the rise of these kind of environments since flashbots have popularized and got adopted by the industry.
03:00:35.266 - 03:00:47.500, Speaker A: Yeah, got it. Okay, awesome. So can you also just go deep dive into your working day to day? What do you work on? What are you working on currently? Do you have a team, or. If you can share that?
03:00:48.110 - 03:01:47.806, Speaker C: Yeah, so we are making arbitrage bots so we have only one strategy because there's a huge piece called Mev, and we can separate it for multiple pieces. And the largest piece is stat arbitrage. That connects CFI and Defi. And then there comes sandwiches. That's called hostile MeV because it actually makes users execution worse because it sandwiches the user's transaction and affects users execution price. And then there's backrun arbitrage. So when you are placing a transaction behind the user's rate.
03:01:47.806 - 03:02:41.966, Speaker C: So users trading on some pools, amm pools usually, or it creates some order in the order book and your back. Right. And this order, it affects the price in these pools that users is using, but very often other pools remain unaffected. And it basically creates an arbitrage window so you can place your own transaction to balance the price in these pools. Yeah. And that's not hostile. That's actually very good thing in the space because it makes price in all dexes the same, basically, and it balances it.
03:02:41.966 - 03:03:56.498, Speaker C: So other users that will be trading on these tokens will not have to compare all these prices in all different dexes to see which price is better. They can just come to any dex with liquid pools and just do their trades without worrying about the price. That was what we're actually doing. The competition for these pieces is very, it pretty much correlates with their market share. So the larger the piece, the more competitive it is. And so the background arbitrage is the second, I think, most competitive piece. Unlike many searcher and searcher teams, we are not doing the so called long sale arbitrage, but we are just focusing on this one particular strategy, which is back running user order flow and doing an arbitrage in the same block.
03:03:56.594 - 03:04:00.806, Speaker A: So, yeah, my second question was actually really about this mv current landscape.
03:04:00.838 - 03:04:01.034, Speaker B: Right.
03:04:01.072 - 03:04:08.698, Speaker A: So right now, if anybody who is now interested in MBB, he's just entered into this space.
03:04:08.784 - 03:04:09.226, Speaker B: Right.
03:04:09.328 - 03:04:31.710, Speaker A: So what will be a good advice from your side in terms of becoming a searcher? Or maybe they should become a builder or they should become both? Or what will be your advice these days? I've seen specifically searchers focus on particular apps. Like recently there was friend attacks. I've seen the static stats of MeV there. So what's your advice?
03:04:31.790 - 03:04:32.580, Speaker B: Go ahead.
03:04:33.190 - 03:05:49.514, Speaker C: So what I think actually, yeah. And that if you are a solo searcher and you do not have lots of resources to start with and you don't have any capital, you don't have any relevant experience from the past, I think it would be easier to do this long tail arbitrage focusing on not very competitive chains or not very new apps. So basically, you are betting that these apps will became popular enough so you'll start making the revenue before everyone else. Because large searchers like us, we are focusing on apps that are already popular. And so there's always a room for small searchers to hop on this train before it gets some traction. So, as with friend tech, the first bots I peers, I think even like in the first 20 hours when it came live, because it used very simple APIs. Yeah.
03:05:49.514 - 03:06:45.630, Speaker C: Because I too checked this, I wanted to make a bot. Simple bot for friend Tech. Yeah, it is very simple APIs. It was very simple to actually create a bot in literally hours. And so users who registered, who made their bots fast, they profited a lot when it became really popular, because friend attacks became, I think, much more popular than everyone have been expecting it to be. Those who hoped early, they earned pretty much a lot of revenue. And if you're a soul searcher, you should target apps like that.
03:06:45.630 - 03:07:54.610, Speaker C: You should target chains like that. It would not be a good volume or it will not be a good revenue unless the app will became popular. But it's a good start. And I think it's the only viable option for someone to get an experience for the actual searching experience, because there's a lot of places where you can make mistakes, and there is a lot of, like, it's very complex, like usually MeV, because it requires you to be very knowledgeable in execution clients in how consensus on particular chain works. So, for example, searching on Ethereum and searching on BSC is two very different beasts. Because the consensus on BSC is wildly different than the one from Ethereum. Yeah.
03:07:54.610 - 03:08:23.740, Speaker C: Because if you send transaction on BSC, you would not be included in the next block, but in two blocks after the current block. Yeah. And so previously, you had to predict, and you still have to predict what the next block will be, because your actual targeted, not this block, but the block after it. That's very. A complex topic. And there's a lot of other chains. For example, the avalanche that has.
03:08:23.740 - 03:09:26.302, Speaker C: It actually has a private mempool that actually is not available for normal people funding clients. You have to be the validator to have access to the mempool. Every chain has a lot of nuances. And if you're a searcher, if you're starting as a searcher, I think it's mostly positive thing for you, because it actually gatekeeps other teams, large teams that are already competing on large chains to enter, so they are not entering other chains because of these nuances. And these nuances will also help you to get hands on experience of participating in this market. I think you should target these long tail opportunities if you're starting. So that's my general advice.
03:09:26.302 - 03:10:17.140, Speaker C: But otherwise, if you want to have sandwiches or arbitrage, that's the most like, because these are the most popular topics. Everyone's talking about sandwiches. Everyone says, look, these bots are making, like, millions in profits. Like, look at the Jarrett from subway, et cetera, et cetera. And everyone wants to be the next Jared, right? So they do not want to make a ramen profitable bot, right, to make hundreds of dollars per month. They want to make millions right away. And that's the common mistake people are making, because these are highly competitive niches, and they are not a great place to start.
03:10:18.710 - 03:10:28.920, Speaker A: I've actually heard somewhere that 50% to 60% of the job is to reduce latency, and the rest is code optimization. Is that true?
03:10:30.010 - 03:11:21.430, Speaker C: It depends on the chain. Again, so on binance smart chain, on BSC, for example, where we also operate. So the latency, I think, is one of the greatest things that you're optimizing for now. It's not that crucial since blockstrout came with their own block auction. But before, when everyone were operating in transaction pool, the latency was very important, and especially because that binance had a lot of pools. They had much more tokens than theirs on Ethereum. So I think now it has literally, like, millions of pairs deployed.
03:11:21.430 - 03:12:44.000, Speaker C: That's a huge number, because on Ethereum, you cannot imagine that much of uniswap pools being deployed. But on binance smart chain, where all the fees are negligible, you can easily deploy. And so all the shitcoin makers, creators, Devs, they are spamming this pairs like crazy. And so there's, like, I think maybe tens of thousands of new pools created each day on binance smart chain. And so there's a lot of room for optimization, because you have to make a bot that would actually be able to process all these pairs, because the block is only 3 seconds on binary smart chain, you have to be able to process hundreds of millions of arbitrage cycles in just a matter of milliseconds to be able to place your own transaction there before everyone else. So that's a huge factor in such chains. But on Ethereum, I think it's not that crucial, especially if you're starting, if you're like, middle search.
03:12:44.000 - 03:13:44.770, Speaker C: Yeah, the average searcher. So the latency is not the first thing you're targeting for. So your first target, if you are starting, is to actually have proof of concept that works, because there's a lot of points of failure there. And you can make mistake literally everywhere. So you can make mistakes in the contracts that makes your solution revert on chain. You can make wrong bundles that would revert, you can make wrong computations, wrong optimizations off chain. I mean, optimization that are optimizing for parameters that you would pass in the smart contract, such as amount in, if you are doing arbitrage, for example, so amount of tokens, you're actually be swapping in this arbitrage cycle.
03:13:44.770 - 03:15:33.640, Speaker C: So what you're tackling on it you is to make just the bot that works, and that works in a header of 12 seconds. That's already hard. Believe that it's not that easy, because our first bot, I think our first proof of concept that we made, I think it made all its computations, I think way like for way longer time than 30 seconds. So we computed all our address right after two blocks or three blocks already came out. Because it's actually, from the mathematical optimization standpoint and point of view, this is a very hard mathematical problem to optimize. Just having a bot that would somehow work, it's already so latency, I think, is not really important unless you are working on very latency optimized chain, because I think maybe on chains like Solana, it will be like a great deal, because it's actually a high performance chain on things like arbitrum, for example, or optimism, where you have to ping. I don't know about optimism, but I remember that on arbitrum you have to ping constantly their sequencer, so they will send you the latest state update about the arbitrage state, so you can have the latest price on all the pools you're interested in.
03:15:33.640 - 03:15:48.060, Speaker C: The latency there was like a huge deal. And because the arbitrage doesn't actually have any blocks, right. They're processing all these transactions first in, first out order.
03:15:48.510 - 03:16:07.940, Speaker A: Actually. That is very interesting. I wanted to get into this l two topic. So what is going to happen in these l two s? Because PBS eventually, like the proposal builder, separation is eventually not going to come on these l two s. Right. So with having a centralized sequencer, I think it's like taking a step back. So what's your views on that?
03:16:09.030 - 03:17:08.130, Speaker C: Yeah, that's a very interesting topic. And as you know, like a huge narrative in ethereum space, that at some point there will be a shared sequencer. And so many teams, I think maybe not a lot of teams, but the ones that are doing it are very vocal, I guess, and a lot of people are talking about it. Is that, yeah, right now we have centralized sequencer, but we will make a better one. So we're now focused on stuff that just works. But in the near future we'll work on that and we'll make it a centralized sequencer. Of course, I think that centralized sequencer is a step back in terms of actually the crypto values that I have in the industry.
03:17:08.130 - 03:18:03.720, Speaker C: And the first of all, this is decentralization actually. And arbitrum makes it all. Not arbitram, but most of elze introduces a lot of compromises that makes these values like non existent. And so they're very centralized. In terms of PBS and all these auctions, I think that we have to come a long way before it gets there. I don't think that PBS, like the flashboards themselves, are very targeted towards launching their systems on all two, because it's too far before that point. So we can think about that.
03:18:03.720 - 03:18:55.266, Speaker C: And so I think who will first will launch on such like l two s would be order flow auctions. For example, I already mentioned the wall chain. They are integrating right into the Dapps. And so they are basically chain agnostic. And their system does not really depend on the settlement layer and on the execution layer. And so because they are integrating their system into the app, then user sends their intent to swap a transaction. They are connecting user to the searcher, and then searcher sends some kind of quote of how much mev rebate they will give to the user back for their trade.
03:18:55.266 - 03:19:49.638, Speaker C: So basically there are searchers who are bidding for user trades, and then when user actually makes a transaction, it goes to the searcher first, then the searcher executes its arbitrage. It goes to the searching in an unsigned way. So the searcher actually doesn't have a row transaction, so it can't execute it for the user. The user will have to execute the transaction himself. And yeah, so the searcher makes his own solution. It sends it to the wall chain auction, and the wall chain chooses the best solution among all the searchers who bid on this user trade, and then they send the solution back to the user, and it's the user who sends the full transaction on chain. So it includes called data.
03:19:49.638 - 03:20:36.662, Speaker C: The wall chain dives to the user. This kind of auction, as I said, it's chain agnostic. I think they're already launched in the arbitrum, they launched on binance, smart chain, and I think they're live on like seven chains already or something. And so they're looking for Dapps to integrate with because that's the hardest part. So you have to onboard actual D app developers so they can integrate the wallchain's SDK into their UI. And that would be very hard to integrate with the giants like uniswap. Right.
03:20:36.662 - 03:21:15.054, Speaker C: Because uniswap positions itself as very neutral enter. And so they are trying to make all their systems in house without involving everyone from the site. So it would be very hard for these order flow auctions to integrate with the DB apps. But technically I think that's the only possible way to be live on ltus. So there's no other way such, any kind of auctions would be able to go live on these ltus. Yeah.
03:21:15.112 - 03:21:15.478, Speaker B: Okay.
03:21:15.564 - 03:21:16.246, Speaker A: Got it.
03:21:16.348 - 03:21:17.126, Speaker B: Okay. Yeah.
03:21:17.228 - 03:21:43.674, Speaker A: Now my next question would be around enshrined PBS. So currently, how is your relationship? How is one's relationship is like searcher and builder relationship right now? So searchers creates his bundle, does he broadcast his bundles to all the block builders? How is that relationship? And then also right now, I have heard that in the mev boost, with mev boost there is problem with centralized relayers.
03:21:43.722 - 03:21:43.982, Speaker B: Right.
03:21:44.036 - 03:21:47.470, Speaker A: So how is that going to change with enshrined PBS?
03:21:48.610 - 03:22:37.230, Speaker C: So I think that there is a huge room for improvement in the PBS design and I think that flashboards, they are doing a great job there currently. How does it work? So the searcher create their bundles, they are choosing builders to send it to. So they are not mandated to send their bundles to all builders that they can choose. They can pick because being a builder is permissionless right now. Right. And being a real permissionless too. So you can be an actor in all of these stages of pipeline.
03:22:37.230 - 03:23:31.786, Speaker C: What that means is that every builder and every relay have no guarantees that they are actually not acting against searchers or against users. Right. So you can become a builder and for example, as we saw, you can unbundle blocks. Sorry, unbundle the bundles. Yeah. And that's a huge deal for sandwichers because their main risk is the actual unbundling because they will, else will hold an inventory in a token that's usually very illiquid token and they would not like to have such kind of exposure. So they would like to have their bundle being atomic.
03:23:31.786 - 03:24:16.634, Speaker C: And so builders does not have any guarantees that they're not acting against searchers. Relays have no guarantee. Hicks. All this pipeline is like based on trust and it's not really provable trust, but the only proof of trust is history. So it's because it's a blockchain. We see who landed which block. We see the history, which bundles were being sent to the builder, how builder has acted, what it sends to the relay, et cetera.
03:24:16.634 - 03:25:14.978, Speaker C: So most of this data is public. And so if someone is acting against someone else, so we'll see that. And that's the only reason why this pipeline works somehow, because the only thing that makes searchers and builders and relays to be trusted is the history. And then builders would build blocks with bundles that searches have sent them. And then the blocks that they have built, they send it to relays. Relays are choosing the best blob possible and set it to validators. And so I think the huge issue there that is widely discussed is that relays don't actually have a revenue model.
03:25:14.978 - 03:26:01.870, Speaker C: So the relays are considered currently as a public good. And so to run a relay, it's very costly operation wise. So it's hundreds of thousands of dollars per year to just run a relay. And so it's a huge issue because this is the. I think it's maybe the most important actor because it's actually who decides which blocks should be included on chain, which blocks. It propagates to all the validators, because validators do not decide on anything. They're just receiving blocks.
03:26:01.870 - 03:27:17.910, Speaker C: And the validator is one who makes a decision. And so it actually makes a huge. So it's an issue because there is a possibility that in the future, or there's, like technical possibility and theoretical possibility that the relay can be bribed by builders. So this relay could choose the block that's not the best block in terms of revenue to validators, but it can choose the block that's best for revenue of the relay. So builders can include bribes not only to validators, as it currently happens, but they can also include bribe for the relay itself. So it would be actually a very sustainable model for relays, because now relays will be receiving also a part of this distribution of med, because currently they receive nothing. They just exist, and they're operating at huge losses.
03:27:17.910 - 03:28:45.154, Speaker C: The way that we can frontrun this issue, as flash does it, with the original mev like problem, we can also introduce some kind of reward model to relays as well. So instead of them getting bribes undisclosed in an undisclosed way, that might happen. So it would be very easy to hide, for example. Right? So they really might get bribed, and it may change addresses, for example, very frequently, and we not see that it's actually getting bribed and it's acting against the whole system. So we can actually make a legit reward model that would require sharing, that would make builders share a part of their revenue with relays as well, in a legit, transparent way. So that's, I think, the problem that people are discussing, because that's one of the greatest issues, I think, with the current BBS auction design. Yeah.
03:28:45.154 - 03:29:41.810, Speaker C: So there's actually other direction to think about it because there's not a lot of builders currently, right? So there's like four major builders or something like that, that are building blocks. It actually may happen that having relays is not like. It's not a requirement for this system to be live, right? So what builders can do is that they can integrate with relays. So they can run their own relays, for example, like Builder 69, or like R Sync or Beaver build. Like major builders can create their own relays, right. There was a lot of talks that the builders are integrated with searchers. So this is called searcher integrated builder.
03:29:41.810 - 03:30:51.034, Speaker C: Right? So there's vertical integration between searchers and builders. But now we can talk about integration between builders and relays, so builder can integrate the relay until their whole pipeline. And so that would be, I think, a threat to decentralization. Because currently all the relays that are running are pretty neutral. They are neutral that receive bundles from all builders that exist. But if metro builders will want their own relays because they're all dominating the market, they will reach the same amounts or the same number of validators that current neutral relays have. And so they will be just keep dominating ads and actual neutral relays will die because they're operating at loss.
03:30:51.034 - 03:31:49.710, Speaker C: But because builders will run their own relays, it will be profitable for them to run these relays. Validators will not care from who they will receive their blocks from unusual builders, or from neutral relays like now, or from biased integrated relays integrated into builders. So they will not care from who they will receive these blocks. Because neutral relays will die. There will be no room for future builders to come, because they will not only have to run their old builder, but they also will have to have a relay that will have to acquire all the validators on Ethereum. And that's like impossible. And we'll be stuck with all these four builders.
03:31:49.710 - 03:32:57.160, Speaker C: That's a huge incentive issue that we have currently. And so currently, for our own goods, it's purely theoretical, but things in MEV landscape moves really fast, I think, especially at the bull market, when the MEV is becoming huge in volume, all these incentives are being accelerated and leveraged. And now it may become from theoretical issue to real issue. No one will be able to stop the builders who are dominating the market currently from integrating it, because that's a permissionless system. Everyone can do whatever work. He.
03:33:00.170 - 03:33:08.280, Speaker A: Yeah, that's quite amazing. I've seen a lot of memes on Twitter as well. That relayer is asking searchers and, hey, are you guys getting paid?
03:33:09.930 - 03:33:11.078, Speaker C: Yeah, I remember.
03:33:11.164 - 03:33:15.042, Speaker A: That's really helpful.
03:33:15.106 - 03:33:15.734, Speaker B: Okay. Yeah.
03:33:15.772 - 03:33:49.442, Speaker A: So, yeah, I guess that was really insightful, and thanks for that. And also, by discussing this, there is a lot of opportunities in the research space as well. As he mentioned that a lot of opportunities are there in this space. So if you are a researcher or someone, go into this space, learn about me. We love about these three layers. If you're a researchers, just give your advice as how we can improve the space and how you can create decentralization and make sure that decentralization is there.
03:33:49.496 - 03:33:50.046, Speaker B: Okay. Yeah.
03:33:50.088 - 03:34:02.994, Speaker A: Moving on to last question. What are you bullish on in 2024, especially in terms of Mev? Sua is coming from flashboards. There was also Eiglear PEPC.
03:34:03.042 - 03:34:03.254, Speaker B: Right.
03:34:03.292 - 03:34:07.180, Speaker A: So especially in the mev space, what are you bullish on in 2024?
03:34:07.550 - 03:34:38.200, Speaker C: Yeah. So suave is a very discussed topic, because everything that flashboards did were quite adopted, very warmingly, in the space. So everyone not liked what they did. For example, I started my Twitter journey with threads that criticized flashbuds and their auction design because I didn't really like what they have done.
03:34:40.490 - 03:34:42.840, Speaker A: You criticize them, and then you join them.
03:34:43.210 - 03:35:25.300, Speaker C: Yeah, but then no one had a choice but to adopt this system, because they have become favorable by validators. And the validators, they are the ones who are settling all the blocks. And so, initially, it was minors. So we searchers are very poor, poor people in terms that no one listens to us. We are not crucial a part of the system, so we are replaceable. All the searches. So one searcher goes away, the others will come.
03:35:25.300 - 03:36:05.842, Speaker C: And that's why we are bidding, like, 90% of all our profits. So we are left with a very little profits, because we are at the very start of this supply chain. And so we are not the ones who are making decisions. Right? So the builders will make their decisions. The relays will make their decisions, and then the builders, who will make their decisions as well. But searchers, they are not making any decision. So, yeah, everything that flashbots did was quite adopted very well.
03:36:05.842 - 03:37:08.070, Speaker C: And so they're working on Suava now. They're very focused on it. And so a lot of people are bullish on Suava. Because it unionizes all the auction between all the chains as bear staking. I don't think that it will be as adopted as the current PBS design, to be honest. So I would not say I'm bullish on suave, to be honest, because current system, the current PBS design, while it's flawed, it's a trusted pipeline, but we can improve that, as I mentioned, and it's an old working system. It's relatively transparent, and it's an easy system because it doesn't have any strong guarantees.
03:37:08.070 - 03:38:10.140, Speaker C: It's an easy to implement, and so it's easy to participate in currently. And so, for example, our team is making builder right now, and we were working on builder, like for. Since PBS came out, we just didn't have enough order flow, a private order flow, to start and be competitive. But it's an easy system. But Suab, I think it's a different beast in terms of complexity, and it would be much more complex to actually implement and run, I think, and so much less people would understand all the nuances of suave. And so the flashbots will dominate the space again, and it would be very hard to actually centralize, not in terms of. In theoretical terms, but it's just only flashbots team who will understand how Suava actually works.
03:38:10.140 - 03:38:53.862, Speaker C: And so no one will be able to just easily build for all of this ecosystem, because the PBS ecosystem is very diverse. There's a lot of actors on all of these levels. But Suava tries to unionize it and make it all into one integrated system. This will just work for everyone. But, yeah, no one will actually be incentivized to implement it at the first place because they already have. PBS doesn't give any more revenue developers, it doesn't give any more revenue to builders. It doesn't give any more revenue to almost everyone.
03:38:53.862 - 03:39:53.750, Speaker C: So it makes the same job, but with more guarantees. But I'm not sure that these guarantees are demanded by all people that are actually in the space. So I'm not saying I'm bullish on Sua. So what I'm bullish on, as I mentioned, is order flow auctions. The one problem is that the huge part of the supply chain is currently mostly untouched. That's the interaction of users wallets and other order flow originators with searchers and builders, because currently, most of the order flow are still coming from public transaction pool. But you know that there's already the most popular order flow auction called MeV blocker.
03:39:53.750 - 03:40:49.542, Speaker C: Right. That takes orders from users, and it actually bypasses all the mempool operations and gives these transactions directly to builders privately. I think that's the last part of the supply chain that's relatively untouched. And the competition will shift from competing among searchers and builders. It will shift to competing for users, for user acquisitions directly. So each party we would like to have the exclusive order flow to not compete with others in the public space. So they would like to acquire users directly from Dapps or acquire users from, for instance, telegram bots, trading telegram bots.
03:40:49.542 - 03:41:59.970, Speaker C: And like many, many order flow, there's many order flow originators that everyone would like to acquire and get the order flow from them. So that's what I'm bullish in 2024. So I don't think that's a huge topic for newcomers because of that. But in terms of the overall design and overall ecosystem, I think that's an actual end game. And developments of these order flow auctions, that would not be an auctions for the block space, but be the auctions for the actual users. I think that would be the major topic in the mev space in 2024. And I think that it would be the single topic that would be actually relevant because the current competition, the only thing that really matters, it's not the latencies, it's not anything else.
03:41:59.970 - 03:42:44.266, Speaker C: Because it's an oliver we explored because we usually say about MeV that it's a dark forest, right? And the flashboards came to give us a latin that would. To light this dark forest. But I think actually this dark forest is mostly explored already, like by the top teams especially. And there's almost no alpha left in the space. And so everyone are trying to shift the competition to some, to unexplored areas. And the single unexplored area is the actual interaction with the user. With the user.
03:42:44.266 - 03:42:48.858, Speaker C: So, yeah, that's what I'm most bullish on ventilator for.
03:42:49.044 - 03:43:09.942, Speaker A: That's actually awesome. Yeah, awesome. Yeah, I guess that was really insightful. Thank you so much for joining. This means a lot. And maybe, hopefully we will have another podcast where you can share more experiences and maybe in 2025 you can come in again, share your. Whether your things you're bullish on was successful or not.
03:43:09.942 - 03:43:19.830, Speaker A: But yeah, thank you so much for joining. And I will drop the link to your Twitter. So if anybody wants to follow, go and just follow him on Twitter.
03:43:20.130 - 03:43:28.220, Speaker C: Yeah, really like the chat. Thanks for inviting me. See ya. Close.
