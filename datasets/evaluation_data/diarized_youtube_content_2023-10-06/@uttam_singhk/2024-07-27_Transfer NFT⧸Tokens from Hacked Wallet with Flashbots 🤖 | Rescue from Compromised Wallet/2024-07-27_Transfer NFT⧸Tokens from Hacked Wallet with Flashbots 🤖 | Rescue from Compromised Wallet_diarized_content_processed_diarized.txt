00:00:00.280 - 00:00:49.386, Speaker A: Gm Gm everyone in this short video, we are going to learn how to transfer or rescue any remaining tokens or nfts out of a hacked or compromised wallet. So in normal conditions, when you are trying to transfer your tokens, you need some ETH to pay for the gas. So you transfer some ETH and then you send the transfer token. But in the case when your wallet is compromised or there is a sweeper botanical, the victim of the hack who is trying to transfer the nfts out of the wallet. But every time he sends ETH to use as the guest, the hacker has a bot set up immediately that drains the wallet. So whenever you transfer any amount of the heat, it is immediately drained. You transfer 0.1
00:00:49.386 - 00:01:16.110, Speaker A: eth, it becomes zero. You again transfer 0.1 eth, again, it becomes zero. There is nothing that you can do to avoid ethan. ETH gets trained also I was also hacked once. The sweeper bot was eating all my ETH in the wallet and my nfts were stuck in there. Fortunately, I was able to rescue them using flashbots relay.
00:01:16.110 - 00:01:56.510, Speaker A: And that's what I'm going to show you. You can also rescue your nfts or tokens using flashbots relay. What's the solution? So what we need to do is basically create multiple transactions and send them in one bundle. The first one adds ethers to the wallet, the second one transfer the assets out. We take them together in a bundle. So when these transactions land on the blockchain, there will be no blocks between these two transactions. A thing to remember is we can't get out of the sweeper botanical, so you can't use your compromised wallet again.
00:01:56.510 - 00:02:56.712, Speaker A: Now, in order to send bundle, you can't send them using metamask or standard JSON RPC like infura or alchemy. We need to use a special relay. This allows you essentially to pay for the transaction on the compromised address from another account. In simple terms, this is accomplished by submitting a flashbots transaction bundle, with the first sponsor transaction paying the executor wallet in ETH, followed by a series of executor transition that spends this newly received ETH on gas fees. Now, few properties here to remember is that bundle is atomic. All transaction will pass or none of them will go through. Bundle will not be visible in Mempool, aka Dark Forest, so hacker bot will see it only if it is included in block, and that's too late for him to do anything about it.
00:02:56.712 - 00:03:58.736, Speaker A: You can also open a case with flashbots white hat team here. If you don't wish to attempt this yourself. Please note that the recovery team requires around 1000 acid recovery minimum and they take around five to 10% cut off the recovered assets. Success using flashbots will require a little bit of technical knowledge and a little research. The following instruction that I am providing are as a general guide, but if you want to master MeV and you want to master flashbots, then you can watch my four hour scratch course where I have literally discussed everything from scratch. The history, what literally is MeV, the strategies, the PBS and MeV boost architecture, the searcher builder, relay and proposer architecture, how things are going through, how your transaction gets included in the block, and how, you know, all these searchers create MEV from your transaction. You can watch this crash course.
00:03:58.736 - 00:04:39.794, Speaker A: There is also a little bit of coding and at the end I have, I have done MeV podcast with an actual searcher, which is very interesting. So I highly recommend if you want to learn this and if you want to be a part of the MeV ecosystem, maybe you want to be a searcher or a blockbuilder and want to make some money, then please go and watch this 4 hours crash course. I am pretty sure this will be really helpful to you. Now, let's talk about the setup. So in this setup, you will need three things. First is the compromised wallet, which is the owner of the nfTs, right, the wallet that is compromised. The next thing is the safe wallet.
00:04:39.794 - 00:05:25.032, Speaker A: I want to transfer my nfts to this wallet. So this will be the safe wallet. The third one is the funding wallet. This one keeps a little bit small amount of eth for the gas fees, which is going to send, you know, this transaction to the compromised wallet so they can use it as the ETH, as the gas fees. My bundles look like this send ETH for guests from funding to compromise. So this will be the first transaction, and then the second transaction that we just talked about will be to transfer the NFT or the token from a compromise to the safe wallet. And the second transaction, again, if they are on multiple tokens or, you know, multiple nfts, then you can, you know, there will be multiple transaction and possibly more and more transactions.
00:05:25.032 - 00:06:09.486, Speaker A: Now, in order to run transactions programmatically, you will need some transaction data. So in further video, I'm going to show you how you can get that transaction data to also P's. This will also work if your tokens are staked. So if you have, if you're getting any airdrops, your wallet is compromised and you're already off, or if you have staked your tokens, then you know you can also use this. You just have to call the unstake function before transfer. Now, what are going to be some code steps involved? First of all, we will install the ether JS library to interact and the Flashbots bundle provider. So flashbots have already developed a project called Flashbots search or response or transaction, which we are going to use.
00:06:09.486 - 00:06:39.220, Speaker A: I'm going to show you the NPM package just after this, and also the link to it is in the description of this video. Then we are going to bundle our transaction. We are going to see what transactions do we need and we are going to bundle them. And then we will do block targeting. Then we will also simulate our bundle to check everything is going great or not. And then we will try to send our bundle through MeV relay, that is the flashbots relay. And there might be several other steps that are not mentioned here.
00:06:39.220 - 00:07:16.290, Speaker A: So let's directly deep dive into the code and learn how you can transfer and rescue your NFT and tokens. Also, we are going to learn a little bit about EIP 1559. 1st, we will also understand bundle bundle inclusion, troubleshooting and the transaction data part. So let's get started. So I'm on my versus code now, and I've already written this script that we will use to rescue the NFT or the particular token. I'm not going to write along the code because if I write along then it's going to take a while. It is going to be 1 hour long video and I really don't want to do that.
00:07:16.290 - 00:08:03.060, Speaker A: Right. So what exactly you have to do is just start a new JavaScript project. If you're comfortable with typescript, start a typescript project and after installing, you know, starting a JavaScript or typescript project, what you have to install, you just have to install two things, which is the ethers G's library, which is going to help us to interact with the blockchain. And then there is the NPM package by flashbots, which basically is going to help us to send the MeV relay what we just saw in the slides. Just send the MeV relay bundle to the flashbots. Right? So in this way we are going to rescue our NFT. So I will provide the link to this NPM package in the description, right? So you can just go and, you know, copy paste this and install this thing.
00:08:03.060 - 00:08:25.996, Speaker A: So yeah, let's get started again. If you want to go and give it a read, that would be helpful. I mean, whatever it is written there, we are already going to use it in our tutorial. But if you want, it's good to give it a read here. That would be really helpful. And also, you can check out the documentation of the flashbots. Again, the link to this is in the description of this video.
00:08:25.996 - 00:08:55.216, Speaker A: Okay, cool. So now let's let me explain you what exactly is happening quickly inside the codebase. So we are just importing, first of all, the ether JS library, which you have just you might have installed. And also we are importing some things from the flashbots bundle NPM package that you just install. Right. After that, there is a dot env file, which consists of three things, which is the compromised key. The wallet that was hacked, the private key of that.
00:08:55.216 - 00:09:26.396, Speaker A: So whatever wallet it was, maybe it was a metamask wallet. If it is a superbot on it, take out the private key of that wallet and paste it in the dot and v file. The other key would be a sponsored wallet. So there should be a wallet which is able to sponsor that gas fee, right? So this particular wallet should have some. Some ethan, that, right, maybe 0.5 or whatever eth, depending upon what you want to do, right, and the other thing is. Yeah, so after that, you're just importing the dot env file.
00:09:26.396 - 00:10:02.244, Speaker A: And in the dot env, there might be also a key for infuriating worry. I'm going to drop a dot env sample file. My keys are in the dot env file, so I'm not going to show you that, but I'm definitely going to drop a dot env, dot sample file. So you can just copy and paste stuff that is required to rescue your nfts. The next thing is, what we are going to do is we are checking the networks here. So the first network is the sepolia one. It just has the chain id and the flashbots endpoints, right? Whatever endpoints, we are going to use it and for the main net.
00:10:02.244 - 00:10:28.316, Speaker A: So for this particular tutorial, we are going to do it on superior. That is the testnet. And if you want, you can just do the same on main net. You just have to change the chain id and the RPC endpoint. So here is the RPC endpoint. You just have to uncomment it and you have to just, you know, comment this, right? So in this way, you will be able to do the same on Ethereum minute. And you just don't have to do use only this endpoint.
00:10:28.316 - 00:10:59.374, Speaker A: So if we go to the documentation, you might see a lot of, you know, RPC is here. So you can see there's a flashbots one, Rsync one. So you can, you know, if one of your API is not working from the main net, you can chase that, you know, RPC from here. Okay, cool. After that, what we are doing here is that we have a recipient address. Like whenever you, whenever you, you know, rescue your NFT from the compromised wallet. Where do you want to send it? That should be a safe wallet.
00:10:59.374 - 00:11:22.494, Speaker A: I would suggest create a safe wallet with new mnemonic keys and everything. Right? So, and paste the address here, the public address here. I'm just going to paste it after I've reviewed the code. I've shown you guys the code, we are going to perform it live. And then there should be the token address. Yes. And for this particular tutorial, we are going to risk when ERC 20 token, not an NFT, which is just the same.
00:11:22.494 - 00:11:47.468, Speaker A: Right. We just have to change a few lines of code. But yeah, in particular, in this particular tutorial, we are going to change transfer in ERC 20 tokenization. Right. But in your case, if it is an NFT, so, you know, you have to paste the NFT address here, that will be ERC 721 token address here. Whatever an NFT is, you know, is hacked and inside the hacked wallet, right? Yes. So this would be the token address.
00:11:47.468 - 00:12:12.832, Speaker A: And then after that, what is the amount? So for this particular ERC 20 token, you know, I'm, you can, if it's an ERC 20 token, you can change the amount for here. I have, you know, changed the amount to thousand. I am going to transfer thousand dai out of it. Right. So that will be the amount. And following this, this will like really require in our transaction. So whenever we move further, you will realize why this is important.
00:12:12.832 - 00:12:38.926, Speaker A: Okay. And then other stuff is the provider, which is like a normal ether J's provider that I just said for, you know, guess estimation for non slowups. Right. So that is going to be our provider, which I'm using infuria. If you want, you can just literally use alchemy or any other RPC provider out there. I, now the next thing that we are looking is the Auth signer ethers wallet. Create random.
00:12:38.926 - 00:13:37.158, Speaker A: So what exactly is that? Okay, so is basically a ethereum private key that does not store any funds, right? So you literally need a key to sign a bundle, that is to sign, request a payload. Right. And not that transaction itself. So in this particular production, when this is used, like, and in the MEV ecosystem, this particular auth signer is very useful to build the relationship between the searcher and the block builder. So if you don't understand any of this and you know, go and watch my 4 hours long crash course where I've literally explained how the MEV ecosystem works. Like there is, there are four different things. There is searcher, there's block builder, there is, you know, block submitter, the validator and the relayer and all that stuff, right? So the relay, the searcher and you know, the block builder, they have to build a relationship, right? So they can get a maximum value out of it and both of them can get a profit, right? So this basically helps them to create and build a relationship.
00:13:37.158 - 00:14:01.846, Speaker A: In this example, we generate a new wallet each time to sign the payload. But in usual case that is not the scene. People just use a single wallet every time to build the relationship. So that is what we are doing here. And then account is sponsoring the gas fee. This is the sponsor account that I just said about. We are just importing that private keys here.
00:14:01.846 - 00:14:41.106, Speaker A: And then there is the compromised wallet that has been hacked. After that, what we are going, what we are doing here? So for this particular tutorial, as I just told you that we are going to, you know, rescue some DAi token. So what I'm going, what I'm doing here is basically, this is an API definition for the transfer function of the ERC 20 token. So for the, for this, in this transaction, one of these transactions, we are going to call the transfer function of the ERC 20 token. That is die, right? So I am what I am just creating. We need a transfer data for the same. So whatever we want to do, you know, we need to submit that to the blockchain, right.
00:14:41.106 - 00:15:10.980, Speaker A: It's not like we are using metamask or something, right. You literally have to code it, right. So that's why I'm creating a transaction data here. And this for this particular transaction data, what I'm doing is basically, you know, calling the transfer function and for that I need a transaction data so I can pass it along with my transaction. So let, that's what we are doing here with the help of encode function data. We are just, you know, encoding the function data for the transfer function. And yeah, this is simply what we are doing in here.
00:15:10.980 - 00:15:45.374, Speaker A: We will use it in our, all the transaction that we are going to submit below. So here they are. And then just, just, it's just the main function, right? And you're calling the main functions inside the main function. We are going to create a bundle. So as I just told you, right, that the bundle is going to be, you know, a bundle of multiple transactions. Right. So one of our transaction, the first of our transaction is this transaction where simply what we are doing is simply we are just sending some eth to the compromised wallet.
00:15:45.374 - 00:16:38.776, Speaker A: Why we are doing that because we need some eth to pay for the gas to rescue the NFT, right. So that's, that's always going to be the first transaction, right. So you just have to specify some things. That is the chain id, what type of transaction do you want to choose? So also the important thing about EIP 1559 is that EIP 155 support, it's basically a new upgrade to ethereum network that changes the way how you pay for the transaction. It basically introduces a base fee that is burned and then there is a priority fee that gets to basically get the faster confirmation of your transaction. So these two things have been introduced in EIP 155 support and where base fee literally gets bought. So if you want, you can just check out the transaction, the documentation and learn about the EAP 1559.
00:16:38.776 - 00:17:11.676, Speaker A: Here is also an example like what was the legacy transaction, you can see the guest price, guest limit, chain id and all that stuff. And then after EIP 1559, these were the changes there. Okay, so let's get back to the code. So what we are sending here is we are sending the value, which is the 0.01 eth because we don't need much it. And you know, I'm also doing it on testnet, so it doesn't matter much here. But if you're going to do it on Mainnet, make sure that you do a pre calculation of how much gas you really need.
00:17:11.676 - 00:17:40.096, Speaker A: Right. And because whatever gas that is not used, the sweeper bot or the wallet, compromised wallet is still going to take that eth. So only transfer the amount of gas that is really required. And then we are going to, we are going to, you know, send this to compromised address and then the max priority fee. Max priority fee per gas. So this is based on the calculation, it's more than enough for now, 50 Gui and 50 volts. 150 we.
00:17:40.096 - 00:18:08.900, Speaker A: Right, so, yeah, and after that there is a gas limit and then these, these are the things that you might have to change depending on the transaction specifically, right. Because for the second transaction that might be different because you know, there might be higher gas fees or whatever. You just have to check it and you have to do it accordingly. Okay, signer. And then the who is the signer of this particular transaction. So who's sending this transaction, which is the sponsor? So you have to specify the signer here. Okay.
00:18:08.900 - 00:18:39.738, Speaker A: And now our second transaction is the transaction here also. One more thing to remember is that you can actually create an object of this transaction. Pass the object here. I'm just directly, you know, writing it here. So that should be fine. So our second transfer track and transaction, which is actually the main transaction, which is going to transfer the token, transfer the NFT, right? So in my case, which we are going to specific, there's the same thing, this type two transaction value. What value do you want to send and what do you.
00:18:39.738 - 00:19:07.150, Speaker A: So what do we want to do here is basically we are passing the data, which is the transaction data, right. And if you remember correctly, we just looked here, which watches the transaction data. So the transaction data is basically called the transfer function. And you have to, you know, after, when you call the transfer function, you have to specify the recipient, recipient address and the amount. Right. So that is what we are going to pass in here. Right.
00:19:07.150 - 00:19:40.588, Speaker A: So when we call, I think when we are going to call that function below, we are going to pass that stuff. Okay. So if you see here, we are going to pass the receipt and address here and the amount. So, which I have already know, we have already hard, hard coded here, right? So you just have to specify, you know, amount and address there. And then here, just simply we are going to, you know, call the transfer function. So this is our transaction that is going to transfer the token or transfer the NFT from our compromised wallet just after this transaction. And these posts to.
00:19:40.588 - 00:20:08.676, Speaker A: And both of these transactions are bundled together. So either both of them go through or none of them go through. Right? So this is the main thing about the bundle. And now the signer, signer of this transaction is going to be the compromised wallet because the NFT or token is in the compromised wallet. Okay. The next thing is just, you know, starting. So I have a console dot log to see we are entering the dark forest, right? And then other stuff is that flashbars provider.
00:20:08.676 - 00:20:35.800, Speaker A: So basically it's basically we're just trying to connect with the flashbots relay. So this will send over and communicate the bundle of transactions to miners directly. So this transaction is not going to the mempool. It's not like something we're calling from metamask with infuria API or something. So it's not going to the mempool. It's directly going to be get submitted and get included. So you will not even see it on the ether scan that it is pending.
00:20:35.800 - 00:20:59.100, Speaker A: You will just directly see that it has been successfully included in the block. Right. So yeah, this particular provider is helping us to get in touch with the relayers. Right. And so that miners, and it's not basically visible in the public mempool, it's no more miners. Basically, it's validators. I think it's the old comment.
00:20:59.100 - 00:21:42.540, Speaker A: But yeah, next thing is also very important thing is that since we are not doing it as a usual transaction, right. It is not like particularly submitted in every block accordingly. So you have to literally send it to every block until it is filled. What I mean by this is since this is not going to be submitted to the mempool, it's not going to be like it is pending there. And then the validator or the miner is going to pick up that particular transaction depending on the gas fees and all. No, that is not going to be the scene since these transactions are not in the web pool. You literally need to submit this for every block until it is filled.
00:21:42.540 - 00:22:20.550, Speaker A: And you don't have to worry about repeat transaction because nonsense isn't going to change. So you can leave this running until it fails. And this is also a good thing because it gives you an opportunity for all the people that are running in this ecosystem, like all the semi v, this gives an opportunity for them to reconsider until they submit the block, the bundle to the block. Right? So, yeah, so to get the maximum value out of it. Right. So that's what we are doing is we're going to, you know, repeat this transaction until leave it running until this gets filled. Okay, so what? And then we are going to target block.
00:22:20.550 - 00:22:55.910, Speaker A: So important thing to remember is that we are going to target the next block. Always we are going to target the next block. So the target block is going to be the block number plus one. And then we are going just using the inferior library to get the block number and then we are going to sign the bundle. So after you have successfully created a bundle, we are going to sign the bundle by calling the sign bundle function method. Then we are going to run a simulation, right? So after that we have created a bundle. We are going to call the simulate function and then we are going to just, you know, create a simulation and check if our bundle is created successful.
00:22:55.910 - 00:23:32.430, Speaker A: So if there is an error, it is going to give an error. If there is no error, it's going to successfully pass and you know, it's going to send bundle, right? So this is just in check if the transactions are correct or not. Okay. After that we are going to send a bundle. So once your transaction in the bundle is successfully created and it's successfully, simulation is completed. You're going to send that bundle with the transaction response, with the sender raw bundle function, or there is also send bundle function, so which you can use. After that, what we are going to simply do is just check for errors, if there is any errors and it will throw an error.
00:23:32.430 - 00:24:08.138, Speaker A: If not, then we will wait for the inclusion in the block itself. You have to remember that, you know, not every block is running the mev boost ecosystem, so it might take some time. And specifically on the Testnet itself, not every validator is running the mev boost client. So it might take some time on the ethereum main net, but also on the Gordy testnet, it's not running. So it might take some time. I think flashbots somewhere route, it might take like ten blocks. But, but usually what I've seen from my experience that it gets faster, it gets, you know, included, included earlier.
00:24:08.138 - 00:24:39.734, Speaker A: But let's see how that goes. And sometimes you also have to go through why your bundle is not submission, right. So there, there might be some troubleshooting. So if you go to the documentation of flashbots, you will see a specific page of why your bundle is not including, right. So you can check here what should be, what are the problems like, some of the problems would be passing less. So, you know, if we guess less fee competitors paying more, right. So you have to increase the priority fee stuff.
00:24:39.734 - 00:25:07.986, Speaker A: And after that there might be some nonce collision or there might be some other error. So you can just literally, you know, check out this error if your bundle is failing, right? But usually the error is just gas fee. Just if your bundle is not included, just give more gas, right. Just pay more. Simple as that. But you can check that out here if you have to. If you face any other error, you can dm me on Twitter or LinkedIn, I will try to respond you.
00:25:07.986 - 00:25:26.722, Speaker A: So the link is in the description. So subscribe to this channel and follow me on Twitter and LinkedIn as well. I do share a lot of content there. So go and follow me there and message me if I have any problem. So I think this is completed. We are just going to check the errors. If there are any errors, then we are going to get the response and see what is the error.
00:25:26.722 - 00:25:50.626, Speaker A: And then waiting as that we will, you know, debug our code. If there are no errors, then successfully I think our bundle will be included and we will be good to go. Okay, so now I think the code, have already explained the code. You can check out the library. You can check out the library, which we are using. You can also check out the documentation. Now let's go and run our transaction.
00:25:50.626 - 00:26:22.704, Speaker A: So I'm on my terminal and now we are going to run our code to rescue the tokens. Basically I've added all the recipient address and the DAI token address to the code itself. You should, if you're using the same script then you should also add that. And this is like the ether scan, this is basically the sepolia ether scan page of, of my compromised wallet. So that we can see whatever is happening here. So you can see that my balance is 0.0 to ETH and I'm going to send a 0.2
00:26:22.704 - 00:26:59.202, Speaker A: Eth more to this particular wallet, right from my sponsored wallet. So if you remember your transaction, you can change that transfer balance, whatever you want to transfer. And then here if you see the token holdings as well, or if you just go to my wallet and you will be able to see that right now we have almost 1500 dai. So if we refresh it, it should be around 1500 dai. Yeah. So this is like the ERC 20 token which has around 1500 dai in that, right. So we have to rescue at least thousand of that die from this particular wallet.
00:26:59.202 - 00:27:24.510, Speaker A: This is a compromised wallet actually. Okay. And now all this, these are the sample transaction that I run before. But we are going to rectify and look into all the transaction that happened. So if you see here, like both of these transaction that we are going to send are not going to show us pending or something that's directly going to be in here. And one will be in transaction, one will be an out transaction. Both of them will be the in the same block.
00:27:24.510 - 00:27:52.970, Speaker A: Right? So now let's directly jump into the terminal and see how it is going to work. So I am just going to sub, sorry. I am just going into my directory where my code is. I think it is dark forest. Okay. And now we are just going to run our script. So I'm going to run NPM, run, build for the same.
00:27:52.970 - 00:28:15.610, Speaker A: So now let's see how it goes. Okay. We are entering the dark forest and we will see a couple of things, maybe few errors and what exactly is happening. So we are going to entering the dark forest. It might take some of the time. So you know, you might want to relax and drink some water. So we are preparing the bundle right now.
00:28:15.610 - 00:28:59.752, Speaker A: So this is the bundle transaction. There is a sign transaction. There is a hash and the account and everything which you can see. You can also see the nonce for particular transaction. And successfully this has been included in the particular block. Usually when you are trying to run maybe a main, it might take some time, it might show, you know, you know, few pending blocks and not actually included in on the, you know, on all the, on the first block itself it might take some few blocks to process and then include, right. But it's here, it has successfully run and our bundle has been successfully submit on the block number 622-7372 okay, which is the next blocks.
00:28:59.752 - 00:29:27.170, Speaker A: If you are, if you are aware of the code base that I just said that there will be a current block and then we are going to always going to target the next block. Okay, so successfully our bundle is included. Now let's go to ether scan and see how that it looks like. So let me just quickly refresh it. So if you see here that there are two transaction here, one is the int which is the 0.0 to eat which I just sent. So you can see the balance is around 0.1
00:29:27.170 - 00:29:52.050, Speaker A: eth now. And the other transaction is the ERC 20 transfer. And one thing to notice that both of these transactions are in the same block. Right? So that's what we wanted. We didn't wanted it to be executed differently. So the particular, you know, the hacker or the bot will be able to see it and you know, front run it. So yes, this, both of these transactions are included in the same block.
00:29:52.050 - 00:30:24.602, Speaker A: So if you, maybe if you want to open and check the transaction hash transaction detail then these are the same details. We are sending some 0.0 to eat. This was our first transaction if you remember the code base. And the second transaction was that we were transferring, you know, Dai here. So you can check out that in this particular transfer we are, you know, transferring DAi from our compromised wallet to the safe wallet which is the amount is 1000 tokens. If you're doing same for NFT, just going to literally just show here.
00:30:24.602 - 00:30:48.162, Speaker A: Okay. You can also see my holdings are now 500 rather than 1500. So Hooray. You have successfully submitted and you know, rescued your NFT and tokens. The link to this is also in the link to the code which is also in the description. I will provide my GitHub here. So if you have any errors or anything that is not going correctly, let me know.
00:30:48.162 - 00:31:20.586, Speaker A: Hopefully it should work, but if it's not working, let me know. Whatever problems you have, please like and share this video with your friends and also reach out to me on Twitter and follow me there. Follow me on LinkedIn. Also one more thing, there is a telegram group where I share a lot of things which related to web3 and blockchain like all the hackathons and grants and everything. So you might want to join there. And you can also ask Telegram. You can also basically ask any question to me on Telegram.
00:31:20.586 - 00:31:25.410, Speaker A: But, yeah, thanks for watching. Subscribe to the channel right now. Thank you.
