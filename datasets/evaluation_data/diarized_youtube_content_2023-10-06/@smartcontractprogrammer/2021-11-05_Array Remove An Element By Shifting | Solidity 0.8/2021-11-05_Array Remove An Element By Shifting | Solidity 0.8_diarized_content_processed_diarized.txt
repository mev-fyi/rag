00:00:00.490 - 00:00:44.102, Speaker A: When you use delete to clear element from array, it doesn't actually remove the element, it just resets it to its default value. For example, here we have a UN array and I've called delete on index one. Let's say that my intention was to remove the element at one and then shrink the array, but instead I get an array that looks like this. I wanted to remove the element at one, but instead it was reset to its default value. However, what I wanted instead was an array that would look something like this. One element is deleted and three. So in this video I'll show you one method to remove an element from an array and also shrink the length of the array.
00:00:44.102 - 00:01:22.690, Speaker A: The basic idea of this method is to shift all elements to the left and then pop the last element. For example, let's say that we have an array of one, two, three, and I want to remove the element at index one, so I want to remove two. Then what do we do here? We shift all of the elements to the left, starting at index plus one. We want to remove the second element which is at index one. So we will copy the element from the right, which will be three. And then finally we remove the last element, which is three, and we end up with an array, one and three. This is the array that we wanted when we called remove.
00:01:22.690 - 00:01:59.054, Speaker A: To give you another example, here I have an array from elements one to six and I want to remove the element at index two. So this will be three. I shift all of the elements to the right of the index that I want to remove over to the left. So I will move all of this four, five, six over one to the left and I will get an array like this, one, two, four. It used to be three, but we copied over one element from the right. So now it is four, five, six, and then the last element is still six. We remove the last element and we end up with the array.
00:01:59.054 - 00:02:43.278, Speaker A: 12456. Here we wanted to remove the second element, which is three. And if you look at the array over here, we have successfully removed the second element, which is three, and we have also shrinked the array by one. To recap the algorithm, we copied elements from right to left, starting at the element one right to the one that we want to remove. And after we're done copying each element, we remove the last element. Let's also look at an example of an edge case. What happens if there is only one element and we want to remove this element? So here we have an array with only one element being one and we want to remove the first element or index zero.
00:02:43.278 - 00:03:29.920, Speaker A: We shift over all of the elements to the right of one which doesn't exist, and then we remove the last element which will be one. So we will end up with an empty array. Let's now write this algorithm. The first thing that we'll do is make sure that the index is less than the length of the array, so we'll type require the input index should be less than the length of the array. So I'll type R length and if the index is out of bounds we'll throw an error message saying index out of bound. Next, we'll copy array elements from right to left starting at the index to remove. So we'll run a for loop by typing for un.
00:03:29.920 - 00:04:17.802, Speaker A: Starting at I is equal to the index that we're going to be removing all the way up to the second to last element in the array. So while I is less than r length minus one, we'll increment the index. We'll copy the elements from right to left. By typing r I is equal to one element to the right which would be r of I plus one. Once this for loop is done executing, we would have an array that looks like this. Or if we had an array that looks like this to begin with, then we will have an array that looks like this. We've shifted all of the array elements to the left starting at one right to the index that we want to remove.
00:04:17.802 - 00:04:45.142, Speaker A: The last step to complete this algorithm is to remove the last duplicate at the end of the array. And we'll do that by typing r pop and that completes the function. To reboot an array element at a specific index, let's verify that this algorithm works correctly. I'll write a test and name it. Test. It's going to be external later. We'll compile this contract, deploy it, and then call this test function.
00:04:45.142 - 00:05:20.318, Speaker A: To make sure that the algorithm above works correctly. We'll start with the array having five elements, 1234 and five, and then remove the second element. So we're going to be removing three. Once we remove the second element, our array should look like this. We'll check that the array is indeed equal to one, two, four and five by running assert on each element from zero to three. And then lastly checking that the array length is equal to four. Let's also check the edge case for removing one element and ending up with an empty an array.
00:05:20.318 - 00:05:59.290, Speaker A: We will assign the array to have one element and then remove the only element so that we should end up with an empty array. So the check that we'll have to do over here is check that the length of the array is equal to zero. Let's compile this, deploy it, and then run the test. So I'll hit Ctrl s to compile the contract. Once the contract is compiled, I'll deploy it, deploy, scroll down, expand the contract, and then we'll call the test and you can see hear that the test passed. In summary, this is one way to remove an element from array. Shift array elements to the left and then remove the last element.
