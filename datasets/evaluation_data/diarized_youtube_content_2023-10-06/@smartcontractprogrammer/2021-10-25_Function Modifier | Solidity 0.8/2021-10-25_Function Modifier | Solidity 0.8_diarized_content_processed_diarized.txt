00:00:00.650 - 00:00:25.858, Speaker A: Function modifier allow you to reuse code. Let's take a look at some examples. In this video. I'll show you a very basic example and then I'll show you an example. Using inputs, function modifiers can wrap a function in such a way that some code are executed, and then the actual function is executed, and then afterwards more code are executed. So I'll show you an example of this. Here is a simple contract.
00:00:25.858 - 00:01:24.582, Speaker A: It stores our internal count and you can increment the count by calling ink and decrease the count by calling deck. Now these two functions can only be called if the contract is not paused. Notice that we have repeated the same code logic in two places, inside ink and inside deck. Using a function modifier, we'll be able to put this code in a single place and then reuse the logic. So let's create a function modifier for this require statement requiring that a function can only be called if the contract is not paused. To create a function modifier, we start by typing modifier and then the name of the modifier. I'll name this when not paused, parentheses curly braces and inside the curly braces we'll cut and paste this logic inside here.
00:01:24.582 - 00:02:03.518, Speaker A: And then afterwards we type underscore semicolon. The underscore tells solidity to call the actual function that this function modifier wraps. The last step of using function modifier is to declare it inside the function signature. So we'll add this when not paused function modifier to this function ink by appending when not paused. And this code right here will exactly do the same thing as it did before. You'll only be able to increment the count if the contract is not paused. Let's do the same thing for the function deck.
00:02:03.518 - 00:02:45.602, Speaker A: So we'll remove this require statement because it's already wrapped inside the function modifier when not paused. We'll append the when not paused modifier to the function deck by typing when not paused. Now notice that instead of repeating this same check twice, once in ink and once in deck, we now have only one place where this code is written inside the function modifier. So this is a basic example of a function modifier. Function modifiers can also take in inputs. So I'll give you an example of that. Now here I have a function called ink by and it's going to increment the count by the input that was passed in.
00:02:45.602 - 00:03:27.098, Speaker A: Now there is a restriction to this input and this input has to be less than 100. Again, you can only increment if the contract is not paused. So, to write a modifier that takes an input, we first type modifier. I'll name this modifier cap, meaning that we're capping the input that comes in parentheses. And inside the parentheses we'll be able to put in parameters like any other function. Here we're going to be checking that the input x is less than 100. So inside the parentheses we'll type un x curly braces and then cut and paste the logic over here to inside the function modifier.
00:03:27.098 - 00:03:59.926, Speaker A: And again we type in underscore semicolon to mean that execute the rest of the code of the function. The final step to using this cap modifier is to append it to this function. So you'll type cap and then pass in the input of x. And now this function will only increment the count if the contract is not paused. And also do a check on the input. It makes sure that the input is less than 100. So that is how you pass in some inputs into a function modifier.
00:03:59.926 - 00:04:35.870, Speaker A: For the last example, I'll show you an example of a function modifier that sandwiches a function, meaning that some code will be executed inside the function modifier. The actual function will be called, and afterwards it will execute more code inside the function modifier. Let me show you an example. Here is an example of a function modifier. I've named it sandwich. And this allows you to execute some code, call the main function, and then execute more code afterwards. If we look at the function foo, it has the function modifier sandwich.
00:04:35.870 - 00:05:14.766, Speaker A: So what does this code do? Well, when we call the function foo, it's going to first execute the function modifier. It's going to update the count by ten, and then call the main function which it is attached to. In this case it will be foo, so it will update the count by one. And after this function is done executing, it's going to execute more code over here. In this case, it's going to multiply the count by two. So this is how you can use the function modifier to execute code, call the function, and then afterwards execute more code. Now obviously you can do some checks over here and then do more checks over here.
00:05:14.766 - 00:05:15.646, Speaker A: It is up to.
