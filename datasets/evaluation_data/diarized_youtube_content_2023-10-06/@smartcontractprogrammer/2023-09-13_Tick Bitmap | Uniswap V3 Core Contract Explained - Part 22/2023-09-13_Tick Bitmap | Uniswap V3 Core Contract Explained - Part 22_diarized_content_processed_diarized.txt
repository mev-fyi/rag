00:00:00.330 - 00:00:38.658, Speaker A: In uniswap B three. When you do a trade, how does uniswap find the next position? The way it finds the next position is by recording the position's tick lower and tick upper in a mapping called tick bitmap. A tick bitmap is a mapping from int 16 to un two five six. The keys of this mapping will be int 16 ranging from minus two to the 15 to two to the 15 minus minus one. The values for this mapping is a un two five six. But the way to think about it here is that you should think about this as a bit of zeros and ones. 256 bits okay, so this is a tick bit map.
00:00:38.658 - 00:01:09.534, Speaker A: The next thing that you need to understand is called a position. A position basically is an int 24 that splits into int 16 and unit two five six. For example, let's say that we have a tick. A tick is represented by int 24. For example, let's say that this tick is equal to. -200,697 we can represent this as a sequence of zeros and ones. The first 16 bits counting from the left is called a word position and this is represented as int 16.
00:01:09.534 - 00:01:37.258, Speaker A: The last eight bits is named as bit position. So this is a position int 24. Tick splits into two parts. Int 16 and un eight. How does unisoft v three store a tick into a tick bitmap? We will use the tick from the previous example and here we have the tick. The first 16 bits is an int 16 and this is a word position. And the last eight bit is stored as un eight and this is the bit position.
00:01:37.258 - 00:02:28.918, Speaker A: When you just evaluate the first 16 bits as int 16, this turns out to be -784 if you evaluate the last eight bits as un eight, this turns out to be seven. Next, using this -784 as the key, we access the tick bitmap of int 16. Access the tick bit map at minus seven eight four and let's say that the value of un two five six that is stored at this position minus seven eight four, is some kind of un two five six with zeros and ones. To store the last eight bits of the tick, this is equal to seven. So we set a one at the 7th index. This return a zero at the 7th index of a 256 bits to one. This is how unisor b three stores a tick in a tick bitmap.
00:02:28.918 - 00:02:59.702, Speaker A: Split the tick into two parts and the last eight bits is stored into 256 bits. And here's how to recover a tick from a tick bitmap. On the left we have the keys for the tick bitmap. And let's say that we access the key. -784 and at this key, let's say that the value is this sequence of 256 bits of zeros and ones. To get the tick, we fill the first 16 bits with. -784 now tick is int 24.
00:02:59.702 - 00:03:30.698, Speaker A: We filled up 16 bits, so we still have eight more bits to fill up. Let's say that we wanted to get the tick at this 7th index. Then what we do is we first write seven as un eight, a sequence of zeros and ones of length eight. And then we fill up the last eight bits. And this is how we recover a tick from a tick bitmap. Access the key, fill up the first 16 bits, access the index and then fill up the last eight bits. Let's say that we wanted to flip a tick.
00:03:30.698 - 00:04:00.630, Speaker A: If the un value of the tick bitmap at some index is a one, then we flip it to zero. And if it is a zero, we flip it to one. How do we do this? Well, let's start with the tick again. Then we'll split the tick into two parts, the word position and the bit position. The word position will give us the key to the tick bit map. And the bit position will tell us which index in the 256 bits to flip. To flip a bit about 256 bits of zeros and ones, we first create a mask.
00:04:00.630 - 00:04:38.610, Speaker A: The mask will be a sequence of all zeros except the one at the 7th index. And then we would do an XOR with the mask on the current value stored at. -784 let's say that the current value is a zero. When we do an XoR, this would change this value to a one. On the other hand, if this value was a one, and then when we do an XOR using the mask, this will turn the one into a zero. So this is how a tick is flipped. So in this video I explained how to flip a tick, how to get the tick from the bitmap, and how the tick is stored in a tick bitmap.
00:04:38.610 - 00:04:44.770, Speaker A: In the next video, I'll explain how to use this tick bitmap to get the next tick when we're doing a swap.
