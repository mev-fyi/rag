00:00:00.250 - 00:00:47.210, Speaker A: In the previous video, we derived the equation that the reward a user can receive from time t equals A to t equals b is given by this equation. In this video, we'll try to derive this equation from this equation under the condition that l ut is equal to some constant between the time interval a and b. We'll start with the same graph as before. Alice stakes 100 token at equals seven bob stakes 100 token at t equals nine. Alice unstakes at t equals 14, and then bob unstakes everything at t equals 18. Notice that for t greater than seven and less than equal to 14, the amount of token staked by Alice is a constant equal to 100. When we graph lu t for Alice, the graph will look like this.
00:00:47.210 - 00:01:26.338, Speaker A: Likewise for Bob, the amount of tokens staked by Bob for t greater than nine and less than equal to 18 is a constant. When we graph lvut for bob, the graph will look like this when we graph the reward that Alice will receive between t equals eight and 14. This is the equation that we derived. Since l v ut for Alice, between t equals eight to 14 is a constant. We can pull this out over here and the equation is simplified to this. We took out l of ut from here. Since it is a constant for t equals eight and 14.
00:01:26.338 - 00:02:02.274, Speaker A: For the same reason, we can simplify the equation for Bob between t equals ten and t equals 18. Between t equals ten and t equals 18. Lut for Bob is a constant. So we can pull out Lut to the left and the equation simplifies to this in general, when Lvt is equal to some constant for the time interval between a and b. This equation can be simplified to this. Once we have an equation of this form, we can further simplify this part of the equation. Let's expand the summation of one over l v ut.
00:02:02.274 - 00:03:07.222, Speaker A: We start with t equals a and evaluate one over l bay, do the same for the next one, and so on up until t equals b. We can rewrite this equation as starting from zero and then summing up all the way up to t equals b, and then minusing, starting from zero all the way up to t equals a minus one. This part we can write it concisely as a summation from t equals zero all the way up to b, adding one over l of t. Likewise, we can write this concisely by saying minus summation from t equals zero all the way up to a minus one. Add one over l of t. Therefore, we can rewrite the top equation by plugging this formula over here and this equation over here, we can now rewrite this equation, the equation to calculate the amount of reward that a user will receive from t equals a to t equals b, with the equation that we just derived. This equation is only true when luot is equal to constant for the time interval between a and b.
00:03:07.222 - 00:03:39.370, Speaker A: Now, why is the equation on the right a better representation than the equation on the left? How can we write an efficient algorithm based on this equation? Well, now, instead of running a for loop to calculate this number, we can store this sum in a single variable, and we'll be able to store this per user in a single variable as well. The code to calculate the reward of a user will look something like this. Notice that there is no for loops that we'll need to run in the next video. I'll walk you through how to calculate the reward using this algorithm.
