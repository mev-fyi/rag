00:00:00.250 - 00:00:34.054, Speaker A: Let's finish writing the constructor. In a previous coding session, we started out with the clam contract and we call a function called tick spacing to max liquidity per tick. If I open this file, you can see that we have a todo here where the code is empty. So in this video we're gonna be implementing this function. The basic idea of this function is that it's gonna return the max liquidity between two ticks. This will be the maximum liquidity that is possible divided by the number of ticks that are available. Let's open the Uniswap b three implementation and take a look at the code.
00:00:34.054 - 00:01:08.734, Speaker A: So over here inside the uniswap library, there's a file called tick sol and we have the function tick spacing to max liquidity per tick. The first line rounds up the tick to a multiple of tick spacing. And this is accomplished by first dividing minimum tick by tick spacing. And by doing this it will truncate any decimals. If this was a positive number, this will round down the number. However, since min tick is negative number, it will round up and then once the number is rounded up, it multiplies by the tick spacing. Similarly, we do the same thing for Max tick.
00:01:08.734 - 00:01:38.678, Speaker A: Max tick will be rounded down to a multiple of tick spacing. And again we do that by dividing max tick by tick spacing. Division and solidity truncates the decimal parts. And then we multiply by the tick spacing to get a number. Max tick, that is a multiple of tick spacing. Once we have max tick and min tick, we take the difference, divide by the tick spacing to get the number of ticks, and then add one to roundup. Once we have the number of ticks, we divide it by the max liquidity.
00:01:38.678 - 00:02:13.878, Speaker A: Max liquidity. What you see over here type un one to eight. Max is the maximum liquidity. We can check this by going to a uniswap BT pool and under liquidity, this data is represented as un one to eight. So the max of liquidity will be the max of un one to eight, which you see over here, max of liquidity divided by the number of ticks. This is how you will get the maximum liquidity between two ticks where the two ticks are separated by tick spacing. Okay, let's implement this code into our code as well.
00:02:13.878 - 00:02:54.142, Speaker A: First thing that I'll do is create a file called tick math so that I can define mintic and max tick. Now, if I open the tick math library inside unison b three, I can see that the constants that we need are over here. However, if I scroll down there is some complex math that I will not cover in this video. So what I'm going to do is I'm going to copy all of this file over to our code. So copy this code and then go to our code. I'll create a new file called tickmath sol and inside our new file paste the code from uniswap. And lastly, I'll change the splitity version to match our version.
00:02:54.142 - 00:03:34.430, Speaker A: So I'll copy this and then replace this version with our version. Okay, next let's work on tick sol tick spacing to max liquidity per tick. And what we're going to do is copy the code from the uniswap code and we'll copy it line by line. First we'll need to import tick math. So I'll say import from current directory, import tickmath Sol. And then next let's first get the min tick. And the way we get it is by calling int 24 min tick is equal to we're going to be rounding up the minimum tick to a multiple of tick spacing.
00:03:34.430 - 00:04:14.762, Speaker A: And we do that by typing tick math min tick. Divide this by tick spacing, tick spacing and then multiply by tick spacing. This will get us a min tick that is a multiple of tick spacing and we'll do something similar to get max tick. Copy this, paste it, change this to max tick. Change min tick to max tick and the rest is the same. To get the number of ticks between min tick and max tick, what we'll do is say un 24 num ticks is equal to max tick minus min tick. This will give us the number of ticks between min tick and max tick.
00:04:14.762 - 00:04:48.486, Speaker A: And we'll need to divide this by tick spacing, tick spacing. To get a number of ticks where the difference between two ticks will be separated by tick spacing, we'll need to cast this into UN 24. So say Un 24. And then lastly we'll round up in case that this expression over here rounds down plus one. And the last step is to divide max liquidity by the number of ticks. Return type un one two eight. That's the max liquidity divided by num ticks.
00:04:48.486 - 00:05:08.062, Speaker A: Okay, that completes the function for tick spacing to max liquidity per tick. Let's try compiling the contract. I'll open my terminal and then type forge build. Okay, I see an error for the code that we copied. Tickmath sol. I guess this code was fine. First liddy version less than 0.8.
00:05:08.062 - 00:05:44.290, Speaker A: So let's go fix this problem. It's on line 25 of tickmath sol, so going to line 25 max tick is of type int 24, and we cannot directly cast it to UN 256. What we'll have to do is first cast it into int 256 and then cast it into Un 256. There might be similar problems, but let's try compiling again. Forge build, and our contract compiles. Okay, that completes the constructor. In the next video, we'll start working on the function initialize.
