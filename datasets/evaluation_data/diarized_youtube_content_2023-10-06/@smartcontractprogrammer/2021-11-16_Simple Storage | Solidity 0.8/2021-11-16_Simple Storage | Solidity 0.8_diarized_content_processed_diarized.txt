00:00:00.410 - 00:00:36.438, Speaker A: Let's build a simple app using the concept of data location, call data memory and storage. We will build an app that stores a string. I'll name this contract simple storage. Inside this contract we'll store a string, so I'll declare string public and then name it text. This contract will have two functions, a function to set the text and a function to get the text. Writing out these functions, we'll apply our knowledge of data location and use call data and memory. I'll first write the function to set the text.
00:00:36.438 - 00:01:25.670, Speaker A: So I'll name this function set and for the input it's going to take in a string. We call that for dynamic data types. We need to declare the data location. Since this function will be an external function and save gas instead of memory, we'll put call data here and then we'll name this input underscore text. Now why did I put an underscore? Well, if I put a text over here, then there will be a name conflict between the input text and the state variable text. So to avoid name collision, I'll put an underscore to differentiate between text from the input and text of the state variable. We'll declare this function as external, meaning that this function can only be called from outside of this contract, inside the function to update the text.
00:01:25.670 - 00:02:02.434, Speaker A: We'll say text is equal to underscore text. Now it's perfectly fine to replace call data with memory, but then you'll be end up using more gas. To save you the trouble, I run a quick experiment for the input I passed in this long string. And when I declare this input as call data, I use less than 90,000 gas. However, when I declare this input as memory, I used over 90,000 gas. Here there's no reason to declare this as memory. And to save gas we'll declare this as call data.
00:02:02.434 - 00:02:44.802, Speaker A: Next, let's write the function to get the state variable text. Now since this is a public state variable, we don't have to write a getter function to get this state variable. And just to show you this, I'm going to compile the contract and then deploy it. And notice that we can get the value of the text. However, for practice and to show you how to return a dynamic data type as output, I'm going to create a function called get and it's going to return the text. We'll declare this function as external and we'll declare it as view. Why is it bu this function is view? Because inside it we're going to be returning the state variable text.
00:02:44.802 - 00:03:30.926, Speaker A: We'll declare the output as stringmemory, and then inside the function we'll return the string later. When we call this function, get solidity will copy the state variable text into memory and then return it as a string loaded onto memory. Let's deploy this contract so I'll hit ctrl s to compile it, and then deploy it, and then open the contract. The contract starts with an empty string, so if I click on text, it returns nothing. And this is the same case for calling get it. It returns an empty string. We'll set the text to ABC call set, and either call get to get the string, or just call the function text.
00:03:30.926 - 00:03:33.370, Speaker A: In either case, it returns the same string.
