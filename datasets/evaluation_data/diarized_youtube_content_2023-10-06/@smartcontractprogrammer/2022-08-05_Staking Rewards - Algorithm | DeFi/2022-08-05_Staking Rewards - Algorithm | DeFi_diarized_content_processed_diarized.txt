00:00:00.170 - 00:00:49.498, Speaker A: Let's come up with an algorithm that calculates the amount of rewards earned by a user when they stake or unstake. First we'll start by writing some comments, and then later we will add some pseudocode. If we remember from the example from the previous video, the first thing that we did when a user staked the rift true was calculate the reward per token. So here I'll put a comment calculate reward per token once we calculate the current reward per token, then we can calculate the amount of rewards earned by a user. So I'll type calculate reward earned by user. What else do we do? We updated the user reward per token paid. So I'll type update user reward per token paid.
00:00:49.498 - 00:01:38.534, Speaker A: Now if we scroll up, you can see here that every time we calculated a new reward per token, we had to know the last time the reward per token was calculated. So for example here to calculate reward per token at 10 seconds, we had to know that the last time it was calculated was at 9 seconds. So over here we'll need to keep track of the time the last time reward per token was updated. Update last update time and the last thing that we'll do is update the amount of tokens staked by user. So type update staked amount. Okay, let's now write some pseudocode. Let's start off with calculate reward per token.
00:01:38.534 - 00:02:30.278, Speaker A: Let's say that the current reward per token is stored in a variable. We'll name it r, and to calculate the reward per token to this current reward per token, we'll need to add the reward rate r divided by the total amount of token staked in the contract. We'll say that this is stored in a variable named total supply, and then we'll need to multiply this by multiply this by the duration. The duration will be the current time minus the last time reward per token was updated. And we'll say that this is stored in some variable name. Last update time and this step is how we update the reward per token. Next, let's calculate the reward earned by user.
00:02:30.278 - 00:03:13.580, Speaker A: We'll say that the total amount earned by the user will be stored in some mapping. We'll name it rewards and this will be stored per user. So this will be a mapping from user to the amount of rewards earned by the user, and to this mapping we'll need to add the amount of rewards earned. So this will be plus equals. For this part we'll be using this equation. So I'll scroll down. The current amount of tokens staked by the user will say that it is stored in a mapping balance of user and to this we'll need to multiply by the current reward per token minus the user reward per token paid.
00:03:13.580 - 00:04:23.920, Speaker A: Multiply this by the current reward per token that will be r minus. We'll say that the user reward per token paid is stored in a mapping called user reward per token paid and this will be stored per user, so we'll need to access the user and this completes the step where it calculates the amount of rewards earned by the user. Next we'll update the user reward per token paid, so we'll need to update this map being user reward per token paid. So I'll copy this, paste it here and say user reward per token pay for the user is equal to the current reward per token that we calculated in the first step. So this will be equal to art. Next we'll update the last update time. Last update time let's say that it's stored in a variable named last update time and this will be equal to we set it to the current time so type current time and the last step is to update the staked amount.
00:04:23.920 - 00:05:18.026, Speaker A: The amount staked by a user is stored in a mapping balance of user and depending on whether the user stakes or withdrawals, this will be plus or minus equals to the amount that they are either staking or withdrawing. I'll put a comment here plus on staking and minus on withdrawal. Okay, and the last step is to update total supply. Total supply is the total amount of token staked by all users. Total supply by plus or minus again, plus if a user is staking and minus if a user is withdrawing. Plus or minus equals the amount that they are either staking or withdrawing. Okay? And that completes the algorithm for calculating the amount of rewards earned by a user.
00:05:18.026 - 00:05:21.850, Speaker A: And this code will be executed every time a user stakes or withdrawals.
