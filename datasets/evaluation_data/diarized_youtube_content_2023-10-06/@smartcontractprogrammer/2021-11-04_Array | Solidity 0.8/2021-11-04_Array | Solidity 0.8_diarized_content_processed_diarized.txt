00:00:00.410 - 00:00:26.338, Speaker A: It arrays and solidity can be dynamic or fixed size. In this video, I'll show you how to initialize arrays and some operations that you can perform on these arrays. Insert, get, update, delete, pop, and get the length of the array. I'll also show you how to create array in memory. And lastly, I'll show you how to return array from a function. Let's begin. First, I'll show you how to initialize a dynamic array as a state variable.
00:00:26.338 - 00:00:58.958, Speaker A: Dynamic means that the size of the array can change. For this example, we'll create a dynamic array of uint, so we'll declare it by typing un brackets. I'll make this array public, so I'll declare public and then followed by the name of the array. I'll name this nums. Now, if you want to create a fixed sized array, then the syntax is almost similar to the one above. Fixed sized array means that the size of the array cannot change. Once we set the size of the array, we cannot shrink it or grow it.
00:00:58.958 - 00:01:31.802, Speaker A: For this example, I'll create a fixed sized array of type un. So again we'll start with un and then brackets. And unlike a dynamic array, inside the brackets, we specify the size of the array. So if I wanted to create a fixed size array of size three, then inside here I'll put three. I'll make this variable public again, and I'll name this array nums fixed. Next, I'll show you how to initialize an array. Let's say that when we deploy this contract, we want this nums to be equal to one, two, three.
00:01:31.802 - 00:02:07.230, Speaker A: We can do that by saying nums equal to brackets. And inside here we'll put one, two, three. This will initialize a dynamic array with the array elements starting at one, two, and three. Similarly, we can also initialize a fixed sized array. So we'll type equals brackets and we'll initialize this to four, five and six here. Notice that the size of the fixed sized array is three and we have three elements over here. If the size that you declare and the number of elements do not match, then this will not compile.
00:02:07.230 - 00:02:47.122, Speaker A: And to show you this, I'll put in an extra element and then hit Ctrl s to compile. And you can see that there is an error over here. Next, I'll show you some operations that you could perform on array. So these are insert array, element, get it, update it, delete it, pop, meaning remove the last element from the array and get the length of the array. First we'll insert into the nums state variable to do that, we type nums push, and inside the parentheses we put in the element that we want to push. I'll push four. And after this operation is done, executing the nums array would now look like one, two, three, and four.
00:02:47.122 - 00:03:15.818, Speaker A: Four being the element that we just pushed. So push pushes the element to the end of the array. Now you won't be able to push a new element onto a fixed sized array because then that would change the size of the array. To get an array element, you can just access it by the index. For example, you'll get the first element by saying nums, brackets, and one. This will get the first element from the nums array, which will be equal to two. The type of the element is un.
00:03:15.818 - 00:03:43.598, Speaker A: So I've declared a variable un and named it X. To update an array, you just reassign an element at the index that you want to update. For example, let's say that we want to update the element at index two. Then we would type nums at index two is equal to seven. Seven, seven. So now the nums array will look like this. 12777 being the element that we just updated.
00:03:43.598 - 00:04:14.810, Speaker A: And lastly four. Now, if you want to delete the element from an array, then you use the keyword delete followed by the place in the array that you want to delete. Let's say that we want to delete the element at index one. Then we will type nums at one. This will clear the element, store that nums at index one, and it will set it to the default value. The default value of un is zero. So now the array will look something like this, 10 being the element that we just deleted.
00:04:14.810 - 00:04:55.242, Speaker A: So it defaults back to the default value of unit, which is zero, and the rest is unchanged. And notice that by calling delete, the length of the array still remains the same. This is something that you'll need to keep in mind when you're coding in solidity. If you want to shrink the size of the array, then there is one method that is available and it is called pop. Pop will remove the last element from the array. So if I type nums pop, then it will remove the last element being four. So the array will now look like this, 1077, and the last element is removed and the length of the array is now three.
00:04:55.242 - 00:05:40.422, Speaker A: To get the current length of the array, you can call nums length. Sometimes you will need to create an array in memory. So I'll show you example of how to create array in memory. For this example, we'll create an array of un again and we declare the type by first typing uint brackets. And to say that this is an array that we want to create in memory, we type memory name of the array, I'll just say a and then initialize the array by typing equals new un brackets parentheses and inside the parentheses we specify the size of the array. I'll say that the size of the array is five and then semicolon. This is how you can create an array in memory.
00:05:40.422 - 00:06:40.846, Speaker A: Notice that the array in memory has to be of fixed sized, so you won't be able to call functions like push in pop. And to show you this I'll call a pop and a push, compile it with control s and you'll see an error over here saying that pop is not available for array created in memory. So the only thing that you'll be able to do with array in memory is just update or get the value. For example, we can update the element at index one by saying a bracket one is equal to one two three. For the last example, I'll show you how to write a function that returns array. Here I've created a function called return array and what this does is returns the state variable nums, which is an array of uint. Notice that the return type is an array of uint and we say that it is memory and this tells solidity that we want to copy the state variable nums into memory and then return it.
00:06:40.846 - 00:07:00.570, Speaker A: Now, returning an array from a function is not recommended. The reason is similar to why you will want to keep your for loop small. The bigger the array, the more gas it will use. If the array is too big, it can use up all of the gas and this function will be unusable. So in summary, you can write a function that returns an array, but it is not recommended.
