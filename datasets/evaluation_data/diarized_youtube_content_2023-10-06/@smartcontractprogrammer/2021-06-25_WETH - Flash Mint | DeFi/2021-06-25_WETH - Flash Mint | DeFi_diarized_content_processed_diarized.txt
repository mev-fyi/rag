00:00:00.490 - 00:00:34.214, Speaker A: Flash loans allow you to borrow tokens that are worth millions of dollars as long as you pay it back in the same transaction. How crazy is that? But Defi gets crazier with Flash mint. Flash Mint allows you to create tokens that are worth millions and billions of dollars, and at the end of the transaction, those tokens will be destroyed. In this video, we'll take a look at Flash Mint. What is it? How is it you used? And I'll show you a code example in WEF. Let's get started. First of all, I'm going to explain how a flash mintable token works.
00:00:34.214 - 00:01:07.534, Speaker A: For this example, we'll use a flash mint enabled wef, and I named it Fwif. So there are two ways to mint this fwif. The first way is you send ETH and you get the same exact amount of Fwiff. You can hold on to this fwif and when you want to withdraw your ETH, you would return the fwiff. That fwiff gets destroyed and you get back your ETH back. So that's the first way of minting and burning fwiff. The second way of minting Fwiff is by Flash mint.
00:01:07.534 - 00:01:35.334, Speaker A: Unlike the first way of minting fwiff here, the fwiff will be destroyed after the transaction. So you would mint fwiff out of thin air without any deposit or beef. Once you get the fwiff, you can do other stuff with it. And at the end of this transaction, this fwiff will be burnt. So that is how flash mint works. Let's now take a look at how it can be used. I'll show you how to do an arbitrage using flash loan.
00:01:35.334 - 00:02:16.646, Speaker A: And then I'll show you how to do an arbitrage using flash mint. Let's say that on exchange A, one E is trading for 1200 die, and on exchange B, one E is trading for 1000 die. Now, to make some profit, I will want to buy cheap and sell high. So how would I do this? On exchange A, one E will get me 1200 die for the same amount of E. On exchange B, I will get 1000 die. So this means that die is cheaper on exchange a compared to exchange B. For the same amount of ETH, I get more dai on exchange a than exchange B.
00:02:16.646 - 00:03:01.330, Speaker A: So the strategy here is to buy dai from exchange A and then sell it on exchange B and I will get some profit. Let's see how it's done using a flash loan. So the first thing that I'm going to do is get a flash loan and borrow ten e, I take this ten e over to exchange a and then buy die. I take this die over to exchange b and buy back ETH. I borrowed ten E and I got back twelve E, repay the ten e that I borrowed, and my profit is two e. So that is basically how arbitrage works using flash loan. Let's now replace this flash loan with flash mint and see how an arbitrage works using flash mint.
00:03:01.330 - 00:03:33.954, Speaker A: Here is the setup. Instead of a flash loan contract, here we have a flash mintable token. Notice that there is zero f with and zero e inside this contract. On exchange A, there is zero e. However, this exchange also accepts f with one ff will be trading for one e. Okay, so let's see how we would do an arbitrage using flash mint. First, I will flash mint fwiff, send it over to exchange a and then get back die in return.
00:03:33.954 - 00:04:26.642, Speaker A: Although this exchange had zero e, because this exchange accepts f with, we were able to exchange die for f with. So now we take this die and take it over to exchange b, buy the e for die. Now, at the end of this transaction, the ten f with that we minted will be destroyed. However, we don't own any fwiff to destroy because we gave it over to exchange a. Exchange a owns this ten f with, but we don't owe any fwiff. So in order for this transaction to be successful, we will need to mint another ten f with so that by the time the transaction completes, that ten f with will be burned and the transaction will complete. So we send the ten e back to the fwf and this will mint another ten f with.
00:04:26.642 - 00:05:03.950, Speaker A: So now the f with contract has ten e. Exchange a has ten f with. We have two e in profit and another ten f with. At the end of the transaction, the ten f with that we minted in the beginning of the transaction will be burnt and we are left with two e profit. And exchange a has ten f with, which is backed by ten e inside the fwiff contract. That is how flash mint is used in the arbitrage. We were able to mint tokens out of thin air in order to do an arbitrage.
00:05:03.950 - 00:06:01.630, Speaker A: In other words, we were able to do an arbitrage even though both the fwiff contract and exchange a had zero liquidity for E. Let's now take a look at how to do flash mint using web ten. So first we're going to import some files interface to web ten and irc 20. We're going to need two functions. The function that we're going to call and the function that the web ten contract is going to call to actually call the flash loan on web ten contract, we'll need to call this function called flash loan passing in these parameters which we will fill out later. When we call this function, ref ten will call back into this on flash zone function, and at the end of this function call, we'll have to return bytes 33 called callback success. This callback success is just a kitkat hash of this string.
00:06:01.630 - 00:06:29.590, Speaker A: We don't have to worry about the details. I guess this is just how the flash zone works on web ten. Let's now fill out the details. First we'll assign the address of the web contract on main net. I've also defined the event named log and we'll use this to log some variables. And I've also created some state variables that we'll set when this function on Flashnone is called. Okay, so let's now fill out the details for the function flash.
00:06:29.590 - 00:07:19.334, Speaker A: Unlike a flashno where you are only allowed to borrow the amount of tokens that exist flash mint, you can create new tokens out of tenair and then use it in your transaction. And to show you this, we'll mint more tokens than the current supply of the token. So we'll get the current total supply by calling the function total supply, and the amount that we'll mint is the total supply plus one. We'll log the total supply. This will be helpful when we run the simulation on the main network. Then we'll approve the WEF contract to burn this amount of token that we're going to mint. For this example, the data that we're going to send is empty bytes, but as usual you can use ABI encode and decode to pass the data.
00:07:19.334 - 00:07:56.150, Speaker A: If you have any custom data that you want to pass, that completes the function flash. Let's now work on on flash loan. We're going to be writing some custom code inside here. So if you're performing an arbitrage, then you will write your code here. For this example, we'll keep it simple. We'll store some inputs into the state variable, get the current balance of the token, and then log the amount that we borrowed, the fee that we'll have to pay, and the current balance of the token, and that completes the function. On flash loan, the demo will be simple.
00:07:56.150 - 00:08:47.678, Speaker A: We call the function flash, and after the transaction we log some state variables and the contract address, and then we print out the logs that were emitted. So I'm going to start ganache on main network, and then we'll run the test in another terminal. The name of the file that we're testing is test ref flash mint. The test passed, and these are the state variables that were set. What's more interesting is here, the total supply before the flash mint was this much amount. The amount that we requested is this much amount, and this amount is one more than the total supply. So that's why you see a three here and a two over here.
00:08:47.678 - 00:09:07.900, Speaker A: We had to pay zero fee. And during the flash mint, our balance of token was this much amount, which is equal to this amount you see over here. So that's flash mint. It took me a while to figure out how it was useful. I hope you found this video useful. Thanks for watching. See you later.
