00:00:00.570 - 00:00:59.630, Speaker A: In the last video we took a look at how to supply token to a compound and then redeem it later. In this video I'm going to show you how to borrow a token and then repay what you borrowed. Here are the topics that we will cover in this video. Collateral account liquidity price feed, entering a market and then actually borrowing the token, how to get the borrowed balance, how to get the borrow rate and how to repay borrow the first thing that we'll do is initialize some compound contracts that are deployed at these addresses. Controller and price feed the interface for these contracts are defined inside the compound interface and we'll go over what each of these functions do. Now if I scroll up, you can see here that I defined some extra functions from the previous video and we're going to be using these functions to actually borrow the token from compound. Okay, the first topic is collateral.
00:00:59.630 - 00:01:50.890, Speaker A: After you supply the token to compound, you are able to borrow a percentage of what you supplied and this is called the collateral factor. For example, let's say that one WBtC is worth $30,000 and I supply one WBTC into compound. We also say that the collateral factor is 65%. Then this means that we are able to borrow 65% of $30,000. Now if I do the math, this turns out to be $19,500. To actually get the collateral factor using smart contract, we'll need to call the market function on the controller passing in the address of the C token that we supplied and this will return three outputs. Is listed cofactor and is comped.
00:01:50.890 - 00:02:27.900, Speaker A: Is listed means is the C token recognized by the controller. So if you pass in an invalid address for here inside the C token, then this would turn out to be false. The second output cofactor, this is the one that we're interested in and this is the collateral factor that we mentioned earlier. Now this cofactor is scaled up by ten to the 18. So in order to get it into a percentage, you'll have to divide by ten to the 18. The last output is comp. This means is the C token going to receive the compound reward token called comp.
00:02:27.900 - 00:02:57.678, Speaker A: Moving on to account liquidity. This means how much can I borrow to get the current liquidity of an account? You have to call on the comptroller contract. Get account liquidity passing in the address of the account that you want to find liquidity for. And this will return three outputs. If there was no error, then error will be equal to zero. Otherwise if there was an error then this will be a number greater than zero. Liquidity.
00:02:57.678 - 00:03:45.586, Speaker A: This is the US dollar amount that we can borrow up to this number is scaled up by ten to the 18. Shortfall greater than zero means that you borrowed over the limit and you're subject to liquidation. In summary, under normal circumstances, liquidity will be greater than zero, and this means that you'll be able to borrow some token and shortfall will be equal to zero. And when shortfall is greater than zero, then this means that the token that you supply for collateral is subject to liquidation. So that is how you get account liquidity from compound for completeness. I've added a check to make sure that the error is equal to zero, and if it is, then we'll return liquidity and shortfall. Okay, moving on.
00:03:45.586 - 00:04:38.162, Speaker A: Let's talk about open price feed. We can get the price of the token that we want to borrow in terms of USD dollars by calling get underlying price on the contract price feed and passing in the address of the C token that we want to borrow. Now, why might you be interested in the USD price of the token that you want to borrow? Well, this is because we know liquidity is in terms of USD dollars, and this gives the USD dollar amount that we can borrow. When we divide this liquidity by the price of token that we want to borrow, it gives us the amount of tokens that we can borrow. I'll show you the actual code when we write the code for borrow. Okay, so moving on, let's talk about entering market and borrowing a token. To borrow a token, the first thing that we'll need to do is enter the market for the token that we supplied.
00:04:38.162 - 00:05:20.130, Speaker A: For this example, we'll enter our market, check liquidity, and then calculate the max borrow, and then borrow up to 50% of the max borrow. To enter our market, we'll need to call enter markets on the controller passing in the C tokens that we supplied. For this example, there's only one C token that we're going to supply. So we'll initialize an array name is C tokens, and array length will be one. And we'll set the first element to the c token that we supply for this example. Now, when we call the enter markets, it returns an array of errors. Since we only have one C token, the only error check that we'll have to do is on the first element.
00:05:20.130 - 00:06:01.130, Speaker A: So we'll check that errors of zero is equal to zero. The next thing that we'll do is check liquidity. Now this get account liquidity is the same function that we discussed above over here, and the checks that we'll do is make sure that the error is equal to zero, shortfall is equal to zero, and liquidity is greater than zero. Again, liquidity greater than zero means that we are able to borrow up to this amount. The next thing that we'll do is calculate the max borrow. And to do that, the first thing that we'll do is get the price of the C token that we're going to borrow. And this price will be in terms of Us dollar scaled up by ten to the 18.
00:06:01.130 - 00:06:50.526, Speaker A: To actually calculate the maximum amount of token that we can borrow, what we'll have to do is divide liquidity by the price and this will give us the amount of tokens that we can borrow. Now, every token has decimals. Let's say that a token has eight decimal places and I have three tokens, then it's actually not three tokens that I have, it's actually three times ten to the eight tokens. So for the same reason, this is why you see that this number is scaled up by ten to the decimals. Once we calculate the max borrow of the token, we'll do a quick check, make sure that the max borrow is greater than zero. For this example, we're going to be borrowing 50% of the max borrow. So we'll multiply by 50 and then divide it by 100.
00:06:50.526 - 00:07:40.640, Speaker A: And finally, to actually borrow the token, the function that we'll need to call is borrow on the c erc 20 for the c token to borrow for the amount. So this will be the amount you see over here. And when we call this function, it will return a number. And when the number returned is equal to zero, then this means that there was no error. So that is why we're checking here, that the number that was returned is equal to zero. When this function successfully executes, this means that we were able to borrow the underlying token for the c token to borrow. Once we borrow, we can get the balance of the borrowed token, including interest rate on the borrow, by calling borrowed balance current on the c token that we borrowed and then passing in the address of the account.
00:07:40.640 - 00:08:22.220, Speaker A: For this example, this contract is going to be the one that's going to borrow. So here we're going to pass the address of this contract. Note that this function is not a view function. So like in the previous video, we'll do a static call to get the number. Now if you're interested in the borrow rate that accrues per block, then you can call the borrow rate per block on the C ErC 20 for the C token that we borrowed. Once we're ready to repay what we borrowed then we'll call this function repay. It's going to take in the address of the token that we borrow, the address of the C token that we borrowed and the amount that we're going to be paying.
00:08:22.220 - 00:09:17.010, Speaker A: The first thing that we'll do is approve the C token that we borrow to be able to spend the token that we borrow for the amount that we're going to be repaying. To actually repay compound, the function that we'll need to call is repay borrow on the CRC 20 token at the address C token borrowed and passing in the amount that we wish to repay. And as usual we'll check that the return number is equal to zero and that completes how to borrow and repay on the compound contract. I'm going to start ganache. Once Ganache is started I'm going to open another terminal and the file that we're going to be testing is called test compound ERC 20 borrow. The test completed. Let's now take a look at the bugs.
00:09:17.010 - 00:10:13.694, Speaker A: The collateral factor is 65% and the amount of WBTC that we supplied according to compound is zero point 99. Liquidity. The amount of tokens that we can borrow in terms of USD dollars is zero and this is because we have not entered a market yet. The price of token that we're going to borrow, which is Dai, is equal to $1 as expected max borrow. The amount of token of die that we can borrow is zero and the amount of die that we borrowed is zero. After we borrow, the borrow balance is 10,541 and if we really wanted to we can further borrow another 10,544 die. And at this moment the liquidity in terms of US dollars is 10,552 after some blocks.
00:10:13.694 - 00:11:02.798, Speaker A: So this is after 100 blocks after we borrow. Notice that the borrow balance has increased. If you look at the last two numbers here it is three four, but before it was three two. This shows us that the interest rate on borrow is accruing and we'll have to pay this amount if we want to repay and claim our collateral. After we repay, the borrow balance is zero and the liquidity, the amount of tokens that we can borrow increased. All right, so we cover the four basic functions on compound supply to lend your token and also use as borrow. Once you supply a token you can call borrow to borrow other tokens and then you can call repay to repay the token that you borrowed.
00:11:02.798 - 00:11:08.000, Speaker A: And then lastly you can call redeem to withdraw the token that you supplied. Thanks for watching.
