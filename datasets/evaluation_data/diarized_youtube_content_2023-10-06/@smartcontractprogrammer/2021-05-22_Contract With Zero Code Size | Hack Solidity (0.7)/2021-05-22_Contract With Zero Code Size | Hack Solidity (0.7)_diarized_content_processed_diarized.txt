00:00:00.490 - 00:00:53.790, Speaker A: Let's say I have a contract and I want this contract to be super secure. One of the things I have done to increase security for this contract is to not allow any other contracts to interact with this contract. Here I have a function called protected and it requires that message sender is not a contract. In this video I'm going to show you how to hack this contract. How to bypass this is contract function, so that even though this function does not allow any other contracts to call this function, we still bypass this check and pone the contract. First of all, let's take a look at this is contract function. How does it check whether message sender is an externally owned account or whether it is an actual contract? Here is the function is contract.
00:00:53.790 - 00:01:39.834, Speaker A: It takes an address of the account and if the account is in contract then it returns true. Otherwise it returns false. The way it checks whether the account is a contract or not is by checking the code size stored at the address of this account and the size of the code stored at this address can be found by using assembly and then calling a function exit code size. This will return the size of the code and we'll check that the size of the code is greater than zero. If the size of the code is greater than zero, then we know that there's some kind of code stored at this address. Otherwise there's no code. So we safely assume that this address is an externally owned account.
00:01:39.834 - 00:02:31.100, Speaker A: That is how this check works. So if you go back to this function, it will check that the code store that message sender is equal to zero, which means that message sender is not a contract. And if it's not a contract, then we'll set the pone to true. To show you that this protection works for existing contract, I've created another contract that will call this function. When we call the function poem. When we call this function, we expect this transaction to fail because this protection will kick in. So when I call this poem function that you see over here and then we check the transaction log, you can see here that this wasn't a failed attack.
00:02:31.100 - 00:03:15.420, Speaker A: So now I'm going to show you how to bypass this check and we'll be able to hack this function and this contract. The way to bypass this check is if the code size at the address is equal to zero. For existing contracts, this will return a size that is greater than zero. But there is one exception. When the contract is being deployed in the exact same transaction, when this function is called, the size will be equal to zero and we'll be able to bypass this check. For example, if we call this function inside another constructor of another contract, the size will be equal to zero. Here I've created a contract to do exactly that.
00:03:15.420 - 00:03:53.750, Speaker A: When this contract is deployed, the constructor will be called and we'll call the protected function. And to show you that the function is contract returns false, we'll store the result in a state variable called is contract. All right, let's deploy this hack contract. We're going to need the address of the target contract. So I'm going to copy it from here and then paste it here and then deploy the hack contract. Let's check the transaction logs. The transaction was successful, meaning that we were able to deploy the hack contract.
00:03:53.750 - 00:04:36.840, Speaker A: Finally, let's check that we were able to pone the target contract. So I'm going to open the target contract and then click down pone, and it is equal to true. We also check on this state variable and check that is contract is equal to false. So I'm going to open the hack contract and click on is contract and it's equal to false. So in summary, we were able to call a function that does not allow smart contracts to call it. And the way we were able to do that was by calling this function inside the constructor. The smart contract library opens up in contract this exact same function.
00:04:36.840 - 00:04:59.060, Speaker A: Here it is. It is mentioned here that the code size is zero during construction. So the takeaway for this video is that this function can be bypassed under these conditions. And just because you use this function does not protect your contract from other contracts. Thanks for watching.
