00:00:00.410 - 00:00:31.638, Speaker A: Libraries allow you to separate and reuse code. It also allows you to enhance data types. Let's look at some examples. For the first example, I'm going to create a library that's going to compare un, x and uny and return the maximum, the greater of x and y. We'll write a library and then use it inside this function. Test max so to create your library, we start with the keyword library. I'll name this binary math, and just like a contract, we can write our functions inside here.
00:00:31.638 - 00:01:00.490, Speaker A: Now, there are several restrictions when you're writing a library. For example, you cannot declare state variables inside here, we'll write a function called max. It's going to compare two un and return the greater of the two. I'll name this function max. It's going to take in two unsu and un y. This function will be internal. Now, since we're using a library function inside another contract, it doesn't make sense to make it external.
00:01:00.490 - 00:01:35.514, Speaker A: And it also doesn't make sense to make it private, since that means this function is only accessible inside this library. But we want to use this function inside another contract. Now, if you declare this function as public, then you'll have to deploy the library separately from the contract test. However, when we declare it as internal, this function will be embedded inside this contract. So when we deploy the test contract, we don't have to deploy the library. This function will be peer and it's going to return the greater of the two inputs. So the return type will be un.
00:01:35.514 - 00:02:07.954, Speaker A: Inside the function body we'll say return if x is greater than or equal to y, then return next. Otherwise return y. Notice here that I'm using the ternary operator, which is a short way to write if and else statement if x is greater than or equal to y, return next. Otherwise y is the greater number. So return y. So this is a simple example of how to declare a function inside the library. Let's now use this math max library inside the test contract.
00:02:07.954 - 00:02:44.938, Speaker A: So inside here I'll say math max of x and y. This is a very simple example of how to declare and use a library. Because this code is not inside any contract, we can also use this library in another contract. This is how libraries separate code logic so that we can reuse it in other contracts. For the next example, I'm going to show you how to use library functions with state variables. This will also be an example of how to enhance a data type. The data type that we're going to be enhancing is an array of un for this example, we'll be using this array state variable.
00:02:44.938 - 00:03:32.302, Speaker A: It's already initialized with elements three, two, and one. For this example, I want to create a library function where given a state variable array of uns, I want to find the index where a certain element is equal to a number that I'm looking for. For example, if I was looking for the number two in this array state variable, then this will return one. If I was looking for the number three inside this state variable, then the index will return zero. And let's say if I was looking for a number four inside this array, since it doesn't exist, the function should revert. We'll start with the keyword by vary again, and this time I'll name it array viv. And again inside here we'll write our function, the function that's going to find the index where the element is equal to the number that we're looking for.
00:03:32.302 - 00:04:37.090, Speaker A: I'll name this function find and for the first input it's going to take in the array of un so un brackets. Since we're going to be calling the function find on this state variable array, this input will be storage. Next input will be the number that we're looking for inside the r array. So I'll say uint x. Again, this function will be internal and since we're reading from state variables, this function has to be view, it cannot be peer, and it will return the index inside the array if it finds the un x, so it will return un. We'll run a for loop to find x inside r. So we'll say four un I equals zero I less than r dot length I plus plus if r of I is equal to the element that we're looking for, then return the index so we'll return I after running the for loop.
00:04:37.090 - 00:05:34.770, Speaker A: If we could not find the element x inside the array, then we'll just reburb by typing rebirth not found okay, let's now use this find function inside the contract test array like the previous example before. We can call the find function by typing array lib find. The first input to find is an array of un and it has to be a state variable so we'll pass in r. And for this example we'll try to find the number two from the state variable r and then return the index that find returns. This code right here will try to find the number two from the state variable array. Now we can write this code in a more shorter and cleaner way by using a different syntax. The first thing that we'll have to type at the top of the contract is type using array lib for un brackets.
00:05:34.770 - 00:06:08.814, Speaker A: This line of code tells solidity that for this data type, in this case an array of un attach all of the functionalities defined inside the library array lib. In this case, the only functionality that defined is a function called find. So now what we can do is replace this line of code. Instead. We can type return r find two. These two line of code accomplish the same thing. But notice that it is much easier to read this code than this code over here.
00:06:08.814 - 00:06:17.460, Speaker A: So by declaring the library that we're using for a data type, we can enhance the data type and call the function on the data type.
