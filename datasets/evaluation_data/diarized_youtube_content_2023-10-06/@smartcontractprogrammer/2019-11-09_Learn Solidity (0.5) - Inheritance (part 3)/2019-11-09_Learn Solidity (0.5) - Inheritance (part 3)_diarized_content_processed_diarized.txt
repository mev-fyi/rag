00:00:00.330 - 00:00:36.946, Speaker A: You. In this video we'll go over how to initialize parent constructors when a contract inherits from multiple parent contracts. First, we'll go over how to call parent constructors. In solidity. Constructors are always executed in a certain order, so we'll go through some examples and find out what that order is. And lastly, you cannot override a state variable declared in a parent contract by simply redeclaring it in a child contract. So I'll show you an example of how to correctly override a state variable that was declared in a parent contract.
00:00:36.946 - 00:01:23.890, Speaker A: First, let's step back and review how to call a single parent constructor. Here we have a contract name Dex, and we'll use this as a base contract for other contracts to inherit from. From a child contract, we'll pass in a string to the constructor of contract Dex and save that string in the state variable name. Here we have contract b that inherits from contract x. And one way to pass parameters to a parent constructor is like this, and another way is to calling the parent contract like a function next to the constructor of the child contract. And you can also pass a variable input to a parent constructor like this. This example is similar to the example above.
00:01:23.890 - 00:02:05.910, Speaker A: Here we're passing in a fixed input to the parent contract, whereas here we're passing in a variable input. Next, let's go over how to call parent constructors. When a contract has many parent contracts. We'll create a parent contract named y and declare a state variable to store a string. We don't want this state variable to override the state variable inside contract text, so we'll name it differently and call it text. And if you want to call the constructors of several parents, this is one way to do it. Another way is to call the parent constructor inside the constructor of the child contract.
00:02:05.910 - 00:03:20.460, Speaker A: Here we don't put commas in between parent contracts, and this is how you pass variables to parent contracts. The syntax is similar to the example above, except here we're passing in fixed input, whereas here we're passing in variables to parent constructors, and you can pass different parameters to the parent constructors like this. Here the constructor of contract D takes in two inputs, name and text, and it passes the name variable to parent contract x and passes the text variable to parent contract Y. Let's deploy this contract and verify that the state variable for contract x and contract y are set to the variables that we pass in to the constructor of contract d. Compile and deploy contract d. I'm going to pass in the string foo for the first parameter and bar for the second parameter. Once the contract is deployed, you can verify that calling the state variable name returns the string foo, and calling the state variable text returns the string bar.
00:03:20.460 - 00:04:27.140, Speaker A: So I just showed you three ways to call constructors of parent contracts. Next, let's walk through some examples that will show in what order parent constructors are called. We want to be able to see the order in which the parent constructors are called. So first, let's create an event inside contract x and fire that event when the constructor is called. And we'll do something similar for contract y as well. Next, we'll create two contracts that both inherit from the parent contract x and Y. Looking at the constructor for contract d, it looks like the parent contract x is called before the parent contract y, and for the constructor of contract f, it looks like the parent contract Y is called before the pan contract x is called.
00:04:27.140 - 00:05:30.980, Speaker A: When you deploy contract e inside the transaction log, you'll see that the constructor X was called, and then the constructor Y was called. And when you deploy contract def, you will see that the constructor x was called, and then the constructor Y was called, even though here we have it listed in the order from y to x. So in summary, the order in which the parent constructors are called is determined by the inheritance and not by the order in which the parent constructors are called. Next, let's see an example of how to override a state variable in a parent contract in a wrong way, and after that I'll show you the right way to do it. First, we'll create a base contract and store an address inside a state variable. Next, we'll create a function that references this state variable. For simplicity, we'll just return the value of the state variable.
00:05:30.980 - 00:06:29.370, Speaker A: Next, we'll create a child contract that inherits from contract a. The wrong way to override a state variable of a parent contract is to redeclare it in the child contract. So in this case, we try to override the address state variable declared in the parent contract by redeclaring it in the child contract and assigning a different value after you deploy contract b. You can notice here that the value of the state variable is the value that was assigned here inside contract b. But calling the function get address return the state variable that was initialized here inside contract a. So this example shows that you cannot override a state variable declared in a parent contract by redeclaring it inside a child contract. Next, let's see the correct way of overriding state variables.
00:06:29.370 - 00:07:31.180, Speaker A: We'll create another contract that also inherits from contract a inside the constructor, we just override the state variable that was inherited from the parent contract. In this case, we'll just reassign the address variable to a different value. Deploy contract c and call the two functions. You can see here that the state variable was set to the value inside the constructor of contract c and calling the function get address. Also return the value that was set inside contract c. To reiterate, if you want to override a state variable of a parent contract, you just reassign it and redeclaring state variable inside the child contract is a big mistake. Personally, I've sent ether to the wrong address with this mistake and notice that solidity does not give off any warnings for state variables that are redeclared in child contracts.
00:07:31.180 - 00:08:08.530, Speaker A: In this video we went over how to call constructors of parent contracts. Parent constructors will always be called in the order in which they are inherited and not in the order they are called inside the constructor of a child contract. And to override the value of a state variable in a parent contract, don't redeclare it in the child contract. Instead, just reassign it. That's the end of this video. Any questions or feedback, please put them in the comments below. Thank you so much for watching and have a nice week.
