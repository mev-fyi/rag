00:00:00.570 - 00:00:46.826, Speaker A: Compound finance allows you to lend and borrow tokens. So for example, if I scroll down, you can see here that we can lend dai ether, chainlink, true USD, and on the borrowing side, we can borrow dai ether, chainlink, true USD, uniswap, and many more tokens. There are four operations related to lending and borrowing on compound. These operations are supply, borrow, repay and redeem. In this video I'm going to show you how to lend your token to compound and earn interest. The two related operations related for lending is supply and redeem. So let's take a look at how to supply your token to compound and then earn interest.
00:00:46.826 - 00:01:34.570, Speaker A: And once you want to withdraw your tokens from compound, then you'll be calling redeem. The first thing that we'll do is import some files, interface to ERC 20, and interface to the compound contracts. Inside the compound interface you can see that there are two interfaces, C ERC 20 and c e. They're basically the same thing, except that one is for ERC 20 and the other one is for ether. So if you understand how to call these functions on one of these interfaces, then you'll have no problem understanding how to do it with the other interface. In this video we'll focus on the one for ERC 20. But if you're curious, I've also created a contract for e, so you can take a look at it later.
00:01:34.570 - 00:02:06.174, Speaker A: All right, let's get started. The first function that we'll work on is supply. When we call this function, it will vend our token to the compound protocol. We're going to store the token that we're going to be lending as a state variable and also C token. C token is a token that you get back when you lend your token to the compound protocol. And the interface to this C token, called Cerc 20, is defined inside the compound interface. We'll set the token and the c token.
00:02:06.174 - 00:02:58.210, Speaker A: When this contract is created to lend our token to compound, the first thing that we'll need to do is transfer the token from the caller into inside this contract, and we do that by calling transfer from on the token. Next, we'll approve the C token to spend the token that we just transferred from from message sender and to actually bend the token to compound. The function that we'll need to call is called mint on the c token contract. This will transfer our token from this contract into the c token contract, and in return it mints c tokens back to us. When the mint function is called, it returns a number. If the number is equal to zero, then it means that the call was successful. On the other hand, if the number is not equal to zero, then that means there's an error.
00:02:58.210 - 00:04:00.120, Speaker A: So here we'll check that the number that was returned is equal to zero. Otherwise we'll make this function fail by requiring that the return number is equal to zero. Once we are able to successfully call this function, this means that our token is lent out to the compound protocol. In return we get some c tokens representing how much token we can withdraw from the compound protocol, including any interest rate that accrued from supplying the token. So how much c token do we have? Well, we can get the amount of C token that we have by calling Ctoken balance of and since the holder of the C token will be this contract, we'll put in address of this contract. If you wanted to know the C token balance for another account, then inside here you'll put in another address. If you want to know the exchange rate from ctoken to the token that we supplied, then we can call the function exchange rate current to get the exchange rate.
00:04:00.120 - 00:04:50.474, Speaker A: If you want to know the interest rate on supplying the tokens, then you can get it by calling supply rate per block. One thing to note here is that these two functions are not view functions. So that is why you don't see a BU inside here, the declaration. So this means that if you want to get the exchange rate or the supply rate, then you'll need to send a transaction paying transaction fee to get these information. However, we can actually get these numbers without sending a transaction by making a static call to this function. I'll show you how to do this later. Once we know the exchange rate and amount of C tokens that we have, then we can estimate the balance of the token that we supply, including interest rate.
00:04:50.474 - 00:05:49.946, Speaker A: And we do that by getting the amount of C tokens that we have and then getting the exchange rate. And then we multiply the amount of C token by exchange rate and divide by this ten to the power of 18 minus decimals minus the C token decimals. For the example that I'm going to show you, we're going to use WBTC and WBTC has eight decimals, so that is why decimals is set to eight over here. Now, we actually didn't have to write this function because compound provides the same function called balance abundantly, which calculates and returns the amount of token that we supplied into compound. Later in the demo you'll see that these two numbers are really close to each other. Let's say that we supplied a token and waited a few days and it accrued some interest. And we're now ready to claim the token and the interest.
00:05:49.946 - 00:06:46.618, Speaker A: So we'll do that by calling the function redeem, passing in the amount of c tokens to redeem our token. To withdraw the token that we supply to compound the function that we need to call is redeem on the c token contract and this takes in a single input the amount of c token that we want to burn. Like the main function above, it returns a number and zero means that the function call was successful. So here we'll check that the function call returned zero and if it didn't then we'll make this function fail. So once the call to the function redeem is successful, we will have some token inside this contract and that completes the function for supply and redeem. Let's now take a look at what the test file does. The token that we're going to be supplying for this demo is wbtc.
00:06:46.618 - 00:07:38.382, Speaker A: The first thing that we do is deploy the contract that we just wrote passing in the address of the Wbtc and cwbtc and then we'll quickly do a check to make sure that we have enough Wbtc to run this demo. All right, scrolling down. So here I've created a function called snapshot. When this function is called, it's going to get the exchange rate, the supply rate, the estimate balance and the balance of the underlying and the actual balance of the token and the C token owned by the test contract. Remember earlier that I said that in order to get the exchange rate and the supply rate you'll need to send a transaction. But we can actually get these numbers by making a static call. And the way you make a static call is by calling the function call on the function that we want to call.
00:07:38.382 - 00:08:35.570, Speaker A: So here the function that we want to call is Getinfo and then we append it with a function called call. This will make a static call. In other words, we'll be able to get the exchange rate and the supply rate without sending transaction. All right, scrolling down, the first thing that we'll do is supply our token to the compound and then we'll get a snapshot of it after the transaction and then log the exchange rate, supply rate, estimate balance, balance of underlying and the actual balance of token nc token. I'm going to show you that the tokens that we supply accrue interest per block and we'll simulate it by skipping the block from the current block plus 100. And then we'll take a snapshot again and then log the balance of the token that we supplied. So when this number is printed you will see an increase of balance of underlying.
00:08:35.570 - 00:09:34.480, Speaker A: The last thing that we'll do is test redeem, withdrawing the token and claiming the interest that accrued for supplying the token. And we'll do that by calling the function redeem and afterwards log the balance of underlying and the balance of token and z token. Okay, let's now run a demo using Ganache main network. I'm going to run Ganache on the main network. Once Ganache is started I'm going to open another terminal and the test file to run is called test compound ERC 20. Okay the test ran successfully. Let's now take a look at the logs we supplied one WBTC and the balance of underline returned by compound says it is 0.99
00:09:34.480 - 00:10:11.814, Speaker A: WBTC. Likewise the xtimid balance is also 0.99 after some blocks. So this is after we skipped 100 blocks we gained some interest for lending our WBTC. And you'll notice here that the balance of underlying has increased. So before it was zero point 99, now it is just a little bit over one WBTC and afterwards we call redeem and we actually claim the WBT Z including the interest rate that we earned. So in this video we covered supply and redeem.
00:10:11.814 - 00:10:17.590, Speaker A: In the next video I'm going to cover, borrow and repay. Thanks for watching and have fun coding.
