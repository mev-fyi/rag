00:00:00.330 - 00:00:47.702, Speaker A: To remove liquidity from unison b three it takes two steps, calling the function burn to update the position and then calling collect to actually transfer the tokens. In this video we will write some code for the function burn. So when we call this function burn, it will update the amount of tokens owned. This function will take in three parameters. Tick lower int 24 tick lower int two four tick upper and un one two eight the amount of liquidity to burn amount and then it will return the amount of tokens that we can remove for burning this much amount of liquidity. Un two five six amount zero and un two five six amount one. We also want to add a reentrange lock.
00:00:47.702 - 00:01:36.042, Speaker A: So use the modifier lock. The first thing that we'll need to do is call the internal function modify position underscore modify position and then we'll pass in the struct modify position params the owner will be message sender tick lower will be tick lower from the input. Tick lower and tick upper will also be from the input tick upper and then liquidity delta. Liquidity delta. This will be the amount of liquidity that we're going to be removing. And since we're removing liquidity we need to cast this un one to eight to a negative number. So to do that we'll first cast amount into un two five six amount and then we'll cast this un two five six into int two five six int two five six.
00:01:36.042 - 00:02:17.800, Speaker A: At the moment this number is positive so we'll make it negative by adding a minus sign. And lastly we'll cast it to int one two eight by saying dot two int one two eight. We can do this because if we go up top inside here we said for int two five six we're going to use a library called safecast. And safecast implements this function to cast int two five six into int one to eight. Okay, the function modified position returns three parameters. The first output is position info. We'll store this into memory, then we'll call it position.
00:02:17.800 - 00:02:57.842, Speaker A: The next two outputs are the amount of tokens to be removed for removing this much amount of liquidity. Int two five six amount zero since we already declared amount zero over here you'll say over here that this is amount zero int. Since this is of type. INT two five six and int two five six amount one int. Now when we call the function, modify position with liquidity delta being a negative number, we expect amount zero int and amount one int to be negative. So the next thing that we'll do is cast these into positive numbers. Say amount zero.
00:02:57.842 - 00:03:45.102, Speaker A: Amount zero is a variable of type un two five six. So to cast this into un two five six, you'll say un two five six, amount zero int. We expect this to be negative, so we take the negative of a negative number to make it positive amount zero int. Then we'll do the same for amount one, amount one, un two five six, take the negative of amount one int. And lastly, we'll update the position. So this position memory should be storage. Since we're going to be updating this position, and we'll say if amount zero is greater than zero, or amount one is greater than zero, then we'll update position tokens owed zero and position tokens owed one.
00:03:45.102 - 00:04:19.146, Speaker A: This will be equal to the new position tokens owed zero will be the current one. Position tokens owed zero plus amount zero. And likewise for position tokens owed one plus amount one. And that completes the function burn. Now, notice that this function does not transfer any tokens when we call this function. To actually transfer the tokens, we'll have to call the function collect, which we will discuss this in the next video. So for now, let's try compiling the contract.
00:04:19.146 - 00:04:47.890, Speaker A: Open my terminal and then type forge build. I see a compilation error over here, so let's check what mistake I made. Amount zero and amount one should be casted into un one to eight. Un one eight un one to eight. Okay, let's try compiling the contract again. Forge build and our contract compiled successfully, so that completes the function burn.
