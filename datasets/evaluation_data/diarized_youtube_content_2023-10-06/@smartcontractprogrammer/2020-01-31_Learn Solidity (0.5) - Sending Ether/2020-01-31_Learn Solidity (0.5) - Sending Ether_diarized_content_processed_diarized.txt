00:00:00.570 - 00:01:05.250, Speaker A: There are three ways to send ether from a contract to another contract. The three methods are transfer, send, and call, and the recommended way after 2019 December is to use call. So in this video, we're going to go over the subtle differences between the three methods and see why call is the recommended way to send ether. When a contract uses the transfer method to send ether, it forwards 2300 gas. On the other side, when a contract receives an ether by any of these three methods, there is a special function that gets called, and that function is called the fallback function. And since the transfer function forwards 2300 gas, this means that the fallback function has at most 2300 gas to spend. And if the transfer fails for some reason, such as running out of gas, trying to send more ether than the contract holds, or trying to send to a non payable address, then the function throws an error and the transaction fails.
00:01:05.250 - 00:01:45.950, Speaker A: Like the transfer function above the function, send forwards 2300 gas to the contract receiving the ether. Unlike transfer, it returns a boolean value. When the send function is successful, it returns true, otherwise, it returns false. Using the call function, you can either forward all of the gas or specify the amount of gas that you're going to forward. And like the send function, it returns a boolean value. And after December of 2019, this is the recommended method to use. The reason is that in the future, the cost of gas can change for different operations.
00:01:45.950 - 00:02:56.474, Speaker A: At the moment, these two functions transfer and send guard against the reentrangey hack by forwarding only 2300 gas, and you can't do much with 2300 gas. So if a contract receiving the ether calls back into the contract that sent the ether, then it only has 2300 gas to spend. Now, let's imagine a case where in the future, the cost of gas for some operation is lowered, and now, all of a sudden, 2300 gas might be enough to do some damage. So in summary, from now on, use call to send ether to another contract and guard against reentrancy by making all state changes before you call another contract, and also by using modifiers that guard against reentrancy. In a future video, we'll go over the reentrancy hack and more details, so stay tuned. Now that we went over the technical details of the three methods to send ether to another contract, let's write some actual code to send ether to another contract. First, we're going to create a contract that is going to receive the ether.
00:02:56.474 - 00:03:42.590, Speaker A: And in order for this contract to receive ether via the three methods mentioned above, we need to declare a function called the fallback function, and you declare it like this. This function cannot have a name, it cannot take any inputs, and it cannot return any outputs. Furthermore, the visibility of the fallback function must be external. And in order for the fallback function to receive ether, it has to be declared as payable. We're also going to create a helper function so that we could check the balance of ether in this contract. And I explained how this function works in a previous video about payable. In short, all address type has a special property called balance, which stores the amount of ether that the address holds.
00:03:42.590 - 00:04:29.438, Speaker A: And here we're saying get the balance of ether stored in this contract. So this completes the contract that will receive the ether. And now, moving on, let's write the contract that will send the ether. The first method that I'm going to explain is the transfer method. So I'm going to name this function send by transfer, and we're going to pass the address that we're going to send the ether to. Now, recall that in order for this address to be able to receive an ether, this address has to be declared as payable. So we're going to do that right now, and I'm going to name this address input as two this function will be public, and it's also going to be payable since we're going to send ether from our account to this contract and forward the ether to the receive ether contract above.
00:04:29.438 - 00:05:06.590, Speaker A: And to send ether by transfer, you call the transfer method on the address inside the parentheses. We put in the amount of ether that we're going to transfer. We're going to forward all of the ether that we send from our account. And we can do that by putting message value here, which holds the amount of ether that was sent with this transaction. And in this case, it will be the amount of ether that we will be sending from our account. So this is how you send ether to another address using the transfer method. Now, the transfer method will forward 2300 gas to this address.
00:05:06.590 - 00:05:53.982, Speaker A: And if for some reason this function fails to send ether, then this method will throw an error and the transaction will fail. So if you try to send ether to a contract that does not have a payable fallback function, then this transfer method will fail, and the transaction will also fail. Another possible reason that this method can fail is when you try to send more ether than the contract holds. So, for example, if the contract holds one ether and you try to send ten ethers, then this function will fail. Next, let's talk about the send method. We're going to create another function and the function signature will be mostly the same as send by transfer. And we'll call this function sendby send.
00:05:53.982 - 00:06:33.974, Speaker A: And the syntax to send ether using the send method is similar to the transfer method. Unlike the transfer method that throws an error if it fails to send ether. The send method returns a boolean value that indicates whether it was able to send the ether or not. So here we're going to capture the result in a boolean variable called sent. And since we want the transaction to fail if it fails to send ether here, we're going to require that the boolean value sent is equal to true. If it is false, then the require will throw an error and the transaction will fail. So that's how you send ether using the send method.
00:06:33.974 - 00:07:13.926, Speaker A: And finally, let's talk about how to send ether using the call method. We'll name the function sendby call. Other than that, the function signature is the same as the two functions above. To send ether using the call method, you do it like this. Now, this looks complex and it looks like it's doing a lot of things here, but I'll go over call in more details in another video. What you need to know here is that this function will forward all of the gas that you sent to the address that is receiving the ether. And if you want to specify how much gas that is being forwarded, you can do it like this.
00:07:13.926 - 00:07:58.562, Speaker A: Now, this function will return two values. The first output is a boolean value that indicates whether it was successful at sending ether or not. The second part of the output holds the return values from calling the fallback function. Now, since the fallback function cannot return any values, in this case, this will be an empty value, in other words, zero bytes. And similar to the send method above here, we're going to require that sending ether by call was successful. And now let's deploy the contracts and test the functions out. So here I've deployed the receive ether contract and the send ether contract, and we're going to be sending ether to this contract.
00:07:58.562 - 00:08:38.398, Speaker A: From this contract, let's first try the send by transfer function. So I'm going to copy the address of receive ether contract and paste it in here. And we'll send some ethers here. I'm going to send one ether. So I called this function and sent one ether to this contract. So the balance of this contract should now be one ether. So, to review what just happened when we called the send by transfer function, this code here was executed and it called a fallback function inside the receive ether contract.
00:08:38.398 - 00:09:47.266, Speaker A: And since the fallback function is declared as payable, it was able to receive the one ether that we sent, and the other two functions work in a similar way here by sent one ether, by send, by send, and by send by call. And as expected, the balance is now three ethers. So that covers the three ways to send ether from a contract, and the three ways to send ether are transfer, send, and call. Both transfer and send forwards 2300 gas to the contract that is receiving the ether. Transfer throws an error if it fails to send the ether and the send method returns a boolean value. So using this method, you would have to manually check that the ether was sent. Call is a low level function that by default forwards all of the gas and like the send method, it returns a boolean value and you will have to manually check that the ether was sent and the recommended method to use as of December of 2019 is to use the call method.
00:09:47.266 - 00:10:12.570, Speaker A: Using the call method, you'll have to write defensive code that will guard against reengency hacks. Now, in future videos, we'll dive deeper into the topics of fallback functions, call method and the reentrancy hack, so stay tuned. But for now, that's all I got to say about sending ether. Thanks for watching and I'll see you in the next video. Bye.
