00:00:00.330 - 00:00:47.386, Speaker A: Recently, the governance contract for tornado cash was hacked. This was because the attacker was able to deploy different contracts at the same address. So in this video, I'll show you how to deploy different contracts at the same address using solidity to simulate the DAO contract. Here I have a contract called Dao, and this DAO contract has an owner. The owner will be able to approve proposals and inside the proposal struct, it will have a target for the a contract whether this proposal is approved or not and whether this proposal is executed or not. So the owner would approve a proposal, and once this proposal is approved, anyone will be able to call execute on the proposal. When this function is called, it checks that the proposal is approved and it also makes sure that this proposal has not been executed yet.
00:00:47.386 - 00:01:22.898, Speaker A: Updates executed to true and then executes the proposal using delegate call, calling the function execute proposal. So what does this mean? This means that it's going to execute the code inside the proposal contract. Call a function called execute proposal, but the code will execute inside this contract. So it will update any state variables inside the Dow contract. This is the Dow contract. Now let's take a look at a simple proposal contract. So here I have a proposal contract, and when the function execute proposal is called for simplicity, it will just log execute code approved by dell.
00:01:22.898 - 00:01:59.726, Speaker A: In reality, there will be more code, but for this example, we'll keep it simple and then just log execute code approved by dell. Now, recall from a previous video where I explained how the attacker was able to deploy different contracts at the same address. The attacker first deployed the proposal contract, got it approved from the dell contract, and then deleted this proposal contract. So he might have had a function, something like emergency stop. When this function is called, it would delete this contract. Being able to self destruct this proposal contract will become important later. Let's move on and let's write the attack contract.
00:01:59.726 - 00:02:39.834, Speaker A: We're going to be writing some contracts so that we'll be able to deploy different contracts at the same address. Here's an overview of the contracts that we're going to be writing and then deploying. So we'll first create a contract called deployer deployer, which will use create two to deploy another contract called deployer. And then this contract deployer will use create to deploy the proposal contract that you see above over here. And later we'll have the Dow approve this proposal contract. And once this proposal contract is approved, we'll delete the proposal contract and also the deployer contract. And then using the deployer deployer contract, again using create two, we'll redeploy the deployer contract.
00:02:39.834 - 00:03:25.246, Speaker A: And then using create, we'll deploy the attack contract. So the contracts that we're going to be writing are deployer deployer deployer, and the tech contract. So let's start with the deployer deployer contract. Here I'll type contract deployer deployer, and let's first write a function to deploy the deployer contract. So to do that, we'll first declare another contract, contract deployer. And going back inside the deployer deployer contract, we'll write a function to deploy the deployer contract below function deploy external. And to deploy the deployer contract, we're going to be using create two.
00:03:25.246 - 00:04:14.830, Speaker A: So to deploy the deployer contract, we will type new deployer, and to deploy this contract using create two, what we'll have to do is put a curly braces here and then type salt and define a salt of bytes 32. So first I'll say salt, and let's define a variable called Salt. So I'll say bytes 32. Salt equals we'll use ketchak 256 to come up with assault, so say ketchak 256 AbI encode. And for the salt, let's use a ketchup 256 of un, one, two, three. So this salt can be any random bytes 32. What's important is that we use the same salt every time for the deployment, so that the address of the deployer contract will always be the same.
00:04:14.830 - 00:04:44.546, Speaker A: Now let's cast this new contract into an address. So say address. And then we'll assign this to an address, variable address, advr is equal to cast it to an address. Deploy the deployer contract using create to and for the demo, we'll want to get the address of the deployer contract that was deployed. So we'll log it using events. So I'll define an event event log. What we're going to log is address, I'll name it addr.
00:04:44.546 - 00:05:11.402, Speaker A: And then over here, once we deploy the deployer contract, we'll emit log addr. Okay, that completes the deployer. Deployer contract has a single function called deploy, which will deploy the deployer contract using create two. Let's move on. Let's write the deployer contract. The deployer contract will need three functions. Function to deploy the proposal, a function to deploy attack, and a function to delete this contract.
00:05:11.402 - 00:06:01.630, Speaker A: I'll name a function, function, deploy proposal external, and function deploy attack external, and a function to delete this contract. Function kill external. The function to kill is the easiest one, so I'll finish this off right now, to delete the contract, we'll have to do self destruct. Then inside here, we'll need to pass in an address, and it has to be a payable address. For this example, we'll keep it simple and say payable address zero. Next, let's write the deploy proposal contract. So inside here, the way to deploy a proposal contract using create is new proposal.
00:06:01.630 - 00:06:49.018, Speaker A: And we'll want to capture this as an address and then log it. So again, we'll declare an event called log, paste it here, and then we'll cast this in as an address address, assign it to a variable address addr is equal to, and then we'll log this address emit log addr. So that completes the function to deploy the proposal contract. Let's now write a function to deploy the attack contract. And to do that, we're going to need the attack contract. So below it, I'll declare a contract called contract attack, and then we'll fill out the details later. So, to deploy the attack contract, we're going to copy this code, paste it here, and then change the proposal to attack contract.
00:06:49.018 - 00:07:18.738, Speaker A: Okay, so that completes the deployer contract. The only contract that we have left is the tech contract. What I'm going to do is cut this contract, and then I'm going to paste it next to the proposal contract. The reason is because we'll need to have the function called execute proposal. What I'm going to do is copy these two functions and then paste it inside the tag contract. And let's log something else over here. So we'll say execute code not approved by Dow.
00:07:18.738 - 00:08:09.106, Speaker A: So now this would mean that once the proposal contract is deployed and approved, and then we delete it, and then we redeploy the type contract, we'll be able to execute any arbitrary code that's not actually approved by the Dow. But let's make this a little bit more interesting. If I scroll up, notice that the Dow contract has an owner, and when we execute using delegate call, this means that we have a potential to update the owner state variable inside the Dow contract. In other words, we are able to hijack the ownership of the Dow contract. To do that, what we need to do is have the same layout for the state variable as the Dow contract. So inside the attack contract, I'll declare a state variable called address owner. And going back up, notice that this state variable owner is the first state variable for the Dow contract.
00:08:09.106 - 00:08:46.526, Speaker A: So that is why inside the tag contract, I'm declaring the owner state variable as the first state variable. What we're going to do is update the owner state variable to the address of the attacker. For this demo, we will be calling execute inside the Dow contract. And this will be called by the attacker. And also it's going to be using delegate call, which means inside here, message sender will be equal to the attacker. So all we have to do to hijack the Dow contract is say owner is equal to message sender. Okay, so that completes the attack contract.
00:08:46.526 - 00:09:24.110, Speaker A: Next up, I'm going to show you a demo of the attack, but before we do that, I'll explain how we're going to do it. This is a step that we're going to follow for the demo. First, Alice deploys the Dow contract. Next, the attacker deploys the deployer deployer contract and then deploys the deployer contract by calling deploy on the deployer deployer contract. Once the deployer contract is deployed, we'll deploy the proposal contract. We'll get the address of the proposal contract, and then next, Alice is going to approve the proposal contract that was just deployed on step three. Once Alice approves this proposal contract, the attacker will delete the proposal contract.
00:09:24.110 - 00:10:12.394, Speaker A: So this is done by calling the function emergency stop, which will execute self destruct once the proposal is deleted. Next, we also delete the deployer contract and then redeploy the deployer contract. So this means that when we call the function deploy attack, to deploy the attack contract, the nounces are reset. The sender will be the deployer contract. So the address of the attack contract will be the same as the address of the proposal contract. Since the Dow has already approved the contract address deployed at the attack contract, the attacker will call execute. It will do a delegate call, execute the code inside the attack contract, but the state variables that will be updated will be the state variables inside the Dow contract, and we'll be able to update the owner of the DAO to the attacker.
00:10:12.394 - 00:10:36.290, Speaker A: Okay, so first, we'll deploy the Dow contract. To do that, I'll first make sure that the contract compiles by hitting Ctrl s and the contract compiles. So let's now deploy the Dow contract. You'll say that the first account is Alice and the second account is the attacker. So Alice deploys the Dow contract. Alice deploys the Dow contract. Next, the attacker deploys the deployer deployer contract.
00:10:36.290 - 00:11:08.990, Speaker A: So we'll switch over to the attacker, and then the attacker deploys the deployer deployer contract. Next, the attacker will call the function deploy. So, I'll scroll down, open the deployer deployer contract, and then click on deploy, and we'll need to retrieve the address of the proposal contract. This will be logged inside the transaction. So open my logs, and then open the transaction, and I'll look for the logs. Looking for the log advr. So this is the address where the deployer contract was deployed.
00:11:08.990 - 00:11:37.738, Speaker A: Okay, so let's load the deployer contract at this address. Scrolling up, I'll select the deployer contract, and instead of calling the function deploy, I'll load this deployer contract at the address that we copied. So, I'll click on that address, scroll down, open the deployer contract, and we'll deploy the proposal contract. Click on deploy. Proposal transaction was successful. We'll get the address of the proposal contract by again looking at the transactions. Scroll down, looking for an address.
00:11:37.738 - 00:11:56.462, Speaker A: So that is the address of the proposal contract. Copy. And then let's load the proposal contract. So select proposal at the address that we just copied. Click add address. Okay, so that completes the setup. Next, Alice would check the code at the proposal.
00:11:56.462 - 00:12:27.574, Speaker A: And since there's no malicious code, let's say that she approves this proposal contract. So going back to Alice, and then she's going to approve the proposal contract. So paste address of the proposal, and then click approve. So this call was just called by Alice. Okay, so next, the attacker, switching back to the attacker. Switching back to the attacker. The attacker will delete the proposal and the deployer contract.
00:12:27.574 - 00:12:45.390, Speaker A: So scroll down. The attacker will delete the proposal contract. So this is done by calling emergency stop. Transaction is successful. So this contract is deleted. So I'll just remove it. And next, attacker deletes the deployer contract.
00:12:45.390 - 00:13:21.062, Speaker A: So I'll hit kill. Now, since this deployer contract is going to be redeployed using create two, this means that we're going to have the same address for this contract. So I'm not going to hit X, I'll just leave it here. But at this moment, this contract has been deleted. We are on step six, redeploy the deployer contract. To do that, go back up to the deployer deployer contract, and then click on deploy. So now the deployer contract is redeployed, and we can check this by clicking on the transaction and then looking for the address where the contract deployer was deployed.
00:13:21.062 - 00:13:40.162, Speaker A: Oh, that's over here. Starts with four Ee and ends with six e five. Check the address of the deployer contract here. This was the address that was previously deployed. So starts with four ee, ends with six e five. So using create two, we are able to redeploy the contract. At the same address.
00:13:40.162 - 00:14:07.334, Speaker A: Step seven will be to call deploy attack. So let's call deploy attack, and then get the address of the attack contract. Scrolling down. That will be the address of the attack contract. And let's now load this attack contract. Scroll up, select the attack contract, paste the address of the attack contract, and then click on add address. Scroll back down, click on the attack contract.
00:14:07.334 - 00:14:34.590, Speaker A: And the next step is to call execute on the dow. So scroll up, and then we'll call execute. For this example, this dow only has one approval, so the first approval will be index zero, then call execute. And the transaction was successful. So we executed a code to hijack the owner of the Dow. So let's check that the owner of the Dow is now equal to the address of the attacker. So click on owner.
00:14:34.590 - 00:14:58.690, Speaker A: This is the address that we get. Starts with AB eight, ends with CB two. Scrolling back up, notice that the attacker address starts with AB eight, ends with CB two. So in summary, in this video, I showed you how to deploy different contracts at the same address. And I've also showed you how to hijack this Dow contract using that technique.
