00:00:00.410 - 00:00:29.510, Speaker A: Structs allow you to group data together. Let me show you an example. For this example, I'll create a struct of car and inside it I'm going to put the model year, and owner. The model will be of type string and I'll call it model semicolon. The year I'll represent it as un and the owner I'll represent it as address. We can use a struct as a state variable by defining car public. I'll name it car.
00:00:29.510 - 00:01:07.054, Speaker A: We can also create an array of struct by typing car brackets public cars. Or we can define a mapping from the owner to cars by typing mapping address. So this will be the owner. An owner can have multiple cars, so we'll define it as an array of car public. Name it cars by owner. We've defined a struct of cars and we've seen how to combine it with other data types and to declare it as state variables. Let's now see how to initialize a struct.
00:01:07.054 - 00:01:46.206, Speaker A: There are three ways to initialize a struct. The first way is similar to how we would execute a function. We put all the parameters into the parentheses. So let me show you. I'll create a variable of type the struct car, and it's going to be memory, meaning that we're creating a variable of car inside memory. So this car variable will only exist while this function is being called. I'll name this variable Toyota, and I'll initialize the struct by typing car parentheses and then putting in the parameters in the order that we declared over here.
00:01:46.206 - 00:02:35.760, Speaker A: So model year and then owner the model I don't know cars, so I'll just put in Toyota year, I'll put in 1990, and the owner I'll put in message sender. Another way to initialize a struct is to pass in key value pairs inside the parentheses over here. We'll declare a car variable again, and it's going to be memory this time. I'll name this variable Lambo, and it's going to be a car struct. Parentheses inside the parentheses we'll pass in key value pairs. So we'll type curly braces for the model. I'll type lamb bore guinea year 1980 owner message dot sender again.
00:02:35.760 - 00:03:04.934, Speaker A: Now, in the first example, we had to pass the parameters in the order that they were defined. But for the key value pair, we can switch around the parameters. The order doesn't matter. So, for example, I could take out the year and then pass in it as a first argument. And this will still initialize. The same car struct model will be Lamborghini, year will be 1980, and the owner will be message sender. Recall that variables in solidity all have a default value.
00:03:04.934 - 00:03:27.850, Speaker A: So the third way to initialize a struct is to just define it, and the struct will have a default value. We'll define the car again and it's going to be memory. And this time I'll name the variable Tesla. Right now, this Tesla will hold the default values. So the model will be an empty string. Year will be zero, and the owner will be address zero. Let's put some data into the Tesla car struct.
00:03:27.850 - 00:04:07.334, Speaker A: So I'll say Tesla model will be equal to Tesla, Tesla year will be equal to 2010, and Tesla owner will be equal to message sender. So these are three ways to initialize a struct. When we call this function, it will initialize the structs inside the memory. So the function will execute. After it finishes executing, these structs will be gone. So let's put these in a state variable so that after we execute the function, we'll be able to get the structs from the smart contract. We'll push these trucks into the cars array.
00:04:07.334 - 00:04:43.666, Speaker A: So I'll type cars push, Toyota cars push and cars push. Test law. Once this part of the code executes, now our struct will be stored in the cars array. We don't always have to initialize a struct as memory and then save it into a state variable. We can all do that in a single line. So for the next example, I'll create a struct and then push it immediately into the array. So I'll type cars push.
00:04:43.666 - 00:05:31.686, Speaker A: And I'll push a car struct of Ferrari 2020 message sender. Doing this is equivalent to initializing a car in memory and then pushing it into the cars array. Once you have structs stored inside a state variable, in this case, we're storing it in a cars array. How do we get it and how do we update it? For this example, let's get the first car that is stored in the cars array. The variable type is the struct. So it'll be car. If you just want to get the car from the state variable and then read it, so no modification, then we can declare as memory, meaning that we're loading the data onto memory and tellboid name conflict with the car that we declared over here.
00:05:31.686 - 00:06:23.426, Speaker A: I'll declare as underscore car is equal to cars zero. Now we have access to the model, year, and owner that is stored in the first element of the car's array. We can get those data by saying car model, or we can get the year by saying car year and get the owner by typing car owner. Now let's say I wanted to modify the year of this car. How do we do it? The first thing that we have to do is change this keyword memory to storage. So why do we need to do that? Why do we need to change memory to storage? Memory means that we're loading this data onto memory. So if we modify anything onto memory, then when the function is done executing, nothing is saved.
00:06:23.426 - 00:06:57.970, Speaker A: Whereas storage would mean that we want to update the variable stored inside the smart contract. So we want to modify the year. Then we would say car year is equal to 1999. This will update the car stored in the cars array, the first element, and we're updating the year to be equal to 1999. Once this function is done executing, this change will be saved. We can also use the keyword delete to reset the field stored in a struct. For example, let's reset the owner of this car.
00:06:57.970 - 00:07:41.758, Speaker A: So we'll say delete underscore car owner. This will reset the owner of the car to have its default value, which will be azure zero. We can also call delete on a struct to reset all of the data stored in the struct. For example, if we type delete cars of one, this would delete the car struct that is stored in the cars array. The first element, meaning that whatever that is stored inside here will be reset to its default value. So once we call this function, the car struct stored here will have a model of empty string. Here will be reset to its default value, which will be zero, and likewise the owner will be the zero address.
00:07:41.758 - 00:08:21.402, Speaker A: To show you this, I'm going to compile the contract and then execute this function. So I'll deploy it and then call examples. We've inserted four cars into the cars array and then deleted the owner from the first car and then deleted the second car. So if I access the first car, then you can see that it is a Toyota, but the owner is reset to zero. And if I access the first car, everything is zero. All of the values are reset to its default value. The third, we still have Tesla.
00:08:21.402 - 00:08:23.370, Speaker A: And the fourth car, we still have Ferrari.
