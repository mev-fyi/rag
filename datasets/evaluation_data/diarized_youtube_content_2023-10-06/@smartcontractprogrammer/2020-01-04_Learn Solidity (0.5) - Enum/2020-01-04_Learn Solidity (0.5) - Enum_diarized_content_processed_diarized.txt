00:00:00.650 - 00:00:31.858, Speaker A: Hey everyone. Happy New Year's. We're going to be talking about a data type called enums. I will explain how to define an enum and show you how it is used. Imagine that I have an online bookstore and a customer orders a book. As the owner of the bookstore, there are several things that I need to do before shipping out the books, like waiting for payments to finalize and preparing the order for shipment. So when an order is created by a customer, the status of the order is pending.
00:00:31.858 - 00:01:31.990, Speaker A: Once I've received the payments, I'm going to ship the book so the status of the order will be shipped. Once the shipment arrives at the customer, he can either accept it or reject it for reasons like damage during shipment or I sent the wrong books and the customer can cancel an order while the status of the order is still pending, and they shouldn't be able to cancel their order once the order is shipped. We can model this state transition using a data type called enum. To define an enum type, you start with the keyword enum followed by the name of the type. We're going to call this type status. Inside the braces, we're going to list out all possible status of the order. The statuses that we mentioned earlier are ending, shipped, accepted, or rejected, and finally canceled.
00:01:31.990 - 00:02:16.790, Speaker A: We're going to store the order status in a public state variable. And the way you do it is like this here I'm declaring that the type of the data is status and it's a public state variable and it's stored in a name called status. Notice that this status data type is not a built in data type. It is a data type that we declared here. Now, the default value for the enum type will be the first element in the definition of the enum. So in this case, pending is the first element defined in our enum. So our public state variable will be initialized to pending.
00:02:16.790 - 00:02:58.950, Speaker A: Once I shift the order, I want to update the status to shipped. So we're going to create a function to do that. We're going to create a public function called ship. And the way you would update the status is like this. It and we only want to update the status to shift if the current status is still pending. And the way you would do it is like this. We're going to require that the status is still pending.
00:02:58.950 - 00:04:12.296, Speaker A: So this function will update the status to shift only if the current status is still pending. Once the order has been shipped and the customer receives the delivery, the customer can either accept the delivery or reject it. So we're going to create two public functions, accept delivery and reject delivery. Now, both of these function will have a similar logic to this function here. So we're going to copy the code and modify it a little bit. We only want this function to be called by the customer if the current status is shipped, and if it is, then we're going to update the status to accept it. And we only want the reject delivery to be called if the current status is shipped.
00:04:12.296 - 00:05:07.750, Speaker A: And in that case, we're going to update the status to reject it. Finally, we want the customer to be able to cancel their order if the status of the order is still pending. So we're going to create a function called cancel, and this function should be called if the status is equal to pending. And in that case, we're going to update the status to canceled, and that covers all state transitions for the status of the order. Let's compile, deploy the contract and test it out. First, call status and you'll notice that you don't get pending. Instead, you get a number, zero.
00:05:07.750 - 00:05:54.580, Speaker A: This is because zero corresponds to our first element in our enum. So one will be shipped, two will be accepted, three will be rejected, and four will be canceled. Next, call, ship, and you can check that the status is now equal to one. So that means our current status is equal to shipped. And if you try to cancel a shipped order, you'll notice that our transaction failed. This is because you can only call cancel if the status is still pending. So once the status is shipped, the only two function that we can call are either accept delivery or reject delivery.
00:05:54.580 - 00:06:38.190, Speaker A: Call accept delivery, and you can verify that the status is now equal to two, which is equal to accepted. And if you try to reject the delivery after it's been accepted, you'll notice that the transaction will fail. Again. This is because you can only reject the delivery if the status is still equal to shipped. Now, let's try canceling the order. So we're going to delete this contract and redeploy a new one. As before, the initial status of the order is zero, which is equal to pending.
00:06:38.190 - 00:07:21.486, Speaker A: Next, call, cancel and check the status. The status is now equal to four, which corresponds to the fifth element in our status, enum, which is equal to canceled. And once the order is canceled, we won't be able to ship it. You can verify that the transaction failed, and that's because we cannot ship an order that's been canceled. And that's how you use enum to model state transition. In other words, by using enum, you can control when a function can and cannot be called. Well, that's all I got for this video.
00:07:21.486 - 00:07:25.130, Speaker A: Thanks for watching, and I'll see you in the next video. Bye.
