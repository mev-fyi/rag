00:00:00.330 - 00:00:44.310, Speaker A: When a contract inherits from parent contracts, how do you call the constructor of the parents? Here I have a contract s, and the constructor takes in an input of string called name. And then I also have a contract named T. It takes in an input to the constructor named text. And finally I have a contract called u, which inherits from both s and T. And what is the syntax to call the constructor of S and t? Inside the contract view, there are two ways to call the parent constructors. So in this video I'll show you that, and I'll also explain about the order of initialization, the order in which the parent constructors are called. So to start off with, let's talk about how to call the parent constructors.
00:00:44.310 - 00:01:18.046, Speaker A: There are two ways. If you know the parameters to pass to the parent constructor when you're writing the code, then you can pass the parameters directly inside here by typing parentheses. The constructor s takes in an input of string called name. So here I'll just pass in a string. For this example I'll pass s and likewise for the constructor t, I'll pass in a string t. This is the first way of initializing parent constructors. This only works when you know the inputs to pass into the constructor when you're writing the code.
00:01:18.046 - 00:02:05.102, Speaker A: But if you want to pass in parameters that are to be determined when you deploy a contract, then you have to do another way of initializing the constructor. And to show you what I mean, I'm going to create another contract. I'll name it B and it's going to inherit S and T. Let's say that I wanted to pass some dynamic inputs to the constructor of S and T. How do I do it? Well, we'll first have to declare a constructor, and then declare the inputs to pass to both s and T. We'll pass a string of memory to contract s. So I'll name it underscore name, and for the input of constructor t I'll name the input text to pass this input name to the constructor s.
00:02:05.102 - 00:02:40.154, Speaker A: What we do over here is say s parentheses name. Likewise, if we want to pass in a dynamic input of text to the constructor t, we have to say t, parentheses, text, curly braces. And inside here you'll put your initialization code for the contract b. So these are two ways of initializing parent constructors. Now you don't have to stick with either this syntax or this syntax. It can be a combination of both. To show you this, I'm going to create a contract named Bb.
00:02:40.154 - 00:03:30.734, Speaker A: And again it's going to inherit both s and t. We'll copy the constructor, and this time it's going to take in the input only to be passed to the constructor t. So I'll remove the first input and then remove the constructor. Initialization of s and then over here I'll pass in some static input, say yes, here I'm passing a static input to the constructor of s, but for the constructor of t I'm passing in a dynamic input which is to be determined when this contract Bb is deployed. So these are some ways of initializing the parent constructor. Let's now talk about order of initialization. The order of initialization of parent contract is not determined by the order of parent contracts that we call over here.
00:03:30.734 - 00:04:36.222, Speaker A: It is determined by the order of inheritance which is defined over here. For example, this contract b zero inherits s and then t. So whether we call s first and then t second, or we move the t and then say call t first and then s, the order in which the parent constructors are called regardless, will be s t and then b zero. So the order in which the parent constructors are executed is not determined by the order in which we call the parent constructors over here, whether it is s and then t or t first and then nest. The order in which the parent constructors are called are the same. In both cases st and then the most derived contract, in this case it will be b zero. Now, if I were to switch the order of inheritance, as you can see here, for contract b two, it inherits from t first and then s, then whether I call t first and then s over here, the order in which the parent constructors are called will be t s and then b two.
00:04:36.222 - 00:05:01.500, Speaker A: Likewise, I have a contract here named b three that inherits from t first and then s. Inside the constructor, it looks like we're calling s first and then t, but the order doesn't matter. The order in which the parent constructors will be called will be t s and then b three, and the order in which these parent constructors are called is determined by the order of inheritance defined over here.
