00:00:00.490 - 00:00:30.230, Speaker A: A dutch auction is an auction where the seller sets a price at the start of the auction and the price goes down over time. When the buyer decides that the price is low enough and he buys, the auction ends. A dutch auction works like an expensive fashion. Clothes that goes on sale. Imagine that a brand T shirt is selling for $300. You think that the T shirt is overpriced and over time the T shirt will go on sale. At first the T shirt goes to 10% sale, you still think it's too expensive.
00:00:30.230 - 00:00:52.358, Speaker A: Next, the T shirt goes on sale for 20%. The T shirt is still not sold. 30%, still expensive. T shirt goes on sale for 50% and at that point you decide that it is a good deal and you decide to buy the t shirt. Essentially, this is how a dutch auction works. Initially, the price is set high by the seller. Over time, the price decreases.
00:00:52.358 - 00:01:26.262, Speaker A: When the buyer thinks that it is a good deal, he decides to buy, ending the auction. For this example, we'll write a dutch auction for an NFT ERC 721. We'll say that the duration of this auction is seven days, so we'll say un private. Constant capital duration is equal to seven days. Next, we'll store some state variables. We'll need to store the address of the NFT and the NFT ID that we're selling for this auction. So the NFT contract will be IERC seven two, one.
00:01:26.262 - 00:02:05.540, Speaker A: I'll make this variable public. This variable will not change after the contract is deployed. We don't want to start an auction for NFT and halfway through be able to switch the NFT that we're selling, so we'll make this immutable. This means that after we deploy the contract, this variable cannot be changed and it also saves cash. We'll name this variable NFT. We'll also need to store the ID of the NFT that we're selling, so we'll say un public. Again, we don't want this variable to be able to change, so we'll make it immutable and then name it NFT ID.
00:02:05.540 - 00:02:52.594, Speaker A: Next, we'll store the address of the seller, so I'll say address public. Seller. Now, the seller will not change during the duration of the auction, so we'll also make this immutable. A dutch auction needs a starting price, so we'll say un public. This starting price will not change, so you'll also make this immutable and I'll name it starting price. We'll need to store some timestamp. Timestamp for when the auction starts and when the auction ends, so we'll say un public immutable start at, and also un public immutable expires at and the last variable we'll store is the discount rate.
00:02:52.594 - 00:03:42.478, Speaker A: The discount rate will determine the rate at which the price decreases starting from the starting price. So we'll say un public immutable discount rate. Next, we'll initialize these state variables in a constructor. So we'll type constructor. We'll pass in the starting price, un starting price, the discount rate, un discount rate, the address of the NFT contract, address NFT and the NFT ID. Un NFT ID we will set the seller to the deployer of this contract, so that will be message sender. So I'll type seller is equal to message sender.
00:03:42.478 - 00:04:50.954, Speaker A: Now, after the NFD is sold, we will need to transfer ETH to seller, so we'll make message sender payable. Then we also say that the address seller that is set over here, we also make this payable, so address payable public immutable seller. We'll set the starting price to the starting price from the input, the discount rate also from the input. We'll also set the NFT from the input. So by typing NFT is equal to Ierc seven, two, one NFT from the input, and the NFT id by saying NfT id is equal to nfT id from the input. Before we complete the constructor, let's write a simple check to make sure that the price of the NFT is always greater than or equal to zero. So we start at the starting price, and from the starting price we minus the discount rate every second.
00:04:50.954 - 00:05:55.950, Speaker A: So for the duration of this auction, the maximum amount that can be discounted will be discount rate times the duration of the auction, which will be seven days. So here we'll check that the price is always greater than or equal to zero by saying require starting price. Notice that I'm using starting price from the input and not from the state variable. This is because for immutable state variables, the state variable cannot be accessed inside the constructor, so you'll have to use the input. Starting price is greater than or equal to again, discount rate from the input discount rate times duration this is the maximum amount of price deduction that is applied to starting price. So as long as starting price is greater than or equal to this amount over here, the price will be greater than zero. If the condition above fails, we'll say that the error message is starting price is less than discount.
00:05:55.950 - 00:06:34.860, Speaker A: I forgot to add the start at and expires at. So I'll do that right now. So we'll say start at the auction starts when this contract is deployed. So start at block timestamp expires at will be from the start at the duration. So it'll be expires at is equal to block timestamp plus duration and that completes the constructor. Next, we'll write a function to calculate the current price of the NFT. I'll name this function get price.
00:06:34.860 - 00:07:41.518, Speaker A: This will be public function since we're going to be using this function to calculate the current price of the NFT when the buyer calls the buy function. So that is why this is public and not external. This function will be view and returns the price so it will return view end. The current price of the NFT will be return starting price minus the discount. And what is the discount? Well, the discount will be equal to discount rate times time elapsed since the auction started and the time elapsed is equal to the current timestamp minus the timestamp when the auction started, which is stored in start at. So notice that the price of this auction will always be decreasing from the starting price. The last function that we'll write is buy.
00:07:41.518 - 00:08:33.280, Speaker A: Users will be able to call buy to buy the NFT. So we'll type function buy to buy the NFT. The caller will have to send ether to this contract, so we'll make it external payable. We'll first require that this auction has not expired yet, so we'll type require current timestamp is less than expires at. In other words, the current timestamp is less than seven days since the auction started. The error message I'll type auction expired. Next, we'll check that message sender has sent enough amount of ether to this contract, so we'll first get the current price by typing un price is equal to get price.
00:08:33.280 - 00:09:31.566, Speaker A: This is the function that we wrote above over here. And then we'll check that the amount that was sent is greater than or equal to the price by typing require message value greater than equal to price. The error message I'll say if less than price once we know that message sender has sent enough amount of ether to buy the NFT, we'll transfer the ownership of NFT by typing NFT transfer from the current owner of the NFT is the seller. The new owner of the NFT will be message sender and the NFT that we're selling is NFT ID. Once we transfer the NFT, we'll refund the excess ETH that was sent when the function buy was called. Notice that the condition here is that message value is greater than or equal to price. So if the buyer sends too much if then we'll refund the buyer.
00:09:31.566 - 00:10:23.970, Speaker A: So we'll type un refund is equal to message value minus minus the price and we'll type if refund is greater than zero, then we'll send the refund back over to message sender by saying payable message sender transferrefund. Lastly, we'll send the ETH to the seller and close this auction. Now there are several ways to close this auction. For example, we can have a state variable saying that the auction finished and disable the buy function when the auction is finished. Another way to close the auction is to just delete this contract. So we'll do that here. So we'll type self destruct to seller.
00:10:23.970 - 00:10:58.058, Speaker A: So this line of code accomplishes the two things that we wanted. Send all of the eve to seller and then close the auction. It closes the auction by deleting the contract. Let's deploy this contract and then do an NFT dutch auction. I'll hit Ctrl s to compile the contract. Notice that here I have already prepared the NFT. I got the code for the NFT by going to solidity by example and then clicking on ERC seven, two, one and then clicking on copy button, paste it into remix and then compile the contract.
00:10:58.058 - 00:11:27.602, Speaker A: We'll deploy the NFT contract first. So I'll compile the NFT contract and then click on the NFT contract. Hit deploy and then we'll create an NFT to sell for the dutch auction. So I'll call the function mint. It takes in two parameter the address to mint and the token ID to mint. The owner of this NFT will be this contract. Paste it here and the NFT ID that I'm going to mint.
00:11:27.602 - 00:12:10.722, Speaker A: I'll just put in seven, seven seven and then hit transact. Next we will need to deploy the dutch auction contract. So I'm going to select the dutch auction contract, hit Ctrl s to compile it, and now I can select the dutch auction for the contract to deploy. Here are the parameters that I need to pass. Starting price, I'll put it to 1 million discount rate. I'll just keep it simple and say one, meaning that every second the starting price will be decreased by one. The address of the NFT which we deployed over here and the NFT ID that we're selling is seven seven seven and then hit transact.
00:12:10.722 - 00:12:42.990, Speaker A: So now our dutch auction contract is deployed. The next thing that we need to do is approve the dutch auction to spend our NFT. So I'll expand the NFT contract and then we'll need to call the approve function. The address that we need to paste in here is the dutch auction contract. So I'll copy the address of the dutch auction contract, paste it here. The token that we're selling is seven, seven, seven and then hit transact. So now our auction has started for anyone to buy our NFT.
00:12:42.990 - 00:13:32.240, Speaker A: I'll open the dutch auction contract and if I click on get price, notice that this is the price which is less than the starting price. I wait a few seconds and when I call get price again notice that the price has decreased slightly. Currently this will be the minimum amount of beef in way that we need to send to buy the NFT. So I'll copy this and scroll up, change the account. We'll send that much amount to buy the NFT and then click on buy. The buy was successful. So if you go back to the NFT contract and then check the owner of the NFT, the NFT that was sold was seven, seven, seven.
00:13:32.240 - 00:13:47.170, Speaker A: Click on owner of and that is the new owner of the NFT. Scrolling up you can see that the owner of the new NFT is this address over here and not the first address that first minted the NFT.
