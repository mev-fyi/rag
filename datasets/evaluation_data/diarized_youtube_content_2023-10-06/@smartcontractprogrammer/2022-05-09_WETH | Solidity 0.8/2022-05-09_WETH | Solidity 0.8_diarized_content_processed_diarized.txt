00:00:00.250 - 00:00:32.258, Speaker A: Today we're going to be coding Wef, which stands for wrapped eth. Wef wraps eth into ERC 20. When you deposit eth, an ERC 20 token is minted, and when you withdraw eth, the ERC 20 token is burnt. WEF is commonly used in many D five projects. Instead of writing two separate contract, one for EtH and one for ERC 20 tokens, you can write a single contract targeting the ERC 20 token. And if a contract wants to support EF, then all it has to do is interact with WEf instead of EF. Okay, so let's write the code for WEF.
00:00:32.258 - 00:00:56.134, Speaker A: Since WEF is an ERC 20 contract, we'll first import the ERC 20 token. You can use any ERC 20 contract. For example, open Zeppelin, or you might have written your own ERC 20 contract. For this example, we'll import the ERC 20 contract from soulmate. WEf is ERC 20. So we'll say WEf is ERC 20. Next we'll initialize the constructor.
00:00:56.134 - 00:01:25.794, Speaker A: So I'll type constructor, and then we'll also initialize the parent contract. The ERC 20. The parent contract takes three parameters, the name, the symbol, and the decimals. The name will be wrapped ether symbol will be all capital. West decimals will be 18. Next we'll define some events. We'll emit the event when there is a deposit, and we'll also emit the event when there is a withdrawal.
00:01:25.794 - 00:02:06.286, Speaker A: So I'll say event deposit and then we'll log the sender and amount address indexed account, un amount and likewise for withdrawal. So I'll copy the event for deposit and then rename it to withdrawal. We're going to need two functions. A function to deposit function deposit. For now we'll declare this as external and this will be payable. And then we're also going to need a function to withdraw. Function withdrawal we'll need to specify the amount that we're going to withdraw.
00:02:06.286 - 00:02:37.258, Speaker A: So this will take in an input of unit amount and this function will be external. So a user would send eth by calling the function deposit, and the contract will mint an ERC 20 token. When the user calls the withdrawal function. This will burn the ERC 20 token and then send the EF back. Let's write the code for a deposit. First, we'll first mint the ErC 20 token by calling the internal function mint. This function is inherited by the ERC 20 contract.
00:02:37.258 - 00:03:21.754, Speaker A: It takes in two parameters, the address and the amount. The address will be message sender and the amount will be stored in message value. Next we'll emit the event deposit. So I'll type emit deposit, and again this will be message sender message value, and that completes the function deposit. Now, if a user directly sends eth to this contract, we want to execute the fallback function and call the deposit function. So I'll declare a fallback by typing fallback external, and this will be payable, meaning that this contract can directly receive ether. When the fallback is triggered, we want to execute the function deposit.
00:03:21.754 - 00:04:02.982, Speaker A: So here I'll type deposit. Now deposit. We declared it as external, but since we're calling it here, we need to change this to public. Okay, the last function that we're going to code is withdrawal. When a user calls withdrawal, this contract will burn this much amount and send the exact amount of beef back to the user. So we'll type burn from message sender amount and then we'll send the same amount of eve by typing payable message sender transfer amount. And then lastly we'll emit the event withdrawal.
00:04:02.982 - 00:04:46.870, Speaker A: Emit withdrawal to message sender for the amount. Now notice that we call the function burn before we sent the ether to message sender. This is done to protect against reentrancy, and that completes the function withdrawal and the contract for ref. Let's now deploy this and then call the function deposit and withdraw. So I'll hit ctrl s and once the contract compiles we will go ahead and deploy it. So select with and then deploy it. Then we'll call the function deposit first sending one ether, so select one ether and then call deposit.
00:04:46.870 - 00:05:11.020, Speaker A: Let's check the balance of this account, copy it, paste it here, and then we have one ether here and let's now withdraw this one ether. So I'll copy this and then paste the full amount and then call withdrawal. You can see here that the transaction was successful. And if I call the balance up again, the balance is now zero.
