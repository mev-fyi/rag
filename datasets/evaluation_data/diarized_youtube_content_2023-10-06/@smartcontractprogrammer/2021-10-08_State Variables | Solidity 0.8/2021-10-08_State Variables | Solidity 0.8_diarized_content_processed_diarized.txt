00:00:00.410 - 00:00:29.926, Speaker A: There are three types of variable in solidity, local, state and global variables. In this video, I'll explain state variables. State variables are variables that store data on the blockchain. So let's say you store some data into a state variable. You come back one week later, your data will still be there, it's saved onto the blockchain. How do you declare a state variable? State variables are declared inside a contract, but outside of a function. Let me give you an example.
00:00:29.926 - 00:01:20.920, Speaker A: We'll declare a state variable of type eu int, so we'll say un public my un semicolon. So that is a simple example of a state variable. The data stored inside this variable will be stored on the blockchain. For example, if I set this equal to one, two, three, now this one, two, three will be saved onto the blockchain. In contrast, let's take a look at what is not a state variable, a local variable. So, for example, we'll create a function named foo external. And when we declare a variable inside a function, and just to be clear, I'll name this variable, not state variable equals four, five, six.
00:01:20.920 - 00:01:51.930, Speaker A: Then this is a local variable. When we call the function foo, this variable will only exist inside this function while it is executing. After the function executes, this variable will be gone. So, to summarize, state variables are variables that store data onto a blockchain. They're declared inside a contract and outside of a function. Variables declared inside a function are local variables, and they exist only while a function is executing.
