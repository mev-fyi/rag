00:00:00.490 - 00:00:45.030, Speaker A: Every time a token is traded for another token on curb, this equation must be satisfied. Today, we'll take a look at how this is implemented in the curb contract. Here is the exchange function. We'll say that there are xyz tokens and we're trading from x to y. I'll briefly go over this code and then focus our attention on one of the most difficult code to understand, the function gety. Okay, so first it transfers the token that we're selling. The reason why it's using raw call is because some Erc 20 tokens do not return any outputs when the function transfer from is called, and other Erc 20 tokens do return an output of boolean.
00:00:45.030 - 00:01:33.190, Speaker A: So here it's using raw call gets the response in bytes. If the response is greater than zero, converts to boolean, and assert that the boolean response is equal to true. So once this contract has the token that we're selling, next it computes the new balance of tokens that we're selling. So this would be the current balance plus the amount that was transferred in. And then it computes the new balance of token that we're buying. Dy is the amount of token that we're actually going to get, computes some fees, updates the balance, and then transfers the y token. Here again, it's using the raw call because some Erc 20 tokens return an output of boolean and others don't.
00:01:33.190 - 00:02:00.610, Speaker A: If it does return an output of boolean, then it asserts that the response is equal to true. Okay, so that's a quick overview of the function exchange. Let's now focus our attention to the function gety. Here's the function gety. First, it does some checks on the indexes. It's not that important for us, so we'll just scroll down. And then it sets some variables here.
00:02:00.610 - 00:02:38.800, Speaker A: Amp is equal to a times n to the power of n minus one. The function get d uses the same technique as this function gety to compute d. So if you can understand this function get y, then you'll have no problem understanding the function get d. An is equal to amp times n coins. Amp is equal to a times n to the power of n minus one, and you multiply it by another n. So you get a times n to the power of n. Next it runs a for loop computing s and c.
00:02:38.800 - 00:03:14.310, Speaker A: Here are the values of s and c after each loop. For this example, we'll say that there are three coins, x, y, and z, and we're trading from x to y. So I will be equal to zero and j will be equal to one. On the first loop this part will be true, so s will be equal to x and c will be equal to this value. On the second loop, underscore I will be equal to j. So this will evaluate to false. This will also evaluate to false.
00:03:14.310 - 00:04:03.930, Speaker A: So this part of the code will evaluate basically skipping the loop. So after this iteration the value of s and value of c still remains the same. On the third loop this part will evaluate so underscore x will be equal to z. We add that to s and we update c and get these values scrolling down. Let's see what it does. It updates c before c was this and we multiply by this expression. So we will get this expression over here and then we define a variable named b and then we run a loop to find y where the difference between y and y prep is less than equal to one and then it returns that y value.
00:04:03.930 - 00:05:03.086, Speaker A: What it's doing here is it's using the Newton's method to find the value for y. Newton method says that you can find x where f of x is equal to zero by using this formula here. So in our case we can turn this into a function by moving all the stuff on the left side over to the right side. In other words, we define y to equal the equation on the right side minus the equation on the left side. When you take the derivative of this function, we get this expression over here and to find y where g of y is equal to zero, we apply the Newton's method to find the y value. You do some substitutions and simplification and you'll eventually arrive at the equation below. Here is the final equation and you can verify for yourself that this expression is go to this which is equal to this.
00:05:03.086 - 00:05:19.980, Speaker A: The top equation is what we got from the Newton's method and you can see that these two equations are the same. So that is how Gety computes the new balance of y tokens. I'll put the link for this code in the descriptions below. Thanks for watching.
