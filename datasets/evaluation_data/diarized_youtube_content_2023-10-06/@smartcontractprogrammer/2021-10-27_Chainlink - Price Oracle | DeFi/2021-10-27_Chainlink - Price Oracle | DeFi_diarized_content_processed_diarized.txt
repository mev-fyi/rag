00:00:00.490 - 00:00:54.126, Speaker A: How do I get the price of ETH in terms of US dollars inside my smart contract? If you're using a programming language like JavaScript, Python, go, or rust, this is an easy task. However, for our smart contract programming languages this is an impossible task. In solidity. There is no way to get the price of EF in terms of US dollar unless you use a price oracle. So in this video I'm going to show you how to use the chain link price oracle to get the price of e in terms of US dollar inside this smart contract. The first thing that you'll have to do is import the price oracle interface from chain link. The interface that we need is called aggregator b three interface, which you can import it by using this statement or for convenience I imported this interface and then just declared it here, copied and paste the interface over here.
00:00:54.126 - 00:01:45.520, Speaker A: For this example, we're going to get the price of ETH in terms of US dollars. So we'll initialize the price feed inside the constructor here I'm passing in the address of the price feed that is going to give me the price of ETH in terms of US dollar. This is a contract deployed on the mainnet. And where did I get this address? From inside the Chainlink documentation you'll be able to find all of the contract address that corresponds to their price feed. For this example, I copied the contract address over here, the ETH to USD price, but maybe you're interested in other price feed for example etc to USD. Then you would copy this address. Once we set the price feed, the only function that we'll need to call to get the actual price is to call data spround data and the price will be returned as the second output answer.
00:01:45.520 - 00:02:38.922, Speaker A: For this example I've created a function called get latest price which will get the latest price of ETH in terms of US dollars. We're going to call the function latest round data on the price feed and we're going to extract the second output which is the price. Before we return the price we will need to divide this by ten to the eight. This is because the price that you see over here is scaled up by ten to the eight. So to get the actual price in terms of US dollars, we need to scale it down by ten to the eight divided by ten to the eight. And how do I know that I need to divide this by ten to the eight? Inside the documentation of chain link you can see here the number eight. This means that this price is scaled up by ten to the eight and this is how you use the chain link price oracle to get the price of beef inside the smart contract.
00:02:38.922 - 00:03:46.108, Speaker A: Let's run a demo. As usual, we'll first run the ganache on the main network. So we'll load up the environment variable by typing source EMB and then pasting the command to run ganache on the main network. Once ganache is running, I'll open another terminal to run the actual script. The command to type is first, we're going to need to load up the environment variable again, so we'll type EMB dollar sign parentheses cat EMB mpx truffle test. The network is main net fork, and the name of the script that we're going to be running is called test test chainlink JS and the answer we get back is that the price of beef in terms of US dollar is $4,201. Chain link price oracles are easy to use inside your smart contract.
00:03:46.108 - 00:03:49.350, Speaker A: Give it a try. The thanks for watching and see you later.
