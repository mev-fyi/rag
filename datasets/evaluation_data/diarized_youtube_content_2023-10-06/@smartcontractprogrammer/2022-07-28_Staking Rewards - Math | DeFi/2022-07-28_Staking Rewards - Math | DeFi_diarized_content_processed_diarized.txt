00:00:00.250 - 00:00:36.310, Speaker A: In the previous video we looked at a simple example of how much rewards a user would earn. In this video, I'm going to explain the two math equations that describe the amount of rewards that a user earns for staking. Let's start with some definition. I'll define a function named r that calculates the amount of rewards that was earned by a user. It takes in three inputs, uk and n, and it calculates the rewards earned by user u from the time k to n, and both k and n are in seconds. Next I'll define some variables. I'll say s sub I is equal to the amount staked by user u at time equals I.
00:00:36.310 - 00:01:25.910, Speaker A: T of I is the total staked at time equals I, and here we'll assume that t of I is always greater than zero and r is the reward rate per second. This will be the total rewards that is being paid out divided by the duration in seconds. With these variables defined, we can now write the equation for the function r that calculates the amount of rewards earned by the user. This will be equal to the sum from I equals k to n minus one s, sub I divided by t of I. Multiply the reward rate r. What is this equation doing here? Well, for each second from I equals k all the way up to n minus one, we are calculating the percentage of token that is staked by this user s. Sub I is the amount of tokens that is staked by this user, and t of I is the total amount of tokens staked by all of the user at times t equals I.
00:01:25.910 - 00:02:09.126, Speaker A: We multiply this percentage by reward rate per second. This term here s, sub I divided by t of I times r will give us the amount of rewards earned by this user in 1 second, and we sum this up for the duration from seconds I equals k to n minus one. And that is how we calculate the amounts of rewards earned by the user u from seconds k to n. However, if you were to translate this equation into solidity code, since it's running a for loop, there's a chance that it uses up too much gas. Luckily, there's another way to write the same equation that will use less gas. So let me show you how to write this equation in another way, and that will be the equation that is used inside the staking contract. Consider the case where s, sub I.
00:02:09.126 - 00:03:16.758, Speaker A: Remember that s, sub I is the amount of staked by user u at time equals I is a constant s from times t equals k to n minus one. In this case, we can simplify this equation assuming that s sub I is a constant from I equals k to n minus one, we can pull out this s sub I out of this summation and we get this equation over here. The rewards earned by user u from times k to n will be equal to s is a constant that we pulled out from the right of this summation and we get s times the summation from I equals k to n minus one multiplied by the reward rate r divided by the total state that time equals I. Let's simplify this equation one more step. Notice that summing from I equals k to all the way up to n minus one is the same as summing from I equals zero all the way up to n minus one, and then subtracting the terms all the way from I equals zero to k minus one. And this is the final equation that is being used by the staking contract to calculate the amount of rewards earned by the user inside the staking contract. This part is stored in a variable called reward per token.
00:03:16.758 - 00:03:50.500, Speaker A: Every time our reward rate per second or the total amount staked changes, this will be updated. This value on the right will be stored in a mapping called user reward per token paid. This value will be stored for each user and anytime a user deposits or withdrawal, this value will be updated. By keeping track of these two values, the staking contract will be able to efficiently compute the amount of rewards earned by the user. In the next video, we'll go through some examples of calculating how much rewards our users have earned using this formula over here.
