00:00:00.810 - 00:00:30.594, Speaker A: Let's build an app applying some of the concepts that we have covered so far. So we'll build an app that covers state variables, global variables, function modifiers, functions, and error handling. The app that we're going to be building a simple app where you can claim ownership of the contract. This is a contract that you'll see often in production on Mainnet, so it is a practical app. Let's start building. I'll name this contract ownable. This contract will have an owner.
00:00:30.594 - 00:01:02.990, Speaker A: Only the owner will be able to set a new owner, and there will be some functions where only the owner can call. First, we'll declare a state variable called owner. So I'll type address and it's going to be public. I'll name this owner. We'll initialize the owner to the caller that deployed this contract. So inside the constructor we'll initialize the owner to message sender. So I'll type constructor and set the owner to message sender.
00:01:02.990 - 00:01:47.790, Speaker A: Next, we'll create a function modifier where only the owner can call the function. So I'll type modifier. I'll name this only owner. It doesn't take any parameters, so I'll just put parentheses and we'll require that message sender is equal to the current owner stored in the state variable owner. And if it is not, then we'll return the message saying not owner. If message sender is the current owner, then we'll move on. Let the rest of the code execute by typing underscore semicolon.
00:01:47.790 - 00:02:41.280, Speaker A: The next function that we'll write is a function to set the new owner, and only the current owner will be able to call this function. So I'll type function, I'll name this function set owner. It's going to take in a single input of the new owner, so it's going to be type address. I'll name this input new owner. The function will be external, meaning that we will be able to call this function. And now we're going to attach the only order modifier, and this will mean that only the current owner of this contract will be able to set the new owner. Now we probably don't want the new owner to be a zero address, so we'll validate the input by saying require that the new owner is not equal to address zero.
00:02:41.280 - 00:03:25.754, Speaker A: And if it is, we'll throw on an error message saying invalid address. So now we know that the caller is the current owner and that the new owner is not a zero address. In that case, we'll set the current owner to the new owner by typing owner is equal to the new owner from the input. Now this contract is useful when you have some functions where anyone can call and some functions where only the owner can call. To give you an example, I've created two functions. One function only the owner can call, and below it there's a function where anyone can call. Let's compile this, deploy it, and I'll show you a demo of this contract.
00:03:25.754 - 00:04:11.870, Speaker A: So I'll hit Ctrl s and once the contract is compiled, we'll deploy it. We're going to be using the first account from this drop down to deploy this contract, meaning that this account will be the owner of the contract ownable. Once I deploy it, I scroll down, expand the contract, and the current owner is the account that deployed this contract. Now, if I switch accounts, we'll select the second account and then try to call. Anyone can call, then it will be successful. However, if I try to call a function where only the owner should be able to call, you'll notice that the transaction fails. So I'll switch back to the owner of the contract.
00:04:11.870 - 00:05:09.566, Speaker A: Actually, I'll set the new owner to the second account and then call the function that only the owner can call. So I'm going to scroll back up and then select the second account which is not the current owner, copy their address, scroll down, paste it in here as the new owner, and then I'm going to scroll back up, select the current owner, scroll back down, we switch back to the current owner because set owner can only be called by the current owner and then call set owner. Notice that the transaction was successful. So now the current owner should have changed. If I click on owner now the owner is the second account. Since the owner changed, I'm also going to change the account that's going to be calling into the function. So we'll select the new owner, scroll down, and then hit the function that only the current owner should be able to call.
00:05:09.566 - 00:05:20.220, Speaker A: The transaction is successful. So this is a simple contract where we can associate ownership to the contract and also control who gets to call what function.
