00:00:00.410 - 00:00:32.886, Speaker A: The synthetic staking reward contract is a contract where if you stake a token and let it sit for a while later, you'll be able to claim a reward token. The algorithm to calculate the amount of reward you can get is very clever. The reward is calculated by a single formula over here. So over the next few videos, I'm going to explain how to derive this formula and then explain how the algorithm works. First, I'm going to explain what the synthetic staking work contract allows you to do. You can stake a token into this contract. Here we'll say token a.
00:00:32.886 - 00:01:05.730, Speaker A: This means that you can deposit token a into the staking contract and later claim another token for the reward of staking token a. So once you have the token staked, you can wait and you can unstake token a at any time. At that point, you can get token B for the reward. A fixed amount of reward is minted per second. Here we'll say it's our rewards per second, and the rewards is distributed fairly across stakers. Let me illustrate this with an example. Alice and Bob stakes 100 token A at the same time.
00:01:05.730 - 00:01:43.722, Speaker A: In total, inside the staking reward contract, there are 200 a tokens. One day later, Alice decides to unstake her wander token A. So how much token B, the reward token should Alice receive? Well, our tokens are minted every second. She staked 100 token out of 200 tokens. And the length of time that she staked is 24 hours, 60 minutes times 60 seconds, which is equal to 3600. So that is the amount of token B that she will receive. Let's say that another day pass and Bob also decides to unstake his 108 token.
00:01:43.722 - 00:02:13.078, Speaker A: How much reward would Bob receive? So our tokens are minted every second. On the first day, he staked 100 token out of a total of 200 tokens. So this is Alice's 100 and Bob's 100. And that lasted for a day. Once Alice unstaked the next day, R is still the same. The amount of tokens that Bob staked is still the same. However, the amount of total tokens that were staked is now 100.
00:02:13.078 - 00:03:02.486, Speaker A: This is because Alice withdrew the day before, and this lasted for a day. So if you do the math, this is the amount of reward tokens that Bob will receive. The amount of rewards the staker will receive over a time period from A to b is given by this equation where rrab, what you see over here is equal to the reward for user u. For the time between a and b, r is the fixed reward that is minted per second, lt gives the total stake token at time t, and lower l of ut is the total stake by user u at time t. Given this definition, let's see how we can derive this equation again. L of t is the total number of tokens staked in the staking contract, and we'll graph L of t over time. Let's start with a simple example.
00:03:02.486 - 00:03:46.100, Speaker A: Let's say Alice stakes 100 token at t equals seven and then unstakes at t equals 14. So lt will be zero up until t equals seven, and after t equals seven, it will be equal to 100. Alice unstakes the token at t equals 14, so lt will be equal to zero after t equals 14. Let's calculate, how much reward will Alice receive from t equals seven to t equals 14. Well, at t equals seven, lt is zero. That is why you see zero over here. At t equals eight, Alice has staked 100 tokens, and the total token staked is 100.
00:03:46.100 - 00:04:16.938, Speaker A: So she is going to receive r times 100 divided by 100 tokens. At t equals nine, the amount of token that Alice staked is still 100. The total amount of token is 100. So again she'll receive r times 100 divided by 100. And this will continue up until t equals 14. That is 123-4567. So in total, she is going to receive seven times r tokens.
00:04:16.938 - 00:04:42.310, Speaker A: Now let's try a more complicated example. So we'll compute r values and r bob at t equals seven. Alice stakes 100 token at t equals nine. Bob stakes 100 token. At t equals 14, Alice unstakes her 100 token. And at t equals 18, Bob unstakes his 100 token. Let's calculate how much reward tokens each of them will receive.
00:04:42.310 - 00:05:17.038, Speaker A: For Alice, she's going to receive zero tokens for t equals seven. At t equals eight, there are 100 token in total, and she has staked 100 token. So she will receive r times 100 over 100 tokens. And the same for t equals nine when the time is at 10 seconds. If you look at the graph over here, we have 200 tokens in total, and Alice still has 100 tokens staked. So she will receive r times 100 divided by 200 tokens. This will continue until t equals 14.
00:05:17.038 - 00:05:46.250, Speaker A: If you do the math, that will be two times r times five times 0.5 times r, which is equal to 4.5 r. How about Bob? How many reward tokens will Bob receive at T equals nine, Bob has zero tokens staked. So we start with R times zero. At t equals ten, he has 100 tokens staked out of a total of 200 tokens. So the reward he will get will be r times 100 divided by 200.
00:05:46.250 - 00:06:19.526, Speaker A: This will continue until t equals 14 over here, at which point Alice unstakes her token. So starting from t equals 15, Bob will receive r times 100 over 100 tokens. This will continue until t equals 18. This turns out to be five times 0.5 r. Since we have 5 seconds over here where Bob is receiving half of the reward tokens plus four times r, the 4 seconds over here where he is receiving the full r amount of tokens, and this turns out to be 6.5 r.
00:06:19.526 - 00:07:08.002, Speaker A: So how do we calculate R of Uab, the reward that a user receive in the time between A and B? First, we looked at the graph to determine what LBT is. Again, LBT is the amount of tokens staked by a user at time t, and then we divided that number by Lt, the total amount of tokens staked in the contract. We multiply that by r. We evaluated this for each second, from T equals A to t equals b, and then added everything up. So this is the formula to calculate how much a reward a user will receive for staking from t equals A to T equals b. If we try to implement this in solidity, then this means that we'll have to store Lt and lut for each timestamp. So the code will look like this.
00:07:08.002 - 00:07:35.210, Speaker A: We will store each second in array. So in order to compute the reward, we'll have to run a for loop for each second. We need to store L of T for each second, and we'll need to store L of ut per user for every second. This will burn a lot of gas and it is not an efficient way to calculate the rewards. In the next video, I'm going to show you a more efficient way to write this equation, which will lead us to a more efficient way to calculate the rewards of a user.
