00:00:00.170 - 00:00:28.054, Speaker A: Here are some compound data types available in sway. We will take a look at tuples, structs and arrays. Let's create a tuple of type U 64 and boolean. So I'll type. Let t is of type U 64 and boolean. And this is equal to, let's say this is equal to one, two, three and true. To access this tuple, let's say that we wanted to access the first element in this tuple, the number U 64.
00:00:28.054 - 00:01:03.818, Speaker A: Then it's similar to how you would access array, except that you will use a dot. So if you wanted to access the first element, you would type t zero. So this will return the number one to three. So what I mean here is that t zero will be equal to one through three. And if you wanted to access the second element, so this will be the boolean. Then we will type T one inside the tuple, access the element at index one, which will be the boolean. So this will be equal to true if you wanted to destructure this tuple into two parts.
00:01:03.818 - 00:01:30.790, Speaker A: So we want to assign a variable to the first element and another variable to the second element. Here's how you will do it. Let's say let the first element will be a number. So I'll name this as num and the second element will be a boolean. So I'll name it boo is equal to t from the tuple T. Assign the first element to a variable named num and assign the second element to a variable named boo. So that's tuples.
00:01:30.790 - 00:01:55.280, Speaker A: Next, let's take a look at structures. First, I'm going to scroll up and let's define a struct. And for this example, we'll create a struct that represents a point. It will have two fields named x and y, which represents numbers. So we'll name the struct, struct point. It's going to have two fields, x of type U 64 and Y of type. Also U 64.
00:01:55.280 - 00:02:29.974, Speaker A: To use a struct, what you would do is let's name this p that p is equal to point curly braces. For the first field we'll say is one, and for the second field y, we'll say it's equal to two. Let's say that we have a struct called p and we wanted to access the field x. Then you would do p x. This will be equal to, in this case equal to one. And likewise to access the field name y, you will do p y and this will be equal to two. Next, let's take a look at examples of some fixed sized arrays.
00:02:29.974 - 00:02:58.854, Speaker A: Let's create a fixed size array of u eight. And this fixed size array will have five elements. So let's say let U r of type. This will be a fixed sized array array of type U eight having the size five. And let's say this will be equal to 12345. Let me show you another example. Let's create a fixed sized array of strings and each string will have length three.
00:02:58.854 - 00:03:34.494, Speaker A: So I'll type let Sr of type string. Each string will have length three. And let's say we'll create a fixed size array of length four equal to, let's say cat, dog, two more elements, rat and bat. So notice that each string has length three and inside this array we have four elements. So this was an example of a fixed sized array. Each element is of type string having the length three and there are four elements. We can also create something more complex.
00:03:34.494 - 00:03:59.598, Speaker A: So remember that we created a struct of points. We can also create a fixed size array of points. And to do that, let's say let points of type point, let's create a fixed size array of length two. So two, I realized I made a mistake. This should be a semicolon. Okay, going back two points, this will be equal to brackets. Let's say point curly braces.
00:03:59.598 - 00:04:35.586, Speaker A: X is equal to one, y is equal to two, and another point point x is equal to, let's say three and y is equal to four. What if you wanted to mutate an array? Let's look at an example of mutating an array. So say let mute this keyword. Mute tells sway that whatever variable that we're declaring is mutable, meaning that we'll be able to mutate whatever data that is inside this variable. Let's name this mute underscore R. And let's create a fixed sized array of booleans. So say boo and of size two.
00:04:35.586 - 00:05:04.974, Speaker A: And let's say this is equal to true and false. Let's update the element at the first index. So let's update this false to true. So we say mute r of one is equal to true. And we can do this because we declare this variable mute array with the keyword mute. If you remove this keyword then we won't be able to do an update like we did over here. Okay, lastly, let's return this struct point.
00:05:04.974 - 00:05:46.850, Speaker A: So to do that, first I'm going to change this ABi declaration test function. Instead of returning a boolean, we'll return a struct point, so say point. And for our implementation, we'll do the same test function returns a point, and lastly, we're returning a Boolean, and we'll change this to return a point. Let's say we'll return a point with x equals one, two, three, and y equals four, five, six. Now here again, we can say return, point, semicolon. Or as a shortcut, we can just say point without the return and without the semicolon. Okay, let's try compiling this contract.
00:05:46.850 - 00:05:59.850, Speaker A: I'm going to open my terminal and then type fork build and their contract compiles. So those were some examples of compound types available in sway. I showed you examples of tuples, structs, and arrays.
