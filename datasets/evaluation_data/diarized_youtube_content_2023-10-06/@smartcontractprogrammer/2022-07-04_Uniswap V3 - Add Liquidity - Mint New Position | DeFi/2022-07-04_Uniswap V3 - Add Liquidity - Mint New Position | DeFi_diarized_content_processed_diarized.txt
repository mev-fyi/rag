00:00:00.250 - 00:00:46.966, Speaker A: Today we'll be following the official documentation from uniswap to add liquidity to uniswap B three. For this example, I'm following the documentation from providing liquidity and we'll go over, set up your contract and mint a new position. Okay, so the first thing that we'll do is copy the contract to set up our contract before we can add any liquidity. So I'll scroll all the way down to copy the contract. Hit copy and inside my code editor I already have a hard hat project initialized and in the previous videos I already went through some examples of swapping tokens. In uniswap b three we'll write some code inside this project. So inside contracts I'll create a new contract called liquidity examples sol and then we'll paste the code that we copied over from Uniswap.
00:00:46.966 - 00:01:19.750, Speaker A: I'm going to hit ctrl s to save the contract. Once we have our code copied, I'll go back to the Uniswap documentation to copy and paste more code. Back inside the documentation, I'll navigate to mint a new position and then I'll scroll all the way down and then we'll copy this code. So I'll copy it back inside of my code. I'll paste the code that we just copied and then hit ctrl s. And that completes the code example that we're going to be executing. We will be making some modification before we call the function mint new position.
00:01:19.750 - 00:02:23.510, Speaker A: So first of all, if I try to compile it, so I'm going to open my terminal and then type mpx hard hat compile. You can see here that the contract failed to compile and the reason it failed to compile is because it's trying to access a solidity contract that does not exist. So let's go fix our imports inside liquidity examples back inside my contract I'll scroll all the way up and we'll need to fix these imports. The bottom three relative imports should be pointed to uniswap b three periphery. So I'll change these imports to at uniswap b three peripherary and afterwards I'll also have to type contracts and that fixes the imports. But we still have to install openzel and contracts and uniswap B three periphery. So let's open our terminal and then type mpmi at uniswap b three periphery.
00:02:23.510 - 00:03:02.610, Speaker A: And also we'll need to install open zeppelin. So I'll type at open Zeppelin contracts. Now for open Zeppelin contracts we'll need to install first lidity 0.7 so we'll say that the version that we're going to install is at 3.42. Okay, once NPM packages are installed we fix the imports. So let's try compiling the contract again. Inside the terminal I'll type mpx hard hat compile and you'll notice that we get a different error saying compiler error stack too deep.
00:03:02.610 - 00:03:51.464, Speaker A: To fix this error we'll need to change the compilation settings on GitHub inside unisoft Bt periphery contracts I'll scroll down and look for hard hack config where the compilation settings are located. So I'll click on hardhack config Ts and then we'll look for the compiler settings. I'll scroll all the way down and I'll copy this back inside our project. I'll also open hardhack config Js and then paste it here. And we have not defined what default compiler setting is, so let's go back to GitHub and copy and paste this variable back inside GitHub. We're still inside the unison b three periphery repository and I'm looking for a variable called default compiler settings. Scroll up and I see it over here.
00:03:51.464 - 00:04:45.354, Speaker A: So I'll copy this and then inside my code editor I'll paste it and then also remove this setting. I forgot to put this compiler settings under solidity so I'll type solidity and then inside the solidity I'll put this compiler settings and that should do it. Let's try compiling the contract again. I'll open the terminal, clear the logs and then I'll reexcute mpx hardhack compile and the contract compiled successfully. Let's now write a test script to test the function mint new position inside the contract liquidity examples but before we do that, let's make some modification to this contract. First I will hard code the address of the non fungible position manager. So I'll remove this, copy the address of non fungible position manager from uniswap documentation back inside the code.
00:04:45.354 - 00:05:29.546, Speaker A: I'll change I nonfungible position manager public immutable replace immutable with constant and then we will initialize this by saying is equal to I nonfungible position manager at the address that we just copied from the Uniswap documentation, paste it and then hit Ctrl s. I also want to change the pool fee from 0.3% to 0.1% so I'll remove a zero and change three to a one. The reason why I changed the pool fee from 0.3% to 0.1% is because for this example, we're trading die USDC and the pool die USDC with the fee 0.1%
00:05:29.546 - 00:06:04.382, Speaker A: has the biggest Tbl. Okay, next I'll scroll down and for the amounts that we're going to be adding liquidity, we'll say 100 die. So that will be 100 times one die is equal to ten to the 18. So I'll multiply ten to the 18 to get 100 die. And we also put in 100 USDC. USDC has six decimals, so I'll multiply this by ten to the six. When we call the function mint new position to add liquidity, we call the function mint on the nonfungible position manager.
00:06:04.382 - 00:06:38.654, Speaker A: And afterwards we call the function create deposit. This is an internal function that you can see over here. And inside here we know what the token ID is and the amount of share that was minted liquidity. So let's use hard hat to console log token ID and liquidity. First I'll scroll all the way up and import hardhat console log by typing import hardhat console sol. And then I'll scroll down back to the function create deposit. And then after all of the code executes, I'll console log token ID.
00:06:38.654 - 00:07:16.106, Speaker A: By typing console log, we'll say token ID is token ID and likewise for liquidity. Liquidity is liquidity. And then we'll log the variable liquidity. Okay, let's try compiling this contract. Open the terminal and then execute the same command again. MpX hardhack compile and the contract compiles successfully. So next, let's write a test script to execute the function mint new position and this will add liquidity to unisoft B.
00:07:16.106 - 00:07:48.002, Speaker A: Three I'm going to navigate to the test folder and to create a test. I'll copy one of the tests that exist and then we'll rename it to liquidity test JS. And first I'll remove some of the variables not going to need ref. I'll rename this test to liquidity examples. Swap example will be the contract that we're going to be deploying. It's called liquidity examples. We're going to need accounts, we're not going to need ref, but we do need USDC.
00:07:48.002 - 00:08:27.974, Speaker A: And inside the before block, this is the code that's going to be executed before any of the test runs. We will first deploy our contract liquidity examples. So I'll rename swap examples to liquidity examples. Next we'll get Dai and USDC. So I'll copy the color for Dai and rename it to USDC. We're going to be adding DAi and USDC as liquidity, but this default account does not have neither of them. So what we'll do is find whales that have DAI and USDC and then transfer it over to account steel.
00:08:27.974 - 00:09:32.294, Speaker A: I found the address for the Dai whale and USDC on etherscan. So I'll scroll up and then paste the addresses of the whales. We'll need to unlock the Daiwale and USDC so that we can send Dai and USDC to account zero. To do that, I'll copy the code example from unlocking accounts. So I'll open my file folder under test. I'll open unlock accounts test js and then copy this part of the code, paste it here and then remove this code and then I'll say const dial is equal to this will unlock the die whale and we'll do the same to unlock the USDC whale, paste it and replace die whale with USDC well, USDC well and usdc well. We'll send 100 die and 100 USDC and then we'll do a quick check, make sure that the die well has 100 die and the USDC well has 100 USDC and then transfer the amounts from die well to account zero.
00:09:32.294 - 00:10:06.766, Speaker A: For die amount, 100 die likewise for USDC. We're sending 100 USDC. Okay, so we're now ready to call the function mint new position. I'll remove all of the code and then type it mint new position async and inside here we'll call the function mint new position on the contract. Liquidity examples. Before we call the function mint new liquidity positions, we'll have to send the DaI and USDC to the contract. Again, these are the amounts that we're sending.
00:10:06.766 - 00:10:50.910, Speaker A: So I'll copy this, paste it here, and then we'll transfer both the DAI and USDC from account zero. So I'll copy these two code, paste it here. Instead of calling from die wheel, we'll call it from account zero. And the same over here for USDC account zero we're transferring to the liquidity example contract. So here I'll type liquidity examples. Likewise over here for USDC, we're sending it to the liquidity examples contract. Once we send DAI and USDC to the liquidity examples contract, we can now call the function mint new position.
00:10:50.910 - 00:11:55.282, Speaker A: So I'll type await liquidity examples mint new position after we add liquidity. If you look at the example code and scroll down whatever amount that was not added as liquidity we're getting a refund. So let's log the refund for die and for USDC. Back inside the test file, I'll type console log die balance after add liquidity is equal to await die balance of account zero address and we'll do the same to log the balance of USDC for accounts one. Usdc balance of after adding liquidity is await USDC balance of accounts zero address. Okay, let's run the test. I'll open my terminal, clear the logs, then type MPX hard hat test.
00:11:55.282 - 00:12:26.470, Speaker A: The name of the file that we're testing is test liquidity test Js and the test passed. So that means that we were able to add liquidity to uniswap b three for adding liquidity. Uniswap b three minted an nft with this token id. The amount of shares that it minted is over here. Some of the DAI that we tried to add as liquidity was refunded, so our account balance of DAI is greater than zero. However, it was able to add all of the USDC as liquidity.
