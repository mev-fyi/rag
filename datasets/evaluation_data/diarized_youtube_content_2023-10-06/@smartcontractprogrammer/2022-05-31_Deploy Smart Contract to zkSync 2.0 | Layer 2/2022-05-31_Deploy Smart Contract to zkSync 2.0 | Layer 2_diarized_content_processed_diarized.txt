00:00:00.330 - 00:00:36.834, Speaker A: Today we'll deploy a simple smart contract on Zk rollup zksync 20. The example for this video will be based off of the official documentation of zksync. Most of the commands that we type and the code that we're gonna try out is based off of these code and examples that you see on the official documentation. I've created an empty folder called hello zksync and this is where we will be putting our code code and all of the Npm packages that we're going to need. So first let's install some Npm package. I'll go back to the documentation and these are the two commands that we'll need to type. I don't have yarn I'm using npm.
00:00:36.834 - 00:01:20.582, Speaker A: So first I'll initialize the npm package by typing npm init y. This will create a package json next, let's install some packages. I'll copy this second command from the official documentation and then paste it here. And since I'm using npm instead of yarn, I'll change this first command to save Deb. Once all of the dependencies are installed we'll next create a hard hat config. So I'll create a new file called hardhat config ts. I'll go back to the documentation and copy all of this and then paste it here.
00:01:20.582 - 00:01:52.334, Speaker A: Hit Ctrl s to save and let's take a few minutes to look at what this configuration is. It looks like this configuration is using Docker. So I'm going to open my terminal and then make sure that Docker is enabled on my Linux operating system. I can enable Docker by typing sudo systemctl start docker let's see what else we need from this configuration file. I'll scroll down and it looks like we're going to need solidity 0.8 point ten and we might come back to this later. For now I think we're good.
00:01:52.334 - 00:02:25.254, Speaker A: So let's move on. Next we'll copy and paste a simple contract from the official documentation. So back in the documentation I'm going to scroll down and then copy this contract. And we'll need to put this contract inside the folder called contracts. Back inside my code editor I'll click on the file navigator and create a folder called contracts. And inside the contracts I'll create a contract name greeter soul and then paste the contract that we just copied over. Let's try compiling this contract.
00:02:25.254 - 00:03:11.218, Speaker A: So I'll open my terminal and then type mpx hard hat compile and the contract compiled successfully. Let's go back to the documentation and see what we need to do next. Back in the documentation it says that I need to create a deploy folder. And then if I scroll down a little bit inside the deploy folder, I need to create a file called deploy Ts and paste this command. So let's do that. I'll copy this code inside my code editor. I'll create a new folder called deploy and then inside it I'll create a new file called deploy Ts and then paste the code that we just copied.
00:03:11.218 - 00:03:44.450, Speaker A: Let's take a look at what the code does first. It looks like we'll need to put our private key inside here. So what I'll do is import our private key from a file called secret. So first I'll import fs from Fs. This is the file system library that is available for node Js. And then we'll get the secret, we'll call it const pride key is equal to fs. Read file sync inside here we'll need to put in the file path where our secret file is.
00:03:44.450 - 00:04:20.522, Speaker A: We'll store the secret file in the same directory as the project. So if I open my file navigator inside here, we'll create a file called secret and we'll paste our private key inside here, and it has to be prefixed with Zero X followed by your private key. I'll export my private key from my metamask and put it inside here, but obviously I'm not going to show it here. You do the same as well. So back in our scripts we'll read file sync from secret and this will return a buffer. And we need to turn this into a string. So I'll say dot, two, string.
00:04:20.522 - 00:05:11.694, Speaker A: Once we get the private key from the secret file, we'll paste it inside here by typing private key. Let's scroll down and see what else this script does. It loads the contract and then it says it deploys some funds to l two, and we'll need to do this in order to deploy the contract onto l two, the ZK roll up chain. However, we'll do this manually so we won't need this part of the code. I'll comment this out and then I'll scroll down and it looks like this is the code that's going to be deploying the contract and then logging the contract address. So the next steps are to make sure that we have some ETH on the Gk sync chain, and we can do that by bridging over some ETH from the testnet over to the Gk rollup chain and then executing this script to deploy the contract. What we're going to do now is send some e from the testnet here.
00:05:11.694 - 00:05:28.946, Speaker A: I'm using Gordy over to the Dk roll up chain. Gksync. Gordy on the Gorely testnet, I have 1.75 e, and I'll send 0.1 e over to the roll up chain. I'll click on deposit. Once metamask opens, I'll confirm the transaction.
00:05:28.946 - 00:05:57.610, Speaker A: And once the transaction confirms, we now have some e on zk sync Gordy chain. So we're now ready to deploy the contract onto l two. Okay, let's now execute the script. Deploy ts to deploy the contract onto zk rollup chain. Make sure that you have already pasted your private key inside secret. And then I'll open my terminal, and to deploy the contract, we'll have to type MPX hard hat. Deploy zk sync.
00:05:57.610 - 00:06:28.262, Speaker A: This is where the contract is deployed. Let's copy the address and see it inside the block explorer inside your browser. Head over to Zksync two testnet Zkscan IO. And then we'll paste the address of the contract inside this search bar, and then hit enter. Let's send the transaction to this contract. So I'll scroll down, fold the transaction tabs, scroll down further, and click on write contract, scroll down again. And we'll need to connect our wallet first.
00:06:28.262 - 00:07:00.686, Speaker A: So I'll click on connect wallet, click on Metamask, and the wallet is connected. But before we send a transaction, I need to do one other thing. We need to make sure that our network is configured to send a transaction to the Zksync testnet chain. If I open my metamask and then click on networks, you can see here that I don't have any Zksync testnet chain under the networks. So let's add a new network. What we'll need to do is fill this form with the Zksync testnet information. So to do that, we'll go back to the official documentation.
00:07:00.686 - 00:07:29.402, Speaker A: Inside the gksync documentation, this is the information that we'll need to fill. So the name of the network will be gksync alpha testnet. I'll copy this, paste it here, network Rpc URL. I'll copy it again, paste it here. Chain id is 280, I'll type in 280. Currency symbol will be e, and the block Explorer URL will be this. I'll copy this, paste it inside here, and then click on save.
00:07:29.402 - 00:08:08.200, Speaker A: And we now have dksync alpha testnet added to our network. Let's make sure that we switched over to this network. I'll scroll up and we can check here that our network is right now pointed to Dksync alpha testnet. So back in our contract I'll double check again that the network is right now Dksync alpha testnet. Then we'll finally send a transaction with the message hello zk sync 20 and then click on write and then I would like to confirm the transaction but I see an error saying gas limit must be at least 21,000. So we'll manually edit the gas limit by clicking on edit. Clicking on edit suggested gas free.
00:08:08.200 - 00:08:38.620, Speaker A: And inside here we'll type 21,000, then click Save, and then click Confirm transaction. The transaction was confirmed term let's check that the new message for the greed is hello ZK sync 20. So I'll scroll up a little bit. Actually I'll scroll down and click on read contracts, then scroll down again and you can see that the greet message is now hello ZK Sync 20.
