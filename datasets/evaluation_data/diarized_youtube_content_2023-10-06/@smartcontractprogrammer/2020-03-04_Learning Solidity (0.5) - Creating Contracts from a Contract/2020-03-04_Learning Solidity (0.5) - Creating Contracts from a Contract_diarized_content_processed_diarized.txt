00:00:00.650 - 00:01:05.474, Speaker A: Contracts can create other contracts, and it's useful in situations where you deploy the same contract many times with the same inputs, and it can also be useful when you want to manage many contracts from a single contract. So for example, let's say that you deploy the same contract 100 times with different parameters. One way to keep track of all of the contract that you just deployed is to store the addresses of the contract off chain in a database. Another way is to have a contract that creates other contracts and store the addresses of these contracts inside the contract that created them. So I'll show you two examples, how to create a new contract from inside another contract, and how to send ether at the same time that new contract is created. First, we need two contracts, a contract that's going to be deployed multiple times. This contract will represent a car, so it's going to store the model and the owner of the car.
00:01:05.474 - 00:01:41.370, Speaker A: And we'll initialize these two state variables using a constructor. In one of the examples, I'm going to show you how to send ether to this constructor. So I declare the constructor as payable. So that completes the code for the contract that's going to be deployed multiple times. Next, we'll create a contract that's going to create the contract above. I'll name this contract car factory. The function create will take two parameters, the owner and the model of the car that we're going to pass to the car contract.
00:01:41.370 - 00:02:46.770, Speaker A: And to create a new contract inside the contract, you start with the keyword new and then followed by the contract that you want to create. In this case, we're going to create the car contract, and we'll pass the parameter model and owner to the constructor of the car contract. So this code here will create a new contract and call the constructor of the car contract passing in the parameters model handowner and if you want to assign a variable to this contract, you first start with the type of the variable. In this case it will be car, and we'll name the variable also car. So this is how you create a new contract inside another contract by using the keyword new. Next, I'm going to show you how to create a new contract and send ether with it. And we can send ether to this car contract since it's marked as payable.
00:02:46.770 - 00:03:24.080, Speaker A: First, I'm going to copy this example as our starting point and rename this function as create and send ether. The inputs will be the same as the example above. And for this example, we'll send ether to this function. So we'll declare it as payable. Now the syntax for how to send ether to a new contract is a little bit confusing. You first wrap this new car in a parentheses like this. And to send ether you call the dot value function.
00:03:24.080 - 00:03:56.360, Speaker A: And inside the parentheses, you pass in the amount of ether that you're going to send to this contract. And for simplicity, we'll just forward all of the ether using message value. So this is the syntax for how to send ether to a new contract. And this syntax might look a little confusing. So the way I remember this syntax is like this. Let's say that a contract has a function that takes in xyz as input. And the way you can call the function is like this.
00:03:56.360 - 00:04:42.600, Speaker A: And you can send one ether to this function by using dot value followed by the amount of ether that you want to send to this function. Now you can imagine that when a new contract is created, the constructor, which is a special function, is called. And you can send one ether to the constructor of the contract by calling the dot value function. And the way you would call the constructor is by using the new keyword. And notice that the syntax that we just arrived is similar to the valid syntax above. So that's how I remember the syntax for how to send ether to a constructor. I hope that made sense.
00:04:42.600 - 00:05:43.290, Speaker A: So that completes the code for how to send ether to a new contract. Now, earlier I said that a contract that creates another contract like this one here, is useful in situations such as when the contract that is getting deployed multiple times uses the same inputs and also when you want to keep track of all the contracts that's been deployed. So I'm going to illustrate those two situation using this contract. Let's say that the owner of the car should always be the address that created the car contract. So here the car contract should always belong to the car factory contract. So for the owner parameter, we'll pass in the address of the car factory and we'll remove the owner parameter. So now when a new car is created, the owner of the car will always be this car factory contract.
00:05:43.290 - 00:06:37.770, Speaker A: So that's the example of how you would create a contract with fixed inputs. Moving on, I'm going to show you an example of how to use this contract to keep track of the individual contracts that's been deployed. So we'll create an array of car contracts and name it cars. And once the car contract is created, we'll store an array of cars and that's it. So let's now deploy these contracts and I'll show you a demo of calling these two functions here. I have the car factory contract deployed and we don't need to deploy this car contract. Since this car factory contract, when we call the function create, it will deploy the car contract.
00:06:37.770 - 00:07:55.914, Speaker A: I'm going to create a Toyota Corolla and Tesla Cybertruck. So when we call the create function, it deployed a car contract. But we don't need to remember the address of the car contract since the addresses are stored in this contract and we can get the addresses of the car contract by accessing the cars array. The Toyota Corolla will be stored at index zero and we get the address of the contract back. Now to check that the model inside the car contract is actually a Toyota Corolla, what we'll have to do is copy this address and then get the car contract at the address. And it is indeed Toyota Corolla. And we can check that the second car is a Cybertruck again by copying the address, getting the car contract at the address and then checking the state variable model which is equal to Tesla Cybertruck.
00:07:55.914 - 00:08:26.460, Speaker A: So that's how you create a contract, using another contract with the keyword new and you can send ether to the contract you're about to create by using dot value and then passing in the amount of ether. Well, that's all I got for this video. Any feedback or questions, please put them in the comments below. Or you can send me your message on discord where the links are in the descriptions. Thanks for watching, have a nice week and I'll see you in the next video.
