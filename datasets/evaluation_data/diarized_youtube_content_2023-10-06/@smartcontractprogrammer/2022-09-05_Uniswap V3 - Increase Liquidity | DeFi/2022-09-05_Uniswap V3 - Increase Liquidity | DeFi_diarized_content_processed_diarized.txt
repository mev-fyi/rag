00:00:00.170 - 00:00:29.554, Speaker A: Today we'll be going over how to increase liquidity in unisoft B three. And for this example, you'll be using the code example from the official documentation of unison B three. So the first thing that I'll do is scroll down and then copy this code. And then inside my code editor, I'll paste the code and we'll paste the code inside a contract that we've been working with. And the contract is called liquidity examples. So I'll click on it and scroll down and then paste the code example. Let's take a look at the code that we just copied.
00:00:29.554 - 00:00:57.886, Speaker A: This function will take in three parameters. Token id, amount zero to add, and amount one to add. For our code example, we're storing token ID inside the contract. So I'll remove this from the function input, also remove the comments. And then next, I noticed that this code is not pulling in our tokens. So the first thing that we'll do is transfer the token from message sender into this contract. So I'll scroll up and then copy this code.
00:00:57.886 - 00:01:42.334, Speaker A: So from this code example, we know that amount zero and token zero is die amount one and token one will be USDC. So I'll copy the code for safe transfer and then we'll paste it here. So we'll safe transfer from token zero will be die from message sender into this contract. Address this further amount, amount, add zero, and likewise token one will be USDC. So we'll do that. Say safe transfer from the token USDC from message sender to this contract. Amount will be amount at one.
00:01:42.334 - 00:02:28.278, Speaker A: Next, we'll need to approve the nonfungible position manager to pull in token from this contract. So we'll need to call approve. I'll scroll back again and copy some code and then we'll modify it, copy, scroll down and then paste it here. We will start with die approve the nonfungible position manager and the amount that we're going to approve is amount at zero. Then we'll do the same for USDC. Approve the nonfungible position manager to spend USDC fur amount at one. Okay, the next step is to prepare the parameter to pass to the I nonfungible position manager.
00:02:28.278 - 00:03:12.698, Speaker A: The token ID will be token ID that is stored inside the state variable inside this contract. Amount zero, desired amount zero we desire to add will be amount add zero and likewise for amount one, minimum amounts of tokens to add. For this example, we will just set it to zero and deadline set it to block timestamp and then we call the function increase liquidity passing in the parameters that we just prepared over here. Calling this function will return three outputs. The liquidity that was minted for adding amount add zero and amount add one, and the actual amounts that were added amount zero and amount one. After we call the function increase liquidity, let's console log the outputs. So I'll type console log.
00:03:12.698 - 00:03:44.020, Speaker A: Liquidity is liquidity and we'll do the same for amount zero and amount one as well. Amount zero, amount zero and amount one. Log amount one. Okay, let's try compiling this contract. I'll open my terminal and type Mpx hard hat compile. Okay, the contract compiled. So let's now write a test to execute this function.
00:03:44.020 - 00:04:42.050, Speaker A: Increase liquidity current range. So I'll open the file called under test liquidity test Js and since we're going to be increasing liquidity, first I'll copy the code for mint new position and then paste it here. I'll rename this to increase liquidity current position for the amount of die to add. For this example, we'll make it different from the amount that we put in when we added liquidity when we minted a new position. So I'll say 20 and likewise we'll say 20 USDC. Notice that die has 18 decimals and USDC has six decimals. We'll use account zero and approved the liquidity example contract.
00:04:42.050 - 00:05:17.534, Speaker A: So type approve approve liquidity example contract to spend our die amount that we're going to be adding. And likewise for USDC, we'll approve the contract to pull in our USDC. And then the function that we're going to be calling is liquidity. Examples increase liquidity current range. And for the input, we'll need to pass the amount of token zero to add. Token zero is die. So I'll say die amount and token one is USDC.
00:05:17.534 - 00:05:51.806, Speaker A: So I'll say USDC amount. Okay? And then we can remove this code. And let's just scroll up and double check that we have enough USDC and die to be able to increase liquidity. So I'll scroll up. Right now we're transferring 100 die and 100 USDC from the whale to account zero. Since we're also increasing liquidity, let's increase this amount to 1000 die and 1000 USDC. Okay, I think we're now ready to run the test.
00:05:51.806 - 00:06:24.578, Speaker A: So let's open our terminal again, clear the logs. Then we'll run the test by typing MPX hard hat test. The name of the test is test liquidity test Js. Okay, our test passed. Let's take a look at our logs. So the call to the function increased liquidity current range passed. And before it passed, recall that inside our contract, we wrote some console log to log the liquidity amount zero that was added and amount one that was added.
00:06:24.578 - 00:06:44.730, Speaker A: Back inside our terminal, we can see the logs over here. The amount of liquidity that was added, amount of die that was added, and amount of USDC that was added. Can also check here that USDC has six decimals, so we were able to add 20 USDC into the current range.
