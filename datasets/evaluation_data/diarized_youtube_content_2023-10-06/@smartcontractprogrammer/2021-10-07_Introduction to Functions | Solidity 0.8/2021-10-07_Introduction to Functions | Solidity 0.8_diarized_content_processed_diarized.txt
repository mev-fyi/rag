00:00:00.330 - 00:00:42.794, Speaker A: I'm going to show you the basic syntax for writing a function in solidity. You're going to see some keywords that I have not explained it yet, but don't worry, I'll make another video explaining all of the details. In this video I'm going to show you the basic syntax for writing a function. So for the first example, we'll write a function that adds two numbers. It's going to take in two inputs, and it's going to return the sum. To define a function inside a contract, we start with the keyword function and then the name of the function. We'll name this function add and it's going to take in two inputs of type un we'll name it x, and the second input un, we'll name it y.
00:00:42.794 - 00:01:13.026, Speaker A: This function will be external. External means that when we deploy this contract, we'll be able to call this function I'll make another video explaining what external is in details. The next keyword that you have not seen yet is called peer. Peer means that this function is read only. It does not write anything to the blockchain. Again, this keyword will be explained in another video as well. This function is going to return the output of the two inputs x and y.
00:01:13.026 - 00:01:52.560, Speaker A: We declare the type of output by saying returns parentheses. We're going to be adding two un. So the data type that we're going to be returning is also going to be un and this is where we write our code for the function. We add two numbers and return the sum. So we simply say return x plus y. Semicolon let me give you another example of a function. This time we'll subtract two numbers, so we'll say function sub it's going to take in two inputs of type un, so we'll say un x uint y.
00:01:52.560 - 00:02:33.098, Speaker A: The function will be external. Again, meaning that we'll be able to call this function after we deploy the contract. It's going to be peer, meaning that this function will be read only and it's going to return a uint the difference of x and y, and inside the parentheses we'll say return x minus y. Okay, let's now compile this contract, deploy it, and then I'll call the function add and then sub to compile the contract. I can click on this validity tab and then compile. But there's also a shortcut. When you're inside the editor, you can just press Ctrl S and it will compile the contract.
00:02:33.098 - 00:03:00.020, Speaker A: The next step is to deploy the contract and then call the functions so we'll deploy the contract, scroll down, expand the contract. And for the first example, we'll call the function add. We'll add one and two. We expect output to be three and we get three for subtracting. We'll subtract three and one and we expect three minus one to be equal to two. We call sub and we get the output two.
