00:00:01.530 - 00:00:52.478, Speaker A: Smart contracts can log that something has happened on the blockchain by firing events. Applications can be notified when an event is emitted instead of constantly monitoring a contract on a blockchain for state changes to occur. This is like YouTube. If you subscribe to a channel, you don't have to repeatedly visit the channel to check if a new video was uploaded it recently. You get notified when a new video is released. In this video, we're going to go over how to write and fire events using solidity, and we'll also go over how to get past events that are already on the blockchain and how to subscribe to new events using a library called web3 Js. To define an event, you start with the keyword event followed by the name of the event.
00:00:52.478 - 00:01:32.362, Speaker A: In this case, I'm going to call it dog. Inside the parentheses you can pass the data that you want to log onto the blockchain. Here I'm going to log the sender of a transaction with some message and you can also create events where no parameter is passed. Next, I'm going to show you how to fire an event. So first I need to create a function and inside the function we're going to emit the event. First we'll create a public function called fire events. You can log an event onto the blockchain by starting with the keyword emit followed by the name of the event that you want to log.
00:01:32.362 - 00:02:03.538, Speaker A: In our case, we're going to fire the log event with the event. We're also going to log the sender of this transaction with the message hello world. And you can also fire multiple events. So here I'm going to fire the same event again with a different message followed by a different event called another log. Let's compile and deploy and see these events in action. Execute the function fire events and click on the transaction log. Inside the transaction log.
00:02:03.538 - 00:02:43.158, Speaker A: Search for the keyword logs. That's where you will find all of the events that was fired when this function was called. In our case, you can see here that the event log was fired twice followed by the event another log. Furthermore, you can see here that the log event was fired with the parameters that we passed in. In this case, sender is the sender of the transaction and the message was hello world which is the event that was fired. Here. These logs will be stored on the blockchain, but smart contracts won't be able to access these logs.
00:02:43.158 - 00:04:03.500, Speaker A: So one use case of firing events is to record that something happened on the blockchain and it is cheaper than storing data on a smart contract. Past events are all stored on the blockchain, but oftentimes you're not interested in all of the events and you want to be able to quickly search for specific events, such as searching for all log events where the sender is a certain address. That's where the keyword indexed comes in. By using the keyword indexed on a parameter, you can quickly search for events where the parameter equals a certain value. For example, if this event was recorded on the blockchain 100 times by different senders, and you want to find all of this event triggered by a certain sender, one way to do it is to get all of the logs and then check that the sender is equal to the address that you're looking for. But since we're using the keyword indexed here, all we have to do is send a search query to the Ethereum full node asking for all logs where the sender is equal to a certain address. In response, you'll get all of the logs where the sender is equal to that address.
00:04:03.500 - 00:04:44.406, Speaker A: Let's see an example using a smart contract on the blockchain. So I wrote a script in node Js to get past events from a contract on the blockchain. For this script, I chose a wellknown contract called the die stablecoin, since it's pretty active on the Ethereum blockchain. In short, the diastable coin is a cryptocurrency where the price stays around $1 per coin, hence the name stablecoin. How it maintains price stability and why it's useful is a video for another day. So now let's go over the code line by dine. First, we import web3.
00:04:44.406 - 00:05:36.210, Speaker A: Web three is like a bridge between the blockchain and other programming languages. It allows us to send transactions and get data from the blockchain using a program like JavaScript and Node Js. Next, we import the Abi of the Dai stablecoin. ABI stands for application binary interface. The ABI allows different programs to interact with the smart contract on the blockchain. In our case, the ABI of the DAI stablecoin will allow us to get all of the events fired by the contract of the DaI stablecoin. I got the ABI of the DAI stablecoin by going to Etherscan IO, searching for the contract by the address and clicking on contract, and then scrolling down to contract.
00:05:36.210 - 00:06:13.550, Speaker A: ABI. In order to use web3, we need an Ethereum full node. That means that we need to run the Ethereum software and download all of the blockchain, but we don't have time to download all of the blockchain. So that's where Inferior IO comes in. By signing up to inferior IO, it allows you to quickly access the Ethereum blockchain without running your own Ethereum software. Next, we initialize web3 by passing in the URL of our Ethereum full node. This is the address of the contract of the die stablecoin.
00:06:13.550 - 00:07:05.500, Speaker A: This is the function that will be run when we execute the script inside the function. We first get the latest block. Next we load up the contract of the die stablecoin using the ABI that we copied over from Etherscan IO. And finally we search for the transfer event that was fired in the last 100 blocks and then print out the logs. Let's execute this script, open your terminal, and then type in node followed by the path of the script. In this case, it'll be under source and the file name is called getpast logs. Once you get the response, you can check that the name of the event was transfer and these parameters were logged with the event.
00:07:05.500 - 00:08:09.162, Speaker A: Earlier I mentioned that the parameters of an event can be indexed so that you can quickly search for an event where the parameter equals a value that you're looking for. Looking at the code for the Dai stablecoin contract, you can see here that the transfer event uses the keyword indexed on few of the parameters. Since the parameter named DST is indexed, we can quickly search for events where DST is equal to this address from the response. We'll only print out the DSD parameters so that we can quickly verify that all of the DSD parameters that return is equal to the address that we provided. Execute the script once you get the response. You can see here that all of the events contain the address that we provided for the DST parameter. So I just showed you how to get events from the blockchain and how to filter them by index parameters using web3 Js.
00:08:09.162 - 00:08:47.718, Speaker A: Next, I want to show you a demonstration of how to subscribe to events. So here's a script to subscribe to events. So here's the code to subscribe to a contract, and we're going to be using the die stablecoin contract. Again, the top part is mostly the same from the last script. Inside the main function you initialize the contract and subscribe to the event transfer. So when the transfer event is emitted, this function will be called inside the function. If there's an error, we're going to log it, and else we're also going to log the event that was fired.
00:08:47.718 - 00:09:40.490, Speaker A: Similar to how you can filter out past events by index parameters, you can also filter out incoming events by using index parameter. So here we're saying that we only want to listen to the transfer event where the sender is equal to this address, execute the script, and wait for something to print out. When the transfer event where the sender is equal to this address is recorded onto the blockchain, you'll see the response printed out into the terminal here. I've been running the script for a few minutes and you can see that some of the logs were printed out. I'll upload this code onto GitHub and provide the links in the descriptions below, so feel free to play around. In this video I showed you how to write events in solidity. You can pass in parameters into an event, and three of the parameters can be indexed.
00:09:40.490 - 00:10:02.060, Speaker A: By indexing a parameter, you'll be able to quickly filter out past events and using web3 Js, I showed you several demos of how to get past events and how to subscribe to incoming events. That's all I got for this video. Links in the code will be in the description below. Thanks for watching and I'll see you next time.
