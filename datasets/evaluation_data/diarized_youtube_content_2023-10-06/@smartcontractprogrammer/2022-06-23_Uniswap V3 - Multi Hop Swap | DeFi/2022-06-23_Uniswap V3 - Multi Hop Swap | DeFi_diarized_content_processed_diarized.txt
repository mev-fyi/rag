00:00:00.490 - 00:00:32.162, Speaker A: In the previous video, I showed you how to do a single swap trade on unison B three using solidity. In this video, I'm going to show you how to do a multi hop trade. So just a quick review. What we did in the last video is that we wrote solidity code to do a swap from E to Dai, and it's called a single hop because it only trades in one pool. But in this video, I'll show you a multi hop swap. So we'll trade from e to USDC and then from USDC to die. I'll be following the code from the official documentation for multi swaps.
00:00:32.162 - 00:01:10.206, Speaker A: Now, similar to a single hop swap, in multi hop swap, there are two variations of the swap, exact input and exact output. Exact input means that we'll be trading the exact amount of input tokens for an unknown amount of output tokens. We're trying to spend all of our input tokens. On the other hand, exact output means we're trying to get back an exact amount of tokens out. We send some token to uniswap b three and try to get the exact amount of tokens out. So let's take a look. So I'll scroll all the way down to copy the code example, and then I'll copy this code example back inside my code editor.
00:01:10.206 - 00:01:38.346, Speaker A: We'll pick off where we last stopped. So we have some code for exact input single and exact output single. We'll merge our code that we just copied into this contract. So first I'll paste the code that we just copied, and then next I'll remove the comments and then merge the code. Okay, so I merged the code. You can see here that now I have the two examples from the previous video. Swap exact input single, swap exact output single.
00:01:38.346 - 00:02:12.002, Speaker A: And I've also merged the new code for this example. Swap exact input multi hop and swap exact output multihop. In this video we'll be trying out these two code and writing some tests. First, let's try compiling the contract. So I'll open my terminal, then clear the logs, and then type mpx hard hat compile and the contract compiled successfully. So let's go back to our example code and make some modifications. We'll start with the function swap exact input multi hop.
00:02:12.002 - 00:02:35.746, Speaker A: For this example, we'll swap from WEF to USDC, and from USDC to die. We trade from weft to USDC, and then from USDC to die. That's two trades. So that is why this is called a multi hop. This example is called exact input because we're taking in the exact amount of tokens that we're selling. In this case, amount in. We're selling all of this to get some unknown amount of die.
00:02:35.746 - 00:03:06.120, Speaker A: So that is why it's called exact input. We're spending the exact amount of input specified by the input amount in the code example from the Uniswap documentation trades from Dai to WEF. However, for this example, we'll trade from WEF to die. Again, the reason is because we don't have die, but we can easily get WEF since our account has some eve. First, we'll pull in some WEF into this contract. So I'll change die to WEf nine. WEf nine is already declared over here.
00:03:06.120 - 00:03:38.270, Speaker A: Once we pull in some wef. Next, we'll approve the swap router to be able to spend the weft that we pulled into this contract. So I'll replace this die with WEf nine. Approving the swap router to spend amount in. Amount in is the amount of weft that we just pulled in. Next, we need to prepare the parameters for the trade. The path that we're going to take is from Weft to USDC and from USDC to die.
00:03:38.270 - 00:04:05.734, Speaker A: Now, instead of using this pool fee that we defined over here, which will be 0.3%, we'll take a look at the uniswap website and figure out which pool to use. Head over to info uniswap.org and then here you'll see some pool information. First, we're trading from ETH to USDC and it seems like ETH to USDC pool for a pool fee of 0.3% has the most tbl. So we'll use this pool to trade from ETH to USDC.
00:04:05.734 - 00:04:32.478, Speaker A: Let's do that right now. So for trading from weft to USDC, we'll use the pool with the fee 0.3 Un 24 3000. Okay, next, let's try to find a pool that we're going to be trading from USDC to die. We're looking for a pool with low fee and high Tbl. Back inside the Uniswap website, we can see here that USDC to die with the pool fee of 0.1% has the highest Tbl.
00:04:32.478 - 00:04:52.742, Speaker A: So we'll use this trade to trade from USDC to die. Back inside the code, we'll set the pool fee from USDC to die to 0.1%. That will be un 24 100. 0.3% is 3000. So 0.1% is 10 starting with a one.
00:04:52.742 - 00:05:41.420, Speaker A: So that will be 100 hit save and we'll keep the rest of the code the same. So what we're doing here is we transfer WEF inside to this contract. We prepare some parameters, parameters to trade from WEF to USDC and from USDC to DAI, and then execute the trade by calling exact input on the swap router passing in the parameters that we just passed. Let's write a test to execute this function. Swap exact input multi hop I'm going to open the test file and we'll work on the test that we wrote in the previous video. Swap test js. I'll copy the example from the previous video, paste it here, I'll uncomment this and I'll comment out all of the other code that we don't want to run in this video.
00:05:41.420 - 00:06:18.126, Speaker A: I'll rename this test to swap exact input multi hop. And the function that we're going to be calling is swap exact input multi hop. We'll trade one E for maximum amount of die that we can get back. So from the ETH we'll convert it to WEf by depositing it into the WEF contract and then approving the swap example contract to spend the one e. Then we'll execute the trade to trade from WEf to die. Calling the function swap exact input multi hop. Once this function executes, we'll have some die.
00:06:18.126 - 00:06:59.166, Speaker A: So we'll log the amount of die that we got back, save the file, and let's execute the script. I'll open my terminal, clear the log, and then I'll execute the script by typing mpx hard hat test swap test js looks like I made a mistake inside the code. So let's go back and fix the code. On dying 99 I declared Wef, but it should have been declared as ref nine. Back inside the code, I'll go to line 99 and redeclare WEf as WEf nine. Okay, let's try compiling the contract. Mpx hard hat compile okay the code compiled.
00:06:59.166 - 00:07:29.014, Speaker A: So let's now try running the test. I'll clear the logs and then execute the test command again. Mpx hardhat test test swap test Js our test passed and notice that we got some die back. So that was an example of swap exact input multi hop. It sells all of the tokens that we provide and gives us back the token that we wanted to buy. For the next example, we'll take a look at swap exact output multihop. We'll trade from weft to USDC and then from USDC to Dai.
00:07:29.014 - 00:08:04.934, Speaker A: Unlike the last example where we sold all of the tokens swap exact output. Multihop will try to get the exact amount of tokens out, spending a maximum of amount in maximum. It uses the minimum amount of tokens that we provide to get amount out of the token. In this case, this will be dai. Again, the example code that we copied from uniswap trades from die to WEF. But for our purpose, we'll trade from WEF to die. So first we'll pull in weF, wef nine, and then approve the router wef nine and then I'll scroll down.
00:08:04.934 - 00:08:41.870, Speaker A: Next, we prepare the input to be passed to the function exact output. Now, unlike the example for exact input, for the path for exact output, the path of the trade must be encoded in the reverse order. We start with f traded to USDC and then get die. So we must encode this parameter in the reverse order starting from die. So the output token will be die. We'll get the die by trading with USDC, and we'll get USDc by trading it with WEf nine. In other words, once we pull in WEF inside this contract, we'll take this wEF, trade it for USDC.
00:08:41.870 - 00:09:05.306, Speaker A: Once you have USDC, we'll trade this USDC for die. Okay, next, let's set the pool fees trading from USDC to die. You can see that this pool has the lowest fee of 0.1% and has the highest TBO. So we'll be using this pool again from USDC to die. Our pool fee will be 0.1%, that will be un 24 100.
00:09:05.306 - 00:09:41.110, Speaker A: Next, let's find a pool for WEF to USDC back inside the Uniswap website. To trade from ETH to USDC, we'll use this pool which has a high enough TBL and the pool fee is 0.3%. So we'll set this pool fee to un 24 3000. Once we prepare the parameters, we call exact output on swap router. Passing in the parameters, this function will return the amount of weft that was used to get amount out. Amount of die. Let's say that we put in one ef into this contract and we want 100 die by calling this function.
00:09:41.110 - 00:10:18.562, Speaker A: For example, let's say that it only spent 0.5 e, then amount in will be 0.5 e. If uniswap b three didn't use all of the tokens that we pulled inside this contract, then we'll refund the user. So if amount in is less than the amount in max, that's the amount of token that we pulled in into this contract. Then we'll need to refund the user. First, we'll reset the approval on the swap router weft nine, and then transfer the remainder wef back to the user safe transfer from wef nine for the remaining amount amount in max minus amount in okay, hit ctrl s to save.
00:10:18.562 - 00:10:49.180, Speaker A: Let's try compiling this contract. I'll type mpx hard at compile the code compiles. So let's now write the test to execute the function swap exact output multihop. So I'll open the test file. I'll copy this. Actually, I'll copy the example from the previous video. Swap exact output single scroll down and then paste it.
00:10:49.180 - 00:11:35.478, Speaker A: Comment the previous test, uncomment this code and we'll rename it to swap exact output multi hop. For this example, we'll put in one e and try to buy 100 die. Whatever amount of weft that was not spent will be refunded back to our account. So first we'll deposit ETH to get weft and then approve the contract to spend the weft. That is what it's doing over here. Next we'll execute the function swap exact output multi hop passing in the die amount and the weft amount in max. Weft amount in max is one e die amount out is 100 die, and then afterwards we'll print out the die balance.
00:11:35.478 - 00:12:07.970, Speaker A: Since we're going to be buying 100 die from uniswap, this balance should turn out to be 100. Let's execute this test, open my terminal, and then we'll run the test again. And the test passed and we got 100 die back from the trade. That was an example of multi hop trades on uniswap b three use swap exact input multi hop where you want to do a multi hop trade, and also sell all of the tokens that you put in. On the other hand, if you have a specific amount of tokens that you want to buy, then use swap exact output multi hop.
