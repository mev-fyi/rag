00:00:00.360 - 00:00:28.642, Speaker A: In the previous video we went over a basic example of chaining functions. In this video I want to take one step further. We will modify the previous example to create a chaining function and call the OpenweatheraPi. Here are the things that we'll do in this video. We'll first play around with the open weather API. Next we'll modify calculation example js and then create the chaining functions for weather's API. And then we'll modify the functions request configuration file.
00:00:28.642 - 00:01:01.450, Speaker A: We'll set up some environment variables and then we'll execute open weather API code using chaining functions. To begin with, let's write some code and we'll learn how to call the open weather API. So I'll create a file called weatherapie example js and here are the things that we'll do. For this example, we'll first sign up to openweathermap.org and then get an API key. We'll execute this script to get some weather data for some city and then we'll check the weather on Google. So to start off with I'll click on this link.
00:01:01.450 - 00:01:33.006, Speaker A: This will take me to openweathermap.org comma. I'll sign in and once I'm signed in I'll navigate to API keys. You can do this by clicking on your logged in name and then clicking under my API keys. We're going to create a new API key so that we can use in our chaining functions. I've already created an API key called chain link functions. If you wanted to create your key you would type some name over here for example let's say chain link example and then click on generate and you can see over here that a new key was created.
00:01:33.006 - 00:02:10.640, Speaker A: For this example I'll be using this key so I'll copy this and back inside my code editor we'll first store this API key so say const API key is equal to again. Next I'll write a simple script to get some weather data. So say async function main and then we'll execute this function. For this example we'll get the weather data for London. So I set the latitude and longitude to point to London. Next we'll define a URL that we need to call to get some weather data. The important thing to notice here is that we'll need to encode our parameters inside this URL.
00:02:10.640 - 00:02:58.510, Speaker A: The parameters that we'll need to encode are latitude, longitude and the API key. We'll send the HTTP get request by using fetch so say const rest is equal to a weight fetch URL, the response will be in JSON. So say const Json is equal to v eight rest json and then we'll console log this json. Console dot log jSon. Okay, let's execute this script inside the terminal I'll type node weather API example JS. Okay, and we got our response back. So the location that we query is London and the temperature in London says over here is 6.18.
00:02:58.510 - 00:03:23.530, Speaker A: Let's see what the Internet says about the temperature in London. The temperature in London is seven degrees celsius. The Internet says seven degrees celsius. Open weather API says 6.18 degrees celsius. Okay, so that was an example of executing this open weather API. Next we'll modify the calculation example js and then create a chaining function to execute openweather API.
00:03:23.530 - 00:04:09.732, Speaker A: So to start off with, I'll copy this calculation example. This was a chain link functions example that we went over in the last video. I'll copy this, paste this, and then I'll rename this to weather func js. I might have to look at this code later, so we'll write our code below it over here, say weatherapie example. And later we'll remove this code and the other code that I'll look at to create a chaining functions that will create the open weather API is a file called API request example js. Okay, so the first thing that I notice is that it's getting the arguments to execute the function. For the argument to pass through our function, we'll be passing in the latitude and longitude.
00:04:09.732 - 00:04:43.328, Speaker A: So going back to API requestexample js, I'll copy this part of the code and then paste it here. We'll need two inputs. The first one I'll call it bat batoto, and the second one I'll call it lon for longitude. Next, we'll need to specify which input to consume. This input comes from the file called functions request config. So if you look over here we have a array called ARG's and the chaining functions is going to get the inputs from here to this array. We'll append our inputs.
00:04:43.328 - 00:05:13.726, Speaker A: So far this array has, let's see, 123456 elements. So we'll come back to this later. But to this arguments array we'll put our latitude and longitude up to here. It has six elements. So this will be the 7th and the 8th element. Okay, so going back to our code, the 7th element in the ARG's array will contain the latitude to access the 7th element. We'll need to get the array element at index six.
00:05:13.726 - 00:05:51.416, Speaker A: The longitude will be stored in the 8th element in the ARG's array. And to access this we will need to access the ARG's array at index seven. Okay, so we now have latitude and longitude. Let's move on to call the open weather API. Remember that we needed the API key, so when we call the chainlink functions to execute a request to openWeatherapi, we somehow need the Openweatherapi key inside here. And to do this, we'll store our open weatherapi key inside secrets. So back inside the functions request configuration file, if you look over here, there's a field called secrets.
00:05:51.416 - 00:06:54.172, Speaker A: Inside here we'll store our open weather API key. So I'll copy this code above and then paste it. I'll call the secret openweatherapikey and we'll store this in process m openweatherapi key. Okay, what is this double question mark operator? What this double question mark operator does is it defaults to the second option if the first option is either null or undefined. Okay, so inside this configuration file, we define the environment variable called open weatherapi key, which we will be using inside our chaining function called weather function js. So I'm going to modify this code and say if secrets dot open weatherapikey, if this does not exist, then you'll throw an error called open weatherapikey is not set. So at this point we have the latitude, longitude and the open weather API key.
00:06:54.172 - 00:07:28.622, Speaker A: The next thing that we'll do is actually call the open weather API. So going back to our example, let's copy this URL and then paste it here. We have the latitude, we have the longitude, and this API key we don't have. So let's define a temporary variable. Let's call this const API key is equal to secrets dot open weather API key. Okay, so we now have the URL to call, but how do we actually make the call inside chaining functions, let's go back to the example of API request. Example js.
00:07:28.622 - 00:08:02.100, Speaker A: The way it makes a request is by calling the function functions dot make HTTP request. So I'll copy this code and then paste it here. We're only going to make one HTTP request, so I'll just call this request. And the URL is the URL that we set above headers we don't need. Okay. By calling this function, it will create a promise. So to get the response we will need to call await, so say constraint rest is equal to await request, we'll throw an error if the response has some kind of error.
00:08:02.100 - 00:08:51.322, Speaker A: So say if rest error, then we'll console log there console dot error, rest dot error. And we also stop the script over here by throwing an error, throw error, let's say request fail. Otherwise, if there was no error, then it will have some kind of response and rest dot data. So let's console log this console dot log say response. And now, where is the temperature stored inside this data? Well, going back to our example, the temperature for the data is stored under main main dot temp. Also notice that temperature is in decimal. So we'll need to modify this number to store this number into solidity.
00:08:51.322 - 00:09:30.154, Speaker A: Okay, so temperature const temp is equal to rest. Data will contain this data, and from here you'll need to access main temp. So say main dot temp. Again, this temperature is in decimal and it can both be positive and negative. When we return this temperature to the solidity contract, let's store this as int 256. So to do this, you'll need to call this function functions encode. And instead of encoding it as un 256, we'll encode it as int 256.
00:09:30.154 - 00:10:08.374, Speaker A: So I'll copy this code, then paste it here, and then here I'll say encode 256. Math round temperature temperature had two decimal places, so we'll multiply by 100 to make it into a whole number. And then we'll round cut off the decimal part and we're storing the temperature as int. Since the temperature in Celsius can both be negative and positive. The last part is to delete the code over here. This was the code that we copied over from calculation example js. Okay, so that completes our weather functions.
00:10:08.374 - 00:10:43.864, Speaker A: This is the code that will be executed with changing functions. I made a mistake inside weather functions js over here, I need to check that open weather API key is not set. So here I need to say if secrets openweatherapi key is not set, then throw there. Okay, so we created a weather function js. The next step is to configure functions request config js open this. Let's start over here. The file that we'll be executing is called weather funk js.
00:10:43.864 - 00:11:31.194, Speaker A: This is a JavaScript code that we just wrote. Okay, and the other thing, we set the open weather API key over here. And the last thing is we'll put our inputs for latitude and longitude of London inside here. The latitude and longitude of London is stored inside our first example. So I'll copy this latitude and longitude and then paste it here and I'll copy this latitude, paste it here, copy the longitude, and then paste it here. Okay, so when we execute this weather function, dot j s, the chaining functions is going to get the latitude and longitude from this arg's array, and it's going to read the last two elements, which will be this, these two. The first one will be latitude and the next one will be longitude.
00:11:31.194 - 00:12:08.844, Speaker A: Okay, the next step is to set up Openweatherapi key inside our environment variable. And we'll encrypt our environment variable by using these commands. The first command I'll execute is this one. This command will set the password to unlock my encrypted file. So say mpx Bmb inc setpw and then type my password in here. Okay, once the password is correct, next, I'll set the environment variable by executing this command, say mpx EMb Inc set. Okay, the environment variable that we want to set is open weatherapikey.
00:12:08.844 - 00:12:45.526, Speaker A: And the value for this I'll use this API key, paste it, and then hit enter. Once the open weather API key is set, the next thing that we'll do is execute the script. We'll start off by first simulating our script. Make sure that it runs correctly before we actually execute it on Polygon Mumbai. Okay, so let's try simulating our weather functions. Js I'll copy this command, and inside my terminal I'll paste it. Okay, and you can see over here that the simulation ran successfully.
00:12:45.526 - 00:13:35.876, Speaker A: The next step is to actually execute our script on Polygon Moonbyte. First I'll set some environment variables. The contract that we deployed in the last video, this contract that we deployed is called contracts functionconsumer Sol. What this contract does is it stores the response from chaining functions. Okay, and the other environment variable that I'll set inside the terminal is a chaining subscription Id, which we also set up in the last video. I'll start off with the contract address, paste it inside my terminal, then next the subscription id, paste it inside my terminal, and then we'll execute our chain link functions by executing this command. Okay, the simulation says that the weather in London right now is 5.93
00:13:35.876 - 00:14:09.222, Speaker A: degrees celsius. Let's actually execute this script. The response that is stored inside the contract is 593. Let's actually check this. I'll copy the address of the contract and then paste it into polygon scan, click on contract tab, click on read contract, and then I'll call this function called slast response. This stores the last response in bytes. So I'll need to decode this bytes into int 256 and then inside remix.
00:14:09.222 - 00:14:37.604, Speaker A: I wrote a simple contract to decode bytes into int 2256 and I've also deployed this contract on remix. I'll open the contract, we'll paste our bytes into the function called decode int and then call the function and we get a response 593 back inside our terminal. When we executed the chaining functions, the response was 593. In this video, we went over a simple example of calling open weather API using chaining functions.
