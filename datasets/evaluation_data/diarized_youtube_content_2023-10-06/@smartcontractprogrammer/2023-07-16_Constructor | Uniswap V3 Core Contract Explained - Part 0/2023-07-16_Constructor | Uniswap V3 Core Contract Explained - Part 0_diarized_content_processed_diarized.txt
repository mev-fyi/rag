00:00:00.250 - 00:00:33.234, Speaker A: Hello, coders. It's time we learn unisoft B three. This will be a series of videos where I explain how the Unisop B three pool contract works. We will go over the code of Unison B three pool contract line by line. However, here are the topics that I will not cover in this video series. So the topics that I will not cover are the factory contract, price, oracle protocol fee, flash swap, NFT, advanced math live varies that are used inside the pool contract, and the callback. In this video, we'll set up the project, and then we'll write some code for the constructor.
00:00:33.234 - 00:01:21.330, Speaker A: Inside my code editor, I've created a folder called Clem concentrated liquidity automated market maker, and another folder I've included under unisop B three. This contains the unison B three contracts. Okay, to begin with, I'm going to initialize a foundry project inside the folder clam, open my terminal, and then type forge in it. Once the project is initialized, the next thing that I'll do is inside the source, I'm going to create a new file called clam soul, and this will be the file where we will write our own unisoft b three pool contract. First, I'm going to declare the headers, the license, and the solidity version that we'll be using. And then I'll create a contract called clam contract clam. Next, I'm going to open the unisoft b three pool contract.
00:01:21.330 - 00:01:58.094, Speaker A: This is located on the unib three b three core contracts and unisoft b three pool sol. On the top, I'll display the contract that we're working on. And on the bottom, I'll display the unison b three pool contract. In this video, I'll explain the code for the constructor line by line. So first, I'm going to scroll all the way down and try to find the constructor. Okay, here is the constructor. So inside our contract, I'll declare a constructor, and the first thing that I notice is that it initializes the factory token zero, token one, fee, and tick spacing.
00:01:58.094 - 00:02:50.366, Speaker A: Now, if I scroll up, I can see over here that factory token zero, token one, fee, and tick spacing are all immutable variables. Inside my contract, I'll declare address public immutable token zero, and then do the same for token one. We'll ignore the factory contract. We'll also declare fee as an immutable so un 24 public immutable fee. And the last thing that we'll declare is tick spacing int 24 public immutable tick spacing now, what are these variables for? Token zero and token one are pretty obvious. They're the tokens that will be locked inside this pool. Fee will be a number that represents some kind of percentage of fee on swaps.
00:02:50.366 - 00:03:24.122, Speaker A: Tick spacing. I'll come back to this later. So let's now work on the constructor inside the unison b three pool contract. I'm going to go back to the constructor and inside here we'll initialize token zero, token one, fee, and text spacing. Now as I mentioned earlier, I'm going to omit the code for the factory contract. So instead of getting these parameters from the factory contract, like what it does over here, it gets the parameters from the factory contract. What we're going to do instead is keep it simple and then just pass it from, pass it as a constructor argument.
00:03:24.122 - 00:04:06.300, Speaker A: Address underscore token zero address underscore token one u int 24 fee n int 24 tick spacing. And then inside the constructor token zero is equal to token zero from the input token one from the input fee from the input and tick spacing. Tick spacing is equal to underscore tick spacing. Okay, what else do we need to do? Okay, the next step is to set max liquidity per tick. At this point we don't know what this variable represents. I'll explain this in another video. For now we will just copy this code and then paste it here.
00:04:06.300 - 00:04:35.326, Speaker A: And I'm going to go to the definition of max liquidity per tick and it is declared as an immutable variable. So I'll copy this and then paste it here. And now this max liquidity per tick is calling tick spacing to max liquidity per tick. And we have not defined this function and we also have not defined this import. So let's go do that. I'll create a folder called viv. Inside it, I'm going to create a new file called tick soul.
00:04:35.326 - 00:05:16.250, Speaker A: And then as usual I'll paste the headers. And next let's go to the unison b three code and take a look at the contract for tick. So going inside a library looking for a file called tick, put this over here and note that tick is a library and the function that we're going to need is called tick spacing to max liquidity per tick. We will come back to this function later. So for now I'll just copy the function signature so that our contract compiles library tick and then paste the function signature. And then we'll write our code later to do write code. Okay, going back to our clam contract.
00:05:16.250 - 00:05:33.720, Speaker A: We'll need to import the tick library. So say import from div. Import. Tick, soul. Okay, let's try compiling our contract. So the only code that we wrote is the constructor. Open my terminal and then type forge, build.
00:05:33.720 - 00:05:48.690, Speaker A: And our contract compiles. Writing this constructor, we encountered a variable that we don't understand what it is. Tick spacing. So in the next video, I'll explain about price, tick and tick spacing. See you in the next video. Bye.
