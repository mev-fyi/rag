00:00:00.490 - 00:00:23.760, Speaker A: Okay, let's actually implement the staking reward contract. I've already coded some things that we're going to need. We're going to need the rewards token and the staking token. They're both ERC 20 which I've defined over here the reward rate. I set it to 100. So this will be the amount of tokens that will be minted per second. 100 tokens per second.
00:00:23.760 - 00:01:17.074, Speaker A: We're going to the state variable to keep track of when the last time this contract was called and it will be stored in a variable last updated time. Rewards per token stored this is the s value that we were talking about in the previous video. The summation of reward rate divided by the total supply of token staked at each given time that will be stored in here. Reward per token stored user, reward per token paid. That will be the right side of the equation which stores the rewards per token stored when the user interacts with the smart contract. So this will be the P of user that we discussed in the previous video. When a user stakes more token or withdrawals some token, then we'll need to compute the reward of that user and then store it in this mapping total supply.
00:01:17.074 - 00:02:02.706, Speaker A: That would be the total number of tokens staked in this contract. Balances, that would be the number of tokens staked per user. And we initialize the constructor passing in the address of the staking token and the rewards token. The function that the user will be able to call is stake to stake their token withdrawal to unstake their token and get rewards to claim their rewards. Every time a user calls one of these three functions we will need to recompute the reward. So I created a modifier called update reward and then attached it to all three functions. Stake withdrawal and get reward the hardest part of this coding will be inside here, which we will write it out later.
00:02:02.706 - 00:03:10.934, Speaker A: When a user stakes a token, we'll first update the reward, which we will write it out later, and then update the total supply of staked tokens and the balance of staked tokens of the user, and then transfer the staking token from the user into this contract. When a user withdraws, we'll first update the reward again, and then update the total supply of staked tokens and also update the balance of staked tokens of the user and transfer the tokens back to the user. When a user calls get reward to claim his reward, we'll first recompute, update the reward, and then get the actual reward stored in the rewards mapping, set it to zero and then transfer the reward token to the user. So that's the easy part. Now let's take a look at the hard part. How to implement update reward when the modifier update reward is called, the first thing that we'll need to do is update the reward per token stored and we will do that by calling the function reward per token, which we will later write it out. And then we'll update the timestamp.
00:03:10.934 - 00:04:04.986, Speaker A: For last update time, set it equal to the current block timestamp. We will compute the amount of token that the user can claim so far and then storing the output in the rewards of the user. And then lastly we'll update user reward per token pay of the user, setting it equal to reward per token store that we computed over here. Okay, so let's now write the function for reward per token. This will be the function that computes the running sum of r over total supply of token staked. If the total number of tokens staked is zero, then we will just return zero. Otherwise, if the total supply of token staked is greater than zero, then to reward per token stored, we will add reward rate multiplied by the time that elapsed since the last update time.
00:04:04.986 - 00:04:52.258, Speaker A: And to avoid rounding errors, we'll scale this up by ten to the 18 and then divided by the total amount of staked tokens and that completes the function. For reward per token, let's now code earned. This will compute how much reward token an account has earned so far. The code to compute how much reward a user has earned so far is based on this efficient equation. So we'll just translate it over to solidity code. We multiply the current amount of token staked by the user, multiply this by reward per token, and then minus it by user reward per token paid. Since these numbers are scaled up by ten to the 18, we'll scale this down by ten to the 18.
00:04:52.258 - 00:05:20.780, Speaker A: Once this number is computed, we'll add the current amount of rewards that this account has earned and that completes the function that calculates how much token a user has earned. This completes the video of how the synthetic staking reward contract is able to efficiently calculate how much reward a user can earn. This is a clever contract, so take a look links in the descriptions below. Thanks for watching and see you later.
