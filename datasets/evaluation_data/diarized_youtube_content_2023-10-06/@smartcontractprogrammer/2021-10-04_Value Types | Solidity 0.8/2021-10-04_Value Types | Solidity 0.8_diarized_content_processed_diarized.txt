00:00:00.410 - 00:00:37.330, Speaker A: Like other programming languages, data types in solidity can be classified into two types, values and references. Value means that the data stores a value. For example, a boolean stores either true or false, and the int stores a number such as minus 10 and one. On the other hand, data types of type references do not store a value in. Instead, they store a reference to where the actual data is stored. For example, an array is a data type of type reference. An array data type will store a reference to where the actual array elements are stored.
00:00:37.330 - 00:01:03.998, Speaker A: In this video we'll talk about values. I'll show you some examples of value types available in solidity. The simplest type is boolean. We can declare by saying Boolean. I'll declare this variable as public so that you can play around with this variable on remix. When you deploy this contract, we'll name this variable b and set it equal to true. There's also unsigned integer available in solidity.
00:01:03.998 - 00:01:53.534, Speaker A: Unsigned integer means that the number has to be greater than or equal to zero, so you cannot use negative numbers with unsigned integers, only zero or positive numbers. We declare an unsigned integer by saying uint public. We'll name this variable u and set it equal to one two three now un is an ads for Un 256, and Un 256 ranges from zero to two to the 256 minus one. There are variants of un with different ranges. Starting out with un eight, which ranges from zero to two to the eight minus one. The next one will be un 16, ranging from zero to two to the 16 minus one. And this goes all the way up to un 256 in steps of eight.
00:01:53.534 - 00:02:38.666, Speaker A: Among these different variations of Un, the most common one that you'll be using is Un 256. Un only supports number that are greater than zero, so no negative numbers. But what if you want to use negative numbers? Then you can use int. Int stands for integers, and with this data type you'll be able to use both negative and positive numbers. For example, we'll declare int public, name it I, and set it equal to minus one two three. Now, similar to un, int is also an ads for int 256, and it ranges from minus two to the 255 to two to the 255 minus one. Like uint, there are variations to int offering different sizes.
00:02:38.666 - 00:03:26.590, Speaker A: For example, int one two eight ranges from minus two to the one two seven to two to the one two seven minus one. Now, memorizing the ranges for different un in int type can be difficult. Well, in solidity there is a quick way to find out what the min value and the max value of the data type is. To find out the minimum value of int. We say int public. I'll name this variable min int equal, and we can find the minimum of int by saying type int min. Likewise, we can get the maximum of int by saying int public max int equal to type int max.
00:03:26.590 - 00:04:07.426, Speaker A: Another value type that you'll be using often in solidity is of type address. We declare an address type by saying address public. I'll name this variable addr and set it equal to some random address that I've copied over from etherscan. The last value type that I'll show you here is bytes 32. You'll encounter this data type when you're working with the cryptographic hash function available in solidity, called Catch Act 256. We declare a bytes 32 by saying bytes 32 public. I'll name this variable B 32 and set it equal to some random 32 bytes.
00:04:07.426 - 00:04:14.620, Speaker A: These are some value types available in solidity. Now, I didn't cover all of them, but these are the most common ones that you'll be working with.
