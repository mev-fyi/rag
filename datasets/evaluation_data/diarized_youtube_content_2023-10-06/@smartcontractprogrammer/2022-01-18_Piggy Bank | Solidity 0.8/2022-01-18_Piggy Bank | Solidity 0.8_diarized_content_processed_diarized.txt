00:00:00.490 - 00:00:27.640, Speaker A: Let's build a contract. Piggy bank piggy bank is a contract where anyone will be able to deposit ETH into this contract. However, only the owner will be able to withdraw from it. In real life, when you decide to withdraw from a piggy bank, you first need to destroy the piggy bank. In this contract. When the owner withdraws from the piggy bank, we will also destroy this contract. To enable this contract to receive ether from any one, we'll declare a fallback function.
00:00:27.640 - 00:00:57.390, Speaker A: Now again, remember that there are two variants of fallback function, the fallback and the receive function. We expect message data to always be empty, so we'll use receive. This will be external and payable. So now we have a simple way to receive ether into this contract. Next, let's write the function to withdraw from this contract. So I'll say function withdraw. This will be external.
00:00:57.390 - 00:01:41.574, Speaker A: Now only the owner should be able to call this function. So let's define a state variable owner and set it to the deployer of this contract. So I'll say address public owner, and when this contract is deployed, we'll set the owner state variable to message sender. In other words, the account that deploys this contract will be set to the owner of this contract. And then inside the function withdrawal, we'll say require message sender is equal to the owner. And if message sender is not equal to the owner, then we'll say that the error message is not owner. So now this function withdraw can only be called by the owner of this contract.
00:01:41.574 - 00:02:19.106, Speaker A: Once we know that message sender is the owner, we now have to do two things. One is to send all of the eve stored in this contract to the owner. And the second thing we need to do is delete this contract. We can actually accomplish two of our goals with one line of code using self destruct. We call that self destruct, deletes the contract, and whatever address that we put inside this parentheses will receive all of the ether stored in this contract. So inside this parentheses we'll say payable message sender. Again, remember, that message sender is the owner.
00:02:19.106 - 00:03:01.480, Speaker A: So here we're deleting this contract and also sending all of the ethers stored in this contract to the owner of the contract. That completes the basic functionality of this contract. Piggy bank now I want to add some events. Add an event when someone deposits ETH into this contract, and also add an event when the owner calls withdrawal. So I'll say event deposit. And for this event we'll log the amount that was sent, saying un amount next we'll create event withdrawal and again we'll log the amount that was withdrawal. So we'll say un amount inside the receive function.
00:03:01.480 - 00:03:52.642, Speaker A: When we receive ether, we'll emit the event deposit. The amount that was sent is stored in message value. We also emit the event withdrawal for the function withdrawal. Now we need to emit the event before the contract is deleted. So we'll emit the event withdrawal before we call self destruct emit withdrawal and the amount that was withdrawal is the amount of e stored in this contract which is stored in address this balance and this completes the piggy bank contract. Anyone will be able to send ether into this contract, but only the owner will be able to withdraw from this contract upon which the contract is deleted. Let's deploy this contract and then call some functions.
00:03:52.642 - 00:04:37.650, Speaker A: I'll compile the contract by hitting CtrL s and then we'll deploy the piggy bank, scroll down, open the contract, and then we'll send some ETH to this contract by calling the low level interaction. I'll scroll up and we'll send one ether. And actually we'll send it from account that is not the owner of the contract. So I'll switch accounts, we're sending one ether, scroll down and then call transact. The transaction was successful, meaning that we were able to send one ether to this piggy bank contract and then we'll call the function withdraw. Just now we sent it from the second account, which is not the owner of this contract. So if you try to call withdrawal, the transaction fails.
00:04:37.650 - 00:04:57.490, Speaker A: So we'll switch back to the owner of this contract, scroll down and then call withdrawal, and the transaction is successful. When we call the function withdrawal, this contract was deleted. So if I call the function owner, then it returns a zero address, meaning that the contract is actually deleted from the blockchain.
