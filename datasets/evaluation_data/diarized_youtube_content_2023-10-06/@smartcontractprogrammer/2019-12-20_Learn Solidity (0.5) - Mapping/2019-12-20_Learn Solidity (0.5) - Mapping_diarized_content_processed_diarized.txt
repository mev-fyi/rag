00:00:01.530 - 00:00:58.170, Speaker A: In solidity, when you want to store a collection of data, you either use array or mapping. In this video we'll go over how to create a mapping and how to get, set and delete a value from a mapping. First, what is a mapping? Mapping in solidity is like a dictionary in Python or a map in JavaScript. Mapping a allows you to save a data, add a key that you specify, and then later get that value at the key. Now, Python allows you to iterate through a dictionary, and JavaScript allows you to iterate through a map. So given a dictionary or a map, you can get all of the keys or all of the values from it. However, in solidity you cannot iterate through a mapping, and in order to create a map that you can iterate, you'll have to use a combination of mapping and arrays and store the keys in an array.
00:00:58.170 - 00:01:42.330, Speaker A: The other downside of using a mapping in solidity is that you can't get the size of a mapping. So in summary, a mapping is good for fast lookups, and if you want to iterate through a mapping, then you'll have to do some extra work and write extra code. Now, to create a mapping, you start with the keyword mapping, followed by the key type and the value type. We'll declare it as public and call this mapping my map. So here my map is a mapping from address to un. The key type for a mapping has to be a built in value type, a string or bytes. So for example, un, boolean, and address are all valid key types.
00:01:42.330 - 00:02:22.234, Speaker A: The value type of a mapping can be any type. For example, it can be array of un or another mapping. The syntax for reading a value from a map is similar to how you would access an array. We'll create a public function that returns the value given a key. Since the key type of mymap is an address, our get function will take in an address as input. The value type of mymap is a new int, so our function will return a new int inside the function. We return the un value that is stored inside mymap at the address.
00:02:22.234 - 00:03:04.630, Speaker A: Notice that the way we access a mapping is similar to how we access an array. Now, unlike an array, you would never get an error from accessing a mapping at a key, even if the mapping at the key was never set. If the value was never set, then solidity will return the default value. In this case, it will be zero. The way you set a value for a mapping is also similar to how you would update an array element. Here I've created a function that takes in the address and the value to be set at that address. And here we update the value of my map at the address by assigning the new value.
00:03:04.630 - 00:03:41.150, Speaker A: And the way you would delete an element from a mapping is also similar to how you would delete an element from an array. You start with the keyword delete, followed by the location inside the mapping to delete. Here we're deleting the value that is stored inside mymap at this address. Just like an array, the delete keyword actually doesn't remove the element from a mapping. So after this operation my map at this address will be the value zero. Now let's try calling these functions in remix. So go ahead and compile and deploy the contract.
00:03:41.150 - 00:04:34.690, Speaker A: Now we're going to need an address to call these functions, so I'm just going to copy the address from the contract that was deployed. Now call get and you'll notice that the function did not fail and instead it returned the value zero even though we haven't set any value at this address. So this shows that mapping always returns a value even if it was never set, and in that case it will return a default value. And this is why we got a zero here. Next, call the set function and you can verify that the value was set by calling the get function afterwards. Finally, call the remove function and you can verify that the value was deleted by calling the get function again. So that covers how to create a mapping get set and delete a value from a mapping.
00:04:34.690 - 00:05:17.980, Speaker A: In this video we went over how to create a mapping and how to do basic operations like read, write and delete a value from a mapping, like a dictionary in python or a map in JavaScript. Mapping and solidity is good for fast lookups. One thing you need to keep in mind about mapping is that you cannot iterate them and you cannot get the size of a mapping. So if you need to iterate through a map or know how many elements are inside a mapping, then you'll have to write some extra code to make it work. Well, that's all I got for this video. Thanks for watching, have a nice week and I'll see you in the next video.
