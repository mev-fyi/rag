00:00:00.570 - 00:00:37.362, Speaker A: Functions in solidity can return multiple outputs. The outputs can be named, and if you want to capture the output in another function, then you will use destructuring assignment. Let's see some examples. First, I'll show you an example of a function that returns multiple outputs. So I'll create a function and I'll name this return many. The input doesn't matter, so we'll say that there is zero input, it's the function will be public instead of external. The reason that I declare this function as public is because in another example we'll be using this function inside this contract.
00:00:37.362 - 00:01:18.430, Speaker A: So that is why it's public. This function will be read only for simplicity. I'll just say that this function is peer and here is the important part. How do you declare that this function returns multiple output? Well, we do it by typing returns parentheses, and inside the parentheses we declare the types of outputs. So let's say that we're going to return a uint and a boolean inside the function body. We'll match the return type, so we'll say return one and true. This is a basic example of how to return multiple outputs from a function.
00:01:18.430 - 00:01:59.026, Speaker A: If you look at the outputs here, then you know the type of outputs, but you don't know what they represent. In that case, you can also name the outputs. Let's take a look. So to start off with, we'll just copy this function, paste it here, and then I'll rename this function to named, since the outputs will be named for this example and we can name the output similar to how we name a variable by declaring a name after the data type. So for the un we'll name it x, and for the boolean we'll name it b. When you have a named output, you can implicitly return so that this statement can be omitted. Let me show you an example.
00:01:59.026 - 00:02:46.370, Speaker A: So I'll copy this function again, and then this time I'll name the function assigned. And how do you return this output without typing return one true well, since we have an output that are named over here, we can simply assign a variable to the named output. By saying we assign x to one and to the boolean output that we named b, you assign true and then finally remove this explicit return statement. When you write your function like this, it will save you a little bit of a gas. This is because there is one less copy to do. Anyways. These are some ways to return multiple outputs from a function, and they all do the same thing.
00:02:46.370 - 00:03:42.740, Speaker A: It's up to your preference to choose which type of code you want to write. So now let's take a look at destructuring assignment. How do we capture these outputs in a function? For this example, I've created a function called destructuring assignment, and inside this function I am calling the function return many, which is going to return a unit and a boolean. So inside here, how do we capture the output as a variable? To capture multiple outputs and then assign variables to it, we start with parentheses, and inside the parentheses we declare the variables that we want to capture. We declare the data type and the name of the variable. So for the first input we'll say un because the first output is a Un and we'll name it x comma and the second output is of type boolean. So we'll declare as Boolean and then we'll name this b.
00:03:42.740 - 00:04:25.470, Speaker A: And then we'll assign these variables by saying equals. This is a very basic way of capturing the output from a function and then assigning it to a variable. Now what if you only need the second output and not the first? Well, then you can omit the first, and I'll show you an example of that. Now we'll call the same function again and remember that we only want the second output, so we can omit it by just removing the variable. But you will need a comma. So here we're saying I don't need the first output, but I want to use the second output as a variable. And to avoid name conflict with the first variable, I'll rename this as underscore B.
00:04:25.470 - 00:04:35.060, Speaker A: And that is how you assign variables to outputs from another function. And you can simply omit some of these outputs by not declaring data type or the um.
