00:00:00.330 - 00:00:30.946, Speaker A: Welcome back. In the previous video, I've mentioned that transaction fee equals gas used times gas price. But why are gas and gas price? Let's go over them. In this video, imagine I have a smart contract deployed on the blockchain. Inside the contract, the variable stores some data. I send a transaction to update the variable. For this transaction to be processed, there are a number of operations that that must be done, such as copying over each byte from the input into the variable stored in the smart contract.
00:00:30.946 - 00:01:23.634, Speaker A: The total amount of computation used to process this transaction is measured in a special unit called gas. For example, the amount of gas used to deploy a contract might be 3000 gas, and calling a function to update a variable might be 200 gas. How are the amount of gas used for a transaction calculated? A transaction needs to perform a bunch of smaller computations. Every computation needs a specific amount of gas to execute. For example, adding two numbers x and y might require ten gas, and assigning a number to a variable might need five gas. The exact number of gas required for each computation are defined in ethereum white paper. At every step of computation, gas is deducted until either the function finishes, execution, or all the gas is used up, at which point the execution is aborted.
00:01:23.634 - 00:02:11.750, Speaker A: What is the purpose of gas? The purpose of gas is to limit the amount of computations that a transaction can do. How does gas limit the amount of computations? Imagine I have a code that would never stop. I send a transaction with 1000 gas to execute this function. After the first iteration, it uses 300 gas and I am left with 700 gas. After the second iteration, it uses 300 gas and there's 400 gas left and 100 gas is left after the third iteration. On the fourth iteration, it uses up all remaining 100 gas midway through the iteration, and the function is forcefully stopped. When you send a transaction along with your transaction data, you need to send the gas limit.
00:02:11.750 - 00:02:58.814, Speaker A: This is the maximum amount of gas you're willing to use for this transaction. The gas price how much you're willing to pay for each gas you pay with ether and gas limit times gas price in ether. The higher you set the gas limit, the more computation your transaction can process, and the lower gas limit you set. The less computation your transaction can process. The higher gas price you set, the more ether you will have to spend. But your transaction will be processed faster, and if you set the gas price low, you'll have to pay less fee for your transaction. But you would have to wait longer for your transaction to be included in a block after your transaction is sent and it's included in a block, your account will be refunded for the unspent gas.
00:02:58.814 - 00:03:33.002, Speaker A: For example, I have a transaction that I'm going to send. I'm willing to use up 3000 gas for my transaction, so I set the gas limit at 3000. I'm not in a hurry to get the transaction included in a block, so I set the gas price lower than the average at two gwe. So I send the transaction with 3000 gas times two guay per gas, which is 6000 guay in weight. After the transaction is processed, which uses 1000 gas, so that's 2000 guay. I get 4000 guay refunded to my account. Let's see an example in remix.
00:03:33.002 - 00:04:05.382, Speaker A: Here we have a function called test gas refund. Inside the function, it doesn't do much other than return the gas price. When you send a transaction to the real ethereum network, you set the gas price. But gas price and remix is fixed at one way, and we can verify that by checking the output of this function. Compile and deploy the contract. We don't want our starting account balance to be this number that is hard to remember. So let's switch over to the second account, which has 100 ether, and it's easier to check our balance.
00:04:05.382 - 00:04:32.462, Speaker A: After the transaction. We set our gas limit to 3 million gas and execute the function. Click on the transaction log and scroll down. We see here next to the label transaction costs that 21,462 gas was used. We expect our account to be refunded for the amount of gas that we didn't use. So the account should be deducted by 21,462 way. Click on the account to check the balance.
00:04:32.462 - 00:05:07.594, Speaker A: You can verify that adding 21 462 to the current balance equals 100 ether. We were refunded for the amount of gas that was not used. What happens if you run out of gas? If your transaction runs out of gas while midway through an execution, the transaction will fail and any changes to the state variable will be undone, but you still have to pay for the gas spent. Let's see an example. In remix. Back in our contract, we have a function called forever. This function will increment the state variable I without ever stopping.
00:05:07.594 - 00:05:33.430, Speaker A: However, once all gas is consumed, this function will be aborted and the state variable I will be reset to the previous state before the transaction started. First, let's see what the value of I is. Zero. After we call forever, we expect this number to be unchanged. Next, let's test our function forever. But first, we don't want to wait long for all 3 million gas to be used. Instead, we want our transaction to fail fast.
00:05:33.430 - 00:06:02.798, Speaker A: So let's decrease the gas limit to 30,000. Click on the function and we can see here in the transaction log that there was an error with the transaction. Scroll down and we can see here that we've sent 30,000 gas and used up all 30,000 of it. Let's check the value of I again. When the function forever was called, it incremented the variable. But since the transaction ran out of gas, we expect any changes to the variable I to be undone. Check the return value.
00:06:02.798 - 00:06:35.046, Speaker A: It is zero as we expected. This is the value before we called the forever function. How about our balance? Click on the account and you can see here that it is less than before. We didn't get a refund for the invalid transaction. There are two upper bounds to limit the amount of gas you can spend. Gas limit this is the maximum amount of gas you're willing to use for your transaction. This is set by you and block gas limit, which is the maximum amount of gas allowed in a block.
00:06:35.046 - 00:07:08.710, Speaker A: This is set by the network. In this video, we cover that transaction fee equals gas used times gas price. Gas is a unit of computation deducted during a transaction. It's used to prevent functions from running forever. Gas price is the amount of ether you're willing to pay per gas. Transaction with higher gas price will be processed faster and unspent gas will be refunded. If your transaction runs out of gas, changes to the state bear reverted, but you still have to pay for the gas.
00:07:08.710 - 00:07:24.180, Speaker A: There are two upper bounds to limit the amount of gas you can use. Gas limit set by you when you send a transaction and block gas limit set by the network I'm going to wrap up around here. Thanks for watching and I'll see you soon in the next video.
