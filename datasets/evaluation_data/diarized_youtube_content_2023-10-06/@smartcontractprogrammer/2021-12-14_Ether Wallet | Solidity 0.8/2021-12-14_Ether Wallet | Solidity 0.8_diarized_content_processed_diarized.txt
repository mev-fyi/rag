00:00:00.330 - 00:00:30.658, Speaker A: We know how to write a contract that receives ether, and we also know how to send ether out from a contract. So today let's build a simple contract that can receive ether and send ether out of the contract. The name of this contract will be called ether wallet. Anyone will be able to send ether into this contract, but only the owner will be able to send ether out of this contract. So we'll first declare a variable that stores the owner of this contract. Check. So I'll type address public and then declare it as owner.
00:00:30.658 - 00:01:08.670, Speaker A: Next, we'll initialize the state variable owner inside the constructor. So I'll type constructor and then say owner is equal to message sender. We want to enable this contract to be able to receive ether. So declare the function receive external payable. Now, this receive can be replaced with the fallback, and it's going to accomplish the same thing. However, here we want to make our intentions clear that we only want this contract to be able to receive ether. And if someone calls a function that does not exist inside this contract, then we want that transaction to fail.
00:01:08.670 - 00:01:37.386, Speaker A: So instead of fallback here, we'll use receive. And the last function that we're going to need is a function that can send ether out out of this contract. I'll name this function withdraw. Owner will be able to specify the amount of ether to withdraw from this contract. So it'll be un amount. This function will be external and we don't want anyone to be able to call this function. We only want the owner to be able to call this function.
00:01:37.386 - 00:02:41.402, Speaker A: So I'll say require message sender is equal to the owner state variable, and if it is not, we'll say caller is not owner. Once we know that message sender is the owner of this contract, we'll transfer the ether from this contract to the owner by typing owner transfer and then pass in the amount that we're going to withdraw from this contract. Now, if I try to compile this contract right now, we'll get an error saying that transfer is not available for the address owner. So what we have to do over here is to declare the owner as payable. So here I'll type payable and then I'll cast message sender as payable, compile the contract, and the contract compiles successfully. Now basically we're done with the withdrawal function, but now I want to optimize for gas. One of the things that you can do to save gas is to replace state variables with variables inside memory.
00:02:41.402 - 00:03:17.306, Speaker A: So here owner is a state variable, and we know that message sender is the owner. So we'll replace this with message sender. Since message sender is not a payable address, we also need to cast this as payable, replacing owner state variable with message sender. This should save a little bit of gas. Now, instead of using transfer to send ether out out of this contract, we could have used call to also accomplish the same thing. So these two code transfer and this two lines of code accomplish the same thing. For today, we'll use transfer.
00:03:17.306 - 00:03:51.910, Speaker A: Before I delete this contract and show you a demo, I created a function, get balance and this will return the amount of ether stored in this contract. So let's now compile the contract and then deploy it. And we'll send some ether and then withdraw it. So we'll send one ether, open the contract, and then call transact. Next we'll call get balance and we can see here that there's one ether stored in this contract. And lastly we'll withdraw all of the ether. So I'll call withdrawal.
00:03:51.910 - 00:04:21.020, Speaker A: Actually, to show you that only the owner can call withdrawal, I'm going to scroll up, switch accounts, and then try to withdraw some amount. Call withdrawal and you can see here that the transaction failed because the caller is not the owner. So I'll switch back to the owner and we'll withdraw all the data stored in the contract. Call withdrawal and the transaction is successful. Check the balance and the balance is now zero.
