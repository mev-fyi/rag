00:00:00.650 - 00:00:35.590, Speaker A: Today we'll take a look at how to do flash loans on Dydx. The advantage of using Dydx for flash loan over Aave or Uniswap is that the trading fee on DyDx is very low. The disadvantage is that the code is more complex than what we have seen so far. Today's example is based off of the code from money Legos. The code that we'll take a look have today was written and submitted by this guy. So thank you sir. All right, so the first thing that we'll do is import some boilerplate code and some interfaces.
00:00:35.590 - 00:01:22.562, Speaker A: These two code were copy and pasted from the money lego code. We'll name the contract test Dydx solo margin and it's going to inherit both the icali and the Dydx flash loan base that we just imported. The first thing that we'll do is set the address of the contract that we'll call flash loan on Dydx. Here I named it solo and you can get this address from the official Dydx GitHub repo. Next, we'll set up some state variables and events and struct to be used for this example, we're going to need two functions. The function that we'll call to initiate the flash node. So inside this function we'll call di dx to get a flash loan.
00:01:22.562 - 00:01:58.866, Speaker A: The second function is a function that Duidx will call back. Inside this function we'll have the amount of tokens that we requested to borrow and we'll have to repay it back inside initiate flash loan. The function that we will be calling. The first thing that we'll do is initiate a solo contract at the address of solo. So this is the Dydx contract that we'll be calling to get a flash loan. We'll need to get the market ID, the ID for the token that we're going to be borrowing. This Id we'll use later in the code.
00:01:58.866 - 00:02:42.278, Speaker A: You can find this in the documentation for Didx market ID equal to zero corresponds to ref. One is PSi, two is USDC, three is die. The next thing that we'll do is calculate the amount that we'll need to repay by using this function. Get repayment amount internal I didn't have to define this function here and it is provided by this Dydx flash loan base. On DydX, the fee that you'll have to pay for a flash loan is two way, which is very cheap compared to Uniswap and AAbe. Anyways, we'll have to pay back this much amount. So we'll do approval on the token.
00:02:42.278 - 00:03:49.462, Speaker A: So we approve the soldo contract to spend the repayment amount from this contract. The way you request a rational on DuiDX is by creating three actions, withdrawal and then call the call function below and then deposit back the amount that we borrow plus the fee. Once we create these three actions, we submit it over to the solo contract by calling the operate and passing in our three actions. The three actions to call are withdrawal and we can create that operation by calling git withdrawal actions and then we want to call this call function. So we create another operation by calling get call action. Here we can pass in our custom data, and for this example, we'll encode the my custom data that's defined over here. And the last thing that we'll do is create the deposit action and that completes the operations that we'll be passing in over here.
00:03:49.462 - 00:04:26.370, Speaker A: We're also going to need to pass in the account info which we can get by calling git account info. Again, all of these functions are provided by the boilerplate that we imported. So when we call this function on DydX, it will call into this call function. So let's take a look at what we're going to write inside here. We only want the solo contract to be able to call this call function. So we'll restrict access by saying message sender is equal to solo, and if not we'll throw an error. And we also check that the initiator of the flash zone is this contract.
00:04:26.370 - 00:05:14.362, Speaker A: Next, we'll decode the data which is passed from the input, and we'll decode it into the my custom data. And from my custom data, we'll be able to get back the repayment amount. We'll make sure that we have enough amount in this contract to be able to repay back the flashstone. And we'll do that by checking the balance of the token that we borrowed and then making sure that the balance is greater than or equal to the amount that we'll have to repay. And then we'll write our custom code inside here. For this example, we'll just set some state variables and log some variables as well. The token balance of this contract, the amount that we'll have to repay, and the balance minus the repayment amount.
00:05:14.362 - 00:05:58.346, Speaker A: So if you're writing code inside here to do arbitrage, this will represent the profit that you just made. Now, I don't have to send any tokens back inside here because I approved it above over here where we said the solo contract can spend from this contract the amount that we'll have to repay. Okay, so that completes the code for flash loan on DuibX. Let's take a look at what the test file does. The token that we'll borrow is USDC. The amount that we'll borrow is 1 million USDC. And to make sure that we have enough amount to pay back the flash loan, we'll fund the contract with 2 million USDC.
00:05:58.346 - 00:06:34.858, Speaker A: This is done here. We check that the balance of USDC of the whale is greater than the amount that we're going to fund and then transfer the fund to our contract. And we'll also make sure that the solo contract has more than the amount of tokens than we requested to borrow. We're requesting to borrow 1 million USDC. So we'll check that the balance of USDC for the solo contract is greater than or equal to 1 million USDC. So that's the setup. Let's scroll down and see what the test does.
00:06:34.858 - 00:07:17.160, Speaker A: So it's going to call the initiate flash zone function. And after the transaction is completed, we'll log the state variable and console log the logs. Okay, let's now run the demo using Ganache main network. So I'm going to start Ganache and then we'll run the test in another terminal. We'll run the test with the command MPX truffle test test test dydx solo margin and the network will be main network. Okay, the test completed. Let's now take a look at the console logs.
00:07:17.160 - 00:07:47.364, Speaker A: The solo contract has this much amount of USDC. USDC has six decimal places. So this number will be what you see over here, which is over 26.7 million USDC. When we called the Flashstone, we had 3 million USDC. This is because we funded with 2 million and we requested to borrow 1 million. The amount that we'll have to repay is just a little over 1 million.
00:07:47.364 - 00:08:10.010, Speaker A: It was 1 million plus two a, so that is why you see a two over here. And after we repay the flash loan, we're left with 2 million USDC minus two a. So that will be 2 million times ten to the six minus two. And you'll get this number. So that is how you do a rational on dy DX. Thanks for watching.
