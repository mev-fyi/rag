00:00:00.410 - 00:00:33.330, Speaker A: Today we'll take a look at the fifth challenge of damn vulnerable defi the rewarder. There's a pool offering rewards and tokens every five days for those who deposit their DBT tokens into it. Alice, Bob, Charlie and David have already deposited some DBT and have won their rewards. You don't have any DBT tokens, but it is offered for free using a flash zone. The challenge is to in the upcoming round, you must claim all rewards for yourself. Let's take a look at the code. There are four contracts in this challenge.
00:00:33.330 - 00:01:03.226, Speaker A: We'll first take a look at the flash loan contract. Ihoni has one function, flash loan, and it is basically a regular flash loan. Checks the balance before and the balance after and in between. It transfers the DVT token to you, calls the function receive flash loan. This is where our arbitrary code will be executed and then checks the balance of the token afterwards. So this is a very basic flash loan. Let's take a look at the accounting token.
00:01:03.226 - 00:01:50.170, Speaker A: It is an ERC 20 with a snapshot, meaning that the balance of the user at some point in time can be recorded, hence taking a snapshot. This ERC 20 token has mint burn, has a function called snapshot and has some internal functions. Nothing special here. Let's take a look at the reward token. This is an ERC 20 token and also nothing special here, just a regular ERC 20 token with a mint function. Lastly, let's take a look at the contract the rewarder pool. There are several functions, deposit withdrawal, distribute rewards, an internal function called record snapshot and another internal function and a public function called is new rewards round.
00:01:50.170 - 00:02:31.246, Speaker A: Let's take a look at the function deposit what does it do when a user calls deposit for the amount to deposit? It records the amount to deposit into the account token and then calls the function distribute rewards. And lastly it transfers the DBT token into this contract. Let's take a look at the next function. Withdrawal withdrawal subtracts the amount that was stored in the account token and if that is successful then it transfers the amount of DBT token back to you. Let's take a look at distribute rewards. What does it do? First, it checks that if this is a new round. Well, when is a new round? Let's take a look.
00:02:31.246 - 00:03:12.150, Speaker A: A new round is when the current timestamp is greater than the last recorded snapshot timestamp plus some reward round duration. The reward round duration is five days. So if it is a new round, meaning if the current timestamp is greater than or equal to the last round plus five days. If it exceeds that time then it will record a new snapshot. So what does record new snapshot do? Calls snapshot on the account token and then records some state variables. And then it gets the total deposits. The total amount of DBT tokens that I deposit into this contract.
00:03:12.150 - 00:04:03.542, Speaker A: It calculates the amount that you've deposited, and if the total deposits is greater than zero, then it calculates the reward and then distributes the reward. The challenge is to win all of the rewards on the next round. Remember that we don't have any DBT tokens, but we are able to get some using this flashstone. Pause the video here, give it a try, and in a few seconds I will go over the solution. Okay, so let's go over the solution. The solution is to wait for the next round of rewards to start and once the new round starts, we get a flash loan for all of the DVT tokens inside this contract and then deposit into the rewarder pool contract. This would trigger a distribute reward back to us, meaning that we'll get all of the rewards from this round.
00:04:03.542 - 00:04:40.722, Speaker A: And after we claim the rewards, we immediately call withdrawal to pay back the DBT tokens that we borrowed. Let's write this into code. I've created a contract called hack Reward. The function that we're going to be calling is attack. Inside this function, we'll first get a flash loan for all of the DBT tokens inside the pool contract. Inside it we'll call flash loan on the pool contract and the amount of DBT tokens that we're going to ask is all of the DBT tokens inside the pool contract. Now, if I scroll back up, the flash loan contract calls a function called receive flashstone.
00:04:40.722 - 00:05:12.270, Speaker A: So inside here we need a function called receive flashstone. Alternatively, instead of declaring a function called flashstone here, we'll use a shortcut. We'll just declare a fallback. And since the function receive flashnown doesn't exist, it will fall back to this function. This function will be executed. So inside the fallback, remember this is the function that the flashnow will call back into. We'll get the balance of the DBT token that the Flashno gave us and then deposit into the reward pool immediately.
00:05:12.270 - 00:05:57.870, Speaker A: When we deposit into the reward pool, this function will be called and it will distribute the rewards back to us. So back inside our hack contract, once this line of code is executed, we have already claimed all of the reward. We'll immediately withdraw all of the DBT tokens from the reward pool. And then transfer the token back to the pool so that the flash loan will be successful. Once the flash loan is successful, the last step that we'll have to do is transfer the reward token back to us. We can do that by calling the reward transfer to message sender all of the reward that was sent to this contract. The next step is to write the test script for this attack and then actually run it.
00:05:57.870 - 00:06:27.218, Speaker A: So inside the test script, the first thing that we'll do is wait five days. And we can do that by calling time increase duration will be five days. This will kickstart a new round for the reward. So we'll deploy the hack contract and then call Tac. Let's execute this challenge. I'll type NPM, run the rewarder, and we pass the challenge. Thanks for watching.
00:06:27.218 - 00:06:28.350, Speaker A: See you in the next challenge.
