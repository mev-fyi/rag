00:00:00.650 - 00:00:32.482, Speaker A: Create two allows you to easily compute the address of the contract that you're going to deploy. So in this video I'll show you how to use create two to deploy a contract. We'll first deploy a contract without create two, just using the new keyword. And then we'll modify the code. And I'll show you how to deploy a contract using create two. Before we deploy the contract, I'll also write some code that will precompute the address of the contract to be deployed using create two. I'll show you what the precomputed address is and then deploy the contract.
00:00:32.482 - 00:01:03.360, Speaker A: And then we'll compare the two addresses. They should be the same. Let's get started. So first we'll deploy a contract the regular way using the keyword new. I'll assign this to a variable. The contract that we're going to be deploying is deploy with create two, and the constructor takes in a parameter of owner. So inside here we'll say deploy with create to, I'll name it underscore contract, and then equal to new, deploy with create two.
00:01:03.360 - 00:01:59.010, Speaker A: And then to the constructor we'll pass in message sender as the owner. And after we deploy the contract we'll emit the address of the contract that was deployed. By typing emit, deploy the address of the contract. Address contract. Now how do we turn this code so that we can deploy this contract? Deploy with create two using create two to deploy a contract with create two after the contract name that we're going to be deploying, we put in our curly braces, and inside the curly braces we specify a salt. This will be of type bytes 32, and the salt is basically a random 32 bytes of our choice. For this example, we'll pass in a uint, we'll name it salt, and then we'll cast the salt from the input as bytes 32, by saying bytes 32, salt.
00:01:59.010 - 00:02:50.126, Speaker A: So this is how we use create two to deploy a contract. The only difference is we specify the salt, and the salt is basically a random number of our choice which determines the address of the contract that will be deployed. We now have a function that deploys a contract using create two. So now our question is, how do we know the address of the contract to be deployed before we deploy it? The address of the contract to be deployed using create two is determined by taking the ketcheck 256 Abi encode packed, starting off with zero XfF, the address of the deployer. In this case, we're deploying from this contract. So here it will be address this next will be the salt that we passed in over here. This will be un in our case, and then followed by another catch, Act 256 of the bytecode.
00:02:50.126 - 00:03:19.510, Speaker A: The bytecode here is all of the bytecode when the contract is deployed. So this will be the bytecode of the contract to be deployed, followed by any parameters to the constructor. To get the bytecode of the contract to be deployed. I've also created another function called get bytecode. We first get the creation code of the contract to deploy deploy with create two. And to this bytecode we append the constructor arguments. The constructor argument for deploy with create two is just the owner.
00:03:19.510 - 00:03:44.734, Speaker A: So here we pass in the owner. We call this function. We will get a bytecode. We pass into get address the bytecode, and we'll get this hash. Once we get this hash, the address will be the last 20 bytes of this hash. So we cast hash to un and then cast it to un 160 and then cast it to address. I got these two codes from soliditybyxample.org.
00:03:44.734 - 00:04:09.420, Speaker A: For more details, go check the website. For this video. We'll focus on how to deploy a contract using create two. So now let's run through a demo. We'll pre compute the address, deploy the contract, and compare the two addresses that we get, the address that we precomputed, and the actual address of the contract that was deployed. They should be the same. So I'll compile the contract with control s.
00:04:09.420 - 00:04:45.190, Speaker A: Once the contract compiles, I'll open this tab, and then we'll deploy the contract, create two factory, scroll down, and then expand the contract. We'll first pre compute the address. In order to do that, we need to call this function gitbytecode. The gitbytecode function takes in an input of the owner when we deploy the contract. Deploy with create two. The owner will be message sender, so in this case it'll be us. So I'll copy this account address, scroll down, paste it here, and that is the bytecode.
00:04:45.190 - 00:05:15.490, Speaker A: This is the bytecode of the contract. Deploy with create two, followed by the owner parameter. I'll copy this, and then we'll pre compute the address. The function get address takes two inputs, the bytecode that we just copied. So we'll paste it here and then the salt. For the salt, I'll pass in seven, seven, seven, and then hit call. So we expect the contract to be deployed to have this address.
00:05:15.490 - 00:05:42.520, Speaker A: Let's now actually deploy the contract. So for the salt, we'll pass in the same number as here, seven seven. Seven. And then hit deploy inside a transaction log. I'll search for the address of the contract that was deployed. You can see here that the event deploy was emitted and the address of the contract that was deployed is over here. Zero x ending if 10 be.
00:05:42.520 - 00:05:53.900, Speaker A: The address that we pre computed is zero x ending with 10 be. These two addresses are the same.
