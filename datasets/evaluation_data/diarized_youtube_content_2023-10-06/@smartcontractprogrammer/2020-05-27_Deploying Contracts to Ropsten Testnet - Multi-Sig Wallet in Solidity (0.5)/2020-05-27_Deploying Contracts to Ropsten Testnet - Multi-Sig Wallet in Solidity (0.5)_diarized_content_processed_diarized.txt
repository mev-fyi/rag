00:00:00.970 - 00:00:46.170, Speaker A: In the last video, I showed you how to code a front end that can interact with the multisite wallet smart contract. And we're now ready to deploy our smart contract onto a testnet. So in this video, I'm going to show you how to deploy a smart contract onto a testnet. Now, there are several testnets, but for this video, we're going to be using the Robston network. The first thing that we need to do before we can deploy our contract is to have some ethers. If you're deploying contracts on the main net, then you probably need to get your ether through an exchange, and this means you'll need to sign up to a crypto exchange, put in some dollars, and then buy some ethers. However, when it comes to testnet, you can get these ethers for free using what are called faucets.
00:00:46.170 - 00:01:24.082, Speaker A: So here inside my browser, I have Faucet metamask IO. Open inside my metamask, you can see here that this account has zero ethers. Let's now get some ether using the faucet, and the only thing that you'll have to do is hit request one ether from faucet. So I waited about 15 seconds, and we can see here that it has now one ether. All right, so that was how you get some ether on the testnet. The next thing that we'll do is deploy the contract onto the testnet. Here I've opened the folder solidity multisig wallet.
00:01:24.082 - 00:02:22.540, Speaker A: And this is the truffle project with our multisig wallet smart contract. Now, inside this folder, I've opened Truffleconfig Js and you can see it here. To deploy the contract onto the testnet, the first thing that we'll need to do is uncomment this. And from these lines of code, there are several preparations that we'll need to do, and the first thing that we will need to do is install Truffle HD wallet provider. So I'm going to open my terminal and then type NPMI save Deb Truffle HD wallet provider once the installation is done, we now have HD wallet provider. So the next thing that we'll need to do is get the inferior key. To get the inferior key, you'll first need to go to inferior IO and then log in.
00:02:22.540 - 00:03:17.690, Speaker A: Once you're logged in, the next thing that you'll need to do is create a project. And we can do that by clicking on the Ethereum on the sidebar over here on the left, and then click create new project. We'll name this solidity multisig. Alright, so our project is created and the next thing that we'll want to do is get the API key and the inferior key that we're going to need in our truffle config is this project Id here. So I'm going to copy this back inside my code editor inside Truffleconfig JS. I'm going to change the inferior key to the one that we just copied and this line of code is now completed. So the next thing that we'll need to do is get the mnemonic from the dot secret file.
00:03:17.690 - 00:04:07.734, Speaker A: The mnemonic is a list of twelve words that correspond to your private key. So that means if you know this twelve words, then you can reconstruct the private key. So where are we going to get this mnemonic from? If you're using metamask, you can get the mnemonics by opening metamask and then going to settings, scrolling down to security and privacy, clicking on reveal seed words and then typing your password in. But since we imported these accounts from truffle, we'll use a mnemonic provided by truffle. To get those mnemonics, we'll need to start the local blockchain by typing truffle develop. But before we can do that, we'll need to comment this line. Now, since we don't have the file seeker yet, when we type truffle develop, this will cause an error.
00:04:07.734 - 00:04:52.620, Speaker A: So that is why we're commenting this out for now. Okay, now, so let's open our terminal and then type truffle develop. And you can see here that that is the mnemonic that we need. So if you know this mnemonic, then you'll be able to recreate these accounts. And just a reminder, we imported the first three accounts into metamask. So now that we know the mnemonic of truffle, we'll create a file called secret and then paste the mnemonic. We'll go back to truffle config and uncomment this line.
00:04:52.620 - 00:05:26.760, Speaker A: All right, so now we're done with this setup. Scrolling down, you can see here that the configuration for the Ropston network is already there. So we'll uncomment this. We already have the mnemonic. So the only thing that we need to change here is your project ID. And this is the inferior key that we need to put in here. So here we'll say inferior key and then hit save.
00:05:26.760 - 00:06:32.310, Speaker A: We're now ready to deploy our smart contract onto the Robstone test network. So go ahead and open your terminal and then type network. Robstone and I got this deployment failed, migration invalid json RPC response. I did some googling and found out what works for other people and here it says changing the provider to this will work. So that's what we'll do. Back inside our config file, we'll copy this and then change it to just this and then comment this out and we'll try the migration with this setup. I'm going to type truffle migrate network Robston again, that took few minutes for me.
00:06:32.310 - 00:07:13.932, Speaker A: The multisig wallet contract been successfully deployed. Let's just clarify what we just did. We tried to deploy our contract using the default configurations, but due to a bug in truffle we weren't able to deploy our contract. So we took out this function form and then deployed our contract like this. So we successfully deployed the smart contract onto the Robston test network. Now there is one thing that I forgot to mention earlier when we got our mnemonics and then put it in a file called secret. You should keep this file secret.
00:07:13.932 - 00:08:01.200, Speaker A: So if you're putting your code up on GitHub, make sure that you put this file inside git ignore. And this will make sure that your secret file won't be uploaded onto GitHub. The last thing that we'll do is see our smart contract deployed on the Rothstone test network using our front end. So I'm going to change directory to the folder that contains the react app and then copy the build files. And this build file will contain information about where the smart contract is deployed on the Robson test network. And the last thing that we'll do is start the dev server by typing NpM start. So I have the react app open here and you can see that we're on the Robston test network.
00:08:01.200 - 00:08:32.790, Speaker A: And you can also see here the address of the Multisig wallet contract. And lastly you can see here the owners. So now this react app can interact with the smart contract at this address on the Robson test network. That completes the series of building the multi Sig wallet starting from writing the smart contract, testing it, building the user interface and then deploying the contract onto the Robson test network. Thanks for watching, have a nice day.
