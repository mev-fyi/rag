00:00:00.410 - 00:00:01.566, Speaker A: Let's take a look at how to.
00:00:01.588 - 00:00:38.638, Speaker B: Do flash loans on Uniswap. We'll create a simple example based off of the code inside the Uniswap documentation links to this page and the code will be in the descriptions below. Okay, let's get started. First, import some files, interface to the ERC 20 token, and interface to uniswap contracts. Next, we'll define an interface I uniswap B two call lead. Inside it, it has a function and this is the function that the Uniswap will call when we execute the flash loan. A contract to do a simple flash loan on Uniswap.
00:00:38.638 - 00:01:26.886, Speaker B: I named it test uniswap flash swap and it's going to inherit the iuniswap B two call e, which means that inside this contract we'll need to implement this function. This contract will have two functions, test flash swap this is the function that we'll call to call flash loan on Uniswap. In return, uniswap will call this Uniswap b two call function, giving us the token that we requested to borrow and the amount that we requested to borrow. And inside this function we'll have to repay the amount that we borrowed, plus some fees. We're also going to need some addresses, the address of the WEF, which stands for wrapped ether, and the address of Uniswap B two factory. All of these addresses, you can get.
00:01:26.908 - 00:01:28.970, Speaker A: It from the Uniswap documentation.
00:01:29.630 - 00:01:41.142, Speaker B: Next I create an event named Log and it's going to log some string message and some value. We'll use this event for debugging purposes if you're coming from JavaScript.
00:01:41.206 - 00:01:46.782, Speaker A: Think console log and what are we going to log? Well, we're going to log the amount.
00:01:46.836 - 00:02:56.370, Speaker B: That we borrowed and the fee that we're going to be paying. Okay, so let's now write the code for test flash swap for the input it's going to take in the token that we want to borrow and the amount that we want to borrow for. The first thing that we'll do is check that the pair contract for token borrow and with exist. And we do that by calling get pair on the factory contract and making sure that the address that we got back is not equal to the zero address. And if it is not equal to the zero address, then we know that there's a contract where we can trade between ref and the token borrow that we requested. Inside the unisoft pair contract, the two tokens are named token zero and token one, and at this moment we don't know if token borrow is equal to token zero and wif is equal to token one, or if it's the other way around where wif is equal to token zero and token borrow is equal to token one. We don't know which one yet, so we'll just get the address first and then say if token borrow is equal to token zero, then the amount that we want to borrow is the amount from the input.
00:02:56.370 - 00:03:45.890, Speaker B: On the other hand, if it is not, then we'll just return zero. Likewise, if token borrow is equal to token one, then the amount that we want to borrow is equal to amount from the input. Otherwise this is equal to zero. As a result, we'll either have amount zero out equal to amount and amount one out equal to zero, or the other way around, amount zero out is equal to zero and amount one out is equal to amount. And then we pass these amount into the uniswap B two swap function. Surprisingly, this is the same function that you would call if you just want to do a regular swap. How does uniswap determine whether a swap is a regular swap or if it's a flash zone? Well, it determines by the last input.
00:03:45.890 - 00:04:18.478, Speaker B: If this input is empty, then uniswap will try to do a regular swap. If it is not empty, then it will trigger a flash zone. So in order to do a flash zone, let's pass in some non empty data inside here. We'll encode token borrow and amount as bytes and then pass it in here. And this would trigger a flash loan. We call swap on the uniswap pair contract. And the pair contract calls this uniswap B two call.
00:04:18.478 - 00:04:29.394, Speaker B: In return. The data that we passed in here will be able to receive it here and then decode it. So let's now write the code for uniswap b two call right now.
00:04:29.432 - 00:05:21.410, Speaker A: Anyone can call this function. So the first thing that we'll do is check that this function can only be called by the pair contract. This is how we do it. This is how we check that message sender is the pair contract. We first get the address of token zero and token one by calling uniswap b two pair passing in message sender as the address of the contract and getting token zero and likewise the same to get token one. Once we have the address of token zero and token one, the next thing that we do is call the factory contract, call the function get pair passing in the two address of the tokens, and this will give us back the address of the pair contract. Now, because the factory contract is hard coded into this contract.
00:05:21.410 - 00:06:07.330, Speaker A: We can trust that the pair contract that this function returns is not going to lie to us. And if message sender is indeed equal to the pair contract, then we're now safe to move on to the next part of the code. Once we know that message sender is equal to the pair contract, we can trust that the inputs are real data coming from the pair contract. In particular, the sender will hold the address that initiated the flash loan. And for safety measures we'll check that the sender is equal to this contract. In other words, we're checking that the contract that started the flash loan is indeed this contract.
00:06:07.830 - 00:06:10.740, Speaker B: Remember that data that we passed into the swap function?
00:06:11.350 - 00:06:15.954, Speaker A: Well now we can decode it because it's passed in as an input and.
00:06:15.992 - 00:06:18.018, Speaker B: We can decode it by calling Abi.
00:06:18.114 - 00:06:21.382, Speaker A: Decode. The two data that we passed in.
00:06:21.436 - 00:06:23.526, Speaker B: Were the token that we borrowed and.
00:06:23.548 - 00:06:29.334, Speaker A: The amount that we borrowed, and we can decode it here. The fee that we'll need to pay.
00:06:29.372 - 00:07:13.270, Speaker B: Is a little over 0.3% and this is the calculation that is mentioned inside the Unisoft documentation. The amount that we'll have to pay is the amount that we borrowed plus the fee, and then we can do stuff inside here. For this example, we'll just log the inputs and the amount to repay and also the fee. After our custom code executes over here, then we'll have to pay uniswap and we can do that by calling IERC 20 on the token borrow, transfer it back to the pair contract for the amount plus the fee. And that completes a simple example of a Uniswap flash loan. Let's now run a demo on the main network.
00:07:13.270 - 00:07:21.690, Speaker B: The token that we'll borrow for this example is USDC, and the amount that we'll borrow is 1 million USDC.
00:07:22.110 - 00:07:26.506, Speaker A: We'll need to repay more than we borrowed, so we'll need to repay 1.
00:07:26.528 - 00:07:41.098, Speaker B: Million USDC plus 0.3% of 1 million USDC. We'll keep this example simple and fund the contract with 2 million USDC so that we'll be able to repay the flash loan.
00:07:41.274 - 00:07:42.334, Speaker A: I'm going to scroll down.
00:07:42.372 - 00:08:14.250, Speaker B: Let's take a look at what the test will do. So it's going to call the test flash swap function, and then we'll console log the events that were emitted. I've loaded up the environment variables, and then I'm going to run the ganache on the main network. Once that is done, I'm going to open another terminal and then run the test by mpx truffle test name of the test file. It will be test uniswap swap and the network will be main network.
00:08:19.710 - 00:08:22.442, Speaker A: So we borrowed 1 million USDC.
00:08:22.586 - 00:08:28.560, Speaker B: USDC has six decimal places. That is why you see more zeros than 1 million over here.
00:08:29.330 - 00:08:30.846, Speaker A: And the fee that we need to.
00:08:30.868 - 00:08:44.700, Speaker B: Pay back is 3009 USDC. That was a simple example of flash loan on Uniswap based off of the code from the Uniswap documentation. Give it a try. Have fun coding. Thanks for watching.
