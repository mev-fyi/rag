00:00:01.610 - 00:01:06.450, Speaker A: Inside the smart contract you can set state variables to a certain value when a contract is created using a special function called constructor. In this video we're going to go over the basic syntax for writing constructors. So first, what is a constructor? A constructor is an optional function that is executed only once before a contract is created. This function can take in inputs, and inside the function body you can set the state variables to certain values that you want. So, to define a constructor, we start with the keyword constructor followed by parentheses, and inside the parentheses we pass in some parameters. For example, we'll pass in some unsigned integers x and y, and we declare the constructor as a public function. Inside the constructor body, let's set some variables.
00:01:06.450 - 00:01:58.158, Speaker A: We'll set the unsigned integer x to the state variable x and likewise for the unsigned integer y. Finally, let's declare the state variable x y. So when we deploy this contract, the constructor will be called, and it will set the state variables x and y to the parameters that we passed in. Let's see an example first. Go ahead and compile this contract. Next we'll deploy the contract. But before we do that, we'll pass in some parameters for x and y into the contract.
00:01:58.158 - 00:02:42.510, Speaker A: We'll pass in number one and two and hit deploy. Once the contract is deployed, let's check that our state variables x and y were set to the parameters that we passed in. Scroll down to the deploy contract and let's check the value for x and y. X is equal to one and y is equal to two. That's the exact value that we passed into our constructor. And just like a regular function, a constructor has access to special variables like message sender and block timestamp. Let's store these special variables into a state variable.
00:02:42.510 - 00:03:30.560, Speaker A: We'll declare two state variables to store the values of these special variables. We'll store message sender in a state variable called owner, and we'll store block that timestamp in a state variable called created. At. Once the state variables are defined, let's assign them inside the constructor, set the owner to message sender and created at to block that timestamp. Go ahead and recompile this contract and redeploy it and pass in some parameters into the constructor. This time I'll pass in three and four and deploy it. Once the new contract is deployed, let's check the values of owner and created at.
00:03:30.560 - 00:04:02.260, Speaker A: For a created at, you get the Unix timestamp. When this contract was deployed, the owner is set to message sender, which in this case is the first account available in remix that covers the basic syntax for a constructor. In the next video I'll cover inheritance, and after that we'll revisit how to call constructors for parent contracts. Thanks for watching and see you in the next video.
