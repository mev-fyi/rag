00:00:00.570 - 00:00:33.400, Speaker A: Let's take a look at how to debug a transaction using tenderly Co. So the first thing that you'll have to do is log into tenderly Co. To debug a transaction, you'll click on this search bar at the top, and then paste in the transaction hash that you want to debug. For this example, I picked the transaction hash from Unisoft B three. Anyways, I'm going to click on this transaction. It once the transaction is ready to debug, you'll see a screen like this on the left. We have several options.
00:00:33.400 - 00:01:17.090, Speaker A: By clicking on contracts, you'll be able to see all of the contract that this transaction interacted with. So for example, this transaction interacted with a contract named Swap, router, Dai, Uniswap B three pro, and et cetera. Moving on, clicking on events, you'll see all the events that were emitted. And clicking on state changes, you'll be able to see all the state variables that were updated. For example, you can see that the balance of dai changed for two addresses. This was the balance before, and these are the balances after the transaction. Before we move on to the actual debugger that I'm going to show you, I want to quickly show you the gas profile.
00:01:17.090 - 00:02:09.734, Speaker A: This shows the breakdown of how the gas was used for this transaction. So for this transaction, it used up in total 231,000 gas, and below it you can see how much gas each function used. So, for example, the function call to multicall used about 206,000 gas, and the function swap used about 188,000 gas, and so on. Okay, so let's now move on to the debugger. This is the screen of the debugger, and on the right you'll see the code that was executed. On the bottom you'll see some parameters, including the contract that was called the address that called the contract, and the inputs that were passed into the function. So, for example, the function multicall has a single input called data.
00:02:09.734 - 00:02:57.602, Speaker A: And inside here you can see that the input data having this value over here on the left. Over here, you'll see a list of all the functions that were called in this transaction. You can see here that the function multicol called another function called exact output, and this function called another function called block timestamp, and so on. Now, you might be asking, why are some functions indented? What does the indentation mean? Well, the indentation means that the function called another function while it is still executing. So, for example, exact output is a function. And while this function was executing, it called another function called block timestamp. After this function executed, it called another function called exact output internal.
00:02:57.602 - 00:03:47.194, Speaker A: Here we see another indentation here, meaning that the function exact output internal call the function decode first pool and then we see another indentation here. So the function decode first pool call to address two un and so on. So that is what the indentation means. A function called another function while that function is still executing, and when you see a function on the same indentation. So for example two address n, two un 24. That means this function finished executing and then another function was called on the bottom over here it lists the stack trace and what is a stack trace? Stack trace will list all of the functions that are currently being executed. For example, the function multicol is going to call the function exact output.
00:03:47.194 - 00:04:23.690, Speaker A: So when we debug this transaction later, you'll see that exact output will come under the stack trace with multicol. This will become more clear as I show you example using the navigation over here. By clicking on these navigation buttons, we can navigate through this function list over here. The easiest one to understand is next, and it jumps to the next function on the list over here. For example, we're starting a multicol. By clicking on next we will go to exact output. So I'm going to click on next and it takes us to exact output.
00:04:23.690 - 00:04:57.290, Speaker A: The next function on this list is block timestamp. So if I click on next, it will take me to block timestamp, and then if I click on next again, it will take me to exact output internal, and so on. Previous is the opposite of next it will take me one up in this function list. So by clicking on previous, it will take me to block timestamp, and if I click on previous again, it will take me to exact output. Let's give it a try. So I'm going to click on previous takes me to block timestamp. Click on previous again, it takes me to exact output.
00:04:57.290 - 00:05:44.380, Speaker A: Step over will take me to the next function on this list on the same indentation as the current step. For example, if I click on step over now, currently our step is exact output, and on the same level, if I scroll down down, the same function on this indentation is refund Eve. So by clicking on step over, we should land on refund Eve. I'm going to click on step over. And there it is. To give you another example of step over, I'm going to click on next several times. Now if I click on step over now, the same function on the same level of indentation is compute address so if I click on this, it should land me on compute address.
00:05:44.380 - 00:06:34.502, Speaker A: Now notice that I cannot click on step over right now because there is no other function on the same level as this. So I'm going to click on next, by clicking on step over, the function on the same indentation will be swapped. So this should take me to swap and I cannot click on step over again because there is no function on the same level of indentation. And to show you this, I'm going to scroll down and I've scrolled all the way down and you can see here that there is no other function on the same level of indentation. Okay, so I'm going to scroll back up and let's now talk about step up. What does it do? Step up will go up one step in the stack trace that you'll see over here. Currently we are over here and by clicking on step up it will take us to exact output internal.
00:06:34.502 - 00:07:01.634, Speaker A: Let's give it a try. I'm going to click on step up and you can see here that it took us to exact output internal. Currently we're over here. One function above this function is exact output. So by clicking on step up again it should take us to this function. I'm going to click on step up and it took us back to exact output. The last feature that I'm going to explain is how to search for a word in the code.
00:07:01.634 - 00:07:43.902, Speaker A: There are two ways to do it. The first way is by double clicking on the word that you're searching for. Over here on the right, you'll see that the word that you're looking for is highlighted. To give you another example, if I click on, let's say length, then you can see here on the right you see a highlight over here and a highlight over here. Then if I move the scroll bar a little bit down to where the highlight is, then the word that I was looking for can be found over here. Another way to search for some code is by double clicking and then hitting Ctrl f. A search bar will pop up so you'll be able to navigate it by either by pressing enter or by clicking on these arrows over here.
00:07:43.902 - 00:08:09.282, Speaker A: So for example, if I click on the arrow, it takes me to the next occurrence of the word that I am looking for. And if I click on next again it takes me to the next occurrence of the word that I'm looking for. So that's how you can quickly search for words inside the code. That is all I got to share with you. For the debugger in Tender Co. It's a very useful feature, so check it out. Have fun debugging.
00:08:09.282 - 00:08:10.980, Speaker A: Thanks for watching and see you later.
