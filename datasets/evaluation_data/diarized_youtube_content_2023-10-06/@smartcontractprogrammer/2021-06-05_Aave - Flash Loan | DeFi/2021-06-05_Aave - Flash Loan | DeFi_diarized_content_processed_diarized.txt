00:00:00.490 - 00:00:41.382, Speaker A: Let's take a look at flash loans. Flash loans are uncollateralized loan that must be borrowed and then repaid in the same transaction. They are commonly used in arbitrage, liquidation, and also in defi hacks. In this video, I'll show you how to do a basic flash loan in Aave, how to borrow token and then repay it on Aave in a single transaction. To do a flashlone on AbE, we first need to import some files. So we'll import safemath and also a file called flashlone receiver base. This base contract was copied and pasted over from the AbE tutorial, which is also on GitHub.
00:00:41.382 - 00:01:22.360, Speaker A: So I copied all of this code, including all of the code from the interfaces, and then pasted the code in here. Here is the code for the flash phone receiver base that was copied over from GitHub. Now, I had to make a slight changes to the code so that this code also compiles for solidity zero seven. Other than that, the code is basically the same. The first thing that we'll do is create a contract called test of a flashlone, and it's going to inherit from flashlone receiver base. We'll need to call the constructor of the flashlone receiver base contract passing in the address of the address provider. We'll also use safemap for un.
00:01:22.360 - 00:01:51.850, Speaker A: We'll need two functions. The function that we're going to call to kickstart the flashnode. This I named it test flashnode. So this is the function that we're going to be calling. And then there is a function that the Abe protocol will call sending us the tokens that we're going to borrow. And the function that the AbE protocol is going to call is named execute operation. So in summary, we call this function, and inside this function, we call the AbE protocol.
00:01:51.850 - 00:02:32.258, Speaker A: To kickstart the flash loan, the Abe protocol calls back into this contract calling the execute operation. When this function is called by the Abe protocol, we will have the tokens that we borrowed. So we write our custom logic here, and then we'll have to repay the tokens back to Ave protocol. Let's first write out the code for the function test flash loan. We will pass in the address of the token that we want to borrow and the amount that we want to borrow. To keep this example simple, we'll send some tokens into this contract. Before we call this function, we'll have to repay more than we borrowed.
00:02:32.258 - 00:03:24.970, Speaker A: So we'll check that the balance of the token inside this contract is greater than the amount that we're going to borrow. To do a flash loan on the Abe protocol, we'll need to call Lendingpool flash loan passing in these parameters, lending pool is a contract that is defined inside the flash loan receiver base. Let's go through one by one what these parameters are. Receiver is the address of the contract that is going to receive the token that we want to borrow. For our example, we'll set the receiver to this contract. Assets are array of tokens that we want to borrow. We can borrow multiple assets, but for this example, we'll just borrow one asset which is passed from the input and then amounts the amount of tokens that we want to borrow.
00:03:24.970 - 00:03:51.858, Speaker A: This is a little bit tricky. The modes that are available are zero node debt, one stable and two variable we're going to be paying back in the same transaction that we borrowed. So we're going to go with zero, no debt. In other words, we're not going to be creating any new debt. We're going to be paying all of the amount that was loaned. So we set modes equal to zero. This is the address that will be receiving the debt.
00:03:51.858 - 00:04:53.526, Speaker A: In case the mode is equal to one or two, we're going with mode equal to zero. So for this on behalf of, we'll just set it to this contract. If you have any extra data that you want to pass over to execute operations, then we can pass it using the params and using Abi encode to encode the data into bytes referral code. I'm not sure what this is, but we'll just follow the example from the tutorial and set it equal to zero. Okay, so this completes the function test flashstone let's now implement execute operation. This is the function that will be called by Abe protocol when we call this menu pool flash zone. The function execute operation called by the Abe protocol is going to pass in several parameters, the assets that we requested to borrow and amounts that we requested to borrow premiums.
00:04:53.526 - 00:05:32.710, Speaker A: These are the fees that we need to pay back for borrowing initiator, the address that executed the flashblow. So in this case it will be this contract and params. Any other data that we want to pass to this function. Inside this function, we'll be writing our custom code. This might be arbitrage, liquidation, or if you're a defi hacker, then you'll be writing your exploits inside here. And after you do your stuff here, then we'll have to repay Abe. Also, if you have any data that you need to decode from the params, then you can do that by calling Abi decode.
00:05:32.710 - 00:06:12.798, Speaker A: We'll keep this example simple. We'll just log the amounts that we borrowed and the fee that we'll need to pay back, and then approve Abe to spend from this contract the amount that we borrowed plus the fee that completes the execute operation function. The next step is to run a demo on Ganache main network. I've created a test. Let's see what it does. The token that we're going to borrow is USDC and the amount that we're going to borrow is 1000 USDC. We'll need to be able to pay the borrow amount plus the fee on the borrow.
00:06:12.798 - 00:06:52.430, Speaker A: So we'll fund the contract with 2000 USDC and that should be enough to cover both the borrow amount and the fee. We'll need to provide the address provider to the test flash loan contract. You can find this address inside the documents for Abe over here under deployed contract main market scroll down and I copy the address for lending pool address provider. We'll send 2000 USDC to the test flash loan contract. I'm going to scroll down. Let's see what it does for actually the flashnown. It's going to call the function test flashno.
00:06:52.430 - 00:07:45.034, Speaker A: And after the transaction is done, it's just going to log the logs that were emitted. Okay, let's start the Ganache main network. So I'm going to load up the environment variables, open my terminal, paste the command, and then paste this command to start the Ganache main network and then paste it here. Once ganache is running, we'll run the test. So I'm going to open another terminal. We'll run the test with the command mpx truffle test name of the test file and the network is main network. We borrowed 1000 USDC.
00:07:45.034 - 00:08:05.300, Speaker A: USDC has six decimal places and we had to pay back this muching fee which turns out to be 0.9 USDC. So the fee on borrow is 0.9%. That was an example of how to do flash zone on all day. I'll put the link to the code in the descriptions below. Thanks for watching.
