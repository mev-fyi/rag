00:00:00.250 - 00:00:36.918, Speaker A: In the previous video we deployed a simple greeter contract on testnet supportia and optimism testnet supportio and then we sent a message from L1 to L two. And as you can see here, if I scroll down here's the L1 contract and here's the L two contract. We sent a transaction from the L1 contract over to the L two contract and then set the greetings to hello L two. In this video we'll send a transaction to other way. We'll send the transaction from L two and then call the contract on L1. For this video we will be using the same contracts and here are the contract addresses. Here are the steps that we'll need to follow.
00:00:36.918 - 00:01:01.630, Speaker A: To send the transaction from L two to L1. We first call the l two greeter contract and then call this function. Send this function over here. And next we'll need to switch network and then not testnet sepolia. On L1 we'll need to prove our message. We do this by calling the function optimism portal prove withdrawal transaction. Now we're not going to directly call this contract and function.
00:01:01.630 - 00:01:36.618, Speaker A: What we'll need to do is use the optimism NPM library and then run the script. Next we'll need to wait a challenge period. On the mainnet this is seven days. However, on testnet I think this is like 1 second and then the final step is to call the contract optimism portal again and then call the function finalize withdrawal transaction. When we call this function, it's going to execute our transaction to call the greeter contract on L1. And just like in step two, we're not going to directly call the contract and the function. We'll again use the optimism NPM library to call this function.
00:01:36.618 - 00:02:23.382, Speaker A: Okay, so the first step is to call the l two greeter contract and then call the function send and for review the function send will take in a string of greetings and then it's going to relay our greetings message over to the messenger contract also on l two. After we follow all of these steps outlined over here, our message will be relayed over to our L1 contract. So we'll click on the deployment tab. And then I've already loaded the L1 and l two contract over here. The first one is the L1 contract and the second one is the L two contract. Make sure that you're on optimism sipolia testnet and then scroll down and then we'll call the function send for the message. Let's say hello, l one click on send, confirm the transaction.
00:02:23.382 - 00:03:02.146, Speaker A: Okay, that completes step one. For steps two to four, we will write a node script and then call these function prove withdrawal transaction and finalize withdrawal transaction. I wrote a simple node script which we will execute to relay our L two transaction onto L1. I went to optimism documentation and basically copied the code from here. Get back inside my code editor. The first thing that we'll need to do is install some Npm packages which I have here inside package json. If you look at this, what you'll need to install is called at optimism SDK and also ethersjs.
00:03:02.146 - 00:03:42.158, Speaker A: Here you need to make sure that Etherjs is not version six. You need to make sure that it is version five. Okay, with these two packages installed, let's go back to our node script. This script is going to get the private key and the L two transaction hash from process M. We're going to set an environment variable for private key and L two transaction hash. Next, I define some constants that we'll need to make some calls to both l one and l two l one Rpc, l two Rpc and L1 chain id and L two chain id. These configurations are used inside the main script to initialize the L1 provider, L two provider, and L1 and L two wallets.
00:03:42.158 - 00:04:22.862, Speaker A: Okay, the next step is to initialize the messenger by passing in chain ids and L1 and L two wallet. All of this is documented inside the official documentation of optimism. Okay, the next step is to wait for L two transaction, wait until it is ready to prove, and then next is the interesting part. It calls messenger prove message, and then for the input we're going to pass in the L two transaction hash. Now, what this code will do under the hood is it's going to call the optimism portal contract. Remember, back inside Dimix, we said that for step two we'll need to call optimism portal prove withdrawaltransaction. This code over here is doing exactly that.
00:04:22.862 - 00:04:55.542, Speaker A: It's sending a transaction to optimism portal and then calling the function prove withdrawal transaction. And then on the next line, after we prove our message, what we're doing here is we're waiting for the challenge period to elapse. On the mainnet, the challenge period is seven days. However, on the testnet it's a lot shorter and I think it's like 1 second. Once we wait the challenge period, the next code is messenger finalize message. This will correspond to step four that we outlined. So back inside remix.
00:04:55.542 - 00:05:24.370, Speaker A: I mentioned earlier that step four is finalize message on L1. And we do this by calling optimism portal finalize withdrawal transaction. This is what this line of code is doing. And after this transaction is processed, we've successfully relayed our transaction from L two to L1. Okay, let's run this script. We're going to need a transaction hash of l two transaction and a private key. I'll get my private key from my metamask, but I won't be showing you my private key.
00:05:24.370 - 00:06:00.730, Speaker A: For the l two transaction hash, you'll go back to remix and then get it from there. So here it is, the L two transaction hash. This transaction is from when we call the function send on the greeter contract deployed on L two. So this transaction hash is l two transaction hash. I'll copy this and then back inside our script, I'm going to open my terminal, then say l two tx equal to then paste the l two transaction hash. I've stored my private key in a m file, so we'll load it when we execute the node script. So say emb cat emb.
00:06:00.730 - 00:06:31.910, Speaker A: This will load my private key when the node script is executed. And then we'll also load the environment variable l two tx. We'll say L two tx is equal to the environment variable l two tx. And then we'll execute the script by typing node source index js. Okay, the script ran successfully. Let's go back to remix and then check the L1 contract back inside remix. Make sure that you're on testnet sepolia.
00:06:31.910 - 00:07:09.238, Speaker A: On L1, the greeting message was sent to this account. So I'll copy this account and then scroll down and then open the l one greeter contract. And then scroll down and then paste my address, and then call greetings and we get the message hello l one. This is the message that we sent from the l two contract. In this video, we sent a transaction from L two contract over to L1. And the way we did it was by first executing a transaction on L two, and this transaction was relayed over to the messenger contract on L two. Next, there were several steps that we had to do on L1.
00:07:09.238 - 00:07:43.820, Speaker A: First was to call prove withdrawal transaction on the contract optimism portal on L1. And then we had to wait for the challenge period. And then finally we execute the transaction on L1 by calling the contract optimism portal and then calling the function finalize withdrawal transaction. This executed the greeter contract on L1. Call the function set and set our greetings. We now have all the experience and the tool to send e from L1 to l two and from l two to l one. So we'll cover this in the next video.
