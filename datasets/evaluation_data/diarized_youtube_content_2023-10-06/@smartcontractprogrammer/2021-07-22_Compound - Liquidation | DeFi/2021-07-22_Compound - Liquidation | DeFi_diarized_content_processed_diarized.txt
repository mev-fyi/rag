00:00:00.410 - 00:00:50.250, Speaker A: In this video, we'll take a look at how to call liquidate on compound. First of all, what is liquidation on compound? When you borrow more than what you supplied, then you are subject to liquidation. This means that someone else can repay a portion of the token that you borrowed, and in return, that person receives the token that you supplied at a discount to create a situation where the borrowed amount is greater than the amount that was supplied. Right. In this example, we're going to supply a token and then borrow up to the max. And then we're going to wait a few blocks and let the balance of the borrow token increase greater than the amount that was supplied times the collateral factor. After we create a situation where we are under collateralized, meaning we borrowed more than supply, times the collateral factor, we'll call liquidate.
00:00:50.250 - 00:01:37.926, Speaker A: This will be called from another contract. Finally, we'll check that the contract that called liquidate was rewarded with portion of the token that was supplied below. I've created a contract, and this contract will supply a token, and then it's going to enter the market so that it can borrow, and then it will borrow the token. We'll wait a few blocks until the borrow balance is over the limit, and we're subject to liquidation. Once this contract is subject to liquidation, then we'll call liquidate from another contract. I named it contract liquidator. In this video, we'll focus on this contract, and I'll talk about close factor liquidation incentive, and then actually the function to liquidate.
00:01:37.926 - 00:02:04.510, Speaker A: Okay, let's dive in. We're going to need the controller. So I've set the address over here. We'll set two state variables, token borrow and C token borrow. The first thing that we'll need to understand before we can call liquidate is close factor. Close factor is the maximum percentage of the borrow token that can be repaid. For example, let's say that some account has borrowed 100 die and that account is subject to liquidation.
00:02:04.510 - 00:02:31.494, Speaker A: We'll say that the close factor is 50%. This means that we can repay up to 50% of the 100 die that was borrowed. To get the close factor, we'll call on the controller. The function, close factor Montesa. Now, this number is scaled up by ten to the 18. So if you want to get it in percentage, then divide by ten to the 18. Okay, let's move on to the next topic, liquidation incentive.
00:02:31.494 - 00:03:16.550, Speaker A: When you call liquidate, you repay a portion of the token that was borrowed by another account. In return, you are rewarded with a portion of the token that was supplied as collateral, and you'll receive the collateral at a discount. This is called liquidation incentive. We can get this liquidation incentive by calling liquidation incentive Mantesa on the controller. Now, if you want to know the exact amount of collateral that we liquidated, then you can call the liquidate calculate C's tokens on the controller. This will return the C token collateral amount that will be liquidated. So you multiply this by the exchange rate of the collateral C token and you'll be able to get the amount of collateral that will be liquidated.
00:03:16.550 - 00:04:03.270, Speaker A: All right, moving on. Let's finally talk about liquidate. How do you call liquidate on compound? We'll name this function liquidate. It's going to take in three parameters, the address of the borrow, the amount that we're going to repay and the c token collateral that we'll receive in return for liquidating. The first thing that we'll do is transfer the token borrow from message sender to this contract for the amount repay amount and then we will approve the C token borrow to be able to spend the repay amount from this contract. Finally, we can call liquidate on compound and we do that by calling liquidate borrow on the C token borrow contract passing in the address of the borrow. This will be the account that is under collateralized.
00:04:03.270 - 00:04:44.470, Speaker A: We'll also pass in repayment amount and the C token collateral. When the call to liquidate borrow is successful, then it will return a zero. So we'll wrap this in a required statement, make sure that this function is successful and that is how you liquidate another account on compound. Let's now take a quick look at the test file for this example. We're going to supply WBTC then borrow die. We're going to supply one WBTC and the amount of Dai that we're going to borrow is the maximum amount. This will be roughly the price of WBTC in US dollars multiplied by the collateral factor of CWBTC.
00:04:44.470 - 00:05:16.462, Speaker A: We're going to deploy two contracts. The contract that's going to borrow and the contract that's going to call liquidate on the contract that borrowed. So it'll be this contract. The first thing that we'll do is test compound. So this is a contract that's going to borrow. It's going to supply WBTC and then it's going to enter the market and then it's going to borrow the maximum amount. And what is the maximum amount? The maximum amount is liquidity divided by the price of the token that we're going to borrow.
00:05:16.462 - 00:05:51.290, Speaker A: The token that we're going to borrow is die. So the price will be close to $1. So we borrow that amount and then we'll wait until the borrowed balance is greater than supplied amount times collateral. And when this occurs, this means that this account test compound is subject to liquidation and then we'll actually call liquidate. This will be called by a contract named liquidator. This is a different contract from the test compound, the contract that borrowed the token. Let's now run this test in Ganache.
00:05:51.290 - 00:06:27.186, Speaker A: So I'm going to start Ganache and then open another terminal to run the test. The test file that we're going to execute is called test compound liquidate. The test passed. Let's take a look at the logs. The collateral factor is 65% and we supplied zero point 99 wbtc. After we enter the market, our liquidity is $20,564. This is the maximum amount in US dollars that we can borrow.
00:06:27.186 - 00:07:01.774, Speaker A: The price of the token that we're going to borrow die is $1. The maximum amount of die that we can borrow is 20,549. But if you actually try to borrow this much amount, then the borrow function will probably fail. So we'll borrow a slightly less than the amount of Max borrow. After we borrow as much as we can, our liquidity is just over $2. We wait some block until liquidity is zero. And this is because the token that we borrowed has accrued interest and our borrowed balance has gone over the limit.
00:07:01.774 - 00:07:31.422, Speaker A: So that is why you're seeing liquidity zero over here. Shortfall is over $1. This means that the contract that borrow is under collateralized by $1.18. And then we finally call liquidate. The close factor is 50%, meaning we are able to repay up to 50% of the token that was borrowed. The amount of token that was borrowed is 20,532. The close factor is 50%.
00:07:31.422 - 00:08:11.330, Speaker A: So we are able to repay up to 50% of this number. The liquidity incentive is 1.8, meaning that we are rewarded with the supply token at an 8% discount. Notice that in the beginning we supplied zero point 99 WBTC, but now it says the supplied amount is zero point 64. This is because the remaining amount was liquidated and given to the contract that called liquidate. And you can see at the bottom over here that the contract that called liquidate now owns zero point 34 of WBTC. So that is how liquidation works on compound.
00:08:11.330 - 00:08:40.286, Speaker A: Now, when I was running the test, the test kept on failing. This is because we want to borrow as much as possible, as close as possible to the max borrow. But if you borrow too much, then the function will fail and the test will fail. So in order to get the test to pass, I had to tweak this number a couple times. Now, if you're going to run this test on your own as well, then you'll probably have to tweak these numbers. All right, that's all I got for this video. Thanks for watching.
00:08:40.286 - 00:08:41.370, Speaker A: Have fun coding.
