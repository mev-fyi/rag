00:00:00.490 - 00:00:53.274, Speaker A: Today I'll show you how to test timestamps and caller in ikina. Here I have a simple test function called ikina test pass and it returns the state variable which is initially set to true. Now when we run a test in ikina this function will only fail if ikenna is able to call this function set fail. When it does call this function it will set pass to false. So this test ikina test pass will fail. For akinnot to be able to call this function set fail the current timestamp has to be greater than or equal to delay plus created at created at is the timestamp when the contract is deployed and delay is set to seven days. So if Akinnot can fast forward the timestamp to more than seven days after this contract is deployed then it will be able to call this function set patch to false and the function will fail.
00:00:53.274 - 00:01:31.400, Speaker A: Let's give it a try. Inside my terminal I'll run akin inside docker by typing docker. Run it. Rmrm means that after you exit docker then delete the container as well. B we'll load the current directory into dashcode by typing PWD code. So here we're saying load current directory to dashcode and the image that we're going to be using is trailobitsecurity toolbox. Once inside docker we'll go to code by typing CD code.
00:01:31.400 - 00:02:14.534, Speaker A: And this is where the contract we're going to be testing today is located at. If I hit ls the contract that we're going to be testing today is Ekina test time and caller. So to test with Ekina I'll type echidna test. The name of the contract is echidna test time and caller sol. Now I don't want to be testing with the default 50,000 times. Instead I'll just test it 5000 times by typing test limit 5000. And as expected the test failed because Akinna was able to fast forward a timestamp by more than seven days and then call the function set fail now.
00:02:14.534 - 00:03:01.430, Speaker A: However, if I were to extend this delay for example let's say 70 days and then run the test again. Notice that the test passed and Akino was not able to call the function set fail. This is because the default maximum timestamp that Akino will fast forward is seven days. So when we extend it to 70 days it cannot fail to call this function set fail. To extend the maximum timestamp to be greater than seven days then we'll need to create a config file which I did over here called time yaml if I open it, you can see here that I'm going to set maximum time a day. Currently this is in seconds and this is seven days. We'll extend this to 70 days.
00:03:01.430 - 00:03:43.950, Speaker A: So that's multiply by ten by adding another zero. Save the file, open the terminal again and then we'll run the same test. This time we are also passing the config file by typing configtime yaml and now notice that the test failed again. This is because Ekeno was now able to fast forward the timestamp up to 70 days which we set inside the config file. So this was an example of how to test timestamps in Akindo. Next, let me show you how to test callers with Akindo. Akino has three default callers, so these are the addresses that will be calling this contract.
00:03:43.950 - 00:04:44.350, Speaker A: You can change these default callers inside the config file as well. To show you that these three addresses are the default callers, I've created a test function called akino test sender which would check that the sender is equal to one of the senders that I defined over here. This state variable sender is set when Itkena calls this function, set sender. When it cannot calls this function, it sets the state variable sender to message sender. Afterwards Itchena will run this test Ikena test sender and make sure that this state variable sender is equal to one of the senders that are defined in here. We'll run the test again and notice that the test passed. This means that all of the sender, all of message sender that was used to call this function, set sender is equal to one of these three addresses to make the test fail.
00:04:44.350 - 00:05:11.990, Speaker A: If I change one of the addresses, for example from one to three and then run the test again, notice that the test fail and the counterexample that Akina gave us was calling set sender with one of the default addresses. So these are the three fault addresses that will be calling into your smart contract and these addresses can be configured inside the config file.
