00:00:00.520 - 00:00:45.710, Speaker A: There's a clever bitwise trick to set the rightmost zero to a one and everything else to a zero. For unsigned integers the way you would do this is to negate this unsigned integer and then do a bitwise and with x plus one. For example let's say that we have an unsigned integer. Let's call this x equal to 1011 and this number is not in decimal, it's in binary. And now when we do the splitwise trick of negating X and then doing a bit yz with x plus one we would get a one for the right most zero and everything else will be equal to zero. So for example for this number let's first find the rightmost zero, the right most zero. So starting from the right and then going left we see that the right most zero is over here.
00:00:45.710 - 00:01:20.270, Speaker A: So this will turn into a one and everything else will turn into a zero. To the left of this zero everything will be a zero. So you have zero zero and this rightmost zero will be a one and then everything to the right of this will also be a zero. So we get zero zero. But how does this bitwise trick actually work? To understand this trick let's break this down into two parts. To negate an x and to add one to x let's start with negating X. When we negate this x it will flip all zeros to ones and all ones to zeros.
00:01:20.270 - 00:01:41.378, Speaker A: So let's use this example. So we have x equal to this. When we negate this this is equal to all the zeros from X will turn into a one and all the ones will turn into a zero. So the first bit starting from the left will be a zero. The next one will be a one. The next one will be a 00100. So that's negating x.
00:01:41.378 - 00:02:12.024, Speaker A: How about X plus one? Now at first it doesn't seem like X plus one is doing anything special but here it is. Since we add one to x it will turn the rightmost zero to a one. And to see this let's use this example and then let's do x plus one x plus one. Since the first bit starting from the right is a one and when we add one this will become a zero. And then we carry the one over to the next position. Here we need to add a one. So this one will also become a zero.
00:02:12.024 - 00:02:47.892, Speaker A: Then for the next position we need to add a one. So this will also become a zero. And then on the next position we need to add a 10 plus one is a one. Now notice what happened here we said that the rightmost zero is over here, and when we added one to this number, it flipped this rightmost zero to a one, and everything to the right of this rightmost zero turned into a zero. And also notice that all the bits to the left of this rightmost zero remains unchanged. Here we have 1011 and the same is over here. 1011.
00:02:47.892 - 00:03:32.592, Speaker A: So what we just observed here is that it flipped all the ones to a zero that are to the right of the right most zero. It also changed the right most zero to a one, and then everything to the left of this right most zero remained the same. So now that we've seen how negation of x and X plus one changes the bits, let's now see what happens when we do a bit Y zan of the negation and X plus one. So again, this is what X is equal to. Let's also paste the negation of x. So I'll copy this and then paste it here and then x plus one. Okay, now that we have x negation of x and x plus one, let's see what happens when we do a bit.
00:03:32.592 - 00:03:50.882, Speaker A: Yzdev the first bit zero and one will be a zero. The second one one and zero will again be a zero. Zero and one will be a zero. Zero and one again will be a zero. One and one will be a one. And then the rest are zeros. Okay, so this is what we get.
00:03:50.882 - 00:04:18.410, Speaker A: Let's check back our answers scrolling back up. See over here that this is our answer and we can see that we also get the same answer over here. Let me show you an example using Python. So let's say X is equal to int. I'll copy this string and then tell Python that this is binary and let's print what X is equal to. So X is equal to 183. Let's now use this bitwise trick.
00:04:18.410 - 00:04:56.660, Speaker A: So I'll type l is equal to negate x and x plus one. Let's print this Ll print l. I want to print this l as both as a number and as binary string. So I'll type f l colon zero eight b. And this tells Python to print this number l as binary so as zeros and ones having the size eight. Okay, let's execute the code and we get l is equal to eight, and in binary it is equal to this number over here, which is what we calculated over here.
