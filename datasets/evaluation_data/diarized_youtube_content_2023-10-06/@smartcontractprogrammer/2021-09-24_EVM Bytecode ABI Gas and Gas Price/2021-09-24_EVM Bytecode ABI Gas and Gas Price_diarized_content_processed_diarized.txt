00:00:00.490 - 00:00:30.182, Speaker A: If you're starting out with smart contract programming, there are some basic concepts and terminology that do not exist in other programming language. In this video, I'm going to explain what they are. Let's go. So you've written your first smart contract either in solidity or byper. When you compile a contract, there are two outputs that you should know about as a developer, bytecode and ABI. ABI stands for application binary interface. I'll explain what ABI is later.
00:00:30.182 - 00:01:09.838, Speaker A: I'll first explain what bytecode is. Bytecode is a translation of your smart contract code that machines can easily understand. This bytecode is composed of two parts, creation and runtime code. When you deploy a contract, the creation code is executed and the runtime code is stored onto the ethereum network. So that's bytecode translation of your smart contract code into something that computers can easily understand. Let me now explain what ABI is. Application binary interface using programming languages like JavaScript, Python and Rust, and the library named Web three, which is available in JavaScript, Python, and Rust.
00:01:09.838 - 00:01:44.202, Speaker A: Web three will be able to read this abi file and understand how to communicate with a smart contract. In other words, Web three is a bridge between programming languages like JavaScript, Python, and rust. And the ABI tells Web three how to communicate with a smart contract. Once your contract is deployed, you'll want to interact with it, and to do that, you'll need a wallet with some ether in it. Now there are two types of interaction that you can do with a smart contract. Get data. In other words, read the data stored in the smart contract, or send a transaction write something onto the blockchain.
00:01:44.202 - 00:02:16.914, Speaker A: For example, updating a data stored in the smart contract or sending ether from one account to another account. Reading data from a smart contract is free. However, to write something onto the blockchain, you'll have to pay a transaction fee. So, how much do you have to pay for the transaction fee? The short answer is gas times gas price. To understand what this means, you'll need to understand two things, EBM and gas. Let's start with EBM. Ethereum is a bunch of computers communicating on the Internet.
00:02:16.914 - 00:02:57.890, Speaker A: Each of these computer is called a node. When you zoom in, each computer is running an Ethereum software, and inside the software it is running a virtual computer, a virtual machine, hence the name ethereum virtual machine or EBM for short. Unlike a regular computer, the only thing that this computer can do is execute smart contracts. Recall that each smart contract is translated and stored as bytecode. When we translate bytecode into something that humans can understand, we get something that looks like the instruction list on the left. These are called opcodes. Each of these opcode has an associated gas cost.
00:02:57.890 - 00:03:35.890, Speaker A: But what is a gas? Gas is just a unit of computation. This means that when you execute your smart contract on the EBM, it's going to use up some gas and the total amount of gas that it's going to use is the total of these opcodes that were executed. If that didn't make sense, just remember that the EVM executes smart contracts. And to run the smart contract on the EVM, you need gas. Let me give you an analogy. If you want to run a car, you're going to need gas similar to our car. If you want to run a smart contract on the EVM, then you're also going to need gas.
00:03:35.890 - 00:04:04.540, Speaker A: So what have we learned so far that EBM executes smart contracts. Gas is a unit of computation. And to run the EBM you need gas. Okay, transaction fee is gas times gas price. We know what gas is, but what is gas price? If you want to drive a car, then you're going to need gas. And how do you get the gas? Well, you pay dollars. How much dollars do you need to pay? It depends on the current gas price.
00:04:04.540 - 00:04:32.660, Speaker A: How is the gas price determined? It depends on the market supply and demand. To run the EBM, you're also going to need gas. And how do you pay for the gas? You pay for gas with ethereum. How much ethereum will you have to pay for the gas to run the EBM? It depends on the gas price. For example, a single unit of gas might cost 0.1 e. How is the gas price determined? It depends on the market.
00:04:32.660 - 00:05:06.394, Speaker A: And what market are we talking about here? Well, let's say that you're willing to pay 0.1 e per gas to run your smart contract. Bob the bear is willing to pay a little bit more for the gas price to run his transaction. Charlie the cat is willing to pay even more than Bob. Some are willing to pay even more to have their transaction executed. Others are not so willing, they rather pay less. So you have a bunch of users competing for their transaction to be executed on the EBM.
00:05:06.394 - 00:05:39.674, Speaker A: The higher the gas price you're willing to pay, the less waiting time for your transaction. And on the flip side, the lower the gas price you're willing to pay, the longer that you'll have to wait for your transaction to be processed. To summarize, gas prices ETH over gas, how much ETH you're willing to pay per gas to execute your transaction. Higher the gas price, less waiting time for your transaction. That is how transaction fee is calculated. The amount of gas that your transaction will consume. Multiply the gas price that you set.
00:05:39.674 - 00:06:10.938, Speaker A: Okay, let's now talk about the two types of account in Ethereum, EOA and contracts. EOA stands for externally owned account. And what is an EOA? Well, it's pretty simple. EOAs are account controlled by a private key. In other words, if you can create an account address from a private key, then that account is an EOA. On the other hand, an address of a contract is not computed from a private key. So that's two types of account, EOA and contract.
00:06:10.938 - 00:06:18.500, Speaker A: The difference is EOAs are derived from a private key. I hope you found this video useful. Thanks for watching. See you later.
