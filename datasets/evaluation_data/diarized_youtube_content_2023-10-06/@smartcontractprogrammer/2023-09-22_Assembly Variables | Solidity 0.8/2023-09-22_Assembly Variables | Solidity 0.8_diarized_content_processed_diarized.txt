00:00:00.410 - 00:00:38.754, Speaker A: Inside one of the contract for the Makerdao stablecoin, there's a function that calculates compound interest rate. This function is called r power. The way it calculates the compound interest is by using what's called binary exponentiation. However, this code is written in assembly. So in this video series, I'm going to teach you just enough assembly so that we'll be able to understand this code. For the first part of this video series, we will learn how to declare variables inside assembly and also how to assign variables to them. Okay, to first write some code inside assembly, we'll declare the assembly block assembly.
00:00:38.754 - 00:01:07.538, Speaker A: And then inside here we'll write our code to declare a local variable. We can say that X. Let's make this equal to one, two, three. And the way we declare a variable inside assembly is by putting colon equal sign and let's say one, two, three. So this is how you would declare a local variable inside assembly. Now another example that I will show you in this video is how do we assign a solidity variable. Let's say untg, let's say this unt, we want to assign it to some value.
00:01:07.538 - 00:01:42.958, Speaker A: So what we do is inside here we say z equals, let's assign this to four, five, six. And this is how you would declare a local variable inside assembly, and also how to assign a value to a solidity variable. Let's try compiling this contract. I'll hit Ctrl s inside my remix to compile the contract and the contract compiled. So let's try deploying this contract. Open the deployment tab, deploy the contract, and then I'll call this function Yolet. And we get that the value of z is equal to four, five, six.
00:01:42.958 - 00:01:51.100, Speaker A: This four, five, six, we get it from this line to this variable z. We assigned four, five, six and then we returned it here.
