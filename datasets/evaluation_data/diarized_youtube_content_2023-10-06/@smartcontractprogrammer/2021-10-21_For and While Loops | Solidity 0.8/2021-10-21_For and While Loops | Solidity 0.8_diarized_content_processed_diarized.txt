00:00:00.650 - 00:00:40.540, Speaker A: Let's write for loops, and while loops in solidity. Then I'll explain why you should keep the number of iterations in your loop small. So, to write a for loop, you type four. We'll run this for loop from I equals zero, and run it ten times. So, we'll type uint I equals zero semicolon, while I is less than ten semicolon. I plus plus I plus plus means that I will be incremented after the for loop runs, and inside the curly braces, you'll write your code inside here. Now, if you want to skip one iteration of a loop, then you use the keyword continue.
00:00:40.540 - 00:01:14.100, Speaker A: Let me give you an example. So, we'll skip the loop if the index I is equal to three. And we do that by saying, if I is equal to three, then continue. So what would this actually do? We start the for loop from I equals zero. So the code will run, since I is not equal to zero, more code will be executed. The same goes for I equals one and I equals two. When I is equal to three, some of the code will be executed here.
00:01:14.100 - 00:01:46.800, Speaker A: And when the code reaches over here, since I is equal to three, we continue, we continue onto the next loop. So for when I is equal to three, this part of the code will not be executed. We skip on to the next loop. On the next loop, I is equal to four. Code will be executed, this part will be false, and we continue on to more code. And this continues until I is equal to nine. So that's continue.
00:01:46.800 - 00:02:30.106, Speaker A: It skips the current iteration. Now, if you wanted to exit out of the loop, then you will use the keyword break. For this example, we'll break, meaning that we'll exit out of this loop when I is equal to five. So we'll type, if I is equal to five, then break. So now, this loop will run from I equals zero to I equals four. When I is equal to five, this part of the code will be true, and it will break out of the loop, meaning that we finish the loop at I is equal to five. The loop will not run for I equals six, seven, eight, and I, it exits the loop when I is equal to five.
00:02:30.106 - 00:03:10.730, Speaker A: So that is break. Now, let me show you an example of a while loop. The syntax is while some kind of condition, curly braces. And you will write your code inside here. If we say that the condition is true, then this means that this while loop will run forever. Obviously, we don't want to do that, so we'll create a condition. We'll start with an index u into j equals zero, and then say while j is less than ten, execute some code, and at the end of the code, increment the index j by typing j plus plus semicolon.
00:03:10.730 - 00:03:43.586, Speaker A: That's the syntax for writing a while loop in solidity. Let me give you a more practical example. We'll write a function that given an input n, it will sum all of the numbers from one to n. So I'll type function. I'll name this function sum. It's going to take in a single input un n, which is the number that we're going to be summing from one to n. It's going to be external peer, and it's going to return the sum from one all the way up to n.
00:03:43.586 - 00:04:48.806, Speaker A: So the type that we're going to be returning is un. We'll initialize a unit that's going to be keeping track of the running sum, and at the end of the function we will return the sum. Now using a for loop, let's now add all the numbers from one all the way up to n. So we'll say four un I starting at one while I is less than or equal to n, I plus plus and inside the curly braces. So inside the for loop we'll say s add to the current sum I, and this loop will add all of the numbers from I equals one all the way up to I equals n. So this is an example of how to use a for loop to write a function that sums all the numbers from one to n. Now if you wrote this code in other programming languages like JavaScript or Python, then you would have absolutely no problem running this code whether you loop it 100 times, thousand times, a million times.
00:04:48.806 - 00:05:03.740, Speaker A: However, in solidity, the number of loops that your function might run is something that you need to consider when you're writing a loop. The bigger the number of loops, the more gas it use. Keep the number of loops small and your gas cost low.
