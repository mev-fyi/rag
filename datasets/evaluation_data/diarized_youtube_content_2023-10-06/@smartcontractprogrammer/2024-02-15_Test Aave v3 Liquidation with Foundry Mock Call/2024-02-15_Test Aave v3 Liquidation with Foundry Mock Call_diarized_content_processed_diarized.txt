00:00:00.250 - 00:00:52.118, Speaker A: I want to test the liquidation on ave b three using foundry fork. One of the conditions that need to be satisfied to trigger our liquidation is that the health factor be less than one. This health factor is calculated by summing up all of the tokens that are borrowed by a user, converting it in terms of US dollar, and then dividing by the amount of collateral that this user provided, and then again converting this collateral into US dollars, and then multiply this collateral value by some number between zero and one. And this is called a liquidity threshold. Basically, if you borrow more than some percentage of the collateral that you provided, then you can be liquidated. So to test liquidation on foundry fork, I'll need to supply collateral, borrow some token, and then have the price of collateral fall so that I can be liquidated. For the price of collateral to fall, I will somehow need to manipulate this price oracle.
00:00:52.118 - 00:01:35.878, Speaker A: So this line of code calls the price oracle and then calls getasset price. I need this function to return a small number so that my debt is more than my collateral and I can liquidate myself. One way I can have the price oracle return a small number is to register a new price oracle and then have this Getasset price return a small number. However, there's a simpler way. Using one of the cheat codes from foundry instead of registering a new price oracle here, I can just have this part of the code return some small number. The cheat code from foundry that we'll use is called mock call. What this function will do is it will mock all calls to an address for the input we will pass in the target contract address and the function that we want to mock.
00:01:35.878 - 00:02:19.450, Speaker A: And we also specify the output that this function will return. So by using this function, we'll be able to control the price that is returned by the price oracle return a low price for our collateral, and we'll be able to test liquidation on Abe b three. I wrote some code in foundry to test liquidation on Abe b three. The user will supply one ref to Abe b three and then borrow some die. Next, we will mock call to set the price of ref to something really low, and then we'll check that the user can be liquidated, and then we'll call liquidation on other v three. So what we want to do is call foundries, cheat code, mock call, and then mock the call to the price oracle. So after the user borrows, let's set the price of wef to $2,000.
00:02:19.450 - 00:02:50.430, Speaker A: So I'll type Bm mock call. The contract that we'll need to call is price oracle. This address of the price oracle is defined over here. And then the function that we'll need to call. Going back to Abe's code, the function that we'll need to mock is getasset price. So I'll copy this, and then inside here I'll type iabe oracle getasset price. This interface, iabe oracle.
00:02:50.430 - 00:03:26.922, Speaker A: I've defined it over here. Iabe oracle getasset price. This function will take in a single parameter asset. So the price that we want to mock is for ref. So we'll need to encode the function to call and the input to pass, say abi encodecall call iabboracle getasset price. And the input that we'll pass is the address of WEF contract WEF. Next, we specify the output that will be returned when this function getasset price is called, say Abi encode.
00:03:26.922 - 00:03:57.950, Speaker A: We'll return a unit to 56, unit to 56. And let's say we'll return that the price of WEF is 2000, so say 2000 times. The asset price will have eight decimals. So say one e eight. So a user provides one WEF for collateral, and at this point the price of one WEF is $2,000. Next, we want to set the price of the collateral, in this case WEF, to something though, so that we can trigger a liquidation. So again we'll mock call to the price oracle.
00:03:57.950 - 00:04:53.398, Speaker A: And let's say this time we'll return $1,700 per WeF. Here, notice that we borrow 1500 die. And now our value of collateral is 1700 at this price and the amount of debt that we have, this will return a health factor of less than one. And this means that this position can be liquidated again by saying muck call over here all calls to the price oracle for the function Getasset price with the input wef will return 1700 for the price of WeF. So when we call liquidate on abe b three inside the code of Abe b three, it will execute this part of the code to get the price of the collateral. And here it will return 1700, which we specified over here, at this price, the health factor of user zero is less than one. So liquidation will succeed.
00:04:53.398 - 00:05:27.174, Speaker A: Let's give it a try. I'll set the environment variable name mainnet fork URL to RPC URL that I got from alchemy. The purpose of doing this is to make the command that I'm going to type now easier to read. So I'll type forge test fork URL. The URL will be main net fork URL and then the test to execute will be matchpath test mock call sol. And then we'll execute the test. Okay.
00:05:27.174 - 00:05:40.450, Speaker A: And our test passed. So this means we were able to successfully liquidate our position. And the reason why we were able to successfully liquidate our position is because we were able to mock the price that is returned by the price oracle.
