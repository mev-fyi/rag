00:00:00.250 - 00:00:29.366, Speaker A: Today, I'll solve the 22nd challenge on eternal God Dex. The goal of this devil is for you to hack the basic Dex contract. You start with ten tokens of token one and token two. The Dex contract starts with hundreds of each token. You will be successful if you manage to drain all of token one or token two from the Dex contract. I'll copy this code over to my code editor and also deploy this challenge I've is the code from Ethana over to my code editor. Let's go over the goal of this challenge again.
00:00:29.366 - 00:01:02.778, Speaker A: We start with ten token one and token two. The DeX has 100 tokens each, and the goal is to drain all of token one or token two from the Dex. So scroll down. Let's take a look at the Dex contract first. I noticed that it has a modifier called only owners, so I assume that we won't be able to call these functions scroll down, get swap price function and balance of are readonly functions, and we have a function called approved and we also have a function called swap. The swap function does some basic checks and calls. The function gets swap price, and then performs the actual swap.
00:01:02.778 - 00:01:46.030, Speaker A: The way the amount of tokens that come out out of this swap is calculated is by calling the function get swap price. So let's take a look at this function get swap price. The way that this function calculates the amount of tokens that is going to go out is it multiplies the amount that came in by the amount of tokens that's going to go out, and then divide by the amount of tokens that we're selling. We know that this deck starts with 100 tokens of token one and token two. And notice that it is also doing a division, so we might be able to do some rounding error and be able to drain the tokens from this contract. For example, let's say that we put ten of token one and the Dex has 100 tokens each, and once you do the math, you'll get ten of token two out. Once we have ten token two.
00:01:46.030 - 00:02:26.214, Speaker A: At this point, the dex will have 90 token two and 110 token one. So we can do a swap from token two to token one, put in ten token two, and get out 24 token one out. Notice that just by doing a swap from token one to token two, and then doing a swap from token two to token one, we get more token one than what we started with. We can repeat this process several times, swapping from token one to token two, and then from token two to token one. At every step we will get more tokens from the trade. By repeating this process, we'll be able to drain the decks. And to get the token balance to be completely equal to zero, we'll have to do some math for the last swap.
00:02:26.214 - 00:03:00.214, Speaker A: We'll need to do some math to calculate the amount of tokens that go in so that the balance of the other token will be exactly zero. One swap before the last swap. These are the balances of tokens. Token one is 69 and token two is 110. So, for the last swap, we will be putting in some amount of token two, and then try to drain token one to be zero. And we can calculate the exact amount of tokens two to put in to get the balance of token one to zero by putting in the numbers into this equation. So what we're solving for is the amount of token two to put in.
00:03:00.214 - 00:03:32.494, Speaker A: So token two. Amount in times two will be token one. So this will be balance of token one divided by from will be token two. So this will be balance of token two. Putting in numbers into this equation will give us the amount of tokens that will come out. Earlier, I made a mistake. The amount of token one inside this contract after this last trade will be 69 plus 41 in, so this will be 110.
00:03:32.494 - 00:04:06.170, Speaker A: Token ones from 110 token 265 went out. So now the current amount of token two inside the decks will be 45. And for the last step, we are going to put in some amount of token two and try to bring the balance of token one, which is 110 to zero. The amount of token one that must come out from this trade, you'll say 110, and that is the equation that we'll need to solve. So, let's plug in some number into this part of the equation. 110 is equal to token to amount in. That is the variable that we don't know.
00:04:06.170 - 00:04:51.962, Speaker A: So I'll just say token to amount in times. What is the balance of token one? The balance of token one is 110 divided by. What is the balance of token two? Balance of token two is 45. So, solving for this equation, solving for token two, amount n, we get 110 divided by 110 times 45. I'm just dividing both side of the equation by 110, and then multiplying by 45, we get token to amount in. Let's simplify the left side of this equation. 110 divided by 110 that is equal to one times 45 is simply equal to 45.
00:04:51.962 - 00:05:26.318, Speaker A: So this is 45 is equal to the token two amount in. Okay, we're now ready to write our hack contract. What we're going to do is do a swap multiple times. And for the last step, we'll put in 45 token of token two. This would bring the token one balance of the dex to zero. So I'll cut this and then paste it up at top, and then we'll write our hack contract, contract hack. Notice that the Dex contract is using the open zeppelin contracts, but we're going to be using remix to deploy the contract.
00:05:26.318 - 00:06:12.178, Speaker A: So I'm going to declare some interface and then just copy and paste the code above the import. So the interfaces that we're going to need is the Dex contract, token one, token two getslop price and the function swap. And we're also going to need an IERC 20 interface. With that we'll declare some state variables. So I'll say I Dex private immutable, I'll name it Dex and IRC 20 private immutable, token one and token two. Next, we'll initialize these inside a constructor, constructor, IDEx underscore Dex. We'll set the Dex equal to the dex from the input, and then we'll set token one and token two.
00:06:12.178 - 00:06:52.286, Speaker A: Token one equal to IRC 20 of Dex token one and token two is IRC 20 Dex token two. So next we'll write a function poem. This will be the function that we're going to execute to drain the token from the dex. This will be external. First, what we're going to do is transfer token one and token two from message sender. So that will be from our account token one, transfer from message sender. To address this, we start off with ten tokens, so ten and then do the same for token two.
00:06:52.286 - 00:07:26.042, Speaker A: Next, we'll need to approve the decks to spend from this contract. So say token one, approve address of Dex. Since we're going to be doing multiple swaps, this will not be ten tokens. I'll just set it to the max un, so say type un max and then the same for token two. Next we're going to be calling the function to do multiple swaps. So this is what I'm referring to. We're going to do some multiple swaps and eventually we'll drain the amount of tokens inside the decks to zero.
00:07:26.042 - 00:08:15.530, Speaker A: So first I'll create a helper function function swap and then say iErc 20 token in, Ierc 20 token out. This will be a private function, and what this function will do is perform a swap by calling the Dex Dex swap address of token in address of token out for the amount all of token in token in balance of address this. That completes the internal function. To do a swap. It's basically going to swap all of the token in inside this contract. So next we'll need to perform the swaps. So how many times do you need to do once, twice, three times, four times, five times, and then there is one for the last time.
00:08:15.530 - 00:08:35.218, Speaker A: So in total six. So first I'll do the swaps, say underscore swap token one for token two. That's once. Next we'll do a swap from token two to token one. So that's two times. We'll repeat this again, that's four times. And then on the fifth time we'll do from token one to token two.
00:08:35.218 - 00:09:25.898, Speaker A: And then for the last swap we'll need to swap 45 token two, and then we should get back 110 token one. So say Dex swap address of token two, four address of token one, further amount 45. And then lastly we'll check that the balance of token one inside the dex is equal to zero. Require token one balance of address Dex. It should be equal to zero, otherwise dex balance not equal to zero. Okay, that completes our hack contract. So I'm going to copy the interface and our hack contract over to remix.
00:09:25.898 - 00:10:04.714, Speaker A: Paste the code inside remix, hit Ctrl s to see if the contract compiles and the contract compiles. Next I'm going to go get the address of the Dex from Ethernet. Inside Ethernet I'm going to type f twelve to open the browser console and then get the contract address. Copy this, I'll paste this inside remix and then we're now ready to deploy the hack contract. Click on the deployment tab, make sure that we're connected to Gorely Testnet, make sure that we selected the hack contract, copy the address of the Dex, and then deploy the hack contract. Okay, we successfully deploy the hack contract. Now before we call the function pong, we'll need to approve the hack contract to spend our tokens.
00:10:04.714 - 00:10:50.880, Speaker A: So to do that we'll need to get the address of token one and token two. And to do that I'll select the IDEx and we're going to load this interface to get the address of token one and token two. Copy the address of Dex, paste it here, load the dex interface at the address of the Dex, scroll down, open the dex interface, click on token one and token two, and then I'll copy the address over here. So that's token one and address of token two. So the next step we'll need to approve the hack contract to spend from token one and token two. We'll select IRC 20. We'll do token one and then also though token two.
00:10:50.880 - 00:11:23.430, Speaker A: Scroll down. I'll first open token one, and then we'll need to approve the hack contract for the amount something greater than ten. Let's just put 100. Once the transaction is successful, we'll repeat the process for token two. Open token two. Then we'll need to call the function, approve, copy the address of the hack contract, paste the address of the hack contract here, and the amount should be something greater than or equal to ten. I'll just put 100 again and then transact.
00:11:23.430 - 00:11:43.610, Speaker A: Once we've given approval for the hack contract to spend our tokens, we're now ready to call the function pone on the hack contract and the transaction was successful. The last step of this challenge is to submit our instance. Once you beat the challenge, you'll see the button change to go to next level. Bye.
