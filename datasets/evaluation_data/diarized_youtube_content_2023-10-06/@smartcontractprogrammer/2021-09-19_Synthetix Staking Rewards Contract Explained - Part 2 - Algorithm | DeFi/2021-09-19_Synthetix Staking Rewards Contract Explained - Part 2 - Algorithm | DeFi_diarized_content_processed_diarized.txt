00:00:00.570 - 00:00:39.990, Speaker A: Okay, so we said in the previous video that a reward a user can receive between time intervals A and b is given by this formula. But this formula is not an efficient way to calculate the reward. So we derived a more efficient way of calculating the reward using this equation. I've mentioned that the first part of the equation can be stored in a single variable, and the second part of equation can be stored per user, also in a single variable. So let me walk you through an example and show you how it works. At t equals seven, Alice stakes 100 token. At T equals nine Bob stakes 100 token.
00:00:39.990 - 00:01:09.570, Speaker A: At t equals 14, Alice withdrawals the 100 token. And at t equals 18, bob withdraws the 100 token. The easiest way for me to figure out how this algorithm works is to go through an example and plug in some numbers. Let's start with an easy one. Let's track L of T. The total amount of token staked in the contract at T equals seven. Alice stakes 100 token L of T will be updated after t equals seven.
00:01:09.570 - 00:01:32.710, Speaker A: So at T equals seven it is still equal to zero. At t equal to nine, Bob stakes his 100 token. The total amount staked will be updated after t equals nine. So at this point we have 100 token staked from Alice. At t equals 14. Alice withdrawals 100 token. At this point, both Alice and Bob has 100 tokens staked.
00:01:32.710 - 00:01:58.382, Speaker A: So in total we have 200 tokens staked. Alice withdrawals 100. But this will be updated after t equals 14, so the total is still 200. At t equals 18. Bob withdrawals 100 token LLT will be updated after t equals 18. So at this point there are in total still 100 tokens staked by Bob. Okay, let's now calculate the left part of the equation.
00:01:58.382 - 00:02:25.580, Speaker A: For each t here, we'll say s is equal to the left part of the equation. Times r. At t equals seven, l of t is zero. So s is also equal to zero. At t equals nine, l of t would have been equal to 100. That's the 100 stake from Alice for 2 seconds between t equals seven and t equals nine. So to s we will add r over 100 times nine minus seven.
00:02:25.580 - 00:03:26.960, Speaker A: At t equals 14, l of t would have been 200 for the time between nine second over here and t equals 14. So to the sum we will add r over 200 multiplied by 14 minus nine, and at t equals 18, l of t would have been 100 for the time between t equals 14 and t equals 18. So to s we will add r divided by 100 multiplied by 18. -14 okay, so let's now calculate the right side of the equation, this number will basically be the same as this, except we'll need to store the number per user. When the user interacts with the smart contract here, we'll say p of user to indicate that this value will be stored differently per user. At t equals seven for p of user. So, p of alice, we will store s that is over here.
00:03:26.960 - 00:04:02.278, Speaker A: So s over here for Alice will be equal to zero. At t equals nine, s will be equal to this value, and p of bob, we will store that value over here. At t equals 14. This is the s value. And for Alice, we will store p of alice equal to this number. And at t equals 18, we value s and store p of bob equal to this number. Once we have all these variables calculated, let's now calculate our balance from time between zero and 14.
00:04:02.278 - 00:04:50.014, Speaker A: This is the time that Alice withdraws her 100 token. How much reward will she get? This is the equation that we'll be using, and all of the numbers that we need is stored in this table. So, how much reward will she receive? Well, she has 100 tokens staked, and we'll need to multiply this by s at t equals 14 and pl valice. The value of s at t equals 14 is equal to this, which is the summation of all these values over here. So, when we expand it, we will get r over 100 times nine minus four plus r over 200 times 14 minus nine from over here. And this equation over here will get this value. Now, we need to get this value, which is stored in Pl ballast.
00:04:50.014 - 00:05:19.470, Speaker A: The last time Alice interacted with smart contract is over here. And at this point, pl ballast was equal to zero. So this will be equal to zero. We simplify the equation and we get 4.5 r for Alice. How about for Bob? How much reward will Bob get from t equals zero to 18? Well, Bob had 100 tokens staked. And using this equation over here, we'll find s and p of bob.
00:05:19.470 - 00:05:53.294, Speaker A: The value of s for bob will be summation of all these values over here. So we're going to add this, we're going to add this expression, and we're going to add this expression, and we'll get this expression over here. This will correspond to this summation over here. To get this value for bob, it will be stored in p of bob. The last time bob interacted with this smart contract was over here, and this will store the p of bob. The s value at this point is equal to this. So, we replace p of bob with the value that you see over here.
00:05:53.294 - 00:06:49.680, Speaker A: Simplify the math and we get that Bob receives 6.5 r. So that is an example of how storing one variable to keep track of this number, and using the mapping to store a value per user to keep track of this number, we are efficiently able to calculate the amount of reward a user will receive. So far we've only seen simple example, but what if Alice decides to stick more? Would the algorithm still work? Well, we can make a simple modification to the algorithm so that the calculation of rewards still works. So when Alice's staking balance changes over here, what we do is we calculate the reward that Alice will receive up until this point using the same algorithm. And then we set p of Alice to the value of s over here. And basically that is how the algorithm for the synthetic staking reward contract works.
00:06:49.680 - 00:06:52.570, Speaker A: In the next video, we'll actually code the contract.
