00:00:00.730 - 00:00:38.738, Speaker A: Today I want to answer the question, how much token can I provide as liquidity into a uniswap pair contract? Let's say that I have this much amount of dai. I'll denote this as a so I have a amount of dai. Likewise, I have this much ETH. I have b amount of ETH. The Uniswap reserve has this much dai, and the amount of dai inside Uniswap, we'll say is R of A. The amount of ETH inside this contract, we'll call this r of B. The goal here is I have this much dai and this much ETH.
00:00:38.738 - 00:01:18.918, Speaker A: How much of these tokens can I put into uniswap? The short answer is uniswap will take in as much as tokens that I can, as long as the pool ratio remains the same. What do I mean by this? Let's take a look at an example. Uniswap will take in this much amount of dai from me. So this much amount of Dai is transferred from my account into Uniswap. And the amount that was transferred into Uniswap, we'll call it a prime for EF. Uniswap will take in this much amount of ETH from me into the contract, and we'll call this amount b prime. Here I want to point out several things.
00:01:18.918 - 00:02:04.718, Speaker A: First of all, notice that the reserve ratio before the trade and after the trade is similar. We had about three times more dai than ETH. And after adding liquidity, this ratio kind of looks like it remains the same. The second thing that I want to point out is that uniswap didn't accept all of my dai. It only accepted a portion of it. Why is that? Well, if it did take all of my dai, then the reserve ratio of dai to ETH will not be the same ratio as it was before adding liquidity. So, in summary, when you try to add liquidity into Uniswap, Uniswap will take in tokens in amounts that will preserve the reserve ratio.
00:02:04.718 - 00:03:06.002, Speaker A: And we can express this using a mathematical equation, r of a over r of b, which is the reserve ratio before we add our tokens into the liquidity pool, is equal to r of a plus a prime over Rb plus B prime. Let's take a look at this equation using the drawing on the left. So this is r of A and this is a prime, and this is r of b, and this is B prime. And we're saying that the ratio of this to this must be equal to the ratio of this over this. So now using this equation, I want to figure out what a prime is and what b prime is. Well, we can rearrange this equation, multiplying r of a by this number, and multiplying this number over here by rb, and we get this equation. Some of the terms cancel out and we get the equation r of a times b prime is equal to rb times a prime.
00:03:06.002 - 00:04:31.890, Speaker A: And using this equation, we can come to the following conclusion. If a prime is equal to a, so we're replacing this a prime with a, then b prime will equal rb over ra times a, and the amount of b token that we have must be greater than or equal to b prime. To put it into simple English, if I want to put all of my token a, then the amount of token b that I have must be greater than or equal to this number over here, which is the amount of token b inside the uniswap reserve divided by the amount of token a inside the uniswap reserve times by the amount of token a that I have. Likewise, if I replace b prime over here with the b token that I have, then the conclusion is a must be greater than or equal to a prime which is equal to r of a over rb times b. Again, this means that if I want to put all of my token b's, then the amount of token A that I need must be greater than or equal to this number over here. Later you'll see that this is exactly the math that uniswap uses to add liquidity. And we got here from starting off from a simple formula that says the reserve ratio before adding liquidity must equal the reserve ratio after adding liquidity.
00:04:31.890 - 00:05:27.060, Speaker A: Now, I want to explain how the add liquidity function inside unisoft b two router works. So let's say that I call the function add liquidity and I want to add a amount of a tokens and b amount of b tokens. The function add liquidity will call an internal function called add liquidity and it returns a prime and b prime. These are the optimal amounts of token A and token B that uniswap will be adding to this uniswap pair contract. Next, it sends these optimal amounts of tokens into the uniswap pair contract, calls a function called mint to mint liquidity provider tokens, and then it gives you back the LP tokens. The math for calculating the optimal amount of token a and token b is inside the function add liquidity. So let's take a look at this.
00:05:27.060 - 00:06:15.390, Speaker A: The internal function add liquidity will do the following. First, it will try to calculate the optimal amount of token b if it were to take in all of your token a. And this is calculated using an internal function called quote. The quote will basically return b prime is equal to reserve of b over reserve of a multiplied by a. This is exactly the equation that we derived earlier. If the optimal amount of token b is less than or equal to b, which is the amount of token b that we provided, then this function will return a and b prime as the optimal amount of tokens to add liquidity. In other words, this is the amount of tokens that uniswap will be transferring from you into the Uniswap contract.
00:06:15.390 - 00:07:20.866, Speaker A: On the other hand, if this condition does not hold, then uniswap will try to calculate optimal amount of a using all of b. And again, this function quote will return a prime is equal to reserve of a divided by reserve of B multiplied by B. And then it would check that a prime is less than or equal to A. This makes sure that the optimal amount of token A that uniswap is going to take in is less than or equal to the amount that we provided. And if this check passes, then it will return a prime beat so this is the dumbed down version of the function at liquidity. This is the actual code, but if you follow what I just explained, then you'll be able to understand this code as well. The takeaway for this video is that the amount of can be that you'll need if you were to put in all of token A is Rb over RBA multiplied by A, and likewise for the opposite case, it will be r b divided by Rb times b and you can find this equation inside the function called quote.
00:07:20.866 - 00:07:22.740, Speaker A: Thanks for watching and see you later.
