00:00:00.410 - 00:00:40.726, Speaker A: It, your smart contract can have zero bugs, and it can still be vulnerable to other attacks. One of these attack is called front running. So in this video, we're going to be looking at front running. I'll explain what it is, and then we'll take a look at a code that is vulnerable to front running. All right, so first of all, what is front running? Before we can understand how front running is muted, let's first take a look at how a transaction is included into a block. So let's say that we have Alice and Eve and some miners. Alice sends a transaction to the miners, and then her transaction gets relayed to other miners.
00:00:40.726 - 00:01:49.710, Speaker A: Now, each miner keeps track of pending transactions in a transaction pool. These transactions in the transaction pool are transactions that are yet to be included in a block. So over here on the right, you can see that Alice's transaction is inside a transaction pool of this miner. Each miner will pick some transactions from the transaction pool to be included in the next block. So let's say that this is the next block to be mined, and this miner over here decides to pick this transaction and then Alice's transaction and then this transaction to include these in the next block. Now, let's say that this miner over here was successfully able to include these transactions in the next block, and these transactions will be included in the block over here. So that is how Alice's transaction is included into a block.
00:01:49.710 - 00:03:04.390, Speaker A: Let's now look at how front running works. So let's rewind the time back to where Alice's transaction is still inside the transaction pool. This is how EB is going to do a front running on Alice's transaction. So first, EB sees that Alice's transaction is inside the transaction pool, and she decides to send her transaction, which gets relayed through the network, and Eid's transaction gets included in the transaction pool of this miner. Now, let's say that this miner decides to include Eve's transaction and Alice's transaction and some other transaction to include in the next block. Now, notice that even though Alice sent the transaction first, EB's transaction will be included into the block before Alice's transaction. Here, let's say that EB's transaction comes before Alice's transaction because EB paid a higher gas price than Alice, and this transaction gets included into the block.
00:03:04.390 - 00:04:19.150, Speaker A: So the end result is that although Alice sent the transaction first because e paid a higher gas price, her transaction was included before Alice's transaction. Now, what are some incentives for E to have her transaction included before Alice's transaction. Well, for example, let's say that Alice knows a secret to unlock ten ethers from a contract, and the secret to unlock that ten ether is included in this transaction. Then, after Alice sends her transaction, and while it's still in the transaction pool, Eve can look into the transaction pool and see Alice's transaction and also see the secret to unlock ten ether. So Eve will send a similar transaction to unlock ten ether and to increase her chance that her transaction will be mined before Alice's, she'll set a higher gas price than Alice, and as a result, Eve's transaction will be mined before Alice's. Eve gets to claim that ten ether, even though Alice found the secret and she was the first one to send the transaction. And that is how front running works.
00:04:19.150 - 00:05:04.110, Speaker A: Let's now examine a code that is vulnerable to front running. Over here, I have a contract called find this hash. And let's say that this contract stores ten ethers. And if you can find a string that hashes to this hash, then you are a winner, and you will be rewarded with ten ethers. This contract is vulnerable to front running. How's that so? Well, let's imagine that Alice finds a string that hashes to this hash over here, and she sends a transaction. Now, EB sees the solution inside the transaction pool, and EB also sends her transaction with higher gas price.
00:05:04.110 - 00:05:37.140, Speaker A: Eb gets her transaction mined before Alice, and she is the one that is rewarded with the ether stored in this contract. So, by the time Alice's transaction is executed in this contract, there will be zero ethers in this contract. That is how this contract is vulnerable to front running. The takeaway here is that you can have a contract that is bug free, but your contract might be vulnerable to front running if there are some incentives to reorder transaction. Thanks for watching, and see you later.
