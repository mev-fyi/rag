00:00:01.130 - 00:01:14.990, Speaker A: Functions can be declared to have certain visibility, like public, private, internal and external functions can also be declared to have certain behavior like view, peer, and payable. In this video we're going to go over what view and peer functions are functions declared with the keyword view. Promise not to modify the state of the blockchain according to the solidity documentation, the following are considered to modify the state of the blockchain writing to state variables emitting events, also known as logging. This is a topic for another video. Creating other contracts using self destruct this is a function to call when you want to delete your contract from the blockchain, sending ether by calls, in other words, calling a function to send ether to another address, calling any function not marked as bu or peer, using low level calls, and using inline assembly that contains certain opcodes. So if a function is marked as view, then that function cannot contain any code that does any of the actions mentioned here. Let's go over some examples in remix.
00:01:14.990 - 00:02:05.350, Speaker A: First, we'll walk through an example of a valid view function. Next we're going to try compiling a function declared as view, but inside the function we're going to modify the state variable, and we're also going to try to compile a function again declared as view, but inside the function we're going to call another function which is neither view nor peer. First, let's see an example of a bu function that does keep the promise not to modify the state. Here we have a state variable named x initialized to the value one. We also have a function named add to x. Add two x takes in an integer variable named y as input and returns a sum of x plus y, where x is a state variable. This is a valid view function since it reads the state variable x but does not update it.
00:02:05.350 - 00:02:31.398, Speaker A: We can verify that calling this function does not update the state variable x. Compile and deploy the contract. Next, let's check the value of x. It should be one, which is what we initialized it to. We'll call this function later again and verify that the state variable was not modified. Next, call add to x with some input. You'll get the sum of x plus your input.
00:02:31.398 - 00:03:19.130, Speaker A: At the bottom of the remix console, you'll notice that calling this function did not create any transactions. As long as the function does not create any transactions, there is no way to change the state of the blockchain. So calling add to x did not modify any state. To be 100% sure, let's double check on the state variable x and make sure that it hasn't changed, it's still one. What would happen if we declare a function as view but inside the function? Modify the state variable let's give it a try. Create a function called update x and declare as view. We're going to violate the promise not to modify the state inside the function, update the state variable x by incrementing it and hit compile.
00:03:19.130 - 00:04:11.274, Speaker A: You'll see a compilation error like this. This is a really good feature of solidity that it can detect potential state changes. A function cannot be a bu function if it calls another function which is neither bu nor peer. Here we have a function called foo and it is not declared as view. We also have a function called invalid view funk, which is declared as view inside the function invalid view funk it's going to call another function foo, which is neither view nor peer. If you try to compile this code, you'll get an error like this stating that invalid view funk contains code that potentially modifies the state view functions declare not to modify the state peer functions make a stronger promise. Peer functions promise not to modify state like view functions.
00:04:11.274 - 00:05:08.366, Speaker A: In addition, they also promise not to read the state according to the solidity documentation, the following are considered reading from the state reading from state variables accessing the ether balance of an address, reading from special variables like block tx, and message, calling any function not marked peer, and using inline assembly containing certain opcodes. So a peer function cannot contain any code that does any of the actions mentioned here, and it can't also modify the state like a view function. Let's see some examples of peer function in remix. First, we'll go over an example of a valid peer function. Next we'll see some examples of invalid peer functions. Here is an example of a valid peer function. Here we have a function named add is a function that takes two inputs in j and returns I plus j.
00:05:08.366 - 00:05:38.940, Speaker A: This is a valid peer function since it doesn't read any state and modify any state. Next, let's see some examples of invalid peer functions. Revisit the add to function back at the top of the contract. This is a valid view function. However, since it reads from the state variable, this cannot be a peer function. Let's declare it as peer anyways and hit compile. You'll see a similar error to the ones we got when we tried to compile an invalid view function.
00:05:38.940 - 00:06:13.150, Speaker A: Similar to how a view function can only call other view or peer functions. A peer functions can only call other peer function. So a function declared as peer. But if it calls a non peer function, then it is invalid code let's see an example here. We have a function foo, which is neither viewed nor peer, and we also have a function invalid peer funk declared as peer. Inside this function, foo is called. Since foo is neither bu nor peer, this contract will not compile.
00:06:13.150 - 00:06:52.922, Speaker A: The code becomes valid when you declare foo as a peer function. So we've just seen that a peer function can only call other peer functions. It's easy to forget to declare a function as bu or peer. The good news is that the solidity compiler is smart enough to warn you that you might have forgotten to put these keywords on your functions when you compile your contract. In remix, you'll get warnings stating that functions can be declared as bu or peer. So don't forget to carefully check the warnings and fix your code if necessary. In this video we covered bu and peer functions.
00:06:52.922 - 00:07:06.340, Speaker A: Bu functions promise not to modify the state. Peer functions make a stronger promise than bu functions. They promise neither to modify the state nor read the state. Thank you so much for watching and I'll see you next time.
