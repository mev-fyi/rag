00:00:00.360 - 00:00:20.702, Speaker A: The gas cost to use memory in EVM grows quadratically. According to the website EVM codes. The equation for how to calculate the gas cost is given by these two equations. Let's simplify and then graph this equation. For simplicity. We'll say that memory byte size is always equal to 32. And then we'll ignore this plus 31.
00:00:20.702 - 00:00:58.256, Speaker A: What we're doing here is we're saying that we're going to use up unt 256, which takes up 32 bytes of memory. So if we store one Un 256 into memory, then memory size word will be one. If you use two Un 256 into memory, the memory size will be two and so on. So let's graph this equation memory cost using the graphing calculator. Here's the equation for how to calculate the cost for allocating memory into EBM. I copy this equation from EBM codes and we'll simplify this equation to graph it on the graphing calculator decimals. First we'll replace this memory size word with x.
00:00:58.256 - 00:01:40.078, Speaker A: So the equation will be x square divided by 512 and then plus three times x. We're only interested in the positive axis, so I'll zoom in a little bit on the positive axis and notice that the equation is quadratic. And this curve tells us that the cost to allocate new memory will be more expensive than the cost to allocate the current memory. Let's actually write some code to see how gas cost increases as we allocate more memory in solidity. I wrote a simple code that will allocate memory and then calculate the gas cost for allocating that memory. It has a single function called allocmem. It takes in a single input of un 256 n.
00:01:40.078 - 00:02:16.182, Speaker A: This will be the size of memory. To allocate this function, first calculates the gas cost and then creates an array of un 256 having the size n and this n comes from the input. After it creates this array, it will calculate the amount of gas that is left and taking the difference, we can see how much gas was used to create this array. I'll compile the contract by hitting control s and we'll deploy the contract. Then we'll call this function alloc mem multiple times and each time we'll increase this number. Nice. Let's start with zero.
00:02:16.182 - 00:02:53.796, Speaker A: For creating a UN 256 array of size zero it will cost 120 guess. How about size one? With size one it will cost 178 guess. And then how about two? For two it will cost 184. I'll keep doing this for different numbers of n and then afterwards I'll plot the results on the graphing calculator. Okay, back inside the graphing calculator, let's see the results. So, scrolling down here, I plotted the size of the UN 256 array going from size zero to all the way up to 200. And on the right side, I plotted the amount of gas that it used.
00:02:53.796 - 00:03:23.640, Speaker A: Let's see what these points look like. Zooming in, you can sort of see that this looks like a straight line. At this point, it looks like the amount of gas that is needed to create the array of size from zero to 200 is linear. It looks like a straight line. Next, I created a unit 256 array ranging from size 1000 all the way up to 20,000. And then we'll plot the amount of gas that was used. Again, I'll zoom out first and let's see this plot.
00:03:23.640 - 00:04:09.714, Speaker A: Okay, so I see a graph over here. I'll zoom out further, and you can sort of see that the gas cost to allocate a UN 256 array where the size of this array is really large, the actual gas cost is similar to the gas cost given by this equation, which is plotted as a green curve. And if we zoom out further and you can sort of see that this pink line converges with the green curve. So, in summary, the gas cost to use memory in EVM grows quadratically. For small usage of memory, this gas cost looks linear. However, for a large amount of memory, this gas cost looks quadratic. And because the gas cost grows quite logarithmically, this also means that you won't be able to use large amount of memory inside your code.
