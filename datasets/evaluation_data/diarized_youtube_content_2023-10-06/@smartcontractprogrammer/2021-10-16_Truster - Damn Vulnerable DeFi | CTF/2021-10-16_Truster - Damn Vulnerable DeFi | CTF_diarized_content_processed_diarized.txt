00:00:00.490 - 00:00:29.670, Speaker A: Hello dFI hackers. Today we're going to be competing challenge number three of damn vulnerable DFI. So let's take a look at the challenge. What's the setup and what is the winning condition? We have a lending pool offering a flash loan. This lending pool is offering a flash tone for DBT tokens for free. The pool has 1 million dbt tokens and we have zero dBT tokens. The challenge is to take all DBT tokens from the pool.
00:00:29.670 - 00:00:54.718, Speaker A: Let's take a look at the code. Here is the code that we're going to be hacking today. It's on the contract truster. Truster, then their pool. This contract has a single function called flash loan. So let's take a look at what this function does. The inputs are borrow amount, the borrow, the target contract to call when the flash loan is sent, and the data to call with it.
00:00:54.718 - 00:01:44.006, Speaker A: First it checks that the borrow amount is less than or equal to the balance of the damn vulnerable token inside this contract. And then it actually sends the token to the borrower, calls the contract with the data that we specify, and then it checks that the balance after the balance of damn vulnerable token after the flash loan is greater than or equal to the balance of the token before. So this is where we're supposed to execute our code for the flash loan. There are 1 million damn vulnerable token locked in this contract and our challenge is to drain all of the token from this contract. Pause the video here if you want to give it a crack. In a few seconds, I'll be explaining how to solve this challenge. Okay, let's go over the solution.
00:01:44.006 - 00:02:48.130, Speaker A: How do we drain the token from this contract? The basic idea is that we'll be able to approve ourselves to be able to spend the token locked in this contract when we call the function flash loan. And then after we call the flash loan, we transfer the token from this pool into our contract. We can approve ourselves because we can specify the target and an arbitrary data to call, and this function will be called from this contract by sending the target to the token and the function to call to approve ourselves to spend all of the token in this contract. We'll be able to transfer the token after we call the flash node. Let's put this attack into code. We're going to be initiating the attack from the truster exploit contract and then calling the attack function passing in the address of the pool and the address of the token hereby initiated the pool and the token here is our game plan. We're going to call the flash zone and then from the flash zone, we're going to be calling to approve ourselves to be able to spend all of the token locked inside the pool.
00:02:48.130 - 00:03:30.974, Speaker A: We do that by calling pool approve approve this contract to be able to spend an infinite amount of tokens after the flash loan is completed. This contract now has the approval to be able to spend the token locked inside the pool. So we'll call token transfer from transfer from the pool contract to message sender, which will be the attacker's address, sending all of the tokens locked inside the pool. Let's write this into code. We'll craft the data to pass to the flash loan. This will be the call to the approve function approving this contract to be able to spend an infinite amount. And then we call the flash loan for the borrow amount.
00:03:30.974 - 00:04:12.346, Speaker A: We're going to be borrowing zero tokens for the borrow. It doesn't matter because we're borrowing zero tokens, so we'll just pass the address of the attacker. The target contract to call is the address of the token, and the data to call is what we set over here. Call to approve this contract to spend all of the tokens locked in the pool. We borrowed zero tokens so we don't have to repay any tokens back to the flash loan. And then after the flash loan is done executing, we now have the approval to be able to spend from the flash loan. So we'll call token transfer from transfer from the pool to the attacker's address and all of the tokens docked in the pool.
00:04:12.346 - 00:04:31.610, Speaker A: Here's the exploit that we're going to be running. We're going to deploy the truster exploit contract and then call the attack function inside the terminal. I'm going to type NPM, run truster, and we won the challenge. Thanks for watching. See you in the next challenge.
