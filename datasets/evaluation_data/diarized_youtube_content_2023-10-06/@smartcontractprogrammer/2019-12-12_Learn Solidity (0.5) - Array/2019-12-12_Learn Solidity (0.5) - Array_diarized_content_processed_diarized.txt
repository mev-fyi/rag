00:00:00.330 - 00:00:27.922, Speaker A: You. Let's go over how to write and use an array in solidity. First, we'll go over how to write an array. Now, an array has three built in functionalities, push, pop and length. So we'll go over some examples using each of them. And for the last example, I'll show you how to remove an element from an array. To declare an array, you start with the type of array that you want to create, followed by a pair of brackets.
00:00:27.922 - 00:01:15.694, Speaker A: For our example, we'll create an array of un. So we start with the type of the array which is un, followed by a pair of brackets, and then we declare the name of the array. In this case, I'll name it my array. For this example, we want to be able to access this array from outside the contract, so we'll declare this array as public and that's it. This is how you would create an array of type un. Now, arrays can be either dynamically sized or fixed size, where you declare the size at compile time. This array that we just created is dynamically sized, which means that the size of the array can change after the contract is compiled.
00:01:15.694 - 00:01:51.454, Speaker A: To create a fixed sized array, you declare the size of the array inside the brackets. Here I've created a fixed sized array of type un where the size is fixed to ten. So this array has ten elements and you won't be able to change the size of the array. Each element of the array is initialized to its default value. The default value of type uint is zero. So when the contract is created, this array will be an array with ten zeros. Now you can also initialize an array with default values like this.
00:01:51.454 - 00:02:35.946, Speaker A: Here we've created a dynamic array of type un and stored three values, one, two and three into this array. So that covers how to write dynamic sized and fixed sized arrays. Next, let's go over how to use push, pop and length of an array. Push is a function that adds an element to the end of the array. Now to show you example of how to use push, I'm going to first create a public function that we can call from remix. We're going to name this function push and it's going to take in the number that we're going to push into the un array. To push an element into an array, you call the push method on the array passing in the element that you're going to push.
00:02:35.946 - 00:03:12.460, Speaker A: For this example, we're going to call the push method on my array, and this would append unsigned integers to the end of the array. Next, let's go over pop. Calling pop an array would remove the last element in the array. And we're also going to wrap this in a public function so that we could test it out from remix. And we're going to call this function pop inside the function. It's going to call the pop method on my array. And the last built in functionality available to arrays in solidity is the length property.
00:03:12.460 - 00:03:50.066, Speaker A: The length property stores the length of the array. We're also going to wrap this in a public function so that we could get the length of the array. Now compile and deploy the contract, and let's see some examples of push pop and length. Let's push some numbers. I'm going to push one, two and three. Now that we push three elements one, two and three, the length of the array should be three. And you can check that my array stores one, two and three by getting each element by the index.
00:03:50.066 - 00:04:23.690, Speaker A: Now, if you try to get an element that is out of bound, you'll get an error like this. Here the array has three elements, so the last element is stored at index two. And when we try to get the element at index three, we get an error. Next, let's try calling pop several times. When you call pop once, it should remove the last element. So the length of the array should now be two and our elements should be one and two. And if you call pop on an empty array, this would throw an error.
00:04:23.690 - 00:04:53.770, Speaker A: So my array has two elements and calling pop the third time will fail since my array is empty. Now, the length of the array should be zero. Calling the function get length, you can see that it does return zero. So that covers push pop and length of an array. Pop removes the last element of an array. If you want to remove an element from the middle of the array, you got to do something else. So let's go over that again.
00:04:53.770 - 00:05:41.702, Speaker A: We want to be able to test it using remix. So we're going to first create a public function that wraps the functionality of removing the element from an array. We're going to name this function remove, and it's going to take in the index of the array element that we want to remove. To remove an element from an array, you start with the keyword delete followed by the name of the array that we're going to remove the element from. In our case, it's my array followed by two brackets, and inside the brackets we put the index. So here we're telling solidity to delete the data stored at my array at this index. By the way, this is also the same syntax to get the value stored at a specific index in an array.
00:05:41.702 - 00:06:12.034, Speaker A: Now let's try calling the remove function. So go ahead and recompile and redeploy the contract. I'm going to push three numbers again. Let's try removing the second element. So we're going to call the remove function at index one. Now, deleting the element from an array does not change the length of the array. This is because when you call delete on the array at an index, it sets the value at the index to a default value.
00:06:12.034 - 00:06:56.958, Speaker A: The default value for un is zero. So when we call the function remove it, set the value of my array at index equal one to zero, which is the default value of un. So I just showed you how to delete elements from array, and deleting an element from array does not change the length of the array. Now I want to show you one trick to keep your array compact. What I mean by compact is that removing an element from an array would shrink the length of the array. And because the array gets smaller, this means that there is no space for deleted elements. The trick to keep an array compact is to copy the last element into the index that you want to delete.
00:06:56.958 - 00:07:34.458, Speaker A: For example, let's say that I have an array of elements one, two and three and four, and I want to remove the second element. We will copy the last element, which is four, into the second position and then remove the last element. Let's see this in code. Let's create a new contract. We need an array to store values and a function to remove elements from the array. As explained earlier, we first need to get the last element of the array, and this is how you do it. Next, we need to copy this value over to the position that we're removing.
00:07:34.458 - 00:08:27.360, Speaker A: The position that we're removing is my array at index. So we assign my value at index to the last element of the array, and then we remove the last element. Now let's test this out, and instead of manually pushing values into array, removing an element and then checking the values afterwards, let's write a function to do all of this for us. So we'll create a public function called test and push some values into my array. Next, we'll remove the element at index equal one. After removing the element, the array should now store one, four and three. So we'll write some assertions to assert that the length of the array is equal to three and the order is one, four and three.
00:08:27.360 - 00:09:06.614, Speaker A: Next, we'll remove the last element, and after removing the last element, the array should now store one and four. So again we'll write some assertions about the length and the order of the array. We assert that the length of the array is now equal to two and that the order is one and then four. Now compile and deploy the compact array contract. Call the test function and you can see that the function succeeded. So that covers how to remove elements from array while keeping the array compact. In this video we went over how to create an array.
00:09:06.614 - 00:09:39.700, Speaker A: Arrays can be declared as fixed size or dynamically sized. Arrays have three built in functionalities push pop and length and deleting an element creates a gap in the array. And one trick to keep the array compact is to move the last element into the place to delete. That's the basic topics of array that I wanted to cover in this video. If you have any questions let me know in the comments below. Thanks for watching, have a nice week and I'll see you in the next video.
