00:00:00.490 - 00:00:33.686, Speaker A: It's the weekend. What do defi hackers do? We capture the flag. So today I'm going to be explaining how to solve the second challenge at damn bonable defi native receiver. What's the setup and what's our challenge? So there is a lending pool that is offering a flash loan of ether. We see that our user has deployed a contract with Tenef and this contract is capable of interacting with the flash zone. Our challenge is to drain all e funds from this user's contract. Let's take a look at the code.
00:00:33.686 - 00:01:24.150, Speaker A: The first thing that I'm going to do is look at the setup. So inside the test native receiver I've opened the test file native receiver and inside here we can see how the contracts are set up. A lending pool is deployed and it is funded with some ether and then a contract capable of interacting with the lending pool to do a flash loan is deployed by a user and the user sends some ether into this contract. We will take a look at the lending pool contract and the flash loan receiver contract. Let's take a look at the lending pool contract first. So I'm going to scroll up and then under contracts native receiver, I'm going to click on the contract native receiver lender pool. The function that I'm going to look at first is called flash loan.
00:01:24.150 - 00:02:10.378, Speaker A: It does some checks, make sure that the borrow amount is less than or equal to the amount of ether stored in this contract. Then it checks that the borrow is contract. It lends out flash loan to the borrow contract. And then after the flash loan it checks that the balance of ether in this contract is greater than or equal to the balance of ether stored in this contract before the flash loan plus some fixed fee. So how much is the fee for this flash loan? Let's take a look. So I'm going to scroll up and it says that the fixed fee is one ether. So this means that when a contract calls flash loan they'll be able to borrow some ether, but by the end of the flash loan they'll have to pay an extra 1 meter.
00:02:10.378 - 00:02:55.262, Speaker A: Let's take a look at the flash loan receiver contract. This is the contract that the user has deployed. The function that we're interested in is called receive ether. This is the function that is called by the flashstone. When we call the function flash zone on the lending pool contract. You can see over here that the function receive ether is called and this is the function that is going to be called. This function first checks that the caller is equal to the lending pool, calculates the amount to be repaid checks that this contract has enough to repay the flash loan and then calls execute action during flash loan, which does nothing, and then sends the borrowed amount plus the fee back to the lending pool.
00:02:55.262 - 00:03:35.150, Speaker A: Our challenge is to drain all of the ether stored in this user's contract. Pause the video here if you want to give it a try. In a few seconds I'm going to explain the solution. Okay, let's go over the solution. How do we drain all of the ether from the flash loan receiver contract? The solution is anyone can call the flash loan and we are free to choose which contract to execute the flash loan on. Here we can set the borrow to be the contract that was deployed by the user, and for the borrow amount we'll set it equal to zero. This will execute a flash loan on the user's contract, borrowing zero but requiring a fixed fee of one ether.
00:03:35.150 - 00:04:06.442, Speaker A: If we call this flash loan multiple times, this will effectively drain all of the ether from the flash loan receiver contract. And we can do this because if we look at the receive ether function, it checks. That message sender is equal to the lending pool, but it doesn't check who initiated the flash loan. So anyone can call the flash loan. And the only check inside the flash loan receiver contract is that the call is coming from the lending pool. In other words, anyone can call this function as long as we call the flash. No.
00:04:06.442 - 00:04:42.306, Speaker A: And that is how we drain the ether from this contract. Let's write our exploit inside the test file. So inside the native receiver challenge, I'm going to scroll down and then we'll write our exploit here inside the exploit. The exploit is to call the function flashnown on the lending pool contract multiple times until all of the ether stored in the flashnown receiver contract is gone. And we can do that by calling the function Flashno. The target will be the flashnown receiver contract deployed by the user and borrow amount is zero. Let's run this exploit inside the terminal.
00:04:42.306 - 00:05:14.860, Speaker A: I'm going to type NPM run NAi receiver and we pass the challenge. The lesson to be learned here is that when you're writing a contract that receives flash loan, the first check is that you need to check that message send is equal to the lending pool, and you also need to check that the account that initiated the flash loan is an account that you trust. Not everyone should be able to call your flash loan contract. Thanks for watching. Stay tuned for the next challenge.
