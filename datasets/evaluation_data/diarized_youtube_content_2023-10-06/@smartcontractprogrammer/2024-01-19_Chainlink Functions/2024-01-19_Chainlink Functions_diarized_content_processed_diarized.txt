00:00:00.330 - 00:00:55.194, Speaker A: Did you know that chainlink functions will allow you to execute your JavaScript code? This code will be executed on the decentralized oracle network and then the response will be returned to a smart contract. In this video we'll go through a basic example of chainlink functions. To start off with I'll git clone this repo functions hard hat starter kit, click on code and then I'll copy this URL inside my terminal. I'll get clone the repo and then cv into this repo functions hard hat starter kit cv functions hard hat starter kit before we can run the code inside this repo, there are some setups that we will need to do. First, let's get matic and link on testnet. To get matic, I'll click on this link, fill out this form to get some matic for polygon testnet on mumbai. And why do we need matic here? Well, on ethereum testnet we will go to ethereum faucet to get some ether.
00:00:55.194 - 00:01:35.642, Speaker A: We use that ether to deploy smart contracts and then send transactions. On the polygon testnet you'll need matic. You'll need matic to deploy smart contracts and also to send transactions. Okay, once you have matic, the next thing that you'll need is chain links link on testnet and to get this I'll click on this second link, connect your metamask and make sure that your network is on polygon boombai testnet and then click on this button to get 25 links. You'll need this link token to execute functions on the chain links decentralized oracle network. Anytime you request a function to be executed, you'll need to pay link. So that is why we're getting some link over here.
00:01:35.642 - 00:02:05.330, Speaker A: Once you have matic and link, the next step is to install dino and node. And to do this I'll just copy this command and then execute it inside my terminal. Paste the command inside my terminal and then execute it. You can see over here that Dino was successfully installed. Okay, the next step is to install code in this repo. So we already get cloned the repo functions hard hat starter kit. So let's now type NpMi to install node dependencies.
00:02:05.330 - 00:02:33.790, Speaker A: Back inside my terminal. I'll type NPMI. Okay, that completes the installation. Let's move on. Okay, the next step is to get API keys and Rpc URL. Obtaining a GitHub token is optional, so I'll skip this and the next step is to get a polygon moon by rpc URL, which I will get from alchemy head over to alchemy.com login and once you're logged in, click on apps and then click on create new app.
00:02:33.790 - 00:03:09.110, Speaker A: We'll create a Rpc URL for polygon mumbai testnet. So for the chain I'll click on polygon PoS and for the network I'll click on mumbai. Go ahead and fill this out and then click on Create app. I already have an app that is created, so I'll click on this and once you're inside it, click on API key and then go ahead and copy this HTTPs URL. The next step is to get polygonscan API key from polygonscan.com. So click on this. Once you're inside polygonscan, scroll down and click on the tab API keys.
00:03:09.110 - 00:03:49.186, Speaker A: Next, click on the add button to create an API key here. I've already created an API key, so I'll copy this. Okay, the last thing that we'll need is a private key for your wallet. And once we have all of these polygon mumbai rpc URL, polygon scan API key, and metamask private key, we'll set this into our environment variable. So the next step is to execute these commands. We'll first set an encryption password for our environment variable. So we'll type mpx emb encSe, set a password here and remember this, since we'll need it to decrypt our environment variables.
00:03:49.186 - 00:04:23.374, Speaker A: Okay, next, we'll need to set environment variables for these keys. Let's first set polygon moon by rpc URL. To do this, I'll type mpx emb set, and then I'll type enter. Then we'll set the variable name. I'll copy this polygon moon by rpc URL, paste it here, and then hit enter. Next, you'll need to set the value for this environment variable, the rpc URL. I already copied it over here, so I'll copy this URL and then paste it here.
00:04:23.374 - 00:05:04.974, Speaker A: We still have two more environment variables to set, so let's move on. The next one will be polygon scan API key, copy this, paste it here, and for the value again, I'll scroll up and then copy this, paste here. The last one will be the private key for my metamask wallet, but I will not show you here. Okay, once we're done, we press enter, and if you wanted to check the environment variables that you set, you can type mpx enb enc view. And you can see over here that these are the environment variables that we have set so far. Now, it's not shown here, but make sure that you also set an environment variable for your private key. That completes us.
00:05:04.974 - 00:05:57.022, Speaker A: Setup and we're now ready to look at the code. The code that I want to explain are calculation example js. This is the example JavaScript that we'll be executing using Chainlink's decentralized oracle network. Next we'll take a look at the configuration file for the functions. And lastly we'll take a look at the functions consumer contract okay, let's start with calculation example js. Again, this is a JavaScript file that will be executed by the chainlink's decentralized oracle network, and the result of executing this JavaScript file is sent over to the okay, so calculation example this file is located here, calculation example Js. You can see over here that this code takes in some input from args, which you can see over here, and then it calculates the exponential of something.
00:05:57.022 - 00:06:39.030, Speaker A: We can see that it is exponential since we have a two asterisks over here. As the comment says over here, what this code is doing is it's calculating the compound interest. If you were to do this in validity, this might involve a lot of complex math or it might involve a lot of guess. However, by using JavaScript we don't have to rely on complex solidity code to calculate an exponential number, and it also might save some gas. Okay, once this compound interest is calculated, it is returned by calling functions encode Un 256 and then we put in the number here. So this final statement is what is returned to the smart contract. Next, let's take a look at the configuration file.
00:06:39.030 - 00:07:11.810, Speaker A: So the configuration file is called functions requestconfig js. What's important over here is first the source. This will specify the JavaScript file that will be executed. Another thing that is important is secrets. Let's say that you have some API key or secret that you don't want to hard code inside your code. You want it to be like an environment variable. Then in that case you would specify over here in the next video I'll show you an example of how to read secret inside the JavaScript file.
00:07:11.810 - 00:07:53.362, Speaker A: So let's just move on. And the other thing that is important inside this configuration file is args. This will be the input that will be passed to the JavaScript file. So you can see over here that it says args four and args five. Well if you go to the configuration file args this is args and args four will be, this will be 01234. So from this file we pass in as input this number and this number. These two numbers are used as inputs over here and that completes a quick explanation of what this configuration file is.
00:07:53.362 - 00:08:40.318, Speaker A: Okay, lastly, let's take a look at the contract function consumer sol. This contract is inside contracts under functions consumer sol. So scrolling down, there are two important functions inside this contract. Send request and fulfill request. We first send a transaction calling this function send request. When we call this function, we're sending a request to the decentralized oracle network to execute this code. Once this code is executed and the network comes to consensus on what the result should be, then the next function fulfill request will be called inside here, will be the result of what's returned from here, assuming that there is no error.
00:08:40.318 - 00:09:18.074, Speaker A: So going back to the contract, this response, if there was no error, will be stored in s last response. Now the function call to send request and then the function callback fulfill request probably will not be in the same block. And this is because we need one transaction to send a request to the oracle network. And then the oracle will do the calculation inside this file, and then maybe in a later block it will return the result by calling the function fulfill request. Okay, so this was a quick explanation of what this contract does. Let's move on. Next, let's execute some commands.
00:09:18.074 - 00:10:02.430, Speaker A: The first command will simulate the script. So let's actually try this. Inside my terminal. I'll type mbx hardhat functions simulate script, and you can notice here that it returned this number. Okay, next let's actually deploy the smart contract. When we execute this command, the contract functions consumer will be deployed inside the terminal. I'll type mpx hard hat functions deploy consumer network will be polygon Mumbai network Polygon Mumbai and we also verify the smart contract by typing verify true and then execute the command.
00:10:02.430 - 00:10:34.914, Speaker A: And our contract was deployed to this address. Copy this address and then I'll paste it here so that we can use it later. We can actually check that the smart contract is verified by going to this link Mumbai polygonscan.com inside Polygonscan paste the contract address, click on search, scroll down, and you can see that the contract is verified. Okay, the next step is to call the functions. To call the function, we first have to do some setup. The first thing that we need to do is create subscription.
00:10:34.914 - 00:11:16.498, Speaker A: So to do this, we'll execute this command. So inside my terminal I'll set an environment variable to the contract address that we just deployed. Next, we'll execute this command, I'll copy this and then paste it. And the command that we're executing is MpX hardat functions subcreate network will be Polygon Mumbai and amount this is the amount of link token that we're sending to this subscription here. I'm going to be sending 15 links. Remember that link that we got from the faucet and the contract address will be the contract address from the environment variable. Actually, I don't have 15 link tokens, I only have 14.
00:11:16.498 - 00:12:10.150, Speaker A: So for here I'll put twelve enter y for yes and the subscription was created. The subscription number is 1371. I'll copy this number since we're going to need it for the next step. If your subscription runs out a link, you can always put more link in by executing this command. Rhett function sub fund network is Polygon Mumbai and the amount to top up with the other thing that you'll need to pass is the subscription id. So remember that we said that subscription id for this subscription is 1371, so you'll need to pass that inside here. The next step is to actually execute the function send request on the contract functions consumer this will send a request to the decentralized oracle network to execute this JavaScript code.
00:12:10.150 - 00:12:52.722, Speaker A: So to do this, first I'm going to open my terminal and then I'll copy this command. This will set an environment variable for my subscription id. I'll copy this and then paste it here. So note that the command that we're calling is functions request network is Polygon Mumbai. The contract is stored in contract address. When we execute functions consumer send request, it's going to spend some of the link in the subscription, so we'll need to pass in the subscription id sub id here subid is 1371. And lastly, before we actually send a transaction, we can simulate this by typing in simulate true.
00:12:52.722 - 00:13:24.634, Speaker A: Okay, let's execute this command. Okay and our transaction went through and it says here that it cost 0.2 links to execute this function. We can check our subscription request and the responses by clicking on this link. This will take us to functions chain link Mumbai. And if we scroll down you can see that there is our subscription id 1371. Click on it and we'll be able to see the requests and also the responses.
00:13:24.634 - 00:14:17.566, Speaker A: Remember that back in the smart contract functions consumer we just sent a request and I said that the response will be stored inside here when the function fulfill request is called and the response will be stored in this state variable called s last response. So let's actually check this back inside. Polygon scan this is the contract that we deployed and I'll click on read contract and then scroll down and then click on s last response and we have something over here. I'm going to copy this response, and to decode the response I wrote a simple solidity contract, inside remix. I'll compile the contract and then deploy it on remix. And then in this code that I wrote inside remix I have a function called decode unit. For the input we'll pass in bytes and it will decode the bytes into unit 256.
00:14:17.566 - 00:15:09.770, Speaker A: I'll paste the bytes that was stored in the function's consumer contract and then click on decode unit and we get this number 100-3757 back inside our terminal. When we simulated the JavaScript file, the simulation result said that it returned 100-3757 this matches the response that was returned by the function that I just called decode un. So this means that the response that is stored inside the contract function's consumer under the state variable s last response decodes to this number. So in this video I went through a basic example of executing a JavaScript file using Chainlink's decentralized Oracle network. In the next video we'll modify one of the code example in this repository, and we'll make an API request to get the current weather.
