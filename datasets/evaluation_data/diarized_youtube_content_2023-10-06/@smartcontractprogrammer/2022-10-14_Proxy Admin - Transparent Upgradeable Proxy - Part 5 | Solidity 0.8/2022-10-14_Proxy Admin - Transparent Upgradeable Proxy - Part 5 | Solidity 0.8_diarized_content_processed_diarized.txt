00:00:00.170 - 00:01:20.018, Speaker A: In the previous video, we wrote some code so that if the admin of the proxy contracts calls into some functions inside the proxy contract, they'll be able to call it. Otherwise, if the caller is not the admin of the proxy contract, if the caller is a regular user, then we forward all of the calls to the implementation. In this video, we'll write a proxy admin contract, and this contract will be the admin of the proxy contract. The problem that we're having right now is if we scroll to the proxy contract, and let's say that the admin of this proxy contract wants to call the function admin or implementation inside the implementation contract. However, since the function admin and implementation also exists inside the proxy contract that you can see over here, if the admin of the proxy contract wants to call the admin and implementation function inside the implementation contract, the counter b one contract, they won't be able to call it. So to solve this problem, we'll create another contract called proxy admin, and that contract will be the admin of this proxy contract. If the owner of the proxy admin contract wants to get the admin and implementation inside this proxy contract, they'll call a function inside the proxy admin contract which will call these functions.
00:01:20.018 - 00:01:55.950, Speaker A: Otherwise, all users, including the admin, are not the admin of this contract. So all of their function calls will be forwarded to the implementation contract. The counter b one. So the first thing that we're going to need inside this proxy contract is a function to set the admin of this contract. So I'll type function change admin. It will take in a single input address of the new admin, underscore admin. This function will be external, and we'll only show this function if message sender is the admin of this contract.
00:01:55.950 - 00:02:52.846, Speaker A: So I'll put a modifier if admin, and then we'll call the internal function set admin passing in the admin from the input. Okay, so now that we have a function to set the admin, let's write a proxy admin contract. And once we deploy both the proxy contract and the proxy admin contract, we'll call change admin passing in the address of the proxy admin contract. Okay, so I'll scroll down, then type contract proxy admin. This contract will have an owner, so I'll say address public owner. And then inside the constructor constructor, we'll set the owner to the deployer message sender. Next, we'll create an only owner modifier, a modifier where only the owner of this contract will be able to execute some functions.
00:02:52.846 - 00:03:35.474, Speaker A: So modifier only owner. Then we'll require message sender is equal to the owner with the error message not authorized. Then if message sender is the owner, we'll go ahead and execute the rest of the function. And then next we're going to create two function where only the owner of this contract is able to call, a function to change the admin of the proxy contract, and a function to call upgrade to on the proxy contract. So function change proxy admin. This will be external. We'll fill in the inputs later.
00:03:35.474 - 00:04:31.918, Speaker A: I just want to declare some functions. This function can only be called by the owner only owner and another function will be function upgrade. Again, we'll fill in the inputs and the details later. I just want to declare some functions here external and again only owner okay, let's now start with change proxy admin. This function will take in a single input address of the new admin underscore admin. Actually it's going to take in two inputs address of the proxy address payable proxy the reason why we're declaring the proxy as payable is because the proxy contract has a fallback function and a receive function. So we'll need to declare this address as payable.
00:04:31.918 - 00:05:36.626, Speaker A: Then we'll call the function change owner on the proxy contract. So I'll type proxy at the address of the proxy change admin passing in the input admin. Okay, next let's write the function for upgrade. When the owner of the proxy admin contract calls upgrade, they'll be able to upgrade the contract inside the proxy contract. So inputs will be address payable address of the proxy proxy and then address of the new implementation address implementation and then we're going to call the function proxy at the proxy contract. The function upgrade to passing in the address of the implementation implementation okay, next we'll write some read only functions to get the address of the implementation and the address of the admin. So what I mean by here is, if I scroll up and look at the function signature for admin and implementation, it returns the address of the admin and implementation.
00:05:36.626 - 00:06:21.510, Speaker A: But these two functions are not read only function. We have to move the view declaration since we have an if admin modifier which has a potential to call the fallback function. So now these functions are not read only. However, inside the proxy admin, we can get the address of the admin and implementation as a readonly function. So let's do that. So declare function get proxy admin. We will pass in the address of the proxy address proxy external this function will be read only, so view returns address the way that we're going to call into a function that is not read only.
00:06:21.510 - 00:06:56.900, Speaker A: If you look at the declaration admin, it doesn't have any view or peer keyword. So this is not a readonly function, but inside here we can call the admin and also make it into a readonly function. The way we do this is by using static call. So I'll type proxy static call. Static call is like call, except that it does not write anything into the blockchain. Just like the call we'll pass in the data, the function that's encoded as data for the first input. So I'll type ABI encode call.
00:06:56.900 - 00:07:32.986, Speaker A: The call to encode is proxy admin. The function admin takes zero inputs, so we'll pass in an empty parentheses, meaning that there is no input to pass into the function admin. And just like the call, this will return two outputs. The first output is whether the static call is successful or not. Boolean okay, and then the next output is the output that came from calling into the function. It will be in bytes bytes memory. I'll call it rest short for response.
00:07:32.986 - 00:08:23.950, Speaker A: Once you have these two outputs, Boolean OK and bytesmemory response. First we'll require that the call was successful, require OK, otherwise call failed. And then we know that when we call the function admin, it returns an address. So we'll abi decode the response into address, return Abi decode rest as address okay, we're done with the function getproxyadmin. This will call the proxy admin, decode the address, and then return the address of the admin. Let's do something similar to get the address of the implementation. So I'll copy this, paste it here, and then rename this function to get proxy implementation.
00:08:23.950 - 00:09:10.826, Speaker A: And then the function that we're going to be calling is proxy implementation and the rest are the same. So I'll hit Ctrl s to see if the contract compiles. And I see an error here. I am missing apprentices and I'll do the same over here. And let's try compiling the contract again and the contract compiles. So let's now deploy the proxy contract, proxy admin, and counter b one and counter b two. I'll click on the deployment tab and then we'll deploy counter b one, counter b two, proxy and proxy admin scroll down and we have four contracts.
00:09:10.826 - 00:10:02.810, Speaker A: First, inside the proxy contract, let's set the address of the implementation so I'll copy the address of counter b one and then paste it here. I'll also open the transaction logs and the transaction to upgrade to counter B one was successful. So let's now change the admin to proxy admin. So I'll copy the address of proxy admin, paste it here, and then call the function change admin. So now the admin of the proxy contract is the proxy admin contract. So I'll open the proxy admin contract and let's try getting the address of the admin and the implementation stored in the proxy contract. So I'll scroll up, copy the address of the proxy contract and then paste it here and then call getproxy admin, and it returns this address which is the proxy admin contract that you see over here.
00:10:02.810 - 00:10:45.900, Speaker A: How about the address of the implementation? Again, I'll paste the address of the proxy and then call get proxy implementation. And that is the address that is returned starts with d 91. And if I scroll up to counter B one, you can see here that the address that was returned belongs to counter b one. Okay, so the function getproxy admin and get proxy implementation is working. Next, let's execute some functions inside a counter b one contract, and then later we'll upgrade it. So I'll copy the address to the proxy, scroll up, select counter b one, and then we'll load counter b one interface at the proxy address. And then scroll down.
00:10:45.900 - 00:11:36.034, Speaker A: And then if I call count count is zero. I'll call in couple times and then get the count, and it is equal to four. Next, we'll upgrade the proxy to counter b two. So I'll copy the address of counter b two, scroll all the way down to proxy admin contract since this is now the admin of the proxy contract, and then paste the address of counterb two inside here and paste the address of the proxy inside here and then call the function upgrade. The transaction is successful. Let's try calling some counter b two functions on the proxy contract. So I'll copy the address of the proxy, then make sure I select the counter b two and then load the proxy with the counter b two interface.
00:11:36.034 - 00:11:52.926, Speaker A: Scroll down and let's get the count. Count is equal to five. And notice that now I have a function to decrement. So I'll call it a couple of times. I called it twice. Let's get the count again. And the count is now equal to three.
00:11:52.926 - 00:12:02.010, Speaker A: In this video we completed the proxy admin contract and went through a full demo of deploying the proxy, proxy admin and counter v. One. And counter v. Two. Contract.
