00:00:00.410 - 00:00:41.398, Speaker A: Today I'll show you how to deploy a smart contract on l two rollup chain optimism. For this example, I'll use hard hat. So the first thing that we'll do is initialize this folder as a hard hat project, and we can do that by typing Mpx hard hat. Now, if you do not have hard hat installed yet, then what you can do first is type Mpmi g hard hat. Once you have hard hat installed, we will initialize a project. By typing Mpx hard hat, we will create a basic sample project. The folder where we will initialize this project is under hello optimism.
00:00:41.398 - 00:01:40.858, Speaker A: So I'll just hit enter and then go along with the other default settings hitting enter enter once hard Hat initializes the project, the next thing that we'll do is take a look at the contract that we're going to be deploying. So I'll click on the navigator and go to contracts, and then click on the greeter sole contract. The goal of this video is to get a feeling for how to deploy a smart contract on optimism. So I'll simplify this contract as much as possible. We're not going to need any imports, so I'll remove all of the imports, and then I'll also set the solidity version. The solidity compiler version for this contract is stored in hardhack config JS, and if I scroll down, the solidity is set to 0.8.7. So I'll match this solidity compiler version inside my contract as well, and change this version to 0.8.4.
00:01:40.858 - 00:02:29.890, Speaker A: And that completes the contract that we're going to be deploying for this example. Next, let's write the script to deploy this contract. So I'll open scripts, and then I'll rename this sample script Js to deploy Js open the script, and then I'll remove some of the comments that we don't need for this example. Basically, what this script does is just deploys the greeter contract and then logs the address where it was deployed to. So we have the contract and we have the script to deploy the contract. Next, we will configure the hardhack config JSON file, then set up the network for optimism. So I'm going to open hardhack config JS, and then inside here I'll type networks the network that we're going to be deploying.
00:02:29.890 - 00:03:26.014, Speaker A: I'll name it optimism cobin. The URL will be HTTPs cobin optimism IO, and we'll also import the account that's going to be deploying the contract onto this network. So I'll say account is process M private key. Now, we're going to be loading our private key from the environment variable. So what I will do over here up at top, so we'll import M by typing require m, followed by config. This will load the environment variables into process m. For variables that are defined inside a file called M, I'll delete some of these comments that we're not going to need, and then the next thing that we'll do is install m.
00:03:26.014 - 00:04:16.826, Speaker A: So I'll open my terminal and then type mPMI m. Once that is done, we'll create the file called M. So I'll open the navigator again and then type M. And inside here, we'll declare a variable called private key is equal to here we'll store the private key of the account that we're going to be using to deploy the contract onto optimism. This private key will have to start with Zero X, followed by the private key. I'm going to import my private key from Metamask, but I'm not going to be showing it here. Once you've pasted your private key inside the M file, we had the contract to deploy, and we wrote the script to deploy the contract, and we also configured the network to point to optimism cobin, so we're almost ready to deploy the contract.
00:04:16.826 - 00:05:08.666, Speaker A: Before we can deploy the contract onto this network, we'll first need to have some ETH on this optimism chain, similar to the video about arbitrum where we had some testnet ETH, and then we bridged it over to the arbitrum chain. We can also do the same for optimism, have some ETH on the Cobain testnet, and then bridge it over to optimism cobain. However, for testnets, there is an easier way we can directly fund some ETH into optimism cobin. So we'll do that, head over to Optimismfossit XYZ, and then first sign in with your GitHub. Once you're signed in, paste the address of your wallet. So I'll open my metamask, copy my address, and then paste it here, and then hit claim. Once this process is done, you'll receive one E and 100 die on the optimism cobain network.
00:05:08.666 - 00:06:11.774, Speaker A: Once we have ETH on the optimism chain, we're now ready to deploy the contract. So I'll expand my terminal, clear all of this log, and then we'll deploy the contract by typing MPX, hard hat, run scripts, deploy JS, and the network will be optimism cobin, and we now have a contract deployed on optimism Cobain testnet so we'll copy this address and let's see this contract on the block explorer, head over to Cobain Optimistic etherscan IO and we'll paste our contract address inside here and then hit search. And this is the contract that we just deployed. Let's send some transactions. So I'll click on contract, and then I'll click on write contract. Now we'll need to connect web3 to the cobin optimistic network. So let's configure the network on Metamask.
00:06:11.774 - 00:07:03.838, Speaker A: One way to do this is to navigate to the official documentation for optimism and fill out these details inside your metamask wallet. An easier way to accomplish the same thing is to head over to faucet paradigm XYZ, scroll down and then look for network called optimistic coven. On the right you'll see a button called Add to metamask. So click on it, you'll see that your metamask will pop up, scroll down, and then hit approve opening my metamask again. You can see that the optimistic cobin network was added to my metamask wallet. Once we've added optimistic cobin to our metamask wallet, head back to Etherscan, and then inside the contract, click on Connect to web3. Once our wallet is connected, let's now send the transaction.
00:07:03.838 - 00:07:43.290, Speaker A: So click on set greeting, and for the greeting I'll type hello optimistic roll up and then click on Write and then confirm the transaction. So that took about 15 seconds, which is quicker than sending transactions on L1 testnet, such as Robstone Co. And Renkibi. Let's check that this change is reflected inside the contract. So I'll click on read contract and then click on greet and the message says hello optimistic rollup.
