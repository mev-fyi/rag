00:00:00.410 - 00:00:43.926, Speaker A: We're going to build a user interface for our Multisig wallet contract. So in this video I'm going to show you a demo of what we're going to be building and give you an overview of the technologies that we're going to be using. Lastly, I'm going to explain how the code for the user interface is organized. I'll paste the links for the code and this application in the descriptions below. So first let me show you a demo of the user interface that we're going to be building. The very first thing that you would need to do is log into your metamask and the contract for the demo that I'm about to show you is on the Robstone network. So make sure that your metamask is connected to the Robstone network.
00:00:43.926 - 00:01:34.460, Speaker A: So once you're logged into Metamask, hit this green button here. Connect to metamask once you hit connect to Metamask, you'll see some information about the Multisig wallet smart contract. You'll notice here that we're on the robster network and we're using this account. You'll also notice that the smart contract is deployed at this address and that the Multisig wallet has 1000 ways stored in the contract. If we scroll down, you'll notice that there are three owners and if you look further below, you'll see a list of transaction that was submitted to this multisig wallet. So now I'm going to quickly show you a demo of creating a transaction, confirming it and then executing it. First I'm going to copy the address of owner number three and this is the address that we're going to send a transaction to.
00:01:34.460 - 00:02:18.880, Speaker A: Next, we're going to create a transaction to be confirmed by other owners. So hit create transaction and then paste the address that we copied. We're going to send zero ether and zero bytes and then hit create and then hit confirm. Once the transaction is mined, you can see here that there are now two transactions. We need two confirmations for this transaction, so I'm going to hit confirm. If you wait about 30 seconds, you can see here that the confirmation has updated. We need one more confirmation, so I'm going to switch over the owner and then hit confirm again.
00:02:18.880 - 00:03:12.080, Speaker A: I switched my metamask account to owner number two and now I'm going to hit confirm again. After you wait about 30 seconds, you'll see that the confirmation updates and now we can hit execute. Once you wait about 30 seconds for the transaction to be mined, you'll notice that executed is now equal to true. So I just showed you a demo of creating a transaction, confirming it and then executing it. Next, I'm going to explain all of the tools that we're going to be using to build our web application. First, over here on our left we have our multisig wallet smart contract. We took that smart contract that we wrote in remix and then put it into the truffle project.
00:03:12.080 - 00:04:09.150, Speaker A: And then using truffle, we started a local blockchain and we deployed our multisig wallet smart contract onto the local blockchain. Next, we set up metamask so that it could connect with our local blockchain running using truffle. And for the web application that we're going to be building, we're going to be using react and typescript. And to connect our web application to the blockchain, either to the local blockchain or to the Robson network, we're going to need Metamask and an NPM library called Web three Js. When we're building our application, Metamask will point to our local blockchain. And after we're done building the application, we'll deploy the contract onto the Robson test network, and inside Metamask we'll switch over the network to point to Robston. This is how our application will be able to interact with the smart contract on the Robston test network.
00:04:09.150 - 00:05:27.666, Speaker A: We're going to be building this application using React and typescript. And to follow along, I'm going to assume that you know about react, hooks, reducers and context. And for typescript I'm going to assume that you know about generics, and for those who don't, and for people who want a quick review of what these are, I'll put some helpful links in the descriptions below. This is how our react app will be structured. Inside context, we'll store the app states like web3, the current account and the Multisig wallet information such as the balance and the transactions inside the app component, we'll render the states from the context above, so we'll render the current account the balance of the multisig wallet. We'll also render some buttons so that we could interact with the Multisig wallet contract, and these buttons include being able to deposit, create, transaction, confirm, revoke and execute transaction. Lastly, we'll create a react component called update, and this would monitor the changes made to metamask or to the blockchain so that if either one of them changes, it would update the state stored in context.
00:05:27.666 - 00:06:13.110, Speaker A: So, for example, let's say that our current Metamask account is one, two, three, and then we change it to four, five, six. Our updates component will detect the change made to metamask and then we'll change the account stored in context to four, five, six. And then inside app we will render the new account four, five, six. And to give you another example, let's say that we send a transaction. Once the transaction is mined, our updates component will detect the change and then it will update the state of the multisig wallet stored in context. And then the new state of the multisig wallet will be rendered in app. Now inside the code editor, you can see here that we have some folders.
00:06:13.110 - 00:06:50.720, Speaker A: Inside the context folder we'll store the state of our app inside the pages folder we have react components that's going to render the state that is stored in context. Inside the API folder we'll put the functions that make external calls. So this includes getting information from the blockchain using web3 Js, and also functions that interact with our Multisig wallet contract. So that was an overview of what we're building and how we're going to organize our code. In the next video we'll start building our react app. See you in the next video.
