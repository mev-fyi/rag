00:00:00.730 - 00:00:43.818, Speaker A: Let's say that I have some things that I need to do, like walk the dog and wash the dishes. And once each of the tasks is done, I want to be able to mark it as completed. Now, one way to achieve this in solidity is by doing the following. We store each task in an array of strings, and then we create a mapping from the index of the array to a boolean value that we mark as completed when the task is done. So, for example, the two tasks above will look like this. Here we're storing the two tasks, walk the dog and wash the dishes into the array of strings. And since the first task is done, we mark it as true.
00:00:43.818 - 00:01:35.370, Speaker A: And the second task is not yet finished, so it is still false. However, this is not the most intuitive way of storing our data. The good news is that solidity supports a user defined data type called structs, which will allow us to store our data more or less like this. So in this video I'm going to show you how to create a struct and how to get values from a struct and then how to update it. You can declare a struct by starting with the keyword struct followed by the name of the struct. Here we're going to call the struct. To do inside the struct, we need to store two fields, a string of text and a boolean value representing completed.
00:01:35.370 - 00:02:13.800, Speaker A: So what we did here was we defined a data type that's going to store a string value in an attribute called text and store a boolean value in an attribute called completed. So this is how you define your own custom data type using a struct. Next, let's go over how to initialize a struct and then store it in our contract. Storage. I want to store a list of to dos in this contract. So let's create an array of to do and then call it to dos. And the way you would do it is like this.
00:02:13.800 - 00:03:12.490, Speaker A: You first declare the type of the array. In this case it will be to do and then followed by brackets. So this would tell that we're creating array of to dOs, and then it's going to be a public state variable. So we're going to put the public keyword followed by the name of this public state variable, which we said we're going to call it to dos. Notice here that we just declared an array of to do, where the to do data type is what we define here, and it's not any built in data type. We're going to need a function that will create a new to do and then append it into this array. I'm going to call this function create, and it's going to take in a string of textbook and inside the function we need to initialize a new to do and then push it into the array.
00:03:12.490 - 00:04:22.222, Speaker A: Now there are three ways to initialize a struct. The first way is to call it like a function. So it will be like this, and we're going to push this newly created to do into array. So here we initialize the new to do where the first argument corresponds to the first element in the definition of the struct, and the second value corresponds to the second element in the definition of the struct. After the to do is initialized, we immediately push it into the array of to dos. Another way to initialize a struct is like this. Unlike the first way where the order of the argument is important, in this case the order of argument is not important.
00:04:22.222 - 00:05:17.870, Speaker A: So you could switch around the arguments and this to do will still be valid. So here I switched around the order of text and completed, but this to do will still initialize. Now, when your struct contains like five or more parameters, then this way of initializing a struct is more readable than the first way of doing it. The third way of creating a struct is to initialize a variable of the type of the struct and then update the attributes. So for example, we can create a variable of type to do like this and then update the attributes. In this case, we didn't have to explicitly set the completed flag to false. This is because solidity sets it to its default values.
00:05:17.870 - 00:06:17.718, Speaker A: So this is a useful way to initialize a struct when your struct contains many attributes or when it contains complex data, and you just want solidity to set it to its default values. So these are three ways to initialize a struct positional key value mapping and then declare it and then update it. Now that we have a function to create to Dos and then store it in this array. Next, let's create a function to get the to dos out of this array. We'll name this function get, and it's going to take in the index of the array and it's going to return the to do. Now in other programming languages you can return a struct like this. However, in solidity 0.5
00:06:17.718 - 00:07:06.120, Speaker A: this is not a valid feature. So instead we'll need to explicitly declare the types to return. We're going to return the string stored in our to do struct and then also the boolean value that represents whether the to do is completed or not. Next, we need to get the to do stored in this array at this index. So we're going to declare a variable that references the to do that is stored at this index. And the way you do it is you declare the type of the data which is to do. Since it's going to be a variable that's stored in storage, we're going to declare as storage and then the name of the variable we'll call it to do.
00:07:06.120 - 00:08:14.998, Speaker A: And this is going to equal to Dos at the index and we return the two attributes, text and completed stored in this to do like this. So this illustrates how to get a struct that is stored in a state variable. You first declare the type of the data. In this case it is to do followed by the keyword storage since the data is stored in a state variable, and then followed by the name of the variable and to access the attributes that is stored in the struct, you do it like this. Next, let's go over how to update a struct. I want to be able to update the text of the to do and then mark it as completed. So we're going to create two function one to update the text and another function to mark it as completed.
00:08:14.998 - 00:09:13.310, Speaker A: We're going to name the first function update and it's going to take in the index of the array where the to do is stored, followed by the new text to update and the way you access a to do. I already explained it earlier, so I'm just going to copy and paste the code here and to update the to do. You do it like this. So here we get the to do and then update the text attribute to our new text value that was passed in from our function. The code to update the completed attribute is going to be similar to the code here. So we're first going to copy and then paste the code here. I'm going to name this function toggle completed.
00:09:13.310 - 00:10:17.720, Speaker A: It's only going to need the index of the array and nothing else. And to update the completed attribute we'll just reassign it to the opposite of the current completed value. So if the current value of the completed is true, then the updated completed will be false. And if the current value of the completed is false, then the new one will be set to true. Now let's compile it and put our to dos on the blockchain. First I'm going to create several to dos I need to wash the dishes and walk the dog. We can check that our to do has been stored into the contract by calling get.
00:10:17.720 - 00:11:28.860, Speaker A: Notice that solidity also created the same exact getter for us, so actually we didn't need to write this function since solidity automatically creates getters for us. But it's useful to know how to get values out of a struct, especially when you want to customize which data that you're going to be returning next. Let's try updating the to dos. So I'm going to update the second to do. So the index will be one and instead of walking the dog I'm going to walk the cat and we can check that our to do has been updated by calling either get or to dos and it returns walk the cat once I finish walking my cat, I'm going to mark it as completed. The index of the to do is one and I hit toggle completed. I can check that the to do has been updated by calling get again and now it returns true.
00:11:28.860 - 00:13:09.230, Speaker A: Now I forgot to mention this earlier, but notice that the output of the to dos on the bottom is a little bit different from the ones here. So the output here is saying that the text attribute is walktocat and the completed attribute is false, whereas up on top it's saying that the first return value is walkthocat and the second return value is true. So before we go, I'm going to show you how to return the output as a key value like this, and the way to do it is to name your outputs like this, you let's recompile and redeploy the contract and now you can see here that it returned the text of walk to cat and a completed equal to false. Being able to return an output as a key value becomes extremely useful when your smart contract interacts with other programming languages. Instead of remembering that the first value represents the text of the to do and the second value represents whether the to do is completed or not, you'll get a map where the text is equal to walk the cat and completed is equal to false, so you won't have to remember the order of the output. Well, that's all I got for this video. Thanks for watching and see you in the next video.
