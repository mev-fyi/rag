00:00:00.240 - 00:00:42.126, Speaker A: In this video, I'll explain how storage slots are allocated to state variables that store a single struct the way that state variables that store a single struct is stored inside. Ebm storage follows the same rule that we have covered so far. Data is stored in the order that they are declared, and data that are less than 32 bytes, if possible, will be packed into a single slot. So for example, the first state variable that is declared is this one. The struct is called single slot and I named this state variable single. The first field inside the struct, called single slot is un 128, named x. Since un 128 takes up only 16 bytes, we still have 16 more bytes that we can fit inside slot zero.
00:00:42.126 - 00:01:17.240, Speaker A: The next two fields, un 64 y and uint 64 z, will take up the other 16 bytes. X will be stored in slot zero, followed by y also in slot zero, and followed by z, also in slot zero. Let's take a look at another example. Here we have another struct called multislot, and we know that this state variable will be stored starting at slot one. In slot one we'll have un 256 named a. This is 32 bytes. The next field un 256 b will take up another 32 bytes.
00:01:17.240 - 00:02:00.270, Speaker A: So a will be in slot one, b will take up slot two, and c is un 256. So that's also going to take up 32 bytes. So c will take up slot three. So over here, this multi slot struct will take up slot one, two, and three. For the next example, I'm going to use assembly to read the data that is stored in slot zero, slot one, two, and three. So the first function, I'll call it function test get single slot struct public view returns uint one to eight. We'll get the value of x.
00:02:00.270 - 00:02:40.056, Speaker A: So this will be unit one to eight. We'll get the value of y. This will be unit 64 y, uint 64 z, and we'll use assembly to get the value of x, y and z. All of this is stored in slot zero, so you'll have to use some bitwise operator to get the values for x, y and z assembly. We'll first get 32 bytes from slot zero, and this will represent all of the data for x, y and z that we'll call s colon equals to sload from slot zero. This will load 32 bytes from slot zero. Okay, as a reminder, here is how the data is stored stored inside this s, which is 32 bytes.
00:02:40.056 - 00:03:14.814, Speaker A: Starting from the right and going left, we have the first state variable. This will be the field x inside the struct single slot this will take up 128 bits. Next we have the field called y. This will take up 64 bits. And finally we have a field called z, which would take up the last 64 bits. Okay, to get the value of x, let's say x is equal to all we have to do is just load x. And this is because s is 32 bytes, s is 32 bytes, or this is 256 bits.
00:03:14.814 - 00:03:56.934, Speaker A: The type of x that we declared over here is x is 128 bits. So when we assign the value of s to the variable x, the first 128 bits starting from the right and going to left will be loaded and the next 128 bits will be cut off. So here we don't have to do any bitwise operator to get the value of x. Next, let's get the value of y. Y is equal to the value of y starts after we skip the first 128 bits. So we can get the value of y by shifting this whole s by 128 bits to the right. Shift right 128 for the value s.
00:03:56.934 - 00:04:35.658, Speaker A: Okay? And lastly, to get the value of z again, you'll have to shift right. If we shift right 128 bits, you'll get the start of the value y. And if we shift another 64 bits, we'll get the start for the value z 128 plus 64, that is 192. Shift right 192 from the value s and we'll get the value of z. Okay, this is an example of getting the value x y z from slot zero, which stores a single struct having the fields x, y and z. Let's also get the fields for a, b and c. A, b, and c take up slot one, two and three.
00:04:35.658 - 00:05:25.836, Speaker A: So I'll create a function function test get multiple slots struck public view returns un 256 a, un 256 b, and uint 256 c. Again, we'll use assembly and to get the value of the field a a is stored in slot one. So we'll say assign to the variable a. Load the value from slot one s, load one to get the value of b s, load two, and to get the value for c sload three. Okay, let's try calling these functions. Hit ctrl s to compile a contract. Then we'll deploy this contract and then call the function test.
00:05:25.836 - 00:05:51.544, Speaker A: Get single slotstruct to get the values that is stored in the state variable single. The value that are stored are one, two, and three, and the values that we get are one, two three. Next I'll call the function test. Get multiple slot structs. We get the values 1122 and 33, and the values that are actually stored inside the struct multislots is 1122 and 32.
