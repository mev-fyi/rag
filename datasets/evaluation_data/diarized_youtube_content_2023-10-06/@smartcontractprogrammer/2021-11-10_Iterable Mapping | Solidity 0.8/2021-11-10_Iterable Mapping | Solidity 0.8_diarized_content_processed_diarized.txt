00:00:00.330 - 00:00:44.394, Speaker A: If I have an array, I can get the size of the array and using a for loop I can get all of the elements in it. However, that's not the case for mappings. We cannot get the size of a mapping and we cannot iterate it to get all of the elements of the mapping unless we internally keep track of all of the keys in the mapping. So I'm going to show you how to build a mapping that you can iterate, meaning that you'll be able to get the size of the mapping and you'll be able to run a for loop to get all of the elements inside the mapping. Here I have a mapping from an address to un which represent a balance of an address. To keep track of the size of this mapping and to get all elements in this mapping we're going to need some new data. We're going to need a mapping that keeps track whether a key is inserted or not.
00:00:44.394 - 00:01:22.914, Speaker A: The key for this mapping is address. So we'll create a mapping from maddress which represents the key to Boolean. It'll be public and I'll name this inserted. When we insert a new data into the balances mapping inside the mapping inserted, we'll set the address that we just inserted into the balances mapping to true. We also need to keep track of all of the keys that we inserted into an array. Again, the key type is address. So we'll create an array of addresses by typing address brackets public and I'll name this keys.
00:01:22.914 - 00:02:05.054, Speaker A: The first function that we'll create is a function to set the balance of the mapping balances. So I'll type function set for the inputs we're going to pass in a key of address and a value of type un. So I'll type address key unbow. I'll make this function external. The first thing that we'll do is update the balances mapping, so we'll type balances of key is equal to bow. Next, we'll need to keep track of whether this key is newly inserted or not. If it is newly inserted, then we'll append to the array of keys.
00:02:05.054 - 00:03:02.550, Speaker A: By doing that, we'll have an array of keys which we can use to get all of the values stored in the balances mapping. So we'll type if not inserted key, meaning that this key is not yet inserted. Then we'll set inserted upkey to true and then push the key to the keys array. By typing keys push key having this function, we'll be able to get the size of the mapping and iterate through all of the keys in the mapping, meaning that we'll be able to get all of the values stored in the mapping balances. Let's start with the easy problem. How do we get the size of the balances mapping? Since all of the keys that we inserted are stored inside the keys array, then the only thing that we'll have to do here is to return the length of the keys. So I'll name this function get size.
00:03:02.550 - 00:03:59.340, Speaker A: It'll be external view and it's going to return the size of the mapping. So it will return a un returns un and we will return keys length. Okay, so this will get the size of the balances mapping. Once we know the size of our balances mapping, we can run a for loop to get all of the values inside the mapping. So if someone asks us to give them the first or the last or the third element in the balances mapping, how do we return that element? To get the first value stored in the balances mapping, we will first access the keys array at zero. This will return an address and given that address we will access the balances mapping and then get the Un. So we'll be able to get the first value that was inserted by typing return balances of keys of zero.
00:03:59.340 - 00:04:50.980, Speaker A: Keys of zero will return the first address that was inserted, and from that address we'll be able to get the value that is stored in the balances. Likewise, we can get the last value that was inserted into balances by first accessing keys. The last index in the keys array which will be stored in keys length minus one. Return the last key and get the balance. In general, we can get the if value that was inserted into balances by returning balances of keys of I. Once we have these two functions, being able to get the if element and being able to get the size of the mapping, you'll be able to get all of the values stored in the mapping, get the size, and then run a for loop calling the function get.
