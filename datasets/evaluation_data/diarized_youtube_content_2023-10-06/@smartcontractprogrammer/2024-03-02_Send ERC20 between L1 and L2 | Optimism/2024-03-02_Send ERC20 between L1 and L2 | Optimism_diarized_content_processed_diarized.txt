00:00:00.250 - 00:00:29.494, Speaker A: Today, we'll go through an example of sending ERC 20 from L1 over to L two optimism. For this example, we'll say that this ERC 20 token exists only on L1. When we send this token over to L two, what actually happens is that the representation of this ERC 20 is minted. This ERC 20 token on optimism is an extension of ERC 20. This token is called optimism. Mintable ERc 20. When we send Erc 20 from L1 to l two, this is what happens.
00:00:29.494 - 00:01:10.798, Speaker A: The ERC 20 token is locked inside a contract called L1 standard bridge. This L1 standard bridge calls the contract cross domain messenger, and the cross domain messenger sends a message over to L two. On the L two side, the contract L two standard bridge is executed, and it's going to mint this op ERC 20 optimism. Mintable ERC 20. So, basically, when we send ERC 20 from L1 to L two, we are locking the ERc in the L1 contract called L1 standard bridge. And on the L two side, we are minting a new token. When we send ErC 20 from L two back to L1, we burn this op ERC 20 on L two standard bridge.
00:01:10.798 - 00:01:42.426, Speaker A: Once the token is burned, it will relay a message over to cross domain messenger on L two. Once the message is relayed, we'll need to take some extra steps, such as proving the withdrawal transaction and then finalizing the withdrawal transaction. After that is done. We can unlock this ERC 20 by calling L1 standard bridge. Here are the things that we will cover in this video. We will deploy an ERC 20 on L1 and then deploy an op ERC 20 on L two. We will deploy L1 bridge on L1 and L two bridge on L two.
00:01:42.426 - 00:02:23.046, Speaker A: Back in L1, we'll mint some ERC 20, and then send this token over to the L1 bridge. We'll mint this ERC 20, write a contract called L1 bridge, which will call into this L1 standard bridge. And by doing so, we are locking the ERC 20 on L1 and then minting the op ERC 20 on L two. On the L two side, we will check the balance of the ERC 20 on L two. Withdraw this eRC 20, and then we'll send this eRc 20 from l two back to L1. Back inside L1, we'll check the balance of ERC 20, and then withdraw this ERC 20. In the final part of this video, we'll look at the transaction that finalizes the withdrawal, and then we'll check for token transfers.
00:02:23.046 - 00:03:04.130, Speaker A: Okay, so let's start with step one is to deploy our ERC 20 on L1. So I've created a simple ERC 20 contract over here. The only difference is it has two functions, has a function to mint, anyone will be able to mint, and we're going to mint some tokens to our account. This function also has a function called burn, but we won't be using this function. Okay, the other contract that I've created is called Op ERC 20. To integrate with the L two standard bridge, we need to extend our ERC 20 contract. This contract, Op ERC 20 is an ERC 20 contract that we'll deploy on L two, and it has some extra features that we need to implement.
00:03:04.130 - 00:03:34.766, Speaker A: These features are the functions over here. Remote token. This is a readoning function that returns the address of the remote token. Since this token is going to be deployed on L two here, the remote token refers to the token on L1 bridge, refers to the local bridge. When we deploy this on L two, this bridge will refer to the L two standard bridge. And then we also need a function to mint and a function to burn. So if I scroll down, can see over here that I implemented the function for remote token bridge.
00:03:34.766 - 00:04:09.110, Speaker A: And I've implemented IERc one six five that you can see over here. Basically, it's a function that tells which interface it supports. And the interface that we need to support is IeRC one six five and ioptimism. Mintable ERC 20. Okay, and the last two function that we need to implement is a function to mint tokens and a function to burn tokens. And for this example, I made it so that this function, mint and burn, can only be called by the local bridge. So this will be the L two standard bridge that can only mint and burn tokens.
00:04:09.110 - 00:04:41.254, Speaker A: We'll deploy the ERC 20 and op ERC 20 contracts later. Let's first write some code. So back inside bridge Sol want to implement a contract called L1 bridge and L two bridge. These are contracts that will call into the L1 standard bridge and l two standard bridge. I'll start by declaring some interfaces interface il one standard bridge. And we also declare another interface il two standard bridge. We'll fill out the functions that we need to call later.
00:04:41.254 - 00:05:11.770, Speaker A: So next, I'll create your contract contract l one bridge. And let's also declare a contract l two bridge. We also need to interact with the two ERC 20 contracts, ERC 20 Sol and op ERC 20 sol. So the next thing that I'll do is declare interface for ERC 20. So I'll just copy and paste it here. Interface for IERC 20. Okay, let's start by declaring some functions that we need to call inside l one standard bridge.
00:05:11.770 - 00:05:43.402, Speaker A: To send ERC 20 tokens from L1 to L two, we'll need to lock this ERC 20 inside l one standard bridge. And the function that we'll need to call is called bridge ERC 22. Now, there's another variation to this function called bridge ERC 20. But if you understand how to use bridge ERC 22, then you also know how to use bridge Erc 20. So this is the function that we'll be working with for today on the l two side. To send erc 20 from l two back to l one. The function that we need to call is exactly the same.
00:05:43.402 - 00:06:19.526, Speaker A: The way it behaves is different, but the function that we need to call is the same bridge ERC 22. Another way to send ERC 20 is by calling deposit Erc 22. This function internally calls the same function as bridge ERc 22. However, this only works with the contract optimism mintable ERC 20. So in this example, instead of calling this function, we'll be calling this function. They basically do the same thing. And likewise, when we send token from l two back to l one, we can also call a function called withdraw two.
00:06:19.526 - 00:06:54.238, Speaker A: And internally it calls the same function as bridge ERc 20. And again, this function only works with the contract optimism mintable ERC 20. However, the contract that we're going to deploy is not exactly the same as optimism mintable ERC 20. This is a contract that implements ioptimism mintable ERC 20. So it's a little bit different, but basically they do the same thing. So for this example, when we withdraw tokens from l two back to L1, we'll be calling this function bridge ErC 20. Okay, let's move on.
00:06:54.238 - 00:07:34.714, Speaker A: Let's start by writing the contract for L1 bridge. What this contract will do is transfer ERC 20 from message sender and then send it over to L1 standard bridge. The L1 standard bridge will lock this ERC 20 and then relay a message to mint op ERC 20 on L two. So what this contract is going to do is going to call this function bridge ERC 22. I'll first start by declaring some constants. We will store the address of L1 standard bridge as l one op bridge, and the two tokens that we're going to deploy, l one token and l two token on Sepoldia. This is the address that we'll use for the L1 standard bridge.
00:07:34.714 - 00:08:22.614, Speaker A: Okay, next let's write the constructor constructor. It's going to take in three parameters. Address l one op bridge, address l one token and address l two token, and then we'll set them l one op bridge is equal to input l one op bridge l one token is l one token from input. Then l two token l two token is l two token from input. Next, we'll approve the l one op bridge to be able to pull tokens from this contract. So say ierc 20 l one token approve prove l one op bridge for the amount max. Type un 256 max.
00:08:22.614 - 00:09:20.334, Speaker A: Now I'm not sure if this is the safest or the best way to do it, but for this example we'll just keep it simple. Next, we will write a function to send this l one token over to L two. Say function send to l two for the input we will pass in the address to send the tokens to on l two address remote addr and amount to send un to 56 amount external. And first we'll transfer the l one token from message sender over to this contract ierc 20 l one token transfer from message sender to this contract for the amount amount. Okay, next we'll call this function bridge erc two on the interface il one standard bridge. So over here paste a function. Then I'll say I l one standard bridge l one op bridge dot call this function bridge erc 22.
00:09:20.334 - 00:10:35.042, Speaker A: Then for the inputs you'll pass these local token will be the l one token remote token will be the l two token, two will be remote adtr amount will be amount min gas limit I'm not really sure what to put in here, so I'll just put in 200,000 and any extra data to pass over to l two. We'll just send the empty data. Okay, so this is how you would send the token from l one over to l two. All we have to do is call the function bridge erc 22 on the contract l one standard bridge. Next, I'll create a helper function so that we can withdraw any tokens that is inside this contract. And this will be a useful function when the tokens are sent back from l two over to l one. And then once the token is inside this contract, we'll call withdrawal to withdraw the token function withdrawal address token external and then we'll just say un to 56 balance is equal to IRc 20 token balance of address this and then we'll just transfer all of it out irc 20 token transfer to message sender for the amount valve.
00:10:35.042 - 00:11:03.178, Speaker A: Okay, that completes the contract. L1 bridge. Next, let's write a contract for L two bridge. The contract for L two bridge is going to look similar to the contract for L1 bridge. So I'll copy all of this and then paste it here. And then we'll modify some of the parameters and the state variables. On the l two bridge, we will store l one token and l two token, and instead of storing l one op bridge, we'll call this L two op bridge.
00:11:03.178 - 00:11:32.954, Speaker A: This will be the address of the L two standard bridge contract in optimism. Here is the address, and then I'm going to rename these inputs. Instead of approving the L1 token, we'll approve the L two token and approve the L two standard bridge. Next, let's modify the function send to L two. I'll rename this to send to L1. What this function is going to do is it's going to send the token from L two back to l one. To do this again, we'll need to call the function bridge erc 22.
00:11:32.954 - 00:12:06.018, Speaker A: The address of the contract will be L two op bridge. The interface that we will call is il two standard bridge. Now, here's the interesting part. On L two, the local token is the l two token contract, and the remote token which refers to the token on L1, will be the L1 token, and the rest of the inputs are the same. The other thing I'll fix is instead of trying to transfer the L1 token, we'll transfer the token on L two. Okay, and that completes the contract for L two bridge. So now we can start from step one.
00:12:06.018 - 00:12:41.162, Speaker A: To deploy ERc 20 on L1, I'll hit Ctrl s to make sure that the contract compiles. Okay, and now let's deploy ERc 20 on L1. So I'll click on this deployment tab, then click on injective provider first, make sure that we're on sepolio, and then we'll deploy our ERc 20 on L1. So I'll select this ERC 20 contract, compile it so that I'll be able to select it over here, and then deploy this ERC 20 on L1. Confirm the transaction. The transaction was confirmed. Here is the address for the L1 token contract.
00:12:41.162 - 00:13:03.282, Speaker A: I'll copy this. We're going to need this later, so I'll paste it here. Okay, moving on. The next step is to deploy an op ERC 20 on L two. So to do this, I'm going to switch my network open my metamask. And then under networks, select op Sepolia. Make sure that op Sepolia is also selected.
00:13:03.282 - 00:13:22.478, Speaker A: Inside remix. And then I'm going to select this OPRC 20 contract. Hit Ctrl s to compile it so that I'll be able to select it over here. Then select this op ERC 20 contract. Okay, and to deploy this, we'll need to pass in some parameters. Remote token will be the ERc 20 on l one. Paste it here.
00:13:22.478 - 00:13:36.498, Speaker A: And the bridge address. Bridge refers to the local bridge on L two. So this will be the bridge. The L two standard bridge. Deployed on optimism. To get the address, I'll select on the bridge contract. And then scroll down.
00:13:36.498 - 00:13:52.018, Speaker A: And this is the address of the bridge contract. So I'll copy this and then paste it under the bridge input. And then deploy the OPRC 20 contract. Then confirm the transaction. Okay. The transaction was confirmed. So here is the OPRC 20, deployed on optimism.
00:13:52.018 - 00:14:05.430, Speaker A: I'll copy this address. And then I'll paste it here. We're going to need this later. Okay. The next step is to deploy L1 bridge on L1. And l two bridge on L two. So let's start by deploying L1 bridge.
00:14:05.430 - 00:14:27.538, Speaker A: We'll switch the network back over to Sepolia. I'll select L1 bridge and then for the inputs, l one op bridge. This is the address that we'll need. L1 token and l two token. And then deploy the L1 bridge contract. Confirm the transaction, scroll down and the L1 bridge is deployed. I'll copy this address.
00:14:27.538 - 00:14:43.458, Speaker A: And then paste it here. Okay, next, we need to deploy the l two bridge on optimism. So open metamask, change the network. Make sure that inside remix. We're on optimism supportio. And then scroll down. And then click on l two bridge.
00:14:43.458 - 00:15:05.690, Speaker A: And for the inputs, address of the L two standard bridge. Paste it here. L1 token and l two tokens. L1 token and l two token. Confirm the transaction. The transaction was confirmed. So I'm going to copy the address of the l two bridge contract.
00:15:05.690 - 00:15:35.810, Speaker A: And then paste it here. What's the next step? The next step is to mint Erc 20 and approve L1 bridge. So to do this, we'll need to go back to Sepolia, select sepolia, open the Erc 20 contract. And then we'll mint some tokens. So I'll copy the address of my account, paste it here, and let's mint 1000 token. Confirm. Okay, next, I'll approve the L1 bridge.
00:15:35.810 - 00:16:20.006, Speaker A: So I'll copy the address of the L1 bridge and then paste the address over here and for the amount to approve, I'll just put a large number and then hit transact. Okay, we're now ready to send this ERc 20 over to L two. So to do this, we will need to call the L1 bridge contract and call the function send to L two for the remote address. We'll pass in the address of the L two bridge contract that we have over here. So I'll copy this, paste it here and for the amount let's send 100 token, confirm the transaction while we're waiting for the message to relay over from L1 to L two. You can check the status by going to optimismsapolia blockscalt.com here.
00:16:20.006 - 00:16:55.358, Speaker A: I'm going to paste the address of the ERC 20 on L two op ERC 20 and then search for the contract. Then I'm going to click on internal transactions and you can see that there are some activities here. So this probably means that the message was relayed over from L1 to L two. I'm going to click on the latest one and you can see over here that token was minted back inside. Remix. I'm going to switch back over to optimism. Sepolia, let's check the balance of Op ERC 20 for the contract L two bridge.
00:16:55.358 - 00:17:28.662, Speaker A: I'm going to copy the address of L two bridge and then inside the contract OPRC 20. I'll click on balance up, click on it and we get 100 token. So what just happened is that we locked our ERC 20 on L1 and then minted another representation of the same token on L two. Okay, let's withdraw this token from the L two bridge contract inside the L two bridge contract. Paste the address of the contract and then call withdrawal. Okay, the transaction was confirmed. Let's check the balance of OPRC 20 for L two bridge contract.
00:17:28.662 - 00:18:07.990, Speaker A: So copy the address and then paste it into here and then call balance up and it is now equal to zero. How about our account? Copy the account, then paste it here, call balance up and we now have 100 op ERC 20. Next, let's send this op ERC 20 back to L1. So what's going to happen is op ERC 20 will be burnt by L two standard bridge. And then on the L1 side, our ERC 20 contract that is locked inside L1 standard bridge will be unlocked. So to start off with, we will approve the L two bridge contract. The spender will be this L two bridge contract.
00:18:07.990 - 00:18:44.158, Speaker A: I'll paste it here and for the amount doesn't really matter. So I'll just put in a big number. Confirm the transaction once the transaction is confirmed, to send tokens from L two back to L1, we'll call the function send to L1 on the contract L two bridge. For the remote address we'll pass in the address of L1 bridge contract. Paste it here. Now if you want to directly send it back to your account on L1, you can here just paste it in the address of your account. But for this example, we'll send it to a contract.
00:18:44.158 - 00:19:28.290, Speaker A: So I pasted the address of the L1 bridge contract for the amount 100 and then confirm the transaction. When we send tokens from L two back to L1, there are extra steps that we'll need to execute. These are to prove withdrawal transaction and then finalize withdrawal transaction. So what I'm going to do is we're going to execute the node script that I've shown you in the previous videos. You'll first need to copy the transaction hash for the transaction that we just executed to send token from L two back to L1. So from my metamask, I'm going to copy the latest transaction id back inside my code editor. We'll execute a script that will send a transaction to prove the withdrawal transaction and to finalize it.
00:19:28.290 - 00:20:10.142, Speaker A: So the script that we're going to be running is node source index Js and here's the code. What it's going to do is it's going to send a transaction to prove the message and then to finalize the message. So to execute the script, I'm going to open my reme and then first paste the l two transaction ash, and then we will execute this script. Okay, the script ran successfully. You can also check the status of the transaction by going to optimismsepolio blockscalp.com. And here's the transaction detail. And if we scroll down, you can see the withdrawal status, can see over here that the transaction was related over to L1.
00:20:10.142 - 00:20:45.690, Speaker A: Back inside remix. Make sure that you're connected to Sepolia Testnet. So this will be L1, and let's check the balance of ERc 20 inside the L1 bridge contract. So scrolling down, I'll copy the address of the L1 bridge contract and then call the function balance up on ERC 20. And we now have 100 token inside the L1 bridge contract. And to withdraw this token, we'll call the function withdraw on the L1 bridge contract inside the function withdraw. I'll paste the address to the ERC 20 contract.
00:20:45.690 - 00:21:32.770, Speaker A: Paste it here call withdrawal. Okay, once the transaction is confirmed, let's check the balance of l one bridge for the token ERc 20, scroll back up, and then here paste address of the l one bridge contract, call the function balance up, and we get back zero. For the last part of this video, let's check the transaction that finalized the withdrawal transaction from L two. Inside ether scan, I searched for my account, and if I scroll down, I see a list of transactions here, I see a action called finalized withdrawal transaction. This is one of the transaction that was executed when we executed the node script. I'll click on this transaction, and if I scroll down, you can see over here that our token was transferred over from the L1 standard bridge contract over to our L1 bridge contract.
