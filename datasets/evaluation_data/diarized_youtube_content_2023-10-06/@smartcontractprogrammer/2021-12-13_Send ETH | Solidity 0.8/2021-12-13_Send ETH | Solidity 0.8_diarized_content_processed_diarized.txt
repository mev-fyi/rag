00:00:00.410 - 00:00:29.766, Speaker A: There are three ways to send ether from a contract. Transfer, send and call. Transfer sends 2300 gas and if the send fails for some reason, then the whole function fails. Send is like transfer. It also sends 2300 gas. However, unlike transfer, it returns a boolean value that indicates whether send was successful or not. Call forwards all gas and it returns two values, a boolean indicating whether the call was successful or not, and some data.
00:00:29.766 - 00:01:02.750, Speaker A: We'll look at how to use call in more details. In another video. For today, we'll focus on how to send ether using transfer, send and call to be able to send ether from a contract, this contract first needs to be able to receive ether. One way for this contract to receive ether is to pay it when this contract is deployed by having a payable constructor. So I'll type constructor payable. Another way is to have a payable fallback function. So I'll type fallback external payable.
00:01:02.750 - 00:01:38.694, Speaker A: Instead of using a fallback to enable this contract to receive ether, we can replace this with receive. This way this contract is saying hey, we're only going to receive ether. And if you try to call a function that does not exist inside this contract, we don't have a fallback function, so your function call will fail. So these are two ways to put ether into this contract. Send ether when this contract is deployed, or directly send ether by having a receive or a fallback function. Once we have a way to send ether into this contract, let's now write some code. Send ether out from this contract.
00:01:38.694 - 00:02:13.702, Speaker A: The first way that I'm going to show you is by using transfer. Transfer is a function available to payable address. So for this example, send by transfer, we have a payable address that we're going to be sending ether to. So I'll type two dot transfer and inside the parentheses we'll put in the amount of ether to send. For example, one, two, three. This transfer function will transfer only 2300 gas to the address of two. So if address two is a contract, then it only has 2300 gas to execute some code.
00:02:13.702 - 00:03:14.394, Speaker A: If this function call fails for some reason, then this whole transaction will fail. Similar to transfer, we can also use send. So we'll say two send. One, two, three, send will also transfer 2300 gas and it will return a boolean value indicating whether the send was successful or not. So we'll capture it in a variable saying Boolean sent equals and you probably want to check that the send was successful by typing require send, and if it failed, put in some error message like send failed a lot of the popular smart contracts on the main net would never use this function. They will either use the transfer function or the call function. To use call to send ether, you will type two call curly braces value, and inside here you specify the amount of ether that you want to send.
00:03:14.394 - 00:04:01.290, Speaker A: Again, we'll send one, two, three parentheses, and inside the parentheses you put an empty string. Don't worry about the syntax. For now, we'll cover in details how to use the call function. In another video, the function to call forwards all gas, and it will return two variables, the boolean, indicating whether the call was successful or not. So for example, I'll say Boolean success and also return the bytes memory data. For now, I'll just ignore the second input bytes data, so I'll just omit it. And again, we want to make sure that the call was successful, so we'll require success, and if it failed, then we'll say call failed.
00:04:01.290 - 00:04:45.570, Speaker A: Let's now deploy this contract and call these three functions. From this contract, we'll be sending ether to this contract e receiver. I've mentioned that transfer and send forwards 2300 gas, and to show you that I've created an event and it's going to log the amount of ether that was sent and the amount of gas that was sent. So compile the contract and then we'll deploy send ether contract. We'll deploy it with one ether hit deploy, and then next deploy the eth receiver contract. This is the contract that we're going to be sending ether to. Scroll down, expand send ether contract, and we'll call these three functions.
00:04:45.570 - 00:05:36.310, Speaker A: We'll send ether to the eth receiver contract. So I'll copy the address of the contract, and the first function that I'll call is send by transfer. Paste that address, call the function, open the transaction log, and send by transfer. It sent 123 way of ether and the gas left when this part of the code was executed is 2260. So what happened here was that 2300 gas was sent to this function, and by the time this code was executed, there was only 2260 gas left. You'll see a similar log when we call the function send, so I'll copy the address here, call the function, open the transaction log, scroll down, and the logs look exactly the same. However, if we call send by call, it's going to forward all of the gas.
00:05:36.310 - 00:06:09.850, Speaker A: So I'm going to copy the address again, paste it here, and then call the function, open the transaction log, scroll down, and notice that it sent a lot of gas. So there are three ways to send ether from a contract transfer send and call. The first two function transfers 2300 gas, whereas using call it forwards all the gas. As of now, the recommended way to transfer ether is to use call. You will see the function transfer using sometimes, but I've never seen a contract use send to send ether.
