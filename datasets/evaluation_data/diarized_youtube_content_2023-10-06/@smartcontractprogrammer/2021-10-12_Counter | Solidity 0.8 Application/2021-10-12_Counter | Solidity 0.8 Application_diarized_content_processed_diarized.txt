00:00:00.410 - 00:00:30.482, Speaker A: Let's put together all of the concepts that we have discussed so far and build our first app. What are we building? We're going to be building a counter. You'll be able to increment and decrement a counter inside the smart contract. Is it useful? Absolutely not. However, it is a really good app to build to get a feeling for solidity. First we'll put the license to suppress any solidity warnings your contract will compile without a license header. But we'll put this to suppress the solidity compiler warnings.
00:00:30.482 - 00:01:12.420, Speaker A: Next, we'll set the solidity compiler version to 0.8.7 or greater. We do that by typing in pragma solidity Hat 0.8.7 semicolon and this will tell the solidity compiler that we're targeting a compiler version that is greater than or equal to 0.8.7. We'll define a contract by typing contract name this counter. Curly braces we're going to need to store the current count of the state variable. The type of the state variable will be un and we'll declare the state variable as public.
00:01:12.420 - 00:01:58.290, Speaker A: By declaring this state variable as public, we'll have read access after this contract is deployed, meaning that we'll be able to get the value of this state variable. We'll name this state variable count and it's going to store the current count. We're going to need two functions, a function to increment the count and a function to decrement the count. Let's first write the function to increment the count, so we'll type function. I'll name this function. Ink doesn't need to take any inputs, so parentheses it's going to be an external function, meaning that we'll be able to call this function after this contract is deployed. This function is neither a view nor a peer function because we're going to be modifying the count state variable.
00:01:58.290 - 00:02:32.080, Speaker A: This function is a function that we'll write. It is not a read function and we'll increment the count by typing count plus equals one semicolon and that completes the function. To increment the count by one. Let's now write the function to decrement the count by one. I'll name this function deck. It takes in zero inputs. Again it will be external, and again, since this function is going to modify the state variable count, this is neither a view nor a pure function.
00:02:32.080 - 00:03:24.940, Speaker A: We'll decrement the count by typing count minus equals one semicolon and this completes our contract that stores account and we'll be able to call the function ink to increment the count, and call deck to decrement the count. Let's now compile this contract, deploy it, and call some functions. So I'll hit ctrl s to compile it, and to deploy it, hit this ethereum icon, deploy a contract, scroll down, expand the contract, and notice that we have three functions. Count to get the current count, ink to increment the count, and deck to decrement the current count. If I click on ink two times and then get the current count, the current count is two. And then if I call deck once, the current count is one.
