00:00:00.330 - 00:00:41.302, Speaker A: Fallback is a special function that gets called when a function that you call does not exist inside the contract. The main use case of a fallback function is to enable direct sending ether. For example, here I have a contract and let's say that someone called a function called foo and the function foo does not exist inside this contract. So what will happen is that the fallback function will be executed. Now, at the moment, the fallback function is not defined inside this contract, so I'll declare by typing fallback external. Now, when someone calls the function foo inside this contract, the function foo does not exist. So this fallback function will be executed.
00:00:41.302 - 00:01:27.270, Speaker A: This fallback function is mostly used to enable a smart contract to receive ether. So when another account or a contract tries to directly send ether to this contract, this function will be executed. To enable this contract to be able to receive ether, we need to declare the fallback as payable. So now this contract can receive ether. You can send ether directly to the smart contract or have another contract send ether to this contract. Both will work because we have declared a fallback that is payable. Now, there's actually two variations of fallback fallback and another one that is similar called receive, and this one will also be external and this function has to be payable.
00:01:27.270 - 00:02:19.450, Speaker A: So what is the difference between your fallback and a receive? The difference between fallback and receive is that receive is executed when the data that was sent is empty. So let's say that ether is sent to this contract. If the message data is not empty, then the fallback function will be executed. However, if message data is empty and if the receive function is declared inside the contract, then the receive function will be executed. Otherwise, the fallback function will be executed to show you that the fallback function will be executed when message data is not empty and to show you that receive function will be executed when message data is empty. I've created a log, so inside this function we will emit log the function name. This is a fallback.
00:02:19.450 - 00:03:08.146, Speaker A: The account that called will be message sender. The amount that was sent will be message value, and the data that was sent will be stored in message data. Likewise for receive, I'll copy this, paste it here, and then change fallback to receive message sender message value. And since the receive is only executed when message data is empty, I'll clear this to be an empty string. We will compile the contract, deploy it, and call these functions. So I'll compile the contract and then deploy it. So notice that there is no function to call inside a contract fallback.
00:03:08.146 - 00:03:52.406, Speaker A: But we can call the contract by doing a low level interaction. We will call the fallback function first by sending some ether and also having message data not empty. So for today we'll send one ether. So that is ten to the 18 way, scroll down, and for data it doesn't matter. So I'll just send zero x 121212, call transact, open the transaction, scroll down to find the log that was emitted and the log that was emitted. The function was fallback, that's the sender. The value that was sent was one ether, and the data we sent was zero x 121212.
00:03:52.406 - 00:05:00.494, Speaker A: Next, we'll try to trigger the receive function. This is executed when message data is empty. So I'll clear this out, and again we'll send one ether and then hit transact. Open the transaction, scroll down to find the logs, and this time notice that the function that was called is received and the data is empty. Recall that earlier I said that if the receive function does not exist, then even though message data is empty, the fallback function will be executed. And to show you this, I'm going to remove the receive function and then we'll call this contract with message data being empty. So I'll compile the contract, delete the contract that is deployed, and then redeploy the fallback contract, scroll down, open the contract, and then again we'll send one ether with message data being empty, hit transact, open the transaction log, and notice that it called the fallback function in.
00:05:00.494 - 00:05:20.010, Speaker A: So in summary, the fallback function is executed when you try to call a function that does not exist. It's mostly used to receive direct sending of ether. The fallback function will be called if message data is not empty, and if there's a receive function and message data is empty, then the receive function will be executed.
