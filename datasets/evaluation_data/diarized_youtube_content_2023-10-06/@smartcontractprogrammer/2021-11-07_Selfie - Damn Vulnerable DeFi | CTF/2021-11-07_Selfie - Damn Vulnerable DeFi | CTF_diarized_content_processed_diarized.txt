00:00:00.570 - 00:00:23.674, Speaker A: Today we'll take a look at the 6th challenge of damn vulnerable dfi selfie. A lending pool has been launched. It is offering flash loans of DBT tokens and it even includes a fancy governance mechanism to control it. We start with no DBT tokens and the pool has 1.5 million. Our goal is to drain all 1.5 million dbt from the pool.
00:00:23.674 - 00:00:47.638, Speaker A: Let's take a look at the contract check. Here is the lending pool contract. This is the contract where we can get the flash loan. Let's scroll down and see what functions are available. It has a flash zone similar to the ones we have seen so far and it also has a function called drain all funds. However, this function can only be called by the governance. So next, let's take a look at the governance contract.
00:00:47.638 - 00:01:33.434, Speaker A: The governance contract has two important functions, queue action and execute action. The function queue action will queue an action for a transaction to be executed later. It takes in an address to execute the transaction on, the data to call with it and the amount of way to send. Now, this function can only be called if there is enough boat for message sender. So let's take a look at has enough boats how much boats of the governance token does message sender need in order to call this function? Q. Action to have enough vote, the account must have more than half the supply of the governance token at the last snapshot. And you can see this logic here.
00:01:33.434 - 00:02:10.290, Speaker A: Balance of the account greater than half the total supply. So an account has sufficient votes if the balance of the account has more than half the total supply of the governance token at the last snapshot. If message sender has enough votes, they will be able to queue an action, a transaction to be executed later. So next, let's take a look at the function to execute this queue. This is called execute action. Anyone will be able to execute an action as long as the action can be executed. Let's take a look at the condition for an action to be executed.
00:02:10.290 - 00:02:59.166, Speaker A: The condition for a queue to be executed is that it is not executed and the current timestamp is greater than the timestamp which it was proposed, plus some action delay in seconds. Action delay in seconds is two days. In other words, once the transaction is queued, if we wait two days, then we'll be able to execute the transaction. And lastly, the governance token. The DBT token is an ERC 20 token with a basic snapshot functionality. Anyone can call this function and when that person does call this function, it looks like it will take a snapshot of all of the accounts that is managed by this contract. And you can see here that we can get the balance of an account at the last snapshot, and we can also get the total supply at the last snapshot.
00:02:59.166 - 00:03:36.002, Speaker A: Our challenge is to Jane all of the DBT tokens inside the flash loan contract. Pause the video here, give it a try, and in a few seconds I'll explain the solution. Okay, let's go over the solution. The solution is to call drain all funds. But notice that only governance is able to call this function. And if we go back to the governance contract, the only way that governance can call any transaction is to call execute action. And we can only execute an action if an action is first queued and wait for two days.
00:03:36.002 - 00:04:27.310, Speaker A: And lastly, we can only queue an action if message sender has enough votes. Again, remember that enough votes means that the balance of the account has more than half of the total supply of the governance token. So our solution here is to get a flash zone, take a snapshot, and then immediately queue in action to drain all funds from the flash loan contract. After two days we call execute action and actually drain the tokens from the lending pool contract. Let's write this in code. First we'll create a contract that's going to hack the lending pool contract, and we'll initialize some contracts. We'll initiate the hack by calling the function attack, which will call flash loan on the lending pool contract.
00:04:27.310 - 00:05:10.782, Speaker A: And we're going to borrow all of the DBT tokens inside the pool contract. Now if you scroll back up and look at the flash loan function, you can see here that it calls back into a function called receive tokens. So back inside our hack contract, instead of declaring the function, we'll declare a fallback function instead. Inside the fallback, we'll take a snapshot of the token and then immediately transfer all the tokens back to the pool. After we take a snapshot, we now have sufficient amount of tokens to be able to queue an action on the governance contract. So we'll queue an action to drain all funds and the receiver of the tokens will be this contract. That is the first step of the attack.
00:05:10.782 - 00:05:45.970, Speaker A: The next step of the attack is to wait two days and then actually execute action on the governance contract. So we'll do that by declaring a function called attack two and then just call governance execute action. And the action that we're going to be executing is this function over here, drain all funds inside the selfie challenge script. I've deployed a hack contract and then call the hack attack function and then we wait more than two days. Here we're waiting three days. And then afterwards we call the second attack function. Let's run the script.
00:05:45.970 - 00:05:56.570, Speaker A: So I'll type NPM. Run selfie. And we passed the challenge. Thanks for watching. See you next week.
