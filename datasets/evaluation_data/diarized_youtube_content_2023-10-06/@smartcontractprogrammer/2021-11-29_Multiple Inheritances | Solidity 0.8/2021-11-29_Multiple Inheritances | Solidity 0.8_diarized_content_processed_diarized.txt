00:00:00.330 - 00:00:33.570, Speaker A: Let's say that I have a contract that inherits multiple contracts. Here we have a contract z and it inherits from y and x. When a contract inherits multiple other contracts, then the order of inheritance is important. The order must be from most baselike to derived. So in this video, I'll explain what that means, and I'll show you how to write the syntax for multiple inheritance here. Contract z inherits from both y and x. When we declare the inheritance for contract z, we have to declare it from most baselike to derived.
00:00:33.570 - 00:01:17.270, Speaker A: The contract that is the most baselike is the contract that inherits the least. In this graph, which is the contract that inherits the least. Well, z inherits from both x and y, while y inherits from x, and x does not inherit any other contract. So in this case, the most baselike contract will be x. What is the more baselike contract between y and Z? Again, z inherits two contracts, y and x, whereas only y inherits only one contract, which is x. So in this case, y will be more baselike than z. In this case, the order of most baselike to derived contracts will be from left to right, x, y and then z.
00:01:17.270 - 00:01:40.350, Speaker A: Let's look at another example here. The inheritance is similar to the example above, except that now z inherits from B, which inherits from a, and a inherits from x. Let's list out the order of most baselike to most derived contracts. The most baselike contract here is x. The next one will be either y or a. It doesn't matter. So I'll just put y.
00:01:40.350 - 00:02:16.822, Speaker A: So the next one will be a. Now we have two more contracts left, B and z. B inherits from a, whereas z inherits from both y and b. So the more baselike contract out of these two contracts, b and z will be b, and then finally z. That is the order of inheritance from most baselike to most direct. So now I'm going to show you the syntax for declaring multiple inheritance. And for this example, we'll be using this inheritance x inherits y, and z inherits both y and x.
00:02:16.822 - 00:02:46.930, Speaker A: Here we have contract x. It has a function foo bar which can be overwritten, and it also has a function that is unique to this contract X. I named it function X. Likewise, the function y overrides foo and bar of x, and it has a function unique to this contract. I've named it Y. I already showed you how to override a function for a single parent contract, so we'll skip the details here. Now, I have contract z and I want this to be inherit both x and Y.
00:02:46.930 - 00:03:39.410, Speaker A: So how do I do it? Well, we start with the keyword is to say that this contract inherits from parent contracts, and then we list out the contracts that it's going to inherit. Recall that we said that contract inheritance must be declared from most baselike to most derived. In this case, since Y inherits from x, the most baselike out of x and Y will be x, and then comes y, the more derived out of these two. So this is how you declare that z inherits both from x and Y. Now, if I were to mess this up and then switch the order, then this contract will not compile. Now, moving on, these are the two functions that we want to override. And the way to do that is to type override parentheses.
00:03:39.410 - 00:04:32.650, Speaker A: And inside the parentheses we need to list out these contracts that we inherited. So here we'll type x and y. Now, it doesn't matter if we put in x and y, or if we put y first, and then next we'll do the same for the function bar and type override parentheses xy. And just to show you that the order doesn't matter, I'll switch this up to say y comma x, compile the contract and deploy contract z. And notice that contract z has four functions, function x unique to contract x. So z inherited the function x. Z also inherited the function y, and it customized the function foo and then bar both returning z's.
