00:00:00.090 - 00:00:22.318, Speaker A: Alright, everyone, welcome back to another episode of Bell Curve. Before we jump in, quick disclaimer. The views expressed by my co hosts today are their personal views and they do not represent the views of any organization with which the co hosts are associated with. Nothing in the episode is construed or relied upon as financial, technical, tax, legal, or other advice. You know the deal.
00:00:22.404 - 00:00:24.350, Speaker B: Now let's jump into the episode.
00:00:25.130 - 00:00:42.406, Speaker C: You the Internet of Roll Ups is this idea that in the same way that Cosmos had this vision for an ecosystem of blockchains where each one was sovereign, could make its own rules and control its own destiny and that would allow for much faster innovation in L ones. We want to see the same thing.
00:00:42.428 - 00:00:43.414, Speaker D: Applied to roll ups.
00:00:43.462 - 00:00:45.290, Speaker A: All right, buddy, welcome back.
00:00:45.360 - 00:00:46.026, Speaker B: Good to see you.
00:00:46.048 - 00:00:57.966, Speaker A: This is going to be a good one. We've got Preston, who is one of the co founders at Sovereign Labs, and Coleman, who's one of the co founders at Slush SDK. You want to give a couple of words about why we've invited these two guys on?
00:00:57.988 - 00:02:01.346, Speaker D: So all season we've been kind of teasing out the benefits of a full stack app chain versus, on the other end of the spectrum, an app specific roll up, even an L three. And in the middle you've got Celestia with this modular approach, and Sovereign Labs, which is leveraging that to let applications build sovereign app specific roll ups that really handle more of the stack or as close as possible to a full stack app chain as we've seen yet. So I think we have within this family of app specific roll ups builders at either end of the spectrum. And I think today we just want to talk about what they think about what goes into a minimum viable stack for applications. What are some of the network effects associated with SDKs that has led the Cosmos SDK be successful? How do they plan to replicate that from an adoption standpoint? And yeah, really excited to dig into it with them.
00:02:01.368 - 00:02:36.442, Speaker A: All right, let's jump right in. All right, everyone, welcome back to another Bell Curve. You're joined by Miles and I. And today we've got Preston from Sovereign Labs and Coleman from Slush SDK. So this is probably going to be another relatively technical episode, so I think maybe we can start kind of high level and then drill down. Miles and I have really been trying to explore this kind of spectrum, right, where you've got sort of the full stack Sovereign blockchain kind of pioneered by the Cosmos ecosystem on the left and then on the right, you've kind of got a roll app type environment that settles down to ethereum. And then we've kind of got the middle, which is going to be represented here by Sovereign Labs.
00:02:36.442 - 00:02:55.502, Speaker A: So Preston, maybe I could kind of kick it over to you. I know you sort of have a vision for kind of the Internet of roll ups, so to speak. So maybe you could just sort of give us the high level on your vision and kind of direction at Sovereign Labs. And then, as much as you want to drill down into the specifics of sort of the what and why that'd be super appreciated.
00:02:55.566 - 00:03:11.106, Speaker C: The Internet of roll ups is this idea that in the same way that Cosmos had this vision for an ecosystem of blockchains, where each one was sovereign, could make its own rules and control its own destiny, and that would allow for much faster innovation in l ones. We want to see the same thing.
00:03:11.148 - 00:03:12.326, Speaker D: Applied to roll ups.
00:03:12.438 - 00:04:04.890, Speaker C: So a roll up is just a blockchain, right? It's a blockchain that outsources some of its security to another chain. And the big advantage of having a roll up as opposed to a layer one blockchain is that you don't have to pay the capital costs of recruiting a validator set to do work for you. So there's only room for a few L ones in the world because each one of them needs billions or more of dollars in security budget. And realistically, nobody wants to spend that much money to secure, whatever, a chain that only trades a few niche NFTs or something like that. But we do think that bottom up innovation is where much of the good work comes from. And so you need a vehicle to allow that. So the Internet of roll ups is this idea that you should have roll ups which are able to communicate with each other in the same way that Cosmos chains are able to communicate, but without sort of relying on each one of them having their own validator set to facilitate that.
00:04:04.890 - 00:04:26.750, Speaker C: So what we're building at Sovereign is this tool called the Sovereign SDK, which is inspired in many ways by the Cosmos SDK, but trying to improve it and target application specific roll ups. So the core thesis is that these roll ups should be efficient and they should be able to communicate seamlessly. And the way to do that is by using zero knowledge proofs to let them talk to each other in a way that's trust minimized.
00:04:26.830 - 00:04:59.366, Speaker D: That's great. I appreciate you kind of laying out the broad vision there. And I'd love to sort of dig into the different flavors of roll ups. Now. Totally understand the thesis here. You're trying to basically give all the benefits of a full stack app chain or as many as possible without the pains of spinning know your own validator set and really the security concerns around that as well. And so maybe I'll kick it to Coleman here just to understand exactly where you're building on the spectrum of roll ups.
00:04:59.366 - 00:05:24.894, Speaker D: As I think about it, three big buckets. You have smart contract roll ups. You have L, three S that are built on settlement roll ups. And then you have Sovereign roll ups much more like the Sovereign SDK. So colin yeah. I would love to hear a little bit more about where Slush falls on that spectrum. And what do you think the different trade offs are from the perspective of the builder, looking at these three options?
00:05:25.032 - 00:06:09.266, Speaker B: So we're building L freeze. Slush currently focused on the StarkNet and the EVM ecosystems. The way we see it is sovereignty is great, but interoperability is more important. And for interoperability, being able to bridge to and from trusted sleep between the L three S, state proof bridges will be the most important component. And for this, having the same virtual machine and the same circuits is essential. And inside a given ecosystem, you will be able to trustlessly bridge between the different L three S. And the different L three S can all settle onto the same L two.
00:06:09.266 - 00:06:27.378, Speaker B: And this makes them ultimately all rely on the same L one security. But the fact that they are settling on the L two means that they are all secured, that they can quickly settle onto the L two and bridge between each other very quickly.
00:06:27.484 - 00:06:40.826, Speaker D: So it's basically you get the level of interoperability of Cosmos chains with some sort of lake client Bridging capability, but within the same ecosystem of that L two, everything settles to yeah.
00:06:40.848 - 00:06:43.420, Speaker B: So maximum security basically.
00:06:44.210 - 00:07:02.062, Speaker D: Got it. And then, Preston, how are you thinking or how would you compare that approach to what Sovereign is building, where each individual roll up actually owns its own settlement? How do you think about interoperability if you're making that trade off to own your own settlement?
00:07:02.126 - 00:07:36.410, Speaker C: Yeah, so our view here is that there's actually no trade off. So there's this really interesting set of results that shows that basically bridging between two separate blockchains is a fundamentally difficult thing to do. So something like Cosmos, you sort of necessarily have fragmented liquidity, and anytime you want to bridge across two different chains, you're in a bad place. Right. You're trusting both validator sets, and if one of them is unreliable, then you can lose your money. So it's risky, for example, to bridge from the Cosmos hub to some new IBC chain that nobody's really used before. That's not true for roll ups.
00:07:36.410 - 00:08:11.770, Speaker C: So with roll ups, Bridging is fundamentally easy. In the same way that making a cross contract call ethereum, it's fundamentally easy. So at Sovereign, we take full advantage of this. And basically, the most important property to remember is that you're all on the same DA layer, so you all have the same consensus. And that means there's no way for one chain to roll back without all the chains rolling back together. So if you want to send a message from roll up A to roll up B, you can be sure that either that message got sent and delivered, or it never got sent. There's no middle state where it got sent on one chain but not received on the other chain.
00:08:11.770 - 00:08:45.870, Speaker C: So at Sovereign, what we do is we take advantage of this to allow you to bridge natively between roll ups without having to go through a shared settlement layer. And the big advantage of that is that we can support platforms that don't have smart contracts. So if you want to build an L3s, you need some sort of L2 smart contract in the middle, which can sort of pass the messages between chains and verify state routes and that sort of thing. In our construction, you don't need that at all. So we can run on a platform like ivinda or like Celestia that doesn't have any scripting capability whatsoever, and we can still build bridges between roll ups that are completely trustless.
00:08:45.950 - 00:09:17.338, Speaker D: That's fascinating. I mean, it's both using zero knowledge proofs, but definitely taking a little bit of different approach in terms of the amount of flexibility you have with these different stacks. So I guess when you started building, what did you have in mind for what we've been calling the minimum viable stack? So what are the components that go into the minimum viable stack and how do you really package them in the best way for developers, balancing ease of use with customizability and configurability?
00:09:17.434 - 00:10:08.350, Speaker C: Yeah, it's a really good question and I don't think we really know the answer yet. You don't know what the minimum viable thing was until it starts working. So at Sovereign, we're taking this approach of very Iterative development. We're hoping to come out with a minimum product soon, which we expect will probably be too minimal, and then we'll just keep adding features until it sort of starts to get traction. But at a high level, what developers want is they want interoperability and they want some way to not have to roll the whole thing from scratch. So there should be some way of getting them a full node implementation that they didn't write themselves. There should be some way for them to, for example, get access to cryptographic primitives like merkel trees for state commitments, like hash functions, like digital signatures, without them picking all of those things for themselves because those decisions require kind of a lot of expertise.
00:10:08.350 - 00:10:24.258, Speaker C: So at Sovereign, we're going to roll out a very minimal product in a few months here and then we'll keep on iterating and getting bigger and bigger. And in the fullness of time, we hope for it to be much like the Cosmos SDK, where you can essentially just write a few lines of code and the whole thing works out of the box.
00:10:24.344 - 00:10:44.570, Speaker D: Yeah. And Coleman, maybe just to compare that to the Slush side, I think you spoke to the importance of sharing the same VM. Obviously these will all share the same settlement layer. Correct me if I'm wrong. It sounds like you're leveraging a couple more building blocks in building the stack.
00:10:45.150 - 00:11:19.042, Speaker B: So I understand that Sovereign can settle anywhere that it wants to, but why would you? You can settle on well established layer ones and layer twos, which do have very complete virtual machines. And this allows you to access very large developer community, very large liquidity pool, and most of the current liquidity and developers are on existing platforms. And if you can allow them to scale, then I think that has bigger implications.
00:11:19.186 - 00:11:50.922, Speaker A: I have a question for sort of like Coleman. If you hit the Slush website, you guys are starting in kind of the StarkNet sort of ecosystem, but it seems like the intent is to kind of bridge out of just that and build a more general purpose kind of SDK. Preston, you started from a very different angle, right? And it's kind of plug and play across a whole bunch of different ecosystems. Can both of you just kind of walk me through? From your perspective, what was the decision to start a little bit more specific? Culminate in your case versus Preston, it seems like you've taken a broader approach.
00:11:50.986 - 00:12:32.954, Speaker B: So for us, we really wanted to serve existing developers, provide decentralization them, and we didn't really know how the ZKE EVMs has come along. So we started on with StarkNet, which has been running for more than a year. Now that the ZKE EVMs are coming along and being open sourced, we are also focusing on those. And here the focus is to really easily spin up new nodes, new roll ups, make them decentralized, allow existing applications to move, and to allow existing users to bridge their funds from L One or to L2 to the new L3s S. Cool.
00:12:32.992 - 00:13:12.780, Speaker C: Yeah. And then on our side, we started from a very first principles approach. So we asked ourselves the question, what do we think blockchains are going to look like in 100 years? And the answer that I was really hoping to get to was like, we'll have some perfect version of Ethereum or a smart contract platform which scales with the number of users. So when you add 100 more users, you also get more capacity that matches those new users. Basically, everybody can process their own data, and yet we all have a shared view of it. So that was the end goal. Well, it turns out that's fundamentally impossible to do if you're actually executing transactions, because executing transactions is something that inherently has to be done by everybody.
00:13:12.780 - 00:14:00.578, Speaker C: But it is possible if all you're doing is putting data in order, because you can make cryptographic commitments to the data that are sort of much lighter than the actual data itself. And then you can use data availability sampling to make sure that everybody can retrieve the data when they need it. So you can build what we call hyperscale data availability systems. This was pioneered by the good folks over at Eigen Layer. They came up with a lot of these ideas and also Celestia. So what we wanted to do was we wanted to figure out how do you turn a hyperscale data system into a blockchain that supports every Imaginable use case because you can share security if you're using this hyperscale DA across a bunch of different logical state transition functions. So different ways of processing transactions.
00:14:00.578 - 00:14:43.190, Speaker C: So for example, in theory you could build Ethereum and near and Solana all on top of this shared DA layer and in some sense they would inherit the same security. So in order to support that, you have to design for an environment where all you get is data. You don't have access to these primitives like smart contracts. But then as a consequence of doing that, you get to find all of these other magical properties. So suddenly, in the process of designing this sort of hyperscale system, we just stumbled into the fact that suddenly you could bridge across these roll ups in a native way without sort of being blocked. And you get other nice properties. Like if you're an L3s on top of an L two, when the L2 gets congested, your fees go up as well.
00:14:43.190 - 00:14:57.482, Speaker C: But if you're sovereign and you're not relying on someone else from settlement, then your fees are very predictable because all they depend on is the capacity of the underlying DA layer which is extremely, extremely large DA layers can hyperscale. So that's sort of how we arrive where we're at.
00:14:57.616 - 00:15:33.842, Speaker B: You know, actually Ethereum will have plans. So for the first principles approach is great but the Ethereum community will have plans to integrate the DA layer into Ethereum itself and they will also have plans for and this is all being currently thought on how to integrate this hyperscaling which is not possible with the current I agree with the current layer one, layer two, layer three ecosystem. But they also have plans of figuring this out and I think this will also be done there just to focusing on the current community and allowing them to scale.
00:15:33.906 - 00:16:02.782, Speaker C: Yeah, thanks for raising that. So we're big fans of Ethereum. My co founder JeM was an Ethereum core dev for a long time. And you're totally right, they are adding sort of more scalable data availability. The problem is that the data availability will scale much beyond the smart contract support. So while you have lots of data, you have very limited capacity for the L One operations that would be needed to check that data availability. And that's again, fundamentally impossible to scale, at least with the current technology that we're aware of.
00:16:02.836 - 00:16:57.842, Speaker A: I'd like to kind of get back to this idea of because Miles has sort of asked about this idea of like a minimum viable stack and maybe we'll wait a little bit into the realm of speculation here pressing because I agree with that answer. We don't necessarily know right now. But even if we just had to do kind of high level frameworks, I think there are so few SDKs that have kind of, like, escape velocity, and a lot of people probably listening to the show be familiar with the Cosmos SDK. And the sort of framework that you're in is like, how do I build a sovereign type blockchain? So you have tendermint and IBC and that sort of thing. I'd be very curious. And maybe, Coleman, I could sort of kick this to you first. As someone in the Ethereum ecosystem or the StarkNet ecosystem, there's very different design criteria, I would guess, right? So what are the different needs for someone who's building kind of on the StarkNet layer as opposed to maybe some of the design principles that went into the Cosmos SDK? What are the core differences, do you think?
00:16:57.896 - 00:17:41.930, Speaker B: So in the Ethereum ecosystem, it's much more focused on security. And the three main design choices are some people need decentralization the most. Other applications need cheap data availability. And the first choice is fast bridging between the different roll ups and maybe games and NFT roll ups will need their own data availability solution so that they can really host a lot of data. There DeFi applications, they will need a lot of decentralization. And for applications where composability is needed, they will need really fast bridging.
00:17:42.010 - 00:17:58.934, Speaker A: Got it. So kind of walk us through what does that actually sort of like if you had to prioritize, I guess, across those three needs, and then how does that actually end up looking in sort of SDK form? Take us through to the need to what actually is going to wind up in there.
00:17:58.972 - 00:19:01.942, Speaker B: Okay, so you want to launch your application. You've been running what, on a layer two for some time and you're gathering users, but you have too much throughput, too much latency. You can launch, for example, if you're a DeFi app, you can launch a decentralized LFI, or you can make it centralized so there's a single sequencer and Boober. If you have a single sequencer and Boober, it makes the latency much smaller because you can confirm to your users that the transaction has been accepted much earlier. And also settlement can be much faster. Or you can have a decentralized solution, in which case it's more expensive, it's more slow, but it's also more secure, it has more security when it comes to liveness, every roll up is secure because it's all secured fundamentally by layer one and it's more decentralized. And then you can have the DA.
00:19:01.942 - 00:20:01.782, Speaker B: It's another question for some roll ups will need to store all the data on layer one. Other roll ups, which will technically not roll ups but validiums, or ZK Porters can store some of their data in different solutions. This can be stored by either the centralized or decentralized validators of the network, or they can also settle this to an external database layer, like Eigen layer Celestial, et cetera. And they will also be able to specify how often they want to settle onto the L two. This also changes the speed of bridging because you can also only bridge between different layer freeze once you've settled onto L2, but it increases your prices because more settlements means more prices.
00:20:01.846 - 00:20:58.042, Speaker D: I mean, one thing you said that struck me, I think, is the position of the app developer who is going to move to Slush. And right, you said that, okay, maybe they're on a general purpose, L2, and they need more throughput, they need more customization, something like that. And so it kind of leads me to think, who do you think you're building for when you think about your own go to market and adoption? Are you thinking about the existing applications that you are trying to basically recruit over to your stack? And you want to build in ways that are flexible enough to accommodate those existing VMs or other parts of their application so it's more frictionless to migrate over? Or are you really thinking about a new class of applications that have not been built yet, but you're building for what you think they will need? How do you strike that balance?
00:20:58.106 - 00:21:52.400, Speaker B: So there's a huge amount of innovation going on in all of the ecosystem, from account abstractions to wallets to vaults. And on the infrastructure layer, I don't think we are capable of anticipating all the needs of the different applications. So what we can do is we can only provide the most general thing that anything can be built on. And this is a fully fledged virtual machine, either an EVM STARTnet virtual machine, but basically any virtual machine. And then the different app developers can choose for themselves what kind of account abstraction, contracts they want to deploy there. They will be able to choose basically everything on top of that. But the basic infrastructure will have to be the same.
00:21:52.400 - 00:21:58.510, Speaker B: So that it's bridgeable and so that it's extendable.
00:21:58.590 - 00:22:24.460, Speaker D: No, it makes a lot of sense. And I think preston, correct me if I'm wrong, but I think you're building with a little bit more flexibility in mind, maybe something that feels a little bit more like the Cosmos SDK stack, where you actually can build features into the chain itself since you own settlement. And so maybe just to kind of contrast that with Slush approach, that'd be great.
00:22:24.910 - 00:23:08.466, Speaker C: Yeah, absolutely. So we absolutely do want to support sort of traditional VMs like the EVM or like Move or like Solana's C level runtime. But there are a lot of applications that you just can't express in that paradigm. So, for example, if you want to build an automated market maker or a Dex that processes things at a batch level so everybody gets the same price within a block, there's fundamentally no way to do that inside of the EVM because you need a hook at the end of the block that you can invoke to settle all those transactions at once. And that's not uncommon. There are many, many things for which you would want sort of VM support and you fundamentally just can't do that on top of an existing VM. And we take the same approach as Coleman.
00:23:08.466 - 00:24:10.570, Speaker C: We don't think we can anticipate what all of those things are, right? We think that's something that app developers will have to make up as they go along, and many of those haven't even been invented yet. So we want to support existing VMs, but we want to be flexible enough to allow people to create brand new VMs and also to do things which don't require a virtual machine. So, for example, if all you're doing is building a Dex, you actually don't want to have all the complexity of having pre compiled to verify, for example, BLS signatures like Ethereum does, because you pay for all of those things in several ways in security, budget, in runtime costs, all those sorts of things. So we take an approach much like the Cosmos SDK. We try to be flexible enough to support general purpose virtual machines, but not really to push developers into that paradigm. And a lot of what we spend our effort on is building the little modules that you would need to plug together in order to make a very standard like Dex chain. Think Osmosis or Duality or the pieces that you would need to build an NFT chain, those sorts of things.
00:24:10.640 - 00:24:18.362, Speaker B: So when you have different virtual machines and different state trees, how can you bridge between them securely?
00:24:18.426 - 00:25:04.074, Speaker C: Yeah, it's a really good question. So there's two pieces of the stack. One is the Zero Knowledge proofs. We only support a certain subset of Zero Knowledge proving systems, which are essentially turning complete. And if you're in that subset of proof systems, then you have this awesome property that you can take two separate proofs and you can create a new proof that says you verified the two original proofs. So using this recursive technique, you can compress ten or 100 or 1000 proofs down into a single proof, which is just as fast to verify as the original was. So as a roll up, what that means is you can be chugging along, processing your own transaction, and then somebody off chain can create a proof that says, hey, roll up B is currently in this state, and roll up C is currently in this state.
00:25:04.074 - 00:25:54.582, Speaker C: And whenever you want, you can check that proof, and that allows you to get a view into what their current state is. So all you need to do is essentially add a smart contract which understands what it means that they're in a particular state. For example, let's say that I have locked some tokens on chain B, on chain A you need to verify, okay, has Preston really locked the tokens? And does that mean that those tokens are intended to bridge to chain A? So should I mint them over here? So you need a little smart contract to do interpretation and then a powerful enough Zero Knowledge proof system. So one of the things that we focus on is trying to enable different proof systems which support very different operations to talk with one another. And there's lots of hairy cryptographic details we could get into, but essentially all you need is a proof system and an interpreter smart contract and you can bridge from any kind of chain.
00:25:54.726 - 00:26:19.134, Speaker B: How do you make sure if you have different virtual machines architecture, how do you make sure that the thing that they are claiming to do is what they are actually doing? Because if you have two different smart contracts, because there are two different virtual machines of both, ERC, 20s, let's say, or the equivalent, how do you make sure that they cannot somehow mint 100 new tokens and send those out of the finger?
00:26:19.182 - 00:26:22.102, Speaker C: Yeah. So you're asking like, what if you have a bridge to a malicious roll up?
00:26:22.156 - 00:26:22.614, Speaker D: Yes.
00:26:22.732 - 00:26:38.522, Speaker C: Is that fundamentally the question? Yeah, exactly. So it's the same answer as in any Bridging system. Like if the other chain is malicious, then all we enforce is that they followed their own rules. Not that their rules are good rules. That's fundamentally the trade off you make when you're Bridging between any two.
00:26:38.576 - 00:27:23.162, Speaker B: So that's why we think that on a system level, you have to stick first to a trusted virtual machine, which will have to be a standard, and that will probably be the EVM, which is a trusted virtual machine. And then on top of those, you can put any proof inside the EVM. You can handle any proof which your Dex, your AMM, whatever, you can design any virtual machine for that. You can prove it, you can settle it inside your, in a sense, a shell EVM, and then this EVM can bridge inside the ecosystem. So that's how we imagined security and extensibility for other virtual machines and other approver systems, in a sense.
00:27:23.216 - 00:27:51.742, Speaker C: Got it. So I think the thing that you're missing there is that these faults are not contagious. So let's say as roll up B, you're connected to twelve other roll ups and one of them is malicious users who aren't bridging their tokens onto the malicious chain have no risk from that malicious bridge. So as a user, if you bridge to a chain that says like, hey, burn all my funds, yeah, you lost your funds because you talked to a malicious smart contract, that's the same risk you have on the EVM. So Osmos already does this exact same thing and it works extremely well in practice.
00:27:51.806 - 00:28:06.386, Speaker B: Okay, so then maybe what we will have is that in our system, any two roll ups, so all of them can easily interoperate, and Bridging between any two roll ups will be super simple. So in our case, it will actually be contagious.
00:28:06.498 - 00:28:48.470, Speaker A: I just want to kind of move the conversation a little bit more towards one question that I have, frankly, is as a more nontechnical founder here, is I try to wrap my mind around. What is a traditionally understandable business model, right? So I very much understand kind of what you guys are both providing, like the service. But I'd be very curious to understand, maybe I can just ask this question to both you guys. What are your kind of core business challenges? Like when you guys are going to bed at night, what are you sort of thinking about? Like, man, if I could just get these two things then I'd be feeling much better than I'm feeling right now. And then if you could anything that you could describe around the business model here and how you guys actually monetize, I think that kind of makes things I'd just be very curious about how that works.
00:28:48.540 - 00:29:21.822, Speaker B: So for us in a decentralized ecosystem, it's very hard to monetize anything because everything should be open source, everything should be forkable and you can run your own system. So for decentralized chains it will be much harder to monetize. But we think that a lot of chains will not need to be decentralized and will need centralization and added speed that this guarantees. And for them we will be able to guarantee a platform that helps them with this.
00:29:21.876 - 00:30:02.406, Speaker C: Yeah, I completely agree with what Colin said. We really believe in open source everything's Apache licensed, and you can freely fork it and change anything you want, which makes it very difficult for us to monetize directly. So our stuff is free and open source and kind of always will be. So the way to make money then is to do things like offer premium support in the way that Red Hat does, or include a founder's reward in the default token implementation and just tell people like, hey, if you don't like it, you can easily fork it out. Here's the code, here's how you do it. But if you like the product, consider supporting us in developing it. And then the last idea is that all of these ZK rollups need proving services and they need some relay nodes to talk back and forth.
00:30:02.406 - 00:30:20.082, Speaker C: So you can have an AWS Ish business where you stand up all that infrastructure for people. So that as a developer you just write your business logic and click a button and the rest of the chain magically appears. So there's a big space of potential monetization here, but frankly we want to have a working product before we worry too much about that.
00:30:20.136 - 00:30:57.882, Speaker D: I think that makes sense. How do you think again, a little bit of a nontechnical question, but we think a lot about end state market structure. And how do you think that the end state market structure of roll up or I would say app chain stacks will look like? How powerful are some of the network effects around interoperability standards, shared VMs that could result in a winner take all or winner take most? And then what factors would cause an end state market structure to look like a lot more fragmented.
00:30:57.946 - 00:31:18.740, Speaker C: Yeah, it's a really good question. Coleman, feel free to jump in here if you have any thoughts. I guess it's pretty early for us to say anything, for sure. In general, we expect to see power laws pretty much everywhere. So 80% of chains will probably be on one or two common standards. Think like Cosmos, SDK and substrate today. There are other options, but everybody's on one of those two.
00:31:18.740 - 00:31:34.170, Speaker C: But at the same time, there are lots of things that you might want to do which are more flexible. So, for example, there's Penumbra today who's building a fantastic chain, and they use a lot of ideas from Cosmos, but they don't use the Cosmos SDK. We expect there will be chains like that forever as well. Yeah.
00:31:34.240 - 00:32:20.474, Speaker B: So, as we see it, for any kind of similar chain like Penumbra, or kind of separate chain with a separate virtual machine, you were able to be able to prove that and settle it onto a very standard virtual machine. And the benefit of having this standard virtual machine is the interoperability between all of them. And I think this is very crucial, which, if I understood correctly, you will not have. Preston so this interoperability will also mean very strong network effect inside that ecosystem. And that's why I think that this is unfortunate. Diversity is great, but unfortunately, this is a winner takes off situation.
00:32:20.592 - 00:33:16.602, Speaker D: Does remind me a little bit in hearing about the differences in your approaches to interoperability, Coleman. On one side, I think everybody sharing the same settlement layer with having the same VM begins to sound a little bit more like the original kind of l One race, where you're recruiting as many apps as possible to be under this umbrella of shared properties. Whereas I think Sovereign Labs and Preston's approach sounds a little bit more like IBC. Right. Where you retain much more sovereignty in customization of your stack, but you are kind of at the whim of who you agree to connect with via at any point. I mean, the risk is isolated right, to each individual connection. But is that a fair approach to say that maybe.
00:33:16.602 - 00:33:34.866, Speaker D: One difference is that, Preston, this is a little bit more of a bottoms up, heterogeneous ecosystem versus common. This is looking to be kind of a little bit more like a more scalable version of what's on a general purpose l One chain, except each application has its own rollout, I do think.
00:33:34.888 - 00:33:57.378, Speaker B: That heterogeneity is possible in the actual virtual machine. You will just need a thin standard virtual machine to cover it. And I think this allows the best of both worlds the seamless interoperability and the customization that you want. So I do think that you are compatible.
00:33:57.474 - 00:34:15.262, Speaker C: Yeah. Great. We love to see bottom up innovation from our perspective. Yeah, we want to be very bottom up. The one thing I would maybe correct is I probably explained this poorly earlier, but when you connect to a different chain, you don't accept any risk from that chain. Only the people who bridge their assets to that chain accept risk. Right.
00:34:15.262 - 00:34:26.642, Speaker C: So it's the same way that someone deploying a smart contract on Ethereum doesn't have any risk for Ethereum, but if you as a user send your money to the smart contract, then of course it can burn your money. Same thing with the chain here.
00:34:26.696 - 00:34:37.214, Speaker B: So in our ecosystem, even if you bridge your money to that chain, you will not face any risk because each token standard will be the same and there will be no risk.
00:34:37.262 - 00:34:40.646, Speaker C: But if you send your money to a smart contract, you can lose it. Right. Just like you can.
00:34:40.748 - 00:34:41.318, Speaker B: Oh, yeah.
00:34:41.404 - 00:34:43.826, Speaker C: So really equivalent to smart contracts.
00:34:43.858 - 00:34:44.198, Speaker B: Okay.
00:34:44.284 - 00:34:45.366, Speaker C: That's a good way to think of it.
00:34:45.388 - 00:35:12.110, Speaker A: Yeah. I guess I would just be curious for the two of you, the challenge, I would guess, like, kind of looking from the outside is getting application developers to build stuff. Right. Leveraging your SDK. Just talk to me from even like a BD standpoint. I know we're in a bear market right now, so it's kind of head down and building and shipping code kind of mode. But there's definitely like a BD component to both your businesses as well.
00:35:12.110 - 00:35:22.082, Speaker A: So I'd be curious, what's your kind of strategy for going out there and recruiting application developers? What are some of the value props and messages that resonate with them?
00:35:22.136 - 00:35:28.542, Speaker C: Sure. I'm happy to start us off here. Yeah. So we're very early. So it's pretty early to be thinking about BD too heavily.
00:35:28.606 - 00:35:28.786, Speaker D: Right.
00:35:28.808 - 00:36:13.602, Speaker C: You got to build a product that users love and then you can worry about BD a bit. But we've actually been pretty surprised by the volume of inbound communication that we've got. A lot of people are pretty desperate to have any way at all to build a ZK roll up that lets them control sort of the details of how that actually looks in practice. So we can't announce anything yet, but we've had some teams that are pretty anxious to build demo applications with us to sort of get a sense of what this will look like. And then we think the demand for block space will continue to grow as it gets cheaper. So certainly there is some work to be done recruiting existing apps to come over to more scalable architectures, but we think 90% of the demand will come from new entrants to the space who we probably can't even imagine their applications yet because blocks are just too expensive right now.
00:36:13.656 - 00:36:51.690, Speaker B: Yeah. And for us, I think there's just a huge demand for cheap transactions and cheap block space, and app developers just really want to run their own chain so that it's cheap for the users. It also serves the app monetization issue a bit, because if you're an application developer that's running their own chain, then you can also collect revenue for that. And even the code can be open source and portable, but you can still get revenue, unlike pure protocols that are on Ethereum.
00:36:51.770 - 00:37:36.910, Speaker D: And then kind of going off of the adoption standpoint, you're building tools that you hope developers will love and that are easy to use. And then once they build the applications, you need to make it as frictionless as possible for users to come over and for service providers to start servicing this pain. What are kind of your top priorities in terms of the infrastructure required for user onboarding developer tooling, things like Block Explorers? How important are these kind of details that you may not think about, but you're trying to build a mature ecosystem, right, at some point. So how do you think about prioritizing those pieces of infrastructure and the sequence that they come in?
00:37:37.060 - 00:37:51.698, Speaker B: So for us, there are already giants in this industry, so it's not really worth it to reinvent the wheel. What we are focusing on is backwards compatibility, making sure that existing tools and existing infrastructures work.
00:37:51.784 - 00:38:12.482, Speaker C: Yeah. And for us, we're starting a brand new ecosystem from scratch. So there's nothing there yet. So there's a lot a lot of work to do. So a lot of our focus is on sort of making sensible design decisions. We have the benefit of having had a lot of people come before us. So, for example, we can bake in account abstractions from day one and allow things like social recovery, wallets, and those sorts of things.
00:38:12.482 - 00:38:21.786, Speaker C: But frankly, we're still in the early stages of thinking about wallet designs and those sorts of things, and we probably won't have anything ready to announce as a spec or anything like that for quite some time.
00:38:21.888 - 00:38:42.222, Speaker A: All right, guys. Well, Miles and I think we got through a bunch of the sort of burning questions that we had for the two of you, and it's been a fascinating conversation. I guess if you want to leave listeners with a couple words about either your ecosystem or what you're trying to do or something you're particularly excited about at either one of your projects, I think that'd be a great way to bookend the conversation.
00:38:42.366 - 00:38:43.810, Speaker B: Follow us on Twitter.
00:38:48.550 - 00:39:01.194, Speaker C: Is our website short and simple? I like it. Yeah. At Sovereign, we think scaling should be really simple, and we're excited to build in an open way. We'd love to have anybody come, contribute, share your visions with us. Let's build a better future together.
00:39:01.312 - 00:39:12.350, Speaker A: Great parting words. All right, guys, this has been a ton of fun. Thank you for your time. We'll have to do another conversation like this soon. Cheers. Great episode. What did you think?
00:39:12.420 - 00:40:29.110, Speaker D: Yeah, I thought that was great. We got two projects on, I would say opposite ends of the spectrum within this family of app specific roll ups. When you hear Preston talk about what they're building at Sovereign Labs, it sounds a lot more like the Cosmos approach with the full stack app chains in terms of its primary objectives. That approach. This architecture sounds as close as possible to getting the benefits of a full stack app chain to me when I hear things like being able to batch transactions together because you own your own settlement layer versus I would. Say the other side of the spectrum with Slush and just in general, L3s S settling to a shared L2 on Ethereum, you are going to have the benefit of, I would say, users that are already on Ethereum from an onboarding standpoint. And you're going to be able to basically reuse a lot of components from these applications that are already using the same EVM.
00:40:29.110 - 00:41:02.110, Speaker D: And within that family of L three S, you'll have the seamless interoperability, but they are putting a much higher priority on security. And so it does not allow for some of the customization. It will likely have higher levels of friction to go in between different L three S or going from a full stack app chain to an L3s. So very different ends of the spectrum here, but both very valid approaches that I think are solving different things.
00:41:02.180 - 00:41:26.662, Speaker A: I think one of the challenges, recurring challenge of this season has just been when you sort of ask these guys some questions about what they're thinking about or what they're building. It's just so early, right? Like even that question, I think, that you and I were both kind of dying to get answered of what does the minimum viable stack look like? The honest truth that we'd prefer not to hear is that it's just too darn early to get to the bottom of that.
00:41:26.716 - 00:42:04.738, Speaker D: Right? We have some ideas, right. We know that they need some sort of VM on top. They need Bridging infrastructure to some extent. And we know that they need a process to sequence transactions to prove their validity. And there are just so many flavors to, I guess, put these different components together. And again, we've only seen the SDK Cosmos SDK really in action. And so it's hard to evaluate exactly which apps might be suited for which type of stack just yet.
00:42:04.904 - 00:42:34.798, Speaker A: Yeah. The other thing I think that you and I were very curious about is what does the network effects look like around those SDKs as well? I think there was a little bit of confusion with being kalman on where the network effects were accruing to the SDK or to the actual protocol sort of network itself. But I think Preston answered us there that there are significant network effects for SDKs, which is what I would have naturally kind of thought made sense.
00:42:34.884 - 00:43:17.802, Speaker D: Exactly. But I think it's a balance of really trying to have as many sort of common properties as possible between different apps that use the same stack and you're balancing that against giving those app developers as much customizability as possible. And so I think Sovereign Labs will have many different flavors of applications that are using different levels of customizability across that stack. And so that may lead to some being more interoperable than others, but it's all very early. I totally agree 100%.
00:43:17.936 - 00:44:02.730, Speaker A: And I think one concept that both Colin and Preston were kind of going back and forth on is this recurring challenge or need to balance between sort of building in a place where there's distribution, but there might be some amount of kind of tactical debt or limitations in terms of what you can build versus kind of going out on your own and building something new where you have less restrictions around what you can build and account for, but you don't necessarily have the benefit of people existing on an ecosystem. And it'll be very interesting to see founders make that trade off. And it's very hard to know, I think, at this point, who is going to ultimately be successful with that approach. I could kind of see it going either way.
00:44:02.800 - 00:45:20.500, Speaker D: Yeah, I think you and I are both not technical and maybe that's the reason that we put such a big emphasis on BD. But I think that's an underappreciated component here and how strategic you are about recruiting applications. I mean, just out front, are you building for existing applications and thus making your stack as backwards compatible with their existing applications as possible? Or are you building for applications that have not been developed yet, but you're building infrastructure that will allow these applications to be really differentiated versus what's out there at the moment because of the limitations that the existing apps have. And it does sound like, again, Software Labs is more building for the latter there for applications that have not been developed yet versus Slush is putting a much higher priority on making their SDK backwards compatible with, say, existing applications that are on Ethereum One or on StarkNet already. And so yeah, I think it's interesting to ask them about those different approaches. It's very different.
00:45:21.110 - 00:46:05.374, Speaker A: There's a saying that first time founders think about product, second time founders think about distribution. And it's kind of one of those cute little saying, but it is true. It's not to be underestimated the power of BD and distribution. I think maybe in crypto, one slight caveat or addendum to that is what you don't want is for your brand to be about BD because I think that's a signal to your community that the tech is of second priority. So what you almost want is this happy medium where your brand is to be very tech focused and developer friendly, but you to be vicious on the BD kind of low key, so that's the golden ratio of balance.
00:46:05.422 - 00:46:36.940, Speaker D: Exactly. To the extent you can get some early adopters and at least appear to have a grassroots approach and letting those early adopters sing your praises and provide that viral marketing for you, I think that's extremely effective. So I'd be very curious to talk to these guys a little bit more about how are you approaching getting a couple of pilot customers on your stack and what are the qualities that you want in those pilot customers?
00:46:38.590 - 00:47:14.854, Speaker A: I'm sure this is the case. I think it's the case everywhere, but it's very important. And I think in crypto I'm saying this as a founder who struggled this myself, but it's very important to think about Brand. And you want to be very conscious about creating something that people can root for. You want to be very conscious that you are positioning yourself in the market and sometimes positioning yourself. The thing that feels very uncomfortable is sometimes positioning feels like you are limiting yourself. And by that I'm going to focus on this one thing and I'm going to do it very well.
00:47:14.854 - 00:47:43.586, Speaker A: I'm either going to focus within this particular ecosystem or I'm going to focus on this one particular use case. And the vast majority of people react super negatively to that because they say, well, I could do all of these things, why would I limit myself? But when you're deep in it, it's hard to take the perspective of someone else who you need to know. You get like an association and you can broaden that association over time and grow it. But Brand is a we had a very technical discussion, but Brand, I think.
00:47:43.608 - 00:48:47.126, Speaker D: Is something that bears a lot I agree. And the positioning standpoint because as I would put myself in their shoes, it makes things a little bit more approachable by being having specific direction with your positioning and going after either a certain sector or going after a certain ecosystem first. But at the same time you want to really let demand kind of dictate what your positioning looks like. And sometimes you don't know where the demand is going to come from. I think we saw this on Solana, right? They were originally kind of a positioning as the nice built on blockchains and over time the demand really came from the NFT and from the gaming side. That's where they've now begun to shift their positioning. Maybe, but I agree with that point where you could limit yourself if you're wrong about where the actual demand is going to come from.
00:48:47.126 - 00:48:51.458, Speaker D: And you need to be nimble enough to pivot know meet that demand.
00:48:51.554 - 00:48:55.300, Speaker A: All right, Miles, this has been another fun interview, as always. I will see you for next week.
