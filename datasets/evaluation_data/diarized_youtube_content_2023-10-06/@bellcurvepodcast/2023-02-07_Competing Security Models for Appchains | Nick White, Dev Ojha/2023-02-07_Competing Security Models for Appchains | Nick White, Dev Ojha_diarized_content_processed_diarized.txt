00:00:00.090 - 00:00:24.270, Speaker A: Alright, everyone, welcome back to another episode of Bell Curve. Before we jump in, quick disclaimer. The views expressed by my co host today are their personal views and they do not represent the views of any organization with which the co hosts are associated with. Nothing in the episode is construed or relied upon as financial, technical, tax, legal, or other advice. You know the deal. Now let's jump into the episode.
00:00:26.730 - 00:00:46.662, Speaker B: Jimi Hendrix doesn't have to build his own guitar in order to write his own album, right? And I think I kind of want to borrow that to explain sort of what Celestia does, right? It's like if I'm an app chain builder, what I should care about is my application and I shouldn't have to worry about all the other layers of infrastructure.
00:00:46.726 - 00:00:50.070, Speaker A: All right, guys, welcome back to another episode of Bell Curve. How you doing, Miles?
00:00:50.150 - 00:00:51.610, Speaker C: Doing great, sir. How are you doing?
00:00:51.680 - 00:01:09.154, Speaker A: Doing very well. Doing bro. I'm excited for this episode. We've got Dave OHA from Osmosis, Sonny's partner, who was in our first episode of the season, and then we've also got Nick White, who's the COO at Celestia. Can you give listeners, Miles, a little bit of a sense of why we've invited these two guys on?
00:01:09.192 - 00:02:21.094, Speaker C: Yeah, absolutely. So throughout the season we've been talking about the definition of an app chain as any sort of blockchain that dedicates its space to one specific application. And we've kind of teased this out, but there are multiple flavors of blockchains or app specific blockchains, anything from a full stack app specific blockchain to an app specific roll up on Ethereum. In the middle, you have the emergence of a new architecture known as a modular stack. Right? And so there are lots of different ways to build app specific rollups on the modular stack, which Celestia is enabling. And I think today we just want to tease out some of the trade offs that builders should be thinking about when deciding between should I take on all of the effort of a full stack app specific blockchain because the benefits are worth it, versus a more lightweight approach which is building a roll up on Celestia. So, yeah, really excited to dig into it with know, I think these are two of the leading thinkers in the space as it relates to this stuff and yeah, we've got a lot to unpack with them.
00:02:21.132 - 00:02:35.002, Speaker A: We do. Certainly. It was a great episode. So guys, hope you enjoy it. Let's get right into it. All right, everyone, welcome to another episode of Bell Curve. Today I'm very excited to be joined by my co host, Miles O'Neill, and we've got Dave OHA of Osmosis, and Nick White, who's the COO at Celestia.
00:02:35.002 - 00:02:36.350, Speaker A: Fellas, welcome to the show.
00:02:36.420 - 00:02:37.278, Speaker D: Thanks for having us.
00:02:37.364 - 00:02:38.094, Speaker B: Stoked to be here.
00:02:38.132 - 00:03:08.470, Speaker A: This is going to be a really fun one. I think we're going to have a little fun diving into the weeds on this. So thus far in the series, you've sort of defined appchains as sort of app specific block space. And each of the two of you have a very different approach to kind of the architecture that supports that app space. So maybe I could just call on each of you. Listeners will probably be familiar with both your projects. And, Dave, I know your co founder Sonny was on our first episode, but can you just give a quick intro, just define yourself and your sort of approach and the project that you're working on?
00:03:08.620 - 00:03:43.646, Speaker D: I'm Dave. Hello. All working Osmosis. The idea is it's a app chain that's basically doing the functionality of a Dex. So the idea of being an app chain is we can change things about consensus or how we execute things in order to give ideal guarantees for Dex in a way that you probably can't for a generic execution engine. So we can change things to add censorship guarantees or ordering guarantees that are tailored to what Dex users may want but in conflict with other use cases.
00:03:43.758 - 00:04:13.142, Speaker B: So I'm COO of Celestia Labs, and at Celestia, we are building the first modular blockchain network. So what that means is that Celestia actually does no execution. It's just a very simple data availability layer on which other people can launch their own blockchains and they can customize the execution environment to suit their needs of whatever kind of application they're running. And you can think of Celestia as kind of like this shared security layer that anyone can plug into and consume the block space of.
00:04:13.216 - 00:05:02.458, Speaker C: And Nick, could you expand on that? I know we're trying to tease out kind of the spectrum of app chains in this season. And I think of it. On one side, you have full stack app chains, and on the other end of the spectrum, you have something like ethereum L three S that settle to a shared L two and then down to the L one. But in the middle, we have modular app chains. And I think that there are a lot of different flavors of what this could look like. I think Sovereign Labs the other day released some information on the Sovereign SDK, but I know there's lots of other projects that are building on Celestia or leveraging Celestia in some way. So, yeah, would you mind just kind of unpacking the different flavors of app chains that can be built using Celestia?
00:05:02.554 - 00:05:37.480, Speaker B: Absolutely. So I would say on Celestia, you can build an app chain as a roll up. So essentially, as opposed to the Cosmos model, where you have to bootstrap a new consensus network, you have to get a bunch of validators and issue a proof of stake token to secure the network. On Celestia, you get a consensus network from day one for free. And so it really lowers the overhead of launching a new app chain. But you still have the full ability to customize your execution environment. Your fees and all that kind of stuff.
00:05:37.480 - 00:06:23.682, Speaker B: And then actually, on the other side of the spectrum that you mentioned, that the L three S on Ethereum actually can build the same type of architecture on Celestia as well. So there are actually teams building sort of like layer two settlement layers and on which people will launch L three S that settle into those roll ups on top of Celestia. So we can actually support that full spectrum. What you cannot get, and I think Dave can expand on this, is that Celestia is doing the consensus for you. So you're not actually controlling at that layer of the we can we can talk about this. I think that the most important things you can control as far as the appchain stack is concerned with a modular.
00:06:23.746 - 00:06:43.542, Speaker C: App chain model that's super helpful. And I think that leads into my next question to Dave know, why did you choose the security approach that you did or maybe have a better set? Why did you choose the full stack approach? And what does that kind of unlock for you at the application layer?
00:06:43.606 - 00:07:24.570, Speaker D: Yeah, maybe hit on this breakdown a little bit more first. So you can imagine the traditional first set of roll ups were basically outsourced data availability and finality to ETH L one. But otherwise execution is all this other thing. And you have guaranteed ETH L One inclusion or a sensor persistence, but otherwise ordering properties are basically on this L two. So part of the claim or a strong part of Osmosis is that, no, we actually want more. There's much more important things we need. So, like, a deck should have fast finality.
00:07:24.570 - 00:08:11.578, Speaker D: The ETH finality is already too slow. We want consensus changes or we want to be able to require stuff from consensus to get both stronger med resistance and censorship resistance guarantees than we think we could get in ETH. Similar for user level privacy. So these force us to not just imagine ourselves as to not rely on ETH for finality or for data availability. You can in principle still post to ETH someone wanted these, but that would not be the canonical root of trust. It has to be its own chain to get these guarantees or it's our claims it had to be its own chain to do so. I can expand on why.
00:08:11.578 - 00:09:15.578, Speaker D: So for censorship, censorship resistance, we want to add this thing called Threshold encryption, where the idea is that we have this validator set. We trust, we want all data to be basically all transactions should be encrypted it's such that no individual can read them prior to them being finalized. And then we want to basically delegate this committee that upon it being finalized, decrypt, post the execution or post the decrypted contents and execute. So you have this problem, though. Who do you make this committee and how do they have this tight guarantee around finalization? But this is actually kind of elegantly done when if you're in a proof of stake tenderman environment of like in proof of stake saying this committee is your finality engine like Tenant, they're running consensus to get finality on stuff. So one, you get fast finality, which is really important. The set ensures fast finality and we can ensure that whenever something is final, it must be decryptable.
00:09:15.578 - 00:09:33.106, Speaker D: So by having the same set be in charge of basically both finalization and decryption, these can be like very you can get very tight guarantees for users on this. So this is why it's really important that it's running its own consensus that.
00:09:33.128 - 00:10:35.942, Speaker C: It'S quite finalized, it makes a lot of sense. And I think last week we touched on this with Sam, and I think one of the biggest, most compelling reasons to go with the full stack approach is really from a Dex perspective. It's around performance and finality, but it's also around enabling some of these really interesting privacy capabilities that we'll see from Osmosis, Anoma Penumbra and a few other Cosmos chains. So I guess I would turn it over to Nick. We've talked a lot about what the role of these validators app specific validators can do. How do you compare, I guess, the role of sequencers for the roll ups on Celestia to the role of validators on a full stack app chain? Can they exert the same level of control or opinionation over things like transaction ordering, custom fees or even mev capture? Right, I'd be curious to hear how you would react to that.
00:10:35.996 - 00:10:44.986, Speaker A: And I'm just going to raise my hand. Nick, before you answer that, could you just define for the audience as well what a sequencer is like, what is the sort of makeup and then go into answering Miles's question?
00:10:45.088 - 00:11:54.498, Speaker B: Sure. So in a modular blockchain world, even though consensus is handled at the l one layer like, let's say, Celestial or Ethereum providing the data availability, you also have to have a node or a set of nodes that are running the roll up execution and that are ordering the roll up transactions and then posting them in a batch to Celestia. So the sequencer is sort of like the node that is running the roll up network, if you will. So the sequencers in a modular context do have control over ordering. So they do have an ability to sort of extract mev and they also kind of have an ability, if you want to attest to the validity of the block that they post. And that can actually give you a measure of finality if you need it. And what's really interesting, so it won't be the same level of security of finality as once it's posted to Ethereum, but it can give you at least a level that is useful because finality to me is not like binary, it's not zero or one.
00:11:54.498 - 00:12:38.334, Speaker B: It's kind of like the amount finality is more defined by the economic sort of security that is guaranteeing that that transaction won't be reverted. So you can actually get that at the sequencer layer as well. So I don't think necessarily you have to run your own L One if you want fast finality because there's mechanisms that you can get that even as an L two. The interesting thing is that the whole landscape of sequencers is kind of still evolving. I think it's actually probably the most important layer in the modular stack after the data availability layer. And there's been a lot of discussions recently about how to build a shared sequencer network. And this shared sequencer network can do a lot of things.
00:12:38.334 - 00:13:37.182, Speaker B: It can ensure more censorship resistance and it can ensure liveness of many roll ups. And many roll ups can actually sort of use the same set of sequencers. And you can also bake in things like threshold encryption or like fast Finale and attestation at that layer or even we've discussed internally about maybe in the future, does it make sense for Celestia itself to have threshold encryption? The thing is that that doesn't quite make sense because unless the users themselves, the users are actually using the rollup, they would need to encrypt their transactions and send them directly to Celestia. So it probably makes more sense for it to exist at the shared sequencer layer. But anyway, long story short is sequencers are a really, really big part of this whole stack and I see them as still very much kind of in R and D, but it's probably the most exciting space within the modular stack.
00:13:37.246 - 00:14:38.642, Speaker C: Yeah, no, I could not agree more. And I think maybe one other question on that same path of the sequencers comparing sequencers to validators I think Dave Superfluid staking is a capability of Osmosis that maybe is a good example to use here, where the consensus layer can understand the application layer, right? Assets that are locked on the application layer in LP pools can be staked based off of different parameters approved by governance. Do you think? A question to throw it to either of you. How important is it for your sequencer set or your validator set? To be really application specific and optimized to understand the semantics of the application versus taking a shared sequencer or shared validator set approach like interchange security provided by the Hub or what we're talking about here with shared sequencers, with roll ups or roll apps?
00:14:38.786 - 00:15:34.546, Speaker D: So I think something that's actually really exciting, that's been happening over the last two, three years is actually really trying to answer this or understand this question. And I think to understanding you have to kind of dive into what are we getting security for? Which is also I think, relates to how you make a modular architecture. So for so finality is I guess two big ones are like finality and state execution validity. If we're imagining we're living in a world of async different environments want to talk to each other but then they just want to trust some committee and then trust some committee that state or computation was done correctly. This is like kind of one paradigm. This is somewhat like this is how IBC works today. This is how kind of optimistic roll ups.
00:15:34.546 - 00:16:19.830, Speaker D: This is the regime they're in. The second one is you have things that are verifiable, there are zk'd. So you actually don't need to trust the computation was done correctly up to bugs, but not the biggest. So what you need out of stakes fusion validity differs between these. So in this IBC context, having high confidence that people are just going to trust the state route you give them, so there then you need to think a lot about how we're going to ensure the state route is valid. And if the state route was invalid, then arbitrary bad things happen. All value on this chain can be stolen.
00:16:19.830 - 00:17:07.822, Speaker D: But this does in some ways, in some sense go down or this risk goes away with enough cryptography work. Other parts of this risk is finality of like what's the chance we want to commit to one thing? Or there's two parts. One is the happy path of like or not happy path. Like kind of the regular one. This blockchain is chugging along and then at what point can you trust that block B is not going to be changed for another block? So nice about tendermint is like we claim that it's like one block in the happy path that when you see block B plus one, you know that D is finalized in Ethereum. It's two epochs, different proofsakens, different things. Proof work has probabilistic.
00:17:07.822 - 00:17:47.010, Speaker D: But there's a second path, this, which is actually, I think, often missed when people talk about modular architectures, which is like fork choice rule, where suppose there is a fork, how do you know which fork to choose? And something that's like a problem with outsourced data availability on its own is that data availability but not like your finality is that if a DA layer Censors, then the DA layer can pick your fork choice rule, not just your happy path finalization committee.
00:17:48.630 - 00:17:50.194, Speaker C: Interesting. Sorry.
00:17:50.232 - 00:17:53.106, Speaker D: Actually, I think I strayed from their initial question though.
00:17:53.208 - 00:18:43.330, Speaker C: No, not at all. Not at all. It's getting a little bit away from the application side. But no, it's extremely important, I think. Maybe another question just to unpack some of these details. Is it's pretty clear how a full stack l one is secured right, or a full stack app chain is secured? It's with the native staking token of the application and nick for some of the roll ups on Celestia, what are the different ways that these sequencer sets are securing themselves? Do these sequencer sets need the post collateral from something like Eigen layer? Will they have their own native, I guess, gas tokens or there are a lot of different flavors that you can explore here.
00:18:43.400 - 00:19:14.174, Speaker B: Good question. Well, I think it's tricky because security can mean different things, right? So it's kind of like what Dave said. There's security in the sense of finality, which is like consensus. A block is not going to be reverted. There's also security in the sense of the validity of the execution. And so in a modular stack, the finality is insured by the consensus of the data availability layer, like celestial or ethereum. But then the validity is insured by data availability, sampling and the proof system of the roll up.
00:19:14.174 - 00:20:24.894, Speaker B: So either optimistic proofs, like fraud proofs or ZK proofs, and actually the shared sequencers don't really have a role as far as security is concerned in either of those contexts. All that they do is they provide censorship, resistance and liveness and ordering basically for the roll up. So they don't necessarily have to play a role in security. Although in some models the sequencer also will be maybe the proof generator or maybe the person sort of like watching either generating the ZK proof or generating the fraud proof. But there's also models in which the sequencers are totally dumb and they actually don't know anything about the execution of the roll up and they're just more they take in transactions, they order them and they post them on Celestia. So it really depends on the model of which that you're choosing. And so that's why it's really interesting that it's still kind of to be determined, like how much should these sequencers, these shared sequencers, know about the execution of the roll ups that they're ordering? I think in practice they might end up knowing quite a bit just because of mev.
00:20:24.894 - 00:21:08.438, Speaker B: Or maybe there's some sort of other model where the block builders kind of bid to have their blocks posted by the shared sequencer. So there's still a lot of different things. But back to your question of like, do they have a token? Most shared sequencer networks I would imagine, will have a token because they need to have some sort of like leader selection of who has the right to post the next block for each of the roll ups that they're ordering. And so there will be some kind of mechanism, and I think there will be a token to facilitate that and probably also some sort of like fee mechanisms for people to basically pay for the service that the shared sequencer network is performing.
00:21:08.554 - 00:22:16.898, Speaker D: One of your earlier points of like so I think it's up to the app for what are extra security properties it wants. So for instance, in sensory persistence, it's a question of is this a security guarantee or not? And then what do you need for it to happen? If I have a goal of high sensory resistance, does that mean that I should be able to let how many alternate DA channels do I need my blocks to be forced to get input data from? I guess in ordering, I guess you have a split of like you can have sequencers be forced to provide proofs that here's the list of things I thought about. Or you can attempt to have different types of ordering guarantees like randomized ordering, or attempt to get provable FIFA ordering at the mempool layer. Aaron, I think this is underexplored, though I do wonder how much depends on DA layer choice or number of DA layers.
00:22:16.994 - 00:23:22.590, Speaker C: Yeah. And I think one thing that maybe just to touch on something Nick said was around, we'll see a spectrum of sequencers and some of them will really actually understand what's happening at the execution environment. And some of them will just be more of a sequencer set as a service and shared between a lot of roll ups, I guess. How do you think about the trade offs of that, right, from the perspective of an app builder? Because when I hear that, I think about Osmosis and just how opinionated Osmosis can be about things like transaction ordering, mev protection, even things like social slashing, right. I'm wondering, is the trade off really around the interoperability of these L three S when they share a sequencer set versus the amount of opinionation that they can have at the sequencer level? Or maybe, Nick, it's better said who really controls the parameters of the sequencer set for these role apps to let them do things that are opinionated or maybe not?
00:23:22.660 - 00:24:29.854, Speaker B: That's a really good question. I think that obviously the sequencer, if there is a shared sequencer network, it is providing a service to the roll ups. Right? So the roll ups are its customer. So there can either be like an adversarial relationship where they try to extract mev or do things that maybe are not actually incentive aligned with the customer, or they might be trying to actually align incentives. So I think of models like Skip, which is building mev tendermint and kind of rolling it out across the cosmos ecosystem as a way for tendermint validators to extract mev, but not necessarily for themselves, but to redirect it to the stakers and the token holders or however the community wants. And I think I foresee shared sequencer networks emerging that have similar kinds of mechanisms where you as the roll up, kind of can configure these parameters. And then if it turns out and by the way, I imagine it's going to be a competitive landscape, right? There's not just going to be one sequencer network, but probably multiple.
00:24:29.854 - 00:25:05.550, Speaker B: And if one it mistreats you or ends up not really upholding its side of the bargain or just doesn't offer this kind of functionality, you can always go elsewhere. And then there's always the other option, which is you don't have to use this at all and you can run your own set of sequencers or single sequencer. There's so many options and at the end of the day, I think the roll ups themselves will get to choose what is best for them. There is no lock in. There's no capture in this model. And that's also what I love about modular blockchains. There's just so much freedom to move to whatever works best for you.
00:25:05.550 - 00:25:10.320, Speaker B: You're not sort of stuck in any one model.
00:25:11.730 - 00:25:49.420, Speaker D: What I see happening, I think there's not really anything special to sequencer layer in this DA land. Not DA or outsourced DA. Not outsourced DA. I think what I see happening is what do the apps or chains want? And I think what they should be doing is here's properties we want to enforce. How do I make it provable that these were enforced? Either how do I make it provable that these were enforced? Or make it such that users will not suffer from this. So you have a space of options like suppose I say sandwiching is bad. I could imagine that.
00:25:49.420 - 00:26:18.390, Speaker D: What's in my options? Space. Okay, well, you can batch execute stuff. You can say that no one can know the data content, so they can't be front ran or sandwiched. You could also say that, okay, here is this algorithm that says that is a sandwich detector. If your block proposal satisfies this algorithm, it's an invalid proposal. Go to the next proposal. So we have this space of things.
00:26:18.390 - 00:27:00.334, Speaker D: I think the third one is what's I think most underexplored sandwiches. I contend this is doable, but sure there's some time complexity to it, but there's many things in this. Like how would you ideally opine about block space? We don't have to go towards fully just trust sequencer. No sequencers can do proofs. They can snark that here is a list or that this block proposal has validity criteria. Or here's a list of things. If you're fine with SGX, you can have some guarantees around what things you receive in the mempool and then some property is upheld.
00:27:00.382 - 00:28:03.154, Speaker A: Hey guys, I've got one maybe question on the slightly less technical side, but from the perspective of a potential app builder out there, like a founder, something that I've sort of found it helpful or an underappreciated aspect of success, especially in the early days, is the ability to focus. So, Dave, I've kind of heard you say some of the advantages of being able to control have your validators understand the semantics of your app, but also in doing so, in having a full stack approach, there are so many different layers that you, as a founder, your brain is going to need to worry about and contend with. Right. Whereas I see sort of the advantage of a modular approach. Like know, there's a lot of stuff that, yeah, maybe I don't have the same degree of control, but I also don't have to worry about that. So I'd love maybe the two of you if you almost want to make like a pitch, right. If you were talking to Dave, another founder, or know a potential founder that was going to build on, like how would you sort of tease out the pros and cons of each approach purely from kind of an appchain builder psychology.
00:28:03.282 - 00:28:51.590, Speaker B: I'll go first. I think you bring up a really good point and that's why Celestia's mission is to make it as easy to build your own blockchain as it is to build your own smart contract. Because if you think about what made Ethereum so successful and know we have applications like DeFi and NFTs and all these things, is that Ethereum made it extremely easy to build your own decentralized application so everyone could experiment, right? They didn't have to before with Bitcoin and sort of the Bitcoin era, you had to actually build your own blockchain from scratch every time you wanted to try a new app, essentially. So Ethereum kind of unlocked all this innovation and Celestia aims to do the same thing, but actually a layer lower, where you're not just building a smart contract, but your own blockchain is more scalable and you can actually change the execution and all that.
00:28:51.740 - 00:29:14.490, Speaker D: How is Lester doing that where if I was fine with something just being single so if I'm saying I'm building your own blockchain, what do you mean? How does a blockchain, I guess, differ than someone what's the decentralization need of finance are we calling a single sequence of roll up a blockchain?
00:29:14.570 - 00:29:50.550, Speaker B: So Celestia's broader mission is to do that. I'm not saying that Celestia protocol itself achieves that on its own. It's the full modular stack, essentially. So Celestia provides a data availability and consensus, but there's other missing layers. For example, I think a shared sequencer network that you can plug into and just basically say, hey, I need you to do the sequencing for my rollup. And also all these execution environments that actually are fraud provable or validity provable. So there's a full stack of things, but once we have this full stack built out, I think that you'll be able to deploy a roll up which is just a blockchain.
00:29:50.550 - 00:30:15.194, Speaker B: It's like a virtual blockchain. As easy as a smart contract. That is, you will basically define the execution environment that you want to run and press. Hopefully it's as easy as like clicking a button, essentially, and you get all the properties of validity, finality censorship, resistance and all of that kind of out of the box. That's the end vision of the modular blockchain worldview.
00:30:15.322 - 00:30:41.270, Speaker A: One thing that just purely a matter of curiosity, Dave. I'd almost love to hear sort of the early days of what it was like to recruit a network of Validators. Like everyone kind of understands that that's a difficult thing to do and that's sort of one of the main obstacles to building your own full stack app chain. How did you in the early days kind of get your name out there and how did you get people to take that first shot and believe in Osmosis?
00:30:41.350 - 00:32:03.378, Speaker D: Sure. I do want to point that I think there's a little bit of. A modern Bailey in this comparison of like this validator accrual for finality is if you're trying to make an Apple Celsius comparison of build your own blockchain via stack A or stack B, stack B being like outsourced DA to Celestia, then the validator accrual problem still exists. If you want to not outsource if you don't want to outsource finality, if you wanted outsource finality, then you're a single sequencer roll up and then the comparison point should really be like Ethereum or what is this roll up versus what is the consensus and finality demands you want? But I guess now to then like, okay, suppose we're trying to make the comparison with non outsourced finality of like I want to control finality myself then yeah. So to get validators, I think what's nice of having a common stack we have a common stack in Cosmos of people who build their chain via tendermint. In the Cosmos DK have very common tooling. So there's very little training overhead to get people.
00:32:03.378 - 00:33:38.500, Speaker D: It's mostly like a willingness overhead. So for Osmosis, this actually wasn't a big problem at this time. There's actually several hundred plus validators who are very eager to just validate on networks and I guess at the time just asked people who are interested in securing this and there was more than enough people who participated in the AirDrop who were just willing to sign the Genesis transactions to join. So it's actually not an issue. This is not the case for, I think most app chains at Start because there they have some vying for attention in that sense. For most new app chains, I guess they have to kind of make a pitch for why should people want to validate this? I think a missing thing which this initial shared security stuff, a lot of the shared security and mesh security stuff is working towards is basically it builds towards the end some permissionless way to get this initial set. If these are just consensus and DA operators or finale and DA operators and they don't want to look too much at your execution layer, it just runs from docker containers, then such a product can then it's like your blockchain just does a governance proposal, say, as a set? Or is there some subset of you who is willing to take these tokens and then run this validator service?
00:33:39.110 - 00:34:23.290, Speaker C: Yeah, I think that's a great segue into what I wanted to ask you about anyways, which is kind of how we see these Cosmos security models evolving. And specifically, I think I would love to if you could share a little bit more about what mesh security is, how it is different from some of the top down security provision models like the Hubs ICS or Ethereum roll ups. And I would like yeah, if you could kind of dig into what it means to be a bottoms up approach here. Is it similar to Eigen layer restaking? Just kind of how you see this evolving?
00:34:23.450 - 00:35:13.370, Speaker D: Yeah, I think it is pretty similar. I think it's like exploring the same question of what do we actually care about when we measure economic security? And so in proof of stake chains to date, most of it is like, okay, we stake some high percentage of our token, so it's hard to buy up more of the token. Therefore it's like because it's hard to buy up the token, there's no one who's going to accrue two thirds and perform an attack. But there's a number of issues with this. One is like there's a circular value problem of like, we're trying to measure economic value, but some of this economic value is coming from it's securing this chain. Sorry, let me back up. If you commit a fraudulent act, then the claim for why you don't do this is twofold.
00:35:13.370 - 00:36:01.790, Speaker D: One is you're going to drive the Staking token to be worthless, so that's a huge loss. And two, you're directly slashed. So there's like funds burned, so you get downside from these two things. But this is a very circular argument. So something that's like basically these mesh screenings and Eigen layer restaking like question is like, okay, well, why can't I have other tokens do this? Let's have Adam or ETH as collateral. These have other economic factors so they have higher worth tokens in the early days. Where does value come from? This is not the same question you have for an Atom, ETH, Osmo or Bitcoin.
00:36:01.790 - 00:37:13.590, Speaker D: These assets have value because of some other number of reasons, actual integrations. People care for whatever reason, people care about stuff, but it's not because of your chain directly. So then if there is a fraudulent act committed, these tokens can be burned so they are contributing to economic security. So the idea of then mesh security is saying that, well, there's chain A or I don't know, let's call it new chain. Yeah, okay, new chain A and it has some token foo for being secure, saying, I'm also willing to reason about the worth of Bitcoin and Ethereum or Osmo. Then they'll let people stake these assets, let people stake these assets for Bitcoin, Ethereum, Osmo to help secure chain eight. But now something's interesting is, well, people might not want to just have their Osmo only getting chain eight rewards.
00:37:13.590 - 00:37:43.338, Speaker D: They can want their Osmo to actually have multiple usage, namely securing Osmosis and securing chain eight. And potentially another one is like if protocols are willing to take in this risk, also be in a lending market, like accrue some lending interest rate and then be securing the network with the claim that this securing the network with unlent out Osmo.
00:37:43.434 - 00:38:28.350, Speaker A: I've got a question for all you guys on this, actually, which is, and this is something that I've sort of mentally thought about listening to because Eigen layer is an extremely attractive value proposition, right? This idea of sort of restaking and lending out the security model of ETH to different chains. The question that I always have is what would Cascading liquidation sort of look like in a scenario like that? Because I think interoperability becomes something that's worthwhile to discuss. And even like in a Cosmos sort of land where you have IBC that's still light clients, and at least my understanding is the least technical person on this recording is that there are still some limitations when it comes to IBC and just running a light client. So my question to you guys is, is that a concern at all? Am I being too Debbie Downer about?
00:38:28.500 - 00:39:16.814, Speaker D: No, no, it's huge. You do need to consider the contagion risk. So here's maybe another case that's maybe simpler and interesting. I'm chain A and I have a bunch of, I don't know, coin B securing my chain today, let's say like 80% of the worth is in my own coin A, and then like 20% of the worth is in coin B. Suppose coin b ten x's. Well, now, who used to be a minority coin B holder on chain A is a controlling set and can screw over my chain. So there is this problem of too much external dependency because then people who had a small amount before and are already here have controlling majorities to do a tax.
00:39:16.814 - 00:40:11.758, Speaker D: So you don't even think about what's a total amount of risk you've outsourced out. Once you add in lending markets. This also becomes concerning, though there what I think is concerning more is like contract risk or lending market insolvency, where the biggest advantage of DeFi is that our lending markets are unlike FTX at all. Have some algorithmic solvency on chain, except it's actually edge cases are important details when they don't. But in general, your protocol should, in this metro security landscape, have this reasoning of what is this risk factor and how many independent sources of value? So suppose there's ten other chains that are highly correlated. I should say that the sum of these chains cannot be more than like, 33% of my security.
00:40:11.924 - 00:40:17.060, Speaker C: Got it. And that could be tendermint security or governance power. Right?
00:40:18.790 - 00:40:34.440, Speaker D: It's like unclear why you'd want to outsource. Yeah, I guess ultimate security stuff is also important to note that we're separating the roles of consensus, stake and governance of like it's a question of you may never want to outsource any governance and just consensus like security or tenant finality security.
00:40:35.050 - 00:41:12.882, Speaker C: No, I think that makes sense. And I think another trend that's being talked about, or potentially a future trend for Cosmos chains in evolving these security models is potentially outsourcing or unbundling parts of what they do today to, say, a DA provider like Celestia or a combination of Celestia and another interesting project called Babylon. So, yeah, point to you, Nick. Have you been in discussions with a lot of Cosmos chains about potentially unbundling part of their stack and outsourcing it to Celestia? Or is it more on the ethereum roll up side.
00:41:12.936 - 00:42:09.782, Speaker B: Yeah, actually, I would say a bit of both. We were actually building this sequencer software that is ABCI compatible. So it means it's compatible with any application or state machine that sort of like, conforms to the Cosmos SDK interface. And so what that enables people to do is to run a Cosmos SDK application on top of Celestia. And so there's actually been a lot more interest in that than I expected. And I think it's because the value prop is actually very strong. It's like, oh, well, before I want to actually expand on this point about the overhead of launching your own blockchain right? And I actually saw on Twitter there was a great analogy by this guy talking about Cosmology, which is actually just unrelated to shared security, but it's actually this toolkit that helps you sort of build the front end and interface for a Cosmos SDK app.
00:42:09.782 - 00:42:52.478, Speaker B: And he said that asking what Cosmology does is basically it makes it so that Jimi Hendrix doesn't have to build his own guitar in order to write his own album. Right. And I think I kind of want to borrow that to explain sort of what Celestia does. Right. It's like, if I'm an app chain builder, what I should care about is my application, and I shouldn't have to worry about all the other layers of infrastructure and all the other overhead of getting a set of validators, issuing my own proof of stake token. And then it doesn't just stop there. It's also that you have to continuously maintain that network and pay security budget that compensates all those validators.
00:42:52.478 - 00:43:29.450, Speaker B: So what's so nice about Celestia is that you don't have to do any of those things, and you don't have maintenance and an ongoing security budget. You just pay transaction fees. So the overall cost to run your blockchain is diminished significantly. So it also makes your application more profitable if you think mesh security and also ICS are a very good way to sort of bring that cost down. But I think they add well. In ICS's case, I think it's not quite as cost effective. It's also not permissionless.
00:43:29.450 - 00:44:14.206, Speaker B: We want it to be permissionless as well for people to deploy their own blockchain. Right. And then with mesh security, I think there's just a lot of complexity. And while it is, again an improvement over not having mesh security, I also have a lot of concerns about the security of a model like that, both because of the contagion stuff, but actually more from a fundamental perspective, which we can get into on another time. But essentially it's very hard to slash assets that are not native to your chain if they misbehave. And it's very hard to prove that validators are misbehaving in a smart contract on another chain. There's just like, limitations to that unless you have data availability or some kind of proof system.
00:44:14.206 - 00:44:40.050, Speaker B: So you kind of end up in order, in my opinion, to make mesh security fully secure, you kind of fall back to a modular blockchain model. But anyway, yeah, at the high level Celestia wants to make it so that if you're Jimi Hendrix, you don't have to worry about the guitar is just in your hands for free and you can write your own album and just jam and not have to start from the very beginning and build the guitar from scratch.
00:44:40.130 - 00:44:49.080, Speaker C: Right. And I think that's part of the value prop you can iterate and find PMF with the minimum viable amount of cost.
00:44:50.890 - 00:45:35.618, Speaker D: Half the benefit you described though was like single sequencer was decentralized sequencer, it had nothing to do with data availability. No one who writes a Cosmos chain is actually aware of data availability because tendermint is your DA proof. It's a DA proof amongst validator set. The comparison for making it easier to launch a chain is in the proposal you're making is this like, okay, you can go make single sequencer blockchains or single sequencer. What does that mean? Like single validator things? If you're trying to have decentralized validators then you need still have this multivalator coordination in basically the same way you need finality, et cetera.
00:45:35.714 - 00:45:38.458, Speaker B: I don't really follow that point.
00:45:38.544 - 00:45:52.010, Speaker D: Okay. The claim is that it's easier to make a chain because you don't have to have this maintenance of staking awards or coordinating many validators for upgrades. Right.
00:45:52.080 - 00:46:48.942, Speaker A: Just in the interest of time, there's an important concept that I think both you two are sort of dancing around that Miles and I really sort of want answered, and maybe there's a good time to get into it, but I think both of us have sort of been wondering. And actually, Zachie brought this up on the last episode that we aired, which is sort of this concept of the minimum viable stack. Right. Like what is the sort of minimum viable stack needed to, I think, eventually over know? The vast majority of sort of successful founders in crypto today are technical founders for obvious reasons, I think over a span of time. What we're trying to do here is build a stack so that you can abstract away some of the more technical components and thus increase the surface area for less technical founders to come. So I think Miles and I are both kind of trying to teach out what does that minimum viable stack sort of look like? What are the important sort of layers that need to get built so that we can achieve that end?
00:46:48.996 - 00:47:44.260, Speaker D: So one thing that's I think a huge achievement of the call to stack today is its big achievement in my imo is it's abstracted out consensus from you entirely that now all you think about. Second of all, consensus and like bridges. So all you have to think about is how do I want my application to exist? But now Bridging and how you do consensus is solved. But there's more parts to how to build an application that are limited right now and also more security properties that are limited that you still are forced to think of. I think we're going to see in the future a lot more abstraction around mev components. Things that are just like import a library to have this set of mev resistance tools rather than just having to write about it or even think about imagine there's a common stack for mev or data inclusion. Then you don't think about as much.
00:47:46.870 - 00:48:26.474, Speaker C: I think you make a good point. The Cosmos SDK is really one of these stacks that's kind of reached exit velocity, right? It's the only app chain stack that's really in action here. I don't know if could point this to either of you, but I think it's important to talk about the network effects around sharing the same SDK or sharing the same stack. And I guess how would you think about what's been the most important part of the SDK success and how that might lead us to think about what the next competitor to the Cosmos stack could look like in terms of app chain specific stacks?
00:48:26.602 - 00:49:08.810, Speaker B: Dave is probably more qualified to speak to the Cosmos SDK thing, but at least so one of the interesting things is that Celestia is very Cosmos aligned. And in fact, Celestia as a DA layer was built using Tendermint and the Cosmos SDK. And we've made a lot of modifications because it's kind of like a very unique thing that hasn't existed before. But one of the benefits that we've seen in the network effects around the Cosmos SDK and Tendermint are things like Dave already mentioned, IBC. We get interoperability with all these other blockchains out of the box, basically for free. We get all these wallets, we get explorers, we get all this infrastructure that is just compatible by default. And that's a huge weight off of the shoulders of someone building a new blockchain.
00:49:08.810 - 00:50:05.546, Speaker B: Because I actually went through this before Celestia, I built this protocol called Harmony, and we had to kind of do a lot of that from scratch. And so I know the pains. So anyway, I think that the Cosmos SDK is definitely the farthest along from that, like, build your own blockchain perspective. But I think that the cat is out of the bag and there's a lot of teams all trying to think about what could the next iteration of this be, especially within a more modular context. I think a lot of the abstractions that Cosmos SDK makes can actually and even the IBC can actually be sort of like translated into a modular sort of paradigm. And there are teams doing that, but there's also things like Sovereign, which you mentioned earlier, which are building a whole new version of it, but like a ZK version of the Cosmos stack. And I think there's going to be a lot of experimentation and innovation, at least from the modular perspective.
00:50:05.546 - 00:50:08.110, Speaker B: But Dave probably has a lot more to say.
00:50:08.180 - 00:50:27.510, Speaker D: Yeah, very much agreed. Where I think there's a number of axes. You can massively improve on Calcutta case today. One big one. Like like just make everything you want to do today already. Just like thousands of lines easier. But there's more infrastructure you could want just made for you, like state machine validity.
00:50:27.510 - 00:51:22.050, Speaker D: The thing to do is get CK proofs. I think what's going to happen or what should happen is and something substrate got right is you get all of your state machine code compiled to some VM and then you have snark proofs of this VM. So this is a research task in snarkland going on of how do we keep getting ten hundred thousand x's of speed, dust and snarks? But I don't know. I feel very convinced it's going to happen. From spending time in how we construct these things, then we'll eventually be at this point of like, you can snark prove very efficiently some common thing like risk five each zero is doing it, some mild isa addendums. And so then that's something you can have this prove or get out of the box for you. Other things are privacy.
00:51:22.050 - 00:52:50.482, Speaker D: There is to date basically no good privacy toolkit for the front end. For front ends where you want your stack to just have privacy by default and have this JS libraries that let people shielded you their balance and not have to think about this or just create the ZKP transaction censorship resistance. There's a suite of things it should just be like just come by default of like we can inherit censorship resistance from our peers along the network that we talk to. Peers meaning like, other chains you connect to rather than having to think about it yourself. So I imagine future stacks will keep doing will basically make devux with building the apps people want to build today already much easier here come with more and more infra or security properties just like guarantees that you don't have to think about and oh I guess maybe there's axes of iteration that the cosmos decay doesn't let you do easily. It's hard to change out the sense algorithm out of tendermint not really because of like there's an interface boundary which is good. It's just like no one's actually maintaining a second thing by the interface or fee markets right some things appchain should be doing the most of is playing around with fees, fee markets, how we express what goes into a block and how we charge for it.
00:52:50.482 - 00:53:07.858, Speaker D: Whereas actually today the two biggest experiments in the last two years weren't in cosmos, they were in EIP one five nine and ethereum and salana and they're basically pretty actually extremely interesting method of charging gas for repeated contract use in the same block.
00:53:07.954 - 00:53:54.840, Speaker C: No I think that all makes a lot of sense and I think I think about the stack I think of shared consensus layer, either just using the same consensus model, like Tendermint, or actually having the shared security set. I think about shared interoperability standards, and then I think about potentially shared VMs or the application environment. Right. And do you think the next, I guess, minimum viable stack for app chains, will it share the same interoperability standards like IBC with the existing app chain stacks? Or do you think we could see a lot more of these interoperability standards come up over the next few years?
00:53:56.490 - 00:55:00.410, Speaker D: Okay, so I think at the transport layer, I think IBC is basically what you want, except needs one more feature. Basically this additional feature you need, which you still can do right now, but it's not standardized, is amend a ZKP for what you verify. So today IBC is just litecoin guarantees. But if chain A can do a $0 proof like Mina does, or, hey, look, I computed this block correctly, then you can verify this over IBC to get this guarantee. So something I think is extremely exciting is like all these ZK rollups for the EVM, sorry, ZK EVM projects are basically doing this, where all new EVMs, ideally, or all EVM bridges in a year from now, should really use these things. That way we get this guarantee, we should measure it into IPC then. I do think there's still room for, I think cross chain synchrony guarantees have barely even started being explored.
00:55:00.410 - 00:55:13.678, Speaker D: For token transfers, we do the simplest thing of, like, okay, this atomic burn. But how we would imagine decentralized applications talking from one chain to another is barely even started.
00:55:13.764 - 00:56:00.730, Speaker A: I've got one sort of question here I want to actually close talking about mev, because that's what our next episode is going to focus on. And Dave, I've heard a little birdie told me that you have some pretty strong perspectives on mev. But I've got a question for Nick before we get there, which know, Nick, you just mentioned Celestia being sort of aligned with Cosmos. And again, just on the theme of trying to really put myself in the shoes of if I was going to launch an app chain tomorrow, I'd love to get your thoughts on sort of the BD and distribution impact of deciding to align with different ecosystems. So I was listening to again, not to keep referencing. I was listening to an interview Sriwam did on, I think, Xerox Research, one of our other podcasts, the other day, and he sort of mentioned one of the advantages of eigen layers. You're sort of plugging into the ETH ecosystem.
00:56:00.730 - 00:56:41.386, Speaker A: And there's a lot of distribution that sort of goes along with that. And there are a couple of different approaches, which is to sort of align yourself with a specific ecosystem, like the Cosmos ecosystem. But then you're also seeing these sort of flexible, sort of modular execution layers that could kind of plug and play with, like, celestial kind of any different kind of settle back to any L one. And I'd be curious outside of we've focused a lot on sort of the technical components of that, but what's the sort of distribution and business development impacts of aligning with Cosmos or Ethereum or positioning yourself as kind of a neutral execution layer that could plug into either one?
00:56:41.488 - 00:57:39.210, Speaker B: That's a great question, Michael. I just want to mention on the previous point really quick, two things I think are really interesting in terms of improving the Cosmos stack or the build your own blockchain stack. One is there's kind of a I think I would say open question of I think it could be a better interface than ABCI and people are actually kind of working on it and envisioning what is a better kind of abstraction between sort of like the sequencer layer, consensus layer and the app layer. And so I just want to pose that out there for hopefully people start working on that because I think there could be something that's more generalized. The second thing is that one thing that IBC does not currently have is actually an ability to verify sort of like the state validity. You only verify that the block is finalized and that it's attested that the state is valid. And something you can get in the modular stack is actually proof that the state itself is valid.
00:57:39.210 - 00:58:13.786, Speaker B: And you get that when you share a common data availability layer. And there are teams like Polymer that are working on kind of extending IBC to make it more modular, like modular friendly in terms of compatible with proof systems. So, anyway, those are just two points. But on your point about alignment, I think that's really an interesting thing to open up. And I want to start by saying that Celestia is credibly neutral. And so we don't favor any particular ecosystem or type of builder. We're just like a very simple data availability layer that anyone can use.
00:58:13.786 - 00:59:12.606, Speaker B: That's why, for example, we haven't enshrined any kind of execution in the chain or settlement layer. We haven't built any roll ups on our own because we want to be fully credibly neutral. That said, obviously we built the blockchain using the Cosmos stack. So we'll have IBC and probably be connected to chains like Osmosis and whatnot at the L one layer. And we've also built things like roll kit which are compatible with the Cosmos stack because we felt that that's really where the appchain sort of ecosystem exists and is most mature. And so we anticipate a lot of people to be building Cosmos app chains using things like rollkit in the future. But in practice, we've also seen a lot of adoption of new people coming to us saying, hey, we want to build our own roll up stack and we want to use Celestia because it's currently kind of the only option for scalable, trust, minimized data availability, block space.
00:59:12.606 - 01:00:06.094, Speaker B: So we have teams like Eclipse, which is building a Solana virtual machine sort of roll up stack. We have teams like one that is not announced yet, but building sort of EVM style stacks and just a whole sort of plethora of innovation of people saying they're not necessarily part of any ecosystem, they're not really part of Ethereum or part of Cosmos. They're kind of like starting from the beginning and just saying, my customer is a developer who wants to deploy their own rollup and what is it that they're going to need and I'm going to provide that to them. And I think that in the future, that's really where the space is going to go. And that's why we say modulism, not maximalism. Like, we don't believe that any stack is necessarily superior, any community is superior. It's really all inclusive, if you will, and we're more about bringing in, rather than fighting over the existing pie.
01:00:06.094 - 01:00:20.510, Speaker B: It's about, like you said, bringing in the next million or tens of millions of developers into blockchain and crypto. And that's really where we should be focusing our energy and attention.
01:00:20.590 - 01:01:16.370, Speaker C: Yeah, we could not agree more and that's a big theme of this season. It's really let the product determine what the stack is rather than the other way around. And we're really focusing on that because that's where we think people will be caring about in ten years, right, if we have billions of people using these ecosystems. So, yeah, maybe just to end here as a segue into our next episode. Dave, you and I have spoken about mev quite a lot, and we'll have the Skip team on next week. But would just love to know kind of your thoughts on how opinionated app spaces or app chains or app roll ups should be about mev and what is sort of the things that they can do that make them unique over, say, a smart contract application that shares an execution environment with thousands of other apps.
01:01:16.530 - 01:02:11.366, Speaker D: Yeah, so I think applications should be really extremely opinionated and some of the pains working on working on very monolithic stacks is you can't express these that you have to suffer. So I would like to say no to Sandwiching in a number of ways. From something as simple as it's impossible to submit a block that just has sandwiches to make my application have batching guarantees or some other forms. Mev are like lending market liquidations. Great. It is good that people can get a lending market liquidation to happen as soon as possible in the first transaction a block. It's bad that the current system can get dozens of conflicting transactions that waste block space because block space could be at some low price.
01:02:11.366 - 01:03:20.070, Speaker D: Liquidation can earn you a lot, so you're fine taking the risk of failure. And the protocol itself, the lending market isn't capturing any of this surplus value, so you should be able to have your blockchain. Basically, blockchain should be able to capture a lot of. This mev opportunity either automatically itself or express this to a market but then get a lot of the proceeds of that unlike today with just transaction fees. So to do a lot of this, you have to have extremely fine grained or more fine grained control. Like saying what blocks are valid, what aren't, giving apps more execution style parameters and getting your sequencer or validators to be able to auction off more things in very decentralized ways where you don't want just like Flashbot style things. Something like entirely external handles this and you require lots of benevolency in different steps to have safety or decentralization.
01:03:20.070 - 01:03:39.810, Speaker D: You should want the chain to do it itself so that way you can never have single blender lock it for any key assumption. So I think the space stuff is huge and we need half chains to be iterating way more on ways to express the semantic.
01:03:40.790 - 01:03:48.130, Speaker C: Couldn't agree more and we'll dive into that next week. So appreciate you giving us a teaser there.
01:03:48.280 - 01:04:09.542, Speaker A: Yeah guys, you both have been super generous with your time and I know we've got to wind down here in a minute. I guess I'll just call on each of you if you want to just do almost like closing statement or argument or just sort of bookend sort of the point that you've been trying to make basically in this episode. So I don't know if either of you have any sort of closing thoughts that you want to leave the audience with but I'll sort of open the floor to both of you to give you that opportunity now.
01:04:09.596 - 01:05:05.222, Speaker B: Sure can go first. I would say that again, modulism not maximalism let the best product win. And Celestia happens to think that the modular stack is really where the puck is going and what will end up being better. But ultimately it's where developers choose to build, where teams choose to build and I will say that the modular stack is very nascent and young Celestia actually hasn't launched yet. We will be launching later this year and there's still a lot of things to be built and so I also want to open invite people if you're really inspired by this vision. There's no shortage of amazing ideas and things like products that you can build or protocols you can build in the modular stack. I really think we're kind of redesigning what blockchains can be from the ground up and so there's just a huge amount of opportunity.
01:05:05.222 - 01:05:22.702, Speaker B: So if you're interested in that you want to build your own roll up, we'd really love to get in touch with you and just chat with you. So we have obviously Celestia on Twitter, we have a discord, we have a forum and really just jump into the community and thank you guys for hosting.
01:05:22.766 - 01:06:05.370, Speaker D: Yeah, for me, thanks much for hosting. I think I'd end it on I'd echo a lot of this of Nick's closing like so much to explore and re question of what are blockchains and what can they do? I think that we've in general been far too pigeonholed as a blockchain community in how we think about this and far too accepting of status quo's from monolithic chains. And, yeah, there's so much more we can do. And please spend time thinking about it. And don't be question all layers of the chain, not just don't assume Ethereum semantics or solana semantics or even today Cosmos funds. These should all change drastically if we're.
01:06:05.450 - 01:06:18.482, Speaker A: To get yeah, yeah. Super, super positive. Note to end on here. Guys, this has been a fascinating discussion. You've given me and Miles a lot to think about and digest, and I'm sure the audience as well. Thank you both so much for your time. I'll have to do it again soon.
01:06:18.536 - 01:06:18.862, Speaker B: Cheers.
01:06:18.926 - 01:06:19.750, Speaker D: Thanks for having us.
01:06:19.820 - 01:06:22.070, Speaker A: All right, partner. Great episode. What we think?
01:06:22.140 - 01:06:44.138, Speaker C: Yeah, that was a lot of fun. We certainly got into the weeds on that one, probably even more so than the other two episodes, but I thought they brought very unique perspectives. It's probably the first episode where we've had some genuine debate between our guests, which is great to hear. And yeah, it came have a lot of great takeaways that we can dig into.
01:06:44.224 - 01:07:14.022, Speaker A: Yeah, I agree. The point of this episode, just to reiterate again, for the audience, was to sort of look at that spectrum, right? And we didn't have the Ethereum sort of rollout perspective here, but we did have the full stack app chain and the modular app chain approach. So what did you sort of think of the pros and cons? I think Dave and Nick did a good job of sort of evangelizing each one of their sort of approaches to the architecture. So I'd be curious, how did you walk away thinking about what they said?
01:07:14.156 - 01:08:53.480, Speaker C: We have two different examples here. We have probably the best example of a full stack app chain that's in production right now in Osmosis. And they were very early movers, which we can talk about in Cosmos and a highly technical team that was capable of building this. But from day one, they wanted to leverage the full stack, its full capabilities for the sake of the application, right? Whereas Nick is coming at the angle of, okay, well, let's let the application developers focus on their core competency, which is really application development. Let's make the process of standing up an app chain as close as possible to being as easy as deploying a smart contract application on Ethereum, so that you do get a lot of those benefits of owning your own block space from day one, but you don't have the overhead cost of paying for security. You don't have to recruit chain developers. Right? And you can basically get to a minimum viable product as quickly as possible and iterate find PMF and then decide, okay, do I want to integrate more parts of the stack? Do I need higher customization which might come in the form of moving away from a shared sequencer set to moving towards something like your own sequencer set or maybe even going to a full stack app chain with your own validator set.
01:08:53.480 - 01:09:01.450, Speaker C: So two different approaches and yeah, it is important from perspective of builder of where you're coming from.
01:09:01.520 - 01:10:01.946, Speaker A: Yeah, I think we went into this episode trying to frame this argument from the view of thinking about a prospective founder or app chain builder. And as someone who's a little bit less on the technical side myself, one thing that I found myself wondering when I was trying to put myself in the shoes of someone who was going to pursue one of these different approaches is the amount that you need to grapple with to do a full stack approach is mind boggling. And it is completely to Dave and Sonny's credit that both of those guys know. It probably came across on both the episodes that we've recorded with them so far wildly smart and wildly technical that I think that's a lot of the reason they've had success is because of their ability to grok all these different layers of the stack. For me it was compelling. I think there are still a couple of challenges with Celestia. It's a little bit early in its maturity and I think the full value prop hasn't been realized yet.
01:10:01.946 - 01:10:39.274, Speaker A: But that was a very compelling sort of vision for me, right. Where I think as a founder I would have to weigh very carefully. I can see the advantage of being able to master all of those layers and have complete control over my application. But also sometimes it's really nice to not have to worry about stuff and be good enough at a certain layer that you can just say, hey, I'm going to take my mental bandwidth and really focus in hard on this one layer or problem. And even though the rest of this part isn't quite as good as I'd like, I'm okay with 80%. So I think that's an important thing to consider.
01:10:39.472 - 01:11:48.238, Speaker C: I totally agree. And I think it's probably fair to say and worth noting that the Osmosis, I guess lifecycle is probably not reflective of what an app chain builder would experience today. They were really the first DeFi app chain in Cosmos. They had the support of the entire Cosmos ecosystem from day one, which really takes away kind of like the BD pains. Right. And they also had a highly technical team that had the team is capable of building both the chain and the application. I mean, are some of the lead contributors to the Cosmos SDK itself? I think it's fair to say that to build an app chain today, a full stack app chain today, there is a BD component of getting validators to almost underwrite your chain and potentially invest to secure their own stake and then there's really okay, how technical is your team.
01:11:48.238 - 01:12:55.458, Speaker C: And to be fair, there are a lot of things that you have right out of the box for the Cosmos SDK. That's a big part of its success from a consensus engine to all these modules at the application layer that you can reuse and interoperability standards that you can leverage. So there are teams, I think Stride is a great example of one, which is a liquid staking project in Cosmos and they were able to stand up a full stack app chain with a team of five or six in six months. You can do this, but there is definitely a BD threshold that you need to accomplish and also just finding the right folks on the team, which frankly, it's just not realistic for thousands of applications all to be able to do this, which is kind of the world that we see. So I think there is absolutely a place for a more lightweight approach and Celestia's modular stack is really promising in that regard.
01:12:55.624 - 01:13:36.690, Speaker A: Completely agree with that. So I think probably it's fair to say that Dave and Sonny's experiences wouldn't necessarily be representative if you tried to do that today. But I did think his point about how much more difficult is it from a BD perspective? Like, what does the lift look like of bootstrapping a validator network versus your own sort of single sequencer? I think that was a very fair kind of counterpoint and I didn't leave necessarily convinced that, again, putting on my founder hat, that it would be a lot easier to kind of stand up my own single sequencer either. I think eventually the vision of Celestia is that there will be different layers of infrastructure and there'll be a decentralized sort of network of sequencers that you can plug into but that isn't built yet.
01:13:36.760 - 01:15:14.586, Speaker C: Right? I think there's the elephant in the room is that no roll up network has really built a decentralized sequencer network. Right? These are all single sequencer networks right? Now that you might be able to submit fraud proofs to detect invalid blocks. But I think there is definitely a trade off in putting your trust in a single sequencer that you're using for your app specific roll up. Or are you plugging into an existing network that you're sharing the sequencer network with other roll apps? That okay, great, now we have a decentralized sequencer set. But that decentralized sequencer set is serving a lot of different applications. So just how much can they actually understand in terms of the semantics of the app and to do some of the things that Osmosis has its validators do, like control, transaction ordering, capture, mev, Censor, certain sorts of sandwich attacks and things like that, right? And so, yeah, I think we are still so early on the sequencer side and trying to understand or answer the question of what can a validator set do that a sequencer set can't do for you at the application level. But I don't think we've seen any app specific roll ups, bootstrap, their own decentralized sequencer set, which would be just drawing an analogy.
01:15:14.586 - 01:15:18.226, Speaker C: That would probably be the closest thing to what you could get with your own validator set.
01:15:18.328 - 01:15:43.558, Speaker A: And I actually think hopefully we'll be hearing from Antonio, the founder of dYdX, and I'm pretty sure that exact constraint played a big part of his that played a part in his decision to move into the Cosmos ecosystem. I want to talk for a little bit about mesh security. So mesh security was a concept that I actually realized we probably should have done a little bit of a better introduction to it in that episode. So Miles, can you just kind of give us the overview of what mesh security is?
01:15:43.644 - 01:17:40.110, Speaker C: Yeah, so in the context of this episode, we were talking about how we see the Cosmos stack and specifically security models evolving. And I think one of the biggest criticisms of this full stack approach is that your chain is secured by the value of your application's token. And so it's almost a bit of a circular dynamic where if the application's token goes down, all of a sudden your chain is much more vulnerable to attack. And so are there ways that can you create additive security by potentially consuming adding another token to secure your chain or multiple tokens to secure your chain? And so mesh security is this idea that you can basically give a portion of your tendermint power, so basically of your security, and let another chain basically secure that side. And so it's a bottoms up model where the chains are deciding strategically who to align with and who they would like to let secure their chain and potentially have a bilateral relationship there where you are sending some of your hypothecating, some of your stake to their chain and vice versa. And it gets into a lot. We talked a little bit about Cascading Risk, what this sort of could look like, but I think it's interesting because you could see a future where a lot of these app chains are secured by multiple tokens and it makes, I guess, the overall security of the chain more stable, especially if those tokens are uncorrelated.
01:17:40.110 - 01:18:56.082, Speaker C: It also allows, I would say, chains with very close economic relationships to instantiate a security relationship that reflects that level of interdependency between each other. Basically letting maybe a good one is Osmosis and Axilar, where I would think four out of the top ten assets in terms of TVL on Osmosis are bridged from Axilar. And I think 70% of Axilar's TVL is sitting on Osmosis. So those are two chains that really want to basically be able to check on each other to make sure everything is all the data that's passing between them is valid. And so that's another angle of this. It's really hardening these economic relationships and increasing your security at the same time. So, yeah, it's something we're very excited about and it's really taking a more bottoms up approach to shared security versus a top down approach to something like the Cosmos hub providing their validator set to another chain or Ethereum providing security to one of the roll ups.
01:18:56.146 - 01:19:59.418, Speaker A: It's a fascinating and there's obviously a lot of merit to it as well. One question that I have for you on that is I've sort of heard Sonny describe mesh security as kind of the NATO approach as opposed to the Empire approach to security. And not to go too high level with this analogy, but I guess when he said that, I found myself asking would I rather have the protection of America or NATO? And I don't have to think about know too much. Right. So I think although you remove a certain risk of sort of the evil empire, right, or let's put this back in the rent extraction power of Ethereum, say, which is more of an empire sort of approach, right? That's something that you want to worry about, but there's also something very simple about it as well. And one sort of concern in my voice about my security is it adds a little bit of complexity to it, right? Which is sort of I don't know what you'd respond to that, but I.
01:19:59.424 - 01:21:35.686, Speaker C: Think that's a great analogy if you think about yourself drawing security from NATO that involves a large number of these bilateral agreements that took a lot of time to negotiate and maintain. And I think that that's probably going to be one of the biggest challenges of Mesh, is that all of this has to it falls on the community to kind of drive the ship here and actually strike all these agreements and monitor them and continually reassess their security models. And we've touched on this a little bit, but that is one of the biggest challenges of the Cosmos full stack approach, is that you're putting so much on the shoulders of your community's governance and it's not just the chain developer, it's also the community, right. That is the ones at the end of the day, voting on these things. And so I agree, there are definitely much simpler approaches. But if you think about a world where there are more than just say, dYdX and Osmosis, but tens or hundreds of very valuable full stack app chains that have all kind of gotten to that point in their evolution, they're going to need to think about ways to add security and to complement their own native staking token. And so this is probably the most interesting approach yet, but there's a lot being explored.
01:21:35.798 - 01:22:14.118, Speaker A: Know if I was critiquing us a little bit on this episode. One thing that I wish that we'd explored a little bit more where both their opinions on sort of this idea that Zachie introduced last episode that I know you're very curious about it's this idea of the minimum viable stack. And it was useful, I think, to hear Dave talk about the cosmos. SDK. And on the one hand, he's obviously very technical and in the weeds and know, to my understanding, is actually a core contributor to the Cosmos SDK as well. It seems very powerful today. On the other hand, I love the way that Dave closed things, which is to say, question everything, right? We're still so far from the end state.
01:22:14.118 - 01:22:27.290, Speaker A: So I guess my question to you is, how did you think differently now, hearing the way they talked about the minimum viable stack? I've got a question for you on sort of network effects that accrue to that. But what did you think about that whole part of the conversation?
01:22:27.630 - 01:23:41.826, Speaker C: That's the other piece of this. We've really only seen the Cosmos SDK in action in terms of app chain stacks out there. And I think that somebody who's been in the space like Dave for a long time and has built a lot of that stack, and he'll be the first one to tell you there are a lot of shortcomings with it still. And so that leaves room for more of these stacks to evolve. And maybe we'll borrow pieces from the Cosmos stack that make their bootstrapping experience a lot easier, right, because we can get into the network effects. But I think I view the success of these stacks and really the ecosystems that use them as a combination of ease of developer onboarding and how easy is it for existing apps to migrate to your stack, I would say, what is the quality of the ecosystem that's already using that stack? So sort of a biz dev component. And I think all the other stuff that we talked about is important, too, like what are the costs involved with using these different stacks? There's a lot more to come out.
01:23:41.826 - 01:24:20.734, Speaker C: I think we'll see different modular stacks that leverage Celestia, kind of like, as we mentioned, Sovereign SDK. I think we'll see L three stacks like the Op stack that optimism is building, or what Slush is building for the StarkNet ZK roll up ecosystem. And, yeah, I think it will really be interesting to see what sort of applications migrate to these different new competitors based off of what their capabilities they offer.
01:24:20.932 - 01:24:39.254, Speaker A: We sort of closed on this idea of Mev, and the reason we did that was because our next episode, we're going to be talking a lot about how Mev functions in Cosmos. Can you just give for the listeners, why are we dedicating kind of an episode to Mev? How does that sort of play into the app chain thesis that we're yeah.
01:24:39.452 - 01:26:13.026, Speaker C: I think when we talk, this whole season is about owning your own block space and what can you do with your own block make? How can you leverage that to make your product better? And I think Mev plays into this in a couple of different ways because Mev is really getting at. How do you extract value? By ordering transactions in a certain way. And I think by owning your own block space you can be extremely opinionated about how those blocks are constructed and you can do so in a way that one protects the user against harmful MPV. So these are things like somebody detecting your transaction in the mem pool and then inserting their transaction above yours or above yours and behind yours to sandwich you. At the same time, you can basically harness this control over block space to capture the value of the mev yourself. Right? And so to me I think this is one of the most compelling, I'd say, tailwinds of the app chain thesis is that you can have the best of both worlds as it relates to mev. You can improve the user experience by protecting them from harmful mev and you can also improve the amount of value capture that your application can extract from your block space, which then can be reinvested into the product again.
01:26:13.026 - 01:26:28.342, Speaker C: Or you can leverage this value accrual to undercut competitors with more rent seeking, value accrual methods like fees. So I think it's going to be an important dynamic here and excited to get into it more next week.
01:26:28.396 - 01:27:10.422, Speaker A: Me too. One thing that I've already you were already on this before we started the season. But one thing I've really changed my mind about or was just wrong, frankly, about, is that I thought a lot of the reason for launching your own appchain was to be able to capture more economics of really, you know, even listening to, like Dave. It's more about what you can do with your product and what you can get your validators to do for know. That being said, I do think that one of the reasons I'm particularly interested to dig into mev in the context of Cosmos is there's sort of this almost repeat a lot of the ideas I'm realizing. Another takeaway for me from the season thus far. A lot of what you see in Ethereum's Roadmap actually popped up in Cosmos first.
01:27:10.422 - 01:28:04.902, Speaker A: In some ways Celestia is a great example of that 2019 the white paper was lazy ledger, right? And they were sort of the first ones to really advocate for this idea of modularity, which is now broadly accepted by the Ethereum community and baked into their roadmap. But one question that I have that we started to get into a little bit in this episode is what are the dynamics of mev in a modular architecture going to be? Right? Because when there aren't different layers in the stack, there's just mev that gets captured by sort of the base layer. But then when you layer on different in a layer two context, there's a sequencer that captures some of the mev before the transaction ultimately ends up getting routed and settled on the base layer chain. And then on top of that, even in a third layer there's the app chain. Right. Which is the app chain. I would right.
01:28:04.902 - 01:28:38.350, Speaker A: And I'm sure Dave and Sonny, they would want to capture a lot of the mev on the app chain layer. As you know. I think within that context one idea that I want to explore a little bit is I think again in the ethereum side of things they sort of view these roll ups, generalized layer two roll ups and roll ups on top of that as benevolent extensions of ethereum main net interest which in a lot of ways it is. But in a lot of other ways you're sort of competing for value capture and margin along that chain as well. So just an idea that I would introduce.
01:28:38.430 - 01:29:31.434, Speaker C: Yeah, absolutely. And I think we'll get into it next week. But just how much can these shared sequencers do in terms of that value capture and how much of that flows back to the application is a big question for me. And how much control does the application have over how that value is distributed? I think that's a big question. And I think we'll see one thing that I think we'll see on Cosmos first before it appears on Ethereum is some of the more interesting on chain solutions for mev. So this is moving something like FlashBlock off chain auction to actually be on chain right. Where it's completely verifiable and open source and also gives the chain control over how that revenue is distributed.
01:29:31.434 - 01:29:47.990, Speaker C: Right. You're not trusting the validators to kick back some portion to just stakers. Right. Maybe it goes to users, maybe it goes to investors in another sense. But, yeah, I think there's plenty to unpack here and we'll get into it next week.
01:29:48.060 - 01:29:51.380, Speaker A: All right, Miles, this has been a fun one. I will see you here for our Med episode next week.
