00:00:06.080 - 00:00:06.192, Speaker A: Cool.
00:00:06.192 - 00:00:07.300, Speaker B: Cool. Yeah. Get out here.
00:00:08.505 - 00:00:25.965, Speaker C: Awesome. So I guess we can start. So welcome everyone to Leaf across protocol spaces. With us are our dear guests, Nick and Korpi, technical lead and product strategist for Cross. Welcome.
00:00:27.355 - 00:00:28.575, Speaker A: Thanks for having us.
00:00:29.435 - 00:00:30.575, Speaker B: Yeah, thank you.
00:00:32.915 - 00:00:36.055, Speaker C: So, Cram, take the stage.
00:00:37.475 - 00:00:55.313, Speaker D: All right, Cram will take the stage. Nick and Korpi, welcome. Welcome to lefi's let's Talk Cross chain interview series. So can we just start with maybe some basic introductions who y'all are and what you do at Across? Yeah, sounds good.
00:00:55.329 - 00:01:35.685, Speaker A: I'll go first. So I'm Nick. I'm the technical lead at across before, or I guess also in parallel. I'm writing contracts for UMA Protocol and Across is one of the projects that we're working on. And I'm taking charge of the technical side of across specifically. So I run solidity day to day and then the code that interacts with the smart contract. So a lot of our stack is written in typescript and then we have front end and middleware engineers also who take some of the smart contract stuff I write and turn it into usable and pretty stuff on the front end.
00:01:35.685 - 00:01:50.705, Speaker A: A lot of my day to day, I guess, is just thinking of Edge cases where the smart contract system can fail and then working on the automated bot system that are our across is heavily relying on.
00:01:54.565 - 00:03:11.575, Speaker B: I'm Korpi and I do product strategy at across and my goal is to make sure that across has the best bridge product out there. From the technical side, Nick's team does awesome stuff and the technology is super cool and we see it in the usability and that we're able to maintain very low fees, particularly on the larger transfers and we can get into that more later. But my background is in market making in like tradfi space. So I've really enjoyed kind of thinking about this problem because it's very similar to a classic market making problem. And bridging is largely just about. It's moving assets around, but also it's matching off people that want to go one direction with people that want to go another direction and trying to be efficient with how you do that and then translate those efficiencies into lower fees for the users and a better experience. So, yeah, I'm just constantly racking my brain trying to figure out what we can do better and how to make our product great and the experience good for all users.
00:03:13.915 - 00:03:43.645, Speaker D: Yeah, I have to say. So I wrote a deep dive for Cross on Leis behalf probably a month or two ago and I was just kind of Blown away at the. You took a different perspective for building a bridge than what we normally see when we see, you know, lock and man structures over the place. Whereas across is something kind of totally different. And we've y'all kind of walk us through the origins and development history of across, like specifically how it came about from the Optimistic Oracle, from uma.
00:03:46.785 - 00:04:36.781, Speaker A: Yeah. So the, the original motive of across was similar to some of our older financial derivatives. Originally UMA was a synthetic contract. We were trying to build synthetic indices, like something that could track like the S and P. Or at one point we made this meme contract that would track like the number of poops in San Francisco. Like the idea is like you could track like very arbitrary, complex things in crypto without having to like trade the stock for it. So when we were trying to solve that problem, we really realized that we needed an oracle that could resolve these, these, these price indexes that were not.
00:04:36.781 - 00:05:18.035, Speaker A: Yes. So one of our strategies was to try to create the actual end contracts that would showcase the power of the optimistic Oracle. And originally we were doing financial contracts. Some of them were like sort of like stable coins like dai, where you need, you need to know the price of the collateral relative to the debt. And that's a good example of using an optimistic oracle. But we also wanted to showcase that you didn't just have to do price financial contracts. So one example was we thought you could do some sort of insured bridge where very simply if you wanted to cross chains.
00:05:18.035 - 00:06:32.455, Speaker A: Also this was in summer 2021 I think, when Optimism and Arbitrum were either just rolled out or not fully live yet. And so we knew that there would be a lot of people who'd be stuck in the seven day withdrawal window getting from optimism to Mainnet and there would have to be some solution to get through it faster. So one idea was to come up with some sort of like insured order book where someone could say, I want to send funds from L2 to L1 and I'm going to provably like lock them up on the L2 side. And to do that I'm going to admit some sort of event that's forever on the blockchain and then I'll allow anyone else to pick up an order ticket and fill it on the other side. And then so they would basically be fronting me money and they would get paid back after seven days. And the reason why we used optimistic oracles, you need to know whether that relay was filled exactly. So was the amount sent less fees to the correct Recipient within some sort of timestamp and all these other parameters that are not very easy to prove.
00:06:32.455 - 00:06:51.135, Speaker A: If you just have a. If you just have like an oracle that is trying to act. An oracle that's designed a different way. Let's just say, like the optimistic oracle is really well designed for these very complex questions. And the question is, was this relay fulfilled properly?
00:06:54.825 - 00:07:11.005, Speaker D: Yep. And so can you. Before we kind of dive into more of a cross, I just want to make sure people understand, like, how the optimistic oracle works in the context of across. You know where it. If someone disputes a transaction, what happens through the optimistic oracle?
00:07:12.705 - 00:08:09.415, Speaker A: Yeah, so if someone disputes a. So if someone disputes a relay, then. Or someone disputes like, yeah, a relay or a refund for a relayer, then what will happen is that that relay will be snapshotted like the state of the relay at the time, and the disputers alleged, like information will be bubbled up to the UMA dbm, which is a set of UMA token holders who vote and resolve whether the dispute was correct or not. In parallel, the relay will. Across is designed in such a way that in parallel that relay can be reset. So the user may never know that the relay was disputed, but the relayer is the one who's taking on the risk. And if they send the relay incorrectly, then they will basically go to the UMA settlement court to decide who gets paid out.
00:08:11.975 - 00:08:17.183, Speaker D: And from there do they get slashed if it ended up that it was a malicious transaction?
00:08:17.359 - 00:08:22.355, Speaker A: Yep, exactly. Or the disputer gets slashed if the disputer was wrong.
00:08:23.895 - 00:08:37.155, Speaker D: Nice. How many? This is getting into the weed, but this is so fascinating. How many disputes is across seeing on its bridge on like a basis or daily? Whichever metric you, you have off the top of your head.
00:08:39.815 - 00:09:04.475, Speaker A: That's a good question. Maybe corpy knows, but I do know that usually at the beginning of launching these products, we always have way more disputes than normal just because we're working through some bugs in the bot code. So oftentimes we'll see bots dispute themselves, but long run, I think across V1 has had very few disputes in its lifetime. I don't know what the, what the amortized value is.
00:09:05.455 - 00:09:30.555, Speaker B: Yeah, I think across V2 has been live for almost a month and I believe we've had four disputes, but they've been us, our bots, disputing our own bots with like upgrades and kind of like not actual real disputes, but just kind of like technical challenges as opposed to like anything malicious from a transaction standpoint. There's been none of Those in across V2 yet.
00:09:32.975 - 00:09:33.875, Speaker D: Sweden.
00:09:35.055 - 00:09:50.191, Speaker E: Sorry, if I just correctly, the user doesn't have to deal with any of this because the disk is always borne by the relayers. So they're kind of like working this out amongst them while the user has already gotten the based amount.
00:09:50.383 - 00:10:04.785, Speaker B: That's right, yeah. The user doesn't know or experience that the dispute, it's behind the scenes on whether or not the relayer gets reimbursed for the money that they have or the assets that they have fronted to the user.
00:10:06.245 - 00:10:12.345, Speaker E: And this goes into the slow transactions or like does this work for the fast transaction?
00:10:14.805 - 00:10:45.435, Speaker B: These are for the fast relays. So the one to three typical, if you want to go from Arbitrum back to Ethereum, you'll get the money typically in one to three minutes. The dispute could then happen after that on whether or not the relayer gets refunded, which typically takes around two hours because the transactions get bundled and that bundle has to go through a liveness period of two hours before all of the repayments for the relayers are approved.
00:10:48.695 - 00:11:38.015, Speaker A: Yeah, the user actually benefits a lot from dispute mechanism. Assuming so the system relies on having a single honest actor. So as long as there's a single honest relayer out there, the user is going to get their funds. And in the case where the person gets say like a relayer gets disputed, can get double paid sometimes. So we saw that recently where a user received funds from a relayer but the relayer was incorrect so the relay got disputed and then when it gets disputed the relay basically needs to be sent again. So then the user got sent more funds. So our system moves a lot of the risk from to the relayers themselves and the relayers get paid for their service.
00:11:41.435 - 00:11:55.485, Speaker E: I think that's kind of the best part about like an optimistic design. Right. Even if there's like one honest watcher or like one honest relayer in the system, everything works smoothly.
00:12:00.945 - 00:12:24.195, Speaker D: Yeah. So I have a question. You noted that as long as there's one honest relayer watching these transactions, disputing malicious transactions, then the network is essentially secured. Who's running the relayers? And I assume, I think the documentation says that it's all botted on the relayers. Can you just talk a little bit about that process?
00:12:25.535 - 00:13:02.037, Speaker A: Yeah. So anyone can run a relayer and you need enough weth to pay a bond. So I think that's half a wef and you don't pay that per relay, you're just basically locking that up to secure your relay. So yeah, anyone can run a relayer the code's open source. It has not been fully documented right now, but the documentation is in the process. But all the codes open source. And theoretically you can run the code that the across team is open sourcing.
00:13:02.037 - 00:13:31.745, Speaker A: But the open source code is purposely not meant to be optimized. It should be improved on. It's just sort of a starting point. Like you could quickly make submit relays or manually dispute stuff. And we imagine in the future people might write their own front ends to like to allow other people to propose and dispute. And so the bots that our team specifically runs are very slow relative. Like they.
00:13:31.745 - 00:13:49.305, Speaker A: They could be improved a lot faster and you could, you could compete on fees longer term. Like right now we charge like a very. The fee is very cheap. But it could be improved even more if you want to win more. It's just meant to be sort of a fallback long term.
00:13:50.285 - 00:13:56.189, Speaker D: Oh, interesting. So y'all are kind of keeping it slow to incentivize more people to run relayers. Is that kind of what it sounds like?
00:13:56.357 - 00:14:06.595, Speaker A: Yeah, I mean it's still like pretty fast right now, but it definitely could be faster. Like you would. There's an opportunity for someone to beat us to every single relay if they wanted to.
00:14:09.655 - 00:14:13.887, Speaker D: One west. That sounds pretty cheap right now. I might have to go do some research after this.
00:14:14.071 - 00:14:47.895, Speaker A: Yeah, and so far it's been pretty profitable. Yeah. And because like V2 improves on V1 a lot where the protocol allows you to batch a bunch of transactions together. So in. We can get more into this later. But one of the core differences between V1 and V2 is that in V1 could be disputed. So the relayer was sending a lot more transactions where in V2 you can bundle up a bunch of transactions and you can basically get a lot more fees into a single transaction.
00:14:49.275 - 00:15:09.535, Speaker E: I think kind of touching upon this as well. But I read that across v2 is highly capital efficient. So can you maybe tell the listeners about what capital efficiency really means for bridges and how across V2 is just highly capital efficient?
00:15:11.915 - 00:16:20.181, Speaker B: Yeah, I can take that one. So in across V2 we have all of the liquidity pool assets basically stored on Mainnet. And behind the scenes they're sort of moved around where they need to go to the various L2s to make sure that the system operates. So we don't need like super deep liquidity pools on all of the relevant chains, which you can see sometimes. Like if you have know 10 assets and five different chains, L1 plus L2s and you need deep liquidity in all of those locations because you're using an AMM or some type of swapping bridge, then you know, you need like 10x the amount of liquidity because it's spread in all those different places. We have it all centralized in what we call the hub pool. And there's spokes which are on the different L2s that push and pull money from the hub pool kind of as needed.
00:16:20.181 - 00:17:17.083, Speaker B: So from a capital efficiency standpoint it's, it's, it's much better. And the way that our relayer works is we have relayer assets on, on these chains and the relayer basically needs to hold enough assets to support two hours hours worth of transfers. Because every two hours the relayer is going to be paid back or reimbursed for the assets that it's moved from the liquidity pool. So assuming you have enough depth in your liquidity pools, you need enough money in the relay your network to only support two hours worth of transactions. And so you, you can keep a much smaller amount. I mean just simple math. If you assume that the transactions are evenly distributed throughout the day, you know, you only need like 1/12 in your relayer because you can turn that over every two hours.
00:17:17.083 - 00:17:36.375, Speaker B: Now you don't actually have the transactions evenly distributed throughout the day, but you that something like you know, only 10% or less of what you have in your liquidity pools you need in the relayer to support single transactions or bunches of transactions that can happen on two hour windows.
00:17:38.155 - 00:17:41.295, Speaker D: And just to clarify where those two hour windows coming from.
00:17:41.995 - 00:18:28.075, Speaker B: So the two hour window is the, the way it works is if you want to, if the relayer fronts you some assets on your destination chain, the relayer does not get paid back those, those assets until a bundle has been submitted to what we call liveness or like, you know, basically it's a proposal to, to be repaid that needs to go through like a two hour liveness or like dispute period where anyone can say that's I disputed, I disagree. After that two hour period when it's not disputed, then the funds are distributed and the relayers are repaid for their before the assets that they fronted to users.
00:18:30.175 - 00:18:50.435, Speaker D: Okay, got it, got it. Also, so you can tell Arjun is definitely a researcher. He just like hopped right into capital efficiency before asking about the difference v1 to v2. But can. So y'all just launched across v2. Can you just kind of outline the new capabilities across V2?
00:18:52.065 - 00:19:24.413, Speaker B: Yeah, so what we just talked about. Yeah basically the design is just kind of different where we have These, the hub and spoke model and which essentially. Well, to take a step back and across V1, you could only bridge assets from L2s to L1. It was just a fast bridge. So now in across V2, you can go the other direction. You can go from L1 to L2. You can also go between L2s.
00:19:24.413 - 00:19:43.225, Speaker B: So the routes are much different. And then we added Polygon as a new chain. Those are the main changes that a user would experience. Across V1 was fast and cheap. Across V2 is fast and cheap and secure. The same things. But we now have, as I said, more routes and a different chain.
00:19:43.225 - 00:19:51.045, Speaker B: Yeah, I guess that those are the main, like, we can get go into different parts of that, but those are the main differences.
00:19:52.025 - 00:20:13.735, Speaker E: So in V1, like, why were you so focused on L2 to L1 transfers and not anything else? Because I think like every other bridge was supporting all the different routes, but when I thought about across, it was always like a specialized route, which is good in the sense that I always got a good route and like good rings. So is that your reason or where did that come from?
00:20:14.195 - 00:20:59.739, Speaker B: So the reason that that happened is because that's kind of the hard transfer. That's like the pain point. If you want to do L2 to L1 using the canonical bridge or the native bridge, whatever you want to call it, on Optimism, Arbitrum, you're going to have your funds locked up for seven to eight days. If you wanted to go from L1, 1, 2, L2 on Arbitrum or Optimism or Polygon, it's not that long of a transaction. It's relatively quick on the native bridges. So it's hard, I think, to have like a competitive advantage. Like time wise, some people care about one to three minutes versus 30 minutes, maybe others don't.
00:20:59.739 - 00:21:50.911, Speaker B: I think comparing seven days to a couple minutes, people care about that. So that was the first and I needed. And if you look at our volumes and our flows, that is about 70% of the transaction direction that we see is from L2 to L1. Because I think a lot of people are essentially used to just using the native bridge to go L1 to L2. The L1 to L2 flow is actually like the most valuable flow, the most valuable transfers that we could have as a bridge. Because if you think about it, what we're doing behind the scenes is we are. If a user wants to go from L2 to L1, we basically, you know, use the relayer, give them the money.
00:21:50.911 - 00:22:50.559, Speaker B: The relayer gets paid back in two hours from the liquidity pool, which gets paid back in seven days once the funds actually travel over the native bridge. So we're the liquidity, our liquidity pool investors or people that put tokens in our liquidity pool are giving seven day loans in return for money apy. And so we basically are facilitating a lot of day loans for our liquidity pool holders. Now if we actually get the offsetting direction, if we can get users that want to go from L1 to L2 on our bridge, that is effectively a fast exit for us. Right. Because we basically, you know, they are L1 where we want it and they are taking money out on L2 where we have it. It's the offset to the other side of the fast exit.
00:22:50.559 - 00:23:16.895, Speaker B: So we're toying around with like, you know, different kind of pricing models and incentives to, you know, potentially encourage this because that essentially helps us get even more efficient with our capital because now we don't even need to use the seven day bridge anymore. We can offset one user that wants to go L1 to L2 with a different user that wants to go L2 to L1, which is super cool.
00:23:19.795 - 00:23:36.135, Speaker E: And I think like you mentioned, you kind of solving a hard problem of bridging from L2 to L1. So do you think that's the reason that you see like higher average transfers like by volumes per amount?
00:23:38.955 - 00:24:33.325, Speaker B: I think so, yeah. I think because people that want to go L1 to L2, they don't necessarily need to across two or our competitors or a bridge aggregator to do that transfer. They can just go to Arbitrum or Optimism and have a relatively decent experience. Particularly Optimism has this, I forget what they call it. It's like a gas subsidy for transfers, I think a half eth or smaller. So if you wanted to just move a half E from mainnet to Optimism, the gas, they subsidized the gas, they have a called like very rapid or something where it's like super cheap to do that. And so, you know, I think the onboarding side, the fast bridges or the third party bridges have less of a competitive advantage to the native bridges.
00:24:33.325 - 00:24:44.475, Speaker B: But if you want to get your assets off of optimism quickly, you have to use a fast bridge or you know, bridge aggregator to a fast bridge and it's just a question of which one.
00:24:49.295 - 00:25:11.885, Speaker D: Okay. And okay, so this is, this is interesting. The capital efficiency section of this talk is, has been awesome. So is across expanding to new chains limited by capital efficiency or are you just waiting for more optimistic chains to pop up? How does choosing which chain you're launching on next go at a cross.
00:25:14.225 - 00:26:06.695, Speaker A: I think you need. So yeah you do need capital like you need relayer capital on the L2s, but I think so so that that's the capital efficiency question. The other one is security. So one of the reasons why we don't support Avalanche out of the gate is because the avalanche bridge doesn't use the same, doesn't have the same trust model that the Avalanche consensus model does. So if we were to communicate between chains and Avalanche we would be adding additional trusted actors. So the people who secure the Avalanche bridge to the system and right now if you look at are chains, they all communicate with mainnet. So Polygon Optimism, Arbitrum Boba they all communicate to mainnet with a trustless bridge.
00:26:06.695 - 00:26:47.635, Speaker A: And when I say trustless I mean that the secured is not any different from the security of the layer 2 consensus model itself. But going to. But avalanche to mainnet has like a different trust model. And I'm not trying to just pick on Avalanche. I think many other chains fall into this category and we just haven't. We've tried to make the whole system trust minimized which means the users only need to trust the consensus models of each of the L2s that they are using plus the UMA DBM economic trust model. But we don't want to add additional multisigs to that.
00:26:52.615 - 00:27:13.285, Speaker E: Yeah, so I think like this centralization and trustlessness are quite important to you. So what the significance did decentralization play in building your own bridge? Like what are the different trade offs that you make in terms of like designing a processing?
00:27:16.305 - 00:28:31.815, Speaker A: I'd say the whole model is a lot more. Well, so if you didn't have the like one of the obvious examples, if you didn't, if we didn't want to make it trustless, you wouldn't have a two hour challenge period for disputes and proposals. You would just allow relayers to be refunded instantly and you'd allow like messages across chains to be approved by a multisig like instantly and be a lot faster than two hours. And over time we could shorten the two hour period down. But I think there does have to be some amount of a challenge period like maybe like 15 minutes longer term once we fully scale out and feel comfortable with everything for proposers and disputers to evaluate the validity of statements. And I think that's always going to be the case also like the whole architecture of the system is kind of built around this like trustlessness assumption and that's to protect the users. But the trade off there is those systems like slower than it would be if it were centralized.
00:28:31.815 - 00:28:48.015, Speaker A: I guess what you could argue that the most extreme trusted version of this sort of bridge is like, you could just use a centralized exchange like Binance to get across chains and that's like a much faster bridge, but you just have a different trust model.
00:28:50.995 - 00:29:15.865, Speaker D: Yeah, so one question I had when writing the Deep Dive is so I agree that across is like there's, there's so many trusted bridges out there. I would say across, certainly, certainly on the trustless side. Are y'all worried at all about the Optimistic Oracle ever being attacked and that affecting the cross bridge mechanism?
00:29:17.725 - 00:30:49.495, Speaker A: Yeah, I mean that, that is a, that is a core assumption. And, and also I would say so we're trust, we're trust minimized because you're still trusting like the UMA DBM model. And I would say the Optimistic Oracle also relies on a single trusted, a single honest actor working on its behalf. Anytime a proposal or a price request is sent to the Optimistic Oracle, you need an honest validator speeder watching the chain and raising so there is a failure case, as if there are not enough proposers on the Optimistic Oracle. And so this is something we thought about and we've actually in the past six months like released a front end where people can get paid to point and click and resolve proposals and disputes because a lot of them are really easy, easy to validate. And Even the across v2 questions like is this relay valid? They can be validated pretty easily, assuming you trust the uma, our code so far that we have that validates these things or you could run your own. But I think part of our responsibility is making sure that there is a distributed network of people who are incentivized to respond to Optimistic Oracle requests.
00:30:56.555 - 00:31:13.345, Speaker D: Beautiful. Okay, so I think we're going to move over to some easier stuff here in a second like Community. And the question I'm sure you get in discord all the time win token, but before we do that, Arjun, do you have any other more technical questions you want to ask these guys?
00:31:16.085 - 00:31:37.825, Speaker E: Not really technical, but like I read in one of your tweets, like where you mentioned how you've been managed, you managed to basically attract the bigger volumes, like the bigger users, but for some reason the smaller users are not there yet on across. So do you think now that you support L2 to L2 transfers that will change?
00:31:39.495 - 00:32:28.305, Speaker A: Maybe, maybe not. I think it's pretty similar to like the order book versus AMM debate. So like big users don't want to use AMMs because you're taking on slippage and the slippage gets really bad at the tails. Whereas like with our, with our system it's a bit more of an order book model where you're going to be guaranteed a price, you just might not be guaranteed time. And we've seen that with some of like the whale transfers, they first want to know that their funds are safe. The second thing is that they don't necessarily care about having their funds immediately, they just care about getting a certain price. And with the cross model you sort of can guarantee a price, but you can't guarantee the time to fill.
00:32:28.305 - 00:32:39.495, Speaker A: Whereas with the liquidity network bridges you might get filled a lot faster, especially for really big transfers, but you might get a really bad price.
00:32:40.755 - 00:33:14.800, Speaker B: Yeah, just to add on to that. Yeah. I think as Nick said, we have a bigger advantage on the larger transfers. Like if you wanted to move 500,000 Dai from Arbitrum or from Optimism to Mainnet, I think we charge the user about 2000 bucks for that. And the only other bridge that can even support that is one of our competitors. And they charge I think like 8 or 10,000. So it's like 4x the amount.
00:33:14.800 - 00:34:08.507, Speaker B: If you wanted to move a thousand ETH from Arbitrum to Mainnet, we charge around 2 ETH. Our competitors charge 6 or more. So I mean, I guess the advantage in dollar terms when ETH was 3000 is more exciting to talk about than 1000, but it's still thousands of dollars on these, you know, million dollar transfers or hundreds of thousands of dollar transfers that you can save with a cross. So I think there, as Nick said, it's like we have a competitive advantage that with our architecture because we don't have this slippage that an AMM order book would have. We were able to just be much more competitive. Now if you're Talking about a 1 ETH transfer, you know, I think our charge is like 0.0001 and our competitors charge is 0.0001.
00:34:08.507 - 00:34:56.321, Speaker B: It's, it's like roughly the same. You can't really go much cheaper, particularly when you're going to main. Net gas is a large percentage of the fee or portion of the fee. And that's something that every third party bridge would have to pay. So it's harder to make the economic argument to the smaller users just because the dollars are, it's harder to differentiate yourself. So there, I think, you know, what we're working on and I think is just being in more places, being in Your aggregator being, you know, like just have a cross on people's mind that when they think about bridging, they think about a cross. We're slightly newer than some of our competitors, maybe that's it.
00:34:56.321 - 00:35:06.485, Speaker B: But yeah, we're constantly just trying to build awareness and showcase that we have a great product and then hope we get all sizes of users across the board.
00:35:08.345 - 00:35:24.905, Speaker E: Yeah. By the way, I love your Twitter graphics that you keep posting for the competitive advantage. Like I think this is super effective because they show your core strength very well, which is like offering much better routes in terms of like higher transaction volumes.
00:35:27.245 - 00:36:10.275, Speaker B: Yeah. And we're able to offer like some L2 to L2 things that like if you need to move amount of boba or if you need to move wrapped bitcoin, like oftentimes we're the only bridge that supports it and our fees are just like extremely low. It's not only our fees are low, but you can't really even do it on any other fast bridge. Like if you need to move wrapped bitcoin off optimism, there's no one else that can do it. So it's like kind of cool. Once we support an asset or token, it can go between all of the chains that we support, assuming it's enabled. If it has a native representation on those chains, you can bridge it with across to and from those places.
00:36:10.275 - 00:37:32.189, Speaker B: Because we don't rely on having a wrapped bitcoin pool on optimism like some of our competitors might. So that's, you know, pretty neat from like a product standpoint that we're able to do those things. And like one other thing that I didn't mention earlier that is cool that we do is so let's say that you want to bridge a token into a place where our relayer might not be sufficiently capitalized at that moment in time. We have like an inventory management system on our relayer behind the scenes that's dynamically allocating liquidity as needed. So if you wanted to bridge some eth over to optimism and for whatever reason the relayer was running low on eth on optimism, we have a way to kind of shuffle funds around behind the scenes scenes of the relayers assets to be able to support those relays. So we're effectively it goes under capital efficiency that we're being even more efficient with capital by kind of allocating it in a real time basis when and where it's needed. And then, you know, like across V3, I can envision a world where we're also potentially like swapping or transferring Tokens as well to facilitate bridging demands.
00:37:32.189 - 00:37:48.775, Speaker B: Like if there's a big need, need for dai, we have USDC on a chain all via bot. We could somehow get that USDC into DAI to support that relay to just make sure that the user experience continues to be fast and good.
00:37:51.155 - 00:38:07.135, Speaker E: Yeah, totally makes sense. And another neat feature that you guys added in v2 was the netting feature, I think. So can you like tell us a bit more about the netting feature and what it is and how it works in the backend?
00:38:08.035 - 00:39:13.281, Speaker B: Sure, yeah. So netting just simply means you're just taking two things that offset each other and so they kind of net out. If you wanted to go from L2 to L1 and I wanted to go from L1 to L2 in theory, nothing would actually need need to travel over the canonical bridges. It would just be, I get your assets on L2, you get my assets on L1 more or less. Which, if you imagine an L2 to L2 space in particular, where gas is extremely cheap, it's like you pay almost nothing to, to, to, to bridge the tokens. If you don't have, if, if netting is there because you're essentially just, you know, trading with another person or another wallet on the same chain that you're on because you get that offset. So I mentioned earlier, but the getting more 70% of our volume is L2 to L1, we, we want to get more L1 to L2 as well.
00:39:13.281 - 00:40:37.251, Speaker B: Because whenever we have that L1 to L2 volume, that means that we don't actually have to send assets over the canonical bridge, the liquidity pool assets over the canonical bridge and have them locked up for seven days and just wait for them to arrive back on mainnet. If we have a user that wants to go from L1 to L2, that is the fast exit for the bridge because they put their assets in L1, which is where we wanted them, and they take assets from us in L2 which is where we wanted to get rid of them. So with our hub and spoke model where the liquidity pool assets are being moved around the various L2s, we have the ability with this offsetting flow to do this netting where essentially just makes your capital even more efficient. Where depositors into our liquidity pool, they're, they're getting paid as if they're making seven day loans all the time, but they're not actually making seven day loans all the time. Sometimes they're doing even shorter loans than that. So imagine, imagine getting paid a fixed amount of money for a seven Day loan. But it only your capital was only tied up for three days, for example.
00:40:37.251 - 00:40:59.975, Speaker B: You can actually do that twice, right? Because you could do it for three days, you could do it for another three days and you're effectively doubling your APY because on each transfer you get paid a seven day rate. But if your money is not actually tied up for seven days, you're able to recycle that money and more times to like leverage APYs, the more efficient that we are.
00:41:03.765 - 00:41:09.185, Speaker D: Geez, sounds like I need to have a weekend side hustle here. Don't, don't tell Philip the Arjun.
00:41:11.245 - 00:41:19.825, Speaker B: Well that one's easy. You can just put money in the liquidity pool and you kind of, you earn those returns. But yeah, to spin up a relayer maybe takes a little more work.
00:41:20.885 - 00:41:41.665, Speaker D: Okay, so we have I think about 10 minutes left here. We talked about across kind of the technical stuff here. Let's just talk about community win token and I've been in your discord for a while. I think you'll have a fantastic community. What's going on with the token and who's going to be in charge of across in the next six months.
00:41:43.445 - 00:42:47.881, Speaker B: So yeah, the plan for the token and the DAO kind of managing across is in Q3 is kind of what we're aiming for. There's a lot of like we want to do some cool things with our token that have never been done before with tokens that we're aware of. So there's been like a decent amount of iteration and community input and development. One concept is this idea of reward locking or reward locking I guess is what we're calling it. And the idea there is that you actually, if you have assets in a liquidity pool and you're getting paid in the token as kind of an incentive for being in our liquidity pool, the longer that you go without claiming you earn a multiplier on your rewards rate. So let's say that the, the pool is paying. Liquidity pool is pay paying a 5% APY in our token.
00:42:47.881 - 00:43:37.251, Speaker B: If you been on our liquidity pool for three months, for example, you're going to be earning a special APY of 10%, a 2x multiple on the base APY that everyone else is earning as kind of like a loyalty and a thank you for being around for a longer period of time. Now if you claim your reward, you're going to reset your multiplier back to base and you're going to be earning the same APY as everyone else that just newly comes to the pool. So the longer you stay in, the higher rate you earn. With the goal of being okay, I put some money in a cross, I'm happy and now I want to leave it there and leave my rewards there because I've earned a 3x multiple. So all the new money is only earning 5%. I'm earning 15%. This is great.
00:43:37.251 - 00:44:34.665, Speaker B: So kind of like developing mat contract and figuring out how it'll work. What was some work that we've been doing. We also have an idea to launch a referral program as well which will be kind of paid for with the token. And the way that will work is if I send someone a link to go to across, I can append my wallet address at the end of that link and anyone that uses across from that link, I will be linked as their and I will be earning a percentage of all of their bridge fees that they pay. So if they pay a thousand dollars in bridge fees, I could be earning I think between 40 and 60% of their bridge fees as a reward stream for me. So the goal there is to have this like grassroots. Anyone can be a salesperson for across.
00:44:34.665 - 00:45:21.889, Speaker B: Anyone can spin up a referral link and, and send it to whomever they would like. And as long as the person doesn't click on a new referral link, that refer will earn a percentage of that lifetime bridge fees from that individual that they referred to across. Now you can also refer yourself. So it's also a way of, you know, getting discounted bridge fees or getting rebates back in the token if you just put your own address at the end of a referral link. So yeah, like cool. Things that have existed in you know, other that we have not seen in bridges at all. This idea of like the RAM and like the multiplier system on rewards have been things that like we've been iterating on and thinking and developing.
00:45:21.889 - 00:45:43.465, Speaker B: And so that's kind of why I guess things have quote been delayed. But we're optimistic that like Q3 token will be launched and the goal there you talked about who's running across it would be the token holder. So like the dao that, that whole thing, we have people in the community that are working on governance structure and all of that, but it's, it's to come.
00:45:45.365 - 00:45:54.385, Speaker E: That is how do, how do aggregators, like if I get in on the fees because there sounds like a lot of fees going on.
00:45:56.845 - 00:46:22.735, Speaker B: So an aggregator, however, I mean, I guess if it's probably from a technical standpoint, I guess you're not actually sending people to Our front end you're calling the contracts directly but there must be a way that you could essentially append a wallet address on the end of the calls and then be getting credit in the same way for sending people to across.
00:46:27.685 - 00:46:43.545, Speaker D: Okay, we may have to talk about later but that is, that is some bear market alpha right there that opt on those tokenomics are just, just curious are y'all planning on doing anything cross chain with the token just because or is it gonna be on Ethereum Mainnet for now?
00:46:46.165 - 00:46:49.145, Speaker B: Main net for now is plan.
00:46:51.355 - 00:47:02.735, Speaker D: Cool. Okay, I think we're about out of questions here. We said 30 minutes but I think we're going to go 45. Arjun, do you have your one last question you want to get out there?
00:47:03.675 - 00:47:29.785, Speaker E: Yeah, I mean I just want to ask what are your views on bridge aggregate and have you guys thought about optimizing for aggregators as you're directly competing with other bridges? So is this a thought because you're competing with all the other bridges in the ecosystem, do you kind of have to do better than the others to be preferred by aggregators like lefi?
00:47:32.005 - 00:48:32.853, Speaker B: So I personally think that like bridge aggregators in the like I don't know on what time frame one year for two years forward are going to dominate bridging volume. I think that it's, it makes sense for to go that I think right now aggregators are not doing the lion share of bridging volume and maybe that's because bridging is, I don't know, everything's new but somewhat newer and maybe it's, it's not completely fungible. People have different products, we think ours is the best. Other people probably think theirs is the best. But like probably, you know, once you get more comfortable that a bridge is safe and been around for a long time and you might be indifferent between using a cross or two or three others. As much as that hurts our feelings, it's reality. A bridge aggregator is going to be the simplest, easiest way to go to a single source and know that you're getting like the best price.
00:48:32.853 - 00:49:31.115, Speaker B: It's like real time price shopping, real time comparison where you put in your transfer and they everyone bids on it in real time of the cheapest that they're willing to do it or the fastest, whatever you want to iterate on. So I think that yeah, bridge aggregators are going to continue to grow in popularity. We're happy to be on them. Super excited to be on yours shortly because yeah, I think that it's, it's. I personally think it's Just going to head that direction and take up, you know, at least 50% of the volume that we see in like all bridging transactions, which now I think across the board in the EVM space is something on the order of, you know, 50, 60 million a day. I could just see that, you know, doubling, tripling and growing as well. So there's a lot of tokens to bridge and we're super excited to, you know, have a cool product but also be a part of as many aggregators as we can.
00:49:32.905 - 00:49:49.165, Speaker D: Beautiful. And so before we leave, do you all want to add anything else on what we might see in the next year from across? Maybe from V3? I know that y'all mentioned NFT bridging the other day in an article and then we'll head out.
00:49:50.025 - 00:50:35.729, Speaker A: Yeah, I would say NFT bridging would definitely be possible with where I think we can get to with the cross V3. So something to think about with the architecture of across V3, which is the sort of like order system. Someone submits an order, someone on another chain fills it and the whether that got filled correctly or not is up to the optimistic oracle. You could, you could think of token transfers as a sub problem of this generalized like cross chain messaging problem. Like how do you get messages cross chain and had you like validate that they were correct. And the message that is built on is sending tokens. Like I, my message is I want to send tokens from chain A to chain B.
00:50:35.729 - 00:50:58.255, Speaker A: What if that message was an arbitrary message? What if we just allowed arbitrary messages to be sent cross chain? That might be like mint my NFT on this other chain, but it also could be extended a lot. It could be a lot more generalized than that. And that, that's sort of like a hint at where we think we can go with D3.
00:51:00.555 - 00:51:02.615, Speaker D: Oh, that's big time.
00:51:03.675 - 00:51:25.315, Speaker C: There's a lot of big time stuff in this 45 minutes, I have to say. Really, you're pushing boundaries on multiple fronts on cross chain space. Guys, I really enjoyed this conversation. I think our listeners have as well and I cannot be more excited for LI to integrate across.
00:51:28.535 - 00:51:29.475, Speaker B: Thanks, Tim.
00:51:29.975 - 00:51:30.795, Speaker A: Thank you.
00:51:31.255 - 00:51:33.675, Speaker D: Awesome. This was very fun.
00:51:35.015 - 00:51:37.155, Speaker C: Thank you guys. And to the next one.
00:51:38.575 - 00:51:39.375, Speaker B: All right, sounds good.
