00:00:49.180 - 00:02:00.614, Speaker A: Hello. Hello, everybody. If you can hear me. All right, let me know in the chat here. Got a little bit of a different setup here. All right, good morning, all. GMGM.
00:02:00.614 - 00:02:12.834, Speaker A: Hopefully everybody is doing well. I'm actually away from my normal apartment, so I'm not going to be on video today. Sorry. But don't worry. We're going to get just as good of a session. And welcome. I hope you're all doing phenomenally here.
00:02:12.834 - 00:02:38.506, Speaker A: Okay, somebody says they can't hear me. I think you all can't hear me. I hope you all can hear me. Yeah, I think you all can hear me. But, yeah, we're going to have a phenomenal session here today. We're going to be talking about hard hat, and we're going to get learning about hard hat and learning how to build our solidity code and our smart contract code in a more productionized manner. All right, great.
00:02:38.506 - 00:03:02.994, Speaker A: People can hear me. Okay, cool. So hopefully you can all hear me. Now, yesterday we had a phenomenal couple of sessions, right? We talked about what's the purpose of smart contracts. We talked about a little bit about remix, about solidity. We got set up with metamask. We talked about Chainlink and everything that happens with Chainlink and what Chainlink is and how it works.
00:03:02.994 - 00:04:06.200, Speaker A: And we played around with remix and stuff. Today what we're going to be doing is we're going to be bouncing outside of remix, and we're coming over to the hard hat smart contract framework. So I have a link here that I'll be sending in the chat here, and I'll ping it up in here. And this is set up instructions for working with Hardhat. Now, you can also, of course, use the hard hat documentation, which I will send to you as well. There are two people talking, trying to figure out the audio stuff here. Does everyone else also hear two people talking, or am I okay, or is it something with their set up? Is there double audio coming through? I hope not.
00:04:06.200 - 00:04:23.386, Speaker A: No. Okay. All right, so if you're hearing double audio, you might have me open twice, which, if you have me open twice, great. You get to double here, you get to double learn. So congratulations to you. Cool. All right.
00:04:23.386 - 00:04:45.618, Speaker A: Glad things are going well. But, yeah, the other place you can check out is the hardhat documentation. They've got this documentation button tab that you can, of course, click and go through as well. But if you want to start with the chain link bootcamp hardhead instructions, this is where we're going to start. Now, the reason that we're going to going into hardhead right. For some of you who'd be like, hey, I've been working with remix. Remix is awesome.
00:04:45.618 - 00:05:47.070, Speaker A: Why don't I just do remix forever? Why don't I just do remix forever? And the answer is that remix is absolutely phenomenal, right? And you still probably going to use remix a lot and you're still going to come back to remix and you're still going to play with remix because remix is a great tool for kind of quickly visualizing stuff, right, and doing that, deploy stuff and checking out things on the left hand side and everything. But it's not so good for our professional environments, right, because writing tests, writing scripts, integrating with kind of regular CI cb pipelines can be tough. Now, remix does have a bunch of really phenomenal tools that you can still use. However, we're going to be learning about hard hat because it's just going to make our lives so much better. And as you kind of jump in and we learn together, hopefully that will become abundantly clear. If something isn't clear, just let us know and ask questions, right. That's why we have these live sessions.
00:05:47.070 - 00:06:08.214, Speaker A: And I'm going to change the background to be a little bit cooler here. Yeah, that's a little bit cooler. All right, cool. So hard hat setup instructions. So there's a bunch of instructions in here, and if you haven't done these before, go ahead and walk through it. And Hardhat is going to be a JavaScript development framework. So it's based on JavaScript, JavaScript typeScript.
00:06:08.214 - 00:06:48.358, Speaker A: It allows us to write all of our solidity and solidity, but then it allows us to write tests scripts in JavaScript later on. Today we're going to be going over Brownie, Foundry and truffle. So if you want to do your scripting and testing in python, go to the brownie one. If you prefer like bash or just straight up shell scripting, go to the foundry one. Truffle is another Javascript one, so you kind of have your pick. I'm assuming since you're here you might have heard of Hardhat and you want to play with Hardhat. Now, a really good question here, what is the difference between Hardhat, truffle, brownie, et cetera? Yeah, so most of the differences are just like kind of the different languages.
00:06:48.358 - 00:07:27.374, Speaker A: Hardhat and truffle are both Javascript, and then hard hat and JavaScript are just, hard hat and truffle are slightly different. Even though they're both Javascript, they have different developer experiences. Right. And just whichever one you like better is the one that's better for you. So with that being said, let's jump into this hardhead starter kit here so we can learn how to work with this and do this. Now, one more thing, because I have 101 more things. So if you go to something like DfI llama, something like DfI llama.
00:07:27.374 - 00:07:53.866, Speaker A: So DFI llama is a d five dashboard. It tells us how much money is locked into different protocols. Let's turn all these on. You can actually see kind of some of the different projects. And what's really cool then is maybe you'll look at something like Ave, be like, all right, cool, Ave is up here. Ave looks like an awesome project. You can always go to the, you know, you could click on one of their GitHub repos.
00:07:53.866 - 00:08:28.520, Speaker A: And when we get into the repo, we can see what framework that they're using. So if we go through all their folders here, they have a hardhat config js, which is a file needed to work with hardhat. So you can actually go through and see what your favorite projects are using for their framework, right? So ave, for example, uses hard hat. Hardhead right now is easily the most popular framework. So if you're here, you're learning the most popular smart contract development framework out there right now, which is Hardhat, which is really cool. Okay, that's my last thing. Now we're going to get into it.
00:08:28.520 - 00:08:58.734, Speaker A: All right, so let's do it. So to get started with hard hat, yes, you need metamask, but the bigger things are you need node js. So node js is a Javascript runtime environment. I'll put a little link to this in here, and I'll try to answer questions as we go along. Can we do everything in Brownie that we can do in hardhead? Yes, you can do everything in pretty much all of these. Yes, great question. Hardhead, truffle and brownie work on Linux properly.
00:08:58.734 - 00:09:27.014, Speaker A: Yes, in fact they work much better on Linux. So first thing you need is node js to get started. You can see if that's works by running node v in your terminal for this video here. For this demo, I'm going to be working with visual studio code, and I'll show you what that looks like in a little bit. I'll send a link to that as well. Visual studio, not visual studio, visual studio code. I know it's really confusing.
00:09:27.014 - 00:09:50.546, Speaker A: They have similar names, but they're very different. This is a coding editor. This is going to be where instead of writing your code in remix, we're going to write it in this coding editor. So that's where you're going to want to go. You're going to want to download that and you can follow along with me. So download node js and then we're pretty much good to go. We'll also want to download git and you can check to see if it's downloaded right by running this.
00:09:50.546 - 00:10:12.730, Speaker A: So let me switch screens here. I guess I just stopped sharing screens. Let me switch screens, hold on into my vs code. Okay great. Hopefully you all can see that. All right, cool. So now I'm in our visual studio code here and this is what it looks like when you download that visual studio code thing.
00:10:12.730 - 00:11:11.750, Speaker A: So what we want to do is we want to open up our terminal and you can do that by selecting terminal, new terminal or if you're on a Mac, was it control shift, control shift t to open up a new terminal or just control tilde to open and close the terminal bit here. And we can check to see if we have those packages installed by running like node v. And the other one is Npm v or yarn. I'm going to be using yarn instead of NPm just because I like yarn better. But Npm or yarn both do the exact same thing here. And the way we want to get started with a project is I usually make a new folder, right? So I went actually, so I make a new folder in here. I did mkdir which stands for make directory hardhat.
00:11:11.750 - 00:12:00.190, Speaker A: And then I CD into my hardhead folder. So CD stands for change directory. So we created a folder called hardhead and now we're inside that hardhead folder. And what you can do then is you can run code or you can do file open folder and then select this folder that you just created and your vs code will open up in that folder and you'll be able to kind of see all the files in this little explorer thing on the side. Oh, one more thing that I didn't mention for Windows users here. I know there's a lot of Windows users here. I highly recommend installing WSl or Windows subsystem for Linux.
00:12:00.190 - 00:12:48.570, Speaker A: And I'll send a link to getting WSl in visual studio code. So if you're a windows user, definitely check that out. WsL is a way to run Linux technique kind of basically allows you to run Linux command in your Windows machines. So Windows or Linux is like the way programmers program is using Linux environments. So I would recommend trying to download WSl, trying to download WSL. That way you can kind of have that same environment and all the commands that we're going to work with are going to work for you too. And yeah, I'm seeing some people saying they're having a hard time with Npm.
00:12:48.570 - 00:13:21.080, Speaker A: Having a hard time with yarn. Great, just use NPm. They're both the same. I'll show you how to do both commands. And if I forget, just remind. So, okay, so we're inside of our visual studio code here, and to get started we're going to create a new we're going to install the hard hat package, right? And to do that we're going to do yarn add dev hard hap. Or if you're working with Npm, you can also do Npm install.
00:13:21.080 - 00:13:56.994, Speaker A: I forget what the dev flag is for NPm, but NPm install hard hat, right? Either one works and I'll do NPM commands here. Now I'm going to do yarn because I like yarn so much better. Yarn add Dev Hardhat and you don't have to do the dev if you don't want. I'll explain that a little bit later if you guys want to know. But yarn add hard hat works and you'll get it. Start to install to download the hardhat package to our local environments here. Okay, great.
00:13:56.994 - 00:14:47.230, Speaker A: So now if we look in our explorer here, we'll see that we have some files in here. We have our yarn lock, which is an auto generated file for specific versioning. We have our package JSon, which tells us versioning of our different packages. And then we have node modules, which is the actual downloaded packages here. Now that we have it installed, or now that we have hard hat downloaded, we can run yarn hard hat. Or if you are using Mpm, you can run MpX hard hat. And what you'll get is you'll get like a little pop up that looks like this saying hey, what do you want to do here? Now you need to be in the folder that has your node modules, your package jSon.
00:14:47.230 - 00:15:27.290, Speaker A: I've seen a lot of people run this and not get what they expect because they've got like a hardhat config in a higher directory, or they've got a package adjacent in a higher directory. Remember to run yarn hard hat in the same directory that you have your package adjacent and everything. Now what we could do is we have a couple of choices here of what we want to do. Create a basic sample project, create an advanced project, blah blah. For now, we're just going to create a sample basic project just to get started to show you kind of everything that's going on here. And yes, the rear project is going to be there. Yes, we're going to add a git ignore.
00:15:27.290 - 00:15:54.234, Speaker A: Yes, we want to install that stuff. And I'm just hitting enter here. You're going to see it's already starting to populate with different folders. And oh yeah, for NPm it's save dev. Yep, makes sense. Yep is git bash. I'm not sure if git bash works the same with WSL.
00:15:54.234 - 00:16:24.486, Speaker A: If they do, great. If you don't know anything about Linux, great. Grab that WSL and all these commands will work exactly the same. Or D for NPM install for dev. It's already downloaded. Hardhead, do you need to download again next time? Great question. And the answer basically is yes.
00:16:24.486 - 00:17:07.558, Speaker A: So the way that node modules work is each folder have basically their own dependencies, right? And our dependencies here are on Hardhat. You can install it globally, but for now I'm just going to answer with yes, we're not doing a global install for Hardhead. For this we are not doing a global install. We are doing local installations here. Great question. Do we need to install hardhead every time we start a new project? For now, yes. Let's just say yes, there are some fancy people who do global stuff, but you pretty much need to install it for every project.
00:17:07.558 - 00:17:47.054, Speaker A: So good question. All right, cool. So now that we're in hardhead though, we can see in our folders on the left hand side here, right? And if I type ls, we can see all the different things in here. If you're doing just windows, if you're not doing WSL, you would type like dur or something. But we can see all of our folders on the left hand side. So contracts is going to be where we're going to put all of our solidity code, all of our contracts, right? And it even comes populated with like a simple greeter sol a minimalistic contract over here. It comes with node modules, right? Which again is going to be our Javascript node JS packages.
00:17:47.054 - 00:18:17.290, Speaker A: It's going to come scripts, which is going to be our scripts. These are Javascript scripts. This is where we're going to code to interact with our contracts. We have a test folder which is for running all of our tests, git ignore, for doing git ignore stuff. Don't worry too much about that. Now this Hardhat config, this is kind of the cornerstone of all of Hardhat. You can almost imagine any script that we run runs through this config first.
00:18:17.290 - 00:19:01.514, Speaker A: So anytime you run something with Hardhat, you're running it through this first, and I'll explain what that means in a little bit. We have our package adjacent, of course, which is node JS dependencies or readme, which is just a bunch of helpful stuff. And then of course our yarn lock. So that's the basic setup here. And now once we have this back in our terminal, what we can do is we can run something like yarn Hardhat compile. This will compile all of the contracts that we currently have. So if we run yarn hardhat compile, it looks like I got to download the most recent compiler because I haven't, or download 0.8
00:19:01.514 - 00:19:31.266, Speaker A: before because I haven't worked on this laptop in a little bit. Compile two solidity files successfully, right. And what will happen is once you compile your contracts in remix, it's the same as hitting that compile button. We get the outputs in this artifacts folder, so this artifacts folder and ignore the cache for now. But this artifacts folder is where all of our compiled code goes. It's got a whole bunch of stuff in here. For now we don't have to read too much into it.
00:19:31.266 - 00:20:23.540, Speaker A: We just know that anytime we compile our code, it sticks it in the artifacts folder. And if we were to deploy our code to a testnet or a main net, it's going to be pulling it out of this artifacts folder, and that's where it saves everything. Any questions? Any questions? Dependencies can't yarn hardhead anymore? Oh, the other you. Oftentimes installing this stuff is literally the hardest part. So if you run into issues installing any disk, you definitely want to go to stack overflow, stack exchange, ethereum, ask questions, Google these questions, right, because oftentimes the installation errors are really common. So copy paste your error into like a search browser and there's a good chance you're going to find the answer. So I'm just looking for any questions here.
00:20:23.540 - 00:21:07.410, Speaker A: Sorry. Yes, for MPX people, it's MPX hardhead compile. Thank you for mentioning that. Yes, MPX hardhead compile, thank you, sorry, a couple of people already found some errors, which is if you're running into errors like for example cannot find module, you're going to have to add that. So in your package json, you should see that in here. And if not you'll have to do like Yarnad or NPM install it. Some people are getting some errors.
00:21:07.410 - 00:21:42.266, Speaker A: We need a solidity extension for vs code. You don't need one, but if you want one you can go to extensions and just look up solidity. There's a solidity hard hat one. Which solidity hard hat this is going to be the one that you're going to want to get. It's really fantastic. And in fact, I am going to install it right now and I'm going to disable this one. Yeah, the solidity hardhat extension is one that's going to help make your code a lot nicer.
00:21:42.266 - 00:22:12.338, Speaker A: And let me just reload vs code. Sorry. Yeah, so anyways, definitely, you're definitely going to want to get solidity hard hat if you're using vs code. This was released like, I don't know, maybe a month ago and it is awesome. So definitely get that. So cool. So some people are running to some compilation issues, which is okay, don't worry, don't stress.
00:22:12.338 - 00:22:32.682, Speaker A: So the issues that a lot of you are running into look like they're pretty fairly common issues, which is good. Setting up the development environment is really the hardest step. Once you move past this step, you're usually golden after that. So feel free to ask these questions on stack overflow. Drop into the discord. Yeah. So good question.
00:22:32.682 - 00:23:02.760, Speaker A: What does waffle do? Waffle helps us test. Waffle is a testing framework and we'll talk more about that tomorrow actually. And yeah, if I see a couple of you looking to help each other out, that's awesome. If you want to connect on the discord after this too, to help each other out, great. But in the interest of time, I'm going to keep going here. That's what yarn hardhead compile or MPX hardhead compile does, right? It compiles our contracts here. And if you get started with that greeter Sol, that's what that does.
00:23:02.760 - 00:23:28.800, Speaker A: I'm going to decline for now. Sorry. If you've installed that hardhead extension, you'll get this indexing thing here. Well, actually you might not. I'm getting it because I have a ton of random stuff installed and it's trying to index it all. I'm going to cancel for now. But what we can also do is we can run scripts in here.
00:23:28.800 - 00:24:05.430, Speaker A: So if I were to run, try to run the script, I could do yarn Hardhat. Or once again, if you're using NPM MPX, you would do MPX Hardhat, yarn hardhat, run scripts, sample script js. I'll hit enter. This is going to run our sample script that's in here. And you can go ahead and read this script and see what it does. It's some basic Javascript. What it does is it deploys that greeter contract that comes default.
00:24:05.430 - 00:24:28.178, Speaker A: It deploys it and then it reads some stuff from that greeter. Right. It says greeter deploy to greeter address. So it allows us to read directly from that greeter bit here. So that's what that does. We can also run tests with yarn hard hat test or MPX Hardhat test. And we'll get some tests here.
00:24:28.178 - 00:25:03.694, Speaker A: And if you want to see everything that Hardhat can do, you can run yarn Hardhat. This will give you out a list of all the different tasks that you have in here. Accounts check, clean, compile. Hardhat is also extendable. So there's a ton of plugins that you can add to hardhat that will make it do even more here. Okay, cool, let's go ahead. I'm going to create real time, a quick sample contract and script and kind of show you what your development experience is going to be like.
00:25:03.694 - 00:25:55.814, Speaker A: Right? So in my contracts folder I'm going to create a new file. I'm going to call it symbol code or symbol storage sol. And now I have a new file in here for me to start coding away with in here. Let's just write some sample solidity, right? So we'll do AgMA solidity 0.8.4. And this is a good point right here. If you want to use different versions of solidity, what you're going to want to do is you're going to want to open back up that Hardhat config js and down here at the bottom in our versions, this is where you tell solidity what version that you're actually going to use. Second, people, following along with me, I see my test failed.
00:25:55.814 - 00:26:27.490, Speaker A: If your test failed, that's not great. Yes, thank you MPX people. Yes, thank you're. Anyways, for different solidity versions, you would just change this to like 0.70.4, whatever. You can also have multiple solidity versions by adding this compilers thing in here. And you'll see this in here a lot.
00:26:27.490 - 00:27:05.406, Speaker A: We'll create like a little brackets in here. We'll say compilers bracket like this. Oops. And then in like little brackets here we can say version and then do 0.8.4 and then I can delete this down here. And then this needs to be a squiggly bracket instead of a. And then these commas got auto added.
00:27:05.406 - 00:27:40.880, Speaker A: But then we can copy this and do like 0.8.7 or 6.7 or whatever you want to put in here, right? And then if we do that in simple storage, we could say 0.8.7 because now our hardhead config is letting us know, okay, there are different versions we can use now. We can do contract simple storage, and this will be what our contract is. And for now we'll just make it really minimalistic. We'll add like a variable in here.
00:27:40.880 - 00:28:30.814, Speaker A: So we'll say a Un 256 public number, and then we'll do a function set number un 256 new number. We'll have this be a public function and all we'll do is we'll do it. Number equals new number. Really minimalistic function here. All it's doing is saving a number to storage in the contract. And then we have a function set number which is going to update this global number variable here. So we can actually go ahead and try to compile this right by opening up the terminal back up.
00:28:30.814 - 00:29:04.922, Speaker A: Let's see if we can compile this right. Yarn hard at compile or once again MPX hardhack compile. And great, it went ahead and compiled. Now you'll see warnings like this a lot. When you get yellow outputs that say like warning. These are good to look at, but it doesn't mean your code hasn't actually updated. The warning here is talking about this SPX license identifier thing, and we can actually just fix this by copying warning here.
00:29:04.922 - 00:29:41.654, Speaker A: SBX license identifier mit like that. This is just like an open source license for your code. It's not required, but it is nice to put in your code to make licensing a lot easier. And if you don't know what licensing is in code, then great, don't worry about it. How are we doing so far? Are people following along? Okay, so people, you were using a version of node js that is not supported by hardhead and may work incorrectly or not at all. Great. Google that.
00:29:41.654 - 00:30:37.126, Speaker A: If that's not on stack exchange eth, make it there. But you probably just need to update your node js. Hardhead has docs for compile version. Yep, they also have docs for compile version. So all these errors that some people are running into, like I said, this is the hardest part of this whole thing is setting up node js for your projects here. But once you I would recommend just kind of following along with the workshop here for now and then going back and then asking ton of these questions on stack exchange ethereum ask in the discord, usually it's oh, you just got to add like a number here or update something and then you're good to go. Yeah, as trivial as it sounds, googling the error 90% of the time will find you the result.
00:30:37.126 - 00:31:19.080, Speaker A: Right. So if you can't find a package, usually you just got to add the package. Would you mind showing your hardhat config js again? Yes, I would be more than happy to. Oh, and something else that I should point out while I'm showing you this, and I should have pointed this out much earlier, there is a, there's a clock where I'm sitting and it's very loud. There is a smart contract kit, hardhat starter kit that is really phenomenal. This is actually, let me show you just sharing in order to switch share. That's kind of annoying, but okay.
00:31:19.080 - 00:32:33.706, Speaker A: There is this hardhead starter kit that everyone should definitely check out. This is kind of like a full repo with kind of everything you need to know. You can grab it, you can get started. We're going to be going over more of this tomorrow in our testing, but if you're looking for like, hey, how does all this work together? This is where you're going to want to go and you can go to, it's hardheadconfig js and it's got a whole bunch of stuff in here, including these different compilers and all this stuff. So this is going to be like a big repo that you can use, you can copy, you can use this to view and understand how this kind of all plays together. Anyways, let's go back. Definitely be sure to check out that hardhead starter kit if you're looking to learn more.
00:32:33.706 - 00:33:05.442, Speaker A: If you're looking to kind of see how this all plays together from a minimalistic view. And oftentimes when I'm trying to start a new hardhead project, that's where I start that hardhead starter kit. We've added a new version in here. Compiling works great. Okay, cool. Now let's go ahead and let's create a new script. So in my scripts folder I'm going to right click new file and I'm going to say simple storage script js.
00:33:05.442 - 00:33:40.980, Speaker A: And we're going to code some Javascript in here. So in here it's going to look really similar to what we see in this sample script. Okay, so we're going to start by saying const hre equals require Arthur. And this is just, we're going to be pulling in dependencies like this. And usually the way most of these scripts are set up is you have like imports at the top or your requires at the top. Then you'll have a main function. Main function.
00:33:40.980 - 00:34:36.600, Speaker A: And then I'm going to say, invoke the main function and you'll see that same set up here. So we'll do our imports and then we'll have our main function. And you can see it's similar in the sample script here. So we'll run async function main, then down below we'll invoke it. And I'm just going to copy paste from the sample script because it's kind of like this gross looking block of code here. But what this bit is basically doing is it's just calling this main function, right? So everything that we identify in here write code here. This is where inside this main function is where stuff really happens.
00:34:36.600 - 00:35:46.250, Speaker A: Once we're in here, we can do something like real simpler to what's going on in this greeter one they give us. So we can do const simple storage equals await hre ethers get contract factory. So we can do const simple storage equals await hre ethers get contract free. Then we can even just kind of keep flipping back to review simple storage. What this line does actually I'm going to call this simple storage factory. So what this line does is it says, okay, hard hat, can you grab me an object that allows me to deploy simple storage contracts? And that's what this get contract factory does is it gets us a simple storage contract factory which allows us to deploy the simple storage code. Once we have that we can actually deploy just by calling the deploy function.
00:35:46.250 - 00:36:31.980, Speaker A: So we can say okay, great, now that we have this factory, we'll do const simple storage. This is going to be the simple storage contract itself. This is going to be a contract object equals awaitre ethers get awaitsimplestoragefactory deploy. And then we tell it which contract we want to deploy. We give it any constructor arguments here, which the Greeter had some, but we don't have any because if we go to our simple storage, we don't have a constructor here. So we'll just do await this deploy. Now something you'll see a lot in Javascript is this await keyword and this async stuff.
00:36:31.980 - 00:37:46.290, Speaker A: So Javascript and node js are asynchronous by default. So in order to work with them in a nice way, you have to kind of add this async keyword to your functions and this await keyword to your scripts here based basically await means that it's a blocking event. So when we run like simplestorage deploy, we want to wait for it to deploy, right? We don't want to continue coding while it's being deployed. So await says, hey, don't do the next step in my code until the simple storage contract has actually been deployed. Now that it's actually been deployed, we can then run something like simplestoragecontract number, what do we call it? Number we could do await. Let me do a little console log await wait. Simplestoragecontract number, which should print out zero, right? So console log is how you print stuff, and then the way we can call functions.
00:37:46.290 - 00:38:14.666, Speaker A: Actually, let me do this a little bit easier. I'm going to say const number equals await simple storage contract number. There we go. And then console log number, just so that's easier. So we're going to call the number function of our symbol storage. Now you might be saying, hey Patrick, number is a variable, it's not a function. What are you talking about? Well, anytime you have a public variable, it's secretly also a function.
00:38:14.666 - 00:38:58.950, Speaker A: So we're going to call simple storagecontract number, we're going to save it to this number variable, and then we're going to console log it out and it should be zero. Here we can run it with yarn hardhat or once again mpx hardhat. We use the run command, run scripts simplestorescript js, and we'll see what we get compiled one solidity file. Great. So here's our output. We get this big number with value of zero. So in our Javascript, in hardhat and ethers, when we work with numbers, we actually work with big numbers.
00:38:58.950 - 00:39:47.480, Speaker A: And the reason for big numbers, so big number is like a type in JavaScript that allows us to work with large numbers. And the reason for this is because Javascript has a really difficult time working with big numbers. So instead of just printing out these massive numbers that Javascript is going to have a hard time with, we just wrap them in kind of this big number object and reading them can be kind of confusing. So oftentimes you'll see this a lot. You'll see number two string, because big number is of excuse me, number is of type big number, and we're saying okay, we want a string output of instead. So we'll just do to string, we'll run that command again, but just by hitting up in the terminal. And now we get kind of a more readable just a zero here.
00:39:47.480 - 00:40:43.962, Speaker A: So that's how we can read a function. Now we can also send a transaction. So in the beginning we have number is defaulted to zero. We can also do like const transaction equals await simple storage contract. What do we call it? Set number, set number, and then we'll do seven and in hardhat and in JavaScript you can do seven the number or seven the string. I usually like to do seven the string because when you get really big numbers, like if you wanted to add something like this in JavaScript, or maybe this Javascript would look at this and be like I don't know what you're trying to do here, and would need you to put it in a string anyways, so it's kind of good practice just to default to doing it strings. Hardhat understands this as either seven the string or seven the number.
00:40:43.962 - 00:41:53.090, Speaker A: It's smart enough to know which one. Once we send that transaction we can also do await transaction wait one, which is like us saying we're going to wait one block confirmation for that transaction to finish, which this might be kind of weird, you're saying hey, await it and then await it again. This is await getting the transaction and this is awaiting getting it confirmed by other blocks. But then once we send that transaction to update the state, we can then run, we can say like const updated number equals await simple storagecontract number and then we could say console log updated number. I'm going to zoom out just so we can see the whole script a little bit more. So first we get the contract, we deploy the contract, we get its default starting value, we send a transaction to update it and then we print it out. So let's go ahead and see this in action.
00:41:53.090 - 00:42:29.594, Speaker A: So I'm just going to hit up to run this script again and then I'm hit enter and cool. And then got zero big number value seven. I should do updated number string that again with zero. We update it and then we get seven cool questions here. JS is too bad at maths. JS has a hard time with math. Oh yeah.
00:42:29.594 - 00:42:45.570, Speaker A: So that's perfect. I got this. That's perfect. Good job. Yes. To get help for a specific task, run MpX hardhat help task. Do I have mpX? So I'm going to MPX Hardhat.
00:42:45.570 - 00:43:10.422, Speaker A: Or you can run MPX hardhat, like run help. I think you can do that too. Other way around. I think you're right, sorry. Fix hardhat help run and then it'll give you kind of like a readable output of like hey, here's what it does. So run. It tells you a little bit more about run runs a user defined script after compiling the project.
00:43:10.422 - 00:43:38.620, Speaker A: Right? So yeah, great tip. I would like to see this done in typescript. So in that hard hat Starter kit that I sent earlier, there is a typescript edition. You'll just do git checkout typescript and I'll show you that in a little bit. I'm still confused about big number and to string. Okay, great question. So awaitsimplestorage number.
00:43:38.620 - 00:44:30.116, Speaker A: This function returns a big number type. And that big number type is because like I was saying, javascript is kind of not great at math. Let me send you and even in. And this big number of thing comes from the ethers documentation, which I'm pulling this up in just a second here. Kind of hilarious that. Yeah, that was one of the questions I asked here, let me switch my screens real quick. So this is the ethers documentation, which is kind of built inside of hard hat.
00:44:30.116 - 00:45:22.190, Speaker A: And even in the ethers documentation you get this thing, why Bn JS? Why big number? And you basically see right here, the reason why BNJs is used internally as the big number is because that is the library used by elliptic and elliptic is another kind of like built in package that's used. And it if we scroll up some more, why can't I just use numbers? Is kind of the bigger question, right? And it says right here, the first problem many encounter when dealing with Ethereum is the concept of numbers. Most common currencies are broken down with very little granularity. For example, there are only 100 cents in a dollar. However, there are ten raised to the 18th way in a single ether. And Javascript uses a very weird floating point number. Right? As a result, there are holes in the integer set.
00:45:22.190 - 00:46:03.124, Speaker A: So for example, after this number, you start getting holes in the amount of numbers that you can use, which is an issue in Ethereum because a lot of numbers that you use are going to be bigger than this. So that's why we get that big number and then we do two string to turn that big number into a string. Amazing question. Where are these smart contracts being deployed? Okay, let me flip back over. Really good question. So, back in our code here about the clock. I'm going to have to move after this because of the clock.
00:46:03.124 - 00:46:53.396, Speaker A: Here's back in our code here. If we don't have in our main config, remember, everything we do kind of goes through this main config first. And if we don't have a network defined, it automatically defaults to what's called the hard hat network. So in my terminal here, I can run yarn hard hat node, or once again Mpx hardhat node. What this will do is it'll spin up a fake local blockchain for me. Okay, so this blockchain is running on my terminal, like inside my terminal. And if I want to make scripts on it, I can create a new folder.
00:46:53.396 - 00:47:31.616, Speaker A: Excuse me, a new terminal and I can actually connect to it myself. Right. But this is running inside of our terminal. So when we don't define a network to use, hardhat goes, oh, okay, well, I'm just going to use my own local fake one and then just destroy it after your script finishes. However, we can actually define different networks inside of our code base here. So in here, oftentimes you'll see like a networks flag being passed inside this networks bit where we can define different networks. For example, if we wanted to use like coven or Rinkby, let's use rinkby.
00:47:31.616 - 00:48:02.290, Speaker A: We would put like rinkby in here, and then we would define different variables to work with Rinkby. So we'd add like a URL, which we get from alchemy. So you do like your RPC URL in here. And if you're unfamiliar with that, we've got a video on the chainlink YouTube channel explaining how to do all this. You'd add like your private key. So you do accounts is going to be a list of private keys. So you'd add your private keys in here.
00:48:02.290 - 00:48:56.032, Speaker A: And then what you can do is you'd have another network. What you could do is you could do like yarn, hard hat, run scripts, simple storage, script, network, Rinkabee, and then you could run on Rinkbee, on Mainet, et cetera. And that's how you deploy to different networks. So really good question here. Now, in the interest of time, because I already spent way too long, I'm going to go ahead and get clone the hardhead starter kit and we're going to open that up. So I'm going to do git clone starter kit because this is like, and we're going to go over this more tomorrow in the testing section of this. But this is like, once you get to more advanced levels, this is going to be what you're going to be doing.
00:48:56.032 - 00:49:45.490, Speaker A: So let me open this up code and start a kit. And then I got to jump off like five minutes early to get ready for the next session, which I am also running. Let me switch screens. Here's, I'm just going to show you this real quick and then I'm going to take a couple of questions and we're going to jump off. And then hopefully this has been helpful to people. I'm going to need to send you guys the feedback form after this too. Please take the feedback form as well once I get that to you.
00:49:45.490 - 00:50:13.448, Speaker A: 1 second so I'm going to send you the feedback form. We're going to run through this. We'll take any last questions and that'll be the session here. But yeah, this hardhead starter kit is like absolutely phenomenal. Like I said, it's where I start all of my hardhead projects. Let me send you this. Please take this feedback form.
00:50:13.448 - 00:51:03.672, Speaker A: Let us know what you thought of the session. If it was good, if it was bad, if it was a waste of time, if it was amazing, let us know. So we have this hard hat starter kit here and what we can do is we can run through kind of all of the tests in here by doing yarn hard hat test. Or once again, first we need to do yarn or NPm install if you're using NPM or MPX. So first we need to install everything and pretty much everything in here too, you can find in the readme. So this readme is really good and I'm going to do a little preview of it. This readme is really good.
00:51:03.672 - 00:51:43.168, Speaker A: It has pretty much most instructions in here to how to get started and work with anything. Right? So if you're using this readme here and you're trying to follow along and stuff doesn't work, that might be a good time to make an issue on the GitHub repo here so that you can follow along with this. Because like I said, this is kind of like a boilerplate kit for you getting started with your hard hat projects here. Yeah, I'm still installing stuff. Might take a hot minute, I guess. And look at this logo though. How cute.
00:51:43.168 - 00:52:04.456, Speaker A: This logo is amazing. It's like hard hit plus chain link. It's just perfect. Anyways, I'm still installing stuff. I'm installing a ton of stuff, clearly. But once things get installed, then we can actually work with this. And to walk through this real quickly, we have a contracts folder which is same as contracts.
00:52:04.456 - 00:52:30.470, Speaker A: We have a deploy folder which is new here. And this is where we add all our deploy scripts. We have scripts where we add anything else. Tasks are very similar to scripts. They're just kind of a different way to write them. You write them in this task folder instead of scripts. Then we have our tests, of course, and then we've got a ton of kind of configuration and helpful files over here.
00:52:30.470 - 00:52:52.154, Speaker A: Yeah, it's going to just take me eight years to install this. Sorry. While it's being installed, let me look at more questions here. What shows if you call script again? I'm not sure I follow the question. Yay works. Woo. Could you elaborate a bit on hardhat tasks.
00:52:52.154 - 00:53:36.162, Speaker A: Are those specific built in hardhat or common for vanilla js? They are specific built in hardhat. Basically it's just a different way to write scripts. I've asked high and low, like what's the difference between tasks and scripts? It's just up to the developer. I pretty much just always do scripts. If you're building like a plugin, that might be a good time to use tasks. But for the most part, I just do everything with scripts, even though I know the hardest starter kit has a ton of tasks. What does get contract factory method and what does it mean? So it gets a contract factory? A contract factory is going to be just some object that allows you to deploy contracts.
00:53:36.162 - 00:54:07.722, Speaker A: So basically it just gets an object that allows you to deploy contracts. And while I'm answering questions, I'm going to run some tests so we can run yarn hard hat test to run all the tests in here. You can see those being output happens if we don't wait. Oh, line 17. Like back in, back in the scripts that we were doing. If you don't wait, you're going to get some weird stuff. Because basically if you don't wait, you're basically telling your code, hey, keep going, even though that last thing isn't done.
00:54:07.722 - 00:54:33.994, Speaker A: So you're going to get weird stuff. I don't recommend doing that. Does hard hat have a migrations page similar to truffle? Good question. No. So it doesn't have a migrations page and you can see all the test pass, which is really. So the hardhead starter kits that we use use this plugin called hardhead deploy, which is kind of similar to migrate. I think the naming convention makes a little bit more sense.
00:54:33.994 - 00:54:57.630, Speaker A: But it basically deploys your contracts, right. And that's what truffles migrate does. It deploys your contracts and that's what hardhead deploy does. I think it's more correct to say that solidity automatically creates a public getter function. That is more correct. That is more correct. I was trying to make it easy for people to understand, but yes, you are more correct.
00:54:57.630 - 00:55:17.692, Speaker A: Okay. Is the hardet node an equivalent to ganache? Yes, they are both. Yeah, pretty much. Exactly. Spot on. So no need to use ganache for local deployment testing. So no, great question.
00:55:17.692 - 00:55:49.024, Speaker A: So you don't need to use Ganache because hard hat is using hard hat like its own hard hat. Fake blockchain, behind the scenes. Great question. Just curious, will these hackathons videos still be up for the next few days? Yes, they will be saved to the chainlink YouTube for as long as YouTube is live. I guess. Your contract is in another folder with sole identity and you are deploying via script written js. Sounds complex.
00:55:49.024 - 00:56:19.264, Speaker A: Right. Well, hardhat takes care of that for you. Yeah. Can we persist a local hard hat node between successful runs of our contract? You absolutely can, and in fact it's recommended you do that for a lot of testing. So in the hard hats starter kit, if you run yarn hardhat node and then you run your scripts with like yarn Hardhat, run script network localhost, that's how you can actually connect to the one that you're running. Great. Running the script again.
00:56:19.264 - 00:57:00.560, Speaker A: Why doesn't it keep updating the value? Why doesn't it keep the valued updates? Well, great question, because again, when you're running the local hardhat node, it looks at your script, it goes okay, cool, you want to deploy this contract and update this contract. Oh, you want to deploy this contract, but we don't have a local blockchain up. Let me spin up a brand new blockchain, deploy this brand new contract, and then I'm going to destroy the blockchain afterwards. That's why. Good question. Um, when hard at twelve hour course. Great question.
00:57:00.560 - 00:57:28.550, Speaker A: I'm about to start the editing process for my 20 hours course, so if I finish in the next month, you guys will have a 20 hours hardhead course to go through for this hackathon, which would be really cool. How to run yarn hard at compile for NPM. I'm getting an error. No worries. NPX hard. Yes, you got it. Oh, can you show how to clone typescript? Yes.
00:57:28.550 - 00:58:01.586, Speaker A: So if you just clone this, all you need to do now is get checkout typescript. Boom. Now you can already see everything changed to typescript, and now we're in the typescript bit here and all the commands pretty much worked the same. There are some big differences with typescript, though. How did you open the readme like that? Command Shift V. How did you open the command shift v? If I don't have a deploy folder, then I did do something. No, you didn't do something wrong.
00:58:01.586 - 00:58:36.880, Speaker A: The hardhead starter kit has got a whole bunch of additional plugins added, so you didn't do anything wrong. When would you use tasks over scripts? I just always use scripts. I think tasks are better for plugins. Are there any resources explaining the SPX license identifier? Yeah, the solidity docs and I just got to be conscious of time here. The solidity docs have a pretty good rationale explaining them. NPM and yarn, they both are pretty much the same thing. There used to be differences, but at this point, literally whatever one you use, you're going to be fine.
00:58:36.880 - 00:59:14.400, Speaker A: Difference between hardhead and brownie? Hardhead is javascript, brownie is python. So the deploy folder that we see in here, that comes from the hardhead starter kit. So the little demo that we did, I didn't show you how to make the deploy folder, so don't worry about that. Any framework similar to hardhead truffles, pretty similar. Yeah. The 20 hours course is going to be nuts. All right, well, I got to jump off because I got to go set up the next workshop.
00:59:14.400 - 00:59:29.530, Speaker A: Hopefully you all learned something here. Please take the. Where is it? The feedback form, wherever that is. Please take the feedback form. Let us know how we did. Let us know if you like this. If you're like, no, I would have rather just watched the YouTube videos.
00:59:29.530 - 00:59:34.390, Speaker A: These were fantastic questions and I'll see you in the next one. All right, bye. All.
