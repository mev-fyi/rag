00:00:02.650 - 00:00:35.926, Speaker A: All right, so this is a demo of using text messaging. So SMS communication to communicate with on chain smart contracts on conflicts network. And that's facilitated by Chainlink. So I will be working out of this repository that you can see on your screen. And this code is publicly available. So feel free to play with it, fork it, keep building it. I think it's a really cool start, but there's definitely a lot more potential to it.
00:00:35.926 - 00:01:12.290, Speaker A: So let's get started. First, we'll take a look at this diagram right here. So like I said earlier, we'll be working with Conflux Network, Chainlink, and also SMS. And then, so on the conflicts network side, it's really just a smart contract. I'll go into a little more detail on what the demo smart contract does, but think of it as any smart contract. And then for the SMS side, I'm using a Twilio gateway. So a Twilio API that I can send SMS messages to, and then it'll get passed on to be able to be read by Chainlink.
00:01:12.290 - 00:01:54.286, Speaker A: And then the components on the chainlink side is an external initiator. So this allows a smart contract to trigger a run on the chainlink node. Or in other words, it basically allows the chainlink node to monitor conflux network at specific addresses. And then there's two other parts. So the Twilio external adapter, which allows the chainlink node to also monitor the SMS gateway to see any new messages come in and also send SMS messages to the API. And then conflicts network external adapter allows the information to be sent back from the chainlink node to the smart contract. So the external initiator is only one part of the information going to the chainlink node.
00:01:54.286 - 00:02:33.406, Speaker A: And then the external adapter is what allows the chainlink node to communicate back to the complex network endpoint. So the first part is to get a chainlink node running. I'm not going to get into too much detail because Chainlink's documentation for this is really good. And the only things that I have added are these three lines to the environment pod. And the first one is just to disable ethereum because that's not needed in this implementation. And then turn on external initiators. And then I also turned on the chainlink dev just for some extra capabilities when modifying stuff.
00:02:33.406 - 00:03:10.954, Speaker A: So we can use this command right here and start it up. It's the same command as the one on the chainlink documentation. Paste that into our terminal and it will run through all the other things. Also notice that you'll need a password. And then especially on your first time, you'll need a username and password. This is up so you have an account that can access the chainlink node. So once all that's set up and it's also connected to a postgres database, it'll start running like this.
00:03:10.954 - 00:03:42.498, Speaker A: You'll see a warning that said it failed to connect to an Ethereum node. But that's okay because in this case we're not using an ethereum node. So the next part of the setup is the external initiator. So this external initiator is originally put out by chainlink. It's to facilitate a bunch of different types of networks that want to connect to the Chainlink network. But the code is right here. So as you can see it's a four of the original smart contract kit code.
00:03:42.498 - 00:04:24.958, Speaker A: And this is just customized for complex network. As you can see, I added a couple extra things into it, but for the most part it's the same. And you need a environment file, sorry with a different postgres database. And then you can link your chain link URL there. And then you'll need these four access keys and secrets. So I'll show you how to get those real quick. So the way you can get that, make this a little bigger is since I'm using the docker containerized version of the chainlink node, we'll go Docker Ps.
00:04:24.958 - 00:05:12.486, Speaker A: So now we can see the docker container and we want to get access to it. So the way you can do that is Docker execute it and then the container ID and then bin bash. So now we're inside of it. Here you have access to the chainlink command which allows a ton of extra functions like you can do admin bridges. Basically anything you can do on the front end Ui for the chainlink node you can do through the command line and we'll get to the UI in a second. So from here we'll want to do Chainlink admin login. So this is the email and password that you created when you were first setting up your chainlink node.
00:05:12.486 - 00:05:14.420, Speaker A: So you'll want to put that in.
00:05:17.990 - 00:05:18.980, Speaker B: And then.
00:05:22.070 - 00:06:26.280, Speaker A: Did I type that right? So the next command you can run is Chainlink initiators and then create. So following this line right here, we'll use chainlink initiators create and then the name of our initiator and then the URL. In this case this would actually look more like this, but I already have this created, so instead of showing that exact one, I'm just going to call it demo. And not fill in the URL. But if you're actually planning to connect it, make sure you write it the same way I did just now and not this way. So when you press enter, you'll see a set of keys, and then these keys and tokens are in the same exact order as this. So you can just copy this one in and put it here, and then the next one put it in here.
00:06:26.280 - 00:07:10.790, Speaker A: Once that's all set up, you can go to your external initiative, which I have right here. Make sure everything is built so it's written in. Go make sure everything is compiled and compiled and built. And then you can run it synchronizes with your post base and then it should show that it's being served at port 8080. Yes, right there. So now that that's running, let's take a look at our last two components. So like I said, we already have the chainlink node running.
00:07:10.790 - 00:07:44.238, Speaker A: We're using an endpoint for the conflux network and then the Twilio API is already running. And then we also have our external initiator that I just started up. So now we need our external adapters. So in this case there's two of them. One to communicate with Conflux network to send information back to the blockchain, and then one for the SMS communication. So for the Conflux network external adapter you'll need a private key since we're sending transactions. And then this is stored in an environment file as well.
00:07:44.238 - 00:08:24.590, Speaker A: And then for the SMS adapter you'll have your Twilio account ID and then your authentication token. And then also I just use phone numbers in the environment file just for privacy sake. And then once that's all set up you can start them up. So, so this one is the conflicts network adapter. If you see on my left side right here, you'll see a env file in there. That's the environment file that I was just talking about. And then there's the same thing for SMS.
00:08:24.590 - 00:09:34.626, Speaker A: So right now I'm using an Exprs server as my external adapter. You can use other serverless functions or cloud based capabilities, whatever you want, as long as it's able to facilitate calls coming in and then calls going out. So in this case, like I said, I have my private key and it's also served on port 5001. All of this other stuff is for setting up the complex network instance. So I'm connecting to the network and then setting my account and then contract instance I'm going to interact with at the specific address and also using the ABI for the interface. And then there's some data parsing right here and then this sends off the transaction to the network and then once the transaction comes back it's successful or 200 response to the chain node, the chain link node it in to this adapter and then this adapter network and.
00:09:34.648 - 00:09:39.190, Speaker B: Return for this one.
00:09:39.340 - 00:10:51.114, Speaker A: So again using the diagram for different pieces that I want to keep private and then starting at port 5000 and then for this endpoint we're going to be bringing in the information from conflux network that's facilitated through the external initiator in Jamaic node. And then we'll be sending out an SMS message. So again setting up the const network instance, we're using that instance to decode our event that comes in. So we can decode it that way and then basically take that, use the commands from Twilio and send that off. And then we'll again respond 200 to our chain link node to make sure to tell it was successful. So the other part of this external adapter is the check. So check is the endpoint where the chain link node can constantly query to be able to see if there has been any new messages that have arrived at the SMS gateway.
00:10:51.114 - 00:11:14.340, Speaker A: So this is just the data object and then using this and then proceed to return the data to the chainlink node and then it'll go on to the conflux adapter which will then send a transaction if there's any information. So now that we have that.
00:11:16.390 - 00:11:18.340, Speaker B: Let'S actually just close this.
00:11:19.670 - 00:11:24.360, Speaker A: The next part I'm going to show is the layout that I have.
00:11:26.330 - 00:11:27.400, Speaker B: There we go.
00:11:30.990 - 00:11:44.094, Speaker A: So hopefully this way everyone can see all the different pieces that are happening. So this one is the CFX adapter. So I'm going to also start that.
00:11:44.132 - 00:11:54.386, Speaker B: Up and then I'll start SMS will.
00:11:54.408 - 00:12:27.450, Speaker A: Be running on port, this will be running on port 5000. There we go. So this setup you should see the chain link node right here, the external initiator right here, the CX external adapter and then the SMS external adapter. And I'll be using this terminal here to interact with it. So when something happens you'll see everything actually move through the whole different pieces. So the next part is the setup of all the connections.
00:12:28.910 - 00:12:31.966, Speaker B: So to do that you'll want to.
00:12:31.988 - 00:12:35.214, Speaker A: Go to your local host to access.
00:12:35.332 - 00:12:36.000, Speaker B: The.
00:12:43.090 - 00:12:53.460, Speaker A: Local but for most people it will. So here we'll log in with our usual password and email.
00:12:57.450 - 00:12:57.862, Speaker B: Cool.
00:12:57.916 - 00:13:42.530, Speaker A: So since this is a brand new setup you won't see anything under activity or jobs or runs or anything. So first this is the UI for the chainlink node, kind of how I showed you getting into the docker container and then interacting with it through the command line. This is it with a GUI. So first we're going to set up bridges just like how this one says right here. So we need three bridges. First one is Twilio Bridge, which is what allows sending on chain events to the SMS gateway to be sent out as text messages. So we'll call this Twilio bridge.
00:13:42.530 - 00:13:44.660, Speaker A: So make a new one.
00:13:48.150 - 00:13:49.540, Speaker B: And we'll paste that.
00:13:51.290 - 00:14:17.070, Speaker A: And that's all created. And then the next one is Twilio check. So we'll use this endpoint. So this endpoint is for allowing the chainlink node to check our various messages. And then CFX and transaction is to send a response back to complex network.
00:14:19.250 - 00:14:23.470, Speaker B: As a transaction. So we'll create bridge.
00:14:26.070 - 00:15:01.050, Speaker A: Three bridges. Start with the final connections. So in order to set up the connections, you're going to use something called job specs, which is what Chainlink uses to, or the chainlink node uses to basically know what to do when something happens. So you can kind of read through this where the initiator, so this is what triggers a run. And then we defined it as external. So that'll come from our external initiator. And then we named it cfx earlier.
00:15:01.050 - 00:15:31.080, Speaker A: And then we'll also use Cfx mainnet, which is a command that we used when we started up our external initiator. So let's take a look at that really quick. You'll see external initiator. And then we named our specific endpoint and then our type for the external initiator. So it knows what kind of calls to make. And then our URL and then also our chainlink URL. So the main part that you need to know is this name should match.
00:15:31.080 - 00:16:00.206, Speaker A: So when we go back down, it's going to be looking at a specific address that I have posted right here. And then when something happens, so an event happens, this will trigger this task right here. So this task will take it in and then proceed to send it on to the API and then send it on as a text message. So let's get that started. New job, paste that in, create the.
00:16:00.228 - 00:16:04.370, Speaker B: Job and successfully created.
00:16:05.030 - 00:16:41.600, Speaker A: If we go back and look, you'll see that this is the job spec that was created right here. And then notice how now our external initiator is pulling the endpoint for the conflicts network. So now it's checking and then checking at a specific address. To see if something happens and then it'll trigger a text message. So let's test that out. So I have some pre written scripts that interact with the onchain contract. The onchain contract is really simple.
00:16:41.600 - 00:17:20.490, Speaker A: It's written in solidity and it's also in the GitHub repository so I won't show it. Now since it's pretty simple, there's a couple of commands. One is to emit an event so it'll just send some information and broadcast it. And then there's a public variable so we can take a look at that state. And then there's also a set value function in there so we can change that state when we want to. So let's run node, get info. So this will tell us the current state.
00:17:20.490 - 00:18:04.834, Speaker A: Right now these are the gas prices and gas limits. And then this right here is a call to the smart contract that tells us the current value of the state on chain. So right now it's 20 and then the other information is the epoch number. And then also a getlogs function which is a log of any recent events. So one thing to keep in mind, it's currently 20. So now if we do node emit event, this will broadcast the event and then you should see everything rolling through. First the initiator, then the chain link node and then our SMS external adapter.
00:18:04.834 - 00:18:55.480, Speaker A: So you'll see a trigger happen right here and then there it is. So now all tasks complete for run happened on the jlink node and then that got sent to the external adapter. So if I can show that, you'll see that I just received a text message. So that might be backwards, but you'll see that at the very bottom it's 20 and the first line is the address that it was triggered from. So basically I was able to send a text message that was triggered by an event on chain. So that's one way of the communication. Now for the other way of communication we'll want to set up another job spec.
00:18:55.480 - 00:19:44.038, Speaker A: So this job spec is a cron job. So Cron job means it just runs on a set time and will continue to repeat. So this one says it'll run every 30 seconds and every 30 seconds it'll run Twilio check and CFX send. So Twilio check will check the endpoint for any new messages and then it will send it to the CFX adapter and then the conflux adapter will send a transaction on if there's any information there. So we'll start up a new drop instance when we create it. So now that's successfully created, you can also click on it and you can see all the different runs that are happening. And if we click on runs, you'll see that these just happened.
00:19:44.038 - 00:20:18.514, Speaker A: So this one that just happened is because of that cron job, as you can see. So it went through Cron Twilio and then CFX sent. If you go look here, you'll see that it did not collect any information on the SMS adapter and it sent it to the CFX external adapter. But the CFX adapter didn't do anything because there's no information there. So let's send a response message. So the current value is 20 on the on chain state. So let's make that 100.
00:20:18.514 - 00:21:13.150, Speaker A: So I'm going to send this text message right here. So there we go, it's sent. And then we'll wait a second for the chainlink node to pick it up and it should pop up right here that it collected a new text message. There we go. So we received a text message that said update 100 and that triggered a transaction on the CSX external adapter. So now that got sent to the chain and we can verify that on chain, it actually did change to 100. So if we go node get info, we'll see 100 is our new value on the chain.
00:21:13.150 - 00:21:28.210, Speaker A: So that's a really quick demo of how you can use Chainlink to connect on chain smart contracts to a SMS gateway. So you can basically text and interact with the blockchain network.
