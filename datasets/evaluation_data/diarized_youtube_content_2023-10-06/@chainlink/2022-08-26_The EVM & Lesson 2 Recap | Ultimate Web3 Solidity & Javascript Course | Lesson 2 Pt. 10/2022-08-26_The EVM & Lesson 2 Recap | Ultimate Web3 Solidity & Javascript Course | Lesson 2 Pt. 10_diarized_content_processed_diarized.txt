00:00:10.970 - 00:01:02.734, Speaker A: Now, I mentioned this term before, but all this code that we wrote, when we hit this compile button, it compiles it down to the EVM or the Ethereum virtual machine. Don't worry too much about what this means. The EV is a standard of how to deploy smart contracts to Ethereum like blockchains and any blockchain that implements a type of EVM you can deploy solidity code to. Some examples of EVM compatible blockchains are going to be avalanche, phantom, and polygon. Since these are EVM compatible, this means we can write our solidity code and deploy to these blockchains, which again, I'll show you later on, how to add these new networks into your metamask and then how to deploy them. Let's do a quick recap of our first smart contract, and then you should absolutely take a break. Maybe get some ice cream or a coffee, because you absolutely deserve it.
00:01:02.734 - 00:01:41.430, Speaker A: Congratulations. The first thing you always need to do in your smart contracts is tell solidity what version of solidity that you're going to be using, and additionally you want to add an SPDX license identifier. Then you have to create your contract object and name your contract. A contract in solidity is similar to a class in other programming languages, and everything inside the squiggly brackets is a part of that contract. There are many different types in solidity, like unsigned integer, 256 Boolean string bytes, 32, et cetera. If we want to create a new type, we can create what's called a struct in solidity. You can create arrays or lists in solidity.
00:01:41.430 - 00:02:16.706, Speaker A: You can create dictionaries or what's called mappings in solidity, or hash tables, which when you give it a key, it'll spit out the value that that key represents. We can create functions in solidity that modify the state of the blockchain. We can also create functions in solidity that don't modify the state of the blockchain. View and pure functions don't modify the state of a blockchain. We also can specify different data locations in our functions. Call data and memory mean that that data is only temporary and will only exist for the duration of the function. Storage variables are permanent and stay there forever.
00:02:16.706 - 00:02:43.770, Speaker A: Function parameters can't be storage variables because they're only going to exist for the duration of the function. All the solidity code that we work with when we hit compile, it actually compiles down to this Ethereum virtual machine specification months. We'll learn more about those specifications later. And last but not least, another huge congratulations on your first contract. Here's.
