00:00:09.690 - 00:00:56.378, Speaker A: Now let's clean this up a little bit because if we look up here we have both our connection to the blockchain and our private key stored directly in our code. If we were to push this code up to a GitHub or some other code repository, people would be able to see our code. If we look in deploy js of my code, there's something else in here. We don't actually see the private key or the RPCrl in here. So what's going on? Remember, if you give out your private key, whoever has your private key owns your funds. So even though this is a fake private key that doesn't have any real money in it, we still don't want to have to hard code our private keys into our code just in case we accidentally share code with somebody. So what can we do? Well, one of the most popular methods is actually creating something called a env file or an environment variable.
00:00:56.378 - 00:01:31.062, Speaker A: And if you're familiar with environment variables you can actually set them right in your terminal. But we're going to set them in our env. So what you want to do is you're going to want to create a env file and this is going to be a file where you store sensitive information and this is going to be a file. We're never going to share this with anybody. This env file will stick variables of our choosing into the environment of our code. So for example, if I pull up my terminal here and I do echo cat, this is going to reflect what the cat environment variable is for us. Right now there is no cat environment variable.
00:01:31.062 - 00:02:15.110, Speaker A: However, if I do export cat equals dog and now I do echo dollar sign cat, I get dog output. This is what an environment variable is. It's a variable in our terminal or in our scripting environment. Since I don't want to have to type export private key equals blah blah blah every time, what we're going to do instead is we're going to stick them into this env file. So in this env we can put private key equals and we can grab this private key from our script and paste it in like this. And a note. Some tools look for the zero x at the beginning of the private key ethers and hardhat is smart enough that either one works.
00:02:15.110 - 00:02:56.062, Speaker A: But if you run into some issues, just know that sometimes you might have to put your zero x at the front of this. Great, so now we have a private key in an environment variable. What do we do now? Well, in our deploy JS we want to grab this environment variable and stick it into our script here so that our script can then stick it into our environment. So we're going to add a tool called env to make this easier. So we're going to do yarn add env. And if we look at the env package, can read more about it, we can read about how to add it with NPM. Again, we're just using yarn add, but then we can just call this require env config and this will pull in all our environment variables.
00:02:56.062 - 00:03:29.038, Speaker A: So we can just do require env config. We should see this on our package json we do. Excellent. Now that we've pulled it in, we actually get access to our private key environment variable. You can access environment variables in JavaScript by using process emv. So instead of putting our private key here, we're going to delete that whole thing and substitute it with process emv private key. And we'll save and it'll reformat for us to make sure this is actually working.
00:03:29.038 - 00:04:06.026, Speaker A: We can just hit up after we save up a bunch and go back to node deploy js and we see we get the exact same setup. And if we scroll back we can see a transaction has indeed gone through. If you want to double check that this is actually printing out your private key, we could do console log process env private key rerun. We see that that is indeed the private key coming from our environment variable here. Awesome. Now our RPC URL here isn't really something that we need to secure. However, maybe we're going to use a certain API key or maybe a certain endpoint that only we want to have access to.
00:04:06.026 - 00:04:51.242, Speaker A: And we don't want anybody else to be using our RPC endpoint. So we're going to add this to our env file as well. So in our env I'm going to copy this here, I'm going to say RpC URL equals going to paste that in there just like that. And we're going to delete here and we're going to do the exact same thing, say process env rpc URL. And now we're going to run this again and I'm going to take out that console log and we should get the exact same response because all we did was swap out our RPCRl with our environment variable, which is going to be exactly what it was before. So we go ahead and run this and we get the exact same response. And if we go to ganache, we see that we do indeed get a transaction here, which is perfect.
00:04:51.242 - 00:06:06.170, Speaker A: Awesome. So we've learned how to add environment variables to our env file, so that just in case we want to share our code or we push our code up to GitHub, which we'll do in later sections, we don't accidentally expose our private keys or our RpC URLs. Now all the code that we have in our project here, if we push it up to GitHub or share it with somebody else, all this code will get pushed up, including our env file. However, if you look at my code samples here for this course, we don't see a env file in here, so how is that possible? Well, what we want to do whenever we have a project is create a git ignore file, and in here we want to put env and we also want to put in node modules. This means that when working with git and working with version control, which we're going to do a little bit later, we won't push our env file up to GitHub and we also won't push up node modules. So if we go back to my example here, we don't see, we don't see a env file, but we do see a env example, just to show you what one would look like. So it doesn't really matter that I have them in here's.
