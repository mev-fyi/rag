00:00:00.170 - 00:00:36.434, Speaker A: Hi, I'm Richard, one of the developer advocates here at Chainlink Labs. And in this tutorial we'll be taking a look at how to use Chainlink automation with a custom automation trigger to automate our smart contract. Custom automation triggers enable you to have logic within your smart contract to determine whether or not the automation needs to run. What does that look like? Let's take a look here. You can see the basic smart contract from our documentation. It imports a chain link contract and we set up our contract called counter. The first thing that this contract does is it creates a un that's public named counter.
00:00:36.434 - 00:01:10.798, Speaker A: That's what we'll keep track of how many times this automation has run. We also set up a couple of variables called Interval and last timestamp. We'll see how those are used when we look at check upkeep here in a moment, but they're basically used to keep track of when this automation ran last and how often it should run. Our constructor takes in an update interval. That will be the number of seconds between when we want this automation to run. We set the update interval variable to that value that was passed in interval, and then we update the last timestamp to be the current block timestamp and we set our counter to zero. Next we have a function called checkupkeep.
00:01:10.798 - 00:01:49.262, Speaker A: Checkupkeep basically returns a boolean for us. It can also return some check data, but we're not using that in this example. That check data could be passed to the form upkeep function if we needed to pass information between the two functions. This function just checks one thing only, and that is if the current block timestamp minus the last time that this automation ran is greater than the interval that we want to run it at. If it is, it's going to return true, and when checkupkeep returns true, that's when the automation network will run the perform upkeep function. Check upkeep runs and it returns true. The next thing that happens is perform upkeep will run, which in this case sets counter equal to counter plus one.
00:01:49.262 - 00:02:14.482, Speaker A: It just increments it one and that's it. That's all there is to this contract. So let's go ahead and deploy this contract. We'll make sure that our environment is our injected provider, and when we deploy we need to provide it with an update interval. That's going to be those seconds between updates. We'll go ahead and say something like 30, we'll click deploy and then we'll confirm this transaction. Our contract has been deployed.
00:02:14.482 - 00:02:41.294, Speaker A: Before we do anything else, let's go ahead and take a look. We've got some functions that we can run here. What we're really concerned about is counter. You notice counter is currently set to zero, right? Because we've initialized it and that's all we've done. So that is what we'll be updating when our automation runs. We'll go ahead and copy the address of this contract here and we'll head on over to automation chain link and we'll click register new upkeep. We'll select custom logic, click next.
00:02:41.294 - 00:03:18.502, Speaker A: We'll provide the address of our contract and you'll notice it says it's unable to verify it. That's because we haven't verified it on etherscan or something like that. So it doesn't know for sure that this is an automation compatible contract and kind of continue at your own risk. But we know that it is compatible so we'll click next, we'll give it a name, we'll call it custom and a starting link balance. We can use two for this example and we'll register our upkeep now we'll need to confirm this transaction and our transaction has completed. We can go to view upkeep and see our upkeep here. And if we look we can see our history that we funded our upkeep within 30 seconds.
00:03:18.502 - 00:03:48.934, Speaker A: When the next block is checked, we should see our upkeep trigger. Give the page a refresh, you can see perform upkeep has happened now so that time has elapsed. If we back to our contract and check out our counter again, we'll see now that it has changed to one. So that's it. This is a custom logic automation using Chainlink automation to do that. What's really powerful about this is using that custom logic within checkupkeep. Any logic that you need for your application to automate itself can be checked there.
00:03:48.934 - 00:04:00.920, Speaker A: It can be information that's on chain or off chain and that really opens up an entire world of possibilities for how you can automate your smart contracts. So thanks for watching this video and I'll catch you in the next one.
