00:00:11.610 - 00:00:53.094, Speaker A: So now we have our simplest sole compiled. Let's learn how we can actually deploy this thing. Remember in remix we actually deployed it to one of two different places. We deployed it to either a JavaScript VM or with our injected web3 with our metamask. Let's learn first how to do the JavaScript VM, and then we'll learn how to use the injected web3 or a metamask or some connection to an actual testnet. So in order to deploy this to a JavaScript virtual environment or kind of a fake blockchain, we're going to need to get a fake blockchain. Now in the future we're going to be using the hard hat runtime environment as our JavaScript virtual machine or aka our fake blockchain.
00:00:53.094 - 00:01:19.894, Speaker A: But for this section I want us to use a tool called Ganache. There's a link to this in the GitHub repository. Ganache is similar to a virtual machine in remix. It's a fake blockchain that we can run locally to actually test, deploy and run code. It's also a nice way to see things that are going on in a blockchain. Let's go ahead and spin up the ganache application. After you install it, the ganache application will look a little something like this.
00:01:19.894 - 00:01:55.950, Speaker A: And to spin up a fake blockchain really quickly you can just go ahead and click quick start. This will spin up a fake blockchain that's running locally on your computer right here, which is fantastic. It comes with a whole bunch of fake accounts. Exactly like how remix comes with a ton of fake accounts with 100 ether each. Ganache comes with a bunch of fake accounts with 100 ether each. They also come with the private keys that we can use in our applications to actually take control of these fake accounts. Remember, don't use these private keys on a public blockchain, they're for development purposes only.
00:01:55.950 - 00:02:41.038, Speaker A: Because a lot of people know these private keys in our code. One of the first things that we're going to need to do is actually connect to our blockchain remix does this a little bit behind the scenes. If we're choosing JavaScript virtual machine Remix chooses its own fake blockchain that it runs. If we choose injected web3, as we know, metamask pops up and it connects to our metamask. This connection that remix does is actually doing something really interesting. It's not just connecting to our metamask by some magical powers, it's actually connecting to our metamask which has a connection to the blockchain. Behind the scenes, if you open up your metamask and you go down to, you select the networks and you select add networks, you'll get popped up into a UI that looks like this.
00:02:41.038 - 00:03:23.882, Speaker A: If we go back and hit select networks over here, we can actually see information about these different networks. One of the main things that we can see is that all these networks have something called an RPC URL. RPC stands for remote procedure call and then URL is uniform resource locator. This RPC URL stands for a connection to a blockchain node that somebody is running. This URL connects us to make API calls and to interact with a blockchain node. Blockchain nodes run with software and some of them expose an API call. If you look at the Go Ethereum website, there actually are instructions for you to run your own blockchain node.
00:03:23.882 - 00:04:09.274, Speaker A: For a real blockchain like Ethereum, most of these have flags like HTTP ADR to expose these RPC endpoints. So if you ever want to run your own node, your own real blockchain node, instead of using metamasks or any other, the providers that we're going to go through, you can use Goetheoreum or whatever blockchain you're working with software to run your own nodes. But it's this RPCRL that allows us to connect to rinkby if we're on rinkby. Robson if we're on Robson, Mainnet if we're on Mainnet, et cetera. And it's going to be the way that we're going to connect to our Ganache blockchain that we're running inside of this application. So if you look at the top of your ganache here, there's section called the RPC server. And this is the endpoint of our Ganache node right now.
00:04:09.274 - 00:04:49.858, Speaker A: So what we can do is we can copy this and go back to our vs code and paste it in here to see if we can connect. Instead of HTTP with these capitals, we're going to have it be lowercase instead of the uppercase because the lowercase is more correct and it looks nicer. But now that we have the endpoint, hypothetically, with just this, we can start making calls and API calls to this endpoint. You go to this JSON RPC specification again, link will be in the GitHub repo. We can actually see different calls we can make directly to our node to get different information. ETH get blocked by hash, ETh get blocked by number. And all of these wonderful pieces in here making these API calls directly is a little bit annoying to do ourselves.
00:04:49.858 - 00:05:05.820, Speaker A: If you want to do it yourself, you absolutely can using an API endpoint like axios or fetch. However, we're going to use a wrapper to interact with our node and do things like deploy and interact act and other such things with our blockchain node. This is finally where ethers comes into play.
