00:00:09.050 - 00:00:51.942, Speaker A: Now, other than the typescript portion, which I'll do at the end, you've successfully completed this section, and wow, you've learned a ton. Let's do a quick review of everything that we've learned. Well, first, we've learned how to create new projects with node js. We've learned what the node keyword does, and how we can use the node keyword to run JavaScript in our local development environment. We learned that we can add different dependencies of external packages into our local package using yarn or NPM, and we can see those dependencies added in package JSON. We know that they've been installed because they get installed into the node modules folder. We can also create a script section where we can minimize long commands that we need to run into a single keyword, like compile.
00:00:51.942 - 00:01:39.354, Speaker A: For example. We can just run yarn compile to compile all of our code. We learned the basic setup of our JavaScript scripts. We import our packages at the top, we have some main executor function at the bottom, and then we have our main function in the middle. We use the async keyword so that our function can use asynchronous programming, and we get access to the await keyword, which basically means hey, wait for this promise to finish doing its thing. We're able to connect to any blockchain we want using an RPC URL, and then we're able to connect our provider to a wallet or a private key in ethers by doing something like this. Speaking of which, we've learned about the ethers package, which is a tool that makes our life a lot easier to interact with the blockchain in JavaScript if we decide to.
00:01:39.354 - 00:02:27.910, Speaker A: We've also learned we can encrypt our private keys so that even if our computers get hacked, our private keys aren't lying around in plain text. And we've learned how to run scripts from our encrypted keys. We've learned how to get the ABI or the application binary interface and the binary of our code to deploy to a blockchain. We've learned how to deploy our contracts to a blockchain programmatically, and then we've learned how to interact with our contracts programmatically as well. Additionally, we've learned how to add a default editor in our settings JSon of our vs code, but we've also learned how to override those settings by adding prettier using a prettier rc file. This way we can auto format our code to make it look a lot nicer and much easier to read. Finally, we learned how to deploy one of these contracts to a real testnet or a real network.
00:02:27.910 - 00:02:56.100, Speaker A: And then we finally learned the manual way to verify our contract source code. Like I said, we're going to learn a lot of shortcuts and a lot of ways to make this all a little bit easier in coming sections. You have done phenomenally to reach this section. Give yourself a pat on the back, take a break, go for a lap, and feel really proud about yourself that you made it this far. We've got a lot more to go, but you have come a phenomenally long way. Congratulations. Go take that five to ten minute break and come back when you're ready.
00:02:56.100 - 00:03:42.350, Speaker A: Now, the one thing left I want to show you all is the typescript edition of this. However, if you're not interested in the typescript edition, which you don't have to be, then you're done. There's only a couple of changes we need to make to make this typescript compatible. First, of course, we're going to change our deploy TS and encrypt key. We're going to change our deploy and our encrypt key from JS to TS. And then we're also going to swap these requires out for imports. So we're going to import ethers from ethers, we're going to import star as fs from FS extra and then we're going to import slash config.
00:03:42.350 - 00:04:21.226, Speaker A: And then we're just going to copy these and we're going to come over and paste them into here, deleting or commenting out the requires. Okay, great. Now if we try to run node deploy TS, we're going to get cannot use import statement outside of a module in JavaScript. If we'd want to use an import statement outside of a module, we'd come in here and do something like type module like that. But in typescript we actually don't even need that. All we need to do is run this in typescript node. So to add typescript we're going to do yarn add typescript, and we're also going to add ts node.
00:04:21.226 - 00:04:53.610, Speaker A: Tsnode is the typescript edition of node. So now that we've added that we can try Tsnode deploy ts and we're still going to run into an error. And if you scroll up we're going to get a couple of errors here. We're going to say, could not find a declaration file for module fs extra. We need to add the typescript version of that. So we're going to do yarn add at types fsxtra like that, and if we run it again, it still shouldn't work, but for a different reason. Yes, we're going to get something like this.
00:04:53.610 - 00:05:28.258, Speaker A: Type undefined is not assignable to type byteslike. The reason we get this is because process env private key in typescript technically is type string or undefined. So we need to tell typescript and the wallet objects and the encrypt function is looking for type string, not string or undefined. So we just need to tell typescript that this will not be undefined. So we can just put a bang here and everywhere that we use process env. Whoops, I got to do that on deploy as well. Bang bang looks good.
00:05:28.258 - 00:06:05.134, Speaker A: Now that we've added everything in here. If we run tsnode deploy ts, we're going to see the exact same output as we saw with just using regular node. And as long as our private key password is in our env file, if we run tsnodeencryptkey ts, we're going to get the exact same fit setup as before, and we're going to get a new encrypted key JSon. And that's all you need to do to make this type script compatible. And you should give yourself a huge round of applause for getting this far and learning what's going on underneath hardhat, the next tool that we're going to learn and learning all about these transactions and how to interact with these blockchains. This is absolutely massive. So huge.
00:06:05.134 - 00:06:05.610, Speaker A: Congratulations.
