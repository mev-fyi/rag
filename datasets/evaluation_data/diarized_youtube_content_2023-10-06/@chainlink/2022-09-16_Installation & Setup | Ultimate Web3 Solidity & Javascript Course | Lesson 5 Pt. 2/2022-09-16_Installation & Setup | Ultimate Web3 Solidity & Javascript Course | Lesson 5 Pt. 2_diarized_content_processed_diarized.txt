00:00:12.090 - 00:00:50.070, Speaker A: Awesome. So now that we know more about how to get unblocked, we can move on. The reason it's so important to learn how to get unblocked is because blockchain and web three is more than just everybody on their own. It is a very collaborative space. So as you get better and as you learn more, a massive way to test how much you've learned and give back to the community is to going to stack overflow and going to stack exchange, Ethereum and trying to answer some questions yourself. So I highly recommend you all go to stack overflow and then you go to the GitHub repo associated with this course. You try to answer some discussions, try to answer some issues and help other people out, because it's going to help you become a much better software engineer.
00:00:50.070 - 00:01:34.150, Speaker A: The other reason I wanted to do that part is because when we install some of the tools that I'm about to show you, sometimes the installation process is the hardest piece there. Once you get past the install process, it generally becomes much much easier. But this can often be the hardest part of the course is just installing some of these tools that we're going to give you and that's what we're going to learn about right now. So we have been working so far with remix, remix, IDE or integrated development environment. As we've seen, it's this wonderful place where we can try out code, we can try solidity out, we can compile, we can deploy, we can pretty much do everything that we need to do. It's web based, it can do testing, debugging, deploying local Javascript, VM. It's very quick and easy to create and test our smart contracts.
00:01:34.150 - 00:02:16.470, Speaker A: However, it does have some limitations. It can really only deal with smart contracts, it can't really integrate with other parts of projects, it has limited support for test or custom deployments, and you need an Internet connection to even work with remix. And it can be tricky to do a lot more advanced functionality. So it's a phenomenal tool and absolutely, if you're looking to do something very quickly, I absolutely recommend everybody just go to remix to go ahead and try something out. However, now we're going to move over to a more professional smart contract developer setup, and this is with Hardhat. This is known as a smart contract developer framework, similar to Brownie or Foundry and the likes. There's a number of these frameworks and the reason that we're going to do hard hat is because Hardhat is JavaScript based.
00:02:16.470 - 00:02:45.562, Speaker A: It's a JavaScript based development environment. It's got JavaScript based compilation environment deploying, testing, debugging. Now, for those of you who love typescript, we will also have typescript editions of every single one of our code examples for you. So if you love JavaScript, we got you. If you love typescript, we also got you. We're not always going to walk through us doing the typescript, but we will sometimes. And all of the code for the typescript will be available in the GitHub repo.
00:02:45.562 - 00:03:21.098, Speaker A: Now, before we can actually learn Hardhat, we have to learn another package first. So we're going to learn how to do everything with ethersjs, which is a JavaScript based library for working with smart contracts. And it's also what powers the next tool that we're going to be working with, which is Hardhat. Under the hood of Hardhat there's a lot of ethersjs. So it's important for us to learn ethersjs so that we can understand what Hardhat is actually doing. Now, for the rest of the course, I'm going to be using a code editor called visual Studio code. This is one of the most powerful code editors on the planet, and if you've already got it set up, feel free to go ahead and skip this part.
00:03:21.098 - 00:04:14.462, Speaker A: If you already have a professional coding setup with node js and vs code and git and everything, feel free to use the timestamps in the GitHub repository to skip over this setup section. You'll often hear people refer to this as VS code or visual studio code, or just visual studio. However, it's important to note that visual studio code, this is different than visual studio, which you might see look like this. So visual studio code is what you want, not visual studio. Visual Studio is a different application. Make sure you're on visual studio code now if you choose so, and you're a total hardo, you can absolutely work just with your terminal or just with Powershell or just with whatever coding environment that you want, like Atom or sublime. However, for us, we're going to be working with visual studio code, and I'm going to be going through setting up visual studio code the way that I like to set it up.
00:04:14.462 - 00:04:47.730, Speaker A: You can absolutely set it up whatever way that you feel comfortable. And of course, in our lesson six here, we have a link to installation and setup, and I'm going to be adding more links as we go about here. And once again, all the code that we're going to be working with is in this GitHub repository down here where it says code. Now we're going to go through three different installation processes and pick the one that's most appropriate for you. The first one is going to be for Mac and Linux users. The second one is going to be for Windows users. And then our third one is going to be a last ditch effort.
00:04:47.730 - 00:05:35.030, Speaker A: If for whatever reason you can't get Windows or Linux or the Mac instructions to work, we're going to use a Gitpod installation. Now I highly, highly recommend that you try to get everything working locally without using Gitpod. However, if for whatever reason you can't get those installation pieces to work, we will have Gitpod instructions for all of the repos that we work with here. But to get started, we'll start with the Mac and Linux installation instructions. The first thing you're going to want to do is download the Mac or if you're working with Linux, download the Linux installation of Visual Studio code. Once you have it installed, it'll look a little something like this. And if it's a fresh installation, it'll even give you some tips and tools to actually get started.
00:05:35.030 - 00:06:13.138, Speaker A: If you've never worked with Visual Studio code before, I highly recommend going through any get started or getting instructions tips that come with opening visual studio code. Additionally, we have a visual studio code crash course in the GitHub repo associated with this course. Once you have visual studio code installed, the next thing that we're going to want to install is going to be node JS. And again, we have links to all of these in the GitHub repo associated with this course. You can just go ahead and click download for macOS or download for Linux. I recommend using the LTS version. LTS stands for long term support, which means that they will be supporting this version for a long time.
00:06:13.138 - 00:06:41.062, Speaker A: So go ahead and download node js. I've already downloaded this, so I'm not going to go ahead and redownload this now. One of the awesome things about visual studio code is it has this thing called terminals, which are command line prompts that allow us to run scripts. Basically it's where we're gonna be running all of our code. The way we can open up the terminal is we can go ahead and hit terminal and select new terminal. It'll get something like this. Now you might have bash or ZCh or some other type of shell.
00:06:41.062 - 00:07:31.542, Speaker A: The type that you have doesn't really matter because on Mac and Linux it's going to be Linux based. We can now test our node JS installation has been done correctly by running node version and you should see something that looks like this. The exact version of node that you have doesn't really matter here, but ideally you're at least on node version 14 or higher. And if something like this doesn't show up, remember to go ahead and start looking on stack overflow, looking on the GitHub repo in the discussions tab, looking on the updated section, et cetera. And like I said, sometimes installing this can be the hardest part of this entire course, so don't get discouraged. And please use stack overflow, stack exchange, Ethereum, and the GitHub repo to move past any issues you run into. Now if you're on Mac or Linux, you can actually hit Ctrl back tick to actually toggle your terminal mode.
00:07:31.542 - 00:08:06.130, Speaker A: This will pull the terminal up and down for you. Getting familiar with keyboard shortcuts will actually make your life a lot easier because you'll be able to move around visual studio code much more effectively. We have a link to a list of keyboard shortcuts additionally, in the GitHub repository associated with this section. As we move along, I'll give tips on different keyboard shortcuts that you can optionally use. Otherwise, you can just go ahead and click as well. You can click the trash can to delete the terminal, go back up terminal, new terminal to pop it back up. Now the next thing that we're going to need a little bit later, we're not going to need it for this section, but it's good to install it now, is going to be git.
00:08:06.130 - 00:08:43.682, Speaker A: Node JS is known as a JavaScript runtime, and it's a tool that we're going to use to help run JavaScript code in our visual studio code. It's not exactly javascript, and the difference between node JS and JavaScript can be a little bit confusing, but don't let that stop you for now. Next, we're actually gonna go ahead and install git. We will have links to the installation instructions in the GitHub repository. Installing git on Linux you're going to use one of these two commands, and on macOS, if you just type git on the command line, it should go ahead and prompt you to install it. So if we're back in our command line and we just type git, it should prompt you to go ahead and install it. And if you do git version, you should get something that looks like this.
00:08:43.682 - 00:09:17.120, Speaker A: You can also use a macOS git installer by clicking this link here and running through the installation process. All right, now that you have node JS git and visual studio code installed, we can continue on to the next section. Awesome. If you're not planning on using Windows or git pod, feel free to skip the next two sections. I'm running this on Windows eleven. However, it should work on most editions of Windows. So the first thing that we're going to want to stall is visual studio code, which looks something like this.
00:09:17.120 - 00:09:56.614, Speaker A: It should auto detect it and we're going to go ahead and download this for Windows. We're going to walk through all the installation process, go ahead and create a desktop item. We'll add this just in case we want to open with code and we'll go ahead and install and then we'll go ahead and finish. Once you've installed visual studio code, you'll see something that looks a little like this. It'll go ahead and give you this get started with vs code section where you can choose some themes and you can choose kind of the way it looks. Feel free to customize it the way that you want. If you want to learn a little bit more about visual studio code, I highly recommend you walk through this section to learn more about the shortcuts and making your development experience more efficient.
00:09:56.614 - 00:10:18.494, Speaker A: When you're done, you can just go ahead and close the tabs at the top and it'll look a little something like this. Once we have visual studio code installed, the next thing that we're going to want to install is node JS. And of course we have a link to installing this in the GitHub repository associated with this course. What we're gonna do is we're gonna go ahead and come to node js.org to download this. For Windows. Node JS is a JavaScript runtime environment.
00:10:18.494 - 00:10:54.730, Speaker A: It's not exactly JavaScript and the distinction can be a little bit confusing. But just know it's going to help us run our Javascript code for our development environment. Let's go ahead and download the lts or the long term support edition of Node Js. We'll go ahead and we'll run through the setup wizard and we'll go ahead and make sure that this is clicked just in case we ever want to use some different tools with our setup. And then we'll go ahead and click install. You'll get a pop up asking if you really want to install this on your device and we'll go ahead and hit yes, and then we'll hit finish. You might get a pop up that looks like this.
00:10:54.730 - 00:11:25.654, Speaker A: Go ahead and click any button to go ahead and install the tools. Go ahead and press any key again and you'll likely get a Windows Powershell screen pop up asking you to go ahead and install a whole bunch of different projects and files. If you chose not to install this, that's totally okay. But in the future this will be really helpful since we are going to use a lot of tools that this package installs anyways, this might take some time to install, so go ahead and be patient. And if it gets stuck, it might just be waiting for you to go ahead and hit enter. So go ahead and hit enter for any prompts. But yes, please be patient with this.
00:11:25.654 - 00:11:56.958, Speaker A: It can be a little bit slow to go ahead and install everything. Once you have all that installed, you can come back to your visual studio code and we're going to go ahead and open up a terminal. To do that we hit terminal and we hit new terminal. A terminal is going to be our command line prompt where we're going to basically run all of our scripts to work with our code. And if you run node version, you should see something that looks like this to know that you've installed node js correctly. Now this command line is known as Windows Powershell. If you want to work with Windows Powershell, you absolutely can.
00:11:56.958 - 00:12:47.770, Speaker A: And in fact, if you want to be a total hardo and write all your code through Windows Powershell, you can absolutely do that as well. However, we're actually not going to be working with Powershell. We're going to be using a tool that makes our Windows environments more like Linux. The reason that we're doing this is Linux is the standard for most development environments, and having everybody work on a very similar setup will make the rest of this course a lot easier for everyone to interact with each other, no matter what coding environment they're working on. WSL stands for Windows subsystem for Linux, and it allows Linux programs to run natively on our Windows environments. To get this set up, we're going to go ahead and go to the WSL install and we'll have a link for this as well in our GitHub repository. So what we're going to do, you must be running a Windows ten version 2004 or higher, or Windows eleven.
00:12:47.770 - 00:13:48.050, Speaker A: If you're using an older version of Windows, you can absolutely continue with Powershell, but you might run into some issues where all the commands don't work exactly the same. So I highly recommend working on a newer version of Windows to install this back in your visual studio code Powershell, or just the PowerShell app by running WSL install. Now if you get this error. The requested operation requires elevation. It means that we have to run our visual studio code or our Powershell application as administrator. If we close out our visual studio code and right click it and say run as administrator, we get a little pop up saying do you want to allow this app to make changes to your device? We'll go ahead and click yes and then we'll reopen the terminal and then we can run WSL space install and we'll go ahead and install WSL. This may take a little bit, so please be patient.
00:13:48.050 - 00:14:19.690, Speaker A: Once it's completed you'll see something that looks like this. We're going to be working with Ubuntu and we have a list of different commands to change your Linux distribution. If you choose to do so, and you'll see the requested operation is successful. Changes will not be effective until the system is rebooted, so you'll want to go ahead and restart your computer. There's also a troubleshooting guide in the GitHub repository. If you run into issues after you restart your computer, you'll be prompted for a name for your new system and a password. This can be different from your Windows name and password and then just follow through with all the prompts.
00:14:19.690 - 00:15:02.300, Speaker A: And then once you're done you'll be dropped into a Ubuntu shell and you can run Linux commands. And now you'll have a Ubuntu instance on your machine and you'll be able to run Linux commands in your terminal. Now that we have WSL set up correctly, we're going to go ahead back over to visual studio code. Once we have WSL, we'll want to go ahead and install an extension. So in our visual studio code we'll go to extensions and we'll look up remote development. You can install the whole thing or just remote WSL, we're going to install the whole thing. You can follow along the get started with remote Wsl if you like, or you can just follow along with me right now.
00:15:02.300 - 00:15:40.534, Speaker A: Right now if I go to the terminal and hit new terminal, I'm still going to get Powershell. We actually want this to be our Linux shell. So there are a couple ways to open visual studio code up in our Linux environment. One way is you can hit ctrl, shift p and type Wsl and then click remote Wsl new WSl window and you'll get a new window that looks like this. You can also click the bottom left and choose new Wsl window. Now if we go to our terminal and hit new terminal, we'll be dropped into a bash shell and we can run Linux commands in here. Awesome.
00:15:40.534 - 00:16:34.422, Speaker A: Another way we can open up visual studio code with WSl on is we can go into our ubuntu application. We can make a folder by typing Mkdir folder, we'll CD or change directory into folder and type code, period. We'll go ahead and trust the authors in here and this will open up visual studio code already connected to the folder that we're in. And we can create files in this folder like hi txt and those will get created inside the folder in our WSL. Now that we're inside our WSL environment, you'll notice that node version doesn't work anymore. That's because we installed it on our regular Windows machine and not on our WSL or our Linux environment. The reason we installed it on our Windows environment first is so that just in case you wanted to go ahead and use Powershell or use your windows environment to run everything you still can.
00:16:34.422 - 00:17:30.362, Speaker A: But just remember, if you use the Windows environment and Powershell, all the commands that we use might not work for you. So we're going to go ahead and install node js on our Linux environment now all the commands that we're going to write are going to be in the GitHub repo associated with this course. We're going to do a curl command to the NvM repository, which stands for node version manager. And we're going to pipe the install script into bash and this will go ahead and install Nvm. After running that we go ahead and trash the terminal and then reopen it. And then we can type MVM version to see if it actually installed correctly. Once we've installed NVM, we can go ahead and install node js using MVM.
00:17:30.362 - 00:18:03.842, Speaker A: Just type Mvm install and we'll do 16.14.2. This is that same long term support version we installed on our window machine. Once we have it installed we can type in node version and now we have node JS installed. Now I know there was a lot here, but if you made it this far, this is fantastic. You've done a great job to push through to this point and get everything set up so you can code in the best environment there is. So if you've made it this far, huge congratulations. Now the next thing that we're going to install is git.
00:18:03.842 - 00:18:46.750, Speaker A: And now we're not going to use git for this lesson. However, we will definitely be using it in the future. See if git's installed, type git version. Sometimes Linux will automatically come with git installed and you'll see something output like this. If you don't have git, we can just look up the git install, which again link to this is in the description and you'll actually run the installing on Linux now again. Now if you want to use Powershell and you want to do everything with Windows, you can absolutely follow the installing on Windows instructions here. Instead, when you're working in WSL, you'll want to use the Linux commands instead of the Windows commands even though you're on a windows, because WSL makes it so that you're basically running in a Linux environment.
00:18:46.750 - 00:19:25.860, Speaker A: And now if you've made it this far, you should be able to follow along with the Mac and Linux instructions as if you're running on a Mac and a Linux, even though you're running on a windows. Just be sure that whenever you're in your vs code, you take a look at the bottom left and make sure you're on WSL ubuntu like I said before, if you want to run in Powershell or in a Windows environment, you're more than free to do so. But like I said, if you've made it this far, huge congratulations. Awesome work. And then finally, our last setup is going to be using a tool called Gitpod. Starting from lesson five, the lesson that we're on right now, ethersjs simple storage. All of our code repos are going to come with a button.
00:19:25.860 - 00:20:19.614, Speaker A: The repo, if you scroll down they'll come with this open in Gitpod button. Now Gitpod is a cloud development environment where you can actually run your code on a remote server. It's kind of similar to remix Ide, but it allows you to run visual studio code in the browser or connected to another server. This is good, because then you don't have to do any installation on anything, since all the tools that you want to use are just going to be running on this remote server. This has its downsides though, obviously, since you'll only be able to code if Gitpod is up and working for you. Additionally, when it comes to private keys, you absolutely do not want to run any code with a private key that has real money in it on Gitpod. Why? Well, once again, since you're running your scripts on a remote server, those servers have access to your private keys.
00:20:19.614 - 00:20:59.294, Speaker A: But since you've pinky promised that for this course you're not going to be using a metamask or a private key with actual money in it. It should be fine. The other downside is that these often cost money to use, and Gitpod isn't free, but it's an option if you absolutely cannot get any of the installation working. So if you go ahead and you hit this opening Gitpod button, you'll get a welcome to Gitpod showing up. We're going to go ahead and continue with GitHub. Since you've signed up for GitHub here, you'll want to go ahead and authorize Gitpod, and it'll go ahead and start creating this workspace for you. And you'll notice it looks exactly like visual studio code.
00:20:59.294 - 00:21:51.546, Speaker A: Since I opened the repo up in Gitpod, it came with all the code, and you can even open this workspace up in vs code desktop. So this might be a little bit confusing, but basically you can run off of Gitpod using your local visual studio code. And if you see Gitpod here, that's how you know that you're running off of Gitpod. If you see this pop up, do you want to open this workspace in vs code desktop? You can hit open and it'll ask you if you want to open up visual studio code, which I'm going to go ahead and hit. Yes, and you'll get something that looks like this on your visual studio code. It'll tell you that it wants to install the gitpod extension and then open that gitpod URL. So you can go ahead and install it, reload window and open, and it's going to go ahead and start connecting to the gitpod workspace.
00:21:51.546 - 00:23:05.638, Speaker A: And this is going to be the same as running gitpod in the browser here. Or you can also do it manually by hitting the gitpod in the bottom left, and then type in open in vs code, and then you should be able to run it in your visual studio code. For now, I'm going to recommend that if you're using gitpod, just stay in the browser, just so that you know. Okay, I am running this on a remote server, and just as a reminder for you that you're not actually locally developing, and hopefully this will be a trigger to not actually put any special private keys or anything like that. But you can make workspaces, you can make new folders, and you should be able to run all the commands on here as if you were running locally with visual studio code. To open up the terminal, you can hit this little bar in the top left, go to terminal, new terminal, or use control tilde the exact same as macOS and Linux keyboard shortcuts to create a new folder, we can change directory CD Mkdir, new folder Mkdir makes make directory called new folder, and then we're going to change our directory into new folder and hit enter. And now we're in that new folder.
00:23:05.638 - 00:23:21.270, Speaker A: For each section, you can either open up the entire source code right into gitpod, or you can create a new folder for each section yourself and start from blank, and then you would just type code period, and you'd be in a brand new folder.
