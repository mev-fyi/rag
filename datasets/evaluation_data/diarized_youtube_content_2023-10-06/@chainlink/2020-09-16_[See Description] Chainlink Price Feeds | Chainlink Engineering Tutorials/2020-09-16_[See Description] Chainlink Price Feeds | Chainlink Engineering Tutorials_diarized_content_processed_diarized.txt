00:00:00.170 - 00:00:02.410, Speaker A: Chainlink is a framework for easy modularity.
00:00:02.490 - 00:00:05.646, Speaker B: You can build networks with as many nodes and as many data providers as.
00:00:05.668 - 00:01:04.442, Speaker A: You like to keep your projects decentralized. Then you can build external adapters on top of those data providers to add even more functionality and make them even more powerful. As you're starting to see, Chainlink gives you all the tools that you need to work with external data in your smart contracts while keeping them secure, reliable, and decentralized. Now, there's a lot of data out there that a lot people have a common interest in using, and it would be nice if there was a shared decentralized resource so every single person looking to spin up a network doesn't have to redo the work that hundreds of thousands of other people have already done as a community. This massively would cut down on gas costs, and it would allow everyone to get access to the same high quality data APIs instead of having to have a subscription with every single one. This is where Chainlink's most powerful and easiest to use tool for the decentralized community comes into play. Enter price feeds Chainlink price feeds are shared resources for pre boxed decentralized networks.
00:01:04.442 - 00:01:33.590, Speaker A: By having multiple users chip in to pay for each currency pair, gas payments don't need to be duplicated across the system of that currency pair. So as a community, we pull the data to get a reliable, decentralized value for common data points. This way, we can have an economy of scale paradigm where the costs are even less than if you spun up your own centralized oracle. Chainlink price feeds are highly decentralized, secure infrastructures run with only top quality APIs so that you can be assured your smart contract executes correctly.
00:01:33.670 - 00:01:35.434, Speaker B: The open source community powers the price.
00:01:35.472 - 00:01:52.282, Speaker A: Feeds and allows you to clearly and verifiably see all the data. Chainlink price feeds are the data backbone helping secure billions of dollars in Defi. Today, many of the top projects in the defi space are using Chainlink price feeds as their backbone. You can, of course, always spin up your own decentralized network.
00:01:52.346 - 00:01:53.662, Speaker B: Let's look at a visual that shows.
00:01:53.716 - 00:01:54.926, Speaker A: Even more how it works.
00:01:55.028 - 00:02:26.262, Speaker B: This is feeds chain link. It's a UI to show you everything that's happening within the price feed space. We can scroll down and see all the different price feeds for fiat pairs, ETH pairs, and even common assets like gas price. We can see a list of users that are helping sponsor the price feed. If we click on a price feed, we can learn even more about how it's working. Here we can see a ton of the data and metrics that goes into this price feed. This number in the middle is the current value of the aggregation and we can even click on it and see the smart contract in either the Chainlink Explorer or Etherscan.
00:02:26.406 - 00:02:28.186, Speaker A: Surrounding the price feeds are all the.
00:02:28.208 - 00:02:56.580, Speaker B: Independent node operators that are supplying data. You can see what each one is returning for a value and then the median price is calculated in the middle. The nodes are also monitoring the price off chain as well, and if there's a price deviation of over zero 5% it'll trigger a price update. Otherwise, a price update will kick off whenever the heartbeat hits. We need a minimum of eleven oracles to respond with a total of 21 in this price feed. We continue to scroll down and see the different metrics associated with it.
00:02:56.950 - 00:02:59.542, Speaker A: Now let's jump on the code and show you how easy it is.
00:02:59.596 - 00:03:50.614, Speaker B: The Chainlink documentation has all the examples and solidity code that you'll need, including running with JavaScript and Python. All we have to do is import the aggregator interface we're going to create an aggregator interface object called price feed and for this our constructor is going to set the address equal to the LTC USD price on the coven network. You can see the whole list of different price feeds on each one of their networks in the Chainlink documentation. Again, we're grabbing LTC USD on the Coven network. Then our price feed objects will call this get latest round data function. You'll notice it's a view function so you don't even have to make a transaction for this. Let's test it out, compile, inject a web3, deploy coven confirm, and then we call our get latest price function.
00:03:50.614 - 00:03:56.678, Speaker B: Remember, it's multiplied because Ethereum doesn't work with decimals. We can see the price of LTC is $48.
00:03:56.844 - 00:04:00.038, Speaker A: Hopefully by now your creativity is running away with all the things that you.
00:04:00.044 - 00:04:01.526, Speaker B: Can build with price feeds and that.
00:04:01.548 - 00:04:02.774, Speaker A: Have yet to be built.
00:04:02.892 - 00:04:04.866, Speaker B: And while the wheels are turning, let's.
00:04:04.898 - 00:04:06.566, Speaker A: Switch gears to something that maybe you.
00:04:06.588 - 00:04:08.294, Speaker B: Don'T want a shared resource with, like.
00:04:08.332 - 00:04:10.362, Speaker A: Getting a random number in your smartcon contract.
00:04:10.426 - 00:04:12.922, Speaker B: But not just any random number approvally.
00:04:12.986 - 00:04:15.594, Speaker A: Random, battle tested random number that doesn't.
00:04:15.642 - 00:04:17.822, Speaker B: Depend on the Ethereum miners to power.
00:04:17.876 - 00:04:19.854, Speaker A: Things like lottery, gaming and anything else.
00:04:19.892 - 00:04:22.990, Speaker B: Where RNG is needed. We'll learn how to do that in the next video.
00:04:23.060 - 00:04:23.660, Speaker A: I'll see you there.
