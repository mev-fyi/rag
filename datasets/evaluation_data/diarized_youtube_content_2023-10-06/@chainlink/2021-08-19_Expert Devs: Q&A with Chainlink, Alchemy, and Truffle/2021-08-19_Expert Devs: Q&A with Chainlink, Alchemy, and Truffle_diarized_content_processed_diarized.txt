00:00:05.770 - 00:00:27.960, Speaker A: All right, we are back here with all of the speakers from the first block of the day. Thank you all. Again, we've got a bunch of questions from the audience and from across the Internet, so I'm going to just kind of dive in and I'll jump around as feels kind of natural. So, first question up for Elon. You mentioned that alchemy's goal is to help a billion users of blockchain. How many do we have now?
00:00:30.010 - 00:00:44.970, Speaker B: That's a really good question. So I know Ethereum has 160,000,000 active addresses across all other chains. Hard to say. I don't want to be the source of truth here, but I think we're a bit ways away from having a billion.
00:00:46.350 - 00:00:47.100, Speaker C: Okay.
00:00:49.230 - 00:01:05.422, Speaker A: Next up, let's go to Patrick. So there was a question around the new feeds registry where you don't need to look up a proxy address anymore, but there's also ens. So should developers be using ens or feeds registry or when should they choose which?
00:01:05.556 - 00:01:32.290, Speaker D: Yeah, great question. So it kind of depends on what you want to do. The tools are there for you to make your lives easier. If you're working with a chain where ENS is enabled and you just want to work with Ens. Absolutely. Sometimes the tools that you're working with might not have ENS support, so the feeds registry will be a lot easier. I think for the most part, you're just going to want to work with the feeds registry because it's an on chain contract.
00:01:32.290 - 00:01:49.920, Speaker D: It's going to be the same across whatever platform that you're working on. But maybe if you want to. In a script, in an off chain script, you want to work with ENS because you don't want to have to remember the address of the feeds registry. That might work, but I think for the most part you'd want to use the feeds registry. So great question.
00:01:50.450 - 00:01:51.200, Speaker C: Awesome.
00:01:52.450 - 00:02:05.990, Speaker A: All right, next, I'll go to jump over to Nick. There's a lot of love for this idea of being able to try out a hard fork in Ganache, but the question came up is when is the right moment? When should a developer be worrying about a hard fork?
00:02:08.970 - 00:02:55.330, Speaker E: I suppose it really depends on the application. Like if you are building some application that interacts with Uniswap, then you're going to need to fork immediately. Your entire development lifecycle is built on the idea that you have an existing automated market maker that you can interact with. Yeah, I think it really depends because some applications, like my magic square, I've never needed ganache forking for my magic square, as you can probably imagine. Yeah, I think maybe if you are going to deploy to production, then you will fork just so you can make sure of things like gas prices and whatnot. But, yeah, I think you'll know pretty soon if you're building an application, if you're going to need that feature.
00:02:56.650 - 00:03:08.950, Speaker A: Okay, back to Elon. One of the features that you talked about is data correctness. So, like by your load balancers, by the supernode infrastructure, how do you actually ensure that that data correctness?
00:03:10.830 - 00:03:58.920, Speaker B: Yeah, that's a really good question. So, like I said, we built this kind of higher level infrastructure called supernode, and there's one specific algorithm that focuses on that data correctness part. We call it vox node. It's the voice of the nodes. And basically it's kind of like a democratic system where if the majority of the nodes, and I have to check out engineers in the exact percentage, but if the majority of the nodes agree upon a certain block number, then we choose that block number as the latest block number and then kind of serve traffic from that host of nodes, as opposed to going to nodes that might be a little bit lagging behind. So it's kind of like a pretty complex set up there, but that's kind of the data correctness part. It's sort of like a democratic system that we built up.
00:03:59.310 - 00:04:04.534, Speaker A: Okay. So you have your own kind of consensus algorithm that selects a cohort of nodes to end up do the serving.
00:04:04.582 - 00:04:05.660, Speaker B: Okay, exactly.
00:04:06.670 - 00:04:12.270, Speaker A: Okay. And a related question was, how does alchemy think about decentralization?
00:04:13.250 - 00:04:48.102, Speaker B: That's a really good question, actually. So there's a couple of parts to this. And actually, I heard one really interesting perspective on this from one of our users. And what they were saying was, basically, they find that using offloading their infrastructure to someone else makes their product more. And this is kind of a hot take. This isn't necessarily obvious perspective, but I thought it was really interesting. So their thinking was this, basically, if they're running their own infrastructure in house, that process for their product is more centralized than offloading it to something else.
00:04:48.102 - 00:05:26.850, Speaker B: Right. If they're doing their own infrastructure and maintaining that themselves and building their product and serving that to users, then they're the kind of sole keeper of all that information. Whereas if they offload it, they have this distributed consensus. Like alchemy has multiple nodes, we serve a lot of people, and so they get kind of this within themselves. Decentralization part, I think, also. So that was kind of an interesting perspective, I think the way we think about it as a company is we've talked to thousands and thousands of developers at this point, and what they care most about is kind of like node reliability, node scalability, and that their product doesn't go down. And ultimately kind of bringing their infrastructure in house takes a lot of end costs and a lot of time.
00:05:26.850 - 00:05:39.000, Speaker B: And so what's more important to them than maybe decentralization is just that their product is functional. And you know, time and time again that's kind of been the utmost priority, although it is kind of an interesting topic to discuss.
00:05:40.190 - 00:05:52.270, Speaker A: Awesome, thank you. All right, back over to Patrick. So a couple of connected questions here about the large and multivariable responses. Can you share some of the use cases that should use large responses?
00:05:53.570 - 00:06:38.758, Speaker D: Yeah, and this really kind of goes back to smart contracts are limited in creativity, as limited as your creativity is. So use cases for large responses can be whatever you want. I gave the example of an ipfs CID hash because the CID hash is going to be larger than those 32 bytes. So to me that's like the simplest one to use, but another one. Maybe you want to make an API call to some news event or something like that, right? And you want to put entire strings into your smart contracts to immortalize some text. That might be another great example. Or maybe for some reason you have an insanely large number, or you want to grab multiple responses from the same API.
00:06:38.758 - 00:07:05.540, Speaker D: Maybe an API returns several json keys that you want to bring into your smart contract. That's another perfect use case. So maybe that's like I'm going to use NFTs as another example. Maybe those are different attributes of your NFT. You don't want to just grab a single one. You want to grab the attack, you want to grab the HP, the defense, the speed, et cetera. So what are some of the use cases really like? What do you want to do at the end of the day?
00:07:06.150 - 00:07:06.802, Speaker C: Okay.
00:07:06.936 - 00:07:14.978, Speaker A: And then a closely connected question regarding the multivariable enabled responses. Are there limits on the number of fields that can be returned to a smart contract?
00:07:15.154 - 00:07:32.970, Speaker D: No. Well, that's not technically true. Technically it is limited by how big of a transaction you can make. You do have to fit the transaction into the block, but other than that, pretty much no. An arbitrary bytes sized.
00:07:33.950 - 00:07:34.698, Speaker C: Awesome.
00:07:34.864 - 00:07:43.410, Speaker A: And then back over to you, Nick. There was a lot of excitement about record keeping, and the question came up, where do the records get kept? Like what happens if someone's machine.
00:07:44.790 - 00:08:34.034, Speaker E: Yeah, we built Truffledb to be agnostic to the underlying data storage mechanism. So by default it will put it in a sqlite database that's shared by all truffle projects, so it'll be in your user's home directory. But we built troubledb in such a way that you can have a hosted instance, and a single hosted troubledb instance can house as many projects in a conflict free fashion. So you can have, if you're working on a development team and you need to share these records with other developers on your team, you could stand up a standalone, like hosted Truffle DB instance, and all of the people on your team can connect to that and use that for the record keeping. Okay.
00:08:34.072 - 00:08:41.266, Speaker A: So at scale, the best practice is to spin up your own hosted instance? Basically, yeah.
00:08:41.368 - 00:09:15.280, Speaker E: We're still exploring kind of what that looks like. Since TravelDB is so new, I think we're very interested in feedback on this sort of thing. I can also imagine a workflow where it's like an import export, like you export your records and you share them with the other members of the team or export them and distribute them as an NPM package. I'd say probably the only approach I would not recommend is source control for these records. But yeah, still figuring out the exact story there. That's a good question.
00:09:15.890 - 00:09:16.640, Speaker C: Okay.
00:09:17.090 - 00:09:32.340, Speaker A: And then the next question was really interesting. I'm going to ask everyone on this. We'll go through, we'll go Patrick Elon, then to you, Nick. What feedback do you want from the community? And specifically what feedback do you want from the chat? So, Patrick, we'll start with you.
00:09:34.070 - 00:09:36.740, Speaker D: Yeah. Right now, or in general.
00:09:38.470 - 00:09:39.460, Speaker A: Let'S say.
00:09:42.710 - 00:10:21.940, Speaker D: To see what would you like to learn how to do? What can I. And we empower you to do right now, you've heard a lot about these amazing technologies and like, oh, this is a tool that can do this and this is a tool that can do that. Which tool would you like us to dive into deeper and really kind of open everyone's eyes to using? Is it something, maybe some weird use case with keepers that you never thought of? And that's kind of what I want to know. What are you struggling with? What's confusing you? Is there anything that these tools that you don't know how to do and what do you want to do? So that would be what I want to know.
00:10:22.710 - 00:10:23.314, Speaker C: Awesome.
00:10:23.432 - 00:10:25.090, Speaker A: We'll go to you, Alanix.
00:10:25.590 - 00:10:44.780, Speaker B: Yeah, I would kind of piggyback off Patrick here. I would really be curious about think back on the most recent time where you were banging your head against a wall in your development process. What was that moment? What were you trying to do. Why was it so hard? And I would love to kind of hear that and understand that problem so we can sort of jump in and help.
00:10:46.670 - 00:10:47.178, Speaker C: Awesome.
00:10:47.264 - 00:10:51.158, Speaker A: And then over to you, Nick. What feedback do you want today from the chat?
00:10:51.254 - 00:11:14.180, Speaker E: Well, in addition to know echoing the above, certainly I guess if anyone has ever found good explanations of concepts that are hard, what were your epiphany moments? I feel like there's a lot that that could provide for building development tools. When did you get it and what made you get it?
00:11:16.070 - 00:11:26.440, Speaker A: Yeah, I will say the state of blockchain education is at very best fragmented today in our ecosystem and I think maybe this is something we can all come together and collaborate on.
00:11:28.030 - 00:11:28.730, Speaker C: Awesome.
00:11:28.880 - 00:11:37.660, Speaker A: I'm going to jump back into the questions, so I'll go to you, Nick. How do you handle transactions in a pending state was one of the questions.
00:11:38.990 - 00:12:23.210, Speaker E: So in truffle we wait for it to confirm and it's configurable. You can wait for a number of confirmations or you can just wait for the first confirmation. In Ganache we have a system that collect well. So by default, Ganache doesn't have pending transactions. As soon as you send a transaction to Ganache, it creates a new block. With that one transaction you could turn this off and you can make Ganache act like a normal ethereum node and mine a block every 15 seconds. If you do that, any transaction you send to Ganache will go into pending and I believe, well, certainly in Ganache seven there's like a priority system, so it'll order it by gas and you can inspect the mempool and things like that, much as you would expect geth to work, for instance.
00:12:24.750 - 00:12:25.306, Speaker C: Awesome.
00:12:25.408 - 00:12:32.158, Speaker A: And since you brought it up, I'll ask the question that is impossible to answer. But when is Ganache version seven coming out?
00:12:32.324 - 00:12:50.100, Speaker E: Yeah, I really want to know the answer to that too. You could follow our milestone. It's GitHub.com, trufflesuite, ganachecoremilestones. I don't know. It's milestone number one, I believe. Ganachev seven.
00:12:50.710 - 00:12:52.002, Speaker D: I'm hyped for that.
00:12:52.136 - 00:12:53.700, Speaker E: I'm hyped for that.
00:12:55.990 - 00:13:01.110, Speaker A: There was a lot of questions about the future. So over to Patrick. When is the next developer bootcamp?
00:13:02.090 - 00:13:11.500, Speaker D: You have to stay tuned. You have to go sign up for that developer newsletter and we'll let you know sooner than you'd think, but not as soon as you'd like.
00:13:13.310 - 00:13:18.540, Speaker A: Awesome. And then over to Yolan. Where do you see multi chain a year from now?
00:13:20.510 - 00:13:59.020, Speaker B: That's a really good question. I would say the way we've kind of been evaluating multi chain ecosystems is where are developers? What do they care about? What sort of chains are they gravitating towards? But I would say this, I think that I envision a future where different chains will solve different problems, right? So maybe ethereum is really good at one thing, maybe flow is really good at another. Maybe Polkadot will kind of have a bunch of use cases there. So I think in a year, I can imagine there are applications that are built on different chains and they're kind of like cross collaborating and communicating, but I think it'll be sort of use case specific.
00:14:02.160 - 00:14:02.910, Speaker C: Awesome.
00:14:03.440 - 00:14:12.960, Speaker A: We're almost out of time here, but one of the last questions here for Nick does Truffle have anything that helps with upgradable contracts?
00:14:14.820 - 00:14:57.516, Speaker E: Truffle allows you to integrate other upgradable contract frameworks, like Openzeppelin's upgradable framework works with truffle. Truffle itself hasn't taken a stance on this because we've really focused on the actual development of the smart contract. And since there's more than one pattern for upgradability, it didn't seem like it was our place to build it into the tool itself. Truffle is already quite opinionated, and adding more opinions to a tool like that can be risky. But we're always looking for new ways of integrating this, and we've talked a lot about expanding our plugin system. So maybe upgradable contract frameworks would be like a first class plugin in the future. Definitely.
00:14:57.516 - 00:14:59.630, Speaker E: Always thinking about that sort of thing.
00:15:00.720 - 00:15:01.470, Speaker C: Awesome.
00:15:02.100 - 00:15:08.236, Speaker A: And then there was another question about what's the state of typescript support in truffle?
00:15:08.428 - 00:15:29.930, Speaker E: So typescript support, it works. It's a little bit not so smooth. You have to compile the typescript separately. This is probably something we'll address in the next three months. We get a lot of feedback for that. And also, truffle is being rewritten in typescript little by little, so sooner or later we can't ignore it.
00:15:32.380 - 00:15:40.392, Speaker A: And Patrick, this isn't so much a question, because I think you've already answered it, but the chat could not get over. Where's the link for the hackathon? Everyone wanted to sign up.
00:15:40.526 - 00:15:59.330, Speaker D: Yeah, you'll have to stay tuned. So the website isn't up yet. Definitely go to Docschain link. Scroll to the bottom, sign up for that developer newsletter, because we will send out a link for the registration when it becomes active, and you'll definitely want to jump in when that goes out. So it's not out yet, but it'll come soon.
00:15:59.780 - 00:16:00.384, Speaker C: Awesome.
00:16:00.502 - 00:16:13.460, Speaker A: And then one final question for everyone. What do you want a developer to do tonight after the end of the conference? If you had one thing that everyone could go and do, what would that be? So let's start with you, Elon.
00:16:16.280 - 00:16:41.660, Speaker B: Let's see. Good question. I mean, I would love for everyone to test out alchemy and come see what the experience is like building with us. It'd be really cool if you guys could try out the new multi chain features, the topic of kind of the talk here and just kind of give feedback, but selfishly. Come say hi to me in discord. Join the alchemy discord. Ping me, say what's up? I'd love to hear about what you're working on and just kind of chat.
00:16:43.620 - 00:16:44.880, Speaker A: Over to you, Nick.
00:16:47.460 - 00:16:50.610, Speaker E: I don't know. Use truffle and open three bug reports. Please.
00:16:51.700 - 00:16:52.956, Speaker A: Open three bug reports.
00:16:52.988 - 00:16:54.370, Speaker E: Was that at least?
00:16:56.820 - 00:16:57.876, Speaker A: That's awesome.
00:16:58.058 - 00:17:02.304, Speaker D: And then finally, Patrick, open three bug reports on truffle.
00:17:02.352 - 00:17:02.564, Speaker C: Up.
00:17:02.602 - 00:17:25.976, Speaker D: My camera is overheating, so I'm going to go away in a second, but I want you guys all to try all the amazing technologies here. Yeah, alchemy to speak, Don alchemy and truffle real quick. Yeah, alchemy, their forking feature is sick. Absolutely love working with it. For my projects, I've done a whole bunch of truffle demos. A lot of people are asking about dynamic NFts. I did one which where an NFT changes based off the weather in truffle.
00:17:25.976 - 00:17:45.090, Speaker D: So definitely go check that out and try out all these new chainlink stuff. There's a ton of, ton of material out there for working with Chainlink, working with all these different technologies. And yeah, I want everyone to come in, have fun, remove the imposter syndrome because we all started there once and don't be afraid to dive in and try new things. So welcome to the community.
00:17:46.020 - 00:17:57.140, Speaker A: Awesome. Well, a big, huge thank you to all of our speakers in the first block of the day here, and thank you for all the great questions. I think this was a really good q a baby.
