00:00:08.410 - 00:00:22.042, Speaker A: Hey, everybody. Welcome to a Chainlink user roundtable. I'm Andy from Chainlink Labs. Today we've got a roundtable with full of defi projects that have integrated Chainlink keepers on Polygon. We've got roman Hayden from Uki. We've got Dr. Chicken from entropy Phi.
00:00:22.042 - 00:00:32.934, Speaker A: We've got we. So, from beefy. And leading the conversation is Mike Stone from Chainlink Labs. They'll have a conversation about how and why they integrated chainlink keepers to automate smart contracts on polygon. Layer two.
00:00:32.972 - 00:00:33.686, Speaker B: Here you go.
00:00:33.788 - 00:00:54.046, Speaker C: All right. Hey, everyone. I'm Mike Stone. I'm a solutions architect at Chainlink. I specialize specifically on the keepers offering and smart contract automation. So, yeah, let's jump right into it. We'll kick things off with a simple question at a very high level.
00:00:54.046 - 00:01:00.414, Speaker C: How is your engineering team using chainlinks keepers today? Maybe, Wezo, you can kick us off?
00:01:00.612 - 00:01:56.606, Speaker B: Sure. Yeah. So, beefy finance is a multi chain yield optimizer, which is quite fun, but we have hundreds and hundreds of vaults that constantly need to be harvested in order to perform their normal operations. So, generally, we just have a script running and calling harvest, and we actually have a call fee system. So anybody who calls our harvest function and keeps the progress going gets a little bit of a reward. So that incentivizes, let's say, bot operators or I guess, anybody who really wants to kind of go on chain and call the harvest function. But overall, what we needed was something that's consistently something that's more decentralized, something that's taking it off of running a script on a server or something like that, where anybody can basically continue to obviously go in and take advantage of the coffee system and harvest our contracts.
00:01:56.606 - 00:02:32.320, Speaker B: But we, as a protocol, want to make sure that we're giving a certain level of service, so making sure that they are, even if they're not profitable or maybe called once a day. So, keepers helps us solve some of those solutions so we can have something that's decentralized, basically calling our harvest functions, keeping our vaults running, we don't have to rely on an external script. So it's been quite actually fun building with Chainlink and starting to see progress on at least Polygon, where we're starting this project, but seeing the integration possibly across all the different chains that we operate on.
00:02:34.610 - 00:02:51.794, Speaker C: Awesome. Yeah, thanks. I want to dive in a bit, a little bit more into how you were doing this before without Chainlink or without keepers. You mentioned bots and things like that, but we'll jump into that in one of these upcoming questions. Dr. Chicken, how about you?
00:02:51.912 - 00:03:26.414, Speaker D: Yeah, so I'm from entryfy and what we offer is a prediction market. So with the prediction market, we have to settle each of the market every seven days. And right now we have nine markets, which means every day there has to be some prediction market that's due for settlement. And right now we're using chaining keeper to check the time whether it's time to settle or not. And actually we implement chaining keeper from the get go. Because myself, I've been following Chennai for quite a while. So I know Cheney launched this keeper product and I presented to developer developers were like awesome.
00:03:26.414 - 00:03:35.060, Speaker D: This way we don't have to write our own script and run our own web, two cloud computing service and keep track of stuff.
00:03:37.430 - 00:03:44.100, Speaker C: Great. Yeah, thanks. So using keepers right off the bat. Love to hear it. Thanks for that. And Roman, how about you?
00:03:45.210 - 00:04:56.970, Speaker E: So on our side, as you probably know, we are margin trading, lending and borrowing protocol. So a big task for that for us is to keep the system healthy. And previously we were running a couple of liquidation jobs, liquidation bots that were trying to keep the system healthy. And as you know, the profits from those liquidations were going to outside of the protocol, let's say. And with this keeper integration we can, I think in near future make sure that the profits from the liquidations are streamed back into the protocol. Another use case would be is the limit orders and keeping the limit orders, the order book of limit orders up to date and executing orders in time and at a specific market price. So basically in this scenario we'll use Chainlink, Oracle and chain link keeper.
00:04:56.970 - 00:05:54.110, Speaker E: I have another use case, it's brand new, probably from yesterday. I'm not sure if you guys are familiar with the lending pool utilization. A lot of time people are trying to keep the lending pool as much utilized as possible, but at the same time they are leaving some percentages out of it so people can unlend from the pool. So there is a concept that you can call concentrated pool utilization, let's say. So I think we might think to use Chainlink to update this utilization in real time. Well, in real time, I mean in a couple of blocks, let's say. And it would be a very efficient utilization for our traders and borrowers.
00:05:55.330 - 00:06:15.346, Speaker C: Cool. Yeah. So let me ask a specific question about that. For anyone watching this, generally a keeper's contract follows a specific pattern. You have two functions. The first one is check upkeep and that's just checking some on chain condition. And when that condition becomes true, it'll perform some action.
00:06:15.346 - 00:06:24.920, Speaker C: So Roman, in this new use case that you uncovered yesterday, can you maybe describe how that would work or how this keeper's contract would function?
00:06:25.290 - 00:07:27.210, Speaker E: Well, it's just a concept yet. For example, we know that market interest rate for USDT right now is approximately 10%. So if you are building exponential curve, your lending pool will be subutilized with the current curves that are used. So instead of that, we will change the curve according to the average interest rate of the dollar. So we kind of make sure that our pool is always, let's say 80% utilized. Back to your question. In performance keep, we basically check whether the current settings for the interest rate are optimal, and if they are not optimal, we do perform upkeep.
00:07:28.910 - 00:07:53.298, Speaker C: Perfect. Yeah, thanks for that. So the next question I have here for the group is, so from an end user's perspective, how does the use of keepers change the way they experience your product specifically? Yeah, you know what, I'll leave it at that. Wezo, you want to kick us off there? So from an end user's perspective, what does that look like?
00:07:53.464 - 00:08:44.660, Speaker B: Well, first we can offer more consistency on making sure that our vaults are harvesting as they should. So actually just keeping up our product reliability. So that's all obviously something that we're trying to solve for. We're actually experiencing, especially as part of our, I'd say exponential growth obviously hiccups when it comes to that. Right? Because just making sure that things are functioning as they should and then the scripts that are running or they fail at certain times. And because you have such a large maybe vault base that we do some of that stuff, maybe you miss, right, unless you have really good recordings on any issues that you might have. So I think from a user's perspective, what they can see is more consistency and reliability and actually the vaults harvesting themselves, which is great, which is what we're trying to over provide.
00:08:44.660 - 00:09:31.010, Speaker B: I also think from an end user perspective, what they can see is a lot of innovation from our kind of protocols. I mean, Roman was already just talking about certain functionalities, but you're talking about know that's a lot easier to be doing during a checkup key than it is to write it into a contract because somebody's going to have to call the contract to do with the rebalance. So we can do even portfolio type management that can be utilized with chain link keepers. I think putting innovation like limit orders that can be added into a lot of different protocols and do a lot of fun things when it comes to limit orders. So I think from an end user perspective, it's, hey, I think you're going to see consistency and reliability from protocols, better from keepers, and then also you're going to see more innovation use cases. So overall it's pretty exciting.
00:09:32.710 - 00:09:36.070, Speaker C: Yeah, that's great. Thanks for that, Dr. Chicken, how about you?
00:09:36.220 - 00:10:06.030, Speaker D: For our user, it makes the whole prediction game more fair because prediction game is supposed to be settled every seven days. And if we use some unreliable method to settle the games, then what will happen is that users, they can actually game that system. They can call the settlement whenever price is in their favor. But by using keeper, we make it very standardized. Well, the game will settle in seven days for sure. So this gives users all the players more fair playground.
00:10:08.850 - 00:10:30.200, Speaker C: Yeah, for sure. So in your case, you don't have to worry about that timer going off after seven days. The check upkeep function is just saying, has it been seven days? And this decentralized network is constantly doing that check. And then after seven days, you know that it'll run. That's great. Roman, how about you?
00:10:30.970 - 00:11:14.660, Speaker E: Well, first of all, I think it's a more decentralized way. It's like a decentralized cron job. And just by having that is already good from our system perspective, is obviously returning liquidation profits back to the protocol and to the protocol stakers is beneficial and it's beneficial for the protocol. And in the case of the liquidation system, then it wasn't even possible in the decentralized way. Let's say those are pretty much it.
00:11:16.410 - 00:11:46.190, Speaker C: Cool. Yeah. So I'm curious, from a developer's perspective, as you all kind of were working with the keeper's product and developing these keeper compatible contracts, what was that experience like? Was it simple? Did it take a long time to figure out the patterns? Were there certain things that somebody looking to design a keepers compatible contract should consider based on what you learned?
00:11:49.970 - 00:11:51.790, Speaker E: If I can answer that.
00:11:51.940 - 00:11:52.640, Speaker C: Sure.
00:11:53.030 - 00:12:30.940, Speaker E: From my side, obviously the overall concept was pretty straightforward. So you just check and then perform upkeep. But then the hard part is in details. In our particular case, we have to check upkeep a lot of positions. So that is not always fitting in one block or in the required gas. So we had to find the solutions around that. We have to optimize our code to check more positions, let's say.
00:12:30.940 - 00:12:44.670, Speaker E: Well, I don't think it was hard, but sometimes challenging in general, but this is how all development goes, I think, in blockchain.
00:12:46.610 - 00:13:18.150, Speaker C: Yeah, great. Roman, I think both you and Wezo had a similar technical challenge. And correct me if I'm wrong. The challenge being there may be many objects based on the current state of your product and how people are interacting with it that your keeper compatible contract has to act on. And managing the amount of gas used in perform upkeep is the challenge. Right. Because if you use too much, you can go over certain limits and then the execution won't happen.
00:13:18.150 - 00:13:30.270, Speaker C: So maybe you can touch a little bit on how you approach that, how you can plan against these large or unbounded loops.
00:13:31.970 - 00:14:18.000, Speaker E: So we split the task, for example, our system on polygon. Let's say we have right now about 200 positions and we can check in one upkeep, just 100 of them. So we split the task into jobs and we have two jobs running. And one is checking from zero to 100 and the other one is checking from 100 to 200. I know this is not scalable, but we're working with chain link on improving things and I think chain link discussed our use case and maybe in v two we have a nice solution for that.
00:14:19.890 - 00:14:22.240, Speaker C: Perfect, thanks. Yeah. Wesley, how about you?
00:14:22.850 - 00:15:00.314, Speaker B: Yeah. So similar issue, right. Because we have to check the way we worked it is in the checkoff keep. It's looking for a variety of parameters. So is the vault profitable? So is the vault worth harvesting? So have enough accrued rewards? Are they going to exceed maybe like the cost of the keeper's job plus the gas fee? And then also has it been serviced within a day? Right. So when's the last time it was harvested? So first we had to really kind of set up our contracts to make sure that they're ready to go. They're keeper compatible basically.
00:15:00.314 - 00:15:44.954, Speaker B: So would that mean we have to basically upgrade all of our existing strategies, which is kind of like a whole thing, but it sets us up for future success, which is not what we did previously. And then we can now all our new vaults or have the right keeper compatible strategies with them, but then we are able to cable. We have all these things that we have to check. So then we can just batch up the calls and then do in a couple of batches. And then the ones that need to be harvested can go ahead and get harvested and if not, then we move on. So we're able to figure out solutions. And so obviously we're still in the intro phases of testing out the keepers on polygon, but so far I think we've come up with fixes to pretty much any sort of hiccup we have.
00:15:44.954 - 00:15:55.040, Speaker B: And I get working with you guys have been pretty great. So if we had questions or needed help with the code, you guys have been pretty open to assisting with that.
00:15:57.890 - 00:15:58.446, Speaker D: Awesome.
00:15:58.548 - 00:16:10.930, Speaker C: Thanks. And thanks for the compliment. Since I've worked with you directly, I appreciate it specifically. Mike. Yes, I'll take it. Perfect. Dr.
00:16:10.930 - 00:16:31.526, Speaker C: Chicken. So how about you? In terms of developing against keepers, I think one of the cool things to call out for your project is you're using technically two pieces of chain link technology in your upkeep. So it's keepers themselves and then price fees, I believe, right. To resolve the prediction markets. So maybe you can speak a little bit to that.
00:16:31.628 - 00:17:08.358, Speaker D: Yeah. From a logical perspective, our implementation is easier because the people only needs to know, okay. Whether time is up for the upkeep. So this will be the check upkeep function. And in the perform upkeep, it will retrieve the price of the asset from changing price feed and then perform the settlement. But once we did run into one initially set up, is that when we're registering the keeper jobs, we have to manually adjust the default gas limit on the registration page. So this is something that the future developers might keep an eye out.
00:17:08.358 - 00:17:10.440, Speaker D: Remember, you have to adjust the gas cost.
00:17:11.770 - 00:17:31.002, Speaker C: Right. So that's specifically the gas limit. I think that's what you're referring to, right? The gas limit. Right. So the gas limit, when you're registering an upkeep, refers to the max amount of gas you're willing to let the transaction use. So you can kind of, it's almost an added safety measure. But Dr.
00:17:31.002 - 00:17:42.986, Speaker C: Shukin, to your point, I think it's important to do your testing, make sure you know how much gas your contract will use and then maybe even add a little bit of buffer. Is that right? Is that what you're describing?
00:17:43.098 - 00:17:56.930, Speaker D: Yeah. And also the way we sell is that we have nine different prediction markets. So we register nine jobs for each of the market. So I think that also helps for reducing down the gas cost. I mean, gas limit.
00:17:58.490 - 00:18:39.714, Speaker C: Yeah, for sure. That totally makes sense. One other question I have for the group is around this concept of off chain computation. So one of the cool benefits of keepers is in this check upkeep function. Technically, it's simulated off chain, so you can save a lot in gas by offloading some of that work to the node operators and then leveraging the output of that work in perform upkeep. So Wezo and Roman, I think the two of you likely have used this a good amount in your contracts. So if you can, I'd love to hear what you have to say about that.
00:18:39.714 - 00:18:42.530, Speaker C: And if you've noticed any significant cost savings.
00:18:46.150 - 00:19:24.050, Speaker B: It was part of our initial solution. Right. Was to, hey, we have to do all these calculations, and we have all these variables that are getting fed in from the vaults, so maybe we can reduce the gas costs and be able to fit within the function if we can do some of these calculations off chain. So I think it definitely helped us, and it helped us be able to batch things a little bit larger. So, yeah, it'll be more fun to be able to work with that as we get more parameters around what we actually have to accomplish in the know, that's definitely going to be something that you're going to have to utilize in order to get what you want done. So it's definitely a nice feature.
00:19:29.140 - 00:19:31.170, Speaker C: Cool. Yeah. Roman, how about you?
00:19:33.060 - 00:19:56.890, Speaker E: Well, so obviously we do perform upkeep to check positions, and they are technically offline computations, but not, like, in the sense of offline that you can use like a GPU or something like that. Maybe this is going to be available in the future. I'd love to see something like that.
00:19:58.460 - 00:19:59.210, Speaker C: Yeah.
00:19:59.580 - 00:20:31.430, Speaker E: Other than that, it's definitely cheaper. And from my perspective is that I don't have to run the bots myself and I don't have to run the nodes myself. And in the case of, for example, BSC, it's quite a challenging task to maintain the nodes synchronized at all. So chain link is something definitely that saved our time.
00:20:34.680 - 00:21:04.380, Speaker C: Great. Yeah, thanks. And then I guess generally a question for the group that we may have answered through other questions, but I'll ask it anyway. Why is decentralized execution or decentralized automation important? So, compared to other competitive solutions, like hosting something on AWS or running a cron, something along those lines, what does it mean to you for this to be decentralized?
00:21:06.100 - 00:21:52.910, Speaker E: I think in a liquidation system, it's more optimal. For example, a lot of time people are making a gas war, and at the end of the day, no one makes the profits. I mean, miners make profits, but in the system wise, we don't make profit. And people who are making gas war are not making big profits either. So this is a win win situation for everybody, I think. And this gas war affects badly overall, all the systems. So when the price spikes, as you know, the gas goes to the top.
00:21:52.910 - 00:21:57.970, Speaker E: So, yeah, I think that decentralization is a need.
00:22:02.020 - 00:22:39.468, Speaker B: Yeah. So I'd say, in general, we're trying to remove all single points of failure from beefy finance. So we want to be actually, if one of us just disappears. Right, and something doesn't happen, beefy itself can operate. The contracts are all open source, the app is open source. Anybody can spin up a version of the app if they wanted to. And so we've been trying to come up with, okay, well, on the harvesting side, decentralizing it and making sure that the vault can continue to be harvested and not relying on a single person.
00:22:39.468 - 00:23:25.870, Speaker B: Right. So obviously the call fee kind of helps us with that because we're incentivizing, let's say others like bots and stuff to do it. But having something like keepers, where we know we can maintain consistency on the vaults being harvested and anybody can kind of feed links to the contract and continue on the harvest, I think that the whole decentralizing, it's just helping us in what we really kind of want to accomplish, which is this protocol that can continue to run without single points of failure. So I think it's important to have decentralized calls for that instead of having to rely on, like I said, a lot of us have been relying on bots to just do these kind of jobs and it's becoming an issue if they ever go down and stuff like that. So keepers help solve that.
00:23:28.800 - 00:24:10.360, Speaker D: For me, I think reliability is one thing, but also I think keeper can also help to align the incentives better. I mean, for entryfy, it's a prediction market and we have to somehow to have people to call the settlement function. So we use keeper. But also I think for some lending poker, right. For example, if you look at Makerdao, the way they incentivize is that, well, they're going to allow people call liquidate, they're going to give them a discount. But what if they use chain and keeper? Then maybe that discount can be fed back into almost like a poco revenue stream. So I think it's a great way to redirect some of the incentives.
00:24:11.680 - 00:24:12.830, Speaker B: That's a good point.
00:24:14.240 - 00:24:40.950, Speaker E: Yeah. The decentralized liquidation system is as well more reliable than having bots that are running and maybe even people, because you never guarantee that people are there to liquidate. So that's why we were running bots ourselves. Decentralization is always better in this case.
00:24:45.880 - 00:25:09.450, Speaker C: Sure. Yeah, and then thanks for that. Another question I have here is do you think about keepers as a similar idea to having redundancy in technical systems? And I'll open that up to whoever would like to answer.
00:25:10.380 - 00:25:18.090, Speaker E: I was never thinking about the redundancy thing in the blockchain world, but I don't know.
00:25:22.080 - 00:25:24.668, Speaker C: Yeah, no worries. We can skip over that one.
00:25:24.834 - 00:25:41.136, Speaker E: In my imagination, redundancy is like having a second car in case the one breaks. But smart contracts, they usually don't break, but we can have a fallback system.
00:25:41.318 - 00:25:41.760, Speaker C: Sure.
00:25:41.830 - 00:25:53.990, Speaker E: Some kind of fallback system. So let's say that one liquidation is failing, then we fall back to something else, maybe something like that.
00:25:55.960 - 00:26:57.370, Speaker B: That's really kind of how we're using it, right? It's there so that we provide a certain level of service and we're not have to rely. Because was it like six months ago when Polygon went really crazy? It was so profitable to harvest our vaults that they were being harvested like every 15 seconds. But then as the profitability kind of went down, all of a sudden lots of box lost interest. So incentivizing is good to a certain point, but only if the incentives are actually worthwhile. So if you're still trying to provide a certain level of service, but the incentives aren't there to continue to harvest like our stuff, then you're kind of out of luck. So then vaults maybe don't get harvested for like four or five days or until somebody spots it or says something. And so I think keepers is like that underlying piece that can keep you to have consistency of service.
00:26:57.370 - 00:27:08.540, Speaker B: Obviously we can still have the vault incentives, but it's more of that. Hey, let's have a consistent service to our users that keepers helps us solve.
00:27:11.840 - 00:27:31.790, Speaker C: Yeah, totally. There may be a reliance on users there, but if it is the case that the conditions aren't optimal for a user to do that work, you always have keepers there as the backup. That makes sense. Dr. Chicken, anything from your side on that topic?
00:27:31.950 - 00:27:52.810, Speaker D: Yeah, so from our side. So we do have failsafe. So all sediment function is a function in itself. And our performed upkeep function is just wrapped around sediment function. And the sediment function can be called by anyone. So in very worst case developers can still call that settlement function manually.
00:27:57.490 - 00:28:18.580, Speaker C: Yeah, for sure. Let me ask you guys, do you have any particular asks or ideas for a future version of keepers or any feature requests or even just future ways you're looking to use the keepers product to automate other parts of your platform?
00:28:23.050 - 00:28:55.920, Speaker E: From my side, I think I pointed this out a couple of times, but the ideal situation for the liquidation system is that if we can do a perform upkeep, checkup, keep and perform upkeep at the same block, and besides that we should be able to do that every block. So I know that this is putting some pressure on your nodes running, but this would be the ideal situation for us.
00:28:58.630 - 00:29:44.080, Speaker C: Sure. Yeah. And what Roman is referring to there is the way the keeper system works is the nodes take turns watching a contract to see if these conditions are met. So it may be the case that the conditions are met in, let's say, block X and perform upkeep is executed. And then it may not be until a few blocks later when another node is looking at your contract that perform upkeep is executed again. So in a future version, that limitation will be lifted and you'll be able to do this execution every block. So, Roman, that totally makes sense.
00:29:45.170 - 00:29:48.482, Speaker E: Yeah. Thanks for working on course.
00:29:48.536 - 00:29:51.860, Speaker C: Of course, yeah. Wesa. Dr. Chicken. How about you two?
00:29:52.870 - 00:30:06.482, Speaker D: For us, our biggest ask is for keeper to onboard more blockchains, because right now we are exploring to deploy to other chains and we're just waiting for keeper to be deployed on those chains.
00:30:06.626 - 00:30:12.230, Speaker C: What chains do you want next, Dr. Chicken? If I can snap my fingers and get them there, I'd do it, I promise.
00:30:12.830 - 00:30:19.690, Speaker D: Yeah, definitely. We're looking at oasis, emerald, paradigm. Also Chronos.
00:30:22.030 - 00:30:33.360, Speaker C: Got it. Cool. Well, I'll send this recording over to our PM team and I'll get them working on it as soon as possible.
00:30:34.370 - 00:30:40.720, Speaker B: Let's just get as many chains as possible, right? We got plenty that we can use.
00:30:41.350 - 00:30:56.866, Speaker C: Yeah, I'm with you. Yeah, Wesley, outside of new block. Well, let me ask you, what are the next blockchains you want? I already know the answer to this, but for the recording, let's hear it. And then if you have any other thoughts or ideas.
00:30:57.058 - 00:31:58.054, Speaker B: Yeah, well, Phantom, avalanche, and Arbitrum, those would be the three that I would request as soon as you guys can. But we're continually expanding. It's kind of funny because I think we're in this unique time in crypto where we're having so many new blockchains come up and everybody's kind of like, wants to go and play in all these new playgrounds. And the infrastructure is going to take time for things that are on, let's say, BSE or ethereum or even polygon, the stuff that you guys are kind of building to get over to these new blockchains. And so then we can utilize all those products. So it is an interesting journey as you're going to be a multi chain protocol. You can start to implement all these things and do test and trial on certain blockchains, but then you're kind of like waiting for, hey, when's this infrastructure going to actually come to these other blockchains we're launching on? Yeah, we'll see how you guys.
00:31:58.054 - 00:32:49.034, Speaker B: With the speed of launches with keepers on some of these other blockchains, it seems like there's not going to be any shortage of opportunity for you guys to launch on a new blockchain in the next year. But I think one thing we were kind of talking about was innovation with keepers. I mean there's just so many things that can now be done. We actually have another product on BSE called moonpots that is like loss of slaughtery type thing. And obviously we need somebody to call start award, complete award, similar to all these other functions that kind of need to be called. So right now we have like a bot monitoring when to call start award, when to complete award, and then actually calling the VRF plug. All the chain link products, we can use keepers for that.
00:32:49.034 - 00:33:21.540, Speaker B: I think for vaults, for specifically the beefy, there's multiple, let's say single asset vaults that all have different types of return. And so we can possibly use keepers to rebalance between the different vaults and have one single point of entry, but maximizing your return on the vault. So I think there's so much new fun things that can kind of come in the next year. So it'll be fun to one build with the keepers product, but then be able to have keepers kind of follow us along and be able to execute all these new kind of innovation products on all these new blockchains as well.
00:33:22.410 - 00:33:59.440, Speaker C: Yeah, I completely agree. I mean, having a product like keepers available opens up new use cases know you couldn't really consider doing before without an automation tool you can trust. I think Dr. Chicken entropy fi is the perfect example of that because you kind of built with the idea that automation is possible and that's how your prediction market is possible. Right? So as we see more developers building more projects in the space, they can now have automation at the front of their mind.
00:34:00.770 - 00:34:09.700, Speaker D: Also they can think about in the long term, right? Like five years from now or ten years from now, their protocol has to be running off some decentralized services.
00:34:11.190 - 00:34:49.826, Speaker C: Right? Yeah, I think Wesley was alluding to that earlier. Right. You want to think about using tools that will scale with you that you don't have to worry about, right? Like using something like AWS if you're using that. And Wesle, maybe you could speak to this from direct experience, but when you're using a tool like that, you also have to monitor it, you have to maintain it, you have to make sure it's funded and all that stuff. So you almost have to have an entire DevOps team surrounding that kind of tooling. But Wesley, maybe you have something to add to that.
00:34:50.008 - 00:34:50.980, Speaker B: We do.
00:34:51.350 - 00:34:52.420, Speaker C: There you go.
00:34:53.750 - 00:35:29.914, Speaker B: And it's become even more cumbersome. I mean with the amount of, like I said, it's just the vastness of the services we kind of provide, it's been incredibly difficult to make sure that everything is running as it should. So we do have a whole bunch of dev tooling to make sure that those services are up and running and still things kind of get missed. So I think something like this, like I said before, we were talking a little bit about redundancy. It's like, hey, having that layer of like, hey, I know that it's going to meet this minimum level of execution. We're able to provide much greater service. So I think that's ultimately the goal.
00:35:29.914 - 00:36:23.226, Speaker B: And it makes it easier, actually, on our dev team because we can not have to sit there and scan for everything to make sure that it's happening as it should. We can kind of rely that it is. But yeah, just as I was talking. So now obviously you've seen we're able to do more cross chain communications. Have you seen there's a lot of different protocols that are doing bridging communications between different contracts? So you can, I guess, swap from, let's say, ethereum to Avax, right. Do the swap and then get your asset returned back to you without having to ever leave, let's say, Ethereum. And so I just was thinking about all these things of we can possibly have all these vaults kind of running on certain chains, but then keepers kind of like analyzing whether or not should do an action and send cross chain functionality and talk to a contract on another chain.
00:36:23.226 - 00:36:42.530, Speaker B: All of a sudden it's like all these different infrastructure parts really start to open up the door of what you possibly can do. And we can have vaults that are interacting with three or four chains and keepers can help us kind of make that happen. It's definitely fun to see we could possibly develop here.
00:36:42.680 - 00:36:46.170, Speaker C: Oh, yeah. It's amazing how fast the space moves.
00:36:46.350 - 00:36:54.280, Speaker B: Yeah, it's going to be crazy in 2022, just of the things that people are coming out with. It's going to be really fun. There's just so much going on right now.
00:36:54.650 - 00:37:05.850, Speaker C: Yeah. Maybe to close things out. I'll ask an open ended question of what are you most excited about for 2022? You kind of led me right into that one wizzle.
00:37:07.070 - 00:37:39.862, Speaker B: Yeah. I mean, the expansion of the DFI space. I think we're going to see even more things come to the table. I actually got my introduction to keepers or not keepers, I'm sorry, Chainlink itself. When I was starting to develop, I wanted to develop like an options type protocol and obviously one of the issues I had was, okay, well, this option met the criteria that it needed to be called or whatever met the deadline, and then we needed that functionality to be able to call the contract in order to analyze who gets what in the option.
00:37:39.916 - 00:37:40.520, Speaker C: Right.
00:37:41.130 - 00:38:39.260, Speaker B: So at the time there was no keepers. So it was kind of like, okay, well, now you have to get a script and it was a whole kind of mess and then you're not sure if you can provide the level of service that you need for options. So keepers, it's nice because you can start to really kind of build even bigger and more innovative defi products because you can start to like, hey, we don't have to worry about building a whole nother script and making sure that we're providing a level of service because we can do that with keepers. So now we can just kind of build on top of whatever protocol we're trying to build, whether that's some really kind of fun sort of options, portfolio management type of tool or whatever you're trying to build up. But it just solves another one of those problems that I think was inhibiting innovation in the space. So I think seeing this even more creativity, and I think cross chain creativity when it comes to DFI in 2022 is going to be, I think, really exciting for the whole space.
00:38:41.630 - 00:38:56.830, Speaker D: Yeah, I mean, 2022, I'm mostly excited about the cross chain stuff. Gomez asked probably some report saying, oh, that's it, it's going to be a bridge. And we already know that for a year.
00:38:56.900 - 00:38:58.014, Speaker C: So we essentially found.
00:38:58.052 - 00:39:23.050, Speaker D: Ran them for a year. Yeah. And pretty good for Keeper. Why I'm excited is that keeper made it possible for smart contract to check on their own condition and also to execute themselves. So this actually opens a lot of possibilities. And combine that with the fact that you can use chaining price fees or chaining oracle to fetch off chain data, and this will make smart contract very helpful, very useful.
00:39:29.390 - 00:39:34.220, Speaker C: Great. Yeah. And Roman, anything from your side? What are you most excited about for 2022?
00:39:37.970 - 00:40:27.600, Speaker E: We have pretty much some good changes that we believe our protocol trading volume would grow like a lot. Specifically, it's a new interest rate model that will keep interest rate low for the borrowers. And then we have some deck selector option being available so that people could choose which decentralized exchange they want to swap to or just use for margin trading. And we plan to do permissionless. And I believe all those changes bundled together will bring a lot of volume to our platform.
00:40:28.850 - 00:40:46.530, Speaker C: Yeah, lots of really exciting stuff. Well, thank you all. Wezo, Dr. Chicken Roman, really appreciate your time. Thanks for joining today to talk about keepers and automation and everything in the space. So Andy, now I'll pass it back over to you.
00:40:46.600 - 00:41:12.054, Speaker A: Hey everybody, thank you for joining us on this chainlink user roundtable. If you want to check out any of those projects, check them out below in the description. There are links down there if you want to get integrated with Chainlink keepers yourself. Also, the links are down below. Do me a favor, like and subscribe to this video. Let us know that you want more of this type of content and you'll get notifications about when these videos come out. You can also follow at chainlink on Twitter to get official updates about all sorts of product and solution updates.
00:41:12.054 - 00:41:28.500, Speaker A: You can also follow smart underscore contract on twitter to get notifications about events like these many other events and all kinds of sort of videos. Again, I'm Andy from Chainlink Labs. Thanks for joining us and channel. We'll see you next time. Our.
