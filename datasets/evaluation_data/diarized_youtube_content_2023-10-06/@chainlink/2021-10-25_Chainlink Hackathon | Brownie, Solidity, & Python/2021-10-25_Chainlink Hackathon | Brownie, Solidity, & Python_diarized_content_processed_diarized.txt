00:00:36.540 - 00:00:58.992, Speaker A: You. Hello, hello. How's everybody doing? Welcome. Let a couple more people trickle in and then we're going to go ahead and get started. How are we doing today? I'm looking in the comments here. When I'm looking down, it's because I'm looking at the comments. Hello, hello, welcome.
00:00:58.992 - 00:01:22.808, Speaker A: We're doing some fundamentals today. We're learning some critical pieces of infrastructure to become amazing blockchain developers. Hello, hello, welcome. No audio. Uhoh, that's not what I want. Test, test. Nevermind.
00:01:22.808 - 00:01:37.996, Speaker A: Issue on your end. Okay, well, thanks for the ping though. Okay, cool. Thanks for the ping. All right, well, let's get started. Welcome everybody. My name is Patrick Collins.
00:01:37.996 - 00:02:24.000, Speaker A: I'm a developer advocate on the Chainlink project. Welcome to Monday of the chain link hackathon. So we had a weekend where we went over some solidity fundamentals. We just had a keepers workshop, we had some polygon workshops, and this week is absolutely insane for workshops. We have an amazing lineup of workshops and protocols and I'm really, really excited for everyone to be here who's here, because we're going to be learning the fundamentals of Brownie, which is a smart contract development framework that we can use to deploy, test and run all of our smart contracts. So really exciting today we're also probably going to talk a little bit more about some solidity fundamentals for those of you who want to see. We also recently came out with a 16 hours long course.
00:02:24.000 - 00:02:54.716, Speaker A: Yes, I know, seems insanely long, but it is absolutely fantastic. It goes over a lot of what we're going to go over today. Today is going to be a more interactive version of that, obviously. And that's what these are for. Right? So these workshops are so that we can all talk, we can engage with each other and ask a ton of questions. Right? This is your opportunity to follow along with us and ask a ton of questions. So feel free to jump into your code editors or whatever you'd like to use.
00:02:54.716 - 00:03:42.884, Speaker A: So let me pull up my screen 1 second here stream. This is the button I want to press, right? Yes. Okay, great. So for those of you who do not have Brownie and who might have missed the startup, excuse me, the solidity, the metamask, the get started stuff, I just dropped a link in the chat that you all can use to follow along. If you jumped on the calendar, you noticed that there were some prerequisites here, which was to be to install Brownie and to install metamask here. So again, I'm going to briefly walk through this again, if you're watching this later, you can always pause and come back. First thing that you're going to want to do is download metamask.
00:03:42.884 - 00:04:33.610, Speaker A: We have a couple of videos on how to do this. In fact, if you go to docs chain link and you go to the basics tutorial, this will also teach you how to get everything set up in here. When you complete it, you will successfully have something that looks like this. You might not have COVID ETH in it. If you need some COVID ETH, you can go to faucets, chain link, grab your address, pop it in here, get some ETH or link, and you'll see the ETH pop up here. If you don't have link, you'll have to add, you have to import the token, go down to import token, you'll pop the contract address in here, which you just Google link token contracts. It actually pops up for me and we scroll down to COVID, we'll grab this address, pop it into our menmask and boom, we will have it in there.
00:04:33.610 - 00:05:00.372, Speaker A: After that we need to install some things. So we need to install node Js. Let me quit out of Discord and some type of text editor. So I'm using vs code, visual studio code here. So we are jumping off of remix into a code editor. If you want to install visual studio code, this is what visual studio code looks like. I love it.
00:05:00.372 - 00:05:57.552, Speaker A: But you can use any code editor you want. Adam, sublime, whatever, you can download this and once you open up, it'll look a little something like this. Now, all this stuff that you should be installing node brownie, et cetera, it can all be done within visual studio code. So in here. And again, everybody who already knows all this stuff, great, this is just going to give you, let me just deactivate this, give you the one of my many Vms. This will give you a terminal to actually move forward and do stuff with. So here's what, once you're in here, you can do node V or node version.
00:05:57.552 - 00:06:20.556, Speaker A: You'll need node Js installed, so you can look up node Js install and something like this will pop up and you just need to install this here. Whatever version. After that you're going to need git installed. You can do that with git version like that. Install git. Yes, I know. Bear with me.
00:06:20.556 - 00:06:40.770, Speaker A: For those of you who already know how to do this, it'll look something like this. This page will teach you how to download git after that. Yes. Visual studio code node Python or Python three. So you can test it with Python three version. I have it set up as Python version. Those all will work.
00:06:40.770 - 00:07:25.970, Speaker A: Finally, you'll need PipX. Pipex is a little bit tricky, so if you follow along here, this will teach you how to do this. Python three M Pipex and surepath. There's a little troubleshooting again, if you run into any issues here, oftentimes just getting this stuff set up is the hardest part. If you run into issues, this is where stack overflow is going to be your best friend. Jump on stack overflow, ask a question, look into stack overflow, make a question, and then feel free to drop that stack overflow question into the discord saying, hey, having a problem setting up brownie or chainlink? Well, you're not installing chain link. Having a problem setting up brownie or Pipex or something? Ask the question there, drop into the chain link discord and get some eyes on it.
00:07:25.970 - 00:08:06.110, Speaker A: So once we have Python installed and Pipex installed, we can then do, after all this, we can finally do Pipex, install f Brownie. And I've already got it installed, so I'm not going to do it. But if you do it right, you can do a brownie version and you'll get something like this. And now we're ready to go. We're ready to get going. So what is Brownie? Why do we care about Brownie? Well, Brownie is what's called a smart contract development framework. And again, if anybody has any questions about getting set up, like I said, sometimes that can be the hardest part of this whole thing.
00:08:06.110 - 00:08:43.560, Speaker A: But if anybody has any questions about getting set up or working with any of this, feel free to drop a question, drop a comment in the chat and we can jump into there. But Brownie ETH Brownie is at what's called a smart contract development framework. And here are the docs. I'll post these into the chat as well. It's a smart contract development framework. It allows us to test, deploy and do things with our smart contracts a lot easier. So you might have heard of web3 Py or web3 Js or ethers Js.
00:08:43.560 - 00:09:11.524, Speaker A: Can't believe everything worked the first time I ran the commands. Oh great, excellent, excellent to hear that. I also can't believe that, but that's great. So web3 Py is a python library for interacting with Ethereum. Brownie is built on top of web3 Py. So if you're familiar with Python, Brownie is built on top of it, and it just makes our lives substantially easier. And you'll see when we jump in in a second.
00:09:11.524 - 00:09:33.784, Speaker A: Yes. Brownie is like truffle. So truffle and hardhat are JavaScript based. Brownie is Python based, so that's kind of the big difference. If you like Python, Brownie might be for you. Python also fully supports Viper, which is a pythonic like solidity, smart contract language versus hard hat. And truffle are for JavaScript, those are JavaScript based.
00:09:33.784 - 00:10:22.376, Speaker A: So it's really just what you're comfortable with and what you like doing. I love Python and I love working with Python. So we're in our vs code, we're in our text editor, and we have Brownie installed. Let's get going. So I'm going to CD into my demos folder, make new directory called Hackathon. We're going to CD into hackathon, and once you have Brownie installed, you can start creating a project, a really simple project with kind of a bare bones project, if you will, with the command Brownie init. And if you have a text editor, if you have visual studio code right now, please follow along.
00:10:22.376 - 00:10:55.332, Speaker A: Right. That way you can jump in with me here and see everything that we're doing. I'm actually going to open this folder here. For those of you who are like, wait, what's that thing here? If you go up to terminal on your visual studio code, you can't see it. If you go to terminal, new terminal in the top left of the screen, this is how you get this thing up and down. There's also a key command, keyboard command. I do control Tilde, but I'm on an imac, so it might not be the same for everybody.
00:10:55.332 - 00:11:31.680, Speaker A: And that's how it goes up and down. Anyways, once you have it there, we want to open this folder. We want to open this new folder. You can do it with this code command, or what you can do is you can go to file open and then open the folder that you just created. So Mkdir makes a new folder, and this is our new folder project. And then when we open the terminal in here and we open our file explorer, we'll see all the folders and all the files and stuff on the left and our terminal and stuff down here. Okay, so here is where we are.
00:11:31.680 - 00:12:05.064, Speaker A: Here's after we've installed node, Brownie, all that stuff. This is where we are. Hopefully you followed those setup instructions. Does anybody have any questions about where we are so far? Jose asked a great question about, hey, is it similar to truffle? Yes, it's very similar to truffle. Right, but it's pythonic it's a pythonic version of truffle or hardhead or whatever you want to call it. So are there any questions here looking down in comments section for any questions? And the reason I'm asking about questions is because I love making these collaborative. Right.
00:12:05.064 - 00:12:24.176, Speaker A: The reason for these workshops is so that we can talk, we can jump into stuff. We can answer whatever types of questions that come up. Otherwise you can just follow along with that free codecamp video. Right. If you're not looking to discuss, if you kind of just jump in. Does ganache work with Brownie? Great question. Yes.
00:12:24.176 - 00:12:58.376, Speaker A: So Ganache is for testing, deploying and running your code. Now, when we test our smart contracts, we need to test them on like a local fake, simulated blockchain. Now, for those of you who are unfamiliar, Ganache is a local blockchain. It's a blockchain that runs on our computer. It's temporary and it's great because you can spin it up really quickly and kind of have a lot of control over it. And so when we test our smart contracts, we actually test them on simulated blockchains. And Ganache is one of those simulated blockchains.
00:12:58.376 - 00:13:22.550, Speaker A: So yes, Browning does work with Ganache. It also works with hard hat. I'm not going to be showing you the hard hat version, but for those of you who are familiar with hard hat, I definitely recommend you give it a try because it is way faster. Is there anything you can do with JS framework you can't do with Python? No. And vice versa. You can do everything in both frameworks. It's just kind of preference what you like to do.
00:13:22.550 - 00:13:51.470, Speaker A: So this is not like solidity. It is like solidity. Well, okay, so Brownie isn't solidity, but we write our solidity code into this framework and you'll see what I mean in a minute. Great question, great question. Okay, so let's jump back into here. So we've just done brownie init, right? We've just created our bare bones project here. And again, if you're following along, great.
00:13:51.470 - 00:14:32.328, Speaker A: If you're following along to try this later, great. But what happens is we get this stuff on the left hand side here. So let me explain what's going on. So our first folder is this build folder. Now, whenever you compile your code, whenever you do anything in solidity, like if we go to remix, for example, I'm going to have a whole bunch of stuff in here, aren't they? Yeah. Okay. When we go to remix, for example, when we go to this compile tab behind the scenes, it's actually taking this code, bringing it down to bytecode someplace in the background, right.
00:14:32.328 - 00:14:57.472, Speaker A: So that it can deploy it to the blockchain in brownie. It does all that stuff in this build folder. So this build folder is going to keep track of all our compiled contracts, where we've deployed contracts and our compiled interfaces. We write all of our code in this contracts folder. So all of our solidity, or if we want to use Viper, we write all of that in this contracts folder. Interfaces, we can write interfaces in here. We can talk about that later.
00:14:57.472 - 00:15:24.600, Speaker A: Reports we run reports that come here, we can talk about that later. Scripts, this is where we write. If you're familiar with hardhead or truffle, this is where we will write our scripts. This is for deploying, for doing interaction, for really anything we want to do. And test, of course, is writing our tests. So anybody who's serious about smart contract development absolutely writes tests. They also make your lives a lot easier for smart contract development.
00:15:24.600 - 00:16:05.668, Speaker A: How does brownie truffle relate to scaffold ETH that we saw during the matic presentation? And are they the same types of tooling? Amazing question. So they're different. Scaffold ETH is sort of like kind of a drag and drop UI built on hard hat. So scaffold ETH uses hard hat to kind of be like its front end thing. So you can jump onto Scaffold ETH, you can fork a branch of scaffold ETH, and you can kind of spin up a user interface, a front end, a website, really quickly with scaffold ETH. Right. But Scaffold ETH is built on top of hard hat, which is a framework like brownie.
00:16:05.668 - 00:16:30.784, Speaker A: So you can kind of know if somebody made a brownie version of Scaffold ETH, it would be the same thing. It would just have hard hat swapped out for brownie. Great question. Amazing question. Yeah, Scaffold ETH is great for spinning up websites really quickly and kind of using that scaffolding. Great. So this is kind of what our sample project looks like.
00:16:30.784 - 00:17:04.516, Speaker A: So let's go ahead and jump in and see how this works. How does brownie work? So let's create a new file, right? We'll call it simplestorage Sol. And I'm going to kind of speed through this a little bit just because we did a little bit of solidity fundamentals. If people are confused as to what this contract does, feel free to jump in and ask. So we're going to start, we're going to build this from scratch. Right. But I know a lot of people here are more beginner solidity engineers.
00:17:04.516 - 00:17:43.208, Speaker A: So I'm going to speed through it a little bit, but I am going to type it out so that if you want to follow along and see kind of the thought process behind this, you can. So we're going to start off with a spdx license identifier, and we're going to give it an MIT license so that anybody can use it. This was introduced to basically help with the licensing of code, and it's really useful. Then we're going to choose our solidity. Pragma solidity solidity. We're going to choose our solidity version 0.8.7. And I also have a plugin, by the way, so you'll see like the lines and stuff show up.
00:17:43.208 - 00:18:05.144, Speaker A: It's because I have a plugin. If you go to extensions, I've got this solidity extension here. This guy has done an awesome job making the solidity extension. So I've enabled this, which is why you kind of see the highlighting and everything in here. Yes. Cool. So now let's create our contract.
00:18:05.144 - 00:19:01.104, Speaker A: We'll call it simple storage. We'll just have un 256 fave, orit number, and then we'll just create a function store un 256 number public fave or it number equals number. So this store function, what it's going to do, I should contract simple storage. I can't spell it, can I? No, that's fine. So what this contract is going to do so far, we have an internal variable called favorite number. We have a store function which will update this number based off whatever number we give it. And then we're going to give it a retrieve function.
00:19:01.104 - 00:19:42.264, Speaker A: So we'll say function, retrieve, public view returns 256, turn favorite number. And this is going to be our whole contract, right? This is it. This is all it's doing. We've got our variable favorite number in storage. We've got a store function which stores some value to favorite number. And we've got a retrieve function which is a public view function, meaning we're just reading off the blockchain which will return that Un 256 and that's it. Contract.
00:19:42.264 - 00:19:51.048, Speaker A: Yes. Thank you. It says numer. Yes. I already gave all the secrets to life. Sorry. But yeah.
00:19:51.048 - 00:20:24.492, Speaker A: So this is our contract. Cool. So now in remix, what we could do with this, right? This is the exact same code as something we would do in remix, right? It just would look like this. But we're going to want to, maybe we want to write a script, maybe we want to call this store function 1000 times, right. In remix we'd have to keep going to the deploy tab and keep hitting the store function 1000 times, which would super be awful. Or maybe we want to do some other really interesting things or connect it with other projects. Right.
00:20:24.492 - 00:20:57.696, Speaker A: Brownie is going to allow us to do in a much easier way. So first thing we want to do is run Brownie compile in our command line. Now what this is going to do, going to compile everything here the same way remix does. Now if we look in our build folder we see this simplest JSON has got this huge thing in here. And this is the compiled code of simplestorage JSON. We can see like a whole bunch of opcodes in here. Like these are all what's known as opcodes.
00:20:57.696 - 00:21:30.576, Speaker A: We can see a hash, we can see the source, we can see all this stuff, right? This is all the compiled stuff of our contract here. We haven't deployed anything, we don't have any interfaces. But now that we've compiled it we can start to, and it compiled successfully we can start to do some stuff, right? So I'm going to make a new script. I'm going to call it deploy Py. And in this script, this is how we're going to deploy things. This is going to how to do things. This is we're going to have interact with kind of everything.
00:21:30.576 - 00:22:06.164, Speaker A: So to run a script in Brownie we use the Brownie run command. And in fact, actually if you want to see all the Brownie commands, you will just do Brownie help. This will give you all the different commands you can actually run. We're going to run through some of these, but the one we're going to focus on right now is run, which runs a script in the scripts folder. Oh, by the way, compile only works if on the contracts, in the contracts folder. So if you want Brandon to compile something, it has to be in the contracts folder anyways. So we're going to work on this run command.
00:22:06.164 - 00:22:39.652, Speaker A: What the run command does is it reads a main function on one of these scripts that we give it. So we'll say def main and then maybe we want to do just some basic python here. We'll just say print hi or hello world. And if we run brownie, run scripts, deploy py, boom, it'll print out hello world here. Right? So very pythonic here. In fact, we could also run Python script deployed. Actually I'm not going to, don't do that.
00:22:39.652 - 00:23:16.352, Speaker A: That'll confuse you because that won't always work. So we have this main function here. Now what I usually like to do is I like to be very explicit with my functions. So I'll usually create another function called deploy. And then here's where I'll print hello or whatever, and then I'll just have my main function call the deploy function. This is good for later on when you start to have a million main functions and you don't know which one's what. So I usually give every function or every script kind of their own separate thing outside of main.
00:23:16.352 - 00:23:37.316, Speaker A: So if we run this again, run your scripts, boom, prints out, hello. Awesome. And again, feel free to ask questions. Feel free to jump in and talk about anything you want to talk about. So that's where we are right now. Great. So let's go ahead and actually deploy this simple storage contract.
00:23:37.316 - 00:24:21.510, Speaker A: So what we're going to do to get that in here is we're going to say from brownie, import simple storage. So we're grabbing this simple storage contract from Brownie, and in our deploy script we're going to do simplestorage deploy. Now this isn't going to work because we need to give it an account to deploy from. So again, if we run this right now, it's going to air out saying, hey, final argument must be a dictionary of transaction parameters that include a from field specifying the address to deploy from. So we need to give this an account to deploy from. So whenever we do any type of transaction in Brownie, we need to do a from and then specify who it's from. Now, who is it from? Right.
00:24:21.510 - 00:25:12.832, Speaker A: What account are we going to deploy this from? Right. Whenever we deploy in remix, if we're using the JavaScript VM remix gives us a whole bunch of accounts. If we move to injected web3, we're using our metamasks here, we can do the same thing in Brownie, so we can import this thing called accounts. And Brownie gives us some fake accounts, some free accounts to use so we could say from accounts zero. So we're going to deploy this from account zero and let's go ahead and run this now and see if it works. Boom. Okay, so we were able to deploy simple storage contract deployed at this address on our fake ganache chain.
00:25:12.832 - 00:25:51.764, Speaker A: Now you notice every single time I run a script here, something like this pops out, says Ganache CLi accounts, blah blah blah blah blah. All this stuff happens. Now this is because Brownie, if we don't tell it what network to use, it'll go, oh well, you didn't tell me network. I'm just going to spin up a Ganache network. Right? And this exact command, if we actually were to run this ourselves, is the exact same command we could run to spin up our own ganache chain. Right. And it'll give us a bunch of private keys, it'll give us a bunch of available accounts, but, yeah, really cool.
00:25:51.764 - 00:26:43.540, Speaker A: So it's spinning up our own, and then after the script is done, it deletes it. So it deletes it. If we want to keep the network up, we can spin the network up like this, create a new terminal we could run, deploy again. We do brownie, run scripts, deploy. And what Brownie is going to do now is instead it's going to say, oh, well, I see you're already running a ganache chain at where I normally run a ganache chain. I'm just going to stick this into the one that you're already running so it deploys some stuff. And if we go back to where we're running ganache, you'll see a whole bunch of these guest calls basically were made to our node, and this was how we were able to deploy this simple storage smart contract.
00:26:43.540 - 00:27:15.892, Speaker A: Cool. All right, questions. Which framework about front end? Do you recommend angular or react? I've worked a lot with react, so right now I would recommend react, although Stephen Fluan would probably recommend angular. I don't know enough about the differences to really be able to give you a good answer, though. Is Rinkbee broken? No, Rinkbee is not broken, but the faucet is currently broken. I'm trying to get in contact with them to fix it. I'm getting an error because I'm missing Ganache Cli.
00:27:15.892 - 00:27:50.184, Speaker A: Well, you have to install Ganache Cli, so Ganache Cli. So if you come here, you'll need to NPM install Ganache Cli or yarn Global ad. If you don't have these installed, you can look up how to install NPM or how to install yarn first and then install Ganache. Yes, I know there's a couple steps. Okay, great. And someone just asked, how are any functions in the contract invoked? Oh, my goodness. Well, you just asked the million dollar question.
00:27:50.184 - 00:28:33.592, Speaker A: Great. So now that we have a contract deployed to our network here, we can do stuff with it, right? So I'm going to delete the fake ganache running for now, and we're going to work with it. So once we deploy a contract, we can do simple storage equals simplestorage deploy. Right. So now we'll have this contract, and I can even do simplestorage, retrieve, print, simplestorage retrieve. And this is going to call this retrieve function on our simple storage, right? Remember it has this retrieve function and favorite number is going to be initialized to zero. So if I call and.
00:28:33.592 - 00:29:00.432, Speaker A: Sorry, I know I typed this really quickly. So if I call symbol storage retrieve, this print statement should print out zero. So let's run this again. Brownie, run scripts, deploy py. We're spinning up a fake ganache, we're deploying the contract, and then we're printing out the value of retrieve, which right now is zero. Perfect. It's all exactly the way that it should be.
00:29:00.432 - 00:29:54.370, Speaker A: Now, if we were to do simplestorage, store 55 or 77, do you think it's going to happen now again though? So this retrieve function is what's called a view function, right? So since it's a view function, it means we can call it without having to pay any gas because it's not going to change the state of the blockchain. Store, however, is storing data on the blockchain. We're changing the state of the blockchain, we're changing favorite number from zero to 77. This one we have to spend gas on. So we have to use an account. Right? Remember how before it said, hey, everything needs to end with an account? Everything that changes state needs to have an account. So we'll do from counts zero.
00:29:54.370 - 00:30:35.150, Speaker A: And now after this one goes through, actually, so I'll do store transaction equals that. And then we'll say store transaction. Wait, so this line sends the transaction and then this line waits for the transaction to go through, basically. So once it goes through, we'll print simplestorage, retrieve again and we'll see what happens. Right. If we did this right, it should be 77. Yes.
00:30:35.150 - 00:30:55.910, Speaker A: Johnny, run scripts boy. Let's see what happens. Boom. We do indeed print out 77. Right. So this means we successfully called our store function, we stored 77, we waited for that transaction to go through and then we retrieved it. Awesome.
00:30:55.910 - 00:31:24.188, Speaker A: Good questions. All right, so a couple of questions in the chat here, what are the best practices? Secure my RPC connections. In what regard? Yeah, sorry. So the first line is to import the contract. Yes. So in our script here we do from Brownie, import simple storage and accounts. Brownie has a ton of built in things.
00:31:24.188 - 00:32:04.148, Speaker A: Any contract that we write in this contracts folder, we can import with Brownie and then do all this good stuff with. I know you said that hard hat will work with Brownie. Are you going to cover that? No, I'm not going to cover that here. If you go to Brownie ETH docs go to the Brownie documentation and you look up hard hat. Using brownie with hard hat. This will show you how to do that. And I do recommend using hard hat because it is a lot faster.
00:32:04.148 - 00:32:35.008, Speaker A: But if you're familiar with ganache and you like ganache, you can absolutely use ganache. So is it these scripts that interact with smart contracts? Yes, spot on. So it's these scripts that interact with smart contracts. So in here we're deploying a smart contract, we're storing some data in the smart contract, and then we're just reading what we stored. Yes. Can smart contracts self execute without scripts? No, they can't. You do need somebody or something to change state, right? Because somebody has to pay the gas.
00:32:35.008 - 00:33:05.144, Speaker A: Now keepers is a perfect example of a tool, actually, if you went to that last workshop that allows smart contracts to almost self execute. Right. They allow you to choose when they'll execute. For example, in this example, this checkup keep function has them execute whenever a certain interval has passed. Right. Good question. Why doesn't it print zero and 77? You ran print twice.
00:33:05.144 - 00:33:23.088, Speaker A: Oh, it did. But it also shows all the logging of the transactions. Great question, actually. So first we did our deploy. Right? So we did our deploy first. This is all kind of the transaction information for deploy. And then we called print.
00:33:23.088 - 00:33:41.050, Speaker A: And then we did the second transaction. And then we called print. So deploy, print. Second transaction. Print. Great question. What's the difference between truffle and hard hat? They're made by different people, right? They're different.
00:33:41.050 - 00:34:11.244, Speaker A: We do a lot of our demos with hard hat. Hardhat is really fast, and it's what most of the top blockchain protocols use. So, like, for example, if you were to go on to defi pulse, if you go on, you know, ave is using hard hat maker is actually using something called dap tools. Curve finance uses brownie. I'm not sure what instadapt uses. I think compound uses hard hat. Convex use brownie.
00:34:11.244 - 00:34:34.700, Speaker A: Uniswap is hard hat. Urine is brownie. I think sushiswap is hard hat. So yeah, a lot of these top protocols are using hard hat or brownie. Great questions, amazing questions. Okay, cool. Now let's say we want to interact with a contract we've already deployed.
00:34:34.700 - 00:35:30.430, Speaker A: Well, that's a wonderful question. So Brownie actually saves where it stores contracts in its deployments folder over here. If we want to interact with a contract, we've already deployed. Another way we can do it is do something like this. So we'll say, hey, get me the most recently deployed simple storage project. Now, for local development chains, Brownie doesn't save them. So what you can do if you want it to save them is create a brownie config Yaml and add some stuff in here, right? So Brownieconfig Yaml is kind of where you add any parameters about your project.
00:35:30.430 - 00:36:25.240, Speaker A: There are some parameters you can add to save local deployments, but for the most part I ignore doing that because if you're testing locally, you can just kind of spin everything up yourselves. But for real networks, like a testnet or a main net, Brownie will keep track of where you've deployed these things. So that's what we're going to learn how to do first, and then we'll learn how to interact with already deployed contracts. So we're going to learn how to deploy this contract to the coven testnet. And this will be the same process for deploying this contract to Mainnet, to Polygon, to whatever. So what we're going to need to do 1 second is we're going to need a couple of environment variables before we can actually deploy. So Brownie has this thing called networks.
00:36:25.240 - 00:37:08.472, Speaker A: So if I run brownie networks, Brownie Networks list, it prints out this massive thing, right? So Brownie keeps track. You have to save to Brownie what networks you're wanting to work with, right? So these are kind of all the ones that I currently have saved. So we have Mainnet, Robson, Rinkby, Sokol, Matic, Binance, smart chain, XdAi, Ganache and a whole bunch of random ones. Don't worry about ETH classic. And then some development ones. If you want to add a new network, you'll do Brownie networks add and this will add a new network. And then you can start deploying to different networks.
00:37:08.472 - 00:37:46.970, Speaker A: So Brownie, if you want to add a new EVM one, you could do Brownie, add something like Ethereum, you could name the network, maybe like Avalanche or something. And then all you have to do is give it a host, which we'll talk about in a second. And then the chain ID. Chain id equals. So the host is going to be what's called your RPC URL. And then the chain id is going to be your chain id. So for example, if we look up like avalanche chain ID, and then you don't have to do this, just kind of showing you as an example.
00:37:46.970 - 00:38:25.716, Speaker A: But anytime you look up like a chain ID or an RPC URL, any EVM compatible chain is going to have a chain iD, right? So for example, for avalanche, four, three, 1114, is going to be the chain id and RPC URL is going to be something like this. If you're running your own, well, that's if you're running your own avalanche chain. Hold on, I guess they don't have an example RPCRl here, but you get the picture. In any case, that's how you add new networks. Now it comes with a whole bunch already. Mainnet rots and rinkby Correli. I actually don't know how to pronounce it.
00:38:25.716 - 00:39:02.428, Speaker A: And then COVID. And they have this infuria thing here. So brownie knows that these are pretty common for people to use. And what you can do is you can create environment variables. So those of you who don't know too much about environment variables, I'm going to post a link in the chat to explain more about environment variables. However, we're going to do the easy way for environment variables here. So what we're going to do is we're going to create a Env file, and this is where we're going to stick all of our environment variables.
00:39:02.428 - 00:39:43.128, Speaker A: Now, everything in this folder, you should absolutely not push this to GitHub. Don't share this folder with anybody. Right? So in git ignore we have this env, meaning this git ignore will help you prevent pushing it to Env, but you can still accidentally do it. Please don't push anything in here to GitHub because it can be seen by anybody else. But we're going to need a couple environment variables in here. We're going to need a web3 inferior project ID and a private key. So your web3 inferior project ID is going to be your connection to an inferior node.
00:39:43.128 - 00:40:38.140, Speaker A: So if you go to infura, whoops, you can log in, sign up, and you can get a free infura RPC URL. Once you get in here, you can grab a coven project ID or excuse me, you can grab your project ID and just set it in here like Project ID, like that. Next you're going to get your private key out of metamask. So you come to Metamask, you come to here, you go here, account details, export private key and then you put in your password again. This is why you absolutely shouldn't share this with people, right? Because this is going to have your private key. I always develop with a fake dummy account. So this account has no money in it for Mainnet.
00:40:38.140 - 00:41:13.800, Speaker A: It's super broke, which is good, right? Always, always develop in an account that doesn't have money in it on the main network. So it can have money in it. On Coven, on Robson, who cares about those? Don't develop on something that has real money associated with it. Okay, great. Once you export your account, you'll come to here and you'll paste it in here. But make sure just add a zero X and then paste it here and boom. Now that you have your web3 inferior product ID and your private key, you're pretty much good to go.
00:41:13.800 - 00:41:37.536, Speaker A: The only other thing you'll have to do is in your brownieconfig. Yaml is you'll need to tell Brownie that there are environment availables in there. So you say Env. So you're saying, hey, the Env file is at Env. Great. Am I missing something here? We'll talk about verification later. Okay, cool.
00:41:37.536 - 00:42:32.160, Speaker A: So let's go ahead and deploy this and run this whole thing but on the COVID network, right? So I already have my web3 project ID and my private key set as an environment variable. Again, if you want to learn more about how I set it myself, go ahead and jump into that link that I sent. But let's run scripts, deploy Pynetwork, COVID. Sorry, 1 second. Where my stuff go? Oh, that is not what I wanted to do. Sorry. All right, sorry.
00:42:32.160 - 00:43:13.756, Speaker A: So if you run this now, you're going to get this list index out of range. Sorry, let me run that again. Sorry about that. List index out of range. Now why is that? Well, in Brownie, what we're doing right now is we're still importing accounts, right? So this accounts thing is Brownie giving us ten fake accounts to use, but we don't want to use one of Brownie's fake accounts, we want to use a real account. So what I'll do is I'll come to this Brownie config, I'll say wallets from key and then I'll put this syntax in here. What this does is it puts your private key environment variable at the wallets from key in our config.
00:43:13.756 - 00:44:26.248, Speaker A: And what we can do now instead of account zero is we can say account equals config wallets from key accounts, add config wallets from key, and then we'll have to import config from Brownie two. This is going to give us a new account from that private key. And now what we can do is we can do from account from account instead. Now if we go ahead and run this, run your own scripts, deploy, it's going to actually deploy this to coven. Right? And so we just deployed with this transaction and now we're storing 77. Now what we can do so we can grab go to COVID ether scan, paste it in here and it looks like it hasn't quite updated yet. Now it's updated and the transactions are coming through still.
00:44:26.248 - 00:45:04.650, Speaker A: But we have this piece here which is awesome, right? We can even see we called store here. Now if we go to contract, it's going to be just the bytecode which isn't very useful for us. Right. We want to be able to see what this code looks like. So what we can do is on etherscan there's actually a ether scan we can actually get. Where is it? API documentation. We can get an ether scan API key to verify our stuff, to verify our code.
00:45:04.650 - 00:45:20.732, Speaker A: And here's the docs on how to create account and getting an API key. I'm going to post this in the chat here too. That's the wrong one. That's usage statistics. Viewing API usage. Okay, well no, that is the right one. And you can create an API key.
00:45:20.732 - 00:46:12.012, Speaker A: Once you have an API key again in your env, you can save that as well as your ether scan API key equals whatever it is. I've already got mine set. Now what you can do in your deploy script now is when you deploy it right at the end, you can do comma publish, source equals true. Keep in mind this won't work for Ganache. So if you run a ganache chain, you'll error out if you have this code in here. But if we run this now, Brownie run scripts, deploy PyNetwork COVID what's going to happen now is we'll deploy this contract and then we'll verify and publish the source of this contract. Right? So we've deployed it here and now it says waiting for blah blah blah to process contract again.
00:46:12.012 - 00:46:41.428, Speaker A: I already have my etherscan API key set. That's why I commented it out here. This little thing here is a comment. That means we're commenting it out. But once this goes through, we will be able to have it verified saying verification, submit successfully, waiting for result. And while it's verifying, I'm going to jump into some questions here. I'm getting error, transaction gas price zero is too low for the next block.
00:46:41.428 - 00:47:22.096, Speaker A: You probably need some testnet COVID in your metamask. If a keeper calls a function in a smart contract and a script also calls a function, which call takes precedent? Oh, this is an amazing question. Okay, so it depends on who gets there first and by who gets there first. I mean, every transaction is included in blocks by miners so it depends on who the miners include in that block first. So it's up to whoever mines the transactions. Really? Good question. Yesterday I spent $2 to launch one smart contract on BSC.
00:47:22.096 - 00:47:35.496, Speaker A: Lol. Because I forgot to change the network. Dang rats. And the command, like you can type exploit API equals blah. Not if you're on windows, but yes if you're on Linux or Mac. That great? Yes. Oh, these functionality is great.
00:47:35.496 - 00:47:52.044, Speaker A: I think the unique mode to verify code is copy and paste in an only file. I was getting an error compiling from the Browning config naming. I changed to Browning config and it compiled. That's weird. That shouldn't be right. Order of the transaction. Yeah.
00:47:52.044 - 00:48:43.810, Speaker A: So we go, we deploy first we store, and then we store, right? And so here we see pass verified. If I grab this now, sorry, I cut out there for a second. Am I good? Can everyone see me again? Yeah, we're good. Okay, cool. Um, if I post this contract in now, now see, go to contract. We can see it's verified, and we can see all the stuff to do with this, right? So we can go to read contract retrieve. We can see 77 is in here now.
00:48:43.810 - 00:49:21.134, Speaker A: Awesome. So we only have ten minutes left here, so I want to be able to show you all this other really cool thing. This is kind of the real basic setup of brownie. Now, Brownie has a ton more tools, like I said, including testing and being able to work with other stuff. Let's do one other thing called Brownie baking. If we go to Chainlink mix GitHub, there's this thing called a Chainlink mix, right, which comes with a ton of chainlink smart contracts already in the contracts. It's got a whole bunch of chainlink scripts in here.
00:49:21.134 - 00:49:50.686, Speaker A: It's got a ton of tests for us to run our tests, and it's incredibly, incredibly helpful for getting started with a solid brownie smart contract project. And what we can do to get that is bake it. So we'll do Brownie bake. Chainlink mix folder already exists. User Patrick demo is chainlink. Oh, remove RF. Don't ever do remove RF.
00:49:50.686 - 00:50:08.414, Speaker A: This is my demos folder, so I don't care. Brownie Bake chainlink mix. You can also do a git clone if you want. That works as well. But Brownie Bake is kind of cool. And this creates a new chainlink folder, a chain link mix folder. So I'm going to open up this chainlink mix folder here with code.
00:50:08.414 - 00:50:39.370, Speaker A: But again, you can use file open if the code command doesn't work for you. And now we have a project that we've quote unquote baked with all this stuff in it. So it's got contracts, it's got scripts, the whole shebang, the whole nine yards in here. We have all these tests that are defined. I definitely recommend you checking them out. We can run through all these tests just with brownie tests. What this will do is it'll compile everything and then it'll start running some tests.
00:50:39.370 - 00:51:12.002, Speaker A: Some of them are skipped because they're integration tests. But on a local ganache chain, we test all of our contracts and everything. There are also some pretty clever scripts in here. For example, we have this get account function that we've created. And what this does, it figures out if you're on a local chain or on a testnet, right? If you're on a local chain, it uses the brownie built in accounts. And if you're on a testnet, it uses what you have in your config. So if we go down to config, there's a whole bunch of stuff in here.
00:51:12.002 - 00:51:54.786, Speaker A: Don't get overwhelmed. But again, if we scroll to the bottom, we see wallets from key. Right? Another thing you'll see is we have this minus one syntax. Remember, this only works if Brownie is saving where those contracts are deployed. And it doesn't save on a development network, it only saves on actual networks. But we also have all these scripts. Like I said, for example, if I wanted to deploy a price feed contract, which again, if we go to docs chain link, remix docs chain link, if I go to get the latest price, scroll down to here.
00:51:54.786 - 00:52:36.160, Speaker A: If I wanted to deploy this code with Brownie and test it and do a whole bunch of stuff, I could do brownie, run scripts, price feed scripts, one, deploy price consumer v three py. I can even do network coven. And it's also smart enough here to know, hey, whether or not to publish source. And if there's no published source, it just defaults to being false, basically. And that's basically it. So we've deployed it and then we also have read from it. The current price of ETH is 4152.
00:52:36.160 - 00:53:12.778, Speaker A: So that is it. We have a couple of minutes left. We'll take for questions, and then we'll jump into the Morales workshop, which is going to be absolutely jump into the Morales workshop, which is going to be absolutely awesome. Let me flip back to me to take any questions. All right. Yep. Should I also include my front end code in a brownie project or is just for smart contracts? Plus simple scripts if you want.
00:53:12.778 - 00:53:41.540, Speaker A: So I've done some demos where I'll have a folder called front end and I'll put all the front end in there. Once you get sophisticated enough, generally the front end is its own repository outside of this. So you can kind of think of this as your backend framework. Right. And the front end framework is going to be a little different, I believe. Private key can be secured in an azure key vault, actually. So Browning has a really great keyword management process as well.
00:53:41.540 - 00:54:34.830, Speaker A: Let me actually, you can actually encrypt your private keys if you don't want to do them as environment variables, which is really good, and I highly recommend that way for doing more secure deployments. How big can a smart contract project get? Is it better to deploy one big project with many smart contracts, or am I better splitting it up into multiple projects with a few contracts? It depends on what you want to do. Yeah, it really depends. So a smart contract can be as big as a block will allow. I forget what the actual block size is, but you could be the one transaction that fills up a block. Yes, I'm sure that would be crazy expensive though. So a smart contract itself can be as big as a block, but yeah, you can split it up into multiple smart contracts, so it's not really a big deal.
00:54:34.830 - 00:55:12.190, Speaker A: Okay, all clear. Okay, great. How do you integrate with this with front end code? Yep, we will have some front end, we'll have some front end examples, I think, this week, and actually definitely go to the Morales one right after. That one's going to show a ton of wonderful front end stuff. I've done a number of projects with Brownie and Morales that are great. Also, if you could please see the, that's the wrong whatever. If you could please see that workshop form that I just sent, that would be great.
00:55:12.190 - 00:56:03.346, Speaker A: To get some feedback on this workshop here. Can you give a summary about keeping your environment variable safe? Paranoid about typing in anywhere? Yeah, this is a good question. So typically I don't use environment variables with my production stuff. For the most part, Browning has a really cool encryption feature that I will take advantage of oftentimes. And yeah, I'm going to send that here. Brownie f else account load. So check this out.
00:56:03.346 - 00:56:48.560, Speaker A: Post in the chat here. What you can do is you can save an account and it gets saved as a key store, basically. So it encodes, you'll do Brownie accounts new, and then you'll name your account, you'll copy paste your private key there, and then you'll encrypt it with some password, and anytime you want to use it, you'll decrypt it with your password, which is obviously better than having it as environment variable. So that's what if I am deploying to a network, I'll load it and password encrypt it and do it like that. So that would be best practices. And that's actually one of the benefits of Brownie, too, is Brownie has that built in. I would love to see hardhead have that.
00:56:48.560 - 00:57:15.746, Speaker A: Any other questions? All right, great. Well, looking forward to seeing everybody in the discord. Oh, one more question. Is there a possible way of making NFT that getting old using chainly keeper post me making NFTs that getting old using. Not sure what the question is, but we have a whole bunch of NFT workshops. You should definitely go to them. All right, well, thank you, everybody, and looking forward to seeing you at Morales.
00:57:15.746 - 00:57:22.020, Speaker A: Everybody who asks questions about front end definitely go to the Morales ones. We have a couple Morales workshops at the sackathon and we'll see you then.
