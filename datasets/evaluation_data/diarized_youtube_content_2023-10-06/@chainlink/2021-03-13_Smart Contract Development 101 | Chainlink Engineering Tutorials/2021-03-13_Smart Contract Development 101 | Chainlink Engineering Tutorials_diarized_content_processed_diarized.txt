00:00:00.250 - 00:00:46.730, Speaker A: Hi, welcome to the Chainlink engineering tutorials basics. This is for engineers new to smart contracts, new to Chainlink, and new to solidity development. We're going to show you how to go from end to end deploying your first solidity smart contract using Chainlink, the standard for decentralized oracles. We're going to be using Chainlink's most popular feature, data feeds, which is a way to get decentralized points of truth for specific data points, such as the price of ETH in USD. We're going to be covering a lot in this video and it's a great place to learn about Ethereum, Chainlink and smart contracts in general. If you're following along, be sure to have the documentation open as well because that's going to have the most up to date information on how to do everything that we're going to cover in this video. Chainlink data feeds are being used by the top projects in Defi and you can learn how to use them in your project.
00:00:46.730 - 00:01:42.838, Speaker A: Right now in this video, we're going to go over what smart contracts are, how to write them, why oracles are so important, and how to use data feeds in your smart contracts. And then of course we're going to deploy your first smart contract. We're going to be working with Ethereum because Ethereum is currently the most popular smart contract platform out there. So what is a smart contract? A smart contract is a set of instructions that when deployed to a blockchain, is automatically executed without any third party intermediaries, just like any other software system. The output of the smart contract depends on how the smart contract is written in code. The big difference is that that code isn't executed on a centralized server or run by a centralized entity. This lack of centrality or decentralization is one of smart contract's most powerful features.
00:01:42.838 - 00:02:22.070, Speaker A: We're not going to go into the nitty gritty in how these blockchains work under the hood. We're also not going to go into how the cryptography keeps it honest. But if you want to learn more, there's some links in the description below that will help you. Another massive feature of these smart contracts is that they can store and manage assets such as Ethereum or Chainlink. Chainlink is a type of asset, for example, that's known as an ERC 20 token, or more specifically an ERC 677. And if you want to learn more about these tokens and how they work on Ethereum, again, there's a link in the description which will help you out. We can see and manage these assets on chain using an Ethereum wallet or a blockchain wallet.
00:02:22.070 - 00:03:16.710, Speaker A: Each cryptocurrency or blockchain wallet has a unique address and you can use that address to send and receive currencies from those specific individuals who own that address. This opens the door up to program these transactions to send and receive, and this is how we get into what smart contracts can actually do. Currently, the most popular way to develop smart contracts is using the programming language solidity. Solidity is a language that's constantly being improved and was created by the Ethereum foundation for the sole purpose of building these smart contracts. A contract in solidity or a smart contract is very similar to a class in Java. We won't be teaching about all the bells and whistles that solidity has, but again, there's some fantastic learning resources out there and we've left some in the description. Once we write our solidity code, the next question will be what do we do with it? Now, once we write our solidity contract, the next step we will have to do is deploy it to a blockchain.
00:03:16.710 - 00:04:16.318, Speaker A: When someone says they deploy or migrate their smart contract, this means that they're taking their code, pushing it onto the blockchain where it will live forever. Once you deploy that code on chain, that code cannot be changed, meaning it's immutable. This is another one of the fantastic features that blockchain has to offer is this immutable history, this immutable record of these smart contracts. Similar to wallets, smart contracts once deployed, also get their own addresses so you can send and receive funds with these smart contracts as well. Once we get the address of that smart contract, and we know the functions that it has known as the ABI, we can use different packages to interact with these smart contracts on chain, such as web three Js, web three PI or ethersjs. Smart contracts can be written to interact with other smart contracts, or they can be written to interact with wallets. Now, because of the security and consensus protocols of blockchain, blockchains and smart contracts themselves can't actually interact or get data from the outside world.
00:04:16.318 - 00:05:15.950, Speaker A: But if we deploy a smart contract that can't actually interact with the real world, well, how useful for us is that? Without a reliable connection to the outside world, smart contracts and blockchains stay this walled garden that we don't have access to. This is where oracles come in, and this is why Oracles are so important to the blockchain ecosystem. Oracles are the bridge between the blockchain world and the smart contract world and allow these smart contracts to automatically execute based on any input or output from the real world. In addition, if you write your logic and your smart contract on a decentralized platform like Ethereum, but you use a centralized oracle or a centralized connection to the real world, you've now create a centralized entity in your decentralized smart contract. Your logic layer is decentralized, but your data layer is centralized. This defeats the purpose of building on a decentralized blockchain in the first place. If all your logic in your smart contract executes in a decentralized manner, yet someone can flip a switch and turn off your oracle, your application's centralized.
00:05:15.950 - 00:05:46.934, Speaker A: This is why having decentralized oracles is critical. This way, your smart contract applications can stay truly decentralized. Relying on centralized oracles is also an easy attack vector. This is where chainlink comes in. Chainlink is the standard for oracles and the standard for decentralized oracle networks. Chainlink allows the decentralized logic of your smart contract to interact in a secure, honest and reliable way with your decentralized data from the real world. Doing the right thing is infrastructural with Chainlink.
00:05:46.934 - 00:06:28.966, Speaker A: So how do engineers use Chainlink? As mentioned, the most popular way engineers use Chainlink is through Chainlink's data feeds. These data feeds allow smart contract engineers a decentralized reference point on certain pieces of data, such as cryptocurrency pairs like the price of S and USD. These are decentralized data points on chain that are coming from a decentralized network of chainlink nodes or Chainlink oracles. These data feeds are used by Defi giants like AAVE and synthetics. These data feeds and these data points are the aggregate of multiple chainlink nodes reporting the data on chain. Each chainlink node gets its data from a different off chain source. They all aggregate it and then they report the result.
00:06:28.966 - 00:07:08.430, Speaker A: Each data feed has an onchain address that we can use to interact and get the data from that address. They also have an Ens address which you can learn about in the description. And we now have access to accurate, secure, reliable pricing data on chain that we can use in our smart contracts. And the best part is this is scalable to include any type of data out there, and we're already starting to see more and more different kinds of data be stored on chain through Chainlink. Here's an example of a smart contract that's using Chainlink data feeds. Looks like, and this is also going to be the smart contract that you're going to deploy. Remember, everything that we're going over in this video is also in the documentation, so be sure to have that open and be using that as a reference.
00:07:08.430 - 00:07:11.894, Speaker A: If you get stuck, you can always jump into the chainlink discord and ask.
00:07:11.932 - 00:07:24.726, Speaker B: For help due to this bleeding edge technology moving so fast. Always be sure that when you click on one of our technical videos, you scroll down to the description and check for any updates. That way you'll know you're always up to date.
00:07:24.908 - 00:07:25.950, Speaker A: The first thing that we're going to.
00:07:25.960 - 00:07:34.842, Speaker C: Need to get started is an Ethereum wallet. There's a link in the documentation that it brings us to the metamask site, which is a very popular Ethereum wallet. It's just a browser extension.
00:07:34.906 - 00:07:35.998, Speaker A: You'll know you've done it right when.
00:07:36.004 - 00:07:37.198, Speaker C: You see a little cute fox in.
00:07:37.204 - 00:07:38.238, Speaker A: The top right of your screen.
00:07:38.324 - 00:07:41.386, Speaker C: We also have another video that goes into the installation step more in depth.
00:07:41.418 - 00:07:42.170, Speaker A: If you get lost.
00:07:42.250 - 00:07:59.426, Speaker C: Link in the description once you get it, you see in this wallet that there are many different types of networks such as Coven, Mainnet and Robston. Everything under the Ethereum mainnet is considered a testnet. These are networks that resemble the Ethereum mainnet and we can use to test our smart contracts without having to spend any actual ETH. We're going to be using coven for.
00:07:59.448 - 00:08:00.706, Speaker A: This demo, but be sure to check.
00:08:00.728 - 00:08:04.182, Speaker C: The documentation because the test network that we work with may change from time to time.
00:08:04.236 - 00:08:05.426, Speaker A: Now that we have our Ethereum wallet.
00:08:05.458 - 00:08:22.950, Speaker C: We need to fund it with Testnet Ether and we can get this for free. As you can see, mine's already funded. There are many different types of faucets. We're going to use this one. All we need to do is sign in, authorize with GitHub. Twitter also works. We join the room, then we just copy paste our address and the bot will automatically respond and send us some ETH.
00:08:22.950 - 00:08:54.114, Speaker C: Again, reference the documentation for a different faucet and we also have another video explaining this step really thoroughly. If you get lost, you'll know you've been successful when you can see your balance have more than zero ETH here. Once you have your test in Ethereum, you can click this link to open up. Remix Remix is a powerful web ide that we can use to interact with the blockchain and deploy our smart contracts. We want to make sure that we're on the coven testnet when working with Remix because we're going to be testing our smart contracts. We'll also want to make sure to select solidity as our programming language on the left hand side. We're going to go to gists and we're going to choose the gist that we just opened.
00:08:54.114 - 00:09:16.314, Speaker C: I've used this a few times so I have a couple more. This will render the solidity code or the smart contract that we're going to deploy. This is the code that defines working with Chainlink price feeds. You'll see this line here says price feed equals aggregator v three interface and then a giant string. This string is actually the address of the aggregated price combination. We're looking to get the price of Ethereum in USD on the coven network.
00:09:16.442 - 00:09:18.094, Speaker A: And this is the address of that.
00:09:18.132 - 00:09:20.110, Speaker C: Smart contract that will give us that information.
00:09:20.260 - 00:09:21.694, Speaker A: You can swap that out with any.
00:09:21.732 - 00:09:50.306, Speaker C: Of the other massive amount of Chainlink price feeds available. The function get latest price actually calls upon that smart contract and says excuse me, could we get the latest price please? We're going to be getting the latest price of Ethereum in US dollars. Now that everything's set up for us, we're going to go ahead and deploy this smart contract. So first we need to compile it, then we're going to hit the deploy tab, switch to injected web three and again this will tell you if you're on the COVID test network. Then we scroll down to the deploy.
00:09:50.338 - 00:09:52.858, Speaker A: Button and metamask will pop up asking.
00:09:52.944 - 00:10:12.638, Speaker C: If we want to confirm this transaction. We do. So we're going to hit confirm and we'll get a link to Etherscan which will actually show us our transaction going through. After a refresh or two we can see that the contract has successfully been deployed. Now back in remix we can see at the bottom here we have a list of deployed contracts. We only have one right now, but we see our get latest price function.
00:10:12.724 - 00:10:13.998, Speaker A: And if we click it we can.
00:10:14.004 - 00:10:16.062, Speaker C: See we have the latest price of Ethereum here.
00:10:16.116 - 00:10:17.530, Speaker A: One important thing to note is that.
00:10:17.540 - 00:10:21.234, Speaker C: Solidity doesn't work very well with decimals so it actually multiplies the decimals out.
00:10:21.272 - 00:10:22.914, Speaker A: If we multiply the decimal back in.
00:10:22.952 - 00:10:26.786, Speaker C: We'Ll find out that this is the actual value, $562.
00:10:26.888 - 00:10:44.740, Speaker A: There are limitless smart contracts that have yet to be built and you just learned how to use one of the most powerful tools in the space. Be sure to celebrate your first smart contract deployment. Jump into the discord, say something on Twitter or just say hello. Be sure to join the Chainlink and smart contract engineering community and I hope to see you next time.
