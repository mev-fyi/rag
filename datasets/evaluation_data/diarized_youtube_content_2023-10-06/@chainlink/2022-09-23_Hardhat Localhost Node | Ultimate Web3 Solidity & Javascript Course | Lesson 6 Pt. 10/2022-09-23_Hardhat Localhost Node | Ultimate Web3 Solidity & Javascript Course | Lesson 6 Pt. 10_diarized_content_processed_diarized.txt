00:00:08.730 - 00:00:19.098, Speaker A: As you're starting to see, this config piece is pretty powerful, and we can use it to modify our entire code base and our entire project to give our project more functionality.
00:00:19.194 - 00:00:20.398, Speaker B: What else can this do?
00:00:20.484 - 00:00:37.106, Speaker A: Well, right now, as you can see, every time we work with the hardhat network, every time we run a script, we run that script, and then the hard hat network is deleted, right? We can't interact with our contracts anymore. Well, there's actually a way for us to run a hard hat network similar to how we ran a Ganache network.
00:00:37.138 - 00:00:38.338, Speaker B: With a user interface.
00:00:38.434 - 00:01:17.890, Speaker A: What we can do in Hardhat is run yarn hardhat node, and what this will do is it'll spin up a node on a local network exactly the same as Ganache, but in our terminal. So you see here started HTTP and webSocket JSON RPC server at this address. And just like Ganache, it comes packed with all these different accounts and private keys, which is awesome. You'll notice though, interestingly enough, that this node that we're running isn't on the hard hat network. Well, we can actually create a new terminal to try to interact with this just by hitting this little plus button.
00:01:18.040 - 00:01:19.810, Speaker B: And creating a new terminal.
00:01:19.890 - 00:01:24.086, Speaker A: Again, I'm using bash, but based off of whatever your operating system is, you.
00:01:24.108 - 00:01:26.018, Speaker B: Could be using a different shell.
00:01:26.114 - 00:01:32.198, Speaker A: And in here, let's go ahead and run yarn hardhat, run scripts, deploy js.
00:01:32.374 - 00:01:33.642, Speaker B: And see what happens.
00:01:33.776 - 00:02:01.102, Speaker A: Well, our typical setup happens. We deploy a contract, we get a contract address, we update the value. But if we look at our node, it doesn't look like any transactions went through. We don't see any logging here. So what's going on? Well, our hard hat network is actually different from this locally running network here. This locally running network we often want to refer to as our local host. So it's slightly different than the hardhead network.
00:02:01.102 - 00:02:36.538, Speaker A: It's still using the hardhead runtime environment, but it's just not this default hardhead network. It's considered its own separate network. When we're running a node that is going to live past the duration of a script, so we can actually interact with this by adding a new network to our hardhead config js, we'll create a new network and call it localhost. And exactly as we did up here, we'll give it a URL accounts and a chain id. So for a URL, we can get that URL right from our terminal output.
00:02:36.554 - 00:02:45.378, Speaker B: Of running yarn hardhat node. By copying that and pasting it in here, we can then do a comma, we'll give it a chain id of.
00:02:45.464 - 00:03:09.030, Speaker A: 31337 because even though it's considered a different network, it actually has the same chain id as Hardhat. Interestingly enough, I know I just said we were going to give it accounts, but we actually don't need to give it accounts because when we run with this localhost, Hardhat will automatically give us these ten fake accounts for us. So you can kind of think of the accounts here for this local host.
00:03:09.790 - 00:03:13.462, Speaker B: As Hardhat, already placing them in. Thanks Hardhat.
00:03:13.606 - 00:03:47.982, Speaker A: But now if we go back to our bash here, let's clear the terminal, let's rerun this script, and we'll do network localhost. Now we should be pointing to this node, and when I run this script, we should see some logging output at the end of this node. So let's go ahead and hit enter. Well, we see our normal stuff on our deploy script. We flip back to our node. Wow, we see a ton of logging here, similar to ganache. We can see a whole bunch of different logs on what just happened.
00:03:47.982 - 00:04:18.218, Speaker A: We can see a contract was deployed, we can see the address, the transaction hash from value gas, and the block number and everything. We can also see our contract call calling the store function to update the value of our favorite number. This is incredibly powerful for quickly testing and working with things on a local Javascript, VM or hardhat network to be able to see how your contracts will interact on a real testnet. And this is much quicker than working with a real testnet.
00:04:18.314 - 00:04:26.482, Speaker C: Now additionally, same as what we said before, any process that's running in the terminal, we can kill it with control C. So if you want to stop.
00:04:26.536 - 00:04:29.586, Speaker A: Your node and then restart it, you.
00:04:29.608 - 00:04:32.066, Speaker B: Can hit Ctrl C to stop it.
00:04:32.088 - 00:04:33.454, Speaker C: And then just up and then rerun.
00:04:33.502 - 00:04:36.382, Speaker A: That same command to respin up your node.
00:04:36.446 - 00:04:40.278, Speaker B: Control C stops it and then you can hit up to start it again.
00:04:40.364 - 00:04:44.806, Speaker C: Another way you could stop it, of course, is if you hit the trash can which deletes the whole terminal, we.
00:04:44.828 - 00:04:50.246, Speaker B: Pull the terminal back up, we can run it again. And just remember, if you hit the.
00:04:50.268 - 00:04:52.818, Speaker C: X that actually doesn't delete the terminal.
00:04:52.914 - 00:04:54.310, Speaker B: That just hides it.
00:04:54.460 - 00:04:57.494, Speaker C: So our hardhat node right now is still running because I just hit it.
00:04:57.532 - 00:04:58.406, Speaker B: So if I pull it back up.
00:04:58.428 - 00:04:59.814, Speaker A: I can see that it is indeed still running.
00:04:59.852 - 00:05:12.380, Speaker B: But if I trash can it and then I pulled the terminal back up, I can see that it is no longer running. Close.
