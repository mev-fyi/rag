00:00:08.890 - 00:01:12.350, Speaker A: So I'm in a brand new vs code and we're going to create a new folder for us to run all this. Now what you can do to create a brand new folder is once again you can do Mkdir hard hat simple storage fcc now we can CD and to hardhat simple storage FCD and type code period. And this will open up a new visual studio code inside of that folder. Now if we open up our terminal, you'll see that we are indeed inside of that folder. Now if that doesn't work for you, you can still of course do file open folder and select the folder you'd like to open and you'll be inside of that folder. Now that we have our folder set up for working with Hardhat, we can begin setting up our environment to be incredibly professional using the hardhat framework. Got a link to the Hardhat documentation inside our full blockchain solidity course js the hard hat documentation is phenomenal and I highly recommend everybody have it up as they go through this section because it's going to give you pretty much everything that you need to know for working with Hardhat.
00:01:12.350 - 00:01:45.514, Speaker A: You can simply go ahead over to tutorial and get started. If you want to pause the video here and read through the tutorial, I recommend doing so. It'll give you a lot of information about how to work with Hardhat and more about hardhat. However, we're just going to jump right into setting up the environment. We've already installed node js on Linux or macOS and those of you who are using Windows, I set you up with WSL so you can just follow the Linux instructions. Now to create a new hardhead project you can actually just go ahead and run these steps right here. Instead of NPm we're going to be using yarn.
00:01:45.514 - 00:02:15.222, Speaker A: But if you want to use NPM you can absolutely do so. The hardhead docs say run NPM initias. We're just going to run yarn init which is going to create a new project for us in this folder. So let's give it a name which if we want it set to this hardhat simple storage FFCc, we just hit enter, we'll give it a version and when if we want it 1.0.0, we just hit enter. We're going to skip the description for now just by hitting enter and we're just going to hit enter for this as well. Enter for this as well.
00:02:15.222 - 00:02:46.368, Speaker A: Enter for this as well. Enter for this as well. Enter for this as well just to keep those as blanks and if we look in package Json, we now see we have a name, Hardhat symbol storage FCC. We have a version, we have a main, which we're actually going to delete the main, and then we have a license as well. Yarn init just sets up this package JSOn for us. Now we're going to do yarn add Dev Hardhap. So far we've just been running yarn add and then whatever our package name is.
00:02:46.368 - 00:03:21.032, Speaker A: But for most of what we're doing, we really want to do Yarnad dev. The reasons for this is a little bit nuanced, but we can see some of the information on this stack overflow question here. The main difference is that dependencies are required to run your project, whereas dev dependencies are required only to develop. For the most part, we're going to be doing just dev. When we get to the front end portion of this course, we'll be installing more packages that we don't need just for development. Now, in the same directory where we install Hardhat, you can run MPX hardhat. So a quick note about MPX is that the yarn equivalent of NPM is just yarn.
00:03:21.032 - 00:03:53.016, Speaker A: So yarn equals NPM. The yarn equivalent of MPX is also yarn. So pretty much anytime you see MPX do something, you can just replace that MPX with yarn, and it'll do the exact same thing. If you want to run this with NPM or MPX, you can absolutely do that as well. So for us, we're going to run yarn hardhat, and we'll see. We'll get prompted to actually start creating a hard hat project, run yarn hardhat, and we'll get this wonderfully cute prompt right here and saying, welcome to Hardhat. What do you want to do? Create a basic sample project.
00:03:53.016 - 00:04:45.492, Speaker A: Create an advanced sample project. Create an advanced sample project that uses typescript or create an empty Hardhat config Js for us, we're just going to select create a basic sample project, and this is going to give us all the boilerplate for a really simple Hardhat project. The Hardhat project root is going to be this folder that we're in right now. Do you want to add a git? Git ignore? Yes, we absolutely do, because we're going to be using Env files. Do you want to install this sample project's dependencies with yarn at nomic labs, Hardhat at Ethereum, waffle at Chi? We're going to go ahead and say yes, and I'll explain what all these dependencies are in a bit. Let's go ahead and say yes for now, and we're going to install all of these dependencies. Now, if we look in our package JSON, we can see we've added a number of dependencies like nomiclabs, Hardhead ethers, nomiclabs, hardhead Waffle, Chi, Ethereum waffle, and ethers.
00:04:45.492 - 00:05:09.708, Speaker A: Obviously we're already familiar with ethers, but the rest of these might be a little new. We'll talk about those later. And great, we now have a sample hard hat boilerplate project. Let's walk through what we just installed here. The first thing we have is a contracts folder, which comes pre populated with greeter Sol. It's a really minimalistic contract here. Next you'll see node modules, which of course is our installed Javascript dependencies.
00:05:09.708 - 00:05:55.548, Speaker A: Something I want to note because it was really confusing to me when I first started working with this is some of these node modules start with an at sign, and then a lot of them don't. What's the difference between those two? These at sign node modules are known as scoped packages, which effectively allow NPM packages to be namespaced or yarn packages. This allows organizations to make it clear what packages are official and which ones are not. For example, if a package has a scope at Angular, you know it's published by the angular core team. So it's the same thing with this anything with at ENS domains we know is by the ENS domains team. Anything with the at Nomic labs is going to be by the team that created Hardhat. So that's why this at Nomic labs Hardhat ethers, and at Nomic labs Hardhat Waffle has this at sign because we know it's published by the nomic labs team.
00:05:55.548 - 00:06:44.728, Speaker A: Then we have a scripts section. This is going to be where we're adding any and all of our scripts that we want to write, like deploying contracts, interacting with contracts, et cetera. And then we have a test folder. We haven't started building any tests yet, but tests are incredibly important for working with smart contracts, and this sample test folder gives us a minimalistic test for testing our smart contracts. We of course have git ignore, which of course comes pre populated with some important things to ignore, like Env and also node modules, because node modules might get too huge to push up to GitHub. And one of the biggest changes here is it adds this hardhat config js this file, even though it's minimalistic right now, you can think of as the entry point for all the scripts that we write. It's the configuration file that determines how the rest of our code is going to work and interact with the blockchain.
00:06:44.728 - 00:07:41.052, Speaker A: Then of course we have packet JSon. We get started with a readme. Remember how the first time we ran yarn hardhat we were prompted with this getting started piece? Now if we run yarn hardhat, we're actually going to get an output of all the different options and commands we can use with running hardhat. Now, if you run into an issue where you run yarn hardhat and this pops up, but you don't see a hardhat config JS in your folder, it likely means that there's a hardhat config js in a higher level folder, or there's a node modules with hardhat in a higher level folder. So if that happens, maybe CD down a directory and do a little ls and look to see if you've got a hardhat config js or node modules in an earlier folder. And because I've actually seen a number of engineers have a couple of different problems here, my friend Cami is going to explain a couple of different troubleshooting tips you can take to try to avoid these common errors.
00:07:41.116 - 00:08:31.804, Speaker B: As a developer, the most annoying thing to deal with are environment setup issues. My name is Camila Ramos. I'm a Devrel engineer at Edge and node supporting the graph protocol, and I'm going to show you how to solve two common problems that you might see when working on this project. After installing hard hat and running the command NPX hard hat in your new project folder, you're going to expect to get back a menu of options like this, but sometimes you're not going to get that back. And when you run into this error, there is a solution for you, and it usually just means that you have a config file somewhere that it shouldn't be, and deleting it will get rid of that error. What you're going to do in order to find this file that you need to delete is run the command NPX hard hat space, and this is going to spit out where this file is, if you have one, and it's going to tell you exactly where it is so that you can delete it. After you've deleted this config file, you should be able to run NPX hard hat in your project folder and get back that menu that we were expecting.
00:08:31.804 - 00:09:04.020, Speaker B: Another problem that is pretty common and I still run into all the time is forgetting to NPM install. Whenever you're working with a repo that other people have been working on on GitHub. So let's say you're pulling down some code that you and some collaborators were working on together, and then suddenly it's not working for you. You probably just need to NPM install. So in your terminal, go ahead and navigate to where this project is located and then run the command NPM install. If there are any new packages that were installed in the time that you weren't working on the code, those will get installed locally for you so that when you run the code, it'll be able to run successfully.
