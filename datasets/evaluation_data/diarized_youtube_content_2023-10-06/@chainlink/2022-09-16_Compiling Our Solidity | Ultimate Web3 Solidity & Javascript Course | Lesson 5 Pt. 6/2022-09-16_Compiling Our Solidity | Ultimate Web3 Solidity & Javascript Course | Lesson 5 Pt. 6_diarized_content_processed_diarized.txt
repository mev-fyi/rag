00:00:10.250 - 00:00:52.962, Speaker A: All of our code basically is going to be inside this async function main, which is going to be our main script for deploying our simplestorage sol. So our deploy script is going to replicate exactly what goes on in remix. In remix, what was the first thing that we always did? Well, the first thing that we would do is actually compile all of our code. So we're going to want to compile our code in our Javascript project as well. In order for us to compile our simple storage contract, we're going to use a tool called sulkjs. Now, Javascript actually has a way to install projects directly into our setups and into our folders. If we scroll down this sulkjs is exactly what we're looking for because it has a way to compile a contract that imports other contracts via relative paths.
00:00:52.962 - 00:01:35.546, Speaker A: You can see a section in this readme and most documentation will have something like this if it's javascript compatible. For node JS usage, it says to use the latest stable version of the solidity compiler via node JS, you can install it via NPm. NPm install silk NPm is what's known as a package manager, and we actually installed NPm just by installing node js, right? If we do node version, you should also be able to do dash version. Another tool that it comes with is something called corpack. You can type corpack version. Now we can install with NPm using NPm install silk. However, I like the yarn package manager a little bit better.
00:01:35.546 - 00:02:26.250, Speaker A: So we're actually going to install the yarn package manager instead to do all of our package management. If you go to the installation page, the newer way to install yarn is just by running corpac enable and the older way is to install with NPm. If you go ahead and run corpack enable, after that finishes, you should be able to run yarn version. Alternatively, you can just run MpMI G corpack and then you can run corpac enable. The last option you have is you can run MPMI g yarn. This will install yarn globally for your system, but this is considered the outdated way to install yarn and ideally you run Corpac enable. But in any case after you run those, if you run yarn version, you should get something that looks like this.
00:02:26.250 - 00:02:39.966, Speaker A: Now that we have yarn, we can actually use yarn to install all of our projects instead of NPM. Back in Sulk js where it says NPM install Sulk, we can do the yarn equivalents of NPM install Sulk which.
00:02:39.988 - 00:02:43.630, Speaker B: Is going to be yarn add Sulk.
00:02:44.130 - 00:03:19.162, Speaker A: This will actually go ahead and install Sulk to our project. If we open up our folders, you'll actually see that this added a couple of different folders. It first added a package JSON package. JSON is a file that tells us a lot about our project and the dependencies that it works with. For example, we've installed the sulk package of 0.8.13. Our yarn lock tells us the exact version of all the different packages of our project. For example, the reason this is so important too is Sulk has a ton of dependencies as well.
00:03:19.162 - 00:03:55.094, Speaker A: So Yarn Lock tells us exactly what version of Sulk and all the different dependencies of Sulk in any other project that we add. This is an auto generated file. Don't edit the file directly. The final bit is we get this node modules folder. This node modules folder is going to be where all the installed code that we just downloaded is. For example, if we look in node modules, we can see there's a sulk folder, and inside this sulk folder is all the code associated with this sulk package that we just installed. And since we're working with 0.8.7
00:03:55.094 - 00:04:23.982, Speaker A: of solidity, we actually want to install that specific version. So we're going to do yarn add Sulk at 0.8.7 fixed and you'll see in our package JSON. You can now see 0.8.7 fixed in our dependencies section for Sulk. Normally you can just add your sulk version like Yarnad 0.8.7, but there was an issue with 0.8.7
00:04:23.982 - 00:04:34.530, Speaker A: so we had to do 0.8.7 fixed. You can find the different releases and the different versions if you go to Sulkjs releases and then to tags.
00:04:35.190 - 00:04:36.098, Speaker B: All right, great.
00:04:36.184 - 00:04:43.126, Speaker A: Now that we have Sulk and we have the ability to actually compile our contracts, we could either compile them in.
00:04:43.148 - 00:04:46.262, Speaker B: Our code and have it automatically run.
00:04:46.316 - 00:04:51.450, Speaker A: Whenever we hit deploy, or we could compile them separately.
00:04:52.190 - 00:04:53.674, Speaker B: If you want to go back after.
00:04:53.712 - 00:05:24.722, Speaker A: This section, there's an example in the Sulkjs repository that shows you how to actually compile sulk right in your code. We are actually going to compile them separately using a Sulkjs command. The yarn command is both used to install dependencies and it can be used to run scripts. If you go to sulkjs and you scroll down says in order to use the command line, you actually need to install it globally. If you want to install this globally using yarn global, add sulk at 0.8.7.
00:05:24.856 - 00:05:26.942, Speaker B: Fixed, you can absolutely go ahead.
00:05:27.096 - 00:06:35.130, Speaker A: However, since we're inside of this folder here, which has the yarn lock, the package JsOn, and the node modules. Yarn will be smart enough to know you're looking for the sulk in this folder, so we can actually go ahead and compile our contract using yarn and sulkjs. If you want to see all the different commands sulkjs allows, we can just run yarn sulkjs help, and you'll see it'll spit out a list of all the different options that SOaPJs has. You can also run yarn Soakjs version to just make sure that we're on the correct version, which is indeed 0.8.7. Now, to actually compile our simplest sol, let's run the compilation command. We'll run yarn sojs bin since we want the binary abi since we also want the ABI include path node modules. Since we want to include any contracts or files in our node modules, we aren't using any for this project.
00:06:35.130 - 00:07:04.340, Speaker A: But in the future you will need to include this include path node modules. We'll do base path of period. This period means that the base path is going to be this folder O period, which means we're going to output the compiled binary and ABI to this folder. And then finally simplestorage Sol. Since this is the contract that we want to compile, I autocompleted it from simplestorage to simplest sol by typing simple.
00:07:04.710 - 00:07:05.970, Speaker B: And then hitting tab.
00:07:06.050 - 00:07:33.510, Speaker A: But let's go ahead and hit enter. You'll see it's running this command to compile this contract, and you'll see two files get output, one called Simplestorjsol underscore simplestorge Abi and simplestoul underscore simplest bin. The ABI is obviously the AbI of this contract, which we'll need in the future. And then the bin is going to be the binary or the really low level of this code back in remix.
00:07:33.590 - 00:07:36.606, Speaker B: If you compile simplest Sol, you can.
00:07:36.628 - 00:07:39.086, Speaker A: Actually look at compilation details like the.
00:07:39.108 - 00:07:42.686, Speaker B: ABI, which we just got, or the.
00:07:42.708 - 00:08:18.970, Speaker A: Bytecode, which if you look at this object, 60806, that's the same as the binary here, 60806. All right, great. So now we've compiled our contracts here. Now obviously now if you hit up on your keyboard, you can actually cycle through your most recent terminal commands. And if you hit up enough, we can see this command that we just ran. Typing this out, or hitting up a whole bunch every single time is going to be really annoying to do anytime we want to recompile. So what we can do is we can add a scripts section in our package JSON to shorten some yarn scripts for us.
00:08:18.970 - 00:08:55.958, Speaker A: So what we'll do is back on our package JSOn, we'll add a comma and we'll add a section called scripts. Add the colon and the brackets. And in here we'll say anytime we say compile, we will run this long command. So we'll add compile, we'll put some quotes and we'll paste that in there. So now instead of typing that whole thing out, as long as we're in the same folder that our package JSON is in, we can run yarn compile and this will run that whole script for us without us having to type the whole thing out. Scripts are a really useful way to make it easier for us to run long commands. All right, great.
00:08:55.958 - 00:09:03.090, Speaker A: Now we have our code compiled. This is going to be equivalent to us have hitting this compile button for us to actually go ahead and deploy.
