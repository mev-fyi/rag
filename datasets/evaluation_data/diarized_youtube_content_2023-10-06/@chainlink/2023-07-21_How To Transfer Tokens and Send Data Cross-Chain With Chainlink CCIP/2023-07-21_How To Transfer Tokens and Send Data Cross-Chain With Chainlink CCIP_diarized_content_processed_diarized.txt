00:00:00.250 - 00:00:58.106, Speaker A: Hi, I'm Richard, one of the developer advocates here at Chainlink Labs, and today we're going to be taking a look at Chainlink cross chain interoperability protocol, or CCIP. In this video, you'll learn more about what CCIP is, what it's capable of, and how you can use it. I'll also teach you how to use CCIP to transfer tokens cross chain, as well as how to use CCIP to send arbitrary data between smart contracts on different blockchains. So what is Chainlink CCIP? CCIP is a seamless protocol that allows you to create cross chain interoperability in your smart contracts. With CCIP, you can transfer assets and information across different blockchains. CCIP lets you leverage the strengths and benefits of different chains and collaborate with developers from different blockchain ecosystems, enabling you to provide additional features or products to those ecosystems. At its core, CCIP supports three main capabilities.
00:00:58.106 - 00:01:23.426, Speaker A: The first, arbitrary messaging. Wait, why is it called arbitrary? It just means that you can send any message you want as long as it's encoded in bytes. This allows you to call smart contract functions across chains. Second is token transfers. With these, you can transfer tokens between smart contracts or EOAs. Think wallets on different blockchains, and finally, programmable token transfers. These combine both messages and token transfers into a single transaction.
00:01:23.426 - 00:01:33.894, Speaker A: Think of it like providing a note along with the tokens on what you want to do with them, but enough to talk about what it is. Let's dive into the documentation and see how to use Chainlink CCIP.
00:01:34.022 - 00:01:56.660, Speaker B: All right, so here we are in the documentation. It's the place to start for any Chainlink tutorial and anything you really need to know about Chainlink, this is the best place to start. We've got a new section here. If we scroll down just a little bit, we have CCIP right here. That's right. Chainlink cross chain interoperability protocol is in the documentation. We'll head to the introduction and take a look around.
00:01:56.660 - 00:02:38.906, Speaker B: We can see here an explanation of what CCIP is, how to get started, and what we need. So we'll need some ETH on Sepolia, somatic on Mumbai, and some link tokens on Sepolia as well. If we head to faucets chain link, you'll be able to get those. Now you'll need both Polygon Mumbai as well as Ethereum on Sepolia and get those tokens from here. From here we're going to go into the transfer token example as well, and the send arbitrary data example. We'll start with the transfer tokens. So in this example, we'll be transferring tokens from a contract on Sepulia into our EOA or wallet on Mumbai.
00:02:38.906 - 00:03:18.602, Speaker B: So how do we do that? What do we need to get started? We'll need to check and make sure that we have our funds, we have our wallet set up and we understand remix again. We also need to acquire some test tokens for CCIP. We'll be using the B and M tokens which are the burn and mint tokens. These are ERC 20 tokens that are available on the test networks that we have CCIP available on. When you transfer these tokens between testnet blockchains, CCIP burns the tokens on the source chain and mints them on the destination chain. So let's take a look at that first and see how to do that. The contract for ccip Bnm and lnM both have a drip function.
00:03:18.602 - 00:03:55.440, Speaker B: So if we go to the sport networks page here and we scroll down, we will see that we are using ethereum testnets we're using and in Sepolia we're going to use the CCIP BNM token. So we'll need to go to this address here. This will take us to ether scan. From here we'll click on contract and we'll click on write contract. So this is when you'll see the drip function. We'll need to connect our wallet. Once it's connected, we'll run the drip function.
00:03:55.440 - 00:04:35.262, Speaker B: It'll ask us for the address. So we'll copy our wallet address and paste it in here and we'll click write. We'll confirm this transaction and we should see that transaction come through momentarily. Let's go back to the documentation. So how do we get this token into our metamask wallet? Well, if we copy this token address and we click on metamask, you may be on the activity tab. If you click on tokens, you can then import a token here. If you paste in the contract address, it'll probably populate this information for you.
00:04:35.262 - 00:04:59.986, Speaker B: If it doesn't, it's right here. We have the token symbol as well as the decimals. We'll add this custom token and you probably have a balance of zero. That's okay, we'll get those tokens here in a moment. We'll import those tokens. And now once they're imported, we can see that our token balance is here. So we look at our activity, the drip should be done and we should have a token balance of the CCIP BNM token.
00:04:59.986 - 00:05:39.214, Speaker B: That's one that we'll be using to transfer. All right, so we have our tokens added to Metamask. Let's go back and continue with this tutorial. So in this tutorial we'll be using this massive contract here. And the reason this contract is so big is because it basically does everything for us that we need for both the examples that we'll be looking at from transferring tokens. So we scroll down, all the way down, we should see an open and remix button. Let's go ahead and click on that and that'll take us to remix.
00:05:39.214 - 00:06:04.262, Speaker B: And here we can see remix. And we have our token transfer contract. So this is a big contract that we use to send tokens from one blockchain to another. This contract is set up in a generic manner that we can use on any of our supported networks. We'll do a brief walkthrough. It's a pretty long contract, like I mentioned before, but it's very well documented so you can see what every line does. Let's walk through the basic flow.
00:06:04.262 - 00:06:28.402, Speaker B: We've got our contract. We have our event for transfer tokens that we can emit. We have our constructor, and again I mentioned that this is set up in a generic manner. So we have our router and our link token address. Those will be chain specific. We do have modifiers for whitelisted chains, so you will need to whitelist a chain before you can send tokens to it. And then we have our first function that we want to look at.
00:06:28.402 - 00:07:19.988, Speaker B: This is the transfer tokens paying with link function. Now one thing to keep in mind is that CCIP supports fee payments in link and in alternative assets, which currently takes the form of native blockchain gas coins and their ERC 20 wrapped version. An automated onchain conversion mechanism is being worked on where fee payments in alternative assets are converted into link. The transfer token function here will take the destination chain, the receiver address, what the token address is, the amount of that token, and that's basically all that we need for this. When we look at the transfer tokens paying with the native fee, we see the sip in a very similar manner. Again, I'm being very brief in my explanation here because these are such well documented examples. If you need to know what any of these lines are doing, they're documented for you and they explain all of that information.
00:07:19.988 - 00:07:45.836, Speaker B: So let's head back to the documentation and look at how to actually use this contract. So we need to open this contract up in remix. We've done that. We need to compile the contract if we head back to remix, if you're not familiar, this is the compile tab. I have mine set to autocompile. If you don't see that checked and a green checkmark next to it, you can either turn it on or click that compile button and it'll do the compiling for you. You should have this green checkmark here, which means you're good to go.
00:07:45.836 - 00:08:13.764, Speaker B: We'll need to deploy our contract now. To do this, we need to make sure, first of all, that we are on Ethereum Sepolia. This is something that is probably the trickiest part of dealing with CCIP is managing what network you're on. When. So now, before we go too far, we need to make sure that we have both Sepolia and Mumbai set up. So let's go ahead and take a look at Mumbai real quick and see that we have our tokens. We've set them up here.
00:08:13.764 - 00:08:53.674, Speaker B: You can see CCIP b m if you don't have that done again, it's the same basic process as we did on Sepolia. You can go to the supported networks page here and you can scroll down to Polygon Mumbai and you can add the supported tokens. Remember, the way to do that is you go into metamask tokens, import tokens, you put the contract address, symbol and decimals, and add that token. You'll want to do that before you go any further, because that way you can see when those tokens actually get transferred into your wallet. All right, let's head back to the documentation. We've got our metamask set up. We're not on Sepolia.
00:08:53.674 - 00:09:21.302, Speaker B: Let's make sure we are on the right one again. Like I said, that's the hardest part about CCIP, in my opinion, is just keeping track of what network you're on. We'll need to open remix and go to deploy and run. And from there, we'll need to interact with our injected provider for Metamask, and we'll need to add the router so we can go ahead and copy that now. And by clicking on the copy button, we'll head to remix. We'll go to our deploy tab. I'll change the injected provider to Metamask.
00:09:21.302 - 00:10:07.420, Speaker B: That takes our metamask wallet and puts it into remix. We'll expand by clicking the drop down here. It'll add our router address here, and then we'll also need to add the link token address. Now remember, these are specific to Zapolia, so we've got our link token address and we've got our router address. We'll go ahead and click transact, confirm this transaction, and once that's confirmed we should see our deployed contract down here. All right, so it's been confirmed, we've got our deployed contract with all of our functions in it here. What's next? We've got our deployed contract, we need to fund our contract with CCIP BNM tokens.
00:10:07.420 - 00:11:07.932, Speaker B: In this case we'll be doing zero, zero two of the tokens, but you can do whatever you like. So we've got our contract address here, we'll copy that, we'll open up Metamask, we'll go to the send tab, we'll put our contract address, we'll change this to be the CCIP BNM tokens and we'll send two tokens to our contract, click next, confirm this transaction and we'll wait for this to complete. All right, our transaction has completed. Our contract has a balance of tokens. Now to transfer we'll need to enable our contract transfer those tokens to Polygon Mumbai. We'll copy the chain selector address here. If you wanted to use a different chain, you could also go to the supported networks page and you can see the selector addresses here, for example for Ethereum mainnet.
00:11:07.932 - 00:11:55.116, Speaker B: So we'll copy our chain selector though for Sepolia back to remix, we'll need to whitelist the destination chain, paste that chain selector in here, and then we'll click transact and confirm this transaction as well. Once this transaction is complete, we should be able to transfer tokens and pay in link. In order to pay in link, we'll need to fund our contract though with some link tokens. So in the same basic process that we did with funding it for the CCIP BNM tokens, we'll get our contract address one more time. We'll go to metamask, go to send, put in our contract address here. This time we'll be sending link, give it 0.1 link, click next, confirm this transaction.
00:11:55.116 - 00:12:28.242, Speaker B: That should be enough for this transaction. We'll wait for this transaction to be confirmed. And now our contract has both link tokens and CCIP BNM tokens, so we can pay for and transfer those tokens. We'll open up the transfer token pay in link function and we've got some arguments here. So the first thing is it will copy this first argument for the destination chain selector. We'll go back into remix. This is going to be a bit of back and forth between the docs and this page.
00:12:28.242 - 00:12:56.458, Speaker B: So we want to transfer tokens and pay in link. Put our destination chain selector in here. We'll get the receiver, which is going to be my wallet address. It's going to be the same wallet address on both Polygon and sepolia. So we're telling it the polygon chain, we're telling it that it's my wallet address or EOA. We'll need the token that we want to transfer. That's going to be the address of the CCIP BNM token.
00:12:56.458 - 00:13:36.038, Speaker B: We'll get that from the documentation and the amount that we want to transfer. Remember, we gave it zero, zero, two BNM tokens and we'll be sending zero zero, one along. So paste that in here and we'll click transact and confirm this transaction. Now, once this is confirmed, we can switch our wallet over to Polygon Mumbai and we can look at our tokens. You'll notice I already have zero, zero one CCIP BnM in here. This is from previous time that I ran this example. So we're looking to change that one to a two.
00:13:36.038 - 00:14:25.290, Speaker B: We send an additional point one. But how do we see this transaction? If we go back to our polio wallet, we can see our activity and we can see our contract that we interacted with here. Now, if we click on the copy transaction ID, we'll need this in just a moment. If we go back to the documentation, it'll let you know that there is a CCIP explorer. Basically, this is an explorer, but for cross chain interactions, if we paste our transaction ID in here and press return, we'll see our transaction details. And I'll tell you, this can take a little bit, so we'll come back in a few moments. Once this is completed, we'll watch the status here and that's where we'll see the progress being made in this transaction.
00:14:25.290 - 00:15:02.026, Speaker B: All right, so our status is now success. That means our transaction has gone through. We've been able to transfer our tokens from Ethereum Sepolia to Polygon Mumpai. If we take a look at our wallet now and we take a look at the tokens, we'll notice that I'm still connected to Sepolia. So I need to change to Mumbai. Here we can see that CCIP BNM token amount, and it's changed from zero zero one to zero zero two. We have successfully sent tokens across chains.
00:15:02.026 - 00:15:32.376, Speaker B: That's awesome. Let's take a look at how we can do this same process but pay with a native token. So again, this process is going to be basically the same. We'll need to change our network back to Sepolia. We've funded our contract this time. We'll need to fund it with ETH though. So we'll transfer zero one to our contract.
00:15:32.376 - 00:15:55.882, Speaker B: We'll head back to remix. We'll copy the address of our transformer contract. We'll send it some ETH. So we paste the address in here. We'll send it zero one ETH and confirm. We'll wait for this transaction to be finalized. All right, so our contract now has some ETH that isn't sent to it.
00:15:55.882 - 00:16:14.370, Speaker B: We'll open up the transfer and pay native. We'll take a look at the documentation one more time. Again, our destination chain is going to be the same. The receiver is going to be the same. The token will be the same. The amounts will also be the same. So we'll head back to remix.
00:16:14.370 - 00:16:45.126, Speaker B: We can just copy that information from the send it with link token above. So we'll copy these values in here. We'll click on transact and we will confirm this transaction that's been submitted. We can either use our wallet or down here in remix. I'll open up this menu. In the debug menu, we can see the transaction hash here. We'll copy this and we'll head back to the explorer.
00:16:45.126 - 00:17:18.840, Speaker B: We'll paste in our transaction here, press return and we'll see. Once again, waiting for finality on this transaction as well. So if we go to our wallet, change to Mumbai and take a look at our tokens, you can go. Remember that we have zero, zero, two ccip BNM. That should increase to zero, zero three once this transaction has finalized. All right, so you can see that we have success now on our transaction. If we take a look at our wallet, we can also see that our CCIP BNM has increased to zero, zero, three.
00:17:18.840 - 00:17:43.902, Speaker B: So that's it. We've been able to transfer tokens from Sepolia to Mumbai using CCIP, paying in both native token and link. That's really powerful. We've been able to do cross chain token transfers with CCIP. Let's take a look at the documentation and one more example here. Let's send data from Sepolia to Mumbai. The process will be very similar.
00:17:43.902 - 00:18:19.050, Speaker B: We're going to take this contract and this time though, we'll be deploying it on both Sepolia and Mumbai. And we'll be doing the example of paying with link tokens. Not both examples. Because as we've seen, using native gas is a very similar process as using link tokens. This one again will have the added challenge of needing to deploy your contract in two different places. And keeping track of where they're deployed and which wallet you're on is kind of a challenge. So let's scroll through this contract and at the bottom we will once again see our open and remix button.
00:18:19.050 - 00:18:47.454, Speaker B: We'll click on that and I'm going to go ahead and close the explorer. The mint functionality for our CCIP BNM token and the other remix that we were using just to keep things simple. All right, so here we have our contract again. And once again, this contract is documented amazingly well. Walk through the basics of it. We've got our contract. We're calling this one messenger.
00:18:47.454 - 00:19:18.374, Speaker B: This contract is both the sender and receiver of messages. So you can see here we have two events. One for the message being sent, one for the message being received. Now, this contract is set up so that it is basically agnostic when it comes to what chain you're deploying on and whether you're the sender or receiver. That's why it's such a large contract. You could reduce the amount of code in here if you wanted one that was specifically just a sender and another contract that was specifically just a receiver. So back to the documentation.
00:19:18.374 - 00:19:48.578, Speaker B: When you need to do is you need to compile it again, just like we did with the other one. And we'll need to make sure that we are on Sepolia. And this is where things start to get a little bit tricky when it comes to managing both networks because we need to deploy this on Mumbai as well. I'll do that by opening a separate window in a private browser mode just to keep things separate there. We'll start with Zapolia. So in remix, we'll need to add Zapolia's router address and the link contract address. So we'll head back to remix.
00:19:48.578 - 00:20:09.070, Speaker B: We'll go through the deploy tab. We'll make sure that we have our injected provider selected and we will deploy. So we have our router address here. Head back to the documentation. We'll go ahead and grab the link token address as well. Paste that in here and we'll click transact. This will deploy our smart contract for us on Sepolia.
00:20:09.070 - 00:21:07.442, Speaker B: So now that we have this contract deployed on Sepolia, what's next? Well, we'll need to enable our contract to send messages to Mumbai. So we'll whitelist the destination chain. We'll copy our destination chain selector here, we'll head back to remix in our deployed contract here, we'll need to whitelist the destination chain. We'll paste in our chain selector, click transact, confirm this, and after that we will need to deploy our contract on Mumbai. So wait for this transaction to be confirmed. All right, transaction is confirmed. We've got our messenger sender contract deployed on Sepolia and we whitelisted the destination chain of Mumbai.
00:21:07.442 - 00:21:35.680, Speaker B: Now we need to deploy on Mumbai. Easiest way I've found to do this and keep track of things is we'll copy this link here and open a remix link in a new browser window. Again, I'm doing a private window here in Brave. In my mind, this makes things really easy because in brave, it makes it purple. And that just kind of keeps me in the mindset of purple polygon and we're good to go. Put the link to remix in here. We'll load all of this up.
00:21:35.680 - 00:22:13.014, Speaker B: This time we'll need to go to the compiler, turn on the autocompile or click the compile button, and then we'll need to deploy this with the injected metamask provider. We need to remember to change our network to Mumbai. That is key here. Like I said, that's probably the hardest part. So we'll head back to the documentation. We'll scroll back to the part about deploying on Mumbai. We've got it open.
00:22:13.014 - 00:22:40.846, Speaker B: In remix. We'll need to put in the router address again. Remember that's chain specific. Expand this, we'll add our router address and we'll go and get the link token address. We'll add it here and we'll click transact again, making sure that we are on Mumbai. Confirm our transaction here, wait for this to deploy. All right, so our transaction has gone through, our contract is deployed.
00:22:40.846 - 00:23:18.220, Speaker B: Head back to the documentation. You'll now need to whitelist the source chain. So in our contract, we're going to be sending messages and we're whitelisting the destination. In this contract, we're whitelisting the source chain. So we need to whitelist the source chain here, run this transaction, confirm. We'll also need to enable the actual sending contract. So this will be the contract address from Sepolia.
00:23:18.220 - 00:24:04.030, Speaker B: So we'll grab that from this window. We'll use the contract address here, we'll come back, we can see that our whitelist, the source chain has gone through. We also need to whitelist the sender, paste that value in here, transact, confirm this transaction again. All right, so at this point, we've set up Sepolia to send the message. We've set up Polygon and buy to receive the message. And we should be able to use the send function to send a message between the two. So again, we'll be paying with link.
00:24:04.030 - 00:24:44.270, Speaker B: So first we'll need to give our sepolia contract some link token. We'll head to the sepolia version of the contract, grab its address. We'll switch our change to Sepolia and we need to send some link to our contract. So we'll grab that address here, go into metamask, send. We'll paste in the contract address here, we'll send it some link one link tokens, confirm this transaction and wait for it to be completed. All right, our contract has some link tokens now. And now we can run the send message pay link function.
00:24:44.270 - 00:25:18.096, Speaker B: So we'll need our destination chain value. Remember, these selectors are chain dependent. So if you look at the supported networks page and determine which one you need for a specific use case, you will need to put a different value in there. So we'll need that. We'll need our receiver contract address, which is going to be the address of our receiver contract. And then we'll need the text. So we'll send a message and pay with link paste in our chain selector here, we'll paste in the address from the other window.
00:25:18.096 - 00:25:48.284, Speaker B: We'll grab our contract address from Polygon Mumbai. Paste that in here. And then we'll say hello world. And now we can click transact, confirm this transaction. But before this goes through, let's take a quick look at our contract. Here we'll use this get last message received details. You can see the ID in the string.
00:25:48.284 - 00:26:04.470, Speaker B: It's empty now. So in Polygon we have no information. And first we need to switch over to Polygon. Like I mentioned, this is the hardest part. I forgot to switch to Polygon. So we use Polygon, we click on this, get latest received message, and we see this blank. We don't have one right now.
00:26:04.470 - 00:26:46.890, Speaker B: So this is where we'll be able to see our string of text when it comes from Sepolia. But we need to watch it. So we use the transaction ID here, we'll go back to the documentation, open up the CCIP explorer, we'll put our transaction ID in there and press return. And similarly we'll see that transaction is waiting for finality. So this is where we'll wait until this completes and then we should be able to see our message cross chain. So our transaction has completed successfully. Let's take a look at Polygon mumbai version of our contract.
00:26:46.890 - 00:27:18.806, Speaker B: Remember when we got the last received message. Previously, our string was blank. We sent hello, world. If we check it now, we can see hello world and we can see our message ID here. So we have taken a string of text, a message, and we have sent it from Sepolia to Mumbai. Now, this doesn't just have to be a text message like this. It could be a function call or something like that.
00:27:18.806 - 00:27:23.290, Speaker B: Remember, the message is received. You can do what you like with it.
00:27:23.360 - 00:27:36.906, Speaker A: All right, in this tutorial, you've learned what CCIP is, a protocol that allows you to create cross chain interoperability. In your smart contract. You've gotten some hands on experience with CCIP and learned how it works. From here, the sky's the limit on.
00:27:36.928 - 00:27:37.610, Speaker B: What you can create.
00:27:37.680 - 00:27:42.382, Speaker A: I can't wait to see what you build by leveraging the power of connecting blockchain ecosystems.
00:27:42.446 - 00:27:45.540, Speaker B: Thanks for watching, and I'll catch you in the next one.
