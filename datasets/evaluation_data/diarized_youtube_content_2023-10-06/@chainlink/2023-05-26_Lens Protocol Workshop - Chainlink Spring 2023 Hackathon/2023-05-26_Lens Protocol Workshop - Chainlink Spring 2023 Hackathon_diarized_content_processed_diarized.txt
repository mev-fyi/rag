00:00:04.820 - 00:00:42.194, Speaker A: You all right? So it looks like we are live now. So just was waiting for a few minutes for everyone to kind of get in and get settled, and I think we are ready to go. So I'm just going to set up one last thing here. Okay. And we're going to kick off. So welcome to this lens workshop, and I'm excited to be here as part of the Chainlink hackathon. Always a huge fan of what Chainlink is doing and the entire community there, and really excited about this hackathon specifically.
00:00:42.194 - 00:01:35.400, Speaker A: I really like the virtual hackathons that allow everyone in the world to participate. And I think with Chainlink functions around, which are kind of the thing that are probably most interesting to me now about Chainlink being someone that is used to building kind of like traditional software applications that are not web3 in the past, it just opens up the domain space so much. There's just so much you can do. And I think there's a lot of lens stuff that you could probably do as well, which is what I'm hoping to see maybe people kind of play around with during the Sackathon. So with this workshop, though, we're going to be focusing on just on lens, just so you understand it and start get started building software and applications with it. So this workshop is going to be broken up into two parts. We're going to first do an intro to Lens, and then we're going to build out an app.
00:01:35.400 - 00:02:06.820, Speaker A: So my name is Natter. I'm the director of Devrel at Ave and Lens protocol. And one of the things that we're really excited about that we just launched a few weeks ago is the lens SDK. And you'll learn more about how this works in just a moment. But it essentially just makes it a lot more simple to build software using lens and to build applications on lens. It abstracts away a lot of the complexity that a lot of developers in the past had to deal with. So you can get started building with just a couple of lines of code.
00:02:06.820 - 00:02:32.346, Speaker A: So if you want to follow along with the coding part of this workshop, there's a couple of resources that you can go to. One is docs, lens XYZ. That's the lens protocol docs. There you'll see a developer Quickstart guide. We also have this lensproteocolworkshop@GitHub.com. Dabbit three lensproteocallworkshop. Both of those are going to be very similar to each other.
00:02:32.346 - 00:03:30.894, Speaker A: The main difference is that this workshop has the code base that you can kind of reference. But the main thing to think about is all the steps that we're going to be walking through, which are well documented in both places. So I would say the lens documentation quick start guide, or this lens workshop on GitHub are both resources that you can follow along to build the same app that we're about to build. So before we get started building, we want to talk about lens and answer this question. So what is lens? And kind of like, the most simple explanation would be essentially the social layer of web3, but for developers more specifically, it makes sense to give a better explanation, I think, for how you might build with it. So to me, a good explanation is this lens offers a protocol and a suite of tools and APIs for easily building social apps, or integrating social features into existing apps. And social applications are a big deal.
00:03:30.894 - 00:04:24.270, Speaker A: I mean, there's 4.9 billion people in the world using social media today. So when we talk about a lot of the challenges of onboarding people into this space, a lot of it stems from Ux, but a lot of it also stems from the use cases just not being appealing to a lot of people. So defi and native payments and stuff like that are really exciting and interesting and valuable to a lot of people. But to a lot of people, they might not be that interested in them, but almost everyone in the world that is online is using a social app of some sort. So it's easy for them to grok and understand how these apps typically work. And a social application has one or more of these types of features where you can create a profile, you can modify and update that profile with information about yourself.
00:04:24.270 - 00:05:36.306, Speaker A: Based on that profile, you can publish content that's associated to you as a creator, as a user, you can follow other users. And then based on your interactions and who you're following, you'll have content given to you based on some recommendation algorithm, or just given to you based on who you follow. I think Twitter is a good example of this, because you now have this split feed on Twitter of who you're following, and then you also have the recommendation algorithm on the other side. And one of the more powerful things about lens is that because all of the data, all the infrastructure, everything is open source and public, then everyone can create their own recommendation algorithms, or you can choose your own recommendation algorithms as opposed to Twitter, you're kind of stuck with what they give you. We're now seeing this entire ecosystem of recommendation algorithms start to flourish within the lens ecosystem. I guess you could say they start with the ones that we've given to you out of the box, but we now have a lot of third party developers building them and offering them to developers. So how does lens actually work? At the very core of lens is a set of smart contracts that defines the protocol.
00:05:36.306 - 00:06:58.458, Speaker A: But interacting with a set of smart contracts doesn't really provide good ux. So we've built out a high quality API on top of these smart contracts that essentially indexes all of the data, makes it queryable and makes it very simple to interact with and very performant. So when you make an update, we have optimistic updates, meaning that when you make a state change or a state transition and you refresh your browser, you see that update immediately, even if it hasn't settled to the underlying network. Because our API understands that that transaction is being processed and we want to kind of provide you what we think is going to be the next state transition or what that state would look like had it gone through, because we know that people are kind of used to that type of interaction when they're interacting with a traditional app like Twitter or Instagram, the interactions are instantaneous. Beyond the API, what you might expect from an API, we also have implemented gasless transactions and signless transactions, meaning you do not have to sign the actual interactions for non financial transactions if you choose to. So essentially there's a switch that you can turn on. You can say, enable the dispatcher.
00:06:58.458 - 00:07:45.498, Speaker A: From then on, when you like, comment, post, do anything, as long as there is no actual monetary value being transferred, you do not have to sign another transaction. So when you are interacting with the app, at that point it just feels like a Twitter or Instagram. Again, it feels really fast performant and it doesn't feel like you're in a blockchain app. And then one of the things that we're going to be focusing on today, something that we're always striving to make better and improve, is the developer experience. So the developer experience is kind of like broken up into a few different areas and how we want to make this easier for developers to build. At the core level, we have the lens API. And again, this is a lot better than just interacting directly with the smart contract.
00:07:45.498 - 00:08:26.038, Speaker A: Smart contracts don't allow you to query like a database does. You can't go to a smart contract for the most part and say, I want to query the last ten publications that have been created by people with interest in this tag, that live in this region, that follow this user. I don't know, there's like all these different parameters that you can typically query a database with but a smart contract. You can't do that with the lens API though. You can do that. We have very powerful queries that are enabled that allow you to sort, filter, paginate and request exactly the data that you want back. Now if you use the lens API, you have to use graphql.
00:08:26.038 - 00:09:05.398, Speaker A: But some people don't really like GraphQL and often GraphQL can be verbose. So we also have the lens SDK that sits on top of the GraphQL API and abstracts it away essentially. So with just a couple of lines of code you can do the same things that you can with the lens API. So this is kind of how that developer stack looks like. We have the protocol and the smart contracts at the very bottom. We have the API on top of that, and then we have the SDK on top of that. So this is kind of an example of what an API call would look like using the lens SDK.
00:09:05.398 - 00:09:47.938, Speaker A: You would install the lens protocol, react web hooks library, for example, and you want to get a feed of profiles essentially recommended to you. Then you could just use Explore profiles. And then when you invoke that, when you're in your react function, you get this data back, which is an array, and that array has a bunch of profiles and there are dozens of hooks that are very similar to this. And you can also pass in arguments as well. So let's say you wanted to only get comments or you only wanted to get a specific type of publication or profile. You could do that as well. We also have the react native lens Ui kit.
00:09:47.938 - 00:10:25.202, Speaker A: And the react native lens Ui kit is essentially a mobile framework. It's mainly a mobile framework for building apps on react native with lens. So you can get started with react native lens UI kit in just a few lines of code. So this is an example of getting a feed of recommended posts. You would just import the feed component from React native lens Ui kit and then render the feed. And then from there you could start building. The next is the lens widgets and embeds.
00:10:25.202 - 00:11:14.434, Speaker A: One of the biggest things that we're starting to see people use lens for is integrations. So you might have just a defi app, or you might have, I don't know, like some other type of app that isn't really just a social app, but you want to get social features into your app. For instance, let's say you want to get a lot more awareness of people using your app. You could drop a share to lens button in your app and then people will be able to click a button and share your publication or whatever to lens, and then you would get just a lot more visibility. It's kind of like share to Twitter or something like that. We also have sign in with lens. A lot of different widgets that are really simple to use and get started with that essentially are mainly focused at integrations as opposed to building an entire social app.
00:11:14.434 - 00:11:46.938, Speaker A: And this is kind of an example of what some of these components look like. You can render a publication similar to how they have the Twitter embeds. We have the lens embeds, we have a sign in with lens button that allows you to kind of integrate identity and profiles and things like that with just a few lines of code. Also profiles like you see on the left here. And these are all also very simple to use. Just two lines of code, you import the component and then you render it the profile. You would have to pass in just one argument there as a prop.
00:11:46.938 - 00:12:46.558, Speaker A: The prop would be the handle or the profile ID. And then one of the really powerful things that we've seen people building with has been this new Bigquery API that we opened up, or really, it's a set of bigquery tables that we made available that we maintain. And with lens bigquery, you can query this massive data set of all the lens data and have pretty much free rein over everything and do whatever you want with it. So what people are doing with this is that they're building out a lot of AI and ML type of apps and tools and stuff like that. You can also really easily build recommendation algorithms here because you have all of that data and you can kind of sort it and segment it and query it however you like. And then finally, encrypted DMs are really simple to implement with lens, and most apps have them, and most of the time they're using XMTP. And XMTP has a lens namespace.
00:12:46.558 - 00:13:45.358, Speaker A: So you can actually integrate all of the lens discussions happening all over the Internet in your app for basically a few lines of code. And it's pretty simple to use and a lot of people really like it. Okay, so beyond just those different, I would say, tools, APIs and stuff are a couple of ideas that I'll kind of talk about a little bit more in depth. One is extensibility. You can do a lot of really cool stuff that you can't really do with traditional social. So one of those is this idea of building a custom module, which would be akin to if you were able to go into Instagram or go into Twitter or go into TikTok and say, I want this functionality, but since they're not going to build it, I want to go ahead and build this and start using. It's like submitting a pull request or something to Twitter.
00:13:45.358 - 00:14:37.090, Speaker A: We can enable that with custom modules. So custom modules allow you to enable different on chain, I would say requirements restrictions and things like that for actions that happen within the protocol. So this is an example of a collect module that allows you to do a lot of different things. For when someone creates a publication, this is kind of an optional tab you can open in one of the apps, and this allows you to do all types of stuff. So if you create a publication, you can say, I want to charge one dollars or one matic for anyone that collects this. Also, if you mirror this or share this, I want to share some of that revenue with you. So I might share 10%, and then I want to limit this to only 100 collects.
00:14:37.090 - 00:15:25.506, Speaker A: And I can set a time limit for the first 12 hours or Whatever. And then something Else that you can do that is really cool is split revenue among a bunch of People. So we had an artist that created an image for lens for our one year anniversary, and we used the split revenue and we sent 100% of the revenue to that artist. And we just shared the image that they had already kind of been, I would say, paid to do that. We hired them to do this image, but we also did this split revenue thing, and as of yesterday, they had made $14,000 off of that. With the split revenue feature, you can also set who can collect. So let's say you create something that's free, but it's amazing and you only want your followers to collect, meaning that if someone wants to collect that they have to follow you.
00:15:25.506 - 00:15:55.946, Speaker A: So that would be an Incentive for someone to follow you. There's all types of stuff that you can do. This is just an example of kind of what that split revenue would look like in one of these user interfaces where you kind of set the different recipients to collect. Anything on chain is kind of available there. And then this other idea, beyond extensibility, is composability. Composability isn't really unique to lens. It's more of like a web3 or blockchain or this kind of idea that isn't really limited to lens.
00:15:55.946 - 00:16:49.120, Speaker A: But there is a lot of. I would say this is kind of where lens really shines, I think is with this idea of composability with lens, you essentially have a managed infrastructure, like serverless infrastructure, allowed you to just plug in and build without having to deal with or maintain the back end infrastructure. So you can 100% focus your time on the client side applications, but you inherit this entire user base and ecosystem of developers, apps, tools and everything. So it's kind of like if you launched an app and you automatically had 110 120,000 users today in closed beta, and in the future, hopefully a lot more than that. You don't have to kind of bootstrap your user base. You do have to bring awareness to your app because people aren't going to know about it out of thin air. But once they know about it, they don't have to sign up, they can just start using it.
00:16:49.120 - 00:17:20.218, Speaker A: And then the API and the back end are continually improved for free. That's kind of a characteristic of this managed infrastructure. We're building it, we're maintaining it, we're improving it. You just have to use it and build out your front end. And then beyond the composability for developers, it's this idea of composability for users. So when a new app comes online, you don't have to worry about building out a new user base. So imagine when TikTok came out, everyone started from zero.
00:17:20.218 - 00:17:57.110, Speaker A: Imagine though, instead you started from however many followers you had today on some other network. So when a new app comes out, you can just check it out, start using it, your followers are there, a new mobile app comes out. We have all these different things that are kind of being launched. You can choose and decide which interfaces to use. And these all offer kind of like different ways to be creative. You have music apps and image apps, and video apps, and text sharing apps and blogging apps. So it's really fun to kind of be able to just bounce around these different applications without having to worry about rebuilding all of your following.
00:17:57.110 - 00:18:46.038, Speaker A: So beyond that, the technology stack for a front end developer or a developer, building on lens will look something like this. For the, I would say, interactions on the client, you have two options. We talked about the lens API and we talked about the lens SDK, so you could kind of choose one or the other. Typically, the only thing that we don't really handle right now that we might maybe integrate better in the future is metadata uploads. So if you create a publication, the publication has to have some information about the data that's being saved, essentially. And you can kind of choose where to upload this. But most of the time we recommend bundler because it's very fast and it's permanent and it's very good.
00:18:46.038 - 00:20:17.332, Speaker A: Also, you can choose something like IPFs and then if you want to integrate like live video or video sharing or just any type of video integration, we're seeing a lot of developers use live peer, but you might already be familiar with like Wagme hooks, ethers, Rainbow kit and similar libraries. You'll still end up using a lot of that for wallet connection and stuff like that. And then you have your front end framework or your mobile framework. So this could be native iOS, native Android, flutter, react, native next Js, whatever. All right, so next we want to do is a live demo or a live build. So we're going to do that and I'm going to try to make my screen large enough so that everyone can see that, because I know it's right now pretty small because it's so wide. All right, so we're here in this new directory.
00:20:17.332 - 00:21:01.408, Speaker A: What we want to do is we want to start from scratch and we want to build an app that leverages the lens SDK. So like I mentioned, there's a couple of different places that you can go to follow along. One is my GitHub repo here. This is GitHub Dabbit three, lensprotocolworkshop. And this will walk you through everything that we're about to go through here. And it also offers an example of the app right here. The other option is going to be to go to docs Lens xyZ, and then here at the very top we have the developer quickstart.
00:21:01.408 - 00:21:33.212, Speaker A: So both these tutorials are about the same. The main difference is the GitHub repo has the full code base. So we're essentially just going to follow along. So what we want to do is create a new next JS app. So I'll say NPX create next app and we'll choose typescript, eslints, tailwinds. We'll just choose all the defaults. I'll just say that no for SRC, yes for app router, and then no for customizing the import alias.
00:21:33.212 - 00:22:27.250, Speaker A: And create next app just generates an empty Nextjs react application in a web app. We have our app. We'll go ahead and open that in our text editor. I'll also zoom in a lot here. And the page that we're going to be interacting with is going to be page TSX and layout TSX. So go ahead and open up those two. And what we now need to do is install a couple of libraries.
00:22:27.250 - 00:23:46.490, Speaker A: So we're going to install at Lensprotocolreact web, we're going to install ethers, we're going to install Wagme hooks. And we have a special package called lens protocol Wagme that allows us to integrate the lens SDK with the Wagme hooks really well. I'm just going to use yarn to install those. All right, so our app has installed the dependencies. So if we go here to our package Json, we see all this stuff added. So we're good. And what we now need to do is update our layout.
00:23:46.490 - 00:24:36.460, Speaker A: So here you'll see that we have all this stuff kind of like defined here and we're going to modify this. So essentially what we need to do is import all of the different requirements for the lens SDK and then wrap the main HTML element, which is going to be really just this body with this class name. Because with the Wagme and the lens libraries, we're going to be passing down global state, global context. And you have to kind of like wrap that at this layout level. And in the past this was the app JS button. Now in the new next JS it's layout. So we're just going to go ahead and import all these imports here.
00:24:36.460 - 00:25:18.006, Speaker A: And it's okay, just delete everything. I'm just going to start by importing all this and we don't really have to know how all this stuff works. The main things though, to consider with this specific app that we're building is like you can choose to be on production or development environment. So we're choosing to be on the production environment, which really is basically just the Polygon network. And then development would be Mumbai. But for this example, I want to be on production because it looks nicer because we're going to be using the real data from lens. So we imported everything.
00:25:18.006 - 00:25:52.142, Speaker A: We created this instance of the client, we created a lens configuration. Now we're just going to render the HTML element, wrapping the body with the wagme and the lens provider. So this is kind of a fair amount of code, honestly, it's another 20 lines of code or so. But once you have this set up, everything just works everywhere else. So this is kind of like a one time thing. It's annoying to do at first, but after it's done, we don't have to touch it again. So we can go here and just delete everything on page TSX.
00:25:52.142 - 00:26:47.090, Speaker A: Because we're done with our layout, we can start writing some of our own custom code. So here we are at page TSX under the app directory. And this is where we're going to start interacting with lens. And the one thing we want to do is create this utility function that we're going to be using elsewhere and this is going to just be a function that takes in a rweave or ipfs hash and formats a gateway. So this is just a utility that we're going to need later on where we take in this URL. If it starts with IPFs, we add a gateway. If it starts with re, we add a gateway.
00:26:47.090 - 00:27:32.214, Speaker A: So in page TSX, go ahead and import use Explorer profiles. And before we actually build out the rest of the UI, let's go ahead and just see how this works. So if I go ahead and say const. So we'll just copy this exact code here, const data. And we'll log out this data which we're renaming as profiles. Then we'll just try to run this because this way we can kind of look at this data structure and see what it looks like. To run the app.
00:27:32.214 - 00:28:36.414, Speaker A: We can run NPM, run dev, we'll open this up and we'll open the console and there you go. We see we have this profiles array here and this is all the data that came back from the lens API. So we have all these different people. This person has a bio, they have a handle, they have an ID, they have interests. All types of metadata about the user comes back. And again, once we set up the SDK at that core level, we only really needed this line of code and this line of code to get that data. And now we can just do whatever we want.
00:28:36.414 - 00:29:42.246, Speaker A: So you typically would say profiles map and then you would kind of do something with that's really, that's what we're going to do in this next step, actually. So in the UI we can just return this here and this is just going to map over those profiles. So here you see profiles map. We return the profile image for the user, we return their handle and we return their bio. And the one thing to notice here that's kind of interesting is that you can click on a profile and then navigate to the profile details which we're going to set up in just a moment using a different route. So here we're saying when you click on this link, which is a profile, we want to navigate to profileprofile handle. So you would then navigate to profilenatter lens or something like that.
00:29:42.246 - 00:30:33.580, Speaker A: That doesn't work yet because we haven't written that code. But anyway, we'll go ahead and save this and we'll see if this works. So once we save and refresh, we see that our app updates and we see that we have now a list of users with their name or their handle in their bio. And you'll notice that if I click on a user, let's say for instance, I click on this person here, that it does navigate in the URL to profile handle. But because we don't have the right set up yet for the route itself, it's not working. So that's kind of what we needed to do next. We need to go ahead and create that route.
00:30:33.580 - 00:31:30.706, Speaker A: So to do that we're going to go to the app directory. We're going to create a new folder called profile within profile. We're going to create a new folder called ID in brackets. This is just going to be like a dynamic route. And then within the id we'll just say page TSX. And when we click on a user, we're going to navigate to this new page and using the handle out of the route URL, we're going to fetch their profile and we're going to render their profile details and we're going to render the, I would say last publications that they've made. Like the last ten or 20 publications that they've made.
00:31:30.706 - 00:32:07.550, Speaker A: So again, this doesn't work yet. So now we're going to write that. So to get started we'll go ahead and import a few different things. We're going to import the use profile and use publications hook from React Web. We're also going to import the profile which is going to be used for typescript, the profile type. We're going to import use path name from next navigation so we can get the path name which gives us the handle. And then from there we can go ahead and create the actual component.
00:32:07.550 - 00:32:55.542, Speaker A: This is going to be profile. We want to get the path name out of the nav. We're going to say path name is use path name, which is going to give us the entire path name and we want to then essentially get the lens out of that. So we're going to say path name split at the slash and we're going to take the third item out of that array, which will be the final item. We're going to then say we want to use profile with that handle and this is going to first fetch and therefore be loading. And then once that is done we're going to have the profile. So we'll have two different states, loading or not loading.
00:32:55.542 - 00:34:17.812, Speaker A: Once it's done loading we'll have the profile and therefore we can say if loading, we'll just return loading and then if not loading, that means the profile is populated and we can return the profile for that user. So here we're just going to return the profile picture, the profile handle, and the profile bio. And then we're also going to go a step further because we've already kind of seen their profile picture, we've seen their handle, we've seen their bio, I think on all of that on the main page. But we want to now fetch the publications for that user so we can do that using the profile. And we're going to create a new component called publications. To do that for the publications, it's going to look something like this. It's going to take a profile of type profile, and then using that profile ID, we can say use publications and we can call the API.
00:34:17.812 - 00:34:52.672, Speaker A: We can say we want to get the last 20 of their publications. And this will also have like a loading state if you want to use that as well. But we're not using it for whatever reason. Maybe we should. One minor thing, we're going to make an update here is that just for this demo purpose, you have two types of publications that typically might appear on a user's timeline. One is a publication that they've created, and one is a mirror. If it's a mirror, we just also want to return that as if it were a publication.
00:34:52.672 - 00:35:41.820, Speaker A: Just for this kind of like quick demo to show what the publication looks like in your own app, you might have like a little icon that says this person mirrored this. So what that looks like in practice is like something like this. So if I go to my profile on Linster, for example, you'll see that I mirrored this and I mirrored. So that's kind of how we're just handling it in a really naive way for this tutorial. All right, so now that we've gotten the publication data, we want to go ahead and return that array of publications. So we're going to say publications map. We're going to return the publication content.
00:35:41.820 - 00:36:09.906, Speaker A: And this chunk of code here just checks to see if the publication has an image that's a JPEG or a PNG. And if it does, we want to go ahead and render that as well. So this is kind of a lot of code just to show an image, but that's kind of the way I'm handling it in this case. That way it looks nice. If there's an image, we can show it. So I think that's about it. We should be able to test this out.
00:36:09.906 - 00:37:18.726, Speaker A: So I'm going to save the app and refresh. Whoops. And if I click on a handle now, we should be able to navigate to that user and we see all of their publications and you'll see that when the user is Loading, we get that little loading indicator. Cool thing about this is if I go to one of these people's profiles, let me see here who I want to do. So we go to this profile here, and I think some of these might be comments. Let me go to Stanny's. So we're going to go to Stanny lens.
00:37:18.726 - 00:38:18.996, Speaker A: And if I go to Stanny lens here, we should see some of these same images show up here because we're basically getting the same feed as linser. So this is a recent post by him and we also see it on our app. So we're getting like a similar feed as some of the main apps that are out there. Obviously our design isn't as good as their design because we just do this together in a short amount of time, but pretty cool to see. Nonetheless, the next thing that you might want to do, to take this a step further would be to do two things. One would be to create authentication. So you want to allow a user to sign in, and the reason that you might want to do that is because you want to allow them to interact because right now we're just reading data from lens, but you want them to follow post things like that.
00:38:18.996 - 00:39:15.980, Speaker A: So our tutorial, the one we were just following, actually shows you how to do that. It shows you how to add authentication and to follow users using the SDK, not a lot more code, maybe another 30 or 40 lines of code max. So I encourage you to continue taking the tutorial to build that out and then also check out the tutorial for creating a publication, which is a little more complex because you have to upload metadata to IPFs or rweave, but still should be able to be accomplished fairly easily. So if you want to continue learning about lens, you've already heard about the docs at Docs Lens XYZ. If you want to get inspiration for what other people are building, check out lens xyz slash apps. We have a lot of examples of what people have been building showcased there. And then if you want to learn more about some of the updates happening from lens, follow us on Twitter, follow us on lens and then also check out our mirror xyz, lensproteocol ETH.
00:39:15.980 - 00:39:51.024, Speaker A: And that's it. But I want to go ahead and set aside some time because I think we're going to also take some questions. So I'll be happy to take questions now. And let's see here. So one of my projects wants to have a share to lends button, but also automatically posting from our official account when users mint our NFT. Yeah, that's very simple to do actually. You would set up a server.
00:39:51.024 - 00:40:41.082, Speaker A: You would just have a server that would be listening to the contract that that NFT is being minted from. And essentially you have that event that is published or the event is emitted. So when someone creates NFT, that event gets hit and you then listen for that. When that happens, you can post to lens from a server. All you have to have is the private key for that account or whatever account that is obviously stored very securely, either using something like, I would say an environment variable or something like that. But from there, yeah, you could do it that way. Yes.
00:40:41.082 - 00:41:05.218, Speaker A: You can do write operations. And I didn't go over the authentication, honestly, it only takes another five minutes. I could have gone over it. We just updated our guide, the one that we were just looking at to show how to do this. So where does the signature takes place? It takes place just like in any web3 app for now. You will click a button to sign in. Metamask pops up.
00:41:05.218 - 00:41:35.634, Speaker A: Sign in with lens. Okay. Boom, you're signed in. So that's kind of the gist of it. So the SDK handles all that for you? Literally. Not very much code. So how does one couple integrate additional contracts and databases to the existing structure? I mean, it's up to you to kind of have whatever functionality you would like to build.
00:41:35.634 - 00:42:17.650, Speaker A: It's completely, again, the contracts are just like any smart contracts. They're open, permissionless, composable, you can build on top of them. If you look at waves Wav three s, they're a good example of a company and a team that have built out a very valuable company on top of lens that does exactly what you're talking about. They essentially extend the lens contracts to allow people to incentivize people to use their service to promote posts on lens. So I can set a bounty of like $100. Anyone that retweets my tweet or my post can get a dollar of that $100 if they fit a certain criteria. And that was all done using their own custom smart contracts.
00:42:17.650 - 00:42:38.740, Speaker A: I don't know if the host is still here, if I should stick around or jump off.
00:42:42.690 - 00:43:10.000, Speaker B: Yeah, I'm still here. So there's no questions at the moment. Nader. Okay, so if everyone has any questions, this is your last opportunity to ask anything you want, Nader. So go ahead and drop your questions on the live chat. Okay. I guess not.
00:43:13.330 - 00:43:26.440, Speaker A: All right. Well, that was really great. Thanks for having me. And I hope everyone learned a little bit about lens. And if you have any questions, hop into the lens discord board, and we'd be happy to help you out there and start building some stuff.
00:43:27.210 - 00:43:30.166, Speaker B: Perfect. Thank you so much, Nader, for joining in.
00:43:30.348 - 00:43:31.540, Speaker A: Thanks for having me. Bye, everyone.
