00:00:06.410 - 00:00:49.594, Speaker A: Greetings, smart contract engineers, and welcome to our quick introduction of the Brownie Smart Contract development framework. This is a framework that's going to help you spin up your smart contracts faster, better, more robust, more secure, and give you a much better development experience. Now, Brownie is a Python based developer framework, and we're going to use a lot of python tools to deploy, test, and work with our smart contracts. Our smart contracts are still going to be in solidity, though. So all the tools that you've learned that work with smart contracts are going to be exactly the same. So just to kind of show you really quickly what Brownie looks like, here is the repository for Brownie or F Brownie. And all the documentation you could ever want is in the Brownie documentation right here.
00:00:49.632 - 00:00:50.826, Speaker B: So if you get lost, you can.
00:00:50.848 - 00:01:15.186, Speaker A: Always come back here and get some more information. We are going to use the Chainlink Brownie mix. Now, this is a mix that's already preinstalled with a lot of Chainlink smart contract contracts so that we can actually just get started, get going with some boilerplate code. And it's going to make your life a lot faster because it's got some tests, it's got some scripts, and it's got some smart contracts that use Chainlink in them already.
00:01:15.288 - 00:01:18.322, Speaker B: So let's take a look at what.
00:01:18.376 - 00:01:49.370, Speaker A: This mix actually looks like. Now, when working with Brownie, we actually can clone a repo two different ways. And if you ever get lost, you just go to the readme and it will have everything in here. So we can either do what's called a brownie bake or we can just do a git clone. But before you even do that, make sure you have f brownie installed. You'll know that you have it installed if you run brownie in your command line and you see the output right here. So we do have brownie installed.
00:01:49.370 - 00:02:11.974, Speaker A: So we can go ahead and just do brownie bake chainlink mix. However, again, if you're not comfortable with brownie baking or you're not used to it, you can also just go ahead and git clone this repository. Once we've baked this mix, we can actually go ahead and CD into this chainlink repository. And we can see here on the side, we've got all these scripts and.
00:02:12.012 - 00:02:15.186, Speaker B: Folders already set up to boost our productivity.
00:02:15.378 - 00:02:18.680, Speaker A: So let's take a quick inventory of what's actually in here.
00:02:19.290 - 00:02:21.578, Speaker B: So we have our build folder at the top.
00:02:21.664 - 00:02:48.562, Speaker A: This is going to have all of our deployment information. Anytime we compile a contract or deploy a contract. Everything's going to show up in here. This contracts folder is where we're going to live a lot of the time. It has all of our solidity contracts. And you can see we already have some demo boilerplate code for the VRF consumer, the price feed consumer counter Sol which works with keepers, and API consumer which works with the any API call.
00:02:48.616 - 00:02:50.578, Speaker B: So all of your boilerplate code is.
00:02:50.584 - 00:03:23.790, Speaker A: Going to be in here and already working for you. We also have a test folder in this contracts folder which allows us to mock a lot of these contracts. And mocks are fantastic for testing our smart contracts very quickly and rapidly. And there's going to be a link in the description to learn more about testing your smart contracts and working with mock contracts. And then we have interfaces which these interfaces are going to allow us to get the ABI of any smart contract really easily. And then we have our scripts. These are where a majority of the work for these repos actually is.
00:03:23.790 - 00:04:30.398, Speaker A: If you don't like scripts, you can also just work with the brownie console and this will take you into a shell where you can run all your brownie scripts and work with all your contracts directly in a shell. So we have scripts that deploy the API consumer, request an API call and then read data from an API call keeper, scripts which deploy a keeper and do some keeper upkeep checking price feeds which read from a price feed and deploy a price feed consumer and VRF scripts as well. We also again have some helpful scripts for deploying mocks, which is great for testing. And then we also have a helpful script section for some common tasks like getting an account, funding your contract with link, getting a verify status and et cetera. Then we have our env file. Now this is actually really important for getting set up in our readme. We can see that in order for us to work in a local development environment, we're actually going to need to install the Ganache CLI with either NPM or yarn.
00:04:30.398 - 00:05:23.250, Speaker A: You'll know you've done it right if you can run Ganache CLI and it starts running a Ganache node. This is with NPM or yarn. So you're going to have to have that installed as well. This allows us to very quickly work with a local network and then you can go ahead and add it to your networks list by doing brownie networks, add ethereum and literally just copy paste in this line. Now back to the env. The env is going to host at least two very important environment variables, first of all being your web3 infura project ID, which is going to be your infura project ID, which you can go ahead and get a free infura key from Infuria right here. And then it's going to have your private key which you can go ahead, go into your metamask account details, export private key, enter your password and then grab your private key.
00:05:23.250 - 00:05:31.638, Speaker A: Just note that your private key is going to be an alphanumeric here and you're just going to want to put an ox at the start of it when exporting it.
00:05:31.724 - 00:05:32.966, Speaker B: Now you don't have to put all.
00:05:32.988 - 00:06:03.050, Speaker A: Your environment variables in here. You can absolutely just run a command like this or even just run source env to set your environment variables correctly. You'll know you've done it right. If you can run echo private key and the private key spits out on the command line. You can also add an ether scan token for verifying smart contracts. But we're not going to go into that now. Next we have our brownie config and this is where it's going to define all of the different addresses on the different networks.
00:06:03.050 - 00:06:38.150, Speaker A: We have a readme and then we have requirements text which you can use to install the rest of the requirements. So I have ganache installed and I have a private key and I have an inferior key. So let's go ahead and just run Brownie test. This is going to test all my smart contracts from this test folder on a hard fork of Ganache, on a hard fork of Mainnet. And we can see if our contracts are going to actually compile and pass. And they do, which is fantastic. You can also run scripts, run scripts, price feed scripts one deploy price feed Py.
00:06:38.150 - 00:07:13.698, Speaker A: This is going to deploy this to our local blockchain, a local Ganache chain. And we're going to go ahead and see that we're defaulting to a price of 2000. But let's go ahead and actually deploy this to a real testnet. And this is exactly how you deploy a contract to a main net. You would just do network main net instead of network coven. And you can see it quickly spits us out the current price, which is a lot more accurate than on our local blockchain of 2617, which is the latest FUSD price. Now this works for price feeds.
00:07:13.698 - 00:07:33.200, Speaker A: This works on a API calls, this works for keepers. And it's completely customizable so that you can make it work for whatever contracts that you want to work with and whatever setup that you want. So this is Patrick Chainlink, developer advocate. Thank you so much for learning about Brownie and learning about our chain link mix. And really excited to see what you guys build. See you next time.
