00:00:00.170 - 00:00:50.390, Speaker A: Hi, I'm Richard, one of the developer advocates here at Chainlink Labs and today I want to show you how to use Chainlink automation to automate your contracts and give them access to off chain computation. So let's dive in. Alright, when it comes to anything chainlink related, I always think the best place to start is the documentation. So if you head to docs chain link you can find automate contracts and there are two types of contract automation. There are time based automations and custom logic automations. Let's take a look at time based automations. If you click on this link, you'll be taken to the documentation for registering a new upkeep and it will walk you through everything that you need to do to register an upkeep for your contract.
00:00:50.390 - 00:01:25.782, Speaker A: But instead of just reading through this with you, it's probably better if we take a look at what that looks like. If you head to automation chain link, you'll be prompted to connect your wallet. I've already done that and I'm on the go early test network. I need to register a new upkeep and from here I have that selection of if I want a time based or custom logic upkeep. We'll start with time based. Timebase is going to be based on a cron system, so the first thing we'll need is a contract to automate. So let's head on over to remix to taking a look at a very simple example, this contract here has two things.
00:01:25.782 - 00:01:50.126, Speaker A: It has a counted value that is a un. We'll set it to zero at the beginning and then it also has a count function that we can call to increment that value. So we'll need to go ahead and deploy this contract. I'm using the go early test network again. So we'll deploy this contract and we can see that our contract has been deployed. Now if we take a look at the actual deployed contract, we have two things here. We have the count function and the counted value.
00:01:50.126 - 00:02:36.366, Speaker A: We can take a look at counted and it is zero. If we call count it will prompt us for that transaction. We can confirm that transaction and once that transaction is confirmed we can check counted again and see that our value has increased. But if we don't want to click this button all day long, that's where automation comes in. So we'll take our contract address, we'll copy it, we'll head back to automation chain link, add our address here and click next. Now you'll notice it's saying it could not fetch the ABI if you have verified your contract with something like Etherscan, then you will be able to skip this step because it will know what the ABI is. But since we don't have that we can head to the compiler tab here and down at the bottom there is a button for copy ABI, we'll copy that out.
00:02:36.366 - 00:03:09.394, Speaker A: Essentially what this does is it will allow the automation network to know what's available to be called. We'll paste it in here, click next and you'll notice now we have the functions that we can call within our contract. Again, this is a very simple contract, it only has one function, so that's the function that we'd like to call. We'll click next and now we are brought to specifying our schedule. This is based on a cron expression and you can learn more about that over here on the right what each of these values are. We have some examples here. If you click every 15 minutes we can change this to run every 1 minute.
00:03:09.394 - 00:03:29.662, Speaker A: If we like, I will click next and then we'll need to provide it with a name. So we'll just call this count. We have a gas limit. For the maximum amount of gas we have a starting link balance. You'll need to make sure you have enough. If it's not enough link, your automation will be underfunded and it won't actually run. So we need to make sure we give it enough link.
00:03:29.662 - 00:03:51.960, Speaker A: We can see more about that once we've actually created this automation. We can provide a few other details as well, but let's go ahead and register this upkeep. We'll be prompted to confirm. So the first confirmation was for creating that cron job contract. The second one is to register the upkeep. We'll confirm again and our upkeep has been registered successfully. We can now view it.
00:03:51.960 - 00:04:24.730, Speaker A: Here we can see the information about our upkeep, including the balance, the minimum balance, total link spent and when it has run. So here we have the history down at the bottom. We can use that to keep track of what has happened with our upkeep. If we refresh the page we can see in our history now that perform upkeep has run, how much it cost us and how much link we have remaining. Also up at the top we can see now that we have a minimum balance value. This is because the automation network has run a simulation to see how much this could cost. So we have a minimum balance.
00:04:24.730 - 00:04:57.482, Speaker A: We'll need to keep our upkeep balance at least at that minimum balance in order for it to continue functioning. But if we head back to remix and take a look at our contract here and see what counted is, you'll see now the value has changed to two. So we can see that automation is running. Next, let's take a look at custom logic automation. So custom logic automation is a bit more involved. You'll need to do a few things first, you'll need to make sure that you have a compatible contract in the documentation. It walks you through what this means.
00:04:57.482 - 00:06:08.994, Speaker A: There's also an example for creating compatible contracts under create compatible contracts. If we look here, we can see here is an example of an automation contract and we could just click open in remix and that will open this contract for us in remix. So what does this contract do? If we take a look at what it actually does, it's something very similar where we have a counter that we will be incrementing and it will be based upon a interval timestamp. So instead of using a cron counter, we're using a timestamp check in order to do that update. Essentially, check upkeep and perform upkeep are the two functions that you will need for this custom logic checkupkeep will return a boolean value of whether or not upkeep is needed and perform upkeep is what will actually be performing that upkeep. You may notice here in perform upkeep that we run the same check again, and that's highly recommended just to make sure that before you actually take that action on the blockchain that you really need to. So what does this look like when we deploy it? We'll go ahead and pass in an update interval and we'll say one, that's how often we'd like for this to run.
00:06:08.994 - 00:06:33.914, Speaker A: We'll make sure that we are on the correct network. We'll click deploy, we'll approve that transaction as well. And once that transaction is successful, we can take a look at our contract. So you notice we have a few more things here. We have perform upkeep check upkeep, the counter, the interval and the last time that it was called. So our last timestamp is here. The interval is one.
00:06:33.914 - 00:07:01.540, Speaker A: Our counter is currently zero. So how do we automate this contract? We'll go ahead and copy the contract address and we'll head back to automation chain link. We'll register a new upkeep. This time we want to choose custom logic. We'll pass in the address and you'll notice it's going to be verifying to see if it's a compatible contract. Again, if we had verified our contract, it would know. It's saying it can't verify whether or not it's compatible, but we know it is.
00:07:01.540 - 00:07:27.466, Speaker A: We'll click next, we'll go ahead and give this one a name and some link, and we'll register our upkeep. All right, our transaction is confirmed. We can view our upkeep now. And we can see that we funded our upkeep. And the upkeep has actually performed an upkeep once already. So let's take a look at that contract again. Check the counter.
00:07:27.466 - 00:07:56.000, Speaker A: We'll see that our counter has incremented and our last time should increment as well. Yes, perfect. So we've created two different upkeeps, this one using the check upkeep and perform upkeep functions, the first one using that cron value for a time based upkeep. So, as you can see, it's easy to automate your contract with Chainlink automation with our distributed network, giving your contract access to off chain computation and automation. Thanks for watching. I'll catch you in the next one.
