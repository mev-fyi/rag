00:00:00.240 - 00:00:16.542, Speaker A: So we'll get started. I'm Richard. I'm one of the developer advocates at Chainlink Labs. And we also have with us Tony from Polygon. He's a developer relations engineer. And so, yeah, Tony, if you want to kind of kick it off, tell us about Polygon, what it is and what's going on there.
00:00:16.638 - 00:00:43.494, Speaker B: Yeah, so I just want to introduce, like, Polygon ZKVM, but even just the wider Polygon 2.0 architecture and where we're headed. Right, so you've heard, you may or may not have heard about polygons, but start off with introductions. My name is Tony Orlando. And I'm Dev Relia. Polygon and Polygon previously was. Was comprised of a sidechain, but in March, on March 27, we launched the Polygonsic AVM, which is an amazing, amazing feat because it finally used.
00:00:43.494 - 00:01:27.310, Speaker B: We were finally able to prove the thesis that we could actually use zero knowledge technology to scale Ethereum to scale blockchain transactions. And there's a momentous occasion. And I think Vitalik gave a super corny quote, like, one small steps for man, a million, 1 million constraints for something of that sort, which is a very nerdy ZK snark type joke. But, yeah, it was a really cool moment. And from there, I just want to break down, like, what the ZKVM is, and then with that, you'll be able to see the. The wide architecture of where we actually go. So the ZKVM just represents, like, the next chapter of Ethereum.
00:01:27.310 - 00:01:56.724, Speaker B: And so I don't know if you're. Well, I know, I know you definitely are familiar with a couple of different. A couple of different chains and how they work, but, yeah, just. Richard, if you could help me ref on this. Differences between, like, ZK chains and optimistic roll ups, basically. ZK roll ups and optimistic roll ups.
00:01:56.884 - 00:02:20.260, Speaker A: Yeah. So what are the difference? What do I know? So, my understanding is, when it comes to zero knowledge, you probably, at the end of this, will think that that's what I have about them. But I understand, as they use mathematical algorithms to prove things have happened, like the state of things, and they don't necessarily need all of the actual information itself.
00:02:20.332 - 00:02:20.516, Speaker B: Right.
00:02:20.540 - 00:02:22.044, Speaker A: So use a mathematical proof.
00:02:22.204 - 00:02:22.852, Speaker B: Yeah.
00:02:22.988 - 00:02:29.424, Speaker A: To show that something's there. I'm curious, though, like, when it comes to a l two, that's a Zk evm. How does that work?
00:02:29.844 - 00:03:06.634, Speaker B: Yeah, so mostly when you're considering l two s, you have two types. You have optimistic rollups and Zk rollups and what essentially Zk rollups do is basically l two s in general, they batch your transactions. And so you have a bunch of the bunch of transactions that originate on the l two. And then they are put into a sequencer, which then processes all of those transactions and calculates. Alice sent x amount of Dai to Bob. And so this is the state. This is how the transition.
00:03:06.634 - 00:04:28.906, Speaker B: This is how the state transitions and all of those state transitions are summarized and are put into a validity proof and are represented by zero knowledge technology that essentially allows us to be able to represent all of those state transitions in a succinct mathematical proof, which allows us to then very. Which basically allows us to be able to trust that that information is now valid because there's a mathematical proof that verifies all of the state transitions that have been included in that particular batch, essentially. And optimistic roll ups work more or less the same way. Well, not more or less the same way, but it's the same kind of thinking where you have the batches originating on the l two, there's a sequencer and that could also be shared. And then from there, all of the c transitions are calculated off chain, and then they are reintroduced as a Merkle proof. That is then that basically represents all of those state transitions that have occurred inside that particular block. And once that is, once that is reintroduced, then you essentially have a challenge period of seven days that allows you to be able to determine whether or not there was a fraud that was actually committed.
00:04:28.906 - 00:04:50.550, Speaker B: And if there wasn't, then you just continue on with life. But if there was, then there should be. Most of them should have a way eventually that allow you to be able to generate like a, like a fraud proof that basically contests the state of the blockchain.
00:04:50.742 - 00:04:58.994, Speaker A: So with that, I'm curious, is the finality window seven days for Zkub? Okay. Wow, that's a long time.
00:04:59.484 - 00:05:05.492, Speaker B: Okay. Yeah. But for ZKV is much, much, much lower.
00:05:05.668 - 00:05:06.380, Speaker A: Okay.
00:05:06.492 - 00:05:07.584, Speaker B: Yeah, yeah.
00:05:07.924 - 00:05:09.020, Speaker A: Okay, cool.
00:05:09.212 - 00:05:12.412, Speaker B: Actually, instant finality on the actual chain. Yeah.
00:05:12.588 - 00:05:17.556, Speaker A: Okay. Yeah. So that's. You're talking about finality to, like, the l one, not finality on the chain. Gotcha. Gotcha.
00:05:17.580 - 00:05:25.344, Speaker B: And finality, the l one could take like this is still takes like under 1 hour, which is vastly different from seven days. So. Yeah. Right.
00:05:25.684 - 00:05:26.972, Speaker A: Okay. Very cool.
00:05:27.108 - 00:06:25.660, Speaker B: And that's the value prop of using ZK vms. So why Polygon ZKVM? You essentially inherit the security of Ethereum. You have almost full EVM equivalents. And we are working on getting to the point of full EVM equivalence. It's fast and it's very performant and it gives us very low cost transactions. But now when we launched, like the ZKVM and it's public, right, we then realized, well, we could have a public blockchain, but what if we could enable anybody to have their own public blockchain? So similar to what Opstack would have, we decided to launch the seed decay. And it was always a service offering available where you could reheard what was previously called super Nets and you could essentially spin up your own instance of Polygon Mumbai.
00:06:25.660 - 00:07:55.686, Speaker B: I mean, well, the Polygon pos changed before, but now that we have the zero knowledge technology, then we started considering what if we could enable anybody to be able to deploy their own l two, and that would democratize access. It would make sure that different dapps have the ability to have their own chains. And the future that we kind of see is every Dapp potentially having their own chain. So it'll be as simple as opposed to this massive shared state, the same way every startup runs their own server. We envision a future where every Dap will be able to have its own chain. But then when we consider that, then, okay, how would that work at scale? How do we, if everybody has everything in disparate locations, could there be a way that we could actually make things cohesive? Should we start working with other projects and try to build, like, interoperability and all those kinds of things? It becomes really, really difficult to begin to consider that once you get past the public blockchain milestone. And so what the gigabrains at Polygon did is that they actually considered, okay, how could we unify liquidity across any l two that launches on Polygon? And so give you the ability to be able to move, to move, like tokens and messages from any, from, from any l two chain that is powered by polygon to any other and directly to the ethereum or the l one.
00:07:55.686 - 00:08:28.036, Speaker B: And thus the vision for Polygon 2.0 was born, where it's essentially like just the next stage for the protocol where we envision to have unlimited scalability. So imagine having unified block space, but also unlimited unified liquidity. So you could actually move funds. So if Uniswap has its own sovereign chain, it could move, it could, you could move it to the, to the ape coin chain. Knock on wood. Or the seller chain, again, knock on wood.
00:08:28.036 - 00:09:06.394, Speaker B: Those are all ongoing active proposals. But, yeah. So imagine building a full stack that has us be able to do that. And what that looks like is that it's a four layer stacking where we have a centralized set of provers. We have a centralized execution environment, which is the individual chains. We have an interoperability layer that facilitates communication. And then we have a staking layer that enables communication, I mean, incentivizes network participants to be able to stake and be able to earn and be able to support the protocol.
00:09:06.394 - 00:09:36.280, Speaker B: So that's how we're kind of looking at it. And to bring it all home. There's a really good analogy that Mark Byron, our CEO, used. And essentially the polygon of today as we know it is Polygon. Pos and polygon Zkvm. So the polygon of the future is the polygon of today. Pos and ZkVM and polygon mytem and Maidan is like a privacy chain that looks a lot like Aztec or something on that, right.
00:09:36.392 - 00:09:37.444, Speaker A: Okay, cool.
00:09:38.904 - 00:10:22.550, Speaker B: And then in the future, imagine now the final endgame is just a polygon, which includes Polygon ZKVM. We are actively, actively working on transitioning POS to ZK. PoS, which will run as a validium, and then all of the CDK chain. So every protocol chain that is spun up as part of the CDK will be part of that polygon ecosystem. And then we have this massive thing called the interoperability layer that just facilitates communication. It's like a massive traffic cop that essentially routes messages across the ecosystem. And we use pull to be able to secure the network and to be able to incentivize participants.
00:10:22.550 - 00:10:46.066, Speaker B: And that's the future where we're looking at, and that is Polygon 2.0. So in the future, what's going to look like is that we have the ZKVM mainnet, which is what is there. We have Polygon Maiden, and then you have various app chains that could exist and they could communicate with each other and they could communicate with Ethereum at one. Yeah. But for now, I guess we could get started with our challenge for the day.
00:10:46.250 - 00:11:18.774, Speaker A: Yeah, sure. So, yeah, brief overview for everyone. What we're going to be doing. Just real quick in the chat. I know I said don't use the chat earlier, but this is time I do want you to use the chat. Can you just drop a one if you have participated in one of the other functions classes in the chat, just so I get an idea of that. And if you haven't, is there anyone here who doesn't have a wallet set up yet? Okay, so a lot of people, this is their first one.
00:11:18.774 - 00:12:02.292, Speaker A: Cool. So I guess if you don't have a wallet, let me know in the chat because I'll change kind of how I walk through this then. But if we're all good with wallets, we can skip the super basic beginning getting started steps. No wallet. Okay, so if those of you who already have a wallet can just hang with us for a second, I'm going to speedrun setting up a wallet for the people who don't have a wallet yet. And we'll kind of run through that. So give me 1 second here to fire up chrome and get rid of my wallet.
00:12:02.292 - 00:12:21.640, Speaker A: Somebody wanted to see the private key. I'll share my private key with you. That's fine, we'll do that. I recommend no one else share your private keys, but just for you all, I'll share my private key. I don't mind. I'll never use this wallet again, so it's okay. Oh, Metamask is sad to see.
00:12:21.672 - 00:12:59.204, Speaker B: I do have a couple of questions. I noticed there that people are asking about if it's, if the function, if this, if this is about using polygons, KvM, if our workshop is going to focus on polygon, ZKvM. And it will not, but we are actively going to going to. Well, we will do that probably at some time in the future. But Chainlink function still hasn't been deployed in the ZkVM yet. But as soon as it is, I will be pinging Richard again first to get started with this.
00:12:59.944 - 00:13:17.184, Speaker A: All right, I just dropped in the chat a link to the document that we're going to be going through. So if you want to follow along, that's awesome. I'll try to go at a pace that will let you follow along. And I don't know, Tony, if you want to follow along and call me out if I miss anything or something's confusing, that'd be awesome. You can be the voice of the attendee.
00:13:17.344 - 00:13:18.084, Speaker B: Yeah.
00:13:18.384 - 00:14:02.554, Speaker A: So what we're going to be building is basically a decentralized news aggregator. We're going to use chainlink functions to pull data from hacker News into the blockchain. So we'll use the hacker news API, pull that data on chain, and then we'll use Astro as a front end to actually display that information as well, reading it off of the blockchain. I will warn you, my front end skills are quite limited, so it's going to be a bare bones front end, but it'll work. That's the creed of every good back end dev who has to do front end work is, hey, but the data is on your screen and it works. Yeah. All right, so we'll go through a couple things really quick.
00:14:02.554 - 00:14:33.804, Speaker A: Let's go ahead and install metamask. If you head to Metamask IO, for those of you that don't have a wallet, you can add it to your browser. We'll click on download. I'm using Chrome to kind of walk through this, and I'll be using a different browser for the actual tutorial. But we grab the extension, we'll add it to chrome. Go ahead and pin it probably is a good idea. We agree to Metamask's terms and we'll create a new wallet.
00:14:33.804 - 00:15:01.814, Speaker A: We'll agree again. We'll make a password, make sure your password is good. Whoops, my password's weak because like I said, I'm not going to use this wallet ever again. This password, all it does is basically makes it protects accessing your metamask extension. This has nothing to do with your actual wallet. On a blockchain, a wallet is essentially your public and private key, kind of combined. That's your wallet.
00:15:01.814 - 00:15:21.106, Speaker A: Your private key is something you should never share with somebody. That's what lets you sign transactions, execute transactions on a blockchain. Your public key is how people know that you're the one who used your private key. It's a asymmetric cryptography algorithm there. So you have two keys. Your private key never gets shared. Your public key, that's something too.
00:15:21.106 - 00:15:56.584, Speaker A: That's like your public address. That's how people know you on the blockchain. So go ahead and create a new wallet here. We can watch this video if we want, but we won't do that. We'll click secure our wallet and that's gonna give us our twelve word secret phrase, our seed phrase. This is something you should never share with anybody, because if somebody were to see these twelve words, like I'm showing you here on my screen, they have access to your wallet. But we'll go ahead and copy this to a text file real quick because I'll need to verify them in a second.
00:15:56.584 - 00:16:30.224, Speaker A: We'll click next, and then we have to figure out what words we had just to make sure that we know what they are and become. And that is basically how metamask says, hey, you definitely did write down those twelve words that I showed you. See, I know if you don't have a wallet yet, like, I'm blazing through this, but you can kind of catch up as we're talking through the next part. So we got it and we'll click next. Next. It tells us all about our Metamask. Huzzah.
00:16:30.224 - 00:16:43.684, Speaker A: And cool. We have metamask here. I don't know about you, Tony, but I like to go to chainlist.org, add things to.
00:16:47.144 - 00:16:50.724, Speaker B: More reliable. Unless they get there.
00:16:51.424 - 00:17:06.856, Speaker A: Yeah. So I definitely see in the comments, too. Sorry, somebody's saying, like, you're not supposed to put them in a text file. You're absolutely correct. You are not supposed to put them in a text file. I did a lot of bad things just then, so you should write them down, keep them safe, and not store them in a text file. Like, definitely not.
00:17:06.856 - 00:17:34.101, Speaker A: You shouldn't let other people see them. Like, everybody who's gonna see this video just saw those. So that's the wallet that I'm using here is essentially public, right? It's like my. If you think of your wallet, like, your actual wallet, like, I'm just holding my wallet open, and anybody who wants to come by and take money out of it, they can do that now. So that's definitely, definitely not a good practice, what I did. But for the sake of teaching, you got to do that. Right? So if you go to chainlist.org.
00:17:34.101 - 00:18:03.114, Speaker A: Oh, I just realized. Sorry, Ben. Behind the scenes, I'm pasting links all over the place. But just to Tony and myself. We'll search for here. And when we click connect wallets, that'll let us connect our wallet to this website, and that'll actually add this network to Metamask. So now we have that new chain available for us.
00:18:03.114 - 00:18:29.530, Speaker A: We can double check. Click here. It even told us we switched to Mumbai, but we can double check up here in the corner. Hey, we're on Mumbai. You notice we have no funds, and that makes me sad. So we will need to get some funds if we take a look at our get book, we have here the workshop faucet. It does have a password in front of it.
00:18:29.530 - 00:19:03.094, Speaker A: So you can go to the workshop faucet and you can get funds. I do ask that you only get the amount that's, like, pre selected here. What you'll need to do is you'll need to paste your wallet address in here. So if you have metamask, you open up metamask, copy your wallet address to the clipboard, pop it in there, and send the request. And then I'll actually get from the faucet some of that funds. So we have link tokens, which are what we'll use for actually doing the functions call. And then we also have some matic, which is the native token of Polygon Mumbai.
00:19:03.094 - 00:19:28.554, Speaker A: I do see there's a question. What's the purpose of chainlist when it comes to that chain list. Basically it lets you easily add a chain to your wallet. So just real quick, if you were to come in here and we wanted to add a network, we could either search here or add a network manually.
00:19:29.214 - 00:19:33.054, Speaker B: And chainless, they have an add function. Now that's really cool.
00:19:33.174 - 00:19:53.734, Speaker A: Basically takes Mumbai is the name. Here's the chain id, there's the currency. Here's some RPC URL's network name. RPC URL, chain iD, currency symbol. It fills it in all fours. Basically, the purpose of chain list is I'm lazy and I'd rather click two buttons than type a bunch of stuff. That's a great question.
00:19:53.734 - 00:20:58.594, Speaker A: All right, so we went to the faucet, we did our send request and now switched over to the other wallet here. But we've got some matic if we look, we've got some tokens here, but you may not see this link token because you probably haven't added that to your wallet yet. So how do we go about doing that too? While we're here, if we just go to docs chain link and we can take a look at the functions documentation under resources. We have a link token contract bit here. I'll pop this into the chat man bins on top of it. If we scroll down, I feel like my screen's view is too big, missing out on all the goodness here. If we go to Polygon Mumbai on the right hand side and click add to wallet here, this will add the link token to our wallet, and then you'll be able to see your balance.
00:20:58.594 - 00:21:06.574, Speaker A: So it's like speedrunning, setting up metamask, getting funds from our faucet, getting link tokens. Is everybody with me so far?
00:21:06.734 - 00:21:07.382, Speaker B: Yeah.
00:21:07.518 - 00:21:28.514, Speaker A: That lose anybody? The faucet link. It's actually in this documentation, but sure, I'll grab it for you. I bet Ben will get it before I do. Boom. It's right there. So it's in the get book. Okay, fantastic.
00:21:28.514 - 00:21:40.534, Speaker A: Speedrun setup done. Okay, everybody's with me, it seems. Seems like we're all good. We'll move on to our decentralized new service contract.
00:21:42.244 - 00:21:43.612, Speaker B: Visitor password.
00:21:43.748 - 00:22:00.304, Speaker A: The passwords in the git book. Yeah, it's right here. I'll just go ahead and paste it. Why not? I'll make your lives easier too. Go find things. Copy paste them. One stop shop.
00:22:00.304 - 00:22:39.278, Speaker A: One thing to note, all of this code that we're going to be covering today is on GitHub here. There's a link in the git book. Most of it is set up like a normal astro project. Astro is just a front end framework. One thing to note is there's a ref folder that does have the contract that we'll be using today as well. So I won't be going back to GitHub again, but it's all there in its final form if you'd like to do that. Okay, so we've got everything set up, we're ready to go.
00:22:39.278 - 00:22:59.714, Speaker A: We're going to be using remix, which is just online iDe. We'll be using chainlink functions and we're going to be using Astro. So these three things together will let us build a distributed news aggregator that will, like I said, pull information off of the hacker News API. We're going to start. Yeah, what's up?
00:23:00.214 - 00:23:07.534, Speaker B: Just for reference, in case somebody hasn't interacted with Hacker news, it'd be good if we could like just, could you pop it open?
00:23:07.694 - 00:23:35.924, Speaker A: Yeah, sure. Give me, sorry, give me 1 second. So news dot y combinator.com so this is Hacker News. It's kind of like a tech news website. What the API call that we're doing will be is it will pull the newest article from the new tab. Basically I will say there's a couple of weird little edge cases that I didn't really take care of.
00:23:35.924 - 00:24:08.624, Speaker A: One of them is when people ask questions, they don't provide a link. Sometimes this is expecting a link back, so sometimes it'll show up like it looks like it's not working. But that's because it returned null, because there's no link to be had when it comes to the API information. What I have set up is to pull the link and we're just storing that link on chain. And then on the front end we're using that link to grab the title and the open graph image as well. Yeah. So this is hacker news.
00:24:08.624 - 00:24:43.288, Speaker A: I mean you can spend all day here just refreshing, reading people's thoughts and stuff, that kind of a thing. So coming back to the gitbook, we've got here a very beefy skeleton. I'm going to copy this and then I'm going to go to remix. So this is remix dot erieum.org dot I've gone ahead and I've just done new file. I have blank functions news sol here and I'm going to paste in what I just copied. Remix is going to tell me, hey, you pasted some solidity code.
00:24:43.288 - 00:24:48.836, Speaker A: Make sure you know what you're doing. And I'd say this face, you can trust me, right?
00:24:48.980 - 00:24:49.764, Speaker B: For sure.
00:24:49.924 - 00:24:53.184, Speaker A: Maybe you can't trust me. Let's go through this code and see what it actually does.
00:24:54.404 - 00:24:56.276, Speaker B: Do you mind increasing the size of the.
00:24:56.340 - 00:24:59.624, Speaker A: Oh, sure, yeah, maybe.
00:25:02.964 - 00:25:03.780, Speaker B: Yeah.
00:25:03.972 - 00:25:04.984, Speaker A: Is that better?
00:25:05.604 - 00:25:07.756, Speaker B: Maybe slightly more. Boom. Yeah.
00:25:07.900 - 00:25:11.144, Speaker A: Okay, cool.
00:25:11.474 - 00:25:14.334, Speaker B: Like I said, this is, you need all the assistance.
00:25:15.514 - 00:25:38.278, Speaker A: This is a very beefy skeleton here. It's a full skeleton, every single piece intact. But we're going to add to it here in a minute. But let's go through what we've got so far. This is the basic outline of what we need for functions. We've got our license identifier, our compiler version. We're importing a few contracts here from Chainlink to let us interact with functions.
00:25:38.426 - 00:25:39.654, Speaker B: Moving way too fast.
00:25:39.814 - 00:25:44.190, Speaker A: Moving too fast. Chainlink does have contracts, lots of contracts.
00:25:44.342 - 00:25:46.350, Speaker B: So what does it do? What do they do?
00:25:46.502 - 00:26:22.052, Speaker A: Yeah, so the first one, the first one is it lets us use functions. So that's going to be a functions client contract. So that's how we'll interact with functions. We have confirmed owner. Basically it is a wrapper for only owner so that only the owner can do certain things. And then we have our functions request which lets us interact with the oracle network. Yeah, so we set up our contract functions consumer example we're importing in those function client function, confirmed owner.
00:26:22.052 - 00:26:44.732, Speaker A: We'll set up our functions request using the imported functions request above. We've got a few variables that we set up here. These, I mean, technically we'll use them, but we're not really using them. This is again just kind of that skeleton. So we have our last request id, response and error. So this is when we make a functions request. We'll have a request id when we do that.
00:26:44.732 - 00:27:34.500, Speaker A: Then we get a response back and if there was something that went wrong, we'll get that error message back as well. You'll see where they're used down below. We have our error type here and then an event for the response back from functions. So the way that functions works is it's kind of a like async await process is how I think of it, if you're familiar with JavaScript or something like that, where you make a request to the oracle network. So two chainlink functions and the oracle nodes go off and they do their work and then they eventually come back in and then they call another function in your contract with that response data. So we'll see what that looks like here in just a second. We have here the router address, so the routers will actually is the contract that we'll be talking to.
00:27:34.500 - 00:28:15.040, Speaker A: And you'll notice this one's set up for Sepolia by default. So we'll need to change that. Right, because we're going to be using Mumbai. We have our subscription iD and the subscription id is going to be for our function subscription. So the way functions works is you create a subscription, I like to think of it like a bucket and you put some link in it and then you authorize your contracts to use that subscription and then they can pull link out of that bucket to do their requests. So that's kind of like how things will be working when we do that. We can actually create that subscription here in just a moment and we'll get a subscription id.
00:28:15.040 - 00:28:48.228, Speaker A: You have to let your contract know about the subscription. And then once your contract's deployed, you let your subscription know about the contract. There's a question here. What about the guys who are always left behind? What's up? Are you, where did you get left behind? I'm not going to leave you behind. So if you have a question, if you're stuck on something, just let me know and we'll catch you up. That's right. No dev left behind.
00:28:48.228 - 00:29:13.964, Speaker A: Drew's got it. Trying to find the code. Cool. If we come here at the top of that page? Oh, that may be, that maybe not be the link that you want. I don't know what that's going to do when you click on that. Probably won't work for you because that's my logged in link. Sorry, can I delete this? Yes.
00:29:13.964 - 00:29:47.276, Speaker A: There we go. If you go to that link, at the top of the page is the GitHub, but if you scroll down it's right there in the middle of the page too. If that's not what you need, if you need more, let me know. So we've got our subscription id that we talked about. We've got our gas limit. Where's the gas limit come into play? When functions comes back into our contract, this is the maximum amount of gas that it can spend basically. So we make a call to functions and we'll pay the gas fee for that.
00:29:47.276 - 00:30:11.080, Speaker A: But then the oracle network comes back into our contract with a response and we'll do something with that response. And that gas amount, this is the maximum amount it can be. We have our donid force polio. So this is going to be the oracle nodes like the donid for that. So we'll need to change that as well. To be for Mumbai. We've got our source string.
00:30:11.080 - 00:30:47.778, Speaker A: This is going to be the actual JavaScript that we'll use. So we'll fill this in here momentarily and then we get to actually doing something in the contract. We've got our send request here and our fulfill request. So send request is going to actually send the JavaScript to the Oracle network, right. And then it'll run. And then when it gets done running and the response comes back, that's where it'll come into fulfill request, into our contract and we can actually do something with it on chain. So that is an overview of the skeleton, Tony, is that clear? As mud.
00:30:47.778 - 00:30:57.122, Speaker A: Anybody in the chat? Questions, thoughts, comments? Everybody good so far? You've got remix open and you've got the code pasted in.
00:30:57.258 - 00:31:06.828, Speaker B: Let's just make sure everybody's following along with us. I was wondering if you mind me driving for the front end?
00:31:07.026 - 00:31:08.432, Speaker A: Yeah, sure, absolutely.
00:31:08.488 - 00:31:11.884, Speaker B: Like help me bumble through even though I looked into it.
00:31:12.544 - 00:31:14.004, Speaker A: No, absolutely.
00:31:16.944 - 00:31:17.360, Speaker B: Okay.
00:31:17.392 - 00:31:40.018, Speaker A: I'm assuming since nobody is like saying, hey, I don't understand, I'm lost, that we're good. We're going to keep moving forward. All right, I'll head back to the git book. We're going to make a couple changes to this code. So the first thing we're going to do is we're going to add a struct for our articles. So our articles are going to have two things, URL and then a published date.
00:31:40.106 - 00:31:41.254, Speaker B: What is a struct?
00:31:41.634 - 00:32:18.814, Speaker A: A struct is basically just a object of different types. So it's a way of saying in solidity, hey, we've got this thing called an article. An article is made up of a URL and a published date. You may notice this URL, you probably expect a URL to be a string, but it's going to be encoded when it comes back in and I'm not going to decode it. So we're going to leave it as a bytes, so it'll be encoded as a bytes. So we'll keep that and then we're going to create an array of articles called articles, and that's what we'll be storing all the different stories that we add to it. Somebody's lost.
00:32:18.814 - 00:32:54.694, Speaker A: Where'd you get lost? What's the last thing before you got lost? That made sense? We'll wait for that. I'm going to copy this code here and I'm going to head back to remix. I will say too, if you do get lost, one thing, like you just start reading the get book because it's all here. I may be talking too fast or something too let me know, but I'm gonna copy this code and I'm gonna head back to remix. Where did I say to put it? Said right after the last error.
00:32:55.114 - 00:32:55.922, Speaker B: Yeah.
00:32:56.098 - 00:33:23.180, Speaker A: Okay, so come here. Last error. Just pop it in here, give it the old paste. So we added our struct for our article, and we added a private articles, array of articles. One thing to point out here in remix, I've got this nice green check mark. If you don't have a green checkmark, you can click here on the solidity compiler, turn on autocompile. That just means every time you make a change, it's going to try to compile and it'll let you know if you did something wrong.
00:33:23.180 - 00:33:45.096, Speaker A: Because if you do something wrong, like, you know, I made a goofy, it'll say, hey, oh, no, something's wrong. And then you know that you made a goof. Cool. So that's all. Happy? Ruben, I don't know if there is a way to format code. Aha. Right there.
00:33:45.096 - 00:33:49.244, Speaker A: Right click on it and it'll format it for you.
00:33:54.764 - 00:33:55.620, Speaker B: Yeah.
00:33:55.812 - 00:34:12.964, Speaker A: Yes. You got it, Drew. We're going to add to it. If you're unsure about your copy paste skills and you're afraid you might miss something, at the bottom of the page is the completed thing. But we don't want to skip ahead. No spoilers. So we've got our struct and we've got our articles.
00:34:12.964 - 00:34:30.561, Speaker A: We're going to add an event so that we know when things have happened. So this event is called article added. An event is basically like logging for solidity for smart contracts. So every time something happens that calls an event, it will essentially log that event so then we can see it.
00:34:30.737 - 00:35:08.764, Speaker B: Yeah, and it's super important as well, because events are, what if you don't know, like the state transitions could actually occur or things could happen on chain, and if they're not logged, you won't really know that it happened. And so events are just hooks that allow us humans to understand what has occurred on chain, and it's computing everything, and it also facilitates, like, indexes. So think of the graph and many other indexing tools they need. They need that kind of service. Yeah, yeah. Well, they need events to be able to index blockchain and so on.
00:35:09.184 - 00:35:36.134, Speaker A: Yeah, good points. Good points. Ruben, you're asking, can you register to an event? I'm assuming you're meaning like an event listener type thing. So not really from within a smart contract, but Chainlink automation does allow you to run functions based on event logs. So you can listen for an event with Chainlink automation and do it that way. So, you know, just plug one of our other products.
00:35:36.284 - 00:35:41.650, Speaker B: Yeah, those are really great. Like shameless self promotion right there.
00:35:41.682 - 00:35:45.538, Speaker A: Like you start, it's new and it's cool that you can do that now.
00:35:45.666 - 00:35:49.650, Speaker B: So yeah, that's really cool. I apologize for it. It was pretty cool.
00:35:49.842 - 00:36:07.914, Speaker A: Yeah. So what's this q and a? Not completely related, but if possible I'd like to know how the data on an automated function consumer is updated. Functions plus automation. I see it updates the contract data. Okay, I may or may not get to that question, Claudio, because it's a bit off. I can probably get to it at the end.
00:36:08.214 - 00:36:17.834, Speaker B: Okay, to be clear, if you want the rest of us rules to see, please post your questions to host and panelists as well. Or even just everyone ideally.
00:36:19.694 - 00:36:47.686, Speaker A: Yeah. Okay, so we've got our event covered and now we've got some JavaScript code. This is not solid anymore. So this is the actual JavaScript that we'll be running using chain link functions. Copy this and we'll click on this link here. Go to functions chain link playground. This will let you actually see what the output of your JavaScript will be using.
00:36:47.686 - 00:36:51.354, Speaker A: Chain link functions. So I'll get rid of the example that's in there.
00:36:51.694 - 00:36:52.574, Speaker B: Excuse me.
00:36:52.694 - 00:37:18.738, Speaker A: And we can walk through this. The first thing we've got our hacker news API URL. We're going to make a new request with that URL. One thing to note here is we're using functions make httprequest. It's like a fetch. That's right, I made fetch happen. We set up our request and then we get the response back with an await.
00:37:18.738 - 00:37:46.424, Speaker A: Grammarly, you're not a code reader. In our await we wait for that request to come back. So that'll give us the response. Check that response for any errors. On line seven, we'll get the latest story from data zero, and then we'll take the URL piece of that. So we get back a response. This is going to be a sorry.
00:37:46.424 - 00:38:22.074, Speaker A: We'll get back the latest story from that response data, and then we'll use the hacker News API again to get the information about that story with this JSON. So this returns a JSON object. So go and make that request. It's actually doing two API calls. One to get the latest stories like id number, and the second one to get the full information like JSON blob from that. And then we wait that response and we finally return back the URL that someone passed in. It's a lot of stuff.
00:38:22.074 - 00:38:37.486, Speaker A: If we click run code, we can see hey look at that. It's near times on biological age testing. Cool. This is what we'll actually be storing on chain. Your question, Tony?
00:38:37.630 - 00:38:39.874, Speaker B: Nope. I'm just really excited about that.
00:38:40.654 - 00:39:10.194, Speaker A: Ok. Yeah. If we do a console log and we put in here story response, I think that'll work. No, of course not. Is it data? Yeah, run code. What is it I need to do? I always forget this. Is this that'll like unfurl it if I put it inside the little curly brackets.
00:39:10.194 - 00:39:12.794, Speaker A: Nope.
00:39:13.234 - 00:39:24.534, Speaker B: Yeah, it's an object. Object.
00:39:27.874 - 00:39:33.934, Speaker A: I think title's another thing that we've got. So we've got like the title. There's a bunch of different information. Yeah, I could stringify it.
00:39:35.074 - 00:39:36.850, Speaker B: Oh yeah, it's a JSON object. Right.
00:39:37.002 - 00:39:38.534, Speaker A: Json stringify.
00:39:43.534 - 00:39:44.954, Speaker B: And there you go.
00:39:46.374 - 00:40:19.474, Speaker A: Oops. Cool, thanks. So yeah, we've got all this information that can come back, but we're just basically saving just the URL. So why are we saving just the URL? Because space is limited when it comes to how much you can store with that maximum gas fee and strings are super expensive, so the bytes will be a little bit better. But I could probably figure out some way to optimize the code for storing all of this. But yeah, we're trying to store as little as possible on the blockchain. So we're getting back the URL.
00:40:19.474 - 00:41:03.084, Speaker A: This is just a place to play around, see what we got, see what the results are actually going to be. Right. So our output is going to be this. So we'll head back to the gitbook and yeah, we are now going to take this code here and essentially smash it all down onto one line, just to make things easier to copy. So we can copy this middle one here without the string in the front, just the const URL. We'll head to remix and we'll put that in our source right here. And it's a ridiculously long line.
00:41:03.084 - 00:41:28.920, Speaker A: Yeah, it is, but it just kind of makes life easy. You can separate it onto multiple lines with like lots and lots of quotes. But yeah, I find it just easier to do one long string. Okay. And then before I forget, we've got these two addresses here that we need to change. So let's go ahead and take care of that. Now.
00:41:28.920 - 00:42:05.412, Speaker A: We've got a link right here in our comments. If we click on that and we're looking for the router address, we take a look at our supported networks. We're on Polygon Mumbai, so the functions router, we'll just copy live back and replace it and then we also need the Don ID. It's on that same page. It's right here. So we'll copy the address. What is the donid? So it's the string that's used for on chain calls within the don.
00:42:05.412 - 00:42:26.926, Speaker A: So Don is the distributed Oracle network. Yeah. So did I copy it? I'll make sure I copied it again back here. Paste that in. We've got those two things changed. Da da da. Back to the get book.
00:42:26.926 - 00:43:32.680, Speaker A: Keep working on a couple more things real quick. Within fulfill request. So when we get the response back from the Oracle network we need to actually do something right because right now what's going on with it. So within fulfill request all we're doing is we're setting latest response our error and then we're emitting our response event but we want to actually store those URL's, right? So if we head to our thing here and we copy this little tiny bit of code here and we put that inside our fulfill request. So what we're doing is we're pushing the response and the current block timestamp for like our published date into our articles array and we're admitting our event that hey, an article was added. So that's pretty simple. And the only other bit of code that we need in our smart contract is just a little helper function to loop through all the different values in the array and return them.
00:43:32.680 - 00:43:48.636, Speaker A: So we can call this from our front end. So we'll just add a new little function down here. So this will go through our array of articles and return them. It's not super efficient from a gas perspective, but it's a view.
00:43:48.820 - 00:43:49.584, Speaker B: Yeah.
00:43:51.924 - 00:44:39.894, Speaker A: Cool. So with this we have one tiny change that we need to make still we need to update our subscription iD and then we can deploy this contract. So for our subscription id if we head to functions chain link, make sure that you are on the Mumbai network here we can create a subscription. This is one of the products. We actually do require an email address. I will say if you're worried about providing your email address for the purposes of this tutorial that nothing is going to confirm it while you're doing the tutorial. And that's all I'll say about that.
00:44:39.894 - 00:44:58.054, Speaker A: So we'll confirm a couple of things when we subscribe here. So we're actually creating the subscription and doing all this stuff on chain, which is pretty cool. So it does take a hot second. Is everybody with us so far? Are we doing good?
00:44:58.754 - 00:45:12.974, Speaker B: Yeah, I'm with you. How's everybody doing? Silence either means everybody's following along or they just gave up. I want to be positive. I think everybody is following.
00:45:20.514 - 00:45:39.084, Speaker A: I got thumbs up. Somebody gave me a thumbs up. That's fantastic. Floating up my screen. All right, so our subscription is created now we need to actually fund the subscription. So we'll add that link that we got from the faucet. If you just want to add like say five link, that should be plenty.
00:45:39.084 - 00:45:43.724, Speaker A: And we'll confirm that transfer as well.
00:45:48.504 - 00:45:57.224, Speaker B: So personally I haven't delved quite a bit into figuring out how link is being consumed. But what does that consumption look like?
00:45:57.644 - 00:46:30.650, Speaker A: Yeah, so within the Oracle network link is basically like the native don token if you want to think about it that way. One cool thing about it is when you send it it has the ability to do what's called a transfer and call. So you can basically send link to an oracle node with a note attached to it saying hey, I want you to do this with it. So this is how you are funding incentivizing. The oracle nodes do work for you basically. So now we've funded it, we transferred that link. We want to add a consumer.
00:46:30.650 - 00:46:52.724, Speaker A: So this is going to be the contract that we're about to deploy. But like now we're in the chicken and egg problem that we always run into in these demos. We're like hey, we need to deploy our contract so we can put the address in here. But luckily we have our subscription iD. This is what we needed before we could deploy our contract. So in my case my subscription iD is 1236. Yours if you're following along, will probably be different.
00:46:52.724 - 00:47:13.904, Speaker A: I'll copy my id. Don't copy my id, copy your id because it won't work if you copy my id. And here where it says subscription id, we'll paste in our subscription. At that point we are ready to deploy our contracts. We'll go to the deploy tab, we'll click on environment, make sure it's injected provider.
00:47:14.204 - 00:47:17.820, Speaker B: Why? Why does it need to be the injected provider?
00:47:18.012 - 00:47:23.060, Speaker A: Why? Because that's gonna let us use metamask and so we'll actually be using the network that we're using here.
00:47:23.212 - 00:47:36.726, Speaker B: Yeah. So when you connect your wallet to remix, it allows you to basically run transactions using the network that you have selected in your wallet, correct?
00:47:36.830 - 00:47:48.994, Speaker A: Yeah, you got it. There's a question. Is subscription id equal to the name? No, it's not the same thing as name. So it's going to be the id like it's an identifier number for that subscription.
00:47:50.374 - 00:47:52.074, Speaker B: Is it always four digits?
00:47:52.574 - 00:48:31.392, Speaker A: It's sequential. So like yesterday I was doing something and I actually got 1234. And then I did the next one. You know, I got 1235. And evidently nobody's created a subscription on Mumbai since I did my demo yesterday. But yeah, so you don't see your id? Okay, Ruben, hang out 1 second and we'll talk through a couple things. So if you don't see it here on this, like if you don't have ad consumer or like maybe so if you're here, you can just paste your contract in here in a moment and click add consumer.
00:48:31.392 - 00:49:06.566, Speaker A: If you want to follow along and go down this crazy path with me, feel free to, but I would recommend staying here if you're here. But maybe you were here, Ruben. And like now it says your subscription id here. Or maybe you're back here on the main chain link functions page and you're like, oh, hey, where are my subscriptions? You can see, hey, there's one right here under my subscriptions. And that's your id. If you don't see any of those, then maybe you need to create a subscription and kind of go through it again. So if for some reason you got a subscription here and you need to add a consumer, you can do that here and we need to go back and deploy our contract.
00:49:06.566 - 00:49:48.324, Speaker A: So we left off here, go and click deploy. Make sure you've changed your subscription id and make sure you change the two addresses to Mumbai. So he was asking, why Mumbai? Because Tony told me Mumbai is the best network to use for this. And yeah, you could use any network though, that has functions support. All right, so our contract deployed here, we can see it. We'll copy the contract address with the little copy button. We'll head back to functions and we'll paste it in there and we'll click add consumer and we'll approve that transaction.
00:49:48.324 - 00:50:45.116, Speaker A: Ruben, let me know if I got you sorted out there. You found your id. Fantastic. And we'll wait. Sometimes it feels like it takes so long. Everybody good so far though, like while we're waiting for this, oh, hey, we got it. Okay, so our consumer has been added, right? So we've got this consumer, we got a little history down here showing what's happened.
00:50:45.116 - 00:50:48.748, Speaker A: We created a subscription, we funded our subscription, we added a consumer.
00:50:48.876 - 00:50:49.316, Speaker B: Whoo.
00:50:49.380 - 00:51:09.768, Speaker A: Lots of stuff. If we head back to remix, we can click get articles and see that we have none articles. We can also click send request. And this will actually run that JavaScript code through functions. So we'll click confirm. We'll hang out here for 1 second, wait for the little green check mark. Huzzah.
00:51:09.768 - 00:51:39.054, Speaker A: We'll head back to functions. If we refresh this page, we'll see. Now we have a pending transaction. This is actually, we're waiting on the oracle networks to spin up a sandbox environment, run our JavaScript code, get the results back, come back on chain. Agree. Hey, this is the response that we got back and put that information on chain. A weird thing, just so everyone is aware of it, the way that we reach consensus when it comes to the oracles.
00:51:39.054 - 00:52:05.902, Speaker A: I guess I didn't talk about this. If you're not familiar with like what an oracle is or what chainlink does, like the main problem they solve is bringing real world off chain data on chain because, or bring non deterministic data. Really on chain. What do I mean by non deterministic? It means any data that say it depends. Value is non deterministic. That's how I like to think about it. I often use the example of one plus one.
00:52:05.902 - 00:52:17.074, Speaker A: If I ask you that question, it's deterministic because it doesn't matter when, where I ask it, it's always going to be two. If I ask you a question, Tony, like what's the current temperature outside?
00:52:18.494 - 00:52:20.534, Speaker B: It won't always be the same, right?
00:52:20.614 - 00:53:08.314, Speaker A: It depends. So that's non deterministic the way that functions, handles this, because technically asking this API, what's the latest thing that's been submitted to hacker news? It doesn't have to be the same thing, right? Because if like two different nodes spin up and run the code and they're just like a millisecond apart, they could get different answers to that request. So it will do the median value, which is really kind of wonky when it comes to strings. There's going to be other options for this down the road, like how you want to deal with that. But basically it'll take the most common, like the middle of the responses and give you that one back. So in this case it should be like the most common. If there was two responses, it would be the most common one between those two.
00:53:08.314 - 00:53:38.874, Speaker A: Luckily it doesn't do the average because that would be really weird. If you took a byte string and encoded it a string encoded it to bytes and then took the average of those, you'd end up with the garbly goop on the other side. Yeah, I've been talking for a long time. If I refresh this page, you'll see now our history, it's not pending anymore. We have success. Yes. If we go back to remix and we say get articles look at that.
00:53:38.874 - 00:54:03.554, Speaker A: We've got a string. That's awesome. Yeah. One thing I actually didn't mention. So when we store our articles here, we put the response just straight in, which is a bytes. When we do get articles, we're actually going to be converting it from bytes into a string. So that's why we see strings here on the back side.
00:54:03.554 - 00:54:07.670, Speaker A: Cool, cool. Sorry. That's amazing.
00:54:07.862 - 00:54:09.974, Speaker B: Before completely to be honest.
00:54:10.094 - 00:54:37.734, Speaker A: Yeah, no, sorry, I forgot to mention it. After adding a consumer, what did you do to create a new transaction? Also, did you fund the subscription? Yes. Okay. So just make sure everybody's good. If you didn't have a consumer added or you don't have a balance here underneath actions, you can fund the subscription that lets you transfer link tokens into it. You can click add Consumer. This should be the contract that you deployed in remix.
00:54:37.734 - 00:55:13.074, Speaker A: Now once I, before I added that consumer, I did make sure that I put my subscription id here before I deployed my contract. Let me know, Drew, if that gets you what you need. If I answered your questions at this point, we went through all this creating a function subscription. We updated our subscription id and our final code. Looks like this final code down here. Hey, we went and deployed something and we got all articles. Cool.
00:55:13.074 - 00:55:53.654, Speaker A: Yes, Drew, doing send request will actually initiate fetching the article. So I can run it again. Yes, Drew, are you. So here on the hello world bit, there is the workshop faucet also, if you were to go to faucets chain link, you can get link here as well. I'll pop this in here. Sure. I'll share the gitbook link again.
00:55:53.654 - 00:56:09.430, Speaker A: Okay, so now we're on to building a front end. Antonio, I think you said you wanted to drive for this part.
00:56:09.582 - 00:56:54.154, Speaker B: All right, cool. So we're starting off with building a front end. So we'll start off with Astro here, which is a really cool tool for building front ends and so on and so forth. So start off with the first part of this, which is just essentially getting you started and allowing you to create a project. So if I do that, yeah, I'm in my route. So to get started is I just run NPM create at Astro leaderst. Now, to be clear for everybody else who's watching, we're using the same, using the same git book so that you could follow along.
00:56:54.154 - 00:57:37.624, Speaker B: And don't worry if you're not a front end Dev, I don't even know how to. Yeah, I'm not the best front end of either. I can't even spell css. So let's get started. I'll start off with saying, where do you want to create your project? So I'm probably going to type in here and say news chain news. We'll use an empty, empty, empty template. But if you want to run this through later, there are some really good sample files that get you started and you could see how to run that.
00:57:37.624 - 00:58:24.624, Speaker B: You want to install dependencies? Yes. Um, I hope people are still following along. Okay, sorry, I like, I have trouble with silence, so everything in me wants to like fill it with like, the void of my beautiful but absolutely not melodious voice. So cool. Thankfully, we've received from that. Do you want to use typescript? No, because typescript gets in the way of tutorials. But it's really great if you have more time.
00:58:24.624 - 00:58:40.404, Speaker B: Do you initialize a new git repository? I mean, yeah, sure, we could. I don't mind. Boom. That's it. So now let's check out our news. Our chain news service.
00:58:42.624 - 00:58:45.392, Speaker A: Houston has a little snowflake. He's so festive.
00:58:45.568 - 00:58:46.048, Speaker B: Oh yeah.
00:58:46.096 - 00:58:47.304, Speaker A: Yeah, that's new.
00:58:47.464 - 00:59:15.574, Speaker B: Yeah. Definitely came out for the holiday season. Cool. As we're running through this now, there's a couple of things we need to install and these are all really helpful packages. Ethers allows us to be able to read the blockchain state env allows us to read our env file. Env file node fetch. Not familiar with J's.
00:59:18.594 - 00:59:33.674, Speaker A: These 2 may not be the best, but they worked to do the fetching. We get the URL and then I actually go and fetch the header information from that URL to populate our view. So I get the title and the image from that information.
00:59:34.454 - 00:59:48.714, Speaker B: Yeah, I think I've used JSdom before, but yeah, it works. So we add them to our project. So let's first go ahead and install those. And again we have waiting.
00:59:49.134 - 00:59:50.678, Speaker A: That's not bad. This one's fast.
00:59:50.806 - 00:59:59.684, Speaker B: Oh, wow. That was pretty fast. Cool. All right, cool. Do you mind sending me the abby? Watch how we could do that.
01:00:00.504 - 01:00:01.924, Speaker A: It's gonna be big.
01:00:05.744 - 01:00:06.804, Speaker B: You have my email.
01:00:07.104 - 01:00:08.736, Speaker A: Do you have slack on the other screen?
01:00:08.880 - 01:00:09.880, Speaker B: Yeah, I do.
01:00:10.072 - 01:00:12.524, Speaker A: Then I'll send you the address too, where it's deployed.
01:00:14.344 - 01:00:33.624, Speaker B: Once you have the abby. So now I have the abby. So let's start. Let's start looking at our code. Right. So now it's not a new instance of versus code that we could start running away. We're going to do the back and forth, but we'll figure it out.
01:00:36.884 - 01:00:41.404, Speaker A: If you just run NPM, run dev in your terminal, you won't need it again for the rest of the time.
01:00:41.564 - 01:00:42.780, Speaker B: Oh, okay, cool.
01:00:42.932 - 01:00:46.592, Speaker A: So you just start up now and you can see the basic astro servers up.
01:00:46.748 - 01:01:03.684, Speaker B: NPm run dev. Oh yeah. And we're going to do the auto refresh. Okay, cool. So that's what we have going there. I'm just going to increase my font here because apparently it doesn't increase across sessions.
01:01:05.264 - 01:01:06.048, Speaker A: Cool.
01:01:06.216 - 01:01:32.534, Speaker B: All right, so now we have the front end here and if you look at the code you have the packages on, we have very simple scripts here and dependencies that we added and according to the very good instructions in the, included in the library, I mean in the get book checkout source. Wait.
01:01:36.234 - 01:01:38.746, Speaker A: Yes, you need to add a new directory under source called Lib.
01:01:38.810 - 01:02:05.614, Speaker B: Yeah, sorry. Yeah, new folder distributed. Oh, sorry. What am I doing? Library folder. Yeah, and I'm adding a new file there called news archive.
01:02:11.194 - 01:02:29.866, Speaker A: Only one dot. So. Yeah. And this is something I learned the other day. Did you know that when you do, you don't have to do like a new folder, then a new file, you can just say new file and you can put the path in the file name. Oh yeah. Less clicks.
01:02:30.050 - 01:02:30.814, Speaker B: Cool.
01:02:35.254 - 01:02:54.518, Speaker A: The ABI is the application binary interface. What is that? It's basically this JSOn file that lets other programs know how to interact with our contract. That's essentially what this is. You can see some of the functions that we could run like accept ownership and stuff like that here. That's what the ABI does.
01:02:54.646 - 01:02:59.886, Speaker B: Yeah. Essentially just codifies your contract and says, gives you a standard interface for it.
01:02:59.910 - 01:03:00.422, Speaker A: Yeah.
01:03:00.558 - 01:04:05.594, Speaker B: So, and it's basically like borrowed from API. So if you're familiar with an API, we're basically giving like an API of small contact that we're using. And from there, let's come now and create a new file here, which is the, the news archive j's. What the news archive j's essentially does is that it actually interacts with our, with our contract on chain and it gets all the information that we need for the stuff that we have for the stuff that we need to pull from the smart contract. So lib folder, I'm adding a new file called news archive. And I do not want the help of GitHub Gopilot, but yeah. So let's go through the code and let's look at what, what it's doing.
01:04:05.594 - 01:05:10.894, Speaker B: So we import ethers and adjacent provider, Jason RPC provider, which is really important. We also pulling in the config file from the, from the Env and the ABI that we pulled in that we just added to the contract over on the other side, I'll be adding the contact address, which you already sent to me, and a provider URL. And we'll be passing in the provider URL to the JSON RPC provider. The provider essentially allows us to now interact with Ethereum RPC interface. And from there we are creating a new contract object called News Archive contract. And we're passing in three parameters, the contract address, the abby and the provider. And then from there we're calling getall articles, and that essentially is the core of this particular contract.
01:05:10.894 - 01:05:49.166, Speaker B: And we have just basic try catch logic around that. So let's now start providing everything else that we need to do for this particular phase. Cool. Sorry, my screen keeps moving. Yeah. So first of all, let's start with creating a new m file. So Env and that would be comprised of two primary variables that we're adding.
01:05:49.166 - 01:06:09.714, Speaker B: So we have the provider URL and you have the contract address. I have URL encoding, which would mean that you wouldn't be able to view that. Let me get, let me get that from our project here.
01:06:12.804 - 01:06:53.174, Speaker A: Yeah, assumed. So the RPC URL is going to be basically your gateway into blockchain space. That's how we're going to actually access the blockchain information is through the RPC. Ruben, to your question, where do you do this? So in the root of your project, if you create a env file and then a variable in there called provider URL and I'll share in the chat what URL he ends up using. Yeah, but we need a RPC provider. The one in the git book is for Sepolia. So it's a different test network.
01:06:53.174 - 01:06:56.046, Speaker A: We need one specifically for Mumbai.
01:06:56.190 - 01:07:14.534, Speaker B: Yeah, sorry. Yeah. So I just pulled the contact out. So simplest way to get started is with the anchor RPC. It's a public RPC, which I've used as well. Fairly straightforward RPC, anchor Polygon. And this essentially works with Mumbai as well.
01:07:14.534 - 01:07:17.134, Speaker B: Yeah.
01:07:17.634 - 01:07:19.654, Speaker A: Does it need anything to know? It's Mumbai.
01:07:20.554 - 01:07:50.274, Speaker B: Let me find it. There was a dash Mumbai. 1 second I pulled it. I might have pulled the wrong one.
01:07:51.614 - 01:07:55.374, Speaker A: It looks like it's Polygon underscore. Mumbai Polygon underscore.
01:07:55.414 - 01:08:09.916, Speaker B: Yeah. Then the other value that we need to provide is a contact address, which hopefully sent it to me in this one.
01:08:09.980 - 01:08:17.584, Speaker A: For everyone who's following along, this will be the contract address of the contract that you deployed with remix. You put your own contract address there.
01:08:17.884 - 01:08:42.978, Speaker B: Yeah. So this essentially helps us get started with the provider. So we have the provider URL and we have a contact address and we're able to quickly get started with that. A cool thing if you're doing live streams is there's an auto cloaking extension. So when you're doing live streams and you don't want to share like your information, you could like blank that out, which is really cool.
01:08:43.106 - 01:08:45.666, Speaker A: What is this? What? Oh, interesting.
01:08:45.770 - 01:08:47.818, Speaker B: See if you can see my screen. Yeah, yeah.
01:08:47.906 - 01:08:49.534, Speaker A: Is that plugin for versus code?
01:08:49.884 - 01:08:51.644, Speaker B: Yeah, it's a plugin for versus code.
01:08:51.804 - 01:08:52.204, Speaker A: Okay.
01:08:52.244 - 01:09:17.936, Speaker B: So I use it during all these presentations to keep my keys private. All right, cool. So let's go back into our example here. And we are basically using the RPC provider. So the RPC, sorry, the environment variables that we've defined here. So you have the provider URL, which we've provided, and we have the contact address that probably you deployed.
01:09:18.080 - 01:09:20.520, Speaker A: Yeah, you probably need to put them in quotes, both of them.
01:09:20.672 - 01:10:04.171, Speaker B: Oh, right. Because they're strings. Right. So final step is we just want to be able to come in now and start to deploy our front end and a couple of things that we're pulling in there. So our front end comes from. So if you go to the pages side, you have the main index file, which is index Astro. And once you're able to do that, we're adding our logic in here, I believe.
01:10:04.171 - 01:10:05.195, Speaker B: Yeah, yes.
01:10:05.259 - 01:10:51.734, Speaker A: Yeah. If you want to highlight the dashes too. So the way Astro works, if you're not familiar with it, is basically you have what they call the front matter. So in between those three dashed lines is going to be where you can set variables, run JavaScript, stuff like that, and then you have the actual body, which is down below, which is just HTML. This is the way an astro component works, as was really cool, because not to get too much into it, but you can pull in react components, felt components, view components, everything like that too. So not only does it let you start very simple like this, and then pull in other components as you need them. I think it's, I like it, I like it for tutorials because it's easy to see what's happening here.
01:10:51.854 - 01:11:22.834, Speaker B: Yeah, yeah. And I kind of liked it too as well when I was checking it out in terms of just the flexibility. And then if you look at like the actual front end code, which is the next stage, you'll see that this is all like familiar. These are components that we all know and use in different ways, but you're also blending that in with actual HTML. Cool. So once you have that, we could review the code here, I think I like this, the way this looks? More than that.
01:11:23.334 - 01:11:26.622, Speaker A: Yeah. I think you need an astro plugin for it to know how to format, but.
01:11:26.638 - 01:11:59.944, Speaker B: Yeah, yeah, yeah. I haven't installed that. But we're basically pulling in a couple of imports. So we're pulling in node fetch and JS storm, which we'll consume later. We get all articles function from news archive, which we are pulling in from that particular position. That essentially allows us to just pull all of the, well, pull the articles from the contract. There's an articles variable and whether or not an error occurred.
01:11:59.944 - 01:12:40.814, Speaker B: And then from there we do an await instead of a try catch that allows us to pull the articles. And if articles are pulled, then that would be available as a state variable that we defined there essentially. And if there's an error, then it invalidates. Well, it publishes an error. It purges the article's array and it tells our front end, hey, there's been an error. And then we have the fetch OG data URL which essentially pulls the title.
01:12:41.754 - 01:12:55.882, Speaker A: Yeah. So it pulls it from the open graph metadata. If it's there. This is one of those gotchas. This isn't like a super robust application. If it's there, it pulls it. If it's not, then it returns like a, you know, no title or no image.
01:12:56.018 - 01:13:11.330, Speaker B: Yeah. So then it pulls that there. And if it's not there, it will be the no title, no image. And then we have the async function that essentially calls that. Yeah. And results. If it all works, then makes available.
01:13:11.330 - 01:13:20.314, Speaker B: Makes that available to all articles. So that's the brief of how it works. Unless you want to chime in and explain some bits better than I.
01:13:20.354 - 01:13:28.326, Speaker A: No, yeah, that's great. That's great. So this sets up basically all articles to then be consumed by the HTML down below.
01:13:28.510 - 01:13:55.716, Speaker B: Exactly. Let's go through this here with HTML. So this is like our actual front end logic. Again, fairly straightforward. We have a title, we have the error occurred variable here that we using to toggle a display. If there's no error, we'll see the front end that we want. But if there's been an error, then we're able to say, yeah, there's likely, there's been slight problem.
01:13:55.716 - 01:14:00.824, Speaker B: So that's not too super complicated. Yeah.
01:14:01.124 - 01:14:13.624, Speaker A: So then with this HTML, despite how amazing we look, Tony, it's got no style, but you know, hashtag it works.
01:14:14.374 - 01:14:23.834, Speaker B: Wow. As this ultimate programmer joke. All right, cool. And if everything worked correctly, we should be able to view that here.
01:14:26.894 - 01:14:27.674, Speaker A: Hey.
01:14:30.534 - 01:14:42.746, Speaker B: And there we are. So we could see more. More of this, while we're seeing. We're getting the title. We're getting the image from the. From the article. Yeah.
01:14:42.746 - 01:14:53.614, Speaker B: If you click on it, it takes you to where it's supposed to go. And the last thing I wanted to be able to see was a DHH article in this particular controversial here. Yeah. Yeah.
01:14:54.194 - 01:15:08.670, Speaker A: So if you go back to. You can kind of see. One of the problems here is. So the DHH article, it has a title in the OG data big cloud exit fac, whereas waqi woqui. I don't know, doesn't.
01:15:08.742 - 01:15:08.926, Speaker B: Right.
01:15:08.950 - 01:15:12.594, Speaker A: So it's just the URL there. But they do have an image.
01:15:13.054 - 01:15:14.862, Speaker B: Yeah. Which is cool. Yeah.
01:15:14.918 - 01:15:17.394, Speaker A: Oh, man. And an amazing joke.
01:15:20.134 - 01:15:21.554, Speaker B: Who's there? Recursion.
01:15:22.894 - 01:15:27.326, Speaker A: It's good. If you haven't pro tip Google recursion.
01:15:27.510 - 01:15:29.214, Speaker B: Yeah. It's the best.
01:15:29.374 - 01:16:04.854, Speaker A: I won't spoil it for anybody, but, like, you know, on your free time, Google recursion, it's great. Drew has a question about how to automate this stuff if we wanted to pull it, like every x minutes. Before we get into that, though, Tony, do you have any other questions? I do know when this webinar ends, there's going to be, like a survey to kind of let us know how we did, what you thought, what we could do better, everything like that. So any feedback that you have for us, please feel free to share. I really love getting feedback. Things I could do better is, like, one of my favorite things to get. I'm weird like that, I guess.
01:16:04.854 - 01:16:11.994, Speaker A: But that's the only way you get better is by having people say, hey, here's what you could do better. So. Yeah, yeah.
01:16:12.414 - 01:16:12.750, Speaker B: Cool.
01:16:12.782 - 01:16:15.870, Speaker A: Do you have any other questions, thoughts, Tony, as we.
01:16:15.902 - 01:16:39.924, Speaker B: Well, no, no, no. For me, it's just always like, as usual, thank you for helping me bumble through your code. It's also really cool and also, like, forcing me to learn about Astro, because, like, before this, I'd always seen it and I was. And I looked at it, but because I had to prepare for this a bit, I had to go into, like, the documentation and I found was really cool. So that was a really happy discovery for me.
01:16:40.044 - 01:16:48.996, Speaker A: Oh, cool, cool. Yeah, yeah. Do you mind stopping sharing your screen? I'm gonna share my screen real quick just to answer Drew's question about how we could automate this stuff.
01:16:49.060 - 01:16:52.364, Speaker B: Yeah, yeah. He queued up. He queued it up perfectly for you.
01:16:52.404 - 01:16:58.684, Speaker A: I know it. Drew. The checks in the mail for being an awesome attendee and asking the right questions all the time.
01:17:00.664 - 01:17:01.016, Speaker B: Cool.
01:17:01.040 - 01:17:38.844, Speaker A: So let me share my screen real quick. So we've seen functions, chain link, but we also have clicking too fast. Oh, it's a hover. This is rough automation chain link. And if you go here, you can register a new upkeep. And we have, if we wanted, like you said, every five minutes, Drew, we could do a time based upkeep and we're just going to make one of these live contract that we want to automate. My only worry is, oh, no, it's only owner.
01:17:38.844 - 01:17:50.664, Speaker A: Let me just delete this and then redeploy this contract real quick. So we'll need to take that only owner out so anybody can click send request just for ease of use here.
01:17:51.044 - 01:17:51.824, Speaker B: Yeah.
01:17:53.604 - 01:18:03.144, Speaker A: We'Ll deploy a new contract. I wouldn't recommend doing that, Drew.
01:18:05.324 - 01:18:05.756, Speaker B: Because.
01:18:05.820 - 01:18:37.000, Speaker A: The upkeep addresses and stuff like that can sometimes have problems. So we deploy a new contract, we need to go to functions, which I got rid of functions and we need to go to our subscription and we need to authorize consumer speed mode. Okay, so we'll wait for that to come through. But we have our address, how fast.
01:18:37.032 - 01:18:39.284, Speaker B: You usually go when we are not around.
01:18:41.044 - 01:19:09.890, Speaker A: So we have our new upkeep, we'll paste it in here, we'll say next and say, hey, it couldn't fetch our Abi. Remember we got our Abi once before. The reason it can't fetch it is because we haven't verified this contract. But we can copy our Abi, go back, paste it in here, click next, say, hey, we want to call send request, click next again. And then every, you said five minutes, we want to call this. So this is crontab format. It's like minutes, hours, day of the month.
01:19:09.890 - 01:19:44.550, Speaker A: So like the date of the month, then the month, and then the day of the week. But this will call every five minutes. We'll click next, call it Drew's awesome automation. Give it some link and we'll register upkeep. And yeah, if you followed along with that, Drew, and you're keeping up, I'm impressed. Basically, we set up an upkeep like in the documentation. I'll walk you through all these steps and then this upkeep will run every five minutes.
01:19:44.550 - 01:20:07.724, Speaker A: And no, call that function. Confirm I get this error. Gas estimation occurred with the following message. So that. I don't know what you think about that error, Tony, but Rubens error is one of my least favorite parts of solidity because that is just the generic, something's wrong error.
01:20:07.884 - 01:20:08.624, Speaker B: Yeah.
01:20:11.164 - 01:20:17.984, Speaker A: So where are you seeing that error? When do you see that error? Like, what are you doing when you see that error.
01:20:24.424 - 01:20:25.200, Speaker B: Send requests.
01:20:25.232 - 01:20:50.444, Speaker A: So when you click send request in your here, like, when you click on this, you get that error. Okay, so a couple things just to double check. Did you change the router and the don id address for Mumbai? Okay. Did you change your subscription id?
01:20:54.234 - 01:20:54.762, Speaker B: Okay.
01:20:54.818 - 01:21:31.022, Speaker A: Are you sure that your script subscription id matches your function subscription number and that it shows your deployed contract? Shows as a consumer here sometimes, like, if you have to make sure all those things match up, otherwise, you'll run into this. And then, Drew, we're going to wait five minutes. Now, you've made this workshop take at least five minutes longer.
01:21:31.198 - 01:21:32.182, Speaker B: Boom, boom.
01:21:32.278 - 01:21:34.954, Speaker A: But we'll wait for this guy to get called.
01:21:37.534 - 01:21:40.494, Speaker B: See, nervousness always comes up.
01:21:40.574 - 01:21:41.594, Speaker A: It's better than.
01:21:46.784 - 01:21:47.232, Speaker B: I don't know.
01:21:47.248 - 01:21:58.408, Speaker A: We could do terrible dad jokes. I've got a few. One of my favorite ones. So you're in the Caribbean. It's a hawaiian joke, though. I went to Hawaii on vacation. It was great.
01:21:58.408 - 01:22:17.756, Speaker A: But I was a little surprised on the plane there. I was reading about Hawaii, and evidently there were some new laws passed in Hawaii. And I didn't realize this going there, but there was a noise ordinance passed. Did you hear about this? I don't know if they have something similar since, like, you know, islands in Hawaii. Yeah, yeah. Evidently people were laughing too loud. It was like a big problem.
01:22:17.756 - 01:22:30.164, Speaker A: But, like, I was fine because I knew the rule. Everything would be fine. It's as long as I kept it to. Aloha. That's good, right?
01:22:30.244 - 01:22:31.064, Speaker B: It's good.
01:22:31.404 - 01:22:32.684, Speaker A: Let that one sink in.
01:22:32.804 - 01:22:38.544, Speaker B: Like. Like, I could see it coming. I could see it coming, but still, I wasn't ready.
01:22:42.084 - 01:22:50.500, Speaker A: Oh, look at this. Look at this. This guy. Look at that. Drew, I think. I think we got it working here. Get all articles.
01:22:50.572 - 01:22:51.268, Speaker B: Hey, hey.
01:22:51.356 - 01:22:59.904, Speaker A: It's a YouTube man. That's over. This is something. I'm not clicking on that because you never know what it is on hacker news. But, yeah, could be something really interesting.
01:23:00.484 - 01:23:05.278, Speaker B: Yeah. Yeah. May not be NSF. It may not be safe for work, but, yeah.
01:23:05.326 - 01:23:13.954, Speaker A: Let's go see what it is. Reverse engineering game code from the neutral zone. Interesting. That's what it is right there.
01:23:14.734 - 01:23:19.134, Speaker B: Yeah. But, yeah, I don't want to get a call from my legal team, but, yeah, if you want to click it, that's up to you.
01:23:19.174 - 01:23:37.364, Speaker A: I'm not always originally, so, yeah, Drew, that's how you would do that. Any other questions, thoughts, comments, or should we wrap things up? And I would say, tony, thank you to you for being here. Appreciate. You are awesome. Co host. Fantastic job to the chat, to everyone who attended. Thank you for your time.
01:23:37.364 - 01:23:57.364, Speaker A: Thanks for interacting. Like, makes the job a lot more enjoyable when there's audience participation, for sure. Well, cool. I guess with that, we do have that survey to fill out. If you have any feedback for us, we'd really appreciate that. But yeah, that's all I have.
01:23:58.084 - 01:23:59.824, Speaker B: Same here. Thank you very much.
01:24:02.604 - 01:24:05.204, Speaker A: Thanks. Catch you in the next one. Bye.
