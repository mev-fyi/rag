00:00:06.970 - 00:00:47.078, Speaker A: Hi smart contract and future smart contract developers. Today we're going to be talking about the Chainlink Truffle starter kit. We'll talk about what Truffle is, why it's important, and how to use it in the Chainlink starter kit. So first, let's talk about what Truffle is. Truffle is a world class development environment, testing framework and asset pipeline for blockchains using the Ethereum virtual machine, aiming to make life as a developer easier. Essentially, it is a cool framework we can use to develop smart contracts locally on a computer instead of on a web based IDE like remix. It is a JavaScript based framework that was created by consensus and is one of the most well known blockchain development frameworks.
00:00:47.078 - 00:01:31.690, Speaker A: With its powerful scripts, developers can create just about anything to make writing, deploying, and testing smart contracts quick we can see the official repo here. Here you can see the truffle code along with a handy readme. But we will not be using just the regular truffle framework, but the Chainlink Truffle starter kit. It takes a truffle framework and loads it with some pre built smart contracts, tests and scripts so you can quickly get to developing and deploying your own connected smart contracts. To begin with a starter kit, we need to go to the official chainlink GitHub. To get to the Chainlink GitHub, you need to enter in GitHub.com slash smart contract kit.
00:01:31.690 - 00:02:18.470, Speaker A: Once there, you'll see the Truffle starter kit pinned at the top. Click on the truffle starter kit repo and here you can see we have a repo with directories for contracts where we store our smart contracts, migrations where we store our deployment scripts, general scripts that we use to interact with our smart contracts, and tests for testing our smart contracts. You'll also see a bunch of other useful files along with an awesome readme that describes how to use this. Okay, let's go ahead and follow along to get set up. Make sure you have NPM installed before we continue. You can find a link to install NPM in the description below. First you will open up your terminal or command prompt, and we will install truffle using NPM.
00:02:18.470 - 00:03:13.100, Speaker A: To do this, we will run the command NPM install truffle g like this. Then you'll hit enter. I've already run this command to save us some time, but you can imagine a bunch of text popping up in the terminal showing us that it is downloading truffle. Now go to directory. You want to save the starter kit in and we'll make a folder called Truffle starter kit by running the command Mkdir truffle starter kit like so, hit enter and you'll have made your directory. Then we'll go into that directory by typing in CD space Truffle starter kit, hit enter and you're in that directory. Now that we're in here, we'll just type in truffle unbox smart contract kitbox like this.
00:03:13.100 - 00:03:53.874, Speaker A: Again, I won't run this command to save some time just like that, you've got a copy of the starter kit on your computer. I'll go ahead and open it up in vs code. Okay, so now I've got vs code open. On the truffle starter kit directory, you'll see all the same directories and files we saw on GitHub on the left. Now we'll install our dependencies in the vs code terminal using NPm install. Just type in NPm install and hit enter. After NPM runs, you should see the node modules directory appear.
00:03:53.874 - 00:04:47.270, Speaker A: That's how we know it was successful. Once your dependencies installed, the last thing you need to do is set your environment variables. This can be done in a EMV file and you can find an example EMV file here, or can be done by exporting directly in your terminal by typing in a command like this where you export your environment variable and enter the information you need for that environment variable. Of course you would fill that out with actual values, but remember to never share these variables with anyone or check them into GitHub. If anyone gets your mnemonic phrase, they can sell all the funds in that wallet. Okay, now that is set up. We can deploy our contracts to the Ethereum Covan testnet.
00:04:47.270 - 00:05:21.540, Speaker A: You can find the contracts we want to deploy in the contracts folder. Here is the price consumer V three contract, which reads the latest price of the ETH USD pair. Using Chainlink. You can add more contracts or remove these example contracts as you make your own decentralized application. Next, you can see all the deployment scripts we will run in the migrations folder. You're going to need to make one deployment script for each contract you wish to deploy. Here's a deployment script for that price consumer contract we just looked at.
00:05:21.540 - 00:06:22.730, Speaker A: Okay, let's actually deploy our contracts to the Covan Ethereum testnet. To do so, we'll run the command truffle migrate network Covan reset. This will tell truffle to deploy all of our contracts to the Covan network and ignore any prior deployments. Hit enter and you can watch each contract deploy and information on each deployment will be shown on the terminal, such as address of each deployed contract. After the deploy, you will see the build folder appear, which contains that same information and more in the json files for each contract. Here is the price consumer v three JSON with all of that information okay, next we're going to interact with our price consumer contract that we just deployed on Covan. To interact with contracts, you need to run scripts which can be found in the script directory.
00:06:22.730 - 00:07:15.150, Speaker A: Here's our price consumer scripts folder and you can see that we actually have one that runs the method to read the ETH USD price on our deployed price consumer contract. To actually run that script, we'll run Mpxtruffle exec scripts and point to the directory of that script. At the end we'll put network Covan so it knows that once again we're looking at the Covan network. Hit enter and boom. You can see we've got the latest ETH USD price. Finally, any tests can be found in the test directory. Here are some tests for that price consumer contract that we can run.
00:07:15.150 - 00:07:47.870, Speaker A: If you need to run those tests, just go into your terminal and type in NPM test and there you have it. We've learned how to deploy, interact with, and test our connected smart contracts using the chainlink truffle starter kit. I hope you found it really isn't too difficult to build and deploy own project. Thanks for watching and I look forward to seeing what awesome and world changing decentralized applications you build using the chainlink truffle starter kit. See you next time.
