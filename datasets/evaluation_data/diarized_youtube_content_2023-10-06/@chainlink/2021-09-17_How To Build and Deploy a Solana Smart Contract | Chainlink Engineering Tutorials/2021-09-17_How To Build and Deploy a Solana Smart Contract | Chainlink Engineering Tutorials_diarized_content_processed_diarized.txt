00:00:06.650 - 00:00:55.520, Speaker A: Hi there. My name's Harry, and today we're going to go through a tutorial for building, deploying, and interacting with smart contracts on the Solana blockchain. So the first smart contract or program we're going to look at is the hello World Smart contract. Now, this can be found in the Solana Labs GitHub repository, a tree, and it's called example hello World. And this example here is basically a smart contract or program that gets deployed on chain as well as a client written in typescript that can then interact with the onchain contract. And the onchain contract is just a simple program that says hello world, and it also counts the number of times that the contract has been called for the specific account. So let's dive through the smart contract or program now.
00:00:55.520 - 00:01:54.900, Speaker A: So we're going to look at the rust version today. So the first section here is comprised of normal includes and declaring an entry point for the program. In addition to this, we're using borsch for serializing and deserializing parameters being passed to and from the deployed program. So the process instruction function here is the entry point for the program, and in this case, we're accepting the program ID, which is the public key where the program is deployed to, and account info, which is the account to say hello to. So the program result is where the main logic of the program resides. In this case, it simply prints a message, then selects the accounts by looping through accounts here. However, in this case, there's only going to be one account.
00:01:54.900 - 00:02:40.414, Speaker A: So next, the program does check to see if the account has permission to modify the data for the specified account. And then finally the function takes the existing account's stored number and increases the value by one, writes the result back, and then displays a message. So that's the entire program or smart contract there. Let's have a look at how we can deploy this. So the first thing that we're going to want to do is to clone a repository. There we go. Once that's done, we'll go into it and we have a bunch of stuff here, which is good.
00:02:40.414 - 00:03:16.902, Speaker A: So once this is done, we want to set our environment to the Devnet network. This is the test network for Solana developers writing and testing smart contracts. There we go. So once that's done, we need to create a new key pair for our account. This is required to interact with deployed programs on the Solana Devnet. And there we go. Now we have a new key pair.
00:03:16.902 - 00:03:51.640, Speaker A: So now that that's done, we need to airdrop ourselves some Sol tokens. So we will need some lamp ports, which is a fraction of a Sol token to deploy our smart contract. So we can use the airdrop program here and airdrop ourselves some Sol tokens. There we go. Now we're ready to build the hello world program. So we can do that by running the following command here. So that will take a few seconds to complete.
00:03:51.640 - 00:04:45.906, Speaker A: We should see some output at the end that will tell us how we can then deploy the program to the Devnet environment. So now that's finished compiling and as you can see, we have some output here and we can now deploy the compiled program to the Devnet environment. There we go. So we now have a deployed program ID. We can actually take this and we can go to the Solana Explorer here making sure that we're on Devnet and you can search for your deployed program ID here. So the end result is we have successfully deployed the hello world program to Devnet with an assigned program ID. So now let's go look at the client side of the tutorial.
00:04:45.906 - 00:05:56.254, Speaker A: So the client here has three files in the client folder here and main Ts is the entry point. And that essentially just calls a number of functions in the hello world ts here. So what this client does is it allows us to interact with our deployed program, and it uses the Salana web3 JS SDK to achieve this. So the first thing that the client does here is it calls the establish connection function here. And this basically just establishes a connection with the cluster. Once this is done, it calls the establish player function here to ensure that there is an account available to pay for the transactions and creates one if required. After this, we call the check program function here.
00:05:56.254 - 00:06:57.170, Speaker A: This basically loads the key pair of the deployed program from the key pair JSON file and uses the public key for the key pair to fetch the program of count. If the program doesn't exist, the client stops with an error. If the program does exist, it will create a new account with the program assigned to its owner to store the program state, which in this case is just the number of times the program has been executed for the account. So once this is done, it calls the say hello function here. And this is kind of the main part of the client. And this basically just contains an instruction, or builds up an instruction that holds the public key of the hello world program account to call and the account for which the client wishes to say hello to. And each time the client performs this transaction to an account, the program will increment account in the destination account's data storage.
00:06:57.170 - 00:07:54.560, Speaker A: And finally, our final function that's called is the report greetings function. And all this function does is it retrieves the current number of times the account has had the say hello transaction called by calling report greetings. Let's now run this client, so before we can run anything, we need to install the dependencies. There we go. And once that's done, we can then start our client. And there we go. As you can see, it said hello to the account, and it's counted one times that it said hello to that specified account.
00:07:54.560 - 00:08:05.780, Speaker A: So hopefully now you've got a bit of an idea of what it's like to build, deploy, and interact with smart contracts on the Solana block chain. Thanks so much for watching this video, and we'll see you in the next one.
