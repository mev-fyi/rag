00:00:08.090 - 00:00:23.258, Speaker A: So now that we have some of the basics of hardhead down, let's go ahead and try doing some of the same things we did with ethers before, but with Hardhat. So one of the first things we want to do is we want to write and interact with our smart contracts. So let's go ahead and rename greeter.
00:00:23.354 - 00:00:27.478, Speaker B: Sol to simplestorage Sol.
00:00:27.644 - 00:00:37.526, Speaker A: You can click on the file and hit enter and should be able to rename it. Otherwise you can go ahead and right click delete it and then create a new file and call it simplestorage Sol.
00:00:37.628 - 00:00:39.846, Speaker B: We're going to copy paste all of.
00:00:39.868 - 00:01:06.366, Speaker A: Our code from our previous simplestorage Sol into this file. We can make sure that our simple storage is compiling correctly by running yarn hard hat compile. Whoa, it looks like we ran into an issue. Project cannot be compiled. See reasons below. The solidity pragma version in the files doesn't match any of the configured compilers in your config. Well, what's going on? Contracts symbolstorge sol 0.8.8
00:01:06.366 - 00:01:52.366, Speaker A: ah, okay, let's go ahead and fix that so we can open up our hardhat config js. Now, a quick note on opening files. If you're on Mac and you hit command P, you can actually start typing in the names of files to get them to them quicker. Or if you're on Linux or Windows, you can type control P. This will bring up and interestingly, if you type command P or control P and then you hit the greater than key, this will drop you into the command palette. No command palette command palette search for files search for commands in our hearthead config js, we can scroll down to module exports and change this to 0.8.8 so that the version that we're going to compile for a simple storage is going to be the same version that.
00:01:52.388 - 00:01:53.806, Speaker B: Hardhead is looking for.
00:01:53.988 - 00:02:20.854, Speaker A: Let's run that same command by just hitting up yarn hardhead compile and awesome. We see compiled one solidity file successfully. We should now see this in artifacts. If we go to artifacts and contracts, we now see two contracts in here, greeter and simple storage. And we can see a ton of the information about simple storage. We can also see some more lower level information in build info. All right, so now that we have our simple storage contract in here, the next thing we probably want to do is learn how to deploy it.
00:02:20.854 - 00:02:47.166, Speaker A: This is where we're going to write our deploy script. Now for this section, I'm going to be showing you how to write a deploy script. But in the next section we're going to do it a little bit differently. But this is still going to teach you how to write scripts and work with scripts in hardhap. So we're going to come to our sample script js and we're going to go ahead and hit enter and renamed it to deploy JS. And if you want to read all the comments in here, you absolutely can. We're just going to go ahead and delete them all.
00:02:47.268 - 00:02:49.006, Speaker B: A quick keyboard shortcut is if you.
00:02:49.028 - 00:03:05.910, Speaker A: Hit command a or control a, you'll highlight all the text in your file and we're going to go ahead and delete it all. So now we're just going to start from scratch here. Now the setup for our deploy script in here is going to look really similar to the setup of our deploy script from our previous section. We're going to do imports at the top.
00:03:06.060 - 00:03:07.462, Speaker B: We're going to have our async main.
00:03:07.516 - 00:03:12.890, Speaker A: Function and then we're going to call the main function. So let's go ahead define our main function.
00:03:12.960 - 00:03:16.170, Speaker B: We'll call it async function main like that.
00:03:16.240 - 00:03:21.438, Speaker A: And then we'll call our main function. And if you want to just copy paste this from the last section, you absolutely can.
00:03:21.524 - 00:03:40.082, Speaker B: So we'll do main then boom, just like that.
00:03:40.216 - 00:03:47.938, Speaker A: And because these semicolons are going to drive me absolutely insane, we're also going to add prettier and our solidity prettier plugins.
00:03:48.034 - 00:04:20.218, Speaker B: So we'll do yarn add dev prettier and prettier plugin solidity. Then we can go ahead and create our prettier RC file. We're going to add tab width or use tabs false, semi false, and then single quote, also false.
00:04:20.314 - 00:04:25.698, Speaker A: Now we're going to be using this prettier RC file setup a lot. So in future sections, if you want.
00:04:25.704 - 00:04:26.898, Speaker B: To just copy paste it, you can.
00:04:26.904 - 00:04:41.090, Speaker A: Absolutely do that as well. We're also going to add a prettier ignore which tells prettier not to format some files which we want. We don't want prettier to spend a ton of time formatting all of our files. I'm just going to copy paste from the GitHub repo.
00:04:41.170 - 00:04:42.598, Speaker B: So feel free to copy paste from.
00:04:42.604 - 00:05:04.318, Speaker A: The GitHub repo as well. You can find all the code for this section like I said in the GitHub repo associated with this course. Now unlike in our last section where we had to grab our contract code a little bit more manually with hard hat, there's actually a number of different ways to grab compiled contracts. The first way we're going to do it, we're actually going to use ethers. And now this is where one of the first confusing changes actually comes in.
00:05:04.484 - 00:05:12.434, Speaker B: Previously we did const ethers equals require ethers, and that was how we went.
00:05:12.472 - 00:05:55.306, Speaker A: Ahead and worked with ethers. However, you'll notice in our dev dependencies we have this dependency called Hardhat ethers. Hardhat Ethers is a package that actually wraps Hardhat with its own built in ethers. This is really advantageous because it allows Hardhat to keep track of different deployments and different scripts and all these other things for us. So instead of importing ethers directly from ethers, we're actually going to import ethers directly from Hardhat instead. This might seem a little confusing at first, but just know if we want to work with ethers and Hardhat, it's usually much better to pull it in from Hardhat. You can still do this, and ethers will still work the same, but Hardhat won't necessarily know about different contract factories and different pieces.
00:05:55.306 - 00:06:03.294, Speaker A: And you'll see that in action in a second. Now that we're pulling an ethers, we can actually immediately grab a contract factory using ethers.
00:06:03.422 - 00:06:20.114, Speaker B: We can say const simple storage factory equals await ethers. Get contract factory simple storage.
00:06:20.242 - 00:06:41.594, Speaker A: So in order to get a simple storage contract factory, we can just do await ethers get contract factory. Now, if we pulled right from ethers, the package ethers doesn't know about this contracts folder and ethers doesn't know we've already compiled simplestorage Sol and it's in our artifacts. Hardhat, on the other hand, does know about the contracts folder and does know.
00:06:41.632 - 00:06:43.918, Speaker B: That it's already compiled, which is why.
00:06:44.004 - 00:06:46.654, Speaker A: This simple storage factory grabbing works so well.
00:06:46.772 - 00:06:48.286, Speaker B: Once we have our factory here, we.
00:06:48.308 - 00:06:51.918, Speaker A: Can do the same thing that we did in our previous section and deploy the contract.
00:06:52.014 - 00:07:13.110, Speaker B: So we'll do a quick console log deploying contract, and then we'll do const simple storage equals await simplestore edge factory deploy.
00:07:13.690 - 00:07:21.898, Speaker A: And boom. With that little bit of code, we're already able to deploy our simple storage contract. Then to wait to make sure it.
00:07:21.904 - 00:07:28.218, Speaker B: Gets deployed, we can do await simplestorage deployed. And that's it.
00:07:28.384 - 00:07:51.554, Speaker A: Now let's see what happens when we go ahead and run this deploy script. As you know, in our last section we had to put in a private key and we had to put in an RPC URL. Right now we don't have either one of those defined, so what do you think should this script actually work or do you think it'll break because we didn't define what blockchain we're going to deploy to. We also didn't define a private key. Well, let's go ahead and try this out.
00:07:51.672 - 00:07:53.126, Speaker B: We can run this script in our.
00:07:53.148 - 00:08:14.730, Speaker A: Terminal by running yarn hardhat, run scripts, deploy js. And again, I'm hitting tab here to do a little autocompletion. Let's see what happens. Well, we got deploying contract, it says done, but that's really it. So what really happened? Well, let's add one more line in here.
00:08:14.800 - 00:08:30.106, Speaker B: Let's do console log and we'll do some string interpolation. Deployed contract two, and then we'll add simple storage address. Let's run this.
00:08:30.128 - 00:08:45.150, Speaker A: Now we get deploying contract and then we get deployed contract two, and then we get a contract address. What's going on? Here's.
