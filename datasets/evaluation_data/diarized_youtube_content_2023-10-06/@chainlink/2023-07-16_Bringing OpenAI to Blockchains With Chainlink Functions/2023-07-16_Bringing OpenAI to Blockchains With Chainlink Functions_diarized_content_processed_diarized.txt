00:00:00.250 - 00:00:37.350, Speaker A: AI models like chat GPT can do incredible things, but instead of worrying about it replacing you, why not put it to work? Let me show you how. In this tutorial, we'll be creating a superhero name generator using OpenAI's chat GPT. But we won't stop there. We'll combine AI with the reliability of smart contracts and decentralized oracle networks to bring that information back on chain. So we're going to be creating a superhero name generator. And I know in the development space, naming things is probably one of the hardest things to do. So instead of worrying about that ourselves, let's make machines do it for us.
00:00:37.350 - 00:01:03.274, Speaker A: You're going to need three different things. First, you're going to need access to the chainlink functions beta. This is what's going to allow you to query that API and bring that data on chain. Next, you're going to need the hard hat starter kit for functions. This will get you going and get you access to everything you need when it comes to setting up chainlink functions for querying that API. And finally, we've talked about this API a lot. You're going to need access to the API.
00:01:03.274 - 00:01:30.754, Speaker A: So you'll need access to the OpenAI API and you do have to create a paid account, but they'll give you free credits and it's a pay as you go. So let's get started. First, you're going to need access to the chainlink functions beta. If you head to functions chain link, you'll find this form and that'll get you access to the whitelist. Next you'll need the chainlink functions hard hat starter kit. It's a fantastic tool for understanding functions. I highly recommend going through the readme to understand how functions work and to get a feel for this repo.
00:01:30.754 - 00:01:59.730, Speaker A: You'll need to clone this repository and run NPM install before we get going. And finally, you're going to need access to the OpenAI API if you're not familiar with it. If you hit the platform OpenAI.com, you should see a page like this. Once you create an account, you'll need to go to manage account and from here set up billing and set up a paid account. The other piece of information that you'll need from this website is an actual API key and you can create a new API key and it'll give you this one time secret. Copy this, you'll need it later.
00:01:59.730 - 00:02:20.742, Speaker A: All right, you have everything set up and you're ready to go. It's time to dive into the starter kit. Now, if you haven't already interacted with the starter kit. It might be a really good idea to check out that readme file. I really recommend it. It'll walk you through setting up the environmental variables and understanding a little bit more about this repo. If you don't want to do that and you want to check out this video, I'll walk through the readme with you.
00:02:20.742 - 00:02:45.262, Speaker A: Don't worry, I'll be here when you get back. All right, you made it back. The first thing we're going to do is we're going to add a new value to our env file. Now, you know that env files are something you normally don't want to share, so I'm going to do it in the example. So we're going to need to add one more value. That's going to be the API key from OpenAI. So we'll go ahead and add that here and you can pass it in with what your value is, give your EMV file a save, and then we can move on.
00:02:45.262 - 00:03:11.602, Speaker A: The next thing we're going to look at is the functions request config. So we'll head there. Now, within this file, it sets up everything that functions needs to know about as far as configurations go. The first thing that we need to do is change a few things from the request config, the first of which is going to be that file source. It's going to be the source of the JavaScript that we'll be running in our function call. So we're going to go ahead and change that to chat GPT request example. So this is a new file that doesn't exist.
00:03:11.602 - 00:03:35.710, Speaker A: We need to create it. Let's go ahead and do that now just to make sure that we don't forget. So create a new file and we'll call it chatgptrequestexample Js. Give that a save, and we'll come back here and change a few more things in our config. The next thing that we're going to change are our secrets. Instead of using the Coinmarketcap API key, we'll be changing it to the OpenAI API key that we just added to our env file. So we'll go ahead and do that here.
00:03:35.710 - 00:04:06.166, Speaker A: We'll create a new secret OpenAI key. Next we'll be changing the args that are passed in. Now, the Args are going to be the values that are passed in as an array, and in this case we're going to want that to contain our prompt for OpenAI. We're going to be saying, hey, give me a superhero name on one line. And finally, the last thing that we need to change in this file is our expected return type. Instead of a Un, two, five, six, it's going to be a string. So with these changes complete, let's give this file a save and we'll be ready to move to the next step, which is actually editing that request example JavaScript file.
00:04:06.166 - 00:04:31.298, Speaker A: All right, so this is going to be that request. It's going to be our plain vanilla JavaScript, and that is a key point. It has to be just plain vanilla JavaScript, no imports, nothing like that right now. So keep that in mind. So the first thing we're going to do is we're going to grab our prompt, we'll grab that from the args that are passed in. Next we're going to check and make sure that we have our API key for OpenAI. If we don't, we're going to throw an error and we're going to get out of here, because without that nothing's going to work.
00:04:31.298 - 00:05:01.014, Speaker A: Speaking of OpenAI, the next thing that we'll need to do is create our request. Now this comes straight from the OpenAI documentation. There's a lot here. We have an example request and we also have an example response. Basically our request is going to be a functions make HTTP request we're going to pass in the URL for that OpenAI API. It's going to be a post we're going to pass in our key, our secrets OpenAI key, and then we're going to do our request. So we have our data, we're using the specific model we're passing in our prompt.
00:05:01.014 - 00:05:27.398, Speaker A: Remember, that's give me a superhero name. In one line we have a temperature. The higher the temperature, the more interesting and random the responses from OpenAI will be. So that'll give us a more random superhero name. And then Max tokens just kind of limit the amount that we're spending on this. Once we get that response back, we're going to go ahead and log it out. So we'll await that response and then we'll go ahead and log the raw response as well as the actual choices from that data.
00:05:27.398 - 00:05:56.910, Speaker A: So data choices, that's going to be the actual information coming back from OpenAI. Within that, the next thing that we're going to need to get is to parse out the response into actual text. Now we have our data choices. Text, that's gonna be the name of the superhero. I did notice that when it's returning it, I ask it for one line but it's actually splitting it on three lines. So there's two new lines that I'm getting rid of with this replace. And then finally sometimes it puts a period at the end.
00:05:56.910 - 00:06:16.830, Speaker A: I didn't want that, my superhero name. So I added a replace the period with nothing. And I'm trimming it just to make sure there's no extra white space around the edges and stuff like that. Perfect. So we've got this set up. The last thing that we need to do is we need to actually return this. So we'll use functions to encode this as a string.
00:06:16.830 - 00:06:40.070, Speaker A: This way we can pass this into our smart contract. Cool. So let's go ahead and give this a save and see what it does. If we run NPX hardhat functions, simulate, it'll run it locally and we can see what the results are. So if we scroll up we can see that it is logging out the messages from this code. So we can see our raw response here. This is going to be the response from the API and all the JSON included.
00:06:40.070 - 00:06:56.426, Speaker A: So we scroll down, we should be able to see our data and our choices. It's an object. So we log that again separately. So this is the response data and we can see the text is lightning bolt. You can see these two new lines and the period. That's what we're getting rid of. Then we log out just the name Lightning bolt.
00:06:56.426 - 00:07:27.414, Speaker A: So that's what will be passed in to our smart contract. So once we've got this working and we're getting that response back from OpenAI now we need to change our smart contract. So we'll head on over to function consumer Sol. Now you can see it's working down here in the terminal based on the response. But I want to do a little bit more with the text that's returned from OpenAI. So let's go ahead and edit this contract just a little bit so that we can do something a little bit more interesting with it. The first thing that I want to do is I want to store that superhero name and I want to create an event to be logged when the superhero name is changed.
00:07:27.414 - 00:07:53.710, Speaker A: So we can do that here. So we'll add in a string for the latest name and we'll also add in a superhero name event that'll take that string in. The next thing that we need to do is we need to change our fulfill request. So we have a few things in here. We have the execute request which will create that request to the Oracle network. And then we have fulfill request which is going to get back the response within fulfill request. We want to add in the last name update.
00:07:53.710 - 00:08:12.710, Speaker A: We'll need to take our response, and we'll need to convert it to a string. It comes in as a bytes. And finally, we need to emit our superhero name event. And that's it. Let's give this a save, and we can run mpx hardhat function simulate one more time, just to make sure that everything is working within our contract. And it looks like it is. So this time we got back Quickflux.
00:08:12.710 - 00:08:37.890, Speaker A: That's kind of a fun name. So, the last step is to go ahead and deploy this contract to a network I'm using Mumbai. So we'll go ahead and deploy this to the Mumbai network I've chosen to verify. You don't need to do that if you don't want to. Once it's deployed, you can check it out on Polygon scan. The next thing you'll need to do is you'll need to create a subscription for that contract. You'll take your contract address, paste it in, and you'll create that subscription for functions.
00:08:37.890 - 00:08:57.478, Speaker A: And then once you have that subscription created, the next thing you'll need to do is you'll need to actually make your functions request. So let's go ahead and do that now. It'll run through a simulation and ask you if you want to continue. If you say yes, then you'll actually run this request on the functions network. All right. Awesome. So we have Quantum man.
00:08:57.478 - 00:09:17.534, Speaker A: If we go and check out the actual contract itself, go to events we should see here superhero name. And if we change this to text, we'll see we have this event emitted. Quantum man. So that's it. You've done it. You've reached out to an AI to generate on chain information. I think that's huge.
00:09:17.534 - 00:09:26.780, Speaker A: I can't wait to see projects you build using this power. Now, remember, with great power comes great responsibility. So, Hulk, smash that like button, and I'll catch you in the next one.
