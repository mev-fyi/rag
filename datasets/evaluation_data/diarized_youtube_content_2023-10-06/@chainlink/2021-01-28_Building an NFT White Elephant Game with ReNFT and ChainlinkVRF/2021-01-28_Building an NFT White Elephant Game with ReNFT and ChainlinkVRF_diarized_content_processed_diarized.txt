00:00:00.250 - 00:00:22.542, Speaker A: Otherwise, yeah. Well, welcome, everyone. Thanks a lot for joining us today. Really excited to have Nas of the Renft team. Renft, they started at the last Chainlink hackathon. So it's really exciting to be able to see these projects grow from an idea stage all the way through becoming a project that's announcing with Chainlink. And, you know, you could be next.
00:00:22.542 - 00:00:51.840, Speaker A: We have another hackathon that's coming up in the next few months. More details of that will be announced shortly. But really encourage everyone to participate. And if you have an idea that you want to see, come to real life. Hackathons are definitely the place to start those. It's really exciting to see different VRF projects being able to come from these as well. So Nas, really appreciate you taking the time and excited to hear everything that you've been working on and see how you created it.
00:00:52.210 - 00:01:24.006, Speaker B: Yeah, absolutely. Thank you very much for hosting us. It's a pleasure. And we have actually started from the Chainlink Hex fund. This was our inception, so I'm very happy to be here today. Okay, so what are we talking about here? We have implemented this white elephant NFT game during the festive seasons. It took us about two weeks to do this.
00:01:24.006 - 00:01:51.710, Speaker B: And I will walk you through our implementation. And if you do have any questions, just drop them on YouTube and Keenan will relay them to me. So what is the team? The team is, we have Nick on board. He's our CEO. He works at Sandbox, as you could probably guess from his 3d model here, he's an epic CEO. I mean, he's this guy. He's done so much.
00:01:51.710 - 00:02:27.818, Speaker B: So very happy to be with him on the team. We have Robokit, our new team member. He's our chief design officer, we call him. But those titles are very flexible and they change all the time, so it may change the next time I present it. And this is me when I'm not fish. I'll share the link to the slide with you at the end of the presentation, you'll be able to check it all out for yourself. This is all clickable, so you can follow us if you are interested.
00:02:27.818 - 00:03:16.666, Speaker B: And if one slide wasn't enough to talk about myself, I will include myself again. And this is me again. I'm co founder and CEO of Renft. And what we really think about in terms of Renft in the broader vision, it's a suite of products that will be for the NFT space. There is a lot that we have in mind in terms of what to do. But first thing first, our core product is ERC seven to one and ERC 1155 peer to peer NFP rentals on Ethereum main net. And we are launching February 2021, which is like in two weeks.
00:03:16.666 - 00:03:52.486, Speaker B: No pressure on me. So our objectives with the white elephant NFT game that we've implemented, first of all, we wanted this to be low gas because gas is nuts. We want efficient and clean code. If it does what it needs to do. If it's simple, much better than bloated, complex software. We don't do that. And the game must be fun.
00:03:52.486 - 00:04:34.350, Speaker B: So some memes for you here. A meme rather. So what are the rules of the white elephant NFT game? Well, there is no game without the players, so the players need to buy the tickets to participate in the game. We implemented the ETH, just ETH, so each player had to send ETH into the contract. Each player will be assigned a random number and that's where Chainlink comes in play. We use the VRF for that. On the event date the game starts and the players take turns to unwrap or steal the presence.
00:04:34.350 - 00:05:15.234, Speaker B: So the presence obviously are the NFTs that were deposited prior to the game start. So another important point is that we do not want to allow just about anyone to deposit the NFTs because then that could break the logic of the typical. Well actually I haven't talked about those. So the typical white elephant gift eventuals are that, oh, I have. Okay, so that's it. You take turns to unwrap or steal the present. And that is according to the number that you were assigned, your turn number.
00:05:15.234 - 00:06:04.290, Speaker B: So players can steal from other players, but only if those players were before them. If those players took the turn before them, then they can steal from them and with another condition, that the player they steal from was not stolen from again before. So each player can only be stolen from just one. You must take action in 3 hours. I have set this time frame from the considerations of the maximum number of players we can have, which I have limited to 255, not 56. I'll explain why. If you set this time frame and each player just stoles and doesn't take turn, then it would take a month for the game to unwind.
00:06:04.290 - 00:07:02.382, Speaker B: So if you do not take the turn, then you forgo your ability to steal from someone, which is quite a big loss for you. So on event ant renfp us pay gazillion in fees to transfer the prices to you. And that's the game. And what do we need to do to implement this? Well, we need to keep track of the players, we need to forbid direct NFT deposits into the pool. We need to keep track of the current player, keep track of the last action time so that you could actually track that if you've missed your opportunity to steal. Right? Like if you've actually taken the turn 3 hours after the player before you, then it's gone. You cannot steal.
00:07:02.382 - 00:07:35.274, Speaker B: So that is why we need to keep track of the last action time. And we obtained the randomness from Chainlink vrf and we initialized game assign the turn numbers to players from the chain link entropy. So some of the functions you'll need to implement are deposit, obviously for the NFTs. So we need to whitelist the people who can actually deposit. There's a function to buy the ticket before the game start. We have a modifier for that. We need a function to unwrap the gift.
00:07:35.274 - 00:08:01.190, Speaker B: We need a function to steal. We need a function to initialize the game. And that is pretty much it. And we need another function to finish the game. So keep track of the players. This is why we have to track the players. We have a simple struct and it will contain 256 addresses at max.
00:08:01.190 - 00:09:08.650, Speaker B: We have a mapping from the address to Boolean and this contains function is purely to give us big o one constant time check that the address is in the array so you don't have to look through whatever many addresses to figure out if someone is actually in the players, they have actually bought the tickets or not. And we have num players. The reason for that is because if you set the fixed size for your array over here, if you dot length, it will tell you 256. And that is why we need that unit, eight num players in case we need to look through the dresses array. So this variable is public. And now you might think, why do I have 255 players order? Well, first of all, players order is an array that gives us the indices of the players. Let me clarify this a bit better.
00:09:08.650 - 00:10:04.762, Speaker B: So for example, assume players order is like length is three and you have index one, index two and zero. That would mean that our addresses is four length array because we have one less in here. So if the first index in player's order is one, that means that the player who is the first one to have bought the ticket will go first, et cetera. So this player's order is a mapping to the addresses array that tells us the order of the players. So this gets set after we get the randomness from chain link. This is it. Numplayers addresses length I've set that constant time check set that addresses is a sentinel.
00:10:04.762 - 00:10:49.290, Speaker B: So I have admitted saying that this is very important because if we don't have a sentinel, a sentinel is basically just empty slot. So at index zero in addresses, we have no one, we have zero address. Why that is important is because we have. Later on we'll define a swaps map which maps address to address. And it maps who sold from who. So a to B means a stole from B. And obviously the default value of the address is zero address.
00:10:49.290 - 00:11:32.922, Speaker B: So there would be a problem if we were to actually use the 0th index because we wouldn't be able to check in this swaps array that the player was actually stolen from. So just think of this as false. So if it's zero in swaps or spots, then it means false and the player wasn't stolen from or he didn't steal. So that is why we have 256 addresses in here. The first one is zero and then 255. So the max number of players is two five five, right? Oh, there is an example over here. Maybe this thing explains it better.
00:11:32.922 - 00:11:59.810, Speaker B: So if this is our player's addresses, right. So this guy, the correction actually should be that the first address is zero th address. I'll make correction the slides later on. And so you have two players and the players order is one and zero. So in simple terms it means that our coffee guy will go first and then 1234. So now we can track off the players. Let's go.
00:11:59.810 - 00:12:46.082, Speaker B: Next, we need to obtain randomness from Chainlink and initialize the game. So as you may know, gas fees are insane. It is expensive. Chain link calls are also the costs to be added to all of that. And we must do our best to be as efficient as we can. And for that we'll basically make a number of calls to chain link get randomness VRF function. And the number of the calls that we make is dependent on the number of the players that we have.
00:12:46.082 - 00:13:23.360, Speaker B: So we have max number of players is two five five. And our approach is to take the uint two five six randomness from Chainlink and slice it into eight chunks of uint 32. That will give us plenty of randomness. Sorry. It is in fact 32 chunks of unit eight. Correction. So with that, just like a fun calculation on probability, I hope I didn't screw this up.
00:13:23.360 - 00:13:56.710, Speaker B: We can compute what will be the probability of having at least one collision. So for example, we get a huge number, right? Unit five six is very large. So if we slice it into 32 chunks of u int eight, then what is the probability that at least two of those are repeated. So that would be the case. For example, if you have one, two, and then, bam, one. And like a fun little calculation, the probability of collision is 87%. That's a lot.
00:13:56.710 - 00:14:05.740, Speaker B: And so if we do get a collision, we just increment by one in the order, and we've solved the issue.
00:14:07.070 - 00:14:26.734, Speaker A: Next, a couple of questions. NAS audience. One is, with the three hour turn times, how do you account for people in different time zones? If someone is in California, another person's in Asia that's playing. Do they just have to stay up all night, or do they lose?
00:14:26.782 - 00:14:34.820, Speaker B: Yeah, they do. I'm sorry. Next iteration, you can help us. PR is welcome.
00:14:36.410 - 00:15:07.310, Speaker A: And then another one from Scott. He's asking, he's curious about the numbers that you use to assign to players when using Chainlink VRF. So he recently integrated Chainlink VRF in a contract, and the numbers returned were very large, and they ended up cutting it at a certain point. But I was wondering how you manage this, or if you just assigned the large numbers to each player and at what point did those get cut from the contract?
00:15:08.450 - 00:15:32.040, Speaker B: So we don't care about the precise numbers. The numbers that we get are obviously. So if it's union eight, then our numbers are two to the eight minus one. But it doesn't, doesn't matter what the numbers are. We just sort them in ascending order, and that is the order, like zero, one, to just take the index of the number.
00:15:33.130 - 00:15:34.520, Speaker A: Cool. Makes sense.
00:15:36.010 - 00:15:38.460, Speaker B: Does that answer the question?
00:15:38.910 - 00:15:40.922, Speaker A: Yes, that looks like it answered it.
00:15:41.056 - 00:16:16.022, Speaker B: Okay, so, you know what? Let me clarify here a bit. A bit more. So, the entry that goes into the contract is actually generated by us. This is like a bit of a semi decentralized solution. Didn't want to spend too much time. You can, for example, take the entropy from the user and save that into the contract. But unit five six is a single slot storage, which means you'll pay 40,000 gas for that.
00:16:16.022 - 00:17:03.730, Speaker B: And we don't want the users to pay that. And solution to that is a semi decentralized solution, which means that we generate the entropy and we supply that entropy into the contract, and then the users can verify that our approach of slicing the chainlinks VRF is legit. This is all up to improvements, et cetera. But this is just one way to do that to save the gas. I've already mentioned this number of players. This is the call to initialize the game. We do this so people bought the tickets.
00:17:03.730 - 00:18:06.614, Speaker B: Now we know how many people there are in the game, and we are able to figure out how many calls we need to make to the chain link to get enough random numbers to assign the turn number to each of the players. In fact, this could have been avoided. When I was writing these slides, I realized that you could just use number of players divided by 32, take the whole number of that, and that will be the number of calls that you need to make. So potentially, can we just delete it? And the entropy supply to chain link, this is what I've mentioned. This is like semi decentralized solution because we actually generate that entropy. But of course you could argue that users could invoke a special call on the function that we could have implemented that they would call and they would actually assign the entropy themselves. There is also one way to do it.
00:18:06.614 - 00:19:21.290, Speaker B: Like you do not force a specific user when buying the ticket to provide the entropy. You can just create a separate function that actually takes the entropy from those that would like to call that function, since they do not control the turns or the actual method. So the method that we would then slice the actual chain link Vref would not be revealed because obviously they could game it. But in our case we would have to reveal our method so that to make the process fair. So we need to make this init start call first to get the randomness from Chainlink init and is called. So this slicing and dicing is obviously super expensive to do that on chain. But once you have the entropies and you have revealed to the method that you slice and dice the entropy from Chainlink, then there is no problem of doing that off chain and supplying the order on chain.
00:19:21.290 - 00:20:06.478, Speaker B: And then the players would be able to verify that that is correct. Or we were assuming that the players are somewhat technical. If they're not, then this process can be easily explained in medium article and that will be fine as well. And so at this point we assign the order of the players, the indices, which player goes next? Last action. We are setting the start of the game here now, and from the call of this function, next player has three R's. Take the turn and we say that the initialization is done. I'm just checking whether I have missed anything.
00:20:06.478 - 00:20:41.674, Speaker B: Done. Anyone can verify? Yep, next. So this slide was quite empty, so I thought why not have some fun here? And you should check out Vitalik can wrap. And the cat likes this. So when the game actually starts, each player according to their order, their turn number, they are able to unwrap or steal. Unwrap is very easy. We don't have to do anything because the NFT that they get is already the player's order.
00:20:41.674 - 00:21:38.010, Speaker B: That's a one to one mapping. And in know what you could do is you could add another array that would shuffle the mean. If you, if you know the order here of the NFTs, then you could potentially guess what you would get. And if you were adventurous, you could buy like 20 tickets and then maybe game the game a bit. But this could be safeguarded by having an additional array that would shuffle the mapping of the player's turn to the array of the shuffled NFTs to the array of the NFTs. Because at the moment, this is like one to one. So if you have players order index one, then the player at the first index in addresses will also get the first index NFT.
00:21:38.010 - 00:22:40.602, Speaker B: So now that we have jammed a bit here, let's go to the steel function. The steel function just has a lot of requires to ensure that this you shall not pass is a modifier that ensures that you haven't missed your turn. So if someone before you has missed their turn and someone before you, and there were like two of those people, then the missed parameter here would be two. And this modifier enforces this because it knows the last action time. And if you supply a wrong number in here, then it is going to fail. It also ensures that you cannot steal from the person that you've stolen from, you cannot steal from the person that has been stolen from before. This is this pause.
00:22:40.602 - 00:23:42.366, Speaker B: It just swaps the other way and some other checks and we set that the sender, which is us, we stolen from, from. And the indices in here, sender and from are actually the indices of the player's order, not the addresses. To confuse you even more, I thought you'd enjoy being confused. I had some brain freezes when I was writing this, but this is an efficient way of doing this. And next, beyond which is where we redistribute the NFTs to players. This would cost a lot. And that is why we have like a start index and end index in here to drop the NFPs in chunks to our users.
00:23:42.366 - 00:24:31.870, Speaker B: And as you can see, this is only ERC seven to one game. What else? This is the end of the technical slides. Yes, I did cover this. What kind of improvements can be made to this game? What I've just mentioned about the NFTs, that will be a very good use case for shuffling the NFTs as well. Move from semi decentralized model to fully do not. We do not depend on re NFT team to supply the entropy to chainlink. But users could invoke the function to do that or some other method.
00:24:31.870 - 00:25:10.126, Speaker B: And there are some other things could be different to make this even better. And if you're interested in this, I would be very happy to talk about this with you. And in fact, if you can figure out what is going on here, then you definitely deserve the place to be on the team. Yeah. What is next? Acknowledgements Nick Vail is my co founder. He's the CEO of Renft Labs, so he's legendary. I love him.
00:25:10.126 - 00:25:31.126, Speaker B: So thank you for bringing up this fabulous idea for a festive season game. This is Nick's idea, luis. He was teaching me maps today. So thank you very much and you're awesome, chainlink. Thank you, chainlink. The support that we get from Chainlink is insane. They're amazing.
00:25:31.126 - 00:26:24.246, Speaker B: So if you want to get started in the blockchain space, and if you're looking at chainlink, then they're very helpful. Just reach out to them. Anton Mosjavoy from holy health, he actually introduced Luis to us and that is how Luis is now a full time member of our team. And thank you, dear listener, for listening to this fish that is getting eaten by a. You know, if you fill out this type form over here, maybe there are some treasures for you. Who knows? And links, pun intended, links to the contracts that I've been presenting over here to the front end if you're interested in big annotation. And there is a medium post explaining all of this, maybe in more detail.
00:26:24.246 - 00:26:32.620, Speaker B: I don't know, you tell me. And this you may wish to watch. Or not. I don't know. This is a cool video. That's it for me.
00:26:34.510 - 00:26:45.838, Speaker A: Awesome. Yeah. Thanks a lot for sharing nods. I dropped the code blog and the discord link in there. Do you think we could get a hold of these slides and drop them into the description after?
00:26:45.924 - 00:26:47.982, Speaker B: Absolutely. I'll do so. Great.
00:26:48.036 - 00:27:21.400, Speaker A: Yeah, I'll make sure to drop those slides into the description for everyone and then, yeah, definitely fill out that type form. We'll drop everything into the description for everyone. And there might be some NFTs or some fun things waiting for you. One question or a piece of feedback from the audience that they said from David. It'd be really cool if one, a participant had an idea of maybe required to play some sort of alert system when they're on the three hour clock. This kind of goes back to that first question of absolutely.
00:27:22.110 - 00:27:25.580, Speaker B: That makes a ton of sense. PR is welcome.
00:27:26.510 - 00:27:55.460, Speaker A: Yeah, it's all open source. So if you're exactly contributing to this. This is a great project and it was a lot of fun working with the Renft team during the Chainlink hackathon. And this is just another project within Renft labs that they have been able to come and implemented really quick with that white elephant. Where did this idea come from? Is it something that you participated in as a kid or where's the idea?
00:27:55.830 - 00:28:13.580, Speaker B: I've had no clue what this is, so I knew that this is like a secret Santa kind of game. Nick was the one who said we got to do this. And I mean the compliant developer fish I am. He said ok. And so I did.
00:28:15.470 - 00:28:33.310, Speaker A: Love it. Really enjoy all the fun throughout this presentation. And if there's other questions, definitely drop them into the chat as well. With implementing the VRF, what was that process like? Was it difficult? Implementing.
00:28:36.390 - 00:28:59.802, Speaker B: It was the easiest bit. We just drop it in there. It's a textbook example. You just go to Chainlink docs, it tells you everything you need to do. Super easy. All of the headache was actually with these indices here, I don't know how long. It actually took me maybe a couple of good hours to write like ten lines of this code.
00:28:59.802 - 00:29:41.750, Speaker B: It was quite ridiculous, but that's what makes it quite efficient. You have big one access to everything. You get the index of the person that stole from you in swaps over here. Obviously in one you get the index of spas as well. So another thing that I didn't actually mention that would confuse everyone completely is this op. This is players order, but reversed. And this is super useful as well over here, right? If this Steeler index is like, yeah, I'm not going to talk about this too much because this hurts my brain as well.
00:29:41.750 - 00:29:53.900, Speaker B: But there are tests in there in contracts and you can check them out. Yeah. If you have any questions, drop us the questions on discord and I'll try to answer.
00:29:56.030 - 00:29:58.794, Speaker A: Do you have the link for the.
00:29:58.832 - 00:30:03.920, Speaker B: Treasure hunt on you for the treasure hunt? Well, there is this.
00:30:05.170 - 00:30:07.760, Speaker A: Drop it into our chat and I'll drop it into the.
00:30:08.850 - 00:30:14.420, Speaker B: Sure. Where is this? You got to help me with zoom. I'm not the zoomer over here.
00:30:16.470 - 00:30:39.500, Speaker A: Perfect. Dropping that in here now. Cool. Yeah. Well now I really appreciate you coming on here. One last do you have any piece of advice for anyone that's starting a hackathon project or has an idea how to maybe take that plunge into just going for it?
00:30:40.350 - 00:31:46.218, Speaker B: So I've made a couple of iterations in terms of the tech stack that I use. I started off with truffle and when our project started growing a bit more complex, it was a bit of a pain. The deployments would fail all the time. So if you stick to a simple template that already has everything linked up together, that could be, for example, scaffold e or just create a plain blank hard hat project. And another thing I've just discovered quite recently is everyone is nuts about it. There is this thing called tailwind CSS, and it gives you like a ton of ready components for your front end. So all you have to do is hard hat for the back end, it has plugins for gas estimation, it has nice integration with nice testing integrations.
00:31:46.218 - 00:32:39.150, Speaker B: Like if you use Ronan's wickhawk on GitHub plugin for deployments on hard hat, then you don't even need to run the node. It just takes the snapshots of the blockchain and it runs the tests against that. So it takes like 6 seconds. Well, in our case, we have at the moment like 45 or 46 tests in the RenfD core product, which covers 100% of the contract, and that takes like 6 seconds to complete. So obviously the iteration is insanely fast. So to sum up, one hard hat for the back end and two, you may or may not want to look at tailwind CSS for the front end since it has all the components that you need to just quickly hack anything and then you're like Superman.
00:32:41.090 - 00:32:55.220, Speaker A: Awesome. Yeah, I'm dropping those links in here for everyone as well. It says what address must be used for the treasure hunt nfts. I'm assuming just a clean it, like, or your address.
00:32:56.730 - 00:33:08.840, Speaker B: Don't give us the zero address. It must be like something that they can receive the NFT or, I don't know, whatever. We'll know. It's a treasure. I don't know what we'll send.
00:33:11.390 - 00:33:15.706, Speaker A: Drop an Ethereum address in there. Not a bitcoin address or something.
00:33:15.808 - 00:33:20.700, Speaker B: No bitcoin here. If you drop bitcoin. No.
00:33:21.630 - 00:33:36.846, Speaker A: Cool. Well, Nas, it's always a pleasure speaking with you and really appreciate you taking the time to come and explain your process through this and everything that you learned and giving us some really cool tools that we can take. And I'm definitely going to check out this hard hat and tailwind after.
00:33:37.028 - 00:33:40.674, Speaker B: Oh, it is my pleasure. Thank you for having me.
00:33:40.792 - 00:34:04.374, Speaker A: Yeah, and everyone else that's listening in, I really appreciate you. If you have questions afterwards, definitely join the Renfp discord. I dropped the link. I'll make sure to drop that in the description afterwards as well, and hit the like button. If you enjoyed the video and subscribe to the channel for when we go live in the future and otherwise, really appreciate it, Nas, and good luck and really excited to see where this goes.
00:34:04.572 - 00:34:10.310, Speaker B: Thank you very much. Yes, let's keep in touch all we have your EF addresses.
00:34:12.530 - 00:34:14.080, Speaker A: Well, thanks a lot, everyone.
00:34:14.530 - 00:34:16.026, Speaker B: Thank you very much. Bye.
