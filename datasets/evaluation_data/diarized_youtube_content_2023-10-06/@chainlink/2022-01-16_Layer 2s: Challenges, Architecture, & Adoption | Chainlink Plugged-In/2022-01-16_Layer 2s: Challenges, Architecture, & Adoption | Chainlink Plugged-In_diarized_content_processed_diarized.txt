00:00:39.970 - 00:00:47.800, Speaker A: In one sentence. Let's begin by defining what a layer two is at its most basic level. Dan, you're welcome to start this.
00:00:48.250 - 00:01:03.390, Speaker B: All right, in one sentence. In one sentence, a layer two in one sentence is a system for utilizing the block space of a blockchain more efficiently without sacrificing on security or decentralization.
00:01:04.690 - 00:01:11.600, Speaker A: All right, Kelvin, you will have an opportunity to describe it more than once.
00:01:13.730 - 00:01:25.910, Speaker C: I would say that the Eli five is that it's like a baby blockchain inside of another blockchain, but it has to be inside of another blockchain. It can't be separate.
00:01:26.330 - 00:01:36.586, Speaker A: Very nice. So now, in a few more sentences, how does optimism and arbitram attack this particular problem? Yes, you're welcome to start.
00:01:36.688 - 00:01:58.354, Speaker B: Okay, yeah, so I guess this could be a long answer, but I'll try to keep it short. But there's sort of a broad design space of things that get categorized as layer two. Everyone hear me? Okay, cool. Too loud. Yeah. There's a broad design space of things that get classified as layer two. Like, basically some people will call things layer two.
00:01:58.354 - 00:02:43.934, Speaker B: If you're just, like, not using layer one. We can sort of narrow that into, again, the things that try to preserve the sort of trustless properties or the decentralization properties of their underlying layer from there. So I can talk about arbitrum. Basically, the model is we are trying to sort of recreate the experience of ethereum as much as possible. But on the second layer, the way that's done, I guess the briefest way to explain it is we sort of use layer one for data availability and also for enforcing correctness if need be. But hopefully the need never comes. So you kind of use layer one for data availability and use layer two for execution.
00:02:43.934 - 00:02:52.434, Speaker B: And that's kind of the optimistic roll up model. I can leave it at that. Yeah, cool.
00:02:52.552 - 00:02:53.490, Speaker A: Kelvin.
00:02:56.150 - 00:03:34.640, Speaker C: Yeah, I think a few months ago, optimism and arbitrary. Probably much more different systems than they are today at a high level, what you can kind of think about both of these systems as like little ethereums inside of ethereum, right? And just by we have this fundamental definition, we say as a layer two, we trust Ethereum. Ethereum is our Lord and savior. We're just going to trust it. But the relationship doesn't work the other way around. Right. So Ethereum doesn't necessarily trust what's coming out of our system.
00:03:34.640 - 00:04:30.386, Speaker C: And so sort of to get this, it's kind of useless if you can only go in one direction. You want to have this kind of communication between the two systems so this is where this whole optimistic roll up thing comes in, where you have this mechanism by which you can sort of make statements about the state of the system on layer two and have layer one be confident. I think both systems today follow the same general approach to getting to this, where you have these interesting interactive proof constructions. You could go into so much detail about every little discrepancy. I think it's much easier to think about the difference between something like an optimistic roll up and a ZK roll up. That difference is more pronounced within the optimistic roll up space. I think people are kind of coming to the same general conclusions of how to build these things.
00:04:30.488 - 00:05:24.020, Speaker B: Yeah, like you said, there'd be more to unpack with the differences as of a few months ago or something like that. But now they're converging enough that going through the differences would probably be too wonky, at least the sort of lower level technical differences. But yeah, if you look at the L two ecosystem, the other big sort of design pattern is zk roll ups, as you say, which sort of use this cryptographic magic to prove validity and then zooming out a little, although they've sort of fallen out of favor. There was the sort of plasma design space which doesn't rely on layer one for data availability, but still tries to preserve trustlessness. And I think the key thing that's happened there and what's maybe also happening with ZK rollups, which we can talk more about where optimistic rollups stands out, is at the very least supporting smart contracts, is more supporting having general smart contract support. General EVM support is, if nothing else, more straightforward. There's no unsolved problems there.
00:05:24.020 - 00:05:34.646, Speaker B: We're on main net now. We're on main net beta. It works. You can see the code. So this is sort of maybe the easiest way to get to smart contracts on layer two. Is that fair?
00:05:34.748 - 00:05:35.800, Speaker C: Fully agree.
00:05:36.170 - 00:05:54.800, Speaker A: Awesome. So now an end user question. Many end users don't really care about how transactions are validated, only that they happen quickly, safely and cheaply. Does the web three industry need to do a better job of educating end users? Or is this a design issue where the technologists should just sort it out and then the market will sort itself out?
00:05:57.090 - 00:05:58.320, Speaker B: Kelvin, you want.
00:06:02.950 - 00:07:21.400, Speaker C: This is really complicated, right? Security is not a black and white thing. You have so many different layers of things that you need to be taken care of if you want to be 100% perfectly secure in any of these systems. And a lot of these things are non obvious. You're just not going to be able to explain some of these things to users in a way that they're actually going to listen to it. It can be frustrating if you're like, well, why are you just using this side chain that has one validator on it? Or what's the difference between that and using Ethereum? A lot of people don't care, but I think that we can still do projects like l two beat can kind of make it easier for people to compare their options and have come to conclusions. I think there is a certain extent to which you're fighting against the tide when you're trying to just educate people about these really low level technical things, but we have to make a best effort to at least come up with some standards around. How do we present the general security of these systems and make people feel comfortable? It's hard.
00:07:22.810 - 00:07:54.930, Speaker B: L two beat is great. I can sign off on that as well. So that's like a really good place to start if you want to understand at least this aspect of the L two ethereum ecosystem. Generally. What's tricky about this is this thing that was sort of in your question of do users care about decentralization or security? And you'll hear people say that users don't care, they just want to do X. And it's hard to respond to that because it's partially true in many cases, but it's also true that there's sort of like two categories of users who don't care. There's the ones who should care and the ones who shouldn't.
00:07:54.930 - 00:08:32.510, Speaker B: And I think that's, to me, the parts where it's hard to educate, but where it's important to is where a user doesn't realize that they're taking on some sort of security risk or that their funds are literally at risk. For example, if they're not aware of that and there's a blatant risk that they get rugged or something, then probably they should be aware. And if you informed them, they would say, oh yes, I wish I knew that. So that's kind of the job of educating. But with that said, it's like that. There certainly are, and I think you were sort of getting at this. There are plenty of cases where maybe you don't need full ethereum security or full roll up level security, and I'm comfortable saying that.
00:08:32.510 - 00:09:09.980, Speaker B: And it will sort of just always be the case that you'll be able to do smart contract things in some places for very low fees on L ones and L two s. There'll always be some out there that are just willing to make that trade off of, we're just going to make it very hard to validate this chain. But like, hey, lower fees and for a certain type of user and even certain types of developers, if they just want to launch on that, you sort of can't tell them they're wrong. So, yeah, you sort of have to zero in on what these things are being used for and communicate that. Yeah, if you really want sort of maximum level trustlessness and security and so on. Yes, layer twos are where you can go for that.
00:09:10.350 - 00:09:26.782, Speaker A: Maybe this covers a little bit, but end users are definitely one thing to consider when building out dapps. But what do developers mainly look at when they need to weigh where and how to build and deploy apps? Where are they really focused on? Let's go, Dan.
00:09:26.846 - 00:10:21.314, Speaker B: Yeah, I'll start. One thing that, yeah, it's definitely relevant to both arbitram and optimism that I know we both think a lot about is like Ethereum compatibility, where there just is this very strong network effect with the EVM, not on the sort of smart contract level, but also on the infrastructure level, devtooling level. So one thing that I sort of underappreciated, that I keep appreciating more and more is how, again, just like being able to provide the closest thing as possible to the experience of using Ethereum on layer two is really important to a lot of developers. And even like slight discrepancies become pain points. Whether that remains the case for good, whether that's long term, what things look like, we'll see. But for now, that's something developers really want. That's one thing I think beyond that, developers want to know that there's an ecosystem that they're building around.
00:10:21.314 - 00:10:49.020, Speaker B: So like being on an ethereum, l two, you kind of have access to all of the Ethereum state. At least you have trustless access to it, if not synchronous access. But then also within the l two, within something like arbitram, they want to see that there's activity there, there's stuff that they can compose with. And then of course, some developers also care a lot about security. So there's definitely some projects that, like, want to really grill us on that. There's other projects that don't care. But, yeah.
00:10:50.430 - 00:10:51.900, Speaker A: Kelvin, what do you think?
00:10:53.230 - 00:11:51.550, Speaker C: I mean, first, I'll 100% agree with the ubiquity of the EVM right now. It's like you can't any minor discrepancy with the EVM that you make, you create a huge headache for yourself. And I mean, we learned that kind of the hard way. And then we just had this moment where we were like, well, we're going to have to change this whole thing. And we did, just to maintain as close to something that behaves functionally as close to the EVM as we possibly could. And I would challenge anyone to try to build something that doesn't do that, and they will experience the pain of doing it. The other side of this is, I think that if you use this city analogy of what these blockchains look like, people are kind of hoping that these l two s are actually going to do things in the future that are sort of more interesting than what they are today.
00:11:51.550 - 00:13:01.974, Speaker C: Because l two s today, they're kind of just like Ethereum plus, right? They're essentially very close to Ethereum, but Ethereum still needs a lot of work to be done. There's a ton of effort that we have to go through over the next couple of years to just take these systems and evolve them into the next gen blockchain platform. And I think that when people are looking at these systems, they also kind of have to think, like, if I'm going to move my application to one of these l two s because I think it's going to be cheaper, you kind of need to follow through with the promise. Like A, it's going to be cheaper, it's going to stay cheaper, and b, we're going to keep working on it so that in the future it still stays cheaper and your applications keep working. And you kind of have faith that you aren't making a mistake by deploying your application, because ultimately there's a huge overhead to deploying an application on Ethereum. Some of this you can solve with tooling, but there is an overhead to deploying an application to another chain if you already have an application on Ethereum. And so you kind of have to just believe that it's going to be worth it.
00:13:01.974 - 00:13:20.810, Speaker C: That's not just going to be more of a headache than it's worth. There's sort of a social layer that these layer twos have to create that makes people comfortable and feel like there's a developer ecosystem. This thing is going to continue to evolve in a positive way going forward.
00:13:20.880 - 00:13:24.622, Speaker B: You mentioned that some of it can be solved with tooling. Do you want to take this chance to show some of your.
00:13:24.676 - 00:13:28.458, Speaker C: Oh, yeah, I'll take 30 seconds.
00:13:28.554 - 00:13:28.974, Speaker B: Pretty cool.
00:13:29.012 - 00:14:08.790, Speaker C: Chug splash. Let's go. Well, okay. Anyway, smart contract deployment is really awful today, and I'm trying to build a better smart contract deployment tool that will let you do like multichain deployments and all this stuff, but some of this can definitely be mitigated if we're thinking about just the cost of deploying to a layer two if you already have another application. The existing developer tooling just wasn't built to have these multi chain deployments to make it easy to view all these deployments. And, I mean, we can talk about the UX more later because it's an interesting feature, but we're slowly getting there. The developer experience is improving.
00:14:08.790 - 00:14:10.810, Speaker C: The user experience is improving.
00:14:11.630 - 00:14:31.620, Speaker A: Thank you. Yeah, I think you touched on this a bit, but ETH two is progressing to provide an l one scaling solution to the core Ethereum blockchain. Is the upcoming scaling solution a threat to L two solutions, or is there a place where you both can coexist and both scale? Personally very interested in hearing the answer to this. If you want to take away.
00:14:33.750 - 00:14:35.534, Speaker C: This is not going to be controversial.
00:14:35.582 - 00:15:27.186, Speaker B: Yeah, this one's fairly easy, actually, at this point, I don't know if that ever. There may have been a point when that seemed like it was more of a competition, but at this point, the way the ETH two plan and roadmap has evolved, roll ups are pretty integral to what Ethereum is going to look like. So the thinking now is that, let's see, let's back up a few steps. So with ETH two is going to provide sharding, and that's always been a part of it. And this has to do with, very generally, Sharding has to do with moving away from the model where l one does everything in a global synchronous environment to splitting up l one between more localized asynchronous environments. And initially there was at least some vague talk about all of these environments having their own execution. Now, the thing is, what we're actually going to be sharding is data availability.
00:15:27.186 - 00:15:58.398, Speaker B: And I guess the vision is that the current execution environment that is Ethereum will get merged in via this thing called the merge, and that'll just be global execution. Within e two, you have sharded data, and then the way you get sharded execution is on layer two. So that's kind of the outline is like, yeah, this is a fundamental and integral part of scaling Ethereum is that users will be using roll ups. So. Yeah, definitely not. There's no competitive tension there.
00:15:58.484 - 00:16:01.002, Speaker A: That's good, Kelvin, do you care to elaborate?
00:16:01.146 - 00:16:53.680, Speaker C: I mean, no contest to that answer. Yeah, I mean, there's, there's always been a few ideas of where ETH two would go, and it's evolved over the years, but it seems like it's kind of solidified that you're going to have this proof of stake thing and you're going to have these sharded chains that are essentially just ways to come to consensus over more data. And roll ups kind of are just like the bottleneck for most roll ups today is the cost of data. And so it just kind of goes very much hand in hand. Data gets cheaper, more roll ups, roll ups get cheaper, and these roll ups kind of become what people used to think of as the execution environments on e two. Now the roll ups are kind of those execution environments instead.
00:16:54.150 - 00:17:42.414, Speaker B: Yeah, and I think it's all the more reason, actually that going back a question or two ago into kind of EVM compatible roll ups versus other types, there's other projects, not arbitram or optimism, that are sort of experimenting with other data models, which I think is really cool, either application specific stuff or different execution models where you can parallelize and do fancy stuff like that. And that's all well and good and all four there being a variety of options, but I think clearly it's important that we can continue doing EVM stuff even after the merge. So yeah, that's like, even if you think the EVM can be improved upon, or if you think it shouldn't be like the gold standard long term, we still want to be able to write things in solidity and understand what they do. So here we are.
00:17:42.532 - 00:18:01.270, Speaker A: Here we are. So Ethereum isn't the only blockchain that has expressed a need for scaling solutions. For example, BSD has put it out there that they're interested in a scaling solution. So do you guys think it's going to be a common theme with different blockchains to continuously upgrade to l two solutions, or is it just only ethereum?
00:18:03.770 - 00:18:42.542, Speaker C: I would say. I would think it's extremely unlikely that something like polygon turns into a layer two. Like they're very clearly investing in layer twos. I mean, just look at who they're buying, taking over. Yeah, but people expect Polygon to behave a certain way, so it's probably going to stay the l one that it is. But yeah, you will absolutely see these system roll ups pop up on these systems. The code that we write is not only written for Ethereum.
00:18:42.542 - 00:19:03.622, Speaker C: If you have like an EVM compatible l one and you look at something like Polygon and binance smart chain, which are basically just running geth, you just deployed the same thing over there. And if your code is good enough. Ideally, it just works on all these different systems. So totally expect layer twos to pop up on all of these different networks.
00:19:03.766 - 00:19:25.634, Speaker B: Yeah, I do agree that polygon is an L one. You slipped that in there, but I just want to say that. Yeah, I didn't know that BSE was talking about doing layer twos. I missed that. It's pretty funny, but, yeah, it makes sense. I know Solana has been signaling that they're interested in this as well. Yeah, I think it makes sense.
00:19:25.634 - 00:20:06.106, Speaker B: Again, it's like a strict improvement. If you can have these kind of opt in environments where you can do things cheaper, there's no reason not to. I just say it's funny because Solana in particular, it seemed like initially, a lot of their narrative is like, they're not going to do anything like this. They have, like, a podcast called no sharding, I think. So it's a funny twist. And honestly, if they ask me for advice, which they have not, and they won't, but I would almost say, I saw Anatolia, I think is his name, the creative salon. When I saw him talking about this, what I would tell him is do the opposite.
00:20:06.106 - 00:20:32.262, Speaker B: Just say, we're not doing layer twos. You're not doing anything like sharding. We're going to lean in heavily into single layer one synchronous thread, and we're just going to optimize everything in that direction. In other words, there may as well be some chain or some community that goes in that direction, and it seems like they position themselves to try that. I don't think that would go well, but they may as well be the ones to do it. I don't know. So it's a bit of mixed messaging, I guess, I would say.
00:20:32.316 - 00:20:33.254, Speaker A: But, yeah, fair enough.
00:20:33.292 - 00:20:34.534, Speaker B: I'm all for it.
00:20:34.732 - 00:21:36.246, Speaker C: It's hard, though, right? There's, like, a lot of core infrastructure that you need on the layer one first before you can do all this layer two stuff. So I think it's reasonable that if you're building out one of these systems, I think both of us have probably thought about this. The crazy idea of, what if you put a roll up inside of a roll up, like, oh, my God. And then you realize, like, oh, yeah, you could do that maybe five years from now when you feel like everything is really done and it's super hardened and everything is beautiful and perfect and all the infrastructure, it's been running for years, and then you can start working on throwing a roll up on it. And so I think it's easier for something like polygon and binance smart chain, where as something that's just running geth, you basically get all these infrastructure providers for free. But I could imagine it being difficult for something like Solana if you still need time to harden that core base layer.
00:21:36.358 - 00:21:47.200, Speaker B: Yeah, it should be possible in principle, but yeah, as you say, those little details of, like, the tooling is not there yet or the infrastructure is not there yet end up adding, know, I don't. Yeah, so there is that.
00:21:47.570 - 00:21:55.120, Speaker A: Very interesting. I was like, what does a roll up inside of a roll up look like? Very high functioning. What would you call a roll up inside a roll up?
00:21:55.730 - 00:21:59.390, Speaker C: L two squared quadratic.
00:21:59.910 - 00:22:16.230, Speaker A: So we touched on the EVM Ethereum virtual machine earlier, but it's become the standard in web three. But at the same time, that comes with the culprit of high gas fees. It's very slow transaction times. How do layer two applications approach solving this bottleneck?
00:22:23.070 - 00:23:15.820, Speaker B: I think being very EVM, let's say very EVM compatible, sort of a double edged sword. It's positive for all the reasons we talked about, which is like, we capture this network effect. It's negative because now whatever downsides of the EVM, the EVM has, we kind of inherit by default. So I think that is important to understand, and this is that it's not as though just like, putting something inside of a roll up doesn't make all of its problems go away. So if we're still doing something very close to the EVM, the same stuff that we have to deal with on layer one, state bloat, et cetera, you're just dealing with that in this other little environment. I would say that is one of the downsides of full EVM support, like arbitram and optimism, and one of the benefits that some of these other designs, they can experiment more freely, I guess. With that said, I think one of the general cool things about layer two is it's like a chance to experiment a bit.
00:23:15.820 - 00:24:07.770, Speaker B: Again, we're sort of capped at how much we want to diverge from the EVM, but we've already, like, on arbitrage, we were able to, before EIP 1559 went live. I assume everyone knows what these terms mean, but just, I don't know, shout out if you don't. But even before that went live within arbitrage, we were able to experiment with a fee model that was basically that or something very similar. Right. And I'm all for things like that to continue happening on layer two as some of these more kind of experimental ideas, stateless clients state ran and things like that. We can kind of like test drive them on layer two, which I think is cool. But, yeah, I think it'll be less of these EVM hard, EVM compatible layer twos are solving these problems of the EVM and more like they're sort of developing in tandem.
00:24:07.770 - 00:24:11.306, Speaker B: What do you think?
00:24:11.408 - 00:24:51.658, Speaker C: Cool. Yeah, I mean, one side of this is, I don't think the EVM is as bad as people think. The EVM. I really like the EVM. I have a lot of fun building stuff on the EVM, but that's not to say there isn't room for improvement. And that's kind of like, at least for optimism. That's kind of the point is trying to build our software as close to Ethereum as we possibly can, because then it means, okay, we're a couple of months down the line, and we're really confident with all of our geth code base.
00:24:51.658 - 00:25:34.520, Speaker C: And now you have a whole bunch of engineers who are basically working on something that looks like Ethereum. Right? And so now you're basically working on Ethereum. So it's like kind of the point to work with the EVM, because then you can direct engineering effort towards making the EVM better. You can kind of work with people. And, you know, we have this crazy idea for how we want to make the EVM better and faster. Let's really specify it well, and let's work with people and use this network as a test bed. Like Dan was saying, use this network as a test bed for some EVM change and work with people to get tooling in place to support it.
00:25:34.520 - 00:26:09.540, Speaker C: In a lot of ways, we like the EVM, and we want to make the EVM better, but it's hard to make the EVM better if you're just working on something like Ethereum, because Ethereum is so ossified, it's so hard to make changes to Ethereum, but we could make changes to our code base much more easily. So, I don't know. I'm an EVM Stan, and definitely for the foreseeable future, it's going to dominate, and we kind of just should do our best to make it as good as possible.
00:26:09.910 - 00:26:34.700, Speaker B: Yeah, and to your point of just having more engineers and more brains working on that code base, that just benefits. That benefits everybody. Benefits. All the other chains that use the EVM, too, in fact. So, yeah, that is another valuable thing about working directly with the EVM or with guest. In fact, we've had, I think, two commits upstream directly from our engineers to the guest code base. By we, I mean, not me, but I'm just going to take credit.
00:26:34.700 - 00:26:53.380, Speaker B: Harry and Lee, small things, like very small, little edge case bugs, nothing critical, but I imagine as time goes on, l two teams working with guests and with the EVM, that will kind of happen more and more and. Yeah, guess is complicated. The EVM is complicated. So more people working on it and thinking of ways to improve it is good.
00:26:54.230 - 00:27:06.580, Speaker A: Definitely. So is there room for optimization in the process for roll ups on and off? L two s. Do developers and end users have the patience for the roll up process?
00:27:07.750 - 00:27:10.722, Speaker B: Sorry, I think I missed the key word in the question. Is there room for optimization?
00:27:10.866 - 00:27:14.902, Speaker A: Yeah. So is there room for optimization in the process for roll ups on and off?
00:27:14.956 - 00:28:10.358, Speaker B: Ltus, like, for users getting on and off? Yes. Going between chains is inevitably the most different UX part of the experience of using a roll up, just because when you're using one chain, you can't go between chains. So now we have two chains, or more than two. So I think that, yeah, I don't know, there's a lot to say about UX and stuff. And I think I even saw a Twitter thread or comment from you about like, wallet UX and what needs to happen there. Basically. Yeah, I don't want to steal your thunder here because I feel like I got some of this from you, but basically wallets and sort of block explorers and even just like web DAP interfaces are kind of the three ways, vaguely speaking, that users get a view of what's going on.
00:28:10.358 - 00:28:42.974, Speaker B: And I think a similar thing has happened with all three where, I mean, here we are hyping up EDM compatibility. Yay. And it's great. And it is great, but what's happened is because of that, a lot of applications or these wallets and stuff have said like, okay, we'll just sort of take the same user experience, take the same tooling, take the same user interface that we've used on layer one, and just plug it into this new chain. And on the one hand, yes, that's awesome, you can do that. On the other hand, there's very different UX considerations to be had there. Wallets is where there is the most room for growth.
00:28:42.974 - 00:29:20.814, Speaker B: I would say to be nice because you look at metamask and this is where I'm just stealing your thunder, but you look at metamask and the network switching that we use currently was developed for developers. It used to only be that you switch networks if you were using a testnet, which is something developers do. And it's gotten a bit better. Metamask has added new features, but it's still basically that. And probably whatever the better UX is, is very different from that. And yeah, we could say a similar thing about explorers and even just individual user interfaces. So, like, long way of just saying yes, but I don't know how to do better, but I want a smart UX designer to solve them.
00:29:20.852 - 00:29:35.326, Speaker A: Yeah, and we can go deeper here and not steal his blunder. But what are the core UX challenges that need to be solved? And certainly we got some speed, but are these designs and UI elements that could be up? Are these UI things that could be upgraded?
00:29:35.438 - 00:29:36.882, Speaker B: Maybe I can only answer that question.
00:29:36.936 - 00:29:49.740, Speaker A: Yeah. And then we can just speak more like it's open conversation here, just basically talking about the challenges of UI and UX right now and the L two solutions and what can be done and how to go from here and how you're going to approach them.
00:29:50.110 - 00:30:41.538, Speaker C: Yeah. As was just said, all these wallets were designed when there was just one chain to be interacting with. And so now you have to start thinking about like, okay, what does the ideal user experience look like when I have more than one chain? How do I communicate? There's like a million things you need to communicate to users. We are seeing better user experience. Finally come around. The tweet thread that I was talking about was Rainbow Wallet has a really nice ux where all of your assets on all of your different chains just show up in your wallet with a little logo saying which chain it's on. And I think Coinbase wallet just came out with an update that basically follows the same UX pattern.
00:30:41.538 - 00:31:30.090, Speaker C: And it's nice, right? It's like, okay, now I don't have to go, I'm not on Ethereum. And then I have to go into the settings to find some setting that a developer didn't care about because it's like this really ugly settings page that I finally find optimism and maybe it's not there and I have to add it manually and there's all this stuff, but now it's just there, right? Like all my stuff just shows up. So clear improvements coming in. I think there's some weird bridging is going to be an interesting one. There's like a million bridges right now. So I can totally imagine wallets are just going to have bridging built in where it's basically some ux, where it's like transfer your assets to optimism or whatever, someone will figure it out and it'll look cool. And then I think the other interesting one is fees.
00:31:30.090 - 00:32:47.534, Speaker C: I'm sure that if you've ever tried to build an l two, you understand that fees are super weird, because on Ethereum, the way you pay fees is where you have gas and you pay for gas based on different things, computation, data, all these different things. There's a certain gas cost per operation, and it's not the most intuitive thing in the world, but after all these years, people kind of get it. I think the problem with layer twos is you now have the same thing on layer two, and you are now also paying for this data that lives on layer one. And this is like a totally new thing. And we went back and forth with all these different fee schemes of how do you represent this to users? And the best option was like, okay, let's get a hard fork into Ethereum, where we introduce a new transaction type for layer twos, which I really want to do, and we can't do that yet because getting an EIP through is like a whole process. And so what's the next best option? Just like get all the wallets. Just like force them to show this new fee thing, the layer one fee, and that's like this separate type of fee.
00:32:47.534 - 00:33:16.186, Speaker C: And there's just all this new stuff that's. It's just the wallet. Ux doesn't exist there just because the problem didn't exist until like five months ago. So it'll improve. But there's so many fronts where we can just make it easier for people to understand. I'm on a layer two, or I have these assets here and here, and I know the security properties of my assets on this chain versus on this chain. There's so much you could talk about.
00:33:16.368 - 00:33:29.118, Speaker B: It's crazy. I've heard about the Rambo thing. I haven't looked at what they did there, but it seems like the basic idea of it being asset based instead of network based is like the first. Somehow they conveyed that. Where you can look at, well, they'll just show you.
00:33:29.204 - 00:33:49.014, Speaker C: You've got your ethereum ether, then you've got your optimism. Or your arbitram ether, where it'll say ether. And then at the bottom of this token symbol, it'll have the network logo. But you don't have to flick a bunch of settings just to see assets on one chain or another. It just shows up in one place.
00:33:49.132 - 00:34:15.034, Speaker B: Yeah. And with fees, fees are like the craziest one, as you say, especially with cross chain stuff, bridges. Because first of all, different l two s handle fees differently. Inevitably, you really just want the wallet to convey exactly what's going on, what we can't do and which is good that we can't do. We can't sneak money past you. Right. So you will see what you're paying in your wallet, but communicating what and why is where it gets tricky.
00:34:15.034 - 00:34:48.726, Speaker B: So, for example, if you're doing a cross chain message and you're like, kind of paying for execution from one layer to the other, you're doing some operation that didn't involve transferring ETH and you're like, wait, why am I sending ETH here? And the best we can do is sort of like try to communicate that in the user interface. But then the wallet doesn't know about this. So, yeah, it's almost like we have the tools we have, but if all of our tools burnt down and we had to rebuild them, there's like so many things we could change, and that's just wallets. You can get into explorers, but, yeah.
00:34:48.908 - 00:35:04.320, Speaker A: We can go into explorers. Yeah. Do you think there's anything just to elaborate on this that could be done in the near future right now to make the adoption of l two accelerate anything that stands out to you to make any material changes?
00:35:05.330 - 00:35:47.686, Speaker B: Well, it's a tricky question because there's been some drama around this recently for those who follow ethereum, drama, which is probably some people where basically, yeah, there was this. For whatever reason, there was a sudden push of decreasing the cost of call data on Ethereum. And part of the purported reason being we want to accelerate adoption of roll ups, subtext being we need to compete with other L ones. That's me putting in the subtext. So that was Vitali kind of put that out there. And then the guest team recently put out a statement basically saying, no, we don't support this. Basically meaning we don't support doing this immediately.
00:35:47.686 - 00:36:34.534, Speaker B: We think this is rushed. And the reason they gave was basically like, we're not ready to directly incentivize users to go to layer two because layer twos are still on their. Layer two is like roll ups, arbitrage, like optimism, are still on their infamous infinity. There we go. Hopefully not infamously and specifically, and this is true, and it's just worth saying this here and wherever else we can with arbitration, we say like main net beta whenever we talk about it. And that's just because we have a fully implemented system, but it has these kind of trusted guardrails on it, so they are still trusted systems at this point. And so, yeah, it was a weird thing where on the one hand, at least I'm just speaking for myself here, and not, certainly not for you, but also not for anyone else at offchain labs.
00:36:34.534 - 00:37:17.766, Speaker B: The idea of decreasing call data so that roll ups are more usable for users. On the one hand, I'm all for it, but I do sort of agree with the guest team that if we're really thinking about trying to accelerate moving users onto roll ups, the fact that they're still trusted is not a good look. So I'm rambling a bit because this is a bit of a tricky question, but I would say we're very aggressive about we want projects to build on arbitram, we want to help them, we want to sort of get the ecosystem moving there. But as far as users using it, of course we want users using it, but it's just really important to make that clear that this is young tech and we still, for security reasons, aren't ready to kick off the training wheels. So I forgot what your question was exactly, but I think I had an.
00:37:17.788 - 00:37:33.578, Speaker A: Answer in there is a main thing to help grow adoption for l two s. I didn't really answer Kelvin, it's all good. Do you think just more bespoke wallet solutions need to be adopted in the neuromus?
00:37:33.674 - 00:38:40.500, Speaker C: Yeah, I mean, the wallets, natively integrating them will just make it easier for people to use them clearly, like centralized exchange integrations. Centralized exchanges for a lot of people are kind of like trusted bridges for at least when it comes to moving money between chains, which is interesting. I think you're going to start seeing that really take off and then it'll be easier for people to move money between one chain or another. Either way, there's still going to be decentralized bridges that are cheaper, still going to be probably the cheapest choice to go through centralized exchanges. But anyway, there's all these different things, like there's a lot of infrastructure that still needs to be put in place, so that's really easy for people to use the system. But yeah, people think the crypto space moves way faster than it actually does. The crypto world is slow and steady, with everybody just constantly being like, oh my God, so fast.
00:38:40.500 - 00:39:27.410, Speaker C: I don't know what's happening, but it's just them saying that in their head all the time and not giving them a chance to actually sit down and think about what's going on. I think you're just going to see slow and steady progress when it comes to layer twos, optimistic roll ups are way easier than zk roll ups, so I think it's going to take a while. But they're going to ramp up. It's going to be kind of a natural process. I mean, we're doing everything we can to speed it up. But yes, like Dan was saying, we have training wheels as well. There's this constant sort of balance you have to strike between wanting to sort of push the technology to other people, but also, it's also really new, and we need to be careful.
00:39:27.410 - 00:39:53.418, Speaker C: And there's these pressures in the Ethereum world to scale now, but we also want to scale safely. And TLDR, it's complicated. It'll probably just naturally happen as time goes on. And we're already starting to see a lot of really cool ux improvements that make it easier to use the system. So we'll get there.
00:39:53.584 - 00:40:10.270, Speaker A: Cool. Yeah. That's all for the questions. If you guys have any final comments, love to hear them. Otherwise, both of them will be up here. Instead of asking questions in the crowd, we're going to stand up here. So you're welcome to come up, ask any questions you have.
00:40:10.270 - 00:40:25.140, Speaker A: Welcome to ask me any questions about Chainlink Labs. I'm on the business development team. So I just wanted to thank everybody for coming tonight. I hope you enjoyed it. Drink some pizza, as you know, in the other room. And yeah, happy holidays and thanks for coming. It.
