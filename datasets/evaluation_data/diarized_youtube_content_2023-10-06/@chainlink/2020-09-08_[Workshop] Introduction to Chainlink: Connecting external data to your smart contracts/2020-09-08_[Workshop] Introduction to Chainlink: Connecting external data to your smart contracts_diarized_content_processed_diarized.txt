00:00:06.680 - 00:00:18.924, Speaker A: Okay. And we are up. And we are live on YouTube. Oh, no, not quite. All right, great. Now we're live on. So awesome.
00:00:18.924 - 00:00:44.448, Speaker A: So how's it going, everybody? Thank you for joining. Really excited to be giving this workshop. This one's me giving a workshop instead of one of our sponsors. And this is going to be pretty much the general. Well, not even the general. This is going to be all the basics of Chainlink. There's going to be a lot of information in this workshop about blockchains in general, how smart contracts work, how they've evolved.
00:00:44.448 - 00:01:27.648, Speaker A: If you watch the opening ceremony, it's going to be a little bit more in depth than what we talked about there. But yeah, that's basically what we're going to be talking about. And really excited to have everybody here. Like I said in the opening ceremony, same thing here. The world of smart contracts and the world of decentrality and the world of blockchain is literally knocking on our doorstep right here. History is going to show who will be the pioneers to push into this fourth industrial revolution. And that's not going to happen, though, unless we can interact with the outside world on our blockchains and connect these smart contracts to off chain data APIs and traditional payments.
00:01:27.648 - 00:01:46.104, Speaker A: So let's get through it. Will you do an example of how to use Chainlink? I absolutely will. So if you're brand new and you haven't seen Chainlink work, we're going to do that as well. So. Good question. I'll be kind of taking questions sporadically. Feel free to drop a question in the chat.
00:01:46.104 - 00:02:26.136, Speaker A: Happy to answer. So in this, we're going to go through the smart contract connectivity problem how Chainlink already supports the growth of Defi, some untapped potential, the tools you have to build Chainlink smart contracts. And then we're going to briefly look at. Actually, we're going to do an example. We're not going to do the price reference tutorial that will happen tomorrow, but we are going to do getting any API into your smart contracts. We'll do an example of that with remix and node JS will probably also wait for the truffle team, but we will be going into some technical examples. The smart contract connectivity problem.
00:02:26.136 - 00:03:26.792, Speaker A: In order to really understand Chainlink, we first need to understand that smart contracts are not able to connect to external data or any off chain resource on their own. This is a huge limiting factor for smart contract adoption because it means the only thing that we can currently do in a smart contract is token transfers. Right. And a lot of you are engineers and you've come from engineering background, and even those who aren't, a big question will say, well, why can't we just get data the regular way? Engineers know a lot of applications just use API calls, so why can't I just make a regular API call? And this is actually a really important question. And the simple answer is that the blockchain is deterministic and it needs to be able to be validated by all blockchain nodes on the chain. If making API calls is part of that validation process, then each node would get wildly different results. In the case the API is updated, depreciated, or even hacked, so they can't make API calls natively.
00:03:26.792 - 00:04:25.230, Speaker A: And if you want to see an example of that happening, and a little bit more in depth as well, I also have a video on YouTube in that engineering series that says, what is an oracle? And that goes into it as well, but that leads right into this next piece. So a blockchain, oracle or an oracle is any device that interacts with the off chain world to provide data to smart contracts. They report the result of that data on chain so the blockchain can stay deterministic. And this is really important because this is where Chainlink actually comes in. There are thousands of APIs out there that are already providing data that people need in their applications. Chainlink makes it easy to enable connectivity between those APIs and smart contracts, even if they require authentication. So that now you have a decentralized applications powered by the same reliable APIs that the rest of the world and current web technologies and applications use today.
00:04:25.230 - 00:05:09.612, Speaker A: And a quick note, a single chainlink Oracle is also called a chainlink node, and I'll probably be using them a little interoperably. Is that the right word? I'll probably be using them back and forth just so that you have that knowledge there. Now, a lot of users today still don't quite understand blockchain, and sending payments in cryptocurrencies isn't universally accepted yet. So when a smart contract has executed, people need the ability to get paid in a currency that they want. So not just ethereum, not just bitcoin. And Chainlink makes it really easy for these off chain payments to occur based on on chain interactions. This also works for cross chain communication and sending payments to other chains as well.
00:05:09.612 - 00:05:46.292, Speaker A: Chainlink uses something called external adapters, and again, I just put out a video on external adapters if you're looking to build one. We also have a fantastic blog and the docs go over it as well. We'll talk more about that later in a future workshop. So stay tuned. Check the calendar for yeah, and these enable connectivity to any resource, be it an open API, an API with authentication, payments, or another blockchain. It works essentially as a wrapper around an API. So you can take these upgrades to provide authentication, processing, or reduce on chain costs and privacy.
00:05:46.292 - 00:06:19.472, Speaker A: External adapters are really nice if you want to do something computationally complex, but not on chain, right? We know that gas fees, especially right now, are really high. So if you want to take that computation, do it off chain. That's where external adapters come in, and they're kind of this key functionality that allows you to do pretty much anything. External adapters are kind of that next level. Hey, I want to do something really crazy on chain. I'm going to use an external adapter to allow that to happen in a decentralized, secure fashion. So those are really important.
00:06:19.472 - 00:07:08.492, Speaker A: Stay tuned for the workshop on that. Also go watch the video on that if you want. But yeah, it's really easy to introduce new functionality to chainlink without needing to know anything about solidity or even Ethereum because you can write these external adapters in any language, so they're really powerful. Now, this is kind of one of the key pieces that's really important to know and learn about when we're talking about oracles. A centralized oracle becomes a single point of failure for the entire smart contract. This is why we create decentralized oracles and decentralized networks. So this is something that's going to be really important when it comes to blockchain and when it comes to oracles, having a centralized node is basically defeating the entire purpose of building a smart contract on these decentralized platforms.
00:07:08.492 - 00:07:48.440, Speaker A: Now that's not always true. If you want your centralized application to be centralized, you can absolutely do that. But don't make the mistake of thinking just because it's built on blockchain, just because it's built on Ethereum, on Polkadot, on Tezos, that it's automatically decentralized. Right. If you have any single failure points, you now have a centralized application, and whatever that node is, whatever that data source is now has control over when your contract executes. So this is really important to know. And the other thing that goes along with it is if you say, oh, I'm using a chainlink oracle, I'm now decentralized.
00:07:48.440 - 00:08:28.808, Speaker A: That also doesn't quite make sense. Saying a chain link node by itself is decentralized is kind of like calling a tree a forest. One chainlink node one. Oracle doesn't make up an entire decentralized network, right? So to make applications that truly never need to rely on a single entity, be a company, landlord, government or anything of the sort, you need a network of chainlink nodes. And this is really important. And the reason that I'm really stressing this is because we've already seen attacks on centralized oracles. We've seen attacks that have lost projects literally millions of dollars since their centralized oracle was hijacked.
00:08:28.808 - 00:09:27.964, Speaker A: And they were even using oracles that had good intentions, right? They were using oracles that were not malicious, but they got hacked and that single point of failure cost them greatly. So when it comes to smart contracts, the whole purpose is to have this trustless application. And anytime you rely on a single entity, you're now trusting. So Chainlink is designed to be a modular infrastructure and can build a decentralized network used to connect smart contracts to any API. You can select as many oracles nodes or Chainlink nodes as you like and use as many data sources as you like in order to trigger the execution of your smart contract. And along with the decentralized oracles, you should also have a decentralized set of data providers because if you have 15 nodes and they're all calling from a single API again, now you introduce that centralized point of failure again. So definitely need to keep that in mind as well.
00:09:27.964 - 00:10:14.904, Speaker A: Quick question here. Do you not come across the same issue as Ethereum with several nodes coming with different values per API call, never coming across different value? Do you not come across the same issue as Ethereum with several nodes coming with different values per API call? I'm not sure I understand the question here. Maybe you could rephrase. But anyways, I'm going to keep going. Then again, Chainlink also enables off chain payments to occur based on the execution of a smart contract. So if the result of a smart contract said someone needs to be paid in $100 USD, you can utilize Chainlink to send that transaction. So again, this is that piece of connecting the mainstream.
00:10:14.904 - 00:11:06.140, Speaker A: The people who don't necessarily understand blockchain or have a crypto wallet, you can do it like that. And someone mentioned that I'm breaking up a little bit. Let's try to adjust my mic maybe. Cool, thank you for that. Hopefully it's good now. So to get you started with DeFi, the chainlink project has actually gone ahead and found many of the best blockchain node operators on the planet and combined their prowess to build what's called price feeds or reference contracts or price reference contracts, you'll hear kind of those terms thrown around. These are decentralized on chain reference points that can be considered source of truth for various currency pairs, like for example, the price of Ethereum in terms of USD.
00:11:06.140 - 00:11:59.280, Speaker A: Each node in the network. And you can see a visualization of that right here. Independently gets data from some of the highest quality APIs and reports those answers on chain, you can see the answers that each provider reports. So everything is transparent. Many of the most popular cryptocurrencies or fiat currencies are currently supported. So you can see in this visualization here, all those dark circles, those are examples of nodes that are returning data, right? And you can see this is an older picture because the price is $200, but you can see each one of them returning a price and the median price being taken to say, okay, the price is now $196. And we have this much decentrality, this much confidence that this is the correct number.
00:11:59.280 - 00:12:46.716, Speaker A: So this is a really powerful application, and it's also one of the easiest to use. It's basically like a pre boxed decentralized network for you to use. So it's really fantastic and it's really powerful. Currently, these price feeds are already being used by some of the top projects in DeFi around the world. The proven safety, reliability, and power of these applications is a testament to the power of chainlink and reference contracts. So you can see here, there's a couple of them listed, like synthetic assets, some lending and borrowing, trading, asset management. There's 30 plus of these price fee contracts live, 14 users securing critical infrastructures through this price data.
00:12:46.716 - 00:13:19.864, Speaker A: And again, it's highly reliable, decentralized, transparent pricing contracts for the DFI ecosystem. This is just a quick snapshot of, I think this was a couple weeks or maybe a week or two ago, some of the top five projects in the defi space. So this is DeFi pulse. If you haven't heard of it, go check it out. We can see Aave, synthetix, and yearn are all using Chainlink price feeds. So three of the top five Defi projects are using Chainlink price feeds. And there's a whole lot more.
00:13:19.864 - 00:13:42.352, Speaker A: And the reason is because it's such a robust and reliable solution for getting decentralized data on chain. So chainlink price feeds are securing literally billions of dollars. And the proof is in the pudding right here. So, really powerful. And here's a couple more stats. Synthetics, $900 million loop ring, who's a sponsor? Definitely check them out as well. They're doing really cool things.
00:13:42.352 - 00:14:13.400, Speaker A: 20 million last time that I checked, set protocol, same thing, and then ave passing that 1 billion market at 1.5 billion. So really powerful stuff here. I'll take a quick question. Is there a list of chain link price feed providers? That's a great question. Let's even do that right now. Can I go to this? There is, so if you go to the docs and you go to using price feeds, you go to price feed contracts.
00:14:13.400 - 00:15:04.596, Speaker A: This is a list of all the price feeds and their addresses and their proxy addresses right here. We're actually going to go over this in tomorrow's workshop, how to work with these and some interesting things that you can do. But if you want to play with them right now, documentation is super straightforward and you can get any price feed for any testnet. Well, Robston, Rinkbeam, coven and play with those here. So good question. Back to our main schedule here, Chainlink VRFs for truly random numbers. So this is another really cool feature that Chainlink offers, and it's getting reliably provably random numbers into your smart contracts.
00:15:04.596 - 00:16:00.364, Speaker A: Because until now, getting random numbers on chain has always been a huge issue since the current conventional way is to get a random number based off of a block hash. And you've probably seen, like, I'm going to pronounce it wrong, cacao, cacao 256, or basically the solidity shay algorithm on chain. And that's how people have been doing it. And they've just been hashing the current block and doing it this way. You're relying on the ETH miners for this random hash. You're relying on this almost a centralized source because you're letting the miners have this sense of control on whether or not they want to publish a block, right. If they're in a lottery, for example, and the prize is a million dollars, and they mine the block, that could potentially win, and the random number isn't theirs, they can choose to not post it.
00:16:00.364 - 00:16:29.844, Speaker A: Right. And you now have this great incentive for the miners to keep trying until they get an answer that they like. And this is obviously not what we want. We want to have provably random numbers without having to rely on the miners or rely on anybody. And so the chainlink VRF is fantastic tool for getting truly random numbers. And you can prove that they're random, too. There's a little bit of cryptocurrency magic that goes in there.
00:16:29.844 - 00:17:15.680, Speaker A: I'm not going to go into that here. But you can prove that they're random numbers, which is something that doesn't even make sense in your head. But that's basically the chain like VRF. And we're seeing more and more projects starting to adopt these, and a lot of hackathon projects in the past have actually used them and built something really cool with them. And we're really barely scratching the surface here. Getting random numbers is such a huge piece for gaming and for literally anything that RNG. So really excited to see what you guys build with these chainlink VRFs pool together is one of the main net products that's using chainlink VRF.
00:17:15.680 - 00:17:40.616, Speaker A: They're a no loss audited savings game where they give out money to random winners based off basically as a thank you for saving. So really cool. And we're seeing more and more adoption. I should have put wild cards on here. They're this awesome contribution project, but yeah, a lot of really cool stuff happening with VRF. So this brings me to our next point. We have a blog that gives a list of ideas to power your smart contracts.
00:17:40.616 - 00:18:20.536, Speaker A: If you're kind of humming and hawing over how to get started, I'd highly recommend you go read that the blockchain space is literally thirsting for these new chain linked applications. And let me just fire off a couple of my favorite from this blog. The first one is literally anything in decentralized finance or DeFi. We've seen a huge surge in DeFi recently and we've barely scratched the surface, right? So it looks like the hedge fund total assets under management is like 3.2 trillion. And DFI has what, like seven or 8 billion right now. So we're not even close to scratching where the market is.
00:18:20.536 - 00:18:58.496, Speaker A: So that's literally unlimited list fantasy sports, and any type of sports games in general is really interesting. A lot of fantasy sports players pay on average $100 per league. You can cut that price down by a fraction of a fraction even with these crazy gas costs. And you don't even have to trust that the scores are being updated fairly and ODs being skewed. And that's like the real bonus here. It's having provably secure ODs and provably fair games is something we've never seen before. A lot of simple games like Texas hold them using Chainlink VRF allows provably secure games.
00:18:58.496 - 00:19:32.320, Speaker A: And again, you can cut the price massively down and have these buy ins be way cheaper than a major tournament. You can split up your car plots of land, shares of stock, making it easy to track who owns what without having to deal with any of the paperwork. And since your data is going to be coming from a decentralized oracle, no one can mess it up. Nobody has that single centralized point of failure. You don't have to worry about Lost a, somebody lost the paperwork and now I'm doomed or something like that. So I'm going to take a quick question from Mr. Shane.
00:19:32.320 - 00:20:10.104, Speaker A: So those contracts are the aggregated price data from multiple sources, is that right? Yes, that's right. Yeah, that's spot on. Insurance is really cool and we're starting to see more and more products use insurance. This one really kind of hits home for me. Let's say that your crops are all messed up due to the weather and your insurance doesn't want to pay out because of some preexisting condition or something. Right. With the decentralized smart contract, you don't have to trust that the insurance company is going to do the right thing since the right thing is infrastructural with Chainlink.
00:20:10.104 - 00:21:00.104, Speaker A: So it's built into the core of the smart contract that they have to do the right thing. So that's something really powerful and having this trustless insurance. So now we're going to jump into the chain link example here that somebody was asking for, and I'm even going to do it right from the documentation because the documentation is fantastic, right. We're constantly updating it and making it really good. If you're brand new, you want to check out this example walkthrough. If you have no idea anything about smart contracts, you can follow along here and get something done. But we're going to look at this introduction to making any API.
00:21:00.104 - 00:21:29.184, Speaker A: So we can literally use remix to deploy this. And we even have like a super easy deploy this contract with remix button. It'll bring you to remix. For those of you who are unfamiliar, this is a web ide. I'm going to make it a little bit bigger here, so hopefully that didn't affect the quality. It looks like I updated a whole bunch. You hit gists and you can come to the gist that we just created.
00:21:29.184 - 00:22:00.396, Speaker A: I have two others in here because I've been playing around a lot. But then you have your smart contract built right in here. And as you can see, a really simple use case for Chainlink is a pretty small contract. We have a ton of notes here. If you ever get kind of confused or lost, you can always come back to the notes. But what this smart contract is going to do is it's going to make an API call and it's going to report the data on chain. Right? And again, this is an example of using a centralized oracle.
00:22:00.396 - 00:23:08.740, Speaker A: So what we're, so this is great for development, this is great for practicing building something, but when you actually go to production, when you actually go live, please don't use a centralized oracle. Please don't use a single centralized API because again that defeats the purpose of smart contracts, that defeats the purpose of decentrality in the first place. So what we're doing, just to kind of walk through the contract here, we're choosing our solidity version, we're importing the Chainlink client. This is basically what allows us to make these API calls. It's the open source package there. We're inheriting in it to our contract and when we deploy this we're going to set public Chainlink token which is going to give us the Chainlink contract and we're going to choose our oracle and we're going to choose our job ID. So this is something that takes a second if you're brand new.
00:23:08.740 - 00:24:17.340, Speaker A: So since Chainlink is this modular infrastructure of independent operators, since it's this independent infrastructure, you actually get to pick which oracles you're going to work with, right? So it's kind of like going to the marketplace and choosing oranges, but instead of oranges you're choosing an oracle service provider, which is a little bit weird. But you literally specify I'm going to use this oracle and this job and you can learn more about what Oracle to pick, what job to pick from what's called a node listing service. So if we go to market link we can find a lot of different nodes. I'm going to go into that in a little bit, let me get through the contract. But that's something that to think about. Then the main function that we're going to do is this request, Ethereum price, and this is where I'm going to walk through what this code does in a minute. But this is where we actually make the API call.
00:24:17.340 - 00:25:04.956, Speaker A: We add these pieces to it and then we send the request. Once we send the request we're not actually done. So this send request basically outputs an event for the chainlink node to read off of. So it says the smart contract will post some data saying I'm data xyz and there's a chainlink node looking for that specific Xyz. Once it finds it, it then makes the API call, it does all the processing off chain and then once it's done it actually calls this fulfill function. So it actually makes a transaction by calling this fulfill function to post it back on chain in an external transaction. So it's almost like an async function, if you guys are familiar with that.
00:25:04.956 - 00:25:35.604, Speaker A: So your smart contract continues. It posts some data on chain, off chain. The chain link node picks it up, does the off chain stuff and it posts it back on chain. So we can see exactly what that looks like here. I'm going to take a quick question. If you were using multiple oracles, would you specify that in the constructor part that you just mentioned? You could, yeah, you absolutely could. You could put like Oracle one, Oracle two, something that's probably better that you would do.
00:25:35.604 - 00:26:47.192, Speaker A: And the reason that I didn't do it here is just because it's faster is what you would do is you would do like address a address, you do like address a bytes, bytes 32, actually do address oracle bytes 32. Job, you would build your function like this and then when you call this request Ethereum price function, you would input your oracle and your job Id and then you could just keep calling this function with the different oracles and that would be the easiest way. Now you'd probably also want to change the API to make it decentralized. So you do like the oracle job Id and then like string and then would be string memory because solidity URL. So that's how you can make it decentralized. And you could just keep calling this with different APIs, with different oracles. There's also this thing called service agreements that we're not going to go into here, which also make this easy, but with this alone you have all the functionality that you need to make it decentralized.
00:26:47.192 - 00:27:26.490, Speaker A: So good question. Answer live. Who's paying the gas? Who's paying the gas that the oracle needs to call to fill the function? That is a fantastic question. I'm glad you asked that. So the oracle is actually paying the gas because the chainlink node is paying the gas. Since the chainlink node is the one that's making the external transaction back on chain, it's actually paying the gas. And you'll see the chainlink nodes, they actually have max gas limits so that if you're going to do some crazy transaction back on chain, they'll actually block you.
00:27:26.490 - 00:27:47.212, Speaker A: So that's a really good question. Chainlink nodes are making the transaction. So the chainlink nodes are paying the gas. Who provides the API link? If I need different data, how do I get the link URL to the data? That is a good question. So there's tons of APIs out there. There's tons of URLs out there. This for example is an API.
00:27:47.212 - 00:28:39.112, Speaker A: I'm going to answer this live. This, for example, is an API that gets us the price of Ethereum in USD and you can literally just look up crypto API or crypto price API and you're going to get coin market cap, cryptocompair, that's what we're using right now. Nomics, coingecko. These are coin API. These are all APIs that are really powerful that you can use and you can do this for any data, literally like stock. If you look up stock API, you're going to get alpha Vantage, Finhub, rapid API, IEX X, ignite whatever data that you're looking for. You're going to get an API so you can just google whatever you want API and hopefully you get some results.
00:28:39.112 - 00:29:12.104, Speaker A: If you don't, feel free to ping us. If you're looking for some really custom data, maybe you have a really interesting use case, but feel free to reach out as well. I'm going to continue with the demo. I'm going to get to those questions in a second. So what we want to do, and then hopefully I didn't mess up the contract at all by my edits, we're going to compile it. So this is going to compile it down to readable and we're going to deploy it. So again, I'm going to kind of pretend that you guys are all a little bit new here.
00:29:12.104 - 00:29:51.430, Speaker A: Instead of JavaScript VM, we're going to go to injected web three. JavaScript VM is like a local way to test. We want to test this. We want to deploy this on a real test network because that's where the oracles are watching and my metamask account is connected. If you don't know how to do that, we have video on connecting to metamask and our documentation also goes over it. We have Ethereum, we have some testnet link so we can deploy this fine, we're going to deploy it, confirm and we can see we get a transaction here on the COVID testnet. That's the network that we're using now and it should deploy pretty quick.
00:29:51.430 - 00:30:36.644, Speaker A: For those of you who are new, when you deploy on Ethereum, you have to wait a little bit for the transaction to clear. So we're just going to wait for that. And it looks like it's done great. And in remix we see we get our contract down here and these are all the functions that we can do to interact with the contract. The orange ones are ones that we can call and these are the ones that are going to cost gas and the blue ones are going to be what's called view functions. They don't cost any gas because we just say we're not actually changing the state of the blockchain at all, we're just looking at what the value is. So for here, for example, we have this Ethereum price and right now it's going to be zero because that's what it gets initialized as.
00:30:36.644 - 00:31:21.632, Speaker A: We haven't requested the Ethereum price yet, so that's what it gets started as. Now I'm going to hit request Ethereum price and we're going to run into an issue, and I want to do this intentionally because it's something that you're going to run into the first couple of times you try this before you figure out what's going on. So we're going to press this and we're going to get this gas estimation failed error. This is a really generic error that you may run into a lot, and it could mean a couple of things. It basically means you don't have enough gas, you don't have enough tokens to run this. So most of the time when we're talking about gas, we're talking about transaction gas. And this is going to be the gas required for Ethereum to run your contract.
00:31:21.632 - 00:31:59.436, Speaker A: In this case, we're actually talking about oracle gas, we're talking about chainlink. So we actually need to, and again, it could mean that your function is way too long, you won't have enough ETH to pay it or whatever. But in our case, we know that this contract needs link token because it's interacting with a chainlink, Oracle. So you can think of Ethereum gas as transaction gas and then link token as oracle gas. And that's kind of how it works. So we want to copy the address by clicking this button here and we're going to send it some link token. And I actually like autopiloted sending a link token.
00:31:59.436 - 00:32:33.712, Speaker A: Sorry if I wasn't explaining what I was doing there. Ten is definitely overkill, but maybe we're going to practice this a number of times next and we're going to confirm and we're going to send it. Metamask will also give us this link to the transaction that we can check out and cool. It looks like it's confirmed. So now if we hit this request, Ethereum, we should not get that gas estimation error because we've now funded it with enough Oracle gas or Chainlink gas to run. So we're going to hit it and perfect. We have enough chain link gas.
00:32:33.712 - 00:33:28.620, Speaker A: We're going to confirm and great, we get another transaction at the bottom. So what it's doing right now is it's posting in a transaction this chain link request, right? And so on chain there's going to be this event, this specific chain link Oracle, this specific chain link Oracle that we define right here is going to be looking for, it's going to be looking for it to be called out and with its job ID. So now off chain there's a chain link oracle that is processing it and it's performing these functions which I'll talk about in a second. It's making this API call, and when it's done in a transaction itself, it's going to call this fulfill function. And that fulfill function will set the Ethereum price to be the price which is going to be the answer to that API call. So we can check to see if it's done. And it is, which is fantastic.
00:33:28.620 - 00:34:03.204, Speaker A: We can see the price has been updated here from zero to 338. You may be wondering why does it look like Ethereum is $33,000? And that's because blockchain doesn't work with decimals. You've probably heard of way and guay. There's no decimals on the Ethereum chain. Everything is in whole numbers. And this is intentional, this is on purpose. But in our build chain like request, we actually multiply it by 100 to remove the decimals.
00:34:03.204 - 00:34:34.732, Speaker A: So the answer is actually $338 and dollar sign. And then we know that again because we have this times adapter to change it. And these are adapters. I'm going to go into this in 1 second. I'm going to grab a couple of these questions and then we'll go into what these adapters are and a little bit more about what's actually going on. How come I can't see this chat? The chat is disabled. There is a Q A feature.
00:34:34.732 - 00:34:56.532, Speaker A: Is there any way answer live. Is there any way to access APIs which require an API key without publicly revealing your API keys? Yes, there is. That's a great question. Those are done with external adapters. I literally just put out a video on it. There is a workshop, I don't remember what day, but there's a workshop on it as well. It's a phenomenal feature.
00:34:56.532 - 00:35:30.480, Speaker A: Definitely check it out. External adapters is your answer. Is there a way to schedule requests so fulfill can be called once per day, for example? Yes, there is actually. It depends on how you want to do it. So if you wanted to do that off chain, actually I think record chain like fulfillment means that you have to call the request, though. I would have to double check. So Phil can be called once per day, for example.
00:35:30.480 - 00:36:24.420, Speaker A: But yeah, so you could have an off chain like cron job basically posting the data on chain. I think you do have to make the request to allow this record chain link fulfillment, but you might actually be able to, you could do something interesting where you could get rid of record chain link fulfillment. You could have this fulfill function and then you could have your chainlink Oracle just constantly having this update and you would just do like a require, I forget the syntax, like require whatever your wallet address is equals chainlink wallet or chain link. Oracle, you could do something like that. Yeah, good question. For example, health data API. Yes, you could use a health data API.
00:36:24.420 - 00:37:10.672, Speaker A: Use whatever API you want. I see eventually there will be something similar to stock markets on DeFi. Would the continuous API calls congest network and cost a lot of gas or is this something that the service agreements addresses? This is an interesting question. So I'm not sure exactly where you're going with. So the more transactions that you make, the more gas it's going to cost. I'm going to assume your question a little bit here. I'm assuming you're talking about maybe updating the price of stock of a stock asset and what we would do there and what you'd want to do there is something similar basically to the price feed.
00:37:10.672 - 00:37:49.596, Speaker A: So you'd have a network of oracles getting the price feeds, getting these updates, relaying it on chain, and that way you're really only having a network getting the price and unlimited people can then access it. Right. So if there's hundreds of thousands of traders out there looking to get an updated price, they're not all each individually in the price. It's almost like a community, like a shared resource. I think that's a really good question. That's actually a phenomenal question. And yeah, the same thing applies for the crypto prices and in the price feed.
00:37:49.596 - 00:38:24.264, Speaker A: So that's a phenomenal question. Thank you for asking. Is there a link faucet for the coven network? There is, absolutely. And if you go to example, walkthrough, if my computer decides to load, acquire testnet link, coven chain link, add your address in here, we can even just do it real quickly because that's how we roll. That's a motorcycle, I think. Cool. Send me 100 test link and whenever this transaction completes, we'll have it.
00:38:24.264 - 00:38:57.844, Speaker A: Good question. How much does it cost per link? Per request? Great question. I'm actually going to jump into the next piece that I wanted to go into with that question. So in our contract here, we defined our fee instance variable, you went private fee. And this funny math stuff basically just means it's 0.1 link, right? And this is going to be in, I guess whatever the link equivalent of way is. I don't think there's a name for it yet, but the link equivalent of way, it's going to be 0.1
00:38:57.844 - 00:39:39.248, Speaker A: link, right. And we can find out how much to pay in Oracle gas based off of the nodes themselves. So the nodes define how much their jobs cost and we can see how much their jobs cost by going into what's called node listing services markets. Link is an example of probably one of the best at the moment. And we can view a whole lot of stuff in here. Let's go view jobs and look for this type of job, which is going to be a get un 256 because that's what we're getting. We're getting a UN 256 and we see a whole bunch of jobs here.
00:39:39.248 - 00:39:58.440, Speaker A: And if we click on a job, we can see the cost of that job right here. So this job would cost 0.1 link on the COVID network. We can compare it to other nodes. It looks like actually most of them are 0.1 link, but the node operator gets to pick how much they cost. Oh, this one's even less.
00:39:58.440 - 00:40:15.310, Speaker A: Buto 1.8 link, eight link. So zero point 49 one inch. So you can see even less. So you can see kind of the different prices here. Oh, excuse me. This is actually main net, we actually would want to do COVID for this.
00:40:15.310 - 00:41:11.020, Speaker A: But yeah, in any case this is where you would get all the information on how to build your decentralized network. So remember when we said we're going to build this API call and we're going to send to this oracle, this is a place where we can figure out which node we want to send it to. So a really easy way to do it is I want a job that gets me un 256. I find the job, I check out the job spec or the task lists or the adapters, these are the adapters that I'm going to want and I'll explain what that is in a second. But then we grab the job ID, we grab the job ID, we grab the oracle address and that's where we would put it into here. So that's how we would do that. What I was talking about right there is the adapters.
00:41:11.020 - 00:42:03.212, Speaker A: So each one of these jobs is going to define a specific set of adapters and this is defining what to do once you get the data. So we're saying once we get the data we want to do this HTTP get request. And the reason that I'm here is this isn't this oracle, but the job is the same. We want to get an HTTP get and we're going to add the parameters of that be this URL, we're going to add the path which is this JSOn part parse adapter to be USD. And the reason we do that is because we only want to get the price. We don't want to get this whole JSON, we only want to get the price, we only want to get this UN 256. So we say okay, the path of this JSON is going to be USD.
00:42:03.212 - 00:42:34.060, Speaker A: So that's how we get that. And then we're going to multiply it by 100. So we're going to move the decimal place over twice. And then in here we have send the chain link request, but we know then we actually do these two other adapters but we don't need to define it because it doesn't take any parameters. This one turns it into a UN 256 to be readable by solidity. And this FTX is the adapter that actually makes the transaction and posts it back on chain. So really good questions.
00:42:34.060 - 00:43:15.304, Speaker A: I'm glad we talked about that and we can even test it out. If this is correct, we can even swap out this job ID and this Oracle ID because it looks like they're the same job. And this is COVID, right? And this is COVID. It even looks like they're the same job. So if we compile we should, oh, and then I have to redeploy. We should still be able to pull the price with this new oracle and this will be example of pulling the price from a different oracle. Right? So we deployed a new one.
00:43:15.304 - 00:43:48.352, Speaker A: Now the price is zero. We again have to fund this. I'm going to send it to link, just send it to link just in case we want to play around with it. Whenever that deploys, we'll get there. Can you show the chain link Oracle code? Kind of. And by kind of I mean yes, it's open source. I don't know if we want to.
00:43:48.352 - 00:44:21.564, Speaker A: So now I'm going to request and then hopefully the same thing. And this will be an example of making an API call through a different chain link oracle. And this is how you're going to make it decentralized. You're going to choose your network here. And again for those common things like pretty much anything on the price feeds, you're going to want to use the price feeds. It's a much easier, much simpler way to build these networks of the common data. But again, you are absolutely welcome to do however you want.
00:44:21.564 - 00:44:59.336, Speaker A: Chainlink is an infrastructure to allow you to be as modular as possible. So it looks like that's confirmed. We're still waiting on the oracle to post back, it looks like. So whenever that's done, this will be updated and I'll answer a question while we wait for it to do that. So chain link GitHub, if you want to see all the chain link code, it's all open source. That's why I kind of said like, yeah, we can, because there's a lot here. There's a lot.
00:44:59.336 - 00:45:26.876, Speaker A: But yeah, highly recommend you guys check it out. If you're interested in the infrastructure side, it's open source, you can make issues, you can make a PR, you can contribute, you can do whatever you want. It's fantastic. So I'm not actually getting the price updated here. So maybe this was a bad. Maybe this wasn't the same job. I'd be curious to check that out in a minute.
00:45:26.876 - 00:46:07.160, Speaker A: Yeah, it looks like that probably wasn't the job, so. My mistake, guys. I'd have to recheck. I kind of just glanced through it. I didn't quite check to verify that it was the same job. It might have been different, but in any case, on that contract address, I'm not sure what that question means. Why do you need link to pay for Chainlink gas? And why can't ETH be used to pay instead? So this is actually a really good question and a really interesting question, and something that's really important to keep in mind is that Chainlink is blockchain agnostic, right? So it's not just on Ethereum.
00:46:07.160 - 00:47:09.836, Speaker A: Right. So the way that the chainlink technology works is looking for link token, and this makes it so that you don't have to rely on a specific blockchain. And the link token is actually required at the protocol call level, and there's a technical reason behind it as well. Typical erc token 20s don't allow for transfer and execution of a smart contract in a single transaction, while an ERC 677 does with transfer and call. So when a request is made, the payload of that request is actually sent along with the token transfer. I'm probably getting too much in the weeds here, but this is so that the node operators know exactly how much they're going to be paid for that request and can respond immediately knowing that they're going to be paid for their work. It also separates the security of the chainlink network from market volatility of some other asset unrelated to the network.
00:47:09.836 - 00:47:48.220, Speaker A: If it were Ethereum, for example, then the security of the network could be reduced if ETH's market volatility stopped working in our favor, basically. And that also wouldn't work very well, like I said, because this is a blockchain agnostic environment where node operators need to know the prices of the same amount of work that they do on every supported chain. So you want a single, easily reliable currency that they're all going to use. So it separates the security of the network. That's a really good question. But there's also that technical reason. Without it, you lose that transfer and call functionality.
00:47:48.220 - 00:48:30.750, Speaker A: That's a good question. Can a bad actor call fulfill to change the contract value outside the article? No, this record chain link fulfillment basically says only the responding Oracle can call fulfill. Good question. That's a really good question. Wouldn't an oracle that charges less link than the gas cost to send a transaction to call fulfill lose? Yes, they would lose money. So they're highly incentivized not to do that. How long to get added to a node listing service? Do you need reputation or to stick around? What does it take to set up a node? I have some videos on that as well.
00:48:30.750 - 00:48:55.136, Speaker A: The documentation on that is great too. I don't think I'm signed in here. You can actually create account on something like market link and post all your information about your nodes. It doesn't require anything. So this again is just a testament to the robustness of the chainlink system. Anybody can join, anybody can spin up a node. You can spin up a node.
00:48:55.136 - 00:49:44.864, Speaker A: Anybody can start providing data. Something important to note about this is that it's not the same as just mining chainlink, right? You're not mining chainlink, you're providing an oracle service to port off chain data onto the blockchain. So it's not the same as just spinning up a node and start mining. So it is really a digital can. You can get listed on a node listing service right now and market link is a great place. You can also do reputation. Link is another really fantastic node listing service that you can verifiably post information about your node including, and this is for Mainnet, how much link it's earned.
00:49:44.864 - 00:50:26.556, Speaker A: You can check out other blockchains as well as loading. There's a lot of data to load from the blockchain. How much link you've earned the response ratio of those nodes. And this is actually really important because you can see the reputation of other oracles, of other nodes. And this is going to become more and more important, especially when you're talking about bad actors because you can see on these reputation services. And I'm excited for when reputation link comes out with this, you can see when Oracles posted bad data or posted malicious data, and you can quickly decide, okay, I'm never going to use that Oracle. And so this again is just going more into the security of the network.
00:50:26.556 - 00:51:23.364, Speaker A: These oracles, not only are they secure because your networks are decentralized, but these oracles are highly incentivized to give the correct data, because if they don't, that is posted on chain, they are now permanently and immutably on chain for being a malicious actor. So almost think of it as like a credit score, but for chain link oracles we should come up with a cool name like maybe data reliability score or something like that. So really good question, what does it take to set up a node? Go check the chain link docs. I have a couple of videos out as well. You can get one spun up in literally ten minutes, so it's really easy getting a full production one is a couple more steps. You got to know a little bit about DevOps and it's running a docker image, so you want to make sure you keep it healthy at all times. Like I said, I have a couple of videos out on this as well.
00:51:23.364 - 00:52:32.570, Speaker A: Where do you find the arguments required in the request? I see times get, where do those come from? So those are the adapters and that's a really good question. So when you go to so in the chain link docs, the adapters explains how to work with all the different requests here. So we saw like times, the times right here is the multiply adapter and we saw where do we see that? And again, this isn't the right job because I was wrong, but we can see the different adapters here, we can see that this job takes an HTP get and then we know HTP get, boom. Where is that parameters? Oh, it's down here, sorry, HTP get, it looks like this, right? So the parameters are going to be this get right here. You can also do rec, add query params. To add the query params after you can also just add it right in the URL. That's what we did.
00:52:32.570 - 00:53:24.212, Speaker A: So this is where you find the parameters, whatever adapter the node is using. You can look into the docs here to see what it looks like, good question. Is there a contract that determines the cheapest provider so we don't have to hard code the providerjobids? No, that might be an interesting project right there. Cheapest, again, cheapest isn't going to be the best indicator though, because you could have a really cheap provider that's going to send malicious data. So you definitely don't want to just look for the cheapest provider yet. Now that the wheels are turning, that's not a contract that I would really want to use. Maybe you could do some cool machine learning to find the cheapest providers that are also the most reliable.
00:53:24.212 - 00:53:56.948, Speaker A: Now that would be something that's really interesting, but just the cheapest provider is a recipe for disaster. I don't know of a contract like that, but that sounds really cool. So you don't have to hard code the provider job iDs. You could also just have a constantly updating list or a smart contract that updates a list. That would be a really cool project actually for something like a hackathon. I wish there was one happening. Oh wait, that sounds like a really cool project.
00:53:56.948 - 00:54:36.380, Speaker A: I would love to see something like that. I don't know of one. There might be something out like there already. When you fund the deployed contract, does that mean anyone using that contract can make calls without funding it? Again, great question. In this contract I don't have the modifier here, but actually do I even have it here? I probably have it here. This is kind of a more thorough example. You can find this, this is a more thorough contract with a lot more functions and a lot more interesting tidbits.
00:54:36.380 - 00:55:17.352, Speaker A: You can find this in the example walkthrough, which again is going to be right here. Deploy your first contract. If you hit this remix button, this will deploy this more involved smart contract. And you can see here it has this only owner function. And so this is kind of like a solidity function in general, excuse me, a solidity practice in general. It's what's known as a modifier and we're actually importing it through our ownable sol here. It modifies the function so that only the owner of this smart contract, only the person who deployed it, can request this update.
00:55:17.352 - 00:55:54.350, Speaker A: And again, this record fulfillment, wherever that is, record chainlink fulfillment means only the chainlink node can fulfill it. So if you add these parameters, you can make it so that only you and only the chainlink oracle you're working with can modify your smart contract. Great question. A couple of minutes here. This works out really well. You just showed how to get the ETH price from one oracle. How would you get the median price as agreed on my end oracles, like the screenshot you showed at the beginning, you get the price of from one oracle n times.
00:55:54.350 - 00:56:28.480, Speaker A: That's really it. It's a really good question. So what you would do is you would find your oracles that you want. Oh, it looks like, oh, this is cool. Oh, you guys are getting to see it at a really cool time. So it actually just heartbeat just hit. So all these oracles are going and get pulling APIs and we can see them having dotted lines right here because it's waiting on a response from each oracle.
00:56:28.480 - 00:57:11.510, Speaker A: So as each Oracle responds we can actually see them real time, respond with their answers and have their answers update. And once we get 21, we're going to see this update here. So this is actually really cool. And again, it takes a minute for the transaction to request them to finish deploying and then once it's finished deploying then they got to pick it up, then they got to go make the API call and then they got to post it back in that transaction back on chain. So this is actually really cool. I'm kind of curious to see it finish deploying here. But the answer to your question is, yeah, you would find the Oracle providers that you want in a node listing service like market link.
00:57:11.510 - 00:57:53.856, Speaker A: You would have and you would pull the API for each one of those. So really good question. What are your thoughts opinions on more oracle providers? I don't deal with that and we have our first ones showing up here. What if the oracle calls an API but the API returns a 500 and the fillment method never gets called? Does the user get their link back or does. And we can see even more showing up, which is really cool. We can kind of see, I'm going to stop commenting on it. It's really interesting to me.
00:57:53.856 - 00:58:56.096, Speaker A: The Oracle returns 500 and the fill method never gets called. Does the user get their link back? Does the node operator get penalized? This is even more interesting. It looks like there was a price deviation and they had to call it again. Does users get their link back? Does the node operator get penalized? It's the same thing with transactions. Once it's out there, it's out there. So this is another reason where external adapters are going to be really important. So you're going to want to build an external adapter that handles these 500 handles, these 400 handles, these errors so that you don't have to deal with it so you can have all that custom functionality be in the external adapter and do the error handling off chain, because if you have to do the error handling on chain, you're going to have to spend a lot of gas.
00:58:56.096 - 00:59:10.410, Speaker A: Does the node operator get penalized? I mean, absolutely right. We just saw that. Interesting. So ETH is taken off right now. It just triggered another price update. That's really cool. Yeah.
00:59:10.410 - 01:00:07.020, Speaker A: So whenever your node doesn't post, we can see on reputation link, we see response ratio here if you're a node and we can even go to. I don't want to call any oracles out though, if you're going to be not responding, if you're going to be not showing up for work when you fulfill these jobs, you can think of them as the same thing as a job. If you're going to not show up for work, guess what, you're going to get fired. So you don't want to not respond, you don't want to do 500 errors because it's going to look really bad. The node operator obviously has some control here. They can refuse jobs if they know someone's just trying to get their reputation lower. But yeah, absolutely.
01:00:07.020 - 01:00:38.420, Speaker A: So your reputation is everything. So really good question here. Smiley face, smiley face. Back to you, Tom. How would you deal with error handling in case a chainlink node fails to execute a request? That's kind of the same question. That's a really good question. When you make a robust system, I would pretty much recommend you always wrap your calls in an external adapter because that's where you can do all this error handling.
01:00:38.420 - 01:01:13.152, Speaker A: That's where you can make it robust. You can add retries, you can add any customizable functionality you want, and it's all off chain. You can try to do some of that on chain, but it's going to cost a lot of gas. Right? Because everything you do on chain is gas. So you really want to offload that into an external adapter, into an off chain functionality. Again, literally today, put out a video on how to do that. So if you want literally a step by step on me taking you through an external adapter with API key authentication, definitely check out that video.
01:01:13.152 - 01:01:45.450, Speaker A: We just put a blog out on it too. The documentations are there as well. But yeah, building an external adapter is really going to be how it's going to be super robust because otherwise you're never going to be fully sure if there was an issue or not because the chain link node wouldn't respond and wouldn't put the data back on chain. So really good questions. It looks like we're at 05:00 right now. I'm happy to stay on for another couple of minutes if anybody has any questions. But it looks like there are no open questions.
01:01:45.450 - 01:02:17.910, Speaker A: I'm actually going to grab a quick drink and then go back on discord if you guys want to chat a little bit. I got a couple of minutes here today, but thank you so much for joining. It sounds like you guys are really getting it. Honestly, those questions were really good. I hope this was really helpful and I hope you learned lot here. So really excited to see what you build for the chainlink hackathon. It sounds like you have a much better understanding of oracles and how Chainlink works.
01:02:17.910 - 01:02:20.850, Speaker A: So thank you guys so much for attending and I'll talk to you soon.
