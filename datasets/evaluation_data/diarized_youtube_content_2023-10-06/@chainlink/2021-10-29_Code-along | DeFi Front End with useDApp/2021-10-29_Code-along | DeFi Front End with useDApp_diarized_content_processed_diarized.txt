00:01:33.640 - 00:02:03.030, Speaker A: Hello. Hello. Welcome everybody to Friday, the end of the first week of the Chainlink hackathon. I hope everybody is doing well. I hope everybody is learning a ton. I've been seeing a ton of chat in the discord with people, you know, thinking about ideas, jumping into workshops, learning a lot of really fantastic pieces of smart contract and hybrid smart contract development. It's been an awesome week so far, right? We've learned a ton and the ride does not quite stop yet.
00:02:03.030 - 00:02:37.840, Speaker A: Today we're going to be doing a lot of full stack work and we're going to be starting with full stack of a decentralized finance a defi application which is going to be an absolute blast. Yes. Good morning friends. Looking in the comments here, good morning, friends. Yeah, this is going to be a ton of fun today and it's going to really give you the skills to make your projects pop. Right? Because having all of these skills to build these smart contracts is fantastic. But if nobody can engage with your project, nobody can engage with your protocol.
00:02:37.840 - 00:03:01.364, Speaker A: It makes it really hard for non engineers to engage in it and to use it. So building a front end is a really important piece that can be the difference between having an amazing project and know just the back end of a project. So, really excited for this. Patrick needs coffee. I feel great actually. No, I feel great, but cool. So let's jump in.
00:03:01.364 - 00:03:33.898, Speaker A: I know we're just 1 minute in, but we have a ton to go over. So we're going to jump in because we have a ton of things to talk about. So let's look at what we're going to be doing. I should probably show my screen here. Sorry, give me one. Apologies. It's probably important for me to share my screen if people want to see what I'm doing.
00:03:33.898 - 00:04:04.020, Speaker A: That's probably a good thing. What do you all think? You think that's a good idea? I think that's a good idea. All right, let's try this again. All right, cool. So here's what we're going to be doing. I'm dropping a link to this in the chat in the comments here if you want to see basically what we're going to be doing here. It's part of the full stack free codecamp course which has, oh my goodness, over half a million views right now, which is awesome.
00:04:04.020 - 00:04:31.354, Speaker A: This is the application that we're going to be building. That's the timestamp if you want to watch us do the smart contracts and everything. And here's the code of what we're going to be using. I'm going to drop this into the comments as well. And then of course, remember after this workshop, please remember to fill out this feedback form. I'll post it again at the end, but please remember to fill out this feedback form. Give us some feedback.
00:04:31.354 - 00:05:13.660, Speaker A: Let us know what you all thought, what you all think about this workshop. So with that being said, it says, my wifi is not that great. Well, I guess hopefully it stays fine. So this is the code repository we're going to be working with, and this is one of the frameworks we're going to be using, this usedep framework. So it's built by this team called ethworks, and they built a lot of really cool tools. If you're familiar with waffle, this is the project behind them. So they're also just helping with more of the Javascript typescript world.
00:05:13.660 - 00:06:02.506, Speaker A: So let's go ahead. Let me actually show you what this is going to look like when it's done. And if you came to the DeFi coding project or the Defi coding workshop earlier this week, we did begin to make the contracts for this. These are that staking application, this token farm thing here. And don't worry, I'm going to explain what's going on. And this was that staking application where we could do we call like stake tokens, right, where we sent tokens to our application and the rest of this code is just fleshed out some more. Okay, so we're not going to go over the rest of the solidity parts here.
00:06:02.506 - 00:06:36.994, Speaker A: We're just going to do the front end. But again, if you want to see us walk through the front end, definitely check out that free cookcamp video at that last lesson, that bonus lesson, timestamp. And we'll do the contracts for this Defi application. But here's what it's going to look like when we actually finish it. So we're going to do yarn start. Here's what we're going to be building today, and we're going to have to figure out how to do it in an hour and a half on freecodecamp. It was done in like 3 hours or something like that.
00:06:36.994 - 00:07:00.800, Speaker A: But here's what it's going to be looking like. It's going to say please connect your metamask account. We're going to go ahead and connect here. We're going to have to add our password, which I think mine's like password or something. And here's what it's going to look like now. So we're going to have this thing at the top saying, hey, here's your wallet, here are the tokens that you have. These are like pretend Erc twenty s.
00:07:00.800 - 00:07:41.658, Speaker A: And then we can stake or deposit our tokens into this contract, right? So this is going to be something like ave, right, where you need to deposit collateral to doing your borrowing and lending or something like sushi swap to do margin trading or something like that. So what we can do is we can stake one weth. We're going to go ahead and confirm, allow localhost to spend your weth. Great, can absolutely do that. We'll get this little spinning thing when it's loading, right. And once it's done, we'll say, hey, token transfer approved. Now approve the second transfer to initiate stake and transfer as we'll go ahead and confirm that as well.
00:07:41.658 - 00:08:19.960, Speaker A: Oh, and by the way, we are on the coven testnet with our metamask and everything, and we'll get another little spinning thing. And now it says tokens staked successfully. Now if we scroll down to the section down here, it now says we have one staked weth. There's no faU, no daP, one staked weth. And right now all we can do is unstake our token. But of course, you could code this to do really anything that you wanted, right? It could be deposit into some borrowing lending protocol, do some weird collateral stuff, build your own defi protocol. Obviously that's what the point of this is.
00:08:19.960 - 00:08:46.334, Speaker A: But then we can go ahead and unstake. We'll hit confirm there. And once again, this little dial will show up as we unstake, as this transaction goes through and those block confirmations come out. And once it's done, tokens unstaked successfully. You can see our new weth balance is zero. And your unstaked weth balance bumps up here, right? And that does indeed reflect what we have in our wallet here. 3.9
00:08:46.334 - 00:09:17.938, Speaker A: west. So this is what we're building and it's going to be an absolute blast here. There are about, looks like almost 30 people here right now. Please feel free to make this very collaborative. I will be checking the comments, I will be checking the questions. So please feel free to ask a million questions because we have a lot to go over and it's going to be really exciting. So that being said, let's jump into actually coding this thing ourselves.
00:09:17.938 - 00:09:36.830, Speaker A: So the first thing I am going to do though is I am going to get clone this. Okay? So the reason I'm going to get clone this is because again, this already has our contracts all done. But then immediately, we're going to delete this front end folder. Okay. And that's what we're going to be working on. So I'm going to grab this again. I'll post it in the chat.
00:09:36.830 - 00:10:05.874, Speaker A: And we're just going to start with this. So we're going to just do git clone and that repo. And this is going to be our starting point. I'm going to do move star don't work. I just break it. Oh, no, I just put them. Oh, God.
00:10:05.874 - 00:10:38.090, Speaker A: Whoops. Okay, well, I just put them in my demos folder. Whoops. Directory. It doesn't like what I'm doing. Oh, I have nothing in here. Oh, it's because I moved it.
00:10:38.090 - 00:10:56.668, Speaker A: Okay, well, I'm going to have to go back and. Sorry. Removed. Good morning. I'm going to have to go back and my demos folder is now ruined. Let's try this again. I'll fix it later.
00:10:56.668 - 00:11:32.600, Speaker A: All right, so now let's CD. I'm going to move it down. Move star down. There we go. Okay. Oh, no, it. All right, there we go.
00:11:32.600 - 00:11:54.900, Speaker A: Better. Sorry. So all I did was move everything down so that it could be kind of in our main folder over here. Okay, cool. Again, we have our contracts in here. Cool. Yay.
00:11:54.900 - 00:12:24.176, Speaker A: But what we're going to do is we're going to delete the front end. So we're going to do remove Rf front end and this is what we're going to do again, this is what we're going to be building. So you're at this point in your project, you've created your contracts. You're feeling good about yourself. Now you want to build the front end. How do we do that? How do we jump into that? That's exactly what we're going to be doing. Just a quick note, too, actually, one more note before we jump in.
00:12:24.176 - 00:13:04.184, Speaker A: So a lot of projects, what they'll do is they'll have the contracts in a separate repository. Like here's like curve, for example. This is all their contracts, but they'll have a front end in a different repository. I can't find an example here, I guess, but it's pretty common practice to separate the two. The reason we're going to just do the two of them together is because it'll just make it a little easier for us developing here. But for now, we're just going to be coding our front end in the exact same repo. So to get started, you do need a couple of packages.
00:13:04.184 - 00:13:43.290, Speaker A: I know a couple of people are asking, hey, what packages do I need? So you do need node js, so if you do node version, you get the node version there. You do obviously need git version which we used. Get the clone and we'll install some packages as we go along. I'm going to take a couple of quick questions here. Anyone have any tips for somebody trying to learn? You came to the right place. Follow along with these videos. Yes, 16 hours free code camp video is awesome.
00:13:43.290 - 00:14:29.064, Speaker A: Post a link in the chat here. All right, cool, moving on. So let's get started. So we're going to do to get started we're going to do mpx create react app ss template typescript the reason we're using template please specify the product directory. Oops. Create react app front end template typescript so create react app is a way to create a front end with pretty much all the react stuff built in. So for those unfamiliar, react is a front end JavaScript framework, right.
00:14:29.064 - 00:15:04.464, Speaker A: And it's going to give us a lot of really easy components for building our front ends and putting this user interface on top of our smart contracts. Now, the reason we're doing template typescript, it's because typescript is a thousand times better than javascript. That's really it. So typescript catches a lot of bugs in javascript, and from working with it, a lot of people here have heard me complain about how much I don't like JavaScript. Typescript is much better in my personal opinion. Right. If you want to do javascript, you can absolutely do javascript.
00:15:04.464 - 00:15:43.148, Speaker A: All the code that we're going to follow along with here is pretty much going to be compatible with JavaScript as well. So you're going to be good there too. Can we submit two different repos for the hackathon, one aside for the front end? Typically what a lot of projects will do is they'll submit their contracts folder and then we can go to their organization and we can see the front end application that they have as well. Can I use next JS instead of react JS? Yes. Is there a reason there's so much focus on react versus angular? I wondered that too. I think part of it is because react is a little easier to just jump into and go. I know angular is only typescript.
00:15:43.148 - 00:16:04.250, Speaker A: Actually, I'm actually not sure. This just seems to be what the community is adopting. Yeah, type react, it's easy to use just the component. All right, cool. So let's do it. So now that we have that right, we have this new folder called front end and it's got all this stuff in it. So let's go to front end and what we can do.
00:16:04.250 - 00:17:00.216, Speaker A: Sorry, you need yarn too. Yarn is a package manager version. In the readme of this, it'll have everything that you need. It'll tell you everything that you need. Node js npm we use yarn, but NPM works great too. In any case, we have this front end folder, we have all this stuff in it, right? And what we can do if we do yarn start, we'll start our project on our local host and it'll look like this, right? This is kind of the default react app application here. And what we can do then is we can jump into our folders here and start editing some stuff.
00:17:00.216 - 00:17:35.350, Speaker A: So I know that a lot of this is in app TSX. And in fact, if I were to change this from learn react to like hello world, we now say hello world. Or if I want to just delete all this, all this stuff and say hi Chainlink community. Hi chain link community. Yay. And that's how we're going to get started. Somebody said command start not found.
00:17:35.350 - 00:18:07.810, Speaker A: You might want to make a stack overflow issue on that, or you might want to CD into the front end first. Yeah, I would start asking questions in the discord on stack overflow to start resolving that, but cool. So we have our front end running and we're able to make some changes in here. Now let me just do a walkthrough of what's in this front end folder. What does this react give us to get started? So node modules is just the packages. We're pretty much going to stay out of there. Public.
00:18:07.810 - 00:18:35.316, Speaker A: We're pretty much going to stay out of here. It's got our HTML, it's got some favicons, got some images manifest and robots, which tells scrapers in the world what a project looks like. But we're going to spend most of our time in source. Source is really where we're going to live. App CSS is styling for our app. App test TSX. This is for testing.
00:18:35.316 - 00:19:04.610, Speaker A: We're not going to do any front end testing, but for those familiar, you absolutely should app TSX. We're going to live in here for a while. Index CSS, obviously styling again, index TSX. We're going to work in here a little bit too. This is what kicks off the app. We're going to ignore the logo and ignore the rest of this. Right? So mostly what we're working in is going to be app and it's mostly just app.
00:19:04.610 - 00:19:19.236, Speaker A: Great. So this is what we have so far. We've got a whole lot of nothing. We have high chain the community. Great. Okay. A couple of people are running that.
00:19:19.236 - 00:19:33.770, Speaker A: Okay, I was in the wrong directory. Okay, nice. Someone got this error. Eric couldn't find a package JsON file. Remember to see to the front end. So it looks like Martin was able to see to the front end and that was the solution there. So nice work.
00:19:33.770 - 00:19:59.216, Speaker A: But now we have this high chain link community. That's not what we want. We want a button to tell us to connect to our metamask. We want some staking stuff here. We want to do all this stuff, right? So let's go ahead. Let's get working on that. Now, like I said, we're going to be working with this usedap protocol, which is really helpful for doing all this stuff.
00:19:59.216 - 00:20:36.130, Speaker A: And first we're going to add it, right? And let me drop the docs in the chat as well. First thing we're going to do is we're going to add it with Yarnad at usedapp core so that we can use it in our projects. So I'm going to create a new terminal here and paste that in. So we still have our front end running on this terminal, but we have a new terminal for us to add stuff and whatever over here. So we just added used app, which is great. So now we can use used app. Is this too big? Is this okay if I make it like this? If this is too small, let me know.
00:20:36.130 - 00:21:20.856, Speaker A: But in the docs after we install, we can see a little example of what a sample is going to look like. Sample code using used up is going to look like. So what they do is they wrap their project in this DAp provider, they wrap it in this DaP provider, and this DaP provider is going to help us connect to metamask. It's going to help us do all this stuff, right? So we're going to kind of follow along with the example here in our app, TSX. So right here, we're going to do the exact same thing. We're going to wrap the whole app in an adapt provider here. So first, actually, we're going to import that DaP provider.
00:21:20.856 - 00:22:06.360, Speaker A: So we're going to do import DaP provider from at useapcore and then we're going to wrap our app in it. So we're going to say deprovider and we're going to give it a config. So they have config equals config and they're using this config up here. We're just going to type ours in line here. But this config is going to tell the app which chains it works on, right? That way when we switch chains, it'll know, hey, this is good, or this is bad. It'll know which chains this actually works with. So we're going to say Deb provider config equals, and we're going to put our syntax in here.
00:22:06.360 - 00:22:32.020, Speaker A: I'm just going to do this because it's going to bother me otherwise. And then we'll tell it. The first thing we'll do is we'll tell it what supported chains we want. And then for this demo, we're just going to do chainid Covid, which is going to be 42. So we could do chain id coven or 42. If we do this, though, we of course have to do. We also have to import chain id from usedapcore.
00:22:32.020 - 00:23:13.950, Speaker A: And then at the end, we're just going to close that provider chains. So now we have, now we have some supported chains. If we save, we go back to the front end, it's going to do absolutely nothing, right? It's just going to say, hey, cool, good job. You're doing great. But this is our starting point. Now that we have this DAP provider, we can go ahead and start building things. We start building all of our wonderful project here.
00:23:13.950 - 00:23:44.520, Speaker A: So now we have DAP provider. What. What I typically like to do is we're going to add a header in here. And so actually, I'm going to go ahead and just delete all this. Delete all this. Going to do div high. Div high.
00:23:44.520 - 00:24:08.484, Speaker A: Oops, div high. And now refresh it just to say div high. High up in the top left, which is great. Perfect. So what we're going to do is we're going to add a header, right? Because in our example, if we scroll down, we have this button, right. Connecting to Metamask is going to be one of the first things our users do. So let's go ahead and build that first.
00:24:08.484 - 00:24:35.688, Speaker A: Right. So in our app here, what we're going to do is we're going to create a component that we're going to call header. And I'm actually even going to stick it in right here. I'm going to comment it out for now. We're going to create a component header. We're going to import it into our app, and that's what we're going to do. So I'm going to create a new folder in here called components.
00:24:35.688 - 00:25:15.986, Speaker A: Components. In the repo, it's being pulled in from features, but features, components, whatever. We're going to create this new file called header TSX. Sorry, 1 second it. Cool. All right, great. A couple of questions in here.
00:25:15.986 - 00:25:47.306, Speaker A: Can you tell us which vs extension do you use to automatically prefy brackets and so on? Yes, I think it's just called brackets. This one bracket pair colorizer. So I use that. There's a couple of other ones I use. The rest of the community doesn't use the same ones I use. I use some ones that I like, but that's that one. In terms of architecture, can I say that we have front end connecting directly to blockchain? Yes, exactly.
00:25:47.306 - 00:26:04.686, Speaker A: That's exactly what we're doing. Tripod for vs code. Yeah, pretty is great. I don't know if there's prettier for Adam. I don't, but I'm sure there is. But anyway, so here's where we are. So we want to make a button on our front end, right? We want to make a little connect to metamask thing in here.
00:26:04.686 - 00:27:03.106, Speaker A: So let's go ahead and start doing that. The way we're going to do that is we're going to create an object here called header and we're going to do export const header. And this is going to be equal to, this is going to be our component that we're going to use in app TSX and we're going to import it here so our project can connect to metamask. Now in this what we can do is we can use usedef to connect to our, to create like an activate browser wallet thing. So we're going to do const count, activate browse. Actually, you know what, let's import first. We're going to do import use ethers from at usedep core and this is in their docs as well if you want to see.
00:27:03.106 - 00:28:01.194, Speaker A: But this use ethers hook has account, activate Brow wallet and then deactivate. Doesn't really work. So I'm going to skip that one equals use ethers. And it's going to be these functions that actually connect our wallet and stuff. Just to test for now, we're going to return a little div component div hello from header just to show you all what this basically looks like. And in here, excuse me, sorry, in here we're going to import that header by import. Sorry about that.
00:28:01.194 - 00:28:30.420, Speaker A: Import header from components. Components header. Mad about this header is declared but is never read. Okay, cool. And then we're just going to add it to our app here like so. Why are you mad at me now? Cannot find module components header. Why can't you find that from.
00:28:30.420 - 00:29:09.240, Speaker A: Oh, right. Because I need to put this in src. Sorry. Now components. Here we go. Header. Now if we look at our I refreshed the streamyard instead.
00:29:09.240 - 00:29:28.350, Speaker A: Whoopsies. Yeah. Now if we get in there like that, we refresh the front end module. Can't found compose header and user. Okay, let's re, my goodness. No, I do not want to enable dictation. Let's rerun yarn start.
00:29:28.350 - 00:29:43.822, Speaker A: Sorry. Try again. We've done like. All right. Hello from header. Just to show you all like here's how it basically grabs it. So now header is in here we have hello from header.
00:29:43.822 - 00:30:02.022, Speaker A: Awesome. All right, cool. Now what do we want to do? So we have hello from header. Let's go ahead. Let's create that button. Let's create that button, basically. So what we're going to do is we're going to have this div and we're going to figure out if we're connected or not.
00:30:02.022 - 00:30:28.000, Speaker A: If we're not connected. So let's even type this. So we'll say figure out if we are connected or not. If not connected, show a connect button. Otherwise just show the address or something. Right. So that's what we're going to be doing here.
00:30:28.000 - 00:31:11.994, Speaker A: So in our return statement what we're going to do is we're going to check to see if we're connected. So first we need to get a variable called is connected. So we're going to say const is connected. We're going to say this equals to account does not equal, equal, undefined. So if our account is defined, this is going to, I guess it's a little confusing to explain. If our account doesn't equal, undefined, this is going to be true. Right? So we want to see, hey, are we undefined? Right? Do we have some connection here? Do we have an account that's connected? So in here we're going to say is connected.
00:31:11.994 - 00:32:02.794, Speaker A: We're going to use this question mark, which is a tertiary operator. We're going to say if we are connected, what do we want to do? If we are connected, let's create a button. And if we were using like vanilla stuff here, we would just do button like this. We're going to be actually using another package called material Ternary. Sorry? Yeah, I said tertiary like a fool. We're going to be using this thing called material Ui, which is a react library to give us a lot of stuff. And I'll put the link to this in the chat.
00:32:02.794 - 00:32:51.280, Speaker A: Now we're going to add this as well. It tells us do NPM install, which we're not going to do, though. We're going to do yarn, add, delete all this stuff. It's a great way to format and make our buttons look nice and make all our stuff look nice. So we're going to be using that instead of kind of the raw button here. And once we have it installed, we can then import in from at material mi material. In any case, back down here, we're going to create this button.
00:32:51.280 - 00:33:51.760, Speaker A: And like I said, if it's connected, we're just going to say in here, connected. I know in the code sample I gave you, it does a whole bunch more stuff, but for this, we're just going to say connected. Otherwise, we're going to create a button going to say connect. And so if we try this now, now if we look at our front end, it's, it's loading, it's mad. Add camerasolve module not found. Oh, that's right, because this is a different version. Well, you know, let's just go to the material idocs button.
00:33:51.760 - 00:34:38.554, Speaker A: Yeah, sorry, I forgot that the code that I'm using is actually using an outdated version of the library, which is no bueno. Okay. At Materialui. I should just be able to do that though, right? Why does it matter me? Do I just need to add this? I think we probably just need to add this. Add that. Let's just, let's add this too. Yarn.
00:34:38.554 - 00:34:59.720, Speaker A: Add that. Just give it all the packages it wants. You can have them all kind of resolved. I just added that. Let's try again. Let. It's mad at us because I didn't install all of its emotion and all of its style, I guess.
00:34:59.720 - 00:35:20.206, Speaker A: All right, cool. So now we see this button that says connected, which it is, right. If I look at my metamask beforehand, I connected it. If you're doing this for the first time, it'll say connect, which is perfect. Now, if we click this button, it does a whole lot of nothing. Zilch. So we should change that.
00:35:20.206 - 00:35:50.774, Speaker A: So in our button here, we're going to add a function, right? We're going to do on click equals a function. And we're going to call activate browser wallet. Boom. So now if we go back, I broke it again because I can't spell. Let's try this. Activate browser wallet. Now if we go here.
00:35:50.774 - 00:36:15.018, Speaker A: Now if I hit connect, what will happen? Metamask pops up and activates our browser wallet. We'll go ahead and connect. And now that we're connected, it says connected. Oh, my goodness. Perfect. Now let's just quickly add a little bit of style in here. Let's do like color equals primary variant.
00:36:15.018 - 00:36:31.006, Speaker A: Variant equals contained. Down here, we'll do the same thing. Variant equals contained. Unclick. Okay, perfect. And now if we go back. Yay.
00:36:31.006 - 00:36:47.154, Speaker A: We've got a little connected here. Again, if I disconnect, disconnect, it goes back and we'll reconnect. Metamask pops up. Perfect. This is exactly what we want. Brownista. Yeah, I'm good at spelling.
00:36:47.154 - 00:36:59.754, Speaker A: So. Cool. So this is basically all we need for the header. Now we can add a whole bunch more styling. I'm going to skip a lot of the styling for now. If we have time at the end, we'll go back and add some styling. Okay, cool.
00:36:59.754 - 00:37:14.834, Speaker A: So now we have a way to actually connect with our front end, right? Users can connect to our front end. That means that they can start hitting our functions and doing stuff that we want them to do. So this is perfect. This is exactly what we want. Awesome. So let's go back to our app, TSX. Great.
00:37:14.834 - 00:37:47.210, Speaker A: We have a header, we have a way for people to connect. Next, what we're going to do is we're going to create our main component. And in this component, this is where we're going to define pretty much all of the other stuff. Right. So you can kind of break this down into as many or as few components as you like. This is just the way that we kind of like to break it down here. So in my components section, I'm going to create a new file called main TSX.
00:37:47.210 - 00:38:27.770, Speaker A: And in this main bit is where we're going to add a lot more stuff. Right. So on our front end right now we have this way to connect. Now we want to start figuring out how to now we want to figure out to give them the stake button, give them the unstake button, show their balances and everything. So let's do that. So in our main, let's just go ahead and start the same way we started the headed, we'll do export const, main equals this function here. And this should be a equals, it's going to be this function here.
00:38:27.770 - 00:39:20.454, Speaker A: And this is where we're going to want to do some stuff. So let's start thinking first about what we want this to show. So we're going to want to show, at the top, show our balances and a stake button. Then at the bottom show our staked balances and an unstake button. Perfect. Well, now that we know that we can start adding them and then back in app TSX. We can even add this in now we'll import main from components.
00:39:20.454 - 00:39:41.780, Speaker A: Main. It's mad at me. Main cannot be. And then we'll have this return, return spell today. What's up with that? Div hi from Maine. We'll go back high from Maine. Perfect.
00:39:41.780 - 00:40:00.966, Speaker A: Awesome. We're with me so far. Excellent. I hope so. No more brown anista. So we have this high for main here, and we want these two things. Now we're going to double up.
00:40:00.966 - 00:40:48.214, Speaker A: Basically, we're going to make this piece a component and then this piece a separate component. Crazy, right? So in our main, we're even going to import something. So we're going to go ahead and create a new folder called your wallet. So we're going to create a new folder called your wallet. And in here, this is where we're going to define some stuff associated with our wallet. So in here, we're going to create a folder, a component called your wallet, TSX. And we're going to import this, your wallet, into our main so we can do these two things right.
00:40:48.214 - 00:41:11.280, Speaker A: So we're kind of nesting our components a little bit here, which is fun. And I ran into a mistake here, your wallet, because it cannot be compiled well, because it's blank. That makes a lot of sense. So in your wallet, let's take a look. What are we going to do? We want to show the balance of our wallet. So let's go ahead and just kind of get started the normal way. We'll do export const.
00:41:11.280 - 00:41:43.382, Speaker A: Your wallet equals some function. All the stuff we can even do. Return another div hi from your wallet. We can import that into main. We're going to do import your wallet looks like vs code automatically grabbing for me from your wallet. Your wallet. And if we look at the front end, it just says hi from main.
00:41:43.382 - 00:42:15.838, Speaker A: That's because I need to add in here. We're going to just do your wallet backslash like this. And now it's going to say hi from your wallet. Right, because main is rerouting to your wallet. Perfect. So in here, we want to see the balance of different tokens, right. We want to see the balance over different tokens in our wallet so we can figure out how much of them we actually want to stake.
00:42:15.838 - 00:43:17.910, Speaker A: So the way that we're going to do that is we're going to create some tabs on our front end. We're going to create a couple of tabs in here, depending on which one you have selected. We're going to tell the user how much they actually have staked in here. So to do that we're going to use something called hooks react hooks. So I'm going to explain kind of as I do it what's happening here. So we're going to do const selected token index comma set selected token index equals use state number zero, and oops. And we're going to have to import a use state from react.
00:43:17.910 - 00:43:58.494, Speaker A: Import state from react. So this is known as a hook, a react hook. What it does is this usetate function. It gives us basically two functions almost, right. Selected token index says we have this variable called selected token index. It'll tell us what that variable is. And set selected token index will set that token index.
00:43:58.494 - 00:44:44.802, Speaker A: And it's really helpful because we can use it across renders. It's react's way of holding state basically between components, or excuse me, saving state between renders of components. Typically we'd have to pass it through as a propt for another component, for our components who use it. But this just makes it life a lot easier. So we have this thing here and we're going to create our tabs now and based off what tab that we're on, that's going to tell us which token index that we have, right? So we're going to have three tokens. Each token is going to have a different index token, not token. Yes, thank you.
00:44:44.802 - 00:45:17.900, Speaker A: Sorry. So let's go ahead and do that. So to do a lot of this tab stuff, I'm once again going to import from material UI. So we're going to do import tab. I'm also going to import box because I'm pretty sure I'm going to use that pretty soon from at. We're going to make those tabs. So go ahead and delete this.
00:45:17.900 - 00:46:25.314, Speaker A: Go ahead and delete this. But we do also again want to check if we're connected, right? If we're not connected, we want to say, hey, you're not connected, you're crazy. So once again we're going to do this const disconnected bit equals account does not equal, equal undefined. Um, and then we're gonna do, right before that we're gonna do const count equals use ethers and we're gonna import, use ethers, import use ethers from at use dev core. So we're going to check to see once again if we're connected. And in here we're going to do again is connected, is connected. If we are connected, this is where we're going to.
00:46:25.314 - 00:47:18.470, Speaker A: And then let me just even div, no, if we are connected. We're going to create tab context object here. Which did I import this? I should probably import that too. I think that's from material UI lab double check tab context API. Yes, like so import tab context from. And that means I have to darn add material UI lab and this tab context basically just helps us make tabs. That's really it.
00:47:18.470 - 00:48:31.944, Speaker A: In any case, we have this tab context object and we're going to give it the starting value is going to equal to selected Tokenindex two string. So selected token index as we set up here is going to start from zero. So whatever we assign to be the zero with token, that's going to be the starting token index. Now in our tab context we're going to create a tab list, tab list need to import tab list from the lab. And again, the reason I'm doing this is because material UI just makes the formatting of this stuff a lot nicer. So we're going to do this tablet, here's and for the tablet we need to give it a list of tokens to use. We need to give it a list.
00:48:31.944 - 00:49:01.572, Speaker A: If we're on tab one, we're going to use eth. If we're on tab two, we're going to use die. If we're on tab three, we're going to use DAP token or whatever. So we need this tablet. Now we're actually going to have so we need to get this tablet from somewhere. So we're actually going to pass in our token list from main. So we're actually going to pass this token list in from main.
00:49:01.572 - 00:50:20.490, Speaker A: So back in main actually at the top what we're going to do is we're going to create this token list. So we're going to say const supported tokens. It's going to be an array, token objects, token objects, which actually we need to tell typescript what token object is. So we're going to do export type token equals and our token is just going to have an image string, an address string, so the address of the token, address string and a name string. But yeah, in any case it, so we're going to put this in here on supported tokens is going to be array of tokens. It's going to be equal this array and we're just going to pick the tokens that we want to use, right. So let's say we want to use image.
00:50:20.490 - 00:50:45.960, Speaker A: Actually for now we're going to skip the image just to save on time. So we're not going to do the image, but in the code, it is an image. We're just going to say address. And this is going to need to be the weth token address, which we're going to have to get in. A second name is going to be weth. Then let's just do one more for here. But in the actual code it's going to be more.
00:50:45.960 - 00:51:15.354, Speaker A: And then in here we're going to say address. This one is going to be dep. Token address. The name is going to be dep. This is going to be our list of tokens, of supported tokens. We're going to say our staking platform only works with Wes and with DAP. Right? So wrapped ether and our reward token.
00:51:15.354 - 00:51:59.610, Speaker A: So we of course need those two addresses though, right? In order for us to use these supported tokens we're going to need these two addresses from somewhere. So how do we get these addresses? Well, we can use, use DAP for this as well. Right. So first thing we're going to need to do is we're going to need to figure out, we're going to need some type of mapping to figure out where these are, right. And typically what will happen is people will have some type of helper config or some type of something that just stores a lot of on chain information. So we're going to actually create a folder that's going to have that stuff. We're going to call it chain info.
00:51:59.610 - 00:52:41.354, Speaker A: And what I really like to do if I'm doing everything in the same repo, is just have my script automatically push all the information about this stuff into this chain info folder and I cheat a little bit. So in my scripts I do have an update front end script, which what it does is it copies a whole bunch of files to the front end. So if we look here, print front end, updating front end, we have copy folders to front end. It copies all my builds contracts into that chain info folder. It copies a whole bunch of my contracts into the front end. For contracts. It copies this stuff in, it copies this stuff.
00:52:41.354 - 00:53:37.754, Speaker A: It copies a whole bunch of stuff into my front end. And in fact, if we were to deploy this right now, Ronnie run scripts, deploy Pynetwork Covid as this deploys, we're going to go ahead and update our front end. So typically you're not going to have your front end in the same repository as your contracts, right? Video quality drop. Yeah, for some reason my wifi is being spotty apologies on that team. Thanks for pointing that out. But yeah, typically you're not going to have your back end and your contracts and your front end in the same repo, I'm going to have it here. But yeah, typically you'd have to manually go into your build, see where your deployments are.
00:53:37.754 - 00:54:00.900, Speaker A: Right. And this is just for Brownie. In hardhat, it's a different folder, but see where your deployments are and add them to your front end. Typically. That's actually really good, though, because once you deploy your smart contracts, those addresses aren't really going to change, except for really from time to time. So it's fine that they're static. It's okay that those don't change.
00:54:00.900 - 00:54:44.130, Speaker A: But as this gets verified and as these contracts get deployed, once they're all done, like I said, the script is going to actually update the front end. So while this is deploying, we can't really get these addresses because we don't know where they are. But once this deploys, we'll have everything. Yeah. While we wait for this deploy, any other questions? How are we doing now? I'm sorry, Patrick, which script are you running in? Yeah, good question. So this is just the deploy script. Sorry, for those of you following along, just run the deploy script here.
00:54:44.130 - 00:55:13.606, Speaker A: So I ran brownie. Run script. Deploy network coven. If it doesn't work for coven for you, it's likely because you don't have your env file set up correctly. If that's the case, definitely check out the readme here. Actually, yeah, I should probably go over this really briefly. To actually deploy this to a network, you have to have brownie installed.
00:55:13.606 - 00:55:53.974, Speaker A: And then you need these environment variables. You need your web three and fear project id and your private key. We've gone over this a couple of times in a couple of other demos. So if you want to check out our brownie workshop that we gave earlier this week, or if you're doing this with hard hat, check out the hard hat workshop and then grab these environment variables, drop it into a env file, and good to go. Would I recommend use depth for even bigger projects? Yes, I think use depth is great. Later on today, we're going to use Morales too. I think Morales is awesome.
00:55:53.974 - 00:56:55.942, Speaker A: Makes a lot of things really easy, but great. So now we've done this chain info thing. Now if we look in chain info, it's got a whole bunch of stuff in it, right? It's got our mapping of where our stuff is deployed to. It's got a whole bunch of ABis, whole bunch of dependencies, just a whole bunch of stuff in here, which is perfect, which is what we want. Our weth token address we're actually going to get from this. So in our map shows us what we've deployed, right? So we deployed our DAP token. So we want to get our DAP token address from this configure.
00:56:55.942 - 00:57:56.782, Speaker A: So we're going to do is we're going to say const DAP token address equals. And first we need to check to see chain id exists once again. And we can get the chain id from use ethers. So we can do const chain ID equals use ethers. Did I import use ethers? No, import from usedef core import chain id is going to be the id of the chain like Covid is 42, main net is one, et cetera. So we just want to see, hey, is that chain id? Does it exist? And we're going to say, hey, if we're on a chain, if we're on a chain, then what we're going to do is we're going to look in that map JSOn. And the way we're going to get that map JSON is we're going to import it.
00:57:56.782 - 00:59:01.810, Speaker A: So at the top we're going to do import network mapping from Chaininfo app JSon. Now we have this JSON object in here and we can say depth token address is equals to if the chain iD does exist, we're going to do the network mapping of a string of that chain id of app token zero. And then I'm just going to add the or here or constants address zero. I'll explain this in a second, I swear. And then we're going to do import constants from no, I want to import it from ethers. My vs code automatically dropped this line. So we're going to import constants from ethers.
00:59:01.810 - 01:00:19.264, Speaker A: Yarn, add to the front end yarn, add ethers. I promise I'll explain this it all right, great. So what we're doing is we're saying, hey, if the chain id exists, grab go into this mapping file, go to the chain id address, pick dap token, and pick the most recently deployed DAP token. So now we're mapping chain id dep token, most recently deployed DAP token and we're getting this element implicitly has any type because expression of type string can't be blah blah blah blah blah. What I'm going to do to stop getting that is I'm just going to change my typescript config. I'm going to just make it a little bit less strict here to get rid of that. You could add some typings.
01:00:19.264 - 01:00:49.436, Speaker A: Basically I'm just going to suppress it for now. But if you want to be more strict, you absolutely can. So we're going to say suppress implicit, any index errors, errors is going to be true. Now that goes away. So we're being a little bit less strict with it. But that's fine. We have that one.
01:00:49.436 - 01:01:27.244, Speaker A: We also need the weft token address. This one is not going to be at our network mapping, right. Because we aren't going to be the ones to deploy it. This one's actually going to come from our brownie config or some other config file, right? So what we'll say is we'll say const weth token address. And the reason we do it like this, by the way, everybody, is so that if we want to switch across chains, right? If we want to have a mainet version, an avalanche version, a phantom version, a testnet version, this makes it more dynamic so that we don't have to hard code in our addresses and everything. Our wet token address is going to be the same thing. We're going to check the chain id.
01:01:27.244 - 01:02:16.756, Speaker A: If that chain id exists, we're actually going to look in our brownie config. So we're going to import that as well. We're going to do right in here, import brownie config from chaininfo. What is it called, dependencies? Oh, it looks like it. Is it in chain info or is it just. Oh, it's on chain info. I put it in here.
01:02:16.756 - 01:02:43.880, Speaker A: Brownie config JSon JSon. That's a little confusing, but brownie config Json Json. So again, in my front end script or in my update front end script, this might look familiar. If you're familiar with Brownie. This is our yaml edition of that config. And what we did was we jsonified it. So this is the exact same thing, but jsonified.
01:02:43.880 - 01:03:35.310, Speaker A: And in our config we defined the weth token, fau token and a bunch of other stuff. So we're just grabbing it from here basically. So we're going to check again, see if that chain id exists, and then we're going to say if it does exist in the brownie config of networks, we need to find the network name, right? Because these are named in here, coven, rinkby development, blah, blah, blah. We could change it. Actually, you know what, for the sake of this demo, let's just change it. We'll say this is 42 seven in the actual repo code. It does some cool stuff to get the network name, but we're just going to do it like that for now.
01:03:35.310 - 01:04:12.490, Speaker A: This way we can just again do string id. Note if you do it like this, every time you update your front end, it'll be wrong, right? Weft token or constance zero. So we're saying hey, in this browning config, grab this weft token address or just return zero. Great. Chain Id. Great. Now we have the weth token address.
01:04:12.490 - 01:04:57.350, Speaker A: A lot of work just to get some addresses, but awesome, we have those addresses now. Now what we want to do is we want to pass this array of tokens to your wallet. So down here, this your wallet, we're going to say supported tokens, tokens equals supported tokens. And we could absolutely have done this in our your wallet, but maybe we want to do our supported tokens across different components. So that's why we did it like that. But now back in your wallet here, export const your wallet, we need to be able to accept those parameters. So we're going to say ported tokens and we're going to give this a type.
01:04:57.350 - 01:06:08.844, Speaker A: The type of this is going to be, we're going to say interface for wallet props and this is going to be supported tokens, array tokens. And of course since we have this token typing, where is it coming from? We're going to import it, we're going to do import token from main exporting token, export type token. Okay, perfect supported token array. And so this way, say the supported tokens is going to be a type your wallet props. Okay, a lot of work here just to start listing through this mapping here, but we finally have a list of the tokens that we can start to accept here. I'm going to pause just for a second to take some questions. I know that was a lot right there.
01:06:08.844 - 01:06:35.270, Speaker A: And we still haven't even got the tablet up. We still haven't even started staking tokens and we only have about a half an hour left. So you're going to see how fast I can code and explain at the same time. Any questions about where we are so far? You can deploy your contract and remix and start a separate 99.9% react app connect to a testnet or ganache. Yes, you absolutely can. Great point.
01:06:35.270 - 01:07:18.500, Speaker A: I understand there's also web three, hard hat, truffle chai and all that other stuff involved. I just don't know, typescript or python. So all the typescript here should work with javascript, if you're familiar with javascript. So we use brownie as our framework, but you could just as easily use hard hat doesn't really matter. Can you explain the mapping part again? Yeah. Yes. So in our main TSX, I'm assuming you're talking about these lines here.
01:07:18.500 - 01:08:14.564, Speaker A: So in order for us to check to see the balance of our tokens, right, we need to know the address of those tokens on chain so that we can call the balance function, which we'll call in a little bit. So we need the addresses in order for us to get the addresses. We have them in this map. Well, we have the DAp token in map JSON because we deployed it. We have the weth token address in our browning config config JSon. So what we're doing here is just saying if we do have a chain id, if a chain id exists, grab the token from our mapping files or from either our network mapping or our brownie config. If not, that's what this little colon does.
01:08:14.564 - 01:08:30.990, Speaker A: This means if use the question mark. You're saying if yes, if chand exists, do this. If not, do that. It's just like a nicer way to do some if thens for assigning stuff. But that's it. Hopefully that makes sense. If not, ask away.
01:08:30.990 - 01:09:09.640, Speaker A: Okay, cool. So we finally have the tokens. We finally have the tokens, right? We finally have this supported tokens thing. Now that we have the supported tokens array, though, what we can do is we can add this as like a tab list to our front end. So we're going to do another mapping thing. Hopefully this makes sense. So we're going to say supported tokens map and we're going to use this map function to basically iterate through all the tokens in our supported tokens array and do something with them.
01:09:09.640 - 01:10:11.960, Speaker A: So we're going to do map of the token and the index, right? So token is going to be the actual object and then index is obviously the object and we're going to do some stuff to map them. Okay, why are you mad? Because it cannot find named Token. Okay, you're not mad. Okay. And we're going to return a tab with the label going to be equal to token name, which again because we know from main has a name and address. So the label is going to be token name. Value is going to be equal to index, index, two string, and then the key equals index.
01:10:11.960 - 01:10:44.740, Speaker A: Map those and give them all basically a tab. So now if we look at our front end, it should look a little different now. And we do indeed see it does. We have a tab for west and we have a tab for depth. Now you see if I click them, nothing happens. So we need to update this. So in here we need to add an on change.
01:10:44.740 - 01:11:32.580, Speaker A: So in our tab list we're going to add an on change variable and we're just going to call it handle change. So with this handle change we have to create some type of function to handle a change. So we're going to go up here and we're going to say const handle change. And this is where we define what we want it to do. So what we wanted to do is we wanted to switch our selected token whenever we click a different tab. Okay? So we're going to say equals a function. It's going to be an event of react, change, event, this wonderfully weird type and new value of string.
01:11:32.580 - 01:12:24.564, Speaker A: So when we handle change, we're going to give this new event and the new value here. And this of course is a function. And all we're going to do when this event occurs, all we're going to do when somebody clicks one of those buttons is we're going to do set, select the token index equals set, select and token index parse int of the new value. Okay, set selected token. Did I spell that wrong? Set selected token, set. Selecting token. Are you mad at me? Okay, you're not mad at me? All right, now back in here, if we click another one, it does indeed flip to the other one.
01:12:24.564 - 01:12:58.560, Speaker A: All right, cool. 20 minutes. Great. 20 minutes to do the rest. We might go over a little bit. Now that we finally have a way to click to clickety click clack around in here. What we want to do is we're going to want to add a staking form for each token, right? So if we're on the weth tab, we want a button to show up to say stake weth.
01:12:58.560 - 01:13:52.840, Speaker A: If we're on the depth tag tab, we want a button to show up to say stake depth. Okay, so let's go ahead and figure out how to do that. So that's what we're going to do. Now, it's so right underneath our tablet, but still inside of our tab context, underneath our tab list. So right underneath these two, we're going to create a new kind of stake form piece, right? So once again we're going to map those supported tokens. We're going to say supported tokens, map once again the token and the index. It's going to be a function.
01:13:52.840 - 01:14:15.560, Speaker A: And I got to go a little quicker. We'll just do a div here. Sorry, turn. Because we can't just do a div. We have to like this. We're going to do a div in here. We're not going to do div here.
01:14:15.560 - 01:15:30.980, Speaker A: We're going to do a tab panel. Going to add a tab panel, which is like a way to view stuff in the tab tab panel. Panel. How quickly can patrick type and explain? We're going to do tab panel with the value is going to be equal to index two string. The key is going to be equal to index it. And in the docs, actually I have a way to get the wallet balance, but I kind of want to skip over it just so we can get to the staking. So I'm going to skip over it just so we can get to the staking.
01:15:30.980 - 01:16:24.192, Speaker A: In this tab panel. We're going to put the stake form, we're just going to go right for the stake form component just so we can go kind of quickly go stake form to TSX. I'm going to make a real simple stake form here. We're going to do export constake form equals token. Just return div hive from stake form in your wallet. We're going to import it. I'm going to explain what I'm going to do in a second, I promise.
01:16:24.192 - 01:17:03.104, Speaker A: Import steak form, stake form from steak form. Steak form. It it's mad about. Can I find name? Okay, it's not mad. All right, just type kind of quickly. We added a new component to be underneath these tabs here called high from stake form. Right.
01:17:03.104 - 01:17:57.040, Speaker A: And that's all. And it's this stake form that's going to have how to stake in here. So I'm going to try to get through this quickly. Typically, like I said in the example, there's a wallet balance component before this, which shows you how much of these tokens that you have. We're just going to jump right into the stake form here because this is kind of the interesting stuff. So in our stake form, we're going to need to pass it the token, the token that we're on, the token of the tab that we're on. So right in here we're going to do token equals supported tokens of the selected token index.
01:17:57.040 - 01:18:51.110, Speaker A: And that means in our stake form, we're going to have to add, we're going to give it some parameters. We're going to give it a token parameter. Got to give it its typing. We're going to say stake form props. So that means of course we have to do a little interface, export interface, stake form, props. And this is just going to be token token, which again, import that as well. Import token from.
01:18:51.110 - 01:19:42.566, Speaker A: Okay, so a lot of code going on here, a lot of react stuff going on here. So now we have the token in our stake form. What can we do? Well, we should probably want to stake some stuff and that's exactly what we're going to do in here. So what we're going to do is we'll do const, token address, common name. We'll get the token address and the name from the token that we pass in. Token address isn't the right we call it. Oh, it's just address.
01:19:42.566 - 01:20:10.800, Speaker A: Okay, perfect. Get the address and the name from the token. And this is where we're actually going to start doing the stuff that we want it to do. Right. So I'm even going to skip down to our react here because we're going to want to make a button called stake. So in here we're going to delete all this. We're just going to say button.
01:20:10.800 - 01:21:12.626, Speaker A: And of course that means we're going to import this button. Import button from at Mui core or zero. What are we doing? Main import mui material. That's right. And inside this button is where we're going to add a little staking stuff. So we're just going to say stake. And if we look at our front end, we now have a stake button.
01:21:12.626 - 01:21:56.000, Speaker A: But we need to actually be able to do some staking. So before that we need to have an input. Input. Give it label equals stake. Value equals mount. Amount. Which we're going to have to change in a secondary how much we have in some input that we create.
01:21:56.000 - 01:22:51.330, Speaker A: I'd have to create a const, another hook. Amount. Set amount equals you state number or string or array of number or string. Zero. So I'm going to explain all this in a second. I swear I've said that a lot. This, for this we're going to need to import state from react.
01:22:51.330 - 01:23:14.582, Speaker A: So we have amount. We have set amount. We're going to say have this label here. What's wrong? Why are you mad? JSX one parent element. Of course. Div now it should be happy with us. Oh, we need an input.
01:23:14.582 - 01:23:37.840, Speaker A: Sorry. Button. Input and a label. Just going to get rid of label. All right. Do a little refresh here. Mad because I don't know how to type enough.
01:23:37.840 - 01:24:06.554, Speaker A: We'll just do a little refresh here. Okay. Whole bunch of stuff just went on. What just went on? So first this input thing is this thing, right? So this is this line. And we want to tell our app how much we want to actually stake. That's that input line here after we have our stake button doesn't do anything right now, right? But this is good because at least what we can do is we can look in our wallets. I can say I have 3.9
01:24:06.554 - 01:24:31.374, Speaker A: west. I want to stake one, 2350, a million, whatever I want to do. We have our amount and set amount use hook, which we're not using right now. And we're also not using this right now either. But if you try to type in here right now, whole bunch of nothing happens. A whole bunch of nothing happens. So we need to change that.
01:24:31.374 - 01:26:23.924, Speaker A: So in our input we're going to do on change equals set amount and mad at me for something. Let's check the docs input input API. It's mad at me for something. Let's see why it's mad at me. It on change function why is it mad at me? Is not assignable type to change event handler. Blah blah blah blah blah blah blah blah. It's because checking my cheat sheet you it, sorry, 1 second amount is not a function.
01:26:23.924 - 01:27:39.870, Speaker A: Or is it? No, it is a function actually. So you state returns like amount, which is the value, and set amount, which is going to be the which is actually the function. So it's mad at me for some reason. So it's not assignable to type change event handler types of parameter value and event are incompatible. Oh, is that because I need to add the rest of the stuff? Because I used a slider input instead for my other demo and now the API might be different. I'm going to cheat. We're going to cheat together.
01:27:39.870 - 01:28:12.728, Speaker A: Freecode camp what did I do before? Let's find out. Stake form input on change all we did was this. Okay, handle input we did create a different function. That's interesting. This is why you write things down because I clearly don't remember what I've written down. Yeah, you're right. Actually it looks like we did use a different function.
01:28:12.728 - 01:28:41.056, Speaker A: We created this thing called handle input change. That's right. Right underneath set amount. Sorry, unchanged handle input change. Then what we're going to do is we're going to create a function called a handle input change. So up here we're going to do const handle input change. Yeah, because it was saying set amount was looking for like one of these.
01:28:41.056 - 01:29:20.396, Speaker A: And to on change we pass it like a react event, which makes sense. So handle input change is going to be equal to a function that takes an event, a react change event HTML input element. Yeah. Which set amount doesn't take. Set amount takes a number or a string or an array of numbers or array of strings. So that makes a lot of sense why they're incompatible. So what we're going to do in handle input change, this is where we're actually going to do it.
01:29:20.396 - 01:30:00.190, Speaker A: So we're going to say const new amount is going to be equal to that event target value and we're going to say if it's zero it's nothing. Then we're just going to do nothing. Otherwise we're going to cast it as a number of event target value. And then this is where we set amount, new amount. And if we want to we can even do console log, new amount. Going to go a few minutes over by the way, we're almost there. We're almost to pressing the button.
01:30:00.190 - 01:30:21.756, Speaker A: Expected this instead of this. Okay cool. Now if we go back here I can add some stuff and if I inspect, check the console, go back console, right. If I add some stuff it'll show up as some stuff which is perfect, right. And then if I type letters it'll give me nan. So don't type letters. Boom.
01:30:21.756 - 01:30:54.620, Speaker A: Wonderful. Okay so now that we have some numbers we can just about start submitting some stuff. I'm definitely going to go like 15 minutes over. Almost there, almost there. So now we have our button here. So now we have a way to actually change the value and get the input. Now we want to do some staking but what we're going to do, we're going to do a little hook.
01:30:54.620 - 01:31:43.372, Speaker A: So in our front end not anywhere else in our source we're going to create a new folder called hooks. And in this hooks do a new file, do two new files. One is called use stake tokens ts and then also index ts. And index ts. I'm going to go a little quick here. We're going to just export, use stake tokens and usetake tokens is where we're going to define some functionality. Going to go a little quick here.
01:31:43.372 - 01:32:51.692, Speaker A: This is where we're going to find our functionality to call our stake tokens function. To export const use stake tokens equals to use this we're going to need to pass it a token address string. And in here we're going to do some stuff. Again we're going to grab the chain id. You'll see why in a second. Id equals use ethers, import use ethers from at dev core we're going to need to get our AbI of our token farm. So we're going to do import token farm from Chaininfo tokenfarm json when we pushed up all of our code to the front end here, we get this token farm JSON object and we're going to grab the ABi from it because again, you always need the ABI to make transactions.
01:32:51.692 - 01:33:20.844, Speaker A: So we're going to say Abi equals token farm. We're going to grab the token farm contract address. So we're going to say const token farm contract address equals if that chain id exists. Once again we're going to look at the network mapping. I'm just going to copy paste because it's the exact same stuff as what we did before. We're going to look at that network mapping piece. This just means we need to import network mapping here.
01:33:20.844 - 01:34:06.680, Speaker A: I know I'm going crazy fast now because we're pretty much at time. We need the address, we're going to need an interface. This is new. So we're going to say const token farm interface equals new utils interface of the ABI. So we're going to use this AbI from our mapping to make an interface. And then with the interface we can finally make a new contract. So we're going to say const token farm contract equals new contract of token farm address and token farm interface.
01:34:06.680 - 01:34:52.616, Speaker A: Token farm contract address. Token farm contract address contract is an object we're actually going to grab from, not from ethers, we're going to add from ethers project contracts. We're going to go ahead and yarn add this too. I'm pretty sure it's already added. But just to make sure, now that we have a contract, we can finally start sending some functions. Okay, so in here below all this stuff, we're going to use one of usedapp's greatest tools, in my opinion, called use contract function. A little bit about what this does and we'll go ahead and do it.
01:34:52.616 - 01:35:41.130, Speaker A: This is a hook that returns an object with three variables, the state, the send, and events. The state represents the status of the transaction. This is great because you can just constantly check hey, is the status mining? Is the status through? Is the status what? And then events obviously are really important for hey, like somebody emitted the request idiot or something else, whatever. And then we have this send function, right? To send a transaction, we call this send function. So what we're going to do in here is we're going to create const send our send function. We're going to call it stake tokens, our state variable. We're going to say stake token state.
01:35:41.130 - 01:37:05.510, Speaker A: We're going to get those two from calling use contract function on our token farm contract. We're going to call the stake tokens function and we're just going to give it a transaction name. Transaction name stake tokens. So we need to grab this use contract function, import this from at use dev core. Are you mad at me? Argument of type blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah. Okay, it are you mad at me? Sorry, I'm cheating again. A lot of cheating here.
01:37:05.510 - 01:38:04.604, Speaker A: Argument of type import blah blah not assignable to argument of type property running events are incompatible. Oh, okay. No module ethers project contract lib. Are these outdated variables of each other? Should it be just ethers instead of ethers? Project game I'm pretty darn gosh darn sure this is right. Let's see what the front end looks like. Whatever. We're just going to keep going.
01:38:04.604 - 01:39:12.382, Speaker A: We're going to ignore that for now. Great. So we have this stake tokens thing and what we're going to do is in our stake form, we're going to import this and we're finally going to be able to call a function. We're going to say const send stake tokens comma state stake token state equals use stake tokens and we're going to pass it the token address. First we're going to need to grab this from our hookspel things, right? I think I'd be like ten times better if I was good at spelling. Ten times better. This stuff.
01:39:12.382 - 01:39:44.090, Speaker A: Import usedtake tokens from hooks. Now we have this in here. Spell that right. Usetake tokens and stake tokens is not exported. Well, it should be. Export use stake tokens from using. Did I export this? Use stake tokens.
01:39:44.090 - 01:40:40.438, Speaker A: Okay, tokens, perfect for something else. Send does not exist on type void. Where is this stake form? Use stake tokens from hooks token address string that's being exported. That's good. I also read in the comments you're all quit. Sorry team, I'm bumping around. Final stretch here.
01:40:40.438 - 01:40:59.970, Speaker A: We're so close though. Use take tokens. Tokens. Oh, I'm not exporting anything, that's why. That's right. I'm not returning anything. Okay, return.
01:40:59.970 - 01:41:30.780, Speaker A: Here we go. Send state. Actually, no, that's not stake tokens and state stake tokens. There we go. And then back in here we're just going to do like the stake tokens, state tokens state, if I spelt that right, state tokens state stake tokens state. Perfect. We just need to pass this a token address.
01:41:30.780 - 01:41:54.180, Speaker A: There we go, back on track, pass this the token address which we should be getting. Just kidding. We're just going to pass it the address which is the token address. Perfect. Handle input change works great. All we got to do is call our stake tokens now. So now we're going to do stake here.
01:41:54.180 - 01:42:34.850, Speaker A: We're going to do an on click equals handle stake submit. And I'm going to create a function called handle stake, a function called handle stake submit handle stake submit. It's going to be a function. Here's what it's going to do. It's going to do const amount as way. So if I put in like ten, it's going to remap that to being like ten. 123-4567 910 blah blah blah amount as way equals utils, parse ether amount two string.
01:42:34.850 - 01:43:41.860, Speaker A: We're going to return tokens amount as way two string and let's say submit utils. We got to import utils from ethers. And I have another issue, right? Oh, this is the same issue. Token farm contract. And then once we do this though, we're done, once we do this, we can actually go ahead, call this function. So I just have to figure out why I'm bumbling around here. In the final stretch saying it's, saying it doesn't like me saying we're not friends.
01:43:41.860 - 01:44:12.822, Speaker A: That's not nice. So utils, is my interface okay? Yes, my interface is okay. Is the contract okay, so it's new contract from Etherspodrick contract. Did I spell contract right? Looks like I spelled all that stuff right. Yeah. Okay. Ethers project contractslib index.
01:44:12.822 - 01:44:49.382, Speaker A: Are these the same user Patrick demos ethersprojectcontractlibindex contract. Aren't these the assignable to parameter of type? Right, because these are the, I see, I see. Okay. That's what's going on. They're not the same remove dish rf node modules. There we go. From what I was bumbling about, front end.
01:44:49.382 - 01:45:17.920, Speaker A: Here we go. I had duplicate packages outsmatting me for used app core. Okay, so I did yarn add, not in the front end. I needed to do it in the front end folder, not in the non front end folder. So that makes sense. Okay, add a use dev core. Oh no, it's still mad at me.
01:45:17.920 - 01:45:56.754, Speaker A: Node modules ethers project. Thank you. That was a typo. What's telling me that there's two node mod defi stake hackathon. There's two node modules folders, right? I don't see two node modules folders. I only see one. Well, no, we also could do, we can also just say, okay, well, you want to be like that.
01:45:56.754 - 01:46:19.770, Speaker A: Yarn add. I will add a node modules folder in the first place. Now what are you going to do? Now they're going to be the same. You're going to look stupid. Just kidding. I'm still going to look stupid. Remove node modules.
01:46:19.770 - 01:46:56.200, Speaker A: Don't you all love Javascript? Package managers, aren't they the best? Go to front end. You're just going to remove node modules here. We're going to say, hey, you know what? Something weird funked up. Delete everything. Let's see what's in our package lock. Oh goodness, nothing is in here. Okay, well, all right, front end is absolutely blank now and we're just going to do yarn, no, yarn lock, whole bunch of stuff.
01:46:56.200 - 01:48:03.070, Speaker A: We're just going to redownload the packages. Maybe there's something weird we did with downloading the packages. Sorry, but yeah, once this all goes through on our front end, we'll finally be able to hit the stake function and we'll finally be able to send transactions to the blockchain with our user interface, which is obviously what we're here for, which will be incredibly exciting. Incredibly, incredibly exciting. All right, now is it mad at me? Okay, I got to add this too. I probably have to add a whole bunch of random dependencies. I it still mad at me about used stake tokens? It looks like it might be two different types with this name exist, but they are unrelated.
01:48:03.070 - 01:49:00.890, Speaker A: Is it just my vs code is bugging out of me? No, it's not just my vs code, it's actually bugging out of me. All right, well, sorry, team, we're super way over. I'll have to look back and see what I messed up to get this. But if we were to, luckily, we know that the code that I have written beforehand actually works. I'm going to run that right now. Apologies everybody, but if you go ahead and check, follow along with the repo that I posted in the GitHub here, we'll actually get whoa, this one's broken now too. Everyone's broken.
01:49:00.890 - 01:49:35.090, Speaker A: Nobody's happy with me. Oh, just kidding. This one's not broken out too. I did the wrong one. It all right, so if you jump into the code that we sent, this is actually what you'll get, which is good. You get like what the front end would actually look like. And using that hook will enable you to send your transactions and also view the state of them.
01:49:35.090 - 01:49:56.746, Speaker A: Right. So again, we can connect here instead of a sliding scale, we just did like a normal input, so we'd do like one. We'd hit stake, this would come up. We'd confirm. We say, hey, things are good to go, and we just wait for the transaction to go through. There are two versions of this. If you're looking to follow along, then I got to do the second one.
01:49:56.746 - 01:50:40.150, Speaker A: Of course, there's also the defi stake Brownie edition. This one's a little bit more minimalistic. This is the one that I was kind of using to cheat. If you want the more minimalistic version, use this one and then let me send you these two. Try adding at t. Oh, Matt Durkin, what's up? Apologies that I ran into a couple of bugs. Some of the tools that I were working with are a little bit new for me, but yeah, thank you, everybody for joining.
01:50:40.150 - 01:51:06.770, Speaker A: Let me send the type form here, workshop feedback form. Hopefully you all learned a lot. Anyways, I'm going to send that into the chat here and yeah, looking forward to the next ones. There are two more full stack ones happening later today, one with morales, which is absolutely going to be a blast. And then we're going to do another NFT project later on today. So. So thank you all for joining.
01:51:06.770 - 01:51:16.270, Speaker A: Hope you all learned a lot and we'll talk sooner.
