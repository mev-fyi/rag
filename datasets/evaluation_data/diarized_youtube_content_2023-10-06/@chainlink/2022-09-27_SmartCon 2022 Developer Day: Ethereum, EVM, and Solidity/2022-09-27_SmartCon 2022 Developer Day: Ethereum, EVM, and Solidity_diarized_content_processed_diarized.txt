00:00:04.010 - 00:00:05.150, Speaker A: Good morning, everyone.
00:00:05.300 - 00:00:06.560, Speaker B: How's everybody doing?
00:00:08.130 - 00:00:10.510, Speaker A: We are here for a very exciting moment.
00:00:10.660 - 00:00:19.150, Speaker C: We are kicking off Smartcon week. How many people are going to Smartcon?
00:00:19.810 - 00:00:20.270, Speaker D: Okay.
00:00:20.340 - 00:00:36.790, Speaker C: Virtually every hand. That is awesome. Well, thank you all so much for coming. I know a lot, lot of people have joined us from far, far distances. We've heard about flights of 1920 plus hours. So obviously this is a very important week for us. This is something we care a lot about.
00:00:36.790 - 00:00:44.554, Speaker C: It's really engaging and being here, present with you. And so without too much ado here, I really just want to kick it off and hand it over to Sol.
00:00:44.592 - 00:00:50.494, Speaker A: But I want to do a brief introduction of soul. So Sol joined the chain link Labs team about eleven months ago, and even.
00:00:50.532 - 00:00:52.494, Speaker C: Before her first day, she had already.
00:00:52.532 - 00:00:55.370, Speaker A: Started organizing and presenting at conferences.
00:00:55.530 - 00:00:59.386, Speaker C: All about Chainlink, all about empowering smart contract developers.
00:00:59.578 - 00:01:00.320, Speaker A: Yeah.
00:01:03.810 - 00:01:13.518, Speaker C: Soul is absolutely fantastic. If you've been anywhere in the world in the last twelve months, probably even maybe like 36 months, you might have seen Sol at any sort of crypto conference.
00:01:13.614 - 00:01:15.682, Speaker A: She is fantastic. And I know one of her personal.
00:01:15.736 - 00:01:23.526, Speaker C: Passions is really about empowering you, bringing the power of smart contracts in ways that can be transformative to you as.
00:01:23.548 - 00:01:29.706, Speaker A: A developer out in the world. And she is fantastic at this. So without too much more, I will hand it over to Sol and have.
00:01:29.728 - 00:01:31.066, Speaker C: A fantastic workshop here.
00:01:31.088 - 00:01:31.660, Speaker D: Everyone.
00:01:32.910 - 00:02:25.100, Speaker E: Thank you. So thank you, Stephen, and welcome, everybody. We are here, please, and we are streaming this live as well. So the people who is live, please tell us in the chat if it's good for you as well. And I just saw that we have some advocates, some people that is helping us online, and this is amazing. And here one point that I'd like to tell you, if you cannot do some exercise, ask help for your friend and try to help if you did yours, try to help who is with you. Let's do this together.
00:02:25.100 - 00:03:18.890, Speaker E: And we are creating as much content together. My first question is, who never created much content before? Yes, I love you. Not that I don't like the others, but I really love to do this with the people who is starting now and who don't have a metamask wallet or something like this in your computer. Okay, great. And for the people who already have, I ask you a bit of patience, because I will install my metamask and install again with you and do all the process from zero. Okay? It's really important to go from zero. And in fact, I don't have slides.
00:03:18.890 - 00:03:48.120, Speaker E: Like, I have two slides, probably. One is this, the other is my contacts. And I will show this later for you again. And let's go. This is our collaborative pad. And if you are here with me or if you are online, we are using the same pad. Let's wait a minute for you.
00:03:48.120 - 00:04:55.080, Speaker E: And I need to copy this as well in the chat it wait a bit more the 1 minute mark. So let's go. So I will go out my presentation now and wait. I need to go to James.
00:04:55.240 - 00:04:56.044, Speaker D: Yes.
00:04:56.242 - 00:05:38.020, Speaker E: And now I know that you are not seeing my screen anymore, so let's change it. I need to change both screens so I will stop here. And also I need to stop here. Not this. Here we are and share Jesus screen. Just I have one now and okay, here we are. We are in the same pad.
00:05:38.020 - 00:05:51.432, Speaker E: And this is the day schedule today. This is the room one and the room two as well. And I'd like to ask you two heights.
00:05:51.496 - 00:05:52.110, Speaker F: Okay.
00:05:56.960 - 00:06:12.770, Speaker E: Where I am? Why is not lost? Why is not. It's supposed to be. I refresh this because I don't know why it's not appearing for me.
00:06:17.460 - 00:06:18.184, Speaker F: I.
00:06:18.342 - 00:06:49.330, Speaker E: It's not responding. What happened? Yes, hi. You could do this. I need to do this as well. Why? I can't. My computer is crazy now. I used to say that to do workshops live, it's like to live with the initial because we never know what will happen.
00:06:49.330 - 00:07:20.650, Speaker E: And you can see that my computer is not talking with me now. I don't know. I tried to put something here because I don't know if. Yes, it's really the keyboard that's not working and I have no idea how can I fix this without Rennit. Yes, this is the problem. And I go offline again. Did I do something wrong? I think no.
00:07:20.650 - 00:07:43.488, Speaker E: Oh, yeah, I'm happy now. So I would like to know how many people do you have here and who is with me. So put your name and your city and country. Name me. Not known. Name me. Oh, it's better now.
00:07:43.488 - 00:08:12.590, Speaker E: No, name me. City, country. Brazil it. Yes. Wow, this is amazing. And you can see now that we are in this same pad. This is a collaborative pad.
00:08:12.590 - 00:08:50.518, Speaker E: Our few can write and all of you can erase everything. So be careful. Especially when I put some code that you need to copy. You need to copy and not cut the code. And talking about this, an important message that I'd like to tell you. I need to be here or I will be out of the screen. Is that the only thing that you need to know today to do this workshop is how to copy and paste? Is.
00:08:50.518 - 00:09:49.806, Speaker E: Yes. If you know how to copy and paste, you copy the code, paste in your browser and you deploy your first smart content and you can do everything. And obviously you understand what you are doing, but this is the only thing that you need to do now and this is really amazing. We have a lot of people over there. Wow. We have people from Germany, Ethiopia, but I don't know if these people are here or it doesn't matter, we are together. So is this, like I said before, we need to have some requirements and the first requirement is to have metamask installed to have eaters on Gurley and also we will use link not now but a bit later.
00:09:49.806 - 00:11:41.106, Speaker E: So these are the requirements and I will do something now that you don't need to do, but I will install my metamask and I will start again with you to be sure that the beginners can do this as well and understand what's a wallet. So I don't have metamask anymore and let's start it. This is metamask and okay, and I talk a bit higher now so I download this and I know that there are a few people doing this with me now. I am in chrome just now and this tau metamask for chrome and add to chrome and this is an extension, it means that I have this injected in my browser and any application that has this that would like to use my extension, my wallet could use it. If I allow to do this and it's checking probably you are doing the same. And another point, I know that most part of the people already has metamask installed but I'd like to tell you that don't use a real account now. Okay, you need to have an account only for test tokens and another account to your real money.
00:11:41.106 - 00:12:06.940, Speaker E: Don't use the same even if you'd like. Okay, I like to use the same seat phrase and to create a new account. No, never. You need to have different seed phrases for this. Okay. And if you'd like to uninstall your metamask now and install again, be sure that you have your seed phrase. Okay, this is important and get started.
00:12:06.940 - 00:12:59.690, Speaker E: Okay, I'd like to help them, they are my friends and I create a new wallet now this password is not important because if I forgot this is not a problem. What I can forgot in any way is my seed phrase, my twelve works. Okay I need to agree. Great. And I do not see this video now. And here is the most important part of the wallet and I will do something now that you never do this. Okay, I'm doing this because I am a teacher I will share with you my seed phrase and any of you can stall my tokens.
00:12:59.690 - 00:13:47.050, Speaker E: But I hope that you are good guys and allow me to teach you. Okay, so let's do. This is the most important part of your wallet and you need to save this very carefully. Okay, now I need to paste this and don't do this like I put him in a notepad. I'm doing this only because I'm a teacher now, so I need to check this and hope you are doing the same. Modify round. No round.
00:13:47.050 - 00:14:32.650, Speaker E: Where is it random? Is this so this is my wallet. Don't stall my tokens please. And out on now I have a new wallet and for you that starting with me. This is so important guys that are installing your metamask now we will not be on mainet so change this. You need to show the testnets. We are using a test net. Go to show height test networks and turn on show test networks.
00:14:32.650 - 00:15:20.460, Speaker E: You need to enable the test networks and go up, scroll up and close the settings. Okay, to do this again, show hide test networks, enable, scroll up, close the settings part. Now you can go to girly. This is the girly network. This is one of the test networks that we are using now. Next point, I need to have some eaters on Gurley and I will use the chain link faucet. I know that I already put the faucet here for you.
00:15:20.460 - 00:16:10.296, Speaker E: And first I will connect my wallet. The people who was installing Metamask. Is it good for you? And you? It's okay, here we are. I connected my wallet, my new wallet. And because I selected girly before on Metamask, here I have girly and I'd like to have a link and eat. But to have the it I need to connect my Twitter account. If you don't have one, you can put your address later in the pad and we try to send some for you.
00:16:10.296 - 00:16:43.030, Speaker E: And I know that I never connected and I have a problem now I will show my problem. This is funny because I was connected in another account and probably I need to disconnect and connect again. Let's see. Send request. It's completed. But I know that is not completed. Okay, so if it is happening with you, you need to disconnect your tweet account and connect again.
00:16:43.030 - 00:17:25.050, Speaker E: And now we work. But I need to prove again that I am human. Okay, let's see. Send a request. Now you can see that I have two transactions here. One related to the link tokens and another related to the eaters. And they are going to the blockchain when they are inside a block they are confirmed.
00:17:25.050 - 00:18:06.630, Speaker E: So probably confirm it is pending indexing. And here we are. I have Gorli tokens now. And another point. Are you close this metamask and iu use the app now Pin and now I can use this. So here we are in the assets part I know that I receive a link but where is my link just now I can't see my link token so I need to add the link token. How can I do this? Let's go to the next slide.
00:18:06.630 - 00:18:57.510, Speaker E: Here is the link token on Gurley and also in our networks. And this is so important for you. When you'd like to discover an address of any token go to the original site and be sure that you are getting the right address on the right search. Like if I am here and I search for girly here we are. I can simply add it to wallet over there and it will open my metamask account. Or I can copy the address like you do now and paste on metamask. And where I do this I will go to the import tokens and be careful.
00:18:57.510 - 00:19:41.830, Speaker E: Can have other tokens on Internet that link but is not the real link. So you need to check in the chain link website. Okay. Add custom token and I have 20 links. This is it. Yes, I am done to create the smart content now next step to create the smart content we can do this like with installing something in your computer. But I prefer to do this online using online environment to develop it we are using the remix.
00:19:41.830 - 00:20:10.970, Speaker E: And remember that I'm putting all the information for you in the pad and you can copy and paste and your own computer. This is remix. It is better. White or black for you is the same. It's okay. I think it's okay because of the light. So this is remix.
00:20:10.970 - 00:20:46.430, Speaker E: This is online environment to develop. And now we will create your first smart context. It will call create hashter. So probably I have it. Let's see. To create this you need to go here in this create new file icon. Okay.
00:20:46.430 - 00:21:04.640, Speaker E: And then you will create the haster. Let's see if I have it. I know that I have it. So register one. This is my file. Okay. You need to have the haster.
00:21:04.640 - 00:21:37.784, Speaker E: So I copy and paste this in our pet. You need to copy and paste what is inside this. Don't cut and I will explain what I have here. Here we are. First line. I have the license. This is a comment but it's good to have this.
00:21:37.784 - 00:22:14.400, Speaker E: Then I have the pragma comment. This is used to define which version of solidity are you using? And now we are defining our content. We use the command content to do this. And the name of my content is he register. Like I said before, what I have in my content I have first a string. This is a variable that I can save any information over there. And the name of my variable, it's info.
00:22:14.400 - 00:23:13.184, Speaker E: And this is private. Be careful with this private because it's not so private like you think. Because when you send some information, you save some information inside this variable, it's possible to monitor the transaction. We are in the blockchain, this is transparent so it's possible to see what you are saving on this variable. Okay, but think that the private means that it will be used only inside this smart concrete. Then I have a function called getinfo. This is public, anyone can call this function and this is a view because I'm not changing nothing in the blockchain, I'm only reading some information that it's over there and it will return the information that I saved in my variable.
00:23:13.184 - 00:23:41.296, Speaker E: Before then I have another function, collect set info. And this function can be monitored on blockchain. Like you can see every time that anyone cow this function and save information in the blockchain. For example. And here I may passing some information to save it. Inside my variable is this. This is our first smart content.
00:23:41.296 - 00:24:18.830, Speaker E: Do you have any depth from this part? Okay, let's go next. Go to the fourth icon in the left side. This is the solid compiler. You can see that you have a green button over there. It means probably you don't have and you don't have because you need to select the out compile. And after this, or if you did in this before, you will compile the hashtag so. And now you have the green button over there.
00:24:18.830 - 00:25:01.050, Speaker E: And after this you go to the next icon. This is the deploy and run transactions. And this is so important because remix has blockchain simulator in your browser. But I like to do this in the testnet, not here. So I need to change the environment. I go to environment and choose the injected provider and this will be metamask. So environment injected provider.
00:25:01.050 - 00:25:53.850, Speaker E: And remember if you need any help, look at who is near you or raise your hand. You are here to help you. And I know that we have people online help you as well. When I do this, you can see that my metamask, you open a window and I need to allow the remix website to use my metamask account. So Jesus, next and connect. Now I am connected and this is Maobet, you can see here that this is the girly network and this is my account. So I added this information here only to be sure.
00:25:53.850 - 00:27:16.740, Speaker E: Solidity compiler out compiling, compile and then deploy endurance Transactions and environment injected provider. Okay, now we are done. To deploy our first smart contact you will scroll down and you can see the contact part. This can be a list, but we have only one smart content. So here we have the hashtag content and you can click on deploy Metamask. You open another window and I need to authorize remix to send this transaction using metamask. I'm sending the transaction to the blockchain now confirm so deploy if my phone died, do you know?
00:27:19.350 - 00:27:20.100, Speaker D: Sure.
00:27:26.810 - 00:28:52.540, Speaker E: Let's ask in the chat if they can hear me. So you can see here in deployed contacts part that you have your contact over there and I will ask you to put your name and hash address in our pet you it's mine. Okay. And let's see what's happened with my contract. First, to copy the address of your contract you have a button in the right side of the name and you use this button to copy. Okay, use it to copy the address. Remember that you need to scroll down in the deploy and ruin transactions part, go into deployed contracts, find your contract and click on copy button.
00:28:52.540 - 00:29:52.330, Speaker E: And then you pasting our chat and let's see what happened. What I have in my concrete first if I click on get info, I have nothing. And why I have nothing because I didn't save any information in my smart contract. Now I will start this just now. So to save information I use the setting and I'd like to put the smart home 2022. Then I click on settings button and again I'm sending another transaction to the blockchain. The first transaction was to deploy this much content.
00:29:52.330 - 00:30:24.930, Speaker E: This transaction is to add some information over there to save the information. Confirm we are waiting the transaction be inside the block. Yes, it's done. Let's see. Let's go back to remix and stretch the get infographic. And yes, I have this much content here. Now remember we are on blockchain.
00:30:24.930 - 00:30:36.120, Speaker E: It means that I can see your content and I'd like to see another ismat content. Let's see. Bella is here.
00:30:37.770 - 00:30:38.886, Speaker D: How are you?
00:30:39.068 - 00:31:05.906, Speaker E: Yes, nice to meet you. I'd like to see your content now. Okay. Even if you don't like it, it's on blockchain and I can do this. So I copy the address of your ismat content and what I need to do, what I need to have to see any smart content on the blockchain. I need to have two informations. First, the address of the smart content.
00:31:05.906 - 00:31:50.910, Speaker E: Second, I need to know what functions my smart content has. I can do this using application the ABI, the application binary interface. Or if I have the source code like we do because we are using the same. I can do this. So you have the same source code. If I go here, not deploy, but I go to the at address and paste your address and then I will click on add address. When I scroll down, I can see that I have another copy of Hedgester.
00:31:50.910 - 00:32:15.980, Speaker E: And this is not Mini, this is Bella copy. And let's see what he adding his smart context. I hope to be some good. Nothing yet. Okay, I was. My name is in your smart context. Setting it.
00:32:15.980 - 00:32:37.034, Speaker E: Let's see. Let's wait. The confirmation. It's confirmed. You can see that it's confirmed here. It's not be so bad for you if I put it in this way. It is Mao.
00:32:37.034 - 00:32:56.760, Speaker E: No, it's confirmed. I can see here. No, it's not confirmed. I need to wait here. Yes, now it's confirmed. Bella, could you tell me if your smart context changed it? Yes. Click on the get info button.
00:32:56.760 - 00:33:05.760, Speaker E: No.
00:33:05.830 - 00:33:07.148, Speaker C: Am I getting anything?
00:33:07.334 - 00:33:25.032, Speaker E: Yes, probably. I understand probably. This is not the address of your smart context. Is this the address of your wallet? You need to check this. Maybe it's not your smart contract. Okay, let's see. The next half.
00:33:25.032 - 00:33:48.364, Speaker E: IO is here. Are you try your. Now let's see. So are you closing this? Because it's not working and I'd like to use business. Oh, wow. Half a l added the smartcon half. Yes.
00:33:48.364 - 00:34:27.708, Speaker E: Wow. Nice. Are you changed this? Okay, even if you don't like, I can do this and we will talk about this. So this is interesting because we are on blockchain and my first smart content don't have nothing to control the access. It means that anyone can interact with other smart content. So try to change the smart content of your friend in your site. You can do this.
00:34:27.708 - 00:35:11.876, Speaker E: You can change wherever. And this is a good example for a smart context to start. But you cannot use this like realism to IP because you need to have some kind of control access in your smart context. You can see now that we don't have enough and we can change the orders. This is not so good if we are in the real life. And this is so interesting because I'm sure that I changed to sawismat.com, but another person changed to anyone and it was not me.
00:35:11.876 - 00:35:51.560, Speaker E: Okay. And this is real. We are in the Internet and it can be someone that is here or that it's online, you'll be the same. Yes. So our next step will be create another version of Hedgester that we can have some access control. Okay, do you have any debit now in this first part? And who create your first smart contact? Now just raise your hand for me please. Yes.
00:35:51.560 - 00:36:50.280, Speaker E: I'm so glad if you guys so happy that you could do this. So let's go, you have another smart contest now and I'd like to know how many we have. Oh, this is good. And our second conference will be the register access and I'm not sure if I have it here. Let's see. Yes, I have it. So let's create now the hashisteraccess saw and in the same way I will copy this for you and paste between the beginning and end.
00:36:50.280 - 00:37:47.980, Speaker E: And here we are, you can copy and paste this and what we have different in the register access conflict. First, and I teach you a lot of solid concepts just now. First, now I don't have only one information on my info. I have a list of strings, array of strings. Second, now I have another kind of variable that the type of address. I can store any address over there, and this is public, anyone can see it. And public means that remix solidity, you create like a function with the name of your variable to return this information.
00:37:47.980 - 00:38:25.714, Speaker E: And also I have another kind of solidist type. This is the mapping. The mapping, it's a key value type. So for each address I can have true or false information. And this will be our whitelist. So I will define if some address can do whatever I'd like to do or not. I'm concluding just now, in the same way I will introduce you the constructor.
00:38:25.714 - 00:39:33.020, Speaker E: The constructor is a function that it will be called only when you deploy your smart content and it is used to initiate some information, some values. In this case I'm using to define that the owner of the smart contract is the address who is sending the transaction message center. And I'm adding G's address in the whitelist. It means that G's address has the true value and can do something that I didn't know what it can do, not yet. Now I have the event. The event. It's a way that solidit can send some information outside the blockchain and you can have any app, any Javascript or whatever, any kind of application that service and can monitor this information.
00:39:33.020 - 00:40:18.038, Speaker E: And for me I have an event called info change. And this will tell you what is the old information and what is the new information. Now I'd like to introduce you a new concept. This is the modifier. When I create a modifier, I can use this modifier in different functions. And I have two modifiers here. First is the only owner and it means that only the owner that I saved before I know who is the owner, the person, the address who is sending the transaction is equal the owner.
00:40:18.038 - 00:41:13.798, Speaker E: And I'm using the required to define this. Okay, and this here I forgot the name of this. How is the name of this? Yes, and if you have the underscore after, it means that it will continue the code wherever it will be. Okay. In the same way I have another modifier that is the only whitelist and I'm checking if the sender of the transaction has a true value in my whitelist. Now the get info, because I have a list of information. The get info is used to get the information of one spot, one index, and I need to pass the index and I retrieve this position only remember the set info.
00:41:13.798 - 00:42:06.220, Speaker E: Now the set info, you must say the position and then the information you would like to have. And wow, here we are, the only whitelist. It means that now only the address who is in the whitelist can change my information now. And this I may emit info, change and change the info. Important that I cannot start to use the set info first I need to add the information before. So here we are, to add the information I may only send you the information is the only whitelist as well. And you add the information in the end of the list and I'm returning the position of this value.
00:42:06.220 - 00:42:54.380, Speaker E: And only after you add some information you can change it using the set info. Now I have the list info, this will list all the list. And this is so important because interesting, in all the versions of solidity you don't have the possibility to do this. If you try to return a list array in a function, it's not possible. Like I don't remember in which version Jesus started, but only in the newer versions you can do this. So this is interesting because if you have smart context in different versions, then you work in a different way. And let's talk about the managed part of our application.
00:42:54.380 - 00:43:31.880, Speaker E: This is the ad member and delete member. And like using this I use say who can change my list, who can change my information. If I put address here and say that this is true, he is in the whitelist, or if I put that it's false, he's not in the whitelist anymore. In fact, if you don't have enough, like in the beginning, we are not starting out the address that are in the word. The default is false. Okay. And you can see that only owner can do this.
00:43:31.880 - 00:44:15.474, Speaker E: So this is the way that I use the modifier. I put the modifier in the function and then after the condition it's true, it will go to inside the function. Or if it's false, you not go this. Okay. Do you have any doubt related to our smart contract? Okay, is it okay for you? So it's time to deploy. I'm going again. You can see the solid compiler because you enable the outcompile so it's compiled.
00:44:15.474 - 00:44:44.250, Speaker E: I don't need to do nothing now. I can go directly to deploy and run transactions, scroll down and go to my register, access content. In the future you can have more contents here in the same file. And now I deploy confirm.
00:44:48.310 - 00:44:50.946, Speaker C: Let's see, I have a quick question.
00:44:51.048 - 00:44:51.700, Speaker E: Yes.
00:44:52.390 - 00:44:59.300, Speaker C: In remix it's showing how much gas each function is going. How are you doing that?
00:45:00.470 - 00:45:44.580, Speaker E: This is funny because the people are asking this for me like from two weeks ago until now. And in fact I didn't know what I enable in my remix, but I did something. Yes, probably using the plugin manager. I don't know if this is something that I have here, but I don't know yet. I discover and tell you inactive models. I don't know what's active or if it is in the settings, but I know I did something, but I need to discover what.
00:45:45.110 - 00:45:45.938, Speaker D: I have a question.
00:45:46.024 - 00:45:56.854, Speaker C: What you're showing here, is that compatible with any chain that runs solidity smart contract, there's nothing here that changes, correct?
00:45:56.972 - 00:46:15.898, Speaker E: No, exactly. Because for example, I can add another chain, any evme compatible chain on my metamask. If I only select this chain remix automatically. You deploying this new chain, nothing in.
00:46:15.904 - 00:46:18.540, Speaker C: The code makes it work on one.
00:46:19.410 - 00:46:45.042, Speaker E: No. And for the people who is online, the question is how about to deploy in other EVM chains? Okay. And this, in fact, if your as much content is EVM compatible, you can deploy any chain. You only need to set up the chain.
00:46:45.186 - 00:46:50.882, Speaker C: Okay, if I want to run an avalanche c chain, for example, work without any chain.
00:46:50.946 - 00:47:41.638, Speaker E: Exactly. Yes. Wow, this is amazing. And what I have here, I have some socks, some for cups, and only to be sure that you will be with us until the end of the day, our last session will be a game. And this is for the winners. It's not for now, it's only for the winners. So probably you did this.
00:47:41.638 - 00:48:36.058, Speaker E: Yes, I have mine as well. Yes, I have my hagister access and you have it. Okay. This is mine. And let's do some tests with this. This is my register access and you can see that now I have a lot of orangey and blue buttons. And what is the difference why some buttons are blue and other are orangey? Do you know? You cannot say why some buttons are orangey and others are blue? Function the other guy, I believe the.
00:48:36.064 - 00:48:39.114, Speaker C: Orange is actually modifying the contract data.
00:48:39.232 - 00:49:19.222, Speaker E: The blue is just like yes, it is the orange button, it's changing the state on the blockchain. And the blue button, it's only carrying some information. I can say that when I send a function that's the orange button, I'm sending a transaction and this will be broadcast in the blockchain. And when I'm using a blue button, it will be queryed only in the node that I am connected. It means like in the metamask node just now. And I need to trust the metamask node to use this like that. Okay, and let's try this.
00:49:19.222 - 00:50:02.530, Speaker E: First of all, I'd like to add information. It's Matcom, you can add any information, remember that you need to add and then you can change after if you like it. And only me now can change my smart content. And I will try another in a few minutes to be sure that this is okay. So let's see if I go to my listing for now, nothing yet. Why nothing? Probably is not confirmed. Yes, now, yes, list info is Matcom.
00:50:02.530 - 00:50:53.046, Speaker E: Then I'd like to put 2022. Remember I can have a list of information now. Also I can see if my address is in the whitelist. This is my address, and if I go to the whitelist and put my address, it returns true. So I am in my whitelist, it's still pending. What more can I see? This is my address. If I go to get info on the index zero, it's the smart con.
00:50:53.046 - 00:52:09.810, Speaker E: If I try to go to the get index on index two, it didn't exist yet. Probably I have an error here and now it's confirmed. List info has smartcom 2022, but I'd like to change the 2022 to September 2022, but it's not here. I go to set info and this is on the index one. So I put the index one and the information is September 2022 for transact and confirm. Let's wait a bit more. Do you have any question? Yes, it's confirmed.
00:52:09.810 - 00:52:40.066, Speaker E: Let's see now. List info. Here we are is matcom September 22 and I we add the saw wedding. And my next step is to try another smart content. You can ask.
00:52:40.248 - 00:52:51.640, Speaker C: Do you see the gas only on the screen that shows metamask. Can you also restrict it in the COVID south only?
00:52:54.330 - 00:54:06.078, Speaker E: No. Think that the gas limit, it's something that you can restrict on code. If you are sending a transaction using like JavaScript, using another way but not inside iSmart content, what you can do? If I am on remix, I can restrict it here, I can change the gas limit here or I can change the gas limit as well. When I sending the transaction, not the gas limit. The gas limit is not good to change because when you are sending a transaction using metamask, the gas limit is calculated, you can change the gas price. This is good. I'm not thinking about gas price because I am on testnet, but if I am on mainnet I used to check this and let's see, probably I have the last information here and I delight to test another smart content is matcon September 2022.
00:54:06.078 - 00:55:18.660, Speaker E: So let's see, um, who is Jay? J, is Jay here? Hi, are you trying your smart content? Okay, it's you. Okay, I try your smart content and I know that I can't do this because I'm not in your list. The second is yours, not mine. And if I try to add the information here, I can't. I got an error because I'm not in the whitelist and now we have a real content that we are managing this. Jay, could you add me in your whitelist please? You put my account over there. This is my account.
00:55:18.660 - 00:55:41.468, Speaker E: And who would like to change my smart context? What's your name?
00:55:41.554 - 00:55:42.232, Speaker D: Christian.
00:55:42.376 - 00:56:27.180, Speaker E: Christian, put your name and address here please. And I'm adding Christian to mine and Jay is adding me to his smart contract. So I go here and add member. I'm adding Chris but I'm trying to add Chris in J smart content. I cannot do this. Let's do mine. Let me know when I can change yours.
00:56:27.180 - 00:57:13.660, Speaker E: Yes. Okay, so let's go back to J contract again. And now you can see I can change J contract now. And talking about gas, like if I came here and edit, I can change the fee. Okay, like you can go to advanced options. The gas limit is calculated. This is the minimum that I need to send because it's calculated to send this transaction with the size of the information that I'd like to send.
00:57:13.660 - 00:57:54.260, Speaker E: Don't change this. Okay, not for less, but I will not change nothing. Confirmed. And this will be my last transaction. Then you will see some cop presentation related to unstoppable domains. Are they here? Probably they are outside. It's confirmed.
00:57:54.260 - 00:58:47.116, Speaker E: So let's go to J list. You don't have enough in your list before Jay? No, because your list was empty. Only have my information now and let's see if Christian could change mine. I'm adding another information on J contract. And let's come back to mine and see if Jay changed mine. Christian, did you try to change mine? Yes. You need to copy the address of my content.
00:58:47.116 - 00:59:31.580, Speaker E: So go up in the line, two, three, six. Copy this, then go back to remix. Paste here in ET address and click on ET address. It will open another instance of discounted with this address. Could you check if you stop upload domain? Okay. Yes. 1 minute.
00:59:31.580 - 01:00:01.290, Speaker E: Did you change something? Okay, let's see. Is it confirmed? Not yet. Painting. Okay, this is our last transaction. Not yet. And now.
01:00:08.060 - 01:00:08.568, Speaker D: It.
01:00:08.654 - 01:00:10.120, Speaker E: Is it confirmed?
01:00:11.100 - 01:00:15.050, Speaker C: Good question. While that is pending, what is an event?
01:00:18.540 - 01:00:34.690, Speaker E: You can see the event outside. It's like a log for blockchain. And you can monitor this kind. This is not inside the block. Exactly. And you can monitor this using some service outside.
01:00:35.060 - 01:00:43.444, Speaker C: Okay. If you weren't here, what would I Google besides what is an event? To find that answer?
01:00:43.642 - 01:00:45.732, Speaker E: How to find the event just now?
01:00:45.866 - 01:00:51.610, Speaker C: Yeah. Is there a resource that I could Google to find what an event is?
01:00:56.220 - 01:01:01.950, Speaker E: It's solidity events. Yes. Where is the other mic?
01:01:03.120 - 01:01:10.190, Speaker A: If you go to YouTube, do events and logging in hardhead of Brownie, there's a couple of videos that we've made on it.
01:01:12.400 - 01:01:49.960, Speaker E: You will find Patrick video? Yes. Not yet. So you saw that I changed Jay's concrete. So this is enough for now because I may out of time. And is this. Guys, thank you so much for creating our first. Now you will learn a bit about unstoppable domains and then.
01:01:49.960 - 01:02:26.250, Speaker E: Are you back later? Jeez. To teach you how to create a token and use chain link data feed with your token. Okay, where is the other? Mikey, do you know the other? Because I have this. Yes. Are you.
01:12:46.330 - 01:12:49.400, Speaker F: And you are live around the world now.
01:12:50.330 - 01:12:51.430, Speaker G: No pressure.
01:12:51.770 - 01:12:53.720, Speaker E: Good luck to.
01:12:56.970 - 01:12:57.720, Speaker A: Absolutely.
01:12:58.170 - 01:13:15.354, Speaker G: All right. Thank you everybody for your patience. Took me a couple of minutes there to get my computer set up, but we are hooked in now and ready to go. I'm going to give you kind of the abridged version. I know that I'm already over the time that I was allotted. Again, my name is Alexander. I'm a software developer at unstoppable domains.
01:13:15.354 - 01:13:45.160, Speaker G: I've been there about six months. I work on the login and identity team and it's just an amazing journey getting a chance to work with web3 technology directly and just be developing on the forefront of what the future is going to look like for identity in general. So I'm really excited to share these slides with you. I'm not going to talk through every slide. I know you can all read, so I'm just going to move through this. If I've got any time in the info, some questions, I can always stick around over the corner. You can come grab me if you'd like.
01:13:45.690 - 01:13:46.570, Speaker D: All right.
01:13:46.720 - 01:14:13.898, Speaker G: So first things first. If you want to get started integrating our login product into your dapps, you can use these QR codes. We've got an onboarding guide, we've got the technical documentation online, and our op library there is available on GitHub to peruse. So if you guys want to take pictures of these really quickly, feel free to do so. And I can always return this slide at the end if you guys don't.
01:14:13.914 - 01:14:14.330, Speaker D: Want to catch up.
01:14:14.340 - 01:14:50.910, Speaker G: But I'm going to move on to this next slide. All right? Yeah, we believe that people should benefit from the value they create online. What that means is we believe in giving a person's data back to them, which is a big deal for us right now. Data is very centralized on the web, in web two, and we are moving forward with our product with the intention of allowing you to have control over your data and have control over the data that applications that you log into have access to. So that's a big deal for us. A lot of use cases right now for the login of unstoppable product. Simplifying crypto payments is a big one.
01:14:50.910 - 01:15:28.220, Speaker G: Instead of having a difficult to remember wallet address, you have a NFT domain that you can share with your friends and family for the purpose of transacting money or NFT exchanges or token exchanges or whatever login. Unstoppable. That's a team that I work on. You can log into different D apps and websites with your unstoppable domain. And again, using the UD profile page on our website, after you purchase one of the domains or after you get one of the free ones, you have a lot of control in terms of what data these dfs will have when you log into them. And that's kind of that stuff about giving you control over your data. Yeah, I kind of touched on this.
01:15:32.990 - 01:15:33.306, Speaker D: Yeah.
01:15:33.328 - 01:15:55.060, Speaker G: Some benefits to using longer than unstoppable. It's easy authentication. It allows you to quickly authenticate using your domain data. Permissions are right there when you go to log in. Request permissions, access personal data if you want, like the user's email addresses. We've got a number of scopes that are listed in the technical documentation. It is really easy to integrate the login with ensemble product.
01:15:55.060 - 01:16:35.440, Speaker G: I bought a domain on web two and I spun this up using our login pop up, got it deployed through Netlify, and I think the whole process took me like 30 minutes. It was really. I think the hardest part I had was getting all the domain stuff set up through Netlify after I purchased on a Google domains. But it's a really simple process. The documentation is outstanding, really easy to integrate. We've introduced humanity check as an option through the login process, and we're partnering currently with a company called Persona. It allows you to verify the user is who they say they are, preventing things like robots or scripts or something, doing the automated sign ins or identity theft, things like that.
01:16:35.440 - 01:16:53.586, Speaker G: There's a little how it works section here. I'll probably ask the other speaker for an email address that I can send this slide show to. That way you guys all have it if you want to. I know I'm kind of moving fast. Yes, this is the user flow for getting verified. Humanity check. Once you're verified, get a little check mark there.
01:16:53.586 - 01:17:11.942, Speaker G: In the process of going through the humanity check again, this is 100% opt in. It's not required. Upload a photo id, take a picture of yourself. I've done this a couple of times for different companies. Then scopes for login. Right now, supported scopes are open id, wallet, email, optional. Humanity check optional for your profile and your social, optional.
01:17:11.942 - 01:17:42.840, Speaker G: We're working on adding additional scopes all the time. So if you're interested in using our product, make sure you keep an eye on the technical documentation online because it is updated really frequently. This is the log unstoppable user flow. This explains the process by which a user logs in using our product. From a technical standpoint, this same diagram is available on our documentation online. So again, just really good documentation. Login is always going to be free.
01:17:42.840 - 01:18:21.186, Speaker G: This is like, how is it different from logging on the wallet? It's associated with your NFT domain. It allows you to maintain control over what kind of data the user shares with you. They're allowed to opt in, you're allowed to set the scopes for it, and then yeah, humanity check personal data through humanity check. None of that data comes back to the app that is integrated login. Unstoppable Persona as the company we partnered with to perform the humanity check process, they persist the data for the purposes of their own legal requirements. In terms of what data is communicated back to us, it's really just a true or false. It's like either you are a person or not, and they give us a random id that gets generated at that point.
01:18:21.186 - 01:18:50.060, Speaker G: So we don't have access to any of the data. The Persona gets through the humanity check process. I highly recommend you join our discord super active. It's got a great community. It's one of the best places to get help on an issue you have maybe integrating or a question you have about anything login or estoppel related. So, yeah, this is the discord code there, if you guys want to take that. And then I'm going to point back to the technical documentation in here.
01:18:50.060 - 01:18:57.998, Speaker G: And that is my slideshow. That is the speed run speedrun of my slideshow, because I'm already five minutes over here.
01:18:58.164 - 01:19:16.340, Speaker F: Yes, sure. So if you're integrating unstoppable domain with the humanity piece, do you have to present your documents of incorporations to get access to humanity check? No, me as a provider, I just sign up with my.
01:19:19.590 - 01:19:25.138, Speaker G: Do you mean if you're integrating it into your app or if you're a person who's trying to log into an app that requires humanity check?
01:19:25.224 - 01:19:29.878, Speaker F: I'm integrating it into my app, and I wanted to have humanity check part of the service.
01:19:29.964 - 01:19:45.450, Speaker G: My understanding is that there's no additional step. It's safe, and if you decide you want to use it, but might be worth asking, I could double check, and then I'll get back to you on that one. I don't know if you want answer anybody else. I have wowed you with my ability to talk over some lines.
01:19:46.350 - 01:19:47.530, Speaker D: Cool. Hey.
01:19:47.680 - 01:20:07.060, Speaker C: Responsibility to make sure that you haven't been identity meaning somebody presenting documentation. Supposedly it's them, but it's really you. How do you claim that somebody has been using my photo id?
01:20:07.510 - 01:20:22.310, Speaker G: Oh, through Persona. You have to provide your photo id. It's interesting than getting more questions about the community check. You have to present your id. You also have to take a picture of yourself. You have to do it from multiple angles. So they're going to compare that against the identification.
01:20:22.310 - 01:20:35.610, Speaker G: It's run beyond Persona. Yeah, but their process, it's human verified, so it's partially al. But they do have human verification as well, to make sure that you are who you say you are when that person goes to take that picture.
01:20:36.450 - 01:20:44.238, Speaker F: Yeah. So when I sign up for unstoppable domain and I want to leverage humidity checks, is there a fee to leverage that?
01:20:44.324 - 01:20:46.954, Speaker B: No fees.
01:20:47.082 - 01:21:05.080, Speaker G: Yeah, the login product is free to use and free to integrate and think I'm getting, is this my gong? Okay, yeah, I'll stick around for a couple of minutes over here unless anybody has any additional questions. But again, thank you for your patience. I know it took me a few minutes to get on here and get sharing, but thank you very much.
01:30:16.310 - 01:30:17.060, Speaker C: Like.
01:31:52.230 - 01:33:05.066, Speaker E: And I know that I need to stop my camera here. Okay that, so let's go everyone. Let's talk about the Chain link data feeds. Yahoo. Yes, well I'm pretty sure that my slide is not updated but we are talking about to power and defi a lot of decentralized oracle networks. And what is GS? What I'm talking about with you G's is related to get data and asset prices in your smart complex from external services. And I'm talking about the full market coverage about decentralized exchange and centralized exchanges.
01:33:05.066 - 01:33:58.590, Speaker E: And we have some premium data providers, aggregators and exchange. It's interesting to understand how it works. It's the volume based average method and this is available on many blockchains we was talking about to deploy in different blockchains. So this is so easy. In a few minutes I will go to this link, data chain link to show you some real information over there. And in fact I don't have so many slides because we will do a practical part. The idea today is to create a token then to create a minter to your token that any person can mint this token.
01:33:58.590 - 01:34:25.640, Speaker E: And after this I create like a price for this token, but my token, you have a price in USD. And my final goal is to send some eaters to this contract and receive my token. We are doing all of this just now. So this is the hisers, the heiferxes for you.
01:34:27.050 - 01:34:30.054, Speaker A: If you need a hand, just raise your hand. I'll come around.
01:34:30.172 - 01:34:57.486, Speaker E: Yes, we have. In fact it's a good time to present the other developers advocates that are here. So probably you know Patrick Collings. Yes. Come on here to the people on the screen to see you. Yes, in the same way, Patsky, you teach in the afternoon. Okay, I have Zubin.
01:34:57.486 - 01:35:27.802, Speaker E: Come on, please. Come on, come on. This is zubing. This is another developer advocate as well. And the people would like to see you. Okay, great. And I know that I have some advocates here who is advocates from Chainlink here? Do you have some here? Okay, probably they are walking around in New York.
01:35:27.802 - 01:35:58.870, Speaker E: I know. Okay, but they are in the city and this is the basic demonstration related to the chain link price feeds. The documentation is amazing to us. You will start with a complex smart content. But be sure that you can come back here and do this in a calm place later. Okay, let's go. So probably I need to hide to don't share the screen and change the screens again.
01:35:58.870 - 01:36:30.400, Speaker E: Let's see. Yes, you are not seeing nothing. I need to stop to share again the order and to change. We was on remix. Let's see if I have the token here. Yes, I have a token here and I used this token on Ethereum Sao Paulo like two weeks ago and. Okay, you are not seeing my screen, only online.
01:36:30.400 - 01:37:23.982, Speaker E: Let's change this here again. Okay, great. So let's create a token just now. How is my token? I need to go down and create the token Sol in the same way you are copying and paste from here and you copy from here. But let's change my content first. Gzubday smart Workshop I'd like to put this in the beginning. Chain increment.com
01:37:23.982 - 01:38:03.470, Speaker E: workshop token and this is our token. You can see that I'm creating a token with only two decimal places. This is not the default from ETEf and I like to do in this way because it's a great way to learn about this as well. I will copy my token and paste for you. Now you can copy and paste too. And I explain what I have here. And I really like this token.
01:38:03.470 - 01:38:43.880, Speaker E: I like this content. And do you know why I'm creating a token with only ten lines of code? And this is amazing. This is magical. Yes. And to understand what I'm doing, I'm importing open zeppelin smart content, and open zeppelin is doing everything for me. And you can see here that I'm using an old version of solidity. In fact, this version is not good for security.
01:38:43.880 - 01:39:11.650, Speaker E: Don't put this token in real life, please. But this version has the ERC 20 mintable. And I'd like to use this. What I'm defining here, you know that I define the name, the symbol and the decimals. You can create your token different from mine. So put a different name, put a different symbol, create your token.
01:39:15.030 - 01:39:18.866, Speaker C: Does it detect any condition somebody has created?
01:39:18.978 - 01:39:56.160, Speaker E: No. This is an excellent question. Can I have two tokens with the same naming? Yes, I can. I can have many tokens. Like I was telling for you before, be careful to not get a fake link token. For example, anyone can create a link token, but this is not real. How can I know who is the right token going to the right app? So going to the search, go into chain link and be sure that you got the right address.
01:39:56.160 - 01:40:05.250, Speaker E: And be careful to not be scammed by someone who is telling you that this is the token, but it's not.
01:40:05.400 - 01:40:10.034, Speaker C: The app is really the namespace for one or more tokens created in the.
01:40:10.072 - 01:41:09.574, Speaker E: Context of the app. When I'm telling about go to the app, go to the site of that protocol, any protocol, but go to the original site of the protocol, get the address. You can go to etherisk and verify itself, but you need to discover this with the protocol. Who is the owner? Who created the token? This is the best way. So here we are. We have a token we can go directly to deploy, and I will ask you to put your name and token address here. And I deploy mine just nowhere.
01:41:09.662 - 01:41:10.300, Speaker D: It.
01:41:22.970 - 01:42:01.634, Speaker E: Wait to be confirmed and in a few minutes you have a new content here. Let's close the address. Hey, now I have a token, is this. I will put the address here for you and what I have my token. I'd like to add my token on metamask to see the balance of my token. How I do this, I go to metamask assets. Remember that I have the link that we already did this before.
01:42:01.634 - 01:42:44.526, Speaker E: Go to import tokens, paste the address of your token, and you can see that this is my CS debut token with two decimal places and add custom token. I don't have any token yet. This is not a problem. Import token and I can mint tokens for me just now. So I copy my address. This is my address, the address of my account. I come back here to the minked part, paste the address and I would like to have 100 tokens.
01:42:44.526 - 01:43:06.700, Speaker E: But remember that I have two more decimal places. So I need to add two zeros and project. Okay, let's wait a minute. And you have 100 tokens.
01:43:11.200 - 01:43:13.970, Speaker F: Do you put a period to say 100?
01:43:15.300 - 01:44:01.950, Speaker E: No, we cannot use the period until now. It's not possible to handle this. So we need to know how many decimal places we have. But we cannot put this inside the number because of this. I have variable over there that's saying that I have two decimals. And if you have another app, you need to take care of this all time. So this is related to the number of decimals and probably yes, let's see if I have tokens just now it's done.
01:44:01.950 - 01:44:10.830, Speaker E: And yes, I have 100 tokens. Wow. Do you think that you can get my tokens now?
01:44:11.360 - 01:44:12.110, Speaker D: Hello.
01:44:12.600 - 01:44:58.130, Speaker E: No, because in the way that this token was created, it has owners. In fact, it has a minter whole. I can have more than one address being a minter in my token. And one point that I would like to show you remember that I create a token with ten lines of code. How it's possible that my token has so many functions? I didn't this. So where is this? This came from the library from open zeppelin. If I go exactly here.
01:44:58.130 - 01:45:24.088, Speaker E: Let's see what's happened here. This is the search code that I'm using. And this is our old version. You can see here that I'm importing the ERC token. The mintable role. And this is all of this is inside my content because I imported it. And here you can see that I can add another address.
01:45:24.088 - 01:46:03.472, Speaker E: To be a minter and do a lot of things. I like to see my balance now this is my account. No, this is not my account anymore. Okay, copy and paste here I can see here that I have 100 tokens as well. So great to be sure that I cannot mint token that's not mine. Let's try another. Where is Austin? You try to use your token.
01:46:03.472 - 01:46:44.388, Speaker E: Okay, I have the token selected here at the address. And I'd like to mint tokens my address. Let's go to mint. Put my account, put the zeros transact. No, I can't. And you can see here minter hole color do not have the minter whole so I can't mint. But what I'd like to do now I you create another smart content.
01:46:44.388 - 01:47:17.344, Speaker E: And this another is much content. After I create it, IU add this smart content in the minter hole and anyone could mink tokens. And I'd like to show you two points. First, IU create another ismatch content that you interact with. Jesus match content and the new ismatch content can mint, anyone can use and mint tokens. Let's share tokens around the world. How can I do this? First let's see if I have this here.
01:47:17.344 - 01:48:14.700, Speaker E: Yes, I have the token linker here. I will share with you create the token in session and I will show you some different concepts. Just now I'd like to talk with you about the interface. What's the interface? The interface defines some function, but we don't have the source code of the function. You can see here that I have interface, call it erc 20 minter. And I only have the mint function over there. And the mint must have the address, the amount and ituhitant profiles.
01:48:14.700 - 01:48:44.470, Speaker E: Then I'm creating another smart context, the token minter. And inside this IU use the interface. And I'm calling my interface token in the call structure. I will pass the address of the token to use in this interface. Remember that my token has a lot of functions, but I only need to use now the mint. So my interface only has the mint. I only need this.
01:48:44.470 - 01:49:12.168, Speaker E: And here we are. I have another function mint here on this smart contract. That's public key. Anyone can call this mint function and this mint function. It's using the token mint. And this is let's do it. Let's deploy, deploy.
01:49:12.168 - 01:49:50.330, Speaker E: And be careful here because I have more than one definition in my smart contract. I have the minter and I have the token minter. So I need to choose the token minter here. Okay, remember this is let's deploy it. Oh, what I need to put on deploy. I need to add the address of my token here. Let's get the address.
01:49:50.330 - 01:50:37.680, Speaker E: This is my token. So I'm passing a parameter during the deploy to use on deploy. Wait the confirmation. Wait a bit more. Done. So is this. Now I have a concept that can mint tokens.
01:50:37.680 - 01:51:19.224, Speaker E: Do you know that it work? Now what do you think about it? Let's see. I will get my address and I put the address I'd like to mint 100 more tokens. Transact. No, it's not working. And why is not working? Because I need to add my minter token contract in the role of the token. It's not yet. So the token didn't allow this contract to mint tokens.
01:51:19.224 - 01:52:43.020, Speaker E: Let's fix this. So I will get the address of my token minter. Then I will go to the token and add minter added this address over there it remember that you need to do this and put here your name and token minter address. Because after this you can mint tokens for other people. First that admin and this is my I can put this here as well it and it's confirmed. Let's see. Yes, now my token minter is in the minter hold and I can mint tokens.
01:52:43.020 - 01:52:49.390, Speaker E: I come back to the token Mint transact. Yes, it's working.
01:52:53.300 - 01:53:02.064, Speaker C: If you wanted to implement an allow list to only allow certain to do the minting, would you add in the mint function?
01:53:02.262 - 01:53:47.250, Speaker E: Yes, in the same way that I create in the hedge access, for example, I can create here like a mapping address, true or false, and use this here and not allow everyone. I can allow only some people to do this, but maybe doesn't make sense to do this inside the minter contract. I can do this directly on the token. I can add order address directly on the minter whole own token. I'm doing this way only because I delight everyone can mint tokens. This is my goal. So I don't have restrictions just now.
01:53:47.250 - 01:54:21.940, Speaker E: Let's distribute testnet tokens to everyone. Let's see. Would you like to mint tokens, any of you? You can try to mint my token. And remember that I was talking with. I forgot his name. No, it's not Jay I was talking with. Who is the guy over there? Austin.
01:54:21.940 - 01:54:56.970, Speaker E: Okay, Austin, can I mint your token now? Did you? Exactly. So I tried to use token minter from Austin now and try to get some tokens. Not my token now, but his token. Let's see. Token minter. This is mini. Okay, I'd like to try his.
01:54:56.970 - 01:55:34.180, Speaker E: Did you put your token minter here? Yes. Okay. Remix token minter at the address. The second token minter is not mine. It's from Austin. And let's add my address here, my account. And I'd like to have 1000 tokens.
01:55:34.180 - 01:55:58.088, Speaker E: I hope this token is good. Then transacting and confirm me. Yes, I can do this. So I'm minting the Austin token, not mine. And let's see the. I don't know what is this token? Let's see. Token.
01:55:58.088 - 01:56:28.390, Speaker E: I got the address. I get the address. Go to my metamask and add his token as well. Assets import and yes, it's the same name. Okay. And this is so interesting because I know my CS workshop and Austin is city workshop. Okay.
01:56:28.390 - 01:57:00.880, Speaker E: And I have 1000 tokens so I can mint his token. I can mint any token. Now that if you did this process. This is interesting. Now what about to define some price to mint tokens? We know that we can mint for free. But let's do another exercise and send eaters to a concert and receive tokens. This is the next goal.
01:57:00.880 - 01:57:23.430, Speaker E: Is it good until now. Do you have in depth? Okay, so I go to the next. I'm prepared to do now the token. I think it's token shop. The name. Let's see. Token shop.
01:57:23.430 - 01:58:07.056, Speaker E: Now we are creating the token shop. This is the token shop. Let's see if I need to change something here. No, this is good. And I will use the data feed from Chainlink inside the token shop. Let's understand what's happened here. You can see here that I'm importing another interface.
01:58:07.056 - 01:58:54.944, Speaker E: You know now what's the interface? And this interface is from Chainlink. I'm using the aggregator v three interface and think that each pair each code like ether USD or Btc USD. Each of these pairs has one address. Each of these is smart content itself. And using this interface I can access any of them. In fact in my case I'd like to access the iTUSD code on Gurley and this is the address that I need to use. Remember that to come to the beginning.
01:58:54.944 - 01:59:17.930, Speaker E: Now I have another interface. Here is the token mint interface. In fact it's the same of the other interface. Okay, I only have the function mint. This is my token shop. Remember that I'm using the price feed. This is the name that I put to get the information, the code.
01:59:17.930 - 02:00:06.580, Speaker E: I have the minter and I'm defining the price over there and for me the price like one token, it's $20 with two decimal places. I'm not sure if in some moment during my contract I have a zero missing. Okay maybe it's not exactly this but something like that. And okay, I have your owner here in the constructor. I'm passing not the token address, but I'm passing the token minter address and define the aggregator, the price feed that I'd like to use and the owners in order to get the price. I have this function. This came from the documentation from Chainlink.
02:00:06.580 - 02:01:07.340, Speaker E: Get latest price and I only would like to get the price, only this. When I have the price I'd like to calculate how many tokens can I get if I send ethers to my smart contract. So this is the token amount you pass the amount of iters I'd like to send. Then this will be calculated using the price of ether, the amount of USD that I can have converting from ether to USD and calculate how many tokens can I get. And this is the last function, you can see that I have a receive function. This is different. This is a default from solidity and the receive function in this case is payable.
02:01:07.340 - 02:01:40.936, Speaker E: This is the only function that will accept receive eaters in this smart content. If I don't have this and I try to send it, I can't. Not in this version of solidity. In other versions you can. But this is a mess. We have a lot of eaters lost inside contents. Okay, and is this what I'm doing this way? In fact, I do not call this receive function.
02:01:40.936 - 02:02:13.680, Speaker E: I only send ethers directly to my smart content and it works. It's amazing what I'm doing here. I'm calling the token amount to calculate and then mint tokens. It's only this. So are you prepared to do this? First I need to get my token minter address. Then you must be sure that you are in the token shop. Smart contract.
02:02:13.680 - 02:02:56.130, Speaker E: Paste the address of the token minter, not the token, must be the token minter and deploy it. Okay, let's wait a minute. Almost done. Yes, now it's done. Now I have the token shop. Let's go down. And you can see that I have the token shop here.
02:02:56.130 - 02:03:27.370, Speaker E: I'd like to know what's the price just now? Let's see, this is the price of iter in this moment. And we have some zeros here. Let's see how many we have. Eight decimal places. This is the it USD now. And please put your token shop for me. I'd like to buy tokens as well.
02:03:27.370 - 02:03:58.400, Speaker E: So put your name and token shop. You choose someone to buy tokens. What's mine? This is mine. Oh, sorry. Okay. Iu by tokens just now. How can I do this? This is my token.
02:03:58.400 - 02:04:34.712, Speaker E: Okay, I'm going directly to Metamask and I send ethers to my contract. Directly sent. I paste the address of my contract and I know that I have less than 0.1. Let's send 0.1 girly eaters to my contact. But how can I calculate how many tokens can I get? I'd like to do this first. Wait a minute.
02:04:34.712 - 02:05:02.490, Speaker E: I will come back here and I'd like to calculate the token amount. So I use any iters but here I need to use the 18 decimal places. I don't like to do this. Converter, I think. Converter, yes, something like that. Let's see. I think it's not this.
02:05:02.490 - 02:05:32.748, Speaker E: Not ethernet converter. No. Yes, I like this. Let's shed this issue first. Here we are. So remember that I'm sending 0.1 and this is in way is the minimum of Ethereum.
02:05:32.748 - 02:07:02.050, Speaker E: Let's put this inside my remix. And I will send it this and I will receive 68 tokens. But remember that I have two decimal places. So it means that I will receive zero point 68 tokens just now. I buy tokens. I buy my own tokens. Wow.
02:07:02.050 - 02:07:27.564, Speaker E: Amazing. I'd like to buy another token. Where is Christian now? I buy your token. Let's see if it's working. First I add your token in my metamask account. But remember, this is not your token. This is your token shop.
02:07:27.564 - 02:07:48.450, Speaker E: So I need to edit this. Not in my metamask account. I need to edit this here first, get an instance of your contact. Then I can get the token. I don't have the token here. I can't believe this. I need to put another.
02:07:48.450 - 02:08:16.510, Speaker E: I have the minter. And then if I go to the minter, I get your token. Okay, I need to put the token directly here. You do this in the future. So let's go. Token minter. I select the token minter to use that token minter account in christian address.
02:08:16.510 - 02:08:31.200, Speaker E: And he did this in a different version. Yes. Or I did. I don't know. So this is the token minter. It's not mining from Christian. And this is the token.
02:08:31.200 - 02:08:57.332, Speaker E: So now I get the token. I will add the token on my metamask account. Assets import. This is the first token. Okay. And I don't have any token just now. Okay, no tokens.
02:08:57.332 - 02:09:54.760, Speaker E: Let's get some tokens. Now I need to come back here to not the token minter, but to the token shop, to Christian token shop and send some link some eaters to this token. Did you change something or probably you get the same amount. This is same amount. Okay, confirm. Wait a bite it. Oh, I'd like to know.
02:09:54.760 - 02:10:14.240, Speaker E: I can discover how many tokens, if it will be the same. Let's see. Yes, the price is probably the same. Because we are in testnet. The price don't change so often like mainnet. Okay. Can pass five minutes and the price will be the same.
02:10:14.240 - 02:10:33.842, Speaker E: But I think it's done. Let's see assets. No, it is still binding. Okay, let's get more information here. I have the price. I have the minter. I can check if the amount is good.
02:10:33.842 - 02:10:58.060, Speaker E: If it's the same, it's different. Probably this is entire eater. Okay. It's weight as well. So this is the token price. Let's see if it's working now. Yes.
02:10:58.060 - 02:11:20.274, Speaker E: Cheddar, would you like to see my balance? Yes. Zero point 68. Fair. So I bought your talking. Wow. Another point that I told you, but I didn't share with you. I talk about this.
02:11:20.274 - 02:11:45.530, Speaker E: I'd like to show this a little bit. Here we are. You can get the data feeds not only related to prices, but there are other information as well. But you can see like let's see the popular. And you can see in different networks. Avalanche. Polygon, bnb.
02:11:45.530 - 02:12:14.340, Speaker E: You have more here, Optimus. Like this is the in Polygon. And you can see a lot of tokens here. Be fun. Over there. In the same way, remember that I shared with you some resources. And this is the basic example.
02:12:14.340 - 02:12:36.540, Speaker E: If you'd like to test this in a simple concept. This is only getting. It's only using the get latest price. So I use this inside my content. And do you have any question?
02:12:40.670 - 02:12:42.860, Speaker C: Can you go over again how the.
02:12:46.210 - 02:13:25.810, Speaker E: I had it coded. Yes, if you go to. Let's go to the right page inside the token shop. I had it coded in the beginning here. Yes, you can have a different rule. But in my case, I like to have coded in dollars and send ethers to discoveries. More questions so we can go lunch a bit early.
02:13:25.810 - 02:14:03.280, Speaker E: And I'm hungry. So thank you so much, everyone. And you are back at 01:00 p.m. With nfts and keepers with his shirt. Yes. I think we need to maintain I it. Yes.
03:34:35.270 - 03:34:55.870, Speaker B: So fun fact. Fact, I taught fifth grade for a year, so we can do all sorts of stuff like that. Yeah, the drama teacher. This wasn't quiet Cody. This was the drama llama. So fun stuff, I guess people filter in. Hopefully they can catch up coding.
03:34:55.870 - 03:34:57.920, Speaker B: I think it'll be good.
03:34:59.170 - 03:35:06.290, Speaker D: I'm echoing over there, I think. Okay. Can you think if you just mute?
03:35:11.350 - 03:35:40.750, Speaker B: Yeah, the live stream just got a close up, I think. Okay, so I'm Richard Gottlieber, one of the developer advocates at Chainlink Labs. We are going to build an NFT together. If you want to follow along, I think it'll be fun. If you have the same skill set that you had in the previous workshops with Sol where you can copy paste, then you too are engineers in the software development industry. So let's talk about nfts. Sol talk.
03:35:40.750 - 03:36:29.574, Speaker B: You built a token, and tokens are different than nfts in that nfts are a token, but the NF stands for non fungible. It's a fancy way of saying that you can't just swap them about. I like to think about tokens as like dollar bills, right? If I say, hey, give me a $5 bill, do I care what the serial number is on that $5 bill? No, I don't. If I say, hey, I just bought a painting from you, do I care what painting that is? Yeah. Right? I'd like to think if I bought a Picasso and I come home and it's suddenly your five year old's drawing, I'm going to be kind of upset, right? Like I care which one it is. So nfts are a representation of a thing like that. They're non fungible.
03:36:29.574 - 03:36:57.106, Speaker B: You can't swap them out. Common things are like crypto punks. You could think about them as tickets. Real estate is a non fungible item, right. If you go to your house, you care that it's your house, not someone else's house, right? Anytime you think your. And it becomes important, probably non fungible. So when I think about NFTs and I think about my past, I think about my first NFt.
03:36:57.106 - 03:36:59.558, Speaker B: Pokemon trading cards, anybody?
03:36:59.724 - 03:37:00.482, Speaker H: Pokemon.
03:37:00.546 - 03:37:01.062, Speaker D: Yeah.
03:37:01.196 - 03:37:37.890, Speaker B: So trading cards are unique, right? Even though a lot of people may have a surfing pikachu. Each card is unique, right? It's going to be a different amount of wear and tear on it, stuff like that. So those are kind of a good physical representation of what an NFT could be. And they have different varying rarities when we talk about things like this. If you think about a lot of common NFT projects, there's different rarity traits and stuff like that, right? And they're static because you don't want them to change. We talked about the Picasso painting and we don't want our painting to change. Right.
03:37:37.890 - 03:38:15.018, Speaker B: But personally, I think that type of NFT boring, I think NFTs can do a lot more. And common way to think about them is a fantastic use case. Again, if you have a piece of artwork and you want to have ownership of that artwork, you don't want it changing. You want it to be boring, right? Like you want it to be the thing it represents and never change. But I think there's a lot more that they can do. And we'll take a look at that today when we build out our project, because we're going to make a dynamic NFT, an NFT that we can change. So we have on the left here a crypto punk.
03:38:15.018 - 03:38:49.066, Speaker B: It's static, doesn't change. Cool project. Great use of a token that you want to have ownership of. On the right, there's this project called Lamello Ball where of the player change throughout the season. This is an actual project. And I think that is really interesting to have that kind of project where things change over time, right? What are some other things that we could do? So you could have scores, like that example. You could have experiences where as you go and do things, an NFT changes.
03:38:49.066 - 03:39:23.890, Speaker B: Imagine if you were a large corporation run by a mouse, and you had people collect experiences, right? And you could see their character changed over time. This is another project here where the chainlink logo changed in the NFT itself. Like the artwork changed based on the winner. So you're incorporating real world events into the blockchain. And that is really what I think is very powerful. And one of the things I really like about Chainlink. So ChainLink solves this problem of bringing off chain data on chain.
03:39:23.890 - 03:40:01.950, Speaker B: I like to think about, not to throw too many Disney references out there, but I like to think about the blockchain as genie from know, phenomenal cosmic power. Itty bitty living space, right? Like you have to live on the blockchain. If it's not on the blockchain, it doesn't exist until you have oracles come along. Those allow you to bring that off chain data on chain. So there's three different things I'm going to talk about today regard to Chainlink, and we're going to use one of them. So having an entity that can react to the real world used them earlier. Data feeds, right? Using that pricing information with price feed data.
03:40:01.950 - 03:40:38.170, Speaker B: Data feeds can also be used for other information like that weather, for example. That's going to be probably the easiest of them based on the name you're feeding in data into the blockchain. The next is VRF, stands for verifiable randomness function. We think VRF just having a provably is very important. I think Patrick might have more to say about that after me. But we will talk about randomness in our demo here in just a moment. And then finally we have chainlink keepers, which is a way to automate your smart contract.
03:40:38.170 - 03:41:04.600, Speaker B: I don't know about you and so if I can get a computer to do work for me, I'm all about that. So we'll be using this one in our demo. So I've like blazed through my slides. I'm not quite as fast as the guy from unstoppable mains, but any questions so far for automation? We'll take a look at that in the demo. I don't want to slow any other ones.
03:41:05.610 - 03:41:06.360, Speaker D: Yes.
03:41:13.050 - 03:41:40.000, Speaker B: So there's two ways and we will see them both address that question as well. The question was, what does event driven mean? We add that to our demo as well. Good question. All right, so don't worry about scanning this. You can type it in on your computers here in just a second. I'll give you the link, but we're going to make a dynamic nft. We're going to automate it with keepers and then we'll talk about what else we could do.
03:41:40.000 - 03:41:47.300, Speaker B: So we're going to be building this little dude on and if you want to go to this link, there will be two files there.
03:41:49.350 - 03:41:50.210, Speaker D: Contract.
03:41:50.710 - 03:42:00.930, Speaker B: The second one is the finished one. If you want to work on your carpal tunnel, you can type along or you can just copy and paste the finish. Watch as we talk about the contract.
03:42:05.670 - 03:42:06.700, Speaker D: I it.
03:42:17.690 - 03:42:19.510, Speaker B: Everybody good? Still typing.
03:42:24.890 - 03:42:37.200, Speaker D: Okay, it's we good.
03:42:37.890 - 03:43:01.974, Speaker B: Okay, so what are we going to build? It'll look something like this. This is on Opensea, you can see it here we have our awesome logo or a little dude, that image won't change. What will change are the stats of our player. So we have age, happiness and wealth. All of those things we can change. And we'll take a look at how to do that before we dive into.
03:43:02.012 - 03:43:02.600, Speaker D: That.
03:43:04.810 - 03:44:09.770, Speaker B: Bunch of different ways to store information for an NFT. This image itself is stored on something called ipfs, the interplanetary file system. It's a distributed file, so it is essentially a peer to peer way of storing information. What's really cool about it is it creates a hash when you upload something so that, you know, when you go to that URL on ipfs, it's always going to be the same thing, right? If we just pointed the image for this NFT to know I could have this, and the next thing you know, you're going to load your NFT up and it's going to be a picture of my face and you'll be really sad. So having a static source like ipfs is a great way to do this, especially since it keeps that distributed nature of things. If you go to IPFS tech, you can learn how to run your own ipfs node and all of that stuff. There are also services like Pinata where you can just upload stuff and it will put on ipfs for you and take care of all of that.
03:44:09.770 - 03:44:43.560, Speaker B: All of this is kind of outside the scope of what we're going to be doing here today, but we'll be using the images from ipfs. So I just wanted to talk about that, let you all know what was going on. Not in this demo, no. But yes, you'd need to do that if you wanted to ensure it was there. Okay, so let's jump into the actual code. We'll use remix to deploy it. I'm going to use just a code editor to walk through this.
03:44:43.560 - 03:44:46.680, Speaker B: Everybody read that? Okay in the back?
03:44:47.930 - 03:44:49.800, Speaker D: Yeah, good. Okay, cool.
03:44:50.490 - 03:45:20.340, Speaker B: So we've got kind of a few different steps here that we'll walk through. This should be if you followed that link, the starter contract. So we should all be on the same page there we've got our imports. That's where we're pulling in those other contracts. Right? Like when we did the token, we imported the contract to give us the ability to have the mintable token. So these are importing a bunch of different things from open zeppelin. The ERC 721 is the standard for nfts, so it's going to give us all the NFT stuff.
03:45:20.340 - 03:45:46.938, Speaker B: The UrI storage is going to be where the metadata for the NFT is stored. So it's going to be things like the image, the description, the name, those different stats that we had about like age, speed, wealth, all of that, the ownable contract. Make sure that only the owner can do things right. You can say it's only owner can do this, you can define the owner. We have a counter contract. This is going to let us just increment a counter as we mint one NFT. We'll start at zero.
03:45:46.938 - 03:46:31.558, Speaker B: The next one's one, two, three, these two. Here are some utilities to one convert. Aren't strings into strings? What that means is like when you think about a carry like a line of text, right? Like a sentence strings converting some numbers, integers into strings. And then base 64 is used to actually encode stuff in base 64 encoding, encoding the data within our NFT into base that we can pass that to openc and stuff like that. So import a bunch of stuff. We set up our contract, we have its name and this is where we're declaring the different types. That is so it is an ERC 721.
03:46:31.558 - 03:47:25.674, Speaker B: It's pulling in those imports that we had above. Right, the Uri storage and ownable as well. We let it know that we'll be using counters. We set up our counter token id. We'll be using strings for un to 256. What this means is that we can convert an unsigned integer into a string because when we have the stats of our NFT, we need to save everything in that stat block as a string, essentially, right? So when it says that we have a wealth of 51, that 51 starts off as a number, an integer, and we turn it into a string, while the way it looks to us doesn't change, solidity really cares about that. All right, so that's like the setup, the boring stuff.
03:47:25.674 - 03:47:38.270, Speaker B: Then we have this array of characters and this is going to be that IPFS data where we're talking about the actual images, right? So we have our little elf guy, we have a knight.
03:47:41.010 - 03:47:42.560, Speaker D: An ogre maybe.
03:47:44.610 - 03:48:16.166, Speaker B: There he is. Little ogre and a witch. So these are the possible different images that we could have for our character. All right, we create a struct, if you're familiar with other programming languages. I think of this like an object where we're going to say a player has an image, age, happiness, speed and wealth. So these are all the different attributes that make up what the player is. We then create an array of players.
03:48:16.166 - 03:48:27.710, Speaker B: So those little square brackets, that's an array. It means like a list of those. And we call it players. And then we create a mapping, which I believe we did earlier today, right? Mapping.
03:48:28.850 - 03:48:29.600, Speaker D: No.
03:48:30.050 - 03:48:30.800, Speaker B: Yeah.
03:48:31.250 - 03:48:31.902, Speaker D: Okay.
03:48:32.036 - 03:49:01.074, Speaker B: Blank stairs make me scared, y'all. So we create a mapping from the token id to the player. So when we mint the NFT, this will keep track of that player data that we're describing up above. Our constructor, which is used when we deploy the contract does nothing except for define the name and the token id for this NFT token that we're deploying. This is where we're starting out. We have a couple other things here. Burn and token Uri.
03:49:01.074 - 03:49:09.850, Speaker B: These come from Openzeppelin and I guess real quick I'll show you too if you go to open Zeppelin.
03:49:11.630 - 03:49:18.350, Speaker D: And check out their Internet speed.
03:49:22.850 - 03:50:04.234, Speaker B: Contracts docs, this is rough. In their documentation they have this wizard where you can build out a basic skeleton for either an ERC 20 soul, an ERC 721, or a couple of others. And you can pick things like if you want it to be minted, you want the ids to auto increment. You'll notice some of this stuff like ownable counters, starting to look familiar to what we have in our starter. Right, so here you can pick all these things, and then just copy paste is a great place to start. It's essentially what we have here, with a few things added on for the players. Okay, so starting out, we've got our basic skeleton here.
03:50:04.234 - 03:50:35.480, Speaker B: The first thing we need to do is we need to be able to mint an NFT or create an NFT, right? So what does that look like? So we will create a function called safe mint. And this is if you want to make sure that everything is right. Safe mint is pretty easy. If you want to type along the next function, update Uri, copy and paste that. We'll talk about why. But safe mint will allow us to mint an NFT to an address. Only the owner of the contract can do that.
03:50:35.480 - 03:51:13.060, Speaker B: Here we have some randomness that is like the best randomness I think I've ever seen. Patrick may feel differently, but what we do is we get the current number of the block that's being mined right now. It's a really big number, and we just hash that and use that to be our random number. So no one ever knows what the block number is going to be. When you run things, it's guaranteed. All of these things I'm saying about randomness, absolutely wrong, but Patrick will explain it. So you get your random number, and that's going to pick one of the four different characters, right? So we get our random number, we pass it in as.
03:51:13.060 - 03:51:34.490, Speaker B: You know what this little percent sign is called in math terms? Modulo. Yes, modulo. What does it do? That's correct. It gives you the remainder. So we have a really big number and we divide it by, in this case the length of our characters array, which is four. Right. We'll have a remainder.
03:51:34.490 - 03:52:06.238, Speaker B: So based on that remainder then we'll grab the value at that index location. So the going to be zero, one, two or three, right. Because if it's divided by four, we can have a remainder up to three. Otherwise we don't have a remainder. And so based on that we'll have either zero, one, two or three. So we're using that to kind of pick our random value. That's kind of how you use a random number, random number and get it to pick one of the values from the Array.
03:52:06.238 - 03:52:53.460, Speaker B: Does that make sense? Okay, we then have that list of players here and we add to it just basically the basic stats for our player. So this player value here is based on this struct, right? So we have image, age, happiness, speed and wealth. So we put in our image, that's the one that we just got from that random value. And then we're setting all the rest just to one to start out with. This is where if you wanted to change this so you don't start playing as a one year old, you could do that totally fine. We get our token id from the counter that we imported. We then store that in the value token id.
03:52:54.870 - 03:52:55.982, Speaker A: We increment.
03:52:56.126 - 03:53:11.154, Speaker B: Once we've got the value from that counter, then we say, hey, go ahead and increase the counter. So the next time we use it, we've got the new value and then we mint our NFT. So at this point we have this NfT that's just completely empty. It's completely blank.
03:53:11.202 - 03:53:11.366, Speaker D: Right.
03:53:11.388 - 03:53:57.830, Speaker B: But you have a token with nothing. Then we need to actually update the Uri which is like the metadata behind it. And this is why I said copy and paste this because in my opinion, this stuff here with dealing with the metadata json string is the most complicated part. Simply because if you miss one single quote or double quote or comma in the right spot, opensea is going to be like, cool. I have no idea what you're talking about and you'll see nothing. So just accept the frustration when you've missed a comma and just deal with it and you'll find it eventually and you'll be really proud of yourself or really frustrated, I guess depending on your personality. When you finally find that missing comma.
03:53:57.830 - 03:54:02.294, Speaker B: May or may not have taken me like 20 minutes to figure out that I was missing a comma in this.
03:54:02.332 - 03:54:04.602, Speaker D: Exact piece of code here. It's fine.
03:54:04.736 - 03:54:55.442, Speaker B: So we've got our Uri, our metadata that is going to be used for this NFT. You can see we've got the name, we're just calling it player NFT, a description. We have that image and this is where we start to reference what we stored in this players array up here. Right? So we have our image, our age, and you'll notice we're converting our age to string. So this entire block of information here needs to be all strings. Solidity is very particular about ensuring you are using the right types and you're consistent in your typing. If you try to pass an integer into this, it's going to complain and throw errors and say, hey, you're trying to use an integer instead of a string.
03:54:55.442 - 03:55:29.780, Speaker B: I don't know what to do, right, because I'm expecting a string. And this is not a strongly typed. It cares about the type of data that you're passing. So we've got all this here, all the different pieces, happiness, speed, wealth. We take all of this information and we use this function, Abi encode packed. Essentially what that does is this is a, it's going to combine them into one big string. Okay, so we have one string of JSON text.
03:55:29.780 - 03:56:25.170, Speaker B: JSON is just the style of, it's like JavaScript object notation, I think maybe wrong on that, but it's a type of formatting where you have this key value pairs of like name, player NFT description. This is your character. We take all that, we roll it up, we base 64 encode it, which looks crazy. If you ever look at base 64 encoded stuff, it's just like random characters. But the browser, your computer, it knows how to read that, and so it passes that information on and that's what actually will be rendered, the browser, through Opensea. So we get all that stuff that is stored in our Uri value here. We then add a little bit more text to the front of it, letting the software know, hey, this is data of the type application JSON and it is base 64 encoded.
03:56:25.170 - 03:56:43.420, Speaker B: We wrap that up into this final token string Uri or final token Uri, sorry. And then we set the Uri for our token. So we actually set the value for the token to all of this stuff up here. There's a lot questions.
03:56:46.640 - 03:56:48.140, Speaker F: Coming from the beginning.
03:57:04.310 - 03:57:20.920, Speaker B: You're absolutely correct. I'm not using that in this. I don't know if I use it by the end. That may be leftover code that shouldn't be there. That's probably a very good catch. Any other questions?
03:57:23.130 - 03:57:24.806, Speaker D: No? Okay.
03:57:24.988 - 03:57:49.710, Speaker B: At this point, if you wanted to deploy this. We could, and we'd have a static nft. We'd always be age one. We'd always be speed one, wealth one, happiness one. But that's, as I said earlier, boring. If you have a character and he never changes. So we need to now add the ability to age our character.
03:57:49.710 - 03:58:29.676, Speaker B: So we add another function here called age, and it's going to take in a token id. So when you see a function like this and you're passing in a value like this, that's going to be like, what's taken into the function, what you pass into the function. So we'll pass in a token id, and then we will use that token id to add one to the age. And I basically set this up so that every time, every ten years, happiness and speed increase one. You could do that if you wanted or not. You could have it every time you age. Once your happiness increases two.
03:58:29.858 - 03:58:30.300, Speaker D: Right.
03:58:30.370 - 03:58:56.420, Speaker B: This is essentially saying we're going to take the current level of happiness and then we'll add to it happiness times their age divided by ten. Now, question for you. If my age is five and I divide it by ten, what's this value going to return? What's five divided by 10.2? Does solidity understand?
03:58:56.490 - 03:58:57.204, Speaker D: Zero. Two.
03:58:57.322 - 03:59:19.464, Speaker B: No. So what does solidity understand? I think somebody. Yeah, zero. Right. Because it doesn't know decimals. And so if you try to do math with decimals, solidity is like, I got to this dot thing, and I just stopped because, I don't know, I haven't learned that math yet. So something to keep in mind, when you do math with solidity, there are no decimal places.
03:59:19.464 - 03:59:51.128, Speaker B: That's why we have to artificially put them in like we do with the token. Right, where ten was 1000. We're not doing that here. So if we aren't over ten, it's going to be when we divide it by ten. All right, so we've got our function to age. Cool. We change the age, we change the happiness, we change the speed, and then we call this same function that we just looked through a moment ago to update the Uri, right, where we set the string value, and then we update the UrI for our.
03:59:51.294 - 03:59:51.672, Speaker D: Right.
03:59:51.726 - 03:59:58.564, Speaker B: So we reset the metadata for our token, essentially. Does that make sense? Yeah, we're tracking.
03:59:58.612 - 03:59:59.256, Speaker D: Cool.
03:59:59.438 - 04:00:07.004, Speaker B: Okay, so we've got aging in here. Maybe we want to be able to increase and decrease wealth of our player, too.
04:00:07.122 - 04:00:08.204, Speaker D: Might be good.
04:00:08.402 - 04:00:17.872, Speaker B: That one is going to be really. We just have two functions. Gain wealth or whatever you want to call them.
04:00:17.926 - 04:00:19.090, Speaker D: That's what I call them.
04:00:19.700 - 04:00:50.270, Speaker B: So gain wealth. We're just going to increase by the amount that we pass in. So we pass in two values, the token id and the amount. And then we update the URI after we update that player's values and then decrease wealth or lose wealth is essentially the exact same thing except for our plus becomes a minus. So that's the whole contract. I know, I blazed through this. Questions everything makes 100% sense.
04:00:50.270 - 04:01:09.708, Speaker B: Yeah. Okay, so we want to try to deploy this. You all want to follow along. Now copy paste. When you copy paste, make sure you pick the second one. That's the completed contract. All right, so we got to do remix.
04:01:09.708 - 04:01:15.810, Speaker B: And this is the same contract, no differences. Yeah.
04:01:18.740 - 04:01:20.370, Speaker F: Player team.
04:01:24.680 - 04:01:26.490, Speaker B: So if you go here.
04:01:29.340 - 04:01:30.232, Speaker D: So not.
04:01:30.286 - 04:01:41.590, Speaker B: Zero but one, the finished. If you click raw, then you can just copy the whole thing.
04:01:42.600 - 04:01:49.438, Speaker D: Sure. Yeah.
04:01:49.604 - 04:01:58.100, Speaker B: So if you click raw and then you should be able to copy paste the whole thing. If you scroll down, do you see one?
04:02:04.720 - 04:02:05.996, Speaker D: Okay, cool.
04:02:06.098 - 04:02:13.664, Speaker B: So we'll put that into remix. We've used remix just earlier and I.
04:02:13.702 - 04:02:15.936, Speaker D: Will follow along with you all just.
04:02:15.958 - 04:02:31.844, Speaker B: To make sure in case I've done something silly somewhere along the way. All right, paste it in. We get our green check mark. That means we don't have any massive errors, right? At least from a compilation standpoint, it should work. May not do what we think it's going to do, but it should work.
04:02:31.882 - 04:02:32.470, Speaker D: Right?
04:02:33.400 - 04:03:13.872, Speaker B: That's why I just feel like green checkmark tells me it's going to work, but it may not do what I'm wanting it to do. So we'll need to deploy this. If you don't have your metamask picked here, make sure you pick that. You'll need to make sure you have the contract itself, the player NFT, and then we can deploy. Oh, one side note, I'm going to be on the Fuji test network. Everything is the same for just anyway, slightly faster for demo purposes, but go early is. Yes, yes.
04:03:13.872 - 04:03:25.110, Speaker B: Still on injected provider. So we have our contract deployed. Everybody deploy their contract. How many of you had deployed an.
04:03:27.900 - 04:03:28.408, Speaker D: Two.
04:03:28.494 - 04:03:59.776, Speaker B: Okay, so how many have deployed an NFT now? All right, so our contract is deployed. We need to mint an NFT, right? Like we have this contract, but we have no NFTs yet. How do we do this? Well, we'll need our wallet address or if you wanted to send one to someone else, you could put their wallet address in, but you'll need to take your wallet address and put it in safe mint. So I went up here to account. I just clicked copy you could also grab it from your wallets and copy it. And then you want to use the safe mint function, put your address in.
04:03:59.798 - 04:04:00.370, Speaker D: There.
04:04:04.070 - 04:04:39.020, Speaker B: Confirm that transaction. And once that is confirmed, you should be able to check and see that you actually have a token. So one way to do that is those contracts we imported from Openzeppen. Like, I don't know if you all noticed, there's a lot of functions here that we did not talk about. Most of those come from those contracts we imported. One of them is owner of. You can put in the token id.
04:04:39.020 - 04:04:54.110, Speaker B: Who knows what number computers count from zero. So the first token is token zero. So if you click on the owner of, and you put in zero here, you should see your wallet address is the owner of the first NFT.
04:05:01.400 - 04:05:02.150, Speaker D: Cool.
04:05:02.840 - 04:05:04.710, Speaker B: Am I going too fast? Is it?
04:05:05.320 - 04:05:05.732, Speaker D: Yeah.
04:05:05.786 - 04:05:37.076, Speaker B: Everybody good? Okay, so your token is there. If you want to see the Token Uri you can put in here. And this is what I'm talking about, that garbly goop of base 64 encoded data. This looks nothing like what we looked at, does it? But if we take this and copy it, make sure we leave off the string piece. We just paste it into our browser window. Something's really cool is. Now this looks a little more familiar, right? We don't need to do this.
04:05:37.076 - 04:06:08.400, Speaker B: This is just showing you that you can use that for this data. Okay, so we have our NFT created at this point. We can check it out on OpenSea. OpenSea is working for me. If we copy the address of our NFT contract. So the one that we just deployed, copy that and we head to testnets openc IO. That is probably really tiny.
04:06:08.400 - 04:06:35.000, Speaker B: It's testnets openc IO. So it is that. So we're going to this URL. If we head there and we paste in our contract address.
04:06:37.530 - 04:06:47.106, Speaker D: Maybe it.
04:06:47.228 - 04:07:15.308, Speaker B: Oh no, there we go. Okay, paste it in. We should see. So we have one NFT. Oh man, Internet's killing me. Did anybody else get something different than the little elf with the bow? You got an orc? Okay, cool. Okay, the green guy.
04:07:15.308 - 04:07:18.072, Speaker B: Okay. A little ogre.
04:07:18.136 - 04:07:18.364, Speaker D: Man.
04:07:18.402 - 04:08:06.230, Speaker B: It's so random, right? Y'all all got ogres. Totally random. Anyway, so cool. So we've deployed our NFT, right? And we can see, I think that's really cool. We can see the stats if we go and. Well, maybe y'all can. If we go down to levels, you can see all the information about your nf, right? So if we go back mix, we could gain if we put in 1000 and make sure we specify the token id for the one that and do that transaction we should be able to modify.
04:08:11.610 - 04:08:12.310, Speaker D: Now.
04:08:12.460 - 04:08:56.010, Speaker B: One thing to keep in mind, opensea caches data. That means they come and then when you come and look at it, they just show you that same picture unless you ask them to update that picture. So when you change the metadata behind your NFT, you'll need to click this refresh metadata button. That'll cause Opensea to go back out to and say, hey, what's the current data? And then you'll need to refresh the page maybe. And you should see that the wealth changed by however much you incremented it. So now we have a character we can do stuff with, right? Like you could use this in a role playing game. Can make your own D and D Nft.
04:08:56.010 - 04:09:05.194, Speaker B: Yeah, I think that's pretty cool. I mentioned though that I'm lazy and aging seems to happen on its own.
04:09:05.232 - 04:09:05.446, Speaker D: Right?
04:09:05.488 - 04:09:08.670, Speaker B: Like how many of you click a button every birthday?
04:09:09.250 - 04:09:09.662, Speaker D: Yeah.
04:09:09.716 - 04:09:09.934, Speaker B: Okay.
04:09:09.972 - 04:09:10.510, Speaker H: You too.
04:09:10.580 - 04:09:34.594, Speaker B: Okay. Yeah, me too. I just got another year click and gray hair starts showing up. So we can age our by putting in the token. By putting in the id and clicking age and doing this and making sure we come back every year and do this right. And that gets really. And then when I'm trying to keep these, that gets really annoying.
04:09:34.594 - 04:10:00.160, Speaker B: So let's find out how to actually automate this. So we're going to use chain link keepers to automate this. If you head to keepers, chain link keepers with two e's. Chain link, everybody got link earlier when you were getting your testnet eth because you'll need some so keepers chain link you should see not this.
04:10:07.230 - 04:10:09.420, Speaker D: Let me disconnect all these real quick.
04:10:11.230 - 04:10:38.710, Speaker B: You should see something like this where it says connect wallet. Yours though will say ethereum. Go early. Right. So you'll need to click connect wallet, ask you to use metamask and then you will connect your wallets. You should register a new upkeep. Everybody, right hand corner, there's a connect wallet button.
04:10:38.710 - 04:11:08.870, Speaker B: You're going to pick metamask, click connect, and then you'll have the ability to click this register new upkeep. Type in our metamass passwords.
04:11:09.290 - 04:11:10.310, Speaker D: We're good. Yeah.
04:11:10.380 - 04:11:26.780, Speaker B: Okay, so register new upkeep. There's a question about what it meant about the upkeeps. We have two types of upkeeps. One is time based. They're very simplistic. They're based on cron schedule. We'll take a look at those.
04:11:26.780 - 04:12:25.440, Speaker B: And then we have custom logic. Custom logic upkeeps are more of that event based upkeep where you'll have two functions. A perform upkeep function, check upkeep function is going to check if whatever things you want to be true are true, right? Like enough time has passed or a balance is too low, the speaker is rambling for whatever information you want to check, turn a boolean true or false, then it will perform the upkeep and actually run the upkeep. Time based upkeep is just going to be based on, is it this current time? If it is, run the thing that we want to automate. So we'll be using that. So you'll pick time based upkeep, our contract address. So remember we can grab that here remix, we can copy it from here, paste it in and we will click next.
04:12:25.440 - 04:13:05.020, Speaker B: It can't fetch the ABI. ABI is a application binary. It's essentially how to talk to each other. It's like an API, if you're familiar with those, we can grab that from remix as well. So if we head back to remix and we go to our compiler tab and we make sure we have the right contract selected here. There is a button here, Abi. If you just click that, it'll copy it all into your clipboard back to keepers and we'll paste it in.
04:13:05.020 - 04:13:53.670, Speaker B: Essentially what this is doing is it's exposing all of those different functions, letting the keepers network know what functions it can call. So all of those functions that we see in remix on the left here, it's letting other applications know about what all is available here. So we paste it in here and we click next. And you can see now we have the ability to call a whole bunch of options. That's what our Abi basically told the keepers network is like, hey, these are all the things that we can do. So we're going to call age and we're going to pass in the token id for our token that we minted. So token zero questions?
04:13:54.680 - 04:13:55.430, Speaker D: Yes.
04:13:57.640 - 04:14:05.930, Speaker F: I think this is what we're going to go through. So I just want to make sure. So for example, the example show like snow summer on the.
04:14:06.620 - 04:14:06.984, Speaker B: Yes.
04:14:07.022 - 04:14:11.796, Speaker F: So basically we can automate what that NFT looks like based off these keepers.
04:14:11.828 - 04:14:13.304, Speaker C: That we're implementing right now.
04:14:13.422 - 04:14:20.510, Speaker B: So these keepers would. When you check to update it.
04:14:21.360 - 04:14:23.404, Speaker D: Yes, sure.
04:14:23.522 - 04:14:44.944, Speaker B: So we'll click next and then we are cron expression here. There is a website Cron tab guru that will break down cron tab in human readable format.
04:14:45.072 - 04:14:45.364, Speaker D: Right?
04:14:45.402 - 04:15:07.208, Speaker B: So instead of like five four star star, it says at 405 that makes a lot more sense to me. But we have some examples here too. And for this we'll click the every 15 minutes example. And if you want to change it to every 1 minute, essentially what this is saying is every minute that's divisible by one.
04:15:07.374 - 04:15:07.752, Speaker D: Right.
04:15:07.806 - 04:15:48.596, Speaker B: So every minute that's easily divisible by 50. At the 1530 45 we change it to 1 minute. So you'll want to. Is that too small for you? So it should be click on every 15 and just take away the five. From there you can kind of see a layout of when the next times it will run. This is kind of like just to check and make sure that you're setting this up the way that you are expecting you'll click. We need to fill out some information, so we need a name for up.
04:15:48.596 - 04:15:51.620, Speaker B: You can name it whatever you want.
04:15:51.690 - 04:15:56.230, Speaker D: Smartcon workshop. Yes.
04:16:00.680 - 04:16:02.052, Speaker C: It's going in five minutes.
04:16:02.106 - 04:16:09.736, Speaker B: Increments of 1000, correct? Yes. It would be on every fifth minute of the hour.
04:16:09.838 - 04:16:10.104, Speaker D: Yes.
04:16:10.142 - 04:16:31.970, Speaker B: So if you. Five minutes then. Yeah, it would be every fifth minute of the hour. It's not dependent on when you start it, it's dependent on. So the star says every minute divisible by five evenly is what you're saying. So gas limits. This is where in demo world, I'm just going to put the maximum amount because I'm spending three money.
04:16:31.970 - 04:16:46.790, Speaker B: In real world, you'd want to make sure that you're picking a limit that is reasonable for what you're doing. Right. So if we look back at remix when we did things like age.
04:16:49.020 - 04:16:49.336, Speaker D: You.
04:16:49.358 - 04:17:35.270, Speaker B: Can actually see here it spent. So this gives you an idea of how expensive this is in terms of gas. But for this one, I'm just going to put a ridiculously high limit, the starting link balance. This will be the link that you got from the test faucet earlier. So start with five, put in email address, because if your goes too low, it will email you and let you. And you can put a project name if you want. We'll register our upkeep, we'll click that button down at the bottom, we'll confirm twice as we deploy the job and we request the upkeep itself.
04:17:35.270 - 04:18:50.090, Speaker B: At this point we take in our contract, let the keeper's network know about it, and ask the keeper's network to automate old really fast because every minute he's getting one more, I guess I didn't specify if it was years, but maybe it's minutes old. So we've got our upkeep registered, we can view our upkeep and within this screen we can see the history, all the details about how much our balance is, when it's going to be run next. What our actual chronic expression was, in case we forgot we have our history here, shows that we maybe, yes. So we've already seen 1 minute go by, so we've automatically called. So remember he was at two. Yeah, we aged him once so he should have been at two. If we now, and refresh this page, he's at three.
04:18:50.090 - 04:19:06.724, Speaker B: So every minute now our NFT is going to change all by itself. This example is getting older, right. It's kind of a basic example but I think this is really cool in that you can take something like this on chain, make it do things automatically.
04:19:06.792 - 04:19:07.136, Speaker D: I don't know.
04:19:07.158 - 04:19:11.490, Speaker B: I think that's really cool. What questions do you all have?
04:19:12.260 - 04:19:13.490, Speaker D: We'll start with you.
04:19:15.220 - 04:19:44.120, Speaker B: It hasn't updated yet. I'll say gorli does sometimes take a little bit longer. That may be part of it. Yes it is. So Chainlink, Oracle distributed Oracle nodes the Don is essentially a network of chainlink nodes that then run the VRF keepers data feeds.
04:19:45.420 - 04:19:46.072, Speaker D: Sure.
04:19:46.206 - 04:20:28.896, Speaker B: Yes. It would fluctuate. Yes. Yeah. It would be replacing the Uri, but you could still see what the old, like, if you think about it like a bank ledger, the blockchain, all the old information is still there, but you've kind of replaced what we're referencing for that token now. So I don't know.
04:20:28.998 - 04:20:29.312, Speaker H: Yes.
04:20:29.366 - 04:20:50.250, Speaker B: I guess to your question, like, yes, it kind of does create a new one, but the new one is the one. Does that make sense? Because we have a history of what it was and then we have what it is now. So I don't know if you consider that creating a new one or just updating. I guess anytime you update you're creating a new one.
04:20:52.700 - 04:20:53.496, Speaker D: Sure.
04:20:53.678 - 04:20:56.490, Speaker B: So look at what this actually looks like.
04:21:04.590 - 04:21:08.010, Speaker D: Let's go. I don't remember what the Fuji block explorer.
04:21:14.750 - 04:21:38.806, Speaker B: So for go early, this will look different. Very similar, but different. Which piece would you like to see? So we have. Oh no. So these are the transactions we can.
04:21:38.828 - 04:21:46.090, Speaker D: Take a look at here.
04:21:46.160 - 04:21:48.758, Speaker B: It's not going to be super duper helpful.
04:21:48.854 - 04:21:50.060, Speaker D: Look at it though.
04:21:56.520 - 04:21:59.770, Speaker B: It, but this is where that would be calling that function.
04:22:00.540 - 04:22:03.130, Speaker D: Okay, question over here.
04:22:04.540 - 04:22:15.950, Speaker F: Let's say you want to run this project over and so you can always go back in, update the ipfs with the latest photos and just continue.
04:22:16.480 - 04:22:35.030, Speaker B: So ipfs, when we look at ipfs, this hash here is static so you can't update it. If you wanted to have something like that where you could update it, you would need to use. Not efs. Yes.
04:22:38.280 - 04:22:39.830, Speaker D: Okay, sure.
04:22:41.400 - 04:22:45.664, Speaker C: So the age will continue to increment until you run out of gas.
04:22:45.712 - 04:23:04.910, Speaker B: Yes, essentially until we run out of link, it'll just keep going. So I don't know what it is now, but this whole time it's been ticking along. It's for UN 256. Maximum number is yes.
04:23:07.200 - 04:23:17.330, Speaker F: For this image. Is there a way for the little guy to earn the arrows and then have the image change?
04:23:19.940 - 04:23:48.390, Speaker B: Yes, in the same way that you change. In the same way that you change here. So we change like the age, for example, here you could change the value that you're passing in because every time you update the Uri, you could update everything. So you could have an asset with like, no cape, no arrows. An asset with cape, no arrows, an asset with both. And so you could change that as they level up. Yes.
04:23:54.560 - 04:23:56.808, Speaker F: Doesn't mean I need to have three different images.
04:23:56.904 - 04:23:57.550, Speaker B: Yes.
04:24:00.880 - 04:24:02.110, Speaker C: They live together.
04:24:06.000 - 04:24:10.480, Speaker B: You'd have separate, like complete images.
04:24:11.620 - 04:24:12.080, Speaker D: Yeah.
04:24:12.150 - 04:24:20.340, Speaker B: So not like three images on top of each other, but like a level one image, a level two image, a level three image.
04:24:25.080 - 04:24:25.830, Speaker H: Yes.
04:24:32.840 - 04:24:38.500, Speaker C: Let's say you're maintaining a collection, things that are modifying dynamically.
04:24:49.520 - 04:25:22.280, Speaker B: So you could approach that several different ways. You could create different upkeep for each token. Really not what you want to do. Or you could have the age function, for example, could check which nfts need to age, or it could age all of the nfTs. So from what you're asking about having like a dashboard of which tokens have aged, that is not. No, unless you created an upkeep for each token. If I'm understanding your question, the answer.
04:25:22.350 - 04:25:23.064, Speaker D: Okay.
04:25:23.262 - 04:25:24.344, Speaker C: I think you answered it.
04:25:24.382 - 04:25:25.016, Speaker D: Interesting.
04:25:25.198 - 04:25:25.784, Speaker B: Okay.
04:25:25.902 - 04:25:27.512, Speaker D: Because technically you could create a function.
04:25:27.566 - 04:25:29.400, Speaker C: To have every NFC.
04:25:30.240 - 04:25:35.470, Speaker D: Yes. Cool. Any other question? Yes.
04:25:35.840 - 04:25:38.620, Speaker C: Can I forecast on which block.
04:25:42.400 - 04:25:53.170, Speaker B: For the upkeep? So it should check every block. The way keepers works, it checks every block to see if it needs to perform keep.
04:25:54.040 - 04:25:54.790, Speaker D: Yeah.
04:26:00.920 - 04:26:09.880, Speaker C: You could actually, you put in the code, require block dot count or block number is, and then it would just run that block.
04:26:11.580 - 04:26:12.184, Speaker D: What's that?
04:26:12.222 - 04:26:15.800, Speaker C: If the gas permitted and all the other attributes permitted.
04:26:17.740 - 04:26:18.104, Speaker D: Right.
04:26:18.142 - 04:26:19.516, Speaker C: But you can also force it to.
04:26:19.538 - 04:26:20.888, Speaker A: Only run on that block.
04:26:21.064 - 04:26:35.200, Speaker C: You can do pretty much whatever you want to do. There is a caveat to that, though. Depending on the blockchain.
04:26:37.140 - 04:26:38.016, Speaker A: The nodes might.
04:26:38.038 - 04:26:45.404, Speaker C: Not check every single block. Like if there's a blockchain that does like 1000 blocks per second, maybe that's.
04:26:45.452 - 04:26:47.970, Speaker A: Like too many checks that were to do.
04:26:49.720 - 04:26:50.948, Speaker F: I got one more question?
04:26:51.034 - 04:26:51.764, Speaker D: Sure.
04:26:51.962 - 04:27:06.810, Speaker F: Let's say you have cosmos polygon. Can you run keepers across any of those specific platforms or just ethereum at this time?
04:27:08.220 - 04:27:15.544, Speaker B: Run it on multiple blockchains. Just to clarify your question, blockchain is kind of in a silo.
04:27:15.592 - 04:27:15.852, Speaker D: Yes.
04:27:15.906 - 04:27:17.740, Speaker B: Like the ones that are supported.
04:27:20.320 - 04:27:22.130, Speaker D: The easiest way to show that.
04:27:26.010 - 04:27:32.040, Speaker B: So you head to the documentation and you go to supported networks. So this is where they are currently?
04:27:33.450 - 04:27:35.240, Speaker D: Yeah. Cool.
04:27:35.710 - 04:27:36.982, Speaker B: I'm going to turn over to Patrick.
04:27:37.046 - 04:27:40.602, Speaker D: Do you need here next?
04:27:40.656 - 04:27:44.940, Speaker B: We got questions. One more. Oh, sorry. No, you're good.
04:27:49.150 - 04:27:52.880, Speaker C: Does it just try to basically hit the limit that you give it?
04:27:54.770 - 04:28:04.942, Speaker B: No, that is like an upper limit of what it will do. So if you notice, if we go back here to the one we just did.
04:28:04.996 - 04:28:05.694, Speaker D: Right.
04:28:05.892 - 04:28:29.370, Speaker B: I set my gas limit very high. That's going to be where the minimum balance comes in. So my minimum balance is fairly high as well because that's going to be based on the maximum gas that it could spend. If you look at how much it's actually spending, though, that's way less than like one and 1.6. So it's actually using will be just based on a regular transaction.
04:28:31.390 - 04:28:34.940, Speaker C: Let's say your gas is higher than what your.
04:28:37.390 - 04:28:37.802, Speaker H: Yes.
04:28:37.856 - 04:28:38.074, Speaker D: Yeah.
04:28:38.112 - 04:28:40.800, Speaker B: If it's too high, if it's above it, then it won't run.
04:28:42.450 - 04:28:44.320, Speaker D: Cool. Anything else?
04:28:45.650 - 04:28:48.510, Speaker C: Where can we manage the front door?
04:28:49.810 - 04:29:02.050, Speaker B: So right here, actions. You can either edit it at the gas limit, put more in, or cancel it. So we will give our player the fountain of youth and now they will stop aging.
04:29:08.090 - 04:29:11.880, Speaker D: Cool. All right.
04:29:15.210 - 04:29:16.794, Speaker B: We have a 15 minutes break.
04:29:16.912 - 04:29:19.260, Speaker D: Okay. All right.
04:29:21.310 - 04:29:22.250, Speaker B: Transition.
04:45:59.910 - 04:46:00.634, Speaker D: You?
04:46:00.792 - 04:46:01.500, Speaker E: No.
04:46:53.260 - 04:46:55.770, Speaker D: La la. Oh, now it should be good.
04:47:06.510 - 04:47:31.182, Speaker A: Test. I'm just going to use the internal microphone. It's a little bit quieter, but hopefully you guys on stream are okay. All right, cool. All right, cool. I'll just talk really loud. I guess the reason blockchain and smart contracts are so cool is they give us these trust minimization, right? They give us these unbreakable promises.
04:47:31.182 - 04:48:13.534, Speaker A: They give us a level of transparency that doesn't exist in the web two world. Right. In web two, when you make an agreement with somebody, when you say, hey, I'll buy your product for some service, whatever service they're doing is behind closed doors, you're not 100% sure what they're doing because there's no transparency. A perfect example of this is with a lottery. When you buy a lottery ticket, what are you actually buying? You're buying a fair chance at winning a million dollars. But where does the random winner picking happen? Do you get to see it? You have no idea. There's zero, absolutely zero transparency.
04:48:13.534 - 04:48:59.614, Speaker A: And this is something blockchain solves. Blockchain has full transparency, right? These unbreakable promises, because it's encoded on the blockchain for us to see. And we've seen this lack of transparency affect us in almost every aspect of our lives at one point or another. And one of the examples that I usually use that's the most understandable is this lottery example. So, back in the McDonald's ran this ad campaign called the McMillions or the McDonald monops. Some of you remember this, where you walk in, you buy your McFood or whatever, and you get a little monopoly thing, right? And if you get enough trains on the board or whatever, you win a million dollars. Sounds great.
04:48:59.614 - 04:49:25.206, Speaker A: And a ton of people bought McDonald's because of this, because they said, hey, I'm trying to win the million. Came to find out that between 13 and $24 million of this McDonald's monopoly money went to not people buying food, but a group of criminals who were doing the winner selection behind closed doors and just picking themselves every single time.
04:49:25.388 - 04:49:26.120, Speaker D: Right.
04:49:26.570 - 04:50:11.254, Speaker A: Huge lack of transparency. So at the end of my talk here, hopefully I will have convinced you that given the opportunity to choose a system where you have to trust somebody, going behind closed doors and doing something versus choosing an algorithm that will transparently and cryptographically guarantee you a fair result, you will always choose this one, given the choice between the two. And hopefully your friends and family will understand that as well. When you say, hey, would you rather me go behind this closed door, pick around a winner or just have the math do it for you? They're always going to choose the math. Oh, yeah. Your chance to win was zero. 0% chance to win the McDonald's monopoly lottery, in case that wasn't already clear.
04:50:11.254 - 04:50:18.482, Speaker A: And Richard was showing us that we can get random numbers in the blockchain, but he was showing us a not secure version of randomness.
04:50:18.546 - 04:50:18.994, Speaker E: Shocker.
04:50:19.042 - 04:50:50.574, Speaker A: I'm sorry he lied to you. Although he also was like, I'm lying to you, so I guess he told the truth to you. And something that we can do to solve this is using something called chainlink vrf or Chainlink verifiable randomness function. When you use Rng on the blockchain inside the blockchain. Blockchains are deterministic by nature. And with that definition, you can't have a random number in a deterministic system that defeats the purpose of randomness. If you can predict what the number is, it's not really random.
04:50:50.574 - 04:51:26.560, Speaker A: So inside your blockchain, you can't have a random number, which is why we need to look outside the blockchain, which is where chainlig oracles come into play. A chain like oracle can then verifiably guarantee that the number is random using some cryptographic magic. And we'll show you that in a little bit. Chainliverf provides verifiable randomness, and a ton of applications use this. One of my favorite ones is this one called pool together, which is a defi protocol where you put money in and it goes off and invests your money for you. And then every week it picks a winner. And that winner gets all the savings, all the yield earned for that week.
04:51:26.560 - 04:52:04.406, Speaker A: And it's really cool protocol because the expected outcome is actually positive. It's a fun way to invest a really cool protocol, but we see a lot of other protocols as well. For example, many NFT applications use chainlink VRF to get random numbers, get random stats, build provable scarcity into their NFTs, like Avagochis, axie, infinity, ether cards, Pokemon, et cetera. So that's kind of the precursor to everything. Now we're going to jump into a real scenario. So you guys have been here for me today. You've been learning some solidity.
04:52:04.406 - 04:52:26.126, Speaker A: It's time to put what you've learned to the test. So this QR code on screen and this link here, you have the next ten minutes to exploit it. This contract address has this code here called contract bad lottery, because surprise, surprise.
04:52:26.158 - 04:52:26.866, Speaker H: It'S not going to be a good.
04:52:26.888 - 04:53:32.610, Speaker A: Lottery, where we use some on chain randomification to pick a random number and pick a winner. So this line right here, if we zoom in, lock to it, doing this un 256 random number equals this weird hashing stuff of the block difficulty and block timestamp. And this percent thing is called a modular function, which basically just means that this random number can be any number between zero and 100,000 in solidity. You can do kind of these cool little underscores to separate the three zeros, which is kind of nice, makes it more readable. So this function here, enter lottery, you enter a guess in, hopefully you would enter a guess between zero and 100,000. And if your guess is this random number, you get set to be the winner, the winner of this contract. So right now, if we go to read contract, unless some of you already beat it, which would be very surprising, and my Internet decides to work, if we go to read contract, we go to winner.
04:53:32.610 - 04:53:58.318, Speaker A: Right now it's nobody, however, in this code, and this is on grilly, right? So go to faucets, chain link, get some testnet eth. If you haven't already, you can enter a guess. And if you go to the right contract tab in ether scan, once it shows up, or maybe it never will, you can connect to web3.
04:53:58.404 - 04:53:58.766, Speaker D: Hit this.
04:53:58.788 - 04:54:05.458, Speaker A: Connect to web3. Swap. Go to my metamask. Going to connect.
04:54:05.544 - 04:54:05.890, Speaker D: Next.
04:54:05.960 - 04:54:06.580, Speaker E: Connect.
04:54:08.150 - 04:54:11.954, Speaker A: I can now put a guess in here. I'm going to put one, two, three, or one, two. I'm going to hit.
04:54:11.992 - 04:54:12.580, Speaker D: Right.
04:54:14.490 - 04:54:23.362, Speaker A: I'm going to refresh, actually, because it's being very slow. Connect to web3. Okay, metamask.
04:54:23.506 - 04:54:26.680, Speaker D: Good guess. Three. Right.
04:54:28.250 - 04:54:29.980, Speaker A: Metamask is going to pop up.
04:54:33.310 - 04:54:33.626, Speaker D: And.
04:54:33.648 - 04:55:07.880, Speaker A: I'm going to send it. So this is me making the guess of one, two, three. Now, since you guys saw the code here, you know that, or you just trusted me, which you showed in this case, that the possible chance of me winning this is hypothetically one in 100,000, right? Because that's what my random number, it's going to be between zero and 100,000. However, you can actually have a one out of one chance of getting this random number, because this actually isn't a random number at all. Five to ten minutes.
04:55:08.970 - 04:55:09.574, Speaker D: Have fun.
04:55:09.612 - 04:55:10.502, Speaker H: Try to exploit this.
04:55:10.556 - 04:55:53.200, Speaker A: Try to be the winner. Yes. Here's the QR code. You all have five to ten minutes to try to exploit this. You all need to put your security and hacker hats on. What can you do? Brownie points or something?
04:55:59.330 - 04:56:00.400, Speaker D: What's that?
04:56:02.630 - 04:56:14.600, Speaker A: Anytime I say brownies now, I think of that python framework. Let's go see if people are sending transactions here.
04:56:18.330 - 04:56:19.078, Speaker H: Okay.
04:56:19.244 - 04:56:22.440, Speaker A: Transactions are coming in. People are trying to win.
04:56:22.890 - 04:56:23.446, Speaker D: Let's see.
04:56:23.468 - 04:56:59.266, Speaker A: Has anyone won yet? No. I know, right? There is a chance somebody actually accidentally. This contract is on chain. This is immutable. You can't change this contract, but you can pick the random winner. But how can you do that? Or maybe you can't. Yeah, we'll go to 32 or something.
04:56:59.266 - 04:57:17.340, Speaker A: 232. Who here thinks they have an idea of how to exploit this? Who here is like, I have no clue. This is witchcraft. To which degree? All right, call people. Who here didn't raise their hand? Nice. Okay. All right, there we go.
04:57:17.340 - 04:57:39.774, Speaker A: What's that? Hint remix. That's your hint?
04:57:39.942 - 04:57:44.046, Speaker D: It hints.
04:57:44.078 - 04:58:16.202, Speaker A: Number two code. He's picking up what I'm putting down. We'll go for three more minutes.
04:58:16.256 - 04:58:21.630, Speaker C: Actually, if you remember earlier when you made a contract, call another contract.
04:58:26.290 - 04:58:37.186, Speaker A: No winners yet. We got some people teaming up. I like.
04:58:37.208 - 04:58:38.980, Speaker D: That's good.
04:58:49.670 - 04:58:57.098, Speaker C: Question. So, no, I mean, you can try.
04:58:57.184 - 04:59:25.730, Speaker A: Do whatever you want. You can do for the people in the chat asking, do whatever you want to try to figure it out. All you got to do is be the winner. Just be the winner. And then if you do get the winner, just like, stand up and be like, I'm the winner. Bingo.
04:59:29.350 - 04:59:45.740, Speaker D: No winner yet. What's that? What number.
04:59:54.190 - 04:59:58.570, Speaker A: Equals guests, winner equals message sender.
05:00:09.910 - 05:00:10.660, Speaker D: It.
05:00:28.310 - 05:00:32.638, Speaker A: Keep hearing, like on a monopias.
05:00:32.654 - 05:01:18.658, Speaker D: Of like, oh, figure here's it's working.
05:01:18.744 - 05:01:19.570, Speaker C: Remix.
05:01:21.830 - 05:01:35.660, Speaker A: I raise your hand if you want two more minutes. Raise your hand if you're like, no, I'm done. Okay, we'll do two more minutes. Two more minutes. Overthinking it.
05:01:37.550 - 05:01:53.970, Speaker C: I was just going to import that. You could just import the Abi and call it then I sat there, breathed.
05:02:28.430 - 05:02:29.146, Speaker D: Should I go to.
05:02:29.168 - 05:02:30.380, Speaker A: I go to three, right?
05:02:31.070 - 05:02:32.410, Speaker D: Forget the schedule.
05:02:35.870 - 05:02:37.260, Speaker A: I think I go to three.
05:02:39.150 - 05:02:39.900, Speaker D: It.
05:03:04.910 - 05:03:05.660, Speaker F: It.
05:03:17.470 - 05:03:17.930, Speaker D: Yes.
05:03:18.000 - 05:03:22.160, Speaker C: Even if I choose and got a text from a friend, should I say it or not?
05:03:26.050 - 05:03:53.414, Speaker A: Well, I'm about to explain it anyway. All right, y'all, fingers down, pencils down. What's that? 315. Okay, cool. Challenges like this, by the way, everyone should come to Friday's hacker house. We're going to have a ton of really fun challenges like this. They start off much easier than this and they get harder, but, yeah, I love little fun challenges like this.
05:03:53.414 - 05:04:42.166, Speaker A: So I heard a lot of you pretty much getting it, but not sure how to put it in. So in this code here, what do we see? Okay, we see we're getting this random number and we're getting it from a hash of the block difficulty in the block timestamp. Now, if you're unfamiliar with hashes, okay, that might make it a little bit more complicated, but a hash is going to be the exact same every single time. It's basically you're just mixing up some data and you're getting this string. So I heard some people go, hey, if I know the block difficulty and the block timestamp, do I know the random number? And the answer is basically yes, right? If you know them, you can guess what the random number is. But what we were having a hard time putting into code, into guessing here, is how do we actually do this?
05:04:42.188 - 05:04:42.374, Speaker D: Right?
05:04:42.412 - 05:05:22.334, Speaker A: If you go to the contract like I was showing you, if I do, 123456, I'm going to have a one in 100 chance. But what we can do is we see here, right on this line, this is how this random number was picked and I've got a, I should have put a QR code up for here too. And I've seen a lot of protocols use some type of randomness like this before and get hacked for a lot of money. So this is your PSA. Do not use this as a random number because I'm about to show you how I'm going to get the random number and be the winner. Like that. Right? And here's an example of where this happened in the wild, where somebody used this type of randomness to get a random number.
05:05:22.472 - 05:05:22.834, Speaker D: Boom.
05:05:22.882 - 05:06:44.030, Speaker A: It was an NFC project and some, somebody. Sorry, everybody.
05:06:45.040 - 05:06:45.900, Speaker D: Yep.
05:06:51.120 - 05:06:54.700, Speaker C: I got a reaper on one of my employees.
05:06:55.780 - 05:07:24.072, Speaker A: That means somebody probably won. Then what did I do? Full screen. So if somebody got a revert, that means somebody probably got the random number. Yeah, somebody won. Hey, who won? What's up? Okay. All right, congrats, Chad. All right, so somebody won.
05:07:24.126 - 05:07:24.476, Speaker H: Good job.
05:07:24.498 - 05:07:33.150, Speaker A: To whoever you are out there, let's break this down. So let's just do it all in remix then. So I'm going to deploy this.
05:07:34.880 - 05:07:35.196, Speaker D: To.
05:07:35.218 - 05:07:45.744, Speaker A: My virtual environment here. So now we have this bad lottery. It's the exact same, right? If I do one, two, three, enter lottery, the winner is going to be zero. Hopefully you all can see this on the side. I know it's a little small. Can I zoom in on that? Not really.
05:07:45.782 - 05:07:46.610, Speaker D: Okay, whatever.
05:07:48.740 - 05:08:05.370, Speaker A: What we can do is we can, okay, let's use what we know here to make our own contract that will do the exact same thing and then just put it into our own contract. So we're going to make a new contract. We're going to call it not an artifact, close that up, we'll call it.
05:08:07.180 - 05:08:07.688, Speaker D: Pat.
05:08:07.774 - 05:08:13.768, Speaker A: Exploit has already made one called exploit solo with the answer. Just going to copy this because I.
05:08:13.774 - 05:08:22.044, Speaker D: Don'T feel like typing that contract at exploit like this.
05:08:22.162 - 05:08:57.796, Speaker A: And so what we can do is if we go to our bad lottery, we can see, okay, this lottery has this enter lottery function and we can have our contract call this. Now, we didn't really talk about interfaces before, but you could have made like an interface type thing. An interface is just a way for us to interact with another contract and to call another contract's function. So we saw with what Richard was doing with some of the other presenters were doing how we can actually have contracts call other contracts.
05:08:57.828 - 05:08:58.120, Speaker D: Right?
05:08:58.190 - 05:10:10.790, Speaker A: So we're going to use this interface and we have one function function to enter lottery. So I'm just going to copy this put into my exploit and boom, now that we have this interface, we can call that contract with our own contract. So in our contract we'll do a function called attack and we'll just have it pass the address of the lottery, make this public, and in here we'll just say, okay, at our lottery address. So we're going to wrap our lottery address in this interface, which is how we can call it. We're going to do the function guess interlottery, go back to the exploit, paste it here. And now we're just doing the exact same thing to get the random number, which isn't really random. Grab this, copy it, paste it.
05:10:10.790 - 05:10:37.896, Speaker A: What I do wrong here, total size is what, 100,000. So we'll do 100,000. So now if we actually deploy, so we have our bad lottery here, right now there's no winner. Let's go ahead and deploy our exploit. We'll deploy it. So now we have our bad lottery and our pat exploit. We'll take this contract address of our lottery.
05:10:37.896 - 05:10:40.988, Speaker A: Remember, the winner right now is nobody. We'll paste it in here.
05:10:41.074 - 05:10:41.672, Speaker D: Boom.
05:10:41.816 - 05:11:03.204, Speaker A: We'll call attack function, tac goes through, and now we're the winner. So we have successfully done our first exploit in just day one of learning solidity. Wow, you guys are learning quick. Great work, everybody. So this is clearly a bad form of randomness. And we can see exactly right here why. Right.
05:11:03.204 - 05:11:47.076, Speaker A: So remember, everything on chain is deterministic, so keep that in mind when you're working with randomness, you do not want to use system like this. And I'm going to show you guys how we can use chain linkbrf to get a verifiably random number that is immune to attacks like this. Questions before we do that, though. Yes. So when I run this transaction, block timestamp is going to be the same in this part of the transaction as the other part. Because with the way the transaction, the way the code works, it's happening in the exact same block at the exact same time. Right? Because this code is calling the other code.
05:11:47.076 - 05:12:19.950, Speaker A: Right. So you can imagine this block timestamp variable, it's set right at the beginning of the transaction. So every single time you see blocked a timestamp in the rest of the transaction, it's going to be the same. So it'll be the same here. And then this contract Pat exploit will call bad lottery, which again blocked a timestamp is going to be the exact same as it was before. So it's going to be the same throughout the entire transaction. What's that? Why not call system time block timestamp is the equivalent of system time in the blockchain world.
05:12:19.950 - 05:12:51.784, Speaker A: Because in sys time, that's like on your local computer, block timestamp is like the timestamp of the blockchain, which is like this decentralized network. So if you were to call system time on an individual node, well, the blockchain doesn't care what time it is on your node. It only cares what time it is on the blockchain. Good question. Any other questions? Who's like, this makes sense to me. Who's like, this is witchcraft. And if it is, it's fine.
05:12:51.784 - 05:12:56.872, Speaker A: Okay, both this makes sense to me, but it's also witchcraft. I love it.
05:12:56.926 - 05:12:57.930, Speaker D: Okay, cool.
05:12:58.380 - 05:13:04.108, Speaker A: So now that we know how this is insecure randomness, let's go to docceptchain link and let's figure out how we.
05:13:04.114 - 05:13:05.624, Speaker D: Can get true randomness.
05:13:05.672 - 05:13:07.036, Speaker H: Right. And so this will be helpful so.
05:13:07.058 - 05:13:14.812, Speaker A: That we can have those transparent lotteries, we can have those applications that need random numbers that actually are random.
05:13:14.876 - 05:13:15.490, Speaker D: Right?
05:13:16.580 - 05:13:24.770, Speaker A: So if we go to docs chain link, real similar to know Richard Sol and everybody has been showing so far, we just scroll down to using.
05:13:26.820 - 05:13:27.292, Speaker D: Me.
05:13:27.366 - 05:14:00.444, Speaker A: And we can go to get a random number and there's a button somewhere down here. And this is the whole code that we need to get a random number with channel and we can just hit this button, open a remix, drop the code in remix for us. Why? Because copying pasting is too much work for me. So just hit the button. So here we are back in remix and we're going to have all this chain link code loaded up once my Internet wants to cooperate. All right, cool. So we have all this code here.
05:14:00.444 - 05:14:43.470, Speaker A: I'm just going to give a brief rundown of how it works and then we'll see it in action. So what's happening is at the top we're importing a whole bunch of chainlink stuff. For all intents and purposes. You can just see, hey, this is some back skeleton code to have chainlink work, right? You kind of can ignore it and we have our contract do this is mentality. So it's going to inherit all the functionality of this code that we just pulled in. And then we just kind of have a whole bunch of configurable parameters that I'm going to explain in a minute. All these are just configurable parameters, which I will explain.
05:14:43.470 - 05:15:25.992, Speaker A: The main bread and butter, though, happens in this request random words function, which I know is kind of small. This is the function that's going to submit a request in one transaction and it's going to wait actually for the chainlink node to respond in a second transaction. So chainlink vrf is actually a two transaction process. So we make one transaction to emit the request and then we wait a little bit and then the chainlink node responds. Right. And this is good again, because if it all happens in the same transaction, then as we just saw, we can just go, okay, I'm just going to do the exact same thing that that first transaction did.
05:15:26.126 - 05:15:26.708, Speaker D: Boom.
05:15:26.804 - 05:15:52.800, Speaker A: I have the winning number here. And with the chain link node we can pick how many random numbers we want. We can set up how much gas limit we want, we can do the number of confirmations, there's all this configurable stuff. And I'll show you how to do this. So what we can do is we're going to switch over to injected web3, we're going to switch to metamask, which I got to compile this first.
05:15:52.870 - 05:15:54.050, Speaker D: Let'S compile this.
05:15:58.500 - 05:16:01.170, Speaker A: Whatever that wants to compile. And there's a.
05:16:03.540 - 05:16:18.990, Speaker D: Random number it, sorry, 1 second.
05:16:23.470 - 05:17:22.998, Speaker A: I'm just going to add one piece to it. So this s request thing is a mapping, but that can be a little bit tricky to view. So we're just going to save, we're going to do a 56 last rand equals, just to make it easier for this demo, it'll work fine without adding this last rand equals random words of zero. Then I'm just going to do this last rand public. This gets us just one of the random numbers, saves it to a global variable so we can easily read it. So I'm going to compile, let's go ahead and go to deploy now. To deploy this, it takes this parameter called the subscription id.
05:17:22.998 - 05:18:07.718, Speaker A: So to work with Chainlink VRF, we actually have to work with another contract called the VRF coordinator. So this is another contract on Ethereum, avalanche, whatever testnet that coordinates getting the round of numbers back to us. So for us to work with that, we can go to VRF chain link. And this is just a helpful UI to help interact with this contract on chain that helps us get random numbers back. So what can zoom in a little bit, we can just hit this create subscription button and this will create a subscription for us. And it'll have pretty much all the configurable parameters that we want right in here. So let's go ahead and create subscription.
05:18:07.718 - 05:18:54.380, Speaker A: Metamask is going to pop up. So we're calling this create subscription function on this contract on chain. To set this up, we'll go ahead and confirm. And this is going to set us up a subscription for our wallet address. Right? So my wallet address is now going to get its own unique subscription id that we can use to get random numbers. Then we get to kind of chill out, wait for a little bit. Bob really wants to.
05:18:54.380 - 05:18:59.100, Speaker A: Of which one?
05:19:04.050 - 05:19:04.558, Speaker D: Yes.
05:19:04.644 - 05:19:08.080, Speaker A: So if you go to docs chain link.
05:19:09.410 - 05:19:10.480, Speaker D: What's that?
05:19:13.410 - 05:19:28.278, Speaker A: Yes, soul's adding it on the pad. If you have the pad. But yeah, docs chain link. And just scroll down to get a random number. And then scroll down. There's like an open and remix button that you'll get at. All right, cool.
05:19:28.278 - 05:19:58.014, Speaker A: So now our subscription has been created and to get our random numbers kind of similar to keepers, we have to fund it with link. Every time we make request, we spend a little chain link token. I currently have no link, so bosses chain link. Whoops, I forgot to give myself link. I'm going to have to log into Twitter, aren't I? Oh, unchecked to eat, right.
05:19:58.052 - 05:19:58.302, Speaker H: Okay.
05:19:58.356 - 05:19:58.990, Speaker D: Yay.
05:20:08.550 - 05:20:21.894, Speaker A: I was like, I'm going to have to stop sharing screen. Put them at bed. Right, bunnies. This is the real test. Can I get all the bunnies? Oh, wait.
05:20:21.932 - 05:20:22.870, Speaker H: Oh, did they?
05:20:23.020 - 05:20:39.886, Speaker A: I'm screwed. Oh my God. They know I'm a bot. They know I'm not hammock or I.
05:20:39.908 - 05:20:41.310, Speaker D: Just have to refresh.
05:20:45.810 - 05:20:46.960, Speaker C: It should happen.
05:20:48.610 - 05:21:07.010, Speaker A: I had it. I fooled them. Okay, here we go. Round two. House covered in snow.
05:21:07.510 - 05:21:14.630, Speaker C: That one just has. No one could argue.
05:21:15.850 - 05:21:19.660, Speaker A: I was going to say, it's like focusing so hard there. Okay, here we go.
05:21:20.030 - 05:21:20.666, Speaker D: All right.
05:21:20.768 - 05:22:08.178, Speaker A: Getting me some links so I can fund the VRF subscription. This is the easy part of the demo here, just depending on Wi Fi cooperation. But yeah, if you like little puzzles, be sure to come to the haggard house. None of you are going to finish all of my puzzles unless you're a wizard, in which case we will hire you. If you get all 20, we will be very impressed because it's impossible. Yeah, and then once we get our tokens in here, we'll come back over to the VRF Craigslist subscription. We'll add some funds in here, we'll get a subscription id, and then back in remix.
05:22:08.178 - 05:22:38.324, Speaker A: That's what we're going to drop into here for a subscription id. Because in order for our random number to get. In order for our contract to get a random number, we need to have a subscription. So let's go back to Grilley. Now that I hit refresh. Recent subscriptions. My subscription.
05:22:38.324 - 05:22:53.790, Speaker A: I have this subscription id 27 37. So I'm going to add funds to it. Add ten. It's way more than I need, but maybe it's just my laptop that's slow. Oh, it's just everybody.
05:22:54.400 - 05:22:55.004, Speaker D: Okay.
05:22:55.122 - 05:22:58.428, Speaker A: All right, well, you all get to.
05:22:58.434 - 05:23:00.350, Speaker D: Be slow on the wifi with me.
05:23:00.880 - 05:23:24.330, Speaker A: So while that's going through, it's sub id 27 37. And then I can go back to remix and just pop that in here. 27 37 is going to pop up. I'm going to deploy this to the gorilli Testnet. Go early, gorilli. Go early. Go early.
05:23:24.330 - 05:23:28.280, Speaker A: Yes. Go or lie.
05:23:28.780 - 05:23:29.192, Speaker D: Yes.
05:23:29.246 - 05:23:32.024, Speaker A: We should have a competition to see who can say test.
05:23:32.062 - 05:23:37.690, Speaker D: That name is the most wrong while potentially being right.
05:23:40.700 - 05:24:12.304, Speaker A: So we're launching this, and as I was saying before, it's got a ton of different configurable parameters. You can read them into the docs. The big ones are going to be this thing called key hash, which is known as the gas lane. It's going to specify the maximum gas you can spend, like just in case gas prices spike. And you're like, oh, I'm not trying to pay a million GUI for my random number. You have a callback gas limit, which is the amount of gas that you're willing to spend. Request confirmations are how many block confirmations in order for your random number to be like, okay, it's solid.
05:24:12.304 - 05:24:56.608, Speaker A: Now, the number of words is the number of random numbers you want and et cetera. So now that we have this and we have our VRF funded, we can now do something called add consumer. So we've added link, we've created a contract, and now we can say, okay, the contract that can request random numbers from you is the one that we just deployed. So we copy that address, paste it in here, add consumer. And yes, for those of you who are curious, you don't have to use the UI at all for this. If you're super savvy, you can just have a script that does all this behind the scenes. And that's normally what I do when I'm coding something serious.
05:24:56.608 - 05:25:24.700, Speaker A: I just have a script that adds consumer create, subscription fund, blah, blah, all that stuff. Most of the starter kits, if you're familiar with like hard hat, foundry, brownie, et cetera, they have some type of scripting feature that allows you to automate a lot of this process. So you don't have to sit and wait on the UI. You can just know fund, create, subscription, et cetera, and be good to go. All right, cool. Consumer added. Now, what I can do back in remix is I created this number called last rand.
05:25:24.700 - 05:26:19.132, Speaker A: Right now it's nothing, right? Because we don't have a random number. But what I can do is we can call this request randomness function now request random words. And what's going to happen is, like I said, we're going to send that request and we're going to have to wait for the chain link node to respond with our random number. Oh, actually I didn't need to put the last random, I forgot there's the last request id that we could have used, but I'll show that as well. So now that we've sent the request, if we go back to our subscription, we do a little refresh here. We should see the UI be like, hey, a request has been initialized and there has, right, there's now this pending request, pending for 8 seconds, 9 seconds, however quickly the Wi Fi wants to go. And once the chainlink node gets this request, sees that this has been finalized on chain, it's going to go, okay, great.
05:26:19.132 - 05:26:39.670, Speaker A: It's going to deliver us a random number back through this contract called the beer of coordinator. This is a contract on chain. You can check it out. It uses a lot of kind of public key cryptography to guarantee that our random number is in fact random and not gainable. So if you're curious on how it kind of works under the hood, be sure to go check that contract out.
05:26:46.040 - 05:26:47.110, Speaker C: By the way.
05:26:47.580 - 05:26:48.330, Speaker A: Absolutely.
05:26:51.820 - 05:26:52.570, Speaker D: Yeah.
05:26:56.220 - 05:27:24.130, Speaker A: Basically, a lot of people didn't want to have to script everything out and they wanted the UI to get their render numbers. So that's pretty much it. Yeah, it's kind of new. It's constantly being updated because it is kind of nice to have like the visual cues and stuff. So, yeah, I mean, I mean, that's a story. Good question. Any other questions while we, while we pend here.
05:27:26.260 - 05:27:27.600, Speaker F: In the consumer.
05:27:31.960 - 05:28:01.288, Speaker A: Great question. So if we scroll down, we have our fulfill random words function here. This is what the chain link node is actually calling. And I say calling with quotes for reasons you'll understand a second. So this fulfillment words function is actually overriding a function that we inherit from the VRF consumer base. And in our VRF consumer base, I'm not going to go to it because the wifi is being slow and it'll.
05:28:01.304 - 05:28:02.472, Speaker D: Take me too many clicks.
05:28:02.536 - 05:28:39.284, Speaker A: But in the VR of consumer base, there's a function called like raw fulfill random words or something like that. And it has basically like a modifier on it that says, hey, make sure that the random number has a proof and is only coming from the VRF coordinator. So that's how we know we're only getting it from the VRF coordinator with a cryptographic proof that guarantees the numbers random. So, great question. Thank you for asking. And I believe we've successfully sent the request. I don't know if we've successfully got a response.
05:28:39.284 - 05:29:02.784, Speaker A: I see. Success. So we probably did. If I hit last ran now we have a random number here, and what I could have just done was hit last request, hit this request, paste it into here. Seed are fulfilled true exists true. Paste it in here. Oh, no, sorry.
05:29:02.784 - 05:29:03.756, Speaker A: There'll be zeros.
05:29:03.788 - 05:29:06.404, Speaker D: Request ids. Get request id.
05:29:06.442 - 05:29:14.340, Speaker A: Paste it in here. And then we get the random words. So we paste the last request id into this. Get request.
05:29:14.760 - 05:29:16.230, Speaker C: What's the name of the function?
05:29:17.320 - 05:29:42.590, Speaker A: Get request. Get request status, which gives us the random word and the fulfilled number of random numbers. So I didn't need to add this last rand, but that can make it easier if you're really confused as to what's going on. So that's how we get random numbers. And now we have solved the lottery issue. We can now create a provably mathematically guaranteed fair lottery with a true random number. And we can fix that.
05:31:08.920 - 05:31:21.404, Speaker D: I got to share my full screen. Thanks, Richard. Cool.
05:31:21.522 - 05:31:22.750, Speaker A: Any other questions?
05:31:25.040 - 05:31:36.800, Speaker C: How fast is this random number generator? Let's say, for example, the ethereum node is busy, and then gas prices are going crazy. Yeah, and you said to wait for that reconfirmation.
05:31:40.580 - 05:32:09.144, Speaker A: Great question. So really, at the end of the day, it depends on how fast the blockchain is. So Ethereum, for example, right now has an average block time of like 12 seconds, which means the absolute fastest you can get a random number back is 24 seconds, because you have to wait 12 seconds for the request to go through and then another 12 seconds for the response. But that also depends on gas, right? Because if you set like a max gas limit of five or something like.
05:32:09.182 - 05:32:09.770, Speaker D: That.
05:32:11.820 - 05:32:36.720, Speaker A: A max gas price of five or something like that, and the gas prices are currently seven, it'll just sit in queue until the gas prices come down. So there's a lot of factors that can make it take shorter or longer, but the biggest one is the blockchain itself. Like, for example, polygon block times are like one or 2 seconds. So the maximum waiting time will be like 3 seconds.
05:32:36.800 - 05:32:37.236, Speaker D: Right?
05:32:37.338 - 05:32:45.590, Speaker A: So it depends on the blockchain. Great question. Really good question. Any other questions?
05:32:47.160 - 05:33:11.580, Speaker C: Yes, I was thinking of back in 2017 18, there was a lot of bad actors reselling ledger hardware wallets on the Internet, and you had no idea if that seat had leaked or been truthfully generated. So I'm thinking with verifiably random numbers, is there a way to extrapolate that to verifiably random phrases?
05:33:12.000 - 05:33:18.224, Speaker A: That's a great question. I don't know. Off the top of my head. That's a great question.
05:33:18.262 - 05:33:18.416, Speaker H: Because.
05:33:18.438 - 05:33:51.772, Speaker A: Yeah, that's a big issue with you see all these proof, vanity profanity. What was the name of the vanity creator they recently got hacked for not having a verifiably random private key generator thing? Great question. I mean, right now in its current state, it wouldn't make sense because everything that gets output is put on chain for everyone to see. So if you made a seed phrase that everyone can see, it's not very useful. No, I would love to see research. Great question.
05:33:51.826 - 05:34:04.190, Speaker C: I'd love to plug my ledger in or use ledger live. You can check authenticity of your hardware. I don't trust ledger for.
05:34:05.940 - 05:34:20.428, Speaker A: Yeah, 100%. Or them having a lot of their software is closed source, right? Yeah, spot on. Or is it. Is it all. I forget.
05:34:20.444 - 05:34:20.842, Speaker D: Actually, don't.
05:34:20.842 - 05:34:26.992, Speaker A: Don't quote me on that. I forget. It might be open source. Yes, eventually.
05:34:27.056 - 05:34:27.670, Speaker D: Probably.
05:34:29.500 - 05:34:33.284, Speaker C: Ten random numbers separately that are not repeating.
05:34:33.332 - 05:34:34.330, Speaker D: How would you do that?
05:34:35.100 - 05:34:35.512, Speaker H: Yeah.
05:34:35.566 - 05:35:06.976, Speaker A: So for ten random numbers that are not repeating from zero to nine, you would do that modular function that we showed before, and that will get you like a range of zero to. You have at the end that modular function, basically to make them non repeating. Every time you get a number, you would add it to, like, an array. You would check to see if it's in that array there. You just add one. Because every number that chain linker returns is going to be a random number. Right.
05:35:06.976 - 05:35:14.836, Speaker A: So there is a chance it would repeat. So you would just do the checking kind of after it's filled, and then. Yeah, it's already there.
05:35:14.858 - 05:35:17.210, Speaker D: It's lump it up by one or two or whatever.
05:35:17.660 - 05:35:21.450, Speaker A: Good question. Any other questions?
05:35:26.700 - 05:35:27.384, Speaker D: All right, cool.
05:35:27.422 - 05:35:49.330, Speaker A: So, question for you. Who enjoyed taking the seven minutes to find the exploit, who thought that was fun? Who was like, just shut up and tell me the answer next time. Just go. All right, so fun things are fun. No, he's like, get your wisdom. Get your witchcraft out of here.
05:35:49.700 - 05:35:51.090, Speaker D: Yeah. Question.
05:35:51.460 - 05:35:52.690, Speaker C: I didn't have a question.
05:35:54.520 - 05:35:55.590, Speaker D: What's that?
05:35:57.720 - 05:36:05.270, Speaker A: Okay. All right, cool. Well, then I guess that's it for me. We have another 15 minutes break.
05:36:05.800 - 05:36:07.290, Speaker F: We will come back.
05:36:11.020 - 05:36:22.716, Speaker A: 330. Okay, cool. So we have like a 20 minutes break. See you back here at 330 for Andre. It's going to play another even more fun game than the one that I did. So set it for that.
05:36:22.738 - 05:36:23.550, Speaker D: See you guys.
06:02:23.660 - 06:02:43.408, Speaker H: A hand for the online participants. Also, if you cannot hear me well, just enter in the chat and we are going to handle everything. I must be here, okay, because of the camera. Hi, online participants. Okay, for the online participants. And you as well. Who here does not have Gurley eat.
06:02:43.494 - 06:02:45.920, Speaker D: In his or her wallet?
06:02:46.340 - 06:03:01.064, Speaker H: Gorli it. We're all good. Whoever don't have Garly eat, please go to faucets, chain link. So, faucets, chain link, connect your wallet and grab some. You're going to need it for the.
06:03:01.102 - 06:03:01.690, Speaker D: Game.
06:03:04.140 - 06:03:35.936, Speaker H: In your wallet. You'll need the computer, but you can have a cell phone as well if you want. If you have mobile wallet on your machine installed. Okay, so today for a final event, today we are going to play the game. So the idea is that we are going to combine everything you learn today to create a game. So your job for today, for this particular event, is to just play the game. So no coding.
06:03:35.936 - 06:04:11.600, Speaker H: I know you're probably exhausted to code from the morning, basically. So I coded the game. I used all of these principles that Saul, Richard and Patrick taught you during this day. And we're just see how everything works in practice. Okay, so this is the game we're going to play, so called board games. So you can see here we are all going to start from field zero. And this board has total of 40 fields.
06:04:15.380 - 06:04:16.450, Speaker D: Just a sec.
06:04:17.220 - 06:04:48.452, Speaker H: Thanks all. Thanks for the assistance. So the board has 40 fields. So your goal is to roll the dice using chainlink, VRF and to collect happiness, speed and wealth. Okay, so whoever connect the most happiness points, the most speed points and the most wealth points. And it is here in the room, can choose from some of these prizes. For the online participants.
06:04:48.452 - 06:04:51.896, Speaker H: You just have a glory that you won the game, but suddenly no prize.
06:04:51.928 - 06:04:52.220, Speaker D: Sorry.
06:04:52.290 - 06:05:13.840, Speaker H: You need to be in the New York City in the smart conferences. Maybe come next year. Okay, so how game works? So first there is a smart contract on a Gorli testnet. That's why you need a gorli. I'll give you the address and everything. I'll show. But first thing, you need to register your name.
06:05:13.840 - 06:05:35.780, Speaker H: So we want to hide your wallet addresses. You're going to register whatever string you want. If you don't register, you'll be on the board as a blank screen. So we want to avoid that. So I can identify and give you the price. So basically you can enter your name, your pseudonym, whatever, a joke. Don't be rude, because I'm not filtering the content, but you need to register.
06:05:35.780 - 06:05:56.956, Speaker H: Once you register, your name is going to pop up on the leaderboard at the end. I'm going to just share the leaderboard. It's a static react web page where you're going to see your name and your points and everything. From that point. Your interaction with the game is only through blockchain. So you can use either remix or etherscan. Personally.
06:05:56.956 - 06:06:30.280, Speaker H: For me, etherscan is easier because that's just explorer where I need to click register and then click the roll dice function. With remix you need to grab a copy of my code and paste it in remix and load from address. I'll show you the both ways, but it's up to you how you're going to play the game. So the first thing you need to register and after a successful registration there is second function called roll dice. And that's it. You need to click roll dice. Roll dice requests random number from the VRF.
06:06:30.280 - 06:07:11.844, Speaker H: And like a dice, it's going to return numbers from one to six. So we learned in the previous session with Patrick how you can get a random number within a range. So our range today will be from one to six because this is the dice. Again, you don't need to code everything I coded, you just need to hit roll dice function. If you hit a roll dice function, this is the first transaction, right, requesting from the chainlink VRF until the second transaction. As a callback from VRF doesn't include in the block, you cannot play. So there's like a require which is going to prevent you from calling roll dice like a maniac.
06:07:11.844 - 06:07:42.448, Speaker H: Okay, cool. When you roll the dice, let's say you get number four. So you're at zero point on the board. Number four is 1234. This is the green square, the yellow, sorry, the yellow square on the picture for example. And each of these fields has some amount of happiness, speed and wealth points. Okay, so let's say that I rolled a number four.
06:07:42.448 - 06:08:11.512, Speaker H: This means that I'll collect ten happiness points and ten speed points. You don't need to collect them. Just by stepping on the field you're automatically going to receive those points. And the UI are going to updates manually. So how we coded the UI, you're going to see it. It's a static web page which is using react and ethersjs. So Etherjs listens for events from the blockchain.
06:08:11.512 - 06:08:31.152, Speaker H: And whenever there is an event specific event it's going to trigger the change on the UI. So this is really common pattern in blockchain. Development. So you don't want to have pulling mechanism where for example on 15 2nd you're going to pull data from the blockchain and no, you want to create event listeners. This is like a front end stuff.
06:08:31.206 - 06:08:31.472, Speaker D: Okay?
06:08:31.526 - 06:08:41.108, Speaker H: It's not like solidity but inside the react using ether js for example, it's like a Javascript library. So it's not like react only you.
06:08:41.114 - 06:08:43.060, Speaker D: Can use it in whatever framework you work.
06:08:43.210 - 06:09:08.172, Speaker H: You are going to listen for a specific event and then update the UI. Why? Because if you want to spam, blockchain your node or alhimi or infura or whatever, RPC provider cannot handle that traffic, that amount of traffic. So you need to listen for a specific event. Okay, so this is the game mechanics. Is everything clear about the game mechanics? I'll go there.
06:09:08.306 - 06:09:08.904, Speaker D: Perfect.
06:09:09.042 - 06:09:23.060, Speaker H: So register, roll, dice, enjoy. After, so we said like Borg has 40 fields, after you reach the end, that's it. So it's basically a pure luck whether you're going to win these stocks or not.
06:09:23.210 - 06:09:23.910, Speaker D: Sorry.
06:09:24.680 - 06:09:54.350, Speaker H: Okay, so how we created this game. So first we created this struct called profile. So in solidity, as you learned this morning, structs are complex types which consist of primitive types. So primitive type in solidity is unsigned, integer, is address, is string, is boolean and its bytes, okay, so those are primitive types built in into the language itself.
06:09:54.720 - 06:09:55.468, Speaker D: Cool.
06:09:55.634 - 06:10:40.844, Speaker H: So we can create these complex types called structs by combining these primitive types. So for example we can create struct called car and we can have unsigned integer like number of seats, we can have boolean called locked is dark car locked or not or whatever. So you can create complex types. So this is this truck. So for the numbers you can use unsigned integers. And when you type un, when you type just un in solidity it defaults to un two five six. So you can see here that I'm using un 3232 and not un two five six.
06:10:40.844 - 06:10:53.504, Speaker H: So why is that? Because I tend to optimize my solidity code. So there was a really awesome lecture from Alex Rohn, I think from the.
06:10:53.542 - 06:10:54.130, Speaker D: Last.
06:10:56.100 - 06:11:03.780, Speaker H: Smart con where he spoke about this memory optimization. So optimizations.
06:11:06.120 - 06:11:06.580, Speaker A: Exactly.
06:11:06.650 - 06:11:51.892, Speaker H: Hitchhiker's guide to the EVM. You can google it on YouTube. So basically the idea is solidity storage consists of two five six bits or 32 bytes slots. So you have one slot which is 32 bytes, next slot which is 32 bytes, et cetera. So this is two five six bits. Bits is like when I create a struct and for example I use this field position and I know that my filled position is the maximum value is 40. So when you type un two, five, six, the range of those number is from zero to 2.25,
06:11:51.892 - 06:12:42.936, Speaker H: six minus one, which is a huge number. I don't need that huge number because the maximum value for my game is 40. So I lower my type because I don't need these huge numbers. I'm not going to work with them. Why is that? Because when I type un, that variable going to fill the whole slot, just that variable, when I type un 32 or un 16, then I'm going to use 16 or 32 bits which is lower than two five six and my slot is going to be empty. So I'm pack my variable here, fill position, then happiness, then speed, then wealth, then boolean which is smaller and then string, which cannot be in the D slot. String is going to be in the next slot.
06:12:42.936 - 06:13:35.732, Speaker H: Okay, so this is just a packing for memory optimizations and it's a common pattern in solidity. So I highly recommend once again to go to YouTube, search for last year's mark on Hitchhiker's guide to the EVM. It's a 20 minutes talk when you can understand more. Why is this written? Okay, so to map players I used mapping. So mapping is a complex data struct in solidity, which is similar to for example dictionary in c sharp if there is like c sharp programmers over there, or hash tables in c plus plus. So the idea is to create an so called on chain database where you have a key and a value. So key needs to be a primitive type.
06:13:35.732 - 06:14:28.580, Speaker H: So key needs to be either unsigned integer, either integer address, boolean string bytes. Key cannot be struct for example, but values can be whatever you want. Array, another mapping struct, obviously, et cetera, et cetera. So when you work with mappings, the most important thing is to use unique keys. So if your key is number, unsigned integer, if you have a mapping, let's say your key is five, number five and you have some value, let's say string, five is John. And then during your coding five is Ashley, for example, you're going to override the content of John. So your keys needs to be unique.
06:14:28.580 - 06:14:53.704, Speaker H: If you're using addresses, this is like a easy shot for you because all of the addresses are unique. So you don't need to worry about that. If you're using numbers, for example, make sure you have counter variable which do not decrease, can just increase. Okay, and if you're using again un two, five, six, you have that whole range of numbers and you're pretty sure, pretty safe.
06:14:53.752 - 06:14:54.348, Speaker D: Sorry.
06:14:54.514 - 06:15:29.908, Speaker H: So we mapped your address, your wallet addresses to this giant struct and this giant struct. So you have this string name. This is going to be populated when you call the register function. So we're going to grab your wallet address and in that key, the value for giant struct, for the field name in the giant structure is going to be your string. Don't be rude again. And for the field position, happiness, speed, wealth, and this boolean value, everything is going to be handled by smart contract. So we are just reading those values from the UI.
06:15:30.004 - 06:15:30.984, Speaker D: That's it.
06:15:31.182 - 06:15:37.944, Speaker H: Okay, how we coded the roll dice function, which you're going to call multiple.
06:15:37.992 - 06:15:40.092, Speaker D: Times and multiple times and multiple times.
06:15:40.226 - 06:16:05.190, Speaker H: I deleted some of parts of this function so it can be shown on the screen. But the important thing about this slide is to learn that you always need to use check effects interaction pattern when you are writing solidity. So again, check effects interaction pattern. What is that?
06:16:05.640 - 06:16:06.688, Speaker D: Checks.
06:16:06.864 - 06:17:13.668, Speaker H: You first need to validate all of the function inputs. If there's like a function inputs, you need to validate them. For example, if you have transfer ownership function, you have admin multisig, you need to be absolutely sure that your new admin address is not address zero because you're going to lose ownership of that contract. For example, this is an example or you don't need to have like for example, the new admin cannot be the address of the previous admin, so you need to check that as well, et cetera, et cetera. So first you need to validate all of the inputs so you can validate all of the inputs. This is checks by using either require or if revert. So if you're using require, then you have condition and string error string so require says that the field position of this player needs to be less than 40 because the board has 39 fields, 40 fields.
06:17:13.668 - 06:17:27.372, Speaker H: So from zero to 39, and if field position is greater than that value, so you reach the end of the board, you're going to have this game.
06:17:27.426 - 06:17:31.568, Speaker D: Over message from your metamask or whatever wallet you're using.
06:17:31.654 - 06:18:15.352, Speaker H: So require has a success condition and the error message so we want this to be true. Otherwise, revert with this message. If you're using custom errors or strings again, then you're using revert keyword. So you have require revert and assert. So with revert keyword you're going to have an if bracket, if condition, and if condition is true, then you're going to revert the error message. So the logic changes now. So the logic will be if field position is greater or equal 40, then revert this custom error.
06:18:15.352 - 06:18:46.772, Speaker H: Okay, so require and revert has different operator types, okay. Custom errors were first introduced in solidity 0.8.4 and they're more gas efficient than complex strings. So if you're working with require statements and you if have these string messages, make sure that those strings are less than 32 bytes because strings that are less than 32 bytes can fit in a single slot and this code costs less.
06:18:46.826 - 06:18:47.850, Speaker D: Guess obviously.
06:18:48.300 - 06:19:23.140, Speaker H: So those were checks. Then we have effects. Effects are basically when we are changing our state variables. So we have some effects on our storage. So each smart contract can have its own storage, okay, so effect can be increase counter to one for the mapping or whatever. And we have interactions. So interactions are interactions between our own functions and or external functions.
06:19:23.140 - 06:20:02.530, Speaker H: So I can have a getter function which is from my smart contract, and that getter function can get me the value for this mapping, for example, which I pass the key, get me the value, or can be interaction with outside contract like chain link VRF. So when I'm requesting random numbers here, I'm calling VRF coordinator. This request, random words, is not a function from my smart contract, my smart contract, it's from the VRF coordinator, smart contract. So I interacting with another smart contract, okay? And finally I need to emit event.
06:20:03.140 - 06:20:04.064, Speaker D: That's it.
06:20:04.182 - 06:20:56.684, Speaker H: So checks require reverse whatever effects, do whatever your logic is interactions, if there's any interaction, call another smart contract, whatever. And then not must, but let's say must, you must emit event because if you want to later index your smart contract or you want to create a script, python script or UI or whatever, all of those types of software products are going to listen for events. And events are cheaper than reading from a storage. So imagine that you're like a database admin for some Linux clusters. You need to take care of logs. So your cluster is going to log something, log, log. This is the event on solidity on blockchain.
06:20:56.684 - 06:21:52.420, Speaker H: So these events are basically logs. So there's a hack or some problem, whatever, you're going to roll back and check all of the logs, all of the events to see what happened. Okay, so this was the roll dice function, check effects, interactions, okay, now the second function is sorry, fulfill random words. So this is the function that we implemented from the interface. So you learned previously that when you want to work with Chainlink VRF, you need to implement that interface. So this is what this override keyword is all about. You need to basically implement the functionality which is written inside the interface, and that interface has one fulfill random functions like a signature for the function, and you need to implement it in your smart contract.
06:21:52.420 - 06:22:42.740, Speaker H: The internal keyword is something that is going to limit who can call the smart contract, who can call this function. So with the roll dice, the visibility modifier is external. But for fulfill random words, the visibility modifier is internal. So external, sorry, public, everyone can call. If your function is public, everyone can call it external. If your function is external, everyone can call it besides the smart contract itself. So your smart contract cannot call its own function if that function has external modifier.
06:22:42.740 - 06:23:21.260, Speaker H: Yeah, external modifier, you need to make it public, so your smart contract can call it as well internal. Only your smart contract and the smart contract that implements it can call it. So this is if you're using VRF interface, VRF coordinator can use it because we are currently implemented that interface. And private. Private means that only your smart contract can call that function. The same applies to variables. Variables can also be public, external, internal privates.
06:23:21.260 - 06:24:03.390, Speaker H: The general misconception when it comes to the private keyword is that you think, not you, but people think that if I mark my variable, for example string, which is keyword as a private, that means that only my contract can see it. That's not true. On blockchain all information are public. Private means that only my smart contract can access that string, for example that variable. But if I go to iter scan, I can see it and you can see it and everyone can see it. So private is not like encoding the coding stuff. Private is the scope of who can call the function.
06:24:03.390 - 06:24:51.656, Speaker H: Okay, inside this fulfill random words function, we have this dice value which is basically we grab the random word from the chain link vrf and we are using it in a range. So our range is one to six. That's why we have this modulo assigned like a percentage. This is modular. On solidity we have some grabbing from mapping. This get reward is a public function which is a function of minesmart contract which gets me rewards. So it's basically checked for on that field how many, well, happiness, whatever points are there, and just assigned to my struct.
06:24:51.656 - 06:25:25.450, Speaker H: And then once again I emit an event. So I'm listening on my UI for the moved event, and whenever there's a moved event, I have this message sender and I'm going to update only your row. I'm not going to refresh the whole UI. I'm updating only the piece, the component that changed. Okay, so I want to save space, memory, whatever okay, do we have any questions about this?
06:25:25.900 - 06:25:29.044, Speaker D: This is just a recap from the morning lectures.
06:25:29.092 - 06:25:42.110, Speaker F: Yes, my question is earlier when you were talking about the map, it sounds like in the 40 square, each of the square has a pre identified value in terms of how to use.
06:25:43.280 - 06:25:44.572, Speaker D: Is that right? Yeah.
06:25:44.706 - 06:26:25.576, Speaker H: So it's predefined. And this getreward function just gets those predefined values. It's not actually an array table, it's a giant switch case because it's cheaper. So I have if field position is one return, if two return, if three return, it's an extremely ugly code. Extremely ugly, but it's cheaper. So you can see always on solidity, an extremely ugly code basis, but before because they are cheaper. So for example, those unchecked blocks, maybe you heard about them or you're going.
06:26:25.598 - 06:26:26.724, Speaker D: To learn about that.
06:26:26.782 - 06:26:32.344, Speaker H: So, unchecked means that if you have number, don't check for underflows.
06:26:32.392 - 06:26:33.340, Speaker D: Overflows.
06:26:33.680 - 06:26:48.588, Speaker H: For example, for my use case, I know that I have only 40 fields on the board, one through 40. So I can use unchecked blocks because I'm 100% sure that it's not going to overflow.
06:26:48.604 - 06:26:49.292, Speaker D: Underflow.
06:26:49.356 - 06:27:22.124, Speaker H: And that code is an extremely ugly, those unchecked fields, blocks, whatever. But it's cheaper. So that's why our get reward is extremely ugly. If this giant if switch case, whatever, because it's cheaper than to read from the mapping, from the array, whatever. Because mappings, array, all of those stuff are written in storage. And reading and writing to storage is the most expensive operation on blockchain. That's why it's written that way.
06:27:22.124 - 06:28:18.670, Speaker H: Okay, any other questions? Yes, I just delete it because to fill the slide so you can see later my whole function, it's a bit more, have more lines just to make the point. So roll dice essentially has this required statement, and again is your turn. So two required statements. In some cases, custom errors are cheaper. So either you're going to use require with strings that are 32 bytes long, or custom error. Okay, so if you're using short strings, you're going to use require. Your condition is going to be true.
06:28:18.670 - 06:28:23.200, Speaker H: For custom errors, the logic will be opposite.
06:28:23.540 - 06:28:24.944, Speaker D: Okay, cool.
06:28:25.062 - 06:28:47.610, Speaker H: Because if field position is greater and then equal 40, then you're going to enter the if statement and revert the custom error. Okay, so this will check request render. In these interactions, this applying to mapping was effect and we emitted event eventually. Okay, any other questions?
06:28:50.620 - 06:28:51.176, Speaker D: Cool.
06:28:51.278 - 06:28:53.800, Speaker H: Okay, let's play the game, shall we?
06:28:53.950 - 06:28:54.650, Speaker D: Cool.
06:28:55.260 - 06:29:35.220, Speaker H: Okay, you have your own laptops, go to GitHub and search for this repo VRF board game. Or if you're a maniac, you can type this address inside the gore litter scan and grab the smart contract address. Because in this repo the contract is linked in the readme. So you can just click and go to ether scan. Okay, so once again, search for online participants, search for VRF dashboard game and go to the readme file. Okay, I'm now going to, yes, I'll.
06:29:35.300 - 06:29:37.130, Speaker D: Taking pictures one more second.
06:29:38.220 - 06:29:44.072, Speaker H: Okay, I am inside the GitHub repo. I can zoom it a bit.
06:29:44.126 - 06:29:45.130, Speaker D: What do you say?
06:29:45.980 - 06:30:11.976, Speaker H: Yes. Okay, so this is the source code for this game. It's written in foundry. So if I go here, to go early testnet. If I click here, this linked URL is going to lead me to this page. So this is my smart contract on garly eaterscan. If you go here, you can see the source code for this smart contract.
06:30:11.976 - 06:30:48.040, Speaker H: What we want to do is to go to write contract tab. So write contract tab, connect your wallet, connect to web3. Make sure you have any kind of wallet extension installed. You see metamask wallet connect, coinbase wallet, whatever. I'm going to connect my wallet to etherscan and now I can interact with my smart contract using etherscan. So the first thing is to call the register function. Please call the register function, enter some string and don't be rude.
06:30:48.040 - 06:31:38.092, Speaker H: Okay, so I'm going to enter my name, which is Andre, going to hit write, going to sign the transaction. You see here, I just need to sign the transaction and that's it. I need to wait this transaction to be included. So wait for a metamask pop up confirmation. You need to wait for that. If you don't have goalie eat one more time, go to faucets, chain link, connect your wallet, grab some free goal eth because you need those for paying the gas. Okay, so after successful registration, I just need to call roll dice function and roll dice function.
06:31:38.092 - 06:31:58.592, Speaker H: We're going to roll dice for me, it's going to put me at some place on the board. It's going to grab points from that field. And after my interaction with the smart contract ends, I have new points. Then I can call roll dice again. If you spam the game, it's going to revert.
06:31:58.656 - 06:31:58.884, Speaker D: Okay?
06:31:58.922 - 06:32:18.248, Speaker H: So you need to wait. First transaction, call to the VRF. Second transaction, wait for the callback. On the UI. You have the column field. Is your turn set to yes or no? If it's yes, it's safe for you to call the roll dice. If it's not, it's going to revert.
06:32:18.248 - 06:32:36.720, Speaker H: So don't waste your time. Okay, if I want to use remix, then I need to open remix ethereum.org website. I need to create a new solidity file I already created. I'm going to increase, yeah, sorry. Zoom it.
06:32:36.790 - 06:32:37.216, Speaker D: Sorry.
06:32:37.318 - 06:32:42.580, Speaker H: Yep. I need to go to my repo, go to the source folder.
06:32:44.600 - 06:32:48.596, Speaker D: Okay. Wait for the Internet connection. Okay.
06:32:48.778 - 06:33:00.072, Speaker H: Board game sol. This is the source code for this game. Okay, this is the ugly getreward function.
06:33:00.126 - 06:33:02.170, Speaker D: That I'm talking about. Look at this.
06:33:03.900 - 06:33:50.532, Speaker H: Absolutely nightmare. But it's cheaper and on solidity. On blockchain, everything is about making your users life easier by not spending their money. Okay, so what I need to do is to click here to copy this entire source code to clipboard, go to remix, paste it here. Okay, I paste it one more time, compile it by clicking either command rs or click this compile board game. And then you need to go to this deploy and run transactions tab. Deploy and run transactions and make sure you're not on remix vm.
06:33:50.532 - 06:34:27.972, Speaker H: But you're choosing this injected provider metamask because you need to be on a go early testnet. Okay, we are not deploying our smart contract now. We are interacting with a smart contract which is already deployed on the blockchain. So we need the source code of that smart contract, its address and chain iD. Chain Id is number five for Gorli. Okay, so we are not going to hit deploy orange button. We are going to hit add address blue button.
06:34:27.972 - 06:34:48.216, Speaker H: So if I go to Etherscan, I can click here, copy the address of my already deployed game smart contract, put it here, and when I click this add address button, the new instance, I'm.
06:34:48.248 - 06:34:49.484, Speaker D: Going to close this one.
06:34:49.602 - 06:35:27.688, Speaker H: You see the second instance pop up. And now I can interact with already deployed smart contract using remix. So again, I have register function, I have roll dice function. So whatever method is easier to use for you, use that method. For me personally it's easier to interact using Etherscan because I don't have all of these extra steps to make it work in a remix. But maybe you're more familiar with the remix when you have all of this green, blue, red if it's payable function, red buttons and everything. So you're absolutely sure what you are doing.
06:35:27.688 - 06:36:06.496, Speaker H: Okay, and that's it. Now for the look at this leaderboard. This is all of your names. Okay, I am going to zoom it a bit. So we have address is if you go to VRF board game in the readme file there's a link to the Etherscan web page and you can. Okay, so we have surgeon Anon, five star, Sadwani, Alex, whatever. So we have happiness, speed, wealth, which is all sortable fields.
06:36:06.496 - 06:36:31.992, Speaker H: So if I click here, speed. Some guy called five star has the most speed at the moment, wealth again. And we have this field position. So if your field position is greater than 40, leave it. You reach the end of the board, you cannot play anymore. That's it. So the tricky part with this game is that the luckiest person wins.
06:36:31.992 - 06:36:55.780, Speaker H: Sorry. So the luckiest guy is going to win. This sucks because it's just a simple game to demonstrate all of the things that you learned to build today. And finally, is your turn in progress? Yes. No, if it's yes, wait, if it's no, go ahead, click roll dice function again. That's pretty much it. I'm going to zoom this a bit.
06:36:55.780 - 06:37:38.032, Speaker H: There's a bunch of you playing right now and until when? So we have time to play this game. It's four eight now until 430 or until five. Let's see, 445. So on 445, we're going to announce winners. So once again for the online participants, sorry, prizes only for the in person participants. But you have proof on blockchain that you won this fabulous game. And if you want these prizes, make sure to come to next year's Marcon in person to hang out with us.
06:37:38.032 - 06:37:42.224, Speaker H: I know for some of you New York is maybe far for european people.
06:37:42.262 - 06:37:43.830, Speaker D: Maybe from australian, whatever.
06:37:44.520 - 06:38:49.370, Speaker H: But after that long flight you'll be able to walk around this beautiful city. So it works to come to this mark on. Okay, so the trick with this UI is that it updates automatically, so the UI is listened for the events. So that is why is it important to emit events from your smart contract, you have logs, you can index your smart contract, you can create more powerful UI and generally your users will have a better understanding about what is currently happening on the blockchain. Because if you want to query the storage variable, you can only query the last written value. You cannot go in history, right? But with events you can compare whatever, what happened prior. Okay, let's sort this by field position.
06:38:49.370 - 06:39:32.950, Speaker H: So five star is on field 21, so he or she or it, whatever completed the half of the board. Surgeon is at field position 15. Then we have a bunch of people at field eleven. So this is the reason why we haven't coded the actual board, because imagine that you're all at field zero or field one and bunch of you just sitting on top of each other heads. So that's currently the situation with the field position number eleven. But yeah, it's kind of like analytics web page where you can see.
06:39:34.860 - 06:39:35.176, Speaker D: The.
06:39:35.198 - 06:39:37.624, Speaker H: Current state of the game.
06:39:37.662 - 06:39:38.788, Speaker D: Smart contract.
06:39:38.964 - 06:40:20.564, Speaker H: So this is it. So this is the leaderboard that updates automatically. We are going to check it again one more time for the online participants. If you missed what for online guys, if you missed what we are doing now, we are playing the VRF board game in person at smart on 2022 at Developers day. You can hear. Sorry, yeah, the board position. So give me a sec.
06:40:20.564 - 06:40:22.630, Speaker H: There is a column value.
06:40:25.000 - 06:40:25.750, Speaker D: Okay.
06:40:28.780 - 06:40:50.690, Speaker H: Just to refresh. There's a column value. Your position. So we saw for five star was 15, for a bunch of people was eleven. Sorry. This field position, do you see this field position? Your field position. Try to find your name.
06:40:50.690 - 06:41:25.256, Speaker H: You see your name? Name? Yes. There's a getter function. Get profile details or something like that. It's going to get the whole row for you so you can manually query if you want it. If you want to see you go to read contract tab. It's not write read. And then there's like a getter function.
06:41:25.358 - 06:41:26.010, Speaker D: Okay.
06:41:31.520 - 06:41:33.150, Speaker H: Read contract. Exactly.
06:41:38.560 - 06:41:41.630, Speaker D: It's gonna be broken down into just.
06:41:46.000 - 06:41:47.260, Speaker C: These parts.
06:41:50.560 - 06:41:51.310, Speaker D: Perfect.
06:41:51.960 - 06:41:53.750, Speaker C: You got to figure out what that.
06:41:55.240 - 06:42:36.656, Speaker H: Yeah, excellent question. So if you want to see where you are using smart contract, you need to go to read contract tab. So we are just reading stuff from the blockchain. This is free and called get score function. So get score. You need to enter your wallet address there and get score is going to ping that player's mapping. So you're passing your wallet address to this get function.
06:42:36.656 - 06:43:05.928, Speaker H: It's going to grab the value from the mapping which has that key. So your wallet address is a key and from that position this is o of one. It's like the most efficient way to get something from the blockchain. It's going to grab the whole structure and all of these properties where you are, happiness, speed, wealth is your position.
06:43:06.014 - 06:43:07.900, Speaker D: Et cetera, et cetera, et cetera.
06:43:08.320 - 06:43:13.470, Speaker H: Any questions? Maybe. Are we having fun? Yes.
06:43:17.760 - 06:43:21.890, Speaker C: They're not adding, wherever you are.
06:43:26.020 - 06:43:28.800, Speaker H: It should increase, you know, plus equal.
06:43:33.220 - 06:43:35.810, Speaker F: Yeah, maybe because of.
06:43:36.920 - 06:43:37.910, Speaker D: Let's see.
06:43:42.040 - 06:43:43.350, Speaker C: Your last name.
06:43:46.220 - 06:44:04.508, Speaker H: We have bug. Yeah, good catch. Do we want to fix it now? Live coding and redeploy the smart contract? No, you're at the lead position. I can feel that. Yeah. Do we have time to redeploy it?
06:44:04.674 - 06:44:07.916, Speaker D: Let's do it. Okay.
06:44:08.018 - 06:44:25.750, Speaker H: Live coding. Sorry, guys. Yeah, sorry. Okay, so we need to increase this plus.
06:44:29.960 - 06:44:30.710, Speaker D: Yeah.
06:44:31.720 - 06:44:40.410, Speaker H: Okay, now we're going to redeploy the smart contract. Yeah. Sorry, guys, one more time.
06:44:43.500 - 06:44:44.250, Speaker D: Okay.
06:44:47.200 - 06:44:51.790, Speaker H: I'm going to quickly stop sharing my screen so you don't see my private key.
06:44:55.360 - 06:44:56.350, Speaker D: Yeah, sorry.
06:45:00.020 - 06:45:12.370, Speaker H: Oh, I'm online. I need to stop sharing my screen. Thank you, Paul. Yeah, I mean, it happens.
06:45:17.400 - 06:45:21.590, Speaker D: Okay, give me a second before.
06:45:25.660 - 06:45:26.730, Speaker H: Press your.
06:45:28.780 - 06:45:36.250, Speaker D: Browser. Okay, 20 seconds and we are good to go.
06:45:39.120 - 06:46:04.710, Speaker H: Sorry. Yeah, go ahead, go ahead. I'm joking. I haven't created for this project and that's why I stopped sharing my screen. It's a bad practice. It's a bad practice, but I'm on the testnet, so that's the reason why when you want to go live.
06:46:06.760 - 06:46:07.172, Speaker D: The.
06:46:07.226 - 06:46:16.244, Speaker H: Best solution is to use burner wallets. You just create a wallet, deploy smart contract and live it from the security perspective.
06:46:16.372 - 06:46:18.730, Speaker D: That's the best what you can do.
06:46:19.580 - 06:46:29.390, Speaker H: But it's always what you are doing about what you're doing rather than what you are saying. Okay.
06:46:32.880 - 06:46:55.350, Speaker D: I'll tell you, don't worry. Okay, just give me a sec to be as quick as possible. You're making me nervous now, but yeah, good catch. Thanks.
06:46:55.720 - 06:46:59.424, Speaker H: You deserve the sock. Okay. Give this man a sock.
06:46:59.472 - 06:46:59.972, Speaker A: Okay.
06:47:00.106 - 06:47:17.564, Speaker H: He won the game. I imagine those people who are on the live stream now in front of their computers and they're like, wow, what this guy is doing?
06:47:17.602 - 06:47:19.020, Speaker A: Like, fuck this shit.
06:47:20.880 - 06:47:22.510, Speaker H: Who hired you, man?
06:47:24.480 - 06:47:37.550, Speaker D: Sorry. Everyone is waiting for the new.
06:47:41.280 - 06:47:42.030, Speaker A: You.
06:48:06.560 - 06:48:15.390, Speaker D: Frozen. Okay, very good. It froze for 15 seconds. Sorry.
06:48:17.840 - 06:48:21.932, Speaker H: Yeah. This is life in crypto. This is normal testing production.
06:48:21.996 - 06:48:23.410, Speaker D: Yeah, go for it.
06:48:27.220 - 06:48:34.850, Speaker F: I used to say life. To teach this, to do this, life it in a very generous way.
06:48:38.520 - 06:48:42.404, Speaker H: It's a great feeling. I love it. I enjoy it.
06:48:42.522 - 06:48:44.730, Speaker D: Yeah. Okay.
06:48:45.740 - 06:48:47.160, Speaker H: Running the script.
06:48:49.180 - 06:49:06.670, Speaker D: Game board, game board, game board, game. Double check. Double check everything. Maybe it was the wise move to play it in a hotel yesterday, but yeah.
06:49:07.200 - 06:49:25.828, Speaker H: Okay, so I run the deployment script one more time. The one that I need to do is to finally again add this contract as a VRF consumer. So if you're creating a VRF smart contract and you want to request run and it's failed, double check. Have you added this contract as a.
06:49:25.834 - 06:49:35.210, Speaker D: Consumer and enough link tokens? Yes. No.
06:49:38.140 - 06:49:54.510, Speaker H: Tell me that we cannot redeploy it 100 times. I'll send this code for audit to this guy, and once he audited, then we can play it tomorrow maybe. Yeah.
06:49:58.880 - 06:50:00.290, Speaker F: And I think.
06:50:03.540 - 06:50:12.470, Speaker H: It'S not my fault. Yeah, I did my fault. It's not big, but it's honest work.
06:50:13.400 - 06:50:13.908, Speaker D: Okay.
06:50:13.994 - 06:50:17.910, Speaker H: So, yeah, game mechanics are pretty simple, I hope. Yeah.
06:50:22.040 - 06:50:28.150, Speaker D: The pad. Do you think it's going to freeze my computer again because of the Internet connection? No.
06:50:29.080 - 06:50:31.504, Speaker E: Can I open a new window?
06:50:31.632 - 06:50:34.180, Speaker D: New window? We'll see. It's still deploying.
06:50:35.480 - 06:50:36.524, Speaker C: I think.
06:50:36.602 - 06:50:47.070, Speaker F: It's not.
06:50:48.640 - 06:50:49.790, Speaker A: It's not.
06:50:53.680 - 06:50:54.430, Speaker D: Yeah.
06:51:00.880 - 06:51:50.320, Speaker H: Verifying on Etherscan. Okay. Are you curious why this took so long? No. When you're deploying your smart contract, especially after the merge. Okay, the merge happened, you need to wait for some block confirmations until you're sure that your smart contract is on the right fork. So it's possible to have some chain reorganizations because of double spending problem after the merge. After the merge, when you want to deploy your contract, you need to wait for at least two finalized slots.
06:51:50.320 - 06:51:54.892, Speaker H: So after two finalized slots?
06:51:54.956 - 06:51:55.280, Speaker D: Yeah.
06:51:55.350 - 06:52:54.920, Speaker H: So it takes some. So after two finalized epochs, sorry, so one epoch, two epoch, you can get from hardhead foundry, whatever. Was it finalized? After two finalized epoch, then you're safe to continue with the interactions of your, that includes verifying an etherscan set, admin functionalities, all of that stuff. Because if you're on a wrong fork because of the chain reorganizations and everything, that's not good. So that's why we are waiting on Testnet. No, but on testnet you're practicing good practices for the main net because on testnet you're going to create a deployment script and you're going to use it on testnet. And you can see that it doesn't work like we are seeing now.
06:52:54.920 - 06:53:12.350, Speaker H: Then you're going to redeploy it and redeploy it and everything. And if you're not behaving like you will behave on the main net where bugs happens. So you need to be very careful. Yeah.
06:53:18.320 - 06:53:19.070, Speaker D: Okay.
06:53:29.360 - 06:53:33.732, Speaker H: Saul will share the address. One more thing. I need to add it as a VRF consumer and you can see now.
06:53:33.786 - 06:53:35.092, Speaker D: How I'm going to add it.
06:53:35.146 - 06:53:46.170, Speaker H: That's okay for you to see. If you come on Friday to Hacker House, we'll have a game that works.
06:53:46.860 - 06:53:48.730, Speaker D: So please do come.
06:53:49.180 - 06:53:53.784, Speaker H: It's awesome. I tested, I tested it.
06:53:53.822 - 06:53:54.410, Speaker D: Yeah.
06:53:57.280 - 06:54:21.490, Speaker H: I don't know. Household knows my address. I never shared with you guys. Okay, so go to etherscan and see all of the transactions from my wallet. My wallet is an admin wallet for the previous iteration of smart contracts. So you can grab it from here, but I'm going to share it with you. Block explorers are so powerful if you know how to use them.
06:54:22.040 - 06:54:24.870, Speaker D: Just a personal thought. Okay.
06:54:25.320 - 06:54:26.052, Speaker H: You see this?
06:54:26.106 - 06:54:26.420, Speaker D: Yeah.
06:54:26.490 - 06:54:29.030, Speaker H: So I'm gonna. One more time.
06:54:29.720 - 06:54:30.228, Speaker D: Yeah.
06:54:30.314 - 06:54:31.670, Speaker H: After I add.
06:54:33.560 - 06:54:39.788, Speaker D: Goodbye.
06:54:39.904 - 06:54:44.170, Speaker H: Eventually we'll give the socks to the last dev standing in the room.
06:54:46.140 - 06:55:01.180, Speaker D: Sorry guys, but I hope it's fun watching me sweating on the stage. Yeah, probably. Okay, so this is my subscription, blah, blah, blah.
06:55:04.240 - 06:55:06.030, Speaker F: And I use the same.
06:55:07.120 - 06:55:07.870, Speaker D: Okay.
06:55:11.200 - 06:55:12.550, Speaker F: The right way.
06:55:15.080 - 06:55:33.348, Speaker H: If you're using exactly the same source code for my game and you deploy it by your own, you're going to be the only one playing it. Okay. No, the source code changed.
06:55:33.364 - 06:55:37.580, Speaker D: We add that plot. Maybe I'm not understanding the question.
06:55:37.650 - 06:55:51.584, Speaker H: Sorry, I'm multitasking. Yeah, the UI is the same. Once again, I'll stop sharing my screen.
06:55:51.702 - 06:55:54.796, Speaker D: To change the address inside my UI.
06:55:54.908 - 06:55:58.080, Speaker H: Because my UI is using my alchemy key.
06:55:58.150 - 06:56:01.900, Speaker D: So please don't spam it. That's why I'm not sharing the screen.
06:56:01.990 - 06:56:03.940, Speaker H: Because we cannot use the UI.
06:56:06.120 - 06:56:11.830, Speaker D: If we spam that key.
06:56:12.440 - 06:56:14.676, Speaker H: Yeah, it's in my env file, but.
06:56:14.698 - 06:56:21.060, Speaker D: Still I can see it from my code. So yeah, good practices to put inside the env file.
06:56:21.140 - 06:56:27.772, Speaker H: Once you deploy it live, then no worries. But this is essentially the reason why I haven't deployed oversell or something because.
06:56:27.826 - 06:56:30.940, Speaker D: I can quickly change stuff if something broke.
06:56:31.440 - 06:56:34.680, Speaker H: For the game I mentioned for Friday, it's already deployed.
06:56:34.760 - 06:56:37.820, Speaker D: It's live, finger crossed.
06:56:38.400 - 06:56:49.292, Speaker H: It's awesome. Called ZK puzzles. Does anyone know here anything about zero knowledge ZK stuff?
06:56:49.346 - 06:56:49.950, Speaker D: Yeah.
06:56:51.800 - 06:57:04.748, Speaker H: Friday hacker house. But ZK acknowledging ZK is a separate.
06:57:04.784 - 06:57:07.208, Speaker D: Technology which can be used for whatever you want.
06:57:07.294 - 06:57:14.760, Speaker H: We're going to talk about that technology and play game that has more prettier UI than this one.
06:57:14.830 - 06:57:17.210, Speaker D: So that's know. Please come.
06:57:17.600 - 06:57:24.456, Speaker H: Okay, so I'm waiting for Manza to be included in the block. Not mind anymore.
06:57:24.648 - 06:57:26.860, Speaker D: We had the merge.
06:57:28.320 - 06:57:34.450, Speaker H: Okay, you can start playing right now. Saul have you give them the address?
06:57:35.460 - 06:57:36.210, Speaker E: Yes.
06:57:37.460 - 06:58:06.490, Speaker H: Okay, so you can go to Saul's pad, grab the address, start playing, and I'm going to spin up the Ui one more time to save time. Three socks left. I mean, I'm going to buy new socks for everyone. You're patient with me. And also we have something special here. So you can choose socks or this. It's like a Schrodinger's cat or is that a bad metaphor? I'm not sure.
06:58:09.900 - 06:58:11.290, Speaker D: I don't know.
06:58:15.520 - 06:58:22.110, Speaker H: Native speakers. Oh yeah, it's called thing.
06:58:26.640 - 06:58:33.990, Speaker D: So you board game.
06:58:36.040 - 06:58:37.670, Speaker H: It should have the same.
06:58:38.360 - 06:58:42.710, Speaker D: Yep. No, one more second.
06:58:44.680 - 06:58:47.548, Speaker H: Because we're on the same Wi Fi.
06:58:47.584 - 06:58:55.530, Speaker D: Network and that it was making it slowish, but we're going to get that.
06:58:59.650 - 06:59:01.470, Speaker H: Are you guys going to join the training?
06:59:01.540 - 06:59:02.430, Speaker D: Hackathon.
06:59:03.810 - 06:59:04.560, Speaker H: Yeah.
06:59:08.450 - 06:59:09.840, Speaker D: Hackathon. Yeah.
06:59:11.990 - 06:59:14.382, Speaker H: Did you participate in the previous hackathons?
06:59:14.446 - 06:59:49.680, Speaker D: Yeah, last year. Perfect. See ya. Okay, let's see what's going on here. Oh, maybe you're not waiting for your turn. Whatever. Okay, see.
06:59:59.930 - 07:00:01.830, Speaker C: How does the game determine?
07:00:02.650 - 07:00:06.550, Speaker D: Is it random as well? No, you roll dice.
07:00:09.150 - 07:00:15.386, Speaker H: Yeah. So you roll the dice and you're waiting for a random number. You're waiting for your dice to stop.
07:00:15.488 - 07:00:17.274, Speaker D: And then I can roll mine, but.
07:00:17.312 - 07:00:25.482, Speaker H: We can roll three of us at the same time. There is no picking. You have your own dice.
07:00:25.546 - 07:00:33.460, Speaker D: Let's say you're playing and you're just running it. Sorry.
07:00:35.590 - 07:00:37.540, Speaker H: You're waiting for a callback from.
07:00:41.430 - 07:00:44.920, Speaker D: You know, one to. Yeah.
07:00:46.650 - 07:00:48.386, Speaker H: Patrick taught you how to build a dice.
07:00:48.418 - 07:00:51.800, Speaker D: I'm just now using it apparently wrong because.
07:00:56.110 - 07:01:18.494, Speaker H: Yeah, dice worked. Yeah, dice worked. My logic for the game didn't work. Thank you, Saul. Thank you. Thank you. Okay, yes, we're going to check it.
07:01:18.532 - 07:01:24.880, Speaker D: Because you can see here this. Wait a second, not yet, not yet.
07:01:26.230 - 07:01:31.362, Speaker H: Okay, we have a new leaderboard and there are some names popping out, so we are going to see.
07:01:31.416 - 07:01:38.370, Speaker D: Why is your failing just unresponsive, responsive.
07:01:38.530 - 07:01:51.638, Speaker H: Wait, have you shared my screen to the yet? Okay, you can. Okay, I'm going to see what's going on with their calls. The UI shared.
07:01:51.734 - 07:02:26.450, Speaker D: Thanks for participation and thanks for your patience. Be right back. Does it matter if there is an error? Probably. So I'm going to fail. Okay, so cancel all of these transactions, reject all of them, and then try once more. One more time. Just roll.
07:02:26.450 - 07:02:49.470, Speaker D: Let's see, just. You have a pending transaction. Cancel it. Open metamask, reject that one. Just reject that one. Open metamask again. Activity, scroll, scroll, scroll.
07:02:49.470 - 07:03:24.834, Speaker D: Find the pending one and cancel it. You have the cancel button here. Refresh, refresh or refresh everything. Try that pending transaction to cancel if it's possible, and then roll, guys, because the pending transaction is in the memp pool and that's why another transaction can't.
07:03:24.882 - 07:03:26.700, Speaker C: Go through until that one's out.
07:03:32.350 - 07:03:43.580, Speaker D: It's going to fail. Can you redact it? Okay, I respect that. I know. Figure.
07:03:46.530 - 07:04:14.342, Speaker H: I said, don't be rude, guys. What is this about? I don't have a mechanism to ban any of you, but I have mechanism to maybe sort by. It's going to pop out anyway. Okay, cool. Thanks for playing one more time. We have ten more minutes, but if you want, we can stick around for another 15 if you want to finish the game or. It's good.
07:04:14.396 - 07:04:19.660, Speaker D: Okay. Yes.
07:04:20.830 - 07:04:25.210, Speaker H: So a bunch of us are waiting for a callback from VRF.
07:04:26.110 - 07:04:27.820, Speaker D: Okay, cool.
07:04:35.330 - 07:04:46.078, Speaker H: So we are waiting here to see someone has more than ten points in any category. This means that we were successfully deployed our game contract.
07:04:46.174 - 07:04:48.260, Speaker D: That cool?
07:04:55.110 - 07:05:11.414, Speaker H: Okay. Yeah, we need to spin up our own blockchain. That's probably us and the people from the stream.
07:05:11.462 - 07:05:12.060, Speaker D: Yeah.
07:05:18.670 - 07:05:20.874, Speaker H: The Gorli testnet is crying because.
07:05:20.912 - 07:06:03.030, Speaker D: Of us guys, but yeah, it is what it is. How many of these do we have? Five. Maybe we can give multiples. Multiples I don't need because five, that's 25. There's no 25 people. Cool. Playing you can worse.
07:06:04.030 - 07:06:13.198, Speaker H: Tomorrow the smartcon starts. So make sure if you have tickets to go to the venue, there will be an awesome talk and also some.
07:06:13.364 - 07:06:16.960, Speaker D: Hopefully awesome side activities created by us.
07:06:17.730 - 07:06:19.194, Speaker H: Those work, I promise.
07:06:19.242 - 07:06:20.560, Speaker D: We tested those.
07:06:22.290 - 07:06:58.940, Speaker H: So yeah, you should be able to participate in multiple fun events. And also on Friday there is a hacker house again. Games, talks, scavenger hunt, advanced topics and solidity, EVM, chain link, whatever. So make sure to come. Registrations are still open. Do you want maybe to see that slide one more time for hacker House or we are going to stick with the leaderboard. Okay, see you on Friday then.
07:07:00.670 - 07:07:01.420, Speaker E: Cool.
07:07:09.330 - 07:07:10.720, Speaker D: Unfortunately, yes.
07:07:11.250 - 07:07:12.634, Speaker H: I mean, it's not unfortunately.
07:07:12.682 - 07:07:20.240, Speaker D: We're going to hang out, but if we cannot make it, then it's unfortunate. Yeah. Cool.
07:07:47.550 - 07:07:54.798, Speaker H: We're waiting for a callback from VRF. It should, but maybe we killed it.
07:07:54.804 - 07:08:05.794, Speaker D: Like we did with Gorlin, who knows everything. It's on testnet. There are prizes, guys.
07:08:05.832 - 07:08:06.930, Speaker H: There are prizes.
07:08:07.510 - 07:08:09.506, Speaker D: We have something.
07:08:09.608 - 07:08:10.740, Speaker H: Five more minutes.
07:08:11.830 - 07:08:16.660, Speaker D: Yeah, so. Yeah.
07:08:19.290 - 07:08:21.350, Speaker H: Okay, who's Austin?
07:08:22.090 - 07:08:28.182, Speaker D: Cool. Who's me? That's you.
07:08:28.316 - 07:08:36.602, Speaker H: Who is the third one on the list? No one wants to tell.
07:08:36.656 - 07:08:36.970, Speaker D: Okay.
07:08:37.040 - 07:08:44.554, Speaker H: No prize for the third person. Okay. Chris, I. That's you. Oliver.
07:08:44.682 - 07:08:46.590, Speaker D: Perfect loser.
07:08:47.890 - 07:08:49.440, Speaker H: Who's loser, guys?
07:08:50.370 - 07:08:51.370, Speaker D: Who's loser?
07:08:51.450 - 07:08:54.658, Speaker H: Okay, I see. Okay, so that's five.
07:08:54.744 - 07:08:57.060, Speaker D: I'm counting us because of the prizes. Okay.
07:08:57.910 - 07:09:01.490, Speaker H: Dorian. Michael.
07:09:02.390 - 07:09:03.650, Speaker D: Hi. Michael.
07:09:04.310 - 07:09:05.810, Speaker H: J. Albert.
07:09:06.730 - 07:09:07.480, Speaker D: Yeah.
07:09:08.010 - 07:09:09.590, Speaker H: You're coming on Friday.
07:09:11.610 - 07:09:20.278, Speaker D: Oh, man, that sucks. Sparkling like. Yeah. Robert? One.
07:09:20.444 - 07:09:20.774, Speaker H: Hi.
07:09:20.812 - 07:09:21.400, Speaker D: Man.
07:09:23.070 - 07:09:29.802, Speaker H: I'm not sure how to pronounce this. Schlomi and Travis. Oh, you're two playing together.
07:09:29.936 - 07:09:31.578, Speaker D: That's dope. Like that.
07:09:31.744 - 07:09:32.810, Speaker H: Sandeep.
07:09:33.470 - 07:09:33.978, Speaker D: Yeah.
07:09:34.064 - 07:09:38.480, Speaker H: Saul. Saul is not eligible for.
07:09:42.290 - 07:09:43.230, Speaker D: Alex.
07:09:45.890 - 07:09:46.910, Speaker H: Yuba.
07:09:48.790 - 07:09:49.442, Speaker D: Yeah.
07:09:49.576 - 07:09:55.650, Speaker H: Eric, Nick and Village farmer.
07:09:56.250 - 07:10:01.830, Speaker D: Yeah. Let's refresh the UI.
07:10:23.540 - 07:10:25.400, Speaker F: Production. It.
07:10:25.470 - 07:10:26.410, Speaker D: Let's see.
07:10:27.900 - 07:10:30.760, Speaker H: I funded my subscription.
07:10:32.780 - 07:10:55.932, Speaker D: So total spend 47. Yeah, we have more balance, so it's not balanced. We have 175 fulfillments September. This is our. Let's see. Oh, no, sorry. That leads to ether scan.
07:10:55.932 - 07:11:16.570, Speaker D: We dance from that. Yeah. We dance for that by Eric. See ya. Actions. See you, man. Oh, we don't want that.
07:11:18.540 - 07:11:19.620, Speaker H: I can imagine.
07:11:19.700 - 07:11:26.170, Speaker D: Yeah. Maybe something else.
07:11:29.100 - 07:11:30.490, Speaker F: Can you see the same?
07:11:32.480 - 07:11:43.948, Speaker D: We can, yeah, my computer froze. Okay. Pending. Pending. Yeah, we have a bunch of pending transactions.
07:11:44.044 - 07:11:47.360, Speaker H: Not bunch, just three. Only three transactions.
07:11:47.860 - 07:12:08.430, Speaker D: So the rest of them were success. So, you know. Yeah, only three are pending right now, which is expected.
07:12:11.890 - 07:12:12.640, Speaker H: No.
07:12:15.570 - 07:12:19.410, Speaker D: Because it need to be called by VRF coordinator.
07:12:27.130 - 07:12:32.338, Speaker H: You want another pair of socks? What's. Kidding, kidding, kidding.
07:12:32.434 - 07:12:51.120, Speaker D: Let's, let's quickly check what is live debugging on stage. Fulfill random words. Yeah, you can call it. Oh, no, this is raw fulfill random words.
07:12:51.650 - 07:12:53.534, Speaker H: So the reason why it's here, because.
07:12:53.572 - 07:12:55.598, Speaker D: I've never implemented that function.
07:12:55.764 - 07:13:00.730, Speaker H: So inside the raw fulfill random words, it's empty code block.
07:13:00.810 - 07:13:06.420, Speaker D: So we cannot do anything. You can call it manually, but it's not going to. Yeah, got you.
07:13:09.030 - 07:13:10.738, Speaker H: That was a nice catch, actually.
07:13:10.824 - 07:13:17.206, Speaker D: Congrats. But yeah. So the fulfill random words without the.
07:13:17.228 - 07:13:21.334, Speaker H: Raw prefix is where the previously bad.
07:13:21.372 - 07:13:28.140, Speaker D: Logic, and now hopefully good logic is with plus equals and everything else.
07:13:47.470 - 07:13:50.974, Speaker H: We're on time. Okay, we have a couple of pending.
07:13:51.022 - 07:14:00.018, Speaker D: Transactions, which is kind of unfair to the persons who called it. Let's see how we can do it.
07:14:00.104 - 07:14:10.280, Speaker H: Okay, we can award the person from the previous raffle who reached the most on the board. Is this fair to you?
07:14:11.450 - 07:14:12.200, Speaker D: Yes.
07:14:12.650 - 07:14:18.860, Speaker H: Okay, let's check the events log, how we do that.
07:14:20.990 - 07:15:03.750, Speaker D: So if I go to events, it's easier just to. We can do the easier way, actually, I'll just switch to previous address. Saul, stop sharing my screen. Now they're going to steal my free alchemy key. Okay, it frozen again. TikTok, TikTok, you're not seeing the transaction. It can't be transaction.
07:15:03.750 - 07:15:31.120, Speaker D: Do we have 22 this because there are 22 people. So we can give this. Okay, everyone is winner. And we will see about the socks who can't live without chain link socks.
07:15:33.540 - 07:15:48.912, Speaker H: We cannot decide whether. Sorry, I tried. Do we want that for two pairs?
07:15:48.976 - 07:15:54.550, Speaker D: For the one pair, we can do the board stuff. Okay, maybe again.
07:15:55.660 - 07:16:00.452, Speaker H: Who slaps me the hardest can be honest, because I imagine like, you're all piston.
07:16:00.516 - 07:16:30.190, Speaker D: Sorry. Okay, let's do this a couple of seconds. A 47330. No. Oh, no. Oh, no. This is the previous one.
07:16:30.190 - 07:17:08.520, Speaker D: Yeah, but I think it's faster if you just spin up the UI than to manually compare the events. If you agree. Okay, cool. Okay, cool. Let's see what's going on. Oh, who is surgeon from the previous raffle?
07:17:11.260 - 07:17:12.490, Speaker H: He got some.
07:17:14.320 - 07:17:16.350, Speaker D: He left he was at the field.
07:17:16.720 - 07:17:22.444, Speaker H: He reached the end of the board like the one other guy, but we.
07:17:22.482 - 07:17:44.500, Speaker D: Gave socks to other guys. Okay, let's do this. You can see a bunch of memes screenshots while this is expanding. I am a meme fan. Yeah, just wait for a couple of more seconds.
07:17:46.680 - 07:17:49.476, Speaker H: I'm live. Okay, we are trying to decide to.
07:17:49.498 - 07:18:13.810, Speaker D: Whom we are going to give socks because we have these for everyone. These are nice. I don't have this. Okay, so fill position. Let's sort this by highest number hoa.
07:18:14.310 - 07:18:19.670, Speaker H: From the previous raffle. Come here to the stage.
07:18:27.050 - 07:18:30.798, Speaker D: Congrats, you deserve it. Should he like take a picture?
07:18:30.914 - 07:18:35.450, Speaker H: Kidding. Okay. Jay Albert.
07:18:44.850 - 07:18:49.406, Speaker D: Yeah, here we go. Hardly deserve. Yeah, thanks.
07:18:49.588 - 07:18:59.730, Speaker H: And Eric. Okay, for the rest of us, everyone can grab one piece of this. Don't steal two or whatever.
07:18:59.800 - 07:19:00.706, Speaker D: We don't have it.
07:19:00.808 - 07:19:21.334, Speaker H: I don't have this, so please talk to someone to give me this awesome piece of swag. Congrats, man. Yeah, we don't have an official photographer, but this was nice. Okay, I hope you enjoyed. I'm sorry once again that the initial version didn't work, but it was fun.
07:19:21.372 - 07:19:23.020, Speaker D: Watching me sweating here.
07:19:23.630 - 07:19:36.334, Speaker H: So yeah, we'll learn something about redeploying and everything. So once again, when you want to deploy a smart contract, especially after the merge, wait for at least two finalized epochs. One is not enough.
07:19:36.452 - 07:19:37.120, Speaker B: Two.
07:19:39.570 - 07:20:06.566, Speaker H: That info told me one guy from the ethereum foundation, so I assume they know their stuff. I hope you enjoyed, I hope you had fun even if you didn't play the game we talked about. Check effect interaction pattern, about some VRF stuff, about some good and bad practices and solidity. So I hope this was useful for you and for you guys. We can stay chill, chat about it.
07:20:06.668 - 07:20:09.974, Speaker D: Chat. Sorry, I'm not a native speaker, but.
07:20:10.012 - 07:20:18.700, Speaker H: Yeah, that was it. Thank you. Don't forget this one.
07:20:20.110 - 07:20:27.114, Speaker F: I hope that you enjoy and you.
07:20:27.152 - 07:20:36.434, Speaker D: Are on the conference and the happy house Ziki, pal. Yeah, that's awesome. Not going to work.
07:20:36.552 - 07:20:46.510, Speaker H: So am I still in the stream? Bye.
