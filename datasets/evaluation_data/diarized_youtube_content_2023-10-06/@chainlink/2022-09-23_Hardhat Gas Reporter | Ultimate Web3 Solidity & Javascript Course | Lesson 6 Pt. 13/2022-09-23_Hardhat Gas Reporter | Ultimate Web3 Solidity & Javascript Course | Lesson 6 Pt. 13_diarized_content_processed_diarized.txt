00:00:08.970 - 00:00:59.498, Speaker A: Now that we have some tests, we can actually start testing to see how much gas each one of our functions actually costs. One of the most popular extensions for a hard hat is the Hardhat gas reporter. This is an extension that gets attached to all of our tests and automatically gives us an output that looks like this. That tells us approximately how much gas each one of our functions cost. We scroll down in here, we can read the instructions on how to actually install this NPM install hardhat gas reporter which we're going to use with yarn. So we're going to say yarn. Add hard hat gas reporter dev and now that that package is installed, we can go over to our config and add some parameters in here so that we can work with this gas pit.
00:00:59.498 - 00:01:44.586, Speaker A: Right underneath our etherscan section, we're going to add a new section called Gas Reporter to have it run. Whenever we run our tests, we're going to do enabled is going to be true. And then up at the top we can add it by adding require hard hat gas reporter now that we have it in here, we can do yarn hard hat test. And after we run our tests, it'll automatically run this gas reporter. So we see our tests go ahead and run and then we get this output that looks like this. That tells us approximately how much our contracts and methods cost. So our store function looks like it costs approximately this much gas and our simple storage costs approximately this much gas.
00:01:44.586 - 00:02:23.020, Speaker A: This is incredibly helpful for figuring out how to optimize our gas as best as possible. Now, I usually like to take it a step further though. Having the gas outputted like that is nice, but we can make it even better. I like to output it to a file by doing output file gas report txt and then in my git ignore. I like to add it in here by doing gas report txT. Since it's not really important for the gas report to get pushed up to GitHub, we'll do no colors is true. The reason we add this is because when we output to a file, the colors can get messed up basically.
00:02:23.020 - 00:03:11.962, Speaker A: And then the biggest addition we could do is we can add a currency in here so that we can get the cost of each function in USD for a blockchain like Ethereum. Now, in order to get a currency here, we actually need to get an API key from Coinmarketcap, just like we did with Etherscan. We can go to Coinmarketcap coin market cap API hit get your API key now and we'll go ahead and sign up. Choose a basic plan. We'll agree and create my account. We'll get an email verification and we'll go ahead and verify now in the Coinmarketcap dashboard, we can copy our key and yep, you guessed it. Exactly what we're going to do with this key.
00:03:11.962 - 00:03:58.962, Speaker A: We're going to drop it into our env file. We're going to say coin market cap API key equals and then paste it in there like that. Now that we have our Coinmarketcap API key in here, we can go back to our hard config and add it in this Coinmarketcap parameter. We're going to do the exact same way we did above. We'll do const coin market cap API key equals process emb coin market cap API key and then we'll take this and stick it in here. So what this is going to do is it's actually going to make an API call to Coinmarketcap whenever we run our gas reporter. This is why sometimes you'll see me comment this out and uncomment it because I don't always want it to make this API calls.
00:03:58.962 - 00:04:49.238, Speaker A: But now what we can do, now that it's enabled, we have an output file, we can see the currency and we have our API key. What we can do is run yarn hard hat test and after all our test passes, we're going to see a gas report txt that we can go ahead and read from, which has that gas report. And now it actually has the USD price of each one of these transactions. It looks like at current prices, with Ethereum being $3,000 per eth and a gas price of 43 guay, the store function would cost $6 and the symbol storage function would cost $64. The hardhead gas reporter actually comes with some different options though. If you're going to be deploying to a different network, for example with binance, Polygon Avalanche, or Heco for example, let's say we wanted to deploy to Polygon. Let's see how much deploying to polygon would cost.
00:04:49.238 - 00:05:38.554, Speaker A: Well, in our EMV we would add token matic and now we'd rerun this test. If we look at our gas report txt, we'll now see the gas price of polygon right now is around 37 guay per gas and the cost of matic is 147 per matic in USD. Now we can see the cost of calling the simple storage method is going to be $0.00. Now this of course is rounded down, but it's going to be really, really cheap to call store versus deploying the contract is going to cost three cents. I make it a habit to select false for my gas reporter whenever I don't want to actually work with the gas here. Awesome. Now, sometimes when we're working with our code, if we don't have these environment variables specified, hardhat might get a little bit upset with us.
00:05:38.554 - 00:06:29.800, Speaker A: So oftentimes I'll add some code in here so that these variables are always populated. Because if we didn't specify our rinkbrpc URL, rinkbrpc URL is going to be undefined and that might throw some errors below. So oftentimes what I'll do is I'll add an or parameter here. These double pipes mean or and in Javascript, if we say some variable equals something or something else, what is really happening is we're going to say, okay, rinkbrpc URL is going to be equal to process env rinkbrpc URL. But if this rinkbrpcrl doesn't exist, it's going to be whatever else is over here. And I might write something like HTTPs eth rinkib example or something like this, just so that I don't make hard hat mad if I don't use rink B. And we can do something like that for all these.
00:06:29.800 - 00:06:35.730, Speaker A: So you'll see this syntax oftentimes in a lot of coded setups.
