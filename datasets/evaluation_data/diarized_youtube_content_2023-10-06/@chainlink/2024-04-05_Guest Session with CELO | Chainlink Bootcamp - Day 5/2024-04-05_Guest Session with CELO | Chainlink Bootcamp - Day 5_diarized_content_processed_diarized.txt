00:00:00.400 - 00:00:26.870, Speaker A: Why it's an amazing ecosystem and why we are very excited to be working in it. I am personally responsible for hackathons. I will tell you also a bit more about that later at the end of our session. But yeah, for now we just going to get started. Let me. Can we get the slides? Perfect. Okay, cool.
00:00:26.870 - 00:00:59.834, Speaker A: So this is us. You can find us also on Twitter, me under gigahertz. Cynthia, you can find Anderseni Kamau and I will just tell you a bit about Celo and then Cynthia will also show you how to get started very quickly to build on Celo. Also, we understand, like all of you are very new to web three, so welcome. It will be an exciting ride. I had the best time ever. I feel like since two, three years, it's been an incredible.
00:00:59.834 - 00:01:33.078, Speaker A: Right. Working and building on blockchain is. Yeah, just incredible. I feel like you work with people that have the same principles and passions as you. So very welcome to all of you here in the web three space. And also for everybody from Turkey, there will be also a bootcamp in Turkish in two weeks for this, the same bootcamp that you're doing right now. And we will also have a session on Celo in Turkish.
00:01:33.078 - 00:02:02.234, Speaker A: So you should sign up for that and bring your friends. Yeah, so I will get started. Let me see. So first of all, we are very excited to be partnering with Chainlink Bootcamp. I think this is an incredible initiative with so many people signing up and onboarding. This is an important job to be done and Chainlink is doing it. So we are very grateful to be here today.
00:02:02.234 - 00:02:10.954, Speaker A: And, yeah, Cynthia, do you want to also say hi to everyone and introduce yourself?
00:02:12.694 - 00:02:31.326, Speaker B: Okay. Hi, everyone. My name is Cindy Komau. I'm from Kenya. I'm the devrel lead for Celo Africadao. I'm so excited to be here with my partner, Lena as we take you guys through a very friendly introduction to Celo. Lena will take you guys through the intro.
00:02:31.326 - 00:02:46.798, Speaker B: I'll take you guys briefly through how to quickly set up your environment. And also we'll see minipay in how it works in a very friendly intro. Again, thank you guys for coming and I hope we have a very nice experience here.
00:02:46.886 - 00:03:14.954, Speaker A: Yes, we have a lot of workshops this week together. I will tell you later why. But it's been really lovely. So very great we can be here together today. So first of all, what is Celo? Celo is a blockchain, and our motto is building with purpose. Building for all. Celo is a mission first planet positive blockchain, ecosystem leading a thriving digital economy.
00:03:14.954 - 00:04:01.210, Speaker A: And what does that mean? I will explain you now. First of all, we want to show you, this is our ecosystem. As you can see, we have a huge ecosystem with. You can also find chain links that already exist in three years and has been live as a blockchain. We are so let me go here, start here. What is Celo? We are a layered one blockchain, EVM compatible. And the main important thing is we are mobile first.
00:04:01.210 - 00:04:46.944, Speaker A: So we really, since the beginning, we focused on building for mobile users, for actually people that need blockchain. And so the whole infrastructure that we build is mobile focused. So when we started also the addresses were bound and created based on the phone numbers, which is very specific or like, which is only now being explored by other chains. It's very like fast. We have a five second transaction finality. And very important also is we have very low transaction fees. So it's like 0.00
00:04:46.944 - 00:05:44.448, Speaker A: USD. So compared to other blockchains where you sometimes pay a few dollars or even more for transactions, that won't happen. So our team is again very accessible. Important to say is also you are very new to blockchain, but I think you already like maybe did your first transaction and you understood that you have to pay gas fees and gas fees. You normally in most blockchains, you pay in the native token, like in Ethereum, you pay with ETH, and Solana you pay with Sol. In celo you can pay with celo tokens, which is their native token, but you can also pay with stable coins like CUSD or USDC. Stablecoins means the tokens are packed to a fiat currency, a real life world currency.
00:05:44.448 - 00:07:24.230, Speaker A: Right? So that makes seller, of course, very interesting for emerging markets where in general, accessibility and onboarding, where people don't trust, like don't want to be dependent on like high volatility currencies. We also, we just had USDC deploy on seller, same as USDT. So very exciting for our ecosystem and for what is possible for, especially for businesses and remittance payments and transporter payments in general. So coming back to the ecosystem, we don't only collaborate. If you go into this graphic more and more deeply and you look at it, you can see that there's a lot of very known blockchain protocols that we collaborate with and it that are deployed on Celo to provide our ecosystem with the infrastructure they need to build successful and great projects. But we also collaborate with web two companies like Telecom and Opera. And this, we will explain you later why this is a huge benefit of a huge part of the success of Celo.
00:07:24.230 - 00:08:29.884, Speaker A: Why it makes sense to that to build on Celo. You can also see one of the things that I wanted to mention again, I said from the beginning on we are a purpose driven blockchain and we collaborate with many ecosystem partners that focus on regenerative finance. Regenerative finance means we try to create a financial system in which we don't see the environment and people as something that can just be used, but we try to understand how to create sustainable systems. And for once we are a carbon neutral chain. So we offset all our transaction costs on chain with token tokens like carbon credits. And so we actually like set off offset more than we consume. So we are actually a green blockchain.
00:08:29.884 - 00:09:28.676, Speaker A: In general, our whole ecosystem is very focused on regenerative finance. We promote climate planet positive actions. We invest a lot in local communities, again in projects that focus on carbon offsetting. And these are just some examples of projects that exist in our ecosystem and are very again, purpose driven. But these are like now I presented you some of the projects that are already live in our ecosystem, but we also want to show you what you can build. And now we come to Minipay. I don't know if Celo has a current partnership with Energy web.
00:09:28.676 - 00:10:39.444, Speaker A: That is a great question. I can look that up and answer that for you in a message later. Cello's consensus mechanism is proof of stake. It's yes, let me get to this in a second. So why should you build on for mini pay for sello? Because we have minipay. What is minipay? Minipay is a browser wallet, but not for your desktop browser, but for your phone browser. Minipay is deployed in opera mini beta, which is a phone browser that has a distribution of 80 million in Africa.
00:10:39.444 - 00:11:30.008, Speaker A: And you can just add minipay as an extension. I guess by now you have already created your first metamask wallet or tried to like onboard some crypto or buy some crypto. And you probably realized it's a lot of different steps that are very complex and also like, you have a lot of security risks. With Minipay, this is done much. There's like a much simpler process because you only have to sign in with your Google Mail address and then your wallet address is also connected, being created, connected to your phone. The whole user experience is much more web two and very seamless for web two users. It's a stable coin wallet.
00:11:30.008 - 00:12:17.192, Speaker A: So as I said, gas fees are paid in stablecoin. So it makes sense for people like you don't see like gas is 0.0.0 point something east, but it's $0.001. And like that, it's of course much user friendly for people that are entering web three. And currently it also abstracts a lot of the logic that you normally have in a wallet away. And so what I mean with that, when I say like if you build for minipay, you build for purpose, is you actually build for users. A lot of web three protocols or projects that you will encounter are not yet really ready for mainstream adoption.
00:12:17.192 - 00:13:44.054, Speaker A: There's still a lot of pieces missing on how to really onboard users. If you build for minipay, you kind of like already ask two steps ahead because you have a distribution network to reach people outside of web three and you have a framework that provides a very simple user experience. Of course, I'm saying simple user experience, it's the hardest thing to build, actually. So we are looking for people that come from web two that looking for to bring web two projects to web three, use the opportunities of the blockchain technology and don't want to complicate, but also try to understand where are the biggest pain points for web two users when entering web three. And the biggest news is we just hit 2 million users and that is, that is very huge for any wallet or any web three application, especially as your app, if that will be deployed in minipay, will already get that distribution without you having to promote it. So let's look at how to build on minipay. Cindy, I will hand over to you now and you can share your screen.
00:13:46.674 - 00:14:05.794, Speaker B: Okay, thank you very much, Lena, for that. Okay, so let me just, let me just share my screen. Okay. Can you see my screen?
00:14:08.254 - 00:14:09.034, Speaker A: Yes.
00:14:09.854 - 00:15:01.784, Speaker B: Okay, awesome. So like Lena said, building on minipay, we have a focus on what the value we try to bring with minipay is you. First of all, we create a very awesome user experience where people don't need to really remember a lot of private keys. Also, when developing Celo, we do love making developers to have a seamless experience as possible. So which is why first of all, before I even get to this, I would like to see you the, I would like to show you the end result so that you can be able to follow through what we will be seeing. So here is we have a tool called Cello composer. Composer helps you be able to quickly set up an application.
00:15:01.784 - 00:15:46.494, Speaker B: Let's say you want to build on Celo and you, instead of starting from scratch, they give you a template where you're able to configure everything from the backend to where you will be writing your smart contract. We also help you with configuring whether you want to use hard hat or you want to use truffle, and also not just on your back end. Also, when it comes to know the front end, we give you options. Essentially, do you want to build using react? Do you want to build using next JS? So that's the whole point of the fellow composer. So here you'll see this is the final, final product of what we have from the composer. Also we've added some bit more functionalities. You'll be able to access the repo later on.
00:15:46.494 - 00:16:30.756, Speaker B: So the reason why I've shown you this is because when you now come to the GitHub repo for the cello composer, the first thing you will need to do is you need to clone it to your local machine. So you just come here and then you just open up directory and then you just paste it and yes, let it be downloading. Yeah. So as you can see, the first thing you will decide to choose which framework you want to use. So you decide to go with react. Also for your framework which you want to use to be able to also deploy a smart contract. As you can see, we'll go with hardhat, a subgraph.
00:16:30.756 - 00:17:05.872, Speaker B: Essentially it just helps you when you are creating your front end and you just want to be able to query data. Yes. So for now we won't be using it. But when you're now creating complex applications, especially on front end, it's something which you will use so that when you're able to access your data from the blockchain, it minimizes the latency you're able to quickly access it. So for now we won't be using subgraph. So for project name, let's just say, hello, chainlink. Yes.
00:17:05.872 - 00:17:18.322, Speaker B: And now as you can see, we'll be able to create it. So, yes, so now we have our, we have our project essentially.
00:17:18.498 - 00:17:19.254, Speaker C: Yes.
00:17:22.274 - 00:17:52.820, Speaker B: So here it is. Yeah. So what you'll see with the composer, essentially you'll just be able to see everything from hard heart. So here is where you're going to write your smart contracts. These are the scripts which will help you to deploy the smart contract. And also we have tests when you want to like write your test. And also now for the front end, this is where you will be writing your front end, essentially.
00:17:52.820 - 00:18:55.824, Speaker B: We know. So, yes, so essentially this is just a bootstrap essentially to help you in creating your applications. So we will now get to see an example where we've used this. So there's something really important that I want you to see. That's why I started with showing you the front end, essentially that we were able to deploy. This is because when you get here, something that you notice in the header we have a connect wallet where you'll be able to connect with essentially the wallets you want, whether it's metamask or Omni or wallet connect or coinbase. So something which will, it's really cool in minipay is that we have this functionality where in minipay, if you really, if you want to test out your application or you want to use your application, you can use it within the mini Pay app, which you will be able to see here, let me show you.
00:18:55.824 - 00:19:02.994, Speaker B: Yes, so I'm mirroring my mini pay app from my phone, which is, you see here.
00:19:03.074 - 00:19:03.690, Speaker C: Yeah.
00:19:03.842 - 00:19:26.854, Speaker B: So what I essentially want to say is when you're testing out your applications, you test it out within, within the minipay wallet in itself, within opera. So you just come here to test page and you enter your URL for your application. So let's just do that so that you can be able to see.
00:19:27.034 - 00:19:28.234, Speaker C: Just a sec.
00:19:29.174 - 00:20:09.394, Speaker B: Oh, it's not that one. Okay, just a sec. As I get the right application. But essentially that's it. So something which I would really want you to note is that when it comes to the front end, we have this, let me. Yes, we have this hook here. We have this hook that enables you, this is actually very important, which you all need to put in your application so that you can be able to properly build on minipay.
00:20:09.394 - 00:20:51.044, Speaker B: Essentially what it does is just to say, if your application detects the environment for minipay, if it's there, you don't need to put the connect button, this connect wallet button. You don't really need to put it there. So this is the whole, um, this is the whole concept of use effect. So this is something that you will see in the docs for building on minipay. So we have the whole documentation here. In the meantime, let me be. Yes, so it's working.
00:20:51.044 - 00:21:03.764, Speaker B: Yeah, let it, so as you can see, I want you to see on my phone. Yeah, let it load. But essentially. Yes, there we go. So one thing you will notice is that.
00:21:04.984 - 00:21:06.244, Speaker C: Let me just.
00:21:16.924 - 00:21:51.754, Speaker B: Yes, so as you can see side by side in my desktop, because I don't have. Minipay is an Android. So that's why we, it's only available on Android phones. That's how you can see you test it out within your application. So as you can see, the difference between the two, here we have the connector wallet button. But when it comes to my phone and now the mini pay app in itself, we don't have, we don't have the connect wallet because essentially, it has been able to detect the environment for minipay is there. So we don't need to connect wallet.
00:21:51.754 - 00:22:28.042, Speaker B: So that's one of the many advantages that minipay offers. So, first of all, it, as with Celo, we have the functionality where you can be able to send assets between people using the phone number. Essentially, you don't need to copy everyone's wallet addresses. So also with minipay, we have that functionality. And, yes, so I can just. What this to what this kit has, the cello composer kit. It has the functionality where the.
00:22:28.042 - 00:23:11.574, Speaker B: You're able to get your address and also send money. So it's just a simple application where you can be able to send money. And also, if you want to sign a message, you just sign. So as you will be able to, you'll be able to access this template. You add functionalities. You basically just tinker with it. But yes, the main important, the most important thing is remembering to add the effect where you basically remember to inject your mini pay environment so that your website is able to essentially interact with Minipay as you'll be able to see with the documentation.
00:23:11.574 - 00:23:49.130, Speaker B: Yes, as you'll be able to see with the documentation. You can also add this on other things called web three js, which is used to interact, essentially to, uh, link your front end with your smart contract. Yes. So we have all the code snippets in our documentation to be able to help you to connect with Minipay. But essentially what I wanted to show you is, is how you test. How you test on mini pay. Yeah, you just, once you download minipay on, you download opera.
00:23:49.130 - 00:23:51.738, Speaker B: And then can I ask you, Cindy.
00:23:51.866 - 00:24:02.930, Speaker A: Can you maybe just, like, walk people through how to download? I think that would be very, very useful for everyone. Just.
00:24:03.082 - 00:24:32.704, Speaker B: Okay, so let me just. So we'll just first go to the play store, and then once you go to the play store, you just search for opera. We have two. We have opera mini, the browser in itself, opera mini. And if opera Mini is not working, we have opera mini beta 2023. So you just have the two browsers. So you essentially, you just install it.
00:24:33.284 - 00:24:34.012, Speaker A: Okay?
00:24:34.108 - 00:25:00.886, Speaker B: Oh, okay. Sorry. I had already installed it. So once you install, you just open it as we, as you do with other browsers, obviously, you'll just set it up already. I have set up my opera mini. But the most important thing is when you, at the homepage when you see the opera site. There we go.
00:25:00.886 - 00:25:19.614, Speaker B: We have Minipay. So essentially that is where minipay is. It's integrated within opera so you can't access it anywhere else. You have to download the browser. But it's so simple. Also something else is. Yeah.
00:25:19.614 - 00:25:37.596, Speaker B: So if you want to test out your application, you need to click on the explore button. It has that compass sign as you will see. Yes. And then here you will discover applications which are there. Such as we have block, scratch. These are applications which are within. We have impact market.
00:25:37.596 - 00:26:11.044, Speaker B: We also have good dollar, hellofy. And then now the site that you want is the site tester. So here's this site tester is where you now test out your application after you, you built it. Yes. So this is we will see later on. But you essentially we, in the documentation, you also see how you'll be able to get a link to be pasted here so that you can be able to test out your, your application. Yes.
00:26:12.544 - 00:26:13.564, Speaker C: Okay.
00:26:18.524 - 00:26:21.704, Speaker B: So we have everything on the documentation.
00:26:23.284 - 00:27:16.904, Speaker A: If I can just quickly just, you can scroll up. I just want to explain to people, like if you, if you scroll up to the top, you can see just like scroll a little bit down under overview there's like installing mini page. So if you just open that page inside of your, inside of your browser, it will immediately download opera Minibita for you. And then you click the link access mini pay which will add mini pay to your browser. So it's very simple. Just Google Minipay and building on Minipay and then you will find all the apps and this is how you can add mini pay. We will also add links to how you can find out how to activate Testnet in Minipay that is available.
00:27:16.904 - 00:27:46.098, Speaker A: And yeah, I'm. Let me see if we have other questions. Yeah, so far it's only on Android, but in the future, very soon it will also be available for iOS. Just not right now. So that's on the roadmap. Not yet. There's like a roadmap also for opera, like for Minipay to become a wallet, like independent wallet.
00:27:46.098 - 00:28:23.430, Speaker A: But that is so far it's just accessible for Android. There is more on the roadmap. Yeah. For testing it, you need to run use Android Studio. Just very important remark here. You can't set up your Mini pay account in Android Studio. You need to set that up on a normal device.
00:28:23.430 - 00:28:59.748, Speaker A: It will be blocked by Android Studio. There are other, all the links are being added also in. We will share all the links afterwards for all of you. We kept some of the information away. Right now we will share a video that is more extensive in explaining all the steps for how to set up, from setting up cello composer to really streaming that into and testing that into your application. We wanted to not confuse you and overwhelm you with everything. So that's why now.
00:28:59.748 - 00:30:13.930, Speaker A: For now, this is what we wanted to show you today, but happy to answer all questions regarding. So maybe we can share again the slides and then we can also answer more questions regarding where you can continue building. I'm not sure how to perfect. Okay, cool. So I hope this little tutorial gave you all a good intro into how you can just like set up sello composer like this. We will also share more in detail video on cello composer with you and then how you can easily deploy any app in Minipay. As Cindy explained, it's really just one line to check if the application is in minipay.
00:30:13.930 - 00:31:02.374, Speaker A: If it is, normally we always check is a wallet connected with this like Wyndham Ethereum. In this case we check if minipay. If the app is opened inside of Minipay and then the button won't be shown. So in case like you don't want to use cello composer and you just want to add it to any other application, you can find these code snippets that Cindy just sent showed you in the docs that you can add to your project. And that is the only part because if you open an application inside of minipay, it will already be. You already have the connection to the blockchain because you're already inside of a wallet. So yeah, I wanted to show you again.
00:31:02.374 - 00:32:16.694, Speaker A: This is the link to our docs. If you go to our docs, you find directly the link to the minipay docs. Below you also find a more interesting wait, I will read the comment in a second and answer you. So below you find how to get started with cellular composer I'm getting this error message generating custom cello composer project with the following packages. Too many arguments. I am wondering, did you follow like normally if you just follow the default. Did you just follow the default of just clicking yes, yes, yes, no and adding the name of the project or what? Did you enter anything specific when you try to set up the celo composer? Can you share more information on what commands you entered? How do you use Chainlink on Celo? So currently we have the chaining price feed deployed on Celo.
00:32:16.694 - 00:32:41.394, Speaker A: More functionality is coming soon. And so especially for financial applications, this is very interesting and I will get to that in a second where you can actually test that out again here. This is the link to the cello composer. You can always just find it by entering cello composer. It's the first link that shows up.
00:32:47.374 - 00:33:37.784, Speaker B: Elena, as you look for that, can I just add one more thing that's very important as you continue to build on minipay. So as you'll notice when you, so that you can be able to interact with. Yeah. So that you can be able to interact with your application. Obviously you will need some test tokens. So how you'll be able to access that using minipay is once you have your, sorry, once you have your, you've opened up minipay, you've just come to the settings and then you go to about. And then to be able to enable developer settings you need to click on the version around seven times so that you can be able to enable developer settings.
00:33:37.784 - 00:34:24.868, Speaker B: Sorry. So that when you go there. Yes, developer settings are now enabled so that you can use the testnet. So that because normally minipay is obviously it's the main net. So in order to be able to enable your testnet so that you can use test token, you do that. So to be able to access your wallet address because normally it's designed for you to build, I mean to send assets using phone number, you just go to add cash, wallet or exchange and then now here you have your wallet address. So you just copy it and then you come to the alpha jar faucet and then you paste it there.
00:34:24.868 - 00:34:29.412, Speaker B: Let me just send it to so.
00:34:29.428 - 00:35:23.500, Speaker A: That I can just, we will send out an email with all the links to the videos that are more in detail. And we will also share the GitHub repository that Cindy just used that you can use to get started with building that also contains all the links. Answering the next question, first of all, thank you so much for showing the faucet, I think, and also explaining how to get the wallet address because as also somebody here said yes to make everything easier. We don't want to show you your wallet address, but we just show you your mail address and your phone number. Like if you want to find your wallet address you can be a more advanced user. Otherwise we have simple off and on ramps. Minipay is currently deployed in Kenya, Nigeria and Ghana.
00:35:23.500 - 00:36:05.370, Speaker A: With more countries coming soon. Deployed means having proper on and off ramps for these countries. And regarding the security, yes, it makes it much simpler. Like you better, you have, you can access your account through your Google account. So like even like even if I. I can log into minipay for example in the Android phone and even if I lose my phone I can recover my account. If you want to like remove your account from minipay you can also export like the secret password phrase.
00:36:05.370 - 00:36:56.324, Speaker A: And if you want to use it somewhere else it's like any other wallet. It can hold all the other funds. It just like in the front end. Currently it is focused on people who don't have who are not web three native because that is most of the people and we want to build for most of the people. We don't want to just build for the small web three native part where I think whenever we onboard people or for you everything must be very overwhelming. Just like simple task of how to fund your wallet to send gas fees to do anything. And so next question was how do you use CCIP? We don't use cCip yet as it's not yet deployed on celo but we're looking forward to having it deployed soon.
00:36:56.324 - 00:37:43.224, Speaker A: Link to the faucet is you can also. I wanted to share it. Yes. Why do you need mini pay? Mini pay? You need mini pay like you can use any other wallet. Why would you use mini pay is because maybe you want to send money to your mom or your grandma who is not was not a webster native person and who would be very overwhelmed if you would explain how to use metamask. Right? Like mini pay is for everybody everyday use for everybody on their phone. If you use most application on your phones you run into many issues when you.
00:37:43.224 - 00:38:44.144, Speaker A: I'm not sure how much you use metamask on your phone or trying to like do any kind of transaction or like use applications that then have to open metamask. But for me I constantly have to like close everything, reload and then already connect to the right network. It ends up in a lot of stress and it's not very usable so far. Most like phone mobile applications and having minipay you open up applications inside of minipay so you don't really have to move between different applications. Right. And you can even like you can test it out. You can actually download minipay now and like input any web three application that you want into the test, into the test net in the side tester and then yeah, you can test it out if it's deployed on seller of course.
00:38:44.144 - 00:39:33.114, Speaker A: And when does I was thinking everybody here has not is new to web three development but so celo on our roadmap for this year is of course moving to becoming a layer two. I mentioned earlier we are layer one, but we are moving to becoming a layer two. Currently we are still deciding on the tech stack. If you want to learn more about that, you can always check out check that out in the celo forum. I will also share the link for that with you in case you're interested in finding out more about that. Exactly. Mini pay is bank the unbanked thank you.
00:39:33.114 - 00:40:24.500, Speaker A: Your mini pay wallet is also in Ethereum and address. So far I don't you can import your metamask wallet into minipay, but you can just send funds from your metamask wallet to your mini pay and then just use it like that. So that's possible. And you can again export your mini pay wallet, for example, into a metamask, do your normal stuff with that, and then still use it on your phone. That would give you. If you create an account on minipay and then use that wallet somewhere else, that is also an option. More question is Celo a Dao? Amazing question.
00:40:24.500 - 00:41:28.328, Speaker A: So Celo is an ecosystem that is decentralized. We have several core contributors, like the Celo foundation that I'm part of that is investing in creating an ecosystem, building out the ecosystem. Then we have C labs, who is a core contributor to building out the infrastructure. We also have just voted on and approved a public goods committee and who distribute funds to the two community projects so that they Celo foundation. We do devra work, but we shouldn't be the one approving all the grants for the community, right? So we are also slowly decentralizing more and more and distributing more responsibilities to the ecosystem. We also have a lot of regional daos like South Africa Dao, Latam Dao, Korea Dao, Thailand Dao, India dao.
00:41:28.416 - 00:41:28.664, Speaker C: And.
00:41:28.704 - 00:42:10.192, Speaker A: And that means also all of these tasks are independent. We all work towards the same goal, which is like making Celo a successful ecosystem. But yeah, you can. All decisions are made in our forum and being voted on. So I will share the link to the forum so you can check out. It's super interesting. Why are we moving to the LA? To become a layer two? We are moving to becoming a layer two to be closer to the Ethereum ecosystem.
00:42:10.192 - 00:43:09.050, Speaker A: We think it's a very amazing ecosystem. It makes sense in the future to be multi chain, to be able to interact and share liquidity with many chains and have at the end, I think for everybody, it's true that in the end we will not have. Nobody will know what chain an application is on. We all strive to provide the technology for what people are looking for to build. And it's, no, it will not mean a new coin. We have seller as our native coin. That is a great question about the chaining scale initiative that I hope the chainlink, I think of course, I would say chainlink is the biggest operator of oracles.
00:43:09.050 - 00:44:11.644, Speaker A: So now people are going deep into the questions. So how. Yeah, exactly. That's a good place to ask all of these questions because yeah, I would say of course we are looking forward, like having the price feeds is very important for any application that works with prices. But of course a lot of the other functionalities that are coming soon to sello will also mean like the functions and CCIP will mean a lot like huge steps in what kind of functionalities we can also offer. The applications deploying on celo. I cannot tell you who are the initial investors because I have, I am, I have not asked that question myself before.
00:44:11.644 - 00:44:57.174, Speaker A: How decentralized seller is. I would say it is quite decentralized. Again, as I said, most decision, all decisions are made in a forum. There's not one centralized entity that decides on something. Right now, as I said, we're deciding on the tech stack for layer two and it's not up to us, it's like up to like the different chains with the chain tech stack proposed handing in proposals and then the ecosystem deciding on what to choose. Of course there's like, there is.
00:44:59.394 - 00:44:59.730, Speaker B: A.
00:44:59.762 - 00:46:01.054, Speaker A: Way on like how clebs like one of the core contributors, what they recommend or endorse that will have an impact. So that is so funny. That is all really great questions. Celo has been founded on Earth Day and you can find all the information actually in our forum on when it was initially launched and when it has been founded. And I am just not a person that is great with years and numbers, but I would say three years. Cellulos is live for a long time. Cellular has been investing a lot in the ecosystem and you can see that by us having over more than 1000 projects already deployed, we have been.
00:46:01.054 - 00:46:27.394, Speaker A: Wow, so many questions. I have been a blockchain developer since two years, I would say almost. I started three years ago to learn about blockchain development and now maybe we can share the slides again because I know, I'm hoping we don't go so much over time. Thank you so much.
00:46:29.974 - 00:46:30.714, Speaker C: And.
00:46:34.854 - 00:47:10.688, Speaker A: So, yeah, just again because I think we need to slowly wrap up here. So the, again, the link for the faucet you can see here. What I wanted to share with you is actually the hackathon that will kick off today. We have in half an hour, actually, to be honest. We are hosting a hackathon that is called build with cello, built with AI. It has an AI component, but the main focus is building on mini pay as well. It has a price pool of ten k.
00:47:10.688 - 00:47:54.384, Speaker A: It runs for three weeks from the fifth to the 21 April. It's beginner friendly. We have a lot of mentors that are there to support the hackers and builders and we also focus on building for application layer. So I think it's always easier to move from application layer to protocol layer as a developer in web three. And yeah, you get to build for actual users and that is what I wanted to share with you. This is if you scan the QR code, you can sign up, but you can also. We will also share that with you afterwards.
00:47:54.384 - 00:48:23.704, Speaker A: But yeah, I want to say I'm so impressed by all your questions. I hope, I'm not sure if I answered all your questions, if it's comparable to Ecosia, you could say we support a lot of tree planting initiatives. I think there's very big part. If you check out different projects, we invest a lot of in that as well. Yeah. Thank you so much. You are amazing.
00:48:23.704 - 00:48:54.394, Speaker A: That was so much fun. And I hope we will also answer the rest of your questions afterwards. I think we will get them and then we will make sure we also answer. Answer all the questions that we didn't get to right now. Thank you so much. Yeah. If you want to reach out, follow us on Twitter Celo and Celo Devs and join us in the cello discord and ask more questions.
00:48:54.394 - 00:48:57.894, Speaker A: We will be there. And if you want to learn.
00:48:59.674 - 00:48:59.986, Speaker B: If.
00:49:00.010 - 00:49:24.074, Speaker A: You want to learn more about Celo and building on cello, join the hackathon. I would love to see all of you there. Thank you, Lena. Thank you, Cindy. It's been really insightful and great conversation. Everyone in the audiences, thank you for being so active with your questions, engaging questions. Thanks, everyone.
00:49:24.074 - 00:49:43.004, Speaker A: Hope everyone had really great time together. And now. Yeah, thank you, cello team. And now we're. I'm just handing this over to the Chainlink team, to Andre and solange. Thank you so much for having us. Have a lovely day and happy building, everyone.
00:49:43.004 - 00:49:44.764, Speaker A: Happy building.
00:49:46.024 - 00:49:49.404, Speaker B: Yeah, thanks a lot. Sorry, thanks a lot.
00:50:02.924 - 00:50:03.904, Speaker D: Hi, Andre.
00:50:04.764 - 00:50:06.104, Speaker C: Hey. Hey. How's it going?
00:50:06.964 - 00:50:07.944, Speaker D: All good?
00:50:08.244 - 00:50:08.620, Speaker C: Yeah.
00:50:08.652 - 00:50:12.372, Speaker D: I think we had a fantastic session from the seller team.
00:50:12.548 - 00:50:13.116, Speaker C: Yeah.
00:50:13.220 - 00:50:49.010, Speaker D: For all the people who are asking questions about the links and everything. Seller team is going to send out an email where you'll have all the links to the videos and, uh, the tutorials, you can also find them in the pad. Uh, we added all the links that are really necessary to, you know, go and build on minipay. You can find those on the pad. If you have any questions, like, it's like the celebrity mentioned, you can join their Discord channel and ask them. Um, I think, Andre, we are on time, uh, for the q and a sessions. Uh, people, I think if you have added your questions on the form yesterday, we are going to answer them.
00:50:49.010 - 00:51:12.750, Speaker D: Since this is english track, we are only going to talk more about the english queries. English track queries itself, but if you have any questions from the past four days, feel free to share it after or in the chat. Andre will be taking care. I think we might be also joining with Solange soon. And over to you.
00:51:12.882 - 00:51:37.414, Speaker C: Yeah, thank you, Barat. Yeah. As being said, now is the Q and a session. I'm gonna go through all the questions from the form, which is written in English because I don't speak Spanish or Portuguese. So if you can just translate that and put in the chat, I'll answer those as well. Or if you have any other questions, yeah, feel free to drop them in chat and we'll see how it's gonna deal because of the time. So this is mostly gonna be from questions.
00:51:37.414 - 00:52:02.050, Speaker C: I saw the debugging session, but that's cool. Okay, first, let's go from question number one. I'm gonna just, I'm gonna just copy the whole thing. Can I. Oh, let's see. Nope, let's do it like this should work. So questions already.
00:52:02.050 - 00:52:40.546, Speaker C: Okay, so I'm gonna first prioritize the questions in the form. Okay, cool. So first one in a chat, in a, in a comment section. So call to token shop, get chaining data feed, latest answer reverted the transaction, blah, blah. Because function should be payable if you send value, and the value send double should be less than your current balance, debug the transaction, get more information. Okay, cool. So this is really generic, generic error, which is gonna be provided to you by remix.
00:52:40.546 - 00:53:06.208, Speaker C: If remix cannot figure it out, what went wrong. So because of that, I'll try to figure it out what went wrong. Okay, so I'm gonna share my screen. Hope you don't mind. So first of all, there was, that's, that's which one? Let's see, that will be token shop Sl. Cool. I'm going to grab it and put it here in remix.
00:53:06.208 - 00:53:35.084, Speaker C: So token shop Sl. Okay, cool. Okay, this should be fine. First of all, I need to switch the version of my compiler okay, cool. So the error was when calling this function. Okay, so first of all this function, and it was something about payable. So this function is not payable, it's a view function.
00:53:35.084 - 00:54:34.024, Speaker C: So when you have a view function, it's literally just a reading from a state on a blockchain. And you already learned that data feeds are actually implementation of push based oracle model which means that you have a don and each single node operator in a dawn constantly, constantly writes, constantly calculates the price of gateway given assets. Then they communicate between themselves using peer to peer network and using OCR using off chain reporting protocol and then reach a consensus and write the latest price data on a smart contract. And your smart contracts can consume that price data using this latest round data function. So there are two triggers. So either price data got above or below certain price threshold or just a heartbeat, heartbeat time expired. So we're going to write a new price anyway.
00:54:34.024 - 00:55:18.524, Speaker C: Cool. So why did this can reverse the first one, the first and most obvious one. Let's click go through the function. So it's a view function which makes an external call. So this is external call to another contract and it use call opcode under the hood. So this essentially means is that you have your external account then token shop contract address. Yeah, token shop contract.
00:55:18.524 - 00:56:34.584, Speaker C: Then it's going to trigger the aggregator with aggregator proxy is going to query the exact aggregator and then the price will be returned alongside other details from the round. So that means that if you call another, if you, that means that you need to know exactly the address of a proxy, correct one in order to call it. And each feed means different proxy address on different blockchain. So what can potentially happen here is that you tried to call this function, let's delete this. So let's deploy this. Token shop, let's deploy this. And for token address I'm gonna use whatever because I don't care.
00:56:34.584 - 00:57:14.744, Speaker C: So if I call this function, it reverted, the call function should be payable. So this is pretty much the same error you got. The reason for that is because let's go once again. So I'm querying the price feed which is desegregated proxy contract, which is this one. So this, there is another hand, there is another catch. So let's do something like this. So contract is the address contract.
00:57:14.744 - 00:58:07.890, Speaker C: So in solidity you can check function is the contract address to check public view returns. We'll see what we're going to return. So what you can do is so you can check whether, yeah, we can actually return you in 256. So we can check return to check code length. Okay. That means that if this value is zero, that means that this address is not a smart contract. Because on blockchain you have different type of accounts.
00:58:07.890 - 00:59:01.922, Speaker C: You have externally on the account and you have a smart contract. The difference between two is that externally owned account is determined by a set of private and public keys. So aka like wallet is just a fancy UI wrapped around your extremely owned account. And smart contract has code. So if I try to call the address, which is not to call a function from the address which is not smart contract, or that smart contracts didn't implement this address, well I can get the same issue. So if I compile this and deploy this smart contract, now I'm going to check for this price feed because this is the price feed we're calling, right? So I'm going to check for this address. Whether it's a contract, it's zero, meaning that this address is not a contract.
00:59:01.922 - 01:00:15.104, Speaker C: But how? If I go to dogs chain link. And if I go to data feeds and if I go to price feeds and this is price feeds or the feed addresses, sorry, price feed addresses. And if I go to ethereum, if I go to Sepolia, oh, actually what I can do is I can search for it, right? So if I search for this address, right, I can see clearly that it's like here ETH in terms of USD. But why it's zero over there? Why it's not in contract? Well, because this is on Sepolia testnet and I'm here on a local host. So the solution to this is switch to Sepolia. So you can do either injected provider metamask and then from your metamask account, sorry about this. From your metamask account, switch to sepolia.net,
01:00:15.104 - 01:00:55.954, Speaker C: redeploy the whole thing in the query. Or you can also have this sepolia fork which is a copy of a sepolia testnet in a given block. And if I do now the same thing, but on Sepolia we'll see. Is this the address? Is this address a contract? So this should not return zero. It's returned almost 7000, which is the length of the code. And if I do agree to read through interface, no, actually token shop and I don't care about this, I'm gonna just do whatever. Here it is.
01:00:55.954 - 01:01:53.874, Speaker C: Then I should be able to get a price. And here's the price. So this price now means that I need to go to details about, show more details about this aggregator. So we can see that the number of decimals is eight. So that means that because it's ETH in terms of USD with eight decimals, that means that one ETH equals USD equals 123-456-7832 1.5 decimal us dollars, which sounds accurate. So the solution to your problem is make sure you're on the correct blockchain, not local post.
01:01:53.874 - 01:02:19.546, Speaker C: Rather, rather you should be on Sepolia. Okay, hope that answers the first question. Okay, cool. Next one. My tokens don't show for metamask, although I can see the balance of a contract. Okay, cool. So this is more of a technical one.
01:02:19.546 - 01:02:54.974, Speaker C: So it's a good one because it can be displayed on the screen. So my tokens don't show metamask, although I can see balance in the contract. Oh, I will need to share my screen again. Well, I shouldn't just close the share screen, but yeah, okay, whatever. So that means that triple check the address. So that means that first be on a correct blockchain again. So make sure that you're on correct testnet.
01:02:54.974 - 01:03:35.962, Speaker C: That's really important because, because let's do another thing. So, because every smart contract is determined by three things, and those are address, those are Abi, and those are chain id. Chain id means this is the id of a chain. You are. So for ethereum mainet, that's one. For ethereum sepholia, that's 111511. For wordly, that's five.
01:03:35.962 - 01:04:23.198, Speaker C: For Coravin, that's 42, etcetera. So that means that if you provide the address of your token but the chain id is different, it will go to that blockchain. So for example, you provided the token address of your token on Sepolia, but you're on Ethereum mainnet. Well, it will search for Ethereum mainnet for that address, and if it's not a token, it will just not show it. So always be sure that you collect network import tokens, paste the token address, pays the token address, and the rest should wait for a couple of seconds. The rest should be populated automatically because metamask is smart enough to figure it out if your token is irresistible and the token to populate the details. If you can do that.
01:04:23.198 - 01:04:59.964, Speaker C: But you can still. Option number two is to go to Sepulia, Etherscan or any other blockchain explorer and then search for your token address. Can I find any token here? Let's do this one. And then here you should be able to see the source code of it and details and holders are there. You're cool. Because as I said, wallets are just a nice Uis wrappers on top of the blockchain state. You can still validate that all this stuff are present on blockchain.
01:04:59.964 - 01:05:31.160, Speaker C: This kind of is like the beauty of the system itself. So, yeah, just triple check all the details and you should be fine. Okay, question number three. Okay, cool. Okay, this is gonna be a short one. So question number three, actually not. Two is how can I got an internship? Easy, just apply for it, go to chainlink careers apply and we'll see.
01:05:31.160 - 01:06:16.134, Speaker C: The rest of the process should be pretty self explanatory. And good luck. Let's see, question number four. I would like to know, how will you verify the authenticity of a contract tokens that we sent to you? Let's see if I understood this question correctly. So, yeah, so as I said, any smart contract is determined by these three parameters. So, address, Abi and chain id. ABI stands for application binary interface.
01:06:16.134 - 01:06:43.938, Speaker C: And application binary interface means, do you know what? Oh, you cannot answer. Never mind. So I'm going to compile this, my dummy contract, and this is the AbI. But can I see it from here? Let's see. Oh no. Oh, compilation details. It's a huge button over here.
01:06:43.938 - 01:07:05.350, Speaker C: So ABI stands for application binary interface. Here it is. It consists, it's a JSON. It's a JSOn that looks actually like this. Let's do something. Abi json. Okay, so this is the ABI.
01:07:05.350 - 01:07:50.504, Speaker C: It has all the methods, events, public variables, and all that stuff that smart contract consist of. And here we can see that we only have, this is the contract function which returns un 256. It's a view function and it's a function. So that's how smart contract. That's why we had a problem last with the first question. Because even though the address is a contract, if it hasn't implemented the exact function you're calling, it will still revert. So with ERC 20 tokens, there is actually something called ArC 20 interface.
01:07:50.504 - 01:08:31.216, Speaker C: If you go to eap 20, this is the token standard. And here we have the interface that all the ERC 20 tokens must implement. This is going to be much readable. Oh no, let's do like this. GitHub open Zeppelin contracts, contracts, interface. No, that's gonna just token ERC 20 interface. Here it is.
01:08:31.216 - 01:09:01.221, Speaker C: So this is the interface. So that means that if a smart contract implement every single method from this interface, it's considered an ERC 20 token. If not, it's not. It's simple as that. So if you have a transfer function which does something, and it's an interface. So if you compile it. So that means that all of these functions will be present in the contracts.
01:09:01.221 - 01:10:00.592, Speaker C: Abi here, transfer from balance of approval, blah blah. That means that if you now want to interact with your contract, zero, x, whatever address, and do transfer from, well, this should either succeed, this should either revert, or this should silently succeed. So because of that, I need to check for success, require success. And this is how I can handle not, not like this, like handling arbitrary IRC tiny tokens is extremely tricky. And I'm thinking of actually writing a blog post about it. Is going to be a huge one. But anyways, this is how you can kind of know that this address is actually an ERC 20 token you're interacting with and not some other contract.
01:10:00.592 - 01:10:48.150, Speaker C: How can you be sure that this address actually is your token or came from myself or from Sol or whatever? Well, there is no native cryptographic way in solidity to check that. Maybe if I send you this address, we, I don't know, signal and cryptographically sign the message, you can, and you can like verify it that it was me. You can kinda, you can kinda verify that it came from myself, but it's dominant of theory. Cool. A lot of questions. Okay, cool. Okay, a lot of questions.
01:10:48.150 - 01:11:24.008, Speaker C: I need to speed myself up. Okay, I have a problem understanding interface. Okay, this is kind of a nice one because it's perfectly applied to what I was talking about. I have a problem really understanding interfaces and how they work because they have no function logic done. Suddenly when the function is called, it returns a value, yet it had no logic. Okay, cool. So this is not really a blockchain or solution, it's actually interfaces are a common thing in computer science and they're like here for decades.
01:11:24.008 - 01:12:27.584, Speaker C: So short answer is just remember what you studied at university about interfaces. Long answer is, I'm going to answer now. So interface, let's see the example of it. Interface in many languages is just a set of function signatures or of methods that are not implemented. That means, so we have this interface year c 20. As I said, that means that if my smart contract implements every single one of these functions, plus it can implement some more. That means that my token is ERC 20 compatible and I can call it like this, with this function, whatever address I pass here, it will not revert if at least on a call, if that address has implemented this function selector and you have two usages of interfaces.
01:12:27.584 - 01:13:18.796, Speaker C: So for example, if you, if you now go to see uniswap, for example, let's google for uniswap. Okay, cool. V two core, let's do this one. So you can see also that it has a couple of interfaces, for example for factory whatever. So these are all the functions that needs to be implemented by the factory. That means that here you have a syntax where your smart contract inherits that interface, and if you try to compile it, and if you haven't implement all of these methods, it will not compile. So that's another feature of interfaces, let's say.
01:13:18.796 - 01:14:03.634, Speaker C: So a lot of people don't like this, but you can still use it like this. But interface basically means that you can now with like this syntax, for example, you can now integrate thousands of tokens instead of one single smart contract, because otherwise you will need to import the exact one, which is not ideal. I hope that kind of answers your questions. But a question, as I said, as I said, it's been in computer science for a while. Next question. On my remix, I don't have the dropdown to register that SL from clicking on create new files. So I couldn't do anything from day two of the session.
01:14:03.634 - 01:14:39.090, Speaker C: Day two, what's date? Day two. Okay, let's see, day two, register. Okay, this one. Okay, cool. So that means that you will need to compile this smart contract in order to have it from the dropdown. So if I do register sol and if I have it here, so I need to compile it. So you can compile it using here go to solidity compiler, click the compile register and check for green check marks.
01:14:39.090 - 01:15:50.798, Speaker C: You can also compile it by command s or control s on Windows if you like. And can you compile it like this? Probably not, but yeah, those are like the three main methods. And once you have it compiled, then it will appear here. So you must compile a smart contract before it appears here. Okay, let's go to the next one. My question is on the contract on the day two, so that's register again, why the code you copied, that has the information, that is the codes written somewhere was brought into the solidity from where? Okay, because I can see we aren't the one that created it and where was it coming from? And is it written with the program language? How does one know how to write a program like that? Okay, I'll try to copy this question here and try to read it once again. So on the day two, so there will be register smart contract here.
01:15:50.798 - 01:16:35.992, Speaker C: So you copy that has the information. Okay, I think I know the answer. So if someone can drop their register sol address from day two, I can follow up but basically if you have. So it's really the matter of what I was talking again about. Where is that token shop? So each smart contract has address, AbI and chain id. That means that when I compile register, I have its ABI compilation details. Abi, okay, get info.
01:16:35.992 - 01:17:18.520, Speaker C: I have the API of this smart contract, right? And this smart contract. And that means that if I have the API and I'm on a right blockchain on Sepolia fork, I can paste the address of any other register, implementation, any other address. And as long as the ABI is exactly the same, by just pasting the address here and looking at the address, I can now interact with your contract from my own environment. So if someone can just paste me the address, I'll show you that in action. But I think that was the question. Okay, here it is. Thiago has it.
01:17:18.520 - 01:17:33.422, Speaker C: So let's see if I can copy it. I can't. No, this Uis. Okay, cool, thanks. I can copy it. Cool, cool, cool. So let's try it.
01:17:33.422 - 01:17:55.208, Speaker C: That means that, so the Avi, exactly the same if this was on Sepolia, we're going to try on Sepolia. That means that if this address has this implementation on Sepolia, I should be able to load it. And here it is. And I should be able to call the Getinfo function. And here it is. Akos was here. So this is not my smart contract.
01:17:55.208 - 01:18:23.356, Speaker C: I'm just interacting with exactly the same smart contract on other address, using again the call opcode under the hood. Cool. Next question. Which wallet should I use to receive certificates? You can use metamask. That's fine. How can I get the foundry version of all this? Excellent question. So that'll be even easier to answer.
01:18:23.356 - 01:19:21.346, Speaker C: So to get a foundry version of all of this, so you will just, now I need to, now I need to share some, some other screen. Stop sharing. There'll be another window, right, okay, cool. You should be able to see my terminal. So we can create, make directory, foundry repo example something and CD into foundry repo example something. And we can see it's an empty, empty folder. So what you can do is you can do forge init, no commit, and it will create a new foundry repo.
01:19:21.346 - 01:20:17.666, Speaker C: So if I do now I have the whole foundry, new foundry project, and if I go to CD source, I should be able, I should be able to see a counterpart contract. So you can just do, you can just now, because you have a solid version of all these contracts, you can do touch register SL, which will create a new register file, which will be empty, and then you can just copy the content from here, for example. Here it is. Save it, save it. Yes. And hopefully if I do forge build, this should work. I just need to be in a root.
01:20:17.666 - 01:20:55.654, Speaker C: So forge build. It's compiling, compiling, compiling, and compilation successful. So now you can also write some tests, et cetera, et cetera. So yeah, hope this answer your questions. Question, what is foundry? Yeah, foundry is a smart contract development framework, so you can. So remix is actually really great for beginners and for stuff that you want to do quick and dirty for some quick checks. It's extremely powerful, especially because of the main and fork features.
01:20:55.654 - 01:21:46.202, Speaker C: But if you want to go to production, you'll either gonna use Harhat or foundry or ape works, which is a third more popular. There's also, there's also truffle and debt tools, which are deprecated, and brownie, which is also deprecated. So the difference between them Hardhat, you write smart contracts in solidity and you write tests and scripts in JavaScript or typescript with either ethers or Vim. In foundry, you write contracts in solidity and you write tests and scripts and everything in solidity. So it's another framework. So if you want to, if you want to learn more about it, let's share my screen again. Then what you need to do is to Google for Foundry book.
01:21:46.202 - 01:22:23.674, Speaker C: This is the official documentation. And then here you can install it first, and then you can just create new project like I did forge in it. And also if you go to our GitHub, go to for example, CCIP starter kit foundry. We have a bunch of starter kits in foundry and Harkit as well. So you can just git clone this repo and stop start building, etcetera. So, yeah, that's, that what, that's what foundry is. Okay, next question.
01:22:23.674 - 01:22:40.494, Speaker C: Okay, cool. I haven't studied coding, and I hope I can keep up with the blog magic hackathon. Continue learning. I'm having fun making smart contracts. Okay, cool, thank you. Teachers are fine. Great, cool.
01:22:40.494 - 01:23:33.494, Speaker C: How exactly CCP work differently to bridges between blockchains? Okay, let's see if I understood this question correctly. You're welcome. Kyo J r ey, if I pronounce that correctly. So how exactly CCP work differently than bridges? I think the question is, the most important difference is that CCIP is decentralized while the majority of bridges are still centralized. That's the short answer. The long answer is if I go down here, oh, actually, let's do something like this. So Andre Gitbook.
01:23:33.494 - 01:24:17.906, Speaker C: Let's just go like this. So interoperability means that you cannot natively exchange data and tokens between different blockchains because there is no native way to communicate between themselves, especially if they're not JSON RPC API compatible. So whenever someone says EVM compatible, that really means, that really means JSON RPC API compatible. Don't get trick on that. Okay, cool. So traditional bridges are problem because here's your. Holy Patrick.
01:24:17.906 - 01:25:02.584, Speaker C: Because it works that you're gonna give your tokens on one side to some centralized entity, to some dude, as Patrick likes to say. And you're kind of hoping that that dude will mint you the exact amount of tokens on the other side. And surprise, surprise, with enough money, they're just gonna go away. I mean, there was like major hacks with bridges, unfortunately, in past. So the solution to this is chaining CCIP because is there another image? Because it's completely decentralized solution. So there is no central entities. There are actually just a lot of smart contracts and three off chain dons.
01:25:02.584 - 01:25:25.654, Speaker C: And that's pretty much it. So there is no dude to take your money out. Here it is. So you can see it's a completely decentralized architecture. There are a bunch of security features regarding token pools, etcetera. So, yeah, I hope that answers your question. Let's go to the next one.
01:25:25.654 - 01:25:45.774, Speaker C: Having folks assign homework before the live session can make the session less disorientating. Cool, noted. I'll deal. I'll pass the message to Saul. Okay, cool. Now I need help from you guys. If someone can help.
01:25:45.774 - 01:26:20.474, Speaker C: Sorry, I got lost in session number four. If it could mention about the address of what and from where to get it from, it will help for beginners like me. So if someone can paste these addresses in a chat or just provide a link to the path riseup.net, I think for that lesson number four, session number four, whatever. That'll be highly appreciated because I wasn't part of any session so far. So, you know, just grab those addresses and this should help. Thank you for being good colleagues.
01:26:20.474 - 01:26:36.314, Speaker C: Oh, here is the address. Perfect. Perfect. Okay, I have it. Let's find it now. Okay, cool. Let's put it here.
01:26:36.314 - 01:27:01.450, Speaker C: Let's now open this. So all the recordings are here. YouTube slides. Okay, these are all you guys. A lot of you. Here it is. So I guess you're looking for us.
01:27:01.450 - 01:27:22.584, Speaker C: DC on avalanche. This is the address here. And then this is the faucet. And then just follow the steps afterwards. Should be some other address. Yeah, here are all of them. So link address and router address will be needed as well and then just grab the details from it.
01:27:22.584 - 01:27:44.904, Speaker C: This, you don't care about this. These are just people confirming they finished with the exercise successfully. Cool. Let's now go with another question. I don't know how we're dealing standing with time. I can speed myself up if there are more interesting questions in the chat. Okay, cool.
01:27:44.904 - 01:28:14.680, Speaker C: So the question is, hi. Remix and metamask are not playing well together for me, which is a big blocker for completing the bootcamp tasks. Switching from Raymix VM, concluding to injected providers either does nothing or takes a very long time. Count box stays blank even once it sticks or on jack the provider in remix and my metamask is on the Avalanche Fuji network. The deploy button remains disabled. Okay, cool. So another remix issue.
01:28:14.680 - 01:28:49.300, Speaker C: So when working with remix, make sure you have a stable Internet connection. Make sure you are using, I'm using chrome, but you can also switch to different browser like Mozilla or brave. Remix will not work well in Safari because Safari, there is no metamask extension for Safari. Make sure that you always compile your smart contract so you can see it here. And when switching this. Yeah, just make sure you're in different browser. Try to clear cache, opening data mode, track Internet connection.
01:28:49.300 - 01:29:14.104, Speaker C: So that should solve the issues you're having. Oh my God. Hi. I follow day four, hands on tasks, I deploy the contract. Did the approved process send token where I needed to? I call allowance, okay. I call bounce off, all looks good. But then when I try to transfer you, I get guest estimation fail, blah blah blah.
01:29:14.104 - 01:29:49.564, Speaker C: Okay, that should be the CCP example. So let's go to the CCP example. Uh, short answer is just follow all the steps from the path, from the rise up from basically step by step. I think what the issue can be, but let's see, chainable. Here it is. Okay, Ccip p should be something with USDC, right? So that can be this one, right? Yeah, this looks accurate. So let's see.
01:29:49.564 - 01:30:11.486, Speaker C: Function you're calling was transfer USDC to sepolia. Okay, this one. So transfer USDC to sepolia. So this one. Okay, cool. So you approved it. So check because the feed token is address link token.
01:30:11.486 - 01:30:43.464, Speaker C: Check whether you have enough balance of link in your smart contract. If you don't send some amount of link to your smart contract, send more because it can revert because of this. It can revert because of this. But this should not revert if you have. If this. This will only revert if CCIP fee is greater than the balance of this contract possess of link, but it will also revert because of that here. So technically this should never revert.
01:30:43.464 - 01:31:19.144, Speaker C: Then when it comes to USDC tokens bounce off. This should not be probably your issue because approval was successful, but also can revert because of this. This should never revert because we have checked before and this can revert if you don't have this can revert. Actually this will not revert as well because you've reverted before, but technically because of the lack of the fees. Let's see what we have here. Do we have any transfer from. Yeah, this one can revert if you haven't approved it, but you, you have.
01:31:19.144 - 01:32:06.004, Speaker C: So that, but that's also for the others that have the issue. So try go to true steps from the rise up once again and also try sending more links to this smart contract to the smart contract right away. Straight to a smart contract. So you can execute the logic on the other side or if that's not that forcibly, sign the transaction and then you will have the error on the etherscan and then you can also debug it using tenderly, for example. I can help with that if needed. Okay, cool. Next question.
01:32:06.004 - 01:32:31.476, Speaker C: I'm encountering the error whenever attempting to execute a transaction transfer USDC to sepolia. So the same thing. Oh, it's not the same thing. This is an actual question. Excellent question. So I'm gonna go here, let's see. I'm gonna just display this one, but you can see the whole thing.
01:32:31.476 - 01:32:59.776, Speaker C: So I'm countering an error whenever attempting to execute a transaction. Blah blah. Below is the error message. So the transaction is likely to fail or if you want to proceed. Now we have the error, so invalid opcode. Mcopy the evm version by selected environment might not be compatible with the compiler evm version. So this error message actually tells you everything.
01:32:59.776 - 01:33:46.584, Speaker C: But I'm going to explain why that happened. So let's say Dankun upgrade, ethereum foundation block. Let's see if I can find that. Yeah, here it is. So there was a recent upgrade to Ethereum sepolia testnet and Ethereum mainet called Dankun and a lot of stuff happened. But your error is related to this mcopy opcode. So EAP 5656 that means that a new opcode M copy was added to Ethereum sepolia now because we are dealing with crush chain stuff.
01:33:46.584 - 01:34:25.290, Speaker C: Okay. Having a new opcode means that, let's see, do you know what opcodes are first? So whenever you compile, compile something. The bytecode will be generated and it's a large hex number. Hex value, but essentially it's, it's a collection of instructions. So this zero six, if you go to EDM codes, means push one, I think. Let's see. Yeah, push one.
01:34:25.290 - 01:35:16.934, Speaker C: So 60 is a push one opcode. So that means that we have, ah, that means that we have zero 680, which, which means push 180. Then there is this thing which says push 140. Then what is 52? 52 is m store. Cool. Then 52 says m store offset n value. So we have, we have two different things here going on.
01:35:16.934 - 01:36:12.170, Speaker C: So two inputs actually. Yeah. So that means, okay, now this is whatever can be, you know, m store something. See? So basically compiler will translate your solidity smart code to a bytecode, which is the language that EVM can understand. It's not human readable. Now if you, so now going back to the issue with McOpy, we can see that this dam kun upgrade has happened recently. So if I go to remix and I can see here that there are multiple environments.
01:36:12.170 - 01:37:39.334, Speaker C: So remix VM, Cancun, Shanghai, Par, London, Berlin, all of these cities are actually names for EVM versions. That means that if I go to compile here and I use the default one, well that means that it will use the default compiler version, the default EVM version, when compiling with this. With this. Okay, I need, so the solution to your problem, to not confuse you, is to set EVM version manually to, for example Paris, which is the merge. Why? Because Ethereum sepolia has mcOpy push zero present in Cancun, but avalanche, Fuji which you used, polygon, Mumbai, all the other testnets do not have mcopy push zero, etcetera. That means that if you try to trigger an opcode that is not implemented on a blockchain, the transaction will revert. So the solution is.
01:37:39.334 - 01:39:04.734, Speaker C: So by selecting the EVM version. EVM version, you are telling the compiler which version to use with predefined set of opcodes because blockchain clients must implement all of these opcodes in order to, for this to work. So if I go to, I don't know, let's go to rust vm and let's see where they are. Oh no, this is documentation. Let's see where, where all the upcodes. What's this? Something different copy. Oh no, let's do push zero.
01:39:04.734 - 01:39:26.926, Speaker C: Here it is. So stack. Okay, cool. And here we have, so for each of these opcodes you have the implementation. So push dup, d, swap. These are all opcodes implemented. So that means that if your blockchain client does not support an opcode, it will revert.
01:39:26.926 - 01:40:07.914, Speaker C: So that means that the contract working on sepolia may not work on avalanche Fuji in this particular example. And there is also a nice stack overflow question. I'm going to just share it with you. So here I answered that one, but it doesn't matter. So here you can see how I just did it in remix, but here you can also see how you can do it in native source, in Harkit, in foundry, how you can adjust evm versions if you want to do that. So I'm going to paste this in a chat if you want to, if you want to have it bookmarked or something. Okay, cool.
01:40:07.914 - 01:40:29.562, Speaker C: Next question. Hi, I have a question. At the start of the bootcamp, lesson number four, there was a section where we had to approve USDC. Let's say I want to transfer another token. Do we always have to approve the token? I want to transfer Uccip. Why is this approval needed? Care to explain a little bit more? Thanks. I'm going to explain it a little bit more.
01:40:29.562 - 01:41:05.356, Speaker C: Depends on the time. That's okay, this is an excellent question. Doesn't actually need to have to do anything with the CCP itself. It's actually the, it, it's actually the ERC 20 thing. Okay, cool. Where is ERC 29 token standard? Oh, I have it here. Okay, cool.
01:41:05.356 - 01:41:24.984, Speaker C: We can just go back a bit. Talking about interfaces here. We talked about. Okay, cool. This, the implementation office opens up on some condition university 20. Okay, cool. So this is the mapping of balances.
01:41:24.984 - 01:42:19.830, Speaker C: Mapping is essentially hash table, kind of like hash table or dictionary in c sharp if you're familiar with that. So it's like a dedicated data structure which you have like a key and some value key must be unique, otherwise you can overwrite some entry addresses are a good example of keys because they're unique. So this mapping tells to me this address possess this amount of this token all the time. Balances and let's search for balances. So if I want to get, okay, what's the balance of this token? I'm going to just query this mapping and return the entry for this account. And yeah, this is what that looks for. Now let's do a transfer or transfer from.
01:42:19.830 - 01:43:14.374, Speaker C: So if I do transfer, that means that, so under the hood, this underscore transfer function will be called. So you can see transfer, transfrom, etcetera. So this is the implementation of a transfer from which says, okay, sender and receiver must not be address zeros. Otherwise call this update function under the hood. So with transfer we can see that where is it? Yeah, with transfer we can see that the message sender aka if you call the this function, your address is message sender is the owner and we just care about receiver and the value. So here again we are gonna, we're gonna deal with the balances. So update says okay, read me the balance of from or your address.
01:43:14.374 - 01:43:54.524, Speaker C: Okay, cool. If you don't have enough revert otherwise, okay, now update this balances mapping to have this amount minus the amount I'm selling. Cool. Let's now go to the other side. Now update the balances of the receiver plus equal to to increase to increment their mapping entry by this value. And yeah, that's pretty much it. So that means that I can transfer my tokens and you're going to receive it, et cetera.
01:43:54.524 - 01:44:44.302, Speaker C: We can see here that in both transfer and transfer form function there is no mechanism for any owner or any Vitalik or any admin, super admin admin to transfer your tokens without your explicit permission. So only you can transfer your tokens. However, with approval functionality. And this is another mapping called allows allowances. You can say something like this, my account I approved this spender to spend this amount of my tokens because if you want to now do transfer from. So transfer from is what we use in smart contracts. So this is the mechanism for smart contract to take your tokens.
01:44:44.302 - 01:45:17.414, Speaker C: With transfer from we again have transfer but there is also spend allowance. Step in the middle and spend allowance is here. So it will go to the mapping and check for the current allowance. If there is not enough value, it will revert. Otherwise it will call the approve functionality hood. And approval is just updating the allowance once again. So that means that let's simplify this.
01:45:17.414 - 01:45:41.074, Speaker C: What I did, uh, right, I did something. I don't know what let's do once again. So ERC 20, I repeated it. Oh, that's because of that. Okay cool. Okay cool. Sorry about that.
01:45:41.074 - 01:46:34.954, Speaker C: Yeah, here it is. Let's do this once again. Curious. So we're c 20 transfer only you can transfer your tokens. If you want to do transfer from. Well, first you need to call the approve function on the ERC 20 token contract itself and then spender can call transfer. I hope this answer your question.
01:46:34.954 - 01:46:53.084, Speaker C: Okay, cool. We have five minutes left. Okay, that's not ideal. A lot of questions in a chat. Let's see. Okay, cool. That was the actual last english question.
01:46:53.084 - 01:47:07.744, Speaker C: That was cool. The rest of Spanish. Cool. Last five minutes. I'm gonna go through questions in the chat and from the beginning. Okay, cool. Okay cool.
01:47:07.744 - 01:47:37.498, Speaker C: Here it is. How do you reload interact with the deploy contract from different browser computer? I already answered that. So it's just a matter of Abi address and the blockchain you are on is the bytecode like assembly language? No, bytecode is a giant hex number. It's a product of compiler. There is also assembly language. There's actually assembly. So in c, what assembly is.
01:47:37.498 - 01:48:25.422, Speaker C: That's Yule in solidity. Although solidity has like the assembly keyword, but that's technical name is Yule. So Yule not equal to bytecode. By the way, Andre, after this bodkin, what are your recommendations for beginners to continue learning about solidity and blockchain development in general? Any specific curses or relevant resources? Yes, so you can, you can do something like this. So you can still read mastering ethereum for free. There is on GitHub, although it's now slightly. I don't say slightly, it's a lot of outdated, but still is a really good learning resource.
01:48:25.422 - 01:49:05.104, Speaker C: Then you should master the solidity syntax. So Solidity handbook is a good one. Solidity handbook from free code campus. I took a slight part of writing it, so it's like, yeah, but it's a really good thing for all the things related to solidity syntax. Also a good thing for solidity syntax is solidity by example. So this website, you have a bunch of tiny code snippets and examples, which is really good. Then you should really master how EVM works under the hood.
01:49:05.104 - 01:49:38.194, Speaker C: So something, something like that. Then for advanced stuff you need to know foundry at least, and hardhead. But foundry is a must. And then you have, then you have like advanced boot camps, like for example, cyphering updraft. Patrick on this is a really good instructor, so some of that should, should be enough for you to get started. Where can we follow you and keep up with your content? Great question. Thank you.
01:49:38.194 - 01:49:59.090, Speaker C: Okay. To follow me, I am Andre Dev on Twitter. So this is my profile. So Andre Dev, you can follow me here. And when it comes to my content, I put everything here. Also you can. If you go to this URL, to this tweet, you can subscribe to my newsletter.
01:49:59.090 - 01:50:41.874, Speaker C: I'm planning on writing about smart contract design pattern. It's going to be extremely advanced solidity, but if you're into that, you can put your email address here. And once I publish the first one, I don't know when that's going to be, because it really depends on time you're going to receive the notification, the email in your inbox, but also, I'm going to post about that on Twitter. So, yeah, I'm extremely active on Twitter. Andre, underscore dev should work. Okay, next question. Do we have more questions from comment section? No.
01:50:41.874 - 01:51:02.514, Speaker C: Okay. Couple of ones, but I think we're out of time. So what we can do is if you can just ask that on my twitter and tweet my name, tag me, I'll answer directly on Twitter. Thank you, guys. There was a lot of questions that we run out of time.
01:51:04.334 - 01:51:10.822, Speaker D: Great, Andre, I think that's very intensive Q and A, for sure. I think a lot of people learned really good stuff.
01:51:10.958 - 01:51:11.262, Speaker C: I know.
01:51:11.278 - 01:51:25.294, Speaker D: There are a lot of good questions, too. I know. I think a lot of people were waiting for their questions to be answered. I think most of the questions were covered, I think thanks to you for, like, spending a lot of time on that. Like, explaining it in very detail, I think.
01:51:25.674 - 01:51:26.138, Speaker C: Yeah.
01:51:26.186 - 01:52:03.984, Speaker D: Like I said, if you have more questions, feel free to tag Andre on Twitter. Or, like, no, share it on Discord. Or you can also post it on stack overflow and tag chain link so that our team can check and reply back that way. Like, other people can also look into that questions when they even search on Google search. So these are some of the things that you should definitely keep in mind. And I think we are almost on time, but there's something important that we should definitely talk about that is, yeah, congratulations, because this is the first week of bootcamp that you all did. Congratulations to all of you.
01:52:03.984 - 01:52:33.466, Speaker D: I think you guys are really fantastic. Helping each other out in the chat, like, following the instructions really well. Amazing folks we have Andre, like, I think last four days, I think is really fantastic. Solange, Rdev, exper, and you, I think, really did great work. And there are three things that I really wanted to touch upon for all the attendees for the bootcamp. So during the weekend, the three important things, one, do rest a lot and recharge yourself. Go touch grass.
01:52:33.466 - 01:53:09.634, Speaker D: So these are the two, three important things that you should definitely do on the bootcamp because you should be like, you know, feeling really proud about your accomplishments. Come back again on Monday. We have a lot of things to cover as well. On Monday. We have nfts and automation later that we have sessions on VRF and functions. So we wanted to see you guys, like, you know, with renewed energy and enthusiasm. So I really looking forward to the Monday, but make sure, like, you take a good rest and you can also share all your experience about the Chainlink bootcamp using the hashtag Twitter and LinkedIn.
01:53:09.634 - 01:53:27.374, Speaker D: And I think these are some of the things that I really want to talk. And I think we are almost on time. Let's see you again on Monday, same time always. So we are looking forward to, you know, have you guys soon. So with that, I think we can wind up today and have a great weekend, guys.
01:53:29.474 - 01:53:29.954, Speaker C: See you guys.
