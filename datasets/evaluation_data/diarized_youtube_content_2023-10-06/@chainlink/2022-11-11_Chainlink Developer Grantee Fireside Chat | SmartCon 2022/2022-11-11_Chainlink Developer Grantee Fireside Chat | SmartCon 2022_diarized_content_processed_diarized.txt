00:00:10.250 - 00:00:43.802, Speaker A: Hi everyone. Thank you. So my name is Daniel Druso. I'm a product manager at Chainlink Labs, and I focus my time on developer tooling, developer experience, developer support. And so a lot of the things that we do are bridge, bridge gaps in developer tooling. We realize in web3, we are not as sophisticated as the tooling that we have in web two, there's a lot of experiences that have a lot of opportunity, so we focus on bridging those gaps for any tooling. So we work a lot with open source maintainers of projects of the tools that you use.
00:00:43.802 - 00:01:10.580, Speaker A: That's number one. And number two, a lot of the things that we focus on as well is developer education and support. So if you are new to web3, you may want to see how can I get started connecting my contracts from the back end to a dap on a front end. So that's a lot of our focus too, and that's what we're going to be talking about today. So I'll pass it to Evelyn from hack BG to talk about one of those projects that we worked on.
00:01:11.510 - 00:02:42.320, Speaker B: Hey, so one of the projects we worked on is Chainlink automation template, and the goal of this project is to collect specific use cases for smart contract automation and build generalized and easy to reuse and configure solutions which are also well documented, fully tested and ready to deploy. So far we've built two templates in the spaces of DeFi and NFT. So the first template that we've built is about automating yield harvesting for vaults in Defi protocols. So chainlink automation enables that by calling the harvest function on demand, and it additionally minimizes the trust in that process by relying on the decentralized network of node which is imperative for a decentralized protocol. So the template itself just implements and abstracts away all the automation details so you can focus on the important stuff like when to harvest with the helper functions of calculating profit and all the costs for running the upkeep. It also helps you efficiently iterate over all the vaults that you have provided by fitting them in the upkeep gas limit. So you don't need to worry about all.
00:02:42.320 - 00:03:49.986, Speaker B: So it essentially helps you to automate and decentralize a critical part in defi yield farm protocols. So it's super easy to use. You just need to create your contract and inherit from a base contract and override a few things to provide and basically adapt to your protocol. So the other template that we built is about saving cost in NFT collections which are using VRF for randomness and it can save cost up to 100 x depending on the configuration. So chainlink automation solves that by batching the revealed transactions when certain criteria is met. So in this template there are two criteria. One is the queue size, so depending on how many new nfts are minted and need to be revealed.
00:03:49.986 - 00:05:03.882, Speaker B: And the other criteria is time that has elapsed. And yeah, you can easily configure all that. So the template is basically a full collection. So it provides unique randomness for each token and it shows how to use it to generate on chain graphics with examples how to do that. And if you want to use it, you need to basically define all the parameters for the collection and for the sale. And then you need to basically decide what the metadata will be, either on chain generated SVG or it could point to a decentralized file storage or to a metadata service to generate off chain graphics or you know, something hybrid. So there are two options to deploy these NFT collections.
00:05:03.882 - 00:05:57.674, Speaker B: One is through the hard hat project and you just need to define all the parameters for the collection. And the other option is user interface. So there is an front end app included in this template which is a wizard and it guides you through the configuring and setting up VRF and keepers. So yeah, it's super easy to do it via the app. So then you get a mint page which can be used for testing, debugging and playing with your collection. You can even share it or use it as a foundation for your NFT app. So it's built with a boilerplate which is very easy to reuse.
00:05:57.674 - 00:06:40.038, Speaker B: It's another project that we've built for. Yeah, the app is also available without installation. So you can deploy a demo collection at Keepers Chainlink demo app and all the templates are available on GitHub. You can look for Chainlink keepers template or at the Chainlink official docs under automation contracts example and yeah, that's it. If you have any questions or ideas or feedback, you can write on Chainlink's official discord or directly at GitHub.
00:06:40.214 - 00:07:12.294, Speaker A: Yeah, so these two templates are really great yield harvesting. You can basically get started saving a lot of time not having to write a lot of the stuff that you would do. And then for the second one it uses not only keepers automation, it also uses VRF and you can save cost about 100 x let's say with a single VRF call. With this template you can then have randomness for all of your NFT collection. And that is really useful. Not only for cost, but also to get started. It's going to save you a lot of time.
00:07:12.294 - 00:07:30.406, Speaker A: So yeah, you can find both of those at Keepers Chainlink demo app and also on GitHub at Bg. Thanks, Evelyn. And now we'll give it away to Omer from Chaos Labs.
00:07:30.518 - 00:08:05.846, Speaker C: Hi everyone, I'm Omer from Chaos Labs. Chaos Labs is a cloud platform that allows protocols to run simulations at scale. It's mostly agent based simulations and scenario based simulations. Agents means that you can quickly bootstrap wallets with specific types of behavior. So it could be wallet balances, whitelists, risk appetite, really, whatever you need. Where the focus here is Defi scenarios is a suite of tools to manipulate and orchestrate the state of the blockchain. So it could be on chain conditions like Black Thursday, it could be cascading prices of assets, which is what we're doing with Chainlink, which I'll elaborate in just a second.
00:08:05.846 - 00:08:45.486, Speaker C: Network congestion, gas prices, latency on transaction pickup. With this, together with the composition of these tools, you can understand how your protocol is going to perform under the most intense conditions. And you can also run simulations at scale to do optimization of parameters. So that's the gist of chaos. Since launching, we've worked with protocols like Maker, Chainlink, Benkey, Uniswap, Dydx Ave and more. Now, the real kind of base assumption and belief of chaos labs is that a good simulation environment is as close to production as possible. So we don't want to reconstruct these simulations in MaTlab or pythonic environments.
00:08:45.486 - 00:09:26.186, Speaker C: We want to run them on chain. So every single simulation is deployed to a private fork of the blockchain. Now, when you're working on a private fork, you're no longer getting the price updates that you would normally get if you were looking at a Chainlink oracle on Mainnet or a public test network. So how do you start testing things like underwater collateral, bad positions, high market volatility? Well, we really couldn't, which was the issue. So we were actually really early on reaching out to the Chainlink team, discussing this problem for them. Chainlink infrastructure is such a core piece of everybody's day to day development environment, but you need to be able to work with it flexibly. So what we created are a suite of tools to actually manipulate the return value of Chainlink oracles in production.
00:09:26.186 - 00:10:04.910, Speaker C: You can use it as a CLI tool, but you can also use it as a hard hat plugin, which is the easiest. So it's available on NPM. We'll say the link to it which I don't really remember towards the end of the conversation. But the way it goes is that you have an API to inject the prices that you want a Chainlink oracle to return in the context of a simulation. So you can have this based on block or different predicates that are checked before every return value. You don't need to deploy a new contract, you don't need to change the addresses of contract, you just query it regularly. And the idea is it's going to be not disruptive to your workflow, but you'll still be able to get the variability of the different return values.
00:10:04.910 - 00:10:41.370, Speaker C: Obviously, this isn't only limited to prices being returned for assets, it's any arbitrary data that you can control those values for. So this is super helpful for us when we run our simulations, something that we use every day and is utilized by our clients as well. In addition to the hard hat plugin, there's also a command line tool. So if you're using truffle or something that's not hard hat, you can use that as well. And we have a technical write up that explains it kind of really goes deep on the architecture of Chainlink and the approach that we're using to do this. So that's pretty much it. If you guys have questions on how to work with Chainlink oracles in development, feel free to grab me afterwards.
00:10:41.370 - 00:10:44.038, Speaker C: Recommend checking out the plugin.
00:10:44.214 - 00:11:27.126, Speaker A: Yeah, so if you're writing anything that's interacting with an oracle and you're writing tests for the responses of said oracle, you probably have only a minuscule set of the use cases that could happen in the real world. So using a tool like the one from Chaos Labs, the hard hat plugin will allow you to test a lot more closely to real world conditions. So for things that you haven't accounted for, that may happen. So it's really useful. And yeah, I think that you can check it out at chaos Labs. Right? So they will all be there. And I think that because you are all builders, you're in a very unique position to participate in the Chainlink developer grant program.
00:11:27.126 - 00:12:28.342, Speaker A: If you are writing like a DAP or you're writing contracts and you find yourself saying, hey, I wish that there was something to make x easier, or hey, I wish that we could do something else with this open source protocol, reach out, because in all likelihood, we are probably going to be interested in delving in more and saying, hey, this is a real problem. We'd love for you to build or bridge that gap. And we can, of course, pay you for your time, help you promote the solution and make it open source. So if you're interested, you can check out chain linkgrants and you'll have space there for the developer grant program. And we love to work with builders because you are in the day in and day out, and you know what parts are painful and what could be adjusted or fixed. So we love to hear from you and that's it. So thank you and I really appreciate your time.
00:12:28.342 - 00:12:31.120, Speaker A: Look forward to hearing from you. You.
