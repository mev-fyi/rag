00:00:11.050 - 00:00:22.958, Speaker A: Now, our contract is good as it is, it allows us to store a single favorite number. But what if we want to store a range of favorite numbers? Or maybe we want to store a whole bunch of different people who have different favorite numbers.
00:00:23.044 - 00:00:23.934, Speaker B: Well, how do we do that?
00:00:23.972 - 00:00:39.818, Speaker A: There are several different ways that we could approach this. One of the ways we could start approaching this is by creating what's called a struct of people. Or we could create a new type in our solidity. We can create a people object that holds both someone's name and their favorite number.
00:00:39.904 - 00:00:50.460, Speaker B: To do that, we say struct people Un 256 favorite number and string name.
00:00:51.070 - 00:01:06.194, Speaker A: Now we've created a new type called people, kind of like un two and Boolean or string. Now we have a people type that we can use. Now, similar to how we created a UN 256 public favorite number. We could do the exact same thing.
00:01:06.312 - 00:01:12.626, Speaker B: But with a people we could say people public. We can call this person and we.
00:01:12.648 - 00:01:16.406, Speaker A: Can create a new people and assign it to this variable person.
00:01:16.508 - 00:01:21.074, Speaker B: So we'll say equals people public person equals.
00:01:21.202 - 00:01:33.382, Speaker A: And we'll add parentheses here to signify we're creating a new person. And since we made this a struct, we add little curly brackets here to let solidity know that we're going to be grabbing from these struct variables.
00:01:33.526 - 00:01:43.850, Speaker B: We'll say favorite number is going to be two, and then name is going to be Patrick Semicolon.
00:01:43.930 - 00:01:48.634, Speaker A: And then we can hit Ctrl s, or we can go ahead and compile. Now if we go ahead and deploy.
00:01:48.682 - 00:01:49.280, Speaker B: This.
00:01:52.660 - 00:02:24.076, Speaker A: We now have a new person. Since this again is a public variable, it has a getter function called person. And if we click person, we see our new object, the favorite number is two, and then the name is Patrick. You see this zero and this one because these are showing the index of the different variables. For those of you new to computer science, typically in computer science lists start with the number zero. So at our zero width index we have a UN 256 called favorite number which is saved at two. And then at index one we have.
00:02:24.098 - 00:02:26.984, Speaker B: A string which stands for the name of Patrick.
00:02:27.032 - 00:02:37.616, Speaker A: Whenever you have a list of variables inside of an object in solidity, they get automatically indexed. So favorite number gets indexed to zero and name gets indexed to one.
00:02:37.718 - 00:02:40.016, Speaker B: Interestingly enough, if you have a whole.
00:02:40.038 - 00:03:24.544, Speaker A: Bunch of variables inside your contract, like we have public favorite number, this favorite number actually technically is getting indexed at the zero width storage slot. And if we were to make another one of these, maybe Un 256 public brother's favorite number, this would technically be indexed at the first slot. And then if we were to make one more, maybe sister's favorite number, this would be indexed at the second slot. So favorite number at zero, this at one and this at two. But we'll learn more about that much later in the course. Similarly, favorite number is indexed at zero, name is indexed at one. Now what we have is great, but if we want a whole lot of people, are we going to have to keep copy pasting and changing the people's name? Person two, their favorite number will be.
00:03:24.582 - 00:03:36.050, Speaker B: Three, we'll name them Allie. Person three, their favorite number will be seven. Their name will be chad or something.
00:03:36.420 - 00:04:07.292, Speaker A: This obviously isn't great way to create lists and large number of peoples because we have to statically keep typing them in. So a much better way to create a list, and let's actually just go ahead and delete Patrick too. A much better way to create a list is to use a data structure called an array. An array is a way to store a list or a sequence of objects. Creating an array works the exact same. We've seen to initialize other different types. Typically we do the type of the object, the visibility of the object, and then the variable name.
00:04:07.292 - 00:04:16.416, Speaker A: We do the exact same thing with arrays. We'll say we want a people array. These little brackets represent that. We want an array of people.
00:04:16.598 - 00:04:21.856, Speaker B: We'll give it a visibility of public and we'll call it people.
00:04:21.958 - 00:04:24.144, Speaker A: You could do the same thing with UN 256.
00:04:24.182 - 00:04:34.852, Speaker B: For example, you could say Un 256 public favorite numbers list and just add.
00:04:34.986 - 00:04:39.988, Speaker A: This little array key here. And now favorite numbers list is going to be an array or a list.
00:04:40.074 - 00:04:42.616, Speaker B: We're going to comment that out for now. Now, if I were to go ahead.
00:04:42.638 - 00:05:08.444, Speaker A: And deploy this contract, let's go ahead and delete the last one. Let's redeploy. We now have this blue people button here. Remember, since it's public and it's a variable, it automatically is given a view function. It's given one of these blue buttons. And instead of just having it be a single button where the value shows up, it's giving us a form to fill out. It wants to take a UN 256 as an input parameter.
00:05:08.444 - 00:05:12.592, Speaker A: So if I put zero, I get nothing back. If I put one, I get nothing back.
00:05:12.726 - 00:05:13.936, Speaker B: No matter what you put in this.
00:05:13.958 - 00:05:29.512, Speaker A: Box, right now, we're going to get nothing back. This is because our people array or our people list is currently empty and the value that it wants is going to be the index of the object that you want. So for example, if at index zero, I had Patrick. It would show Patrick for zero.
00:05:29.566 - 00:05:31.768, Speaker B: If at index one I had John.
00:05:31.854 - 00:05:34.520, Speaker A: Or actually better yet, two Patrick.
00:05:36.780 - 00:05:40.180, Speaker B: Seven John, et cetera.
00:05:40.340 - 00:05:52.748, Speaker A: This is what it would show. But since it's empty, it's going to show nothing. And let's go ahead and remove the public variable from favorite number so that we don't get the duplicate functions at the moment. We'll just get the retrieve function.
00:05:52.834 - 00:05:53.968, Speaker B: We'll show you how to add to.
00:05:53.974 - 00:06:35.304, Speaker A: This array in just a second. This type of array is what's known as a dynamic array because the size of the array isn't given at the array initialization. If we were to say a people array and add a three in these brackets here, that means that this list or this array of people could only be three people big. If we don't give it a size, it means it can be any size and the size of the array can grow and shrink as we add and subtract people. If I add three, it can only have a maximum of three in the array ever. We're going to work with a dynamic array because we're going to want to add an arbitrary number of people to this array. So let's go ahead and create a function that's going to add people to our people array.
00:06:35.352 - 00:06:37.852, Speaker B: So we're going to say function, add.
00:06:37.906 - 00:06:41.180, Speaker A: Person, and we're going to take string.
00:06:41.840 - 00:06:45.528, Speaker B: Memory name as input parameter, and I'll.
00:06:45.544 - 00:06:50.930, Speaker A: Explain that in a minute. And a UN 256 underscore favorite number.
00:06:51.940 - 00:06:58.736, Speaker B: We're going to make this a public function. What we're going to do is we're going to call a push function that's.
00:06:58.768 - 00:07:00.676, Speaker A: Available on our people object.
00:07:00.778 - 00:07:03.216, Speaker B: So we're going to say people push.
00:07:03.328 - 00:07:09.370, Speaker A: And we're going to create a new person, a new people object, which is going to take in the favorite number.
00:07:11.260 - 00:07:15.256, Speaker B: And the name. Now, this might be a little bit.
00:07:15.278 - 00:07:40.256, Speaker A: Tricky to you, so let's break this down. People here is capitalized. So we know that since it's capitalized, it's referring to this struct people and not our variable people. The lowercase people here is referring to this lowercase array. So we're saying our array push or push is the equivalent of adding basically a new people that grabs favorite number and name. Another way that we could actually do.
00:07:40.278 - 00:07:43.084, Speaker B: This is we could create a variable.
00:07:43.212 - 00:07:50.228, Speaker A: Of type people and then add it like so. So we could say people, new person equals people.
00:07:50.394 - 00:07:51.872, Speaker B: And then we could put those brackets.
00:07:51.936 - 00:07:53.508, Speaker A: The same way we did before.
00:07:53.674 - 00:07:56.996, Speaker B: We could say favorite number is going.
00:07:57.018 - 00:08:02.408, Speaker A: To be this input value, this parameter, and we could say name is going.
00:08:02.414 - 00:08:04.276, Speaker B: To be this parameter.
00:08:04.388 - 00:08:16.572, Speaker A: Now, if you hit save, you'll get this error sent here saying data location must be storage memory or call data for variable, but no one's given. For now we're just going to add the memory keyword here and I'll explain what it does in a little bit.
00:08:16.626 - 00:08:17.676, Speaker B: And then of course, we need to.
00:08:17.698 - 00:08:28.176, Speaker A: Add the new person into our people push right here. So this is how we're actually going to push people into our people array. And I'll get to this memory keyword in a bit. Now if we go back to our.
00:08:28.198 - 00:08:34.112, Speaker B: Deploy tab, we delete our last contract. Let's deploy this new one right now.
00:08:34.166 - 00:08:40.390, Speaker A: If we try to look at the zero with person in our people array, we get nothing. But let's go ahead and add a person.
00:08:40.920 - 00:08:49.092, Speaker B: We'll call it Patrick will be the name and seven will be the favorite number. So we added Patrick, we added seven.
00:08:49.226 - 00:08:50.896, Speaker A: Now if we look at people Zero.
00:08:51.018 - 00:08:53.000, Speaker B: We should see the zero with person.
00:08:53.070 - 00:08:55.930, Speaker A: Has a name of Patrick and a favorite number of seven.
00:08:56.460 - 00:08:56.884, Speaker B: Boom.
00:08:56.932 - 00:09:00.056, Speaker A: And that's exactly what we do see. We see a favorite number of seven.
00:09:00.158 - 00:09:04.364, Speaker B: And we see a string name Patrick. We tried to add John and do.
00:09:04.402 - 00:09:14.076, Speaker A: A 16 and we hit add person. We could see our transaction go through. And now if we go to people at zero, it's still Patrick with a favorite number of seven.
00:09:14.178 - 00:09:15.308, Speaker B: But if we look at the people.
00:09:15.394 - 00:09:25.680, Speaker A: At index one, it's going to be John with a favorite number of 16. And if we look at two, this of course should be blank. And we do indeed see, nothing actually happens here.
00:09:25.750 - 00:09:26.320, Speaker B: Perfect.
00:09:26.470 - 00:09:33.296, Speaker A: Now, there's actually a couple of different ways to create this new person here. Like we showed before, we can use this bracket notation.
00:09:33.408 - 00:09:35.508, Speaker B: Or what we can do is we.
00:09:35.514 - 00:10:05.232, Speaker A: Can actually just add the parameters in the order that they show. So the first parameter for people is going to be favorite number. So we can just do favorite number comma, and the second one is going to be name. And the second one is going to be name. So if we save this, this line we just created is the exact same as the last line. We're being a little bit less explicit here. So the other way is generally a little bit better because it's more explicit as to what variables or what, or we don't even need to save to this variable here.
00:10:05.232 - 00:10:09.456, Speaker A: We could take out this whole line, replace new person with exactly what we.
00:10:09.478 - 00:10:10.880, Speaker B: Just saw, like so.
00:10:10.950 - 00:10:12.780, Speaker A: And now we don't even need the memory keyword.
