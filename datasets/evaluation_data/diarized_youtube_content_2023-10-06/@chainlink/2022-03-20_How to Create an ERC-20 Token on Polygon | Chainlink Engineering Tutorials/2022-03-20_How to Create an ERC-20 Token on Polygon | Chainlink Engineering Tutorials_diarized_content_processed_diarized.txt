00:00:00.650 - 00:00:06.190, Speaker A: Hi, I'm Richard, a developer advocate at Chainlink Labs. And in this tutorial, I'll show you.
00:00:06.260 - 00:00:08.458, Speaker B: How to deploy an ERC 20 token.
00:00:08.554 - 00:00:42.970, Speaker A: Onto the Polygon test network. So let's dive in. You all right, let's build an ERC 20 token and deploy it to the Polygon test network. But first, what exactly is an ERC 20 token? Essentially, it's a representation of something on a blockchain. It's a fungible token. That means the tokens are interchangeable. It's quantity that's important, not necessarily the individual items.
00:00:42.970 - 00:01:12.930, Speaker A: A good example of this is fiat currency. You care about how many you have, not necessarily which ones. In this tutorial, we'll be using open Zeppelin contracts. The reason is open Zeppelin contracts are a set of contracts that are audited and battle tested. It's a great place to start when you're doing something like creating an ERC 20 token. If you head to openzeppelin.com and look at their products, you can find their contracts.
00:01:12.930 - 00:01:56.510, Speaker A: This getting started is about installing them locally. We don't need to do that, as we will be using remix, an online ide that will import the contracts for us. However, if you click on getting started, it will take you to the developer documentation. From here you can see they have a contract for ERC 20 tokens. Now this contract is actually a great place to start and all you need to get going when it comes to creating a very basic ERC 20 token. So let's copy it and head on over to remix. If you head to remix ethereum.org,
00:01:56.510 - 00:02:21.530, Speaker A: you will find the remix ide. This is an online development environment for creating and deploying smart contracts. It comes with some smart contracts out of the box. We can ignore these for now. We'll create our own. If you right click on the contracts folder, select new file, you can create your own smart contract. I'm going to call it polycoin, as we'll be deploying it to the Polygon network.
00:02:21.530 - 00:02:55.574, Speaker A: From here, you can paste in the contract that we copied from open Zeppelin. There's a few things to talk about here. The first is line three, where it's telling solidity what version to use. Next on line five, we import the ERC 20 contract from open Zeppelin. This contract is everything we need to create an ERC 20 token. It's that audited and battle tested contract we talked about that open zeppelin provides. Next.
00:02:55.574 - 00:03:22.214, Speaker A: We're actually creating our own contract here. They're calling it gold token. That's the example that Openzeppelin used. Let's go ahead and name it something else, like Polycoin. We're inheriting the ERC 20 contract that we imported. That's giving our contract all of the power of that contract that we're importing. Our constructor will run the first time this contract is created.
00:03:22.214 - 00:03:52.870, Speaker A: It's asking for an initial supply of tokens, and then it's going to go ahead and return an ERC 20. It's going to name it gold again. We wanted to call ours polycoin and then it has the symbol for the coin. We'll call it polycoin. We mint or create the tokens and give them to the message sender. That's going to be whoever calls the contract. And the value that we're giving it is the initial supply.
00:03:52.870 - 00:04:22.838, Speaker A: At this point. This is everything we need to create an ERC 20 token. If we head on over to the deploy tab, we can actually deploy this contract to the test blockchain. Javascript VM is a test blockchain. We'll deploy it there to start with, just to make sure everything is working. One thing to note about remix, you need to ensure that you're deploying the proper contract. In this case, it's trying to deploy the ERC 20 contract that we imported.
00:04:22.838 - 00:04:48.860, Speaker A: That's not the one that we want to deploy. We want to deploy Polycoin. After you select polycoin, you'll notice that we need to give it an initial supply. Let's pick ten. You click deploy and you'll notice that it says the creation of polycoin is pending. Now don't wait too long for this. As under deployed contracts, you'll notice polycoin is already there.
00:04:48.860 - 00:05:28.470, Speaker A: From here you can look at the total supply of the coin, the symbol, the name, or even the balance of an address. In our case, back up here on account. This is going to be the account that deployed the contract. If we copy this address and paste it in here, we can find that we have ten coins. Fantastic. At this point, we've deployed this contract to a local virtual blockchain. It doesn't exist anywhere else except for locally, but let's deploy it to the polygon network.
00:05:28.470 - 00:05:58.666, Speaker A: The first thing you're going to need is a wallet to interact with the blockchain. I personally am using the brave wallet. It's built into the brave browser, which is the one I'm using. It's very similar to Metamask. Metamask is one of the most common crypto wallets. If you go to Metamask IO you can download and install it in a multitude of browsers and even on your mobile device. Once it's installed, you can walk through setting up a wallet.
00:05:58.666 - 00:06:36.380, Speaker A: If you don't have it already, there'll be a link to a video walking you through that process in the description below. I've set up my wallet already. Now most wallets come with some built in chains already set up and ready to go. For this tutorial, though, we'll need to add the Polygon Mumbai test network to our wallet. One of the easiest ways I've found of doing this is by using Chainlist.org. You will need to connect your wallet to this website. That just means that you're giving a little bit of access to your wallet to this website so it can add a network for you.
00:06:36.380 - 00:07:08.040, Speaker A: If you head to chainlist.org and search for the Mumbai network, you'll find here the Polygon Mumbai network. We connect our wallet and it might prompt you to allow that connection. Once you've connected your wallet, just simply click add to Metamask. This will ask you if you want to add this network to your wallet. You approve and you can even switch to that network and you're good to go. It's that simple.
00:07:08.040 - 00:07:50.750, Speaker A: At this point, we've taken our wallet, we've created a new network and you may not have any matic in yours. Matic is the native currency of the Polygon network. In order to deploy and interact with contracts on the polygon chain, you will need to obtain some matic. One way to do that is by going to faucet polygon technology. This is what is known as a faucet. Faucets essentially drip tokens and allow you to obtain some of the tokens for testing on test networks. Here we're on the Mumbai network.
00:07:50.750 - 00:08:20.746, Speaker A: We want matic tokens. We need to get our wallet address. This is going to be the identity of your wallet. You'll need to copy your address, paste it in and click submit. It'll ask you to confirm this transaction and in a short amount of time, you should receive some matic into your wallet. If you check your wallet after a minute or so, maybe less, you'll notice you now have some matic.
00:08:20.858 - 00:08:23.134, Speaker C: This means you're ready to go to.
00:08:23.172 - 00:09:00.590, Speaker A: Deploy your contract to the Polygon test network. Let's head back to remix. In remix, all we need to change is the environment. We'll pick injected web3. This will take the information from our wallet and inject it into remix again. You need to ensure that you are on the proper network and that you have some matic. At this point, if we click deploy, we will actually be interacting with the Polygon test network.
00:09:00.690 - 00:09:02.250, Speaker C: You'll notice now it's prompting me.
00:09:02.320 - 00:09:13.200, Speaker A: It didn't do this when we were on the VM. That's because there is a gas fee associated with this transaction. We click confirm and we'll need to wait for a moment.
00:09:15.010 - 00:09:15.646, Speaker B: And you can.
00:09:15.668 - 00:09:23.460, Speaker C: See in deployed contracts, our coin is now here. We can take and copy this value.
00:09:23.910 - 00:09:33.826, Speaker A: And view this contract on the actual blockchain. If you head to Mumbai polyscan.com, you.
00:09:33.848 - 00:09:49.778, Speaker C: Can see the Polygon Pos chain testnet Explorer here. If we paste in our contract address and search for it, we can find our contract. It's a token contract and it even tells us the name and symbol of our token.
00:09:49.954 - 00:09:59.526, Speaker A: You can see when the token was created and who created it. And just like that, you've created an.
00:09:59.548 - 00:10:03.630, Speaker C: ERC 20 token and deployed it to the Polygon network.
00:10:04.050 - 00:10:06.330, Speaker A: All right, well, that wraps up this tutorial.
00:10:06.490 - 00:10:08.734, Speaker B: We built an ERC 20 token and.
00:10:08.772 - 00:10:10.830, Speaker A: Deployed it to the Polygon test network.
00:10:11.250 - 00:10:13.182, Speaker B: Thanks for watching and we'll catch you.
00:10:13.236 - 00:10:14.320, Speaker A: In the next one.
