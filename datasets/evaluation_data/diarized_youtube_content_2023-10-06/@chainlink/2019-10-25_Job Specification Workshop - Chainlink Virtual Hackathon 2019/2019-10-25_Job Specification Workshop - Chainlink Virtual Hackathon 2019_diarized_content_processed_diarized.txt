00:00:10.940 - 00:00:11.248, Speaker A: Perfect.
00:00:11.334 - 00:00:29.984, Speaker B: Okay, guys, so we are recording again. Everybody. Thank you for joining us. My name is Rory. I'm the community manager for Chainlink. Today we'll be doing a workshop hosted by Dan Forbes, who is here as well, who was our developer advocate. Thomas Hodges is also joining us sort of as that kind of technical backup if we needed.
00:00:29.984 - 00:00:32.320, Speaker B: He is our integration engineer.
00:00:34.860 - 00:00:35.320, Speaker A: Perfect.
00:00:35.390 - 00:01:00.190, Speaker B: So, basically, what is this workshop going to be about today? Dan is going to talk about combining ideas from the last two workshops. Those of you that haven't attended, those are up and uploaded for your viewing as well, and how to write a job specification that uses an external adapter. So, really building upon that external adapter workshop. So, without further ado, I'll pass it over to Dan again. If you guys have any questions, let us know throughout. We'll do our best to answer them for you.
00:01:00.580 - 00:01:02.544, Speaker A: Yep, everyone can hear me. Okay.
00:01:02.742 - 00:01:03.756, Speaker B: Sound good, Dan?
00:01:03.868 - 00:01:27.480, Speaker A: Excellent. So, yes, thanks, Rory. That was a wonderful introduction. As Rory said, today is kind of going to be about building upon the previous two workshops. So it's not going to be as much building as the other two have been. It's going to be more building on these concepts that we've already kind of established. So, as such, we're going to dig down a little bit deeper into some of the specifics.
00:01:27.480 - 00:02:19.930, Speaker A: I may spend more time showing documentation on my screen than I am showing me actually coding. And so because of that, there's not going to be as many of these quote unquote natural pauses in the conversation. And one of the reasons that I host these workshops is because I'm someone who will just talk and talk and talk. So, as Rory said, please, if I say something and you have a question about it, ask your question right then. And I have encouraged Rory to interrupt me as I'm talking and make sure that we're getting your questions answered, because I want to make sure that this conversation is taking the direction that you want to see it go. But we are going to definitely kind of build some stuff and actually get to see some stuff in action. And so with that in mind, I'm going to go ahead and share my screen and we can start looking into that.
00:02:19.930 - 00:03:14.650, Speaker A: Okay, so I hope that by now, this document is starting to look a little familiar to some of you all. It's becoming familiar for me to write these, which is good. That means they're easy, and we're going to have more of them. So, as you can see, this is going to be a job specification workshop. So it's building on the previous two workshops. In the first workshop, we used a smart contract to interact with Chainlink and request real world data. Specifically, we were requesting the exchange rate from Ethereum to japanese yen is what we built, and then using those capabilities to maintain a state variable on our smart contract and then using the remix ide to kind of bring all this together and execute functions and look at the value of the state variable and all that kind of stuff.
00:03:14.650 - 00:04:28.240, Speaker A: It just so happened that the way that we were getting that exchange rate value was through the cryptocompair API, but we were just doing that from a direct call that was actually hard coded into the smart contract. And so then in the external adapter workshop, what we did is we built an external adapter that wraps up that call to the cryptocampare API. It's actually the same API, slightly different endpoint, but same API that's being called in the first workshop. And so we built out a very simple job specification that allowed us to invoke that API endpoint from our chainlink node. And now what we're going to do is we're going to kind of pull this all together and we're going to re implement the request Ethereum price JPY function with respect to this adapter that we already wrote. So we're no longer going to have the HTTP endpoint hard coded into our smart contract because it's now hard coded into this adapter that we already wrote. And so because of all this, I'm assuming that you kind of understand the things that we talked about before.
00:04:28.240 - 00:05:05.420, Speaker A: We're going to be interacting with the chain link node. So I'm assuming that you kind of have that capability and understand how to do that. And ideally you're going to understand how to write an external adapter and create a bridge, but we're not really going to talk about that today. So let's move into our first step. It's going to be using the chainlink node web Ui to duplicate that very simple job specification that I talked about. So we're going to duplicate that. So let's go to the chain link node Ui, the login.
00:05:05.420 - 00:05:48.910, Speaker A: Let's just go ahead and take a look at the job that we already wrote. Here it is. You can see that it's been run once before, but we can dig a little bit deeper into this screen now and talk a little bit more about the chainlink web UI. And so these are good times for you to ask questions because now this is me just kind of talking about some of these concepts that we touched upon very lightly in the previous workshops. So we have the ID of the job spec. This is what we put into the smart contract when we want to invoke this job. We have a list of some of the recent invocations of this job.
00:05:48.910 - 00:06:34.840, Speaker A: We can see the tasks that are associated with this job and we can see its initiators. So in fact, really the way that I think of a job, and this is an oversimplification, but this is how I get by, is by oversimplifying things, a job is basically a set of tasks and a set of initiators. So you say these are the things that I want to do and these are the ways that I can tell the Chainlink node I want to do them. And so right now we have a very simple set of tasks. We're just invoking the cryptocompair API. And the reason that we're able to invoke that as a task is because we created our bridge earlier, again out of the scope of this workshop, but it happened. And then we have an initiator right here.
00:06:34.840 - 00:07:08.980, Speaker A: And if you remember, it's the web initiator. And so when we have the web initiator, we have access to this run button here, which allows us to just manually run the job from the web UI because it's a web request that causes the job to initiate. And so let's just go ahead and run this. Remember, this is happening asynchronously. So when we create the job, it hasn't completed yet, but now it's completed. Thankfully things are working. So we can look at the JSOn, that job returned.
00:07:08.980 - 00:07:36.668, Speaker A: I'm going to actually pause here and just check for questions if there's any in the Q A. Just want to make sure that everyone's with me. I'm going to assume that you are so cool. Now, first step is duplicating the job. Chainlink node makes that super duper easy. Like I literally just clicked that button. So I know that last time, sometimes if things are too easy, they become easy to miss.
00:07:36.668 - 00:08:01.472, Speaker A: So let's actually do that again. Yeah, I don't care. I'm not going to submit this form. We're going to go to the jobs, going to go to the job that I want to duplicate. There's this duplicate button right here, and then boom, I'm ready to make another job that looks exactly like the job that I just created. And so again, you can see that what we have here is a set of initiators. This is the beginning of an array.
00:08:01.472 - 00:08:32.028, Speaker A: And then these are the objects that describe our initiators. And so in this case, you can see that this is an array with one element, this web initiator. And if you read up on the web initiator, which we're going to do that in a second, you'll learn that it doesn't take any parameters or it doesn't need to. Certainly in this case, it's not taking any parameters. And then there's these set of tasks. We're invoking the cryptocompair task, which lines up to that bridge that we created. Again, no parameters.
00:08:32.028 - 00:09:00.756, Speaker A: To be quite honest with you, I don't really know what confirmations means at this time. So out of the scope of this workshop, it's not necessary, not needed to access these capabilities. And the same goes for start at and end at. Maybe when we've gotten a little bit farther through this, Thomas can offer his insights on what those are. But for now we've accomplished the first step in our workshop. So let's go back and let's see what the next step is. We're going to replace the duplicated job specification with the run log initiator.
00:09:00.756 - 00:09:29.570, Speaker A: So we're using the web initiator, we're going to replace it with run log, and we're going to talk about what all this means. And then we'll need to provide a parameter to this initiator. And so that parameter is going to be the address of our oracle contract, which, again, that's something that's kind of in the scope of knowing how to run a chain link node. So I assume that you kind of know what the Chainlink Oracle address is. So let's go look at what the run log initiator is.
00:09:30.340 - 00:09:42.100, Speaker B: Dan, we had a quick question before you pop up. Basically the question was, I haven't been able to delete test jobs. Is that a feature or a bug from this UI?
00:09:43.320 - 00:09:48.740, Speaker A: You mean runs of test jobs or actual jobs?
00:09:51.420 - 00:09:56.812, Speaker B: Neil's was the one that asked it, so we'll see if he can answer that as we go on here to delete a job.
00:09:56.866 - 00:10:15.570, Speaker A: It's quite simple. You do archive. It's not entirely transparent what that capability is. I haven't found a delete capability. There's this archive capability, which as far as I can tell is effectively the same as deleting something.
00:10:16.100 - 00:10:21.780, Speaker B: All right, sorry, we have an update here. Actual job definition? Sorry, I meant bridges.
00:10:22.360 - 00:10:43.364, Speaker A: Bridges, no, I had the same question. Excellent question. I haven't been able to access that capability. That doesn't mean that it doesn't exist. It just means I don't know how to access it at this time. Thomas, do you want to jump in and offer any insights?
00:10:43.412 - 00:10:44.584, Speaker C: What is the question?
00:10:44.782 - 00:10:48.600, Speaker A: Is there a way to delete a bridge in the chainlink node UI?
00:10:48.760 - 00:10:51.164, Speaker C: Not in the UI. You can do it in the CLI though.
00:10:51.282 - 00:11:21.328, Speaker A: Okay, so there's a way to do it. Not with the UI. The Chainlink GitHub repository is open and it accepts pull requests. If I was a front end developer, I would have already made some pull requests on the front end for stuff like this, like you're talking about. And I would love to see some pull requests from people out there in the community. I'm pretty sure that this is react in particular. I don't know any react.
00:11:21.328 - 00:11:51.020, Speaker A: I know mostly angular, the small amount of front end development that I do know. So yeah, would love to see some pull requests on the operator UI. And if you have any questions about that, get in touch with me or anyone else on the team. Okay, so we're going to go. Any other questions? Cool, great question. So we are going to replace the web initiator with a run log initiator. So before we do that, let's just go kind of learn a little bit more about the web initiator.
00:11:51.020 - 00:12:28.796, Speaker A: It enables you to trigger jobs via web requests, specifically post requests. So when we click that button, what's happening is the chainlink node is emitting an HTTP post request to. Well, no, I'm sorry, it's responding to an HTTP post request. So requests coming in to create new jobs must be authenticated. Takes no parameters. I assume that when you do it through the UI here, it's automatically providing the correct authentication parameters. So let's go check out the run log one.
00:12:28.796 - 00:13:15.624, Speaker A: The run log initiator is the easiest initiator to use when integrating chainlink with on chain contracts. So that's what we're going to do. We're going to integrate our adapter, our job with an on chain contract. And it says that this is the easiest way to do that. So that's definitely the approach that I want to take. What it's going to do is it's going to watch the blockchain for events, and then when it sees an event that it is programmed to respond to, it's going to parse the data out of that event, the parameters out of that event, and then it's going to respond to them. And as you can see, the run log is automatically given the parameters needed for an ETX, an Ethereum transaction task to report the run back to the contract on the Ethereum blockchain that originally created the event log.
00:13:15.624 - 00:14:11.180, Speaker A: So this is going to be super straightforward for us because the chain link node exposes capabilities that makes it that way. And so you can see that the run log initiator, unlike the web initiator, it does take some parameters and in this case the parameter that we're looking for is the address parameter. And like we talked about, that's going to be the address of our oracle contract and that's basically what it says there. So let's go ahead and make these changes. We're going to use the run log initiator and we're going to want to provide an address, but we don't want to use the address that they're using there. That doesn't look like any kind of valid anything to me. So I'm going to go check out the config for my node.
00:14:11.180 - 00:14:22.076, Speaker A: Probably not best practice to share this kind of stuff on the public Internet. This is obviously for educational purposes.
00:14:22.108 - 00:14:24.450, Speaker C: It's completely fine to share your public address.
00:14:24.820 - 00:14:54.980, Speaker A: Thank you Thomas. Happy to know that. So yeah, we're going to replace that with the address of our oracle contract. Yeah, I guess actually you need to share that with people so that they can make use of your oracle. But in general probably don't want to be sharing these things with the world if you're running a node in real life. So we have done that. We've replaced the duplicated job specifications initiator.
00:14:54.980 - 00:15:48.850, Speaker A: We talked a little bit about the web initiator and the run log initiator. So now what we're going to do is we're going to go to the chain link node operator walkthrough and we're going to use the E 256 job specification that we find there and we're going to use that as a template to update this new specification that we're creating. So first let's go take a look at that. So this is the part of the node operator walkthrough where we add jobs to the node. And like I said, we are specifically looking for this euint 256 job. And so you can see that this is using the run log initiator and they give you a little placeholder here to provide your oracle address. And then here's the list of tasks that we're using.
00:15:48.850 - 00:16:40.610, Speaker A: So let's start out, we're going to use the same list of tasks as a template, and unfortunately it doesn't look super pretty. So yeah, we're going to use the same list of tasks but we're going to add these tasks to the job specification. So we're not replacing what's already there, we're adding them to the job specification that we duplicated. So that means that I'm going to add a comma to add these elements to this array that we're creating. And you can see now that the chainlink node is being helpful and saying, wait, this is invalid, JsoN, you told me to expect some more elements, but I don't see any elements so I can't parse what you provided me with. So let's make the node happy. You can see I added those additional elements and so now that warning has disappeared.
00:16:40.610 - 00:17:16.334, Speaker A: What I was going to say though is it still doesn't look very pretty. As friendly as this little editor is here, it could be nicer. And so that would be a wonderful thing to see on a pull request from some of you eager front end developers out there. But for now this is fine, this is working. I know that it's valid JSON because the node is telling me that and so I can continue with the workshop. So what we're going to do is we're going to replace the HTTP get and json parse tasks with one task, the copy task. And of course we're going to talk all about this.
00:17:16.334 - 00:18:18.640, Speaker A: So let's remove HTTP get and json parse. We're actually not going to remove JSON Parse because we're going to replace it with the copy task. And why are we doing this? We are removing the HTTP get task because that functionality is now all wrapped up in our adapter. Talked about that actually, let's go ahead and we'll go to that bridge that we created. We can go to the URL that's associated with that bridge and we can see that when we activate that bridge, when we use that bridge to activate the adapter that we created, what we're doing is getting back this data that's the result of an HTTP call. So all that HTTP logic is wrapped up in the adapter. So that's why we are, sorry.
00:18:18.640 - 00:18:57.054, Speaker A: That's why we are removing the call to HTTP get. And now let's go figure out why we are replacing json parse with copy. So I think if we go, no, I didn't do that. So I'll have to add some links here to take you to the task specifications. But for now this is where I want to be, adapters. So HTTP get is this built in adapter. That's why we don't have to create a bridge for it.
00:18:57.054 - 00:19:31.186, Speaker A: It's not an external adapter, it's an adapter or an internal adapter, I guess you could say totally unofficial terminology there. So the HTTP get adapter, it does take a parameter one. It takes the URL that you want to use. And so that's what we're going to remove from our smart contract here in the next portion of this workshop. So we're removing that altogether. That's happening in the external adapter. And now we're replacing json parse with copy.
00:19:31.186 - 00:20:23.978, Speaker A: And so Json parse, it wants stringified JSon. And this is really the key differentiator here between json parse and copy. And I remember a while back someone asked about this in discord, and it took me a second to even figure it out for myself. And then when I was preparing for this workshop, it even tripped me up. So they serve very different, but it's a subtle difference. So let's make sure that we understand it because it's very important. The json parse adapter, it takes a string that represents a json object and it parses it, and then you can provide it with this path that you want to walk and you want to drill down into a particular element in that json object.
00:20:23.978 - 00:20:59.074, Speaker A: But remember that right now, this isn't a json object. This is a string that represents a json object. And so json parse allows you to deal with that. It parses the string that represents JSON. But because we're using this external adapter, part of the functionality and the capability that that external adapter provides is it serializes that string for us. It turns that string into JSon for us. So we don't have to parse that json, we just have to copy a piece of it.
00:20:59.074 - 00:21:49.242, Speaker A: And so that's why we're replacing json parse with copy, but why they look so similar. But it really is important to understand this subtle difference because it's not necessarily straightforward. And we want to understand why these two different built in adapters exist, why the Chainlink team decided that it was worthwhile to provide you with these two different capabilities. And so if we look at what the copy job looks for, you can see that it doesn't have all those quotation marks associated with it. It's just a json object. It's not a string representing a json object. And so similarly, where the JSON parse job took this path parameter, here we're calling it copy path.
00:21:49.242 - 00:22:43.782, Speaker A: So we're going to see that materialize later on in the workshop so we can close this. We're going to leave that open. So let's make sure that we're following along our steps here. We used that specification as a template and we replaced those two tasks with the single copy task and hopefully everyone understands why we did that now. And so now what we're going to do is hearkening back to the first workshop that we did. We're going to use remixd to open the Atestnet consumer smart contract in the remix web ide. And I think one of the maybe mistakes that I made in the initial remix workshop is that I use visual studio code and I think some people kind of got tripped up on that.
00:22:43.782 - 00:23:09.150, Speaker A: So today we are not going to be using visual studio code. We're going to open this contract and the remix ide a little bit differently. I'm going to use the terminal. I was afraid to scare you all before, but it turned out I just confused you. So we're going to go right to the terminal. So I have a terminal open now and I'm going to look and see what directory I'm in. I'm in my home directory.
00:23:09.150 - 00:23:57.002, Speaker A: So I want to go to the directory that represents the project that we created, that we pushed out to GitHub. So I'm going to do that on the terminal. And if you remember the last time, last we spoke about this project, there was only one file in here, just a testnet consumer solidity file. But I did add one file in here just to kind of make our lives a little bit easier. So let's take a look at what's in this directory. Now we have the Atestnet consumer solidity file and we have this new thing, this make file. So let's take a quick look and see what's in that make file.
00:23:57.002 - 00:24:51.962, Speaker A: Make is just a tool that basically lets you define and execute tasks. It's kind of designed to do specific tasks, namely making or building files and creating build artifacts. But you can also just kind of use it as a general purpose task runner. And so that's what I'm doing here is I've just created this task that I've called remixd. And what that does is it wraps up that remixd command that I had to execute in the first workshop. And you saw in the first workshop, I just copied and pasted it out of the document because there's no way I'm going to remember exactly what to write down every time or what to type in every time. And so make just helps make my life a little easier.
00:24:51.962 - 00:25:29.466, Speaker A: About that. I can't remember the command, but I do remember that I want to start remix D. So what I can do is I can say make remix D because that's what I called the make rule, or the rule I think is what it's called that I created. So now you can see I just typed make remix D and that started remix for me and it's telling me that I can go directly there. Here we are in remix, just like before. It's asking me if I want to connect to local host. I do.
00:25:29.466 - 00:26:12.578, Speaker A: So now I'm connected to localhost and we can see the solidity file as well as the make file. And so the reason that I did this from the terminal is to really just kind of drill down on the fact that, okay, we're keeping these files locally for various reasons. We want to be able to execute tooling on them and keep them in our git repository and all that kind of stuff. So these are local files, we're accessing them locally from our terminal, but we want to be able to use this remix ide because this is actually a very nice tool that makes our life very easy. But we only want to use this for what it's for. Remix is good at being an ide. It's not great at being a file manager.
00:26:12.578 - 00:26:49.780, Speaker A: So we're not going to use it for that, we're just going to use it as an IDe. Just kind of hoping to bring everything back so you can see that because it's a friendly IDe, it's telling us that something isn't right. The source file requires a different compiler version than what we have used the IDe to specify. So let's use the ide to specify a different compiler version and in fact we'll use it to specify the one that is going to make it stop complaining. That's 424. There we go. Okay, so let's see where we are.
00:26:49.780 - 00:27:20.474, Speaker A: We used remix D to open the smart contract in the web ide. So now what we're going to do is we're going to edit that function that we created before. And remember, what we're going to do is we're going to re implement it with respect to the adapter that we created. That's just a fancy way of saying we're going to change it. And as we talked about, we're going to remove the get parameter because we don't need that anymore. We're not calling the HTTP get task. So we don't need to provide that parameter.
00:27:20.474 - 00:27:53.610, Speaker A: That's all been baked into our adapter. And then we're going to need to change the name of the path parameter to copy path. So let's just look at that and we'll do that. Yeah, we hit that error before. We don't need to worry about that right now. So here's our request. Ethereum price JPY method, going to remove that and we're going to replace path with copy path.
00:27:53.610 - 00:28:18.050, Speaker A: And you can see that we're still copying the same part of the response. It's still this JPY part of the response. So let's go ahead and compile this. It's probably already compiling. So now we're really close to kind of the end here. Now it's basically just deploying this and running this. So I'm going to kind of start doing that.
00:28:18.050 - 00:28:46.010, Speaker A: Everything that I did now is what we did in previous workshops. So I'm going to chatter as I'm doing that. Great time for people to ask questions. So compiling the thing. I'm assuming it's compiled now. Let's make sure I'm logged into metamask. Logged into metamask.
00:28:46.010 - 00:29:38.340, Speaker A: Remember with remix you're going to want to change that to injected web3. And then I want to make sure that I'm deploying the right contract. I want to deploy the Atestnet consumer contract that's coming from localhost from this file. So now I'm going to go ahead and deploy that. I love spending free money, so I'm going to make this go as fast as possible for you all. So we're just going to wait for this to deploy. Let's take a look at why we're waiting and what we're going to do next.
00:29:38.790 - 00:29:41.282, Speaker B: Hey, I got a quick question for you on the Q and A.
00:29:41.336 - 00:29:41.940, Speaker A: Perfect.
00:29:43.670 - 00:29:56.150, Speaker B: Just said that step is kind of confusing. Can we just go to the remix Ethereum URL and go from there? When I go directly to the URL, all my sole contracts are there. So I assume the CLi step is automatic.
00:29:57.450 - 00:30:48.870, Speaker A: Yes, you can use remix directly. And this is a question that came up in the remix workshop and I talked about it there and I'm happy to talk about it some more. Like I said, remix is a really great ide. And if you're just kind of playing around and you want to test things out and you're not too worried about running tooling on your code or pushing it out to GitHub or that kind of stuff, and I do think that remix has some integrations with GitHub, as a software engineer, I'm accustomed to having the files that I'm working on locally. It's just what I'm used to. I like to be able to run tooling on them on my local file system. It's how I'm accustomed to pushing things out to git.
00:30:48.870 - 00:31:39.000, Speaker A: And so one of the things that actually bothered me about remix when I first started using it was that everything was in remix, and that was just like, it's convenient for certain things, but for building projects and that kind of stuff, it's not the workflow that I prefer to use. So, using remixd is absolutely a workflow that reflects one's personal preference. But if you're coming to me for advice about how know engage in smart contract development like a software engineer, I would encourage you to look into remixd and at least understand why I like it and why I'm using it the way that I do. Any other questions? Rory?
00:31:40.060 - 00:31:41.224, Speaker B: I think that's good.
00:31:41.342 - 00:32:16.630, Speaker A: Okay. And if you have any follow ups, I mean, that's a really good question. Those are the kind of things that I am big on scope, but we don't have to only talk about the mechanics of this presentation. If you have questions about why I'm doing things the way that I'm doing, those are also the kinds of things that I really want to talk about. And, man, I'm really glad that you asked that question, because you'll notice that our transaction was just confirmed. So thank you for asking that question, because it helped keep things interesting. And I'll just make sure one more time before I start moving on, that there's no more.
00:32:16.630 - 00:33:02.070, Speaker A: So, we've compiled and deployed the contract. Let's go ahead and fund it with some link now. So we're going to get the address of the contract using the remix ide. It's running a little bit slow right now, I think, because I'm like streaming video. But again, remix ide makes it super simple to do all of these things, so it does that job well, but it obviously has shortcomings. Like, it's running slow because I'm on the Internet now, and that's not always desirable for me as a software engineer. Sometimes I want to decouple those things.
00:33:02.070 - 00:34:04.056, Speaker A: So that's why I like to only use remix for what it's good for, and then we can use the file system and remix D for what they are good for. And Remix D is a tool that exists for a reason. So now what we're doing is we're funding our contract with link. Remember that before you use a chain linked smart contract, you're going to want to fund it with link because the link token is the mechanism that we're actually using to send the parameters of our request to the chainlink oracle contract and then in turn the node. So I'm going to have to wait for this to, there we go, that confirmed much faster. So now we're good to go and to use our contract. So we're going to go back to our workshop and we're going to say use remix to call this function that we're talking about.
00:34:04.056 - 00:34:46.400, Speaker A: But instead of using the parameters from the chain link walkthrough that we used before, we're going to use our oracle contracts address and the ID of the job that we created that uses the external adapter that we wrote and everyone willing we're going to get the same result. Let's pray that this workshop ends in a good way. So first thing I have to do is create this job. We haven't created it yet, I haven't saved it, and don't worry, this is totally cool. This happens. We need to log back in. That's just the chain link Ui keeping us secure.
00:34:46.400 - 00:35:38.410, Speaker A: We're glad that it does that and you can see that it takes care of remembering what we had and all that stuff. So that's good, that's nothing to worry about. We created this job, now we have an ID for the job. So let's see, the first thing we're going to want to do is we're going to want to get the oracle address, close this to keep everything simple, oracle address, if you provide it as part of the environment variable configuration, when you start up you'll be able to find it here. So I do that because it makes my life easier. And so the oracle address is the first parameter of our job and then the second is going to be the job ID. So let's get the job ID.
00:35:38.410 - 00:36:48.520, Speaker A: So now we can request the Ethereum price. Now if I had forgotten to fund my contract with link, this is where you'd see this error about not enough gas, maximum gas allowance or something like that. So if you see that error, that's your reminder, oops, I forgot to fund my contract with link or I need to fund my contract with more link or whatever. But again, we now have to wait for this transaction to confirm invoking. There we go, we can see it confirmed. So now this is when things start to get really cool. Now if we refresh this page we can see our job invocation there, which is like so neat.
00:36:48.520 - 00:37:24.776, Speaker A: And you can see that it's still pending confirmation. So now this kind of makes sense why when we click on current price JPY, it's still telling us zero. We can see why that is now on the operator UI side, the node Ui side. So let's see what's happening. Oh, look, this is like big sigh of relief. These green check marks, I love those green check marks. But the chainlink node, you can configure the number of blocks that need to be confirmed before it writes the value back.
00:37:24.776 - 00:37:56.316, Speaker A: So right now my node is configured for three. And so again, this is like one of those environment variable things and you can see it when it's part of the configuration and so it can be changed. That's the takeaway there. So we're waiting for those confirmations. Still waiting, which, that's the network. There's nothing I can do about that. But it's very reassuring to me as the workshop host to see these Green arrows.
00:37:56.316 - 00:38:07.328, Speaker A: So I feel very confident now that this workshop is going to come to a successful conclusion. So really this is your chance to ask questions. I see Thomas has something to say. Thomas.
00:38:07.424 - 00:38:50.912, Speaker C: Yeah, this is a good point to talk about the difference between incoming and outgoing confirmations. These green checkboxes mean that the incoming confirmations has been met. So it processed the job. And then click on the ETX task down at the bottom and scroll down, you see how it has that value there. You can look on ether scan for that transaction ID and see that your node has responded. What we're doing for ETX is we're looking for your outgoing confirmations value. Before the node actually considers that done, it wants to make sure that this has been confirmed with, I believe you had it set to two block confirmations.
00:38:50.912 - 00:38:54.630, Speaker C: So one more block, it'll display a green check mark.
00:38:55.960 - 00:39:54.088, Speaker A: So there you, that's, that's a little bit more of the mechanics of what's going on here. That's what we were talking about with outgoing confirmations. Again, I've talked about the fact that Thomas has been a real inspiration for me when it comes to leveraging the power of block explorers like Etherscan to debug problems or understand what it is that you're seeing. So again, kind of in that same vein of tangentially related topics, I've talked about getting used to kind of using code as a resource in and of itself. I am still learning how to make the most of etherscan as a resource, but Thomas has certainly helped me to see that it is a very powerful resource. And you can just look at this screen and there's like, a lot going on. You know, I'm looking forward to learning.
00:39:54.088 - 00:40:28.660, Speaker A: I don't know what all of this is, and I'm going to learn about that. And I hope that I can help you all learn about it as well. So let's go back and take a look at our job now. We can know that when we go back to remix and we click this button, we actually get a result. So I'm going to go ahead and stop sharing my screen now because that's kind of all the code I have. And I guess I'll pause one more time for questions that people may have.
00:40:28.810 - 00:40:31.012, Speaker B: Yeah, Dan, we have some questions in the Q A.
00:40:31.146 - 00:40:37.344, Speaker A: Cool. Yeah, do you want to just go ahead and ask those, Rory, so that if anyone is watching YouTube.
00:40:37.472 - 00:40:50.270, Speaker B: Sure. This one was. What was that at the end of the string he pasted in? It looks like he pasted something more than the contract. Okay, maybe he removed it before he pressed enter. You just went really fast.
00:40:51.280 - 00:41:09.344, Speaker A: Sorry. Yeah, that's why I always encourage you guys to interrupt me. I need a little bit more information about where it is that I went fast. I apologize if I was copying and pasting too quickly or you feel free to provide more context there.
00:41:09.462 - 00:41:18.310, Speaker B: Yeah, I just want to see if we get anything that pops up again. The Q A. That's something more specific in the request ether field on the left side.
00:41:19.320 - 00:41:54.716, Speaker A: Oh, yeah, I see. Okay. So what you mentioned is actually one of the things that I don't like about the remix Ethereum ide. So let's go through that again because it is one of my less favorite parts of this ide. So, first of all, let's remember that these things that we're entering, they're strings, so we need to enclose them in quotes. So before I type in anything, it's honestly just something I do to help myself remember. I'm going to type an opening quote because I know that what I put in here is going to have quotes.
00:41:54.716 - 00:42:18.696, Speaker A: And I need the address of my oracle contract. You see, when I hovered over there, that's really helpful. It told me. So let's go get the address of my oracle contract again. That's coming from the configuration there. Going back to the remix ide. Going to paste that in there.
00:42:18.696 - 00:42:46.652, Speaker A: And now I'm going to close my quotation mark. And now I'm going to do a comma because it's the next parameter that I'm doing. And again, this needs to be a string. So, opening quotation mark. So I remember to close it, copy this value, and now this is where I really don't like it. And then I'm actually going to show you how to get around this. When I come back, it goes all the way back to the beginning.
00:42:46.652 - 00:43:18.920, Speaker A: And so I have to use the end button on my keyboard to go back to the end, back to that opening quotation mark that I made, paste in the value, and then I do the close quotation mark. And remix actually does expose a much more friendly UI for this. And actually, this is a good reminder for me to use it. But, yeah, it's collapsed by default, so that's why that doesn't look as straightforward as we'd like.
00:43:18.990 - 00:43:23.740, Speaker C: When you expand it out with that down arrow, you might not even need the quotes.
00:43:24.080 - 00:43:44.690, Speaker A: Yeah, I think that's true. And again, is that a bug or a feature? I may argue that they should have the same behavior. But like anything else, like ether scan, like Chainlink, like anything, remix is a tool that exposes a set of capabilities, and you got to learn how to work with them.
00:43:45.240 - 00:43:54.070, Speaker B: Okay, the next one. So it just looks like you put, like, the contract with quotations only there's nothing after.
00:43:56.680 - 00:44:18.270, Speaker A: I don't quite. If we're using this field that remix uses, then we want to do the oracle address and then a comma, and then follow that. And again, I'm going to have to go to the end again. Follow that with the job ID.
00:44:19.760 - 00:44:21.790, Speaker B: I think the comma was the question.
00:44:23.460 - 00:45:02.076, Speaker A: If you use this expanded exploded ui, whatever you want to call it, the interaction is slightly different. So, again, is it a bug? Is it a feature? You decide remix exposes these capabilities, and you pick the one that works the best for you and your workflow. Or maybe you decide that remix doesn't work for you at all. Maybe you don't like remix and you just want to do everything in visual studio code, that's acceptable, too. What's unacceptable to me is that you find these things difficult or confusing. And so that's what I want to help with.
00:45:02.178 - 00:45:03.820, Speaker B: Okay, that answered the question.
00:45:03.970 - 00:45:27.430, Speaker A: Cool. Other questions before I stop sharing my screen? All right, Rory, I think I'm pretty much done. I don't really have anything else to say. I don't know, Thomas, is there anything that you'd like to add on these topics at all?
00:45:28.040 - 00:45:29.364, Speaker C: No, I'm good here.
00:45:29.482 - 00:45:36.256, Speaker A: Okay, any questions from the community? So I got Rory.
00:45:36.368 - 00:45:39.956, Speaker B: Okay, cool. Nothing I'm seeing here, guys. So thank you again for joining us.
00:45:40.058 - 00:45:40.324, Speaker A: Again.
00:45:40.362 - 00:46:06.012, Speaker B: We'll get this put up as quickly as we can, but tomorrow with the latest. Do our best to get it up this afternoon. Thank you again, Dan and Thomas, for being here and helping us with this. Anything comes up, reach out to us on discord. Also in that workshop channel. You have any great ideas for workshops you'd like to see? You have any ideas on time? So, hey, it's really difficult for me to make this because Dan is pretty flexible. I'm sure, as long as it's during kind of typical normal hours for him.
00:46:06.012 - 00:46:19.296, Speaker B: So am I, when we can do this. So make your suggestions. Again, thank you so much for joining us. And we look forward to doing the next one, which will be occurring on Sunday. And we'll be tweeting out about that on smartcontract.com twitter. If you're not following that, please make sure you do.
00:46:19.296 - 00:46:23.124, Speaker B: So that's where you're going to get a lot of workshop type stuff from.
00:46:23.162 - 00:46:24.228, Speaker A: Us, from the team.
00:46:24.394 - 00:46:27.700, Speaker B: So make sure that you follow that. And if you have any questions, please let us know. Thank you again.
00:46:27.770 - 00:46:35.444, Speaker A: Just a reminder, it's smart underscore contract on Twitter. Smart underscore contract. Yeah.
00:46:35.482 - 00:46:40.600, Speaker B: Smart underscore contract on Twitter. So thank you so much, guys. You guys have a great day and look forward to next one. Thank you, Dan.
