00:00:08.250 - 00:01:05.738, Speaker A: Hardhat has this fantastic tool built in called the hard Hat network. Hard Hat comes built in with Hardhat network, a local ethereum network node designed for development akin to ganache that allows you to deploy your contracts and run your tests and debug your code. Whenever we run a command command in Hardhat, or a script in Hardhat, or a task in Hardhat, we by default deploy to this fake hardhat network. This hardhat network is very similar to Ganache, except for instead of having this UI, it runs in the background for our scripts. In fact, if we go to our Hardhat config js, we can scroll down to the bottom to this module export section and add more information about our default networks. So right now, if we don't have anything in this module export by default, it adds this piece called default network hard hat. So anytime we run a script without specifying a network, it automatically uses this fake hardhat network.
00:01:05.738 - 00:01:53.050, Speaker A: And this fake hardhat network comes automatically with an RPCRL and a private key for you so you don't even have to add one in. This is one of the major advantages of working with Hardhat. It just automatically gives you this fake blockchain and these fake private keys. If we want to be a little bit more explicit, and I always recommend being more explicit, we can add the default network in to the module data experts. So now our default network is explicitly stated as hardhap. However, in any script you run, you can choose whatever network you want to work with. So if I want to explicitly say I want to run our deploy script on our fake hardhat network, I can do yarn hardhat, run scripts, deploy JS network Hardhat.
00:01:53.050 - 00:02:25.450, Speaker A: This is us telling Hardhat hey, we want to run this script on the hardhat network. Hopefully you might be able to see where this is going. Having this network flag makes it incredibly easy to switch across different chains, different blockchains, different private keys, et cetera. So we have our default network set to hardhat here. We can add other networks in here as well. The way we do that is we're going to add a networks section and we're going to define any of the network sections that we want. And remember to put a comma there so that your visual studio code doesn't get mad at you.
00:02:25.450 - 00:02:55.656, Speaker A: So recently we worked with Rinkbe. So let's go ahead and add a rinkby network in here. So we're going to say another network is going to be rinkbee. Cool. So I should just be able to change the network flag to rinkby now, right? Well, not quite. If you try to run that, you're going to get invalid value undefined. For hardhatconfig networks Rinkbee URL, it's expecting you to tell it, hey, what the URL is.
00:02:55.656 - 00:03:32.660, Speaker A: Since this isn't the hardhat network, we need to tell Hardhat exactly how we're going to connect to rinkby. And this is where a lot of what we learned before is going to come in handy again. Exactly the same as what we did before. We're going to create a new env file, and we're going to add our Rinkbee URL in this env file. Just remember, env is in our git ignore just in case. So in our env, we're going to add that RPc URL from alchemy back in here. Before we just said RPC URL, but since we might want to work across multiple networks, it's usually good to specify exactly what network each URL stands for.
00:03:32.660 - 00:04:31.956, Speaker A: So we're going to say Rinkabee RPC URL equals and then paste that URL in here. Now, as you probably have guessed, we can add our URL to a Rinkbee network here for readability. I usually like to add them as variables right above the module experts. So I'll say const rinkabee RPC URL equals process env RinkabrpC URL. Once again, we're going to be pulling that rinkby RPC URL from our environment variable. Of course, in order to pull that environment variable in, we're going to need to use that env package again. So to add that in, we're going to do yarn, add dev env, and at the top of our hardhat config, we're going to add require env and then dot config to enable the config.
00:04:31.956 - 00:05:00.236, Speaker A: Now, this means we should be able to pull our Rinkbe RPC URL from our env. Now that we have that in our rinkbe network, we can add URL Rinkbe RPC URL. Awesome. So we have an RPCRL for a different network. But what else do we usually need? Well, we usually need a private key to work with an actual network. Hardhat doesn't automatically give us a private key for Rinkbee because Hardhat can't just give us testnet Ethereum. We need to have an actual account, an actual testnets.
00:05:00.236 - 00:05:34.584, Speaker A: Hardhat doesn't control those. So we have to actually give it a real URL and a real private key. So to add private keys, you actually add something called accounts you add a list of accounts that you want to give to hardhap. For us, we're only going to add one, which is going to be our private key. And for our private key, we're going to do the exact same thing. We're going to say const private key equals process env private key. And since this private key is going to be a real private key for a real testnet, again, we are going to have to grab this from our metamask.
00:05:34.584 - 00:06:08.608, Speaker A: So we'll go to our metamask, hit the three dots account details, export private key, and we'll add our password in here. And then in our env, we'll add private key equals and then add our private key. Now, I know I've said this a hundred times, but please, please, for learning this, do not use a real key that is connected to any real money. Just in case, please use a new metamask. I know I've said it a bunch, but some people go, no, I'm going to be okay. I'll be safe. Just to be super, super safe here, please use a brand new metamask.
00:06:08.608 - 00:06:33.912, Speaker A: So now that we have our private key, we're going to add it in here. Account private key and now we have an account here. One more thing I like to do is I like to give the chain id of the network, which for Rinkby is going to be four. Every single EVM based network has a new chain id. An EVM network basically just means solidity works on it. This includes all testnets. There's a good site called chainlist.org
00:06:33.912 - 00:07:01.320, Speaker A: which may or may not be going down at some point that has a list of all these different networks. For example, you can see on here, ethereum main. Net has a chain id of one. Binance smart chain is 56, avalanche is four, three, 1114, Phantom, opera 250, Polygon 137, et cetera. Each one of these EVM compatible chains has their own chain id. For rink V, the chain id is four. Adding the chain id is helpful here for later on, and we'll get to that in the future.
00:07:01.320 - 00:07:51.684, Speaker A: But for now, just go ahead and make sure to add your chain ids. Okay, now that we have the RPCRL, we have the private key, we can go ahead and test deploying this to an actual testnet. And I actually did something incorrect here, and we're going to get an error here. And I want you to go ahead and try to figure out and debug this error yourself. You ready? All right, let's do it. We'll do yarn hard hat run the scripts, deploy JS network Rinkabee and we get this wonderfully weird error which if we see we have deploying contract, so we know that in our deploy script we get to at least this line, but then we're getting an error, highly likely here. So what's going on saying cannot read properties of null reading send transaction.
00:07:51.684 - 00:08:27.504, Speaker A: If you want, you can absolutely go to this spot. But basically it looks like it's having a hard time understanding what the private key or what the account of this is. And what do you think I'm going to recommend we do? Well, if it's not clear, after doing a little bit of triaging and debugging, we're going to copy this error and we're going to come on over to Google and paste that right in. It looks like we do get a question here from stack exchange Ethereum. And it looks like it's really similar to what we're doing. We scroll down, they're running nearly the exact same script that we're running. They're using MPX instead of yarn.
00:08:27.504 - 00:08:52.108, Speaker A: They've got a pretty minimalistic deploy file. Let's scroll down and see what the answers have to say. I've seen this error when my private key wasn't properly populated. I would also use an environment variable. I'm pretty sure our environment variable is good, but we have a second one saying in your hardhead config js it should be accounts instead of account. It worked for me. Let's go back to our hardhead config and see if that's what's going on.
00:08:52.108 - 00:09:08.576, Speaker A: Aha. We put account when this should be accounts. So let's swap that over to accounts. We'll clear our terminal and we'll run this again. Aha. And now it's waiting a little bit longer, which is good. This means that we're probably deploying this to rinkby, which is what we want to see.
00:09:08.576 - 00:09:25.892, Speaker A: Awesome. And now we can see deployed contract two. And we have a contract address here. So we'll grab this contract and we'll pop on over to rinkbe ether scan test on rinkbe Etherscan, and we'll go ahead and we'll paste this in. Awesome. And we can see our contract was created about 26 seconds ago. Perfect.
00:09:25.892 - 00:09:37.770, Speaker A: Now, for this part, you don't have to deploy this to rinkby with me. If you follow along here, that's good enough. So remember, deploying to testnets can take a long time, so for this one, you don't have to deploy with me one.
