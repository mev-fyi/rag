00:00:06.570 - 00:01:04.466, Speaker A: Hi everyone. Today we're going to go through a quick demo of our hard hat starter kit. So we're going to talk about what the kit is, why you should use it. Then we'll go through a quick demo of using the hard hat starter kit to deploy some smart contracts that make use of Chainlink tools and features. So let's get started. So the hard hat starter kit can be found pinned to the top of our repository here on GitHub, as you can see, and Hardhat is an EVM based development environment for building, compiling, deploying and testing your EVM based smart contracts. It's got some really handy features that you can use, such as a local network that you can do local smart contract development and debugging on without having to deal with the complexities of a public testnet and things like that.
00:01:04.466 - 00:02:08.998, Speaker A: And it's got what are called tasks, which lets you create reusable bits of code to kind of automate certain things that you find yourself doing often. So the Chainlink hard hat starter kit is a prepackaged hardhat repository that contains all of the smart contracts, all of the deployment scripts, all of the test scripts, and all of the config needed to use Chainlink in your smart contracts. So we've got smart contract to use any API, we've got one for price feeds, and we've got a VRF contract as well. We've got deployment scripts to deploy those smart contracts to the specified network. We have tasks specific to each contract that lets you interact with the contract once it's deployed, as well as some generic tasks such as to fund them with the contracts with link. And we've got some tests as well. We've got some unit tests for doing some local testing against your smart contracts, and we've got some integration tests for when you need to deploy and test against a live chain link oracle network as well.
00:02:08.998 - 00:02:53.170, Speaker A: So the first thing you'll need to do is go to your hard hat config and set the default network. And what that will do is it will specify which network you're going to deploy your smart contracts to, basically. So on top of that you'll also need to specify or set some environment variables here. You can do it here or you can do it in a EMV file here. So check out the readme if you need some more info on what to do there. So for now we're going to work with the local hard hat network and what I'm going to do is I'm going to deploy these smart contracts to the local hard hat network here. So as you can see, that's now completed.
00:02:53.170 - 00:03:53.382, Speaker A: And now I'm going to run yarn test, which is going to run the unit tests that's specified in the unit folder here. And as you can see, they've all been successful, and everything looks okay. So now I'm going to change to the coven network, and we're going to redeploy our contracts to the coven network now. So what that's going to do is it's going to run through the deploy scripts here. And as you can see, we've got a bunch of output as well. And once that's completed, we can then start running some tasks to interact with our deployed contracts on the coven network. So I'll just give that a second to complete, and maybe we'll pick the random number consumer contract here.
00:03:53.382 - 00:04:34.402, Speaker A: So what I'm going to do is I'm going to copy the output that was given there. And once these deployments are complete, we're going to run the request random number task against the random number consumer contract. So that is going to basically call the function in the contract to request a random number from a chainlink oracle. So we'll just give that a second to complete. There we go. And now we are going to run the read random number task, which is going to check the result of our VRF request on our VRF consumer contract. So hopefully that's been long enough now for us to get a result back.
00:04:34.402 - 00:04:50.818, Speaker A: So it's checking the contract. And there we go. We've got a nice, long random number that you can use. There you have it. It's really easy to use. We've got smart contracts needed to use Chainlink. We've got the deployment scripts for those contracts.
00:04:50.818 - 00:05:08.060, Speaker A: We've got tasks to interact with the contracts, and we've got tests to do, unit and integration tests for these contracts that use Chainlink. So it's a really sensible starting point for building smart contracts that use Chainlink, and you can easily integrate it to other parts of your project. Thanks, guys.
