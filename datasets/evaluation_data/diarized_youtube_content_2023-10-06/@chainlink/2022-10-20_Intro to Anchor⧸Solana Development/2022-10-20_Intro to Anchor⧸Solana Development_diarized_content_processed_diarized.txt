00:00:24.800 - 00:01:28.000, Speaker A: Hey everyone, welcome to another fall 2022 chain link hackathon workshop. We'll just give it a couple minutes for some people to flow in and then we'll get started. You, let's get some GMs in the chat and tell me where you're streaming in from tonight or today or this morning. Nice. Nigeria. Iraq. India.
00:01:28.000 - 00:01:49.090, Speaker A: Delhi. Awesome. That's pretty good. Totor in. Bulgaria. Hungary. Nice.
00:01:49.090 - 00:02:20.570, Speaker A: Canada. Mumbai, India. Awesome. All right, we'll give it one more minute and then we'll get started. Just out of curiosity, if anyone has deployed or done any Solana development before, let us know in the chat. Texas. Nice.
00:02:20.570 - 00:03:30.080, Speaker A: Okay, I think we're just about ready. Basic anchor development. Nice one. Okay, I'm going to share my screen. Sometimes their blockchain. Yeah, but I think it should be okay now. You'll find out very soon in the next few minutes that Solana is very different to ethereum or any other EVM type chains.
00:03:30.080 - 00:04:19.640, Speaker A: So they're trying to approach things differently and to try make a blockchain that really scales for billions of users. But anyway, let's get started. So welcome everyone to another chain Ink fall 2022 hackathon workshop. On this time, introduction to Salana and anchor. So my name is Harry Papacarisio and I'm a developer advocate manager at chain Inclabs, and I'm also a big fan of Solana and everything they're doing. So that's why I'm giving this talk today to everyone. So hopefully it's a very quick 1 hour blast through intro of what Solana is, but hopefully when you come out of it, you understand the main differences between Solana and say, ethereum or other EVM chains.
00:04:19.640 - 00:05:17.004, Speaker A: And you also have some knowledge and experience in how to actually deploy a smart contract on Salana and interact with it, as well as how to use chain link price feeds on Salana. So first things first, Salana has sponsored a track or a prize in this hackathon here, which means you have the opportunity to win ten K if you build the best project on Salana as part of this hackathon. And the good news is, because Solana is programming on Solana, it's definitely an emerging blockchain and ecosystem. It's not as popular as ethereum yet or EVM. So if you enter in this track, you're going to have a better chance of winning a prize than if you enter in an EVM track or the main track. Because dare I say, more people are going to be entering with solidity based projects. But if you want a better chance of winning.
00:05:17.004 - 00:05:52.190, Speaker A: Highly recommend you trying to play around with Salana having a look because you'll have a better chance of winning a prize here. So if you're interested in that, definitely recommend just giving it a shot. If you know how to program in rust, definitely recommend to give it a shot and take a look. But yes, $10,000 for the best project built on Salana. As part of this hackathon project, you need to use chain link as well because it's a chain link hackathon. So we'll go through Chainlink data feed later. But just keep in the back of your head, if you enter a project built on Solana, you'll be eligible to potentially take home this prize here.
00:05:52.190 - 00:06:20.064, Speaker A: Cool. So let's move on and start talking about an introduction to Solana. So Solana is an open source public blockchain. The unit of account is Sol token. It can be broken up into what are called lamports, right? So when you hear someone say lamports, it's a fraction of a soul. And despite what people think, they're actually quite decentralized now. They've got approximately 2000 nodes.
00:06:20.064 - 00:07:01.180, Speaker A: It's fast, it's cheap, and their Nakamoto consensus number, the latest number I think was 31 or somewhere in the 30s, which is pretty good. It's definitely up there in terms of decentralization. So it's one of the few chains where they've got a good level of decentralization now and they're able to be fast and cheap as well. So they've got a number of real enhancements that they use to basically become so fast to scale to so many users. So Solana ecosystem, the main net is called mainet beta. So if you hear mainet beta, it just means mainet. And in terms of where you do development, the environment that you're going to want to use is called Devnet.
00:07:01.180 - 00:08:04.000, Speaker A: So it's kind of like their testnet, specifically for developers. So when you're building smart contracts and testing them and things like that, you want to use the Devnet network. So other than that, I'm not going to go into too much detail because as a developer, you probably don't need to know as much of this, however highly recommend you research it if you want to. But they use a proof of state consensus mechanism as well as this new innovation called proof of history, which they use to order transactions, basically. Let's move on. So the biggest and most important thing you need to know when you're building stuff on Solana is that there is a separation of program or logic and state, right? So if you're coming from the Ethereum world, when you deploy a smart contract, in the smart contract, you have variables, you have arrays, you have all these things, and they're stored in that contract at the deployed address. But with Solana, when you deploy code, it's just that, it's just code.
00:08:04.000 - 00:08:38.044, Speaker A: There's no state that's associated with it. You don't put state in the code. State is stored in these other things that are called accounts, right? And an account is basically, it's a buffer, but you can think of it as like a file in an operating system. It's a file that includes a bunch of metadata that know what's all the stuff in this file, who owns the file, who has access to this file, et cetera. So that's the biggest difference between Solana and Ethereum. With Solana, you deploy code, but it's just code. There's no state in it, there's no variables, there's no arrays.
00:08:38.044 - 00:09:09.288, Speaker A: And that code takes in as inputs a bunch of accounts which are basically like files. And then the code modifies the state of those accounts or files as part of the logic. And then after everything's finished, the accounts have been modified and the code has done it. But the actual state is stored in the files separate from the code. So that's the biggest thing you need to realize is the program accounts model. Instead of putting code together with state, in Salana, it's separated. We have programs, which is just logic.
00:09:09.288 - 00:09:42.070, Speaker A: And then programs take a bunch of accounts to then modify data in. So in an ERC 20 example, which is like your standard token contract. In Ethereum, you have one contract that has all the state in. It stores everything, including who has what balances. In Solana, you'd have a token contract that has all the code and the functions to withdraw and transfer and things. But those functions would take in accounts as inputs. So a transfer function would have a from and the to account, and it would remove tokens from the from account and add them to the to account.
00:09:42.070 - 00:10:12.012, Speaker A: Right. And then it would end. So, yeah, just wanted to reiterate, the difference between Solana and Ethereum mainly is this separation of logic and state on Solana. If you have any questions, feel free to ask in the chat, and I'll try get to them at the end. So here's what an account actually looks like if you actually look at it. So it's basically just a bunch of metadata. So you've got data here, which is a byte stream.
00:10:12.012 - 00:10:59.500, Speaker A: It's a byte array that has all the data. It's got lamp points, which basically means, as you remember, that's the unit of account. So it says, how much soul does this account have in it? And you'll learn why you need Sol in accounts very soon. And then it's just some other metadata, like, what is the public key of this account? Is it writable? Who owns it? Is it executable? Et cetera. So the basic operational unit on Solana is an instruction, right? So think of it as like a call to a program or a smart contract. And an instruction is split into three different things. So you've got the program ID, you've got the accounts that you want to modify, and then the instruction data, which is like your input parameters that you're passing in.
00:10:59.500 - 00:11:52.144, Speaker A: And a transaction is basically just a list of these instructions put together. And the way you interact with Solana is you bundle up these instructions and then you submit them via a JSON RPC API to a Solana node, right? So if you take a look on the right here, you can see there's two instructions. The first one is an instruction to the program ID listed there. And the instruction has two accounts or files, as you can think of them, that are passed in to that instruction. There is that byte array underneath there. And then under that, you've got another instruction which calls the same program ID, I think. Yep, but it's passing in different accounts and different instruction data and those all bundled together in a transaction that has execute instruction one and then instruction two.
00:11:52.144 - 00:12:34.684, Speaker A: And then when that's submitted to the Solana node, it will process those instructions. Are there resources or documentations available to learn more about Solana development? Yes, great question. At the end of this presentation, I will share a number of examples for you. So if you just hang around. Yes, we went through that one just now, so I won't go through that again. So the instruction data that you pass in is kind of like your input parameters, right? So when you're using solidity, you can just pass in a number or a string or whatever. But in Salana, when you're using raw Salana anyway, you can't do that.
00:12:34.684 - 00:13:39.820, Speaker A: You have to pass in a byte array. So if you want to pass in a number of like 100 as an input parameter, if you're not using anchor, which we're going to get to soon, you have to serialize that number 100 into a byte array and then pass it in, which makes it a bit tricky. But this is how Salana scales so well, the developers take on a little bit of pain so that the protocol itself can scale, but we'll learn more about that. Yeah, you basically have your smart contracts that you write in Rust CLC. They get deployed to the Solana network and then to interact with those smart contracts once they're deployed, you can write clients using JavaScript, rust front ends, et cetera, and they interact with the Solana deployed programs via adjacent RPC API, essentially, which we'll go through some examples in a minute. So that's at a high level, how you interact with Solana programs and how you kind of deploy them. So let's talk about economics and rent.
00:13:39.820 - 00:14:23.970, Speaker A: Now, is there a number to a limit of instructions in? I don't, not that I know of, no. You can bundle up as many as you want, I think. So you might remember I talked about accounts earlier and how they basically store data. So with Solana, there's transaction fees, like other chains as well. But there's also this notion of rent, which means that if you want to store data in accounts, you need to make sure those accounts have enough land ports in them to then go to be paid to the nodes that actually store the data. Right. So it's kind of like paying rent for an apartment or a house.
00:14:23.970 - 00:15:04.860, Speaker A: And the amount you need to pay depends on how much data you're storing in the certain. If you go to Solana docs, there's certain formulas and values that you can use to calculate. But essentially there's two methods of paying rent for storage on Solana. The first one is a set and forget method, where if you pay for two years worth of rent upfront, based on the amount that you've got in the account, the amount of data, you don't ever have to pay any more rent again, it will never take more. Or if you don't want to pay for two years up front, you can just pay per byte. So they're the two methods that people use. A lot of people generally go with option one, set and forget.
00:15:04.860 - 00:16:16.176, Speaker A: Now, here's where it gets a little bit tricky, but we're not going to go into this in huge amount of detail because we've only got 1 hour. So like I said earlier, Solana is very fast, and the way it achieves speed, or part of it, is through making things a bit harder for developers so that it can scale better. And in the case of interacting with Solana programs and passing in input parameters and things like that, you saw it was done using byte arrays before, or byte streams, and essentially what you need to do is for that, you need to serialize any input parameters you want into your byte array, and then that gets sent on chain, and then you need to deserialize it back into its original form. So that's what we mean by serialization and deserialization. If you want to pass in the parameter 1000 to a function call in Solana, you need to take that integer 1000. You need to serialize it into a stream of bytes that gets sent as the instruction data to the function call. And then on chain, on the smart contract, you then take that byte stream and then deserialize it back to an integer.
00:16:16.176 - 00:17:02.336, Speaker A: And then you have your integer of 1000 that you can then do stuff with. So that's what we mean by the concept of serialization and deserialization. Basically taking something, an object, a string, whatever, turning it into a stream of bytes, submitting it via the JSON RPC API to the Solana program, and then deserializing it back into what it originally was. Luckily, I highly recommend you check this out if you're interested in it. But luckily, if you use the anchor framework, which we're going to go through right now, you don't have to do this, but just wanted to point out that this is what happens under the hood regardless. So how are we doing for time? 20 past, almost. Okay, let's move on to anchor now.
00:17:02.336 - 00:17:39.710, Speaker A: So anchor is a framework for quickly building salana programs, essentially. And the way it does that is it generates all this boilerplate code for you so that you don't have to do a lot of the pain, such as serialization and deserialization and things like that. So it's actually used by almost everyone in Solana. It's really popular now. And the way some of the tools in which it uses is obviously you have your smart contracts that you write in rust. It's got this thing called IDL, or interface description language, which we'll go through, and you can generate clients using a JavaScript package. And it's got its own CLI, which we'll go through as well.
00:17:39.710 - 00:18:33.120, Speaker A: So the way the workflow in anchor works is you've got your smart contracts that are written in rust, and from there, the smart contracts, you can build them. It compiles a rust program into bytecode, but it also generates this interface description language file from that idl file, which we'll go through in a minute. You can then generate clients client code, and with the clients, you can then talk and interact with the smart contracts and test them. So a program that uses the anchor framework essentially consists of three parts. You've got the program module, which is where all the program logic is written. You've got the account structs, where all of the accounts that are passed into the program are validated. And then you've got this thing at the top called a declare ID macro, which stores the address of the program that's currently being executed.
00:18:33.120 - 00:19:11.032, Speaker A: And we're going to go through those now. So here's just a small bit of rust, and you can see the parts in red are actually, I'll just hide my head here so it's not in the way. The parts in red are essentially these little hooks that you put in for anchor. So the declare ID bit at the top here that basically says, this is the ID of the program that's running. This is the public key address of the program. The little program hook there in red. It basically says over here is where all the logic for this anchor program is, and then that derive accounts.
00:19:11.032 - 00:19:56.250, Speaker A: Little hook at the bottom there says, here are all the accounts that are expected to be passed in to this program, and here's what you need to do with them. So this kind of shows how the three little hooks that you put in in anchor program are. So first, we'll look at the accounts, which is this derived accounts section here. So this is where you define which accounts your instruction expects and which constraints these accounts should follow. So you're basically saying, I've got some code here that's going to do stuff to some accounts that are passed in. Remember, accounts are just like files, so the logic is just going to modify the state of them. And this is where we're saying this is what you need to do with these accounts here.
00:19:56.250 - 00:20:36.836, Speaker A: Great question in the chat. I don't have any idea of rust programming language. How does it take to master this language in order to be effective in building projects in Solana? Excellent question there, Akin Fenwa. I actually didn't know Rust until recently, so I took it upon myself to learn a little bit. You don't actually need to know a lot of rust to learn Solana. You kind of just need to know the basics because it doesn't use a huge amount of rust. The main thing you need to know is just how to deal with that separation of logic and state in Solana and how to work out what should be stored in which accounts and then how you should modify the accounts on Solana.
00:20:36.836 - 00:21:26.890, Speaker A: That's probably the hardest part in my opinion. But if you just start reading the I'll share some resources at the end, but if you just start learning, know a couple hours a day or an hour in a day or a few hours a week, probably in less than a month, you'll kind of know enough to be able to understand what most Solana programs are doing. I'd say, okay, let's move on. So in this anchor example here, you can see that here's the program logic. Here's the declare ID that says this is the program ID of this program. This has a set data function here, right? And you'll notice in this set data function, it has this thing called context here. And the context is set to set data.
00:21:26.890 - 00:22:09.252, Speaker A: This is on purpose because this is basically saying for this function call here, I'm expecting the accounts that are passed in, in the set data section, in the accounts. So if you go down to the accounts section, you'll see this pub struct set data. So this is kind of where it matches. And this is essentially saying when any function that uses this set data is called, it's expecting this my account account. And that's just what it's called. And the type of account that it is is of type my account here. And if you scroll up a bit to the account derived section here, you'll see pub strike my account.
00:22:09.252 - 00:23:13.240, Speaker A: And in there it's just like a struct with a data unsigned integer 64 bit. So essentially we're saying when this set data function is called, we're expecting this one account to be passed in, called my account, and the type should be of my account, which is this struct. So that's kind of how we're linking the accounts with the functions. And you can actually see it's actually taking in this thing called data as an input parameter, which is an unsigned integer 64 bit, so we don't have to do any serializing and deserializing. We can literally pass in in the function call an integer, which is completely different to what we saw earlier with the serialization and deserialization. So this is just a simple example of how to use anchor, how to specify where your program logic should be, how you specify what the program ID is and the declare ID, and how you could specify what each function should expect in terms of the account info. Let's see this question in the chat.
00:23:13.240 - 00:23:49.990, Speaker A: In the given example, my account needs to be owned by the hello. Anchor program. Yes, and part of the reason actually why we have this declare ID at the top is so that anchor knows what the ID of this program is. So anchor can basically verify ownership and things like that. Because you might think it's a bit weird to say in Ethereum you can go address of this to get the current address of the deployed contract. But in Solana or in anchor, you kind of have to manually specify it here. Great question.
00:23:49.990 - 00:24:48.900, Speaker A: So the anchor program module is where the business logic is defined. You write your functions, which can then be called by clients or other programs. And like I said earlier, each defined endpoint takes a context type as an argument which provides access to the accounts of the executing program. So as you saw earlier, here we have the context of set data, and then we take a data parameter as input, and then we can just do whatever we want to do with that data input parameter in the logic there. But everything is specified in this kind of program hook here. Is there a remix equivalent in Solana? Yes, you're going to see it in probably a couple of minutes, I think. So, in terms of the instruction data, like I said earlier, you can add it by adding arguments to the function that you're calling after the context argument.
00:24:48.900 - 00:25:45.320, Speaker A: And anchor will automatically deserialize the instruction data into the arguments. So if I go back here, you can kind of see where was it? Yeah, here's that example here where passing data unsigning to just 64 bit, it automatically gets deserialized. So the IDL file that I was talking about before gets generated when you build or compile a program with Solana. And it's actually kind of similar to an Ethereum Abi file where it's used by clients to be able to interact with deployed anchor based programs. And it basically says, what are all the input parameters? What are all the counts that are expected for each kind of function call? So here you can see an example. This is the IDL file for the program we looked at earlier. You can see there's this initialized instruction.
00:25:45.320 - 00:26:15.940, Speaker A: Was it called initialize? It's called set data there, but for some reason here it says initialized. It's expecting these accounts, and then these are the arguments that it's expecting. So this is a generated IDL file. Yes. Solana has a bit of a steep learning curve, but once you go through it and play around with it yourself, you'll find that it's not too bad, actually. And Anchor definitely makes things a lot easier. So let's go through an example program.
00:26:15.940 - 00:27:22.712, Speaker A: Now. Let's do a GM program, which is basically a simple hello world program that takes an input parameter of a name and then we'll say GM to it. So whoops, excuse me. So someone asked in the chat about a remix equivalent of Solana, and I pasted a link in the chat to what's called the Solana Playground ide, which came out recently and is absolutely amazing in my opinion, and a game changer for Solana. So this is an equivalent to remix, kind of where you've got an installed version of Solana, you've got an installed version of Anchor Et. Do your, you can kind of write your code here and deploy it to Devnet and then you can interact with it with your own clients and stuff like that. So we're going to create a new project here.
00:27:22.712 - 00:28:02.212, Speaker A: So the first thing you need to do is you need to generate a wallet for yourself, for Solana Devnet. Now, I've already done it here and you can see it's already given me some Sol automatically. But if you go to the bottom left, you can see it says connected to playground wallet. If you don't have this, you can just click on the link to generate a new wallet. And I think, let me just open in a new window. So if you go not connected, you go continue and then it will say connected to playground wallet. And if you click on the wallet here, you'll see you get airdrops and Sol.
00:28:02.212 - 00:28:27.660, Speaker A: So that's kind of how you do it if you haven't created a wallet yet. So we'll go back to my screen. So we're going to create a new project and in our case it lets you choose. You can choose a native rust program, an anchor based one, or a seahorse one. We're going to go with anchor example. So let's give it a name. GM soul.
00:28:27.660 - 00:29:35.892, Speaker A: Cool. Next. Give me a minute. No, that's not the right one. So next, what we're going to do is we're going to blow away all of the code that's in the example program and we are going to put in some new code and I'm going to go through it all now in the interest of time, I'm just going to paste it in and walk through it with everyone because I don't want to sit here typing for too long when we've only got limited time. So I'm going to share a link in the chat where I got this code from so that you guys and girls can play along at home if you want. Exercise two is where the code is from.
00:29:35.892 - 00:30:09.872, Speaker A: So I've just pasted it in and as you can see, it's anchor program. We've got the declare ID here. Let me make that a bit bigger for everyone. And then we've got our program hook here that says this is where all the program logic is very similar to the previous example we saw earlier. In this case we have a function called execute. The context is execute and it's taking in a string parameter called name. And the execute context that we're specifying here, we're defining it down here.
00:30:09.872 - 00:30:56.060, Speaker A: So we're saying whenever this execute context is used, we're expecting this GM account to be passed in, which is of type greeting account. And the greeting account type is defined here as just a struct with a string called name in it. Right? And these little hooks above here is actually saying this account that's passed in, we need to initialize it because it's an empty account at first. So we need to say create a new account. The person who's paying for the rent for this account is going to be the person that's signing the transaction. And the amount of space we want to allocate for this account is eight bytes plus 32. I think the first eight bytes is reserved and 32 is just me picking a random number that's going to be big enough to store any name.
00:30:56.060 - 00:31:50.508, Speaker A: So this is basically saying the first account that's passed in, we need to initialize it and pay some rent to Salana. And then we're also passing in the user, which is the person signing the transaction. We're passing the address of the system program as well in this context, because when you initialize accounts, you need to use the system program to do that. So that's kind of just pretty standard solana or anchor stuff. And yeah, that's it. Once the GM account is initialized, we are basically grabbing that account here and setting the gmaccount name value to the name that's passed in and in the console or program output, we're saying GM to that name and that's it. So the program is taking the name input, it's initializing this new account that's passed in, which once again can be thought of like a file saying hey, create a new file, give it this amount of space.
00:31:50.508 - 00:32:31.950, Speaker A: We're going to pay the rent now. And then once that file is created with this name that's passed in, we're going to store it in that file and then just spit it out to the program output. So I'm going to press the build button on the build tab and we'll just give it a says down the bottom it says build successful. Great question, Ayush. Is it resourceful to have a deep knowledge of development in both blockchains, Solana and Ethereum, meaning there are scenarios project which coding in both are needed. It depends entirely on what your preference is. So Ethereum and EVM is obviously the most popular way to go right now.
00:32:31.950 - 00:33:06.504, Speaker A: But you have ecosystems like Solana which definitely have their own kind of advantages over Ethereum. It's a much faster chain, it's cheaper, it's got a very big developer ecosystem. If you're a rust developer or, you know, rust, then it's a lot easier for you to get onboarded into something like Solana rather than Ethereum. And yeah, there's a lot of cool and exciting stuff that's happening on Solana as well. And the skills are transferable to other blockchains that use rust as well. There's a few others too. So yeah, if you can learn both, it's great.
00:33:06.504 - 00:34:08.410, Speaker A: But if you can't, then you just need to kind of pick which path you want to focus on first, I guess. Great question. So we've built our program. Now what we're going to do is we're going to try deploy it to Devnet. So we're going to press the deploy button and we're going to just watch the output at the bottom here. So while that's running, I'll talk about what we're going to do once that's done. So once that's done, we're going to create a client to interact with that deployed program and we're going to do that.
00:34:08.410 - 00:34:35.220, Speaker A: Actually, can you do it in? Yes, you can do it in Solana Playground. Actually, I've never done it in the Solana playground. Here. We'll try doing in here. And if it doesn't work, we'll do it in visual studio. So we're just waiting for it to be deployed to Devnet. There we go.
00:34:35.220 - 00:35:06.008, Speaker A: Successfully deployed now. So once it's deployed, you can go in this middle tab here, build and deploy. You can expand the program credentials and see here is your program ID here. And you can get the export the IDL if you want as well. So we have a program deployed to Devnet. How do we interact with it now? So we need to create a client to interact with it. I'm going to try create a client in Solana playground.
00:35:06.008 - 00:35:36.232, Speaker A: So new file client Js. Cool. From that same document that I shared. I'm going to grab the client code and I'm going to go through it with everyone. Let's make that a bit bigger. Let's see if this is going to work. Now.
00:35:36.232 - 00:36:39.628, Speaker A: So the first thing is we're saying that we're using the anchor JavaScript library and that's what these two lines here are, and we're setting the provider. This is basically just saying we want to use the Devnet environment here and in our client it's just a JavaScript function essentially that's going to interact with our deployed program. We have this main function here and I'm not sure if it's going to work here actually, because where do we have the idl file? Okay, I'm just going to try it first because I don't think it's going to work. Yeah, I don't think it's smart enough. Let's do it in visual studio code. So we've deployed our program on Devnet. We know what the deployed ID is here, we can literally copy it here if we want.
00:36:39.628 - 00:37:26.384, Speaker A: So now let's create a client. So I'm going to switch to visual studio code and let's create a new folder called EM. Let's switch into that a bit bigger for everyone. Let's initialize a new project with NPM. So we're going NPM init wire and cool. We have a package JSon. So the next step is we need to export some stuff from Solana playground.
00:37:26.384 - 00:38:18.612, Speaker A: So first of all we need to export our wallet details because we're going to use the same wallet to interact with it. So if you click on wallet on the top right and you click on these three dots, you can go export key pair. This will export your wallet key pair file so that you can then use it in your client. So we're going to save it here. The next thing we're going to export is we're going to also export the program credentials and it's going to be called program key pair. So we know where to connect to our program. And the final thing we're going to export is the IDL file that was generated.
00:38:18.612 - 00:39:28.432, Speaker A: So we're going to save all of them to the same folder. So if I go back here now, see I have an idl JSOn programkey pair JSon and a walletkeeper JSon. So I'm going to create one more file in here and I'm going to call it client Js and I'm going to paste the code that I had before, sorry, before we do that, I'm going to replace the contents of my package JSON with the one from the doc, which essentially says we're going to use the anchor JavaScript framework as well as this minimus one here for passing things on the command line and we're going to run NPM install to install those. We'll give that a minute to run. Cool. So that's done. So we're going to go back to our client, paste in the code from the doc and we'll go through it now.
00:39:28.432 - 00:40:10.108, Speaker A: So here we're saying we're using anchor, we're setting anchor to the provider, which is saying we want to use Devnet. We have our main function. So this is where we're going to reach out to our deployed smart contract and interact with it. So we're going to read in this IDL file that was deployed here and we are going to take the program ID from the command line when we execute the client because we know what it is from Solana Playground. We're going to set a name here. In my example I've just got Harry, but you can pass in a name parameter too if you want. And here we're going to create a connection to a program using the IDL file and the program ID.
00:40:10.108 - 00:40:47.716, Speaker A: So it's equivalent of ethers Js getting a connection to a deployed smart contract. Once that's done, we're going to use the anchor framework library to generate a new key pair to be used for a new account. Because remember we need to pass in a new account to say GM to and to store the GM name. It's going to log some output and then yeah, all we have to do is we have to go program RPC function name. And the function name we had was execute. Right. So execute we're going to pass in the string parameter and then we're going to pass in an accounts array.
00:40:47.716 - 00:41:19.556, Speaker A: And this needs to match up with what's expected here in the accounts hook here. So we're passing in that new GM account that we're going to store the GM name into. We're going to pass our own account and we're going to pass in the system program ID and that's it. That will send the instruction over. It should say GM to the person. And then what we're going to do is we're just going to read the contents of that account to verify that it actually stored the name in there. So this is what we're doing here.
00:41:19.556 - 00:42:02.928, Speaker A: We're saying program account greeting account. So it's looking for this fetch gmaccount public key. So this is that account that we passed in earlier to say hey, for this account that we have get the greeting account name value right. We're just printing it out here. Name so it's saying for the account that stores this data, grab the name that's stored and just spit it out to the console output. So that's pretty much it. Now there's a couple more things you need to do before you run it.
00:42:02.928 - 00:42:45.440, Speaker A: So when you're using the anchor JavaScript framework, there's a couple of environment variables that you need to set before you can use it. So the first one is you need to tell anchor what the RPC URL is to connect to the network. So in this case Devnet is what we're connecting to. And there's a free RPC endpoint run by Solana called API Devnet solana.com. So we're going to export anchor provider URL to that. And then lastly we need to tell them what wallet file to use to generate and sign these transactions. So we're going to say it should use this wallet key pair json, one that we grabbed from our Salana playground.
00:42:45.440 - 00:43:26.870, Speaker A: So we're using the same wallet there in our client. So once that's done, you should be able to run the client. So to run it you go node client Js you pass in your program ID and then the name parameter if you want. So in this case the program ID we can get from Solana Playground. So I'm going to grab it from here and paste it in the name. Cool, that's done. So you can see here's the program instructions.
00:43:26.870 - 00:44:13.480, Speaker A: Program log says Gm. Harry, if I go back to the smart contract here, you can say see here it says GM and then gmaccount name. So this is where it got that from. And then as you remember in the client at the end we actually just to double check things, we go to the account or the file as I like to call them, and we grab what's in there, turn it back into a string and print it out just to verify that it was stored. And you can see stored GM name is Harry and you can see here stored GM name is Harry. So yeah, that was the first example of using Solana Playground to create a new anchor program and deploy it. In this case just a simple one that takes a string and says GM to it and stores it in an account.
00:44:13.480 - 00:45:02.450, Speaker A: We deployed that to devnet using Solana Playground. And then once it was deployed to Devnet we switched over to vs code and we created a new project that used the anchor JavaScript library and we got a connection to that deployed program and we executed the execute function on that program passing in a string and as well as a new account to store that string in. So that's the first example that I've got for you guys. If you have any questions on that, feel free to ask in the chat. Otherwise, I highly recommend to try it yourself later on. I'll paste the exercise doc in the chat once again. Otherwise we will move on to the last section, which is another example using Chainlink price feeds.
00:45:02.450 - 00:45:58.406, Speaker A: So just quickly chain link data feeds alive on Solana Devnet. This is where you can get high quality pricing data for your applications on Solana, whether it's a Defi application, whether it's anything we've got. I think six or seven feeds live on Solana, as you can see, and they're quite easy to use. So if you go to docs chain link and go to Solana tab, they're all listed here. So data feed addresses here are the mainnet feeds, here are the Devnet feeds, and then there's some guides on how to use them on chain in your smart contracts and off chain from your front ends, from your JavaScript libraries, et cetera. So we'll go through one example of that now. But yeah, if you want to enter and try win the Salana bounty for the ten k bounty, you need to use these data feeds in some way.
00:45:58.406 - 00:46:47.480, Speaker A: In your application, you can use them on your front end that ends up they're making a state change somewhere in the back end you can use them in your rust code. It doesn't matter. As long as you use them in some way, you'll be eligible for the prize and as long as you have the smart contracts deployed on Solana. So what we're going to do for this example is we are going to use and pull what I call the Solana starter kit. So if you go to our GitHub repository, I'll share this in the chat at this chain link GitHub repository. There is a link here called Solana starter Kit and I'll paste it in the chat. This is a prepackaged anchor project.
00:46:47.480 - 00:47:47.830, Speaker A: There we go. This is a prepackaged anchor Solana project to show developers how to use chainlink on solana in the most easy way possible. So I'm going to copy the GitHub URL here and we will go back to our vs code and I'm going to go git clone Salana starter kit. Cool. Let's take a look at what's in here before we do anything. So to use this, you need to install anchor and you need to install Solana Cli. So Solana documentation.
00:47:47.830 - 00:48:56.324, Speaker A: So to install those, I'll share the install here Cli so you'll need to install these as prerequisites or share that in the chat and you'll need to install anchor as well. So anchor framework Solana. So here's how you install anchor too. So once you have those two installed, you're all set to go to use chain link data feeds on Salana. So if we go back to my vs code, what other blockchains is chain link data feeds available in? I think we're live on about 15 chains right now. So if you once again go to docs chain link, you can see there's a tab for Salana specifically. But if you go to EVM chains, it depends what service you want to use.
00:48:56.324 - 00:49:43.264, Speaker A: If you want to use data feeds, you can go and see all of the chains data feeds are live on. If you want randomness you can go to the randomness section and go to supported networks and you can kind of see all the networks there. And the same with API calls and automation as well. But for now we have ten minutes left. I want to just run through the program. So when you use chain link data feeds on Salana, you have to import this chainic Salana library here in your cargo optimal dependencies. So you can see we're already using anchor in this program here, but you also import the version 1.0
00:49:43.264 - 00:50:23.244, Speaker A: chaining Salana library and that enables you to use data feeds on salana. Once you've done that in your anchor program or salana program, you can import the library like this. Use chaining salana as chain link. And then all you really have to do is to use data feeds is call one of three functions really in this chainlink library. So in this case we show all three. So we call the latest round data function, the description function and the decimals function here. So the latest round data function takes in two parameters.
00:50:23.244 - 00:51:04.124, Speaker A: It takes in a chainlink data feed program account. So this is the account of the program that owns all the data feeds and then it takes in a specific feed address as well. So the first one is a static value that doesn't change. If I go to Solana using data feeds on chain anchor, you can see that you need to import the library there and just give me a minute. Yeah, so here's the program ID here for the data feeds program. It's static, it doesn't change. And then you just need to choose a data feed that you want.
00:51:04.124 - 00:51:49.704, Speaker A: So if you want SolusD, you pass in that as your second account here and that will get you the latest round data for that round. If you want the description of the feed, you can call the description function passing in the same two things, and it will return the description, such as Sol, USD, ETH, USD, et cetera. And if you want to know how many decimals, what the precision is of the data, you can call the decimal function too, and that will return that value there. So in this example program, we're calling all three, and we're literally just printing it out, the current price out to the screen. So very simple. And then we have a client that, very similar to our other client, it stores the chain link data feeds program ID. It takes in a feed parameter.
00:51:49.704 - 00:52:51.780, Speaker A: What data feed do you want to query from the list here? And like the other example, it just calls an execute function passing in all the relevant details, including the chain link program ID of the data feeds program and the feed that we want to query. And then it will just print the value to the screen. So let's try and run this now. How much time we got left? Eight minutes. So if you follow along with the guide in the GitHub, it pretty much tells you everything you have to do. So first thing you need to do is install all of the dependencies. When will VRF be available in Solana? Hopefully soon.
00:52:51.780 - 00:53:21.766, Speaker A: Solana is definitely a focus for us. However, we've spent a bit of time just making sure our price feeds are really bulletproof and as good quality as possible. But I do know that there's a lot of interest in VRF, and that's hopefully something that will come in the very near future. What's up, tippy? Cool. Okay, so that is installed. Let's see if we can create a new wallet file now. So Solana Keygen basically just lets you generate a new wallet file.
00:53:21.766 - 00:54:28.014, Speaker A: In this case, we're going to do an empty one, and the next step is to then airdrop ourselves some Sol tokens to it. So we're going to copy that command and it's going to run twice actually, to get us two, lots of two Sol, because each airdrop can only be at most two Sol on Devnet here, but we're going to take four because we're a bit greedy. So once that's done, we are going to try and build our anchor program. So we're going to run Anchor build, which is going to compile our program. And if you remember how, we need to have the correct program ID in here. Anchor's got this funny thing where you need to compile it once to find out what the program ID is going to be, and then you need to take the program ID and put it back in here and then compile it again. So it's just this kind of thing that you do in Anchor for now.
00:54:28.014 - 00:55:12.000, Speaker A: I don't know if they've solved it yet or not or done a better workaround, but last time I used it, that's kind of what everyone was doing. So once it's compiled, we're going to find out the program ID using this command here, and then we're going to throw that program ID back. So here's the program ID. We're going to put it in here in place of the old one. We're going to save that and we are going to build again. Can one use anchor to take data from an Ethereum project to use in a Solana project? No, anchor can't reach across chains. It's just for doing stuff on Solana itself.
00:55:12.000 - 00:55:57.706, Speaker A: To reach across chains, you need to use a cross chain protocol that can talk to both Ethereum and Solana, such as wormhole. But in the future chainlink CCIP will be able to do that. Cool. So that's compiled. So let us move on to deploy. So we're going to run anchor deploy, passing the Devnet cluster in to say hey, we have our compiled program, we want to deploy it to Devnet now. Where to check on new developments updates for Chainlink.
00:55:57.706 - 00:56:25.358, Speaker A: The best place to keep up to date with Chainlink is on our socials. I will share that in the chat share the chainlink Twitter account. That's definitely the best place to keep in touch. And if you're interested in interacting with me as well, feel free to follow me as well. I'll post my Twitter as well. And I'd love to follow everyone back. Cool.
00:56:25.358 - 00:57:02.918, Speaker A: So it looks like our program was successfully deployed. Let's interact with it now with our client that I showed you guys earlier. So once again we need to specify these environment variables again. So we need to say use this RPC endpoint here to connect to Devnet and our anchor wallet. Our wallet that we're going to use for the transactions is stored in this Id JSon that we generated. Cool. Once that's done, we can copy the code for the client.
00:57:02.918 - 00:58:22.160, Speaker A: So in this case it's dynamically grabbing our program address using this command here. And then we just say, what feed do we want to query? So which feed should we choose? Maybe we'll do Sol USD or paste this one here. Something weird happened, happened. Let me try again. It grab the command. Sorry, just give me a minute. Something weird has happened there.
00:58:22.160 - 00:59:52.960, Speaker A: Okay, let's try again. Did I deploy it correctly? Yes, I think so. It's saying the account is owned by a different program than expected. That's all right, I'll take a look at that. Let me try the off chain client next. So let's try the client that just reads the price feed data from off chain. That is the read data script here.
00:59:52.960 - 01:00:19.990, Speaker A: It takes in the feeds program ID and a data feed that you wish to query. And it listens for events on the program. So it listens for each time a round is updated on the price feed and it just prints it out to the screen. Cool. So that one works. As you can see, that must be the ETH USD price that's being updated. So every time the round ends, usually after a second or two, you can see that the price being updated.
01:00:19.990 - 01:01:01.910, Speaker A: I'm not sure why this one wasn't working, but I will take a look after this live stream because we're running out of time now and I'll update the description. Let's take a look at some of the questions. In order to build a front end, you would need the ID of the program and the IDL, right? Yes. So you'd need the IDL that we generated in Solana playground or in vs code. If you do it all in vs code, and you'd need the program ID because you need to put them into your front end code to say, hey, here's the program that I need to interact with. Here's the IDL file that says how you interact with it and kind of that's how you do it. I'll share some resources to help you out with that too.
01:01:01.910 - 01:01:33.262, Speaker A: Just in a minute. When will VRF be valuable in Solana? Hopefully very soon. Like I said, we know that there's a need for provable randomness on Solana. Keep up to date on the chain link socials to kind of find out. But let's just end things now by going where you can learn more. So there's this really cool site called Solana Cookbook that has a great collection of tutorials and guides for programming with Solana. I'm going to share that in the chat with everyone.
01:01:33.262 - 01:02:12.140, Speaker A: I highly recommend this one. It's really cool. Another place is Soldev, so this is kind of like an aggregated collection of guides and tutorials for Solana development from community contributors too. So you can even contribute something to this one if you want. So there's a lot of cool stuff in there recommend checking that out too. And the official Solana developers page at forward slash developers has a bunch of amazing content as well, from beginners to experts. Lots of guides, tutorials and some great handy guides there, so definitely recommend checking that out.
01:02:12.140 - 01:02:54.938, Speaker A: For more info on anchor the anchor framework, you should check out the anchor book which I pasted in the chat too. It's got a whole bunch of guides on using anchor. And once again, the Solana starter kit which we just looked at now, which is a pre packaged repository for using Chainlink on Solana, shows you how to do it, what libraries to import, et cetera. That's a great resource too. I'm going to share one more for everyone who wants to do a deeper dive on Salana. If you go to chain link bootcamp, we actually have it's an eight hour on demand Salana bootcamp that you can do at your own pace. So it's pre recorded.
01:02:54.938 - 01:03:23.074, Speaker A: There's a whole bunch of exercises and it runs for about 8 hours. So I pasted that in the chat too. If you want to do that, you should sign up. It's a really great resource. It assumes no prior knowledge and it will get you creating, deploying and interacting with Solana smart contracts as well. So that's it. Where else can you get help? You should go to our discord, ask us for help if you need if you have Solana specific questions, we've got the Solana discord here.
01:03:23.074 - 01:03:47.490, Speaker A: Solana.com forward slash discord. But yeah, other than that, I want to thank everyone for participating. I really hope to see some projects built on Solana, even if you think it's very simple or it's not finished, or you don't think it's cool. If you build something on Solana that uses Chainlink, definitely submit it to the hackathon. I'm going to be personally looking at all of them and I'd love to see some cool ideas. But yeah, other than that, thank you for listening.
01:03:47.490 - 01:03:58.380, Speaker A: I hope everyone has an amazing rest of their morning, afternoon or evening. And I hope everyone has a great rest of the fall 2022 Cheney hackathon experience. Thank you all.
