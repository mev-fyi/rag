00:00:00.650 - 00:00:18.478, Speaker A: It's going great, man. Yeah, there's like 3500 people signed up. It's pretty crazy. A lot of excitement. A lot of people excited about Ave too, always are, hopefully signed up. Awesome. Welcome everyone.
00:00:18.478 - 00:00:43.260, Speaker A: I hope you're all having a good morning and day, wherever you are. Always excited for this workshop 101 for developers. If you have questions throughout this, make sure to drop them into the YouTube chat. Also drop into the Ave support channel on the hackathon page and otherwise, David, I'll let you take it away.
00:00:44.590 - 00:01:11.058, Speaker B: Awesome. All right, thanks for having me. Yeah, welcome everyone. As hopefully some of you know, I'm a developer builder at Ave, so in this workshop I'll run through a 101 about Ave for devs. If you've been or seen my previous talks, it's pretty similar to those previous talks, but of course it's updated for v two and some of the newer features. All right. Yeah.
00:01:11.058 - 00:02:04.850, Speaker B: And as was mentioned, post your questions either in discord or YouTube and we can run through them a bit later. All right, so for those that know, aave is what we call a liquidity protocol. So what that means is at the center we have the Ave protocol contracts and users interact directly with the contract. So on the left hand side you see depositors. So they'll deposit some sort of asset like ETH or dai or various assets, and immediately they'll earn interest, percentage interest depending on certain parameters in the protocol like the utilization rate and things like that. And then on the other side we have borrowers, and borrowers, they are able to borrow at either stable variable interest rates and they can make those borrows instantly and also repay them back instantly. So quite different from a traditional bank.
00:02:04.850 - 00:03:04.360, Speaker B: All right, so here on this slide you can see, I think this slide actually is a bit outdated, but the TVL actually reached 5.5 billion in February 9 and we just went on main net last year, January 2020. So it's been a pretty crazy run up. There's various reasons why the TVO has grown so quickly, and also the liquidity, everything's increasing, which is quite cool to see. So the main protocol features of version two that I'll go over in this talk is earning, depositing, borrowing, and I'll go through each point in a bit more detail. Credit delegation, flash loans and of course governance. And the last three are probably the more interesting ones if you're planning to hack with our.
00:03:04.360 - 00:03:57.286, Speaker B: I did mention as well, we just released a new market, an AMM market. So previously we supported 20 something assets, so now we support even more assets. So yeah, if you have any questions about that, let me know. But the AMM market is a separate market from the Ave main market, where you can use LP shares from Amms like Uniswap, LP Balancer LP, and there'll be some other amms coming out soon, and you can use those as collateral. So that sort of helps with liquid financing in a lot of ways, and you can do some pretty cool things with that. All right, so what's new specifically in V two? If you've played around with V one and haven't really been introduced to v two yet, here's some of the new features. Bash Flash loans I'll go deeper into flash loans a bit later.
00:03:57.286 - 00:04:25.858, Speaker B: You can flash loan within the protocol tokenized debt. At the moment it's not transferable, but tokenized debt makes it a lot easier to know how much an account owes in the protocol. Native credit delegation, which I'll go through. Governance fee too. The governance is so that you can also delegate your voting power and proposition powers. And more importantly, we have very efficient gas usage in v two as well. And also we support.
00:04:25.858 - 00:05:11.840, Speaker B: So previously we only supported Ethereum, but now we only do wrapped Ethereum, so that should make it easier as developers as well. And another feature that hasn't really been hacked on much in various hackathons is EP 20 612 support. So that enables gasless transactions or single approved transfer transactions. So it'll be cool if someone probably created that or hacked on that in their project. I think you can do some pretty cool, interesting things with that. And that's all the a tokens in the protocol support that now. All right, so I won't go into too much detail here, because hopefully earning makes a lot of sense for those that haven't seen this, this is like Eli means explained like I'm five years old, and Eli 15 is explained like I'm 15.
00:05:11.840 - 00:05:51.340, Speaker B: But essentially you deposit into the protocol and we tokenize deposit and you receive a tokens in return and the interest is earned immediately. So you'll see your a token balance increasing per second, and the interest is accrued directly in the a tokens and compounded. So you can just deposit and just earn interest. You don't really have to do anything else about that. So that's one way where you can add value to your users quite quickly and easily. As a developer, this is what you do, so it's quite simple. So it's quite simple.
00:05:51.340 - 00:07:01.550, Speaker B: The top lines, let's say the first five lines you would do for other functions as well. But the important line is at the bottom where you just call deposit on the length pool and you say which asset, what amounts on behalf of the on behalf of part is related to credit delegation. So you can deposit on behalf of someone else if you wanted to, and you can do some cool hacks and projects around that, because essentially you're giving someone else, you're depositing for them on their behalf. So then they will get that collateral value under their account, which can be cool, and the referral code, which hasn't been fully implemented yet, because that should happen via the decentralized governance. But eventually you'll be able to get credit for adding liquidity to the ave protocol. So that could be through your own product or your service, you can get some sort of kickback from that, which is pretty cool. And of course, eventually maybe all your users want to withdraw the tokens.
00:07:01.550 - 00:07:34.182, Speaker B: So get back the underlying ERC 20 token. So you simply call withdraw on the lending pool. So one of the things with Ave V two is that probably nearly all your state changing transactions will happen against the lending pool. So that simplifies it a lot. So you sort of really only need this one lending pool address and then yes, so you can withdraw to the message sender, or you can withdraw it to another account. Really up to you. Yeah, un minus one.
00:07:34.182 - 00:08:18.730, Speaker B: That's just like a maximum amount. So you can just withdraw the maximum. I think in the latest solidity we don't use un minus one anymore. I think it's like type max, something like that. With borrowing, hopefully it's quite easy to explain as well, but essentially we're a collateralized protocol. So for every borrower that's made, there needs to be a certain amount of collateral backing that. So the process from a user perspective was that you would deposit, let's say dai, or deposit your funds in there, and then you receive the A tokens, and that a tokens represent that you have a collateral position in Ave, and from that you're able to borrow assets.
00:08:18.730 - 00:08:53.778, Speaker B: You can borrow ease at a stable or variable interest rate. One thing I forgot to mention in the previous slide, with a token specifically, it's one to one pegged. So what that means is that for every one a token, there's always one underlying asset. So if you deposit one die, you get one a token in return, and a few minutes later it might be 1.1 a die, which means if you withdraw it, you'll get 1.1 die as underlying. So with the stable and variable interest rates, this really depends on the use case variable interest rates.
00:08:53.778 - 00:09:36.034, Speaker B: Hopefully that makes sense. It changes. It's quite variable, stable. You can essentially lock in the interest rate at a time, and that works quite well with certain yield farming activities, in that some people, when utilization is quite low and the stable rate is quite low, they can lock that in and then they don't have to worry about volatility of the interest rate. So I think there's quite a lot of usage of stable interest rates these days for borrowing. If you're implementing this, once again, it's similar to the depositing method. You simply call borrow on lending pool and you pass in the asset amount the interest rate mode that you want, either like a zero or one that represents stable variable interest rate.
00:09:36.034 - 00:10:15.822, Speaker B: Your referral code, like I mentioned before, and then also on behalf of, so on behalf of here, is also related to credit delegation. It's quite interesting because you can borrow on behalf of someone else. Of course, for you to do that, they need to approve of the delegation. They need to approve that you can borrow on their behalf. I'll go through that a bit later in the credit delegation section. All right, so for borrowing, sorry, if you need to swap your interest rate, it's very simple as well. You just call swap borrow rate on the lending pool, and you just say what interest rate you want to swap to.
00:10:15.822 - 00:11:05.600, Speaker B: Just keep in mind that if you're doing that for your users, or when the users are doing that, if they swap, say from, if they have a really good stable interest rate, then they swap to a variable interest rate, they'll get that new variable interest rate. And then if they want to swap back to the stable rate, they'll swap back to the current stable rate. And sometimes the current stable rate might be quite high. So just make sure that the users, or you're aware of that when performing those actions. Of course, eventually you have to repay back your loan. So similarly, you call approve on the lending pool, so the lending pool can take those funds, and then you call repay on the lending pool, passing in the parameters. And of course you can repay on the behalf of someone else.
00:11:05.600 - 00:11:36.860, Speaker B: So if for whatever reason you wanted to reduce someone else's debt, you can do that. And there's some interesting sort of hacks that you perform with those sort of things. All right, sorry. The sun's layering in my eyes. So next we have credit delegation. So for credit delegation, I'll go through this a bit more slowly so it's easy to understand. So we let other people, if I was explaining to a five year old, I'd say that you're letting other people borrow money.
00:11:36.860 - 00:12:36.766, Speaker B: If I was explaining to a 15 year old, I'd say that you deposit to earn an ave and you earn extra by managing your own loans to other people, sort of like your own business of lending out money. And then to a Defi person or defi native, I'd say that you're giving others access to your credit line by depositing funds on Aave you approve a user. You can also approve many users if you want to draw a credit line, and then they can draw up to that credit amount in their own time whenever they want. The important thing here is that let's say you approve. So each user will have their own approval limit. But let's say if you have $100 worth of credit to give out, but you also approve like five users to have $100 worth of credit, then the first user that uses up $100 worth of credit, the rest won't be able to get access to that line of credit. Hopefully that makes sense.
00:12:36.766 - 00:13:37.374, Speaker B: Once you start looking or implementing this, it should be self explanatory, but I think that's something that some developers have run into. So on your front end, you'd probably want to manage, or you want to show at least how much of the credit line they have left. So if they're delegating to multiple people, they're aware of that. And of course, enforcement of repayment can happen on chain or off chain. So, because from the protocol perspective, it's just like a normal deposit and borrow, except that the person that deposits, it's not necessarily the person that borrows. So once the position becomes in danger with a health factor of less than one, that's when the liquidators come into play, and the liquidators will liquidate that loan and receive the collateral bonus. So the person that delegates the credit, they take on that risk.
00:13:37.374 - 00:15:02.538, Speaker B: So normally, if you're doing this as a consumer business or b two B business, you would have maybe a smart contract in between that can, there's some consequences to the borrowers if they don't repay, or some off chain agreements, like a legal agreement, or maybe they use some off chain asset as a collateral type. And this is probably quite related since it's a chain link hackathon. The thing with this is if you had an off chain agreement, or even on chain agreement, you'd want to have a good source of pricing data for whatever agreements you make with these credit delegations. So let's say someone puts up their house as collateral, you need some accurate ways to price that house and bring that price probably on chain because you'd want to claim certain rights if the position becomes in danger because you have your on chain collateral at risk. All right, the process for this is essentially you get the token addresses. We have something called a protocol data provider. That's probably the easiest way to get the addresses.
00:15:02.538 - 00:16:00.426, Speaker B: So you'd get whatever certain debt you want to hand out. So you can decide to delegate to someone a stable debt, so they're allowed to draw the credit line with a stable interest rate, or you can delegate it with a variable interest rate, so you approve those addresses to do that action, which can be cool, because maybe you only want people to take out stable debt. So you can do that if you want. And then on the particular debt token, because debt is tokenized in Rav two, you call the approved delegation method. And that's similar to like the ERC 20 approved method. You just pass in the borrower and the amount in way, and then it works sort of just similar to the other borrow methods. So on this last line here, you just say you call borrow on the lending pool, pass in the asset.
00:16:00.426 - 00:16:44.750, Speaker B: The amount interest rate referral code, and then on behalf of is an important bit. So let's say if I delegated to someone, that someone would have to pass in my address as the, on behalf of, if they're calling from their address. And anyone can repay delegators debt. So you can repay that debt, because maybe you created that credit line, or someone else can create it. Maybe you have a Dow and people will contribute their funds to pay off credit for whatever reason. But yeah, there's quite a large design space here for you to experiment with in various use cases. Of course, the important part here is the delegate address.
00:16:44.750 - 00:17:35.950, Speaker B: So you want to pass in the original person that gave the credit line. That's what you're repaying. All right, so for flash loans, hopefully you've heard about this over the past year or two. So flash loans, if I was explaining to a five year old, I'd say that it's free money, you can have to pay back nearly immediately. If I was explaining it to like a bank of type or from traditional finance, it's essentially unsecured fixed term loan for about 15 seconds, which is a block time of 14 seconds, which is a block time of ethereum currently and with a very low fixed interest rate of 0.9%. This fixed interest rate is governed by the RB governance, by the way, and the bank, in this case the ave protocol or the theorem blockchain, can always collect at expiry. So there's essentially no risk on the protocol perspective.
00:17:35.950 - 00:18:22.910, Speaker B: And for the Defi natives, what it actually is, is an uncollateralized loan. So previously we talked about collateralized loans, and credit delegation is a form of uncollateralized loans as well. But there's still some collateral backing it. With flash loan specifically, there's no collateral backing it. And the reason why is because we give you that flash loan, and it must be repaid within the same block, and if it's not repaid within the same block, then the transaction is just reverted, and then it's like nothing ever happened. So hopefully you have some experience with the EVM and you've experienced, I guess, reverted or failed transactions. That's what essentially will happen if you don't repay back the flash loan amount plus the small fee.
00:18:22.910 - 00:19:11.934, Speaker B: Here's a diagram. I won't spend too long on this. This is an example where the borrower or the smart contract interacts with the protocol calls flash loan. They receive the flash loan amount, they do some interesting things on a CDP, and then they do some other interactions on a decentralized exchange. And then maybe they make a profit, or they convert some amounts, and then they have enough money to pay back the flash loan debt. And the important part of this diagram is that everything above the purple line will happen on chain or will happen permanently on chain. So whether or not the flash loan transaction succeeds or fails, you'll pay the associated gas costs of that call, and then everything below the purple line can get reverted if the flash loan isn't paid back.
00:19:11.934 - 00:19:57.290, Speaker B: So you can do some quite interesting use cases here, say, like no loss arbitrage, where essentially only if something is profitable, then it goes through. If it's not profitable, then you won't have enough funds to pay back the arbitrage opportunity anyway. So you can just reverse. Of course, as developers, when you're building stuff like this, you have to think about the associated gas costs, because even if the transaction fails towards the end of the transaction, you're still incurring that gas usage. So keep that in mind, especially in these days with gas costs so high. So here's something I made a year ago, collateral swap. So it's essentially that previous diagram.
00:19:57.290 - 00:20:50.460, Speaker B: It takes a flash loan, it closes down a makerdao vault. It takes the collateral behind that makerdao vault, it sells it on uniswap for some other asset, in this case USDC. Then it takes that USDC, and it pays back the flash loan. And then essentially you're releasing your collateral from under that makerdal vault. So this is powerful because you can see there's like a bunch of transactions that happen in the one atomic flashlight transaction. So in a way this is better for ux, for the users, it can save small amounts of gas or transaction costs. But the main thing is that you're just doing multiple things in one transaction and you're not capital constrained in those actions, which can be pretty cool.
00:20:50.460 - 00:21:38.890, Speaker B: And then like I mentioned, there's the Dex arbitrage as well. Essentially buy low somewhere and sell higher, you're not constrained by capital. So there's been flash loans like these sort of arbitrages. It's like millions of dollars, and they make some pretty good profit in those cases. Then I mentioned also in v two, there's batch flash loans as well. So what batch flash loans are is essentially you can flash loan multiple different types of asset in the same transaction. So this is also a huge design space that I haven't seen much yet, but it'll be cool to see that you can borrow a ton of different assets, do whatever activities you need to do with them, and then just pay them back within the same transaction.
00:21:38.890 - 00:22:04.778, Speaker B: So maybe there's some yield farming type of activities that you can do. In that case. As a developer, this is the way you'd implement it. It's a bit more involved than the other concepts. So this can only be done through a smart contract. So you'd have your smart contract you inherit from the flash loan receiver base. We have some of these examples in our docs.
00:22:04.778 - 00:22:53.810, Speaker B: So you of course instantiate your contract. But when you call the flash loan function, essentially what you're calling is, you're saying the receiver address is this contract. This is the contract that will receive the flash loan amount that you request. You say how many assets? Or you basically list out all the assets and all the amounts that you want to flash loan, including the modes. So this is another v two feature actually, is that the modes, because I mentioned before, you can take a stable rate or variable interest rate. With flash loans in particular, you can do zero, is sort of the normal v one flash loan. If you take a flash loan with a stable or variable interest rate, that essentially means it's a debt incurring flash loan.
00:22:53.810 - 00:23:47.298, Speaker B: So conceptually why this is interesting is that you can create margin positions in a flash loan. So essentially you can have someone flash loan some amounts, let's say a million dollars, deposit that million dollars into rv, and then borrow some funds from that. So they sort of leverage sort of one transaction leverage trap things, you can do that or instead of having to deposit first and then borrow, essentially you're borrowing and then depositing after. So it reverses that flow. And then these parameters like the other ones, then essentially you call a flash loan on lending pool, pass in the parameters. The lending pool contract will do its sanity checks. And if everything checks out, it will call back into your contract and it will always call this function signature.
00:23:47.298 - 00:24:22.490, Speaker B: So you have to make sure it's exactly like this. There's samples on this contract on our docs, rba.com that you can look at. So we'll call execute operation. And then if the EVM gets to this point, that means you've got whatever assets that you've requested to flash loan. So here you can just assume that you have whatever million dollars or whatever amount that you wanted to flash loan, you do whatever you need to do. And then the last step is that you just approve that the lending pool can pull those funds, so then it can pay back the loan.
00:24:22.490 - 00:24:49.400, Speaker B: This is a bit different, quite different from version one. In version one, flash loans, you had to actively send it back to the lending pool. So here now it's not a push pattern, it's a pull pattern. So the lending pool will pull those funds back. All right, so I'll try and not spend too long on this governance. Hopefully everyone understands decentralized governance. It belongs to everyone.
00:24:49.400 - 00:25:23.454, Speaker B: Of course, the ave token is what's important in ave governance. And we've taken a progressive decentralization approach. So more and more of the protocol, actually a lot of it is actually governed by the AAvE holders now. So here's a little diagram. We also have our governance stocks you can go through. That can be interesting. But the important part here is that there's governance tokens like AaVE and stake AaVE, and also there's a long time lock and a short time lock.
00:25:23.454 - 00:26:05.934, Speaker B: So what that means is that for certain governance changes, it goes through the longtime lock, which means that it will take a long time to implement. It needs more votes and various other things, whereas certain proposals can pass quicker in the short time lock. So that can be cool. If you're building something related to governance, making proposals, you can also delegate your proposal power separately from delegating your voting power. What this enables is you can have protocol politicians that only submit proposals and then the voters can retain their voter rights. So that's quite different from any other governance system out there. This code is also open source.
00:26:05.934 - 00:26:49.200, Speaker B: So I would recommend, if you want your creation protocol, you can fork the Aven governance as well. This is an example of governance in action. So Charlie from curve team, they posted on the forums and then Julian also from the curve team posted on Twitter to say, hey, delegate me proposal power, or delegate this address the proposal power. So then we can make the proposal. They got enough delegation per power. The proposal passed because it went through the voting on chain voting and then now it's in the protocol, it's listed and this was, screenshot was taken a while ago, but at that time they had like $8 million in liquidity and whatever else. So that's how all the asset listings actually happen now.
00:26:49.200 - 00:27:51.250, Speaker B: So you could also create, if you maybe have an interface around making it easier for users to submit proposals or get delegation power and things like that. So if you're implementing this on your end, what you need is essentially each governance token, like the RV token and stake RV token. There is a delegate function on it. So you just call delegate and you delegate to whatever address that you're trying to delegate to this delegation method, that by default it delegates the proposition power and the voting power. There's separate methods for only proposition only voting power as well that you can do to submit a vote. You just instantiate the governance contract, you input the proposal id and you put what vote they're doing and then you just call submit votes. So quite simple in that case as well.
00:27:51.250 - 00:28:18.966, Speaker B: So maybe you want to build that governance voting interface. I know some teams have gone down that path as well because a lot of protocols are starting to do this decentralized governance thing. So that's also an idea. And then of course with governance and staking as well, that's another new feature. Just beware of time. So I'll try and go quickly through this. We implemented the staking.
00:28:18.966 - 00:29:03.350, Speaker B: There's a lot of fun things of staking. That's basically protecting the protocol. But from a developer perspective, if you wanted to implement this as like an interface or supporting it somehow, essentially what you need to do is you just approve the lending pool on that token, which is the Ave token, and then on the stake Aave token, you call it the stake method. And then over a certain period of time the users can claim their rewards. That's essentially getting the extra interest that they earn from that. And then if they want to withdraw it, there's a cool down period. There's more details about this in our docs.
00:29:03.350 - 00:30:37.266, Speaker B: The important part here, I would say, is that it can be pretty cool because it's another way for your users to earn interest. So besides earning standard interest from depositing in the protocol, they can also earn interest by staking Ave in the protocol, and then they'll get sometimes a bit high interest. But also recently we implemented a balancer pool token, so it would be cool if someone could create something, because at the moment you basically become an LP on balancer with AavE and Wif, and then you get that LP token and then you can use that LP balancer token to stake in the Aave safety module and you earn quite a lot of interest from the staking module, but also you earn transaction fees from the balancer LP pool and then also you earn balance server rewards as part of the liquidity program. So the interest rate on the staked ave balance of pool tokens is pretty crazy high. Not many people have been building in that space, but you can probably create some cool things now and then. Finally the last bit, I'll go over some examples to hopefully help you with your creativity and some ideas that we like. So defi saver, they're quite large now, but previously they use our flash loans under the hood.
00:30:37.266 - 00:31:11.300, Speaker B: I think they still do for all their automations. So Ave is one part of their protocol, but they implement it with compound and maker and reflex and all these other protocols. And they really make it easy for users to switch between protocols, get better interest rates or whatever else. So that's super cool. For a combo app, they essentially made flash loans, rv flash loans a lot easier to use for non technical users. So you just drag and drop these Lego blocks. Then you can perform a flashline, which is quite powerful for non technical people.
00:31:11.300 - 00:32:04.194, Speaker B: Un finance under the hood, I mean under the hood previously for their version one a link fault, they also utilized the version one of credit allocation, which allowed their interest or yield strategies to actually get more yield because they were able to use credit delegation to have access to more funds. So that's also a very cool thing if you're planning to build something in the sort of defi farming yield farming space. And then of course Ave Gotchi, they recently launched. Very cool. I give them an example because they're combining NFTs and Defi and it's really cool, check it out. But yeah, they came out of a hackathon and now they're on main netic polygon network. But that's a really cool combination of different things.
00:32:04.194 - 00:32:34.574, Speaker B: I think they also use actually chain link VRF for the provably random part of their protocol. So that's the end of the setback. Here's some resources. So this discord is our community discord. I'll also jump into this hackathon discord, so you can ask me questions there as well. The dev docs, that's probably the most important thing. I'd recommend you check that out as well.
00:32:34.574 - 00:32:41.230, Speaker B: But yeah, let's open it up to questions. Keenan.
00:32:41.570 - 00:33:00.710, Speaker A: Yeah, thanks a lot, David. Really appreciate you taking the time and doing that presentation. So we have a few questions here. What other typical reasons would someone use a flash loan besides arbitrage? Or would you say that's the main reason someone would use these applications?
00:33:02.170 - 00:33:54.882, Speaker B: Yes, like I mentioned, flashlights can be used for arbitrage, or they can also be used for making things easier in defi. So for example, let's say we use it under the hood as well in the aave, let's say, app for swapping collateral positions. So let's say if you've taken out a loan, but then now that loan is becoming quite expensive because the interest rate suddenly jumped up. So it can either be the debt interest rate jumped up, or maybe the deposit interest rate has changed and you can swap to a more favorable position, like with one click, we can swap that and powering that have flash loans. So there's quite a huge design space there. Yes, it goes far beyond arbitrage.
00:33:55.026 - 00:34:01.500, Speaker A: You guys were able to use flash loans for transferring from the lend token to ave token too, right?
00:34:03.470 - 00:34:17.758, Speaker B: No, not in that case, because that was just like a straight smart contract migration. But from version one to version two positions, we use flash lens. So in version one, people had various borrow positions and whatever.
00:34:17.844 - 00:34:18.238, Speaker A: Right.
00:34:18.324 - 00:34:25.782, Speaker B: We could easily just move it over to version two of the protocol because they were separate contracts. So yeah, that's another good example of flashlights.
00:34:25.866 - 00:34:43.640, Speaker A: Cool. The other question here, see where it went. So how does Ave update and increase your a token balance so quick every four to 5 seconds? What's kind of the process that's happening there?
00:34:45.770 - 00:35:14.290, Speaker B: Essentially when you call the balance of method, it calculates it on the fly. I think with version two it's a bit different from version one. Version two, there's like a scaled balance of. In our dev docs we go into a lot more detail when you can work out like the interest earned and things like that. But it's a combination of a few pieces.
00:35:15.750 - 00:35:28.310, Speaker A: Cool. And then any insights to any layer twos that are coming to Ave?
00:35:31.290 - 00:35:41.980, Speaker B: That's a very good question. The question we get many times, nothing to share at this moment. I'll leave that to the official ave channel to do it when it's meant to be done.
00:35:43.630 - 00:35:55.790, Speaker A: Great. And then one more question. Can you briefly explain kind of what's the difference on compound interest? Or has compound interest work for the lending pool on Aave?
00:35:57.570 - 00:36:03.742, Speaker B: Compound is interest or compound the protocol? Interest compound the protocol, yeah.
00:36:03.876 - 00:36:18.310, Speaker A: Compound interest, yeah. I'm not sure impal exactly what you mean here, I think. How are the interest rates calculated on a lending pool? Can you just kind of explain that for someone who might be new to AaVE?
00:36:19.370 - 00:36:48.480, Speaker B: Yeah, if you're brand new. So the interest rates, the calculation involves a few parameters. So depending on the type of collateral or type of asset it is, some assets have higher risk profiles than others. So that affects the interest rate, but more importantly is utilization. So we actually have docs rba.com risk. Our risk docs actually go into details for the mathematics and stuff about this.
00:36:48.480 - 00:37:18.874, Speaker B: But essentially, let's say if an asset is being borrowed and it's like above 80% or 90% utilization, then the interest rates will shoot up really high. So it makes it more expensive for borrowers to hold those borrows, but also incentivizes more liquidity to enter the system. And that's a dynamic process, right? So then as people close their payback, their borrows, hopefully the interest rate goes down a bit. But then if the interest rate remains high, like it sometimes does because of yield farming, it attracts more liquidity into.
00:37:18.912 - 00:37:51.090, Speaker A: The very, very interesting stuff. And then I guess to wrap this up from your perspective, ave always impresses me in hackathon that your sponsor are participating in, and you always have some of the coolest DeFi projects that are building with you and your team. All in all has always done a fantastic job. But what have been some of your favorite applications of a tokens in implementing AAVE into hack projects?
00:37:54.870 - 00:38:28.080, Speaker B: I feel like they're all my children and I love them all equally. But I'll say the projects I've been most impressed with are the one the hackathon projects that continue after the hackathon. So like Avagotchi is like an easy example just because they came out of some hackathon and then now they're like on main net and they have a treasury. Their treasury. I think last time I checked it was like $15 million or something. That treasury, because they created the go tokens. Besides the treasury stuff, it's also like a really cool game and it's smooth process and it's actually really cool.
00:38:28.080 - 00:38:49.720, Speaker B: And then there's some other things where people are also a bit not as far along, but another one is like good ghosting, which is similar where they have like an NFT and gaming and helping people save money. Those sort of things are really cool in that they keep sort of grinding, pushing along.
00:38:51.450 - 00:38:52.774, Speaker A: I love that answer.
00:38:52.972 - 00:38:53.478, Speaker B: Cool.
00:38:53.564 - 00:39:21.082, Speaker A: Well, David, really appreciate you taking the time. Everyone that's listening in hope that was useful and learned something new. Again, the best hackathon projects are the ones that keep working hard and good things come. We saw that also with a former Chainlink hackathon project yesterday that raised a bunch of money. And yeah, you could be next. So if you have questions, hop into the ave discord. Hop into their channel on the chainlink discord.
00:39:21.082 - 00:39:25.070, Speaker A: And yeah, reach out if you have any questions. And thanks again, David.
00:39:27.090 - 00:39:28.638, Speaker B: Thanks so much. Cool.
00:39:28.724 - 00:39:29.740, Speaker A: See you. Thanks.
