00:00:10.570 - 00:00:56.682, Speaker A: Now that we have the owner set up, we can modify our withdraw function to make it so that only the owner can actually call this withdraw function. So at the top of the withdraw function, maybe we want to add a section. Maybe we want to say require message sender equals the owner. A note about double equals versus equals. You can think of this single equals as a set parameter. So when I say owner is now set to message sender, double equals is how you check to see if these two variables are equivalent. So we're saying is message sender the same as owner? So this is checking to see equivalence.
00:00:56.682 - 00:01:29.362, Speaker A: This is setting, checking to see equivalents setting. So we're going to say require message sender is equal to owner. Otherwise we're going to throw an error saying sender is not owner. Perfect. Now we have a quick way to make sure the withdraw function is only called by the owner of this contract. Now let's say that there's a lot of functions that we have in this contract that are going to be required to be the owner. Maybe there's a lot of functions in this contract that need a whole lot of different requires.
00:01:29.362 - 00:02:03.406, Speaker A: We don't want to have to copy paste this line to every single one of our functions. So what can we do? Well, this is where something called modifiers come in. So for now we're going to go ahead and delete this line. And below we're going to create something called a modifier. Our modifier is going to be a keyword that we can add right in the function declaration to modify the function. With that functionality, we're going to create a modifier and call it only owner. And we're going to paste that line that we just made in withdraw.
00:02:03.406 - 00:02:59.570, Speaker A: And underneath it we're going to put a little underscore. What I can do now is I can take this only owner modifier and stick it in the function declaration of my withdraw function. So what's happening with this modifier? With onlyowner in this function declaration, we're saying, hey, for this withdraw function, before you read all this code inside of it, look down at the only odor modifier and do whatever is in there first, and then do whatever's on the underscore. This underscore represents doing the rest of the code. So now when we go call the withdrawal function, we actually do this require statement first and then call the rest of the code. If this require statement were below the underscore, this would tell our function to go ahead and do all this code first and then run the require because again, we have this only keyword. We're saying, great, we've got a function.
00:02:59.570 - 00:03:10.902, Speaker A: It's withdraw, it's public. Oh, only odor modifier. Let's look at how that works. Okay. It tells us how to do all the code of the original function first. So let's go ahead do that. Okay, now we're done.
00:03:10.902 - 00:03:22.110, Speaker A: Now what do we do? Okay, now we'll run your require. We want to go ahead and put the require here first. So this is how modifiers work and how we can use them to improve our functionality.
