00:00:01.770 - 00:00:56.638, Speaker A: Sweet. So I really want to thank both the chainlink, the conflux and the greater just blockchain community for joining us today. In addition, really honored and excited to have Aaron Liu, head research engineer at Conflux, joining us, as well as Patrick Collins, a developer advocate for Chainlink, joining us today. The goal of this Q A to allow the community to learn a little bit more about the integration between Conflux and Chainlink and also explore what makes this integration unique and beneficial for both teams, as well as we're going to explore a really exciting use case that Aaron put together a proof of concept of taking SMS messages and being able to connect to web three through smart contracts using chain link oracles. So it's a proof of concept that's never been seen before. It's really exciting, it's live, it's working. We'll drop the links into the description below.
00:00:56.638 - 00:01:42.366, Speaker A: So if you want to contribute and help work on this as it's going forward, definitely feel free to look at that repo and reach out to Aaron and contribute. So a little bit about the setup the first 20 to 30 minutes. Aaron is going to present a demo walking us through the architecture of the smart contract deployed on complex network that's using chain link oracles and then uses an SM gateway from the Twilio API to create an onchain interaction via SMS. And I just want to say, like a few reasons why this is so important and intriguing. So Aaron did a little bit of data research. In South Korea, 95% of people have smartphones in the United States. This is kind of surprising for myself.
00:01:42.366 - 00:02:44.980, Speaker A: 85% of United States have smartphones and in Nigeria, around 40% have smartphones. So if we want everyone to use web three and get more and more people using decentralized applications, we really need to have some sort of bridge that connects people that are still using non smartphones to have these web three based application capabilities. And so that's why this proof of concept is really cool and thinking really outside the box of other ways that you can use chain link oracles and connect it to whatever blockchain that you really want to be building on top of, followed by this. We'll do a Q and A. So if you have questions again, feel free to drop them in the YouTube chat. We'll be monitoring that and we have a few preloaded questions that we'll be asking Aaron, if we don't get to your question, definitely come to both the chainlink and complex social channels. We'll get to them as soon as we can feel free to drop them in telegram or Reddit or wherever suits best for yourself.
00:02:44.980 - 00:02:51.122, Speaker A: So without further ado, Aaron, do you want to maybe just introduce yourself a little bit to everyone?
00:02:51.256 - 00:03:26.880, Speaker B: Sure. Just clarifying. I'm not the head research engineer, I'm just a research engineer. That's someone else's title that I don't want to steal. But yeah, I'm a research engineer. I just get to basically work on various integrations with Conflux Network and other parts of the web three technology stack, and just get to demonstrate really cool new ways that we at Conflux network are looking to build out the space and just help drive adoption in the greater public.
00:03:27.730 - 00:03:41.666, Speaker A: Cool. Yeah. Maybe before we get started, too, with a demo, do you want to maybe just explain a little more about conflux network and maybe just a little bit about how everything works there and maybe how it's a little different than Ethereum and some of the other blockchains that you might see?
00:03:41.768 - 00:03:42.420, Speaker C: Sure.
00:03:43.190 - 00:04:53.980, Speaker B: So Conflux Network is a proof of work network based on DAG structures. So dags are directed asyclit crafts. So we're using that technology to basically string together various blocks that miners can contribute to in a way that's way more efficient, where we don't have to discard any blocks, and then all of that still gets connected together in a coherent tree structure as our chain. So this, compared to Ethereum, basically that means we can process transactions a lot faster. And then if you assume the same amount of energy is going into or energy or resources is going into powering Ethereum, and that's going into powering conflux, basically we're able to have our transactions cost less because we're able to facilitate way more transactions. So we decided to stick with just the proven factors that you've seen in bitcoin and Ethereum with proof of work and smart contracts, but to be able to do it in a faster and more efficient way.
00:04:56.830 - 00:05:10.730, Speaker A: Cool. Yeah, thanks for sharing that. We'll probably get to this afterwards, too. But what was your experience like working with Chainlink and integrating chainlink for this proof of concept? And how did that kind of come about, and how did the idea spark?
00:05:10.890 - 00:05:54.560, Speaker B: Yeah, so I think the idea sparked just, like, seeing how Chainlink could connect with basically any source of off chain information, and then off chain could just mean, like, not on complex network. So that was one of the really cool things where working with Chainlink gets to unlock basically endless possibilities. And then it was also really good working with the two of you and getting to indirectly connect on the discord, which has a huge community and it's super well supported. So it was just really good to get to build something together.
00:05:57.410 - 00:06:09.682, Speaker A: Cool. Yeah. Thanks for sharing. So I think without further ado, we'll get into the demo. Do you maybe want to just give a brief outline in your own words of what the demo is and kind of your thoughts around it?
00:06:09.816 - 00:06:10.500, Speaker C: Sure.
00:06:11.110 - 00:06:49.040, Speaker B: So it's really definitely a proof of concept. There's not a whole lot of functionality built on the SMS or the smart contract end, but basically the demo will show the process of connecting the external initiator that links with a chain link node, and then it's able to facilitate calls from a smart contract event all the way to an SMS being sent to my phone and then being able to send an SMS message back and having that go all the way back to complex network and trigger a transaction there.
00:06:50.290 - 00:07:02.020, Speaker A: Cool. All right. Yeah. So we pre recorded this demo. So I'm going to share my screen here and we can check out how it works.
00:07:05.590 - 00:07:34.640, Speaker C: All right. So this is a demo of using text messaging. So SMS communication to communicate with on chain smart contracts on complex network. And that's facilitated by Chainlink. So I will be working out of this repository that you can see on your screen. And this code is publicly available. So feel with it, fork it, keep building it.
00:07:34.640 - 00:08:06.418, Speaker C: I think it's a really cool start, but there's definitely a lot more potential to it. So let's get started. First, we'll take a look at this diagram right here. So like I said earlier, we'll be working with Conflex network, Chainlink, and also SMS. And then so on the conflux network side, it's really just a smart contract. I'll go into a little more detail on what the demo smart contract does, but think of it as any smart contract. And then for the SMS side, I'm using a Twilio gateway.
00:08:06.418 - 00:08:23.920, Speaker C: So a Twilio API that I can send SMS messages to, and then it'll get passed on to be able to be read by chainlink. And then the components on the chainlink side is an external initiator. So this allows a smart contract to trigger a run.
00:08:32.510 - 00:08:33.526, Speaker D: I think the audio.
00:08:33.558 - 00:08:34.380, Speaker A: Cut out.
00:08:39.940 - 00:09:22.344, Speaker C: To see any new messages come in and also send SMS messages to the API. Then conflicts network external adapter allows the information to be sent back from the chainlink node to the smart contract. So the external initiator is only one part of the information going to the chainlink node. And then the external adapter is what allows the chainlink node to communicate back to the complex network endpoint. The first part is to get a chainlink node running. I'm not going to get into too much detail because Chainlink's documentation for this is really good. And the only things that I have added are these three lines to the environment pod.
00:09:22.344 - 00:10:01.848, Speaker C: And the first one is just to disable ethereum because that's not needed in this implementation. And then turn on external initiators. And then I also turned on the chain link dev just for some extra capabilities when modifying stuff. So we can use this command right here and start it up. It's the same command as the one on the chain link documentation. Paste that into our terminal and it will run through all the other. You also notice that you'll need a password, and then especially on your first time, you'll need a username and password.
00:10:01.848 - 00:10:49.816, Speaker C: This is everything up, so you have an account that can access the chain link node. So once all that's set up and it's also connected to a postgres database, it'll start running like this. You'll see a warning that said it failed to connect to an ethereum node, but that's okay because in this case we're not using an ethereum node. So the next part of the setup is the external initiator. So this external initiator is originally put out by Chainlink. It's to facilitate a bunch of different types of networks that want to connect to the Chainlink network. But as you can see it's a four of the original smart contract kit code and this is just customized for complex network.
00:10:49.816 - 00:11:33.400, Speaker C: As you can see, I added a couple extra things into it, but for the most part it's the same. And you need a environment file, sorry with a different postgres database. And then you can link your chain link URL there. And then you'll need these four access keys and secrets. So I'll show you how to get those real quick. So the way you can get that make this a little bigger is since I'm using the docker containerized version of the chainlink node, we'll go Docker Ps. So now we can see the docker container and we want to get access to it.
00:11:33.400 - 00:12:35.550, Speaker C: So the way you can do that is Docker execute it and then the container Id and then bin bash. So now we're inside of it. Here you have access to the chainlink command which allows a ton of extra functions like you can do admin bridges, basically anything you can do on the front end ui for the chainlink node you can do through the command line and we'll get to the UI in a second. So from here we'll want to do Chainlink admin login. So this is the email and password that you created when you were first setting up your chainlink code. So you'll want to put that in. So the next command you can run is Chainlink initiators and then create.
00:12:35.550 - 00:14:04.076, Speaker C: So following this line right here, we'll use chain link initiators create and then the name of our initiator and then the URL. In this case this would actually look more like this, but I already have this created, so instead of showing that exact one, I'm just going to call it demo and not fill in the URL. But if you're actually planning to connect it, make sure you write it the same way I did just now and not this way. So when you press enter you'll see a set of keys, and then these keys and tokens are the same exact order as this. So you can just copy this one in, put it here, and then the next one, put it in here. Once that's all set up, you can go to your external initiative, which I have, make sure everything is built so it's written in, go make sure everything's compiled and compiled and built and then you can run it describes this with, and then it should show that it's at port 8080. Yes, right there.
00:14:04.076 - 00:14:47.368, Speaker C: So now that that's running, let's take a look at our components. So like I said, we already have the chain link node running, we're using an endpoint for the conflux network, and then the Twilio API is already running. And then we also have our external initiator that I just started up. So now we need our external adapters. So in this case there's two of them. One to communicate with Conflux network to send information back to the blockchain, and then one for the SMS communication. So for the conflux network external adapter you'll need a private key since we're sending transactions, and then this is stored in an environment file as well.
00:14:47.368 - 00:15:35.444, Speaker C: And then for the SMS adapter you'll have your Twilio account id and then your authentication token. And then also I just use phone numbers in the environment file just for privacy sake. And then once that's all set up, you can start them up. So, so this one is the conflicts network adapter. If you see on my left side, right here, you'll see a env file in there that's the environment file that I was just talking about. And then there's the same thing for SMS. So right now I'm using an Exprs server as my external adapter.
00:15:35.444 - 00:17:42.496, Speaker C: You can use other serverless functions or cloud based capabilities whatever you want as long as it's able to facilitate calls coming in and then calls going out. So in this case like I said I have my private key and it's also served on port 5001. All of this other stuff is for setting up the complex network instance. So I'm connecting to the network and then setting my account and then contract instance I'm going to interact with at the specific address and also using the AVI for the interface and then there's some data parsing right here and then this sends off the transaction to the network and then once the transaction comes back it's successful or 200 response to the chip node, the chain link node in to this adapter and then this adapter network and return to this one. So again using the pieces that I wanted to keep private and then starting at port 5000 and then for some we're going to be bringing in the information from conflicts network that's facilitated through the external initiator in Jamaic node and then we'll be sending out an SMS message. So again setting up the council network instance we're using that instance to decode our event that comes in so we can decode it that way and then basically take that, use the commands from Twilio and send that off and then we'll again respond 200 to our chain link node to make sure to tell it was successful. So the other part of this external adapter is the check.
00:17:42.496 - 00:19:03.708, Speaker C: So check is the endpoint where the chain link node can constantly query to be able to see if there has been any new messages that have arrived at the SMS gateway. So this is just the data object and then using this and then proceed to return the data to the chainlink node and then it'll go on to the complex adapter which will then send a transaction if there's any information. So now that we have that the next part I'm going to show is the layout that I have. There we go. So hopefully this way everyone can see all the different pieces that are happening. So this one is the CFX adapter so I'm going to also start that up and then I'll SMS will be running on port, this will be running on port. There we go.
00:19:03.708 - 00:19:56.670, Speaker C: So this setup you should see the chain link node right here the external initiator, right here the CX external adapter and then the SMS external adapter. And I'll be using this terminal to interact with it. So when something happens, you'll see everything actually move through the whole different pieces. So is the setup of all the connections. So to do that you want to go to your local host to access the 6688. I'm using it locally, but for most people it won't. So here we'll log in with our usual password and email.
00:19:56.670 - 00:20:43.416, Speaker C: Cool. So since this is a brand new setup, you won't see anything under activity or jobs or runs or anything. So first this is the UI for the chainlink node, kind of how I showed you getting into the docker container and then interacting with it through the command line. This is it with a GUI. So first we're going to set up bridges just like how this one says right here. So we need three bridges. First one is Twilio Bridge, which is what allows sending on chain events to the SMS gateway to be sent out as text messages.
00:20:43.416 - 00:21:34.600, Speaker C: So we'll call this Twilio bridge, make a new one, paste that, and that's all created. And then the next one is Twilio check. So we'll use this endpoint. So this endpoint is for allowing the chainlink to check our various messages. And then CfxM transaction is to send a response back to complex network. As a transaction, I see three bridges. Start with the final connections.
00:21:34.600 - 00:22:16.090, Speaker C: So in order to set up the connections you're going to use something called job specs, which is what Chainlink uses to, or the chainlink node uses to basically know what to do when something happens. So you can kind of read through this where the initiator, so this is what triggers a run. And then we defined it as external. So that'll come from our external initiator. And then we named it CFX earlier. And then we'll also use CFX mainnet, which is a command that we used when we started up our external initiator. So let's take a look at that really quick.
00:22:16.090 - 00:22:48.708, Speaker C: You'll see external initiator. And then we named our specific endpoint and our type for the external initiator, so it knows what kind of calls to make. And then our URL and then also our chain link URL. The main part that you need to know is this name should match. So when I go back down, it's going to be looking at a specific address that I have posted right here. And then when something happens, so an event happens. This will trigger this task right here.
00:22:48.708 - 00:23:37.110, Speaker C: So this task will take it in and then proceed to send it on to the API and then send it on as a text message. So let's get that started. New job, paste that in, create the job and successfully created. If we go back and look you'll see that this is the job spec that was created right here. And then notice how now our external initiator is pulling the endpoint for the complex network. So now it's checking and then checking at a specific address to see if something happens and then it'll trigger a text message. So let's test that out.
00:23:37.110 - 00:24:15.090, Speaker C: So I have some pre written scripts that interact with the onchain contract. The onchain contract is really simple. It's written in solidity and it's also in the GitHub repository so I won't show it. Now since it's pretty simple, there's a couple of commands. One is to emit an event, so it'll just send some information and broadcast it. And then there's a public variable so we can take a look at that state. And then there's also a set value function in there so we can change that state when we want to.
00:24:15.090 - 00:25:00.130, Speaker C: So let's run node get info. So this will tell us the current state. Right now these are the gas prices and gas limits. And then this right here is a call to the smart contract that tells us the current value of the state on chain. So right now it's 20 and then the other information is the epoch number and then also a getlogs function which is a log of any recent events. So one thing to keep in mind, it's currently 20. So now if we do node emit event, this will broadcast the event and then you should see everything rolling through.
00:25:00.130 - 00:25:58.610, Speaker C: First the initiator, then the chain link node and then our SMS technical data. So you'll see a trigger happened right here and then there it is. So now all tasks complete for run happened on the chainlink node and then that got sent to the external adapter. So if I can show that, you'll see that I just received a text message that might be backwards, but you'll see that at the very bottom it's 20 and the first line is the address that it was triggered from. So basically I was able to send a text message that was triggered by an event on chain. So that's one way of the communication. Now for the other way of communication we'll want to set up another job spec.
00:25:58.610 - 00:26:43.170, Speaker C: So this job spec is a cron job. So Cron job means it just runs on a set time and will continue to repeat. So this one says it'll run every 30 seconds and every 30 seconds it'll run Twilio check and CFX send. So Twilio check will check the endpoint for any new messages and then it will send it to the CFX adapter. And then the complex adapter will send a transaction on if there's any information there. So we'll start up a new drop instance when we create it. So now that's successfully created, you can also click on it and you can see all the different runs that are happening.
00:26:43.170 - 00:27:19.804, Speaker C: And if we click on runs, you'll see that these just happened. So this one that just happened is because of that cron job, as you can see. So it went through Cron, Twilio and then CFX sent. If you go look here, you'll see that it did not collect any information on the SMS adapter and it sent it to the CFX external adapter. But CFX adapter didn't do anything because there's no information. So let's send a response message. So the current value is 20 on the on chain state.
00:27:19.804 - 00:27:54.588, Speaker C: So let's make that 100. So I'm going to send this text message right here. So there we go. It's sent. And then we'll wait a second for the chain link node to pick it up and it should pop up right here that it collected a new text message. There we go. So we received a text message that said update 100 and that triggered a transaction on the CFX external adapter.
00:27:54.588 - 00:28:34.896, Speaker C: So now that got sent to the chain and we can verify that on chain, it actually did change to 100. So if we go node, we'll see 100 is our new value on the chain. So that's a really quick demo of how you can use chain link to connect on chain smart contracts to an SMS gateway so you can basically text and interact with the blockchain network. Cool.
00:28:34.998 - 00:28:49.716, Speaker A: Yeah. Thanks a lot for putting that demo together, Aaron, for everyone that's listening in. Yeah, we'll be uploading that demo to YouTube to improve any sound qualities that may have been, but hopefully everyone enjoyed that. If you have questions, definitely drop them.
00:28:49.738 - 00:28:51.008, Speaker C: Into the YouTube chat.
00:28:51.104 - 00:29:05.850, Speaker A: I see one here, Aaron, what would be like a real life example of someone using something like this? And what's like a real life example that you've seen of people using complex network already out in the open?
00:29:06.460 - 00:29:59.400, Speaker B: Okay, so one way to use this is to continue. You can build out the functionality on the smart contract end and turn it into basically a smart contract based wallet. So by that you're able to manage your assets over text and then be able to send transactions with a text message rather than needing to log in with some sort of app. And then something that conflux is currently working on is our dex ecosystem. So decentralized exchanges, which are also powered by oracles. So that's a neat connection there. But we're working on building the amount of liquidity and the amount of assets that are moving on our network.
00:29:59.400 - 00:30:02.110, Speaker B: So that's something that you can currently do.
00:30:03.440 - 00:30:13.616, Speaker A: Cool. Let's see if there's a few. One Patrick, do you have any questions after watching the demo?
00:30:13.798 - 00:30:51.464, Speaker D: Yeah, I could ask like a million. I think this is really cool stuff. You have literally, you kind of showed the entire flow of working with the blockchain, working with smart contracts, then working with Chainlink oracles to get data, and then having that data post back on chain. So obviously that's really incredible. A lot of people aren't even going to need to know how to do all of that. Some people are only going to need to know how to make a smart contract that interacts with this. Some people, if you're a node operator, you might only need to know how to do the node operating stuff.
00:30:51.464 - 00:31:17.300, Speaker D: But yeah, you did kind of like the full suite there, which is really cool. And I just wanted to say that before asking any questions. That's really cool. So something that I know we kind of talked about this before, but I know a lot of people, they come from Ethereum, they come from the Ethereum environment, and seeing conflux, the main question is going to be, okay, well, what's the difference between Conflux and Ethereum?
00:31:18.040 - 00:31:21.620, Speaker B: Yeah, so kind of like what I was saying at the very beginning.
00:31:24.440 - 00:31:24.804, Speaker C: There.
00:31:24.842 - 00:32:13.910, Speaker B: Is a lot of similarities, as you can probably guess by just the smart contract functionality and also the proof of work mining. But think of conflux as just an improvement on the foundation that Ethereum has laid. And we're definitely looking for ways to just work with Ethereum too, because of the powerful ecosystem built there. But the main difference is that we have a significantly higher transaction rate, which can just open up the door for wider use rather than relying on slower networks, but also hopefully be able to work together with other platforms and other blockchain networks to keep those ecosystems and leverage the existing infrastructure there.
00:32:14.520 - 00:32:44.990, Speaker D: Yeah, for sure. I think that makes a lot of sense to me too. So something else I couldn't help but notice, and this might be a little in the weeds in your env file, I saw that the link contract address was the Robson contract address. Can I do this on the conflux and Ethereum mainnet or is this specifically for Robson for now.
00:32:47.940 - 00:33:23.496, Speaker B: Because we're not connecting or this demo didn't connect to any specific Ethereum network that was unintentionally left in, since that's where I started off with. So you could technically connect it to Ethereum if you wanted to without using the external initiator. And then it really doesn't have any bearing at the moment, or no bearing in the moment for complex network since there's no link tokens on the network yet.
00:33:23.678 - 00:33:50.870, Speaker D: Got it. So then let's say I were to do this through your API. Would I have to send a link token with my conflux transaction or. No, it would, just because from the Ethereum networks you have to send a little bit of a link token, like a little bit of oracle gas. Right, right. Do you have to do that right now or not yet?
00:33:51.400 - 00:34:34.700, Speaker B: So for this demo I tried to keep it simple. So no, but definitely if this was to reach full deployment or full implementation, you would want to be able to pay the node operators, especially since there is the question of why not just use a server that facilitates all the calls. But the big thing is with Chainlink and the Oracle network is you can actually verify incoming and outgoing information. So you would want to be able to pay for people who are supporting your network. So definitely if this reached production and I would want to be able to integrate chainlink tokens in gotcha.
00:34:34.780 - 00:34:41.172, Speaker D: So the conflux network at the moment, I wouldn't be able to send. Okay, got you.
00:34:41.226 - 00:34:41.830, Speaker C: Cool.
00:34:42.360 - 00:34:52.664, Speaker D: So I noticed too, you said, hey, I wrote my conflux contracts in solidity. What other languages can you write like conflux contracts with?
00:34:52.782 - 00:35:10.748, Speaker B: So only solidity right now. But the big seller point with solidity is it's really easy to just, if you wanted to go from Ethereum to conflux, it's the same language, you don't have to relearn it or anything like that.
00:35:10.914 - 00:35:12.670, Speaker D: Nice. Yeah. And I saw a lot of.
00:35:15.140 - 00:35:15.456, Speaker C: The.
00:35:15.478 - 00:35:30.464, Speaker D: Javascript SDK that you were using. It looked super similar to. So it sounds like literally like, hey, if you're an Ethereum pro and you're a boss of solidity and you want to try this faster network, it's literally like the same syntax.
00:35:30.592 - 00:35:57.868, Speaker B: Yeah, definitely. I feel like part of the draw with Conflux is it's so similar in terms of some of the tools that we have, but also, it's more blank of a slate. There's a whole new world that you can access with not just faster transactions, but also you can build new tools on it. You can experiment with things that maybe Ethereum is too crowded for, but you.
00:35:57.874 - 00:35:59.416, Speaker C: Can build it on a complex.
00:35:59.608 - 00:36:00.300, Speaker A: Cool.
00:36:00.450 - 00:36:11.120, Speaker D: And I'll ask one more question, then we'll pass it back over to YouTube. Can I run a conflux chain link node and also connect to other blockchains?
00:36:15.160 - 00:36:21.350, Speaker B: So are you talking more about interoperability and things like that?
00:36:21.800 - 00:36:39.400, Speaker D: A little bit, yeah. Okay. Maybe I could answer this question, too. So you had eth disabled, right? Can I connect my chain link node to conflux and Ethereum?
00:36:40.320 - 00:36:55.280, Speaker B: Yeah, basically, as long as it's the same setup, where you just need some sort of trigger that communicates to the chainlink node, and then you can run the same trigger and same tasks.
00:36:55.780 - 00:36:56.480, Speaker C: Cool.
00:36:56.630 - 00:37:36.700, Speaker D: Yeah, that one was for the audience because I knew the answer to that one, too. But, yeah, I'll pass it back over to the audience, and then if they don't have anything, I can keep picking your brain. Aaron, this is really cool stuff. Like I said, I think that your demo that you showed, it's, like, a really powerful application of what these technologies can do, like being able to interact with a smart contract from your phone. Like, just know, update, send, payment, like, whatever. I think that this is really cool, but, yeah. Keenan, is there anybody asking away in the chat?
00:37:37.280 - 00:38:06.020, Speaker A: Yeah, no, I think that was a great last question. That was. One of the questions was, can conflict be blockchain agnostic via chain link? And I think that makes a lot of sense, what you kind of just explained. I think we got time for one final question. I guess there's two. One, and this might go for you, too, Patrick. But how would environment sharing work if a smart contract creator needs to provide secrets to node.
00:38:09.080 - 00:38:41.056, Speaker D: So that one I can jump in? There's. There's some future plans to make that a lot better. Right now, what you're going to want to do is build an external adapter, and that's pretty much the best solution, and it works really well. So you can tell your node operator, hey, call this URL. And that URL will be maybe something on your server or a group of people's servers, and that'll have all your secrets. That way it's all still protected. Right.
00:38:41.056 - 00:38:49.396, Speaker D: Because if you have private information, you want to keep that private. So external adapter is the answer.
00:38:49.578 - 00:39:10.440, Speaker A: Cool. I'll just follow up with that, because there's a lot of questions in the chat throughout the presentation. Where do you recommend people in both the complex and Chainlink community to learn more about external adapters running a node, kind of setting this environment up for themselves to kind of go away and start hacking and building proof of concepts?
00:39:10.860 - 00:39:39.332, Speaker D: Yeah, well, Aaron, I can answer the chainlink part of that. You might be able to answer the conflicts part of that, but for Chainlink, definitely go to the docs. I mean, the documentation is really good. Our discord is super active, right? We're a technology project. Chainlink is a technology. Jump in the discord and I'm in there and a bunch of people from the community are happy to help you out, happy to help integrate with stuff. YouTube channel.
00:39:39.332 - 00:40:21.250, Speaker D: We're starting to put up more technical content and yeah, connect with Reddit. Honestly, any media where we're around, I would definitely say start with the documentation, though. That is definitely the best place to go for some of this integration stuff. There's a lot of open source repos that we have links to in the documentation as well that show examples of all this. The blogs have examples of all this, and I know that the most recent blog with Conflux and Chainlink has the repo here, and you can obviously just go check it out and feel free to fork pull whatever you want to do. Aaron, where can you learn more about.
00:40:21.780 - 00:41:14.050, Speaker B: Yeah, definitely our documentation. So some bits and pieces of it are still in progress as we clean it up as we're working towards our main net launch. So that's being updated pretty frequently with more functions in our sdks or just our node functionality and then also our discord. So we're working on building out our community. I'm usually on there, so feel free to shoot me a message, tag me in it so I can see it. And then I'm happy to ask any question or answer any questions, especially for building stuff on the network. I've got a couple various bits and pieces of demos that I've worked on, and if I can't answer your question, I can definitely try and get you connected with the right people.
00:41:17.300 - 00:41:45.500, Speaker A: Cool. Yeah, I think we got one more question, kind of, kind of a futuristic one, and we see all this really cool stuff that OpenLaw is working on and working with, being able to connect different things. So I guess in like a dystopian far out future, would you see something like this SMS based proof of concept that you created, be able to kind of work with these smart contracts via SMS? Is that kind of where you envision things going.
00:41:45.570 - 00:42:36.540, Speaker B: Yeah, for sure. A smart contract based wallet is only the tip of the iceberg, to use that phrase. As long as your SMS handler is advanced enough to handle all different types of calls or incoming messages, you can basically frame them as specific transactions that get sent anywhere on chain, whether that's to a dow for governance or to other parts of the DeFi space for trading or for borrowing, saving whatever else you want. So this is just a short demo of connections, but the possibilities just keep cool.
00:42:36.690 - 00:43:02.820, Speaker A: Well, Aaron, really grateful for your time. Really appreciate you coming on and showing this demo and putting all the effort and time of working with us on the discord and putting this together. It's really incredible, everything that you've been able to accomplish in such a short amount of time. Everyone else too. I really appreciate everyone joining. This is one of our first ones that we did one of these technical demos and kind of combined it with A-Q-A. So love to hear your feedback.
00:43:02.820 - 00:43:44.864, Speaker A: Try to do a lot more of these. And as Patrick was saying, we're going to be putting out a lot more technical content. So if you're just getting started with Ethereum, solidity, conflux, whatever it may be, there's going to be a lot more technical content. So definitely subscribe to our channel and you'll get notified every time that we post something new for this demo, we'll be uploading it to YouTube too, so you can go through and rewatch it. And again, if you have questions, feel free to reach out to any one of us anytime. Jump in the discord. Been a lot more people coming in as of late and everyone's very helpful, so definitely come in and otherwise, thank you guys both for joining and look forward to next time.
00:43:44.982 - 00:43:46.416, Speaker B: Yeah, thanks for having me.
00:43:46.518 - 00:43:48.380, Speaker D: Thanks so much. Thanks for joining. Aaron.
