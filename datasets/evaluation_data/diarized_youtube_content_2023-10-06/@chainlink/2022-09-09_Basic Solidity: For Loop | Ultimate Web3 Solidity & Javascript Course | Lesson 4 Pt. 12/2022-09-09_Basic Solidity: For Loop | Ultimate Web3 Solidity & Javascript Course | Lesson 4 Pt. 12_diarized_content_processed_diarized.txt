00:00:10.570 - 00:00:52.638, Speaker A: All right, great. So now we've got a pretty minimalistic contract here for actually doing the funding, and we have all of our math for getting conversion rates done in our library price converter, which we're going to import at the top of fundme. Cool. So at this point, we've got our fund method. Awesome. And so we can allow anybody to go ahead and fund this contract and send this contract, Ethereum or any native blockchain currency to this contract. Well, now what do we want to do? Well, once all the funders have gone ahead and funded, we're going to want the project to be able to withdraw the funds out of this contract so they can actually go ahead and use those funds to buy things for this project.
00:00:52.638 - 00:01:42.986, Speaker A: So let's go ahead and create a withdraw function. So we'll create a function, withdraw, and we'll make this public. Since we're going to be withdrawing all the funds out of this contract, we probably also want to reset our funders array and our address to amount funded. Since we'll be withdrawing all the funds, those amounts should go back down to zero. So let's go ahead and loop through the funders array and update our mapping object so that each of these funders now has zero, because in just a second, we're going to withdraw all the money from them. So to do this, we're going to use something called a for loop. So what is a for loop? A for loop is a way to loop through some type of indexed object or loop through some range of numbers, or just do a task a certain amount of times repeating.
00:01:42.986 - 00:02:38.778, Speaker A: So, for example, let's say we have an array or a list, and on that list we have 1234. If we wanted to get all of the elements in this array or in this list, aka 1234, how do we get all the elements in this list? Well, we would use a for loop to loop through each one of these objects. So at zero width index would be one, at the first index would be two, and at the second index would be three and at the last index would be four. So we would loop through the indexes zero through three to get all these elements. Or maybe another example is if this was ABCD. A is at the zero width index, b is at the first index, c is at the second, and D is at the third. And we would loop zero through three to get to each one of these elements.
00:02:38.778 - 00:03:15.738, Speaker A: We're going to do that exact same thing, but with the funders array. So how do we actually do that? Well, we first start with the for keyword. The for keyword says, okay, we're about to start a loop. And inside of these parentheses, we define how we want to loop through it. Also, backslash star and star backslash is sort of like brackets for comments. Anything in between these two will be a comment. So in a for loop, first we give it the starting index, then we give it the ending index, and then we give it the step amount.
00:03:15.738 - 00:03:43.502, Speaker A: For example, maybe we want to start with zero, we want to go to ten and we want to go up by one each time. So we'd go 012-34-5678 910. Or maybe we start at zero, we want to end at ten and we go up by two each time. So we'd go 0246 810. Or maybe we want to go from zero to five. We want to go from two to five. With a step of one, we'd go 2345, et cetera.
00:03:43.502 - 00:04:28.750, Speaker A: So this is what's going to go inside of this forbid here. So for our starting index, and let me even just put this above so that you can reference it. So our starting index is going to be un 256 variable, and we're going to call it funder index. And we're going to start with funder index being equal to zero. So we're starting with zero here, and we're going to end with the length of our funders array, since we want to loop through all of the funders. So we're going to say funder index needs to be less than funders length. So our ending index is going to be whenever funders index is no longer less than funders length.
00:04:28.750 - 00:05:16.162, Speaker A: And then finally we're going to say funder index equals funderindex plus one, which means that every time the code inside of this loop finishes, we're going to increase funder index by one. That's how we go from zero to one to two, to three to four to five, et cetera. Another way you can type funder index equals funder index plus one is you can just do funder index plus. This plus plus syntax means funder index equals itself plus one. So let's start looping through our funders array to access the zero th element, or the first element. We're going to say funders of funder index. So we're saying we want to access the zerowith element of our funders object.
00:05:16.162 - 00:06:00.622, Speaker A: And this is going to return an address for us to use. We're going to go ahead and say address funder equals funders at the funder index. So now we have this funder address, and we want to use this to reset our mapping. So we're going to say address to amount funded at the funder key is now equal to zero. Because remember, in fund we update the amount whenever we fund the contract. When we withdraw the money from the contract, we're going to reset it back to zero. Now, let's walk through this.
00:06:00.622 - 00:06:33.450, Speaker A: Funder index starts from zero. So we're going to get the zero width funder, we're going to grab that funder at the zero width index, and we're going to reset the address to amount funded of that funder to zero. Then this for loop is going to update by one. It's going to move from zero to one. It's going to check then if funder index is less than the length, let's say funders has ten people in it. If funders has ten people in it, it'll still be less. So now funder ethics will be one address, funder will equal funders of one.
00:06:33.450 - 00:07:04.194, Speaker A: Now instead of zero, and we'll grab that address and we'll reset that address's amount funded to zero. Then we'll continue to two, to three, to four, all the way up to the length of our funders array. And this is how we can loop through our objects. So saying this middle one is the ending index isn't exactly right, since we're really checking for a Boolean to see if this is still true. But hopefully you get the idea. So we've reset the balances of the mapping. However, we still haven't done two things.
00:07:04.194 - 00:07:37.130, Speaker A: We still need to reset the array to make the funders a blank array, and then we also need to actually withdraw the funds, since when we funded this, we sent message value along with calling this fund function. However, we didn't actually withdraw the funds. So to reset the array, we could loop through it and delete objects from this address array, or we could just totally refresh this variable.
