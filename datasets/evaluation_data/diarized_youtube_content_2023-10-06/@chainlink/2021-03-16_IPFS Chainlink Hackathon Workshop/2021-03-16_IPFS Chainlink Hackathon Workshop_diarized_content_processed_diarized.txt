00:00:06.620 - 00:00:07.890, Speaker A: Where are you calling in from?
00:00:08.900 - 00:00:10.940, Speaker B: New Smyrna Beach, Florida.
00:00:11.100 - 00:00:13.184, Speaker A: Nice. Okay. How's that there?
00:00:13.382 - 00:00:18.924, Speaker B: Not bad. Got to say the weather's a ok. It's not freezing.
00:00:19.052 - 00:00:32.884, Speaker A: Not freezing. Yeah, it's a little cold here in Colorado. We just got done winter apocalypse. It's like the third snow. Earliest day in history. It's pretty crazy. Sweet.
00:00:32.884 - 00:00:55.872, Speaker A: Well, welcome everyone. Really excited to have Dietrich here. We'll get started here in about 30 seconds to 1 minute. Let some people join, share this into all the channels. Hope everyone's having a fantastic day and enjoyed the Polygon workshop earlier. Cool. Well, welcome everyone.
00:00:55.872 - 00:01:26.184, Speaker A: If you have questions throughout this, definitely hop into the IPFS support channel and the Chainlink discord. Some people are having trouble logging in there for the first time. If you are, I just tested it. It was pretty straightforward. But if you have questions, feel free to reach out to me on telegram or any other means as well. Really excited here to have Dietrich of IPF protocol labs. He'll be giving a workshop on ifps and.
00:01:26.184 - 00:01:29.720, Speaker A: Yeah, Dietrich, yeah. Really excited to have you here. Thanks for joining.
00:01:30.540 - 00:01:58.630, Speaker B: Yes, thanks for having me. Thanks everybody for joining the hackathon. We're super excited to be working with Chainlink. Learn more about what you're building, what you're going to build, help you get there using IPFs Filecoin lib P to P. All right, let me share my screen and can you see that?
00:01:59.000 - 00:02:00.660, Speaker A: Perfect. Looks great.
00:02:00.810 - 00:02:03.200, Speaker B: Right on. Okay, let's get rolling.
00:02:03.280 - 00:02:12.760, Speaker A: Quick reminder for everyone, if you have questions as we're going along here, just drop them into the chat and then we'll go afterwards and we'll be able to answer all those questions for everyone. Cool?
00:02:12.830 - 00:02:31.816, Speaker B: Yes. All right, thanks a. So myself and a few other folks will be hanging out in the IP fest support channel in Discord. So definitely hop in and ask your questions. We are there to help you build your things. So quick introduction. My name is Dietrich Ayala.
00:02:31.816 - 00:03:46.644, Speaker B: I work on the IPFS team at protocol Labs. Do a bunch of other stuff as well. Voller technologies and I've been there for a couple of years. I came from a browser land, originally spent over a decade making Firefox and really wanted to see browsers and the web be more decentralized, more distributed, and more in the control of users like us. Build the thing you want to see in the world, right? So I've been working on ipfs ever since and we'll talk a little bit more about browsers and other things later, but quickly, what I'm going to do today is I'm going to walk through a little bit about what IPFS is, how it's grown, what people are using it for, who's using it. We'll walk through a couple of different ways that you can get ipfs. How you can start up an IPFS daemon, how you can run the command line interface, some of the options that you can use for software integrations for IPFS services, if you want other people to run your stuff, just a whole bunch of areas, and then finishing off with some pointers to resources that you can use to build your things.
00:03:46.644 - 00:04:46.040, Speaker B: So let's get started really quickly. IPFS is a peer to peer content distribution protocol. So HTP we're very familiar with. You open your browser or API whenever is accessing a service, and you ask for something by the location, that location being a URL that we're familiar with, something that basically is an address that points to an IP address which points to a single location where the data is going to come from. IP fest works very differently. You address things by the unique identity of the data's content, so the contents itself of the files that you're asking for, as opposed to where they are on a server or servers or data center somewhere. This means a few different things that data can, or different providers of that data can be used instead of just one.
00:04:46.040 - 00:05:45.340, Speaker B: It also means that if some of those providers go down, the data is always available. There are a number of characteristics and features that come from that design and architecture of ipfs, and we'll talk a whole bunch about that in a bit. Some of the problems that this is good for things like emerging networks where you need data to be available even if you are offline, you want data to be available only locally and you don't need to go out to the Internet. IPFS works on segmented and disconnected networks. You and I could be on a local Wi Fi hotspot from a device that is not actually connected to the Internet, and ipfs would still work. You can go back and load the content that you've seen before from your ipfs node and it will still be there if you have seen it. There's also things like security model that works primarily right now on the web today is oriented around the intersection of SSL, DNS and HTTP, I confess has more flexible security model where you can share directly with people who have the keys, or you can share broader in public, very, very useful, and we'll talk about this in a little bit.
00:05:45.340 - 00:06:21.530, Speaker B: Combating censorship, websites that get shut down, making critical information available to the people that need it most. One of the things that some not super fancy stuff that ipfs really helps with, things like breaking links. Everybody knows what a 404 is. Nontechnical people know what a 404 is, it's memed. And when things go down, everybody knows. With ipfs you can move your files around in directories and you won't break the links because the addresses directly tied to the identity of those files. So these are a number of the things that just kind of come built in.
00:06:21.530 - 00:07:18.516, Speaker B: The cryptographic verifiability when you address something by the hash of its contents means that you are always going to get what you asked for. If you ask a HTTP URL for something twice, the second time might come back with something different. This is really good in some ways for dynamic content, but also not great for a lot of things that break because of that. The amount of trust that you have and what you're going to get back changes. The interesting aspect, I think, of ipfs that we're just starting to get now with things like NFTs and crypto and DAP usage is contextual trust models. So who do we trust and why? Right now if I want to be able to communicate with a friend or family member, I have to go through a third party HTP SSL DNS nexus of security and trust model, which is again mediated locally by a browser that has a certificate authority. But ipfs allows me to exchange data with people that I know directly, maybe even encrypted, and through a public network.
00:07:18.516 - 00:07:45.360, Speaker B: So very different model. Who's using ipfs? What are they using it for? How has it grown? The IPS public network is comprised of over 100,000 nodes. This is probably out of date a little bit. The network is growing and growing. Lots and lots of new nodes. Recent integrations like Brave having native support for ipfs also resulting in new nodes. IPFS 0.5
00:07:45.360 - 00:08:36.492, Speaker B: was a major change in how we actually construct the public network and how the DHT, the way that content is found, broadcast and re asked for on the network, how it's constructed and operates. A major performance boost then, and most, most ipfs nodes are now on that newer version. IPFS desktop and companion. Talk a little bit about these in a bit. These are ways that you can install ipfs on your desktop or laptop today. They have user interfaces that allow you to see the status of your node. Do basic operations like run an IPFS node view and change your files, be able to view those files through your local node and be able to connect things like web browsers to use your local node to be able to access data on the network instead of having to go out to the Internet first over HTTP, the HTP gateway.
00:08:36.492 - 00:09:48.248, Speaker B: So this is a major service that we run, but also a number of other people run HTP gateways like Cloudflare, over 100 terabytes of data per week, over 2 million unique users per week. So a lot of people using this critical public service to be able to easily access data on the IPFS network if they don't have a local node. A lot of application developers are using the IPFS HTP gateway to be able to quickly bootstrap publishing data to ipfs and then be able to make it easy to access in their applications. As we'll learn most end client applications, native apps, web browsers don't have native ipfs support, so they go through an HTP gateway to be able to access data on the network. Some of the use cases that people are using ips for today, decentralized naming so like I've mentioned several times already, trust and security model on the web today is that intersection of HTP, SSL and DNS. But that is easily shut downable, as we're finding out in places like Turkey, where they shut down Wikipedia, and Myanmar, where they currently have Wikipedia shut down, and a number of other Internet shutdowns this year alone. Massive problem.
00:09:48.248 - 00:10:39.188, Speaker B: Decentralized naming allows human readable names for things like ipfs addresses. We'll look at some ipfs addresses in a bit. They don't look like something you want to try to remember, so we need some layers on top of that in the network that allow us to work with those addresses more easily. Services like unsolvable domains and Enos are ones that are doing that. Covid News is actually something that for a large chunk of the global population, access is restricted. So we have some folks that we've been working with, matters news, the Litecoin project, and a few others that are making Covid news available in their media platforms in several different countries that are having these types of challenges right now. Wikipedia, as I mentioned, currently completely offline in all languages in Myanmar.
00:10:39.188 - 00:12:09.156, Speaker B: So with the help of a couple of folks on the ground there, some human rights activists in Southeast Asia, and some infra folks, and the Qwix project that does the compression scheme for Wikipedia and bundles snapshots of Wikipedia, we were able to, in a really short period of time after that shutdown happened, get the Myanmar localized version of Wikipedia up on ipfs. So you can now access it. As you can see in the screenshot for people in Myanmar. If you get access to this critical information being used for physical and digital goods, braves swag store runs on ipfs Pinata and allowing NFT storage on ipfs, as are a number of other people, it's become a really popular pattern. A bunch of the NFT platforms use ipfs by default, so we're seeing an increasing trend of ipfs addresses being used. The immutability of that address being a superpower for being able to write data to a given blockchain and be able to make sure that that reference doesn't break even if the server moves or the owner of the data moves, or a number of different people are keeping that data alive makes a more durable and reliable way to store, publish and refer to digital goods for the long term identity. Interestingly, ipfs doesn't have a blockchain itself you can actually go to does ipfs have a blockchain.com?
00:12:09.156 - 00:13:03.624, Speaker B: That'll give you the answer to that, which is no. However, in that system you still need to be able to have identity a lot of times for applications where you might need to be able to log in or understand who you are talking to, or build some of these contextual trust models. The three box project which you may have heard of, has an initiative called Ceramic and IDX. These are identity primitives and systems and services on top of ipfs make it very easy to be able to quickly build applications that have identity on ipfs. Microsoft has a project called Ion, which is a decentralized identity system that uses ipfs to aggregate identity transactions into very large batches. Take the ipfs address of those batches and writes it to the bitcoin blockchain. So Microsoft ipfs and bitcoin, three words that don't typically go together, but we have a blog post on what they're doing.
00:13:03.624 - 00:13:52.650, Speaker B: They're also going to speak about that project along with a couple of other identity projects at the next IPFS meetup. It's monthly and that edition is next week. I believe I will share that link in the ipfs support channel on Discord and the chain link discord so you can join and find out more about this in DeFi. Loads and loads of these services are either publishing their front ends on ipfs or using ipfs for asset and data storage and retrieval. Ipfs makes it pretty easy to be able to publish large amounts of data, even feed style. The way that you might be getting some of this data and the way these services are interacting with each other, some of the ipfs users that we're working with. Well, here's a look at a whole bunch of them.
00:13:52.650 - 00:14:41.336, Speaker B: There's everything from identity service like we've been talking about, to data persistence, to online marketplaces, nfTs, a lot of different people serving content and cloud services based on ipfs. We published last year a series of case studies. So when companies took a particular use case or a particular architecture and use ipfs to solve this problem, we wanted to understand, to be able to share that solution in more depth. You can go to docs, ipfs, IO, and you can read more about some of these things. Morpheus Network is a supply chain management network. They actually manage supply chain and tracking across international borders. So it's been very interesting to see the uptake in their customer base.
00:14:41.336 - 00:15:25.284, Speaker B: People who want this information to be more transparent and widely available to reduce the friction in the businesses that they're working with, but also need to be able to have that provenance of data, to be able to say, this is where that data came from, that you can't trust it. Arbol is another interesting one. It's parametric risk management for agricultural businesses. So right now, a farmer, for example, would pay a centralized company for insurance on if the weather is bad and their crops fail. However, Arble allows an open marketplace for people to invest in that. And for basically, it's a smart contract that's tied to weather events that does the payouts of that risk management infrastructure. Very, very interesting.
00:15:25.284 - 00:15:56.400, Speaker B: Different approaches that these types of technologies unlock, and those are available in much more depth in these case studies. And it could be also powering filecoin. We launched the Filecoin network last year. It is currently live. This is for longtime incentivized open marketplace for storage. So right now, if you start up an ipfs node and you shut your computer, that data goes offline unless somebody else is hosting it. We'll talk a little bit about the hosting services for that.
00:15:56.400 - 00:16:43.820, Speaker B: But Filecoin is ultimately an open marketplace for people to offer to service to keep that data alive. There are many different constraints. Sometimes you might have a very large data set that you need to store inexpensively because you don't need to access it often. And other times you might have very specific data storage requirements like GDPR or California Consumer Protection act, where you need to be able to find somebody will store that data inexpensively. But under those specific constraints, Filecoin opens up a data storage marketplace to be able to do that. Filecoin ignite was one of a number of different events that we ran last year when the Filecoin network launched, and over 100 different projects building on ipfs came out of that series of events. And some of those projects are running today.
00:16:43.820 - 00:17:30.076, Speaker B: Some have even got funding. And it's really great to be able to see the longevity of the different projects. Some of those are even probably in that ecosystem diagram I showed before some of the interesting experiments the folks at Netflix were experimenting with ipfest for. They managed a global network of computers to be able to serve their infrastructure, and they were using ipfs for inside that network, the addressing of containers. So how do you distribute containers across this massive network when you have to manage paths and locations and you trust everybody inside that network? Ipvest ended up being a pretty good solution for just being able to fetch from an address and if your nearest neighbor had it. That's great audience you may have heard of as well. If you are in the web.
00:17:30.076 - 00:18:18.940, Speaker B: Three space decentralized music service where each node in the network is IP fest node. There are artist nodes and player nodes and metadata nodes, and they have recently launched the token as well. It's very exciting. Great to be able to see the partnerships with record labels. I worked in the music industry myself once, way back in the day for record label, so I understand the complex network and complex economics of the music industry, and it's great to be able to see the strides that they're making. The Lib PDP part of the overall stack that IPFS has built on powering e two, and it's great to be able to partner with group of people that are really rushing forward with a network that is so heavily dependent on the infrastructure that we're all depending on and a set of APIs. And it's great to be able to see those improving with that usage.
00:18:18.940 - 00:19:01.476, Speaker B: Harkening again back to my previous life, working in browser land for a long, long time. Do work on a number of the browser integrations ipfs. The first that we actually did was in April 2020. Opera shipped Opera Android that had IPFS support. You can address things with the IPFS scheme in Opera Android. It's backed by a remote HTP gateway. There's some work that we're doing in enabling native mobile ipfs access, but because you have to be very careful about both bandwidth usage and battery lifetime in mobile devices, it's taking a bunch of tuning.
00:19:01.476 - 00:19:27.316, Speaker B: There's a project by a french development group called Bertie, which also you may have heard of. They have an instant messaging or a messaging secure messaging project. They're working on that. They've done a load of work in getting native ipfs working inside mobile apps. So that's something that we hope to see emerge this year. You can already run it. Now we want to get it to the point where there are a bunch of example apps you can easily fork in Swift Kotlin to get your iOS and Android apps going.
00:19:27.316 - 00:20:15.196, Speaker B: So opera launched Android and then they launched an opera iOS. Just last month we announced that at Denver. And so now both of their mobile browsers have ipfs support. You can get that from the Android Play store or the iOS App Store in kind of our protocol labs. Long term bet on open standards, open source and the web itself and upgrading it. We've been working with an organization called Agalia to fix problems in web browsers today. So Webkit, Chromium, Gecko and Firefox figure out issues that make it more difficult for not just ipfs but all decentralized and distributed networks applications to run inside these browsers.
00:20:15.196 - 00:21:26.388, Speaker B: Some of these initiatives are around standardizing how this security model is applied to local host. So for example, if you install an IPFS daemon and you have a local web based application, you want to be able to communicate maybe from your website, but in the client side running code you have communication directly to the local ipfs node. That's something that we want to be able to work for application developers in a pattern and tell all browsers have native ipfs support. So this is something that Agalia has been helping us with. They have committer status for all the major web engines and we've even found a bunch of things where we can smooth out how the security model actually works across web browsers so that even some of the web compatibility problems that people have today that are not related to things like IPvas are getting improved out of the work that we've been doing with them. So this is really helping uplift the web as a whole, making life easier for web developers where every single little teeny compatibility problem on the web hurts. From a I am trying to develop things today, get my product shipped standpoint brave this was a really big announcement for us earlier this year and a major milestone in the success of distributed web protocols.
00:21:26.388 - 00:22:55.428, Speaker B: Brave is now shipping native ipfs support. If you go to an IPFS address in brave, it will ask you would you like to enable the native node and it will actually download the GOIps implementation, run that daemon and manage it for you. You can go to brave to be able to find out more and be able to manage that node and see what it's doing. That allows us to do native ipfs addressing and native loading and publishing directly from the browser. So this is a really big opportunity to be able to put these technologies in people's hands in a way that's easy, that doesn't require the installation of external software or things like telling regular users please install this server, which is really an easier lift in terms of getting these technologies into the hands of people that need it most. It was great to be able to say to the folks that were like hey, can you put the Wikipedia on ipfs for the Myanmar locale to be able to, can just, if you have an access to a desktop computer you can download brave and all these links will just work for you right out of the box. So just an example of where really pushing these technologies out into clients, one actually helps us achieve the dream of decentralization, of being able to put those capabilities, these superpowers and more control into users hands instead of only all decision making in the publisher's hands, and how pushing out to the clients really is where that happens in the end.
00:22:55.428 - 00:23:36.960, Speaker B: So as you can see, ipfs being used for a lot of things by a lot of people. It's great to be able to support all these use cases and really, really looking forward to what you come up with in the hackathon. So let's talk a little bit about architecture, how ipfs works, how it's made up. As we talked about earlier, it's very different from the network architecture standpoint of a centralized service. HTP has over three decades of well trodden pathways for developers. IPFS works a bit differently. While concepts around distributed networking and peer to peer have been around since the beginning of network computing, the access and pushing out to the client is fairly new.
00:23:36.960 - 00:24:20.560, Speaker B: And while we've seen a couple of know moments in time over the last decade or two, even where peer to peer networking has hit the mainstream, it's still really not the default way that people are building applications today. So part of our work in designing and building ipfs is how do we abstract some of these concepts away, make it easy for developers to be able to onboard and use these technologies. You're familiar with HTP domain name addressing. You access something, you request something by first the hostname and domain where that asset might be. Then you will have usually a path structure that represents a file system on the end. That's how you ask for something in the HTTP web. There's a number of challenges there.
00:24:20.560 - 00:25:11.296, Speaker B: If somebody renames that JpG to JPEG, suddenly you have a 404. Even though the file is exactly the same. Or if you just rename a directory or move directories, moving from data center to data center. Massive undertakings today and all the complexity and error prone development that comes along with those types of migrations and architectures, when you address things by their identity as opposed to their location, a lot of those paper cuts of development slide away. But at the same time, it's a little harder right now because we don't have that three decades of tool building with ipfs. We address something by that identity. You can have path structures on the end and be able to use a file system metaphor for addressing, but also each one of the elements in that file system metaphor does actually have a unique identity as well, that you can ask for things.
00:25:11.296 - 00:26:11.444, Speaker B: By the way that a ipvs address is constructed, it takes a hash of the content of the file's contents, it uses different encodings. The address itself actually ends up being a combination of the hash of the data and some metadata that talks about how that hash was created. So addresses even can be constructed in different ways, and they have portable metadata that allows you or IPfs client to be able to understand how that address was created. If you change even one small part of that file, that address does change. So this means that we need to make different ways of addressing dynamic content. We have a couple of different ways to do that, but ultimately it does mean that when you ask for something, that is exactly what you are going to get, because that cryptographic verifiability is built into how you ask to begin with. So large data sets, we actually chunk the data up.
00:26:11.444 - 00:27:04.976, Speaker B: So let's say you have a given ipfs address and it might reference a video. That video may be multiple gigs. Ipfs will actually take that. When you add that video to your ipfs repository, it will break it up into many small pieces and give each one of those pieces a unique address and identity based on the contents of that piece of that block. That means that when you ask for something from its root, IPfest will then separately ask the network for each one of those pieces by their own identity on network, which means you can get those pieces from different entities on different nodes on the network with location based addressing. As we talked about, you have this relationship where you're asking one entity, one node, one server, for whatever you have. If a bunch of people are asking for that one thing, they're all asking that same entity.
00:27:04.976 - 00:27:52.912, Speaker B: But with ipfs based addressing, any node on the network that has the data can be that publisher, they can provide that data. So you don't have the bottleneck of one. If that publisher goes down, maybe they just didn't even renew their let's encrypt certificate. Maybe they forgot to pay their ISP bill. Maybe they did actually get shut down by a state actor that decided that Internet access was too dangerous for people to have in current conditions. For whatever that reason is, you can still get the data that you're asking for from anyone who happens to be also providing it, which is a really powerful change to the underlying architecture of the networks that we're used to. This also really changes the nature of innovation.
00:27:52.912 - 00:28:33.840, Speaker B: So let's say you have a startup, you have to build out your web infrastructure. You get a server somewhere serving that data. As your user base starts growing, you add more servers, more servers and more servers. Ultimately you end up being dependent on just maybe other companies that have lots of servers and you rent those servers from them. With ipfs, it allows you to distribute that load in a way that is a little bit less dependent on single businesses in the ecosystem. Like I said earlier, with Filecoin we want to create open marketplaces for the incentivized storage and serving of data. And with ipfs you can have, whether no matter what the incentive is, you can have other nodes host that data.
00:28:33.840 - 00:29:19.424, Speaker B: It might even be something like a more CDN relationship where the people who have loaded it have also decided to serve it. We're talking about experiments in brave where maybe something like we use bat or Filecoin inside the browser to be able to explore ways of incentivizing the rehosting of data from there. And sometimes you might want to do something like click. I just want to rehost Wikipedia because I believe in it, because I think it's important that people have that data. The current structure and kind of like high level architecture of how web two is designed, it's applications. You have all the power as a publisher, which might be good in some respects, but it's also the root of what we talk about when we talk about user agency and user control. And the application logic doesn't move with the user where they go.
00:29:19.424 - 00:30:03.630, Speaker B: The user data doesn't typically live on the user's machine. It lives on the publisher's machine, which gives them the ultimate bit of control there. What does ownership of data actually look like? All the decision making right now around that happens on the publisher. But in these new type of architectures, when everyone else also has the data that the publisher, or the logic even that the publisher has originally served, that gives us more control. It gives us a lot more agency over our experience online. It means that if that publisher, if their business goes down, or if Twitter buys them and shuts them down, or some other large company buys the smaller company or service, you might still have access to that application logic in your data. Your app might still work.
00:30:03.630 - 00:31:10.816, Speaker B: That won't always be the case, but at least that is an option today, especially as independent creators who want to build applications that they want to live on past the point of publication. That's something that is more tonable for them to do without having to have and retain all the infrastructure that comes along with it. Endless tales of people who built a website that was successful at one point, and then things moved on, but they're still getting server bills every month. What do I do? So these are ways that you can solve some of these problems out of the gate in the way that we build things from the beginning. So IPFS is actually a collection or part of a collection of technologies. It's built on top of some underlying technologies like IPLd, Lib, PDP, multiple formats, the collection technologies for how we construct these addresses so that they are a little bit more future proof and more resilient to change. Instead of the fragile, easily breakable location based scheme addressing that we have with HTP today, Filecoin built on top of all of these collections of technologies in the stack.
00:31:10.816 - 00:32:03.296, Speaker B: At the top you have applications, the things that we're used to working with, or even just looking at rendered content. Underneath that we do have ipns, which is a distributed naming system. So it uses the same underlying network stack and architecture of ipfs and is a way of referring to addresses. So you can say publish that a human readable name should be applied to a given IPFS content address, and then people can use that. There's other technologies like DNslink that allows it to integrate, be interoperable with existing systems like DNS. IPLD allows us to be able to link disparate data sets together, or to be able to join data, or be able to build relationships between data sets, or even metadata and data. And underneath that, the transport layer, lipidP, a collection of technologies aiming to provide a transport agnostic API.
00:32:03.296 - 00:32:59.636, Speaker B: So whether the underlying network connection is a bluetooth le connection, whether it's a Tor hidden services, whether it's 700 regular TCP sockets, that the application one layer above doesn't have to necessarily care about what that might be, your application logic gets to be disentangled from that transport layer in a clear way. The typical way that you would run ipfs is through a node. It does a number of things, CID verification. It broadcasts out to the broader network. It manages the syncing of data between nodes, it manages the chunking of nodes. It has a repository, a local repo or data store where it keeps your data in a way that allows it to be able to do all these types of operations. And each node can be configured differently.
00:32:59.636 - 00:33:52.650, Speaker B: Both what the default transports or available transports are based on the type of hardware or software environment available. And then you might want to say for mobile, say deep connected, only 30 nodes by default, or even five other nodes by default, and keep those connections, or maybe even use transient connections, whereas something like a server desktop computer, you might be able to have a higher number of default connections that you want to keep open. The more connections you have open, the better performance you're going to get, but also the more bandwidth that you are going to use and the more energy you can sync with each one of these nodes. Interact with other nodes, you can link data and be able to broadcast that. You can use those to persist your own data locally. And we're also adding services. We just recently added the IPFS pinning services where you can actually configure your node to automatically publish and pin data to remote server that you might have paid to be able to host for you.
00:33:52.650 - 00:34:29.492, Speaker B: How do you get ipfs? There are a number of different ways. IPFS has the desktop application for Mac, Windows and Linux. You can install this from a number of different locations and we'll talk a bit about that. I'll show you that page in a bit. This is a desktop application that kind of runs like a system tray or menu bar app. It shows you the status of your node. It allows you to do some basic operations like see what files you have pinned, what files you have shared, add and remove files from your repository, be able to see the status of your node, how much bandwidth has been used, things like that.
00:34:29.492 - 00:35:48.354, Speaker B: We have a ClI that you can install which is the go IPFS implementation. You can run this daemon and it has a bunch of operations that will walk through some basic ones in a bit, and then tools like IPFS update which allow you to easily update to newer versions of ipfs. You can install ipfs through NPM to install JS IPFs and the demon that way as well. Let's do a quick walkthrough of IPFs desktop. So this is something where you can follow along if you like, and I will show you some of these bits and we can walk through an exercise as well. Share this one switch screen share so you can go to tinyurlipfest desktop as I showed in the other slide, to get to this hackend, which is a quick walkthrough of what you can do. Why IPFs desktop like a basic operation that kind of shows you a bit about how IPFS works in a way that's easy to follow along.
00:35:48.354 - 00:37:21.630, Speaker B: You can go to the Docs IPFs IO site, click install on the top left and it will still take you to a page that will show you a little bit about what iPves desktop is, what you can do there, some of the features that it has, and quick links to be able to get iPves desktop for the operating system that you are using. Some of these have a setup step and ultimately you get to the point where you can find this icon in your stats bar or menu bar and it gives you a couple of different options. It has some nice features like automatically upload screenshots from your local screenshots directory or be able to download files, be able to publish files, stop and restart. Demon also does automatic updates, so it will pull down and install new versions of ipfest if you want it to. It has some ways to be able to configure that. As you can see here on the peers screen, it does show you how many files you're hosting, how many peers you're connected to, what your bandwidth usage is. If you pick a file like I have here with the Chainlink logo, you can go to the file screen IPFs desktop and you can either click import to add that file, or you can just drag and drop that file from your file manager and it will upload the file to ipfs.
00:37:21.630 - 00:38:33.554, Speaker B: You'll notice there's a menu here where you can see the different parts of the file. You can look at what the address is, that's what the CID is, the IPFs address for the file that you've added with that address, you can do things like add it to an IPFS gateway. I'll show you that in a sec. IPFS desktop has some tools as well that allows you to explore the contents of that file. So like I mentioned before, when you upload a file to ipfs, it chunks it out into all these little bits, and based on a default algorithm, you can have different chunking algorithms as well. You might have one that is custom to the type of data that you're chunking, if it needs to be served up a different way, or put back together in a specific way, or a way that is optimized for a given use case so IPPAs desktop allows you to see what those encodings are, what the data is comprised of, the size of the data, how many blocks and chunks that it's made of, and a bunch of other different metadata. You can take that CID and you can open it, and there's a link for that IPFs hub in your browser.
00:38:33.554 - 00:39:03.860, Speaker B: So you can actually see what's on your local node, what it's hosting. You can open that up and then you can share it with other people. But you'll notice that the address that it gives you is a local host address with default port 80 80. But that's changeable. If you go to the localhost port 80 80 and then just put that content address, you can load the data directly through there. You can also open it through a gateway as well. And I'll show you that in a few.
00:39:03.860 - 00:39:55.380, Speaker B: One of the other interesting things is that you can take, for example, the CID that I have here, and you can open that through your node. If you open that up in ips IO gateway. So let's say you add a file actually through your desktop application, then you go to the gateway ips IO gateway ips IO slash ipfs, and you paste that CID in there. It will open it and it will actually pull it directly, not directly, indirectly from the node that you are running. So if you add something that is unique to IP fest, nobody else is hosting it all. The gateway will ask the broader network, it will ask the DHC, does anybody have this CID? That request will percolate along network until it finds somebody that has connected to you, one of your peers. It will serve up that data, serve up that file and be able to retrieve it for you.
00:39:55.380 - 00:40:37.854, Speaker B: I like this as a way to really help understand what that peer to peer network actually means is that you can actually take that same say id and you can go to Cloudflare's gateway, or you can go to the PFes public Gateway checker, which I've loaded here, that got marked by Chrome. Interesting. I will have to figure out why that is. There's a website that we run that's very docky. It really doesn't have any danger on it. Thanks. Chrome or crave in this case probably, which has a list of public gateways that you can look at.
00:40:37.854 - 00:41:17.980, Speaker B: It shows ours, it shows cloudflares and pinatas, other people that can run gateways. One of the challenges with gateways is you have to trust that that gateway is actually giving you the data that you're asking for. You are delegating that trust when you use HTP. So using your own node is the best way to ensure that you're getting the data that you asked for. But HTP gateways, we run them, a bunch of other businesses run them to be able to make sure that that data is available. And that gateway code also is audible because that is part of the open source IPS project. In the peer connections screen of IPFS desktop you can see who you're connected to and where.
00:41:17.980 - 00:42:18.478, Speaker B: The way the DHT connection algorithm works means that we do want to be able to get access to data all over the place, but in the quickest way possible. So it's very interesting to see where those peers end up being. It's using an IPG location hand waviness here. So it might not be totally accurate, but it will kind of give you an idea of what that distribution is going to look like. And as I said before, you can open up that file basically on any gateway. So let's flip back to the slides which are here. So that's a quick walkthrough through ipfs desktop, the ipfs CLi.
00:42:18.478 - 00:43:10.610, Speaker B: So on that same docs ipfs IO site it will show you the instructions for installing the CLI. You can get it through brew, you can download a build yourself basically for a bunch of different oss. And this allows you there's really a whole lot of commands through the CLI and it's really worth spending some time in the docs or just looking at the CLI help on the command line and looking what these different commands are. But I'm going to quickly walk through a few of them. Ipfs and knit when you first install ipfs, you want to initialize a repository, a local repository. This will do things like generate your keys and your peer identity that's used and hand it off to lip to p for network communication. And then you can use the ipfs daily command to be able to start that service and it will tell you one, what your identity is and then two, where those services are being run by default.
00:43:10.610 - 00:43:55.810, Speaker B: IPfest add how do you add data to the network? Something you want to be doing. A lot of ipfs add and you can add a file that way will return you the CID of that file. What ipfs add will do is take that file, chunk it up into bits, store it in the repository and then give you the root CID for that tree of data for those bits so that you can reference it in other places and applications or share with other people. It also publishes to the network the availability of that data. So for that root CID and all the other cids, for each one of those blocks in that file, it will tell the network, hey, I have this, this is the thing I have. If you would like it, I am one of the nodes you can get it from. So that's also built into there.
00:43:55.810 - 00:44:33.866, Speaker B: If you want to get data on the command line, you can use the ipvs get command which will download the file locally, parameters there around how and where you want it to go. IPs cat works like the cat command. It will allow you to pipe that data to wherever you like. How do you understand what's going on? There's a bunch of commands related to what's going on with your node. IPFS stats will tell you things about a number of different things. The example I have here is for bandwidth. How much bandwidth has it used? Is it currently using IPS stats? DHT will tell you about your connection to the broader public network.
00:44:33.866 - 00:45:17.558, Speaker B: You can learn things about your local repository as well as any ongoing file exchanges that you have. IPS swarm connect so IPS is shipped with a default set of nodes that it bootstraps to. So it will try say 20 od addresses, be like can I connect? Can I connect? And it will build this set of connections based on that. It does that dynamically, constantly, basically always managing the set of open connections that it has to be able to make sure that it has the optimal connectivity to the network. But sometimes you might need to be able to connect to a specific node. So let's say that you are setting up an IPFS node. You want to be able to have your other node see can I reach that node? You might want to use this command swarm connect to that address to be able to see if you can connect directly to that node.
00:45:17.558 - 00:45:46.306, Speaker B: You also might want to set up a private network between two nodes, not connect to that public network. You can use that as well. Peering is a way that you can persist that. So in the IPFS config file you can say I want to always connect to this node. Let's say you have a very large collection of data and you're working with other companies or other friends or projects to be able to make sure that data stay is available. Let's say you want to have a quick connection to the other nodes that are holding a specific set of data. This is a way that you can do that in your config.
00:45:46.306 - 00:46:25.634, Speaker B: So when your ipfs node starts up, it connects directly to the set of nodes that you specifically configured it to do. I've talked a bit about HTP gateways. IPFS companion is a browser extension that allows you to interact with your local node and those gateways and be able to do things like smooth access to IPS or content. You can do things like say, detect a gateway URL ipfs, IO slash ipfs and a CID, maybe cloudflares or pinatas or a custom one and say hey, I actually want you to not go to that server. I want you to pull that CID out of the address and ask my local ipfs node to get it instead. It provides that as well. A number of other things.
00:46:25.634 - 00:47:18.130, Speaker B: Here's a screenshot of the IPFS public Gateway checker, where you can see what features a different gateway supports. Also what its kind of performance is, how fast it's going to return replies or read. Then at any point, IPS companion it is available for Firefox and for chromium based browsers as well. Jsipfs so JavaScript duking it out with Python for number one programming language in the world, estimated around twelve to 13 million JavaScript developers worldwide. Every one of these hackathons that I do, most developers are working with JavaScript. So we have a JavaScript implementation of ipfs. It has a lot of the basic APIs.
00:47:18.130 - 00:48:24.534, Speaker B: We have a JS implementation of loop PDP as well, that it's built with and built on top of. However, it doesn't have support for direct DHD connections. So what it does is it bootstraps creates a local repository, and that's whether it's in node or whether it's running inside of a browser tab, and it connects to a remote node and proxies the communication basically through remote nodes. So it will bootstrap to a GoIpfest node somewhere or something else that will relay it and connect it to a GoIpfest node or more, and then we'll aggregate a bunch of connections to be able to make sure that that connectivity is there for the application. So one of the patterns we see a lot is because IPFS is not available all the way out to the clients yet. Built into browsers, for example, or built into operating systems, is that people will ship an HTP web application that uses JS ipfs to be able to connect back to the IPFS network, where either some other way they're publishing data to the network, or maybe even publishing data to the network directly through the IPFs node running inside a web browser tab itself. We also have some other libraries that use that.
00:48:24.534 - 00:49:25.222, Speaker B: So if you're shipping an application, a web HTP web application that uses JSIp vest, you might not want a full JSIp vest node in every tab, you can have it. So actually all the tabs that are served from your domain of your web app are all inside a web worker that uses one node. So if you have an application where you're like we're going to have a bunch of different nodes across a bunch of different tabs, and your users, you know, open up many different tabs, that might be the way to go for you. It'll be more bandwidth and power efficient for your users. There are a number of services that are built on top of ipfs and make it easier to work with. So IPFs is a lower level network protocol, as we've learned today, provides network architecture and a set of primitives for doing things. But the same way that frameworks in JavaScript or Python or Java or rust help people develop things better, faster, easier, help reduce the learning curve, make it not as steep, get people onboarded and building their things quickly.
00:49:25.222 - 00:50:06.890, Speaker B: Also another key ingredient for successful hackathoning, these are some of the services that do that. There are a number of them. Orbitb is an abstraction on top of ips that allows you to work with things in a more database like fashion, and also has built in syncing via crDts. Textile is both a service and a set of libraries. They have everything from native app examples that you can work with. They have higher level abstractions for things like syncing for collaboration for identity. Threebox also similarly has identity services, file management APIs, and they have, as I mentioned earlier, launched both ceramic and the IDX initiative, which are identity frameworks and services.
00:50:06.890 - 00:51:10.320, Speaker B: To be able to make it very easy and fast to be able to build identity based web three applications. If you want to have your data hosted, sometimes you want to have a big data set hosted, or just even if it's a small thing like an NFT, you want to be able to have that set of data permanently available. So in case you shut your laptop, your data will not go away. Temporal actually, I think I should remove this because I think they rebranded or they're not running anymore. But inferior is one you'll be familiar with that is used a lot for web three applications in the Ethereum space. They provide hosting and pinning of IPves data and number of APIs for managing that data, and then pinata, which is a service that allows both free up to a certain tier and paid services for hosting IPfest data. And they have a bunch of great tutorials on how to use ipfest for storage of nfts that are really helping a lot of folks right now who are doing work in that area.
00:51:10.320 - 00:52:11.950, Speaker B: One thing that you can make a website on ipfs, but there's a whole bunch of parts of making websites that are integrated into where we store our code. GitHub GitHub Actions CI CD services and deployment services Fleek is a company that started last year that is doing hosting and publishing. That makes it really easy to be able to connect your existing source code repository and source code management system to ipfs, to be able to auto publish, to be able to make sure that you're publishing to ipfs and you're publishing to HTP. It's very easy and smooth. I think we're probably going to see a number of different services like this coming up as ipfs continues to mature and be a default choice for people. As more businesses come online, they need services like fleet to be able to deploy more smoothly, easily in a way that's integrated with their developer workflow or existing services. I mentioned some of the naming services earlier.
00:52:11.950 - 00:52:55.200, Speaker B: There's really a lot happening in this space too. Building on top of existing DNS, but also in a way that isn't stoppable by ICANN or by state services is really the easiest way for governments to turn the switch and turn off access to things like Wikipedia. So a lot of web three name services, unstoppable and ENS, are both doing really interesting things and also working with some of the bigger providers and also working with the browsers that we've been talking to as well. So I think we're going to see a lot of growth and maturity in that area and make it easier to be able to use human readable names with Ipfest. Lastly, some resources to be able to help you on your way. One particular one, if you are new to ipfest that I really recommend, is called proto school. Proto school.
00:52:55.200 - 00:53:51.934, Speaker B: This is a set of tutorials that are in curriculum, learning journey style to be able to help you understand what the primitives of these systems are. So as you can tell from this talk here, IPFS sits in a stack in a broader collection of technologies without even getting into ledgers, any blockchain stuff at all. IPFs, loop, PDP multiformats, iPLD, filecoin, a number of different technologies, and protoschool has a bunch of tutorials that help you dive more deeply into each one of those individual pieces. How is an IPFS address created? What happens when you actually make a request? What happens when you add data to the network these are all things that you can explore there if you want to follow along with us. There are a number of resources here. Ipves on Twitter, our forums discuss ips IO very active. That's one of the number one places that I send people.
00:53:51.934 - 00:54:44.900, Speaker B: If they want to ask a question, they want to be able to get an answer in a way that is crawlable, searchable and findable by people that follow along in their footsteps. The pound IP fest on free node is also bridged from IRC to matrix, so that has like 5000 people. There's really a lot of folks in there, people answering questions on a regular basis. RIpFs on Reddit is also home to a number of good discussions and open questions where people go to ask for help on how to build things. We also monitor the IPFs tag on stack overflow. So basically anytime somebody answers a question or asks a question on stack overflow, we go and look at those and try to answer those as quickly as possible to make sure that you can build your things in a way that is quick and easy and that we can help you along in shipping the things that you want to ship. So that has been nearly an hour and that was really a lot of information.
00:54:44.900 - 00:55:21.758, Speaker B: I hope this was helpful. We will be around in the IPFS support channel on Discord for the Chainlink hackathon for the rest of the term of the event. Please do ask questions. If we can't answer, we'll bring in more people or we'll go and point you to the resources in various communities that can help. But we will be there to try to help you over the hump as you are building, if you are building with ips. Also we have a bunch of prizes that are on the website and Keenan also just put them in the IPfest support channel today and pin them. So that's a quick reminder of what the different categories are.
00:55:21.758 - 00:55:32.914, Speaker B: We'd love to see the tools that you build and we'd love to help you build them. So thank you very much for having me for this epic walkthrough of a whole bunch of IPFs stuff. Definitely reach out if you want to learn more. Thank you.
00:55:33.032 - 00:55:44.642, Speaker A: Fascinating stuff. Thank you so much Dietrich, for joining us and sharing all that. Everyone, I dropped your questions that were in the YouTube channel into the discord since we're running out of time. Definitely hop.
00:55:44.706 - 00:55:47.000, Speaker B: I can't see two screens at once, man.
00:55:47.850 - 00:55:59.506, Speaker A: Yeah, so all the questions will be in the discord. We'll be able to get those this afternoon. But Dietrich, that was amazing. This is the future of the Internet. It's fascinating.
00:55:59.698 - 00:56:00.934, Speaker B: Hope, we hope.
00:56:01.052 - 00:56:02.520, Speaker A: Work to do it. Yeah.
00:56:02.970 - 00:56:03.382, Speaker B: Cool.
00:56:03.436 - 00:56:09.210, Speaker A: Well, thank you, everyone, and stay tuned. We got some more workshops later today and then. Yeah, thanks again, Dietrich.
