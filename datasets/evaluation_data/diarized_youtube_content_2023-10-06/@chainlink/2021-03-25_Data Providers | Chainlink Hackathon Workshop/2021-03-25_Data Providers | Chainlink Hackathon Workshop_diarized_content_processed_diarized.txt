00:02:44.870 - 00:02:58.940, Speaker A: Hello. Hello. What's going on, everybody? Starting this a little bit early? I'm aware we're starting this a little bit early. Just check everybody. Okay, great. My mic is working appropriately this time. That's good.
00:02:58.940 - 00:04:12.466, Speaker A: So today is actually going to be a quick one. We're just going to go over a couple of data providers. So we have some fantastic data provider sponsors for this hackathon as well that are running Chainlink oracles that have very peculiar and interesting data and we've hosted them in the documentation as well. So we're really excited to show you guys these kind of how to work with them and then why we even want to use them, right, because that's actually going to be an important topic of using these single oracles, right? Because normally when we talk about working with Oracles and we talk about working with data, we pretty much always say we don't want our smart contracts to be reliant on single independent sources, right. This is usually very bad. We don't want to do this. However, there's a lot of data that we still want to get and we still want to work with and maybe we want to use it from a reliable source, right? So this is something that we'd want to use if our smart contract wasn't autonomous or something, right? Like let's say we wanted to buy the price of Tesla or know if there wasn't a Tesla price feed or excuse me, or let's say we wanted to buy a synthetic GME stock on the blockchain and the data was only coming from a single source.
00:04:12.466 - 00:05:12.780, Speaker A: So this could be something that the user could actually decide if they want to interact with or not, right? So in their transaction it'll say, hey, here's the current price and it's up to you to be like, okay, that's a good price, I want to go with it or not, right? And this kind of takes away the issue of centrality, right? Because the user themselves, they are the ones deciding, okay, is this a price that I want to trust? They can even go ahead and check online to see if that the price even makes any sense and then if it does, they can go forward. So you can absolutely 100% work with these, make them safe and secure working with these single oracles. Just make sure that you do it the right way, you go about doing it the right way. This isn't something that you'd build like an amm around, right? Because if all of a sudden the centralized source goes down, you're going to be in trouble. So these can definitely be usable and definitely be used. You just need to know where they have their weaknesses and where not to use them. So that's pretty much it.
00:05:12.780 - 00:05:36.338, Speaker A: So we're excited to go in and show you a couple of quick demos of these guys. So let me just share my screen. I learned how to do the screen sharing thing recently. So let's see if I do it right. Can I do it right? Can it? Looks like I did it right. Nice. All right, cool.
00:05:36.338 - 00:06:12.560, Speaker A: So I have a simple, have a package here that I just recently made and it's showcasing one of these. And then actually let me even share a different screen. Sorry, now I'm getting used to this. Let me share a different screen. Ah, I guess I just have to stop share. Sorry. If I do this, what happens? It's going to be blank, isn't it? 1 second.
00:06:12.560 - 00:06:41.906, Speaker A: It 1 second. I know it's blank. Don't worry. There we go. Boom. Much better. Okay, so in the chain link docs down here, we have this section called data provider nodes.
00:06:41.906 - 00:07:14.782, Speaker A: And these are different nodes that are giving really interesting data. Right? So we have one that's actually, this isn't even interesting data. This is just a specific type of job. So this is an alarm clock job. This is a way to set up a timer to actually call back and get data based off of some time. Now if you're interested in more time based stuff though, I'm definitely going to go ahead and recommend you guys check out the Coven keeper network. This has recently been launched on Coven and it's really exciting because this is a way for you to perform regular autonomous upkeep based on a certain time parameter.
00:07:14.782 - 00:07:56.154, Speaker A: And I can imagine this being worked into many protocols that currently don't have timed updates. Like for example, maybe you want to rebalance your portfolio every one month or something. Keepers could be a way to automatically update that portfolio like every month or every two months or every three months or something like that without you having to go in and actually do it yourself. So really powerful feature here with keepers. But let's look at some of these other data providers. And there are prizes associated with working with these data providers. I think there's about six different prizes right now of $500 each in link for some of these data providers here, for using them in a smart way in your smart contract.
00:07:56.154 - 00:08:56.354, Speaker A: And again, using them in an intelligent way is going to be around the idea that you're using them in a way that it makes sense to use a single data provider, right? You don't have like an amm, that depends on the price or you don't have a very specific autonomous smart contract, but use it in a very intelligent way to get this data here. So we have Kraken, which obviously is the exchange Tingo Geodb, which we're going to actually be the one focusing on the rundown. This gives like sports data, great for sports betting, DNS ownership watch signals, luxury watch price. I think this one's actually really fun and might be an indicator of how the market's doing based off of how these watch prices are doing. Really cool stuff here. So let's go ahead and let's focus on this geodb oracle node. So if you guys have seen any of the request and receive or they make an API call jobs before, this is really similar and it's almost the same thing.
00:08:56.354 - 00:10:02.502, Speaker A: So if we scroll up to using any API, make an existing job request, this is what we're doing, right? So in our code we're not actually going to be putting HTTP get htp gdb.com because the job ID of this oracle, the job associated with it, is already doing that task on the back end, right? It's already doing that adapter on the back end. So we're just going to be calling it and say, hey, can we get the numbers of geocache users in an area during the time? And if you're unfamiliar with geocache, it's a fun little app that rewards users for sharing their data based on their location. So we're going to see how many people are in an area and it might be an indicator of foot traffic, it might be an indicator of how good a site would be for advertisement it might be a good idea. There's a ton of different use cases around getting this type of data or really any of this type of data. So we're looking for really creative ways in using this data. Creative and also safe, right? That's the other important thing, it's creative and safe ways.
00:10:02.502 - 00:10:47.240, Speaker A: So if we look at some of the code here, we can see it's really similar to making an API call, right? The only difference is we won't add like a rec, add HTTP get. We'll do like a rec, add the different parameters so latitude, longitude, radius, start and end. And this is time. So you don't see an HTTP get because the job ID is already going to have all that information. And you guys want to try this out in remix, you can come to remix and try it out too. Remix recently updated and they got these fun little slowly things here now. But yeah, so it's going to be the same thing.
00:10:47.240 - 00:11:18.586, Speaker A: But as you can see here, we're just not doing that. We're not adding like the HTTP gap because it's already happening on the back end. We can definitely try this in remix. I went ahead and created a one in Brownie. Patrick Alpha C auditories here. If you guys want to get clone and work with it through here, this will already have it in a smart contract framework. If you want, I'm going to even start my own repo.
00:11:18.586 - 00:11:50.422, Speaker A: This is the chain link Devrel GitHub user, so a little bit different. So geodob brownie repo if you guys want to play with it. So we have all our code in here. It's pretty much the exact same code in our brownie config. I know it looks gross, but it's not, I promise. We've defined the geodb oracle, which is the oracle that we need, and the geob job Id, which is the job id that we need. So again, this is going to look really similar to making an API call, making that get request.
00:11:50.422 - 00:12:38.314, Speaker A: The only difference is in our code we're actually not going to be making a get request. We're literally just going to say, hey, use this job ID. It's already going to make the get request and then we're going to add the parameters like. So if you want to see this end to end, we can just run brownie, run scripts, deploy and fun geodback coven. And you can see I have a deploy and fund GeoDB. So it deploys the smart contract right here. And again, I know for those of you who are more familiar with hard hat or truffle, it's doing the same thing just with Python syntax, right? So it starts at our main function, we get our wallet or our account, our main account which we're going to be deploying from.
00:12:38.314 - 00:13:36.762, Speaker A: We're going to take that GeoDB contract and deploy it using the different constructor parameters. If we scroll up to the constructor we can see it takes an Oracle job ID fee and link address, which we're getting from the brownie config here. So Oracle job Id fee address and then we're going to be doing this funding bit here. So we're saying GoDB has been the latest one deployed and we're taking this link token interface at the address of the link token and we're sending one link, or maybe this is actually, hold on, 1234-5671-2345-6789 1011. So we're sending yeah, we're sending one link to this contract from DB and we can even go and check it out. Says funded. Want to go to COVID ether, scan this contract in and be like is that a link? There it is created 1 minute ago, has one link.
00:13:36.762 - 00:14:23.926, Speaker A: Awesome. So now that we've deployed and funded it we can run brownie, run scripts, quest and read network COVID. So this is going to call this request function. It has this request users and we're adding these as the parameters. We're saying at this latitude, at this longitude with this radius between this time frame, how many users have shared their data? How many users have shared their information? So we're going to be calling this and then we're actually going to wait for the transaction to come back, for the second one to come back and then we're going to print out the response here. So we do that kind of a little bit cheeky here. We just do a time sleep for 25 seconds.
00:14:23.926 - 00:14:56.346, Speaker A: Hopefully that's enough time. Clearly it's not in this case. So let's even just do this. We'll try it again, comment that part out. This is an important piece so hopefully it'll have responded by now. It looks like it's still going through but we'll give it another minute or two and then we'll check to see. Right because again the reason that we have to wait is because we're doing that request and receive.
00:14:56.346 - 00:15:42.866, Speaker A: We're doing two transactions here, we're requesting data with our request which we've already kicked off so we don't have to do it again. And then we're going to be receiving the data. Right. So in that second transaction that's how we'll actually get the number of users. So now that we've waited long enough for that transaction to actually go through we can see we actually have a response now which is this, that's hardhead syntax and obviously this is actually not this big of a number. It's 1234-5678 it's actually 132,159 people have responded with data here. This is some really powerful data and anybody can do something like this.
00:15:42.866 - 00:16:38.360, Speaker A: Anybody can spin up their own oracle that gives kind of this really interesting data from a reliable data source and edit as a job on their node. So before I go on, are there any questions about this or working with at least this geodb or even this brownie package or any questions? There are no questions. We can actually move on and we can check out another one of these data providers. So let's scroll down let's look at the rundown. Right. It's a leading platform for real time ODs on the most popular sportsbook, sports and markets. So this is a perfect example of being able to create ODs or have a sports betting application.
00:16:38.360 - 00:17:21.940, Speaker A: Obviously, again, this is coming from a centralized source, but we can put the responsibility onto the user if we say, hey, here's what the ODs are according to this API. It's up to you to agree or disagree. Then it's up to the user to decide if they think it's a good bet or not. So the smart contract not being autonomous makes it a lot safer than had it been autonomous here. So we can scroll down, we can see what this takes. So it's going to take a match ID, and from that match ID it's actually going to respond with the answer there with the score. So let's go ahead and try it.
00:17:21.940 - 00:17:46.700, Speaker A: And again, same thing as always. We need in our wallet, we need some test ETH. We also need some test link. We can find both of those in the chain. Link documentation link token contracts, scroll down coven. These will always have the most up to date faucets. If one of them isn't working, let us know.
00:17:46.700 - 00:18:15.794, Speaker A: So we'll do the rundown again. This is on COVID. Let's go ahead and compile this. Great. Switch to injected web3. And again, we're trying this one on COVID here. All we need to do deploy is add the oracle payment which we're going to do 1234 567-123-4567 810 which again this stands for point one.
00:18:15.794 - 00:18:55.086, Speaker A: Like deploy this. We're actually going to be calling again this the rundown Oracle which actually didn't even look these guys up. The rundown NBA odds, NFL ODs, MLB ODs, NHL ODs. There's even a movie called the rundown. Stay ahead of the game. We can get data from here, we can get ODs from and you can even check out the different APIs on rapid API or any of their documentation that they have here. Learn more about.
00:18:55.086 - 00:20:01.798, Speaker A: Okay, what are they actually offering? What is the actual API that these guys are offering here? So I'm not going to be too patient to wait for it to load, but once we have it and this will be the remix way of doing it. So we're doing the same thing that we did in Brownie with that other contract. We're going to be sending it some link. One is definitely overkill, just case we want to make a couple more. So we're going to send it one link this way we're going to get back the score of this match, right? Whoops. This is the testnet, so sometimes things fail. The question obviously is going to be okay, what match are we going to do here? If we go back to the docs here, here's an example, match id we go, you can check out like the rundown task from the chain link docs here.
00:20:01.798 - 00:20:51.670, Speaker A: And again it just kind of kicks us back over to here. But what we'd want to do is we'd want to find out what matches this. What match ID is this? Or we'd want to find a match ID which we should be able to find actually in the docs. So if we scroll down, this is where we actually would want to go to rapid API and get their docs here. Events, dates, events, games, sport iD. We're looking for match ID, teams, schedules, sports. You probably have an external adapter grabbing the correct match id.
00:20:51.670 - 00:21:49.686, Speaker A: Well, let's try it anyways. So request score. We're going to do the oracle is here and the match iD again, let's just grab from this example here, this cross the score. Looks like I made a mistake here. That's probably why. Let's try again. Oh, valid array of five values.
00:21:49.686 - 00:22:37.478, Speaker A: So I'm probably adding one of these in here. Wrong address. Java d matchity two. Oh, what am I doing wrong? I it doing some wrong here, guys. Apologies. I'll update the doc so it's more clear what's going on there. But that's another example of a different oracle we can get.
00:22:37.478 - 00:23:29.274, Speaker A: We see these different types of data here. We have, like I said, watch price DNS ownership, the rundown tingo, you can do a lot of really cool stuff here. So I probably will put the sports book, the rundown into a brownie one just so I make sure I get it correct because cut the geodb one down, which is really cool. So with that, yeah, again, there are prizes out for these right now and we're really excited to see people use these again in really safe, in ways that make sense. There's a lot of data here that the price feed doesn't cover. Ideally we're going to have data feeds for all this data, but at the moment when there's kind of limited resources to get this data, we can use it from one of these kind of first party oracles and go from there. So without further ado we will take questions and yeah, I know this was a quicker one today.
00:23:29.274 - 00:24:23.226, Speaker A: We're probably going to get done in the next five minutes. It are there any questions, thoughts, comments? It if there are none, we can go ahead and jump off. Hopefully, no questions mean that this is super straightforward and that you guys are going to go out and build amazing things with this. So that's what I'm anticipating. That's what I'm expecting. Great. Well, if you guys have any questions, you can always find us in the discord and ask as many questions as you want there if there are no questions for this.
00:24:23.226 - 00:24:29.750, Speaker A: And best of luck, everybody, and we'll talk to you soon. Bye.
