00:00:03.930 - 00:00:04.480, Speaker A: It.
00:00:18.400 - 00:00:49.746, Speaker B: Hey, everybody. Let's see. Just trying to confirm if you can hear me. So, yeah, I guess I'll go ahead and get started. My name is David Goldberg. I'm part of the synthetics team. Really excited to be here to show you a few things about how synthetics works, so we can just jump right into it.
00:00:49.746 - 00:01:35.650, Speaker B: There's a number of things I wanted to cover, I guess the first and foremost, for those who aren't familiar with the synthetics platform, go ahead and share my screen here, and we will take a look at the synthetics documentation page, which you could find by navigating to docs. Synthetics IO. So, a couple of things to point out here. If you go to integrations, the integrations drop down menu on the left side there. Let me see if I can blow this up just to make sure everybody can see it. So, a few things that are important. Obviously, for those of you who are familiar with synthetics, we offer a number of different features around trading synthetic assets.
00:01:35.650 - 00:02:25.134, Speaker B: In addition to that, you can stake your SNX to earn rewards by providing liquidity to the protocol. So there's a number of things we can cover today. I was thinking we'd start off by talking a little bit about what synthetix is at a high level, and then I can kind of segue into a few different areas that I think will be important as you look to start building on top of synthetics. So, at a high level synthetics, you can create synthetic assets on the synthetics platform. Any asset that has a price feed associated to it. Right now, we support several different synthetic assets, and if you want to read more about it, you can probably take a look at the light paper. It's not too long, so you should be able to crank through that to give you a high level overview.
00:02:25.134 - 00:03:12.734, Speaker B: But then, in addition to coming on and being able to mint synthetic assets, staking your SNX, you can basically then trade synths. So, synths are synthetic assets that represent our real world assets, or crypto assets that have a price feed associated to it. And so we currently use chainlink for our oracles. So very excited to be here and working with them. One of the things that's important here to keep in mind is that when you do an exchange of synths, you get sort of thinking it as repricing the debt in the system that's associated with synthetic assets. So maybe just starting at the very beginning here, a basic flow. So I come on synthetics.
00:03:12.734 - 00:03:57.600, Speaker B: I want to stake my synthetics again. Maybe some of you are familiar with this, but I'm going to go over it anyways. So I stake my synthetics. What that allows me to do is it allows me to mint synthetic assets. So if I go to staking synthetics, IO under the staking, in the staking dap, you can mint and burn synths. And what happens when you do minting is you're basically sending your synthetics a staked value, right? And that allows you. That's basically the collateral, you can think of it, that allows you to mint SUSD, which is the synthetic stablecoin representing US dollars.
00:03:57.600 - 00:04:51.038, Speaker B: And then once you have those susd, there's a number of things you can do with it, right? You can swap it into other synths, which, as I was explaining, when you do that, it sort of reprices the synthetic asset that you're holding. So, for example, let's say you wanted to go from s USD, you stake your SNX, which allows you to mint susd. You take that SUSd and you wanted to convert it into s ETH or SBTC or even s Tesla, right? You could do that, and we'll talk about where that happens in the code in a second. But basically that's part of what synthetix is here. So we have staking, which is the Dap. That's for staking your SNX. You become eligible to earn rewards for staking that you do have to keep a C ratio, which is a collateral ratio.
00:04:51.038 - 00:05:42.050, Speaker B: Currently it's 500% is the target. So basically, let's say I put in for simple math, let's say I put in 1000 USD value of SNX. I would be able to create $200 of SUSD because I have to have my collateralization ratio at 500%. And then as, let's say I went into S e from S USD, as I go into a different asset, maybe my c ratio changes and I need to then make sure I'm keeping my C ratio at 500%. But by doing that, you're earning SNX rewards. So it's a pretty powerful system, if you're not familiar. But anyways, that's sort of staking.
00:05:42.050 - 00:06:26.770, Speaker B: So now I guess I'll just jump through some of the more kind of exchange related API level stuff. So the target contract for exchanging is synthetics, right? I guess let's take a step back here. If we go to the synthetics GitHub, which is just synthetics IO, so you go to synthetics GitHub, there's a number of different repos, which I'll explain, maybe the important ones for you to think about what you really want to do is look at synthetics. This is going to be the smart contracts. So if you go to synthetics, you'll find the smart contracts here. And then if you think about just kind of the steps there. So you have your target contract being synthetics.
00:06:26.770 - 00:07:26.500, Speaker B: And then we use a proxy system. So you would basically just call these methods, like exchange, or exchange on behalf, and then it'll emit these events. You could look at this documentation, and if you have any questions at the end of the session today, I'll give you my telegram, my discord, my email, whatever is the best way for you, and happy to be a resource and happy to answer any questions as you go along. Building on synthetics. So an example, if you go down, you can see this would be an example of exchanging, right? So we actually call the exchange function on the synthetics contract here. We're using the synthetics JS library in order to actually communicate with our contracts. So this would be an example of how you would do it down here.
00:07:26.500 - 00:07:45.530, Speaker B: So that's trading. We've got a lot to cover. So I'm just going to keep moving and just want to give you. This is meant to be a high level overview. And then again, if you have any specific questions, feel free to get in touch with me. You can join our discord or find me on telegram, and I'll provide. Provide all my contact information at the end of the session for settlement.
00:07:45.530 - 00:08:51.726, Speaker B: So, basically, one of the big challenges that we've dealt with has been a lot of stuff related to front running. So you could imagine if someone sees, oh, we're going to basically convert SUSD into ETH, and they could take advantage of price inefficiencies by basically front running the system. That's obviously an issue that I think most protocols struggle with. And so what we've done about it is we've introduced the idea of fee reclamation, where following all exchanges into a synth, there's a waiting period that has to expire before you can exchange out of that synth. So you can imagine this would be like, I go from SUSD, like I was explaining before, into s e, for example, and then I have to wait three minutes or whatnot for the funds to actually settle. If there's not a sufficient balance after settlement attempts typically will fail. And so you want to use this transfer and settle function.
00:08:51.726 - 00:09:52.178, Speaker B: And an example would be, we list it here, and then you still have your target contract of synthetics, and you'd call settle. If we kind of skip down here a little bit. There's certain events that are emitted, and here's an example of where you'd actually use settle to make sure that you're taking into account the fee reclamation period. So that's an important piece to know about. And then I would say another kind of. While we're on that subject, to piggyback off of it, we introduced this concept of virtual synths. So basically, whenever you're doing these exchanges, there's a new ERC 20 contract that's created with virtual synths that represent a one on one claim against those underlying synths that are kind of in this settle period because of the fee reclamation front running problem I was talking about.
00:09:52.178 - 00:10:41.134, Speaker B: And so it might be good for you to know about virtual synths, and basically those can be split up, transferred to other wallets, and then once the fee reclamation period has expired, you could check where is the fee reclamation period for a given exchange of synths using this function, waiting period, sex off of system settings. And so then anyone can settle the virtual synths, burn them, transfer them to the holder. And so, yeah, this was pretty needed to help kind of with that user experience around having to deal with the fee reclamation problem. So it's probably good to maybe familiarize yourself with virtual synths. Again, this is pretty high level. So there's a function called exchange with virtual on the synthetics contract. Here are the events that get emitted.
00:10:41.134 - 00:11:11.014, Speaker B: And then here's another example of settling your virtual synth. And if we keep going down here again, we've got a code snippet here where you can see how to use the virtual synths. So, again, there's a whole bunch of stuff here. So what I'm trying to do is kind of give you an idea of where you want to look for different things as you're going along. So that, I think, is somewhat important. So then we'll talk about staking. Right? So real staking.
00:11:11.014 - 00:11:34.782, Speaker B: So that was kind of just the exchanging flow we just looked at. Now maybe we can focus on staking for a second. So again, SNX stakers, they lock SNX into the synthetics protocol. That's basically taking on a debt position. So the way that this basically works is for simple math here. Let's say you had a million dollars in total debt in the system. Million dollars in SNX.
00:11:34.782 - 00:11:47.858, Speaker B: That's issued debt in the system. Right? And let's say of that million, just for simple math, I was 100,000 of that million, which means that basically, I'm responsible for 10% of the debt pool.
00:11:47.954 - 00:11:48.600, Speaker C: Right?
00:11:49.610 - 00:12:55.930, Speaker B: What happens if, as synthetic assets that have been minted either decrease or increase in value, like SUSD, will remain stable. But if you were for all the s ETH and SBTC, you could imagine that the price of s ETH or the price of SBTC goes up if BTC and ETH goes up, because they track that. And so as those price moves, when prices increase, basically what happens is there's more debt in the system. So if you look at our light paper, we've got a pretty good breakdown of explaining this if we go here. So, basically, what we're looking at here is, in this first example, medio started with 50,000 SUSD. And again, this is from staking the SNX to create the SUSD. And so to mint it, right? We looked at the minting part of the dap, the staking dap.
00:12:55.930 - 00:13:30.370, Speaker B: So here medio created $50,000 worth of debt. Yon created $50,000 worth of debt. So there's 100,000 debt in the pool total. Right? So let's say medio goes 100%, converts 100% of his funds, his or her funds, into SBTC. So then what happens is now the balance is 50,000 sBTC for medio and zero SUSD. Right. And then yon just decided, I just want to keep my funds in SUSD.
00:13:30.370 - 00:14:03.202, Speaker B: Right? So there's still $100,000 in total debt. In step three here, let's say BTC goes up by 50%. And so now medio has got $75,000 in synthetic value, synthetic asset value. This is the equivalent of SUSD value, but it's really $75,000 worth of SBTC. And then yon is still just sitting in SUSd. Right. So now you can see the total debt has increased because the price of BTC went up.
00:14:03.202 - 00:14:11.174, Speaker B: So now there's more debt in the system, because, again, if medio decided to sell all 75,000 SBTC, there has to be liquidity for that.
00:14:11.212 - 00:14:11.558, Speaker C: Right.
00:14:11.644 - 00:14:39.006, Speaker B: And that is where the debt pool comes into play. So now, let's say medio decided to withdraw 75,000. Basically, yon kind of paid the price a little bit for staying in. There's. There's. There's a bunch of stuff we're doing to try to help people hedge with this sort of debt pool risk and everything like that. But I just wanted to illustrate to you how the debt pool works.
00:14:39.006 - 00:15:05.542, Speaker B: And again, the inverse would be true. So you can see, basically, let's say, well, we have inverse assets as well, which we can get into. It's probably not as important as some of this other stuff. But let's say the price of SBTC went down instead of up, then the total debt would be reduced. Right. And so the debt pool attracts the prices. It's just the total debt in the system.
00:15:05.542 - 00:15:47.666, Speaker B: And so in this case, let's say Yon just stayed in SUSD. In order to remember it hit that 500% C ratio, collateral ratio, Yan would have to put in another, let's say $12,500 to maintain a 500% ratio of SNX collateral to debt. Or yon could burn SUSD, which would then reduce his debt. So you could either put more staking in to maintain that collateralized ratio, 500%, or you can burn since to maintain the ratio. And then it's important to know that. I think if you get under, I believe it's 200%. I'll have to double check on that.
00:15:47.666 - 00:16:19.626, Speaker B: I believe it's 200%. If you go under that you can get liquidated. And so you just want to be mindful of that as you come on the platform. But the rewards are strong. So for taking this risk, you're compensated for taking that risk by earning SNX rewards that you can claim. All right, so anyways, that's kind of just give you a little example of staking. You can see the total issued.
00:16:19.626 - 00:17:00.166, Speaker B: Since excluding ETH collateral, you can do ETH collateral as well, which again, maybe a little out of scope. So upon staking your sNx, you get susd. That represents the current debt position in US dollars. And then as prices change with oracle updates, the size of debt pool fluctuates as we looked at. And so the staker's debt may decouple from the amount of was that was issued. And I think that example hopefully demonstrates. Yeah, and again, to account for this risk of stakers are taking on by being exposed to a shared debt pool, they'rewarded each week in the form of SUSD trading fees and SNX inflationary rewards.
00:17:00.166 - 00:17:14.720, Speaker B: And then if you wanted to see what the incentives are, you can go to the system overview incentives area. And this will walk you through examples around incentives. So if we go back to.
00:17:15.330 - 00:17:18.546, Speaker A: Let's see, where do we. I think I just jumped around here.
00:17:18.648 - 00:17:43.978, Speaker B: So we go back to staking. So for staking, for opening a position here, we have an issuance API and so on the target contract synthetics, you're going to use these functions. Issue synths. Issue synths on behalf, issue max synths, et cetera. And again, that's really what's happening when you see here, like mint max or mint custom amount.
00:17:44.064 - 00:17:44.458, Speaker C: Right.
00:17:44.544 - 00:18:45.180, Speaker B: This is on the staking death. And so here's an example of where you would issue a maximum number of synths for a given staker. Actually, sorry, this wasn't for necessarily a given staker, but this would just be how you would issue synths through our issuance API, as far as unstaking goes. So in order to close position, SNX stakers need to burn enough SUSD to cover their debt position, right. And so you can check the debt balance of and you pass in the user's address and SUSD by using this method here on the synthetics contract. And so, as you can tell, the synthetics contract is mainly what you're going to be is the Abi you're going to be targeting, and there's all these methods like burn. So this is how you would actually reduce, you would close a stake position using these methods here.
00:18:45.180 - 00:18:51.966, Speaker B: And then here's an example down here. And you can go to solidity to see the examples as well.
00:18:51.988 - 00:18:55.726, Speaker A: I forgot to show that here. So, like, for example, I think here.
00:18:55.908 - 00:18:59.298, Speaker B: Just recognize that there's a solidity tab here that will show you how to.
00:18:59.384 - 00:19:01.486, Speaker A: Do the stuff in solidity if you're.
00:19:01.518 - 00:19:45.306, Speaker B: Doing smart contract stuff and then claiming rewards. So SNX stakers get staking rewards each week in the form of SUSD trading fees and SNX inflationary rewards like we were talking about. And so the contract here is going to be the fee pool, and there's these functions, claim fees and claim on behalf. And again, you could come down here to look at how you would do that. But here's the example of how you would do a synthetics claim. So the next thing I wanted to talk about was synthetic was kind of like the data. So basically, synthetics uses the graph subgraphs for keeping track of event log history on ethereum.
00:19:45.306 - 00:20:34.666, Speaker B: And so basically, we could take a look at that. We've got several subgraphs that you could utilize to listen for events and stuff, kind of the flow of how the subgraph goes, if we take a look here. So basically, there's a few different repos that are involved. So we've got synthetic subgraph. And for those of you who are familiar, show a code snippet for a second. The way that subgraphs work is there's like three kind of main elements to using the graph. So let's just look at a simple example exchanges, right? So basically there's three components or three aspects to working with graphs.
00:20:34.666 - 00:21:06.970, Speaker B: I guess maybe you'd say there's more but there's three fundamental concepts to kind of grasp. So one is a yaml file. The YaMl file basically declares, here's the contracts that I want to pay attention to. Here's the event handlers I want to call. It's basically just like a configuration file, right? And if you go to the graphs website, you'd be able to find documentation on this. You'd have like a start block. So you wouldn't want to basically have to start from Genesis block because it would just take too long to build.
00:21:06.970 - 00:21:50.550, Speaker B: So you would want to find what block. Where should I start caring about these events? Like when did I deploy my contract, for example, right? You find the start block there and you put it in there, et cetera. You have this concept of entities. So you can think of like the reason why the graph exists for those who are unfamiliar is because before the graph, what you'd have to do to keep track of events. Like if we were in, let's go to exchanges, because that's the contract that we're looking at now. So if we were in, let's just go to exchange state Sol. So you can see like let's do.
00:21:50.620 - 00:21:51.782, Speaker A: Actually a better example.
00:21:51.916 - 00:22:00.122, Speaker B: I just want to show for those who are unfamiliar in solidity, you can emit events, right?
00:22:00.176 - 00:22:04.830, Speaker A: So where's a good probably example of this? Let's just go to like issuer.
00:22:08.290 - 00:22:53.498, Speaker B: So you can mit events in solidity. And basically before the graph, you'd have to basically go to your provider, like you might have heard of Infira, and you'd say, give me all the events that are happening. And it would just get really expensive and it doesn't really scale. And so the graph came along and introduced this new kind of architecture for this stuff. And basically what it is, is you say, hey, here are the events I want to listen for. And you specify basically an entity that is going to represent data that you're going to end up querying, if that makes sense. So like for example, if we're looking at exchanges, let's go back to that example.
00:22:53.498 - 00:23:24.550, Speaker B: We've got our Yaml file. We declare here are the entities that we want to care about. So synth exchange. And then in the graphql file, which is one of those other elements to it, you see how we have these, let's see, synth exchange. We create an entity. So you can think of us just creating basically like a representation of the data that we're going to care about. And so what's going to happen here is in the YAml file, we're basically saying, here's the entities that we care about that are associated to this contract.
00:23:24.550 - 00:23:36.700, Speaker B: And then here are the handlers, the event handlers. And so what we're going to do is when the synth exchange event gets emitted. Right?
00:23:37.310 - 00:23:39.978, Speaker A: Let me pull this up a little. So to make sure everyone can see.
00:23:40.064 - 00:24:00.260, Speaker B: When the synth exchange events gets admitted, let's call the handler handle synth exchange 32, right? And so what is this handler? Where does this come into play? So the handler, if we go up to these typescript files and we find exchanges, we find the exchanges mapping file. You can see.
00:24:01.030 - 00:24:04.260, Speaker A: Let me just make sure I got the name of that correct.
00:24:04.710 - 00:24:48.530, Speaker B: So basically we can see handle exchanges 32. And so if we come back up here into exchanges mapping, we find handle. See how we have our function here that's going to get called when the synth exchange event fires, which is going to call this function here handle synth exchange. We come down here, you can see how this is where we are going to basically use the entity and we're going to update fields on the entity. We update the actual entity and then you'll be able to query the entity. Okay, let me just. Sorry, I'm skipping around a little bit, but this stuff is just logic.
00:24:48.530 - 00:25:31.370, Speaker B: It's probably not as important as understanding the fundamental. What's going on here. But basically we update the entity and then using our DAP, we can query the subgraph and pull data off the entity. So now if we want to know, like from this synth exchange, what was the two address or what were the fees in USD, what was the. From currency key from amount, we can query that without having to go spam the provider, which is expensive and doesn't really scale. And then where this is used. So we've covered like there's a Yaml file, right? There's a graphql file.
00:25:31.370 - 00:26:22.186, Speaker B: And then we've also covered the idea of these entities, which kind of represent data on the blockchain, but you don't have to go through the provider, right? So then we have our dapps, right? So we looked at synthetics has two main dapps, right? So we've got the staking DAP, which is again, managing that staking and your debt and claiming your rewards for staking and everything like that. And then we've got Quinta, which is our exchanging DAP. So basically with Quinta you can actually trade the synthetic assets. And so those are kind of like the two dapps. And so what happens next is just kind of in this data flow is you basically have, we have our staking DAP. Right. And we have Quinta, and they both use this library called synthetics data that we've created.
00:26:22.186 - 00:26:49.346, Speaker B: And in that library, we have, like, if we go to index Js in that library, basically, you can see, here's where we use our graph endpoints. So we call the graph endpoint. We get these properties off the graph, and then we basically send them back to the dap. So synthetics data is basically just a library that's sort of like a middle layer between our subgraphs and then the Dapps.
00:26:49.458 - 00:26:50.120, Speaker A: Right.
00:26:52.910 - 00:27:01.818, Speaker B: Hopefully that makes sense. And then, again, where that would be used is somewhere like Quinta. You would basically import synthetics data.
00:27:01.984 - 00:27:13.360, Speaker A: So we could try to find an example of that. So, snx data. Let's see. So if we go to.
00:27:15.590 - 00:27:16.610, Speaker B: Queries.
00:27:18.950 - 00:27:23.220, Speaker A: Yeah, so this should be. Let's see.
00:27:33.830 - 00:27:59.550, Speaker B: Yeah, okay, perfect. So, again, this is just an example. The file that we're looking at is really not important. But you can see we import SNX data from synthetix data, right? And then using SNX data, we are able to call exchanges, which then goes and says exchanges. So we call exchanges. Right. So let's actually look at what that does real quick.
00:27:59.550 - 00:28:23.890, Speaker B: But basically, this is how you basically handle data that's being emitted from the smart contracts and then make use of it in your Dapps. Right. And again, right here, we're in the quinta DaP, and we're using our synthetics data kind of middleware to basically just listen for data and then do things in the DAP.
00:28:23.970 - 00:28:24.454, Speaker A: Right.
00:28:24.572 - 00:28:39.770, Speaker B: Listen for events and do things in the DAP and query the data there. Again, we have a lot more I wanted to show, so I think I'm going to just move on there. But I think that gives you probably a good sense of synthetics data and what you need to know about and care about there.
00:28:39.840 - 00:28:41.900, Speaker A: So let me go back to.
00:28:46.750 - 00:28:54.474, Speaker B: And again, you can access any of our docs at docs, synthetics IO is what we're looking at. And then we just went down and went under the integrations tab.
00:28:54.522 - 00:28:55.120, Speaker A: Right.
00:28:55.890 - 00:29:20.790, Speaker B: So we've covered a lot. We covered trading, we covered staking, we covered data. We covered virtual synths. I think those are all important. One thing we haven't looked at yet is shorts. And I know that there's some aspect of prizes around using shorts, and so I wanted to just kind of go over that real quick for a second. So, in terms of shorts.
00:29:20.790 - 00:29:39.520, Speaker B: So this concept of shorting. Right. So we first introduced shorting with inverse synths. So, basically, you could purchase IBTC or ieath, and they kind of move in an opposite direction. So as the price of bitcoin goes up, the price of Ieath, IBTC goes down. So it's like an inverse. Right.
00:29:39.520 - 00:30:31.194, Speaker B: There's a number of reasons why we decided to introduce shorting and are saying we think that that is probably where we're heading in terms of offering people the ability to short assets instead of sort of this inverse pattern. And so the idea of shorting. Let me pull up like so, the contract you'd want to look at. Let me go back to synthetics repo. So if we go to the synthetics repo, which is where all the contracts are, and we go to, let's see, collateral short. All right, so basically here in collateral short, this is probably the main area where you'd want to look around shorting. So we've got all these collateral manager, like, all these different contracts around collateral.
00:30:31.194 - 00:32:04.220, Speaker B: Anything that starts with collateral is probably going to be related to shorting. But where you want to probably look is collateral short. And what's in here is you can open a short position, you can close a short position, you can withdraw, you can draw down your short, you can liquidate your position. But I think one thing that's important here to think about is, like, what is shorting? And what is the actual mechanism that we're using here? So I'm just going to do, like, a simple example right here to show you kind of mathematically how this works. So let's say you deposited, like, 12,000 SUSD because you were interested in shorting a synthetic asset, right? So you deposit your SUSD, you basically have, with shorting, the collateral ratio you have to have is 120%, I believe. So what this allows you to do is this allows you to basically get $10,000 worth of s E. Let's say you wanted to short ETH, right? So what we're saying here is you send in 12,000 SUSD and you can get basically 10,000 se.
00:32:04.220 - 00:33:29.858, Speaker B: And then what will happen is you're thinking that the price of ETH will go down, right? So this kind of s ETH here gets converted into, basically you can think of, you have like $10,000, right? And now let's say, actually, I believe this would be like $12,000 USD equivalent of ETH, right? And we basically give you $10,000 of SUSD. And let's say the price of ETH goes down, you now can sell this SUSD and get back basically a profit from doing that. And if the price of Se goes up, then you obviously need to put more in in order to maintain that 120% ratio. So this is just like a mechanism we're giving people where they can basically bet on the price of an asset going down, if that makes sense. So that's like the idea of a short is basically you're sending funds in. I don't know if I would call it a loan, but you're basically sending funds in. We're giving you, you have to have 120% above what you then get converted into SUSD.
00:33:29.858 - 00:34:18.310, Speaker B: And then again, if ETH goes down, you can sell your SUSD back for a profit, because you have that sort of, that difference between what you put in and then what you're issued in SUSD. And as it goes down, you make money. So that's how shorts work from a conceptual standpoint. I'm not sure if I explained that well, or maybe there's some confusion there and where you would interact with the functions and collateral short here. So thought that was an important topic to cover. And then the last thing I wanted to go over is synthetic cli. So basically, if you go to the libraries and then you go to synthetic Cli, this is a set of utilities to interact with synthetics protocol.
00:34:18.310 - 00:35:22.794, Speaker B: So as you go to play around with stuff, I'll show you a little example of how you'd get set up with this and everything. But basically you can call contracts, and you can interact with contracts even on Mainnet or covan through the terminal, which is pretty nice. And so there's a couple of things like you want to do, right? So the first thing is you want to make sure you have the synthetics repo and the synthetic ClI repos. And again, if you just go to synthetics IO on GitHub, you'll find synthetics you can clone, and you'll find synthetic Cli as well. If you just go down here, right? And then what you're going to do is basically in synthetics, the synthetics repo, you just run NPM link, and then you'll probably want to run NPM install first. But then you run NPM link, then you go into synthetic Cli repo and you run NPM link synthetics. And what this is going to do is it's going to basically link the two repos, and to let you know what's going on there.
00:35:22.794 - 00:36:22.240, Speaker B: What's actually happening is in synthetics we have a publish folder, and in publish we'll basically have different versions of synthetics. So if we went down to Mainnet, right. What it's going to do is it's going to basically, by linking them like we just looked at here, you're basically saying, it's basically telling synthetic Cli where the synthetics contracts are, what their Abis are and what it should care about. So it looks for the publish folder, and that's what's happening when you do these example. So another thing you're going to want to do around synthetic cli is you're going to want to minimize this here. You're going to want to have like an en. So in the repo, when you clone it, there's a env example.
00:36:22.240 - 00:37:15.886, Speaker B: And what you'll want to do is if you want to do read calls, you don't need to do this, but this is very helpful if you wanted to do any sort of signing transactions or doing anything. For example, you might want to spin up synthetic Cli on Covan testnet to see if your contracts, once you deploy them to Covan work. And so what you would do is you would basically, again, first step is go on metamask, switch the network to Covan, go on Covan faucet and get a couple ETH. Fake. These are fake ETH because it's a testnet from the faucet. Put it in your metamask wallet on Covan, and then put your private key from your wallet here. I'm not going to show this example just out of security reasons, like I don't want to show my private key or anything.
00:37:15.886 - 00:37:52.694, Speaker B: Even if it's for a testnet on Covan, it's probably not a good idea, just out of principle. So basically, yeah, you just get your private key from your Covan testnet address, put it here, go on infura. If you're not already signed up, get a provider URL for Covan. And then what that would allow you to do is actually sign transactions when you call them in the terminal. So I can blow this up here. So you can see basically I'm on the Covan testnet. The way how I did that was basically by specifying the network as Covan.
00:37:52.694 - 00:38:33.938, Speaker B: Otherwise, if you don't, I can just do NPM start and it will basically pull up Mainnet, the network mainnet here. But if I wanted to work on Covan, I can run this command and then specify the network as Covan. And now you can see I'm on the Covan network. And again, right now it's read only. That's because I don't have my private key set up with a provider URL. But if you wanted to sign transactions to make sure your code works, you could do it that way anyway. That's pretty helpful, hopefully.
00:38:33.938 - 00:39:19.910, Speaker B: But you could see here, as I spin this up, we can go into the synthetics contract. We can look at. Show me the synths, and it'll give us back the information here, or what's the owner of the contract. And so this is a way for you to interact with our contracts and stuff. So I think setting up synthetic Cli will be a pretty beneficial experience. That's most of, I guess, what I had today. Another way you could test your code is by using remix, right? So you could get all your code that you need to test into remix.
00:39:19.910 - 00:39:54.530, Speaker B: And probably, I'd imagine, hopefully, you're familiar with remix. If not, there's good documentation on the remix. Ethereum.org, I think so, yeah. And then if you want to look more at, like, our documentation and stuff, we've got, like, the smart contracts section, which got like an architecture overview. And then just a bunch of other kind of guides. But I think this should give you a good basis to go off of, probably to be dangerous during the hackathon.
00:39:54.530 - 00:40:04.120, Speaker B: Yeah, hopefully that was helpful. I'm going to maybe stop my screen share now. I'm keeping an eye out for questions here.
00:40:06.250 - 00:40:07.000, Speaker A: So.
00:40:09.930 - 00:40:32.510, Speaker B: Yeah, well, thanks, everybody. I appreciate your time and for tuning in. I was going to give my contact information. So if you want to find me in our discord, maybe that would be the best place, is just join the synthetics discord. And my name is David G. In the discord, and I'm a core contributor. Yeah, awesome.
00:40:32.580 - 00:40:52.018, Speaker C: Thanks a lot, David. There's a few questions in here, one good one that just popped in. And I know now that synthetics is all a dow. Is it possible for developers to create their own custom synths on testnet? Or is that still have to kind of go through the whole Dow process of synthetics? And how do new synths get created on the network?
00:40:52.114 - 00:41:15.134, Speaker B: Yeah, great question. So how new synths get created? There's a whole bunch of stuff that goes into creating a synth, right. We need to have a verifiable price feed. Right? So we need to make sure something like synthetics supports the synth. Sorry. Something like Chainlink would have support for the synth. And so the way that that typically works is we have a repo on our GitHub here.
00:41:15.134 - 00:41:44.680, Speaker B: Let me share my screen one more time. Basically, you can find our sips repo. And so Sips is just like other protocols we have these implementation improvement proposals. And so you just create a sip. There's community sips. People in the community create sips. And you'd say, like, hey, we want to add this synth, for example.
00:41:44.680 - 00:41:56.780, Speaker B: I think we just looked at one around, adding, like, korean wan, for example. Like, a synth for korean wan to the platform. And so you would just create a sip. And what happens is we have a.
00:42:03.250 - 00:42:28.486, Speaker C: Do we lose you, David? Think we might have lost you, David, but if not, everyone who's listening in, what we could do is, if you have these questions, definitely drop them into the synthetics channel on the discord. Just give us a moment. We'll try to get.
00:42:28.588 - 00:42:33.974, Speaker B: There's instructions on how to submit. Cool.
00:42:34.012 - 00:42:40.426, Speaker C: So it looks like you can add sips, and then the community can discuss. And we kind of lost you there at the end.
00:42:40.528 - 00:43:01.300, Speaker B: Oh, yeah. Sorry. Yeah, I was just saying, you'd create a sip, and then if it was something we want to do, we'd present it to the spartan council, and then the spartan council would give their feedback on it. Anyone can create a sip, right? So it's certainly open to the community and we encourage. Any ideas are good ideas. There's no such thing as a bad idea.
00:43:01.990 - 00:43:13.080, Speaker C: Cool. Yeah. It's crazy how active your governance has become. It's definitely something to model after. And the activity. It's amazing. Great.
00:43:13.080 - 00:43:22.470, Speaker C: One question here. How does synthetics compare to universal market access and vice versa?
00:43:23.290 - 00:43:57.460, Speaker B: Yeah, I have to admit, I joined synthetics about a month ago, so I'm still getting up to speed on what other players in the space are doing and everything like that. It's pretty hard for me to answer that question, just because I'm not that familiar with that. But I think, at the same time, if you wanted to dm me on our discord channel, I'm happy to get you some more information on that, or circle back with our team to try to get that question answered. Well, if I gave my perspective, I really don't know what I'm talking about in that area.
00:43:58.230 - 00:44:08.598, Speaker C: No worries. Awesome. Well, yeah, it looks like that's about all of the questions that we have. If you have more, definitely jump into the discord. What's your username on there?
00:44:08.684 - 00:44:15.180, Speaker B: Yeah, so I'm just David G here. Where would I be able to post this?
00:44:15.710 - 00:44:21.260, Speaker C: I would maybe just drop, like, a hello into your discord channel.
00:44:21.870 - 00:44:43.780, Speaker B: Cool. Sorry. Yeah, so, basically, you can find me on synthetics discord. My name is David G. I'm one of the core contributors. And then that would probably be the best way and again, happy to be a resource any way I can. Even as you're going through with the hackathon like today, feel free to ping me with any questions.
00:44:43.780 - 00:45:07.946, Speaker B: I'm happy to set aside time to talk to anyone, either individually or make sure they get the support or resource they need from our team. I know that can make a big difference when you're I participate in many hackathons myself, so I know that when there's someone available from the team, it's very helpful just to make sure you're not pulling your hair out on things that might be able to quickly get answered if you had access to the.
00:45:07.968 - 00:45:09.610, Speaker A: Right resources and team.
00:45:09.760 - 00:45:39.290, Speaker C: Yeah, you all have some amazing prizes, so we definitely want some people building and this workshop was really helpful. I want to thank you and cryptotoy for organizing behind the scenes and helping kind of rally the Dow and the grants dow to be involved with this and the whole synthetics community because it's not just a few people, it's a whole community. And that's what's amazing about what you guys are doing. So really moment, appreciate all the work. And if you have questions again, jump in the discord care. Otherwise, thanks again, David and we'll see everyone else next stream.
00:45:39.450 - 00:45:41.446, Speaker B: Thanks. Good luck everyone. Take.
