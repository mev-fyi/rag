00:00:00.170 - 00:00:48.794, Speaker A: ChainLink data feeds are now live on Solana, Devnet and Mainet beta, offering developers decentralized, high quality price data delivered on the ultra fast Solana blockchain. My name's Harry, and today we're going to go through a tutorial for using chainlink data feeds on Solana. Let's dive right in. To use link data feeds on Solana, you should head to our docs at docs chain link here and click on the Solana link at the top. From here, you can see an overview over here. Then things are split up into multiple sections. We have using Chainlink data feeds on chain in your on chain programs, and using data feeds off chain here.
00:00:48.794 - 00:01:25.880, Speaker A: And there's also a reference page that lists all of the currently available data feeds for each Solana cluster. So these are the account addresses that store the price data for each specific feed. We'll start things off by going through how to use Chainlink data feeds in your existing projects, both on and off chain. And we'll start with on chain first. So, the first thing to know is that there is a deployed Chainlink data feeds program that contains all of the logic for Chainlink data feeds on Solana. And this is the program ID here of the deployed program. So this is going to be referenced in your code.
00:01:25.880 - 00:02:24.410, Speaker A: And as you can see, it's the same for both Devnet and Mainnet. The program Id and all of the code is open source if you want to take a look at it. Now that we know what the Chainlink data feeds program is, let's begin. So the first thing you'll need to do to add data feeds to your on chain program is you'll need to add the Chainlink Solana crate as an entry in your dependencies here. So, as you can see here, it's called Chainlink underscore Solana. And to add it, you just need to add it into your cargo toml file as a dependency. So I've got a basic demo project here, and if you have a look in my cargo tumble file, you can see it's already been added here in the dependencies section.
00:02:24.410 - 00:03:02.018, Speaker A: Once you've added this, you can now begin using it in your onchain program. So if you go further down here, you can see we have two flavors here. We've got rust sample code and rust using the anchor framework sample code. And in the demo here, I've thrown in the rust using the anchor framework code. So I'll just explain how everything works. So, first, you'll need to make sure you have a use statement with your Chainlink Solana library here. In this case, we're giving it an alias as chainlink.
00:03:02.018 - 00:03:38.740, Speaker A: And to use Chainlink data feeds on chain using this library, you basically just need to make use of three different function calls. So we have one called latest ran data which returns all the latest price information for a price pair. We have one called description which returns the description of the price pair. For example, sol USD, Btc USD. And we have decimals which returns the precision or the amount of padding that's been added to the price. So for example, $75. If the decimals is eight, it will be stored as 75.
00:03:38.740 - 00:04:40.034, Speaker A: In addition to this, we also have an optional helper function here that you can use to format the price data, because the price data is stored with the padding and you can use this to turn it back into a human readable currency such as $75. Now in terms of the three functions that I outlined here, each of them all takes two accounts as an input and they all take the same input. So the first account that you need to pass in is the Chainlink program that I described earlier. So once again, this is the deployed Chainlink data feeds program that contains all of the logic for Chainlink data feeds. So this is a static value here. The second account that you need to pass in is the Chainlink data feed that you wish to query. So this account you can grab from the Solana data feeds page here and you pass in whichever account you wish to query.
00:04:40.034 - 00:05:50.734, Speaker A: So if you want to query solusd on Devnet, this is the account here that you want. Once you've set these queries up, you can then do whatever you want with the price data return. So in this case we're just printing it to the program output and we're using the helper function to format it using the answer, the latest price as well as the amount of decimals. So I'll just give everyone a quick demo here. I have a very simple client which simply calls the execute function in the sample code here, passing in the chainlink program, which once again is this static value here and a chain link feed. So in this case we're querying the devnet Sol USD feed here. So as you can see, we have our program log here, Sol USD price is a little bit more than $65 here.
00:05:50.734 - 00:06:31.120, Speaker A: So just a simple example of using chaining data feeds on chain in your rust program using the anchor framework. Now if you aren't using anchor, we have another sample code that you can use over here, and it's very similar, it's almost exactly the same. The only difference is some of the syntax. So once again we take in two accounts that we need for each function call. So we need the chainlink data feeds program and the chain link feed that you wish to query. And as you see for each of the three queries here, we're still passing those accounts in. It's just a slightly different syntax, and the end result here is the same.
00:06:31.120 - 00:07:32.780, Speaker A: So I'll just show that project as well. And there we go. As you can see, once again we're querying the sole USD price, and it's been formatted and printed to the program output here. So that's how you use Chainlink data feeds on your existing onchain rust programs. So now let's go through how to use Chainlink data feeds off chain in your existing front end or decentralized application. So the first thing you'll need to do is switch the off chain page in the docs here and you'll see that to use Chainlink data feeds off chain, all you need to do is make use of the Chainlink Solana library here. In addition to this, you also need to install the anchor JavaScript library as well.
00:07:32.780 - 00:08:08.386, Speaker A: And then you can use Chainlink data feeds off chain in your application using these two libraries. So once you've added the anchor library, it expects two environment variables present as well that we need to set. So the first one is the anchor provider URL. So this gives us access to the Solana cluster. In this case we're using the free Devnet provider RPC endpoint here. And then the other one here is the use for if anchor needs to generate any transactions. So in our case we're not generating any transactions here, so we don't really need an anchor wallet.
00:08:08.386 - 00:08:55.602, Speaker A: However, you just need to make sure you have a valid one created, even if it doesn't have any funds in it. Once you have this, you're ready to add the code to your application. So we have two examples here, JavaScript and typeScript. We'll stick with the JavaScript example today. So we're using the libraries here, and very similar to our on chain rust program, we're setting the Chainlink data feeds program Id here, which is that static value that I described earlier. And then we're picking a chain link data feed that we wish to query, and you can get that value from the salana data feeds page. Once you've done that, there's just a couple of function calls you basically need to do off chain.
00:08:55.602 - 00:10:43.680, Speaker A: So you call OCR two feed low, passing in the chain link program ID and your provider object here. And then once you've done that you can call the onround function here, passing in the feed address that you wish to query, and then that will basically get you the latest price for that feed and then you can do whatever you want with it. So in this case we're just constantly waiting for updates and printing them to the screen as they come in. So now let's take this code and create a simple JavaScript client for the project that we just demoed earlier. So I'm going to create a new JavaScript file in and and now we will run the client. We're querying the ETH USD feed on the Salana Devnet cluster and as you can see every couple of seconds or so we're getting price updates being displayed on the screen. So these are unformatted responses.
00:10:43.680 - 00:11:29.456, Speaker A: So it's $2,325 around that mark there. So as you can see, very easy to use chanic data feeds off chain as well. You just need to import a couple of libraries and then with literally just a couple of lines of code, you can get high quality price data in your off chain front end or tradfi application or decentralized application. So the last demo that I'll walk through today is using Chainlink data feeds on Solana using the Solana starter kit here listed in our docs. So this is a pre packaged repository that contains everything you need to use Chainlink data feeds on Solana. So it contains both on chain components and off chain components and clients and things like that. And it's all in this self contained pre packaged repository.
00:11:29.456 - 00:12:32.756, Speaker A: So it's great if you're just learning out and wanting to learn how chaining works or how Solana works. So what we'll do is we'll go into the docs here and in the using data feeds on chain page, we'll go down to the Solana starter kit example here. So there's a bunch of required tools that you'll need to install first. Then once you have those running, you're ready to start. So the first thing that we need to do is to clone the Solana starter kit repository here from GitHub. Then once that's done, we need to install all of the dependencies, generate a new wallet file in a file called ID JSON that we're going to use for all of our transactions. And we're going to run the Solana airdrop program to give ourselves some land ports.
00:12:32.756 - 00:13:47.470, Speaker A: So we're going to run it twice because it's limited to two per transaction. Once this is complete, we're now ready to build our anchor program. The program is very similar to the examples I went through earlier, which has the helper function for formatting data and it has the three function calls. So in this case we also take in an extra account and we store the price data in that newly initialized account and we also print it to the program output here. Once that's done, we need to strip out the generated program ID that was generated as part of the build process because anchor requires it in the declare ID section here. So we're just going to strip it out and then we're going to do one more anchor build to rebuild the code with the correct program ID. And then once that's done, we're ready to deploy our program to the Devnet cluster.
00:13:47.470 - 00:14:41.178, Speaker A: Once our program is successfully deployed to Devnet, we're ready to run the client. So the first thing we'll need to do before running the client is set the required anchor environment variable. So once again we need to set the anchor provider URL to get a connection to the cluster and the anchor wallet file we need to set to our generated ID json file. So once that's done, we're ready to run the client. So the client can be found here client Js and it just simply calls our on chain function here passing in the required accounts. So we pass in a new account to be initialized that we're going to store the price data in. We pass in our ID JSon wallet.
00:14:41.178 - 00:15:40.900, Speaker A: We pass in the chainlink data feed that we wish to query. So in this case it looks like the solusd feed on Devnet and we pass in the Chainlink data feed's program id for Devnet as well as the system program iD because anchor requires it to create initialize accounts. So we're going to run the client with this command here. And as you can see we've successfully printed the program log here which has the solusd price. And as per the client, we are reading the account that we passed in after we call the program instruction to verify that the price data was successfully stored and we can see it's printed out to the screen here successfully. So that's for using the Solana starter kit to do on chain functions using chain link data feeds. If you want to do off chain functions, we have that included as well.
00:15:40.900 - 00:16:46.860, Speaker A: So we have a script called read data and we have it in JavaScript and typescript flavors as well so you can simply run those scripts, modify them if you want, choose different feeds. And this is for getting price data off chain without generating any on chain transactions. So there you go. In this case, we're constantly pulling the latest ETH USD feed from Devnet, so hopefully now you've got a good idea of what it's like to use Chainlink data feeds on Solana. So whether you want high quality price data on chain on your rust program, or off chain on your front end or tradfi application, whether you use the anchor framework or if you don't use the anchor framework in all scenarios, Chainlink data feeds has got you covered. Thanks for watching this video, and we'll see you in the next one.
