00:00:00.490 - 00:00:12.320, Speaker A: Hi, I'm Richard, a developer advocate at Chainlink Labs, and in this video we'll be looking at deploying a Bep 20 token onto the Binance smart chain test network. So let's dive in.
00:00:19.250 - 00:00:55.920, Speaker B: All right, so we want to build a Bep 20 token on the Binance smart chain. The first thing you're going to need is a good, reliable wallet for your crypto. Metamask is a fantastic wallet option if you don't already have one. For this tutorial, I am using the brave browser and it has a wallet built in. The brave wallet is similar to metamask, but it's not the same. If you need a wallet, head on over to Metamask IO and download the metamask wallet. There are instructions on this website for how to set everything up.
00:00:55.920 - 00:01:35.370, Speaker B: Once you have your wallet, you'll need to set it up so that it can access the Binance smart chain test network. Personally, I like Chainlist.org. Chainlist.org enables you to, with a couple of clicks, add a network to your wallet. If you search for binance, you'll see there's the binance smart chain main net as well as the Binance smart chain testnet. This is the one that we'll be using for this tutorial. If you click connect wallet, it'll connect your wallet to this website and then you can just add it to your wallet.
00:01:35.370 - 00:02:39.600, Speaker B: At this point, it'll ask you for a confirmation and just like that, you have created a connection to the Binance smart chain test network in your wallet. Lastly, the setup piece that we will need to go through is securing some B and B for deploying our BEP 20 token to the Binance smart chain test network. You'll need to take your wallet address and request some BNB in a few moments. You should see that your wallet now has some BNB in it. At this point, you have everything you need to get started developing on the Binance smart chain test network. Where do we go from here? First, let's take a look at Openzeppelin. Openzeppelin is quickly becoming an industry standard, if it's not already.
00:02:39.600 - 00:03:17.094, Speaker B: They have contracts that have been audited and battle tested, and you can use these contracts for deploying your own smart contracts. They basically provide the scaffolding you need to get started. If you take a look at contracts, you'll see they have a getting started button here. This is for installing their contracts locally. If you're doing local development for this tutorial, we'll be using remix so we don't need to worry about this so much. But if we head on over to their docs, we can see a few things. Now, we're deploying a BEP 20 token.
00:03:17.094 - 00:04:10.060, Speaker B: It's not an ERC 20 token, but it's based off of ERC 20 tokens, and we can use their ERC 20 token contract to deploy our token. It might seem a little bit confusing, but just remember Bep 20, it's based off of ERC 20, so a lot of the functionality is the same. You can either copy this contract right here and take it over to remix, or we can take a look at this wizard. The wizard is awesome. It lets you do a ton of stuff right here in a nice format. If we want to name our token something like BSC coin, and we want to give it the symbol, I don't know, BSCC, and we can even determine how many we want to mint from the get go. We'll just start with 100.
00:04:10.060 - 00:04:32.180, Speaker B: There's a bunch of different features you can turn on, make it mintable, burnable, pause the minting. We'll just keep it really simple for now and then. There's two options here. We can either copy this to our clipboard and head over to remix, or we can just click open and remix. And just like that, our contract is in. Remix. Ready to go.
00:04:32.180 - 00:05:00.426, Speaker B: That's awesome. Let's walk through what this contract actually has in it. The first thing is pragma solidity, and it tells us the version of solidity that we'll be using for this contract. Next, we import that open Zeppelin contract for the ERC 20 token. Now, remember, this says ERC 20. We're actually building a BEP 20. And finally, we get to the actual contract itself.
00:05:00.426 - 00:06:02.160, Speaker B: You'll notice this contract's tiny. That's because we're taking advantage of all of the functionality that Openzeppen gives us. In their contract, we have our constructor, where we give it the name and the symbol for our coin, as well as the mint functionality, which will pre mint or create 100 tokens. Now, this bit here looks like it might be creating a little bit more than 100 tokens, right? That's because solidity doesn't understand the concept of decimal places. In this case, we're taking our initial supply of 100 tokens, multiplying it by ten to the power of decimals, which in this case is 18. That gives us the ability to split our token into smaller quantities, because we are just essentially inflating the number to act like it has a decimal place. All right, so how do we deploy this.
00:06:02.160 - 00:06:49.530, Speaker B: Well, we head over here. We need to make sure that we pick injected web3 for our environment that will actually take our wallet information, inject it into remix so that remix can interact with the binance smart chain test network. Once we do that, we simply need to make sure that we have the correct contract selected and click deploy. At this point, you'll see we need to confirm this transaction because we're interacting with a real blockchain network. There is a gas fee associated. Remember, this is why we got BNB from the faucet. For the test network, we click confirm, and at this point, it's deploying to the blockchain.
00:06:49.530 - 00:07:28.380, Speaker B: It may take a moment, but you should see a success message like this. And now you'll notice under deployed contracts over here, we have our actual contract for BSc coin. If you take a look at it, there are quite a few functions underneath this contract. In our contract, we didn't give it any functions. These are all coming from the imported contract via open zeppelin. We can check out things like decimals. Remember how I mentioned decimals was 18? Here we can see the value of decimals for our coin, as well as the name and the symbol and how many there are.
00:07:28.380 - 00:08:03.874, Speaker B: This number, remember, is multiplied by ten to the 18th. If you want to see your contract actually deployed on the binance smart chain testnet Explorer, we'll need to take this address, the address of our contract, and head on over to testnet bscscan.com. And there it is. It's deployed. And you can see that it's BSC coin, our name. There's its symbol. We can see that it was just created a few minutes ago.
00:08:03.874 - 00:08:25.610, Speaker B: And just like that, you have created a token, a BEP 20 token, on the finance smart chain test network. From here, you could take this token to the main chain. You can even use this solidity code to deploy the same token on any EVM compatible network.
00:08:26.670 - 00:08:38.620, Speaker A: All right, well, that wraps up this tutorial. We've built and deployed a BEP 20 token to the binance smart chain test network. Thanks for watching. I'll catch you in the next one.
