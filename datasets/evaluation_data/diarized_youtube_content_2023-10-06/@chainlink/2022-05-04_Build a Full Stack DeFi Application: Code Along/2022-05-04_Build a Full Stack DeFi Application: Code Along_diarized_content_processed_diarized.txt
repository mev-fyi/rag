00:00:12.760 - 00:00:56.900, Speaker A: Welcome, welcome everybody to our full stack defi workshop. We're going to get started in just a moment. How's everybody doing today? Let me know in the comments. How are we doing? How are we doing today? How is everybody? We got some people feeling great. We got some wooze. Gm. Gm.
00:00:56.900 - 00:01:11.470, Speaker A: GM. Let's go. Excellent. Welcome, welcome, everybody. Hopefully everyone is doing absolutely fantastic here. We're just going to go ahead and get set up. Let some people come in and let me know, let everybody know how you're doing.
00:01:11.470 - 00:01:26.636, Speaker A: Let the chat know how everybody's doing. Got a fantastic one. We got some people who are excited. Excellent. Going through the brownie defi staking code and making some of my own modifications. Excellent. Yes, please make your own modifications.
00:01:26.636 - 00:01:47.476, Speaker A: Please do that. And the UI we're going to do here is actually going to be a little bit different from that. So it'll be a little bit different here, but welcome. Glad people are doing well. Let me flip over to my camera here. Hello. How's everybody? Glad to hear we're doing well.
00:01:47.476 - 00:01:59.320, Speaker A: Glad to hear people are excited. This is a fun one. This is a good one. And I know I have it on the schedule for 2 hours. We're going to try to bang this out in one. We're going to try to do even better. Here we are in learn mode.
00:01:59.320 - 00:02:08.184, Speaker A: Yes. Learn mode. Boom. Excellent. That is excellent. Fantastic here. So gm.
00:02:08.184 - 00:02:22.832, Speaker A: Gm of course, gm all. Hello. Hello. We're going to be doing a little bit more goodies here. And of course everybody who's jumping in, please. Sure. To take the type form here.
00:02:22.832 - 00:02:46.330, Speaker A: I just posted it into the comments here. And then there's also a nice little QR code up here. If you please take this out. Please fill this out after the workshop. That would mean the world to us so that we can figure out which one of these you like, which one of these you don't like. Should we do more of these? Should we do less of these? Let us know what you thought and so we can constantly be improving. Constantly be better.
00:02:46.330 - 00:03:04.492, Speaker A: It is not too late to register for the hackathon. Go to hack chain link or chain link, Hackathon and register today. It is definitely not too late. So we have 35 people in the chat here. Welcome. Good day. Oh, I like that.
00:03:04.492 - 00:03:18.804, Speaker A: Maybe that's the new good morning. It's good day. Good day. Welcome. And we're going to jump right into this right now because we have a couple of people here. It's a few minutes past. Let's do it.
00:03:18.804 - 00:03:55.420, Speaker A: Let me show you all what we're going to be building today. What are we going to be building here? So real minimalistic Ui, this is just functional. I am not a designer, so we're not going to be focused on denying stuff. But in the back end we have a simple excuse. It's a minimalistic staking application and we can stake to it and we can withdraw from it. We have a UI to do that. This staking application is based off of synthetics, one of the most influential contracts that's ever been created.
00:03:55.420 - 00:04:35.470, Speaker A: And if you go to this defi minimal, I'm going to pop this into the chat here. You go to this defi minimal git repository. It has a ton of minimalistic defi applications in here. And then the ones we're going to be working with are this staking sol and then also this reward token Sol. So we're gonna be allowing users to stake into our application and they will gain some reward token based off of some rate that we have given them. And we're going to build a Ui on top of it, real minimalistic Ui for them to stake and then withdraw their stakes and also gain some earning. So we start off, we just deployed this contract, we've earned nothing right now.
00:04:35.470 - 00:05:04.548, Speaker A: We've earned zero reward token. That's the type of the token, the same token, that's our reward token. We're also using as our staking token here. So we have 1 million reward tokens in our wallet which is going to be used for our staking token. And we have nothing staked here. So what we can do is we can say, okay, I want to stake, I don't know, like 500,501, two 3500,000 tokens. We're going to submit metamask of course is going to pop up.
00:05:04.548 - 00:05:52.068, Speaker A: It's going to say, hey, would you like to approve giving this application your tokens? We're going to go ahead and confirm, and then after that goes through, another one's going to immediately pop up saying, cool, you've approved this transaction. You've approved the transaction on your ERC 20. Would you like to actually stake now we're going to go ahead and confirm that as well. And then once that goes through, cool. Once that goes through, I should have added some functionality where it would auto refresh. Our UI actually updates now and says, hey, we have this much in our wallet and we have this much staked in our contract. And as more people stake due to the way that we calculated our earning, after some time passes, maybe we'll stake another 250,000.
00:05:52.068 - 00:06:25.292, Speaker A: We'll stake this as well. We'll go ahead and confirm and then we'll go ahead and actually stake this that we just approved. And we're going to stake this now. Once this one goes through, great, give it a little refresh. And we have this much in our wallets. We have this much staked and we have a very teeny tiny amount earned. Actually, that's why it's not showing up here, because it's formatted to be like in ether.
00:06:25.292 - 00:06:43.412, Speaker A: So it's a very teeny, teeny small amount here. So it basically just says 0.0, but it's really 0.1 or something like that. So very teeny tiny amount return. But as we build the UI, we'll play with kind of how we want to format units and stuff here. But this is essentially it.
00:06:43.412 - 00:07:05.404, Speaker A: And yeah, if we feel like adding a withdraw function and a claim rewards function, we could add that too. But this is essentially the application here. And any questions about what we're building? Evening. Excellent. Ethernot is a great thing to do. Web three Ui kit is Pam. Yes.
00:07:05.404 - 00:07:25.636, Speaker A: We're going to be using next js. We're going to be using the Morales hooks and we're going to be using next js and Morales. And then for our contract we're just going to be doing hard hat. So we're actually not going to be building the contracts here. We've done a ton of contract building. So this is really just going to be the full stack front end bit. Yes.
00:07:25.636 - 00:07:42.392, Speaker A: This defi workshop with the UI. Absolutely. So we've done a bunch. In a previous video, we actually showed you all how to build the staking app in hard hat. So we're not going to go over that again. We're just going to be building the front end on top of this. Where do the rewards token come from? Great question.
00:07:42.392 - 00:08:04.908, Speaker A: Okay, so let's do a little refresher of our contracts here. Let's do this. So here's our defi minimal contracts. We have this reward token. We have our staking contract. Just a little refresher. And again, this staking contract is the same one we did earlier this week.
00:08:04.908 - 00:08:35.812, Speaker A: So if you want to go back, please go back and check out that video because we go through all the math and stuff that goes on in here and it's really good. Here is our staking token. Here is our staking contract. And the main functions that it has are going to be this stake function, which. Let me go down it. This stake function right here, which allows people to deposit tokens into this contract. And then of course towards the we have a withdraw function as well, which allows people to withdraw the tokens that they've staked.
00:08:35.812 - 00:09:40.620, Speaker A: And then we have a claim rewards function, which allows people to claim the rewards that they have received. Now the way that this works is there's a reward rate of 100, so every second that passes this contract will give out 100 tokens. Now this isn't like 100 tokens, this is 100 tokens in way, but it's really every second we're giving out this many tokens, zero point. However many zeros there are, every second we're giving out a very teeny, teeny tiny amount of these tokens spread amongst the different people who have staked. So the more people that are staked, the less tokens you get, basically. Right. So it's this flat 100 way per second that gets emitted out, and the reward tokens are going to come from the platform, so the platform itself is going to have these reward tokens in it to give out to different users.
00:09:40.620 - 00:10:24.492, Speaker A: So that's basically how it works and that's what we're going to do. And traditionally, or typically, your staking application will have some type of fee generation or some type of yield generation, and that's where it's going to accumulate its reward tokens, right. It's going to have some fee baked into the protocol so that it can have those rewards to give back. Cool. So which front end framework we're going to be using next? Js, aka react. So that's what we're going to be doing. Never really understood why that double confirmation, are we even able to do it? Both approve and sign one pop up on a hacking project.
00:10:24.492 - 00:10:50.324, Speaker A: Trying to find ways to ease onboarding in Ux. Really good question. Essentially not really. You actually, maybe you could put them both in the same transaction. Could you do that? You probably could put them both in the same transaction. I haven't played with it myself, but you probably could put them both in the same transaction. But you'd have to do some funny stuff.
00:10:50.324 - 00:11:18.510, Speaker A: But basically you'll have to do that double confirmation, right? The reason you have to do that double confirmation is because you need to approve the token first before you can stake. You need to approve the token into the contract before you can stake. Is this the final UI? Yeah, pretty much. But if people want to, we can implement new properties. Yeah. So it's just going to be really minimalistic, real minimalistic here. Are you actually giving the swap contract or staking contract permission to use your funds yes.
00:11:18.510 - 00:11:41.140, Speaker A: When we do this, when I say, hey, I'm going to stick 100 in my first transaction that pops up. This is an approved function and you can even see metamask goes, hey, give permission to access your RT or your reward token. So this is an approved function. I'm going to reject it for now. And whoops, I broke it. But that's fine. Should add more, better error handling.
00:11:41.140 - 00:11:54.424, Speaker A: But yes. So we are approving first, then telling it to stake it. It won't work without permissions because of the order of operation. Yes, exactly. Yeah. You could do something like multicall. We're not going to do that here.
00:11:54.424 - 00:12:22.448, Speaker A: So eip one, one five, I forget which one that is that the transaction one. Oh, Multi token standard. Oh no, we're not going to be doing anything with the IP 1155. So this is going to be what we're going to build. Let's jump into it. So we are in our code here. We are in our vs code, and the first thing we're going to do is actually we're going to go ahead and clone this repository because it already has all of the deploy stuff, all the back end stuff that we need.
00:12:22.448 - 00:12:39.960, Speaker A: So I'm actually going to go CD down a directory. I'm going to do git clone, boom, just cloned it. Now I'm going to CD into it. D five minimal. And I'm just going to run yarn hardhat node. I'm going to run yarn first. I'm going to install all of our dependencies.
00:12:39.960 - 00:13:22.624, Speaker A: And as this goes through, if our contract was selling ETH for die on behalf of users, would we need to authorize die for the user's address? Selling ETH for die on behalf of user was selling ETH for die. So who's Eth and who's Dai? So are you selling the user's EtH for die? If that's the case, you would need to authorize, well, you would need to quote unquote authorize ETH. So you wouldn't have to do that. You would just have them send you the EtH to do stuff with. No, it's a good question. So ETh isn't a smart contract. Yes.
00:13:22.624 - 00:13:46.952, Speaker A: So ETH is a little bit different, because ethereum, the base, the l one currency, you don't need to run that approve thing on the l one currency. Right. And the reason you don't need to do that is because the l one currency isn't going to be a smart contract. So you need to call approve on any token contracts, not on ETH. Great question. All right, cool. So we've just installed the packages.
00:13:46.952 - 00:14:20.490, Speaker A: Now we're on yarn hardhead node. What we're going to do here is we're actually going to spin up our own local blockchain and running this hardhead node runs through this, through our deploy scripts in here where it deploys all of the contracts and all of the mocks that we need. Right. Oh, just kidding. I have it running already. Let me just kill my other ones. Now I'm going to run it because I was running the node in another terminal already.
00:14:20.490 - 00:14:45.110, Speaker A: All right, cool. So now we have this local blockchain running and we can actually even connect to it terminal. I'll CD back to d five minimal. Excuse me, 1 second here. Forgot my water up here. That was a mistake. Let's see how quickly I can talk without getting cottonmouth here.
00:14:45.110 - 00:15:41.440, Speaker A: Anyways, so we're going to run yarn hardhat console network localhost. Actually going to turn off my lights for a little bit and we can actually connect to our blockchain. We could say like const staking contract equals await ethers get contract staking. Sorry, give me 1 second. I gotta, these lights are killing me. It 1 second. 1 second.
00:15:41.440 - 00:16:52.980, Speaker A: It. Sorry about that. If I get really hot, like I get a migraine and I was nervous that I got a migraine coming on. So just making sure I'm safe and sound here, but. Okay, so we have the staking contract. You can see its address. We can also do like const token address equals await ethers get contract or token do like token address, tokencontract address.
00:16:52.980 - 00:17:20.102, Speaker A: Boom. So we have these contracts on our local blockchain and we can actually start interacting with them. Could you put the command you have entered in the terminal so far, please? Yes. So we ran yarn. We ran yarn hardhat node and then in here to just get in this console. This is just kind of show you guys. I'm running yarn hardhat console network localhost.
00:17:20.102 - 00:17:52.146, Speaker A: So this one isn't needed, but I'm just doing that to show you. Cool. We're going to cancel out of here. So we have our local blockchain running here. And in this one we're going to go back, we're going to CD, CD into a new folder called staking UI. And this is where we're going to create our front end code and we're going to do some yarn create next app, period. Put it in this folder.
00:17:52.146 - 00:18:18.170, Speaker A: I already have it open in my vs code. So we're going to download all of our stuff for our front end here. Download, download, download. Haza, haza. Okay, cool. I don't like Eslint, so I'm going to dump that. I do like prettier, so I'm going to do yarn add prettier.
00:18:18.170 - 00:18:32.498, Speaker A: You don't have to do this, but I'm going to do it just because it'll drive me crazy. Otherwise. I'm just going to add these two prettier files. You do not have to do this. It is purely for formatting code. I just like prettier. Cool.
00:18:32.498 - 00:18:51.602, Speaker A: So we have that. The next thing that we want to do is we're going to add tailwind css from nextjs. And we just followed this guide here, posted that in the chat as well. Tailwind CSS helps for some formatting. We're not going to be doing a ton of formatting here. Already dealing with a migraine. Yeah, I've been getting a lot of migraines recently.
00:18:51.602 - 00:19:29.122, Speaker A: It's probably the stress of that 10 billion hour hardhead video that I'm being. But you can follow this guide here and we're going to install Tailwind post CSS and auto prefixer. I use yarn, but if you use NPM, you can follow these. So I'm just going to do yarn add dev that in there. Once that finishes going through, we'll do yarn tailwind css init p I'm going to run that now. Yarn tailwind css init p we're going to grab this, we're going to copy this whole thing and stick it into our tailwind config. Tailwind config paste that in.
00:19:29.122 - 00:19:48.946, Speaker A: Boom. And then we're going to add this to our globals css. Globals css paste it in. Perfect. And now we're good to go. Now if we run yarn dev or yarn run dev, grab this for a UI and boom. Welcome to next js Hazah.
00:19:48.946 - 00:20:03.662, Speaker A: We have our website running. We did, right? Nah, just kidding. Just kidding. We're just getting started. So we've got up and I'm going to hide this for now. Note that hitting the x does not kill what's running in here. It just hides it.
00:20:03.662 - 00:20:28.678, Speaker A: Right. If we hit the trash can, that'll actually kill the processes running it. So I'm just going to hide it for now just so that people can see what I'm doing. And in our index js, this is where we have all this wild stuff. We're going to delete pretty much everything except for these. What's except for these two kind of main divs here. We can even delete the head if we want.
00:20:28.678 - 00:20:51.486, Speaker A: Screw the head, let's not even do the head. Get rid of image, get rid of head. And in here we'll just say hi. Now if we save, go back to the front end, we just see hi here. Haza yay. Okay cool. So we have a website, we have some basic boilerplate stuff here, and I walked through before kind of what's in this nextjs stuff.
00:20:51.486 - 00:21:14.354, Speaker A: I'll do a quick refresher on what's in here. Pages these are basically our pages in our website. These are basically the different sites. This index js is our home page. So slash here is our home page. App js this is kind of what everything routes through. So in this app js, this component here is each one of our pages.
00:21:14.354 - 00:21:37.674, Speaker A: So index JS gets routed through this component bit here. API we're not going to use public is just like some public images and stuff. Styles is for formatting, git ignore is for GitHub node modules is our dependencies, of course. Next is some compiled next stuff. Don't worry about that. Prettier. These are my files.
00:21:37.674 - 00:21:53.102, Speaker A: Next config this is a configuration for next js. We're not really going to touch it. Package js repackage json this is Javascript package manager stuff. This is a post CSS config. We're not going to touch this either. This is a tailwind config. We're not going to touch this either.
00:21:53.102 - 00:22:06.630, Speaker A: This is a yarn lock. We're not going to touch this either. And this is a readme which just has a bunch of nice information. We're not going to touch that either. Mainly going to stick on pages and then our own thing. Cool. So we have this little website.
00:22:06.630 - 00:22:49.540, Speaker A: What's the first thing that we probably want to do? Well, we probably want to get like some type of header, right? The users are going to want to click to connect their metamasks to this website. So what do we want to do here? So let's create a new component, new folder called components. And in here we'll create a component called header JS. Is it in a different directory? Is what in a different, oh, okay, I see what you're saying. Yes. So I'm doing this staking UI has all the front end code and then CD down, CD defi minimal. This is the folder with all the hard hat and smart contract code.
00:22:49.540 - 00:23:25.560, Speaker A: It is generally good practice to have your front end and your contracts in two separate folders. You can put them together if you want, if that makes it easier for you. But once you scale up, you're going to want to have them in their own folders. Good question. Really good question. Okay, so we're going to want to make a header. And as most of you know, I love working with the Morales hooks or react Morales because they have a connect button which just makes life amazing.
00:23:25.560 - 00:23:58.130, Speaker A: So we're going to work with react Morales and web three. Web three Ui kit. These are all open source hooks that we're going to be working with. So we're not going to be using the morale server at all. Could you please add the commands to create the UI folder's content? Yes. So we ran yarn create next app, period. Then after we ran yarn create next app, we followed the commands in this tailwind CSS guide.
00:23:58.130 - 00:24:33.580, Speaker A: Great question. And then you can always pause, come back. But yeah, I'm glad you asked because the purpose of doing these workshops is to ask questions real time. So, yeah, excellent. So we're going to want to make this header thing. So we're going to need to add yarn, add web three ui kit Morales and react Morales. I'll add this to the chat as, sorry, that was supposed to be yarn add, not rn add.
00:24:33.580 - 00:25:08.086, Speaker A: Going to run this one right here. And this is going to allow us to make a really nice header. Now as this is pulling through, in order for our entire application to know where stuff is connected, we want to wrap everything in what's called a context provider. In context. So for our application, we're going to want to know. We're going to want it to know. Okay, what chain are we on what account we're working with and a whole bunch of that stuff.
00:25:08.086 - 00:26:05.578, Speaker A: So we can do that by wrapping in this app js wrapping this whole thing in a Morales provider. So we can do that by now that we've added everything we can do, import Morales provider from react Morales this, then we're going to wrap our whole component Morales provider. And then I'm going to say initially allies on mount equals false boom. So initialize on mount again. It means that we aren't going to be connecting to a Morales database or a Morales server. So we're just going to be using the Morales hooks that come with react morales, which is really nice. So once we've wrapped our components in this Morales provider, we can now start to make our header and we got a question.
00:26:05.578 - 00:26:47.590, Speaker A: How can we connect our own API servers to frontend UI deficit? Question you can answer at the end of the workshop. Great question. So this API section is basically what you'd want to do. So if you have your own server running, you can make requests in here to your API and then do like a know I API here or something like that. More of a full stack question. So now that we've wrapped everything in the Morales provider we can use that Morales provider in our header. So we're just going to do import connect button from web three UI kit.
00:26:47.590 - 00:27:44.540, Speaker A: We'll export default function header and we'll say return. And then we could literally just do, for now we could just do connect button. We'll say Morales auth equals false. And this is so that we just doubly don't connect to a Morales server. Now that we have this we can import this into our app or index js. So we'll go over to our index js, we'll do import header from components, components header and then we'll wrap our return here like this. Actually like this.
00:27:44.540 - 00:28:20.434, Speaker A: Stick our header in here, in here. And now if we go back to our UI we have this big button we can use to connect and let me zoom way out. This nice little button allows us to connect to our website. And if I can go in here I can disconnect all my accounts. Goodbye, goodbye, goodbye. And now if I connect, metamask pops up, says hey, who do you want to connect with? I'm going to connect with this one down here. You'll see why in a minute.
00:28:20.434 - 00:28:55.220, Speaker A: We'll connect. Okay great. Now this account that I have in my metamask is imported from my hard hat. So I went to import account and I grabbed a private key from my node that's running. So up at the top. When I run my node it gives me all these private keys with 1000 eth each. So we grabbed the private key I imported into my metamask and that's this account that we're working with here.
00:28:55.220 - 00:29:33.038, Speaker A: And a note, if you're working with Hardhat, pretty much anytime you reset your chain you want to go to settings advanced reset account. Otherwise your metamask and your hardhat node will think that this account has different nunces and everything will be confused. So want to go ahead and do that there, cool. So now we have this little header bit. Let's do just a little bit of styling so that doesn't look completely awful. But like I said again, we're not going to do a ton of styling here. So we're going to wrap this whole thing in the nav bar.
00:29:33.038 - 00:30:01.310, Speaker A: So we're going to say nav class name equals we're going to say p five. So padding five. We're going to give it a border. Bottom of two. We'll do flex and flex row, wrap this around that. Do a little h one header here. Class name equals give it padding y of four.
00:30:01.310 - 00:30:29.656, Speaker A: Padding x of four. We'll say font bold text three xl. This is just going to say h one is just basically going to be our title. We're going to call it staking app. Then we're going to wrap our connect button with div class name equals margin left auto. So we're going to stick it all the way to the right side. Padding y two.
00:30:29.656 - 00:30:52.042, Speaker A: Padding x four. Cool. Now we go back. We got it slightly formatted, a little bit nicer. It's not going to be anything great, but the header looks, there's like a legit header here. Pretty much. So questions? Dumb question, but what was the command to start the UI? Sorry, not a yarn user.
00:30:52.042 - 00:31:17.720, Speaker A: So I rent yarn. Create next app here. But you could also do what is it npm or mpx? Npm next app. It's npm create next app. Or is it create next app? What is it? Mpx create next app. Oh, you can do that too? Yeah, just run mpx create next app. That would work as well.
00:31:17.720 - 00:31:33.340, Speaker A: So whichever one you want to do. Good question. Cool. And just remember, before people leave, if you could please grab that QR code, let me know what you thought about the session. If you liked it, if you didn't like it. Thank you. Cool.
00:31:33.340 - 00:31:57.486, Speaker A: So we have this header, we're saying hi. That looks good to me. All right, cool. So now we have our header in here. Now we probably want to actually add the functionality in here. Right? One of the first things we want to do is we want to get the details about what's inside of this staking application. So let's create a new component called stakedetails js.
00:31:57.486 - 00:32:38.190, Speaker A: And this will be our file that will get all the staking details about our contract. So let's go ahead. We'll do export default function stake details. And I'm just going to say return div hi from stake details. Going to import this into our index. So we're going to do import details from components details. And we're just going to stick this under the header details.
00:32:38.190 - 00:33:06.214, Speaker A: Hi. From stake details. And hi. Okay, perfect. Cool. So stake details, what do we want this component to do? Well, we probably want to get how many tokens are in our wallet, how many tokens are staked, and then how many tokens we have earned. So that's going to be the first bit that we're going to want to do.
00:33:06.214 - 00:33:55.174, Speaker A: So let's go ahead and get all those in this. So in order to figure out how many tokens are in our wallet, we first need to figure out who's connected here. So we can grab who is connected by saying import, use Morales from react Morales. This use Morales has const account equals use Morales. So we have this account here. We can even do like a little console log account inspect on the front end, go to the console and we can see this is the account right here, which is indeed our account that's connected, which is our account now that's connected here. So we have our account, which is great.
00:33:55.174 - 00:34:41.314, Speaker A: What else do we need to figure out how many tokens are in our wallet? Okay, well, we need the account. We're probably going to need the what? Reward token address. Reward token Abi and that type of thing. So to get the reward token address and the ward token Abi, we're going to have to go back to our hard hat project. So I'm going to do code five minimal, open up a new, little new thing for us. And in here, in our artifacts, we can find the abis for all of these, right? So we have a reward token. Reward Token jSon.
00:34:41.314 - 00:35:20.186, Speaker A: This is going to be our Abi. So I'm going to grab this whole thing all the way down here. We're going to copy it, go back to our front end here, make a new folder called constants because this isn't going to change. And in here, we're going to make a new file called reward Tokenabi json. Paste that whole thing in here. Did I do something wrong? I didn't add the whole thing. There we go.
00:35:20.186 - 00:35:52.206, Speaker A: There's the whole thing. Okay. And while we're back here, while we're back in the defi minimal code, we might as well grab our staking Abi as well because we know we're going to need that. So we'll grab this whole staking thing, the whole staking Abi, we'll make a new constant. We'll do stakingabi json as well. And we'll paste that in there. So what else do we say we need? Okay, we need those two contract addresses.
00:35:52.206 - 00:36:11.530, Speaker A: Okay, great. We'll back in the d five minimal section, open up our terminal. We could go to deployment, actually. Well, we could open our terminal, but let's just go to deployments. Localhost. We see all this stuff in here, we have staking jSon. Here's the address for staking JSoN.
00:36:11.530 - 00:36:49.640, Speaker A: So we can go back to where are here and we'll just say new file. We'll do nix js. We'll say staking address equals this. Staking address equals that reward token address equals because these are not going to change. We'll go back here, we'll get the reward token address which is right here. Perfect. Okay, cool.
00:36:49.640 - 00:38:01.050, Speaker A: And then we'll grab these abis and we'll just have everything come from this index js. So we'll say const stake abi equals require it import staking Abi or bi. Actually, let's do const. Stakingabi equals requirestakingabi json const reward tokenabi equals requiretokenabi jSon. Then we'll do module exports equals stakingabi tokenabi staking address and reward token address. Boom. Perfect.
00:38:01.050 - 00:38:45.056, Speaker A: Now that we have that constants file back in our stake details, we have all of that now. So what we can do is we can say constaking address equals import staking address constants. Oops. Constance mat. It's mad import. Oh no. Equals here staking address from constant.
00:38:45.056 - 00:39:17.384, Speaker A: So we're going to get staking address. What else is in here? Staking Abi grab staking Abi reward token Abi because we know we're going to need all this soon. Reward token address. Questions so far? Good night, Leo. Yes, thank you. Good call. All right, cool.
00:39:17.384 - 00:40:21.830, Speaker A: So now we have the token Abi, the token addresses. How can we actually get these? Well, Morales also has a thing called use web three contract where we can just call functions on any contract. So we're going to do use web three contract react morales and what we can say is we can say const run contract function equals use web three contract. And so this is how we're going to actually be able to call any function that we want. And forgetting the number of tokens in our wallet, we're going to create a new function called get RT balance that we can call to get the balance. So we're going to say this run contract function is going to be called get Rt balance getting the reward token balance. And we're going to pass a whole bunch of options to it.
00:40:21.830 - 00:41:29.384, Speaker A: The Abi, of course, is going to be the reward token Abi contract address is going to be the reward token address function. Name is going to be balance of because balance of is how you get the balance of any address in an ERC 20. We're going to say params is going to be account. We're going to pass whatever account that is connected. So this get RT balance is going to make an API call to our blockchain node and it's going to give us back how many reward tokens that it has. Right? And we'll fix, oops, I spelled that one wrong, slash there. Now, how do we do this? Well, in react, we can do something called use state to keep track of the different states in our website.
00:41:29.384 - 00:42:27.020, Speaker A: So we'll do import, use state equal or from act. And use state is a way to check a value and then rerender your front end anytime that that changes. So in here we're going to say const Rt balance, comma, set RT balance equals use state of zero. So Rt Balance is going to represent the reward token balance, and set RT balance is going to set this RT balance. And whenever this gets set, we're going to rerender our front end, which is what we want. Now, how do we actually call getrt balance? Well, we actually call getrt balance using another react thing called use effect. The way use effect works is it takes two input parameters.
00:42:27.020 - 00:43:08.952, Speaker A: One is a function to call once something changes, and then one is an array of stuff of dependencies. So anytime anything in your array of dependencies changes, we're saying, okay, something changed, run this function. So we're going to be tracking anytime people connect or disconnect to metamask. And when they connect or disconnect, we're going to run. We're going to get an updated balance. So in here we're going to say, okay, anytime stuff happens and we'll define that in a second, we will update the UI and get balances. We'll show you how to do that in a second.
00:43:08.952 - 00:43:49.110, Speaker A: But then things we want this to depend on are we want this function depend on the account we want it to depend on if web three is even enabled. And actually we can grab that from rouse as well. Is web three enabled? But they're connected to metamask. So we'll count is web three enabled? Like, so are you using zero string for balance? Big number. So I like working with strings, just my preference. I mean, yeah, we could do big number zero here if we wanted to, but I just like working with strings. So count is web three enabled.
00:43:49.110 - 00:44:27.590, Speaker A: And then we'll create a little function in here to call anytime these change. So the function we're going to call is called async function. We're just going to call update Ui values. And in here we're going to call this getrt balance. So we're going to say const Rt balance contract equals await get Rt balance. We're going to wrap this await get RT balance is going to return a big number. So we're going to wrap it in dot two string.
00:44:27.590 - 00:45:43.150, Speaker A: And then I always like to do this on error in case you run something weird. So we'll say error log error. And this way if this breaks or something we'll know. So we'll get the RT balance from the contract and then what we can do is we'll format it. So we'll say const formatted RT balance from contract equals we'll do ethers, utils, utils format units, RT balance from contract because this is going to return that ugly big number, so we just want to format it ether and then we'll just say set RT balance. RT balance this formatted RT balance from contract. Now in our div we'll just make another div here and just say RT balance is we'll do a little Javascript RT balance.
00:45:43.150 - 00:47:02.700, Speaker A: We'll reload our front end and it did this weird thing where it imports from that we're going to stick use effect in here. Now we'll refresh our front end and cool. RT balance is zero, is that correct? I think that's wrong. Oh, because we're not even calling this function well, update Ui values and then just to make sure that we only update UI values if we're actually connected to web three, we'll just say if is web three enabled and there's an account and we'll update the UI values then ethers is not defined. So we got to import ethers. Now that, there we go. Okay, so now we have a million tokens, right? And the reason we have a million tokens is because when we run hardhead deploy we've deployed these reward tokens to ourselves.
00:47:02.700 - 00:47:47.484, Speaker A: So, questions so far? Questions on anything? I know I coded a lot very quickly. Any questions so far? No questions. You all give me a chance to just sip water me. Cool. Okay, got a question. East balance. I assumed it'd be pretty simple, right? Yeah.
00:47:47.484 - 00:48:13.476, Speaker A: So you would just call like balance of whatever address. Is there a repo of this? No, there is not, but I can upload it afterwards. I made this right before because I wanted to do a new one. I want to do something different, but yeah, I can upload it. Great. We have the RT balance. Cool.
00:48:13.476 - 00:49:00.336, Speaker A: So we have the RT balance. What else do we want to get? How many tokens we have staked, how many tokens we have earned and that we can withdraw so we're just going to do the same thing, right? So we're going to say do staked balance. We'll do set staked balance, staked balance. And then we'll do earned balance. Set earned balance. Copy this and we'll call set of getrt balance. We'll call whatever function we can do to get the staked balance.
00:49:00.336 - 00:49:47.492, Speaker A: So we'll call this get staked balance. To get how much we have staked, we actually have to look on our staking contract, which is going to be, of course, at the staking address there's a function. Let me just pull up staking sol again, all the way at the bottom there's this get staked function which returns how much we have staked. So we'll say get staked. Rams are going to take an account and we're going to call this get staked function. And we're going to do the exact same thing in this update ui values bit. So I'm just going to copy this, paste it down.
00:49:47.492 - 00:50:27.856, Speaker A: So I'm going to say staked from contract equals await get staked balance. We're going to say formatted staked from contract. Ethers utils, format stake from contract. And we're going to do set staked balance like that. We're going to do one more for how much we have earned. So we're going to copy this, paste it here. We'll call this get earned staking function is just going to be earned prams account.
00:50:27.856 - 00:51:05.624, Speaker A: And then in our async update UI values, we're just going to do the same thing. We're going to copy these three lines const earned from contract equals get earned. We're going to do formatted earned from contract. Format units earned from contract. Set earned is going to be formatted earned from contract. So now we're getting the staked balance and the earned balance down here. We'll get rid of high from details.
00:51:05.624 - 00:51:32.790, Speaker A: We'll paste this twice. We'll say earned balance is earned balance. And we'll say, what is it? We'll say staked balance is staked balance. Cool. Save that. Set earned is not defined. Well, set earned balance, I guess.
00:51:32.790 - 00:52:11.764, Speaker A: Earned balance is not defined. Oh, well, set earned accurate balance shouldn't be a million. So I guess I messed up. Formatted RT balance. Okay, we want formatted staked from contract. There we go. Boom.
00:52:11.764 - 00:52:29.080, Speaker A: Okay, so we have a million reward token. We have nothing earned and nothing staked. Perfect. All right, cool. So now we have all the details. That's exactly what we want. Now what do we want to do? Well, we probably want to be able to actually do some staking.
00:52:29.080 - 00:53:02.056, Speaker A: Want to actually do some staking. So let's create a new component. We'll call it stakeform js. And this is where we'll do all this staking. Could we get how much the contract has staked? Yes, we could get how much the contract as a whole has staked with some function of indexing events to see how much stuff people have staked. Or we could have a function in our contract called like total staked or something and there might actually already be one. But yeah, we could do that.
00:53:02.056 - 00:53:54.040, Speaker A: We're not going to do that for this demo. If we want to do some custom stuff, we'll finish the stake form and if we have time, we'll add whatever else we want. So we'll do export default function stake form. And this is where we're going to allow people to actually stake on our application because right now they can just see how much they've staked, which isn't exactly super helpful. So to stake, what are we going to need? We're going to need the staking abi staking address. We're going to need how much they want to stake, and we're going to need to approve our reward token. We're going to need to approve our reward token first and then call stake.
00:53:54.040 - 00:54:33.510, Speaker A: Let's do that. So in order to call our functions, we're going to import use web three contract again. So in stake details, we're using use web three contract kind of a whole bunch we made a whole bunch of different functions here, and these were for view functions, but now we're going to use it for a transaction function. Morales is smart enough to know if it's a view function or not. If it's a view function, it'll get defaulted to not spending gas. If it's not a view function, it'll get defaulted to spending gas. So we'll say import, use web three contract equals use web three.
00:54:33.510 - 00:55:13.532, Speaker A: Import use web three contract from react morales our function here, we'll say const run contract function equals use web three contract. And we're not going to give it all the parameters just yet. We're going to give the parameters like right when we want to run it. And you'll see what I mean by that. So first we want to make let approve options. So in here, we gave it all these options kind of right away. But when we approve, we have to approve the specific number that they want to approve.
00:55:13.532 - 00:55:34.490, Speaker A: So we'll just do some default approve options which the Abis are going to be the reward token Abi, which. Cool. Oh cool. Mine automatically imported. It. Import reward token Abi from constants contract address is going to be the reward token address which also auto imports for me. Nice.
00:55:34.490 - 00:56:09.652, Speaker A: And then the function name is going to be approve and the only thing we need to give it is the parameters, but we don't know what the parameters are for yet. We don't know how much we want to approve until we fill out the stake form or the approved form. So we have some approve options here. We're also going to make our default stake options. So we're going to say let stake options. And this is obviously going to be the staking Abi which it auto imported for me, which is great staking address which also auto imported. Awesome.
00:56:09.652 - 00:57:12.090, Speaker A: And the function here is going to be stake. Of course, now that we have our two default options and we have our run contract function, we can actually now create a form for people to fill out. So we're actually going to import form from web three Ui kit. And this form is just really nice for creating really minimalistic forms. So we're going to do a little return, do a div. Inside this div we'll do form and if we just save it as is, actually it doesn't do anything in our form bit, we'll say data equals an object and inside this object we'll put the different pieces of the form that we want. Our first one, we'll give it an input width of 50%.
00:57:12.090 - 00:57:44.332, Speaker A: Name is going to be amount to stake in EtH, it will be a number because we want this to be number of how much they want to stake. Starting Value will be blank. Then we'll give it a key of amount to stake. Now if we save that, I guess nothing is on our front. Oh, because we haven't imported this yet. Doy. So now let's go back to our index.
00:57:44.332 - 00:57:55.190, Speaker A: Let's import our stake form. We'll do import stake form. Oh cool. It just did the whole thing for me. Nice. Go underneath our stake details. We'll do stake form.
00:57:55.190 - 00:58:37.400, Speaker A: And now if we go to our front end, okay, cool. We have this little amount to stake and a submit button which right now does absolutely nothing. But we have a little form here. So in our stake form we've got this little form here, we'll give it a title. Fiddle equals, let's say, let's stake not defined, doesn't need to be in parentheses. This needs to be outside of the data we'll say title equals stake. Cool, let's stake.
00:58:37.400 - 00:59:28.268, Speaker A: And when we submit this, we need to give it a function to submit. So we'll say on submit equals and we'll create a function called handle submit or handle stake submit. So we'll create a function up here, async function handle stake submit. And this will take, when we submit this, it passes this data field to this function. So we're going to pass all of this stuff in here, including whatever we put in here. So if I put this number that'll be inside of our data field and we can do stuff with it in our handle stake submit. So in here we can get the value, the amount that they wanted to stake from this data that we passed.
00:59:28.268 - 01:00:14.836, Speaker A: So we'll say const amount to approve mount to approve equals data. This is at the 0th index in here. So we'll say data data of zero input result. And now to approve our reward token, we'll say approve this approve options thing. We'll say approve options params equal and we need to give it an amount and a spender. So we need to figure out who do we want to approve, who do we want to approve and for how much. So the amount we just got from our form, right.
01:00:14.836 - 01:01:37.410, Speaker A: We just want to format it in way, right. So we'll do ethers, utils, parse units, amount to approve, ether to string, we got to import ethers again, ethers from ethers. And then the spender is going to be that staking address. So we're approving the staking address to pull our reward token into their contract. So we'll do a little console log proving and then we'll do we'll say const tx transaction equals await and we'll do this run contract function function, and this is where we can do on error error, just console log the error, we'll say on success. So once we hit confirm and it works out, we'll run a function to actually handle handle approve. We'll pass in the approve options params amount.
01:01:37.410 - 01:02:55.850, Speaker A: So once we approve, we want to immediately stake right afterwards. So we're going to say once this is successful, we're going to call handle approve success. And we're going to do that in another function. So we'll say async function handle approved success and we're passing that amount to stake already formatted so we'll say amount to stake formatted. Now for our stake options, we'll update this with the amount to stake, so say stake options params equals amount to stake formatted like this do console log staking stake options params amount token and we'll do const transaction equals wait run contract function. This is where we'll pass it. Rams Params will be the stake options.
01:02:55.850 - 01:03:57.390, Speaker A: Did I do that above? I didn't do that above. I forgot to do rams params of options. There we go. Grams are going to be stake option we can do on air function console log air and then for this one we're not going to do it on success. We're just going to do in a weight tx wait one. Then after it's done we'll just say console log transaction has been confirmed by one block. Transaction has been confirmed by one block and then that's it.
01:03:57.390 - 01:04:31.716, Speaker A: And then if we wanted to we could do like a use state, we could refresh the page, but let's see if that works. So here we go, little refresh here we have this many to stake. We'll stake 100, we'll hit submit. Metamask will pop up saying approving, we're just going to approve here. We'll confirm. Once it's successful, we're going to go ahead and start staking. So we're going to go ahead and confirm staking and once everything is confirmed, we see transaction has been confirmed by one block.
01:04:31.716 - 01:05:23.716, Speaker A: Go to our metamask and we can see indeed approve and stake has gone through. We'll refresh our front end. Now our staked balance is 100 and our RT balance is this. Let me just earned do a little console log of the earned so that we can see exactly what is earned and not just the 0.0. Let's do earned even do a console log in here earned contract and then we'll stake another 100 just to update rewards. Now we're getting earned zero. We'll confirm staking confirm transaction confirmed.
01:05:23.716 - 01:05:49.440, Speaker A: We'll do a refresh. Okay, just kidding. Now earned has updated since we've staked twice and we get zero point 55. So we have almost no reward tokens earned. But if we wanted to withdraw, this is how much we would withdraw. So that's pretty much the end of the demo. And yeah, like I said, I'll stick this onto GitHub.
01:05:49.440 - 01:06:45.488, Speaker A: Watch the announcements in discord because I'll literally just put exactly what the code that we just made here, I'll put it onto our GitHub or put it onto my GitHub as like a demo contract and you can read from it afterwards. Questions this be a similar process when wanting to integrate die usdt or other ERC twenty s the user wants to stake other tokens. How could we scale? Great question. Really good question. So in our constants folder we have reward token Abi. You can just swap this out for just like in any, like you'd call like ERC 20 Abi json. Actually, I'm going to not save and then what you, what was it, ward tokenabi json just to not screw anything else.
01:06:45.488 - 01:07:20.396, Speaker A: Did I just break my front end with that? Probably. No, I fixed back. Okay, cool. You just swap it out for like an ERC 20 AbI and then let's say you want to allow people to stake anything instead of just doing this reward token address. You would say the ABI is going to be some ERC 20 AbI and then the address is going to be the address of the ERC 20. So we just did it with this singular address. But that's how you could optionally add more ERC 20s, allow people to stake other ERC 20s.
01:07:20.396 - 01:07:54.600, Speaker A: You'd obviously have to update your contracts as well to allow the staking of multiple ERC 20s. But that's essentially how you do it. I'm sure it has more to do with the smart contract. Yeah, so it's both the smart contract and the front end in your smart contract. So our smart contract here isn't smart enough right now to take more than one token, right. It just has a reward token and a staking token. But you could update this to take more types of tokens.
01:07:54.600 - 01:08:34.866, Speaker A: And so like for stake, for example, in our stake function right now we're just doing un 256 amount, you can do amount comma address token. And then right here where we do like transfer from, you would just do like you do ERC 20 token transfer from like that. And then I ERC 20 would be like the ERC 20 face. Hopefully that makes sense. Great question. Next question. Oh, I turned off my lights.
01:08:34.866 - 01:09:06.766, Speaker A: Let me blast my face again with ah, next question. Can Chenley VrF be used with Hadera hashgraph smart contracts? Not that I know of. I'm sure it's being worked on, but I don't think it's live right now. How to refresh earned balance in auto like automatically refresh earned balance? Yeah. So basically once your transaction confirms, you would do like a use state called like update UI or something like that. You'd refresh the UI. That's basically it.
01:09:06.766 - 01:09:26.294, Speaker A: And you could do that all in xJs. Please don't forget to upload the code. I will not. After we close this off, I will upload it. So just give me like ten minutes after we jump off here and before people go QR code. Please fill it out. Let us know if you love this.
01:09:26.294 - 01:09:43.614, Speaker A: Hated this. So that we know if we should do more or less of these again. So let me know. Let us know again. We posted the feedback form letter earlier. Can I copy that text? No, that's really annoying. It's here as well.
01:09:43.614 - 01:10:12.290, Speaker A: Chainleycommunity Typeform.com springworkshops so it's in the comments. So just scroll up. It's in the comments already. Grab the feedback QR code. Any other questions? These have been great questions. Long? I thought it was 2 hours long.
01:10:12.290 - 01:10:39.154, Speaker A: And I schedule this for 3 hours. Oh wow. I did schedule this for 3 hours. Whoops. Sorry about that. So I guess I basically skipped going like building the smart contracts from scratch because we already did that earlier this week. I don't think it was necessary.
01:10:39.154 - 01:10:54.094, Speaker A: Yeah, earlier this week I forgot. We did. Earlier this week we did DFI staking app code along. So that was the 27 April. So if you want to see the DFI staking app code along, go to that one. And then this is the front end for exactly what we did that day. So.
01:10:54.094 - 01:11:05.298, Speaker A: Sorry. Yeah, I scheduled this for 3 hours. My mistake. I forgot we already did the staking application. Yes. Okay, cool. Great.
01:11:05.298 - 01:11:22.626, Speaker A: Yes. And that's why we put all these on the YouTube. Sorry about that, guys. Sorry. Hopefully no one's too upset that this is only a little bit more than an hour. Cool. Very informational.
01:11:22.626 - 01:11:52.962, Speaker A: Awesome. Well, yeah, we'll stick on for a couple more minutes and just answer any questions. So I'll just hang out for a few minutes. So any questions? Got my eth Denver chain link shirt. I love this shirt. And when going to Eth New York in June or NFT NYC, those are like back to back in New York. I'm going to be going to those if anybody is going.
01:11:52.962 - 01:12:26.586, Speaker A: I'll see you there. Any other questions? What role does Morales play in this? Can we do without it? So in this we're just using Morales for hooks. So we're using Morales in the same regard that we would use like ethers. We're just importing the package. We're just using the hooks. We're not connected to the database. Yeah, you can do it without it.
01:12:26.586 - 01:12:58.470, Speaker A: If you go to any of my other intro to full stack stuff or intro to the UI in web three, you use any other package that you want. You could use straight up ethers if you wanted. I just like ethers because that connect button makes my life a lot easier. Connect button is great. The Morales provider is great. I really like the hooks in the API, but yeah, like I said, we're not connected to a Morales database or anything. We're just using the open source Morales tools.
01:12:58.470 - 01:14:01.110, Speaker A: Sorry. Someone's spamming the chat here. Sorry. It any other questions? It any other questions? Any was like I was getting. Like there was an error, like I couldn't block them. It's probably because you blocked them before me. Nice work.
01:14:01.110 - 01:14:24.392, Speaker A: Thank you, Evan. Thank you, Evan, for being on helping out. When was part. Sorry, I missed a couple of questions here. One of the New York ones, I was going to the consensus one in Austin in June. Oh, cool. The one in New York that I'm going to is like the 25th.
01:14:24.392 - 01:14:48.224, Speaker A: It's like that weekish, I think. When was part one? Part one was April 27. So if you look at. Go to hack chain link, pull it up. Actually, I can drop it into the chat here. Defi staking app code. All right, cool.
01:14:48.224 - 01:15:16.728, Speaker A: I just posted a part one in the chat, Gavin, so you can check that out. Can you give an overview of situations you would use? Interface contracts versus other. So this. This was kind of a confusing thing when I was first getting started. So whenever you make a call to another contract, you always need the address and its AbI. Okay. You can get the ABI just by compiling an interface.
01:15:16.728 - 01:15:46.824, Speaker A: You can also get the API from compiling a whole contract. However, which one's going to be more gas efficient, just the interface or the whole contract? Which one's going to be more minimal? Which one's going to be less code? It's definitely going to be the interface. Right. Because if you put the whole contract on, that's going to be awful. So the interface doesn't have all the logic, it just has the functions that you can call on an address. And that's all we want. We just want all the functions that we can call on an address.
01:15:46.824 - 01:16:13.536, Speaker A: So if we don't need to know what's defined in the function, we don't use the contract. So we use the interface whenever we just want to call some contract that already has the logic implemented. Hopefully that makes a lot of sense. Is there an alternative to morales? Yeah. Web three react is good. We all going to make it. Wag me.
01:16:13.536 - 01:16:36.436, Speaker A: Hooks are good. Web three modal is good. Used app is another really good one. There's a lot of them essential eth is one that's popping up. That's good. There's a lot of good front end tools. Any suggestion to expand on this.
01:16:36.436 - 01:17:10.370, Speaker A: Yeah. So you can make the withdraw buttons, you could make the pull funds buttons, you could make the claim reward buttons for the front end, you could actually make it not look like bare bones that I did. You could make the stuff look really nice. There's a lot of stuff that you could do. What is the minimum stack for a full stack? Dev, solidity, HTML, csS, JS, ts? Is there something else? Python for tests? It's kind of whatever you want. Minimum is kind of hard to say. I would say solidity, definitely.
01:17:10.370 - 01:17:41.324, Speaker A: And then HTML and Javascript for the front end. Like if you're looking for really minimum, that's probably the true minimum. But I mean most people are going to want to have some other tools and frameworks. You don't need hard hat for the back end or, excuse me, you don't need Python for the back end, you don't need hard hat for the back end. You can do whatever back end that you want. So saying what's the minimum is kind of tough. I would say like an average minimum or an average full stack would be like hardhead on the back end.
01:17:41.324 - 01:18:16.760, Speaker A: Hardhead or brownie or foundry or apeworks or whatever on the back end. So Python or Javascript or whatever with your solidity and then on the front end, Javascript, HTML and then know pick your JavaScript framework react. Next, Richard from Chainlink Labs, he does a lot of uh, demos which are really good and I really like svelte but yeah, angular. Whatever you want to do. Y'all should come to Berlin one of these days. Yes, agreed. Oh, there was a meetup in Munich the other day.
01:18:16.760 - 01:19:00.020, Speaker A: Cool. Any other questions? These have been great questions. Can we get Morales to suggest switching network? I just noticed some dap do that. Morales does have an option to do that. Let's take a look see actually. So if we're in our code here, let's say on our app JS actually let's go to our index, I forget what it actually is. There's like a switch Morales docs React Morales.
01:19:00.020 - 01:20:21.228, Speaker A: There is a button you can do to like switch work. Yeah, there's this switch network thing that we can do. So if we grab this use chain from react Morales. So we'll go ahead, we'll import chain from Morales, we'll do this const chain id chain account. We'll add like a little button in here right underneath the header. Say we'll do div, what does it look like? Button on click of this network one switch to Ethereum. Right? Do I have this running still it.
01:20:21.228 - 01:20:59.150, Speaker A: Now we have this switch to Ethereum button. If we click it, metamask will pop up saying, hey, you want to switch to Ethereum? So obviously you could format it that button, make it look a little bit nicer. And then what a lot of people will do is they'll do some javascript. They'll say, like, if the chain id is not what they want, what they want, some pseudocode, then just show this button. So they do have that great question, actually. And a lot of applications use that. And so it's really nice to just have like, oh, okay, button switch id.
01:20:59.150 - 01:21:23.200, Speaker A: Should we start learning Apex immediately? How long do you think Brownie will be relevant? I think Brownie will be relevant for a long time. Curve finance. The biggest d five protocol out there, $20 billion, relies on brownie. Urine finance. Another one of the largest ones out there relies on urine finance. Badger, dow. There's a ton of protocols that rely on Brownie.
01:21:23.200 - 01:21:56.590, Speaker A: But apworks is awesome. Apeworks is awesome. And Apex is looking to continue. And yeah, I'm planning on doing some stuff with apworks in the future because they're doing really cool stuff. And the thing is, apewworks and brownie, the code is nearly exactly the same. You could do a control f or a command f for brownie and swap it out with ape and you'd be good to go. So you're good.
01:21:56.590 - 01:22:44.190, Speaker A: Are there any geolocation staking mechanisms you are aware of that I could learn from for possible lot integration? Where have I could learn from for possible. I'm not aware, sorry. Yeah, I've seen it happen automatically, though, on a few dapps. So it'll still ask your metamask to do that. Now, if you connect to the blockchain with like an RPC instead of a metamask, you can have it be whatever chain that you want and just automatically connect to that. But if you're using metamask, you'll always have to ask the user, kind of like what I just showed. So instead of having a button, you would just do like auto switch instead.
01:22:44.190 - 01:23:13.350, Speaker A: Oh, for possible Iot integration. I don't know any geolocation staking mechanisms. That sounds like that'd be pretty cool. Sounds like that would be pretty cool. Any other questions here? Yeah, exactly. Instead of a button, you would just automatically call it right when it loads. Great questions here.
01:23:13.350 - 01:23:52.622, Speaker A: Like Xoi or something. I'm not familiar with xo y. Sorry. Any other questions here it. All right, cool. Well, if there are no more questions, scan this, fill out that feedback form. It means a lot to us.
01:23:52.622 - 01:24:10.722, Speaker A: And good luck with the hackathon. You are all doing amazing. Keep up the good work. Keep connecting with everybody. I will upload this to GitHub. That's a good thing, I just reminded myself, and I will post it in the discord. So with that, thank you all for being here.
01:24:10.722 - 01:24:15.120, Speaker A: Good luck in the hackathon. We have some amazing workshops tomorrow as well. We'll see you there.
