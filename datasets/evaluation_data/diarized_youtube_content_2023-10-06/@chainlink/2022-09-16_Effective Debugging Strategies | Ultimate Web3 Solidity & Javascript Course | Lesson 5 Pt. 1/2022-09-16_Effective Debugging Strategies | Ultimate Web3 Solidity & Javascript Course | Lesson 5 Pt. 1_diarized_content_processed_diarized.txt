00:00:11.770 - 00:00:12.030, Speaker A: Awesome.
00:00:12.100 - 00:01:01.230, Speaker B: You've done fantastically to get this far. And for this section, before we get started, actually moving over to hardhead and moving over to Javascript and understanding why we need to do that, let's understand a little bit about getting how help and running into problems. So let's say we have our fundme contract here that we just worked on and we run into an error. Let's say, for example, we forgot the payable keyword, right? And we go ahead and compile this compilefundme sol and we scroll down and we see obviously we have two errors here, right? We're getting some errors and we scroll down and we see type error, message value and call value can only be used in payable public functions. Make the function payable or use an internal function to avoid this error. And then it goes ahead and gives a line that's erroring. Now this error is pretty clear.
00:01:01.230 - 00:01:47.326, Speaker B: This error code is pretty clear. It's saying hey, make the function payable, or use an internal function to avoid this error, right? That should be pretty easy to add payable and then recompile and be good to go. And this is actually a good example of what to do when you run into errors. When you run into errors, the first thing you want to do is you want to try to figure out exactly what's going on yourself based off of what the error says. This one's pretty straightforward, but some of them can be a little bit more obscure. Step one, when trying to get unblocked, trying to tinker and figure out errors yourself, right? Because maybe you go, okay, I'll make this payable and you go to save, and then it gives you a different error. It's saying, hey, payable doesn't go here, you resave, you recompile, it goes hey, we're still missing that payable thing.
00:01:47.326 - 00:02:08.662, Speaker B: First step is always going to be try to tinker and figure it out yourself. For this course, I want you to limit tinkering triaging to 20 minutes. If you take more than 20 minutes to tinker and triage, then move on to the next step. But I also want you to take at least 15 minutes yourself, or be.
00:02:08.716 - 00:02:13.238, Speaker C: 100% sure you exhausted all options.
00:02:13.324 - 00:02:51.138, Speaker B: You're completely out of ideas. So typically try to tinker, try some stuff for 15 minutes, and if you're under 15 minutes and you're saying, hey, I'm 100% certain, I've tried everything that I can think of, then you can move on to the next step. So step one, when you run into errors, is always going to be tinker and try to pinpoint exactly what's going on. Try to pinpoint exactly what's going wrong. Step two, let's say you tinkered and you tried payable all over the place and you couldn't figure out what this error was and how to debug this error. Step two is always going to be Google the exact error and see if you can learn from that. So we'll zoom out a little bit.
00:02:51.138 - 00:02:53.166, Speaker B: I'll roll my mouse over this, I'll.
00:02:53.198 - 00:02:56.366, Speaker C: Grab this, I'll copy it, put quotes.
00:02:56.398 - 00:03:12.666, Speaker B: Around it and do exactly that. And Google search that exact error and take some time going through Google, going through stack overflow, going through stack exchange eth and look to see if somebody has asked this question already. And it looks like down here it looks like somebody has type error message of value and call value can only.
00:03:12.688 - 00:03:17.034, Speaker C: Be used on payable public functions. And if we scroll down we see.
00:03:17.072 - 00:03:43.086, Speaker B: That somebody ran into exactly this and they went ahead and solved it. They go, I realized my mistake. I needed to add the payable keyword to my own implementation. And they go ahead and in this question they've added the payable and hopefully this would give you the insight to say ah, okay, great, I do need to come back here and add payable. Let's say this stack overflow question didn't show up, right? This form wasn't here. What do we do next? So step one, Tinker. Step two, Google the exact error.
00:03:43.086 - 00:04:23.950, Speaker B: I'm going to do a step 2.5 that only is for this class. Go to our GitHub repo discussions and or updates for this course. Specifically, go to this GitHub repo full blockchain solidity course JS it'll look a little bit different when you all get to it, but come to this repo and look in this chronological updates section to see if there's an update on that section that you're doing. Obviously, since I'm recording right now, there's no update. And if you don't get anything, feel free to jump into the discussion section and ask a question in here, right? There's going to be a community of people looking to help each other out and looking to make this a lot of fun. And the reason I say 2.5
00:04:23.950 - 00:04:44.374, Speaker B: is because in the real world you're not going to have our GitHub repo when working out stuff outside of this course, you're not going to have this GitHub repo. So instead in the real world I'm still going to give you the keys. I'm going to give you what it takes to still unblock yourself on anything. Okay, so number three is going to be to ask a question on a.
00:04:44.412 - 00:04:51.222, Speaker C: Forum like stack exchange etH and stack overflow.
00:04:51.286 - 00:05:26.838, Speaker B: Stack Overflow is a question and answering tech forum like this, right? You can ask tech questions and then you can answer them as well. And as you can see, when you search for these issues, they'll show up. So Stack overflow is more for general programming questions and Stack exchange. Ethereum or Stack exchange eth. The Ethereum Stack Exchange. This is for more Ethereum or EVM based question and all the solidity code that we're going to be working with, whether it's Polygon, whether it's avalanche, whether it's whatever, those questions are going to be valid here, and you can ask here.
00:05:26.924 - 00:05:27.958, Speaker C: So what you'd want to do is.
00:05:27.964 - 00:06:11.582, Speaker B: You'D want to sign up or log in and ask and format your questions on these forums. You'll want to sign up for GitHub, you'll want to sign up for Stack exchange EtH, you'll want to sign up for Stack overflow so you can participate in these forums. In fact, if you haven't already, let's sign up for GitHub right now. And let me walk you through formatting one of these questions, because the better you format your questions, the better chance you have of actually getting the answer. And remember, when asking questions on these forums, when asking questions in these discussion communities, people answer these questions out of the goodness of their heart, right? So if you don't get a response, there's a chance that maybe nobody knows, maybe your question isn't formatted very well and et cetera. So we're going to learn how to ask really good questions here. And if you're new to blockchain, do not skip this section.
00:06:11.582 - 00:06:30.358, Speaker B: Okay? This is going to be that piece that's going to give you the superpower to unblock yourself from any coding issue you run into. So don't skip this part. Be sure to follow along. Okay, so if you don't have a GitHub already, you do need an email to get started. So I'm going to go ahead and sign in. I made a burner account just for this video. So what we're going to do, we're going to go ahead and sign up.
00:06:30.444 - 00:06:41.538, Speaker C: GitHub, enter your email and we hit create account.
00:06:41.624 - 00:06:43.826, Speaker B: They're going to send us an email. So we're going to come back to.
00:06:43.848 - 00:06:49.254, Speaker C: Our email, we're going to get our launch code here, paste it in, answer.
00:06:49.292 - 00:06:50.440, Speaker B: A little bit of information.
00:06:53.050 - 00:06:56.454, Speaker C: We're going to choose the free version and.
00:06:56.492 - 00:07:15.306, Speaker B: Fantastic. We've now created a GitHub profile. Now back over in the smart contract kit, full blockchain solidity course. Js I'm going to create a new discussion, a new thread that I want you all to comment on to make sure you understand how to format and how to ask questions. Okay, general thread for practicing question formatting.
00:07:15.498 - 00:07:16.298, Speaker C: Woo.
00:07:16.474 - 00:07:28.820, Speaker B: And so let's go back here. So first I'm going to format this question poorly two ways, and then we're going to format it really, really well. So the first way we're going to format it poorly is by not giving enough information.
00:07:29.270 - 00:07:30.786, Speaker C: So what we're going to do is.
00:07:30.808 - 00:07:32.740, Speaker B: I'm going to just copy this issue.
00:07:33.110 - 00:07:44.246, Speaker C: What we're going to do is we would just say like, hey, I'm having trouble with remix and an error. Can someone help me?
00:07:44.428 - 00:08:00.346, Speaker B: Why is this not a well formatted question? If this is my question, there's not nearly enough information here. I as a helper have no idea what this person's asking, so let's do something else. What I'm going to do is I'm going to copy this entire contract all.
00:08:00.368 - 00:08:12.158, Speaker C: Offundme sol paste it in here and go, hi, I'm having issues here, can someone help? And I'm going to hit start discussion here.
00:08:12.244 - 00:08:30.530, Speaker B: When I hit start discussion, it formats this all weird. And once again, there's not really enough information here. I don't know what the issue is, but at least with this one we have some code, we have some way to actually debug. So this is a little bit better, but it's still not that good. Let's go ahead and edit this. To make this even better. We can hit three dots, we can hit edit.
00:08:30.530 - 00:08:50.122, Speaker B: What we can do is we can use something called markdown syntax, and I highly recommend learning a little bit of markdown. It's basically some syntax to help make discussions on GitHub and then also questions on stack overflow and stack exchange a lot easier. So we're going to format this code by adding these three backticks at the.
00:08:50.176 - 00:08:56.974, Speaker C: Start and then also at the end of our code, and then additionally next.
00:08:57.012 - 00:08:58.478, Speaker B: To the first three backticks, we're going.
00:08:58.484 - 00:09:02.446, Speaker C: To type solid t, which tells the.
00:09:02.468 - 00:09:14.706, Speaker B: Formatter to use solidity to format this code here. Now if we update discussion, we notice we get some nice highlighting here so that this becomes much, much easier to read.
00:09:14.888 - 00:09:15.522, Speaker C: Right?
00:09:15.656 - 00:09:38.714, Speaker B: This is way easier to read. Now than it was before. However, it's still not specific enough. We've given a ton of code here and we haven't given the specific answer. So this is going to be really hard for somebody to answer. So let's make this more specific. So let's edit this question again and let's specify, so we see here our issue is specifically on this function.
00:09:38.714 - 00:09:48.606, Speaker B: So we're going to copy this function and we're going to delete everything else in here. And now we have just this code inside of here. And now we're going to make this really specific.
00:09:48.708 - 00:09:55.726, Speaker C: We're going to say on this function I'm running into an error. And then what we're going to do.
00:09:55.748 - 00:09:56.814, Speaker B: Is we're going to come back here.
00:09:56.852 - 00:09:58.778, Speaker C: We'Re going to roll over this, we're.
00:09:58.794 - 00:10:02.174, Speaker B: Going to copy this. We could have pull error code if we want, but we're going to format.
00:10:02.222 - 00:10:03.442, Speaker D: This error like this.
00:10:03.576 - 00:10:09.570, Speaker C: And then we're going to say, can someone tell me what's going on? Update.
00:10:09.650 - 00:10:21.606, Speaker B: Now this is a much, much easier question to debug, right? We have some minimalistic code, we have the error that we're getting and we have can someone tell me what's going on? Obviously, the answer to this would be.
00:10:21.628 - 00:10:24.218, Speaker C: To add payable to this.
00:10:24.304 - 00:10:50.430, Speaker B: And that's what somebody would say, hey, like you need to add payable to this. I want you all to practice doing some formatting. Go ahead and add a comment on this with your own formatted question so that you understand how to actually do the formatting. And this markdown format, it's this format here that's going to be the exact same for asking questions on stack overflow or stack exchange eth. For this course. Go ahead and practice. If you want to create more new discussions, feel free to create new discussions.
00:10:50.430 - 00:11:15.900, Speaker B: If you want to use stack overflow or stack exchange etH. I actually highly recommend you use stack overflow or stack exchange ETH as well because those are going to get indexed a lot better than GitHub here. However, feel free to ask questions obviously in this GitHub as well. Now that I've given you kind of the basics rundown, we're going to watch a video that I made that goes even deeper into why and how to format all these questions and what to use. So let's go ahead and watch that.
00:11:18.190 - 00:11:47.374, Speaker A: Every developer has run into this. Something breaks, or maybe you don't know something, but you don't have time to let these stop you. There are a series of steps that one should take to maximize one's chances of solving any coding problem, but you'd be surprised at how few developers currently use the superpower effectively. Our first one we'll spend the least time on because it's just tinker and experiment. When you run into an issue, keep trying different things you think might work. Maybe try doing print statements throughout the file. Learn some debugging tips.
00:11:47.374 - 00:11:50.998, Speaker A: But don't be so cocky that you only do this first step.
00:11:51.084 - 00:11:55.686, Speaker D: And this shouldn't just be random running around. This should be trying to pinpoint exactly.
00:11:55.788 - 00:11:57.526, Speaker B: What'S going wrong in your code so.
00:11:57.548 - 00:11:58.946, Speaker A: That you can either ask an effective.
00:11:58.978 - 00:12:05.782, Speaker D: Question or figure it out yourself. So pinpoint exactly what's going wrong, because you'll need it for the next steps anyways.
00:12:05.846 - 00:12:54.514, Speaker A: Next, check the documentation not all tools have good documentation, but taking some time to explore documentation can be a quick way to find your answer. You'll want to learn how to search a web page with command f or control f. That way you can look for specific keywords on a page, or hopefully they have a good search bar that works well. Sometimes documentation can be really dense, so maybe you'll move to the next step, which is doing a web search. At the end of the day, good software engineers are secretly just professional googlers, and this is one of their most powerful tools, being able to search the web for somebody else who has already run into the problem that you've just run into and then solved it. Most search engines like Google have tools you can use to get even more specific about what you're looking for. Often for specific errors, the best thing to do is actually just copy the exact error and paste it into the search bar with quotes, or use the asterisk and spots.
00:12:54.514 - 00:13:04.430, Speaker A: Your error might be too specific. Most of the results you'll get will be from forums and q a sites, which leads us to our step asking questions in these forums and q a sites.
00:13:04.850 - 00:13:20.210, Speaker D: Just make sure that before you ask a question, you've done some ample googling around yourself beforehand. This way you don't waste yours and anybody else's time. And by asking questions, you swear you will promise me that at some point you will go back and help other people learn as well.
00:13:20.280 - 00:13:20.802, Speaker A: Got it?
00:13:20.856 - 00:13:21.218, Speaker C: Good.
00:13:21.304 - 00:14:26.950, Speaker A: Before even asking your question, though, we should learn where is going to be the best place to ask this, and this is why I've categorized four different types of forms and QA sites. Feel free to pause to read them over, and here are some specific examples of each one of these index code based forms like stack, overflow, indexed, repositories like GitHub issues, indexed technology specific forums like R E dev or unindexed discussion platforms like a chainlink discord one of the key differentiators in these categories is the indexed keyword. We typically want to ask questions on forums that web crawlers have gone through and stuck them in their database or indexed them. This way in three weeks, when we look back at the code that we wrote, we can just google what the is going on when we forget what it does. And this will help out other developers who run into the same problem, which in turn they might go ahead and help you out later. Ideally, most of your questions should be asked on one of these index forums for this reason, for their searchability and discoverability. However, some questions are better fit for dms, Twitter or discord that aren't index and we made a little chart here to figure out where's the best place to post your questions.
00:14:26.950 - 00:15:26.838, Speaker A: Feel free to pause the video, take a look, or read our blog in the descriptions with the picture as well to take another look at it. And of course, before actually posting to Ed in one of these forums, be sure to read their rules as they might state that some kind of questions are specifically forbidden. But basically, the breakdown looks like this theoretical big picture or opinionated questions can go great on general q a forums like Quora or specific technical forums like specific subreddits or discord forums. Specific coding questions can go on these forums as well, but we'll often get more eyes on coding forums like stack overflow or stack exchange communities. Often the question of oh, should I post this on stack overflow? Or maybe a stack exchange community is incredibly blurry and sometimes it doesn't really matter which one you post on. Now, if you run into a bug or an issue with a technology you're really familiar with and you think it shouldn't be breaking, this is your chance to pop an issue into their open source code repository and potentially improve the tool. They don't have an open source code repository.
00:15:26.838 - 00:16:01.902, Speaker A: You throw that closed source piece of shit into the garbage. Just kidding. Closed source tech has its place in our lives too. Additionally, if you're following a tutorial and they have a git repo associated with it, like all of my videos that do, that's going to be the best place to leave your issues. So as much as I hate to say it, putting your issues onto my GitHub repositories is going to be much more effective for us answering your questions than posting it in the YouTube comments. Now finally, discord element email, text message, or any other of these. Unindexed chats are still good places to ask questions, but please try to use them as a last resort.
00:16:01.902 - 00:16:41.902, Speaker A: And if they do end up answering one of your questions, maybe go back and add that question and answer to one of the other forums that we were talking about. This way it will be indexed next time you or somebody else googles it. Now, these quicker chat forums are places more for the community to congregate and have quick conversations with each other. They're places to theory, craft, talk about new things coming out, new ideas, events, and other things that shouldn't be indexed by web crawlers. They're also great places to meet and network with people that you might be able to bounce ideas off directly as you get to know each other. Which leads into our last section. But before we do that, uhoh, do you hear that? Oh, that's the video inside another video alarm ring.
00:16:41.902 - 00:17:19.230, Speaker A: When you ask a question in one of these forums, the better you format your questions, the better chance you'll have of getting it answered. Now, there's no bad questions out there, but there are poorly formatted questions. So let's teach you how to always ask questions as format as best as possible to give you the highest chance of making sure they get answered. Number one, before asking your question, make sure you've followed all the steps in the parent video and you've done some research on this already, and make sure the question hasn't already been asked. Number two, make a title that summarizes the specifics of the question. Three, introduce the problem. Before you write any code, add minimalistic reproducible code.
00:17:19.230 - 00:17:52.354, Speaker A: Minimalistic code means it's not just a copy paste to your entire file. If you're having problems on one line, maybe just post that one line. Reproducible code means that others should be able to run into the exact same error that you're running into, or at least post the steps for them to do it. This doesn't mean that you should put I was following along Patrick's video, and on hour five I ran into this problem. Just watch his video and you'll get there. As flattering as this is, it's not reasonable that everyone is going to have watched my videos, even though they should. You'll want to give the technical steps to reach the error that you've reached.
00:17:52.354 - 00:17:53.754, Speaker A: For those of you watching my free.
00:17:53.792 - 00:18:08.638, Speaker D: Codecamp video, you're kind of exempt from this, but you can only say, hey, I was on hour five on this part of your video. Inside of our discussions tab of the GitHub repo associated with this course. So you can do that, but only in that GitHub repo associated with this course.
00:18:08.804 - 00:18:48.970, Speaker A: Learning markdown to format your code, especially using these three backticks and labeling of the language. This is a critical piece of formatting your code and will drastically improve on the number of people who answer your questions. Any errors or code should be formatted with this three backtick syntax. And finally, often people who care about certain technologies monitor specific tags and monitor specific questions being asked about the technologies that they like. And then finally, again, be sure to read the forum's guides before posting. Different forums have different rules about what they want and what they don't want, so being familiar will increase your chances of getting an answer. All right, so now back to the main video.
00:18:48.970 - 00:19:13.010, Speaker A: Now a note about stack overflow. In particular, stack overflow can be a little aggressive, which is why sometimes posting on specific community forums might be better for your specific technology questions. If you post on stack overflow and you get a ton of downvotes on your questions, don't let that bother you. Just take it as a learning opportunity to learn about what stack overflow likes and doesn't like, and just keep going. But do not let that discourage you.
00:19:13.080 - 00:19:19.854, Speaker D: Okay, well, now that we know where things should go, where questions should go, and how to actually format them, let's practice.
00:19:19.902 - 00:19:21.506, Speaker B: Let's look at some sample questions that.
00:19:21.528 - 00:19:54.174, Speaker D: You might have, and we'll figure out where we want to put them. So this first one, where does this one go? Feel free to pause and guess yourself. So a question like this is going to be great for a Reddit or a discord, probably more a discord. Now this is definitely something that you can search for, right? So you probably could search for this, find an answer and go from there. But maybe you want to ask a budy, or maybe you want to ask a very specific community, like R ethdev. Now of course, if you see this question, you obviously want to recommend Patrick Collins's YouTube channel. Now how about this question? Notice it's formatting, right? The title is nice and big.
00:19:54.174 - 00:20:12.822, Speaker D: They have a technical command that is formatted properly. They have git commit, which is formatted properly. Where would this go? Something like this would definitely do very well on a stack overflow or an indexed code based forum. They're very clearly trying to do something technical. Their problem is laid out very clearly, and they've given the command that they're looking to do.
00:20:12.876 - 00:20:13.942, Speaker B: Now how about this one?
00:20:13.996 - 00:20:41.434, Speaker D: Something like this could go on either stack overflow, but it's probably more likely going to go on a GitHub issue for this Brownie package. A big difference between code forums and git repos like GitHub is that when you make an issue on a GitHub repository, especially when you think there's a problem, you do want to be as in depth as possible. So oftentimes when making an issue on these repos, they'll even ask, what version are you using? Can you post all your code, can you post all your files and just be much, much more explicit?
00:20:41.482 - 00:20:43.934, Speaker B: So now how about something like this?
00:20:44.052 - 00:21:21.830, Speaker D: So this is going to be really good for the GitHub repo associated with this tutorial. It looks like this person is asking about a very specific tutorial, so posting this there is going to be best. Now, if your question is on a tutorial that doesn't have a GitHub repo, well, they probably should, but then maybe this is better in the comment section. Now, again, this is where this all becomes a little bit more art than science, because maybe this specific error that they're running into is a generic error that a ton of people run into, and maybe it is better on stack overflow, or maybe there's an issue with the package. So maybe it is better on GitHub, or maybe the solution to this is opinionated.
00:21:21.910 - 00:21:24.714, Speaker A: And finally, what about this? Yep, this is going to be much.
00:21:24.752 - 00:21:26.946, Speaker D: Better for a discord or a DM with your buddy.
00:21:26.998 - 00:22:11.894, Speaker A: Anyways, our last step on unblocking you from any question is going to be join and strengthen the community of your tool. Now, at the start, it's going to be hard for you to give back since you're not going to be very knowledgeable on these tools. But as you get better at these technologies, you'll want to try to answer some of these new questions that do come in. The reason is because this will give you a chance to actually learn more about the tools that you like. It'll strengthen the community of your favorite tools, meaning if you help answer questions in a tool, it'll actually encourage other people to use the tool because there's a strong following there and likely they might actually help you sometime in the future. You helping people will make you look like a good person, and then you'll also feel like a good person. Additionally, in many forums like Reddit, oftentimes mods will actually look at how often you post versus how often you help others and comment on other people's posts.
00:22:11.894 - 00:22:18.842, Speaker A: And some mods may actually start blocking your posts for abusing the forums and not giving back to the community and only trying to take knowledge.
00:22:18.906 - 00:22:20.542, Speaker D: You and the community will be more.
00:22:20.596 - 00:22:53.734, Speaker A: Successful if you join in and help others and not just try to extract things from other people. Additionally, by engaging with the community, I can't tell you how many people I've met and I've learned and been able to brainstorm with. And then the final step is going to be iterate through these steps. Maybe you get to the end of these and you say, oh, I'm still blocked, but you'll likely be much, much more knowledgeable. So you want to go back and try these steps again. Now, this is where this whole process is a little bit more art than science, because some questions might not have been discovered yet. Only very few people know.
00:22:53.734 - 00:23:09.920, Speaker A: Not enough people understand the importance of the questions. Or maybe people don't understand your question. And this is why it's important to go back and iterate on these steps. Now that you have the basic building blocks of this incredible superpower, I encourage all of you to go out there and try this and then let me know how it went.
