00:00:08.010 - 00:00:26.470, Speaker A: Now, Alchemy also shows us and can teach us a lot about transactions and about things that are going on behind the scenes, including a concept called the mempool. To help us understand a little bit more about those transactions that we just sent and how to work with alchemy. To see more about our transactions, we have Albert from the alchemy team give us a little demonstration.
00:00:26.890 - 00:00:38.694, Speaker B: Hello, Albert here from Alchemy. I'm at that guy in tech on Twitter. Feel free to follow if you want to engage and ask any questions about this section of the video. But super excited to join Patrick here.
00:00:38.732 - 00:00:40.454, Speaker C: To explain a little bit of what.
00:00:40.492 - 00:00:42.106, Speaker B: Goes on behind the scenes when you.
00:00:42.128 - 00:00:46.134, Speaker C: Are using alchemy to submit a transaction. And we have a ton of tools.
00:00:46.182 - 00:00:56.890, Speaker B: To actually provide a window of visibility into what's going on so that you can actually debug in case there are usage errors on your website or there are pending transactions that are stuck.
00:00:56.970 - 00:01:01.278, Speaker C: Whatever it is, we provide that window into the data that you control.
00:01:01.364 - 00:01:04.842, Speaker B: Remember that all the transactions that you submit are recorded on the blockchain.
00:01:04.906 - 00:01:06.150, Speaker C: They're not controlled by alchemy.
00:01:06.170 - 00:01:12.434, Speaker B: They're not controlled by any other service provider. We are just a window. We're just the plumbing, the piping to.
00:01:12.472 - 00:01:13.794, Speaker C: Be useful to you.
00:01:13.912 - 00:01:27.746, Speaker B: So let me show you exactly what that means. Right now, I have a bunch of applications in my dashboard. You can see here that there are different projects that I've used over time. This one is the most recently active, and it is the one that I have currently set up to connect to my metamask.
00:01:27.778 - 00:01:30.374, Speaker C: So I actually use a custom RPC provider here.
00:01:30.492 - 00:01:32.550, Speaker B: And let me make my face a little smaller.
00:01:32.710 - 00:01:34.246, Speaker C: And you can see here I've misspelled.
00:01:34.278 - 00:01:44.150, Speaker B: Rinkby, but right now my network is actually connected to the Rinkbee test network via alchemy. So this is actually this application. So if I click into here, in.
00:01:44.160 - 00:01:49.146, Speaker C: The dashboard, you can see here a bunch of really interesting statistics. This is the first thing that you'll.
00:01:49.178 - 00:01:51.278, Speaker B: Probably use if you're trying to understand.
00:01:51.364 - 00:01:52.766, Speaker C: More about your application.
00:01:52.948 - 00:01:54.386, Speaker B: You'll go here and you can see.
00:01:54.488 - 00:01:57.010, Speaker C: How many compute units per second your.
00:01:57.080 - 00:02:05.294, Speaker B: Application is currently using. And this is kind of great for specifically alchemy usage understanding. But then this is also really useful.
00:02:05.342 - 00:02:07.394, Speaker C: To see, like, what's the median response time?
00:02:07.512 - 00:02:20.282, Speaker B: And so 33 milliseconds is pretty good. If that starts to increase, then you might want to figure out what's going on here. Success rate has been kind of low, so that is a clue for me to click on this tab to view.
00:02:20.336 - 00:02:24.940, Speaker C: Recent invalid requests and that I can actually see, oh, there's a bunch of.
00:02:26.110 - 00:02:29.354, Speaker B: Failed transactions where the transaction has already.
00:02:29.392 - 00:02:31.162, Speaker C: Been sent or the nonsense too low.
00:02:31.216 - 00:02:40.334, Speaker B: Or whatever it is. I can actually use this tab to debug. So that success rate is pretty useful. Throughput that's been limited. So if you are sending too many.
00:02:40.372 - 00:02:44.830, Speaker C: Requests or your website is getting spammed, you might start getting some requests blocked.
00:02:44.910 - 00:02:47.906, Speaker B: So that's what's useful to view there.
00:02:48.088 - 00:03:02.390, Speaker C: Concurrent requests over here, success rate in the past 24 hours versus the past 1 hour. The total number of requests in the last 24 hours. And this is different than compute units because each request can have a different level of computing cost.
00:03:02.540 - 00:03:08.070, Speaker B: And computing cost is measured by compute units. Total requests is just the actual number.
00:03:08.140 - 00:03:13.114, Speaker C: Of absolute requests and then of course the number of invalid requests. Cool.
00:03:13.232 - 00:03:14.618, Speaker B: So one thing I do want to.
00:03:14.624 - 00:03:16.618, Speaker C: Show you that's interesting is when I.
00:03:16.624 - 00:03:24.506, Speaker B: Do submit a transaction, and I actually have one right here that I want to send. So let's transfer between my accounts and I'm just going to send a tiny.
00:03:24.538 - 00:03:30.318, Speaker C: Amount of rinkbeeth, but I'm going to purposefully edit my gas fees to be.
00:03:30.404 - 00:03:40.510, Speaker B: Super low so that the node will actually not send the transaction to be mined or there are no miners that will actually pick it up. So you can see here, I've divided.
00:03:40.590 - 00:03:46.178, Speaker C: The priority fee and the max fee by a ton, so it's super low. And if I confirm that in the.
00:03:46.184 - 00:03:49.734, Speaker B: Matamax UI, you'll see that the transaction has been pending for a bit and.
00:03:49.772 - 00:03:54.070, Speaker C: We'Ll go over to this mempool tab. This is another really useful visualization.
00:03:54.490 - 00:03:57.958, Speaker B: And what the mempool is, is kind.
00:03:57.964 - 00:03:58.786, Speaker C: Of a holding ground.
00:03:58.818 - 00:04:07.526, Speaker B: I like to think of it as the waiting room of a restaurant, where if you're a transaction and you're waiting to get mined, the mempool is kind of like the waiting room where you're.
00:04:07.558 - 00:04:08.662, Speaker C: Waiting to get seated.
00:04:08.806 - 00:04:12.470, Speaker B: So there are different statuses for each of your transactions.
00:04:12.550 - 00:04:14.046, Speaker C: The ones that you always want to.
00:04:14.068 - 00:04:26.110, Speaker B: See are the mined transactions, because that says that your transaction is successful and it's now part of the blockchain. Now the mempool, every node has its own holding ground. So I can actually show you this quick visualization.
00:04:26.190 - 00:04:28.206, Speaker C: Remember, blockchains are run by a network.
00:04:28.238 - 00:04:31.314, Speaker B: Of nodes, and each node or each.
00:04:31.352 - 00:04:33.726, Speaker C: Computer that's running the Ethereum software maintains.
00:04:33.758 - 00:04:38.354, Speaker B: A copy of the blockchain. And as a developer, you have to.
00:04:38.392 - 00:04:40.586, Speaker C: Use these nodes to make requests to the blockchain.
00:04:40.638 - 00:04:42.086, Speaker B: Now you can use alchemy, you can.
00:04:42.108 - 00:04:43.522, Speaker C: Use another RPC provider.
00:04:43.586 - 00:04:44.786, Speaker B: You can spin up your own node.
00:04:44.818 - 00:04:49.078, Speaker C: If you want to, but regardless, you need to use a node to communicate with the chain.
00:04:49.174 - 00:04:51.958, Speaker B: Now each node beyond having a copy.
00:04:51.974 - 00:04:54.362, Speaker C: Of the entire blockchain state, it also.
00:04:54.416 - 00:05:04.690, Speaker B: Has a local memory of transaction and that's called mempool. So if there are pending transactions that are waiting to be mined, you can consider them as being in the mempool.
00:05:04.790 - 00:05:06.206, Speaker C: Now that's what we're looking at right here.
00:05:06.228 - 00:05:16.398, Speaker B: If we click on the app that I am currently using for my metamask RPC, then you can see here that there are oh, this is not the right one.
00:05:16.484 - 00:05:18.210, Speaker C: This one is the right one for rinkby.
00:05:19.030 - 00:05:20.466, Speaker B: For all the transactions here you can.
00:05:20.488 - 00:05:23.614, Speaker C: See some were dropped in placed, some were mined, and there's one that's pending.
00:05:23.742 - 00:05:25.954, Speaker B: And this pending one actually matches up.
00:05:25.992 - 00:05:31.986, Speaker C: With the one that is pending here. It's being sent to zero XCbb. And if we click on this transaction.
00:05:32.018 - 00:05:39.782, Speaker B: Hash, you get all the information that you need to debug. So you can see here that it's from my current address, zero XF five.
00:05:39.836 - 00:05:42.478, Speaker C: F, and then it's to zero XCB.
00:05:42.594 - 00:05:48.986, Speaker B: And here's the value that I'm trying to send. Here's the gas fee that I've attached to this transaction and you'll notice that.
00:05:49.008 - 00:05:58.974, Speaker C: That is super low even for the Rinkbeat test network. So knowing this and seeing wow, this transaction has been pending for 1 minute and 46 seconds. It was sent at this time.
00:05:59.092 - 00:06:06.838, Speaker B: I should probably fix that. And so over here you can actually use the metamask RPC, the metamask API.
00:06:07.034 - 00:06:08.306, Speaker C: And speed it up.
00:06:08.408 - 00:06:17.766, Speaker B: And then I'm just going to use the auto high speed up to update the gas fees. And then if we go back to our dashboard, back to our application, you.
00:06:17.788 - 00:06:20.466, Speaker C: Can see that there are some new recent invalid requests.
00:06:20.578 - 00:06:24.098, Speaker B: And this is because we've resubmitted a transaction.
00:06:24.194 - 00:06:26.406, Speaker C: And then in their recent requests we.
00:06:26.428 - 00:06:32.166, Speaker B: Have let's refresh that real quick. You can see that we are sending a raw transaction.
00:06:32.198 - 00:06:38.854, Speaker C: This one's already known and there's another one before, but that's resulting in a get transaction receipt that is successful.
00:06:38.982 - 00:06:40.026, Speaker B: And then if we go back to.
00:06:40.048 - 00:06:47.886, Speaker C: The mempool you can see boom, no more pending transactions, only dropped and replaced and mined. So this transaction, nonce number five is.
00:06:47.908 - 00:06:56.300, Speaker B: Now successful and you're on your way to developing and maintaining the rest of your application. So yeah, thanks, hope that was useful. Let me know if you have any questions.
