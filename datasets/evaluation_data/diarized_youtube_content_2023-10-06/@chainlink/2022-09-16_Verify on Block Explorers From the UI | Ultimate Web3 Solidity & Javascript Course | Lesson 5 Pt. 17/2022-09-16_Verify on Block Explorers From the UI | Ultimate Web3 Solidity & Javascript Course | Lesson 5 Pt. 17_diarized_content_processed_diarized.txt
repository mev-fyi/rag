00:00:09.450 - 00:00:11.978, Speaker A: Now on Etherscan we actually can verify.
00:00:12.074 - 00:00:13.870, Speaker B: And publish our contract code.
00:00:13.940 - 00:00:16.286, Speaker C: What is verifying and publishing your code?
00:00:16.388 - 00:00:18.814, Speaker D: Well, right now our code looks like.
00:00:18.852 - 00:00:21.550, Speaker E: A huge jarble of bytecode, and anybody.
00:00:21.620 - 00:00:23.434, Speaker C: Looking at our contract directly on chain.
00:00:23.482 - 00:00:25.762, Speaker A: Will just see this huge jarble of bytecode.
00:00:25.826 - 00:00:29.478, Speaker D: We could use a decompiler to try to decompile the bytecode into what it.
00:00:29.484 - 00:00:33.078, Speaker F: Looks like in solidity, but this can often take a long time and a.
00:00:33.084 - 00:00:34.422, Speaker A: Lot of processing power.
00:00:34.556 - 00:00:36.358, Speaker F: So instead we can just make it.
00:00:36.364 - 00:00:40.162, Speaker B: Much easier by verifying and publishing the code ourself.
00:00:40.226 - 00:00:41.494, Speaker F: If you go ahead and hit verify.
00:00:41.542 - 00:00:43.786, Speaker G: And publish, we can scroll down and.
00:00:43.808 - 00:00:46.134, Speaker F: We can add compiler information to compile.
00:00:46.182 - 00:00:48.438, Speaker C: This on Etherscan and other block explorers.
00:00:48.534 - 00:00:50.818, Speaker A: This is a single file compiler version.
00:00:50.854 - 00:00:56.074, Speaker B: Is 0.8.7 and its open source is license is MiT.
00:00:56.202 - 00:00:58.538, Speaker G: Let's go ahead and continue and we're.
00:00:58.554 - 00:01:01.040, Speaker E: Going to copy paste our solidity code.
00:01:01.650 - 00:01:04.574, Speaker G: Into this large section. Paste.
00:01:04.622 - 00:01:06.674, Speaker C: We don't have any constructor arguments so.
00:01:06.712 - 00:01:13.758, Speaker B: We can skip this section. We don't have any libraries or any other miscellaneous settings, so we'll select I'm.
00:01:13.774 - 00:01:17.778, Speaker G: Not a robot and we'll hit verify and publish.
00:01:17.954 - 00:01:20.598, Speaker B: You might have to wait a few minutes, but awesome.
00:01:20.684 - 00:01:23.026, Speaker H: Our contract was successfully compiled.
00:01:23.138 - 00:01:27.686, Speaker E: Now if we go back to contract source code, we can see all the.
00:01:27.708 - 00:01:34.282, Speaker G: Code in here, and if we grab our contract address place into the search.
00:01:34.336 - 00:01:36.426, Speaker C: Now and we go to contract, we.
00:01:36.448 - 00:01:38.026, Speaker H: Get a little green checkmark and we.
00:01:38.048 - 00:01:41.194, Speaker E: Can see anybody can now read our source code.
00:01:41.312 - 00:01:47.694, Speaker B: Additionally, those buttons that we saw in remix for reading from our contract and writing to our contract are in this.
00:01:47.732 - 00:01:52.094, Speaker C: Read contract and this write contract. If we read the contract and we.
00:01:52.132 - 00:01:54.446, Speaker B: Retrieve the most recent number, we do.
00:01:54.468 - 00:01:57.826, Speaker H: Indeed see that we have seven here because we recently stored seven.
00:01:58.008 - 00:01:58.594, Speaker G: Awesome.
00:01:58.712 - 00:02:00.594, Speaker E: A quick note, this might already be.
00:02:00.632 - 00:02:03.106, Speaker A: Verified for you, since Etherscan might get.
00:02:03.128 - 00:02:04.338, Speaker B: Smart enough to notice that a lot.
00:02:04.344 - 00:02:06.062, Speaker C: Of people are deploying the same bytecode.
00:02:06.126 - 00:02:07.394, Speaker B: If it's already verified for you.
00:02:07.432 - 00:02:09.442, Speaker C: Just go ahead and walk through these steps anyways.
00:02:09.506 - 00:02:11.334, Speaker H: Now, the code verification we just did.
00:02:11.372 - 00:02:15.526, Speaker A: Was pretty simple and straightforward. Because our code was pretty simple and.
00:02:15.548 - 00:02:21.478, Speaker B: Straightforward, using larger and more complex code can make the verification process a little bit harder.
00:02:21.574 - 00:02:23.386, Speaker C: Additionally, we don't always want to have.
00:02:23.408 - 00:02:30.026, Speaker F: To click buttons on etherscan to verify our code. We want to do it programmatically. So in later sections we'll learn how.
00:02:30.048 - 00:02:32.758, Speaker D: To verify all of our code directly.
00:02:32.854 - 00:02:34.362, Speaker B: Through our code editor.
00:02:34.426 - 00:02:36.254, Speaker E: You can imagine the process is this.
00:02:36.292 - 00:02:39.754, Speaker B: Easy for deploying to any EVM chain in our alchemy.
00:02:39.802 - 00:02:43.758, Speaker H: We could easily create a new app and change our network. And you can see how easy it.
00:02:43.764 - 00:02:45.566, Speaker A: Would be to just switch out this.
00:02:45.588 - 00:02:48.014, Speaker H: RPCRL and your private key to work.
00:02:48.052 - 00:02:48.938, Speaker C: On a different chain.
00:02:49.034 - 00:02:51.054, Speaker E: This process is also the same for.
00:02:51.092 - 00:02:57.026, Speaker A: Harmony, phantom, avalanche, et cetera. And if we wanted to switch its chains, we would just switch the RPC.
00:02:57.058 - 00:02:59.942, Speaker C: URL and switch the private key and.
00:02:59.996 - 00:03:02.180, Speaker A: Everything else would stay exactly the same.
