00:00:03.450 - 00:00:36.390, Speaker A: And we are live. Hopefully GM everyone. So you should be able to hear some music. You should be able to hear me or see me at least. Let's hit some GMs into the chat so I can confirm that you can actually hear me. And we're going to start in a couple of minutes. So we are going to wait for everyone to join us and then we're going to kick this workshop, kick off this workshop.
00:00:36.390 - 00:01:36.966, Speaker A: Fantastic. Thank you. GMT. What up it? I have no idea, literally. So this is like from the broadcast platform that we're using. They have couple of built in music templates, whatever. So I just hit the lo fi.
00:01:36.966 - 00:02:01.666, Speaker A: So I don't know, but I can maybe shazam it later or Google it and put it on Twitter and we're gonna find out, hopefully. But yeah, let's start. So first turn off the music. It's not okay. So I'm going to turn on the music. Turn off. Sorry, hide this banner and yeah, let's start.
00:02:01.666 - 00:02:48.850, Speaker A: So hello everyone, welcome to another channel hackathon workshop. Today's topic will be integrating chat JPT with decentralized application using chainlink functions. So hopefully you already know what Chainlink functions is, but if not, we're going to cover that as well. I assume that all of you here watching this know what chat JPT is, obviously, and maybe try it and maybe have a couple of ideas how to use it in a web three space or with blockchain technology. So this workshop is going to be all about that. I can also say that for this hackathon, for the first time we have a separate AI tracks. So artificial intelligence track.
00:02:48.850 - 00:03:22.160, Speaker A: So anything that use similar technologies to this one is applicable to that track as well. So if you have some ideas, make sure to apply to that track as well. And yeah, let's build. So before that, my name is, as you maybe already know, Andre Rakichen. I'm one of the developer advocates for chain protocol chain clubs. Here you can see listed my twitter and lens handles. If you have some questions after this workshop, after the Q a session, feel free to ping me there to write a tweet on my wall.
00:03:22.160 - 00:04:20.990, Speaker A: I'll make sure to answer you. Okay, yeah, this is going to be like a hands on session, so you can follow along or code along with me. I'm going to try to keep it at a reasonable pace, but for you to be able to use chainlink functions later, you will need to sign up for beta. So chain functions is currently still in beta. During this workshop, I'm going to simulate the response so we're not going to actually deploy our smart contract to the blockchain, but if you want to deploy it to some of the available testnets at the moment, you will need to sign up for chain of functions and you will be approved in 24 to 48 hours max. That's probably under 24 hours. So if this QR code for some reason does not work, the official website is functions chain link and this is like a simple type form.
00:04:20.990 - 00:05:04.490, Speaker A: Tipe has a good question. If we did the mask twice yesterday, are we registered already? Yes. So if you already sign up for beta and you're whitelisted. Yeah, don't need to do one more time. So how to be whitelisted? You will need to enter the address, the wallet address, basically of your wallet account, externally owned account, and you will be able to create functional subscriptions, manage them, et cetera. If you're not whitelisted or you're using different wallet address, you should be able to actually see inside the terminal like the error message saying hey, you're not whitelisted. This project is currently in beta, blah, blah, blah.
00:05:04.490 - 00:06:22.610, Speaker A: So go to this URL and register. So again, I'm going to just simulate the response, but if you want to deploy and actually use this on some of the testnets, Ethereum, Sepoli and Polygon Mumbai are at the moment available, then you will need to sign up for the beta. Okay, so what is Chainlink functions? So Chainlink functions is basically a system to execute any code you want to run and get decentralized and verifiable consensus on the result. So you are aware that Chainlink has a system called any API or external API, whatever. And that system, it works great, but it's not extremely suitable for production ready code. The main reason, or the major reason, is that if you follow along the official documentation, you will see that, I don't know, the beginner friendly example, actually use one single node and one single API endpoint. This means that this thing is extremely centralized, right? So for you to be able to actually properly build a production ready code, you will need to manually speed up multiple nodes and have multiple API endpoints.
00:06:22.610 - 00:07:04.690, Speaker A: And then you will have like a verifiable result. Jenny functions take this to next level. So let's say you have API endpoint and you want to create, for example, HTTP, get requests to that API, any API endpoint. Let's say it's like forgetting a price of some assets. Whatever the request is not going to go through the node. Actually it's going to go through the dawn. So as you already know, or maybe you don't know, dawn stands for decentralized Oracle network and it is a network of chainlink nodes which basically function separately.
00:07:04.690 - 00:08:11.142, Speaker A: And this dawn is just decentralized Oracle network. It's not a blockchain, but it needs to reach a consensus. So that's the main reason. So how this thing works. Basically, if you create an HTTP get request, each node is going to execute the same request in its own server environment, provide a callback result to the rest of the network via peer to peer network called OCR. Then the dawn will reach a consensus on the final result and then send it back as a callback value to the calling smart contract, which is purely the Sankroi solution and much easier for you rather than managing multiple nodes and multiple endpoints. Okay, but besides this HTTP get request now, you can actually write any type of code.
00:08:11.142 - 00:09:12.350, Speaker A: It can be HTP post request like you can send emails, notifications, et cetera. You can perform like computation that is usually extremely expensive to be done on a blockchain or in solidity. Like for example, you have a Defi project and you need to create some kind of complex math or some, I don't know, some net computation for, I don't know, some extreme use cases in DeFi, whatever, solidity is not the best language for that. Solidity doesn't have decimal places. All of these computation can be extremely expensive to be done on chain, for example, I don't know, like logarithmic values, et cetera. So you can actually outsource or crowdsource this work to the dawn at the fixed price as like simple chain link request. So literally any code we have a couple of questions.
00:09:12.350 - 00:10:36.470, Speaker A: So any API is not OCR agnostic, right? And chaining functions is? Yes, pretty much, yes. So this is much decentralized solution and also have much more functionalities than just any API, literally any code at the moment for the beta, that's only vanilla JavaScript, but this is beta on a testnet. We are going to expand it pretty soon to multiple languages. Vanilla JavaScript means that for this hackathon at least you will not be able to install external libraries like I don't know, ether JS or something like that. But again, it's still pretty doable to write JavaScript because this functions thing come with some predefined functions library which are extremely easy to use. Okay, so how this thing works for you as a smart contract or software developer, backend developer, the only one thing is important and that's how to properly send a request that's it. So in step number one, your smart contract is going to send your code as function argument and your code, I mean literally JavaScript code, to a decentralized oracle network, or dawn.
00:10:36.470 - 00:11:50.830, Speaker A: And as I said, each Dawn's oracle node is going to run the same code in separate serverless environment. And then with step two, the dawn will aggregate all of these independent computational results, applies a consensus, and returns the final cryptographically verified result to your smart contract. For this workshop I already mentioned for a couple of times, I'm going to simulate the response. Why is that? Because if there is an error in your JavaScript code or some unhandled handled error use case, then you will still need to pay some amount of link tokens per computation because nodes are still going to execute that JavaScript code. But a beauty is that you can actually change this JavaScript code because it's literally a functions, because it's literally like a function argument, solidity function argument. So this is more Fii Fii. Okay, so this is a schema of chain link functions architecture.
00:11:50.830 - 00:12:21.514, Speaker A: Okay, we have a couple of questions. Actually. One question that's amazing. Chaining function is going to change everything. Yeah, hopefully it's going to change everything, but you will now need to build some amazing things with it. Okay, so you'll be responsible only for creating this userdap smart contract. So this is your smart contract, which again is anything like whatever you want to build on.
00:12:21.514 - 00:13:22.986, Speaker A: Chain is going to be present there, and there is going to be a call to the chain functions similar to call to data feeds or vera randomness automation, et cetera. So your end consumer can be your wallet account, or maybe time based chain link automation if there is something to be automated. I see a question, so I'm going to finish this sentence and answer the question. So after that, or before that, you will need to create a function subscription. So subscription model is exactly the same as VRF subscription model automation subscription model, et cetera. So you're going to create a subscription, fund it with some link, and then you can add multiple consumer contracts to the same subscription. So this is what this Chainlink functions smart contract billing registry is for, just for handling subscriptions.
00:13:22.986 - 00:14:09.020, Speaker A: You'll need to do this only once and that's it. I'm not sure for this beta, but there should be like a UI for doing that. If not, it's extremely simple to call the function method on chain. Okay, couple of questions. Yeah, Edwin says, can you elaborate on chain link governance? Yes. So for at least beta, where we only have this thing on a testnet, the consensus mechanism that is being used is median value. So imagine that you have like for example, five nodes, and five nodes needs to, I don't know, divide two numbers.
00:14:09.020 - 00:15:03.482, Speaker A: Then each of them are going to, via peer to peer to network, report its own value, and then we're going to have a median value and a cassette. In the same way that if for example, we have five nodes and three of them manage to execute HTP get request, for example, and two of them fails to do that, we will still have a consensus with that. If the callback value from the get request is the same, we're going to still have the consensus on that result. This is still in beta once again. So this consensus mechanism is subject to change. But at the moment for this hackathon, at least it's going to work like I described. Okay, yeah, good question.
00:15:03.482 - 00:15:55.280, Speaker A: So when I ask judgept the same question twice, it answers differently. So how do nodes reach consensus if each will get a different chat JPT response? Well, it's per request based, so your first ask to the chat GPT is going to be one functions call and then they're going to have the same response. Then with another it's going to be another attack. So that's pretty much the thing. Okay, can you pass a seed? Can you pass a seed to di, so all the oracles for example, the same thing with the same prompt? Yes, you can pass whatever you want. I haven't talked about that. But you can actually pass API keys, et cetera, because you're going to need it.
00:15:55.280 - 00:16:37.814, Speaker A: And they are going to be encrypted. I'm going to show you how to do that, which means that they're not going to be stored on chain or they cannot be sniffed. So basically you can pass whatever you want, your source code can be whatever you want, you can implement whatever logic you want in it, the nodes are going to execute it. Okay, we don't have any more questions, so I can continue. This is the second part of the data, gigantic diagram, channeling functions, architecture. And again, this is the thing that you don't really need to worry about as a smart contract development. But this is how it works under a hood.
00:16:37.814 - 00:17:19.514, Speaker A: So request is going through dawn, through the dawn. Then each node is going to execute in the same service environment, blah blah. We already spoke about that. And then it's going to, as I said, return the callback value to the calling smart contract. So once again, this is how it works under the hood. But as a smart contract development, you are only in charge of this tiny part, your smart contract and the JavaScript code that you want to pass to the functions. Okay, so coming back to the story, what is this JavaScript code? Well, as I said, multiple times, it can be anything, literally anything.
00:17:19.514 - 00:18:53.394, Speaker A: So you can connect your smart contracts to some, I don't know, weathers statistics data and create like dynamic NFDs. You can connect data, as I said, to password protected iot devices because as I said, secrets are not stored on chain, they're encrypted and only dons can decrypt it. They're encrypted with the nodes public key and then each node can decrypt it with its own private key and then after the execution the secrets are automatically deleted. So extremely safe mechanism so you can connect it to password it device like smartwatches, do whatever you want, like I don't know, Tesla cars like Harry did and one of the previous hackathons, et cetera. Connect a decentralized database like IPFs to some on chain, off chain governance, whatever you want. Fetch any web, three data, sorry, any web, two data like connected with AWS, Google Cloud, Facebook, Instagram, whatever. We have multiple of boilerplate code or demo examples like how to connect chain functions or smart contracts on a blockchain with Instagram and Facebook, business pages with Twilio and Spotify endpoints with AWS, currency managers, et cetera, et cetera.
00:18:53.394 - 00:19:50.440, Speaker A: So everything is on smart contract here with GitHub, and I can even provide all of these URLs on my Twitter afterwards if you want to check those examples as well. Yeah, Twitter API, connect with Twitter, do whatever you want, etc. So these are a couple of suggestions, but if you still need inspiration, there's a separate website called usechainlink functions. So at this website, usechainlinkfunctions.com, there are JavaScript code snippets that you can copy paste and use in your projects. The best part is that even you can contribute to this website so you can open a pull request, provide some JavaScript code that can be used with chainly functions. Someone from the team is going to review the PR code.
00:19:50.440 - 00:20:31.880, Speaker A: Yeah, go from the PR and eventually merge it and it's going to appear at usechaining functions website. So actually I'm going to use one of the code snippets from this website for today's workshop, and it's written by the legend itself, Patrick Collins. So yeah, let's build. But before that we have a feedback form for this workshop and all other previous and future workshops. No other things hackathon related. So whenever you have time, scan this QR code and fill it. It means a lot to us.
00:20:31.880 - 00:20:57.198, Speaker A: Okay, so I'm going to remove this thing. We have a question. I made a PR on use chain functions, but it's not reviewed. Can you please review that? We'll see. I think I can't, but I'm going to double check it. But someone from the team is going to review it and eventually merge it. So don't worry about it.
00:20:57.198 - 00:21:43.758, Speaker A: Just a lot of things is happening to the hackathon. So thing is that I probably don't have time capacity at the moment, but someone from the engineering is going to review it. Okay, let's start with the workshop. So I'm going to actually paste this to the chat function startkit. So go to this website and clone this repo. So this is like a hardhead project which is like a function startcaster kit which is like a boilerplate code for using functions. But the thing is that there is like a bunch of other branches named tutorial number.
00:21:43.758 - 00:22:42.862, Speaker A: So I highly encourage you to check those as well because there is like multiple tutorials present in the repo. But we are going to git clone the repo itself now. So I'm gonna present my terminal. You should be able to see this. And what I'm going to do is I'm going to type git clone testing and hit enter. So this git cloned the repo inside functions target and now I'm going to CD into that folder functions and open my code editor of choice. I'm using visual studio code.
00:22:42.862 - 00:23:11.980, Speaker A: You can use whatever you want. Basically I'm going to open it with this command. This is like a shortcut which means that I'm going to open visual studio code in this folder means in this folder. So you can open it manually, whatever. But git clone the repo and open integrated like not integrated, sorry, your code editor. I'm going to stop sharing this link. Give me a second.
00:23:11.980 - 00:23:41.342, Speaker A: Hide sample project links. I'm going to share it. I don't have it with myself, but I'm going to share it on Twitter afterwards. So this is my Twitter handle and I just need to find it and I'm going to share all these URLs. Don't worry. Okay, let's now present visual studio code. Give me a couple of seconds.
00:23:41.342 - 00:24:24.740, Speaker A: So share screen window and you should be able to see this. Okay, I'm going to zoom it like this. Zoom it a bit. And yeah, we can start with the workshop. So this is the revo okay, we have another question. Can you compare cost of running some code example in solidity versus chaining down? It really depends on the computation you want to perform. Like solidity can be extremely cheap for some things, but extremely costly for other.
00:24:24.740 - 00:25:36.800, Speaker A: While this is kind of, it's a good idea, maybe I can do some benchmarking, but you should really come with the example and then we can figure this out like exact numbers. Like math thing should be like ten times cheaper via John than the solidity. But again, you get the point. How can I send different arguments as input by user directly from the contract? The user only needs to enter the arguments I'm going to show you in ten minutes. Okay, let's start. So we have a couple of stuff over here, but the first thing actually that we need to do is that we should install this thing. So open integrate terminal and type NPM installed this thing.
00:25:36.800 - 00:26:27.760, Speaker A: Let's take a look at the repo itself. It has a really nice readme by the way. So let's see if I can maybe do something like this preview does have like a really nice readme. We talk with the overview support networks, okay, we have island, Fuji, Testnet as well, some tutorials, examples and then steps that I'm going to execute now during this workshop environment, variable management, et cetera, all of the commands, glossary, et cetera. So I really suggest you to take a look and read it. It will take five to ten minutes max, but it is an extremely valuable resource besides the official docs, obviously. So cool.
00:26:27.760 - 00:27:23.050, Speaker A: There's two real important files here, actually three, but two JavaScript files and one solidify. So the first file that is extremely important is this functions requestconfig js. So this is the config thing for your channeling functions project. The second one is the JavaScript code that we are going to pass as a function argument. I'm going to create it right now and name it functions request source js. So create a new file, name it functions requestsource js. And finally the third one is this functions consumer solidity.
00:27:23.050 - 00:28:09.834, Speaker A: So this is a solidity contract that actually communicates with Don. So this is like a boilerplate code. It has functions library here imported. They're going to be part of the NPM package once this project is out of the beta and it has three storage variables, latest request ID, latest response, and latest error if there is any errors. So execute request this is the source code that you're going to pass. Basically we are not going to touch this solidity code at all. And fulfill request.
00:28:09.834 - 00:28:55.200, Speaker A: This is where you're actually going to have a response. So it's here and then you're going to actually do something with the response. The code here is extremely dumb. It just populates these storage variables over here, but this is where you're going to actually perform whatever you want with the callback values like execute request. This is like a syntax, literally copy paste it and that's it. So config we are going to set in a minute, but first we need a source code, a JavaScript source code that we want to pass to the DOM. So I'm going to again stop sharing my screen.
00:28:55.200 - 00:29:38.060, Speaker A: Remind me which branch you're on on the main branch so you don't need to get checkout, just clone the repo and I can zoom it a bit. Yeah, I'm going to zoom it, but for that I'm going to share my screen. So as I said, this is usechainingfunctions.com website. You can add your own example over here. And here is a prompt AI for a response. So again, submitted by the legend itself.
00:29:38.060 - 00:30:29.130, Speaker A: This code will ask OpenAI for information on chain. And this 31 line of code is everything that we need for this work rack. So what I'm going to do now is that I'm going to hit this button over here or select everything and copy this code inside that functions request source Js file. Okay, so we're just going to copy this and then we're going to explain what the code actually does. Okay, stop sharing my screen. Present visual studio code, paste here and zoom it a bit. Save it.
00:30:29.130 - 00:31:03.590, Speaker A: So what this thing does, it gets prompt as a function argument. It checks for secrets and there is an error. Handling means that if we haven't set OpenAI key, it's going to revert. It makes HTP request, specifically HTP post request to this API endpoint. This is the authorization header. This is the text model that used. This is the official prompt.
00:31:03.590 - 00:31:43.954, Speaker A: I'm going to set temperature to one, so from zero to one. So don't forget to do that. Set temperature from zero to one. I can wait a bit. And finally we have max tokens. So Max tokens, you can imagine it as a number of words that AI model is going to return to you. Not exact math, but this is basically for you to limit the response size because OpenAI API is, if I'm not mistaken, pay as you go.
00:31:43.954 - 00:32:39.410, Speaker A: So this is just for you to save you some money. After that we have API response. We are basically awaiting this promise to be resolved and we are returning the result as a string. So this function library has builded function and code string. So console log is just a JavaScript console log for us to see it in a terminal. It's not going to be part of the, it's not going to be present on chain. Okay, so before we start, I'm going to stop sharing my screen once again and then I'm going to yeah, thank you for the, for the URL.
00:32:39.410 - 00:33:27.310, Speaker A: I'm going to present my screen once again. Sorry about that. So you need to go to platform OpenAI.com account API keys. I'm going to paste this link over here, log in with your chat JPT account, or sign up and generate a new API key. Just there will be a button, generate new API key, stop sharing here, paste it in the chat. And before we continue, I must say that there is a possibility that you will get error four to nine, if I'm not mistaken, which is literally too many requests error.
00:33:27.310 - 00:34:26.534, Speaker A: You know that due to its popularity, chat JPT sometimes have the issues that even you cannot use it from the web based UI. So the same things applies to the API keys. If you have that problem, you will need to upgrade your API key plan. It is pay as you go. So that means that they don't going to charge you a lot. If you limit the number of tokens as I have limited it to seven, that means that when you sign up I think you'll get like $18 of credit or something, which should be more than enough for this example and which should be enough for, again, enough for hackathon project. After that we are going to figure it out.
00:34:26.534 - 00:35:14.390, Speaker A: But this is currently the status, maybe you will not need to upgrade it, but we are going to literally see. So again, if you have like four to nine error, I think too many requests error, there is extremely high possibility that you will need to upgrade your API key. So this is more of Fii for you guys. So I have my API key already. So I'm going to for the final time present visual studio code and that's going to be it. I'm not going to do it again and again and again. Okay, so I'm going to talk a bit now about secrets management.
00:35:14.390 - 00:36:15.050, Speaker A: Clear this thing and talk about secrets management. So for this example to work, we will need to set three values, OpenAI key, API key, obviously our private key like wallet private key, whitelisted wallet, private key, and RPC URL for a blockchain that we want to be on. So at the moment, ethereum, sepolia polygon Mumbai or avalanche Fuji. Usually what you will do is we will create env file, paste that as a plain text, right, your private keys, et cetera. And you will make sure that you don't push that to GitHub. We went one step forward, so there is no env file. We have created from scratch.
00:36:15.050 - 00:37:33.454, Speaker A: Again, this package, Chainlink env, which means that this package is going to encrypt your secrets. It's going to create a secret GitHub gist for a single response, for a single request. Sorry. And that gist is going to be, pardon me, it's going to be deleted. After the request, it will automatically generate a file called Env enc. It's not the best practice to push that file to GitHub either, but nothing huge is going to happen if you accidentally push it because there will be present encrypted values of your secrets, private key, API key, et cetera. So to be able to encrypt those, we will first need to set up the password.
00:37:33.454 - 00:38:15.374, Speaker A: So make sure you remember that password. And to set it up, the command is present in the readme actually as well. So readme is extremely valuable resource for this thing. So the command is NPX envw. Okay, once again, NPX envw set password and hit enter. So again, enter the password. Input will be hidden.
00:38:15.374 - 00:38:53.274, Speaker A: So I'm going to enter some password and hit enter. This is extremely bad password, by the way, but I literally typed test just for this demo. So I'm going to copy paste this thing to the chat as well. So you can copy paste it. So type this. We have an interesting question. Does env have a UB key integration like 99%? No, actually I think no, but this is a good suggestion.
00:38:53.274 - 00:39:33.122, Speaker A: Maybe engineering team can expand it, but at the moment I don't think so. I got the error four two nine. Yeah, so I spoke about error four two nine. That means that you will probably need to upgrade your OpenAI API key to a paid plan. It's going to be extremely, you will spend like $5 max for the hackathon itself, but you will need to connect your credit card to do that. Sorry, that's like just open AI chat jebbit. I think.
00:39:33.122 - 00:40:26.200, Speaker A: Nothing we can really do about it or just wait for less traffic on chat Jebbity. It's extremely popular. Okay, so we set the password, and now our next command will be NpX env. So I'm going to type that NPX envelope name. I'm going to enter the value itself. So we are going to go really slowly with this. So first, this is the command for you to copy paste this.
00:40:26.200 - 00:41:14.620, Speaker A: And we will need to set three values. So value number one is rpc URL. So I'm going to use polygon mumbai. I will set polygon mumbai rpc URL or you can set these two as well. Okay, so how I'm going to set polygon mumbai rpcrl. I'm going to give me a second copy the name of the secret variable itself, polygon online RPC URL. I'm going to hit enter.
00:41:14.620 - 00:42:00.854, Speaker A: Now I'm going to enter the variable value. So I'm going to now enter that endpoint which you can get from infura alchemy, all of other these node as a service. Or if you're running your own polygon mumbai node, then your own node. But here you're going to enter the whole, for example, if you're using alchemy, the whole alchemy URL with the key itself. So I'm going to now copy paste this thing from my nodes. Nodes. You unfortunately won't be able to see it, but this is like alchemy endpoint for alchemy rpcrl that I'm going to use for polygon Mumbai.
00:42:00.854 - 00:42:44.866, Speaker A: And I'm going to hit enter. And now it says, would you like to set another variable? If yes, again, repeat the process. So the second variable that I want to set is private key. So this is my wallet private key that is whitelisted for the usage of chainlink functions. So private key, this is the name of the secrets variable. Let's see. So copy paste private key, or I can actually type it private key, another variable.
00:42:44.866 - 00:43:38.338, Speaker A: Hit enter. Please enter the variable value. So right now I'm going to copy paste my whitelisted wallet private key, grab it from my notes, paste it here, and hit enter again. Would you like to add another value? Yes, we need to add open AI API key and let's see where it is. Give me 20 seconds. Yeah, we can actually do something like this. Open AI API.
00:43:38.338 - 00:44:06.834, Speaker A: Okay, so we are going to set this value. Okay. First paste it into the chat. Okay, this is the naming I used. So open AI API key. This is the variable name. Hit enter enter or copy the API key itself.
00:44:06.834 - 00:44:45.614, Speaker A: I'm copying it right now. And hit enter. Would you like to add another variable? No. So to finish, I need to press enter. And that's it. I've successfully set all of my secret variables. Do we have any questions so far? Yeah, another thing that I mentioned, the new env so env encrypted file is going to be generated and this is going to.
00:44:45.614 - 00:45:08.146, Speaker A: Put this down. Put this aside. This is the content of env encrypted file. So this is my RPCrl, my private key and my OpenAI ape key. But they are encrypted. These are not the actual values. These are encrypted values of the secrets that I provided.
00:45:08.146 - 00:46:03.270, Speaker A: So even if you push that to the GitHub only with your password, this can be decrypted. Okay, do we have any questions? If someone is running a node, what prevents him from extracting cryptic secret key and use it on its own? This is currently work in progress. So for the beta only chain link nodes are being run. So we don't have that concern at the moment. But again for the production engineering team is currently working on a system that is going to prevent this from happening. Obviously this is a big concern. Do we need all three of these RPC URLs? No, only one.
00:46:03.270 - 00:46:24.990, Speaker A: For this workshop we are going to use Polygon Mumbai. But I pasted for you to know that there is sepolia and avalanche available. And this is the respectable secrets names. So we're going to use polio. Actually we need this RPC URL just for a thing to work. As I said, I'm going to just simulate this. I'm not going to deploy it to Mumbai.
00:46:24.990 - 00:47:15.242, Speaker A: Is there a script available that we can run to ensure that the keys have been correctly? I don't think so. I can create one for you, but what you can do is that you can type NPX, env, view this command, and with this command you can validate that you have set them correctly. So this is going to decrypt them and display them in your terminal. So I'm not going to do it at my end because you're going to see my secrets. But this is the way, I mean, they're dumbest secrets. By the way. I created a new keys, new wallets, everything from scratch.
00:47:15.242 - 00:47:44.886, Speaker A: So no worries about that. This is how you're going to view it. No worries. Which algorithm is used? I don't know, but we can check it later. There is like a source code available at the package json file or at GitHub. I haven't checked it, sorry. I should know that actually.
00:47:44.886 - 00:48:22.290, Speaker A: But we can check it and yeah, I can maybe answer this on Twitter. Okay, now the fun part. Let's combine these secrets with the config that can execute the source code we copy pasted from Patrick. Good one, good one. Okay, but try it but these are all dummy values by the way, so there is no money there. Okay. Yeah, so you, yeah, you can see code.
00:48:22.290 - 00:49:19.800, Speaker A: Excellent. So I'm going to split this on the right so you can follow along better. No, at the moment no. Okay, so we have this config, so we have location which can be inline remote for secrets where you can store them. We have languages that you can write code at the moment, again only JavaScript, vanilla JavaScript is support. There are a couple of return types, so these are the types that chainlink functions can return to the calling smart contract. So inside that fulfill request function and solidity you should actually be aware of the data type that your response is going to be.
00:49:19.800 - 00:50:20.314, Speaker A: So you can send unsigned integer signed integers like numbers, strings and buffer is basically for bytes. So bytes can be anything like you can ABI encoded on the JavaScript side and ABI decoded on a solidity side. So it can be like address array of addresses, structs, mappings array of structs, whatever. This is a Kronos powerful whatever bytes value can be in solidity. Okay then we have this request config that we need to set up. So first of all, location of your source code, again inline or remote, we are in beta, so only inline is currently supported, but can be remote as well. Then code language again JavaScript nothing that we can actually set here.
00:50:20.314 - 00:51:15.450, Speaker A: So we're going to skip these two. Third one, source code. So where is our source code? So our source code is actually inside functions request source Js which is present at the root of this repository. So what you can see here there is like calculation example and API request example. So these examples is like tutorial examples, boilerplate code, you can actually check it out, try it, but I skipped it and go straight to the chat Jpt thing. So what I need to do here is that I actually need to type functions request source, that's it. This is the source code, like JavaScript source code, this one then we have secrets.
00:51:15.450 - 00:52:07.110, Speaker A: Okay, so secrets can be accessed within source code. Why do we need secrets? Because we maybe want to provide some secret data to the calling JavaScript code. So I'm going to split this to the right, and here you can see that we are using only that you can access secrets object, this one with secrets keyword. And then this example has OpenAI key. So what I need to do is that I actually need to set this value here. So I'm going to change. So OpenAI key is OpenAI API key that I encrypted using env enc library.
00:52:07.110 - 00:53:46.074, Speaker A: Okay, so this literally means that, okay, I have a typo here that from secrets object, from openi key, it's going to decrypt it and use only this variable inside for a code execution. Okay, then we said we have HTTP get request which has this prompt and where this prompt comes from. From here it's the first argument. Okay, per node secrets, nothing for this workshop, basically it's assigned to each done member, which means that if you have four nodes, you can actually specify per node secrets and then you'll have some code logic in your JavaScript code. So this is basically for you to prevent to hit like, I don't know, let's say that you have four nodes and you want to send an email after some computation. You don't want to send four emails, you want to send only one email with per node secrets, you will have some kind of flag as another secret, and then you will have like an actual JavaScript logic for handling that secret. So if node is aware of that flag value, then it's going to send the email, otherwise not.
00:53:46.074 - 00:54:36.170, Speaker A: So this is why per node secrets exist. Wallet private key just get the private key from the env and yeah, arguments. So these are the arguments that you can provide to the JavaScript code, like a function arguments, it needs to be a string array. So these are a couple examples and dummy ones. Here is the actual prompt that we want to send. So if you have any examples or any recommendations for what should we ask chat GPT for, please write into the chat. I'm going to wait for a minute or two and then we can continue with the workshop.
00:54:36.170 - 00:55:37.470, Speaker A: Until then I can answer some questions. So, okay, can we, can we use functions without env? No, you will need to at least encrypt wallet private key and RPC URL, otherwise it's going to fail and this is basically the reason why. So thanks tp for clarifying that. What was the temperature stuff in data HTP request? Good question. This is from the chat GPT docs, actually OpenAI docs. So I'm just going to quickly go there to give you the exact answer. Give me 20 seconds max.
00:55:37.470 - 00:56:30.230, Speaker A: Basically K temperature, temperature temperature. Okay, so temperature can be zero to 10 is minimum, one is maximum. The higher temperature the more creative is the response, while the lower temperature, the more predictable is response. This is basically TLDR for the temperature. So for the return type, if you are making our own custom version, we just make conversion of that argument, what should be its solidity. Yes, that's correct. The only thing we have.
00:56:30.230 - 00:56:46.200, Speaker A: Yes, basically. Okay. Create a character sheet for dungeons and dragon. Dragonborn wizard named. Okay. And change the name to Andre. That was clever.
00:56:46.200 - 00:57:36.270, Speaker A: Okay. Asking because I want to use it in foundry. Yeah, I'm not sure about the workaround for foundry because this is a JavaScript only, but maybe we can hack something and continue the conversation on Twitter and temperature. Yeah, thank you. I haven't seen these comments, sorry. So you save me some time from Google. Okay, so we have only one suggestion about dungeons and dragon character, but maybe we can do something similar because we want to limit the single line, maybe.
00:57:36.270 - 00:58:20.412, Speaker A: Okay, let's see something like this. Please give me a name of chain link Dungeons and dragon character in one line. Maybe chain link marine dungeons and dragon character in one line. Let's try with that. I don't know if we have something more exciting. We can try that. And final thing is that we need to specify the return type.
00:58:20.412 - 00:59:10.830, Speaker A: So we are not expecting number, we are now expecting string. So we want this thing, JavaScript thing to send the string to calling smart contract, which is actually written here. So encode string. Okay, the moment of true truth will be to simulate this thing. So to simulate response, you're going to type NBX hardhat functions simulate, if I recall the command correct and hit enter. So it compiled a bunch of contracts because I haven't compiled it yet for the first time. And now executing a code.
00:59:10.830 - 01:00:11.250, Speaker A: And yeah, we got the name Varana, the Su, if I pronounced that correctly. So this is the chain link dungeons and dragon character name. Let's put it here into the chat. If we want to ask something else, we can try that. Let's see, are the arguments passed in the construct config fixed? How one can pass multiple synchrons? Yeah, you can just have another argument over here, like another secret type, whatever. And then inside the JavaScript code you will have secret another secret. And that's pretty much it.
01:00:11.250 - 01:00:59.760, Speaker A: I'm going to delete this. Do we have more questions? Okay, if not, that will be it for today's workshop. Now it is the time for Q a session. We are right on time, exactly 1 hour. So that was cool. If we don't have a question, maybe we can ask chat, JBD, something else. Maybe we can create a superhero name, I don't know, for chaining character to see the actual name.
01:00:59.760 - 01:01:28.810, Speaker A: Maybe, I don't know. Oh yeah, what was the command? You just run. Okay, give me 20 seconds to share my screens. Once again, window functions requests. Sorry, visuals code. You should be able to see this. So the command was clear.
01:01:28.810 - 01:02:31.880, Speaker A: NPX hardhead functions, simulate. So I'm going to put another prompt here to create a superhero name for a chain link marine in one sentence. And while this is running, I'm going to copy paste this to the chat. This is the command, okay, and chain link link marine. That was really dumb name. I think I got like aqualink or something while I was testing this thing, but nevertheless. Okay, we have an error, invalid input.
01:02:31.880 - 01:04:03.184, Speaker A: So actually we're again and again passing the source secrets and arguments. Can there be something done which requires only arguments and we get result? Well, the thing is that once you set the secrets, that's pretty much it, because you will need to handle them into the source code, which you need to finalize like we did. Like Patrick actually did we literally copy paste it from usechainingfunctions.com. So again, after I set up secrets, that part was I'm now just changing the prompts, which is like a function argument first element in arcs array. So pretty much after you set everything up, you'll just need to pass different arguments if you want, of course. Okay, so invalid input TP, have you changed the expected value type to be string instead of un two, five, six? Maybe that's the error we need to encode streak. Is there an equivalent of gas limits on don to prevent running infinite loops? Yes, at the moment.
01:04:03.184 - 01:04:46.960, Speaker A: So the maximum gas limit for you to send from solidity to the dawn should be this value. So this should be like a gas limit to prevent infinite loops. Can talk a little bit about limitation of training functions for now. Yeah. First obvious limitation is that you will need to sign up for beta and then wait for 24 hours. Until then you can just simulate things like I did. Second one, it's present only on testnets, so you cannot go to mainet.
01:04:46.960 - 01:05:33.752, Speaker A: And yeah, we'll need to find, as your colleague mentioned, we'll need to find a workaround for foundry. I haven't tested this thing with foundry yet, but there should be like a workaround with this library. But again, it's more like JavaScript opinion at the moment. Other than that, I don't see any downsides at the moment. You have return type string doing it? Actually no. Actually no. But I can maybe push this thing to the GitHub and then you can literally run it at your end and compare it.
01:05:33.752 - 01:06:24.450, Speaker A: I don't know, everything that I did should be enough. So change secrets, arguments, source code, location, expected string, and copy paste solidity. Again, copy paste JavaScript solidity is already there. No, there's not a limit. I manually set it up with number of tokens set to seven, which in theory means like seven words in practice. Actually, seven words in theory is different, and that's why I specified that answer should be in one line. This is just for you to save some costs on using OpenAI API because it is pay as you go.
01:06:24.450 - 01:07:24.316, Speaker A: You can change it by setting the higher number for number of tokens, but if I'm not mistaken, you actually need to set number of tokens per OpenAI documentation. Maybe I didn't change. Yeah, try that. Like, you'll need to paste the prompt as an argument as a string error. Yeah, that means that this is literally too many requests error. So too many requests to the OpenAI API endpoint, which means that unfortunately you will probably need to upgrade your OpenAI API key to be the paid one. And you will get some credits like I think $18 or $5 or something, which would be enough for hackathon.
01:07:24.316 - 01:08:09.564, Speaker A: But yeah, you will need to connect your credit card there, unfortunately. When do you plan to make training functions available on Mainnet? I have no idea, like soon, but I don't know when exactly, but I guess pretty soon. I don't know. Patrick had like an interesting sentence somewhere on Twitter. Sooner than you think, but not soon as you would like, or something like that. He wrote that better. But yeah, if we don't have any further questions, that will be it for this workshop.
01:08:09.564 - 01:08:38.484, Speaker A: Thank you again for attending the workshop. Once again, let's add this to a sign up, the feedback form. It's a short type form which will help us make this workshop and general hackathon experience even better. Yeah, sooner than you think, but later than you expect. Yeah, this is the actual sentence from Patrick. Thank you guys for attending this workshop. Thank you.
01:08:38.484 - 01:08:55.496, Speaker A: I hope this was valuable usage of your time. I hope you learned something new. And don't forget to sign up for the AI track, and I'm cheering for you. I hope that you're going to build some amazing stuff during hackathon. Thank you and have a good one. Bye.
