00:00:10.650 - 00:00:35.138, Speaker A: Great. We've got a great way that we can actually start funding our contract, but our code looks a little bit messy. We've got a couple of different functions for getting the price and working with these prices. Is there a way to make this math a lot easier to use? This is where we're going to introduce the concept of a library. So what is a library? I definitely recommend checking out soliditybyexample.org as you're going along with this course as well. They've got some fantastic examples.
00:00:35.138 - 00:01:17.090, Speaker A: One of such example is going to be about libraries. Libraries are similar to contracts, but you can't declare any state variables and you can't send ether. We can also use libraries to add more functionality to different values. What do I mean by that? Well, what we can do actually is we can have get conversion rate, be a function of a UN 256. So we could do something like message value, get conversion conversion rate, and we can add functions as if UN 256 was an object or a struct or a contract that we actually created. So how do we do this? Well, let's create a new contract. In our contracts folder we create a new file.
00:01:17.090 - 00:01:58.158, Speaker A: We're going to call it priceconverter Sol. And our priceconverter Sol is going to be a library that we're going to attach to a unit six. So how do you actually create a library? And what is a library? Well, a library is going to be really, really similar to a smart contract. It's going to start with SPDX license identifier MIT. We're going to give it a pragma solidity 0.8.0. And instead of typing contract for the name of the contract, we're going to do library for the name of the library, we're going to call it price converter. Now libraries can't have any state variables and they also can't send ether.
00:01:58.158 - 00:02:56.820, Speaker A: And all the functions in a library are going to be internal. So what we can do is we can go back to fundme sol, we can grab get price, get version and get conversion rate, copy them all, delete them from fundme sol and paste them into our library. And of course since we're using aggregator v three interface in here, we can also copy the import from fundme. And since we're not using the aggregator v three interface in our contract anymore and we're using our price converter, we can paste it into our price converter. Now if we compile priceconverter sol, we see that it actually passes. Now all the functions inside of our library need to be internal and we're going to make this library price converter different functions we can call on Un 256, for example, we're going to be able to do message value get conversion rate. We're going to directly be able to get the conversion rate of a value of a Un 256 as if that was a function for it the whole time.
00:02:56.820 - 00:03:44.354, Speaker A: So first, let's make this internal. Let's make get conversion rate internal and we'll make get version internal. Now that we have this library price converter back in our fundme, we can now import this price converter and attach it to UN 256. So we'll do import priceconverter sol and in fundme we'll do using price converter for UN 256. Of course, if we compile our fundme now, this line is getting an issue because it's saying, hey, get conversion rate isn't defined. Now, in our library, the first variable that gets passed to the function is going to be the object that it's called on itself. So in funme sol, let's go ahead, comment out this line for now.
00:03:44.354 - 00:04:31.026, Speaker A: If we do message value get conversion rate, this is secretly the same as if we did get conversion rate of message value. In our price converter library, the message value is going to be passed as the input parameter to get conversion rate for get price and get version. We don't really care about the number, so we're just going to leave it blank for now. So instead of require get conversion rate of message value, we can now do message value, get conversion rate and compile that. You'll see that here we're not passing a variable, even though our get conversion rate function says, hey, I'm expecting a variable. Again, the reason for this is this message value is considered the first parameter for any of these library functions. And that's how it works.
00:04:31.026 - 00:05:01.120, Speaker A: If we wanted another variable in here like Un 256 something else, now we would want to pass something else in here. One, two, three, and this one, two, three would get assigned to this something else. But we're going to delete that for now. Okay, great. And in doing that, we've minimized our fundme contract a lot by moving a lot of that math and price conversion stuff into our priceconverterlibrary sol. You.
