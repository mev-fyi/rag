00:00:00.650 - 00:00:43.610, Speaker A: Hi, welcome to a Chainlink user roundtable where we present panel discussions with web three projects using Chainlink. Today we're talking to Pool together's Brendan Esselstein, along with Pranav Mashwari from the graph and Patrick Collins from Chainlink Labs. Pool together uses both the graph and Chainlink VrF for decentralized web three infrastructure. And this discussion will dig into the deep research and technical elements that pool together uses. This is a pretty technical discussion, but it also provides a good look at how web three developers are using various tools and decentralized options to create the next generation of user applications. So here's Brendan Esselstein from Pool together, Pranav Mashwari from the graph, and Patrick Collins from Chainlink Labs to dig into how Pool together uses Chainlink and the graph as part of the web three stack.
00:00:45.150 - 00:00:49.654, Speaker B: Hey, how's it going, everybody? My name is Patrick Collins and I'm from Chainlink Labs.
00:00:49.782 - 00:00:56.510, Speaker C: Hey, guys, I'm Pranav. I work for Edge and node, the initial team behind the graph protocol.
00:00:57.250 - 00:01:02.000, Speaker D: Hi, everybody, I'm Brendan, CTO of pool together. Happy to share a stack with you today.
00:01:03.170 - 00:01:13.090, Speaker B: Awesome. Yeah, really excited to have such a phenomenal panel together, or just to chat, whatnot. So, Brendan, I want to ask, what's pool together? Tell us about pool together.
00:01:13.240 - 00:01:15.460, Speaker D: What a good question. I'm glad you asked.
00:01:15.910 - 00:01:16.878, Speaker B: Me, too.
00:01:17.064 - 00:01:56.618, Speaker D: Is a prize savings protocol. So what we do is we have created essentially a prize pool where people can deposit their funds, and instead of earning interest, they have a chance to win the interest on all the deposits. So it's a very simple concept, and it's actually a very old concept. It's been pursued by UK premium bonds. They have a massive one, Commonwealth credit union in the United States, Walmart. It's been done many times. But what's so cool about blockchain is that it makes it globally accessible, auditable, provably fair, and also programmable.
00:01:56.618 - 00:02:09.154, Speaker D: So you can actually the sort of receipt the tickets that you get, you can then compose with other things. And so we're really excited about pushing this product. We've got some good traction, and we've got V four around the corner, and we're really excited to launch.
00:02:09.282 - 00:02:14.790, Speaker B: And I think from reading some of the docs, the expected value is actually higher with something like this.
00:02:14.940 - 00:02:53.954, Speaker D: Yeah, it's because we quite often have sponsorship as well. And so if you imagine, so, you have your deposits that are what we call, like, tickets eligible to win, then you have deposits that are simply there for sponsorship. Maybe they want to boost the prize. Maybe they're sort of bootstrapping. And so that effectively increases your APR, like if your kind of expected value, because you're earning interest on all of the deposits, not just the tickets. So it's pretty cool. And not only that, but our launch partners typically supply tokens like emissions as APR, so you still kind of get an interest rate anyway.
00:02:53.954 - 00:02:57.670, Speaker D: So it's just good. You get best of both worlds.
00:03:00.330 - 00:03:52.674, Speaker C: It's really interesting if you see it's a decentralized lottery, but in a way even more advanced because of a lot of sponsorships. And of course, the way it is decentralized and fair to everybody to actually be transparent and have a look at it. But I really want to, since it's the web three stack, we talk about web three stack and the project. How did you use the web three stack? I really want to go and deep dive into the decentralized aspect of pool together. Right. And if you are talking about, like, decentralized app or an app which is decentralized, then I believe it has to use the web three stack. It has to use all the things, not just the blockchain, which is decentralized, but everything that's coming inside that particular decentralized application should be using the decentralized application, and everything going outside should be also in a decentralized fashion.
00:03:52.674 - 00:03:59.500, Speaker C: So can you talk a little more on how pool together, in a way, is originally a decentralized application?
00:04:00.430 - 00:04:35.970, Speaker D: Yeah, I mean, that's a very deep question, and we're actually quite pragmatic with how we approach things. So at its core, fundamentally, we want the smart contracts to be as autonomous as possible. So that is true decentralization. When a smart contract, a good example of this is the uniswap pair between two tokens. Nobody can touch that, nobody can mess with that. You're essentially just manipulating a math function. And that is basically where all products should try to strive for.
00:04:35.970 - 00:05:16.020, Speaker D: To shoot for is the kind of ungovernance. It's kind of like rye, the new stablecoin, that are calling themselves an ungovernance token, because they want to eventually remove themselves from the equation. I mean, obviously, there are a number of things that you can't remove from the equation. In our case, in a way, there's sort of off chain computation that humans need to run, sort of in a way like humans as oracles in terms of governing things. Like, in our case, the fairness fee. So people don't just kind of deposit last second and then bounce right away. So we do need to have some controls in there, although with V four, we're eliminating that, which is amazing.
00:05:16.020 - 00:05:53.490, Speaker D: But that's in a month or two. Anyway, to get to the point, it starts with the smart contracts. And so we've really made a good effort to make it as noncustodial as possible. Like, not even governance can take any funds. The funds are completely locked in whatever yield source that it lives in. And then stepping back from that, obviously we have our front ends and we actually have two front ends. We wanted to approach this, we wanted to make sure that no matter what happens to pool together, people could spin up an interface to access this prize pool or any prize pool.
00:05:53.490 - 00:06:20.078, Speaker D: And so we've created a reference front end. It's actually just community pool together, but all of that code is open source on GitHub. It's very easily forkable. It is simply a static web app. So any developer, any front end can just basically dev, can spin up the app if they want. And so that is very much for not only redundancy, but censorship resistance. And it just allows and it also encourages, fosters an ecosystem.
00:06:20.078 - 00:07:12.310, Speaker D: There have been a number of forks of pool together, and for better, for worse, they've just cloned the contracts and then they just cloned the reference front end. And it's kind of cool now. It's a standard. By all means, fork away. And then with the flagship app is because the flagship app, we want so many more features in it, obviously, things like historic winners, which is really important, so people can have some fun looking back through who won the different prizes. And for the flagship, I think partly I don't want any ops, I don't want to run servers. This is something that I've been very particular about since we began, because we're such a small team, to be able to leverage robust, decentralized systems is actually much easier.
00:07:12.310 - 00:08:02.226, Speaker D: There are definitely some growing pains, but once it gets off the ground, it's so much more robust than trying to use some kind of aws instance somewhere or what have you. I haven't looked at server logs in ages, well, except for the graph hosted service, but for our flagship, in terms of the stack. So we're using the graph for these kind of historic reporting. It talks basically directly to an ethereum node, quite a bit still. Although now we've recently introduced a cloudflare worker as a proxy to be able to cache requests, because we were just drilling in Fura like we're millions and millions of requests a day. So the caching has cut that by 90%. So significantly and the blockchain is kind of slow anyway, so it's okay if it's cached for 60 seconds.
00:08:02.226 - 00:08:35.962, Speaker D: Who cares? In a way, it's a very simple application. Probably the most complex part is wallet management in the front end. With all the millions of wallets that we've integrated, we will eventually look at open sourcing the flagship as well. But the problem with making app pullogether.com open source is that people can then fork it and potentially scam. And so we wanted to make sure that we try to mitigate that risk as much as possible. So we've kept it under the hood as much as possible, even though it is still very much community driven.
00:08:35.962 - 00:08:42.370, Speaker D: So it's kind of a bit of a balancing app between open source and making sure your IP is covered to some extent.
00:08:43.270 - 00:09:16.640, Speaker B: Two points that I wanted to comment on that I thought was that I love about this space, you're talking about the front end forking. And just like, hey, if anybody wants to run a front end to build on top of your smart contracts, they can, right? To me, that's like one of the crazy superpowers of this space. Let's say that I'm a dev. I go, oh my gosh, love pool together. Want to do more with pool together. And I build a front end for people to kind of drive traffic to pool together. Am I incentivized to do that, or is there some incentive that I have for building this front end out?
00:09:17.250 - 00:09:40.190, Speaker D: Yeah, we've been looking into a referral program for a long time to be completely transparent. Our focus has been on the core prize, pool mechanics. And so I think we've nailed that with V four. And so we're actually going to be returning our focus to our world program. Nice, because that really is what spurs network effects and gets people sharing a protocol.
00:09:40.270 - 00:10:02.238, Speaker B: I mean, hypothetically, if you were good enough too, you could just put a wrapper contract on top, point your front end to the wrapper, although then you have to be a little bit more cautious when you're making calls to it. From a user's perspective, it can get kind of tricky. You could code in your own little fee and then just pop everything into pool together. I don't know, what are your thoughts there? I'm kind of just spitballing ideas now.
00:10:02.324 - 00:10:28.834, Speaker D: That's exactly what you could not do with V three. They may be an ERC 20, but they're not exactly fungible. There's still data associated with your tokens that's specific to your address, and so you can't just sort of move tokens around. They're not purely fungible. So that's one reason why the shift of V four will open up possibilities like that. We're working on it.
00:10:28.872 - 00:10:30.310, Speaker B: You guys are so forward thinking.
00:10:30.380 - 00:10:31.320, Speaker D: I love it.
00:10:31.690 - 00:10:58.880, Speaker B: One other thing I did want to comment on too, actually, because you were talking about you guys drilling in mean, this is the dev show, right? So we're talking about dev tools here. Have you guys heard of multi call? I know Brownie just came out with a multi call feature. I think hardhead might have it too. But it's a way for you to kind of make a ton of API calls which normally, like ETH call ETH, get whatever. You just wrap them up into one call.
00:10:59.970 - 00:11:01.754, Speaker D: Even with that. We're drilling in Fura.
00:11:01.802 - 00:11:05.546, Speaker B: Even with that. So you guys are already using the latest and greatest.
00:11:05.578 - 00:11:19.410, Speaker D: There's just so many requests. There's just a billion requests. And there's so many users. That's the funny thing about pool together is that our TVL isn't crazy. It's like 180,000,000 right now or something like that. But we have a lot of users. We have more than 20,000 users.
00:11:19.410 - 00:11:46.640, Speaker D: It's kind of like the Beastie boys say, you got to be in it to win. And I think everybody has like $10 in pool together kind of thing. So the deposits might not be massive, but we have a lot of them. And so we're actually really excited about. We're really blowing out now into polygon and other l two s or side chains, whatever, and people really enjoy using those for the low transaction fees. And so I think we're going to see a lot more traction. Yeah, go ahead for now.
00:11:47.410 - 00:12:56.166, Speaker C: One particular thing I would definitely like to even highlight over here is that DFI, when it was launched or when it was in its nascent stage, was for people who had bit token sizes or like 100k or 200k before that, you could not talk with projects like pool together coming in, it's like normal people trying to get into this decentralized lottery understanding deFi ecosystem and getting in there with the infrastructure that you have built in a very transparent manner. So I guess this is pretty cool. What I would like to even go deep inside is on this particular infrastructure, because I can see on pool together, there are lots of people, but their token sizes are small, right? So you can see a lot of people with small putting in and understanding the whole infrastructure, trying it out. So what has been their experience using pool together? Because I can feel like there might be a lot of people who were new and they tried this whole d five thing because of small token sizes, or they might be people who are, you know. What was an overall pull together experience? For all the people who tried this.
00:12:56.268 - 00:13:28.080, Speaker D: Particular app, what was their pull together experience? Well, the positives are we have seen a few winners, and that's kind of a rare thing, is to actually know who won. It's like, oh, great, zero X AB 74697 has won. There's nothing to celebrate. What's cool, though, is now we have enough community members in discord that every now and then someone's like, hey, I won. And we're like, yay. Emojis and all this stuff. And it's great, it's a lot of fun.
00:13:28.080 - 00:14:37.906, Speaker D: But in terms of the psychology, I think something that this is okay, I can't help but keep plugging V four. But the user experience so far, it's been interesting because when the prize pools were very small, there weren't that many users, and so your chances to win were pretty good. The USDC pool is now at $100 million, and there's a lot of people in there, and we have almost the same number of winners. And so as the prize pool gets bigger, your chances of winning decrease. And so I think this is one reason why people have started to, I guess, dwell on the APR versus focusing on the prizes, is because it's getting more difficult to win. And so what's so cool about V four? And we're very aware of this kind of scaling issue that pull together is having. And so with V four, we've designed it so that we can have virtually unlimited number of prizes in a distribution that's non uniform, I e.
00:14:37.906 - 00:15:05.070, Speaker D: We have effectively a grand prize, let's say it's 50% of the interest and then a long tail. So if pool together does ever scale, let's say, to a trillion dollars, we'll have an arbitrary number of winners. We could reward tens of thousands, hundreds of thousands of people. This is something that I think is really going to change the game for pool together, because people will get that dopamine hit, they will get that prize, they will see that, they'll be able to claim that. And so we're really excited about this change for sure.
00:15:05.140 - 00:15:34.280, Speaker C: And one thing I would like to, again, looking forward to that, is when you scale to even further with millions of users or even big lottery systems being generated, you would require no central point of failures. And that's where chain link the graph, the decentralized web three ecosystem comes in. So that was leading to my next question as to how important was it for you guys to use the web three stack, the graph, the chain link.
00:15:36.490 - 00:16:43.626, Speaker D: The graph initially attracted my attention because it was something I wanted to play with for a long time, which was event sourcing. This is a style of basically data storage that I found fascinating, and maybe if I can quickly explain it to the devs that are watching. Event sourcing is instead of keeping the current state of your data, you keep track of all the changes that have happened, all the events that have happened, and when you want to get the, say, current state, you replay all of those events and hydrate a data model. And this is incredibly powerful because you don't have to worry about changing a schema. You don't have to worry about, I guess, time sensitive data. What you can do is you can run analytics on your data. You'd be like, how many users signed up between June of 2000 last year, June and 2000 to June 2020, or something like that.
00:16:43.626 - 00:17:14.214, Speaker D: You can go back in time, so it allows you to search through all your records in time. It's an incredibly powerful tool. And so when I saw the graph, I recognized that right away as sort of because I'd been studying event sourcing and CQRs, and I was like, this is really cool. I don't even have to touch a server and I can do this stuff. And so, decentralization aside, it's cool technology. The fact that there's a decentralized network is just like a cherry on top. That's nice.
00:17:14.214 - 00:17:56.078, Speaker D: We don't have to worry about that. The requests will get served really robustly. So far, the decentralized network has been running great. Been really happy with that. That's really what pulled me into the graph initially, was that they made it so easy to do proper event sourcing on blockchain data, which is the perfect application, because blockchain is a sequence of transactions and events, and so you replay them to hydrate this sort of, let's say, historic data or what have you. So that's really what drew me in. And of course, the mission, totally aligned with the ethos of the space, is to eventually decentralize this product, make it a network, make it so that it's censorship resistant and whatnot.
00:17:56.078 - 00:18:00.760, Speaker D: So that was sort of double header there, I'd say, for the graph, for sure.
00:18:02.250 - 00:18:24.410, Speaker B: Yeah. And just to build on that event sourcing thing, I don't know. I'm sharing screen here. I don't know if we can pop it on just to kind of double down on that. Any and all devs who are watching this, it's just as simple as doing this right here. Emit event and a ton of applications use something like use these events to do exactly what Brendan's talking about. Do this event sourcing.
00:18:24.410 - 00:19:05.900, Speaker B: And there are a couple really interesting blogs, especially on migrating and upgrading. If you're looking to upgrade your contract to a new one and you've built it in a way that everything is immutable, a really easy way for you to kind of upgrade to this new version is just to deploy your new contract and then just play through all the events so you can kind of reach that same state. For example, a mapping. You're not actually going to be able to loop through the entire map to check the whole state because as you know, maps are initialized with every single possible key in solidity. So events are incredibly, incredibly helpful here. How do I stop sharing? Okay, that works too.
00:19:06.910 - 00:19:33.380, Speaker C: Awesome. Again, moving forward, why again, little bit diverting to the hosted service versus the network pool together. Initially had a subgraph on the hosted service and then it had on the decentralized network. So just for the users to let them know, can you explain what is the graphs hosted service versus the graphs network and how was the transition, so that it's pretty clear?
00:19:33.830 - 00:20:02.086, Speaker D: Yeah, for sure. So we don't have one, we have eight, we have a lot of subgraphs. We might even have more than that, including all the other ones. So the migration, that's why the migration has been piecemeal is because initially the graph team was setting us up, which is great. And they did one of our subgraphs, the oldest one, which is good, that's the one that we have, the USDC and die price pools. The transition. Initially we waited, let me just say we waited until the studio was ready.
00:20:02.086 - 00:20:43.962, Speaker D: And studio has made it really easy to go and spin up a new subgraph and then launch it on the decentralized network. And what struck me about it was after, and the interface is very similar to, for any of our listeners, the interface is very similar to the old hosted service. But what was kind of amazing is after deploying the subgraph to the network immediately, like 17,000 GRT was staked on it, or signal law or whatever the language is, immediately. And I was like, oh man, those guys want to get in early on that bonding curve. Hey, so that proof is in the pudding in this case. And you can really see that that bonding curve does incentivize people to get in early. So signal on that right away.
00:20:43.962 - 00:21:17.314, Speaker D: And then we stepped in later to add some more of our own tokens to it. And then of course, like I said previously, the performance has been good, which has been nice. We haven't seen any downtime from the network. And the hosted service, which has been just like we're railing in Fura, the hosted service gets just nailed by all the Dapps that are using it. And so, full disclosure, it's had a lot of trouble staying alive. We have parts of our UI that has to adapt to that. And you know what? For the new subgraph, none of them are being triggered.
00:21:17.314 - 00:21:19.720, Speaker D: So that's great. The service is awesome.
00:21:21.770 - 00:21:22.086, Speaker A: Yeah.
00:21:22.108 - 00:21:58.174, Speaker D: So the transition has been pretty smooth. We're working on transitioning the other graphs. I think the biggest hole right now, I actually tweeted about this last night, is that we're now crosschain, we're on Binance, we're on Polygon, and currently the decentralized network is only for mainnet subgraphs. But I'm sure the graph or edge and node or whoever's in charge is going to be rolling out multi network support because we need many more networks than we currently have. And that's where all the Dapps are going. And that's something. Just as an aside, this is something I love about the ethereum ecosystem is that all of these Dapps are super keen to launch on all these different chains.
00:21:58.174 - 00:22:20.550, Speaker D: No one is a maximalist, everyone's very pragmatic and I just love that. I think it's cool. We're just embracing all technology and as a consequence, all of these other chains are now saying, hey, we're EVM compatible, we're EVM compatible. And so now the EVM is just the new standard. And so it's just proliferated now as a consequence of us embracing these other technologies.
00:22:20.630 - 00:22:31.600, Speaker B: When you were talking about different chains that the graph was supporting, I said, pranav over there with like a little knowing smile. Little knowing, yeah, I see you, Pranav, I see what's up.
00:22:34.290 - 00:22:43.246, Speaker D: Well, you know what's funny is that the subgrass or the graph network uses Polygon as a payment channel. So obviously that's going to be the next launch network. It's just a matter of time.
00:22:43.348 - 00:22:44.000, Speaker B: Yeah.
00:22:45.030 - 00:23:34.142, Speaker C: Again, I would say, since even one of our blogs explained that, that we believe in the future of the Internet of blockchains, whether it be EVM compatible with Ethereum leading charge and then layer twos jumping in and some of the side chains like Polygon also leading its way and also some non EVM compatible, but really interesting chains like Solana and Polka dot ecosystem getting into it. So, yeah, with figment getting into the picture of core devs coming and building on the graph and even streaming fast now coming, we are solving this infrastructure and trying to be as multi chain as possible. Similarly, I guess, pool together. And similarly, Chainlink is trying to get that done. So, yeah, really excited for this coming future and leading the way through.
00:23:34.276 - 00:23:34.622, Speaker D: Yeah.
00:23:34.676 - 00:23:55.158, Speaker B: And for all devs out, know exactly as Brendan said, pretty much all these EVM compatible chains. Deploying to one of these new chains is usually as easy as just flipping your network flag. So if you're using hard hat, you can just do like network Polygon, network avalanche, network Arbitrum, some of these layer twos that are coming out. And this can really solve a lot.
00:23:55.164 - 00:23:57.478, Speaker D: Of these scalability issues and a lot.
00:23:57.484 - 00:24:42.146, Speaker B: Of these, like we're saying here, a lot of these kind of this Internet of blockchain problem almost in connecting all these applications. So I did want to talk about something else, especially when we're talking about a lot of the new developers in this space, is how you guys do your randomness, or, excuse me, how your team and how the protocol does its randomness. Because being someone in this space who does a lot of educational content, I often run into protocols that are saying, hey, you're looking for a random number, just use the timestamp. Like, that's good enough, or just use the difficulty, that's good enough. I saw in your docs you actually kind of spell out saying, hey, this is good. This is a way to get a random number. However, here are the risks.
00:24:42.146 - 00:24:52.620, Speaker B: This is another way. How are you guys handling the randomness problem and then obviously making sure that your protocol can't be hacked and can't be gamed here.
00:24:54.510 - 00:25:41.020, Speaker D: Oh, man, that's a lot. To answer that, I would say at a high level, there are very naive ways to generate randomness or pseudo randomness in a smart contract using data that's just available to you, such as the block hash and timestamp. But all of that can be manipulated by the miners. This is why randomness cannot be done on. So there are a number of different approaches. The first we looked at, which is pretty robust, is the randao. And so that's where a number of different participants submit their own entropy, which is then combined in a fairly safe way together.
00:25:41.020 - 00:27:05.954, Speaker D: But it does have some issues, like, if the very last person has an opportunity to either submit or not submit, and that can affect the outcome in one of two ways, it also requires a lot of coordination, which is just a terrible experience, user experience. There are two other options that are kind of live, or really one, I guess so. Chainlink's VRF is a verifiably random function, and this is essentially an adaptation of the public private key pair, one that makes sure that, for example, when you're using metamask and you sign something with the ethereum elliptic curve that they use for the wallets, there's actually a couple of different real signatures that can come out of that, a couple of different valid signatures. You can manipulate a few numbers so that there's more than one way to skin the cat. With the VRF, it locks that function down a little bit more, so that when you sign something, there is only one valid signature for that address, for that piece of data. So it makes it very deterministic. And that basically underpins the chain link VRF that we use for our random number generation is the seed, which is still not the best.
00:27:05.954 - 00:27:52.980, Speaker D: We use the block hash as the seed, and then the chain link VRF assigns that, and then we use the resulting signature as the entropy. And so it mitigates a lot of the risk, it mitigates a lot of the problems of the miners. It's not perfect, but it's good enough for the time being. And there are other opportunities in the pipeline. Like, I know that Chainlink well, back when we were talking to the VRF team, this is some time ago, was looking at threshold having, and the threshold signature is really cool. Like we talked about the Randao, let's say you have a group of people, and they're all signing a piece of data with a threshold signature. No matter what subset of that group signs, the resulting signature is the same.
00:27:52.980 - 00:28:50.546, Speaker D: And so that makes it very, very powerful, so that these users can't collude to change anything, they can't manipulate anything, and no matter who signs it, it's the same result. And so that's going to be a next level random number generation keep network has something going along those lines, but it's very specific to their application, so it wasn't particularly usable. Another option is a VDF, which is a verifiable delay function, I think. And essentially what that is, it's a puzzle that the computer has to solve. So it's a function where to compute it cannot be done in parallel, you have to do it sequentially. So it's difficult to kind of speed things up. But to verify the result can be done much, much quicker than the computation.
00:28:50.546 - 00:29:31.202, Speaker D: So what you can do is this function. You throw in some random data and tell it to process it a million times, and the computers will all be crunching, crunching, crunching. So it gives you that opportunity where you know that no one knows the answer to this. And then finally, when that answer is computed by any one of the computers racing for the computation when they submit it, it's very quick to verify it. And so you can verify, yes, this is the correct answer. I think VDFs are really cool, and I think eventually we would like to use something like that. But it also depends on where Chainlink goes.
00:29:31.202 - 00:29:46.694, Speaker D: I mean, the threshold signatures, I think, are really powerful and I think they're much more achievable in the short term. But yeah, there are a lot of different options there. A lot of different options there. So. Sorry, Patrick, I kind of went on a tangent. I just wanted to explain random number generation. There's so much to talk about there.
00:29:46.694 - 00:29:53.180, Speaker D: That's a huge topic. You actually had a second part to that question that I believe I forgot. What was the second part?
00:29:54.110 - 00:30:41.242, Speaker B: I think you pretty much got to it. I actually don't remember the second part either. I was just interested in kind of hearing more about the randomness strategy that pulled together was taken because, yeah, it's a hard problem, and it's something that in the web two world, we're a little bit privy to just being able to call like math random, right, or just some random function, and we don't really know. Okay, our computers are really looking at someplace in memory, or they're doing something that's pseudo random, but it's not in this deterministic system where it really matters. And so it's just really interesting that it's like this whole different problem in the blockchain world, and it's a little bit different. And I did want to share screen really quickly here. I'll show your documentation a little bit.
00:30:41.242 - 00:31:03.054, Speaker B: For anybody looking to do more with pool together, they have got some awesome documentation here, especially if you're looking to build one of your own pools. They have got some ways to create your own prize pool, which is really cool. They've got a lot more information. If you're looking to learn more about some of the randomness, they even go over. Hey, here's blockash. This is pseudo rng. Here's the chain link.
00:31:03.054 - 00:31:41.514, Speaker B: VRF. This is kind of going more into that public private key, cryptographically, provably random number, which is wild. And I just want to show one more cool tool. If some of you are like wait, what is this cryptography magic that they're talking about? How can you prove a rant? That's insane. There's this awesome demo here. It's andersbrownworth.com blockchain publicprivatekeys, and you can actually see kind of how these actually work with creating signatures, signing signatures with a private key, and then actually being able to verify it with only that singular private key.
00:31:41.514 - 00:31:52.160, Speaker B: So if you're looking to learn more, definitely check out this demo. Definitely check out pull together's documentation as well. Fantastic. Fantastic place to learn more about everything that we're talking about here.
00:31:52.610 - 00:32:56.222, Speaker C: I would again like to say one thing here. When it comes to gaming in general, NFTs in general, it's very important to have randomness, which is true of its kind. It's not like a miner can discover it, which happens if you're using block hash for something. It has to be very much true and it has to be verifiable. Finding that true number should be tough, but verifying it should be really easy for everybody to do that. And I guess chain link definitely has done a commendable job. But again, I want to take a step out and thank Brandon for going so deep into research and understanding why randomness, why we want to research on it, why do we want to take it forward and make our app truly decentralized? Again, to complement even further, I would say pool together was one of the initial projects which took the initiative and moved from the very cozy, comfortable hosted service that the graph provided to a decentralized network.
00:32:56.222 - 00:33:37.460, Speaker C: And again, that did require some of Devars and some of going inside the economics, understanding how it works, understanding the studio, taking a feel of it, and moving forward with it. So definitely a big shout out for you for using the web three stack, for exploring. Again, it's not easy when we have the web two world and everything is so easy. You could directly use infuria, you could directly use block hash and do the randomness thing, do the indexing thing, but you took a step forward, used chain link for the randomness, and are exploring more further to it. Similarly, you used the graph network and definitely are building upon it.
00:33:38.310 - 00:34:36.810, Speaker D: Yeah, absolutely. Our end goal is definitely decentralization, and so using all these different decentralized products is really essential, but something that's also necessitated that is not just the ethos, not just censorship resistance, but the fact that we now have pool together governance. So we have our Pt inc startup vc funded that basically we grew pool together out of. But now we have our pull together governance which controls the protocol. We no longer control the protocol. And something that I've been working on, there's a lot to do, but something that is always on my mind is transitioning power to the decentralized protocol, which means that you basically have to transition power to a smart contract. Like ideally, everything we're talking controlled the front end, we're talking the subgraphs.
00:34:36.810 - 00:35:16.398, Speaker D: Like, everything needs to be managed by the protocol ultimately. And so decentralized tech also plays a really strong role there in that. If it can be controlled through like a wallet, through smart contracts, great, okay, well, governance can take control of. So we right now host our front end on Netlify, and it's been fine. Netlify is incredible. I do love Netlify, but it needs to be paid for with a credit card, and the domain is not under control of pull together the protocol. And so eventually we may have to look at something like fleek.
00:35:16.398 - 00:35:49.082, Speaker D: Fleek is a cool service. It's very similar to netlify, but they automatically set up the ENS link to ETH link. And so you could potentially have pool together ETH link that's under control of the kind of, it's not just about censorship resistance, it's also about decentralized control. And being able to transition all of our full stack over to the protocol is going to be really essential. So governance can control the protocol. So yeah, there's many facets to it for sure.
00:35:49.216 - 00:36:11.262, Speaker A: Hey, that's an awesome place to wrap up. I want to thank all of you for jumping in, and it has gone exactly as I was hoping. So fascinating. I'm not developer minded, but to see the way you guys are thinking about the stack and decentralization. Brendan, thank you so much for coming on and sharing. I want to say pull together. Not only is it cool for developers, it's like one of these first defi projects that made me get defi.
00:36:11.262 - 00:36:34.994, Speaker A: It's like, oh, I can put funds in and so can everybody else, but I still control my funds. Okay. It kind of locks into place. It's a simple function, complicated. It locks that idea into mind and you just see it come to fruition. So, hey, thank you everyone for coming together. So, developers, I'm going to put all the links to everything anybody said, documentation and resources down in the description.
00:36:34.994 - 00:36:44.718, Speaker A: So please follow those. Follow everybody on Twitter as well. Put links to everybody's thing as well. And Brandon, thank you so much for coming on. I really appreciate being here, man.
00:36:44.804 - 00:36:46.206, Speaker D: Thanks, Andy. And nice to meet you.
00:36:46.228 - 00:36:46.506, Speaker C: Patrick.
00:36:46.538 - 00:36:48.510, Speaker D: Nice to meet you. Pranav. That was a lot of fun.
00:36:48.660 - 00:36:50.814, Speaker B: Great to meet you as well. Great chatting here.
00:36:50.932 - 00:36:51.840, Speaker A: Sound good?
00:36:52.290 - 00:36:53.280, Speaker B: Sounds good.
00:36:53.810 - 00:36:54.554, Speaker C: Bye.
00:36:54.682 - 00:36:56.446, Speaker A: All right, that's it. We'll see you guys later.
00:36:56.548 - 00:36:56.940, Speaker D: See you guys.
