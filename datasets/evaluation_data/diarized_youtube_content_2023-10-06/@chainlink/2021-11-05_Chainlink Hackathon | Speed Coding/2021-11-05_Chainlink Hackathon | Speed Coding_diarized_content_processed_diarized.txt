00:00:06.570 - 00:00:40.858, Speaker A: All right, we are now live. Hello all, and welcome to the Chainlink Hackathon speed coding event. We are incredibly excited to have three very talented engineers going to be going through some really fun challenges to show their stuff and see who's the fastest coder in the smart contract world, in the solidity world. We're going to have an absolute blast. So let's go ahead and introduce our competitors for the night. Who wants to start first? Well, I could go first.
00:00:41.024 - 00:00:41.740, Speaker B: Great.
00:00:42.270 - 00:01:15.154, Speaker A: My name is Andrew and I'm connecting here from software engineer and I think I'm an entrepreneur but I just like to do stuff. Currently I work as a product for data analysis company, but excited about Web 3.4 and the blockchain and I've been following this space for the rest of. Excellent. All right, who's next up?
00:01:15.352 - 00:01:46.990, Speaker C: I'll go next. So I am evolved. So I am currently in last year engineering student and I've built an NFT collection as well as an NFT marketplace on Arbitrum named Agora. And right now I'm participating to the chaining hackathon and building a decentralized crowdfunding platform named Razi. And yeah, I'm really excited to be here and to show how we build in the blockchain.
00:01:49.490 - 00:01:51.520, Speaker A: All right, and last but not least.
00:01:52.630 - 00:02:26.810, Speaker D: Hi, this is Rishan Hanif. I have been working in software industry for around 14 to 15 years. Started with the Java back in 2001 or two and then worked as a full time as a full stack on the Java. Then moved to the freelancing world back in 2012. Currently working on the blockchain and working with one of the team to develop a product with what you say, cloud and the blockchain. So that's mainly.
00:02:30.510 - 00:02:49.442, Speaker A: All right, fantastic. So those are our competitors here. We're incredibly excited to get into it. Everybody here, all the competitors are hackathoners, right? They're at the chain link, hackathon. They're participating. These are the people building kind of the future. This is a subset of the group of the pioneers building the space.
00:02:49.442 - 00:02:59.410, Speaker A: And then I guess Stephen and I will do a quick introduction as well. My name is Patrick Collins. I'm a developer advocate on the Chainlink protocol and I'm crazy excited to be here. How about Steven?
00:02:59.910 - 00:03:20.060, Speaker B: Oh, I'm so excited. So Stephen Flumen, head of developer relations at Chainlink Labs working on Chainlink, and I think today we're going to have a lot of fun. I think that the space and everyone is just primed for more of these developer fun events and so I'm so excited about tonight, and I think this is going to be, a format is going to be exploding because I'm telling you, we're going to be doing more of this.
00:03:21.390 - 00:03:54.534, Speaker A: All right, great. So Stephen and I will be commentating. Now, let's set up how this is going to work. So Stephen and I have a list of challenges here, a list of solidity smart contract challenges that we are going to be giving to these competitors and real time. Whoever completes the challenge, whoever deploys the contract to a testnet that completes the challenge wins the round. What do they win? They win a ton of brownie points and high fives. So there are no prizes here, but you get gloating rights, you go home and feeling really good about yourself.
00:03:54.534 - 00:04:05.786, Speaker A: But like I said before, we're here to have fun. Like Stephen was saying, we're here to have fun. We're here to have a good time. We're here to learn about some smart contracts and some solidities. Hello, everybody in the chat. Hello, everybody in the comments. We're watching you as well.
00:04:05.786 - 00:04:17.200, Speaker A: This is going to be an absolute blast. So without further ado, we are going to jump right into the first coding challenge. And just for everybody who's watching. Oh, go.
00:04:17.970 - 00:04:36.990, Speaker B: Let's. Let's just maybe just so everyone sees. So we've got the three competitors. So if you see this screen, we're going to try and put up some helpful labels here. So this is what Andrew's screen looks like. So he's got the white background in the ide, so light theme, and then we've got evolve. So he's got the remix dark theme.
00:04:36.990 - 00:04:51.080, Speaker B: And then if you see Zeeshan, he should be ready here. Zeeshan, I think you're going to be using vs code. So if you're trying to follow along, just look for what color they're using and what ide they're using. And that should make it a little bit easier. We're going to be flipping back and forth throughout here.
00:04:51.610 - 00:05:27.538, Speaker A: Yeah, it's going to be a blessed. We have two remix users versus a typescript hard hat user. So that's going to be kind of fun to talk about as well. So are all three competitors ready for the first challenge? Yes, we're getting nods. Okay. All right, so the first challenge is going to be, this is our warm up challenge, so hopefully we can get through this one pretty quick, but we'll see. Our first challenge is going to be deploy an ERC 20 token to a testnet of your choice.
00:05:27.538 - 00:05:33.400, Speaker A: And the race is off. All right, so right here we're looking at.
00:05:34.330 - 00:05:40.600, Speaker B: Got a construct from Andrew. He's pulling up the open Zeppelin docs, checking in.
00:05:42.590 - 00:05:45.930, Speaker A: They're all taking the open zeppelin strategy. I like this so far.
00:05:46.080 - 00:05:48.940, Speaker B: Okay, we've seen this work in the.
00:05:50.190 - 00:05:58.350, Speaker A: He's. He's already compiling. Oh my God. He's already about to send. He's. No, he's flipping back. He's making sure he ran into an error.
00:05:58.350 - 00:06:14.446, Speaker A: He ran into an error. All right, if we look at Zshawn. Zshawn is also on the open Zeppelin docs. We pulled it off. I guess we're both clicking. Zshawn's on the open Zeppelin docs as well. He's got his demo 20, he's got a deploy script.
00:06:14.446 - 00:06:21.910, Speaker A: He's going through. Everyone is so close. Andrew's running through compiler.
00:06:22.490 - 00:06:35.820, Speaker B: Andrew's contract here. Relevant source part starts here. Contract. It's here. Declaration error identifier. Already declared. Trying to use the ERc 20.
00:06:36.350 - 00:06:38.890, Speaker A: He can't double ERC 20. That's going to cost him.
00:06:38.960 - 00:06:40.780, Speaker B: ERC 20 being ERC 20.
00:06:41.870 - 00:06:43.580, Speaker A: Did Matthias do it?
00:06:44.990 - 00:06:46.460, Speaker C: I think that's it.
00:06:46.990 - 00:06:59.410, Speaker A: I think Mattias wins by a hair. Oh, my goodness. Everyone was so close. So where was Zeeshan? Zeeshan was in the middle of finishing his deploy script.
00:07:00.070 - 00:07:08.520, Speaker D: Yes, because basically I'm using this visual studio code, so that's why.
00:07:09.130 - 00:07:37.840, Speaker A: Okay, all right, well, so first round, congratulations to Matthias wins by a hair. So Andrew and Matthias had the exact same setup. They both went to remakes, they both jumped into open Zeppelin. So everybody watching? Definitely need to check out open Zeppelin. Yeah, I guess our commentating was a little sporadic there, but it looks like remix open Zeppelin took the cake. Montez winning by just a hair, a couple of compilation errors. So now we know.
00:07:37.840 - 00:07:50.898, Speaker A: Don't call your contract the same as what you're calling the inherited thing. So awesome work to all three competitors. That was like, what? That was like two minutes or something. How long did that take? You guys? That was so fast.
00:07:51.064 - 00:07:53.540, Speaker C: Maybe like. Yeah, 1 minute, two minutes.
00:07:53.910 - 00:07:57.540, Speaker A: Competition is fierce here. Steven, anything else you want to say?
00:07:57.910 - 00:08:06.440, Speaker B: Yeah, I'm wondering if we should be putting some of these contracts in the chat. Maybe that should be part of the requirement to have it live so people can verify on their own. On.
00:08:09.770 - 00:08:30.030, Speaker A: Yeah, actually, if all of you want to put your comment. I don't think they can. If you put your contracts into private chat, we'll put it in the comments. If anybody wants to check Matthias's contract to see whether or not it was a real ERC 20, although I think it definitely was. Definitely can. So great job, everybody. Are you ready for the next challenge?
00:08:30.690 - 00:08:31.440, Speaker C: Yes.
00:08:32.130 - 00:08:35.890, Speaker A: All right, ready. All right, Steven, are you ready for the next challenge?
00:08:37.110 - 00:08:41.940, Speaker B: I was born ready. I'm just putting some of these very nice contracts into the.
00:08:43.110 - 00:08:57.158, Speaker A: Excellent. Yeah. Steven is doing all the clicking around, which is really helpful because my brain doesn't work that quickly. Okay, competitors, next round. Amazing job. And the comments are flooding in, by the way. So fast.
00:08:57.158 - 00:09:08.780, Speaker A: Oh, my gosh. So badass. Such speed. You guys are doing great. All right, next round, we're going to turn up the heat just a little bit, right? That was so fast. Just a little bit. We're going to see if you can handle this.
00:09:08.780 - 00:09:54.300, Speaker A: Next round is deploy a contract to a testnet of your choice that has a view function named price info that returns the price of Dai USD. All right, we're starting with our winner from the last round, Matias, who's jumping into remix. Oh, my goodness. He already copy pasted from the chainlink docs. It was that fast. It was that fast. You see it off screen, but Andrew's doing the exact same thing.
00:09:54.300 - 00:10:12.590, Speaker A: Zeeshon doing the exact same thing. Everyone's going to the chain link docs, copy pasting and trying to figure out how do I get daiusd? Where is daiusd coming. Okay, and they might be hearing the commentating and getting ideas.
00:10:13.330 - 00:10:16.354, Speaker B: Are we giving things away with the be?
00:10:16.392 - 00:10:18.180, Speaker A: I might be giving too many things away.
00:10:19.110 - 00:10:27.922, Speaker B: Evolve's already in metamask. Might be trying to deploy the contract to COVID. He's trying to metamask spinning, though.
00:10:28.056 - 00:10:30.030, Speaker A: Could be something happened.
00:10:30.200 - 00:10:32.520, Speaker B: Andrew's still looking up some addresses here.
00:10:33.690 - 00:10:35.334, Speaker C: What should be the name of the.
00:10:35.372 - 00:10:54.394, Speaker A: Function already price info. And then looks like Zeeshon is coding the function right now himself. Sorry, Steven, I'm ruining worries.
00:10:54.442 - 00:10:59.840, Speaker B: No worries. Check back on evolve here.
00:11:01.570 - 00:11:04.380, Speaker D: Okay, so I'm a little.
00:11:05.810 - 00:11:07.920, Speaker A: We might be at the end. Once again.
00:11:08.450 - 00:11:12.420, Speaker B: Check on Andrew quick. Andrew's still looking up contract address.
00:11:12.790 - 00:11:25.720, Speaker A: Andrew's right there. Once again, though, he's looking in exactly the right place. I saw the chain link docs. He was looking for DaiusD Zeeshan. I see Zeeshon as well. He's looking for the chain link docs. They all are right in the right.
00:11:25.720 - 00:11:34.490, Speaker A: Another. We might have another winner here, though. Zjon bouncing around.
00:11:34.640 - 00:11:35.686, Speaker B: Transaction confirmed.
00:11:35.718 - 00:11:50.878, Speaker A: It looks like. It looks like round. All right, fingers up. Round two is complete. I can verify that Matthias has taken round two as well. Oh, you timed it. How fast was that?
00:11:50.964 - 00:11:54.334, Speaker B: That was under two minutes. Just under two minutes.
00:11:54.452 - 00:12:16.120, Speaker A: Oh, my goodness. The thing that I love seeing, though, is that all three of you, all three of you are immediately nowhere to go. Jumped in the chain link docs all looking for DaiusD. And I absolutely love seeing that Zishan's starting to feel okay. My more sophisticated setup, it might be slowing me down. Yeah, it might be slowing me down.
00:12:17.130 - 00:12:24.620, Speaker D: I didn't realize that. I just have to more focus on remix instead of the visualization for this.
00:12:26.590 - 00:12:47.534, Speaker B: I will say everyone is more comfortable with the tools that they are most comfortable with. I remember last time we had Austin Griffith, who was mere like fractions of a second behind Peter at Smartcon developer 2021. And he was using scaffold, which he's clearly very familiar with. So I think it's all in what you know.
00:12:47.652 - 00:13:06.054, Speaker A: Yes. Although we did see Zhawn. I saw you at the end there. I saw you thinking, okay, maybe I'm going to flip the remix. Maybe I'm going to switch my strategy up. But is that always going to be the best play? Who knows? Only Steven and I know because we know the challenges. So.
00:13:06.054 - 00:13:23.226, Speaker A: All right, excellent job, Masjas. Excellent win around two, but everyone here is literally in the exact right place, looking at the right code, doing the right thing. All right. And we're going to bring up the heat even more. Those were both like two two minute challenges. Both. Everyone here was like so close.
00:13:23.226 - 00:13:34.414, Speaker A: Sushan was writing his deploy script. He had the contracts. He's ready to go. Andrew was like right there. He was ready to go. This round, I think is going to take a little bit longer. I think it's going to take a little bit longer here.
00:13:34.414 - 00:13:36.434, Speaker A: Stephen, are you ready for the round three?
00:13:36.472 - 00:13:46.614, Speaker B: Are you ready? I'm ready. I got the clock ready to go. He's got the fast clicking fingers. We're going to be switching back and forth, screen to screen, watching, seeing what everybody's doing.
00:13:46.732 - 00:14:25.658, Speaker A: Excellent, excellent. Very excited for this. All right, round three, should you accept, is going to be to a testnet of your choice. Deploy an NFT contract that has a variable that is updated by a provably random number. NFT that has any variable that is updated by a provably random number. Hint, hint. Chainlink, VRF and the race.
00:14:25.834 - 00:14:27.300, Speaker B: You didn't make that too easy.
00:14:29.590 - 00:14:47.986, Speaker A: Well, we'll see. There's a lot of things you have to think about when you're doing this right, Stephen. You got to think, okay, the NFT part, right. I have to get the specification for the NFT. Am I going to use open zeppelin for that, is there something easier? The variable. Okay, I have to combine this Nft with the chain link piece. I have to do the request, I have to do the fulfill randomness.
00:14:47.986 - 00:15:09.390, Speaker A: Is there something to do with link token maybe? I don't know. There's a lot to think about here. And if we're looking at Andrews right now, he has already got an ERC 721, which is the NFT standard set up in remix. He's already bouncing around. He had the code ready. He was like, okay, we're doing a lot of open zeppelin stuff. I'm going to do some open zeppelin stuff.
00:15:09.390 - 00:15:19.300, Speaker A: I'm very excited for this. Steven once again is being the one to bounce around. Thank you very much for bouncing around. I can't focus. This is so hype. They're so fast.
00:15:20.070 - 00:15:34.982, Speaker B: Yes, evolve's got the same thing. He's got the ERC 721 imported. He's starting to extend VRF consumer base. Let's check on Zeeshan Zishan. Still back in vs code. He's got a ERC 721 with the VRF consumer base already.
00:15:35.116 - 00:15:43.226, Speaker A: Did you see that? Yeah, he's following one of the blogs from the Henny. Copy pasted the code and he's pretty.
00:15:43.248 - 00:15:51.360, Speaker B: Much got it already implementing ownable for minting. Let's check on what evolve is doing. So he's got just an ERC 721 with Bureau of Consumer base.
00:15:52.050 - 00:15:52.878, Speaker A: He's looking to.
00:15:52.964 - 00:15:58.640, Speaker B: Interesting choice. Does that mean that someone else could mint NFTs for him? Is that okay?
00:15:59.730 - 00:16:01.600, Speaker A: He's already looking to deploy though.
00:16:02.210 - 00:16:04.500, Speaker B: He's got a lot of red in remix though.
00:16:05.110 - 00:16:09.380, Speaker A: A lot of compiler errors. Uh oh, those fast fingers are hurting him.
00:16:09.750 - 00:16:28.522, Speaker B: Check back on Andrew. Andrew's got in some of the configuration like the coordinator address, the link token address and hash. I want to focus the competitors faces for a second. I want to see the concentration of what it looks like. Yes, concentration. I look ridiculous when I'm coding. And so now we're going to see what everybody else looks like.
00:16:28.522 - 00:16:34.122, Speaker B: Andrew, with a big smile, evolved completely him.
00:16:34.176 - 00:16:35.226, Speaker A: We're shaking him up.
00:16:35.328 - 00:16:37.786, Speaker B: And Zeeshan, he's all business.
00:16:37.888 - 00:16:41.280, Speaker A: Stephen, all three of them are all business.
00:16:42.690 - 00:16:47.470, Speaker B: Just imagine someone coming into your workplace and just being like, what do you look like when you're coding?
00:16:49.170 - 00:16:57.070, Speaker A: Yes. Excellent. Oz. Sean's got the deploy script. He's got all the code. Once again he copied. Oh brilliant.
00:16:57.230 - 00:17:00.014, Speaker B: And this is something that's really in your config file.
00:17:00.142 - 00:17:11.640, Speaker A: Oh no, the config. This is something that's good too. Guys. Everyone who's watching. It's not always about knowing how to do, it's about knowing where to get the information. And they are epitomizing that.
00:17:14.090 - 00:17:18.200, Speaker D: So we need to keep the variable as a token ID, right?
00:17:18.890 - 00:17:19.880, Speaker A: What's that?
00:17:22.010 - 00:17:24.120, Speaker D: Random number as a token ID, right?
00:17:25.770 - 00:17:28.134, Speaker B: No, just challenge maybe. Patrick.
00:17:28.182 - 00:17:43.570, Speaker A: Yes, I'll repeat the challenge. Just any variable on the NFT contract needs to be updated randomly. That's it. So it needs to be an NFT contract. You need to be able to mint NFTs. And just any variable should be provably.
00:17:47.590 - 00:17:57.620, Speaker B: Interesting. Involves making a manual call to fulfill randomness from within. Let's see how that goes.
00:17:57.990 - 00:18:11.100, Speaker A: Andrew, he might have got tipped off by us there, Steven. He might have realized that that might be the wrong play. Andrew's got pretty much everything in here. I mean, I'm seeing a whole lot of correct.
00:18:12.910 - 00:18:21.370, Speaker B: Let's jump back to Zeeshan. Because Zeeshan was used, like, Zeeshan, I think, had the code very early on and dealing primarily with deployment issues. Compilation.
00:18:23.950 - 00:18:40.882, Speaker A: Oh, that was really cool. Did you see that? He's doing the safe mint in the fulfill randomness. So the chain link. Oracle is paying the gas for somebody to mint his random number. He's running to some compilation errors. Uhoh. Different version, version eight, version six, version seven.
00:18:40.936 - 00:18:42.030, Speaker B: Version mismatches.
00:18:42.110 - 00:18:42.900, Speaker A: Uh oh.
00:18:44.230 - 00:18:46.094, Speaker B: Everything's got to line up, Steven.
00:18:46.142 - 00:18:57.350, Speaker A: My favorite part of this though, is everyone, once again, they're right. It's, it's like, wait, what do I need to get this over the line? I have the key hash. Should I put the fulfill randomness in the safe? Mint.
00:18:59.070 - 00:19:15.710, Speaker B: Evolves looking at a, my token should be marked as abstract. That means he might not be implementing all of the abstract methods as overrides. Something's going wrong there. Check back on Andrew creating an award.
00:19:18.930 - 00:19:27.250, Speaker A: Oh, I'm curious what he's doing here. So he's in the fulfill randomness function, and he's doing a little bit of if thens in here. Okay.
00:19:27.400 - 00:19:29.106, Speaker B: If the randomness comes back.
00:19:29.208 - 00:19:40.520, Speaker A: Okay. If there's a random result. Oh, I see what he's doing. He's commenting out the default code from before to make it mint here. Right.
00:19:41.930 - 00:19:51.074, Speaker B: I see that. He's also implemented a different interface here. He's also implementing ERC 721, Uri storage. I don't think either of the other competitors have implemented.
00:19:51.202 - 00:20:08.590, Speaker A: Yeah, right. So the URI storage, for those watching at home, it's a little bit different than the ERC 721. It's a little bit less gas efficient. But I do like this choice from it because it is easier to set a token URI, although that's not part of the challenge. But if it was, it would be easier to set a token URI.
00:20:09.730 - 00:20:22.480, Speaker B: Yeah, it's interesting because to me, Patrick, an NFT has to have a URI to be valid. I don't think it's actually part of the ERC 721 spec, is it?
00:20:23.090 - 00:20:41.610, Speaker A: It is part, yeah, but we didn't set it as part of the challenge. Although everyone here is importing from open Zeppelin, so we know that it's definitely in there. How's everybody doing at home, by the way, everyone? In the comments, I'm seeing a couple of people say, hey, I want to be part of this in the future. Can you zoom in on the front? Sorry, we can't zoom in. You see what you see, you get what you get.
00:20:41.760 - 00:20:49.674, Speaker B: Actually, we can ask though, maybe if Matthias and Andrew, if you can zoom in a little bit on your ides, it's a little bit easier to.
00:20:49.712 - 00:20:50.202, Speaker C: Sorry.
00:20:50.336 - 00:20:51.994, Speaker A: Oh, nice. Oh, great.
00:20:52.192 - 00:20:58.106, Speaker B: And we did see here evolve was just deploying, so he's got a contract deployed on a testnet.
00:20:58.138 - 00:20:58.734, Speaker A: Let's check back.
00:20:58.772 - 00:21:04.370, Speaker B: And Andrew, see how he's doing. He looks like he's in the deployment stage as well. Just doing some final code tweaks.
00:21:06.630 - 00:21:19.430, Speaker A: Oh, it looks like we have an NFT, but can that random number be provably updated? He's got the NFT contract, but can he get the random number to be approvably randomly updated?
00:21:20.090 - 00:21:22.870, Speaker B: How is he going to get the oracle to send back a random.
00:21:23.370 - 00:21:25.750, Speaker A: How is he going to get it randomly updated?
00:21:27.210 - 00:21:29.126, Speaker B: Does he requesting randomness?
00:21:29.318 - 00:21:51.102, Speaker A: He sees there's a randomness request, but I think he's trying to figure out what to do next. Right, because he clicked on. Oh no, actually. So he's got a variable called my VRF variable and I'm not sure. Is that a public view? I guess we'd have to wait for him to scroll up. Oh, yeah, he's got a public. Okay.
00:21:51.102 - 00:21:59.106, Speaker A: Ah, but he's confused. He's saying, why is this number not getting programmatically randomized? What's going on here? What am I on?
00:21:59.128 - 00:22:09.730, Speaker B: Zeeshan. See how Zeeshan's doing, because he's had the contract ready to go, I think, with a few little compilation errors. Okay, so he's working the typescript layer.
00:22:11.290 - 00:22:23.450, Speaker A: It looks like his pile. Yeah, it looks like it's actually compiling. Correct. Right. He's running into a couple of warnings here, though. Oh no. Yeah, he's running into a couple of warnings here, he's in the deploy script.
00:22:23.450 - 00:22:45.278, Speaker A: Have you worked with typescript's contract factories, by the way? They are great for typescripters. Everybody who's using typescript definitely get on that type chain train because it makes life a hundred times better. I said this one was going to be harder. And y'all are feeling the heat.
00:22:45.454 - 00:22:50.370, Speaker B: I feel like we need a type chain t shirt. Type chain train.
00:22:50.440 - 00:22:56.606, Speaker A: T shirt type chain train. What a mouthful, Stephen. Definitely what a mouthful.
00:22:56.718 - 00:23:15.100, Speaker B: Looks like evolve. He's doing a fresh deployment round token, trying to get into work. Check back on Andrew. Okay, Andrew's definitely got his contract. He's checking it on ether scan to see what's going on. We have two contracts. Did you get a random number?
00:23:16.510 - 00:23:40.496, Speaker A: But he needs to. Oh, what is this? I see a randomness requested on Etherscan. You got to flip back to your contract. We got to see that random result. Wait, his computer is sending, like, two screens at the same time. We're getting a little bit of everything. I think he's got it.
00:23:40.496 - 00:23:57.524, Speaker A: Wait, can you go to the random result number? Yes, I think he's got it. Yo, the pop up there, you see that? Andrew with the pop up? Okay, hold on. Let's verify. Let's verify. Hold on. Let's scroll up. Anybody who's still coding, keep coding, because we got to verify that this is right.
00:23:57.524 - 00:24:13.524, Speaker A: Wait, no, go back to remix. We can't see. Scroll up, up. Curl. Is this an ERC 721? Is this an NFT? Scroll up to the top is ERC 721. Uri storage. I know that open zeppelin extension.
00:24:13.524 - 00:24:40.020, Speaker A: That is 100% an NFT extension. And let's look at his random number request. Get random number, require link request randomness. For those of you who couldn't see it because the screen was a little messed up, I saw the event requested randomness. That is a chain link VRf request that 100% goes out, that the chain link nodes listen for. They listen for that event to return to fulfill randomness, which Andrew did indeed do. Round three goes to Andrew.
00:24:40.020 - 00:24:44.580, Speaker A: Oh, my goodness.
00:24:44.920 - 00:24:55.256, Speaker B: I love how the more complex the challenge, the more varied the solutions that people approach. Andrew, how are you feeling? That one feel good?
00:24:55.438 - 00:25:07.880, Speaker A: Yeah, I am good. Awesome. He had the pop off two minutes ago. Now he's being a little bit modest. He's like, yeah, it feels awesome. But he finished it. He was like, oh, I heard you, Andrew.
00:25:07.880 - 00:25:11.676, Speaker A: I heard you. I was listening. I was listening. And excellent work.
00:25:11.778 - 00:25:19.920, Speaker B: Let's check in with each of the competitors. So, Zeeshan, tell us a little bit about how that was going there at the end for you. What was the main hurdle?
00:25:20.660 - 00:25:37.460, Speaker D: Basically, it's done. I was just trying to fund the contract so that it can send the random request, fulfill its request, so its contract is done once I'll done with the funding. So it will be running and it will send the randomness request once I'll deploy and they request.
00:25:39.240 - 00:25:39.604, Speaker A: Yeah.
00:25:39.642 - 00:26:01.100, Speaker B: So it's interesting, if we had asked competitors to deploy a hundred times, Zeeshon would have had this in the bag. Right. Because once you've written that hard hat deploy script that funds everything, you can do that over and over, reproducibly, whereas doing it the remix way, you have to kind of manually be popping in and out of metamask all the time, waiting for confirmations, all those sorts of things.
00:26:01.250 - 00:26:04.068, Speaker A: Yep. I was thinking, how about you, Yvonne?
00:26:04.264 - 00:26:08.160, Speaker C: Actually, it's working right now, so just a bit late.
00:26:10.980 - 00:26:11.856, Speaker B: But I wanted to.
00:26:11.878 - 00:26:14.896, Speaker C: Make it work, so at least it's working.
00:26:15.078 - 00:26:15.568, Speaker A: Awesome.
00:26:15.654 - 00:26:19.830, Speaker B: But you did get it done in the end here. I see the random result right there.
00:26:20.840 - 00:26:31.800, Speaker C: The randomness had to be fulfilled when minting the token at first, so that's why I was like. But then I changed my mind too late.
00:26:33.100 - 00:27:01.776, Speaker A: I saw you doing the mint and the set token. Uri, at some point in challenges, the challenges, you can again take them at face value. If it's, like, just a variable, that's all you got to do. It's got to be an NFT and you can throw on a variable. So, awesome job. Just to comment a little bit, Zeeshon had. I saw that the dungeons and dragons, for those of you watching, we did a dungeons and Dragons blog several months ago.
00:27:01.776 - 00:27:18.310, Speaker A: He found it right away. He had the code in the contract, like I said, like he was saying, just needed to do that link funding part. He would have had it. Once again, awesome job to everybody here. These are really nail biters. They're all getting done. You're all getting done at nearly the same time.
00:27:18.310 - 00:27:37.484, Speaker A: This is crazy impressive. Yeah. Great job. So three rounds down, we got two rounds to Mr. Evolve, aka Matias. We have a round to Andrew. And Zishan is coming up.
00:27:37.484 - 00:27:54.210, Speaker A: He's ready, though. He's always right there. He's always right there. Are you all ready for round number three or. Excuse me, number four? Are you all ready for round number? All right, excellent. I'm excited for some more pop ups here, Steven, how about yourself?
00:27:54.740 - 00:28:01.888, Speaker B: I'm very excited. Should we give the competitors a chance to clear out their contracts, or do you think they want to use these as starting points for future contracts?
00:28:01.984 - 00:28:14.170, Speaker A: Actually, yes. Feel free to clear out your contracts. Do whatever you'd like to do, because this next 1 may or may not have anything to do with open zeppelin. I don't know. Maybe. I don't know.
00:28:16.140 - 00:28:20.824, Speaker B: All right, so, competitors, let us know when you're ready. Let's see a raised hand when you're ready.
00:28:20.862 - 00:28:22.632, Speaker A: Yes. Raised hand, yes. Excellent.
00:28:22.776 - 00:28:23.516, Speaker C: Ready?
00:28:23.698 - 00:28:30.684, Speaker B: All right, evolve's ready. Andrew's ready. Ishan, are you ready? Zeeshan's ready.
00:28:30.802 - 00:28:31.224, Speaker A: Excellent.
00:28:31.272 - 00:28:32.968, Speaker B: Although he's running some hard hat scripts.
00:28:32.984 - 00:28:50.996, Speaker A: In the background, he's, he's secretly trying to get a jump. He's trying to read the future with a future oracle on chain or something. Oh, no, wait. Actually, if you go back to the deploy script, look what he did. Look what he did. He threw in the fund link task from hard hat. He's thinking ahead of you a little bit.
00:28:50.996 - 00:28:54.340, Speaker A: All right, Zeeshan, I see you. We see you, Zeeshan.
00:28:57.480 - 00:29:02.170, Speaker D: It was related to the previous task. I was not jumping ahead.
00:29:03.020 - 00:29:05.944, Speaker B: It's that engineer pride like, you have to solve the problem.
00:29:06.062 - 00:29:21.564, Speaker A: Yeah, I love it. I love it. This is the spirit we absolutely need. All right, audience, how are we doing? How's everybody doing? We got a couple of great jobs in here. A couple happiness cries in here. Deploy 100 challenge audiences. Loving this.
00:29:21.564 - 00:29:34.108, Speaker A: Okay, excellent. Let us know once again in the chat how you're feeling and who you're rooting for. Everyone here is doing fantastic. But I've talked too much. I've talked enough. Patrick, shut up. We want to hear the fourth challenge.
00:29:34.108 - 00:29:54.410, Speaker A: Well, great. Your wish is my command. Challenge number four. That's right, evolve. Sit up in your seat. Challenge number four. You need to deploy a contract to a testnet of your choice once again.
00:29:54.410 - 00:30:27.120, Speaker A: That every 120 seconds programmatically will add approximately. Every 120 seconds will add one to a count variable starting with zero. If you do it in a decentralized manner, bonus points. Deploy a contract. Again. Deploy a contract to a testnet of your choice that will add one to a count variable approximately every 120 seconds. That is the challenge.
00:30:27.940 - 00:30:45.370, Speaker B: Got the Keepers website, the chain link keepers docs website up. I saw you already had a contract file created in hard hat. Take a look at what evolve's got. He's got a keeper compatible interface. Implementing contract. Looks like everyone has gone straight for.
00:30:49.100 - 00:30:53.656, Speaker A: They knew. It's like they knew that it was going to be something with Chainlink. How did they know? Steven?
00:30:53.848 - 00:31:08.156, Speaker B: Andrew is scrolling through the docs here looking for some sample code. It might form the foundation of what? He's about to build back to evolve. He's deploying a contract already to COVID, it looks like.
00:31:08.258 - 00:31:09.000, Speaker A: Oh, my goodness.
00:31:09.080 - 00:31:11.170, Speaker B: Version 87.
00:31:11.860 - 00:31:17.380, Speaker A: Wait, can we stick on Andrew for a second? Yeah, once again, he jumped to the docs, copy pasted.
00:31:20.120 - 00:31:25.990, Speaker B: I will say evolve is already deployed. He is already deployed. Let's check on Zeeshan here.
00:31:27.800 - 00:31:34.920, Speaker A: Looks like Zeeshon's got the code. He's. Once again, he's just building the deploy script here. All right, excellent.
00:31:36.620 - 00:31:40.936, Speaker B: Let's check back on evolve because check on evolve on the keeper's website. He's on the keeper's website.
00:31:41.038 - 00:31:43.390, Speaker A: Yes. Sorry.
00:31:44.480 - 00:31:47.150, Speaker B: Maybe if he doesn't want to share his email address for a moment.
00:31:47.680 - 00:32:03.824, Speaker A: Fine, so he's fine to be doxed. It's all good. You're allowed to dox him apparently. 120 seconds? Yes, every 120 seconds. It looks like Zishan might be doing something here. Oh, look at that. You see what he did there? He's like, I know I don't need to fund this with.
00:32:03.824 - 00:32:20.704, Speaker A: Link commented it right out. All right, so we're seeing. Look at how fast his fingers are. You see him flipping back and forth? This is a professional coder, Zeeshan. He's got the badass typescript set up. Professional coder. We have ox evolve.
00:32:20.752 - 00:32:27.240, Speaker B: Matthias, evolve is trying to decide what gas limit to set on this contract. How much gas is it going to use?
00:32:27.390 - 00:32:31.492, Speaker A: Yeah, be a little bit halogen on the gas vibes there.
00:32:31.646 - 00:32:36.990, Speaker B: Looks like Andrew does have it deployed to COVID. What's he going to be doing here?
00:32:37.680 - 00:32:39.368, Speaker A: He's just got the timestamp checking.
00:32:39.384 - 00:32:40.670, Speaker B: Make sure his contract works.
00:32:43.520 - 00:32:54.780, Speaker A: But where's his back on? We're back on evolve. He's submitting the registration request here. Looks like he's looking to register with the keeper network.
00:32:54.860 - 00:33:00.652, Speaker B: What's the moment when you're going to call it, Patrick, what's the criteria here? Two rounds, we're coming up to the end.
00:33:00.806 - 00:33:03.028, Speaker A: Two counts here, so it's going to.
00:33:03.034 - 00:33:04.532, Speaker B: Take at least 240 seconds then.
00:33:04.586 - 00:33:12.810, Speaker A: 240 seconds. We got this for an hour, Steven, if you're thinking half hour, they got time. They have time, my friend.
00:33:14.140 - 00:33:26.332, Speaker B: We get to see Sean here. The audience can listen in the registration stage, Ashan has put in a physical address where he's going to get all his upkeep done.
00:33:26.466 - 00:33:31.612, Speaker A: Okay. All right, excellent. So the chandling nodes are going to go to second.
00:33:31.666 - 00:33:32.220, Speaker D: Go one.
00:33:32.290 - 00:33:32.910, Speaker A: Okay.
00:33:35.920 - 00:33:37.900, Speaker D: It's waiting for the deployment.
00:33:39.360 - 00:33:43.680, Speaker B: It looks like Evolve's got an error. At the top of the screen, it says this upkeep is underfunded.
00:33:45.780 - 00:33:53.296, Speaker A: What does that mean? What does it mean? Oh, he says it's fine. He's talking to the commentators.
00:33:53.408 - 00:33:54.340, Speaker B: It's fine.
00:33:54.490 - 00:33:55.044, Speaker A: It's fine.
00:33:55.082 - 00:33:56.704, Speaker B: He says, stop worrying about it, Patrick.
00:33:56.752 - 00:34:21.832, Speaker A: It doesn't even matter. All right, who are we on now? We're back to Andrew. Andrew is also. Everyone's on the keepers page. Everyone knows that. Okay, I deployed something but something's missing. We need to register with what? That keepers registry contract because that's going to be the contract that's going to tell the chainlink nodes this is a keeper compatible contract and you can listen for perform upkeeps.
00:34:21.832 - 00:34:23.356, Speaker A: That's exactly what this is looking for.
00:34:23.378 - 00:34:28.304, Speaker B: Humanizer in the chat is saying we've got some esports vibes going on, which is I think, definitely the goal here.
00:34:28.422 - 00:34:29.570, Speaker A: Oh, for sure.
00:34:30.260 - 00:34:59.720, Speaker B: Hit the register button. And he's starting with 25 link. It looks like everyone here, it looks like is right now knee deep in funding and sending their registration request. So I think it's going to be down to the wire because everyone's got the contract deployed 100%. Everyone is funding and registering their upkeep.
00:35:02.140 - 00:35:16.976, Speaker A: Well, it's going to be down to also is it 120 seconds that are being updated? I might have seen some contracts in there that didn't have 120 seconds. Correct. Might have. Never know. I don't know. Maybe you're all correct.
00:35:17.158 - 00:35:21.200, Speaker B: Lex is wondering about the APM. I think it's got to be over 150.
00:35:21.350 - 00:35:32.256, Speaker A: Yeah, easily. Probably 500 apm for sure. Well, not during the downtime though. The downtime is probably going to kick their APM down. For those who don't know what APM.
00:35:32.288 - 00:35:35.190, Speaker D: Is, it's action minimum balance 126.
00:35:37.880 - 00:35:41.588, Speaker B: That is a fair amount of link that you need to execute that contract.
00:35:41.764 - 00:35:58.620, Speaker A: And he's looking to add more link too. He doesn't think 126 is enough. Should I add it? Is something wrong with the contract or is it still weightened? We got to refresh.
00:35:59.440 - 00:36:02.408, Speaker B: Contract could be a problem with the way that the keeper got registered.
00:36:02.504 - 00:36:06.280, Speaker A: He's going to add another 120. Oh my goodness.
00:36:06.360 - 00:36:08.296, Speaker B: Sean's just rolling.
00:36:08.488 - 00:36:12.156, Speaker A: Oh wait, look at the bottom. Look at the bottom. Oh no, that's two fund upkeeps.
00:36:12.188 - 00:36:14.444, Speaker B: Never mind, I thought it was another two fund upkeeps.
00:36:14.492 - 00:36:15.116, Speaker A: Two fund upkeeps.
00:36:15.148 - 00:36:15.996, Speaker B: Check back on Andrew.
00:36:16.108 - 00:36:16.808, Speaker A: Check them on Andrew.
00:36:16.844 - 00:36:21.380, Speaker B: We've got lots of funding of upkeeps. So far no perform upkeeps.
00:36:22.200 - 00:36:37.912, Speaker A: What's up with the perform upkeeps? What's going on? Why aren't they performing? Something's going on. Well, Andrew's screen shows us, like, seven different screens, which is kind of funny whenever, for some reason. Don't worry, Andrew.
00:36:37.976 - 00:36:46.384, Speaker B: The multi multiverse os just going like every window at the same. Got an unresponsive page. I've not seen that before.
00:36:46.502 - 00:36:55.410, Speaker A: Andrew codes in eight dimensions. Wait, do you see that? Do you see that? Oh, look at that. Look at that.
00:36:56.500 - 00:36:58.460, Speaker D: Running in 120 seconds.
00:36:58.620 - 00:37:06.710, Speaker A: Oh, wait, I saw a last. We have a perform upkeep for Zeeshan, but is it correct? Is it correct?
00:37:07.160 - 00:37:17.784, Speaker B: Zeeshan, can you go back to your contract for a moment and let's take a look at your. Yeah, I saw deploy 120. So he's passing in the constructor parameter 120.
00:37:17.822 - 00:37:18.888, Speaker A: Oh, excellent. Okay.
00:37:18.974 - 00:37:19.700, Speaker B: For the update.
00:37:19.780 - 00:37:25.016, Speaker A: Very nice. Okay, and then evolve. Let's see. Is it going to go evolve?
00:37:25.048 - 00:37:28.700, Speaker B: Do you have any perform upkeeps coming from any automated systems?
00:37:31.760 - 00:37:39.490, Speaker A: Okay, evolve is trying to figure out why it's not performing. Zhawn's already performed, but we got to wait for two confirmations. Two count.
00:37:42.820 - 00:37:45.692, Speaker B: Oh, what have we got here in the history from Andrew?
00:37:45.836 - 00:37:49.612, Speaker A: Oh, my God. He just need to refresh the. Oh, that would have been wild.
00:37:49.756 - 00:37:52.804, Speaker B: I thought there was a bunch of people there.
00:37:53.002 - 00:37:55.990, Speaker A: I saw that too. And I was like, oh, my God, he got like eight of them.
00:37:56.360 - 00:38:10.424, Speaker B: So, Andrew, it looks like it's given it a gas limit of 2300. Let's check back on Zeeshan, because Zishan was the closest here. I think Zishan is leading the pack at this very moment.
00:38:10.542 - 00:38:12.376, Speaker A: Steven, we're giving away clues with the.
00:38:12.398 - 00:38:16.408, Speaker D: Commentating man waiting for the 122nd to be passed.
00:38:16.504 - 00:38:30.704, Speaker A: He's got to wait. Zshon's sweating in his boots for two minutes because you got to wait two confirmations. And the thing is, this is such a punishing challenge because if you get it wrong, you just wasted two minutes, and you have two minutes to go back.
00:38:30.902 - 00:38:37.216, Speaker B: Sean's like thinking. He's like, how do I get the Oracles to see time move faster?
00:38:37.328 - 00:38:38.548, Speaker A: Oh, my God. I wish.
00:38:38.714 - 00:38:40.790, Speaker B: Into the NTP system, like.
00:38:43.000 - 00:38:57.880, Speaker A: Stephen, did you see Andrew? I wish we had, like, an esports replay. We saw Andrew did a quick like. He was sweating. You don't have to do it again. Oh, there he is. Oh, my goodness.
00:38:58.460 - 00:38:59.176, Speaker D: I got it.
00:38:59.198 - 00:39:00.616, Speaker B: Patterns and best second one.
00:39:00.718 - 00:39:14.370, Speaker A: Zeeshawn's got his hand up. Zeeshawn thinks he's got. Oh, there it is. To perform upkeep, let's see. The contract is counter two, right? Counter needs to be two. We need to verify his perform upkeep is correct here.
00:39:15.540 - 00:39:17.120, Speaker B: And how do you want him to verify that?
00:39:17.190 - 00:39:22.240, Speaker A: Oh, wait. Yeah, I guess you got to do a quick read script.
00:39:24.100 - 00:39:25.404, Speaker B: That wasn't part of the challenge.
00:39:25.452 - 00:39:30.188, Speaker A: Well, no, so not for him. So he's got it. But we need to be able to verify his clock has stopped.
00:39:30.204 - 00:39:31.936, Speaker B: But now we need to verify. We're going to go back to.
00:39:31.958 - 00:39:41.770, Speaker A: The clock has stopped. Yeah, we're going to go to the photo finish here. So for those of you who are still trying to get this while we verify, Zhan, you can keep going.
00:39:42.700 - 00:39:44.296, Speaker D: Should I write the script or.
00:39:44.318 - 00:40:06.844, Speaker A: You have the option to verify if you want to. So in scripts ready, we're going to do a little bit of real time verification. So copy paste everything and deploy to a new script. So go to your deploy ready. We're going to do a little, grab the whole thing, copy paste it into a new script, new file read or. Yeah. Demo two Ts.
00:40:06.844 - 00:40:20.084, Speaker A: Paste everything in there. Let's see if we can do a quick. So we're going to do counter attach. Yes, you got it. Perfect. Yes. You got it.
00:40:20.084 - 00:40:37.130, Speaker A: Counter attached to right there. What happened? Demo two, counter attach. Yeah, I guess I didn't think about this then. Stephen. Yeah? If we want to verify, we need to.
00:40:37.660 - 00:40:42.536, Speaker C: You could use like NPX had console, network. Covenant.
00:40:42.648 - 00:40:43.420, Speaker A: We could do that too.
00:40:43.490 - 00:40:44.008, Speaker C: Network.
00:40:44.104 - 00:40:44.750, Speaker A: Yeah.
00:40:45.520 - 00:40:46.940, Speaker B: We could get the Abi.
00:40:48.800 - 00:40:49.356, Speaker A: Or just.
00:40:49.378 - 00:40:51.544, Speaker C: Go on coven Explorer.
00:40:51.592 - 00:40:55.368, Speaker B: No, I showed the numeric value in coven Explorer.
00:40:55.464 - 00:40:55.724, Speaker A: Yeah.
00:40:55.762 - 00:40:57.592, Speaker C: You had to verify the contract.
00:40:57.736 - 00:41:09.860, Speaker A: I think it's pretty much got it. So we'll just do counter attach for this and then result to string. Oh, see, he knows everything. This is great. Oh, wait, you want to do attach? You still have deploy?
00:41:10.760 - 00:41:14.100, Speaker D: No, I changed.
00:41:15.320 - 00:41:22.150, Speaker A: Nice. Okay, perfect. And it might even be at like five at this point.
00:41:24.280 - 00:41:26.584, Speaker B: He found it with 125.
00:41:26.702 - 00:41:55.904, Speaker A: Yeah, actually, it's going to be gone forever. Okay, we got a couple of mains in here or maybe, actually we can probably just give it to him. Looking at his contract, it looks correct. Actually, other competitors. What do you think? You think we could just give it to some. We got some real sportsmanship here. All right.
00:41:55.904 - 00:42:18.916, Speaker A: Yeah, we won't have to verify. It'll take a little bit just to make sure the read script is right, but. Yeah. Zishan, can you go to your contract real quick? Don't worry, if you go to your contract, we'll verify. Looking at the contract demo keep. Yeah, if we look at the contract right here, we see last timestamp. Keeps getting updated by the perform upkeep.
00:42:18.916 - 00:42:31.256, Speaker A: That's exactly correct. Perform upkeep. Did happen a couple of times. We did verify that. So counter is definitely being updated. And he imported, when he deployed it, he used 120. So that's the update interval.
00:42:31.256 - 00:42:38.156, Speaker A: So it's spot on. Zshawn takes round four. Excellent work so far, competitors.
00:42:38.268 - 00:42:44.300, Speaker B: I got the wait above and beyond.
00:42:44.380 - 00:43:03.160, Speaker A: You see that? Did you hear that, Stephen? He goes, oh, I got the script, too. He's got that pride. He goes, shut up, Patrick. I'm going to make the script work. I got up, he's like, don't just give it to me. I'm going to take it. I'm going to take victory.
00:43:03.160 - 00:43:19.516, Speaker A: Awesome job, everybody. So that's four rounds. So we have two for evolve. We have one for Andrew, one for Zeeshan. You couldn't wish for a better competitive landscape, right? Everybody is doing fantastically. Everyone's getting wins. Everyone's doing really well.
00:43:19.516 - 00:43:44.356, Speaker A: So we have about 15 minutes left. Okay? And it's two to one to one. Doing fantastic. Audience is doing fantastic. They're all listening, they're all learning as well. This means I have to come up with a challenge that's not longer than 15 minutes. However, because we have to get progressively harder, that's exactly what we're going to do.
00:43:44.356 - 00:44:09.150, Speaker A: And if we hit the buzzer, so be it. Although I know all of you at the same time are chomping at the bit and trying to win, right? We just saw Zishan go, no, screw off. I'm going to finish this script. And the crazy thing is, it's like 03:00 a.m. For Zishan right now, it's like midnight. For Matias, it's like 11:00 p.m. For Andrew, they're all sleep deprived, but they're all absolutely killing it.
00:44:09.150 - 00:44:15.600, Speaker A: So with that being said, steven, are you ready for the last, fifth, and final challenge?
00:44:16.420 - 00:44:20.848, Speaker B: I'm ready. I'm always ready. Patrick, you don't understand something. I'm like, fair enough.
00:44:20.934 - 00:44:21.328, Speaker A: 03:00 a.m.
00:44:21.334 - 00:44:24.336, Speaker B: In the morning. Eleven. Whatever it takes, I'm ready.
00:44:24.438 - 00:44:25.412, Speaker A: Fair enough. Fair enough.
00:44:25.466 - 00:44:25.920, Speaker B: Excellent.
00:44:26.000 - 00:45:24.740, Speaker A: Okay, the last and final challenge, competitors, should you choose to accept it, it's going to be the hardest one yet. Okay, what you need to do is you need to deploy a contract to a test net of your choice that has a method, a payable method called fund, that takes exactly $50 worth of ETH or whatever native blockchain token as payment. Excuse me? It requires exactly $50 as payment as part of message value. So a contract, any network of your choice, $50 in ETH, actually, I'm going to say ETH. $50 in ETH is required to be in the message value. Okay. So you have to send fund function $50 in ETH required.
00:45:24.740 - 00:45:41.112, Speaker A: Yes. Thank you, Steven. Yes. Deploy a contract to a test on every choice. That is a payable method called fund requires exactly $50 worth of ETH as part of the payment method value. And you can't hard code what the $50 equivalent would be. You cannot hard code that.
00:45:41.112 - 00:45:45.916, Speaker A: So you can't use your little calculators and do like, okay, what's the price of ETH? What's the price of $50?
00:45:45.938 - 00:45:47.320, Speaker B: Has to work today and tomorrow.
00:45:47.400 - 00:45:49.470, Speaker A: Has to work today and tomorrow? Yes.
00:45:50.720 - 00:45:54.464, Speaker D: We can't hard code the price.
00:45:54.582 - 00:46:09.316, Speaker A: You cannot hard code the price. So it has to be $50 today and $50 in ten years. All right. Do you all understand the challenge? Yes. All right.
00:46:09.418 - 00:46:10.516, Speaker C: Already started.
00:46:10.698 - 00:46:24.948, Speaker A: Excellent. This is definitely the hardest one yet. There is math. Oh, and my favorite part. We're on. We're on Andrew screen right now. They all are aware that, okay, this might not be something I can Google and copy paste.
00:46:24.948 - 00:46:40.652, Speaker A: That's why we made the last challenge. He's already got his withdraw method. It's a public payable method. Spot on. He called it with payable fund method 50 ETH. I love it. Although it's $50, not 50 ETH, but it doesn't matter.
00:46:40.652 - 00:46:42.136, Speaker A: Right? What the actual contract.
00:46:42.168 - 00:46:43.308, Speaker B: $50.
00:46:43.474 - 00:47:06.756, Speaker A: $50 you should probably specify in this global world, actually, yes. $50. Yeah. Let's sit on Zashan screen for a minute. Right. Because this is going to be one where it's not just going to be like, go to chain link docs, copy paste the examples, and tweak a couple of variables. It's like, okay, I got to think a little bit here.
00:47:06.756 - 00:47:20.990, Speaker A: I got to do a couple of things. How do I require the message value? I guess that was a little bit of a giveaway. But, Steven, I don't really know if there was a better way for me to have said that fun method that.
00:47:21.360 - 00:47:24.060, Speaker B: Received, that is only capable of receiving.
00:47:24.400 - 00:47:57.380, Speaker A: $50 of E. Yeah, that's what I probably should have said. I guess me saying require might have tipped off the competitors here. So we have even more people joining the stream. Hello and welcome the final challenge. Just to update everybody who hasn't been watching, the final challenge here of our speed coding is at the bottom of the screen. Deploy a contract to a testament of your choice that has a payable method called fund that requires exactly $50 worth of ETH as payment in the message value.
00:47:57.380 - 00:48:14.712, Speaker A: Of course. That would be kind of cool if you could do, like, the whole message value in solidity instead of MSG. I guess that would be like verbose solidity. If anyone wants to fork solidity, turn it to verbose solidity.
00:48:14.856 - 00:48:19.404, Speaker B: Do message an entire fork facility. Just one patch that we just.
00:48:19.442 - 00:48:20.076, Speaker A: Yes.
00:48:20.258 - 00:48:20.748, Speaker B: Going.
00:48:20.834 - 00:48:25.768, Speaker A: You can call it, like, 0.8 point verbose or something and evolve.
00:48:25.784 - 00:48:28.896, Speaker B: Can you make your screen a little bit bigger? Could we zoom in just a tiny bit?
00:48:28.998 - 00:48:31.584, Speaker A: I know, no worries. We're making a little bit.
00:48:31.622 - 00:48:34.448, Speaker B: Everyone at home, thank you so much.
00:48:34.534 - 00:48:39.628, Speaker A: Yes, thank you. We're making your job a little bit harder, but no, it all still fits.
00:48:39.644 - 00:48:43.408, Speaker B: On the screen, so not harder. Let's do it over to Andrew.
00:48:43.504 - 00:48:49.450, Speaker A: Do it for the vine. I don't know if that's. Do people say do it for the TikTok? Probably not. I don't think that's something people say.
00:48:50.860 - 00:48:56.852, Speaker B: Absolutely. Okay. Why aren't we live streaming on TikTok, Patrick?
00:48:56.916 - 00:48:58.372, Speaker A: Actually, we should be live streaming.
00:48:58.436 - 00:48:59.610, Speaker B: One of us should be.
00:49:00.300 - 00:49:04.584, Speaker A: Although. Although TikTok, I think they only allow, like, what, seven second videos, so I don't know if that would.
00:49:04.702 - 00:49:06.904, Speaker B: No, live. We go live on TikTok.
00:49:06.952 - 00:49:08.184, Speaker A: Oh, you can go live on TikTok.
00:49:08.232 - 00:49:11.944, Speaker B: All right, next time. Next time. We're not doing this on YouTube. We're straight. Straight to TikTok.
00:49:11.992 - 00:49:22.850, Speaker A: Straight to TikTok. All developer competitions, I feel like the class of audience member would be vastly different. The comments we would get would be, like, very different.
00:49:23.380 - 00:49:29.872, Speaker B: Think of the hundreds of thousands of new blockchain developers we're going to get if we just get really exciting on TikTok.
00:49:29.936 - 00:49:30.404, Speaker A: Absolutely.
00:49:30.522 - 00:49:31.856, Speaker B: Esports TikTok.
00:49:31.968 - 00:49:36.496, Speaker A: Yes. Esports solidity TikTok. Excellent.
00:49:36.608 - 00:49:37.844, Speaker B: It's going to be a big deal.
00:49:37.962 - 00:50:04.824, Speaker A: Right? So if we're back in on the coders here. So we're on. This is Ox evolves is Matthias. He's got a get price function, right. He's trying to figure out the math on how to convert ETH to dollars so he can make sure that the payment goes through correct. He's trying to figure out the math. Math can be a little tricky in solidity, right, because there's no floating points, there's no decimals in solidity.
00:50:04.824 - 00:50:17.250, Speaker A: So you got to do some multiplication and some division. There's a lot of stuff you got to do here. So he's trying to figure out the math. Yep. Flipping over to Zeeshon. Thank you, Steven. It looks like he is.
00:50:17.250 - 00:50:39.928, Speaker A: Oh, that's interesting. He's using an API call to get the number, actually. So technically his way will work as well. So it's a bit more of a centralized version. I didn't specify though. So technically his way will also work.
00:50:40.094 - 00:50:46.892, Speaker B: He could build an adapter that does anything. He could hit any API endpoint that just gives him the exact result he needs.
00:50:47.026 - 00:50:53.788, Speaker A: How crazy would that be? If Zhan went off and built like an external adapter? He built like a serverless, just a.
00:50:53.794 - 00:50:57.330, Speaker B: Web API, just right, like eight lines of JavaScript or whatever.
00:50:57.940 - 00:51:08.870, Speaker A: He spun up a server and the only issue there is that we said it'd have to last for ten years. He would be forced then to run his server for ten years in order for it to count.
00:51:09.320 - 00:51:12.870, Speaker B: I think that's in keeping the spirit of the competition, yes.
00:51:15.000 - 00:51:32.632, Speaker A: So we have the two remix users choosing to go with price feeds. We have Zshawn choosing to go with an API call, which will definitely be more expensive if it were to go mainnet, but technically it works. All right, we have Andrew who's deploying.
00:51:32.776 - 00:51:34.380, Speaker B: Andrew, what's he deploying here?
00:51:34.450 - 00:51:35.708, Speaker A: He's got a VAR store.
00:51:35.794 - 00:51:49.184, Speaker B: Okay, so he's storing the results of a round coming back from get latest price. Okay, where is he doing his math? He's just testing out his get latest price calls. Make sure that those are working right now.
00:51:49.222 - 00:51:55.600, Speaker A: I like it. Okay. I like it. Verifying trust, but verify, that's what they always say.
00:51:55.750 - 00:51:58.876, Speaker B: Interesting. Since it's not a view function, he has to pay every time he calls.
00:51:58.908 - 00:52:23.790, Speaker A: His get latest price method, which we didn't specify. So if you want to do it like that, you absolutely can. I guess if this was a game of inches though, which it kind of is, it would take you that additional block or two to get the response. So I guess we'll see how it we have, we have Oix evolve. He's got a contract, he's got a get price function.
00:52:26.560 - 00:52:31.150, Speaker C: It should be good. Now I have to try it.
00:52:31.680 - 00:52:37.870, Speaker B: I didn't put like, he's got an independent method and he's got an independent get price method, but they're not connected in any way right now.
00:52:38.320 - 00:52:39.476, Speaker C: They are connected.
00:52:39.608 - 00:52:40.380, Speaker B: They are connected.
00:52:40.460 - 00:52:40.976, Speaker A: He's got it.
00:52:40.998 - 00:52:41.648, Speaker D: He's got it.
00:52:41.734 - 00:53:01.224, Speaker A: All right, so those who are coding, keep coding. We're going to take a look at this and verify this makes sense. He's got the price there. He's got that min USD price, which is going to be 50 in way, which is great. And now he's got require getting. The price is greater than or equal to min USD. Otherwise you need more.
00:53:01.342 - 00:53:28.290, Speaker B: Okay, so he's taking whatever someone sends him and saying that he had to send more than the min USD we could put equal. So he's converting the ETH value that is sent to USD, it looks like. So let's just double check that. Getting the price of what I assume is ETH USD. I don't know all of the proxies by heart.
00:53:29.300 - 00:53:41.856, Speaker A: So what happens if you hit the fund? Have you tested the fund function? I mean, that's really going to be the only thing I will try. How much ether are you going to fund it with? How much is $50 worth of ETH?
00:53:41.968 - 00:53:42.950, Speaker C: I don't know.
00:53:43.720 - 00:54:02.696, Speaker A: Well, that's going to be the only way. And to clarify, though, we said exactly $50, so greater than or equal to is not going to qualify, which actually makes it really hard. Yeah, that actually makes it a lot.
00:54:02.718 - 00:54:16.750, Speaker B: Harder for the viewers at home. I believe the correct amount of ETH, obviously, the competitors have to be more specific, but I think the correct amount of ETH is around 0.1 e as of the prices around today.
00:54:20.500 - 00:54:30.310, Speaker A: Matthias, until you run a successful funding with $50 worth of ETH, it is not going to count. It is not going to count.
00:54:30.760 - 00:54:41.210, Speaker B: Let's check up on Andrew. How's it going, Andrew? Andrew is knee deep in the developer documentation for using data.
00:54:44.060 - 00:54:58.056, Speaker A: And. And he's looking at the price converter stuff, too. That's really clever. He pulled down in the docs. He sees that there is a price converter, but he sees that it's across price feeds. Right. So the example is across price feeds.
00:54:58.056 - 00:55:02.380, Speaker A: How do you convert the converter to not across price feeds?
00:55:02.880 - 00:55:05.040, Speaker B: Yep. Let's check him with Zeeshan.
00:55:06.580 - 00:55:19.990, Speaker A: Oh, he slipped back. He slipped. Oh, before he was using the API call. I wonder what, amid that, wonder what made him make that decision. We will check in with him after the.
00:55:21.480 - 00:55:25.140, Speaker B: Might it be our kind commentary?
00:55:25.480 - 00:55:26.550, Speaker A: What's that?
00:55:29.320 - 00:55:30.630, Speaker B: We want all the.
00:55:31.640 - 00:55:34.250, Speaker D: Basically, I wasn't not able to get the data.
00:55:34.780 - 00:55:35.480, Speaker A: Okay.
00:55:35.630 - 00:55:44.596, Speaker B: It was a little on, not yet. An API call that gives you the amount of ether in 50 USD. You could have built it, but.
00:55:44.718 - 00:55:58.992, Speaker A: Could have built it. It might have been a little tricky. So now he's on the math part. He said, okay, screw that, I'm going to do the price feeds. And he's figuring out, like, he's stroking his chin, right? He's got the thinking pose on, the thinking man's pose. All business thinking man.
00:55:59.046 - 00:56:05.936, Speaker B: So, Patrick, how do you send the exact amount of ETH to match up because we've got, like, 18 decimal places.
00:56:06.128 - 00:56:30.568, Speaker A: It's going to be tough. It's going to be very tough. And this is another reason why it's a little bit tricky. This one's more math hard, right. Because if everyone's using the price feed, which means they all know exactly what the price is. So to send $50 worth of ETH, you can send that exact amount in way. Right.
00:56:30.568 - 00:56:42.940, Speaker A: So definitely not easy math wise. This is that piece that's going to make it a little harder. Maybe we should change it, Steven. Maybe we should change it from a range of. What do you think? Should we change?
00:56:43.090 - 00:56:48.930, Speaker B: I don't know. I think that the challenge can kind of stand, because I'll tell you what I might consider doing.
00:56:51.620 - 00:57:07.990, Speaker A: Hold on. Tell me, Steven, what are you doing giving away secret information on price, converting and sending with. I love it, though. I love it. So we'll check in with you after the competition. We'll check in with the commentator. Steven's saying, I think I might know.
00:57:07.990 - 00:57:36.300, Speaker A: So. And we're going to let it stand. We're going to let it stand. So I love this. Do you see what Andrew is doing here? Andrew's got the docs. He's got the price conversion in his remix right now, and he's trying to figure out, okay, here's how I convert stuff, but how do I get my ether to be $50? He's got it in there. There's just that one piece needs to connect, and he's under pressure.
00:57:36.300 - 00:58:14.264, Speaker A: Right? How many people here have taken, like, a calculus test, and they were like, okay, it's 10,000 questions, and you have 60 minutes to do it. That's the math and pressure that they're trying to do right now. Also, I just realized Zeeshan has been behind the tags the whole time, so I just pulled them up so we can watch Zeeshan in his thinking man's pose. Wait, maybe Steven can post his idea in the chat.
00:58:14.312 - 00:58:14.632, Speaker B: Ooh.
00:58:14.696 - 00:58:25.820, Speaker A: Steven, you can tell the audience, but just no peaking competitors don't go to YouTube because Steven might post his idea there.
00:58:25.890 - 00:58:28.590, Speaker B: No, I'll sway it. I'll just wait. All right.
00:58:28.900 - 00:58:32.210, Speaker A: We'll all learn Stephen's idea together. It's perfect.
00:58:32.980 - 00:58:36.320, Speaker B: So we are almost at time here, Patrick.
00:58:36.400 - 00:58:36.740, Speaker A: Yes.
00:58:36.810 - 00:58:37.670, Speaker B: What are you.
00:58:39.160 - 00:58:41.940, Speaker A: We competitors.
00:58:42.440 - 00:58:43.492, Speaker B: We're so close.
00:58:43.626 - 00:58:44.228, Speaker A: I know.
00:58:44.314 - 00:58:44.852, Speaker B: Here.
00:58:44.986 - 00:59:04.012, Speaker A: It's literally right there. We see ox evolve has been on the corner of victory this whole time just trying to. Okay, how do I get this fun piece to go? Maybe we should just make it easier and we'll give them two more minutes. What do you think? Make it a little easier. Give them two minutes. Do it. Okay.
00:59:04.012 - 00:59:17.472, Speaker A: All right, so, challengers, competitors, we're changing the challenge. All right, we're changing the challenge. It's now between $50 and $100. So you have a buffer window. Okay. Between 50. It doesn't have to be exactly $50.
00:59:17.472 - 00:59:44.970, Speaker A: You have to send between $50 and $100 worth of ETH. So hopefully that makes it a little easier. I know it's 07:00 right now. My phone is telling me, hey, Patrick, it's 07:00 we'll go for another two minutes. Can we do a timer in here? Is that something we can do? That'd be kind of cool. Oh, what's this do? 30 seconds. Oh, I didn't want that.
00:59:44.970 - 01:00:02.670, Speaker A: I didn't want that. But it looks like if we do that, we can't do the competitors at the same time. All right, so we'll go for two more minutes here. Two more minutes. Between 50 and $100. Okay. Steven, you're amazing at flipping back and forth here.
01:00:02.670 - 01:00:04.640, Speaker A: I clearly can't.
01:00:05.380 - 01:00:11.292, Speaker B: Streamyard is not yet adapted to this type of broadcasting because I also have to manually put the little label in the corner.
01:00:11.356 - 01:00:17.248, Speaker A: Yes. Streamyard wasn't ready for the hype that we were going to bring.
01:00:17.334 - 01:00:22.228, Speaker B: So anyone build a developer esports streaming platform, let us know.
01:00:22.314 - 01:00:29.750, Speaker A: Yes, we will sign up immediately, 100%. All right, so who are we looking at now?
01:00:30.220 - 01:00:43.210, Speaker B: We've got min and Max coming from. Okay, let's check out Andrew. He's got amount to fund. Still hemming out the math there. Evolve might be close here.
01:00:43.660 - 01:00:45.132, Speaker A: Where's Zhan? Let's check in.
01:00:45.186 - 01:00:46.460, Speaker B: How much is he funding?
01:00:47.600 - 01:00:56.370, Speaker A: Oh, he's deploying another contract. He's got. He's. He's on the ETH price converter. He's trying to figure out. Okay, like, how much it would be. Correct.
01:00:58.020 - 01:00:59.970, Speaker B: He's pasting an amount of way.
01:01:00.820 - 01:01:13.236, Speaker A: He's hit gas. Estimation failed. Something's wrong. The math is a little wrong. We got about 60 seconds left, competitors. Let's check in with Zeeshan. How's Zshawn doing? Oh, nice.
01:01:13.236 - 01:01:30.090, Speaker A: You're so quick with it. All right, he's doing the math too. We're all in the calculator, and we can see his functions here. He's got a do call function where it looks like, oh, he's got a new payment function. You don't have to show off, Zeeshan. You can keep doing what you're doing, man. You can keep doing what you're doing.
01:01:30.090 - 01:01:48.000, Speaker A: He's like, oh, they're looking at my code. I'm definitely trying to show this then, but eyes on the prize, Ishan. Eyes on the prize, my friend. He's doing a fund. He's got the fund. He's got the fund command. It's requiring the message, OD value is five e USD.
01:01:48.000 - 01:01:52.208, Speaker A: He's doing some pretty interesting math here.
01:01:52.294 - 01:01:54.690, Speaker C: It's funded, but yeah.
01:01:56.920 - 01:01:58.628, Speaker A: Matthias thinks he's got it.
01:01:58.714 - 01:02:04.532, Speaker C: It's funded, but I don't know if it's exactly the good value. How can we.
01:02:04.666 - 01:02:16.040, Speaker A: Everyone, competitors who are still coding, keep coding. We're going to verify with Mr. Ox evolved. Yeah. So it looks like you did 0.2 ether. 0.2.
01:02:16.190 - 01:02:19.690, Speaker B: Yeah, maybe that should be a little bit less than 100.
01:02:20.480 - 01:02:35.644, Speaker A: And it looks like fund went through. Okay, so can you copy your contract address there? Yes. Oh, is that the contract address? So I see a transaction for contract creation.
01:02:35.692 - 01:02:37.440, Speaker B: Yeah, there's no fund calls here.
01:02:37.510 - 01:02:45.776, Speaker A: Yeah, do a refresh. Here it is. Oh, there's the fund function.
01:02:45.878 - 01:02:46.688, Speaker B: There's the fund.
01:02:46.774 - 01:03:03.624, Speaker A: We see 0.2 ether. Can we go back to your contract? Let's just make sure it will only accept between that amount. So you said need more for both of them, but that's fine. So we have require. It's greater than or equal to the min. It's less than or equal to the max in did.
01:03:03.624 - 01:03:23.600, Speaker A: How did he do the price calculations here? So answer return. He did the common denominator there to get it in an answer. That makes sense. I think we have a winner here. Steven, what do you do? Are you seeing correctness here?
01:03:23.670 - 01:03:24.672, Speaker B: This looks good to me.
01:03:24.726 - 01:03:35.570, Speaker A: All right, wait, one more test. Put in double the amount that you put in in way and it should reject this transaction. Good.
01:03:40.440 - 01:03:43.712, Speaker B: We should see a gas estimation failed error here. Yep.
01:03:43.776 - 01:03:44.964, Speaker A: And we did it.
01:03:45.162 - 01:03:46.070, Speaker B: All right.
01:03:46.440 - 01:04:01.290, Speaker A: And the final round goes to Matthias. Goes to Mr. Ox of all. Oh, my goodness, I'm sweating. How are the three of you feeling? That was a ride. That was an intense blast. That was so much fun.
01:04:01.820 - 01:04:02.616, Speaker C: Yeah.
01:04:02.798 - 01:04:07.852, Speaker A: How are we? Oh, and actually, before we forget, Steven, what were you thinking?
01:04:07.986 - 01:04:25.008, Speaker B: So, I was thinking exactly along the lines of what Zishan did, which is if you put the calculation of what 50 USD is in ETH in its own function call, then you could just call that function, it will tell you what amount to send in. So C sharp was totally on the same path, mental path as me.
01:04:25.174 - 01:04:40.736, Speaker A: I was thinking the exact same thing like get entrance fee or get fund fee. We ended up seeing Matthias, do it. Excuse me? Matthias, do it. The more manual way, which also worked out well. Of course, Zeeshan did it that way. Right. He's the professional programmer.
01:04:40.736 - 01:04:51.128, Speaker A: He was in typescript. He's like, I got to do. I'm going to get it 100% right. Absolutely fantastic job. Matthias, how did you feel with that last challenge?
01:04:51.304 - 01:05:13.408, Speaker C: It was very good. Very intense, actually. I was trying to get the oracle on iter scan to get the price feed and do the calculation by myself, but to send, like, exactly $50. But the best way was, of course, to do a separate function. Yeah, it was very good.
01:05:13.494 - 01:05:15.228, Speaker A: The manual way ended up working out.
01:05:15.334 - 01:05:21.696, Speaker B: A huge congratulations to all of our competitors. You are all winners here today. Fantastic.
01:05:21.888 - 01:05:42.444, Speaker A: Yes. Fantastic work. And before we jump off, I know we're over, everybody. Andrew, how are you feeling on that last one I saw, you were so close. I was so excited for another pop off from you on the last one. Your win on round three, I believe, was fantastic. How are you feeling on that last one? It looks like you were right there, too.
01:05:42.444 - 01:05:59.650, Speaker A: I was right there. Just a little bit more time. All right, cool. Well, are there any last words from anybody here? Once again, this has been an absolute blast. Anything anybody else wants to say?
01:06:00.580 - 01:06:02.290, Speaker D: I just want to say that.
01:06:02.980 - 01:06:04.450, Speaker C: Please go ahead.
01:06:05.080 - 01:06:07.190, Speaker A: Everyone's so modest, so kind.
01:06:08.120 - 01:06:24.970, Speaker D: I was saying thank you for having us, and it was quite good experience to do the speed code, and I enjoyed a lot. Learned few things. Wow, you do a speed code, but it was quite interesting to learn.
01:06:26.300 - 01:06:26.952, Speaker A: Yeah.
01:06:27.086 - 01:06:35.950, Speaker B: Thank you so much. I think we all learn so much, like, just seeing the different ways of doing things. I think every time we do this, it's going to get more and more.
01:06:38.080 - 01:06:56.764, Speaker A: And because it'll get more and more intense, that means it's going to be more and more. So, awesome job, everybody. Thank you so much for being a part of this audience. Everyone who's watching, we see the chat, we see people going, let's go. And getting as excited as we are. Thank you so much. Thank you to our three competitors, Andrew oxevolve slash Matthias.
01:06:56.764 - 01:07:10.276, Speaker A: Excuse me, Matthias and Zeeshon. Thank you so much for being here. You all did fantastic. Everyone got a win, too, which is awesome. It means the competition was fierce here. We had an absolute blast. Hopefully, everyone else at home had an absolute blast.
01:07:10.276 - 01:07:20.440, Speaker A: Thank you so much. This has been speed coding at the chain link, fall 2021 hackathon. We will see you all next time. Bye.
