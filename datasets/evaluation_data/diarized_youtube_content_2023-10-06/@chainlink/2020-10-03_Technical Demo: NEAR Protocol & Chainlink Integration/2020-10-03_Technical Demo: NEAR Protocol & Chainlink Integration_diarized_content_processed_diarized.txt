00:00:06.570 - 00:00:20.398, Speaker A: Thank you guys so much. And to everybody tuning into the sessions again, we're excited to be joined now by the engineering team from near protocol, Mike, Josh, and Nate, and you guys are going to tell us about near protocol's integration of chainlinks. Thanks, guys. Take it away.
00:00:20.484 - 00:00:44.054, Speaker B: Thank you. Thank you, Abby. Awesome. We're really excited to be here at this contract summit and to show you the early integration between near protocol and Chainlink. My name is Anais. I'm a developer advocate at near protocol. If you've already interacted with Nier in some level, if you're part of our community, if you have been around our resources, our channels, the chances are high that we already interacted.
00:00:44.054 - 00:00:56.000, Speaker B: If not, and you would like to learn more about near, we're going to show you some resources, some links at the end of the presentation. But first, let's hear from Josh and Mike what they are about, what they are working on at near.
00:00:57.330 - 00:01:02.990, Speaker C: Yeah, my name is Josh. I am a documentation engineer at near and also a developer.
00:01:03.810 - 00:01:13.860, Speaker D: Hey, I'm Mike. I've been at Nier since January and do a lot of partner engineering, getting people onboarded and a bunch of developer experience, tooling and reaching out to folks. It's great.
00:01:14.230 - 00:01:50.862, Speaker B: Awesome. Yeah. We would really love to hear from everybody who's watching right now just how familiar you are with Nier. If you have never heard about near or maybe just seen the near protocol name around, please type a one in the chat box. So one for if you've never heard about near or just high level, and a two is if you are somewhat familiar, if you're in some part of our channels, if you've participated in our events, and three if you're using Nier really frequently. That would be really cool just for us to know and to respond to your level of understanding of near during the demo. So if you're watching, please.
00:01:50.862 - 00:02:36.240, Speaker B: One if you've never heard about near, two if somewhat, and three if you're a super user. Just for those who are new to near protocol at a high level, near is a proof of stake layer one blockchain network so you can build decentralized applications on top of near, similar to how you use other layer one solutions. We have some pretty cool scalability and composability features at near that. We are also going to dive in more detail later on, but let's take at a high level near. We would love to welcome you in our channels, but let's proceed with our demonstration. It's a high level demo on how the chainlink ecosystem interacts with near RPC, the near environment. So Josh is going to walk you through that now in the demo.
00:02:36.240 - 00:03:09.626, Speaker B: I guess that since you're here at the smart contract summit from Chainlink, you already know about what oracles are, how they are used, if you're not, if you're new to it, if you maybe not a developer at a high level, oracles are basically, you can imagine it's similar to being in a garden, in a walled garden. You've never been outside of that garden. You don't know what's happening outside. So that's basically your blockchain. A blockchain doesn't usually interact with information outside of the blockchain. It doesn't know what's happening outside. And for most applications, that's okay.
00:03:09.626 - 00:03:38.020, Speaker B: But there are some applications that require external information to know what's happening and to respond to it and to provide more complex data processing, et cetera. So imagine that to be you asking several of your friends to send you letters over the walled garden to access information from outside. And that's kind of similar how oracles work. They are data sources for the blockchain. Yeah, just, you want to take it from here and show us the.
00:03:39.190 - 00:04:12.480, Speaker C: Totally. So, yeah, like Anus was know, an oracle provides a gateway to off chain data, just allowing smart contracts to gain access to the information that it needs. There's quite a few moving parts that allows this communication to take place. So to help us kind of explain this and illustrate it better, we've partnered up with Chainlink to present this demonstration for you. So let me go ahead and share my screen. Does everyone see the demonstration in front of us?
00:04:12.850 - 00:04:13.758, Speaker D: Got it. Cool.
00:04:13.844 - 00:05:02.030, Speaker C: Yeah, awesome. Cool. So, yeah, we created a basic, simple react app illustrating the various components of an oracle request. When you initially land on this page, you'll see welcoming instructions that will tell you kind of how to get started. And you're going to go ahead and choose a selected token price from these four preset tokens. So we'll go ahead and click on chain link, and now we have the ability to check it and we'll go ahead and start the process. This application has a special key pair that it uses to connect to near on initial load of the screen and then also allow to send transactions to the client contract on the near network.
00:05:02.030 - 00:05:55.038, Speaker C: So it returned a price for link at $16.81. And then it kind of shows us a diagram of exactly what's taking place behind the scenes. So first, when the user checks the price, they will call the client contract and this contract for this demonstration has 50 fungible tokens assigned with it that it uses to pay for these requests. And this initial transaction, the link of it is automatically provided to the user and we can go ahead and click on that. I don't know. Oh yeah, it's not going to show me the next tab because I'm sharing my first tab, but it takes you to a near explorer that is very similar to Etherscan. That'll show you more detailed information about the transaction that took place.
00:05:55.038 - 00:06:50.190, Speaker C: You can see what block it was on and all sorts of nitty gritty information about it. The next step is the client contract will send ten fungible tokens to an on chain Oracle contract. Then it will interface with the off chain oracle node. If you could see in the previous step illustrated here, the oracle node. And over here on the upper right hand side, the oracle node is constantly polling for requests. So you have your chainlink Oracle node here that is constantly asking the on chain Oracle contract if there are any requests for it to process, and when it finds one, then it'll grab that request and it'll begin to process the transaction. It will interface with an API, get the information that it needs, and then it will return that price back to the oracle contract.
00:06:50.190 - 00:07:51.650, Speaker C: All while this is taking place, you can see that the fungible tokens are locked on this contract. The owner cannot access these until a complete request is, or until a request is completed and the contract is fulfilled. So in the next step, the on chain contract will return the initial request to the client and it will unlock the tokens. And now the owner of the on chain and off chain oracle contract and node, which typically is the same individual, can now access these tokens and they can either leave them there and let them store up from all the requests and get them whenever they decide that they want to grab those requests. And again, we'll have the transaction which we can see in the near explorer. And maybe I can do that on the last step here after I show you that. Yeah, basically the requested token is now rendered to the front end from the client.
00:07:51.650 - 00:08:51.910, Speaker C: So yeah, I can click on this and maybe I can just quickly show you, if I can be really quick, how sorry, near explorer transaction. So this is a link to our near explorer that I'll show you that the oracle node signed this, the chain link oracle on chain contract received it. Here is more information about it, how much gas was used, how much we attached, the transaction fee, and more information. You have your receipts down here and also what exactly you got the client received this price, which is multiplied by 100, and then we just go ahead and divide it to get you an actual price. So, yeah, that's basically the demonstration. I'm going to go ahead and pass this off to Mike. That's going to dive a little bit more into what goes on at near and how this is all done in more technical aspect.
00:08:52.410 - 00:09:14.474, Speaker D: Great, thanks. Yeah, that's great. Yeah. So near has a bunch of advantages. Like everyone's experiencing some problems with gas cost right now, and that's something that we're tackling. We also have a different way of writing smart contracts. So we wrote the Chainlink contracts in a programming language called Rust.
00:09:14.474 - 00:10:14.634, Speaker D: Rust is like a systems programming language you could think of like C C, just very kind of low level, super secure. And stepping back a little bit, near is using a webassembly virtual machine under the hood here, as opposed to Ethereum, for instance, which uses the Ethereum virtual machine. And so since we are using webassembly virtual machine, programming languages that can compile down to a webassembly like binary can actually live on the blockchain. Right now, Nier is targeting two languages in particular, assembly script, which looks a lot like typescript, if you're familiar in JavaScript world, and Rust. Now, Rust, as mentioned before, has a bunch of inherent safety from the compilation. So we're recommending Rust for financial applications and whatnot. So we basically took the solidity contracts from Chainlink.
00:10:14.634 - 00:10:49.318, Speaker D: If we go to the next slide, and we ported them from solidity to Rust. So we're going to see on the left hand side here is the solidity contract, and on the right hand side we see the rust contracts. Rust looks really weird at first, by the way, in case you're visiting this and you're a dev, it looks very strange. It's not that complicated. You don't have to be like a master rust expert to write smart contracts in Rust. We'd love to chat with you afterwards, if you're interested. So what was involved here was porting the main Oracle solidity contract to Rust.
00:10:49.318 - 00:11:21.138, Speaker D: And then we had two other contracts. Essentially we had a fungible token contract, which is where the link token essentially is going to be. We have our own fungible token spec on near. So we had the fungible token, the Oracle contract, and then the client contract. And the client contract is just a very basic on chain smart contract that wishes to get off chain data. We'll have a link to both of these repos here at the end. And also, I should mention as kind of a teaser.
00:11:21.138 - 00:11:57.666, Speaker D: We are working hard right now on the near EVM so that hopefully soon you actually don't have to port your smart contracts from solidity to rest. You could actually have them straight in near, which is kind of amazing. That's a whole other session. We're not going to get into that, but that's really exciting and want to mention it. The next slide we're going to talk about is the keys on near. So Josh mentioned briefly that react app used a special key to talk to the client contract on chain. Near has a very interesting account system that is really cool.
00:11:57.666 - 00:12:23.670, Speaker D: There's two types of keys. For a given account, you would have unlimited number of these. So there's the full access key and function call access key. So the full access key can do all sorts of very powerful things. It can add another key, delete a key, send near tokens, it can even delete the entire account itself. You can have unlimited of these. And then the really interesting part comes in with function call access keys.
00:12:23.670 - 00:12:53.202, Speaker D: This is what we used in this demo. On the right hand side you'll see something that is displayed from the terminal. We have a CLI tool called near Cli that can do a lot of things. What we're showing here is the actual public keys that are being used for this account on near called client Chainlink testnet. You'll notice that account names on Nier are not long hashes like Ethereum. That's very human readable. It's really cool.
00:12:53.202 - 00:13:48.658, Speaker D: So the highlighted key here is what we're actually using in this react app. And all it can do is call one method, get token price, and the allowance is a very large number, meaning I'm allowed to call the method, get token price, and use a bunch of gas until I run out of the allowance. So if you're a dev and kind of hearing this, maybe the gears are turning in your head. There's a lot of different things that you can do with this account system. So that is a really neat part of this demo. If we go to the next slide, we're just going to talk about kind of covering how this is right now, sort of in early stages. The integration between near and Chainlink, this is kind of an MVP stage, but we are showing that the integration is happening between the chainlink nodes talking to our RPC back and forth.
00:13:48.658 - 00:14:14.174, Speaker D: And Chainlink has been nice enough to use their infrastructure to continuously pull. And so this demo will be live, which is great. It's not going to be as snappy as it would be if it were on Mainnet, but we are very excited to have a chainlink node talking to ours. And you can make your own chainlink node. There's an adapter, it's all open source. It's amazing. So they're coming soon.
00:14:14.174 - 00:14:59.180, Speaker D: There's a bunch of really fun stuff happening here. The first bullet point is just kind of how we could make this demo a lot more kind of interesting. Using what I just mentioned with the function call access keys, it is possible to do a great many things that will allow for scalability. That would be quite difficult in other chains. For instance, in this demo, we could actually see when a unique user lands on the web page and give them their own function call access key. If we do this, basically there's no collision of nonces, which is a pretty amazing feat to accomplish. So that's kind of a stretch goal for this demo.
00:14:59.180 - 00:15:50.262, Speaker D: Long term, between Chainlink and near, there's this amazing thing called the Rainbow Bridge, which you'll see animated on the right. It's a super awesome feature that we've just added recently. This is basically going to have a bridge between Ethereum and near. So you can take tokens that are on ethereum, lock them up and mint them on near, and move them kind of both ways. So this is really important because right now the chain link link token, as you know, is an ERC 20 token. So that is fundamentally on Ethereum, and that's great, and that's fine. If gas prices end up being way better on near, which is our expectation, then you can essentially just move fungible tokens across chains and not have to reinvent the wheel.
00:15:50.262 - 00:16:04.240, Speaker D: And that is really amazing. We're really excited about the rainbow bridge. It's actually trustless, so you can do it yourself. You don't have to trust that. We swear our infrastructure is verifying this. You can actually do it yourself. It's really amazing.
00:16:04.240 - 00:16:56.514, Speaker D: There's going to be a hackathon pretty soon coming up that's going to be really exciting. I'll have a link on the last slide to that. So that is definitely one of the next steps, is really bridging the link between these two, pun intended. Because right now for this demo, the fungible token is kind of funny money. It is a fungible token that is actually very secure, but is not currently attached to the value of chainlink on Ethereum, et cetera. And then the last two bullet points here, if you're familiar with Chainlink and kind of like how you build a full fledged integration, there are price feeds and there is a pre coordinator system. So this is essentially making sure that you are distributing trust and that you are getting a bunch of different prices from various places because like traditional finance, that's kind of what you want to be doing.
00:16:56.514 - 00:17:39.886, Speaker D: So those final two bullet points are just the next steps to really strengthen and fortify the integration between Chainlink and near. So it's a lot of fun stuff happening. And this final slide is how you can learn more about near. The last link on here. Near Rainbow is another great link, or that longer one too. We are really looking forward to seeing people bridge this and try different layer ones and it's going to be really exciting. I think we can actually go move toward questions if folks have some questions in the chat as well.
00:17:39.988 - 00:18:12.970, Speaker B: So there were several questions on the code since the code wasn't too visible. So maybe we can either go back to the code or since most of the people who are currently watching, I believe, joined later on, maybe it's worth going back and reshowing the demo. Maybe one for the code in the chat, write one for the code and two for the demo. What you want to see in the last ten minutes that might be helpful. Two, okay, two demo, one code, another one for demo. Okay. And if you have any questions, please also type them into the chat.
00:18:12.970 - 00:18:30.174, Speaker B: Mohamed we will share the code and everything on our community chat. Later on when you go to near chat, you can join our community chat and we can share the code. And let's go back to the demo maybe and take another look. Awesome.
00:18:30.372 - 00:19:03.578, Speaker C: Yeah, so we can do the demo one more time. Again on load, we're using those access keys that Mike just kind of went into a little bit more depth with. So the access keys are coded into the site itself. You don't have to do anything. The developer actually does that for us. We'll go ahead and select a token, we'll click on chain link and click check again, there's all that stuff happening in the background where the oracle node is pulling the Oracle contract. So it takes a little bit to receive a result.
00:19:03.578 - 00:20:15.250, Speaker C: But again, we're on a test net right now that gives it a little bit more of a delay than we would expect to see on a main net solution. So yeah, we can kind of go through these steps one more time. Again, there's a client contract that is on chain that has 50 fungible tokens. You can have however many on that contract that you want, but just for this demonstration purpose, we have the 50 here. We have a transaction that was placed in near explorer this call kind of sets the ball rolling and will then send ten tokens to the on chain oracle contract that will let it know that it wants a request from there. And as you can see by this blue line going back and forth that the off chain oracle node is continuously pulling the on chain Oracle contract. And once it sees that there is an on chain request, the tokens are locked, as you can see here, and the request is forwarded to the off chain oracle node.
00:20:15.250 - 00:21:09.060, Speaker C: The oracle node then interacts with an API, retrieving whatever data that was initially requested from the client that is then passed back from the oracle node that's off chain to the on chain Oracle contract, which then fulfills the request of the client. And now you can see that those tokens are now unlocked and the contract or the agreement is complete. And yeah, the request is fulfilled and then the result is returned to the front end. And you can kind of learn more here by going. If you click on learn more it'll take you to a blog post that talks about the integration between Chainlink and near and this application that we built. And also this demo is live right now. You can check it out at top.
00:21:09.060 - 00:21:41.040, Speaker C: There may be some nonce issues, so we were talking about getting kind of a next iteration of this would be to have those individual unique function keys available for everyone. So again, this is kind of a work in progress, but our repo is open source and you can take a look at it and if you see any issues or want to contribute to it, we are more than welcome to any input. And yeah, we would love to hear from you.
00:21:42.930 - 00:21:45.854, Speaker B: Awesome, thank you. Great.
00:21:45.892 - 00:22:16.280, Speaker D: Are there any other questions in terms of avalanche? I honestly do not know enough about avalanche. I've been so kind of heads down having fun building this layer, one that I don't know how to answer that one. Right now our main focus is having a bridge between Ethereum and near, which is similar to what other folks are doing. So thanks for the great question. I do look forward to watching that keynote. I think the keynote is actually for avalanche after us too, so that'll be fun to learn more.
00:22:18.430 - 00:22:47.940, Speaker B: In terms of if we are compatible. We just released our rainbow bridge, which is basically a trustless bridge between near protocol and Ethereum chain. Any other questions about the demo about near? Anything related to Nier? Anything you're curious about? Otherwise, you can also join us in our community chat where most of our, if not all of our developer related discussions and community discussions take place. Just be sure to link.
00:22:48.710 - 00:22:49.682, Speaker D: Yeah, great stuff.
00:22:49.736 - 00:22:55.300, Speaker B: All right, awesome. If there are no other questions. I think that wraps it up.
00:22:56.550 - 00:23:03.560, Speaker D: And for those who came in a bit late, this will be recorded. So we can just check out YouTube later on and watch it again.
00:23:03.930 - 00:23:11.080, Speaker A: Awesome. Thank you guys so much. Really appreciate it that we got some questions in there. And thank you for answering everything. Appreciate you guys joining today.
00:23:11.450 - 00:23:12.850, Speaker D: Great. Thanks, Abby.
00:23:12.930 - 00:23:14.018, Speaker C: Thanks, Abby.
00:23:14.194 - 00:23:15.026, Speaker B: Thank you. Bye.
