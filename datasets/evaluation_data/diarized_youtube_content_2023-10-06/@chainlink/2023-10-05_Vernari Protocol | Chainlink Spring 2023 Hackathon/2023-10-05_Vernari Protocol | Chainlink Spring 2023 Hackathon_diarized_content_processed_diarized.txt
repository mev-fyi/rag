00:00:00.250 - 00:00:50.800, Speaker A: You. Hey guys, my name is John Gregis. I am a lead engineer over at Linkpool, and today I get the opportunity to speak a little bit more about the Vernari protocol. Vernari is a web3 ecommerce security platform that allows businesses that already have a marketplace via web3 to have a more centralized third party escrow service. And this is all being powered through Chainlink functions. So Chainlink functions plays one major role, and that's to continuously check the status of shipped items. So when a user submits an order, those funds are then locked into vaults as a decentralized escrow service.
00:00:50.800 - 00:01:44.062, Speaker A: Once the shop itself updates, the item with the current tracking information through Chainlink automation on a timely basis will be checked. And once it's checked through Chainlink functions, it will check third party services such as Shippo to make sure that the item has been delivered. And once delivered, the escrow funds can then be unlocked and the shop then has full control of those funds. So now let's jump into the code and take a deeper dive into how Chainlink functions is actually being used in the protocol. So everything starts in the store. So every individual, current ecommerce marketplace will have their individual store contract. This is what you'll be able to access from the dashboard itself.
00:01:44.062 - 00:02:55.442, Speaker A: And so with the store, you'll be able to manage different variables for your orders in the subscription id. This is being the actual Chainlink functions id, the automation check interval, which is basically how often do we want to check each individual shipped item, some whitelisting which is basically who has access to the store to update items, and then also the upkeep id, which is the automation side of this. And you'll see this more so in the store manager. So the store manager is the manager of each individual store. And this is where the actual chainlink functions and chainlink automation magic happens. And so through Chainlink automation, each individual store will have their separate automation which is checked. However often that they have set the variable and the checkup keep will physically check to see each store to see if those orders are needed to be checked through chainlink functions to see if they have been delivered or not.
00:02:55.442 - 00:03:37.620, Speaker A: And so say it checks the upkeep. It says yes, there is one that needs to be checked. It will perform the upkeep which is now going to request the tracking information through our chainlink functions. And so what request tracking is doing is basically running a lambda with some of our current arguments that we pass in. And so if we go into our lambdas, this is our current Javascript lambda, which is running our base URL, which is the Shippo URL. It's passing in numerous arguments, one being the tracking number, the tracking company itself, and the order id of the order. So we know when it responds back which order that we are getting.
00:03:37.620 - 00:04:41.990, Speaker A: It checks and either gives us an integer of zero or 20 being nothing needs to happen since it hasn't been delivered, or two being that it has been delivered, we encode this information in bytes and then send back those bytes. And so once the manager hears back from the chain link function, sends back to the fulfill request. So if it is delivered, it will remove that order from the queue for that specific company. It will update the order status. So in this case it will now be delivered and it will also unlock those funds. So in the vault itself, those funds in the case of say the order is one eth, once it gets the okay that the item has been delivered, it will unlock those funds, in this case one eth from that store, and now the store has full access to those funds. Thanks everyone for checking out the Vernari protocol.
00:04:41.990 - 00:05:09.900, Speaker A: I hope you found the deep dive into how we are using Chainlink functions. Interesting, and I hope it sparked some ideas for your projects. We're going to hopefully look to use Chainlink functions in the future through more aggregated ways of using our delivery services and seeing how far we can push the bounds on off chain computation. Close.
