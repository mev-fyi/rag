00:00:43.830 - 00:01:19.590, Speaker A: Hello, hello. Welcome to our last workshop of the first week of the Chainlink hackathon. What a wild week. So far we've gone through a ton of stuff literally from this is solidity, this is a blockchain, to building custom external adapters, to building our own local chainlink node, to building and deploying an NFT right on the Opensea marketplace, to testing our smart contracts, being able to actually test locally without having to use the testnet test network using Mox. What an insane week so far. Hello. Welcome everybody.
00:01:19.590 - 00:01:41.390, Speaker A: I'm seeing a couple of people in the chat. Welcome, welcome. Yeah, a lot of awesome stuff going on. I'm very active in the discord. I'm watching all the conversations happening right now. You guys have been asking great questions, really looking forward to seeing what everybody's building. People are building some really cool stuff and it sounds like people are learning, people are growing, which is exactly what we'd like to see from these hackathons.
00:01:41.390 - 00:02:28.886, Speaker A: 433 how's everyone doing on this first week? Almost like I want to have a vibe session with people where we just kind of chat, talk about ideas, talk about crypto, the industry chain link what people are building and just have like a developer wrap session. Curious how people are kind of doing here, but yeah, we're going to be working on something really cool today, letting a couple more people trickle in. A couple more people trickle in. How are we doing in the chat? How are we doing on this first week? How are we doing on Friday, end of week one of the hackathon? How are we doing? How's everybody doing? We're doing well. I hope we're doing well. I'm looking at the chat. I'm looking at the chat.
00:02:28.886 - 00:02:51.922, Speaker A: How are we doing? Chat. Are we building? Are we vibing? My chat's on a delay so I might not get it right away. Like two minutes in they're going to be like, yeah, we're doing great, or no, we're doing terrible. End the stream. How are we doing? I hope we're doing well. From what I've been seeing in the chat, people are doing well. People are building really cool stuff.
00:02:51.922 - 00:03:09.290, Speaker A: They're working on cool projects. I've had people ask me some really interesting questions and today we are going to do some really interesting stuff. We're going to be working with external adapters and actually, you know what? Let's just jump into it. Let's jump into it. Now. The comments are rolling in. Alive.
00:03:09.290 - 00:03:21.500, Speaker A: Alive. Awesome. Learning so much. Awesome. Not as productive as I want it to be. It's okay. You know what, hopefully we figure out why.
00:03:21.500 - 00:03:33.314, Speaker A: Reach out. Don't be afraid to reach out. I know. Actually, I know you in particular, you have been asking questions, which is great. You've been attending these, which is great. So sometimes learning these takes a couple more times. Doing great.
00:03:33.314 - 00:04:08.554, Speaker A: Great hackathon, awesome. Well, I appreciate the feedback, but, yeah, if you're struggling a little bit, that's totally okay. Definitely jump in the discord. Definitely ask for help and learn and grow because that's what we're all here for. So if we're not feeling super productive or maybe there isn't enough time, don't worry, it's all part of the process. So like I said, we're going to be working on external adapters today, or external tasks. These are the pieces that take your chainlink node from being able to kind of do stuff, deliver APIs to being able to do whatever you want them to do.
00:04:08.554 - 00:04:25.218, Speaker A: Right. This is the piece that takes you from. Okay, I'm going to deliver this data to being able to do, I'm going to do this crazy back end computation. I'm going to connect to something crazy. I'm going to do something crazy. I'm going to do whatever I want to do. This is that unlimited customization of your smart contract application.
00:04:25.218 - 00:04:58.558, Speaker A: So we're going to learn how to do that here and let's jump into it. So I keep doing this? Oh, no, that is right. Oh no, I broke it. Sorry, guys. I it, sorry. I guess that works. Okay, cool.
00:04:58.558 - 00:05:18.462, Speaker A: Let me just adjust the dimensions here. Sorry, guys. Great. How's that look? Is that better? That's better. Okay, cool. So here's what we're doing. We're working on an external adapter.
00:05:18.462 - 00:06:02.722, Speaker A: Okay. And the prerequisites for this workshop are you have to have your local chain link node up or a chain link node doesn't have to be local, but it has to be a chain link node that is up. So I was messing with it before this. I changed some stuff. So we're actually going to even just really quickly do the fulfillment requests because I messed up a bunch of stuff, remember? So if you didn't go to the workshop where we actually went over running a chain link node and actually getting one spun up, definitely want to go do that. Definitely want to go check that out. But we're going to do kind of a quick half that right here.
00:06:02.722 - 00:06:33.302, Speaker A: And if you're watching this later, feel free to skip ahead. We're going to deploy our oracle contract again, right? So that we can actually send requests to it. So here's our address. And actually we could probably even skip this part. We probably don't even need to do this, but I'm going to go ahead and do it anyways. I've done this so many times, I can just rip around, copy this. Set our fulfillment permission.
00:06:33.302 - 00:06:56.162, Speaker A: Boom, boom, comma true. We got a brand new node here. Brand new node permission. Sure. Set fulfillment permission to true twice, why not? Who cares? Send it a little bit of ETH as well. A little bit of coven ETH. Do 0.5
00:06:56.162 - 00:07:25.590, Speaker A: coven ETH. So confirm, confirmed, all set up. Awesome. So we have our brand new chain link node here. Now what can this do? What can this do? This can add jobs, we can do requests, we can do whatever we want. But let's say we want to do something a little bit more interesting. There's been a lot of talk about weather, there's been a lot of talk about getting different data, doing different computation.
00:07:25.590 - 00:08:21.242, Speaker A: Now if we look at the documentation here, docs chain link, and then it looks like I'll leave that up just in case. If we look at the, of the simplest example is doing this get API call, right? So we make this API call to this endpoint, we return it and boom, this is in the solidity. However, what we can do is we can make an existing job request. We can call it a node that has all the information about what is going to be happening already. So if you look at this job, for example, it calls request Ethereum price and it passes the city. But you see it doesn't pass an API call, right? This function isn't passing an API call because the API call is defined within the job itself. That's why when we choose our jobs, we need to choose our jobs very specifically.
00:08:21.242 - 00:09:03.718, Speaker A: So there's a question here. I used to program cobalt on many computers in the use the HP 3000 command line language. It's time to learn solidity. Actually, I don't know if we have any cobalt examples, but I think if you follow along these tutorials, I mean, you're going to have some really stellar fundamentals and hopefully be a shoe in here. But anyways, so this job, for example, it doesn't have an API here. It's not explaining how to get an API. So what we can do is we can actually run our own API.
00:09:03.718 - 00:09:40.280, Speaker A: Let me make this even a little bit bigger. We can run our own API, have that API, do certain stuff, and have a return like that. So this is our chainlink external adapter node Js template so this is a template that you can clone from the web to get started building an external adapter. And again, we can do chainlink, ea template, GitHub. If you google it, it should show up. Boom. Thomas Hodges doing awesome stuff.
00:09:40.280 - 00:10:00.746, Speaker A: Here's the template. You just do git clone on it. Boom. And you can start going. If you ever get lost, you can come back to this. But what we're going to be doing with this is we're going to be adding it to a job here, right? We're going to be adding a new job and we're going to be adding it as a bridge. And you'll see what that means in a little bit.
00:10:00.746 - 00:10:31.926, Speaker A: And it'll allow us to define a job that we don't really need to define a whole lot of parameters. Right. This one, the example is they define a city, but we don't need to define a whole lot of parameters because our node actually does it. So if we go ahead and I'll show you what this is going to be doing. Sorry, I have this already running. I'm going to show you what this kind of looks like. So I've done git clone here, git cloned it, then I've yarned it.
00:10:31.926 - 00:11:02.162, Speaker A: So I've installed all the packages and I just do yarn start. And this is just an API. All this is an API. So what I can do now in his second terminal is I can curl it and then I have like a curl here. And I think the example that I'm using is actually rate limited. Again, I'm pretty sure we're going to get an error back, but we'll try it anyways. We're going to use a different example.
00:11:02.162 - 00:11:43.402, Speaker A: So, yeah, so we get this error back, but this is what we did for, we basically called that API and got that response. So this obviously is this error response. Sorry. This is this open weather, excuse me, not open weather. This is this error response that we got from the API because it says, hey, you hit this threshold. So what are you doing? Don't do that. So we're actually going to rebuild this adapter, this external adapter to use a different API anyways.
00:11:43.402 - 00:12:19.734, Speaker A: Right. So we're going to show you how to build it end to end using kind of this template, where to go and to get weather data into your chainlink node. So this is the template that we're going to be working. That's going to be the final result. If you ever get lost or you want to see what the end result looks like, you can go ahead and check this out and go here. So let's go ahead and look at the code and see what's going on. Here is the package.
00:12:19.734 - 00:12:39.946, Speaker A: Like I said, we've already get cloned it, so everything's already in here. We have a lot of different stuff really the main things we need to focus on. And by the main things, I mean main thing is this index Js. This is where all our code is. Yarn lock. The rest of this stuff you can kind of ignore app Js. This is what's happening kind of behind the scenes.
00:12:39.946 - 00:13:12.410, Speaker A: This is a really simple express server. So an external adapter is just an API, right. It's just a server that we've written. It doesn't have to be anything incredibly complicated, but everything that we're going to be focusing on is in here. And there's even some comments in here to kind of help us figure out what we want to do. So let's jump into it. So what are these pieces? So this stuff at the top const requester validator.
00:13:12.410 - 00:13:36.098, Speaker A: We can leave these where they are. We need these to make a request to the API that we want to call and validate the API stuff. So we can leave this alone. We can leave this alone too. We're not going to be working with any custom errors. Let's just, again, you know, you guys will see how this all works. If you guys are watching this later, feel free to skip to the end, but you guys will see in a second.
00:13:36.098 - 00:14:03.980, Speaker A: So custom parameters, right? When we make a call to our node, we add parameters, right? For example, in this one we're adding the city request add city. Oh yeah. And this is another one that's doing the weather data. So this is what we're going to be looking for. We want to add the city to get the weather of that city. So that should be one of our custom parameters, right? So let's add that as a custom parameter. We'll add city.
00:14:03.980 - 00:14:38.422, Speaker A: And what's in here is like what else we can call instead of city. So we'll say, hey, Q also is going to mean city. City is also going to mean city and town is going to mean city. And actually, you know what, I should have showed you guys what the API is that we're going to be pulling from that probably is important. I probably should show you that. So let's do that. So here's the API that we're going to be calling from.
00:14:38.422 - 00:15:12.206, Speaker A: It's open weather map and it has this API we can use to get current weather data, right? And if we look at the API doc. We can see what the API call is going to look like. So we can call, we can get the weather for a certain city using our API keys. And this is another thing that we can do with these external depths is we can actually pass API keys so that they can call this external weather. Okay, so this is the API that we're going to be working with. We're beginning weather data here. So let's go ahead, let's go back.
00:15:12.206 - 00:15:34.422, Speaker A: Sorry, I know I'm jumping all over the place. If anybody has questions, feel free to ask away. And I will be monitoring the chat. So I know I'm going to be bouncing around a lot anyways. So those are going to be the parameters. It's going to be town. And we even saw from here it's really going to be city and API key.
00:15:34.422 - 00:15:55.678, Speaker A: We'll get to API key in a second. City is really the one that is the user in the smart contracts it's going to define. So great custom parameters are going to be city. We don't even need this. Do we need this? We don't even need this, just city. Next is this create request. So this is what gets called.
00:15:55.678 - 00:16:15.062, Speaker A: Whenever we hit this API that's running, this is what gets called. So it's going to have a callback function that's going to work. We're going to send back to the server. Don't worry about that for now. So validator, this validates our input data. So we can leave this alone. The job run ID.
00:16:15.062 - 00:16:38.750, Speaker A: We can leave this alone. Every chainlink node needs a job run Id. We head over to the chainlink docs again, sorry, I know I'm bouncing around a lot. Head over to the chainlink docs again. Go to the external adapters section. We can read a little bit more about what they need. Right.
00:16:38.750 - 00:17:08.290, Speaker A: This is what an external adapter needs to respond with or excuse me, needs to request. It needs an ID and needs data and it'll respond with something like this. So we need our job run ID. Actually, okay, we should leave that endpoint in just in case we want to do something else. We'll leave endpoint in. Endpoint is going to not be price, it's going to be weather. Our default endpoint is going to be weather.
00:17:08.290 - 00:18:15.690, Speaker A: Because if we look back at this we see, okay, here's the base URL and weather is the endpoint. Okay, so our endpoint is going to be weather here. Our base URL is going to be what we just saw right here. It's going to be this API for base URL. Actually we got to put the HTTPs and stuff in there. Base URL is going to be this and we need our const queue or city or whatever this is going to be validator, validated data city to uppercase. Our validator just checks to see that the input parameters are good.
00:18:15.690 - 00:18:52.070, Speaker A: So we're going to say hey, we're going to get the validated city parameter that we sent and we're just going to set it to uppercase. So we're going to be looking at like Boston. So if we send it like Boston we're going to get Boston. We're going to be looking for Boston. Now the other thing that we're going to need is we're going to need our API key or our app ID, right. So we're going to actually set this as an environment variable. So process envi key and then I'm just going to double check to make sure I have that.
00:18:52.070 - 00:19:37.094, Speaker A: Where can we get this, where can we get our API key so we can do subscribe, get API key and then create a new user account? I'm not going to do that. I'm going to use the key that I already have. Just give me 1 second. Make sure I have it. Make sure I have the correct one in here. Sorry guys, 1 second. I don't have the correct one in here.
00:19:37.094 - 00:20:14.482, Speaker A: So we're going to make a new user account real quick. We're going to call it Devrel test and we're going to do an email. How quickly is this going to stairs? Yeah sure. I'm not a robot, I'm 16. I agreed. We're going to pause this real quick just so I can do a quick email. It, it, just sign it up here.
00:20:14.482 - 00:20:46.810, Speaker A: Sorry guys, what am I doing this for? I'm doing this for tech or other save, we're going to save that for other. Please check your email. So I got to check on my email real quick. I will unblock the screen. Thank you. Verify. All right, cool.
00:20:46.810 - 00:20:58.366, Speaker A: Your email has been successfully verified. Awesome. Okay, cool. Now I'm in. So you guys got to see me do that. And now we have an API key. Let's jump back now.
00:20:58.366 - 00:21:44.000, Speaker A: It's like hey, look at all your emails. So we can set this by running like export API key, but we could also just hard code it in here if we wanted to just do this. But what's a really nice way to do, if you guys are familiar with like env stuff, we've talked a little bit about that before. You kind of want to use env for the purpose of this demo, just to, in the interest of time, we're just going to do it like this. Our API key is right here and we need this because we need that for the endpoint. So great question actually, can we use the oracle to offload computation? Absolutely right. And we can see that in here.
00:21:44.000 - 00:22:15.714, Speaker A: We can use this external adapter to do anything that we want. Right. So we're going to be using it to call an open weather API, but if you wanted to use it to do a ton of math or something, you absolutely could. Right. And then you'd use an oracle network to do that offloaded computation in a decentralized manner so that you're sure that it's trustless and that it can be trusted. Absolutely. And we're seeing more and more use cases of people looking to do that, which is really fantastic.
00:22:15.714 - 00:22:50.466, Speaker A: So great question. Anyways, so the params that we're going to be passing back are going to be this queue or this city and it's going to be this app ID. Those are going to be the params that we're passing back config. The requester uses Axios, so if you're familiar with JavaScript, this is going to be Axios. So we need to pass it the URL and the params. We don't have a header, this is going to be a get call. So we don't need to do like a method equals post.
00:22:50.466 - 00:23:23.886, Speaker A: We don't need to do that. This is a simple get call. So all we need to do is pass the URL and the parameters. Then we can scroll down a little bit and this is where we actually make the request. So in here we've defined the request, we've given it an endpoint, we've given it an API key. Now we actually need to make the request here. So the request is going to be sent with the config and we want to get a result.
00:23:23.886 - 00:24:22.900, Speaker A: We want to get an answer, right. It's common practice. Store the desired result at the top level result key. So in the response data we're actually going to grab the main and let's even, let's even show what that looks like. What does the response of this even look like? So if we take this, go back to here, we look at this API, we look at what is this API doing? Let's go to the API doc again, this is what we're looking for. So if I do that it's going to freak out actually, but we're going to grab this last part and we're just going to swap it out for our stuff and we're going to see what it would respond with. So let's say Q equals city name Boston, and then we just grab our new API key that we just made.
00:24:22.900 - 00:25:23.302, Speaker A: Unless that API key is bad, let's double check to make sure our API key is any good. Subscribe, get API key. API keys. That looks right to me. It. Oh, what am I doing wrong here, guys? Put the wrong API key in. We got to generate one test, got a new API key, accumulate the total.
00:25:23.302 - 00:25:51.722, Speaker A: Oh, wait, that's right. This is the one that takes a while to respond. Sorry, I forgot about that. I have an old weather key lying around. Or we could switch APIs. We could switch APIs in the fly. Let's just hope that by the time we get through the rest of the demo that the API key comes online.
00:25:51.722 - 00:26:23.942, Speaker A: Yeah, I forgot there's like, for the open weather API, there's usually a good 20 minutes waiting period for the API key to actually go live. Kind of annoying, but we'll go with it for now. So, response data result. I know that the response looks like this. It looks like weather temp. So that's what we're going to be looking for. And this is going to get us the temperature of that API so the rest of this can stay exactly the same.
00:26:23.942 - 00:26:45.550, Speaker A: And we're going to call back this response to the front end here. So clear. Since we know that the API actually isn't really working right now because the key needs to come online. Again, apologies. There. We can go ahead and just move on to the next piece. Right, which is going to actually be adding this to our node.
00:26:45.550 - 00:27:28.826, Speaker A: So what do we want to do? How do we actually add this to our node? Well, there's a couple of different ways we could do it, but we're just going to be leaving this running clear. Going to be leaving this running with yarn start. Right. And we can hit it by doing a curl to it, by calling it, by calling localhost. Again, if we go to the readMe, we can see this is what a curl looks like. So it's going to be calling this local host. And since our chain link node is running locally, we'll be able to hit this and we'll be able to pass some different parameters here.
00:27:28.826 - 00:28:17.934, Speaker A: Although the parameters are going to be different, it's going to be Q, it's going to be Boston. This is what it's going to look like, and this is how we're going to call it on the node side as well. So we can actually add this, we can add this to our node by just going to this bridge section. By going to this bridge section. So in this section here, what we can do is we can call it weather chain link external adapter. And this is just going to be not that port, what port is it going to be on? It is going to be eight. It's going to be right here.
00:28:17.934 - 00:29:01.660, Speaker A: So we're going to have an adapter that's called weather chain link external adapter and it's just going to call this API. That's it, right? Or it's unauthorized. Do I need to log back in? I need to log back in. Okay, now we're logged back in. So great bridge, great. So now we have a new adapter called Weather Chainlink external adapter. And now remember how when we first created a first created job, right, we scrolled down here, we went to this, we were like, okay, let's grab this job.
00:29:01.660 - 00:29:25.490, Speaker A: And then we popped it into here, created a new job, went like this. We have all these adapters right now. We actually have a new adapter. This one that we just made is now also an adapter. We can go like this, boom. And this is a valid job. And what this adapter is going to do is just going to call that API endpoint.
00:29:25.490 - 00:29:57.014, Speaker A: So this is what we want to do for this job here. So we're going to get rid of multiply, we're going to leave, or actually we're going to get rid of a whole bunch of stuff because we want to test to see that this is working first. Let's even get rid of json parse. Boom, get rid of everything. So what we can do is we can change this to a web job. We can get rid of the parameters and call this weather. So this is about as simple as you can get for chainlink jobs.
00:29:57.014 - 00:30:34.862, Speaker A: So it's going to be initiated by the web. You'll see what that means in a second. And it only has one task just to call that API that we just created. So if we hit create job, it says invalid Json, but now it's valid. We have this new job and this is all it does. And ready. If I pull up my vs code and I pull this to the top and we come back over here, we run, run, this job is going to fail because we didn't give it any parameters.
00:30:34.862 - 00:31:12.834, Speaker A: But we'll see here, we had a call, right? It actually called here we get these adapter errors. This adapter error parameter not supplied city right. So we are hitting this endpoint. So this isn't a great job. Let's duplicate it and let's add some parameters. So now we can do rams, we'll do Q or city or whatever you want to do. We'll do Boston, adding a parameter.
00:31:12.834 - 00:31:38.266, Speaker A: Now we're saying, hey, call this from Boston. And now let's run it in progress. Interesting. It looks like the API key finally worked. So now we run Boston and we actually get a response here because our API key finally kicked in. So we get a response from the API saying the main temperature is 277.83. And I think this is in.
00:31:38.266 - 00:32:30.202, Speaker A: Calvin could be wrong because if it's 277 degrees out there and they're in Boston, we're burning up. It's secretly the inferno. But we can see this is how we can kind of test our external adapters on our node. So this external adapter is going to call that API and get this result back. So I know I've kind of bounced around. We've gone over a lot of stuff, but are there any questions so far with what we've talked about? I know I kind of bounced around like I said, but we just called an API that we created through our chainlink node through an external adapter that we created. Now, if your brains are kind of, if the gears are turning correctly, right, you'll be like, oh, okay, great, then I can just add this to a regular job spec and have my smart contract call it.
00:32:30.202 - 00:32:54.358, Speaker A: Well, you are exactly correct. So I'm coming back to the comments here just so that we can all get up to speed and going to answer some questions. Seemed like this would be a great tool. I don't know about that. That's not really a question related to this. Took time off for this hackathon. Awesome.
00:32:54.358 - 00:33:36.900, Speaker A: Love to see it. This is hot stuff. Yes, it is. I 100% agree. This is like the ultimate. If you want to make your smart contract do anything, this is it, right? If we wanted this, we could change the code in here to be like, send API call to send rockets to the moon or do quantum calculations or pay taxes, like whatever. We could have this do anything and our smart contract is going to be calling it, which is really cool.
00:33:36.900 - 00:33:54.374, Speaker A: Yeah, agreed. Look at it go. Just got here. Awesome. Can you explain link costs for similar calls? Yeah, so it's going to be the same. It's going to be the same as an API call. Right.
00:33:54.374 - 00:34:19.726, Speaker A: So in the docs here we have making a get request for making one of these external adapter calls. It's going to be literally the exact same thing as this, right? Exact same thing. How many adapters can we have per bridge? Well, let's go to bridges. New bridge. You can create a ton of bridges. You can only have one adapter per bridge. I don't know why you'd want to have that.
00:34:19.726 - 00:34:36.502, Speaker A: Wouldn't make sense to have multiple adapters per bridge. So, like, if I added something here, I don't think this will work. Oh, no. Okay, great. So this is my bridge and this is the API that it calls, obviously. Is this actually a website? Let's find out. No, it's not cool.
00:34:36.502 - 00:35:20.162, Speaker A: I didn't get spammed with some terrible site, but cool. So our API is working and it's responding accurately. And actually now we can really see what it should respond with if we copy paste this and then we grab our API key that we just created. I'm glad it actually kind of went quickly. There have been times when I've had to wait a long time. Now we can see what the response actually looks like in our browser here. So we get the weather, the coordination, we get all this data about weather that we can use in our smart contracts now.
00:35:20.162 - 00:35:48.330, Speaker A: So how do we put this all together though? Right? Okay, cool. I see you, Patrick. You did some fancy stuff in node Js and you put it on a bridge and you added a web job. I get it. How do I get my smart contracts to do that? Okay, well, perfect. So our node has some ETH, right? We now have this new adapter. So now we need to make a new job using this adapter.
00:35:48.330 - 00:36:33.660, Speaker A: Okay, so let's duplicate this job. So now instead of a web job, let's go back to run log. Run logs are the jobs, are the types of initiators that respond to these requests that we made on chain. So let's do a run log job, and I'm even going to just go back to fulfilling requests so I can grab the kind of baseline job spec here, right? I'm going to grab this job spec and I'm just going to paste it below for reference. So let's make a job that we can call that's actually going to respond with the weather on our smart contract. So I'm going to call this weather job real. That's a terrible name, but we're going to go with it.
00:36:33.660 - 00:37:04.882, Speaker A: So we need it to be a run log job, which we're going to do. And we need to add the params of our oracle contract address. Again, if you haven't watched the video on running a local chain link node. You should watch that because that's going to show us what all this stuff that we're doing here is. Again, I left mine up because like just did a whole bunch of stuff at the beginning of this video. And this is our oracle contract address. So now let's add the rest of the tasks.
00:37:04.882 - 00:37:26.774, Speaker A: So this is going to be our main task right here. Then we're going to need to add a json parse. It's actually going to be a copy. It's going to be a copy adapter. Why? Well, again, we don't want all this stuff. We just want the temperature. We just want the temperature.
00:37:26.774 - 00:37:42.994, Speaker A: And then let's just open sec in calvin is what? In F. In Fahrenheit? 277. Calvin to fahrenheit. Calculateme.com. It's 40 degrees outside. That sounds about right. So we want just this.
00:37:42.994 - 00:38:05.286, Speaker A: We don't want the rest of this stuff. So we need an adapter. And again, if we go to dockstep link, go to our adapters, the core adapters, not the external adapters. Copy, copy. Adapter is needed for external adapters here. Okay. And then here's what a sample in the job strike is going to look like.
00:38:05.286 - 00:38:39.682, Speaker A: And that's what we're going to do in our job strike here. So we're going to have it be copy comma, we can even reference this back. So we need it to be a copy path. Excuse me, params copy path. And our external adapter actually is going to put everything under result. We go back here, we can actually see the response of our external adapter and it puts it under result. And you can see that we actually do that right here.
00:38:39.682 - 00:39:08.294, Speaker A: Response data result. We're actually setting the result to that main temperature, right. So our external adapter is already walking the path for us and just putting the data into result. So we're going to put it in result here. Great. Hopefully this, is that the right comma copy. This is the right comma.
00:39:08.294 - 00:39:30.738, Speaker A: Well, we're going to find out sooner or later. We need a copy. We do need to multiply, right? Because 277.88 or whatever, it's going to freak it out. So multiply. We can always double check here if we're like, wait, how do we do this? Actually, it's not in here. We should add it in.
00:39:30.738 - 00:40:26.450, Speaker A: There's params. Params of multiply are going to be times and we'll do that. That's probably overkill. But then we want to turn this number into an SU in 256 and then we want to make the transaction copy paste. So this looks ugly, but let's talk about it in just a second. Once I delete all this stuff, here's our job. Okay? So it gets triggered by run log at this oracle contract address.
00:40:26.450 - 00:41:12.984, Speaker A: First task it does is it calls our external adapter that we just created with Boston. So we're not giving it the choice to set our own city. But if you see here in this example, they do allow you to set your own city. We would just get rid of this parameter to allow people to set their own city. Then we're going to take the response from this, pipe it into this next one where we're going to say we just want the result, which is going to be that 277.88 or whatever it was, and we're going to take that and we're going to pipe it into multiply, multiply it by this, so it'll be this massive 277, whatever. Then we're going to take that and we're going to turn that number into a number that makes sense to Ethereum.
00:41:12.984 - 00:41:57.470, Speaker A: This Fu and 256 adapter says, give me that number, I'm going to make it make sense and then we're going to make the transaction back to the Ethereum chain. So let's try this for real. What do you guys say? So I'm just going to cheat a little bit. I'm going to grab this, I'm going to grab this code here, which already has most of what I want. Right? Again, you can call this and it'll call like a COVID oracle, but we want it to call our oracle. So what do we need? We need the address. Okay, well, I have so many tabs open now.
00:41:57.470 - 00:42:32.224, Speaker A: We want to call our oracle, which is right here, our oracle contract boom. And I think this isn't checked some, so it'll probably error, but we'll do that a second. We want it to call our weather job boom. And we don't need to do city for this one. And is result a unit 256 result is. So what we're doing here is we're going to deploy this smart contract which it's going to call our oracle. It's going to call our job our local oracle.
00:42:32.224 - 00:43:12.260, Speaker A: Yes, our oracle is the local one. Our oracle. We're going to call this request Ethereum price, which is a silly name. We're going to call it request weather and we don't need to pass a parameter because again, we've hard coded it on our oracle. It's going to make a chain link request to our job ID. This is a bad name too, but we're going to leave it for now. It's going to send the chain link request to our oracle and it's going to respond and we're going to get the temperature, the weather in Boston in our smart contract, right? Isn't that wild? So, yeah, so the error here is that it's not checksummed.
00:43:12.260 - 00:43:40.184, Speaker A: Let's just check summit real quick. This is like my cheaty checksum way, like paste it into ether scan and boom, we're good to go. And then we can do all the capitals and it's like, oh, okay, now let's check some. Great, so we have this compiled moment of truth, guys. Moment of truth, everybody. We're going to deploy it on COVID. Confirm moment of truth.
00:43:40.184 - 00:44:22.584, Speaker A: Did we do all this live coding? Did we do it right? Remember, we need to send our smart contract some link because it is going to make a request to our node and we set the price on our node to be 0.1 link. Why am I sending it one link? Well, because I'm extra, that's why. Once this goes through, we can request weather data through our chain link, oracle into our smart contract and we're going to hit this. And obviously we're doing this just through one, but we get a group, we get network together. Hold on, wait, I'm not even going to make that point. Let's go to the weather job.
00:44:22.584 - 00:44:30.750, Speaker A: Quick runs. Look at this. Okay, it's starting. It got kicked off correctly. That's great. Let's see if it called our external adapter. Right.
00:44:30.750 - 00:44:43.250, Speaker A: Let's see. We can go to our server. You see that flash? Something happened. Something happened. Let's refresh here. Okay. It called it.
00:44:43.250 - 00:45:15.340, Speaker A: Okay, let's see. It flashed really quickly. So it's pending outgoing confirmations. This means it's actually made the Ethereum transaction back and it's just waiting for the third confirmation to finish. And once this finishes, we'll be able to see this result should be the temperature in Calvin of Boston. So it says it's all good, let's hit it. And we've done it.
00:45:15.340 - 00:46:12.028, Speaker A: So we have just created our own external adapter, our own API, our own endpoint for our smart contracts to reach out to and return to get data into our smart contracts. So I know I bounced around a little bit here, guys, but we just did something crazy, right? And so, yes, we are just getting data through a single node, right? And so this is bad. What we want to do is we want to connect with a whole bunch of other nodes who are also going to be delivering this data, also deliver this custom data. They can use our external adapter, they can use whatever they want to use. They can make their own external adapters that gets the data and then we'll aggregate that data so that we can get decentralized data on chain. For proof of concepts though, this is great, right? If you guys are like, oh, I don't have time to build a whole decentralized network for the hackathon. Well, don't build a proof of concept, say, hey, this is what we want to do, here's how it works.
00:46:12.028 - 00:46:39.732, Speaker A: And then just send it, right, submit it to the hackathon and that's going to be awesome. And then all you need to do is just get a couple of other nodes to run it and you can do whatever you want. So really powerful stuff that we just did, right. And I hope this was simple to follow. I know I had kind of the issues with the keys there for a little bit. Hope this was simple to follow. But if you follow the template, there's not that much legwork that you have to do.
00:46:39.732 - 00:47:03.404, Speaker A: You just switch out the APIs, do whatever you want to do. And the other thing is too, you don't even have to call this API, right. You could have your external adapter be like return, like I said, return the number seven. You'd have this external adapter like that's all it does. That'd be a stupid external adapter. But you could do that. You could have it do whatever you want.
00:47:03.404 - 00:47:35.896, Speaker A: Somebody asked about computation. Yes, absolutely. You can do computation, right? You can have an API that hits computation. I recently made an IPFs, who's the sponsor of this? A chainlink external adapter. IPFS chain link. Let's see if this shows up. IPFs chainlink external adapter so that I could store data send and get data from an IPFs node so I could store decentralized data and not have to store everything on chain, right? So this is a lot of fun to build.
00:47:35.896 - 00:48:08.916, Speaker A: If you guys are looking to use IPFs in this and not spend like a million dollars on gas. Definitely check this out. It was a lot of fun to make IPFs and protocols is really cool stuff. So I hope you guys are as blown away as me by how smoothly the end of this demo went, actually. So are there any other questions? Yes, our node is the local one. So are there any other questions or do you guys want to see something again? Are you like, wait, you kind of skipped over that. Patrick, can you go back.
00:48:08.916 - 00:48:34.590, Speaker A: Can you check that out? Can we use smart contracts outside of. Can smart contracts outside of ETH use this? Yes, absolutely. Avalanche is a sponsor of this hackathon. You can absolutely use avalanche. You can absolutely use these external adapters on avalanche. It's going to be the exact same thing. You're just going to switch out your ETH client to being the avalanche client on your chainlink node? That's it.
00:48:34.590 - 00:48:55.680, Speaker A: Good question. That's exciting. Yo, it's alive. Very cool. What happened to the token you sent our node? Aha. I'm assuming you're talking about the link token. So if you see here, you see plus 0.1
00:48:55.680 - 00:49:21.512, Speaker A: link. So in our chain link node, and this is the chain link node that's running, it's just kind of like the super raw way to run it. We set in the env, we set the minimum, and actually we can even see that here, we set the minimum contract payment to be 0.1 link. So when we made that call, it cost 0.1 link. We can actually even make it again.
00:49:21.512 - 00:49:54.644, Speaker A: Let's go back to remix. Let's request weather data again. Since it's funded with Link, it should go through. We'll come back to the node, we'll go to runs, we'll see created just now. Once this goes through, we'll get another point, one link. Right? And if we go back to this contract and we do COVID ether scan, we look for this contract, we'll see has 0.9 link and it's probably about to have 0.8
00:49:54.644 - 00:50:04.120, Speaker A: link. Right. Because there might be a pending transaction or it's already out. So this might be 0.8 link. This is 0.8 link now, because now that link is in our node.
00:50:04.120 - 00:50:30.384, Speaker A: So if we go back to keys here, if we grab this, we see the ETH balance. Let's see what the link balance is. So this is our nodes wallet's address. Excuse me. It went to our Oracle contract. Sorry, not our node. If we go to our Oracle contracts address right here, it should have 0.2
00:50:30.384 - 00:50:39.760, Speaker A: link in here. Boom. From those two transactions. Right. So that's how we got paid there. And there's a withdrawal link function. That's how you get it out of the Oracle contract.
00:50:39.760 - 00:51:22.288, Speaker A: And again, it looks like we just updated, but there's not an update to the temperature here. But yeah, we have two successful runs of requesting weather data from that API that we just created. So good question. That's what happens to the token. So the contract still has link in it because we didn't use all the link and ethereum in our node is still there and it needs this so it can make the transactions back to the blockchain, back to whatever blockchain that we're working on. Like I said, I know we bounced around a lot. I know we talked about a lot of different stuff.
00:51:22.288 - 00:51:44.824, Speaker A: We actually have another video that goes over this as well, like building and using chainlink x all adapters. Look at my spelling though. YouTube. So if you guys want to see another video that goes over this as well. How's the quality? Oh God. Oh man. The quality there.
00:51:44.824 - 00:52:00.696, Speaker A: We really leveled up. We really stepped this up. Look at this quality. Somebody told me I needed to wear makeup on these because the quality is too good. But yeah, if you want to check out that video, that video also goes over this as well if you are having a hard time following this. But yeah. Any other questions, guys? Like I said, these are meant to be interactive.
00:52:00.696 - 00:52:14.672, Speaker A: These are meant for us. These are meant to give you guys ideas. What are some ideas that you guys are like, oh wow, that's cool. Here's what I want to do. Feel free to flood the comments. It's Friday. I'm probably going to pop into the discord after this and chat with some people.
00:52:14.672 - 00:52:42.440, Speaker A: It's Friday, we're laid back. What are the thoughts? What are comments? Questions? Was everyone like, yes, this was super easy. This is no problem. I had no problem following along. Patrick, your tutorials are so good. Any comments? Any thoughts? Questions? And I'm actually going to go right to the YouTube because right to the YouTube because sometimes the comments. Strolling a little slow.
00:52:42.440 - 00:53:17.990, Speaker A: Yeah. So that's what happens to the tokens. Well, cool. Well, we'll give it a couple of minutes for any other questions to roll in. We'll give it a couple of questions for any couple of minutes for any questions to roll in. Hope you guys all had a fantastic week one of the hackathon. Absolutely fantastic week one.
00:53:17.990 - 00:53:37.596, Speaker A: Aha. Okay, questions rolling in. Do you use obs for. Yes, yes I do. I love it. It's great. I would like to create an NFT bid system with this technology.
00:53:37.596 - 00:53:52.252, Speaker A: This is amazing. Easy to grasp. And after three years off blockchain it's the wild west, then. Well, I hope it is easy to grasp. NFT bid system would be very cool. Easy for node Js server dev. Yep.
00:53:52.252 - 00:54:05.904, Speaker A: Yeah, exactly. So there's also a Python example if you guys want to see Python. It's pretty much the same thing. Python chainlink ea template. But really at the end of the day. It's just a server. It's just an API server.
00:54:05.904 - 00:54:32.584, Speaker A: So if you're used to using some other server technology, you can absolutely use that as well. I've done some stuff with go that's really simple, some stuff with JavaScript like we just saw here. I actually really like go goes really fast. So it's just a server python. Oh, we have more python piece. Yeah, I love Python. Winston, if you haven't checked it out already, check out Brownie.
00:54:32.584 - 00:55:12.152, Speaker A: Absolutely love brownie. Francesco, how to start building in blockchain? Go to the tutorials that we gave at the beginning of this week. Watch those and go from there. Oh, I love it. Yeah, definitely check out Brownie. It's a development framework for smart contract development and deployment framework for solidity. And yeah, I mean, you can do all this in python, right? You can run a Python server, you can run a Django server, whatever you want to do, have that be your APIs.
00:55:12.152 - 00:55:43.956, Speaker A: Literally flask whatever you want to do. Whatever you want to do. Are there rust contract samples? You know about integrating external adapters? I personally don't. There's a couple users who've done some stuff with Polkadot and Rust, which is really cool. And also Solana and Rust. I don't know that much about them, but definitely reach out to get connected. Isn't a lot of chainlink written in go? Yes, a lot of chainlink is written in go.
00:55:43.956 - 00:55:55.384, Speaker A: Go is a great language. Very fun language. A lot of Ethereum is written in go, like geth. Most popular Ethereum client. Solana. Yep. Yeah.
00:55:55.384 - 00:56:16.124, Speaker A: Solana for sure. For sure. Any other questions? Sounds like you guys get it very easy for node Js dev. Great. Perfect. Hopefully the job specs make sense there too. If those don't make sense, let me know.
00:56:16.124 - 00:56:39.124, Speaker A: I kind of rushed through that part, which I didn't need to because we had great time wise. All right, all well, if there are no more questions, thank you everybody, so much for coming. I hope you guys learned a lot here. I know we went through a lot this week. There's been a lot of blockchain knowledge. There's been a lot of really cool stuff people have been talking about. People have been building.
00:56:39.124 - 00:57:03.310, Speaker A: Really excited for next week. Next week we are doing one more workshop with myself. We have a ton of other workshops with sponsors. Just one more workshop with me, which we're going to do a full end to end application in the Defi realm. So we're going to do front end as well. We're going to be using truffle on the back end. If you guys want more information on hardhead or brownie, definitely reach out as well.
00:57:03.310 - 00:57:28.708, Speaker A: Like I said, I love brownie. Hardhead. I also really like absolutely fantastic framework. We're probably going to have another special workshop that you'll have to stay tuned for in the discord to see who's going to be jumping on that. And with that, thanks, everybody, so much for joining. Have a lovely weekend. Really excited to keep seeing people build.
00:57:28.708 - 00:57:32.960, Speaker A: And we'll talk to you guys soon. All right, thanks. Bye.
