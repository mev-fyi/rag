00:00:04.450 - 00:00:26.526, Speaker A: Hello everyone. Here we are. Today the idea is build a defy app and most important that build a defy app. Our idea is to show you some concepts related to this. So here we are, me and Harry. Hey.
00:00:26.628 - 00:00:28.160, Speaker B: Hello. Hi everyone.
00:00:28.850 - 00:00:45.380, Speaker A: Hello. And a bit about me. My name is Solo Jigerus. I am a developer advocate here at Chainwink Labs and these are my contacts. And Harry, can you talk about you?
00:00:45.750 - 00:00:58.600, Speaker B: Yeah, sure. My name is Harry Papacarisio. I'm a developer advocate manager at Channing clubs and I'd love to connect with everyone, interact with everyone in the community. So feel free to add me on Twitter at apapas nine nine if you want.
00:00:59.210 - 00:00:59.670, Speaker A: Amazing.
00:00:59.740 - 00:01:02.200, Speaker B: Awesome. So what are we building today? Sol?
00:01:03.230 - 00:01:37.506, Speaker A: Yes, today we are interacting with uniswap v two. This is a basic concept for you, but the idea is to teach you in the same way that we are interacting with Uniswap. You can interact with AV or compound or any other application. And this is the pad. This is our work too. We are working together on this. So are you go out my I.
00:01:37.528 - 00:01:38.900, Speaker B: Shared it in the chat already.
00:01:39.350 - 00:01:45.800, Speaker A: Perfect. And also are you open this for us? Here we are.
00:01:47.370 - 00:01:55.180, Speaker B: Yeah. So we'd love everyone to go into the pad that Sol shared and work together in there. That'd be great.
00:01:58.750 - 00:02:06.720, Speaker A: Yes. Darby, you are so fast. Let's put our naming and country to be sure that we are together here.
00:02:09.330 - 00:02:10.400, Speaker B: Yes, definitely.
00:02:11.410 - 00:02:37.080, Speaker A: And I will be here a bit more. Be sure that the people are going to this place. Let's wait 1 minute. Wow. So I am in Brazil, here in Australia we have some people from USA. We are really around the world. This is amazing.
00:02:37.080 - 00:03:04.970, Speaker A: And remember this is a collaborative path. We can write together and we can delete everything together. So be careful. The idea is not to lose our content. So I think we can start. Like I said before, we are creating some interface to interact with Uniswap. Before we need to think about the requirements.
00:03:04.970 - 00:03:38.198, Speaker A: I hope that everyone have a wallet injected wallet in our browser. Your browser. I'm using metamask already. Install it and our testnet will be gurley. And if you go to your metamask and you didn't see Girly for example, let's see what's happened with my metamask. It's a bit slow here. So I am in Gurley.
00:03:38.198 - 00:04:23.640, Speaker A: But if Gurley didn't appear for you, you must go to this show, write test networks and be sure that this is on to appear the test network. So close the advanced settings and then you can see the test networks and select Gurley. Also you need to have some ethers on Gurley. So let's go to our faucet to get some. This is the chaining faucet. And first of all you need to connect your wallet. My wallet is already connected, but probably you need to connect first.
00:04:23.640 - 00:05:17.290, Speaker A: After connect your wallet you will scroll down and you must log in with Twitter and what we are building today. First we are creating a token, then we will create a liquid pool on uniswap v two. But we are not using the interface. We are creating this by ourselves, using remix, interacting with smart context. And then we can swap a token, the token that we are creating just now. Let's log in with Twitter. I'm authorizing and now I can get some iters.
00:05:17.290 - 00:05:29.694, Speaker A: In fact, I am not using the link token now, but if you'd like to have link tokens you can get as well. And the hardest part for me is verify that I am human. Let's see if I can do this.
00:05:29.892 - 00:05:33.246, Speaker B: Yeah, me too. They seem to get harder and harder every time.
00:05:33.428 - 00:05:40.014, Speaker A: Yes, I think today is not so hard to find.
00:05:40.132 - 00:05:41.440, Speaker B: That's not too bad.
00:05:46.210 - 00:05:50.850, Speaker A: I think it is. So let's send the request.
00:05:50.970 - 00:05:51.640, Speaker B: Success.
00:05:52.730 - 00:06:28.734, Speaker A: Yes, and now you can see that I have a transaction that the faucet is sending link 20 links for me and another transaction sent 0.1 ethers on Gurley. So here we are. We have two transactions to this. In fact I have some Gurley and some link tokens in this wallet. But I will get a bit more to show you how to do this after this. So we are creating a token and like I said before, using remix.
00:06:28.734 - 00:06:59.814, Speaker A: Hey, here we are. Here I have 20 link tokens and here I have 0.1 ethers. Perfect. Let's close this and this and let's use a remix. I'm using remix, the non security version, but you can use both. I have different conflicts in each of them, so don't worry.
00:06:59.814 - 00:07:33.240, Speaker A: Use what's better for you. Here we are, I reload my remix to be sure that we are in the same page. Wait a minute. And first of all we are creating a token. Here we are in remix. You will create a file, call it token, probably I have this. Let's see.
00:07:33.240 - 00:07:51.334, Speaker A: I am in file explorer, and below the default workspace I can see a button to create a new file. I have token. So Tokenone saw, there's a great question.
00:07:51.372 - 00:08:06.510, Speaker B: In the chat, what change should we deploy to? Could you use BNB for this tutorial? So we're deploying to Goyoli for this tutorial. However, everything that we're showing you today, you 100% can do on finance. Smart chain. Correct.
00:08:06.580 - 00:08:27.800, Speaker A: So yes, I'm not sure if binance. Let's see something. This is the uniswap v two. Yes, on binance chain. So for now you can create a token, but then you cannot use it later.
00:08:28.890 - 00:08:43.740, Speaker B: Yes, sorry, I forgot about that. So yeah, you can create the token, but then you can't interact with Uniswap because it's not on binance. You could look at pancake swap though, I think, which is a fork of uniswap, and it's probably going to be very similar.
00:08:44.270 - 00:09:12.950, Speaker A: Probably, yes. I didn't try in pancake swap. It's a good idea. So I shared the code of our token and our token. I'm using an old version of solidity. You cannot use this in production, please, because this token is so old. But in the same way, this is a version of open zeppelin that has exactly what I need.
00:09:12.950 - 00:09:42.654, Speaker A: That is the ERC 20 token. Mintable. But I know that we have problems with underflow, so be careful with this, but don't copy yet. Wait a minute, because I use this exactly yesterday I am in Medellin now we have a chili conference here. Yesterday I did a workshop in person. Today I knew few online. But let's change the token first.
00:09:42.654 - 00:10:28.590, Speaker A: Let's create. And I can do this bigger for you, the chain link. It's chain link, hackathon, any kind of hackathon link 22 okay, and let's see that our symbol is this. Okay, now I share this with you. So remember now it's so important point you must copy and paste this. Don't cut your friend. You'd like to do the same.
00:10:28.590 - 00:11:29.860, Speaker A: Please only copy the code. Select and copy the code. And this is our token and I are talking about open Zeppelin before. And it's interesting to introduce you, for example, the wizard from open Zeppelin. Like I said before, I'm using our version now. But if you'd like to create a token and to use your open zeppelin that they have some libraries already that we can trust because was audited by them, and here, where we can put your name and define the symbol, for example, and if it's mintable, if you'd like to have some control with holes and something like this, you can create a token and you can create an NFT. Be fun with this.
00:11:29.860 - 00:12:28.366, Speaker A: I love this. Let's come back to our token. So here we are, what I have in my token. First of all, I have a comment defining the license that I'm using, open search license and then the comment pragma is to define the version of solidity that I am using. And I already told you that I'm using an old version of solidity only because I'm importing this ERc mintable that's done for me. Then my token, it seems like be magicy because it has like five lines of code. I'm only defining the name, the symbol and look this I'm creating a token with only two decimal place exactly to show the difference between the normal 18 decimal places from Ethereum and other tokens.
00:12:28.366 - 00:13:30.150, Speaker A: And we can create some different this is our token. Now we must go to the fourth bottom in the left side. This will be the soldier compiler. Here we are and I really recommend you to enable the auto compile because this help you a lot. For example if I have the autocompile enable enabled and here we are, I have ihor now and I am in other line I have a red symbol now, red signal and I can see oh this is wrong, let's see, what's this? Oh in this line I can fix this. So with this it's compiling automatically and now I have the green symbol over there and the compilation is successful.
00:13:33.530 - 00:13:38.106, Speaker B: Just quickly sol got a question in the chat, did you want to address this one?
00:13:38.288 - 00:14:30.918, Speaker A: Yes, nice question. If I use a newer version of the solidity compiler, I need to use a newer version of this contract, this library from open zeppelin and they don't have this ERC mintable in other versions I can use in the way that I show you before. If I go to wizard and for example I can create this like being mintable with rules this can work as well. But I prefer to use my old contract for now. But feel free to use this new version and what more I have here. Okay, it's compiled. Let's deploy our contract.
00:14:30.918 - 00:15:14.534, Speaker A: I will go to deploy and run transactions and remember that you need to have this and choose the environment. This is the most important part because remix it's environment to deploy. It has blockchain simulator in memory in your browser. But in fact we'd like to do this in a real network, in a test network. So we are connecting remix with our wallet. To do this you must choose the injected provider metamask. Let's see.
00:15:14.534 - 00:15:50.170, Speaker A: So here we are in environment and IU select injected provider metamask. Perfect. This is my wallet, the balance of my wallet and this is now here. But you can see clearly five is the idea of the network and this is. Now if I scroll down, I can see the contract. This is my contract token in the filetoken. Sol and I will deploy this.
00:15:50.170 - 00:16:14.080, Speaker A: Let's see now what happened. I'm sending a transaction to the blockchain using metamask. So metamask is connected to remix. Remix. Create the transaction sent to Metamask and metamask is sending to the network. I need to approve this. So let's confirm the transaction.
00:16:14.080 - 00:16:49.390, Speaker A: And remember that token solve deployed. And here we are. I'm waiting the contract to be deployed. I can see here that spending and now it's successful in the same way. In the left side I can go to deployed contract path. Scroll down and you can see the token over there. So let's put our name and the token address here.
00:16:49.390 - 00:17:04.560, Speaker A: If you'd like to do with me. How can I copy the address here? In the right side of my token I can copy and paste. Hey, nice, Darby.
00:17:05.300 - 00:17:06.800, Speaker B: So quick. Darby.
00:17:07.160 - 00:17:07.860, Speaker A: Yes.
00:17:08.010 - 00:17:08.710, Speaker B: Sorry.
00:17:09.640 - 00:17:28.916, Speaker A: Amazing. Here we are. When I explain my token, you can see. Oh, this is magic. Because my token has nothing. How I have this amazing number of functions and buttons. This is imported by open Zappelin.
00:17:28.916 - 00:18:05.780, Speaker A: By the concept that I imported here. Okay, well, first I'd like to have some tokens. I will mint some tokens to my account. So let's mint some tokens. And remember that I'd like to mint 100 tokens. And this is 100. And I must add two zeros that are the decimal places.
00:18:05.780 - 00:18:34.140, Speaker A: Let's do this. Here we are. Mint. You can expand the mint part amount 100 plus account. I'd like to mint for myself. So I get the address of my account here, near the deployment transactions or in metamask. This is IU transact.
00:18:34.140 - 00:19:20.200, Speaker A: It means that I'm sending another transaction from remix to metamask to the blockchain. Now, not to create a content, but interact with the content that I created before confin. And let's see, if I copy my address, I can go to balance off. And for now it's zero. I know that this is a bit small, but it's hard to be big here. And we are waiting this transaction be confirmed. Now it's confirmed.
00:19:20.200 - 00:19:50.608, Speaker A: And I have 100 tokens. Oh, I'd like to see my token on metamask. How can I do this? I will copy the address of my token. I come back here to the line where I have the name of my token. And then I go to Metamask. My metamask is so slow. Go to assets and scroll down.
00:19:50.608 - 00:20:24.140, Speaker A: You can see that I create a lot of tokens in the past weeks in different workshops. This was yesterday. So I will import a token and I paste the address of my token. You can see here the chain link file, hackathon. The symbol is right, two decimal places. And I can add the custom token. And I have 100 tokens if I come back here to the list of assets.
00:20:24.140 - 00:20:57.144, Speaker A: Now, I have 100 tokens listed here. Okay, I have a token. Now, I'd like to create a liquid pool on uniswap with my token. Let's do this. For this, I will use the interface of uniswap. But I don't need all the functions that we have in the interface. So we are creating our interface with only the functions that we are using to do this.
00:20:57.144 - 00:21:52.344, Speaker A: Let's do it. So you pick this. Now, we will create this, create the interface outer solve, and I copy and paste the code for you. So here we are, what I have here. If you'd like to see the source code of this, the original, it's here. Let's edit this for you. First, I'm not using out of this, but it's interesting to you to know this is the interface, the outer that we are using.
00:21:52.344 - 00:22:22.210, Speaker A: And we are interacting with this, okay. Not out of G's, but I will use the add liquidity for it. And I'm using not remove. I don't like to do this. I use another function, call it swap. Not tokens for tokens, but swap it for tokens. We are using these two functions over there.
00:22:22.210 - 00:22:56.990, Speaker A: Let's pass this for you now. And then I explain what I mean. Is this supposed to be in English? I have another version in English. Let's put this for you. My swap. I was doing another complicated version, but I couldn't. Okay, in English now.
00:22:56.990 - 00:23:29.576, Speaker A: So let's understand what I have here. I will fix this as well. And for you understand what I have. First of all, this is abstract compared. Because this is my interface. I'm not creating nothing here. I'm only calling the function of the interface in this address.
00:23:29.576 - 00:24:06.140, Speaker A: That will be the outer. In the same way, like we are talking before to pancake swap, probably. If you know the address of pancake swap, you can do this bnb or I did this like two years ago for RsK. It's another address, another chain. So this is so easy to use. And what I have, I will create a liquid pool with ethers. So I need to add the token address, how much tokens I'd like to add on G's.
00:24:06.140 - 00:24:52.000, Speaker A: And because I'm creating G's and the minimum will be the same. How much it is I you send who is the owner of this part of the liquidity pool and the deadline when we send some transaction to uniswap you used to put a deadline and if you are doing some swap and you wait too much, the value can change. So we must use mouth deadline like for us I put a deadline in like ten minutes that we can play and don't thinking about this. And also you can talk just quickly.
00:24:52.070 - 00:24:58.592, Speaker B: We've got a great question in the chat about the router having a different solidity version to your token that we defined.
00:24:58.736 - 00:25:47.030, Speaker A: This is not a problem. You can use a newest version and also I can search which is the address of the rapid eaters. But it's better to get it directly in the interface to be sure that you are using the right address. In the same way. If you are doing this in binance chain, the name will be this but probably it will be the rapid bnB. Or if I'm using this on Rsk it's the ALBC so it's other token. But if they use the same code the name will be this.
00:25:47.030 - 00:26:42.070, Speaker A: Also I have here a view only to do a query. I'd like to buy tokens to swap tokens by ether. So if I send ethers, how much tokens I receive, and this is I like to receive one token how much ethers I need to send. So you calculate this for us and then when I know this value I will use the function swap eaters for exact tokens. So I use send iters and receive the tokens in the way that I calculated before. So now we are using all of these functions. Let's do it how we are doing this now? This is so important for you.
00:26:42.070 - 00:27:47.640, Speaker A: Let's go directly to deploy Android transactions and we are not in deploying this. We must use this with the address that I show you before. So at address and you must use this address over there. Where is the address here you use that code with this address. How can I do this? Here I am in deploy and run transactions interface houter important not deploy and go down add address and paste the address of the outer then click on add address. And now you have the interface. So this interface is interacting with the outer which is already deployed for Uniswap.
00:27:47.640 - 00:28:23.772, Speaker A: This is the idea. And you can see that I have these functions over there. Is this what is our first step? We'd like to create the liquid pool with our token. Here we are. This is all the information that I need to put over there. I get this information for you to help you. It's something like that.
00:28:23.772 - 00:28:48.950, Speaker A: Are you putting this information here to help you? Okay. The address, the token, the amount. In our case you'll be eaters. Your address and the Unix time is tested. Let's do this. So I do for mine first. Okay.
00:28:48.950 - 00:29:32.160, Speaker A: Token. What's my token address? Let's get it. How much tokens I would like to have. So let's do something like I'd like to do 100 tokens, tokens. It will be equal to 0.1 ethers. So this, the minimum will be the same how much iters I need to send and I need to put this in weigh.
00:29:32.160 - 00:29:40.580, Speaker A: So let's help you to do this. For example, let's use the it converter.
00:29:41.320 - 00:29:45.156, Speaker B: Yes, I always use that website as well. It's very handy.
00:29:45.348 - 00:30:04.670, Speaker A: Yes. I don't know why, what's connected. Let's see. So let's put this 0.1 and this is the value that I need to add over there. Okay, let's scroll down. Use this.
00:30:04.670 - 00:30:54.590, Speaker A: And the amount is this two is my address. Let's get my address here. And let's get the deadlining. To get the deadline I use this, I will share with you as well. And for example here probably I have the deadline now. This is now I'd like to add 90 minutes, something like that. Let's see.
00:30:54.590 - 00:31:42.910, Speaker A: This is the deadline that I use. If you do this in ten minutes it will be okay. What happened with my pet? So I add everything here. Now the deadline and something's wrong. Okay. The token address and you can do the same tokens, 1000, zero, one. And is this Harry, do you think that I can click on transact now?
00:31:51.140 - 00:31:57.680, Speaker B: You can. But will it be successful? Is the real question or will it fail?
00:31:58.260 - 00:32:24.170, Speaker A: Yes, exactly the problem. I'm asking this because a lot of times live I forgot to send the iters. And now we must be careful with this. So I'm telling that I send this amount of items. So before click on transact I must scroll up until the value field. And as it is over there.
00:32:24.640 - 00:32:31.340, Speaker B: Yes. So this will basically call the function but at the same time send that amount of eth.
00:32:32.720 - 00:32:50.320, Speaker A: Exactly. So we must do this. Remember to go to value and put the 0.1 ethers. This is amounting way. And then it's all good to create your liquidate pool. Cross fingers.
00:32:50.320 - 00:33:05.748, Speaker A: Oh, what I did now. Oh I have another problem now. This is so funny. Do you know what I forgot, Harry?
00:33:05.844 - 00:33:06.920, Speaker B: No, I don't.
00:33:07.260 - 00:33:25.292, Speaker A: Yes, I know, I forgot. Remember that I'm sending tokens to the interface router. But when we are using tokens, you must first approve the house to use your tokens. And I forgot to do this.
00:33:25.426 - 00:33:26.156, Speaker B: Yes.
00:33:26.338 - 00:34:14.110, Speaker A: So first of all, you put this before, go to token and approve the howuter to use your token. Let's do this. I have the address of the outer here. And I will go to my token to approve a function spender amount 100 zero. So let's do this. The spender is the outer. And now.
00:34:14.110 - 00:34:38.052, Speaker A: Yes. This is amazing. Remember that I minted 100 tokens. But now I'd like to send, okay. 100 tokens to approve the hauter to use these 100 tokens. Okay. Is this.
00:34:38.052 - 00:34:58.010, Speaker A: Let's approve it. What I have now, now is not supposed to be a problem. Let's see if it's the. No.
00:34:59.420 - 00:35:03.908, Speaker B: Is the spender correct the contract address of the router?
00:35:04.084 - 00:35:18.970, Speaker A: I'm not sure. Let's see. Let it seems. Yes, but I copy here as well. No.
00:35:22.000 - 00:35:25.928, Speaker B: Do you need to remove the value in the transaction?
00:35:26.104 - 00:35:28.030, Speaker A: Yes. Great.
00:35:30.800 - 00:35:32.270, Speaker B: That's for the next step.
00:35:33.620 - 00:35:34.370, Speaker A: Exactly.
00:35:35.060 - 00:35:39.970, Speaker B: There we go. Success. Yes. Darb picked up on it.
00:35:40.660 - 00:35:42.770, Speaker A: Yes. Great. That.
00:35:47.000 - 00:36:00.490, Speaker B: Nice one. So this is the token contract saying, hey, I'm approving this contract or spender to be able to transact this amount.
00:36:01.020 - 00:36:01.770, Speaker A: Exactly.
00:36:04.060 - 00:36:08.570, Speaker B: And then you can do the transfer or the function call next, which will do the transfer.
00:36:09.100 - 00:36:37.910, Speaker A: Yes. Like when I'm creating the liquidity pool, the outer will do a transfer from my account to the outer account. Yeah, so it's approved. I can check this as well. Like if I go down in hours, check it. But the owner is me. So this is wrong.
00:36:37.910 - 00:37:10.350, Speaker A: Let's get me my address and you can see that I have 100. Yes. And the question from Abimala, it's really amazing because. Yes, I mean, doing Ahor's life because you get this kind of ahor when you are alone and you be lost. So it's better to do this together.
00:37:12.560 - 00:37:13.310, Speaker B: Definitely.
00:37:15.060 - 00:37:36.550, Speaker A: Okay, now I can do this. But remember that I need to put the value again over there. Let's come back. Yes, here we are. The file is correct. Everything is correct. Rear cross fingers again.
00:37:36.550 - 00:37:39.190, Speaker A: Yes.
00:37:41.720 - 00:37:42.810, Speaker B: Last one.
00:37:46.060 - 00:37:52.540, Speaker A: After this, we are going to the interface of uniswap to see our liquid pool.
00:37:54.160 - 00:37:54.910, Speaker B: Awesome.
00:37:57.760 - 00:38:02.620, Speaker A: So confirming this, wait to be confirmed.
00:38:05.300 - 00:38:11.490, Speaker B: Does anyone here in the chat use Uniswap to do token swaps? And Defi let us know in the chat if you do.
00:38:12.100 - 00:38:45.948, Speaker A: Yes. How could you? And it's done. Let's go. Here we are. I share this with you now because I am on V two. So let's go to the uniswap V two. This is the app.
00:38:45.948 - 00:39:16.550, Speaker A: First of all, you need to connect your wallet. I am already connected. I was testing before. And then you can see that I am on Gurley and I would like to see my token. I will import a liquid pool. I'm using etefs and my token. Let's get the address of my token again.
00:39:16.550 - 00:39:31.880, Speaker A: Here we are in here and select the token. I know that my token is not here, so I search my token. And here we have chainlink foul hackathon.
00:39:32.540 - 00:39:33.290, Speaker B: Awesome.
00:39:33.740 - 00:40:04.310, Speaker A: The token exists and uniswap is telling that this is not a token. That uniswap verified it. I know it's mine, but I can do this anyway. And here we are. This is supposed to be one, but they have some round problems. And I am the owner of the share the liquidity pool. I have everything now.
00:40:04.310 - 00:40:46.520, Speaker A: And here we are. We created this using remix and we can see on any swap. Let's go to the next step now that I send some tokens to the outer. In fact, I send our tokens. Let's see here why my metamax is so slow. Yes, you can see that I don't have tokens anymore because I sent everything to the liquid pool. So I'd like to swap your token.
00:40:46.520 - 00:41:16.710, Speaker A: I will buy my token using ethers again. It's supposed to other people do this, but let's do it myself. First of all, I'd like to know how much I must send on ethers to do this. So for example, I'd like to receive ten tokens, 100 zero. So I'm now in the function get amounts in.
00:41:23.900 - 00:41:29.220, Speaker B: So what are we trying to find out here? How much eth you need to get that amount of tokens.
00:41:29.380 - 00:41:58.404, Speaker A: Exactly. And I'd like to receive ten tokens, but I need to define this path. What is this? Let's help you with this. The path. It will be something like the rapid eaten and your token. So for me, let's get the warped eater first. Here we are.
00:41:58.404 - 00:42:24.312, Speaker A: We have it here. This is the address of the work and we need to put. And the address of my token as well. Put yours here. My token. Where is my token? Here. So this is the path that I must use for my token.
00:42:24.312 - 00:43:02.810, Speaker A: You need to create this for yours. Okay, what I did. So let's copy this and put over there. This is the path and I like to receive ten tokens. Let's cut it. Okay, this is the amount that I receive. Let's understand this, okay? To receive 100 tokens, I must send this.
00:43:02.810 - 00:43:12.520, Speaker A: But why? This is not an integer number. Why? I have a broken number over there. Do you know, Harry?
00:43:17.360 - 00:43:19.070, Speaker B: Is it because it's in way?
00:43:19.920 - 00:43:38.404, Speaker A: No, this is because of the concept of uniswap, that we have the constant of the tokens. So when you buy more tokens of one, you need to send more of the other, because the constant must be the same.
00:43:38.602 - 00:43:41.808, Speaker B: Yes, each side of the pool has to be equal.
00:43:41.984 - 00:44:56.660, Speaker A: Exactly. So because of this is not to send only something like this. Not this, but we need to send this. This is so important to you, understand? So we know that we must send this in iters in order to receive ten tokens. So let's do it now, we know what we can do now I'm going to the function swap iter for exactly tokens, and in the same way I need to put a lot of values here. Let's understand this part as well. And where is this like something that I put the explanation for you.
00:44:56.660 - 00:45:47.880, Speaker A: This is not true for my token path address. And the time is step. So for mine it will be. Let's do this amount of tokens, 100 zero path. We already have the path here to my address. I can get my address again, and I already put this here and here, for example. And the deadline, probably it passes, so we need to do this again.
00:45:47.880 - 00:46:17.060, Speaker A: Let's create a new deadline now with 20 convert. Is this. This is the deadline that I will use. Now let's add the deadline and I think it's done. Can I transact now? It is okay.
00:46:19.430 - 00:46:25.060, Speaker B: No, because you need to add the EtH value to the transaction call again.
00:46:25.430 - 00:46:57.520, Speaker A: Exactly. I always forgot this. So this is the value that I must send. Remember that we get this before. So let's add the value here and now. Yes, I miss send ethers and I receive tokens. No, it's telling that I missyned more than I need also with this now.
00:46:58.770 - 00:47:03.950, Speaker B: Yeah, just quickly, did you want to explain the concept of the deadline with uniswap?
00:47:05.110 - 00:47:50.000, Speaker A: No, I can talk about. Yes, why we need the deadline. Because think that you send a transaction not in testnet, but in Mainnet. Sometimes you send a transaction with a low gas price, and your transaction it's so long to be confirmed. When your transaction is confirmed, the price changes, so it doesn't make sense anymore. And because of this you can send a deadline to be sure that this is true, that it will work.
00:47:52.290 - 00:47:53.040, Speaker B: Awesome.
00:47:53.650 - 00:47:56.530, Speaker A: But in fact, I have no idea what's my problem.
00:47:56.600 - 00:48:11.510, Speaker B: Now let's take a look again. So you're taking out ten to the right address and then you have a deadline.
00:48:21.420 - 00:48:30.810, Speaker A: Yes. Sometimes I didn't saw this kind of problem before, but this value, it's a bit strange for me. Oh, I think I put the value wrong.
00:48:32.300 - 00:48:34.190, Speaker B: Just double check that. Yeah.
00:48:36.480 - 00:48:38.076, Speaker A: Yes, it was this.
00:48:38.178 - 00:48:39.916, Speaker B: Okay. It was the value.
00:48:40.098 - 00:49:23.470, Speaker A: Yeah, I only copy and pasted the value again. Yes, I'm sending ethers to the contact of my liquidity pool. And remember that each liquid pool, each pair, it's a contact. So this is a contact. Yes, probably I copied the full response derby. You are right, like derby commentees. And probably I did this.
00:49:23.470 - 00:49:56.402, Speaker A: Yes, I think it's done. Let's see. Yes. Wow. So let's see if I have tokens now. If I go to assets. Yes, I have ten tokens now.
00:49:56.402 - 00:50:07.800, Speaker A: So I get my awesome. I swap eaters for tokens and I have my tokens. I can see here as well. This is the balance of my account.
00:50:10.170 - 00:50:13.718, Speaker B: And does the uniswap front end reflect this as well?
00:50:13.884 - 00:50:39.440, Speaker A: Yes, let's see. Probably now we have a different percentage here. We have more eaters and less tokens. Yeah, because I buff ten tokens. I don't know if you can do the swap here as well in vitu. Let's see.
00:50:39.890 - 00:50:41.200, Speaker B: Yeah, let's try.
00:50:41.890 - 00:51:10.442, Speaker A: Yeah, let's get the address of my token. Probably you lost like ethers, but I'm not in v. This is not right. I didn't copy it. It said that. Copied. Yes, here we are.
00:51:10.442 - 00:51:50.210, Speaker A: I have ten tokens and I can change my liters for my token here, for example, zero point. And you can see that this is the opposite. Like in the other way. I told that I'd you like to receive ten tokens and then I must send this. But now I'm saying that I would like to send these in etfs and I receive this amount of tokens. You can see that the price impact is huge.
00:51:53.860 - 00:51:55.676, Speaker B: Yeah, that's a big impact.
00:51:55.868 - 00:52:28.430, Speaker A: Yes. It would be so expensive to do this, but the idea is to show you that you can interact with any DeFi application, creating your own ismatch concepts like I created only interface to do this, but I can import this interface in another smart context, for example, and use it in the same way. Yes. Harry, what do you think about this?
00:52:29.040 - 00:52:57.460, Speaker B: Yeah, I was just going to say that's exactly one of the cool things about Defi, in my opinion, is you can take something that someone else has built and you can create your own defi application that then uses that and you've got that whole notion of Defi composability or building money legos as they call it, where you have your thing and then you then interact with another Defi thing and then you can interact with another thing and you can create this amazing thing that is comprised of all these different kind of Defi protocols and interfaces.
00:52:58.200 - 00:53:00.660, Speaker A: Yes, this is the real money Lego.
00:53:01.240 - 00:53:03.300, Speaker B: Yes, money Lego.
00:53:03.740 - 00:53:16.830, Speaker A: Yeah, I really love this. In the same way you can interact with compound or average or any other, including to do aparting one application apart in another application.
00:53:18.560 - 00:53:19.630, Speaker B: Yes, definitely.
00:53:20.320 - 00:53:37.090, Speaker A: This is really amazing. Well, I started with you creating a token because this is so basic, but in the same way I used to say that create a token is so easy, but to give some value to this token, it's another history.
00:53:37.940 - 00:53:40.370, Speaker B: Yes, definitely.
00:53:41.960 - 00:53:58.330, Speaker A: But I think it's a great way to restart. I know that was a bit fast. We don't have using 2 hours to do this. What do you think? Harry would like to talk more about it.
00:53:58.940 - 00:54:47.400, Speaker B: I was just going to see does anyone have any questions specific to this workshop or to the hackathon in general? Feel free to ask in the chat otherwise. Yeah, I was just going to say a cool hackathon projects to build based on things like this is to build some kind of default application that creates tokens and then sends them to uniswap, just like Sol did or anything really. That kind of. You can then interact with a token swap program like Uniswap would be a cool hackathon submission and yeah, just really looking forward to see some of the DeFi specific things that are built. I'm a very big defi fan and I always get excited when I see new Defi projects being built as part of hackathons.
00:54:48.620 - 00:54:56.860, Speaker A: Yes, this is really amazing. And wow, I think I cannot live without DeFi anymore.
00:54:58.720 - 00:55:33.800, Speaker B: Yeah, and I might just share in the chat. If you're interested in programming DeFi smart contracts, we've got a repository called Defi minimal that I'm going to share that has a bunch of Defi primitives, smart contracts. So these are very, just like today, we've got the Uniswap interface smart contract that we went through. There are some basic smart contracts that go through how to build a very simple lending and borrowing Defi protocol, a staking protocol, et cetera. So you can check those out and have a play around with those as well if you wish.
00:55:36.700 - 00:55:57.230, Speaker A: Yes. Here we are, the Defi minimal. You have some examples over there, some contracts related to lending to staking, swap rewards. This is amazing. And hey, we have a question over there.
00:56:02.660 - 00:56:11.680, Speaker B: Can one participate in more than one project, for example, building a DFI app and also working on Salana in the hackathon?
00:56:11.760 - 00:56:12.390, Speaker A: No.
00:56:14.600 - 00:56:20.550, Speaker B: I'm just checking the faq because I'm not 100% sure on that one.
00:56:22.200 - 00:56:28.170, Speaker A: Yes, at least because of dev post, each person must be in one project.
00:56:29.340 - 00:56:36.510, Speaker B: Okay. Yes. So for each dev post profile that you have, you can only submit one project?
00:56:36.960 - 00:56:40.860, Speaker A: Yes. And this is normal in all the hackathons?
00:56:42.800 - 00:56:50.540, Speaker B: Yeah, I guess usually you spend a bit of time working on hackathon projects that most people maybe won't have time to do. Two submissions?
00:56:50.960 - 00:56:52.590, Speaker A: Yes. This is hard.
00:56:57.440 - 00:57:02.950, Speaker B: Did you have anything else you wanted to discuss, Sol? Otherwise maybe I can share the feedback form.
00:57:03.880 - 00:57:14.950, Speaker A: Yes. So I'm sharing it now. This is our feedback form. Let's put this in full screen.
00:57:16.520 - 00:57:50.610, Speaker B: I put in the chat. We'd love to get some feedback from you all as to what you thought of today's session, what you think we can improve. So yeah, it'd be great if you can scan the QR code or fill out the form that I linked in the chat and let us know what you thought of this session. Oh, sorry, we forgot about this. So Vitz asked a question, kitty part. I think he wants to build a. Let me find the chat a kitty party app.
00:57:50.610 - 00:57:54.550, Speaker B: It's a concept wildly used in South Asia and my country.
00:57:55.720 - 00:57:57.830, Speaker A: I don't know. Do you know.
00:57:59.640 - 00:58:57.130, Speaker B: Let me just scroll up in the chat where he talked about it a little bit more. Yeah. In general, our hackathon workshops are pretty set. Well before the hackathon starts, if you have specific questions about how to build a certain application as part of a hackathon submission, the best thing you can do is ask in the hackathon discord. Ask in the chaining discord in the hackathon technical support channel because we monitor that channel throughout the hackathon and we respond to every question there. So if you ask some general questions about how to integrate or how to approach a certain implementation of an app or something like that, and as long as you're very clear about what that app is, because we're not sure what a kitty party app is, but if you're asking, you're very clear about the app is like this, here is how it works in the real world or something, you'll definitely get some kind of response in there.
00:59:00.460 - 00:59:02.810, Speaker A: Yes. I need to learn more about it.
00:59:03.500 - 00:59:11.710, Speaker B: Yeah, but cool. All right, Sol, did you have any closing remarks to make? Otherwise, I think we can probably end the session here.
00:59:15.280 - 00:59:21.856, Speaker A: Yes, the registration ad is still open. You can start your project just now.
00:59:22.038 - 00:59:32.980, Speaker B: Yeah, you can register throughout the whole hackathon, so don't be put off if you're starting a little bit late. There's still quite a number of weeks left. Plenty of time to make a great submission.
00:59:36.440 - 00:59:38.070, Speaker A: So I think it is.
00:59:41.320 - 00:59:54.244, Speaker B: Cool. Awesome. Thanks everyone for joining. Thank you Sol for running us through this amazing session today, and I hope everyone has a great hackathon experience and looking forward to seeing all the great submissions from everyone. Thank you.
00:59:54.442 - 00:59:58.280, Speaker A: Thank you. See where round. Bye.
