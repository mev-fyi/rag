00:00:06.010 - 00:00:07.360, Speaker A: We're back. We're back.
00:00:09.010 - 00:00:13.162, Speaker B: I can't do it as cool as you, Austin. I'm sorry. I don't have a bow tie.
00:00:13.306 - 00:00:35.302, Speaker C: So to throw props to Alex right away, like, a lot of times when I take my smart contracts to someone smarter than me and say, what am I missing? A lot of times, it's like, why are you still reading that? You're doing that read every time. When that can be a local variable. You're reading from storage every time. Quit doing that, knucklehead. This should be immutable. This should be constant. You got to get those things going.
00:00:35.302 - 00:00:38.614, Speaker C: And it's something that I always forget. There was a talk.
00:00:38.812 - 00:00:44.460, Speaker D: Same here. That's happened to me so many times, it's worth calling out for sure.
00:00:45.950 - 00:00:46.458, Speaker A: Awesome.
00:00:46.544 - 00:00:57.040, Speaker B: So I'm going to dive into. I'm going to start off with some silly questions first, if that's okay. So, first question for Alex Rowan. What would smart contract Vogon poetry look like?
00:00:58.850 - 00:01:05.438, Speaker D: Horrific, unbearable, unreadable, unbearable. And it would sound crap.
00:01:05.614 - 00:01:09.122, Speaker B: It would probably use a lot of storage. I would imagine all the.
00:01:09.256 - 00:01:12.850, Speaker D: Yeah, yeah. We'd max out all the gas for every block.
00:01:14.310 - 00:01:15.106, Speaker A: Awesome.
00:01:15.288 - 00:01:18.366, Speaker B: And then a question for you, Austin. Where do we get a bow tie?
00:01:18.398 - 00:01:21.054, Speaker D: Like, think.
00:01:21.112 - 00:01:41.390, Speaker C: I think my sister in law got this for me. So this is, like, a fancier one where it's, like, straight across. I feel like it just has a little bit more style. Most bow ties are kind of clowny and kind of poofed out, but definitely the key to buying a bow tie is buy one. That's the actual stuff that you have to tie. Don't buy one of those pre tied ones that you clip on. You look like a turkey.
00:01:42.850 - 00:02:02.180, Speaker B: Awesome. Thank you for indulging a couple fun questions. Let's dive into some real questions. And so I want to start with you. Alex Barron opens up when it has one of the best libraries for contracts across the whole ecosystem. How are you preparing for sloze version nine?
00:02:05.570 - 00:02:22.840, Speaker E: I can't quite say too much, but we will be unveiling a bunch of different solutions in the next couple of months. And right now, we're really focused on governance. But 0.9 is certainly in our pipeline, and we will most definitely be sharing that when we have more to share there.
00:02:24.410 - 00:02:25.160, Speaker A: Awesome.
00:02:25.690 - 00:02:48.240, Speaker B: So we've got a whole class of questions about the level of skill and knowledge from all of our speakers. And so maybe I want to ask everyone, how did you get to your current level of skill and knowledge and amazingness? So, Austin, why don't we start with you on that. If someone wanted to follow in your footsteps, what should they do?
00:02:49.090 - 00:03:22.646, Speaker C: Well, first of all, I'm still not a very good, smart contract developer. Right. The level of intricate detail it takes to create a good, smart contract platform is way beyond me. It's like super heady and we need more folks like that in the space. Like, audits are particularly hard and complicated and not enough people know how to audit. So I'm not a genius, but to get in, it was just a lot of tinkering. It was a lot of trying to find product market fit.
00:03:22.646 - 00:03:52.500, Speaker C: I made a few games at first and it didn't stick. But then I started building tools and I started writing about those tools and the ecosystem liked that. And that kind of helped me get into the space and contribute, I would say just for someone to follow in my path is just keep building cool things and keep tweeting about them and writing about them and try to help other people to get started. But it's just getting, like Patrick said, and I reiterated, like, it's getting your hands dirty and it's playing around with it.
00:03:54.310 - 00:03:54.722, Speaker A: Awesome.
00:03:54.776 - 00:03:57.090, Speaker B: And I'll turn it to you. Alex Barron.
00:03:58.790 - 00:04:44.660, Speaker E: I had kind of a fun introduction, so I worked at hitter hashgraph back in, was it 2017, 2018? And then I kind of moved away from the space for a little bit. And then the summer of 2020, I started using a number of DFI applications, got really into it, just got excited by the whole ecosystem, and I just randomly happened to be the 10,000th person to start the open Zeppelin contracts library. And I was just tinkering around. And then the guy who had my previous role reached out. He said, I was going to send you some socks and some other stuff. And then our head developer was like, we're hiring, check that out. And then I started a four month interview process with them, and clearly it worked out.
00:04:45.590 - 00:04:51.350, Speaker B: It sounds like you got tricked by like a banner ad. You were 10,000 person to star repo.
00:04:51.690 - 00:05:08.730, Speaker E: Click here for a job. When I checked that Twitter notification, I saw that, and I did think that it was some scammy thing. But then it was Andrew Kothrop, who now heads up, I think it's called this week in Eth, which is a pretty popular newsletter. So shout out to him, he's fantastic.
00:05:09.870 - 00:05:10.330, Speaker A: Awesome.
00:05:10.400 - 00:05:28.030, Speaker B: And we'll get to you, Rowan, in a second. But I just want to continue on this topic a little bit because Austin mentioned that we need more auditors. And I know that Openzeppen is like, you have a backlog a mile long of audits, you're not actually looking for new audit customers right now. You've got so many. How does someone get into auditing or become an auditor?
00:05:28.930 - 00:06:02.998, Speaker E: So there's actually a number of paths that our auditors take. Like, some are just straight up hackers who try to find every vulnerability in the system. And we're kind of maybe on the wrong side of the tracks at one point. But we also have math phds, people who work in physics. It's really just about people who are trying to find innovative ways to break a program and create an exploit so that the bad guys don't do it first. And there is, I think, far more smart people in the space who want to prevent this type of thing than cause it. So that's really encouraging.
00:06:02.998 - 00:06:29.860, Speaker E: And I think our team is a great example of that because all of them are absolute, like, mad geniuses and they all have these fantastic math backgrounds and hacker backgrounds, and working with all them and just speaking with them on a daily basis is really humbling. So you can come from any walk of life, but you need to be an excellent problem solver to be an auditor. That said, if you think you have the chops, feel free to reach out to us.
00:06:31.030 - 00:06:31.490, Speaker A: Awesome.
00:06:31.560 - 00:06:52.140, Speaker B: And then back to you. Alex Rowan, how did you get to where you are? Because I feel like a lot of people underestimate how both easy it is to become an expert, and then also how rare and powerful important that knowledge is. Alex Rowan, I would call you probably top five smart contract optimization experts in the world.
00:06:53.950 - 00:07:33.900, Speaker D: That's a stretch, but I'm going to name drop Austin here and some of the videos that he makes genuinely. And people like him, like Patrick, who make awesome intro videos into smart contracts. That's definitely how I started. Learnt loads from there. And then even I remember kind of graduating from the videos and tutorials to kind of digging through the open zeppelin contracts. I know that's just a bit of a coincidence that we have the two guys right here, but that's true. And then joining chainlink, just finding someone who's better than you and hounding them for questions, that's always the best way to go.
00:07:35.390 - 00:07:37.820, Speaker B: So what's the best way to hound you for questions?
00:07:40.270 - 00:07:41.340, Speaker D: Tweet me.
00:07:43.150 - 00:07:43.900, Speaker A: Awesome.
00:07:47.390 - 00:08:04.370, Speaker B: I want to go back to Austin for a second. You showed off these amazing branches, like all the different branches of scaffold eth that are showing off a thousand different things in the way that you're incentivizing more people to create these. Are there any particular branches you'd like to give a shout out to that you think would be a great place to start as being really good or really helpful.
00:08:05.350 - 00:08:33.386, Speaker C: They're even linked in. If you google like EtH, Speedrun or Speedrun eth, just google that. And the top thing is going to be an ethereum speedrun, and it's going to take you through all the branches. It starts with, hey, grab solidity, tinker with solidity or grab scaffold eth, tinker with solidity. But the top branches that you're going to want to hit right away. I used to have people start at challenge one where you're building a decentralized staking app. You learn payable functions, you learn how to send Eth and lock it up.
00:08:33.386 - 00:09:01.622, Speaker C: You learn the timing. But I think the simple NFT branch is the best place to start because you kind of get an NFT contract, you're able to mint an NFT, you're able to send it around. So my shout out branches are simple NFT example. Then challenge one, the decentralized staking, and then challenge two, which is a token vendor. It teaches you contract to contract interaction and kind of gets you leveled up, even like the approve Ux pattern of ERC 20. That's kind of tricky. So those are my starting points.
00:09:01.622 - 00:09:22.214, Speaker C: But commit reveal is important. Sign messages are important. Uniswap, like build your own little price function and build your own little simple decks. Like a uniswap v one. Implement that yourself in solidity. It's only a few lines of code and it's mind blowing. And then let's see, randomness is really hard on chain.
00:09:22.214 - 00:09:36.430, Speaker C: Figure out how to learn how randomness works. Like figure out how commit reveals chain link VRF. There's a lot of tricks there. Even get into oracles a little bit. So that's probably more branches than you wanted, but that's my whole speed.
00:09:38.290 - 00:09:39.040, Speaker A: Awesome.
00:09:39.890 - 00:09:49.010, Speaker B: And let me ask a crazy question. Do you think there could be a collaboration between Scaffold ETH and the smart contract wizard? That feels like maybe a natural pairing.
00:09:49.610 - 00:09:53.750, Speaker C: I'm down. Sure. I'm always on the hunt for a good collab.
00:09:55.450 - 00:09:56.694, Speaker E: Let's do it.
00:09:56.892 - 00:10:33.714, Speaker C: Awesome. One time we did like a mentorship session where some open Zeppelin dudes got on and I kind of like did a live coding of, I think it was challenge two with the token vendor and they dunked on me like five times for sure. Having an expert there at solidity, as we're working through the solidity, like I did a dot transfer and it's like oh, actually, don't do transfer. If you transfer to a smart contract, the gas is going to be limited. It's going to fall apart. What you want to do is call with the value in there, and then you put the parentheses, but you got to do some quotes in there, too. Like, why is this so complicated? But I needed the open Zeppelin guys to be there to help with that.
00:10:33.714 - 00:10:37.570, Speaker C: So I'll take a wizard on a collab anytime.
00:10:37.910 - 00:10:39.730, Speaker E: Fantastic. I'll ping Fran.
00:10:41.190 - 00:10:42.034, Speaker A: Awesome.
00:10:42.232 - 00:10:54.540, Speaker B: Next question is for Alexander Barrons. You have a lot of public audits that are really useful. How do folks figure out which audits they should be taking a look at? What's worth their time, both to learn and to get better at?
00:10:55.630 - 00:11:41.160, Speaker E: I think just filtering through whatever projects are most similar to what you're thinking of building would be the first step there. But I'd really encourage everyone to join our secure development series, and I'll post the link in the chat here in a second, because although our audits are, they're great case studies. This secure development series is being hosted by one of our most seasoned auditors, who's now transitioned full time into thinking about how we can better educate people in solidity, security. And these is going to be a six part series. We have recaps, and he is sharing a wealth of information here. So I think that's going to be even better than our audit reports, because those are just case studies, and this is how to prevent those case studies from happening in the first place.
00:11:42.570 - 00:11:43.290, Speaker A: That's awesome.
00:11:43.360 - 00:12:03.710, Speaker B: Thank you. Back to Alex Rowan. There were a lot of questions in the chat about some of the basics around smart contract development. So maybe I'll kind of pose a few of these. So, what is the EVM? What are opcodes? And who executes smart contracts? Those are kind of connected concepts.
00:12:05.250 - 00:12:22.280, Speaker D: What is the EVM? So, the EVM is the machine that nodes run on the execution layer. So it's where smart contracts live, and it's what nodes execute when you interact with dapps. What is the EVM? What was the second one?
00:12:23.290 - 00:12:24.610, Speaker B: What are opcodes?
00:12:24.690 - 00:13:11.780, Speaker D: What are opcodes? Okay, opcodes are specific instructions that they're machine level instructions that the EVM understands to do specific things. We went through s store and s load. They mean store this data at this specific storage slot that it tells the EVM to do that there are opcodes for memory. So pushing things onto the stack, taking things off the stack, adding subtracting bits. Every single operation that the machine can perform has its own opcode at the lowest level. And what was the last one again?
00:13:13.990 - 00:13:20.840, Speaker B: Who runs smart contracts? I think there was some confusion around who's a minor, what is a node, like those sorts of things.
00:13:22.510 - 00:14:14.330, Speaker D: So we use a phrase sometimes, autonomous smart contracts, they're not really autonomous. It has to be poked, someone has to poke it, and I think that's a distinction that we need to make. So smart contracts, if no one interacts with them, they just sit there and they do nothing. They can have the best logic, the most efficient way of interacting with storage. But you as an externally owned account, so me at my address, from my metamask account, I can go call a function and that will kick things into gear. So there has to be an EOA, an externally owned account to actually kick smart contracts off. And then that transaction is run by the nodes when it's propagated across the network.
00:14:15.310 - 00:14:57.320, Speaker C: This is a really neat point though, because from a developer standpoint, if you think of a cron job, you think of this thing that's going to execute regularly. But when you realize you can't run a cron job, what you have to do is actually thinking of a world of adversarial jerks. You have to incentivize someone to run that cron job for you, you have to build it into the contracts. For someone to walk up to that vending machine and poke it every once in a while and financially incentivize them, maybe financially, but incentivize them in some way to walk up and poke that button, and it changes your understanding of what Ethereum is. It's more like this big vending machine that anyone can access, rather than a back end server that can run a cron job.
00:14:58.410 - 00:15:05.530, Speaker D: And the other option is chain link keepers. So if you do need a cron job, use a chain link keeper.
00:15:07.230 - 00:15:08.220, Speaker B: By the way.
00:15:10.030 - 00:15:10.634, Speaker D: Hold on.
00:15:10.672 - 00:15:11.260, Speaker A: Awesome.
00:15:12.430 - 00:15:20.960, Speaker B: So the next question I think anyone could take, but maybe I'll pass this to Austin. Is it too late to learn solidity? As a beginner, I only have three years of Javascript experience.
00:15:21.810 - 00:15:47.634, Speaker C: Oh man. No, that's plenty. If you can do a for loop in JavaScript, you're ready to start tinkering with solidity. You're not going to be a solidity expert, you're not going to deploy a contract and have millions of dollars in it. And if you have that mentality, that's okay, but get started tinkering right away. That's the point. Solidity is pretty simple, right? Going back to, it's like you're coding a little embedded controller.
00:15:47.634 - 00:16:21.554, Speaker C: Going back to the EVM the EVM has to be a pretty simple thing so it can run on all these machines successfully. So the language is pretty simple. You're just setting some storage locations, you're updating stuff, you're writing small control loops. It's not super complicated to write. So I would say with just a little Javascript experience, I would start there. I would go look at famous universities have great web dev programs. There's a bunch of Kickstarters to get your web dev going, find some good web dev tutorials, do that.
00:16:21.554 - 00:16:35.960, Speaker C: Learn Javascript a little bit, but jump right into solidity. Once you've kind of got the flow and the handle for thing, knowing that, don't jump into solidity and be like, I'm going to make a million dollars next week by deploying something to mainnet. Jump in and tinker and play and learn.
00:16:38.890 - 00:16:47.100, Speaker B: Awesome question up next for Alex Barrons. Defender has a lot of features. Where should I get started?
00:16:49.230 - 00:17:22.342, Speaker E: I think the best place to get started is probably by going to our YouTube page. We have a bunch of different use case demos for defender up there, as well as just a general intro. You can also head over to our events page where we host a bi monthly Defender demo with our head of product and sometimes our CTO, and we just walk through Defender. Of course you can visit the docs and sign up at Defender openzeppelin.com, but I highly recommend that you check out all of our educational materials because they are very thorough, I think you'll find awesome.
00:17:22.396 - 00:17:30.520, Speaker B: And then maybe one more question for you, Alex Barron. What's open Zeppelin's stance on potential future threats like quantum algorithms? Are there any initiatives in place to combat them?
00:17:31.770 - 00:17:41.660, Speaker E: I think that we have a number of initiatives that are going to be announced, I believe, in October that might answer some of those questions, but I can't say anything on that right now.
00:17:42.750 - 00:17:44.922, Speaker B: Where should people go to stay in the know?
00:17:45.056 - 00:18:00.930, Speaker E: You can head over to our blog as well as our twitter. We're going to be posting everything on there. So I think we should have an update, big update in the middle of this month as well as the middle of next month and then also in October. So keep your eyes peeled.
00:18:02.070 - 00:18:02.820, Speaker A: Awesome.
00:18:03.190 - 00:18:13.990, Speaker B: And then the last couple of questions here, I'm going to go to Alex Rowan because they're connected. So where can we learn more about gas writing efficient, smart contracts?
00:18:16.570 - 00:18:50.034, Speaker D: So that was one of the reasons I did the talk on that, because the detail that I went into, like Austin said, it's feedback we get from auditors. A lot of the time. I believe there is resources on the Ethereum foundation website. I know that's been beefed out quite a bit recently. And there's always the white paper, the original white paper. It could be in the yellow paper. Each opcode's associated gas costs and these change over time.
00:18:50.034 - 00:18:58.770, Speaker D: So watch out for eips like 2929. That changed how the gas costs of storage are applied.
00:19:00.090 - 00:19:00.838, Speaker A: Awesome.
00:19:01.004 - 00:19:07.590, Speaker B: And then are there any final question? Are there any good profilers to help see execution costs of individual statements or blocks?
00:19:09.050 - 00:20:01.590, Speaker D: Yeah, so we use hard hat for our testing suite in Chainlink, and there is a plugin you can get with hard hat called I think it's just hard hat gas costs or something like that. And it will print out once your tests are finished, it will have recorded every transaction that your tests performed on the functions of your contracts, and it'll print a table for you that gives you the least amount of amount of gas used for that function, the most amount of gas it used, and the average. So it might change depending on the path through the function. So with conditional statements and whatnot. So that is a pretty good profiler. Highly recommend anyone using hard hat to include that in their test suite.
00:20:02.330 - 00:20:02.742, Speaker A: Awesome.
00:20:02.796 - 00:20:20.310, Speaker B: Well, we're out of time. There's lots of great questions, but I have to have us move on. Thank you again to everyone, and I'm really excited to see this scaffold eth contract wizard combo pair up sooner.
