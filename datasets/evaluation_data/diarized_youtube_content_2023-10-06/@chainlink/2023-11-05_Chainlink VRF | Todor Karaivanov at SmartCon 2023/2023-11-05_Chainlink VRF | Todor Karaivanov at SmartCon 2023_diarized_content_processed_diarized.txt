00:00:00.170 - 00:00:51.182, Speaker A: Good to meet you. Good to see so many thoughtful, experienced people here. My name is Toddler, and I've been with Chainlink webs for just about three years now. And I think, like many of you, I got inspired by the possibilities that this technology, blockchain technology in general, gives us the chance to remove trust. Basically, that's the biggest value proposition that we get from blockchain technology, solving the trust problem and just going over what we do at Chainlink webs. I'm sure you guys know what we do, but we do build the chainlink platform, which is aimed to solve the trust problem in the ways that blockchains cannot. For example, blockchains don't have access to external data.
00:00:51.182 - 00:01:52.914, Speaker A: This is the first problem we solved. As well as compute. Compute is something that blockchains do, but not all compute is viable to run on chain, or possible even in some cases, just in the product that I'm going to talk about. That's a form of compute that you cannot possibly run on chain. And then crosschain is something that we started doing recently to enable all ecosystems to talk to each other in a verifiably trustless way. So I've been, like I said, with Chaingot for just about three years, and during this time, I focused my energy, or most of it, on our ChainLink VRF product, making sure that it runs well. It has no problems ultimately, that it's a successful product, and I believe it's been quite successful since was Smartcon in 2022, it has serviced over 9.3
00:01:52.914 - 00:03:07.686, Speaker A: million requests across the different ecosystems. It's been used by crypto native apps such as pointed iX Z, casino, Gala games, Polychain monsters, and many, many others, as well as by web two companies that are integrating with web3, such as Dolce and Gabana, Australian Open, the NBA, et cetera. Web two gaming giants like Nexon are integrating Chainlink VRF in their tech stack to have randomness in a verifiable way. So I think this speaks for itself. Chain link VRF has essentially become the standard for randomness in web3, and there's no other randomness provider that has anywhere close in terms of adoption. So what exactly is Chainlink VRF, and how is it different from standard random number generators? So, first of all, we did build chainlink VRF to solve the problem that smart contracts don't have access to randomness. But it's also a better form of randomness compared to what's used in the world today.
00:03:07.686 - 00:03:54.680, Speaker A: Because when randomness is generated, you always normally have to trust the randomness provider that they didn't tamper with it. And typically what companies do is they go through audits, they make sure that their servers are secure. But people actually never know. They never know if somebody, an insider or a hacker didn't tamper with the randomness to gain some advantage out of it. Chainlink VRF solved this problem just like we solved the trust problem in general. It's a cryptographic established cryptographic algorithm that makes it impossible for the provider or the user or the consumer to tamper with the randomness in any way. It's unpredictable for everyone involved in the process.
00:03:54.680 - 00:05:03.440, Speaker A: So how exactly does it work? This is a bit more technical. Essentially, this is a commitment, cryptographic commitment scheme, where the VRF service commits to a secret key, a private key, and publishes the corresponding public key on chain. So when a smart contract needs randomness, essentially that's a request that's made to the VRF coordinator. Smart contract, which is something that we deploy on all the supported chains for chaining VRF, and an event is emitted where the VRF service listens for that event. It takes some data from the blockchain as input. It mixes it with this private key and produces a random number on top of it, hashing it, to ensure uniform distribution, and then provides that randomness back to the VRF coordinator contract. Then that gets verified in a way to ensure that it was generated the way it should.
00:05:03.440 - 00:05:35.298, Speaker A: Just how signatures work. Just how cryptographic signatures work. You can sign some piece of data and prove that you own the private key. To sign that data, anyone can verify by checking your public key that you did do that. You did know that private key when you signed that data. In the same way, the VRF coordinator verifies that this private key that's been pre committed to is used to generate the randomness. So the VRF service cannot possibly cheat or change the randomness.
00:05:35.298 - 00:06:32.554, Speaker A: So it's unpredictable because none of these elements are known to anyone involved in the process. But it's also deterministic. So that's how we solve this problem. And before the VRF coordinator sends the random number back to the consuming contract, the DAP, it gets verified. So it's kind of a self audited process where the randomness cannot be delivered to the DAP unless it matches the security properties that it needs to. Going back to adoption, we've been deployed on all the supported all the major EVM chains, Polygon, Ethereum, of course, Avalanche, BNB chain, Phantom. And earlier this year, we launched VRF on arbitrum which is the first row up where we launched, and we had some amazing feedback about how quick it was.
00:06:32.554 - 00:07:35.582, Speaker A: One user actually said it was web two like feeling. So I think it's seen by the adoption on arbitrum that the future for gamification lies on fast and comparably cheap chains. And I think this goes really well with our CCIP protocol where we've started seeing interest from things like blue chip NFTs who live on Ethereum move these assets to chains where it's viable. It's cheap enough and fast enough to give them more utility through gamification, for example, which is enabled by randomness. So what's next? We've been hesitating to release a new version for a while now because we know that it is super difficult for smart contracts that already utilize VRF to be changed to support the new version. But we are releasing a new version. We call it VRF 2.5.
00:07:35.582 - 00:08:28.010, Speaker A: And there's two main features that it has. The first is probably one of the main things that main requests that we've received is native token billing. So for example, on Ethereum you will now be able to pay in ETH, in ether, on Polygon, in Matic, et cetera, which actually means that it's much easier now to create a self sustainable app where that cost gets transferred to the end user. So you won't have to have a team managing that DAP, making sure that it's always funded. You can just have the end user pay for it. And the other feature that is important is sort of upgradability. Like I said, it's difficult to change smart contracts, which are supposed to be immutable by nature.
00:08:28.010 - 00:09:42.870, Speaker A: But what we did is we tried to make this process as easy as possible. So we've added a migrate feature. So when we release the next next version, you would just be able to call this migrate feature in the VRF coordinator from the subscription owner VRF subscription owner to migrate to the next new version, which makes it much easier to support new versions. And we also have this direct funding model where you don't have a subscription, you just pay as you go, that utilizes another smart contract on top of the VRF coordinator that will get migrated. So you won't have to worry about anything if you use that model. Yeah, one other thing I wanted to call out is that last smartcon, we launched an initiative called the Chainlink badges. We have a badge for our products and we've seen some really good statistics with protocols starting to adopt this to basically help boost their own protocol, leveraging on the huge channeling community, also demonstrating their commitment to transparency and fairness.
00:09:42.870 - 00:11:01.580, Speaker A: Lastly, we just launched the developer hub, the new and updated developer hub, recently. This is something that we already had this information spread around multiple places around the web, but we kind of centralized it, made sure that it's easily accessible with many examples about for example, with VRF. If you want to run a giveaway in a fair way, we have that example in the developer hub, easy to find using Aipowered search and that's it. Lastly, I just want to ask everyone who is using VRF and thinking about using VRF to subscribe to our mailing list at just chain link and or to join our discord server just to stay up to date with the next version of VRF. When are we launching it? We're expecting to launch it early access in November, but please subscribe and join the Discord channel to stay up to date, as well as to make sure that you're up to date about when are we going to sunset the early versions. Thank you.
