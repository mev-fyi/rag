00:04:13.370 - 00:04:47.282, Speaker A: You people roll in. Seems to be on mute. Is it still on mute? Can you guys hear me now? Doing a new setup this time. So let me know in the comments if you guys can hear me. Good now. Okay, cool. Great.
00:04:47.282 - 00:05:18.058, Speaker A: So we're actually going to go ahead and jump into it. Is live chat enabled? Yep, I just enabled live chat. How's the quality, by the way? We're streaming directly to YouTube this time, so I'm curious if the quality is better. Hello. Hello. Yes, sound is good. Okay, cool.
00:05:18.058 - 00:05:40.174, Speaker A: Yeah. How's the quality, though? I want to know about the quality. How are the visuals? All right, cool. It's 836. So we're actually going to go ahead and get started. We're going to jump into it. So today we are learning about Brownie, Python and DFI and getting all this into your, into a smart contract development framework.
00:05:40.174 - 00:06:22.558, Speaker A: So for those of you who are like, who are new to smart contract development or have just kind of got into remix, we're actually going to transition from remix to. So we're going to actually be working with. Let's scroll over to here. Visuals are good. Excellent. So if we're on the documentation here, most of everybody has been kind of working with remix so far. Right? If we go to using price feeds, like get the latest feed, we can go deploy this using remix.
00:06:22.558 - 00:06:46.706, Speaker A: We come here and. Good, I'm glad. Visuals are great. I had to learn how to stream to YouTube today. So everyone's like, okay, I can work with remix, I can deploy a remix. This is great. But there's some issues here, right? If we want to do a random number, for example, right? Remember we got to compile it and it looks like we even have a compilation error.
00:06:46.706 - 00:07:48.634, Speaker A: Where is it? I was messing with the other day, we got to compile it, then we got to switch to inject web3, then we got to deploy it. After we deploy it, we have to fund it, and then we have to request, then we have to wait for the request to come back and there's a lot of stuff that we got to do, right? And imagine if we had a sufficiently complicated smart contract platform where we have to do a lot more button clicking and a lot more kind of bouncing around. Obviously this is going to be very annoying and very difficult. The other thing is oftentimes when we test our smart contracts and we can write our tests in solidity, which I haven't gone over, we will go over that in the testing and multichain workshop. But if we want to test our smart contracts and we want to do other things with our smart contracts, test our smart contracts in a way that interacts with other things in the real world. Well, it's a little bit difficult, right? Because we have all these buttons and it's hard to interact with the real world just with solidity. So we actually move to a smart contract development framework to do that for us.
00:07:48.634 - 00:08:08.610, Speaker A: So I'm going to zoom in a little bit here. So this is nice and big, so everyone can see. Let's make this a little bit smaller. So we use a smart contract development framework. So most of you have probably heard of truffle, some of you have probably heard of hard hat. And the other one that we're going to be working about today is going to be brownie. So Brownie is a Python based smart contract development framework.
00:08:08.610 - 00:08:44.074, Speaker A: Excuse me. And I really like it because I'm a Python enthusiast. And so actually a number of the top DeFi projects too, they're using this. So if we go to DeFi pulse, and again, yes, I know the focus of this is going to be Defi Brownie, I believe, and feel free to correct me if I'm wrong, Badgerdao is using brownie, I believe alpha Homora is using brownie. Urine finance. Where is urine finance? Urine finance is using brownie. So a number of these products are using brownie.
00:08:44.074 - 00:09:26.554, Speaker A: And I really like that because a lot of the financial world uses Python anyways, because Python has a lot of great libraries and great tools for deploying smart contracts. So this is a smart contract development framework. So let's just go through some of the basics of brownie. Then we'll go through the brownie baking a chainlink mix. This will actually download bells and whistles, like everything that you need right into your smart contract, right into your local environment. So you can actually do everything. So the first thing you need to get set up is you do need two requirements, right? And if we can even go to the Brownie docs and I should leave a.
00:09:26.554 - 00:09:48.100, Speaker A: I'm going to add this to the chat for the brownie documentation. To install it, we do need Python installed. So if you don't have Python installed, you want to use this, you need to install Python. Once you have Python installed, they actually recommend using PIPX. I don't like using Pipex. We'll do pip install brownie. I already have it installed, so I'm not going to run it.
00:09:48.100 - 00:10:16.834, Speaker A: We also need Ganache ClI. So this is also something new if you've been following along with the workshops. Ganache CLI is a local command line blockchain. So in a lot of our demos we've been deploying to a testnet, right? And we've had to get the Testnet tokens and the Testnet faucets in order to deploy to the networks. Ganache is a local blockchain. So it's a blockchain just on our computer that we can interact with a little bit quicker. A little bit faster.
00:10:16.834 - 00:10:53.762, Speaker A: Obviously the caveat here is that we do need to kind of mock oracles when we're working with our local chains because there are oracles actually watching Covid, there are oracles actually watching rinkby, there are oracles actually watching Mainnet. When we do it on our local development, we need to basically mock or pretend the oracles are there. We'll go over that if kind of freaking you out. Don't worry about it. We'll go over it more in the testing and multi chain workshop this week. But for now that's something to be aware of. But we can still deploy to our testnets, we can still deploy to our maintenance.
00:10:53.762 - 00:11:22.930, Speaker A: And this is what using a smart contract development framework is what pretty much every development professional development project uses, whether it's truffle, hardhat or brownie. And again, we're going to go over truffle and hardhat later today. So really excited for that. So how do we get started once we have Ganache installed and Brownie installed? And again, for Ganache you do need node js. So there are a couple of requirements here. If you're lost or confused, feel free to drop into the chat. But what we can do is Brownie init.
00:11:22.930 - 00:11:52.170, Speaker A: And this will actually create a new Brownie project. So you see, and again, I'm using visual studio code. You see on the left hand side here we have our setup. These are all the files that are now in here. So if we clear this out ls, we have build contracts, interfaces, report scripts, tests. So everything on the left here gets us set up and all we have to do is do brownie in it and we have a platform ready for us. So what do all these folders mean? What do they do? Let's talk about it.
00:11:52.170 - 00:12:25.974, Speaker A: So first is build, right? So when we run our compile command, everything, all of those contracts get compiled and all the information about the compile, the compilations and the deployments gets put into this build folder. So I can go ahead and run Brownie compile products have been compiled, build artifacts, saved users, patrick code, demo, blah blah blah, build contracts. So everything's going to be saved in here. I don't think I have any contracts. I don't have any contracts right now. So it's just blank. Right.
00:12:25.974 - 00:12:46.122, Speaker A: So that's what Brownie compile does. Oh, and if you want to see all the commands we can do, like Brownie, just run Brownie. We can see all the different commands in here. So we have init bake, which we'll talk about in a second. Compile. This is a huge one. Brownie test again.
00:12:46.122 - 00:13:10.034, Speaker A: Brownie test. I don't know if we have any tests written yet. It's just blank. We don't have any tests written. But now we have a test js, which is cool, or test JSON compile and run are going to be some of the biggest ones we work with. And when we do multichain it's going to be networks as well. I don't work with the GUI so much, but if you want to learn more about the GUI, you can check that out as well.
00:13:10.034 - 00:14:01.320, Speaker A: So let's do a really simple smart contract. So let's do new file. We'll do hello sol, we'll do Pragma, whoops, sorry. 1 second here. Pragma solidity 0.6.0 and we'll do contract hello. We'll do a public un 256 or, excuse me, public string hello or greeting.
00:14:01.320 - 00:14:40.808, Speaker A: I can to roll this down now. Public string greeting again. This is going to be our global contract variable and this is how we define the contract. And we get into the contract. And then we're going to do constructor public and then we're going to do greeting. Greeting equals hello. What's wrong? What's Matt here? Oops, sorry, string public greeting sorry.
00:14:40.808 - 00:15:50.668, Speaker A: Now we can run brownie compile and we can look into build and we see we have our Abi that we need. We have all this information in here. Abi is kind of the most important, we have all this information in here, right, which is awesome because now what we can do is we can build a deploy script so we don't have a, we don't have any, any way to deploy right now, but let's go ahead and build one. So the scripts is where you're actually going to build your deployment scripts, right. So for truffle and hardhat they have what's called like migrations files or, excuse me, just truffle has migration files. Hardhat has just like know, same as this has hardcore just built and then, sorry, this is going to be red because I have a different solidity thing, but don't worry about that. Now, but in order to do these deployments, we need to make a brownie config.
00:15:50.668 - 00:16:24.764, Speaker A: So we're actually going to go ahead and create a new file, and it's going to be called brownieconfig Yaml. And in this file, this is going to define all of our network information, where we want to deploy to, how we want to deploy to, so that we don't have to create like, a custom script every time we deploy to a different chain. And again, feel free to ask a bunch of questions here. I'm monitoring the chat, and I love to make these interactive. If you're super blown away, you're like, I have no idea what you're talking about. Feel free to drop into the chat. I am very actively watching that there.
00:16:24.764 - 00:17:07.930, Speaker A: So we need a brownie config. And yes, it's very humorous and sweet. And all the smart contract development frameworks are very fun like that. So in our brownie config, we can add a network section, right? And so we want to do a default section. Let's do default coven, right, because that's what we've been working with. So we'll say the default to coven and we can define our coven network. So in our coven network, let's do, we want a link token, a link token address, which is going to be right here.
00:17:07.930 - 00:17:47.508, Speaker A: And then we also want to define our wallets. So wallets. And we're going to do from key, private key. So this is pretty much all we need to deploy things. We probably don't even need this link token section. The private key is an environment variable that we're actually going to set. So for those of you who don't understand environment variables, if you're like, I don't know what's going on, feel free to just swap this out with your private key, which will be like, blah, blah, blah, blah, blah, whatever your private key is, if you don't understand environment variables, you can go ahead and swap it out.
00:17:47.508 - 00:18:32.352, Speaker A: Otherwise you can do export private key equals, and then blah, blah, blah, blah, your private key in here. What is your private key, you might ask, and why do I need it? Well, when we deploy our smart contracts, same as remix. Remember how in remix, when we hit this deploy button, metamask pops up, right? Metamask goes, hey, what you doing? Let me actually move it over. Do you want to confirm? Do you want to reject? What do you want to do? So we actually are deploying from our wallet. So same thing with Brownie. And with our smart contract development frameworks, we need a way. And this is actually like this, we need a wallet to deploy from, right? Because it costs gas.
00:18:32.352 - 00:19:31.750, Speaker A: So this setting it up like this is going to be the exact same as if we were deploying on metamask, right? So great. So what is the next thing that we need to do if we want to deploy this to 1 second, if we want to deploy this to Covid, same as remix, right? What we want to do is we want to come to scripts, we'll do new file, we'll call it deploy Py. And I don't have this specific demo up because we're actually going to move to an even better demo. But if you guys want this demo, let me know in the chat and I'll push it to a library so that you guys can follow along here. So we want to actually create this, we want to create this deploy script, right? So then we can just run brownie, run scripts, deploy Py, and then we choose the network. Network coven. That's how Brownie knows which one of these networks to work with.
00:19:31.750 - 00:19:50.856, Speaker A: We're actually going to kill for now. So deploy Py. What do we do? So we're going to do a couple of different things here. So first we're going to import some stuff from Brownie. So once we have Brownie installed, we can do this. We can do from Brownie, import network, config. Actually, we probably don't need config.
00:19:50.856 - 00:20:19.200, Speaker A: Let's just do network for now. Oh, actually we do need accounts. Accounts. So we'll import, network and account. So these are kind of brownie classes that we can use to work with the networks and work with our accounts from our config file down here. Right. So then what we're going to do, we also need to employ import, hello, Sol.
00:20:19.200 - 00:20:35.548, Speaker A: And actually, this is bad convention. Let's rename capital h. It's better, it's better to do capital H's. So now let's rerun Brownie. Compile. And in here, contracts. Hello.
00:20:35.548 - 00:21:00.790, Speaker A: Json. Great. Lowercase is generally typically reserved for like instances of something. So now we'll do, we'll define our main function. I usually do like if name equals equals main. But don't worry about that for now. We'll keep it nice and simple for the time being.
00:21:00.790 - 00:21:45.330, Speaker A: So def main and what do we need to do? So we first need to get an account to deploy from. So we're going to call it, I usually say dev, but you can call it whatever you want. Maybe you want to call it my account equals accounts add. So we're adding an account. Accounts add, and we're actually going to do import Os. And since I have mine defined in my config that this is an environment variable, I'm going to do os, get env. So I'm saying I'm getting the environment variable from the config in the wallet section of from key.
00:21:45.330 - 00:22:14.090, Speaker A: I didn't import config. I probably should do that config. You, you can also, you can also add accounts via the command line. We're just going to do it this way just so that you guys can be up to speed with this. So now we have an account that we can actually deploy from. It's saying, hey, you made this, but you didn't do anything with it. Is there a net library? Not that I know of.
00:22:14.090 - 00:22:35.872, Speaker A: There might be, though I'm not actually 100% sure there. And I need to make sure my little camera is in the way. So I'm actually going to turn off my camera so we can see everything. So now what we want to do. Okay, great. So we have this part. Now what we want to do is we want to actually deploy it.
00:22:35.872 - 00:23:11.100, Speaker A: So we'll say hello equals hello, deploy. And we can check our hello. Does this take any parameters? No, it doesn't. So we can leave this empty. However, whenever we deploy something, it needs to come from a wallet. So we always have to end our deployments with a from my account. So we're saying that my account is going to be the one to actually deploy this.
00:23:11.100 - 00:23:47.130, Speaker A: Right. So this is going to be literally the exact same as if we're deploying straight from remix because it's going to be pulling right from our metamask accounts. Right. And then we'll end it with like a print hello address. So once we do this, we can actually see that these contracts have a ton of really useful attributes that we can use to deploy stuff. So let's go ahead and do brownie, run scripts, deploy Py, network Covid, and we'll see. Oh, I ran into an issue here.
00:23:47.130 - 00:24:23.270, Speaker A: Os has no, I should spell get correctly. Let's try again. So we see, we get a transaction sent. We can even go check ether scan, coven, pop the transaction in here. We can see literally the exact same as remix. And it looks like hello has been deployed. If we hit this, it looks like it's still going through.
00:24:23.270 - 00:24:53.724, Speaker A: Am I in Covid? Ether scan. And there it is. It's right here. So the other thing that we need too is that. And then I actually didn't say this and I apologize. We do need an infura API key or a web3 key. So if we go to the brownie docs again, I apologize.
00:24:53.724 - 00:25:36.056, Speaker A: It. We do need this environment variable. So sorry, I did not go over this. We do need this environment variable, web3 inferior project id. And this is going to be your project id from inferior. You can go to inferior and just get a free account, get a project ID and then just do export web3 inferior project iD equals, you know, whatever your project ID is going to be. So sorry, I did not go over that.
00:25:36.056 - 00:26:02.752, Speaker A: So you will need that as well. That's an environment variable that brownie just natively looks for. That's why we don't have to define it. You can change it so that it can look for whatever host that you want. But for now, we're just going to stick with the environment variable because it makes things easy. That's how we deploy and work with brownie. So I do want to switch to kind of a full end to end chain link example with defi.
00:26:02.752 - 00:26:45.312, Speaker A: So are there any questions at the moment before we kind of switch to the more complicated version? And by more complicated version, I mean the version where we can actually do way more fun stuff. All right, cool. We're going to move on to actually then. So I will push this up if people ask for it. Hey, where's that hello world one? I will push this up, but let's go ahead and make a different one. So we'll do make dir. Brownie chain link.
00:26:45.312 - 00:27:10.404, Speaker A: Actually, I can just do this. Yeah, make dir. Brownie chain link CD Brownie chain link clear. What Brownie has is this cool feature called baking. Right. So what we're going to do now is we're going to bake smart contract chainlink mix. We're going to bake the smart contract chainlink mix.
00:27:10.404 - 00:27:59.690, Speaker A: So this is all the code in here for this mix. What it does, and it's got this super fun little logo here. What it does is it imports pretty much everything that you're going to need to work with chainlink smart contracts right into your local development environment, which is really fantastic. It's called baking, which is kind of a cute play on words, obviously. So we're going to do brownie bake chainlink mix. And what this does is Brownie will pull everything in from Brownie mix, has kind of like duplicates everything from that repo into its own repo. And now what we have, if we do an ls, we have this chain link CD code demos, brownie chain link.
00:27:59.690 - 00:28:25.760, Speaker A: Now we have this chain link file. So actually I usually do. Like, I'll CD into chain link, I'll copy r star, and then I'll move it back one. So I go, boom, boom. Ls removed r chainlink. So if that confused you, what I did, don't worry about it, just go into that chain link bit. And now we're going to open up our visual studio code for this new folder that we just created.
00:28:25.760 - 00:28:50.596, Speaker A: Boom. And so we have a very similar setup here. Obviously, we have some additional bits, we have requirements, text, kind of everything we need for like a full python project. We have a readme, we have mit license, which basically means everybody can use it. And then we have a much longer brownie config. I will go through this in a second. But we have end to end tests.
00:28:50.596 - 00:29:07.952, Speaker A: We have a ton of scripts, reports is empty. We have some interfaces. We have this awesome, this super cute brownie chain link thing. We have our contracts and we have some build stuff. So we have a lot more stuff in here to work with. And this is everything end to end that we're going to need to do anything with Chainlink. So it's going to be the same things, though.
00:29:07.952 - 00:30:00.440, Speaker A: So if we look at the config, we see we're doing wallet distill from key. If you want to do from mnemonic, you can change all your scripts to do from mnemonic instead of accounts add. We still do need that inferior key, that web3 variable, and that's defined in the readme as well. If you want to change that, you can look into the different hosts of Brownie and then actually pop that into your config here. Hey, Patrick, why did you archive the Chainlink mix repo a few weeks ago? Are you working on a new version? Good question. So I archived it in my repo so that the default real one would be the smart contract kit one. So in Patrick Collins'repo, it's archived, but in Brownie and smart contract kit, it's live, and that's the one that I'm working on now.
00:30:00.440 - 00:30:20.104, Speaker A: So instead, I just took it off of my repo and put it into the real one. So maybe I'll delete the one in my repo so that it's more clear. Good question. Thanks for asking. So we have everything that we need here, right? So we even have tests. Brownie run test. No, that's not it.
00:30:20.104 - 00:30:47.948, Speaker A: Excuse me. Brownie test. And tests are really important. And this is also one of the huge pieces that makes running these things in a framework like this so much easier. I can just run brownie tests and I can do a ton of stuff. I have four passed, five skipped and I can do things much quicker and iterate much faster with my testing and my process. Again, we're going to go more over tests later.
00:30:47.948 - 00:31:25.836, Speaker A: I think it's at the end of the week that we're going to go over tests. But tests make a project really kind of come to life and this is what professional projects really do. You pretty much have to have tests. You really can't go to mainnet without tests and it helps your building process so much more because you can iterate quickly. Why do we need infura? Good question. So Brownie natively just looks for that environment variable, that web3, web3 inferior project id in order to do our deployments to infura. This is what it is looking for.
00:31:25.836 - 00:32:00.490, Speaker A: If you want to just go to test locally and deploy locally, you obviously don't need it. You just have your default network to development and it'll spin up a local ganache for you. Whenever you do that, you can change the host, I believe it's the host keyword. I'd actually have to double check to like HTTPs, like if you want to use alchemy or something. Alchemy, whatever. And this is going to be that RPC URL. I think I have to double check, but I believe that that's what it is.
00:32:00.490 - 00:32:28.344, Speaker A: So you don't need infuria. But infuria kind of comes like it looks for infuria for starters. So we have a whole bunch of stuff in here. Let's look at a sample deploying of a contract. So let's say we wanted to do that price feeds thing, right? We wanted to look for the ETh USD price feed on the COVID network. In our config here we can see we've got a whole bunch of stuff. So we're defining the link token.
00:32:28.344 - 00:32:47.248, Speaker A: That way we always know where the link token is. We're defining the key hash. This is for the chainlink VRF looking for that key hash. This is kind of the default oracle fee that most oracles have on Covid. Obviously you can change this depending on the oracle. This is just a default oracle that I picked and a default job id. It's literally the exact same as what's in the documentation.
00:32:47.248 - 00:33:16.450, Speaker A: So what we can do, instead of kind of going to remix, hitting deploy, clicking all those buttons and stuff, we can just do brownie run scripts and then there's a whole bunch of different scripts in here. Let's do a price feed script. Price feed scripts. I think it's just deploy. Yes, deploy price feed consumer v three. Again, we want to hit that networks that networks flag. We'll do network coven and boom, let's run it.
00:33:16.450 - 00:33:42.376, Speaker A: So this is going to deploy right to the coven network. And again, you can even, and another reason why this is preferable to remix is you can do the same thing with a main net, right? So you could just do network mainnet. And this is where you'll deploy your main net smart contract. So we have price feed deployed it here. Again, we can go check ether scan. Boom, 9 seconds ago. Great.
00:33:42.376 - 00:34:22.896, Speaker A: I'm going to show you a very fun thing about this in just a second. I have some other random notes in here. This is kind of the deployment script we'll go over in a second. But we also have this read price feed py so we can do brownie, run scripts, read, excuse me, price feed scripts, read pricefeed Py, network Covid. And it's just going to read back. So this is the exact same as like hitting that read button so we can actually interact with them. Now what I'll do a lot too is I'll do brownie console network coven.
00:34:22.896 - 00:35:01.052, Speaker A: And this will pull up like a shell of us being inside brownie as if. And we can do whatever we want in here, right? So we can even look at this readprice feed py. This is actually kind of a cool convention. Whenever we deploy a smart contract, it puts it basically into a queue, into a list. And whenever we say, hey, we want to get the price feed contract, this is the method that just says, hey, get the latest price feed contract. The latest one that we deployed, right. Because if we go into the build, we can see deployments.
00:35:01.052 - 00:35:32.920, Speaker A: 42 is the chain id for Covid. We can see we only have one deployment right here, but if we deploy a whole bunch, this is going to fill up with a ton of different addresses. Right? And you can go ahead and clear it out whenever you want. So we'll say, hey, we want to get the latest price feed deployment and we're going to save it to our price feed contract. So go ahead and run this. And now if we do price feed contract. Price feed contract, we can see, hey, there's a price feed contract here, right? And then we can even call it priceycontract.
00:35:32.920 - 00:35:53.600, Speaker A: What is it? Get latest price. Whoops, I did two dots and we'll get something back. So this is, we don't even have to write a script to read our contracts, we can just go right into the console. We can do whatever we want. We can do price feed contract. Oops, I did it again. Pricefeedcontract.
00:35:53.600 - 00:36:21.272, Speaker A: This is usually my cheaty way of seeing what I can do on something. We can see all this different stuff about this price feed contract. So dict is, this is like a native thing to python where you can kind of check the attributes of pretty much any object. If we just do that, it's going to be huge. So we want to look at the keys and see what we can go into there. So we have topics selector, signatures by code, get latest address. This is also where all your functions will be.
00:36:21.272 - 00:37:12.916, Speaker A: So pricey contract address. Like we were showing before Abi, everything that we want is pretty much here. Looking at some questions here is brownie used for Python backend? So it's not really a backend, right, because it's not really a back end. Right, because the back end is really Ethereum or whatever chain that you work on. And again, if you want to do multi chain stuff in the, which we'll, which we'll cover later, we can add different networks, we can work on binance, smart chain, we can work on Matic, we can work on whatever we want to do with this. It's not really a backend, it's more of a deployment. So this is going to be where we're going to be testing and running all of our smart contracts.
00:37:12.916 - 00:37:52.152, Speaker A: Testing, deploying and running our smart contracts. So it's not a backend per se because the back end is really going to be Ethereum or whatever smart contract development platform you're running on. Good question. Does Brownie support Python print statements with a sol like hardhead? I think what you're asking is like in the contracts. Give me. That's a build. I think what you're asking is like print, can we do like print link? Like how hard hat can do that? Actually, I don't think so.
00:37:52.152 - 00:38:29.604, Speaker A: But this is something that we could put into the request and that would be pretty awesome if it did have actually. So good question. Anyways, and we only have 20 minutes left. Okay, so where was I? So we can quit the console. Clear. And yeah, that's how you're going to deploy things as well. So all the tests are going to be here, all the deployment scripts are going to be here, and it's going to be the same thing for working with.
00:38:29.604 - 00:38:57.996, Speaker A: Let's do a VRF. Right? So with VRF, we need to deploy, fund and request. We can add these all into one script and just do everything py. I just split them out just to make it more obvious. Is there any way to unit test in solidity? There is. We will be going over testing in our testing workshop. I like to do most of my tests actually in whatever language that I'm working with.
00:38:57.996 - 00:39:42.940, Speaker A: So for example, if I'm using brownie, I like to do most of my tests in Python. If I'm using hard hat or truffle, I like to do most of my tests in Javascript. You can do unit tests in solidity as well, though, and it's probably good to do both, to be honest. Good question. Let me hide myself again. Okay, so let's do a VRF example here. Right? So again, we're going to do brownie run scripts, excuse me, brs scripts, deploy network Covid.
00:39:42.940 - 00:40:14.164, Speaker A: Again, it's going to be literally the exact same thing as using remix. Great. So we have something here. We can even run a fund script. So we'll do fund py. And again, if you wanted to, you could just wrap these all up into one script. I like to kind of split them out for ease of understanding.
00:40:14.164 - 00:41:00.748, Speaker A: So we have a fund. So this is the exact same thing as deploying on remix, then funding it on remix. Obviously this is even easier. And then we can do request randomness py, right? And so this is going to be the same as hitting that request randomness. I believe in my request randomness script. I have just kind of a static seed that I've set because remember, we have to set that seed phrase, but this is how small it is, right? So we're just going to do dev accounts, add our private key here, our VRF contract, static seed, et cetera. Now we can either go into the console and read that random number that we got back, or we can just run our read random number py.
00:41:00.748 - 00:41:39.200, Speaker A: And again, this is all happening real on the coven chain. So then we're going to do request randomness, we're going to do read random number network coven. Hopefully it responded in time and boom. Now we have this massive random number that we get back. And so it's literally the exact same thing. So for the other thing that makes the smart contract development framework so fantastic, and this is also for truffle and hardhead, which we are doing later today. There is, what I like to look at is mocks.
00:41:39.200 - 00:42:15.792, Speaker A: Mocks are incredibly useful for deploying locally and working with your chain locally. So if we go check out our deploy VRF script, deploy price feed script, go check out our deploy price feed scripts. We have a lot of weird stuff going on here. Can I make this bigger? No, I can't because then you guys can see, I can close out the side. Yeah. Okay, cool. We have a few different bits here, right? So first we have our main function.
00:42:15.792 - 00:43:00.376, Speaker A: So this is to deploy a price feed. We have network show active, if the network showactive, and again this will return like coven, Mainnet, fork, Hardnet, whatever. If it's a main net fork, and I'm going to talk about this in just a second, we'll deploy using the US price feed on Mainnet. Otherwise we'll just do it regularly. What else we could do is we could check, hey, if it's a development, set something else up. If it's development, maybe we want to, maybe we want to deploy our own mock aggregator, right? And so in my testing, conftest py, don't worry about what this means for now. We can do this exact same thing in a deployment framework.
00:43:00.376 - 00:44:19.348, Speaker A: We can do something like if network deck show active is development, deploy a mock price feed, right? And this is super helpful because then we can do all of our interactions with a price feed on a local testnet without actually having to spend any real Covid or any real, I'm saying real, but like Covid is fake without having to spend or wait for transactions on any testnets. So mocking these contracts is really helpful for iterating quickly as well. We'll go over mocking more in the testing workshop, but this makes it really easy to mock, deploy and run with our smart contracts here. And feel free to keep asking a lot of questions because I know I'm going over a lot of different things. Here's open editors. And the last thing I want to show you guys is doing the API call because I think we're pretty much running low on time. I'll do the API call real quick.
00:44:19.348 - 00:44:55.900, Speaker A: Actually, it's the same as VRF. We'll skip over the API call. If you guys want to see more on how to use Brownie and how to use it with Chainlink and everything. We can even check out like urine finance GitHub. And this is what I love about open source. We can see pretty, oh, that is, oh, maybe they switched. We can see kind of how other people use this as well, right? We can come to urine finance for example, go to contracts, go to their different scripts.
00:44:55.900 - 00:45:43.520, Speaker A: We see they have like deploy PY, which is going to be really similar to what we're doing. They have the brownie config, brownie config they have a whole bunch of different stuff in here as well. Don't worry about a lot of this for now. Obviously the compiler is going to be your compiler version, but you can kind of check out what different projects are using for the brownie. But I don't think we're going to have enough time to go over like an end to end defi thing. But using these scripts and using these price feeds. Price feeds, for example, these are going to be the tools that are really going to help you build something awesome in DFI, these price feeds and using kind of these smart contract development frameworks.
00:45:43.520 - 00:46:19.390, Speaker A: We have about 15 minutes left. I'm happy to take questions or I'm happy to go through some type of example that anyone wants to see. I didn't have enough time to kind of go over my last little bit, but yeah. What do you guys want to know? What else do you want to see? I'm monitoring the chat now. We'll do a quick transition. Yes. Is anybody completely confused by this or is everyone like, yep, makes sense.
00:46:19.390 - 00:47:04.946, Speaker A: I'm ready to build the next defi protocol that's going to take over the world. Have you worked with hard hat? It's really good as well. Yes, we are doing hard hat later today, actually. Hard hat is awesome. Hard hat is definitely awesome. Still says we're only in 720p. How do we get this thing to do 1080p? Well, if everybody is good to go, we'll jump off.
00:47:04.946 - 00:47:41.470, Speaker A: If there are no more questions here, I'm confused as to what the difference is between remix and brownie. Okay, good question. So when we're working with remix, right, let's go to remix here. When working with remix, we can pretty much do everything here now. Remix. If you want to do everything from remix, I got to switch. If you want to do everything from remix, you absolutely 100% can just do everything in remix, you can deploy smart contracts, you can do literally, you can test smart contracts, you can do everything you want.
00:47:41.470 - 00:48:04.208, Speaker A: Doing everything in remix, you're going to do all this clicking around. Okay, I want to do injector web3. I want to deploy. Okay, confirm, going to deploy. Going to wait now we're going to wait for a little bit. Okay, random consumer. Okay, I need to fund it now.
00:48:04.208 - 00:48:25.016, Speaker A: Then I got to go here. Let's fund it. Let's send it some link. One link, move on. Okay, fund it. Going to wait for some link. And you have to do all this clicking around, which is fine, but it's going to slow down your development process.
00:48:25.016 - 00:49:18.200, Speaker A: If every time you want to do that here, you can iterate much quicker and much faster on your development process, right? You can change your networks to being development and you can deploy mocks every time, right? You can have these incredibly intricate smart contracts because you can do whatever you want with this repository. You can integrate your code however you like and you can iterate much faster. So just the development lifecycle in a smart contract development framework like Brownie, like hard hat, like truffle is going to be much better than if you're working just with a remix. So again, if you want to just do stuff with a remix, you are more than welcome to. You absolutely can. Remix is a great tool. I just think if you want to go faster, you want to be more productive, you want to have more sophisticated testing, you want to use something like brownie or hard hat or truffle.
00:49:18.200 - 00:49:54.230, Speaker A: Hopefully that answers the question, what is the best practice for triggering function in smart contract by schedule? This is something that the keepers actually do. Yeah, actually 100%. This is something that keepers do. So we actually just put the docs up here on this and they're still in beta. Oops. Docs to chain the link. Looks like it's missing for some reason.
00:49:54.230 - 00:50:15.116, Speaker A: All right, well, I'll add it back, but there should be a keepers bit here. So we'll add it back and we'll get it there. So keepers, if you want to learn more about that, check out keepers. I'll add it back after this. For some reason it's gone. What are the benefits of using something like brownie? Kind of like what I just said. Oh, it looks like you had the same question.
00:50:15.116 - 00:51:08.498, Speaker A: Is there going to be a front end workshop? How do you integrate brownie smart contracts with the Django front end? Yes, we will do that next week. I put it on the schedule, so I don't think we're going to have time. Django is actually a backend framework, so I think it'll be more with like, oh no, I forgot, you can do Django front end. Most of what you'll see is going to be with like react though, so it'll probably be more focused on react though. So you can have your Django back end with a react front end, but we'll be working on just like just a pure react front end. Remix is browser only. Brownies are framework that lets you deploy and interact with your contract utilizing Python scripts.
00:51:08.498 - 00:51:38.862, Speaker A: Yeah, exactly. So you can do just a lot more intricate things once you enable scripting. Are there any other must have extensions we need for solidity and vs code. And does Python use SQl alchemy flask for smart contracts? So it doesn't have any of that stuff really. But yeah, for solidity plugins. Excuse me, you want to go to plugins? I just have the solidity plugin right here. Awesome.
00:51:38.862 - 00:51:58.402, Speaker A: Didn't know Chainlink was building that. Yeah, yep. Transaction scheduling. So check out keepers. I'm not sure why it's missing, but we'll add it back. Can you import other Python libraries into Brownie to process data and that will then be used in a smart contract? Yes, you can. And this is one of my favorite parts of Brownie, is you can do everything that you want to do in Python, but in a smart contract development framework.
00:51:58.402 - 00:52:13.594, Speaker A: So you absolutely can. Yes, great question. That is another huge advantage of this. Keepers. You mean calling a smart contract according to schedule? Yes, keepers. We will add that back in. I don't know why it's gone.
00:52:13.594 - 00:53:03.670, Speaker A: I will figure out after this. Can you combine browing with Django? Yes. Again, these are just pure Python scripts, right? If I wanted to do just print. Hi. Get rid of all this, right? I can just do Python scripts, VRF scripts request randomness if name equals equals main. Hi. I mean these are just, these are literally just python scripts.
00:53:03.670 - 00:53:28.482, Speaker A: Anything you can do in python you can do here. So yeah, you absolutely. Blockchain is DB already. No need for flask, blockchain is a back end already. You still can if you want, but yeah, preferably if you want a true blockchain application. You're correct. No need for SQL blockchains DB already.
00:53:28.482 - 00:54:09.490, Speaker A: No need for flask, blockchains backend already. Although IPFS is a sponsor, protocol labs is sponsoring this and they have us. So storing a ton of data on chain is actually really expensive and can get incredibly expensive. So what is kind of what I think I'm really excited for is using ipfs or like a decentralized database or like a decentralized blockchain dedicated to being a database, for example filecoin or ipfs or whatever, using that as actually the database and then using Ethereum as your smart contract platform. That is something I'm really excited for. So if you're looking to do something crazy, do something like that. Something crazy.
00:54:09.490 - 00:54:59.002, Speaker A: Cool. Is that the keeper link I posted above? Patrick, I don't see the keeper link you posted above. What will the differences in chainlink node build with OCR online? Current doesn't chain link node build with OCR online. Yeah, so the outdated, I've been meaning to update that most of it's still the same, and everything in the docs can still get you up to speed. So if you just follow the docs, you'll be good to go. Good questions. Any other questions? And, yeah, pretty much anytime I start a new project, I literally just do brownie bake chain link mix.
00:54:59.002 - 00:55:26.060, Speaker A: This is what I do for all my projects now. Brownie Bake chainlink mix CD into here. Start going. Because again, the brownie tests, all these tests are being run locally and they're utilizing these mocks, and it makes my life a million times easier. Like, imagine if I had to test all these weird things manually over remix. I would not be happy. Remix is still a great tool, though.
00:55:26.060 - 00:55:54.014, Speaker A: All right, cool. Well, if there are no other questions, I'm really looking forward to seeing what people build with this tool. Yes, you can slap like a react front end on this, or whatever front end you want. You can use Django front end, or whatever you want to do. You can do literally everything that you do in python in this framework. And that's the other advantage. If you want to do a full end to end DaP, this is a framework that you can do that in.
00:55:54.014 - 00:56:19.970, Speaker A: If you're more interested in truffle and hard hat, definitely check out our workshop later today where we will be going over a little bit of both of those. We have a full end to end demo that we'll be showing. We probably won't be able to go over the front end that much because there's so much to talk about on the back end with truffle and hardhat, but we will be going over both of those. So I will jump off now and see you guys soon. Bye.
