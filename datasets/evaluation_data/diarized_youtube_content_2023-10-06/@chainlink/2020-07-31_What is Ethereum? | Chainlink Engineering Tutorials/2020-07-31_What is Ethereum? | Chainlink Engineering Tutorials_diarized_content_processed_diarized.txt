00:00:00.330 - 00:00:25.602, Speaker A: Hi, welcome to the Chainlink Engineering Tutorials Ethereum Edition. We are going to learn how to build some of the most powerful, world changing, decentralized applications. This first video will be a little bit of context with what is ethereum and blockchain, and the rest will be more technical guides on how to get external data into your smart contracts.
00:00:25.666 - 00:00:34.342, Speaker B: If you have some software engineering experience but are new to blockchain, this is the perfect place to start. If you're already familiar with blockchain, then proceed to the next video.
00:00:34.476 - 00:01:16.430, Speaker A: If you're brand new to both blockchain and software engineering, then be sure to follow along with the documentation and the links, and reach out to discord, Reddit or other forums like Stack Overflow or stack Exchange eth for more help as well, and you'll be fine too. Learning blockchain is just like learning any other coding language. But first, to do that, we're going to need to know a little bit about how blockchain actually works. We don't need to dive too deep into understanding everything about ethereum right now, but if you want a deeper dive, we've got some amazing links in the description. So what is eth? What is ethereum? To understand Ethereum, we first need to know a little bit about bitcoin. First. Bitcoin came online in 2009, which allowed for peertopeer transactions without a centralized financial intermediary.
00:01:16.430 - 00:02:14.882, Speaker A: This was possible with the technology that eventually became known as blockchain. People thought this was amazing, but limited, and a few years later, a man named Vitalik Butrin published a paper describing a way to use this same blockchain technology to actually make entire decentralized programs and corporations, again without the need for a centralized middleman. This led to the idea of a smart contract. We use regular contracts every day, from our job salaries to our school loans to insurance, but they each have a centralized entity that needs to manually execute the deliverables on those contracts. Smart contracts, however, automatically execute whenever the parameters are met and do not need to rely on a centralized figure or entity to execute them. This is a huge improvement over traditional contracts because the traditional ones have a fundamental flaw. A malicious entity who owns the contract is now inclined to manipulate the execution of the contract for their own for profit gains.
00:02:14.882 - 00:02:55.774, Speaker A: This is a massive conflict of interest. On the other hand, decentralized applications automatically execute and are therefore tamper proof from these centralized entities. For example, your insurance company ultimately approves or denies whether or not you get paid on your claims because they own the contract. In a decentralized world, whenever you need a surgery, your house gets hit, or any other parameters of the insurance agreement are met, it automatically executes. This is a massive improvement on the model of trust for the world. The purpose of Ethereum is to build these decentralized applications integrated with these smart contracts. A decentralized application is also known as adapt.
00:02:55.774 - 00:03:50.498, Speaker A: So how does Ethereum work? This will be a really high level overview of both how Ethereum works and how blockchains in general work. For a deeper look, as we said, links are in the description to learn more. Something important to note is that Ethereum, bitcoin and a lot of other cryptocurrencies operate on their own blockchain. For the most part there are some exceptions and we'll go into that later, but for the most part, think of each blockchain as an independent chain. On regular applications today, all the data and logic that gets stored and executed happens on one server or one group of servers owned by a single centralized entity. Ethereum and other blockchains, on the other hand, operate from a network of servers, a decentralized network of servers, also known as nodes on Ethereum. Each blockchain node contains a full copy of every transaction and piece of data and piece of code executed that has ever happened, period.
00:03:50.498 - 00:04:29.790, Speaker A: So in essence, you can think of Ethereum as a database owned and operated by many people, or a distributed ledger, and that can execute code as well. Every time somebody makes a transaction or tries to execute code, that transaction or code is sent to every single node. If one node were to try to chain something, their blockchain node would no longer match what the rest of the nodes were saying and essentially get kicked out and be rejected. Their copy of the blockchain would now be invalid. Majority rules when it comes to the blockchain, there is more than one Ethereum network. The one that most people talk about is mainnet Ethereum or main Ethereum. But just like any other system or technology, sometimes you need to run some tests.
00:04:29.790 - 00:04:55.338, Speaker A: And there are many networks called testnets or test networks that don't cost any money and are used simply to test the technology of blockchain. There's a little bit of cryptographic magic that goes on behind the scenes to make all of this work. There are some great demonstrations on proof of stake, proof of work, and other blockchain consensus methods in the description as well. Now that you know some of the basics, there are three key pieces to keep in mind when talking about blockchain and Ethereum in general.
00:04:55.504 - 00:05:27.742, Speaker B: Number one, it's immutable. Immutable means it can't be changed. Since there are so many other copies of blockchain, it's hard to lose data or change the data without every other node picking up the slack. Number two, it's decentralized. Since nobody owns the Ethereum chain, all programs run without a centralized body. Number three, it's essentially incorruptible, since every other node has a copy of every transaction that's ever happened. If one node were to change something, every other node would notice and reject their chain.
00:05:27.886 - 00:06:06.426, Speaker A: There's also a little bit of cryptographic magic that goes on behind the scenes to prove what data is right and what data is wrong. But again, we're not going to go into that here. To interact and build some of these smart contracts ourselves, we first need to get a wallet that will hold our Ethereum tokens. Yes, some people use Ethereum to buy and sell on exchanges, but as engineers, we're going to use Ethereum as our transaction gas token. Whenever a transaction happens on the chain, all the other ethereum nodes need to do a little bit of work to make sure the transaction is recorded properly. They make sure our transaction goes through smoothly, and we pay the Ethereum nodes, also known as miners, when they're doing this. That's miners.
00:06:06.426 - 00:06:29.190, Speaker A: We pay them a little bit of ethereum as transaction gas. To get started setting up a wallet, head on over to our next video and you're already on your way to becoming a smart contract expert. See you there. And now we're off to the races. If you build something cool during this tutorial, share it. Twitter, Reddit, discord, wherever. We love seeing chainlink projects come to life.
00:06:29.190 - 00:06:59.770, Speaker A: And as you get stronger, be sure to stay on the lookout for hackathons, as they're some of the best places to try out what you've learned and just jump into the community as well. You'll immediately become a part one of the fastest growing communities of brilliant, exciting, and friendly engineers who all started right where you are now. For beginners and experienced developers alike, these hackathons are great places to show off your stuff, learn and try something new, and more importantly, become a part of history of this fourth industrial revolution. Hope to see you there as well. Bye.
