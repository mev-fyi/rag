00:00:09.210 - 00:00:38.838, Speaker A: So, thank you, everyone, for being here. So, I'm Johan. I'm a product manager at Chainlink. So I'm french with a very strong accent, as you can probably see. And, yeah. So, today I'm going to talk about Chainlink, what problem we are solving, what we are working on, and I'm going to make a demo of what's currently live and what we currently do using Chainlink. So, first off, as you may know, smart contracts are currently not able to access real world data.
00:00:38.838 - 00:01:38.650, Speaker A: That means that if you have a financial contract on Ethereum right now, it cannot access any market data, any FX data, community data. If you want to have an insurance contract on Ethereum, it cannot access iot data, for instance, to get the temperature of package or any kind of data that you would have in the real world is not accessible currently to smart contracts. And that restricts tremendously what you can currently have on the blockchain. So basically, what we are trying to do at Chainlink is connect real world data to smart contracts and to blockchain, whether it's on Ethereum, tezos, or any other blockchain. So that means that any kind of API endpoint that you have in the world should be accessible using Chainlink. That also means that currently, in the point where we are in the industry, people might not feel confident paying in crypto. I mean, even myself, I don't feel super confident paying in crypto.
00:01:38.650 - 00:02:18.866, Speaker A: You can be in this industry forever. It's so volatile. Maybe you don't want to make transactions in bitcoin or Ethereum. If the price is going to drop, if it's going to rise, then it's okay, but it's dropping quite a bit. So basically, what we want to do is to allow people to transact using APIs such as PayPal, such as Swift, such as any other kind of traditional API payment you'd be using in the real world. So if you have a smart contract on Ethereum that's supposed to trigger a payment, instead of having this payment in ether, it could be a PayPal payment, for instance. So here we have the inputs and we have the outputs.
00:02:18.866 - 00:02:51.074, Speaker A: What you also want to be able to have is triggering actions from one blockchain to another. So let's say something happens on the Ethereum blockchain. We want to trigger a bitcoin payment, or if a certain action happens on tezos, then we want to trigger something on Ethereum. So basically inputs, outputs with the real world and connectivity between chains. That's our goal. So that's a big goal. It's basically connecting the blockchain world to the real world and interconnecting blockchains together.
00:02:51.074 - 00:03:55.106, Speaker A: Right. So how do we achieve this? Well, currently we believe there is an issue with the ecosystem where if you want to connect a smart contract to the real world, you don't want to have one single oracle connecting the smart contract. If you've gone through all of this trouble coding a smart contract, deploying Ethereum, learning about Ethereum, getting ether, you don't want your smart contract, which is super secure, which is secured by thousands of nodes which are spread across the world. You don't want this smart contract to be triggered by one single oracle, which would be ultimately a point of failure. If you are a CIO or if you are a CTO in a big enterprise, you want to make sure that your system is secure, end to end. That means the smart contract, but that also means the inputs which are triggering the smart contract and the outputs the payment method. So that means that currently, if you want to have security at the data layer, so you have three layers, you will have the smart contract layer.
00:03:55.106 - 00:04:41.098, Speaker A: You would have the Oracle layer, the kind of nodes which are responsible to get data from data providers to the smart contract. And then you have the data provider. So the data provider can be Reuters, Bloomberg, any kind of data provider, which usually provides market data or iot data, et cetera. So basically, we apply decentralization to make sure that the data that's given, that's fed into smart contracts is as decentralized as possible. So we are applying the same methods that we use to secure smart contracts, which is decentralization. Instead of having nodes which are mining the state of the blockchain, we have nodes which are mining data at any point. Okay, so then I'm really not good with these slides.
00:04:41.098 - 00:05:21.614, Speaker A: I forget what's coming after and before. Now, just for a small example about this. So how would you use Chainlink in a real world contract? Let's say Alice has a contract with Bob and an SEO works, so she wants Bob to get her website across the top ten ranking on Google. Let's say if Bob is able to do this, then he gets a $50 payment. If he's not able to do it, then he doesn't get paid. So here I have a contract on remix. Who here is familiar with remix? You are using it, but let's see.
00:05:21.614 - 00:06:07.274, Speaker A: Okay, so quite a few people. So yeah, it's a very easy kind of ide that you can launch on the browser and allows you to easily deploy smart contracts and to showcase what we can do in not too hard of a manner. So let's say I'm going to deploy my smart contract so I can just transact, I'm going to deploy it using Robstone, which is one of the testnets. So we like to use robstone because usually it replicates the state of the main net as accurately as possible, which means that it's very often down also. So it's kind of risky to use in demos, but yeah. So here I'm going to show a bit about the variables that you have. So we have the oracle payments.
00:06:07.274 - 00:06:47.050, Speaker A: So the oracles which are going to provide data are going to get a payment, right? No one is going to be running a node and paying the infrastructure cost and not getting paid. So basically these nodes are getting paid in link token. So number of oracles. So how many oracles do we want to get data from? How many oracles are we going to use in our smart contract? In this case we'll have five. The number of oracle really depends on your use case. If you have a smart contract which is securing millions of dollars of values, and maybe you want more oracles, if you have $50, you can have five. It's fine even here.
00:06:47.050 - 00:07:18.354, Speaker A: I feel like five is way too secure, but that's fine. Minimum responses. So how many responses are we going to await before saying that this data is valid? So I sent a request, three people answered. Well, as soon as I get three answers, then my data is valid. All right, then we have the escrow amount. So how much are we going to get paid here? Is $50 required rank? So here I mentioned we want the website to be in the top ten. So that's what you have here, ranking URL.
00:07:18.354 - 00:08:06.354, Speaker A: So here, yeah, here I'm just going to show, so for the sake of this example, we just put up Nizi endpoint to see. So it's basically this data points which we can read from, and then we have the ranking path. I'll go into details on this after. Then we have an array with Oracles and these oracles. So these are addresses, right? So I'm going to show a bit about the chainlink network as it is currently here. As you can see, these oracles all have addresses on Ethereum, right? If I go to something called market link. So it's basically a marketplace of oracles, which was created by a third party called Linkpool, which has done tremendous work for Chainlink.
00:08:06.354 - 00:09:03.026, Speaker A: So basically these are super passionate people who have been running nodes for chainlink, preparing for a while now, and they've been on Mainnet for two months, which is as old as Chainlink, is currently on Mainnet. And these people are building third party tools for the ecosystem and providing a lot of value there. So basically this marketplace lists all the nodes which are currently operating on chainlink. So all the oracles which are currently mining data for smart contract creator. So here we have link pool, we have fuse, we have chain layer, we have linkforest, vtez, circus one. So what's good about this is really these nodes currently, if I was to go and check, for instance one, I could check and see who these people are. So I can see that circus one is a delegation service which is also running blockchain infrastructure on tezos and cosmos.
00:09:03.026 - 00:09:38.702, Speaker A: They have a big cybersecurity background. Zakimanyan is speaking about them. So Zakimanyan is a very smart person. So if he's saying good things about them, then we can say maybe they're smart. Basically you can see it is very transparent. You can check who these people are, who can check who is speaking about them, all of this stuff, right? And you can see how many jobs they have, how many runs they have, so how many jobs they fulfill and how many jobs they currently support. So if I go on to jobs, for instance, I can see what kind of jobs are currently available on the chainlink network.
00:09:38.702 - 00:10:26.930, Speaker A: So EUSD from cryptocompair, ecusd. So currently there is a lot of ethUsD, the network has been live for two months and the crypto prices are the most in want right now by Defi projects. So that's what a lot of node operators are feeding. We actually have a pretty cool, let's see, I'll probably show after. Yeah, we have reference contracts which are basically providing the price of ETHUsD, of BTC USD from multiple nodes across the network. And these prices are being fed by nodes that you can see here on the link pool marketplace. Okay, so here, basically I can go to this marketplace, choose who I want to use for my smart contract.
00:10:26.930 - 00:11:14.290, Speaker A: The more secure, the more reputation they have, of course the more I would be inclined to use them. So that's what you have here. In our contract we have oracles which are currently in the link pool marketplace, and that's how you be choosing them, these oracles here, then we have the jobs. So jobs basically Chainlink nodes are always monitoring the state of the ethereum network and searching for jobs to fulfill. So these jobs are basically what kind of data point I need to get, what kind of API endpoint I need to access. So yeah, basically these are the jobs that Chainlink nodes will be fulfilling. Then we go on to yes, so that's an array which will contain the ranking, basically like the different rankings, the answers that we get from our oracles.
00:11:14.290 - 00:11:50.510, Speaker A: And let's see, I'm just going also to launch my request. This way we don't have to wait too much. So yeah, before sending payments to Oracles, you need to make sure that your contract is funded with link token because link is basically the way of payment, the way to pay node operators on the chain link network. So here I'm going to send seven link. Notice that you need only five link. Yeah. I hope Rapston is going all right tonight.
00:11:50.510 - 00:12:23.090, Speaker A: Let's see fast. Okay. Yeah, so we are just using five nodes, one link for every node. So we need only five link. We are sending seven just for demo purposes. So what our link is sending, if we go to our requests, we can see different functions. So create request, for instance is just going to send a request for every oracle that you have in our oracle's array.
00:12:23.090 - 00:12:53.358, Speaker A: So very straightforward. And what is a request? So a request is basically, we can see it here. It's a getranking function. So this function is going to build a chainlink request. The chainlink request needs to have the URL which we are accessing, which is the paste bin I showed a bit earlier. So this can be an API endpoint, this can be any kind of API you need to access the ranking path. So that's the path that you are going to parse whenever we get our answer from our oracle node.
00:12:53.358 - 00:13:44.530, Speaker A: So here we want the ranking of the website. So we are going to parse, sorry, the ranking path variable and then we send our request basically then this function is called fulfilled ranking. So fulfill ranking is being called by node operators, by oracles whenever they fulfill the job id. So whenever they got the answer for our smart contract creator to look at, they will call this function and they will push their answer onto the rankings array. Whenever we get three responses, then we can aggregate the ranking aggregate. The ranking is basically going to check that. Basically the answers that we got prove that we are top ten for our website, which in this case we are.
00:13:44.530 - 00:14:27.246, Speaker A: And if we are, then we are going to get the price of ether using ETH USD reference contract, which I was referring above, and we are going to pay $50 worth of ether to Bob in this case. So let's see how it would all work. I think my link probably got transferred now. All right, so we have seven link, and we have zwither. So let's create a request and see what happens. All right. By the way, any questions for what I explained until now or all good with you? Okay, that's good.
00:14:27.246 - 00:14:29.950, Speaker A: Either I'm doing a very good job or a very bad one.
00:14:30.020 - 00:14:36.238, Speaker B: Okay, to define the nodes we're going to use before deploying the contract.
00:14:36.414 - 00:14:58.570, Speaker A: Yeah, so these nodes, basically it was what I was showing a bit earlier, you can find them on the link pool marketplace. So if I want to use another one, let's say I want to use Certus one, I could just go there, take the oracle address, copy paste and put it here. Let's replace for instance, honeycomb or secure data links by, you know, so basically.
00:14:58.640 - 00:15:03.770, Speaker B: I need to list a lot of nodes there in case there are any nodes that go offline.
00:15:04.270 - 00:15:14.960, Speaker A: Yeah, if one of the nodes go offline, the reputation is going to take a very big hit and you can be ensured that then you wouldn't really see them in the top rankings on the link pool marketplace. Right.
00:15:15.730 - 00:15:22.930, Speaker B: But suppose one node that I choose is not providing the data that I need anymore.
00:15:24.310 - 00:15:58.766, Speaker A: In this case, that's a public API, right? So the data that's being provided here, it's public. So that's no issue whatsoever. Every node should be able to use it if they are running the core chain link software. So yeah, that shouldn't be an issue. And if one of the nodes stop running, then you still have four other ones and your data will process if you get three transactions. Right now what you're referring to is really having deficient nodes. And the way you fight deficient nodes is by having more nodes and by having more reputable nodes, right? So that's basically the way to do it.
00:15:58.766 - 00:15:59.360, Speaker A: There.
00:16:02.290 - 00:16:15.650, Speaker C: Is there a time frame on how long can the smart contracts work? Do you need like let's say the service provider takes three months to get the website to the front page, but will you need additional finding in the smart contract?
00:16:16.230 - 00:16:41.180, Speaker A: So you are the one triggering the action to send the request to the node operators. So whenever you feel like, let's say Alice had put two months for Bob to get this website on the top ranking, then she's the one triggering the action. So you decide whenever you need to send this request. So in this case you're fully in control of when you are sending payment, when you need to fund, et cetera. Makes sense. Okay.
00:16:43.310 - 00:17:00.678, Speaker D: Are you able to aggregate different data providers? For example? So your example is about Google data ranking. So Google provider, but for example, financial market data are you able to see different data providers?
00:17:00.794 - 00:17:01.620, Speaker A: Of course.
00:17:02.230 - 00:17:05.380, Speaker D: And then decide if.
00:17:05.750 - 00:17:06.818, Speaker A: Yeah, great question.
00:17:06.904 - 00:17:10.226, Speaker D: Correct. Which data is correct?
00:17:10.328 - 00:17:39.230, Speaker A: I'm just going to look for my link which shows, and I'm going to disconnect my computer for 2 seconds because I don't like going to my favorites while I'm doing it. Let's see. Ah, because that's a good question. So I want to make sure I can show you. And I'm also a careful person. Let's see. All right.
00:17:39.230 - 00:18:30.622, Speaker A: Yeah, basically, currently our aggregator contract on Ethereum is getting data from, I think eight different data providers. These data providers are for instance Coinmarketcap, con API, Kaiko, BNC and many others. So yeah, we can get this data from different data providers and then aggregate it. So I'm just looking for a link now to show you because we actually made a pretty cool, I think, overview of this on our, let's see, links. Okay, cool, right. You can never be too safe whenever you're sharing your computer. All right.
00:18:30.622 - 00:18:57.346, Speaker A: Yeah. So that's our reference contract for ethusd price. And as you can see we have different data node operators. So we have Linkforest, we have chain layer, we have link pool. You can see which price they are giving out right now. And you can see all of these prices are slightly different, right? Because all of these oracles are using different data providers. So one of them will be using coin market cap, another coin API, et cetera, et cetera.
00:18:57.346 - 00:19:27.310, Speaker A: So that's really a great question because as I was saying, in data, whenever you want to get data to smart contracts, you have two layers. One is data provider layer. You don't want to rely only on coin market cap if you are going to get a price. And then you have the Oracle layer. So our ETH USD reference contract currently is decentralized. Both at the oracle layer we have 15 node operators relaying this data. And at the data provider layer, does it answer your question? Yes.
00:19:27.310 - 00:19:55.986, Speaker A: All right. And you can also do some cool stuff with this. It's really nice. I find it, I guess our request is probably done. Now. We have an explorer where you can check the, let's see, that's not the right one. Okay, so that's our contract on Ethereum.
00:19:55.986 - 00:20:50.220, Speaker A: And if we go to the chain link Explorer, we can see that we sent a request to five node operators five minutes ago. So if I go there, for instance, I can see that the request got completed by these node operators, which means they answered our request, right? So if I go to ether scan, that means that my payments probably got triggered. It means that the smart contract basically got executed because we got five answers. And so if I check here, if I update my page, I can see. So we made a payment, the smart contract self destructed and basically Bob got paid like his link token. So if we look, yeah, you see like the internal transaction shows that the payment happened. That's the $50 and the zero point 38 is what remains of the $50.
00:20:50.220 - 00:21:05.360, Speaker A: And since the smart contract self destructed, it got sent back to the owner of the smart contract. Okay, so yeah, basically that was a really small showcase of how to do a small SEO contract using Chainlink, please.
00:21:07.010 - 00:21:11.940, Speaker E: What if we need external information on.
00:21:12.390 - 00:21:15.602, Speaker A: Information that is not market prices, something.
00:21:15.656 - 00:21:18.626, Speaker E: As mundane as the lip station that.
00:21:18.648 - 00:21:20.478, Speaker B: Is just around the corner.
00:21:20.574 - 00:21:54.640, Speaker A: As long as there is an endpoint that you can connect to, we can have something called an external adapter. Basically an external adapter is something that we create. It can be in Java, it can be in any language, in Golang, in rust, and it allows you to plug into any kind of API endpoint that you have in the world, basically. So we've done this for the PayPal API, we've done this for flight stats, which gives the flights data. We've done this for easy posts. So we have multiple, multiple external adapters as examples that you can use. And if you need to connect to a valid station, then.
00:21:54.640 - 00:22:27.546, Speaker A: Thank you. How long does it take to connect to a new data provider like a valid station? It depends who's doing it in the sense that for instance, if it's us doing it like we are very used to doing external adapter and in the end it's mostly the same stuff. You basically make sure that the data you're getting is standardized in a certain way that the training node can understand. It depends if there is websocket API. So basically multiple things. It can be very fast. It can be as fast as 30 minutes or a bit longer.
00:22:27.546 - 00:22:46.640, Speaker A: It's not long. When you're creating a system that needs to connect to any kind of API endpoint in the world, then you have to make it modular. You don't have a choice. So basically it's very streamlined and quite easy to do if you know what you're doing. Thank you.
00:22:47.090 - 00:22:48.426, Speaker D: Do you need a lot of gas.
00:22:48.458 - 00:22:50.190, Speaker B: To run the smart contract?
00:22:51.890 - 00:23:19.862, Speaker A: It depends how many requests you are going to send to node operators. So if you have ten node operators and you need to send ten requests, it can get very pricey. That's why we are looking at other ways to do aggregation off chain. For instance, the gas prices are currently an issue on Ethereum. Everyone knows this. The network is still clogged from a tether or something right now. So yeah, depending on how many requests you need to send, it might cost gas.
00:23:19.862 - 00:23:20.634, Speaker A: Yeah.
00:23:20.832 - 00:23:23.690, Speaker B: For this request, how much did it cost?
00:23:23.760 - 00:23:29.210, Speaker A: Actually, it's set at 20 Gwe.
00:23:30.430 - 00:23:31.012, Speaker B: How much gas?
00:23:31.012 - 00:23:47.060, Speaker A: Gas, yeah. How do we check this again? I forgot completely. It's been too long. Oh, yeah. Let's see. Transactions. Okay, you go there.
00:23:47.060 - 00:24:01.670, Speaker A: Oh, yeah. Transaction hash. You can see the transaction fee. Yeah. So that's how much. Yeah, it is really depend on the state of the network. It always changes like it's a transaction, like any other transaction you could have on Ethereum.
00:24:01.670 - 00:24:32.210, Speaker A: Basically the only thing with shellink is that the more nodes you need to have, the more transactions you are going to send. Right. So the more gas you are going to pay. Now I would like to showcase also how you can create the contract that I just showcased, how you can create it using truffle. Who here is familiar with truffle or has already done some work with truffle? All right. Yeah, a few people. So yeah, if you are going to do anything serious with smart contracts, you probably need truffle.
00:24:32.210 - 00:25:11.680, Speaker A: It's a really good, streamlined environment you can use to create smart contracts in an easy way. So for Chainlink, we have a truffle box which allows you to easily set up a dev environment to use our oracles. So city contract. So I'm just going to go through the process of what it would be to set up a truffle contract, run through some tests, and you guys can see the process basically to set up a chaining contract. So if I do eggs? Yeah.
00:25:13.570 - 00:25:14.720, Speaker D: Even if I.
00:25:17.730 - 00:25:57.370, Speaker A: Everything is open source? All our code is open source, actually, if you want to track the, if you ever want to track the progress and what you're doing as far as development, I'll show you after our developer tracker. It's somewhere out there. Yeah. We have a developer, pivotal tracker, which is completely open source. And you can see what we are working on and what kind of initiatives we are doing at any point. So all our development is open source for the community to see both on GitHub and on pivotal tracker. So here, truffle unbox smart contract.
00:25:57.370 - 00:26:17.714, Speaker A: Okay, so basically I'm going to unbox my truffle project. It can take some time. So meanwhile, if you guys have any questions, right now we need to run.
00:26:17.752 - 00:26:29.142, Speaker B: A transaction in order to request the data that we need. Is it possible to make the node send the data to a specific smart contract at a certain rate.
00:26:29.276 - 00:27:02.900, Speaker A: So you mean the smart contract wouldn't trigger it? Yeah, you can have a crunch job which is going to basically every five minutes I'm going to have this. Yeah, that's a very good point. Those are points that we'll probably work on in the future. Currently, I think most of the ecosystem is happy with triggering the contract by themselves. It also can give more, like it's something that you can work right now as a developer, it's not too constraining from what you've seen right now. Lots of questions.
00:27:05.510 - 00:28:00.530, Speaker E: So actually in the fulfill, when the oracle will again our smart contract, actually the result, the answer, the response is just typically for cryptocompair, for example, to get the price of a token, you can just receive one int. Actually the crypto compare pay provide a way to receive from the JavaScript part a JSON, so we can ask for the price of intercoin or any other token. So my question is, has solidity provide a way to receive a structure on a strict, and to pass a struct as a parental function you think you can in chain provide this way?
00:28:00.600 - 00:28:11.720, Speaker A: Yeah, those are multi word responses where you basically provide multi prices in one request. That's something we are working on. Currently we support only one word, but that's something we are working on. Yeah, great question.
00:28:15.390 - 00:28:22.714, Speaker C: Did anything bad ever happen because lack of bad data that the nodes said.
00:28:22.752 - 00:28:26.380, Speaker A: To the smart contract with Chainlink or in the ecosystem in general?
00:28:27.330 - 00:28:28.958, Speaker C: The ecosystem in general.
00:28:29.124 - 00:29:06.162, Speaker A: So synthetics recently got a bad issue where there was a huge arbitrage opportunity for $1 billion. You can read it on Reddit. Actually, one faulty Oracle provoked a massive problem. Now, Defi is still very young. If we already have issues with Oracle at this point in the industry, you can expect what it would be in a few years if there is not a reliable way to provide data. Right? So really, like Ethereum, we can't have many doubts. We can always question stuff, right? But smart contracts, if you think about it, they're probably secure, right? Like you don't have a lot of ways to break a smart contract.
00:29:06.162 - 00:29:55.030, Speaker A: Now, the data that's getting into a smart contract is really the central point of failure right now in most of Defi dapps. That's something that the industry is very conscious of, and that's why we're talking to multiple Defi projects, and a lot of them are trying new solutions to kind of get more decentralized data in a more reliable way. Just because if it hasn't already broken, it will break in the future. Yeah, I'm a bit typical APC conditioner, so it's done unboxing. So yeah, it's already a bit late, so I'll try to make it quick. I'll just show the contract what it contains. So yeah, here, whenever you get a chaining box, you get a very basic solidity contract.
00:29:55.030 - 00:30:51.402, Speaker A: You get some functions, you get a create request two, which is basically I'm going to create a request with an oracle, a job ID, a payment. I'll specify URL path times, which is the number of times we want to multiply the result. Since solidity doesn't support decimal points, then you often have to multiply your result and then yeah, basically you can create a request build chain request. It's very similar to what we saw with the Alice and Bob example, except that it's much more modular, functional, you can adapt it very easily to your needs. So it's downloading, it's downloading some C sharp package. I haven't done C sharp in a while, but yeah, okay, I can still deploy. So I'm going to deploy my, just to show it's working.
00:30:51.402 - 00:31:26.422, Speaker A: I'm going to run some tests to show that basically the truffle box we get is going to perform some tests. So let's say we are sending a request without sending any payment to the oracle or multiple kind of unit tests like this. We are going to test them out here. So yeah, you can see the test here. We put a number of tests just for people to see if their smart contract is performing well whenever they deploy it. So yeah, very basic stuff. Basically we are still using 4.24
00:31:26.422 - 00:31:59.806, Speaker A: solidity. We are updating for 5.0 very soon. But that's why there are some warning if I'm going to migrate to Robston. So if we go to truffle config and that's something very nice with like, it streamlines the way to deploy contracts, it makes it very easy for you. So I've already deployed the environment variables for myself on my computer where basically I have my memo minik for my main wallet. I have the network I want to connect to.
00:31:59.806 - 00:32:25.914, Speaker A: So in this case we have Robston. So yeah, in my case it's very easy to deploy using NPM. Run migrate live to Robston. I'm just going to deploy this smart contract which does an ethusd request in a very simple manner. We are using some scripts here that you can see just to try out what we are deploying. Any questions? I didn't talk much. Yeah.
00:32:25.952 - 00:32:27.914, Speaker B: I was also wondering how are the.
00:32:27.952 - 00:32:30.650, Speaker C: Nodes incentivized on the testnet?
00:32:31.230 - 00:33:15.958, Speaker A: Yeah, like nodes on the testnet. Basically if you're running on main nets, it's going to be very similar architecture, right? So nodes are incentivized to be on the main net, not on the testnet. Currently on the testnet we have some nodes, we also provide nodes ourselves just to make sure that you have critical infrastructure. Now a lot of this is really community based, right? It's very similar to Cosmos where a lot of nodes will provide stuff for free just to get appreciated by the community. And it's very similar on Chainlink where, hey guys, you want to develop smart contracts on Rapsen? We have our nodes on Rapsen, maybe use us on mainnet later on. And here you get incentivized on Mainnet, get some link token. Here we are deploying the contract.
00:33:15.958 - 00:33:17.740, Speaker A: So if you have any more question.
00:33:19.710 - 00:33:27.370, Speaker B: Is the smart contract owner choose by himself the oracle, right? Yes, anyone can be an oracle node.
00:33:27.790 - 00:33:54.978, Speaker A: Yeah, anyone can be an oracle node. That's why there is going to be a reputation system. Also there are going to be commitments on chain to see who's delivering good data, who has his node online or offline. Because it's a permissionless system. It's not permission like anyone can currently spin up their own node and get chosen by a smart contract creator. Currently we have 60 nodes online. Expect this number to grow a lot.
00:33:54.978 - 00:33:55.518, Speaker A: Yeah.
00:33:55.624 - 00:34:09.340, Speaker B: The question is, what if you create a smart contract and you are yourself the node, the oracle, and you can then change the information? Is there any way to provide it?
00:34:10.190 - 00:34:41.982, Speaker A: I mean if someone wants to do it, he can, but I wouldn't choose that system. Don't choose it. If this guy is doing it because you have the full code, you can see on chain what he's doing. Don't choose someone who's doing this. Basically if it's a defi dap who's running their own oracle, then there is no incentive for them to do this. It's all on chain and anyone can see it, anyone can see the commitment. Oh, this guy just committed to fulfill his own request.
00:34:41.982 - 00:34:45.220, Speaker A: Great. So basically don't choose it.
00:34:46.070 - 00:34:51.426, Speaker D: So is it possible for someone to graduate reputation by creating himself smart contract.
00:34:51.458 - 00:35:38.374, Speaker A: And carrying himself his own node? That's a great question. So basically everything is on chain currently. So you can see the commitments. Now that's a good question. This one, basically he would have his own smart contracts and requests to himself. So there are some things here, first he would have to pay gas, then reputation would also imply that the smart contracts which are calling the oracles would be like you would probably earn more in reputation if your smart contract is like a DeFi project like compound or synthetix which is known by everyone and that people know isn't really shady. Like if it's a random contract which is being called by someone on chain then reputation would work in a different way.
00:35:38.374 - 00:35:42.440, Speaker A: Does that make sense? Right because you don't know what's happening really.
00:35:44.110 - 00:35:48.810, Speaker B: Why don't you use slashing mechanism instead of a reputation one?
00:35:48.880 - 00:36:12.442, Speaker A: Yeah that's a great question. Both are going to be used. So as you probably know reputation and slashing are stuff that once you have it you can't really go back on it. So that's why it's taking like currently it's very heavily in the research. Like we have a bunch of scholars working on this. So yeah we take this very seriously. We are going to have reputation, we are going to have staking implemented.
00:36:12.442 - 00:36:36.060, Speaker A: We'll have service lover agreements where basically smart contract creators put on chain a service agreement that an oracle can commit to on chain. So you have everything on chain, right? You can track everything and basically you'll be able to have this reputation system and this staking system allowed by these service agreements which are very much almost basically underway. Yeah.
00:36:36.750 - 00:37:00.798, Speaker D: Do you have mechanism? For example, I'm writing a smart contract with a bunch of oracle today for smart contract that could be executed in one or two years. How am I ensured that it's going to be the same oracle are going to be up and running in one or two years or five years?
00:37:00.964 - 00:37:29.546, Speaker A: Yeah that's a great question. That's also where reputation comes in where we have to make sure that the oracles that you'll be using will be basically as secure as possible. So in this case also oracles will have an on chain commitment as far as staking goes where if they are not on chain anymore they'll get slashed. So they would have every kind of incentive to still be on chain. Now if you are going to trigger the contract in two years, that's for.
00:37:29.648 - 00:38:10.520, Speaker D: Having records that are up and running in the long chain 100% of the time to have the reputation system. But for example those server can be resigned to something else. I want to ensure that those oracle are going to be up and running. For example if you have 10% of oracle that disappear and 20 new oracles that appear on the network, how am I sure that some of those oracle are still going to be up in a long time.
00:38:18.590 - 00:38:20.774, Speaker B: There is a limitation to listing the oracles.
00:38:20.822 - 00:38:20.986, Speaker A: Yeah.
00:38:21.008 - 00:38:24.358, Speaker D: In the long term, deploy your smart contract.
00:38:24.454 - 00:38:45.460, Speaker A: I see. I mean, then maybe your system shouldn't rely such on long term perspectives. Right. Whereas you would need to have some kind of process to switch oracles every six months, let's say, and redeploy the contract. Now, honestly, in this space you don't know what's going to happen tomorrow. So I wouldn't deploy a contract which I expect to run for five years without modifying anything. Right.
00:38:49.030 - 00:38:52.210, Speaker B: Basically you need a separate smart contract for the oracle.
00:38:53.110 - 00:39:17.600, Speaker A: You need some kind of upgradable contract or you need something that's going to run for an amount of times and sell these trucks and redeploy. You can have multiple provisions. That's something that the smart contract creator has full liberty of taking. Yeah, but really when it's long term, then it always gets very touchy because like long term, up is going to be down and down is going to be up. Like you have no idea what's going to happen.
00:39:20.610 - 00:39:24.830, Speaker D: I don't know, develop some kind of node discovery.
00:39:28.390 - 00:39:30.514, Speaker A: System. What do you mean by here?
00:39:30.712 - 00:39:33.300, Speaker B: This is something that you can do actually.
00:39:36.790 - 00:39:48.322, Speaker A: Okay, take the relay maybe. So, yeah. Okay, let's discuss this after maybe like.
00:39:48.376 - 00:39:53.666, Speaker B: Ten notes that you can get this information from. So this is something that he can do.
00:39:53.788 - 00:40:20.078, Speaker A: Yeah, that's already available. Now the demo seems a bit more. So. Basically in my demo it's very simple. We just have three scripts. We are going to fund our contract, we are going to send a request for the ETH USD price and we are then going to read the states like the data that our contract provided our oracle. Sorry, provided.
00:40:20.078 - 00:41:09.230, Speaker A: So it's a very straightforward use case. Now, in comparison with all the questions, it seems a bit vain, but yes. So basically, just to show how easy it is to start requesting data using Chainlink and using a truffle box, it literally takes a few minutes when Rapstand is doing all right. So yeah, here I created my contract. If I'm going to request data, then I'm just going to call the request data script request data network live. Okay. So we can see also the state of our request on the Explorer.
00:41:09.230 - 00:41:23.640, Speaker A: So here, if I go, it will appear there like Robstand is super slow. So it's good that you guys have some questions today because otherwise would have been kind of.
00:41:26.490 - 00:41:30.658, Speaker C: You can pay out any stable coin.
00:41:30.834 - 00:42:13.000, Speaker A: Yeah, of course, it's an ethereum. Right. So anything you want to do, you can do it in DA, you can do it in. Now the cool thing is if you have reference contracts for your coin. So for instance, for ethusd we have a reference contract. We are going to deploy a few others like BTC USD and others. You can check the price in real time and you can then say all right, so I have the price of ETH USD, I can calculate how much 50 USD would be worth like we did with Alice and Bob example where basically you calculate the price of ether calling a reference contract and then you can calculate how much ether you are going to send according to this.
00:42:13.000 - 00:43:13.320, Speaker A: So the request is sent. If I go there, then yeah, I can see that I sent a request to my channel node. So here, as we are saying on Robstand, most of the nodes will be chainlink node, just because there are still people running robstand nodes. If you want to use something else than Chainlink and yeah, basically I'm going to wait until this request gets fulfilled and then I'll be able to read the contract using this script read contract JS, which basically will allow me to check the value of the ETH USD price. So if the request has not been processed, then the result will be zero. Otherwise it should be the current price of ether and the current price of ether is $209.6. So it's good.
00:43:13.320 - 00:43:53.474, Speaker A: Yeah, basically I got my request fulfilled. I can read this data now. That's really not interesting, right? Getting the price of EQLZ like this, it's not great. However, you can do so much stuff with Chainlink and this really shows you how easy it is to set up. Like it literally took me two minutes to unbox the truffle box and to start sending this request. So I really encourage you, if you have any kind of use case you want to start working on, if the API is public, then it's super straightforward to start working on this. And if the API is private and there is no external adapter, maybe we can create it.
00:43:53.474 - 00:44:36.700, Speaker A: Or maybe you can create it. But yeah, it's a very easy system to use and it basically allows you to get any kind of data you want from the real world. The end goal here is really to allow smart contract developers to have the same flexibility that the people who built Uber had, where for instance, in five minutes they had access to a Google Maps API, a payment API, an SMS API. Know, when we get to the same result where smart contract creators can access any API endpoints in virtually minutes, then we'll probably have succeeded in our goal to provide developers with more tools to create compelling Dapps, which can really change the industries we are trying to disrupt and. Yeah, that's it for me, thank you very much.
