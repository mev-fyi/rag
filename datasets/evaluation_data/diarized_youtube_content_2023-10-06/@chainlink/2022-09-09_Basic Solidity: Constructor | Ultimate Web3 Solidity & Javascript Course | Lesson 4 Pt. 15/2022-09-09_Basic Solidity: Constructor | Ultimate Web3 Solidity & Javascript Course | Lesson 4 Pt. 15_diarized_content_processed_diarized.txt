00:00:09.050 - 00:00:35.250, Speaker A: And. Okay, perfect. If we hit compile a fundme Sol, we do indeed see that it's passing compilation. However, there's a bit of an issue here. Right now. Anybody can withdraw from this contract, so anybody can fund, which is what we want, but we don't want anyone to be able to withdraw. We only want the person who's collecting the funds to be able to actually withdraw the funds.
00:00:35.250 - 00:01:23.670, Speaker A: So how do we set this up so that the withdraw function is only called by the owner of this contract? Well, to do that, we're going to set up a couple of new functions. So when we deploy this contract, we want to automatically set it up so that whomever deploys this contract is going to be the owner of this contract. And then we can do some parameters to set it up so that only the owner of this contract can call the withdrawal function. So how would we do that? Well, maybe we could create a function called like call me right away. And right after we deploy this contract, we call this call me right away function, which will set up us as the owner. Now that's going to take two transactions, and that would be really annoying if we had to do that. So instead, solidity has something called a constructor.
00:01:23.670 - 00:02:32.270, Speaker A: And if you're familiar with other programming language, a constructor is exactly the same as other programming languages. Constructor is going to be the function that gets called immediately whenever you deploy a contract. So if I were to deploy fundme Sol and I were to say minimum USD equals two, minimum USD would no longer be 50 times one e to the 18th, it would be immediately updated to two, because constructor is a function that gets immediately called in the same transaction that we create this contract. This constructor function is going to be incredibly helpful for us, because it'll allow us to set up the contract the way we want it to be. So for example, if we want the withdraw function to only be able to be called by the owner of this contract, we can have the constructor set up who the owner of the contract is. So let's create a global variable called address public owner. And then in our constructor, we'll say the owner is going to be equal to the message sender.
00:02:32.270 - 00:03:09.300, Speaker A: The message sender of the constructor function is going to be whomever is deploying the contract. So owner is now going to be whoever deployed this contract. And don't worry, we're going to demo all this very soon and show you everything that's going on with ethers, scan everything. Demoing this all right now might take a little bit of time because we're using a testnet. If you want to test it all right now, absolutely, go for it. But just know it'll take you a little bit longer to do so close.
