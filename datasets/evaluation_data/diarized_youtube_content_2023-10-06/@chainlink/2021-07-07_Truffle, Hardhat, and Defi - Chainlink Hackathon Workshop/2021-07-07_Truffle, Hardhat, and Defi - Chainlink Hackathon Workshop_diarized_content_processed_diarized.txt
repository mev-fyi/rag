00:01:57.740 - 00:02:18.346, Speaker A: Hello, hello. How's it going, everybody? Just going to give it a couple minutes. Let some people trickle in. Really amped for this one. Truffle defi, hard hat. Getting into it, guys. Hello, hello, welcome.
00:02:18.346 - 00:02:39.380, Speaker A: And I am, once again, I am monitoring the comments, so I will be here to answer questions. Just going to give it a couple of minutes for some people to trickle in. How's everybody doing? How are we doing? We are day three of the hackathon here. How are we all doing? Good. Great. Terrible. No idea what's going on.
00:02:39.380 - 00:03:01.280, Speaker A: Have already built something amazing. I already talked to a team and they were like, yeah, we're pretty much done. And I was like, what, in three days? And that talked to another team and they were like, yeah, we're probably going to have a proof of concept by the midway check in. And I was like, that's perfect. And then another team was like, yeah, we're probably going to have just a team name by the midway check in. And I was like, that's perfect. That's great.
00:03:01.280 - 00:03:18.098, Speaker A: That works well. Welcome, everybody. Welcome, welcome. Super excited to be here. Excellent. I'm super excited to be here, too. I'm super excited that you are here.
00:03:18.098 - 00:03:32.982, Speaker A: Thank you for being here. Doing great. Been loving all the workshops so far. Awesome. Thank you for being here. Got another one for you guys. Doing good.
00:03:32.982 - 00:03:47.290, Speaker A: Excellent, excellent, excellent. Let me quit. Out of all my random stuff, I'm not on zoom, right? Yeah. Okay. I can close zoom. That's perfect. Three days.
00:03:47.290 - 00:04:28.122, Speaker A: How many days remaining? Like 30 or something. Products are due April 11. April 11. They are due. I think this is set up correctly, but let me see if. Let me switch real quick. There we go.
00:04:28.122 - 00:04:49.322, Speaker A: That's right. Okay, cool. All right, cool. Well, you've given it a few minutes. We're going to jump into it now. Let's do it. So, so far, we've talked about remix.
00:04:49.322 - 00:05:12.066, Speaker A: We've talked about brownie. We've talked about what Chainlink is. We've talked a little bit about beginner solidity. Now we're going to jump into kind of the next chapter. So if you were there for the brownie intro earlier, you already know this, but I'm going to go over this again. For those of you who didn't watch that, so far we've taught about remix. And remix is great because we can click this big button, we can go into remix, we can test our smart contracts.
00:05:12.066 - 00:05:31.722, Speaker A: We can write code. We can do whatever we want. We get these little gists here and everything is great. However, we get here to remix and maybe we want to do some crazy stuff. So even for just, whoops, I was messing with this API thing. Let's do. I was messing with the contracts there.
00:05:31.722 - 00:05:54.402, Speaker A: Let's go to a different one. Where's random number consumer? I think this one actually works. Yeah, random number consumer. So let's say you save it. Okay? You're like, okay, great, I want to deploy it now. So you come to deploy, you switch to injector web three, metamask pops up. We do our password, which, this is my dummy account, so I don't really care because I don't have any money.
00:05:54.402 - 00:06:14.054, Speaker A: But we log in, we're like, okay, cool, we're in. Now we deploy with the coven network. We hit confirm, we wait, and we wait for Covid to be fast. Then we get the random thing, then we copy the address. Then we go to Metamask, and we send it. We click it, and we do it. And we click, and we click, and we click, and we click.
00:06:14.054 - 00:06:35.654, Speaker A: We click again. And now that. I've done that. Now it's sending. Now wait, again. It. And then it send failed, because this is slow.
00:06:35.654 - 00:06:52.462, Speaker A: But in any case, you see there's a lot of clicking. Any of. After we send the link, we have to do this, and we'd have to request. So there's a lot of stuff that we have to do. And if we get sufficiently complicated smart contracts, obviously this is going to be even harder. Right. So we're going to have all these clicks that we don't want to do.
00:06:52.462 - 00:07:24.822, Speaker A: So in order to mitigate this, remix is great to kind of get started and really get learning and see visually what's happening with smart contracts. And you can absolutely, 100% always come back to remix and always just work with remix. However, a lot of us, we want to work with a more sophisticated platform for testing our smart contracts and deploying our smart contracts. Right. We can't really hook this into any front ends. We can't do a lot of really crazy tests. Everything that we do has to be, has to be in solidity.
00:07:24.822 - 00:07:46.690, Speaker A: So what do we do? Well, we want to use a smart contract development framework. And the two we're going to be focusing on with this are going to be truffle. And then obviously I'm looking at Truffle Ethereum. Of course I get truffles. We're going to be working on truffle and hard hat. And hard hat, obviously, is going to go show me a hard hat. Right.
00:07:46.690 - 00:08:08.878, Speaker A: So hard hat ethereum. So these are the two smart contract development frameworks that we're going to be working with here. They are awesome for a lot of reasons. So let's jump into it. Let's go. So the first one that we're actually going to look at is going to be hardhead here. This is made by nomic labs and the documentation is phenomenal.
00:08:08.878 - 00:09:14.478, Speaker A: So if you're trying to deploy some smart contracts, I would definitely say go check this out, hit the getting started and just jump right in because their starting up is great. So you do need to have node JS installed, right? This is like a JavaScript smart contract development framework. So we can build smart contracts in solidity and then we can also test them, deploy them and do things with them using Javascript and using stuff that we're a little bit more familiar with that does more than just solidity. So to get started, I have my fun little repo here. We're going to make a new Dr. Hard hat demo and then we're going to save NPM, install, save hard hat, and they have like a great quick start. If you want to learn more about hard hat and all the little things you could do, literally scroll down the documentation, go over getting started, installation, everything and pretty much everything that you need will be here.
00:09:14.478 - 00:09:54.520, Speaker A: So once it's installed, we can do MPX hardhat, I think. Is that the correct? And then it'll say what do you want to do? Create an empty project. Create an empty hardhat, config quit so we can even do a quick sample project. It'll install ethers hardhat waffle and ether waffle chai number clutch. These are all dependencies that are needed to do a lot of the cool testing and a lot of fun stuff that we're going to do. So it's very straightforward here, which is very nice and it's going to say project created. Great job.
00:09:54.520 - 00:10:26.402, Speaker A: So now in our folder we're going to have this contracts with a random file node module, scripts, tests and everything here. So this is kind of the bare bones of a hardhead project. We are going to be looking into a chain link object and we'll get to that in just a second. This is just the bare bones. So if you want to get just bare bones here, this is great. I would say that to get started with shingling stuff, it's even easier to do a git clone on the repository that we're going to do in just a little bit. But let's walk through the contracts here.
00:10:26.402 - 00:11:08.538, Speaker A: So as you can see, greeter Sol really simple smart contract, right. We do have this interesting import hardhat console Sol. This is a unique feature to hardhat, which is awesome. So for those of you who are used to Javascript, we can actually console logs out right in the solidity code. This is something that's unique, like I said, unique to hardhat, which is really cool. So we can do MPX hardhat compile. And then actually I'm going to show you one other thing that makes life easier with hardhat shorthand and autocomplete.
00:11:08.538 - 00:11:30.920, Speaker A: The next thing that you're pretty much going to want to do is install this right here. So NPM install globally hardhat shorthand. Then we can just do hh compile. So we can just do hh. So hh is going to be the same as if we did. And then I'll even zoom in just a hair. Is that too big now? Now I feel like it's too, it's like silly big.
00:11:30.920 - 00:12:09.586, Speaker A: But we have all our hard hat command line interface stuff here. We have all the command line tasks, which is great. So something else that's really nice with hard hat is they have these tasks so we can run like hardhat accounts, and it'll show us all the accounts that we have associated with this hardhat thing. We can compile the contracts, we can go into the console, which if you are here with brownie, you know that getting into the console is going to be a way for us to actually interact with our smart contracts. Wait, exit. I forget how to get out of here. Control C.
00:12:09.586 - 00:12:38.778, Speaker A: There you go. But it's a really nice framework for testing and deploying. Right. So we have our test folder, and this is how we're going to test it. We're going to do hard hat. Test tests are incredibly fast, and what it does is in the backend, it actually runs your own kind of local blockchain. If you're familiar with truffle, it runs like a hard hat runtime environment, and you can even run your own by doing like hard hat node if you want to.
00:12:38.778 - 00:13:06.734, Speaker A: It even gives you some private keys, some accounts. You can import these private keys into metamask, which is really nice. My camera is covering up portions of the terminal. Sorry. Cool. There wasn't too much behind me, but yeah, let's do this anyways. So the other important thing is this hardhat config.
00:13:06.734 - 00:13:27.370, Speaker A: This is pretty much where everything's going to be defined. Let's just code out of there. This is where most of your stuff's going to be defined. So hard hat has this thing called tasks, so you can define these tasks. So, right how we did hard hat accounts, it's just following this right here. So we can write our own accounts or our own task with the syntax right in here. So we can do task.
00:13:27.370 - 00:14:01.922, Speaker A: Whoops. Hello. Says hello. And then we do async. Can you want it to be a little smaller? Async function equals console log. Hello. Right now we can do hardhat.
00:14:01.922 - 00:14:26.510, Speaker A: Hello. And it does exactly that. So these are like quick ways to do things with our solidity. Smart contracts, though, you can see in this accounts. One, it does this await ethers, get signers, and then it logs accounts address. So it gets all the addresses of our signers. This is a way to get like the signers of your provider, which it defaults to the local host.
00:14:26.510 - 00:14:50.900, Speaker A: Can you do a quick export? Psi equals. So the long path isn't there. I like the long path. Tells me exactly where I am. Also screen is quite unclear. Is the screen unclear? I'll make it bigger again. Is it better now? Now better.
00:14:50.900 - 00:15:06.648, Speaker A: Okay, so I'll keep it this big. It runs Ganache inside terminal two. No, so it doesn't run ganache. So hard hat actually runs a hard hat runtime environment. So this is its own blockchain, basically. So if we look up. So it's like ganache.
00:15:06.648 - 00:15:31.408, Speaker A: So if we go to. It's called the hearta runtime environment. And this is basically a ganache, but yeah, a ganache that's running inside the command line. If you're familiar with the Ganache Cli, it's very similar to that. But this one's really fast. So you can see right when we run hardhat test that fast. That it ran that fast.
00:15:31.408 - 00:15:50.580, Speaker A: This is with the hard hat runtime environment, which is really cool. Good questions. How long have you been coding? Long time. Went to school for computer science. Do you not need ganache with hardhead? You do not need ganache with hard hat. So this is kind of one of the big benefits here. You do not need ganache with hard hat.
00:15:50.580 - 00:16:13.644, Speaker A: You do need ganache with brownie. And you do need ganache with truffle. I mean, they each have their pros and cons. Obviously. One of the other fun things with Ganache is it does have this fun. You can download this fun ui, which is loading, which is kind of cute. I can do fun stuff with this, but yeah, you do not need ganache with hard hap.
00:16:13.644 - 00:16:35.800, Speaker A: So everything's happening. All the local stuff is happening on the back end. So just going through some more questions. What is the best way to integrate Abi with front end while it is stored in separate repo, different workshop. That's going to be the front end workshop. Good question though. Okay, cool.
00:16:35.800 - 00:17:11.744, Speaker A: So let's scroll down. So those are tasks. Module exports, solidity. So we're going to be changing this to updating it for the different networks we want to work with and work with our private key and kind of be able to actually deploy smart contracts to our networks. And we're going to show you how to do that right now. So we're going to actually remove Hardhead demo clear. And what we're going to do, we're going to look up Chainlink hard hap and there's a couple of these.
00:17:11.744 - 00:17:44.412, Speaker A: So I have one and Harry has one we're going to be looking at. Probably what we're going to do is we're going to update this and bring it into the actual smart contract repo. But then we can do a git clone. And this is just an easy way to get started with a hardhat development framework that has everything that we want to go. We want to go through. Oh, it's still downloading. That has everything that we want to go through with Hardhat and has all the tools of working with Chainlink smart contracts here.
00:17:44.412 - 00:18:18.840, Speaker A: So if you want to learn more, you can do hard hat. Chainlink blog I believe we have a blog out how to use Chainlink with hard hat right here. I will put a link in the comments here. We also have testing chainlink smart contracts, which goes over a little bit of that as well. So back to here. So we have kind of that similar. I actually didn't go through the setup here, but we have a similar setup here.
00:18:18.840 - 00:18:45.010, Speaker A: So we have our contracts folder, which really simple. It's going to have our contracts. These should look pretty familiar, right. We have our price feeds, random number, consumer, API consumer. These are kind of the main ways to interact with Chainlink. There isn't a keepers one in here yet, but that will probably be in the future once the beta is finished. So again, if you guys are doing the hackathon, which I'm assuming you guys are, definitely check out the keepers stuff before.
00:18:45.010 - 00:19:13.176, Speaker A: That's in the documentation here under, I couldn't find it before, but it's actually under developer reference, coven keeper network. So we'll probably add these to the docs at some point. They're in the docs. We'll add an example of that as well. So these should look pretty familiar, right? These are the contracts here. And what we can do is we can actually deploy them using Harhat's deploy. Right.
00:19:13.176 - 00:19:36.080, Speaker A: So if we want to just deploy locally. Whoops. I forgot to install the, I thought I did just install it. I think I actually have to run NPm install first. Whoopsies. You can always refer back to the readme to see everything. So yeah, we have to run yarn.
00:19:36.080 - 00:19:58.970, Speaker A: Yarn first. Let's just get the shorthand as well. I think I do need to do NPm install. Actually, maybe I don't. Now I'm being confused. Oh, I need to save Dev. Whoops, sorry.
00:19:58.970 - 00:20:22.800, Speaker A: So we're going to install hard hat on this package. Save Dev says let's save it for the development environment. Payment install. Great. Now I'm going to grab that global thing. I should have it. But let's just, we'll be extra sure.
00:20:22.800 - 00:20:45.610, Speaker A: Hard hat deploy. Oh, it's telling me not to do it. All right, well we'll just do it this way. I'll figure out why that's not working for now. So we'll just do it the old fashioned way. MPX hard hat deploy. And it's still telling me this stuff for some reason.
00:20:45.610 - 00:20:59.710, Speaker A: Because I need to, because I'm a dingus and I need to actually CD into it. Sorry. Here we go. All right. Round two. Yarn. Sorry about that.
00:20:59.710 - 00:21:29.190, Speaker A: That probably would be helpful. It says, hey, you want to make a new project? Yeah. You need to go into your, I see the comments coming in now due to the delay. So now we're actually in the folder that we just cloned. Now we're actually going to yarn. Install or yarn. I was wondering why I was like that was really quick for it to everything to get installed so quick.
00:21:29.190 - 00:21:46.972, Speaker A: Hardhead. Now what happens? Yeah. Okay. And then hardhead is installed globally. So the shorthand actually works here. So now we can do hardhead deploy and we'll see here, we actually compile those contracts and then we follow what's in this deploy folder here. And I'll go over that in just a second.
00:21:46.972 - 00:22:42.270, Speaker A: So what's the default? So it's actually going to go ahead and deploy these different contracts and we can actually see where it's going to deploy to by checking the networks here. So in this network section, we've defined our default network to Covid. Right. So this is going to be exactly the same as what's in the documentation, exactly the same as what we've done in the other examples, just with hardhead here. And then I'm going to go over what the terminal is saying in just a second. And then we're going to add some vars to this later, because right now you do need these environment variables, but we're going to mix it up in a little bit later. It says our default network is going to be coven, and this is in the hardhead config here.
00:22:42.270 - 00:23:22.136, Speaker A: And we have our coven network, which is defined by our RPC URL, which again you can get with infura. Infura. You can sign up for free. Once you get in, you can just grab, it's going to be like HTTPs, et cetera, et cetera right here. Your private key is going to be from your accounts, and that's going to be going to your metamask. You're going to expand view or no, excuse me, it's in here, settings or no, right here. Account details export private key.
00:23:22.136 - 00:24:00.420, Speaker A: You put your password in, gives you your private key. So these are environment variables. You can export them and set them as environment variables. With export private key equals and then whatever your private key is. And the same thing with COVID RPC URL. We're going to make an update to this actually, where you can just put those in like a env, but we don't have that in here yet. So then you can just do coven RPC URL equals blah, blah, blah, blah if you don't really understand how environment variables work.
00:24:00.420 - 00:24:19.612, Speaker A: So that is for a next edition of this. But yeah, private key. And we're going to save our deployments. We definitely want to save our deployments so that we remember where they are later on. Don't really need to worry about this for now. And this is the solidity version that we're using. So now let's look at what we just did.
00:24:19.612 - 00:24:54.144, Speaker A: What did we just deploy? There's a whole bunch of text here. So we deployed price consumer v three, and this price consumer v three in this example is literally the same as this one in remix, literally verbatim. Right. You'll notice that it's using this at syntax. And interestingly enough, remix actually doesn't support that at syntax. Well, not interestingly enough, it's like a Javascript syntax. Remix uses kind of this straight up import HTPS syntax.
00:24:54.144 - 00:25:19.564, Speaker A: So that's literally the only difference that you're going to see between these two. But we also get all these nice scripts that get pointed out. So we get, hey, run price feed contract with this command. Okay, I want to read the price of I want to read the price of the contract. So I'll do MPX. I'll copy that command MPX hardhat, read price feed contract here. And this is the contract that we just deployed.
00:25:19.564 - 00:25:40.020, Speaker A: So let's see what happens. MPX hardhat read price feed contract this on network coven. And here's what we get, right, because again, we're defaulting to network coven. We could even do like network rinkby. And this will error rinkabee because we don't have a contract there. Network rink B doesn't. Because that network doesn't even exist.
00:25:40.020 - 00:25:56.584, Speaker A: But that is how you can change the network. So we could even do network coven. Right. It's going to print out the same thing because we're still on the Coban network here. Cool. I just cleared it and I should scroll up. But.
00:25:56.584 - 00:26:18.204, Speaker A: Great. So you see, before we were running all these, we were clicking all these buttons, doing all these things. Now we can just do everything programmatically. We can run our tests programmatically as well, which is really nice. I think the tests here are set up for Covid. We can even combine these scripts into one. So let's do the random consumer.
00:26:18.204 - 00:26:40.692, Speaker A: So first, again, we need to fund it. So let's just copy paste this. We're going to fund it with link. Remember, you do need link in your coven test network on your account. Again, you can find that in the documentation docschain link token contracts. And the faucets are right here. Boom, boom, boom.
00:26:40.692 - 00:26:57.020, Speaker A: Beautiful. And we're sending a transaction to actually fund this random number consumer contract. And then once we do that, we can even call this MPX hardhat request random number. And we'll give it like a seed. And this can be whatever we want. So great. Funded with one seed.
00:26:57.020 - 00:27:15.284, Speaker A: Let's give it seven. Seven. Seven. So this is going to request a random number using the VRF contract. And again, you could combine those two into one and you wouldn't have to keep clicking around. So these are ways to programmatically interact with our smart contracts much faster. And then even.
00:27:15.284 - 00:27:45.900, Speaker A: How nice. Run the following to read the returned random number. So these are all tasks too, right? If we go back to this hardhat config, we can see these are all tasks, tasks, tasks, tasks, tasks that we can run. And the random number is this. This big monstrosity, which is great. So if you ever get lost, you can always come back to the readme. You can literally go verbatim through the readme.
00:27:45.900 - 00:28:20.704, Speaker A: You do need, like I was saying, you do need node js. You do need these two. Sorry. For those of you who want to know how to do this, in your remade do like command shift v. And that brings you to this nice preview of markdown. You do need NPM, you do need a coven RPC URL. This again is going to be your alchemy, your infuria RPC environment, not environment variable HTTP like API, basically URL.
00:28:20.704 - 00:28:44.880, Speaker A: You can get one from infuria. You also need a private key, which again you're going to export from your metamask. And if you want to do some interesting things with their forking, for this one you need an alchemy mainnet RPC URL. But this can be any mainnet RPC URL. So if you want to use inferior, you can use inferior, you can use whatever you want here. And again, here's kind of how you export that NPM. Install, yarn install.
00:28:44.880 - 00:29:09.716, Speaker A: And then I did the additional like hard hat shorthand. But then yeah, and you can walk through this. If you ever get lost, this will tell you everything that you need to know and more. So it's really really helpful. And we're going to be constantly updating it and we'll probably bring it into the chain link repo pretty soon. So I know I kind of talked fast, I went over a lot of different things here. And the other thing that I wanted to say, obviously, because now that I'm looking at the time, I was a little ambitious.
00:29:09.716 - 00:29:58.516, Speaker A: We're not going to have time to go over like a defi project, but if we go to defi pulse, let's take a look at some of these projects like Maker, compound Ave, maker GitHub, compound GitHub Ave GitHub let's see what they're all using. Awesome. Maker Dow developer guides, integrations. I think actually they use their own, I think they use their own setup, to be honest. This is just pure solidity. Developer portal this is just pure Javascript. I think maker actually has their own custom setup.
00:29:58.516 - 00:30:14.060, Speaker A: So never mind. Let's look at compound. Compound is using. They also have their own custom setup. I believe compound has their own custom setup. I take it back. Okay, let's look at Ave.
00:30:14.060 - 00:30:41.060, Speaker A: Avejs. Here we go. Third time's a charm. No, this is the, oh yeah, this is right. So hearthead's something that's being used by Ave, right? I believe a number of these other ones are also using hardhead, uniswap, GitHub, uniswap v two core. What are they using? Waffle. Okay, they're using waffle.
00:30:41.060 - 00:31:29.972, Speaker A: I believe they're the same team that makes waffle, although I could be wrong, I'm sorry if that's wrong, but a number of these top defi products are using hard hat, so this is going to be definitely a really useful tool for everybody to use. So I know I went through a lot of stuff here. Are there any questions? Questions, comments, concerns? Okay, I'm seeing some questions here. What made the difference between calling an API through regular fetch, getting the data, then calling something like contract set versus using chainlink to make that call? Calling an API through regular fetch, getting the data, then calling something like contract set versus using chainlink. Great question. Okay, this is a really good question. So you're saying, okay, cool, now that I can do stuff in Javascript and I could just call it locally and then set it, why would I want to use channeling? So this is a great call.
00:31:29.972 - 00:32:43.416, Speaker A: So when you're doing the fetch on your local computer, let me even flip, I'll flip to this for questions. And then I got to get to truffle too, guys. So when you're doing the fetch, you are doing it on your local machine, right? You're doing the fetch, you're using the get request on your local machine. And this is different from when a smart contract executes, right? Smart contracts are auto executing pieces of code, right? They don't rely and they're decentralized as well. So when you go out and do a call and you say I would like to get this piece of data, please, you're a single centralized failure point for your smart contract application, right? So if you're just setting something to get started or whatever, that's fine. But if you're writing a smart contract that needs to be decentralized and needs data in a secure, reliable manner, then you can't really do a fetch call, right? So it needs to be automated through the network using a decentralized oracle service because this is a huge, huge attack vector if you're going to be the only one. And now these smart contracts, they're no longer a trust minimized agreement.
00:32:43.416 - 00:33:23.144, Speaker A: Now it's a trusting you agreement for you to do the right thing, which kind of defeats the purpose of smart contracts in general. Good question. Hey Patrick, is it better to have all smart contracts be upgradable? This is a great question. It's a little unrelated to this, but this is a really good question. The answer is maybe it depends on your application, depends on what you want to do. I mean, if you have a standalone application, those are actually probably the best, right? Because those are always going to persist. They're always going to do exactly what they were originally coded to do and they're great, like that.
00:33:23.144 - 00:33:48.572, Speaker A: So if you want to iterate and make some protocol better, obviously it's good to have some type of proxy contract, but you're going to need to do that, right. You're going to need to have proxy contract with admin keys set up correctly with like a multi sig to a dow or something like that. Right. So that it's not again, because you never want to rely on some centralized intermediary to be upgrading your smart contract. So. Good question. Good question on upgradability.
00:33:48.572 - 00:34:29.296, Speaker A: Openzeppelin has written some really good docs on upgradable smart contracts, which are really good. So good question. Any other questions here? These are great. Before I flip to truffle, I'll give it a few seconds. All right, cool. We're going to CD down and all this stuff in here because I screwed up. Whoops.
00:34:29.296 - 00:35:18.564, Speaker A: But we're going to make a new one. So make dir truffle example, CD Truffle example. And I'm just going to open up a new code editor because this one is all jacked up because I screwed with it and that's why I can't screw up being in the wrong directory. Great. So now we're looking at truffle. What is truffle? Truffle is very similar to hardhead, right? This is another smart contract development framework, and they are run, or they are under the umbrella of consensus, which is a sponsor of this hackathon, which is great, really powerful tool, probably the OG of smart contract development frameworks. And what they do is pretty much the same thing.
00:35:18.564 - 00:35:53.352, Speaker A: So they're just another example of what you can do. And a lot of you were asking about Ganache, like what is Ganache? Truffle and Ganache are under this kind of, this truffle suite that's clearly a play on words, but it's a great tool to code release, deploy, monitor your smart contracts. Sorry, let me share my screen. Here we go. Thank you. Good call. So let's get started working with the truffle smart contract.
00:35:53.352 - 00:36:12.980, Speaker A: So truffle, we could do a really simple one, but since we just went through hard hat, it's actually pretty similar on the basic side. So let's get started with truffle. So again, you do need NPM. You do need node js here. And then once you get it, you just do. I think it's just NPM. Install g truffle.
00:36:12.980 - 00:36:47.436, Speaker A: I'm not going to do it because I've already done it. Once you do it, you have this truffle command and you get all these different commands. So this is the ClI, the command line interface of truffle. And we can do what's called unboxing. And we can actually unbox. We can unbox a chain linked example project very similar to git cloning. Very similar to git cloning.
00:36:47.436 - 00:37:01.012, Speaker A: That hardhead one. Right? And so we even see we have the commands here. Hey, important. Make sure to install the dependencies. So we'll follow along. NPM install. This is going to install all the dependencies for this project.
00:37:01.012 - 00:37:20.244, Speaker A: This is obviously node modules will come up here and you'll see here. It's very similar to Hardhat. Hardhat and truffle are really similar. Which one do you want to use? It's really up to you. Whatever you like better. Truffle. You'll notice it does work with Ganache as opposed to the hardhead runtime environment.
00:37:20.244 - 00:37:53.300, Speaker A: So when I was talking about, hey, this is the hardhead runtime environment. It's like a local blockchain that's running on the terminal. Ganache command line has the same thing. They also have a fun little UI if you want to use it, that I was showing before where you can run like a local blockchain yourself, which is cool. So you do have to install Ganache separately. And I'll show you to do that in a. That actually, I think this installs ganache for us.
00:37:53.300 - 00:38:27.970, Speaker A: Anyways, we're also downloading actually some of the chain link core code, which is why it takes a little bit longer. But once everything's installed, we can start doing some of the same things that we were doing with hardhead. Right? So we can do. And then actually to install Ganache, it'd be NPM install Ganache cli. And I'm not going to do that, right? Because I've already done it, actually. Do I have it? Excuse me. Ganache.
00:38:27.970 - 00:38:46.520, Speaker A: Ganosh. Ganache Cli. Maybe I don't have it installed. Oh, I do have installed. Okay, well, this is like running a local blockchain in my terminal. So it's very similar to the hardtep runtime environment. Yes, this is being recorded.
00:38:46.520 - 00:39:10.506, Speaker A: So now that we have this set up, what can we do? So again, it's really similar. We have our contracts. Instead of deploy like Hardhat, we have migrations. And these are pretty much the same thing. It says, it defines how we're going to deploy things. We have some scripts in here. This is going to be similar to the tasks in Hardhat.
00:39:10.506 - 00:39:30.466, Speaker A: You can also do scripts in Hardhat. And then obviously we have our tests right. So if you ever get lost, can always come to the readme. Same thing. NPM install truffle and box and then NPM test. Right. So we're going to do exactly the same thing that we do with hardhead.
00:39:30.466 - 00:39:57.470, Speaker A: So again, you do need a couple of environment variables. You do need a mnemonic and an RPC URL. So your mnemonic is different from your private key. We can get that again by coming to metamask. We can go to security. Security. Remember that TikTok or vine was that YouTube video? And then reveal seed phrase.
00:39:57.470 - 00:40:38.074, Speaker A: And this will be your mnemonic. Or again. Or again, this one actually works with EMV files. So you can even make EMv pneumonic equals cat, dog, cat, frog, or et cetera, et cetera, et cetera. And then RPC URL equals blah blah blah blah blah. Or do them on your command line, which is going to be export RPC URL equals blah blah blah blah, blah blah blah, whatever it is. Right.
00:40:38.074 - 00:41:06.206, Speaker A: And then you got to do that for both of them. I already have them set, so I don't need to send them again. But yeah, this also uses a Env, so you can do it in a env file, which is really nice. So it shows both the NPM ways to do it. But this is also the truffle way to do it. I like to use the truffle way. I mean, if you go to the package JSon, you can see migrate.
00:41:06.206 - 00:41:37.440, Speaker A: Coven just does the truffle stuff anyways. So we're going to do the same thing that we did with hardhead. So it's going to be truffle migrate network Covid. And I think this actually won't migrate because I have stuff migrated. Oh, no. So it will migrate. It's going to just literally go through your migrations folder and it's going to take everything, it's going to push it onto the coven chain literally the exact same way.
00:41:37.440 - 00:41:59.498, Speaker A: Which is great, because see how much faster this is to deploy. We're deploying several smart contracts with one command. Right. And this is a huge benefit of iterating on a testnet. Obviously, you can do this locally as well. If we go to the truffle config, we can do a local ganache chain. So we can start up a ganache chain and do everything locally.
00:41:59.498 - 00:42:31.440, Speaker A: We can do whatever we want to do in here. But obviously this is much faster iterating than it is doing everything on remix. All right, good question. Looking at Hardhat, looks like there exists a plugin for typechain with hardhead. Any reason I should stay away from typechain and hardhat in the context of Chainlink? So I personally haven't worked with typechain, but I've heard good things. I don't think there's any reason you should stay away. Good question.
00:42:31.440 - 00:43:08.790, Speaker A: And now that we've deployed again, we can do truffle. We can do one of these scripts. So truffle, let's do a get latest price, truffle exec scripts, price feed scripts, get latest price. And again, we do need to choose the network. Network coven, and we are going to read the latest price from our data feed. And this is the latest price. And again, same thing we can do truffle.
00:43:08.790 - 00:43:30.338, Speaker A: Console, network coven. Oops, I spelled coven wrong. Don't kill me. Let me out. Error. It's like, what are you talking about? There's no convan, Covan, triple console, network coven. And we'll jump in to the co console here.
00:43:30.338 - 00:43:54.246, Speaker A: And it's the same thing. So we can interact with our smart contracts in here instead, which is really nice. Clear or exit? Control C. Control C again. Okay, cool. So we have 15 minutes left. Perfect timing.
00:43:54.246 - 00:44:18.400, Speaker A: I usually like to take time for minutes. So we'll answer a couple of questions now if we have time. We do have. I'll put this on another one. Next week. We're going to do an end to end code with me d five thing where we'll literally live code and stuff. Live code, a whole project, which will be fun.
00:44:18.400 - 00:44:54.326, Speaker A: But this is the intro to truffle and hardhead. Both of these are incredibly powerful tools. Looking forward to questions now on how to use it. What makes sense, what doesn't make sense with our brownie demos, there's a lot of really good ones for local development, which is really great for quicker iteration. We're updating these for better local development as well because local development is obviously very quick. The answer to a lot of the questions on how do I do this locally? Is you're going to want to use mocks. You're going to want to use a lot of mocks.
00:44:54.326 - 00:45:36.206, Speaker A: So, like, when you're writing your tests, when you're doing your deployments, you're going to do mock deployments of all this. Any questions? We can jump off a little bit early here. Awesome. Cool. Well, if there are no questions, then let's talk about what's happening in the next couple of days. So tomorrow we are doing dynamic nfts. This is actually a project that we're going to be using truffle to do.
00:45:36.206 - 00:46:07.810, Speaker A: We're going to go end to end deploying an NFT to the blockchain using Chainlink VRF to randomize it, and then we're also going to actually render it on Opensea and list it on the Opensea network. So we're literally doing end to end. We're going to be using ipfs as well. They are a sponsor. It's going to be very fun, really cool. And later tomorrow we're doing testing and multi chain. So we're gonna be walking through writing tests so that we can do a lot of this local development and iterate really really quickly and iterate much faster.
00:46:07.810 - 00:47:08.346, Speaker A: And also how do we switch from chain to chain? Right? And so I think for that one we will be using hard hat if we have time. I will also do it with brownie because I personally love brownie, but I'm obviously biased. Most of the people in the space are javascript lovers, but we will be writing tests and all the methodology of writing tests in hard hat is going to be the same as writing tests in brownie and truffle, et cetera. And just a quick peek as well. Friday we're doing a local chainlink node which will be fun so that we can build external adapters which Friday evening we will be doing an external adapter demo, which will be a lot of fun next week. On Wednesday we're going to be going into front end applications and I wanted to sneak in like an end to end full stack application for Defi because we are kind of doing a full stack NFT project. I just got to figure out which day I want to sneak that in.
00:47:08.346 - 00:47:33.200, Speaker A: If you guys want to let me know. If that sounds like fun, let me know. It'll probably be maybe the 25th or the 26th, but we'll do an end to end demo as well, which will be a blast. So I don't think there any I don't think there are any other questions. Cool. Well, looking forward to seeing everybody tomorrow and best of luck with the hackathon and.
