00:00:00.490 - 00:00:34.994, Speaker A: Automation is one of the coolest ways to level up your smart contracts. Hello, my name is Stephen Fluan. Today I want to show you how to use the chainlink keeper network in order to automate your contracts and give them access to off chain computation. Let's go ahead and dive in. So what we're going to look at today is we're going to start on the chainlink documentation webpage. And if you just scroll down a little bit, you're going to find using chainlink keepers. Now, there's really two parts to building a chainlink keeper upkeep smart contract.
00:00:34.994 - 00:01:02.080, Speaker A: So the first thing is you need to write a smart contract that's compatible by implementing these two methods. And then second, you want to register that smart contract for upkeep with the chainlink keeper network. So let's go ahead and do both of those things. So let's start off just by copying and deploying this sample code that we've got with this one click to remix. What we're going to see here is a very, very simple contract that is just a simple counter. So we can see it's got a counter here. So it's got just a simple number.
00:01:02.080 - 00:01:35.286, Speaker A: And then you're able to specify when you create the contract an update interval. And then the contract is going to verify, hey, has enough time passed? And if it has, let's update the counter. And you're going to notice that Chainlink keeper network compatible contracts use two really important methods that are part of this keeper compatible interface. The first is check upkeep. And check upkeep is special because this is where the off chain computation happens. So this is a method that's not actually run on chain. This is run off chain by a node from the chainlink keeper network.
00:01:35.286 - 00:02:13.334, Speaker A: And so what's really nice about this is that the gas used here isn't actually gas that's on chain. So this is just being run by a chainlink node. And then what happens is if your check upkeep method returns that upkeep is needed, then it's going to go ahead and perform upkeep on chain. So you can actually generate data off chain and then pass that in. That's called the check data. And then that becomes the perform data that's passed into perform upkeep. And so the perform upkeep method is where you're going to want to verify that things are correct and that things actually should be modified and run on chain and then actually make the state change.
00:02:13.334 - 00:02:45.710, Speaker A: And so let's go ahead and compile this contract and deploy it to the coven network. So let's go ahead and within remix we can do this compilation and we're going to compile and deploy directly to coven. So the channel keeper network is currently, as of the filming of this, available on both coven as well as the Ethereum main net. And let's go ahead and deploy the counter contract. And let's say, let's not update more than every 30 seconds. So let's go ahead and deploy. So metamask is going to ask for a little bit of payment in order for me to deploy this contract to the coven network.
00:02:45.710 - 00:03:08.178, Speaker A: And it looks like that is live. So now what I'm going to be able to do is I'm going to be able to take this keeper contract and copy its address. And now we're going to register that contract for upkeep. So we're going to jump over to the application that powers the chain keeper network. There's a few different ways you can do this. You can interact directly with the registry contract, but there's a very, very nice interface that lets you do this. So let's go ahead and register a new upkeep.
00:03:08.178 - 00:03:52.440, Speaker A: And it's giving me an error that says you need to connect your wallet. So let's go ahead and do that. So I'm going to just connect wallet here and I'm going to give it access to my account. And then from there we should actually be able to register. So I'm going to use an email address here, I'll give my contract a simple name, I'll paste in that address from the deployed contract and then I'll give it a gas limit and then check data. Is this special thing where you can actually register multiple upkeeps on the same contract and pass in data to specify how you want check upkeep to be run, but we're just going to ignore that is an optional one. And then we'll give it a starting balance of around ten link.
00:03:52.440 - 00:04:37.454, Speaker A: It's going to go ahead and use metamask again to register that transaction on the network. And once it's confirmed, my upkeep should be registered with the network and funded with ten link to kick things off. All right, if we go ahead and view the upkeep, we can see it's registered. And as soon as the next round of the keeper nodes executes, which should be roughly about every block, we should see that the check upkeep method is going to return that. Hey, upkeep is actually needed because the timestamp is more than 30 seconds ago and then we should go ahead and perform upkeep. So as soon as I take a look at this in remix, I can actually make this bigger here. We're going to be able to see from the methods of the contract.
00:04:37.454 - 00:05:27.042, Speaker A: If we check the counter, it's going to start at zero. And as soon as that 30 seconds has passed, we'll be able to hit the counter again and we'll see that the chain link keeper network has performed upkeep on my contract. All right, we just refresh and we see that the balance of the upkeep has been decreased by about zero one link. And we should also see within our contract that our counter has now updated via that perform upkeep method call. And now our counter is at one showing us that our contract is being upkeeped by the Chainlink keeper network and everything is working exactly as we expect. So as you can see, it is very, very easy to create a contract that is compatible with the keeper network. And it's very, very easy to register that upkeep and start seeing that your contract automation and off chain compute station are working flawlessly.
00:05:27.042 - 00:05:29.880, Speaker A: Thanks so much for watching this video. We'll see you in the next one.
