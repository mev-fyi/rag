00:00:00.170 - 00:00:25.638, Speaker A: In our last video, we made an API call, brought it into our smart contract, and explained exactly how it works. Oftentimes though, when building smart contracts, you'll want some additional functionality like API authentication, off chain computation to save on gas, connecting to other blockchains, and anything else not covered in the core adapters. Chainlink external adapters allow for unlimited customizability when it comes to building these.
00:00:25.724 - 00:00:26.886, Speaker B: In this video, we're going to go.
00:00:26.908 - 00:00:31.910, Speaker A: Over what an external adapter is, how to build one, who should host it, and then how to use one.
00:00:31.980 - 00:00:41.226, Speaker B: There's a lot to cover in this video, so let's build when we talk.
00:00:41.248 - 00:01:06.750, Speaker A: About adapters tasks, there are two types. There are core adapters and external adapters. Core adapters are the adapters that come already installed with the Chainlink software. HTTP get copy JSon parse are all examples of core adapters. External adapters are where you can build your own additional functionality. Most external adapters are executed entirely off chain, so they can be built and tested entirely off chain as well.
00:01:06.820 - 00:01:08.258, Speaker B: Now when building these, we need to.
00:01:08.264 - 00:01:20.966, Speaker A: Keep in mind that other nodes need to be able to run these external adapters as well. And it's not just for us. This is so data can stay decentralized. Think of external adapters as open source packages, but for Chainlink nodes this is.
00:01:20.988 - 00:01:22.594, Speaker B: Great because we can build an external.
00:01:22.642 - 00:01:28.466, Speaker A: Adapter and add this customizable functionality, but also not have to run the node that hosts it ourself.
00:01:28.578 - 00:01:31.002, Speaker B: This way, smart contract engineers can focus.
00:01:31.056 - 00:01:47.518, Speaker A: On smart contract development and node operators can focus on the node operating. You can add your external adapter to a node listing service like market link or join the Ask a node operated discord and ask a node operator to host it for you. But if you want to run your own node, then of course you should.
00:01:47.604 - 00:01:49.038, Speaker B: One of the simplest ways to make.
00:01:49.044 - 00:01:52.062, Speaker A: An external adapter is to make it an API itself.
00:01:52.196 - 00:01:54.234, Speaker B: This way we can customize the computation.
00:01:54.282 - 00:02:06.306, Speaker A: Any way we like and use any language. There are tons of tutorials out there on how to build your own API server. We're going to build an external adapter using a node JS template. We also have a Python template in.
00:02:06.328 - 00:02:08.578, Speaker B: The description as well. If you want to get started there.
00:02:08.664 - 00:02:11.798, Speaker A: You'Re more than welcome to build your own API server from scratch, but the.
00:02:11.804 - 00:02:13.174, Speaker B: Template that we're going to use makes.
00:02:13.212 - 00:02:15.298, Speaker A: It really easy to spin up external adapters.
00:02:15.394 - 00:03:02.610, Speaker B: You'll need yarn and node JS installed to proceed to get started. We're going to use this repo to check if we have yarn and node installed. We'll do a quick yarn v node v links in the description to download these. Now we want to clone the repository, copy, git, clone and CD into the repo. We can now see all the files in the repo. We'll type yarn to install the packages and then we'll do yarn start to start the server we'll see here the server is listening on port 80 80. It is now listening for entities to call it when a chainlink node is running through its adapters.
00:03:02.610 - 00:03:44.500, Speaker B: When it gets to an external adapter, it makes a call to that adapter. What we are about to do is going to mimic what a chainlink node is going to do. I have a second terminal up so we can see the results of the server from our call and we can mimic it locally with this command. This is a curl command which is basically an API call. It's going to be an HTTP post using JSON to our local host, which is where our server is currently running and we're adding this data flag to it. We'll talk about that in a minute. Now we make the call and we can see that the server responded and we got an answer right here.
00:03:44.500 - 00:04:18.254, Speaker B: Let's look at what's in this data object. Chainlink nodes send JSON requests that have an ID and a data object for one to be valid. It could be as simple as this. In the code of our external adapter we specified that we're looking for from and to parameters and we place them inside of our data object. A valid external adapter always needs to have an ID and a data object. This is what our server responded with. All external adapters need to respond with a job ID and a data object.
00:04:18.254 - 00:04:46.150, Speaker B: Ideally you'll have a status and result field as well. This will make error handling and getting the result you want much easier. As we can see here, the result is 353.32 and this is the current price of Ethereum. We are getting this data because our external adapter is actually calling an API as well. In the code you'll see this URL which calls an API. We can test to see what this responds by posting into the browser.
00:04:46.150 - 00:05:33.350, Speaker B: So this external adapter is actually an API that's wrapped around an API. Looking at this API URL, we can see that the last endpoint is price and the parameters are FSim and TSiMs. Our adapter makes it a little easier to read by accepting from and to as parameters. Now that we know what it does, let's see how it's done and we'll do this by updating it to our own new external adapter. We want our new adapter to get weather data. We want to get the temperature of Boston to be returned through this external adapter. For this we're going to use the open weather API.
00:05:33.350 - 00:05:57.360, Speaker B: This will also require an API key, so we'll get to see some simple API authentication. First, let's sign up for a free key for this API. You have to wait for the key to become active. So after you sign up, feel free to take a quick ten minute break and come back. Once we have our account verified, we can find our API key here. We'll need this later. Let's look at the documentation to see what the URL looks like.
00:05:57.360 - 00:06:27.930, Speaker B: By looking at the documentation we can see the URL is quite simple. We can see the endpoint is weather. It has a queue parameter which is going to be the city, and an app Id which is going to be our API key. Let's see what this API responds with. Great. We can see that we get a lot of good weather data here. We're going to be looking at this temperature field which returns the temperature in Kelvin.
00:06:27.930 - 00:06:54.610, Speaker B: So now let's adjust our existing external adapter to account for this. Now there are a lot of files in here, but there are two that we really care about. App JS, which is some simple boilerplate for running an exprs node JS server. We can ignore this file since we won't be making any changes to it. All of our adjustments are going to be in index Js. The external adapters package adds some nice functionality to make it easier to spin these up. This is a helpful function for getting custom errors.
00:06:54.610 - 00:07:31.858, Speaker B: Now we're getting into the interesting part. Previously we used base and quote or from and to get the price from ethereum to USD in our new API we found that we only need to worry about the city name. We're going to ignore the API key for now because we want to set this as an environment variable. I'll talk about that in a little bit. So this is where we can set some custom parameters. We want our external adapter to be able to take a city and use q city or town to define it. Now we get to our create request function.
00:07:31.858 - 00:08:15.300, Speaker B: This will be how we call our new weather API validator object helps you validate chainlink request data. Job run id make sure we have a job run Id. Then we add our new endpoint, which is going to be weather. We add our new URL which is going to be our open API weather, we add our new parameter which is going to be our city parameter. And now we're going to add our API key. We're using this process env syntax so that our API key is an environment variable. This way we don't have to store our API key on chain and let other people see it.
00:08:15.300 - 00:08:44.246, Speaker B: You'll want to create a envrc file which has your API key. And remember don't put it in source code. Here's an example of a Envrc file. When we run our server we can make the API key active. By running this command. You can learn more about environment variables in the description. Now we can change our parameters to the two new parameters that we just added.
00:08:44.246 - 00:09:05.806, Speaker B: Our config is going to stay the same and this is how we handle the request. Remember that we said that we wanted to bring up the result that we wanted and add it to our result response. This is where we do that. Previously the result response was in the JSON mapping of the two symbol. Let's look at our API again and find out where it is.
00:09:05.908 - 00:09:21.960, Speaker C: We can find where the temperature maps. By going through the JSON we can see that we first have to go to the main key and inside the temp key of that result. That's how we get the temperature in Kelvin. So in our code, all we have to do is update this.
00:09:26.890 - 00:09:28.726, Speaker B: With the path that we need to take to.
00:09:28.748 - 00:09:52.206, Speaker C: Get to our result and that's it. There are a couple functions below which help deploy to serverless architectures like the GCP and AWS. We can ignore those for now, but great, it looks like we're actually all done. Let's test it out. We'll start our server up with yarn start in our new terminal. Let's write our new curl command to test it. So it's going to be the same thing.
00:09:52.206 - 00:10:03.186, Speaker C: We're going to call our local server. Our data object is going to be a little different though. We can use any ID we want, we're just going to use zero. And all we have to do in.
00:10:03.208 - 00:10:05.678, Speaker B: The data object is add the city of Boston.
00:10:05.774 - 00:10:11.590, Speaker C: And remember, since our API key is currently an environment variable, the server should pick it up automatically.
00:10:13.610 - 00:10:14.310, Speaker B: And great.
00:10:14.380 - 00:10:29.866, Speaker C: When we hit enter we can see we got a response. We can see the result is 296.71 degrees Kelvin. And this is exactly what we wanted. When making really robust external adapters you.
00:10:29.888 - 00:10:33.594, Speaker B: Want to add some tests as well. This test file is really easy to.
00:10:33.632 - 00:10:36.142, Speaker C: Update to and you can run it with yarn test.
00:10:36.276 - 00:10:42.250, Speaker A: So now that we have our external adapter done. How do we give it to other nodes so that we can pull this data into our smart contracts?
00:10:42.330 - 00:10:44.030, Speaker B: There's a few different things that we can do.
00:10:44.100 - 00:10:46.962, Speaker A: We can add it to a node listing service like market link.
00:10:47.016 - 00:10:48.674, Speaker B: You can ask a node operator or.
00:10:48.712 - 00:10:52.900, Speaker A: Network of node operators to host it, or you can run a node yourself.
00:10:54.710 - 00:11:01.506, Speaker B: Now let's say a node is hosting your external adapter. Let's find out how to use it and get the data into our smart contracts.
00:11:01.618 - 00:11:03.398, Speaker A: For this example, let's say that we.
00:11:03.404 - 00:11:26.366, Speaker B: Built the Alpha Vantage external adapter. Alpha Vantage is a stock and crypto data API that requires an API key as well. Let's see if we can get the price of Tesla through an external adapter. So we'll come down, go to adapters and look for the alpha Vantage external adapter. We're going to be on the coven network here. As you can see, a couple other.
00:11:26.388 - 00:11:29.438, Speaker A: People have made alpha Vantage external adapters as well.
00:11:29.524 - 00:11:33.246, Speaker B: Let's try this one. We can see all the documentation for.
00:11:33.268 - 00:11:35.730, Speaker A: The external adapter here and how to use it.
00:11:35.880 - 00:12:15.470, Speaker B: Let's see what nodes support this adapter looks like on the Coven network. Linkpool is the only node that supports this adapter. To use this oracle and adapter we're going to grab the oracle address and the node job id just like in getting any API. If you're not sure how to make an API call in solidity, be sure to check the documentation or one of our earlier videos. But again, we're going to grab the node job id and put it where it says id in our job Id. We're going to grab the oracle address, place it where it says oracle. I already had this pre populated.
00:12:15.470 - 00:13:26.510, Speaker B: As you can see, the code for using this external adapter is almost identical to using any API. The only difference is we don't see a URL posted in our request price method. So we build our request Tesla price method, which would be equivalent to our request Ethereum price in earlier examples. And instead of passing a URL, we just pass the parameters and path of this new external adapter. We can get the parameters of the URL by going to the documentation of the adapter or we can go to the documentation of the actual API. These parameters that we're going to be adding is what is going to show up in our data package. The copy path is where in the response string we want to get the data from which we can see in the API return.
00:13:26.510 - 00:14:05.928, Speaker B: It's going to be global quote price because we want to get the price of Tesla. In this case we used IBM. We're going to add that path and then we're going to multiply it by 1000 to get rid of all the decimals and then we're going to send it. Let's compile this and run it as always, add link and then request the price. And we can see we have the price for Tesla in our smart contract. Now using an external adapter in your smart contract is no different than using any other adapter. You can deploy this code in remix in the description below.
00:14:05.928 - 00:14:20.430, Speaker B: If you're looking to see a good list of existing adapters that a lot of professional node operators use, also be sure to check out the external adapters JS model repo. It contains support for a number of popular APIs already and has tons of documentations below to get deployed quickly.
00:14:21.040 - 00:14:27.132, Speaker A: As you can see, external adapters allow for unlimited flexibility and customizability to your smart contracts.
00:14:27.196 - 00:14:28.496, Speaker B: And remember, if you build a really.
00:14:28.518 - 00:14:35.488, Speaker A: Cool external adapter, be sure to tag it with Chainlink and share it on social media. There's unlimited external adapters that have yet to be built.
00:14:35.574 - 00:14:37.444, Speaker B: Now external adapters are really good for.
00:14:37.482 - 00:14:41.668, Speaker A: Getting really customized data, but what if you don't really want customized data?
00:14:41.754 - 00:14:43.156, Speaker B: Maybe you're thinking you wish there was.
00:14:43.178 - 00:14:51.188, Speaker A: Just a default solution for really common data that a lot of people would use, for example, pricing data or other pieces of data used in defi.
00:14:51.284 - 00:14:52.856, Speaker B: Maybe you want to use the same.
00:14:52.958 - 00:14:57.752, Speaker A: Simple, easy to use tool that's powering a lot of the top projects in Defi right now.
00:14:57.806 - 00:14:59.156, Speaker B: Well, I'm glad you asked, because we'll.
00:14:59.188 - 00:15:04.440, Speaker A: Be explaining one of Chainlink's simplest and yet most powerful and effective tools in the next video.
00:15:04.510 - 00:15:05.110, Speaker B: I'll see you there.
