00:01:30.530 - 00:01:40.738, Speaker A: Hello. Hello. Welcome to the stream. How is everybody doing? GM's in the chat. GM. Gm. Gm.
00:01:40.738 - 00:02:06.590, Speaker A: GM. Hope we're all doing well today. We're learning how to do some chainlink node operation, how to run a local chainlink node. This is a good one. It's a long one. A lot of stuff here. Being able to do this is going to give you the ability to really customize your smart contract development, your protocol, as much as you want.
00:02:06.590 - 00:03:07.746, Speaker A: Right. Running your own chain LinkedIn node allows you to kind of test, fully implement, do things with external data, do things with APIs, do things that you couldn't do other places. So excited for you all to be here and we're just going to jump into things because there is a lot to cover in running a chain link node here. Just grab my code base here. 1 second it. Let's do this. It.
00:03:07.746 - 00:03:26.394, Speaker A: I think this is about to blank out but you know, whatever. All right. Is it blanking out? Yes, it's blanking out. 1 second. Sorry. There we go. Boom.
00:03:26.394 - 00:03:50.500, Speaker A: Much better. And then we'll do this. Boom. This stream just started so you were not late. You're perfectly on time. So we're running our own chain link node here. I have my vs code up, got a new terminal, a new folder, hack 22.
00:03:50.500 - 00:04:42.920, Speaker A: Let's get into this so we can go over to dockers chain link, go to the node operators tab and click on set up a chain link node and this will bring us right into running a chain link node and give us all the information we need. Excuse me. Now there is one thing different that I'm going to do from the chain link node. So I'm running on a Mac and the Mac darker gateway can be sort of a pain in the butt. So I'm just going to be doing one thing different. But yeah, we'll see it when I get to it. But normally you can just follow along with the docs here and literally go end to end and be done.
00:04:42.920 - 00:05:33.560, Speaker A: Yeah. So requirements for this are that you don't need any link to start, but you do need a minimum of at least two cores and 4gb of ram. If you're going to be running a lot of jobs you really need at least four cores and 8gb of ram. So this is kind of the minimum requirements of your machine. So you can check this out by depending on your machine going to the about section. The next is you're going to need a postgres database and you're going to need to have that database, have at least two cores, 4gb of ram and 100gb of storage. For more professional setups, you're going to need a lot more.
00:05:33.560 - 00:06:31.024, Speaker A: Now postgres, you can get postgres a lot of different places. If you're using AWS, GCP, et cetera, they have their own instances, but if you're using like a Windows or a Mac or anything. I actually have found the postgres documentation has been kind of tricky to use. But PSQL is postgres. What I have for my Mac here is I've got this little postgres app, allows me to have some local databases running and it just makes my life a lot. So you'll just need some type of postgres SQL database running. Like I said, I have mine like this.
00:06:31.024 - 00:07:47.480, Speaker A: But whatever works for you, works for you. And then finally you'll need an Ethereum client. So for all of us here, we should have a quick node connection. And if you don't quicknode, this is quick node here, you should be able to sign up, grab an API key, no problem. And I'm actually going to do one for this demo. Let me just switch to me real quick. I'm just going to create a quick no demo and then that way I can show you guys my URL and not be afraid of like if you guys grab it or not because this will be a dummy one.
00:07:47.480 - 00:08:21.220, Speaker A: Just want to make a quick dummy one though. Let me just verify my email address. People are staying in the chat. Postgres with docker works too. That's great. That also works as well. Just verifying my quicknote account once my Internet decides it wants to work for me.
00:08:21.220 - 00:08:49.740, Speaker A: And this is how we're going to connect to the blockchain. We're going to use this to create our own go early Gorelli whatever connection. So let's go back successfully verify my account. Let's go ahead and create an endpoint. We'll do Ethereum. Gorelli, go early. Whatever you pronounce it, we don't need any of this stuff.
00:08:49.740 - 00:09:20.310, Speaker A: I don't want any of that. I want free create and we should have a free endpoint. And boom, we do. So now we have kind of this endpoint. This will be our connection to the blockchain. Now you could run your own geth node, your own other Ethereum client. This is like more low level type stuff that we're doing here.
00:09:20.310 - 00:10:11.140, Speaker A: But yeah, so step you'll need some type of endpoint, whether it's your own, whether you're using somebody else's, if you're being a professional node operator. It's highly recommended that you run your own Ethereum client or avalanche client or Solana client or whatever blockchain you're working with. But for the purpose of this demo, we're just going to run it. Borrow one from quick node. Can I run the postgres on the same machine as a node? Yes, you absolutely can. All right, cool. Okay, so then the next bit is jumping into using Docker.
00:10:11.140 - 00:10:54.020, Speaker A: Sorry. Now there's no link requirements. We've talked about the node requirements. We have our postgres database, we have an ethereum client with quicknode, and now we can either run from source or run from Docker. Now for most people, I'm actually going to recommend using Docker here. However, I'm going to be running from source, and then if you're a professional node operator, you're definitely using Docker. However, I'm going to run from source for this demo just because my docker gateway is being really finicky as of recent.
00:10:54.020 - 00:11:36.384, Speaker A: So this requires a couple other steps. But once we get it started, the rest of these docs are the same. So if you want to install Docker, you can install Docker and they give you some commands based off of your UI. But I'm going to go ahead and I'm going to do my installation from source. What does from source mean? It means just we're going to run the chain link software just from GitHub and that's pretty much all that means. So on my terminal have the chain link code already pulled, already cloned and. Right.
00:11:36.384 - 00:11:58.664, Speaker A: And if you're unfamiliar, you would just do git, clone this, stick it in there. I've already done that, so I'm not going to do it again. You also need go 1.19 so I can do go version. I'm on go 1.19 so I'm good to go there. You also need to have your path set.
00:11:58.664 - 00:12:49.060, Speaker A: My path is set. I'm not going to do echo path because my path is a horrible monstrosity. And then you're going to need node js and yarn. Again, this is only for the chainlink local installation and see the current version and blah, blah, blah. I think there's a specific node version, let me just check version 16. Okay, we should be fine. Great.
00:12:49.060 - 00:12:59.520, Speaker A: And we have yarn as well. We have postgres. Awesome. We have python three. Great. Chain link. Awesome.
00:12:59.520 - 00:13:28.572, Speaker A: And then, okay, now we just run, build and install chain link with make install because we've already done this. We have Python three. Great. So now we can just run, make, install. And what this is going to do is it's going to install chain link on your machine. So like I said, the reason I'm doing this is just because for some of the docker stuff, it makes it a little easier. So whenever you see on here, we run a docker command.
00:13:28.572 - 00:14:05.004, Speaker A: I'm just going to run like a local install command unless I oh, I got to run yarn first. Sorry, did not tell us to run yarn. Should tell us to run yarn. Oh, if you get any errors, yeah, try running yarn install first. Okay, cool. Well, we're running yarn now, so while this is installing everything. Thoughts? Comments? Questions? What's up everybody? How are we doing? My current version of yarn is out of date.
00:14:05.004 - 00:14:38.260, Speaker A: Well, let's run, make, install now. Oh, I got another error. No required module provides package. I don't know what that means. Let's just remove node modules and try again. It okay, no require module provides package. Interesting.
00:14:38.260 - 00:15:56.650, Speaker A: So mad about that. Go get buffalo packer. Sorry, what this package is, it's packaged, might need to add that to the docs. All right, well, I just went ahead and added that, turn it off and tried turning off and on again. Yeah, that honestly fixes like 80% of my stuff. So now we're installing. Yeah, maybe I need to make an issue on the repo about that.
00:15:56.650 - 00:16:38.404, Speaker A: If somebody else runs into that same issue when going through this, go to the chain link GitHub and please make an issue and say, hey, I'm running to this issue for now. You can just run that, go get whatever it was saying and it'll install that package for you. But yeah, so now this is installing, which is good. And we can kind of chill while this is actually going. And remember, if you want to just do this with Docker, you can do this with Docker as well. You would just need to first install Docker. The advantage of Docker obviously is you don't need yarn, npm all that stuff.
00:16:38.404 - 00:17:46.752, Speaker A: You just need Docker because that's how Docker works. Disadvantages, you run into some other weird stuff. Am I lagging a little bit? Yeah, I'm lagging a little bit. That's fine. So now I should have chain link command line and I do, I can do chainlink version and now I have the chainlink cli command installed and I can actually run chain link, which is good. Awesome. Okay, now that I have the local install done, yeah, I should be able to run chain link help or chain link version and we should be good to go.
00:17:46.752 - 00:18:19.260, Speaker A: And I do. Okay, cool. So I've installed it from source. If you're using Docker, you would just do like Docker pull smart contract kit, chainlink, whatever the package name is. I think it's like chain link 1.9.0 or something like that. You would just install it with Docker.
00:18:19.260 - 00:18:56.744, Speaker A: Cool. Next. So once we have our thing up, our docker up or from source up, we need to create a directory. We're going to do chain link, go early. So I'm going to do MkDR chainlink go early, go in here. We now have a new directory chainlink go early. And we're going to need to grab all this, put it in a env file, new file av, boom.
00:18:56.744 - 00:19:36.328, Speaker A: Like that. You'll see that this does like Echo and just kicks it out into that chain link gorilli file that we just made. I just copy pasted it myself. Question, can chain link nodes run multiple blockchain clients simultaneously? They are in the works of enabling that. But right now for every single different network that you want, you need a different chainlink node. So you'll see when we get to the chainlink Node UI that there is like a feature for this, but it's not production ready. All right, cool.
00:19:36.328 - 00:20:17.670, Speaker A: So then we need to set our ethereum client URL. If your ethereum client is on the same machine, you can run this command to get the correct ip. And this is again one of these weird like kind of docker things. But for us, we're just going to be using our quick node so it makes a little bit easier. We're using the websocket. So we're going to copy this right here and we're going to say eth URL equals in our env. So we're going to do eth URL equals boom, just like that.
00:20:17.670 - 00:21:03.132, Speaker A: Since we're using an external provider, it's just like this ether URL and popped it in like that. Perfect. Next, we need to set the remote database URL. So this is connecting our chainlink node to its database instead. This we're going to do, and you can see down here it does another little echo. We're going to say database URL equals and then add our database URL for us. Our postgres is connected to a local postgres node.
00:21:03.132 - 00:21:35.980, Speaker A: So postgres get our local host. We're going to do 127.0. .0.15,432 this is the localhost port, excuse me, localhost IP and then the port of our postgres. And if we go back here we can see kind of the different databases that we have running. Ours is going to be called hackathon 22. So we'll do hackathon 22 and then we also want to do SSL mode equals disable because we're running our stuff locally.
00:21:35.980 - 00:22:24.008, Speaker A: Typically when you do this you can do the setup like username, password, server port, database. Since I'm running mine on a local network with weaker permissions. I don't have a username, I don't have a password, but I do have a server port and database. So this is just server, right, server IP port and then database. And the easy way to check if this is working is you can just grab this line and in your terminal here you can just write pSql and then paste that in. And if you see like a setup like this, it means you're good. So PSql, this is a command line that I've installed.
00:22:24.008 - 00:23:28.440, Speaker A: Sorry PSQl command line install. There's a couple of different ways to install this, this pSql, but it's just like a really helpful tool for connecting to databases and then we'll go ahead and quit. Great. So we have our URL, we have our database now we can actually just run stuff. So the command it gives us here is the, this is the command for Docker. We're going to use the from source ones. And I do want to add this, actually this allows us to do some funky stuff that I want to do.
00:23:28.440 - 00:24:43.920, Speaker A: But then we should just have to run chainlink node start or chain link local n and we should be good to go. So we're here, we'll do CD chainlink grilley. We want to be in the same place that our env is. But now we should just be able to run chainlink local n or chainlink node n chainlink node start or chain link local n. And I'm running into this issue. Creating redirectory chain link make geo chain link read only system. Read only file system.
00:24:43.920 - 00:26:40.814, Speaker A: Is it because my env is in the wrong place? I think it is. Give me a second here. Welcome to coding live. If it doesn't go correctly the first time it'll break the next time. Creating a root directory chainlink. So maybe I do do it with root directory. I've done this a hundred times, chmo.
00:26:40.814 - 00:30:07.720, Speaker A: But I don't know who I would be ch modding. Sorry, switch versions. Sorry about this. It then I would have to get the gateway right. It's the root directory set to somewhere else. It do I need to do it? It's that's a different one. Why is it working for that onely file system? What do I need to do? I need to change.
00:30:07.720 - 00:31:17.802, Speaker A: Oh, is the root. So this is just the root. This shouldn't matter or I don't think it should matter. Frustrating. Yeah. Thank you. Thank you, Carlos.
00:31:17.802 - 00:31:41.590, Speaker A: This shouldn't matter. Why did it. Oh, I'm an idiot. No, that's what it does for docker. Oh, sorry guys, I was being dumb. So root chainlink in docker, it'll set it up so that chainlink is like the root of your chain link node. Wow.
00:31:41.590 - 00:32:12.626, Speaker A: Thank you, Carlos. Wow. It's been a while since I ran a chain link node locally, I guess. But this is like the root of where all of your chain link node stuff needs to be. And I was just being an idiot and I was like, why is it writing to this weird location? Okay, so we have our node set up and now it's asking for a store key password. And this is going to be for the chainlink nodes address. So whenever the chainlink node sends data it needs to send a transaction, it actually needs its own private key.
00:32:12.626 - 00:32:47.538, Speaker A: So this key store is going to be the password for that private key. So I'm going to do a real crappy password do. It's got this like annoying, must be 16 characters long. Okay, so I'm going to do what, I'm going to do A-S-S wright. Okay, this is going to be my password. Don't ever use this password. This is terrible password.
00:32:47.538 - 00:34:10.416, Speaker A: Let's try this again. Now it's mad about something else. Sorry, what are you mad about? Now stop and start the database. Now it's having hard time connected to my database. Why is are you so mad? Connected to the database. It's not connecting to the right database. Saying connect to users.
00:34:10.416 - 00:34:42.320, Speaker A: Patrick. Database equals blank application name. Oh, duh. Because I have random junk in my, okay, here we go. All right. Passwrd 1234-5678 happy about that. Yay.
00:34:42.320 - 00:35:09.150, Speaker A: Password 345678. Okay, cool. Our node is now running. I'm just going to, don't ever do this. I'm going to make a password file. T-A-S-S wrd 1234-5678 just for the purpose of this demo, enter API. We'll do test@test.com
00:35:09.150 - 00:35:50.984, Speaker A: we'll do the same password actually because I don't care. Okay, cool. Now stuff is running, stuff is up and going. What we should be able to do now is go to our local host and we can now see our chainlink nodes operator UI and we can log in with that username and password now. We did it. Okay, well, we just got it spun up. Thank you, carlos, again for pointing out, be like, hey, patrick, you're being really silly right now, but cool.
00:35:50.984 - 00:36:11.676, Speaker A: So this is our node operator UI. So in here we have different jobs, which we have nothing yet. We have different runs, we have nothing yet. We have chains. So this is the thing somebody was asking about. They were like, hey, can you run multiple chains through one node? The Answer is it's in beta. So not yet nodes.
00:36:11.676 - 00:36:38.296, Speaker A: You can ignore bridges, we're going to kind of ignore transactions. We're going to ignore. There's just a whole bunch of stuff in here, right, cool. So once we have our node up though, then we're going to move to fulfilling requests. So what do chain link nodes do? Well, they deliver data on chain, right. They respond to requests. They deliver data.
00:36:38.296 - 00:37:30.568, Speaker A: So what we're going to do here is we're going to follow this fulfilling request section and we're going to do exactly that. Yeah, we're going to deploy our own Oracle contract and start it up. So the first thing that we're going to do for this now is we're going to click on this little button here, which is going to pop us up into remix. It's already going to have some good stuff for us in here and it's going to give us this oracle soul thing. So we're going to go ahead and compile this contract and then we're going to deploy it. So the newer versions of this are called Operator Soul. If you want to use operator Soul, you're welcome to do operator Soul too, but this Oracle Sol is just going to help facilitate our transactions.
00:37:30.568 - 00:38:28.080, Speaker A: So let's go to inject a provider for metamask. I think I have some crappy password for this one too. A lot of my testing stuff, I just use like really terrible passwords and I'm fine with that because they're testing. Great. So now we're connected with remix. We have this oracle Sol and we're going to grab the Gorelli go early link token address and we're just going to go ahead and deploy Haza and you can go check out this Oracle sol code at the chain link GitHub if you want. Here's our contract.
00:38:28.080 - 00:39:05.264, Speaker A: I'm just going to copy this, put it into passwords for now. Oracle address just for now. Great. And we're going to leave this up for now because we're going to need to add something here. Kent 42. Yes, this is how you can kind of create your own mock miniature data feed. Obviously there's a few more steps than what we're going to cover to create a professional one because you're going to need a lot more nodes and a lot more coordination, but cool.
00:39:05.264 - 00:40:15.480, Speaker A: So we've deployed, we've compiled, we've deployed, hooray, haza. Now what we need to do is we need to add our node, our nodes key to our oracle contract address. So the way that this works is whenever a request is made to our chainlink node, our chainlink node is actually going to send the response to this oracle contract that we just delivered and then this oracle contract is going to pass it over to the contract that made the request. So we actually need to tell this contract that it's cool if our node delivers the data. So what we're going to do, and it says it in the docs here, there's a set fulfillment permissions and we're going to set it to true. So set fulfillment permission, we're going to grab our chain link nodes, address, paste it there, we're going to do true, we're going to hit. Ok, and we're going to confirm.
00:40:15.480 - 00:40:48.352, Speaker A: So now we're basically hooking up our oracle contract that we just deployed to our chainlink node. And additionally because our chainlink node has this evM address, what we need to do is we need to send it some gorelli eth. We're just going to send it one for now. Confirm. Thank you. And remember, don't have any go early Gorelli. I don't know how to pronounce any of this stuff.
00:40:48.352 - 00:41:18.574, Speaker A: Go to faucets chain link and you'll be good there. Yes, this is correct node to the oracle contract, to the smart contract. Yes, ice queen. There should be sound. I hope there is sound and cool and that's going through. And once that finishes going through, we'll see this updated, which is nice. Okay, cool.
00:41:18.574 - 00:41:43.880, Speaker A: Set fulfillment permission to true. Awesome. Now we're going to add our first job. Okay, so we're going to hit copy here and this is what our first job looks like. And in our operator Ui we're going to hit new job and we're going to paste it in and then let's go ahead and hit create job. Oh, whoops. But we have to swap out our oracle contract address, which we're going to do.
00:41:43.880 - 00:42:06.478, Speaker A: Paste that in there and there's usually a second spot. Paste it in here. Great job. Okay, cool. Now we've successfully created job one. If we go back to jobs we see we have a job here, its name is get un 256 and then here's the definition. Now this might be a little daunting, but let's kind of talk about this real quick.
00:42:06.478 - 00:42:49.566, Speaker A: So type is direct request. So there are different types of jobs with chain link, right? So if you go over to EVM chains and you look on the left hand side, you have data feeds using randomness. Connect to any API and automate contracts. A direct request job, direct request job is going to be this connect to any API, right? So there's a lot of different types. There's a type for the chainlink automation, there's a type for Chainlink VRF, there's a type for chain link data feeds. We're just using direct request schema, version one. Ignore that.
00:42:49.566 - 00:43:08.514, Speaker A: That's the name, that's the job id stall. Doesn't really matter. This is the contract address. So this is the address that, this is the oracle address that we're interacting with. Minimum contract payment. Whenever you take a request you actually get paid in link token. We're just setting it to zero for now.
00:43:08.514 - 00:44:15.286, Speaker A: And then here's kind of the more interesting data parts. This syntax can get a little used to getting used to, but basically what it's happening is it's going to be listening for events, right? So it's listening for events of this contract and it's going to decode any Oracle request that comes in. So remember how if you're familiar with events and solidity, this chain link contract is going to emit this oracle request with all this stuff in it, and we're basically going to extract the information off of this event. Then we're going to parse the data that comes from that event and then whatever in that data object, we're going to set some parameter to a get, we're going to fetch that, we're going to make an HTTP get call, and then from that response we're going to JSON parse it, multiply it and code the data and then resubmit it on chain. And then this is just like the order of stuff. So this is a little confusing. Don't worry about it.
00:44:15.286 - 00:44:43.300, Speaker A: When I show you what it looks like, it'll make sense. But, so this is the job that we just created, which is great. And then hopefully if we go to key management, great. Now we have an eth balance of one so we can actually send transactions. Here's cool. All right, now what do we want to do? So we've done that, done that, edit a job. Awesome.
00:44:43.300 - 00:45:23.002, Speaker A: And now what we can do is we can actually deploy a contract and interact with our node. Exciting. Very exciting. So here is this a test night contract. I don't love this one. Do I want to use the other one? The other one look like maybe I should just stick to the one that I practiced. Kind of want to do this one though.
00:45:23.002 - 00:45:46.020, Speaker A: This one's nicer. I guess it's fine now. There's too much stuff here. I don't want to use this one. If you want to use that one, you can use that one. I'm going to use this single word response one from the docs. I'm going to copy this, go to remix, and we're going to paste it in here.
00:45:46.020 - 00:46:21.166, Speaker A: API request. What's this one called? API consumer name. I'm going to use API consumer because that's what I want to use. All right, cool. So in here we have some stuff. So we set the link, the chain link token, which is great. That's what we want.
00:46:21.166 - 00:46:44.758, Speaker A: We also set a chain link, Oracle, and we give it a job id for us. Our oracle is different. So what we're going to do is we're going to grab this Oracle address that we deployed that we used before. Oh, it's the same one as this one. So we're going to get an oracle address. Oracle address. We're going to need our job id.
00:46:44.758 - 00:47:31.000, Speaker A: So if we go to the definition we can see external job id like this to remix. And then we just got to get rid of these hyphens and then a fee. And then we're going to call, we're going to make an HTTP get request to this URL here. And this is the response. And what we're going to do is we're going to say, okay, we want the volume 24 hours. We want raw FUSD volume 24 hours. So that's raw four hour value that we're going to get.
00:47:31.000 - 00:47:57.730, Speaker A: But as you can see here, there's a decimal place here. Decimal places are no good for sliding. So we're going to do this times amount. We're going to multiply it by this massive number to remove the decimals. We do this rec add to add this to it. We do the times amount, we do rec add in it or excuse me, add int. And then we're going to send the chain link request.
00:47:57.730 - 00:49:35.126, Speaker A: So what we're going to do is we're going to compile the contract. We're going to go to injected metamask, we're going to deploy this confirm, and then we're going to use this contract that we're deploying to connect to our node that we just created, which is pretty gosh darn exciting, but of course, we got to wait, like, a million years for our transactions to go through, because such is the life of web three. The metamask update I actually thought was pretty cool if everyone's been following along with that. If you look into your metamask, you can now see, like, sepolia, if you go to networks like Sepolia and Guerrelli are now there, and Robson, Coven, and Rinkpear are now kind of grayed out, which is kind of sad, but it's also such a slight. Okay, cool. So our contract finished deploying, and now we have this contract. Now I'm going to press this button, I'm going to send this request volume data transaction, and we're going to get an error.
00:49:35.126 - 00:50:23.190, Speaker A: And I'm going to ask you all, can you guess why we're getting this error? Why do you think we're getting this error? Gas estimation failed. What's going on? What do you think is going on? Why am I getting that error? Why am I getting this? What do you think? Real simple fix. What do you think, though? Why are we getting that error? What am I doing wrong? Maybe not set a gas limit. Close. Good guess. Good guess. Not quite, though.
00:50:23.190 - 00:51:11.892, Speaker A: Have to include ethereum. Closer. Closer. Not quite, though. No, not quite. Good guesses, though. So how do Chainlink nodes stay incentivized to provide data? How do Chainlink nodes stay incentivized to provide data? What do we need here? What does our contract need? Give you a hint.
00:51:11.892 - 00:51:36.732, Speaker A: When we send Chainlink request, we also send something else. Or we also attempt to send something else. I'll give you all another 60 seconds to guess. Why are we getting this gas estimation failed? Hint is we send something. Approve is much closer. That is really close. Funds.
00:51:36.732 - 00:52:04.622, Speaker A: Yes. What kind of funds? What kind of funds are we missing? Yes. Correct. What kind of funds are we missing? The streamyard comments are coming in kind of slow. Sorry. So you might actually already have the answer. I just haven't heard it yet.
00:52:04.622 - 00:52:22.674, Speaker A: Or I haven't seen it pop up on my screen yet. Stinky linkies. You're very much correct. Yes. It's the link token. It's the jewels. Yes.
00:52:22.674 - 00:53:16.660, Speaker A: So what we need to do is we need to copy this address. We need to send it some link token. So what I'm going to do is I'm going to paste the address, we're going to grab some link, we're just going to send it one, which is overkill, and we're going to send it some link. So right at the top, we have this thing called fee, and we're setting the fee to 0.1. Every time we send a chain link request, we have to send some amount of link token with the request. So we need to fund our contract with link token in order to actually send a request. But what you'll see.
00:53:16.660 - 00:54:00.360, Speaker A: Oh no, did I lose? It? Is right now volume is zero. We're going to send a request to our chainlink node to make that API call and update the volume. And when the tailing node responds, this volume button variable will be updated. Okay, great, link has been sent. Now, if I hit request volume, data metamask will come up like normal. So that's something that I think is really good to know too. That gas estimation failed is like the most generic and probably frustrating errors of all time.
00:54:00.360 - 00:55:20.620, Speaker A: But usually when you get that, it means like some balance is too low to do something, whether it's eth or a token or something. Excuse me. But now we've sent it and we're good to go, so we'll go ahead and confirm now, and if we're fast enough, once this transaction, once this transaction goes through, which it looks like it just finished, right? Looks like it just finished on our operator. Give it a little refresh. Go to runs. Any second now, we will see a request come in, unless I messed it up. Ah, we have our job that came in, and it went through all that stuff.
00:55:20.620 - 00:55:45.060, Speaker A: So our chain link node found out. It said, oh, somebody sent a request in, and it did everything. So it said, okay, here's the callback address, which is the address of this contract we just created. Here's all the data it sent me. Okay, let's call that API. Let's call that API. Here's the massive response.
00:55:45.060 - 00:57:16.284, Speaker A: Let's just get that 47, 475,000, blah blah, whatever from the API response. Let's multiply it so that it doesn't have any decimal places. Now let's encode it into like, EVM understandable data. Now let's encode the transaction, and then we'll submit the transaction back and back on our contract. We can now see the volume has been updated, and we've successfully made an API call from our solidity code, which is very exciting. So with this, you now know, at least from the most minimalist example, how to have a chain link node get arbitrary data, connect your chain link node to a blockchain, run it locally, this is like one of these things that can really supercharge your smart, like I was saying, supercharge your smart contract development experience and allow you to do way more custom things and customizations with your smart contracts. If you want to get more advanced, you can check out the external adapters, which is a way basically for you to make your own HTTP endpoint for your chain link node, so you can provide kind of a custom endpoint custom data for your different applications.
00:57:16.284 - 00:57:58.050, Speaker A: So we have about two minutes left here. Thanks for jumping in and watching. Hope you all learned something in the next 90 ish seconds. Are there any other questions? Is there anything people didn't understand? Any other thoughts? Oh, there are a couple of questions here. Is Chainlink price feed contract open source? Yes, you can see all the chain link price feed stuff, both on chain and in the GitHub. Yes, it's all open source. Do we have to include payable in the node for it to be transactionable too? What do you mean? I think the answer to that is no, but I'm not totally sure what you mean.
00:57:58.050 - 00:58:40.908, Speaker A: Is it possible to run chain link node with hardhead? Yes, it should be. If it's not, you should make a pr and make that enabled. That might be like a training services. I think it should work though, I haven't tested it in a while. Can a node replace openzeppelin defender? I mean, they do different things. So openzeppelin defender is kind of like a closed sourced, or it might be open sourced, opens up a defender. They do different things.
00:58:40.908 - 00:59:16.664, Speaker A: Chain link nodes are for providing data and automation opens upload and defender, as far as I'm aware. It's kind of like. Actually, I'm not even going to say something stupid. Open up. I don't think opens uploading defender does data, so you ship. Okay, so you do automation. So it's centralized though, that's the difference.
00:59:16.664 - 00:59:44.816, Speaker A: So it's centralized. They have a relayer, automate tasks, auto task, so it's a centralized version, but still very different. I missed team formation. Am I able to continue hackathon or I miss it? Yeah, you can keep going. So just get a team. Yeah, it's fine. What are some use cases for needing to run a node? Great question.
00:59:44.816 - 01:00:25.790, Speaker A: Well, maybe you want some custom data, maybe you want your application to get the weather, you want it to get the temperature of the earth's core. You want to get a certain financial price that isn't in a price feed. There's a whole bunch of reasons to run a node or you want a price feed, right? I mean, like, price feeds are all exist because they're backed by Chainlink nodes, so. Good questions. Well, thank you all. Hopefully you all learned something. I got to jump off, but enjoy the rest of the hackathon, and we'll see you next time.
