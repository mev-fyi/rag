00:00:03.050 - 00:00:03.310, Speaker A: Hello.
00:00:03.380 - 00:00:47.866, Speaker B: Hello, everybody. Welcome to the session number five. Here we are with one more day from our chainlink bootcamp. If you guys don't know me, my name is Jeff, Jeff Beltral. I am one of the community managers, and I've been here in the background in the backstage supporting Solange along the journey that you guys are having with us. I hope that this boot camp has been an amazing opportunity. I hope that you all are taking advantages and learning a lot with us today.
00:00:47.866 - 00:01:38.620, Speaker B: As you guys know, we have the questions and answers session. The idea today is to provide a space to you guys to solve the debits, to explain anything that you guys miss it, and to make it happen. We're going to have some support along the session. I will invite in a few minutes one of our developer advocates, an amazing professional. But before that, I would like to remember you guys to share any questions that you may have on our pad. If you guys do not have the link yet, I will be sharing in the chat. Here it is.
00:01:38.620 - 00:02:39.200, Speaker B: And copy. Here it is, the link. So this is the space you guys should leave your questions. We're going to try to pick most of the questions that you guys put there, and we're going to try to solve as much as we can. Also, I would like to invite you all, if you are not here yet, to join our discord. This place is where we are 24 hours per day to solve any questions that you guys may have. The discord is the community space.
00:02:39.200 - 00:03:04.870, Speaker B: Not only me, but all the other community managers, some developer experts and advocates, they are all there to support you guys. So it's always important to participate and to make sure that you won't miss anything. Now that you guys already have access to the pad, I shared about the discord, I will bring to the stage. Richard.
00:03:06.570 - 00:03:34.190, Speaker A: Hey, thanks, Jeff. How's it going, everybody? Sorry I was a couple minutes late. I do see that there's a lot of questions, which is awesome. I will do my best to answer them. Just getting everything set up here. Typing is hard, evidently. But yeah, I've been talking to soul briefly and the numbers and everything for how many people have been in this course is fantastic and really awesome.
00:03:34.190 - 00:04:08.300, Speaker A: And I'm excited to get to piggyback along all the hard work that she's done, getting all y'all here and teaching everyone. So, yeah, I think probably the way that I'm going to do this is just kind of go through the questions in the pad. If you have questions in the chat too, let me know there. I think the pad probably is the best place though. That way I can kind of go through and I would ask as you're adding questions to the pad, if you can add them to the bottom of the pad. That way I can just kind of keep track of where I'm going through those questions. That'd be great as well.
00:04:08.300 - 00:05:05.998, Speaker A: But yeah, let me just get a couple of things set up real quick and we should be good to go. I'll share my screen. We'll do that too. Present and do the whole window. Is that readable at all? If you let me know in the chat. Looks like it probably is. Okay, going through these, I know D Marl had some questions.
00:05:05.998 - 00:05:25.760, Speaker A: I saw them in here earlier. Zoom in. Can do. Demarl had some questions in here. They were the first ones in here. I saw them earlier today. I was looking about verifying contracts when it comes to contract verification.
00:05:25.760 - 00:05:55.736, Speaker A: I know Sol walked you all through how to do it on Etherscan, but for some of these like register Sol and token sold, they're a little more complex. So let's take a look at those. There's one trick, there's two ways to do it. There's one trick though that is really helpful. If we take a look at Token Sol, let's go ahead and pop this into remix too. I will give you a little bit of behind the scenes. I got a new keyboard for Christmas and so if my typing is terrible, blame it on this keyboard.
00:05:55.736 - 00:06:29.210, Speaker A: That's crazy. Like here's half of it. So I'm just going to blame my terrible typing on a new keyboard and not my own abilities to pro tip. Which one did I copy? It was token soul. Let's go ahead and create a new one. We'll call it token soul and we'll paste our stuff in here and say, yes, I know I pasted code with this contract. When we look at this contract, compared to something like our register Sol, this one's easy to verify because, and I need to zoom in on this one too, probably.
00:06:29.210 - 00:07:11.950, Speaker A: This one's easy to verify because it doesn't import anything, right. You'll notice up here at the top, we just start off with our pragma solidity and then we go straight into the contract. When we look at something like token Sol, you'll notice we have these imports. And so when you go to verify it, etherscan is going to look at all the code that you've deployed, which includes these imports. And then it's going to look at the code that you're telling it you deployed, which doesn't include any of the code from those imports. And that's why it's kind of freaking out on you and saying, hey, what you're telling me you deployed and what you actually deployed are different because you aren't including everything when you give it the code that you've deployed. So the way to get around this, there's two ways.
00:07:11.950 - 00:07:46.460, Speaker A: First of all, you can right click on your contract and click flatten. And what that's going to do is going to take everything from those imports and actually throw it into one single file. So you'll notice if you look at the, right here, right. Our contract here is pretty small. I know it's probably small on your screen too, but it's pretty small. When you look at this token flattened contract, it's like holy, what on earth is even all of this? Right? Like that's a lot of code. I mean we're still going, we got like close to 1000 lines of code here.
00:07:46.460 - 00:08:39.412, Speaker A: So this is what you're actually deploying. When you deploy token Sol, you're only coding up this small little part, but all that imported stuff that needs to be included as well. So if we flatten it, then we can copy this, go to etherscan and actually verify it. So hopefully that'll get you there and make sense. I know we have a lot of questions, but I think that's probably the easiest way to do it. There is a plugin to verify a contract too, once it's deployed. I think you all are working on Sepolia, right? So if we were to deploy this contract, let me make sure I'm deploying the right one here.
00:08:39.412 - 00:09:20.990, Speaker A: Token Sol. Compile it, deploy it. I haven't used this plugin in a bit, so they've changed some things. Wait for this to be deployed or waiting. Let's see if we can answer a quick question. Ah, so does. So let's see, all of these basically will be answered in the same.
00:09:20.990 - 00:10:44.100, Speaker A: See what's the best way to do this? I'm just going to put a star in front if I've answered. So all these demarl should be answered by this one problem as far as like the best way to get assistance, the discord link that Jeff shared probably is the best way there as well. Quick questions here. Does chain link support cross chain from ERC 20 to BRC 20 and vice versa? So if CCIP is on a chain, then it would support sending that data across. So I think BRC 20, if I'm remembering quickly, is on BMB, right? And yes, it would support that I think so we should be good there. Let's check on our deploy. Okay, so our contract is deployed and where's the verify Ba Ba let's ether scan verify.
00:10:44.100 - 00:12:12.504, Speaker A: We have to go to the settings page. So the other way that you can do this is you can give it a API key for Etherscan. So if you go to Etherscan IO slash Myapi key, you can sign up for an etherscan account, get an API key from there. Then you can put your API key in here and then that will let you actually verify it through remix using that API key. If you want to read how to do that, if you go to the plugins and look for the contract verification, there's a link to the documentation that'll take you here and it'll basically walk you through all the steps of that as well. So there's the two ways to verify, like the two little tips for verifying there as well. What's your best advice to learn solidity? And do you foresee a good future for solidity, any competitors to look at? This question is very much like if we go over to go to web development, right? It's like, well, what do you think about react versus svelte versus view and even JavaScript versus other languages when it comes to web development? I think that solidity definitely has a very strong foothold in the space.
00:12:12.504 - 00:12:54.550, Speaker A: So I think that's a fantastic place to learn web3 as far as what the future holds, man, I'm here working in it. I think it's got a good future, but I by no means have a crystal ball. So that's my caveat with that. I think it's definitely good repeating exercise. Looks like we should have a video available for that, so we should be good. There any plans to incorporate non EVM chains into CCIP? So CCIP, like the chains that we are expanding to, is constantly expanding. So just keep your eye on the space.
00:12:54.550 - 00:14:02.156, Speaker A: What apps will have traction with CCIP and other cross chain defi machine learning projects? I don't know. That's a big question. That's probably outside the scope of this initial little learning session here. But what apps will have traction with CCIP? I know that from what we've seen with Hackamot Thon submissions and stuff like that, Defi definitely has a lot of traction with CCIP, as does things like games and NFTs as well. And yeah, I don't know. I think that when it comes to that, CCIP just opens up a lot for basically anything in the web3 space and then for machine learning project, we can pull data using graph protocol and ether scan. Is there a quick way to differentiate between a wallet and a contract address? For DeFi, that's a really good question about differentiating between a wallet and a contract address.
00:14:02.156 - 00:14:26.544, Speaker A: I don't know of a way to do that, but I don't know that it means that it's impossible. From my understanding, though, there's not an easy way to do it. So hopefully. I don't know. I'm going to say I don't know of a way, but I'm not sure. I'm not definitively saying there isn't a way. If you have questions, add them to the bottom of this list, because I'm just going to keep scrolling down.
00:14:26.544 - 00:15:00.652, Speaker A: Marking was taking too long, so I'm just going to keep scrolling down. But yeah, if you have questions on the pad, add them to the bottom of the list and we'll just keep going through it's q a time. And Jeff, if you have any thoughts on any of these things, feel free to chime in here. I'm by no means the end all, be all answers to everything, but I can pretend I am. I'm the definitive answer on everything that I know. That's the one thing I can definitively tell you, is I can tell you everything I know. What do you think about AI? There's still a reason to learn how to code.
00:15:00.652 - 00:15:26.196, Speaker A: Oh, man. So, okay, this is like an entire session in itself. Is there still a reason to do anything? Because AI is going to take over the world. AI encoding. So AI is very good at writing code. It's true. It doesn't always write the best code, and it doesn't always write the right code, though there's 100% still a need for humans in the loop, especially where we are at now.
00:15:26.196 - 00:16:13.604, Speaker A: And I think there will be for a while. The other thing to consider about AI encoding, and this is why I haven't lost all hope in my job at this point, is that AI is not very good@generating.net. New stuff so if you kind of think about like just taking a quick step back, thinking about AI, what it does is it's been trained on a bunch of information. So when we think about, it's really good at writing pros, right, and writing code, and that's because it's seen a lot of code. And the way it works is it predicts what comes next. And so if you are doing something that's been done tons of times before, yeah, it can do it right. Especially if you know what to tell it to do.
00:16:13.604 - 00:17:26.796, Speaker A: And I think that's the key. What keeps me from being worried about AI taking my job for a while at least, is it still needs somebody to say, hey, here are the things that you need to solve and it can do them then when you do that sometimes, but it can't figure out the problems on its own and it doesn't always figure them out in the best way. So yes, short answer, I think there's definitely a reason to continue to learn to code. Is the off chain infrastructure for CCIP decentralized? Yes. Can you talk a bit about what makes the risk management execution networks decentralized as compared to a bridge? I will defer to the docs and see here. We'll go to CCIP architecture and here it talks about the risk management and talks about the concepts. So probably this is the best place to start when it comes to this question, instead of taking up all the time about this.
00:17:26.796 - 00:18:07.610, Speaker A: So is off chain infrastructure this one? Yes. So take a look at the docs there. It'll explain all that and walk you through that as well. Remix newbie question I came back to review my code yesterday, but my project and the files are all gone. Oh no. How and where can I find the project files and restore them back? Okay, when you say all gone, what do you mean by all gone? Yeah, it looks like some people have tried to answer this. So remix is great because everything lives in your browser.
00:18:07.610 - 00:18:56.414, Speaker A: That can also mean that remix is terrible because everything lives in your browser. If you were to clear your cookies, for example, you're going to lose everything. One way around this is in the settings. You can add your GitHub credentials and then it can actually write to a gist and store it there and then you can load from that gist. It's a little bit of a pain, but it works. But yeah, remix is not, I wouldn't think of it as a great way to store files long term. If you mean that it's gone in the sense of like, so this contract, I just deployed, right? I deployed our token contract and it's here and I can see it and I can interact with it.
00:18:56.414 - 00:19:30.606, Speaker A: I can do all this stuff. I'm going to copy the contract address because that's going to be really important in a second. If I refresh this page, you'll notice that I don't have a deployed contract anymore. Right. It's lost that context, if you will. How do I get that back? If I go back to my injected provider here and I make sure that I open up token Sol. Here I go like I was going to deploy it, but instead I put the address of where it was deployed and I click add address.
00:19:30.606 - 00:20:08.596, Speaker A: Then we've got it back and I can interact with it again from this. Would it be best to use like a notepad or an alternate doc to save the details coding for future reference? Yes, I would save them somewhere else. I do know that remix has a way. What does backup do? I don't know what that just did. It did something so you could download your workspace. That'll save it as a zip file. I'm assuming you can then undip that.
00:20:08.596 - 00:20:30.480, Speaker A: Let's see what this is. So download it. Did it actually download? There we go. I've never done this before. Let's see what it does. That's a lot of junk. Open this up.
00:20:30.480 - 00:21:18.850, Speaker A: And yeah, it looks like all my contracts are here, so that's an easy way to back it up instead of having to copy and paste them. If you just wanted to go to workbook actions and download, it'll download and save everything. I know there's some sort of like plugin for this with either your file system or vs code. I feel like I saw something about that. Maybe not. Maybe I'm crazy. Yeah, I would definitely say to back them up for sure.
00:21:18.850 - 00:22:01.900, Speaker A: So struggling going through the chain link solidity documentation to understand what the code we use in remix is actually doing. Any recommendations on resources? So this is one thing. Back to that question about AI. AI is actually really good at explaining most basic code. If you have anything in particular that you're struggling with. I don't know, it depends on the docs that we're talking about. So if I were to look at just basic, where are we going? Whoops.
00:22:01.900 - 00:22:47.770, Speaker A: If we wanted to look at like CCIP, for example, let's kind of watch the set stuff up. Where's some code here? I do think that we try to do a good job of kind of commenting the examples. Whoops. Explaining what stuff does in the examples. But if you have specific questions too, I think in the discord is a fantastic place to ask those questions. And then just over time, as you become more familiar with solidity, things will start to make a little bit more sense too. It's a process, right? It takes some time, but yeah, if you have specific questions, feel free to ask them.
00:22:47.770 - 00:23:06.340, Speaker A: Does boot camp cover contract code security best practices? It hasn't so far, and I think we're towards the end, but I'm not sure. I don't know, Jeff, if you know the answer to that question, does bootcamp cover contract security best practices?
00:23:09.720 - 00:23:12.456, Speaker B: I don't have it now, but I will search for this.
00:23:12.558 - 00:23:38.370, Speaker A: Okay. Best tool for code quality, for solidity, and for load testing. So I'm going to plug Patrick Collins. He used to work at chain link Labs. He has a ton of content around security. Like, he left. He started his own company where he does security audits, but he's still doing a ton of content on YouTube and courses and stuff like that.
00:23:38.370 - 00:24:15.004, Speaker A: Let me pull them up real quick. So it's this guy right here. So he has a ton of content around this as far as security and stuff like that goes. So I'll definitely give him a shout out. He is awesome. As far as security stuff, code testing. He's got a lot of content on that as well.
00:24:15.004 - 00:24:52.890, Speaker A: And yeah, I think that would be a great place to start for that. I'm having trouble getting CCIP test tokens using the mint tokens and documentation. Doesn't want to connect to my metamask wallets. I attempt to mint the tokens and while the process works, it wants to change dispolia versus Fuji. Any suggestions? Okay, let's go through this. So you want testnet tokens. So you're saying when you connect your wallet here, it does what mine does and doesn't want to connect? That seems like something that we need to tell our docs team.
00:24:52.890 - 00:25:28.170, Speaker A: Wonder what's going up there. Let me take a note so I don't forget to do that. Use your. So if we go to the block explorer. So how do we do that? Go to sport networks page. So you're saying you need to mint on Fuji testnet, I think. Right.
00:25:28.170 - 00:26:08.130, Speaker A: And it wants to switch you back to. So if I go here, where's the BNM tokens? There we go. So Fuji to Sepolia. We want the BNM tokens. So if we go to this, I'm curious if you were on the sepolia to Fuji side and that's why it's trying to switch you. But if we take a look at the contract. Write contract.
00:26:08.130 - 00:26:37.040, Speaker A: We go to the mint functionality here. Oops. First I need to copy our address. Paste it in. Say we want ten. It's asking me to switch to Fuji. Do the things.
00:26:37.040 - 00:27:22.234, Speaker A: Write mint reverted sender, not mentor. What is this? Did I do something wrong? I did something wrong. Drip. That's the problem. It. And then we should be good. This gets there.
00:27:22.234 - 00:27:41.794, Speaker A: Sure. It's just pending. Yeah. Hadn't been mined yet. But that should get you there. So I think that you are probably on the sepolia one. So you should be dripping sepolia Bnm tokens if you need them on Fuji, you need to go to Fuji One.
00:27:41.794 - 00:28:27.870, Speaker A: Hopefully that answers your question there. But yes, it's a good little bug find there that our connect wallet button is not working anymore. Yesterday I could not deploy the CIP contract on Avax Fuji not worked because remix kept pushing me to Sepolia environment. It would not recognize the Fuji environment even though I was logged into this network with my metamask. How can I fix? Hmm. I have not seen this behavior before. So you were trying to deploy the CCIP contract? Let me go grab that contract and just try it out.
00:28:27.870 - 00:31:22.410, Speaker A: So it's this one's paste it in. I'm on avalanche now. I wonder if I've never seen that behavior before. Sorry. I would say maybe give it a refresh try again. I'm not sure it should be basing it off your metamask though. If it's still happening, I guess let me know in the chat here or on the discord ask question there.
00:31:22.410 - 00:33:21.870, Speaker A: Can you explain how CPC Ip is secured? Understanding consensus needed, but how do we trust bridges extend to more complicated bridges like ETH to Seoul? I'll go back to the documentation for this with CCIP, take a look at the architecture. We talked about this earlier, I think with the risk management network, but this will basically break down how it's secured and where everything lives. Let's go ahead and pop this into the chat. Can I create an ERC 20 token and deploy it on multiple chains and then use CCIP to transfer tokens across chains? It's the same as exercise we did yesterday, but we'll use a custom token if there's some guidance on implementing some standard functions like mint or burn. An option to provide some actions rights to CCIP can do that during implementation. So yes you can with CCIP when it comes to something like transferring tokens, while CCIP provides some extra benefits around the security and stuff like that, when it comes to transferring tokens that are supported, you can code your own because essentially at the end of the day, all you're doing is you're transferring data around, right? So you can set it up so that you can choose to burn or lock a token on your source chain, and then you can send it to a destination chain and either mint or unlock there so you can create that functionality yourself. You absolutely can.
00:33:21.870 - 00:34:02.828, Speaker A: When it comes to standard functions, I would take a look at the open zeppelin contracts and see what they have there. As far as what you should be concerned with when it comes to your ERC 20 token and implement the functions that you need. The open zeppelin contracts are ones, I think, that you use those in one of your token things. Yes. So like these open zeppelin contracts. So like this ERC 20 contract has a bunch of functions in it for like burning, minting, access controls, stuff like that. So look at the comments here too.
00:34:02.828 - 00:34:13.330, Speaker A: Your remix seems to be fine. It recognized custom environment from your metamask wallet. Thanks anyway, we'll send a screen grab. Okay Rena, hopefully we can get that sorted out.
00:34:16.500 - 00:34:33.380, Speaker B: Richard yeah, just to Lucas Archangelo, one of our developer experts. He shared a possible reply for the question that we skip it just in case you want to go back there. He suggested to use tenderly.
00:34:34.920 - 00:34:37.430, Speaker A: Yes, that's also a great way to.
00:34:38.040 - 00:34:38.916, Speaker B: There it is.
00:34:39.018 - 00:35:36.480, Speaker A: Debug. Yeah, so tenderly is great for debugging and kind of seeing where things go. When it comes to just understanding what a contract is doing, though, I don't know, tenderly is more of like an advanced tool, I would say, when it comes to that. But tinderly is definitely really cool as far as like if something is wrong with a contract that's deployed and trying to figure that out, that's definitely a good point. That's a good tool. How is testing managed for solidity and smart contracts? So there are a lot of different ways to get in testing, and that is way more advanced than where you all are at the moment. But I will say when it comes to using, remix is fantastic for when you're starting out, when you're doing something simple.
00:35:36.480 - 00:36:37.100, Speaker A: When you get past remix, you get into these development frameworks like hard Hat or foundry are two that I'm pretty familiar with, and they have tools in them that allow you to write tests just like you would with any other programming language and then execute those tests on your smart contracts. So that's where I would go with that, if you want to look into that. So either foundry or hard hat are the places to go. Keep on moving on. What other wallets are supported other than metamask or plan to support? I'm not sure where you're talking about them being supported when it comes to the chainlink pages and stuff like that. I think we support quite a few different wallets. Most of them support wallet connect, which supports a ridiculous number of wallets.
00:36:37.100 - 00:36:57.720, Speaker A: So I'm not sure. Sorry, where you're asking about that, does chain link support cross chain for ERC 20 and BRC 20 and vice versa. I answered this question earlier, I think, didn't I? I feel like I did. Yes, it's right here. It's the same one. Okay, cool. They changed something in the matrix.
00:36:57.720 - 00:37:39.384, Speaker A: Answered already. I'll skip that one then. Does Chainlink support the Cardano blockchain? And if no, are there plans to do so in the future? When it comes to things that chainlink lab supports and Chainlink is on, it's going to depend on which network we're talking about. So you kind of see here on our docs page. So if you go to docs chain link and you look at different products, you can see which chains are supported. So when it comes to the question of will whatever chain be supported by Chainlink, I will say new chains are being added all the time. So possibly that's the only answer I'll give.
00:37:39.384 - 00:38:11.360, Speaker A: That's a sanctioned answer. But yeah, you can find out which chains are supported by looking here at the supported chains. BNM and LNM tokens, are these sort of like stand in representational tokens for testing? Yes, they are. They are 100% tokens for testing. And that is their purpose. They're just basically two different ways that are common for tokens to be dealt with. Whether you want to burn and mint them or lock and mint them.
00:38:11.360 - 00:38:32.360, Speaker A: Can I explain slides 94, 95 and 96 one more time? I don't have the slides up. We'll see if we can get back to that one. Jeff, keep me honest on that. If we have time at the end to go look at the slides, maybe I can go through those 94, 95, and 96.
00:38:35.130 - 00:38:38.118, Speaker B: I write the note related if you.
00:38:38.124 - 00:38:55.920, Speaker A: Can send me the link to the slides. I verified a contract on Fuji yesterday. Checking the same contract address on Sepolia. Showed me the fundme contract from Patrick Collins. Course is the hash from the contract yesterday. That's the wall address. The same as the fundme contract wallet address in this case.
00:38:55.920 - 00:39:45.066, Speaker A: So contract addresses are going to be unique to each blockchain. And so that's a problem you're running into. So you did something on Fuji and now you're looking on Sepolia. Probably an easy way to think about this is a lot of cities have a main street, right? So at one, two, three, main street could be a drugstore, and in any town, USA, and at one, two, three main street in sometown, USA, it could be like a burger shop. So different blockchains, different towns in this example, same address in different town, different thing at that address. Hopefully that answers your question. Any way to recover a deleted workspace remix after a browser update? Already answered.
00:39:45.066 - 00:40:15.530, Speaker A: Yeah, sorry, you've lost it. ICP. Talek says the biggest competitor to Ethereum since faster, cheaper, better. I don't know what ICP is off the top of my head. Programming language. So I really want to learn the programming language, but I don't know if it'll be the right choice. I would say if you want to learn a programming language, go for it.
00:40:15.530 - 00:40:46.754, Speaker A: At the worst case, you've learned something. Internet computer I haven't heard of. I am showing my ignorance here. I've not heard of this. I mean, I thought of insane clown posse and I was like, that. Definitely pick Ethereum over that ICP. But yeah, if it's something that's interesting to you, go for it, right? I don't know.
00:40:46.754 - 00:41:39.754, Speaker A: I guess at the end of the day it could be a wrong choice in that nothing comes of it. But you've also learned and benefited from that. So I will say this space is very immature when it comes to web3 as far as like, it hasn't been around that long and a lot of it is just kind of that there's a lot of risk in spending time on it when it comes to long term benefits. Had a question about troubleshooting. Thus far we've copy and pasted most of the code we used. I've tried playing around with variables, but do you have any troubleshooting tips related but one of the things previously kept me from building web3 is being afraid of things going wrong. It's one thing in web two to get an error.
00:41:39.754 - 00:42:06.006, Speaker A: And hey, your code just doesn't run. But it's another thing, web3, that involves money. Yes. How do you test troubleshoot to the point of feeling comfortable to deploy? So yes, web3 involves money. Right? We have testnets, which are great because that means monopoly money. It's not real money, it's fake money that you can get for free, which is great. So testnets are great for that when it comes to things like testing and stuff like that.
00:42:06.006 - 00:42:50.674, Speaker A: And yes, like the Patrick Collins answer does fit well here as you get a little bit more advanced, like moving off remix into hard hat, for example, you can deploy all your stuff locally on your machine and test it there and interact with it there. And that gives you a lot more ability to feel comfortable that, hey, you haven't done something wrong. And when things break, you can figure them out a lot easier when it's all in your local machine and a lot faster. Like the feedback cycle is a lot less right. You don't have to sit there and like, oh, I'm going to make a little change and I'm going to play the thumb twiddle game of waiting for it to deploy and see if it worked or not. So local development environments like that with like hard hat or foundry can definitely be helpful. It is different than web two, though.
00:42:50.674 - 00:44:00.890, Speaker A: That is one of the big differences in that. Yes, things can cost money, but I think that's almost a, I sometimes think that's kind of like a myth. Like, oh, web3 costs money and web two doesn't. Because if you just Google AWS bill horror stories and look at those, they can cost you real money when you do something wrong in the web two world too. I think it's just a lot more at the forefront of everything with web3 because there aren't as many ways to just have completely free services because there is the payment rails are built into the product itself with web3 and yeah, this is why we use testnets and yeah, I get it, man, main nets are definitely scary. I understand that, but don't let that stop you. You can do an awful lot and you can wait a long time before you go the main net too by just working on testnets because they are like a direct copy of the main nets.
00:44:00.890 - 00:44:26.850, Speaker A: Can you recommend any resources for solidity? I'm in the process of working through 32 hours and 16 hours courses. They're wonderful, but I prefer what is the preferred ide from solidity developers? Are there vs. Code extensions that let me use vs code like remix? I worry I'm not pushing much of this to GitHub. Yes. Okay. Yeah, ethereum remix. Okay, so there is a vs code for remix extension.
00:44:26.850 - 00:45:06.716, Speaker A: I talked about that earlier and thank you for having that here. Whoever added that link. Yes, there are solidity plugins for vs code and I think that's the one that I use as well. Let's just take a look. Oh, I'm not sharing the screen, so this will be very boring as you just stare at your questions while I scroll through vs code real quick. Yeah, there's a solidity plugin from the hard hat foundation and I think it's this one. Yeah, I think it's this one.
00:45:06.716 - 00:45:29.090, Speaker A: It may not be this one, but there's multiple plugins for solidity and vs. Code. I think vs. Code is probably the most popular. I sometimes pretend that I'm hardcore and use vim, but I'm not really that hardcore, even though I used to use Vi back in the day all the time. What idd pro users use. Hey, it's like the same question.
00:45:29.090 - 00:45:48.036, Speaker A: Vs. Code is what I'd recommend. Like, it's just the most popular. If there's something else that you like, it doesn't mean it's bad. I think vs. Code is probably going to be the most popular. Want to ask again about verifying contracts? Is there a period, okay, period.
00:45:48.036 - 00:46:22.404, Speaker A: For the contract to be able to be verified? Cool. So no, you could verify it at any point. So once it's deployed, then you can verify it after it's deployed. I guess the only period it has to be deployed first. CCIP is wonderful technology. How difficult would it be if one wants to make a private ethereum compatible chain to be available for CCIP? I did not directly work on CCIp. I just get to reap the benefits of the hard work of the engineering team that did it.
00:46:22.404 - 00:47:22.530, Speaker A: But adding CCIP to a chain is something that takes quite a bit of effort and quite a bit of time. That's why if you go back to our documentation, you'll notice data feeds. It's been around the longest. That's part of its advantage here with chain supported versus CCIP functions. If it was super fast to deploy to all the chains, we'd have it on all the chains. Can you give a real world example of how somebody might use a smart contract? What we created on day one, day one, was it the register and register access, I'm assuming it was even any of these. So real world example of how you might use a smart contract.
00:47:22.530 - 00:48:43.180, Speaker A: So when it comes to something, I'll talk to the token shop, because I don't think the other one, like really, this register is basically okay. So even with this register, if you wanted to store information in a fashion that was decentralized and transparent and publicly available, this would be the way to do it, right? If you wanted to make sure that everybody knew that whatever, CCIP was the most amazing thing in the world, you could store that on the blockchain and it's accessible there until every single node in that blockchain disappears off the face of the planet, right? And that's pretty cool. When it comes to things like DeFi and stuff like that, you open up the ability for easier access to financial vehicles. One like real world use case that I've found, I don't know, really inspiring is parametric insurance, the ability to know that you can buy insurance based on things like rainfall. And you know for a fact that insurance will pay out if the rainfall doesn't happen. And I think that's really powerful. So hopefully that's like a little bit of an answer there for you.
00:48:43.180 - 00:48:51.040, Speaker A: Recommended IDE for local solidity development is vs. Code. Man, a lot of people ask this question. It's vs. Code. It's always vs. Code.
00:48:51.040 - 00:49:24.946, Speaker A: How useful is Viper to learn, taking into account your own insights from the web3 space and where things are going in regard to other programming auctions for smart contracts. I don't know Viper personally. I know it's popular. I know Patrick really likes Viper for mean. I feel like it's useful to learn if you like Viper. Solidity is just probably the most common, but that doesn't necessarily mean that it's better. It's kind of like.
00:49:24.946 - 00:50:15.518, Speaker A: And again, this is which programming language to pick specifically for stuff is tricky, right? I kind of view it like I have a fountain pen here and I have a pencil. Which one's the better tool for writing? It depends, right? It depends on what you're doing. It depends on a lot of things. And so if you like Viper, if it looks cool to you and you want to learn it, learn it. That's awesome. How can we use Chainlink for new network of roll ups? Provide value and also to potentially get airdrops? I'm not sure I fully understand this question. Chainlink is constantly adding products to new networks.
00:50:15.518 - 00:50:46.340, Speaker A: I'm not sure about the airdrops thing. I don't think that's really applicable. What is open Zeppelin? How is it related to solidity and Chainlink? So despite what the name makes you think, it's not the open source version of a popular band known as Led Zeppelin. Let's go take a look at open Zeppelin. Can I spell right? I don't think I can spell right. There we go. So what is open zeppelin? They provide a lot of stuff.
00:50:46.340 - 00:51:34.840, Speaker A: They provide like audits, this defender thing. But the thing that we in this course use them for the most is going to be their contracts. So they have created probably what are the most used contracts when it comes to common things like ERC 20s, different tokens, a whole bunch of different ownership things and stuff like that. I wish. Where's their actual library? Yeah. So here is their contracts library. And they have a ton of contracts, right? So they have contracts about access to things.
00:51:34.840 - 00:52:20.360, Speaker A: They have contracts about governance, different tokens, utilities. So these are basically like the industry standard when it comes to basic contracts, right? So if you have something where you're dealing with base 64, it's a type of encoding, for example, you'd use their contracts. So they're just kind of that standard when it comes to those type of contracts, if that makes sense. Applications in the future that are on phone and web based, will there be applications in the future that are phone and web based? Friendly? Ask for people like myself who are not able to access my laptop or PC when traveling. Yes. Phones like the mobile web. Three, experience is rough.
00:52:20.360 - 00:52:55.290, Speaker A: Currently it's getting better. It's better than it was when I started, what, two and a half ish years ago in this space, it was almost nonexistent. And so it's definitely a lot better now with like mobile wallets and stuff like that. But I think there's a lot of potential for improvement there. Let's see. Just checking the comments here in the YouTube as well. Okay.
00:52:55.290 - 00:53:43.830, Speaker A: What is a practical use of CCIP? You have tokens on one chain and you want them on the other chain. That's the most practical use I can think of. I like to think of it as some chains are different. Different blockchains have different benefits. Right? So there's like the trilemma in blockchains where you're going to have trade offs when it comes to different blockchains to like speed, security, their scalability, like the decentralization, stuff like that. So when we're talking about that, different blockchains have different advantages. And so CCIP enables you to kind of take advantage of those different blockchains and use them all together.
00:53:43.830 - 00:54:22.930, Speaker A: So I think that that is one of the big benefits of it, is that you don't have to have your entire ecosystem living in just this one little bubble of a chain. You can go between chains and take advantage of the different advantages of those chains. What are alchemy? Infura and Morales? They're different companies that provide different services in the web3 space. So let's just take a look real quick. Alchemy. What I know them for is their RCP endpoints. But as you can see, they do a whole heck of a lot of stuff.
00:54:22.930 - 00:55:03.048, Speaker A: They have a bunch of different APIs, different ways to help you with development. Account kit's something that they just came out with that I thought was kind of cool recently because it basically helps with the onboarding problem of creating a wallet and everything like that. It's pretty cool. Infura, let's take a look at them. Similar, right? They have different APIs. They also provide RPCs. RPCs are like an endpoint where how you access the blockchain.
00:55:03.048 - 00:55:58.690, Speaker A: So again, that's what I have mostly used, alchemy. And infura for and then what's the other one? Morales is again more APIs. So it's just different ways to access blockchain information, I guess is how I'd sum that up. If you're building an application, what project should new developers be working on? Building on to increase skills quickly, what are the best project things to build to add to a resume for smart contract dev it's a good question. What projects should you be building as a new developer? It's a tricky question, Mike, because there's a weird space. So this is one of those things like it's very introspective for me because what do I do? I make a lot of tutorials and I'm about to tell you, tutorials are bad. Tutorials are fantastic.
00:55:58.690 - 00:56:59.222, Speaker A: To get a lay of the land and learn the basics, you should really try to stop using tutorials as quickly as you can. The reason I say that is because tutorials often will hold your hand and take you on this safe path through the forest of learning. Whatever you're learning, you don't learn as well how to find that path and you don't learn as well. What happens when you get off that path? When somebody's holding your hand and leading you along the way? So what projects should you build? I don't feel like there's a right answer to that question of what projects you should build. Build stuff that's interesting to you and build stuff that you either one, see there being a need for or two, want to build, right? If you want to build, I don't know, to do list comes to mind because that's what everybody builds. Go ahead and build one. But it doesn't mean that you should build a to do list because that's what everybody builds, right? It's just a common programming project.
00:56:59.222 - 00:57:41.010, Speaker A: You're going to build a to do list, probably. Honestly not the best thing to build unless that's what you want to build. But don't strive to build something on your own as quickly as you can, even if it feels like you're pushing the edge of your understanding. I think that would be my advice to you. And as far as the resume goes, if you start doing that, put them on GitHub, then you're building your portfolio and showing that hackathons are another great way to do this. Right? They kind of force you into that world if you go into a hackathon, because one, you're going to have to build something novel and new, and two, you're going to be building on your own right. There's no hackathon handholder tutorial.
00:57:41.010 - 00:57:44.530, Speaker A: It's also a great way to build projects for a resume.
00:57:55.560 - 00:58:02.630, Speaker B: I would add to that, you are already in the right place to be building as well here. Chain link.
00:58:06.620 - 00:58:35.680, Speaker A: Yeah, no, that's a good point though. Yeah. I think it's just one of those things where the best way to build your resume, build your skill set is to build. How do you learn to build? You build. And the more you build, the more you build. This seems redundant and goofy, but it's kind of true. Why? After I broadcast boot camp in my register sol contract, does ethereum.
00:58:35.680 - 00:59:07.908, Speaker A: Wow. Sepolia Etherscan. That was weird. I combined those words show no verify and publish option under contract. And the UTF input for my data says something crazy when the info is in english words does wallet acceptance of deploy always verify and publish contract? Do I need to use a PC to encode? So this question is a good question and I spent a lot of time just talking. Let's do something. So let's go ahead and do this and take a look at this because I've seen some other questions about verifying.
00:59:07.908 - 00:59:24.210, Speaker A: So we'll go ahead and work through all this. So register Sol, what is that? Contract. Let's go find it. Register Sol. So this is just the basic store something on the blockchain. Cool. Make sure I copy this.
00:59:24.210 - 01:00:02.880, Speaker A: Pop over here, make a new file, call it Reg. Soul paste it in and. Good there. Brown's polio. Go ahead and make sure I. Whoops. Cool.
01:00:02.880 - 01:00:42.824, Speaker A: What's wrong here? That should be good to go. There we go. That was weird. Confirm and we'll wait for this. So view this on Etherscan. Come back to that in a second here. But we got this deployed.
01:00:42.824 - 01:01:02.464, Speaker A: What do we want to set the info to? Boot camp. I like it. We'll set this to boot camp. We'll check and see. Hey, we got it created. Our contract is created here. Good to go.
01:01:02.464 - 01:01:32.170, Speaker A: If we go to contract we want to verify and publish. So what compiler we have 821. Copy our code real quick. So it's a single file. The version is 821. Do we have a license in there? Mit. And continue and we will paste it in.
01:01:32.170 - 01:02:15.150, Speaker A: I'm wondering now is the order different. So you broadcast it first. Hold on, let me go do that and see what happens. So set info. Okay, so it's boot camp now. So if we go here, check it out. Back this up it.
01:02:15.150 - 01:03:14.980, Speaker A: Cool. So we've got this. I think this is what we're looking at here, right? Input data is gnarly. So I'm wondering, we can still see the input data here and we can decode it because it's going to look really weird because it's going to be encoded, and so your browser can't display that encoded data correctly. When we decode it, it should show you what it was. I haven't verified this contract yet. Right? Yeah, I haven't verified this contract yet.
01:03:14.980 - 01:03:57.040, Speaker A: So under the transactions, if we look at the actual transaction and we go to more details here and we decode this input data, we should be able to see what was passed in. I don't know where you're seeing that crazy garbly goop stuff, but it's probably because it's not decoded. But we should still be able to. Now go back, go to contract, and we can still verify and publish. Right? So select a single file. It's MIT 21. Continue.
01:03:57.040 - 01:04:40.950, Speaker A: Paste this in. We had no constructor arguments. I hope I'm not a robot. Maybe we can verify. Cool. We verified it. Oh, did I not verify it? Did I miss something? I think I verified it.
01:04:40.950 - 01:05:25.630, Speaker A: I guess I didn't. I must have missed a step. So I think somebody else asked about this error, too. I think this is because you're not logged in to etherscan so you can create an account for etherscan. And I think that's what's happening is because you're not logged in and there's a lot of you deploying the same thing and trying to verify them. And this is kind of like throttling that action on just being a guest, if you will. That's what's happening here.
01:05:25.630 - 01:06:12.440, Speaker A: But from this crazy goblin goop, that's because it's trying to decode, like bytes, data as text. Wrong, if that makes sense. How did you get the position you currently hold as Chainlink advocates? Do you suggest roadmap to increase one's chances in the blockchain space? Most use chain link features. Jeff, I don't know if you want to answer this question about how you got to be where you are right now. Maybe. Jeff, do you want to answer this question about how you got to be a chainlink advocates where you are now doing what you're doing?
01:06:12.890 - 01:06:57.540, Speaker B: Yes, I was trying to find out the link to share with you guys as well, but yes, the chain link advocate and also the developer expert program. Both of them are a volunteer program that if you identify yourself with Chainlink and you want to add value to our community, you want to represent Chainlink in your region, organizing sessions, bringing education to the local people. It's a pleasure for us to have you collaborating with us. If you would like to apply to one of these programs, I will be sharing the link in the chat right now.
01:06:59.770 - 01:07:01.110, Speaker A: Awesome. Thanks, Jeff.
01:07:01.930 - 01:07:25.130, Speaker B: Yes, it is a global program, so no matter where you are based, it's interesting for us to know you, to understand what your plans and to see how can we make our community even bigger. So please guys, if you are interested, just apply. Here is the link in the chat. It will be a pleasure for yeah.
01:07:25.200 - 01:08:11.900, Speaker A: So the community advocates are awesome. So I actually work for Chainlink Labs. The community advocates, like Jeff mentioned, are volunteers and they do amazing work as a developer advocate. As far as the path to becoming a developer advocate for a company in developer relations, I don't know. It's a weird job, to be honest, because you start out like as a technical person who spends all day head down coding, and then at some point you look around, you're like, hey, I like talking to people and not just coding all the time. And so you start doing some stuff in that direction and then you end up finding out about developer relations and developer advocates. And that's kind of how I ended up here.
01:08:11.900 - 01:08:38.162, Speaker A: I don't know, just my background. And my background is weird too. I've worked at traditional tech companies like Fidelity, doing what would be referred to as like DevOps work there, QA work for fidelity, some front end work. I have a master's degree in teaching. I taught fifth grade math and science for a year. I think that's part of what drew me to the space too, is I love teaching. And yeah, I don't know.
01:08:38.162 - 01:09:28.162, Speaker A: Before chainlink I worked at Facebook, now known as Meta there as a software engineer. So it's just been a weird, varying path along the way. I think if you are interested in getting into this space, a lot of it is about just like, as you're learning, share what you're learning. That's the biggest thing I'd say in my early career was not really good at this. But I think that things have changed and the whole learning in public idea is fantastic. And you will help so many people along the way as you go. If there's something that you don't know or don't understand and you take the time to understand it, I can guarantee you that you are not alone and there are other people who don't understand that same thing.
01:09:28.162 - 01:09:52.010, Speaker A: So you can benefit them by sharing what you're learning. And just because someone else has taught the same thing doesn't mean that there's not value in you teaching it as know because it's just like if you think back to school when you're in school, probably can you think of the one teacher that was like your favorite teacher going through school? I don't know about you, Jeff. Do you have a favorite teacher?
01:09:53.630 - 01:09:58.206, Speaker B: Not only one, I would say a few names, but yes, for sure I do.
01:09:58.388 - 01:10:00.990, Speaker A: But were there other teachers who taught the same subject?
01:10:02.930 - 01:10:04.702, Speaker B: No. Different subjects. Yes.
01:10:04.756 - 01:10:10.066, Speaker A: Okay. But what I'm saying is there's other teachers though, who teach that same subject, right?
01:10:10.168 - 01:10:10.914, Speaker B: Sure.
01:10:11.112 - 01:10:34.742, Speaker A: But you like the way that that teacher taught the subject. And so that's what I'm getting at, even if I don't know. Patrick, for example, has made amazing YouTube videos, but doesn't mean that if you wanted to make a YouTube video on the same topic that it wouldn't have value because different people's style is also important. So that's what I'm getting at. But yeah, moving on.
01:10:34.876 - 01:10:35.782, Speaker B: Just a question.
01:10:35.836 - 01:10:36.986, Speaker A: Oh, sorry, go ahead.
01:10:37.088 - 01:11:18.230, Speaker B: Yes, I would just remember that when you stand out, when you show up, when you teach, when you share knowledge, you're going to be not said. So you're going to increase your chances as well. To be recognized in the ecosystem, to probably start building your career and joining the opportunity that we are talking about, community advocates and developer experts. I want to say a huge thank you for Lucas Arcangelo. He is one of our devi experts and he's here in the chat every day helping you guys, solving questions, supporting us. So that's what it is about. It's being noted, it's bringing value to our community and of course being recognized as well.
01:11:18.380 - 01:11:31.174, Speaker A: Yeah, for sure. Y'all are awesome. I appreciate all the help you guys do too. Massive shout out to you. Yeah, you too, Lucas. Thank you. Looks like this question about Google form was answered.
01:11:31.174 - 01:12:16.858, Speaker A: I don't even know about the Google form, so I'm just going to trust the answer here. What protocol is CCIP using? I feel like this is a trick question because right there in the name, it's cross chain interoperability protocol. So I'm not sure what the question is here, but yeah, CCIP is something that Chainlink labs came up with and created. We've been learning. I feel like I've just kind of dismissed this question. But if you do have more questions, like in the documentation about CCIP in the architecture area, it kind of explains how CCIP works and setup. We've learned how to deploy a smart contract and how to interact with it.
01:12:16.858 - 01:12:54.786, Speaker A: Is it easy to learn how to launch your own token and let it trade, for example, uniswap. That would be cool. So I'm pretty sure that you did that already, technically. So the weird thing about tokens is like, you created an ERC 20 token. What you did here is creating a token. Now, it's kind of like I referred to on the testnets, like the ETH on Sepolia being monopoly money. It's kind of like if I went to my printer and I printed up Richard Bucks, and I was like, hey, I made Richard bucks.
01:12:54.786 - 01:13:26.206, Speaker A: Let's start using Richard Bucks. They've got no value unless other people agree they have value, right? If I say, oh, you are working, know the coffee shop? And I walk in and like, oh, coffee is five Richard bucks. Here you go. Are you going to give me my coffee? Well, no. So I'm being kind of like, joking about it. But the only reason those tokens have value on uniswap is because people have, I guess, intrinsically agreed they have value. So creating a token is very easy.
01:13:26.206 - 01:14:03.318, Speaker A: You've done that throughout this course. But why is that token of value? If it's a value, people can trade it and then it has value. So I guess that's kind of my answer to that. So you've learned how to launch a token. Like, you've learned how to create a token. If you want it to be something that's traded and has value, then you need to look at like, why does USDC have value? Well, USDC is kind of weird because it's backed by actual dollars, right? And so it has value there. Why does Link have value? Link is not necessarily an ERC 20 token, but it's a token.
01:14:03.318 - 01:14:27.620, Speaker A: It has value because it can do something, right? Like it can be used within chain Link's products to actually create something of value. You should be able to see the contract using snow trace on Fuji. Copy your wallet there. You should be able to find the kind. I agree with this comment. I don't think it's a question. I think it got lost from answering another question.
01:14:27.620 - 01:15:15.710, Speaker A: How to become a web3 developer starting from zero. What we need to know to get a job. Lucas says this roadmap. Yes, this is a pretty good roadmap for how to become a developer. You'll notice it's pretty long, but don't be intimidated by this because you don't necessarily have to finish everything in this before you can start looking and applying for jobs in this space. I think a lot of this depends on, too, where you're starting if you're literally starting from zero, like you've never programmed anything before, it's going to be a little bit longer road than if you're currently like a web two developer. But yeah, that roadmap is a great place to start.
01:15:15.710 - 01:15:57.312, Speaker A: Ah. How far off from a proper real world current ERC 20 token contract is the boot camp example? Yeah. So it's going to be a little bit off from it, right? That's a good question. We'll do it live here, USDC. So we just go to ether scan. We can actually take a look at the contract itself. So if you want to know more about, like, you can literally just look up the contract on Etherscan.
01:15:57.312 - 01:16:52.744, Speaker A: So this is USDC. When you look at this, one thing to remember is you're going to look and you're like, wow, that's huge compared to what we did, right? But remember we had 1000 lines of code when we actually flattened our token contract, right? So if I go back here and we look at our token contract, like while what you're seeing when you did the development work was only this little bit, what you were really doing is standing on the shoulders of these two contracts that you imported, which look like this when you flatten everything down. So I don't know, you can compare them. If you wanted to look at where to go, here it is, the actual differences, you can compare it, but you're not really then be that far off. And that's part of the advantage of using those open zeppelin imports. That's a great question. Like how far off are we? Go take a look at it.
01:16:52.744 - 01:17:35.430, Speaker A: I'll pop this link in the chat and you can go check it out because that's a real deployed ERC 20 token. That's also like one of the really cool things about blockchain I think, is the fact that USDT. What's the code behind it? Hey, I can go find out. Boom, here it is. That transparency is massive. Thanks for answering these questions unrelated to this course. When will stakers, in particular early access stakers, start receiving and learn more about build rewards? I'm just going to refer to our blog posts on staking and if you take a look there, that'd be the most up to date information.
01:17:35.430 - 01:18:47.660, Speaker A: Space moves quickly. What's the best way to stay up on best practices, current versioning solutions and to know the stability of those? This is a really good question and I'm going to have a hard time answering it because it is a space that moves ridiculously quickly. Personally, I rely on a weird amalgamation of coworkers, friends and Twitter to just kind of keep up with what's going on. I don't know that I have an answer for, like, this is the one best place to keep up with everything. I think if you follow a few people on YouTube and Twitter, that would probably give you that. Know, there's Chainlink YouTube, the Chainlink Twitter. Several developer advocates on Twitter as well, myself and like Patrick, there's another Devrel guy in the space.
01:18:47.660 - 01:19:08.784, Speaker A: His name is Nader Dabbit. He's on Twitter and YouTube. He's very active. And it's just kind of that crowdsourcing what's changing, what's new, especially when you're starting out. I agree. It's hard. I will say a lot of things change, but the fundamentals are going to be the same.
01:19:08.784 - 01:19:47.272, Speaker A: And so when I started, I wish my headset was a little bit longer, but I have a book over there on my bookshelf. And when I started out, it was two and a half years ago. Right. That book was already out of date. It was like a solidity Dapps book from O'Reilly, but it was close. And I guess this is the privilege of not being a beginner to programming. But I almost kind of liked the fact that it was out of date because certain parts of it, the examples just straight up wouldn't work anymore, and I had to go figure out what is going on.
01:19:47.272 - 01:20:36.364, Speaker A: Why isn't this working? And that helped me learn as well. I feel like that's a non answer to your question, but, yeah, it's just kind of a keep up with what's changing. Follow some people in the space who are actively talking about the space, and that's probably the best way to do that, to learn and to keep up with things. General question about interoperability. What are, in your opinion, alternative ways to achieve cross chain interoperability, and why is CCIP the best solution? I will just say I don't want to put too much of my own bias in here. Right. Obviously, I feel like CCIP is the best solution.
01:20:36.364 - 01:21:13.672, Speaker A: The easy answer is because it's chainlink. I think that the security behind CCIP is something that differentiates it from a lot of other options. Some of the things that make CCIP kind of appear bad at first glance, I think are actually advantages. And what I mean by that is CCIP on some chains is wicked slow. It can take some time. But why does it take that time? Right. It's because it waits for finality on that chain so you don't have a transaction getting reverted, which is a massive.
01:21:13.672 - 01:21:26.976, Speaker A: That could cause massive problems. Right. Like, it'd be great for the end user. I'm moving my tokens from chain A to chain B and I get them on chain B and the transaction was reverted on chain A. And so now I have double tokens. That's awesome for me as the end user. Right.
01:21:26.976 - 01:21:57.960, Speaker A: But that's terrible overall. And so waiting for that finality is really important. It does make it take longer sometimes, though. It's a trade off. Right, the speed versus security. But I think that with how things are secured with CCIP, that's something, I think, that differentiates it from other solutions. Also, just the ability to send data between chains is something that is not terribly common.
01:21:57.960 - 01:22:27.510, Speaker A: I know there's a lot of chains that will let you transfer certain assets, like bridge them. Sorry, there's a lot of bridges that will let you transfer assets between chains. But bridges also are like the weak point when it comes to the blockchain space. Like, most of the major hacks that have happened have been bridges. So, yeah, I think security is massively important. I think that's one of those differentiators. Solana versus chainpoint, who wins? I'm not even going to comment on that one.
01:22:27.510 - 01:22:59.810, Speaker A: So, Daniel S. Most of the times I get this message, interacting with your faucets. This request doesn't look human to us. What could be Daniel S. Are you a robot? I don't know. I would say, are you using a VPN or something like that? We've recently implemented a few things to prevent bots from draining our faucets. So, fun fact, we'll go into story time real quick.
01:22:59.810 - 01:23:15.910, Speaker A: Daniel S is a robot. He confirmed it in the chat. That's what it is. See, it's working as. Right. Well, I mean, I think that you're probably a real robot, not an artificial robot. There's a difference.
01:23:15.910 - 01:23:53.010, Speaker A: You're like an organic robot. But anyway, so we talked about testnets being monopoly money because it's not real money. Right? Weird thing happened. So currently we're on a testnet called sepolia. Before Sepolia, there was a testnet called go early and go early. Didn't have a lot of actual ETH available, and so people started selling it for money. That caused there to be a market.
01:23:53.010 - 01:24:33.608, Speaker A: So when that happened, people then were incentivized to create bots to drain faucets. And our public faucet was turned off for a while because anytime we'd put funds up, they get drained. We had captures in front of it. We had Twitter verification in front of it, and people would pay for capture solutions and Twitter accounts so they could verify and drain the faucet. It's crazy because it's not real money. But I guess if someone's willing to pay for it, it is real money, right? If you start telling me that my monopoly bucks are collectible and I can sell them, then suddenly they're worst real money, I guess. And so it's weird.
01:24:33.608 - 01:25:04.520, Speaker A: So I don't know, it's one of those things. The more you think about this space, you start to think about economic principles and why things have value if they're not actually useful. Like the things we use to store value, right? Like paper currency, even tokens. Why do they have value? It's because we say they have value. Bitcoin, when it comes to the faucet. I don't know. I don't know what else it could be that's causing that problem.
01:25:04.520 - 01:25:58.200, Speaker A: Man, I need to work on my abs. Evidently, is this cloudflare that's saying that you're not human, I'm assuming. Daniel, have you logged in with GitHub as well? And that's saying you're not human? I don't know. Let me know in the chat where you're seeing that problem. We'll come back to you. Whenever I try to deploy contracts that were written by Sol, I keep getting gas error and errors. What could be happening? It's a gas estimation error, right? It's the best error in solidity because that's the generic, hey, something's wrong error and it means nothing.
01:25:58.200 - 01:26:49.626, Speaker A: So when I try to deploy contracts that were written by Sol, I keep getting the gas error. What could be happening? So what you're saying is like if you go and you just copy and paste a contract and you try to deploy it like this token one, that you're getting that error without changing anything. I'm curious if it could be. If you are, whoops, that's the wrong GitHub one. If you're doing maybe the CCIP One, make sure that you're on the right network, because it could be saying that, hey, you're going to try to set this up and you're using the wrong values for the things like the router address and stuff like that. Sometimes it'll catch those and say that you're having that gas estimation error. So make sure that you are deploying it.
01:26:49.626 - 01:27:34.650, Speaker A: So this one, I think you need to deploy it from Fuji. So make sure you're deploying this from Fuji. Yeah, Daniel, if you are behind a VPN, that's probably what's catching you from the Cloudflare side. Is it Cloudflare or the GitHub piece that's saying you're not? Ah yes, that's another good point. Sorry, yes, well, when you're deploying the contract, you wouldn't get that. But if you are trying to use the contract and you haven't sent it the Avax or the link token as well, you can get that error too. It's a great call out there.
01:27:34.650 - 01:28:33.590, Speaker A: We kind of talked about CCIP differentiators earlier. My closed VPN. The problem persists. I wonder. I'm sorry, Daniel, I don't know a ton about the cloudflare thing that we're using on here. If you use a different browser, does it have the same issue? Guys, tell me please can I use Chainlink Oracle to verify transaction status in different blockchains? For example, main contract on solidity will call Oracle contract that will check transaction status in some blockchain. So you want to check the status of a transaction on a different blockchain.
01:28:33.590 - 01:29:36.470, Speaker A: Just top of mind, I think that you could use something like the graph with chainlink functions to do this. So the graph is a way to see the state of things on a blockchain to kind of aggregate the information up and functions will let you query those APIs and get that information. So that's how I kind of think about that. But that's pretty advanced for what y'all have been doing so far. Daniel, if my twitter handle is right there underneath my name, if you just want to send me a DM on Twitter, if you're on like, I'll get back to you on this faucet issue because if that's a problem for you, it's going to be a possum for other people as well. Who is using CCIP for bridges? A lot of people are using CCIP for all sorts of things. As far as like active projects, there's quite a few different ones.
01:29:36.470 - 01:30:09.680, Speaker A: I don't know. That's a big question. In the hackathon, it was pretty popular as well to do things between chains when it comes to moving tokens for Defi and stuff like that, for chaining private feeds. Are there companies utilizing it to identify arbitrage opportunities? I don't know of any off the top of my head, but that doesn't necessarily mean there aren't. I would assume there probably are. I don't even know what this means. How does C.
01:30:09.680 - 01:31:17.680, Speaker A: Anyway, we're going to skip over that same contract can have two different addresses in two different chains. Yes, it can. But in yesterday's exercise, we provided only one address for the mint and burn token. So I'm assuming that's this contract. Let's take a look real quick. So what we're doing here is we are, so we have our token, right? So we only have one BNM token address. So then when we transfer it, we're saying, hey, we want to transfer this token, this amount.
01:31:17.680 - 01:32:06.506, Speaker A: We build our message where we say our receiver is our receiver address. We've got our token amount. That's what we created up here. So send that along and then we approve it and we admit our token transferred. And then this BNM token, we're checking the balance as well on this chain. So yes, the BNM token, is it the same on Zapolia and Fuji? You can do some tricky things with your nonce, which is like the. So addresses are something that you can predict.
01:32:06.506 - 01:32:58.630, Speaker A: They're not random. They seem random, but they're not random. They're created by like a combination of your wallet address and the nonce, which is like the transaction counter for how many transactions your wallet has done. Not sure if the BNM tokens are the same address, though. So that's why you're only going to have one. So these tokens are, the addresses for the tokens are specific to the lane that you're doing. So you were sending Fuji to Sepolia.
01:32:58.630 - 01:33:32.850, Speaker A: And so there's only one. So it's 90 e four. And then you'll see here it is a different address, but these are going to be like lane specific tokens. And so this token is going to be, this is the one that you were using here. It's going to be on Fuji, and then when it gets to Sepolia, it's going to mint that token on Sepolia. Great question in the chat. Why is it called burn and mint? So what that means is, so we have burn and mint and lock and mint.
01:33:32.850 - 01:33:59.146, Speaker A: Burn and mints. You are actually going to be destroying the tokens on the source chain and then minting or creating them on the destination chain. So burning them and minting them. That's what the terminology for it. So you're getting rid of them and you're creating new ones. Lock and mint, on the other hand, is going to be locking them up. So you're going to hold on to them, but they're no longer belonging to you.
01:33:59.146 - 01:34:32.694, Speaker A: So basically the contract that's calling CCIP, like CCIP holds on to them, and then on the destination chain, they get minted. There's one other way that's not here. That's lock and unlock. So if you had a bunch of tokens that were held by the contract on the destination chain that were locked, and you are on the source chain, you send some to your contract, you lock those tokens up, and then on the destination chain, you unlock them. So then you send them to whoever the receiver is. So that makes sense. Yeah.
01:34:32.694 - 01:34:48.570, Speaker A: Burning is sending them to the zero address. Yes. And so that means that they just are nowhere. Nobody can access them. So the zero address is like, if something is owned by the zero, just. It's gone. Effectively.
01:34:48.570 - 01:35:23.934, Speaker A: It's a great question, though. Yeah. So why do you only have one? It's because on the source chain, we're sending it through CCIP, and CCIP is aware of that token. And so then on the destination chain, it mints that new token for you. Can we transfer the boot camp poop that we received to a different address? If so, how? I don't know about this poop or poap. You probably can. Yeah.
01:35:23.934 - 01:35:46.280, Speaker A: Somebody is saying that they tried to transfer it to a different chain. The gas fees were a lot, and then. Yeah. So you should be able to transfer it. I don't know what chain it's on. You should be able to transfer it because I don't think it's, like, soul bound or untransferable. Yeah, it should be done.
01:35:46.280 - 01:36:44.020, Speaker A: You treat like anything, you'd go to that poap and then you do the send if you want to transfer it. That's true. I think if you want to transfer it, you have to actually mint it, too. Right? I haven't messed with poaps in a while, but I think you have to mint it to your actual wallet, and then you can transfer it in terms of speed, latency in exchanging or delivering data using chainlink, CCIP. How does CCIP deal with challenges faced by interoperability, such as reliability of data latency and data, et cetera? I'm a researcher now. I'm looking to highlight what Chainlink can do. So speed and latency, when it comes to CCIP is going to be a lot based on the chains that you're dealing with.
01:36:44.020 - 01:37:14.790, Speaker A: This is why I think my video froze. Oh, it's just lagging. Okay. This is why, like, in our example here, we used Fuji to Fuji. What's the word I'm looking for here? Finality algorithm, like its finality mechanism, is much faster than Sepolia's. So if we reversed, like, it takes like, I think it's like five minutes or something like that, right. To go from Fuji to Sepolia.
01:37:14.790 - 01:38:06.844, Speaker A: If we were going from Sepolia to Fuji, Sepolia's finality method is a lot slower and it would take a lot more time. So in terms of speed and latency, it's going to be very dependent on the chain. What's going on on the chain as well. So that's something that's a hard question to really answer. How to use chainlink for unity game engine for VR? I saw a use case on Chainlink site, but I'm not quite sure which path did they take? I'm searched online for safe chain, third web3, unity SDK. So I have to reconfirm these are really okay for chain link, especially chain link VRF. Two, I believe I am familiar with the unity SDK plugin for Chainlink.
01:38:06.844 - 01:38:44.370, Speaker A: I've heard of that. The other two, like, third web is definitely a rival source and I believe safe chain is as well. I'm not as familiar with them, though. I don't think it's pharmaceutical wholesale. What kind of VR games are we making here? Oh, chainsafe gaming, not safechain. Yes, I'm familiar with this. Did you say chainsafe? Safe chain? Maybe this is chainsafe.
01:38:44.370 - 01:39:18.240, Speaker A: If it is, yes, I think all those are safe to use. Cool. What is the benefit of verifying a contract? Well, it helps with the transparency of everything on the blockchain. Like when we're looking at the USDC example, right. You can just go in and take a look at it. It makes it so that it is easy for everyone to see what is going on in that contract. It helps with that transparency piece.
01:39:18.240 - 01:40:20.192, Speaker A: You can reverse engineer those contracts. And Etherscan can do this too, where it'll show you what the code is, but it's not as nice and human readable, if that makes sense. So a lot of it is just about one, you're ensuring that people can see your contract. Two, when it comes to tools in the ecosystem, it gets easier to use different tools with your contract to interact with that contract because then it's a lot nicer code. And yeah, as someone put in the chat here, like, you can also interact directly from whatever scan you're on, like ether scan. If it's verified, can you demo how to verify a contract with a constructor argument? Put me on the spot here, see if we can do it. Is there one of these contracts that required a constructor argument? Let's just I'm just going to go to register and I'll just change.
01:40:20.192 - 01:40:49.350, Speaker A: Register a little bit to have a constructor argument. What? I thought it was here. Is it not here? Okay, let me go grab it real quick. Register. Token shop has one. Okay, I'll just use token shop then. Token shop.
01:40:49.350 - 01:41:54.726, Speaker A: What do we need to give it an address? Okay, can somebody pop in the pad the address of a token just so I can have that too? Real quick? I guess I deployed one momentarily, but tokenshop Sol. Okay, I'll deploy a token then. Token. Token will deploy you to Polia. Seems good. And then also do token shop. Cool.
01:41:54.726 - 01:43:01.374, Speaker A: So tokens deployed here, we'll copy our address. Token shop. And it wants in an address. So we will deploy this confirm. And then to verify this we're going to have to say, I want to flatten this. I'll go to etherscan, wait for this to be done. Way back we talked about digging into stuff.
01:43:01.374 - 01:43:41.886, Speaker A: Tinderly is probably the best answer to this next question. So tinderly for is it possible to understand how a method on a contract was called, its contract is not verified. Tinderly is probably going to be the best way to look into that kind of stuff. But you can still see all the transactions and everything like that on whatever scan, like either scan if that makes sense. But tinderly will give you a lot of debugging information. We should be done. Yes.
01:43:41.886 - 01:44:16.900, Speaker A: So we created our contract here. This is token shop and we want to verify and publish this one. So it's a single file and we're at 21 mIt. We flattened it out so we can verify it. 21 miT. Continue. So here's the code that was flattened out.
01:44:16.900 - 01:45:17.560, Speaker A: Constructor arguments Abi encoded. I used to know how to do this off the top of my head all the time. Super easy. So this is one we deployed, maybe. Is it? There's. So this is the data that was passed into it. You know what, instead of pretending like I know what I'm doing, I'm just going to go to the documentation.
01:45:17.560 - 01:46:14.754, Speaker A: This is using their API. I don't want to use your API though. Where do I get that? Ah, it's right here. I think. I think this is it. The input. I think so.
01:46:14.754 - 01:46:42.024, Speaker A: Lucas. I saw it was in there, but I didn't know if I should trust it or not. I'm curious if this is the same. No, it's not the same. Okay, we'll see if it just knows because it just. Yeah, it's from the same transaction. Might be catching.
01:46:42.024 - 01:47:27.430, Speaker A: I might be a robot too. Oh, see, robotness confirmed. Okay, cool. Yeah, so. Yes, it knows the inputs already there on ether scan. Thanks, Lucas, for pointing that out to go to compiler. Where do we get this compiler? I don't think it's in compiler.
01:47:27.430 - 01:47:59.534, Speaker A: Yeah, I think there's another way to get to it. I'm not remembering what it is off the top of my head. Sorry. If you use the API key though, it's really easy and it walked you through that. So we did that, talked about that. Where can we find resources about building the front end side of our dapps? Let's say, to interact with our contract? Because I think this section is the one very low resources about. We can build the front end of dapps.
01:47:59.534 - 01:48:40.180, Speaker A: Yes, that's something that a lot of workshops like this one kind of don't talk about. And yeah, it's a problem when it comes to building out the front end of dapps. I don't know what the best resource is to point you to. I do know that a lot of on YouTube, if you just search for whatever you want to build normally there will be people who have created a front end for it as well. There's a bunch of different packages out there, like wallet connect, that get you the basics of connecting to the blockchain. Yeah, Scaffold ETH is a fantastic place to start with that. It is like a powerhouse and it's done a lot for you.
01:48:40.180 - 01:49:06.650, Speaker A: As far as connecting a front end to the blockchain. I've produced a couple different videos on the chainlink. Sorry, there's something ringing. Okay, it's good. I produced a bunch of different, several different videos on Chainlink's YouTube. If you search through there, most of them around hackathons where I go through and connect front end up. I think those use svelte instead of like react just because I like svelte better than react personally.
01:49:06.650 - 01:49:49.218, Speaker A: But the concepts will be the same. Normally what you need is some sort of RCP endpoint, whether that's using a person's wallet or just providing that directly. And then from there you can basically see into the blockchain and also do transactions with the blockchain. Hopefully that's answering your question. Share the link to the roadmap again. Yes, we did. Do companies, more often than not separate solidity developers from front end app developers when hiring or full stack what most companies are looking for? What do you think would make junior solidity dev stand out in getting their first job? I think I'm getting comfortable with foundry, with all its testing capabilities.
01:49:49.218 - 01:50:25.454, Speaker A: So I don't know. It depends type question. When it comes to separating solidity from front end, it's going to be very dependent on the company. I think when it comes to hireability, the more skills you bring to the table, the more hierable you'll be is how I kind of answer that question. Like, does that mean that if you're only a solidity dev, you can't find work? Absolutely not. It does not mean that. But if you can do front end and solidity, you're a little more versatile.
01:50:25.454 - 01:50:59.200, Speaker A: It's probably more marketable. As far as finding a job, we think junior solidity devs stand out for their first job. When it comes to standing out, I really do think that. I don't know. More and more, I think it's two things. Building some projects on the side can be very helpful. So having some things that you've built that you can say, hey, I built this, you can talk through how you built it, what you struggled with, the fact that you're talking about using foundry and you feel comfortable with it, you're well on your way there.
01:50:59.200 - 01:51:39.194, Speaker A: Spend some time documenting that learning that kind of gives you that credibility. Also, I'd say while it's not a directly skill based answer, networking is very powerful. So the more that you can talk in the space, whether it's on Twitter, on discords, stuff like that, the better it will be for your chances of getting a job, I think. Because hiring somebody, especially when they're more junior from a company standpoint, is going to be a cost. Right? Like you're an unknown, and so that's a cost. The more that you can make a company feel comfortable with you being less of an unknown. Right.
01:51:39.194 - 01:52:18.146, Speaker A: If you can show, hey, I'm active on these discords, kind of shows what your skills are and where you're at. I think that that can help them feel more comfortable that you're less of an unknown, so they're more likely to hire you. Hopefully that kind of answers your question. Please comment on if and or what Chainlink has done or is doing to avoid issues like price oracle attacks. From this standpoint, when it comes to the oracle attacks and stuff like that, I will say so the way that oracle network is set up is distributed. We call it Don. Right, the distributed oracle network.
01:52:18.146 - 01:52:59.426, Speaker A: There are a bunch of individuals running the different oracles. There are multiple oracles. So that in itself helps there be less of a chance of an oracle attack. I would say just kind of looking at that setup. I think Sol probably talked through kind of how the oracle network is set up. So given that and given the fact that they are controlled by different entities set up in a way that no one oracle can really influence things, even you'd have to have more than half the oracles be bad actors for there to be any sort of problem at all. So hopefully that answers that question.
01:52:59.426 - 01:53:40.850, Speaker A: Before we end the session, can we go through step by step on how to properly set up git so we can have our own GitHub repo man, I have not set up GitHub in I can't tell you how long because that's just not something I do because I just have my GitHub. So I don't know if we went to GitHub.com, what does it look like if we want to sign up, literally? Oh look, it's talking to us. Hey, we're going to begin an adventure together. Oh, I'm sharing the wrong window, y'all, this is really embarrassing when you share the wrong window. 1 second, let me stop sharing and present my other window. There we go.
01:53:40.850 - 01:54:27.180, Speaker A: So we can go on a GitHub adventure. We need an email address. Let's see here. I'm going to actually need a real email address. I would just go here and sign up, right? I'm not going to do this live, but if we go here, sign up that will get you a GitHub account. I think probably the harder part is going to be actually, what do you do once you have your account? Because I'm going to trust GitHub and I'm going to say that they are going to be pretty good at walking you through that. But once you've signed up on GitHub, right, then what do you do? You'll need to just create a new repository.
01:54:27.180 - 01:55:22.880, Speaker A: I really like the trying to think if I can go to my GitHub, there shouldn't be anything super crazy on my GitHub. So when you go to your GitHub, I'm not even signed in, man. I'm like not a pro, streamer, all these things docs myself. Oh, it's not even on here. Just a second, y'all. Actually, ugh. My phone is downstairs because I didn't want to be distracted and my password is on my phone.
01:55:22.880 - 01:55:59.766, Speaker A: So when you go to GitHub I'd recommend downloading a GitHub desktop if that's something that you're okay with doing. And from there you can, you'll see something like this. Let me change my screen share again. So from there you'll see something kind of like this, you can go to a new repository, you can just say whatever you want for the name set up. It'll let you know where it's going to be. You'll create that repository. So here when you make changes, they'll be in here.
01:55:59.766 - 01:56:28.740, Speaker A: This is not going to be like any sort of git class, but GitHub desktop is nice in that it's pretty user friendly. Once you make all your changes, you'll click publish repository and you can name it whatever you want and then actually publish it. And so now this is up on GitHub.com and so I can make changes and I have to push them back up. It's great. Hopefully this kind of answers your question on how to get started with.
01:56:33.110 - 01:56:54.390, Speaker B: Okay. Okay. I think that it was amazing. Thank you, Richard. Like we took almost 2 hours just replying questions. I would like to bring here today as well to close this session with us. Javier.
01:56:54.390 - 01:56:59.260, Speaker B: Javier. Hey, would you like introduce yourself?
01:56:59.710 - 01:57:21.890, Speaker C: Absolutely, yes. Thank you, Jeff. Thank you, Richard. It was amazing this session with you. Well, hello everyone. In case you don't know me, I'm Javier, the community manager for LATAM and for the spanish speaking community. Working a lot of this bootcamp in the background.
01:57:21.890 - 01:57:54.414, Speaker C: Yeah. Day five, the mentoring session with the chainlink community has come to an end. Thank you Richard for joining us today and providing so many answers for our community. Please, let's all show our appreciation to him in the chat. Just say thank you. Yeah. You all have done a fantastic job on these five days.
01:57:54.414 - 01:58:21.142, Speaker C: Congratulations. Just five more days to go. Take this weekend to rest and recharge for our exciting final week. Don't forget to share your experience in the bootcamp on social media. I'm part of the Chainlink boot camp 2024. Yeah. Be ready for the second half of our boot camp.
01:58:21.142 - 01:58:30.790, Speaker C: Thank you all for being part of this and making it a big success. Have a great weekend and see you all on Monday.
01:58:31.290 - 01:58:33.754, Speaker A: Yes, thanks all. Appreciate it.
01:58:33.792 - 01:58:52.640, Speaker B: That's it. Thank you everybody. Just do not forget that we also still have the portuguese and spanish session that goes live later today. 630. It's the GMT last three. Right. Is the local time.
01:58:52.640 - 01:59:14.870, Speaker B: We still do have two sessions today, spanish and portuguese. So be aware of that. I think that has someone here in the backstage. I don't know if. No, that's all here. Hello, Saul. We couldn't.
01:59:19.050 - 01:59:19.974, Speaker A: It's all good.
01:59:20.092 - 01:59:22.822, Speaker B: Your opportunity. The opportunity to have you here.
01:59:22.956 - 01:59:23.494, Speaker A: Anyway.
01:59:23.612 - 01:59:26.300, Speaker B: Thank you guys. See you all next week.
01:59:26.830 - 01:59:40.618, Speaker A: Yeah. Thank you everybody. I want to say thanks everybody. For being so active in the chat and asking questions, because that made this go a lot better. It's been 2 hours. Whenever javi said that, I was like, what? It hasn't been 2 hours. There's no way.
01:59:40.618 - 01:59:49.730, Speaker A: So thank you all. Hopefully I wasn't too droney in my question answering for y'all. And, yeah, good luck as you start this adventure.
01:59:50.470 - 01:59:52.800, Speaker C: Thank you, Richard. Thank you all. See you.
