00:00:09.610 - 00:00:41.526, Speaker A: Thank you very much for coming, guys. So I planned today as a two hour lecture on off geo protocol, the L2. Historically speaking, I did my PhD in bitcoin and Ethereum and I've been following this for four years. So who's heard of payment channels? Before I get a rough understanding what you guys know, who's heard of payment channels? Who's heard of Lake Plasma? Who's heard of a roll up? Okay. Who thinks I knew it's going to get delivered? Okay, cool. Awesome. So basically what I'm going to do today is give a complete overview of all of them.
00:00:41.526 - 00:01:09.338, Speaker A: It is a bit of a technical talk, so I typically start off at a high level. I want to dive a little bit deeper into it. So you get a good grounding of how this works and it's all protocol based. I'm not going to talk about XDI implementation. So what I want to ask first is who's ever deposited coins into an exchange? Raise your hand. Who's done trading? Most people have done trading. What's really exciting there is, actually, you've used an off chain protocol.
00:01:09.338 - 00:01:40.118, Speaker A: All off chain is, is that the transactions happen locally amongst the parties and not on the global network. Now, what's the problem with using these exchanges or online services without food, custody of your coins? They always just keep getting hacked. And this is a big deal. According to good, in 2016, 33% of bitcoin exchanges have been hacked, give or take that number. But when they do get hacked, it can be a big deal. Mike docs lost 850,000 bitcoin. Bitch.
00:01:40.118 - 00:02:22.210, Speaker A: Phoenix lost open. Phoenix is there? Yeah, 120,000 bitcoin. So that's a pretty big deal. So what's the whole point of these off tier protocols? Why do I mention this? Everyone? We've talked about the scalability solution, but really the goal is, is there a way to keep the transactions off chain so they're not on the blockchain? But as a user, I still have self custody, so I don't have to trust that online platform. I can deposit my coins, I can trade back and forth, I can play cryptokitties or, I don't know, bitcoin chess, whatever you want to play. I don't have to trust that website. That website's job is only to coordinate the transactions.
00:02:22.210 - 00:03:05.490, Speaker A: If we can achieve that, that's really cool, because then you can use the Internet, the real Internet of money, without having to trust anyone on the Internet. So how can we do this? Let's find out. So this is sort of the makeup for the talk today, I may skip over some of it, give or take time, because we're only here till nine. So I'm going to talk about channels first, and then I'm going to jump over to those conventions, which are for plasma. So this is probably actually the only talk ever done that covers everything. So it's quite extensive. So as I mentioned, why off chain? Why is off chain exciting? Who's listened to a blockchain talk before where they claim they could do like 50K TPS? Okay, who believed that? Okay, great.
00:03:05.490 - 00:03:36.480, Speaker A: That's why I put this big bold number out there, just to be a bit cheeky. But with all chain, there's actually some possibility that may or may or not be true. So who do? By the end of this, we can all argue or agree whether that's the case, but the intuition is that it's the only scaling solution. Where 99% of transactions are off chain, they never interact with the global network. If you achieve that, then, you know, you bypass all the block latency. You don't care. There's ten megabyte block and you bypass the network fees as well.
00:03:36.480 - 00:04:06.170, Speaker A: Cool. So that's all about channel based networks. So what is a channel? A channel is between two parties, Alice and Bob. I don't have a little baby there, but I try to make it more professional. But we have Alice and Bob, and Alice and Bob are going to set up a channel so one Alice or Bob or both can deposit coins in this channel. In our example, Alice has deposited one coin and Bob has deposited zero coins. And now it's set up.
00:04:06.170 - 00:04:39.262, Speaker A: So the blockchain's ticking away and we don't care. What's going to happen is that Alice and Bob can basically agree how to distribute that coin amongst themselves. That's the blockchain progression. So let's take an example. Alice is going to send Bob one coin, okay? Now Bob has a coin, and we're going to see how that works under the visitors. But basically Alice will sign off on it, give it to Bob and say, Bob, you're now the owner of that one coin. Now Alice has zero coins and Bob has one coin.
00:04:39.262 - 00:05:16.090, Speaker A: Now if Bob wants to sign the coin, then what can't is Bob can send the coin back. So basically we just repeat this process. This is cuban animation. This is exactly how a payment channel works. They take a black box, we put coins in, and all we're doing is redistributing ownership of that coin. And when we're finished, if Bob has a coin, he can convince the blockchain that he owns the coin, and then it's simply withdraw. Now this is a payment channel example, but it could be used for auctions, casino games, or potentially fixed evolving.
00:05:16.090 - 00:05:51.238, Speaker A: These channels tend to be useful when it's only for a small fixed data parties. So if you're building a game that requires 10 million players, a channel is not going to work for that. If you're building a casino game between two players, it's probably useful for that use case. Cool. Well, that seems like a bit of magic. What happens if Bob goes off nine? Or I guess in this case, what if balance goes offline? Okay, so channels should always guarantee this thing called balance security. If I have a coin in this channel, I don't have to trust the counterparty whatsoever.
00:05:51.238 - 00:06:35.218, Speaker A: Although if the blockchain is reliable, I can always get my coin back. Okay, so how does this work? It's a dispute process. Okay, so in this case, Alice will trigger a dispute, and then the blockchain is going to provide a fixed time period for both parties to respond so Alice can submit evidence and Bob can submit evidence. Okay. And then after the dispute process, the boxing will say, well, what evidence am I going to believe? And there's a way for the boxing to be convinced that the evidence Alice gave was indeed the latest problems. By the way, if there's any questions during this talk, let me know. So just raise your hand or yell at me.
00:06:35.218 - 00:06:53.470, Speaker A: It's always very important. It's more like a workshop at a talk. That's like a lecture. Cool. And then after that fixed time view, that dispute period, the block people say, well, Alice deserves the coins. According to that evidence, then Alice can simply withdraw her coin and go on her way. And that's cool.
00:06:53.470 - 00:07:21.254, Speaker A: If both of her replies, then Alice can always get her coins back out. Okay, so that's a high level idea of a channel. Does anyone have questions for that? By the way, before we continue, yes. How do you verify the evidence that both crown targets provide? We'll get to that. Cool. Everyone sort of okay with the concept so far? Awesome. Cool.
00:07:21.254 - 00:07:51.854, Speaker A: So how do we build these? How do we construct these channels? Now, in bitcoin, there's filming channels, duplex, liquid compound channels, and there's lightning channels. Then the Ethereum world, we have Ryan Bright, Perunico, Kitsun, et cetera, et cetera. Now, what is exciting is that payment channels. Actually, this place is a bit wrong. So it was recently discovered. Payment channels were discovered in 2011 by a person called Hash coin, but most people call it Spielman. From 2013, so we're going to fix that at some point.
00:07:51.854 - 00:08:11.000, Speaker A: But as we're going to see, we're going to go through each construction one by one. So in the first one, it only supports one way payments. Spielman channels. The second one supports bi directional payments. But it's a bit awkward. Then the last one is how lightning works today. And as you're going to see, it's great, but it's also a bit awkward at the same time.
00:08:11.000 - 00:08:36.334, Speaker A: So Spielman Bombay payment channels are really exciting. They're actually one of my favorite constructions. So how does this work? So only one party is going to fund this channel. So Alice is going to create a transaction, broadcast it to the network and lock up one coin. And this can be redeemed. If one of the two conditions are satisfied. Alice can simply wait until time t.
00:08:36.334 - 00:09:09.562, Speaker A: Then she'll automatically get a refund or Alice and Bob can authorize to spend the coin immediately. Okay. Two very simple conditions. Okay, so as I said, all is after time T or Alice and balkan cooperate. So Alice is broadcasted to the network and it gets confirmed. Now we can start doing payments. How does this work? Okay, so Alice will create a new bitcoin transaction where Alice is going to get back 0.9
00:09:09.562 - 00:09:33.554, Speaker A: bitcoin and Bob's going to get 0.1 bitcoin. Alice will sign this and give it to Bob. Now Bob can make one of two decisions. Bob could sign this immediately, broad constitute the network and redeem his 0.1 bitcoin. Or he can just wait because he's aware that Alice can't claim this until time t.
00:09:33.554 - 00:09:53.734, Speaker A: The coins are locked up for 5 hours. He doesn't have to do anything for 4 hours. He wants to keep it private for now. Okay. And then in the channel olives now has 0.9 and Bob has 0.1. Now how do we do a second payment? I guess it's pretty clear what's going to happen now.
00:09:53.734 - 00:10:07.686, Speaker A: Oliver is going to authorize a second transaction. So you'll sign it, give it to Bob. Oliver is going to get back 0.7 bitcoin and Bob's going to get 0.3 bitcoin. So he did a payment of 0.2 bitcoin.
00:10:07.686 - 00:10:38.070, Speaker A: And again, Bob can just make that exact same decision. You can either keep this private or sign it and broadcast that immediately. It is a very straightforward protocol and he can just keep doing this. And now actually what he can do is delete the previous transaction he got. All he cares about is the latest payment he got from Alice. That represents his balance in the channel. Now blocks are taken away and there's no activity.
00:10:38.070 - 00:11:00.622, Speaker A: And I'll just keep signing transactions in this fashion. So we call this replaced by incentive. Bob has the incentive to only sign the transaction that will give him the most money. Okay. And that's really cool. So he'll sign it and then he gets his coins. That's basically how all my payment channels work.
00:11:00.622 - 00:11:43.254, Speaker A: What's also exciting about all my payment channels, they are the only payment channel construction where Alice can go offline and none of her coins are at risk. And we'll see later on some of the risks that can occur. But this is the only example where the sender can go offline and there's no kind of party risk. Cool. And the worst case scenario, what if there's no activity? What if Bob never claims his payment? Well, moment channels typically have a fixed expiry time, but Alice is always eventually refunded. She waits until time t she can then broadcast a refund transaction and get back her one coin. So Al is a different risk.
00:11:43.254 - 00:12:11.258, Speaker A: The only thing she is at risk is that her coins are locked up for a while. Cool. But what if we want to buy direction of know, what if Bob wants to send the coins back? Now I'm going to present her two protocols. And you don't have to remember how they work. They're more for historical context. This is the best thing we had in 2014 before lightning. Okay, so this is replaced by time lock.
00:12:11.258 - 00:12:38.090, Speaker A: Every time we change payment direction, we're going to reduce that time lock. Okay, so I'll give an example. Alice is going to again fund the channel. And now this can be redeemed if one of the following two conditions are satisfied. Okay. Alice is either refunded on or after block 20, or Alice and Bob cooperate again. The coin can be sent immediately.
00:12:38.090 - 00:13:17.030, Speaker A: Cool. So how does this work? Alice is going to send a transaction, give it to Bob, and it's going to work exactly the same way before. But now Bob's transaction can be redeemed on day 19 or block 19. So he just decrement that refund tag from 20 to 19. Okay, so the payment is only valid on block 19. Now he receives another payment and we don't have to worry about the lock time. We can keep sending coins Bob's direction, and then we want to change direction from Bob, the Alice.
00:13:17.030 - 00:14:04.530, Speaker A: What do we do? Bob's going to send a transaction and get up the Alice. But this time we're going to decommit the lock time by to 18. Okay, now, why are we doing this for? This is how we revoke or invalidate the previous end of the channel. The idea here is that there's only one transaction that I can get into auction first, and that's based in the fact that the most recent receiver. But what are the issues with this? Okay, in this example, the problems are obvious. One, Alba can't get her coins until block 18 if she doesn't get it in the vulcan reverse appendment by block 19. And that sucks.
00:14:04.530 - 00:14:29.680, Speaker A: Another problem is that every time Alice involved change payment direction, a lot of times, coming closer to present time, you change direction 19 times, you have to close a channel. So that sort of sucks a little bit. It's not a great solution, but it is a solution. It works. So then there's this academic paper called Dupak metro payment channels. Anyone heard of this, by the way? DMC. Cool, awesome.
00:14:29.680 - 00:14:55.030, Speaker A: Okay. I think you've ever implemented. So the idea of DMC is that there's two one way payment channels. One the Alice above and one above the Alice. And then there's a invalidation tree. Because what we're going to do is get the two one way payment channels, create them, do lots of payments, destroy them, and then recreate them off chain. So it's kind of like a channel factory.
00:14:55.030 - 00:15:24.834, Speaker A: Okay, so I mentioned there's two transactions or two tunnels. Alice, the bob and bob, the Alice. And the idea here is that Alice can pay Bob and her channel and Bob can pay Alice and his channel. But we'll eventually get to the point where in Alice's channel she has no more coins send to Bob. In Bob's channel, he has no more coins to send to Alice. Well, that's actually a typo in the slide. I need to fix that.
00:15:24.834 - 00:15:58.140, Speaker A: But anyway, the point is that the both channels are exhausted. They can't send me more coin than it. But Alice has a coin, my mom has a coin. So we're just going to destroy that and recreate it. And this is basically how the construction looks. So in the middle is that invalidation tree. And as a transaction, just as we've seen before, and every time we destroy the wallet payment channels, we create a new tree and then we refresh the channels over there and we just decomment that time.
00:15:58.140 - 00:16:13.762, Speaker A: Okay. And we just keep repeating that process. I won't go into the detail because no one's ever going to implement it. Actually, raise your hand if you'd want to implement this. Would anyone want to build this? Exactly. And that's why it never got built. But it did solve the problem.
00:16:13.762 - 00:16:42.726, Speaker A: It was historically important. So then 2015, you had pun and Taj. They're often looking at these protocols. They're doing a startup. Then they thought, how can we solve these problems? How can we get rid of this expiry time? As you can see here, by day 100, we have to close the channel. How do we fix that problem? And there's also this limit of throughput. Every time we change, we get closer to present time and we just get rid of that problem altogether.
00:16:42.726 - 00:17:05.406, Speaker A: That's a lightning fixed. Okay? So lightning at a high level is actually a very straightforward idea. A lightning channel. Alice and Bob both have a state. Okay? Alice has a state. And basically the state, by the way, is Alice's balance and Bob's balance at any given time. So the state of the channel is both of their balances.
00:17:05.406 - 00:17:30.518, Speaker A: So Alice has one that's only she can broadcast. Bob has one in a way, he can broadcast. Okay? So every time you do a payment, enlightening is a two step process. Okay? Alice is going to sign a new state and give it Bob, and Bob is going to sign a new state and give it the Alice. And this is just their new balance. Alice has one coin. Bob has one coin.
00:17:30.518 - 00:18:20.010, Speaker A: And then what they're going to do is revoke the old state such that the revoked state should never get broadcast to the blockchain. And what you end up with is one state that should always be broadcast to the network because that's a ballot to both parties. And then you end up with a set of revoked states that should never get broadcast to the network. So we call this replaced by revocation. Because we agree the new state, we revoke the old one. We're going to see how we do that in a second. Okay? And of course, what if Alice does cooperative? In this case, what if Alice goes? All know, Bob could try to close the channel using every book state and trying to reverse payments and get more coins than he deserves.
00:18:20.010 - 00:18:51.330, Speaker A: Okay? He broadcasts the first one where he still has money. And now you have that dispute process. And now both parties have an opportunity to submit evidence. What is evidence of lightning? So who's on this justice transaction before over there got the lightning nev. Cool. So basically what Olivia's going to do is she's going to broadcast what we call a justice transaction. That has enough evidence to prove that that was indeed a revoked state and it should never have got broadcast.
00:18:51.330 - 00:19:39.758, Speaker A: Okay? So she gets her justice transaction and she sends it to the network. The boss will get the justice transaction. And say, yes, that was indeed revoked. So what happens now? Well, because it's repaired by revocation and his lightning, we actually pay, like all. So all is going to get every coin in the channel. So if you try to cheat, you try to take more money from the channel than you deserve and you're caught, you will lose money because of that. Okay? But then the question is, how does it look like under the hood? What does bitcoin transactions actually look like at a conceptual level? So in cleaning up this funding transaction, we've locked in one bitcoin and it requires a signature from Alice and Bob to spend the coin.
00:19:39.758 - 00:20:17.754, Speaker A: And then we have a commitment transaction for Bob and a commitment transaction for Alice. All that really is, is their state. So the first output, in that case, the first output is Bob's balance. Okay? That's Bob's transaction. Only Bob can broadcast this and not his current balance. Now there's two conditions there, okay? So if this transaction gets into blockchain, Bob has to wait until time t he gets coins out. Or if Alice can reveal the preamble of a hash.
00:20:17.754 - 00:20:45.302, Speaker A: So if Alice can reveal a secret, then she can kick Bob's coins immediately. Then the second output is just Alice as follows. And because Bob broadcast this, Alice can take her money out immediately. And the second transaction, symmetrical. So I don't even bother protecting. Now, before I continue, does anyone have questions at this point about how this may work? Any questions? Cool. Okay, cool.
00:20:45.302 - 00:21:16.722, Speaker A: So we didn't get that. Don't worry about it because that be is quite a complicated protocol. It's one of my rounds about Bankbeam. So he broadcasts, this gets accepted to the network. Then the Joseph's transaction that Alice would broadcast simply reveals the secretness. And then the blockchain will say, well, some ball trying to close the channel. For some reason, Alice knew the secret s some must have meant that this was a revoked state.
00:21:16.722 - 00:21:58.138, Speaker A: And if it's revoked, then Alice can steal all the coins in the channel. That's basically how line works at the hood. Cool. Now, as you're going to notice, that's probably the most complicated thing I want to show tonight. And as you go through the years, the protocols just get more complex and complicated. Okay? And that's really because bitcoin was never designed for this in mind, in the sense that Satan Akamulu had a rough idea that payment channels would exist, but they had no idea what bitcoin needed to support them. Okay? So sometimes it feels like this picture and some people don't like it, but sometimes it feels like you're sort of beating bitcoin in this submission.
00:21:58.138 - 00:22:30.618, Speaker A: To get this to work. Let us put on a labor solution to solve the problem. So then when you go to the Ethereum world, you think, well, what about the smart contract language? It's a bit more expressive. Can we build it in a more simpler fashion? And we can. It's 100 bits by version, and as soon as transport, it just takes one slide. Okay, so the idea is that every time Alice involved you a payment, Alice will sign it, Bob will sign it, and then we just incorrect a counter. State one, state two, state three, state four, state five.
00:22:30.618 - 00:22:54.274, Speaker A: When there's a dispute, you just send a state with the largest counter. Whatever state has the largest counter. The blocks will say, yes, that must be the real estate. Very straightforward. And that's important, isn't it? Like this. You trigger dispute, you send state I, state I plus one. Then the blockchain will say, yeah, that's the data state.
00:22:54.274 - 00:23:09.446, Speaker A: Then gobble their coins respectively. There's no punishments. And that's what makes it really good. There's no expiry time, no throughput limitation. We don't actually understand a transaction. It's easy to support watch hours. It's not right.
00:23:09.446 - 00:23:29.020, Speaker A: So who here thinks they could build that range of hunt? If you think you could build that system? Anyone? Okay. You're sort of like half off. Okay, cool. I think you can build it. I think you can build it. People are confident. But the important thing is that this isn't new for the bitcoin community either.
00:23:29.020 - 00:23:52.546, Speaker A: There's real attempts to get replaced by birth. And you have counter idea in the bitcoin. So this is a slide I scope from Rusby. We gave a talk in 2018, and you'll notice in the slide they have actually the description for replace diversion. It's a protocol called l two. Okay, so they want to get this into bitcoin. And this is basically what it looks like.
00:23:52.546 - 00:24:20.240, Speaker A: You trigger dispute. Then you can replace the transaction with the counter and out of the dispute time. So for this to work, we need an upgrade called Seikash. No import, but that's sort of a controversial upgrade to bitcoin. So if I would honestly about it, please tell them to upgrade it because it would make building mine much easier. Anyway, so that's the end of how payment channel constructions work. If you want to learn more, I built Battleship game in at once.
00:24:20.240 - 00:24:48.166, Speaker A: Basically this time last year, I wanted to learn how easy is it to build a game in a state channel? So you build battleship. Who's played bottleship before, by the way, okay, we've all played battleship. Awesome. It's actually very hard to build in a smart contract. But anyway, that's basically the idea of a channel. So now you just have five years of, actually, longer than five years now. I guess that's actually eight years from 2020, 2011, within this space of time, 20 minutes.
00:24:48.166 - 00:25:23.130, Speaker A: So somewhere went over your head. Don't worry about it. As long as you have the rough idea. Then after this, you can go away, you can read about it, you'll have a rough idea of what's going on. The whole point of talks, to get a rough idea by yourself. Okay, so how do we build a network? So far, I've only spoken about two parties. So how do we build a network of channels? So what we need to do is go for one basic humble primitive, and it's called a humble conditional transfer, okay? And it's going to look really stupid.
00:25:23.130 - 00:26:03.994, Speaker A: You want to look at this and think, why would you ever do this for? But it'll make sense in a few slides. So what Bob's going to do is denominate a secret R to the random number. He'll hash it and he'll share the hash with hitch. Now, what Bob is going to do is set up a conditional transfer. So you'll say, Bob, if you can reveal the secret before time, know, you get the coin, you get, in this case, one bitcoin. That's a huge reward for revealing the secret. Now, in the cooperative case, Bob can reveal the secret R and then Alice can cooperate and just remove the condition.
00:26:03.994 - 00:26:35.960, Speaker A: So Alice learns a secret. Alice learns a secret and Bob gets the wrong coin. What if Bob doesn't cooperate? What if Alice gets the secret? One of olives doesn't cooperate. In this case, ball sends the secret to Alice. Then Alice says, Nabov, no way. I'm not going to give you the money. How do we make sure Alice is forced to give that one coin across again? We have another dispute process.
00:26:35.960 - 00:27:03.426, Speaker A: You're going to hear about dispute processes for the next hour. So what happens is that in this case, Bob will trigger dispute bomb. Oh, sorry. Alice will trigger this. Oh, yeah, sorry. So what happens is that Bob hasn't told time t to reveal the secret and claim the coin. So the blockchain taken away, he's not doing anything.
00:27:03.426 - 00:27:35.398, Speaker A: He reveals the secret and the condition. The blockchain will say, well, Bob's agreed to this condition. Bob satisfied it. Bob reveals the secret and he gets the one coin. So we actually reuse the blockchain to enforce this to make sure that there's a fair exchange of money for information. Cool. So what can we do with this humble condition of transfer and derivatives? We can build the lightning network so we can actually try to keep the lightning network here? Oh, yeah, last time we did, yeah.
00:27:35.398 - 00:28:24.838, Speaker A: Okay. And Carlin has a channel with Dave. And what we can do is use a conditional transfer to synchronize a single payment across those channels. So Alice can pay you by involving carly without any counter party risk. There's no trust whatsoever between the parties. Okay, so what it would look like is Alice sends a coin to Bob, Bob gets another coin in his channel and sends to Carly. Carly gets another coin and then sends out the dean.
00:28:24.838 - 00:29:02.070, Speaker A: But the question is, how do we do this in a way where we don't have to trust each other? Cool. This is called a half time lock contract. So what's going to happen is that Alvin will set up a conditional transfer with Bob. Oh, sorry, Dave actually send over the half of the secret first, and then I will set up a conditional transfer. And so you'll say, Bob, if you can reveal the secret before time t three, you get the coin. And then Bob will say to Carline, Carline, if you can reveal the secret before time t two, you get the coin. And of course, Carla is going to do the exact same thing.
00:29:02.070 - 00:29:22.400, Speaker A: Dave, d is if you can reveal the secret before time t one, you get the coins. I actually. Dave knows the secret. So what DF is going to do is reveal the secret to car line and I get the coin from Carline. And Carline has a secret. She gives it to Bob. And of course, Bob's going to do the same thing.
00:29:22.400 - 00:30:01.290, Speaker A: And now we've been synchronized a single payment across multiple channels. Now, what if Carly doesn't cooperate and remove the condition? Well, we just do the exact same thing we did before. David gets the signed promise from Carline, he gets a secret and he just reveals it on the blockchain. Then he forces carly to give him the money. Now, if Caroline's not on coin, she has to continue the protocol and then take it from Bob. So you force carly to reassure. She has to continue the protocol, otherwise she loses out the coin.
00:30:01.290 - 00:30:20.340, Speaker A: So it's really cool. We can skip. That's cool. That is basically how the lightning network works under the hood. We have a payment channel we just described before, lightning channel for ASM relocation. And it's basically just doing these FTLCs under the hood. When you set up a path, that's exactly what it's doing.
00:30:20.340 - 00:30:54.938, Speaker A: Now what about the good part of the Uopi? Okay, what's good about this is that as the lecture network evolves, you don't require a direct payaway channel between every party that me and Megan have a channel, because you have the channel with someone else. I can pay you by Megan. I don't need another channel with me. The bad thing is that you do have this thing called a free american call option. So when the, you know, I lock in a trade for bitcoin, you lock in a trade for litecoin. Dave has the opportunity to spook it. This trade is set up for next hour.
00:30:54.938 - 00:31:32.930, Speaker A: If Dave doesn't reveal the secret, it will expire and the trade will cancel. So it's very hard to build immediate trades using this technique. The lock up for an hour, you can take advantage of the exchange rates, or the exchange rate. Another promise, collateral lockup. For every hub you open a channel, Alice has to put in coins, and vault may also have to put in coins. Now these coins are locked up for that channel, and they could be locked up for one or two weeks, give or take the dispute process. But what is nice is that there's a routing network and it's actually truly peer to peer.
00:31:32.930 - 00:32:08.514, Speaker A: Three or four people here, right over the lightning channel. I know the Lightning channel. You can join this network and you can collect fees for routing payments on the network. And the graph gets big enough last night, technically, like 10,000 nodes or more, or 10,000 channels, sorry. The bigger that graph gets, the more liquidity there is, the more revenue you can error and the more censorship resistant it actually becomes. So acting is a truly censorship resistant peer to peer routing network. And it's optimistically 90 plus in our mobile rate that we done in a second.
00:32:08.514 - 00:32:38.122, Speaker A: And the payments basically considered confirmed, but it's not very huge for merchants, and we'll explain why in a second. Okay, now we have network of channels. How do we find the path for this? I'm not a complete expert. I have some colleagues who know about this better. What I can't explain is the rough idea what's going on. Given the underlying blockchain, you can actually work out all the channels of the network. You create a transaction, you open a channel.
00:32:38.122 - 00:33:14.770, Speaker A: Everyone in this group can see that. So you can build up the entire network topology by just connect the network. Now I can find all the ten through 30,000 channels and how they're all connected on the graph. They should be effective and scalable. Now there's two ways to be routing. The first is source routing. I look at the topology and I say, well, I was sent coin to the, I look up the path myself, then I tell every hop source, I pick the path up, or there's per hop routing.
00:33:14.770 - 00:33:55.006, Speaker A: Right, give the job to Megan and then she has to say, well, what's the next top? How did I eventually receive? So every hop takes a decision on what the next hop will be. Now, interestingly, in practice, most people have implemented source routing. That's sort of a whitening and writing, but in academia, they prefer per hop routing. So there are like two papers there that really teach you how to do that. I don't really understand why there's a divide. Preferred techniques, maybe this is easier to build and they're a bit lazy, maybe this is cumbersome and not realistic, I don't know. But there is a clear difference between theory and practice.
00:33:55.006 - 00:34:22.826, Speaker A: Now, there's three properties I do want to highlight though, because this is really the crunch of routing. It's first value know Alice is selling coins with Bob Carlin. Oh, sorry. So basically, Alice is trying to find a path to dear. As you can see, there's a path between Bob and Carla. She needs to make sure there's enough coins in the right direction that path can be fulfilled. So she talks in 13 different paths.
00:34:22.826 - 00:34:54.098, Speaker A: She doesn't want to reveal how much he's spending. He wants to keep that secret until the last moment. The other one is transfer privacy. So carly should have no idea this payment came from Alice, and Carly should have no idea this payment is destined to deal. From Carline's perspective, she should get an encrypted log decrypted, pass the job on, and that's it. She has no idea what this path is. Okay, so that should be premise for sure.
00:34:54.098 - 00:35:30.734, Speaker A: And that's actually very difficult to achieve practice. Okay, so at the end of channel BS networks, there's any questions about. Yeah, this is tricky actually. So the question is the following. When Alvin is setting the path, how does she determine the fees? How does she make sure that Paul will get paid enough money, Akana will be pent enough money to be accepted. So there's different ways to look at this. The implementation.
00:35:30.734 - 00:35:57.530, Speaker A: Today, I'm focusing on the shortest pop that may or may not be the cheapest pop, and I may be Alice bought Carly and Dean. It will cost me a dollar, but maybe there's a longer route across ten different paths. There's actually no $0.30 or $0.20. It's cheaper to some micro. So feeding the current night never kind of problem because no one's really getting any money for it. But long term it will become a problem and it may not be shortcut.
00:35:57.530 - 00:36:17.538, Speaker A: Maybe if there's a longer route that's actually cheaper. Yeah. And then you got something and it actually changes in real time as well. So one thing is that maybe Alice and Bob have a channel. Bob has two coins. Olive has zero coins. Now, Olive can't make any money in this channel.
00:36:17.538 - 00:36:54.298, Speaker A: So what she could is offer negative fees where she encourages people to realify Bob the rebalance channel. Then you can get in the negative fee world, the mind starts to explode and how that's going to work. But yeah, that answered. Okay, cool. Any other questions? Yeah, so if I am a channel from that point onwards, every incentive cheat because all I get is the money that you. Yeah, I can get a lambda. Well, it depends.
00:36:54.298 - 00:37:18.850, Speaker A: Harun's comment is that Alice and Bob have 1000 bitcoin in the channel. And Alice has sent all the coins to Bob. And Bob has 1000 coins. Now if I were Bob, I would go off man, and buy a lambo. Thousand bitcoins could definitely get me a lambo. So he said that, what if Olive now has an incentive to cheat? And she does have an incentive to cheat because she has nothing to lose. So we all have to remain online and make sure that Alice doesn't cheat.
00:37:18.850 - 00:37:48.560, Speaker A: I'll talk about that very network. Despite having the bait, no one uses it. You're learning. You route people, you get nothing. Just kind of waste type route because it's the amount of traffic. So look, yeah, I mean, how would you incentivize, like your grandma to use lightning? So she ain't going to go stay. So she, she's got.
00:37:48.560 - 00:38:20.002, Speaker A: Yeah, I think another way to look at it is when did a fee market start in bitcoin? So fees weren't taking until 2015, 2016, six or seven years after it was invented. So right now, no one's considered lightning as a serious payment network for another couple of years. This is practice, experiment to see how well it's going to work. Even if you did, by the end of it, your ground must be enlightened. And I'll be very clear. At the end, lightning is going to be more for professional routing than professional routers. You're going to be joining the networking taxis.
00:38:20.002 - 00:38:52.482, Speaker A: What you're going to do because you're a taxi, you're going to look at the network, you're going to look at the ground and think, well, if I join this connection, I connect these hops. Up and I can maximize my profits. So imagine it's not for your government. I want to argue that it's not even for payments. It's much better for scaling bitcoin. Cool. Any other questions? Okay, cool.
00:38:52.482 - 00:39:19.390, Speaker A: Everyone sort of poppies to a bar. Okay, so now I want to get to Harun's point. So how well do payment channels work for actual payments? So let's consider payment channel hubs. This is the motivation. Why commit change are so promising? Like plasma roll up, et cetera. So if you're a payment channel hub, you need to require a big pot of money. Okay, so before I can be a payment channel hub, I need a big pot of money.
00:39:19.390 - 00:39:54.006, Speaker A: But every time a customer comes along and I open a channel, I need to decide with my big fan of money and how to allocate that to the customers. So in this case, Alice is going to get two coins from the algorithm and Alice won't put up any coins whatsoever. Then Bob comes along. In this case, Bob's email says, copy the email icon. Bob will put in two coins and the operator will also put in two coins. Then Carly comes along. The operator doesn't like Carline, so carly doesn't get any coins from the operator or Carline puts in one coin and then Dave comes along.
00:39:54.006 - 00:40:26.926, Speaker A: Operator really likes Dave, so he puts in four coins for Dave and Dave doesn't put up eight coins. Okay, so let's look at this scenario and let's look at some of the problems. So the first problem is that Carlin can only send, Carline cannot receive any coins on this network. Okay, so that's quite annoying if this is a convertible scenario. Okay. It's really good if you're an exchange and Carly is a trader. Another problem is that in the Alice's case, they can receive up to a maximum of two coins.
00:40:26.926 - 00:40:55.290, Speaker A: So let's just say you're going to run an event and you're going to sell 100 tickets and every ticket is a coin. What you require is an incoming capacity, which is here of 100 coins. You need other people in the network to put up 100 coins in advance so you can receive that. And that's really awkward. They're going to be the liquidity provider for lightning. Another issue is that it's a hub. This is a bit like a hot wallet.
00:40:55.290 - 00:41:36.600, Speaker A: Your signing key has to be online to sign updates in your Lightning channel. It's a bit weaker than a hot wallet because you need your customer to cooperate to sue your coins, but it's not a cold wallet. Another problem is that as the operator out of big pot of money, I need to work out how to allocate that collateral and I may have to charge a customer for that privilege. So I stole this from bitfill because 16,000 saps back then we get a tunnel with, I think that's 400,000 saps incoming capacity. So when you look at that, you don't look at as a payment network. Do that as a routing network, you're paying for the privilege. You open it because you're going to make money by doing this.
00:41:36.600 - 00:42:07.278, Speaker A: Okay, so payment town hubs are great. They are great because there's no trust whatsoever. You do not have to trust the operator whatsoever with your money. Okay? But the cloud lockout problem doesn't really make you permissionless. Not everyone here could be a payment channel hub. You need a big pot of money before you get started. So why don't we weaken the trust assumption event what are we willing to accept? Eventual finality.
00:42:07.278 - 00:42:33.466, Speaker A: How many do a little bit better? And this is where BNC plasma comes in. The idea behind plasma is really straightforward. All the operator does is a minor. The operator collects off chain transactions. They're going to create a block of transactions. They're going to get the hash and the push after the blockchain and these little checkpoints. So let's consider an example.
00:42:33.466 - 00:43:04.530, Speaker A: Alice comes along and he's going to deposit one coin into the commit chain plasma chain. Okay? And then Bob comes along, you know, hi, Bob. Okay, so Bob is going to send Bob one coin on this plasma chain. So you'll sign it and give this to the operator. The operator will notify Bob and say, bob, you received one coin. Now the important bit here is that this is not yet final. This is not yet confirmed.
00:43:04.530 - 00:43:46.542, Speaker A: Okay, so now we wait around a while for more transfers. Nothing happens. And then what the operator is going to do is create a block that will only include Alice's transfer because that will do. Any transfer that happened here, he creates the block, he'll get the hash and post that to the blockchain. And what he's basically doing is a bot confirmation of his transfers on the blockchain. And he'll keep doing that over time. Now the important bit is that Bob cannot consider this transfer final until the checkpoint is in the blockchain and he has the off chain data where he can convince the blockchain that he has one coin in this checkpoint.
00:43:46.542 - 00:44:27.070, Speaker A: Okay? And we're going to see how that works in a second. But does everyone have the rough idea? The operator's only job is to collect transfers. And then once in a while it will create a block and put a hash to blockchain. That basically does a fast confirmation of all the transfers. Okay, but this raises the question, what does it mean to be secured for a commitment? So first, it's only secure if Alice can spend her coins and no one else. Healthy self custody. Only Alice can spend her balance, no one else can spend her coins.
00:44:27.070 - 00:45:21.822, Speaker A: And also does, again, follow up security. What if the operator disappears and goes offline and there's no new checkpoints? Can bob get his coins out? What process does he have to go through to get his coins out? And another problem is all we're posting to the blockchain as a hash, 32 bytes. And we're doing this fast confirmation of potentially tens of thousands of transactions. We have to make sure whatever's inside the hash is actually valid and correct that there's no invalid transactions in there. So how do we do that? So there's two main designs for these positive chains, okay? And the way I categorize them is either a potential claim or a fixed claim. Okay? So let's look the at first one. So we have a checkpoint.
00:45:21.822 - 00:45:52.586, Speaker A: And all that checkpoint is, is a Merkel tree of every book balance and a list of transactions. Okay? So look at the bitcoin block. Merkle tree of all its balances. I can get bitcoin. The whole point here is that there's this big pot of money, and it's going to say Oliver owns ten coins in that big pot of money. Now, in the finance world, that's called a potential claim. You have a potential claim to this big pot of money.
00:45:52.586 - 00:46:17.154, Speaker A: You don't actually own any of the individual coins. There's no one to one math. And then in the other one is more like class of cash. The chat point, there's big myrtle trees. Every leaf in that tree is a coin. So leaf one is a coin league two is a coin, leaf three is a coin. So if you're the owner of coin one, then there's a direct one that will not be.
00:46:17.154 - 00:46:51.118, Speaker A: So I can look at the big pile of money and I can say, I definitely own that one coin. This is like a non fungible token. I can look at that and say, I gapped it with that one coin. Okay, so 1 minute withdrawal is process. So let's say we have all these checkpoints and maybe the operator cheats. The operator gives himself a coin, it gets processed in the blockchain, and he somehow gets his money out. Okay? So in the potential cleaner world.
00:46:51.118 - 00:47:39.338, Speaker A: In this one here, if there's 100 coins for all the customers, and the big pot only has 99 coins, then there's a race, there's a bankrupt. Everyone's going to get their coins out first because the last one to get it out doesn't get the coin. There's not enough coins there for everyone's volatility fractional reserve banking. At that point where for the fake claim approach, if the operator monitors to steal a coin, we know exactly which coin he stole. The only impact on one user and nobody else. Okay? Because remember, in the victor claim world, every coin has a unique identity. So if the operator steals coin one, then only the owner of coin one is impacted.
00:47:39.338 - 00:48:14.802, Speaker A: Okay, any questions at this point, by the way? Cool. Awesome. I know it's quite technical, so I do apologize. Okay, so what are the fundamental problems emerging for these checkpoints? Okay, actually, one thing I should highlight, and I don't think I highlighted it that well. The great thing about these commit chains, as you've not noticed already, the operator does not put up any money whatsoever. The operator does not need to lock up any collateral remnants. The user locked up money and that coins can be transferred to another user directly.
00:48:14.802 - 00:49:01.414, Speaker A: So anyone in this room, at some point in the future, could run their own convention. My vision is that they're getting a WordPress login, you're running the website, you're doing all these transactions. Users install this WordPress plugin, and now your users have to wait for the checkpoint, but it's much better than we have today. Cool. So what are some of the problems that emerge with these checkpoints or these commissions? So the first problem is data availability, and that's really the killer. The thing that sells is taking the batch constantly. So what if the operator poses a checkpoint but they don't make the data available? Well, if the data is not available, as a user, I can't convince the blockchain what my balance is.
00:49:01.414 - 00:49:41.250, Speaker A: Remember, every checkpoint here has a balance for the user. If I want to go through all my coins, I say, well, I have 70 coins, go look at this checkpoint. But if I don't have the data, then I can't post that evidence. I can't prove to the blockchain that according to this checkpoint, I have 70 coins. Okay, so the user could just forget that the operator could be malice and does not give it, or the operator could crash and they'll lose the data. They could even just be an accident or false on their behalf. And of course, tech on integrity.
00:49:41.250 - 00:50:11.002, Speaker A: What if the hash just says potty is cool and doesn't commit to an account whatsoever. Well, that sucks, because it's invalid, and I can't use that to get my money out. So why do these problems even exist? Fundamentally, why do these exist? So, when you look at the new blockchain protocol, we always assume the proverb, here are the miners. I do the proof of work. I create a block. I send everyone in this room. There are provers, and everyone here is a verifier.
00:50:11.002 - 00:50:39.160, Speaker A: You get the block, you process the transactions, and you volunteer. That is correct. Well, we normally assume the verifier has sufficient storage and computational resources. You have a big enough computer to check blocks in real time. In bitcoin, you can do that with most laptops. A little bit of your money to run both theory, by the way, you actually run smoothly. Oh, we do have some people watch your computer set up, like wc order.
00:50:39.160 - 00:51:11.374, Speaker A: Yeah. Okay. No, there's a good example she wants to see by the stack, but that's important. We always assume the verifier are. These people have extensive computational resources to make sure the miners aren't cheating. Okay. In the convention world, the issue is that the verifier doesn't have the capital resources and the verifier doesn't have any storage.
00:51:11.374 - 00:51:38.586, Speaker A: It's the blockchain. The blockchain is the verifier. And we have to allow third party observers, all of us, to verify that the checkpoint is correct and the data is off chain. And that's fundamentally the difference between a new blockchain protocol and all of these plasma commit chains. Okay, so you're all leaning watch towers. Pisa is a leaning watchtower. Have to get that joke down there.
00:51:38.586 - 00:52:07.010, Speaker A: Cool. So let's introduce these liveness requirements. The user has to be online. So there's lots of different ways to design these. Okay. And in terms of integrity, we have to worry about checkpoint integrity and whether withdrawals are processed correctly. Okay, so there's also the third one that's in availability.
00:52:07.010 - 00:52:30.502, Speaker A: So let's just look at integrity to begin with. And there's two ways to do this. One using fraud proofs, and the other one using zero knowledge proofs. Optimistic. I'll get the optimistic. Let's not say that. So, in the fraud proof world, we have interactive fraud proofs, where you issue a challenge and someone has to respond.
00:52:30.502 - 00:53:05.942, Speaker A: Or interactive fraud proofs. But I just send evidence and I convince the blockchain immediately that this is incorrect. Okay, so let's look at checkpoint integrity. Okay, so what could happen with some designs. There's a checkpoint A, there's 72 hours. And then checkpoint B, there's a 72 hours window for anyone to prove to the blockchain that checkpoint was incorrect. So how do we do that? So as a user, you validated yourself, you get the checkpoint, you get the option data, and you just react to all the transactions yourself.
00:53:05.942 - 00:53:48.606, Speaker A: And if you find fraud, what you do is submit a fraud proof. You just point at the blockchain to take blockchain, execute this one transaction reactecuted, it's going to be invalid. The block will execute it. It will confirm that the checkpoint is invalid and is it projected. And that's basically how you for fraud proof, you guarantee the integrity for that one of the withdrawals. Typically in the designs, if you want to withdraw your coin from a commit chain, you say in checkpoint one, I have 70 coins. And then there's this challenge period where anyone can prove that I may or may not have had 70 coins.
00:53:48.606 - 00:54:33.006, Speaker A: If you can say, Evans, that I'm cheating, maybe I'm the operator and I can give myself 70 coins. Then you provide a proof and I'll cancel the withdrawal. Okay, so there's God proof work in a nutshell. Okay, you see the side. After that, let's move to zero proof. So zero proofs come to the rescue and see of the day. So what is nice about zero knowledge groups, all zero knowledge proofs are really for or verifiable computing.
00:54:33.006 - 00:55:05.690, Speaker A: You have a limited resource. I do a large computation I want to prove is correct without you having to repeat the work. Okay, so what we do here is that we pose a checkpoint and a proof that the checkpoint is well formed and all of the state transitions are correct. Okay, so Eddie solved one of the problems we don't solve, checkpoint integrity because I always prove to the blockchain that it's correct. Okay. And that's no big wizardry. Okay.
00:55:05.690 - 00:55:37.634, Speaker A: And that's actually a code I learned a few years ago what's important, that I noticed that cryptography generally proves only one tool in an engineer's toolbox. If you think cryptography is going to solve your problem, you don't understand your problem and you don't understand cryptography. So here only solves one problem and knock it out. It only solves checkpoint integrity. But there's caveats. Zero, very slow proving time. A leak cost transaction back in the day would take 50 seconds.
00:55:37.634 - 00:56:08.750, Speaker A: Now it takes 6 seconds. Yet now to do this for 10,000 transactions, it's quite slow. On chain verification isn't always cheap either. Currently I think a snark is around 800,000 gaps and that's going to get reduced to 100,000 gaps in the next hardware criteria. But that's a big deal. Every block, 8 million gaps, you can fit in 80 proofs. If these operators are doing a checkpoint every block, you're going to have 80 operators on the network.
00:56:08.750 - 00:56:24.606, Speaker A: So they're quite expensive. And also moon map. So is anyone here who actually understands snarks, raise your hand. What? Awesome. That's important. That's important. It's moon map.
00:56:24.606 - 00:56:55.950, Speaker A: It's sort of hard to verify that it's correct with all these people in their bedroom building it. It's hard to verify that the implementation are actually correct or that the proof of some bug. Okay, yeah, cool. Another question is, surely you start pumping up these blocks now we get a checkpoint every block we see of the day. That's not always true because they promise data availability. And as I mentioned, it's sort of been the thing stopping these commissions in the back. And there's three points, one way to solve it, and none of them are really that ideal.
00:56:55.950 - 00:57:24.810, Speaker A: So the first one is cost approach. You just wait for data availability. Okay, what I mean by that, if Bob gets a transfer of the network, he waits for the checkpoint, then he waits to get the off chain data and only then does he consider it correct. That works for you. In the past, McCasters exclaim commissions. That's not that great. Now you're reading like 10, 20, 30 blocks because it's even slower than the blockchain.
00:57:24.810 - 00:57:49.414, Speaker A: Oh, I picked that slide earlier. Yes, you did write a break on my slides. Okay. Another one is you could force inability on the blockchain. Okay. So between every checkpoint you could say, operator, here's a challenge. You have to respond on the blockchain with my account DN.
00:57:49.414 - 00:58:35.758, Speaker A: If the operator can't do that before you know the expiry time, then the entire checkpoint is invalidated. That's annoying because now even if that checkpoint is valid and correct and you have the off chain data, if the operator fails to respond to one data availability challenge, that will be invalidated. So now you have to wait for this checkpoint to get in and then for the next checkpoint to get in before you consider your transfer bottle. I think the new cost approach. So now you could be waiting 72 hours or I guess, okay, I think it's 36 hours of new cost. You can wait like a day and a half, two days, consider a transfer confirmed. And that's pretty soon the third one.
00:58:35.758 - 00:59:15.260, Speaker A: This is sort of what software came up with for a while was how an external committee of waspowers. What you do is that the operator will give the zero knowledge proof, let's say, and the checkpoint, and they send it off to the waspower committee and they all sign off on it. Then you send, and there's a happy face, they send it to the blockchain. Then the blockchain is convinced the off chain data was actually made available because external parties signed off on that. So it is a solution, but it doesn't really solve the problem because you're just moving into KFN Wasp towers now for pizza. It's good because we build wash towers, but generally it's critical design. It's not that good.
00:59:15.260 - 00:59:47.234, Speaker A: There are three different ways we've solved it so far. One was just, you paid for the data as cash on chain challenges as no cost, or you have this last power committee that was sort of the SARC pay example. And then the question is, well, this looks like a really hard problem. Why don't we just post all the data to the blockchain, get up on the off chain bit. We just post the blockchain anyway. And that's roll up. Okay, so roll up has a stronger verifier assumption.
00:59:47.234 - 01:00:17.674, Speaker A: It assumes a verifier can store data. You put all the data to the blockchain. Now the difference is that. Okay, cool. Yeah, so the difference is that it's no longer blockchain because all the data is now on the blockchain. So the question is, are we just back to square one? We tried to go off chain, didn't we? Worked out well, we're now back on chain. Well, what's nice is that it's still L2 underronts, really more of a compression technique.
01:00:17.674 - 01:00:37.990, Speaker A: So, vasa, attack the current limitation. Every ethereum transaction is 21,000 gas. Then compress the data. So every transaction is out 800 gas. So you can really put more data into a block. And remember, all you're doing is storing data in the block. The block is not verifying those transactions.
01:00:37.990 - 01:01:01.760, Speaker A: So all this blockchain becomes is an in availability connect. You just post off the data and you post out to everyone. And that actually solves one of the big bottlenecks, because now the miners no longer need to validate transactions. They depreciate in blocks. Okay. Oh, man, I knew that's going to happen. No, I made this slide earlier and I broke it.
01:01:01.760 - 01:01:46.106, Speaker A: Okay. So the whole point of that slide was there's two ways to guarantee this integrity. There is your zk roll up, which is where you post the checkpoint, the data, and a zero knowledge worth the meta that has the blockchain, the blockchain convinced everything's correct. All the state transitions are correct and the data is available. The other one is optimistic. Roll up where you post the data, the checkpoint, and then there could be a challenge period before you consider that checkpoint. And within that challenge period, anyone could submit a fault first to say blockchain, there is data.
01:01:46.106 - 01:02:05.410, Speaker A: I think that's an invalid transition blockchain. Just compute that and see if it's correct. The blockchain will compute it and say, oh, that is an invalid transition. Let's ignore that, delete it. And that's basically the difference. Ultimately, the lot relies on proofs. There's still this delayed period of like one or two weeks, let's say.
01:02:05.410 - 01:02:48.714, Speaker A: I don't know what time frame they're using, where anyone can submit proof that there was an invalid transition or an invalid payment. I think transition because it could be smart contracts, not just payments, where for zk roll up, you post the proof and the block is immediately convinced that the checkpoint's valid. Okay, cool. So what I also tried to do is create, I made this on a fan a few weeks ago. So take a look at a lot of these designed by these companies are military kept secrets. It's hard to get anything out of them, but it sort of shows the evolution of these conventions. No cost, for example, united proofs for tech integrity.
01:02:48.714 - 01:03:26.074, Speaker A: They have long chain availability challenges where you get down the road up and optimistic roll up, and now you don't even need any watch powers potentially, but everything's all changed. So really, commissioners have slowly evolved from the original positive paper, to the academic paper, to each research to roll up. And now we've got to the finalists a bunch of code solutions. Now understand what the design space looks like, these dimensions, so it feels like the Lightning network in 2015. There's a ton of limitations out there. We have a really good idea now on how to take this forward. Okay.
01:03:26.074 - 01:04:11.338, Speaker A: But this brings up user management requirements. Okay. So should the user have to watch out for invalid withdrawals? Should you have a challenge period for withdrawals? Should the user be responsible for holding the hub accountable? What I mean by that is, should the customer be responsible for issuing data availability challenges and making sure the off chain data is available? And should the hub, should the hub be responsible for responding to on chain challenges? As a hub, I can have millions of customers, they can all issue me a challenge, and I've got no many responses to do on chain. That is a doss factor. We don't get good answers to this. Okay. And also this is another side.
01:04:11.338 - 01:04:37.614, Speaker A: And this is sort of going from fraud proof to the analysis proof. I think some of the numbers over there for perine times are incorrect, but I forgot what the correct answer was, so I didn't fix it. That could be just confusing. Anyway, so the point there was that we ran the fraud proof approach. It's really cheap and a convention for fraud proofs, all in which are hashes, 32 bytes. So you're going to might as well deal with it better. But when we get down to the snark and starch.
01:04:37.614 - 01:05:09.600, Speaker A: And snarks are constant size. Okay, 500 gas and then 100K, that's still bigger than the fraud proof. And then starch. Think about the image gaps, give or take the throughput they're handling. And that's important. Let's just say stark pay took off and they were doing 10,000 20,000 transactions per second. They would occupy the entire pop in Ethereum at one operator where snarks, as I mentioned, if they're 500 kas, you may get 100 snarks per block and maybe more when that comes down.
01:05:09.600 - 01:05:41.720, Speaker A: So that needs to be taken into consideration. Operator, the point here is that if I want to run my own commission, that's my ongoing cost. Every time I put a checkpoint, I have to pay for this. If I trust myself, maybe I'll just go with a hassle approach. I want to convince you guys that you don't have to trust me. Maybe I'm willing to pay the price to verify smart blockchain or any store start. So I've noticed some of the financial implications for this, but no one really talked about.
01:05:41.720 - 01:06:21.698, Speaker A: Okay, so from commition to lease, what I want to highlight is actually I believe in the future most services on the Internet will run a commitment. It will only just be a WordPress plugin similar to that. Then you offer self custody to your customers. But what you need to think about with these designs is the ongoing financial cost. The appetite checkpoint could be deemed invalid. The cost of watching service, is there a trust set up or not? The speed of a withdrawal and speed of confirmation of checkpoint. So in positive cash, you got to have rapid checkpoints in no cost.
01:06:21.698 - 01:06:56.046, Speaker A: You have to wait 36 hours between every checkpoint. There's all these design decisions that you have to take into consideration. Welcome to the trust and verify feature. Now let me finish, by the way, I do have another hidden part of this talk, and that's actually all of these on chain protocols have one big underlying assumption. Except for DK mobile, they assume users online and synchronize the network. So what I mean by that, and I sort of alluded to it, okay, this is almost really silly. Alice involved on a payment channel.
01:06:56.046 - 01:07:31.786, Speaker A: Alice won a poker game, let's say, or a bottleship game. And that is 1 million bitcoin to go offline and to go buy a lambo and to how does it. So what Bob can do, he can kind of trigger a dispute and get back his $1 million from the payment channel. So you send the evidence where he still has $1 million. And then Alice comes along. And the question is, will Alice wake up and save the day? Or will Paul get away with it? In this case, Alice comes online at the last moment. So send the evidence and manage to save her $1 million.
01:07:31.786 - 01:08:16.610, Speaker A: But that sort of sucks. Now you need to have a node or something online that's watching the blockchain your behalf. So what we were working on three years ago was, can we help them mediate this new security requirement? And this is sort of where the watchtower idea comes in, maybe watch hours, you can hire someone else to do it for you. Now, typically over the past, I would say four or five years now, the typical perception of a watching network is following. The user has done something off chain and now they want to hire a watts tower. What they do is they're going to hire 22 watts towers, okay? And now all 22 watts powers are watching to protect the customer. So then there's a problem.
01:08:16.610 - 01:09:03.622, Speaker A: That's the main question is, does user have to pay 22 watts towers to protect them? And that's a bit crazy. So what people normally advocate is this on chain bounty approach. The first watch power to respond will get money and the other watch hours will simply lose value. So they broadcast, if there's a job on the blockchain and they broadcast it, family off of peeps, and only one tower gets the job. Now this sucks a little bit because one of them is only a $5 reward. You just have a stored job for, let's say, three weeks, and then you didn't even get rewarded for doing that. And in bitcoin, this is a problem because of the way, as we heard about, I guess, an hour ago.
01:09:03.622 - 01:09:37.122, Speaker A: Now, in lightning channels, there's one wallet state and there's a set of revolt states. And every vote state has a unique justice transaction. So the Wasp power has to store order M justice transactions. Do you 1000 payments in a lightning channel? The waspower has to store the watch power, has to store 999 justice transactions for that. And that's a lot of storage. Every transaction takes 500 bytes. So if you store, let's say, 999 jobs, you don't get paid for that.
01:09:37.122 - 01:09:59.974, Speaker A: That's not really going to work that well. The other one is Ethereum. This is unique to Ethereum. You hire 22 watts towers, one tower will respond and get the reward. The other 21 watts towers will still respond. They'll get a field transaction. And now they have to pay for that field transaction so you can get, it's not even that, you just don't get the reward.
01:09:59.974 - 01:10:30.660, Speaker A: You have to pay for the field. And that sucks. You're not losing money trying to protect the customer. But the ultimate problem is running ideological one are the miners. What if the miners are part of this watching network? They can frontrun everyone because they create blocks. They store the job, they create a block, they dissect it and they outcompete everyone here. If you really care about decentralization, you don't want the miners to take on this role, even if they're best placed to do that.
01:10:30.660 - 01:10:58.842, Speaker A: And then the worst case scenario is that, what is the one response? You had 22 watts powers and you all at war. Two customer back online. There's no evidence, no reward. Top clock uses lost money. That's a pretty bad user experience. The question is, why do we have the design in mind? Every time someone talks about a relay network, watching network, funny network. Why do they have this design in mind? Typically it's because one, they want to minimize trust.
01:10:58.842 - 01:11:19.490, Speaker A: You have 22 watts towers because you don't trust any of them. You're just hoping one is on. You're also hoping for high availability. What if they go offline? Hopefully one's online and respond to me. But the third one is also, this is fair reward. One makes the watch hours actually head for doing their job. If they don't respond, they shouldn't compend.
01:11:19.490 - 01:11:53.178, Speaker A: So one thing we were thinking of was mostly, how do we solve this? How do we help alleviate that trust minimization. Is there a way to hire one Watchtower and still minimize trust? And we think the best way is financial accountability. You can hold the Watchtower accountable. That's pieces. The idea of peas is that there's a leaning power of skin in the game. There's a Pisa contract and a highly large security deposit. So the customer comes along, they hire a Pisa and then pizza will send over a signed receipt.
01:11:53.178 - 01:12:25.042, Speaker A: So now the customer has evidence that they've actually hired the watch company. So if there's a dispute, Olive's involved in payment. Olive hires pizza, Olive goes offline. Paul tries to cheat. Peter just responds all of his behalf. It's very straightforward. But then the question is, what if Peter doesn't respond? Can Alice do anything about it? So the point here is that there's a security deposit on the blockchain, then Alice has a side receipt that they hired Peter.
01:12:25.042 - 01:12:55.274, Speaker A: And there's ongoing evidence that Peter didn't do his job. So Alice can simply send over to the blockchain. Then the smart contract says, well, Peter cheated was satisfied with his quality of service. So now there's this refund period where people have to refund the customer. A pre greed amount all the way gets lost. And there's a stake, so it's pronouncedly accountable for his actions. Either you refund the customer or you get stopped and you didn't want.
01:12:55.274 - 01:13:29.162, Speaker A: And that's nice. This is one of these staking protocols and we're probably going to see a lot more of this in the future with a lot more services. I offer service on the Internet. I promise you a quality of service, but I don't give it to you, I refund you or I get smashed. That's quite a nice outcome just to finish because I know we're all quite tired. The whole one of these watch powers and these off chain networks, what they should be is really more like insurance or they take on financial liability. So if you want to qualify, there's this third party that will take on some liability for you.
01:13:29.162 - 01:14:02.806, Speaker A: I promise you this quality of service, the Watt power cannot protect you if you get hacked. If you get hacked or there's an incident threat, it cannot protect you. It can only protect you if you go offline or if you crush. Cool. Now I'm just going to wrap up one more slide. Okay, so given everything I've spoken about tonight, how do networks going to evolve in the coming years? What's my vision around that? So the first is going to be this peer to peer rally network. As I mentioned before, I only hear can open a lightning channel.
01:14:02.806 - 01:14:44.690, Speaker A: I don't hear can join lightning and I only hear can route payments on the network. But the question is, I should have alluded that. I didn't think lagging was great for payments. It could do payments and it's definitely going to do payments in the short term, but long term, where are the payments going to be? Where is olive sending the coins to? I think it's going to be these noncustodial hubs. These could be the payment channel hubs or it could be the commit chains. So I'm over there and then I'm going to send coins to another service. I'll get across the lightning network and then finally you're going to have this watching network that just takes on the financial liability and offers insurance to all the players in this option network.
01:14:44.690 - 01:15:21.566, Speaker A: Then the blockchain is pretty much more like a court or a settlement system. It's no longer responsible for processing every transaction. But most people look at me and they think, Patty, you're a bit crazy. Blue sky, this is never going to exist. You're too much of an academic. But actually companies are building this. You look at the channel based networks, you have blacklist companies are actually building this out.
01:15:21.566 - 01:15:35.990, Speaker A: And sometimes they get the impression they have no idea about the big, bigger picture. They're just sort of staggered in what they're building. So it's cool. This is sort of evolving. Hopefully in the coming years we can all play with. I'll stop there now you can play with. But there's certain practices.
01:15:35.990 - 01:16:03.270, Speaker A: So I'll get him to talk. I provide a little bit. Okay, that's good. Cool. Questions or. Yeah, have you thought about. Yeah, so I think long term a lot of the watts will be under collateralized.
01:16:03.270 - 01:16:35.866, Speaker A: It will also be similar to insurance. One thing that would be nice is to be able to prove your assets and liabilities. How solvent am I? And there's protocols to do that. I think that I can do something similar to committees. There's a zero, but that sort of works for exchanges. Is it too hardcore? Yeah, I think we will be able to classify. Another way to look at it is that it's not that they're taking off all the liability, it's more that you issue a fine and they don't give you quality of service.
01:16:35.866 - 01:17:10.622, Speaker A: So they no longer need $1,000. That's it. This is much better than going through the course. Any other questions? As you were talking about an overlap of concepts, I kind of almost see the watch hours almost functioning. Yeah, there's difference. Yeah. So I think the difference is that oracle provide information to the blockchain for a responder to watch our cost of blockchain and then they respond.
01:17:10.622 - 01:17:45.994, Speaker A: So I guess maybe like purchasing there where you're kind of backpacking on system. Yeah, I think we're going to find a watchtower going to be everywhere. So basically those applications you can think of on these networks, there's always some user. Another way to summarize that. Anytime a user has to be online and they want to go offline. There could be a watch hour. Another example is Maker CDP.
01:17:45.994 - 01:18:24.586, Speaker A: So if you have a CDP here, you have a CDP, your CDP overcloudalized. Yeah, it was. Yeah. The reason people overcloud your CDPs is because they're too scared to go up. You can hire a watch harder to do that and they just pop it up when the exchange rate drops. You're just going to see what's hard to prefer eventually, even Jimmy as well. Any other questions? Why doesn't she submit like a safe point transaction so that no earlier, she can't do that.
01:18:24.586 - 01:19:01.126, Speaker A: And I think it might be that will be essential at some point. So what you're really trying to do is avoid fees. So hiring a watchpower should hopefully be cheaper than any transaction that you want to go online. But because of my liking works, the watch part could end up storing, let's say, 500 megabytes for a single customer. But if the story is too high, the watchmark could probably pay off before then. I have a couple of questions with Fastmax. If Alice wants to send Bob, that transaction isn't valid until an operator has got that commitment to.
01:19:01.126 - 01:19:45.490, Speaker A: Is there any financial incentive to the operator? There's two ways. Either walking a service and trying to make money through my service. That's kind of like, yeah, I need revenue in the game and then I have an incentive to go to checkpoints. But you can also do, and I didn't allude to it here, and it's just like meta, the operator can knock out collateral again. So what you do is that as the customer, I send a transaction and give it to the operator. The operator can be assigned receipt and if they don't do that transaction at the next checkpoint, they get slashed and they lose their security deposit so keenly. That's the idea that hold them cannot stay accountable.
01:19:45.490 - 01:20:23.422, Speaker A: Yeah, and also the thing repeatedly, the more they're doing this, you should have some confidence they're not just going to change it. Hopefully limited trust. And the other question, wondering what the large implications were. Roll up. Yeah. So I describe roll up as like a compression technique where we just posting all that data. So there's going to be a scaling, or we get to the point where we can't scale anymore just because of information propagation.
01:20:23.422 - 01:20:48.362, Speaker A: Or maybe certain nodes can no longer score a huge blockchain or network state. But I don't know. Those are the cases. We'll eventually have them at some point. Any other question, what is the action? Probably between. So the reason why you would do some relativity here. And this is why I'm extremely delicious on it.
01:20:48.362 - 01:21:06.218, Speaker A: So on these commissions, they could be jeans, they could be. I always keep payments. I'm more of a payment person. I'm not regular, but here we give you payments. Now, I want to start right over there. Maybe I want to move over the payPal. What you normally do is use it here, use lightning.
01:21:06.218 - 01:21:46.782, Speaker A: And when you use lightning, why don't I know their commission there? And lightning, the minute I'm transferring heads across is instant. There's no credit cardi risk. I don't have to trust any of these peers in the middle. So this operator and this operator don't have to agree on who to send it between. They use the lightning network and they get sent across 30 seconds, and that's why you have lightning. What's also exciting about them is that it's also peer to peer. So woke path fields, because that's the same middle the FBI area that says someone who doesn't like you, you can just get another path of ammo more.
01:21:46.782 - 01:22:01.180, Speaker A: That could be more signature resistance than bitcoin. This is pretty exciting. Any other questions or. Okay, cool. I think we're all exhausted, so I guess I know there's any detail, but thank you guys for coming.
