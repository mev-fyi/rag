00:00:00.250 - 00:00:13.134, Speaker A: Thank you. Let's dive right in. So, account abstraction. Why should you care about it? It's a valid question. Right. We're here at a web three conference. Millions of users use web three every month.
00:00:13.134 - 00:01:02.526, Speaker A: We've got some pretty good adoption, but the question still remains, how do we reach mainstream adoption? And I think that's the really important question if this technology is going to make it. When I ask this question, a lot of the answers I get have a similar theme to them, and that's that we need to focus on user experience and making this easier for the average user. And that's something you hear me say over and over again during this talk, is user experience and easier for the average user. When we think about blockchain technology, I have a question for all of you all. How many of you were slightly overwhelmed the first time that you interacted with web three? Like, raise your hand, take a look around. This is developer stage, right? That's a lot of hands. And that is the problem.
00:01:02.526 - 00:01:35.146, Speaker A: If you were put into your car the first time, you're learning to drive and you're met with this, which is a real car, from like the don't even know what they were thinking. But if that was your experience, I don't think I'd be driving now at least, right. If that was my first experience. And I feel like that is a good representation of what it feels like to be a blockchain user. Like a web three user right now, right. You're met with all of these different friction points and thinking about the first time you interacted with it. Let's think for a second about what it's like to be a new user today.
00:01:35.146 - 00:02:00.606, Speaker A: Put yourselves in those shoes. Right? What's the first thing that you have to do to interact with the blockchain? You have to get a wallet, right? So one step, get a wallet. And we've come a long way. There's a lot of diversity in options when it comes to wallets, which is good, but also a friction point, right. Because now we have to pick a wallet, and metamask is pretty popular. So I think I'll go with that option. But somebody mentioned something about a hardware wallet.
00:02:00.606 - 00:02:39.226, Speaker A: If I want things to be really secure, it's like, already I've got this decision where I need to pick between metamask and this hardware wallet thing, and then we're not normal people. We expect people to take these 24 magical words and then carve them into metal and hide these metal things around those seed phrase words, right? That's what we do, we do all these weird things. And if you think about the average Internet user, that's not normal. That's a lot of work and that's hard. And we haven't even actually done anything with the blockchain yet. Right? We're just talking about creating a wallet. And this is the problem that we have to solve.
00:02:39.226 - 00:03:26.190, Speaker A: If web three is going to be successful, account abstraction can be that solution. So if we think about applications that have had wide adoption, social media, pretty wide adoption, meta Instagram, billions of active users, right? This is where we're looking to get to. Is that mass adoption? Think about the average Instagram user. Do you think Instagram would be as popular if in order to look at your friends photos, you had to figure out what a wallet was, you had to create a wallet, you had to deal with a seed phrase, not to mention you had to exchange fiat for cryptocurrency. Like that's a whole nother problem. I don't think Instagram would have nearly the adoption that it does. And again, we're developers, it's our job to make good user experiences.
00:03:26.190 - 00:04:01.466, Speaker A: Right now, we frankly don't have that. We need to look at stuff like account abstraction to make those user experiences easier, remove that friction, because web three is complicated. And I think if we're being honest, it's a little bit scary right now. So what is account abstraction? I was looking for a Picasso where he drew a car, but a little bit before his or after his time with the car. A counteraction is we take complexities, we abstract them away and hide them from the users. We make things as simple as possible. Right? Like this is a very simplistic drawing of a car, but you can still recognize it as a car.
00:04:01.466 - 00:04:33.230, Speaker A: All the complexities have been removed away and everything that's complex about it is gone. And that's our job as developers, is to abstract away the hard parts from our users. I like to think of it as user experience. So thinking about cars, account abstraction does come with a trade off in that as we make things simpler, sometimes we lose that direct connection. I like think of it like between a manual and an automatic vehicle. I love driving a manual car. It's fantastic.
00:04:33.230 - 00:04:58.666, Speaker A: You have that control, that interaction, right with the car. But that comes at the cost of. It's a lot more complex to learn how to drive a manual. And if you're sitting in bumper and bumper traffic for hours on end, you're going to be hating life. When we think about account abstraction and removing anything that's complex, it's more like an automatic. Right? If you think about most drivers, they're not caring about those intricacies of the car. They want to get from point a to point b as easy as possible.
00:04:58.666 - 00:05:25.730, Speaker A: If self driving cars become a thing, they'll be down for that, right? Like just take me there and let's go. Another question. We're here at a web three conference. We're the developers who currently is frustrated occasionally with the complexities of things like gas fees, transaction orders, anybody? Yeah, look around again. We're the ones out here on the bleeding edge and we're frustrated by this. Right. Average Internet user.
00:05:25.730 - 00:05:47.226, Speaker A: That's a problem. They're just going to drop it because it's too hard to begin with. So we have user experience. We also have flexibility when it comes to account abstraction. So account extraction allows you to create a smart contract wallet. So instead of a traditional wallet, you have a smart contract that acts as your wallet, that gives you flexibility. You can customize it, right.
00:05:47.226 - 00:06:23.110, Speaker A: You can be prepared for anything. Using account abstraction, you can create different methods of dealing with security, dealing with fees and dealing with nons. So we'll talk about those in a moment. But instead of relying solely on your private keys, your smart contract wallet can have more security. So we talk about security. What does that look like? We have the opportunity to do things like time locked withdraws from your account. You can have various modes of verification when it comes to signing and ensuring that it's not just a stolen key.
00:06:23.110 - 00:06:45.150, Speaker A: And I think that's big. So essentially, account abstraction isn't just a user centric upgrade or a technical upgrade. Sorry. It's a user centric upgrade. Right. That's focusing on user experience and how we actually make web three easier for people to use. One of the key features is signature abstraction.
00:06:45.150 - 00:07:13.634, Speaker A: Eoas externally owned accounts wallets rely solely on private keys. And that works pretty well most of the time. Until it doesn't. Again, I'm going to ask a question. Raise hands. How many people in here have heard of somebody who's gotten scammed? Like, read about it, know of somebody? Yeah, pretty much everybody. And that is the narrative that this space has, right, is that it's so easy to lose everything and it's dangerous.
00:07:13.634 - 00:08:12.154, Speaker A: It's scary when we think about account abstraction and those smart contract wallets, they enable you to not just rely on your eoa so that one private key to secure your account. And that is big because that makes it feel safer and more secure for users. And what's our job as developers to make it easier for users, right? The other thing, and I'm sure a lot of you have heard about this, the guy who threw away the wrong hard drive that had 8000 bitcoins on it, he's currently still looking for it, like mining through a trash dump that's called an irrevocable loss or irrecoverable loss. Account abstraction helps prevent that. If you lose your one magical seed phrase or private key, you don't necessarily lose everything. When we have account abstraction, and again, we're thinking about the average user, right? Even myself, it scares me to think that I could lose a piece of information and lose everything. That's not what people are used to, right? Like if I were to lose my credit card right now, it's no big deal.
00:08:12.154 - 00:08:50.466, Speaker A: I don't lose everything. So having that ability to not have irrecoverable losses is a huge deal. So signature abstraction aims to solve a lot of these problems, and it opens up several exciting possibilities, the first of which is transaction limits. So we can put limits on things like spending from a wallet. If we want to put additional layers of security above a certain threshold when it comes to that spending, we can do that as well. So with smart contract wallets, your wallet becomes programmable, right? So you can set up what you want it to do. The next thing is that you can have multiparty approvals.
00:08:50.466 - 00:09:36.082, Speaker A: So if you have a smart contract wallet, you can have approvals that require your friends, your family, or even just another device you have like multifactor authentication to approve that transaction. This starts to give a sense of security to our users, right, because it's not just that full responsibility on them. And additionally we have the ability to rotate or revoke the keys as well when it comes to those smart contract wallets. So if a key were to be lost, similar to a credit card, right? If you lost your credit card today, you call your credit card company and you say, hey, I lost my card. They say, no problem, we're going to freeze your account and issue a new card. You can do that with a smart contract wallet. You can pause it so it can't do any transactions and issue a new key in case a key got compromised.
00:09:36.082 - 00:10:06.334, Speaker A: And that's massive. Again, it makes things easier. It makes it where it feels safer for users and actually is safer for users, and it helps bring it to an experience that they're familiar with. Next we're going to talk about fee abstraction. When it comes to transactions, every transaction requires a gas fee, right? That is not normal when we're talking about web two, what people are used to. That's kind of strange. You want to post on Twitter and suddenly you have to pay for it every time.
00:10:06.334 - 00:10:26.526, Speaker A: Well, maybe that might be normal now that it's x, right, where you have to start paying for a lot more stuff. But anyway, when you're interacting with the website, you're not used to having to pay for every transaction. Fee abstraction lets you create gasless transactions. I know some of you are thinking like gasless. I don't have to pay gas. Sweet. They're not really gasless.
00:10:26.526 - 00:11:03.610, Speaker A: It's more of a sponsored transaction where your application can pay the gas for your users. But now we're starting to make an interaction with an application that feels more normal, right? Because they can do something and they don't even have to understand the concept of gas. They don't have to have found a way to get fiat into crypto to pay for that gas. That's massive. Like that user experience just leveled up, right? But maybe you don't want to pay for all of their transactions. You can also do what are called non native gas fees as well. So that crazy looking beaver thing in the middle, I'm from Texas.
00:11:03.610 - 00:11:35.770, Speaker A: That's bucky. That's a pretty popular gas chain. So it's not native to here by any means. And non native gas fees means that you can have your users pay in ERC 20 tokens and then within your application you can convert it and pay the gas fee natively for them. So that just is removing another friction point. Not quite as friction free as gasless transactions, but it's a step in the right direction. And then finally, what I think is the biggest change is with fee abstraction and these smart contract wallets, you can have social logins.
00:11:35.770 - 00:11:53.920, Speaker A: That looks like web two to me. Right. If we combine that with gasless transactions, you could have an experience that a user has no idea they're even using. Web three. And that's the dream. There is no difference from their perspective. They didn't have to learn anything new.
00:11:53.920 - 00:12:41.134, Speaker A: They don't have to worry about anything and they get the benefits behind the scenes of web three. I think that's massive. Your application could spin up a smart contract wallet for your user when they sign in and use those gasless transactions. The next thing that we're going to talk about is nonce abstraction. So nonce is basically just a transaction counter, right? So every transaction that you do on the blockchain has a nonce associated with it. It's just keeping track of how many transactions you've done it works pretty well most of the time, except for who in here has had a stuck transaction? That's a lot of hands again, right. When it comes to stuck transactions, they're a problem because the way that nonstorms currency is first in, first out.
00:12:41.134 - 00:13:04.438, Speaker A: So we have to wait for that stuck transaction and there's going to be traffic piling up behind them. Right. We're on a single lane road. With non subtraction, you can have multiple transactions that process simultaneously. So we're moving from this single lane road to a superhighway. If we have one that's slow and we have a transaction that's kind of not going through, it doesn't mean that everything stops in our application or our wallet, our smart contract wallet. And that's huge.
00:13:04.438 - 00:13:32.094, Speaker A: The other thing that we get with non subtraction is transaction batching. So if we think about something like uniswap right now, right? So in uniswap you need to approve the token, you need to deposit tokens, and then you need to borrow tokens, and those are each separate transactions. Right. But what you're actually doing is you're just interacting with Uniswap. It should be one transaction. With transaction batching, that can be one transaction. All of those transactions can be combined together.
00:13:32.094 - 00:13:57.560, Speaker A: This makes a lot more sense from a user experience. Right. I want to interact with uniswap. I sign one transaction because I did the thing instead of click and sign and approve, and I had to pay gas for that. And I have to pay gas for this and this too. If that's your first experience with web three, it might be pretty poor because you're saying every time I click on something I have to pay a gas fee. What? So non subtraction gives us that benefit as well.
00:13:57.560 - 00:14:32.030, Speaker A: So this was a short talk. Just trying to express to you how we as developers can do our job of making web three a more user friendly place and making the experience better for users. Hopefully this has given you a little bit of interest in account abstraction. You will take what you've learned a little bit here and expand it and start looking at how to make web three more user friendly so that we can get that mass adoption. Because without that, I don't see this going anywhere. And that kind of scares me because there's a lot of power and benefit in web three. And so we need to reach mass adoption.
00:14:32.030 - 00:15:09.566, Speaker A: We talked about signature abstraction, fee abstraction, and non subtraction and how those can benefit. And I hope that we as developers can create a paradigm shift in web three and lower the barrier entry and make blockchain technology more accessible to the average Internet user. If you're interested in this, there are a few different companies that have sdks that are probably the easiest and fastest place to get started. We have biconomy, alchemy, and third web. There will also be a talk tomorrow afternoon in this room. Kira will be giving it. She's actually here in the audience if you have questions for her right there, and she'll teach you more about it.
00:15:09.566 - 00:15:22.380, Speaker A: If you're interested in it, hopefully you are. I'll just end with web three. Shouldn't be hard, and it is. If it's going to be successful, it can't be hard, so let's make it better. Thank you.
