00:00:06.870 - 00:00:42.710, Speaker A: Hello, everyone. Welcome to the intro to flow workshop. My name is Andrea. I'm a deverel on the flow team, and my goal today is just to give you a high level introduction to what flow is, why it exists, and why you should build on it. We're sponsoring a lot of prizes during the chainlink hackathon, and it's a great excuse to try out flow, build something cool on it. It's a general purpose blockchain, and we'll get into that in just a second. And worst case scenario, you learn something new.
00:00:42.710 - 00:01:22.820, Speaker A: And if you have any questions, I'm always around. I'll be monitoring the chat throughout, so if you have any questions, just leave it in the chat and I will try to answer as best I can with that. Hello, everyone. I will get started, so let's dive right into it. Let me first here. All right, so why does flow exist? That's a good question. The flow was not created, and mo, I'll get into that in just a second.
00:01:22.820 - 00:02:05.776, Speaker A: So delay is making this difficult to listen to, unless it's just on my end. Is there a delay for everyone else? Just want to make sure everything is good before we get into the meat of it. Can everyone hear me okay? Okay. Seems like the delay is only on one side. All right, so starting over. Hi, everyone. We're going to get into a flow, and I'll address all your questions in just a second.
00:02:05.776 - 00:03:11.640, Speaker A: So, Mo, I know you have a question, and we will get into it. So why does flow exist? Let's start with the basics, and let's start with a little bit of history. Flow was created by the team that originally created cryptokitties. Cryptokitties broke Ethereum back in 2017, 2018 when the game cryptokitties went viral, and Ethereum wasn't able to scale to that type of demand, even though it only had tens of thousands of users. And the team behind cryptokitties, they immediately saw potential for a mainstream use of blockchain technology, and they realized, hey, if we continue to build games on Ethereum or experiences on Ethereum, it's not going to scale very well. So the team went out and read hundreds of white papers for the better part of a year to look for a good solution or to look for a more scalable solution. And the two things they did not want to compromise on was scalability at the layer one.
00:03:11.640 - 00:04:21.340, Speaker A: Right? So not having to shard, not having to have a layer two, and I'll get into that. Why it's important. And the other compromise that they did not want to make is a better programming language that allowed for more complex and sophisticated on chain logic, right? It's hard enough to represent digital assets in a unique way, but if you want to add some rich logic around them and you want to create some rich on chain experiences, then you need to have a language that helps you along the way and doesn't have footguns. That makes it very easy to lose assets, duplicate assets, and other bad things that you don't want to have happen when the smart contracts execute on their own. So the team, after scouring lots of white papers, decided that at the time, there was no scalable solution. And that's how flow was born. Flow was born to be a scalable l one blockchain without a need to shard or to have an l two.
00:04:21.340 - 00:04:57.684, Speaker A: That's not to say that there can't be layer twos, but it doesn't need an L two to scale. And a new programming language called Cadence, which is inspired in syntax with languages that everyone's familiar with. For example, typescript, Swift. It borrows from a lot of different languages like go and Rust, and it really has at the center representing digital assets. And again, throughout this presentation, I'm going to go through everything, so don't worry. But I just wanted to give you a reason for why flow exists. It wasn't created by accident.
00:04:57.684 - 00:06:05.324, Speaker A: It was created because there was a need for a layer, one that was able to scale to millions and billions of users. Also, fun fact, the team behind flow and the team behind cryptocurrencies is also the team that invented the NFT. So the ERC 721 standard that everyone's using, well, that was created by the team that ended up creating flow. So with that little bit of history aside, let's get into flow, shall we? Again, I was saying that flow is the proven l one blockchain for consumer scale web three experiences and proven because when Flow launched a team building on flow, dapper Labs created NBA Topshot. And that got hundreds of thousands of users in a very short amount of time. And Flow was able to handle that seamlessly. And after NBA Topshot, lots of big brands and also indie devs have been building on flow.
00:06:05.324 - 00:06:31.928, Speaker A: And I'll get into some stats later. And it's been able to scale at the layer one. But why is flow interesting from a developer perspective? Right? Why should you build on flow? Well, first of all, we talked about it. It's mainstream, ready, but not just from a scalability standpoint. It's also mainstream ready. From an onboarding perspective. If you're a developer, you might enjoy building apps just because you want to build something new.
00:06:31.928 - 00:07:38.332, Speaker A: I do that all the time. But you may also enjoy building apps so that users can use those apps, right? You want to build something that ends up being used by hopefully as many people as possible. And it's important that the protocol support the use cases and allows you to build what you want to build. But it's also important that the protocol helps users experience your app, your web, three DAP, without unnecessary friction. Right? So easy user onboarding, best wallets possible, potentially no need for a wallet when you initially onboard, and also incredibly important user safety. The second thing that you want as a developer is a great developer experience, right? You want to have a language that's easy to write and easy to understand and easy to debug. You want to be able to update your smart contracts, you want to be able to reason in terms of what you're building.
00:07:38.332 - 00:08:28.948, Speaker A: So if you're representing digital assets, these are things that will transfer from one account to another, and you want to be able to program that directly in your code. And we'll see how flow makes that possible. And of course the scalability. So why and how is flow so massively scalable? Well, it's mainly thanks to a separation of concerns. It separates consensus from compute. And the way that it works is flow has several node types. And the meaty part of a transaction, which is the smart contract execution happens on the execution nodes, right? And the execution nodes can be big, beefy machines, whereas the consensus part of the transaction happens on the consensus nodes.
00:08:28.948 - 00:09:23.360, Speaker A: Right? And these can be a lot more, a lot more distributed and a lot lighter, which means based on the demand, based on the load on the network, these nodes can scale accordingly, but differently based on what's needed. There's other types of nodes, which I won't go too much into detail, but collection nodes aggregate the transactions that need to get processed, and then the verification nodes verify the work through some really cool cryptography called spocks. But I will leave that as an exercise to the reader. But the main takeaway here is flow was built to scale at the layer one. Right. And why is sharding and layer twos not ideal? Well, I'm not saying that they're bad. It's more that when you shard and when you have a layer two, you're introducing complexity.
00:09:23.360 - 00:09:59.392, Speaker A: You're splitting the state either vertically or horizontally. Right. And you have to deal with that either on the protocol side or on the developer side, and often on both. Sides. And that creates complexity, that creates risk, that creates potential for exploits. So if everything is in one shared state, it also makes it super easy to compose on top of one another, right, because everyone's building on the same layer. Now, the great thing about flow is it's also super sustainable.
00:09:59.392 - 00:11:05.996, Speaker A: Here's a comparison with other proof of stake protocols. Minting an NFT on flow requires less energy than a Google search, which means that you can transact and you can process activities and transfer value on flow without the cost of the environment. And I think this is very important, especially nowadays and especially given where we're heading in terms of climate change. So definitely don't feel guilty if you're creating a lot of transactions on flow, it's not only built to handle them, but it doesn't come at the cost of the environment when it comes to customer friendly onboarding. Now here are a couple wallets that we have on flow, like dapper, blockdo and lilico. Dapper and blockdo have email registration, so it's super easy and super seamless. Lilico is your typical metamask like wallet that you can install as a chrome extension.
00:11:05.996 - 00:11:47.790, Speaker A: We have other wallets, we have newfi, we have flipper. These are just a couple examples. And the best thing is that on flow, you may not even need a wallet. We've recently introduced something called walletless onboarding and hybrid custody. Walletless onboarding allows an app to onboard a user with social logins or email or whatever you want, and completely abstract away the wallet in the back end. And that's nothing super new. But what's really interesting with flow is that flow has had smart accounts and account abstractions since day one.
00:11:47.790 - 00:12:59.492, Speaker A: And what smart accounts allow you to do is once you have the wallet abstracted and a custodial wallet in the back end, when a user wants to link their noncustodial wallet, you can delegate ownership of the abstracted wallet directly to the noncustodial wallet. So we have something called account linking, and this is what we call hybrid custody. To summarize, a user can onboard to your experience without even realizing that they're using a web three experience. And when they're ready and when they want, they can decide to connect their web three wallet and they will link their wallet to your app's wallet that was created for them, and they will be able to interact with assets on that wallet seamlessly without having to transfer them back and forth. And that's super powerful when it comes again to the onboarding side of things, right? We want to make things as simple and as seamless as possible. So let's see, there's a couple questions. So Mo asks, does update smart contracts equals mutable smart contracts? Yes.
00:12:59.492 - 00:13:50.960, Speaker A: So flow enables updating smart contracts. There are some limitations on what you can update, but you can update a smart contract that's already been deployed. And in your opinion, is building on flow easier than ETH? I think so, mainly due to two things which I'll get into later. The first thing is the programming language. Cadence is a lot more intuitive, meaning that you can reason about assets unless you're copying and pasting code from things like Openzeppelin. Solidity doesn't have a lot of guardrails when it comes to ensuring that assets are not duplicated or lost, whereas cadence does. And the second thing is resource orientation.
00:13:50.960 - 00:14:42.324, Speaker A: Flow is resource oriented. So the assets and the things that are created on flow are resources, and they're special objects that cannot be lost and cannot be duplicated. And again, we're going to get into this in just a second. Going back to frictionless onboarding, some of you may have heard that doodles has built doodles two on flow, and here's poopy explaining why they chose flow for doodles two. Right? And it's being able to create a frictionless on chain experience. And their initial launch a month or two ago went super smoothly. Someone also tweeted, just created a wallet on flow using Gmail in 30 seconds, and purchased a doodles to wearable in under two minutes from start to finish.
00:14:42.324 - 00:15:43.448, Speaker A: Right? That's the type of onboarding experience, regardless of whether your app is an NFT project, regardless of whether it's something more sophisticated or more complex in terms of on chain logic, like know, a staking platform or a decentralized logging platform, the onboarding experience is just super smooth, and you wouldn't be alone if you decide to build on flow. So not only do we have some of the world's best brands on flow, but we have 11,000 plus devs building on flow. Right now, it's the number two chain in NFT volume. We have 20 million plus user accounts and over 360,000,000 transactions. So a lot of activities going on, a lot of creativity, a lot of just bustling energy. And what I love about flow is also just the community. It is a very friendly, approachable, and collaborative community.
00:15:43.448 - 00:16:34.852, Speaker A: So if you're building something, you will feel like you're part of just a group of friends, and everyone will be there to help you out. And most of the activity and most of the interesting conversations happens on Discord. I'll link our Discord later, but definitely if you are building for the hackathon, if you're building something that you're looking to go to mainnet with, definitely join our discord so that we can chat. We also recently had Star wars join the flow universe thanks to cryptoys who are launching a collection in collaboration with Star wars. So that's pretty recent and awesome news. And now I wanted to dedicate some time on the building on flow. Like why? Going to a bit more into the meat so I won't bore anyone with the very basics.
00:16:34.852 - 00:17:35.468, Speaker A: The only reason I want to set this context is I think we really need to kind of always stay true to what we're trying to achieve with Web three, right? The great thing about a blockchain is that it's an open shared database and even more, a shared state that anyone can build on. And what this enables is composability, right? This composability, I think is the most exciting part of building on a blockchain. Why is it exciting? Because I built something. Someone can come build something on top of that thing. No permissions required, no me having to create a dedicated API, or even have to maintain an API. Anything that is on chain state and logic can be accessed and interacted with by someone else. And this is especially the case on flow, because again, there's a single shared state.
00:17:35.468 - 00:18:54.064, Speaker A: It's all on the layer one, meaning it's all super composable. So this is, I think, what everyone should be keeping in mind and what I think is the most exciting part of the web three space in general. But going back to Mo's question about solidity, a lot of the use cases for web three are representing digital assets of value, right? Whatever those may be. It could be a piece of art, it could be a PFP, it could be a link to something that lives in the real world. It could be anything, right? A resource is something that we're trying to represent, could be a token, but we're trying to represent that is unique in some way. And given that it's unique in some way, and given that it cannot be interchanged or at least cannot be lost or duplicated, there needs to be something in the way that we program that enforces this at the most primitive level. Otherwise we're opening ourselves up to footguns, right? On Ethereum, for example, when you mint an NFD, you're just updating a record on an object saying this address has this thing, right? It's basically a map.
00:18:54.064 - 00:19:35.748, Speaker A: So if someone accesses this map, they have the complete state of who owns what from that contract, and all of this state is stored on the smart contract. We'll see how this differs on flow, but it's completely different. It's resource oriented. Everything that you mint that you create is stored on your account. This is so much more intuitive and also safer, because when you mint an NFT, it's an object that gets literally transferred from the smart contract to your account. So web three needs a better language, again, that avoids digital assets from being duplicated or lost, and it needs to be enforced at the language level. Everyone's account should store what they rightfully own.
00:19:35.748 - 00:20:31.460, Speaker A: If I mint something, it should be on my account and I should have full control of it, period. Right? I shouldn't trust a contract to basically have a ledger entry that I own something. I want to have that thing in my account, and it must be decentralized. So again, a centralized smart contract ledger, like on Ethereum, is a single point of failure because it basically stores the state of what everyone owns from that smart contract. Then I would love to have some additional guardrails, like not have any integral overflow issues, having a strong static type system, being able to upgrade deployed code, which we talked about earlier, and of course should be open source. And it shouldn't be a completely different thing that I'm not used to. It should have a familiar syntax, it should feel like something I already know, and Cadence is super familiar.
00:20:31.460 - 00:21:24.752, Speaker A: We will talk about cadence, and I'll show you some snippets so that you can kind of get a feel for it. But suffice to say that cadence was designed specifically for the reasons I just outlined, right? It was designed for web three. We're going to look at the resource oriented paradigm and why that's so important. Ethereum, for example, follows a ledger based model where a state of the smart contract is stored in a map, whereas flow uses a resource oriented model where things that you create, objects that you create, whether they be NFTs or tokens, are stored in your account and it addresses everything else. So it's decentralized. There's no integral overflow issues, there's a strong static type system, it's open source, anyone can compose on top of existing smart contracts. And the syntax is super familiar.
00:21:24.752 - 00:22:27.284, Speaker A: As I mentioned, it's similar to typescript, Swift, and Kotlin, which pretty much covers the majority of developers around the world. Here's a little glimpse of a cadence piece of cadence code. So let's say we have a contract called basic NFT, right? We made basic NFt up. This is not a standard or anything. It could be called anything, right? And again, this is a very simplified version of the contract, but it's important to show you the outlined red areas which are the key features of cadence. The first one is, you see that we're declaring a resource that we call NFT, right? We have decided to create a resource which again is a special object in cadence that cannot be lost or accidentally duplicated. And you see that when we create an NFT in the function that we create further down, we can't just say let or VAR a equals NFT or new NFT.
00:22:27.284 - 00:23:22.110, Speaker A: We are using an explicit keyword called create. More than that, rather than saying equals, we are using an arrow which we call the move operator, right? Which is when you create a resource, it has to go somewhere. Otherwise it has to go somewhere within the transaction. Otherwise the transaction fails, right? You can't create something and not do something with that thing, otherwise the whole transaction will fail. So that is the move operator again. So here in the create NFT function, we are creating an NFT and moving it to whoever calls the create NFT function, in this case, in the init function of the contract. When we first deploy this contract, the init function will be called, and you'll see that we are saving and we are creating an NFT and saving it to the account.
00:23:22.110 - 00:24:16.060, Speaker A: This is super important. We are saving something to the account, and this could be any account, right? Not just the smart contract account. Again, this is a very simplified version of an NFT contract. I'll share with you some resources later that you can get into a bit more detail. Don't worry too much about this code. Specifically, what I want you to focus on is the concept of a resource and the concept that resources are created explicitly. They are moved somewhere explicitly, and they are stored somewhere explicitly, which is a big mental shift from people that are used to the Ethereum way of doing things, right? So what is a resource? Again, we kind of talked about it already, but just to recap, it is an object, a rich object that can have attributes, functions.
00:24:16.060 - 00:25:20.272, Speaker A: It can have anything you want, and it can only exist in one place at one time period. It is unique. It has a unique identifier that is unique. It cannot be copied or lost accidentally, and it has to be explicitly destroyed. This means it's impossible to duplicate things or to lose things in a transaction, because the whole transaction would fail. And this means that resources are perfect for digital assets because they represent exactly the type of characteristics that we need when creating or representing digital assets of value, like NFTs for to. I was reading a thread, a Twitter thread the other day from a great flow dev called Jacob Tucker, and he had a thread which I've linked to in the bottom, where he goes into detail about doodles most recent launch and how cadence enables it.
00:25:20.272 - 00:26:52.610, Speaker A: And I think he really captures why it's so important and why it's so much more intuitive. So again, cadence is a resource oriented programming language, right? That means that in code, assets are represented as actual objects that get moved, stored, and destroyed, right? And in this picture, in this very professionally made picture, you can see exactly this in action. So I have an NFT collection. I have two NFDs, and if I want to transfer NFT two or NFT one from the guy on the left to the guy on the right, in my mind, I am literally transferring my NFT to that other person's collection. That's not the case in other protocols. In other protocols, especially Ethereum, you're just updating who has what in the smart contract state, whereas here it's literally being moved from my collection to the other user's collection. And how is this possible? In cadence, right? We kind of looked at it in the previous cadence snippet, but here's a very simplified version of this in action, right? Which is, let's say this imaginary doodles contract, which is already on mainnet, by the way, and you can check out, but let's say we simplify and distill it to its main critical, or we just distill it down to its most basic form.
00:26:52.610 - 00:28:30.876, Speaker A: We have an NFT resource that represents a doodle, right? And we create a collection which is another resource that owns our NFTs. So we have a collection in our account that owns all of our doodle NFTs, right? And the collection is responsible for moving and transferring NFTs from within the collection. Now, wouldn't it be cool if not only can an NFT live within a collection and be its own resource, but the great thing about flow is, given that resources are dynamic and complex objects, they can contain other resources. So you can create dynamic NFDs, you can create attachments, like in the case of doodle wearables, right? You can have a doodle NFT that can have a wearable collection, and you can add wearables to your doodle. And it's all kind of like a container, like a resource within a resource within a resource, meaning that every single part of that chain, of that resource chain has to abide by the constraints that a resource has. They have to be unique, they can't be lost, they can't be accidentally duplicated, and they're all unique in some way. This is how we would picture it.
00:28:30.876 - 00:29:33.708, Speaker A: So how would it look like if we wanted to transfer? Right? So here in our doodles contract, we have a wearables function that equips a wearable. And here, in the case of this specific example, the wearables are a variable, right? It's like an object map, but it could also be a resource itself, right, that contains other wearables, or it could be a collection. But you see here that the map of wearables contains another NFT, which, for example, would be from the wearable contract. So we import wearable. Again, the code here is not that important. It's just to show you the composability potential of cadence and how it makes you reason about everything in a very intuitive way. So in this case, we call the equip function, and we can move a wearable that we pass into the equip function and store it in our own wearables.
00:29:33.708 - 00:30:47.652, Speaker A: Now, the big difference here is that any wearable that we have and any doodles that we own are stored on our accounts, right? And we have full control of them. And that's a big difference from a lot of different protocols and a lot of different programming languages that were kind of adapted to work with web three, but weren't purpose built for web three. And this is the biggest difference with cadence. It was specifically designed for smart contracts and addresses all of the pain points that the team faced building apps like cryptokitties, like cheese wizards, using solidity on Ethereum. So I highly recommend you check it out and try it. The other thing that I kind of mentioned, but I want to just recap as well, is flow's unique account model. So not only do accounts store resources and contracts and pretty much anything you want to store in an account, but accounts can have multiple keys, right? And this enables what I was talking about earlier around smart accounts and account abstraction.
00:30:47.652 - 00:32:34.220, Speaker A: You can have an account with multiple keys. Each key can have a different weight, meaning that you can have automatic multi sig, you can use those multiple keys, you can revoke keys, you can add keys. Accounts are separated from keys on flow, and it just makes it so much more flexible to create experiences like hybrid custody that I was talking about earlier, where one app creates a custodial wallet for a newly onboarded user, right? So you log in with your email, the app in the background creates a wallet for you. You use the app, and then as you get more into the web three space and you realize, hey, I should have my own noncustodial wallet. You create your noncustodial wallet and you can link your account to the custodial app that the app has created for you, and you get full ownership of it, right? The app delegates ownership of that account to your main wallet, and you can seamlessly interact with the assets contained within it without needing to manually transfer the assets over. These are things that probably the user won't even realize, but it's these primitives that allow for a much more scalable and a lot more intuitive way to reason about ownership and the flexibility of passing control of that ownership at various phases of the onboarding journey. And again, onboarding is everything, right? Users need to, ideally, in my mind, feel that they can try to use a service without even realizing that they're using a web three experience until they want to.
00:32:34.220 - 00:33:14.180, Speaker A: And that's the cool thing about hybrid custody, about walletless onboarding and how that's enabled through Flow's unique account model. So going back to a little bit of the basics, flow networks are very much like you're used to. We have an emulator that you can run locally and that is running solely on your computer. We have a testnet that is live and is an exact copy of Mainnet. And this is where you would deploy your contracts and try to go through the full flow. You would use like real flow wallets, not the dev wallet on the emulator. And then when you're ready, you would deploy to Mainnet.
00:33:14.180 - 00:34:18.700, Speaker A: So I think for the purpose of this hackathon, anything built on testnet is valid. It's actually recommended to build on Testnet. And then when you are ready and you feel like you want to continue because you want to deploy that app to the world, that's when you want to go to Mainnet. I'm sure that you all already know what that implies, and if you want to join the discord and need any help, we are there to help you. So another cool thing about flow is that there's two different ways to interact with flow. There's transactions which everyone kind of already knows, right? A transaction mutates data on chain, and usually those transactions cost some flow, right? Currently, transaction costs are so low on flow that wallets subsidize transaction costs. So for users, it's effectively free to transact on flow.
00:34:18.700 - 00:35:01.724, Speaker A: And this enables some really cool experiences for example, there's a proof of attendance platform on flow that has more than 4.5 million NFTs minted and six or 7000 events created. And all of that was completely free for the users, right? 4.5 million NFTs minted for free. No absurd gas fees or anything. But that's if you want to mutate the chain, if you just want to read state from the chain, we have something called scripts, which is essentially like a get request to the chain and you can query data and not have to be authenticated. It's basically just a read only access.
00:35:01.724 - 00:35:51.870, Speaker A: So you can pull for events, you can query a smart contract and get any publicly exposed state. That's the difference between transactions and scripts. So usually apps on flow, they have transactions and scripts. And the flow client library, which is what you would use to create your app and interface with flow, will simplify running transactions and running scripts. To run a transaction, a user would need to authenticate and connect their wallet, or you would connect their custodial wallet. For them to run a script, you don't need to be authenticated. So if you want to run a script and get the total number of NFDs, for example in an account, you can just run a script and get that when the user visits the page.
00:35:51.870 - 00:36:42.092, Speaker A: That's the main difference. Now, if you're at all curious about trying out flow and trying out cadence, I think a great way to start is going to play flow. This is the flow playground, and there's a nice button called click here to start a tutorial. I think we've updated the playground. It's a lot more performant now, but there's still a getting started section where you can follow a lot of different tutorials like the hello world, simple nft all the way to marketplaces and voting. And that will give you really good introduction to flow and cadence and how to think in cadence. Which once you do, once you start thinking in cadence, it will be so intuitive that you will never want to go back to anything else.
00:36:42.092 - 00:37:37.180, Speaker A: And most of the devs that I've talked to in the flow community, whenever I tell them, hey, what's your favorite thing about flow? The biggest and most common response is always cadence, cadence, cadence, cadence. So definitely check it out and I think you're going to love it. Now, not only is cadence awesome, but if you're building on flow and need the tools that we have at our disposal make or break our development experience. And on flow, the flow CLI is your one stop shop for building on flow. So I would recommend. Once you play around with Cadence and the flow playground and you want to start building your own daP, that's when you want to install the flow CLI. It has some scaffolding commands that you can use to instantly scaffold the project and get it running on the emulator in probably one or two commands.
00:37:37.180 - 00:38:30.108, Speaker A: And you can also create mainnet accounts, testnet accounts. It'll also fund your testnet account and mainnet account just enough so you can deploy contracts. It really is the one stop shop and you can do all sorts of things like running scripts, transactions, deploying contracts, all that good stuff. And then if you're using vs code, we have the cadence vs code extension which provides cadence specific syntax highlighting. It can run the emulator as well and just basically has the best possible flow support that you can get. So definitely recommend installing the flow CLI and the Vs code extension once you want to get building your app, aside from the playground, a great way to start and is no surprise is the dev portal. So you can go to dev or developers flow.com
00:38:30.108 - 00:39:13.900, Speaker A: and kind of just follow the flow and click on some tutorials to get started. We also are experimenting with a new AI feature that has learned from the docs portal and from a lot of different flow related resources. And you can ask things directly to the AI, which we're getting more and more accustomed to these days. So hopefully you'll find that really useful again. As we all know, AIs tend to hallucinate things and may not provide always super accurate information. But we are testing this and yeah, feel free to try it out. I think it definitely is useful in some cases.
00:39:13.900 - 00:39:56.660, Speaker A: So definitely check out the dev portal and what's really great about flow, as I mentioned earlier, is also the broader community. We have a lot of course creators and course providers that have created flow courses. The most, I would say flow native one is the Emerald Academy, created by Emerald Dao. Emerald Dao is a developer focused dao on flow. So if you go to Academy ecdow.org, there's a ton of getting started resources such as cadence by example. There's a whole onboarding flow to cadence that is a lot more approachable from zero to hero.
00:39:56.660 - 00:40:32.528, Speaker A: So definitely check that out as well. And it has achievements. So 100% recommend academy. We also partnered with Learn web three to create a flow course. Learn web three is they have courses for various chains and they have worked really closely with us to create a really nice course where you build three apps by the time you're done. So definitely check out learn web three as well. And from an ecosystem perspective, Flowverse is probably the main place where you can get an idea of what's out there on flow.
00:40:32.528 - 00:41:24.870, Speaker A: I know a lot of builders probably ask, hey, what should I build next? What should I build during the hackathon? Check out floverse, see what's there, see what the community is like, see where maybe some opportunity is, and build something there. And the team behind Floververse is awesome and can also help you get started. And then, as I mentioned, Emerald City Dao is a developer focused dao where you can find like minded devs building on flow. So I would say after the flow discord, the next best place to be as a flow developer is in that discord. So the Emerald City discord. So definitely go there as well. Now I will stop here so we have some time to answer questions.
00:41:24.870 - 00:42:03.744, Speaker A: If you want to follow flow on Twitter, that's the handle flow underscore blockchain. If you want to join our discord, it's discord GG slash flow. If you want to learn more about cadence, you can definitely check out the playground and definitely check out the various resources I link to. But don't miss the cadence workshop that Josh, a smart contract engineer at flow, is going to run for the chain link hackathon tomorrow at 08:00 a.m.. PT. It's also going to be recorded, so don't worry if you can't make it live. But definitely check it out.
00:42:03.744 - 00:42:39.628, Speaker A: Josh is one of the OGs behind cadence and definitely has a lot of knowledge to share, so don't miss that. And if you have any questions or want to reach out to me, my Twitter handle is below and it's also my discord handle. Once you're in the flow discord, or you can also find me through Andrea find. I think that's it. So I'm going to take some time to answer some questions. Let me bring up the questions a bit closer so that I'm not looking too far. All right.
00:42:39.628 - 00:43:26.792, Speaker A: So Evan says, looks a lot like rust. Well, it definitely was inspired by linear types from rust. The concept of resources and how I see cadence is it takes inspiration from a lot of existing languages so that it's not reinventing the wheel and it's not completely unapproachable, but it's packaging them up in a way that's specifically made for smart contracts. Rust was not specifically built for smart contracts. Right. Whereas cadence is. And I think that's the biggest advantage and the biggest quality of life improvement that you will have, as a developer writing on chain logic on flow.
00:43:26.792 - 00:45:00.220, Speaker A: And now I completely understand that if you say, hey, look, I'm just here to create, to use an existing contract, basically copy and paste it, and that's it, then probably you won't benefit from all of these improvements. But if you're someone who's looking to create something new that the world has not seen before, trying to really explore what's possible in terms of on chain logic, that's when you want to have a language that can support that, right? Where you don't have to worry about what you're writing, you don't have to worry too much about, oh wait, I have to be super careful about writing state, because if I accidentally don't assign something, it's lost. You don't have to worry about that in cadence. And I think that's a really nice benefit to have when you're especially exploring uncharted territory. So what is the current bridge support from ETH to flow? How feasible is it to migrate NFTs and ERC twenty s to and from chains? So there are some bridges that are trying something. I think fundamentally flow is not EVM compatible, right. For the reasons outlined, it's a completely different mental shift in how we think about assets on chain, right? They're resources, they're not a ledger entry on the smart contract.
00:45:00.220 - 00:45:33.910, Speaker A: Any bridge that is available will need to kind of adapt that and act as that escrow. So there's no native way to transfer an asset from Ethereum to flow, unless you're using a bridge now. Not 100%. I'm sure that there's bridges being worked on. I talked to a team who's working on a cross chain bridge, including flow. But again, it will never be a true transfer. Right.
00:45:33.910 - 00:46:16.036, Speaker A: There are of course swaps. So we have blocktoswap, we have increment. I think if you check out flowverse and go to the defi section, there's a bunch of different alternatives. So we do have swap services and they work like with any other cross chain swap service. Now, does flow have any internal mechanisms for preventing front running? I'm not too familiar with. I know what front running is. I don't know if there's specific things that flow has that prevents that.
00:46:16.036 - 00:47:11.760, Speaker A: I would recommend asking the flow discord to some of the experts there. Jcode asks why you don't use solidity. That's exactly the point that we've been talking about. That is because solidity is basically when the team created cryptokitties and tried to create a more complex game called Cheese Wizards back in 2018 on Ethereum, they had a lot of negative experiences. They really hit the boundaries of, okay, why can't the language do this? Why can't the language do that? Why can't we update contracts? Why are there all these foot guns? And so that's why Cadence was born. It was a choice to create a new language. It's definitely not a choice that was taken lightly.
00:47:11.760 - 00:47:41.480, Speaker A: Right. It's always an important choice to say, hey, let's create a new language. Because of course, developers are used to solidity. It's easy to port things from one place to another. So it should give you an idea of just how bad of an experience the team had using solidity, that they decided to create a new language to go with it. If you talk to developers on flow, they will tell you the same thing. They would not want to go back to solidity once they've tried cadence.
00:47:41.480 - 00:49:05.080, Speaker A: But again, there are words, not mine. So where is the private key stored? When an account is created on flow, the private key is stored nowhere, right? It's outputted when you create an account, and you are responsible for managing that. So if you are a back end and you are managing the account creation on behalf of users because you want to create a custodial solution, then when you create an account, you will receive the private key and you will have to store that in a safe place, right? If you're a user and you're using a wallet, the wallet will do that for you, and it will expose the key temporarily, but then you will be responsible for keeping it. So there's nothing inherently different. The big difference on flow is you can have more than one key for that account. You can add keys, you can revoke keys, you can create keys with different weights, and that's what's super powerful, right? So you can have an account that's shared across five keys, each key can have a different weight, and when there's a transaction, you can co sign through all those keys and each signature will have a different weight for that transaction. And that also unlocks some really flexible account operations that wouldn't be possible with a single account key pair.
00:49:05.080 - 00:50:10.350, Speaker A: And Zumba asks, actually, I'm a beginner and using solidity for smart contracts, and now I am confused. Should I switch to cadence? So again, cadence was built for flow, right? You can't use cadence, at least not at the moment, to build on Ethereum, because of just how different cadence is to how Ethereum and solidity operate. So if you want to build on flow, which is a completely different layer, one blockchain, then you would use cadence. If you want to build on Ethereum or any other EVM chain, then you would use solidity or any other language that that chain supports. So yeah, for now, I think the simpler answer is if you want to build on flow, definitely build on cadence and otherwise use the language that is supported from that other protocol. Domain specific language design is the safest bet, especially in critical systems like finance. Please pin this question.
00:50:10.350 - 00:50:48.890, Speaker A: So evan mentions domain specific language design is the safest bet, especially in critical systems like finance. I totally agree. So cadence is a domain specific language purpose built for smart contracts. And you as a developer creating smart contracts will benefit from this in ways that you may not even realize if you are new to the web. Three space. But that's the best type of benefit, right? A benefit that you don't even realize just how good it is, and I hope that everyone will be able to experience it. So does cadence support ownership like rust? Yes.
00:50:48.890 - 00:51:53.932, Speaker A: And hi, tell me please, what is special about flow? Why should we use flow instead of Ethereum or polygon? Well, you are 51 minutes late to the whole answer to that question. I recommend you watch the whole intro to flow, which has been going on for the last 50 minutes. But it's a great excuse to summarize and recap what we talked about. So Tldr why you should use flow it's scalable at the layer one, it's not an L, two, it's not a sharded blockchain, it's a scalable layer one blockchain, meaning the state is shared and available to all and anyone can build on top of it. So that's number one. So scalability number two is best developer experience and better developer experience thanks to smart accounts, account abstraction, a better programming language called cadence, and super low transaction fees. And basically you are not limited by the chain.
00:51:53.932 - 00:52:57.840, Speaker A: You can build whatever you want on chain and cadence will help you build it in a safe way. And thirdly, user onboarding. User onboarding is super smooth on flow thanks to smart accounts, which enable things like walletless onboarding and hybrid custody and account linking. So apps can provide social logins or email login to their web three apps and then eventually connect a user's noncustodial wallet whenever they feel ready. And at the end of the day, onboarding is everything, right? If we want to really be and have mainstream adoption, we need to create experiences that don't create friction. If you think about it the most counterintuitive thing for someone who's not familiar with web three is seeing a massive connect wallet button on any other website. Would you ever think of connecting a wallet to something that you have never tried yet? No.
00:52:57.840 - 00:53:42.620, Speaker A: Especially if you don't know what a wallet is. Right. And you're coming from the web two space. So wouldn't it be awesome if on flow or using a flow dapp, you could log in with your email, log in with Google, log in with Facebook, log in with whatever you want as an app developer, and when the user is ready, and only if and when they are ready, they can connect their wallet. And you don't have to sacrifice ownership. You have the best of both worlds. And that's possible on flow thanks to the smart accounts and the fact that we have this account delegation possibility thanks to the multiple keys on accounts.
00:53:42.620 - 00:54:02.180, Speaker A: So glad I was able to answer that. I see a nice. Thanks. Great. But definitely check out the talk if you had just come in. All right. And even last question, what does the Defi landscape look like for flow currently? I would say right now the Defi landscape is emergent.
00:54:02.180 - 00:54:51.588, Speaker A: Right. There's some really great developers building DeFi apps. For example, you can check out increment Phi, but there's a ton of opportunity. So if you want to build the next uniswap, if you want to build other Defi applications that you don't see on flow, the Chainlink hackathon is a great opportunity. And we are also hosting our own hackathons throughout the year, which will give you some other opportunities to build and potentially win prizes. For example, in the last hackathon that we held in February, a developer team created a staking powered fundraising platform on flow called Vellis. It was a super interesting experiment.
00:54:51.588 - 00:55:24.900, Speaker A: Basically, it's like a Kickstarter, right? And as a project, I create a Kickstarter, I create a vellis fundraising, like a proposal. And people can, instead of giving me funds, they stake their funds and delegate the staking rewards to my fundraising effort. And they can unstake whenever they want. Right. So you're basically donating your stake. You're basically donating your staking rewards. Sorry.
00:55:24.900 - 00:56:27.190, Speaker A: And the amount that I stake, the amount of time that I stake is directly proportional to how much of the project's token that I'm supporting. I get back. So I think it's a really cool model because you don't have to give up anything, and it leverages the aspects of a decentralized web three protocol, which is I have my tokens, but I can delegate the staking of those tokens to another entity, and the staking rewards can be diverted to whichever project I want. And, yeah, it's a great example of just using flow in an interesting and creative. So TLDR, to your question, it's an emergent area and definitely lots of room for creativity and building. So if you're a defi expert, definitely check it out and try to build something. I'd love to see what you can come up with.
00:56:27.190 - 00:57:02.370, Speaker A: All right, I think that's the last of the questions. I want to thank all of you for coming to this live workshop. I want to say hi to everyone who's watching it async and potentially in the future. Hope the future is okay. I really hope that. And if again, don't miss tomorrow the cadence workshop with Josh, which will also be on the same channel and will be recorded, and you can learn all about cadence in a little bit more technical detail. So with that, I will say hi and goodbye to everyone.
00:57:02.370 - 00:57:33.932, Speaker A: OIC Rotom has asked one last question, which is, can we use Chainlink and flow? Currently, not so much because we do have a flow price feed on Chainlink. But if you're building a flow dap. Yeah, there's not much integration with Chainlink that you can do at the moment. But to qualify for the hackathon prizes, at least the flow hackathon prizes, you don't need to integrate with Chainlink to be eligible. So don't worry about that. All right, thank you, everyone. Thank you, Evan, for the great questions.
00:57:33.932 - 00:58:11.030, Speaker A: Thank you, the team study. Thank you, Shivam Zumba and everyone else who jcode everyone else who's been asking questions and I think, oh, I see, I missed. Personal freedom's question is flows design similar to Avalanche's design? I think avalanche uses a subnet type of architecture, whereas flow is just a single net. It's a big single shared state. So there's no subnets, there's just different node types. And that's what makes it different. So sorry I missed your question earlier, but yeah, hopefully that answers the question.
00:58:11.030 - 00:58:34.930, Speaker A: Thank you to everyone and have a great hackathon. Have a great building experience. And if you have any questions, again, the flow blockchain and discord G slash flow, come join us. Come say hi and definitely reach out on Twitter if you have any questions. Thanks, everyone. You can submit to projects in the hackathon. Yes.
00:58:34.930 - 00:58:38.750, Speaker A: All right.
