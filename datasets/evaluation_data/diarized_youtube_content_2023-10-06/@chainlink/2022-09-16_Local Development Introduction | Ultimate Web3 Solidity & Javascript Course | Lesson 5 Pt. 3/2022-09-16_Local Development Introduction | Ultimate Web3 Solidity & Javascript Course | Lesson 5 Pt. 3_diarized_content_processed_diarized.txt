00:00:10.890 - 00:00:34.470, Speaker A: All right, this is fantastic. At this point you should be set up with visual studio code node js and git. And I'm going to be working out of a folder called Hardhat freecodecamp. At this point you should have node version, git version, and if you're using windows this should say WSL or Ubuntu or something like that.
00:00:34.540 - 00:00:35.814, Speaker B: And if you have all that, that.
00:00:35.852 - 00:01:09.010, Speaker A: Means we're ready to go. Now a quick note, something that you'll see me do a lot and you can do this as well. Oftentimes when my terminal gets really really big or there's a ton of commands in here gets a little bit overwhelming for me. So one thing that you can do is you can type clear and hit enter to clear it. Or what you can do is you can hit command k if you're on a Mac or control K if you're on a Linux or a windows. And it's one of my favorite keyboard shortcuts that I use all the time. Additionally, the trash can and the X here are very different.
00:01:09.010 - 00:01:35.082, Speaker A: If I go do a couple of enters here and we're down here, if I hit the trash can and then pull my terminal back up by doing the toggle or by doing terminal new terminal, you'll see all those lines are still here. But if I hit the trash can and then pull the terminal back up, you'll see it actually refreshes. Mine has a special command that prints stuff out. Trashing your terminal is basically deleting whatever is running in it and the x.
00:01:35.136 - 00:01:37.750, Speaker B: Is just hiding it and it's hitting.
00:01:37.830 - 00:02:01.858, Speaker A: Ctrl, tilde or toggling our terminal or whatever command it is on your environment. That's equivalent to hitting the hide, not the trash. So if we want to remove and start a terminal over, we hit the trash can and then we pull it back up. All right, so now we're going to start working with ethers and we're going to start learning to code our transactions and our contract deployments and everything programmatically at a relatively low level.
00:02:01.944 - 00:02:02.786, Speaker B: And we're going to learn how to.
00:02:02.808 - 00:02:42.694, Speaker A: Deploy and interact with our contracts using the Ethersjs package. Now to get started I'm going to recommend you create a folder where you're going to put all of your projects in it. I'm going to create a new directory called HHCC, which stands for Hardhat Freecodecamp. Once we run that command we can CD into HHFCC and this is where we'll create all of our projects for this course moving forward so that we have them all in one place now to get started. Whenever you create a new project, you always want to create a new folder. So to create a new folder we're going to do Mkdir and we're going to call this ethers simple storage.
00:02:42.842 - 00:02:47.646, Speaker B: Like that. And now if you type ls, you'll.
00:02:47.678 - 00:03:16.406, Speaker A: See that there is one folder named Ethers simple storage. Ls is how you list all the contents of your folder. You might have a lot of other folders in here. I only have the one since I created this new folder for this. Now what you can do, you can type code ethers simple and then if you hit tab it should autocomplete for you. And if you hit enter visual studio code should open up a new visual.
00:03:16.438 - 00:03:22.326, Speaker B: Studio code for you that is inside of ether simple storage.
00:03:22.438 - 00:03:32.974, Speaker A: If you open up your terminal now, your home directory for this workspace is going to be ether simple storage, as this is what pops up. If that doesn't work for you, we can also do is you can hit.
00:03:33.012 - 00:03:37.426, Speaker B: File, open folder and then open the.
00:03:37.448 - 00:03:39.506, Speaker A: Folder that you just created, or that.
00:03:39.528 - 00:03:41.986, Speaker B: You want to open this again will.
00:03:42.008 - 00:03:48.646, Speaker A: Open up vs code. And if we open up our terminal we see we're inside of ether simple storage. This is so powerful because as we.
00:03:48.668 - 00:03:51.894, Speaker B: Create files, we'll be able to see.
00:03:51.932 - 00:04:28.226, Speaker A: Those files in our explorer here. This button here stands for the Explorer. If we click it, we can see the different files in here. And I'm going to go ahead and actually delete this file text because we're not actually going to use that now. It's this part of the course where we're actually going to start jumping into some Javascript. Since this course isn't a JavaScript course, if you're unfamiliar with JavaScript, it might be a little bit tricky. If you want to come into this with a better understanding of JavaScript and node JS there is a freecodecamp YouTube video teaching node js for beginners, and a link to this will be in the GitHub repo associated with this course.
00:04:28.226 - 00:05:10.350, Speaker A: There's also a JavaScript freecodecamp video that I'm also going to put in the description for this course. Keep in mind that JavaScript and Node js are slightly different, and we are going to go over some of the differences as we code along here. But for the most part, learning one means you've learnt the majority of the other. So if you want to pause and go through these videos before continuing here, please feel free to do so. You don't have to. You can absolutely continue on with the course as is, and if you get confused or stuck on some JavaScript piece, feel free to pause, google it and come back. But just to reiterate, you can check out the JavaScript programming full course and also the node js full course, as those are both going to help you.
00:05:10.350 - 00:05:50.314, Speaker A: Like I was saying before, node JS is a JavaScript runtime, so it's not exactly JavaScript, but we're going to write our code in JavaScript, and if that's confusing, just don't worry about it right now. And as we go through this course, I'll show you where the differences are. But basically you can think of node JS and JavaScript kind of being the same thing. The big thing about node JS is it allows us to write JavaScript code in the back end as opposed to running JavaScript on the front end. JavaScript is made to be a browser run language, like running inside of Chrome, brave, Firefox, et cetera. Node JS allows it to become a.
00:05:50.352 - 00:05:52.906, Speaker B: Scripting language, a backend language, which is.
00:05:52.928 - 00:06:41.350, Speaker A: Why the syntax between the front end JavaScript and the backend JavaScript or the Node JS JavaScript are going to be a little bit different. Additionally, as we go along in this code, if you're familiar with typescript, all of our code is going to come with a typescript edition. TypeScript is what's known as a statically typed version of JavaScript, and it'll be this one. It'll be typescript, not typescript edition. I'll go ahead and fix that and remove this one. To make it clear, typescript is a type safe version of JavaScript, which if that's confusing, don't worry too much about that, but we are going to do all of our programming in JavaScript, and then if the code is different enough, I'll show you how to do it in typescript as well. However, for most of them we're not going to show you the typescript editions because it's going to be really similar, but you can always refer back to the GitHub repository to see all the code for the typescript.
00:06:41.350 - 00:07:25.126, Speaker A: Now, if you're new to this space, I actually do recommend you go ahead and start with JavaScript and learn how to do typescript later on. Typescript actually catches bugs early on, making it a lot easier to code your projects in the long run. However, it does take a lot of extra typing, and it can be a little bit frustrating learning how types work for beginners. JavaScript is a little bit more loose as a language and lets us kind of do whatever we want, but it can cause for headache later on. So if you do run into some issues and you do run into some bugs, it might be a good idea to try typescript on for size and see how that fares. Well, let's go ahead and begin working on our local development environment and getting set up to do everything in ethersjs and in JavaScript.
00:07:25.238 - 00:07:25.606, Speaker B: Whoops.
00:07:25.638 - 00:07:30.966, Speaker A: And I actually went and renamed this folder to ethersymple storage FCC.
00:07:31.158 - 00:07:33.582, Speaker B: The reason I added this FCC is.
00:07:33.636 - 00:08:05.382, Speaker A: All the GitHub repositories associated with this course. All the GitHub repos have this dash FCC to know that it is part of this hard hat JavaScript course. Awesome. Let's jump in and let's start working with solidity in our smart contracts locally in visual studio code. As you can probably tell by the name of this folder. And of course if you looked at the code, this project is going to be our simple storage project, but developed locally using ethers. So the first thing that we want to do is we want to get in that smart contract code.
00:08:05.382 - 00:08:10.506, Speaker A: So what we can do is make sure we have the Explorer selected. We can go ahead and right click.
00:08:10.608 - 00:08:20.026, Speaker B: And select new file and do simplestorage sol. Just close this for now as we.
00:08:20.048 - 00:08:34.666, Speaker A: Can copy paste our simple storage code from our last section into vs code. If you close remix or you forgot where it is, you can just go to the ethers simple storage fcc repo hit simplest sol and we can just.
00:08:34.708 - 00:08:37.106, Speaker B: Copy all the code in here and.
00:08:37.128 - 00:08:50.678, Speaker A: Then come back over, select symbol storage Sol and paste it in. Now an important note about visual studio code is that when you see this little white dot up here, it means that this file isn't saved to save.
00:08:50.764 - 00:08:54.706, Speaker B: You can hit file save and it'll.
00:08:54.738 - 00:09:20.366, Speaker A: Go away like that. Or what you can do is you can hit command S or control s, depending on if you're on a windows, a Mac or a Linux. Now you'll see here that this code is a little bit hard to read. This simplestorage sol. It doesn't have the syntax highlighting that we saw in remix. So we want to go ahead and add a visual studio code extension to give this syntax highlighting. So what we can do is come.
00:09:20.388 - 00:09:22.174, Speaker B: Over to this bar over here looks.
00:09:22.212 - 00:09:31.506, Speaker A: Like this, and if you don't see it on the left hand bar, you should click these three dots and it should be in here. But we'll go ahead and click extensions. And what we're going to do is.
00:09:31.528 - 00:09:38.950, Speaker B: We'Re going to look up solidity plus hardhat and we're going to install this.
00:09:39.020 - 00:10:02.954, Speaker A: Solidity plus hardhat extension for vs code. Now that we have this installed, if we go back over to our simplestorage Sol, you'll see that all the highlighting is back in and now it's much easier to read. All right, so this is good. We have our code in here. We have our syntax highlighting. Now let's add an auto formatter or a default formatter. Right now our code is pretty good with the way that it's formatted.
00:10:03.002 - 00:10:06.974, Speaker B: But what if we accidentally do some.
00:10:07.012 - 00:10:10.000, Speaker A: Stuff like this or like this or.
00:10:11.250 - 00:10:12.800, Speaker B: Maybe even like this.
00:10:13.810 - 00:10:58.638, Speaker A: We add a ton of new lines, et cetera, our code can start to look pretty gross. And even though the code itself is fine and it'll run the exact same way with all this extra white space, it doesn't look very good, right. And due to that it can be a little bit hard to read. What we want to do then we want to open up our settings and adjust our vs code so that it auto formats whenever we save. So whenever we save, so that whenever it goes from the little white dot here to no white dot, this whole thing gets automatically formatted to something that looks really nice. Okay, so what we can do is we can open up our command palette. To open up our command palette you can hit view command palette and you'll get a little pop up that looks like this.
00:10:58.638 - 00:11:27.810, Speaker A: Another way to open up your command palette is you can hit command shift p or control shift p depending on a Mac or a Linux or windows. And what we want to do is we want to type in settings and we're going to open settings JSON. We don't want to open the default settings JSON. We don't want to touch these, but we want to open our JSON settings. You'll also notice there are user settings and workspace settings. These are pieces that we can adjust as well. But we're going to just go right into the JSON settings.
00:11:27.810 - 00:11:41.630, Speaker A: So I already have some stuff in here, but yours might be blank or you might have some stuff in here as well. So what we're going to do is if you have stuff in here already, we're going to add a comma. Then we're going to do quotes, solidity.
00:11:44.130 - 00:11:46.238, Speaker B: Close the brackets, we're going to do.
00:11:46.244 - 00:11:55.858, Speaker A: A little colon and something like this. This means that we're going to apply some settings to our visual studio code whenever we're working with solidity. One of the things that we're going to add in here is going to.
00:11:55.864 - 00:12:03.106, Speaker B: Be an editor default formatter, and you.
00:12:03.128 - 00:12:38.318, Speaker A: Might even get a pop up that tells you some different things that we can use for a default formatter. Our default formatter is going to be nomicfoundation hardhat solidity. This will mean that anytime we go to format our code, it'll use the hard hat solidity plugin as its default formatter. The hard hat solidity plugin comes with some formatting and a lot of other really useful tools for us writing our code. So now that we have this part in, the next thing we're going to do is add format on save.
00:12:38.404 - 00:12:40.206, Speaker B: If we haven't already, we could add.
00:12:40.228 - 00:13:16.666, Speaker A: It in here in our JSON, but I'm going to add it not in the JSON file, I'm going to add it in the overall file. So if we open that command palette back up and we type in settings, open user settings, this is another really good place where we can look and add settings with a UI. So these two do essentially the same thing. It's just that this one has styles and a little bit more context versus settings. JSon just says, okay, give me the raw code for it. This tells us a little bit more. So you can use either one, but we're going to look for format on save and you're going to want this checked if you haven't already.
00:13:16.666 - 00:13:30.106, Speaker A: This means that every time we save vs code is going to try to format our code for us. So now that we have this checked, we have settings Json added in. And remember, we want to save this. Remember, if you see this white dot, that means it's not saved.
00:13:30.138 - 00:13:32.942, Speaker B: So you're going to want to save it. And we close it out.
00:13:32.996 - 00:13:54.982, Speaker A: And we close this out too. If we come back in here and we add a bunch of random new spaces or whatever, you want to make it look a little bit ugly, and then we save it. It should automatically reformat to look much nicer, right? So if we do something like this, we hit save it, reformats it to look much nicer. This will make it more readable for you and more readable for anybody else.
00:13:55.036 - 00:13:58.374, Speaker B: Who looks at your code, and it's just really nice.
00:13:58.492 - 00:14:13.306, Speaker A: And this line of code for your settings JSON is located in the full blockchain soliditycourse js. So you could also just copy paste it. We are going to end up overriding that default formatter with another formatter called prettier pretty soon.
00:14:13.408 - 00:14:15.242, Speaker B: But it's great to have a default.
00:14:15.306 - 00:14:36.482, Speaker A: Formatter so that if you don't feel like adding the prettier code sometime in the future you can just rely on your default formatter. Awesome. While we're doing formatting, let's also add a default formatter for our JavaScript code. And just to test it out, let's go ahead and create our new file. We'll call it deploy JS. And in here we can do something.
00:14:36.536 - 00:14:46.966, Speaker B: Like function high console log hi and then just add, and then just make.
00:14:46.988 - 00:14:54.714, Speaker A: It look kind of gross. Maybe something like this. If you hit save and it does some auto formatting, that's great. You can actually turn that off by.
00:14:54.752 - 00:14:57.322, Speaker B: Going back to your command palette and.
00:14:57.376 - 00:15:09.550, Speaker A: Saying save without formatting, and that way it'll be saved and not formatted. The way we can add some auto formatting here is we're going to install another extension. This one is going to be called Prettier.
00:15:10.210 - 00:15:11.722, Speaker B: So we can just look up prettier.
00:15:11.786 - 00:15:38.750, Speaker A: In the extensions here and you'll want to install this prettier code formatter. So we're going to go ahead and install this and great, now it's installed. Prettier is a code formatter that works for many languages like Python, JavaScript and even solidity. And pretty soon we're going to use Prettier for both JavaScript and solidity. But for now we're just going to use Prettier for JavaScript. We can enable this by opening back up our command palette.
00:15:38.850 - 00:15:42.154, Speaker B: We'll go to preferences, open settings, and.
00:15:42.192 - 00:15:48.966, Speaker A: The same way we added a solidity section, we're going to add a JavaScript section. So we're going to add a comma.
00:15:48.998 - 00:16:08.306, Speaker B: Here, some quotes, brackets, we're going to type in JavaScript, close that colon brackets, and we're going to do the same thing editor, default formatter and then we're going to do and then in here.
00:16:08.328 - 00:16:13.330, Speaker A: We'Re going to do es B-E-N-P prettier.
00:16:13.830 - 00:16:16.510, Speaker B: Vs. Code, and this will make prettier.
00:16:16.590 - 00:16:40.826, Speaker A: The default editor for JavaScript. Now, like I said, pretty soon we're going to have prettier override both of these for solidity and JavaScript, and we're going to give prettier some parameters so that no matter who uses your code, they will always have the exact same formatting. But now that we have prettier in here as the default editor, if we come back to deploy JS and we hit save, it should format to look.
00:16:40.848 - 00:16:42.666, Speaker B: A little something like this now and.
00:16:42.688 - 00:16:44.800, Speaker A: We go ahead and we do something like this.
00:16:45.170 - 00:16:46.334, Speaker B: If we go ahead and do something.
00:16:46.372 - 00:16:48.238, Speaker A: Like this, it'll reformat to look like.
00:16:48.324 - 00:16:49.326, Speaker B: To look like that.
00:16:49.428 - 00:16:51.326, Speaker A: And then additionally, if you want to.
00:16:51.348 - 00:16:54.382, Speaker B: Go back to your command palette, open.
00:16:54.436 - 00:16:59.710, Speaker A: User settings not in JSON mode, and we go to default formatter.
00:17:00.130 - 00:17:01.914, Speaker B: You can actually even select the default.
00:17:01.962 - 00:17:03.710, Speaker A: Formatter for all languages.
00:17:04.130 - 00:17:06.614, Speaker B: If you want to use prettier for.
00:17:06.652 - 00:17:08.550, Speaker A: All formatters, feel free to go ahead.
00:17:08.620 - 00:17:09.526, Speaker B: But all right, great.
00:17:09.628 - 00:17:14.260, Speaker A: Got our JavaScript formatter in as well. Let's start writing some JavaScript code.
