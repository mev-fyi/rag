00:00:00.250 - 00:01:02.906, Speaker A: Hi, I'm Richard, one of the developer advocates at Chainlink Labs, and today I want to talk to you about a new feature in the starter kits, specifically the Gitpod button, and why it might make your life a whole lot easier. So let's take a look at what it is. All right, so let's dive in and see just what would be involved with setting up and using one of the Chainlink starter kits without and then with gitpod. So we'll use the hard hat starter kit as an example. The following steps should be very similar, if not identical, for each of the other starter kits within the Chainlink smart contract kit repositories. If we scroll down, we can see within the readme there is an opening Gitpod button now, but we're not going to talk about that just yet. First, let's take a look at what would be required to get started with local development and usage of this starter kit.
00:01:02.906 - 00:01:45.198, Speaker A: Traditionally, the first thing that we'd need to do is we'd need to make sure that we had git installed and that we had node installed, and that we had yarn installed, or NPM. This starter kit recommends yarn. So we'd need to make sure that we had that installed. Then we'd need to clone the repository to our local machine, and we'd need to install everything and then we can do stuff. That's a lot of steps, though. What if you just wanted to get going right now? What if you weren't sure about how to install all of these things on your local machine? What if you couldn't install them on your local machine? Maybe all you have is a tablet. What do you do? Well, that's where this open and gitpod button that we've added comes in.
00:01:45.198 - 00:02:23.050, Speaker A: Gitpod allows us to run a instance of this repository in the cloud. So if we open up this in a new tab, just so we can kind of keep this repository around, you'll see here, it's starting our Gitpod instance now for you. It may prompt you to authorize your GitHub account. I've already done that in the past, so I'm good to go. Now it looks like it's opened up vs code on my machine, but this is vs code, just not on my machine. You can see I'm still in my browser. This is Gitpod using vs code in the cloud.
00:02:23.050 - 00:02:54.958, Speaker A: I've themed it and set up a few things so it looks like my normal vs code, but it's not my vs code. Let's make things just a little bit larger here so we can see what's going on. You can see it's installing and initializing the workspace. But once we get back to our regular prompt here in just a moment, you'll see we're able to do things like run our tests. We can do everything we need to right here in the browser. We could even go so far as deploying smart contracts from this instance to a blockchain. I think that's awesome.
00:02:54.958 - 00:03:26.910, Speaker A: This is going to make it so much easier to get started doing smart contract development. When you need something more than remix, you see it's still installing things. And there we go, we're back to our regular prompt. So if I run NPM test, you can see it'll actually run Hardhat's test suite and it's all working. That's it, we've done it. It was click one button, wait just a few moments and you're up and running. I think that's awesome.
00:03:26.910 - 00:04:22.590, Speaker A: But what if you wanted to do more? This is using the smart contract kit repository. What if you wanted to make changes and save them to GitHub? How would you go about doing that? Well, let's go back and take a look. The first thing that we would need to do is go back to GitHub and then we'd need to fork this repository what forking is, and it tells you right here it's creating a copy of the repository that allows you to make changes without affecting the original repository, which is good because we don't want to mess with the smart contract kit version. We want our own version. So you can see I've set the owner to me and then I'll click create fork. And what this will do is it'll copy over everything into my copy of the starter kit. Now I could click this button to open in gitpod and it would work, but it wouldn't do what we think it's going to do necessarily.
00:04:22.590 - 00:05:06.786, Speaker A: This version is going to specifically open up the smart contract kit version of the repository. So let's take a look at how do we change that once we've forked this repository, how do we change it? It's going to be in the ReadMe file, ReadMe MD, it's a markdown file. We can click on this little edit button here and we'll need to change smart contract kit to be our user id. So in my case that's going to be our got libr at this point. Once I commit these changes and save them. Now I can click on open and gitpod and it will open my instance of this. You'll notice it has a different start here.
00:05:06.786 - 00:05:56.300, Speaker A: It starts with Rgotliber, whereas the other one started with smart contract. So again it goes through the entire process again of installing and setting up and getting everything ready to go. Once it's done that we can make changes. Now, what changes might we want to make and how do we go about making these changes? If we want to make a change and store it in our own repository, that's easy enough. We can do that and we'll walk through that in just a minute. But what if we wanted to make an improvement, a suggested change to that original repository we want to give back to the community? I noticed there was a slight typo in the readme when I changed it earlier. So let's take a look at how to fix that specific typo and how to open a pr or pull request back to the smart contract kit repository.
00:05:56.300 - 00:06:38.380, Speaker A: The first thing we'll do there's a couple ways you could do this. We could do it either via the command line or via the UI. I'm going to use the UI you'll need to make a new branch. A branch is kind of like a new version of something in git. It's a new branch of code, so it's a separate little path that code changes will be stored on. So we'll come here to source control and then we'll go to branch and create branch and we'll just call this fix typo. This will create a new branch and now any changes that we make will be stored within this branch because we're already checking out or moving to this branch within our repository.
00:06:38.380 - 00:07:21.492, Speaker A: So we'll go back here and we'll open up the readme file and when we do this there's actually two changes we're going to need to make. The first is remember how we put our user id here? But when we submit these changes back to the main repository we don't want to bring our user id along for the ride, do it. We want this to go back to smart contract kit. So what does that look like? Well, if we head back here to the original version and we take a look here, it's spelled smart contract kit. I'm going to copy and paste just to make sure I don't goof something up. So we'll put that back for now. Remember this is in a separate branch, so it's kept separate from our main readme.
00:07:21.492 - 00:07:47.292, Speaker A: The other thing I noticed is here we give examples of yarn at NPM. And in the now you can do stuff section we just have yarn twice. So let's go ahead and fix that little bit of a typo. So we need to have NPm test instead of hardhead test. We'll give that a save. And when we come back to our source control we can see that there's changes to the readme. We'll need to stage these changes.
00:07:47.292 - 00:08:19.016, Speaker A: That means we put them out there to be committed and then we need to add a message for this commit. So we'll say fix Typo in readMe Md. So we'll now commit these changes and then we need to publish this branch. This will push it up to GitHub. It's asking us if we want to publish it to origin or upstream. You may not see this upstream option. I have permission to write to the smart contract kit repository.
00:08:19.016 - 00:08:41.828, Speaker A: So you may not see that option. But we want to go to origin. I want to save it in my personal fork of this repository first. Fantastic. It's there already. I'm going to use the back button because I didn't open this in a new tab and go back to my version of the starter kit. And you can see GitHub's smart enough to say hey, there's this new branch that has recent changes to it.
00:08:41.828 - 00:09:24.450, Speaker A: Do you want to make a pull request? Yes, let's make a pull request. So we're going to make a pull request against the smart contract kit hard hat starter and we're using this branch here that we just did. Now we have a title for this pr fixed typo and we'll add a little bit of more detail and then we have what the actual change is. And we can check here to make sure that this change is the change that we want to make. And it is. And I think something changed with formatting on this line. I'm not sure it looks the same to me, so I think it's probably okay.
00:09:24.450 - 00:09:52.244, Speaker A: But that's it, right? That's our change. We got rid of this and we added that. Cool. So at this point we can click create pull request and that's it. Just like that, we have created a pull request to the original repository. You can see GitHub has taken us back to the smart contract kit repository and we've done this without actually downloading any code. We haven't done anything on our local machine.
00:09:52.244 - 00:10:28.350, Speaker A: I could have if I had good enough eyesight, done this change from my phone. I think that's amazing. I think the amount of friction that's removed using gitpod is just going to make it so much easier for developers to get started with smart contract development. So that's how easy it is to make a change using gitpod. You literally click a button and you can have a full blown instance of the starter kits up and running in your browser regardless of what device you're using. And I think that's going to make a lot of lives a lot easier. So thanks for watching and I'll catch you in the next one.
