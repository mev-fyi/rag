00:00:10.410 - 00:01:19.906, Speaker A: Now, though, now that we know how to call these functions in here, we can start working with this interface. However, as you know, if we have a whole bunch of interfaces, we're going to have to stick a whole bunch of interfaces at the top of our code, which looks pretty ugly. What's a better way for us to do this? Well, before we used import, right, we imported from simplestorage sol for this one, what we could do is we could import from aggregator v three interface. Sol we could go ahead and create a new contract with this aggregator v three interface. Or what we can do is we can import this directly from GitHub. If we go back to the documentation of these chainlink data feeds, we go to using data feeds and we scroll down, we see at the top we have this import statement, import at chainlink contracts src v eight interfaces aggregator v three interface this import has the same path setup as the GitHub repository for the chainlink code. Instead of us directly adding all of the code right into our remix, what we can do instead is we can import directly from GitHub, or what's called an NPM package.
00:01:19.906 - 00:02:06.440, Speaker A: Remix is smart enough to know that at Chainlink contracts is referring to the NPM package at Chainlink contracts. We'll talk about NPM a little bit in the future. It's what's known as a package manager and can keep versions of different contracts for us to directly import into our code. Bases at Chainlink contracts is created directly from the Chainlink GitHub repository. So remix downloads this code from NPM, which is created from this GitHub. So now we know that if we import at chainlink contracts src v zero eight interfaces aggregator v three interface sol this is the same as if we had just stuck this whole contract right at the top of our fundme contract, which makes our code look a lot nicer. And now we have this aggregator v three interface face that we can work with.
