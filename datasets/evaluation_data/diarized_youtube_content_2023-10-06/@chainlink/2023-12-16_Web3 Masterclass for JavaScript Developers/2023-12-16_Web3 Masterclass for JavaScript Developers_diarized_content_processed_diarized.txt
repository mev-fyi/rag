00:00:04.090 - 00:00:24.458, Speaker A: Hello, everybody. My name is Cassidy. I'm CTO of a company called Contenda. We're building an app called Brainstory that helps you brainstorm stuff. That's the summary of it. And I know very little about this space. And so I'm very excited to be a part of this webinar and ask Richard a lot of questions and learn something with y'all.
00:00:24.634 - 00:01:05.940, Speaker B: Awesome, awesome. Yeah, and I'm Richard, one of the developer advocates at Chainlink Labs. And yeah, this is what I do most of the time, is run webinars, make videos and stuff about web3. I'm really happy to have Cassidy here to kind of start bridging that web two, web3 space, because I think that's an important bridge to build. Today we're going to be talking about what web3 is running through a basic hello world smart contract. So this is hopefully going to be a very interactive webinar where you, the audience, can participate and follow along. So I really think you can probably get the most out of it if you're following along, kind of doing the same things that we are.
00:01:05.940 - 00:01:43.674, Speaker B: And then we'll do the hello world. We'll get into a massive step forward into a more complex project. We'll build a decentralized news aggregator using hacker news to pull the latest stories of hacker news, store them on the blockchain, build a front end out to show it, and yeah, that's where we'll go from there. So I think looks like pretty much everybody's probably in and yes, Nick, great question. Documentation available after the webinar? Yes, we'll share it right now in the chat as well. A link to a gitbook that will walk you through everything that we're going to be doing as well. So there it is in the chat.
00:01:43.674 - 00:01:56.418, Speaker B: That gitbook will still be available after the webinar, too. Yeah. On that note, I guess starting off, Cassie, you mentioned that you don't have a lot of experience in Web three.
00:01:56.584 - 00:01:57.106, Speaker A: Yes.
00:01:57.208 - 00:01:59.380, Speaker B: What is your experience with Web three so far?
00:02:00.310 - 00:02:25.466, Speaker A: Losing money, mostly. Any attempts that I have with being just like, oh, I'll just set this up, and I'll have a naham. Or I'm just like, oh, that's really cool. Why did I just lose $200? I admit I've been a little nervous to get into this space because of that aspect, but at the same time, I think there's a lot of cool features in the space in general.
00:02:25.648 - 00:02:55.314, Speaker B: Yeah. So losing money. I 100% understand that. I was actually just the other day looking at an old wallet I had. So wallets are a place where they store kind of your identity on chain and also allow you to interact with the blockchain. We'll actually be talking about that later in a little bit in setting one of those up, but I was looking through some old transaction I've made and there's literally one where it's like $170 failed. And I was just like, whoo, that's bad.
00:02:55.314 - 00:03:22.378, Speaker B: We're going to be doing a lot of stuff on chain today, too. The good news, and you may not have known about this, is there's things called testnets that mirror like the Ethereum mainnet, the production, but they're for testing purposes. And on a testnet you still pay fees, but there are things called faucets where you can get testnet fees for free. So we'll be going through one of those today too. So if you're participating along, you can get those as well. So you can kind of go along. I like to think of it as like it's monopoly money.
00:03:22.378 - 00:03:44.740, Speaker B: So you have testnet bucks that are not worth anything, but they give you the ability to act in a way that is going to be the same as if it were production. So you're still paying the fee even though the fees in this testnet fees are monopoly money. Right. So it's not actually costing you anything. You still the same process that you're going through. So I think that's really good.
00:03:45.110 - 00:03:46.322, Speaker A: Yeah, that's good to know.
00:03:46.376 - 00:04:22.880, Speaker B: Yeah. You had rough first experience and I think that that too is like in this space, probably the biggest thing that we need to work on. We being developers in web3 is making the user experience better because it is fraught with craziness and terrible experiences if you don't know what you're doing. And that's something that I hope to bringing more people from the current web two space along with the journey like web two is awesome, I love it. But if you go way back in time, it was kind of rough too at the very beginning. So it's just that process of refining and stuff like that.
00:04:24.790 - 00:04:45.960, Speaker A: I think there's a lot of opportunity in it to build cool things and to make money and stuff. It's just the barrier to entry is scary because people don't want to lose money. And so the fact that I've learned that there is such thing as a test net in a faucet is already beneficial because now I know more about what I can build.
00:04:46.890 - 00:04:51.580, Speaker B: Right on. So what questions do you have before we get started?
00:04:52.030 - 00:05:12.510, Speaker A: So this is probably a very basic one, but a genuine question. What is the blockchain? Like? If I were to talk to my parents about this or something, they might know what bitcoin is, and they're just like, oh, it's just fake money out there. But what is the blockchain? How would you describe it?
00:05:12.580 - 00:05:50.630, Speaker B: So if I was describing it to your parents, I'd probably say you have a checkbook, right? And in your checkbook, you have a ledger where you keep track of all your transactions. And the blockchain is kind of like that. It's a ledger, but it doesn't just live in your checkbook. Everybody's ledger is shared. So you have a copy of your ledger and your friend's ledger and everybody else's ledger. So it's a public ledger, and everybody agrees on what's written down in that ledger. So we can all agree on today, Richard wrote a check to Cassidy for $100, and everybody agrees.
00:05:50.630 - 00:06:27.942, Speaker B: And then my bank account goes down $100, and everybody agrees. Yeah, and that's great. Right? So that's how I describe it at a very high level. Now, when we say blockchain, too, these ledgers are actually computers, right? So that's going to be a node within the blockchain, and they're distributed around. So, like, I could run a node here in my office if I wanted to. There could be a node running in an AWS data center somewhere. They're all distributed and they're run by different people, which gives us this ability to have not just like one source controlling the information, which I think is kind of a unique way to think about things.
00:06:27.942 - 00:06:50.800, Speaker B: Right. Have you ever had the experience where Netflix just doesn't work and it's down for a. Like, what happened? Amazon had an outage. Right. But if you build, in a way, know there's the Netflix server running in your house and in AWS and in Azure and in your neighbor's house. If Amazon goes down, does Netflix go down?
00:06:51.330 - 00:06:51.854, Speaker A: I see.
00:06:51.892 - 00:07:04.690, Speaker B: All right, so we've got that. It's shared tolerance built in. Yeah. So there's like a massive aspect of security that's built into that decentralization, which is also pretty cool, I will say. You mentioned earlier about it being expensive.
00:07:05.130 - 00:07:05.880, Speaker A: Yeah.
00:07:06.410 - 00:07:12.870, Speaker B: That is kind of the downside of this. Right. Because why would you run a node?
00:07:16.330 - 00:07:19.442, Speaker A: Why do you want to witness to a transaction?
00:07:19.586 - 00:07:33.886, Speaker B: Right. Yeah. And we'll see, as we're going through some of the examples today, we'll see how this is paid for. But there's this concept called gas, you may have heard of that, and it doesn't have anything to do with Taco Bell, but that was the joke I.
00:07:33.908 - 00:07:36.080, Speaker A: Was going to make. So, perfect, let's go.
00:07:38.450 - 00:07:55.140, Speaker B: It's essentially how you incentivize different nodes on the blockchain network to do work for you. Right. So you have to pay them to do the work because these computations do take processing power, aka energy. Right. So it costs whoever's running it. So you have to incentivize them to do the work.
00:07:55.670 - 00:08:16.778, Speaker A: Yeah. And so when people say like, oh, doesn't the blockchain, isn't it bad for the environment because there's all of this cost and energy? I know that there's different things. Like I've heard of, like proof of work, for example. There's different ways of how the chains work. What does that mean?
00:08:16.944 - 00:08:46.850, Speaker B: Yeah. So proof of work is going to be in order to put something on the blockchain to verify that you've done, to make it hard to put bad information on there. Not hard, that's the wrong word. To make it expensive to put bad information on the blockchain. Proof of work was one of the ways that they did this, where you had to solve complex mathematical problem when you wanted to put that information on chain. Right? So as a node, there's a cost associated with putting information on chain. The cost will be less than your reward.
00:08:46.850 - 00:09:19.918, Speaker B: But if you put bad information on chain, then you don't get that reward and you still have to pay the cost. And so originally it's like proof of work. So Ethereum was originally proof of work network and yes, lots of energy. Right? Because people over optimize because they want to be making the rewards. Right? So they optimize for, I'm going to solve these mathematical problems super fast. Right? That's why we have gpus doing the math problems and stuff like that. So, yes, that was energy.
00:09:19.918 - 00:09:57.494, Speaker B: Inefficient proof of work is using those kind of resources to prevent bad actors. There's a lot of game theory behind the scenes to encourage people to act in a good manner. Ethereum migrated to a proof of stake methodology. And so what that means is in order to be a validator node, you have to have a certain amount of eth that you're putting up as like a guarantee. And so if you do bad work, then you'll lose that. That's on the line, basically. So you say, here's my 30 eth, and I'm saying that this is valid.
00:09:57.494 - 00:10:13.700, Speaker B: And if it's not then this is at risk. So that's kind of where there was a big change, because now you're not doing complex mathematical problems, you're incentivizing good actions, good behavior within the network, because there's a monetary cost directly associated with that.
00:10:14.390 - 00:10:15.202, Speaker A: Got you.
00:10:15.336 - 00:10:24.660, Speaker B: The electrical needs of running a blockchain node have gone way down on networks that are proof of stake, for example.
00:10:25.110 - 00:10:45.020, Speaker A: Got you. That makes sense. I did not understand the difference between them. And so that makes a lot more sense. So when you say complex mathematical problems, I assume it's not arbitrary, but what are they solving for?
00:10:47.390 - 00:10:54.462, Speaker B: I should know the answer to this off the top of my head, but I don't know the answer to that one off the top of my head. Like what the mathematical equations would look like. I'm sorry.
00:10:54.596 - 00:11:11.314, Speaker A: Yeah, no, that's fine. I've heard that kind of thing before and I've always been curious, like, what do you mean? They just do math. What is the goal? What is the algorithm that is set up there? But I suppose a lot of that has been abstracted away with different platforms, right?
00:11:11.352 - 00:11:16.580, Speaker B: Yeah, with different clients, basically that run the blockchain software on your computer.
00:11:16.890 - 00:11:17.398, Speaker A: Yeah.
00:11:17.484 - 00:11:43.840, Speaker B: And that's like another thing too. That's kind of interesting. Speaking of, thinking back to the risk aspect is there's different clients that run the software on your computer. But with Ethereum, for example, the goal is to make sure that there's a good distribution of clients. So if there ever is a problem with one client, it doesn't affect the whole network. Right, right. So there's a lot of redundancies built into this idea of using the blockchain to store information as well.
00:11:44.450 - 00:11:49.280, Speaker A: Got you. What is a smart contract then?
00:11:50.370 - 00:11:54.400, Speaker B: So it's just a contract, an agreement that's smart, right.
00:11:55.350 - 00:11:56.402, Speaker A: Perfect. Done.
00:11:56.456 - 00:12:11.510, Speaker B: Yeah, that's right. Done. We solved it. So it is an agreement. There's a couple of ways to think of this. I like to simplify it down to it's just a program and that's it. It's a piece of code.
00:12:11.510 - 00:12:42.346, Speaker B: That's a smart contract. Today we're going to write several smart contracts. The one that stores a string hello world on the blockchain as a smart contract, the one that's going to reach out, grab API data, bring that API data on chain, store the API data on chain. That's a smart contract. If you had something like an insurance contract where you're looking at, we can do like weather insurance. Right. And you're looking at weather information, storing that information on chain.
00:12:42.346 - 00:13:00.614, Speaker B: That's more of a traditional contract as you think of it. Right. I agree to pay you this amount, and if the weather falls within these parameters, then you're going to pay me this amount. But it doesn't have to be a pure contract when it comes to those type of things. It's a program that lives on the blockchain, is how I simplify it to the most thing.
00:13:00.732 - 00:13:42.514, Speaker A: Yeah, that makes sense. It sounds like something that interacts with the chain and that makes sense. And when I hear stuff like that, I feel like, for example, with the ledger that you were explaining before, this makes particular sense. I could see for how art is sold, where a lot of times when you have art sold by a famous artist of some kind, there's a ledger of who has bought the art over time that has been verified. This is like separate from blockchain stuff, but it exists in the real world. So that way you can determine, like this piece of art is valid and real because these different people have been on the ledger for it. These different people have agreed that this person has bought it and stuff.
00:13:42.514 - 00:13:52.962, Speaker A: And so that's kind of like the real world metaphor I've been using to understand it. And it sounds like the smart contract is what is putting it on that ledger of sorts.
00:13:53.026 - 00:14:21.280, Speaker B: Yes. And not to get into nfts and all of that too much here, but with that same idea, you have a piece of digital art and then it's following that same idea with what you're saying, where you can see this is where it's created. And then that smart contract is the art, which is kind of weird because NFT is the smart contract. But that smart contract also then will record every transaction that has happened to it. So you can kind of see where it's been the whole way.
00:14:23.010 - 00:14:40.662, Speaker A: Interesting. I let's not get into nfts because I have so many more questions about that, but that'll take the entire time. So that being said, for interacting with the blockchain, is it a particular language or can you just use anything? Is it dependent on an API? How does that work?
00:14:40.796 - 00:15:19.460, Speaker B: Yeah, so there's a bunch of different languages out there that you could use to interact with it. In this webinar, we're going to use solidity, which is a compiled, very strictly typed language. There are other ones out there that you can use. When you're talking about most of the blockchains that I deal with, they're going to be EVM compatible. So EVM means ethereum virtual machine. It's just basically the type of blockchain that ethereum is. But there's other blockchains out there that run basically the same code at a surface level as far as interacting with them goes.
00:15:19.830 - 00:15:20.290, Speaker A: Okay.
00:15:20.360 - 00:15:40.090, Speaker B: So yeah, it's kind of like when it comes to web development, right. At the end of the day, you have to get down to HTML, CSS and Javascript. Right, to show stuff in a browser. But how you get there can be very different. So we'll be using solidity on an ethereum, on Ethereum's test network, Sepolia.
00:15:40.510 - 00:15:45.498, Speaker A: Got you. So solidity is like that base language that things can compile into.
00:15:45.584 - 00:15:47.260, Speaker B: Right, got you. Yes.
00:15:47.710 - 00:15:48.314, Speaker A: Okay.
00:15:48.432 - 00:15:52.000, Speaker B: Solidity is kind of like web3's Javascript to like.
00:15:53.090 - 00:15:55.600, Speaker A: That's helpful to understand, though.
00:15:56.850 - 00:15:58.240, Speaker B: It feels a lot like.
00:15:59.730 - 00:16:13.278, Speaker A: And so, like, does this will get into it. We'll get into this question later. So in terms of Chainlink, where you work, how does that fit into all of this? Is it the API or what is Chainlink?
00:16:13.374 - 00:16:29.080, Speaker B: Yeah, so chainlink Labs makes chainlink. Just to clarify there, I work for Chainlink Labs. Got it. Yeah, no, it's all good. They get swapped around a lot. There's people who have law degrees who get uncomfortable when you don't make sure you clarify these things. Got it.
00:16:29.080 - 00:16:45.694, Speaker B: Chain link started out solving what is called the Oracle problem. So we'll play a little game here and chat. Feel free. This is like the one time I'd be like 100% use the chat for this, not the Q and A. I'm going to ask you a hard question. It's like one of my favorite questions to ask in these things. Super hard question.
00:16:45.694 - 00:16:51.200, Speaker B: Cassie, hope you're ready. It's not a trick question. Just go with your gut on the answer. What's one plus one?
00:16:51.890 - 00:16:52.698, Speaker A: Two.
00:16:52.884 - 00:17:03.682, Speaker B: Yes. Okay. I agree. It's two chat. Like, what do we think? One plus one? Two. We said we've got somebody who says.
00:17:03.816 - 00:17:05.378, Speaker A: Indeed, and we've got a zero.
00:17:05.464 - 00:17:08.180, Speaker B: I don't know. But twos have the majority right now.
00:17:08.710 - 00:17:14.726, Speaker A: Deterministic two. We are multiple answers, whatever you want it to be.
00:17:14.908 - 00:17:27.020, Speaker B: If all of us are nodes in a blockchain. Right. And we just are trying to answer this question. So we have a smart contract that's computing one plus one. I'm going to say two. You're going to say two. It seems like the majority of the nodes in the network are going to say two.
00:17:27.020 - 00:17:48.754, Speaker B: Deterministic. I feel like you have read this before, had this question asked because it's deterministic question. So one plus one is a deterministic question. It is always two. It doesn't matter. If I ask you next week, it doesn't matter that I'm in Texas and you are in, right? Like that doesn't matter. It's always two.
00:17:48.754 - 00:17:57.030, Speaker B: This is easy for blockchains, right? Like all the nodes within the blockchain. We all agree. Super easy. Now we're going to step up the difficulty of the questions. I hope you're ready.
00:17:57.180 - 00:17:57.782, Speaker A: Okay.
00:17:57.916 - 00:17:59.560, Speaker B: What's the current temperature outside?
00:18:01.690 - 00:18:07.650, Speaker A: I see. Okay. So for me it is 48 degrees fahrenheit.
00:18:07.810 - 00:18:13.930, Speaker B: Okay. I'm at 65 and fahrenheit is key here, too, because that makes a big difference. Right.
00:18:14.000 - 00:18:17.306, Speaker A: I added units on purpose just in case that was a part of the.
00:18:17.328 - 00:18:37.966, Speaker B: Trip, but that makes a big difference. So even just with the two of us, right. We have a problem now because if I ask you what's the current temperature, we can't agree. And I'm pretty sure that if the chat would respond to this, they're going to run into the same problem, too. That's nondeterministic.
00:18:38.078 - 00:18:40.930, Speaker A: 72 in Htown. Is Htown Houston?
00:18:41.270 - 00:18:57.398, Speaker B: I think so, yeah. So that's a nondeterministic question. Anytime you have a question where it could be an. It depends. Right. So if I ask you next week what the temperature is, even though you're still in Chicago, it's probably going to be different. Right?
00:18:57.484 - 00:18:57.782, Speaker A: Right.
00:18:57.836 - 00:19:08.218, Speaker B: It's not like one plus one. So if you put yourself in the shoes of a blockchain as a node, you can compute this, but the rest of the nodes in the network are not going to agree with you. And that's a problem.
00:19:08.384 - 00:19:08.906, Speaker A: Yeah.
00:19:09.008 - 00:19:34.674, Speaker B: This is where Chainlink comes in. So chainlink, biggest thing that you could call it is a distributed oracle network. So distributed, I feel like we kind of talked through that with blockchain. We've got a bunch of different things living in different places. It's distributed oracle. What is that? So in the blockchain space, bringing off chain data on chain is referred to as the oracle problem.
00:19:34.872 - 00:19:37.470, Speaker A: Okay, so it has nothing to do with the company oracle?
00:19:37.550 - 00:19:39.806, Speaker B: No, because in my mind, my confusion.
00:19:39.838 - 00:19:42.290, Speaker A: In the past, I was like, wow, they're very involved.
00:19:42.450 - 00:19:59.546, Speaker B: Right. So in my mind, I think of it like greek mythology. Oracle as someone you go to for answers. Okay. So you go to the oracle when you're seeking knowledge. So oracles are. The oracle problem is not having access to real world non deterministic data.
00:19:59.546 - 00:20:21.106, Speaker B: Oracles are the solution to the oracle problem. Weirdly enough. I don't know. It's weird. I didn't make up these rules, but this is how things are. So a distributed oracle network. So if you think about it, we have the blockchain, which is a distributed network of nodes that run the blockchain software, and then we have chainlink, which provides a distributed oracle network, or dawn, as we call it.
00:20:21.106 - 00:20:50.410, Speaker B: So, D-O-N dawn. This allows you to have access to non deterministic data. How? Right, cool. You say it works, but like why and how? So each of the oracle nodes will answer that question, what's the current temperature? When we ask it on a global scale, it makes less sense in this example, but it could still make sense on global scale. I like to think of it as my house, right? So I have a two story house upstairs, downstairs, different temperatures normally, right? Because heat does this crazy thing where it goes up.
00:20:50.480 - 00:20:51.722, Speaker A: It goes up, yes.
00:20:51.776 - 00:21:20.760, Speaker B: And so if I were to ask a question of what's the temperature of my house, this seems like a more reasonable question to ask. What's the temperature in the world right now, just from my small p sized brain, but I ask the question, what's the temperature of my house? And I have a thermometer in every room. Well, they're all going to give me different answers even if they're close, right? Even if it's like 75.475.5 in the room next door, still different. But then if I take all those answers, bring them together and say, what's the median value of this? Then I'll get the answer to what the temperature is. My house. Right.
00:21:20.760 - 00:21:51.040, Speaker B: So the oracle network does something similar where it'll get all the responses back. Each node within the oracle network will give its answer to a smart contract that then computes the median, right. So you have the information brought on chain, and when you have a data set, all the temperatures, and you ask of this data set, what's the median? I've taken non deterministic data and made it a deterministic question where anytime I ask you what's the median of this data set, you can give me the same answer.
00:21:51.490 - 00:22:12.646, Speaker A: Right, okay. I think this starts to get into the math again, for answering the smart contract, it's not necessarily like, what is the temperature outside? It's more like, can I put this on the chain? Is that more what the question?
00:22:12.748 - 00:22:13.398, Speaker B: Yes.
00:22:13.564 - 00:22:14.038, Speaker A: Okay.
00:22:14.124 - 00:22:44.690, Speaker B: Yes. And within the blockchain space, it's very interesting because I think a lot of people who are already into web3 in the crypto space pretty heavily, they look at it as crypto. Blockchain is the answer to every problem. And I admittedly will say I don't agree with that. I think it is this super powerful technology, but you have to be very intentional about where you apply it.
00:22:44.840 - 00:22:45.154, Speaker A: Right.
00:22:45.192 - 00:23:10.380, Speaker B: And we'll kind of see that goes with everything. Yeah, I feel like too controversial opinion that in the software development space, a lot of us have grown accustomed to crazy, stupid amounts of storage. Like, I'm just playing with this on my desk. This is like a sandisk, like terabyte, right? Like, this is a terabyte. That's so much space.
00:23:12.110 - 00:23:14.570, Speaker A: My childhood self would be like, that's what.
00:23:14.720 - 00:23:57.574, Speaker B: Yeah, right? I remember when a gig on any sort of device was just like, you have no idea. It was amazing on the ipod, man. Yeah, it's crazy, right? Anyway, so we've gotten used to the abundance of space and computing power. And so while we have this weird thing where we do a lot of algorithm testing for hiring, we don't always apply the super best practice. How do we make this as efficient as possible in our day to day lives? Because computers just keep going faster and faster. It's fine. So given that, I think you have to be very intentional about where to store things.
00:23:57.574 - 00:24:12.380, Speaker B: And in the web3 space, that becomes even more important when you're talking about, well, I'm going to essentially be charged for every bit of processing that I want to have done, if that makes sense.
00:24:13.070 - 00:24:20.750, Speaker A: Right? Yeah. And so it forces you to be more efficient because otherwise it's going to have actual physical.
00:24:21.250 - 00:25:00.570, Speaker B: Right, yes. So, yeah, just to loop back to chainlink. So we talked about the oracle problem, we talked about the distributed oracle network, and then we kind of got off topic a little bit, but just kind of bring it back to what Chainlink labs has. So we have data feeds which are bringing that off chain data on chain. Most of that is used for price, like asset pair pricing. So if you're looking at cryptocurrencies, you want to know what ETH is worth in terms of USD, that kind of stuff, bringing that data on chain. We have VRF, which is for random number generation.
00:25:00.570 - 00:25:34.902, Speaker B: It's a verifiable randomness function. Interesting thing about blockchains, random numbers are very important, but when you do them in a deterministic space and you start to think about the fact that a node can put something on the blockchain or not, random numbers get really weird when they matter. So if I had a random number, we'll use counterstrike. For example, counterstrike has some skins for knives that sell for hundreds of thousands of dollars. Right.
00:25:34.956 - 00:25:35.522, Speaker A: It's wild.
00:25:35.586 - 00:25:46.842, Speaker B: Yeah, it's crazy. If you take that concept and you're running it in a place of like when you open. I don't play counterstrike. I'm sorry. I think they have some sort of like loot mechanism. Right. Where you get the.
00:25:46.896 - 00:25:48.906, Speaker A: Do that with neopets, too.
00:25:49.088 - 00:25:55.546, Speaker B: Okay. Yeah. Okay. We'll say neopets, right? Do they come out of eggs? How did neopets.
00:25:55.658 - 00:26:05.730, Speaker A: Yeah, they have like outfits and stuff. Gosh, I shouldn't have used neopets as an example. I haven't played it since I was like middle school. But anyway, skins.
00:26:06.550 - 00:26:15.140, Speaker B: So you buy your skin, right? And you open the loot box, whatever it is. Sure. Theoretically that's randomly generated, right?
00:26:15.770 - 00:26:16.802, Speaker A: Theoretically.
00:26:16.946 - 00:26:22.246, Speaker B: Theoretically it becomes more important that it's not theoretical when it's worth money.
00:26:22.428 - 00:26:22.966, Speaker A: Yeah.
00:26:23.068 - 00:26:56.740, Speaker B: Right. So on a blockchain, there is a possibility that a minor of the block, like, so one of the nodes could be a bad actor. Right. And so again, this is the whole game mechanics thing, like trying to prevent bad actors. So say they're a bad actor. Random number generation using stuff on a blockchain works in that it's random, but it doesn't work in that the mining node can know what the random number is before it commits it. So let's think about it like this.
00:26:56.740 - 00:27:09.320, Speaker B: If I gave you a dice and it's a 20 sided dice, and I said, you have to roll this dice and you have to roll a 20, the way that you're going to prove to me you rolled a 20 is you're going to take a picture of it.
00:27:09.850 - 00:27:10.406, Speaker A: Sure.
00:27:10.508 - 00:27:22.842, Speaker B: Could you, without putting it on 20, actually rolling it, guarantee me that the only picture you'll send me is a 20? Yes, because you just roll it until you got 20 and then you take a picture. Right?
00:27:22.896 - 00:27:23.258, Speaker A: Yeah.
00:27:23.344 - 00:27:41.502, Speaker B: So the same thing can happen when it comes to random numbers on the blockchain. That's where VRF comes in. So it's generated in the Oracle network and then the random number and a proof showing how it was generated are submitted to the blockchain. And in that same function where it's submitted, you use it. So there's no opportunity.
00:27:41.636 - 00:27:42.094, Speaker A: I see.
00:27:42.132 - 00:27:44.980, Speaker B: To know what it's going to be before you use it.
00:27:45.350 - 00:27:46.002, Speaker A: Okay.
00:27:46.136 - 00:27:46.770, Speaker B: Yeah.
00:27:46.920 - 00:28:04.258, Speaker A: And so when you say bad actors, do you mean someone who's an actual person who's just like, I am a bad actor and I'm going to take money? Or is it like a bad transaction of some kind, like a mistake or intentional.
00:28:04.354 - 00:28:05.010, Speaker B: Intentional.
00:28:05.090 - 00:28:06.130, Speaker A: Intentional. Bad actors?
00:28:06.210 - 00:28:06.742, Speaker B: Yes.
00:28:06.876 - 00:28:12.938, Speaker A: Okay, cool. Yeah, math, that makes sense.
00:28:13.024 - 00:28:39.522, Speaker B: This is like one of those. So the reason all this game theory stuff comes in is because given the fact that you want the network to be decentralized, you want it to be permissionless too, right? Where anybody can become a node. So you have to account for the fact that anybody can become a node. Even people who are not trustworthy, super shady, always wear their hoodie and like glasses in a dark room with their computer screen on green text.
00:28:39.656 - 00:28:42.942, Speaker A: That's exactly what I do when I'm doing something nefarious.
00:28:43.006 - 00:28:46.454, Speaker B: Of course. Yeah, this light turns green and like.
00:28:46.492 - 00:28:50.280, Speaker A: Yeah, I think I actually can change my lights to.
00:28:54.890 - 00:29:41.030, Speaker B: SVRF. We also have automation, so smart contracts are, I like to think of them as like extremely powerful, but also extremely lazy, and that they will do nothing on their own. I guess a lot of computer stuff is like that, right? Unless you have something like kind of poking at it and saying, okay, do work. It doesn't do work, automation does that. It uses, again, the don. So you have that fault tolerant distributed network that will run your smart contract for you, and you can run it like on a cron tab schedule or based on certain parameters within the blockchain itself, so it can check values and then return, like should I run or not? Got like that. We have functions which we'll get into today in one of the demos.
00:29:41.030 - 00:29:55.478, Speaker B: It's fairly new and I think probably the most powerful thing when it comes to what Chainlink offers and smart contracts and kind of like bringing them more mainstream. And that lets you run Javascript code from your smart contract.
00:29:55.574 - 00:29:59.658, Speaker A: So like serverless functions, but yes.
00:29:59.744 - 00:30:47.702, Speaker B: So what happens is the oracle nodes will get that Javascript, they'll spin up a little serverless environment, run the code like a little sandbox, get the result back, and then similar to how data feeds or the example we were talking about, temperature, they'll submit their value along with all the other oracle nodes, and then that answer will get kind of brought together as on chain, you'll get the value from all of them. And then we have CCIP, which is cross chain interoperability protocol. So we've talked about Ethereum, I'm sure everybody's familiar with that, probably. There's a lot of different chains out there though. There's Ethereum, there's polygon avalanche, and each one of these is its own little blockchain silo. They don't play nicely with each other, so you need a bridge to kind of connect them. Like little islands, I guess is a better way, a nicer way than a silo.
00:30:47.702 - 00:30:59.834, Speaker B: Little islands out there in the Caribbean. And they're close enough that you don't need boats, you just need a bridge to get between them. So that's what CCIP allows you to send either tokens or data across between chains.
00:30:59.962 - 00:31:09.170, Speaker A: I have a potentially silly question. Is a coin a chain or is it a smart contract on a train or something else?
00:31:09.240 - 00:31:17.938, Speaker B: Not a silly question. Very valid question. So a coin is, at the bottom of it all, a smart contract.
00:31:18.114 - 00:31:18.790, Speaker A: Okay.
00:31:18.940 - 00:31:30.106, Speaker B: And what that smart contract says is, we created this thing and this wallet address person has this many of this thing.
00:31:30.288 - 00:31:31.338, Speaker A: Got it.
00:31:31.504 - 00:31:32.780, Speaker B: If that makes sense.
00:31:33.630 - 00:31:48.846, Speaker A: Okay. It is a smart contract saying you have this many things. So I'll just use like, bitcoin as an example. It's a smart contract that says you have this many bitcoins, or it is the coin itself.
00:31:49.028 - 00:32:11.206, Speaker B: I don't want to talk about bitcoin specifically because I'm not sure if I'll be correct in what I'm saying. So we got it. I make Richard coin, right? We make Richard coin and our coin the favorite coin of all pirates. Our coin is an ERC 20 contract. That's the term for it. ERC 20. It's just a standard for the contracts, for tokens like that.
00:32:11.206 - 00:32:42.426, Speaker B: And within that contract, there'll be functions to allow you to transfer tokens to possibly mint tokens. So minting, like you think of the mint that mints coins, and then you can also possibly burn tokens to destroy them. If you needed to have a way to minting would be increasing the quantity of tokens that are available. Burning would be decreasing. Right. So if you needed some way to control total volume of coins, you could have that. And then it would also record which wallet addresses.
00:32:42.426 - 00:33:01.590, Speaker B: This is something I keep saying, right, wallet addresses. So a wallet address is going to be a crazy hex code. That is your public key, if you will, when you're interacting with the blockchain. So that address can own the coins.
00:33:02.090 - 00:33:09.530, Speaker A: Got you. Is it like a pointer? Like pointing at a contract, a wallet saying like, that's mine.
00:33:10.910 - 00:33:23.630, Speaker B: So normally within the contract, there will be a, I want to say array, but I don't believe that's right. Basically like a mapping of this contract. This many coins.
00:33:23.970 - 00:33:25.518, Speaker A: Got it. Okay.
00:33:25.604 - 00:33:27.898, Speaker B: This address, this many coins. Sorry, not contract.
00:33:27.994 - 00:33:41.582, Speaker A: Sure. Okay. I think I have drunk from the fire hose. I've learned a lot. We should build something, and maybe that'll help put all of this a bit more into place in our brains.
00:33:41.646 - 00:34:00.410, Speaker B: Yeah, sure. Do you want to start with the gitbook, and this is where an audience, we've been talking a lot, so I don't know if you need to do some jumping jacks, wake up, throw some coffee on your face, hopefully you will participate and play along with us, because everything here you can do right alongside Cassidy.
00:34:01.710 - 00:34:07.882, Speaker A: Let's go. Yeah, I have a fully empty repo that only has a readme in it, and so I'm ready.
00:34:07.936 - 00:34:27.330, Speaker B: Fantastic. Yeah. So in the gitbook, the first thing, just to kind of get this out of the way, if you want to play along, you will need node installed as well as some way to edit text, preferably vs. Code if you want to follow along. Exactly. But yeah, we'll go from there.
00:34:27.400 - 00:34:28.930, Speaker A: We could do it in notepad.
00:34:31.910 - 00:34:36.450, Speaker B: Or vim. Never emacs, though. That's not a controversial opinion.
00:34:36.610 - 00:34:37.320, Speaker A: Correct.
00:34:38.090 - 00:34:48.954, Speaker B: I'm glad we agree on that. Webinar over no. Yeah. So, yeah, we'll start with hello world, right? That's where we should always start.
00:34:49.072 - 00:34:49.690, Speaker A: Yes.
00:34:49.840 - 00:35:18.990, Speaker B: But before we get into hello world, we need a wallet. So a wallet is probably the most confusing on ramp into anything out there when it comes to development, in my opinion, from what I've seen. So you've already got metamask up on your screen. Metamask is a really common wallet. Real quick, high level, and we'll talk through this when you go through it. I guess I'll wait to say it then. But if you go to download, you'll install metamask.
00:35:18.990 - 00:35:24.740, Speaker B: What wallets are is they're essentially two things. They're a public private key pair. Are you familiar with those?
00:35:25.210 - 00:35:25.960, Speaker A: Yes.
00:35:26.570 - 00:35:30.790, Speaker B: Have you ever used PGP encryption?
00:35:32.490 - 00:35:34.598, Speaker A: Probably. I know what it is.
00:35:34.764 - 00:35:54.182, Speaker B: Right. So it's basically like you have a private key and you have a public key, and you can encrypt stuff with a private key and sign stuff with a private key. And with the public key, you can verify that was actually you who did it. Right. So you install metamask, and that's essentially like super high level what metamask is. Yeah. So this is something that always bugs me, that little fox.
00:35:54.182 - 00:36:08.834, Speaker B: So when you install metamask here, this is a side note. You'll type your password, and he's going to watch you type your password. It always bugs me. I remember there was some website I went to with a little animation. Like when you went to your password field, like these little hands came up and it covered its eyes.
00:36:09.032 - 00:36:09.794, Speaker A: I've seen that.
00:36:09.832 - 00:36:13.662, Speaker B: It was super cool. I like that a lot. Anyway, so we'll create a new wallet.
00:36:13.806 - 00:36:14.498, Speaker A: Okay.
00:36:14.664 - 00:36:26.150, Speaker B: And just throwing this out there, this wallet, you're never going to use it again. You're going to throw it away because we're going to talk through it and everybody's going to see your private phrase. Got it?
00:36:26.220 - 00:36:26.598, Speaker A: Yes.
00:36:26.684 - 00:36:31.530, Speaker B: You can make this password as simple as you want. If you're following along at home, make a good password.
00:36:35.070 - 00:36:39.098, Speaker A: This is not a strong password because I'm tossing it away later.
00:36:39.264 - 00:36:44.778, Speaker B: Yes. Here it will explain everything to you, but we can just click secure my wallet.
00:36:44.954 - 00:36:45.342, Speaker A: Okay.
00:36:45.396 - 00:36:59.700, Speaker B: So it's going to give you these twelve special words here in just a second. So what happens is behind the scenes, these twelve words are really what makes up your private key. So you put these twelve words in, hash them, and that creates your private key.
00:37:00.390 - 00:37:01.380, Speaker A: Got it.
00:37:02.710 - 00:37:17.366, Speaker B: In the crypto space, there's all these little, there's concepts of hardware wallets which will store your private key on a separate device. This little thing stores a private key. So it never lives on my computer. It's just a way of abstracting that.
00:37:17.388 - 00:37:19.340, Speaker A: Away because kind of like a Ub key.
00:37:21.470 - 00:37:22.220, Speaker B: Similar.
00:37:22.590 - 00:37:23.194, Speaker A: Okay.
00:37:23.312 - 00:37:41.294, Speaker B: Similar is good enough. Yeah. So the private key lives on here because you don't want to necessarily live on your computer. If you're doing things where there's like actual financial transactions that are of value. Right. For testing purposes and everything, you can just make a new wallet and throw it away. That's fine.
00:37:41.294 - 00:37:56.420, Speaker B: Okay, cool. So these twelve words, they get hashed into your private key and then you have that private public key pair. So you will show these. And again, these are the things just to clarify for anyone who's new to web3, if anybody has these, they have access to your account.
00:37:56.950 - 00:37:57.602, Speaker A: Great.
00:37:57.736 - 00:38:09.974, Speaker B: Okay. Yeah, there's a little copy button. Yeah. And you can just paste them to the side. You will need to have access to them because you're going to confirm them in a second so that metamask knows that you copied them down correctly.
00:38:10.102 - 00:38:11.180, Speaker A: Okay, cool.
00:38:11.790 - 00:38:13.674, Speaker B: Yeah. Click next and then. Yes. Those.
00:38:13.792 - 00:38:26.858, Speaker A: Gosh. Okay. Pilot.
00:38:26.954 - 00:38:32.430, Speaker B: Okay, cool. So it's like, hey, you must have them because you have those random three.
00:38:32.580 - 00:38:32.958, Speaker A: Got it.
00:38:32.964 - 00:38:33.342, Speaker B: Good job.
00:38:33.396 - 00:38:37.582, Speaker A: Okay, cool, we did it. Should I do any advanced configuration?
00:38:37.646 - 00:38:39.298, Speaker B: No, you're good. Just click. Got it.
00:38:39.384 - 00:38:41.042, Speaker A: Cool. Got it. Done.
00:38:41.096 - 00:38:56.854, Speaker B: So, yeah, they've added a lot of information stuff in here also. You might want to pin this add on to your up there, which I know it's, it's like a. Yeah. Where I make it one of those things.
00:38:56.972 - 00:38:57.622, Speaker A: There we go.
00:38:57.676 - 00:39:17.258, Speaker B: Yeah. Extension. There you go. Cool. So you can see here now you have a wallet that crazy underneath the word account, that is your public address. And so if you copy it and paste it into the readme next here, you'll see what's going on. It's crazy cute.
00:39:17.258 - 00:39:18.158, Speaker B: Yeah.
00:39:18.324 - 00:39:25.766, Speaker A: By the way, if anybody needs me to zoom in, let me know. We'll keep my tech size the same, otherwise.
00:39:25.898 - 00:39:39.560, Speaker B: Yeah, so that's your public address. Right. So this is another thing there are ways of. There's a whole project, just a side note called ENS. It's the Ethereum name service. This is like an IP address. Okay, sorry.
00:39:39.560 - 00:39:41.046, Speaker B: Bring it back.
00:39:41.068 - 00:39:42.280, Speaker A: But I know what it is.
00:39:43.370 - 00:39:56.294, Speaker B: But yeah, so that's basically like a DNS service. Right. So this is like an ip address. You'd never want to tell anybody this. If they're going to send you a transaction. You're always going to want to be like, oh, it's just like Cassidy Eth.
00:39:56.422 - 00:39:57.194, Speaker A: Yeah.
00:39:57.392 - 00:40:26.260, Speaker B: So that's where ENS comes in. But this is how you are known on the blockchain now. Cool. You have a wallet from here. There are a couple of things that we need to do real quick since we're going to be using testnets. So this is Ethereum mainnet that you're looking at right now. If you click the three dots in the top right hand corner and go to settings and then advanced or maybe under networks now.
00:40:26.260 - 00:40:30.850, Speaker B: Yes, it's right there. Sorry, it's show testnets. Yeah, test networks.
00:40:30.930 - 00:40:31.846, Speaker A: Got it.
00:40:32.028 - 00:40:34.902, Speaker B: This is how we get to those places where we can use our monopoly money.
00:40:35.036 - 00:40:36.294, Speaker A: I love the monopoly money.
00:40:36.332 - 00:40:48.234, Speaker B: Yeah, it's fantastic. Right, so we've got our wallet set up. We need to go get some monopoly money. Before we do that. In the top left hand corner where it says ethereum mainnet. Top left.
00:40:48.352 - 00:40:49.706, Speaker A: Top left. Got it.
00:40:49.888 - 00:41:03.402, Speaker B: We'll change that to Sepolia. Okay, cool. And now if we close this, you'll see you still have $0 of Sepolia eth now though, right? So it did say eth. Now it says sepolia eth because we're on a test network.
00:41:03.546 - 00:41:04.814, Speaker A: Got it. Okay.
00:41:05.012 - 00:41:09.940, Speaker B: Yeah. So now we're in like whose line is it anyway? Where the numbers are made up and the points don't matter.
00:41:10.950 - 00:41:12.626, Speaker A: Perfect, I'm ready.
00:41:12.808 - 00:41:21.510, Speaker B: If you go back to the gitbook, there's a little information window that says for this workshop, you can use the workshop faucet.
00:41:22.170 - 00:41:26.466, Speaker A: Okay, let me paste that in here. Workshop faucet.
00:41:26.578 - 00:41:53.986, Speaker B: And the password for everybody following along at home is in there as well. Why do we have a specific workshop faucet? This is some fun little trivia knowledge. I'll digress a little bit here. So I've said monopoly money a bunch of times, right? There was a .1 of those test networks that you saw a minute ago said, go early. Go early is a different test network. It's being slowly spun down as another test network is being spun up.
00:41:53.986 - 00:42:11.398, Speaker B: But there was an issue where people were not having any funds in the Testnet and people were actually like, they were buying testnet funds. So it became suddenly the monopoly money had real value.
00:42:11.484 - 00:42:12.998, Speaker A: It all of a sudden was real.
00:42:13.084 - 00:42:48.180, Speaker B: Yeah. It became real money overnight. It wished on the shooting star and became real money. So because of that. So Chainlink Labs has a faucet where you can get funds, but it's turned off most of the time for the sepolia eth side of things. In this example, because people will pay to have solved captchas, they will pay to create fake Twitter accounts and create bots to watch the faucets and drain them immediately in the hope that the stuff becomes worth real money again, which is just, it's crazy.
00:42:49.030 - 00:42:49.906, Speaker A: What a world.
00:42:50.008 - 00:43:11.578, Speaker B: Yeah. Okay. Anyway, so we have one for workshops that we keep. We can just pop stuff into here to fund it as we go. So this is a faucet. What you'll do here is you will click on your little metamask fox face, dude. In your bar up above, you'll click on, you got to get like three things.
00:43:11.578 - 00:43:22.294, Speaker B: Got it. Good. You'll click on your address up at the top. Right there. Yes. And then you'll paste that into your address bar there and you'll click send request.
00:43:22.422 - 00:43:23.002, Speaker A: Okay.
00:43:23.136 - 00:43:33.914, Speaker B: Do I want the, you want both of them? Yes. That'll be perfect. So there's eth. Right? So we've talked about that. That's. We're going to pay gas fees in. That's like the native token.
00:43:33.914 - 00:43:39.794, Speaker B: There's also this other thing over there called what. What is Zelda doing in my browser? Right.
00:43:39.832 - 00:43:40.770, Speaker A: Hey, listen.
00:43:40.920 - 00:43:57.670, Speaker B: Yeah. Oh, bad memories. Amazing. Game on n 64, though. So link is the token that we use within the chain link Oracle network. It's how we incentivize the oracle nodes to do work. Think of it like Chainlink's version of gas.
00:43:57.670 - 00:44:13.200, Speaker B: It is a token like we were talking about earlier. One cool thing about it is it has a transfer and call function, which I like to think of that as not only can I transfer tokens around, but transfer and call lets me attach like a sticky note to it that says, when you get this money, here's what you got to do with it.
00:44:13.650 - 00:44:14.062, Speaker A: Okay.
00:44:14.116 - 00:44:15.150, Speaker B: Which is pretty cool.
00:44:15.300 - 00:44:17.214, Speaker A: It's like a memo line and a check.
00:44:17.332 - 00:44:36.718, Speaker B: Yes, great analogy. Not so much for the youths probably, but yes, spot on. So this is what link tokens is. We'll use those when we get to functions. So once this is complete, if you go back to your metamask wallet, you should see your zero now has turned into 0.5.
00:44:36.824 - 00:44:38.422, Speaker A: Wow, look at us go. Okay.
00:44:38.476 - 00:44:41.480, Speaker B: We can't see the link yet though, right?
00:44:42.170 - 00:44:45.718, Speaker A: Yes, I'm refreshing. Oh, I probably could have put we.
00:44:45.724 - 00:45:06.846, Speaker B: Can'T see it at all. So there's a reason for that we haven't added it to our metamask wallet. In the gitbook, at the bottom of that hello world, there's another little info box that says you can use the link token. And then. So here, this is where link is deployed on all these different networks. So we're on the sepolia test network. If you scroll down, just a scotch right there.
00:45:06.846 - 00:45:09.470, Speaker B: Yep. There's a button that says add to wallet.
00:45:11.810 - 00:45:16.222, Speaker A: Okay. Metamask notification. Wow, look at that.
00:45:16.356 - 00:45:25.218, Speaker B: Yeah. So it's going to actually add it to your wallet. So this didn't add link tokens to your wallet. They were already there. This just told metamask, like, hey, this is other thing that you should pay attention to.
00:45:25.384 - 00:45:26.350, Speaker A: Gotcha.
00:45:26.510 - 00:45:27.970, Speaker B: So now if you look at metamask.
00:45:28.050 - 00:45:30.102, Speaker A: Tokens, quick side question.
00:45:30.236 - 00:45:31.160, Speaker B: Yeah, sure.
00:45:31.850 - 00:45:38.966, Speaker A: This add to wallet, does it just, like, pay attention to the fact that metamask is installed in my browser? Wow. Yeah.
00:45:38.988 - 00:45:41.982, Speaker B: So metamask modifies the window object of your browser.
00:45:42.066 - 00:45:44.294, Speaker A: Gotcha. Okay. And that's how it's all connected.
00:45:44.342 - 00:45:45.146, Speaker B: Got it. Yes.
00:45:45.248 - 00:45:46.634, Speaker A: Cool. And look, there it is.
00:45:46.672 - 00:45:58.014, Speaker B: Yeah, perfect. So now you can see how much you had. If you hadn't added this, you could still do everything else in this course because you still have it. It's just metamask. Didn't know to tell you you had it.
00:45:58.132 - 00:45:58.798, Speaker A: Got you.
00:45:58.884 - 00:46:00.302, Speaker B: Okay, cool.
00:46:00.356 - 00:46:07.234, Speaker A: Is that what I would have to do with any different coin? Or is it that specifically the call and response? Got it.
00:46:07.272 - 00:46:15.614, Speaker B: No. Yeah. So any coin metamask may have some built into it. I'm not sure about that, but this is the same idea for any coin.
00:46:15.742 - 00:46:18.242, Speaker A: Got it. Okay, cool.
00:46:18.376 - 00:46:23.318, Speaker B: So we've got a wallet. We've got funds in our wallet. Like, we are ready to go play monopoly with our monopoly money.
00:46:23.404 - 00:46:38.540, Speaker A: Okay, I'm actually going to just write this down. Sure. Wallet, got funds in the wallet. Okay. Actually, I should do get. Okay, cool. Next step.
00:46:39.150 - 00:46:47.630, Speaker B: All right, so next, if you go back to the gitbook, in between those two information things, at the bottom there's deploy your first smart contract.
00:46:47.970 - 00:46:48.720, Speaker A: Okay.
00:46:49.090 - 00:46:52.634, Speaker B: And we get to skip a lot here because this walks you through setting up metamask.
00:46:52.762 - 00:46:54.042, Speaker A: Oh, nice. Yay.
00:46:54.106 - 00:47:10.562, Speaker B: So we can skip down to number two. Okay, so before we do anything, that's the smart contract right there. You can see it, we're going to be using something called remix. And I know you might be getting excited because you're like, oh yeah, I know, remix, that's Javascript framework.
00:47:10.706 - 00:47:13.078, Speaker A: It's a web framework. Yay, that one.
00:47:13.164 - 00:47:34.430, Speaker B: Gosh darn it. But it is pretty cool. So what remix in this instance is, is Ethereum's online ide, basically. So it's a browser based ide. We can write our smart contracts there, we can compile them, it'll let us know if there's any errors. We can deploy them to a blockchain.
00:47:35.250 - 00:47:35.710, Speaker A: Okay.
00:47:35.780 - 00:47:48.702, Speaker B: Which is pretty cool. And then we can also, once they're deployed, we can interact with them on the blockchain. Pretty cool. So, yes, we can either go to remix and paste this in, or you can click that little button that says open in remix and it'll take you right to this code in remix.
00:47:48.846 - 00:47:50.420, Speaker A: Wow. I will do that.
00:47:51.270 - 00:47:52.898, Speaker B: That's the option I would choose.
00:47:53.064 - 00:47:57.080, Speaker A: Great. Okay, sure.
00:47:58.970 - 00:48:03.160, Speaker B: Learning this is something they just added. There's a lot of button clicking now.
00:48:03.610 - 00:48:06.550, Speaker A: It's probably good to figure out where people drop off. Okay.
00:48:06.700 - 00:48:19.370, Speaker B: Tells you everything. So, cool. We've got our smart contract here. It's not very long, but let's walk through what it does. So the first line there, we've got our licensing on line one.
00:48:19.520 - 00:48:20.234, Speaker A: Okay, great.
00:48:20.272 - 00:48:37.230, Speaker B: On line three, this pragma solidity business, that's us telling solidity what version of compiler to use. Okay, cool. We've got some comments say, hey, don't use this hello world in production because, oh no, now everything's terrible.
00:48:37.650 - 00:48:39.200, Speaker A: Okay, go on.
00:48:39.730 - 00:49:00.780, Speaker B: Chainlinks labs does not approve this message. So then we have our actual code. Right. So on line ten is where we start declaring the contract. So within this solidity file, so it's a Sol file, you can have multiple contracts if you wanted to. Okay, this one's called hello world. On line eleven, we've got a string that's public called message.
00:49:00.780 - 00:49:27.730, Speaker B: So there's three main flavors of variable. There's public, which means anybody can read it on the blockchain. If something's public, it's public. So just like keep that in mind. Anybody can read this anywhere. Okay, we have private, which will only be read by those contracts within this contract. Right.
00:49:27.730 - 00:49:57.018, Speaker B: And then we have internal, we have our constructor that is a special function that runs when you deploy the contract. So it only runs once when we actually deploy the contract. In this case, it takes in a string and sets the public variable message to what we pass in. So this lets us set our message when we deploy the contract. And then we have another function to update. That message takes in a string. You'll notice this function is public as well.
00:49:57.018 - 00:50:01.040, Speaker B: That means anybody can call it and they can update the message.
00:50:01.810 - 00:50:13.154, Speaker A: Okay, this feels very much like Java with some types and stuff. So when it says string, memory, is memory a type of string, so that.
00:50:13.192 - 00:50:18.478, Speaker B: Means that we're just holding that string in memory and it's not being committed.
00:50:18.654 - 00:50:35.362, Speaker A: Got it. Okay, cool. So if I were to make it string private, let's just say would anybody looking at this transaction, they wouldn't see the message, but they would see that the transaction existed or the contract.
00:50:35.506 - 00:50:43.738, Speaker B: So they would be able to see the values when you deployed it, but they wouldn't later be able to query that variable, if that makes sense.
00:50:43.824 - 00:50:47.834, Speaker A: Okay, cool. So only on deploy it's seen.
00:50:47.952 - 00:50:52.480, Speaker B: So any transaction that you do, that transaction is public.
00:50:52.850 - 00:50:54.830, Speaker A: Got it? Yes.
00:50:54.980 - 00:51:21.720, Speaker B: Okay, cool. So if you set it to private and the initial message was hello, and then later on in the constructor you just set it to like message equals goodbye, it would be goodbye. And everyone would be able to see that you deployed this code so they could infer what it was. But there's not a way within the blockchain to actually read that value.
00:51:22.330 - 00:51:25.960, Speaker A: Okay, so only the people who saw the transaction will see the message.
00:51:26.330 - 00:51:30.410, Speaker B: But remember it's a public ledger so everyone has access to that transaction.
00:51:30.990 - 00:51:41.180, Speaker A: So I think I'm confused then about the privacy of it. Then like the blockchain can't see it, but others can.
00:51:43.490 - 00:51:58.980, Speaker B: Sorry if this is a no. Okay, this will be easier to do. So just put that back how it was. Make a new string private and just call it like secret or whatever, and you'll see what I mean by you won't be able to see it later.
00:51:59.750 - 00:52:01.060, Speaker A: Okay, cool.
00:52:01.990 - 00:52:04.402, Speaker B: Okay, great.
00:52:04.456 - 00:52:07.494, Speaker A: And then should I do like secret equals something?
00:52:07.692 - 00:52:08.440, Speaker B: Sure.
00:52:10.490 - 00:52:12.694, Speaker A: Okay, great, cool.
00:52:12.732 - 00:52:48.466, Speaker B: I don't know that we want to necessarily get into showing all the deploy stuff, but I'll show you high level what I'm talking about with it being, yeah, okay, cool. If you go on the left hand side, see the things like the red one. Yeah, that's a compiler. It's complaining right now because the compiler version that you have set in this doesn't match the one that it has set to be the compiler. So you can just leave it alone. If you just click the auto compile checkbox right there. Right there, it'll match.
00:52:48.568 - 00:52:49.042, Speaker A: I see.
00:52:49.096 - 00:53:00.486, Speaker B: Okay, so we're good. Okay, so if you're playing long at home, you've clicked that open and remix button and you've just gone to the compiler tab and clicked autocomplete. And now you have a green check mark. Hey, everything's happy.
00:53:00.588 - 00:53:01.238, Speaker A: Wow.
00:53:01.404 - 00:53:04.118, Speaker B: Okay, so now we can deploy this if you want.
00:53:04.284 - 00:53:04.854, Speaker A: Yeah.
00:53:04.972 - 00:53:24.498, Speaker B: Okay, so we'll click on the next tab down. The little ethereum with the arrow. It's a little ethereum. Diamond shape. Yep. Okay, so here, environment remix also has these vms where you can deploy and interact with your contracts on a virtual blockchain. Okay, let's deploy on the real blockchain.
00:53:24.498 - 00:53:35.538, Speaker B: If you click that and you click injected provider metamask. So this is then going to probably prompt you from metamask if it didn't pop up. If you click on him, he's got.
00:53:35.544 - 00:53:39.266, Speaker A: A little, oh, it's over here. Got it.
00:53:39.288 - 00:53:55.202, Speaker B: So he's saying, hey, do you want to allow this website to connect your metamask? And you say sure, let's go. And it says it can see these things, so it's letting you know what's happening. But now we've connected. So now remix can see your metamask wallet.
00:53:55.346 - 00:54:00.298, Speaker A: Okay, got it. And that's my address too.
00:54:00.384 - 00:54:14.106, Speaker B: Yes. So it doesn't have access to your private information. It can prompt you to do things, but it can see your public key. So if in deploy, next to deploy, you can type a string like whatever you want to set your initial string.
00:54:14.138 - 00:54:17.680, Speaker A: To just say sub nerds. Okay.
00:54:18.130 - 00:54:25.066, Speaker B: And then before you click it, you'll notice how that one's blue and the one at address below is or, sorry, that one's orange and the one below is blue.
00:54:25.178 - 00:54:25.742, Speaker A: Yeah.
00:54:25.876 - 00:54:43.160, Speaker B: In remix they do this thing where orange buttons mean that you're going to have to pay. They're going to be actually causing a state change on the blockchain. So that's going to cost you gas. Blue buttons are normally view functions and viewing information on the blockchain is free because all you're doing is saying, hey, I'm just looking at the information.
00:54:43.530 - 00:54:50.426, Speaker A: Got it. So should I spend the money and click the orange button?
00:54:50.528 - 00:54:56.410, Speaker B: Let's spend those monopoly dollars. Yeah, just to make sure you see how it says on the top left, sepolia.
00:54:57.310 - 00:54:58.060, Speaker A: Yes.
00:54:58.510 - 00:54:59.990, Speaker B: So we're good. They're monopoly.
00:55:00.070 - 00:55:00.874, Speaker A: We're good.
00:55:00.992 - 00:55:05.566, Speaker B: Yeah. All this stuff you can just click confirm and we're good to go.
00:55:05.748 - 00:55:06.478, Speaker A: Okay.
00:55:06.644 - 00:55:20.020, Speaker B: And now there's this weird experience for a lot of computer developers where you're just kind of like waiting. You'll notice down the bottom there's a little terminal window at the bottom viewer window. And hey, you got that green check mark now. But there was like a delay, right?
00:55:20.390 - 00:55:23.314, Speaker A: It's like a compilation or is that just a check?
00:55:23.352 - 00:55:32.034, Speaker B: That's it. Waiting to actually go out to the blockchain, be mined onto a block and submitted and have that transaction completed.
00:55:32.162 - 00:55:33.126, Speaker A: Wow. Okay.
00:55:33.228 - 00:55:49.498, Speaker B: So this is something that is very weird to a lot of people is like anytime you do a transaction like that, essentially what you're doing is like, I want to pass this check right in my ledger. Right. I want to give you your $100 check. We have to wait for the blockchain to go. Yes, we're all writing down. Yes, we got this. Okay, cool.
00:55:49.498 - 00:55:58.490, Speaker B: And they all agree. Hey, okay, we got this. So you have to wait for that confirmation to come back. Basically that this information has been added to the blockchain.
00:55:58.650 - 00:56:01.182, Speaker A: Okay, so the green check means that it is.
00:56:01.236 - 00:56:06.414, Speaker B: You're good to go. Yes. On the left hand side, deployed contracts. That's your contract.
00:56:06.542 - 00:56:07.220, Speaker A: Wow.
00:56:07.590 - 00:56:15.540, Speaker B: Right there. Yes. So this is what I mean by the public and private. Do you see how message shows up there as something you can look at?
00:56:16.090 - 00:56:16.742, Speaker A: Yes.
00:56:16.876 - 00:56:18.470, Speaker B: But do you see secret?
00:56:19.130 - 00:56:19.926, Speaker A: No.
00:56:20.108 - 00:56:26.790, Speaker B: So this is what I mean. Right. So it's still stored on chain. You can't just easily query it.
00:56:26.860 - 00:56:28.118, Speaker A: You can't just look at it.
00:56:28.204 - 00:56:40.060, Speaker B: Your transaction of deploying this contract that's stored on chain though. So the fact that secret exists is there and what it is, that transaction still is recorded. Does that make sense?
00:56:40.370 - 00:56:51.438, Speaker A: It does. Okay. It does. We know that it exists, but we just can't see its value.
00:56:51.604 - 00:56:52.318, Speaker B: Right.
00:56:52.484 - 00:56:53.422, Speaker A: Got it. Okay.
00:56:53.476 - 00:56:55.822, Speaker B: Yeah. Cool.
00:56:55.876 - 00:56:56.094, Speaker A: Wow.
00:56:56.132 - 00:57:06.082, Speaker B: So sub nerds works. You have your function to update your message as well. And so you'll notice too. Message is blue. Right. Because that's because we're just reading data from the blockchain. It's free.
00:57:06.082 - 00:57:08.280, Speaker B: Because where is that processing happening?
00:57:09.050 - 00:57:14.530, Speaker A: Yeah. So it's blue when you want to just view and not make any modifications to the chain.
00:57:14.610 - 00:57:18.598, Speaker B: Correct. Because any processing from that function is happening on your side.
00:57:18.764 - 00:57:19.254, Speaker A: Got it.
00:57:19.292 - 00:57:26.090, Speaker B: Right. You're not asking the nodes within the network to do work. They've already done their work. You're just saying, hey, show me the work you've done.
00:57:26.240 - 00:57:27.660, Speaker A: Got it. Okay.
00:57:29.710 - 00:57:40.174, Speaker B: In the checkbook example, I can ask to look at your checkbook ledger at any time. You're like, sure, here, I've already done all the hard work, but if I want you to compute my new balance after I write a check, well, I have to pay you to do that.
00:57:40.292 - 00:57:48.820, Speaker A: Got it. Okay, cool. Yeah. And I see like with update message, that's the function in the smart contract that I can call.
00:57:52.250 - 00:57:53.000, Speaker B: Yes.
00:57:54.010 - 00:57:54.760, Speaker A: Cool.
00:57:55.770 - 00:57:57.970, Speaker B: So is this your first smart contract you've ever deployed?
00:57:58.050 - 00:57:58.630, Speaker A: Yeah.
00:57:58.780 - 00:57:59.522, Speaker B: Fantastic.
00:57:59.586 - 00:58:00.514, Speaker A: Very exciting.
00:58:00.642 - 00:58:07.018, Speaker B: I'm proud. Woohoo. I'm curious, in the chat, did anybody deploy a contract for the first time?
00:58:07.104 - 00:58:07.354, Speaker A: Yeah.
00:58:07.392 - 00:58:09.500, Speaker B: Has anybody done it or second time?
00:58:11.550 - 00:58:12.410, Speaker A: Yay.
00:58:13.810 - 00:58:16.602, Speaker B: I'd love to know if you just deployed your first smart contract.
00:58:16.746 - 00:58:22.498, Speaker A: Nice. Should I save this to the repo? I suppose it's just hello, world.
00:58:22.584 - 00:58:24.820, Speaker B: Yeah, it's okay. You don't need to do that.
00:58:25.190 - 00:58:25.602, Speaker A: Wow.
00:58:25.656 - 00:58:38.934, Speaker B: Okay, so now we're going to do a massive step up in complexity from hello, but it'll be fun. So if we go back to. We'll keep this tab open.
00:58:39.052 - 00:58:39.574, Speaker A: Okay.
00:58:39.692 - 00:58:45.750, Speaker B: And we'll go back to the git book on it. Nick. Congrats. Narb.
00:58:46.990 - 00:58:55.146, Speaker A: Sorry, the zoom window is. There we go. Okay, I got to move it back. Okay, cool, I'm in.
00:58:55.248 - 00:59:25.620, Speaker B: So we went through hello world, knocked that out of the park. We're going to now work on a much more complex smart contract. Also, to anybody following along at home, there is a GitHub repo with all this code, like fully done. It's linked a couple of times throughout this document. So what we're going to build is I was looking for a news source that had an API that didn't require API keys, just for ease of use. And the only one I could find was hacker news. So we'll be using hacker news.
00:59:25.620 - 00:59:44.522, Speaker B: Hey, it'll be good. So we'll look at the latest stuff from Hacker News, and I'm realizing it's one of the things I was saying the last night. It's like, man, this is kind of like a risky bet for a webinar to just pull the newest article off. We'll hope it's. It's fine.
00:59:44.576 - 00:59:45.338, Speaker A: It'll be fine.
00:59:45.424 - 00:59:51.946, Speaker B: It'll be fine. Next step is talking about moderation on the blockchain where everything's on a permanent ledger and how that can be problematic.
00:59:52.058 - 00:59:59.118, Speaker A: Yeah, one time I made the mistake of doing the urban dictionary API. Don't do that in public, people.
00:59:59.284 - 01:00:26.550, Speaker B: Okay. Yeah, that feels risky too. Yeah, maybe we should have stuck with the Pokemon API. But anyway, hey, so we'll take the news stories, and we'll store them on chain, and then we're going to build a front end to display them. And I will tell you, I know, Cassidy, that you like front end stuff, so feel free to add any sort of flair to me. I grew up as a backend dev, so I'm like the. Hey, data on screen.
01:00:26.550 - 01:00:28.118, Speaker B: It works. It's great.
01:00:28.204 - 01:00:28.854, Speaker A: That's enough.
01:00:28.972 - 01:00:37.210, Speaker B: Yeah, that's. That's where most of my experience is. Like, wait, you want me to put this in a web browser? What are you talking about? It's on the command line. What do we need a browser for?
01:00:37.280 - 01:00:39.978, Speaker A: It's there. There's a check mark. It's green.
01:00:40.064 - 01:01:05.410, Speaker B: Okay. Yeah, I'll just say it's not the most beautiful application, but, hey, it works. Okay, hopefully because it's live. So we'll build out the smart contract for that, and then we'll use Astro for the front end. And, yeah, we'll use chain link functions to make that API call. Okay, so you want to copy this massive chunk of stuff here. If you kind of hover over it, there's a copy button.
01:01:05.480 - 01:01:07.462, Speaker A: Oh, there's a copy button. Thank goodness. Okay.
01:01:07.516 - 01:01:09.474, Speaker B: Yes. And then go back to remix.
01:01:09.522 - 01:01:11.320, Speaker A: Go back to remix. Okay.
01:01:11.770 - 01:01:23.542, Speaker B: And we'll go back to the very top, the two pages. Yeah, we'll change from code sample to default at the very top their workspace.
01:01:23.606 - 01:01:23.882, Speaker A: Sorry.
01:01:23.936 - 01:01:24.858, Speaker B: Yeah, sorry.
01:01:25.024 - 01:01:26.394, Speaker A: Cool. And then create a new one.
01:01:26.432 - 01:01:27.500, Speaker B: Create a new one.
01:01:28.110 - 01:01:28.570, Speaker A: Okay.
01:01:28.640 - 01:01:30.942, Speaker B: And then we'll just say, make a blank one.
01:01:31.076 - 01:01:37.646, Speaker A: Blank one. We're going to call it decentralized news. How about that?
01:01:37.748 - 01:01:40.638, Speaker B: Sure, sounds great.
01:01:40.804 - 01:01:42.498, Speaker A: Okay, cool.
01:01:42.584 - 01:01:50.530, Speaker B: All right. And we'll make a new file in here. We can call it news soul.
01:01:51.990 - 01:01:52.450, Speaker A: Cool.
01:01:52.520 - 01:02:05.574, Speaker B: We'll paste in here. And this is something that's interesting about remix. So given all the crazy stuff that happens in the blockchain space, that warning was like, hey, you paste a code, make sure you know what the heck it's doing.
01:02:05.772 - 01:02:08.460, Speaker A: That's probably a good thing to warn people.
01:02:10.430 - 01:02:33.170, Speaker B: With blockchain, I like to think of wallets kind of reminding me of Spider man and Uncle Ben. Great. Power comes great. So, like, you have a wallet, and that means you have full custody over your assets. Lots of responsibility comes with that. Full custody. There's no calling up metamask and being like, hey, I noticed some fraudulent transactions on my account.
01:02:33.170 - 01:02:37.140, Speaker B: Can you just cancel them, please? Because it's done.
01:02:37.510 - 01:02:44.882, Speaker A: Yeah. So it's like, more of a debit card than a credit card. Yeah, for better or for worse. Okay, cool.
01:02:45.016 - 01:02:46.306, Speaker B: All right, be safe.
01:02:46.338 - 01:02:47.430, Speaker A: Make good choices.
01:02:48.330 - 01:03:11.414, Speaker B: This contract, way more complex than the other contract. Yeah, but it starts out the same. Hey, look at that. We've got our license information and our compiler version. This should, lines four through six probably look familiar if you're a JavaScript dev. Yeah, we're importing stuff and it looks pretty similar to like normal JavaScript imports.
01:03:11.462 - 01:03:17.418, Speaker A: Going to say it feels very, it's like combo Javascript typescript Java.
01:03:17.514 - 01:03:37.286, Speaker B: Yeah, it's interesting. Right. So what we're doing there is we're importing other contracts basically to give us access to all the stuff that's in those contracts. Okay. Then on line eight, our contract is called functions consumer example, and it is a functions client and a confirmed owner. You'll notice those are imported up above. Right.
01:03:37.286 - 01:03:41.814, Speaker B: So this is like normal programming stuff. We feel comfortable with this.
01:03:41.852 - 01:03:44.306, Speaker A: Yeah. Okay, this seems reasonable.
01:03:44.338 - 01:04:09.006, Speaker B: So far we've got a using functions request for functions request request. Again, we're using our functions request that we imported. So we're using that contract and the types from there for our functions request. Cool. We've got some values that we've, or variables that we've created for request id, response and error. They're bytes type, which is maybe weird to some people, basically just like an encoded string. So I like to think of them.
01:04:09.028 - 01:04:10.960, Speaker A: Got it. Okay, that's what I was going to ask.
01:04:11.890 - 01:04:24.734, Speaker B: Bytes and bytes. 32 bytes. 32 is 32 bytes long. It's a specific length versus bytes, which just look more flexible. Again, going back to being more efficient. This is where things like this start to matter, the length of things. If you can tell, it's always going to be this length.
01:04:24.734 - 01:04:28.246, Speaker B: That's more efficient than it having to figure that out.
01:04:28.348 - 01:04:29.046, Speaker A: Right?
01:04:29.228 - 01:04:38.966, Speaker B: Yeah, we've got error messages, an event. So that event on line 17 is something that we can emit, and that's like logging for the blockchain.
01:04:39.158 - 01:04:39.900, Speaker A: Okay.
01:04:42.590 - 01:04:47.260, Speaker B: Yes, it's public. Right. But that lets everyone know that this thing happened.
01:04:47.950 - 01:04:48.940, Speaker A: Got it.
01:04:49.390 - 01:04:59.470, Speaker B: We've got some variables for functions specifically that are set up. The only one that we really need to pay attention to is on line 26, that subscription id. We'll need to replace that with our own subscription.
01:05:00.450 - 01:05:04.542, Speaker A: And is that when you say subscription like our key thing?
01:05:04.596 - 01:05:06.058, Speaker B: We'll create a subscription here in just a second.
01:05:06.084 - 01:05:07.490, Speaker A: Okay, we're creating one. Got it.
01:05:07.560 - 01:05:36.780, Speaker B: Yeah, we'll create one. And then we've got our Javascript source on line 37 that will put our javascript in there. And this is like, I don't know how long you've been doing web dev. Way back in the day when it was HTML and dial up, you used to do things like putting your entire website on one line because new line characters are a character and if you download a new line character, it takes longer.
01:05:37.950 - 01:05:39.130, Speaker A: Oh gosh. Okay.
01:05:39.200 - 01:05:58.126, Speaker B: When you would FTP your code up to the web server, I was going to say is this, it would be FTP one line. So we're going to be doing that here though, just to kind of make things easier for ourselves. It's all in the gitbook. It's copy and paste. Great. We've got a constructor, right? This constructor doesn't set anything at the beginning in there. There's no code, it just runs.
01:05:58.126 - 01:06:05.734, Speaker B: And there's a couple of things that are passed into functions. Client and confirm, owner, message sender. Do you know who that is?
01:06:05.932 - 01:06:07.094, Speaker A: Is that me?
01:06:07.212 - 01:06:13.158, Speaker B: It is, it's whoever's deploying this. So it's whoever's actually sending it. Yes. Okay, good answer.
01:06:13.324 - 01:06:14.840, Speaker A: Wow. Okay.
01:06:15.210 - 01:06:38.750, Speaker B: Yeah. And then we've got a send request. This is where we're going to actually send the request out to the functions network. It's where I'll send our javascript to chainlink. It'll run that function and then once that's done, the Oracle network will reach back into our contract and call fulfill request. Okay, so we don't have any of our specific code in here yet. This is just kind of like the skeleton and we need to flesh it out.
01:06:38.900 - 01:06:41.440, Speaker A: Yeah. It's a very meaty skeleton, though.
01:06:42.070 - 01:06:44.402, Speaker B: It's a beefy skeleton, yes.
01:06:44.536 - 01:06:45.730, Speaker A: Good bones.
01:06:46.630 - 01:06:48.930, Speaker B: Lots of milk and calcium in this skeleton.
01:06:50.070 - 01:06:50.820, Speaker A: Okay.
01:06:51.590 - 01:06:56.040, Speaker B: These are the uninteresting bits, I guess, right. That are not specific to what we're doing.
01:06:56.730 - 01:07:04.278, Speaker A: Yeah. Okay. And also when I see this undefined gas, infinite gas, what are these? It reminds me of like git lens or something.
01:07:04.444 - 01:07:16.154, Speaker B: So what's the plugin vs code? They'll tell you the size of stuff. It's more like that. Okay, so that's remix, trying to tell you how much it would cost to run this thing.
01:07:16.272 - 01:07:17.034, Speaker A: Got you.
01:07:17.152 - 01:07:30.560, Speaker B: And there's sometimes that like, well, if you're passing in a value, it's like, how long is a piece of string? Depends on the string, right. It's like, how much does this cost? Depends on what you pass in.
01:07:31.330 - 01:07:31.886, Speaker A: Okay.
01:07:31.988 - 01:07:42.450, Speaker B: That's when it starts to get kind of like freaked out with the undefined or infinite guess. It doesn't mean it's going to actually take that it means that it's possibly my question. It could take that technically.
01:07:43.510 - 01:07:45.814, Speaker A: Got you. Like if you mess up.
01:07:46.012 - 01:07:46.760, Speaker B: Yeah.
01:07:47.690 - 01:07:49.000, Speaker A: Okay, cool.
01:07:49.770 - 01:07:56.310, Speaker B: So do you want to start messing with the code stuff first or do you want to make a function subscription?
01:07:58.030 - 01:08:00.714, Speaker A: Let's make a function subscription first.
01:08:00.912 - 01:08:05.020, Speaker B: Okay, cool. If you go to functions chain link.
01:08:06.110 - 01:08:13.822, Speaker A: Functions chain link. Okay. How about that?
01:08:13.876 - 01:08:15.470, Speaker B: Yes. That's what you'll be clicking.
01:08:16.530 - 01:08:21.200, Speaker A: Okay. Oh, connect your wallet. I have metamask. I do the thing.
01:08:22.610 - 01:08:30.900, Speaker B: You're going to need to confirm a couple of things here. So this is confirming to connect Metamask. And then you'll need to fill out an email address.
01:08:31.510 - 01:08:34.486, Speaker A: Okay. I don't want people to see my.
01:08:34.508 - 01:08:43.478, Speaker B: It can be whatever you could put. You're not going to receive anything at this email address for this demo.
01:08:43.644 - 01:08:48.426, Speaker A: Okay. So I'm going to do fish@cake.com wonder.
01:08:48.448 - 01:08:50.282, Speaker B: If that's an actual email address. Would be amazing.
01:08:50.416 - 01:08:58.620, Speaker A: Yeah. Decentralized newscastady. How about that?
01:08:59.170 - 01:09:03.710, Speaker B: Sure. And then check the box and click create subscription.
01:09:05.650 - 01:09:06.400, Speaker A: Okay.
01:09:07.250 - 01:09:13.358, Speaker B: And then, yeah, metamask is going to pop up. So what you're actually doing is you're doing stuff on chain at this point to create the subscription.
01:09:13.454 - 01:09:13.810, Speaker A: Okay.
01:09:13.880 - 01:09:36.790, Speaker B: And yeah, you're agreeing to the terms of service and everything like that as well. All on chain, which is kind of cool because we don't, I guess we got an email address. Right. But that's more for, because this is still fairly new and to make sure that everything is good there, you don't have to have the email address to do this. And so everything is on chain.
01:09:37.710 - 01:09:38.074, Speaker A: Okay.
01:09:38.112 - 01:09:40.730, Speaker B: And so here you're actually creating that subscription.
01:09:41.150 - 01:10:00.030, Speaker A: Okay. Just create. Add that to the note. Okay. And so I'm waiting for it to go. People to write down my thing. Yes.
01:10:00.030 - 01:10:09.006, Speaker A: Got it. Okay, cool. This is just going to be my waiting motion for transactions and vanilla clip.
01:10:09.038 - 01:10:10.126, Speaker B: That make a gif.
01:10:10.238 - 01:10:10.900, Speaker A: Yeah.
01:10:11.670 - 01:10:13.090, Speaker B: Blockchain mining.
01:10:15.930 - 01:10:17.686, Speaker A: Okay. Sign.
01:10:17.868 - 01:10:31.180, Speaker B: So this signature. So are you familiar with. What is it? It's not asynchronous. What's the word I'm looking for? It's an encryption type where it's one way encryption anyway.
01:10:31.710 - 01:10:32.954, Speaker A: Got it. Okay.
01:10:33.152 - 01:10:38.842, Speaker B: Yes. You're assigning this so that then they can use your public key to verify that, hey, it actually is you.
01:10:38.976 - 01:10:42.000, Speaker A: Okay, cool. That's me.
01:10:44.930 - 01:10:56.066, Speaker B: Yes. So wait in a second. And it'll be done here in just a second. So this is honestly one of the weirdest user experience parts of blockchain. We're used to everything going so fast on computers now.
01:10:56.168 - 01:10:56.482, Speaker A: Right.
01:10:56.536 - 01:11:16.942, Speaker B: This waiting business okay, so subscription has been created, so now we need to add funds. All you think is you've made a bucket and now you're going to put link tokens in that bucket. And then in a minute you're going to deploy your contract and then you're going to tell the bucket, hey, my contract can pull stuff out of the bucket.
01:11:17.106 - 01:11:25.622, Speaker A: Got it. Okay. You may use my bucket. Okay. Yes, it is a good bucket. No holes. Should I add funds to the bucket?
01:11:25.686 - 01:11:26.154, Speaker B: Yes.
01:11:26.272 - 01:11:29.450, Speaker A: Okay. Oh, here we are. Okay.
01:11:29.520 - 01:11:32.222, Speaker B: Yeah, you just pop all ten in there if you want.
01:11:32.356 - 01:11:33.040, Speaker A: Okay.
01:11:33.410 - 01:11:52.130, Speaker B: Ten add funds, confirm and we'll. Yes, do that. So it's happening on chain. So you're going now to be saying, hey, I have these funds that are signed to my address and I'm saying, hey, put these funds in the address of the bucket.
01:11:52.630 - 01:11:57.980, Speaker A: Got it.
01:11:59.790 - 01:12:03.100, Speaker B: Yeah, this is where jeopardy music is. Good.
01:12:04.030 - 01:12:07.930, Speaker A: Yeah, I've really got to just come up with a nice short hobby.
01:12:10.210 - 01:12:16.110, Speaker B: Speed crochet. I made a one by one afghan.
01:12:18.130 - 01:12:20.942, Speaker A: Okay, add consumer. Is that my.
01:12:20.996 - 01:12:33.234, Speaker B: So this is who's allowed to pull stuff out of your bucket? Okay, so now we have a chicken and the egg thing. That happens. So you're going to click that button and it's going to say, what's your consumer's address? Well, have you deployed your consumer contract yet?
01:12:33.432 - 01:12:34.178, Speaker A: No.
01:12:34.344 - 01:12:46.360, Speaker B: Right. But we couldn't deploy our contract until we knew the subscription id, which in your case looks like 1811. It's right above the consumer address in that little information box.
01:12:48.490 - 01:12:52.762, Speaker A: Consumer address. Oh, 1811. Wow, look at that. Okay, so I put that in my.
01:12:52.816 - 01:12:55.494, Speaker B: You'll need that. Yes. So if we go back to remix.
01:12:55.622 - 01:12:57.674, Speaker A: Oh my heavens. Okay, where am I?
01:12:57.712 - 01:13:15.618, Speaker B: Okay, so yeah, replace those nines with 1811. But we're not ready to deploy yet. Darb Darby, you got the next one. There's Sequential. Cool. So that's good, but we're not done yet. If you go back to the gitbook, there's a lot of stuff we got to add to this.
01:13:15.618 - 01:13:19.986, Speaker B: Right. So we got to add our Javascript. We got to add.
01:13:20.088 - 01:13:22.580, Speaker A: I have so many things open. Okay.
01:13:23.270 - 01:13:27.910, Speaker B: And there's a lot of them with the chain link, little hexagon icon. So that's not helping yet at all.
01:13:27.980 - 01:13:28.600, Speaker A: Exactly.
01:13:29.210 - 01:13:37.270, Speaker B: Okay, so we've got the basic contract. Yeah. And we're going to add our new source. So this is a struct defining like an object, right?
01:13:37.420 - 01:13:37.830, Speaker A: Yes.
01:13:37.900 - 01:13:43.770, Speaker B: For the article. So yeah, you can just copy this and we'll just pop it into our contract.
01:13:44.190 - 01:13:46.890, Speaker A: Okay. I'm moving things around okay.
01:13:47.040 - 01:13:58.446, Speaker B: Popping it, if you want to just pop it underneath like the bytes last error. Like top line, you can see that's where I put it. It doesn't have to be there. It can be anywhere. Like outside. Yeah, okay. Yeah.
01:13:58.446 - 01:14:08.690, Speaker B: Okay. Tabs are, tabs are hard. So we have the struct and then we're creating an array of articles called article. Got you an array of articles called articles.
01:14:09.030 - 01:14:09.394, Speaker A: Perfect.
01:14:09.432 - 01:14:16.886, Speaker B: It's really weird to say, but cool. That makes sense, right? So we have our URL and then the date that we added it to it. I'm calling that the published date.
01:14:16.988 - 01:14:17.366, Speaker A: Got it.
01:14:17.388 - 01:14:31.020, Speaker B: That's what's in our article object. Okay, cool. The next thing is an event, right? So when we add an article, we want to log it out basically that, hey, we added it.
01:14:32.670 - 01:14:33.466, Speaker A: Okay.
01:14:33.648 - 01:14:35.946, Speaker B: Yeah, cool.
01:14:35.968 - 01:14:39.066, Speaker A: And that has a URL and then the polar state, which has got it.
01:14:39.168 - 01:15:05.460, Speaker B: Yeah. So now we need to put our Javascript code in there. So there's a couple of things here. If you want to copy the nicely formatted version to start with this thing and then go to the functions tab you have. It's on the far right. Yeah, up at the top it says playground kind of in the middle if you want to like.
01:15:06.950 - 01:15:07.682, Speaker A: Oh gosh.
01:15:07.746 - 01:15:19.750, Speaker B: Well, it's okay. Oh no, it's okay. It's fine, it's fine. Just go to the playground, everything's fine. We'll get some ice cream afterwards. It's fine. Okay, so yeah, go to the playground.
01:15:20.170 - 01:15:24.140, Speaker A: And hit new, oh, how do I open it in a new tab? There we go.
01:15:24.990 - 01:15:26.860, Speaker B: And you just want to paste that in there.
01:15:28.030 - 01:15:29.322, Speaker A: I assume I'm getting rid of.
01:15:29.376 - 01:15:42.160, Speaker B: Yeah, get rid of all that stuff. Okay, cool. So just real quick looking through this, right, so it uses this hacker news API, says, give me the latest news article and spit it out.
01:15:43.250 - 01:15:44.254, Speaker A: Cool, got it.
01:15:44.292 - 01:16:18.698, Speaker B: If you click run code at the bottom, this is like where you can test your code to see what it would come back as. When we're doing this register, that's all we're going to be storing on chain is the URL of the latest thing. I will say, experimenting with this a little bit last night, as one does right before things go live, I ran into problems and sometimes hacker news. So I was thinking like hacker news, right? What do you read on hacker news articles. Right, so they always have an article, except for there's like ask Hacker news, which doesn't have a link associated with it. So sometimes this is going to be empty. So if we run into one of those, we'll just request another one.
01:16:18.784 - 01:16:19.514, Speaker A: It's fine.
01:16:19.632 - 01:16:29.550, Speaker B: It'll be okay. Got it. So this is all that stuff, we need it all squished down onto one line that's already done in the gitbook.
01:16:30.050 - 01:16:35.278, Speaker A: I was going to say I can just delete a bunch of things, but take it.
01:16:35.444 - 01:16:51.720, Speaker B: So that one is the one you want? Yeah, that one you just copied, that's the one you want. Below is like the whole with string source and everything, but we'll just paste it in between the two quotes. Got you back to remix. And then we are putting it in line 46. Yeah.
01:16:53.450 - 01:16:54.150, Speaker A: Wow.
01:16:54.300 - 01:16:55.334, Speaker B: It's crazy, right?
01:16:55.452 - 01:16:56.920, Speaker A: Old school. Okay.
01:16:57.530 - 01:17:09.130, Speaker B: I mean you can do it with like protected returns, but that's just. Sure this is easier. Okay, cool. So we've got our source. So we're through send requests. That would work. Now we could send this request, but when it comes back to us, we're not going to do anything with it yet.
01:17:09.130 - 01:17:14.720, Speaker B: So we need to go back to get book and we'll copy out two more things.
01:17:15.170 - 01:17:15.920, Speaker A: Okay.
01:17:16.770 - 01:17:30.500, Speaker B: So right there we've got our articles, we'll add them to our articles array and then we'll emit that event. So this goes in the function fulfill request. Yeah, I just put it in after the if.
01:17:32.070 - 01:17:32.820, Speaker A: Okay.
01:17:33.910 - 01:17:44.920, Speaker B: You didn't copy those tabs in there. I watched you not highlight them. That looks great. So it makes sense. Right. We're going to add them to our array and then we're going to emit that event.
01:17:45.370 - 01:17:46.022, Speaker A: Got it.
01:17:46.076 - 01:17:51.866, Speaker B: And then lastly we need a way to get that array out and that's what that last function does.
01:17:52.048 - 01:17:52.780, Speaker A: Okay.
01:17:54.030 - 01:17:54.986, Speaker B: It was a lot.
01:17:55.088 - 01:17:56.906, Speaker A: Yeah. And so does this happen, this is.
01:17:56.928 - 01:17:59.082, Speaker B: Like a brand new function. Yeah. Down at the bottom function.
01:17:59.136 - 01:17:59.738, Speaker A: Got it.
01:17:59.824 - 01:18:18.850, Speaker B: Right. So what this is doing is we mentioned like space. Right. And computation power. So if you scroll up there's this value at the top that we set that we didn't really talk about. It's on line 38, gas limit. That's how much gas we can spend when functions comes back into our contract.
01:18:18.850 - 01:18:38.234, Speaker B: So we will spend gas when we make the request. Then it goes off to chainlink, oracle network. The function stuff happens. Right. It's going to take link out of our bucket to pay for all of that. It's also going to take link to compensate for the actual gas fee of calling the function when it comes back. Right.
01:18:38.234 - 01:18:43.290, Speaker B: Because when it brings that URL back, it needs to store it on chain.
01:18:44.030 - 01:18:44.442, Speaker A: Okay.
01:18:44.496 - 01:19:05.506, Speaker B: Now if you remember way back at the beginning of this conversation I mentioned, the thing is, I don't necessarily agree that blockchain solves every problem. You need to figure out specific problems that you want it to solve. So you need, like, the minimum amount of information that needs to be stored on chain that should be stored on chain, intentionally stored on chain. I think that's what I said.
01:19:05.688 - 01:19:06.082, Speaker A: Yeah.
01:19:06.136 - 01:19:16.706, Speaker B: And so I've decided it's just the URL. From the URL, we'll grab, like, the title and the image, and we'll display those from the actual URL later.
01:19:16.888 - 01:19:18.398, Speaker A: Okay, cool.
01:19:18.504 - 01:19:33.546, Speaker B: So we're ready to deploy this contract. Okay, you have a green check mark because you turned on autocompile and you haven't made any errors. Not that one, the one on the left. That one down there is from when you deployed a contract before. Yeah, down below that.
01:19:33.728 - 01:19:37.766, Speaker A: Do I have to do a new subscription because I did the new tab?
01:19:37.958 - 01:19:55.426, Speaker B: No. Okay, we'll get to that in a second. Okay, so let's go ahead and deploy this contract. So if you go one spot down from where you are, this is the compile tab. The next one is the deploy tab. We're on the vm. You want to go to injected provider, and you're good.
01:19:55.426 - 01:19:58.500, Speaker B: I always forget that. And I'm like, man, that deployed fast.
01:19:59.430 - 01:20:00.500, Speaker A: Oh, no.
01:20:02.630 - 01:20:07.846, Speaker B: Okay, and then you can click deploy. We don't have to fill anything in because it doesn't take any values in when we deploy it.
01:20:07.948 - 01:20:08.790, Speaker A: Got it.
01:20:08.940 - 01:20:12.680, Speaker B: We will need to say, yes, metamask. Spend my monopoly money.
01:20:13.370 - 01:20:15.880, Speaker A: Spend. Okay.
01:20:18.330 - 01:20:25.820, Speaker B: And now we wait, we practice r. You know what you could do is you could just do like a monkey. Type in between every time.
01:20:26.990 - 01:20:29.100, Speaker A: Just see how many words I can type.
01:20:30.750 - 01:20:38.590, Speaker B: Okay, so it's deployed. Cool. If you expand that contract, you can see all the different stuff that we've gotten here.
01:20:38.660 - 01:20:40.062, Speaker A: Wow, look at all those things.
01:20:40.196 - 01:20:44.954, Speaker B: Yeah. What we care about is send request, and we care about get all articles.
01:20:45.082 - 01:20:45.374, Speaker A: Okay.
01:20:45.412 - 01:20:48.094, Speaker B: So if you click get all articles right now should be empty.
01:20:48.222 - 01:20:48.562, Speaker A: Yes.
01:20:48.616 - 01:20:57.854, Speaker B: We've got no articles. Cool. So you remember we created the bucket. We've told our contract about the bucket, but we haven't told the bucket about our contract.
01:20:57.982 - 01:20:58.370, Speaker A: Right.
01:20:58.440 - 01:21:13.146, Speaker B: We need to go do that. So before we leave this page, if you click the little copy icon next to the name of your contract. Yes. That'll be the contract address. Okay, so now we'll go back to. I think it's two tabs to the right function. Yes.
01:21:13.146 - 01:21:23.134, Speaker B: Just click on. In the top left. Just click on functions next to chainlink. Yes. Okay, so your subscription is. There it is. Yes.
01:21:23.134 - 01:21:27.326, Speaker B: So we'll click on that, and then we can do add consumer here.
01:21:27.428 - 01:21:29.294, Speaker A: Okay, cool.
01:21:29.492 - 01:21:30.560, Speaker B: Excuse me.
01:21:34.820 - 01:21:46.450, Speaker A: Metamask. Okay. It's getting smoother and smoother. I'm going to say. Wait, we create. Oh, look at that. Get a copilot knows what to do.
01:21:46.450 - 01:21:48.320, Speaker A: Create functions.
01:21:48.400 - 01:21:50.788, Speaker B: I mean, you did you create a function to read the name.
01:21:50.954 - 01:22:06.088, Speaker A: Yeah. And then add consumer to function. Okay, cool. Added, done.
01:22:06.254 - 01:22:07.748, Speaker B: Is that monolisa?
01:22:07.924 - 01:22:13.976, Speaker A: It is. Appreciate that. You recognized my font. That's great.
01:22:14.078 - 01:22:18.236, Speaker B: I, too, like the monolitha. It's the G's. The G's. Give it.
01:22:18.418 - 01:22:20.808, Speaker A: Yeah, yeah. True. Nice G's.
01:22:20.984 - 01:22:27.952, Speaker B: So the consumers added. We can close this. We're good to go. If we go back to remix now.
01:22:28.086 - 01:22:28.672, Speaker A: Okay.
01:22:28.806 - 01:22:32.800, Speaker B: We can hope that the Workshop gods are with us. And click send request.
01:22:33.940 - 01:22:35.890, Speaker A: This will really determine a whole.
01:22:39.940 - 01:22:49.568, Speaker B: Yeah. So we'll hang out here for just a second until we get the green check mark. That means that it's actually. Yep. And then we're going to get to do that more while we wait for the Oracle network to do their work.
01:22:49.674 - 01:22:50.970, Speaker A: Oh, gosh. Okay.
01:22:52.940 - 01:22:57.930, Speaker B: Cool. So it's done. We'll go to functions tab again.
01:22:58.300 - 01:23:01.048, Speaker A: Okay, not that one. This one.
01:23:01.134 - 01:23:07.000, Speaker B: Yes. And refresh this page real quick. You should see you have a pending transaction.
01:23:07.160 - 01:23:07.870, Speaker A: Wow.
01:23:08.800 - 01:23:36.864, Speaker B: Last night it was taking about like 50 seconds to get all said and done. Okay, so this is where things are a lot different in web3 space, right. Because we have this whole distributed ledger thing. I would assume in your normal web dev experience, if an API call took you a minute, you would be like, what is going on? Yeah, so that's where we're at right now. But what's happening is it's been submitted on chain. It's gone to the Oracle network. The oracle nodes are spinning up a sandbox.
01:23:36.864 - 01:23:50.676, Speaker B: They're making the API call, getting the results. They are then bringing the information back to the contract on chain to aggregate it together to come to consensus on like, hey, here's the value that was returned. And then storing that value on chain.
01:23:50.868 - 01:24:01.390, Speaker A: Yeah, it makes sense that this takes a while. Is there work being done generally to speed it up so it can eventually catch up to.
01:24:01.840 - 01:24:14.476, Speaker B: So speed depends on the blockchain. There is like a trilemma thing where it's like speed. I should know this. My mind is drawing a blank.
01:24:14.668 - 01:24:16.096, Speaker A: We've been doing a lot of talking.
01:24:16.198 - 01:24:32.004, Speaker B: Yeah, no, but it's like speed security. And then I forget what the other one is off the top of my head. I should look this up. Sand decentralization. Thank you. See, you all know these things. I don't even need to say this.
01:24:32.004 - 01:24:50.156, Speaker B: Everybody already knows this. Like, man, this guy, he works at this place. What a fool. So between those three, you can have two, but not three. It's like one of those graphs that show your strengths. And it's like you can be over here or over here. So one leg is going to get way shorter if you're going all out on the other one.
01:24:50.156 - 01:25:04.080, Speaker B: So it's like that. So there are other networks that run a lot faster. Avalanche is another network, their consensus mechanism. So how they reach consensus is different and they are much faster. But there's trade offs there as well.
01:25:04.150 - 01:25:07.312, Speaker A: Yeah, I'm sure there's pros and cons to all the things. That makes sense.
01:25:07.366 - 01:25:23.496, Speaker B: Yeah. Thanks, Adam, for that. Sorry, scalability and not speed. You know what, I'm just going to make a shout out right now to Theo and these things, because, see this? My co2 level, because the windows are closed, is in the red, and the brain fog happens with high co2.
01:25:23.678 - 01:25:24.520, Speaker A: Whoa.
01:25:26.300 - 01:25:38.556, Speaker B: I don't know if you know the streamer guy, Theo GG? Oh, yeah, he talked about that on Twitter not that long ago. And I got one and it's like. It's crazy. Anyway, the more, you know, afraid to.
01:25:38.578 - 01:25:42.172, Speaker A: Know that much information. But it's also probably a good thing to know.
01:25:42.306 - 01:25:59.600, Speaker B: Yeah, I don't know. So I'll be opening a window soon. If you refresh, though, this is probably already done. Hey, we got success. Cool. So right now we have no front end. If we go back to our smart contract and we say, get all articles.
01:25:59.600 - 01:26:02.476, Speaker B: Boom.
01:26:02.588 - 01:26:03.200, Speaker A: Wow.
01:26:03.350 - 01:26:04.256, Speaker B: What do we get?
01:26:04.358 - 01:26:09.424, Speaker A: We got a replit link. And, you know, this is where it's like. It works on the Cli. It worked.
01:26:09.482 - 01:26:19.624, Speaker B: Yeah. So the back end guy in me is like, hey, job done. There you go. Cool. So let's build the front end real quick.
01:26:19.742 - 01:26:28.990, Speaker A: Okay. Where does the front end go?
01:26:29.760 - 01:26:34.228, Speaker B: So it will be completely separate and it's going to just read information off the blockchain.
01:26:34.424 - 01:26:35.184, Speaker A: Wow. Okay.
01:26:35.222 - 01:26:36.480, Speaker B: It's going to live on your computer.
01:26:36.630 - 01:26:37.424, Speaker A: Got it.
01:26:37.542 - 01:26:37.824, Speaker B: Yeah.
01:26:37.862 - 01:26:40.130, Speaker A: That was probably a silly question, but.
01:26:41.540 - 01:26:47.940, Speaker B: In front, clearly out there, the cloud TM.
01:26:52.440 - 01:26:59.508, Speaker A: Okay, cool. So we've made it through all of yes. Things.
01:26:59.594 - 01:27:04.884, Speaker B: So we kind of did things out of order. But, yeah, we got this little picture at the bottom. Now we'll build a front end hazard.
01:27:05.012 - 01:27:10.488, Speaker A: We're building it. Okay. I guess now we're going to create an Astro website.
01:27:10.654 - 01:27:11.370, Speaker B: Yes.
01:27:13.280 - 01:27:20.110, Speaker A: Okay. Because I already made this repo. Creating an astro site will just.
01:27:20.480 - 01:27:26.208, Speaker B: It'll complain a lot probably or. No, it'll probably just make a subfolder if you let it.
01:27:26.294 - 01:27:35.696, Speaker A: Yeah, I don't really want to make a subfolder. Can I just make it? Do it here? NPM. Install Astro. I think so.
01:27:35.878 - 01:27:37.776, Speaker B: It's create, right? Create Astro.
01:27:37.888 - 01:27:59.300, Speaker A: Yeah, it's create to make the new repo. You know what, whatever. I'll just put it as a subfolder and move things. Speed is of the essence. Yes. You can install where should create. Okay.
01:27:59.300 - 01:28:00.658, Speaker A: Iffy star.
01:28:00.744 - 01:28:02.082, Speaker B: Their names are always amazing.
01:28:02.216 - 01:28:10.760, Speaker A: Yeah. Making a little empty project. Install dependencies. Sure.
01:28:11.370 - 01:28:14.726, Speaker B: And then we have some other dependencies to install when we get done before we run anything.
01:28:14.908 - 01:28:27.286, Speaker A: Yeah, we've got so many pretty colors in the ClI. Now I'm going to say that we're doing this, but it's to NPM.
01:28:27.318 - 01:28:30.380, Speaker B: Yeah. You know what? I'm not feeling so bad anymore. Right.
01:28:33.250 - 01:28:34.240, Speaker A: It happens.
01:28:35.730 - 01:28:36.478, Speaker B: Yeah.
01:28:36.644 - 01:28:52.340, Speaker A: I think a lot of these files are just. Yeah, I'll just scoot them up one level. Do you plan to write typescript? Absolutely not. Don't need to do that just yet. Okay, cool.
01:28:53.030 - 01:29:08.860, Speaker B: Darby. If you wanted to follow along, you can just do this in a terminal or vs code terminal from your local machine. You don't have to pull anything off of GitHub. There was a question earlier, sorry about using Don ID instead of use the hash id instead of the name. Yeah, I'd go with the hash. Yes.
01:29:10.670 - 01:29:25.164, Speaker A: I'm going to just scoot all of this up a folder because it's just saved everything in this one. It's fine. I just replaced my entire readme. Well, that's okay. What can you do?
01:29:25.282 - 01:29:26.476, Speaker B: It asks you.
01:29:26.658 - 01:29:31.070, Speaker A: It did. And I was just like, click, click. Who cares? It's fine.
01:29:32.240 - 01:29:33.228, Speaker B: It's good.
01:29:33.394 - 01:29:42.210, Speaker A: Okay, cool. I'm deleting that spiffy star thing and then I'm also going to just get rid of. Man, I shouldn't have done that. It's okay.
01:29:43.780 - 01:29:46.388, Speaker B: Can you control z in here at all? I don't know if that works.
01:29:46.474 - 01:29:51.110, Speaker A: I can. Could not undo. Oh no.
01:29:52.520 - 01:29:54.368, Speaker B: We've reached the limits of undo.
01:29:54.464 - 01:30:10.090, Speaker A: That's okay. Actually, it'll be a good rehash of what we've done so far. So decentralized. Star notary. No. Okay, so we had.
01:30:11.820 - 01:30:13.180, Speaker B: We created a wallet.
01:30:13.600 - 01:30:17.932, Speaker A: Created a wallet. We funded the.
01:30:17.986 - 01:30:22.350, Speaker B: Funded our wallet. We did a hello, hello world in there.
01:30:24.980 - 01:30:30.560, Speaker A: If someone opens this. Okay, but we created a subscription.
01:30:31.620 - 01:30:34.080, Speaker B: We deployed our functions contract.
01:30:36.920 - 01:30:43.540, Speaker A: Then we connected the. What was it called when we were connecting it to the subscription?
01:30:44.200 - 01:30:47.900, Speaker B: We authorized the contract. For the subscription.
01:30:48.080 - 01:30:49.450, Speaker A: Wow, look at that.
01:30:51.980 - 01:30:53.930, Speaker B: Now we're creating the front end.
01:30:57.500 - 01:31:17.440, Speaker A: Okay, cool. Just to keep the steps. Because someday I'm going to look back at this and be like, what did I even do in this webinar? Okay, cool. So we've done that and now we can install all of these dependencies. Ethers, env node fetch and js dom node fetch. I don't know if we actually need with Astro.
01:31:18.020 - 01:31:18.844, Speaker B: Okay, solid.
01:31:18.892 - 01:31:20.130, Speaker A: Anyway, it's fine.
01:31:20.500 - 01:31:29.348, Speaker B: That may be my front end. Ignorance showing in the panic to fix something last night.
01:31:29.514 - 01:31:30.660, Speaker A: I get it working.
01:31:30.810 - 01:31:31.510, Speaker B: Yes.
01:31:32.920 - 01:31:33.332, Speaker A: Okay.
01:31:33.386 - 01:31:37.380, Speaker B: No duct tape and bubble gum slaps through. This baby gets news articles.
01:31:40.300 - 01:31:48.810, Speaker A: After installing everything. I like to do just one more big NPm install. It probably is unnecessary, but you never know. Okay.
01:31:49.340 - 01:31:51.550, Speaker B: And then we can just do NPm run dev.
01:31:51.920 - 01:31:52.524, Speaker A: Yeah.
01:31:52.642 - 01:31:54.750, Speaker B: And then get that fired up.
01:31:58.160 - 01:32:03.964, Speaker A: Okay. All right. And then we get a local host. 4321 anakin.
01:32:04.012 - 01:32:04.770, Speaker B: It's working.
01:32:06.340 - 01:32:08.508, Speaker A: Hey, it says the word astro.
01:32:08.604 - 01:32:17.636, Speaker B: We did fantastic. Front end complete. Nice.
01:32:17.818 - 01:32:20.996, Speaker A: We did it. We should have done it. There we go.
01:32:21.018 - 01:32:25.220, Speaker B: There we go. Okay. I was like, oh, well, okay, cool.
01:32:25.290 - 01:32:35.160, Speaker A: So we've got my browser crashed, but we're back. Oh yeah. With the new astro version. They have a new little thing down here, so you can inspect element and stuff.
01:32:35.230 - 01:32:38.308, Speaker B: Yeah. Your usability is going to be off the charts.
01:32:38.404 - 01:32:42.280, Speaker A: Yeah, watch out. Okay, cool. Next.
01:32:42.350 - 01:33:02.572, Speaker B: Cool. Yeah. So from here, what we're going to do is the first thing we do is we're going to create a new file to store the ABi, the application binary interface. I don't know why it's called binary interface when it's json object, but we'll create that file, we'll put a lib.
01:33:02.636 - 01:33:05.360, Speaker A: Directory and I'm pasting it in there.
01:33:05.430 - 01:33:07.248, Speaker B: No, not that. We're not pasting that.
01:33:07.414 - 01:33:08.256, Speaker A: Never mind.
01:33:08.358 - 01:33:15.060, Speaker B: So we need a new. First, make a new file and call it news archiveabi json.
01:33:18.760 - 01:33:20.660, Speaker A: Okay, got it. Yeah.
01:33:20.730 - 01:33:28.728, Speaker B: So if we go back to remix real quick. So the ABi is kind of like a JSON object that tells your program what it can do.
01:33:28.894 - 01:33:30.810, Speaker A: Like a config of some kind.
01:33:31.580 - 01:33:34.104, Speaker B: Yeah, it's like an API, doc.
01:33:34.232 - 01:33:34.668, Speaker A: Okay.
01:33:34.754 - 01:33:48.304, Speaker B: Is how I kind of think about it. If you click on where the blue checkmark is, your compiler tab or, sorry, green checkmark colors. At the very bottom, there's a little tiny copy button that says Abi. It's cute, right? And then you paste it in.
01:33:48.342 - 01:33:49.472, Speaker A: Yeah, got it.
01:33:49.526 - 01:33:52.144, Speaker B: It's tiniest copy button for 200 lines of stuff.
01:33:52.182 - 01:33:55.010, Speaker A: I was going to say, wow, that is a powerful copy button.
01:33:55.940 - 01:34:05.380, Speaker B: Yeah, that's why I don't make it bigger. Cool. So we'll save this. So this basically tells you all the different functions and variables how you can interact with this thing.
01:34:05.450 - 01:34:06.980, Speaker A: It's like an interface almost.
01:34:07.050 - 01:34:07.572, Speaker B: Yes.
01:34:07.706 - 01:34:08.292, Speaker A: Okay.
01:34:08.426 - 01:34:10.828, Speaker B: Yeah. Application binary interface.
01:34:11.024 - 01:34:13.220, Speaker A: How about that? It's aptly named.
01:34:13.300 - 01:34:13.930, Speaker B: Yes.
01:34:16.540 - 01:34:18.810, Speaker A: Okay. Anyway, let's move on.
01:34:19.420 - 01:34:31.132, Speaker B: It's a co2 levels. It's getting toast back to the gitbook. So now we can copy that file that you wanted to copy and we'll put it into a new JSON or js file in the lib directory as well.
01:34:31.266 - 01:34:35.268, Speaker A: Okay. Newsarchive JS.
01:34:35.464 - 01:34:41.388, Speaker B: Yeah. So what this does is this lets us actually read from the blockchain.
01:34:41.564 - 01:34:42.144, Speaker A: Okay.
01:34:42.262 - 01:35:07.620, Speaker B: So importing ethers, that's going to be the library that we use to actually interact with the blockchain. Specifically the JSON RPC provider bit. That's how our on ramp into the blockchain is the RPC provider. You can do that, which will be a URL. The other option is to do it through your wallet. Right. So we could have it like connect our wallet and then access the blockchain through your wallet.
01:35:07.620 - 01:35:34.896, Speaker B: We don't need to do that because we're just reading. We're never going to write from this application. So we can do that. We get our Abi so we know what we can do. We're setting up stuff here with that RPC URL and then the contract address. We'll load those out of our environment file. And then down on 19, you can see we actually create a contract instance to interact with.
01:35:34.896 - 01:35:45.510, Speaker B: So we're like creating the contract object. So then we can read from that contract which actually pulls it off of the blockchain. And we'll kind of read the articles in and then pass the articles along.
01:35:45.960 - 01:35:52.744, Speaker A: Cool. Okay. And I see that we have a provider URL and a contract address.
01:35:52.862 - 01:35:53.384, Speaker B: Yes.
01:35:53.502 - 01:35:57.096, Speaker A: So we should probably add some environment variables, which are right there.
01:35:57.278 - 01:36:02.030, Speaker B: Yeah. So if you make a env, that's what env is looking for.
01:36:03.440 - 01:36:06.030, Speaker A: All right. Top level.
01:36:10.560 - 01:36:16.400, Speaker B: Yes. And then your contract address needs to be replaced with your contract address. From remix.
01:36:18.500 - 01:36:24.880, Speaker A: I'm going to call it that. And then. Oh, it's from remix contract.
01:36:26.260 - 01:36:44.330, Speaker B: No, on the left hand side, the ethereum thing. Yeah. And then next to the name, the contract address. So deploy contracts. You've got the functions consumer example copy button. Yes. Cool.
01:36:44.940 - 01:37:11.010, Speaker A: I'm going to put this in the readme again, being kind to our future selves. This will be the n file and then we'll have address goes here, we'll say this is. Look at us go. Okay, nice. Cool.
01:37:12.820 - 01:37:30.628, Speaker B: So this will just read everything and then we just need to display it. So if we go back to the gitbook and we're going to modify our index astro in pages, if you get rid of the. Yeah, that'll work. Just get rid of it all.
01:37:30.794 - 01:37:34.168, Speaker A: Oh, I see what you're doing. Okay. This is all in the front matter.
01:37:34.254 - 01:37:59.648, Speaker B: Yeah, it's fine. You're going to get rid of the stuff in the bottom too, though. This is where transparency may be a way better way to do this, but just trying to pull information from the URL. So we've got the URL stored on chain. Right. That's the piece that we decided was the key piece of information that we wanted to store on chain. I said, hey, I want to see the title and the meta image property from the open graph data if they have it.
01:37:59.648 - 01:38:06.756, Speaker B: So I'm grabbing those here and then passing those into the HTML down below.
01:38:06.938 - 01:38:07.892, Speaker A: Got it.
01:38:08.026 - 01:38:08.564, Speaker B: Yeah.
01:38:08.682 - 01:38:11.552, Speaker A: Which reminds me, I should get that HTML.
01:38:11.696 - 01:38:13.604, Speaker B: Yeah. And replace it all.
01:38:13.802 - 01:38:14.548, Speaker A: Okay.
01:38:14.714 - 01:38:17.510, Speaker B: And then we give a save. Hey, hopefully it works.
01:38:18.120 - 01:38:19.156, Speaker A: Hopefully it works.
01:38:19.258 - 01:38:20.260, Speaker B: Type error.
01:38:20.940 - 01:38:30.552, Speaker A: Okay. No invalid argument or value for contract. Okay, let's figure it out. That's okay. We're doing a live.
01:38:30.606 - 01:38:37.164, Speaker B: Yeah. Oh, is it inf local instead of Inf? Is it something funky going on there?
01:38:37.202 - 01:38:50.624, Speaker A: That shouldn't affect it, but I'll change it. Oh, well, how about that? It did. Wow. And look at that. It's a real link.
01:38:50.822 - 01:39:11.530, Speaker B: Yeah. So it didn't have the OG data. So it's not populating. If we run our function again, though, we can spin the wheel and hope for something that shows the image as well. Okay, so in our remix, if we click send request. Yeah. And this is where we wait for like a minute or two.
01:39:12.300 - 01:39:13.096, Speaker A: Okay.
01:39:13.278 - 01:39:22.300, Speaker B: Yeah. So I know as we wait, what questions do you have about this whole thing? Cries of anxiety.
01:39:22.640 - 01:40:02.004, Speaker A: There's only light anxiety, but that's also very normal. So the astro stuff makes sense to me because it's calling a thing, displaying it in the HTML. That part makes sense in general. I think with the Abi it feels large for what we're doing, but maybe I'm just not fully understanding how helpful it is. But I guess does the contract, when we make the contract, it requires the ABI to know what to look for.
01:40:02.122 - 01:40:15.036, Speaker B: You wouldn't have to have everything in there. So if you look in remix on the left of your screen right now, you see all those different functions. We don't really care about any of them from the astro side. We don't care about anything except for get articles. Right.
01:40:15.138 - 01:40:15.596, Speaker A: Right.
01:40:15.698 - 01:40:29.744, Speaker B: So that's all we really technically need in our Abi, is we just need to tell it, hey, we have this contract. It's this address. It has a function called get all articles that returns this type. Yeah, that's all it really needs.
01:40:29.862 - 01:40:30.256, Speaker A: Got it.
01:40:30.278 - 01:40:32.290, Speaker B: It just copied everything.
01:40:33.140 - 01:40:42.420, Speaker A: Got you. That makes sense. Okay. Did it just succeed? Do we have a thing? Maybe.
01:40:42.490 - 01:40:52.890, Speaker B: Oh, no. If we go to function, you refresh and see, it looks like it's the same thing if you go to functions. So it should add a second one.
01:40:55.500 - 01:40:57.108, Speaker A: Get all articles.
01:40:57.284 - 01:40:58.872, Speaker B: Yeah, it looks like it's not there just yet.
01:40:58.926 - 01:41:03.572, Speaker A: It's not there yet. Okay, that was my bad. I was looking at that checkmark and thinking it was the latest one.
01:41:03.646 - 01:41:12.088, Speaker B: So that was it. Sending it to functions. Right. So if you go to the functions tab, like two to the right of the tab, you're on browser tabs.
01:41:12.264 - 01:41:13.340, Speaker A: Sorry. Okay.
01:41:13.410 - 01:41:25.330, Speaker B: It's all good. So many tabs. Yeah, there. And you refresh this page, it should tell us if we are pending or if we're done. Hey, it succeeded. So if we refresh our Astro page now, it should.
01:41:27.080 - 01:41:27.924, Speaker A: Come back.
01:41:28.042 - 01:41:36.964, Speaker B: Of course, it was a Twitter one, which doesn't have any data either. That's a risky click. And Elon Musk is going to say.
01:41:37.002 - 01:41:39.240, Speaker A: You know, I'm not going to bother.
01:41:44.060 - 01:41:46.520, Speaker B: Yeah, we've made a full web3 dap.
01:41:46.940 - 01:42:10.028, Speaker A: Wow, it's real. That is cool. And I think it's one of those things where it is slow, but now I understand we're reading from an actual chain, and it's a transaction that exists and we're pulling something real that hasn't been. It's been verified.
01:42:10.204 - 01:42:19.940, Speaker B: Yes. And so the other crazy thing is, like, this data exists now on the sepolia chain until the last node running sepolia chain turns.
01:42:22.920 - 01:42:50.380, Speaker A: It. Is that truly just like. Let's just say a company shuts down. I've heard, for example, there's the company Solana, where they were just like, oh, yeah. If we ever go down, the chain will live on. I remember they said that about theirs. If there is a company goes down that runs this, it just will keep living on while there are nodes that exist.
01:42:51.040 - 01:43:07.440, Speaker B: Yes. As long as it's in such a way that anybody can become, I guess. Easy answer is as long as there is a node running somewhere. Yes. And it just requires one like your redundancy and decentralization disappears. Right. If there's only one node, but the chain still exists.
01:43:07.600 - 01:43:30.830, Speaker A: Yeah. Interesting. You could make like a chain with friends, but I figured that will probably be expensive, but it could be an interesting experiment. I remember in college people would say like, I made a hadoop cluster with my old desktop or something like that. And I was like, why? But you could, right?
01:43:32.560 - 01:43:33.870, Speaker B: Yeah, it's pretty cool.
01:43:34.400 - 01:44:01.428, Speaker A: Yeah. And also we can make it pretty so easily with just a little bit of fun where we could say, we're going to have a title in here and we'll just say decentralized news. And look at that, our tab is changed. And then I'm going to just add just light CsS. Not a lot of CsS, but I actually have.
01:44:01.594 - 01:44:07.700, Speaker B: I love it when front end people start seeing things that I make and they're like, yeah, but we could make it pretty, so easily.
01:44:08.040 - 01:44:23.820, Speaker A: There's just few things that you could do very fast. Just a little effort. I have a gist, actually somewhere where I'm going to find it really quick before I just fully share that. Where I have a gist somewhere where it's just a little bit of Css that makes pages look a little bit better.
01:44:23.970 - 01:44:24.380, Speaker B: Okay.
01:44:24.450 - 01:44:30.510, Speaker A: I just got to find it really quick. I've got it open on my other monitor. Does anybody in the chat have questions?
01:44:37.720 - 01:44:41.190, Speaker B: Anybody in chat follow along the whole way?
01:44:43.800 - 01:44:48.772, Speaker A: Yeah, we did it.
01:44:48.906 - 01:45:08.284, Speaker B: Nice. It. Yes. Fantastic. See, my version of this is I just have Mona Lisa installed as the default font in my browser then. So plain text pages just look nice already.
01:45:08.402 - 01:45:10.060, Speaker A: Just a little bit nicer.
01:45:10.400 - 01:45:16.350, Speaker B: Yeah, I'm pretty sure we'll send out a video afterwards as. Yeah.
01:45:19.780 - 01:45:45.610, Speaker A: Oh, I see. And these are OG image, OG title, if they exist. Cool. It would be interesting with any spare time to go through the solidity code with slightly more detail. I'm down to look at it a little bit more.
01:45:45.760 - 01:45:46.234, Speaker B: Yeah, sure.
01:45:46.272 - 01:45:49.502, Speaker A: Otherwise, hey, it's just a little nicer font. It's fine.
01:45:49.556 - 01:45:56.820, Speaker B: That's great. Yeah. I mean, while we're doing the solidity code walkthrough, we can try to get one with a picture. They look a lot nicer. Then you're going to have to style the image though, because.
01:46:00.230 - 01:46:15.542, Speaker A: Show must go on. Okay, let's see solidity code in more detail. Would you like to see? Because I feel like I understood it. It makes sense. But if anybody has specific things, or Richard, if you have any in mind.
01:46:15.596 - 01:46:46.462, Speaker B: Yeah. While we wait for any questions there specific to come in, I think the first half. Right. We're just basically declaring a bunch of variables and importing stuff like everything we see on the screen right now, the router and the Don ID, those are going to be specific to the chain that you're on. So those are, those links in there kind of show you. So different chains are going to have different addresses for the same basic functionality in the send request. I guess we didn't really talk through send request.
01:46:46.462 - 01:47:46.078, Speaker B: So what that's doing is that's going to take in the request, right? So we're building a request with our subscription id, the gas limit that we set above the Don ID and then the actual code as well. So that source on line 55. So we pass all that information into the Oracle network and that's where it will run that Javascript and bring it back and then fulfill request. So the Oracle network finishes, goes to the smart contract on the chain. That smart contract then comes back into this contract itself and calls a fill request. And that's where we add the articles to line 76 to the array that we created earlier and then we log like this, logging the response and the error and stuff like that. That was just kind of boilerplated stuff that was already in there.
01:47:46.078 - 01:47:48.600, Speaker B: So I just left it for ease of everything.
01:47:49.770 - 01:47:50.326, Speaker A: Excuse me.
01:47:50.348 - 01:47:52.566, Speaker B: Yeah, Adam, if you have specific questions.
01:47:52.668 - 01:47:54.920, Speaker A: On the side while you explain things.
01:48:00.110 - 01:48:03.900, Speaker B: Anybody else have any other questions too, while we're just hanging out for a minute or two?
01:48:21.180 - 01:48:24.090, Speaker A: Colors, I didn't even know corn silk was a color.
01:48:24.540 - 01:48:27.288, Speaker B: Peach fuzz is the color of 2024. I saw that today.
01:48:27.374 - 01:48:40.990, Speaker A: Oh, how about that? Hey look. That's kind of cute. Okay, 1 second. We're supposed to get the title from it if it has OG information.
01:48:41.440 - 01:48:42.152, Speaker B: Yes.
01:48:42.306 - 01:48:43.010, Speaker A: Okay.
01:48:44.900 - 01:48:51.280, Speaker B: Yeah, I guess we can fire off one more send request and see if we can get one with an actual title.
01:48:51.780 - 01:49:14.810, Speaker A: I am sending it. Otherwise I can do. Also, I don't like corn silk. I'm going to do light gray, whatever. Okay.
01:49:37.780 - 01:49:48.256, Speaker B: Yeah, the source in line. I don't know, I have mixed feelings on that. It's terrible for readability, but yeah, it's fine. It works TM.
01:49:48.448 - 01:50:02.510, Speaker A: Yeah, it gets the job done. Wow. It's really ugly, but it's okay.
01:50:19.100 - 01:50:25.950, Speaker B: I really need to up my css skills. What is your opinion on the best way to do that other than just.
01:50:26.480 - 01:51:05.784, Speaker A: So something that I used to do is literally, I called it codepend Thursdays where every Thursday I would find something on dribble like the design website, and just try to recreate it with just HTML and CSS. It worked really well for me. I just started to learn a lot faster. And then also I'm going to bring up code pen again. They have codepen challenges that are really great where if you go to codepend IO challenges every week they have a challenge and they have like, here's some resources for you. Try to pick up the challenge and do it. And it's really nice.
01:51:05.784 - 01:51:11.630, Speaker A: I've done a few of them, but you can see how other people build things. They give you something to start with sometimes.
01:51:12.160 - 01:51:13.420, Speaker B: Okay, that's cool.
01:51:13.570 - 01:51:16.492, Speaker A: It's very helpful for just upping it a little bit.
01:51:16.626 - 01:51:31.200, Speaker B: Yeah. My Css foo is woof. I always just go to Css Zen Garden back in the day. I don't know if you know about that. You know, I would just stare at and be like, what wizardry?
01:51:33.220 - 01:51:35.350, Speaker A: And we can also do a little bit of.
01:51:35.720 - 01:51:37.488, Speaker B: Did we get one with the title?
01:51:37.664 - 01:52:13.122, Speaker A: We haven't, but I'm going to do a little. If the title exists, show the title. Otherwise we'll have something else where we could that. So if it doesn't have a title, it should have worked. Weird. What's not true? That should be true. It.
01:52:13.122 - 01:52:26.898, Speaker A: Wait, I'm actually kind of curious about this. I'm going to console log all articles. I want to see what it returns as an object. Oh, see, it does have.
01:52:26.984 - 01:52:35.430, Speaker B: Oh, I did that up above. Sorry. I do that up above on line 27, if it doesn't have content for the title, it sets it to the URL.
01:52:35.770 - 01:52:36.838, Speaker A: Got it. Okay.
01:52:36.924 - 01:52:38.114, Speaker B: That is the title.
01:52:38.242 - 01:52:49.580, Speaker A: Got it. Okay. So instead of doing it in the UI, I can do it up there where if the title doesn't exist, then we'll have it say new article or something.
01:52:50.850 - 01:52:57.680, Speaker B: Yeah, you could just, on line 27, just change the URL to new article. Yeah.
01:53:01.410 - 01:53:02.160, Speaker A: Nice.
01:53:04.610 - 01:53:07.390, Speaker B: Let's see. Did you make a request earlier?
01:53:07.470 - 01:53:08.386, Speaker A: I did.
01:53:08.568 - 01:53:10.580, Speaker B: I think you have to refresh the actual page.
01:53:11.830 - 01:53:15.490, Speaker A: I refreshed it, but maybe the transaction is still pending.
01:53:16.650 - 01:53:18.482, Speaker B: We didn't do a transaction.
01:53:18.626 - 01:53:32.860, Speaker A: Wait, but it says pending in the thingy. That's fine. Let me actually save that in the readme. I could have sworn I clicked the button.
01:53:35.470 - 01:53:38.282, Speaker B: Oh, it's still sitting in metamask. You didn't approve it?
01:53:38.336 - 01:53:46.622, Speaker A: That was my bad. I didn't hit confirm computers slightly. Waiting, just sitting there, just like, hello, did you want this?
01:53:46.676 - 01:53:47.680, Speaker B: Don't mind me.
01:53:50.130 - 01:53:51.120, Speaker A: My friend.
01:53:53.590 - 01:54:02.370, Speaker B: Metamask needs like a little clippy thing where he pops up and be like, hey, I noticed you're trying to do a transaction and you haven't clicked confirm.
01:54:06.330 - 01:54:15.030, Speaker A: That's interesting how you did the title that way instead of from the title tag. Like it makes sense that you pulled from the meta.
01:54:17.290 - 01:54:25.850, Speaker B: Like from the head title. Yeah, well, so I was thinking with news articles and stuff, they don't always put them in the title.
01:54:27.790 - 01:54:30.026, Speaker A: Yeah, it'll be like Twitter, I think.
01:54:30.048 - 01:54:36.102, Speaker B: That was the example I was looking at was like a BBC article was the one that got pulled for me and so I was like, oh, BBC.
01:54:36.246 - 01:54:57.480, Speaker A: Yeah. Okay, let's see me still transacting success. It's good. It's real. That's awesome.
01:54:58.170 - 01:54:58.920, Speaker B: Yeah.
01:54:59.850 - 01:55:00.934, Speaker A: Wow, that's so fun.
01:55:00.972 - 01:55:03.538, Speaker B: The ones with their actual titles look a lot nicer.
01:55:03.714 - 01:55:30.160, Speaker A: Yeah, it's okay. Kind of want to do that. And then I'm going to have a line break. This part doesn't matter. I just like making things a tiny bit prettier. Then we could make the image. Actually, I'll do text align center here and then image will add.
01:55:30.160 - 01:55:37.220, Speaker A: That's like a little card type thing.
01:55:41.430 - 01:56:17.834, Speaker B: Nice. Do you elaborate on what makes this app decentralized channeling? Super useful for finding consensus off chain data, but in the case we are just pulling from a single API and triggering loading via contract. So, Adam. Yes. So the decentralized aspects would be once that information is pulled from the API, that's where the decentralization starts. So the API is 100% still centralized. In this example, if you wanted to build it more decentralized, this is where it would get very complicated.
01:56:17.834 - 01:56:47.298, Speaker B: For something like news, I think easier to talk through. An example would be weather, just like conceptually. So currently we're using just like weather.com API. In the example here we have one news source, weather. Make that connection and then we could pull from multiple weather APIs so that we're decentralizing our source and then getting it that way. But the decentralized portion is storing that data off chain.
01:56:47.298 - 01:57:25.170, Speaker B: You could also set this up where you could manually write the information off chain and it wouldn't be using chain link, but yeah. Yes, you could use any source which is more practical for decentralization. You're right on. Great question, though. There's a good clarification. There's a lot of interesting conversation when it comes to decentralization. And there's an assumption, I think, that some people make that if it's web3, then everything is decentralized.
01:57:25.170 - 01:58:04.130, Speaker B: An easy example of this is OpenC. So Opensea is an NFT marketplace and it is centralized, but those NFTs are stored on a decentralized thing so anybody can access them. But the window that you're looking at the blockchain through, which is opensea, that is centralized, but doesn't mean that the data is centralized at that point, if that makes sense. Do you have a question specifically about VRF with gaming? That's a very broad topic, Nick.
01:58:05.590 - 01:58:17.830, Speaker A: Okay, so I can deploy this front end on something like Netlify, for example. And the front end isn't on the chain, it just pulls from stuff on the chain, correct?
01:58:17.900 - 01:58:30.214, Speaker B: Yeah. You're just making a pretty viewer for the information that's on the chain. The picture and the title are not stored on chain. We're relying on that coming from the actual URL that we're loading.
01:58:30.262 - 01:58:31.514, Speaker A: Just the URL itself?
01:58:31.632 - 01:58:32.300, Speaker B: Yes.
01:58:36.510 - 01:58:59.770, Speaker A: Oh, look at that. I just reversed it. So now, like, the most latest one is up first.
01:59:03.980 - 01:59:26.870, Speaker B: Nice. See, it looks way better. This is why I need my CSS skills, because I would have done this, but this would have taken me probably like a full day of work. I love tailwind because it helps me a lot, but I'm sure I create some atrocious tailwind code, too.
01:59:31.080 - 01:59:44.440, Speaker A: I'll add the git book for this project, and then I'll add the gitbook for the repo or for the workshop. Where did I put it? Oh, my gosh.
01:59:45.980 - 01:59:49.128, Speaker B: Getbook. You put it in your readme, right?
01:59:49.294 - 02:00:15.308, Speaker A: Thank you. That is where I put it. And actually I'll make that a link too. Then I'll put it in the website itself. Have you got any resources on hand for a full list of chain link data feeds we could use for future projects?
02:00:15.484 - 02:00:37.130, Speaker B: If you go to data chain link, that will get you all the data feed stuff. We're looking for safe environmental info feeds related to the eth global Istanbul. Yeah. Data chain link. If you know of like an API or anything that you want, data from functions is probably your best bet there.
02:00:45.230 - 02:01:00.254, Speaker A: Okay, cool. Now, if somebody wanted to run this themselves, they can. I'm going to actually deploy this to GitHub, so if anybody wants to mess with it more. I know that you have a link, but since this is a live one.
02:01:00.452 - 02:01:01.520, Speaker B: Right on.
02:01:04.610 - 02:01:09.760, Speaker A: Let me make sure in the m file we don't want to.
02:01:10.310 - 02:01:13.566, Speaker B: Even if that's included, that's not like sensitive.
02:01:13.758 - 02:01:15.010, Speaker A: That's true. Yeah.
02:01:15.080 - 02:01:17.300, Speaker B: So you could include it.
02:01:24.950 - 02:01:28.740, Speaker A: Going to make a repo on my GitHub. Excuse me while I do that.
02:01:30.150 - 02:01:31.220, Speaker B: Sure thing.
02:01:33.110 - 02:01:34.900, Speaker A: Does anybody else have questions?
02:02:07.720 - 02:02:16.750, Speaker B: No questions. That's it. We did it. We solved all of this. We explained everything perfectly. Best webinar ever. High five.
02:02:16.750 - 02:02:31.650, Speaker B: Yeah. And for those of you who like, this is your first foray into web3. Like, welcome. Congrats. Hopefully it wasn't too scary. Hopefully, Cassie, it wasn't too scary. We didn't lose any real money.
02:02:32.100 - 02:02:39.236, Speaker A: Yeah, we didn't lose money. That was the scariest part for me. But besides that, it was a lot easier than I expected, which is always a good thing.
02:02:39.338 - 02:02:40.950, Speaker B: That's awesome. Yeah.
02:02:44.600 - 02:02:59.404, Speaker A: And this is now pushed. I also misspelled decentralized 1 second. Gosh, I'll fix that.
02:02:59.482 - 02:03:00.110, Speaker B: It.
02:03:19.540 - 02:03:24.944, Speaker A: Look at that, man. That's not what we did, but it's fine.
02:03:25.062 - 02:03:38.036, Speaker B: It was close though. The first sentence is good. Sort of. I always love it when it messes up like that. Because I'm like, yes, my job is safe for at least another week.
02:03:38.218 - 02:03:38.950, Speaker A: Exactly.
02:03:41.880 - 02:03:54.028, Speaker B: When it just hit 90% tabs during my job, then I'll know. Time to become a plumber for sure. Either I need to find a real life stardew valley. Move there.
02:03:54.114 - 02:03:54.956, Speaker A: That would be great.
02:03:55.058 - 02:03:56.460, Speaker B: Start farming crops.
02:04:08.660 - 02:04:16.080, Speaker A: All right. That readme is fixed and updated. The repo is pushed. Look at us go.
02:04:16.230 - 02:04:16.930, Speaker B: Awesome.
02:04:18.100 - 02:04:21.750, Speaker A: Well, thank you so much for teaching us all of this, Richard. This was really cool.
02:04:22.200 - 02:04:25.876, Speaker B: Thanks for driving. You did the hard part, I did the easy part. I just had to sit here.
02:04:26.058 - 02:04:42.748, Speaker A: Mean, I did a whole lot of copying and pasting. So I don't know if it was much the hard part, but I appreciate learning so much because there are a lot of things that where people will shout decentralization, smart contracts, the chains, but not actually explain what it means.
02:04:42.914 - 02:04:55.150, Speaker B: Yeah, no, it was great. I appreciate you going through it with me. That's fantastic. And appreciate everybody who sat through this with us. Sat through this with us. Yeah.
02:04:55.620 - 02:05:00.140, Speaker A: If anyone has questions later, should they reach out on Twitter?
02:05:00.220 - 02:05:29.210, Speaker B: Where should contact. So I have a new Twitter, my old Twitter. The algorithm just became untenable and I probably have no one to blame but myself and pausing on things, but it became much too political and I want it to be more tech focused. So yeah, I'll drop it in the chat here, but it's just the RG dev. It's also a lot easier to spell vrg dev than.
02:05:31.340 - 02:05:40.110, Speaker A: Yeah, I'm at Casadoo if you want to find me. I'm at Casadoo on most things, GitHub and all that.
02:05:40.800 - 02:05:47.548, Speaker B: Yeah, feel free to reach out, say hi, all those awesome things. Yeah. Thank you, cassie. This is awesome.
02:05:47.634 - 02:05:51.436, Speaker A: Thanks, everyone. Yeah, no, it was really fun. I really appreciate it. Thanks, everybody.
02:05:51.618 - 02:05:52.350, Speaker B: Yeah.
02:05:52.800 - 02:05:54.404, Speaker A: All right, until next time.
02:05:54.562 - 02:05:55.890, Speaker B: Yeah. Catch you all later.
