00:00:06.570 - 00:00:17.342, Speaker A: Up next, we're going to learn about RSK and integration of Chainlink to centralized oracles. So we are joined by smart contract engineers Julian Rodriguez and Fernando Rubal. Thank you guys for joining us.
00:00:17.476 - 00:00:18.798, Speaker B: Thank you very much.
00:00:18.964 - 00:00:20.170, Speaker C: Thank you, Abby.
00:00:20.330 - 00:00:23.562, Speaker A: I'm going to leave out of here so your screen share shows, Vic.
00:00:23.706 - 00:00:47.930, Speaker B: Okay, perfect. Thank you. Okay, welcome, everybody. Today we're very happy to show the work we are doing on Integrating Chainlink and RSK. First, a little bit about us, the speakers. So, I'm Junior Rodriguez. I'm product owner at IOB Labs, the company behind the RSK and technologies.
00:00:47.930 - 00:01:36.010, Speaker B: And here Fernando is with me. Fernando is CTO and blockchain of Kuistrik, which is a partner that helped us implement, and they did an awesome work on the technical side of this integration. So we are very happy to show you a demo of the progress and what we are doing. First of all, let's talk a little bit about what's RSK. Maybe there's somebody in the audience that is not familiar. RSK is the first open source smart contract platform powered by the bitcoin network. So basically what we do is we bring functionality and added value to the bitcoin ecosystem, allowing the execution of smart contracts, allowing faster and cheaper transactions, and bringing higher scalability to the bitcoin network.
00:01:36.010 - 00:02:32.830, Speaker B: How does it work? Technically, it is a bitcoin side chain. There is a two way peg, which allows you to lock certain amount of bitcoin in a specific account, and then it will be transferred through a two way peg and you will get one smart bitcoin on the RSK sidechain. So basically, the conversion is always one to one, because we're not mining or creating a new token or coin, we're simply using a bridge to connect the bitcoin blockchain with the RSK blockchain. The other interesting feature is that it's merge mined. The same hashing power, actually about 60% today, of the hashing power of bitcoin is the one securing the RSK blockchain. So it is extremely secure. And the same miners which are at the same time are mining bitcoin, are mining the RSK blockchain.
00:02:32.830 - 00:03:52.278, Speaker B: And the other interesting feature, especially for those running chain link operators and used to interacting with Ethereum, is that it is EVM compatible. So all the smart contracts in solidity as they run on Ethereum, they can run on the RSK blockchain. So that's a great feature that allows you to very easily migrate or port or do applications that can serve both networks now let's move to the other part of our technical stack we covered at the bottom, the bitcoin. We use it as a store of value, or layer one. Then we have smart contracts, which is RSK, which allows execution of smart contracts on top of the bitcoin network. But in order to really create applications and support DeFi applications, decentralized applications, decentralized sharing economies, we know there's still a gap in the technology that we need to cover. And that's why we created Reef, which is RSK infrastructure framework, which basically allows you, provides you with tools, services and libraries to manage the most important aspects that you will need in an application.
00:03:52.278 - 00:05:02.942, Speaker B: So identity services, decentralized storage, micro payments, decentralized communications, marketplaces and gateways, which is basically the one dealing with connections out of the blockchain, like Oracle's for example. And this is why Chainlink becomes so important, to be part of this stack and allow it to offer it to our users and partners building on top of our stack. And that's why we are very happy to be doing all this work with Chainlink and integrating that into our technology. A little bit about the integration itself. So the goal basically was, as I mentioned, integrate Chainlink and RSK's technology, which they were completely independent before. And the idea was to allow node operators that are currently serving the Ethereum blockchain to allow them to serve the RSK blockchain with minimum changes or very few changes. So that was the purpose for this.
00:05:02.942 - 00:05:52.590, Speaker B: We did an MVP and we did it with one reference price, which was the price of reef token and BTC. And we created both standard Oracle, but also an aggregator, which are the ones used by the price reference feeds in Chainlink. And this was a combined effort. We had the great support from Chainlink. We worked in a common repository with the Chainlink team, within meetings with the Chainlink team. And we really wanted to test it and validate it with real Chainlink node operators. And here I would like to thank Chainlayer and Vulcan, who were part of this and are still running on the testnet, the node operators that allows us to test and improve this integration.
00:05:52.590 - 00:06:50.010, Speaker B: So we're very happy to have them involved a little bit about how this works technically. Before jumping into the actual demo. Here, I'll get the pointer. Everything starts with some sort of defi application that somebody is building, and they will need to get some, they have a contract that for some reason needs to get a value right from an external source outside the blockchain. So basically what this does, they create a consumer contract that requests a job to run to an oracle contract. And then the other component that is here we have an RSK initiator, which is basically an external initiator that is listening for the events of this oracle contract. And it's going to connect with the chain link node sending the request.
00:06:50.010 - 00:07:45.242, Speaker B: The chain link node will get the value it could be from, in this case from an API or any other source, and they will get a response back with that external value, and they will send it back to the oracle contract through the RSK adapter. So here is where the initiator and the adapter are the components that are listening or connected. Let's say the initiator is listening, the adapter is connected to the RSK network and allows to do that integration. And all these components are the ones that we are going to show now in the demo. Before showing that, I would like to talk about the Ethereum token bridge, which is a key component. So basically this is something that we have already running on RSK in Mainnet. And basically it allows you to move ERC 20 tokens between both networks.
00:07:45.242 - 00:08:41.298, Speaker B: And this is very important because if you have certain token like in the case, it could be, in the case of the link token, we can easily use the bridge to convert it into our link, or the equivalent of any other token in our network, and you can basically use it either to get paid or to consume services in our blockchain. So this is a nice feature that makes also this very seamlessly to work. The bridge is decentralized, it uses smart contracts, it has a DAP, very simple, you have the link there, Tokenbridge RSK Co. So it's very easy to transfer value between the two networks. And this is a great enabler for this integration. So it's not like you will need a complete separate set of tokens in order to work. And now I will give the word to Fernando, who will move on to the actual technical demo.
00:08:41.298 - 00:08:46.050, Speaker B: First the point of view of the node operator, and then from the DAP developer.
00:08:46.550 - 00:09:38.390, Speaker C: Thank you, Julian. Hello everyone, I'm Fernando Robal, I'm the CTO of Qistree, and I was involved in the development of the initiator and adapter. And what we will see in this demo is the initiator and adapter services running and a deploy of an oracle on RSK test and network and creation of a shop that uses them. The first step will bypass that, because the setup and config environment is quite large. I recommend and encourage you to check out our repo to check all the configuration options. Well, we'll start by running the services. We have already built the docker images with Docker SD services.
00:09:38.390 - 00:10:33.590, Speaker C: So the first thing we want to do is run the services. We'll use the Docker run command for this. And yeah, we'll first start the initiator. You'll see there's some configuration options we'll run in interactive mode. We'll name it aerosk initiator testnet we'll pass an API testnet file that will contain the Chainlink authentication information for communicating with Chainlink. And also we will pass the env file that contains the configuration for the initiator. And then we will map the required ports and connect it to a network that is in this case my network that the Chainlink node is connected to.
00:10:33.590 - 00:11:45.230, Speaker C: And right away you can see that the initiator started and registered an initiator bridge on Chainlink through a library that we have that it's called Chainlink API client and it's on the adapter. It's pretty much the same configuration. We just passed a adapter key file that contains the private key of the wallet that will use the adapter. Then we can log into the Chainlink operator UI and you will see that the initiator and adapter, when they started, they automatically registered on Chainlink. You can see that there's errors. KTX adapter bridge created the initiator bridge is not showing on the UI yet, but it's there. So the truffle config file for deploying the oracle contract, we'll step into the testnet deploy directory.
00:11:45.230 - 00:12:42.430, Speaker C: We will install the required dependencies with NPM install and once that is ready, we'll just need to edit the Oracle migrations file. We just need to configure the adapter account address for allowing the adapter account to fulfill the oracle requests. We can copy the ethereum checksum of the account and paste it there. And that's all really. We can now deploy the oracle. The migration file is configured for that. We will use the truffle migrate command.
00:12:42.430 - 00:13:17.478, Speaker C: You can see everything that I'm explaining. You can see it in the repo, all the comments and stuff. We will use the NPX truffle migrate comment. We will migrate the first and second migration files. The first is the migrations contract that Traffol always has in every project. And the second migration file will be the Oracle migration file. And we specify that you need to use the testnet network.
00:13:17.478 - 00:14:16.910, Speaker C: So after compiling contracts, truffle will start migrating the first file, we'll take a quick look while it's migrating. You can see that there's a site token address in the configuration file that has the address of the site token address is the ERcob link contract. That is the mirror contract that is connected through the token bridge to the Coban link contract and the adapter address. We will use it after deployment of the Oracle. We will need to set the fulfillment permission for the adapter to be able to fulfill the oracle's requests. So we'll set it to true. So after deployment truffle will automatically enable the adapter to communicate with the Oracle.
00:14:16.910 - 00:15:22.962, Speaker C: This is the standard procedure by the way, you can see that this part of the process is very similar to what you will do in Ethereum. So after deploying the oracle you can copy the contract address that truffle gives you. And it seems that truffle isn't doing anything there. But now after the deployment is sending the transaction to call the set fulfillment permission function. So while it does that, we'll just move to the next step that is creating a shop that uses our initiator or adapter and oracle. So for this we will copy the shop spec that we have in the repository. It's a common json spec and we just need to modify the RSK initiator name.
00:15:22.962 - 00:16:43.230, Speaker C: We'll use the name of our initiator bridge RSK initiator and we'll use the RSKTx adapter. So you will see that these tasks are common tasks. Common adapters from Chainlink HTP get Json, parse, multiply fewind. So this will allow us to get a price from an external source and the initiator section we configured to be type external and has some params. The name a risk initiator of the bridge and the body has the address of the oracle contract. So we'll just copy the contract address that truffle gives us of the recently deployed oracle and we'll paste it into the address field so we can now create a shop that will use our initiator or adapter and will communicate with our oracle. So we have now as another operator operator we have shop Id ready to pass to the developers.
00:16:45.170 - 00:17:00.260, Speaker B: Okay great, awesome. Yeah, it's good that you mentioned that everything is in the repo and everything can be tried. Now we'll share the repo in the next slide, but anyone can go and try this. So now let's move to the dapp developer experience.
00:17:01.190 - 00:18:27.310, Speaker C: Yeah. For this second demo we will consume a chain link Oracle via consumer contract we'll configure and deploy the consumer contract, fund it with link and run script that triggers the request. So first thing we want to do when deploying the oracle will be to paste the shop spec that the node operator will give us. This is the shop id recently created, so we'll configure the consumer contract to use that shop ID. The site token address is the same. We are using the aircob link, the RSK testnet this is the consumer contract that you can find is the same that you can find in the chain link repository. By the way, we'll need to deploy the contract same as before truffle migrate but we will only deploy the third migration file, only the third contract we will use the network risk testnet configured in your truffle config file.
00:18:27.310 - 00:19:39.474, Speaker C: So after compiling the required contracts it will start migrating right away the consumer this is very straightforward. This part is very simple. If you are familiarized with Chainlink, you see this is very simple and we can see this is the consumer solidity file. We can see that the request was priced by callback function. We filled it with some parameters to the HTTP gate and the rest of the tasks we are using liquid to check the last traded price of the riff BTC pair. So the parameters for those tasks are hard coded, in this case in the consumer contract and we will need to fund the consumer contract with link. So for this we'll paste after we have the address we paste it in the RSK explorer.
00:19:39.474 - 00:21:03.834, Speaker C: So the explorer will give us the correct checksum for RSK so we can use in nifty wallet that has native support for RSK testnet. And yeah we'll send some links, five links. So once the consumer is funded with links so it can pay the oracle for the requests, we will need to trigger the request. So for that we will need the last step. We will use script that we have in the repository that is called consumer request. So we will execute it with NPX truffle exec and connect it to the network. Also you can see that it's requesting now the riff price is sending the transaction to call the request price by callback and once the transaction is done you will see it in the initiator that is now subscribed to the Oracle events and it will tell you detected an oracle request event for job and this is the shop we have created and it will wait for a number of confirmations that you can configure.
00:21:03.834 - 00:22:10.360, Speaker C: The default will be three to avoid chain reorganization problems. And yeah, in this case it initiated the shop successfully. So you can see it in the chain link operator interface that it was a shop run created and the status is pending bridge because now Chainlink has the data and passes to the adapter and now the adapter is writing the data, sending the transaction to the oracle. You can see that adapter received fulfillment request and the transaction is in transaction pool. So the adapter will wait until the transaction is confirmed and then update the shop status with completed. And you can see once the adapter is done in 45 seconds complete. Everything's great as it should be.
00:22:13.530 - 00:22:27.494, Speaker B: Nice. Excellent. Thanks. So let's continue. I think we're doing great on time. I have only two more slides just to sum up. What's the status? Okay, so this is deployed and running on the testnet.
00:22:27.494 - 00:23:07.234, Speaker B: Okay, so it's confirmed the testnet. We have an aggregator already running. This is the address of the aggregator. Just as an example to leave you out there. We're ongoing the security audits and reviews between moving on to the main net, but we're really targeting the main net during the next month. So during September 2020 we'll be moving this into the main net. And everybody, like any operator serving today the Ethereum network with very small and simple changes like we saw, I would say that most of the process is very similar, can start serving the RSK blockchain additional resources.
00:23:07.234 - 00:23:59.570, Speaker B: It was a lot of content to cover in just 30 minutes. So our development portal developers, RSK.com has information about running all this chain link integration, plus a lot of information about RSK and RIF. So that's a great source for developers. Of course the GitHub repo where everything is, that address that is there, GitHub.com smart contractkitchainlinsk of course the chain link documentation, it's extremely useful, but most of you know that and other interesting sources of information about. To keep up to date with Riff and RSK, we have a blog in reef where there's an Oracle expert panel we did a month ago that is really interesting, talking about the state of the arts of Oracles.
00:23:59.570 - 00:24:39.686, Speaker B: And we're having a lot of webinars that are offered by our dev network team, which are very interesting and where we cover a lot of topics about RSK and Reef as well. And of course you can stay tuned. Follow us on Twitter. We will be posting updates about this integration and any news related to this. So having said that, thank you very much. I hope this gives you a quick overview of what we're doing and how we see Chainlink can be integrated into our scale and into our technology stack. I think we have a few minutes.
00:24:39.686 - 00:25:03.280, Speaker B: If there are any questions maybe. Or I can check the questions probably. Sorry. So I'll stop sharing. Okay, so I'll stop presenting. Let's see if there are questions. May I ask if you use the bridge library for getting external adapters or you make them from scratch?
00:25:03.880 - 00:25:06.390, Speaker C: We make them from scratch in this case.
00:25:07.400 - 00:25:29.160, Speaker B: Perfect. Well, incredible interchange communication. Thanks, Thomas. We have a fun, I'm very interested in understanding exactly how the adapter works. What's the API call from the chain link Oracle directly. If the call was directly from the chainlink oracle to the RSK node.
00:25:31.660 - 00:25:41.150, Speaker C: The chainlink oracle is deployed in the, I'm understanding, right, yeah.
00:25:41.680 - 00:25:57.812, Speaker B: No, maybe it's talking about the other way, the chain link, the way back. Right. Once the chain link oracle, you can call that the chain link node connected to the external source. So once the node hits the API, the value is returned via the adapter. Right.
00:25:57.946 - 00:26:03.456, Speaker C: The chain link oracle is connected to the ethereum network like as normal.
00:26:03.568 - 00:26:07.416, Speaker B: No, but I mean to go to the RSK network, it goes through the.
00:26:07.518 - 00:26:18.760, Speaker C: Connectivity to the RSK testnet is made through the adapter. We connect the adapter through web three to the RSK node.
00:26:20.560 - 00:26:22.060, Speaker B: Java SDK.
00:26:23.760 - 00:26:26.140, Speaker C: We're using node JS.
00:26:26.640 - 00:26:43.440, Speaker B: You don't need Java for this, for the integration. You only need it if you really want to modify things in the RSK node. It's built in Java, but the rest, you don't need that. Okay, there are some RSK versus.
00:26:45.400 - 00:26:46.710, Speaker C: It'S not a fight.
00:26:49.480 - 00:27:20.220, Speaker B: No, it's not comparing the repos. No, I think the one that says Chainlink, I think it's generic. I think it's for like, I haven't got into that repo. But the one that is about the integration between Chainlink and RSK is that one that you have on top. So if you want to interact with the RSK blockchain, you have to go to this one that you have on top. That is the one that says Chainlink, RSK. That's the one where you will have the specific components to connect to the RSK network.
00:27:20.220 - 00:28:00.030, Speaker B: I know that Chainlink has other, the adapters and initiators, they are used for other blockchains as well. But this specific work is regarding the RSK integration. But if I want a Java SDK, because I want all my back end code to be in Java. Okay. Yeah, I guess you can build, yeah, the example we did is just in node, but you can do the adapter in anything you want.
00:28:00.560 - 00:28:14.370, Speaker C: I don't know if there's a limitation, really. I think you can use the framework that you prefer, but Chainlink can answer better that question.
00:28:15.220 - 00:28:44.324, Speaker B: Yeah, thanks, Thomas. Actually, as I mentioned before, there are a lot of things in common between RSK and Ethereum. And RSK was kind of designed also to be very compatible. So it runs the EVM. So as I mentioned, smart contracts can be migrated as is, and run on the RSK blockchain. You can use web three to connect. Of course, there are some specifics about the web three, and minor difference on how to interact with the node.
00:28:44.324 - 00:29:03.250, Speaker B: But overall, the great part of you. Exactly. Use the same libraries as you do with Ethereum, but on RSK. So the experience of developing and building on top of RSK is very simple. So, yeah, thanks.
00:29:04.500 - 00:29:05.490, Speaker C: Thank you.
00:29:07.540 - 00:29:25.636, Speaker B: Okay, guys, this is just a starting point. We will be happy for you to go into the repo to contact us to start building on this if you are interested. As I mentioned, we already have some node operators and everything is looking so great. So thank you. Thanks, Chainlink. Also, thanks, Hebi, for the space.
00:29:25.738 - 00:29:29.290, Speaker A: So much for joining. What's the best way for everyone to reach you if they have any more questions?
00:29:30.220 - 00:30:03.764, Speaker B: Well, you can reach us. There were our emails. Mine is julianr@iovlabs.org and Fernando is Fernando at Kuistree Co. Yeah, but also through our social networks, through the development portal, we have a lot of channels. If you look for RSK or reef anywhere, you will see a lot of information. We have a strong team that will be connecting with us.
00:30:03.922 - 00:30:05.490, Speaker A: Perfect. Thank you guys so much.
