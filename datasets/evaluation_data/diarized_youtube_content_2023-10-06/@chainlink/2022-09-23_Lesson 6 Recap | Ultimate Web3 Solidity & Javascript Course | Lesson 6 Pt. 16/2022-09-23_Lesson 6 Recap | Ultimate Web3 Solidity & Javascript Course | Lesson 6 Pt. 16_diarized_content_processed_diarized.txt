00:00:10.490 - 00:00:52.250, Speaker A: Right, the next part of this section, I'm actually going to go over the typescript edition of this, but for all intents and purposes, you've successfully created your first hard hat project. You've done a ton of amazing things in this lesson. Let's do a quick refresher of what we've learned so far. We learned how to spin up our own hard hat projects, and now we can run yarn hardhat and see a list of the tasks and different things that we can do with Hardhat. We learned that Hardhat looks for this Hardhat config js. And this is sort of the entry point for any task that we run that starts with Hardhat. We learned we can add our contracts to this contracts folder, and then we compile it by running yarn hardhat compile.
00:00:52.250 - 00:01:27.778, Speaker A: We learned that all the compilation goes into the artifacts and then the cache as well. And if we want a clean reset, we can either delete these two files or just run yarn hard hat clean. So we learned that we can use scripts or tasks to actually deploy, interact, and do things with our smart contracts. We also learned that I'm going to be using scripts for the rest of this course, but if you want, you could absolutely use tasks as well. I've asked this question a million times. What's the difference? Nobody really seems to know what the main difference is, but I think the main difference is that tasks are for plugins and scripts are for your local development mart. That is my delimiter.
00:01:27.778 - 00:02:16.742, Speaker A: We learned that we can import a whole bunch of things, including tasks from hardhat in our scripts, and we can work with our async functions to grab our contracts and deploy them. We actually then can programmatically verify them using hardhat and using hardhat plugins. And then additionally we can interact with our contracts very similar to how we did it with ethers. We wrote a wonderful verification script, and we also wrote our own task. We wrote our first tests for this whole space, and we showed what our tests are going to look like moving forward, and we talked a little bit about their importance. And I really should stress that writing good tests is going to be the difference between a really professional environment and kind of a side project. Whenever I audit smart contracts, or whenever I'm given a project for someone to tell me to take a look at, the first thing I look at is the readme, of course.
00:02:16.742 - 00:02:54.082, Speaker A: And then the second thing I look at is the tests. And if tests aren't good, I usually tell them, hey, you need to go back to the drawing board and you need to level up your tests. So tests are really, really important, especially for this space. We learned about a couple more environment variables we can use. We learned about a couple of tools to see how good our tests are, one of them being coverage. We also learned about a gas reporter to see how much it's going to cost us when we actually deploy to a real network. We learned a ton about the hardhat config and how there are multiple networks that we can add to our hardhead so we can make our project, our evm code work with any network out there.
00:02:54.082 - 00:03:20.454, Speaker A: We started working with dev dependencies instead of regular dependencies. Now, readmes are something that I'm not really going to go over too deeply in here, but readmes are sort of like the welcome page of your GitHub repository and really should give you an understanding of what your code does. Being a part of the web three space and being a part of the blockchain ecosystem is really more than just you coding your stuff by yourself. You want other people to interact and engage with your code and engage with your projects.
00:03:20.582 - 00:03:21.578, Speaker B: I haven't showed you how to use.
00:03:21.584 - 00:04:09.450, Speaker A: GitHub yet, but don't worry, we're going to. But if you look at my hardhat simple storage readme, if you scroll down, usually you really want to have a getting started section where you define how to set up all the code and how to set everything up. A quick start section and maybe a usage section and some testing section which teaches people how to actually use and interact with your code. Since we're just learning more of the code part and not so much the readme part, for now, we're not going to go over how to make a fantastic readme. However, I will leave a link in the GitHub repository associated with its course, linked to this best readme template. It really is a fantastic readme template that you can copy to any of your projects to make them look really good and give them a really good setup so that other developers can come to your project and learn and participate with what you're coding. But all right, you have learned an absolute ton.
00:04:09.450 - 00:04:38.598, Speaker A: You should be incredibly proud of yourself and incredibly excited that you've made it this far. Now, I'm going to jump into the typescript section here. So for those of you who are coding along with typescript, feel free to follow along. For those of you who are not, you just finished the basic section on Hardhat, but stick around. The next two hardhat sections are going to be the ones that really fine grain and hone your skills and give you all the fundamentals for working with these frameworks. So be sure to follow along with the next two sections. We've got a ton more fantastic content for you.
00:04:38.598 - 00:04:45.880, Speaker A: We are just beginning to get deeper into the smart contract ecosystem. So take that lap, get that coffee, and I'll see you soon.
00:04:48.330 - 00:04:48.726, Speaker B: All right?
00:04:48.748 - 00:04:59.100, Speaker A: Also now let's do this with typescript. So I am going to go ahead and just start this from our javascript section. However, if in the future you want to start a new hard hat project, you can actually start a new project.
00:04:59.870 - 00:05:04.542, Speaker B: With Yarn Hardhat and then do create.
00:05:04.596 - 00:05:07.146, Speaker A: An advanced sample project that uses typescript.
00:05:07.338 - 00:05:09.726, Speaker B: You'll add a ton of plugins and.
00:05:09.748 - 00:05:11.166, Speaker A: You'Ll wait a while for everything to.
00:05:11.188 - 00:05:13.438, Speaker B: Get uploaded, and you wait a little.
00:05:13.444 - 00:05:41.110, Speaker A: Bit for everything to get downloaded. We're not going to do that though, because I'm going to show you how to convert this to javascript anyways, if in future hardhat sections, as we're coding along with javascript, if you want to code along with typescript, absolutely, 100% can. But let's go ahead and show you what the main differences are. Now that advanced typescript thing is going to add a whole bunch of packages that you may or may not want. I will talk about some of them in our next lesson, but there are going to be some that you absolutely do need. Those are going to be at typechain.
00:05:41.270 - 00:05:49.770, Speaker B: Ethersv, five, at typechain hardhat, at typescript.
00:05:50.110 - 00:06:01.790, Speaker A: At typeschi, at typesnode, at types mocha, tsnode, typechain and typescript.
00:06:02.610 - 00:06:04.126, Speaker B: And I have a link and in.
00:06:04.148 - 00:06:19.800, Speaker A: The GitHub repo associated with this course I've got this yarn ad that you can just copy paste if you want to just copy paste that into your project to run it. Whoops. And I should have added those as dev dependencies. So we're going to actually just make them dev dependencies real quick just by deleting these two lines and adding a comma here.
00:06:20.250 - 00:06:20.758, Speaker B: Awesome.
00:06:20.844 - 00:06:57.166, Speaker A: That looks much better. And then of course, what we're going to do is we're going to convert all of our javascript to typeScript. So anywhere where we have js we're going to put ts. Obviously, if you're coding this from scratch with typescript, you would do the TS from the get go. This includes our hardhat config that's also going to be typescript now, and additionally we're going to add a tsconfig jSon. This is going to be our typescript configuration typically for a setup we're going to go with something like this, and you can copy this from the GitHub repo associated with this course. It's basically telling typescript what versions of typescript and what files to include for working with typescript.
00:06:57.166 - 00:07:09.302, Speaker A: Now let's go ahead and start with our deploy typescript. Per usual, instead of using require, we're going to go ahead and use import. So we're going to do the exact same thing. We're going to have import ethers run.
00:07:09.356 - 00:07:15.366, Speaker B: Network from hard hat, and then in.
00:07:15.388 - 00:07:26.422, Speaker A: Our verify function we're going to add the add the types for these arguments. So contract address is going to be a string and args is going to be an array of arguments.
00:07:26.566 - 00:07:27.566, Speaker B: So we're going to say it's going.
00:07:27.568 - 00:08:20.090, Speaker A: To be any array because it could be string, it could be numbers, it could be booleans, it could be anything. We're also going to say for our e, it could be any, even though this is technically an error type, we're just going to put any for simplicity, for now, all of our typescript scripts are included in our TS config or any typescript files are manually added here, which we have our entire scripts folder here, which is good. So now we need to add ethers in here. Well, if we look at our hardhead config TS, we're using require here still, and we need to swap this out for import for env. You can use env config for it to grab your env file. Now that we've imported everything, if we go back to our deploy TS, we can see that that linting has gone away. If you want to be even more explicit, we can go ahead and add import at nomiclabs hardhat like so.
00:08:20.090 - 00:08:43.582, Speaker A: Reason we don't need to import it here is because these two packages also work with hardhat ethers, so they automatically import it. But if you want to be super explicit, you can go ahead and add it like so. Now we're almost good to go. But remember, our hardhat config is also importing our tasks. So we're going to need to update our tasks, our block number to be typescriptified. So of course instead of const require.
00:08:43.646 - 00:08:49.638, Speaker B: We'Re going to do import task from hardhead config and we're going to be.
00:08:49.644 - 00:09:08.970, Speaker A: Sure to export our task from block number as the default. So we're going to do export default task like so. And now we should be good to run our scripts so we can just do yarn hard hat run scripts deploy TS. We can do network hardhat if we choose.
00:09:09.120 - 00:09:10.042, Speaker B: And awesome.
00:09:10.176 - 00:09:16.446, Speaker A: Now it's when we get to the testing that things get a little bit different here. So let's go ahead and change this.
00:09:16.548 - 00:09:20.350, Speaker B: Require to import just to make it happy there.
00:09:20.500 - 00:10:04.350, Speaker A: Let's try to run yarn hardhead test. We get a whole bunch of errors and in vs code we'll actually go ahead and get these errors right from the linter. One of the trickiest things that you run into as a developer in this space is calling functions on contracts where those functions don't exist, or vice versa. We're not calling functions on contracts that do exist. Right now. The typing for our contracts is just type contract, which isn't super helpful because type contract doesn't necessarily have all the functions that we want it to have. We want our contracts to be of type contract, but we want them to be of the type of our contract because if they're the type of our contract, they can have all the functions that we want them to have.
00:10:04.350 - 00:10:24.466, Speaker A: So to give our contracts the correct typing here, we actually can use this tool called typechain which gives our contracts correct typing. Typechain has a hardhat plugin which allows us to use typechain and typescript natively together. Typechain hardhat was one of these things that we already installed. And to add it to our hard hat we got to just go to.
00:10:24.488 - 00:10:26.834, Speaker B: The hardhat config and add it in.
00:10:26.952 - 00:11:00.062, Speaker A: Import at typechain hardhat. Now once we import that in to our config, if we run yarn hardhap, we now get a new task here called typechain. If you read the description, it says generate typechain typings for compiled contracts. This will enable all of our contracts to have their own typing, so we can have a simple storage variable of type simple storage contract, which is much better because we're always going to know exactly what we can do with each contract. To create this we run yarn hard.
00:11:00.116 - 00:11:08.606, Speaker B: Hat typechain and this is going to create a new folder called typechain types.
00:11:08.718 - 00:11:34.826, Speaker A: With types for all of our contracts. You can even go into our simplest ts which is going to have all the different functions and everything you could do with our simple storage contract automatically coded into typescript and javascript for us, which is incredibly helpful. And again, I know I haven't shown you what this is yet, but in our git ignore we usually want to add typechain and typechain types into our git ignore, so we don't push them up to GitHub now, back in our.
00:11:34.848 - 00:11:37.402, Speaker B: Test, we're going to add the exact.
00:11:37.536 - 00:11:43.738, Speaker A: Types of these different objects here. So we're going to import them from that folder that we just created.
00:11:43.834 - 00:11:48.442, Speaker B: So we'll do import simple storage comma.
00:11:48.586 - 00:12:08.998, Speaker A: Simplestorage underscore underscore factory from typechaintypes. The simplest storage factory is going to be simplestorage factory and then simple storage, of course, is going to be simple storage. So now we're going to do let simple storage factory which is going to.
00:12:09.004 - 00:12:13.906, Speaker B: Be of type simple storage underscore underscore.
00:12:13.938 - 00:12:16.998, Speaker A: Factory and then simple storage, which is.
00:12:17.004 - 00:12:20.886, Speaker B: Going to be of type simple storage.
00:12:20.998 - 00:12:49.166, Speaker A: Contract and if we command clicked into simple storage once again, we can see all the contract functions that we know and love are here. In addition, we have all the functions of the actual contract itself. Once we do that, we're pretty much good to go. We just need to add a couple of new things here. Get contract factory returns a type ethers contract factory so what we just need to do is we need to wrap this in a simple storage factory type. So we'll just do a little wrap.
00:12:49.198 - 00:12:57.426, Speaker B: Like this and we'll say as simple storage underscore underscore factory and that's good to go.
00:12:57.528 - 00:12:58.726, Speaker A: Now that we've added all this, we.
00:12:58.748 - 00:13:02.514, Speaker B: Can run yarn hardhat test and boom.
00:13:02.562 - 00:13:09.254, Speaker A: Our tests run as normal. But with typescript and with this additional typing, that makes our lives substantially, substantially better.
00:13:09.372 - 00:13:10.406, Speaker B: And that's going to be all you.
00:13:10.428 - 00:13:13.718, Speaker A: Need to know for typescript. Per usual, all of the branches have.
00:13:13.804 - 00:13:16.598, Speaker B: An optional typescript branch that you can.
00:13:16.604 - 00:13:18.710, Speaker A: Use to reference to work. With typescript.
00:13:20.370 - 00:13:26.700, Speaker B: You close.
