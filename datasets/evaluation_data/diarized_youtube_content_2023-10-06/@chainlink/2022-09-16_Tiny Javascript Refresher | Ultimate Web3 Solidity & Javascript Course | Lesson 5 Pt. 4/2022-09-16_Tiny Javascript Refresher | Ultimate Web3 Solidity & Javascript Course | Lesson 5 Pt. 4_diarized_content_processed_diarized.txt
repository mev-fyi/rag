00:00:11.050 - 00:00:45.978, Speaker A: Awesome. So now that we have our code in here, it's time for us to learn how to actually deploy our contract using JavaScript. This is going to teach us a lot about transactions and what's going on under the hood and even what's going on under the hood in remix. In remix we usually just hit a compile button and then hit a deploy button, and that's really it. In JavaScript we're actually going to create our own functions that are going to help us do both of those. And as I mentioned, this is the part of the course where we're going to start working with JavaScript and optionally typescript if you like. Like I said, all of these sections come with a typescript edition as well.
00:00:45.978 - 00:01:34.246, Speaker A: So let's set up our deploy JS script to actually deploy our simplestorage sol. So how can we get started here? Well, let's first learn how to run a script using JavaScript and node JS. So if you want to do a print line or just print something out to your terminal, what you can do is something called a console log. And if I do console log hi, I hit save and I open up my terminal, I can now run node deploy js and it'll print out hi. Node is how we say hey, we want to run this Javascript code using node JS. Other languages you might be familiar with. Sometimes we'll do Python, deploy Py or Java C deploy Java, et cetera.
00:01:34.246 - 00:02:31.606, Speaker A: But with JavaScript, since the front end and back end JavaScript are different, we run code on the back end with node and with JavaScript you can do a lot of things that you'd see in something like solidity with a little bit looser of a structure. If I wanted to create some variable, I could say let variable equals five. This is kind of similar into solidity like un 256 variable equals five, but in JavaScript we use let or VAR or const and then I can print this out, I can do console log variable and I hit save. JavaScript is optional on whether or not you actually want to have semicolons here. I think prettier defaults to putting semicolons and we'll get rid of those in the near future. In your terminal, once you start typing the name of a file, if you hit tab it could autocomplete the rest of the file name for you. Node deploy hit tab, it'll autocomplete.
00:02:31.606 - 00:03:20.634, Speaker A: And if we hit enter now we get high and then we get five. Since it prints out high and then it prints out five javascript automatically starts with whatever code you have at the top of the file. So it does console log first, then variable, and then this one as well. However, a good practice is to actually wrap everything you want to do in a main function and then run that main function. But what we could do is up at the top here we could say function main, add some parentheses and some brackets, a closing bracket at the bottom, and hit save for it to auto format. Right now, if we run this, nothing will happen because we've wrapped all of our code in a main function. So if I run it now node deploy js, nothing happens because I need something to call the main function.
00:03:20.634 - 00:04:04.134, Speaker A: So if I then take this, this main function down here and I call main, our Javascript code is actually going to say ah, the first line of this script is actually this main function here. So now if I do node deploy JS, it'll run high and five, which is what we want. Now this is going to be the setup for most of our scripts moving forward, including the scripts that we write when we get to hardhat. However, there is going to be one major difference. Instead of regular functions, we're actually going to use something called async functions, and we're going to do something called asynchronous programming to do this. Now, if what I say next is really confusing for you, don't let it slow you down. Feel free to go ahead and watch that Javascript course to learn more about this, but I'll also let you know.
00:04:04.134 - 00:04:16.570, Speaker A: Hey, this is an async function. Here's what we need to be aware of when working with it, okay, follow it's.
