00:00:07.240 - 00:01:07.260, Speaker A: Hey, everybody. Welcome back to another episode of Rehash, a web3 podcast. I'm your host, Diana Chan, and today we're speaking with Renee Lubov, software engineer at Celestia, about data availability, or DA for short. Renee is one of the founding engineers at Celestia and breaks down for us everything we need to know about DA and how it's implemented at Celestia. We also talk about modularity in blockchains, light nodes, and other technical concepts that you may have heard of before but maybe don't have a clear understanding of just yet. Lucky for us, Renee does a great job of explaining all of these concepts very clearly at a more personal level. Renee also shares about her background, how she taught herself how to code, what protocol engineering is, and how it's different from app development or smart contract coding that you probably first think of when you think of devs in the space, what it was like being a founding engineer at Celestia and her experience as a woman in crypto, having joined way back in the early, early days.
00:01:07.260 - 00:01:56.332, Speaker A: This is definitely, overall, a more technical episode than most rehash episodes. But I think it's a great one for everyone to listen to because I think it's useful even for non technical people to have a basic understanding of how Da actually works. Renee was nominated for Rehash by Tina and voted onto the podcast by Tina, Jimmy chain Hudson, Jameson Queen Wartooth, and David Phelps. So, without further ado, here's my conversation with Renee. Renee Lubov, welcome to Rehash. I'm so excited to chat with you, and I have to admit I'm a little bit nervous because I don't do these technical episodes very much. We don't have a lot of devs on the podcast, so I feel pretty rusty with just my knowledge of everything, and you're gonna have to bear with me and just keep it as basic.
00:01:56.332 - 00:02:01.020, Speaker A: Do, you know, keep. Keep an Eli five mindset throughout this whole thing, if you can.
00:02:01.140 - 00:02:09.556, Speaker B: Yeah, it's fine. I mean, this is my first podcast anyway, so I'm not really, like, well equipped to do it. So it's. It's our, like, kind of our first on both sides.
00:02:09.588 - 00:02:10.524, Speaker A: So I am.
00:02:10.652 - 00:02:12.092, Speaker B: That'll be interesting. Yeah.
00:02:12.156 - 00:02:43.480, Speaker A: Amazing. Well, thank you for choosing rehash, or thank you, Tina, for choosing Renee for Rehash for her first podcast appearance ever. Shout out, Tina. So I want to talk to you today all about data availability, and we've had a couple of guests on, in the past on rehash talk about data availability, but I want to do, like, a really deep dive. Like, I think in the past episodes, we've kind of just mentioned it in passing. We had 13 year old BC from Eigen layer on. We had Jimmy chain from catalyst on to talk about modular blockchains and Da and things like that.
00:02:43.480 - 00:02:58.880, Speaker A: But I want to, like, really just talk, like, everything about data availability. My goal is that all our listeners understand everything. Maybe not everything, but, like, have a pretty solid understanding of what DA is by the end of this episode.
00:02:59.000 - 00:03:24.780, Speaker B: Okay. I mean, I can only talk about DA from the perspective of Celestia and how we implement it because I'm not aware of, like, the implementation details of other protocols. But, yeah, I'm happy to give as much information as I possibly can. I, like, I honestly, it's. It's funny because people make Da into this, like, big, sexy term, and that's, like, kind of difficult to approach, but really, it's a simple concept. At the end of the day, it's just like, everything else in crypto is just named badly. Like, everything.
00:03:24.780 - 00:03:32.990, Speaker B: Everything seems scary when it's named badly. And, like, the name is not self explanatory. So, yeah, let's. Yeah, we can get to it.
00:03:33.110 - 00:03:55.770, Speaker A: So my super basic understanding of DA and what it is is that it gives us a way to store data on chain in shorter increments of time, which allows for more space to store data, which allows for prices to be cheaper. It's my extremely basic. Understand. Tell me how wrong I am.
00:03:56.400 - 00:03:58.220, Speaker B: I don't really understand that.
00:04:00.760 - 00:04:07.620, Speaker A: You go, then you explain it. Let's just start the basics. What basic from a very high level. What is data availability?
00:04:08.120 - 00:04:25.122, Speaker B: Okay, so DA is just. I'm gonna call it Da because it's impossible to. It's kind of a misnomer. We've talked about it a lot. Like, people have tweeted about how, like, Da is a bad term. We should call that, like, data publishing instead. It's not like, it's not really a storage layer.
00:04:25.122 - 00:04:39.386, Speaker B: Like, everybody thinks it's a storage layer where you can just store your data and they can be able to fetch it whenever you want. That's ipfs. That's different. That's a different kind of protocol entirely. It has nothing to do with storage. Storage is involved. Storage is involved in every blockchain.
00:04:39.386 - 00:05:06.390, Speaker B: But that's not the crux of what VA is. Da, or we can call it data publishing, is just the ability to verify that some arbitrary data that you posted to that chain has been included in a block and has been included in its entirety, it's really basic. It's just like, okay, I've, I've published a message. Doesn't matter what's in there. It's like some random bytes. Could be a string, could be my name. Doesn't matter.
00:05:06.390 - 00:05:15.470, Speaker B: I want to make sure that, like, re n e is published in that block and is, like, included it in its entirety. There's no, like, emissing. That's it.
00:05:15.510 - 00:05:30.494, Speaker A: Okay, so why is it such, this novel thing? Hasn't data publishing always been a thing as long as blockchain has been around, the data needs to be published and verified. So what is all this talk lately about Da and how it's changing everything and making everything better?
00:05:30.662 - 00:06:23.548, Speaker B: The reason why it's super sexy is because you have. Okay, so first of all, DA has been around for a long time, like, well before people started talking about it. It's been around since the lazy ledger paper came out, which is what Celestia is built off of. Or, like, it's lazy Ledger is the paper of Celestia. And Lazy Ledger was the name of the company before it became Celestia. Okay, so your original question was like, why is it sexy? Okay, so it's sexy because lazy Ledger, like, the concept of lazy Ledger and the concept of data availability that was, like, talked about in that paper is an answer to, like, the question of scalability and blockchains. And if we're going to, like, move into a roll up centric future, like, how are we going to allow participants in a network to be able to transact at like a high frequency without having every single participant in the network having to process every single transaction that is occurring in that system? And so the answer to that is roll ups.
00:06:23.548 - 00:06:27.916, Speaker B: Right? So you have like, independent, you could have, like, there's so many different flavors of roll ups. And I don't want to go into.
00:06:27.948 - 00:06:31.140, Speaker A: I mean, optimistic ZK, those are like, the more well known ones, I would say.
00:06:31.180 - 00:07:21.992, Speaker B: Yeah, yeah. But then even like, roll ups that sit on top of a settlement layer, whether it's like a base roll up or like a sovereign, like, there's so many different ways that you can, like, build a system that posts a data somewhere else to, like, some, some random data availability layer. Data availability itself was a response to like, okay, how do we, how do we scale blockchain? And the idea here is that, like, you can do that by, like, you don't need to have a system where every single node in the network has to process every transaction. You can have like, minimal amount of nodes. You can even have one node which is called a centralized sequencer that posts every transaction that's happening in that, like, I guess, in the roll up itself onto Celestia. And then the participants of that roll up and cross reference what it's posted, what it's saying that it's processing. Like, what transactions it's saying that's processing with what it has actually posted on Celestia.
00:07:21.992 - 00:07:52.478, Speaker B: The problem that it's solving there is that, like, say I'm a node, I'm that centralized sequencer, right? We can just call it like a main, it's just a node. It's just like a, it's a computer. It's a computer that is processing however many transactions. And you and I are participants in this roll up that this node that the centralized server is processing, right? That centralized server could feed me information saying like, hey, I process these transactions, this transaction set a. And I'll be like, oh, thanks. Okay, that's valid. That looks valid to me.
00:07:52.478 - 00:08:41.196, Speaker B: And it could feed you a totally different version of the truth and be like, hey, I actually processed for this site that I told Renee. I processed these transactions for. I actually processed these transactions. So it's feeding you a different, like, different but valid, I guess, state of what the chain is. And so the way to get around that is like you and I, and like, let's say you and I can talk to each other, right? But, like, if there is many other nodes in the network, we can't all cross reference what this node is, is feeding us, especially not at the, like, not at the frequency at which it's probably posting messages or that is producing blocks, right? So the best way for that, for us to be able to know that we are both seeing the same version of the truth is for us to go and look at, like, a pin board, right? Or like, what are they called? Like, in high school, you had these, like, boards where you could post stuff like, oh, come to my.
00:08:41.308 - 00:08:43.228, Speaker A: Oh, message board. Message board.
00:08:43.364 - 00:09:03.398, Speaker B: Message board. Yeah, message board. Like, come to my math or whatever. It's literally the same thing. It's posted there. You and I know where to look. You and I know that if we look at this pin board that I know what I'm seeing there is the same thing that you're going to be seeing, and that node and everybody else in the entire network.
00:09:03.398 - 00:09:06.390, Speaker B: So that's kind of the, that's it.
00:09:06.510 - 00:09:07.934, Speaker A: So that's data publishing?
00:09:08.022 - 00:09:09.174, Speaker B: That's, that's data publishing.
00:09:09.222 - 00:09:25.906, Speaker A: That's data publishing. Okay, so how does, how does this, like, centralized message board then increase or help with scalability. That's kind of the thing that everyone's hyped about with DA is that it increases scalable scalability and therefore reduces costs. As for the end user.
00:09:25.978 - 00:09:49.722, Speaker B: Right? So we have a system, like, there's many reasons we as like users of this random roll up that I don't know what it's called. We don't have to process any transactions that are happening on some random other roll ups somewhere out there. And God knows what doing. God knows what. We just care about what we are doing. Like, we care about two things. We care about what we're doing that like, everything that our node is feeding us is true.
00:09:49.722 - 00:10:20.360, Speaker B: And we also care that the system that we're looking at, that that message board is like, has integrity. Those are the only two things we care about. We don't care about anything else that's happening on any other role. So we don't have to process any information that's happening anywhere else, care about our information only, and we care about the integrity of, like, the place where we get that information. And so it really reduces the things that you have to verify, like the things you have to do to verify, like, the integrity of, like, your own, like the system that you're interacting with. Does that make sense?
00:10:20.670 - 00:10:39.170, Speaker A: Yes. Yeah. To take a step back, when you say that, when we say that somebody, like a protocol or a product is using data publishing, is it even possible to have a blockchain or a protocol or a product that doesn't implement data publishing or dA?
00:10:39.470 - 00:11:11.932, Speaker B: I mean, you can have things like, you would have, like blockchains. Okay, so DA is different from how blockchains currently operate because DA makes it. It's a different way to verify the actions that you're doing are correct and that the system that you're interacting with has integrity. Right. But like, other blockchains do that by processing every single transaction. So every participant in the node, if they want to have like, the fullest security guarantees of, like, the system that they're interacting with has integrity. They have to process every transaction and arrive at the same conclusion as every other node.
00:11:11.932 - 00:11:22.934, Speaker B: It's very like, resource intensive to do. And so you've reduced like, the amount of work that a participant of the network needs to do in order to be able to trust that system.
00:11:23.022 - 00:11:40.694, Speaker A: Gotcha. So is that something that reduces the jobs? Yeah, gotcha. It like, consolidates things, makes things more efficient. Is that something that needs to be done at the blockchain level, or is that something that, like, app builders integrate da into their apps. Like, which level it's at the blockchain level, right?
00:11:40.862 - 00:12:10.030, Speaker B: It depends. Like, if you want to have something called an app chain, like, where you build your own application, you can absolutely just use Celestia directly, and you can have, like, a single, like, centralized sequencer that uses Celestia. And every participant in your app chain is able to verify that your sequencer is actually posting what it's saying. It's posting and feeding the same information to everybody around. So, like, you can be an app developer and you can make an app chain. It's just maybe a little bit more work than. Well, actually, I don't even know.
00:12:10.030 - 00:12:32.202, Speaker B: I've never built an app before, so I've always been on the protocol level. I've never, like, written a smart contract. Um, but I can imagine that there's. There's probably, like, difficulties in terms of, like, creating a smart contract type protocol. An application that uses smart contract versus an application that uses an app chain. They're just two different sets of problems. I'm not saying that it's easy to onboard, of course.
00:12:32.202 - 00:12:53.856, Speaker B: It like this. It's still, like, fairly early, but you can use celestial directly if you're building an app. For sure. You can also use celestial if you have, like, an existing chain and you want to transition to, like, either you. I don't know. You have an existing chain and you feel like you don't need to have the full validator set that you have. For example, like, in a Cosmo or tournament based chain, we usually have, like, a large validator set.
00:12:53.856 - 00:12:58.592, Speaker B: You don't necessarily need to do that if you use Celestia. So you can transition to using Celestia as a blockchain. Okay.
00:12:58.616 - 00:13:09.580, Speaker A: And when you say app chain, you're talking about, like, app builders that essentially start, like, create their own, like, a new blockchain to build their app on top of. Specifically.
00:13:09.740 - 00:13:17.652, Speaker B: Yeah, exactly. Their app. Like, this app is the only, like, application that is on that chain. Yeah.
00:13:17.836 - 00:13:27.988, Speaker A: Gotcha. Okay. And people would want to do that because it just gives them more control over the features, the customizability of whatever app they're trying to build.
00:13:28.084 - 00:13:43.150, Speaker B: Yeah, there's a lot of, like. Okay, so this is not my area of, like, expertise. There's a lot of. It's. It's very theoretical as well. So, like, there's better people to talk to than me about, like, whether you should be building, like, a base roll up or ZK roll up, either. I don't know.
00:13:43.150 - 00:14:05.460, Speaker B: Like, all these different applications that you could. Or there's many different flavors of, like, how you can build the thing that you want to build, and I'm sure that there's, like, trade offs between all of them. But, yeah, like, you, if you want to have, like, extreme customizability, extreme control, and, like, sovereignty over the way that you build your application, you could absolutely do that and then use Celestia as your da layer.
00:14:05.760 - 00:14:07.656, Speaker A: Yeah, it's very well suited for that.
00:14:07.688 - 00:14:08.136, Speaker B: Yeah.
00:14:08.248 - 00:14:19.712, Speaker A: So Celestia, is that just essentially like, a developer toolkit that, like, is it similar to, like, an SDK that developers can just plug and play into what they're building?
00:14:19.816 - 00:14:49.090, Speaker B: It's not an SDK. We have a team that's building. There's a team in the ecosystem that's building an SDK to make it easy to create these kinds of app chains. On Celestia, it's called a rolekit, but Celestia itself is not an SDK. Celestia is a, like, you can use it as you would any other, I guess, blockchain. It has an API that you interact with, a very minimal API. We're still working on making it better and working on making it a little bit more standardized, a little bit, like, more intuitive to use.
00:14:49.090 - 00:15:04.228, Speaker B: Obviously, there's still, like, we kind of build this thing together with the users that are. That are building on top of us. So it's an iterative process, but you would interact with it via an API that is available on, like, the celestial data availability node, which is a thing that I work on.
00:15:04.284 - 00:15:10.572, Speaker A: Okay, gotcha. And any developer can come in and use that API just like they would use any other API.
00:15:10.756 - 00:15:11.428, Speaker B: Yeah.
00:15:11.564 - 00:15:25.868, Speaker A: So, I mean, it sounds really comedian. It sounds really cool as, say, this as a non dev, of course. So with DA and everything it enables, are there any challenges that we face with DA or, like, any limitations?
00:15:26.004 - 00:16:01.734, Speaker B: Yeah, there's tons. We don't solve every problem, so it's not perfect because, like, at a high level, and this is the thing that I see the most people, I guess, having qualms with or having, like, difficulties with is the fact that, like, if you are an app chain, if you are a sovereign chain and there's many other sovereign chains out there, it becomes difficult to understand what is happening on those other chains. Um, it becomes difficult to interact with those other chains, but there are many solutions for that. So there. There are, like, this is one of the biggest things that is being looked at by people in the system of celestia right now is like, yeah, how do we. How do we get, like, cross chain interaction between these app chains.
00:16:01.822 - 00:16:02.558, Speaker A: Yeah, yeah.
00:16:02.574 - 00:16:04.198, Speaker B: And the answer to that is like IBC. Correct.
00:16:04.294 - 00:16:05.118, Speaker A: What's IBC?
00:16:05.214 - 00:16:12.030, Speaker B: What was it like, inter blockchain? I don't know the actual acronym, but it's like a message passing protocol between chains.
00:16:12.110 - 00:16:24.228, Speaker A: Okay, gotcha, gotcha. So a lot of people, I think, associate celestia with modular blockchains. Can you explain what a modular blockchain is versus the alternatives?
00:16:24.334 - 00:16:50.448, Speaker B: Modularity is like, it's like celestial thing. We talk about it a lot. We talk about like, modular in terms of, like, customizable. In terms of like, you get to choose all the different components of your blockchain such a way that, like, you have ultimate. You're not beholden to anybody else and you're not beholden to like, the decisions of like some other random protocol that's out there. That's, you know, kind of locking you into a certain kind of behavior. That's basically it.
00:16:50.448 - 00:17:15.294, Speaker B: It's not really like super sexy, I guess, when you actually. It's nice because it gives developers a lot of options. And doing that is very good because it allows developers to the freedom to design how they want to. It also lowers barriers, I think, of entry. It can, for example, if you do it right. But, yeah, that's really all that it's about.
00:17:15.382 - 00:17:19.766, Speaker A: Okay, and then how does that relate to Da? Or are they just totally separate things?
00:17:19.878 - 00:17:52.408, Speaker B: Yeah, I would say that they're like, da. And the way that we've implemented Celestia enables this modular, like the ability to like, customize your own chain. So which is what we call modular, the way that we've implemented Celestia, I guess, which is the, like, we've separated execution from. And so we call that modular. And then also the ability to, like, you have your, you have your own, if you build like an app chain or like sovereign chain, for example, want to build it with certain kinds of components, or it has its own consensus mechanism. Like, you could do that. You can have like, I don't know, set of like four validators.
00:17:52.408 - 00:18:01.640, Speaker B: They can do whatever, whatever you want it to. Like. Celestia basically enables that. It's not necessarily like, inherent to the DA as a, I guess, concept.
00:18:01.720 - 00:18:09.720, Speaker A: Can you break that down further? How Celestia implements Da? By breaking down execution, like separating execution from consensus. Can you just explain that more?
00:18:09.800 - 00:18:34.788, Speaker B: Yeah, so we, like, Celestia does not perform any kind of execution over the transactions that happen inside of the roll ups. So whatever the roll ups are posting is taken as like a arbitrary, like, it's just arbitrary bytes. We do not look into what those bytes actually are. We do not have any concept of, like, what a roll up blocks look like. Like, what the format of a roll up block is. We have no concept of the roll ups. Like, state machine.
00:18:34.788 - 00:18:48.712, Speaker B: We don't understand anything that's happening on top of the roll up. What we do is we take that message, and we include it in a block if it's paid for, and then make that block, that's it. So we do not perform execution over the transaction. Set her on a roll up.
00:18:48.776 - 00:18:53.536, Speaker A: So Celestia just handles the consensus layer.
00:18:53.728 - 00:18:59.352, Speaker B: Doesn'T touch the execution layer, ordering of those. Of those messages in the DA layer. Yeah.
00:18:59.416 - 00:19:04.384, Speaker A: Can you talk more about the consensus mechanism, or is it pretty much just, like, that simple?
00:19:04.432 - 00:19:10.008, Speaker B: It's just tendermint. Okay. Like, we use tendermint. We made some modifications to tendermint, but, yeah, it's just tenderbarn by the.
00:19:10.064 - 00:19:10.720, Speaker A: Okay, gotcha.
00:19:10.760 - 00:19:13.610, Speaker B: By the consensus mechanism of celestia. Of the celestial chain.
00:19:13.760 - 00:19:23.326, Speaker A: So, celestia, just to conceptualize this more, when you say the celestia chain, it's not an l two, how would you. How would you categorize that?
00:19:23.398 - 00:20:02.864, Speaker B: So, okay, technically, celestia could be an l two on top of celestia. Celestia itself is just, like, a chain of blocks that contain random bytes. And technically, celestia transactions also post their transactions to celestia, and they're contained in that block. So, technically, celestia is a roll up on top of celestia in terms of, like, the data availability layer. What ends up happening is that celestia is, like, celestia needs to have a chain, right? It needs to. It has its own, like, format for payments. You can transfer money back and forth on Celestia using tF, and you do other things, right? Like, you can stake on Celestia.
00:20:02.864 - 00:20:52.852, Speaker B: So there's activity that happens on the celestial chain, and celestia chain produces blocks, and the celestial chain just also happens to, like, have a transaction type that's, like, the ability to post these arbitrary messages to celestia as well. So the contents of, like, a celestia block, when it comes to the DA layer, is just like arbitrary shares, whether they're from celestia, whether they're from the roll up that we talked about, or some, like, other random roll up astrias, like any other roll up that is built on top of Celestia. All of those transactions or those messages, we could call them, are posted in the same block, and they're part of the same sampling process. That, yeah, that light nodes perform. And so, like, the celestial chain itself is just a way to order. Like, it's a way to process what is happening on the celestia, like, da network. Like, people paying to post their blogs, people, like, transferring.
00:20:52.852 - 00:20:58.220, Speaker B: Yeah, like, I don't know, wallets transferring money from back and forth, and then other activities that are happening in Celestia.
00:20:58.340 - 00:21:10.826, Speaker A: Is it Celestia compatible with, like, all other l one and l two chains? Like, is it compatible with any roll up? Is it compatible with Ethereum, with Solana, with any other chains?
00:21:10.948 - 00:21:37.056, Speaker B: By compatible, if you mean, like, directly pluggable, like, no, because they don't have the interface to be able to do that. But if they built the interface to be able to do that, then, yes, definitely, you can plug into Celestia and post your blocks or blobs or whatever you want to post there. So it's very simple to use. If you want to use Celestia as a da layer, there's, like, a minimal or there will be a minimal interface that you need to comply with, and then you'll be able to post just like any other role.
00:21:37.158 - 00:21:40.572, Speaker A: Okay, so any dev building on just about any chain can.
00:21:40.676 - 00:21:46.500, Speaker B: Can turn their chain into a celestia. Like, that. Can. Can post, can use Celestia for da. Yeah. Okay.
00:21:46.580 - 00:21:46.956, Speaker A: Gotcha.
00:21:46.988 - 00:21:50.292, Speaker B: Gotcha. Like, not out of the box. They'd have to do something long term.
00:21:50.396 - 00:21:54.468, Speaker A: What is, like, what is in Celestia's future?
00:21:54.644 - 00:22:08.212, Speaker B: From what, you know, a lot of things. There's near term future, there's long term future. We get to the long term, we want to increase the number of white nodes that are on the network so that we can increase the block size. We definitely.
00:22:08.316 - 00:22:12.264, Speaker A: Sorry, what is. Is a light node. Sorry to cut you off. What is a light node? Because you've said that a couple of times.
00:22:12.392 - 00:22:53.736, Speaker B: Yeah, light node is like the baby of the celestia, I guess, implementation. It's very cool. My Colleen and I back in assemble, like, during deaf connect, we did a presentation about, like, what is a light node relative to, like, everybody knows what a light client is kind of, to a certain extent. Right? And there's, like, a fairly common understanding about what light clients do. But light kind of turns it on its head because light nodes are just, like, lightweight, like, very lightweight nodes, essentially. So you can access a network with a very high security guarantee. The thing that celestial light node does, even that's different from, like, other, like, client implementations, is that it performs something called data availability sampling, which everybody likes to talk about.
00:22:53.736 - 00:23:05.972, Speaker B: Dos, essentially, dosing is just a way to, like, very lightweight check the integrity of the celestial network without having to download every single celestial transaction, process it and make sure that it include or download the entire celestial block.
00:23:06.056 - 00:23:17.320, Speaker A: So is it, is it like you just sample certain blocks and make sure points from the block and you assume if there's like, integrity there that, like, there's integrity overall?
00:23:17.620 - 00:23:30.548, Speaker B: Yeah. So, yeah, it's a confirmed with like, probability that there is enough light nodes in the network that are sampling randomly from this block that the sufficient amount of the block is sampled such that everybody can confirm that the block is actually there.
00:23:30.604 - 00:23:31.788, Speaker A: Gotcha. Okay.
00:23:31.844 - 00:23:32.674, Speaker B: Yeah. Okay.
00:23:32.772 - 00:23:34.206, Speaker A: Sorry to cut you off earlier, but.
00:23:34.238 - 00:23:34.710, Speaker B: No, it's okay.
00:23:34.750 - 00:23:35.330, Speaker A: Continue.
00:23:36.030 - 00:24:00.710, Speaker B: Yeah, yeah. By the way, this is like, it's. I don't often explain these concepts, not completely celestial like, implementation related. So it's, it's a bit of a challenge for me to, like, explain it from like a higher level. So I appreciate you, like, stopping me and asking me questions along the way because otherwise I'd get like two, maybe two in a week. But yeah, the. So light nodes can do data availability sampling.
00:24:00.710 - 00:24:29.630, Speaker B: They can also post and retrieve blobs from the network. So, like, you and I, as users of this roll up that we were talking about before, we could check the node or like our centralized sequencer to make sure that it's actually posting where it's saying it's posting by going and retrieving the blob from celestia network. And then also simultaneously, we want to make sure that Celestia network is valid as well. So our nodes, like in the background, is also performing data availability sampling on every single block in the celestial network.
00:24:29.790 - 00:24:30.526, Speaker A: Gotcha.
00:24:30.638 - 00:24:43.286, Speaker B: So it's doing, it's doing two things. It's helping you, like, it's helping you retrieve your blog. So it's helping you like, cross check your centralized sequencer. And it's also making sure that the place where you're cross checking the centralized sequencer is also like high integrity.
00:24:43.358 - 00:24:46.518, Speaker A: Gotcha. So it's double security layer, essentially.
00:24:46.614 - 00:24:49.846, Speaker B: Well, it's like giving you those security guarantees. Yeah, yeah.
00:24:49.918 - 00:24:58.222, Speaker A: Is that more security guarantees than you typically get with, like, Ethereum, for example, or like another blockchain without Da.
00:24:58.326 - 00:25:08.678, Speaker B: Well, if you're a full node on another network. No, because you. You'd be downloading every single transaction and processing it. But it is more security guarantees than you would get with like, your average, like, client implementation. Yes.
00:25:08.734 - 00:25:09.174, Speaker A: Gotcha.
00:25:09.222 - 00:25:10.862, Speaker B: This light node that I'm talking about.
00:25:10.926 - 00:25:19.022, Speaker A: The light node. Yeah. Yeah. Cool. Any other like, long term. Was that long term or near term that you started talking about?
00:25:19.086 - 00:25:46.866, Speaker B: No, this was long term. Like, yeah, I don't know how many million light nodes on the network, 1gb blocks. We talk about, like, massive throughput. That's something that we're working towards. Nearest term, there's, like, smaller things that we can do to make our system a little bit more, like, optimized for, like, immediate use, but there's many things that we're working on simultaneously. We're also, like, cleaning up tech debt that's related to us shipping the DA layer as fast as we possibly can. We shipped it in two years.
00:25:46.866 - 00:26:09.492, Speaker B: I think it was two years since. Since we started the initial implementation to actually, like, shipping the thing. It was, yeah, we started building it in August of 2021. Like, we had the initial design in August 2021, and we launched in October 20. What year is it right now? It's 2024. October 2023? Yeah. So it's like a two year turnaround.
00:26:09.492 - 00:26:10.596, Speaker B: It's, like, pretty good.
00:26:10.748 - 00:26:14.980, Speaker A: Oh, wow. Okay, so Celestia has only been live for under a year.
00:26:15.140 - 00:26:47.992, Speaker B: Yeah. To get to the point where we could launch our network very quickly, we had to make a lot of decisions to use existing tech that is out there with, like, and not rebuilding the wheel like every other protocol does. Many of the protocols love to just sit and, like, bike shed about, like, very. Not necessarily not important, but, like, smaller details in the network instead of using, like, existing. Existing libraries that are out there. And we made a lot of decisions to use existing libraries that were out there. Tenement is not a library, but, like, we decided to use tenement for the consensus.
00:26:47.992 - 00:27:32.954, Speaker B: We made a lot of decisions that accrued some tech debt along the way that we need to resolve as we go along, like, chip away at. And so we're working on that as well. We, like with any other implementation of anything, we are trying to optimize the way that store and distribute data across the network just to make it as fast and as fast as possible and also as resource intensive as possible. So that's something that we're working on as well. We're working on trying to make header syncing very fast so that light nodes can be even lighter, can get on the network as. As quickly as possible. Meaning, like, they can come up on the network and that they can very quickly download the chain and verify that the chain that they're looking at is the correct chain and that they're not being fed bullshit.
00:27:32.954 - 00:27:46.378, Speaker B: And, yeah, that makes it easier for wallets to have light nodes connected to them so that they can actually see the state of the chain very quickly and very trustlessly, instead of having to, like, connect to some, like, RPC endpoint that's being provided by God knows who.
00:27:46.434 - 00:27:58.770, Speaker A: Gotcha. That is a lot. It's crazy to me that you guys have only been around for under a year, because, I mean, granted, I have, like, no concept of time, but it feels like Celestia has been around for way longer than a year, which is why I was surprised.
00:27:59.230 - 00:28:22.880, Speaker B: We've been talking about it for a very long time. We've had testnets as well, but now we're, you know, we have a main net and we have real users and adoption, and so it's. It's becoming, like, bigger and bigger, and the ecosystem is growing larger and more colorful. But we've been talking about it for a long time. Like, lazy ledger paper was out in, like, 2018, right? And then it only really started to be built out in 2021.
00:28:23.220 - 00:28:34.840, Speaker A: Yeah. So from a more personal level, you were one of the founding engineers, I believe, at Celestia. What was that experience? Was this your first time being a founding engineer?
00:28:35.260 - 00:28:36.348, Speaker B: Yeah, yeah, it was.
00:28:36.444 - 00:28:43.680, Speaker A: Yeah. How was that experience compared to your previous experiences? You know, just, like, as an engineer joining an existing team?
00:28:44.140 - 00:29:16.950, Speaker B: It was awesome. Like, it was so much fun. It was unbelievably fun to get to build something so interesting and so, like, technically complex with, like, a group of people that are just fantastic humans. Like, I love everyone on my team. I really, like, I say that genuinely, I love everybody on my team. And everybody on the founding team was, like, so much fun to work with very different thinkers. The, like, the tech leadership around, it was, like, everybody was just super knowledgeable, very, like, intellectually honest nobody.
00:29:16.950 - 00:29:48.640, Speaker B: Okay. The best part about this was that nobody on the team really had an ego. Like, we could all very honestly discuss ideas without anything being personal and. Yeah, like, the initial design and, like, the initial would be that up to spec out what celestial would look like as the initial implementation. It took us a long time. It was very exhausting. We were, like, we would get heated into, like, heated debates about whether we do this or that or this or that, but it was still so much fun and very engaging.
00:29:48.640 - 00:30:28.124, Speaker B: And I loved, like, initially, I was working just with one other person, his handle on Twitter, wonder, and his name is Gleb. We were working together on the celestial node implementation, which is the DA node. And it was so much fun to write this thing with him. And, like, I always am kind of nostalgic to, like, the good old days when it was just, like, us writing code and not having to deal with anything else, we could just be, like, in the zone for, like, days at a time, come up, review each other's prs, go back in the zone. Yeah, it was a lot of fun. It, like, I don't know. People talk about it being, like, super stressful, but that, like, it's very stressful for founders.
00:30:28.172 - 00:30:28.308, Speaker A: Right.
00:30:28.324 - 00:30:55.804, Speaker B: But, like, founding engineer is. Is different because you basically have this, like, most of the time, you have a clean slate. Like, Evan didn't really get to have a clean slate because he had to work with Tenderman, but, like, we, like, Lieb and I got to have a clean slate where we got to write our own node from scratch and make so many design decisions around it. And, yeah, it feels. It's very fun. I think it's just a very, very fun experience. Yeah, it makes me very happy even thinking about it.
00:30:55.972 - 00:31:25.880, Speaker A: I can tell. I can imagine, too, that it would be a really positive experience for an engineer to be able to start something from scratch, because then you're not dealing with code that somebody else wrote that's, like, potentially wrong or just messy or just a different style than what you prefer, and now you got to decide how you wanted to write it, what style you want, and now everybody else joining the team just has to deal with that and kind of adapt to your style. So that part has to be nice.
00:31:26.260 - 00:31:58.578, Speaker B: Yeah, it was super nice. We obviously, we use a lot of code from other teams as well, I guess, like, other libraries, so we do rely on other code. It's not all fresh, and we do. We are still beholden to, like, decisions from other teams, but. And we also, like, it's not like the DA network is totally separate from the consensus network. We had to inherit, like, certain types from the consensus network, and we are still locked into certain behaviors, behavioral patterns from the consensus network. So we're not, like, totally isolated, but we do get.
00:31:58.578 - 00:32:05.070, Speaker B: We did get to have a lot of freedom with how we design the code base, and that was really lucky and nice.
00:32:07.010 - 00:32:27.200, Speaker A: Yeah, for sure. That's super awesome. Can you also talk about how protocol engineering is different from, like, app engineering? Like, smart contracts? I think when most people think of devs in the space, they think, like, solidity smart contracts. Like, that's. You know, that. What is this, like, protocol engineering? It sounds so, like, elusive and mysterious.
00:32:27.700 - 00:33:13.492, Speaker B: Yeah. Okay. So I've never been an app dev, so I don't even know how to speak to what it's like to be an AV dev, and I've only heard things, but from what I understand, it's like you, like, I don't know if you're a smart contract engineer, you probably will write way fewer lines of code than you would as, like, a protocol engineer, just by the nature of the language and by the nature of, like, the thing that you're actually doing, because you're implementing some, like, very small or, like, it can be very complicated logic, but it's just, it's not as expansive as, like, having to write every single component from scratch. It's a very, like, scoped problem, I guess. Whereas with protocol engineering, you're essentially building a distributed system. It's very, like, intense. You have to build out several different components of the.
00:33:13.492 - 00:33:39.842, Speaker B: Of this stack. You know, you can start this node, or you can start this piece of software, and it has to run perpetually and interact with other pieces of software that are just independent and also running perpetually and also processing, like, transactions. So it's. It's. There's a lot more involved, I guess there's a lot more surface area involved in protocol engineering. And that doesn't necessarily say that it mean that it's harder or, like, it's just different. Like, you have a different set of problems that you're solving.
00:33:39.842 - 00:33:54.088, Speaker B: Yeah, protocol engineering is. It's a lot of fun. There is still, like, a lot of problem space that can be. Yeah. That can be researched and optimized and, like, there's many engineers out there that are doing it.
00:33:54.184 - 00:34:23.070, Speaker A: Tell me if this is a good analogy, but the way that it kind of sounds to me is like a smart contract or an app dev is essentially like building a building. So you're like, I want to build a house, or you're like, I want to build, like, a mall in the city, or I want to build x, y, and z building. And it's scoped out, like, you're just there to build this building that somebody asked you to build. Whereas a protocol engineering, it's more like you're trying to develop a city. Like, you're almost like a city planner, or like.
00:34:23.650 - 00:34:40.770, Speaker B: Yeah, you could talk about it from that perspective. You can also say, like, the protocol is the mall, and like, the app is the store inside the mall or something like that. You could. You could say it like that. Yeah. Protocol is just like, all the infrastructure that is underneath to allow that app to function, right?
00:34:40.890 - 00:34:57.990, Speaker A: Yeah, because, I mean, with, like, the whole city, it's like, you have to consider not only the buildings, but the roads, the, you know, all the other the subway, like, all the other infrastructure involved as well. And that's, like, what I imagine, like, being a protocol engineering is like, connecting all those dots as well.
00:34:58.370 - 00:35:21.706, Speaker B: Yeah, to a certain extent, yeah. Yeah. I don't like, it's. There's. There's obviously so many, like, nuances to it, and there's, like, a lot of. There's differences in, like, the mode of work, even, like, how you would organize a team that's building protocol versus app dev. I'm not aware of how app dev is organized, but protocol engineering teams are usually fairly large, and then their experience doesn't need to be blockchain specific.
00:35:21.706 - 00:35:33.834, Speaker B: That's another thing, is that it's nice when they do have blockchain specific experience, but you can come from any kind of most engineering backgrounds and be able to get into it fairly easily.
00:35:33.922 - 00:35:52.886, Speaker A: I want to jump over to some questions we had on Twitter, and we had a lot for you. Some are more serious, and some are more just for fun. While I get this pulled up, one question that Tina had for you, actually, who nominated you for the podcast, was, can you describe Berlin EtH culture and how it's different from other cities?
00:35:52.998 - 00:36:04.990, Speaker B: Oh, wow. Okay. Yeah, so this was a long time ago that, like, Berlin east culture was a thing. And I don't know, I feel like I'm gonna get, like, shout on for things that I'm about to say.
00:36:05.030 - 00:36:11.190, Speaker A: But no, no one come after Renee. We like the spicy takes here, the safe space.
00:36:11.610 - 00:36:46.212, Speaker B: It's still, like, fairly alive. There's many engineers, like, ethereum engineers that live here that have been living here, that didn't, like, walk off to Lisbon, like many other people. But, yeah, the eth culture is still very alive here. There's still eth meetups. I would consider the eth culture here to be more skewing towards the cypherpunk heavy ethos of, like, crypto culture. That was, like, pretty og to at least when I joined or I started working in crypto. It's still very much alive here.
00:36:46.212 - 00:37:14.642, Speaker B: There's many people that I, like super highly respect that continue to keep it alive here. Like, frenzy, for example, is one of them. Afri is one of them. Ligi Felix from the Geth team is here. There's, like, many awesome developers. Like, I can just keep, like, naming them off. Just very cool people that are, like, super high integrity, committed to this vision for the most part and keep that spirit alive.
00:37:14.642 - 00:37:55.984, Speaker B: In Berlin, it's no longer the central focus point of crypto anymore. It used to be very heavy Berlin centric when parody was doing their events here and parody had the offices here, I think. I mean, there's still a lot of parody people here, but it kind of dispersed, like, all over the world, which I guess is a good thing, right? Because it's decentralizing. But then there's, like, micro, like, crypto cultures that have been popping up. But I would say, like, the East Berlin and, like, crypto Berlin cultures are, like, more heavy on, like, the cyber funky side of things. I can't really speak as much of the cosmos, like, because there's a lot of cosmos in Berlin as well. And, like, you know, they're integrated, but they're not really, like, super, super integrated.
00:37:55.984 - 00:38:06.112, Speaker B: But, yeah, I would say that they still kind of, it's like a lockbox of, like, I don't know, the feelings and the emotions that we had from back in the day.
00:38:06.296 - 00:38:15.816, Speaker A: Yeah, I love that. That's very cool. And did you move to Berlin to start working in crypto, or did you get into crypto after moving to Berlin?
00:38:16.008 - 00:38:31.830, Speaker B: No, actually, I didn't move to Berlin to work in crypto. I actually started working crypto well, before I moved to Berlin. I ended up moving here just because I liked it. I had a lot of friends here at the time, and so I thought that, like, I lived in New York before. I didn't like New York. And I. Yeah, I just really loved Berlin.
00:38:31.830 - 00:38:36.142, Speaker B: I thought it was a very nice city, which it kind of is more.
00:38:36.166 - 00:38:41.958, Speaker A: Of a. Yeah, I like Berlin a lot. Personally, I've never lived there, but I visited a few times, and I love it every time I visit.
00:38:41.974 - 00:38:43.886, Speaker B: It can be nice in the summer.
00:38:44.078 - 00:38:44.494, Speaker A: Yeah.
00:38:44.542 - 00:38:45.230, Speaker B: And it's summer.
00:38:45.310 - 00:38:51.230, Speaker A: Another Berlin question. This one's from Jimmy chain Xerox gym. What's the best donor in Berlin?
00:38:51.350 - 00:38:59.670, Speaker B: Okay. 100% hesir. No, other, like, competition. Some people say. Imran, I say not. It's this year.
00:39:00.130 - 00:39:01.802, Speaker A: What makes this year better? I don't know.
00:39:01.826 - 00:39:19.026, Speaker B: I think they put, like, they have, like, either they have, like, integrated lamb fat in. In the kebab itself, but that, like, drips over the kebab, like, all day and, like, infuses it. That meat, it's bigger, and they make their own bread, and it's just super fresh. I like the guys that work there too.
00:39:19.098 - 00:39:22.080, Speaker A: Oh, I'm getting hungry. Yeah, I'm getting hungry.
00:39:22.240 - 00:39:23.616, Speaker B: Very good. Okay.
00:39:23.808 - 00:39:31.180, Speaker A: Question from Hudson Jameson. What is the most challenging part of making a pivot to being a professional coder? Were you working as something else before?
00:39:31.680 - 00:39:33.580, Speaker B: Yeah, I wanted to go to law school.
00:39:34.240 - 00:39:40.456, Speaker A: No way. I started my career as a lawyer. Like, I'm a lawyer by trade, so you made the right choice.
00:39:40.648 - 00:40:13.268, Speaker B: I think I did every. So, like, back in the day, I was, like, talking to so many different lawyers, and I, like, they were, they were like, don't do it. Don't go to law school. You're gonna hate it. And I was like, but I'm very glad that I chose not to. So, yes, I did pivot. And I also just, like, I don't know, I kind of was trying to, like, gaslight myself into, like, thinking that I found law interesting and, like, the legal stuff around crypto interesting, which I kind of did at the time, but, like, also I wasn't as interested in it as I was in, like, how the thing actually works.
00:40:13.268 - 00:40:45.922, Speaker B: So I'm glad I did pivot, but the, like, I don't know, there was so, yes, it was challenging, right? Like, it's a totally different profession. You have to learn a lot of new things. And I was kind of, like, thrown into the depth of it just because I started working from, like, a very strange angle. I started working on, like, a distributed systems testing framework. But I'm really glad that I started there because it was, like, it threw everything in my face very quickly, but it was, like, crazy challenging. I had no idea what I was doing. It's like learning another language and trying to speak to people in this, like, language when you're like, I don't know, five years old.
00:40:45.922 - 00:40:47.778, Speaker B: Like, the level of a five year old.
00:40:47.874 - 00:40:51.010, Speaker A: Wait, so did you, so you didn't go to school for computer science?
00:40:51.090 - 00:40:51.642, Speaker B: No.
00:40:51.786 - 00:40:56.990, Speaker A: Or anything? No. And then how did you. So how did you. How did you learn to code?
00:40:58.170 - 00:41:32.958, Speaker B: I took a couple of, like, programming classes while I was in university because I finished my degree early, but I learned to go on the fly. Like, I started writing unit tests for the, for the code that was white block back in the day, and I just started writing unit tests and trying to understand how the code function through that. Yeah, it was. It was brutal. Like, it was a brutal onboarding experience. There was no, like, there. I didn't do the thing where, like, you do the coding bootcamp and then you make the little game and, oh, now, you know, you know, front end and.
00:41:32.958 - 00:41:40.994, Speaker B: No, I went and I wrote unit tests for random functions in the white blockbase.
00:41:41.042 - 00:41:46.426, Speaker A: That's super impressive. How long would you say that, like, what you would consider to be that, like, transition period?
00:41:46.578 - 00:42:22.954, Speaker B: I, like, sucked for a long time. Like, I obviously, like, you can't learn that much stuff in that short of a period. But I think that I, like, within, like, a couple months, I started, like, groking go, and I had, like, okay, by the way, I had the best mentors in the world. I had, like, access to the best, like, some of the most talented engineers in this entire space. Zach Cole, Antoine Torme, Preston van Loon. Who else mentored me? Like, there were so many people that mentored me that, like, a lot of them were, like, former e two devs or, like, still are e two devs back in the day, and they were all just, like, helping me learn. Go.
00:42:22.954 - 00:42:41.894, Speaker B: Nate from white block was helping me. Like, it just. Yeah. Like, they were all kind of rooting for me and explaining random concepts to me and meeting up with me and giving me their time. I owe, like, everything to these guys. Dean, as well, helped me a lot. He, like, helped me probably the most.
00:42:41.894 - 00:42:46.446, Speaker B: I owe everything to these people. Like, it's. They helped me the most. How did you.
00:42:46.478 - 00:42:56.410, Speaker A: How were you able to secure such amazing mentors? Was it just the fact that you were so early in the space and you were, like, one of the few people that actually wanted to learn it? They were like, yes. Like, let me help you.
00:42:56.510 - 00:43:20.786, Speaker B: Yeah, yeah, I guess so. I guess so. I think also, like, I mean, I was young at the time, and I was really, like, passionate. And I think that I'm just a, like. Like, if there's one thing that I can say about myself is that I'm, like, honest and loyal, and I think that goes a long way. And I think these people just, like, took a chance on me, and they. Yeah, I knew them through, like, other friends and connections.
00:43:20.786 - 00:43:27.948, Speaker B: And, like, at the time, Preston lived in New York, and I lived in New York, so meet up sometimes and. Yeah, that.
00:43:28.044 - 00:43:28.756, Speaker A: It was.
00:43:28.908 - 00:43:35.180, Speaker B: It was like, being early, just knowing these people through friends and other connections, that's awesome.
00:43:35.300 - 00:43:49.724, Speaker A: So related to go. Since you were just talking about that, Wondertan had a question for you. How does go header solve liquidity fragmentation of the modular stack? And then. Okay, it's a two part. And then there's another question. How does it. How does it felt.
00:43:49.724 - 00:43:53.274, Speaker A: How did it feel to be arrested by context police for the first day?
00:43:53.322 - 00:43:57.190, Speaker B: I'm gonna. Okay, the first question is like a inside joke.
00:43:57.490 - 00:43:58.090, Speaker A: Okay.
00:43:58.170 - 00:44:02.426, Speaker B: Okay, the second question is also an inside joke. Like, most of these questions are inside.
00:44:02.458 - 00:44:11.018, Speaker A: Jokes, but, yeah, I was gonna say, like, I told you before we started recording this, you're gonna have to explain the question before answering it because I didn't understand half of these questions.
00:44:11.114 - 00:44:34.032, Speaker B: Yeah. So the first question. It's like, that's, it's a joke about how, like, one of the libraries that we built is going to solve the hardest problems, which it's not, but it's. Yeah, small as I joke. The second one is context police. This one is very go specific. Go has this concept of context, and you can pass around these contexts through different, like, function calls.
00:44:34.032 - 00:44:59.626, Speaker B: And so you could do many things with these contexts. Sometimes people, like, abuse the context. And I've been arrested many times by the context police where, like, I forgot to set a deadline out of certain contexts, or I, I never canceled the contacts. So there's a leaked contacts. But we, like, anytime we review a pr and we catch a text specific error, we put the little police emoji and the context police comes and rests you from misusing context.
00:44:59.738 - 00:45:16.512, Speaker A: Never. I'm so glad you explained that because not in a million years would I have guessed that. Like, if you gave me 100 guesses, I would not have gotten to that. So I'm very glad you explained that. I'll do, let's see. We'll try to get through as many questions as we can. Marius van der Weiden.
00:45:16.656 - 00:45:18.488, Speaker B: Yeah, Vanderbieden, hopefully.
00:45:18.624 - 00:45:24.568, Speaker A: Vander Whedon, what lessons did you learn from being part of guests and what lessons would you take back to the geth team?
00:45:24.664 - 00:46:02.270, Speaker B: This was probably the most, like, substantive question, I guess, that I saw, at least from the, from the questions that were posted. Marius and I worked together on the geth team briefly while I was there. And, like, the geth team is like, one of the most goaded, like, engineering teams, period. They're a group of people that are, like, unbelievably high integrity, very, like, intellectually honest, extremely good, loyal people, and just great people, period. Like, every single person on that team. And just, like, sweet and humble and kind. That's what I'll say.
00:46:02.270 - 00:47:02.764, Speaker B: Just to start off, there's many lessons that you can learn from, like, working on the gutsy. And the things that I learned were about, like, what does maintenance of a vote project that is like, an open source project that's used by so many. What does that actually look like? And I learned many lessons from, from the maintenance, like, just watching this team maintain this code base and the certain problems that would come up that were, like, I don't know, years worth of tech debt and the way that they would address them, the way the, like, precision with which they would review certain PRS and, like, how long it would take for certain things to move through. There's a lot of, like, unpleasant qualities about maintenance that would, like, make people kind of, like, want to pull their hair out. It's very, like, you have to have a lot of patience. You have to, you have to have a lot of patience. You have to have a lot of focus because many times, like, you'll review PR and then you'll come back to it and you'll have to, like, regain all the context of what that PR was and review it again and in depth and every, like, every new commit.
00:47:02.764 - 00:48:38.246, Speaker B: And, like, there's many, there's many ways to make it easier to review, like, larger prs because a lot of times, times the prs on Geth were very large. And actually, I think the second part of Marius question was like, what lessons would you take back to the Geth team? Yeah, there's, the problem is that they have so many external contributors, they can't, like, enforce certain rules on those external contributors in terms of, like, the way that they would make a PR. But I think that there could be a, like, if they, and maybe they already do, I don't know, but have some sort of, like, format for how they expect external, like, external contributors that are creating larger prs that are like, maybe more than like a couple files changed. Like, how they would approach creating that pr such that it makes it very easy to review and also very easy to re review, because it's not just, you know, one thing to review, it's another thing to review that PR, ask for changes, and then you have to come back, regain that context, and then, like, continue reviewing. So if they were able to, like, find a nice way to, like, encourage external contributors to be able to conform to that kind of standard, then I think they would make their lives easier. But I don't know, maybe they already do this or maybe they have some other format because I've been kind of disconnected for the last three years from them. But I think that the main lessons that I learned were around, like, the patience that it takes to maintain a code base of that nature and how slow or, like, how slow and deliberate you have to be with the decisions that you make around it, because, like you, it is really, really, really high risk in terms of, like, merging prs that may not be fully reviewed and tested, for example.
00:48:38.246 - 00:48:50.014, Speaker B: And, like, the amount of testing work and the amount of benchmarking work that goes into making sure that every single release is, like, performant, doesn't contain any regressions and, yeah, is suitable for production use.
00:48:50.102 - 00:49:08.370, Speaker A: Yeah, we didn't even get into the testing part that much, but I would guess that the testing part of what you do with protocol engineering is, like, a whole other thing. Yeah, it's, like, a huge thing, too. Okay, there's some more questions. We're not gonna have time to get to them, but you can feel free to answer them. Oh, I just saw one when. Full marathon. Are you a runner?
00:49:08.990 - 00:49:14.490, Speaker B: I do run, yeah. I. I don't know. We'll see you on the full marathon. I don't know.
00:49:14.790 - 00:49:23.558, Speaker A: I'm kind of in the same boat as you. I'm a runner as well. But my rule of thumb is kind of, like. Like, I'll sign up for any race that I don't have to, like, train extra for.
00:49:23.734 - 00:49:24.486, Speaker B: Yeah. Yeah.
00:49:24.558 - 00:49:46.450, Speaker A: You know? Cause I just don't, like, for. So for me right now, I could probably do, like, a half marathon. Like, yeah, just wake up and go and do it and, like, not feel, like, too much pain after. Because I also, like, could I do a marathon? Like, gun in my head today if you were like, go run a marathon, or else, yes, I could do it and finish it. I just, like, would probably be in pain, like, a lot of pain after.
00:49:46.830 - 00:49:53.170, Speaker B: If I did a full marathon, I'd destroy my niece and, like. But by, like, I don't know, probably 35 km, I'd be done.
00:49:53.480 - 00:50:01.664, Speaker A: Yeah. I would just prefer not to do it that way. But that's kind of my. I just don't want to, like, invest more time to training extra for it because it's such a time commitment.
00:50:01.792 - 00:50:13.960, Speaker B: Like, a full marathon is, like, an insane time suck. One of my, like, best friends just ran a marathon last year, and, like, having to watch how much time you get to sink into training for that was, like, insane.
00:50:14.000 - 00:50:26.580, Speaker A: Yeah, yeah. My dad runs marathons, and he's, like, super upset. He's one of those. I mean, all marathon runners are kind of one of those, right? Like, kind of obsessed. A little. Yeah, yeah. A little neurotic.
00:50:26.960 - 00:50:27.672, Speaker B: Yeah.
00:50:27.816 - 00:50:34.376, Speaker A: But he actually ran the Berlin one last year or two years ago. Oh, yeah. And he said that was. Yeah, he had a great time, I think.
00:50:34.488 - 00:50:37.488, Speaker B: Yeah. I did not have a good time running the Berlin half marathon.
00:50:37.544 - 00:50:40.384, Speaker A: Well, maybe have a better time running the marathon. The Berlin marathon.
00:50:40.432 - 00:50:44.980, Speaker B: Yeah, maybe. I honestly. Probably just because of the sheer amount of people that were running.
00:50:45.800 - 00:50:51.036, Speaker A: My dad said there were people just, like. Like, he ate, like, women, like, peeing, squatting on the.
00:50:51.068 - 00:50:54.444, Speaker B: I just wanted to. Is that.
00:50:54.492 - 00:51:03.180, Speaker A: Is that just, like, a. Is because there's not enough toilets and you'll do it? Or is that people like. But he was like, no one had it. Like, any shame about it. Like, people were doing it.
00:51:03.260 - 00:51:04.084, Speaker B: They just kept going.
00:51:04.132 - 00:51:04.444, Speaker A: You just.
00:51:04.492 - 00:51:21.920, Speaker B: Yeah, they would just do it any. Like, I. Okay, I'll be honest. Like, I could not hold my feet. Like, I just couldn't hold it while it was right because it was also, like, super hot. So I ended up overheating, like, on the day of the run, because I never ran in that heat before. I didn't have any salt tablets.
00:51:21.920 - 00:51:34.184, Speaker B: I had nothing with me. I, like, sweat a lot, and I was also drinking a lot. So I diluted the fluid in my body to the point where, like, I just lost all my salt. So I was just, like. It was a mess. It was terrible. So, like, I.
00:51:34.184 - 00:51:35.656, Speaker B: At the time, I did not care.
00:51:35.728 - 00:51:36.416, Speaker A: Yeah, yeah.
00:51:36.448 - 00:51:41.520, Speaker B: And I also think that those, like, those women, I wouldn't carry there. Yeah, I didn't care.
00:51:41.560 - 00:51:53.696, Speaker A: Yeah, yeah, yeah. Totally fair. I totally get that. Okay, I can't forget this. We asked every guest at the very end to give us a. Can you not. This is just, like, you get it, right? Like, can you not do x, y, and z?
00:51:53.808 - 00:51:55.416, Speaker B: Oh, my God, I have so many.
00:51:55.528 - 00:51:56.540, Speaker A: Let's hear them.
00:51:57.080 - 00:52:00.160, Speaker B: Okay. Like, how. How spicy or how bad.
00:52:00.320 - 00:52:04.376, Speaker A: The spicier the better. Like, level. Like, five out of five spice is best.
00:52:04.408 - 00:52:31.434, Speaker B: Okay. I'll always. Okay, so I have an issue with grifters. My two biggest issues, I'd say, are, like, the issues with grifters and then, like, issues with, like, people complaining about how women have it really difficult in this industry that, like, yeah, that's probably my spiciest one. I, like. I'm not saying, like, oh, I had such an easy time. And that means everybody else, you know, must have had such an easy time.
00:52:31.434 - 00:52:55.096, Speaker B: There are many women that experience, like, difficulties with their teens and, like, bad things that happened to them. But I would say, like, on the whole, there are many great teams out there that, like, make an effort to treat women very well. My team, for example, is one of them. Like, I. For a very long time, I was the only woman working at Celestia before. Like, also at guest. Like, the way that I've been treated throughout my entire career has been incredible.
00:52:55.096 - 00:53:35.050, Speaker B: Like, everybody has been unbelievably professional to me and has always given me, actually, the benefit of the doubt, which is something that I think really helps women get ahead in this space. And I think that if we spent, like, less time complaining about how hard it was and more time creating, like, good opportunities for women in the space, I think that maybe the perception would change. And I think that people complaining about how hard it is for women in this space actually reinforces the idea somehow that it's a very hard for women in this space. Makes it unapproachable, but that's not the case. Like, for most places, I would say, like, for the majority.
00:53:35.350 - 00:53:44.926, Speaker A: Do you think you did anything different in your career than what you've observed? Like, maybe other women doing that helped you have such a positive experience?
00:53:45.118 - 00:54:32.456, Speaker B: I would say it helps that I was working with engineers. Like, working with engineers is a totally different experience than working with anyone outside of that, because engineers, for the most part, like, not every engineer, but, like, engineers, for the most part, operate, like, mostly, like, merit based. And so they really don't see you as, like, a woman or, like, different most of the time. Like, there's some that do sometimes, but, like, most of them will just be like, okay, there's this, like, person that's producing this output, and, like, you're just a GitHub profile, and they're just reviewing your prs. And also, when they interact with you, it's, like, totally, like, normal and fine. And they've always been, like, extra nice to me as well, and, like, just extra helpful. So maybe it's just my experience as, like, an engineer.
00:54:32.456 - 00:54:54.438, Speaker B: I can imagine there's, like, terrible experiences on the other side of things where, like, things like, if a workplace gets political, then of course it's going to get political and bad for everyone involved. I mean, I think it could become extra difficult for women in those spaces. So I think maybe, like, on the technical side of things, it's nice and roses, for the most part, I actually.
00:54:54.494 - 00:55:32.990, Speaker A: Have had the same experience. And granted, I haven't worked with nearly as many engineers as you have, but the person that brought me into the space and got me my first crypto job was a co founder, but an engineer, and I primarily reported to him for a while. We're still friends to this day. And then, like, the last company, I was also, like, ended up staying friends with a lot of the engineers somehow. So I do think there's something there. And I don't know, maybe it is just that engineers are more merit based and less, like, have less biases with regards to gender and things like that. But, yeah, I've had a similar experience.
00:55:32.990 - 00:55:46.442, Speaker A: Now that you say that, I'm like, yeah, that's true. Engineers are cool people. Well, that was spicy, but I like it. I think it's, let's just make more jobs for women and then focus more on getting those jobs.
00:55:46.546 - 00:55:46.882, Speaker B: Right.
00:55:46.946 - 00:55:49.186, Speaker A: And that's what's going to drive us forward.
00:55:49.298 - 00:55:50.138, Speaker B: Yeah. Yeah.
00:55:50.234 - 00:55:57.790, Speaker A: Cool. Love it. Tell people where they can find you, Renee, on the interwebs if they want to follow you and keep up with what you're doing. Twitter, what's your handle?
00:55:58.450 - 00:56:00.470, Speaker B: My name? Renee Debo, you know.
00:56:00.850 - 00:56:12.186, Speaker A: Awesome. We'll include that in the show notes as well. Thank you so much for taking the time to join us today for being having rehash be your very first podcast ever. Hopefully it was a good experience and a fun experience and not very stressful.
00:56:12.378 - 00:56:14.738, Speaker B: Yeah, that's good. Thanks for having me.
00:56:14.874 - 00:56:37.910, Speaker A: Yeah. Thanks everybody for tuning in. We'll be back again next week with another episode of Rehash. Thank you for tuning into this episode of Rehash. Rehash is hosted and produced by me, Diana Chen. Rehash is also supported by our community of NFT holders who curate our guest lineup each season. To get involved, head over to our website at Rehash web3 XYZ and collect this episode as an NFT.
00:56:37.910 - 00:57:16.790, Speaker A: Anyone who collects an episode becomes part of the Rehash community and will be able to nominate guests for future seasons. To learn more about how to become a guest on the podcast, go to Rehash web3 XYZ podcast. And to learn more about sponsoring the podcast, go to Rehashweb3 XYZ sponsor finally, be sure to follow us on Twitter, Instagram and TikTok at rehashweb3 or on Warpcast and lens ehashead and join our community on Telegram at t me rehashweb3. If you enjoyed this episode, please rate, review and subscribe on Apple Podcasts, Spotify or wherever you get your podcasts. See you next week.
