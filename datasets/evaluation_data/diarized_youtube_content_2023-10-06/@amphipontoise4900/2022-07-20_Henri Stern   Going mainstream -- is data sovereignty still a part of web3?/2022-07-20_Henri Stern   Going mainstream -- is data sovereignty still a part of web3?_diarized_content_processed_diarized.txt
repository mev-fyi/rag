00:00:07.510 - 00:00:37.118, Speaker A: Hello. I'm very happy to be in this sauna with all of you. I hope you're all doing well today. And it seems like I'm following up on a really good talk with a lot of the same questions. So I'm going to talk today about data sovereignty and Web Three. Where are we? And does data sovereignty still have a place in the sort of common project we're all building toward? So first, my name is Henry Stern. I work at a company called Privy.
00:00:37.118 - 00:01:31.054, Speaker A: We're building systems to help you manage user data safely and privately, and I'll do a little more shilling later in the talk. But for now, my hope is to convince you to maybe think a little more about privacy as you build out applications in this space up and down your stack. So with that, I'm going to break it down into four parts. I'm going to start by talking about what does data sovereignty mean in Web Three? Then I'm going to talk about where are we today? Before shilling for a little bit, and talking about how as DAP developers and application builders in the space, we can build more sovereign products that don't suck with that. Let's talk about data sovereignty and Web Three. So I think Web Three's opportunity is to really reinvent how data gets handled on the web, and this is commonly called data sovereignty. So what is data sovereignty? First, it is user controlled systems.
00:01:31.054 - 00:02:02.000, Speaker A: Ultimately, the way data is handled throughout your apps should always be under user control. Even if you're doing things on behalf of the user, there should always be a backstop where the user can decide, I no longer want this application handling my data. This also means expressive and revocable permissions. So user should be able to say, this is what data I want used by a given DAP. This is how long they get to use it for and how they get to use it. And finally, we need data portability and interoperability. If a user leaves, they need to be able to take their data with them and move it to a different app.
00:02:02.000 - 00:02:48.118, Speaker A: Commonly, yeah, these are all the things we refer to as data sovereignty. Now, why should you care? I think it's a fair question. And at a high level, there's a very nice intellectual answer, which is the Internet was never really built for private user data. And 30 years in, 40 years in, we're trying to claw our way back into systems that actually do a better job of managing our most sensitive information. But with that, you might say, aren't you data sovereignty folks? Just like standards junkies. When is the alphabet soup of DIDs VCs and all the rest of this crap really helped me as I was building out my product, which I think is a very fair question. And so this is sort of the bad case of where we go from here, which is there are 14 competing standards.
00:02:48.118 - 00:03:21.794, Speaker A: But wait, mine is much better. And so here's the 15th standard I'm going to introduce today for some part of the data sovereignty tool set. But I think there's very good reason to care about what the data sovereignty in Web Three. First, not being able to leak user data is much greater than choosing not to leak user data. User control ultimately has to be an assurance in the systems that we use. And this is an example from this morning. If you've ever left a very bad review on Glassdoor from your former employer, well, there's actually no guarantee that this review is anonymous.
00:03:21.794 - 00:03:57.950, Speaker A: And in fact, in this case, Glassdoor has gotten subpoenaed to release all of the writers of the review. So I think Australian Toymaker can sue former employees for disparaging them online. So as users, we should really care. Second, as devs, handling user data at scale is absolutely horrendous. Cambridge Analytica, I think it's worth reminding everyone, was not a hack. It was just a poorly set up system. You had 270,000 people using an app that was released by Cambridge Analytica and that led to 87 million users data being sort of leaked.
00:03:57.950 - 00:04:37.502, Speaker A: And so ultimately, this is just Facebook's fucking up. Like, it's too hard to handle user data at scale without greater standards for how we should be taking on this data. And yeah, I would say that user data without proper guardrails as a developer is like being handed a loaded gun. It's a question of time before it goes off. Finally, without data sovereignty, I think Web Three is at best, financial infrastructure. And I'm going to expand on that a little bit. So the first claim I'll make is I think Web Three going mainstream means not only growing the size of onchain data, but actually bringing off chain data into the onchain world.
00:04:37.502 - 00:05:35.170, Speaker A: So, real world data into the onchain world. And as that happens, the question is, how are we handling this real world data? Are we just dumping it into open systems that are transparent to everybody? Or do we have ways to properly secure it? And my claim is if we can't properly secure real world data, we'd best stick to on chain data. So I'll kind of revise the claim. Without data sovereignty, it's not just that Web Three is best for financial infrastructure, but it's that at its best, web Three is financial infrastructure tooling. So if we don't have data sovereignty, at worst, web Three becomes tooling for global surveillance as you start putting in your voting records, your location, other personal data that comes from you. In the real world on chain, we've just created basically a massively global database that's easily accessible by anyone with all our user information. So I think this is pretty good motivation for trying to figure out how do we do this? Well, at scale as Web Three goes mainstream.
00:05:35.170 - 00:06:21.786, Speaker A: And now I'm going to try something that is maybe a terrible idea. But for a lot of this, I think a lot of the questions in data sovereignty exist both on the user side, which is how do we make user control something that's approachable to users? Because ultimately, my mom already boxed at like, System Preferences on our iPhone. How are we supposed to have her handle super granular permissioning throughout all the apps that she use? And on the flip side, as developers, you kind of just want to focus on your product. You don't want to have to rethink the entire data stack as you're building things. And so I would say that data sovereignty is both a user and a developer problem for us to crack. And so I'm going to try introducing this sort of color coding on the user side and on the dev side. So on the user side, you have to flip those colors.
00:06:21.786 - 00:07:00.462, Speaker A: I realize now on the user side, data sovereignty means ultimate control over who has access to what data means. Your ability to move data from product to product, you can't get held up by your data anymore. You wanted to leave Facebook, too bad they've got 20 years of your friends on you. And it means easier onboarding, generally better user experiences. On the developer side, it means no user data to manage or put at risk. You can really focus on the core interactions of your product means easier regulatory compliance, easier onboarding and interoperable experiences. So to go back to our initial question, I think data sovereignty is a prerequisite to mainstream Web Three.
00:07:00.462 - 00:07:34.278, Speaker A: Being done right, I think it's going to unlock new product possibilities for builders and users on the web. And so with that, let's dive into the happy place that is the state of data sovereignty in Web Three today. So how's sovereignty doing for the user? UX issues abound. And so we've been trading off data sovereignty for convenience throughout Web Three, and I think this is the same as was true in Web Two. I handed over my data to Facebook because they got me an experience I couldn't get anywhere else. It's very rational and the proper thing to do. I want new experiences on the web.
00:07:34.278 - 00:08:06.158, Speaker A: Notifications are hard. And I keep going back to this tweet because it blows my mind. This is Runekeck saying, maker is about to market. Dump $600 million worth of ETH unless someone can phone up this seven siblings guy and tell him to top up his vaults in the next 30 minutes. So we have this person with a vault about to get liquidated and no one knows how to reach them. And so this is the sort of Twitter backstop to communication in Web Three. Let's hope that somebody knows the actual identity of the person behind this address so we can convince them not to tank the market in exchange.
00:08:06.158 - 00:08:44.026, Speaker A: What we do is we just get DApps that ask us for our emails and OpenSea inclusion here is a little cheeky, obviously, because Opensea's emails all got breached a couple weeks ago. Now, this isn't to sort of throw a stone at OpenSea, I think. Again, they're trying to build a really good user experience. How do you do that if you can't reach out to your users? Notifications are super fucking hard. UX issues, again, cause us to trade off sovereignty for convenience, identity management. Wallets are super hard. I would say this is maybe not the good, the bad, the ugly, but this is the okay, which is trying to understand exactly when am I connected to which wallet on my DAP.
00:08:44.026 - 00:09:20.586, Speaker A: This might be the bad reddit post from a few days ago. Somebody saying 88,000 worth of crypto was stolen from my MetaMask. There was a very complicated theory about the hack that happened with some person coming in, accessing his hardware and so on. It's not what happened. The person entered their mnemonic on a MetaMask website that was not a MetaMask website. So this is the bad and then the ugly is this picture from my MetaMask, which was one of the many wallets I've self doxed myself on because I have ENS addresses and sometimes I make transactions between my ENS wallets and my non ENS wallets. And there you go.
00:09:20.586 - 00:09:51.906, Speaker A: I can't use that wallet anymore. So what do we move to instead? We move to things like this. This is Nifty Gateway. Very easy way to buy NFTs. And the kind folks at Gemini decided, well, you know, actually, let's just keep everything within the Gemini experience. It'll make the NFT purchase way easier. And it's true I can buy with the card here, but do I actually own this NFT at the end of the day, or is it just sitting on a vault and on a server that's controlled by a third party? For the developer, unfortunately, things are not much better.
00:09:51.906 - 00:10:16.358, Speaker A: Sorry, this is the depressing part of the talk, by the way. I promise it goes up from here. Lack of standards and best practices means we go back to old systems. There are two types of developers we've talked to at Privy. The first needs plausible deniability. They need to say we don't have user data very often. These are D Five protocols and people generally building fully decentralized infrastructure who aren't running their own stacks.
00:10:16.358 - 00:10:36.082, Speaker A: And so they default to putting more data on chain because they can't actually hold any user data. The second need is somebody who just wants to build better UX. Web Three is a way for me to reach a new audience. I can unlock new experiences, but the constraints I'm working under don't allow me to build a good product. And so I'm just going to silo user data. I'm going to put it in postgres because I've done it before. It's pretty easy.
00:10:36.082 - 00:11:28.142, Speaker A: Superbase is convenient, and so if it ain't broke, why change it? In large part, I think, in Web Three, decentralization has become a proxy for sovereignty. When people think about am I doing right by my users? They actually measure it by the yardstick of how decentralized is my system, which is a very dangerous claim, and I'll get back to that in a second. So here's a second. In Web three, decentralization has become a proxy for sovereignty. This is a very dangerous sort of merging together of concepts, because decentralization isn't the panacea we need when it comes to putting users in control of their data. First, decentralization is extraordinarily harmful to privacy in some cases. Specifically, putting user personally identifiable information on chain is extremely dangerous.
00:11:28.142 - 00:12:13.680, Speaker A: Even if you encrypt this data, ciphers break over time, and this data is bound to become public at some point in time. So we need more symbiosis between onchain and off chain worlds in order to better protect user data. Second, there's the claim of you can always fork an onchain system, your user is in control because ultimately, if they're not happy with my super complicated thing, they can always take the data and go elsewhere. And this is a complete dereliction of duty. Ultimately, if you haven't built really good offboarding systems for your users, taking on chain data is about as good as Google's Takeout system, which is to say you get a huge dump of data that you have nothing you can do with. So ultimately, decentralization is necessary, but not sufficient to data sovereignty. And I'm going to talk more about that.
00:12:13.680 - 00:12:58.990, Speaker A: We are up against the clock. Ultimately, what's a developer to do as we build? It's hard enough to build a good product, it's hard enough to build a successful project that trying to reinvent a data stack is a step too far. And so I would argue that this is a picture of the developer circuit 2022 building in Web three. You've got, on the one side, the monster of increasing regulation pushing you to learn more about your users, and on the other side, you've got greater user demands asking you to cut corners so you can provide them with better experiences. Put another way, you're stuck between putting more user data on chain and siloing it into your databases. And so, to quote this little cartoon person, we have no choice. We must fuck over our users.
00:12:58.990 - 00:13:42.126, Speaker A: So we're up against the clock. And unless we make data handling simple for developers, we'll go back to what we know, which is to say siloed user exploitative data, the time to build is now. And with that, I'm going to try and paint a picture of how we can use the best of both worlds on chain data and off chain data to build better tooling as we go mainstream. And so here, in the midst of this heat, I will give you all a shill pill and talk about what we're working on for just a second. So we're working on privy. Privy builds simple APIs to manage user data off chain. Now, what does that actually mean? It means we give you tooling that allows you to safely leverage user data from sign up to sign out.
00:13:42.126 - 00:14:21.610, Speaker A: You can build richer UX without putting your users at risk. Specifically privy takes care of key management and encryption, takes care of permissions delegation and it takes care of storage for you all from your local client. So you can take on off chain data without actually having it touch your stack. I'll illustrate how it works. You have your user's browser, your user's app the client in which the user enters private information. The private information is encrypted right there and then in the client and the ciphertext moves up to a managed data store where the data is held. But it's end to end encrypted so the data store can never see the actual user data.
00:14:21.610 - 00:15:07.514, Speaker A: All of this is managed under a permissions delegate in which you or the user sets who has access to read or write the data itself. So ultimately this is a backstop under which users can continue to control their off chain data even as it interacts with your onchain system. Now, I'll just point out something for a quick second because this sort of informs, or at least it is informed by a lot of my views on data sovereignty, which is this big hosted infrastructure. Sign here. Now, why do I point it out? Well, it's because we've made the decision to start by hosting a lot of the infra on which these systems are built. And this is so we can iterate faster. We need to be able to get the right interfaces to make this tooling really simple for developers in order for user centric systems to be adopted in Web Three.
00:15:07.514 - 00:16:09.882, Speaker A: Now, before you go and you clutch your pearls and say I'm shocked to see a centralized system in web Three, the rationale for us is really we have to build really good devex before it's too late. And so let's focus on building good developer experiences and ultimately this provides the means to decentralizing systems over time. And this is the first piece for me is I think the way to build sovereign systems is not to put everything on decentralized infrastructure, be it storage, permissions or key management. It is to actually build user choice to have systems that are built in an interoperable way so the user has more agency over the trade offs that they want to make over how these systems are run. So if I really care about my permissions and being able to verify them, I should demand that my permissions be put on chain or at least on chain under zero knowledge proofs in order to get guarantees as to what permissions are being enforced on my data. Likewise, if my threat model is censorship resistance, potentially I want my data running on IPFS. But if my threat model is data leakage, I only need the cloud.
00:16:09.882 - 00:16:46.722, Speaker A: And in these ways. I think as developers we have to think about what parts of the stack need to be decentralized in order to build the appropriate user experiences for the products that we build. This is a big part of what Privy tries to do for you, is help you make those decisions easily. So ultimately what we're trying to do is twofold, building a B, two B system to fix the developer issue and help you leverage off chain data for your users. And we're also building a sort of B to B to C system to help your users regain control of their data on the web. Ultimately, this is about bridging the developer experience and the user experience. It's about bridging on chain data and off chain data safely.
00:16:46.722 - 00:17:19.534, Speaker A: But with that, this was a really good GIF. Before I put this presentation in a PDF, we're going to take a massive zoom out so you can imagine the universe and talk about recipes for a sovereign future. So how do we build this self sovereign future? We obviously can't stop and hold the presses. Let's stop building anything until we all agree on the right standards for sovereign data. That won't work. So we need to build the plane as we fly it. So I'm going to sort of spill the very secret recipe.
00:17:19.534 - 00:17:54.560, Speaker A: First, crypto needs to be built on top of a self sovereign backstop. Ultimately, decentralization is the necessary condition for sovereign user systems. There needs to be a backstop on which if a user needs to leave, they can in a permissionless way. Second, we need strong standards to take on and enforce data permissions on off chain data. And third, we need better UX. Otherwise, what was the point of this entire project if users don't get something out of it that they didn't before? So let's start with the base. In our recipe, we're going to add a leafy sovereign backstop green.
00:17:54.560 - 00:18:52.670, Speaker A: The sort of vision here broke is decentralized means self sovereign woke is decentralization is the necessary but not sufficient condition to self sovereignty in web. Three, the take here is ultimately the blockchain in sort of the same way as applies to roll ups has to be the consensus backstop, the arbiter of last resort for a user who is unhappy with your application. Meaning if I don't want to use this anymore, I can always appeal to a higher standard. One that isn't necessarily a civil action lawsuit, like when I filed against Equifax, in which I may get $11.50 if I run another 15 emails to ask them for the right things, but one that is actually technically enforced. I have an exit path enforced by technical means on the blockchain that gives me one, transparency by default, whereby I can always see how applications are using my data and two, a guaranteed off ramp if I want to get the hell out. Second, we need stronger standards.
00:18:52.670 - 00:19:34.910, Speaker A: So you've all heard of DIDs VCs and all these things. I don't know how many of you have used them, but the reality is we need standards for off chain data, and specifically we need sovereign standards for authentication. How do we know who user is? We need standards for capabilities, delegation. What can I do on this user's behalf? What have they agreed to? And obviously we need to be able to do that without asking them to sign a transaction. Every time we do something new in our app. We need global namespacing. What do you even mean by address? Is this an email address? Is this a home address? Is the home address split into one or two fields? How do we, as apps, build interoperable products on user data? And finally data formatting, which is a continuation of this.
00:19:34.910 - 00:20:34.750, Speaker A: How do we build enriched data exports? Meaning, if I take my data with me, how much context am I losing by moving it out of the initial thing? Now, the kind of cool thing I think, is that ultimately, blockchains enforce standards through usage. This is the really neat thing about tokenization of distributed systems, which is a complex way of saying blockchains, is that in a blockchain, the more usage a blockchain gets, the stronger the standard is for off chain systems. The economic coordination required to promote the adoption of standards is a lot more complicated. You need like, consensus with no money to help push people towards these decisions. And so I think as builders in the space, we should be a lot more willing to adopt new standards to try and build in interoperable ways with other DApps, and ultimately drop these standards if they don't help us. Now, the last piece is obviously the sizzle. We need better UX.
00:20:34.750 - 00:21:11.534, Speaker A: We have to start building the UX of data sovereignty today. There's a lot of things we can learn here from Web Two systems. Ultimately, I think Apple's done a fantastic job with sort of reactive permissioning in these systems. And there's pretty good examples of people doing novel things in Web Three. With regards to better UX. Mirror has done a really good job of doing session management under user control by having you sign transactions up front and then reusing that signature at various points in your experience so they can actually perform actions on your behalf. Argent arguably has the smoothest Wallet recovery system around, and there's a lot more to come.
00:21:11.534 - 00:21:53.594, Speaker A: So with that, I'm going to end my talk by talking about a quick conclusion. First, data sovereignty means more than just putting data on chain. Building out user centric systems on and off chains is essential to Web Three as we go mainstream. Otherwise we're just rebuilding, at best, financial tooling, at worst, the beginning of the end of user privacy or human privacy in the world. Developer decisions are going to be made on a spectrum, and we need better tools to help us sort of broach these decisions as we build so we can go back to focusing on our product. And obviously, this is where privy helps you, and we'd love to talk to you if you're dealing with offchain user data with that. I think there's a bright future ahead for web three in the space.
00:21:53.594 - 00:22:18.480, Speaker A: We're already seeing a lot of examples of products taking really novel approaches to these things. And I think if we look back in 50 years and we've done our jobs, web three's highest contribution to humanity may well be that we've actually built personally controllable data systems on the internet. Data that you control, that you take with you, and that you own through the entire world on systems that exist outside of you. So I hope you'll join the fight. Thank you.
