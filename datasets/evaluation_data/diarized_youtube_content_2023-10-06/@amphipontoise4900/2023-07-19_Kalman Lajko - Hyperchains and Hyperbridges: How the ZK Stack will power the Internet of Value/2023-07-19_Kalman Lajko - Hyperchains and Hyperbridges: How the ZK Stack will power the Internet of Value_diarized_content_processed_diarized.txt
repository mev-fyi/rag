00:00:15.050 - 00:01:02.110, Speaker A: Hey everybody, I'm Kamin Lutchko from ZK Singh and like to talk to you about hyperchains and hyperbridges. So first we'll cover what hyperbridges actually are and then we'll look at this different ecosystem architectures that are possible using hyperchains. So the first one is proof aggregation, the second one is layer freeze. So fractal scaling when you put layers on top of other layers and then we'll cover layer degradation. This is actually a combination of simple proof aggregation and layer freeze and has the benefits of both. And then we'll look at a simple add on which allows instantaneous messaging between different hyperchains, but in a trusted manner. So this last solution will not be trustless, but let's first cover hyperbridges.
00:01:02.110 - 00:01:49.630, Speaker A: So, scaling has always been a problem with blockchains. Bitcoin does around seven TPS, Ethereum does twelve, Visa does 2000. And if we truly want to bring crypto to the whole world, we'll need to do hundreds of thousands, maybe millions of TPS. And the only way to achieve this is horizontal scalability. Horizontal scalability means that you should be able to spin up new chains to serve new traffic and connect with other existing chains in the ecosystem. Similarly to how you can spin up new servers to serve new traffic to your website. Now, both Cosmos and Polkadot have been attempts at horizontal scalability, but ultimately they do not scale as their bridging solutions are not trustless.
00:01:49.630 - 00:02:36.270, Speaker A: And it is very hard to build actually trustless bridges. But using ZK Roll ups this is possible. Using ZK roll ups. Trustless bridges are possible because ZK roll ups verify execution using cryptography. The bridges are governed alongside the chains, so there's no possibility of an external bridge hack. The governance mechanism of the chain takes care of it and ultimately the chains cannot hard fork. If the proof is settled on layer one, then the state of the chain is settled and other chains can now use that state to verify the transactions that they receive from that other chain.
00:02:36.270 - 00:03:10.310, Speaker A: And this is where hyperbridges come in. So, hyperbridges allow value transfer and messaging between different HyperChain in this ecosystem. So how does hyperbridging work? There will be a layer one shared bridge and two hyperchains which do the messaging. The transaction is initiated on the sending chain. If you are sending assets to another chain, then these assets are burned. Then the sending chain spoof settles down to L one. Here a route of all messages is updated.
00:03:10.310 - 00:03:44.050, Speaker A: This route corresponds to all the transactions sent in the ecosystem. So updating this route is not expensive. After this, the destination HyperChain can import this message route via its consensus mechanism. And a relayer will have to relay the transaction from the sending chain to the destination chain. This relayer will also relay a merkel proof connecting the transaction to the message route. And this merkel proof is verified on the destination chain. Once the transaction is verified, it can be executed.
00:03:44.050 - 00:04:38.694, Speaker A: In our case, this means that the asset is minted on the destination chain. And in this way the asset is passed from the ascending chain to the destination chain without going through L One. And finally, the destination chain settles its proof down to L One and settles its imported message route. And this is when this imported message route is verified, so that's hyper bridging. And using hyperbridging it is possible to connect this ecosystem of hyperchains and horizontal scalability is finally achieved. Anybody will be able to spin up their hyperbridge using the ZK stack, join this ecosystem and trustlessly message with other hyperchains in the ecosystem. And messaging will be cheap as it does not go through L.
00:04:38.694 - 00:05:15.614, Speaker A: One, but it is ultimately verified by it. So those are the basics. Now let's get into the bit more complicated part about different ecosystem architectures. So Vitalik wrote a great post about this. What kind of layer freeze makes sense? And from it I quote there's clearly an important role to be played by layers of some kind. There's clearly an important function of proof aggregation that needs to be filled somehow. I suspect more sophisticated and simpler constructions such as those described in this post will start to have a bigger role to play as the layer two scaling ecosystem matures.
00:05:15.614 - 00:05:50.902, Speaker A: So he mentions three things layers. Layers are great because you can settle on a higher layer quickly and cheaply. And this allows fast messaging. Proof aggregation. Proof aggregation allows scale because multiple proofs can be aggregated and settled in a single proof on layer one or a layer two. And also more sophisticated constructions are also possible. But before we look into these constructions, I'll just warn that for all constructions, sovereignty is preserved.
00:05:50.902 - 00:06:42.026, Speaker A: For example, for if you launch your layer three, it will always be possible to quit the layer two that you're settling on and become your own independent layer two. So we think that this is particularly important for the community of all hyperchains, for each community to have its preserve its sovereignty, and of course the provers and everything is open source. So each HyperChain will be able to prove and settle to L One independently. So the first construction is proof aggregation. Proof aggregation is each HyperChain creates its proofs independently and these proofs are aggregated into a single proof and settled on L One together. This is great because this is truly scalable. Any number of HyperChain proofs can be aggregated.
00:06:42.026 - 00:07:14.806, Speaker A: But the downside of this is that it does not allow fast messaging. To save costs. This common proof will be settled on L One maybe every 30 minutes to an hour. This is different in different ecosystems. And messaging is only possible after the proof is settled. So until the proof is settled in that 30 minutes time frame, it will not be possible to import the message route on the destination chain. And this is where layering and layer freeze come in.
00:07:14.806 - 00:08:06.130, Speaker A: Layer freeze do allow fast messaging because you can settle your Layer Freeze proof on the layer two. And this is the same high probability process that we saw before, but it's on a layer two now. And this makes fast messaging possible. This also uses proof aggregation in the background because the layer two's blocks are proved first independently and these are aggregated into a single proof and settled on L One together. Now, the downside of this is there are due two downside. The first is that because all transactions go through the layer two, this is not scalable. The layer two is also a virtual machine that needs to process the proofs.
00:08:06.130 - 00:08:29.022, Speaker A: So in itself it's not scalable. And the second is that the layer two will also have its normal users. It will also need a mempool. It will need long term storage. So it will ultimately need its own consensus mechanism and validator set. And currently in Ethereum, all roll ups are centralized. So validators only exist for Ethereum itself.
00:08:29.022 - 00:09:31.540, Speaker A: But in the long term, when we'll have multiple hyperchains, there'll be considerable validator fragmentation between the different hyperchains, and this will cause security risks. So layer freeze also cause validator fragmentation. So can these two problems be solved scalability and validator fragmentation while still preserving fast messaging? And the answer is yes. Using Layer Aggregation, we simply have to remove the virtual machine from the layer two and create a specialized layer two that is only used for the layer settling of the layer freeze. And for messaging, the message route should still be imported from here and settle. The different hyperchains should still settle here. And this specialized proof will still need its consensus mechanism because the different hyperchains will need to settle here before they settle to L One.
00:09:31.540 - 00:10:06.106, Speaker A: And this will have fast messaging. It is scalable because a specialized proof can settle any number of hyperchains. And because it will not process user transactions and it will not need its own long term storage. It will only need a lightweight consensus mechanism that does not lead to validator fragmentation. So if we compare the free solutions, simple aggregation does not allow fast messaging. It does scale. It does not need a full consensus mechanism and it does not lead to security fragmentation.
00:10:06.106 - 00:10:27.190, Speaker A: L three S do allow fast messaging. They do not scale. The L Two needs a full consensus mechanism and it does lead to security fragmentation. And layer aggregation does allow fast messaging. It does scale. It only needs a lightweight consensus. And so it does not lead to security fragmentation.
00:10:27.190 - 00:11:02.026, Speaker A: So that was the core of my talk. Now we'll talk about a few more add ons. For example, instantaneous messaging. Instantaneous messaging is also possible between roll ups. But for this, the message route has to be imported before it is proven. Now proving times are coming down. So using our new proof system Boojom, which only requires 16GB of GPU Ram, these will be very quick, maybe in a couple of seconds.
00:11:02.026 - 00:12:20.974, Speaker A: But to save cost settlement time is the main consideration for importing the message route. But the message route can be imported before but it needs to be calculated correctly and this will require some sort of economic guarantees such as some sort of staking mechanism by the validators. Ultimately, however, this solution is not secure because if a message route is incorrect then the destination hyperchains will have to revert. So this will not be used by a very large number of roll ups, only by smaller community of roll ups that really trust each other. So in conclusion, we'll have the layer one. This will host the shared bridge where all the hyperchains will settle their proofs and the shared proofs and the layer aggregator will settle the layer diggrator will settle the proofs of the hyperchains and smaller communities of hyperchains can have trust zones between them that can have instantaneous messaging. Thank you very much and I'd love to answer your questions that are not related to Airdrops.
00:12:20.974 - 00:12:43.420, Speaker A: Thank you. Thank you very much.
