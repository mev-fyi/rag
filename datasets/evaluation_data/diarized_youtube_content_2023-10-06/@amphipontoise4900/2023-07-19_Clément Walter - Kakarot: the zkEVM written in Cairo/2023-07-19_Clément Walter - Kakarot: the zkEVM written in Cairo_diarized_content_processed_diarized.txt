00:00:00.410 - 00:01:00.960, Speaker A: Sat. So thanks everyone for being here and attending this small talk about Kakarot. So it's very fortunate that Charles did the presentation right before, first of all because he invented the Cairo language that he has presented and that we use to develop the Zkvm I'm talking about. And also because like one year ago, day, four day, somehow he initiated the project as well. So thanks Shar and I could give you the microphone anyway, but maybe you don't want to be on stage so I'll keep it. So first we used to say Calcarat is a modular Zkvm written in Cairo. So what does that mean? I want to stress out first like three points.
00:01:00.960 - 00:01:51.466, Speaker A: We first say it's modular because thanks to the Cairo language that Shar has written, the Kakarot, the EVM itself, it's quite small and it's versatile. I mean, we can adapt it very easily. If there is a new opcode, it may be for us like less than 1 hour to add it, depending on the complexity, of course, of the opcode. If there are some things that need to be changed, the execution context of the EVM, it's very easy for us to adapt the code base because at the end of the day we are using a language which is like, say, quite high level, as you have seen just before. So that's the modular things that we want to stress out. Of course it's an EVM and we are here at HCC. So our mission is really to make a smooth developer experience and user experience for the Ethereum ecosystem.
00:01:51.466 - 00:02:46.070, Speaker A: I'm a strong believer in the Stackwork technology and the STARnet tech in the other end. The Ethereum Commission exists for like almost ten years now and there are lots of toolings and lots of people used to do different things and I do believe it's worth trying to help them on board on the Stocknet ecosystem first and then maybe to improve the Ethereum ecosystem on its own with the Starware technology. I would say, and this is the last point, we are using Cairo, so wherever there is a Cairo VM, the Kakarot ZK VM can be used. And if you were here before listening to Shar talk, he said that Cairo is a language in itself with a virtual machine. It's not necessarily a smart contract language. There is a Cairo VM, so there is a virtual machine running a new language called Cairo. This language is probable and we have written the EVM with this language.
00:02:46.070 - 00:03:28.586, Speaker A: So this EVM can be, and we will see after a smart contract, this language can be used to write smart contracts in the blockchain, but it's not a necessity. This can live elsewhere. And so I will give some details about what this elsewhere can mean in our context first. And so before diving into details, I have stolen these slides from one of the Bobbin's Fred Bear presentation. He's Polygonmiden. It's the head of Polygonmiden, say to just try to fix the ideas about how to make a probable program, say, and he said there are two types of probable programs. So you have your program that you want to make probable.
00:03:28.586 - 00:04:17.390, Speaker A: So either you define the circuits or the AI to represent this program and then the program is probable, or you have a virtual machine which is probable. And then your program is just the input of the virtual machine. In our context, the program is the EVM. We want to be able to execute Ethereum bytecodes. And so either if you want to do a Zkvm, you can write the EVM spec into circuits or you write the EVM as an input of a Zkvm. And in our context again, this Zkvm is the Kairovm. So Kakarot is, I would say for now at least an added core, just a Cairo program.
00:04:17.390 - 00:05:16.182, Speaker A: And this Cairo program runs wherever there is a Cairo VM once again. And so the question now is where do we have actually a running Cairo VM? And of course the first place, I mean oh, I forgot this. Anyway, so Kakarot is only, as I said, an EVM implementation. And because the VM is probable, this is a ZKE EVM. So we, as Kakarot, I would say, that are not like spending much time figuring out whether we are working with whether our cryptographic primitive are the right one or not. We trust Shar Say, we trust Starquare, we trust all this research and we use their tech, we use their language and we focus on the EVM itself. So we are much more focused on the, I would say the Ethereum Developer experiment, the Ethereum User experiment and not so much on the ZK part of these whole things like ZKE EVM.
00:05:16.182 - 00:06:37.382, Speaker A: And so, as I was about to say, a natural place, a first place where there is actually a Zkvm running Krovm running in production, it's Stacknet. Stacknet, the L2 initiated by Stackware, now coming more and more decentralized runs. Of course the Cairo VM as it's Earth, it has a smart contract mechanism on top of it, so we can deploy the Kakarot Cairo program in this STARnet blockchain. And so we have say by design a Zkavm because we have the EVM running the Kairovm, it's a Zkvm, say, because in the general assumption it's a way to run solidity smart contract on the blockchain. But more precisely, it's like just another smart contract deployed on the Stacknet L2. And StarkNet say does all the burden of maintaining the state of generating the proofs, committing the proof to L One and so on and so forth. In this context it's interesting to notice that, and we are not the first one, I think to develop an EVM as a smart contract on a blockchain.
00:06:37.382 - 00:07:46.080, Speaker A: I think like right now, if you go downstairs, you will see people from Solana, neon team, they are building an EVM on Solana. There was people on Aurora blockchain back in the days building on Nier. So this design is not completely new, but in our context, because we run on the Kairovm, we are ZK EVM, unlike the others, I would say. And like the others, we can benefit from the whole ecosystem of contract already deployed. And because at the end it's only smart contract to smart contract communication, anything that you deploy, I would say in Kakarot when Kakarot is used in the StarkNet blockchain, can be interacted with the native smart contract. Like if I deploy a smart contract on StarkNet, like a regular smart contract using the KR language as presented before, it's possible to communicate with contract written in solidity deployed in StarkNet, say through Kakarot. And this is the first things that we want to do with Kakarot is really to do full interoperability with the StarkNet ecosystem to help people.
00:07:46.080 - 00:08:34.180, Speaker A: Because for some reason you may not want to be able to rewrite everything, you may want to migrate, you may want to jump fast in Stacknet with the tools that you are used to use. So we do our testing, for example, with Forge, we do everything like as a regular solidity developer. And then it appears to be on StarkNet and it appears to be possible to communicate with the STARnet ecosystem. So this is really our first, I would say our first mission, like short term mission to enable this and to make it easier for people to be on StarkNet and to deploy. And this interoperability by design is really something that we want to push forward. If you were at this is the design. I always forget that we have this.
00:08:34.180 - 00:09:35.486, Speaker A: More precisely what it means for Kakarot to be a stacknet smart contract is that when you are a user here and you write an EVM transaction I mean you write it because you use your wallet and you are connected to website. Of course that is deployed on the chain. Then what we do here now is we have a small RPC node that somehow translates wrap, I would say the request into a Stacknet compatible payload. And then we send it to a regular node for Stacknet and this node calls the corresponding Stacknet smart contract. So in this context, and this is the thing that right now we are doing, every contract deployed on Kakarot is actually a real contract on STARnet. So there is no state managed by Kakarot. It's really like an account being either an EOA or a contract account as its own STARnet contract.
00:09:35.486 - 00:10:38.680, Speaker A: And the Kakarot is more like a library that you can use to actually execute a bit differently the information stored in the contract. So, as we have now, we see that from the user, the user calls its own account contract and then transaction is validated. And the Kakarot execution layer, say the Kakarot library get the bytecode, runs the bytecode as it's expected to be done, and then returns the results. And because it's on StarkNet, there is this whole part about committing the proof to Ethereum and then so from the user point of view, it's EVM, it's zero knowledge, so it's dkvm anyway. Yes. So if you were at Ellie's talk this morning, you have also heard that the STARnet, like the Kero VM and StarkNet itself is not only on StarkNet, I would say right now, but is announced, I think the STARnet stack with different players. So the Kerovm can be run in.
00:10:38.680 - 00:11:35.798, Speaker A: So either a StarkNet stack as an app chain and it could be the only sort of entry point you can use the Madara project that's been announced as well. So in this context you may not allow other kind of contract to be deployed on the chain. You can just use the Krovm. You have the Kairo program really bound to the Krovm. You have only one state which is managed as you want, but anyway, in the client in this infrastructure, say you have more control about what you do once you receive a transaction, like you receive an EVM transaction. Of course you will run it at some point with the Kakarot contract, but you can do more, you can do some hooks, you can do things before, you can do things after. You have the Kairovm here and there is nothing that prevents you from running other probable program to sort of power up the EVM.
00:11:35.798 - 00:12:47.874, Speaker A: So as an example, lots of people talking about having like native storage proof that you can add sort of with something that would look like a precompile, but then from the user experiment, it would be like in solidity calling a given address with a given interface. And then the VM would make the job of making things available and probably available. This is a possibility. And another possibility of course with the time will be to become a full type One Zkvm. So as Vitalik said, the goal of type one is to be able to verify Ethereum blocks as they are today. So if I'm not mistaken, there is the execution part, which we are now tackling and there is also the storage part of the Ethereum, like the merkel Patricia try and verge because everyone says that after the Verge it will be much easier because normally the hash function would be ZK friendly. Well, right now it's still theoretically possible to use Cairo to prove, I would say the Ethereum storage, but it would be far too expensive to be realistically done.
00:12:47.874 - 00:13:27.258, Speaker A: So it's not a matter of Cairo, it's a matter of the cost, the final cost of the operation. So this is somehow the roadmap for Kakarot, like short term, short term, midterm and long term. And yes, because it's some of the end of the presentation, as I said. So Shahar started July 2022 one year ago here somehow. And then it went quite fast because we had like the 100% of credit equivalents in December. And then during the first semester, say, we joined forces with the Madara team to go faster with the stacknet stack, as I've said, for the midterm project for Kakarot. And so right now we are somewhere here, so we are finalizing the RPC implementation.
00:13:27.258 - 00:14:23.900, Speaker A: We need to rewrite with the new version of Cairo which will improve as well the EVM, some optimization and so we expect to have a testnet, say not to be too optimistic by the end of the year. Something like that. And hopefully main net beginning of 2024. And yes, if you have question and if you have time, please do answer them. No question. I should not have saved 1 minute maybe so that it would have been less. It it's.
