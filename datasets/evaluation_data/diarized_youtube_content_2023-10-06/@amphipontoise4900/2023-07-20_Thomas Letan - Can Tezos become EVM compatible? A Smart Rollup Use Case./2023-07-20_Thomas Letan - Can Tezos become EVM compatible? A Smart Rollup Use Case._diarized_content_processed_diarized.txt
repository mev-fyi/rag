00:00:16.650 - 00:00:42.598, Speaker A: Okay, it's working. So, good afternoon everyone. My name is Tom aLUTON. I'm working at a company called no Mandiclabs on the Blockchain. Tezos. And today I'm here to present you what we've been working very hard recently, that is to bring EVM compatibility to the Tezos ecosystem. And I will start with giving you a bit of context on Tezos.
00:00:42.598 - 00:01:55.490, Speaker A: So, out of curiosity, who here knows about Tezos the blockchain? There is a lot of people. But very quickly, Tezos is a layer one blockchain that is now five years old. We had Vesper's day very recently and what potentially set us apart, at least at the beginning was the on chain governance system that we had from day one. And by governance system, basically what we mean is notably a way to propose and to see upgrades adopted by the community and automatically deploy on a network. And this governance system allowed us to push something like I think it's 14 now, upgrades since the beginning of Mainnet and we've had some interesting achievement. For instance, we have our own smart contract VMs that has been completely rewritten I think two years ago. More recently, we outswapped the consensus algorithm of Tezos to go to something called Tenderbeck, which is a variant tendermint and which give us a two block finality.
00:01:55.490 - 00:03:11.814, Speaker A: And more recently, even on March of this year, we enabled on mainnet the Optimistic Rollup solution, the optimistic rollup platform that we call Smart Rollups and that we are very exciting about. And this is the main reason why we are coming to HCC is because we think we are excited by what Smart Rollups can open as opportunities for Tezos and we are very excited to share that with you and potentially to have you on board. So for mostly two reasons, the first one is that potentially initially the main reason that we invest in Optimistic Roll up was to bring horizontal scaling to Tezos and we've been able to demonstrate on open test network 1 million TPS. So transaction per second very recently and more often than once actually while we were finalizing the setup. And that's already an achievement that we are proud of. But smart roll ups as they have come to be when they were deployed are actually very good. Open us a lot of doors and brand new use cases that we are happy to be able to explore.
00:03:11.814 - 00:04:31.010, Speaker A: And for instance EVM compatibility that we didn't have before. Because of the initial choice to have our own smart contract virtual machine, we can now explore on the L2s that we can build thanks to the smart rollups. And so basically the first half of my presentation will be to give you all the keys to understand the smart Rollups so that we can then discuss about how we can use this platform to bring EVM compatibility to Tezos. So let's start from the beginning and the selling pitch from Smart Rollups as we come to set it is to think the smart rollups as a new way to implement decentralized application with a trade off that is a bit different compared to what smart contract follows. And basically the key idea is that you get a lot of more computational power compared to smart contract but by inheriting some of the constraint of the optimistic roll up, the first one being that you have to set up a bit of infrastructure. So on the smart contract, once they are deployed, you can let the execution of the smart contract delegate the execution of the smart contract to the layer one or else that you are targeting. And with smart roll up you get more computational power because you actually have your computation happen off chain.
00:04:31.010 - 00:05:48.922, Speaker A: But that means that you need to have a bit of infrastructure. But with this trade off and in particular with smart rollups, what you get is a solution that is first from the perspective of the layer one, which is permissionless and it's again from the perspective of the layer one, which means that anyone can actually compute the state of a roll up that has been created. Anyone can create a roll up, a smart roll up on Tezos, anyone can compute the state of any smart rollups and anyone can actually defund the state and in particular thanks to interactive fraud proof that are completely permissionless. The second thing that we like to put forward for the smart rollups of Tezos is that they are enshrined. And by enshrined we mean that they have been implemented not as smart contracts on the layer one, but at the protocol level of the layer one. What they give us is a lot of freedom and a lot of opportunity to optimize, notably the operational cost of the smart roll ups and to deal with the interoperability of the rest of the components of the layer one directly at this level. So the same way smart contracts are first class citizen of the layer one who are smart roll ups are first class citizen too.
00:05:48.922 - 00:06:29.350, Speaker A: And what we gain also by doing that is to be able to make them evolve. Blockchain. We like to summarize it as a blockchain designed to evolve. And we have the same kind of ambition for the smart rollup solution. And we actually did that already because since March, where they were first enabled with the Mumbai upgrades, there have been another upgrade that has been called Nairobi. And in Nairobi, some features have been added to the smart rollup execution environment. So it's something that we know how to do and we are planning to continue to do, is to bring improvements to the smart roll ups as the technology progress.
00:06:29.350 - 00:07:30.138, Speaker A: And finally, and this is a bit the jewel of the first point in the sense that if smart roll ups are permissionless from the perspective of the layer one, they are totally programmable from the perspective of the L2, which means that you program your own. So it's a WebAssembly program for now and you provide your own program the same way you provide a program for a smart contract. And this program will decide what is happening on the smart contract on the L2. And because of that, you have a lot of freedom to implement whatever. Maybe not, but at least a wide range of use cases from a generalized L2, like Arbitrum, for instance, or on the other end of the spectrum, you can implement something that is very App chain specific, very application specific in some kind of App chain where you control everything that is happening. But you do that in an environment that enables trust and verification of what you are actually doing. The nice thing about being enshrined is that you force a bit the end of the rest of the ecosystem to follow.
00:07:30.138 - 00:08:28.080, Speaker A: And in particular in our indexer we already have support for the smart roller. So for instance, Tzkt is one of the indexers that is very popular on Tezos and has pages and sum up of what is happening on each roll up that is being originated on Tezos. So you can see for instance that you have some publication of new states of the roll up but you can see also that so KT one is for the prefix of the address of the smart contracts and you can see that some smart contracts are actually interacting with the smart roll up. And this is a bit to remind you that the interoperability of the object inside the smart rollups inside the layer one of Tezos is already taken care of for you. You don't have to do anything to leverage that. Another page that can be interesting is like the page about the interactive proof. So we call them reputation game, different name but basically the same thing.
00:08:28.080 - 00:09:26.478, Speaker A: So this page is interesting because when I did the screenshot I didn't realize that it's also a good opportunity to show that these games are actually very permissionless. In particular. In this one, the two players stopped playing at some point and someone else from nowhere actually concluded the game in the sense that really when we can, when there is no real value in having specifying who has the right to do an operation, we allow anyone to do the operation as long as they pay gas. Okay, so this was the high level perspective and a bit of the selling point. So for the developer here, what is concretely a smart rollup. So the answer can be a bit summarized with Ves. All you have to do is provide a WASM program and Veswasm program will interact and basically will interact with various components.
00:09:26.478 - 00:10:14.670, Speaker A: So the first one, potentially the main important one is what we call the shared inbox. So basically the shared inbox is the component where all the messages coming from the layer one are gathered together for the smart roll up. To fetch them and interpret them. And again, what is happening based on the operation is totally under your control. And we don't force anything in particular. We say that it's a shared inbox, actually, because there is one inbox that is shared among all these smart rollups which in theory could allow to have some kind of communication mechanism where you can have one operation that is broadcasted to several roll ups and interpreted in a different way by several roll ups. There is another way to fetch data that is called the Rebuild channel.
00:10:14.670 - 00:11:14.014, Speaker A: So in a nutshell, why do we need that? And the first thing is that everything that goes in the sharding box has to be injected in the layer one. And so in a setup where smart roll ups explode and you have a lot of smart roll ups that are being used in practice, the horizontal scaling that we promise is being a bit contested by the fact that we still need to compete on the layer one to have the operation injected, which can be problematic in a setup. For instance, where we are promising 1 million TPS, right? So to tackle this, what we did is this additional boxes that is extensible, but right now allows you to fetch from the outside world the pre image of ash. And typically this means that you can import as many ash as you want during your execution time. And so you are no longer limited to the size of the layer one. What you need to know is just a hash. And this hash is typically coming from the shard inbox because your smart roll up cannot guess it out of synaro.
00:11:14.014 - 00:12:07.480, Speaker A: But once the hash has been injected in the shard inbox, you can fetch as many data as you want with it. So then you have your smart roll up that is able to actually know what are the operations that it has to proceed and it will do some execution and it will be able to use a durable storage to retain data. So the durable storage, it's not more complicated than the context of the storage of a smart contract, only that you don't pay for storage. You have as many space as you want because you are not executing on the layer one. And you don't force all the validators of the layer one to retain your data, you do it yourself by providing your infrastructure. So there is no particular limit in term of what you can store in your durable storage. There are limits on how you can store it, but not how much you can store.
00:12:07.480 - 00:13:48.098, Speaker A: And finally to tie the knot or close the loop, sorry about that. We have a mechanism of an outbox and the outbox is the way that you will inject operation on the L2. So the same way smart contracts can do transaction to the L2, you can have your smart roll up doing transaction to smart contracts which with the usual limitation of optimistic roll up where you have to wait for a certain period of time to allow some interactive proof, interactive proof to be injected if needs be. But once the vest period is over you can have your communication to the layer One. And what is important to consider is that contrary to a smart contract where you have to pay for l one gas to be executed and you have to send operation here with smart rollups you get execution time as soon as you have a tesos block that is executed and you have new execution time for every tesos block that is being created on the layer one. And again the reason is because the rationale is because you are actually providing your infrastructure to execute that and so you get this execution time as much as you want. This can be very interesting, for instance if you have long computation to do which involve a lot of data that you can send at once and spend several blocks to handle, for instance okay, so Smart Roll up and the program of the Smart Roll Up is really the beginning of the journey.
00:13:48.098 - 00:14:33.342, Speaker A: Once you have that you still need to execute it. As I said, you are not executed by the layer one automatically. You need to set up some kind of infrastructure. And the goal here and potentially the promise that we are doing at the desoscard dev level is to implement for you once all the difficult parts and the annoying parts of the optimistic rollsing so that you can focus on business logic. And the way we do that is by first abstracting away all the queries of our execution environment that are related to the fact that we want to be able to reaffit computation. But the choices and the compromise that we had to make to make that happen shouldn't be none of your concern. What we want to provide to you is a high level API Rust framework.
00:14:33.342 - 00:15:37.762, Speaker A: So Rust here is not forced on you. If you want to use another language that compiled to WebAssembly, you probably can, there are some things to take care of but it's probably possible. But we think that Rust is a good choice for critical codes that can manage a lot of money typically and so this is why we have invested in this language. But so we provide you a typesafe and high level and adiomatic and blazing fast officially because we are doing Rust right framework but we are not stopping there. We are providing you the tools to debug your smart Rollups and in particular a debugger which when it was not there, it was very complicated to actually know that we were programming something that was correct and this helps tremendously. So you can use it to test, to inspect, to benchmark your smart roll up to be sure that it will fit in the 15 seconds that you have and things like that. And after that we provide you a general purpose node.
00:15:37.762 - 00:16:37.398, Speaker A: And basically the idea of this node is that you have so unfortunately I forgot to put a QR code, but you have some tutorials on the internet that explain you the five steps to set up a roll up node for an arbitrary roll up. And that actually are pretty convincing. I think that the people that actually tried were pretty convinced from this perspective. And the general purpose roll up node, it will deal with all the queries and the reputation game or the interactive proof and the thing publish the states and things like that. So again, the idea really is that you focus on your business application, like your logic. And finally, I've already said that, but we have a track record in providing new features to existing code and we want to continue to do that. And the Smart Roll Ups in particular, I don't know if I said that out loud, but the Smart Roll Ups code can be upgraded so you can push upgrades of your WASM program with a safe mechanism if you push an incorrect code.
00:16:37.398 - 00:17:28.554, Speaker A: So you don't break your smart roll up. But yeah, you can provide new upgrades and enjoy the new features that we provide on existing roll up. And this is really the promises that we will try to keep and we will keep actually in the future. And this is basically what you need to know about Smart Roll Ups. There is a lot of other details that could be very interesting, but I only have 25 minutes. So now we can focus on the EVM part and the main reason why we are here, that is to bring EVM compatibility to the tezos ecosystem and to discuss a bit how we can do that with the very general purpose platforms that I've presented. And so when we started to do that a few months ago, the first thing that we quickly realized, actually, is that building an AVM compatible roll up doesn't mean a lot of things.
00:17:28.554 - 00:19:06.442, Speaker A: Or actually it means too much. In the sense that you have a lot of possibility, a lot of choice that you can make in order to curate your roll up to your needs. So typically, what is your requirement in term of low latency? Do you need to have low latency with the blocks of 1 second or is it okay to have the same latency as the tezos layer one, which is right now 15 seconds? This will decide notably the level of decentralization of your roll up. Because as of now, the main approach that we see in the wide or in the industry for sequencer is a centralized one and maybe you want actually a fully decentralized layer too. So this is one question that is possible, the other one is do you need to use data availability solution? Do you need to use an arbitrary to treat an arbitrary large number of operation per block or do you know that with your business and where you use UCS you don't have this requirement do you need to pay for gas? If you have a roll up that is fully open, you will probably need your user to pay for gas. If you are in a setup where you just want to deploy solidity contracts on something that can interact with the layer one of tezos, maybe you can close it and you don't have to pay for gas because you already are paying for your infrastructure. So these are a few questions that you can ask yourself and at the end you will get this kind of skill map where you have to choose on various cursor where you want to stand and this will guide the choice that you have to make and the technical choice that you will have to implement actually.
00:19:06.442 - 00:22:03.330, Speaker A: And we didn't want as tesoscore developers we didn't want to close too many doors too soon and we'd rather have a solution that is as generic as possible to address as many use cases as possible which is a challenge. So what we did is a layered concern if you allow me to use the word where we first provide something that is customizable like a template that you need actually to customize to your need but you can also which is the double edged sword that we manipulate a lot on the tezoscar development and we want to be the first users or one of the first users would be even better of this template to propose one roll up in particular in the tezos ecosystem and this instance of the EVM rollup that we are working on we call it the community EVM rollup in the sense that we are building it as a common good for the tezos ecosystem with some choices that we are making and in particular in term of decentralization and cost efficiency this is the two things that we want to put the cursor very high to be sure that we have a decentralized layer to solution on tezos and that it does not have costs that are skyrocketing for the users that will trust the solution and actually use it but the key idea, and I want to insist on that is that this is a choice that we are making but it's not final in the sense that the template will be there for you to use, for you to customize and it should be trivially, probably too strong engagement but at least it should be possible for you with the documentation and everything to customize it for your need if for instance the VM roll up that we will propose does not suit your needs if for instance you need 1 second blocks, things like that so a bit of going under the hood to know how we try to what kind of architecture we want to use to that end in that template and the idea is that we will reborrow the idea of a block proposer and block validator by dividing the WASM program into two stages. The first one that is interpreting data that are coming from the outside world and from the layer one to reconstruct block proposal. And the second ones that are actually validating this block proposal and publishing the L two history. And so the key idea is that if you want to support a sequencer, for instance, you can just personalize this part and hopefully this one will be maybe untouched or slightly untouched. And if you want to change how we compute gas fees and things like that, the idea is that you will have to modify this one. But of course, again with optimistic rollup this is only like the code that you want to write.
00:22:03.330 - 00:22:53.086, Speaker A: The semantics of your optimistic roll up is really the beginning of the journey. Then you have to have a way for your user to interact with it. And in this case for Tezos it's a bit particular because you folks from the Ethereum ecosystem, you are used to talk to each other, you are using the API, sorry. And thanks to that your tool are working pretty quickly with each other. But we don't have that on Tezos. And so we are developing a node that do the compatibility layer and this node has proven to be compatible with things like MetaMask, the wallet blocks, code, the indexer remix and some DApps. So we have some very productive talks this very day with Ariani about them testing the EVM rollup.
00:22:53.086 - 00:24:00.394, Speaker A: And I think it works if I understood correctly. So maybe your DAP is the next one. If it's the case, I encourage you to take a picture so that you can visit a blog post where we explain how you can interact with the test instance of VM rollup that is already deployed today and available for you to use. And the key idea is that this instance is deployed, I think it was deployed yesterday, but we will use the upgrade mechanism to keep it up to date. I don't know the frequency of that, but the idea is that it will be brought up to date frequently so that you can check that it worked and it worked in the future. And I have also an announcement and I missed a bit the tempo, but it's okay. I mentioned that we are building an EVM community roll up and this EVM community roll up will be called Etherlink and there is already a website that you can join with a mailing list that you can register to learn about the development and potentially the business opportunities that this EVM roll up will bring.
00:24:00.394 - 00:24:43.766, Speaker A: And for the record, you are the first one to know the name. So congratulations to you all. Okay, yeah, it will come again if you didn't have time to catch it. So just before I conclude, because I'm already running a bit late but Tezos optimistic roll up. It's far from being over and we have other with know that there are other avenues to still improve it. So we will continue to work on this technology in the future. But I think the main thing that you should remember from Vestalk is really what we are achieving today and in particular that the EVM compatibility is coming on Tezos and it's coming this year.
00:24:43.766 - 00:25:01.450, Speaker A: So if you want to be on board and actually test your decentralized application on it feel free to reach out to us. There are links and information behind these two QR codes. Thank you very much and see you on Tezos.
