00:00:10.810 - 00:00:52.478, Speaker A: All right, GMGM, how is everyone doing? I know last night have been plenty of events and parties, so thank you for joining me so early in the morning. Today's presentation will on the role of developer relations in shaping developer tooling. Before we start, I have two questions for you. The first one is, who wants more developers for your project? Please raise your hand. All right. Now, who wants more applications built on top of your project? Raise your hands again. Okay, so you all agree with me.
00:00:52.478 - 00:01:44.110, Speaker A: The reason why I'm asking these questions is because they are related to the Flywheel Effect. Let me explain it to you. I'm sure those of you that studied telecommunications are familiar with Melkov's Law. What Melkoff's Law says is that within a network, the more connected users you have, the more valuable that network becomes. This is not only applicable for telecommunications networks where it originated, but also this is very applicable for blockchains. So if you think about the blockchain, you have the blockchain, the platform, and then on top of that platform, you have different applications built. Now, the more applications you have built on top of your blockchain, the more valuable your blockchain becomes.
00:01:44.110 - 00:02:11.298, Speaker A: Now, a few words about myself. My name is Bianca Buzza. I'm Head of Developer Relations at Luxo. Luxo is an l one for creative economies. I'm also the founder of Devrel Uni. At Devrel Uni, we teach people how to start in developer relations. Now, I think I know what you're thinking, what you're asking yourselves.
00:02:11.298 - 00:02:37.114, Speaker A: Yes, that is a birthday hat. Indeed. Today is my birthday. So I'm super happy to be here today. And thank you. So I'm super happy to be here today with you and talk about developer relations, a topic I'm really passionate about. Now back to that flywheel effect I was talking earlier.
00:02:37.114 - 00:03:20.290, Speaker A: I think it would help here to come with this comparison between web two and web3. So in web two, we have different marketplaces. Google Play is such of a marketplace. And the success of Google Play depends basically on all the applications and developers that are building on top of Google Play. So if you think about it, the third party developers are expanding the product offering of Google Play. They fuel their success. Now, in a similar fashion, we have different blockchain platforms, and those also depend on third party developers to come and build applications.
00:03:20.290 - 00:04:16.842, Speaker A: And those third party developers expand the product offering, the reach and the volume. Now, I think by now we agree that we need developers. We also need that those developers build applications. But you're going to ask me, okay, how do we get these developers? What do we need to do? How do we nourish this developer community? And my answers to that is through developer relations. I'm sure if I'm starting to ask now around the room, what's your definition for developer relations? Each of us will come up with a slightly different version. However, how I like to explain developer relations is by looking at the intersection of marketing, product and engineering. So let me explain to you from a marketing point of view, you need awareness.
00:04:16.842 - 00:05:00.410, Speaker A: People need to know about your product. Now, from a product point of view, you need to be talking about the existing developers and take their feedback. And once you take their feedback, you need to integrate that feedback back into your roadmap. Now, the third one, the engineering part, it's important that you understand the technicalities of your product. And not only that, after you understand that, you need to be able to communicate that into a simple language for the wider audience. Now, Devrel is a channel. Why I'm saying it's a channel because I see it as a two way communication.
00:05:00.410 - 00:05:45.782, Speaker A: Those of you working in developer relations know that if you are to be successful in developer relations, it's all about ensuring that developers in your community are successful. So, going back to the channel, on one way, we have external outreach. You need to spread the news. You need that people are aware about your product. On the other way, when you're closing the loop, you need internal advocacy. So when you are spreading the news and talking to different developers out there, it's important that you learn about their pain points. You learn about what they would like to see in the future in your product roadmap.
00:05:45.782 - 00:06:17.170, Speaker A: And it's important that you represent them. You be their voice. Now, back to the title. About this presentation. We'll be talking about developer tooling in the context of developer relations. So what are some developer tooling that you can find out there? You can find SDKs, you can find APIs, debuggers, libraries, Ides, you name it. My point with these and how they are similar is through their adoption factors.
00:06:17.170 - 00:07:12.120, Speaker A: So whenever you are building a tool for your developer community, you need to consider and to put yourself in the shoes of the developer. So, from a compatibility point of view, think about how the tool you're building is compatible with the tech stack that developers are using. To give you an example here. So if you're on Team Viper and similar to Vitalik, you prefer Viper and not Solidity, probably you're going to end up using brownie. If you prefer solidity, probably you're going to end up using hard hat. Similarly, you need to think about education. You need to make sure that there are enough education resources available for your developer community.
00:07:12.120 - 00:07:49.250, Speaker A: Also, it's important that you ensure that there is a way for people to ask questions and to get answers to those questions. Next, there is adoption. It's one funny way with developers. They like using tools that other developers are using. Now, I know this might sound a bit like a chicken and egg problem, especially if you're building out a new tool, but there are ways around it. Next, there is developer experience. You need to ensure a smooth developer experience.
00:07:49.250 - 00:08:34.260, Speaker A: And this is especially relevant when it comes to onboarding. When you're taking developers from zero to one with your tool, this onboarding experience needs to be as smooth as possible. Because if you're losing them here, then you're losing them forever. And last but not least, you need to think about advantages. So again, put yourself in the shoes of the developer. Does your tool make their life easier? Does it save them time? What are the advantages that your tool is offering to these people? Now, a few words about the importance of developer tooling. This is a survey from JetBrains from 2022.
00:08:34.260 - 00:09:09.478, Speaker A: As you can see, developer likes working with tools. They like collaborating with tools and using those. The most widely spread tools are around collaboration. And also here maybe a very important note. When you're designing your tools, always focus on the business problem. So don't try to solve a tech problem, but a business problem. Now, I want to talk a bit about the pillars of devrel.
00:09:09.478 - 00:09:34.610, Speaker A: The first one is awareness. So people need to discover your product. Awareness is also called developer evangelism or developer marketing. You might see that I put in code developer marketing. That's because developers don't like to be marketed to. Instead, what you should be doing, you need to inspire the developers. You need to basically present them.
00:09:34.610 - 00:10:08.910, Speaker A: What's the art of possible when it comes to your tool and your product? And this awareness happens through a set of outreach activities. So you're informing people about your product, your use cases and your roadmap. To give you an example, what we're doing right now, we're giving a talk at a presentation at HCC. This is a form of awareness. Next, there is education. People need to learn how to use your product. And this is essential for adoption.
00:10:08.910 - 00:10:38.410, Speaker A: That's because developers like to try before they commit. So you need to ensure for them a comprehensive set of learning resources. Start with documentation. This has to be top knock. And then add other things such as guides. You can even have a course around your tech. Or if you want to go the extra mile in the later phases, you can even build an accelerator.
00:10:38.410 - 00:11:26.950, Speaker A: Now, the third pillar is feedback. This is also called developer success. As I was mentioned earlier, you need to collect feedback from existing users, learn about their pain points, learn about any improvements that they think you might do for the dogs or any desirable features that they want. And then once you have that feedback, go back to the core team and advocate for them. Now, to exemplify this, I want to talk a bit about Luxo. So with Luxo, the most essential part and the most interesting one is universal profiles. Universal profiles are basically your identity on chain.
00:11:26.950 - 00:12:31.920, Speaker A: However, to build these universal profiles, you need to interact and build with various building blocks called LSPs. Now, the feedback from the community was that the community wanted a streamlined way to build with those LSPs. Based on that feedback, the team developed two libraries lspfactory JS and ERC, seven to five JS. With those two factories, developers have the tools to basically focus on the product and don't worry about the heavy lifting. So, to be more specific about this, now to set up universal profiles, the builder can do this with one line of code instead of doing six manual transactions. Quite powerful right? Now, finally, I want to talk a bit about community. I consider this to be the backbone of developer relations.
00:12:31.920 - 00:13:27.120, Speaker A: So you need to build a developer community around your product or service. You need to help those people solve problems. You need to celebrate with them their successes and also give recognition and help them accelerate their journeys. So when it comes to how you can nourish your developer communities, I have for you three action points to take away from this presentation. The first one is prioritize developers always think about their needs and take that into consideration with your product roadmap. Second one is nurturing your developer community. Think about dogs, think about the developer experience and give them a great set of tools to interact with your product.
00:13:27.120 - 00:14:13.520, Speaker A: And last but not least, give the community the chance to get involved and celebrate their success. That's it. From my side. If you're interested about developer relations, feel free to scan the QR code. It's a link training with all my socials and I wish you a great rest of Eccents or something. Thank you. Still have.
00:14:16.530 - 00:14:27.540, Speaker B: I have a question regarding how do you sorry, how do you at work decide that your work was done good?
00:14:28.710 - 00:14:30.578, Speaker A: Sorry, could you repeat again, please?
00:14:30.664 - 00:14:48.250, Speaker B: Yeah. How you can decide that your work was done good. So any metrics can you recommend you work with was done good? Was done that you are success succeed.
00:14:51.800 - 00:15:36.990, Speaker A: Oh, like success metrics, how do you decide that you are successful? Again, it's all about taking feedback from the community and basically iterating on that feedback. So you get the initial feedback, you see what are the pain points, and then you work on that and you go again to the community and you ask them how is now? How is the process? And in an iterative fashion, you are building upon that. And of course, you can have like, internal metrics where you track, for example, the adoption of a different tools, how many people are onboarding your ecosystem. These are the internal part. Any other questions? Okay, thank you.
