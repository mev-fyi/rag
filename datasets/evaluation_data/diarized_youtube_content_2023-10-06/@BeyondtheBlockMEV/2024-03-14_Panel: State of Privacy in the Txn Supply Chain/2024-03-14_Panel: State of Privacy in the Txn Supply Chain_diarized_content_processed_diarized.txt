00:00:03.210 - 00:00:33.894, Speaker A: Hello. Great to see everyone. Great to be here. It's an honor to be up here with some of the smartest people that I am aware of in the space and have been following for a while. It's also an honor to be in front of some familiar faces in the crowd as well. So I'm Liam, I'm the head of growth here at Fairblock, and we're going to be talking about a number of different topics today. I'll go over a quick itinerary first, and then we can get into a quick round of intros and take it from there.
00:00:33.894 - 00:01:19.400, Speaker A: So let's do it. We're going to be talking about different cryptographic approaches to onchain privacy and how these are important for bad MeV prevention. The considerations in bringing these new approaches on chain, what approaches might offer better solutions than others? Bottlenecks and timelines for these, and how we can maybe strike a balance between bad MeV prevention and market efficiency. So with that, I'd like to start first with a quick round of intros. If each of you can give a brief explainer of what you're working on and how it relates to preventing bad mev opportunities on chain, maybe we can start with guy.
00:01:20.810 - 00:02:15.800, Speaker B: Hey, everyone. I'm Guy Ziskind, co founder of Phoenix. At Phoenix, we're building a L2 encrypted stack using a fully homophobic encryption for Ethereum. So obviously, Mev is like, at the forefront of applications that we're looking at, because at the basis of it, MEV resistance is encrypted. The blocks encrypt the transactions when you go in. But then when fhe comes in, it's like, okay, what kind of interesting stuff can you do on the encrypted blocks before you actually execute them? One particular area that we're interested in right now is for decentralized sequencing and MeV auctions. So basically, the ability for a sequencer to kind of buy an epoch where they can reorder and execute transactions and extract MeV, maybe share it with the users and pay for that.
00:02:16.650 - 00:02:17.590, Speaker A: Yep.
00:02:19.070 - 00:02:42.990, Speaker C: Hi, I'm ravital, the founder of Sunscreen. We are also working on fully homomorphic encryption. I would say we are happy to go super low level, doing fundamental fhe work to get it fast enough to actually be used for some of these MEV applications. We're also pretty happy to go high level as well. We've been building various prototypes for block space auctions as well as dark pools.
00:02:44.310 - 00:03:08.540, Speaker D: I'm Bowen. I'm a co founder at Fairblock. We're working on bringing threshold encryption to application developers on various ecosystems. So not just in the base layer of encrypted mempools or sequencing, but also providing MEV resistant applications on the application layer so developers can sort of build in these MEV mechanisms within their applications themselves.
00:03:09.630 - 00:03:55.590, Speaker A: Awesome. Well, it's great to meet everyone. Let's talk a bit about why privacy is important in MEV. It's clear that there are many different approaches that can be taken to prevent bad MEV on chain. These approaches could be cryptographic solutions like we're all working on trusted execution environments, zk based protocols and apps. Could each of you give me a quick rundown of why these cryptographic solutions are important in preventing bad MEV opportunities? We don't need to compare and contrast over some of the other approaches, but curious to hear initial takes on these before we dig into the rest of the conversation.
00:03:58.490 - 00:04:34.050, Speaker D: I guess I can go first. I think of it from the perspective of the end user. So eventually we want blockchain and crypto to be widely adopted by everyone. And having good UX is key. So if you're having bad execution from being sandwich attacked or like having your transaction censored, that's not really ideal UX for having widestream adoption of crypto in general. So having some aspect of privacy helps with improving UX and prevents censorship among your transactions.
00:04:34.630 - 00:04:35.640, Speaker A: Thank you.
00:04:36.890 - 00:05:05.390, Speaker C: We're very interested in reducing some of the trust assumptions for current MEV infrastructure, as well as enabling new techniques for collaborative searching and collaborative block building. We think with some of the current technology, so the commit and reveal protocols, you're not really able to have hidden strategy, whereas with some of the newer technologies like fully homomorphic encryption threshold, fully homomorphic encryption, you can hide your strategy from other folks in the ecosystem.
00:05:08.130 - 00:06:01.038, Speaker B: Yeah, I mean, to me, maybe on a more philosophical perspective, people who've been in the blockchain space, whenever they hear privacy, it's like, okay, like anonymous transactions, confidential transactions. And what I really like about the MeV use case is I feel that it's the first time where it's not about whether you care about your data or something like that. It's like pure monetary gain, right? You can get more bang for your buck, you can prevent people exploiting you and so forth with the use of privacy enhancing technologies on a very simple level, which is, I'm guessing the audience knows this by heart at this point. But blockchains are a distributed system. It's an open distributed system. People see transactions going in. There is usually not the one entity, or we don't want the one entity to order these.
00:06:01.038 - 00:06:49.390, Speaker B: And if they do that, they can exploit the system. And so obviously the easiest solution, basic solution, is encrypted transactions. So no one actually knows what's going on and how to exploit the system until it's too late, until after the ordering has been decided on, and you can then move forward. And I agree with ravital, where I'm excited about fhe, for example, is that you can kind of come in the middle, right? Like you can come in the step after you encrypt the transactions for the block, but then you can do something, you can do all kinds of things, which I don't even think we are even starting to think about what those opportunities are. And then you can decrypt and execute the block.
00:06:50.770 - 00:07:30.800, Speaker A: The design space is pretty large for this, it seems. Okay, interesting. Let's help the audience try to see into the minds of privacy mechanism designers and everything that you guys are thinking about when it comes to bringing these approaches on chain. What are the major considerations you account for when thinking about bringing these approaches to market in a reliable way? Maybe scalability, latency, trust assumptions. And then, yeah, let's start there. And then I have a follow up question.
00:07:33.090 - 00:08:18.998, Speaker B: I can start. I think at least with FHE, latency is like the biggest concern. I think we're going to see something similar to ZK, where it's going to accelerate so fast that it becomes less and less of an issue year by year. And even now there are some hacks and shortcuts and cases where you can already use it today. I think the other, let's say, tricky part is the trust assumption, which is the threshold assumption. At least the stuff that we're looking on is like threshold fHe. Threshold fhe basically means that you have the same MPC assumption, right? Like you have a committee of validators of nodes, or whatever you want to call them, and they hold the decryption key collectively.
00:08:18.998 - 00:09:14.240, Speaker B: They never see it in one place, and they can collectively decrypt it when the protocol says so. But what if all of them are malicious, right? What if all of them are bad actors and they say, you know what, let's take our shares and reconstruct them. And the biggest problem with this trust assumption is that it's not something that you can actually identify and penalize, or it's very hard. There are some use cases like if you're holding a private key and the committee steals the funds, then you can penalize them because it's pretty obvious that they did it. But in cases like Mev, I think it's much, much harder to identify it. One of the things that we're looking at is how do you minimize, even in a committee structure, like you can think about different setup of committees such that you actually minimize those trust assumptions, but I'm not sure you can get them to zero. If you can, that'd be great.
00:09:15.090 - 00:09:16.080, Speaker A: Thank you.
00:09:16.770 - 00:09:45.430, Speaker C: I can build on that. Since we're also working on fhe as well and threshold fhe, a lot of applications today are viable, but the question is, are they long term, economically viable to get the sort of performance we need for block space auctions, the machines you're looking at, we're talking like hundreds of cores. So how can we reduce the hardware requirements and what hardware acceleration is possible to make these things viable long term for the ecosystem?
00:09:48.750 - 00:10:39.930, Speaker D: I think from our side, one of the major things we're considering is like risk of collusion in threshold based systems. So that's somewhat of like a security risk if your mechanism isn't secure, if a bunch of people just work together and decrypt without you knowing. So we're working on ways to sort of identify when certain parties are colluding. Right now it's based off of economic security, but eventually, I don't think most chains that are launching will have enough economic security as like Ethereum, let's say. On the latency front, our, I guess like threshold IbE right now is pretty reasonable. So it's doable right now. And one good thing about Ibe is that you can reveal sort of data after the fact.
00:10:39.930 - 00:10:49.014, Speaker D: So it's built into a permissionless manner and not requiring a decryption key, let's say, for fhe cases.
00:10:49.062 - 00:10:57.630, Speaker B: Do you mind if I ask a question? How do you use economic security to prevent collusion in a threshold committee?
00:10:58.050 - 00:11:23.800, Speaker D: Yeah, so we're still actively working on it, but our initial sort of step is sort of having like a proof of stake based system, and we're working on weighted key sharing. Another sort of way that we're doing it is like verifiable key submission. So like when validators are submitting keys, you can sort of see which ones are submitting incorrect key shares. For example.
00:11:26.250 - 00:11:59.300, Speaker A: Do you think that applications or app designers are ready to understand the implications of where fhe can benefit their user experiences and where fhe or maybe different cryptographic solutions can benefit the UX of the app? And if not, what do you think we have to do to get the mind share up for these designers to consider all that we're building here.
00:12:01.910 - 00:12:39.760, Speaker D: I guess I can go. I think in terms of having privacy enabled applications, two sort of fields come to mind off the top of my head. So one is like social apps, you can't have messaging without any sort of encryption or privacy on chain. And another one is like on chain gaming. So I think these two sections are where developers are actively thinking about privacy within their application, within defi. It's sort of been ingrained in our heads that blockchain is a purely permissionless, decentralized, transparent system. So we're all quite familiar with.
00:12:41.970 - 00:12:42.334, Speaker A: Quite.
00:12:42.372 - 00:12:55.086, Speaker D: Familiar with the transparent aspect of it. So we haven't really actively been exploring, but now there's a lot more research on seal bid auctions, private voting, that sort of thing, which makes it sort of more promising.
00:12:55.278 - 00:12:56.180, Speaker A: Thank you.
00:12:56.950 - 00:13:14.650, Speaker C: I think I would push back on the idea that developers aren't thinking about privacy. I think the bigger challenge as it stands today is that people don't know how to build some of these private applications in a performant way. And that's where some of us working in privacy really need to help developers.
00:13:15.310 - 00:13:16.300, Speaker A: Good point.
00:13:17.070 - 00:14:01.594, Speaker B: I would actually build on that. Well, to me there are, I think, two major concerns with developers building like privacy enhancing applications. Number one is that developers might not understand when they leak data. Sometimes you want to selectively leak data in the outputs, like in an amm. You probably want to make sure there's not too much sleepage and stuff like that, but developers will have to start to think about it. And to me this is kind of like akin to the early days of smart contracts where developers didn't know that you need to avoid reentrancy attacks, right? Because then you get the Dow hack. Or that you should use a safe math library because otherwise you have an overflow and people can print new money and stuff like that.
00:14:01.594 - 00:14:47.090, Speaker B: So developers will need to start thinking about it. And I think auditing companies, if you're a smart security auditing company, you should realize this is like the next phase of adoption. You should start teaching or getting people with expertise here to actually audit those kind of things as well. Number two is, and this is something that's true to fhe, MPC and pretty much every other technology. There's always a naive, and also ZK, by the way, there's always a naive way to build a program that runs over like a circuit that runs over encrypted data. And then there's a smart way. Now, on the one hand, you want to be expressive, so you want developers to not even care about the underlying cryptography.
00:14:47.090 - 00:15:16.898, Speaker B: But then if you're smart about it, right, maybe you can replace a very expensive integer division operation, which is a horrible circuit in fhe with something like, I don't know, maybe just like one of the values might be public, for example, for your use case. And then it's just like a multiplication that it's much faster. If you think about these considerations, you can get like enormous speed ups. And at least for us, that's like a challenge. We're not quite sure how to balance these two.
00:15:17.064 - 00:16:08.290, Speaker A: Gotcha, gotcha. So pivoting a tiny little bit into thinking about fhe and beyond. Most of us are in the same arena with building out fhe libraries or applications on chain. And I think there are a number of unique approaches to puzzle fhe with other cryptographic schemes to make maybe a more complete solution for privacy on chain. And I know that some of us here are also working on pairing fhe with ZK or fhe with Ibe. Different approaches. So let's start first with what we believe offers the best overall performance today in terms of cryptographic privacy.
00:16:08.290 - 00:16:32.186, Speaker A: And then maybe years into the future, what are we looking at? And then, if you want to, I know some of these cryptographic approaches might be comparing apples to oranges. How can we put them together to create more complete approaches to delivering on chain privacy? Robertaldi, do you want to start?
00:16:32.368 - 00:17:13.622, Speaker C: Sure. So I think it's pretty obvious that trusted execution environments offer the best performance today, but they have a lot of weaknesses. Not to throw shade, but I assume guy can speak about it from like secret network with some of the challenges there. In terms of the future, I would say fully homomorphic encryption and multiparty computation are likely going to be the winners. You do need to pair some of these technologies together when it comes to fhe. For example, say you're submitting a bid in an auction. How do we know your bid is well formed that you can afford to make this bid? You generally need a zero knowledge proof to verify conditions on it.
00:17:13.622 - 00:17:39.520, Speaker C: The challenge is those ZKPs are too expensive to be viable today. So what we're currently looking at is how can we use economic incentives, economic disincentives, to prevent bad behavior. So for the kind of shorter term, maybe across the next few years it's maybe fhe or MPC with economic incentives. Longer term, we would hope it's fhe or MPC with zero knowledge proofs as well.
00:17:42.850 - 00:18:07.190, Speaker B: I have to respond, agree. Like, you know, t's are like obviously the easiest, most capable best bank for the bunk solution. I also agree they're not the end game. I think the end game is indeed. Well actually I will split it into two. I think for blockchain the end game is fhe because fhe is computation bound and like zk that scales much much better. And that's what we need.
00:18:07.190 - 00:18:57.750, Speaker B: And also it has some other benefits that you don't see in web two. If you're a web two person and care about AI, you want to build an open LLM or something, then maybe MPC is better. If you can make some trust assumptions like two big organizations in the same cloud provider, the level of trust that we don't want to see in web3, then maybe MPC would be much more powerful. But again, for blockchain, because of communication, it kind of breaks. And I think eventually where t's, I think these will be part of the endgame solution in defense in depth, right? Like protecting individual shares of the decryption key and stuff like that. They won't be relied on as the only solution. And I agree with Ravita that sometimes you need zero knowledge proofs likeness.
00:18:57.750 - 00:19:39.400, Speaker B: There are small areas, maybe there are even areas where you want the user to do some of the computation to kind of aid the validators, the servers computing. And then that user needs to run a zero knowledge proof to prove that they didn't cheat in that part of the protocol. So all of these technologies will kind of combine together. I believe in a nice and Kumbaya way at some point. But I do think that for blockchain and privacy, like 80% of the solution would be fhe very openly. As Rabbito mentioned, I've been working on secret for many years. I still greatly believe in it, but I think now is the turning point where fhe is actually taking over.
00:19:40.810 - 00:20:09.520, Speaker D: Yeah, I agree with what both of you guys said. I think eventually, at least how we think of it is these are cryptographic tools that a lot of people will use, and a lot of them have different trade offs. So eventually a lot of people should be able to pick and choose to whatever needs they want. For example, we're also exploring TEs with secret network on sort of enhancing a level of security on our chain as well.
00:20:11.170 - 00:20:24.740, Speaker A: We're wrapping up here. I need a estimate from each of you guys on what we think the timelines are for. Reliable fhe on chain really quick. Then we have to move to.
00:20:27.910 - 00:20:33.110, Speaker D: Within next three to five years probably. ZK is also making a lot of progress as well.
00:20:33.180 - 00:20:37.240, Speaker C: Yep, I'm a little more optimistic. I would say one to two years.
00:20:37.930 - 00:20:38.920, Speaker A: Love it.
00:20:42.090 - 00:20:54.234, Speaker B: I'm in the same game. I would actually say one year. I think there's divisions of use cases that we'll see unravel. Like in one year, three years, five years. Years. But one year, you're going to get a lot of utility from FH.
00:20:54.282 - 00:20:59.820, Speaker A: Already ambitious. I love it. Okay, questions? Thanks, everyone.
