00:00:08.970 - 00:00:20.766, Speaker A: Hi, I'm Dimitri. I'm a researcher, formerly research partner at one Kex and I think this is a super important topic. Yeah, maybe let's kick off super quick 32nd intros you and what your company does.
00:00:20.948 - 00:00:30.054, Speaker B: Okay. Hi everybody, I'm Hal from block to wallet. And we're an a wallet four, three, seven. Compatible on almost all the layer twos and also the Ethereum main net.
00:00:30.252 - 00:00:43.690, Speaker C: Hey guys, this is Deli from Automata. I'm the co founder of it. We're building attestation layers across roll ups. We are trying to like doing attestations for hardwares, essentially introducing the concept of proof of machine code into Ethereum.
00:00:44.110 - 00:00:56.640, Speaker D: Hey, I'mirco. I'm a Debrila consensus. We're a software company with a bunch of products, the most famous probably metamask. We also have Belinea, which is ZK layer two.
00:00:57.970 - 00:01:38.970, Speaker E: Yeah, my name is Antoine. I'm ecosystem lead at Argent. So Argent is a smart contract wallet. In fact, together with safe, we were one of the first smart contract wallets already bugged in 2018. So we've been in the aa space for a long time and I think we have developed strong opinions on account attraction. And that basically led us from building a smart account on Ethereum to focusing on ZK rollups with native account attraction. And now we have a very strong focus on Stacknet, which we believe is the best place for rapid adoption of account attraction.
00:01:40.830 - 00:02:01.650, Speaker F: Hey guys, my name is Max. I am the partnerships lead at GM Labs. GM Labs. GM stands for growth and marketing. So that's the main areas that we focus on. We have two main products right now. One is called Questen, which is a questing platform that helps projects to grow their community, acquire new users, and build on chain campaigns.
00:02:01.650 - 00:02:16.038, Speaker F: Secondly, we have a new app launched called timing you, which focuses on all the off chain events, helping you to kind of schedule your event participations and also kind of making sure you meet the right people at the right place and right time.
00:02:16.204 - 00:02:16.630, Speaker A: Nice.
00:02:16.700 - 00:02:17.800, Speaker D: Really need that.
00:02:18.490 - 00:02:44.960, Speaker A: Cool. So I think this is more developer centric. I want to do a baseline in Eli five. If someone could take a stab at this would be great. I'm a dev, I understand what an EOA is, I know what a public private key pair is. I generally understand the transaction flow on Ethereum. Can you explain the difference between the transaction flow between a EOA wallet and an AA enabled wallet and anyone could grab it?
00:02:45.490 - 00:03:19.306, Speaker B: Yes, I'd take this one. So for a usual transaction, you're sending a transaction over the RPC to a full node, and full node will pack it in the next block. That's the very basic understanding of the blockchain. And for user operation from four three seven you are sending another kind of user's intents, not a transaction, it's a user operation. You are sending it over to a decentralized bundle network. And the bundle network will pack multiple user operations into one native transaction of Ethereum and send it over to the network. It's almost the case, but you could.
00:03:19.328 - 00:03:23.626, Speaker A: Have a non four three seven version of an AA wallet.
00:03:23.738 - 00:04:07.274, Speaker B: You mean we, or in general. So account abstraction is a thing that you can have abstracted account on Ethereum. And four three seven is one of the information. And for four three seven it introduces decentralized monitor network, which is different from the prior work like Argent did that. And there's also gas network, gas station network, so you can have pretty much centralized relayers to send manage transactions for users. But four three seven wanted to have a decentralized bundling network, so you don't have the censorship stuff from the private bundler, so you have the decentralized network. But for now, the PDP protocols, they're on the development, but they are going towards full decentralized of that.
00:04:07.392 - 00:04:28.366, Speaker A: Nice. And this is different on Starknet, I suppose this might be one of the opinions, I suppose, but AA is native to Starknet. ZK sync. Was that part of your rationale for wanting to build on there? Is there some kind of benefit you saw to having it be native to the roll up, or were there any other reasons?
00:04:28.558 - 00:04:59.530, Speaker E: Yeah, so it was mainly an adoption rationale. So indeed, we've been now working with account fraction for almost six years. And we very quickly noticed that adoption would be very difficult on ethereum for mainly two reasons. First one is that smart accounts are a bit more expensive than UAS because you have that built in logic, that layer of intelligence that you can add to your smart account, which is a smart contract. And so gas is a bit higher. Right. So that's the first problem.
00:04:59.530 - 00:05:43.734, Speaker E: That's a problem that is being solved by layer twos, by scaling solutions. So we think it's not a problem, but it still is a problem on Ethereum layer one. But then the other issue is Dapps compatibility and Dapps adoption. So first of all, Dapps compatibility to date, still many daps are not compatible with account abstraction standards. There is an EIP called EIP 1271, which is extremely important for daps to be able to recognize a signature coming from a smart account. This EIP has been around since 2018 as well. And to date, many prominent daps still do not support that EIP.
00:05:43.734 - 00:06:24.946, Speaker E: There is actually a website called EIP 1271 IO. You can go have, look, you have there a list of well known Dapps, well known names that are not compatible with account abstraction. So that means users on these smart accounts cannot use these daps. That is an issue of compatibility. The other thing is that once a DAP is compatible with smart accounts, they also need to build a dedicated experience for users. They need to make it worth for users to use smart accounts. So that means that, I don't know if with account abstraction we can enable multiple session keys, but daps have to do it, they have to build these experiences.
00:06:24.946 - 00:07:19.186, Speaker E: And the big issue we see is that, again, to date, the majority, I don't have numbers, but 95, 99% of the user base is still using EOAS. So dapps have no short term incentive to build these dedicated experiences for smart accounts, because ideally now they should have two flows, two user flows, one for users using UAS and one for users using smart accounts. So that is double the work. You need to replicate everything. You need to be able to tell that user is using an UA, that one is using a smart account, and then have two different user experiences. And so for these reasons, we believe account abstraction adoption on ethereum layer one will take a lot of time, it will take years. It might go faster on some layer twos, namely Zk roll ups with native account abstraction.
00:07:19.186 - 00:07:44.314, Speaker E: So that is Zk sync and Stacknet. On Zk sync, typically eoas can benefit from some of the account abstraction capabilities. So an EOA on Zksync can use a paymaster, for instance. So that's a bit better. But still, they don't have the full capability. And then on Stacknet, there is no UA anymore, only smart accounts. So account abstraction on Stacknet is actually today already a reality.
00:07:44.314 - 00:08:01.746, Speaker E: It's already happening, actually. You do multicolored all the time when interacting with Stacknet, dapps. And so that's why we have chosen to focus on Stacknet. That's really the place where we believe we can offer our users the abstracted experience that they deserve.
00:08:01.938 - 00:08:27.198, Speaker A: Nice. And I guess like touching on four through seven. In general, there has not been a lot of adoption. Even on l two s, there's what, like three paymasters? There's maybe six hundred k in volume across. Those paymasters bundlers are unprofitable. There's an average of, say like five user ops per smart account. Why does the adoption suck so bad?
00:08:27.364 - 00:09:13.130, Speaker B: I guess one of the reason is the gas consumption is pretty high. So you send transaction in general is more expensive than EOL accounts. And the second thing is that you have to, like Arjun just mentioned that the ERC 1221 is not adopted so good across the D apps. And also in order to sign signatures from your account, you have to basically deploy account first. But that's a pretty big stopper for a lot of users from using smart accounts. Because in general, when you go to a random dapp, usually the first thing you connect your wallet and second thing you sign the signature. But there is one specific ERC trying to specify how to sign signature without account is deployed.
00:09:13.130 - 00:09:38.622, Speaker B: But that one also requires dfs to adopt that mechanism. But we can see that even the ERC 1271, it's just pretty much a little tweak of the signature verification of the DF logic, it's not adapted so well. So if you want to have another logic to adopt the signature from the account which is not even deployed, it's even harder. So I guess mainly two things. One for the gas and the second one for the D app adoption.
00:09:38.766 - 00:09:52.140, Speaker A: But gas, it is more gas, but to a user, because it's on an l two, I feel like there's not much difference between five cents and fifty cents. I feel like there's something else there, right?
00:09:53.070 - 00:09:54.950, Speaker B: It's not that much. You mean the gas?
00:09:55.030 - 00:10:02.140, Speaker A: Yeah, like for an end user it is more gas, but on a dollar basis it's not that much more.
00:10:02.990 - 00:10:40.054, Speaker B: So that the DF is the thing, but gas just. Of course on layer two is always cheap, but actually on those popular layer two, like optimism or arbitron, you still got like a dollar or something per transaction between EOA and spark accounts. So you can argue that it's not that much, but still something to the users even, especially when you're doing something like for example, maintain free NFD or just doing some random little thing without a lot of value transfer. You don't want such high transaction fee happening even just one dollars.
00:10:40.252 - 00:10:47.290, Speaker A: Any other issues in addition to 1271 high gas that you think is hindering four through seven adoption from anyone else?
00:10:47.360 - 00:11:31.890, Speaker C: I think my take on it is on the migration cost because user experience is kind of defined by D app developers. But nowadays all the D apps, they are having very high TVl and they are just a little bit reluctant to move into the new standard. So actually to tackle this kind of challenge, there might be different ways. One of the approach is, okay, let's convince the base layers. Layer one, layer two, just to adopt the native account abstraction and maybe just make a switch so that all the accounts suddenly can become an A account. The other approach is okay, now we have better infrastructure, better debugging tools, developer tools, so that okay, next wave of the applications, like the next billing user apps, could just start with all the new standards so that we don't have to wait for the existing apps to make the transition.
00:11:32.050 - 00:12:28.300, Speaker D: I think also there is the fact that who's going to pay for the gas cost? So let's say I'm a DAP, maybe I want to sponsor some gas for the user. But then if that user go and use another DAP with their account, who's going to pay for it? Right? Because me as the original DAP, I took the cost. I know that there has been some interesting kind of work around this on how can this cost carry on to the next step. It was super interesting. And also I think one of the other reason is obviously in terms of adoption, all the big wallets at least that are in main net, no one really kind of is account abstraction 100% at the moment. I think OKX, they might have an AA wallet, but if you look at us, metamask, Coinbase and so on, there is no native AA kind of wallet yet.
00:12:29.150 - 00:12:56.802, Speaker A: Yeah, that makes sense. And good timing in a way, to talk about this, because Rip 7560 was published today. This is the first roll up improvement proposal. It's an implementation of native account abstraction on a roll up that is backwards compatible with four through seven. I don't know if any of you all had a chance to glance through it. Any initial thoughts?
00:12:56.946 - 00:13:54.594, Speaker B: I actually had a glance on it, so it's pretty practical. I would say it tries to not changing anything from the 47 standard, but just put a lot of things into the in protocol stuff. And I saw one in particular, very good things, that it tried to remove the gas difference from EOA transaction versus user operations. And that's a good thing because actually the 21,000 gas comes from the EC recover for the transaction overall, and also some state change on chain. But for user operation, actually that's kind of envelope and covering the actual transaction, which is user operations for 37. So the 21,000 is actually wasted for some reason, because we don't want to do any in protocol changes. So we have to bear with that to 21,000 gas consumption.
00:13:54.594 - 00:14:17.520, Speaker B: But if you remove that, the user operation is actually possibly cheaper than UA transactions. Because we have those aggregation of signatures, we have the batch transactions, we can send multiple users at same time and at the moment you got like, I think there's a sweet spot that use operations will be in general cheaper than UA transactions, and that's a good thing.
00:14:18.930 - 00:14:38.290, Speaker D: From what I read. Also they still keep execution and validation kind of separate and also some post transaction step which kind of makes it compatible with 43, 37, 29 and 38, I guess. So the smart accounts currently exist in the kind of just rollover.
00:14:39.210 - 00:14:58.540, Speaker A: Yeah. I wonder if there's a contention here with, I guess like the starknets and zksyncs of the world that already have their own flavor of native AA, how that's going to look like if they would kind of like rip out one standard and put in another, or if these are going to live kind of along each other.
00:15:01.730 - 00:15:28.774, Speaker E: No, I think they will live just to make it clear. So indeed they have different flavors. I like that word of AA, but it's very much inspired by ERC. Four, three, seven. So in terms of transaction flow, it's very similar, I think. Well, basically the idea is the same, but it's already at protocol level. And I think ideally that's what should happen on layer one as well.
00:15:28.774 - 00:15:34.040, Speaker E: And that would solve many adoption issues. Maybe not all of them, but that'd be a good start.
00:15:34.810 - 00:16:25.414, Speaker B: But I think there's a potential issue from the rip because it tries to in generally be competitive with 457, which means it introduces a lot of overhead. So 47 is off protocol thing. So it has to have something that you doing less efficient than you do it in protocol. But when you're putting it back to the protocol, you still remain the same flow of the protocol, which means you introduce a lot of different multi steps and even different transaction types. Different kinds of overhead will be introduced into the protocol, but I still think that's a good direction that we're putting things back to the basic layer of the EVM, and then we can have more native support and less like the efficiency will be slightly better than the 47, but still a long way to go.
00:16:25.612 - 00:16:53.810, Speaker A: Yeah, that makes sense. Very cool. Maybe we could then make a case for AA, assuming there's actual developers in the room, potential applications, how do you kind of frame, how do you make the case to the developer in the room that they should be building with an AA enabled wallet, in the sense of what are the most exciting use cases for each of you that AA actually enables?
00:16:54.310 - 00:17:58.790, Speaker C: I think the most compelling reason is actually the easier user acquisitions, lower the user entry barriers. For example, if you have AA enabled infrastructure, wallets or D apps, you can just cover the cost, subsidize the gas cost maybe initially for first thousand transactions or first thousand users, so that they can just start just tapping into your games easily without having to think about how to get the initial gas tokens and send the first transactions. So that will be a very important property. And second thing is, with AA enabled wallets, it's actually becoming a more programmable infrastructure so that you can hook in multiple different maybe devices and hardware as wallets. So for example, people have been talking about how to use some of the web authentic standards or pasky standard, so that you don't have to convince user to create wallets, they can just use their existing devices because this kind of standard has been pretty prevalent in some of the web two world. So again, it's easier for user to just get access to this kind of infrastructure.
00:18:00.250 - 00:18:51.906, Speaker B: I kind of have a more classic place for a blockchain world. So those fancy things you hear about AA is about session keys or modular accounts. You can have multiple fancy functionalities to your account, but I'm going to talk about a very basic case for smart accounts. You can send batch transactions, which means you can send multiple transactions at one shot. So imagine you have USDC and you want to send it over to your friend in terms of ether, and then you can approve your account to uniswap with like 1000 USDC and swap it and transfer it to another one within just one transaction. So it will have you several benefits. So the first one is that you don't have to wait for free transactions to be confirmed.
00:18:51.906 - 00:19:25.380, Speaker B: It's just one transaction on Ethereum. And the second one is that, I'm not sure, but I think that most of user just approve the maximum amount of USDC to the Uniswap router because of the convenience. But in this case you can have approved plus swap plus transfer at the same time, which means you can just approve exact amount you want to transfer every time. So introduce more secure user experience for users when they are using either unitswap or other dapps. So that's one little thing that batches actions. You can do that.
00:19:28.230 - 00:20:09.854, Speaker F: Yeah, I mean, we're not so much on the defi side. And I think two things that we mentioned before, one upside, of course, or one downside is the transaction costs, right. And the way or the direction where we come from, we are building a lot of dapps, right. So our long term plan is to kind of reunite them in one app chain, an app chain that is going to be completely gasless for the user. Also, building on what Deli said earlier today, experience is very important, right. And from our side, what is important is to have aa within those wallets, but also kind of not really showing it off to the user. Right.
00:20:09.854 - 00:20:53.038, Speaker F: So the experience should be there without kind of looking into or having to look into all the technical backgrounds. And yeah, I think at this point what we're trying to do is not just because we're not from Defi side of things, right. So we're trying to build this GM chain, what is going to be called. And since it's not like Defi focused or big transactions focused, it's just going to be focused on data. Right. Which also allows us to kind of, how to put it? Which also allows us to kind of compensate for the transactions and transaction fees because they will be very low. Right.
00:20:53.038 - 00:20:59.854, Speaker F: So that's also how we can enable to have better experiences for the users for us.
00:20:59.972 - 00:21:36.620, Speaker D: Metamask it's kind of interesting. We took a different path, I guess, from other wallets in the sense that we built snaps, which is a permissionless platform. And we're really kind of empowering developers to create their own kind of journey and to kind of decide what flower of, in this case, account obstruction they want to see. So we already seen some use cases from biconomy and from some other project that built some very cool account obstruction. Snap. And I guess, yeah, that's quite interesting because it's, I guess, different from what everyone else is trying to do.
00:21:37.150 - 00:22:27.446, Speaker E: Yeah. Just maybe to take a step back. The whole point of account abstraction is to bring together web two, ux and web three magic, right? And we are all here convinced by the web three magic and that it's awesome. And blockchain is an awesome technology, but we now need to go beyond that, early adopters that we are and to fetch and to go find this mass adoption. And that's only going to happen through account abstraction. So I just want to tell all the daps out there that tomorrow successful dapps will be the ones that will be able to sell their services to just normal people, mass adoption, not early adopters. So that's, I think, the best reason to use AA to improve Ux.
00:22:27.446 - 00:22:54.020, Speaker E: And it's not that easy. My job is to talk to dapps and especially when I was doing this on ZK sync, convince them to adopt account abstraction. And some people told me that actually the thing that it's great to have ErC 20 approved before being able to swap because we are early adopters and that's how we see things. But that's a mindset change that we need to be able to do as well.
00:22:55.190 - 00:23:01.960, Speaker B: Can I add on something? Yeah, I want to pretty much not pretty much very much agree with that.
00:23:04.970 - 00:23:35.974, Speaker A: It's all good. I could ask nothing. So I guess from a developer perspective, if someone in the room is thinking of building something that's aa enabled, any strong opinions on what the ideal sort of aa stack should be from a developer perspective? Like for example from a wallet factory perspective like simple account versus zero dev kernel versus safecore.
00:23:36.122 - 00:24:22.602, Speaker B: I guess I can take this one. So AA stack in terms of it means different things to different people. And for a stack for wallets like us, we are in general using our own factory, deploying our own accounts, but that's for us. And I think the more which like which means more is to the DAP side. So what's the astack for the DAP site? Because they are the DAps to attract users. And for one thing, you can just use the first thing first you got to go with ERC 1271, that thing you get to compare with a smart account that's from the solidity side, but from your application side you can choose that you use embedded account. So embedded account comes with like zero dapter web and some wallet service.
00:24:22.602 - 00:25:03.150, Speaker B: They're doing pretty good stuff on the embedded account. And other things are using injection smart account like for example Arjun or blockto or even m buyer, those user facing smart accounts. And it's a pretty different approach. So it's better for users security and for user experience across different dapps. And with embedded account have more control over users accounts. You can send transaction on their behalf, but on the other side you're compromised, not compromised, you're just a little bit taking a little bit trade off on user security concern.
00:25:04.370 - 00:26:02.462, Speaker C: Yeah, I think the ideal stack AA stack for developers would be a step by step transition to some of the ideal AA cases. For example, because we are building infrastructure, we are building RPC endpoint. When we see this kind of UIP four three seven standard, we see a lot of new components that has to be run by the infrastructure. So that's actually some extra cost for infra and also some extra work to make sure that the new infrastructure is scalable and also the uptime is good. I'm actually more inclined to see more of this kind of instrument happening in some of the layer one, layer two protocol. So that once they decide on something maybe okay, let's put this kind of standard just into the infrastructure. And also they can have maybe some reference implementation so that we can just stick to the same kind of standard without hesitating to decide which one should we support.
00:26:02.462 - 00:26:15.394, Speaker C: I mean, once we have this kind of thing settled down, infra providers work will be simplified. Then the developer will also have more unified infrastructure to deal with. So yeah, that's my take on this.
00:26:15.512 - 00:26:42.030, Speaker D: I think it's very cool just to kind of develop a bit, but to see how many infrastructure projects are coming up in the last few months. And I don't want to shield any project, but I've seen bicology is doing great job. The guys at P Miko, they're good friends. Another amazing project, Fanxyz is another project that I've been looking into recently. It's another cool one. What else? There was another one astakap, obviously from John Rising. Another great project.
00:26:42.030 - 00:26:50.670, Speaker D: So yeah, it's super interesting to see how many of these people are not just focusing on building wallet, the UI, but they're also starting to focus on infrastructure.
00:26:52.130 - 00:27:51.060, Speaker A: I'll ask one more question and then we'll maybe do one from the audience, if anyone has one. On embedded wallets, I'm torn on it because from one perspective, it's quite a nice experience because the application is the wallet in a sense, and I think that's actually quite competitive for a wallet SDK project. Like if they want market share, you just need to find a couple of great consumer scale apps. But from another perspective, if you do believe that every application will be a wallet, it sounds like a nightmare from an identity perspective, because you're going to have assets and identity effectively fragmented across dozens of applications. I'm curious if there's any strong thoughts around embedded wallets going forward around is this actually the right way to get adoption for Smirent wallets or if there should be maybe some other design patterns that application developers should be thinking about?
00:27:51.670 - 00:28:15.290, Speaker F: I think, yeah, just want to add something to the last point you mentioned, so all the data flowing around doesn't necessarily have to be scary. I think it can also be a good thing because, for example, if you kind of aggregate all that data into did, you can also utilize it to offer more customized solutions to a user or to a certain wallet owner?
00:28:16.910 - 00:28:55.442, Speaker B: Actually, yesterday I was in a panel of evolution with Derek from zero dev and we actually talked about the exact same question about embedded wallet like user experience across different dapps. And the thing is that you cannot stop that from dapps. You cannot stop dapps from using an embedded wallet because it's like way better user experience, at least for the control over the user accounts. It's way better than injected wallet. But think of that for decentralized. We're always talking about self sovereignty, decentralizations, so self custody thing. So you cannot always hand over your aset, hand over your wallet to all the d apps.
00:28:55.442 - 00:29:37.334, Speaker B: So what we talked about is like, we thought there must be something you have to offboard your user from an embedded wallet to some wallet he controlled. So you can have a lot of wallets across different depths. That's totally fine. And I think that's a good thing towards mass adoption, towards good user experience, towards good D app implementation in any sense. But at the end of the day, you still have to have a way that hand over that control back to the user. So that's what the user facing wallets, or probably blockto is here, Argentin is here, mail messnab is also here. We're trying to control those fragmented embedded wallet back to yourself.
00:29:37.334 - 00:29:49.610, Speaker B: So that's the way I think it's going to happen. So embedded wallet for user experience within the Dap, but the control has to be, at the end, handed over back to the user.
00:29:50.030 - 00:30:45.660, Speaker C: I think the market is kind of already approved that this kind of approach works, right? Friend tag and uniball all kind of just embed the wallet. And the thing that user had to figure out is actually the cost behind this. So if you have your keys controlled by others, or if this is a separate identity, you really have to figure out if your asset is secure, then just make threshold. So make sure that you don't put extra money into it and even something goes wrong, your loss is kind of controlled. And also, for this kind of embedded wallet, I think it's fine to have multiple wallets in the future. Each of the app that just have their own solutions or identity, because those in the future will be all like throwaway accounts, you can just easily switch between them, migrate the assets between them, because the cost of running those operations will be a lot lower.
00:30:46.350 - 00:31:09.546, Speaker E: We are running out of time. But I just want to emphasize the fact that embedded wallet does not mean that liquidity has to be fragmented. So on Starknet, we do have an email login, embedded wallet, but it's simply the same on every DaP, right? So it's actually unified on every DAP. You can connect with the same wallet using your email and it's embedded within the DAP.
00:31:09.738 - 00:31:29.890, Speaker A: Nice. Yeah, unfortunately we're out of time, but super interesting conversation. I think think AA still has a lot of entropy, a lot of unknown questions, but everyone's all driving towards the same goal, which is to improve UX by ten x 100 x to actually make this stuff mainstream usable. So thank you guys for working on it. And yeah, clap for the audience.
