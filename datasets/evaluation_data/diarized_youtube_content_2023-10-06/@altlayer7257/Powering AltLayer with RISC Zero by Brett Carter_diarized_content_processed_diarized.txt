00:00:09.450 - 00:00:22.238, Speaker A: Awesome. Cool. Yeah. Title of the talks, powering up the alt layer as an alternative layer with Risk zero. Alt layer. The company that was so gracious to host us today, along with Vale as well, is also using our technology. Yeah.
00:00:22.238 - 00:00:40.326, Speaker A: Excited to give this talk real quick. Have a little bit of a few tasks to take care of before we jump into it. So just a heads up. Our CEO had originally planned to ten. We had a few last minute changes and there was a mix up when it came to time. So I've got way more slides than is available for the time. I think I was going to optimistically settle these in 30 minutes.
00:00:40.326 - 00:01:00.334, Speaker A: There's no way in hell that I get them done in 15. So let's just jump right into it. Wanted to ask first of all, just to kind of get a read from the room, how many of you all are developers? Keep your hand up if you've played around with ZK in any form. And then keep your hand up if you've used Risk zero. Okay, cool. That's great. Yeah.
00:01:00.334 - 00:01:15.266, Speaker A: One, two. There's maybe a couple of people in the room that have used Risk Zero. That's great if you've used Risk zero. You may learn a couple of things in this. If you had your hand up about using ZK, I did see the pain in your eyes. Don't worry and we'll hopefully give you a better alternative to use here. Going forward.
00:01:15.266 - 00:01:35.754, Speaker A: Really fast about me in like 30 seconds, I guess. The parts you need to know. I worked for One Labs on Mina Protocol, was a PM there for quite a while and had the pleasure of serving on the board. Joined risk zero in May. And I have four kids, which means I probably have more kids than anybody else in crypto. It's a little about me. It's kind of nice to know something about the presenter every once in a while.
00:01:35.754 - 00:01:51.822, Speaker A: Yeah. This presentation is the opposite to some extent of my previous presenter who did a wonderful job. It's going to be almost all memes with some code examples. So real fast, there's about the most text that's in here. Yeah, we're just going to speed run this. So I'm just going to kind of keep clicking. Yeah.
00:01:51.822 - 00:02:09.400, Speaker A: The first meme. Here the scaling we needed. It's good, we have it's available, it's alive. But this is really the scaling that we deserve something much better than our current status quo. The problems with scaling today are, let's see, we deserve a better UX. I mean, to be honest, custody is hard. Account abstraction is going to be a really big win.
00:02:09.400 - 00:02:34.400, Speaker A: Anybody doing self custody, I mean, there's a reason that there's billions and billions of dollars in company valuations around custody because it's a really hard problem. So we need to get better at that. Look at this man. How is a consumer ever supposed to figure out which one of these to pick. I mean, just look for the green pie. But nobody's picking the green pie at the bottom, right? So it's like there's a lot going on here that's not implied. It's a really difficult ecosystem for developers and end users to figure out what's going on.
00:02:34.400 - 00:02:53.198, Speaker A: We deserve better security. Every roll up is a bridge. And in 2022, bridges didn't have the greatest time. I don't know if anybody noticed. There was over $2 billion lost in bridge theft. A handful of bridges went down, some in the order of hundreds of millions of dollars. As long as we're having headlines like this, we will never hit a billion users.
00:02:53.198 - 00:03:12.330, Speaker A: Right? This is a big problem. We need to fix it. And yeah, it scares me a little bit to think about the fact that roll ups are really bridges. We also deserve cheaper transactions. So this says next bull market. Because gas prices are high, there's high demand for block space. People are going to be like, man, things are so expensive even on the roll ups.
00:03:12.330 - 00:03:50.998, Speaker A: Look at Solana sui and aptos. This is kind of already happening to some extent, if you're participating on crypto, Twitter or X or whatever it's called today. Yeah, we really deserve cheaper transactions. You can see there the average is about for the ZK roll ups is about one 10th of the price of mainnet for a token swap. And we need to get like 100 to 1000 times better in order to garner mass adoption and use ZK in real world use cases that we all hope will be enabled by blockchains and ZK. Yeah, so there's also a problem with ZK. I think there's quite a few problems with ZK, but one of the main ones is that developers shouldn't have to learn how to write arithmetic circuits in order to build with it.
00:03:50.998 - 00:04:12.246, Speaker A: Ideally, you could just write code and you get the characteristics of ZK, the privacy, the succinctness, and the characteristics we love so much. This is just an example of a circuit in Circom. Shout out to the succinct labs people. They had to write all this stuff in Circum. I'm just going to kind of skip over this. It's probably hard to see anyways, but it's hard. You're doing addition, subtraction, multiplication, division.
00:04:12.246 - 00:04:41.766, Speaker A: There's some for loops and stuff to make it a little easier, but pretty hard to write circuits, really hard to hire talent for it. And there's some other problems with ZK as well. But we're not going to cover these today. I'll be able to ARB these slides for a later talk, hopefully. Cool. So we're going to speed run nine ZK power ups for a brighter crypto future, particularly for this is for all of crypto, but particularly for the roll up ecosystem. So the first one here is these are a bunch of primitives, along with an example of who's doing this with our technology.
00:04:41.766 - 00:05:03.034, Speaker A: And if I skip your company in here I apologize just kind of for time efficiency reasons. I'm going to go as quick as I can. So proof of exploit. This is a really cool the Zero X hack team. They're here. I think there's Poex team. There's a couple other teams as well that are doing this, which is a way for white hats to prove an exploit in an Ethereum smart contract without revealing what the exploit is.
00:05:03.034 - 00:05:32.722, Speaker A: And so you can do that programmatically on chain really neat. You execute the EVM bytecode and they can show like, oh no, I withdrew everything from your smart contract, you better give me some money or else. But yeah, so that should give us better security in the long term. Consensus proofs. I think that the Succinct Labs team in particular has done a really great job with this. You all may be familiar with it, but you can prove light client consensus. So you can essentially do signature aggregation over the Ethereum light client sync committee signatures.
00:05:32.722 - 00:06:06.130, Speaker A: And you can basically have like a light client. Like, there's a lot of L's in there, bridge, rather than a bridge that's just utilizing a multi SIG, which as we know, are prone to failing. So there's some new innovations around proof of consensus ChainSafe. The Sigma team have incorporated this into their blockheader, oracle, I think it's called Zipline. And excuse me, they haven't integrated it. They've done a proof of concept and they're really enjoying working with the Zkvm. We launched just like a demo application that uses this OIDC verification primitive, which is kind of an exciting one as well.
00:06:06.130 - 00:06:41.606, Speaker A: There's not a lot of places web Three fairly cleanly links up to Web Two, I think, in email and then with JWT's OAuth OIDC stuff. So we have certificate authorities that you could sort of feed in Oracle, the latest Google certificate authority on chain. And then we spun up an OAuth application where you sort of authenticate us, give us a token. We don't take very much of your information. And yeah, we verify your token in ZK, give you a proof of that back. And essentially what it lets you do is you can pay somebody at their Gmail address and they can redeem it with that token. It does work on Sepolia.
00:06:41.606 - 00:07:07.486, Speaker A: Right now there are a few little trust assumptions. I'm going to kind of skip over those, but they can be cleaned up over time. ZK Coprocessors probably heard a lot about this. There's a really great example we built. We built a ZK governance dao governance example. So all of the voting happens off chain. Similar guarantees to the same security model you would get directly on main net, with the exception that you're obviously trusting our cryptography and our proof systems.
00:07:07.486 - 00:07:33.174, Speaker A: There's like an incremental increase there. But yeah, it just reads directly from on chain state. You get really great guarantees, save 66% per vote on gas costs. This is also built on the governor contract standard, if anybody's familiar with that, used by Comp. And most of the folks who do on chain governance, like in Tally for example, yeah, got that working prior to Paris. And it's a really cool example. There's a repo for it.
00:07:33.174 - 00:08:15.574, Speaker A: It's a great example of sort of going full circle from Ethereum, doing some off chain compute and then verifying the proof all the way back on chain. Tally found that example, really liked it, and they're doing some experimentation around cross chain governance. So there's some interoperability use cases for ZK and our Risk zero VM. This one's really cool. So if you didn't hear the announcement about Zeth, essentially what we did was in our Zkvm, we used a crate called Revm, which is the Rust Ethereum implementation. And we implemented a EVM in our Zkvm which gives you some sort of like ZK EVM in a Zkvm type thing. It's actually a really interesting innovation.
00:08:15.574 - 00:08:45.086, Speaker A: I think we were the first type One EVM and I'll share some timelines. We were able to do that really fast. Some things people are using Zeth for are ZK fraud proofs. So layer N is trying to build a really fast roll up. It'll be optimistic, but instead of using like a Bisection game fraud proofs, these will be non interactive ZK fraud proofs. You can essentially, if you can prove a block is valid, you don't have to do the whole Bisection like fraud proof game. And so it's a little bit less censorship resistance, more economically efficient.
00:08:45.086 - 00:09:10.006, Speaker A: There's quite a few advantages to taking that approach. Sovereign Labs is doing something similar. They'll eventually probably have full validity proofs, but you can build a sovereign with their SDK. You can build a sovereign rollup. I think Chainway is the most infamous one right now, which is an EVM roll up that will be deployed to Bitcoin. They're using our cryptography and yeah, loving it. And then of course, our friends at Altlayer, they're also using ZK fraud proofs.
00:09:10.006 - 00:09:37.374, Speaker A: They've built their own Alt layer stack. And essentially what they're doing is this stack has been around for a while, but it's just easier for them to verify their fraud proof. It's a WASM based fraud proof inside of our Zkvm and then to put that proof on Chain. So it just sort of saves a few headaches for them. And that's a design that they're going to continue to optimize on. Another use of Zest in this sort of EVM and ZK VM primitive is validity proofs. And so we won an RFP.
00:09:37.374 - 00:10:17.106, Speaker A: This is public for optimism to sort of build a proof of concept for them. They wanted ZK fraud proofs and we basically said, why don't we just do the whole thing? We'll turn you into ZK roll up, full ZK roll up. And so we just sort of publicly released Opzeth, which is the Op specific version for Zeth, which can prove full Op blocks. And then you get some weird stuff that's kind of cool, which is alternative VMs, since you have a generalized VM in us. Eclipse is running SVM inside of our VM, so the Solana virtual machine and they're going to do a Solana roll up on top of Ethereum. How funny is that? Kind of cool. A couple quick notes here.
00:10:17.106 - 00:10:57.200, Speaker A: I think the bottom one, I mean, the timelines that our technology helps teams accelerate their ZK development are pretty staggering. So it's probably worth taking a second get. We got the OIDC token verification stuff going in a matter of a few days, and I'm being a little bit vague here. And by the way, in the without risk zero column are like, there's actual projects I have in mind there. I just didn't want to throw them under the bus because ZK is really hard. And so, yeah, I didn't put names here, but these are real timelines with real examples of projects. Sync Committee signature verifications for those consensus proofs easily takes months to develop or took months to develop with Circom and other DSLs like that.
00:10:57.200 - 00:11:27.670, Speaker A: Actually, the ChainSafe team was able to get that working in two to three days doing full proofs, and they had it integrated into their system, their Blockhead Oracle system, within a week. It was really impressive. And then we'll just skip down to the Zeth and our Zke EVM. Obviously, we know this take years to develop, hundreds of millions of dollars, et cetera. Building on top of our Zkvm, we were able to get Zeth working honestly in more like four weeks. It took like almost as long to write the PR and plan for the press as it did to do the implementation. And I'm really not kidding.
00:11:27.670 - 00:11:54.480, Speaker A: And so, yeah, we're back here again. And risk zero. This is ZK development before risk zero and after risk zero. And I'm going to explain why in three and a half minutes today. The status quo, or up till now, the status quo is like, you'd have to write an ASIC like ZK circuit for every use case you have for ZK. So it's almost like you're designing hardware and software. It's a very specialized skill set, difficult to do.
00:11:54.480 - 00:12:28.694, Speaker A: What we did is instead we wrote it's more than one circuit. But let's just think of it as one circuit that kind of emulates a CPU that lets you write a program in a general purpose language. We support Rust as a first class language, but you can do it in other languages like C plus plus. So you just write your normal program in Rust. No Edsl, no HDL. There's no language other than rust. And you just compile it down to RISC V binary and you run it through our CPU like ZK circuit and you get the characteristics of ZK inside your regular Rust program, which is pretty badass.
00:12:28.694 - 00:13:05.622, Speaker A: And I'll try to explain why the guy at Hackathon in September 1 time he ever touched ZK, and he won this second place in this capture the flag using our Risk zero stuff. One of the benefits you get from this general approach to Zkvm is you get code reuse. So this is a nightly job that we run every night on the top 1000 rust crates. And roughly 70% of those compile with no alterations to the crates themselves. And the red cells just mean that at least one test failed in that crate. It doesn't necessarily mean that all of them failed. So 70% of all rust crates in the top 1000 run Nrzkvm out of the box.
00:13:05.622 - 00:13:30.014, Speaker A: So you get really great degree of code reuse. As we know as developers, code reuse really makes your life a lot easier. So this is what that looks like Nrzkvm. You can see we're using the K 256 crate here on line 24, and the tiny Check catch act crate on line 29. And we're doing some cool stuff below this. This is our Dow Governance example, which is in this open source repo. You can see the file tree up there, and you can see we can do things like this.
00:13:30.014 - 00:13:52.818, Speaker A: So this is EC recover. We're just verifying ECDSA signatures. We can do them in a loop that starts on line 112. And that's how we did the Dow Governance thing. It's all of 160 lines of rust that we wrote in not that much time. And we wrote all the solidity, deployed the Verifier contract, all in about three weeks. How do we do this? We have a feature called Continuations.
00:13:52.818 - 00:14:11.706, Speaker A: It's really awesome. It lets you take your program, which is represented by the snow here. That's all your binary that you compiled. We break it up into individual lines we call segments, and you can prove those in parallel. And then this Continuations recursion primitive, sort of snorts them all up into one. Succinct proof happens all behind the scenes. You don't have to do any configuration for it.
00:14:11.706 - 00:14:42.920, Speaker A: It's really, really nice. Essentially means there's no hard cap on the number of cycles or the length of your ZK program. We're able to do that because we're using Starks under the hood. You could do this with Starks, but it's just easier with Starks. Like, the whole notion of a Stark is that you sort of prove steps and you combine them. So it's really friendly for Starks, but they're really expensive to verify on chain or they don't fit at all. So we have a feature called Stark to Snark that will actually wrap our big ass doge in a small Snark doge and lets you verify your proofs on.
00:14:42.920 - 00:15:12.526, Speaker A: Oh, how do I go back one? This one's actually really cool. I'll probably call it quits. Here a proof. System composition is something I don't think anybody's really talked about here, which is in our general purpose Zkvm. What you're seeing here is actually we pulled in a rust crate that does verification of Grot 16 proofs. And so we're actually verifying a Grot 16 circum proof inside of our Zkvm so you could really compose proof systems. We also have an example working with the Halo Two Verifier, since they have a rust crate for that.
00:15:12.526 - 00:15:33.506, Speaker A: This is stuff we've just been doing in the last few weeks. And so imagine that you could use risk zero to compose proofs from various proof systems. We got this working. The guy who did it is basically a genius, but he did it in a day, so it's not really that hard. Yeah, this is like a little bit more. And then he wrote a little library. And in the Zkvm he just runs Verify.
00:15:33.506 - 00:15:52.894, Speaker A: And then we can build off of that Grot 16 proof if we'd like. You can do custom accelerators in software. You can write specialized circuits that allow you to accelerate really heavy operations, like Ketcheck, for example. Super expensive. We can write a Ketcheck accelerator and pipe that in if you need it. So that was it. Yeah.
00:15:52.894 - 00:16:03.900, Speaker A: Risk zeros ZK cheat mode. Happy to talk to anybody after this, particularly if you have GPUs. I'm looking for Cudicors. So if you have like 1000 or more GPUs, come talk to me after. Yeah. Thanks, everybody.
