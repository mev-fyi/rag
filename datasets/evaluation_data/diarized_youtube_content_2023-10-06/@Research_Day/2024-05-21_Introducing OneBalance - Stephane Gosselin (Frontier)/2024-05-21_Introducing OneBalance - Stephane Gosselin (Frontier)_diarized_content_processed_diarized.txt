00:00:06.960 - 00:00:43.664, Speaker A: Okay. Hello. How's everyone doing? Guys, the videos from the event last year were just so nice, and I was like, shit, I need to get on stage for this one. So thank you for having me. I'm super excited to introduce something that has been sort of in the works for a little while now, probably. I mean, I've been thinking about this for five years and it just feels like now is the right time to really make it happen. And I posted a post on ETH research last night and I want feedback on it.
00:00:43.664 - 00:01:48.436, Speaker A: So this talk is about this post. It's about what we are trying to achieve by providing this proposal and hopefully have an impact on the space as a whole. So my talk is segmented in this outline. We're going to start with just a little why, followed by an overview of what my thesis is for doing this work, talking about the underlying theory behind it, of equivocation and finality, and then finally the solution that we're proposing with one balance. Okay, so why chain abstraction? Some of you have certainly seen us talk about cake in the past and the cake framework that we proposed, and it goes like this. Dapps in 2020 were really fun to use. They had great usability, they were one click experiences, but unfortunately they had terrible scalability.
00:01:48.436 - 00:02:37.096, Speaker A: And so unless you're willing to spend $200 for every transaction that you do, it wasn't exactly a sustainable model. And so, fast forward four years and we've achieved scalability. We have block space proliferation, we have more block space than we know what to do with, but we've completely compromised on our usability. And it shows in the data as well. Right? We're seeing other chains that provide integrated experiences, pick up on user volume. We're seeing applications that abstract away a lot of the complexity of this multi chain stuff pick up in usage, like telegram bots. And so we're not exactly happy and we want to solve this problem.
00:02:37.096 - 00:03:37.814, Speaker A: And so what do dapps look like in 2025? That's really the question that, that I think we should be posing ourselves. And that's why we formed this cake working group. So cake is really a framework for evaluating what are the components that are necessary to achieve chain abstraction and provide the user experience that is necessary for the users to operate in a multi chain setting. And out of this framework, we sort of analyze, okay, there's a bunch of different components here. They're all super important and they're all being built by a lot of different people. And so what's missing for us to solve the fragmentation problem is actually a venue of discussion that allows for the establishment of standards and common interfaces so that we don't just have XKCD meme, another standard. And so that's really the motivation behind the cake framework, is for us to actually get to the promised land that chain of traction offers.
00:03:37.814 - 00:04:14.940, Speaker A: So we have a bunch of really great members as part of this working group. We've had a session in Denver, another one in London. We have another one coming up in Berlin, then we'll do another one in ECC. And we are always welcoming people to come join and participate in the discussion around this. Anyone who cares about UX and cross chain, this is a really hard problem and so it takes a lot of great minds to think about it. One thing that we're starting is a focus on wallets and apps. So we're starting a sub work stream on the cake working group, specifically looking at what is the UX and the interfaces that are required for wallets and applications to be able to integrate the rest of the cake.
00:04:14.940 - 00:04:59.004, Speaker A: And so if you're wallet and app, please scan and come work with us. Okay, here's the actual meat of the presentation. Here we talk about one balance. And so I want to introduce the idea of a fat account thesis. I know that most people are familiar with the fat protocol thesis. You know, Joel published this a while back and is such a, you know, a well known theory in the space and I think it's carried truth for a really long time, but I believe is becoming more and more outdated the more block space that we have. Basically it's making assumptions that the credible commitment machines of blockchains and global consensus are tied together.
00:04:59.004 - 00:05:56.254, Speaker A: And this chain centric worldview sort of says that this block space scarcity, um, is due to bundling these two things. Um, and if we look at what does an EOA account look like on top of these kinds of blockchains? Well, it's just an account that sits outside of this chain centric worldview and interfaces with it. So shifting over to fat account thesis essentially says, oh, actually that's the wrong joining to do. The bundling needs to happen between the accounts and the credible commitment machine. And the global consensus is just actually a plugin into the account. And so this gives you a ton of great properties, including improved scalability and great user experience. And so I'm going to essentially try to convince you that this shift to an account centric worldview is both inevitable and necessary if we actually want to unlock the power of crypto and web3.
00:05:56.254 - 00:06:54.600, Speaker A: Let's talk about the equivocation and global consensus problem. So request of equivocation is essentially what a user can do within EOA. They request a state transition by signing a transaction, and they sign a nonce as part of that transaction. The problem with that is the user can sign any number of transactions using the same nonce, right? And any of those are considered valid. And so when you try to introduce a model like the cake, one where you have solvers sitting in the middle who are intaking these messages and responsible for being on chain, they need to be able to rely on the validity of the request that the user won't equivocate on it. And that's just something that current eoas aren't able to offer. The reason why is because the chain doesn't have a view over what messages the user has signed.
00:06:54.600 - 00:07:36.322, Speaker A: It's very simple, right? It sits outside of the chain, and so it doesn't have view over what messages the account assigned. It only has a view over what is brought to it. So solvers who are using these messages, they cannot know if the user equivocated or not. And mechanisms to actually do cross chain execution rely on some kind of time locked request that cannot be equivocated. If you want to relay a message from one chain to another, you need to have some kind of proof that the user cannot equivocate on their message request. Otherwise the solver gets griefed. So how do we prevent request equivocation? Well, the majority of the proposals so far do this.
00:07:36.322 - 00:08:20.444, Speaker A: They say, let's just put the account on chain. So this is, there's like a few ways of modeling this, but smart contract accounts are an example of this. You just put the signing on chain and you say, oh, now the chain has a view of everything that the user assigned because it, it's part of the chain. Another way to say this is, oh, the user transfers value into a bridge contract. And so now you can't equivocate out of the bridge contract because the value has been transferred. All of these things are great because they allow us to build htlcs, right? And you can do secure cross chain messaging and you can achieve the cross chain execution. But really, it's not perfect because you are also inheriting the global consensus.
00:08:20.444 - 00:08:57.733, Speaker A: And global consensus is expensive as. And so if you want to solve this dilemma between users can equivocate or it's really slow and expensive, you need to create a new model. And so this new model is really what I'm presenting today. It's how do we actually get secure, cross chain messaging without compromising on speed and reliability. All right, one balance next gen account model. So a one balance account introduces two concepts. The first one is the idea of a resource lock.
00:08:57.733 - 00:09:53.284, Speaker A: And big shout out to Chris, who just spoke before. A lot of this is specified by his work on anoma, and I firmly believe is one of the most impactful research that's been done in the last five years of crypto. But the concept of a resource lock is pretty simple. It just says, hey, we're going to lock some state and have some kind of condition on fulfillment, also an expiry date on it. So it's a hash timelock. But what's really interesting about it is when you couple it with the idea that you don't need to put it on the global consensus for it to be valid. And so by simply putting an account coupled with a credible commitment machine, you can have the same properties that provide the security to the solvers without inheriting the cost of execution in a global environment.
00:09:53.284 - 00:10:59.278, Speaker A: And so it's really this uncompling of the credible commitment machine from the global consensus that solves our dilemma here and allows us to to create new types of accounts that do cross chain execution without those tradeoffs. So there are a few different ways to go about implementing this kind of account. We can say, oh, well, we can just create a new chain that has a special vm, and you have the accounts inside of those vms. The validators are able to trigger state transitions on behalf of the users and create locks. But then you have sort of an issue where you need to fork and introduce all kinds of precompiles into your chain whenever you want to do an upgrade. And you also have to worry about the OS on your validator set, which is, as we all know, a non trivial problem to solve for the other approach that I sort of mention is, okay, well, let's just put the account on chain and call it smart contract account. And this works, but expensive, slow.
00:10:59.278 - 00:12:27.484, Speaker A: You inherit the properties of the chain that the account is originating from. And so if you want to achieve speed and cheapness, it doesn't really help that much. And then there are sort of two more modern proposals for how to achieve this. One of them is you just take an eoa, you shard it inside of a network of nodes who are doing some kind of MPC threshold, signing over some policies, and you can have sort of readability and confidence that these nodes aren't going to equivocate or double sign something because of the properties of the network that is operating them. But that introduces some latency and some crypto economic security assumptions that say, hey, how much value can you actually store on this thing relative to the ability for these nodes to collude and extract some of the value? And then the fourth architecture is basically putting the accounts inside of a te. So you trade off the crypto economic security guarantees for hardware security guarantees, and you say, oh, so long as the user and the solver trust this machine is not double signing something, then we can count it as a credible commitment. So these are sort of broadly four different approaches to implementing this.
00:12:27.484 - 00:13:28.754, Speaker A: I think these accounts types or these credible commitment machines are constantly evolving and improving. So I sort of suspect that the current model of what works most efficiently is going to be very different than the one that's going to come in a few years time. So this goes back to, why am I here? Why am I giving this talk? Why do I care about this? My goal with this proposal is to accelerate the transition, an account centric worldview, because I think it's essentially required if we want to onboard 1 billion humans into crypto. Any other model of account just doesn't provide the right scalability to be able to achieve this. And the faster that we're able to do this, the more likely that Ethereum is going to avoid further fragmentation. And so that's the mission. We're implementing this as a framework because there's so many different components of the cake stack.
00:13:28.754 - 00:14:06.634, Speaker A: There's so many different teams that are building various different components of this. Really, my sense is that we stand on the shoulders of giants, and hundreds of millions, if not billions, of dollars have already been spent solving the hard problems. Our goal is really just to integrate them together into a single account or a single balance. So that's the long and short of it. I'm really excited to introduce this and get some feedback, collaborate on it, tear it apart, tell me why it doesn't work, and then we'll improve it and make it happen. Thank you.
