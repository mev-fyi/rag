00:00:06.760 - 00:00:47.844, Speaker A: Hope you guys are doing well today. Thanks for having me. I'm Zano, co founder CTO of Geo Run. Also, I am the auctioneer at Jito. So, yeah, today we're going to talk about block production, what it looks like today, what it could look like in the future. I'm not here to show anything to you guys, but Jito is running on 80% of the network, so naturally I'll be talking about that a lot. Yeah, so the goals here are really to highlight execution, decoupled execution, block execution as important piece of blockchains.
00:00:47.844 - 00:01:30.560, Speaker A: I believe, like decoupling, that is important. I'm going to give an overview on what block building looks like today, and we'll discuss some potential architectures, their respective tradeoffs that could be implemented on Solana in the future. A non goal is any commitment to any of the discussed designs. These are just my thoughts and how I think things could potentially play out. So execution is important. I think of blockchains in two ways. There's execution, which is writes into the chain, landing transactions, and then there's reads.
00:01:30.560 - 00:02:13.754, Speaker A: People want to read the data, which is also important, but it's a different component of a blockchain. Today, there's about $500 million worth of mev annualized on Solana. My definition of Mev is tips given to validators running Jito. This is excluding the actual profit that searchers make, which is probably three to four. X this amount, I expect this number to go up. If you're betting on any chain to be successful, you're probably also betting that this number is going to go up. With that being said, it's important to think about value capture here.
00:02:13.754 - 00:02:55.904, Speaker A: The higher this number, the more revenue the chain produces for validators, stakers. What that means is it makes it more attractive to actually stake and validate on your chain, which is good for security and just good for the overall ecosystem. What's important to users? Users don't care about any of that. They just care about landing their transactions. They go to adapt. They click on a button, they want to see confirmation within a second. They care about snappy uis, so deterministic execution is important, and censorship resistance influences this.
00:02:55.904 - 00:03:33.740, Speaker A: So if a user's transactions are getting censored, then they'll see long confirmation times, and that's bad. Another component here is users need to know how much to bid. Unfortunately, today on Solana, it's a little fuzzy. Users just kind of spam the chain. There's not really any fee markets, and Solana kind of incentivizes this right now with low transaction fees. It's a static base fee, which is roughly a 10th of a penny today. So you can imagine you just spam the chain to fill up the priority, or to fill up the queue, the transaction execution queue.
00:03:33.740 - 00:04:32.504, Speaker A: And that gives you a higher chance of landing a transaction. More on betting on the success of the chain. As you see here, about. Actually a year ago, there was about ten sol a week in total Mev on the network. I think last week we saw close to 60K Soul, which is amazing to see, but also a testament to the chain success influencing how much MEV is on the chain. So what drives block space demand? Why is this number going up? Why do users want to trade on the chain? Some questions here. Is it liquidity? What brings liquidity over? Is it the meme coins? What brings the meme coins over? Is it a perception of blue chip defi tokens? Think of the top ten defi tokens on Ethereum Solana.
00:04:32.504 - 00:05:11.194, Speaker A: Is that what brings users over? It's probably all of the above, with liquidity being the first requirement. If there's no liquidity, there's no trading activity that's going to happen. But block space demand ultimately leads to congestion issues. As we've seen, congestion has an effect on availability on Ethereum that manifests in high gas fees, which is high gas fees can also be viewed as like an availability problem. If it's too expensive to send transactions to the chain, you probably won't. So from your perspective, it's not really available on Solana. It's network issues, transactions getting dropped.
00:05:11.194 - 00:05:59.344, Speaker A: There's not really a notion of a high base fee there. So, yeah, I mean, block space is in demand, writes into the chain are in demand. So warrants some deep thought and discussion on what that architecture can and should look like for your chain, but specifically today for Solana. So before we get too deep, I'll give a refresher on some of the important characteristics of Solana. These characteristics have an influence on how you build these systems. So let's talk about that. So here we're illustrating what block propagation looks like.
00:05:59.344 - 00:06:46.756, Speaker A: Blocks on Solana could theoretically be, sorry, 128 megabytes, because the block propagation is over. UDP packet sizes are bound by UDP MTU on the public Internet, which is 1280 bytes. So what that really means is, like, if you send any packet larger than that, some router at AWS or in a data center will actually just drop that packet. So you have to conform to, like, the minimum MTU on the public Internet. Which is 1280 bytes. So blocks get shredded, which is a sort of Solana abstraction of like a mini block. Imagine like a block is composed of a bunch of shreds.
00:06:46.756 - 00:07:41.124, Speaker A: These validators that receive these shreds reconstruct the block, execute the block, look at the state transitions. Were they valid? Was there any double spends, any duplicate transactions? If not, it's a valid block and vote on the correctness of that block. Another interesting feature on Solana is a parallel runtime that is enabled through Solana's sort of upfront state access declarations by transactions. So on the right we have two examples, and actually I'll just quiz you guys. So at the top you have transaction zero that write locks a, readlocks b. Transaction one also read locks b, but write locks c. So just make a mental note in how the scheduler will schedule those transactions.
00:07:41.124 - 00:08:09.720, Speaker A: Will it be in parallel or will they be sequential? And then same for the bottom, you have three transactions. I'll give you guys like 2 seconds to look at that. Cool. So let's go on to the answer. So that first example, you can schedule those in parallel. There's no write lock conflicts between the two. They read lock the same account, but that's not being written to.
00:08:09.720 - 00:08:40.564, Speaker A: So it's fine. You can just schedule them in parallel. For the second one, let's say you have that and those three transactions in your queue, because transaction one has a overlap with transaction zero. It's trying to grab a readlock to something that that thing is write locking. It has to wait for that transaction to execute. So what the scheduler does, it, it looks at the queue, it says all right, what, what can I, based on what I have right now, what can I schedule in parallel? It does. So, and then they execute, and then transaction one gets scheduled.
00:08:40.564 - 00:09:11.384, Speaker A: So this is really interesting, because now you can think about the interesting types of auctions you can run out of ban, which is kind of what Gito does. We run these parallel state auctions. So we receive all these bundles from searchers. Searchers are doing all sorts of things with bundles. Some are doing meme, coin buying, NFT sniping, whatever it may be. An NFT bundle should not impact a BTC per long on drift. Those are two different things.
00:09:11.384 - 00:09:53.910, Speaker A: So the way the auction runs is it tries to run these things in parallel. And what that means is the bid of one bundle will not affect the bit of another bundle in a parallel auction. So it's kind of like this out of band. It's not really like EIP 1559 because it's not rising over time. But you do get this, you do have a different sort of floor for the two auctions because they're running in parallel. This is the feature I find most interesting on Solana. So, like, the crux of really, the problem for us, and I think any searching team on Solana, is the state of the world is constantly changing.
00:09:53.910 - 00:10:44.218, Speaker A: And what that means is you're constantly trying to simulate transactions and bundles on what you think the state of the world of the chain is. And what's the state of the world of the chain? Whatever the current leader thinks it is. So the current leader is executing transactions. You want to basically be as close as possible to that leader state of the blockchain. So, for example, if you simulate transactions on some older state, let's say the leader is at n plus one, and you're simulating at just n, your simulation result will be sort of stale. Let's say prices move between n and n plus one, then really, you can't really trust your simulation results. And the reason for that is, I think it's continuous block building.
00:10:44.218 - 00:11:38.664, Speaker A: This is kind of debatable amongst people, because, like, the unit of execution is still a block. So, like, if half the block executes correctly and then the rest has, like, a bad duplicate transaction signature or some double sign, then the whole block gets dropped. But, like, I still see it as, like, a continuous time block building, because what happens is leader receives a packet, takes it off the network card, deserializes it into a transaction, runs it through a filter. Like, is this a valid transaction to begin with? If it is, it executes it and then immediately broadcasts it out. This is in contrast to other networks, where the entire block is constructed by the leader, and then the entire block is actually just posted out. So you're constantly streaming out packets that compose this block. And really what a block is on Solana, it's a start and end of a stream of packets.
00:11:38.664 - 00:12:18.584, Speaker A: So that makes, I mean, you could imagine that makes the engineering problem super interesting. Oh, sorry, one last point. What this does is this sort of like streaming nature sacrifices block rewards for low latency. Think about it this way. A block time is 400 milliseconds, but really each block propagation is like, let's say, let's call it five milliseconds. So within five milliseconds, you have a very narrow view of the world. The world being all the transactions that can fit into a block.
00:12:18.584 - 00:12:47.924, Speaker A: You can imagine that might not lead to higher block rewards. You only have five milliseconds. Worth of view. So we kind of recognized this trade off at Jito, and we decided maybe there's a way where we can slow things down. But the trade off being we increased block rewards. So what we've done is we've introduced a speed bump of 200 milliseconds. A speed bump is really just holding transactions for 200 milliseconds, running some auction on bundles.
00:12:47.924 - 00:13:19.864, Speaker A: And that gives us enough time to determine what the highest paying bundles are for that slot. Cool. So let's talk about what block building looks like today. I'll let you guys digest this for like 5 seconds. All right, so you have a geodo block engine running right there. And keep in mind, Solana is 400 milliseconds. So this architecture is running around the world.
00:13:19.864 - 00:13:47.338, Speaker A: We have it redundant. Basically the same cluster running in different regions of the world. Validators connect to the closest region. Let's say this is Amsterdam. The block engine receives some bundles from searchers, dapps, whatever, anyone who wants deterministic execution or atomic bundles. And actually, I've been assuming you guys know what bundles are. So bundles are really just a list of transactions that execute sequentially and atomically.
00:13:47.338 - 00:14:26.590, Speaker A: Atomically, meaning anything fails in that bundle, the whole thing reverts sequentially, meaning the way you order the transactions execute in that order. Exactly. So the flow is really, they send bundles. Jitto runs this auction at 200 millisecond time increments and then decides, like, all right, these are the most profitable bundles. Based on some algorithm, we've defined and submits that to the leader. While all of that is happening, you have the normal transactions coming from RPC's. So just like how you think of whatever a normal transaction is on Solana, and the relayer is what actually applies the speed bump.
00:14:26.590 - 00:15:12.114, Speaker A: It holds these transactions for 200 milliseconds, and then it just optimistically releases them regardless of the auction result. So the way the relayer actually starts acting as this transaction proxy router, validators gossip out. So validators, normally they gossip out like an ingress socket where clients should be sending transactions. So they gossip out the relayers ingress socket and the rest of the network just doesn't really know it's a relayer. It just knows it's a socket. I'm going to send some transactions there. So the, like, what is a tip? A tip is a transfer from, is a sole transfer from any account to one of eight tip accounts.
00:15:12.114 - 00:16:09.244, Speaker A: But to, like, simplify it, really, each epoch, validators get their own MEv piggy bank. So when you're, when you're submitting a bundle, you submit tips to this Mev piggy bank and that's what we determine, like what the amount of Mev or bid is for that, for that bundle, and then that gets submitted to the leader. If it executes, it goes into their piggy bank. Now, I'll talk about redistribution for a second too. So what happens to all those, what happens to the piggy bank? Basically, at the end of the epoch, which is roughly two days on Solana, the piggy bank is pro ratted, distributed to the validator stakers after they take their commission. So that's kind of like the value flow. So like for example, if your validator has 1000 sol in this piggy bank as a 5%, commission takes its 5% and the rest goes to all the stake accounts on the validator pro routed to their stake on your validator.
00:16:09.244 - 00:17:06.022, Speaker A: So really interesting thing here is right now, these auctions really only account for 10% of the block. So Solana blocks are maximum 48 million compute units, and bundles only account for like four to 6 million compute units per block. With that being said, they still account for three x the block rewards. So I think that's pretty interesting because that kind of highlights this, the fact that you decouple execution and push it out to a, a specialized entity, you can actually get more rewards per compute units for the validator. Yeah, this is just more like how Solana works. So all this is happening. Bundles go through this bundle stage in parallel, transactions go through the banking stage.
00:17:06.022 - 00:18:02.234, Speaker A: Just really trying to highlight how fun the engineering problem with Solana is. There's like a lot of things happening in parallel. All right, which way is France? So I think, yeah, I think I've asserted here that decoupling block building is the right way to go, at least a better pricing of block space. You have specialized entities that have better flow or better predictive models on how to price blocks. And because of that, the value flow down to entities on or stakers and validators of the network is actually more, it's increased. So that that makes it more attractive to actually participate in the network. So I think what we've done so far is we've ran kind of an experiment in prod at Gito and we've proven out that the theory is correct to decouple block building.
00:18:02.234 - 00:18:54.534, Speaker A: So now we want to crank it up. So, I mean, the design space is large. So I'm just going to talk about two specific ways this could happen. So let's talk about JIT. First, price, silent bid, block auctions jit, meaning just in time. Plenty of research questions up for grabs here, like what's the optimal frequency to run the mat? Are there any objective or subjective slashing conditions once you actually start architecting this thing? All right, so this is what a JIt block auction could look like. What's happening here is you have two builders and they submit their bids at the time of the slot.
00:18:54.534 - 00:19:49.694, Speaker A: The relayer is now. I don't know, I like naming things. So auctioneer seems cool because they're like running this auction now. And the way this could work is you submit the bid to the auctioneer, they look at all the bids, and a bid could just be a simple transaction that transfers Sol and then they take the highest bid and they submit that to the leader. Interesting thing to note here is like, you have builder B and builder a, they both get bundles, but one of them is getting this private order flow from rpCs, which I've always found interesting because you wonder if my whole goal as a user is just to land transactions. I'm probably incentivized to send it to everyone because then you're guaranteed 100% coverage on block production. But let's say builder a has a bad reputation and has sandwiched specifically users coming from these rpCs, then you're likely not to send it to them anymore.
00:19:49.694 - 00:20:45.206, Speaker A: So, yeah, I mean, then you get into these interesting questions. It's like, do leaders start declaring like, oh, we're not going to accept blocks from builder b or builder a because they're known to be malicious and do toxic mev. So you have all these other interesting questions that arise when you start looking at this. Yeah, I mean, malicious is like, let's say this flow has some slippage associated with their transactions and builder a just always fills them at the worst price possible. I think really, like the largest questions for me are, what are the trust assumptions here? I think you're trusting the auctioneer to not leak any data. So this is a silent bid auction. It's supposed to be silent.
00:20:45.206 - 00:21:16.544, Speaker A: No one's supposed to see bids. So you're kind of trusting the auctioneer not to leak to builder a. Hey, builder B submitted this bid. You want to crank it up or even lie to builder? Like pretend like they're colluding and be like, hey, this is the bid, but it's not even the bid, and have them crank up the bid. So, like, it's, yeah, I mean, I think those are things to think about. I think there's probably potential for this to be an AV's in its own right. And, yeah.
00:21:16.544 - 00:21:58.226, Speaker A: So the value flow in that architecture would probably look something like this transaction. Originators bid on inclusion or for inclusion. Those bids go to the builder. The builder captures the spread between that and the bid. They submit to the leader. The leader then takes some commission, probably pays a fee to the auctioneer, and then gives the rest to their stakers or delegators. So I think this is interesting because now you have leaders, competing leaders or validators naturally compete on staking APY when they're trying to get outside delegations.
00:21:58.226 - 00:22:36.954, Speaker A: So you have now this competition on, or more competition on giving higher yields to users. Yeah. So we've outsourced block building. I think that's a pro. I think jit auctions are interesting because they're easier to price because, you know, the state of the world as things are happening, as opposed to paying ahead of time. But I think the best code is also no code. So with more code, more bugs, the architecture is a little more complicated, so things could be brittle.
00:22:36.954 - 00:23:25.968, Speaker A: Study the relayer exploit. And we've introduced some trust assumptions. We're trusting that validators don't steal the MEV and auctioneers don't leak data. More questions. What's the best type of auction? I think that's up for debate. What do we do with priority fees? So priority fees are handled in consensus by Solana. What do we do about it? Since we're getting out of band fees now, do we just delete that code? And then does it even make sense to think about these Solana fee markets that has been proposed? We could basically implement like, custom fee markets at the builder level.
00:23:25.968 - 00:24:07.900, Speaker A: They can implement their own fee markets depending on how they decide to price things, which I think it's pretty interesting because now you can iterate fast on these things rather than having to do like a break and change update to 2000 nodes. So naturally, I think supposed to be aot. So ahead of time block options. Basically you're buying blocks in advance. I guess for this discussion, let's just assume, like, Solana has two day epochs. An epoch is just a, it's just a collection of slots. So let's just assume the way the auction runs.
00:24:07.900 - 00:24:42.920, Speaker A: It's at the beginning of the epoch, you buy all the slots you want to buy for the next two days. So, yeah, at the beginning of the epoch, you buy the slots you want to propose. Blocks for the epoch rolls over, and the auctioneer writes on chain what the leader schedule is. Solana has a notion of a leader schedule. Right now it's precomputed every epoch. Now you just have a derivative of that for this sort of system. Yeah.
00:24:42.920 - 00:25:30.864, Speaker A: So there's two ways for like the actual block signatures to happen. Like you could basically have builders sign the transactions. And the way that would work is validators would have to gossip out. Like this is the key pair that's going to sign the shreds we were talking about earlier and gossip that out to the network. Or the other way is you just trust that the validator signs the transactions and both have different trade offs and implications. All right, so I forgot builder B here, but let's pretend it's there. So what this looks like is you basically submit bid with the list of slots you want to submit for the auction escrower or the auctioneer becomes an escrower once the epoch starts.
00:25:30.864 - 00:26:37.084, Speaker A: I think an interesting question here is how do you price consecutive slots versus sparse slots? So if I'm bidding like there's probably alpha and having ten slots in a row as opposed to 100 slots that are not contiguous, how do you price that? But also how do you make that civil resistant? So you have multiple bidders who are actually the same entity that bid on these separate slots. From the validator's perspective you're just selling slots that are non contiguous to people. But from the entity's perspective they now have ten consecutive slots. I think the other thing that needs to be thought about here is the part about, see right here, the builder is submitting the transactions to the leader. That implies that the leader is going to be signing the block. So I think that's a little easier in terms of reasoning about the architecture. You don't need to do this gossip, this thing where you gossip about who the signer is depending on who the builder is.
00:26:37.084 - 00:27:17.218, Speaker A: But it also means you're putting a trust assumption on the validator. You're assuming that the validator is going to sign the transactions and not withhold them. If they don't, it's hard to prove that the builder actually sent them the transactions. So how do you slash anyone? In that case? I think that's also another research question. Let's say we remove that requirement where now the builders actually just signed the transactions. I think I kind of like this architecture. I do think it's a little difficult still when you have a heterogeneous builder set for the same validator within the same epoch.
00:27:17.218 - 00:27:59.854, Speaker A: So imagine like builder a bought slots zero through ten for this epoch and builder B bought slots ten through 20. Now the validator basically needs to gossip out at the right time, who the builder, what the signer for the block is going to be. So at slot ten, it needs to gossip out immediately. Like, hey, builder b is now the signer. So you can imagine like there could be bugs there where there's like a timing issue. They don't gossip it out in time, it doesn't propagate through the network and then all the blocks from builder V get rejected for some time. Hoodie slash, how does that work? It does make the, I think it makes the escrowing easy.
00:27:59.854 - 00:28:52.144, Speaker A: So basically the escrow could hold the bids per slots and then look on chain. Did the validator actually gossip out who the signer is for these blocks? Did it gossip about the correct signer? For example, like slot two? Did it gossip out that builder A is the signer for this block? If it did, then release those funds and the onus is on builder a to now broadcast the transaction out to the network. And there's no, like, there's not like this withholding problem there. So pros and cons, I think once again we've decoupled block building, which I think is important. I think your infra needs to be less latency sensitive here than just in time. Like just in time, just naturally. It's a real time system, so you need to be a little more latency sensitive.
00:28:52.144 - 00:29:37.454, Speaker A: Packets getting dropped is not good. Over here you have this auction that runs two days prior, which less of a latency burden. I think it's harder to price, though. You're pricing two days in advance. Maybe you have builders that have good statistical or predictive models. They can kind of like predict based on news and like what the market looks like, what the MEV flow might look like based on what it looked like the past two days or whatever they decide, but it just makes it harder. And I think it increases the barrier to entry where you have well, capitalized builders just subsidizing basically like bidding up to a high price where they're actually taking a loss because they can afford to until the time comes to actually bid for the blocks that they know are going to be profitable.
00:29:37.454 - 00:30:36.124, Speaker A: So decouplet, I think so. But I think you have to agree that we need to decouple block building before, like, moving on to complicated architectures. So I think one of my favorite pros, aside from like more rewards, more specialized entities running block builders, I think is the fast that you can, the fact that you can iterate and experiment with different types of auctions and pricing mechanisms at the builder. So you really just need to ship code to one node, as opposed to having to ship code to 2000 nodes on Solana today. But you add trust assumptions. There's some issues with censorship potentially. Let's say you have only three builders on the network and all three of them sensor transactions coming out of a specific jurisdiction or a specific dap.
00:30:36.124 - 00:31:10.388, Speaker A: How do you avoid that? I think that's important. So have we arrived at France? Not yet. I think soon. Really, the goal of this talk was to get the gears turning for all the researchers in this space, for everybody in here. I think it's important to think about this, especially as your network starts to grow and that amount of mev starts to grow. But we have to keep in mind that we're building this for end users and real users. What do they care about? They don't care about complex architectures.
00:31:10.388 - 00:31:35.658, Speaker A: They just want to send a transaction on, adapt and have it confirm, like within a second. They want good price execution and they want uncensored access to block space. So really, I think we have to work backwards from those requirements and build architecture such that those requirements are fulfilled. Thank you. My name is Zano. I'll be around here. Feel free to come and talk to me.
00:31:35.658 - 00:31:35.954, Speaker A: Thank you.
