00:00:10.200 - 00:01:07.244, Speaker A: Hey everyone. My name is Connor. I'm part of the or. I'm a contributor to the Roll Kit project at Celestial Labs. And this talk is about a sort of kind of mev which we call profitable censorship mev, which is a way for the validators of a data availability layer to extract mev from sovereign roll ups by censoring, delaying or otherwise messing with the sequencers of the sovereign roll ups. And for those of you who aren't too familiar with sovereign roll ups, they're a little bit different from the settled roll ups you see as L two S in the ethereum world. Because rather than having a settlement contract, sovereign roll ups have their own nodes which connect to some data availability layer such as Celestia.
00:01:07.244 - 00:02:12.310, Speaker A: And they scrape roll up blocks out of the data availability layer blocks and reach consensus by applying a fork choice rule to the blocks in the data availability layer. So we can start by talking about the simplest kind of sovereign roll up, which is a based roll up or a pure fork choice roll up, as we called it before that term came out. And these are the simplest kind because they don't utilize any sort of sequence or sequencer scheme. And instead what happens is the blocks just get posted to the built by anyone permissionlessly out of transactions from the rollups mempool sent to the DA layer. And then the nodes just reach consensus by applying some kind of fork choice rule. And the fork choice rules for base roll ups can be expressive. There's many possibilities for how you might want to do that.
00:02:12.310 - 00:03:31.432, Speaker A: Some of the ideas that we've heard thrown around or come up with are first ordered, which is just the simplest way, which is just defer to the ordering within the data availability layer. You could do gas burned, so you could select the roll up block at a certain height that burns the most gas. So you could have a kind of ultrasound money roll up, or you could do one where you select the block that returns the most mev to AMM LPs or something. So here's a diagram of the gas based fork choice rule roll up, where you can see a bunch of different blocks. Go into the data availability layer blocks and the nodes of the roll up look at them and then can construct a chain out of the valid block at the specified height. That wins the fork choice rule. And it seems really cool and it seems awesome and that you can do all these great cool things with it until you remember that there are these guys, the DA layer validators, who ultimately get the final say over the ordering and what goes into the DA layer blocks.
00:03:31.432 - 00:04:50.020, Speaker A: So what they can do is they can say maybe they don't like the block that wins the fork choice rule. Maybe there's a different block that they like better because it gives them more profit or something, or they have more control of the ordering. And so you may have come up with some cool four choice rule that makes your roll up interesting, but unfortunately it's worthless. The real four choice rule at the end of the day is just highest bribe. And this is of course assuming that the DA layer is sort of like Celestia in its current form, which is just a minimally modified tendermint chain without any fancy censorship resistance features such as threshold encryption like Furvio or Penumbra's Way or Shutter Network or anything like that. Or like a shared block builder system like the multiplicity scheme proposed by Duality. But we were sort of challenged to think of ways to not leak MVV to the base layer and come up with alternative sequencer schemes besides just base roll ups.
00:04:50.020 - 00:06:02.190, Speaker A: And one reason is so that the roll ups can keep their own mev. And the other reason is so that you could provide a faster than L One user experience with pre confirmations or soft confirmations. And in this talk we're going to focus on the first, the former, which is just keeping mev off the base layer, keeping the mev sovereign, redirecting it to the roll ups themselves. And even though pre confirmations, soft confirmations and going faster than layer one is an interesting topic, we'll save that for another day. So the simplest way to keep mev sovereign and off of the DA layer is to just use a centralized sequencer for the roll up. And it's pretty easy and simple to understand how a centralized sequencer works. You just choose some privileged signer and you just reject all the blocks from the roll up that aren't signed by that signer and you accept that privilege sequencer's blocks as the canonical blocks of the roll up.
00:06:02.190 - 00:07:00.080, Speaker A: And in the simplest possible scheme, as I've described so far, you trust that sequencer for censorship, resistance and liveness. So you get safety from the DA layer. But censorship, resistance and liveness, you're completely trusting this centralized sequencer. And there are ways that have been proposed, a lot of them come from the L two S and the ethereum world for how a roll up, even with a centralized sequencer, can inherit censorship, resistance and liveness from its L one. And we can go into one intuitive way that we talk about a lot and get to the point here. So this is one really intuitive way that the Role Kit team has talked about a lot. We call them hostage blocks.
00:07:00.080 - 00:07:52.530, Speaker A: And it's like just a basic scheme where a user can send a transaction directly to the DA layer and sort of send it past the sequencer. And then every couple sequencer blocks you have what we call hostage block. And the hostage block has to include all of the transactions that got sent past the sequencer just to the DA layer. And there's a couple of different ways you could implement this. So one way is to synchronize the hostage blocks with sequencer blocks. So you would say every N sequencer blocks, you have to have a hostage block come after that. And if you do it this way it is like a forced Transaction Inclusion scheme basically.
00:07:52.530 - 00:09:27.440, Speaker A: And the other way you can do it is to synchronize the hostage blocks not with the roll up blocks but with the DA layer blocks. And so this way we've taken to calling it Base Layer Fallback and they have slightly different properties. So if you do the Force Transaction Inclusion Scheme, you do get censorship resistance from the base layer, but you don't get liveness from the base layer because if the sequencer stops making blocks, the roll up halts. And the other way with the Base layer fallback scheme, even if the sequencer shuts down, the roll up continues because there will always be hostage blocks synchronized by the DA layer. And when you do this, there become ways that the DA layer can once again mess with the roll up and get some potentially profit by censoring reordering and things like that. With the Force Transaction Inclusion Scheme, if you simply accept the ordering of the user's transactions in the data availability layer as the ordering of as the execution order, it's trivial to understand how the DA layer validators can get mev from that because they control the ordering. But you could also use Verifiable sequencing rules and get rid of that and reduce it to a problem of inclusion.
00:09:27.440 - 00:10:59.710, Speaker A: Also, when you add a second way for users to get their transactions sequenced, you may actually end up with like a competitive dynamic where one of the ways which is controlled by the DA Validators costs less than going through the sequencers or vice versa or one of them is subsidized some way or something like that. Also, sometimes one way is more expensive than the other. Celestia has a ton of capacity, so it should be pretty cheap to send transactions directly to the DA layer on there. But sometimes, depending on what Blob commitment scheme you're using, two small Blobs cost more than one big Blob and so you may still have cost saving benefits to the user by batching it through the sequencer. And if you do the Base Layer fallback scheme, all those previous strategies of getting mev from the Force Transaction Inclusion Way carry over, but also now they can censor delay and front run the sequencer entirely. So quite a bit more mev strategies become viable when you choose to inherit liveness as well as censorship resistance. So it sure seems like if your roll up wants to inherit censorship resistance and or liveness from the base layer, there's just no way to avoid having some mev leak down.
00:10:59.710 - 00:12:17.764, Speaker A: And if you replace the centralized sequencer with some kind of decentralized sequencer scheme, there are definitely ways that you can have better censorship resistance and liveness than just trusting a centralized entity for that. But fundamentally you cannot inherit those traits from the DA layer. Nevertheless, it is interesting to think about different decentralized sequencer schemes and all the different ways that the data availability layer validators can mess with these different schemes and profit by doing so. Some of the various schemes that we talk about and look into a lot are having BFT voting on layer two, having so called stake based fork choice rules and then two different kinds of round robin schemes. One where you have Halts and one where you have Skips. And I'll get into more about what that means in a minute. BFT voting is an interesting one and this is where you basically have full on consensus on layer two.
00:12:17.764 - 00:13:26.140, Speaker A: So you have sequencers for the roll ups that are a lot like validators of a blockchain and you might want to use something like tendermint for this. And it's an alternative to a centralized sequencer. The cost to create a liveness failure in this scheme is equal to the cost of getting one third of the stake and if that liveness is compromised, the roll up halts. Unless of course you are using hostage blocks and you inherit those things from the DA layer and leak some IVV. But you may have heard that one of the major selling points of sovereign roll ups is to not need to pay for a validator set or to not go through the hassle of setting up a validator set. And so that is one major concession you make if you want to set up your roll up this way is that it does require provisioning infrastructure and getting stakers and setting up validators and all of that. And what do you even get versus just being an app chain versus being an app roll up? Well, you have to pay for infrastructure and then you also have to pay for DA.
00:13:26.140 - 00:14:36.812, Speaker A: And what you get is trust, minimized interoperability with other things on that DA layer as well as good light client support. And some people may decide to do this for their roll ups. And then another scheme that we can talk about is stake based fork choice rules. And these are talked about a little bit less, but it's sort of like if you were to use Celestia as a finality gadget for some liveness favoring fork choice rule, sort of like how Gasper works in Ethereum. And so what's cool about this is you could have there always be some block proposer who is able to propose blocks so you don't have liveness failures. And one way you could implement it is you could do like a stake weighted dice roll where you use a VRF or Randow or some other kind of random beacon based on the proposer stake to decide who wins a certain roll up block production slot. But it's another four choice rule.
00:14:36.812 - 00:15:59.448, Speaker A: So just like the base roll up we talked about at the beginning, the Celestia validators ultimately get the final say and they can shoot down forks where they don't make profit and pick winners in this scheme and ultimately gain quite a bit of control over the mev. If you don't want to have to do the full validator BFT consensus scheme, you can just simply take something like the round robin out of tendermint and not have voting, but you can still have rotation and like a leader schedule and all the leader selection schemes that you see in BFT. Chains like Tendermint and Solana have ways to recover from a validator missing their slot. And if you get rid of those recovery mechanisms and you just wait for them to show up to their slot so you have the roll up just stop until the scheduled proposer shows up to their slot. You do not leak any mev. The roll up keeps all of its mev, but at a horrible cost because now you have this terrible system where one proposer can halt the chain by not showing up. And the only way to recover is to hard fork.
00:15:59.448 - 00:17:35.432, Speaker A: So pretty bad, but it preserves all the mev, keeps it entirely sovereign. So what if you do add a way to skip people who miss their slot? Basically you would then have different forks being built where if somebody misses their slot, the next person builds at that height for them, but then later they could show up to their slot and then build at that height anyway. And then you would have two forks and ultimately you would have to go with suppose multiple of those different chain segments land on the DA layer. The nodes would have to apply a fork choice rule to the different chain segments and it once again becomes a stake based fork choice rule that the celestial validators can mess with. So if you have a recovery mechanism for missed slots in a leader schedule, that is something that the DA layer validators can exploit, potentially gain control over ordering and profit from. And one possible mitigation we've talked about is adding what we call a halting period where if a proposer misses their slot, you wait one DA block. So that way if they miss the slot because they got censored, at least a different DA proposer gets to be there for the recovery.
00:17:35.432 - 00:19:14.910, Speaker A: So the guy who censored them might not be the one who gets to profit from that. If you want liveness you're going to leak some mev, or if you want to inherit liveness from the DA layer, you will leak some mev. So what are the mitigations and solutions to profitable censorship mev with software and roll ups? The mitigations are to sort of just accept it as inevitable and just use decentralized sequencer schemes with high economic security such as your own BFT Consensus. Or you could use a shared decentralized sequencer with its own token and high cost to create a liveness failure. You could use some sort of round robin scheme, which is what we are currently working on as part of Roll Kit, is a round robin leader schedule based protocol with different ways you can configure it. So you could do halts right now, the implementation does halt or halting period, or just let it leak mev. And if you're okay with that, which it's really not so bad, then we would just need to deal with the mev and have PBS or skip protocol or something on the DA layer so that it doesn't lead to gas wars and all kinds of problems like that.
00:19:14.910 - 00:20:06.990, Speaker A: And then ultimately, you can solve the problem entirely if you make the base layer much more censorship resistant. So if it turns out that these threshold encryption schemes work really well, we could add those to the DA layer and you could have your pay for Blob transactions be private, or, like, at least you get guaranteed inclusion before they're ordered. And also, maybe these shared builder schemes like Multiplicity can allow all the validators in the DA layer to participate in block building instead of just having one proposer monopolize the whole thing. So, yeah, just interesting, interesting problem space. I thought I'd share and that's about it. Thank you.
