00:00:02.320 - 00:00:50.176, Speaker A: Welcome back to video two of our point in time analysis tutorial. This is the part where we will do some weightlifting workout with SQL queries. If you need more context on why and what queries we are writing, please go watch the first video linked on the screen. So writing our query for decentralization metrics, let's first copy these metrics that we want to get and then go to dune.com, start a new query. Then I'm gonna go to the Dune SQL engine, start commenting with backslash star and then close it off. Metrics we want the number of signers or owners.
00:00:50.176 - 00:02:01.706, Speaker A: We want to get the threshold and threshold ratio and why not get the day since creation? And then for funsies let's also just list all the signers of this particular safe. What are the steps that we need to perform to get these metrics? Number one, we need to get all the safe, all safe addresses we care about. So here we define it as safes created in the past six month. After that we need to find the number of signers at the creation stage. So when it was set up, when it was set up, we also need to track signers added and also track signers removed right through events. Then just do some sort of data, data manipulation to get the metrics, to get all the safe addresses we care about. So safe that we're creating.
00:02:01.706 - 00:02:33.566, Speaker A: The past six months we have this helper query that we can use. So here in this query, let me explain a little bit. We tried to look at the call setup tables for various version of the safe contractor that we've got save version 0.01.0 and then we've got 1.0.0. You get a point. So each of these tables containing the function call datas for setting up the safe. So that's why we're doing a union all for all of these tables.
00:02:33.566 - 00:03:21.342, Speaker A: We're also filtering for call success equals to true to make sure that indeed the safe was set up. And in each of these tables we want to get the time that it was created. Where is the safe created? So what is the contract address for the safe? There's an array of the list of owners that were set up for the safe. So we're just doing the cardinality which is to measure the length of the array to see how many owners at the time of creation. Threshold as it implies is the how many signers, how many owners need to sign or approve this transaction before it can go through. Then the transaction hash where the safe was set up. Then the actual safe owners with the actual safe signers.
00:03:21.342 - 00:03:50.130, Speaker A: So then we do a union, all of all these tables. Then we further process these data. We get the actual safe address. Then we get the number of owners here at creation, the threshold, and then the actual owner's array at the time of creation here. So if you click on it, it expands into multiple addresses. If there are multiple. So this is a query that we can refer back and leverage on.
00:03:50.130 - 00:04:30.214, Speaker A: Query gives us all the safe addresses that are created on the Ethereum main network. So taking this query id, we can refer to the data that we see here in a different query. So we can query a query. Let's see what we're doing. I'm going to start a CTE and call it setup. So with setup as what am I doing? So doing a select from query, underscore the query id is how you can refer to it. And here we want the creation time because we did say that we want to know how many days has it been since it was created.
00:04:30.214 - 00:05:10.108, Speaker A: And next we want the safe address and we're just going to call it address here. Then we want this threshold number of signers a transaction needs to have before you can go through. And we want to actually have separate owners because we want to be able to count the owners later. We later need to be able to account for owners added and owners removed. So we need to be able to break up this array into separate rows. So in order to do that, we need to un nest this owners array. Right.
00:05:10.108 - 00:05:51.640, Speaker A: So the syntax to do that is you do a cross join unnest. So let me show you what it means. So we're doing a cross join on nest of the owners array that we saw on this side. So this particular column, then we need to say as create a table for it and make a table column name for it. So we're calling this unnestedowners. Okay. And then we can refer to it on the other side as U, which is the table and the column, and as owner.
00:05:51.640 - 00:06:33.942, Speaker A: Awesome. Here we are going to apply our filter saves created in the past six months. So we're gonna say the creation time is equal to now minus interval six month. Okay, just to test out that we have all we need so we can do a select star from setup and see how it goes. Okay, we have our QA results. So let's quickly click through the creation time, see if it makes sense. Creation time past six month.
00:06:33.942 - 00:06:54.280, Speaker A: 8910, 1112. Yep, it makes sense. Let's see. Let's take this address because threshold is two, must have more than one owners yep, it has two owners and same creation time. Same address, but two owners. Okay, cool. Qa tag passes, let's move on.
00:06:54.280 - 00:07:34.130, Speaker A: Next part, we need to look at the owner at events. So here we need to find the tables for ad owner events for safe. Safe was previously known as noticesafe. Find the project associated with it and then we are only caring about the Ethereum mainnet and we want to look at all these versions of save. Let's take version 0.1.0. We have the added owner events. So select from and we can see what are the columns that we need.
00:07:34.130 - 00:08:10.010, Speaker A: We want to have the event block time as the block time. And then we also want to have the contract address as our safe address or address. Then we want to have the owner that were added in this event. And just to make things run faster, we want to make sure that we are only looking at data in the past six months. So I'm going to copy this over here. Then I'm going to only look at the safe that's relevant for us. We already got the safe address that are relevant for us here.
00:08:10.010 - 00:08:56.200, Speaker A: We're going to say where contract address is in select address from setup. Select address from setup. Actually, let's do some optimization. Let's try where it exists. So we are going to do select one from the setup where added owner. So ao ao dot contract address is equal to setup address. Let's do that.
00:08:56.200 - 00:09:32.190, Speaker A: So just a quick word on this. Where exists syntax. What we're doing here is the same thing as where we were doing before. So where we were doing like where in, we were just trying to filter out the contract address that already matched up with the safe address that were created in the past six months. But as we saw, there were a lot of contract address we're trying to match. So in this case, doing a where exists syntax could be faster than doing a we're in syntax. So that's why we're doing it.
00:09:32.190 - 00:10:12.850, Speaker A: Moving on to other tables the same way we did a union all of, all different safe contract versions here. We also need to union all the tables that are relevant. What we need to do is go back to gnosis safe and make sure that we get all the 1.01.11, .11 select from, oops, from. And then in this case it's the same thing. So we can just copy this here and then we are going to do this.
00:10:12.850 - 00:10:59.096, Speaker A: Okay, same thing. Going to do the union all actually, I'm going to just copy this for here and replace this with this union 1.1 and then doing the same thing again. But this time going to just change one. One. Let's see how many other do I have? Oh, I'm done. Right then actually we need to union all the setup data that we were grabbing.
00:10:59.096 - 00:11:29.776, Speaker A: Why? Because setup is the first creation is the first ad owner events. So the original owners that we can get from the set of events. So we're going to do a union all of select from setup. And what are the columns that we need? We need the creation time as block time. We need the address and we need the owner. All right. Now we are done with adding the owners.
00:11:29.776 - 00:12:11.972, Speaker A: We need to grab remove owners events. So let's name this remove owner as we just do the same thing. So looking at here, if we filter for the events, we would have the remove owner events, right. So we are going to do select from and we want to have this remove owner event. And. And what we're going to do is we get the event block time as the block time. And we want to get the contract address as our address.
00:12:11.972 - 00:12:57.072, Speaker A: And then we want to grab the owner that were removed. Same thing here. We want to get the only the events emitted in the past six months. And we want to make sure that the contract address where the safe addresses we're looking at are the subset of safes that we care about. So that is for the first version 0.1.0. And then we are going to do union all like we did above. So here we need to do 10 zero ro and then same fields that we're trying to grab.
00:12:57.072 - 00:13:38.766, Speaker A: And then we will do a union all but on version 1.1.0. And then we are going to do another one which is. Which is 1.1.1. Right. Let's see if we have anything else. Okay. Actually made a mistake because there is another version, one 3.0
00:13:38.766 - 00:14:05.990, Speaker A: which I forgot to add. So we're gonna circle back there and do that now. Okay, so this would be. We need this one v one 30. Yes. So 11130 a zero. Okay, awesome.
00:14:05.990 - 00:14:33.730, Speaker A: Same vein of thought. We are done with 111 and now we just need one 30. So here we need the remove owner event for v one three event and. Oops. Event. And where's our removal event? Okay. One v one 3.0.
00:14:33.730 - 00:15:07.270, Speaker A: Awesome. We are good there. Next step is we need to join together the owners that are added and the owners that were removed. What we need to do is select from owner. And then we're going to do a left out join of remove owner. Because we also need these threshold information for from when the safe was set up. So we also need to join forces with the setup table.
00:15:07.270 - 00:15:35.660, Speaker A: So we are going to do set up left outer joins the same as last joint. So I'm gonna just do that. Remove the outer. Okay, so what are we doing it on? So we're joining and a and r on a dot. So we need to make sure the safe address are the same. Right. So the addresses match and the owners are matching.
00:15:35.660 - 00:16:05.354, Speaker A: Because when you're removing, you're removing the owner that were added in the beginning. Right. So a dot owner is our dot owner. And also you need to make sure that the time that was removed is after it was added. And a dot block time is less than r block time. Same thing. Need to make sure the address match with the ad owner address.
00:16:05.354 - 00:16:40.346, Speaker A: Okay. So the important thing, how do we logically remove the owners? So when we do a left joint, right, this is what we can do. So where are that owner is? No, what does that mean? We want to know what owners that were added were still left. Right. So if the owner that were added were left, that means when we do a left join between the add owner table and the remove owner table, the remove owners owner field would be null. Right. Because the owner that were added has not been removed.
00:16:40.346 - 00:17:22.330, Speaker A: So that's why we are filtering for the owners that hasn't been removed. That's why we are doing where our dot owner. So the remove side of things has not been done yet. Okay, so that's what we're doing. Let's get the field part right. So when we want to get the address safe address and then we want to get when was the save created. So creation time, we also want to get the threshold and then we want to get the day since creation so we can apply the date diff function of the day.
00:17:22.330 - 00:17:47.446, Speaker A: So creation time, the difference between when it was created and now as day since creation. Just for funsies. Let's see. And then next part, we want to be able to get threshold ratio. Let's come back to that. So let's first get the owners that are still here. So all the signers that are still left.
00:17:47.446 - 00:18:42.706, Speaker A: The way we can do that is we need to first find the owners that are still existing. So a dot owners, because the way we were kind of like exploding an array into multiple rows, we want to make sure we only grab the distinct owners and then we want to shrink the exploded rows back into an array. So we are aggregating the roast into an array. So we are doing a array agg function of these owners as our signers. Once we got that, then we can also get a count of the owners as our number of owners. So distinct a dot owners as num owners. And then once we got that, we can work on the threshold ratio.
00:18:42.706 - 00:19:32.808, Speaker A: So we could do this divided by this and then we need the threshold. Actually, we need to do one more thing because both threshold and num owners are integer. So in Doom sequel or Trino SQL, when you do this division, it would just round it up for you directly. But we want an actual decimal ratio. The way we can force the division to return a decimal to us is cast one of the numbers into a non integer number. So I'm going to cast the threshold as a double because we're doing all these aggregation, we need to aggregate aggregate per save in a goodbye. So we got one, two, three.
00:19:32.808 - 00:20:06.192, Speaker A: Actually, yeah, we got 1234 and we want to order by the creation time. Okay, let's get this going. Okay, it looks like we have some results. All I did was I clicked the expand and collapse button, a new UI feature that we have now. Okay, we have our results. And that's it for our first query in decentralization stats. Next video, we're gonna tackle usage and activeness.
00:20:06.192 - 00:20:07.160, Speaker A: See you in the next video.
