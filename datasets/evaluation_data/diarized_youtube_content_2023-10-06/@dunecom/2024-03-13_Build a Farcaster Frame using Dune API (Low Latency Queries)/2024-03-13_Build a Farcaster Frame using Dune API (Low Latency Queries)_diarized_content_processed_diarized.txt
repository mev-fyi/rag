00:00:00.960 - 00:00:33.536, Speaker A: What's up everyone? Andrew here. I'm going to walk you through how to build a dune user recommendation frame today using some of our newest API features. So this frame is actually pretty simple. We're using a query and it's going to recommend you people to follow based on your existing followers. So you can see right here, this is live on Warpcast. I click this and it shows me, okay, there's a reply guy maybe I could follow. There's someone who's deployed a lot of contracts, someone else who's Stan.
00:00:33.536 - 00:01:09.370, Speaker A: So someone else who's growing in followers. And then the Sameer person has the most number of on chain transactions. I can click show more, it'll show me four more different categories. And you can see it runs in like about a second or so, which if you've ever ran Dune queries, you're probably like, wait a minute, I know. Dune queries take at least five to 10 seconds to kind of run and return on the API. How is he getting it so quickly? So the repo is right here and I'm using frog. Thank you to the folks over at paradigm and VM Tom Jake for building out this great package.
00:01:09.370 - 00:01:56.028, Speaker A: But yeah, you can see that it's a pretty simple repo. It's basically their starter template. You have one endpoint, you kind of just define that. There's a button to see your followers and then there's a button for show more. And when those buttons are clicked it's going to go through here and get recommendations based off of the FID, the farcaster id of the user who interacted with the frame. So that takes you to the dune typescript file where you can see we have a short function get recommendations that calls the Dune API and I'm going to explain in a second, but it calls the Dune API filters for just the specific fade and then randomly selects four of the recommended users and then sends that back to the front end. And that's how you get this.
00:01:56.028 - 00:02:40.506, Speaker A: So let's dive into how exactly this works because I think it's not exactly intuitive. So if I go back to the top of the repo, I can click here. And this is the main query being used for this frame, right? So you can see that there's a FID and then like reply guys, very on chain, shadowy developers and there's kind of like ten recommended users per category per FID. Right, this is, this FID is the one that I'm filtering for in this to get recommendations file. Right. So what's happening here? Because I'm clearly not rerunning the query. You can see that the run takes about 18 seconds.
00:02:40.506 - 00:04:00.244, Speaker A: Right? So what's happening here is I'm querying for just the latest results of a specific query id, right? So the query id is up here in the corner. You can also click this button if you want to easily see how to poll, you know, for a specific query id. And what's happening here is I'm getting the latest results and what I'm doing on the results is I'm filtering for just where query fid equals the fid that's being passed it, right? So when I'm running a filter, it's just filtering on the results of the query, it's not rerunning the query. So therefore the filter actually runs pretty fast in like 20 to 30 milliseconds. And I just have to schedule the query to refresh maybe once a day you can schedule up to about 15 minutes as the smallest interval, right? So like are you going to use this to get like latest token balances of a user? Like probably not, but for kind of like high level stuff or more advanced data work such as recommendations that combine on chain and off chain data that you can just run in a 15 minutes interval, then dune is kind of the perfect use case for this. So you can filter for a specific row, you could filter for many rows, obviously. And we've also recently added pagination.
00:04:00.244 - 00:04:27.704, Speaker A: So if you wanted to like show all trades of a user, like top ten trades and then paginate through it, that's something we've added as well recently. Right. So you can see it, this is in our new API docs. Filtering is explained much more in detail here. You can do where you can do and, or you can do in, you can do intervals. It's kind of basically like writing some basic SQL within an API call. And yeah, pagination is also defined here.
00:04:27.704 - 00:04:59.440, Speaker A: Works how you'd expect where it tells you where the next offset is. So if you have like 100,000 rows or more, then like obviously you probably want to use this when you're actually developing. So all the code is open source link is going to be in the description. Just go check it out. Just go fork this repo kind of play around with it, especially if you're interested in building frames. I'm just going to quickly walk through how to set this up locally so you can go and develop with this yourself. I'm going to go and click here and I like to use GitHub desktop.
00:04:59.440 - 00:05:59.870, Speaker A: And what I'll do is I'm just going to add a repository, I'm going to clone it into here and then I'm going to open up this repository in visual studio code. And there's a few things I'm going to do to get set up. The first is I'm going to copy this and file rename it and I'm going to go and create an API key. So I'm going to go here settings API, I'm going to create an API, just call it test frames and then I'm going to save it in the M file here. So we're just going to paste this in and you should go get your own narcy. I'm just going to use the docs key for testing out and what you're going to want to do is you're going to want to let me just move this over a little. You're going to want to NPm install global frog.
00:05:59.870 - 00:06:39.438, Speaker A: So not surprisingly run into some install errors. Happens all the time. You just kind of have to debug it. So I had an issue with this node, jip file or package and after kind of playing around a bit, it turns out that this is the command that's going to fix it, installing it globally. So I ran through that, it installed correctly. Now if you run into issues then you should just google around, ask chatgpt for help, but hopefully that takes care of it for you. Now I can just do NPm run dev.
00:06:39.438 - 00:07:30.360, Speaker A: It's going to spin up a local host environment here. I can click into this, it's going to open frame dev tools. And this is amazing actually as a tool it shows you the frame, it shows you the requests being made, the methods, size and whatnot. So I can just click here right now and you'll see it quickly. Pulled this up and I can see the exact post request or I can move to an earlier step if I wanted. And if I look into here you can see that it loaded someone or I clicked the followers button. It's running the filter on followers for my FiD which is 16, five, two, two and frog is just a framework that was created by the folks over at paradigm and vmware.
00:07:30.360 - 00:08:12.050, Speaker A: And we're also going to want to just NPm install and get all the packages required for this repo. And you can see this in the index file here. Or if I look through here I have something saying console log run filter, get the ids. And in here I console log the recs recommendations. I just take the first row right? And so that gets me this very on chain. Ten recommendations, same channels, ten recommendations, et cetera, et cetera. And then I take the random keys and I just log that out here and boom, these were the four categories and values.
00:08:12.050 - 00:08:30.970, Speaker A: Just kind of do some react magic and you get this nice output here. So I'm excited to see what you guys build. You know, please send me or tag me in anything that you've kind of built with our API. And I'm happy to give feedback, help out, share it along, and have a good day.
