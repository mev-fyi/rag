00:00:00.320 - 00:00:27.408, Speaker A: Welcome back everyone. It is day seven now. We are starting a new topic. We're now looking at liquidity providers. So liquidity providers are the ones who actually deposit the USDC and ETH into the pair so that people can swap through it. Obviously if there's not enough liquidity you run into all sorts of different issues. We're going to go over that for the next few days, but today we're just going to look at what is the liquidity added and removed over time.
00:00:27.408 - 00:00:34.740, Speaker A: For the USDC and ETH pair, there are a few functions you can use to use this and Jackie is going to walk you all through it.
00:00:35.160 - 00:01:22.116, Speaker B: Thank you, Andrew. To get the liquidity added, we look at the event mint table. We also left join on the transactions table because there's no information of the liquidity providers in the event mint table. By joining to the transactions table, we're able to grab the from field in the transactions and that would be the liquidity provider. Similarly, to get the liquidity removed, we are going to look at the event burn table. Then we would look at the transactions table once again to find the LP's that decided to remove the liquidity LP stand for liquidity provider. After that we are going to introduce a new concept which is how to generate a complete sequence of dates.
00:01:22.116 - 00:02:00.100, Speaker B: Because sometimes you would have a week where no activity has happened. But we would like to see that on our visualization. So that's why we need to generate a full sequence of week. After that we are ready to join on the pair created event table. And that is how we are going to find the token address for the two tokens that exist in this pair. After that we can use the tokens erctable to find the decimal for each of the two tokens in this pair. So we can find the actual raw amount of these tokens and then we are done.
00:02:00.100 - 00:02:56.220, Speaker B: All right, let's get into it. Let's start with our city and we're gonna first look at the mints, right? So we said that we need to look at the uniswap v two sdhe pair mint event table. So we're gonna do select from the mint event. Then we would need to get to the date and then we already know that we want to aggregate by the week. So we're going to do date trunk by the week and we are going to trunc the time. So event block time and then this is our week. And then we are going to grab the contract address for this particular pair which we will be using later.
00:02:56.220 - 00:03:29.948, Speaker B: And then we would also need to sum up the amount zero in amount one of the token here. Right. So first we need to cast the amount to be a double type because right now it's a var chart. And then after we cast, we need to apply the aggregate sum function to sum it up. We are gonna name this the total zero added. So apply the stream drill. But now to amount one.
00:03:29.948 - 00:04:41.890, Speaker B: Okay, now we are going to do a join on Ethereum dot transactions because we need to find the liquidity providers, right? So m equals the event transaction hash is equal to the transactions hash. So if we do that, then here we are able to grab the distinct from transaction from would be the liquidity providers because those are the ones who minted the LP tokens. So count of that is our unique mentors. And then we are going to filter for a particular contract address. So we have been doing USDC wrapped eth. That's what we are going to do as the default. Okay, so where and then group by one, two.
00:04:41.890 - 00:05:21.186, Speaker B: Now we are going to set up the burns table very, very similarly to the mints table that we are getting. But instead of the event mint, we are going to look for the event burnt. We're gonna alias that as b. Instead of joining on dot event transaction hash, we're gonna change it to b dot transaction hash. And here instead of added would be removed. Removed. Ah, I actually made a mistake here.
00:05:21.186 - 00:05:51.932, Speaker B: So here should be one. Here should also be one. Next up, we are going to combine both together. Okay, so select from LP Mint. Then we are going to do a full outer join. Why? Because we want information from both table. We had a lot of times done left join because we want to anchor the information on the main table.
00:05:51.932 - 00:06:21.580, Speaker B: But now we want information on both tables. So we do a full outer join. LP Burns, we're gonna do for that one, b for this one. And then what are we joining on? We are joining on the time the week equals to the week as well as the pair equals to the pair. Okay, now we have it set up. Let's grab the column that we need. Okay.
00:06:21.580 - 00:06:58.056, Speaker B: Because we're doing a full outer join, right. So some of the weeks information might exist in either one of the table. So we're gonna upload a coalesce function to make sure that if it does not exist in one table, it grabs from another table. So here we are going to do coalesce. Okay, so m week, b dot week, so yep. And as the week and then coalesce, we also want to grab the pair address as the pair. Okay, next up.
00:06:58.056 - 00:07:38.860, Speaker B: We want to grab the unique minters. And if there is none that week we're gonna fill it in with a zero. And then similarly unique burners. Zero as unique burners. And then we are going to do the total zero added and removed. And total one added and removed. So minted total zero added as total zero added.
00:07:38.860 - 00:08:30.500, Speaker B: Okay. And then we're going to do total one audit as total one audit. And then now we're going to do b dot, total zero removed, total zero removed. Similarly going to do total one removed and total one removed. Now we have joined the mints and burns together. So now this is the part where we are going to generate a complete weekly sequence. Because some weeks there might be no activity happen, but we still want to be able to visualize the non activity for that particular week.
00:08:30.500 - 00:09:04.000, Speaker B: We're going to do a CTE for this one. So weeks as what? So instead of this, we're going to start a nested CtE here. We're going to start a completely new CTE. So weeks sequence as. Okay, what are we doing here? So we're selecting sequence. So this is a sequence function we are using to generate a sequence of date. So it takes the parameter start and, and then it will take the incremental changes.
00:09:04.000 - 00:09:44.336, Speaker B: So what is our start? We want to start by the minimum of this LP combined week, the first week where we have some sort of lp activity for this particular pair. So we're going to do select and then we are going to do the minimum of the week. Right. And then just to be safe, we are going to cast this minimum of the week as a timestamp field. Okay, so from LP combined. Right. So that is our start.
00:09:44.336 - 00:10:11.280, Speaker B: And then what is our end and would be currently. So this would be the date trunk of the week. What is the current week? Current week would be now, right. As timestamp. Okay. And now we are ready to get the incremental going. How are we gonna generate this sequence? The in between should be seven days, right? There's seven days each week.
00:10:11.280 - 00:10:44.664, Speaker B: So we're gonna add seven days in between. That is our sequence and we are going to call our sequence week. To actually get the sequence going, we just need to actually unnecess it. Because when you call the sequence function, you're generating a sequence. We are going to do select from. Okay, so from weeks sequence. And then we're going to do a cross join on the unnest of the week.
00:10:44.664 - 00:11:15.180, Speaker B: When you're unnecessing something that looks like one, two with them becomes one with them becomes one, two. Like that. We're gonna select weeks Dot week. We're gonna select this particular new table that we created and the new column. Right. Okay cool. So that is how we generate a full sequence of the weeks without any gaps.
00:11:15.180 - 00:12:20.460, Speaker B: And now, now we are going to combine the weeks together, join it back on the LP combined. So LP combined weeks as select from. So first we're going to select from weeks WW and then we're going to left join LP combined, right. Because we want to anchor this part of the query to be on the weeks. So we're gonna select w Dot week and we're gonna select LP combined. Dot pair is one of the field. And then we would want the unique mentor, we would want the unique burner and then we would want the total zero added and the total one added and the total zero removed.
00:12:20.460 - 00:12:53.144, Speaker B: And the total one removed. The way we have to join this is on the LP combined week is equal to W week. Last up. We just need to adjust for the decimals. So LP combined weeks decimal. Okay. Select from Opdez combined weeks.
00:12:53.144 - 00:13:30.400, Speaker B: We are going to call this LPW. And then we are going to join on the factories pair created event table to get the token address so we can adjust for the decimal. So PC on PC pair is equal to LPW pair. Okay. And then we are going to join on the tokens that ERC 20 table to find the respective symbols and decimals. Right. So token zero is for the token zero.
00:13:30.400 - 00:14:19.706, Speaker B: And then we're going to have a second tokens ERC 20 table for the token one. So on TK zero contract address equals to Pctoken zero which we just grabbed by joining onto the factory pair created table. So we're gonna do the same trail but this time on token one and token one. Great. Okay so we got our table set up. We are going to get the needed information. So first we are going to get the week and then we're going to get the pair address and then we're going to get the but sometimes symbol may not exist.
00:14:19.706 - 00:14:50.492, Speaker B: So we are going to apply coalesce. If it exists then we take it. And if it does not exist we'll take the token address instead of the token symbol as token zero. Similarly tk one symbol, if the symbol exists then we'll take it. Otherwise we will not take it. That should be a zero as token one. Okay.
00:14:50.492 - 00:15:23.148, Speaker B: And then we're gonna get the unique minters. And then we are going to multiply the unique burners. This is really to just visualize it better. Later on. So we're just calling the mentors as like plus and burners as a minus. Now we're gonna adjust for the amount, right? So let's go with the total zero added. Okay, we are going to adjust by the decimal point.
00:15:23.148 - 00:15:46.940, Speaker B: It needs to be so divided by ten to the whatever decimal we find. But again, sometimes we cannot find the decimal. Then we're gonna just apply a default at. So we're gonna use coalesce function. And then if we can find the decimals then we use it. Else we're going to adjust it by the 18th decimal. And then this will be the total zero added.
00:15:46.940 - 00:16:38.420, Speaker B: And then for the total one added, we are going to do the same drill total one audit. And then so for the total zero remove, we are going to apply a minus one before so multiply by negative one because it's negative. And then this is removed. And then we are going to do the same thing on the total removed for token one and name it. Total one removed. Awesome. We are ready for the last step.
00:16:38.420 - 00:17:07.250, Speaker B: There's many, many, many weeks. So we want to just look at a particular time span. We're going to set up a query to do that. So select star from that where the week is greater than a particular timestamp. So we are going to start another parameter, start time. And then let's see. So making it a date field.
00:17:07.250 - 00:17:34.316, Speaker B: And then we're gonna do February. And let's run it. We have an error. Where is the error? Select mismatch input from express expecting missing a parentheses cast of that. So select. I don't think I need that. Let's try to select cast min weak.
00:17:34.316 - 00:17:47.684, Speaker B: Yep. Okay, so another error here. Unique mentors. Unique burners. Aha. Okay, it's because here I named it unique mentors forgot to change it. Okay, another error.
00:17:47.684 - 00:18:19.840, Speaker B: 78 total zero added cannot be resolved. Yep, because mistyped it. Total zero total one. Total zero total one. Alright, looks like it finished running. Let's create a bar chart. Let's first look at the LP's, right? We want to look at the minters and the burners and then we can enable them so that they stack on top of each other for each of the weeks.
00:18:19.840 - 00:18:45.910, Speaker B: Let's just name this mentors and burners. Minters and burners. Now we're going to look at the liquidity. We're going to look at the liquidity for token zero, token zero added. Token zero removed. Enable stacking. So tokens and zero liquidity perfect.
00:18:45.910 - 00:19:05.114, Speaker B: Then we are going to do token one perfect and we will do token one liquidity. That is the answer.
00:19:05.202 - 00:19:47.320, Speaker A: Thank you, Jackie. It's a great explanation. I think we all understand a little better now how liquidity is added and removed from pairs. For bonus points, you might want to look into how many liquidity providers are active versus passive managers of their positions. Meaning if they're adding in liquidity multiple times a week, or they only add or remove once every few months, you can add this as a group by layer on top of your chart. For tomorrow, we're going to look at what is the percent concentration of liquidity sources? Meaning is it one wallet providing 15% or 20% of the liquidity in the pool, or is it more evenly distributed? And you're going to do this for the USDC we've pair as well. See you tomorrow.
