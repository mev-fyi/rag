00:00:00.320 - 00:00:25.734, Speaker A: Welcome to day three of twelve days of Dune. So yesterday we said that today we're going to look at the source, but after evaluating that, core is actually going to be ramping up really hard quickly. So today instead of looking at the source, we're actually going to look at the routers. So we're going to look at the top routing paths that use USDC and wrapped ETH. And in particular we're only looking at Uniswap v two router two for this problem.
00:00:25.862 - 00:01:30.034, Speaker B: So just to quickly go over the logic, router zero two is essentially a smart contract that says, all right, if I want to swap between two currencies, what's the easiest way to swap between them? Because you might have a USDC ETH pair and then a USDC bitcoin pair. And if you don't have a bitcoin ETh pair, you can't really swap between them unless you have a router. So the router has a bunch of functions to do swaps, we're going to have to union them and then understand how the path parameter works within the router call. And then from there we're going to check for the sequence of swapping through the USDC ETH pair. Once we have that, we're going to do one last filter to get the first token and last token of the path and figure out which routing paths use USDC eth the most. Lastly, on top of that, we're also going to make it easy for you to find transaction examples for a certain routing path. And this is something that you're going to use or see a lot in dune for either finding like examples of transactions or addresses and really make it easier for your dashboard to be used.
00:01:30.034 - 00:01:41.738, Speaker B: And to do this, we're going to leverage the cool new query, a query feature in Dune SQL if you know what user generated views are. It's like that, but more powerful. Without further ado, I'm going to let Jackie walk you through the query.
00:01:41.874 - 00:02:12.604, Speaker A: So let's first get the token address for this particular USDC wrap teeth that we are looking at. But let's make it a little bit more dynamic. So let's do a CTE first and then we're gonna get the token zero and then the token one as well from the factory. So let's go find u swap b two one more time and let's find the factory. And then let's find the factory events. Pair created double checking. Yep, token zero.
00:02:12.604 - 00:02:47.062, Speaker A: Token one. Okay, cool. So from this and then where the pair is equal to a variable which we are going to create. And then I'm going to just grab the USDC wrapped ETH address pair as the default for this particular which we are going to call pair address. Great. Okay, cool. If we do this right now, all it does is to grab the two token pair address for two token address in this pair, which we already know, but this just makes it a little bit more flexible.
00:02:47.062 - 00:03:30.024, Speaker A: Okay, so next up we are going to grab all the swaps router table, which we are again going to put in a CTE. Okay, so what are we doing here? So we're going to uniswap v two and then we're looking at router number two. And then we want everything that is regarding swaps. Okay, so these are almost like 910 tables that we see here. So we're gonna union all of these table together and then we are only going to need the car transaction hash as well as the path. So this is what Andrew was mentioning about this. The pathfield tells you the path of the token.
00:03:30.024 - 00:03:58.480, Speaker A: If you went from bitcoin to like wrap teeth to USDC, like this would tell you the token included in it. Okay, so we are going to go back out here a little bit. Okay, so here, number one. Okay, cool. So then we're gonna do a union all and then I'm gonna do a select from and then number two. Okay. Number three.
00:03:58.480 - 00:04:30.810, Speaker A: Okay, so now you've basically got all the swap router call tables here and then unioning the call transaction hash and the path. We are good to go in terms of the router swaps, but just to check that it works, we can do limit ten, 100 to just double check. Let me also make this a little smaller here. Okay. Okay, so we have stuff looks fine. Okay. Okay, cool.
00:04:30.810 - 00:05:11.728, Speaker A: Next up that we're gonna get all the router two swaps that use USDC wrapped e in the path but not as a direct path. Okay, so we're going to do path, none direct. Okay, select from what is this? All router swaps. Okay, all router swaps which we are going to alias as us. Then where. Okay, so basically this path, if we look at it just to take a quick example, you can see that is it is an array and it can have more than two elements in it. So we're going to grab the cardinality of the path greater than two.
00:05:11.728 - 00:05:44.508, Speaker A: Because when it's only two tokens, that means it's like a direct swap. But when it's more than two tokens, that means it's a non direct swap of the coin. Right. So first we are going to do cardinality of the s path is greater than two. Awesome. Okay, and then next we are going to make sure, oops, two. Next we are going to make sure that the beginning token and the ending token of this path, either the USDC or the wrapped eth that we are looking at.
00:05:44.508 - 00:06:15.848, Speaker A: So what we're going to do is we're going to do an end and we're going to put the condition in a parentheses because we need this, whatever is inside of this parentheses to be satisfied. But inside of this parentheses we need an or condition, right. Because we want to match either the zero one token path as well as the ten token path. Right. But we need this to be an or inside of the end. So that's why we put a parenthesis here. Okay, so let's get going with this.
00:06:15.848 - 00:06:39.826, Speaker A: So we're going to use a function called contains sequence. So this checks for the array, which is a stop path. This checks if it contains a sequence inside of this array. So the order does matter here. We are going to also get the token. So this is why we grabbed the token address in the beginning. So we're going to do pair tokens here.
00:06:39.826 - 00:07:02.230, Speaker A: So we're going to call this p. Okay, so we're going to do p dot token zero. And we are going to do p token one. Great. And then this is ended already. Okay, so it's either zero, one or ten. So we're going to swap it to be 10 and.
00:07:02.230 - 00:07:42.720, Speaker A: Okay, so now we just need to get the fields that we need. So let's just get both of the token address from the token. And then we, the ultimate goal is we want to find out like what is the actual path. So the actual first token and the last token on this path. So how do we do this? We do path and then we get the position once token as the first token, and then next we get the last position. How do we know it's the last position? We can find the cardinality, so the length of the path path and then pass it in as a field. So we're doing cardinality path.
00:07:42.720 - 00:08:12.192, Speaker A: So if there are three elements in this path, then cardinality will be three and then s path. Three will just get you the last token, last token. And then we want to also grab the transaction hash. So call transaction hash, just an example for us to take a look later. And then we're gonna just grab the path to take a quick look. Okay, so let's limit 100 again. And then let's just check the non direct path.
00:08:12.192 - 00:08:44.706, Speaker A: How does that look? Select is not right. Uh huh. Forgot to add the as here. Okay. Okay, let's quickly check the result. So let's take a transaction to as an example and then let's go to etherscan to quickly check. Okay, this is swapping.
00:08:44.706 - 00:09:03.056, Speaker A: It swapped ether for USDC and then USDC for Lua. So it did contain what we were talking about. Okay, so here Rapdeeth USDC and then Lua token. So let's go back to our here. So full path. We can see that. Great.
00:09:03.056 - 00:09:26.294, Speaker A: Indeed. It has three different tokens, matches up with our expectation. So more than two has an extra token. Okay, cool. So we've got here. So let's put the quarry back, remove the limit 100. Okay, so now is the time where we sum up how many times this path has been used for this particular pair.
00:09:26.294 - 00:10:07.100, Speaker A: So we're going to have our final table and we are going to do select from our paths non direct table. We're going to call this PN. Okay, and then also we want to left join on the tokens erc. We already know this is just to help us make sense of the symbol for this particular token. So tokens erc 20 token zero. Okay, so on what token zero dot contract address equals to PN first token. And we also want to make sure this is the Ethereum chain.
00:10:07.100 - 00:10:46.548, Speaker A: Okay, cool. Now we're just matching up the second or the last tk one tk zero. Okay, should probably just copy pasted. Okay, so tokens erc 20 tk zero tk one tk zero contract address first token last token. Great. Ethereum blockchain. Okay cool.
00:10:46.548 - 00:11:24.844, Speaker A: So let's first get the path symbol. So we are putting the symbol for the first token and last token together. So we're doing a concatenated function and then within this concatenate function we are grabbing the symbol. But sometimes symbol may not exist. So as usual we are going to apply a co less function where we try to grab token once or the first tokens symbol. But if that does not exist, then we straight up grab the address of that particular token. And then next we are going to just make it pretty.
00:11:24.844 - 00:11:51.504, Speaker A: So backslash, right? Because you always see like USDC backslash wrapped eth that sort of thing. So we're going to do that and then next we are going to apply the same coalesce to grab the symbol for the second token or the last token. So here we are doing tk one symbol and then instead of first token, we're doing last token. And then that would be our path symbols. Okay. Alright. So next we are going to do a count.
00:11:51.504 - 00:12:16.386, Speaker A: So basically get the count of how many times this path was taken. Okay. And then next we are going to take a example transaction. So we are going to use this arbitrary function which just take an arbitrary transaction hash that fits the criteria here. Right. Because here once we're done, we are going to group by. So here we're looking at a path.
00:12:16.386 - 00:12:43.150, Speaker A: So the token symbol can be like RaPD through a dogecoin. Right. So that would be the path. So we're grouping by that particular pair and then, but we want to pick an example that fits that particular pair as example to help us take a look at, oh, a swap that goes through USDC wrapped eth, but it ends up being like wrapped Ethan like sushi token pair. So we're just, that's why we're doing arbitrary, so we can get an example of this. Yeah. So we can group by one.
00:12:43.150 - 00:13:18.784, Speaker A: And then let's, there's some pairs in uniswap v two, right. We probably are not going to look at all of them. So let's just order by the count but in a descending order. And then let's just take the top 1000, which is like quite a lot already to examine. So, so let's run this quickly and take a look. Okay, wonderful. So here we can see that the most popular pair that goes through USDC wrapped ETH is wrapped ETH and hacks and it's been routed through 34,000 more times.
00:13:18.784 - 00:13:41.202, Speaker A: And this is an example. So let's take this example hash, go to etherscan and just take a quick look. Ok, we see. Ok, so wrapped e USDC and eventually it arrives hex. Okay, great. But what if we want to, so now we're going to show you how we can like save the step of like even going to Etherscan. Like putting your transaction hash.
00:13:41.202 - 00:13:59.264, Speaker A: You can directly go to Etherscan. So pretty much what we're doing is we're composing this URL. So we're composing the first part and then transaction and then we're putting in the sample transaction hash. So you don't have to like click, click click. You can just directly click this and it will lead you there. So let's do the rate. Okay.
00:13:59.264 - 00:14:31.212, Speaker A: So now we can do select from final. Okay. And then we just would, we would just keep the path symbol. That is what we want. And then next we are just going to keep the times routed and then we're just going to touch up on the example hash part. Ok, so how do we do this. So first there is this existing query already which lists the different block explorers URL address for this particular chain.
00:14:31.212 - 00:15:18.880, Speaker A: So for ethereum we have Etherscan, for like polygon, we have polygon scan. So this is the result from this query. So basically we just put the chain with its explorer and we're able to refer to this query results as a user defined table, pretty much. So the way we can do that is by calling query underscore, pretty much we are going to left join on this table. Okay, so query underscore the query id. So we copy the query id from the side, put it back, and then gonna just call this get chain explorer. Okay, and then we also want to make sure that, okay, so we're essentially constructing this URL.
00:15:18.880 - 00:15:48.214, Speaker A: So to begin with, let's get our concat function ready so we can start padding different strings that we want. You're gonna just set it up. Okay, so step one, we need to construct an href inside. So we're gonna do ahref and then do that. And then we're gonna start our, what is our URL? So we're gonna put like another quotation. This time we're doing like the double quotation. Okay, and then this is where we get started, started with the URL.
00:15:48.214 - 00:16:12.068, Speaker A: So here we already know like get to explorer. What do we need? We need the explorer field. We need this part. So we're just doing like dot explorer here. So dot explorer. Okay, so next, what are we padding on? Next we are padding on this, you know, TX part. So that is what we are going to do.
00:16:12.068 - 00:16:39.640, Speaker A: So quotation TX back. Okay, so next part we are ready to put this transaction hash in. That is easy. We already know we are calling this example hash. Awesome. Okay, so now we're ready to close this href. Okay, so put the quotation back again and then we're going to finish the double quotation that we just started on this site.
00:16:39.640 - 00:17:11.970, Speaker A: Right, so the site we started double quotation here we're ending the double quotation. Okay, cool. And then we're going to put target as blank and finish off that one as well. So this part we are basically composing the, this part we are basically composing, composing the link. Okay, so next part we are going to say example transaction hash again. This is basically what will show on this table result on the UI. So we just want the example hash to be shown.
00:17:11.970 - 00:17:35.296, Speaker A: And then lastly we are closing off this, a thing that we just started. So we are closing off it with a backslash a. Ok. And then we already have the parenthesis closing parenthesis. So we're going to call it as example hash as our column name. Ok cool. So let's get it running.
00:17:35.296 - 00:18:05.138, Speaker A: Alright, so looks like we are missing something in this query. What are we missing? We are actually missing a closing bracket for this beginner bracket. So we're gonna put us there. Yep. Okay, so let's run this again. Wonderful. Okay cool.
00:18:05.138 - 00:18:16.906, Speaker A: Let's click into a wrapped ethan pond. Okay, so USDC, USDC pond. Amazing. Cool. That is the answer for today's query.
00:18:17.058 - 00:19:02.740, Speaker B: Thanks Jackie. That was a very informative walkthrough. Hopefully we all understand how routing paths work now and how to use the new query a query feature in Dune SQL. For bonus points, try to figure out how much USDC we was routed through each pair path. Right? So if we routed from bitcoin to weth, what was the total amount that was routed through USDC? We there's many ways to do this. We have a hint inside of the notion document to try and get you started, but you should end up with an aggregate column of value routed next to the answer that we showed. Tomorrow we're going to be looking at how you identify organic volume by removing bot swaps or arbitrage and MEV from the trading volume.
00:19:02.740 - 00:19:10.300, Speaker B: So this is taking the query that we did on the second day and just adding a little bit more analysis to it. Hope to see you tomorrow.
