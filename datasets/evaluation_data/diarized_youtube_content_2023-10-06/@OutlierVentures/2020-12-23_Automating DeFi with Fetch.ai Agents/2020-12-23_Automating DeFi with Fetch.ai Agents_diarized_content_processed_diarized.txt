00:00:03.530 - 00:00:52.560, Speaker A: Hello everyone, and welcome to another tech Tuesdays with outdoor ventures. Today we'll talk about automating DeFi with agents, particularly specifically on using fetch AI agents with the example of the hedgek protocol, the autonomous hedition. I am Aravon Arammers. I'm city and founding partner of Outlier Ventures, and with me is Aid Waller, the developer of the autonomous edition. Let's get into it. Brief disclaimer none of this is investment advice, as usual. Worth noting that outlier is a long term investor and supporter of fetch AI, which of course we'll talk about.
00:00:52.560 - 00:01:11.054, Speaker A: And let's get started. So yeah, eight ball, just quickly, about yourself, what is your background? What brought you to crypto and to ultimately creating the toner suggestion?
00:01:11.182 - 00:02:01.650, Speaker B: Yeah, certainly. So my original background was actually in banking and finance. After my undergraduate degree, I spent a number of years working for some of the larger banks in the United Kingdom. However, I kind of discovered crypto around about 2013 2014 time, and I could see that based on all the figures from the banks, that times were changing, as it were. At that point, I kind of decided that it would probably be good for me to learn a little bit about this crypto stuff. At which point I completely fell down the rabbit hole. I ended up switching my career to computer science, went and did a master's degree in data science, and ended up working as a commercial data scientist.
00:02:01.650 - 00:03:33.550, Speaker B: My area of kind of specialism and primary interest was financial markets and the automation of trading strategies. As time progressed, I got a little bit more involved in the crypto space, started doing a number of different hackathons to great success. And probably about twelve months or so ago, I started working on building things a little bit more open for other people to use as well as myself. It was around about this time I encountered the fetch agents, and for me it was like coming home to my university studies on artificial intelligence to actually see the implementation of these agent based systems that had been designed specifically to work with this new emerging market of cryptocurrencies. And it was very kind of liberating almost to go ahead and start building with these agents that were in this nice intersection between traditional programming and the new emerging world of blockchain. Around about six months or so, I got involved in Hedgek and I noticed there were a couple of, let's call them, features of the Ethereum smart contract. That meant that I wasn't able to trade these markets in the same way that I would trade traditional option markets.
00:03:33.550 - 00:04:32.994, Speaker B: Now, this was obviously both a blessing and a curse, shall we say, because it allowed me to open up a couple of different strategies that I hadn't tried before. However, I still felt that there was something missing. It was that point. I kind of started development of the autonomous hedgehog, primarily to add a little bit of functionality to the newly emerged hedgehog platform that just frankly, I couldn't find anywhere else and there was no one else working on it. So I went ahead and spoke to Molly Wintermute, obviously the founder of Hedgek, and she was very interested in the idea as well. So I got to work, should we say, and I released the first version of the autonomous hedge and probably about a month or so ago, and it's been a bit of a wild ride to get here, shall we say? I think that will do for my background. What do you.
00:04:32.994 - 00:04:33.890, Speaker B: Aaron?
00:04:34.230 - 00:05:17.458, Speaker A: Great. Yeah, yeah. Really good for context. Yeah. Thanks a. So to zoom out a bit before we zoom into hedge and the autonomous, like in the wider sense, Defi centralized finance, why would it need any type of automation? What's this? Yeah, there's protocols like hedgek, where you have sort of time bound financial instruments. Your option expires at a certain moment or it doesn't and it's at a certain valuation, and you want to take action before that time.
00:05:17.458 - 00:05:53.114, Speaker A: And there's other similar synthetic options protocols, but there's also a lot of DeFi protocols which use overcollateralization to make lending or similar constructs possible. And those depend on the valuation of the collateral. And that, as in crypto, the value goes up or down rapidly. And if you don't watch out, you can get liquidated. And of course you can spend time at your terminal watching, see if. Is it still there? Is it okay? Is it still there? It's okay. I need to take action.
00:05:53.114 - 00:06:57.300, Speaker A: But rather you have an army of bots or whatever form of automation to do that for you. And I think the third one is the recent trend that we've seen with yield farming and optimizing yields, where if you have sort of robo advisors like urine finance or idle finance, who effectively do the job for you, but there you outsource more what is done with your funds. So you take your funds, it goes into the protocol. You don't really know what happens, and you hope that the return comes out, and sometimes it does, sometimes it doesn't. But yeah, there's sort of more outsourced. But ultimately, in summary, defi protocols are money Legos, but the Legos need to be moved around by something. And if it's humans moving those Legos around, they can only go so far.
00:06:58.310 - 00:07:17.080, Speaker B: You've obviously got your traditional limits on humans. You can only look at so many protocols at any one point in time. You're limited to how quickly you can get an update of your price, how quickly you can run your calculations, and unfortunately, we all have to eat and sleep. Luckily enough agents, on the other hand, do not.
00:07:17.870 - 00:07:58.966, Speaker A: Yeah, indeed. And just some illustration on Maker, the protocol behind Dai. If you look at June analytics, you can see significant amount of collateralized debt positions being liquidated, which means people basically sold their ether or other collateral that was behind those at the moment. They didn't necessarily choose to, whereas if they had been aware that that was ahead, and they could have sort of topped up their cdps, their collateral, it would not have been liquidated, and a properly configured and programmed agent could have done that for them.
00:07:59.068 - 00:08:36.850, Speaker B: There's a couple of points I'd like to raise here. The kind of liquidations offered by Makerdow actually offer, obviously two sides to that trade. You've got the individual who actually performs the liquidation, which gets the underlying collateral at a discount, which is another use case for the agent to monitor those positions and liquidate individuals who are under collateralized, shall we say. And as Aaron's rightly pointed out, you can obviously go ahead and ensure protect against liquidation by using an agent to go ahead and update these positions with the appropriate collateral as required, based on fluctuating prices.
00:08:38.150 - 00:09:44.898, Speaker A: Yeah, it's a good point. So, for one, from a perspective of, it's my cdp, I don't want to get liquidated, so I want to prevent that bad thing from happening. But there's also the other person who could find positions that are about to suitable for liquidation and they would actually get a gain for it. Reminds me actually of case I haven't included in the deck here, but there's a good analysis from block science on a phenomena that happened during the cryptokitties craze, where there would be a small reward for people who would. Well, people transactions that would make a cryptokitty be born, because the cryptokitty, again, you need an external action to make that happen. And apparently there was quite an active ecosystem of what they had then dubbed the crypto midwives, I think they called it. So people who would again search for those opportunities in the smart contracts to see, okay, now I can actually make some return here by calling this transaction.
00:09:44.898 - 00:09:56.490, Speaker A: This one is suitable because now there's a crypto kitty about to be born. A bit more abstract than these more financially focused instruments, but ultimately the same type of opportunity that with good automation.
00:09:58.190 - 00:10:08.654, Speaker B: You can benefit from 100%. Now that's a really interesting use case. I think I'm going to be having a look. Would you be able to ask you to link me up to that study? It sounds like an definitely, yeah.
00:10:08.852 - 00:10:45.734, Speaker A: If I get a chance, I'll post it here in the chat and otherwise definitely follow up for you and everyone else to see. Thank you. All right. Yes. Zooming in a bit further on the autonomous edition. So the autonomous edition is obviously it automates hagic options trading and particular aspects of that. Could you say a bit more about what hagic is on its own? What does it make possible and what were the things that it didn't make possible you felt you could automate with autonomous hedging?
00:10:45.862 - 00:12:16.040, Speaker B: Certainly. So hedge is an absolutely fascinating protocol, main reason being that it's a completely different approach to options trading. So with traditional options, you would have one option writer for every option purchaser, in that you need to have someone writing those options, someone to be able to buy them. I'm going to assume a level of understanding on what options are and not necessarily cover all of the basics. Some of the key primary differences to know when the options model has been moved onto the blockchain by Molly is that she's gone ahead and actually created a new model whereby writers actually pool their underlying collateral in order to allow buyers to purchase from the pool rather than from the individual. That means that obviously there's a huge diversification of risk as option writer, because no longer are you just writing one single option, you're writing hundreds upon hundreds of options, some of which are just inevitably going to be out of the money. So when I started to explore this platform, I noticed that due to the fact that it's based on Ethereum, it needs that manual transaction to be called to actually exercise the option.
00:12:16.040 - 00:13:26.830, Speaker B: You can obviously exercise an option when it's in the money at any time up until the expiration date. Now, there's a couple of points to note. One, if that expiration date passes and you have not exercised that option, your profitable option will literally expire worthless. The main reason being that it is not auto exercised by the application. This is a huge difference between blockchain based options and traditional centralized exchange based options, because in a centralized exchange, your broker will actually exercise an in the money option for you at the point of expiration if you haven't exercised it up until then. This is something that more traditional traders would have immediately noticed missing on hedgek. And there was a lot of complaints in our community about the fact that these options weren't auto exercising.
00:13:26.830 - 00:14:40.070, Speaker B: This was a kind of perfect first use case for the autonomous edition, because the actual underlying logic to exercise one of these options is really simple. Is the option in the money? Are we about to expire? If yes, submit the transaction to actually exercise this option. Really simple use case. However, the development of that use case has actually allowed the implementation of a much more advanced order management engine, which means that the agent can actually go ahead and track its own internal orders. It can track the options on the chain, and obviously it can take that decision making a away from the human b off chain, and c put it in an agent which will just run forever. So hopefully that's given you a few of the bit of a top level idea of what hedgek options are and how they differ from traditional options contracts.
00:14:40.650 - 00:15:03.870, Speaker A: Yeah, definitely. Just for context, the total value lock in AgIC, it's at about 75 million usd. Now, that's nothing to sneeze at. It's not in the level of billions of the top d five protocols yet, but definitely a significant DFI protocol.
00:15:04.770 - 00:15:15.570, Speaker B: Bear in mind, with the protocol as version two has literally only been launched for a couple of months now, I think that the growth has been pretty tremendous.
00:15:17.110 - 00:15:53.842, Speaker A: Yeah, great indeed. And the other side of the other main ingredient, fetch, an open access machine learning network to enable smart infrastructure. As I said, outdiver, just longtime investor and supporter of fetch. And specifically the agent framework is what you used for the autonomous addition. Could you say a bit more about what the agent framework is, how it works, and how you used it for the edge?
00:15:54.006 - 00:17:14.230, Speaker B: Certainly. So the agent framework itself is a python library that allows for the development of agents. When I say an agent, I effectively mean a computer entity acting to optimize and satisfy its own internal utility function. So an agent has a goal, and an agent is looking to achieve that goal. What the fetch framework allows you to do is develop these agents in a very standardized, plug and play modular manner so that you can a write behaviors that are interoperable between different agents, b create behaviors to interact with on chain and off chain protocols, and then c obviously test them, run them, and actually develop them further. There's a couple of really interesting applications. There's a couple of really interesting technological features that the agent framework has that make it a little bit unique, in my opinion.
00:17:14.230 - 00:17:59.320, Speaker B: For example, fetch agents are capable of talking directly to each other in a peer to peer manner, which opens up a number of different financial trading strategies in regards to collaboration. Secondly, they are capable of talking pretty much to any blockchain that has an interactor written for them. And c, the actual framework and library itself is built with kind of AI best practices in mind. So anyone who's done any form of AI will find the library itself very familiar and very.
00:18:01.370 - 00:18:02.146, Speaker A: As I say, they'll.
00:18:02.178 - 00:18:07.320, Speaker B: Just find it very familiar and it'll make a lot of sense to anyone who's done any AI before.
00:18:08.990 - 00:18:21.550, Speaker A: Great. Yeah. So it really provides you with a toolbox for such actions and as understand it. Like in your experience, it's a really usable and familiar toolbox.
00:18:24.450 - 00:19:15.950, Speaker B: As you say, it kind of abstracts away a lot of the process involved with signing transactions, a lot of the process involved with actually submitting those transactions to a chain, and it puts them into a kind of polymorphic, standardized, as you say, toolbox. So if I want to call a transaction on say the fetch AI chain, it's the exact same as me. Like submitting a transaction to the ether chain, which as I'm sure you can imagine, if we were to look at applying the same capabilities of the AH to different chains such as EOS or Tron, for example, or even binance smart chain, it would be a matter of simply writing an interactor and then submitting transactions in an identical manner.
00:19:16.930 - 00:19:31.150, Speaker A: Yeah, great. So it's really a blockchain first agent framework, right, that interacts with multiple chains. Yeah, great.
00:19:31.220 - 00:19:32.320, Speaker B: Very much so.
00:19:33.250 - 00:19:57.706, Speaker A: All right. And yeah, well be those two ingredients. Of course you added some magic from your side, but I think you've explained that well just now I'd say let's have a look at venomous edition. I mean, this is an announcement post and this is the GitHub, but people can check that out. I'll post links, but we want to see it. How does it look?
00:19:57.728 - 00:20:38.070, Speaker B: What does it do? Yeah, certainly. Now I'm hoping that the demo gods don't shoot me here, but what I'm going to do is I'm just going to quickly talk you through. So this is the autonomous hedge in itself. This is actually an application that is currently running in my command line. It's a fully self contained application that contains a front end, a database, an agent, along with an API. So when you go ahead and launch this application, it will automatically spin all of this up. You can then navigate to it in your local host.
00:20:38.070 - 00:21:12.900, Speaker B: We're actually going to go through and talk about the individual agents that are running here. So this is just controlling an Ethereum wallet at the moment. As you can see, we're tracking our balance kind of in real time. That all gets plotted up in this table here. Down here we can see that this is the public address that's being controlled. This is when it was created. This is when the agent actually last updated its internal state with the database ether balance, USD balance along with status of the agent.
00:21:12.900 - 00:22:21.738, Speaker B: When we've got an agent running, what we can then do is come over to this live market view, at which point we get a lovely view of the Ethereum markets fed from FTX. What we can then do is go ahead and choose an option to purchase at the moment. I'll be honest with you, I think things are a little bit high at the moment, so I think that a put option might be appropriate. Once I've got put option all racked up here, I can actually submit that to the agent, as you'll notice down here so quick I couldn't even point out all the different stages. What I'm then going to do is come across and look at this wallet here, which is the same wallet. Here's the transaction that was just submitted and as you can see, it's going to clear pretty quickly. How long have we got? Yeah, it should clear pretty quickly and then once it's been placed, the application will actually then just go ahead and monitor it.
00:22:21.738 - 00:22:49.650, Speaker B: There we go. That's all been submitted and confirmed, so if I refresh that. Yeah, perfect. A couple of things I'd like to point out here. One, this is a considerably faster interface for interacting with options than the Hedgehog platform. As you can see, there isn't any need to go ahead and manually sign for transactions. The main reason for that being that the agent itself is actually controlling the wallet.
00:22:49.650 - 00:23:58.874, Speaker B: Now that these option contracts are actually sat here, they're stored within a local database and of course on the blockchain. What the agent will now do is it will just sit here patiently monitoring those option contracts, and then as long as they're in profit at the time of expiration, it'll actually go ahead and exercise them to claim my rightful profit, as it were. As you can kind of see, I've designed this application to allow me to go ahead and implement additional agents and additional strategies as they get developed. The idea is that you'll actually be able to run as many agents as you would actually like, each one running a different strategy to capitalize on different DeFi opportunities. Obviously this is completely locally controlled. You know, you have that whole saying not your key is not your crypto. The Ah gives you a TXT file with your private key in it.
00:23:58.874 - 00:24:30.494, Speaker B: So you have the certainty of knowing that no matter what, you are in control of that wallet. There's no requirement for a trusted central party. There's no risk that your crypto will suddenly disappear. And you don't even need to trust me to know that that's the case. Because you can see the code and run it all locally. Yeah. So I'd really like to be able to show you a couple of different strategies.
00:24:30.494 - 00:24:35.410, Speaker B: But I'm going to be entirely honest with you, I haven't yet got to the point where I've developed them, unfortunately.
00:24:36.330 - 00:24:37.320, Speaker A: No worries.
00:24:38.970 - 00:24:41.750, Speaker B: But I'll close the video there.
00:24:41.900 - 00:24:55.900, Speaker A: Yeah, that was great. Yeah, that was really good to see. So very quick to set up agents and have them set up options.
00:24:58.830 - 00:24:59.146, Speaker B: To.
00:24:59.168 - 00:25:00.650, Speaker A: Get this done on Agic.
00:25:02.290 - 00:25:24.690, Speaker B: Very much so. And one of the kind of advantages is, as you say, the application all actually runs locally. It's a single command line to bring the application up. And obviously there's a full test suite for all of the expiration for all of the available strategies.
00:25:26.890 - 00:26:19.398, Speaker A: Yeah. And what you mentioned, the self custody aspect of it is a really interesting differentiator from protocols like urine finance or idle finance or those kind of things. Because while still, of course, you interact with DeFi protocols, you have at least direct control from wherever system you run it on, that your funds stay there and your strategy gets executed, rather than hoping that those protocols are secure. And unfortunately, sometimes they're not. What kind of hardware does this run on? What kind of hardware do you use for it?
00:26:19.484 - 00:26:28.390, Speaker B: So, a couple of nice things. One yet coming blue. Sorry, got a bit overexcited there, Aaron.
00:26:29.770 - 00:26:31.142, Speaker A: It's very exciting stuff.
00:26:31.276 - 00:26:55.090, Speaker B: Understand, I've been really conscious to trying to build this to be kind of as lightweight as possible. So this actually runs on a raspberry PI four. It will run on the four gigabyte version of the Raspberry PI four. However, if you want to make sure that everything's nice and quick, you can run it on the eight gigabyte version. And that's probably a little bit better, to be candid.
00:26:57.270 - 00:26:58.020, Speaker A: Cool.
00:26:58.550 - 00:27:17.190, Speaker B: But it will of course, actually run on Linux. And I believe that we've just fixed any outstanding macOS issues. If anyone wants to give it a pull and let me know, that would be hugely appreciated.
00:27:17.770 - 00:27:39.898, Speaker A: Great. So anyone in the audience with Macs do reach out and try to run it. See, we have two questions. Keep them coming. Let's go into this. Ready? So, from Juguelio, can we use tresors and ledges with it? Like hardware wallets?
00:27:40.074 - 00:28:14.460, Speaker B: Yes, actually. So with the hardware wallets, you'll actually be able to export your private key from that. You would be able to go ahead and give that private key to the agent. However, I wouldn't necessarily recommend that that would be the best way to do it. The main reason being that once you give the private key to the agent, the agent is in control of that private key. So if you were to try and use hardware wallet, you wouldn't necessarily be able to sign on that hardware wallet. It would just be signed directly by the agent.
00:28:14.460 - 00:28:19.130, Speaker B: Can you not, Vlad? I wasn't aware of that.
00:28:19.280 - 00:28:34.362, Speaker A: Well, you can't extract it, but you can indeed, you can extract or save the seed, which is effectively the same. When you configure a ledger or your treasure, it tells you, okay, now you have your 24 seed words. Please note them down on a piece of paper and store it safely.
00:28:34.506 - 00:28:35.600, Speaker B: But that's the.
00:28:36.050 - 00:28:38.238, Speaker A: And put them in your agent. Yeah, definitely.
00:28:38.404 - 00:29:02.940, Speaker B: Yeah, you can convert those mnemonics into a private key. If I were to be using this with the tresnum or a hardware wallet myself, what I would actually do is create a separate ether address for the agent and then transfer the amount of funds that I wanted the agent to have access to to that wallet rather than sharing a private key, if that makes sense.
00:29:03.310 - 00:29:57.734, Speaker A: Yeah, and I mean, this is quite a common point for basically anything that needs to perform cryptographic transactions in an automated fashion and particularly for validators in proof of stake networks. There you have the exact same problem. So, for example, on Cosmos based networks or Teslas or Polkadot, but specifically cosmos, which you're quite familiar with, there's that point that signing on a hardware wallet is interactive. So you need the human. And the whole point of this is not needing the human. So there's always that trade off. Do I want to keep full control of my keys and keep it in the hardware wallets? Well, then I must be there at the moment that the button starts needs pressing.
00:29:57.734 - 00:30:30.246, Speaker A: So then I guess the best that you could do from the agent perspective is send a notification to the human to do their thing. But then they might be too late. And of course, it's far more arduous because they would need to sign every transaction. One solution, which again, in validator land is pretty common, is using hardware. Hardware security models, modules which basically do what a hardware wallet does for you. I. E.
00:30:30.246 - 00:31:18.754, Speaker A: Having a private key that cannot be extracted. I mean, the seed can be saved up in France, but it cannot be extracted physically from the hardware. And it can sign automatically. But then, of course, you need to build compatibility with those things like uv key hsms, and there are other hsms that would give the advantage of being able to sign non interactively. It would still have the security risk of if somehow the system where that runs on would be compromised. It could ask the HSM for an arbitrary signature. It could not take the key and steal it and go somewhere else, but it could still ask for an arbitrary signature.
00:31:18.754 - 00:31:32.566, Speaker A: So, bottom line is, the system where this runs, or anything else that does automated signing, needs to be very well secured from an information security and infrastructure.
00:31:32.678 - 00:32:31.150, Speaker B: Security perspective, I completely agree with you on that. In regards to security, the autonomous suggestion, the primary motivation for me building it this way, rather than pursuing a software as a service model, was to ensure that my users would be able to keep that level of personal control. So, as you've rightly pointed out, if your network gets compromised, someone can still go onto the system and steal the private key that the agent is using. In much the same way that if someone steals your phone and gets into your phone, they can then go ahead and get your private key out of that. It's a matter of, as you say, those trade offs between actually being able to interact with the outside world and make the actions that you want to make and having everything in a cold wallet.
00:32:33.730 - 00:33:38.194, Speaker A: Yeah, and as another side note, on a side note, I guess, is it is actually possible with specifically the ledger nanowallets to make them sign non interactively, but it requires a specific ledger app. So for tenemint networks, again, Cosmos SDK uses tenement, and quite a few others do. There is such an app which does that. But then again, basically, you've converted your ledger into a cheap hardware security model module that wasn't exactly built for that 24 hours activity, and it might fail, it might go offline. And so basically, I'd say if you're looking for hardware security module, better get a hardware security module because they're built for that purpose. But ultimately, thanks for that. It's clear the model with the autonomous suggestion is currently the private key that you use with it is on your local system.
00:33:38.194 - 00:33:49.320, Speaker A: Your local system needs to be very secure and better keep the amount of funds that that private key has access to as limited as possible.
00:33:49.690 - 00:34:32.580, Speaker B: Exactly. The way I kind of see it at the moment is the idea is that the autonomous digestion is going to be able to run multiple strategies. So the idea is that you would give each strategy the amount of funds that you want it to be able to play with. As they say, don't invest any more than you can afford to lose obviously not investment advice and all of that as well. But when I personally run the autonomous suggestion, I set up a separate wallet and then I put the funds into it that I want to use. With that strategy, I don't just give it blanche cart access to all of my ether, as it were.
00:34:34.630 - 00:35:41.530, Speaker A: Yeah. And actually, this points to a design aspect in DeFi protocols as well. What I mean to say is, as far as I know, most of all DeFi protocols, the security model is there's one user, there's one address. That address has control over the funds that are put in it, and that address also has control over any actions that are taken with those funds if you would build it so that you would effectively have accounts with roles. So one address sends in the funds and another address is allowed to call execute option, for example, but it doesn't get the funds in return. They keep the keys for the account, actually holding the funds offline, while the funds that need to account, that needs to take the action does need an online key. But the damage that it can do is quite limited.
00:35:42.670 - 00:35:50.458, Speaker B: No, that's a good model. But tell me if I'm wrong, would that not require kind of redesign of the protocols themselves?
00:35:50.624 - 00:35:54.110, Speaker A: Exactly. So I'm saying everybody who builds a DeFi protocol, please do this.
00:35:54.260 - 00:36:08.290, Speaker B: Yeah, but then as soon as you go ahead and implement some form of permissions on a wallet, I would imagine that would cut across the grain of a lot of true defi enthusiasts.
00:36:08.870 - 00:36:17.526, Speaker A: Well, I see you like permissions, but if you're able to give permissions to anyone, then still it's entirely open.
00:36:17.708 - 00:36:18.440, Speaker B: Yeah.
00:36:19.290 - 00:36:30.070, Speaker A: Just for security purposes, rather than for giving away your control or custody purpose.
00:36:31.050 - 00:37:05.890, Speaker B: In the Hedrick ecosystem, we're currently working on the ability to effectively sell options as nfts, which would theoretically allow you to go ahead and move that responsibility to a separate address. But I think I'm 100% certain that when you were to call exercise, the wallet that had actually called that function would still receive the actual payout.
00:37:08.170 - 00:37:22.250, Speaker A: Yeah, you would want that, right. Because if you would wrap the option into an NFT, then as the buyer of the NFT, I would want to be sure that I can both do with the option what I want and get the return of that option.
00:37:22.400 - 00:37:22.906, Speaker B: Exactly.
00:37:23.008 - 00:37:24.330, Speaker A: And not one or the other.
00:37:24.480 - 00:37:25.180, Speaker B: Exactly.
00:37:27.310 - 00:37:34.320, Speaker A: It's a bit more future roadmap for defi protocols, but, yeah, I think it could help.
00:37:36.450 - 00:37:37.470, Speaker B: Good shout.
00:37:38.850 - 00:37:46.240, Speaker A: All right, then, from Philip Gotha. What are the next steps for the hedge in?
00:37:47.270 - 00:38:51.320, Speaker B: The next steps is to a complete the order management module. There's two more types of order types I'd like to implement within that. One is take profit and the other is limit orders. I've literally just completed trigger orders myself. So limit orders, take profit, that's short term, medium term is implementing the first of the DeFi profit harvesting strategies. And then the next step is to go ahead and obviously create a model where the next step, after we've started to implement the D five profit harvesting strategies, is to go ahead and implement a model for people to be able to run multiple agents themselves at home with as many strategies as they'd like.
00:38:54.730 - 00:38:55.480, Speaker A: Great.
00:38:57.530 - 00:38:57.894, Speaker B: Cool.
00:38:57.932 - 00:39:22.960, Speaker A: And from a question from Vlad Wesley, but he can watch the recording. And interesting for anyone else, can you talk a bit more about the strategies you mentioned earlier and I'll put the strategy diagram up that you have on GitHub, and then maybe the ideas that you have could be probably an extension to that. Certainly this is the architecture, but probably this one would be more relevant. Right.
00:39:24.230 - 00:40:32.600, Speaker B: So this is effectively just a simple strategy that the agent has currently implemented for actually exercising it in the money options. It's just a very simple kind of control flow. You can see here that the behavior itself to actually execute these orders is isolated from the rest of the application. One of the benefits of fetch AI is that you're very easily able to add extra behaviors that get run kind of concurrently. Bear in mind, Python is kind of a synchronous language, so when you have asynchronous behaviors, actually coding them up can get quite fiddly. Fetch offers that in quite a nice modular manner, as I say. So this basic strategy here effectively just monitors all of the existing options, checks the time until expiration, and then if those conditions are met, actually submits the exercise option to the Ethereum ledger and updates its personal data store so it knows that it doesn't have to monitor any other outstanding options.
00:40:32.600 - 00:41:57.294, Speaker B: The strategies that we're actually looking to go ahead and implement are effectively the first strategies I'm going to approach are the yield farming strategies, mainly because I think that you can look at a yield farming protocol in a very standardized way. For example, what is my APR at this point in time? What is the APR of all of the other yield farming protocols at this point in time? Does it make sense for me to move my allocated capital from this yield farming protocol to this new yield farming protocol? And if it does, then go ahead and actually execute that swap. So there's a number of different. Bear with me. 1 second. Yeah, so when you're actually collecting interest on these yield farming protocols, as you guys will know, you kind of provide some form of liquidity in normally the native token of the platform. And then you need to go ahead and call potentially a claim function to actually get your tokens.
00:41:57.294 - 00:43:44.446, Speaker B: And then depending upon what you want to do with those tokens, you either need to go ahead and immediately liquidate those tokens, or like the tokens that you've earned from yield farming and then put that back into ethereum, or you just keep those yield farming tokens. That strategy itself is going to be fairly easy to implement. I'm looking to go ahead and implement that on Uniswap and sushi swap to begin with, many to harvest uni and sushi. That will be a strategy that will probably be released in the new year, to be honest. And that will be the second and third protocol that the AH is capable of interacting with. So from my perspective, the more possible contracts and protocols that the AH has got to put into its compute engine, the higher the probability of it either a being able to detect profitable opportunity at any point in time, and b be able to actually action that. So if you've got like ten protocols that this thing is paying attention to, all offering various different types of yield farming, and the AH is able to switch between those like in a real time dynamic basis, as the yield farming changes its rate due to price fluctuations, you should be in a situation where it will be able to effectively maximize the yield of these tokens.
00:43:44.446 - 00:44:25.680, Speaker B: One of the benefits of doing it this way, rather than a protocol like yield, for example, is that this gives the end user control over what they actually want to do with those harvested tokens. I will be implementing for my side, for my strategies, ways for them to immediately be liquidated back into ether, for example. However, that will all be configurable by a user in regards to other strategies. First, what I would like to do is, I suppose, Aaron, you could just come to that quick slide that demonstrates those kind of categories for use cases for.
00:44:29.510 - 00:44:30.466, Speaker A: This one.
00:44:30.648 - 00:45:54.522, Speaker B: Yeah, perfect. So I think this is a really useful way to kind of break down how I see the potential for the AH in the future. You've got kind of protocol users, enhancers, combiners, bridges, and then agent protocols themselves. So protocol users using the example of yield farming, that would be the kind of manual action of going to, for example, sushi swapping all of your various funds into the right funds and then depositing them into a yield mining, sorry, into a yield farming protocol, then hitting the claim kind of manually. That's kind of the lowest simplest level of what you can do with an agent, you can just kind of automate the actions that you would take as a user. The next level is kind of using that automation to enhance the offering from the protocol to kind of tweak it a little bit more towards what you as a user are actually looking for. Sticking with the use case of yield farming on sushi to actually enhance that, you could either a auto claim those tokens or b auto liquidate those claimed tokens back into ethereum.
00:45:54.522 - 00:47:26.650, Speaker B: For example, using hedgek for the protocol enhances. You can see how I've already kind of implemented auto in the money closure using an agent to enhance the capability of that platform. Protocol in protocol combiners that effectively represents combining multiple protocols in order to select the most appropriate allocation of capital between those strategies. Coming back to yield farming again, that would be the strategy of switching between the most appropriate yield farming protocols at any point in time, and additionally auto liquidating those claimed tokens in order to go ahead and get the funds that the user wants in the currency that the user wants. Now, protocol bridging is actually the area that I'm very excited about. So this, in my opinion, is where there's an awful lot of low hanging fruit at the moment. So if you look at, for example, the way that hedge prices options, as a liquidity provider and an option writer on hedgek, you're selling options a considerable premium to what you would see options on a centralized exchange.
00:47:26.650 - 00:49:35.434, Speaker B: Now, using the capabilities of the autonomous hedition and obviously fetch's library, you're obviously able to interact with more traditional software stacks and applications, such as the API for derebit, for example, which allows you to go ahead and instantly arbitrage the DeFi sold options against a centralized order book where you might get better prices. In that way, you kind of bridge centralized and decentralized finance to create an intersection of an AH at the point of the aH. Even now, the agent protocols are where we're leveraging the unique capabilities of the agents themselves and fetch's framework in order to create things that we wouldn't necessarily be able to do so beforehand. A very good example of this is either a ITC swaps, which could be done directly agent to agent, without necessarily worrying about the impact of one of these trades on the market, or alternatively using agents to kind of communicate in order to optimize their strategies or act in a coordinated manner. For example, another strategy which I haven't yet covered, because it's not necessarily pure deFi, but more along the lines of pair trading. If you are to find two highly correlated assets and then they break their correlation, you buy one and sell the other with the thoughts that they'll revert back to their, they'll come back to being a similar price almost. Now, there's a number of different parameters in that calculation.
00:49:35.434 - 00:51:14.610, Speaker B: For example, what is the trigger factor, at which point you sell one asset and buy another asset? What is the difference between correlation and how far does that distance need to be? Using the autonomous suggestion and peer to peer communication, it would theoretically be possible to actually optimize strategies like this and share the profitable parameters between agents in order to go ahead and as I say, collectively learn what the most profitable strategies and their parameters are in a decentralized manner, which would obviously improve your trading. Hopefully that covered a little bit. As you can see, there's quite a lot of ideas and quite a lot of areas that this can actually be taken. At the moment, I'm trying to go ahead and build whatever's most in demand, which at the moment is improving the available options, sorry, improving the selection of option and order types that can be made on this market. And then I'm going to go ahead and because it's highly in demand from the hedgek community, implement a hedging strategy that looks to delta hedge option writers on the hedge platform to prevent them from making large losses.
00:51:16.570 - 00:52:02.740, Speaker A: Nice. Yeah, I mean, this is a really good overview and indeed lots and lots of ideas for the future on the number five, the agent protocols. That's indeed really interesting. When you get multiple of these agents and they can both directly trade with each other or trade value, but also information in the sense that say the profitable strategy. And I could also imagine that for some types of opportunities, trades or anything that there is in these protocols that can be profitable, an agent might need more funds than it has available, but if there's three others, they can sort of bundle up.
00:52:03.190 - 00:52:58.710, Speaker B: Yeah, bundle it up, take advantage of that opportunity and then distribute the profits between them in a kind of collaborative manner. So in regards to the kind of collective learning thing, I haven't actually mentioned this, but I've just been accepted on a PhD program and I'm actually using fetch AI agents to trade strategy parameters for reinforcement learning between each other. That's some work I'd really like to build on and get released into an open source community. Because if you look at the sheer amount of processing that you'd be able to do if you were to have a few thousand of these things up and running, it would be effectively a supercomputer literally dedicated to finding profitable trading strategies.
00:53:00.010 - 00:53:16.540, Speaker A: That's amazing. I think. Yeah. That's really compelling vision for the future of these kinds of automated or fatitions or unit proficiencies. Yeah. So thanks a lot. We're running to the end of the hour.
00:53:16.540 - 00:53:43.118, Speaker A: Thanks a lot. I think. Yeah, it was really interesting to see what you've built, what it's already capable of, and the rich range of future capabilities that you might be able to build in future. So, yeah. Thanks very much for coming on today. Thanks for the audience, for your good questions and interactions. Really good to see.
00:53:43.118 - 00:53:51.106, Speaker A: And I hope to see you all in the new year when we kick off with the next tech Tuesdays.
00:53:51.298 - 00:53:56.520, Speaker B: Perfect. Thanks very much for having me on, and I hope you have a great day.
00:53:56.970 - 00:54:02.050, Speaker A: Thanks. Thanks very much. Cheers. Bye.
