00:00:06.130 - 00:00:59.640, Speaker A: Hello, this is Aaron from Outlier Ventures, CTO and founding partner with me is Theo Turner, technology analyst. And today we will talk about the solid project initiated by Sir Tim Bernish Lee, and compare it to sovereign, especially on the identity part. Now outlive ventures as we've been active in blockchains, tokens, that's kind of the world for many years, also known as web3. We're of course very interested in decentralizing the web or redecentralizing the web. Many of these projects try to do that in one way or another. That's why of course we're also very interested to see what this project of Sir Jim Berners Lee is about. Because in mission, it really sounds a lot like what we are after.
00:00:59.640 - 00:01:21.230, Speaker A: So yeah, we'll look into how solid is structured, what you can use it for, and along the way compare it to the concepts that sovereign does on the identity based and see where they overlap, where they differ, and where they're strummed. All right, so I'll hand over to Theo.
00:01:23.810 - 00:01:58.170, Speaker B: Thanks, Aaron. So we'll be doing our overview first, and then we'll compare to sovereign afterwards. So we'll start by talking about exactly what solid is. Solid is a privacy standard for personal user data. It's focused on social applications and has three key principles. The first of these principles you may be familiar with, self sovereign identity, is about owning your personal data rather than the social platforms themselves.
00:01:58.240 - 00:01:59.180, Speaker A: Owning it.
00:01:59.870 - 00:02:52.422, Speaker B: The second key principle is persistency. And this means that instead of you having an identity that exists on each separate application you deal with, for example, Google and Facebook, you have a single identity that persists between these applications. The third key principle is reusability. This means that apps that have used your identity information in the past can reuse that information without requesting it again. So the first key principle, the first component in understanding how solid works, is the web ID. It's important to understand that solid is a specification based on established existing standards. One of these is webid.
00:02:52.422 - 00:04:00.740, Speaker B: Webid has been around for a few years now, and Solid is comprised of a number of these existing tried and tested standards, including the resource descriptor framework, linked data and relational state transfer. Point being here, these are existing web standards, and solid is not trying to completely overhaul the way we look at the web, but rather integrate the existing web. On solid, everything is defined by a web id, and when we say everything, we mean users as well as apps and services. And if you were to draw a comparison to sovereign, you would say this is similar to a did a decentralized identifier. It is effectively a public key which is the access point for your personal information. Users web id can be used for authenticating web apps. So if you want to log into something, you can use your web id in the same way that you can see logging in with Google for a variety of web apps today.
00:04:00.740 - 00:05:06.120, Speaker B: So at the core of solid is this idea of a data pod, and this is where your data is stored. And the point of solid is taking that storage away from the apps such as Google and Facebook and having you store your data or you be in control of your data. Now, at the very base level, you may run your own pod server. However, it is currently recommended to use trusted custodian services, that is, people who are already running servers and have a good reputation for running servers. This saves the average end user having to deal too directly with the technology. The core idea behind pods is that users specify, read and write access to their pod on a per app basis. So if you wanted to allow specific information like your age to certain apps like Google and Facebook, but not others, then you can do that.
00:05:06.120 - 00:06:06.630, Speaker B: It's important to note here that the user data store is not encrypted at the storage level, not by default on the protocol, unless this is implemented by the service provider themselves. So solid as it stands now does not encrypt your data at the storage level. However, it does keep it encrypted in transport thanks to transport layer security. So how does a dev look at Solid? Devs can start working with solid with a simple Javascript library. It is very user friendly, very easy to use. If you want to run a server that is host your own data pod or host a couple of people's data pods, then you just install a package and start a system service and you can interact with this via a CLI. For those of you familiar with sovereign, this is similar to running an indeed node.
00:06:06.630 - 00:06:49.894, Speaker B: Currently, the solid code base has pretty low activity. There's a lot of discussion around the principles, particularly in documentation. However, compared to projects like Sovereign, the actual code activity is relatively low. The project is also at a very early stage. There's a lot still to be fleshed out. However, it is designed with user friendliness in mind. In terms of a direct comparison with sovereign, it's important to note the distinction between a web id and a did.
00:06:49.894 - 00:08:17.940, Speaker B: Web ids are for solid and they can tie multiple public keys to a web id, such as your Google and Facebook public keys. Your identities on those platforms can be effectively encapsulated in a web id, whereas on sovereign, all of your identity data is encapsulated in a single public key, that is your did. Neither protocol natively supports account recovery and this is up to app developers to implement themselves. In terms of reliability, one could argue that sovereign is significantly more resistant to DDoS due to being based on distributed ledger technology as well as identity theft, particularly due to solid not being encrypted natively at the storage level. If someone were to come to your house and steal the device you're running for providing your data pod, then they would have full access to your identity if you had not encrypted that device. In terms of the DDoS side, it's also very much possible to identify the location of a particular individual and DDoS their ip address. So if I wanted to deny someone authentication services through webid and through Solid, then I simply find their ip address and DDoS that.
00:08:17.940 - 00:09:17.030, Speaker B: Similarly, if there is a server provider who hosts multiple people's data pods, they can be DDos and then a lot of people suddenly don't have access to their web ID authentication and to their solid data pods. With sovereign, the platform is a distributed ledger and you would have to simultaneously DDos pretty much the entire network in order to have any lasting effect, and this is a much more costly attack. It is worth noting that in the current state, sovereign is less user friendly and more tuned to a developer environment. However, it covers many more programming languages. We'll go over the key points. Solid is a privacy focused data standard for the web. With the standard user data is stored in pods and this is stored either by the end users or by custodians.
00:09:17.030 - 00:09:33.370, Speaker B: Solid is very much javascript focused and tuned towards social web apps. And finally, in a comparison to sovereign, they're actually quite similar in terms of their self sovereign identity approach, but both have their strengths and weaknesses.
00:09:37.250 - 00:10:59.842, Speaker A: Great, thanks for that Theo. Yeah, so a couple of points from my side as I've been looking at Solid, because we didn't initially set out to compare it to sovereign, but it more logically followed from the fact that solid also has this identity component with web ids. And conceptually there is quite a nice mapping, I think between the pod of data on the solid side where as a user you have all your data which you can either keep locally or leave to custodian, and in that there will be all your identities towards services and your data that maps quite nicely to sovereign where you have your wallets and perhaps the wider SSI and verifiable credentials model. But let's keep it to the sovereign model. For now you have your wallet with your dids, your verifiable credentials that you've received, which also you can keep on your device, but you also can keep it in a cloud agent. If you want a higher level of reliability and permanence of your data, be sure that it's well backed up, et cetera. But yeah, this part of the not encrypted by default is left to all implementers.
00:10:59.842 - 00:12:36.230, Speaker A: Whether that's done and hence has no the purpose is privacy. Enable privacy and enable the read write web in a way that where each user, each entity can keep their own data and give access to applications and others only on their permission on their initiative. But that data might end up in many places unencrypted. And how do you then guarantee that it stays? So it seems that the protocols within solid that it defines seem quite simple, deliberately, which might make them easier to implement by many applications and services, but yeah, might not reach the goal of keeping that privacy. Because if you imagine the business models of larger web giants, if you will, the Facebooks, the Googles, et cetera, it's harvesting lots of data and monetizing that. Well, if you have all your data encrypted, they wouldn't be able to access that. But in a world where solid would be widely adopted, including by the Googles and Facebook, and everybody would use them as their trusted custodians, don't you end up in sort of a similar fashion? Similar to how now basically Google is able to read 90% of everyone's email because they have Gmail and everybody uses it or either sends it to or from another Gmail user.
00:12:36.230 - 00:12:49.740, Speaker A: If that data were encrypted on the user side and only hosted by such parties, they wouldn't have access to it, and now they would. So I wonder to what extent solid would actually change that.
00:12:50.350 - 00:13:18.130, Speaker B: Indeed, it's a good point, and solid feels like a stepping stone toward web3, but not quite all the way there. The main point is to make it as easy as possible for existing companies in the social app space to integrate with this self sovereign standard. However, it is not going as far as requiring true self sovereign identity as with sovereign.
00:13:18.630 - 00:14:27.900, Speaker A: Yeah, indeed, and things like being able to prove attributes about such credentials that you have. So my government has issued me my identity between quotes and said, well, your birthday is x and your place of birthday y. With the sovereign based model I would be able to provide a zero knowledge proof to somebody that I was born after 1970 and they wouldn't catch any further information about me solid doesn't contain any such things at its protocol or implementation level, at least at this point. Doesn't include that they might at some point, but at least it's not a part of the core protocol as it point. And yeah, something else that it doesn't contain is any form of payments or financial aspects. Of course on the one hand presenting solid, on the other hand, comparing to sovereign, solid definitely has a wider scope. It's an identity system and an application programming platform or publishing platform if you will.
00:14:27.900 - 00:15:16.460, Speaker A: So yeah, you could really write all your applications and do your publishing in solid based systems, but it doesn't contain any financial options in that sense. And we see that from our world where there's all these blockchain based systems and distributed ledgers which are either introducing their own financial tokens or external tokens where you can implement payments at a protocol level. That's something we feel to be essential for this next step of the web to have that natively. And solid doesn't have anything like that at this point. So be interested to see if it's somewhere on the roadmap, but at least at this point it's not in there.
00:15:17.070 - 00:15:54.550, Speaker B: Indeed, another interesting point is the additional credibility that an end user can have on sovereign. With solid you're mostly relying on the credibility of the end user. You're relying on the fact that they are who they say they are. Whereas on sovereign you're relying on issuers, trusted parties. You mentioned earlier, for example, an id card or a similar credential. A good example would be a degree. What you're really trusting on sovereign is the issuer of that credential.
00:15:54.550 - 00:16:30.750, Speaker B: You are trusting the university rather than the individual. And this is a great strength for sovereign. Further to that, sovereign supports revocation. So if somebody has a credential initially and they are then no longer eligible for that credential. Due to the nature of distributed ledger technology, it is possible to verify whether a credential has been revoked and if somebody would be incorrectly or unlawfully using a credential they no longer have. And solid doesn't support this functionality.
00:16:32.050 - 00:17:05.302, Speaker A: Yeah, exactly. It's a good point about refocation because the revocation register is really one very strong reason why sovereign needs a ledger. Why it needs a blockchain. Because often this question comes up like okay people, you're building blockchain based system. Why need a blockchain? Do you need a blockchain? And you have this funny image, do you need a blockchain? No. Or simple seven step line diagrams that always lead to no, you don't really need one. Well, sovereign needs a blockchain amongst others, that revocation.
00:17:05.302 - 00:18:32.418, Speaker A: Because with the blockchain you have this hashed ledger with full historical integrity where you know that, okay, at moment x or moment t, something was issued, a credential was issued by say the dutch government or your bank or university, and somebody might receive that data and have very strong cryptographic proof that you have indeed received that degree or have received that birth certificate. However, how could they ever likely check whether that university or that government hasn't later issued a statement? Well, actually this was false because it turns out Aaron didn't actually make his grades in university and he didn't actually get his degree. In a world where you would, well, let's say a solid world, I would imagine the application that issued it would be hosted by the pod of the university. And then you would query that pod and it will say, well, no, it's not. Not valid anymore. But yeah, what if there was a man in mill attack there? What if that pod was offline? What if data could provide a better pod, could change at any moment, whereas with the blockchain structure you would have a later block or a later transaction. You could very reliably see that, okay, there was indeed a revocation issued by the University of this particular claim, this particular credential.
00:18:32.418 - 00:19:27.610, Speaker A: And yeah, the blockchain there really gives you very strong guarantees that that is so, which to my knowledge wouldn't really be able to achieve by any other mechanism. So yeah, that's at least a strong reason and a strong point of sovereign that it does it that way. I'd be curious to see how such things would be solved in solid. Something else that struck me within solid is like it defines the read light web in protocols and authentication. So I have my pod and I say, okay, UCL can have access to this particular data item and you can, in fact, you can write to it. Here's your permission. And I'm very happy because I know that you will be able to write and somebody else won't because I've given you that permission.
00:19:27.610 - 00:20:54.150, Speaker A: However, on the reading side, if there's a simple example of I publish an image and UTo publish a comment on that image, and we have the link data that links your comment to my image and your comment is stored in your pod and my image is stored in my pod. But there's no cryptographic hashing or content addressing such as you would see in ipfs, a decentralized file system or data sharing system, which is content addressed ipfs gives you very strong guarantees that the data that I serve you for a particular address or particular hash is always the same because you don't always check that the data I have served you compiles to that hash on your end and on installed. It's really, I would say, the old model of the web, where a URL is HTTP errandspod image one jpeg. But I might serve you one set of bytes for that JPEG image today and might serve you a different set of bytes for that image tomorrow. And you would never see which one is the correct one because all you have to go on is the image URL. So it would give you much less strong guarantees on data integrity. At least it's not something that's built into the core solid protocol.
00:20:56.990 - 00:21:02.534, Speaker B: Indeed. All right, if we were to summarize.
00:21:02.582 - 00:21:03.180, Speaker A: Then.
00:21:04.990 - 00:21:31.346, Speaker B: Solid is this new privacy focused data standard for the web, very much focused on a sort of interim solution that integrates with existing standards. Sovereign is a more web3 like standard with stronger credentialing and cryptographic guarantees. All right.
00:21:31.528 - 00:22:06.426, Speaker A: Yeah, so indeed, good summary overall, although we see that there's several points where we're solid is apparently not as strong as it could be. I do very much like the programming model that they introduce of bringing applications to your data and having that idea of user sovereignty into your data. So yeah, look forward to where it goes at. And yeah, thanks, Theo, for presenting, and thanks everybody for watching. See you in the next one.
00:22:06.608 - 00:22:07.160, Speaker B: Thanks. All.
