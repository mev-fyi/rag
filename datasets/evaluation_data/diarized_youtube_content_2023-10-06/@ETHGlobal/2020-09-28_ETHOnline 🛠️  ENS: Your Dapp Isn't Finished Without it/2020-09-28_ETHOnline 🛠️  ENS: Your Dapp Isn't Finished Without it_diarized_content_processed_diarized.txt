00:00:22.230 - 00:00:30.266, Speaker A: Great. Thanks for joining everyone, for this ENS workshop. We've got Brantley Milligan, who's going to.
00:00:30.288 - 00:00:38.180, Speaker B: Run us through ENS Ethereum name service. If you're not already familiar with it.
00:00:38.710 - 00:00:44.900, Speaker A: The talk is titled your Depth Isn't Finished Without It. Bradley great.
00:00:45.270 - 00:00:58.200, Speaker B: Yeah, thank you so much for having me here. I'm going to do a screen share. Oh, did I do that right? Did I do the screen share right?
00:00:58.650 - 00:01:01.960, Speaker A: Yeah, it looks like it's loading. Yeah, just give it a second.
00:01:05.290 - 00:01:07.100, Speaker B: Yes, you see it now?
00:01:08.990 - 00:01:09.914, Speaker A: Yeah, it looks good.
00:01:09.952 - 00:01:32.254, Speaker B: It's working. OK, perfect. Okay, so my name is Brantley Milligan. I work for an organization called True Names Limited, which is a nonprofit based in Singapore. Although I do not live in Singapore, none of the team actually lives in Singapore. And we are the de facto managers of the open source project Ethereum Name Service. So I make this distinction.
00:01:32.254 - 00:01:57.450, Speaker B: It's just important. Like, ENS is an open source project nobody owns. Like, I don't work for ENS, although sometimes I'll say that I work for an organization that helps to develop this open source project. There's our GitHub, there's our website. You can learn a lot more about it from there. Our lead developer and the creator of it, of course, Nick Johnson. I'm going to be talking about what is ENS, how ENS works and how to integrate it.
00:01:57.450 - 00:02:35.366, Speaker B: That's the outline for today. So ENS, of course, the Ethereum name service. I'm going to talk about what this means. I'm actually going to start with the second part first, which is how is it a name service? So the interesting thing about naming on the Internet is that it's absolutely crucial. Everybody uses it all the time, constantly, but it's like one of these things lower on the stack that just kind of works that you don't even have to think about. So a lot of tech people actually don't even know really what they haven't even thought about. Like, what is a naming service? What does it do exactly? So a naming service, a lot of people overcomplicate it.
00:02:35.366 - 00:03:08.394, Speaker B: It's really simple. It's just a lookup system, that's all. There's nothing else to it. You provide a name, it provides you with some information. Your computer then might do something with that information, but that is separate from the naming service. So why do we have naming services? Because identifiers that make sense to computers don't necessarily make sense to humans. So for computers, they can deal with long strings of numbers and letters and identify the differences instantly.
00:03:08.394 - 00:03:43.462, Speaker B: They can auto generate these things. It doesn't really matter which one you have or something like this from a social standpoint. Whereas humans, we deal with words and language and social contexts and things like this. So a naming service just bridges that gap. So ENS is a naming service just insofar as it has names, it has owners of names, or really who is able to change the records of a given name and then records that can store any arbitrary information. So if you have a name, you can look it up and retrieve the records and then do something with that information. So, for example, this is a very common misconception.
00:03:43.462 - 00:04:32.858, Speaker B: Some people think that if I send some Ether to Brantley ETH, for example, that somehow you're telling ENS to send the Ether, then ENS sends your transaction along or something like all. That's not how it works at all. The way it works is that let's say I'm in Coinbase wallet and I want to send Ether to Brantley ETH. You type in that name. Coinbase Wallet does a lookup in the background of what is the Ethereum address that Brantley ETH resolves to grabs. That brings it back and then it sends the transactions on the network. This is why ENS can resolve to Bitcoin addresses, litecoin addresses, it can have IPFS content, any of these things.
00:04:32.858 - 00:05:20.540, Speaker B: A lot of times this confuses people say oh, how can I send Bitcoin to Brentley E? Well, it's because it just means that the Bitcoin address is stored in your records, but the wallet is what's sending it on the Bitcoin network. So ENS doesn't do as much as people think it does. It's very simple. So why is it the Ethereum name service? It is not because it's a naming service only for the Ethereum ecosystem. It's because it's a naming service built on Ethereum. So like the logic and the records are stored on the Ethereum blockchain, but it can store information relevant to anything. The one way I like to think about it is, let's say with normal DNS servers, maybe the server is running on Linux or maybe it's running on an Amazon Web Services or whatever, it doesn't matter.
00:05:20.540 - 00:06:03.574, Speaker B: It can serve information to a Windows computer, right? It's just kind of where it's stored. And in our case, yes, everything runs in Ethereum, but it can provide information to any client relevant to any blockchain or non blockchain thing. So why do we use Ethereum? So if ENS is kind of ultimately blockchain and even non block like blockchain agnostic or even agnostic even to what technology is providing information about, we could be on any blockchain or even our own blockchain. So why do we use Ethereum? Because it's the best blockchain. Because it's the best one. I mean, really though, we truly do think it's the best for naming. Why? Well, because it has high security and high decentralization.
00:06:03.574 - 00:06:32.558, Speaker B: We don't have to create that. It has tons of ecosystem infrastructure MetaMask and fur. I mean, all these wallets and all this stuff we don't have to reinvent. It has standards. Like all ETH names are ERC 721, which means that NFT. So that means E name is plugged into all this growing NFT infrastructure. We don't have to reinvent it programmability and then interaction with other smart contracts on Ethereum.
00:06:32.558 - 00:07:16.386, Speaker B: This is truly revolutionary in my mind because ENS is on Ethereum. It means that Internet names are like smart contract objects that can interact with other smart contracts that have nothing to do with Internet naming. So you could be like when the chain link oracle says, who wins the election, it transfers this ENS name from this Dao to another Dao or some. I mean, you could do something like that, but only because we're on Ethereum. So we have all this composability with everything else. So ENS uses Ethereum to serve the Internet, including and beyond the Ethereum ecosystem. And our goal is to make ENS and therefore Ethereum a basic piece of Internet infrastructure used widely by people, whether they are part of the blockchain community or not.
00:07:16.386 - 00:08:16.158, Speaker B: This is our goal. As Richard Moore, who manages Ethers JS as a popular library, he said at last year's DevCon, he know the possibilities. Like Internet naming is such a huge thing that if ENS was successful and if it was the only thing that was successful, the only DAP that was successful in the Ethereum ecosystem, that alone would make the Ethereum project an extremely successful project. It would make the Ethereum blockchain a necessary piece of infrastructure for the whole world, even if ENS was the only thing. Of course, there's far more going on beyond ENS, but this is how we view the possible scope here we think is enormous. And how are we doing? We're doing this by complementing the DNS tax stack in parallel, expanding the capabilities of the existing DNS namespace. I'll be talking about this more in a second, focusing on cases not served by DNS and in some cases not possible on DNS.
00:08:16.158 - 00:08:47.386, Speaker B: So some blockchain projects are like, we want to replace DNS or take down the legacy community. That's a fine approach. That's not our approach. We don't even think it's desirable to take down the current DNS. It's really important, it works really well. We want to work with that community, build relationships and expand the usefulness. We want to grow, we don't want to destroy.
00:08:47.386 - 00:09:24.486, Speaker B: That's our strategy. Okay, so how does ENS work? We run no servers for ENS proper. So yes, our website is on a server in a web server, and our manager user interface is on a web server, although that also is on IPFS. But ENS itself has no servers. It runs entirely as a set of smart contracts on the Ethereum blockchain, which also means you don't need any permission to use the system. You can just start using if you have access to the Ethereum blockchain. This is of course, completely different to traditional DNS, but this is often confusing.
00:09:24.486 - 00:10:14.940, Speaker B: People say, like, oh, can we get access to your API or something? Or how do we integrate? ENS. Well, you can just do it because it's all public on there. There are three main smart contracts that make up ENS ENS. We try to make ENS actually as simple as possible to reduce the complexity and to limit the attack surface. So the most important smart contract is the registry. So it's just a single smart contract that holds what names exist, what Ethereum accounts own those names or have the right to change the records, the resolver for each of those names, which is really where do I find the records, where do I find the smart contract that has the records for this name? And then another TTL, which I won't talk about because we don't use. But that is in there something from the DNS world.
00:10:14.940 - 00:10:43.842, Speaker B: That's the main smart contract. Super important second resolver. So resolver contract is a smart contract that stores and serves records. Like, like when you do a lookup, you have the name, you look up the name, oh, and you find out where the records are. And then you look up that smart contract and get the records. The third important type of smart contract is a registrar. So this is like how names are given out.
00:10:43.842 - 00:11:28.346, Speaker B: So for ETH names, ETH is owned by a smart contract that will give you a ETH name if you meet certain criteria. So in this case, if you pay $5 worth of Ether and it's not already taken, you get it for a year or something. We put this logic in it, but this means that that's all done automatically. There's not like a company that's distributing this or managing your name. Again, completely different from the DNS world. Of course, to make any change to ENS, whether it's register name or change a record or something like this, you just have to submit the right set of Ethereum transactions on the Ethereum network. But resolutions or lookups of course are free.
00:11:28.346 - 00:12:05.766, Speaker B: They don't cost anything because there's no change to the Ethereum blockchain state. You're just looking up for information off the Ethereum blockchain, which of course you could even be doing on your own local nodes. Like I run an Ethereum node on my laptop I can set. So MetaMask is working with that. And if I'm like sending to Brantley ETH with MetaMask, it's doing that lookup on my own local machine. So it's like I have all of ENS on my local machine, which is interesting. So what do ENS records look like? So the fact that ENS records or resolver contract is separate from the registry contract.
00:12:05.766 - 00:12:48.986, Speaker B: We could have just put that all into one contract, right? One contract to have the names, the owners and the records. But that would mean it'd be really hard to ever change what the records are like to add new record types and things like this. So we separate these things out because now we can easily upgrade the resolver contracts without having to touch the registry contract. This also means that anybody can create their own resolver contracts and have their name point to it. So you have a custom resolver. Now we have a resolver contract that we call the public resolver, which has all the kind of standard ENS record types and that like 99.9% of people use.
00:12:48.986 - 00:13:18.626, Speaker B: But just know that you could have your own record types if you wanted to. So this is what the public resolver this ENS record set that we manage, that pretty much everybody uses, this is what it looks like. So first we have an address record type, and this just stores an ethereum address. Very simple. It could be externally owned account, or it could be a contract address, other addresses. So this is just any other arbitrary cryptocurrency. You can store any other arbitrary cryptocurrency address.
00:13:18.626 - 00:14:20.894, Speaker B: We have a content record which currently supports IPFS, hashes, swarm hashes and Tordon ending addresses. Then we have text records which can support any arbitrary information, just like as a text data. Although we do have some kind of standard text record types, we also support all traditional DNS records, although this is not currently available in our managed UI if you're looking for it. But this is in the Smart contract if you wanted to use it, if you wanted to see like an example, okay, what does this look like? Go to app ENS domains and just search for Brantley XYZ. And I have most of the record types used. So you'd look at a real name, what it looks like, what is the namespace on ENS? So an important thing critical to understand about ENS is that ENS is not ETH names. ENS has ETH names, but ENS is broader than ETH names.
00:14:20.894 - 00:15:00.482, Speaker B: So ENS is a superset of ETH names. What I mean by that is ENS is just like naming infrastructure that could ultimately support any names. Dot ETH names are just like the native names that we started with, but it can support any names. And we want to expand the namespace available on ENS. We've decided we're not going to create any new suffixes or top what are called TLDs or top of the domains like ETH. There's very good reasons for that. Mostly that we want to remain compatible with the traditional DNS space.
00:15:00.482 - 00:15:37.626, Speaker B: If you make top level domains, you could eventually have what's called a name collision with DNS. And that would undo the whole point of having name systems that would create problems for people. We think that's actually somewhat irresponsible to just kind of wantonly create tons of name collisions on the Internet. That's a whole nother topic. The way we're explaining the namespace is we're actually just integrating the current DNS namespace. So what this means is if you own a name on DNS, you can then claim that same name on ENS. So I had Brantley XYZ in the example, so XYZ DNS names work on ENS.
00:15:37.626 - 00:16:09.414, Speaker B: So I got Brantley XYZ on DNS. Then we have a process, you have to have that first. Then we have a process by which you basically prove to ENS that you own it on DNS. And now you have the same name on ENS. I think this is like, powerful because you can go to Brantley XYZ and I have a normal DNS traditional website, but then you can also send me Dogecoin to it just it's all the same name. It just works. And it uses either ENS or DNS based on context.
00:16:09.414 - 00:16:37.954, Speaker B: Right? So if I'm in Coinbase Wallet, it's going to use the ENS records to get the Dogecoin address. If I'm in Chrome, it's going to use DNS for the website. But from a user's perspective, it's just one name that does all these things. That's what I mean, that we're complementing. Expanding the usefulness of DNS. We're taking the DNS namespace and just like, adding new features like, oh, now you can receive cryptocurrency payments with the DNS name you already own. So this works now for a couple DNS top level domains we have listed here.
00:16:37.954 - 00:17:38.438, Speaker B: XYZ is the easiest one to do it with in some ways, but we're going to expand this to all DNS toppable domains so soon, in two weeks, roughly whenever we get it done. This should work for like, know everything, but soon. So how does ENS compare to DNS? ENS obviously, is simpler infrastructure. So rather than having servers, we have smart contracts, zero downtime. You can't DDoS attack it because you could be running your own local node. In fact, you could be not even connected to the Internet, and you could be resolving ENS names if you have an Ethereum full node on your computer. Of course it's decentralized and censorship resistant, has built in cryptography and individual ownership, like self custody that doesn't exist on DNS, that doesn't even make sense, which I think leads to better security.
00:17:38.438 - 00:18:20.690, Speaker B: And of course, I've mentioned programmability and interactivity or composability with other Ethereum smart contracts. Totally revolutionary. So why are these things useful? Why is this better? I'll mention by the like, what's revolutionary about ENS is not that, oh, I can send cryptocurrency payments with an ensna. I can't do that with DNS because we actually could store cryptocurrency addresses in DNS records. There's no reason we couldn't do this. And wallets could just be pinging DNS for cryptocurrency addresses. Really what's revolutionary is that we have better security, self custody, censorship resistance, composability.
00:18:20.690 - 00:19:01.330, Speaker B: That's really what's revolutionary. But those features maybe lend themselves to certain use cases that DNS wouldn't be secure for. So the fact that we have better security and censorship resistance means that it's much better to use ENS for storing cryptocurrency addresses because there's better security dealing with money than to do that with DNS, which was never built to do that in the first. So and also IPFS websites because that complements the censorship resistance. And then programmability and interactivity and composability. On Ethereum, you can do things like names owned by smart contracts or groups or DAOs also uses non fungible items. Again, things that you cannot do with DNS.
00:19:01.330 - 00:19:39.290, Speaker B: So how to integrate ENS? Okay, so you think ENS is interesting you want to use it in your DAP. So the goal to keep in mind is that every time a user might otherwise see like a cryptocurrency address or content hash or something, they should instead see an ENS name. Cryptocurrency currency address is great for software. Terrible user experience. Users don't even need to know that they have Ethereum addresses. I mean, it's like how many people today, just normal people on the street, know that their phone has an IP address? They don't even know what that means. It's all hidden away with DNS in the software.
00:19:39.290 - 00:20:13.126, Speaker B: Same thing for cryptocurrency addresses. That should be the goal. So, specific examples. So the number one use case kind of our bread and butter is cryptocurrency address forward resolution. So forward resolution means that somebody provides a name and then your client or your DAP looks it up and gets the cryptocurrency resolves it to a cryptocurrency address. What does this look like? Oh, I want to send dogecoin to somebody rather than pasting. In their cryptocurrency address, I put in Ethereum ETH.
00:20:13.126 - 00:20:46.260, Speaker B: Oh, it got the address. I guess this is an Ethereum address and then it sends that very good. Much better user interface. Second use case ethereum address, reverse resolution. So if forward resolution is name to data or name to address, reverse resolution is address to name. So in this case, let's say I log into a DAP and I log in with MetaMask. So the DAP has my ethereum address.
00:20:46.260 - 00:21:12.074, Speaker B: They will often kind of show that as like my username or what account I'm logged in with, right? This is bad UI. What is that? I don't know what that is. I can't even see the whole number. Right. What the DApp should do is look up, take that address, that theorem address, look up. Do I have any ENS name associated with it? Oh, I do. And then show the name instead.
00:21:12.074 - 00:21:46.610, Speaker B: Much better UI. So, third use case kind of similar to this is ENS names can be used as usernames for DApps. So using your reverse resolution, also DApps can maybe give every user a subdomain. Maybe they get your DAP Ether something, give everyone a subdomain, and set reverse resolution for them. And that's like what they see when they're logged into your DAP. Another use case. So this is entirely non blockchain IPFS swarm toward any resolution.
00:21:46.610 - 00:22:04.874, Speaker B: I mentioned this earlier. So let's say you're in MetaMask mobile. MetaMask mobile supports this. I type in your DAP ETH and it brings up the IPFS website. There you go. This also works in normal browsers, like Chrome on desktop. If you have MetaMask.
00:22:04.874 - 00:22:38.198, Speaker B: It also works in opera on android, brave on desktop. This is all listed on our website, all the places where we are supported browsers. Let's say though, you or your friend is like a total normie and doesn't have MetaMask. They don't know what they're not using Brave, they're not up with it. How can they access ENS and IPFS websites. Well, we have this thing called ETH DNS, which is a DNS bridge to ENS and IPFS. Basically, you just add link to the end of your ETH name.
00:22:38.198 - 00:23:02.490, Speaker B: And now it just works like magic. In any normal browser. It's like you can try. So if you go to like, Almond ETH link, it'll bring itself up just like a normal website. And that's actually a directory of IPFS and ENS websites. You can see what people are doing in that new decentralized web I mentioned. We support Tor, any address resolution.
00:23:02.490 - 00:23:37.546, Speaker B: So this works if you have the Tor browser. It only works in the Tor browser, which is firefox based. If you have the Tor browser and you have MetaMask enabled, if you type in Duckduckgotor ETH and you actually have to put a slash in the end of it. If you do that, it will resolve to the DuckDuck go Tor onion version. Hidden services. I set this up so other people can also you can take Tor onion addresses and you can put that in a content record. Then it will work the same way.
00:23:37.546 - 00:24:09.926, Speaker B: This actually solves, in our opinion, the Tor onion naming problem. If you're in that world, you're aware of it. If you're not, you can look it up. But we think we solve this problem, DNS records. So we're mostly focused on doing things that DNS can't do rather than just replicating what DNS already does. So this is not like a main focus of us right now, but we do support DNS records. In fact, we actually have a project from the DNS world that's doing some really innovative stuff.
00:24:09.926 - 00:24:39.326, Speaker B: So the owners of Cred, they've had this really close integration between ENS and DNS. So if you register a Cred name on DNS, they automatically give you the same Cred name on ENS. They do it for you. Then. This is really interesting. They have the ownership of the DNS Cred name, follow the ownership of the ENS version of it. So you can actually trade around the ENS version of it, and whoever owns that is able to control the DNS version of it.
00:24:39.326 - 00:25:12.918, Speaker B: So, like, if you've ever tried to transfer a DNS name before, you know, it's like a pain. This is way easier, just transferring an know name token. It's just like sending a cryptocurrency payment. It's done that's really revolutionary. Then also they store all DNS records on ENS and IPFS, and that's the canonical version, which is also revolutionary. Then the last thing is just everything we haven't thought of. So, like, you have custom records, you can have custom text records.
00:25:12.918 - 00:25:42.130, Speaker B: Lots of projects are using ENS for things we haven't thought of, like Umbra and other projects. So anytime you have some information that's not user friendly, store it in ENS, it solves that problem. That is the end of my presentation. Thank you very much. So, does anybody have any questions? If there were questions.
00:25:42.200 - 00:25:46.500, Speaker A: Where would I see it be in the chat? I'm just scanning it now.
00:25:46.950 - 00:25:58.260, Speaker B: Oh, here we go. 70% of other platforms are just abstraction of yes. I don't know what that means.
00:25:58.710 - 00:26:03.438, Speaker A: That's just the offhand comment. Yeah, true, but offhand rick Moo.
00:26:03.454 - 00:26:22.410, Speaker B: Yeah, I like Rick Moo too. Okay. It's possible to do this in a programmatically way inside a smart contract. Amazing. Everything with ENS can be programmed with smart contracts because it's on Ethereum. Don't forget gas costs. Yes, gas costs are a problem.
00:26:22.410 - 00:26:41.762, Speaker B: So we're on Ethereum, which means that even if, like, oh, DeFi is going crazy, making gas cost a lot. It makes ENS things cost a lot. So there's a problem. Although gas is a little kind of cheap right now, so if you want to do ENS things, this would be the time to do it. We're looking into layer two stuff, though, to try to make that cheaper. Great.
00:26:41.816 - 00:26:51.730, Speaker A: Any recommendations for an easy way to approach integrating ENS? What would you recommend for hackathon like Ecommerce?
00:26:53.350 - 00:27:20.710, Speaker B: Yeah, I mean, if you ever have a time, a place in your DAP where somebody is going to be pasting in an Ethereum address or Bitcoin address or whatever, they can do that, but also make it so they could put in an ENS name if they wanted to as well. That's super simple. And if you go to our docs docs ENS domains, we have a library section where, like, in all the top libraries, there's like a single line of code. Boom. Now it works. It's not hard to do. And we have a prize.
00:27:20.710 - 00:27:51.078, Speaker B: We have a prize. So we're actually giving $150 worth of ETH to the top five projects to integrate ENS. And that might not seem like a huge amount, but the way we think about it is whatever else name of this was, your DAP isn't finished without ENS. Whatever else you're doing, just add ENS into it to make for a better user interface, and then you can also get our prize in addition to whatever other prizes you're going for. I'm in. Ha ha. Perfect timeline for layer two.
00:27:51.078 - 00:28:21.630, Speaker B: No, because we haven't figured out what we want to do there. We're actively looking into it. Any layer two chains we register? No, there's nothing available right now, unfortunately. That is unfortunate. How about transferability for subdomains? So subdomains work just like normal names. So, like, if I own Brantley ETH, I could create Trent brantley ETH. And I could give that to Trent.
00:28:21.630 - 00:28:52.118, Speaker B: Trent controls that and he can have normal records just like any other name. And so yeah. Any examples of how can this be? Turtles all the way down. Can you just have unlimited number of subdomains, subdomains and subdomains? I think so. I don't know if there's a limit. There might not be a limit. I don't want to say that there's not, because people usually don't go more than maybe three deep just in general, because it just starts to get unwieldy.
00:28:52.118 - 00:29:13.166, Speaker B: Like, if I had Brantley callaway Milligan Person America ETH or something, it ends up not being useful anymore, which is like the whole point of a naming system. But yeah. Okay. I think you can go as deep as you want, but I'm not 100% certain. Let's try. Yeah. Carlos BEZA.
00:29:13.166 - 00:29:17.314, Speaker B: Just see how far you can go, man, and let us know what the answer is.
00:29:17.512 - 00:29:33.090, Speaker A: There's probably a limit on, like there's a limit on how much storage can be put into a contract. So maybe you'd bump up against the contract size limit for how much data can be put into an NFT.
00:29:33.250 - 00:29:44.022, Speaker B: Correct. I mean, ethereum by 32. Yeah, there you go. I'm sorry, I didn't know that. But like I said, it doesn't practically come up because people don't usually go more than three deep.
00:29:44.166 - 00:29:47.740, Speaker A: You shouldn't be hitting this if you're doing it right.
00:29:48.350 - 00:30:21.010, Speaker B: Can owner of topple domain control the subdomains? Yes. Okay. So ENS works with the smart contracts, works hierarchically, like DNS, insofar as if you own a name higher up in the pyramid, you are able to control everything lower on the pyramid. So, like, if I have Brantley ETH, I control that. I can transfer ownership or take over control of any subdomain at any time. So if I created Trent Brantley ETH I gave that to Trent. I can take that away from him because I controlled Brantley ETH.
00:30:21.010 - 00:31:26.460, Speaker B: Now, a way to get around this is I could transfer Brantley ETH to a contract that now nobody owns Brantley ETH. And maybe it automatically issues subdomains to people because you can have names that nobody can control because let's say they're owned by a contract, and that way people could have subdomains and know that nobody can take it away because the smart contract doesn't allow that. In fact, if you go to we haven't really maintained it a huge amount, but if you go to now ENS domains, you can instantly get subdomains off of names that people have put on there, like, maybe for a very small price. And in fact, this is ultimately how ETH itself works. So we could own ETH. But ETH has a registrar insofar as just as a smart contract that controls giving out subdomains of ETH. So, like, Brantley ETH is a subdomain of ETH, but nobody can do that because a smart contract controls it.
00:31:26.460 - 00:31:39.360, Speaker B: Okay, correct me if I'm wrong, but do you not have a GSN relayer style contract call for registering? Do you? I guess I'm not sure exactly what that means exactly.
00:31:39.910 - 00:31:44.050, Speaker A: They're asking about a relayer gas station network.
00:31:44.630 - 00:31:51.906, Speaker B: We don't but we've talked to Opengsn about possibly doing something with them that.
00:31:51.928 - 00:31:57.320, Speaker A: Might be a hackathon idea. Yeah, because GSN is a sponsor of the event.
00:31:59.450 - 00:32:40.510, Speaker B: I'll say there is a huge amount that we could be doing with it's. Just we just have to do like it's not like, oh, we've reached the pinnacle. At all. Great. Any other questions? Can a domain have more than one controller? Good question. So for those who don't understand this question, every second level domain, so that's like Brantley ETH, what we would consider like a normal domain has what's called a registrant and then it separately has something called a controller. It's going to be a little bit confusing, but it's actually really useful.
00:32:40.510 - 00:33:37.800, Speaker B: So the registrant is the Ethereum account that basically ultimately owns a name. And what it can do is it can set what the controller is and then the controller, whoever's the controller, can set the records of the name. Now why would you want this? Well, because maybe I want to maintain ownership of the name, but I want to let Trent set my records for temporarily, but then I want to be able to take back that power. Right, or like there's a website, Fleek, where it will do things like automatically update the content record when you do a new IPFS deployment. You can do that by making it the controller, but you still control ownership of the name, the registrant, meaning you can always take them away as being the controller. That's actually really useful, so that distinction is helpful. However, if you are the controller, you can change any record.
00:33:37.800 - 00:34:31.000, Speaker B: We don't have like record specific controllers, but it is in our backlog to add that feature at some point. So that if you want to say, hey, Fleek, I want to give you the power to basically change my content record whenever I do an IPFS update or something like this, but I don't want you to be able to change my Bitcoin address or something like that. So we'd like to do that in the future. Right now there's just one controller and it controls everything. Any ideas that you would like to see? Yeah, I mean the ability to pay like in other Ethereum based tokens would be really great. Like using maybe Opengsn or something like this, that would be really great for a manager. We are expanding our address encoding library all the time, if you know what that is.
00:34:31.000 - 00:35:11.810, Speaker B: We store all cryptocurrency addresses in binary on chain to save space, which means that if you want a cryptocurrency address to be supported in a wallet or something like this, we have an encoding library that decodes from binary. So although we support all arbitrary cryptocurrency addresses in principle, in practice, wallets end up only supporting what's in our encoding library. Our coding library has like 30 cryptocurrencies, like all the top ones you'd want, but we'd like to massively expand that to like 100, like all the top hundred. So people can always expand that. Got to run. Thanks, Brantley Rock. Hey.
00:35:11.810 - 00:35:26.806, Speaker B: Oh, that was Heather. Okay, she has to say nice things about me, but I thought it was like another person. Yes. Integrate ENS in your project. You'd be slowly not to. Yes, you should listen to Heather I.
00:35:26.828 - 00:35:44.350, Speaker A: Think one of the questions from YouTube that maybe got passed over was any examples of how we can integrate it into our DAP. Maybe a better way to frame that is where can people go to see good examples or specific code that you think is a good representation of integration?
00:35:45.570 - 00:36:30.394, Speaker B: Yes. If you go to ENS Domains, our homepage, and scroll down, we have an ENS ecosystem section. I think we have like 160 different projects that have integrated ENS in different ways. So you can just start looking at them and see what they've done. I mean, they've done different things. So there's tons of projects using ans if you want to see examples, if you go to our docs docs ENS domains, like I said, it shows how using libraries integrate very easily. And like I said in the presentation, the easiest way to do it is if somebody has to input a cryptocurrency address, make it so that they could input an ENS name, and you just go grab the cryptocurrency address.
00:36:30.394 - 00:36:55.858, Speaker B: And again, with a library, that's very easy to do. That's super simple. The other super simple thing is if they are logging in to your DAP, like with a MetaMask or a wallet, and you're going to be displaying their ethereum address, like as their username, do a reverse lookup and display their ENS name instead. Again, super simple. Much better. UI. I figured out ENS with swarm.
00:36:55.858 - 00:36:57.480, Speaker B: Okay, there you go. Cool.
00:37:02.490 - 00:37:18.700, Speaker A: Anything else? Let me check for some last minute comments in YouTube. I think that might be it, unless anybody wants to share anything unmute themselves. But I think we may have touched on all the questions people had.
00:37:21.170 - 00:37:56.534, Speaker B: Awesome, Carl. Thanks, guys. Love. So, oh, last thing I'll say is, whether you're in a hackathon or not, if you add ENS into your DAP in any way, let us know and we'll put your logo and link on our website. And then also if you tweet out, hey, my DAP now has ENS, and maybe a screenshot of how it's been used or something like this, tag us and we'll retweet you. And people often get a lot of attention when they do it because people are like, oh, great. People like ENS.
00:37:56.534 - 00:38:01.770, Speaker B: They like when people add ENS. Like I said, it's an easy win because it's not hard to integrate.
00:38:02.670 - 00:38:10.382, Speaker A: For sure, people underestimate the small things that add up for making user experience a little bit better.
00:38:10.516 - 00:38:11.200, Speaker B: Exactly.
00:38:11.890 - 00:38:34.690, Speaker A: All right, I think we could wrap there. Thank you, Brantley, for once again sharing at an ETH global event, unfortunately remotely. One day we'll get back to in person. Yes, but for now, we're online. We are ETH online. Thanks everybody, for showing up, listening, giving your questions. Oh, there's another question in the chat.
00:38:35.270 - 00:39:17.620, Speaker B: One irrational fear I have a Venus is that the dev does something wrong and causes the name to resolve to a wrong address. Any thoughts on that? Yeah, I mean, if the code is set up correctly, and it's very simple code, it should work every single time. It should never make a mistake. However, I would say I recommend it from a UI standpoint. I show this in my presentation. Like, if I'm supposed to send Ether to somebody and I type in Brentley ETH, it's nice if you retrieve the Ethereum address and maybe put it in small font under the name so a person can just verify it if they want. That's a way to kind of go against that problem.
00:39:17.620 - 00:39:35.482, Speaker B: But ultimately, like I said, it's very simple code. If it's working at all, it'll work every single time. I'm not aware of any cases in which this problem happened, but we'll see. Cool.
00:39:35.536 - 00:40:14.062, Speaker A: I think that covers everything. My last logistics stuff to cover is, if you haven't staked and you've been accepted, please do that today, tomorrow, before the kickoff on Friday. If you're trying to get teammates to join who haven't joined already, please do that as soon as possible so we can get them onboarded, get them settled in the discord. The sooner that happens, the better it will be for your team's chances. What else? The kickoff on Friday. We're going to be sending out the invite for that, but you're definitely going to want to come to it. It's part of a larger set of summits which are themselves underneath the ETH Online umbrella.
00:40:14.062 - 00:41:01.722, Speaker A: So ETH Online is not just a hackathon. It's also a weekly series of summits, like I mentioned, and each week has a different theme. So this Friday, if you were in the brainstorm session a few hours ago, mariano Conti is going to be giving a talk I believe it's Intro to DeFi and a whole bunch of other talks from various people around the space. And then next week, another summit, and a summit each week on Friday in October. So you can hack, you can go to these summits, and if you need your Ethereum fixed, this is the event to get it at, so you can register for that separately from the hackathon. Yeah, I think that's all the logistics stuff I had to cover. We look forward to the tutorials.
00:41:01.722 - 00:41:19.346, Speaker A: Sorry, workshops tomorrow. RSVP to those if you haven't already. We've got another full day tomorrow, Wednesday and Thursday, so it's going to be pretty full. But thank you again for everybody coming out. And Brantley, as always, thank you for teaching us about ENS.
00:41:19.458 - 00:41:21.990, Speaker B: Thank you. I love ETH global events.
00:41:22.650 - 00:41:23.540, Speaker A: Appreciate it, everybody.
