00:00:07.130 - 00:00:53.082, Speaker A: So I'll be explaining how to use Uniswap and Suave together. Suave is a platform from Flashbots to do confidential computation and have private data storage catered towards mev use cases. I'll explain all of this shortly. Reasons to use Suave right now there's a lot of applications that utilize whitelists so like running off chain auctions for state accesses. I won't name any of the specific ones, but this really isn't like the DeFi ideal in many cases that we had imagined sort of these lists that we hold on private servers and you may or may not have access. So we're hoping Suave can help fix that. Remove or reduce staking requirements.
00:00:53.082 - 00:02:07.170, Speaker A: So there's some examples of solver platforms that are unable to sort of protect or properly enforce correct behavior, so they resort to slashing. And in some of the most popular cases of this, like in solving, for example, there's like over 100K USD requirements to stake in order to participate. And so using a credible computation platform where we can sort of ensure that a solution you had submitted is correct and obeys the rules of the protocol, we can actually lower Staking requirements and therefore creating a more competitive market. Cheap Proofs so right now I think everyone's exploring ZK proofs stuff like Fhe, MPC, some of those are more multiparty computation as opposed to like a proof platform. We eventually hope to migrate Suave towards one of these new technologies. But the idea is right now that we use an SGX or trusted execution environment to sign off on computation, and that's basically extremely cheap. And we'll get into that and then assure users.
00:02:07.170 - 00:02:51.818, Speaker A: So everything is basically Suave exists as like code deployed on these SGX machines and you can basically ensure that people are running auctions fairly. If you've ever heard of the credible auctioneer problem, one example right now is the DOJ is suing Google for manipulating ad auctions. And there's something like 30% increased revenue because not only are they the auctioneer, but they also set your bidding strategies and so they're able to basically inflate profits. Cool. At Flashbots, we've had a couple of mev applications. We have Flashbots protect. We have mev share.
00:02:51.818 - 00:03:31.790, Speaker A: There's been various other protocols that have come online to handle mev and Mev redistribution, but each of them we can even zoom into Mev Share. Mev Share has about four parameters. How much a user gets refunded on their mev, what is the distribution of the refunds? Like, say, a searcher extracts 0.5 ETH, how much does the searcher get? They actually did work. How much does the protocol get, how much does the user get? Maybe there's even another party involved. So there's all these parameters. And also we have this model of programmable privacy where, say, you send a swap to one of these platforms, you can purposefully leak subsets of the information to searchers.
00:03:31.790 - 00:04:36.978, Speaker A: The less you leak, the harder it is to search on it. And so the big question is like where is the privacy efficiency frontier? And this is all to basically say there are many mev application designs and every person is basically rewriting from the ground up their own private servers to handle these things. So in that sense Swab is designed as an open marketplace for mev applications, which we call swaps Swab applications. Some examples of existing mev applications include private RPCs order flow, auctions, block builders, relays, shared sequencers and basically whatever you could imagine. Here's roughly what Swab looks like. So basically, who here is familiar with okay, okay, two raises. Okay, so SGX is basically a type of hardware designed by intel where they essentially bake the private key into the hardware on its construction.
00:04:36.978 - 00:05:29.240, Speaker A: And then if you've ever seen someone trying bank robbery deterrence where they have sort of like ink inside the money so when you steal it, it basically ruins the money and gives away that you stole the money. That's sort of how an SGX works. If you try and pry it open you actually ruin the device and it's no longer usable. And so yes, we're essentially placing a lot of trust in intel because they're putting these private keys in at manufacturing. But there's arguments that intel is very incentive aligned with this design because we're basically driving more people to purchase SGX. It would be a very weird end game if they wanted to control all private keys and then suddenly just rug everyone. It's probably much less money than they make just from selling chips like they normally do.
00:05:29.240 - 00:06:15.346, Speaker A: So yeah, Swab is basically a network of these SGX nodes. SGX is also a subset of something called Trusted Execution environments or Tees. So we call a node a kettle. It's a T kettle, it's the little joke. So the nodes on the network are called kettles, they run on this trusted hardware and they also have access to ETH l one state that is also located on SGX hardware, the user then interacting with their front end will have some type of order flow. Maybe it's a transaction, maybe it's an EIP 712 message. They encrypt it to the public key associated with this trusted hardware and then they send it there.
00:06:15.346 - 00:07:14.482, Speaker A: And this is how you ensure that no one can basically monitor your order flow in the middle, try and steal it and put it on chain before and front run you. And then the second thing to point out is that the Swab network, these kettles can put out both bundles and blocks. So if you're unfamiliar with what a bundle is right now there's about eight block builders on the Ethereum network. The main unit that they work on in order to create these blocks are bundles. And this is basically you can send in three transactions in a bundle and you're basically specifying I want this to go into the block in this three orders. And so you can think of back running as an example where you have a swap and then you also have the backrun on the swap. So the swap leaves a pool mispriced with another pool.
00:07:14.482 - 00:08:03.880, Speaker A: A searcher then creates a back run which ARBs this pool back and they want them to go together because if someone else is inserted in the middle of that they might lose out on the Arbitrage opportunity. So it's basically they want these two or nothing. Cool so swap provides three core benefits to mev applications. The first is private data storage. And I'm going to show in a bit, a little bit more of a zoomed in diagram on how these actually interact in a kettle. But so, private data storage. So your mev application on Suave has access to a place where you can store encrypted information and then also process encrypted information when you upload a program to Suave, such as a mev application.
00:08:03.880 - 00:09:23.040, Speaker A: Confidential Computation, that was the second part as I just alluded to, you can basically put a program on there. It operates on this private data and ideally it leaks no information out. Although you can design a mev application to purposefully leak information, there are use cases for that and then sub ETH L One coordination time. There's a little bit of a marketing term we do have a chain on these Suave kettles but it's much shorter and then also a lot of the computation is done off chain so you can coordinate ETH L One activity faster than ETH L One. So yeah, the private data storage utilizes the Confidential Data Store and basically the key here is that swaps define the shape and operations performed on user data. The kettles transfer this confidential data between each other so that if you hit one you can still do a second part of your computation, potentially another one data modeling. So you can include anything transactions, user ops, 712 messages, bundles, simulation results, intermediate values, partial and full blocks if you wanted to do maybe like a shared sequencer and Social Security number just kidding, don't put that on there.
00:09:23.040 - 00:10:24.606, Speaker A: It points out though that you could put a Social Security number on there but if you're familiar with the hacks that have gone on with SGX, you should sort of assume there's one like every two years and maybe that'll get larger. But the idea is we are running auctions on this platform and so if you run an auction and suddenly all your bids get leaked a year later, it's not really a big deal whereas if you put your Social Security on their number on there, that's definitely a big deal. Cool and then access control. So when you put Confidential Data in the Confidential Data Store, you actually specify which programs are allowed to operate on your data explicitly so you don't have to worry about accidentally giving access to some builder who will just start front running you left and right. Confidential Computation utilizes the swab chain and Confidential compute requests. So Swab chain is you can think of it as a marketplace. I said that earlier.
00:10:24.606 - 00:11:28.134, Speaker A: You can think of it sort of like the App Store, right? In that when you go to the App Store on your phone, you download an app and then you start running it locally. Maybe it makes calls to a cloud, but let's ignore that for now. So in this sense, that's exactly what we use the swab chain for, is that you upload solidity contracts to Swab with some additional pre compiles to do cool things like simulating bundles or maybe sending it to a block builder and then what was I saying? Yeah, so you upload these to the swab chain and all of the kettles keep in sync with the latest contracts. And when you do a computation, it basically uses your program on the swab. It uses the program from the swab chain, but it doesn't do the computation on chain. But you can define in your swab application to push something back to the chain. One example of this is there's this thing where it's actually more efficient if you're making a crazy large trade, like 100 million or something.
00:11:28.134 - 00:12:19.334, Speaker A: We saw this on Cowswap, an example of this where some dow is like dumping a very large amount of tokens and they got a very subpar price because they just tried to dump it all at once. And the idea is there weren't buyers of the tokens ready to come in and buy it. So if you sort of announce like two days ahead of time, like, hey, I'm going to sell these tokens, then you sort of incentivize the market to be like, okay, there's going to be this big sell event and now we can go buy it. If that's the case, that's maybe not for all tokens. And then lastly, would be a confidential compute request, which is a new transaction type to basically define how this computation is performed. And I'm happy to get into the weeds another time on how this works. If you're working on a swap and then sub E l One coordination time.
00:12:19.334 - 00:12:44.054, Speaker A: So again, although the programs are on chain, you're not actually executing them on chain and needing to go through consensus in order to output it. And so, yeah, this is how we bring it all together. Also, I'm realizing this is quite hard to see, so apologies for that. We can see a swap dev. Maybe you they upload programs to the chain. Inside of the kettle. We have something called the Mevm.
00:12:44.054 - 00:13:15.802, Speaker A: It's a modified version of the EVM, which basically gives you access to this confidential data store. And then as well, we maybe have some ETH l One state. So say you wanted to control something about your swap based on what the underlying pool looks like on ETH l One. You can actually query l One from the Smart contract and then do some logic based off of it. And again in this example you can output a bundle. So, some quick ideas. I'm just going to run through these.
00:13:15.802 - 00:13:51.538, Speaker A: So you can do dynamic fees such as an MC AMM or a DMC AMM. These are E three search posts. Definitely check them out. I don't have time to explain all of them. Essentially, the idea is in most pools that have high volume, the first transaction in the block is an arbitrager. So you can essentially auction off the first transaction in a pool on Suave. And so Suave will spit out a signed message and you as the arbitrager need to present that signed message in order to be the first one to swap.
00:13:51.538 - 00:14:26.480, Speaker A: And the idea is the pool would then charge you a higher fee. And so this is how you could integrate something like the before hook in univ four. Yeah, you could also tag your order flow with proof or maybe a reputation proof, an NFT. A cool idea would be like use Axiom and create some type of proof of your trading history and show that you were always treating LPs very fairly. Therefore you should get a good fee. And then active liquidity balancing that's sort of been around for a oh no. Oh cool, I thought I kicked something.
00:14:26.480 - 00:14:40.406, Speaker A: Okay, sidequest LVR we won't do that. Some gort tweets. Check out. Gort on Twitter. Yeah. So LVR Minimization and redistribution. I'll skip over most of these.
00:14:40.406 - 00:15:35.590, Speaker A: We already talked about the first access auction. An LVR Oracle and Suave would be really cool where basically you can LP in uniswap. But then you could also have preferences on Suave where say, if it's high volatility I'm happy to actually take prices in this range. If it's low volatility, I'd rather take a price in this range. And that's much more expressive than what you can currently do on the Ethel One chain. And for much cheaper payment for order flow is another fun idea. So you could basically sell the rights to arbitrage a pool for an entire month, or fill all of the orders in a pool for the entire month by staking and making some commitment that you're always going to fill a user's trade like 20 bips above what the underlying L one AMM price curve gives you at any given time.
00:15:35.590 - 00:16:08.590, Speaker A: So the example of that would be a user trade comes in someone, then you submitted these preferences which would then try and fill the trade and you would fill it at a price 20 bips higher than the L One pool by querying the L One pool and then giving the best price you can. And then maybe you could slash someone if they misbehave retroactively. Lastly intents and RFQs. So you could just send Intents into Suave. Any of the current Intent designs work. So there's user Ops are sort of like Intents. They're not exactly like intents.
00:16:08.590 - 00:16:40.542, Speaker A: There's also the Anoma intense design which is really cool. I'd check that out. There's also the Essential Intense Design, which is super cool as well. So you could basically just send Intents into Swab and have a program that combines them and then spits out a swap on L one. Yeah, so that's like mostly what you can do with Suave. Here's again, a QR code to the Docs and then I'll just quickly go through our prizes a bit. So yeah.
00:16:40.542 - 00:17:20.390, Speaker A: Best intent, uniswap design and POC. Up to two teams can receive $1,000 for this. So we have some heavy caveats on using Uniswap or sorry, Suave, it's still in beta platform. And so if your prototype doesn't exactly work, but you have most of the design that also can qualify for these things, and especially if you identify a reason why something doesn't work, then that's extremely valuable to us as well. And so we're happy to still give you a prize. Best Ppof Design and POC. As I just previously got into that's $1,500 prize.
00:17:20.390 - 00:17:54.994, Speaker A: Best uniswap LVR design and POC. We have three for this. This is like a really rich design space. I would check out some talks on LVR or I'm happy to get into that later, but essentially LVR is the framing of why LPs don't make as much on chain as they do, being like market makers on a centralized exchange. So this is one of the most important problems in crypto. Best use of Swab is then also two point five k and there's up to three winners of that. And that can just be anything you want.
00:17:54.994 - 00:18:24.670, Speaker A: You could even share Netflix. You could do a sharing Netflix password application. Someone actually the other day built a extra data auction so you can actually sell on the ETH execution blocks. There's an extra data field where you can put arbitrary text. Someone made an auction where you can basically bid on the next block's extra data and it's already live on Gurley. And then lastly, best use of Uni before hooks as well. And so anything in that regime.
00:18:24.670 - 00:18:32.810, Speaker A: Cool. And that is time. That's all I got. Yeah, I will be around and happy to answer any and all questions. Happy hacking.
