00:00:05.450 - 00:00:25.334, Speaker A: Want to quickly invite Noah from the Uniswap labs team. Noah is the head of engineering at Uniswap Labs, and he's going to be sharing a quick talk about Uniswap Oracles. The talk is cleverly titled The Price is Right. And without further ado, I'd like to welcome Noah to come on and tell us more about how you can this.
00:00:25.372 - 00:00:26.422, Speaker B: Working with V Three.
00:00:26.556 - 00:00:27.240, Speaker A: Welcome.
00:00:28.650 - 00:01:05.074, Speaker B: Thanks Kartik. And thanks also for the great intro and lots of great information. We're super excited to partner with all these great groups that you've already heard from at Uniswap for you to create whatever your heart desires, and we're here to help. I thought I'd give a little presentation about something specific rather than just a general overview, because I thought that would be a bit more fun and just sort of inspire you, if not to work on Oracles directly, to sort of understand the scope of the kind of things that you'll be able to build during these two weeks or so. So let me quickly share my screen here and I'll confirm that everyone can.
00:01:05.112 - 00:01:08.226, Speaker A: See that everything is good to go.
00:01:08.328 - 00:01:29.234, Speaker B: Great. Okay, so welcome. The price is right. Full disclosure, I actually haven't seen any episodes of this show, so I don't know, the title is about all I've got, but I figured I would talk a little bit about V Three Oracles today. And I'm going to start off with this. Meme. I received your gas, you received TWAP.
00:01:29.234 - 00:02:34.186, Speaker B: So ultimately the Unisoft Oracle is a fully on chain system of creating and distributing Twaps, which is time weighted average prices. A little bit of inside terminology there. Okay, so why are v three oracle school? Why am I talking about this as opposed to any other feature on Uniswap? Frankly, it's even a bit under the radar. Most people, when they think of Uniswap, they don't think Oracles, they think about trading or liquidity provision or ticks or concentrated liquidity or what have you. But I thought it would be fun to just chat a bit about Oracles because I think it features some of the really interesting design patterns that we developed in V Three. And it's just a great example of how V Three can serve you as a developer and can be sort of a bedrock upon which you can build really interesting, really complex other protocols, build out your ideas, things like that. So I'm just going to hit each of these little bullet points here and just briefly describe what I meant when I wrote this and why it might be interesting to you as a developer thinking about writing an integration on top of Uniswap.
00:02:34.186 - 00:03:15.674, Speaker B: So accumulators. So that's the first bullet point. This one's pretty interesting. So there's a lot of history here. I won't go into the exhaustive details, but the way that we track prices in uniswap in both v two and V three, both of which feature Oracle capabilities, we track prices via an accumulator. So what this basically means is that we don't just track the price and store the price history over all time, because that's a prohibitively expensive thing to do. But what it turns out you can do is if you actually know the price at some time t zero, and you every second add the current price to that historical price and you just keep this ongoing running sum that's getting bigger and bigger and bigger all the time.
00:03:15.674 - 00:04:04.970, Speaker B: You can actually back out average prices within intervals by taking the difference in accumulator values. So if you take accumulator value at time two and time one and you subtract them, it turns out that that value is the average price within that duration. And this can extend to any number of arbitrary intervals and it's very flexible and it's an interesting pattern, right? It's sort of somewhat non intuitive and there's lots of ways that we tried and failed to get this pattern to work. And so anyway, accumulators is this very interesting pattern that you'll get exposed to if you've ever looked at the Oracle code. So it's a good tool to have in your toolkit. Okay, integer overflow, what's this? So we're hyper optimized, we're hyper focused on optimizing for gas usage at Uniswap. So this is something we've sort of become notorious for sometimes.
00:04:04.970 - 00:04:46.150, Speaker B: In fact, we actually sacrifice a bit of code quality or code sort of readability for gas efficiency. And so we're hyper focused on making sure that swappers are paying no more than they actually absolutely need to. And so what we've done is we've actually taken the timestamp, which again, as I mentioned, the Oracle is accumulating on a per second basis. And what we've done is essentially allowed. We've compressed the timestamp from 256 bits, which is its native representation in the EVM, down into 32 bits. And that lets you express a smaller range of times and it's actually about 100 and something years. So two to the 32 seconds is something like 100 years.
00:04:46.150 - 00:05:21.906, Speaker B: And so actually what happens is every 100 years the Unisop Oracles will all potentially overflow. And so we've actually written all the logic in the Oracle integration in v three to be fully integer, overflow resistant. Basically everything just works, no matter if the integers overflow or not. And so this is a pretty non intuitive, pretty interesting pattern. So again, if you're interested in overflow or being robust to 100 plus year intervals of tracking prices, this Oracle is for you. Okay? Variable length, circular queues. This one's wild, very interesting, and don't feel like you need to understand all this.
00:05:21.906 - 00:06:00.606, Speaker B: By the way, I'm just trying to pique your interest here. So what this means is in v three, unlike v two, we offer you the ability to natively calculate the t wop, the time weighted average price, about which I'm going to go into more detail later. Don't worry if you still don't really understand what that is. But anyway, in v three, we offer you the ability to calculate this over basically any arbitrary time frame within the last about week or so. In v two, this wasn't the case. You had to do a lot more work actually in order to extract these average prices. And if you didn't sort of track a price at a particular time snapshot, you were unable in the future to sort of retroactively go back and check what the price was at any point.
00:06:00.606 - 00:07:00.542, Speaker B: That wasn't that specific time that you tracked. We solved this problem in v three by well implementing variable length circular queues. And what this basically means is rather than tracking a single accumulator value which just is overwritten on an ongoing basis, we actually track an array with a variable length which stores each accumulator value for each new block that touched the uniswap pair. So rather than having one value and just consistently overwriting it with a new accumulator value, again and again and again, we actually stack and we push these accumulator values onto an array. And then when we reach the end of the array, let's say length five or length ten, we actually just loop back to the beginning, hence circular, and then we just keep writing in perpetuity, right? And what happens is you can actually increase the length of that array. And so by default, we don't make you pay as a swapper or an LP, we don't make you pay for this ability to read keywaps in the far past. But if you want that feature, you can actually extend the length of this queue and get access to these historical prices.
00:07:00.542 - 00:07:41.854, Speaker B: And so very complicated implementation, don't take my word for it, you can go look. But a very interesting feature that was basically core to this improvement in oracles from v two to v three, okay? Binary search. This is a cool one too. So again, now that we don't have just a singular observation, we have actually an array of them, we have this problem where we need to get the observation or the accumulator value or the price right at a historical time. And that time might be a long time ago, it could be a day ago, it could be an hour, it could be two and a half hours, it could be a week. And we actually don't natively know where to look in this array for that value. And so what we actually have to do is a binary search.
00:07:41.854 - 00:08:29.310, Speaker B: So we know that this circular queue is sorted with an offset, right? So because it's circular, it's not guaranteed to be sorted from index zero to index max, but it is sorted sort of starting from the current index and going around in a loop. And so we can actually abuse that feature by performing a binary search whenever we're looking for a historical observation at a particular time moment. And so again, don't take my word for it, this implementation is publicly available. You can look at it in our GitHub. Super interesting. And again, a great tool to have in your toolkit binary search, extremely efficient login complexity. A really great way to find data in a gas efficient way, given that, you know, your input data is sorted chronologically or by whatever sort of sorting criterion you care about.
00:08:29.310 - 00:09:13.370, Speaker B: Okay, linear interpolation. We're almost done here and then I'm going to actually explain what some of the oracle stuff does rather than just like titillating you with these fun little details. Okay? Linear interpolation, this is a cool one. So as I mentioned, the accumulators and the oracles in general work on a per second basis. So you can get the price at any given second, which is what we sort of intuitively understand as humans, right? But what the EVM understands isn't just seconds, it's also like blocks. And blocks are sort of the canonical unit of time in blockchain land. And so what we need to do actually is if there's a block at time zero and then another block at time 13, let's say we want the price at time ten or time eight, right? We know what it should be, right? The price never changed between blocks because that's impossible.
00:09:13.370 - 00:09:59.126, Speaker B: But we sort of need to like we can't say that the price is what it was at time zero or 13 because that's not quite right. You know what I mean? We need to sort of do some, well, interpolation between zero and 13. And so linear interpolation just refers to the fact that the V three core code which implements oracles actually does this job of linearly interpolating between blocks if you're looking for the price at a historical moment, which actually didn't have a block but just happened to be between two blocks. So, yes, this is another interesting feature. And then finally we get to use all three Pythagorean means when we're using oracle. So this is a pretty cool one. One thing I didn't mention, actually, is that we don't just track average prices in V three, we actually track average liquidity as well in the same fashion.
00:09:59.126 - 00:11:13.266, Speaker B: And I won't go into much more detail than that, but suffice it to say that we are tracking average prices via an accumulator and average liquidity via the same. And what this lets us do is take so first of all, we can get arithmetic means of ticks, which are a representation of prices in unisoft V three, right? So arithmetic mean great. And that's exactly using that logic that I mentioned earlier about the accumulator, right? Like if you have an accumulator value at time two and time zero, you can just take the delta divide by the interval length and there's your average over that interval, right? So that's an arithmetic mean. And so that's what we can do for ticks. Say what we do with liquidity is we actually track not just liquidity natively, but seconds over liquidity for complicated reasons that, again, I'm not going to explain. But because we're tracking S over L and we're trying to get the average L liquidity, if you accumulate S over L on a sort of rolling basis and then you divide out by seconds, which you can obviously get from just the duration of whatever period you're looking at, it turns out that's the harmonic mean, right? So the harmonic mean is like one over X summed up divided by x or something. I don't know if exactly I said it right, but you can look up a harmonic mean and basically that's what this is.
00:11:13.266 - 00:11:53.598, Speaker B: And there's different properties that the harmonic mean has relative to the arithmetic mean that make it actually pretty well suited for tracking average liquidity. It weights downward for low values of liquidity, which is good because you want to sort of not put a lot of weight on sort of low liquidity pools, for example. Right? So that's two and the third is a geometric mean. So it turns out that the arithmetic mean of A over B when you sum it up over time and B over A is actually different, right? And that's just because it's a property of the arithmetic mean. The arithmetic mean of ratios isn't equal to the arithmetic mean of the inverse of the ratios. A little bit unfortunate. And so in unisoft V two, we actually tracked both A over B and B over A.
00:11:53.598 - 00:12:19.686, Speaker B: So for ETH die, say we tracked the ETH die price and also the die ETH price which are basically again the same. But because of this quirk the arithmetic mean, they aren't actually equal. And so we tracked both, which was a bit wasteful. And so in V three, what we've actually done is we track now the geometric mean price. And so instead of B over A and A over B, we actually track the root of the product of a bunch of observations of A over B. And actually it doesn't matter if it's A over B or B over A, they're the same. It turns out.
00:12:19.686 - 00:13:09.786, Speaker B: Like if you have a zero, B, zero a one, B one, if you take the product of those and then take the root, the second root in this case it's the same value as if you had just flipped everything, right? And so that's actually quite a nice feature. It gives you sort of a canonical price for two assets rather than two, which you need to choose between and are ultimately sort of arbitrate, right? So it turns out that by tracking arithmetic mean ticks, which actually represent exponential prices, you get geometric mean prices. So arithmetic mean ticks correspond to geometric mean prices, meaning we've used all three means. So anyway, cool. Don't feel like you have to understand all this, but hopefully again it's just interesting and prompts you to dive a bit more into the code again, which I'm going to explain how to do very soon. So, okay, without further ado, let's move on from this. And we still have a bit of time left, so let's actually talk about what Unisoft V Three Oracles are.
00:13:09.786 - 00:14:10.074, Speaker B: Maybe now that I've fully confused everyone. So they are on chain permissionless Twaps, which again are time weighted average prices. And so basically what they are is for any given liquidity pool on Unisop, let's say Ethai as a great example, right, people are constantly trading with this pool, they're providing liquidity, and more importantly, or most importantly perhaps, they're arbitraging this price to match what the sort of true price of Ethi is across the entire market. And so the Unisoft price natively tracks the price of these assets in an incentive compatible way, right? Like in this permissionless environment, you'll make money by trading the price on Unisoft closer to the true price. And so you'll just do that. And then as a benefit, we have access to this price now because of this Oracle feature. And so we can use the sort of true or arbitraged price of ETH as an input to any number of systems that we want to build on top.
00:14:10.074 - 00:15:03.778, Speaker B: And so the most obvious example is if you want to offer people like leverage, where you deposit ETH and you want to let them withdraw some dollar denominated asset in return up to some collateralization ratio, and then you want To Maintain This Sort Of Ratio and Have A Liquidation System and Things Like that. Well, you can actually do that, natively, if you have access to some kind of true price of ETH USD or ETH dai or what have you. And so that's just one example of how tracking the price on Uniswap and having access to that on a historical basis, crucially, can actually be a really powerful way to have a permissionless system of prices that you can use as inputs to other economic systems, say. So that is what Twaps are. And this is a bit of an example. So if you were not following what I was talking about earlier with the array of observations and things like that. So on the bottom here, let's start with this last row.
00:15:03.778 - 00:15:41.302, Speaker B: So that's the V two Oracle, right? And so we have this price accumulator which at time like 01:00 P.m., it looks like has a value of 11,400, right? And then there's a bunch of blocks that go by and then if we want to check again at time 02:00 P.m., this accumulator you see, has increased. So now it's 48,000. And so what you can do is you can take the difference 48,000 -11,000 divided by by 1 hour and then you get the average price over that whole duration while the accumulator was ticking up. But crucially, what we didn't do in V Two is we didn't store this 11,000 value. You had to actually proactively, go ahead and store it yourself, wait an hour and then check what it was against that historical value.
00:15:41.302 - 00:16:29.494, Speaker B: And so if you didn't store it, you're out of luck. And it's actually hard and costly and sort of frustrating to have to do this. So what we've done in V three, which is now the top row, we actually store all of these checkpoint values on a rolling basis, again in this circular queue. And so now at time two, you don't have to have stored anything at time one, you can actually just look back in the array using a binary search, find that historical value, perform the delta, get your arithmetic average tick, and then derive the geometric average price over the whole interval. So this is super cool. And you can actually do this not just at one time, but like at any variable time in the whole duration of the tracked sort of period that the oracle is tracking. And again, you can see here it says up to nine days later, right? The oracle is about a week or eight or nine days worth of data when it's fully initialized.
00:16:29.494 - 00:17:26.474, Speaker B: And so this is a really powerful way to calculate any arbitrary curve or price average over this whole interval. So hopefully that helps a little bit. Okay, so why more importantly, I've described more or less what uniswap oracles are and how they work. But why would you use them? So the first is that they're economically robust. And I touched on this earlier, right? It's important to have full incentive alignment for a system to sort of be trustworthy. And so economically robust refers to the fact that again, if the price of uniswap of, let's say, the ETH Dai pool diverges from the ETH Dai price on coinbase or binance or any other dex on ethereum or any other dex anywhere, there's going to be money on the table for some Arbitrage ruler to come in and trade the price back to its fair, true value. And so economically robust refers to the incentive alignment that exists to push the uniswap price close to the true price.
00:17:26.474 - 00:18:24.014, Speaker B: Which is again, probably what you care about if you're building this second order abstracted economic system. The second is explicit manipulation costs. So there are other ways to get prices on Ethereum, right? Like you can maybe just have a trusted party submit a price that they have claimed is the price of each side in some aggregate fashion. You can maybe have an external exchange, like Coinbase for example, sign cryptographically the price of Ethai on their system every so often submit that price to the chain and then use that as your source of truth. There's other projects out there that offer pricing as a service and they'll sort of report on a periodic basis what the price is of various things. And it's not clear in any of those cases, really, what the manipulation cost is for a reporter to perform poorly or suboptimally or even maliciously. And so in unisop that's not the case.
00:18:24.014 - 00:19:12.614, Speaker B: Right? Because the implementation is no, because we have a very clear data provenance pipeline. We know every step of the way what's happening. There is a cost to manipulate. You can pay money to push the unisoft price away from its true value, but the only way to do that is to incur economic losses, right? Because again, you're just feeding arbitragers money, the more you push your price away and it gets arbitraged back. And so explicit manipulation costs refers to the fact that the only way to manipulate the system is to pay money in a fully public, transparent manner, whereas with an off chain reporter, it's not at all clear what the incentive structures are, how we're maintaining verifiability trust, things like that. And so I think that this is an important property to have when you're designing an Oracle system. Okay, guaranteed uptime.
00:19:12.614 - 00:19:57.190, Speaker B: This is obviously just a simple one. Like Uniswap is always on because Ethereum is always on and there's no off chain infrastructure, there's no reporting that can't happen. Of course, you can have a scenario where blocks are being stuffed and maybe no one is able to arbitrage the price on Uniswap. But I think that would be sort of a more systemic issue on Ethereum and not something sort of that we have to worry about as a DAP level project. But in the general case, I think that guaranteed uptime is a huge feature and you don't need to have any liveness concerns about Oracles when you're using Unisoft. And finally, zero counterparty risk. So I actually alluded to this earlier in the manipulation costs, but there's no party that's responsible for publishing prices or being timely or being fair or accurate.
00:19:57.190 - 00:20:43.750, Speaker B: Again, it's fully algorithmic, it's just code, you can audit it yourself and there's literally zero counterparty risk. There is smart contract risk. Of course there are economic considerations that you have to make, hence the first two points. But yeah, there's no actual party that is able to cheat or misuse your system. So hopefully that motivates you and sort of explains why we think that decentralized permissionless Oracles like Uniswap are very powerful and of course, maybe not as sort of fully accurate. They're not always going to track the exact price off chain of any of these different assets because again, there's a little bit of arbitrage flow. There's the fact that you're just taking an average as opposed to looking at Spot, which you can sort of trust off chain.
00:20:43.750 - 00:22:05.486, Speaker B: But I think that these benefits are really quite strong and they potentially outweigh those costs. Okay, so here's just an example of what can go wrong if you have a bad Oracle, right? So if you're a lending protocol and you're thinking, oh, the Spot price should be fine, well, what can happen is something disastrous like the stack trace that you're seeing. So there have been a couple of examples historically of lending protocols usually, or some variant of that where they're using the price of an asset, again, as I mentioned before, to sort of collateralize the borrowing of another asset. And they're using more or less what can be referred to as a spot price, which is the immediate price at any given moment, which is fully manipulable, right? And there's like very little cost to manipulate the spot as opposed to an average because you can do that synchronously, as opposed to having to being forced to do that over multiple blocks over a given time span. So these lending protocols historically use the spot price and in fact, not even an off chain spot, which would be more like an off chain Oracle reporter, where it's accurate, maybe, but you don't know who that reporter is and you don't know if you can trust them. But they actually use the spot price of an on chain protocol, like they use the spot on a dex to figure out the collateralization ratios. And so this is really dangerous, right, because you can fully manipulate the spot sort of at quite low cost, exploit the lending protocol.
00:22:05.486 - 00:22:41.994, Speaker B: As you can see here in this stack trace, this is BZX, and you can make a lot of money, you can wreck people. So this is just a cautionary tale about the fact that using Oracles is important. And if you're going to use Oracles, maybe you should think about using a decentralized Oracle network like Uniswap as opposed to a system of reporters. Right, okay, finally. How. So this is where I'm just going to give a couple of links and sort of bail out here because I don't want to take too much more of your time, but there's a couple of places to go to look. So the first link here is the V three core code on Unisoft's GitHub.
00:22:41.994 - 00:23:05.634, Speaker B: So what this is, is the implementation of Oracles at the lowest possible level. This is going to have all the juicy details that I mentioned in the beginning. Variable length, circular, queues, binary search, all this good stuff. So if you want the sauce, that's where to get it. So V three periphery is a bit different. This is a repo where we write code that is at a bit of a higher level than Core. And it doesn't implement the core.
00:23:05.634 - 00:23:45.630, Speaker B: It's not the implementation of V three that's in Core. What it is though, is it's a set of sort of helper contracts, helper libraries, things that abstract a lot of the nitty gritty details for you and basically offer a sort of smooth, developer friendly, hopefully, API surface. Right? And so an example of this is like the router contract, which is actually how you trade through Uniswap. That's a peripheral contract because it's never holding people's funds, it's not implementing the AMM functionality. It's simply like managing approvals. It's managing transfers, doing the sort of swappage logic, swapping logic, doing slippage checks, things like that. Crucially.
00:23:45.630 - 00:24:25.326, Speaker B: Additionally, it also has a lot of oracle functionality. So there's a library in there called Oracle Library and it again offers a bit of a smoother interface to using V Three Oracles in a way that is going to be easier to digest, again as a third party protocol that wants prices for some input to their system. Finally, there are some docs. So if I missed anything in this description of Oracles, as I'm sure I did, you can look at this doc page here. Probably just the easiest way to search it is just go to the Docs Uniself.org site and search for Oracles rather than typing out this link. But there's a lot of know there about this system and why it might be interesting to you.
00:24:25.326 - 00:25:01.930, Speaker B: And finally, of course, the Discord is always available as a place to ask questions about these things. And so I'll be on there a bunch of team members and people from ETH Global and UGP and things like that will be hopefully on the Discord to answer those types of questions. And so I want to wrap up. Thank you. First of all, Oracles, I just wanted to say that we're really appreciative that you guys are all here and taking time out of your, I'm sure, busy lives to hack for fun and maybe a little bit of profit, hopefully. This was interesting just as a bit of a deep dive into a specific feature of V Three that is near and dear to my heart. I wrote most of this code.
00:25:01.930 - 00:25:43.420, Speaker B: I think it's really interesting. I'm excited to see people building on top of it, but I just want to say that there's so many areas like this around swapping around the user experience, around Lping, around, all kinds of really interesting things that are possible to build on top of Uniswap. So hopefully this is helpful and inspiring and I know there's lots more to come. I know that Aztec, I talked with those folks and they're really excited about some interesting ideas building on layer two and zero knowledge to trade on Uniswap. I know there's a lot of interest in optimism and Arbitrum. So, yeah, I'm excited to see what you all build. Don't feel like you have to use Oracles, but again, thank you for your time and I'm going to wrap it there.
00:25:45.790 - 00:26:25.142, Speaker A: Awesome. Thanks, Noah. This is super helpful. I think it's a really good way to point out that it's not just about plugging into the liquidity and trading. There's a lot more you can do with V Three Oracles is a perfect example. I was going to say all those memories of me prepping for engineering interviews are finally coming back and you can see them in practice and hopefully everybody gets to use this too. So with that, I want to thank you for giving us that great overview for everybody who has questions, please, you can tang Noah or the broader UGP and Uniswap Labs team on the Discord for any help.
00:26:25.142 - 00:26:30.450, Speaker A: Or questions and hope that a lot of you build really cool ways to use integrate oracles.
