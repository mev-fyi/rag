00:00:07.450 - 00:00:19.214, Speaker A: Cool. Hi, nice to meet all of you. I was the person sorry, this is hello. Yeah, I was the person sitting on the ground outside. So nice to see all of you here. My name is Sarah. Nice to meet all of you.
00:00:19.214 - 00:00:55.600, Speaker A: If we have not met at the booth yet, I lead Dev Experience for Powercoin Virtual Machine as Charter Protocol Labs, and I'm here to talk about the FalcoIn virtual machine and how that can help you with programmatic storage for your smart contracts. So, yeah, let's get into it. Cool. Just to get a show of hands before I start, how many of you are familiar with FalcoIn? Okay, great. And those familiar with IPFS and Falcon Virtual Machine. Okay, I guess I'm here for a reason. Great.
00:00:55.600 - 00:01:28.840, Speaker A: And then okay, one last question, just because I always am interested to know this. How many of you think IPFS and are not clear on how IPFS and Filecoin are different? Anyone or everyone? Super clear. Cool. Okay. I will talk about it briefly, because, honestly, I joined Protocol Labs, and then it took me, like, two months to realize that IPFS and Filecoin are not the same thing. So if anyone thinks that I'm here to help, to clarify, and so that will help you to build easier for your projects. Cool.
00:01:28.840 - 00:02:10.454, Speaker A: Yes. And if you're interested to watch us, me and my other colleague talk and experiment and code live every single Thursday, you can follow us on Twitch. We try out different integrations, and sometimes we fail, and sometimes we succeed. But, yeah, if you want to watch a train wreck, you can always join that cool. All right, so I kind of get started to set the context for the FalcoIn master plan. So if you're thinking, what is FalcoIn virtual machine? Which it seems like some of you are new to, that's great, because we initially started, we've been around for about seven years. When we started, it was a decentralized network, and so that is FalcoIn as its own.
00:02:10.454 - 00:03:05.126, Speaker A: So the difference here between FalcoIn and IPFS juan Beni, our CEO, actually founded IPFS at the beginning, and that was a peer to peer network, which means that when you store stuff, you're not paying anyone. That also means that your data, if your node is not being maintained, could disappear over time. So we then decided to come up with the FalcoIn network, which is a blockchain, whereas IPF is not a blockchain, where you can store data and incentivize storage providers to store your data for the amount of time that you want it to be stored for. So that is FalcoIn, and that's how it's different from IPFS. These two are used together a lot. So we would usually store on FalcoIn, and then we would pin it to IPFS so that you get quicker retrievals as opposed to on the FalcoIn network. You will need to then unseal your data cryptographically, and that takes some time and also takes a lot of power, which you can do eventually when you want to retrieve your whole set of data.
00:03:05.126 - 00:03:36.158, Speaker A: But we recommend that you use IPFS for faster retrievals. So these are how the two work together. And then we moved on to step two where we started onboarding a lot of the data outside of the committed capacity that we had on the FalcoIn network. So I think today we are at I think it's like 30 exabytes, which is just a lot, a lot of data. And so I think someone came by the booth and asked me how much data would it take to crash the Falcon network? The answer was kind of not enough. It's honestly kind of hard to crash. But we have a lot of space right now and so you can always upload data to that.
00:03:36.158 - 00:04:10.538, Speaker A: And now we're at step three where we thought we have a bunch of data. How do we then emulate what Web Two has as an AWS server, for example, where you have data and then you have computation on top of that and you can run it as a full server. So that's what we really want to bring with the FalcoIn virtual machine. And I'll talk a little bit about how we can enable you to write logic around the storage itself. It relates to what, VPs? Not VPs. Yeah, I wouldn't say it's private. Yeah, it's just pretty open.
00:04:10.538 - 00:04:37.382, Speaker A: Yeah, cool. So I clarified a little bit of that earlier on. And to be clear, Fem is a layer one and then layer two is where all of you are at for the hackathon. So I know it's two days we've been in hackathons. We've seen and mentored a lot. I know it's a rush, so I want to get right into it and do a demo as well so you can see what you want to use in the next few hours and tomorrow as well. So layer two is where a lot of the solutions and projects are going to be building.
00:04:37.382 - 00:05:24.900, Speaker A: On top of what you'll be doing essentially with the Fem is you will be building your smart contracts. So we are fully sorry, let me take a step back. What the Fem allows you to do fundamentally without us talking about the ethereum compatibility first, is that it allows you to write logic around the stored data on the network. So every single piece of data that's stored is part of a storage deal and every storage deal has some metadata with it. So it'll tell you what size of file is in there, how long is it being stored for, et cetera, et cetera. What the FBM does is it computes over that metadata so it allows you to move around your data without actually having to open up the whole piece, which takes more time and costs you more money. So it should be pretty cheap for you to be able to move your data around.
00:05:24.900 - 00:05:52.646, Speaker A: So that's fundamentally what it does. Right? So now why I say we are here today is so this over here is the FVM on top of a filecoin node. So every single node in the filecoin network can run an instance of the FVM. You can also run multiple instances of it on a node. And then on top of that, we have two, three classes of actors that run on top of the FVM. We have the first class which is built in actors. And these are think of actors like Smart Contracts.
00:05:52.646 - 00:06:16.258, Speaker A: These are built into the Falcon network. You aren't able to touch them. These are system actors that we have built for you to function with the protocol. And then you have the second class which is user defined WASM actors which are we consider FVM native. So we run WASM time under the hood. This will allow you to use different frameworks that you're more familiar with, like Go WebAssembly, so on assembly script. So we have these SDKs as well.
00:06:16.258 - 00:06:42.400, Speaker A: But then for the Ethereum community we were like, that's a really big community and we should be able to provide tooling for them as well. So we've created foreign runtimes and we also have built it in a way that we are VM agnostic. So today we are EVM compatible. In the future we also have the infrastructure to allow us to be compatible with other VMs. So Solana is something that we're looking at next. We need to tighten up a polygon story a little bit more. I will answer any polygon questions later on.
00:06:42.400 - 00:07:07.170, Speaker A: But yes, as of now we are fully Ethereum compatible. So any tooling that you're familiar with, like Hard Hat, Foundry, Truffle, you can use with the Fevm. And so you wouldn't actually see the FVM. A lot of it is on the back end. All you'll see is your solidity code and your contracts. And you just need to understand how our contracts work and how you import that into your stack. Yeah, so pretty easy to use.
00:07:07.170 - 00:07:42.906, Speaker A: The clear definition here is that you will eventually deploy to the filecoin network and not to the Ethereum network or to the polygon network, for example, which I know for some of you is a choice for you to make. But I just want to make it very clear that you'll be deploying to the filecoin network if you choose to use the Fevm. That could change in the future and we're hoping to bring some more interoperability, but as of now it will be to the FalcoIn network. Cool. So we'll get right into it. On how to use FVM in your project, there are two main ways that I think you can use as part of the hackathon today. So the first way would be the client contract.
00:07:42.906 - 00:08:13.366, Speaker A: The client contract is a solidity contract that we've written. It basically allows you to store data programmatically onto the FalcoIn network using solidity so I'll run through a demo and show you how you can use it. These are some of the tools that we're using. Hard Hat MetaMask, the hyperspace testnet, which is a testnet that we own. It's a stable testnet and it emulates our main net. So if you've used it there and it works, it should work fine on the main net as well. We have a specially created filecoin sol library by our partner Zondex.
00:08:13.366 - 00:08:49.378, Speaker A: And so what that allows you to do is that you can use solidity methods to then interact with the filecoin protocol setup that you'll need if you want to build it out later on. NPM node JS hard Hat and then I think the new component here is connecting your wallet to the hyperspace testnet and getting some test fill to use as part of your project. So, yeah, we'll go through the demo. What we'll do for the demo is one, I'll show you how to connect your wallet. It's super easy. We'll get some funds from the faucet and then we'll deploy the contract. We will then prepare the data.
00:08:49.378 - 00:09:33.974, Speaker A: And just for you, those of you who are new to the Falcon network, any piece of data that gets stored there has to be converted to a new format called a car file. It is basically like a Dag and it will be a new kind of format that you need to use in order to store that piece of data. I can explain more specifics in it as we get into the demo, but if you're just using it as part of the hackathon, you don't have to get too deep into it. But I'll take you through step by step and then we will emit the storage deal proposal and then we'll check the transaction on the Block Explorer to ensure that that has been deployed. Cool. So we will get into the demo itself. So I'm just going to use a bare bones terminal here.
00:09:33.974 - 00:09:58.970, Speaker A: I hope that's okay with everyone. There is a really easy tutorial that will bring you through this. Hold on. So if you have come by the booth, we have a QR code there. It brings you to the hackathon cheat sheet. And in the cheat sheet itself, it will bring you to our Hard Hat Starter kit. That is the main flagship starter kit that will get all of you started on what you need to build.
00:09:58.970 - 00:10:26.660, Speaker A: I will show you and once you get to the Hearthat starter kit, it's actually pretty easy to get it going. We have most of the steps in there. It's super easy to follow. So, yeah, I'm just going to show this to you first and then walk you through and we'll try it out on the terminal. So this is the hard hat kit. It takes you step by step really quickly to show you how to clone it, get what you need to, then up save your private key. I will be using a test private key.
00:10:26.660 - 00:11:11.270, Speaker A: If you steal my private key, you'll just get a bunch of test fill, which is fine, but don't do it because I need it for demos. And then we'll test it out to show you how you can get your address. And I'm going to talk a little bit about what an address means when you look at it as an ox address versus a filecoin address and how we've actually had an address manager that helps to convert that. And then we'll deploy the basic deal client contract itself. And I can talk a little bit more about these examples, but the rest of the contracts in the repo are actually more example contracts more than anything else, just to prove that you can mint an ERC 20 token and so on. And then we'll interact with the contract to then deploy a dummy Jpack. And then we'll see the proposal get emitted and check whether that transaction has gone through.
00:11:11.270 - 00:11:36.170, Speaker A: Okay. And one step before we do the heart, we get right into the terminal itself. I'm going to show you how you can connect your wallet. So where is my browser? Cool. All right, so easy. Hit thechainlist.org search include.
00:11:36.170 - 00:12:06.514, Speaker A: Make sure to search include testnets key in hyperspace. I have already connected my wallet, but then it yeah, here you go. So then it should pop up over here. And if you click Add to MetaMask, it will get it connected to your MetaMask. So once you have it connected, I'm going to let you all take a photo here. Once you have it connected, you can head over to the Faucet. And all these resources again are in the hackathon cheat sheet that I will share the QR code for later on.
00:12:06.514 - 00:12:33.260, Speaker A: And you can always hit by the booth and get the QR code if you haven't had time to get it. Cool. So all you have to do is see, as I mentioned, all you ever see is your ethereum tooling. You'll just copy your MetaMask address. It's an ox address, not a falcon address, and you will answer a very complex set of questions over here. Honestly, these tests are getting harder and harder, okay? Honest. They just want to make demos harder for all of us.
00:12:33.260 - 00:12:53.380, Speaker A: Wait, is that a is it a camera? No? Okay, sorry. Can deploy contracts. Cannot answer. They're all black and white. Okay, that's it, right? Okay, cool. Teamwork. Teamwork, we got it.
00:12:53.380 - 00:13:18.098, Speaker A: And then you send and typically it takes about 30 seconds to a minute. The reason for that is that our hyperspace testnet, which simulate our main net, runs in these things called epochs. And so every single epoch is about 30 seconds for a new block to come in. So that's usually the wait time that you will take. I would say give or take another 30 seconds. So we usually wait up to a minute. But of course, I already have some test fill in there, but just to manage expectations.
00:13:18.098 - 00:13:53.182, Speaker A: So, yeah, every single time you press send, you'll get about five test fill. If you want to run a minor and you want a lot of test fill, you can always DM me on Slack and we'll get you a whole bunch so you don't have to keep answering those questions to get your test fill. Cool. So that will get your wallet set up. So then after that we can hit straight into the terminal to get it deployed. So you will head over here very easily. You would just clone the whole repo? Yes, done pretty quickly.
00:13:53.182 - 00:14:23.934, Speaker A: And then as I mentioned, you would export your private key. Please, please do not use your real private key or deploy it if it's your real private key here. And then I have my private key copied out over here. But again, I mentioned this is not a real account. So nothing for you there if you want to hack it. Okay, so then now we have my private key in there. So let's test it out.
00:14:23.934 - 00:14:49.284, Speaker A: Let's see if we'll get our address. So yarn hat get address. Cool. So we do have my address over here and this will be the address that you saw from the MetaMask account. But then over here you also see an F four address. What that actually means is, so we are Ethereum compatible and we want you to see the Orex address. But in the filecoin network we have an address manager that converts it to an F four address.
00:14:49.284 - 00:15:09.530, Speaker A: So if you see an F four address and an Ox address, they are the same thing with a lot of our tooling. We've made sure that you can key in your Ox address or your F four address and you will get the vice versa version of it. So it should be pretty easy to use. Don't get confused. Whichever one you prefer to work with, just use that. Cool. So now we make sure that the address is there.
00:15:09.530 - 00:15:35.952, Speaker A: What we're going to do is we're going to deploy all the contracts in here. So as I mentioned earlier on, we have a few test contracts in there. So if you head over to the contracts folder, we have a few examples for you. We have basic solidity examples, which is just a simple coin. Just making sure that you can do an ERC 20. We have a quick start on our documentation page that will show you how to mint an ERC 20 token on remix. So super easy to use.
00:15:35.952 - 00:16:05.256, Speaker A: You can just follow the steps over here. I'm not going to go through that, but yeah, you can mint your token. So if you want to mint it as part of your project, you are able to do that as well. Where was I? Right. And then the other one which is pretty interesting is the Falcon API examples. I have one example over here. So if you want to see how you can import the FalcoIn solidity library.
00:16:05.256 - 00:17:06.336, Speaker A: You could just use this contract to just check if it works, but honestly it doesn't really do much. We also have a deal rewarder contract which is an off chain version of the client contract, which is the main recommended flow of how you can store data. So this deal rewarder contract over here is actually an initial way that we thought we could store data. What we do is that we put money, we put a bounty into an escrow, and then we incentivize a bounty hunter to come and pick up your data and then do the usual, more manual method of running a node and proposing it to a storage provider on the network, getting the deal ID for you and returning you the deal ID to then unlock the bounty within the smart contract. It's a bit of a roundabout way, that was the initial way, but we can see it working for certain use cases. So for example, if you have a designated storage provider that you want to work with or you have a dow and you want to designate one person to be in charge of making sure that these storage deals go through, you could use this method as well, although obviously not as streamlined but is an option for you. So that will be over there.
00:17:06.336 - 00:17:56.240, Speaker A: And then what I'm going to demo is the deal client. So this is the deal client contract. This will allow you to basically be able to take any JPEG or any piece of data from whatever your DAP takes data in from and then be able to deal with the whole deal proposal process for you and return you a Deal ID that should all be accomplished within anywhere 15 minutes to half an hour. And you should get your deal ID back again because it's decentralized. We are working off a network of storage providers that can choose when they want to accept. So it is dependent on them on how quickly they accept, but we have incentives for them to accept it much quicker on the main net on the testnet. However, you'll get it really quickly in like five to ten minutes because we have dummy miners over there that will accept your deal regardless.
00:17:56.240 - 00:18:31.144, Speaker A: If you want to run a local net, yeah, I have a few options for that. I can show you how to do it. If you run it locally, you will basically run your own minor and then your own node and you would run it within your own environment. So yes, it will be much faster because you can just accept your own deal for the hackathon. You could run it on your local net. Yeah, you could do that if you want to. Yeah, we have a docker image that we just created two days ago that lets you run a lot.
00:18:31.144 - 00:18:50.130, Speaker A: It's actually in the cheat sheet. You could spin up a Lotus image on the miner yourself. Yeah. So it should be pretty easy for you. So before I get into the dual client, I'm just going to explain really briefly on what happens. So we're going to prepare the data first. I have some dummy data that I prepared over here.
00:18:50.130 - 00:19:16.372, Speaker A: Again, these resources are all in the cheat sheet, but we'll usually go to the data depot first. As I mentioned in my step by step we are going to prepare the data. So while we prepare the data, I'm going to spend some, it takes about a minute. So I'm going to deploy all the contracts first. So I'm just going to go yarn hard hat deploy it's. Going to deploy all the different contracts in there. So we'll let it run in the background.
00:19:16.372 - 00:19:39.490, Speaker A: In the meantime, we're going to prepare this. So let's say you want to upload a new file. It's actually really easy. You could just head over here, whatever files that I have. Cool. Yeah, we'll just use the FBM logo. So if you put this in over here, I think because I uploaded it previously, I guess I'll upload a photo myself.
00:19:39.490 - 00:20:13.844, Speaker A: Right. And so yeah, it was actually uploaded. So now I have three files that I've uploaded and for every single file that I have over here, there's actually a really easy interface for you to have and these will be more useful. Like you will see why you need all these fields later on. These different fields are parameters that you have to include in your deal proposal to then emit your storage deal proposal to the network for your storage providers to accept. So we make it much easier for you. Usually we have a CLI, you can also use the CLI method if you prefer.
00:20:13.844 - 00:20:55.080, Speaker A: I just find this a lot easier to read and explain. Yeah. So you have file ID, your file name, you usually have a PCID, I think that's still being computed. So I'm just going to use one that exists right now. Yeah, you have a PCID, a payload, CID, these are all fields that you'll need to key in and we have a really easy way for you to see what you need to include. So we've written it over here. So if I copy this and I add it to a file, how do I make this larger? Oh my God.
00:20:55.080 - 00:21:23.542, Speaker A: Hold on. Cool. So yeah, this is the template that we have for you. So all the fields that you saw earlier on, you can just input them based on what you have. Like the contract address that you've deployed which is deploying now in the background and I will include that in a second. And then you have like the PCID piece size start epoch NApOc. As I mentioned, epochs are like the blocks that run tip over here.
00:21:23.542 - 00:21:58.458, Speaker A: I would recommend that you set an epoch that's about 5000 epochs ahead of the current epoch and you can check the current epoch based on our Block Explorer. So we have a really good Block Explorer over here called Phil Fox. We have about seven Block Explorers in total that support FVM. Phil Fox is one of them and also one of the most used. So you can always go here and see for that. Make sure you're on the hyperspace network and not the main network that you're actually looking at the right epoch and then you can see what block height is at. I would suggest your start epoch and end epoch are about 5000 a hit.
00:21:58.458 - 00:22:37.534, Speaker A: So I would usually put like 258971 and then my end epoch would be another 5000 on top of that which would be sorry, my math is not great, but 270 right around there. So you key in those epochs because if you put it too soon you're going to miss the time when you're actually emitting your deal and you're going to miss the epoch and your deal proposal will not go through if you put it too far ahead. You're just going to wait forever until the epoch is hit and your deal proposal goes through. So that is the most recommended 30 seconds. Yeah. So yeah, let's check if our contracts have deployed. Okay, we are down to the last one, which is great.
00:22:37.534 - 00:23:14.250, Speaker A: That will be the deal client. So once that is deployed, I will have the contract address and then I can input it into that template I just showed you and that will be the hardhead task that we want to run in the terminal. So once I have the contract address, I will input it in there. I will input all the other fields from the JPEG file that are uploaded and then I can copy and paste that whole hardhat task and key it in here into my terminal and run it. And once I run it, I should have the deal proposal successfully emitted. And then we're not going to wait here because then that'll be the end of my talk. But it'll take about 15 minutes for your deal ID to come through and I'll show you how you can use the Block Explorer to then find your deal ID based on the proposal that you admitted.
00:23:14.250 - 00:23:45.034, Speaker A: Okay, cool. It has now deployed. So as I mentioned, I'm going to take this. I have one that I filled out earlier on. I'm just going to increase the font size. Cool. So I'm going to change out this contract address over here and I have already filled in all the other fields which is just take a while.
00:23:45.034 - 00:24:32.094, Speaker A: So prepared it in advance. So I have the whole hire task over here and then I hit back to my terminal and I just need to drop this in over here and it's making a deal proposal. The last time I did it, I think it took me like 30 seconds or so, 30 to 40. But while we're waiting for that to happen. I'm going to show you how you can check whether your contract has been deployed. So you can always take all the contract addresses that have been deployed over here. So I'm just going to copy the deal client and I'm just going to search on the Block Explorer and yeah, it should show you pretty instantly that your deal is already submitted successfully to the yep.
00:24:32.094 - 00:25:02.306, Speaker A: And if you're actually doing this on mainnet, we definitely suggest that you verify any contract that you deploy. Really important to do verification over there. And I think Phil Fox and one other Explorer, which is Barracks, has now implemented contract verifiers as part of their Block Explorer. So that should be pretty easy for you. Cool. So while we wait for this, I'm going to talk through briefly the next option. I know we're almost at time, but I just want to raise this other thing.
00:25:02.306 - 00:25:59.164, Speaker A: So I'm going to bear in mind that if you use this method, what you will do is to import the entire deal client into part of your stack and run it as part of your DAP. If you prefer to not have to deal with the whole lot of that and you just want to use a storage helper which deals with a lot of the dealer proposal, filling in all the blanks, preparing the data, et cetera, et cetera, you can just use Lighthouse. Lighthouse is one of our partners and they've built a storage helper on top of FVM. The cool thing about Lighthouse is that they also provide the additional option of access control. So they have a really easy to use SDK that also provides encryption for the data that you want to submit. So depending on the project that you're trying to build, if you need access control, you can also use Lighthouse storage. This is also in the cheat sheet, so would be easy for you to click on hooray.
00:25:59.164 - 00:26:42.972, Speaker A: Okay, so event Emitter proposal ID is out there right now floating in hyperspace. How you would check whether your deal ID has come in or not is you would hit to the Block Explorer. Again, you will head over to deal list. And this piece is not I admit it's not the most intuitive, but it's a stopgap solution for now and it will work. You would just need to key in your address and then constantly check because I actually submitted a deal earlier on, but then constantly check whether your deal ID has come in or not. So I usually refresh it after about 15 minutes just to see my deal ID has come in based on my address and then I'd be able to refer to that deal ID as part of my DAP. Yeah, again, not the most intuitive.
00:26:42.972 - 00:27:06.974, Speaker A: We are working right now on improving the workflow and being able to automatically notify the client once your deal ID has come in, but as of now, not. Available just yet. Okay, so that was mostly the demo. I have very little time left. I'm going to try to just cover how you can use FVM if you're wondering. Sounds cool. I'm in.
00:27:06.974 - 00:27:41.558, Speaker A: What can I do with FVM and storage? We have a really long list of ideas at RFS FVM dev. You can look through those. Those are all storage focused solutions with FVM that you can build. Also, once again, we have $10,000 for our price. There are a few key categories over here, programmable, storage, markets, so anything that will improve the data economy in this case, meaning FalcoIn. So if you're thinking of perpetual storage is really interesting to us. So how do you get storage deals to keep renewing and if they have any issue with them, automatically repair them on the back end? Very interested in that.
00:27:41.558 - 00:28:17.906, Speaker A: Data dow is a very cool topic that is agnostic to FalcoIn alone, but we think it can be used in a much larger way. You know what DAOs are and now you think of Data Dao. So if you have a very important data set that you want to gather a dow around, like for example, for decentralized science, we see a lot of cool projects that are actually building already on Fem. I'm just going to show you guys one because I thought this was really cool. But yeah, this team Puro, they actually built a Decentralized Science app on FVM. It's a data dao, basically. And then everyone just uploads their scientific papers and then the Dao will help them.
00:28:17.906 - 00:28:47.870, Speaker A: Dow members are incentivized to help to review these papers and then post their reviews in the Dao and everything. The reviews and the papers themselves are stored onto filecoin. So just seeding some ideas over here and compute over data. Also a really big piece, FVM can be used to orchestrate all these jobs. For off chain computation, we have a very efficient and good compute over data framework called Bakayao. My teammate Irina, she's around at the booth. She's over there.
00:28:47.870 - 00:29:15.574, Speaker A: Can't miss her. But yeah, talk to her if you want to figure out how you can use FBM and compute over data. The cool thing is know again, with Decentralized Science, you could then take the large data sets and do computation off chain and then return the result to your debt. So yeah, we kind of want to see more of that. And then lastly, infrared tooling. So if you want to build any cool tools that will help to if you want to figure out how to automatically send a deal ID back to the client and fix my demo, I will mostly welcome that. I will award you a prize if you can do it.
00:29:15.574 - 00:29:41.482, Speaker A: But yeah, some tooling ideas as well. And then we have a wildcut category. So anything cool that you can come up with, please surprise us. Yeah. And then lastly, I do want to touch on that if you're building beyond the hackathon and you want to keep building. We have all these integrations that are really launched in the past month with FBM that are compatible with FPM. So we have containers for setup, we have cross chain messaging and cross chain token bridging.
00:29:41.482 - 00:30:09.546, Speaker A: We have Oracles with Tellor access control, I just mentioned with Lighthouse and Medusa as well. We have some DeFi solutions on liquid staking and SushiSwap is coming in really soon as a Dex. We also have network analytics APIs if you want to use it as part of your project, decentralized compute. And these are all resources that you can find in the hackathon cheat sheet. They are not only on mainnet, they are also on hyperspace. And I have the contract addresses on there in the cheat sheet. So if you want to use them them just hit in there and use it as well.
00:30:09.546 - 00:30:55.490, Speaker A: But yeah, I just want to let you guys know that there are many other integrations that you can build your project out with. Yeah, and as a judge and with my other judges, these are the things that we're looking for. We're looking for storing files with the FBM client contract that we just showed. Storing files with a storage helper like Lighthouse, it could be either or and then making sure that your project is deployed to hyperspace testnet. We do want to make sure that you're using storage well or at least as part of your debt and not just deploying your contract with no storage components or nothing to do with FVM or FalcoIn onto the hyperspace testnet. Just want to put it out there so that you don't waste your time deploying to hyperspace. But that's what we're looking out for and any innovative and creative users of storage.
00:30:55.490 - 00:31:15.420, Speaker A: Yeah, you link QR code, this is at the booth as well. The hackathon cheat sheet is in there as well as our Docs, the RFS, FBM dev and upcoming hackathons and grants that you can access. So yeah, that was a lot. I am around for questions but I don't want to pick up the next talk. So thank you everyone.
