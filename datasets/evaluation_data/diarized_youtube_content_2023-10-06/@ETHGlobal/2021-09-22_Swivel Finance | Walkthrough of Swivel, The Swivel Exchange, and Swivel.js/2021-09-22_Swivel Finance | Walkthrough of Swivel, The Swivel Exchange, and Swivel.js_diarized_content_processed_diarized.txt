00:00:02.810 - 00:00:36.310, Speaker A: Hey guys, thanks for checking out our workshop. And thanks to everybody at ETHGlobal, as always, for doing all they do, herding cats and just in general, taking care of the ecosystem. As a quick introduction, I'm Julian, the founder of Swivel. I've been doing these hackathons for a couple years, but this is the first time I'm doing a sponsorship. So honestly, just in general pumped to support such great organization and see everything you guys can come up with. As far as Swivel itself, we're the protocol for Fixed Yield lending and tokenized cash flows. And in more simple terms that essentially means that we enable fixed yields and rate trading.
00:00:36.310 - 00:00:45.174, Speaker A: The plan for today is just to do a brief overview of the protocol and then take a look both at the Exchange and do a quick code walkthrough of Swivel.
00:00:45.222 - 00:00:45.930, Speaker B: JS.
00:00:49.910 - 00:01:17.946, Speaker A: So Swivel was actually the first to implement this sort of design, but at this point Swivel is now one of a few protocols that allow a user to deposit an underlying token like USDC, and receive two component tokens in return. The first being a yield bearing token that actually represents the claim to any interest generated. We call these end tokens and the second actually represents the claim to the deposit bond maturity one to one.
00:01:18.048 - 00:01:20.110, Speaker B: And we call these ZC tokens because.
00:01:20.180 - 00:02:22.710, Speaker A: They accurately are something sort of like a zero coupon. And this sort of design is actually pretty flexible because users can either sell their nusdc immediately to get a fixed yield or alternatively, another user could potentially buy that Zcusdc off of them and that user would be getting a fixed yield because this Zcusd would appreciate towards par upon maturity. The most common interaction then is kind of one that I just described. What effectively happens here is Alice, the one in pink, has a $1,000 in principal and wants to lend it at a fixed rate. Bob comes around and he essentially is willing to make the bet that the rates will likely be higher than Alice expects they will. And he's willing to pay $50 to get access to any interest generated by the $1,000 that Alice has at this current time. And this effectively locks both of their money up until twelve months from now.
00:02:22.710 - 00:03:06.996, Speaker A: So Bob pays this immediate premium, this is effectively what would be 5% to Alice. She yields that immediately and the money, the $1,000 in principal, is deposited then into an interest paying protocol. Bob gets the end tokens, the notional tokens, and gets any interest generated by $1,000 in nusdc, whereas Alice gets the redemption tokens. Effectively she gets access to $1,000 redeemable at maturity 1000 C USTP. And this interaction can kind of be reversed or done in a few different ways. And I suppose I'll kind of go over that a little bit more when we take a look at the exchange. And of course we've got docs for everything.
00:03:06.996 - 00:03:12.020, Speaker A: But with that basic sort of overview covered. We can just take a look at the exchange.
00:03:14.540 - 00:03:27.752, Speaker B: Just quickly walking through the exchange, you'll notice that for the most part, it's almost like any traditional exchange. You can check your market. In this case, instead of having an asset and another asset, you have an asset and its maturity.
00:03:27.896 - 00:03:29.484, Speaker C: And then from there, you can either.
00:03:29.522 - 00:04:12.520, Speaker B: Choose to trade in Dai or one of the underlying tokens that are split out from Dai. Additionally, we've actually made it a little bit easier for folks to faucet out tokens. So if you need to get some testnet tokens, you can just faucet them out from here. But to just go through the interactions, I think a lot of them are pretty straightforward. To get a fixed yield and just do a market order, you keep it on market and you can enter the amount you want to lend and get a fixed yield. In this case, this is 105% APY because this is monopoly money and people are willing to pay a crazy amount. But realistically, you'd never get that much locking in this rate though, I guess we can just do a quick test transaction.
00:04:12.520 - 00:04:25.868, Speaker B: It should give me about 100 back. Actually, it will give me exactly 100 die back immediately as my premium, and then I'll as well have a hundred ZC die from the transaction minus a.
00:04:25.874 - 00:04:27.090, Speaker C: Small fee as well.
00:04:28.260 - 00:04:31.040, Speaker B: So we can wait for that to confirm.
00:04:52.050 - 00:04:54.270, Speaker C: And there we go, it's confirmed.
00:04:55.330 - 00:05:00.740, Speaker B: Check the transaction. That might take a second to show up as well.
00:05:02.070 - 00:05:03.074, Speaker C: And there it is.
00:05:03.112 - 00:05:07.634, Speaker B: So, like I said, you got both 100 ZC die and 100 die in.
00:05:07.672 - 00:05:12.870, Speaker C: Return, which obviously isn't going to be typical, but is the case right now on testnet.
00:05:13.690 - 00:05:20.406, Speaker B: If you actually want to then go and sell that Zcdi, you can easily do so and effectively sell it back.
00:05:20.428 - 00:05:24.842, Speaker C: To the order book. Similarly, you would place a limit order.
00:05:24.896 - 00:05:27.706, Speaker B: There's not enough orders for you to sell against right now immediately, so it.
00:05:27.728 - 00:05:28.780, Speaker C: Is what it is.
00:05:31.070 - 00:05:46.862, Speaker B: But at this point, you could alternatively take a position in India, sell those to the order book, or alternatively, instead of just immediately taking positions, put a limit order and just place an order on the order book itself. So we can actually see this order.
00:05:46.916 - 00:06:02.754, Speaker C: Let's put it in at 099841. Let's do 50, confirm this is now signing that order and boom, there it is.
00:06:02.952 - 00:06:39.546, Speaker B: So all of that is actually, I think, pretty straightforward. A lot of it operates like an armor exchange, except for the fact that you're lending money and it's all routed through compound. If you actually want to then track your positions, you can go to the positions page and this gives you access to some of the functions that were mentioned in the original introduction. Instead of actually just doing everything through the order book, you can combine and redeem and do everything just directly. So one could potentially just split their position let's say if they had a given amount of die, split it into Zcdi and Ndi.
00:06:39.578 - 00:06:43.154, Speaker C: Let's split ten really quick and from.
00:06:43.192 - 00:07:03.618, Speaker B: There you could just sell one of these on an AMM or do whatever you'd want with them. You don't necessarily need to enter a position or get these tokens by using the order book. So that might take a second. We don't actually need to look at that for now. And then at the end, once this market has matured, so this one matures in ten days. This button, these buttons will be replaced.
00:07:03.794 - 00:07:05.418, Speaker C: By a redeem button right here.
00:07:05.504 - 00:07:31.474, Speaker B: So a user can redeem their ZC token balance. And this is the floating interest that you get based on the amount of tokens you have. So that's a good overview of the exchange if you at all need to take a look at the docs. The docs are relatively comprehensive, though, I'll tell you. We are working on them actively and some parts are definitely old or deprecated in general. So just bear with us or ask.
00:07:31.512 - 00:07:34.226, Speaker C: Us questions and yeah, that kind of.
00:07:34.248 - 00:07:54.746, Speaker B: Wraps up the exchange. So I'll get on into Swivel JS. So we recently open sourced Swivel JS and it is what most developers will be using to interact with the Swivel architecture from their application, unless they particularly want to pull down our APIs and.
00:07:54.768 - 00:07:56.198, Speaker C: Interact with them directly.
00:07:56.374 - 00:08:31.794, Speaker B: So the first prerequisite is Ethers. We do not currently have it set up to work with web3 JS currently. So again, prerequisite is Ethers and from there you can just install Swivel JS directly from NPM. As far as usage, there's a number of contracts within our architecture, but the main one you're ever going to be interacting with is Swivel. This is what you use to sign new orders, create them or alternatively actually interact with the contracts, initiate new positions, exit positions, or split or combine a token. So this is really what most people.
00:08:31.832 - 00:08:35.430, Speaker C: Will be needing to use. The first step is going to be.
00:08:35.500 - 00:08:50.086, Speaker B: Importing Ethers and then as well the Ethers vendor and Swivel from Swivel JS. So I'm going to be showing an example from a pretty basic DF that I've used a few times in the past. First up here again is importing Swivel JS.
00:08:50.278 - 00:08:54.202, Speaker C: This is a basic react DF and.
00:08:54.336 - 00:09:04.160, Speaker B: I've done this function already, but we're going to be replicating it again. So let's do async create.
00:09:06.450 - 00:09:09.570, Speaker C: Market order fixed.
00:09:11.350 - 00:09:16.690, Speaker B: And the only param we really need is the amount that we want to be filling.
00:09:18.630 - 00:09:20.238, Speaker C: So again, the first thing we need.
00:09:20.264 - 00:09:24.280, Speaker B: To do is initialize a provider. Let's just pull this straight in.
00:09:26.650 - 00:09:27.062, Speaker C: And.
00:09:27.116 - 00:09:36.086, Speaker B: From there we have a signer as well as the provider. Right, I pulled that as well that you can actually push into the vendor.
00:09:36.118 - 00:09:38.390, Speaker C: For Ethers within Swivel.
00:09:38.550 - 00:09:55.598, Speaker B: And this is what we're using to essentially do all of the actual signing, et cetera. And it kind of wraps everything together right. So we'll do that as well. It's pretty straightforward and depending, this may change in the future.
00:09:55.684 - 00:09:55.982, Speaker C: Right.
00:09:56.036 - 00:10:29.116, Speaker B: Our deployment currently is on Renkabi, so all this is actually accurate. If you'd like to pull this directly into your code. So I'll do that. And from there, again, the last step really is to initialize Swivel. From here, you can essentially call the endpoints for any of the functions within it. There's not great documentation right now for this, but hopefully by the time any of you see this, we'll have it.
00:10:29.138 - 00:10:30.540, Speaker C: All up within our docs.
00:10:31.280 - 00:11:22.430, Speaker B: So let's do that as well. Okay, so from here we have Swivel already made and we could directly interact with one of the contracts already, right? But one thing most users will be needing to do is do their allowances. So what one could do is check allowances and if they have enough, not take care of it. Right? For now, we're just going to do what we've actually done in the other example and we're going to just actually have the user set their allowances. So we're going to const approve equal await. And we've already actually initialized the Die contract when we initialized the component. So from here we actually have that Die available.
00:11:22.430 - 00:12:09.820, Speaker B: If you need to do that, you can do that separately. It would essentially just be any ERC with the address. Right? So Die approves the function on the Die contract and you're going to be approving the Swivel address, right? We have this up here and the Swivel address is actually swivel contract is what handles all fund custody throughout all of our architecture. So you're proving the Swivel address to access how much you could do the maximum amount. In this case, if you are actually having the user do this every time, you could just do the amount, right? So have the approval done. But specifically in this case, you don't want to kind of do anything else after this point.
00:12:09.890 - 00:12:16.220, Speaker C: So you're going to approve receipt.
00:12:16.820 - 00:12:21.360, Speaker B: You're going to wait essentially for that receipt from the previous approval.
00:12:26.660 - 00:12:31.360, Speaker C: Okay? So from there you have the ability.
00:12:31.440 - 00:12:34.390, Speaker B: To call back this receipt. Wait for it.
00:12:34.760 - 00:12:37.620, Speaker C: If approve.
00:12:39.640 - 00:13:02.764, Speaker B: Receipt status equal equal zero, do the rest. So if it fails, throw new error could not approve. If it doesn't fail, however, you can.
00:13:02.882 - 00:13:04.030, Speaker C: Move on.
00:13:07.600 - 00:13:27.012, Speaker B: With the rest of the transaction. From here, you could do one of two things. You could fetch the swivel API. I feel like that's kind of out of the scope of this instruction. So I'm going to actually just hard code the order in. And to do that, I'm just going to look below and use the exact.
00:13:27.066 - 00:13:29.220, Speaker C: Same order I already have hard coded.
00:13:30.040 - 00:13:54.328, Speaker B: If you aren't on Rinkabee and you need to do things on another network, feel free to contact us and we can do a deployment and make sure you have access to an order. But for now, you can feel free to use this exact same order. And if it's past this expiry that you need to be accessing it, just feel free again to contact us or alternatively, just use the API.
00:13:54.424 - 00:13:56.524, Speaker C: It's not that complicated as well.
00:13:56.722 - 00:14:34.984, Speaker B: So, main point though is you're establishing the order that you're planning to fill. In this case, this is someone that is willing to pay. This is someone that is initializing a vault and they are not exiting the position. So this is someone that is doing something with a vault and is not exiting. So this is effectively someone that is initializing a floating position. In layman's terms, if you're not super, super familiar with the project already, that means that this party is willing to pay premium and purchase in tokens. And to do it, they have this much principal, they have this much premium to spend.
00:14:34.984 - 00:14:45.532, Speaker B: I think this is a 5% rate, something like that. But the bottom line, yeah, is that this is the order that the user is actually planning to fill with this amount.
00:14:45.666 - 00:14:46.444, Speaker C: Right?
00:14:46.642 - 00:15:11.970, Speaker B: So once you have the order, it's really almost as straightforward as directly interacting with the smart contract. The other thing that's actually returned from the API is going to be the signature. Depending actually on exactly the currency you're using, this is going to change. So this step here, this is one E 18.
00:15:12.330 - 00:15:18.786, Speaker C: So if you were alternatively using USDC, this is Die.
00:15:18.898 - 00:15:20.902, Speaker B: You'd actually only use one E six.
00:15:21.036 - 00:15:39.530, Speaker C: But const amount, normalized amount, equal amount times one e ten, E 18.
00:15:41.070 - 00:15:46.746, Speaker B: And to make sure that everything can digest this, we're going to turn that.
00:15:46.768 - 00:15:52.546, Speaker C: Into a string as well. Um, from there, I believe this is.
00:15:52.568 - 00:16:05.030, Speaker B: All just kind of thrown into the Swivel contract. I'm going to verify that and yeah, it's pretty much that straightforward. So the transaction that we're actually trying to create, vert.
00:16:06.730 - 00:16:11.266, Speaker C: Const DX equal await.
00:16:11.458 - 00:16:15.414, Speaker B: Swivel initiate and you're going to be.
00:16:15.452 - 00:16:18.822, Speaker C: Putting in an array.
00:16:18.966 - 00:16:42.580, Speaker B: So I guess this is kind of an interesting wrinkle because you might be filling multiple orders at once. This could be multiple different amounts. In this case, this is a massive order. So the intention is you're only going to be filling one. But in the future you might have multiple orders with multiple signatures and multiple amounts. In that case though, each of the parameters is actually an array. So the first thing you input is the order.
00:16:42.580 - 00:17:26.240, Speaker B: And then you are putting in the amount that you want to fill for each order. So in this case, it's actually that normalized amount. And the final parameter is going to be that signature above the Swivel contract. Or rather the Swivel JS wrapper here actually takes the signature and splits it up into I forgot the brackets. Splits it up into its components to actually send it to the contract. And everything's actually kind of taken care of from here. So if we want to, we can do like we did below and actually await the transaction to do something else.
00:17:26.240 - 00:17:30.434, Speaker B: But really, that's not necessary. I'll just kind of throw these in.
00:17:30.472 - 00:17:39.314, Speaker C: Anyway and yeah, this is a pretty basic example of how one would order.
00:17:39.432 - 00:17:54.598, Speaker B: A get a fixed rate, right? In this example, this already has an order for you. I suppose in the future, it might be good to do an additional wrinkle where you fetch and request an order to fill if you are trying to.
00:17:54.604 - 00:17:55.800, Speaker C: Get a fixed rate.
00:17:57.310 - 00:18:00.730, Speaker B: Yeah, I think that concludes the walkthrough.
00:18:02.030 - 00:18:03.738, Speaker C: So it's just a final little review.
00:18:03.824 - 00:18:33.570, Speaker B: What we've essentially made is a nice little application that allows you to input an amount and effectively order for a fixed yield. Yes, the order was at 5%. We're doing a quick transaction on MetaMask, and we can also check I forget all what we added to the console log. But, yes, we're doing a fixed order. The confirmation for the approval came in, so now we can confirm the order itself. And there you go. That should be it.
00:18:33.570 - 00:18:41.150, Speaker B: Thanks for coming to our workshop, and if you guys have any questions, feel free to reach out. Bye.
