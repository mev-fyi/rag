00:00:07.370 - 00:00:14.634, Speaker A: All right, this is our last interview for today, and we'll get into some networking. Without further ado, zach Williamson from Aztec.
00:00:14.682 - 00:00:15.280, Speaker B: Hello.
00:00:16.050 - 00:01:13.582, Speaker A: I know he's eager to get started. Zach, we've known each other for a long time. Yep. And the we've seen, or I have seen the full evolution of what Aztec was and what it is now. So I thought it'd be best to use the next 30 minutes to actually talk about the evolution of how things came to be and all the interesting things that came from that transition. It's a good moment for us to make this the last talk, because, interestingly, everything that we talked about today earlier on ended up referencing some of the work you've done in their projects. And people may not realize it, but when you look at just different schemes around, just efficiency, plonk, whether it's on polygon matterlabs, some enhancements from even starquare and halo from Zcash, all those things are very inspired by a lot of the things that have come out the cryptography team at Aztec.
00:01:13.582 - 00:01:26.198, Speaker A: But before we kind of get to that conclusion or just the influence you've had in this space, I want to have you sort of talk about what the first ever version of what Aztec was and what was your goal back then.
00:01:26.364 - 00:02:04.020, Speaker B: Yeah, very happy to, and thank you for the glowing introduction back in the day. So we started Aztec what became Aztec in 2017. So we're old Aztecs, kind of a pretty old timers by the standards of web3. And at the time, we were called credits mint, we weren't called Aztec, and we weren't doing privacy. The goal of a company was to do basically Tradify on web3 enable like syndicate, very large corporate loans and settle them and trade them efficiently. Very, very different mission and mandate to what we have now. But that's how we got started, me and myvan co founder, Tom.
00:02:04.020 - 00:02:39.902, Speaker B: But back in 2017, we were rather ignorant about how privacy worked on chain. And we were like, oh, it's fine. We'll get privacy by just obfuscating transactions, it'll be fine. It wasn't fine. And we realized we needed cryptographic guarantees around upright to protect our users. And so we started looking into how on earth to do that. And five, six years ago, it was kind of a bit of a dark age where you had Zcash being the real pioneers, and there was monero, and there was not much else outside of that.
00:02:39.902 - 00:02:48.850, Speaker B: So, yeah, we started looking to how on earth do you do something like port Zcash to ethereum? And that led us down the road of becoming Aztec.
00:02:50.390 - 00:02:56.680, Speaker A: So what was the actual limitation back then? So we talked about just, okay, it wasn't possible, but are we talking it was just expensive or just not possible?
00:02:57.690 - 00:03:46.546, Speaker B: Not really. Well, practically not possible. So what we originally wanted to do when we started doing ZK research was we wanted to create this concept of composable business logic. So you could kind of define developers, could define custom types of transactions that all had some kind of privacy reserving guarantees. A bit like an exceptionally primitive version of a smart contract, because back then, that was all the crypto that's all state of the art crypto could really do, unless you used a ZK Snark. But back then, for ZK Snarks, every single circuit that you created with Snark required a trusted setup. And if you want customizable mini programs, that doesn't work because then every single developer needs to run a trusted setup ceremony, which is just crazy.
00:03:46.546 - 00:04:11.020, Speaker B: So we fell back to some older technology called Sigma Protocols in 2018 to build the first version of what then became Aztec One. And yeah, we did our best, but the tech back then was so primitive, it didn't last very long and we kind of knew we were building a bit of a stinker, but it helped us develop the technology that we needed to then create better things in the future.
00:04:11.630 - 00:04:31.154, Speaker A: So not having to do a trusted setup every time somebody's doing a brand new use case of a smart contract obviously is a big hurdle and seems like the solution was we need anywhere from a just trustless ceremony setup or a universal Snark that just requires trusted setup once. Is that the fair?
00:04:31.272 - 00:05:23.202, Speaker B: Yeah, that was basically the desire at the time. They were called Universal snarks. There were Snark circuits where you only needed to do one trusted setup and then you could write any program you wanted, which seemed like a bit of a pipe dream back in 2018. But then in 2019, the Sonic Paper was was published by Mary Mallor and some of the Zcash books, I believe. And that basically was the inciting incident for all of our future research efforts, because the Sonic Paper, even though it's not really used anymore, it was one of these very foundational pieces of tech where it did describe a universal Snark, one where you didn't need psychotrasy setups, it described techniques for how to do that. They were just really slow and not practical. But the fact that they actually had a method was exceptionally interesting.
00:05:23.202 - 00:05:33.670, Speaker B: And that's what led me and Ariel down the path of figuring out what then became the Plonk Universal Snark.
00:05:34.010 - 00:05:46.870, Speaker A: So let's just dive right into it. We're going to try our best to keep it informative, but also still high level. What is plank? What specifically was the insight there? And what are the benefits of the protocol?
00:05:46.950 - 00:06:38.870, Speaker B: Yeah, what is Plonk other than a bad dream? Okay, so let's go back to what the heck is Azksnarc? Ezekiel, snark is what you want to do with a Snark is you want to take some high level computer program and prove that you've run the program successfully without having to get other people to run the program. And you can also hide some information as well. But at a lower level. What these Snark protocols are doing is they're converting an imperative computer program into algebraic statements algebra, some equation that is equal to zero, which is rather hard and abstract and a bit of a mind tease. You can't do that. You can't practically write programs that way by crafting your own algebra. That's not what we do when we design circuits.
00:06:38.870 - 00:07:25.850, Speaker B: We layer abstraction layers on top. And the basic abstraction layer is something called an arithmetic circuit, where you have instead of a program, you have gates with wires coming into and out of the gates. And the gates will do algebraic operations like add values together, multiply values together, and then you can wire your gates up together. You can have input wires and output wires. And that kind of you can use that to describe a quasi Turing complete computer program. And then we have ways of transforming arithmetic circuits into ZK Snark algebra, which you can then prove and verify. And the core innovation for Plonck was well, the core problem that Plonck solved was we didn't really have a good way of verifying that all the wires in the circuit were connected in the way that they needed to be for a specific circuit.
00:07:25.850 - 00:07:45.790, Speaker B: Showing and proving that was very hard. That was the thing that universal Snarks could not do, really. And that was the innovation of Plonc, basically finding a very efficient way of proving those wires, wire connections were correct effectively.
00:07:47.330 - 00:07:52.340, Speaker A: Can we try? Let's see if we lose people here. But how do you actually prove that?
00:07:52.790 - 00:08:05.160, Speaker B: Yeah, something called the permutation argument, where you try and create some how the hell do I describe this?
00:08:07.130 - 00:08:10.410, Speaker A: Equality to zero will be the analogy I think you've used in the past.
00:08:10.480 - 00:08:25.440, Speaker B: Yeah, you create a giant polynomial where the polynomial is equal to zero when evaluated at points that are mapped to permutation cycles. No, I'm really not going to be able to explain it with words. I'm sorry.
00:08:25.890 - 00:08:35.502, Speaker A: Okay, so plot came out that led you to do Aztec 2.0. What was Aztec 2.0 and what changed in terms of your goals at that time?
00:08:35.636 - 00:09:22.910, Speaker B: Yeah, so it was around November 2019, I think. We were all sitting in a hotel doing an off site, and we were like, Aztec One kind of sucks. We all know this. What can we do to fix it? And by then, we had Plonk, so we had some key tech where we're like, actually, now we can well, now we can do the kind of complex stuff that we wanted to do for Aztec One, because by that point, we pivoted. We were like, the original credit and ideas is interesting, but being an infrastructure layer that just provides privacy for web3 is way more just a better use of time and just something that we just really wanted to do quite strongly. So we pivoted and we were like, okay, well, now we have this Snark technology. We still wanted the full concept.
00:09:22.910 - 00:09:46.006, Speaker B: The Holy Grail was programmable smart contracts. But we knew at the time we didn't have the tech to pull that off. Plonk wasn't good enough. But what it did enable us to do was create a private roll up. We're like, let's make a private l two, one, where you can shield ETH tokens. You can send them around to one another, deposit, withdraw, that'll be useful. We can do it with today's tech, and it'll be a stepping stone for greater things.
00:09:46.006 - 00:09:48.060, Speaker B: And yeah, that's what we built.
00:09:50.740 - 00:09:52.048, Speaker A: How did that go?
00:09:52.214 - 00:09:57.170, Speaker B: How did it go? Well, we pulled it off, but it wasn't easy.
00:09:58.980 - 00:10:25.320, Speaker A: Actually, maybe a better question for me to ask would be that was the interesting insight and kind of from doing one to one transfers from Aztec one to doing a private roll up two, this was kind of point where you sort of diverted your attention towards scaling Ethereum. And my question is, what was the relevance around this being a private roll up instead of just let's just get the throughput up for the entire space and get people to build apps?
00:10:26.220 - 00:11:18.684, Speaker B: The fundamental thesis of Aztec has always been that privacy is really the missing keystone for web3 to become mainstream. That without privacy, you don't have identity on chain in a meaningful way. And without identity, you cannot really link what happens on web3 with what happens in the real world. And therefore, basically the revenue universe of everything that happens on chain all boils down to basically the value of a network's consensus token or dollar wrapped stable coins and pretty much nothing else. Basically, if ETH went to zero, everything on ETH would ethereum would go to zero except USDC and Tether, maybe Tether would so, yeah, we were always privacy first, but we always but also, scaling is also an important part of making a practical mainstream transactions ecosystem. So we wanted both. And you have some unique challenges with achieving both.
00:11:18.684 - 00:12:07.304, Speaker B: Because if you have a private transaction system, a user's transaction is not an instruction to be executed on a blockchain. It's a proof of correctness of a transaction that you want to execute and some encrypted state changes. So basically you're saying change some encrypted numbers in your encrypted database. And here's a proof that what I'm doing is following the rules of your blockchain. And that means that if you want to create a roll up, what are you rolling up? You're rolling up zero knowledge proofs, which means you need a roll up ZK Snark circuit that verifies a bunch of user transaction proofs. And so that concept is roughly just captured as recursion, which we abuse in nomenclature. In Snark world, recursion is basically just verifying a zero knowledge knowledge proof inside another zero knowledge proof.
00:12:07.304 - 00:12:10.590, Speaker B: And that is a rather uniquely hard problem.
00:12:11.120 - 00:12:11.932, Speaker A: Why is it hard?
00:12:11.986 - 00:12:44.340, Speaker B: Yeah, well, it's hard for Snarks. It's hard because in a Snark circuit, you reduce everything down to arithmetic gates where they're basically additions and multiplications and other custom stuff. But all your operations are all basically they're modular prime field. So they're all evaluated. All your numbers wrap around at some large prime, which makes math a little hard if you want to do accounting, because there's no such thing as a negative number in that world. But more importantly, if you want to verify a Snark proof.
00:12:46.600 - 00:12:47.076, Speaker A: You need to.
00:12:47.098 - 00:13:43.210, Speaker B: Basically do elliptic curiosity inside your Snark circuit. And the way elliptic curves are structured is that in order to do that inside your Snark circuit, you need to perform prime field arithmetic over a different prime modulus to the one that is natural to your circuit. So basically all your operations are mod p, but you need to do computations that are mod Q. That's very hard. It's possible to do, but it adds an enormous amount of slowdowns to your proving system because you basically have to emulate an integer number system using your weird prime number system and then use your emulated integer number system to emulate another weird prime number system. And so those two layers of abstractions just murder performance. And so there's been a lot of research that has been going into solving this problem and it is largely solved these days, but back in 2019 it really hadn't been.
00:13:44.220 - 00:13:52.012, Speaker A: I mean, over the last six years it seems like recursion was that insight, how hard was this as a problem for you to kind of get to here?
00:13:52.066 - 00:15:00.050, Speaker B: Yes, I've been doing this for six years and probably a solid two years of that, if one were to add it all up, would have been solely trying to work on recursion because it was kind of existential of what we're doing with privacy and what we're doing with smart contracts. So the new version of ASIC, we're building the new ASIC network, which actually is properly programmable, now uses an enormous amount of recursion to basically compose transactions. You want composability in a smart contract, contracts, calling contracts, calling contracts. If every contract is basically represented as a collection of Snark circuits, that functionally requires you to have Snark circuits that prove other Snark circuits or verify other Snark circuit proofs. And that all has to be done client side on a user's device in order to not leak secrets. And typically you're probably going to be doing that all in a web browser because if your DAP is running in a web page, which means you're basically computing a bunch of exceptionally complex recursives in old proofs in like WebAssembly and JavaScript. So making this performance has been something which has spent an enormous amount of time on.
00:15:00.900 - 00:15:41.576, Speaker A: And I think it's working too, because obviously a lot of improvements around just what Plunk has accomplished, a lot of those flavors have sort of been now worked on and contributed back towards the rest of the community using it. And actually it's kind of amazing that we kind of come this far and we've kind of been pretty good on those type lights. One interesting thing that's been a pattern for the rest of the day today has been people talking about what does it mean to have composability on their platforms? You famously chose to not do a Zkvm. Why should we think about what matters here as you think about privacy or scalability through ZK?
00:15:41.768 - 00:16:51.376, Speaker B: So for Aztecs, Azkvm was never really on the cards because we want privacy, which means basically, you can write to a smart contract where some of the storage variables in that contract are not visible to everybody. They're encrypted and effectively owned by individuals, and their encrypted values are on chain. And you can execute transactions that perform logic on the underlying data, but only people with the decryption keys can send those transactions and see what's going on. This adds a lot of complexity to your protocol architecture because your state model changes in a profound way compared to how Ethereum works. Because in a fully privacy preserving world, it's not just that your information needs to be encrypted, but you cannot modify encrypted information on a blockchain, as in if you have a literal database with a specific value, like an index in that database containing some encrypted value. You never want to send a transaction which modifies that value because people can see that. And they can see by seeing what encrypted things you're modifying, they can build up the transaction graph.
00:16:51.376 - 00:17:09.900, Speaker B: And so the state model is different in the privacy preserving world, which means that the entire semantics around the Ethereum virtual machine and how it works just don't work for privacy. Therefore, you cannot create a private or fully private EVM Ezki VM. So we're like, we're going to build our own architecture from scratch.
00:17:10.640 - 00:17:16.030, Speaker A: So does that mean everybody else who's claiming to make this private in the future will not be able to do this?
00:17:16.480 - 00:17:49.850, Speaker B: Well, they're going to have some I'm never going to claim they can't, just that they're going to have to chew glass for a very long period of time. I mean, you can think of Aztec effectively as attempting to make ethereum private via a layer two. It's taken us six years. It's not easy. And also effectively, any kind of ZK AVM layer two that wants privacy is going to have to take the same approach where you can add a privacy layer onto a Zkvm as a layer three, but actually making the core functionality private. I'm very skeptical that can be done. I would love to be proven wrong.
00:17:50.780 - 00:18:12.080, Speaker A: Well, I guess we'll find out very soon. I think one thing will be also extremely helpful is something you just touched upon, which is how contracts would be different in this world. Can you give us another intuition or another more concrete example of how should we think about a private contract and what either a use case flow would look like or how it would be different from what we know right now.
00:18:12.150 - 00:18:56.008, Speaker B: Yeah, definitely. So in a private smart contract on Aztec, you have functions like in a regular within a smart contract, but your functions are private, or they're public. Private functions modify private hidden state and the proofs of these functions are generated client side. Public functions modify regular public account state like you do on Ethereum. We wanted both sides of this because that way you can create these complex hybrid applications where some information can be private. But for things like decentralized exchanges, you also need public state. For example, like what's your total liquidity supply? But to give an example of what something could look like in Aztec or in a private transaction world, let's take account abstraction.
00:18:56.008 - 00:19:43.660, Speaker B: That's one of the keystone technologies that we're hoping will solve all of the user experience problems with blockchain where users have public private keys. And if you use a private key, you're screwed. It's a mess. Horrible account structure can solve this. So let's now say, okay, you say you got a contract which verifies an Apple Touch ID signature. So if you're using Apple Touch ID, what's happening is a secure enclave in your computer is signing a SEC P two five six R one signature according to some public key, which is defined by Apple. And there's no reason why you can't have a smart contract which verifies this flow, or a smart contract that verifies a Google authentication sign in, or one that verifies a login via a GitHub signature.
00:19:43.660 - 00:20:33.550, Speaker B: And so this is extremely powerful because it means that you can use these relatively trusted web two authorization flows and connect them into web3. And so instead of having to make web 2 march to the beat of the web free drum, we make it very, very easy to onboard web two style products and services and user flows. However, imagine a world where, okay, so imagine you got venmo but using Ethereum to settle in a stable coin. It's super cheap, super easy, except that, well, every time you use it, not only can everybody see what you're paying, but they can see that you're doing it through a specific Apple ID. That would be problematic, not good. But that was where an astec private smart contract comes in. Where your account contract is private, you have a contract which is verifying a specific Apple authorization flow for a specific user's Apple ID.
00:20:33.550 - 00:21:01.088, Speaker B: But when you transact with that contract, that contract is going to forward your call to wherever you want it to go. But an observer looking the blockchain doesn't know any of this. They don't know that you've talked to your specific Apple ID contract. They don't know that that contract contains your Apple ID. It's all encrypted. And so effectively, zero information is leaked. Because if that contract is calling other private contracts, no information is leaked.
00:21:01.088 - 00:21:14.916, Speaker B: If it's calling public contracts, then it's going to map your Apple address, apple ID to some, like, an ENS address or some public Web Three address, which will be completely not at all linkable to your Web Two identities.
00:21:15.108 - 00:21:21.996, Speaker A: This is not only just no information is leaked, you can also partially, actually, in this case, grant access to certain things and not just everything or nothing.
00:21:22.098 - 00:21:22.556, Speaker B: Exactly.
00:21:22.658 - 00:21:30.860, Speaker A: That's amazing. Is that kind of specific to Noir, I guess, for the audience? What's Noir? And how does that fit into all of this?
00:21:30.930 - 00:22:07.828, Speaker B: Yeah, so Noir is our ZK programming language. So it's one of the final pieces of this abstraction layer that we use from turning programs into algebra. It's one where you write your programs in a rust like syntax, and it then gets compiled down to an intermediate representation, which is Snark friendly and can then be consumed by a cryptography backend to compile into a Snark proving verification key. And we're adding smart contract syntax and semantics into Noir to turn it into a fully fleshed smart contract programming language. And so yeah, that's noir.
00:22:08.004 - 00:22:24.384, Speaker A: Amazing. I also want to kind of just talk about a few other things, too, maybe. You've been here for six years and working on Aztec and scalability and privacy. What's something you've been wrong about or surprised with over the last few years on building everything that you're doing.
00:22:24.582 - 00:23:05.576, Speaker B: Yeah. So, yeah, I guess I'll reveal my mistake. Several things. So I guess the most disappointing one for the company was when we upgraded Aztec Two to something called Aztec Connect, where you could talk privately to layer one, D Five protocols and do so relatively cheaply. And we were targeting 1 billion TVL in Aztec Connect contracts. That was our goal. Then the crypto winter happened, and then the tornado cash happened, and the sanctions and both combined somewhat eliminated those Afrations.
00:23:05.576 - 00:23:38.148, Speaker B: But we were very wrong about those. I was also I didn't think it would take us six years to build a private smart contract platform. I thought it would take about two or three. And I guess when it comes to other things in the Polygon Zkevm, I thought that would take at least another year to build. I'll eat humble pie on that one.
00:23:38.234 - 00:24:04.016, Speaker A: I think the fun part is that I asked Jordy this question about an hour ago, and he said, I was also surprised that it took us only this long to build the Zkv. Well, let's try to get towards the end of this transition from Aztec, what it was, to what it is now. You're now at Aztec 3.0 and working hard towards that goal. What is Aztec 3.0? What are the goals now, and what is uniquely enabled by 3.0?
00:24:04.118 - 00:24:07.968, Speaker B: Yeah, so we've decided to reset it's just Aztec now because we've sunset everything up.
00:24:07.974 - 00:24:08.496, Speaker A: Fair enough.
00:24:08.598 - 00:25:28.476, Speaker B: So what is it? So it is a layer two that's fully privacy preserving and programmable so you can write a smart contract in Noir, deploy it to the assang network. And that smart, as I said, has private and public functions. So not only can you capture all of the functionality of a smart contract layer two that exists today, but you can also add in the ability to work on encrypted, state and completely hide your identity, hide information about what you're doing and selectively reveal it to either other smart contracts or to other individuals if you need to. And so you can do things like shielded tokens and transfers, you can do private identities, you can do web two, sign in inflows without leaking information, you can do private governance, private voting in Dows. Yeah, basically the plan is that to explode the design space of what you can do in a decentralized network by giving developers access to this critical primitive of hidden private state. And, yeah, we're building on a layer two of Ethereum. We're planning on eventually going like having portals into the Aztec network from pretty much any l one, royal two that can support it.
00:25:28.476 - 00:25:40.130, Speaker B: And the goal is from launch on day one to be fully decentralized and permissionless. So no centralization of sequences of block builders, any of that.
00:25:40.660 - 00:25:43.180, Speaker A: That's an ambitious goal. What's the timeline?
00:25:43.340 - 00:26:31.970, Speaker B: Yeah, because of the ambitious goals, eternals are not as fast as the usual web3. So we are planning main net end of next year, but we will hopefully be releasing the Aztec Sandbox in next month, which will basically be a local version of the network that developers can deploy to a local machine that will produce blocks. They can deploy contracts, they can write contracts and deploy them to the sandbox network and then produce blocks and send transactions to test. So that's basically the first shippable piece of the Aztec network. The goal is basically just to get feedback around the semantics of the noir language and how and the architecture of the network and see if it basically satisfies the needs of the developer community.
00:26:32.340 - 00:26:42.928, Speaker A: Amazing. Last question. We're going to try to make a couple of predictions about the future scalability here for Ethereum. What do you think this looks like? Two years from now?
00:26:43.014 - 00:27:45.160, Speaker B: Yeah, two years from now. I mean, I'm not very good with crystal ball predictions, so this will all likely be wrong. I think one of the interesting trends, I think lately has been this year has been a year very much of kind of consolidation, I think, when it comes to layer twos with not where the pace of innovation at the very grassroots layer of new products coming up, at least my opinion is it's kind of is decelerating a little bit. But what you're seeing is a lot of these layer two projects that have been building for some time are starting to actually get into production, starting to fulfill the original ambitions. So I suspect what's going to happen in over the next few years is that theme is going to accelerate specifically right now, pretty much all airtus are heavily centralized. Either they have the ability to there are multi syncs on their L One smart contracts to upgrade the network, or emergency help fix things, and the sequences are largely centralized. I think we're going to start to see more steps towards centralization.
00:27:47.340 - 00:27:48.484, Speaker A: Towards decentralization.
00:27:48.532 - 00:27:50.020, Speaker B: Or towards centralization decentralization.
00:27:50.100 - 00:27:50.730, Speaker A: Okay.
00:27:51.500 - 00:28:43.030, Speaker B: But I think it's going to be harder than is generally expected from the community. I think there are some relatively unsolved problems when it comes to sequencing layer twos, where there's an interesting trade off space between that's not quite the same as in layer ones particularly. You got this coordination, this need to coordinate sequences on layer one, and that is relatively and the more you want to protect your liveness guarantees, the more expensive coordination becomes and the worse latency becomes. And if you want to produce blocks, say, every second, that can be a problem. So I think we're going to I suspect some people are going to run into these problems fairly soon, but I imagine in two years they will largely be solved. I hope they will be, because we're planning on launching within two years and we need to solve them.
00:28:43.720 - 00:28:50.030, Speaker A: Amazing. Zach, thank you so much for taking the time today and hopefully we all get to see Aztec network live very soon.
00:28:50.560 - 00:28:51.290, Speaker B: Thank you very much.
