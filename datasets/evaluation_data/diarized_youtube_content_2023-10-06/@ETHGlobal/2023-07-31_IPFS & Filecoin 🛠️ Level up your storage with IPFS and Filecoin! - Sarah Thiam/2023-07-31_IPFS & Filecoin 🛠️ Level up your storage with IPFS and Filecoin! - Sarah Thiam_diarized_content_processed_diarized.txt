00:00:07.290 - 00:00:32.098, Speaker A: Yeah. Good to see all of you. Welcome to the FalcoIn Talk FalcoIn FVM IPFS My name is Sarah. Let me just slideshow this right. My name is Sarah. I lead FVM developer Experience, but I'm also representing FalcoIn, and we have various tools you can use for storage in our ecosystem. So I'm going to kind of run you through what you can use in this two day hackathon.
00:00:32.098 - 00:01:02.318, Speaker A: Also being super realistic, I know it's super stressful to finish a two day hackathon and produce something great, so I'm going to show you one easy demo and also give you options for more technical versions. If you choose that you don't want to sleep tonight, so it's really your choice here, right? I'm giving you all the options. I'm available on Twitter here. So if you have any questions, you can always DM me. And we have an FBM dev Twitter account. We've been featuring really great devs that have been partnering with us in the ecosystem, like Zondex and other partners and early builders that have been helping us. Yeah.
00:01:02.318 - 00:01:27.606, Speaker A: And if you want to tune in on a twitch, we have occasionally live coding sessions where you can kind of see us try stuff out. It breaks, we fail, and then we try to fix it and figure it out together. Cool. All right, so we're going to get started. All right, so I'm going to assume you're kind of designed your project. It's already been a few hours, and you're like, what do I do? My storage. Right? So some simple options for you.
00:01:27.606 - 00:01:55.214, Speaker A: We're going to run through them. So we're talking about leveling up, right? So I'm going to get from simple super easy to deploy to get a little bit more well, not complex. It's still really easy. And then lastly, super complex, but you get more programmability and more logic and more customization together with it. So on level one, we have pinning on IPFS, which is Web Three storage. I'm sure many of you know IPFS or are fans of it, usually short of hands. IPFS used.
00:01:55.214 - 00:02:10.018, Speaker A: See, there you go. There you go. Yeah. All of you are familiar with that. If you use Web Three storage, they have a super easy SDK. I just did a demo at Encode Hacker house, so I think I see some familiar faces here. So I will then focus on the level two, which is around Lighthouse.
00:02:10.018 - 00:02:58.862, Speaker A: So Lighthouse Storage is similar to Web Three storage, but they have more functionality on the back end. So Web Three storage was really meant to be super, super simple to use pinning on IPFS, retrieving it, your data could disappear over time because it won't be pinned there forever. Lighthouse Storage allows you to pin on IPFS. They also back it up onto filecoin by making a storage deal for you on the network. And very, very recently, like, literally two days ago, up to the last minute, we have been fixing out our verifiable proof for small pieces of data. So not only do you store your small image as part of a larger data deal on the Filecoin network, but you can also verify that your small piece of data is stored within a larger deal and exactly where it sits. So you could rather than unsealing the entire data deal, you can just try to look up for that one small JPEG that you want and then retrieve that so very cool functionality coming in there.
00:02:58.862 - 00:03:13.740, Speaker A: And then lastly, level three we will be storing on FalcoIn. So you're storing it directly from a smart contract. This is enabled by the FalcoIn virtual machine. So anyone here has used the FalcoIn virtual machine? Yeah. Okay, the numbers are increasing. Hackathon and hackathon. Okay, awesome.
00:03:13.740 - 00:03:48.226, Speaker A: So, yeah, if you use FalcoIn virtual machine, because of that, we are fully Ethereum compatible. So for the first time you will be able to interact with the FalcoIn protocol. Prior to that, for the past like seven years that we've been building our network, you couldn't really interact with it unless you are a storage provider and you want to run your own node, make the deal yourself. With the Falcon virtual machine, we're now fully Ethereum compatible. You could start a storage deal from a smart contract and from a solidity smart contract. So perfect for ETH Global. It does take a little bit longer, about 24 hours for a deal to be made, but I have seen people submit projects where they show proof of concept of it working.
00:03:48.226 - 00:04:23.786, Speaker A: The deal doesn't get made and that's totally fine as judges because we know that it takes like 24 hours or so. Right? But you can definitely include that in your project. And the cool part here is that you will be able to add whatever you want to your Solidity contract. So you can write logic around native storage primitives. We have created a library called Filecoin Solidity that will allow you to use solidity calls to then interact with the filecoin storage primitive. So you could do things like get deal status, how long is my deal being stored for, can I renew my deal? And so on. So, a lot of things there if you head over to the booth later, I don't think I have it in my slide.
00:04:23.786 - 00:04:53.206, Speaker A: This is the tutorial for our main contract that allows you to make a storage deal and you can play around with that. But if you need more resources, I will be at the booth and I have a cheat sheet for you that will have all the FBM resources that you need. So this is how you go from level two to level one to level three. And yeah, I've tried to simplify it as much as possible so you can kind of see straight away what are your options for the hackathon. Cool. So I'm going to run through the architecture a little bit. Just a quick TLDR for anyone who's new to our ecosystem.
00:04:53.206 - 00:05:21.406, Speaker A: I know that sometimes for me, I joined Filecoin and for like three months I thought IPFS and Filecoin were the same thing. They were not the same thing. So surprise to me. And the difference here is that IPFS is a P to P network. So this is not actually running on the blockchain. What you'll be doing is pinning your data to nodes that are hosted by a community, or you host it yourself. So these clusters show three different options that you can use when you use IPFS to make sure that your data is perpetually stored somewhere.
00:05:21.406 - 00:06:04.080, Speaker A: Well, technically it's not stored, it's pinned. Right? You could run your own notes. You could run notes with your community, or you could pay a pinning service like Pinata to do so for you. However, with running your own notes and running with a community, it's hard for you to guarantee that your storage is going to sit there forever. Because if you break up your friends or you choose not to run your notes anymore, your data could just disappear, right? So that's why we've created the Filecoin protocol. So TLDR, for those who are new to this, the way that it works, if you look at the top over here, which is the dotted box here, you would make a deal, buy it with a client and a storage provider. You would then handshake make a storage deal and you negotiate a deal how long you want to store it for, how much you want to pay.
00:06:04.080 - 00:06:42.414, Speaker A: Once the terms are agreed upon, the storage provider will then make the storage deal and publish it on chain. So on chain will show your deal's metadata, right? How long you want to store it for, how big is your file size, and so on. But the file transfer happens off chain, and that is represented by the network you see over here, which is all our storage providers here. They would then represent themselves on chain by periodically posting proof of your storage deal to show that, hey, my data is getting stored every single, I think every 24 hours, they have to submit some kind of proof, proof of spacetime, and so it'll prove that your data is being stocked continuously. Right. But then they'll store all your data off chain. So it's really up to them how they want to store it.
00:06:42.414 - 00:07:18.786, Speaker A: And you can choose what kind of storage provider you want to work with based on the profile that you know. So some might store it in a hard drive, honestly, some might just print it out and store it in a box. But that's really your choice. It's a preference. So that's how the Filecoin protocol works. So it's because it's incentivized as a storage marketplace, it will then guarantee that your data is stored perpetually or for as long as your deal lasts, right? The way that we usually use it now. So on a realistic note, when you store your data, you then want to retrieve it, right? If you're storing it on filecoin and you want to retrieve your data, it does take longer for you to unseal the data that has been sealed cryptographically by the storage providers.
00:07:18.786 - 00:08:05.106, Speaker A: So if your deal takes 24 hours to make, it could then take multiple hours to then unseal and retrieve your data. So unless your storage provider has agreed to terms, which some storage providers do to put an unsealed copy together with your sealed copy, so that means that they store double the amount of data, but that is their choice. And we have a really easy tool called Lassie that you can then retrieve your data from. So if you're using level three, which I showed you just now, the Filecoin virtual machine client contract, if you clicked on that tutorial, you could then use Lassie as part of that it's within the tutorial you can use less e to then retrieve your data pretty quickly. If it's unsealed and on the testnet, it is. But realistically, on the main net, it probably most of the time is not. So the way that you will normally store data, we do recommend that you use Filecoin together with IPFS.
00:08:05.106 - 00:08:28.910, Speaker A: So if you're planning to build a project, that's something to keep in mind. So IPFS will allow you to pin a copy and then you store it and back it up onto Filecoin. IPFS allows you to do quick retrievals. So that's how you can quickly get your data however you need it. So far, I know it's like quite a lot. All good, everyone still with? Great, great, great. Okay, so this is an example of the metadata of your storage deal.
00:08:28.910 - 00:08:57.334, Speaker A: And I see a lot of words, but I'm going to walk you through it. So if you look at the backslashes, you'll see p size verified deals start epoch and epoch how long is being stored on chain, how long your deal is supposed to last for storage price per epoch, how much you're going to pay and offer your storage provider. And provider collateral is not for you. Client collateral is how much you want to put out for the deal to then make that deal proposal and so on. So these are all the metadata within your storage deal. Once it is accepted, it gets posted on chain. Right.
00:08:57.334 - 00:09:38.638, Speaker A: So why did I show you this? Because this is kind of important for the next point. So talking about fem, so if any of you are new to the Filecoin virtual machine, what it does is that it manipulates the storage deal metadata. So all this metadata that you saw over here, that is what the FalcoIn virtual machine will be able to manipulate. So when you write logic within your solidity contract and you're using our Falcon Solidity library, you are manipulating all that metadata of how you want that file to move around. So you're not actually manipulating the data that's thought within the deal, you are manipulating the metadata. So I just want to make that point really clear. Yeah, and I'll talk about price structure in a bit, but if you are looking for computing the actual data, FBM is also really useful together with Bakayao.
00:09:38.638 - 00:10:09.198, Speaker A: So Bakayao is a decentralized compute framework that we have. If you want to know more, we are the Booth. We have a mentor there from the Bakayao team. What FVM would do is allow you to send by manipulating like, hey, I want this storage deal to be sent as a job request to Bakayao. So Bakayao will then do the decentralized computation off chain and then post the result back for you. So that's how you will use Fem and that's what Fem really unlocks. There are a lot of use cases that you can unlock with Fem and we're continuously improving the DAP ecosystem to make it even easier for you to build solutions on top of it.
00:10:09.198 - 00:10:43.622, Speaker A: Right. Early days, we just launched in March, so a lot of good integrations coming in. So do definitely look forward to that. I just want to give you a little bit of so the green part, the green circle over there, that refers to how it's manipulating the metadata around the storage deal and then that enables you to then do whatever all the magic that you want to do on the layer two on top of that. So all the solutions that you want to build, you can then build it with those options there. So that's how IPFS filecoin and FBM work together. By the way, this took me like six months to digest and put into diagrams.
00:10:43.622 - 00:11:17.294, Speaker A: So I'm trying to give you like a really condensed version. But yeah, if you still need further clarifications, I'm at the Booth hackathons to learn. So if you want to learn more and then build later on, that's totally cool. We actually have a really big hackathon coming up as well, end of August, so you can participate in the open data hack there and get in all this cool data stuff. All right, so before we get into the demo, I don't know why I put this here. I should put this at the end. But for the prizes, we will give out grand prizes, three grand prizes, anyone that's using Filecoin, IPFS or IPM.
00:11:17.294 - 00:11:33.018, Speaker A: So as I talk through the demo and some of the use cases do have a think about what it is that you want to build. Best project integrating FVM with Buckyau. So I talked about Bakyao a little bit earlier on. That is the decentralized compute. We'll be giving two teams $2,500. That would be a special prize. So definitely do check that out.
00:11:33.018 - 00:12:06.660, Speaker A: And runner ups, I think any project that impresses us and that is really, really cool will give up to six teams, part of the pool price, which will be really fun. So have a think about these as I go into the demo. Okay, so I'm going to demonstrate I demonstrated earlier at Encode Hacker house around the Web Three storage piece. I'm going to demonstrate the Lighthouse piece over here. Lighthouse itself is really cool. If you scan this QR code, it'll bring you to the documentation. I'm going to show you the page and kind of show you the options that you have and what it is that we will show today.
00:12:06.660 - 00:12:29.894, Speaker A: Is this big enough? Yeah. Okay, great. Thanks. Okay, so if you head over to Lighthouse documentation, remember, do not use the CLI commands part. That actually posts the main net, not the testnet. So you want to use the SDK over here. So if you are building your front end ETH JS, you can actually easily click over here for code samples.
00:12:29.894 - 00:12:51.106, Speaker A: And then I will be demoing for the node JS back end. So you have options. The cool thing about the difference between Web Three storage is that web3 storage is a symbol storage of any data. If you want to have encryption access control, you can use Lighthouse storage. They actually have it inbuilt within the SDK. So it's super easy for you to use as part of your project. And it should just be on top, a layer on top.
00:12:51.106 - 00:13:49.520, Speaker A: So it should be easy to use and implement. So we're going to try this one out. All right, so we're going to start with this. We're going to do a really easy one. We're going to create our NPM package, and then we're going to NPM install the Web Three storage file. So all you have to go is over here, and you can very easily just copy this. It's up to you.
00:13:49.520 - 00:14:20.208, Speaker A: I usually use this method. What's this? The wrong one. No, hold on. Where did it go? Where did my Vs code go? Hold on. What? Okay, I found it. I found it. All right, awesome.
00:14:20.208 - 00:15:08.550, Speaker A: Thank you. All right, so we're going to install this, and once you get that set up, at the same time, they also have instructions for creating a Lighthouse storage wallet. So you can then run the storage deals that you want to run. So we're going to open up the folder, trust it, and going to pick it back up. So over here, just going to create upload JS. And you just have to hit into the code and copy it over here. So super simple.
00:15:08.550 - 00:15:45.650, Speaker A: And I'm going to upload it from a file directly from my computer. So I've really created, like, a test file over here whoops you see east CLO. Let me create a new I'll create a new text file over here. So I guess I can say like, hello. Oh, sorry. We're in France. Bonjour.
00:15:45.650 - 00:16:32.150, Speaker A: Okay, great. Save this ethobal test. Awesome. Okay, now we're going to get the path right. I'm just going to drop this in here for a second, and we're going to create the file from here. So I generated an API key earlier on. If you want, you can easily do this here.
00:16:32.150 - 00:16:55.160, Speaker A: So I do use the CLI commands for creating the API key. I just find it easier. You can just easily copy this in and generate your API key to use it. So let me just check first. Hold on. Okay, great. So I created a wallet earlier on.
00:16:55.160 - 00:17:34.136, Speaker A: If you are new to this, you would then have to hit over here and create a new wallet. Sorry, I missed that step, but I've really created a wallet. So you create a wallet first. Once you get your wallet set up, you can easily hit over here and then get your API key. So I have it over here, which is great. And let me just copy this and head back over here. But hold on.
00:17:34.136 - 00:17:52.820, Speaker A: Let me key in my path first. Haven't checked this one. This one, this one. Okay. Over here. Great. All right.
00:17:52.820 - 00:18:17.200, Speaker A: So, yeah, if you want to upload any small documents, this should be a super easy way to use it. And then what you want to do is add in your API key. Let me just check this first. Save it. Hi. Into my API key. Okay.
00:18:17.200 - 00:18:55.494, Speaker A: Oh, I did generate one already. Okay. So I'm going to copy this again, and I'm going to paste it back up here. Cool. And we'll save it and hope this works. No, this doesn't work, but because I will add in a type here. So, yeah, if you hit this error, definitely go in and hit this.
00:18:55.494 - 00:19:17.490, Speaker A: This often. Gets me going. And let's give it a shot. All module not found. I see it. Oh, he and.
