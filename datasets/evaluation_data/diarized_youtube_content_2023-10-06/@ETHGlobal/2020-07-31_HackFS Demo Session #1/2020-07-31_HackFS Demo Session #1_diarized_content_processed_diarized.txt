00:00:06.330 - 00:00:23.120, Speaker A: It okay. We're good. All right, cool. Also, obviously, don't change the order of any names in there. I trust you all. Okay, so this is the end of week four. Awesome.
00:00:23.120 - 00:00:49.498, Speaker A: Everybody's been working super hard for the past month. This is almost the culmination of all of your efforts. You've got some amazing projects, some amazing demos to show us. I'm excited. Juan's excited. Everybody's excited to see. And so this is really the first exposure, maybe the first time you're showing your project to people besides your team.
00:00:49.498 - 00:01:12.318, Speaker A: So this is a big step forward. Congrats for making it this far. As I mentioned earlier, at the start, please add your name to the doc I just linked in the chat. That's how we're going to be going for scheduling. And I will stop talking, and we can just get right into it. Somebody just deleted their name. Okay, TJ.
00:01:12.318 - 00:01:57.840, Speaker A: Mr. Rush, you want to kick us off? And remember, the key thing here is this is the demo session, so we want you to be showing something that you've built. We're happy to provide other feedback, but this is specifically for demos, know, concrete walkthroughs of things that you've built. So, TJ, you want to go ahead and share your screen and let us know what you've done? Yeah, I was just going to say start with a quick intro of what you've been working on, and then you can jump right into it. If it's okay, I'll just play the video we're kind of working on. We just spent the morning building a video, so it kind of explains it, I think. How long is it? It's four minutes.
00:01:57.840 - 00:02:13.800, Speaker A: Okay, perfect. Right under the limit. Four minutes and 1 second. I'll allow it. Make sure to share your sound, or if you're going to talk over it, that's fine. Can you see the screen? Yes.
00:02:14.490 - 00:02:23.282, Speaker B: Talk about our hack FS project called the Unchained Index 3.0 native API. Prior to the hack, we had built an application called Triple.
00:02:23.346 - 00:02:43.440, Speaker A: Real quick pause for one SEC. What I'm going to have you do is reshare it, but make sure to share your audio from the video. There's a little dialogue that'll have the audio come through much cleaner. So stop your screen, share, and then go to share it again. And at the bottom of I see it. Okay.
00:02:53.270 - 00:02:56.574, Speaker B: Called the unchained index. A web 3.0 native API.
00:02:56.622 - 00:02:57.250, Speaker A: Is that better?
00:02:57.320 - 00:03:22.102, Speaker B: Prior to the hack, we had built an application called Trueblocks, which runs on the end user's machine. We call it an account explorer. It does double entry accounting and exports data to accounting software. Being fully local, the software is private and 100% decentralized, assuming the user has an ethereum node, of course. There's a problem with this. It requires users to run their own infrastructure. The normal way to solve this problem is to move the infrastructure to a remote server and leave the UI in a browser window.
00:03:22.102 - 00:03:55.078, Speaker B: This is standard old fashioned Web 20 and it exhibits all the problems that Web 30 is trying to address from privacy, verifiability and censorship. For a hack FS hack, we wanted to see if IPFS and Ethereum could help to solve these problems. The existing Truebox code currently builds a chunked index of every appearance of every address anywhere on the chain. As it creates each part of the chunked index. It also creates a Bloom filter, which is a much smaller piece of data representing that chunk. For the hackathon, we extended our infrastructure code in two primary ways. We added a publishing piece.
00:03:55.078 - 00:04:31.862, Speaker B: Each chunk and Bloom filter is pinned to a locally running IPFS daemon. And to pinata, we inserted the git commit of the code that builds the data, making the data reproducible. And we put the hash of the manifest to every chunk and Bloom filter. To an Ethereum smart contract, we also added a consumer piece on the end user size. We left the existing API in place, but modified it to accommodate the removed data. As the user uses the application, it queries the smart contract to see if a new manifest has been published and if yes, any new Bloom filters are downloaded and pinned. Next, the Bloom filters are used to determine which chunks contain the user's address, and only those chunks are downloaded and pinned.
00:04:31.862 - 00:05:12.030, Speaker B: Finally, the query is answered and the results displayed. As a result of these hack FS changes when a user queries for an address on the chain, we can deliver the results without using any server, and we can deliver on a number of Web 30 promises. This is perfectly private with minimal infrastructure. We have verifiable data due to git commit. The producer cannot withhold the manifest because each user is reading from a smart contract. We have also improved the economics because each user downloads and pins the portion of the index they care about. Over time, with more and more users, we will realize improved data availability and discovery, more equitable sharing of cost among users associated with producing and publishing this data.
00:05:12.030 - 00:05:24.500, Speaker B: A light user such as this one only taps a small piece of the index, while a heavy user such as this one carries almost every piece of the index data. Each participant carries their own weight. Now we'll show you a short demo.
00:05:27.670 - 00:05:53.340, Speaker A: On the end user's machine. I'm just going to clean up a little bit real quick. I'm going to go here and on the end user's machine. What we're going to show you is that these are the Bloom filters. We've already downloaded them to the end users machine, but you can see that the actual index chunks which are stored in this finalized folder are empty. There are no chunks. So we're going to double click on this address right here.
00:05:53.340 - 00:06:28.066, Speaker A: And it's now scanning the Bloom filters. And you can see it says Bloom Miss, so there's no hit. Whenever there is a hit, then it downloads the actual chunk, so you can see it hit twice. There were two false positives, and now it's finished. So it's found four transactions across the entire history of all 10 million blocks for that address, and it downloaded only 52 megabytes of data from the index. It's big. We did that on a completely local machine.
00:06:28.066 - 00:07:01.810, Speaker A: We did not tell anyone which addresses we're interested in, so we didn't reveal our preference for anything. We're interacting with a smart contract in IPFS, which means that we're not putting any pressure on the provider. We're not hitting the provider's website. We're hitting IPFS and the smart contract. So as more and more users come in, the price for the producer stays the same. It that's it. That's awesome.
00:07:01.810 - 00:07:57.506, Speaker A: That's really cool. Yeah. A couple of quick questions. Are you kind of encrypting the content before you? A lot of the information is coming from directly from the blockchain, right? So it's all public, I guess, or is there kind of some information there that should also be private, like some tagging and annotation of, like, I could imagine as you browse some transactions, you might want to make annotations on them and be like, oh, actually, I think that this was such and such thing. Yeah. The end user can make annotations on the data on the end user's machine, and that's not pinned or shared at all. Also, the end user can name addresses, so they can say, this is my third address or something, but part of that could be shared, and we want to let the user share because we want the community to start sharing names of addresses, because I think that's a benefit to the whole community.
00:07:57.506 - 00:08:52.754, Speaker A: So we very clearly try to separate out private data and this public data. We're very concerned that the Ethereum index will become owned by big data companies, and that will kind of be a real challenge to building a community on top of Ethereum if it's owned by somebody. So we want to release that index out to the community, and that's what we're doing kind of on purpose. So? Yeah, I think so. I think that makes a lot of sense. So for some of that data, if you want to move it around with IPFS, are you pre encrypting it before? Like, are you doing kind of encryption yourself, or are you relying on something like Textile or some other library? We wrote a small library that pins directly onto IPFS daemon. The daemon has to be running.
00:08:52.754 - 00:09:31.470, Speaker A: We still don't know how to start the demon ourselves from our library, but we'll figure that out. And then we also pin to pinata because of speed mostly, I think. And then we use on the client side, we use the IPFS gateway. I think, over time, if there's a lot of data out there and a lot of different people are using, it'll, get better as far as finding it. But it takes a little while to find it without those two pieces. Yeah, it makes sense. And I think if you want to preserve kind of for the data, that you want to be super private, that you only want to allow explicit sharing.
00:09:31.470 - 00:09:56.520, Speaker A: Recommend checking out threads from a textile thread or a textile bucket, because then you can put that data in that bucket and you can still use IPFS to move it around, but only the parties with whom it's been explicitly shared will be able to decrypt it. Great. I'm not going to probably get that done by next week. No, just for the future. But that's really cool. That's really awesome. Thank you.
00:09:56.520 - 00:10:30.420, Speaker A: Maybe another question. How tight is it to the Ethereum blockchain? If we wanted to use some of that tooling and so on to do an index on the Falcon blockchain, what kind of a lift is yeah, we wrote that code. It's all generated automatically from data files, basically. So it's pretty easy to shift to a different blockchain. We've never done that yet, but I can see how we could do that easily. Really cool. Thanks.
00:10:30.420 - 00:11:08.240, Speaker A: Anybody have any quick feedback for the video? Anything you didn't understand? You can either voice it right now or add it to the Google Doc again. So this is a really great example to go first. Thank you, TJ, because this is the format that your submission video is actually going to be in. It'll be a four minute video, and you want to really concisely explain what you worked on and communicate to the judges and anybody who's looking at your project why this is useful, why this is important. So, awesome job, TJ. Thanks for starting us off strong. Thank you.
00:11:08.240 - 00:11:38.726, Speaker A: All right, we're going to move on to the next team, which is Steve Anders. Hello. Hey. Hello. Hey, guys. All right, so our app is called Sailplane. The idea is to create a peer to peer dropbox flowing.
00:11:38.726 - 00:12:31.290, Speaker A: Essentially, Sailplane runs on IPFS and uses Orbitdb in order to be able to track path changes. So when you add files into sale plane to share, you can modify the files, move files around, rename files, and everything is tracked in the Orbitdb state and can be synced across multiple clients. And everything works browser to browser. So the app at the front end is built in react with a custom UI that we developed. And yeah, so this is Sailplane. It's live right now. Anyone can actually go and test it out now on Alpha saleplane IO.
00:12:31.290 - 00:13:23.930, Speaker A: And so when you start, you have this intro page, kind of tells you about it, and you open a drive, and right from here, with no account or anything, you can just start dragging files over. You can drag folders of files over. It basically has a full file Explorer built in with drag and drop capability and stuff, and the ability to preview files. So the cool thing is that I guess I should show is how sharing works. So you can share individual files. You can share folders by clicking the share link. Shared images show up as photo galleries and shared folders.
00:13:23.930 - 00:13:59.666, Speaker A: Another user, for example, here, I guess I'll show you. So if I share this file, open the link, this is what it would look like on the download page with a preview, the ability to download. But real cool thing about this is the ability to share drives. So when you first load it up, drive is created by default. It's kind of hidden away from the user. But if you go to this drives panel, you can see that a drive was created with its own address. You can create multiple drives.
00:13:59.666 - 00:14:47.240, Speaker A: An identity is also created for you. It's actually the Orbit DBID, which we're using here as a user ID. So I'm going to copy this user ID, and I'm going to open an incognito window to show you what it would look like if this was another user. And I mean, you guys can feel free to try this in real life if you want. So here, I opened it up in this new I opened up a brand new instance, has a completely different drive. But I want to share this drive with these photos. I can copy this instance address, click Import drive here, paste in the instance address.
00:14:47.240 - 00:15:17.070, Speaker A: And now I have this imported drive. Wait, okay, live demo. Okay. The issue is when you have IPFS open in multiple tabs, for some reason there's an issue. I'm not sure why it's not syncing. Oh, here it goes. Okay, it's synced.
00:15:17.070 - 00:16:01.280, Speaker A: All right. So you can see the files match up. If I delete a file here, it syncs up instantly across browsers. But if you look at the drive and you look at the sharing information, you can see that I only have read access only over here and here on this other computer, I can see that I am the admin of this drive. I can now take this user's ID, add him to the writers of this drive, and now he has full writing privileges. And you can check that here. Should say you are a writer on this drive.
00:16:01.280 - 00:17:06.274, Speaker A: And now I should be able to delete files from here. It works, and I should be able to drag files in and they replicate across and everything stays in sync and can work across multiple. Yeah. Anders, would you like to add anything? Yeah, there's no encryption added yet, but we're working on that. Well, we do have profile encryption, so if you click up here, you can set an actual plain text password and any file that you add into it will be encrypted. However, we should have by the end of the hackathon, full drive encryption by default and the ability to have multiple users and multiple writers, even with multiple writers and still encrypted. So that's what we're working on.
00:17:06.274 - 00:17:55.780, Speaker A: We already know how it's going to work. So it shouldn't be a problem and anyone can feel free to try it out and we'd love any input. The idea right now for encryption is just have a shared AES key for the entire drive and hopefully we're also thinking that moving IPFS into a service worker will fix the multiple tabs issue. Yeah, if you have multiple tabs open on one instance, it will cause some sort of issues, I think, on the IndexDB local store. And so we're going to have to move it over to a service worker and it should fix all those problems. Awesome. I had a bit of a sneak peek on this the other day.
00:17:55.780 - 00:18:31.950, Speaker A: They sent me some links. So very cool. One thing I'll note is this is just generally a general suggestion. When you guys go to make your videos, start off with what specific problems are you solving? This is a cool demonstration and it's very interesting and I'm very glad that it works actually. But who do you imagine using this? What are their use cases? Why is this awesome lead with stuff like that. But yeah, I'll let somebody else maybe get some feedback as well. Yeah, this is really cool.
00:18:31.950 - 00:19:29.086, Speaker A: I think the demo was really good and really good to follow the flow you may want to think through. I think how it builds up is really good, but I think you may want to have show the specific different kind of files. I think images are really good, but being able to show maybe text or a PDF or something like that, I can show. This is music. So music Plays There's a music preview and for Music Playlist, you can actually drag a bunch of music files into a folder and it'll actually show as a playlist folder, which is text would be really cool too. I'm not sure how that would be done, but it's probably definitely possible. Would it be unfurled? Would it be like if I wanted to share a list, like a to do list with somebody? Would it like like that music player has a little widget underneath it? Yeah, actually if you have multiple, I can show you what it looks like.
00:19:29.086 - 00:20:13.150, Speaker A: Let me just so I only have one song in here, but if I share this as a folder you know what, hold on 1 second. It's sharing it as a 1 second. Let me just create a new folder. All right. So I kind of removed some functionality for the demo, but here I'll show you. It should work now. So if you have a folder that's primarily music, it creates this little music player that I designed and it'll just play music through there and you can have multiple songs.
00:20:13.150 - 00:20:59.434, Speaker A: We're thinking about making like a media panel as well for doing a lot of images or playing songs or something. Yeah, I think it's really cool. Yeah, I think for your demo video, using different examples of the data and kind of like, building up from there, I think will be really good. Like different files? Yeah, like different file types. I think starting with an image is really good. And then have like, a collection of photos and then going from that to the music media player thing will be good. And then I don't know if you do video yet or something, but whatever you have, kind of like as you're demoing different parts of the application, just showing both the different media types.
00:20:59.434 - 00:21:34.070, Speaker A: Should we show mobile different screens? Okay. Does it make sense to show mobile or other types of views or just does it matter? Yeah, totally. I think it's useful in the video to be able to see that it works in mobile. The final video will probably be pretty short, so you'll have to pick really carefully. Every single thing you add will contribute time to the video. So you'll have to try out a few things and then kind of cut what you think is not a school and so on. But you can describe it here and there and like, hey, look, it also works in mobile and you can maybe have screenshots.
00:21:34.070 - 00:21:44.234, Speaker A: Yeah. All right, cool. Thank you. Thank you, guys. Good stuff. Thanks for presenting. And it's working really well.
00:21:44.234 - 00:21:56.190, Speaker A: Great work. Thank you. Okay. Thank you. Thank you. Thank you, Trent. Next up is Raven and Cody.
00:21:56.190 - 00:22:38.618, Speaker A: All right, so we're working on the Geoweb project. For those that haven't heard, I guess it's a distributed web experience where the primary navigation mechanism is geolocation rather than domain names. So a lot of infrastructure behind the scenes. The problem that we're trying to solve is essentially a world where we constantly have smart devices and instead of having discrete interactions, where we open an app or interact with our smartphone as we go to smartwatches and smart glasses, it's a more continuous immersive experience, or at least there's an opportunity for that. So our demo that we will show here is super simple. Hopefully that speaks to the UX. We're still working on another UI that'll show kind of like the land management.
00:22:38.618 - 00:23:05.800, Speaker A: That's how we're breaking things down, essentially. Instead of domain names, it's parcels of land. But this just shows a iOS app and a Apple Watch complication that uses GPS to find COVID information. I'll let Cody go through on that. Yeah. So as Graven was saying, this is just one small component of what we'll hopefully have by next week. But this is kind of the browser UI example that we have.
00:23:05.800 - 00:23:51.300, Speaker A: So I have this pre recorded on a video know, live demo. So we have Apple Watch and iPhone here. So kind of the two components that are in the backend here is a registry that's deployed on Ethereum testnet as well as some content that's looked up in IPFS. So essentially, we have geohashes in the registry mapped to an IPFS CID. So what this will do is when the location changes here, it will look up the Registry, what the latest Content Identifier is for that geohash, and then it actually will resolve that content. Right now it's done through an IPFS gateway. It'll resolve that content and show it in a few different views here.
00:23:51.300 - 00:24:13.478, Speaker A: So right now this location is just somewhere random. And you'll see that I'll go in and switch it. So in the simulator you can spoof location. So make the demo pretty easy. So we have a custom Geohash here, which is a nice sushi restaurant in Portland, Oregon. So right there. So just move the location.
00:24:13.478 - 00:24:39.054, Speaker A: So there's kind of a few things happen. Get a push notification. So right now we're just in the Maps app. We're not in the actual demo app, so we get a push notification. And kind of the content we're showing here for a demo is what is the COVID policy and mask policy for different locations. So you get a push notification saying that masks are required. And you'll notice that the Apple Watch complication updated to show that maps are required.
00:24:39.054 - 00:25:28.260, Speaker A: And then this is inside the app just showing some text content as well as the Content Identifier that was looked up from the Registry. And then also I think I will change the location back and you'll see that it disappears on both of those. And then this is also showing inside of an Apple Watch app. So if you don't have an Apple Watch, might be confusing, but there's a complication that shows on your watch face and there's an actual app that you can have open. So there are two different UIs. So we kind of have push notifications, an actual iOS UI, an Apple Watch complication, and an Apple Watch app. And then I have another video here.
00:25:28.260 - 00:26:22.340, Speaker A: So this one is just showing what it looks like on the lock screen. So this will show the notification actually happens in the background, even if you don't have your phone open. And in this case, the watch and phone will show notification and you'll open the app if you open the notification. So yeah, that's pretty much it. So yeah, right now it's looked up through mobile on the Registry is looked up through an inferior endpoint and the content is looked up through an IPFS gateway. I was messing around with actually resolving and running an IPFS node on the device, but it actually worked well. But there were some issues with the codecs that I just switched to a gateway for now.
00:26:22.340 - 00:27:34.460, Speaker A: Yeah, that's pretty much it. That's really cool. I'm curious, are you going to show kind of the flow for the Registry part? I don't know, like, registering some piece of land and associating information and so, yeah, we also have a whole you go we have a whole web UI, like an admin interface that actually has a map. And you can go in and I think right now it's read only, but hopefully by next week, you'll be able to go in and edit and register different content for different pieces of land. But that's all through web interface, so hopefully we'll have that to show along with this. Yeah, and my question might be so I think showing the application is kind of like you're showing, hey, look, this is the kind of application that you could build on top of the Registry, right? I think in that case, probably starting with the Registry and the admin interface and then going to this demo app and maybe another really simple demo app where you can, I don't know, maybe associate images. Like another version of this is you associate images and then when you pop into a right location, then you just see that the image that's there and that's it.
00:27:34.460 - 00:28:10.790, Speaker A: Maybe showing those two things on top of the Registry might help everybody kind of understand the whole picture. Because I think if I didn't know already that that's what you were up to, I would have guessed you're really building an app specifically for the COVID stuff, but in reality you're doing this whole larger thing. Yeah, definitely. That's good feedback. Yeah, you're right. This is just an example of a use case of what someone would build on top of the Registry. The Registry is what we're actually yeah, I was actually going to ask the same thing, like how's the Registry managed, what's going on behind the scenes.
00:28:10.790 - 00:28:43.700, Speaker A: Kudos for getting something that's very easy to understand what the end product is, but I'd be curious what's going on underneath and why you actually approached it that way. Cool. Yeah, we'll definitely include that. The smoothness of the UX though is really good though. Like just going from the maps to you get this push notification and you jump into the application and you see the stuff and you see the latest Registry value and having it working to watch it too is pretty cool. Great, thank you. Awesome, thanks.
00:28:43.700 - 00:29:56.170, Speaker A: Did you need feedback on anything specific or any pointers that you wanted clarified? No, I think you validated that we understand that what we show there could be done a million different ways and so it doesn't necessarily come across as the full picture. So you validated that we need to probably show a couple of different locations, different types of content, and then really show the registration process. And then we definitely spend some time talking about the bigger picture of why this would be valuable. Why would you use this Registry versus using the Apple App Store or whatever the alternatives are? Yeah, for be I'm not sure if you'll get it enough time for this, but it might be useful to think about it from the perspective of a user doing the registration. So your demo could be like a user trying to associate some piece of data with some location and so the user is the one that's going through and you do the flow of like here I'm registering a location and then because it's a video, you can cut out the waiting parts, right? Because if you have to wait for the chain, I'm going to do that sometime later. Great, it's all registered. Done.
00:29:56.170 - 00:30:32.290, Speaker A: Now I associate some image or whatever and then the last part is you actually show the UX of it from the viewer perspective. Thank you. Thanks guys. All right, up next is Death Forest. Hello guys. Do you see my screen? Yes. Okay, so small prehistory.
00:30:32.290 - 00:31:29.270, Speaker A: I'm Alex from the Force and we have been working on project called subsocial. It's social networking modules on substrate and it's also integrated with APFS. But such as this hackathon is on Ethereum plus APFS. I decided to try from the scratch and to implement something quite simplified version of what we have been doing on Subset plus APFS. And the project that we are working on is sort of simplified version of features similar to Reddit medium where you can create we call it Spaces. So Spaces, it's like a personal blog or public group or Subreddit and then you can post articles, statuses videos and comment on them. Others can follow it and see on newsfeed.
00:31:29.270 - 00:32:30.490, Speaker A: So for this we used Orbitdb React for web application and Textile Buckets to store images and videos and let's go through small demo. So this is a web UI. Here we're creating a new space by giving it a title and description plus avatar. So when you select Avatar it's get uploaded to Textile Buckets and thumbnail created for it. So here you can see a preview of that space. From here you can follow it. Everything is stored local first using Orbitdb on this screen you can see that you can switch between different types of posts like status, article, image, video and right now we are going to create image.
00:32:30.490 - 00:33:25.420, Speaker A: So you write optional text for it and obviously upload image. So then we are posting it again local first and the posters get stored to a space storage. So then you can comment on your post and comments get added immediately. Again to comments are get stored to a separate storage and you can have a tree like structure of comments like on Reddit. Then you can go and create another space to show that you're able to follow unfollow different spaces. So let's skip a little bit here. So here we have another space so we get redirected once the space is created and let's write another post to that new space.
00:33:25.420 - 00:34:34.466, Speaker A: Okay, now it's a text article so we get rejected to the post that was just created and here we can see our spaces and we can follow and follow it. So not very best showcase because it shows user experience from one person. It's better to show experience from different people. But as it was mentioned previously so actually right now we're seeing a feed so it shows the. Post from the spaces you are following. And as it was said in previous presentation, we also have this problem with showing two people working on IPFS and different tabs and browsers. For this we need to have different IPFS so they communicate from one to each other.
00:34:34.466 - 00:35:19.280, Speaker A: And for this, I don't know, maybe we need to record video on two machines or open one as a remote. I'm still thinking about this and also what is not implemented yet. But we are working, we are going to add paywall to this. So post could be optionally encrypted. So we want to add feature pay per view. And for this we colored smart contracts on Ethereum and they're here. So you can register space in Ethereum over here by specifying wallet where it should be paid for post and orbitdb address.
00:35:19.280 - 00:36:18.530, Speaker A: And then a little bit below you can set up a price for your post. So you specify space, post ID and the price and then another guys can pay for the post preview. So it specifies Post ID and the price should be larger than or equals the post price. And once everything is called, it gets recorded that this account sender paid for this post. And then the idea is that there should be third party service for example run by post outer or third party where you can trust the secret for this. And then the viewers that paid for the post can request encoded secret to its public address, Ethereum address. So it gets a secret encoded and then you can use this secret to read the article.
00:36:18.530 - 00:37:04.340, Speaker A: So we're still working on this part. Okay, if you have any questions. It's really cool. One thought is, yeah, I think having a demo where you can see different users or something, where you pre populate users with a bunch of posts or whatever and you can see a user kind of viewing and engaging with a space is kind of richer I think will help the whole thing feel a lot more real. And yeah, seeing it from the perspective of two users, that'll be really cool. But overall this is awesome. It's great to have a full social network experience finally working.
00:37:04.340 - 00:37:34.458, Speaker A: Yeah. Cool, thanks. Yeah, really clear walkthrough of what you built and how you built it. What was the question I had? Oh, you reminded me that everybody should make sure to mention which tools they're using to integrate. I think you mentioned Textile basically, which sponsors. Yeah, exactly. So there's the specific things that you're using and also the sponsor prizes that you might be going for.
00:37:34.458 - 00:37:51.134, Speaker A: This is really useful for when people go to review the videos and check out your project. They'll be like, okay, cool, now I know what to look for when I'm reviewing this. So great job on that. Thanks. Yeah. Go ahead, Andrew. Nice.
00:37:51.134 - 00:38:27.100, Speaker A: I didn't know if you could see me. Sorry to everybody. I showed up a little late because I had another meeting around long, but really excited to see all these. I had a question for you. When we're judging these projects, I won't judge by this at all, but I'm always super curious in Hackathons if teams are thinking about kind of the longer term for these and what it could become. And I was curious because yours has this vision of payment models, the peer to peer payment models at least. I was wondering if your team had already been thinking at all about what kind of business could be built on this, or if there is room for that, or if you think it's just sort of like a gift to the world that you see how it goes.
00:38:27.100 - 00:39:14.986, Speaker A: Are you asking me? Okay, yeah. We have quite a vision for this. So, as I said, we have been working on social networking protocol on top of Substrate plus APFS. And I have been thinking for a couple of months already how to build this completely off chain to provide people that don't need so much security and consistency. So if you, for example, consider a clone of Instagram where under Photos you see a lot of smiles, smiley faces, and it's not big deal if there are 800 smiles or 650 smiles. Not big deal. So you can go with EPFS only in this case.
00:39:14.986 - 00:40:17.358, Speaker A: But if you need some sort of a payment or recurring subscription, paid subscription, or if you need talks around on chain governance, then you basically need to anchor these things on Blockchain to see consistent using Blockchain consensus. So the vision is that we would like to improve this hack and try to integrate them mix together with Blockchain plus APFS versus APFS only version. So we can say, like, for example, you're going to write a post and you ideally see a switch or Tumblr. Then you click either post on Blockchain or just on IPFS. So you can select your security level for this. And as a second part of it, you can also, for example, write to IPFS only. But once you want to receive a payment, you need to set up wallet for this so people know where to pay.
00:40:17.358 - 00:40:40.150, Speaker A: And once they paid, this thing also recorded on Blockchain. So this payment was for this post or for this comment. So this is the vision. Yes. So we would like to continue this. You cool. Thanks for presenting, Alex.
00:40:40.150 - 00:41:13.730, Speaker A: All right, next up is wrapped filecoin. I think I saw you guys here. Yeah, that's it right now. Hello guys. So we act on wrapped filecoin with Christian DA Silva. We thought that it would be a great addition in the defined space, especially not just like on Uniswap, but also as a collateral and MakerDAO. So would be great.
00:41:13.730 - 00:42:46.934, Speaker A: So for the first iteration, we opted for a custodial approach. So we deployed on Covan, an ESC 20 Token, and on the back end we use Textile Powergate for the custodial wallet and also, to facilitate the interaction, we added a wallet to create new filecoin wallet to wrap and wrap filecoin through the user interface that's been deployed of Flick. So I will now Christian will show you a quick demo. Christian, can you unmute? Sorry, I just started. Okay, now, our UI is like very tied to our backend approach. We have just to do a little more research on how we can read all the transactions to see when a user that wants to grab his or her file coins have already transferred that to our custodian wallet. So we can mint the ERC, 20 token on Ethereum.
00:42:46.934 - 00:44:03.726, Speaker A: Right, so at the beginning we have this screen where you can send whatever amount of icon that you want to wrap the Ethereum address where you want to receive your rapid file coins. And here we just have to include our file coin address so we can check the transaction. When you send this, we just ask you to send a transaction of this twelve file coin, for example, to our custodian address so we can check it for the ungrrap function. It's the same but the reverse path. Of course, there we just ask for your filecoin address to receive your Filcon once we burn the graphic Falcons. And then we did this little demo about a wallet where you can create through powergate, a quick address to receive and get your balance right, so you can get the balance of your account. And you also can send this is a very beginning approach of including a token here and everything that is maybe not so recommended.
00:44:03.726 - 00:45:07.720, Speaker A: But with this approach, you can actually send file coins to any wallet that you want once you have your token from your Power gate instance. Okay, so we continue doing research on the back end because currently we don't have a real clear way to read all the transactions in the filecoin blockchain. So we can actually intercept that transaction from a user and mint the Graphic Falcon tokens. Yeah, we were discussing about that. Like if we could just check the balance and then wrap and unwrap. But we currently with Textile, we can see the transaction. So we will play a bit with Lotus to see if we can have this working by next week.
00:45:07.720 - 00:45:41.620, Speaker A: Yeah, I think you should be able to. So I think with Powergate that's just wrapping Lotus, so you should be able to get the Lotus RPC endpoint as well. And so you can go through the Lotus API and see what's useful there. You might find a bunch of methods that might be good. Definitely ask questions on Slack if you kind of are having trouble because a whole bunch of folks can help you find exactly the right way to get the transactions. Yeah, sure. Thanks, will do.
00:45:41.620 - 00:46:08.326, Speaker A: Yeah, demo looks really cool and the app looks good. Thank you. Tank, just a question. So who controls the mint funk? The ERC minting on the ethereum chain. Great question. Yeah, so I took care of the smart contract. Just act on open zeppelin.
00:46:08.326 - 00:47:10.782, Speaker A: Preset. So with the preset, like with the Open Zeppelin 3.13.0 you have the possibility to leverage on access control like a new way of managing access. So the Minterm in the contract you can add and remove a Minter. So for the demo we just add like a Minter that is on the back end. So once we receive the transaction, the file coin on the custodian wallet we can Mint and then to unwrap the user can burn and then we will send him the file coin. How manual is the Mint process? So you get something deposited on filecoin and then how do you read it? How's this information being transferred? Is it just you guys reading some logs and then you go and do your Mint? Exactly.
00:47:10.782 - 00:48:05.600, Speaker A: Once we are able to read the transaction incoming from our custodian wallet. From your wallet. When you want to grab through web3s we call the Mint function on our smart contract with a given role that our address is capable of. I guess the question from Trent was are you doing that manually or is that happening automatically? Like when the transaction comes in, the code reads it and then issues the Mint automatically? Yes, it's automatically also the reverse path. Also we are listening for the event in the smart contract so we are sure that the token has been born and we can return the file coins. I added like a function unwrap that can read the filecoin address and can emit an event to facilitate that. Thanks.
00:48:05.600 - 00:49:00.510, Speaker A: Awesome guys. To Andrew's question. Are you thinking of making this a bigger thing? Are you thinking of setting up a proper custodial service for a lot of Filecoin? Or the original idea was like, a non custodial approach by leveraging Filecoin smart contract, but that's, like, definitely after the agono, we want to develop further towards that direction to have, like, a non custodial, fully decentralized depth, where you can lock Filecoin in a contract and then you can automatically get from it. So like something like that would be great. The goal is to get wrapped filecoin as a collateral megadao. I think that would be the best. Yeah, I think that's awesome.
00:49:00.510 - 00:50:09.246, Speaker A: And you should feel totally fine doing a custodial approach. Until user driven contracts. We were also playing with payment channels, but since they are like peer to peer, we don't have a way to actually returning falcons to anyone that wants to burn Rapid Falcon. That's another line of investigation. Yeah, go ahead. I was going to say if you have a very specific and precise contract for what's missing from FalcoIn, what would be the contract written in Falcon that would allow the non custodial approach? Definitely consider that like a thing that my impression is that a contract like that is likely small enough that it could make its way into the Falcon Core before a full VM, like a full EVM implementation would that would be great. I was just going to say, how do you handle what's your price, Oracle, for when somebody actually deposits it? Or is it a one to one to one? One to one, like a stable coin.
00:50:09.246 - 00:50:39.466, Speaker A: Right. So the value needs to be the same. So the token you locked are the token like the wrapped file coin Ethereum. So once you unwrap, you burn and then when you wrap you mint. Yeah, that was a silly question on my part. No, because it's a good question because at the beginning we were like discussing about it. But yeah, it's a stable coin.
00:50:39.466 - 00:51:08.646, Speaker A: Yes. And actually there are other services that charge you like 1% or up to 5% just to grab something. Yeah, definitely. There's all these long term thoughts playing out in my head. So if you guys do try and pursue this bigger, I could definitely see for WBTC, it's custodial. So you really have to build up your trust and your brand. Like they have BitGo, which is a really old custodian.
00:51:08.646 - 00:51:31.220, Speaker A: And I think Coinless is involved. So it's like these big names. So definitely this would be a very big branding project and I don't know, it's very interesting just to imagine what this could be because I could see there being demand for it. Yeah, we hope to develop it further and to reach a non custodial approach. That would be great. Cool, thank you. Thanks guys.
00:51:31.220 - 00:51:36.370, Speaker A: Thanks. Next up is Padlock.
00:51:38.150 - 00:52:24.900, Speaker C: Cool. I'm going to share my screen. Okay, cool. Yeah. So we're Padlock, we're making we're making Web Three decentralized content monetization tool for contact creators, content creators with Interoperability, with Ethereum. So we're coming at this from a lot of different angles. Not quite sure yet which one to position ourselves at, but some of them of the angles are about like digital rights management tool to prevent copying of content.
00:52:24.900 - 00:53:40.970, Speaker C: This could be an access control solution built on secret network. It could be definitely a key management tool because basically this can be seen as like a new approach to using smart contract capabilities for key management and of course monetize with the end goal of actually monetizing content on Web Three. Basically what's our problem is that we can see that there's no way or little ways to monetize content in a trustless way in Web Three. So for instance, if I've got content and the only way I can monetize it is by encrypting it and saying that I promise if you give me ten die, I'll share the key with you so that you can have access. There's not a foolproof way to do this yet. If we go off chain, there's a trust element, how do you make sure that it gets shared? So basically this is an access control problem and it's often addressed by proxy re encryption. So our opportunity is that Padlock with the Secret Network can be a trustless content monetization tool on Web Three using IPFS and Ethereum and the Secret Network.
00:53:40.970 - 00:54:41.114, Speaker C: The privacy preserving features of the secret Network is a key part of this, especially in a role to be playing hosting content on a decentralized web for the people who it's for. We know we want to sort of replicate Web 2.0 versions of content platforms because that's what users have found to be familiar and have come to value in their lives both creators and end users or buyers. And of course, the aspect of privacy is a value point for both creators and users who seek to host content as well as buy access. Well for those end users who like to buy their content online. We do realize that this idea, this tool, can be for content creators and people who want to buy encrypted content for exclusive rights. Especially if they're ones who believe that all content should be encrypted.
00:54:41.114 - 00:56:09.510, Speaker C: And they're against most mainstream platforms already, and they're willing to pay for content that's relevant. But also the creators, they want to be able to release content quite regularly still, but they don't necessarily like censorship, but they're willing to experiment with new things because they want their audience to find their content and securely too, especially when it comes to monetization. So even though we have these two people, we do know that this tool is going to be leaning more towards content creators because of the use case we've already seen and possible integrations into already the platform audience that kind of has the whole setup, just not this monetization aspect. How it works is that creators can encrypt anything and sell the private keys which unlock that exclusive content. The idea is to use secret keys on the secret network which are stored in a privacy preserving secret contract on the network. And so for our idea so far we're using Secret Network for key generation and the secret contract with the idea of inherent encryption that James can go into a little bit. Just now we're using IPFS and Filecoin for storage, using Textile Powergate for deal making, the Graph for indexing caching, Ethereum data and Data translation Fleek for hosting.
00:56:09.510 - 00:57:14.618, Speaker C: We're actually very excited to be using three box to manage profiles, and we're actually sort of going to be storing some of the secret keys and credentials in there with this idea of mutual key sharing MetaMask for the normal wallet ethereum use and for creating the NFT for accessing the token and then Pinata for pinning the IPFS creations. I e the content pieces that get so what I did want to demo today, I mean, this is a very small part of what we actually have been building so far. It's just that we've been building a lot of things but we still need to put all the pieces together. But basically what I wanted to show today is about the fact that we've built a way that keys can be automatically generated on the secret network. So this is the little demo that I made. It has no audio, don't worry about that. So I did get a little bit confused in the beginning.
00:57:14.618 - 00:57:32.850, Speaker C: So let me just skip a little bit. But basically so James, if you're on, you can maybe just describe the secret network and the secret keys generation.
00:57:34.250 - 00:58:26.550, Speaker A: Sure. Secret network is a Cosmos SDK based blockchain that enables programmable privacy, which means encrypted inputs, outputs and state for smart contracts. And we achieved this by running a virtual machine named CosmWasm, which is like a multi chain smart contracting platform for the Cosmos ecosystem. We run that inside secure enclaves within our network of validators. The nodes are equipped with those trusted execution environments which give the encryption capabilities. But the crux of it is you're able to store those keys in a secret contract and enable this trustless monetization.
00:58:29.370 - 00:59:42.590, Speaker C: Yeah, everyone who comes onto the platform gets an anonymous name and a secret key generated. And then so from there you can go into Discover and you can go into Create and you can upload your content. The point of this app is to abstract a lot of things away because it needs to be used by people who are not necessarily very clued up on all the hectic technical stuff that goes on in the background with blockchain and keys and all that kind of stuff. So this kind of leads me into the kind of UX and UI that we've got. And this is sort of what we're looking on feedback for because we also want to know if we should position this as a tool or as a platform. And then also if you just want to have a look quickly at what that scene that I just showed you is going to look like, you're going to sign and get your secret address. And then you can either go as anonymous or you can edit your profile.
00:59:42.590 - 01:00:43.026, Speaker C: You can put in your name and even some information about you, some picture as well. And then from there you can go to filling in well, you're drag and dropping your content in, putting some Identifiers in, setting the price, currency and all that kind of stuff, especially Categories, which is used for filtering. You can review it before you padlock it. This is the amazing magic button that's going to be made. And then the browse part, this is sort of like the part which is sort of like a platform, but this is also to give the idea that this tool can be integrated into a platform already. So if the platform already has got some sort of browse and discover feature, this buy button is going to trigger the padlock app. And yes, it would.
01:00:43.026 - 01:00:56.520, Speaker C: And yeah, that's it for our demo. We haven't got our technical developers on the call, but any questions we can definitely try and answer. And feedback would be great to get.
01:01:00.650 - 01:01:36.318, Speaker A: This is great. This is really cool. I think that there's a ton of utility for this and there's a lot of demand for it. I think a lot of people are looking for solutions like this and not yet. People have been talking a lot about your knowledge, contingent payments and stuff like that for a long time, but nobody has really made a full application for it that actually has a good marketplace and whatnot I think yeah, it's really cool to see all of the pieces working. Thanks. I think we're definitely focused on usability, and the interoperability is another point of emphasis.
01:01:36.318 - 01:02:21.282, Speaker A: We wanted to get specific feedback on whether you think a platform is necessary or if this can just be like a building block other media publishers can use. Yeah, I mean, it's a great question. I think it really depends on I think a lot of those directions will require different amounts of work and different amounts of product and kind of distribution angles. You'll probably have to do some thinking around what other things exist in the market and in the space, and how you see those things themselves evolving and how to position this relative to those things. So, for example, there's a lot of marketplaces emerging for fully public things. Like, there's a lot of NFT marketplaces emerging. Right.
01:02:21.282 - 01:03:05.294, Speaker A: But all of those are public. You could imagine that if people wanted to sell private NFTs, they could do it. If you had a widget where Padlock could be added to those marketplaces easily, and then all they have to do is kind of integrate Padlock and now their entire marketplace could sell these private goods, potentially. That's totally a different direction to go, is like no, you build your own marketplace and you build your own platform. If you want to distribute and sell property good, you would then have to go this way. It'll definitely be harder because you have to now compete with the marketplaces themselves and so on. But you would have a larger market opportunity.
01:03:05.294 - 01:03:52.698, Speaker A: It really depends on how much you're trying to take on, basically. Yeah, I think not to take too much time into whenever, but I think we've got this idea of receipts in the form of NFTs and that could be replaced with actual content based NFTs. So when you buy it, you have exclusive access to some other content and there's examples of that, but there's a lot of nuance to this. And I'm certainly not the best to delve into the technical details, but we really appreciate this opportunity to get your feedback. Yeah, I think the whole flow is really good. I think just you present the problem really well. You describe the technical issues and the technical problems and kind of why something hasn't.
01:03:52.698 - 01:04:37.754, Speaker A: There's a lot of hard problems there and you end up with a pretty smooth necux, I think probably less for a demo, less for the hackathon but more from a product perspective. Long term, I think people will have questions around Tes and so on because SGX got wrecked over the last few years and so on. So people will have questions around that. But I do think that there's a lot of applications and application domains where that's totally the right solution, provided the validators and so on stake some amount of trust, where, yes, if they get their stuff broken into, then there's some way of slashing them or something. Yeah, that's good advice. There's definitely trade offs. Yeah.
01:04:37.754 - 01:05:16.438, Speaker A: My impression, if you get a Pragmatic good UX that the content creators like, that's it because, think about it. Right now, people are doing things like substac, where it's just like a private thing, and anybody could forward that email that you get, right? And everyone could give the content to somebody else or call Face or whatever, and it's working entirely of the honor system. But that's okay, because there's a special relationship between the content creator and the reader. And that's fine. And so here it's just kind of like taking it one step further, closer into security, but not kind of like all the way, actually. Probably a few steps closer. But even if it's not fully all the way, it doesn't matter.
01:05:16.438 - 01:05:45.460, Speaker A: There will be a lot of utility there and it all comes down to UX, I think, and finding the right product niche first and then kind of grow. Like Substac is starting with these email newsletters, but I could imagine Substac as a platform broadening. Yeah, well, Pragmatic is the magic word. Got to focus on that. Actual adoption and usability. But yeah, we'll keep working on it for sure.
01:05:46.710 - 01:05:51.570, Speaker C: Yes. And all the pieces will come together next week. But yeah, we have it all built out separately.
01:05:52.950 - 01:06:40.610, Speaker A: That's awesome. Speaking of next week, so the plan was to have at least one more of these sessions. So if you weren't ready for this demo session, definitely keep an eye out, schedule channel, and we'll hopefully have it scheduled before the weekly email. So there will be more time to get feedback on your demo, get feedback on your video, and as always, anybody can message me, send me a link to your demo video, ask me for feedback, and anybody on the ETH Global team, they'll be able to funnel it to anybody who can help you. All right, so we've got about 22 minutes left of the session, of the scheduled time. So we're going to keep moving. But just before that, we're going to continue with the tradition before I lose more people.
01:06:40.610 - 01:07:01.260, Speaker A: They have to drop off the end of week four. So just throw up a four, we'll take a screenshot and that'll be our group photo. So throw on your video. Let's see your faces. Beautiful hacker faces. Hit me with a smile. Let's see if we can get a full screen.
01:07:01.260 - 01:07:24.210, Speaker A: A couple more. Let's see if we can get them. Hold the pose. Awesome. Thank you. That's it. Cool.
01:07:24.210 - 01:07:57.880, Speaker A: Next up is Mobility Marketplace, if you're here. Yeah, perfect. How's it going, Carlos? If you want to share. Sweet. So, yeah, everyone, we're building Mobility Marketplace. So the idea is really simple. We're creating a decentralized platform that connects data creators with data consumers.
01:07:57.880 - 01:08:44.932, Speaker A: And in our particular case, the data creators are micromobility users. So these are people that rent an Ebike E scooter moped through an app. And the data consumers would be people interested in these data sets, data scientists, city planners, ad agencies. So the reason why we're building that is because we want people to be credited for the data they create. So it's one of the common themes in web. Three pay users for their data and it draws some inspiration from apps like Brave Browser. So if you guys use it, you can get paid for the ads that you are served and protocols like Ocean Protocol.
01:08:44.932 - 01:09:17.792, Speaker A: So that's like a really big one on Ethereum, they aim to be like a big decentralized marketplace for any kind of data you want. But we're going a little bit more niche. So the tech we're using, IPFS, Ethereum, fleek, hosting, storage, textile Threaddb, lib, P to P, MetaMask and Infira. So the first thing I'm going to show here, I'm going to show my screen real quick. Boom. Cool. So the first thing I want to show is what it looks like from the user perspective.
01:09:17.792 - 01:09:54.956, Speaker A: So just imagine full blown app, you can rent a scooter and you can basically just push data to threaddb instance. So what we're going to do here is we're going to show the process where the user would create a profile. And the idea is that this profile is stored in the local DB via thread DB and is only shared when they opt into data sharing. So once they opt into data sharing, into data sharing, they're in the ecosystem. So they're pushing their private profile along with the trip data that they push. So we're demoing right now a user going through a trip. So just imagine them going through these GPS coordinates.
01:09:54.956 - 01:10:27.624, Speaker A: And the idea is that once they complete the trip, the trip data is pushed to the data set that's available for purchase via this marketplace, and their profile is also pushed alongside it. So in regular data set, it would have Ethereum addresses. So totally anonymous. No one knows who participated in the trip. But if you're a data sharer, you also provide your data profile. And this could be whatever we want it to be. So that was from the mobile side, from the Web app side.
01:10:27.624 - 01:10:57.830, Speaker A: We have here the marketplace. So the first thing you see is a collection of data sets. So these are the data sets. You can think of these as like the completed trips from any micromobility source, right? So here we have data sets from Milan, and we're just rendering some. Metadata. This is pulling from fleek storage and Santa Barbara, for example. So just picture once we have a ton of data, this would be any kind of data set, but from any city, any month, any region, whatever you want.
01:10:57.830 - 01:11:32.392, Speaker A: So two actions advertisers and data consumers can take on this app is one, purchasing data sets. We don't have that functionality yet, but it's coming. But the other big one is to create an advertisement campaign. So the idea is that if you create a campaign, any users that are participating in the program are shown an ad post trip and they're also compensated for seeing the ad. Kind of the way Brave browser works. So what's happening here is we're going to create a quick advertisement campaign. So this is going to push to Ethereum.
01:11:32.392 - 01:12:07.592, Speaker A: I'm going to call it Nike. The category is let's say Fashion. And that's only to show relevant ads to users. So if the user created a profile with category whatever they want, they're only showed those relevant ads. So we're going to call it Boots Eleven because I've created a ton of boots boot ads and let's say one E, right? So what's happening here is the protocol is notifying us that we can reach 20 users with one Ethereum. And because this is just testnet whatever, we have zero active users. So there's zero users that are actually participating in the program.
01:12:07.592 - 01:12:46.436, Speaker A: So I can go ahead and pay one ETH, but no one's actually going to see my ad. I'm going to upload the asset and this really just uploads to IPFS, takes the IPFS hash and includes it in the Ethereum record. And a little notice mentioned here that any unspent ETH in the campaign will be refunded. So like if after 15 days my ad didn't deliver the results that I wanted, I can close the campaign and get refunded any Ethereum that wasn't spent towards the users that actually saw the ads. So here I'm going to hit create. If all goes well, this model will hide. And of course it didn't because demos live demo.
01:12:46.436 - 01:13:25.190, Speaker A: Oh, boom. It's good. Sweet. All right, so what happened was created, the record was created on Ethereum. IPFS has the data and the hash is available. So the next time, let's say, for example, if we're going through this visual, the user starts the trip, goes through the trip and then they finish it. Now if assuming they enabled the campaigns, enabled the data sharing feature, they're going to be shown an ad and it's going to first pull the data from Ethereum and then it's going to read the asset data from IPFS and then we're also going to log the fact that it was rendered to us.
01:13:25.190 - 01:14:13.600, Speaker A: Right now we're doing it through fleet buckets, but ideally we want to have an encryption layer. So anyways, advertiser can then go to this view and just see the details on his active campaign. His or her active campaign. So we have the details on it being the organization, the title when that expires, so it's 15 days from now and the total budget contributed, which is one ethereum. So the idea is as users are rendered the ads, they log to fleek via fleek, the impressions. And any unspin ethereum here is basically just a result of users that have withdrawn their rewards for this particular epic. And the epic is really can be it's arbitrary, right? It can be.
01:14:13.600 - 01:15:01.616, Speaker A: After ten campaigns you can withdraw your rewards, after ten days you can withdraw your rewards, something like that. And the functionality here to close the campaign is there, but ideally at that point, we remove the campaign from the active layer and users would no longer see that ad. So one thing we don't have here is the encryption layer. And obviously we kind of need that, right? So like the data sets, for example, if I, as a data consumer, want to purchase one of these, ideally that data is encrypted and it's not available to me until I've purchased it. So that component we haven't developed yet, but it's in the pipeline. So that's it for the live demo. If you guys have any questions, if the guys want to chime in at all, go for it.
01:15:01.616 - 01:16:17.512, Speaker A: But basically it yeah, I guess I would just add that this is definitely a project that we're looking to carry on, too. Like after the hackathon, is there anything that you do feel like we should add? Is something that we're actually going to be working on? Looks awesome. The UX is, I think, really good. Who handles the data inputs? What part handles? Like, I guess kind of what makes the marketplace tick in terms of how it's getting the data. We're pushing the threaddb from the mobile app, so when a user is created and then we're also interacting with the marketplace smart contract to let them know that this user has opted in, like for demo purposes especially too, we're setting that to true, everyone's going to be opted in. And then as well as ending the trip, we're also going to be logging that to threaddb and interacting with the marketplace smart contract to let them know that we'd like to receive an ad. So if you guys want to give any feedback on this part, we actually do kind of need help.
01:16:17.512 - 01:17:24.864, Speaker A: So if the data is private, right, obviously the data, we want the user to keep it locally, but there is data that we're going to publish no matter what. And that's like the trip data. So where the vehicle went, what places it passed, et cetera, metadata on the actual trip, that can be public or it can be on our bucket, the protocols bucket, you could say, but then there's profile data that's going to be local. But when it comes to moving data from threaddb to a protocol owned bucket, what would you suggest we use? So I mean, I would just I think Carson's on the call, so maybe he has some thoughts here too. But I would just subscribe to threaddb with some service type implementation that subscribes to that thread and pulls it into whatever target bucket. These things are meant to be kind of chained together into whatever structure of network you want. And so, for example, the Go threads implementation is pretty perfect for this.
01:17:24.864 - 01:18:17.824, Speaker A: If it was subscribing to the same thread, you could just take those end ride type entries in a thread DB and use that as a signal to then push something to a bucket someplace else. That sort of chaining should work pretty well. Got you. Okay, that's good to know. And I think what you could do is just have when you're describing kind of this protocol bucket you can think of assigning, you can still have the bucket be private and encrypted to the users of the application. So anyone who's using the application and so on will be able to decrypt that data. So it's not probably private, but at least you're kind of hiding all the GPS points and so on from just being moved around totally publicly, where maybe you are thinking through maybe it's only a subset of parties that need access to that trip data.
01:18:17.824 - 01:18:49.728, Speaker A: Right? So maybe it's like the people that are buying this whole trip and then the people that are doing it, you should be able to kind of only share the information between those parties and not with the entire world. Got you. Okay, cool. Thanks for the VDEC. In the interest of time, should we move on to the next one? You're ready? Very cool. Yeah, no, it's looking great. Sweet.
01:18:49.728 - 01:19:15.356, Speaker A: Thanks, guys. All right, next up is Parcel, our friends, who I think they're awake early for this. You're muted. Yeah. So hi everyone. I'm Tarun. We are team parcel.
01:19:15.356 - 01:19:54.000, Speaker A: So, yeah, today we want to show what we have built for now. So, yeah, I think Brent is on the call as well. Can you share the screen, Brent? Yeah. So basically we are building this decentralized crypto payroll, so in which any employer can just create an organization in which you can add the employees. And basically we are building this payment streaming and mass payout thing. And then the data part is stored on IPFS, and the data hashes should be connected with the smart contract. So let's try creating a new organization.
01:19:54.000 - 01:20:34.444, Speaker A: Let's go for so this is basically ENS. What is ENS? You might need to explain that to people. Yeah. So basically this is like an Ethereum name service, so it'll tie to your Ethereum addresses. So for resolving, let's say you want to send some ETH to this address or any token to this address. You just don't need to remember the whole address. You just can type this in the MetaMask or any resolver, and you'll get the Ethereum address.
01:20:34.444 - 01:21:21.444, Speaker A: With this ensna, we have signed up for the organization. Now we can see we have created a smart contract wallet for the organization and we can see for now we are just funding this account with five die so that we can showcase. Can you go back on the chrome? Yeah. So yes, for now I think we are just funding it with the five die initially so that it won't be a hassle to run the mass payroll. For now, just keep it, stay here, share for a while. Yeah. And then you can see this current stream.
01:21:21.444 - 01:22:04.088, Speaker A: So for now the data is dummy for now for the streaming part because we are in the process of implementing that. But you can see if somebody has run the stream, they can clearly see how much stream is totally being sent and how much is withdrawn and how much is being pending. And you can see the individuals also here and there is a little section there. All, can you press that button? All drop down in the right. Yeah, that all. So you have different teams here. So let's say you have like four or five departments in your company.
01:22:04.088 - 01:22:32.000, Speaker A: You can easily switch this team for that. Right now it's dummy. Can you scroll a bit? Yeah. So we have this recent activity. So let's say you have paid to some contractor. This activity will be stored on APFS and it can be seen here and you have the upcoming payroll section. So for now, I'll just give a walkthrough for the dashboard and after that we'll do some stuff on the dashboard.
01:22:32.000 - 01:23:05.772, Speaker A: For the demo thing. We have already created our organization. We have stored some employees and departments already. So maybe you can go to this people section. Yeah, for now we have created like five employees and then it's like a contact thing. So whenever you want to add any new employee in your organization, you just go to add employee. Can you go to add employee? Yeah.
01:23:05.772 - 01:23:47.492, Speaker A: So here you can see, you can type the name, address, department and salary and currency. And maybe you have some contractor for three months. You can just start the joining and ending date and you can submit it. You'll have the data and the IPFS stored in an encrypted form with your ethereum private keys. And that hash has been mapped to the smart contract. So let's try to run the mass payout thing. So we have the payroll section here and in which we have already created like five employees.
01:23:47.492 - 01:24:32.388, Speaker A: So what we are doing is we are doing transaction batching here so that we can save lot of cash and any employer can just send money in just one transaction to save lot of cash. So just try to for now, we just gave the salary to one, which is not realistically, but we are using uniswap under the hood. So we don't have enough liquidity in that. I think we testnet. So for now it's like one die or one USD. So you can clearly see like we have die in our account and the employees can have different currencies, right? So maybe some of your employer wants USDC and someone wants Dai. So it all happen in single transaction.
01:24:32.388 - 01:25:10.224, Speaker A: So maybe Ben, you can just yeah, keep the fastest fee. Thanks. So, yeah, it's on rinkbit. It'll take some time. Still much faster than a wire. Yeah. If you're waiting, can you actually tell people what streams in this case mean for an Ethereum application? So basically, like Violet is confirming.
01:25:10.224 - 01:25:54.400, Speaker A: So we have also this button streaming. So let's say at the same time, you don't want to run the payroll, you just want to stream the money. So let's say you want to stream, let's say one die for each individual for the whole month. So it'll calculate the amount of die in 1 second. So we just start the stream for the employee and anytime the employee can receive till your stream is on. So, yeah, we are working on the UI part, but under the hood it is working like this. So I think the transaction is confirmed and you can see like in single transaction, we have just transferred like one one die to each addresses.
01:25:54.400 - 01:26:57.700, Speaker A: Let's go back to the demo. And we have this accounting section. I think it's not ready yet, but I can explain what does it mean? So basically, a lot of companies we are talking to really want that CSV export thing so that they can showcase to their account managers which can help them in taxation, right? So we are building this out so that we are also talking with many companies also which can help us with the accounting stuff. So it'll be easy for them to showcase that to account. So our goal is to build an encrypted service so that we as a company cannot really see anything and the data should be available every time. So we shouldn't be in a single point of failure. And if let's say, government wants to see your taxes and say where is your money going on, you can just showcase because the data is being decrypted locally.
01:26:57.700 - 01:27:51.660, Speaker A: So you can go to the document section. Yeah. So here we have this document section in which you can really your confidential data or maybe some important stuff for your organization. You don't want to share it with any company and you can store it on IPFS in an encrypted form. And till the time you have access for your Ethereum private key, you can just get this data from IPFS. So basically just submit it and you can show the logs also. So basically why it is doing a transaction, basically when you encrypt the data using Ethereum private key, it will send it to IPFS and after calculating the IPFS hash, it is submitting the transaction to Ethereum smart contract.
01:27:51.660 - 01:28:33.404, Speaker A: So that when you want to fetch the data, it can just know the index that this index belong to document section. And after that you can get the data from IPFS. And then one more thing we are doing here is one more thing we are doing here is basically IPFS. Every single thing should be decentralized. So smart contract should directly communicate with the IPFS thing. So anytime you want to interact with the stuff, you're not dependent on us, right? So, yeah, this document is being retrieved. That's pretty much it.
01:28:33.404 - 01:29:20.060, Speaker A: And one more thing is rather than saving multiple document hashes on the smart contract, we're just keeping the master hash. And that master hash is tied up to various hashes. So that we just need to do only one transaction in Ethereum. A lot of stuff has been pending now, like streaming part is left. I think the meta transaction is left because we don't want our users to pay for these small actions and we can bear that fee, like adding a document or maybe some small task. So, yeah, we need to integrate metatransactions and streaming part. I think that's it.
01:29:20.060 - 01:30:10.764, Speaker A: Yeah, I would like to add on that and I think considering how high the gas fees are currently on Ethereum and how much longer does it take to confirm the transaction. So we're exploring layer two solutions right now. So I think with our product, I think layer two makes a lot of sense because essentially what we're doing is value transfers among people and I think layer two fits in nicely for us. So we're kind of exploring that venue also. And also just to add here that at this point of time, we're just storing the documents, but we are looking to expand our horizon into HR management software services. So that could include like maintaining health records, maintaining W Nine S or something like that for the organization. So we're also looking to broaden our horizon right now.
01:30:10.764 - 01:30:53.656, Speaker A: Yeah, awesome. Guys, this looks really great. Just to mention, for anybody who's watching on the call and is being blown away, like I am. The Parcel team did work on this before, so they're continuing it as a continuation of a previous hackathon project, which is totally fine, but don't feel intimidated if you're looking at this and you're blown away by, how did they get this so far in the time? And mine looks like this. Don't worry about that. People started at different levels. I'm sure they're going to mention it in their submission that some of this was preexisting work, which is totally fine.
01:30:53.656 - 01:31:14.350, Speaker A: Just make sure to call that out in the video and your hack submission. But you guys, it's looking so awesome since when? I last saw it at the end of hack money. So I'm glad you've continued working on it. Big thumbs up from me. Yeah, this is awesome. This is really cool. And just so you know, I wanted this for a long time.
01:31:14.350 - 01:31:41.928, Speaker A: I explored this a long time ago. Like trying to find anybody who would do Bitcoin or Ethereum payments. This is even before Ethereum was live. There was like, I think one or two companies trying to do it. But it's really awesome to see it fully integrated with all the different tokens and being able to have all the files as well and so on. I think this is great. Thank you.
01:31:41.928 - 01:32:24.312, Speaker A: Yeah, I guess one question is when can we start using it? Yeah, we are also a part of Getcoin kernel, so anyhow we need to release something around, I think in next two months. So maybe we need to audit the contracts also. So maybe in next two, three months it'll be live. Yeah. This is super cool. One of my favorite parts of streaming is and maybe this is worth I'm sensitive to over explaining something in your pitch, but this is something that is worth. I think diving into is streaming gives people access to a real time balance of their work.
01:32:24.312 - 01:33:02.230, Speaker A: So if I'm paid $1,000 a month for some task, I can withdraw at any point during the month, my just payment, which is amazing. So you don't have to worry. So for a lot of people that work in precarious labor, they can access this immediately. They don't have to worry about going and getting payday loans. I think this is an amazing product. Streaming is like the next level of, I think where payments should go. You shouldn't have to submit an invoice and then wait the industry standard of 60 to 90 days.
01:33:02.230 - 01:33:28.268, Speaker A: Yeah, cool. Maybe touch on that in your demo. Yeah, for sure. Right now streaming is not there. So we thought to explain other things. But yeah, for sure the demo streaming will be a main part because in hack money anubhav only just built this mass payout thing. Other than that, everything is built from scratch here.
01:33:28.268 - 01:34:17.260, Speaker A: So the main thing like connecting it to IPFS and filecoin and all that stuff is from the scratch. Yeah, it's just really cool. So it's only IPFS files. Do you see a need for filecoin integration in the future or will people keep their own files around, do you think? Filecoin integration like I'm thinking from day one. So basically what we really think is Filecon is really great for the cold storage stuff. So you have data availability always on IPFS and we are running our power gate node under the hood and so that we can make it available if there is no persistence of data in IPFS. So we are just thinking to use Filecoin for that particular purpose.
01:34:17.260 - 01:34:43.590, Speaker A: Yeah. Would it just be another stream to miners or something? Yeah, that is something like more cooler thing. Yeah, it's a whole bunch of interesting use cases of the streaming idea with other kinds of data retrability and so on. But yeah, this payroll stuff is really cool. All right, let's keep it moving. Thanks Parcel. That was amazing.
01:34:43.590 - 01:35:10.030, Speaker A: Yeah, great. Next up is the IPFS FPS. Hey, guys, can you hear me? Yeah. Cool. I have a video, so I'll show you my screen. Share computer sound. All right, can you guys see it? All right, there we go.
01:35:10.030 - 01:36:00.810, Speaker A: I don't think we can hear it. We can't hear it. No, we can't hear it, so you might need to share computer sound. All right, how about let me do it one more time? Maybe this what? What if I told you there is an app? Sorry, this is like the first time I'm doing this. That's all good. I'm sure that the joke is going to be so worth it, so don't worry. All right, did you guys hear it the first time? Because I had headphones on your phone's on.
01:36:00.810 - 01:36:36.164, Speaker A: Why don't you try it again? If that doesn't work, somebody else could play it for you. We were able to hear it the second time. Second time. Okay, cool. All right. How about now? Yeah, no. All right, I'm just going to take this off and then how about now? What if I told you there is an app? The assistant wait for the boss to pitch? What if I told you there is a PowerPoint on the market? Just kidding.
01:36:36.164 - 01:36:57.900, Speaker A: We have a product called IPFS FPS, which stands for Interplanetary File System. First person shooter. The unofficial, decentralized game that can be played on Earth and or Mars. We're working on it. Background story. We wanted a game on IPFS. Not just any game.
01:36:57.900 - 01:37:28.952, Speaker A: We wanted a game with 3D graphics, cross platform compatibility, and a physics engine. DApps nowadays are quite simple. They have an input box, a button, and maybe a smart contract. We did more research and found Unity. So the question now is, is it possible to have Unity in IPFS? We searched online for examples and or documentation, but we couldn't find any. So we spent the next two weeks in the hackathon to see if it's possible. Long story short, it worked.
01:37:28.952 - 01:37:50.720, Speaker A: And here's the demo. Here's a demo of our site. Just visit IPFS Fpsville. If you don't have a comb extension, then add in that sh. Here's the homepage if you want to start playing. If you want to go over here's, the high level. If you use the community, get those domains.
01:37:50.720 - 01:40:21.590, Speaker A: If you want to read the full documentation, then Team Is and Randy. We also made a game trailer for you guys. So check it out. You it. That was awesome. Best pitch video ever. So do you want to tell us a little bit more about the technical aspects or how you guys actually built? Yeah, sure.
01:40:21.590 - 01:40:48.130, Speaker A: Yeah. Quick story. If you go on the site, there's a button you can click on that has everything listed from A to Z. But in short, you create the game with Unity, export it out. There are certain configurations you have to set. Put it on GitHub, connect, fleek to it so it does the CI CD part and then have unstoppable domains. In this case, it's IPFS FPS Zillow connected to that and then pinata for long term storage, like meta tags and stuff.
01:40:48.130 - 01:41:23.690, Speaker A: It's all documented here. I'll send it to you guys. Yeah, definitely. For. I don't know how much of that you were planning to put in your demo video, but you might benefit from having two separate videos like your Fun Mimi Sunglasses video or use only a few parts of that and then have another one that's more focused on walking through the game mechanics talking about which sponsors you integrated or how you actually built it. But I think two would be good because we don't want to lose that meme content. Cool.
01:41:23.690 - 01:42:07.990, Speaker A: It's really cool. I did a playthrough the other day and I think it's pretty got it to be pretty fun. Have you considered doing multiplayer stuff or like I don't know if you've gotten that far. Yeah, so I'll be honest with you, I just learned this Unity like four weeks ago, so this is brand new to me. So after we demo this, we had a lot of feedback, one of them being multiplayer, other being having a high score, so there's tons of stuff we can build on top of it, like some sort of payment channel, stuff like that. So there's a lot of room for improvement. I think this project now, since everything's new for us, is kind of like the hello world of gaming for IPFS.
01:42:07.990 - 01:42:44.950, Speaker A: Yeah, I think that's a really cool idea and it can be pretty useful to a lot of other folks. Like, if you have this plus the code and the blog post that you're writing, I think that will be very useful to other folks. If you think of these other feature sets, like multiplayer, or you go from an FPS into some other kind of game, like, I don't know, like a tabletop or like a 2d sky scroller or something, all of those kinds of tutorials will be very useful. If you're exploring the space as you go, make tutorials, because that'll be super useful for a lot of other folks. Cool. Yeah. If there's enough support, then we'll probably extend this out and have more ideas.
01:42:44.950 - 01:43:15.680, Speaker A: Do people win real filecoin? What's that? The rewards in game is it just no, as of right now, it's just the token. There's no real file coin. That could be another feature as well. There's so many different ideas. Yeah. While you're waiting for filecoin smart contracts, you could use the wrapped file coin on Ethereum and do like, pool prizes, all sorts of stuff. That'd be amazing.
01:43:15.680 - 01:43:44.054, Speaker A: I think you guys have to collab. Yeah, that was cool. Anything else? Cool. Thanks, guys. It's really cool and really fun demo and great job making it like a fun game. It's actually not trivial to make an MPs, but it's actually enjoyable. Yeah, we wanted this project to be fun.
01:43:44.054 - 01:44:26.738, Speaker A: We had a lot of good times doing this. All right, last but not least, we've got Team Fractal, if you're still with us. Still here. Lucky last, share my screen. Try and make it quick. Okay, so Ethereum accounting tool that places a focus on providing insights into both Ethereum ERC 20 and D Five protocol transactions. The tool is really privacy focused, with no user data being stored.
01:44:26.738 - 01:45:19.560, Speaker A: All data is instead encrypted and stored within IPFS data that only the user themselves can then unlock. So Fractal solves the problem of understanding the flow of funds between your address and the tool does this by aggregating transactions of those addresses and transforming their basic on chain transactions into enriched insights. So users of the tool range from the average Ethereum user to node providers and further to large scale liquidity farms. So what we've built throughout the Sacrophone, this is just the main landing page. Currently, the actual app still in local development. There's two sides to the app. If you were to use the app previously, you can store your IPFS content hash and return to the Dashboard you previously saw, which provides all the insights into what's going on.
01:45:19.560 - 01:46:24.330, Speaker A: So, going through what we have, we're new to the app. Actually, I'll show the flow of the previous side first put in this message. So, yeah, as I describing before, you'd simply enter the hash and we just nicely render the content for you. But we are new to the app, so you can either type in individual addresses here and add more as you go, or since we're going through Quick, let's log in with MetaMask user address, roll through, select any DeFi protocols. Currently we have compound integrated. We're looking to finalize with three more by the end of the hackathon to really provide insights to what's actually happening there, whether it's interest earned or so that users can know just specific analytics on what's happening with the transactions. Moving forward, you select a date range so you don't have to choose an entire period.
01:46:24.330 - 01:47:41.780, Speaker A: You could choose a year for taxing purposes, or you could simply choose past month. We'll fetch those transactions, provide a clear cost of that with a set formula. Since this is rolling on, use MetaMask to confirm the transaction. Wait for ethereum. So, yeah, Smith's, what we are really focusing on, as well as the DeFi side because there's not much out there to show analytics into what the protocols are doing for you. Basically what's happening now, we're generating that dashboard with using BigQuery to pull through the entire data set and hopefully come to a Dashboard in soon time. Obviously in your video you would clip all this out.
01:47:41.780 - 01:48:14.058, Speaker A: Yeah, I think so. This is the first time I've really showed anyone basically just be focused on development. Definitely going to try to do one more of these sessions, but it was mainly the first field to get your guys advice on how you think we should show this. Video and any additional points there. So this is also quite basic at the moment. There's a lot of analytics coming in. They haven't been available for this video, but essentially there'll be more protocol analytics.
01:48:14.058 - 01:49:06.894, Speaker A: You'll get your Ethernet, both USD and ETH, and then you can see monthly breakdowns of your transactions with categories. Obviously a future implementation which we'd add graphs and statistics so you can see interest earned and stuff like that. But for now, this is the basic functionality showing by the end of the hackathon, there'll be a lot more essentially at the end. You could also download your CSV and take that to your accountants or further on. But yeah, this is the basic product at the moment. Let us know what you think. Critique and how else do you guys think we could further improve this video moving forward? Probably a bit more structured, but yeah, I think it's a really cool application and I think the UI UX is getting really good.
01:49:06.894 - 01:50:26.474, Speaker A: Yeah, I think in terms of the video and the demo, maybe reducing some of the wait times and so on can be useful, but yeah, I think really good UI. How about the app itself? Do you guys see? Does it interest you? Yeah, I think all this accounting stuff is highly needed for a ton of organizations that are starting to use crypto very directly, including paying people and whatnot will need all of this kind of accounting tooling and so on. So I think definitely useful. The market will be limited though, right? Like for a while, until a lot more organizations do it, but if you're okay with that, then I think a number of folks will end up using. Yeah, the reason being is trying not to just limit ourselves to the organizations since that pricing scaling scale goes from the general ethereum consumer all the way to the larger scale. Something that might be useful in that case then if you're kind of thinking about individuals heavily, then is I think a big part of why people do a lot of accounting is just all the taxes stuff, so figuring out what the right exports for all the different countries might be a valuable thing. Right.
01:50:26.474 - 01:51:01.042, Speaker A: Because there are some tools that do it for specific countries, but maybe they do it for one or two countries and that's it. Yeah. Awesome. Any other notes with the dates? I think it looks good. You said you're going to keep working on it for the next week or so, so I'm excited to see what you're able to include over the next few days. Awesome, thank you. Yes.
01:51:01.042 - 01:51:30.874, Speaker A: Good luck. I think that's all of the teams, we've been a bit over time, so thanks to Juan for sticking around and giving this feedback. Like I said, we will plan to have one more of these sessions next week. If you weren't able to put them together for this session, definitely make sure to check it out. Then, as always, send me your videos. I'll give you feedback or any critiques that you might need. I'm happy to help.
01:51:30.874 - 01:51:39.940, Speaker A: There. We can wrap there. Thank you, everybody, for showing up. End of week four. Week five is the last one. We'll see you next week.
