00:00:21.870 - 00:00:22.420, Speaker A: You.
00:00:25.430 - 00:00:51.900, Speaker B: Hello and welcome everybody, to the Ave intro workshop titled Ave 101 for Developers. Joining us today is David, who will be taking us through the session. One quick reminder to ensure that everyone has joined or created their projects by today, as we will be prompting check in one for projects later today. And with that, I'll pass it on over to David to introduce himself and get the session started.
00:00:55.150 - 00:01:37.306, Speaker A: Awesome. Hey everyone, thanks and welcome to, I think, one of the first workshops. Emily. So I'll be going over Ave from a developer's perspective, and for those of you that have attended my similar workshops previously, it will have some familiar content, but also we'll run over some new things that are specifically for V Two. Also around the new governance as well. So it should have some new and interesting content for everyone, as usual, if you have any questions, feel free to post the questions in the chat. I'll try and keep it open to have a look.
00:01:37.306 - 00:02:20.818, Speaker A: Or probably by the end of this session we'll be able to answer any questions in the question time. All right, sharing the screen now. Let's get started. So for those that aren't already familiar with Ave's protocol, we're a liquidity protocol. So that essentially means that on one side we have depositors and they deposit funds into the Ave protocol, as you can see on the left. And these can be various assets and they earn interest depending on certain parameters in the protocol. And then on the right hand side we have borrowers.
00:02:20.818 - 00:03:09.350, Speaker A: And borrowers can take a loan, either a stable or variable interest rate loan, really at any time, as long as they have collateral in the protocol. And yeah, these loans are instantly given if it's within certain parameters in the protocol, like health factors, things like that, which we can go into a bit later if needed. A quick update on Ave as a protocol. I just checked today, earlier today, the market size is nearly $3.5 billion, which is a huge amount, and the total value locked as of today is about 3.36 billion, which is a huge amount. So there's a lot of integrations and DApps and people using it already.
00:03:09.350 - 00:04:11.370, Speaker A: So we're really super keen to see what everyone starts building and how they can make use of everything that is already out there and available. So, as usual, I'll go over the main protocol features specifically for version two. Some of the obvious ones, like depositing, where you can earn, you obviously can borrow once you've deposited some funds, and some newer concepts that some of you may not be too familiar with, like credit delegation flash loans, especially batch flash loans in V Two. And also the new governance mechanisms, which we're also super keen to see what people build around that. So as a super quick overview of what's new specifically in V Two. So as I mentioned, we have batch flash loans and I'll go over some specific examples later on. But that essentially means that you can conduct multiple asset flash loans within the same transaction.
00:04:11.370 - 00:04:59.274, Speaker A: You can flash loan within the protocol. In version one you could only use flash loans outside the protocol, but now you can use it within the protocol. In fact, we use it a lot throughout the protocol for collateral swaps and debt swaps and upcoming trading type features. We also have tokenized debt. So that means now when you borrow from the system you'll receive an ERC 20 token that represents your debt. At the moment it's non transferable, but there's some interesting things that you can do with that, potentially building derivatives on top of that. And I think we've talked a bit about that in the discord chat to some people, so hoping that some people try to build something around that as well.
00:04:59.274 - 00:05:43.282, Speaker A: We have native credit delegation, so previously the credit delegation was a separate smart contract in vaults. But now throughout the protocol there is specific, it's natively built into the protocol, which is really cool. And then also we have governance version two, which I'll go into a lot more detail later on. There's a lot of interesting things around that. There's ave token governance delegation capabilities, which means you can delegate voting and proposition powers, which we'll also go into, of course more efficient gas usage. We have, we support. So in version one you had to have there was a separate ETH asset.
00:05:43.282 - 00:06:38.840, Speaker A: Then also there's all the ERC 20s. Now we have specifically it's all ERC 20s. So that simplifies some of the contract interactions quite a bit and something that I haven't highlighted much before but I'll try and do in this session. Is that all a tokens now support E 20 612, which allows you to do gasless transactions or single approve and transfer in one transaction and that's the permit function which we can also go through a bit later. So let's go over the basics first and then we'll get progressively more complex over time. So if I was explaining it to a five year old, what does earning mean? It means that you can let others borrow your money when you're not using it. If I was explaining to a 15 year old, I'd say that you can deposit your money and you earn immediate interest on that amount and you can withdraw at any time.
00:06:38.840 - 00:07:25.218, Speaker A: And in a D five sense, what we actually do is we tokenize your deposit into what we call the a token or an A token. The account holding the A token accrues interest immediately based on protocol parameters and demand. So you'll see the amount of tokens tick up as you refresh the screen, because this happens essentially every second. And for developers, firstly to interact with the protocol, you'd set up your parameters like the asset, the amount you'd say, maybe say on behalf of that, we'll talk about a bit later. Credit delegation. Then also we have a referral code like any other ERC 20 token, you have to set the approve. So you want to approve our Lending Pool contract.
00:07:25.218 - 00:08:21.450, Speaker A: And one of the differences in V Two is that you only really need to interact with the lending protocol contract. In V one, there was a few different contracts that you had to interact with. Thanks for letting me know, Max millenn. We'll try and make it a bit quieter for you guys. As I was saying, you need to approve the ERC 20 token for the lending pool to be able to withdraw it. And then you simply call the deposit function on the lending pool and we'll talk about the on behalf parameter a bit later. So the point of this is that the last line is the most important and it's really simple to deposit.
00:08:21.450 - 00:09:20.042, Speaker A: One thing I didn't mention was here, when you receive a tokens, they're one to one pegged to the underlying asset. So if you deposit 100 die, the contract will also receive 100 a die in return. And so for earn also, when you want to withdraw your deposited tokens in a similar way, you can set up your parameters and then with amount, you just need to say if you're using UN minus one, that means that you want to withdraw the maximum amount. And yeah, to the question, yeah, I'll post a link in a discord to the Google presentation after this. So then anyone can go through this. All this code as well are proper code examples also on the docs as well, exactly like Jack mentioned. So this code here, you don't necessarily copy and paste it.
00:09:20.042 - 00:09:56.040, Speaker A: It's more just like to give you a general mental model of how you should interact with the contracts. So when you withdraw from the Lending Pool, you simply just call Lending Pool withdraw with necessary parameters. Super easy to do. So next with borrowing. So, if I was explaining borrowing in really simple terms, you borrow money when you need it. To a 15 year old, I'd say something like you borrow money depending on how much you have deposited in the system. Hence it's a collateralized over collateralized protocol and you can pay back this borrowed money at any time.
00:09:56.040 - 00:10:39.718, Speaker A: And in a DeFi sense, we use the a tokens that you deposited as collateral to borrow any of our supported assets at either a stable or variable interest rate. So to borrow, let's assume that you've already did the previous deposit. So you've deposited funds into the protocol, you set up the parameters as usual. One special parameter here is the interest rate mode. So essentially, you choose whether you want to borrow at a stable rate or at a variable interest rate. And for various different use cases, some people like stable rates, other people like variable interest rates. I think generally stable rates are probably a little bit higher than the spot variable interest rate.
00:10:39.718 - 00:11:37.110, Speaker A: But stable rates, of course, have the advantage of being much more stable in the long term. So for a lot of yield farming type activities, people generally like to take stable rates. And once again, on the last line you just simply call lending pool borrow and you throw in those parameters. There's a referral code here and that's essentially for our integrators. So later on, if your project becomes you got main net and becomes quite successful, you can actually get some, let's call it referral bonus or referral fees in return for the liquidity or the activity that you provide within the Ave protocol. So that's a little pretty cool bonus. And on behalf of, I'll go through in the credit delegation section and like I said, so when you take out, let's say, a stable borrow, you can always swap it to an variable interest rate whenever you want.
00:11:37.110 - 00:12:13.970, Speaker A: And it's really simple. You just call swap borrow rate mode and you say what you want to swap it to. The only thing to make note of here is that usually when you get a stable borrow interest rate, hopefully you've got a really good stable rate. If you swap it to variable interest rate and then try and swap it back to stable rate, you're going to get the latest stable rate. Sometimes that stable rate you swap into may be a lot higher than the previous stable rate you heard. All right. And then of course, eventually you have to repay the loan.
00:12:13.970 - 00:13:27.260, Speaker A: So, just trying to look at this question, can we have a very small example of real world use case with each slide? Yeah, maybe we'll go through some real world use cases, I'm trying to mention some real world use cases, but maybe once we go over all the content, the picture will become a lot clearer. So once you've borrowed some funds, you have to repay the funds. So similarly with the previous code, you set up the parameters, you approve the assets that you want to repay like any other, ERC, 20 token and you simply call lending pool repay with the interest rate mode and the other parameters. So pretty simple, actually. Yeah, we'll move to the next session. So, so far I've talked about depositing, which you earn some interest and then also borrowing, and that's generally done from the same account where the same user they will deposit, they'll use it as collateral to borrow some more funds. With credit delegation, it's quite special in that we separate those two.
00:13:27.260 - 00:14:21.294, Speaker A: It's called players. So if I was explaining to a five year old, I'd say that you let other people borrow your money. If I was explaining to a 15 year old, I'd say that when you deposit, you can deposit to earn interest on Ave and then you can also earn extra interest by managing your own loans to other people. And whether you do that programmatically or through off chain legal agreements, that's really up to you. And in a D five sense, what we do is you can give others access to your credit line by depositing funds on Ave. Actually, this explanation is a bit outdated for the V one credit delegation. But in V two credit delegation you just deposit the funds onto Ave and then you can simply approve a credit line to another account or various other accounts, so it doesn't have to just be one other account.
00:14:21.294 - 00:15:42.134, Speaker A: And then how you enforce that repayment from them is really up to you, depending on what sort of product you're building as a way to implement it. So let's say the delegator is myself and I want to allow Emily to have access to my credit line. So what I'll do is I'll deposit a certain amount of funds into the Ave protocol and then I'll say I want Emily to be able to borrow at the stable rate of dai for whatever reason. So what I'll do is I need to get the relevant addresses and you can do that quite easily with this method here. And then I would pass the relevant parameters of saying that's Emily's ETH address and this is the maximum amount that I want her to be able to borrow. And then because I want her to borrow a stable die, I want her to be able to borrow stable die. I just call the approved delegation method on the stable die debt token and this amount in way, this is the maximum amount.
00:15:42.134 - 00:16:37.986, Speaker A: So it's very similar to ERC, 20 approvals where you're setting a maximum amount. So if I go UN minus one, that's sort of an unlimited amount up to the amount of collateral that I've posted or that I've set as collateral in the Ave protocol. All right, so then let's say from Emily's perspective, now that I've allowed her to borrow a certain amount of dai at a stable interest rate, all she needs to do is simply talk directly to the lending pool contract. So she just needs to call borrow on the lending pool and pass in Die at a stable interest rate for an amount, any amount. It can be up to the amount of what I've approved for her to spend. And then she just calls that. And then she'll receive those funds.
00:16:37.986 - 00:17:32.860, Speaker A: And the debt tokens will end up in my account. The delegator I incur the debt. And that also means that if for whatever reason Emily doesn't repay back the debt or there's volatility in the markets, I will suffer the consequences of potential liquidations or things like that. So it's up to me to ensure that Emily either repays back the debt or I repay back the debt through various other ways. And then so the interest rate incurred by me, the delegator will be the same as if I had just taken out a stable die rate myself. But I can charge something else if I needed to from Emily whether we're doing an off chain legal agreement or maybe we're doing it through an on chain contract in various ways. So just looking at some of the questions now.
00:17:32.860 - 00:18:19.034, Speaker A: So a previous question, let me just go to the previous screen. Where were we? This one so provider get reserve token addresses. So that's essentially just getting the stable debt token address or the variable debt token address. So we've created sort of convenience methods. So then you can just insert, let's say, the die asset, ERC, 20 address, and then in return you'll receive all the associated a token address, stable token address, stable debt token address and a variable debt token address. So that answers that question. Is there a way for Emily to see max amount she can borrow? Yes, there is.
00:18:19.034 - 00:19:48.520, Speaker A: So there are view methods that Emily can call on the it's in the docs, but I think it should be probably on the debt token, but I'll have to double check that. But there is a way where she can easily see that. And anyone else can also call these view methods, I think, on the debt token that says how much allowance, let's say delegated allowance, does this person have for this asset? Yeah. So what else can you do a bit more about referral code? So, referral code, let's say we'll go through that a bit later, but referral codes are more related to, well, once you go into production and you actually have, let's say, traffic or you have liquidity and funds moving through your project, at the moment the referral code is still under Governance for Governance to, I guess, refactor. But it should become a lot better very soon, Jack says. Yeah. So these other questions like how do you ensure a loan is repaid? As I mentioned, the protocol, from the protocol perspective, it doesn't necessarily care that a credit delegation is taking place.
00:19:48.520 - 00:21:14.658, Speaker A: The protocol will make sure it is fully collateralized and loans will get liquidated if they get in danger. So from your perspective as a delegator, you need to ensure that either you pay back the debt that you've delegated to someone else or the credit that you've delegated to someone else, or you have some sort of agreement with them, or some smart contract enforced agreement where you can force repayment of that. How do you set a repayment period for the loan? So that's a good question. How do you set a repayment period for the loan? On the base core protocol ave protocol, you can't do that, but you can easily create a smart contract on top, where essentially your users will interact with your smart contract and maybe within your smart contract you can enforce a certain repayment period. And that's where you could maybe say that you can have a credit line for 30 days and it's going to be a certain interest rate, which is always, I don't know, 5% above the current stable interest rate, something like that. So that's really up to you to design. And another question, are there react hook libraries to interact with smart contracts? So there is a subgraph to get all the information that you need to get that is correct.
00:21:14.658 - 00:22:07.860, Speaker A: And there is no React Hooks library at the moment. But very soon we should have a TypeScript JS library that you can use that makes interacting with the protocol a lot easier if you're coming from a JavaScript or TypeScript background. And then another question, does repayment take place offline no, I mean, repayment will always take place on chain. It's how you enforce that repayment, if that makes sense. Rest APIs? No, we don't have any Rest APIs at the moment because these are inherently blockchain or ethereum based on chain contracts. So there always needs to be some sort of on chain transaction that happens. But good questions so far.
00:22:07.860 - 00:23:28.406, Speaker A: Okay, we've got a question from YouTube. Is there any sample implementation of credit delegation with an additional on chain interest payment to the lender? There isn't any sample implementation yet, but there is a sample implementation on our docs for credit delegation. And you could probably easily extend that sample with just adding a different interest rate on top of that. It could be as simple as something like you can take the example that we already have on our docs and then just make the borrower have to interact with your contract. And then the borrower will just call a method like how much do I owe? Or what's my interest rate? Then you can have a method in your contract that just takes the current interest rate from Aave and adds on whatever extra interest rate you need. I think if you're building things like credit delegation sort of abstractions or things on top of it, you'd most likely have people interacting with your contract rather than directly with a lending pool if you want to add all these other sort of enforcement mechanisms. So Sunny has a question about the Ave.
00:23:28.406 - 00:24:25.694, Speaker A: Let's try and keep the questions to the current content as we move through. So with the liquidations, any different in delegation? So with credit delegation, the liquidation calls are not any different. So in the case of me and Emily, I would suffer the liquidation because I have the debt tokens and I posted the collateral, so that's what would happen. So it's up to me as the Delegator to essentially make sure that the loan is repaid in some mechanism. All right, so talking about repayment in credit delegation, so it's also rather simple. You just once again call the lending pool and you call the repay method and you pass in the various parameters. The important part here is you want to say the Delegator address.
00:24:25.694 - 00:25:14.030, Speaker A: So in this case we would say this is my address because I hold the debt tokens and I delegated that credit, so I'm repaying the debt that I have. And so when, let's say, Emily interacts with a contract to repay her debt, she would pass in my ETH address, or in fact, anyone could. Like, if they for whatever reason, maybe it's a charity type cause, other people want to crowdsource the repayment of Emily's debt, you can use this method and pass in my address in that case. Maybe there's some other sort of management mechanisms you need on top of that, but maybe that's an idea for someone. All right. Really good questions with credit delegation, by the way, feel free to keep posting them or post them in discord. And I'll go through them.
00:25:14.030 - 00:25:51.990, Speaker A: I'm just a bit wary of time. So now I'll go through flash loans. Previously, I'd spend a lot more time on flash loans, but hopefully we can go through them a bit quicker, because I think by now, hopefully, people understand flash loans a bit better than a year ago. So if I was explaining flash loans to a five year old, it's essentially free money you have to pay back nearly immediately. If I was explaining to a Wall Streetbanker type person, it's essentially an unsecured fixed term loan that lasts about 14 to 15 seconds. That's the ethereum block time with a very low fixed interest rate, currently 0.9%. That the bank.
00:25:51.990 - 00:26:50.426, Speaker A: And in this case, the bank would be the ethereum EVM or the Ave protocol. It can always collect that expiry, and expiry is the end of the 15 seconds. So there's essentially no risk with flash loans, and in a D five sense, it's an uncollateralized loan. So I forgot to mention, with credit delegation, the powerful thing that enables is that it enables someone like Emily to have an uncollaterized loan for many blocks, but it still needs to be enforced in some way. Flash loans allow uncollateralized loans, but it's only within the same block. And essentially, when you take out a flash loan, you need to repay back the amount you flash load, plus a small fee by the end of the transaction. And the reason why you'd want to do this is because you can execute nearly any code in between the giving of the flash loan and the repayment of the flash loan.
00:26:50.426 - 00:27:43.006, Speaker A: If the flash loan is not repaid, the state of the blockchain simply reverts back and it's like nothing actually happened. Yeah. So just looking at these questions again, so Alexis says to understand, after calling, the predegased function ava pool creates a debt so I can save and transfer the funds into it, right? No, not quite, Alexis. Think of approved delegation. So this is going back to the credit delegation methods. So think of approved delegation method as very similar to the approve function in, ERC, 20 tokens. So when you approve for some contract or some person to be able to withdraw your funds, that's essentially what approved delegation is.
00:27:43.006 - 00:28:18.598, Speaker A: You're approving someone else to take on debt on your behalf. So that's what it is. And then that person who's been approved, they can withdraw that credit whenever they want. So I hope that answers that questions. There's no sort of creation of extra vaults or safes in V two credit delegation. So back to flash loans. So as I was saying, it all happens in one block.
00:28:18.598 - 00:29:08.280, Speaker A: So this diagram shows a schematic of actually a real world flash loan, how it might occur. The important thing here is that everything above the purple line is what you'll see no matter what on chain. So you'll see a transaction and the RV protocol being called. And of course this is where you pay the associated gas fee of whether it succeeds or fails. Everything under the purple line is sort of the arbitrary code that you can execute. And if you don't repay back the flash loan debt by the end of the transaction, then everything under the purple line sort of disappears and it's like it never happened. But of course you still pay the gas costs and if there's any other profit after you repay back the flash loan, then you can send that profit elsewhere and do with it whatever you want.
00:29:08.280 - 00:29:49.298, Speaker A: An example of sort of a flash loan happening in real world on ether scan, this is what it looks like. One of the reasons why you use a flash loan is that you can do many different actions within one transaction. So that saves some gas costs, some transaction costs, and also it's just much more convenient from a UX perspective for users. So this transaction is essentially closing a MakerDAO vault and opening a new one. It's a collateral swap for a MakerDAO vault. And you can also do that with Aave vaults and various other lending protocols as well. And here's a Dex arbitrage which is quite common with flash loans.
00:29:49.298 - 00:30:13.050, Speaker A: Essentially you buy low somewhere, then you sell higher somewhere else. And the reason why flash loans are used here is because you don't need that capital to buy low. So sometimes you can do Dex arbitrage for millions of dollars and you don't need those millions of dollars to start with. Which is pretty powerful. Yeah, exactly. A flash. ARP.
00:30:13.050 - 00:31:09.070, Speaker A: As Jack says. And then specifically for version two, we allow batch flash loans. So in the previous screens you saw that you could only borrow one asset and then you do what you need to do with that asset. With bash flash loans, technically you could flash loan all the assets that we like, all the different types of assets that we have, then you could do all these multiple transactions and then of course you have to pay back all those assets that you flash loaned. So another good question is there a minimum amount I can take a loan for? So there isn't necessarily. So you can take a loan for however much you want. I guess the rational actor would only take a loan if it's worth it, if it's more than the gas costs involved and that depends on time of day and when you're taking those loans.
00:31:09.070 - 00:32:02.180, Speaker A: Another question in V two, can we now use flash loans to create RV positions? Yes, correct. So that's exactly what I was saying in that in V two, you can now use flash loans throughout the protocol. So it's not just for liquidation calls, but you can use it however you want. And that's how we actually do collateral swaps on the back end, within the Aave front end. Now, so there are batch flash loans happening. How has it made sure that the gas fees will be paid even if the transaction fails? So that question is more related to the EVM and how ethereum works, which I won't necessarily go into, but we don't ensure that gas fees is just part of interacting with the Ethereum protocol. Okay, so trying to move a bit faster here to dive in some more code flash load things.
00:32:02.180 - 00:32:58.930, Speaker A: So as I mentioned, you can use them throughout the Ave protocol and into other protocols as well. With the V Two, the code essentially the difference is that now you have to pass in arrays of each parameter. So here you'll see we have the receiver address, we have the assets. So if you're going to pass in two assets, then make sure the amount that you pass in and the modes that you pass in is also two elements. Just of course, hopefully it's self explanatory, but asset zero at index zero aligns with the amount at index zero and the mode at index zero. If you only need to flash loan one asset, you still need to pass in an address array, but of one element. And then as usual, like the previous methods, it's simply on lending pool, you just call flash loan and you pass in the relevant parameters.
00:32:58.930 - 00:34:11.158, Speaker A: The cool and interesting thing here is that you can also pass in the on behalf of method. And the reason why you'd want to do that is because another new thing with V Two flash loans is that you can do debt incurring flash loans. And the reason why you'd want to do debt incurring flash loans is that with traditional, let's say traditional V one flash loans, you get flash loan the amount up front, you do whatever you want with it and then you have to pay it back by the end of the transaction. With debt incurring flash loans, you get the amount up front, but then you can choose not to repay it back by the end of the transaction, which means that you incur a debt. So if someone has delegated credit to you, you can incur the debt on their behalf. And this is a huge design space, there's many different things you could potentially do with that, but I'd love to see some more people experimenting in that space because it makes things quite interesting. It's different from a normal loan.
00:34:11.158 - 00:35:21.914, Speaker A: Because a normal loan, you have to deposit collateral in the system and then once you have collateral in the system, then you can take a normal loan. The debt incurring flash loan is essentially you get upfront the loan and then if you do some profitable action, you can make the collateral deposit. After you've done the profitable action, you can come up with some interesting use cases with that. All right, so once you've called lendingpool flash loan and pass in the relevant parameters, what will happen is the lending pool will do some sanity checks, making sure there's enough liquidity for that certain assets or those assets. It will make sure, let's say if you're doing on behalf, it will make sure that you have the relevant approvals necessary and you can flash load millions of dollars if you really wanted to. It really just depends on the available liquidity in the protocol at that time. Once the sanity checks have passed, then our lending pool will call the execute operation of let's just go back a slide.
00:35:21.914 - 00:36:02.666, Speaker A: It'll call the execute operation of this receiver address. So the receiver address is the contract that has your business logic. And that may be this same contract in the examples on the docs. It's the same contract, but it doesn't necessarily have to be. So in that contract you'll have execute operation and this is where all the parameters are passed in. There's also a section here where you can encode your own parameters so that can be useful when you want to pass through various parameters to decide what action you want to take. There's some examples, new examples on the docs as well, on how to encode and decode both in solidity and in web3 in case you've had trouble with that previously.
00:36:02.666 - 00:37:04.740, Speaker A: And then finally towards the end of your execute operation, you just have to make sure you approve the lending pool to be able to withdraw the assets. And that means that's how it repays back the loan and the associated fees. If you don't do that and then your transaction will fail. So make sure you do that as well. All right, just looking at a question, do I have to enter other market call approved, other examples of bringing other protocols within the version? Not sure I understand the question fully. So the flash loans, you can integrate though the whole flash loan methodology in your own contract however you want. You don't necessarily have to use some factory pattern because these these contracts still live on.
00:37:04.740 - 00:37:37.322, Speaker A: So I have some flash loan contracts that have been online for like a year or more. Yeah. So there's no need to create factories around that. But yeah, post in a discord if I didn't understand your question properly and we can try and answer it there. All right, the next big thing is governance. Let me just double check how I'm doing with time so I'll try and get through all this because this is also another big section. So with governance, in a simple sense, it belongs to everyone.
00:37:37.322 - 00:38:21.110, Speaker A: Ave protocol belongs to everyone, to a 15 year old. What that means is that anyone who owns the Ave Token can help govern the protocol. And in a D Five sense, it's our path towards decentralization. We announced it with the Avonomics White Paper last year, and essentially now we're going pretty hard with the governance, decentralized governance, because token holders can vote and govern the protocol, and that includes asset listings and protocol upgrades. So with the V Two governance, it's quite special. Of course, all this is in the docs in much more detail. But the important parts that I'll mention here that may be interesting to the devs is that we have a short time lock and a long time lock.
00:38:21.110 - 00:39:30.298, Speaker A: That essentially means that certain changes to governance can happen rather quickly and other changes that may be more controversial can take a much longer time for the vote process to happen. But then also a different, let's say, portion of voters have to vote a certain way for those more controversial proposals to pass. So that's quite a unique feature. All the Governance V Two code is also open source on GitHub and would love if any of the hackers wants to fork the code where they implement the Ave Governance V Two framework into their own protocol. That will also qualify for one of the Ave prizes. If you have your own existing protocol and you want to integrate some sort of governance mechanism, you can also use the Ave V Two governance because we think it's pretty special and it's got some pretty cool features in there. To give you a real world example of governance, that's happened recently.
00:39:30.298 - 00:40:21.082, Speaker A: So previously, Charlie from Curve Finance, he posted on our Governance forum, he wanted to add CRV because the Curve Token wasn't listed in the Ave markets. He posted there was discussions on the forums. It ended up becoming a proposal. Julian, who was also part of the Curve team, he started wanting to gather enough proposition power. So in the Ave V Two governance, to be able to propose a change or an addition on asset listing, you need to have a certain threshold of governance power. With Ave Governance, you can delegate your proposition and also your voting power to someone else. So Julian was essentially advertising on Twitter to, you know, delegate your proposal power to this address so then they can make the on chain proposal.
00:40:21.082 - 00:41:18.100, Speaker A: And they did that, and then it was a success. The payload got executed, and now Curve Finance is listed on the main Ave market. And you can see here, the reserve size at the moment is 12 million. So that's pretty cool. That was done in a decentralized way with on chain voting and all that sort of stuff. The governance process, in case you guys anyone wants to play with this or build tooling around it, is that essentially, first there's an off chain process, and that usually means a submission of an Arc, which is a request for comments on the governance forum, and then that turns into a more polished AIP, which is an ave improvement proposal. Once that passes certain thresholds on the governance forums and there's, I guess, rough consensus that it's a good proposal, the proposal can be created with someone that has enough proposal power.
00:41:18.100 - 00:42:30.060, Speaker A: So a lot of, let's call them protocol politicians require more proposal power, so they will need people to delegate that proposal power. So I see that as a as we can do that in the front end of the RV app at the moment. But it'll also be great to see more proposal and voting delegation type tooling out there. Then once the proposal is up, there goes to on chain voting and then we queue the proposal for execution or cancellation depending on how the voting went. So from a developer perspective, it's also super simple to integrate some sort of delegation of voting or proposition power. Essentially the Ave token, all the flavors of the Ave token can delegate their proposition or voting power. Essentially, you call the delegate function on, let's say, the RV token, it can also be the stake RV token and you just say, I want to delegate my proposition power or my voting power or both of those powers to this address.
00:42:30.060 - 00:43:43.410, Speaker A: Similarly, with on chain voting, it'd also be great to see more, let's say, governance dashboards, maybe things that help automate some of these creation of proposals for the community would be great. So when you want to submit a vote, you simply say you call the submit vote function on the Ave governance contract you pass in the proposal ID. And whether you support it as true or you don't support it as false, another big part of governance is governance staking. So the important part here is the safety module, which you can see down in this diagram. So that's essentially it's called the backstop module. But another way to explain it is that it's a protection fund for the protocol. So what these diagrams essentially mean is that if there's ever an incident in the Ave V Two protocol and funds are lost or whatever else, that's where the safety module comes into play and potentially fulfills any obligations to people that have deposited in the protocol.
00:43:43.410 - 00:44:39.060, Speaker A: And at the moment, it's pretty amazing that currently we have more than $600 million staked in Ave. So that's $600 million in the safety module. And because another reason why you'd want to stake in the safety module is that you earn interest and currently APY 6.2% with a max slashing of 30%. That means that if there is an incident in the V Two protocol, you can get a maximum slashing of what you deposited of 30% in that unlikely scenario. And of course, there's some other bits and pieces around Staking, there's a cooldown period and things like that. But if you wanted to integrate Staking into your project to maybe help users earn some relatively safe interest rates, this is the way you'd do it.
00:44:39.060 - 00:45:44.546, Speaker A: The main things is like any other ERC, 20 token, you approve the lending pool and then this is you call the stake method on the stake Aave token and you say how much you want to stake. When you earn the rewards, you can claim them at any time, which is pretty cool. And then also let's say if you want to withdraw your stake, you need to call the cooldown method first and then you can call the redeem after a short amount of time. The documentation on this Staking is quite elaborate so make sure you read through that if you have any other questions on Staking and earning interest there. And also you can post on our Discord or the Market make Discord with your questions there and finally heading towards the end now. So keep posting your questions or get your questions ready if you have any more. As usual, I'll go over some other projects that have integrated Aave in their projects and products and companies rather successfully.
00:45:44.546 - 00:46:18.254, Speaker A: So DeFi Saver is one of the big ones. They use a lot of ave Flash loans for their automations. So to have liquidation protection for their users to do cross protocol yields. So if you want to switch from one lending protocol to another lending protocol, they enable that through Aave Flash loans. So that's really cool. And they've built their whole sort of their own independent company doing that as well as a lot more. But I thought that was a really cool use case of Flash loans.
00:46:18.254 - 00:47:22.642, Speaker A: Furocombo is another company, they were one of the first to do a graphical user interface for Flash loans. Because Flash loans are generally only for developers, you need to be able to code. They were one of the first to make it really easy for the general consumer to be able to get essentially a Lego block of Flash loans and say I want to flash loan this amount and then swap it here and do these various actions. So that's very innovative. UN Finance are one of the first to integrate credit delegation and they actually did credit delegation in the V one credit delegation and they integrated it in their link vault. So essentially the result of doing credit and the reason why they would do credit delegation in their link vault was it helped increase the yield that they were returning to the link vault participants, which is really cool to see. And of course we have Avagotchi which is they're doing a game with underlying the NFTs in the game is a tokens.
00:47:22.642 - 00:48:13.110, Speaker A: So that means that as you play the game and your Avagotchi is running around doing things, doing quests and experiences, you're also earning interest on that NFT just because it has a tokens, a tokens within the NFT. So that's also a very innovative, interesting use case. So it doesn't necessarily have to be in a DeFi sense. It can be whatever you're interested in. In this case, the Avogatchi team creating a really cool game. All right, so resources we have our Discord, of course, a lot of our team members are on the mark and make Discord as well. And we're generally based in EU Time zone, so we're most active during EU time, but also some of us midnight hours and can reply at night as well.
00:48:13.110 - 00:49:07.420, Speaker A: Our developer Docs, we've tried to make them very good, so hopefully they answer a lot of your questions. Governance Forum and also the Docs Portal I'd recommend if you want to get dive deep into the Aave world, there's a lot of bits and pieces, including the risk models that may be interesting for people. The Docs portal has links to all our documentation in every aspect, not just for so that's that and maybe I'll answer this question. Emily, how can we integrate other NFT solutions to Aave? So that's a super broad question. That's really up to you. So you can do whatever you want, you can integrate it however you want, it's really up to your creativity. You can try and do something like Ave gotcha it's probably better if you try and think of an original idea though.
00:49:07.420 - 00:49:18.250, Speaker A: But yeah, the design space for that is huge, so that's really up to you. I think we can take more questions, emily?
00:49:19.490 - 00:49:34.370, Speaker B: Yeah, there's about ten minutes left in the session, so if anybody even feels comfortable unmuting themselves and asking David a question, that's also totally cool, or you can drop your questions in the chat.
00:49:47.130 - 00:50:58.314, Speaker A: Is there a governance token? Yes. So the Ave token is the governance token. Another question, can I tokenize ETF or stocks or something and put it into Aave? No, I think what you're talking about is like synthetic assets long term. If you had some sort of asset that was already live on main net, you could probably go through the governance process as I mentioned, have it listed on Aave, but there's no way to do that quickly enough for a hackathon. Eura had a question proposal power and voting power internally, are they same or separate? So they are separate proposal power and voting power. So proposal power is you need to have a certain threshold to be able to propose make proposals to the governance contract or to the protocol. This is essentially to ensure people that are proposing changes have enough skin in the game, and then voting power is separate as well.
00:50:58.314 - 00:51:41.306, Speaker A: So voting power is just you're able to vote essentially based on how much ava you have. Yeah, but the voting power is equal to the proposal power. So if you have one Ave, you have one Ave worth of voting power and one RV worth of proposal power would it make? Tony has a question. Would it make sense using credit delegation for allowing generalization between listed and unlisted tokens? That would be interesting. I can't think of a use case yet. Maybe it's like a sort of innovation zone type thing. It could definitely be interesting.
00:51:41.306 - 00:52:26.230, Speaker A: I guess in that case, you'd need to have a separate pool of unlisted tokens. And then of course, that's possible as well. The RV V two code is on GitHub, so you can also play around and see how different markets are created there. But yeah, that's a fascinating idea, Tony. I need to think a bit more about that one. Isaac has a question. Can you initiate credit delegation and authorize a borrower in a single also? So to initiate credit delegation, it's just one call? It's just the approved delegation.
00:52:26.230 - 00:53:36.154, Speaker A: So, yeah, you're just doing one call. Maybe the nuance with this is that to approve delegation, you need to have collateral in the system, and you could do that in Solidity in one transaction, which could be rather cool. What exactly happens when a lot of people are taking huge flash loans at the same time? Can we see how much of it is possible for us to loan at the time? Yes. So there are methods where you can see the available liquidity in the lending pool, and then you can borrow the maximum amount if you want to. Just keep in mind that there is the 0.9% flash loan fee, so it's not much, but if you decide to flash loan $100 million, the fee becomes quite a large amount. Robin has a question how to stake collateral or back an NFT with a token? Any resources? So no resources off the top of my head, but those sort of things like backing an NFT with a tokens, that's really up to your creativity.
00:53:36.154 - 00:54:08.280, Speaker A: So you need, I guess, some basic knowledge of Solidity. I think there's certain NFT standards that you should research. I forget the exact NFT standard numbers, but some of them you're able to have NFTs own certain things. So I imagine the Avagatchi team did something similar, but I'm not exactly sure. They also have a discord and telegram that you can reach out to them there. I'm sure they might be helpful in that sense, I think. Actually, Avogatri, they have their sponsors, right? Yeah, they have a channel.
00:54:09.450 - 00:54:13.740, Speaker B: Yes, they've got a sponsor channel in under market make as well.
00:54:14.190 - 00:54:39.186, Speaker A: Yeah, exactly. So you can ask that question to Avagati directly. Probably they're better positioned to answer that. Okay. Ro has is there any open source bot to check for users which can be liquidated and then execute the liquidation? There's no open source bot at the moment, so that's actually on. One of our requests for projects is that we'd love someone to build that. That would be cool.
00:54:39.186 - 00:56:03.530, Speaker A: And another question, the Loan Daddy can be smart contract as what? What this person's referring to is Fiona on Twitter posted a very interesting concept a while ago using credit delegation which involved potentially having derivative debt tokens that are transferable. And I posted that on the Discord so you can search it on the RV channel. So yeah, exactly. In that sense, the loan daddy, that's a smart contract. Any other questions? Okay, Daigaro says ask do frequent uses of flash loans affect APRs? Both supplier barriers? Should have assumed that since flash loans have a block, so the interest rate model is not affected long term, but the depositors do get higher yield due to flash loans. That's one of the reasons why Ave has higher yields for depositors, partly because flash loans contribute to it. Yeah, and Craig's correct, Avagotchi, they use the diamond standard, which honestly I haven't really looked into much, but it seems cool.
00:56:03.530 - 00:56:32.640, Speaker A: I just want to hear you say loan daddy. Yes, it's a cool concept, but yeah, I think credit delegation is one of the really cool concepts and thinking about derivatives of debt tokens is also rather interesting, but complex, but very interesting. Cool. Does anyone want to unmute themselves in the last few minutes and maybe share something? If Emily allows?
00:56:33.860 - 00:56:42.690, Speaker B: Yeah, of course. There's still four minutes left of the session, so if anybody feels like unmuting themselves and having a chat with David, go for it.
00:56:43.220 - 00:57:19.570, Speaker A: Yeah, I'm pretty excited about credit delegation. I wasn't aware of a Twitter thread about derivatives from debt tokens, but that is kind of what I'm also planning on trying to do here where you can have know. So if anyone else is interested with that, I'll post my thing in the chat here. But yeah, derivatives on credit delegation debt token sounds really cool. Yeah, for sure. I think it's a huge design space and you can build some pretty cool, potentially weapons of mass financial destruction type weapons. But also I think you can do a lot of good with it as well.
00:57:19.570 - 00:57:49.720, Speaker A: So you can do some sort of CDO type things about an unsecured lending vault where you can have different lenders optimize your returns by lending out, having unsecured lending strategies and yeah, I think stuff like that is really yeah, more options in the space for various risk profiles I think is always good. Cool. Any other questions or comments?
00:57:52.460 - 00:58:10.850, Speaker B: David is also always available on Discord. If you want to reach out in the sponsor channel and the Hack Support channel, you can just ping him. But I see Gawain has raised his hand. If you want to unmute yourself and ask your question, go for it.
00:58:13.460 - 00:59:11.120, Speaker A: Hi David, quick question around the debt that can be cured in the flash loan, the L two, the debt tokens, because I also seen one inch discussing the debt, like debt tokens. How does that necessarily work with the tokens themselves? I'm not sure about the one inch stuff, I haven't heard that. But from the Ave protocol perspective, the debt tokens are essentially a representation of how much debt you've incurred in the system. So at the moment it's a tokenized version of that. So it's like an easier way to keep a record of how much debt you have in the system. At the moment. They're not transferable, so they just sit in that address sort of just incurring the debt.
00:59:11.120 - 00:59:27.210, Speaker A: There's not much you can do with them. That's why Isaac and other people are interested in creating derivatives out of that because that makes them a lot more flexible. Not sure if that answers your question, Gwen. Yes, it does. Thank you. Cool.
00:59:27.740 - 00:59:34.904, Speaker B: Great. David, I think you've got two more questions in the chat, if you could answer those real quick and then we'll wrap this up.
00:59:35.102 - 01:00:12.650, Speaker A: Yeah, sure. So there's a question for Aave unstaking. Do you have to call redeem within a certain amount of time after the cooldown ends, or you can redeem anytime? Yes. So there's actually a time that you have to call the redeem within, so you call Cool Down and then it's about ten days. Then I think you have two days to call the redeem. And if you don't call the redeem within those two days, then it resets, then you have to call Cool Down again and wait another ten days. So maybe there's some automation that can happen around that, right? That's a cool project because I know I've missed it a few times when I tried to call Cool down, then I missed it by like maybe 3 hours.
01:00:12.650 - 01:00:52.150, Speaker A: So that could be a useful tool. And then there's another question we'll probably work on Governance interface. What do you think are the rough aspects for the existing process? So for the process around Governance, best to look at the Docs, developer Docs. And also there's specifically a Governance docs as well. And yeah, that goes through the entire process of exactly what needs to happen, both from a developer perspective but also from a human sort of governance forum perspective as well. Cool. I think that was all the questions.
01:00:53.160 - 01:01:11.732, Speaker B: Yeah. Thanks so much, David. That was a great session and a lot of great questions from everybody joining as well. Thanks for taking that. And thanks everybody for joining. If you've got any more questions, you can catch them in the Sponsor Ave Channel. And yeah, have a great day.
01:01:11.732 - 01:01:29.960, Speaker B: And don't forget that we will be hosting a number of workshops this week and there are in fact two more Ave workshops this week as well, so just keep an eye on the channels for the channel announcements on our events. And thanks for joining.
