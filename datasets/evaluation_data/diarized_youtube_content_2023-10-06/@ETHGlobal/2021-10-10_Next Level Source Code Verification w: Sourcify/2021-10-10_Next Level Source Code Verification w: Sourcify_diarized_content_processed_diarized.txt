00:00:06.330 - 00:00:20.080, Speaker A: Next up we have Renzi, and she's going to be talking about Sourceify. So a lot of you are interested in verifying your contracts and Sourceify makes that a lot easier. So without further ado, let's welcome Renzi on screen.
00:00:20.930 - 00:00:21.630, Speaker B: Hi, guys.
00:00:21.700 - 00:00:23.520, Speaker C: Yeah, thank you for having me.
00:00:23.890 - 00:00:42.106, Speaker B: I'm super excited to be here. Let's get it started. There we go. Okay. Looks as if I'm all good, right? Okay, cool.
00:00:42.288 - 00:00:46.074, Speaker C: Yeah. So thank you for having me. Once more, today I'm going to talk.
00:00:46.112 - 00:00:49.770, Speaker B: About next level source code verification. With Sourceify.
00:00:50.190 - 00:00:54.414, Speaker C: My name is Francisca and I am part of the Solicitity team and I.
00:00:54.452 - 00:00:56.494, Speaker B: Am also part of this little side.
00:00:56.532 - 00:01:04.222, Speaker C: Project called Sourceify, and why Sourceify is next level source code verification and what you can do with this and why it's important.
00:01:04.356 - 00:01:06.850, Speaker B: All of this I'm going to share with you later.
00:01:07.000 - 00:01:11.662, Speaker C: So, yeah, exactly what will I talk about today? First of all, I want to highlight.
00:01:11.726 - 00:01:20.882, Speaker B: Again what's wrong with today's UX in Web Three. What is source verification and why is it important? What are metadata files and what's Netsmac?
00:01:21.026 - 00:01:29.926, Speaker C: Why is Sourceify next level source verification? And last but not least, because this is a developer summit, you can learn how you can use Socify with the.
00:01:29.948 - 00:01:34.460, Speaker B: Common dev tools or also manually. So, let's get started.
00:01:34.990 - 00:01:44.014, Speaker C: Yeah, first, I really want to remind us all what's wrong with today's UX and Web Three. I mean, many, many of you might.
00:01:44.052 - 00:01:45.360, Speaker B: Have seen this before.
00:01:45.730 - 00:01:49.354, Speaker C: We have lots of trust issues and uninformed decisions.
00:01:49.482 - 00:01:54.174, Speaker B: These decisions that we currently take when we interact in Web Three, they are.
00:01:54.212 - 00:01:56.302, Speaker C: Based on hex data strings.
00:01:56.446 - 00:01:58.306, Speaker B: We don't know what they mean and.
00:01:58.328 - 00:02:11.446, Speaker C: We don't know if this interaction we do is actually what we intend to do. And yeah, that process is also called Euro signing. And yeah, this really shows us nothing.
00:02:11.548 - 00:02:16.646, Speaker B: We don't know what we are doing. And many, many questions might arise from this.
00:02:16.828 - 00:02:22.634, Speaker C: Some of them could be are the function arguments correct? Which contract am I interacting with here?
00:02:22.752 - 00:02:31.770, Speaker B: Is this thing really doing what I wanted to do? What is the source code of this and has it been audited or is this the one that has been audited?
00:02:32.190 - 00:02:37.502, Speaker C: Is this the right address that I'm interacting with? Did anybody check the legitimacy of this?
00:02:37.636 - 00:02:44.638, Speaker B: Do I call the correct function? And last but not least, can I consider this safe to use based on.
00:02:44.724 - 00:02:46.014, Speaker C: This hex data string?
00:02:46.062 - 00:02:49.140, Speaker B: You cannot answer any of these questions.
00:02:49.830 - 00:03:11.340, Speaker C: And yeah, if you are not sure what I'm talking about yet, I also brought a few little examples with me here. We have Uniswap, where I am trying to swap some ETH for Dai. And yeah, the information I get on which I can base my assumption or decision on is these beautiful 260 bytes of hex data.
00:03:11.790 - 00:03:12.810, Speaker B: Same is here.
00:03:12.880 - 00:03:21.242, Speaker C: I'm trying to buy a super rare NFT. And again, I see maybe a bit of function type information and then again.
00:03:21.296 - 00:03:23.422, Speaker B: Hex data, but really nothing else which.
00:03:23.476 - 00:03:25.630, Speaker C: Could prove that I am actually doing.
00:03:25.700 - 00:03:27.086, Speaker B: What I want to do.
00:03:27.268 - 00:03:37.586, Speaker C: Yeah, a couple of more examples. The same here with ENS trying to prolong my ENS name and again, I only get Hex data and a bit.
00:03:37.608 - 00:03:39.202, Speaker B: Of a function type, in this case.
00:03:39.256 - 00:03:43.234, Speaker C: Renew, which could give me some indication, maybe it's the correct thing I'm doing.
00:03:43.272 - 00:03:45.810, Speaker B: But it is not really approved.
00:03:46.230 - 00:03:50.934, Speaker C: And lastly, here I even needed to sign a message before I could even.
00:03:50.972 - 00:03:52.902, Speaker B: See any information on the website.
00:03:53.036 - 00:04:03.562, Speaker C: And again, that is some data that is basically meaningless to me. And even though this is a developer summit here today, I also want to remind you that our users are not.
00:04:03.616 - 00:04:12.106, Speaker B: Necessarily developers and for them this is even more confusing than it is for us. So how can we improve the current status quo?
00:04:12.218 - 00:04:20.794, Speaker C: Luckily, there are some ideas how we can even make this whole problem go away and achieve trust minimized Web Three interactions.
00:04:20.922 - 00:04:22.622, Speaker B: I'm just throwing a couple of words.
00:04:22.676 - 00:04:26.066, Speaker C: At you right now and I don't expect you to understand what all of.
00:04:26.088 - 00:04:27.826, Speaker B: These mean and no worries because we.
00:04:27.848 - 00:04:29.538, Speaker C: Will go into more detail on all.
00:04:29.544 - 00:04:56.966, Speaker B: Of these later on. But basically, trust minimized web Three interactions can be achieved by a nice collaboration between several aspects which include source code transparency and availability, source verification metadata and net spec availability and lastly, Wallet and Block Explorer integrations. So with that in mind, I will go through some of the basics. Maybe some of you are new to.
00:04:56.988 - 00:04:59.346, Speaker C: The Web Three space and you don't.
00:04:59.378 - 00:05:05.966, Speaker B: Know what the term source verification really means. That's not a problem at all because I'm going to explain it.
00:05:06.148 - 00:05:13.966, Speaker C: Source verification is what we refer to as basically in other areas.
00:05:13.998 - 00:05:18.206, Speaker B: This is known as binary reproducibility or bytecode reproducibility.
00:05:18.318 - 00:05:20.034, Speaker C: And what it basically means is that.
00:05:20.072 - 00:05:28.326, Speaker B: The deployed bytecode that you deploy on chain equals the bytecode that is compiled from the source code.
00:05:28.428 - 00:05:30.182, Speaker C: So let's say a project is open.
00:05:30.236 - 00:05:54.714, Speaker B: Source and it claims that their source code can be found at location X. And then there is some bytecode and that's deployed on chain. And basically by recompiling the bytecode that is open source and verifying that this matches the deployed bytecode on chain, we have verified the source. And that's the process of source verification. You might know this for example, through.
00:05:54.752 - 00:06:13.314, Speaker C: ESA scan because here this is a very popular Block Explorer and via this Block Explorer you can do this verification process. So many of you might have seen this before and yeah, I will today show you a turnover ferry how you can also verify your source files and.
00:06:13.432 - 00:06:19.094, Speaker B: We'Ll give a bit more context on why we think that the current verification, how it's been done for example by.
00:06:19.132 - 00:06:24.566, Speaker C: Ether scan is maybe not enough. It's already very good, but we can.
00:06:24.588 - 00:06:26.120, Speaker B: Go much further than that.
00:06:27.050 - 00:06:35.926, Speaker C: And throughout this talk I'm going to use the east to deposit contract to show you what I mean exactly using an example. So here you see the Ether scan.
00:06:35.958 - 00:06:39.894, Speaker B: Website and we are on the page that shows the deposit contract.
00:06:40.022 - 00:06:41.886, Speaker C: And if you scroll down and if.
00:06:41.908 - 00:06:43.534, Speaker B: You click on contract, you see this.
00:06:43.572 - 00:06:47.086, Speaker C: Little green checkbox here and you can.
00:06:47.108 - 00:06:52.834, Speaker B: Also see here contract source code verified. So that means somebody has done this.
00:06:52.872 - 00:06:57.074, Speaker C: Verification process and the source code got.
00:06:57.112 - 00:07:05.614, Speaker B: Recompiled and matches the bytecode that is deployed on chain yay. Next up, what is a metadata file?
00:07:05.742 - 00:07:08.054, Speaker C: Metadata files are actually a quite cool.
00:07:08.092 - 00:07:11.254, Speaker B: Feature from Solidity which got introduced many.
00:07:11.292 - 00:07:14.182, Speaker C: Years ago, but unfortunately not many people.
00:07:14.236 - 00:07:16.950, Speaker B: Are aware of them or are using them properly.
00:07:17.450 - 00:07:19.418, Speaker C: So basically a metadata file is a.
00:07:19.424 - 00:07:26.950, Speaker B: JSON file that is generated by the Solidity compiler that contains a lot of crucial information about the compiled contract.
00:07:27.110 - 00:07:38.782, Speaker C: At the very end of the compiled bytecode you see a hex data. And this hex data includes already a bit of information. It includes the used compiler version and.
00:07:38.836 - 00:07:43.522, Speaker B: A swarm or IPFS hash. And if you follow that hash to.
00:07:43.576 - 00:07:47.474, Speaker C: For example IPFS and the metadata has.
00:07:47.512 - 00:07:50.242, Speaker B: Been published on IPFS, then you can.
00:07:50.296 - 00:07:52.626, Speaker C: Find much more information, you can find.
00:07:52.648 - 00:07:54.674, Speaker B: The full compiler version, you can find.
00:07:54.712 - 00:08:01.394, Speaker C: The complete abi of the contract, developer documentation, user documentation, compiler settings to recompile.
00:08:01.442 - 00:08:07.554, Speaker B: The code to the bytecode. So all of this is very important information, crucial.
00:08:07.682 - 00:08:09.386, Speaker C: And some of this should in the.
00:08:09.408 - 00:08:12.170, Speaker B: Best case be displayed to the users directly.
00:08:12.750 - 00:08:23.342, Speaker C: And let's have a look again what this means at the example of the deposit contract. Here we see the metadata JSON of the deposit contract and here you see.
00:08:23.396 - 00:08:27.390, Speaker B: All the things that I've mentioned before, the used compiler version.
00:08:28.130 - 00:08:34.414, Speaker C: The language here you could expand and see the entire abi here currently expanded.
00:08:34.462 - 00:08:46.174, Speaker B: Are the dev docs. So the developer documentation here are the user documentation and so on. So all the information that I've just mentioned okay, but what is Net spec.
00:08:46.232 - 00:08:59.162, Speaker C: Which has also been already mentioned in the metadata file? Netspec is the Ethereum Natural Language specification format and that is basically a spec.
00:08:59.216 - 00:09:06.598, Speaker B: That helps you to provide rich documentations for functions, return variables and more in the form of comments.
00:09:06.774 - 00:09:09.546, Speaker C: So basically the developer documentation and the.
00:09:09.568 - 00:09:17.790, Speaker B: User documentation that we've seen before in the metadata file, they come from this comments that you put in the code using the Netspec format.
00:09:18.370 - 00:09:20.394, Speaker C: And yeah, so they are basically categorized.
00:09:20.442 - 00:09:22.746, Speaker B: In developer focused and end user focused messages.
00:09:22.778 - 00:09:25.434, Speaker C: And there are also some other categories.
00:09:25.482 - 00:09:48.246, Speaker B: That you could use as well. All of this by the way, you can find in the Solidity documentation in case you want to read more about it. And those end user focused messages that you can use to describe the public facing functions that you have in your code. They are really crucial to users since they basically translate into human understandable words.
00:09:48.428 - 00:09:52.154, Speaker C: What the contract interaction will entail so.
00:09:52.192 - 00:10:07.834, Speaker B: That they can decide on their own whether they want to do this contract interaction, whether that is what they intended to do or not. And so looking back at the deposit contract we see that this deposit contract has been actually commented using this net spec format.
00:10:07.962 - 00:10:09.902, Speaker C: And here for example, we see at.
00:10:09.956 - 00:10:11.598, Speaker B: Def which is the tag that you.
00:10:11.604 - 00:10:23.602, Speaker C: Would use for the developer documentation and here we also see at Notice which is the tag you would use for the user documentation. And I also want to show you.
00:10:23.656 - 00:10:25.526, Speaker B: Again how this would look like in.
00:10:25.548 - 00:10:30.806, Speaker C: The metadata file itself. So all what we've seen in the.
00:10:30.828 - 00:11:14.122, Speaker B: Source code you can find again in the metadata file. It's nicely structured here and it's basically all there just waiting to be displayed for the right person so they know what they are actually doing. So why is this important? That is especially important because the two things we just described, on the one hand the source verification and on the other hand the code commenting in form of Naspec comments. They together have the power to create greater transparency in contract interactions. But if we only have one of them the equation is not complete.
00:11:14.256 - 00:11:15.626, Speaker C: So on the one hand if we.
00:11:15.648 - 00:11:20.362, Speaker B: Have a verified code that is open source but there are no net spec.
00:11:20.416 - 00:11:23.318, Speaker C: Comments or there's no code commenting been.
00:11:23.344 - 00:11:35.682, Speaker B: Done, then the end user does not understand what is happening even though it has been verified. So that is bad. On the other hand, if the developer used Netspec and the end user can.
00:11:35.736 - 00:11:38.546, Speaker C: Understand what they are doing because there.
00:11:38.568 - 00:11:55.526, Speaker B: Is some sort of display of this net spec happening for example in the wallet front end, but the code isn't verified so then the description could be inaccurate or even worse it could mean something entirely else. So that is also bad. But when the code is verified and.
00:11:55.548 - 00:11:59.814, Speaker C: Open source and the end user can understand it because there is some meaningful.
00:11:59.942 - 00:12:05.274, Speaker B: Information displayed to him in the wallet user interface, then that's awesome.
00:12:05.392 - 00:12:07.242, Speaker C: So that is why we don't only.
00:12:07.296 - 00:12:13.040, Speaker B: Need source verification and we don't only need code commenting, but we need both and we need it together.
00:12:14.930 - 00:12:17.854, Speaker C: Yeah. So next question would be how do.
00:12:17.892 - 00:12:19.838, Speaker B: We bring all of these pieces together?
00:12:20.004 - 00:12:23.554, Speaker C: Just lurking at the time there somewhere but I think I'm still good.
00:12:23.752 - 00:12:36.326, Speaker B: Meet Sourceify sourceify is first and foremost an initiative to raise awareness about the importance of source verification and is also an initiative to try to raise the.
00:12:36.348 - 00:12:44.886, Speaker C: Standards and the availability of the verified source files. Sourceify consists of several products that want.
00:12:44.908 - 00:12:55.926, Speaker B: To make it easier for devs to verify their sources. But first and foremost it's this decentralized metadata and source code repository which I'm going to show to you later. But we also see ourselves as bridge.
00:12:55.958 - 00:12:57.914, Speaker C: Builders in the ecosystem and we really.
00:12:57.952 - 00:13:01.130, Speaker B: Try to help make safer web3 interactions a reality.
00:13:01.210 - 00:13:07.006, Speaker C: So what we do on a daily basis is basically talking to all the stakeholders in the ecosystem that need to.
00:13:07.028 - 00:13:13.150, Speaker B: Be involved to make our vision come reality. What are our goals?
00:13:13.230 - 00:13:14.738, Speaker C: On a high level, we want to.
00:13:14.744 - 00:13:17.790, Speaker B: Enable, trust, minimized informed web3 interactions.
00:13:17.950 - 00:13:20.766, Speaker C: And that also entails stuff like turning.
00:13:20.798 - 00:13:28.102, Speaker B: Hex strings, which we've seen in the beginning, and Wallets into human readable information. And on a technical level that means.
00:13:28.156 - 00:13:30.486, Speaker C: Stuff like keeping the metadata and the.
00:13:30.508 - 00:13:43.210, Speaker B: Source files available via IPFS that can otherwise be a big issue and also become an infrastructure or base layer which allows other tools to really build on top of it and to leverage what we are offering.
00:13:44.670 - 00:13:47.482, Speaker C: So here's another little example of how.
00:13:47.536 - 00:13:51.310, Speaker B: This could look like if we would turn hex strings into human readable information.
00:13:51.460 - 00:13:55.802, Speaker C: On the left hand we see what we've also seen in the beginning contract.
00:13:55.866 - 00:13:57.822, Speaker B: Interaction, how it looks at the moment.
00:13:57.876 - 00:14:00.286, Speaker C: In Wallets we have a bunch of.
00:14:00.308 - 00:14:05.922, Speaker B: Hex data and we have the function type contract interaction. But what we would like to see.
00:14:05.976 - 00:14:08.786, Speaker C: There would be a function type, would.
00:14:08.808 - 00:14:23.254, Speaker B: Be arguments, but would also be a description that would display the net spec and then also showing the source and basically a little information whether this code has been verified somewhere or not. And then with the option to click on it, if you're a technical person.
00:14:23.292 - 00:14:24.966, Speaker C: To click on it and then basically.
00:14:25.068 - 00:14:29.770, Speaker B: See the source code for yourself, that.
00:14:29.840 - 00:14:34.378, Speaker C: Looks like really a nice improvement to the UX we have today.
00:14:34.464 - 00:14:41.390, Speaker B: But what do we need to get there from our side? We think we need several components for this to make it work.
00:14:41.540 - 00:14:43.514, Speaker C: On the one hand, we need automated.
00:14:43.562 - 00:15:05.734, Speaker B: Verifications or really, really easy verification processes that are not as cumbersome and as complex as the processes we have today. We need an open contract repository of all verified contracts that also includes the metadata files. Because I've mentioned before, the verification alone without the metadata files does not bring us the translation part.
00:15:05.852 - 00:15:12.262, Speaker C: So both of them are really needed together. We need verification interfaces and plugins that.
00:15:12.316 - 00:15:22.118, Speaker B: Also contribute to the very easy verification process in case the automated verification process fails. And lastly, of course, we need integrations.
00:15:22.214 - 00:15:26.586, Speaker C: Integrations and more integrations because this is.
00:15:26.608 - 00:15:40.510, Speaker B: A very complex ecosystem. And in order to basically bring this benefits that we then have on the infrastructure level to the users, we need to integrate with Block Explorers and with Wallets and maybe even with other stakeholders.
00:15:42.550 - 00:15:44.580, Speaker C: First of all, I want to now.
00:15:45.030 - 00:15:59.314, Speaker B: Describe you a little bit more how this automatic verification could work. So sourceify at the moment currently already automatically verifies new deployments. That's very awesome. And that only has really one condition.
00:15:59.442 - 00:16:07.180, Speaker C: The metadata and the source files must be published to IPFS. So when you are a developer and you, let's say, deploy a contract to.
00:16:08.270 - 00:16:11.882, Speaker B: Ethereum Mainet, then your next step must.
00:16:11.936 - 00:16:14.886, Speaker C: Be to either to use auto publishing.
00:16:14.918 - 00:16:20.522, Speaker B: Or to publish the metadata JSON and the source files to IPFS so that.
00:16:20.576 - 00:16:25.566, Speaker C: Our sourcefi monitoring service can actually pick it up.
00:16:25.668 - 00:16:27.040, Speaker B: So how does it work?
00:16:29.170 - 00:16:33.550, Speaker C: Again, the deployer deploys a new contract.
00:16:33.630 - 00:16:36.590, Speaker B: To the blockchain and then our monitor.
00:16:36.670 - 00:16:41.874, Speaker C: Listens to all the new blocks that are being created by the blockchain and.
00:16:41.912 - 00:16:45.202, Speaker B: Basically looks in those new blocks for new deployments.
00:16:45.346 - 00:16:48.950, Speaker C: Once the monitor finds new deployments, it.
00:16:49.100 - 00:16:54.274, Speaker B: Checks in this bytecode that I've mentioned before, the very last bit, this hash.
00:16:54.322 - 00:16:56.098, Speaker C: The IPFS hash and then checks at.
00:16:56.124 - 00:16:59.082, Speaker B: This address on IPFS whether it can.
00:16:59.136 - 00:17:01.702, Speaker C: Find the metadata file.
00:17:01.846 - 00:17:07.370, Speaker B: And if it finds the metadata file, and if it finds the source files, then it runs the Verifier.
00:17:08.190 - 00:17:17.726, Speaker C: And after the Verifier has done its work, the stuff is being indexed and pinned and we make sure that the.
00:17:17.748 - 00:17:20.982, Speaker B: Metadata files and the source files don't get lost on IPFS.
00:17:21.146 - 00:17:24.974, Speaker C: So that would be the optimal automatic scenario.
00:17:25.022 - 00:17:41.206, Speaker B: And in that automatic scenario, no manual verification from the developer is needed whatsoever. So this is really different to the verification process. You might know, for example, from either scan at the moment. Let's say you want to verify a.
00:17:41.228 - 00:17:48.150, Speaker C: Contract that you deployed two years ago or you didn't publish it on time.
00:17:48.220 - 00:18:04.046, Speaker B: So the monitor couldn't find it on IPFS or some other scenarios where it needs manual input. That's also not a problem because we also have a manual verification interface, which I'm going to show you later. But this automatic verification we think is a crucial point in making it just.
00:18:04.148 - 00:18:08.670, Speaker C: Easy and seamless for new deployments to be verified.
00:18:10.050 - 00:18:13.694, Speaker B: So why is this next level source verification?
00:18:13.822 - 00:18:16.500, Speaker C: I've touched on many of these points already.
00:18:17.750 - 00:18:26.630, Speaker B: Firstly, we do no code flattening. That means the metadata in a Webery is verified as well. That does not mean that the content.
00:18:26.700 - 00:18:29.158, Speaker C: In the metadata, especially the content in.
00:18:29.164 - 00:18:31.480, Speaker B: The net spec files, is true.
00:18:32.010 - 00:18:35.974, Speaker C: We cannot judge whether what the dev.
00:18:36.092 - 00:18:39.178, Speaker B: Translated to be happening in the contract is actually happening.
00:18:39.264 - 00:18:44.426, Speaker C: But because everything is transparent and everything is open source, what you can do.
00:18:44.448 - 00:18:48.378, Speaker B: Next is basically as a developer, go and see the source code, go and.
00:18:48.384 - 00:18:52.960, Speaker C: See the commons and see whether that reflects what is actually happening or not.
00:18:53.810 - 00:18:54.734, Speaker B: As the next point.
00:18:54.772 - 00:18:57.018, Speaker C: All contracts are independently verifiable.
00:18:57.114 - 00:19:12.574, Speaker B: That means you have all the information you need to do the recompilation yourself. Anybody could do it. So that is not a one off verification. But anybody could at any point verify the integrity of this again and lastly.
00:19:12.622 - 00:19:16.994, Speaker C: Tackling the availability issue. So making the storage of source files.
00:19:17.042 - 00:19:22.098, Speaker B: And the processes around verification more decentralized, independent and hence more resilient.
00:19:22.194 - 00:19:24.790, Speaker C: That means especially we shouldn't just trust.
00:19:24.860 - 00:19:29.366, Speaker B: One third party to verify everything for us. And what happens if this third party.
00:19:29.478 - 00:19:32.886, Speaker C: Goes down or the database is somehow.
00:19:32.918 - 00:19:34.874, Speaker B: Corrupted or I don't know what can happen.
00:19:34.912 - 00:19:36.886, Speaker C: So we are friends of open Source.
00:19:36.918 - 00:19:39.662, Speaker B: And we are friends of decentralization. So we really try to make this.
00:19:39.716 - 00:19:45.360, Speaker C: Process as decentralized and independent from one middleman as possible.
00:19:46.930 - 00:19:47.390, Speaker B: Okay?
00:19:47.460 - 00:19:50.814, Speaker C: And since this is a developer summit, let's now have a look at how.
00:19:50.852 - 00:19:54.980, Speaker B: You can use Socify today to do this verification I've just mentioned.
00:19:55.990 - 00:19:58.846, Speaker C: Yeah, in the best case, you don't.
00:19:58.878 - 00:20:02.046, Speaker B: Need to do anything. As I've explained with the automatic verification.
00:20:02.158 - 00:20:05.158, Speaker C: Process, the only thing you need to.
00:20:05.164 - 00:20:10.914, Speaker B: Do in that case is to publish your metadata files and source files on IPFS.
00:20:11.042 - 00:20:14.294, Speaker C: Here's the example of remix, where you.
00:20:14.332 - 00:20:16.422, Speaker B: Have a very handy button just right.
00:20:16.476 - 00:20:17.926, Speaker C: Under the Compile button.
00:20:18.028 - 00:20:30.960, Speaker B: You have a Publish On IPFS button, and all you need to do in the best case is click Publish On IPFS and you're done. Because our monitor will pick the stuff up and will verify it without any need for you to do anything.
00:20:32.690 - 00:20:45.426, Speaker C: So I click publish on IPFS. And then I see here Socify. It's that's how I called this project. Metadata has been published and I can see the addresses of those files that.
00:20:45.448 - 00:20:47.570, Speaker B: I've published to IPFS here.
00:20:47.720 - 00:20:49.314, Speaker C: So that would be an easy way.
00:20:49.352 - 00:20:50.638, Speaker B: How to do it with Remix.
00:20:50.734 - 00:20:55.622, Speaker C: There's even also another way how you can verify your sources in Remix because.
00:20:55.676 - 00:20:59.800, Speaker B: There'S also a sourceify Remix plugin which you can use as well.
00:21:00.890 - 00:21:03.894, Speaker C: Secondly, if you're using Hardhead, there is.
00:21:03.932 - 00:21:06.966, Speaker B: A hardhat deploy plugin and that hardhead.
00:21:06.998 - 00:21:12.950, Speaker C: Deploy plugin also includes the sourceify verification.
00:21:13.110 - 00:21:20.890, Speaker B: So all you need to do if you want to verify on sourceify with hardhead is do hardhead network, mainnet sourceify.
00:21:20.970 - 00:21:24.174, Speaker C: Or whatever network you are on and.
00:21:24.212 - 00:21:32.386, Speaker B: Then it will get verified as well. For Truffle, it's again a bit different.
00:21:32.568 - 00:21:42.222, Speaker C: So in Truffle you find the metadata output in the artifact and in there you find the metadata as a string.
00:21:42.286 - 00:21:47.846, Speaker B: And not as a metadata JSON. So what you can do in the case if you use Truffle is you.
00:21:47.868 - 00:21:51.074, Speaker C: Can go to our manual verification interface.
00:21:51.202 - 00:21:58.266, Speaker B: And just drop your source files and that artifact file in our manual interface and it will verify everything.
00:21:58.368 - 00:22:08.226, Speaker C: So no need for you to extract the metadata or to somehow transform it into its own JSON file. We do that in our verification interface.
00:22:08.278 - 00:22:17.390, Speaker B: So you just have to dump this artifact file. And lastly, here is how our interface currently looks.
00:22:17.460 - 00:22:22.882, Speaker C: I am sorry that this is a bit blurry, I know, but I tried to make GIF out of this.
00:22:23.016 - 00:22:41.366, Speaker B: So let's see what is happening here. In the first instance you saw the Solicify dev website where I added let me play this from the beginning because this makes no sense for you guys. Or let's wait until it's over.
00:22:41.548 - 00:22:47.178, Speaker C: Basically what you're seeing here is already the repository, the contract repository with all information.
00:22:47.264 - 00:22:49.514, Speaker B: But I want to see it from the start again.
00:22:49.712 - 00:22:54.582, Speaker C: So let's see what's happening here. That's the metadata file.
00:22:54.646 - 00:23:00.622, Speaker B: Great. I hope this will go back to what I wanted to show you. Yes.
00:23:00.756 - 00:23:04.526, Speaker C: So basically you enter which network you.
00:23:04.548 - 00:23:09.546, Speaker B: Have been using and the contract address, and then you dump the files, meaning.
00:23:09.578 - 00:23:12.890, Speaker C: The source file and the metadata file. And then you click verify.
00:23:12.970 - 00:23:30.546, Speaker B: But because the deposit contract which I'm using for the examples has already been verified, I get the notification has been verified and it leads me to the contract repository where I can have a look at the source file as well as the metadata file. Here you see the source file of the deposit contract which is neatly stored.
00:23:30.658 - 00:23:35.814, Speaker C: In the contract repository. And then you can also go back.
00:23:35.852 - 00:23:37.266, Speaker B: And you can click on the metadata.
00:23:37.298 - 00:23:40.554, Speaker C: JSON which shows you all the net.
00:23:40.592 - 00:23:45.206, Speaker B: Spec comments, but also the other information that is included in the metadata file.
00:23:45.318 - 00:23:46.746, Speaker C: And yeah, all of this you can.
00:23:46.768 - 00:23:48.650, Speaker B: See when you go to Swissify dev.
00:23:48.720 - 00:23:52.502, Speaker C: And enter the contract address. So also if you are interested in.
00:23:52.576 - 00:23:58.046, Speaker B: Knowing whether a contract has been verified or not, you can just go there, dump the contract address there and it.
00:23:58.068 - 00:23:59.806, Speaker C: Will show you whether this contract has.
00:23:59.828 - 00:24:09.710, Speaker B: Been verified already or not. Okay, so going back to the initial slide that I had in the beginning, how can we achieve trust, minimized web3 interactions?
00:24:09.790 - 00:24:11.890, Speaker C: I now want to translate these into.
00:24:11.960 - 00:24:15.960, Speaker B: What you as a developer can do. So let's have a look.
00:24:16.410 - 00:24:19.366, Speaker C: What you can do to help make.
00:24:19.388 - 00:24:30.278, Speaker B: This a reality is you have to open source your code and make it available via IPFS. You can use sourceify and verify your source and metadata files.
00:24:30.454 - 00:24:33.766, Speaker C: You should use code commenting and comment.
00:24:33.798 - 00:24:44.686, Speaker B: Your code using Netspec. And lastly, you should either build integrations or encourage others to do so. So what should you take home from this talk?
00:24:44.868 - 00:24:49.054, Speaker C: No matter whether you are a developer or a user, please always verify your.
00:24:49.092 - 00:25:02.498, Speaker B: Contracts or check if they have been verified. And especially in the case that they have not been verified, demand verification and raise awareness for the safety risks that are there if stuff has not been verified. And on the more technical side of.
00:25:02.504 - 00:25:04.006, Speaker C: Things, because we want to become more.
00:25:04.028 - 00:25:09.286, Speaker B: Decentralized, please help us pin the Socified content on IPFS, contribute code if you.
00:25:09.308 - 00:25:12.470, Speaker C: Like, and generally all ideas are welcome.
00:25:12.540 - 00:25:14.790, Speaker B: So please join in our chat.
00:25:15.310 - 00:25:21.020, Speaker C: We are on metrics and GitHub, so please join there and contribute, ask questions.
00:25:22.670 - 00:25:26.540, Speaker B: We also do user support there in case the verification should not work.
00:25:26.990 - 00:25:33.358, Speaker C: We are on Twitter at Insorcify and.
00:25:33.444 - 00:25:39.470, Speaker B: For all the plugins it's GitHub.com slash sourceify ETH and our website is sourceify dev.
00:25:39.540 - 00:25:40.586, Speaker C: And in the DWeb.
00:25:40.618 - 00:25:42.350, Speaker B: It's sourceify ETH.
00:25:42.870 - 00:25:48.606, Speaker C: Yeah, wrapping up. I want to say big thank you and credits to Chris, Eddie, Fabian, Jakov.
00:25:48.638 - 00:25:52.414, Speaker B: Ligy, and also welcome our two new maintainers, Khan and Johnson.
00:25:52.462 - 00:26:03.862, Speaker C: Because all the people I've mentioned, they are our developers and they are the brains behind this project. So I'm only the messenger here today and trying to be able to answer.
00:26:03.916 - 00:26:07.580, Speaker B: All your questions, if you have any now. Thank you.
00:26:10.350 - 00:26:40.370, Speaker A: Thank you so much, Francie. This was awesome. There were a handful of questions which luckily Chris just already answered on the chat, but I'll still bring up some of these here. I think a common discussion that's going on is how do you think about integrations? And obviously there's multiple interpretations of what integrations are, whether it's about this plugging into existing developer environment, to adding more plugins or support for how this gets used outside of just a web interface. What are kind of plans for that and how does that look like?
00:26:40.520 - 00:26:44.318, Speaker C: Yeah, that's a good point. So in one of my other talks.
00:26:44.334 - 00:26:47.518, Speaker B: I also had a slide on all the cool integrations we already have, but.
00:26:47.544 - 00:26:54.774, Speaker C: Because the time was short and I wanted to this time highlight how to use it, I didn't include this, but actually in terms of so let's go.
00:26:54.812 - 00:26:56.450, Speaker A: Deep into whatever we can.
00:26:56.620 - 00:27:02.522, Speaker C: Okay, so in terms of developer tooling, there are already some integrations out there that I mentioned.
00:27:02.576 - 00:27:03.366, Speaker B: So for hardhead.
00:27:03.398 - 00:27:13.310, Speaker C: It's the hardhead deploy. For Truffle, I think there's no plugin yet, I hope I'm not mistaken. And for Remix there is the Susify plugin already.
00:27:13.380 - 00:27:26.478, Speaker B: So on the tooling side of things, we are quite good. Of course on the wallet side of things, things could improve, but there are open conversations already with some of the wallets, which are great. And then lastly on the Block Explorer.
00:27:26.494 - 00:27:33.342, Speaker C: Side, the AutoScan Block Explorer recently released a new version which actually includes sourceify.
00:27:33.406 - 00:27:35.234, Speaker B: Support, which is very cool.
00:27:35.352 - 00:27:37.766, Speaker C: So yeah, there also needs to be.
00:27:37.788 - 00:27:42.146, Speaker B: Some more work on the Block Explorer side of things, especially with the big Block Explorers.
00:27:42.178 - 00:27:44.374, Speaker C: But yeah, we hope that this will.
00:27:44.412 - 00:27:50.394, Speaker B: Happen soon and we are open to conversations and with most of the people we already have an open conversation channel.
00:27:50.512 - 00:27:54.154, Speaker C: But of course we also know there are so many priorities and so many.
00:27:54.192 - 00:27:55.434, Speaker B: Things to work on at the same.
00:27:55.472 - 00:28:02.270, Speaker C: Time that it's understandable that nobody can only prioritize sourceify.
00:28:03.970 - 00:28:24.580, Speaker A: Looks like other questions are coming in. Let's see, other than everybody just being said about what's going on, do you have any specific small projects a hacker or a hackathon could build to benefit sourceify? Like small improvements, I think is probably the better interpretation here.
00:28:25.530 - 00:28:30.246, Speaker C: Yeah, that is a very good question. If I had more time, I would.
00:28:30.268 - 00:28:31.798, Speaker B: Definitely come up with some stuff.
00:28:31.884 - 00:28:34.390, Speaker C: Maybe Chris has some ideas if he's in the chat.
00:28:35.930 - 00:28:39.078, Speaker A: All right. Chris is OK, great.
00:28:39.164 - 00:28:41.098, Speaker C: Yeah, no, because I think there's a.
00:28:41.104 - 00:28:42.474, Speaker B: Couple of things that we can do.
00:28:42.512 - 00:29:03.010, Speaker C: And as I also said, we are currently onboarding two new maintainers to the project, which is really exciting and I think they would also have some ideas how you could help, for sure. But also on that side, I think we have some IPFS issues, for example. So if somebody is an IPFS expert.
00:29:03.750 - 00:29:05.742, Speaker B: Or just pinning the repository.
00:29:05.886 - 00:29:07.694, Speaker C: But yeah, in terms of hackathon projects.
00:29:07.742 - 00:29:09.780, Speaker B: There'S probably some stuff that could be done.
00:29:10.710 - 00:29:24.642, Speaker A: Awesome. Well, if there are no more outstanding questions, we can end this, but this is obviously great. And congrats on making this a big initiative and a better public utility, hopefully.
00:29:24.706 - 00:29:26.646, Speaker C: Yeah. Thank you so much for having me.
00:29:26.828 - 00:29:32.920, Speaker A: So much. All right, so with that, we are ready to move on to our next talk.
00:29:37.450 - 00:29:37.980, Speaker B: You it.
