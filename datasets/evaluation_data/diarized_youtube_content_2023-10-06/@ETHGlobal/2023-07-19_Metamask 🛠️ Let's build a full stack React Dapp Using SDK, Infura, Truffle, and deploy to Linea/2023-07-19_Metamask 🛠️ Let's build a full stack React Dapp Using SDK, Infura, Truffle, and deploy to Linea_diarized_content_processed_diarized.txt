00:00:07.290 - 00:00:49.798, Speaker A: Hey everybody, my name's Eric and today we're going to be doing a MetaMask SDK and Linear workshop. We're going to be cloning down a vite and react TypeScript application that's part of a larger mono repo that has a blockchain and a web workspace. So yeah, let's get started with the slides. And we're going to build a full stack react DApp using SDK infira Truffle and we're going to deploy to Linear mint some NFTs. Let's get started. So again, my name is Eric Bechard. I'm the Developer Relations Manager at MetaMask, and you can find me on Twitter, telegram, GitHub lens and ENS at HTP junkie.
00:00:49.798 - 00:01:38.362, Speaker A: You can always reach out to the MetaMask devrel team or any of the devrels at consensus. Our DMs are always open, we're always looking for feedback on the products ideas and we'll even have a few slides in here where we have resources and we can talk about the MetaMask improvement proposals and how you can be a part of that as well. Let's get started. So, the MetaMask SDK allows you to connect your DAP to the MetaMask browser extension or MetaMask mobile on your phone. So here are a few links if you want to follow along with the slides. That's the second link on the slide there. And for the repo that we're going to be cloning down, that's the top link, the tinyurl.com
00:01:38.362 - 00:02:22.570, Speaker A: Mm Sdklinea. And we'll also get to a point where I talk a little bit about Linear and there is a better explanation video that I'm going to point you to if you want to get more detailed information. But that's the third link, tinyurl.com lineagesplainer. So, our agenda, we're going to be showing off the demo app here in the slides with some screenshots. We're going to review Linear, we're going to review the SDK basics and then we'll get into our project. So cloning the workshop, installing the dependencies, configuring the environment variables, reviewing the blockchain and web workspaces in the monorepo.
00:02:22.570 - 00:03:12.554, Speaker A: We'll then build and deploy to the lineage testnet and then we'll test the front end application. So we'll mint and test our contract functions. We'll play with Wallet interaction state and synchronizing our application to the MetaMask Wallet state. So here is the application in which we're going to be building. It is just a fictitious ETH event called ETH Atlantis, the best ETH event under the sea. And when we use the connect button, we will be using MetaMask SDK because we'll have that instantiated in our application and it will allow us to connect to either the MetaMask browser extension, as you see here. You can select one or multiple accounts to connect to and then you can change any of those while you're connected to the DAP as well.
00:03:12.554 - 00:04:09.770, Speaker A: If you do not have the extension, your users can use the mobile QR code to connect again your phone to MetaMask mobile. This is what the application will look like when we've got it up and running and we've minted a few tickets. So some things to take notice of are the navigation at the top and you will notice that we have this little extension tag. So in the application, I will show you how to as the developer, and even if you want to show to the user kind of what they're connected to, whether it's the extension or mobile, I think that's an interesting kind of concept to cover. If they are connected to the chain that we've specified that we want this application running against, it will show right here. If they're not connected to that chain, there will be a switch chain button, which will also kind of make sure that works once the application is up and running. And I'll show you how it works as well, I'll show you the components.
00:04:09.770 - 00:04:43.014, Speaker A: We have an address for whatever account that they're connected to, whether they're accounted to extension or mobile. It'll show the user's account address here and ETH balance or the balance of kind of whatever chain they're on. So on the linear, it'll be linear ETH. If they were connected to main net, that would be regular ETH. We also have these Minting ticket buttons. So imagine that we have this ETH Atlantis event coming up and we want people to purchase tickets. We have a general admission ticket for 0.1
00:04:43.014 - 00:05:14.020, Speaker A: ETH and a Mint ticket button. We also have a VIP. And the way that we determine which ticket they get is just by how much they pay in ETH. And so we'll see the contract, we'll review the contract a little bit. Again, it's a demo application, demo contract. It's not really meant for production. This is meant to help you as a developer get more kind of associated with MetaMask SDK, deploying to Linea and some of the tools and development you need to do in order to build something like this.
00:05:14.020 - 00:06:17.170, Speaker A: We also have down here the actual tickets that they've minted against this contract. So when we review the contract, I'll show you a public function or two in which we can call into so that we can, you know, what NFT tickets are associated with this user per this contract. And then we can take that information and we can display their SVGs, which are deployed actually to the blockchain. So these tickets will never disappear. If the server or IPFS or whatever goes away, the tickets will always be on the blockchain and we'll always be able to generate them from the SVG code that's stored on the blockchain. So what is linea? I'm going to try and explain a little bit what linear is. But I think the thing that you should just kind of understand for the purpose of this workshop is that we're going to deploy to linear, but it's really no different what we do in the application, what we do as part of the deploy it and how we interact with that contract.
00:06:17.170 - 00:06:54.302, Speaker A: Linear is an EBM equivalent l two chain. So there's no change that you have to make to your smart contract code. If you have something that would normally deploys on ethereum or maybe like polygon, then you should also be able to deploy it to linear. So linear is an L two scaling solution. It is a type two ZK roll up. And we're going to use linear for deployment of our contract. A layer two is a separate blockchain, sorry, blockchain that increases the transaction speed and throughput.
00:06:54.302 - 00:07:29.210, Speaker A: And it's going to do that by partially deriving it's going to do that while deriving its security from the ethereum EVM. So it pulls off that execution layer away from L One. Again, they rely on ethereum for not only security but for data availability. It's a hard one to say. And they post their transactions back onto L One ethereum. Right. Roll ups are the most kind of widely accepted implementation.
00:07:29.210 - 00:08:12.730, Speaker A: And you have optimistic roll ups like Arbitrum optimism base, and then you have ZK rollups like linear, ZK sync, polygon, ZK EVM, scroll, and StarkNet. Going into kind of much more about that is a little bit beyond the scope of this workshop. But if you see the tiny URL kind of up here at the top right of the screen, tinyurl.com lineageplainer. My coworker Emily, she can tell you more. She has an L Two crash course which will talk about what is linear described way better than I can. She'll talk about what is an L two and what is type two ZK roll up.
00:08:12.730 - 00:08:57.080, Speaker A: The anatomy of a roll up asset transfer process. L One to l two deposit. L Two to l one withdrawals. Optimistic versus ZK roll ups. What is a Zke EVM and why? To build on linea and more. So in our DAP, when we're using the SDK, we're probably going to have some type of a connect button. And as long as the SDK is instantiated, in our case a react application, it's going to be determining, is the MetaMask extension installed? So if it is, it's going to connect you to the extension and you'll have a connection to that MetaMask browser extension in your browser if MetaMask extension is not found.
00:08:57.080 - 00:09:28.500, Speaker A: So it will be determining whether or not you have the extension installed in your browser. Then you're going to get a QR code. And that QR code will allow you to take your phone. You'll be able to scan the QR code and it will connect you to the mobile. We'll see that working once we have our application up and running. Finally, we have some references here. So the MetaMask SDK developer resources, you can go to tinyurl.com
00:09:28.500 - 00:10:07.930, Speaker A: Sdkguide, you can check out Linear and they've got a great blog there. Linear L two ZK. Roll up. Go to check that out at linear mirror XYZ. And then we also have this link to the MetaMask improvement proposals. GitHub repo. I talked about this earlier this is a link that will take you to show you how you can be as part of the development community, how you can work with us to determine MetaMask improvement proposals, ideas for the MetaMask API, what should come next, what's missing.
00:10:07.930 - 00:10:42.082, Speaker A: We do some, I think, monthly calls around that. We just started those up. So follow me on Twitter and you'll be able to find out about those calls. So with that, let's go. So we're going to exit out of our slides here and we'll go leave the slides open. But again, if we were to go back to those links that we had right. If you were to follow this top link here, tinyurl.com
00:10:42.082 - 00:11:21.480, Speaker A: MetaMask or sorry, mm SDK Linear, then it will take you to this GitHub repo and you can copy the link to the repo as well. There is a README here which we're going to be opening up and following along with in, our project in Visual Studio code. We'll also touch on infira. We have some cool tools and documentation that we'll review as well. But let's go ahead and open up our terminal. And what we're going to do is go ahead and clone down this repo. And once that's down, we want to CD into it.
00:11:21.480 - 00:11:54.260, Speaker A: And we're going to go ahead and do an NPM install. While that's getting started, I'm going to go ahead and create my API key. So if you have a Linear account, you can come in here, create an API key. We want to do a web three API. We're going to call this ETH Atlantis. We'll just do workshop and we'll create it. And with that, that should give us an API key.
00:11:54.260 - 00:12:35.260, Speaker A: So if you come over here to the endpoints tab, you'll see your API key and you'll also see links for Ethereum mainnet garly Sepolia testnet for Linear. We have the testnet mainnet should be available soon or by the time you watch this video as well. MetaMask will have a new version of the SDK out by the time you watch this video. And we'll talk a little bit more about that later. So I've got my API key copied. I'm just going to go ahead and can I not copy this right now? Interesting. Let's go ahead and refresh here.
00:12:35.260 - 00:12:58.794, Speaker A: This is very OD, I could not copy that thing for a moment. I still can't copy. Wow. All right, we got it now. Interesting. And then it might have been because I was installing some stuff. I don't know why that would have mattered.
00:12:58.794 - 00:13:24.620, Speaker A: But we're going to go ahead and open up this workshop in Visual Studio code. And with that, we can go ahead and kill our terminal as well because we have a terminal inside of Visual Studio code. And we'll open that up. We will also open up the README here. That was very interesting. Okay, so here we have our README. So we're going to go over this a little bit.
00:13:24.620 - 00:14:22.346, Speaker A: So this is an NFT tickets workshop that utilizes SVG to create on chain SVG tickets for a fictitious event like we already talked about, it uses Turbo repo. Basically, the only thing you have to know about Turbo repo for this project is that we will be running all of our commands from the root. Turbo repo will allow us to one install dependencies for our web blockchain folder in our main directory here. It's already done. And just imagine that the Blockchain and the web folders are like well, they're kind of NPM workspaces, right? In our blockchain workspace, we have Typechain. This will give us the basically, Typechain is a package that's designed for devs who want to use TypeScript and interact with Ethereum Smart contracts and their web apps. So it generates TypeScript bindings based on the solidity contract code.
00:14:22.346 - 00:15:05.674, Speaker A: You'll get the benefit of Type safety and autocompletion. And overall, it can help you catch errors early in development, improve code readability, integrates with Ethereum development frameworks and libraries like Truffle Hard, Hat, Ethers and Web Three JS. In this project. Specifically, we're using Typechain Ethers v Five and Typechain truffle v Five, which targets each of those. The web workspace. If we close this and open up the web is a client application built with VJs and React and TypeScript. And yeah, we'll show you how to conditionally render the UI, how to connect switch chains and display wallet information from the MetaMask browser extension and MetaMask mobile as well.
00:15:05.674 - 00:16:05.814, Speaker A: We'll have provided a MetaMask context provider and a use MetaMask hook to help you manage your wallet state. You do not have to use kind of what I'm using, you can roll your own as well. The SDK team is releasing a react kit very soon. Beyond that, we will be in some libraries like Wagme, Web Three JS and maybe even blocks native's Web Three onboarder. So just by defaultly, using MetaMask in those libraries and those kind of components in like a React application, well, then you would be using MetaMask SDK under the hood. Once we're running our application, once we get it configured, and once we're running it, we'll be able to mint tickets, respond to changes from the wallet, like switching of accounts, chain, getting the updated balanced, making sure it's in sync with our application. And then finally, once the user has Minted tickets, the Minting page will also display those SVG tickets that are stored on the Ethereum blockchain.
00:16:05.814 - 00:16:45.590, Speaker A: We already kind of talked about this. We're going to go ahead and get started really quickly. I want to rename these environment variable files in both the web and the Blockchain directory just to prepare those. Once they are renamed, they will no longer be tracked by git because they were in the Git ignore and we've already done step one. We've already cloned down the repo and changed directories into our React SDK Linear Workshop directory. We've already run step two, NPM install. So step three is where we want to configure these environment variable files.
00:16:45.590 - 00:17:20.718, Speaker A: So I think we should still have our API key from infira in our clipboard so we can paste that in here. Looks good. Also, this environment variable here will specify which chain we want our application to run against. So this should match up with whatever chain we're deploying to. Of course, you could deploy your contract to, like, Linear and Mumbai. But for this application, the way we have this demo set up, we're only running against one of them. So we'll be deploying to Linear.
00:17:20.718 - 00:18:04.082, Speaker A: So we want to copy the linea hex chain ID. Now, how do you get those hex chain IDs? It's fairly simple. One thing I think the place most people would start is chainlist.org. And here you could do include testnets. You could type in Linear, and you would find the chain ID, and you could find the hex version of that. Now, if you find the chain ID another way, or if you know it by heart, another thing that you could do is copy it and go to Eserialize.com, and you could choose hex to number or let's do it the other way around number to hex, and you could get that and also the other way around.
00:18:04.082 - 00:18:33.020, Speaker A: So if we want to copy that, put it over here. Oops, you can see know converting it the other way around. So I'll go ahead and close that. But that is Esrialize.com, built by one of our engineers over here at MetaMask, Shane. So thanks to Shane, all right, we can close out this and also this API key, once you're watching this video, will not be available anymore. I'll go ahead and copy that.
00:18:33.020 - 00:19:07.734, Speaker A: Yeah, MetaMask documentation. One thing I just wanted to show off real quick. If you go to Wallet, we've got some tutorials in here if you're unfamiliar with SDK, want to get a little bit more knowledge about kind of just using MetaMask. Well, you can take our react DAP with local state or react DAP with global state tutorials. We've also got tutorials over on the snap side. We also have a reference, an API playground in here, which, if you just wanted to play around with our different RPC methods, you can. Let's pick one that has a few more parameters to it.
00:19:07.734 - 00:19:36.560, Speaker A: Let's see here. Subscribe wallet watch asset, right. So you can play around with the RPC APIs right in your browser, which I think is really cool. The MetaMask documentation is new. It's updated. If you haven't been to the MetaMask docs in a few months, we've revamped everything, and it's really nice so we can kind of get rid of all of this. We don't need any of this anymore, and we'll just get started with the application.
00:19:36.560 - 00:20:15.002, Speaker A: The next environment variable file that we want to fill out is the blockchain one, and this one's a bit more sensitive. We still need that project inferior application ID. But here I need the private key. So I'm actually going to need to open up a new window again. And really quickly, I'm going to have to pause the video because I'm going to go through here. This is my test wallet. There's no real ETH in here, but I'm going to come in through here and I'll show you on one of these.
00:20:15.002 - 00:20:49.560, Speaker A: If you click on the three dots, you can go to Account Details and then you can hit Show Private Key. It'll ask you for your password. It'll display it, you can copy it, and then we can paste it into our Environment Variable file. So let me go ahead and do that and close out the file, and then I'll be right back. All right, so I went ahead and I have copied my private key and put it into the blockchain Environment Variable File. And as well, I've filled out the Web one as well. So with that out of the way, we have completed step three.
00:20:49.560 - 00:21:30.242, Speaker A: At this point, we will go down to step four. This just talks a little bit about why we need the V public network ID and kind of what files are using that. But let's kind of go on. We're going to go over all the file system and everything. We just want to make sure that it builds and runs. So this is kind of the point where once you're done developing your contract, once you're done kind of developing your front end the way that you want it, we might do an NPM run build. When I do this inside of my turbo repo project, this is going to not only build kind of my contracts and my blockchain workspace, but also my web.
00:21:30.242 - 00:22:10.930, Speaker A: Make sure that there are no errors, make sure that all the blending rules are being followed. So I'll go ahead and copy that in and we will run build. And what we should see is this kind of finish with no major errors. There's a few CSS errors, but those are no big deal. And then if we look into our Source Lib, we'll see a contract abis directory. Now, why is that? In our truffle config, we have added these two lines of code right here, contracts Build Directory and Contracts Directory. So it knows that our contracts directory are from this file right inside of contracts.
00:22:10.930 - 00:22:46.554, Speaker A: Cool. So it's going to go in there. It's going to build basically all the contracts or any of the contracts that these ones are importing and using as well. We specify the Contracts Build Directory and we say, hey, backup out of here. Go to Web Source Lib and create a folder called Contract Abis and dump all the contract abis there. While we're in this file, I'll also show you that we have Gary Mumbai and Linea set up. Now, we're only going to be using this linea one, but when we were on the endpoints page of the infura Dashboard.
00:22:46.554 - 00:23:19.926, Speaker A: It showed us all of these URLs. And then of course, we are just referencing our environment variable API key from here. And we're doing that for all of them. But we could deploy to any of these that we want to. We're going to choose Linea. All right, once we have that done, we're going to go ahead and deploy to Linear. So this is where it will use our private key that's specified inside of our blockchain environment variable file, which I'm not going to click on.
00:23:19.926 - 00:24:03.640, Speaker A: I bet you thought I was there for a minute. So we can run this deploy linear. Then if we check here in the package JSON, you will see that there's a deploy Garly, a deploy Linear and a deploy Mumbai. When we run this NPM run deploy linear command, it's basically saying, hey, NPM, run the script deploy linear which can be found inside of our blockchain workspace, right? Blockchain workspace. Here's the package JSON. Here's the deploy linear command. Right? So you can imagine that if we wanted to run local or test, we could just do NPM run test workspace blockchain, right? Perfect.
00:24:03.640 - 00:24:33.230, Speaker A: And now we have a contract address. And I am doing it in this project where I'm basically copying this and pasting it into this config file here. I'm going to find the one that says Linea. I don't know why that contract is there. I must have saved one on. So that is where our contract address lives, on the Linea blockchain. You could go look that up in the Linear block Explorer and you should be able to find the contract.
00:24:33.230 - 00:25:17.774, Speaker A: With that out of the way, we should be able to go on to step seven, which was copy the contract address into the config file. We did that. And then one of the last steps, we have ten steps. So one of the last steps is to run this dev testnet. So let's go ahead and do that. So this is going to run our React TypeScript application. So if you haven't worked with VJs before, it's a JavaScript build tool, kind of like File new project for React View, probably a few others, too.
00:25:17.774 - 00:25:47.234, Speaker A: React and View are the only ones that I've used. And when you build a project with Vite for those frameworks or libraries, you can typically choose whether it's a JavaScript or TypeScript. We've gone with the TypeScript version. So let's go ahead and open this up. And here is our application. And one thing I just want to do real quick is I want to disconnect from everything because I must have been disconnected already from running this application several times. Preparing for the workshop.
00:25:47.234 - 00:26:27.534, Speaker A: Let's also hide my BOOKMARKS. We don't need to see those. All right, so let's take some stock or kind of take a look at kind of what's going on in the browser right now. So we obviously have MetaMask installed and it is enabled inside of our extensions. Great. So the way that MetaMask works up until zero four two version, which is what we're on right now, if we have it instantiated in our code. And when I say instantiated, I mean if we go to our hooks.
00:26:27.534 - 00:26:50.540, Speaker A: File here, which kind of takes care of all of our MetaMask state, but also has our connect button in it. Or, sorry, our connect function in it. We will also see that we are instantiating the SDK in here. Let me make this a little bit smaller down here. So you can see this is where we knew up our MetaMask SDK. We pass it. Some options.
00:26:50.540 - 00:27:14.130, Speaker A: You don't have to pass it. All these options. You could get away with the name, and actually, you could probably just get away with just adding the name. But I wanted to show all of the options and some of the different things that you can do with these options. In case you wanted to copy this and use any of them. You can do logging. If something's not working correctly, you can disable auto connect.
00:27:14.130 - 00:27:56.122, Speaker A: Auto connect just means that if I refresh my page, it's not going to persist the connection. Yeah. And then you can see up here. So once this is instantiated, here's the point. Once the SDK is instantiated, when we call the RPC method on MetaMask, which is ETH underscore Request Accounts, which is what this button does, then it's going to check, is MetaMask installed in the browser? If so, let's connect to it. If not, let's pop up a QR code and let them connect to MetaMask mobile. Now, by the time you watch this, MetaMask SDK will be on zero five or greater.
00:27:56.122 - 00:28:44.782, Speaker A: And the way it works in those versions is that it always gives you the option of whether you want to connect to the extension or mobile, which I think is actually a better user experience than this. But both of them work, and you can choose to use whichever one you want. Again, in ours, we are using MetaMask zero four two, because that is what's out right now. Now, once we've connected, you see that we are connected to extension. We are on the linear chain, and we are connected with this account, and it has this much balance in it. So the first things that we want to check, we've built out this application. Now we kind of want to test it out and make sure that when we change accounts, that the balance changes, right? And that the address changes.
00:28:44.782 - 00:29:29.770, Speaker A: So that works. We do want to go back to the account number one, though, because that's where I have my linear ETH. And then also we want to find out what happens if they switch chain or what happens if they connect and they're already connected to another chain like Mumbai, right? Let's say they were on another site using Mumbai. Well, what happens is it no longer displays the chain, right? Here and it creates a switch chain button. That switch chain button can be found in our components under the Switch network folder. There's a switch network button here, which is just very simple, but it uses this switch network hook. Now that hook is here and all that it's doing is calling Wallet add Ethereum chain.
00:29:29.770 - 00:30:14.246, Speaker A: If you've never used Wallet add ethereum chain before, just know that it will add the chain and kind of take you over to it programmatically. But you have to fill out some stuff and notice this is all the stuff that's in that config file. That's why we needed all those properties in the config file. If we weren't programmatically switching their chain but doing everything else, we could have gotten away with just having the contract address. But that's why our config file has these other properties in it. All right, let's go back over here. So with all of that taken into consideration, let's get back on the right chain and let's try minting a ticket right using the MetaMask browser extension.
00:30:14.246 - 00:30:53.646, Speaker A: So we'll go for a general admission ticket first and then this will be for whoever's coming with us. We're going to do a plus two for this event. And when this is done, Minting, there's several different ways that I could force this component down here to rerender and check what NFTs they already have. I just went for a super hacky, very simple way of doing it. Let's first look at tickets. So when we click on that button, we're running this NFT tickets mint NFT public function on the contract. We are then awaiting the transaction.
00:30:53.646 - 00:31:50.442, Speaker A: And then we are doing some basic state management on the tickets owned page down at the bottom or tickets owned component down at the bottom. What we are doing is we have this use effect that just always tries to run once. But if you change wallet address, we want to check again. We want to say, oh, we want to run. Basically, we want to reach out to the wallet of owner function, find out what the token IDs are that the person with this address has minted on this contract. We want to take that information. We want to put them into a tickets retrieved object, and then we want to build a list of those SVGs into the page doing like ticketcollection map, right? Yeah.
00:31:50.442 - 00:32:58.834, Speaker A: So anytime that their wallet address changes or the chain ID changes or whether they've connected to the SDK or whether the component has rendered for the first time, those are all times when we want to rerun that. There's also another one here because if I don't switch address, like if I go mint another one right now, which we should go ahead and do since none of those other things are changing, how is it rerunning, right? So just know that it's going to rerun and another one's going to pop up here. It'll be our ticket right. We bought a VIP ticket for us and the person coming with us, they can have the general admission one, but as soon as we can use this button again, it'll be done minting. And we should see that pop up down here. And that's good UI, right? The reason I've done this down here is because it's a visual cue that the minting process has completed, where if they come to our site and there's other things that you can do on our site, at least there's a place where they can see what tickets they have for what date and all that kind of stuff. Cool.
00:32:58.834 - 00:33:32.346, Speaker A: So we've got two tickets for next year. How did that happen? It's because Mints has changed. So Mints M-I-N-T-S is a piece of state in our MetaMask Context provider, and it is just a number. It is a basic react counter. Right? It's no different. I literally used the same code you would use if you're going to do like, a demo counter and show people how to use react hooks. But yeah, it's a perfect way.
00:33:32.346 - 00:34:02.070, Speaker A: During our session, when they mint a ticket, we're going to increase that number. It's used for no other purpose than to rerender this page. If it changes, we rerender. So now that they've minted a second ticket, we want to rerender the page which will fire off that use effect hook again. It'll go out, check the contract, get the token IDs back, build a list of tickets, display them on the page, good to go. All right, I think you understand that now. I've explained it very well, hopefully.
00:34:02.070 - 00:34:44.946, Speaker A: All right, so now that we've done that, we've kind of tested out the MetaMask browser angle of all of this. We can do the MetaMask mobile one now. Let me go ahead and fire that up and why my MetaMask is firing up. Yeah, it does take a minute sometimes. Let's just kind of go through here and see if there's anything else that we kind of want to look at as far as the application. So we have this main TSX, and basically it's just using this app component. Nothing really crazy to see here, but if we go into app TSX, we will see that our entire application, basically our application is everything within this app container here.
00:34:44.946 - 00:35:38.930, Speaker A: So we have a navigation, a display, and a MetaMask error across the bottom. That's one more thing we can check out. But we have it all wrapped with this MetaMask Context provider. And again, our MetaMask Context provider is this huge 100 and 6200 line file which does all of the listening of the MetaMask events. So upon disconnect, upon connect, upon initialized, upon accounts changed, upon chain changed, it's running some various functions within this file to make sure that our state is always being updated as well. We share the client SDK out. So other files, any other component that's using this hook could access directly, like the terminate function on our SDK.
00:35:38.930 - 00:36:24.580, Speaker A: What else here? That's pretty much it. Here's the update wallet function. So here's kind of all of the RPC calls that are happening. If they change accounts, their balance changes or their chain ID changes, and then we store all of that within this wallet piece of state. And then you'll see that if we're in like a tickets page or let's go to the navigation page. So if we go to the navigation page we haven't reviewed this yet, we can see that the wallet is being imported from this use MetaMask hook. And since this navigation displays our address, it uses our switch network button, displays the balance, all of these kind of things.
00:36:24.580 - 00:36:54.826, Speaker A: Anytime that state changes, React is a one way data flow. And this is a global context provider or a global state provider. Anytime that state changes, it propagates down through any components that are subscribing to that data and it gets rerendered react magic. Right? That's why we all use React. I think that's why I was told to use it. I made up my mind on my own. I love react, but cool.
00:36:54.826 - 00:37:23.558, Speaker A: We will have more workshops on other, like Vue JS love Vue JS svelte. Or there's a few others that we probably want to create workshops around too. So look out for those. Yeah, let's let's make sure that we've done all of the checks that we have with our UI. So we change the chain, we switch chain, we've minted a ticket, we saw the NFTs show at the bottom of the page. Disconnecting. Yeah.
00:37:23.558 - 00:37:55.030, Speaker A: So we want to make sure that we can disconnect. So if we just come into here, by the way, there's a new MetaMask UI, the chain is up here, the accounts are here and the connections are here. So if we disconnect from this account, which we're not really on right now, well, let's do it the other way. If we disconnect from the one that is active, we should see our balance change up there. Great. And if we disconnect from this one, we should see the MetaMask connect button show back up. Perfect.
00:37:55.030 - 00:38:25.490, Speaker A: So our UI is behaving as we expect. Now, on the current version, zero four two of MetaMask SDK, which is the last version before it starts working the other way that I told you about. We actually have to go into here and hit Manage extensions and turn off our MetaMask. And this is kind of another reason why we did this too. Or any other wallet that tries to claim that it's MetaMask. Right. So that would be Coin 98.
00:38:25.490 - 00:38:48.350, Speaker A: That would be Rabbi wallet. Because our MetaMask button is always going to try to connect to those wallets if it sees the extension there. Our SDK is always going to try to connect to them again. That's not how it will work in the future. So I'm super happy about that. But now that we don't have the MetaMask browser extension enabled. We can click connect MetaMask.
00:38:48.350 - 00:39:06.302, Speaker A: It's funny because all the SDK does at this point right now. Really? Oops, I must not have disconnected. The last time was on MetaMask mobile. Let's just double check that I'm disconnected first. I'm glad that it did that. Yeah. So it just disconnected for me.
00:39:06.302 - 00:39:21.746, Speaker A: That's good. The SDK team is on top of their stuff here. Great. So let's do hit connect MetaMask. Now we'll see this. So it's like, hey, you don't have an extension, a MetaMask extension for desktop. You could install one if you want.
00:39:21.746 - 00:39:47.342, Speaker A: No, I got one on my phone. Let's go ahead and hit mobile here. Let's hit the scan button in the top right of the MetaMask app and scan it. And then you will see that I'm going to get right. There we go. Takes a second. And now you can see that I'm connected with a new wallet address.
00:39:47.342 - 00:40:15.660, Speaker A: I've got zero point. We're connected to linear here. Let's also change the chain in here, too. Polygon main net. See? And now I've changed the chain. It says switch chain up here. All right, there we go.
00:40:15.660 - 00:41:04.492, Speaker A: Awesome. Great work, SDK team. We want to mint a ticket now, right? So let's go ahead and do mint ticket. And we should see that pop up on our application here. Again, it takes a minute. There it is. We will scroll up, hit that transaction submitting takes a little bit longer on the browser with when you're connected to MetaMask Mobile, but that button will always stay disabled and then it also takes even another minute.
00:41:04.492 - 00:41:44.864, Speaker A: All right, so there's stuff going on behind the scenes when you're connected to MetaMask Mobile that just takes a little bit longer than with the browser extension. But hey, at least our users can connect and Mint these tickets. Let's go ahead and do one more so we can see that it's asking again. We'll hit confirm transaction submitting. All right. And again, we wanted to create a demo that has all of this functionality. You've got mint buttons.
00:41:44.864 - 00:42:39.590, Speaker A: They get disabled whenever the Minting is going on. Let's take a look at that real quick just to see on the tickets page. So when they Mint, until the transaction has completed, we're not going to set Is Minting back to false until until that's completed. So while is minting is true here's. Yeah, here's the Is Minting so it'll be disabled is if they don't have a wallet address, so they're not connected to MetaMask. Obviously, you can't click on a button and also if it is in the middle of Minting, we also want to disable Mint. So the disabled on the button is based off of this.
00:42:39.590 - 00:43:07.230, Speaker A: Cool. Is there anything else in here that we haven't gone over? Oh, MetaMask error. We didn't do MetaMask error yet. How can I trigger that with MetaMask mobile? I can trigger it with MetaMask mobile. So one thing I could do is I could go into my MetaMask Mobile, go into the Settings, go to Settings and Privacy, go to Manage Connections. I could do disconnect. All clear.
00:43:07.230 - 00:43:57.720, Speaker A: Cool. All right, let's just go ahead and give it a hard refresh and let's do Connect to MetaMask again. We will go to MetaMask Mobile and we will scan it. And so what we're going to do here is we're going to reject the transaction this time. So here, see how long it takes. Oh, come on. I just had a problem with MetaMask there.
00:43:57.720 - 00:44:17.550, Speaker A: Sometimes that happens. The demo gods are not working well with me today. Well, I know an easier way to do this. Every once in a while that's happened to me. I think the easier way to kind of demonstrate, oh, here we go. It came back. So I'm going to hit disconnect.
00:44:17.550 - 00:44:56.372, Speaker A: Let's try this again. Let's try this again. I didn't hit the QR code yet. All right, so here, I'm going to hit cancel instead of Connect. Well, that only disconnects. Okay, so when you cancel Connecting to MetaMask with the mobile, it doesn't throw an error, but we can generate an error. Oh, yeah, let's just go ahead and connect to let's just connect to the extension real quick.
00:44:56.372 - 00:45:26.696, Speaker A: This will be easier because I know a few ways I can do it with the extension. So we can do connect to MetaMask. Connect to MetaMask. Good. So we could do Cancel, right? User rejected the request. And then we could also connect and we could do Mint Ticket and we could do reject. Right? So action rejected.
00:45:26.696 - 00:45:48.148, Speaker A: And then if you just click on this, it'll dismiss it down here. So let's try that one more time. Let's hit reject. Let's go ahead and do an inspect on the page and we will see. We've got the app container, we've got Navigation, Display and Error. So make this a little bit smaller down here. Oops, not that small.
00:45:48.148 - 00:46:38.580, Speaker A: So you can see our entire application. See the Navigation display area and the error area, right. And then those kind of correspond with Navigation, Display and Error. And as well in our app file, Navigation Display and Error. And then in our CSS, we will see is this where we have it? Oh, no, we have it on the actual individual pages. We've updated this. So you'll have navigation, display CSS and error CSS.
00:46:38.580 - 00:47:01.040, Speaker A: Cool. I think that's it. We've connected with MetaMask mobile. We've switched change to ensure the switch chain button works. We've been to the ticket on mobile as well as the extension. We saw the ticket show up at the bottom of the page. We disconnected from MetaMask Mobile to ensure that we are prompted in the UI.
00:47:01.040 - 00:48:01.180, Speaker A: Again, this is just a demo application, but it covers a lot of the basics you would need to know in a real world Ralworld application. Real world DAP that uses MetaMask and gives your users the ability to connect to both browser and extension from MetaMask from their DAP, which up until MetaMask SDK was created, was not an easy task. The SDK is new and we want to hear what you think, what features you would like to see as well. We really want you to apply for the linear MetaMask SDK bounties at all the hackathons that we're having. We've got ETH globals. We've got virtual hackathons at MetaMask. And yeah, if you have any questions, again, we can go back to go back to our oh, is that really just going to keep trying to open up my MetaMask? Let's go to all right, so we can go back to we'll just go ahead and end on this page.
00:48:01.180 - 00:48:39.320, Speaker A: So again, here are the links to our presentation. Let's go ahead and do slideshow. And then of course, my name is Eric bashard, developer Relations Manager at MetaMask. Hit me up on Twitter. Telegram, GitHub lens or ENS. I guess with ENS not necessarily hit me up, but if you want to send me some Linear ETH or some real ETH, my username is HTP junkie on all of those and we finished this within the hour. You saw that didn't really take that long to set it all up.
00:48:39.320 - 00:49:19.554, Speaker A: This is a good application, especially if you're a react developer, to use as reference. If you use other libraries or frameworks, I think you still can use it as a reference. And yeah, my DMs are always open. This has been great to be able to show you guys this. Look out for the updated versions of MetaMask SDK, look out for Linear main net launch, and also for our react kits. And as well, as I'm sure as we go on in the future, we're going to have kits for other JavaScript frameworks as well. I should also mention that we have a MetaMask SDK for Unity.
00:49:19.554 - 00:50:08.086, Speaker A: We'll have one for unreal engine soon. You can use it with node JS, react native react, a regular plain JavaScript app, any other JavaScript framework that you want to. We can just use the regular NPM install at MetaMask SDK and then also iOS and Android soon. So no matter where you are, you're building a mobile app, you're building a web DAP, you're building a react native application, you're building a game in Unity, you're building a game in Unreal. You can use the MetaMask SDK. Make sure, by the way, on the DAP is the only place that connects to both extension and mobile because it's in a browser, right. Everywhere else, you're just going to get that QR code.
00:50:08.086 - 00:50:23.010, Speaker A: It's going to connect you to MetaMask mobile. So if you're in a game, it'll connect to this guy. Yeah. Thank you so much and I hope you enjoyed the workshop and hopefully I will see everyone out at some of the global events.
