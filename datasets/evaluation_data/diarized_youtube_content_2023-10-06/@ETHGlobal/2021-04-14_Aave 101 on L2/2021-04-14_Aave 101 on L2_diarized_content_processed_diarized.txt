00:00:00.170 - 00:00:29.154, Speaker A: You. Hey, everyone. Welcome to the Ave 101 for dev specifically focused on L2. So for those that have seen my previous talks and workshops, this will be pretty similar. But I'll mention a few things around L2 as well, specifically polygon market. So for those who don't know, Ave is what we call a liquidity protocol. So means on one side, we have depositors and depositors deposit into the protocol.
00:00:29.154 - 00:01:10.340, Speaker A: They interact with the contracts and they earn interest on the assets they deposit based on various protocol parameters. And on the other side, we have borrowers. And borrowers also interact with the Ave protocol. They earn a certain interest rate, and they can pay back those loans whenever they want. So that's the special thing about liquidity protocol, is that both depositors and borrowers will interact directly with smart contracts. So far, the entire protocol has more than $6 billion of market value, with a TVL hopping around just above $5.86 billion as of this morning.
00:01:10.340 - 00:02:12.054, Speaker A: And we recently released two new markets, the AMM market, which is an automated market maker market for balancer and uniswap tokens, LP tokens, which I'll go through in a second. And also we just released the polygon market. So the polygon, also known as Matic, is the L2, or layer two market that I mentioned. And so far, it's already amassed nearly $10 million of market size very quickly. So the main protocol features of Ave that you'll be able to play with as developers is earning, borrowing, credit, delegation, flash loans, and of course, the governance features. Most of these are available on L2, except for the governance features at the moment, but we'll go over them each individually. All right, so for the earning features of the protocol, if I was explaining to a five year old, I'd say that you let others borrow your money while you're not using it.
00:02:12.054 - 00:02:59.446, Speaker A: If I was explaining to a 15 year old, I'd say that you deposit your money and you earn immediate interest on that amount, and you can withdraw at any time. And in a DFI or crypto native way, what we actually do is we tokenize your deposit as a tokens, and the account holding those a tokens accrue interest based on the protocol parameters and demand, things like utilization or just the type of collateral that you've deposited. Also, a tokens are one to one pegged with the underlying. So that means if you deposit ten die, you receive ten Adai, and you can always redeem the ten Adai for ten die. So in graphical form, we have depositors. They deposit into the protocol, and they earn the interest in return. As a developer, this is sort of an example of code that you write.
00:02:59.446 - 00:03:50.450, Speaker A: Essentially, you say what sort of asset you want to deposit. The amount. Of course, in way units on behalf of Is, we'll go through that in the credit delegation part. But for now you'd always set it as message sender so yourself or the user that's sending, or depositing that amount and the referral code which is currently on hold as part of our referral program. But that should be reconfigured soon under the new decentralized governance. So the first step you take is you approve the Lending Pool to pull the amount or to deposit that amount from your wallet into the AVO protocol. Once you've made that standard approval call, then you'd call deposit on the Lending Pool.
00:03:50.450 - 00:04:36.790, Speaker A: You can see here it's called Lending Pool deposit asset Amount on behalf of and Referral Code. So the last line is the important bit, pretty simple, pretty standard. And you'll see that throughout the protocol that you will call all your functions essentially on the Lending Pool contract. Next, if you want to withdraw your A tokens so let's say you want to redeem the underlying ERC, 20 tokens here, the same sort of deal on the Lending Pool. You call withdrawal and then you input the asset, the amount that you want to withdraw and the two address. So usually that would be the person that's calling this withdrawal method. But you can also send it to someone else or different account, the UN minus one.
00:04:36.790 - 00:05:20.046, Speaker A: That's an old way in solidity to basically say everything or the highest number possible and it'll automatically withdraw whatever amount you've deposited in the latest solidity. I think it's something like type Max. But you can see in our documentation, we've updated that. So the next part is borrowing. So if I was explaining borrowing to a five year old, I'd say that you borrow money whenever you need it. If I was explaining to a 15 year old, I'd say that you borrow money and depending on how much you have deposited in the system, you can pay it back anytime. As your DFI users, we use your A tokens that you deposited as collateral and you can borrow any of the supported assets.
00:05:20.046 - 00:06:12.274, Speaker A: And remember that your borrowing power is per market. So if you deposited in the AMM market, you can borrow within the AMM market. And similarly with the Polygon l two market, if you deposit in the Polygon l Two market, you can only borrow assets in the Polygon l two market and you have either stable or variable interest rate. In a diagram form, you can see here on the right hand side, the borrower can take a loan. The important part here is that the depositor and borrower are the same person or the same address and they've deposited assets. Therefore they've created some collateral value in the protocol and as a result they can take out a loan by calling certain methods on the protocol. And those methods would simply be the last line here is important.
00:06:12.274 - 00:07:16.166, Speaker A: On the Lending Pool, you call borrow, insert the asset, the amount, the interest rate mode, so that's either stable debt or a variable debt. The stable debt is for most intensive purposes, it is stable at the time that you take that stable debt or take that stable interest rate debt. And the variable interest rate is sort of like a spot price for the interest rate and that can change depending on utilization, sometimes cheaper, sometimes costs more, and then of course referral code and on behalf of address as well. And the same thing, you can swap between a variable and interest rate debt depending on what debt you currently have. You simply call swap borrow rate mode on the lending pool, inserting the asset and also the interest rate mode. Super simple. One thing to keep in mind here when you do that is that if you've locked in a really good stable interest rate and then you switch to a variable interest rate, then you want to switch back to stable rate.
00:07:16.166 - 00:07:57.198, Speaker A: When you switch back to the stable rate that will use the current stable rate. So you may not get that really cool or really good stable rate that you maybe had locked in a long time ago. So just be aware of that, especially for your users in case they don't quite understand that concept yet. Okay, once you've borrowed, you can also repay back that loan at any time. Pretty simple. You call the standard approval method for the lending pool so it can pull those assets and then you call lending pool repay and you insert the asset amounts, interest rate mode and on behalf of address. As usual, the next feature would be credit delegation.
00:07:57.198 - 00:09:13.230, Speaker A: So explain to a five year old I'd say that I let other people borrow the money for a 15 year old It's deposit to earn on ave and you can earn extra interest or funds by managing your own loans to other people. And explain to a D five crypto person is that essentially you give others access to your credit line by depositing collateral or funds in the protocol. You approve a user or a certain group of users to draw a credit line and then you let them draw up to that credit amount whenever they want to. So in schematic form we have the depositor, let's say the credit delegator, they will deposit assets or funds into the protocol and they will earn the relevant interest. And then on the other side, the borrower who's a different person or different address will be able to take a loan in various assets that the delegator has enabled for them. So in code, how you do this, firstly, you have to decide what type of debt you want to delegate, let's say from the perspective of the delegator. So they will either want to delegate stable debt or variable debt.
00:09:13.230 - 00:10:11.326, Speaker A: So make sure that's quite obvious to the user and they have a choice to delegate a certain type of credit. So firstly you'd get the correct address of that debt token because every reserve asset has a different stable debt token and a different variable debt token address. So make sure you call that on the right asset. Next, let's say on this second to last line, let's say in this case we're doing a stable debt token. So on the stable debt token, you'd call it approved delegation and you'd insert the borrower and the amount that they're allowed to borrow. That's the maximum amount of credit they're allowed to borrow. And the same thing with a variable debt, you just call approved delegation again and setting the borrow borrower and the amount in way.
00:10:11.326 - 00:11:29.518, Speaker A: So the important part here is that you can delegate sort of like as much credit as you want to multiple users and those borrowers will only be able to borrow the credit amount up to the amount that you have delegated to them. But if your credit line has maxed out and then some of those users credit delegations may fail because maybe, let's say your delegation power is say 100 die and you've given four people 50 die to borrow and two people have maxed out on 50 die borrows, that means a total is 100 dies. That means you've maxed out the delegators borrow limit. Therefore the two other delegators or the two other people with credit lines, they won't be able to draw that credit. So that's something important to keep in mind and consider. All right, so for borrowing so this is on the perspective of the person or the account that has the delegated credit line. Is that similar to a normal borrower? They were just on the lending pool.
00:11:29.518 - 00:12:12.418, Speaker A: They would call borrow and they'll say the asset, the amount, interest rate mode, they have to make sure that they know which type of debt you delegated to them. Insert the referral code and the on behalf of. So here's where the on behalf of is quite important because they will be borrowing on behalf of the credit delegator. So the person that gave them that credit. So the next important step would be repaying. So similar to, I guess normal borrowers is that you'd call repay on the lending pool, insert the asset that you want to repay. This is the reserve asset they want to repay, the amount they want to repay, of course the interest rate mode.
00:12:12.418 - 00:13:10.040, Speaker A: So whether it's stable or variable interest rates and the delegator address, so that's the original person that delegated that credit line to that person. So anyone can really call this repay method to repay someone else's delegated debt. So you can probably create some interesting use cases from that gamify in some way. Maybe you can help other people pay back your debt and various other use cases like that. Okay, so next is flash loans. So if I was describing flash loans to a five year old, I'd say that it's free money you have to pay back immediately. If I was explaining to a banker type person or a traditional finance person, it's an unsecured, essentially an unsecured fixed term loan lasts about 14 to 15 seconds, which is the block time on Ethereum, with a low fixed interest rate of 0.9%.
00:13:10.040 - 00:14:04.330, Speaker A: The bank, in this case the bank would be Ethereum or the RB protocol. It can always collect at Expiry. So at the end of that block it always collects it, so there's really no risk. And on a technical DFI level it's an uncollateralized loan supplied by the protocol, where the amount borrowed plus a small fee needs to be repaid by the end of the transaction. And the reason why you'd want to do this is because you can execute nearly any code between the time that the loan is taken when it's repaid at the end of that same block, and if the loan is not repaid at the end of that block. The state of the chain just reverts to the previous state of before the flash loan was taken out. So that's quite special and specific to crypto.
00:14:04.330 - 00:15:03.354, Speaker A: It doesn't really have a rug or analogy to that. So to explain it in a schematic form, this is an example. It doesn't necessarily matter what's actually happening below the purple line, but the main thing is that everything above the purple line is what happens, definitely happens on chain. That's where it would cost a certain amount of gas or transaction fee for the user to call and then their smart contract would do various actions. And then if that smart contract at the end of those smart contract actions, the Flash loan is repaid, including the debt sorry, including the fee, flash loan fee. And then everything proceeds as normal, everyone's happy, there's no failed transaction. However, if the Flash loan and the fee is not repaid back by the end of the transaction, then everything below the purple line just reverts it's like it never happened on the blockchain.
00:15:03.354 - 00:16:01.898, Speaker A: And then the caller just incurs the gas costs for evaluating that code. So this is an example of what a Flash loan looks like on Ether scan. The important part here, not so much details, it's more that we've conducted multiple transactions or multiple state changes in one transaction and there wasn't any capital constraint on making this call. So here we're moving make a Dow vault, we're moving funds around, closing down a vault, paying back debt and things like that. And there's many different calls. And the main thing is that this whole happens in one transaction and the user didn't need to have this money to begin with to close down their debt and to move the debt to a different vault. Another example is what we call like a decentralized exchange arbitrage.
00:16:01.898 - 00:16:56.530, Speaker A: So essentially buying something for a low price somewhere and then selling for a higher price somewhere else. So normal arbitrage important thing here is that there's no capital constraints. So you could do an arbitrage for millions of dollars if you find that opportunity. And specifically for version two, we also have batch flash loans. What that means is that you can flash loan multiple assets at different debt types, interest rate mode types, or different amounts all in the one transaction, and then you repay them as necessary. So if you're developing with flash loans, it's a bit more involved. You need to have your own smart contract deployed.
00:16:56.530 - 00:17:37.710, Speaker A: And essentially what you need to do is you have your flash loan function, you set up all the relevant parameters for the flash loan. These are some example parameters. So here the receiver address is this contract. So that's the contract that will receive the flash loaned amount. We create an array of assets so that is all the addresses of the reserves that we want to slash loan. It would create the amounts of each asset. Of course, the asset at position zero indicates the amount at position zero in the amounts array and same with the modes array.
00:17:37.710 - 00:18:34.410, Speaker A: So the mode is whether you want to have no debt, so that's a normal flash loan or if you want to do a stable variable debt. And that's another new feature in V two and an interesting use case in that you can have debt incurring flash loans. So what that means is that you can flip around the traditional way of borrowing. So normally, as I've already explained, if you want to borrow, you need to deposit collateral in the system first and then you have some borrowing power. If you do debt incurring flash loans, it's reversed. So essentially you get to borrow the funds, do whatever you need to do, and then if you've deposited, let's say, some sort of profit or that same flash loan into the system, then that can serve as collateral. And the main use case that I've seen of debt income flash loans is essentially leverage.
00:18:34.410 - 00:19:42.262, Speaker A: So you flash loan some amount, then you redeposit it back in the system, then maybe you have some borrowing power and you can borrow some more and draw that credit line to essentially leverage long on some asset. And then you have the other standard parameters on behalf of parameters that you can pass into your own function that's in the next step and a referral code. And then so on the lending pool you call flash loan the flash loan function on the lending pool and then you pass in all those relevant parameters. What will happen is the lending pool will do some sanity checks and if everything checks out, it will then call the receiver address, which in this case is your smart contract, and it will execute the execute operation function which you see here, and with all those relevant parameters passed in. And once your contract reaches this line or this stage, it essentially means that it's good to go. You have the funds in your contract and then of course, you do whatever you need to do. And then the change in B two is that instead of you sending the funds back to the lending pool this time.
00:19:42.262 - 00:20:17.130, Speaker A: Now the lending pool will pull those transaction, will pull those amounts from your contract. So make sure that you have this little thing where essentially you approve the lending pool to pull those amounts. If you don't have that, the transaction will fail and everything will get reverted and it's a waste of time, and you pay gas for that. So make sure you have that. The other thing about V Two is that now you can use flash loans within the RV protocol itself. So V one, you couldn't do that, but now you can use flash loans throughout the RV protocol. All right, next big feature is governance.
00:20:17.130 - 00:21:05.902, Speaker A: So essentially it means for five year olds that it belongs to everyone. If I was explaining to a 15 year old, it means that anyone who owns Ave can help govern the protocol. And for a D five person, it's a path towards decentralization where token holders can vote and govern the protocol from asset listings to protocol upgrades. So essentially, everything will eventually be done via the governance process. So here's a little schematic of it. I won't go through every little bit, but the important part is that the Aave token holders, including just the raw Aave token holders, but also the token holders that have state into the safety module, which I'll go through, able to govern the protocol and vote on certain changes. And those changes go through certain processes, what we call a short time lock or long time lock.
00:21:05.902 - 00:21:57.346, Speaker A: You can have a look at the documentation on developers or slash governance to find out more about that process. But essentially, this is an example of the governance process. Charlie from the Curve team wanted the Curve token to be listed on Aave, so he made a proposal in the governance forums with the reasoning and some links. There's discussion on the forums. Then Julian, who's also part of the Curve team, also posted on Twitter to essentially ask Ave holders to delegate proposal power so they could make this proposal on chain. So they did this, and some Ave holders delegated the power. That's one feature of the Ave governance as well.
00:21:57.346 - 00:22:41.946, Speaker A: You can delegate just the proposal power and separately from delegation of the voting power. So eventually the Curve team were able to get enough proposal power to make proposal on chain. And then that's how the Curve token got listed on the protocol and screenshots a bit old, so there's only $8 million of liquidity. But yeah, now same thing has happened with the balancer token. And various other tokens are still going through this same process. And that process is essentially an off chain process on the governance forums. First the proposal creation on chain, and then the voting on chain, and then the proposal is eventually executed.
00:22:41.946 - 00:23:35.662, Speaker A: And that's when you're able to use it within the protocol. So if you're looking to hack on some governance related things. These are some examples of some features you could have a play around with. So, delegating, as I mentioned, voting, you can delegate voting Power and Proposition Power both together or separately. So Proposition Power is the power to submit proposals because there's a minimum threshold of, let's say, Aave Token proposition Power that you need. So to do, that super simple. Just on the Governance token, in this case the Ave Token, you just call delegate and you delegate to whatever address if you want to submit or make a vote, you just simply call submit votes on the Ave Governance contract and insert the pros ID.
00:23:35.662 - 00:24:24.370, Speaker A: And whether it's true or false for your supporting or not supporting it. And the next big part of the governance is the Staking safety module. Essentially what it means is that the safety module becomes a backstop for the protocol. So, like a protection fund for the protocol in case something happens to the protocol. Since releasing the safety module or the staking part of the safety module, it's amassed more than a billion dollars worth of just staked Ave Token. And also there's the balance to LP token that you can also stake, and that's more than $300 million. So it's quite a lot of funds that are being staked to help protect or form that backstop for the protocol.
00:24:24.370 - 00:25:20.062, Speaker A: So if you're looking to integrate this somehow, firstly what you do is you'd get whatever token that can be staked at the moment, it's Ave Token and a staked Ave token. You'd approve that token so that the lending pool can pull that token, and then on that token you'd call stake. Pretty simple, and then that will send it to the safety module and you'll start earning interest. When you want to claim the rewards or the interest rewards, you simply call claim rewards on the token. And then when you want to withdraw, firstly you have to call the cooldown. So the cooldown essentially activates the cooldown period, which at the moment is about ten days, well, exactly ten days. And then after the cooldown period has elapsed, then the user can redeem that, essentially take back their stake.
00:25:20.062 - 00:26:06.766, Speaker A: And they have currently a two day period to do that if they didn't redeem it within two days. And then they have to call cool down again and wait another ten days. So keep that in mind. So, just to wrap it up, I'll quickly go through some examples of some other hacks and projects that have come out of some hackathons that we really like and support, just to give you some idea of what could be created. So defysaver.com. Underlying a lot of their DeFi management tooling are Flash loans and they make heavy use of Aave flashlights specifically. So they're a really cool project and they support many different DeFi protocols besides.
00:26:06.766 - 00:27:04.020, Speaker A: Aave Bura Combo is a really cool app that makes it really easy for non technical users to utilize aave flash zones and they just connect, essentially Lego blocks together of various protocols to create transactions, which is pretty powerful. You earn finance in their version, one Alink Vault, they used the first version of Credit Delegation and that enabled their A Link Vault to essentially earn higher yield by taking advantage of Credit Delegation methods. And finally we have Avagotchi, which is really cool. They marry NFTs and DeFi so that you can have interest bearing NFTs within a game. And as you play the game, you're incurring interest. Sorry, you're earning interest. So your average has become more and more valuable, intrinsically valuable, which is really cool to see.
00:27:04.020 - 00:27:38.320, Speaker A: All right, so if you want to find out more, hit us up on Discord or on the Hackathon Discord. Also check out our Dev docs. They're pretty elaborate, so hopefully they answer most, if not all your questions. Also our Governance forum, and we have a ton of other docs, so our documentation portal where you can see links to governance and links to the Ergonomics risk and the other things. And that is all I have. Thanks for listening and good luck with your hacks. Thanks.
