00:00:04.710 - 00:03:53.710, Speaker A: It while we're waiting for everybody to join in. I know there's a lot of people on our Zoom chat, so we'd love to kind of hear where everybody's from. I'm in Toronto right now. We're extremely thankful because even our teams here that are presenting are in so many different time zones, so it should be fun to hear where everybody comes off. All right, so I'm going to make sure everything is prepped, and I will kick this off in two minutes. Good morning, good afternoon, and good evening, everybody, and welcome to the Hack Money finale. I am Karthik Tawar, one of the co founders of Ethg Global, and I want to thank all of you for being here.
00:03:53.710 - 00:05:06.500, Speaker A: We know there's a lot going on in this world, in the United States and elsewhere, and we hope that our community is staying safe while they fight for justice and fight for their voices to be heard. I really appreciate everybody that's joining us today for our finale, where we get to show off our demos, and we're super thankful for all of you to give us your time. For those of you who don't know what ETH Global is, it's an organization with a simple mission to onboard as many developers as possible into the Web three ecosystem. And five weeks ago, we kicked off our first ever online hackathon dedicated to the theme of DeFi called Hack Money. We wanted to do something simple. We wanted to bring in hundreds of ethereum developers into this space, give them four weeks to work on a project of their own choice, throw in some of the best companies that are pioneering this ecosystem and also offer them support for any type of problems that they may face to see if we could get something incredible out of the whole experience. And what we got at the end of the whole event was something incredible.
00:05:06.500 - 00:06:24.880, Speaker A: We had 354 hackers from 46 different countries in 18 different time zones work towards making a project that they felt really passionate about. For this hackathon, we had over 30 mentors who were there throughout the whole period helping our teams and developers with anything from design to technical help to product and marketing related feedback that would help them not only finish their projects, but also help them take it to the next level. And then an amazing set of 14 sponsors that not only dedicated their time and resources from the engineering and developer side to ensure that the teams get the support they need to integrate any of their SDKs into their projects, but also helped inspire all of our teams by doing talks, panels, AMAs and office hours to help them really understand the nuances of how everything works in this ecosystem and how they can extend it and really make it composable. And at the end of all this thing, we had 120 amazing D Five projects that came out of it. I mean, wow, this was absolutely incredible. It blew our minds. And we spent the last week looking over and checking out every single hack, which, by the way, you can also do by going to Hack ETHGlobal Co.
00:06:24.880 - 00:07:22.272, Speaker A: And I can tell you that the amount of creativity, the amazing technical engineering, the amount of problem solving that went into all this thing just really blew us away. These were some really high quality hacks that we saw at the end of the event. And when we say high quality, we really mean it. We're going to show our ten finalists today that highlight some of the really cool creative projects that have come out of hack money. And before I kind of get into who these ten teams are, I want to make sure that I point out that just because somebody's not on this list does not mean they were not good enough or did not make the cut because of some other factor. I want to especially thank some of our runner ups potion, insurance, my DFI, pi, blazer, telegram, totality genie hobby, hodlers, magic, bed, c channels and hell. These were some of the teams that almost made it to being on the top ten list.
00:07:22.272 - 00:08:37.592, Speaker A: And then the 101 remaining projects that not only continued to put in the same amount of work and effort into their hacks over the course of four weeks, but also, even beyond finding out that they were not on that final top ten list, that they continued to message us, saying that they wanted this thing for the experience to learn. And 70% of them indicated that they will continue working on this thing even though the hackathon is over. And this is kind of the excitement, the energy, and sort of the motivation that kind of inspires us to keep working on Eat Global and do a lot more of these events. And we're super thankful for everybody who made this possible because we're just hosting this thing on a zoom call and you're the ones who put in all the time and effort to make this possible and we can't be more thankful for you choosing us to be part of this. So with that, we have ten finalists here today on this call and they'll be demoing what each of them did. And without further ado, I'd like to call up these ten teams so we have Sunset supreme cover, atomic Ninja, one inch chi compose phi, umbra, D five, support for Vs. Code liquidify Godwood for test and OEM market.
00:08:37.592 - 00:09:37.240, Speaker A: These ten teams will be coming on and showing what they did. We'll do a live demo and if something goes wrong, we'll fall back to a pre recorded demo for this call. And as we looked at these ten teams, we realized that a lot of them were super obvious for what problem they were trying to solve. And after we kind of assessed this, we realized that these are the three big categories that all of these ten teams fall into. And these are sort of projects that help and want to help with mainstream adoption so we can get consumers to use not only just the tools, but also DFI in general and interact with it. Then we had a whole set of projects that wanted to make it easy for more developers to integrate these tools. And the last category is Financial Primitives, which really highlights all the composability and extensibility of the DeFi protocols in the Ethereum ecosystem that make it a lot more possible for everybody else to use and kind of get creative outcomes from combining and piecing together new protocols.
00:09:37.240 - 00:10:13.396, Speaker A: So we're going to highlight some of our favorites from each of these three categories and doing all the hard work today, which will be not only just understanding what these projects are trying to do, but also giving feedback. Commenting on what's happening in this space and how we can actually improve this thing as a collective ecosystem will be our six amazing judges. Andreas M. Antonopoulos, who is a renowned speaker and writer and a supporter of the Bitcoin and the Ethereum ecosystem. We have Ashley Schaff from Uniswap. We have Thomas Bertani from P Tokens. We have Robert Leshner from Compound Finance vitalik, Buterin from Ethereum Foundation.
00:10:13.396 - 00:10:53.220, Speaker A: And lastly, Stani Kolchov from Abe. They will be here throughout this call talking to all of us about what they think about all these projects and how we can improve this space as a whole. And with that, I'd like to call up the three teams that will go on today for the mainstream adoption section. And this will be Sunte Supreme Atomic Ninja and composefi we'll have three of them come on one and after another, and then we'll move on to A-Q-A section for all of our judges. So want to thank everybody again for giving us their time today. And with that, we'll kick off our very first demo for our finale. Please welcome Jeff from Sunset Supreme.
00:10:53.220 - 00:11:11.630, Speaker A: Hello. Good morning. Good afternoon. Good evening. My name is Jeff from Sunset Supreme. I am sharing my screen now. Sunset supreme is a spreadsheet blockchain plugin.
00:11:11.630 - 00:11:50.098, Speaker A: We're a team of engineers and interns from Tokyo, Japan. We all work at Curvegrid, which is a blockchain middleware company. We built a spreadsheet plugin that makes it easy to use the blockchain. We did it because we wanted to make DeFi accessible for absolutely anybody to hack on. But really, why a spreadsheet? Well, when we take a look at the number of blockchain engineers globally, we get about 7000. We have about 26 million software engineers, but we've got close to a billion spreadsheet users. We wanted to make it as easy to use the blockchain as entering a formula into a spreadsheet.
00:11:50.098 - 00:12:21.654, Speaker A: Let's go to a demo. So this is a spreadsheet. What are the kinds of things that you want to do with a spreadsheet? Often you want to draw graphs and charts and put things into tables and filter them and analyze them. What we've got here is a chart of ave's historical rates and indices for borrowing and lending. This data is actually coming live from the blockchain. Below this we've got a filtered table that's actually pulling events live. You can see this is 252.
00:12:21.654 - 00:12:59.074, Speaker A: This is about 20 minutes ago. It's early in the morning here we actually have a custom function that is pulling this data live from the blockchain. I'm going to use a helper menu here to actually refresh this in real time. You'll see that the cell gets refreshed and we've got the last 500 events coming back live from the blockchain and filling up our table. Again, we have, when the event was triggered, the various inputs and outputs. When we come back to our table in our chart now, we can start to apply spreadsheet magic to it. We can say compare what Bat and Dai look like.
00:12:59.074 - 00:13:44.158, Speaker A: And this gives, whether it's the project or financial analysts, a very familiar, fast, easy view into what's going on with a particular DeFi project. Let's take a look at chainlink next. So we've drawn this chart here, which is the aggregated FUSD price for chainlink over 20 rounds. So it's historical view. This is the kind of dashboard that's very easy to put together or chart that's very easy to put together in a spreadsheet, but can be very complex if you're trying to build something that's custom for your financial analysts or if you're a trader trying to look for arbitrage opportunities or to hedge against different kinds of strategies. Right away though, you can see all sorts of different things. You can see the dotted blue line, which is the median.
00:13:44.158 - 00:14:25.040, Speaker A: You can see potential outliers from some of the different oracles. Whether you want to look at this in a chart or in a table with some conditional formatting, it's very easy to do. I want to dive a little bit more into where this data is coming from. We're actually filtering the time series events through something that we call an event query, which basically takes this time series data and puts it into preprocesses it and puts it into a two dimensional chart. The other thing that we have the ability to do is to call a smart contract function directly. So I'm just going to copy this up here. You'll see that for the FUSD address, the aggregator contract, where we can look at either the latest round or we can look at the latest answer.
00:14:25.040 - 00:15:01.958, Speaker A: We'll just hit enter there. We're going to be calling this function directly from the blockchain and we get 234.94. And if we take a look at chainlink's dashboard, we see that same number. The last example I want to show is something that is a little more custom. Now we've looked right now at reading from the blockchain. What if we want to write to the blockchain? And it's fairly common that financial analysts or an accounting department may want to actually do invoice payments right within a spreadsheet. Here we've got an invoice for a client, we're selling them or we sold them widgets and T shirts.
00:15:01.958 - 00:15:41.970, Speaker A: Let's say 100 widgets and twelve T shirts. They could either pay us ETH directly scanning a QR code or pasting this address into their favorite wallet, or we can do this authorization directly within the spreadsheet. We fill in the from address, an optional separate signer. If we were to use compose a wrapped multisig transaction and the to address and the amount. Now what we're using here is actually an enterprise wallet that's plugged into the middleware. We could just as easily compose an unsigned transaction and paste it into our favorite wallet or geth console directly. I'm going to use my helper menu again here, post to the blockchain.
00:15:41.970 - 00:16:22.162, Speaker A: And once that completes, we're actually going to see our transaction fingerprint, which is a transaction hash, and we're going to see our receipt, which is actually coming back as an event from the blockchain. There's a lot more we can do with this. We've got a whole showcase of different functions that can be called composing unsigned transactions, getting back the different functions that you can call in a particular smart contract. So, again, thank you. The next steps for us are we going to be launching this in production later this month on Curvegrid.com. Thank you. Awesome.
00:16:22.162 - 00:16:54.400, Speaker A: Thank you so much. We'll keep the Q A to the end of all this thing. So what I'd like to do is make sure that Jeff and the Sunset team stay on this call and just keep your cameras off and we'll let the next team kind of go up and kick off their demo. So please welcome Fabio from Atomic Ninja. Hey. Hello all. Just a SEC, I'll share my screen here, so hey.
00:16:54.400 - 00:17:20.822, Speaker A: Well, hello all. We're team bossa and we're both from Brazil. There's JG carvalho in Rio and myself here, close to Sao Paulo. And we build for the hackathon, the Atomic Ninja. It's basically a transaction builder for financial hackers that don't want to learn how to code. So I'm switching to the live version. It's live already.
00:17:20.822 - 00:17:49.774, Speaker A: I encourage you guys to try it. It's at Atomic Ninja. So the tool is very simple. To your left you have the blocks you can use to build a transaction, and to your right you have your workspace. So basically I'll build something really simple here. Let's say I want to send ETH to a bunch of people or batching a transaction. Then you can simulate in this button here below and it will tell you if the transaction will succeed or not.
00:17:49.774 - 00:18:21.062, Speaker A: I'll force a failure here just so we see how it looks like. So I'll try to transfer ten die here to vitalik and it will fail because I don't have ten die at that point. So, as you see, the error brings die's own revert message. So we pass down the revert messages so you can see where your transaction is failing. Let me try something a little bit more complex. We'll do a flash loan now this is a tough one, right? People need to code to perform it. And this is a sandwich block.
00:18:21.062 - 00:18:48.066, Speaker A: It sort of works differently than the other ones. Basically the blocks that are within it, let me include one there are executed while you have the funds in hand. Then the block pays back the loan with fees here and whatever is below will just be executed sequentially. Let's do another use case here. We could maybe do an Arbitrage. We can still brag. Bragging is cool, we're very rich for a minute there.
00:18:48.066 - 00:19:15.386, Speaker A: We could swap ETH for die here and then maybe go to Balancer. And if the price is right, we could make some money. Maybe swapping back dai for ETH. If I press simulate here, this will probably fail. Yeah. And this is a revert message from balancer, right? So all the feedback you have from Simulating is the revert message. But there is a way to look at how this thing works.
00:19:15.386 - 00:19:42.514, Speaker A: On chain we created a revert block so you can pay gas in exchange to be able to look at the full trace of your transaction. So I'll switch to our docs. This is public too, so you guys can check there later on. This is a really complex transaction. It doesn't make any sense except for being very complex. And I'll just go through it really quickly here. We're basically starting a transaction here.
00:19:42.514 - 00:20:15.162, Speaker A: Then swapping three E for die on Balancer then sending ten die to Vitalik then flash swapping 100 die with that 100 die enhanced. We're also performing a flash loan of 7000 E. That's about one and a half million dollars. Then we brag we're rich here. We send a beer to the atomic ninja team. We buy pull together tickets and after the loans are done, we also supply half an ETH there. And then we force the reversion, right? We sent this transaction out and I'll show you guys the result on tenderly.
00:20:15.162 - 00:20:45.526, Speaker A: So this is the transaction. It of course failed. We spent one and a half million gas there and this is the full trace of the transaction. So basically it starts with the create two creating the user's proxy. Then it delegates call for logic and here we start actual execution. So basically here we have the balancer block. We're actually swapping ETH for WETH then approving the WETH transaction, then swapping there.
00:20:45.526 - 00:21:05.850, Speaker A: And if we keep on going, this can go on forever. It's a lot of stuff I recommend you guys. It's also linked in our docs there. But we see several of the usual suspects like compound interest and everything it interacted with. I'll go straight to the end. We have here lots of stuff from compound Ether. That was our last block.
00:21:05.850 - 00:21:30.630, Speaker A: And this is the revert we forced. In this transaction, we interacted with 27 verified contracts and more unverified ones. Tenderly is really good to show what actually happened there. So we had a lot of fun building this. We really liked it. Thanks a lot for it. Global and the Hackathon crew, it was amazing.
00:21:30.630 - 00:22:02.050, Speaker A: And we do intend to keep on building this. We first need to polish some things, some blocks need extending, some blocks are rough around the edges. And in the future, we also have a V two in mind where we'll have loops, conditions, variables, and also be able to look at the contract states at one point in time, like balances, token balances, and so on. Thank you. So. Oh, sorry, Kartik. Make sure to check it out on Atomic Ninja.
00:22:02.050 - 00:22:31.610, Speaker A: That's awesome. I can't wait for the block where Vitalik sends me Tanith back. So I think one thing that Fabio didn't tell everybody else is that partly the reason why they were motivated to do this thing was because they were also their first users. They mentioned that they had really good experience with smart contracts, but they were not good at front end development. And this also became a really good test suite for them to also try out and play with this space. So this was an amazing hack. Thank you so much, Fabio.
00:22:31.610 - 00:22:55.858, Speaker A: We'll kind of move on to our third demo for this category, and then we'll move into the Q A section. So please welcome Compose Phi as our third demo. Daniel, take it away. All right. Okay. Hello to everyone and thanks for having us here. We are compose phi team.
00:22:55.858 - 00:23:27.542, Speaker A: There is Bruno Alsani, who build the front end, and myself, Daniel Fernandez, who work at the Smart contract integrations. We are both from Buenos Aires, Argentina, and we work at Defier IO. So what is compose five? Compose Five is a learning tool where anyone can manually connect the DeFi Legos and compose more complex operations that they can share with whoever they want. Let's see what I mean with this. And let me share a demo. Let's go right away to demo. So I will create a graph.
00:23:27.542 - 00:23:53.630, Speaker A: So let's imagine I'm a teacher. I want to show my students how the DeFi Legos connect. And for example, I want to do an arbitrage between Cure and Uniswap, and I want to teach them that. So let's start also with the flash swap. Why not? So they can also learn about flash swap. We will launch and die. We will send them to Cure, where we will buy some USDC, very cheap USDC, hopefully.
00:23:53.630 - 00:24:56.134, Speaker A: And then we will send them back again to Uniswap, where we can sell them for ethers. And those ethers, we can trade it back for die, right? And here we have some sort of arbitrage. But because we are on Magnet and we for sure won't make any gains, I'm going to send some die that we are going to need to pay the flash of fees. So let's start with some ether, for example, wrap them, send them to Oasis or some die. Now we have die here and here we can connect both of them and send it to a splitter, right? One part of the splitter can go to pay back the flash swap and the rest they send it to compound to lend us die and I will send it to those CDI that we received to an address. So here we created a graph where we connected all the money. Legos, you can see it, right? We can deploy this graph and it will deploy smart contract on Mainnet and it will generate a URL like this.
00:24:56.134 - 00:25:54.490, Speaker A: We have a similar one deployed here and the cool thing is that you can share this URL with whoever you want and it loads everything from the blockchain and anyone can fill it and execute it. So it was like a DeFi snap if you want. So let's fill this one and execute it on Main. Let's do that. Let's start asking for some dies in the flash swap because I need to pay some fees, I will pay back 1000, but let's put some ethers here. Let's get the best order from Wasis, okay? And let's send everything to my address. I don't have any CDI here so this goes right, I should get some CDI there we go and it's ready to execute and I will go ahead and execute.
00:25:54.490 - 00:26:44.050, Speaker A: Okay, let me make sure it goes very fast. Okay? So while the transaction finished, let me continue with the presentation. So who is this for? Well, we want this for anyone who wants to teach, learn, play and use DeFi composability or make real complex operation and share them for others to execute. How do we make it where? There's one smart contract for each DeFi instrument that you saw and one smart contract for the graph that you make that it connects to each DeFi instrument. There is no central database, it all connects directly to the blockchain. So this can be deployed in IPFS if you want and it can scale it to as many DeFi instruments as you want because of the way we extracted them. So what's next? Okay, want to have of course more DeFi instruments and assets.
00:26:44.050 - 00:27:22.694, Speaker A: We want to add more documentation so everyone knows what's going on here and can use it to learn, right? Let's see if the transaction finished. Let's see. Okay, I have one transaction here that went right. Maybe the OSS didn't have enough liquidity. So here we have one that we already executed and we can see that we got some die from the flash swap. We send it to secure uniswap, then we return the flash swap. We pay for that and we got some CDI, so yeah, that's all for us.
00:27:22.694 - 00:27:48.030, Speaker A: We are live on Main it and you can trade in compose. Thank you. Awesome. Thank you so much, Daniel. Well, this has been a cool, amazing demo. And I think the coolest part of all this thing is that you can actually send somebody the contract link which lets you just put in the variable so you can also execute that transaction graph. So with this part we have the first three demos for our mainstream adoption category underway.
00:27:48.030 - 00:28:56.354, Speaker A: What I'd like to do is call up all of our teams and our judges to kind of turn their cameras on and unmute themselves and we'll move on to the Q A section for this category. So I'll kind of kick it off by saying if any of our judges have any questions they would like to clarify or ask the teams, we'll start with that and then we can move on to feedbacks and discussion about how we can actually improve these categories and get more mainstream users into DeFi. So the last two projects, you can think of both of them as being kind of like programming languages for creating transactions that go into DeFi systems. Have people or thought about the idea of building a kind of similar graphical programming language to build DeFi applications themselves. So to build things like uniswap things like these lending platforms and so forth. Nick yeah, that would be interesting. I think it's a good approach.
00:28:56.354 - 00:29:31.840, Speaker A: We can do it. I don't know if also the guys from Niche want transcript. Sure. Maybe it'll be nice for us to just kind of actually let's go this thing in order. So let's start off by saying from our judges side, let's see if you have any comments or questions for Sunset Supreme. How did you like the approach of spreadsheet being the go to audience? And I'll let Ashley take it from here as our hand.
00:29:32.450 - 00:29:52.310, Speaker B: Yeah, I just had a question, so I'm curious what the setup is like for your average user. Does it kind of come you have all these beautiful graphs and everything set up. Does it come with these tools out of the box or is it more like a tool that any user could sort of plug into their own Excel sheet?
00:29:52.730 - 00:30:34.706, Speaker A: Yeah. So once we launch in a couple of weeks, we're going to provide a demo spreadsheet with a series of views of a few popular DeFi projects and a tutorial to sort of walk you through how you might pull. Some of the common data out, whether you want to look at, let's say, how the amount of assets that are being borrowed in Aave or historical view in chainlink or something like that. Because obviously you can do very simple things with spreadsheets and you can do very complicated things with spreadsheets and it's the same on the blockchain side. And so I think the idea is to pull the two together through some examples and kind of helpful tutorials to get people going. Cool.
00:30:34.808 - 00:30:38.326, Speaker B: And you can actually initiate transactions from inside the sheet, correct?
00:30:38.508 - 00:30:53.660, Speaker A: Yeah, that's correct. So that requires either an enterprise wallet that's plugged in to the middleware or you can compose an unsigned transaction, either standard unsigned transaction or wrapped multi SIG transaction that you can take to your own wallet if you want.
00:30:54.110 - 00:30:56.170, Speaker B: Very cool. Good job.
00:30:56.320 - 00:31:52.400, Speaker A: Thank you. I have some questions for oh, sorry, robert, do you want to so I was going to say, first off, congrats to all three of these projects. All of them are extremely impressive, really blown away by all of them. Just to start with a Sunset question, so is the data that you're able to load coming from a hosted node? Are you able to query by historical blocks or are you really taking the current snapshot of the chain? How do you think about the data that you're accessing? Yeah, so we rely on the middleware, which has got an active state cache, so that's doing things like tracking chain reorgs and watching nodes going away and coming back. So that's why the data comes back so quickly. And yeah, we can do all that kind of filtering in terms of time block for various types of transaction hashes or events and that keeps the experience snappy. But upstream, ultimately, there are a series of nodes that we're basically rotating through to feed to keep that data 100% up to date.
00:31:52.400 - 00:33:12.182, Speaker A: I have a question for Sunset Supreme. I guess most of us had to build their own tools to query the blockchain and understand what's going on in variety of contexts. So something like this, I think, will be really very useful to speed up the process for most of us and also to enable non developers to start doing it, as you highlighted at the beginning of the presentation. Something I was wondering is, can you explain a bit better how the back end, the middleware works? Is it open source? Do you plan to make it open source at some point? And how easy is it for, say, a developer to add the support for another component, another primitive on the blockchain? Say we want to add support for, I don't know, compound that maybe you guys have not written in the middleware? Can anyone do it with a pull request or something like that so that anyone will be able to leverage it? Or is it something you guys need to do it on the middleware side? Sure. So the middleware is closed source at the moment. Eventually we'll open source different parts of it. There's a free trial on curbgrid.com
00:33:12.182 - 00:33:48.500, Speaker A: and paid plans as well. Basically, you upload either your smart contract source code or your Abi and bytecode and we compile it server side, or take the Abi and bytecode and we dynamically build rest API and event definition around whatever it is you've uploaded. So you take the series of compound smart contracts, we basically build all of that dynamically and give you that view. And then from the spreadsheet side of things, you're pulling that in right. So based on the Abi, you can call whatever functions, look at whatever events, do whatever kind of filtering you want to do. Cool. One last question on the spreadsheet side.
00:33:48.500 - 00:34:54.050, Speaker A: I'm not sure this is accurate, but I remember from some testing I did last year that it's not easy from a spreadsheet to update many values at the same time for, say, thousands of cells that you may have. Is this something that you had to somehow circumvent as a limitation or did you find any problem on that side? Say I have a huge spreadsheet with data that needs to change in almost real time, or every half an hour or something. Did you face any technical challenge there? Initially, no. Once we had more demo users using it, we started to really stress kind of the capabilities of what we had. And we're working on that. The spreadsheet is basically like each cell is a directed graph, right? So if you update sort of the top cell, it will filter down with all the changes. And the way that it works right now is if you were making smart contract calls, blockchain calls, you could have, let's say 400 or 1000 calls in parallel, hitting the middleware, hitting the blockchain.
00:34:54.050 - 00:35:28.754, Speaker A: And so that's a scaling issue on the middleware. But the smarter way to do that is to basically as you should be, rather than trying to read each function, call in parallel process the events. And that's really what you should be looking at for smart contract state anyway. So there's some part of it which is, yes, you can do it. And another part of it where we're going to need to guide our users to kind of make the right decision about how they pull the data out and analyze it in the spreadsheet. Raise his hand, please. Go ahead.
00:35:28.754 - 00:36:23.934, Speaker A: Hi. Yes. Question for sunset. Well, actually two questions. The first one is, when you think of spreadsheet users as your target audience, are you thinking of these users using this tool primarily as a user interface for awareness of what's happening in the markets on the blockchain and that data, or perhaps to even do the kind of macro programming? My experience is that people who really learn how to do spreadsheets then use spreadsheets to do everything and create some rather incredible systems inside spreadsheets. I've seen people simulate even 3D environments inside spreadsheets. So there's kind of that bridge where people start using it in weird ways.
00:36:23.934 - 00:37:37.354, Speaker A: The second thing is, I noticed when you first started the demo, the data itself was stale, but there was no indication, visual indication, that the data was stale. And so maybe this is more of not a question, but a consideration. Some way to visually indicate when data is stale and then prevent it from filtering down into further parts of the system where it may cause decisions to be made or people to assume that what they're looking at is real. But in fact, it isn't. Because if the data underlying it has not been refreshed, that's in many safety critical systems when data becomes stale on the back end, they turn off visual displays in order to prevent the user of such a system from losing situational awareness. For example, in aircraft, if your ultimate hasn't updated in a second, it will literally turn off so that you don't rely on it and think that you're looking at real information. I think that might be a very important part of what you're really, really amazing work.
00:37:37.354 - 00:38:30.574, Speaker A: Thank you. Yeah, thank you very much for the feedback and obviously to all the judges as well. So I think as any SaaS platform, our competition is not other SaaS platforms, it's really the spreadsheet, right? If somebody can do it in a spreadsheet, then why do they need whatever it is we're offering? And we fully expect those power users to be writing macros, to be writing their own JavaScript. And the plugin itself is open source and will continue to be open source, and we hope people do more amazing things with it, maybe plug other blockchain or DeFi projects into it and open to pull requests and things like that. I think on the stale data piece, that's either one of those like, it's a feature or it's a bug, right? It's a feature if you're trying to look at historical data and you don't want it to change. And it's certainly a bug. And potentially either a safety critical or even I could lose real money because I don't know that things are out of date.
00:38:30.574 - 00:38:54.870, Speaker A: Definitely a future enhancement for us. There's some limitations in Google Sheets specifically, which make real time data possible to do if you're a power user. Much more possible in Excel, which we don't yet support, but we will in the future. And yeah, maybe one of our power users will see that as something that's important to them and contribute to PR. That'd be really wonderful.
00:38:57.290 - 00:39:35.346, Speaker B: I had a question for Atomic, actually. So I noticed in your implementation of flash swaps from Uniswap, which thanks by the way for integrating us, very cool to see a UI for flash swaps. But I noticed that it only lets you pay back in the token that you borrowed, whereas the functionality in Uniswap V Two actually lets you pay back in either token on the pair that you borrowed from. So I was just more curious, did you guys not implement it that way because of complexity or because you maybe didn't know that it worked that way? I'm just kind of curious why you implemented it the way you did.
00:39:35.448 - 00:40:17.760, Speaker A: Yeah, we actually noticed that, but when designing the block well, first we were running to get as many blocks done as possible, and we tried to simplify some of the blocks. So some of the blocks do have a number of transactions within them, but we're trying to leave as few parameters as possible in the hands of the user. So the thing works in a sort of magical way. If we present ten fields to it, it sort of loses the simplicity and the toy like interface we love. But we could do another block that does that. It wouldn't be a problem, it would be just slightly wider there.
00:40:19.010 - 00:40:20.080, Speaker B: Cool, thanks.
00:40:21.490 - 00:41:28.070, Speaker A: Yeah, really good job. Atomic Ninja. I particularly liked how clean the user interface is. And to your comments you just made with Ashley's question, I couldn't agree more. There is every opportunity to express all of the richness of the back end and complexity of the back end. And that will lead you down a rabbit hole where what you're showing in the front, which is clean and simple, either becomes too complex and loses its purpose or there's all of these hidden knobs and dials that make it behave in unpredictable ways because you forgot to tweak a knob or check a box or something like that. So I think this balance is very difficult to strike and I think you did a really good job keeping it simple and focused on its real purpose as a teaching tool and not encouraging power users to take it further and further and further.
00:41:28.070 - 00:41:59.600, Speaker A: Yeah, that's just an acknowledgement. We forked Google's blockly to build that and we're not front end specialists as Kartek said. So we had a rough time there making it work and twisting know in our direction there. But the interface is just amazing. So it works really well. Basically congrats all those hacks and effort you guys have put in. It's just amazing.
00:41:59.600 - 00:43:21.110, Speaker A: I think for Jeff. Sunset supreme. One interesting question about in terms of validations, I saw that you guys have ability to have kind of like a read mode in the spreadsheet and then also you can edit. Have you thought more how to develop, for example? I could imagine, for example, companies using spreadsheets and you want to restrict different actions for different users and have privileges and also you want to one of the things, especially when we're dealing with financial products, is that have to always understand that we need to protect the end users as well from doing stupid things. Have you considered that aspect in terms of the spreadsheets? Yeah, definitely so, I mean the middleware has a full role based access control, but I think what's even more interesting is what Google has done, and probably Microsoft with Office 65 as well, is fully integrated. It with Google Compute platform, so you have full CI CD with GitHub actions, test suites with your spreadsheets and a centralized logging and debug platform as well. So it's no longer like lock sheet with the password don't tell anybody else.
00:43:21.110 - 00:44:02.646, Speaker A: I mean you've got full role based access control right within your spreadsheet. I think the right way to do is defense in depth and do that on the sheet with logging and auditing and controls and then also at the middleware level and of course the final word is the blockchain. Right. So you build the correct kind of ownable and permissions access into your smart contract as well. One of the areas where I could see spreadsheets like this being used in the longer term is just building kind of third party interfaces for DeFi projects. You could just build as a spreadsheet, like a form that just kind of automatically fills some things in, has some button that says send the transaction. You could build something like a uniswap UI inside of it.
00:44:02.646 - 00:44:58.822, Speaker A: And the spreadsheet format just kind of naturally means that the amount of stuff you have to do is smaller, which could even make it kind of be much easier to audit and so forth. Yeah, quick audit, quick time to market for the atomic ninja and compose one interesting aspect, especially when you have this kind of ability to compose things. First of all, the no code aspect is really amazing. And that's something that's pretty cool. Is this kind of like social aspect? Kind of like if you do something cool and you try different kinds of primitives or batches of transactions, being able to share that with your friends and having this kind of like social aspect, I think that might be pretty cool. I mean, people love to share what project they supported in Gitcoin and so forth. So that might be interesting aspect to have this kind of like a copy paste thing.
00:44:58.822 - 00:45:20.302, Speaker A: And I think was it basically compulsory. You kind of had the graph so you could actually even do that, that you can share them. If I correctly understood even. Daniel, you're muted. Yeah, so that's right. That was one of our main goal when we designed this. We wanted to share the graph that you made.
00:45:20.302 - 00:45:39.910, Speaker A: That's why you need first to deploy and then execute it. So yeah, you can share it to friends, students, whoever you want and they can execute if they want. It's like your own DeFi Snap if you want. Yes, you could share with anyone and anyone could execute.
00:45:41.130 - 00:45:48.630, Speaker B: Do you guys have plans to keep working on this after the hackathon? And if so, kind of what's next on your roadmap?
00:45:49.950 - 00:46:25.582, Speaker A: So yeah, we will add more things. Like in fact, we are more validations. We just run it again and it worked and it had to fail on the live show. We want to add more instrument, more assets, and more validations and mainly more documentation because we want people to have time, but we want to explain what each instrument does so you can read about that each piece, right? More like just documentation information. Yeah. Awesome. Well, thank you all three teams.
00:46:25.582 - 00:47:16.234, Speaker A: This has been an amazing kind of start from the Q A side in our first group's demo. And what we're going to do next is move on to our second segment, which is focusing on the developer tools in this space. So just to quickly kind of show the next two teams that are up and coming, we have DeFi Support for Vs code and Godmode for test. So with that, I'd like to call up our first demo DeFi Support for Vs code to come, share the screen and kick off the DevTools segment. Hey everyone, my name is Eric. I'm from Toronto and this is DeFi language support for Vs Code. The problem that exists today is that ides provide generic support for programming languages and libraries.
00:47:16.234 - 00:47:56.414, Speaker A: However, they don't provide any Ethereum domain specific knowledge outside of solidity. Developers typically need to use external tools to look up things such as Ethereum addresses, ENS names, token addresses, contract information, and so on. To solve this problem, I built a Vs code extension for writing DeFi support when writing node JS applications. This gives you live on chain data, live market data, and programming model support for common Ethereum DeFi scenarios. Let's take a look. The extension is available on the Vs code marketplace under the name Ethereum DeFi Language Support. You can simply install the extension and start using it right away in the Vs code settings.
00:47:56.414 - 00:48:33.142, Speaker A: You also have options to enter some API keys, and this would give you access to live data. However, these are optional. First, let's look at Ethereum addresses. Addresses, private keys, and ENS names are all detected automatically in your source code. Above each address and private key are links that you can click on to go to the Ether scan page for mainnet as well as for the different testnets. Private keys resolve to their public address so that you can easily verify that this is the address you want to use. There are diagnostics for checksums.
00:48:33.142 - 00:49:24.314, Speaker A: Invalid checksums show as errors, while nonchexum addresses show as warnings, allowing you to quick fix. To convert a non checksum address to a checksum address, you can hover over Ethereum addresses to view the live information. This includes Ether Balance, Token Balances, as well as and also notice the live market data, which includes the Ether and token prices and their total values. Now, let's talk about ENS names. There's two way resolution for ENS names, both from the address to the ENS name or from an ENS name to its address. You can also easily convert from one to the other. Now, let's look at some programming examples.
00:49:24.314 - 00:50:26.850, Speaker A: Press CTRL space to do Code complete where you have the option to insert various DeFi snippets or token addresses. Setting up a uniswap trade is as simple as inserting a snippet and doing code complete for the tokens you want to use. Notice the live market information for that token. You can also hover over an address to view its live market information as well. Now, let's look at how this helps with using the pTokens SDK to generate a bitcoin deposit address you can insert. The several snippets are available to help you with using the pTokens SDK for example, we insert the first Snippet to set up the SDK and notice the import gets automatically added for you. At the top, simply paste the private key you want to use and copy the Ethereum address shown.
00:50:26.850 - 00:51:03.482, Speaker A: Then we can insert the snippet for generating a deposit address to go from bitcoin to PPDC. Simply paste the Ethereum address that you've copied from above. And now you're well on your way to tokenizing bitcoin on Ethereum through P tokens. Now let's talk about how this was made. This solution uses a language server protocol. This is the industry standard for providing language features in text editors and Ides. The extension implements both a language server and language client which communicate with each other through this protocol.
00:51:03.482 - 00:51:40.300, Speaker A: This allows the solution to be easily extendable to any other IDE. Infura is used as a Web Three provider to provide live onchain data, and Amber Data is used for market data for Ethereum addresses and tokens. The next steps for this project are to support local development blockchains such as Ganesh. This would give you live data for addresses on your local chain, deeper programming model, support for contract interactions, and other DeFi SDKs. And finally, to get this into the hands of developers, to get feedback on it, and to make it as useful as possible for writing Ethereum DeFi applications. This is available right now on the Vs code Marketplace. Thank you for your time.
00:51:40.300 - 00:52:05.870, Speaker A: Awesome. Thank you so much, Eric. That definitely deserved a massive clap. And with that, we'll move on to our next demo with Marinette to showcase Godmode for test. And then we'll move into the Q A section for the DevTools category. Hi, hello. Can you hear me? Loud and clear so we can awesome.
00:52:05.870 - 00:52:45.980, Speaker A: Hi, this is Martin Lee from Warlock Canada, and my project Gotmo for Test allows developers to do anything on the local blockchain. So, as we know, millions of funds are being managed in DeFi. Naturally, we want a secure system, we want the system tested. However, this is challenging, especially for DeFi projects. And to start off, it is hard to replicate the mainnet structure of other projects on Ganache. And well, just imagine deploying the whole MakerDAO ecosystem so people use testnet to overcome this. However, it is also challenging because of DeFi composability.
00:52:45.980 - 00:53:23.564, Speaker A: Testnet only simulates Mainet structure within a project, but not between projects. And I quote this from our fellow hacker small run here on testnet, compound and Avi are using different Dymox. Another option, which is Ganache with the fork. Mainet could overcome this, but there are other issues, and this is mainly because code is law. You fork from a given state, then you have to follow all the rules. It will be hard, for example, to get some tokens, let alone creating different scenarios for testing. Again, here I'm quoting one of our mentors, Mariano, when he was answering a question on how to obtain dai.
00:53:23.564 - 00:54:19.320, Speaker A: You won't be able to mint directly. For Minting Dai, you need to go through the whole open vault lockup collateral Mint Dai cycle. And that's why better off just mocking an ERC 20. So this actually makes it very difficult to set up testing environments for D five projects that wants to build on other money Legos. Thus, what I built is to overcome this code is law issue in local blockchain godmo for test consists of three pieces. A modified Ganache core that can ignore blockchain law, a node JS library that integrates into Truffle framework directly and leverages solidity contracts as API, and a set of precompiled God mode contracts that works in forked mode like MakerDAO that mints die unisoft V two that enables the fee collection and compile that mints different C tokens. Right? Now, to Mint Dai, in one's Truffle test, the developer only needs to do this.
00:54:19.320 - 00:54:55.152, Speaker A: So it's pretty simple. And if you ever dreamt to become the Fed, all you need to do is add a for loop. Now, I also provide a generic function so that the developer only needs to do this. So the developer only needs to do this to code another solidity contract and no need to learn new stuff whatsoever. Now, let me quickly show you how this would look like. So, on the left here, I have a modified Ganache running. And on the right, I will be running a travel test suite.
00:54:55.152 - 00:55:33.740, Speaker A: I'll go to the test suite right now that we're running. So here I have a contract with Privilege Action and only owner can access it. The owner is set during deployment and there is no way of changing the owner in the trouble test environment. Here we have Alice and Bob. And Alice is the owner of the contract and she can access the Privilege Action. Now, under normal circumstances, bob cannot access the Privilege Action. However, with this Got mode enabled, bob can access the Privilege Action.
00:55:33.740 - 00:56:20.636, Speaker A: So here we execute the original contract as another instrumented contract. So what is this instrumented contract? We basically copy this original contract and create a new contract here, remove the only owner modifier and save. Well, you will also have to rename this one. Okay, so that's it. And we can even go further. We can actually create a brand new function and set Bob as the owner right here. Here we execute this original contract and as this set owner contract.
00:56:20.636 - 00:57:04.960, Speaker A: And invoke this set owner function, that doesn't exist at all. And what is this set owner contract? Same. We paste the original code and then we add the new function right here. That's it. And so in the test, I also have the previously mentioned contracts like Minting Die Arbitrarily, Minting C Token and these stuff. Let's take a look at the test we just ran right now. So all passed this means that Bob has successfully accessed the Privilege Action and even become the owner of the contract.
00:57:04.960 - 00:57:46.284, Speaker A: So for next steps, I would like to add more DeFi projects into the library and work with developers to figure out interesting scenarios that they may want to test. The project is available on GitHub and please feel free to reach out and see how God Mode can help test your project. I believe by facilitating developers'experience on testing, all users would benefit from safer and healthier ecosystem. Thank you. Awesome. Thank you so much Martinette for guiding one for DFI. So I'd like to call both of them to turn on their cameras and we'll go into our ten minute Q and A.
00:57:46.284 - 00:58:43.132, Speaker A: There's a lot of cool developer things here that we just saw. We were getting a lot of comments from our attendees on the chat about people loving the DevTools. So I'll see if any one of our judges wants to comment or ask questions and then we can have a discussion around how do we think about improving DevTools. So to start, amazing work both of these. I think devtooling is an important piece of the ecosystem to help everybody build faster, safer and better. The first question I have is for God Mode for test. Do you see this ever evolving from being a local testing framework and environment to something that could be used to deploy similar to like a Ganache fork entire testnet ecosystem where you could simulate this on chain as well as on local? Or do you really view this as being something for local development? Actually, so this is already using the fork option.
00:58:43.132 - 01:00:22.620, Speaker A: So I can already fork from the main net, right? Do you ever see it running in addition to locally on a testnet itself? Do you see an option to take from main net to local then back to a testnet to run something on chain? Or do you see this predominantly as like a local development tool? I do not know what you mean by going back to the testnet because we do right here is arbitrarily do we defy the blockchain law? So if we go back to the blockchain online then there will be some issues right there. But however, I do have some thoughts on having the main net forked data to keep coming in to keep simulating the blockchain locally. I think that will be useful for the research purposes. So for the God Mode work, that's very impressive. I can see immediate applications for security testing and for all kinds of things that are really not possible today. Kind of fuzzing attacks and introducing deliberate errors into the code to see how the rest of the system behaves. What you were doing in the demo kind of looked like monkey patching, I don't know if you're familiar with that term where you basically override a local function for testing purposes and change the interface or the functionality.
01:00:22.620 - 01:00:58.840, Speaker A: One of the things that I would encourage you to develop further is some way to collaborate by sharing the kind of libraries or templates that you're building in God mode so that others can use them too to test specific aspects of it, like a Snippets collection. I think it was very impressive. Nice work. Thank you. Yeah, that's actually one of the main steps. I tried to engage other hackers to ask them what kind of scenario that they wanted to test. Right.
01:00:58.840 - 01:02:06.530, Speaker A: And some things, because myself as an auditor at Quantstamp and I often see that we actually really want to test different scenarios. For example, like when Oracle was failing, what would happen to my project? I would really want to see that. Right. So right now it's really hard with this tool. Hopefully it will be better. Questions for the Visual Studio project, how does what you did compare to some of the previous Visual Studio ethereum integrations that have been done? Well, from what I've used the ethereum integrations for Vs code are mostly focused on the solidity side, whereas for my project is more focused on the application side outside of solidity, but interacting with the chain and interacting with contracts. I have a question about for Eric.
01:02:06.530 - 01:03:13.302, Speaker A: One thing is interesting, I think this is pretty awesome tool to speed up everything in terms of development. But in terms of where the data comes from, if I understood correctly, there's kind of like a dependencies on data providers. For example, there was infura and whatnot maybe this is a question for you. Will developers actually trust this tool in their development process? Especially like in DeFi where a lot of funds are at stake and basically the whole development process is kind of very mission critical. Right. For general ethereum integration is used as infuria as a web3 provider. For the future work, we can look at including other web3 providers or even a local node, something that you can connect to, that you trust or that you use.
01:03:13.302 - 01:03:56.374, Speaker A: Right. For the market data. It's using Amber data for the market information. And perhaps another extension could be looking at or another improvement can be looking at supporting other market provider providers as well. Cool, thanks. I guess maybe just to see if we can get some comments on the theme here. But obviously we saw on the mainstream category a lot of tools and applications trying to make it easy for everyday users, even if they're not strictly developers, to compose things and get the information they need to make a decision in front of them.
01:03:56.374 - 01:05:04.400, Speaker A: And I guess the same theme applies for developers because they can quickly understand what to do next and not get boggled down with the nuances of how something should be structured. What do you all think that could be also done better as a developer? Anywhere from feature requests to what are some of the other comments you think you get all the time in the space where developers can actually be the beneficiaries of a lot of the tooling here because we often spend too much time making things important for everyday users. But developers are also the ones powering all of this. And I'm not sure if this is more appropriate for this section or for the previous one, but one thing that I really want to see is a kind of more minimalistic programming language specifically designed toward making UIs for smart contracts. Yeah, right now you have kind of HTML and JavaScript and then on one side, and then you have the solidity code on the other side. And if the HTML and the JavaScript ends up just being kind of much larger than code for a UI, theoretically needs to be. Absolutely.
01:05:04.400 - 01:05:32.070, Speaker A: Any final comments from any of our judges? I really love the Vs code plugin. I'm not a Visual Studio user myself, but the fact that you can use this potentially with other integrated development environments is just really nice. And thank you for making it in such a way that it's open and reusable in other environments too. Very good work. Thank you. Thanks.
01:05:32.140 - 01:05:38.950, Speaker B: I would also just add that potentially Atomic and Composefi could use God mode.
01:05:41.690 - 01:06:24.966, Speaker A: Yeah, that would be awesome. No, that's perfect. So I guess one thing I should highlight for everybody on the live stream is that all of these projects are available for anybody to use right now. You can find them on GitHub or Mainet or in general their websites. And that's kind of what the amazing outcome of hack money is, that given we had four weeks to work on this, people really took the time to not only improve and make sure that the project they're working on was validated and useful, but also that it was ready for anybody to be used. So we'll be tweeting out all the links and we have done so for a lot of them, but you can check out all the things you've seen so far live and use it yourself. So with that, this is the halfway mark of our five demos out of the ten.
01:06:24.966 - 01:08:04.300, Speaker A: And what we'll be doing is we'll be giving our judges a ten minute break for them to just recoup and stretch. And in the meantime, we have a lot of our sponsors who offered a prize to the teams that were hacking on their protocols and we'll invite them for the next ten minutes to simply just talk about and share who won the prize that they offered and get to share their excitement with everybody else. So we'll see our judges in ten minutes. And with that, I'd like to take away by calling up Mark from Ave. Mark, if you can turn your camera on so it looks like Mark's computer just crashed and seems like this is a consistent theme with everybody upgrading Zoom today and yesterday. So what I'd like to do is if stani, if you would like to come and announce the projects, please turn your video on and we'll pull up the slides for your winners and you. Can tell everybody who won the Ave prize.
01:08:04.300 - 01:08:49.900, Speaker A: Yeah sure. Basically well Mark has the slides but I kind of know who won. There were so many hacks it was really hard to pick. There was total 46 incredible stuff being built and pretty much also kind of was nice to see that there is a lot of compatibility and bridging with other projects. So that was pretty awesome. Yeah and so I think three winners so we had basically first one was let's start with the price number three. So basically magic bet.
01:08:49.900 - 01:10:01.120, Speaker A: So that's basically no loss betting platform where you can bet on for example outcomes on presidential explorations stake funds and those will go to Ave earn interest and the winner or winners of the outcome will get the interest. So it's pretty cool stuff. Then we have yield Hero. So there was a lot of cool features that's number place number two and you could actually redirect interest pretty easy way in Ave and also it allowed you to swap a tokens between well actually you can provide liquidity in terms of a token swapping and also earning at the same time interest. So kind of like the same of curve model which is very efficient yield hack and that was actually very much into the yield hack theme that we were promoting. And then number one is learn and earn. So that's basically the first bot to incentivize education.
01:10:01.120 - 01:11:13.492, Speaker A: So basically you could create a course where participants join and they stake amounts of assets for example DA, USDC and basically they learn together. For example you could create a course learning solidity and end of the learning period. When the course ends there's a quiz and based on that and the outcome of for example chainlink Oracle there is results and the interest is basically distributed amongst the results. So that's pretty epic and I think that might even scale into the real world and might have kind of like this coinbase earn type of thing but really nice incentive and basic governments and companies can even sponsor to educate more people in different various like there's a long list a lot of cool hacks not just in Aave, but in overall. So I really want to thank everyone and also everyone who hacked on Ave will get the Ave socks that I promised. So those were pretty cool. And if you fill out a form on feedback you will get also the beanie.
01:11:13.492 - 01:11:43.056, Speaker A: So because it's summer we will call it Summer Beanie and it's pretty cool as well. Yeah and the winners as well there's the AI prizes but also you get a hacker pack which is pretty awesome as well. Thank you guys. Thank you so much. Tani and with that I'd like to call up Hayden from Uniswap. So Hayden, if you can turn on your video and tell us who won your prize it'll be awesome. Yes, thank you.
01:11:43.056 - 01:12:02.740, Speaker A: Hi, it's Hayden from Uniswap. We're really excited to be a part of hack money. We really like the kind of long form virtual hackathon. We think it worked out really well. We had over 46 teams building on top of Uniswap. We had a bounty for the best three projects building on top of Uniswap V Two. There were tons of really cool submissions.
01:12:02.740 - 01:12:45.520, Speaker A: It was a tough choice. But our first place winner was Licorice Gen, which built a platform for bootstrapping liquidity pools on Uniswap. It basically solves the problem where you want to create a liquidity pool, but you only have one of the two tokens and you always need 50 50 value in Uniswap. So with Licorice Gen, you basically create a custom bonding curve contract that will sell half of your tokens in some sort of custom price range until you have an equal amount of both and then it automatically feeds that into a uniswap pool. Super great project. We think they did a great job. Our second place winner is the Delp, which is a decentralized autonomous liquidity provider.
01:12:45.520 - 01:13:31.090, Speaker A: This project used on chain data to determine which pools were earning the most fees, which had the highest yield, and then would automatically allocate liquidity between pools and move them over if one pool was earning more in fees. Very cool. It kind of only used the growth in variant. Our third place winner is Candy Shop, which is essentially a uniswap router that gets priority arbitrage rights against trades that go through it. And then it rewards the users who trade through it by giving them sort of a tokenized lottery tickets that they can use to kind of share in a portion of the arbitrage profits. That's it. Awesome.
01:13:31.090 - 01:13:53.016, Speaker A: Aiden, thank you so much. And thanks again to Uniswap for being one of our sponsors. We saw a lot of amazing projects on V two, and I can't wait for these hackers to continue working on improving and adding more to you as well. Next up, I'd like to call up Adam from compound. So Adam, if you're there, please turn on your video and we'd love to learn who won the compound prize. Awesome. Thanks Cart.
01:13:53.016 - 01:14:27.780, Speaker A: Thanks Cart. I want to say thank you to everyone at ETH Global. That was awesome. Time had a lot of great questions asked in the discord and it was really exciting to be a part of this. So we had 27 compound submissions and all the projects were great. We had a really hard time picking winners for the compound $1,000 cUSDC prizes. We narrowed it down the best we could to two projects which will each be receiving 1000 cUSDC.
01:14:27.780 - 01:15:15.836, Speaker A: We chose the project C Channels, which was sort of like a bar tab payment system that uses compound for gaining interest and that was awesome. So congratulations to Alan. And our second winner of 1000 cUSDC is the Atomic Ninja project, which was sort of like a cool drag and drop editor for making single atomic transactions. We really love that one. So congratulations to Fabio and JG and yeah, thanks so much everyone for participating and making this awesome experience. Thank you so much. Adam next up, we have Chainlink and we'll have Patrick from Chainlink.
01:15:15.836 - 01:15:37.608, Speaker A: Tell us who won the chain link prize. Patrick, take it away. Hey, guys. Patrick from chainlink. Here the decentralized oracle solution. So we had about $5,000 to give out to three projects and again, we received so many fantastic projects and it was awesome to get so many. It was really difficult for us to choose just three.
01:15:37.608 - 01:16:05.104, Speaker A: But for our third place, we ended up also going with Candy Shop. Actually they are the efficiency first Dex aggregator. They ended up using a chainlink VRF to get verifiably random numbers for their lotteries, which is brand new. So that was awesome to see. Second place goes to DeFi Dollar. They are an interest earning stablecoin index and they were using Chainlink Oracles to get different currency pairs. So that was great to see as well.
01:16:05.104 - 01:16:33.210, Speaker A: First place goes to the no loss competitive platform of Genie, which was using Chainlink Oracles to get data on winners, which it was a blast to help set that up and build that. So congratulations to all the teams who won from Chainlink. And again, thank you. Thank you team. Thanks to all the projects. Like I said, it's been a ton of fun to work with everybody. We're excited to see where your projects go and we're always in the discord if you want to chat more.
01:16:33.210 - 01:16:44.172, Speaker A: Awesome. Thank you so much, Patrick. And next up, we have Hart from Uma. Hart, love to know who won the Uma prizes. Hey, Karjik. Thanks. Yeah.
01:16:44.172 - 01:17:16.740, Speaker A: Hi, everyone. Hart from Uma. Uma builds infrastructure for what we're calling priceless financial contracts. These are DeFi contracts that minimize Oracle usage to avoid many of the security and scalability issues that have plagued DFI. The hack money hackathon was actually perfectly timed with the release of our newest priceless synthetic token framework. So this is infrastructure to build ERC 20 tokens that can track the price of anything while minimizing the need for on chain price data. We had 2000 die prizes to award.
01:17:16.740 - 01:18:02.980, Speaker A: The first prize goes to Potion Insurance. Potion built a totally new way to buy put options using Uma priceless contracts and a liquidity pool design that was inspired by AMMS like balancer and uniswap. The financial engineering behind this I actually found to be truly mind blowing. It's something I've never seen or heard of before. You can buy a put option on any asset for any strike or any expiry directly from a liquidity pool and you could do this all pricelessly where there's no Oracle calls whatsoever. In the optimistic case, our second prize goes to mydefi Pi. Mydify Pi lets anyone create their own highly customized mutual fund with any combination of traditional or crypto assets.
01:18:02.980 - 01:18:26.296, Speaker A: The project did a really exceptional job of creating traditional assets using Uma. Smart contracts and then combining those assets with balancer pools and Aave lending. Lastly, I'd just like to thank the ETH global team. Jacob, Karthik, Trent, Josh, and the entire team. Guys, this has been an amazing event as usual, and it shows. Thanks. Thank you so much for your kind words, Hart.
01:18:26.296 - 01:18:44.884, Speaker A: And again, this would not be possible without all the hackers that are doing the hard work and all of the sponsors that made this possible from our end. So with that, I'd like to move to our next sponsor, and that is pTokens. So I'll let Alice take it from hello.
01:18:45.082 - 01:19:26.208, Speaker B: Hello, everyone. Here is Alice from pTokens. pTokens is a cross chain composability solution that enables the movement of any crypto asset into the Ethereum blockchain. So we have recently announced also our path to a community governed system, and you're all welcome to check it out at PDOT Network. We are glad to be a sponsor at this great hackathon that's helping to boost the growth of the ecosystem. So we are awarding three prizes today to pTokens backed prizes. We have for a grand total of 0.6
01:19:26.208 - 01:20:14.636, Speaker B: PBTC. That's approximately $6,000 at today's prices. Our first price is the monilego price that goes to My DeFi Pi. So this price awards the best P tokens based project leveraging compatibility for Bitcoin to be integrated with Ethereum Smart contract and Ethereum's DeFi. So my DeFi Pie did an amazing job on this. Our second prize is a cross chain prize that goes to BTC Tornado. So the prize awards the best project leveraging Ethereum to add features over the Bitcoin cryptocurrency.
01:20:14.636 - 01:20:50.028, Speaker B: So congratulations to BTC Tornado for an incredible job on these points. And finally, our second cross chain prize goes to adopt. So the team did some hard work at merging Bitcoins and Ethereum features. So congratulations guys. And Adopt team is our third winner. So finally, congratulations to all hackers. You all did a great job and it was really fun to see that.
01:20:50.028 - 01:20:53.710, Speaker B: And thank you also to the Etglobal team for organizing this.
01:20:55.520 - 01:21:18.532, Speaker A: Thank you so much, Alice. And next up, we have Brantley from ENS. Brentley, take it away. Yeah. Hey, I'm Brantley from the Ethereum Name Service team, and we had 26 projects submit for our five prizes of $150 each and great projects. Our winners are first, in no particular order, DFI support for Vs code, which you guys already saw presented. They're great.
01:21:18.532 - 01:21:36.196, Speaker A: A great IDE. You can switch between ENS names, ENS names, and Ethereum addresses very easily. They detect the ENS names. You can look up information. It's great. Second is NF wallets. It makes a wallet into a non fungible token.
01:21:36.196 - 01:22:01.170, Speaker A: And in addition to name resolution, it has ENS login, which is a cool project. You may be hearing about more in the next few months. Third is Umbra, which is they have private transactions and using ENS. Great. We're going to try to put this on main net, integrate this and get this used more. This is great. DFI seven, seven, seven.
01:22:01.170 - 01:22:35.420, Speaker A: A cool project that uses ENS names to interact with various DFI projects without the need of a front end. And lastly, Telegram Totality, which lets you interact with Ethereum DApps with a Telegram bot, including, like, renewing your ENS name. That was cool. So thanks, everybody. Thank you so much, Brandley. And next up, we have Scott from Portis and Shapeshift. I'll let Scott tell us who won the Portis award.
01:22:35.420 - 01:22:58.976, Speaker A: I can't start my video. It won't let me. We'll just make sure that there's no technical difficulty on our end. Let's see if this one works. There we go. All right. Scott from Portis.
01:22:58.976 - 01:23:46.996, Speaker A: Powered by shapeshift. We had over 37 projects building on Portis, which is an SDK web3 standard wallet, which is self custodian, really simple email and password, log on. Really excited for all the projects. It was extremely difficult to pick from the 37 that built with Bordes, we had 3000 USD, which will be given out in E. So our first place for 1500 is Bloom Finance. Bloom Finance built a gift card that grows. So you have any type of gift card and you upload the code, and then it increases in value over time, which as long as you have the gift card, that money continues to grow.
01:23:46.996 - 01:24:09.912, Speaker A: So congratulations, Bloom Finance. Second place is pensify. Pensify is a secure, non custodial, no loss, no risk pension fund built on the Ethereum blockchain. Really cool what they did. Really proud of them. Second place for 1000 USD in ETH. And then third place is Apollo.
01:24:09.912 - 01:24:37.696, Speaker A: They built an anti civil system for DApps, which in this ecosystem and globally, digital identity is a huge problem. So congratulations for building such a system that will help with civil attacks. Thank you again, ETH Global, for everything that you've done to make this possible. This was probably one of our favorite hackathons that we've ever been a part of. Appreciate it. Thank you so much, Scott. These are our supporters, winners.
01:24:37.696 - 01:25:07.176, Speaker A: And then next up, we have Balancer, and Fernando will take it from here. Hey, guys, this is Fernando from Balancer. So, Balancer is an automated market making protocol. It allows for the creation of flexible and self balancing pools. So they can have many tokens different weights, not necessarily 50 50. You can even choose the swap fee of your pool. So the two projects that we're awarding today are first, my Defy Pi.
01:25:07.176 - 01:25:39.668, Speaker A: It's the third prize. Jeff did an amazing job at connecting very interesting parts of DeFi. Yeah. So, Jeff, congrats for as. As we saw, you can create absurdly customizable mutual funds using Balancer, uma, and Aave. The second price is what the frac? So what the frac? Guys have a vision in the future that we're going to have NFTs that are very expensive. Imagine you have a house that you have an auction.
01:25:39.668 - 01:26:12.190, Speaker A: So what they did is they made it possible with using balustrate to fractionalize those shares of the NFT so that people can join forces and together participate in those auctions and bid for a house. So, yeah, great job with the frat guys. Wanted to thank you, Kardik, and the whole EF Global team for this amazing event. It was really cool. Thanks a lot. And all the hackers as well. Thank you so much for your kind words.
01:26:12.190 - 01:26:49.750, Speaker A: And again, it's a team effort, and I think that the rest of the global team deserves a lot more credit than the one guy on the Zoom call. So with that, I'd like to call up Matt from Saya, and Matt will let us know who won the SIA prize. Hi, I'm Matt from Saya. I'm one of the core developers on the team. We were super excited to see all the projects that worked on our 1 million cycoin challenge to build upon and integrate Skynet into their hacks. Skynet is a decentralized CDN and file sharing platform built for developers, so we're really excited to be a part of this ETH Global hackathon. Our first winner for 500,000 Psycoins was Atlas Library.
01:26:49.750 - 01:27:36.422, Speaker A: They built a decentralized library where the content is all stored on Skynet. It has the ability to support authors directly through the access of their books and their content. Our second winner of 500,000 Psyocoin was DFI BTC. They were able to create a composable bitcoin on Ethereum, and their hack was what we call a SCAP, which is an application hosted completely on Skynet, which is a great example of the power of Skynet and allowing for developers to host their application immediately without having to set up a website or any sort of server. So thanks again for everyone that participated, and thanks again to the ETH Global team for letting us be a part of it. Thank you so much, Matt. And with this, I'd like to call up our last sponsor that is awarding our prizes, and that is Laras from Opengsn.
01:27:36.422 - 01:28:20.150, Speaker A: Laras, take it away. Am I all right? So. Hi. I'm Raz Siri from the open GSN team. We gave prizes for integration with the new version of GSN, the Ethereum Cast station network. We had four prizes totaling $1,600, and it was a really hard choice between the twelve teams that use GSN to improve their UX. So with GSN, users of Adapt can interact with Ethereum without needing ETH for transaction fees, and this helps minimize onboarding and use UX friction.
01:28:20.150 - 01:29:28.640, Speaker A: So we had three $200 prizes for best use of GSN to improve DAP UX. And in no particular order, we are awarding the prizes to NF Wallet, which was a very cool, smart wallet that can be transferred as an NFT token. And it used the GSN to abstract away gas. BTC, Tornado is a bitcoin mixer based on tornado cash, and it uses the GSN to allow anonymous Ethless withdrawal. And last but not least, Umbra, which is a protocol for enabling stealth payments on Ethereum blockchain, and it uses GSN to allow private withdrawals without needing ETH. The winner for our $1,000 grand prize for best GSN paymaster is Meta, TX by Ronan Sanford. Ronand showcased a GSN paymaster that lets users pay for gas in dai by using die primitive and uniswap V Two.
01:29:28.640 - 01:30:34.174, Speaker A: So I'd like to thank again, the E Global team, for doing an amazing job putting together an event that catalyzed so many good teams to build on Ethereum. So thanks again. Thank you so much, Laura, and to all of our sponsors who not only just participated at this event, but also made sure that they put in the time and effort to have every team that's working on not only their projects, but anything on their list of projects to work on succeeded. We saw people answering support questions at odd times throughout the night. Given that this was a wide spectrum of time zones and ranges when people were working on things, it was really truly magical to see the amount of activity that the sponsors, our mentors, and everybody else in this ecosystem, including the hackers themselves, put in to make sure that everybody else is also able to finish their projects. So with that, I hope all of our judges are rested, and we have five more demos to go for finalists. And I'd like to start by introducing our last category, and that is Financial Primitives.
01:30:34.174 - 01:31:09.018, Speaker A: These are projects that anywhere from create new primitives in the DFI realm to extend existing protocols to offer new utilities and applications on top of it. And we'll have Oya Market, one inch Chi liquidify umbra and cover present. What they built. And without further ado, I'd like to call up Oya Market to share the video demo for their hack. So please welcome them on the live stream. Hey, everybody. We're Team Oya, and we built something to make it accessible and mainstream to shop online with crypto wallets and save sellers a ton of fees.
01:31:09.018 - 01:31:11.280, Speaker A: We're from the San Francisco Bay area.
01:31:15.190 - 01:31:49.274, Speaker B: We're demoing the high fidelity design protocol, architecture, and smart contract code for Oya, a decentralized e commerce protocol. Our team members are iwu Vanna Shutt and John Shut. Denise Annie Esley is one of Oya's users. She's a programmer and make jewelry that she sells online. She sells on centralized marketplaces and has her own store using Shopify. She has thousands of dollars of sales per month. But after transaction fees, referral fees, credit card fees, payment, processor fees, monthly membership, listing fees, mandatory advertising fees, closing fees, and commission, her cuts only half that amount.
01:31:49.274 - 01:32:11.966, Speaker B: She isn't too happy about these fees. This is where Oya protocol comes in. Oya slashes fees by eliminating middlemen managing orders and payments through smart contract. Let's wash an order. The buyer submits order details and payment through Oya. This creates an order smart contract that holds the money and manages the order. The seller receives a notification, accepts the order, and ships the item to the buyer.
01:32:11.966 - 01:32:43.450, Speaker B: The seller uploads tracking information to the order smart contract. This allows the smart contract to confirm delivery with the chainlink Oracle later on, if needed, the buyer also get tracking information. The item is received by the buyer who makes sure everything is okay and then accepts the item. The smart contract instantly pays the seller and reports a successful transaction to the Oya protocol. Both the buyer and seller earn Oya token, which give them voting power over future changes to the protocol. This way, there is no middlemen taking a cut. The buyers and sellers own the protocol directly.
01:32:43.450 - 01:33:07.578, Speaker B: Thanks to Oya, Denise has lower fees and more control. She is very happy now to add Oya to her own store. Denise installs a oya shopify plugin. She also installs a Oya Chrome extension to make it easy to manage her orders. Denise's customers see Oya as a payment option during checkout alongside more expensive centralized payment methods. The buyer can use ETH or any popular ERC 20 token in their wallet to pay. Oya automatically converts to the seller's preferred token.
01:33:07.578 - 01:33:34.106, Speaker B: Using uniswap. Oya also uses Opengsn to pay the buyer's gas fees. The costs are ultimately paid by the seller. In most cases, the total gas fees are less expensive than traditional e commerce fees. For higher price items, the savings are enormous. Since Denise installed the Oya plugin, her products can be automatically imported into Oya market alongside many other sellers using the Oya protocol. Oya market is a crypto native marketplace, so we see products price and tokens.
01:33:34.106 - 01:33:55.880, Speaker B: And customers don't have to log in. They just use their Ethereum wallet. Customers enter shipping information like any other e commerce site. The checkout experience is the same as choosing Oya as a payment option on Denise's site. Both sites use the Oya protocol smart contracts on the backend. The low fees and cool features are the same. Nice.
01:33:55.880 - 01:34:27.978, Speaker B: Denise can see a new order notification in her Oya browser extension. She clicks the extension to open the seller dashboard where she can manage all her Oya orders from any marketplace. She can upload tracking information for new orders and see the status of her existing orders. She can also claim funds from orders that have been delivered after a wait period where the buyer can initiate a return. Let's watch a demo of the first building blocks of the Oya protocol. Buyers can create orders through the controller contract. Oya token holders can vote to update or replace the controller.
01:34:27.978 - 01:34:55.686, Speaker B: Buyers and sellers interact directly with order contracts. Either party can cancel an order before it ships. The smart contract automatically refunds the buyer. Sellers can upload shipping information and claim funds automatically. If the delivery is confirmed and a wait period has passed, buyers can mark an item as accepted and the smart contract will automatically pay the seller. The buyer and the seller earn Oya token rewards for successful orders. If an order goes bad and the buyer and the seller can't work it out themselves.
01:34:55.686 - 01:35:15.040, Speaker B: They can call in the arbitrator to decide who gets that money. Oya tokens are earned by using the protocol not bought in a token cell. Token holders make the roles which evolve organically over time. We have lots of ideas for the future, including earning interest on money in escrow. Check us out at Oya market.
01:35:17.810 - 01:35:33.570, Speaker A: So we have a lot of stuff to do. We're going to keep working on this. On the smart contract side, the next step is going to be figuring out that seller bank that pays for gas fees and returns and how much they need to deposit in there. You could tell a little bit more about what we're doing on the front end and Vanessa on product and overall vision.
01:35:33.910 - 01:36:20.980, Speaker B: Yeah, so for the front end side, we want to refine our design based on the user feedback and then complete our Web three interface for our buyer checkoff flow and the Seller Order Management dashboard we already both showed in the video. And we are continuing our user engagement through seller surveys up on our current website, which we have been conducting over the last 30 days, which has built the product to adapt to the user's wants and their needs. And the name Oya comes from a powerful yoruba orisha who commands the winds and change. And we try to carry that same power and the energy in everything that we are doing. Thank you.
01:36:22.550 - 01:36:57.054, Speaker A: Thank you so much. This was an amazing demo and I'm really glad to hear that you'll continue working on this and using user feedback to improve it. With that, I'd like to move on to our next demo, and that is the Cheat token from the 1inchh team. So I'll let them take it away with an amazing zoom background. Hi everyone. I was muted. We are very happy to be here.
01:36:57.054 - 01:37:31.990, Speaker A: My name is Sergey from Germany. Stutgart, I'm from the team 1inchh and my colleague Anton Bukov from Moscow. We have built on this hackathon actually two things. The first one is the Qi gas token. By One inch they create two powered gas token. The Qi Gas Token works by taking advantage of the store refund in ethereum. It's actually based on the original GST Two token but on steroids more optimized version.
01:37:31.990 - 01:38:53.282, Speaker A: So YG and not original GST Two. Chigas Token is around five percentage is more efficient by using create two and subcontract address discovery with just a few lines of code. And Chigas Token is built on open Zeppelin RC 20 token contract and is fully compliant with the your C 20 standard. The second thing what we have built is Deployer ETH, just a small smart contract which allows everyone, every developer deploy own smart contracts and pay only the half of the cost of the transaction cost. The problem we see last time gas price around 50K, maybe sometimes more, sometimes a little bit less, but still it's a lot of money and such teams like one inch, we have to deploy a lot. We deploy almost every day a new helper and try to improve the D five space and it costs a lot. And for example, if you have 5 million big smart contract, 5 million of gas, you pay with 50 way around $60 and it's a lot.
01:38:53.282 - 01:40:27.482, Speaker A: And if we can reduce it by the half, I would say it's a hack EVM hack how to save on huge gas costs you have to mint the cheat token while the gas price is low to leverage it on an EVM level by writing to the storage. Then you have to burn a cheat token instead of the transaction during high gas price to get the gas refined up to 43 percentages by raising storage and how to use the Deployer TTH contract, you have to approve the Chi or original GST two token to the Deployer ETH smart contract. Then you have to take your binary from your smart contract which you are planning to deploy and you have to pass the data simply in a function in a Deployer to Deploy or GST Deployer for example, and after the transaction is mined, you get up to 43 percentages of gas refunds. So I'm going to switch to the live demo. First of all you need to mint the cheat token. Of course you can do it by yourself by just executing the function, mint function and a smart contract. But we decide to integrate the ChiMin directly into one inch.
01:40:27.482 - 01:41:27.598, Speaker A: So here on the left side you have to choose ETH. For example here zero zero one, it's around $2 and then you can mint on the current gas price around twenty five K. Of course it makes sense to mint it around ten right now, maybe five, depends if you can get it mined. So you have just to swap, verify and also here accept on the MetaMask one SEC it's loading. Okay, so you have to accept and then we send the transaction to the main net and the transactions looks like that it's already mined transaction. So I minted here five cheat token. And what we do, we create your smart contracts under the hood to just writing in the storage.
01:41:27.598 - 01:42:26.360, Speaker A: So of course you can trade the Chi token on one inch. You can just swap for example Qi to USDT. We use multipuffs like by swapping to TBTC to USDT for example, and of course you can set a limit order and just mint right now and sell it for double of price. Of course you can also provide liquidity here for example new unions for V two and earn also on the trades on trading the Chigas token has already around 30,000 of cheat token already minted. And this is our source code, it's readable on ether scan. And what we did, we just optimized here some functions for a mint. We reduced the size of the address and we reduced the logic to find their sub smart contract address.
01:42:26.360 - 01:43:15.970, Speaker A: Create two helped a lot. The deployer contract use a small modifier which can also be integrated everywhere in any contract and it's just collect gas at the beginning of the transaction and at the end and burn from your wallet. So to deploy through deployer, you have just called this function to deploy and put your contract data here and that's actually it here and the deployment looks like that. So you see we self destruct a lot of smart contracts. We erase their storage and get the refund. And here in this case, we have around 50 percentages. It's actually a little bit less because you sent in MetaMask little with overhead.
01:43:15.970 - 01:44:05.074, Speaker A: So back to the presentation and what is next. So how already showed it's already in the main net and you can also already mint it on One inch exchange. We plan to offer a burning from user wallet for each transaction on one inch very soon. So everyone can just provide approval to us and they will save on each transaction on one inch. And we mentioned also cheese support and other projects like avi compounds and taggings and more. Also all the money Legos we have seen today. I would wish to see such a sandwich module where you can just put this discounter cheat discounter to reduce the gas cost for the user.
01:44:05.074 - 01:44:35.294, Speaker A: Also it's very important for the arbitrage trades to reduce the gas costs and be very efficient. And if you like to hear why we called it Qi, feel free to ask in QA and I will explain. Thank you very much. He was the one inch team. Keep swapping. Thank you so much, sir. Again, the One inch team I think we're going to see and we've seen a lot of yield hacking here, but combining yield hacking with EVM hacking I think is the real win.
01:44:35.294 - 01:45:05.878, Speaker A: So I can't wait for the judges to dig into how the internals of GToken are set up. With that, we'll move on to our third demo and that is Team liquidify. So I'll let liquidify take it and start with their demo. Jeff, go for it. Hi, guys. I'm Roscoe, and I will be presenting for liquid DeFi. All right, so like I said, I'm Roscoe.
01:45:05.878 - 01:45:54.306, Speaker A: I'll be presenting for Liquid DeFi, which is democratizing DeFi liquidations. So whenever you're taking out a loan on a DeFi platform such as Aave, basically you're putting up collateral that's worth more than the loan than what you're taking out. But then when the value of your collateral drops in the future, your loan can be liquidated. And what that means is that basically someone else buys the collateral off the system and they're incentivized to do so through fees. So whenever they do so, those people make a little bit of money. And this system is what keeps these DeFi platforms solvent and keeps the user funds under Safe. But liquidation bots are quite difficult to set up and run, which means that the yields that liquidations offer are inaccessible to many regular users of DeFi applications.
01:45:54.306 - 01:46:37.990, Speaker A: And it also means that the systems that rely on these liquidations are a bit less safe than they could be, which is something we saw, for example, on Black Thursday earlier this year. So our solution to this problem is to democratize liquidations. And we're doing that by allowing people to pool their funds in smart contracts. And then these funds are used by our liquidation bots, while the profits of these liquidations are shared among investors. This is our team. Jeff and Sarab did most of the UI myself, sarab and Snake worked on the smart contracts. Snake also did all of our bots work, and Kevin is the man that brought us all together, did all the research and kept us accountable.
01:46:37.990 - 01:47:39.130, Speaker A: So let's go into our demo. We built this dashboard that shows us our share of this pool owner, the pool ownership, and that's represented in our token sharp Dai, which represents a value in Dai. So let's try to deposit some more Dai into this pool. And then basically what is going to happen in the background is that our contract is going to convert this deposit of Dai into Adai, so that we're basically stacking ave's Adai yields on top of the yields of our platform. So we're doubling up on the yields that our users are going to get. So what we're going to see is our share of the pool ownership is going to increase and our amount of shark die, and therefore also the value that this represents. So all these values are going to increase when the transaction is mined.
01:47:39.130 - 01:49:07.666, Speaker A: And so then, of course, in the background, liquidations are happening. So here we saw just the values increase, and in the background, liquidations are happening. And we can't really show that live on testnet right now, because there's no real liquidations. But what we can do is we can simulate a liquidation happening by basically just simulating the end result of the liquidation, which is our pool making money. So what we're going to do is we're going to send some Adai to this address, which represents a successful liquidation. And so what we're going to see then in the UI is that our share of the pool ownership is going to stay exactly the same, and the amount of sharp die that we have is also going to stay exactly the same. But what we are going to see is that our value in die is going to increase.
01:49:07.666 - 01:49:54.310, Speaker A: So we're going to send 200 Adai. So it's quite a big amount. So we should really see something substantial change in this value in die over there. And so how these liquidations work is that basically our liquidation bot is calling a function on our smart contracts, which then uses the funds in the pool to call the liquidate function on Ave. And as we discussed before, basically the liquidation, I think we just saw the value change there. So basically, the liquidations are us buying collateral off of Ave. So then we get some other token back, and we swap that immediately through uniswap so that we have Dai in the pool again, which we convert to Adai.
01:49:54.310 - 01:50:23.690, Speaker A: And the nice thing is that we have checks in our contract that make sure that the pool always must make a profit. So there's no way to do any unprofitable liquidations for our bots or to scam the pool or something. So that's our project. In the future, we want to launch on mainnets. We also want to support more liquidation platforms than just Aave and just make general improvements to our liquidation bot code. Thank you for your time. Thank you so much, Roscoe.
01:50:23.690 - 01:51:07.706, Speaker A: This has been awesome. So we got two more demos to go, and then we'll move into the Q A section. So with that, I'd like to call up Ben and Matt from Umbra to showcase their amazing hack. Okay, so we are Team Umbra, and this is our Hack Money 2020 submission. My co conspirator is Matt Solomon from Los Angeles, who built the front end and the JavaScript Library. I'm Ben di Francesco from Philadelphia, and I worked on the architecture and wrote the Smart contracts. We built a protocol for privacy preserving stealth payments on the Ethereum blockchain inspired by this March 31 Tweet from Vitalik.
01:51:07.706 - 01:51:51.020, Speaker A: Butyrin at a high level, umbra enables transactions where the receiver's identity is known only to the sender and the receiver. It does this by allowing users to publish a public key to an ENS text record, which is then used by Senders to generate new addresses that only the receiver can control. Let's do a quick demo. For the demo, I'll first play and narrate a video showing the Umbra setup process. Afterwards, I'll do a live demonstration of sending and receiving a payment. So here's our setup video. Now, this is a one time setup process that the users must do before they can send or receive their first payment.
01:51:51.020 - 01:52:35.786, Speaker A: They already own the ENS name Umbrademo ETH, and if they didn't, they would see instructions on how to register one. So next, the user is setting a password, and this password is used to encrypt the private key that is generated and store it locally in their browser's local storage. In the next step, the user is prompted to backup that encrypted key file. So finally, the user is going to sign a message with their new public private key pair and publish that signature as an ENS text record payment. Senders will use this record to recover the recipient's public key and generate new stealth addresses. So now I'll switch over to do a live demo of sending and receiving a payment, and my teammate Matt will narrate what I'm doing. All right.
01:52:35.786 - 01:53:06.414, Speaker A: Thank you, Ben. So, as you can see, we have two windows open. The right is the receiver and the left is the sender. So if we take a look at the right hand window, you'll see our ENS domain. And towards the bottom there, you can see the signature that they included as a text record during that setup process. So that's what the sender will use to recover their public key and generate the stealth address. So if we switch back to the left, this is our sender and we'll now send some funds.
01:53:06.414 - 01:53:39.918, Speaker A: So here we type in that ENS domain and we validate that it is properly configured with a signature. We select the token or ETH that we want to send and specify the amount. And right now we're just showing two tokens. But really you can support any ERC, 20. And so now we send that die and confirm the transaction. It's worth noting that you don't have to send to an ENS address. You could send to a regular address a transaction hash or a public key directly to increase the size of the anonymity set.
01:53:39.918 - 01:54:10.294, Speaker A: But for convenience and user experience, we're doing the ENS address here. And once that processes, there we go, we can log in as the receiver. So we enter our password to decrypt that private key. And this now scans for all the announcements from our Umbra smart contract. And you get a table here of all of the received transactions sent to this user. So we're going to withdraw that dye here. We specify what address we want to withdraw to.
01:54:10.294 - 01:54:47.730, Speaker A: Of course, you have to be careful here not to remove the benefits of privacy by putting in an address publicly linked to you. And because this is a token here's where we utilize the gas station network to pay for that transaction, that way you don't have to fund your stealth address with Ether. If we integrate uniswap, you could even pay for gas with a token and output your payment in any token that you want. So here we're just going to keep that in Dai. So we got paid in Dai. We're going to output in Dai. While that processes, we'll head over to Etherscan and see what a transaction looks like on the blockchain.
01:54:47.730 - 01:55:28.366, Speaker A: This internal transaction section is where the payment was sent. You can see we called a function on the contract we sent our Ether and that happened six days ago. So if we flip back to the transactions tab, you can see the Ether was sent out to some receiving address. So that's the only time this address will ever be used to send and receive once. And if we flip back, our withdrawal was successful. And if you look in MetaMask to the address that we withdrew to, you will see the die right there, 16 die. So that wraps up our demo.
01:55:28.366 - 01:55:56.298, Speaker A: We're looking forward to getting this on the main net at some point in the near future. And thank you for a great hackathon experience. Thank you so much, team. Umbra, this is a really cool hack. And with this, we'll move on to our last demo for today, and we'll then shoot into the q a section. So please welcome Tom from COVID Great. Thank you for having us.
01:55:56.298 - 01:56:26.190, Speaker A: So I'm just going to share my screen, and with that, we will kick off. Cool. All right, well, thank you for having us. We're here to present cover options. We think it's a uniswap inspired general purpose options platform. So when I say we, who is we? So over the last month, tom, myself and Tom French have been hacking on this project together. We studied at university together, and now we're both either working or interested in ethereum.
01:56:26.190 - 01:57:01.162, Speaker A: So what have we actually been doing for the last month and what motivated us? Well, it all started, we think, with black Thursday. On black Thursday, if you cast your minds back, the price of ETH collapsed, which caused many CDPs to be threatened with liquidation. And so in response to this, many CDP owners went out and they purchased dai, and they used this dai to pay back the debt on their CDPs. However, this meant there was a surging demand for dai. And so dai skyrocketed, as you can see here on this graph from CoinGecko, the price shot up. And so this meant that CDP owners are having to pay a premium to pay back their CDPs. This is expensive.
01:57:01.162 - 01:57:39.834, Speaker A: So we wanted to try and tackle this problem. And one way of tackling this problem is protective put options or protective dye options more broadly. The idea is that a user ahead of time buys the right to purchase dai at a pre agreed price, and then in the future, they can exercise this, right? So if a user is afraid of the potential of a black Thursday event, they can go to our contracts, which are also using a liquidity pool, and they can say, I want to buy die in the future for 1.2 cents, for example. So it's a call option. And then in the future, if they need to exercise this, because dai has maybe gone to $1.10, they can do this.
01:57:39.834 - 01:58:29.130, Speaker A: They can cash it in, and they can take this Dai and then pay back their CDP. But why stop there? So, as we all know, uniswap anybody is permissionless, anybody can interact with it and add liquidity. And why just stop with, like, a dai USDC type of market? Why can't you go further? And so we set about trying to think about ways to generalize this and try to build a system and the infrastructure which would allow you to open this up to any market and have anybody in the world be able to deploy any market they want. And so we used the uniswap v two exchange quite heavily for this. We used their price oracles to price our various, various pricing mechanisms that we use and this all came together and resulted in Coveroptions E link. So now I'm going to jump straight into our demo. So coveroptions ETH link.
01:58:29.130 - 01:58:53.778, Speaker A: This is the landing page. The first page is where I mentioned briefly before that we use a liquidity pool model. So what this means is that option sellers deposit liquidity into a liquidity pool. I've already gone ahead and done this. You can see the total liquidity in the pool and in return I get minted what are called LP tokens. You can see them here. But what most people will be interested in in this demo is the Buy option page.
01:58:53.778 - 01:59:29.822, Speaker A: So imagine a scenario where I'm a CDP owner, I'm maybe a bit cautious about what's going to happen to the dye price in the future. Well, I can go to our Dai to USDC market that's been deployed here and I can say in the future I want to buy, I don't know, 1500 die. It's going to create an at the money option. I wouldn't worry too much about the price at the moment. This is because we're on Robston and I'm going to want to exercise it sometime in the next two weeks. It's going to quote me a price and I've already done the approval before this and I will click Buy. MetaMask is going to pop up.
01:59:29.822 - 01:59:56.578, Speaker A: I'm just going to set this to fast and set that on its way. Cool. So now MetaMask is interacting with our contracts and in this interaction now if I go to exercise options. So this, I've already been playing around with this quite a bit. So this is where a user gets to see all of the options that they've taken out. They can see an option ID, they can see the amount the option is for of the asset, the strike amount of the underlying asset. They can see the start time, the end time, whether it's expired.
01:59:56.578 - 02:00:27.594, Speaker A: And as soon as this gets confirmed, I will have another option appear. At the end of this it will have an ID of eleven. And then at any future time between these two periods, I will be able to go back and exercise as and when I would want to. So that has been confirmed. So if I just switch back to the page to refresh and there you go, there's option number eleven. So it allows anybody to go onto this platform and do this. Now, something that we're really quite interested in and keen on is that the idea of yield hacking.
02:00:27.594 - 02:01:04.026, Speaker A: So you notice on this page you can go and deploy whatever market you want and so you can deploy interest bearing tokens such as AI and various other things. And we think this could lead to some quite interesting possibilities in the future. So if I just click back to our presentation so you can find us follow the QR code to our website. Options are a really fascinating innovative, exciting area in Ethereum. And we've learned a lot by doing this. In terms of next steps, can broadly split it down to two liquidity pool models, have some flaws and vulnerable to some of the attacks. And so we want to go through the incentive mechanism and iron some of those out.
02:01:04.026 - 02:01:25.934, Speaker A: And then number two, we're quite keen to get user feedback and see what users are looking for from a platform like this. Cool. So we've been covered. It's been a pleasure to present, and thanks for your attention. Thank you so much, Tom and every other team that presented today. This concludes the 10th demo, and I know that was a lot to take in from our judges. There was five back to back demos.
02:01:25.934 - 02:02:16.514, Speaker A: So what we'll do is we'll ask all of the teams to turn on their cameras and their mics, and we'll kind of shoot into a Q and A section where our judges can ask you any questions or give their comments. So maybe to seed everything off, I'll kick this off by asking Sergey, why is it called Cheetoken? Yeah, thanks for the the. I would start with one inch maybe first, because you can maybe remember how we start on ETH Global hackathon with one inch. And I was running in the New York hackathon and pitching. One inch comes from one inch punch from Bruce Lee. Very efficient punch. And I pitched that.
02:02:16.514 - 02:02:43.130, Speaker A: We do also very efficient things on the blockchain. Combine everything in one single transaction. And then to make this one inch punch, you need Qi in Asian Martial Arts. And the power which we need to execute very efficiently on the blockchain is our Qi gas token. And this is the idea. Thanks. That's incredible.
02:02:43.130 - 02:03:29.334, Speaker A: Awesome. Maybe I'll let some of our judges kick in and see any questions that they have for our project. So feel free to unmute yourself and go ahead and ask the questions. I have a question for Oya Market. I understand you have an escrow mechanism for the payment if the item has not shipped or doesn't arrive in good condition or something like that. Could you clarify how that escrow works and how it is resolved in the case of a dispute between buyer and seller? So, right now, the order contract is created when a buyer makes a purchase, so it'll automatically put their payment in the smart contract. They can get an automatic refund if they cancel it before it's marked as accepted.
02:03:29.334 - 02:04:24.246, Speaker A: But once it's marked as accepted, that gives the seller a chance to ship it and it's locked for a time period. But then if it arrives and there's something wrong, that's when the buyer can basically initiate a dispute and then the arbitrator steps in. So typically with e commerce, the platform will take a cut off of every order, even though most orders go fine with this. The platform, whatever marketplace you're using, would probably be that arbitrator if that's like Etsy or Amazon or Ebay or whatever, and they would step in and they would settle it based on some pre agreed rules, you'd know, in advance who your arbitrator is, and they just step in if there's something wrong. So the arbitrator role is one that anyone can participate or has some reputation mechanism around it. I think the idea right now is that it's agreed on in advance for each individual order. So if this is built underneath 100 different marketplaces, each marketplace would automatically be the default arbitrator for orders coming in through theirs.
02:04:24.246 - 02:05:30.782, Speaker A: We also have some thoughts about community defined arbitrators with token holders voting. But the typical experience that you would expect is if you bought something with ebay, you raise a dispute with ebay and the difference would be ebay is not taking a cut when 90% of the time it goes fine and the buyer and seller just interact with each other. They just step in when they need to. Yeah, I actually think economically that's a better model because it basically means that if you're a seller that doesn't lead to many disputes, then you have to pay less fees, which is kind of the right incentive to have in pretty much every way. So I have a couple of kind of technical questions for umbra first of all, it's a great project. I'm very happy that you actually went ahead and did this amazing kind of nice and clean job, I guess. So first of all, and this is a fairly small point, but you're requiring the kind of receiver to download an encrypted key file.
02:05:30.782 - 02:06:44.506, Speaker A: Is there any reason why not kind of switch to the technique Loop Ring is using, which is basically by just kind of generating the key from a deterministic signature from the primary key of a user. So basically what Loop Ring does is it has you just kind of sign a string and then the hash of the signature of the string, which you can only get if you can make the signature, which you can make if you have the private key, is then used as your kind of subkey for the application. So that seems like it would just kind of improve UI because forcing people to kind of keep on storing more key files, every one of them has some kind of loss of risk. And then is the receiver kind of just basically scanning through all of the kind of umbrella transactions and just checking which ones are actually going to the receiver. So to answer your first question, the reason we didn't implement it that way is because we didn't think of that. So I think that's a great idea and would make a ton of sense and would simplify the process of, like you said, not having to have another piece of key material to backup and protect. So that's a great idea and thank you for making us aware of it.
02:06:44.506 - 02:07:40.086, Speaker A: The second question the short answer is yes, they are having to do that. We have some kind of quick and dirty engineering hack ideas on how to deal with that and make it more efficient. And then, of course, there's a much kind of broader question of it's kind of an open research question of how that could be made more efficient. And we have read your ETH research post about that issue and we're interested in exploring that in future versions of the protocol because obviously what we're doing now would not scale, ideally, but there are, I think, ways to make it workable. And one kind of more small pedantic point about your specific approach. For your specific approach when you generate the stealth address, is it just basically sender private key multiplied by the receiver public key or is it something else so kind of more specific? Basically, can the same sending address generate two distinct stealth addresses for the same receiver? Yes. Sorry, Matt.
02:07:40.086 - 02:07:57.178, Speaker A: Go ahead. You answer that one either way. Yes, so it can so each time they do ascend a new random number is generated for that stealth address. Okay. No, that's great. This is excellent. I'm looking forward to it being kind of patched up and deployed and ready for mainnet.
02:07:57.178 - 02:08:23.670, Speaker A: I definitely know I'll sign up for it pretty quickly. Yeah. The Umbrella project is tip of the iceberg project, like what you demoed on the page, very difficult to demo. And you did a great job because it's very difficult to demo something so technical that offers such great value behind the scenes and it doesn't show so easily. You did well. Thank you. We appreciate that.
02:08:23.670 - 02:08:48.370, Speaker A: Thank you. And we do think it's kind of the tip of the iceberg. We kind of think of, umbra, as a protocol, a very simple protocol that can be integrated across a lot of built into wallets, even built into other applications and things like that, to provide this system of stealth addresses so that it's almost invisible to the user. But as a first pass, the interface that we built just allows usage of the basic functionality.
02:08:51.350 - 02:09:17.338, Speaker B: I have a question for Cover actually, first, a comment. So I just wanted to point out that you guys have a vulnerability which is based around swap. Composability. And I'm just going to paste this into the chat here so you guys can take a look at it. But essentially it has to do with sorry, did someone say something?
02:09:17.504 - 02:09:21.210, Speaker A: Okay. No, sorry, I was just agreeing. I was just saying thanks. Yeah, this is really useful.
02:09:22.030 - 02:09:40.482, Speaker B: Yeah, so it just has to do with kind of sandwiching and the way that you're actually taking price data. So I'm sure might be on your radar, but take a look at that. And then I guess my other question is I noticed that you guys implemented American style options versus European style options. And I'm just curious when that design.
02:09:40.536 - 02:10:19.914, Speaker A: Choice yeah, that's a really good question, like pricing in general, in options is a very much a nontrivial thing and quite a tricky thing to do. Yeah. So American options versus European options. So for one that you can expire, the expiry can be whenever, and for the other one, it has to be by a particular date. The particular route that we went down was using this black scholes kind of approximation because mostly because it was a hackathon type project, we wanted something that we could get quite quick and get it as like a proof of concept. And so we found an approximation to it which is valid over some certain constraints. So that was like a first pass at the whole implementation.
02:10:19.914 - 02:10:49.206, Speaker A: But going forward, I should have mentioned the technical thing. This is something we want to spend quite a lot of time on thoroughly thinking about how you can better represent prices for when you want to exercise whenever. And there's various different ways around that. You can look at things like binomial models, there's all sorts of things. But yeah, this is something we need to spend quite a lot of time on to really pin it down. And we want to do benchmarking as well. There's quite a few options providers out there and so we want to benchmark our work against all the things out there.
02:10:49.206 - 02:11:26.834, Speaker A: But yeah, reports like this are fantastic and really helpful to help us harden things up a bit and develop things a bit more. So, yeah, thanks for that. That's really helpful. I actually support the exercise whenever approach because I think if the goal of the thing is to be insurance so basically, if the original system was supposed to give you a dollar but doesn't give you a dollar, then your system should be. Just give them a dollar minus what they got, and it should just give them to them as fast as possible. It's fine now. Okay, I have a comment for the cheat token, the one inch team.
02:11:26.834 - 02:12:40.106, Speaker A: I very much like how you wrapped all of your functionality in a modifier that is very easy to understand and use for a developer who doesn't really need to know any of the detail and makes it very simple to add the capability into their contract. So that was very well. Thanks a lot. I want to say about the liquid DeFi, I really think about that. Running your liquidation bot, it is a kind of like hassle in one way in terms of basically making it a bit more easier and pulling the liquidity is pretty neat. So I really like the stuff that you guys build, especially with the black Thursday. One interesting kind of like a thing that might be good to look is that let's say if you liquidate with flash loans, is it more efficient than pulling the liquidity and kind of like paying that for the liquidity providers or just basically taking a flash loan and just liquidating whatever you.
02:12:40.106 - 02:14:15.770, Speaker A: Need to liquidate and returning because if I remember DeFi Saver, which lets you basically pre close your CDP before it gets liquidated and save the liquidation discount, they're using Flash loans and that was one of the things that they saved roughly like 2 million worth of Vault during the Black Thursday. So how do you think it will fit in this kind of like a liquidation game for Roscoe? Yeah, so I guess we've thought about this and there's a few things where we think we differ from using Flash loans. So first off is that giving other users access, like giving regular DeFi users access to these yields and to participate in this. But also we've done a few tests that show that using our contracts use a little bit less guests than using Flash zones. So that ends up of course, helping for the profitability. And I had another point but I forgot about it. So basically those are the two main points you guys have very good memes, so like some good stuff.
02:14:15.770 - 02:14:44.146, Speaker A: Thanks. Yeah. So I want to add one more thing to that. The thing is that in MakerDAO you can't use the Flash loans and MakerDAO is one of the highest liquidation bonus in the liquidation space. So that's why the pool. Are you sure? If you look at the actual liquidation yeah, we talked about it. Thanks.
02:14:44.146 - 02:15:21.566, Speaker A: I have a question for the Oya team. Was that entire thing built during the hackathon? Yeah, we actually started with a different idea and then realized that this was better. So yeah, we just focused on product and design first. The smart contracts probably came in in the last week because we wanted to make sure we were building what would actually be useful. So it was a very intense last five days. I'll say that that's a very impressive amount of work and I have to say from my perspective, that demo was the slickest, best design demo I've seen today. Nice work.
02:15:21.566 - 02:16:12.560, Speaker A: Thanks. So two questions, one for the Oya team and one for Cover. Have you thought about the ability to sort of abstract away some of the user experience and potentially partner with some of the similar platforms like a shopify or other traditional Rails or shopping platforms? Have you thought that process through? And similar question for Cover, have you thought about the composability of your own options and how they could ideally be integrated with other DeFi applications to create a super product? I think for Oya, I would just say I worked for a little bit for an e commerce company as their in house developer. So I'm a little familiar with how shopify, you can just plug stuff in there. But Vanessa, you're working on the seller surveys, we'll find out what people are actually using.
02:16:14.130 - 02:16:46.250, Speaker B: Yes, and just to put things in context, we actually sell books on Amazon. You can see our books behind us. So we are sellers and with the whole everything going on with COVID and everything going online. It was meaningful to us to make a product that sellers would be able to cut fees because we know how expensive it is from a personal standpoint and we get all that information from a bunch of sellers that are answering our surveys.
02:16:50.510 - 02:17:20.858, Speaker A: Just one quick question for Oya. The protocol is kind of completely on chain, right? There's no kind of server component. Oh yeah, sorry, I lost audio for a second. Yeah. So is the protocol completely on chain or is there some server component? Yeah, it's on chain. So the core stuff that we have right now is basically a controller that creates different orders according to rules. The token piece there is basically to have a governance process for updating the controller.
02:17:20.858 - 02:17:50.302, Speaker A: But yeah, everything's pretty much on chain. We're thinking about various ways to bring down gas costs by sending intent to purchase. Basically, instead of immediately putting the payment in, you send like a signed transaction off chain and the seller accepts it and then that actually deploys it. In the current protocol, I'm guessing the buyer would put the shipping information just on chain encrypted with the sender's key. Oh no, the shipping information would be off chain. Sorry. Oh, I see.
02:17:50.302 - 02:18:18.790, Speaker A: Okay. Yeah, like the settlement of the order and everything would be off chain. The on chain part with shipping would be if you're using chainlink for automatic confirmation of delivery. But that would just be like the tracking number. Right, I see. I have a question for one inch chi actually a couple of questions. So it's great to see that there are improvements on the gas token concept while it's let's say, a bit controversial.
02:18:18.790 - 02:19:33.566, Speaker A: So the first one is can you please dive deeper into how you are making use of create true since you said during the presentation that this was like one change compared to gas token two, and specifically if it did help in any way to achieve some of the 5% optimizations you guys mentioned. And the other question is if you think there is any further room for optimizations in the algorithm so that we can achieve even greater savings potential. Thanks for the questions. Can I share the screen shortly maybe to show Nicole? Yeah, sure, yeah, that's fine. Okay, so you can see so I mentioned here these two parts which we wrote by ourselves. First of all, we reduced the size of the address we were mining the address in AWS cloud. We paid like $800 to compute this nice address.
02:19:33.566 - 02:21:14.094, Speaker A: So we have 14 zeros in front of instead of twelve. So we were able to reduce the creation code here by one byte and we implemented also here a bunch creation of the contract subcontract instead of have a normal loop and creating one after each other. So optimization here was around zero seven percentages based on our estimations and to compute the address of the subcontract in the burning process. He destroyed child in this function. The GC two guys, they wrote on really very complex function to work with the Create one function, not Create two and they spent a lot of gas to compute this address and we reduce it by these few lines. It makes everything simpler if you use Create Two because you can compute back based on the salt the subcontract addresses and it gave us like four to three percentages around that being more efficient than GT two. And we also fixed a bug in ERC 20 implementation on the burn process.
02:21:14.094 - 02:22:09.662, Speaker A: They didn't create an event, they didn't emit event for burning so ether scan didn't show the right balance of your wallet. So we just used solidity. We saved with burning gas stock and on one inch, around $60,000 for users and maybe it's a nice opportunity for other projects to use that and also to burn gas token. I know it's a hack for an EVM and maybe vitalik don't like that but it's there and we should use that. If it's possible. Can you maybe explain other questions which are left? I'm not completely sure there were three. Yeah, I was just asking if you think if there is more room for improvements or if this 5% is the best that can be achieved without too much complexity.
02:22:09.662 - 02:22:46.640, Speaker A: Sure. We started to work with assembly and of course you can write everything with assembly and make it like remove the overhead of open zeppelin. You can just write everything in a default function in Solidity but it's like a lot of effort. It will create more room to save gas but not a lot. Thanks. Amazing job. Thanks.
02:22:50.850 - 02:23:08.180, Speaker B: I just had just one last question really I just wanted to kind of find out, I don't know hackathons are so great because you are kind of interacting with all kinds of different people and it's all very fast paced. I'm just kind of curious what was the most fun part of it for everybody.
02:23:13.050 - 02:24:28.640, Speaker A: From my side, I can say I missed a lot this feeling to not sleep like 48 hours. We did it in traditional manner and we developed everything in the last two, three days and last two nights to get the feeling back from the original ETH Global hackathons to travel around the globe and staying with the nice community, nice people and develop I'd say with liquidify. We had a lot of fun within the team just creating memes of everything, posting it online and just having a lot of fun just besides coding or the yep, I guess on my side, I can't speak for Vanna and Yee but I really loved working with a really design and product focused team. So I spend a lot of my life just in code and it was a really cool experience and definitely reflected in how it all came together and also what we built.
02:24:29.410 - 02:25:14.490, Speaker B: Yes, it made it very enriching to have different backgrounds coming together and incorporating everything together because without Eve we wouldn't have this, without John we wouldn't have what we have. So we all incorporated something very special and we became closer through all of this too. Yeah, and I guess for my perspective is as a like sometimes we often come up with ideas that are crazy, but without technical support or the input from seller like Venna did for the research, we won't be able to really to pull something that is more practical. So that is really helpful to have a diverse background.
02:25:17.810 - 02:26:28.588, Speaker A: What did you think, Tom, was the most fun thing we worked on? I think one thing that I really liked about this hackathon is that it seems like a lot of the projects have it's been timed perfectly with so many projects coming out with new versions. We have, uma we have uniswap p token. I hadn't heard about them before, so yeah, just the ability to get our hands on brand new tech and build something right out the gates has been just perfect. On my end, I obviously enjoyed learning new stuff like I never integrated with Gas Station Network before, for example, so that was great. But I actually think the most fun has been like the last week or so, seeing the judging and all the other awesome hacks that have come out. There's just probably at least a dozen projects that I want to play with and it's pretty cool. Amazing.
02:26:28.588 - 02:27:12.996, Speaker A: Thank you so much for answering that question and I think ending off on a high note is a perfect way for us to wrap this call. I want to just share some closing remarks at the end. But before all of that, I want to point out that I think this is the first time on record that we actually found a security flaw in the middle of a demo. So let that be stated for everybody on the live stream that this has been our first. And not only that, it's just other than these ten teams, we had so much fun not only reviewing, but also seeing out every other demo. If you go to Hack ETHGlobal Co, you can check out a video demo for all 118 projects that submitted and really just see what they did, get the very concise version, you get to check out their source code, you get to check out the description of what they actually face challenges on. And we learned so much as ETH.
02:27:12.996 - 02:28:16.888, Speaker A: Global making sure that we can make this our very first virtual event and improve this thing anywhere from understanding how do we pace things when we stretch from two days to four? Weeks to cases where, for one of our judging, a team that was presenting did not speak English, and we had to use live translation as part of the demo to make sure that we can do a smooth Q and A. So a lot of good lessons from our side, and we can't wait to incorporate all of that to make the next ones even better. So with that, I want to spend a few minutes on just thanking a handful of our people that made this event possible. Obviously, the hackers, you were the core piece of this event. Your work and the projects that you worked on is what made all this possible. Of course, our sponsors who were not only there to help the developers integrate their SDKs, but also just there to help them on anything technical or product related, they hosted so many office hours, workshops, panels, and they really behave like mentors. Even though we try to separate them as categories.
02:28:16.888 - 02:29:17.312, Speaker A: Everybody was there for each other and that's what made it amazing. And, of course, not only are six judges that are on this call, we had 30 judges over the course of last week who judged the 118 projects individually and every community member who was on our discord and the entire DeFi community that kind of got together on our discord, twitter, live streams, and every panel talk we hosted that really kind of made this thing feel like a really tight knit community. And of course, I want to just make sure I shout out to every single sponsor that made this possible. And that's ave compound uniswap ethereum foundation uma ENS chainlink balancer SIA p tokens opengsn pull together portis and are you were considerate enough to take a chance on us making this a really cool DeFi hackathon. Which is also our first. And we're so happy that you were also impressed and enjoyed this whole experience. And lastly, I want to make sure that I spend some time on this.
02:29:17.312 - 02:30:11.284, Speaker A: This is the Eve Global team that has put in an amazing amount of work for the entire duration of this hackathon. We try to have a 24/7 coverage. We had over close to 40 hours of content that we offered for our hackers, and our team really went above and beyond in making sure that everybody was satisfied. We added a notion of a weekly check in where we managed a team and every individual hacker on a one by one basis. Everybody had a direct go to from our side. We ensured that anything that they had questions on or if they're stuck on anything or any blockers, we can support them. And really just coordinating everything from our sponsors to our judges to our hackers to ensuring that the demo goes smoothly for these calls was all of the work that Andrew, Heather, Jacob, Trent, Emily, Josh, and Liam have put in, and I want to make sure that they hear that from me.
02:30:11.284 - 02:30:48.892, Speaker A: And also everybody else here is that these are the people that are beyond and the ones that made all this possible. So a lot of learnings from our side. And just so I can go back to my token conclusion, this would not be an ETH Global event if we don't announce what's coming next. So in terms of an announcement with a non announcement, we're going to be planning two more online hackathons that will happen over the next few months. We're about to be releasing those details really soon. So check out ETHGlobal Co and sign up on our mailing list to be informed about it directly. Or follow the Athglobal Twitter handle where you will get a notification once we announce our next events.
02:30:48.892 - 02:31:24.792, Speaker A: And of course, one thing that we did announce last week was our ETH Online event. This is a conference and a hackathon we'll be doing for the course of entire October. This is our way of making sure that the spirit of building and contributing and talking about all the cool things happening in this ecosystem is not lost. And we'll be hosting a lot of summits and we'll be doing a lot of developer related events. So check out Ethonline.org to find out more about ETH Online for this October. So with that, I want to thank all of you for staying with us a little over time.
02:31:24.792 - 02:31:39.710, Speaker A: Thanks to all of our judges for making this possible and to all 350 hackers and the hundreds of people who joined the YouTube, Twitter and our zoom calls on the live stream. I hope you have a great good afternoon evening and good night and we'll see you on for the next event.
