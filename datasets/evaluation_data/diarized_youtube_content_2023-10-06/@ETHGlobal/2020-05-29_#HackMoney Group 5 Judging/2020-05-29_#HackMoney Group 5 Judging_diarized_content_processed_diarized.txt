00:01:11.410 - 00:01:45.698, Speaker A: All right, we're going to get started. Welcome everybody on the live stream. This is hack money judging demo day. And I'm Kartik, one of the co founders of ETH Global. So today is day four and group number five of our judging. We've kind of spent the last four weeks working on a lot of DeFi projects and we're spending this entire week on showcasing all the amazing things that have come out of the hackathon. So for those of you who don't know on the live stream, hack Money is a hackathon that's organized by 8th Global.
00:01:45.698 - 00:02:45.126, Speaker A: And for the past four weeks, we had over 350 hackers from 40 different countries and 15 different time zones work with us and their teammates to build really cool things in the realm of DFI. We get people from all these amazing countries and an amazing set of over 40 mentors who helped out our hackers and the teams with anything from technical to product to marketing help. And not only that, we had an amazing set of companies in the DeFi space who helped and put their time and resources into getting the teams to build on top of their SDKs and actually really take the extension and the composability to the next level. So let me say that again. Over the past four weeks, we had over 350 developers work on building a lot of D five projects. And as of Sunday night, I'm proud to announce that we had 118 D five projects that were submitted for this hackathon. And that's absolutely incredible.
00:02:45.126 - 00:03:39.260, Speaker A: I mean, I can comfortably say that in just these four weeks alone, we've doubled the number of DeFi projects in this space and we're using this entire week to showcase what all these projects are doing and how they work with other things in this ecosystem. And we're excited to kind of kick off today with a lot of these demos. So I want to quickly go over the logistics of how the next 2 hours are going to work. We have 14 teams that are going to be presenting today and each team will have four minutes for a demo and then three minutes after their demo to address any questions or comments that the judges have. So in grand total, each team will be on for seven minutes. And to make sure that we have all minimized our AV related issues over this call, we pre recorded a lot of these demos. So the teams will be playing what they've recorded for these demos and then answering the questions after they've finished off the video.
00:03:39.260 - 00:04:28.246, Speaker A: So a quick overview of how this event was set up. The rules and criteria for hackmoney was simple. A team could have a maximum of five members, but you could also work individually if you choose to do so. And we saw a lot of projects that were done by individual hackers and the only thing they had to incorporate was their hack must have a DeFi primitive as part of their submission and their core use case. And of course, because this was a hackathon, all code that was submitted for this must have been written over the course of the four weeks that the hackathon ran. So as a result, everything you're going to see today was the outcome of four weeks of work. And as we kind of go through these demos, our judges will be rating and scoring these projects on these five different categories.
00:04:28.246 - 00:05:33.214, Speaker A: And these categories will be how technical and original a project is and how practical it is to introduce this to a set of users. And on top of that, how the interface of that set project looks like for the end audience, whether that's a UI or UX abstraction or something that abstracts this for developers. If it's a devtool, and, of course, we have a general catch all category called the wow Factor that lets us offset anything that we've missed or not been able to address in any of those four previous categories. And just to remind everybody that this is not a competition, the hackers are here to learn and showcase what they've done and share their excitement with everybody else, including our judges. And the judges are here to primarily give feedback to these projects and actually make sure that they can give them anywhere from advice to support on what they can do to take this to the next level. Not everybody is trying to become a business, nor do we want them to do this in any form. We want this to be a way for everybody to experiment with what's possible, and we treat these events as playgrounds for what could be done with a lot of the technologies in this space.
00:05:33.214 - 00:06:23.360, Speaker A: And the goal is to make this a better place for the ecosystem. So with that, our schedule for today is that we have these 14 teams that will be going on one by one and presenting what they've done to our judges. And doing all the hard work are our three judges who will be looking at each of these projects and addressing any comments and giving them our feedback. And I'd like to welcome now Linda Shea from Scalar Capital, anthony Susana from Set Protocol, and Aparna Krishnan from Open to join us as our judges. And with that, we will kick off our first demo for today, and that is Team Omisario. So please welcome Omisario to share their demo. Howdy? I'm sharing the screen right now.
00:06:23.360 - 00:07:03.690, Speaker A: Okay, kicking it off. Hi, I'm Julian Traversa. Hi, I'm William Shea, and we're here today to show you what we've made for Heck Money 2020 Omisaria. For this hackathon, we wanted to build a project that we could integrate with the Amicigo network. Because it had just been privately released to the main net, we thought it'd be fun to integrate it with a basic game, one that everyone loves, like Super Mario. With our integration, you'll be able to earn Ethereum and Bitcoin as you collect coins and finish levels. In order to process all in game transactions, we are using the Omissego child chain.
00:07:03.690 - 00:08:18.206, Speaker A: When the web page loads, it waits for the portus login, upon which time a seed wallet sends both Ethereum and PPTC to a temporary wallet which controls all of the funds which will be sent to the user. As the user collects coin and games, Ethereum is stored and then continuously cashed out on every child chain block. Similarly, upon completing a level, the user is rewarded with PBTC. In creating Omisario, we had hoped to demonstrate that Ethereum had potential as a layer two scaling solution for Bitcoin. At the same time, we'd hope to provide users with a really fun and engaging experience. As I mentioned, it waits for you to log in on portis and then funds are sent to a seed wallet as seen in the transaction hash below. As seen a few seconds ago, the Amisigo network transaction hacks are updated.
00:08:18.206 - 00:09:02.530, Speaker A: This indicates that the coins collected have been sent out in the form of Ethereum. You can verify this by clicking on the transaction hash to navigate to the Block Explorer. Now that the user has finished a level, PBTC has also been sent, as can be seen by the new transaction hash below. We can easily verify this by clicking again on the transaction hash to navigate to the Block Explorer. As highlighted. The user's balances are also reflected on screen for convenience. And that's about it.
00:09:02.530 - 00:09:46.504, Speaker A: That was really cool. Is the game playable right now? Yeah, it's live, but there is a visual bug with the live version. So we do recommend people download it with the node version. Very cool. I'm excited to try it, just so I understand. So in this game you're storing ETH, but then players are rewarded and they actually cash out PBTC? Well, actually you're being sent both. It's just that we had thought there were certain limitations with the network in terms of how many transactions a wallet could send out per block.
00:09:46.504 - 00:10:21.144, Speaker A: It turns out we spoke to a team member yesterday and you can get around them by storing all the transactions locally to build in further transactions. But to get around that, we had had every time you start up a game session, it spawns an individual F wallet which we fund everything with. That way a bunch of users can be on at once instead of just one being locked to our main wallet. Gotcha. Yeah, this is really cool. How many levels do guys currently have? Well, honestly, it was a pretty extensive clone. It's really cool.
00:10:21.144 - 00:10:45.184, Speaker A: It's pretty much Mario Maker, but in Mario NES. So there's like mods. You can make your own maps and it's got the full Super Mario NES. So I don't know. Yeah, I spent a lot more time probably playing it than I should have when I was testing. Yeah, that's so cool. How much eat is someone earning per level or like right now? Not much.
00:10:45.184 - 00:11:54.768, Speaker A: Realistically, this was meant more to be just we wanted to test out the network and see how integration was. It was coming up on the Main net and I don't know, I thought it was as well interesting to demonstrate, like I had said in the video, PBTC being used on it, there are costs in terms of onboarding it, wrapping the bitcoin and then depositing it to the child chain. But I could see definitely some use cases in terms of just keeping money on the child chain. If you're wanting to transact with a wrapped coin on ethereum okay, that makes Mario, I guess there's some part of it that's not hosted on the blockchain. Right? Well, realistically, the user is sent essentially three F at the start and if they wanted to, they can go in the code and take the private key for that wallet. So that's the local one we have spawned every time it's loaded. And that's really not the blockchain part then, because we're funding the wallet directly with that wallet.
00:11:54.768 - 00:12:35.750, Speaker A: But that could definitely be manipulated. It's not definitely completely decentralized. Got you. Have you guys also thought about creating incentives for other people to fund the wallets? I've thought in general about what the end goal, really? This is mostly a fun project. There hadn't been any community projects that I know of in a Museuga community at the you know, beyond that, it is, I think, really advertisement money. That way you could actually send out real ethereum and do real benefits for playing the game rather than just net money. And really that is the direction you could go, I think.
00:12:35.750 - 00:13:21.840, Speaker A: Yeah. That was really cool. Yeah, it's the first time I've really seen a project on a misa go because I know that you mentioned that they recently released to Mainnet. How was it working with their dev tooling? It was a bit of a pain at first, but that was because we were trying to do stuff completely client side and nobody apparently at Amisigo was making anything with browser tools, so their browser package just didn't work for a week and we didn't really know what was going on. So past that, actually, in the middle of the hackathon, they fixed it for us, which was really great. And they completely updated all through documentation, which would have been useful at the start. But yeah, I think it's a lot easier now than it was.
00:13:21.840 - 00:14:14.000, Speaker A: And I also in the process. Yesterday, I talked to one of the devs and requested a sort of daisy chaining function that would allow you to take one transaction and then have it stored locally for you to build another one off of it, which I think would alleviate the issues we were talking about in terms of only being able to do one per block. Currently, you have to call the previous transactions with a function and if it's not confirmed, you can't call that. So if you can do it locally, it's a lot easier. You could actually utilize the network realistically in terms of it being used for gaming, there's no real reason to use it over stuff like XDI or Matic just because realistically you're not needing to secure many funds. The idea is you're trying to use the consensus layer of ethereum with the misiko. And if that's not a priority, it's probably not a great idea to use the awesome, awesome.
00:14:14.000 - 00:14:29.752, Speaker A: Well, great work, guys. Yeah, appreciate it. Thank you so much. And that was an amazing kickoff for the day. And with that, we'll move on to our next demo. And that is team missing number. They are having some AV issues, so I'm going to play their video instead.
00:14:29.752 - 00:15:11.670, Speaker A: So just stand by for this demo to kick off. Hello. I'm Leo. This is my hack. The future is becoming more fragmented. Portals will be built to contain these futures. Futures in which we want things along the way, many captures, releases and exits.
00:15:11.670 - 00:16:23.146, Speaker A: Here is an architected coin market cap like interface to capture this abstract traction and hedge. Once taken a trustless future, it is entitled missing no short form missing number a wellknown glitch in Pokemon game. The meme was used due to the represent appearances of anomalous future type via keyboard interfaces. Problemarian online crypto commerce websites have Technit scam risk. For example, darknet central exchanges have downtime during peak volatility times. For example, coinbase crypto based product launching sites are down during dollar drop releases. For example our Nora build an alternative futures market where the underlying index feeding on website status code help with B two B and Torsite discoverability the futures factory contract makes futures signed by makers and built by Takers.
00:16:23.146 - 00:18:23.290, Speaker A: These contracts have an expiry with an underlying index is connected to an oracle client. Current implementation is connected to a Cron chain linker app to hat poles various portals for their status code. Either one a gateway into Tat where resilient static files can live two into Tor where centralized processing like payment processing can take place are first built as prepackaged signed messages which are posted to a P two P swarm. Because the signature of the future, it is in one's best interest poster proxy to get faster access to contracts making the swarm stronger. Other advantages isolated commerce sites can be accessed resiliently and can benefit collectively on portal aggregation. Site owners can custom curate and design things from warehouse in the cloud as if they were using Oberlo connecting alibaba and shopify p two P sites help unlock value for artists where onchain incentives can reduce transacting risks. You first built as prepackaged size messages which are posted to it even has dark mode looking for feedback questions.
00:18:23.290 - 00:19:30.054, Speaker A: So the basic hack here was to try to implement something that connects various different applications and tool sets into something that is, I think, cohesive. And in this scenario, it's to represent itself as a futures market, where you're looking at status codes for whether it's portals into different commerce sites or video game servers or possibly centralized exchanges. And it's still an impartial implementation. But the basic worked on code was for the Cron job that accesses these status codes into the various different tool sets. Love some questions. Thank you. So what kind of futures are possible with this? So right now it's just a simple, hey, here's the value, that here's the contract, and here's an expiry.
00:19:30.054 - 00:20:18.554, Speaker A: Will someone take it? And if so, they do. And once that expiry time is processed, then the value gets transferred to whoever wins the contract. What I'm more excited about is creating straddled options where you can do it on uptime of a website while also doing it on some type of volume of something that this website is transacting, whether it's product drops or peer seeds or et cetera. Okay, so it's like basically futures on anything. Exactly. Yeah. I was looking to be as most abstract as possible in the implementation so that anything could be built on top of it.
00:20:18.554 - 00:21:02.742, Speaker A: And right now it's just a pure linear status code that gets parsed through the chain link adapter. Got you. That's really cool. Yeah, I like that. It's pretty generalized so that a lot of people can create interesting things on this. Maybe I missed this, but what exactly are you using Chainlink for in the system? So, using Chainlink for the Oracle and the Oracle looks at the percentage of uptime for, let's say, a website, at least at this point. But Chainlink, because it has the various different adapters, you can add in any type of index that can be added to this feature.
00:21:02.742 - 00:21:34.164, Speaker A: So basically a feature has a value of the contract and then it has some underlying index that it's looking at. And if that inequality has been tripped, then it gets to the person that won the contract. Cool. No questions for me, just I like that you're using Swarm. I don't see too many projects using that these days, so it's great that you chose to use that. Awesome. Well, thanks, Leo.
00:21:34.164 - 00:22:06.650, Speaker A: And with that, we will move over to our next demo, and that is team token sets decomposer. And they have a video that they'll be playing, but they'll also be talking over that and doing that live. So please welcome Andy. And you can begin your screen share. Hello there. Hey, Miguel. Hi.
00:22:06.650 - 00:22:52.132, Speaker A: Let me start sharing my video. Okay, so basically the main purpose of our hackathon, or hack, was to learn how to interact with smart contracts. This was the first time we did something like this. And for this, by chatting with the Avid team, we learned that they wanted to take token sets or came up on my idea. And they also show interest in this. And one main thing that we needed to do is figure out the price of a token set in it. So that's when we went ahead and started creating our smart contract.
00:22:52.132 - 00:24:05.516, Speaker A: So I'm going to start playing this video. We just created a simple UI for simplicity. And we are pulling the address here from the API, the public API from token sets. So we take the address of that token. I see the price is 242 and the components is USDC and zero eight. So by pasting that in our tool, we can get how many USDC tokens are inside this token set, what's the price of each USDC in it and the price of that one token in it. So then, just to check some other token, the video, I'm doing that now I'm going to start pulling the price of a different token.
00:24:05.516 - 00:25:10.852, Speaker A: This time it's going to be the BTC eat 75 25. And I'm just looking for it. There is so this one is composed in it, mBTC WBTC. So again, we paste that address, it gets us the composition for that token, which is 00:13 WBTC and then zero two w it and we get the price of one token in it, which is zero point 78. And so this is all getting pulled from on chain data. The only thing that we rely on is on the prices for the tokens. So we are using the Ave I will stop sharing my screen.
00:25:10.852 - 00:26:12.252, Speaker A: Now we're using the Ave price Oracle because we are thinking that they go integrate this on their site. And so now this is basically a price oracle for each token set. What we can do with this now it doesn't have to be Ave, it can be any lending platform. They can take this data and start taking these sets as collateral for their platforms. And I think this is really good for token sets because now I can increase my leverage on token sets and they act as a top order in a way because they will rebalance into a safer asset. So that was the main idea that since tokenset has this built in, then taking a loan on this asset will be a safer way of getting loans. Yeah.
00:26:12.252 - 00:26:54.632, Speaker A: Any question? Yeah. That's really interesting. What happens during a rebalance, or like after rebalance and is it still safe as a collateral, I guess after rebalance happened. Yeah. So there are different risk levels. And this is the same risk that each token set has, which is, let's say, a token, and I don't remember which ones. Anthony can probably chime in there, but there are some of them that will rebalance when the price of it falls, let's say below 200 in something like Black Tuesday.
00:26:54.632 - 00:27:52.130, Speaker A: That happened. That the price of it went down really fast. That's the risk that even if we try to rebalance these tokens, they might fall lower. And that's the same risk as holding it. For example, during the rebalance, I think the tokens are still you can still pull the data of how it is composed and it will give you a price, but it's not stable. And what I know is that the token rebalances within 15 minutes at most, that's what one of the engineers from Token said told me. There are some risks involved, but I think for the most part it will handle some of that risk, take some of the risk of holding it away.
00:27:52.130 - 00:28:20.490, Speaker A: Yeah, it's awesome. It's great to see you building on Token sets. I think this is really cool. Yeah, I guess you were talking about the risk. It's also that during a rebalance, you can't sell a set so you wouldn't be able to liquidate your set, so you'd be exposed to that risk. But yeah, I thought it was really cool using it as a price oracle for different tokens so that things like Arbe can integrate it. It was awesome.
00:28:20.490 - 00:28:52.880, Speaker A: Yeah. I didn't have any questions, but I thought it was really cool and useful. I like the transparency that it shows to people, so I could actually see this being used by people. So nice work. Yeah. And this was also for my teammate and myself, at least for me. It was the first time working with Smart Contracts, so it took me a while to understand the chain and how everything works and that was what I take away from this hackathon.
00:28:52.880 - 00:29:04.532, Speaker A: Learning. That's amazing. Nice work. That's impressive. Like, first time. Yeah. Learning smart contracts is quite challenging.
00:29:04.532 - 00:29:28.396, Speaker A: So great job. Thanks. Yeah, great job. Well, thank you very much. Congrats on shipping, and I'm glad to hear that and hopefully you get to continue working on this. So thanks again, Miguel. And with that, we are going to move on to our next team and we have a unique setup for this one.
00:29:28.396 - 00:30:14.510, Speaker A: This is our first as if global. What we'll be doing is after the video ends, we will be adding on another member from our community, Julian, who will be translating between our judges questions and our team to make sure that there are no problems answering, getting your questions answered as the team that I'll be presenting right now will primarily be speaking Portuguese. So I just want to make sure that the team is ready. I think I will be playing the video from my end. So what I'll do is I'll just kick off that video from my side and then we'll move into the Q A part with it looks like they're going to do this thing themselves. So with that, you can get started. And please welcome Team Identity Money.
00:30:14.510 - 00:31:11.330, Speaker A: Looks like we don't have audio, so I think you need to enable that zoom setting. But what I'll do is if you can end this thing, I'll share. If we can get this communicated to the team, that'll be great. And I'll just make sure that we have all technical difficulties set aside and then we'll go into the q and a. Daniel says lata mosperokupa. Hi guys. You are the capevara coders and you will presentation on your application.
00:31:11.330 - 00:32:45.580, Speaker A: My name is danilo de falco fullstack my team rodrigo liveda full stack daniel alunjo's architecture, business and yasmin vieira frontier. What do you build? Identity money decentralized digital document validation solution that offers trustworthy identity data and give others complete control of tailored data. Who it works the persona creates your registry and it shows which validator you verify the veracity of your data. The validator after chosen the best business strategy for its service provision returns to information validating starts to persona. The consumer defines what information and what it to access and sends request of permission to the persona. How it works identity smart contract manages data persona data validators integrations and ports was a wallet. Identity persona and identity validator front end two web application to interact with the identity ecosystem.
00:32:45.580 - 00:34:36.440, Speaker A: Stay now with the presentation of the application separates and two models. Identity persona identity validator. First the login in screen according to screen for adding fields for validation and chose the validator input fields for validate screen receive notification from consumers and approve or not to access to access. I can see my transactions on at risk and finally I can backup my private key and minnemonic validator model logging first. Then you register as a validator. Validating my validation pen. It in zapper.
00:34:36.440 - 00:35:30.292, Speaker A: I can access my panel and the requests withdrawals from the validator if value is made and finish. Thanks everyone. Bye. See you. Can we ask questions now? Yeah, go for italy. I'm here to translate, so whatever you just ask, I'm going to just quickly translate to portuguese and then I'm going to be doing the back and forth. Okay.
00:35:30.292 - 00:36:41.950, Speaker A: Yeah, thanks for doing that. So I really like the problem that is being solved here. I think this is a really important problem in the space that needs to be addressed. My question is who are the data validators here? Can anyone sign up to be a validator? E alagosar kingston who's validatoris comacy and coquence validator ecosystem and sit onto my praise. She says that anybody can be a validator but validators are going to have scores. So any person can just simply set up and become a validator and start doing their job. But the scores will let people know the kind of validators you have over time.
00:36:41.950 - 00:37:24.132, Speaker A: Makes sense. Thank you. The idea of having validators with scores is actually brilliant. I was just going to ask that as a question. So I have a separate question which is do you need multiple validators to validate your identity or how does that work? Excuse me. Aparna can just repeat regarding multiple validators. I forgot.
00:37:24.132 - 00:38:33.570, Speaker A: Yeah. Do you need multiple validators to verify your identity? Okay. Cispresson Javarius validators pre verified. Also I'm consecutive monica. Monica dado idinch dado kere confiantoris Nakarin format it all right. So she says that it's possible that you can have many validators to check one piece of data, but in the end, it will depend on who consumes the data. So if the amount of validators required is going to be, let's say, X numbers, then it really depends more on the data being validator and the necessity comes from the data then is pliquetta main.
00:38:33.570 - 00:39:43.510, Speaker A: It depends on the degree of confidence of those that will consume the data. Okay, gotcha. Thanks, Juliana. Hey, great. I really like the interface of the project. Just one question. How are the reputation scores assigned? And are there any cyber resistant mechanisms in there to make sure that people don't just assign good reputation scores to people for no reason? Litemangostobasterinchi muntin Teresa Bay attestanta Cell she did not understand the civil part of the attack.
00:39:43.510 - 00:40:58.070, Speaker A: So what exactly is the question regarding the civil attack? I might have translated not so nicely. Well, since there's, like, a reputation system for providers, how does the system prevent that from collusion, as you said, from people colluding to assign better reputation scores to people who aren't good or are bad or bad actors. Got you. Imaginavirus Dumao Jindu PRA fala valida jehuta comacials Bolaram previni systema. It validating. Imagina validatoris. Validator kiva.
00:40:58.070 - 00:41:57.454, Speaker A: Okay. As she explains, the validator really relies on the data consumer to get the credentials and the reputation. So this data consumer, in the end, is going to be the one acting scores. So if they validate something wrong, their reputation is going to go lower because the data consumers are going to identify that. So reputation grows as the data consumer gives points for a proper validation. Awesome. Thank you so much.
00:41:57.454 - 00:42:43.500, Speaker A: Rodrigo, Esme and Daniela, thanks again for hacking with us for the whole past four weeks. And I think this is one of those moments where just the amazing members in our community really kind of make this possible for us to interact and include everybody from anywhere in the world. So, Juliana, thanks so much for doing this, and we hope to actually continue this trend for a lot more other places around the world. So thanks. And with that, we will move over to our next demo, and that is Team Money 256. So I'd like to invite them to start sharing their demo. Think you might be either muted or the audio is not coming.
00:42:43.500 - 00:43:22.150, Speaker A: Okay, there we go. Hey, guys. This is Money 256, and this is our hack Money 2020 demo. So the team consists of me, Kendrick, and my budy Adrian. So I was responsible for the solidity and more like the financial concepts, whereas my budy Adrian was responsible for the JavaScript stuff, like the build systems and anything JavaScript related. So what we built this weekend is a priceless, and I have to stress priceless contract for difference on Ethereum. This means in the event of any disputes, this will be all handled on, uma's, DVM.
00:43:22.150 - 00:44:06.762, Speaker A: So how it works is that users can so the CFD actually. Tracks an underlying asset. So for example, gold, wheat or token anything that is a price if a user wants to, the user can mint a set amount of long and short tokens for a set amount of stable coins. For example Dai, USDC or Ether. If they would like to long the underlying, they can sell the short tokens and simply hold the long tokens. If they would like to short the underlying, they can simply hold the short tokens and sell the long tokens. So this priceless CFD component has three key components a UI, a dispute bot, and the contracts.
00:44:06.762 - 00:44:57.220, Speaker A: We essentially designed a new CFD primitive that can operate optimistically in the absence of an oracle. This is constructed so that it would work seamlessly with Uma's DVM. A dispute bot will regularly check the events to regulate the validity of the CFD contract. For example, if the CFD contract has expired or if the CFD contract has exceeded some price bounds, the UI is basically so that users can interact with the CFD contract easily. So here's a little demo we have. So as you notice, this is a very simple demo because we focus a lot of our engineering time on the contracts and the logic behind it. So I can easily mint some long and short tokens if I would like to mint them.
00:44:57.220 - 00:45:45.970, Speaker A: Everything's running on a little ganache node right now just to prove that everything works. And as you can see, we now own 2.5 long and 2.5 short tokens. There is also a dispute bot that regularly checks for listen to events and if there is an invalid event, it will dispute it to make sure that the contract is in a valid state. Finally, given before, we also allow users to redeem long or short tokens before and after the CFDA contract has expired for the collateralized assets. For example Dai, we can convert our long and short tokens back to Dai or USDC or Tether.
00:45:45.970 - 00:46:41.218, Speaker A: In the future we would like to right now the users get the long and short tokens but in the future we would like to kind of automatically push them out to an automatic market maker like a Balancer or Unison V Two. And we would like to build out a more robust regulation dispute bot to listen to more events and ensure that the CFD contract is in a valid state. Yeah, thanks. That's it. Any questions? This is awesome work guys. I had a question on like so currently it's a CFD on what asset? So right now it's basically tracking the price of Die. I know that having backing die with Dai is a bit unintuitive, so we allow for other assets like USDC or Tether.
00:46:41.218 - 00:47:30.150, Speaker A: So if die loses its peg or for example goes below above one dollars, you can basically sell your shorter long tokens to kind of capitalize on the delta. Gotcha. So right now, who sets what those assets are? Right now it's done manually, but you could definitely build a token builder. Sort of like, what is all. We've drawn a lot of inspiration from uma, except that instead of having a expiring multi party creator, we have a priceless CFT contract. Okay, cool. Yeah, this is really cool.
00:47:30.150 - 00:47:53.182, Speaker A: I really like what you guys have built. What do you envision being like, some of the more popular first use cases for this? Well, anything. Personally, I'm not from America. I'm from Australia. So I would like an easier access to the American market. So for me, it'll be American options, american futures. Personally speaking.
00:47:53.182 - 00:48:49.530, Speaker A: But I think there'll be a big market for maybe China or India or markets. They're only accessible to the big players because this kind of enables, like, fractionalized ownership as well. Yeah, really cool project. Guys, you mentioned that you imagine these going into balance of pools. Did you think about how these could work with sets as well on token sets? Because these tokens have an expiry date. So the ideal situation is that we kind of put them into a balancer pool and then we can slowly we would ideally start with two CFD tokens, like one that expires in May and one that expires in June. And so if we're in May, if we're in April, we would have 100% May and 0% June expiring tokens.
00:48:49.530 - 00:49:21.962, Speaker A: As the time slowly progresses, we would like to kind of swap out the tokens in the balancer pool to kind of create this non expiring CFD token, if that makes sense. But we haven't thought much about putting them in token set simply because balancer kind of enables that gradual change. Yeah. Yeah, definitely makes sense. Awesome. Thank you so much, adrian and Kendrick. Congrats on this amazing hack and hope you continue working on this.
00:49:21.962 - 00:50:05.938, Speaker A: So with that, we would like to welcome our next demo, and that is Team Celebrity Futures, and I'll be the one playing this video, and they will be able to answer any questions after. Hey, guys, my name is Cooper Churley, and I'm presenting on behalf of Celebrity Futures with my colleague Brian Campbell. Hi, everyone. We have another teammate, Vignesh, who was unable to join because of time differences. So let's jump right into it. We wanted to create a marketplace for users to invest in the future potential of high influence individuals, starting with musicians. We want to do this in a global and permissionless fashion so that anyone can participate at their convenience.
00:50:05.938 - 00:50:45.678, Speaker A: So what if you could place a bet on Drake before he became the stariest today? What if you could bet against Drake or even back your favorite TikToker before they went viral? With our app, you can invest in a rising act before they get signed to a major label. The problem today is that as a curator, there's no really good way for me to capitalize on the upside of a career or an artist that I've noticed early on. So with celebrity futures. We created a way to bet four against an artist's popularity score and their future growth potential. We made it so you can capture their future upside by guessing correctly on whether or not they're going to be more or less popular today than they will be next month. We took spotify's popularity score, a score between zero to 100 and routed that on chain using chainlink. And we used this to make a synthetic asset using Uma.
00:50:45.678 - 00:51:11.866, Speaker A: We started with Travis Scott and created a synthetic asset called Travis. We use Uma because of token sponsors which allow people to short the asset priceless. Synthetic assets which mitigate Oracle trust permissionless creation, and secondary markets such as Uniswap for secondary trading. We're able to get a local application running. We created that synthetic asset, Travis, to be able to show how this works. We made a front end to do so that limits the amount of crypto knowledge required to use our application. I'm going to pass it over to Brian so he can show you guys how it works.
00:51:11.866 - 00:51:47.042, Speaker A: All right, guys, let's take a look at the app here. So the app consists of two pages. We have a home page where we can scroll through different artists, search for artists, and we've got three calls to action at the bottom. And then we have a portfolio page where we can manage our assets. So if this is the first time coming to the page, you're going to either have to create shares or buy new shares. So if we're creating them, what we're doing is we have to provide a certain number of shares and agree to a certain amount of Dai. And this is going to send the Dai to an expiring multi party contract made by Uma.
00:51:47.042 - 00:52:24.340, Speaker A: And we have to include both the value of the shares plus the value of the collateral in case we bet wrong on this particular artist. So here I'm creating the shares themselves, and then we're given an option to allow our shares to be pulled into an exchange tool and that would allow us to pair buyers and sellers. So that's what's happening in this confirmation. Great. And so from here, you have the other option of just buying straight away. So if you buy, you're going to buy the shares which were just created, buying the shares. You just have to specify a certain number.
00:52:24.340 - 00:53:20.420, Speaker A: And this goes to that swap tool and it allows the swap tool to access my Dai and then it will do a second transaction to actually make the swap. Great. So once this finishes up, we'll take a look at the portfolio. And this is where we can manage our assets. Again, we see up at the top our portfolio value over time and our history, different things that we've bought in the past. Our value in shares that we've created or bought comes here and we see a lot of the same functionality from the first page can be got to from the portfolio page pretty easily. We can also manage our collateral and deposit extra collateral if we need to or withdraw if our bet is going very well.
00:53:20.420 - 00:53:40.970, Speaker A: And if we do decide to withdraw, we need to wait for the liveness period. We have to be approved for this withdrawal from the Uma contract, and that's why we have to request and then withdraw. So that's great guys. That's it. That's the web app. So very happy to share. Awesome.
00:53:40.970 - 00:54:10.550, Speaker A: Thanks for sharing that, Brian. So, as you guys could tell, there's a lot going on here. We had a couple of issues, mainly with just getting the Oracle to actually sync with the application. Uma itself was a pretty complicated product, so there was some stuff that we had to abstract away. But at the end of the day, the component of us being able to do this on chain was something really fascinating and we're excited to build with it more. So thank you Plac money for having us and I hope you guys enjoyed our product. This is really exciting.
00:54:10.550 - 00:54:50.418, Speaker A: I had a question, maybe I didn't understand this correctly, but when you buy the shares, you're going long the person and when you sell it, you're going short. Yeah. So when you buy the shares, you're going long. When you're creating shares, you're going short. Selling is just really a way to cash in. So redeeming against the expiring multiparty contract. Okay, so creating is going short and buying is going on.
00:54:50.418 - 00:55:09.640, Speaker A: Yes. Cool. Yeah. I love this. I think that it's inevitable that something like this becomes really popular. And I can totally imagine people having their own little portfolio of musicians that are interested early on. I've actually been thinking about this a lot.
00:55:09.640 - 00:55:56.994, Speaker A: Now that people can go short, celebrity tokens, I guess. What happens with the whole someone's short and now they're incentivized to see the celebrity fail or something? How do you envision that playing out, though? So do you mean if a celebrity is able to tank their own celebrity status, essentially that or just other people who are now incentivized to see? Wow. So how do you envision that playing out? I mean, I think it's possible. It would only really be an issue if you had a high enough market cap for this particular coin. And whereas the money is going to be spread out amongst not just Travis Scott. Right. It would be a number of celebrities.
00:55:56.994 - 00:56:38.174, Speaker A: It would only be high profile celebrities who could have an issue with this. Like you could imagine a trump coin or something like this that would have a lot of volume. There could be an issue with him purposefully dropping himself in popularity to short all the coins. But aside from kind of extreme cases, I'd be happy to take that into account when and if this grows. Yeah, and I think to add on to that real quick, we really envision this for up and coming artists. So obviously Travis was great because you need sellers to make these markets efficient. But on the other side of things, we are envisioning this being markets for rising artists with say 100,000 monthly listeners.
00:56:38.174 - 00:56:48.054, Speaker A: And in that scenario we don't think that there would be too many malicious actors, hopefully. Yeah, makes sense. Cool. This is so cool. I'm really excited. I hope you guys continue working on this. Thank you.
00:56:48.054 - 00:57:18.822, Speaker A: Thanks so much. I love adding gas fees to cancel culture. This is interesting. So with that we'll welcome our next team onto the demo and please welcome Kryptonian. Hello? This is Kryptonian. We built a blockchain based diamond trade system. Actually the requirements for this project is from the real people in diamond industry.
00:57:18.822 - 00:58:26.360, Speaker A: So I'm happy to present our project to understand why we built this trade system. You should understand the traditional system. In diamond industry there's a broker as an intermediary between wholesalers and retailers. But the broker have caused so many problems like especially fraud. Last year there was 30 million the diamond fraud because of broker running off with diamond and then high commission fees and slow transaction and also other many problems. So we want to replace broker with the blockchain system and then the transparency that blockchain brings into the system can solve many problems in traditional system. But another problem coming up.
00:58:26.360 - 01:00:22.058, Speaker A: Usually in traditional system, retailers don't need any money to rent diamonds from wholesalers because the brokers have established trust or confidence between them. So wholesalers borrows the diamonds to retailers because they trust brokers. But we replace the broker with blockchain. The retailers kind of need money to, I mean the retailers should have money to borrow diamonds from wholesalers and then that's kind of the liquidity problem that retailers have. So we built a crowdfunding system and IOU scheme system to cover the problems that blockchain brings into the diamond trade. So the investors deposit their money into the crowdfunding system and retailers borrow the money from crowdfunding system every time the diamond trade happens. So yep, and then the crowdfunding system needs some kind of stability because if there was not enough money in crowdfunding system, some diamond trade should, I mean it's going to not happen.
01:00:22.058 - 01:01:26.714, Speaker A: So we are going to have kind of the tax system in every trade to kind of make the fund reserve in this system. That's the thing that we built for the hack money. Thank you guys. Thanks for the presentation. I didn't realize that was actually how it worked with retailers. And barring that, does this also extend to beyond the diamond business or I guess are you specifically just focusing on diamonds? Diamond is one of the drooly that this kind of trade system can adopt. But other than diamond we can extend it to other jewelries and like anybody you're envisioning can put money into the crowdfund system.
01:01:26.714 - 01:02:42.254, Speaker A: Yes, because usually broker take the 5% of diamond trade as a commission fee so we can make kind of the interest rate for investors in crowdfunding system. And then how do the investors know that the retailer is legit and someone that they can lend to? There's public market for investors or tell us to look at what kind of diamonds is needed or something like that. This is really cool. Yeah, I can imagine this being extended to other kind of use cases to crowdfund for other things that have similar problems to the diamond trade. Have you thought of any other industries that you'd like to apply this to? Not yet, but I think that we make a kind of NFT for diamonds. So if there is any industry with NFT things, I think we can extend our trade system to them. Yep.
01:02:42.254 - 01:03:48.950, Speaker A: Cool. Awesome. This is really interesting for the diamonds physically. Do you need some kind of unique Identifier for them or how does that work? Sorry, I didn't catch you. Do you need some kind of way to uniquely identify the diamonds or how does that in diamond? There's some strings engraved in diamond so you can identify the uniqueness of diamond. Does it make sense? We may have some AV issue here. Were you able to hear that answer? Yes.
01:03:48.950 - 01:04:06.632, Speaker A: Got it. I didn't know that. Awesome. Well, thank you so much. Thank you. Bye. Great.
01:04:06.632 - 01:09:37.590, Speaker A: So with this, this is our halfway point of our demos and we're going to be taking a five minute break. So with that, we'll let our judges take a quick break and let them stretch and we'll come back in four minutes. Okay, we are back on track from our break and with this welcome our next team wanting Nintendo Switch. I'll let them go on and present their demo. Great. Have our judges turn on the cameras again. Ready? We're ready.
01:09:37.590 - 01:10:03.870, Speaker A: Hi, I'm William and I worked on this presentation. Hi, I'm Anne. I worked on the front end and project management. Hi. I'm willing. Smart contract. Okay, let's get started.
01:10:03.870 - 01:11:13.648, Speaker A: In case you didn't catch that, our team name is Juan and we want a Nintendo Switch. We wanted to do an animal crossing ethereum blockchain gateway application and none of us have Nintendo switches, so we did a token pool exchange instead. Our goal was quickly, would you mind just increasing the volume and find a way to make some money? So the token pool exchange works somewhat like a stable coin in that you submit different types of, ERC, 20 tokens and you get back a token in exchange. The way it works is that if you deposit something that is common, you get less want tokens. And if you deposit something that is rare, if there's fewer tokens in the pool, you get back more want token. Now, the innovation comes in the redeem function and when you redeem a want token, you get back a random token from the pool. How is it built? Well, we have a warrant.
01:11:13.648 - 01:12:03.732, Speaker A: Smart contract and it is implementing the top level deposit and claim function. And it's built on top of an ERC 20 contract, which is from the Open Zeppelin library. And then we implement the core functionality in want pool, which accesses a uniswap pool to reduce the fees of doing exchanges. We built this using multibask. We all work at curved grid and we use the free tier of our multibask products to speed our development. And then built a front end using UJS. So let me show you what that looks like.
01:12:03.732 - 01:12:45.928, Speaker A: You can see the balance I have in my account of want tokens and the number of total tokens in the pool and how much I need to deposit in order to redeem it. So if I want to deposit ZRX token, I will get 21 tokens in exchange. So let's deposit something that there are a little less of and I'll get 4.5 tokens in exchange. Let me deposit that, confirm the transaction. Great. And now I have some more want tokens.
01:12:45.928 - 01:13:21.590, Speaker A: Let me quickly show you how that interacts with multibask. We have the want contract loaded here, and if I wanted to do something like deposit token, I can see the rest API call that we would make here. And so go ahead and redeem some tokens. So I'll redeem one who knows what I'll get. Confirm. Excellent. I got a die in return.
01:13:21.590 - 01:14:06.280, Speaker A: It's not really a useful thing yet, it's more of a fun project. So maybe we can see if there's some utility in it, see if we can support some more tokens and have some fun. Thank you for watching. This is really interesting. I have a question. How do you decide, I guess if I put down one die, how do I know? Does each person have their own want contract or how does that work? There's one want contract. Do you want to go ahead, Wynn? Yeah, sure.
01:14:06.280 - 01:14:53.480, Speaker A: So the idea is we have a central want contract and then it acts like a public pool of other tokens, which people can just put other tokens in and then get one tokens out based on the rarity of the token in the public pool. Okay, cool. This is cool. I think it's really fun. And I could totally see people using this just like kind of gamifying it a little bit. So I might have missed. But how do you determine which token is actually given out to the user? Is it random or I don't really understand that part.
01:14:53.480 - 01:15:36.814, Speaker A: Yeah, it's random or sort of pseudo random. It's based on the block number and timestamp and so yeah, theoretically a minor could game it, but this is good enough. Cool. Yeah, I thought it was really cool. I think maybe in some implementation, because you can see which tokens are currently in the pool and as you put in a want token, it will randomize what you get. Do you have more of a chance of getting a token if it has more of a share of the pool than the other ones. Yeah, exactly.
01:15:36.814 - 01:16:19.546, Speaker A: That's the point of being random inside a poll. If you have more of something in the poll, then there's a high good chance that you would have it. But if there's a lot of something in the poll, then of course it would not have a large value. Right? Yeah. We don't balance to get you an even random across the different types of tokens. It is based on the total supply. Yeah, that's what I was saying.
01:16:19.546 - 01:16:38.080, Speaker A: Like the want tokens could go up in value themselves based on what's in the pool. Like if there's only stable coins in the pool, then they might be worth less than if there was a zero X token or something that's worth more than a dollar, for example, in the pool. Yes, exactly. Yeah, that would be cool. Yeah, I was just thinking of ideas in my head, but yeah. Good job, guys. Thank you.
01:16:38.080 - 01:16:57.014, Speaker A: Thank you so much, Willem and team and awesome bow tie. Thanks. Great. So with that, we are going to call up our next team and that is ETH Cavenger. And for this one we will be playing and a cat. Not just a bow tie, we got a cat too. And for this one, we'll be playing the video on our end.
01:16:57.014 - 01:17:27.340, Speaker A: And there we go. That's awesome. So we'll be screaming off the ETH Cavendar video from our side and I'll welcome the rest of the team to the zoom call. Trent, take it away. Hey guys, I want to share our project for the hackmoney. Hackathon. It's called itcavenger and the idea is simple.
01:17:27.340 - 01:18:28.064, Speaker A: We wanted to build a tool for communities to start teaching them how to use the triumph and what a better way than with some gamification. So we decided to build what we needed. That is cabbage hotened. And right now what we built was just the API. So for ethereum, communities can give rewards to their participants by searching who completed some task. So how it works is that user go to the website dashboard, they input their address and the API is going to return true for all the challenges that have been completed. For example, one challenge can be like create CryptoKitty or buy an axie or min some compound eye, create a bot, stuff like that.
01:18:28.064 - 01:19:00.904, Speaker A: So right now what we created was only the API. So it works like this. The API just calls the dashboard, just call the API and returns true or false, depending on if the user has access or have created. For example, this address only has CryptoKitties. I'm going to try my address. I don't have crypto pigitties over here, but I have custom chain ax infinities. I have used compound.
01:19:00.904 - 01:19:43.204, Speaker A: And the idea is that if you complete all the tasks, you are going to receive some reward, like an NFT or something like that. Right now it's made using Go, we wanted to learn a new backend server. So we decided to start learning Go and use Go Ethereum. And ifura in order to read the state of the blockchain and see the logs to see which people have completed the task. And we are using Heroku for the deployment. The future work is deploying the dashboard right now. Like I said, we only have the API and Oracle, I mean, the server that it's deployed.
01:19:43.204 - 01:20:28.920, Speaker A: But the idea is to actually have a dashboard where people can see it more friendly and add support to more tasks or tokens. So, for example, adding support with decentraland or crypto box, all things like that, that's for gold. Right now, it's live. You can see here is the demo achievementchecker, Herokuapp.com. Just input your address and you're going to see the current status of your application. The team is Christian Espinosa, Oscar presidente, and Robert Mojit. We are part of the community, so we're pretty much building this for our communities.
01:20:28.920 - 01:20:56.720, Speaker A: We work a lot with coffee stuff and we wanted like, small break, so we decided to build something for our community. Thank you. Sorry for the noise. Can we ask questions? Yeah, sorry. Okay. Yeah. This is so creative.
01:20:56.720 - 01:21:47.490, Speaker A: So what is the initial challenge that people can what does it mean for me to have completed a challenge? I guess. So right now what we do is actually just read the blockchain and see if you have currently tokens or if you had in the past. So we actually also review the logs and we wanted to do something different for this hackathon. Like I said, we usually just work with the smart contracts for this. We wanted to build like, the infrastructure, and we really got surprised by how fast it went with Go. So if you saw the video, it took less than a second to retrieve all the information. And we read the logs of like six.
01:21:47.490 - 01:22:30.188, Speaker A: How did you do that? How did you read so much data so quickly using Go routines and threads? Okay, yeah, this is cool. I've seen similar projects pop up recently, like Rabbit Hole. I don't know if you've seen that. That was really cool. So I'm really liking this kind of trend of gamifying things, getting people to do things, to get them more involved in these projects and then giving them a reward for it. So, yeah, I just wanted to say I thought it was really cool and I hope you guys continue on this. Yeah, for sure.
01:22:30.188 - 01:23:10.830, Speaker A: Like I said, we are building this for a small scavenger hunt for our community, so we want to finish as soon as possible. Yeah, I really like what you built, and I could see people using this for their own communities to make it more engaging and gamifying it. So people enter the address, but do they necessarily have to prove that they are the owners of the address? Or can you enter any address right now? Well, if you put any address, then you are just going to receive I mean, the address is going to receive the price. So if it's not yours, the price is going to the other person. Gotcha. Okay, cool. Thanks.
01:23:10.830 - 01:23:39.460, Speaker A: Thank you so much. Christian And Anne that was an amazing demo. And I think one of the coolest things about this is that hacks, especially that you want to use yourselves, are even better because you can continue to build and make them a lot better. So thanks again. And with that, we'll move on to our next team, and that is team and project Sunset Supreme. So please welcome the Curvegrid team on our zoom. Hello.
01:23:39.460 - 01:24:26.026, Speaker A: Okay, can we share our video? Go for it. Okay, can everyone see? Okay, here we go. Hello, and welcome to Sunset Supreme spreadsheet blockchain machine. We're a group of engineers and interns from Curvegrid, a blockchain middleware company in Tokyo, Japan. We spend a lot of our time in the weeds of solidity and go ethereum, but we don't actually know a lot about DeFi for this hackathon. We wanted to see how we could make DeFi accessible for anyone to hack on. When it comes to numbers and calculations, what is the lowest common denominator? A spreadsheet? We present Sunset Supreme.
01:24:26.026 - 01:24:54.294, Speaker A: The spreadsheet. DFI UI But really, why spreadsheet? Well, if we consider the number of blockchain engineers globally, it's about 7000. If we think about the number of software engineers, we get all the way up to 26 million. But spreadsheet users, that's close to a billion. We wanted to make it as easy as using a formula in a spreadsheet so that anybody can hack on DeFi. We start with the Google spreadsheet and the Ethereum blockchain. And on the Ethereum blockchain, one or more DeFi smart contracts.
01:24:54.294 - 01:25:36.226, Speaker A: Now, how do we put these two together? What we wrote is a Google App script blockchain plugin. It's basically JavaScript program that connects to our multibas blockchain middleware via Rest API, which then talks to the DFI smart contracts. Our Apps script Blockchain plugin is about 1500 lines of AppScript or JavaScript code, with a full CI CD test suite integrated with GitHub actions and a demo spreadsheet showcasing interesting insights from a few DeFi projects. This is what we built. It's demo time for smooth spreadsheet style DeFi. Hi, I'm Novaru. I'm joining Curvegrid team in Tokyo as intern engineer.
01:25:36.226 - 01:26:04.106, Speaker A: Hi, I'm Dan. I'm a software engineer here at Curvegrid. So this is our demo spreadsheet. It's view only, so if you'd like to modify it, please go file, make a copy, custom formulas that allow you to do different things on the blockchain. They all start with a prefix MB, and they have integrated documentation as we pass in a transaction hash, and we get back the results of that. We also have a helper function up here if you click on multibas refresh current cell. Here's an example from the hackmoney public lock.
01:26:04.106 - 01:26:27.474, Speaker A: Where we're retrieving the total supply. This is all coming back from the blockchain in real time. We can have a single value that's returned and we can even have multiple values. What we get back is a one dimensional array. We can also compose an unsigned transaction. This gives us the ability to paste this into Geth. What we've actually got here is kind of a complete dashboard for the whole Ave lending pool core setup.
01:26:27.474 - 01:26:58.574, Speaker A: Not only can we look at the current values, but we can also look at the historical values as well. The compound c ether contract. We were able to compose this visualization of the event activity on the compound Ether smart contract because you can't be the best if you don't test. Hi. My name is Danam Kim. I'm a software engineer at Curquid. I'm sure that you guys really enjoyed the spreadsheet plugin.
01:26:58.574 - 01:27:23.670, Speaker A: A while ago. I helped the team to build a testing environment using CI workflow. Let me show you. This is the testing environment and pushing the latest code to the apps script. And then call the AppScript API. And then our spreadsheet plugin called the API of Multibass. Write the data on the spreadsheet and the written value and checking it's a true or false.
01:27:23.670 - 01:27:54.020, Speaker A: Here is that actual workflow results, some of our fail, some of our success detail in one case. And then here is the real demo and pushing the latest code to the app script and then running test. The test will be running on the actual app script and result success. Yay. Sunset supreme spreadsheet blockchain machine. Check us out on GitHub. This was amazing.
01:27:54.020 - 01:28:35.950, Speaker A: This was so cool. I was watching the entire thing thinking, for our APIs, we currently have to write a bunch of random scripts, but something like this is just so helpful for any project that's writing APIs, does it also have the ability to listen for events? It does, yes. So down here we've got, for example, events that come back from this is again, that public lock like Hack money contract. And these are coming back live from the blockchain. Wow. I'm so impressed. This is mind blowing.
01:28:35.950 - 01:28:58.742, Speaker A: Thanks. Yeah, this is super impressive. I really like the demo as well. That was quite funny. But yeah, overall, you sold it, right? There's a billion spreadsheet users in the world, and if we can get them using a spreadsheet interface for DeFi, that's awesome. So, yeah, I'm pretty blown away as well by what you've built. Yeah.
01:28:58.742 - 01:29:18.714, Speaker A: Just adding on to that, I think this is really great, and I hope you guys continue working on this. It just makes the whole space a lot more accessible to people. And I could also see just a lot more interesting things being built as a result of this. So, really great work and presentation. Great. Thank you. Thank you.
01:29:18.714 - 01:29:47.960, Speaker A: Jeff and the curvy dream. I think this is the first demo we've seen where somebody's proud to show their tests. So, thanks again for this. And I actually want to give a special shout out to Jeff and the rest of the Curvegrid team because they've been amazing help to the rest of our hacker groups for helping out with a lot of technical problems throughout the past four weeks. So they've been an amazing mentor and a hacker at the same time. And I'm so glad to see this awesome demo. And this is great.
01:29:47.960 - 01:30:26.050, Speaker A: So with that, I want to call up our next project, and that is Projectcompose Phi. So I'll let them kick off by sharing their demo. We are the Monilego team. I'm Bruno Malsani. I made the front end and product UI. And my name is Daniel Fernandez. I made the backend and the integration with the smart contract.
01:30:26.050 - 01:31:20.034, Speaker A: So what is compose phi? It's a visual tool where anyone can manually connect the DeFi Legos and compose more complex DeFi operations. So who is this for? Well, this is for teachers, students, developer, testers, anyone who wants to test the power of DeFi composability to teach, learn, play, or just use it. And how does it work? Well, it's very easy. You basically grab an element and connect it with other elements, creating a new graph that you can deploy and execute. Let me show you an example to see how it works. Let's create a graph here, compose five in mainnet directly. So, for example, I will start adding an element, ether input element.
01:31:20.034 - 01:31:50.666, Speaker A: We start with ethers, right? Then let's add splitter. For example, we can split those ethers and send one part. Let's send it to, for example, uniswap, right? And let's send the other part of ethers also to uniswap. But let's buy USDC. Now. Yes. So one part goes to uniswap to buy die.
01:31:50.666 - 01:32:31.466, Speaker A: The other one goes to uniswap to buy USDC. Then we connect this USDC with Cure, for example, to buy more. We have we can see that we have die here and die here. And we can send both die, this one and this one to another element such as Cure, this time to buy some SUSD, right? And then we can send that SUSD to an address so we can see how we compose all the instruments in a graph. And now we can deploy this graph. Let's deploy it to mainnet. Right.
01:32:31.466 - 01:32:58.274, Speaker A: I'm going to make sure this goes fast. There we go. So you can see that the transaction is deploying and the graph is being created. See here in mainnet. Okay, while it's finished, I will continue with the presentation. So how we made this. All right.
01:32:58.274 - 01:33:36.430, Speaker A: For each DeFi instrument, we create a smart contract that knows how to interact with it. And the graph that is deployed is also a smart contract that use those instruments. Those smart contracts directly connects to the blockchain to read and write. We can scale this to any DFI operation that we want. We can add almost any DeFi operation because the way we abstract the operation, we abstract in a way that is a black box that receives assets and return assets. So we can connect anything with anything. And we build up with React web3 and using some visual libraries.
01:33:36.430 - 01:34:20.110, Speaker A: What are we going to do in the future with this? Well, we hope to add more DeFi instrument and assets so people can play with it and some documentation on each DeFi instrument. So for example, a student can understand or a new DeFi developer can understand how it works and it's live on mainnet and you can test it in compose five. Let's see if the transaction finished. The transaction is still pending, so I'm going to pause the video and we'll return when it finished. Yes, the network is heavy loaded these days. All right. And the transaction was successfully mined so we can see that the contract was created seven BA and our website redirected to this URL with the contract where it just loads the address.
01:34:20.110 - 01:34:44.120, Speaker A: It gets the address and it loads the whole graph from the Smart contract. If we refresh here, we can see that it does the same. It's all on Mainet. Right. And now I'm going to execute this graph. I'm going to send some ethers and get some SUSD, but I don't have any. So for example, let's send some 0.1
01:34:44.120 - 01:35:26.676, Speaker A: ethers here and I'm going to get some SUSD in my address. We can see that my current account doesn't have any SUSD and I copy my address exit here. And now I'm going to execute the graph to get some with all this complex arbitrage, get some SUSD to my account. It's ready to execute and I execute it. Let's see if we can speed up a bit. There we go. All right, here we go.
01:35:26.676 - 01:35:45.144, Speaker A: Transaction has been executed, I think. Let's see. Okay, I think it was confirmed already. Okay, that was pretty fast. Not yet. See transaction no, because MetaMask says it was executed, but not okay. Yeah, it finished.
01:35:45.144 - 01:36:01.120, Speaker A: Sorry. Yeah, we can see here that it finished. Sorry for that was very fast, faster than we expected. And it executed all the instruments. And I should have got some SGSD. Let's see. There we go.
01:36:01.120 - 01:36:15.910, Speaker A: I got some SGSD at the end. So it was a quite complex graph. Not quite, there are more complex one. Let me show you some others that we made. Also very fast. I hope we have some time. We have things that are pretty crazy like this.
01:36:15.910 - 01:36:40.350, Speaker A: You can check here. It's a graph that has a flash swap, direct cure, uniswap wraps, f. It returns everything to the flash swap. So yeah, you can get as complex as as you want. All right, that's all for us. We hope you like it. Trade in composite five.
01:36:40.350 - 01:36:56.364, Speaker A: Thank you. So exciting. I have a question. So if you deployed a graph, can I use that graph? Yeah, you can use it. Anyone can use it, please. Okay. You can use it as a DeFi snap.
01:36:56.364 - 01:37:22.040, Speaker A: Also like get your own snaps. Yeah. That's so cool. I think it makes it really accessible for someone who doesn't know how to code to go ahead and create these really complex financial instruments. So it's so exciting. Thanks. This is just making it easier for everyday people to get more involved with DeFi without having to code up things.
01:37:22.040 - 01:37:37.712, Speaker A: These drag and drop tools are awesome. Great work guys. Thank you. Thank you. Yeah, same situation. I love this and this is actually something I would send to people when they're curious about DeFi and want to learn more and experiment. I just love that it's visual and accessible for people.
01:37:37.712 - 01:38:12.990, Speaker A: So I really hope you continue working on this. Absolutely, for sure. Thank you so much. And with that actually I just want to make a comment that majority of the projects that have presented today and throughout this week are actually live on mainnet. So that is an amazing to just remind everybody of that you are in a position to just try them out live with a big asterisk though but they're live. And with that we'll move on to our next demo and that is team Meta TX. So I know they've already started the screen share I'll let them take away and kick off the video.
01:38:12.990 - 01:39:55.710, Speaker A: This is basically two ideas. The first one is a metatransaction system that allow contract receiver to work with any metatransaction processor including GSM and any future one. This in contrast with current solution that requires a contract to hard code a trustee forwarder or having a central authority mechanism to upgrade in the system I will present the user is in full control which meta transaction. So I'm going to set my name MetaMask for the demo and then I will use yes. So I put my name and I confirm and here what's happening is that the application is checking if me as a user have already approved the open GSN contract here it decides that no then there is a EIP seven one two type of message that let me approve GSN. Once I have this thing that you I don't need to make a transaction, I can pass it as part of a special meta transaction that still goes through GS. So here I approve the transaction, the meta transaction I mean and then my name itself here.
01:39:55.710 - 01:40:59.232, Speaker A: Now that was the first idea and the nice thing about this is that in term of smart contract it is very similar to how you will implement a normal GSN metatron receiver. The main difference is that it asks the registry whether the registry itself is a relatively simple contract that can be deployed that don't require any specific metatransaction system. It doesn't need to be complex and easy. Now, the second idea I want to present is this time something specific to GS. I implemented a paymaster that will use dai for paying the transaction. The demo I just did before was using the free Ether given by the GSM here. As you can see, I have ten die there.
01:40:59.232 - 01:41:30.740, Speaker A: And basically here I will depend this time. What will happen is that my application is checking whether the Premaster have approval over my die and here. So I rely on die permit mechanism that allowing me to sign a message. But again, I don't send transaction here. I combine it into the approval data. The mechanism a specific JSON that allow add extra data to the meta transaction. Then I accept the meta transaction.
01:41:30.740 - 01:42:13.690, Speaker A: The metatransaction will do the mechanism and that mechanism to allow it take my die and pay the transaction. And then you can see I spent two cent for that. This mechanism will use uniswap to transfer the die to pay. That's basically it. Thank you for watching. Thank you for presenting that. I really like the interface.
01:42:13.690 - 01:42:59.450, Speaker A: I had some audio problems, so I feel like I don't quite fully understand exactly. Yeah, there was some audio issue I couldn't resolve when I was recording, but yeah, to summarize, it's basically two solutions. The main one, I mean, the one I'm more proud of is basically the mechanisms that allow users to control which metatransaction system they can use. So traditionally, like GSN require what we call the sender trick. And unfortunately, it requires the contract developer to decide which system that you put. With my solution, the user decides instead. Cool.
01:42:59.450 - 01:43:18.490, Speaker A: Yeah. I like that you're giving people more accessibility to choosing. Yeah, I like the interface. I thought it was pretty nice. That was really cool to see it. To choose that you could spend your die set of your ETH. Yes.
01:43:18.490 - 01:43:53.770, Speaker A: Actually, in the video, it's the uniswap to actually use to do that. I mock it only on the testnet I launched, I didn't have time to actually I was making a game before, but then it was too ambitious, and then I was looking at how to improve the user experience, and then I decided to finish with that. Yeah, this was great. Giving users the ability to pay transaction fees in things other than ETH is always good. So, yeah, great job on the project. Thank you. Awesome.
01:43:53.770 - 01:44:20.210, Speaker A: Thank you so much, Ronan. And with that, we'll move on to our next demo. And as a reminder, we only have two more teams to go. So please welcome our second last team, Kahoot. And they're going to show off their quiz app. Hello. Hi, guys.
01:44:20.210 - 01:44:54.380, Speaker A: I will show you the video. Hey, guys. We have built an app to play Kahoot challenges with prizes distributed via Ethereum. So as the first step, I enter my private key and then I create challenge on Kahoot. So this is the Kahoot URL, and for that Kahoot challenge, I should create a crypto space. I said initial bet. And now let's wait for crypto space to be created.
01:44:54.380 - 01:45:28.550, Speaker A: Every participant will put the same bet and then winner will get this. Also, looks like Space is created. Now I'll share URL with Vadim. So after Space creation transaction is mined, vadim would be able to join this crypto space. Let's wait for him. As you can see, we are using Ethereum name system. So I don't have to type my name into up.
01:45:28.550 - 01:45:57.730, Speaker A: Just appears here. Are you joining Vadim? Yeah, I'm joining. Let's wait for him when Vadim will join. Oh, I can see him, right? Oh, and also let's wait for Anna to join us. The prize gets bigger. Cool. Oh, I can see her already.
01:45:57.730 - 01:46:53.264, Speaker A: Now let's play. So I enter matching nickname the same as on contract. And actually, if someone else plays this Cahoot challenge with a different name, we will distribute prices evenly. So it's hard to cheat. And while we're playing Wedding, could you tell about how this thing is built from the smart contract perspective? We've deployed a smart contract and keep playing Wedding. Keep playing. Okay.
01:46:53.264 - 01:47:56.740, Speaker A: It's hard to say, but we created a smart contract that makes request to changing Oracle and changing makes requests to our backend proxy, which goes to the Kahoot IP and gets winner of the change from it. So our iOS app interacts with smart contract people can, you know, power as well. Yeah, and we've made some security checks for people. Okay, looks like I'm almost done. How are you doing? Wait a SEC. Last question for Anna and let's see who wins. Okay, it looks like Anna have lost and looks like Ivan have won.
01:47:56.740 - 01:48:08.024, Speaker A: So Ivan gets prize and Ana just leave the game. Thank you. Bye. Bye, Vadim. Nice play. Bye. Yeah, here it is.
01:48:08.024 - 01:48:44.164, Speaker A: Hey, guys. Hey. That was a really interesting idea. I like how you're like Vadim. Explain it while also playing the game. So you're going to lose all the ETH, and I'm going to get just the random flowers. So each person stakes the same amount, or can they stake different amounts? In basic version, they just bet the equal amount.
01:48:44.164 - 01:49:48.760, Speaker A: Just for simplicity. I was wondering, can you also generalize this to other games? Like poker, for example? Yeah, sure. The only thing to do is to make our proxy to parse the JSON AP to work better with Oracle. And that's all we thought about to make chess, but then we just tried the Cahoot. Yeah, we were looking for games with Open, not so much. So excuse me, is this Live, where I can try using this now it's on Robston and we have to send you an app via the slide. Yeah, I think it's really cool and something I would use with friends.
01:49:48.760 - 01:50:10.416, Speaker A: I could totally see getting a group together to play this. I really like that. Use ENS and make it more accessible to people and yeah, like, I thought it was awesome. Thank you. Thank you. Yeah, the ENS support was great. And I like how you're kind of merging the Web Two and Web Three worlds by building this app.
01:50:10.416 - 01:50:22.372, Speaker A: So, yeah, great job, guys. Thank you. Thanks. Awesome. Thank you so much. Cahoot. And with that, we are going to move on to our last presentation of the day.
01:50:22.372 - 01:51:08.832, Speaker A: And this is a project that is making a DeFi plugin for Vs code, and the project is appropriately titled DeFi Support for Vs Code. So please welcome Eric and let you share your video. Introducing defy language support for Vs code. My name is Eric Lau and this is my project submission for Hack Money 2020. The problem that exists today is that Ides provide generic support for programming languages and libraries. However, they don't provide any Ethereum domain specific knowledge outside of solidity. Developers typically need to use external tools to look up things such as Ethereum addresses, ENS names, token addresses, contract information, and so on.
01:51:08.832 - 01:51:48.508, Speaker A: To solve this problem, I wrote a Vs code extension for DeFi support when writing node JS applications. This gives you live on chain data, live market data, as well as programming model support for common Ethereum DeFi scenarios. Let's take a look. The extension is available on the Vs code marketplace by searching for Ethereum DeFi. First, let's look at Ethereum addresses. Addresses, private keys, and ENS names are all detected in your source code. Above each address and private key are links that you can click on to bring you to the Ether scan page for mainnets and testnets.
01:51:48.508 - 01:52:21.732, Speaker A: Private keys resolve to the public key so that you can verify that the address matches with what you're expecting. Diagnostic warnings are shown for checksums. An error is shown if an address fails checksum or if an address is not a checksum address. You can quick fix to convert it to a checksum address. You can hover over Ethereum addresses to see the live information for both the Ether balance as well as tokens. Also, notice the live market data showing the price of the tokens as well as their total value. Next, let's look at ENS names.
01:52:21.732 - 01:53:30.120, Speaker A: There's two way resolution for ENS names, both from the address to the ENS name or from ENS name to the address you can automatically convert from one to the other. Now let's look at some DeFi programming examples. Press CTRL space to do code completion where you have options to insert various DeFi, snippets or token addresses. A uniswap trade is as simple as choosing the Snippet, then doing code completion for the tokens that you want. Notice the live market data hover over a token address for its live data as well. Now let's see how this helps with using the pTokens SDK. Insert the Snippet, paste the private key, then copy the public address shown.
01:53:30.120 - 01:54:23.420, Speaker A: Now you can insert a Snippet for generating a PPDC deposit address to tokenize bitcoin on Ethereum and paste the public address that you copied. Now let's move on to how this was made. This solution uses the language server protocol this is the industry standard for providing language features in text editors and Ides. The extension implements both a language server and a language client that communicates with each other through this protocol. This allows the solution to be easily extendable to any other IDE for live onchain data. This solution uses Infura as the Web three provider, and amber data for live market data for Ethereum addresses and tokens. The next steps for this project are to support local development blockchains such as Ganesh so that you can get live data for addresses on your local chain.
01:54:23.420 - 01:54:56.096, Speaker A: Deeper programming model support such as contract interactions and other DeFi SDKs. And finally, to get this into the hands of developers, to get feedback on it and to make it as useful as possible for writing ethereum DeFi applications. Thank you for your time. I love it. This is so exciting. I'm honestly surprised this doesn't exist yet. Can I use it right now? Can I add it as a Vs code extension? Yeah, it's available on the Vs code marketplace.
01:54:56.096 - 01:55:21.336, Speaker A: You can install it and use it. Okay, awesome. Yeah, I guess I'll try it and give you feedback. Okay, great. Yeah, I can imagine this is going to be a really awesome tool for developers. As someone who's not a developer himself, I still can see the huge value add here. And yeah, I'm surprised it wasn't something that already existed considering how much value it adds.
01:55:21.336 - 01:55:39.824, Speaker A: So great work. Thanks. Yeah, I completely agree. I love this, and I hope that you continue working on it. When I was first learning how to build smart contracts, something like this would have been extremely helpful for me, so I could see this being used by a lot of people. So, yeah, really great work. Thank you.
01:55:39.824 - 01:55:53.690, Speaker A: Wait, quick question. What is the extension name called? To. You can search for Ethereum DeFi and you find it on the marketplace. It's called Ethereum DeFi Language Support. Okay, cool. Thanks. This is so cool.
01:55:53.690 - 01:56:42.820, Speaker A: Awesome. And that wraps up our judging slot for today. I'm going to just bring this up. I want to thank all of our teams who presented and congratulate them on finishing their demo, but also just kind of dedicating the last four weeks to work on and build the project that they showed off to everybody. So a lot of these projects are already available and ready for anybody to use, so we'll kind of follow up on our Twitter with a lot of links to check these projects out. And I want to thank our judges again for doing all the hard work and giving a lot of these projects to feedback and comments and just kind of addressing and sharing their excitement. So thanks again to everybody who tuned in on the live stream, and we'll see you all tomorrow afternoon for the next judging slot.
01:56:42.820 - 01:56:58.780, Speaker A: Awesome. Thanks, everyone. Thank you guys. It was so exciting seeing everyone's awesome projects. Yeah, really impressive. It makes me so excited about ethereum. I was already excited, but I'm more excited.
