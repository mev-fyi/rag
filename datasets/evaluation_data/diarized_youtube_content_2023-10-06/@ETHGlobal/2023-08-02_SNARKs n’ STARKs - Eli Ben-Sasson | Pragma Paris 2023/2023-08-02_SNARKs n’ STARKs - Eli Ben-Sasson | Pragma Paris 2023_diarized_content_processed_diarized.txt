00:00:07.530 - 00:00:30.630, Speaker A: All right, so next up is our second interview for the day. You've probably all heard of Starcore by now, and there's a lot of things that have happened the last five years, especially in the field of cryptography. And we're going to talk about kind of how that's changed, how that's evolved, and how we've kind of come close to productizing it. And to do that, I want to bring on Ellie from Starquare to share all of his thoughts. So without further ado, please welcome Ellie on stage.
00:00:37.050 - 00:00:42.762, Speaker B: Hello, everyone. Hi, welcome. Thank you. Thanks for having me.
00:00:42.896 - 00:01:10.180, Speaker A: You've been in the field of cryptography for quite some time. Most people know you in this room from your contributions to cryptography, cryptocurrency world, but also there's been a lot more than that. And what I want to do is kind of just get context from you on how did you get more involved in the world of crypto, and especially from founding Zcash to Starquare? What's the history been and how did you get started?
00:01:10.870 - 00:02:02.110, Speaker B: Yeah, so I was a mathematician and theoretical computer scientist. So I was writing white papers about math theorems. And around 2008, I started actually dabbling and implementing some of those systems with no good purpose in sight. But I thought it's a fun project. In 2013, I went to the conference of Bitcoin and San Jose, and there that was the place where I was red pilled and realized that the research I was doing has a lot of applications to blockchains, in particular to two specific areas. One is privacy and the other is scalability. So the first thing we did was write an academic paper that was the precursor to Zcash.
00:02:02.110 - 00:02:49.566, Speaker B: We were seven academic co authors. All of us, along with the Zcash engineering team, co founded Zcash. That was around 2015. But always I had passion for a different branch of and that was using something called ZK Snarks, a particular version of them based on the Ggpr protocol for those who know. And I was still more passionate about things that are based on a different branch of math that is better in many cryptographic and mathematical senses. And that's what led to Starks around 2018. And then we founded Starkware with a purpose not of solving privacy, but more scalability.
00:02:49.566 - 00:03:10.018, Speaker B: And when we started this thing, this was already five years ago, no one was talking about scalability and no one was talking about scalability using proofs except for us. So we have been at it for five years, and now I think a lot of the world is talking about these things, and it's very good.
00:03:10.204 - 00:03:29.920, Speaker A: That's amazing. So we're going to, in a way, try to figure out what is the right balance of going super deep and super high level. But let's kind of start with some high level stuff. What made you think about the concept of Starks? Could you also contrast that with what is the difference between Snark and a stark here.
00:03:34.210 - 00:04:16.030, Speaker B: First of all, there's a lot of overlap between what is a Stark and what is a Snark, and some things can be both. But broadly speaking, when people talk about Snarks, they usually have in mind something that uses a branch of cryptography that is known as elliptic curve cryptography. And it has some advantages. The main one is that the proof that comes out is around 200 bytes long, or around a kilobyte long in certain versions. But there are a lot of caveats to this approach. It requires what's known as a trusted setup. Someone that you trust or some process that you trust has to generate parameters for this thing.
00:04:16.030 - 00:04:56.118, Speaker B: You need to work necessarily over pretty large domains that slow down computation, and it's prone to attacks by quantum computers and other problems. There's this other way to build proof systems which uses more math. You need to work harder on the math side and prove stuff. But then you get things that are more generic, robust, and safer. So they're not attackable by quantum computers. You can instantiate them over any finite field. They don't require any setup.
00:04:56.118 - 00:05:19.250, Speaker B: So overall, they're better. The one area where they don't match up to the Snarks is in proof length. So instead of being, let's say, 1 KB, they're in the area of like 50 to 100 KB. So anyways but I think Starks are a safer, more future proof way to build systems, and they're also more efficient.
00:05:19.990 - 00:05:38.398, Speaker A: And mostly out of my curiosity, is what you kind of just said a comment on the current versions of what Starks are? Or this is like just at the end, this is the boundaries here, and we can't make that better. Like, we can't think about reducing proof sizes over time or kind of thinking about recursion here or kind of other optimizations.
00:05:38.594 - 00:06:13.778, Speaker B: Yeah, there's ongoing research all the time. You can definitely reduce some of these things and expand them and generalize them. I mean, we've shown recently how initially you needed to pick your finite fields in a very particular way. We showed how you can do it over any finite fields. The amount of security that you can prove with math has been increasing over time. So overall, things are getting better. Whether using that approach you can go down to the size of a single Snark, I'm not sure.
00:06:13.778 - 00:07:11.830, Speaker B: But the thing that matters most for scalability is actually amortized cost. The question is how many? If you think about proof length, you want to ask how many? You take size of a proof, and then you want to divide it by the amount of computation that it proves and covers. And according to that metric, already today in production, Starks drastically outperform Snarks because the capacity and the amount of transactions that they can cover is much bigger. We, in production can submit today proofs using recursion of upwards of, I think, 10 million mints of NFTs. So if the proof is 100 KB long, but you've proved 10 million NFTs. It means that each NFT costs you whatever is the answer. When you divide 100,000 by 10 million.
00:07:11.830 - 00:07:21.420, Speaker B: It's a small number, but I don't thousandth of a dollar cent thousand of a kilobytes. So maybe it's a byte, so maybe it's one byte per.
00:07:21.870 - 00:07:45.634, Speaker A: If we got the math that's that's massive. I mean, it's multiple orders of magnitude. Are there things that are uniquely enabled by just Starks in the sense of kind of new applications of these proving systems that you get to not get from not just Starks but just like overall looking at just another smart contract code or different properties of blockchains, what.
00:07:45.752 - 00:08:53.510, Speaker B: Proof systems allow you to do is massively scale. I mean, basically, if you think of the blockchain as this really trusted platform that has a lot of integrity, it operates at a certain if you think of it as some kind of a computer, a really trusted computer, it operates at a rather low rate or capacity compared to the demand. And that's why you have these huge costs. When you submit a transaction, it's congested because everyone wants it. Well, if you use a proof system and Starks are best in terms of scalability, you basically take this computer that is, let's say Ethereum and you ask it to run the verification process of verifying a Stark. When you do that, the amount of computation being attested to and verified by Ethereum jumps exponentially. So you can have the same running time for Ethereum or the same block capacity and gas, but assert integrity over a much greater scale.
00:08:53.510 - 00:09:34.530, Speaker B: This can be done in both systems in many flavors of proof systems currently and probably for a very long time. The most scale will be given by various things from the family of Starks. I think this will be an ongoing theme and the other aspect you can get is various shades of privacy. You can have full blown zero knowledge, which means that mathematically speaking, nothing is revealed by the proof. But also you can have layer threes and fractal scaling where a single operator is working offline processing a lot of transactions and then the blockchain doesn't have any way to know what has gone on in those transactions.
00:09:37.190 - 00:09:48.700, Speaker A: So effectively you have now a lot more opportunities to actually make things more accessible but the properties stay kind of the same and in a way guaranteed and that allows you to do the same thing.
00:09:51.230 - 00:10:41.910, Speaker B: Know StarkNet is live. It just went last week through a very dramatic increase in its throughput and there's going to be more increases in the throughput. It has a modern ergonomic and safe programming language called Cairo that is Rust inspired. Those of you who are participating in the hackathon, I strongly encourage you to look into doing your projects over Cairo, testing it out. It's a very pleasant experience. For instance, Moody Salem from Uniswap has left Uniswap founded an AMM startup that is going to deploy on StarkNet. He says that he picked Cairo up in a small number of weeks and it's actually today his preferred language for writing smart contracts, irrespective of the scale and cost benefits given by StarkNet.
00:10:41.910 - 00:11:35.654, Speaker B: So I strongly encourage you to look into developing over Cairo. And the kind of applications that are now spawning off on top of StarkNet are very, very interesting. First of all, all of the native wallets there, because StarkNet has account abstraction at the core level, there's no EOA versus smart contracts. Everything is smart contracts, all of the accounts. So the two leading wallets over StarkNet which are Argent and Braavos, have very pleasant UX for their users, even for first time users. And account abstraction is really picking up. There are on chain gaming projects that are going to be announcing deployment as soon as tomorrow or over the next few weeks and there's a lot of excitement.
00:11:35.654 - 00:11:43.950, Speaker B: So on chain gaming is something that's going to be really dramatic on StarkNet. It cannot be done anyplace else. And that's just the beginning.
00:11:45.810 - 00:12:16.018, Speaker A: This actually fits really well into one of the questions I had, which is as you kind of introduce a system like Starks here and you kind of already talked about Cairo, you kind of had to make a different decision around what people had access to, which is being able to deploy solidity code immediately or people had to kind of learn a new thing. What kind of was the framework around making that choice of, hey, instead of thinking about compatibility in different ways or Bridging, we have to kind of enforce a new way to let them come up with a paradigm for programming.
00:12:16.194 - 00:12:56.994, Speaker B: Yeah. So I guess this question refers to so on StarkNet you program using a new programming language rust inspired called Cairo. Then the question is most of the other projects trying to scale ethereum using validity proofs are calling themselves ZKE EVM. The word ZKE is a bit of a misnomer because it's not about privacy. It uses validity proofs. But anyways, what they're promising developers is you just take your solidity code, you press a button and it automatically works just at much higher scale. Well, the issue well, there are several issues with this.
00:12:56.994 - 00:13:32.878, Speaker B: First of all, there is fine print. And if you read the fine print, even in that approach, you'll see that it's not as easy as pressing a button. I'll double click what is meant by this. Fine print in the EVM ketchups are very cheap, so you use them everywhere. However, they are extremely expensive to prove. So you have this option. Either you go with something that is very slow and very costly, and actually you lose pretty much all of the scale that a validity roll up could give you.
00:13:32.878 - 00:14:22.506, Speaker B: Or as a developer, you need to start modifying your code and replace that. Now if you start modifying your code, things start breaking, you need to fix them. A lot of the texting tools and so on and so forth don't work as well. Now, Ketchick is an extreme example, but there are many, many other cases where if you just want to press a button and have it working, then it doesn't. And then you have to also deal with the fact that your Solidity code on Ethereum assumes a monolithic state of Ethereum, but whenever you move to a layer two, you need to know what kind of state you're talking about. So any which way, you're going to need to modify your code. But the bigger issue is that if you really want to maximize the scale out of your proving technology, you probably are going to be better off using a language that is suited for that.
00:14:22.506 - 00:15:28.218, Speaker B: By analogy, I don't know of anyone using compilers or transpilers from Python or Rust into Solidity, even though someone could write a compiler. And arguably Rust or Python are more documented and probably better programming languages for general computation than Solidity. Why isn't anyone doing this? Well, because if you're going to build a smart contract on Ethereum, you are best off if you use the native language for that. It's the exact same thing for validity roll ups. And when we started Starquare, we said scaling the right way to do it is with this technology proof technology and the best technology in that class is Starks. And when we said that five years ago, everyone either didn't believe that it's a problem or said there's no way that validity proofs would work. And if they agreed that validity proofs would work, they said it's not going to be Starks.
00:15:28.218 - 00:16:05.538, Speaker B: Now, when we came out with Chiro and StarkNet, the initial statement was, oh, this is going to be such a big deterring factor, no one's going to come like everyone's going to stay with Solidity. Well, the numbers are out and it's completely the opposite. So if you go to the yearly developer report by Electriccoin Capital, you'll see that the largest ecosystem that has seen any positive growth in full time developers over the past year is StarkNet, according to their reports, 38, which tracks all.
00:16:05.544 - 00:16:07.774, Speaker A: The GitHub commits and everything open source.
00:16:07.902 - 00:16:45.550, Speaker B: Yeah, I talked to many, many people from the ecosystem, the statements that say, oh, it's going to be hard to convince developers to come and learn Cairo has not panned out. People are very excited about it. I mentioned Moody Salem from Uniswap, but many, many other teams are very eager to deploy their Cairo contracts. It's an amazing language. Again, those of you in the hackathon contemplate or explore deploying on it, you won't be disappointed.
00:16:45.890 - 00:17:00.850, Speaker A: So maybe then, out of curiosity, do you think that other scalability approaches that are trying to get to EVM compatibility are just taking a wrong approach? Or there's multiple ways to kind of solve this and you just think yours is long term more scalable.
00:17:04.070 - 00:17:33.920, Speaker B: Several years ago, I said almost all scaling solutions are going to be Stark based. I think today it's panning out. So I saw that Alexunkowski was here earlier. They just announced that they're moving to Bujum, which is Stark system. All of the polygon systems, hermes, Polygon, zero, maiden are Stark based. Risk zero is stark based. Of course, StarkNet is everyone's going there.
00:17:33.920 - 00:18:24.414, Speaker B: I'm saying now, I've been saying this for a while, everyone's going to adopt Cairo and if not, they will have virtual machines that follow the same route. So what is that route? Let's call it algebraic extreme reduced instruction set. Right? RISC stands for reduced instruction set. The philosophy behind Cairo is you go for something that is extremely reduced instruction sets so that the constraints that define a step of computation are very, very simple and minimal. And then you start building from there. So I have no doubt that either folks will adopt Cairo as is because it will be like solidity, it will have all of this amazing tooling. Foundry was announced yesterday coming on.
00:18:24.414 - 00:18:36.260, Speaker B: Starknet's already deployed that's option one. And if not, they will go down the same route. They will say, here's a risk, algebraic risk kind of virtual machine, let's build for it.
00:18:37.350 - 00:18:46.630, Speaker A: So in this case, do you consider Ethereum as an ally or a competitor or kind of how does this connect with Ethereum, the ecosystem?
00:18:47.530 - 00:19:24.194, Speaker B: Ethereum is the base security layer that StarkNet cannot live without. Ethereum is the most trusted, decentralized, broadest layer, one that allows general computation. Right? Bitcoin is also amazing, but bitcoin just doesn't allow general computation. So we cannot deploy Starks on it today. So Ethereum, we need it for its broadness and for the security. So certainly StarkNet is not a competition to Ethereum. It is something that enhances the amount of computation and the range of things that Ethereum can do.
00:19:24.194 - 00:19:36.610, Speaker B: And what is most missing right now is, again, more developers to build either infrastructure or just cool DApps that will be harnessing all of this computation on Ethereum.
00:19:36.950 - 00:19:46.070, Speaker A: So maybe just digging more into that. Are there any kind of particular things you want to see in the StarkNet ecosystem or things that you think are missing but critical to the growth?
00:19:47.850 - 00:20:26.120, Speaker B: First of all, there's a lot of stuff missing. For instance, decentralization is not yet turned on right now. The sequencing is done in a central way and the proving this will be changed. We'll move to something tendermint based that has both the proving and the sequencing. Decentralized under open source code for both approver and the sequencer. Another thing that is missing is Paris is the epicenter of StarkNet. All of the amazing projects and teams are here, but we need more of that in other cities and places in the world.
00:20:26.120 - 00:21:03.630, Speaker B: The StarkNet Foundation that is now up and running and is already giving grants to developer advocates and to parties that are doing hackathons and meetups. And so on is eagerly looking to expand, even though the developer ecosystem is big and growing very fast. There's so much more that can be done in many other areas of the globe. So please reach out if you have thoughts on or you want to run a meetup or something, or a hackathon in your location, especially if it's not Paris. Paris is covered.
00:21:04.390 - 00:21:22.946, Speaker A: That's the only way to get everybody to use Cairo then. Right. Over the past few years of kind of running Starquare and going from academia to kind of company building and being part of this ecosystem, what are kind of some of the things you've been wrong about, just largely have learned?
00:21:23.058 - 00:22:07.510, Speaker B: Yeah. What have I been wrong about? A lot. First of all, I should say, well, one thing I've always been wrong about and probably still am wrong about is the time frames that take for things to happen. So I'm very optimistic, and I make projections like, this is going to happen within a year, half a year, and then these things take longer, both in terms of development and in terms of adoption. So I think directionally, a lot of the stuff that we said was directionally correct, but it takes often more time than you think. So I was definitely wrong on the timescales.
00:22:11.370 - 00:22:14.870, Speaker A: What else, what about company building overall?
00:22:17.450 - 00:22:44.460, Speaker B: Well, I have, like I guess I saw three examples. So I tried to found a company which we closed pre funding in like then I saw Zcash and then Starquare, and maybe now the foundation, I get to see it. I don't have like a broad view, I would say that what I'm very proud of.
