00:00:06.970 - 00:00:07.278, Speaker A: Awesome.
00:00:07.364 - 00:00:36.166, Speaker B: Okay, great. So we're going to go right in to our next conversation, which is going to be an actual workshop. So this is going to be the longest talk of the day. It's going to be kind of a full and workshop of how to program on the febm. So we're really excited to have Zach here from the FBM team to kind of walk through this workshop with us. So, yeah, I'll turn it over to Zach to share his screen and jump in from here. But yeah, really nice to have you here and thank you for being here.
00:00:36.268 - 00:00:51.120, Speaker C: Awesome. Thanks, Jacob. Excited to be here. And hey, everyone excited to see what everyone builds on the Fem and the Fevm specifically. And that is what my talk is going to be on. So let me go ahead and share my screen.
00:00:55.230 - 00:00:58.778, Speaker D: All right, so, yes, today I'm going.
00:00:58.784 - 00:01:58.764, Speaker C: To be going over a demo on programming on the Fevm. And if you're familiar at all with the EVM, programming on the Fevm is almost exactly the same. So this is a note I've been including at the beginning of my presentations, and I see a lot going around. But when you're programming in the web three space, there's a lot of terminology and a lot of new projects and a lot of new technology, and information can get really overwhelming, and it can really feel like you don't know a lot or you don't know what you're doing. This jargon here was some notes I was taking just a couple of weeks ago in Lisbon. So I went there for a bunch of protocol labs and filecoin conferences, and this was me trying to understand the addressing schemes in filecoin from my coworkers.
00:01:58.812 - 00:01:59.024, Speaker A: Right?
00:01:59.062 - 00:02:25.130, Speaker C: So I'm over here. I'm learning this all with you all. So don't feel lost. Don't feel bad to ask questions. We're all in this together. All right, so I'm going to try to focus this on just a straight demo. We'll do a little bit of work in remakes, a little bit work in hard hat, and I'll point out some resources you can go to.
00:02:25.130 - 00:03:13.050, Speaker C: And if you didn't know, the first MetaMask transaction was actually tested just about a month ago, right before Phil Lisbon. So the engineering team has been working at a breakneck pace to get all of the EVM features that you're used to working with in the Ethereum world. And yeah, so we just had the first MetaMask transaction and just got some events added in. Keep on the lookout for more features being added in. All right, so we're going to go through Remix. If you're not familiar. Remix is an online IDE for developing EVM smart contracts, specifically in Solidity.
00:03:13.050 - 00:04:09.240, Speaker C: And yeah, this is kind of a great first place to test out any ideas you have just to get used to EVM development if you're not used to it. So let's go ahead and first thing you're going to want to do is add in a MetaMask extension to your browser, right? So I already have it downloaded, but you can go to type in MetaMask, click on here and follow the instructions to download MetaMask. The walkthrough here is pretty clear. And once you have MetaMask installed I know they were kind of talking about this in the last talk, but just to walk you through it, you can go to Chainlist.org, which I already have up right here. And we're going to be doing everything on testnet. Mainnet is not yet ready.
00:04:09.240 - 00:04:43.344, Speaker C: So we're going to go ahead and click here testnets. We're going to type in Wallaby. So that's the name of the filecoin testnet. And you can click Connect Wallet and it will add in the information straight into MetaMask. I already have it added in since I've been working with it, but just so you can see what that flow is like. Okay, so once we've got Wallaby added into our MetaMask, you're going to want to get some Tfill in there, right?
00:04:43.382 - 00:04:43.536, Speaker A: So.
00:04:43.558 - 00:04:48.176, Speaker C: I already have some tfill. But again, to show you how that's.
00:04:48.208 - 00:04:51.876, Speaker D: Done step by step, the first thing.
00:04:51.898 - 00:05:44.532, Speaker C: You'Re going to want to do is get your T four address, right? So in the ethereum world, all addressing is done with zero X and then yada, yada, yada, your hex. But in Filecoin, the addressing scheme is different and every runtime that eventually is added on to the FVM could have its own addressing scheme, right? So this is why the F four addressing scheme was created, right? So if you go to explore Glyph IO ethereum, you'll have this handy little screen here that kind of automatically connects to your MetaMask and converts your ethereum address to the equivalent F four address, which is just kind of an abstracted away address where we can add any other addressing scheme to.
00:05:44.666 - 00:05:45.350, Speaker A: Right?
00:05:46.780 - 00:06:01.916, Speaker C: And if we switch it to Wallabynet, you'll see the only difference is it's a T four, right, for testnet address. So this T four address corresponds to this ethereum address. That will basically be only important for.
00:06:01.938 - 00:06:09.820, Speaker D: The next step because now we are going to get testnet funds.
00:06:13.980 - 00:06:17.112, Speaker C: So if I copy the T four.
00:06:17.166 - 00:06:19.528, Speaker D: Address, I got, here we go to.
00:06:19.534 - 00:06:38.736, Speaker C: Wallaby network, paste it in. Got to go through the captcha. These CAPTCHAs are always really interesting. You can get some funny ones today. We got cupcakes. Of course, they try to trick us by putting regular cakes in. So I think I select all that.
00:06:38.758 - 00:06:39.136, Speaker A: Yes.
00:06:39.238 - 00:07:24.440, Speaker C: And just select send. And that should send 5000 T fill straight to your MetaMask wallet. Again, this is testnet currency, so unfortunately not real fill. We're not just printing real money here, but that would be awesome. Okay, so now we've got MetaMask, we've got the network added on MetaMask and we've got funds to pay for transaction fees in our wallet. We will go ahead and go to remix. All right, so here's kind of a layout on Remix.
00:07:24.440 - 00:08:08.868, Speaker C: The main things that you will need here are the file sub tab here. If you go down, you'll see a compiler, a deploy tab and a debugger. So we're going to start over here in the file explorer and we're just going to go ahead and click on the storage contract. So Remix has a bunch of built in simple contracts just use as an example. You'll see a storage sol is simple read, write contract. It has a single variable number, a function store which will set that variable to a value and retrieve will get.
00:08:08.874 - 00:08:10.070, Speaker D: Us the latest value.
00:08:13.160 - 00:08:55.600, Speaker C: So if we go into the compiler tab, hit compile, we need to make sure everything is good. It's compiling storage sol says all right, it's fine. And now we need to deploy our compiled code to the filecoin wallaby testnet. So one of the most important things you need to do here is click injected provider MetaMask. This will tell Remix, hey, I want to communicate with MetaMask. MetaMask is going to be the gateway I send transactions through and otherwise if you stay on Remix VM, that's just like a local copy of the blockchain of like an ethereum blockchain in Remix.
00:08:55.680 - 00:08:56.310, Speaker A: Right.
00:08:57.000 - 00:09:07.080, Speaker C: So selected injected provider and if we look at that account, it indeed matches the account in my MetaMask wallet.
00:09:08.540 - 00:09:12.776, Speaker D: All right, so we'll select storage, make.
00:09:12.798 - 00:09:27.224, Speaker C: Sure that's selected hit deploy. Now MetaMask is going to come up with this transaction saying, hey, this is going to cost gas fees. Any transaction that you write to the wallaby testnet, just like a regular network costs transaction fees.
00:09:27.272 - 00:09:27.436, Speaker A: Right.
00:09:27.458 - 00:09:32.688, Speaker C: So this is why we filled up our wallet with Tfill earlier. So I'm going to go ahead and.
00:09:32.694 - 00:09:33.760, Speaker D: Click confirm.
00:09:37.070 - 00:10:35.578, Speaker C: And this will probably take a minute. So it takes 30 seconds for the wallaby testnet to include the transaction and then there's this whole design pattern that the team implemented called delayed execution. So it'll then get executed and 30 seconds later give us a transaction receipt. So it actually takes a whole minute to get this transaction in. So while we are waiting for this to go through and we'll come back and interact with it, I'll go ahead and move on and talk a little bit about the mock file coin APIs. Right, so we had the Zondax team present earlier about these, but these are extremely useful tool going forward. These will kind of enable you to test what it would be like to develop with all these filecoin native features that you don't have on other blockchains.
00:10:35.578 - 00:12:00.230, Speaker C: Right. These APIs are still being worked on to fully open, that's why we're mocking them for now. So this will kind of give you the tools to really build interesting new applications like data dows or storage lending markets because you'll have the storage deals which are already native to filecoin available to you in solidity. So yep, still taking its time. And where we'll go after this after Remix is done deploying is we'll talk about the Harder Hat Starter Kit, right? So Remix again is great for kind of just getting your feet wet and testing out smart contract development, but not the best for when you want to get into a professional workflow and actually develop smart contracts that you want users to use and you want to make sure are secure, right? So Hard Hat is a kind of local development environment you can install on your computer and use it to automate all your deployments and tests. It doesn't have the GUI, but gives you a lot more power. Okay, so Remix is still taking its time.
00:12:00.230 - 00:12:11.252, Speaker C: We may just have to move on.
00:12:11.306 - 00:12:21.950, Speaker D: If the transaction is getting stuck.
00:12:29.790 - 00:12:30.106, Speaker A: We.
00:12:30.128 - 00:12:36.720, Speaker C: Can try reloading it and give it another shot. Sometimes Remix kind of errors out.
00:12:38.770 - 00:12:42.960, Speaker D: So go to storage, we'll compile it.
00:12:43.910 - 00:12:47.650, Speaker C: Switch to injected provider MetaMask.
00:12:51.340 - 00:12:54.840, Speaker A: And deploy.
00:12:55.580 - 00:13:54.784, Speaker C: Confirm and hopefully this transaction goes through. If not, we may need to speed it up. All right, but for now, we'll go ahead and move on to Hard Hat, right? So you can find the Hard Hat in the Hard Hat Starter Kit in the filecoin GitHub right here. So we'll go ahead and click on this So filecoin project fevm Starter Kit. Okay, so here you'll have kind of a base project set up with a bunch of instructions in the README on how to get it started. We're going to go ahead and follow these instructions and get going with the Hardhead Starter Kit. All right, so here I have a terminal open.
00:13:54.784 - 00:14:01.160, Speaker C: I'm running macOS. See, I'll try to get this text bigger so everyone can see.
00:14:01.310 - 00:14:04.264, Speaker D: Just got a test folder here and.
00:14:04.302 - 00:14:11.004, Speaker C: I'm going to type in the command git clone and we can come here.
00:14:11.042 - 00:14:19.312, Speaker D: To code copy the URL, paste it in right?
00:14:19.366 - 00:14:24.400, Speaker C: So that clones our repo into the test folder.
00:14:24.980 - 00:14:32.836, Speaker D: Now we'll CD into it tab to autocomplete and we'll go ahead and open.
00:14:32.858 - 00:14:35.616, Speaker C: This in Vs code, right? So I have the Vs code shortcut.
00:14:35.648 - 00:14:40.468, Speaker D: Installed code and we've opened up that.
00:14:40.554 - 00:15:41.610, Speaker C: Folder in Vs code. Of course you can just go into your file folders and open it that way, but I prefer to do as much from the terminal as possible. You'll kind of see the structure of a Hard Hat project. We have contracts where you'll put the smart contracts you want to actually deploy onto the blockchain. You have the deploy script right here, which will you can kind of go in and customize and tell it what contracts you want to target to deploy to the blockchain and how you want to deploy them. And Tasks, where you get a lot of where Hard Hat really shines, is where you can write these customizable scripts to do just about anything you want, interact with smart contracts, write data, read data, test some things. Tasks is a very powerful kind of feature of Hard Hat, right?
00:15:43.020 - 00:15:48.364, Speaker D: So we'll open a terminal within Hard.
00:15:48.402 - 00:15:49.390, Speaker C: Hat here.
00:15:52.000 - 00:15:52.988, Speaker A: And we're just going to.
00:15:52.994 - 00:15:55.016, Speaker D: Type in Yarn in the terminal.
00:15:55.048 - 00:15:55.196, Speaker A: Right.
00:15:55.218 - 00:16:13.888, Speaker C: So this will install all of our download and install all of our packages. And again, all of these instructions are in the README and on the GitHub. So while this is going, let me.
00:16:13.894 - 00:16:17.616, Speaker D: Just double check on that remix, see.
00:16:17.638 - 00:16:18.384, Speaker C: If it's gone through.
00:16:18.422 - 00:16:18.968, Speaker D: Nope.
00:16:19.084 - 00:16:28.550, Speaker C: Something's holding up my transactions. They may not have enough gas fee, so I'll try speeding them up right here.
00:16:35.790 - 00:16:42.000, Speaker D: Just bump them up and see if that goes.
00:16:44.290 - 00:16:44.894, Speaker A: Okay.
00:16:45.012 - 00:16:46.846, Speaker C: So back to the starter kit.
00:16:46.878 - 00:16:47.460, Speaker A: Right.
00:16:48.870 - 00:16:51.490, Speaker C: So our Yarn install has completed.
00:16:53.590 - 00:16:54.898, Speaker D: And from here, what you're going to.
00:16:54.904 - 00:17:18.860, Speaker C: Want to do is, again, in order to interact with the blockchain, you need a wallet like MetaMask. You need a private key that's stored in that wallet. Right. And this is very important that you never share this private key, right. So the private key basically is your wallet. It gives you the right to make transactions for that account. And so what we're going to do is we're going to make a file here.
00:17:18.860 - 00:17:25.040, Speaker C: We don't want it there. We want it in the main repo. Just going to type env.
00:17:29.220 - 00:17:29.970, Speaker A: Right?
00:17:30.340 - 00:17:32.960, Speaker C: And we're going to type in private.
00:17:34.100 - 00:17:42.870, Speaker D: Key, all caps equals and put in quotes here.
00:17:44.600 - 00:17:59.440, Speaker C: And we'll go back to our MetaMask really doesn't want to deploy.
00:17:59.780 - 00:18:02.876, Speaker D: We'll go back to our MetaMask, we'll.
00:18:02.908 - 00:18:27.290, Speaker C: Go to account details, export, private key, and you're going to have to type in your MetaMask password. And again, I'd never show this to anyone. I'm kind of live streaming this because it's on testnet, and I never use this for anything else other than testnet development. This is kind of a dummy account for me. But we'll copy the private key.
00:18:29.020 - 00:18:29.384, Speaker A: And.
00:18:29.422 - 00:18:33.128, Speaker D: We'Ll throw it in here and save.
00:18:33.214 - 00:18:39.580, Speaker C: Right. So now Hard hat knows. Okay, this is the account I'm going to sign all of my transactions.
00:18:41.440 - 00:18:46.152, Speaker D: All right, so hey, Zach.
00:18:46.296 - 00:18:46.604, Speaker A: Hey.
00:18:46.642 - 00:18:47.500, Speaker C: How's it going?
00:18:47.650 - 00:18:48.204, Speaker A: Good.
00:18:48.322 - 00:18:55.136, Speaker B: Do you want to just zoom in a little bit on the font size for some of these two windows here just so that people can see on the stream a little bit better?
00:18:55.238 - 00:18:55.936, Speaker C: Oh, sure.
00:18:56.038 - 00:18:57.536, Speaker B: You can do command plus.
00:18:57.718 - 00:18:58.416, Speaker C: Yeah, exactly.
00:18:58.518 - 00:18:58.928, Speaker A: Perfect.
00:18:59.014 - 00:19:00.836, Speaker C: Yeah, I've got an ultra wide over.
00:19:00.858 - 00:19:04.832, Speaker D: Here, so it's easy for me to forget on streams.
00:19:04.896 - 00:19:05.684, Speaker C: Appreciate that.
00:19:05.802 - 00:19:08.804, Speaker A: No problem. Okay.
00:19:08.842 - 00:19:11.670, Speaker C: Yeah. So hopefully everyone can see that a bit better.
00:19:14.060 - 00:19:14.424, Speaker A: Yeah.
00:19:14.462 - 00:19:35.580, Speaker C: So we've saved our private key in our project. So now Hard hat knows what wallet we're going to use to transact with the blockchain. And we can actually run our first Hard hat task if I type in Yarn. Hard hat.
00:19:37.300 - 00:19:39.970, Speaker D: Get address.
00:19:41.060 - 00:19:45.090, Speaker C: Believe this address is not just address. Get address.
00:19:48.830 - 00:19:49.580, Speaker A: Enter.
00:19:54.130 - 00:20:23.286, Speaker C: Typed in get addresses. Darn hard at get address, not addresses. Right. It'll kind of do what that Glyph tool was doing in the background in the browser, only this time, it'll do it in hardhat. So it'll calculate the F four address, which we used with the Faucet right here and our actual Ethereum address. For the most part, you're going to be using this as you interact with the Fevm. Everything works just like the EVM.
00:20:23.286 - 00:21:42.020, Speaker C: So other than sending testnet fill, you can use this Ethereum address here for kind of the remainder of the tutorial, right? And if you want to check out the logic for that task, we can open the task folder, click Get Address, and you'll see here the logic we're doing when we're actually running this command. All right, so let's use this and actually deploy a smart contract, interact with it. So if we click here on Simplecoin Sol, we have a very simple contract, right? A very simple contract. Simplecoin. And this is kind of like a very basic form of like an ERC 20 contract, right? An ERC 20 token just for demonstration purposes. So I wouldn't actually make a token this way, but it has a mapping which maps any addresses to balance a constructor which sets our initial balance to 10,000. So there'll only ever be 10,000 of Simple Coin in existence.
00:21:42.020 - 00:22:16.720, Speaker C: And two functions. Or three functions. Sendcoin get balance and ETH and get balance. We're really going to be using Git balance and syncoin. So let's go ahead and deploy this contract. If you yarn hard hat deploy. Now, there is a bug in the Hard Hat kit at the moment with the deploy script that is being worked on as we speak.
00:22:16.720 - 00:22:26.260, Speaker C: But it sends the deploy transaction. The contract does get deployed, but then it returns an error. So you actually have to run it.
00:22:28.470 - 00:22:31.142, Speaker D: Run it, it'll error out.
00:22:31.276 - 00:22:49.530, Speaker C: It's going to compile it successfully. And see, it's going to say Deploying Simplecoin. This will return an error and then you just run it again and click Resume Transaction and it'll actually return the receipt of the deployment.
00:22:51.550 - 00:23:03.390, Speaker D: But to save us some time, I actually have another Vs code open right here.
00:23:03.540 - 00:23:11.890, Speaker C: So after you actually deploy all the contracts, you'll get this deployments tab right here, right? This shows that you have successful deployments.
00:23:14.310 - 00:23:14.722, Speaker A: Right?
00:23:14.776 - 00:24:09.260, Speaker C: So if I click on Simplecoin JSON, this shows me the address at which it's deployed and a bunch of the metadata. All the JSON abi data we need for that contract, it also deployed. So there's a folder here with the mock APIs. So I copied over the mock APIs from Zondex and put them in here so anyone can kind of interact with them and start building with them immediately. The main two ones are the minor API and market API. These again mock all of the internal file coin logic for getting any kind of market data, any kind of storage deal data and data on specific storage providers who are the miners. But we're going to be messing with Simplecoin in this demo.
00:24:09.260 - 00:24:21.518, Speaker C: So we have a simple Coin deployment at an address right here in the JSON, right?
00:24:21.684 - 00:24:23.374, Speaker D: And we're going to interact with it.
00:24:23.492 - 00:25:16.472, Speaker C: So again, remember when we deployed this Simple Coin contract, the constructor assigned 10,000 simplecoin to my address, right? So I should have 10,000 there. If we go to task, you'll see there is a Simple Coin folder and we have a git balance task. So this is basically going to go in and it's going to read our smart contract and call that method Get Balance and show us a balance for a given address that we push in. We just need to give it two parameters, contract and Account. Contract. The contract we're interacting with, where it's located, its address and the address of the account we want to get the balance for. We'll just type it in from scratch.
00:25:16.536 - 00:25:25.468, Speaker D: So if we do Yarn Hard Hat and then you're going to do double dash for the first parameter and we'll.
00:25:25.484 - 00:25:36.444, Speaker C: Type in Contract and we'll go to our deployments. Again, we'll go to Simplecoin JSON and.
00:25:36.482 - 00:25:45.596, Speaker D: We'Ll copy this in and actually I.
00:25:45.618 - 00:25:48.530, Speaker C: Forget to put need to put quotes around here.
00:25:55.860 - 00:25:56.304, Speaker A: All right.
00:25:56.342 - 00:26:03.010, Speaker C: And then we'll do account. And again, that's the account of which I have it right here.
00:26:03.940 - 00:26:08.356, Speaker D: But the account of the wallet we.
00:26:08.378 - 00:26:12.790, Speaker C: Deployed the contract with, that's our wallet since it's the one with 10,000.
00:26:14.520 - 00:26:18.360, Speaker D: Again, almost forgot my quotes.
00:26:23.240 - 00:26:24.928, Speaker C: And quote.
00:26:25.104 - 00:26:25.830, Speaker A: Enter.
00:26:39.340 - 00:26:41.652, Speaker D: Yarn, hard hat, get balance.
00:26:41.796 - 00:27:29.032, Speaker C: Oh, I didn't actually type in get balance. Okay. So yeah, yarn, hard hat, get balance, contract, put your contract in account, put your account in and quote enter. So saying reading Simple Coin owned by our account on network wallaby and boom, we have 10,000, right? And the task isn't in here right now, but you can make a simple task for sending the simple coin as well. So that's just kind of like a basic overview of the Hard Hat starter kit and what you can do in Hard Hat. You can write tests and put those in there and have a whole test directory. All of this is kind of be developed on the fly.
00:27:29.032 - 00:28:41.900, Speaker C: So feel free to open up any issues on the actual GitHub and we'll be kind of looking over them and being in the discord, helping people out with any issues that may occur and again, trying to fix that deployment issue we're getting at the moment. But yeah, very powerful tool. If you're going to actually kind of get serious and want to speed up your development, I would highly suggest learning this, especially since it has the mock APIs built in. If you want to take advantage of those, you can kind of go through them and use them again to mock those solidity calls. We also have the forums, I'm sure they've been called out earlier, but there you'll find some tutorials, some high level sketches of things like how to make basic designs for data dows and lending markets. Please go ask questions there. We'll try to be monitoring them and answering questions over the weekend if you have any.
00:28:41.900 - 00:29:12.316, Speaker C: And yeah, thank know the Fevm is kind of an exciting development in the Fem lifecycle as it allows the Fem to take advantage of all this EVM tooling that already exists and that you may or may not be familiar with. And yeah, just allows a new paradigm of applications to be built with these Filecoin native primitives that are the storage deals.
00:29:12.348 - 00:29:12.592, Speaker A: Right.
00:29:12.646 - 00:29:37.910, Speaker C: This off chain storage that's such an important component in web three applications if we really want a decentralized web. And with that, that's what I got for the demo. I hope you enjoyed it and I'll see you around in the forums and in the discord trying to help out and answer any questions.
00:29:39.000 - 00:29:40.410, Speaker D: So thanks again.
00:29:41.340 - 00:30:13.916, Speaker B: Amazing. Thank you, Zach. We do still have a little bit more time in case there's anything else you wanted to kind of dive a little bit deeper into. I also just asked the chat to see if they had any questions on their end as they were going through this, although it looks like sort of most people got their questions answered as you went through the demos. Yeah, I mean, if there's nothing else you want to dive into, I think the default fun question to ask is just what would you like to see built this week or this weekend and what are you most excited about seeing as an outcome from this upcoming weekend?
00:30:14.108 - 00:30:44.376, Speaker C: Yeah, I think a couple of the speakers have kind of mentioned it before me, but anything kind of using those mock APIs I think would be awesome because those are the unique features that are in Filecoin. When the fee EVM was created. It wasn't kind of created as a thought of, hey, we want this to have all the same applications as the EVM or compete with the EVM. We want unique applications that can be built to take advantage of these storage deals.
00:30:44.408 - 00:30:44.990, Speaker A: Right.
00:30:45.920 - 00:31:47.564, Speaker C: All these off chain storage miners, they have this native primitive storage deals that has all the metadata of those deals and make cool applications like data Dows or lending markets. Right. I think data dows are extremely interesting. There's a lot of problems in the world where people just need data, right? Like a lot of scientific researchers need large sets of data to run their models on. And if people can kind of come together and create primitives that allow people to crowdsource and crowdfund this data in a decentralized way, I think that would be really awesome. Right, and then the lending markets as well, like lending markets, like, hey, for the first time, instead of just having kind of like an Ave, an over collateralized lending platform, instead you can have a miner who comes in and posts their future earnings as kind of collateral.
00:31:47.612 - 00:31:47.920, Speaker A: Right.
00:31:47.990 - 00:32:24.270, Speaker C: So it will require some underwriting on the behalf of the lender to say, hey, do I trust this miner to make my money back. But if there's this earnest miner who wants to come in and provide storage to the network, but they don't have the fill up front to stake, someone can lend them that fill. It can be staked trustlessly. And all future revenue up to a point, can be given to the person to help jumpstart that miner's career, basically. Amazing.
00:32:24.880 - 00:32:46.416, Speaker B: Okay, well, very cool. Thank you, Zach. And thanks for mentioning datadals. It's a very natural segue into the next part of the summit anyway, so yeah, of course. Anybody who has any questions, I think, Zach, you're probably going to be around all weekend, I'm guessing, helping people build. So thank you for that. And yeah, looking forward to seeing what everybody builds.
00:32:46.416 - 00:32:49.268, Speaker B: And thanks again for helping us out with this.
00:32:49.434 - 00:32:51.010, Speaker C: Yes, no problem. Thank you.
