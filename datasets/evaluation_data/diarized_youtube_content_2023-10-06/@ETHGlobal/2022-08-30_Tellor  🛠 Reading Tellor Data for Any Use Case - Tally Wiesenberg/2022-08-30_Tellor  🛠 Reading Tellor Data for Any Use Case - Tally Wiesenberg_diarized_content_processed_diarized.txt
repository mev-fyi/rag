00:00:06.250 - 00:00:15.470, Speaker A: Hey everyone. My name is Tally. I'm a dev at Teller, the decentralized oracle. And in this tutorial I'm going to walk you through how to read Teller data into your own smart contract.
00:00:16.290 - 00:00:18.014, Speaker B: In this tutorial we're going to create.
00:00:18.052 - 00:00:35.640, Speaker A: A sample smart contract that reads data from the Rick and Morty API using Teller. We're going to deploy our contract to Rinkabee and finally we'll tip to Teller. Or in other words, we'll pay some TRB to incentivize the Teller reporters to update our data over time.
00:00:36.970 - 00:00:39.142, Speaker B: Before I get started, I will be.
00:00:39.196 - 00:01:15.434, Speaker A: Referencing a lot of links throughout the course of the tutorial. You can see one right here and you can actually find all the links in the description. And as well, I'll be linking them in the code here and finally in the description or the README of the using Teller demo repo, you can see here at using or GitHub.com Teller IO usingteller Demo as well. Before we get started, we'll want to NPM install and what this will do is install two packages.
00:01:15.582 - 00:01:19.474, Speaker B: Hard hat, of course, and using Teller.
00:01:19.522 - 00:01:35.686, Speaker A: Which is a contract that you can NPM install. It's an NPM library, but inside it is a contract that we can use to really easily access the Teller functions for reading data into our contract to import using Teller.
00:01:35.718 - 00:01:38.634, Speaker B: What we'll need to do is and.
00:01:38.672 - 00:01:59.714, Speaker A: By the way, the last thing I'll say before I start typing code is that you can actually follow along with this tutorial. Just like I'm doing it. And it will work front to back and it's basically a Teller integration, which is really cool. And once that is done, if you actually send me your deployed contract in.
00:01:59.752 - 00:02:05.250, Speaker B: A transaction hash of a tip, then.
00:02:05.320 - 00:02:29.500, Speaker A: I will send you an NFT that I made. I've made 22 of them. So there's plenty to go around. And the NFT is on openc and each NFT is a photograph that I've taken. Just a little bonus for fun. But now that we've NPM installed, we'll want to import using contracts. You can even see it auto populating here using Teller Sol.
00:02:31.550 - 00:02:32.620, Speaker B: Okay, cool.
00:02:34.930 - 00:03:00.840, Speaker A: And of course it's a contract and not a library in Solidity using Teller. So we'll want to inherit using Teller from our contract. And so we'll say using Teller demo is using Teller. I'm going to get to this in a minute, but before that, we'll just fill out our constructor. All we need to do is put in a payable Teller address.
00:03:03.610 - 00:03:08.140, Speaker B: And then as well, we want to fill in the.
00:03:13.310 - 00:04:01.390, Speaker A: Instructor of using Teller itself. And what this does essentially is point our contract to Teller Oracle. And to do that, that's really all we have to do. We actually don't even need to fill anything in for this tutorial in the body of our constructor. And as I was mentioning here, when it comes to reading values, what's more important almost to the story of reading values or the procedure that we need to do it is to understand how requests are made on Teller. And if I open this up, you can see this links to a repo called Data Specs. In other words, it's the specifications of a list of types of data that you can request on Teller.
00:04:01.390 - 00:04:42.374, Speaker A: You can actually request any data, arbitrary data on Teller. But these are the ones that we've pre configured and set up so far. You can see here that you may notice there's a query type, a query description and query parameters. And so you may notice some familiar language URL in a parse string. And you'll see that if we want to read value, we may need to put together the URL in the parse ARGs in such a way that maybe we can build a query data that you see here and finally a query ID. And so you'll see here that we're going to be building a query data. We're going to hash it to build the query ID.
00:04:42.374 - 00:05:07.390, Speaker A: We're going to get our data using a using Tellergetter. And finally we're going to decode our data into a U into 256. You'll see here, that actually for this type, this is a Numeric API response, which in other words means we're going to call an API and get a number back. And you'll see that if we're getting a number back, we're going to be returning uint.
00:05:09.250 - 00:05:15.294, Speaker B: 256. Okay, to start, we'll build our query.
00:05:15.342 - 00:05:51.386, Speaker A: Data and we actually have a reference here. So for example, here we'll want to put in the query type in an Abi encoding. And after that, we'll want to abi encode the URL that we're requesting. And then what we need to parse into the JSON to get the number we want. So in this case, we actually want to get in this API, which is like very long and kind of scary looking. We really just want the count of episodes. So that's why I've called my parse ARGs info comma count.
00:05:51.386 - 00:06:01.806, Speaker A: You'll see, we want to parse into Info and parse into Count. Like if this were a Python dictionary or in this case it's JSON, of course. So we'll build our query data like.
00:06:01.828 - 00:06:18.870, Speaker B: We saw in the example bytesmemory query data equals Abi encode of Numeric API response and then an inner Abi encoding.
00:06:19.370 - 00:06:22.946, Speaker A: Of the URL and the parse arcs.
00:06:23.138 - 00:06:26.326, Speaker B: Okay? So just to recap, to build our.
00:06:26.348 - 00:06:52.414, Speaker A: Query data, we'll combine the query type and of course in Abi encoding, we'll combine the query type and the query parameters and convert them into bytes using Abi encoding. Next we're going to build the query data, which are bytes 32 always as they are a hash, we'll simply Keck Act. I always add that extra C by.
00:06:52.452 - 00:07:00.740, Speaker B: Accident keckak 256 of query data.
00:07:03.750 - 00:07:16.950, Speaker A: Finally, we can request our data from Teller. So we're going to call this getter called Get Current Value, and we're going to paste in our query ID as input.
00:07:17.710 - 00:07:22.022, Speaker B: And so get current value always returns.
00:07:22.086 - 00:07:55.210, Speaker A: Three always returns three variables. The first is a boolean success of the request. The second is bytes memory, and it's the value that we get. And so since the Teller Oracle is data type agnostic and citizens can support arbitrary data, get current value will return bytes encoding of the value, which you can always decode, which we'll do in the next step, but you can always decode into the data type if you're choosing.
00:07:55.390 - 00:07:57.800, Speaker B: In this case, we continue.
00:07:59.770 - 00:08:08.440, Speaker A: The last argument is it's always a timestamp. This is the timestamp that the reporter submitted the value, but we actually don't really need the success.
00:08:11.210 - 00:08:11.938, Speaker B: And we don't.
00:08:11.954 - 00:08:20.570, Speaker A: Really need the timestamp. So I'm going to take them out. But it's just always good to show in case you do want to use them. If you fork this, make it a little bit more complex.
00:08:23.570 - 00:08:25.040, Speaker B: To decode our data.
00:08:25.490 - 00:08:43.650, Speaker A: In this case, we'll actually just want to return it because it's a view function to decode our data. We're going to want to abi decode value and we want to extract UN 256. So we pass in UN 256 as a second argument in parentheses.
00:08:44.470 - 00:08:45.398, Speaker B: Okay, cool.
00:08:45.484 - 00:08:46.742, Speaker A: I think this is ready to go.
00:08:46.796 - 00:08:57.792, Speaker B: So let's compile it. And by the way, while that compiles.
00:08:57.856 - 00:09:53.444, Speaker A: I do want to mention that cool, it compiled successfully. I want to mention that I set up a M example that you can use to put in your private key and node URL for the next step, which is just deployment to Rinkabee. So just make sure you have Rinkabee Ether and make sure you have a private key that you can put the Ether into. But I didn't really want to go over how Ethers works because you can find that in any tutorial. But I did write out this tutorial that already had I mean, excuse me, I already wrote out this script, and this script has points to the teller address on Rinkobe, which you can actually find a list of our addresses on the Teller docs, our deployment addresses across different networks. In case you want to use another network, it's just building a contract factory, deploying the contract and then making sure that it's deployed.
00:09:53.492 - 00:09:57.768, Speaker B: So you can run it and you can run it.
00:09:57.854 - 00:09:58.490, Speaker A: And.
00:10:00.620 - 00:10:03.624, Speaker B: Once we run it, we will.
00:10:03.662 - 00:10:04.730, Speaker A: Get out.
00:10:06.880 - 00:10:07.916, Speaker B: Contract address.
00:10:08.018 - 00:10:22.176, Speaker A: And so Etherscan typically takes a few minutes to properly load and display the contract. So what we'll do is we'll just move on to the next step, which.
00:10:22.198 - 00:10:26.000, Speaker B: Is the final step, and is funding our feed.
00:10:26.420 - 00:10:33.204, Speaker A: So this part is a little bit longer, but it looked a little intimidating, but we can set it up so.
00:10:33.242 - 00:10:33.830, Speaker B: That.
00:10:36.040 - 00:10:47.240, Speaker A: It all works out. And as well, if you do want to eventually, on your own time, read a value from your contract. After the Tele data reporter's network.
00:10:49.340 - 00:10:49.924, Speaker B: Reads.
00:10:49.972 - 00:11:01.420, Speaker A: Your or fulfills your request, you can actually paste in the address of your demo here and then call Read value and output the results here terminal.
00:11:03.120 - 00:11:07.320, Speaker B: But anyway, our last step is funding the feed.
00:11:07.480 - 00:11:08.604, Speaker A: And so what do we mean by.
00:11:08.642 - 00:11:10.672, Speaker B: That, by funding a feed we mean.
00:11:10.726 - 00:12:04.272, Speaker A: We want to actually and what we can do using what we call Auto Pay Payments contract is that we can set up recurring payments all in solidity with only two transactions or three actually including approval. We can set up recurring payments to the Teller Data Reporters network to maintain uptime on our data feed. And by data feed I mean the query ID that we are requesting to Teller. I did paste in the arguments to the two functions we're going to use from Autopeay it's Setup Feed and Fun Feed. You can reference them if you want to replace the arguments here. If you're wondering how I got the query data and the query ID out from my contract, I actually went to.
00:12:04.326 - 00:12:04.930, Speaker B: Build.
00:12:08.260 - 00:12:58.544, Speaker A: I went to queryId Builder Herokuapp.com. This is a utility that we built in house at Teller. It's free to use as well, open source, so you can fork it or even contribute to it if you'd like. All I did was put in numeric API response so that's the query type as we learned and I put in the two string arguments. I'm not going to go through the whole thing, but basically, if I put in some nonsense here, you could see that it would generate the query data and the query ID, which so if you use your own API, with its own parse strings, then you could use this tool to paste in your own query data and query ID. But anyway, the next parameter is the.
00:12:58.582 - 00:13:00.880, Speaker B: Reward as well as the start time.
00:13:00.950 - 00:14:12.808, Speaker A: So when we want to start incentivizing tele reporters, an interval in a window, which is a little complex but basically just means how frequently you want to set up windows of time that Teller reporters can receive reward for reporting data. And finally, before or after that is the funding of the feed. So that's the setting up of the schedule of the feed and then funding the feed. You can see here is feed ID which we create in the previous transaction. The query ID sets the data feed Identifier and the amount of TRB or Teller tokens that we want to put into this data feed or reward in this data feed over time. But just to recap, that may have been a little confusing, but just to recap, what we're going to do is we're going to set up a data feed which is a recurring schedule of dispersing tokens to data reporters on Teller to claim if they report to our query ID to if they report to our data feed. And as well we're going to finally.
00:14:12.894 - 00:14:16.668, Speaker B: Fund the feed and we're going to.
00:14:16.674 - 00:14:33.970, Speaker A: Fund the feed with an amount of TRB that will disperse over time over that interval schedule. So let's run NPX hardhat scriptsfundfeed. JS and this one is going to take a little bit more time to run. Oh, actually not.
00:14:34.900 - 00:14:39.330, Speaker B: Oh, I forgot to add that.
00:14:42.280 - 00:14:50.420, Speaker A: I forgot to add that we want to deploy to Network Rinkabee. So let me actually MPX hard Hat.
00:14:51.160 - 00:15:01.686, Speaker B: Run scripts, deploy network Rinkabee And so.
00:15:01.708 - 00:15:16.650, Speaker A: We'Ll wait for that to run. So we always want to make sure that we include the network flag, right? And so that's finished. So we'll go back up and run Fun feed on Rinkabee.
00:15:22.120 - 00:15:25.096, Speaker B: So this script may take a little.
00:15:25.118 - 00:15:50.716, Speaker A: Bit longer to run because it waits for the transactions to finish. But you'll see, after each transaction, the console will output the transaction hash of each transaction. So of course, we start with setting up our feed, which doesn't actually cost any TRB. Then we approve some tokens to the auto pay contract or the payments contract so that we can fund a feed.
00:15:50.908 - 00:15:56.064, Speaker B: With those tokens as a reference on.
00:15:56.102 - 00:15:57.040, Speaker A: Some networks.
00:16:00.820 - 00:16:02.356, Speaker B: You may want to use.
00:16:02.538 - 00:16:04.624, Speaker A: Okay, great vitalik tweet.
00:16:04.672 - 00:16:05.270, Speaker B: But.
00:16:07.320 - 00:16:23.000, Speaker A: You may want to use this account, the TRB Faucet. If you tweet at it, we'll actually give you if you tweet just like this one with the network and your address, we'll just send you some TRB on the network that you requested to.
00:16:23.070 - 00:16:27.904, Speaker B: But as well, on this particular contract.
00:16:28.052 - 00:16:36.590, Speaker A: That I used, some of them will come with a Faucet that you can just call on Etherscan, which I'll demonstrate right now.
00:16:40.560 - 00:16:44.670, Speaker B: The token here, if you go to.
00:16:45.440 - 00:16:48.512, Speaker A: Rinkibee if you paste this address into.
00:16:48.566 - 00:16:52.624, Speaker B: Rinkabee Ether scan, you'll actually see that.
00:16:52.662 - 00:17:20.792, Speaker A: There'S a Faucet in the contract, which is really cool. So just put in your address, click right, connect to web3, of course, and you'll get like, a very large amount of test TRB that you can play around with. Thanks for watching. I hope you enjoy it. And once again, if you finish it, please reach out to me. Reach out to me if you have any questions in general. But if you finish it and you like it, and you get all the way to the end, then please reach out as I will give you ownership to an NFT of a pretty picture.
00:17:20.792 - 00:17:23.148, Speaker A: Thanks so much. This is Tally signing off.
00:17:23.234 - 00:17:23.560, Speaker B: See ya.
