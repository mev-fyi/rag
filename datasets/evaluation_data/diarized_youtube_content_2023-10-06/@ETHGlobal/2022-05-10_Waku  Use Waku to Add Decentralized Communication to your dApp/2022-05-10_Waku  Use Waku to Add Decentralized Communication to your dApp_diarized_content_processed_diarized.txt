00:00:11.850 - 00:00:31.120, Speaker A: Okay. And we are live. Okay, thank you everyone for joining us for our last workshop of the day. We'll have Frank doing a workshop on Waku, using Waku to add decentralized communication to your DApps. If you have any questions, you could leave them in the chat and he'll answer them throughout or at the end. Take it away.
00:00:33.010 - 00:01:02.154, Speaker B: Thank you. Hi everyone. Let's start the Waku Workshop. So first, what is waku? So Waku enables you to send and receive messages in a decentralized manner. That's as simple as that. So we are building Waku as a public good. So it's agnostic, so it works with any blockchain in the way that I mean, it's not a blockchain for us, but if you want to interact with blockchains, you can do whatever you want.
00:01:02.154 - 00:01:31.510, Speaker B: There it is a public good. So there's no need to lock some tokens or anything like that to use Waku and anti decentralized. So the idea is that you are running Waku nodes. You don't need to worry about that too much during the hackathon. But if you use Waku, let's say use Jswaku in the browser, you'll be running a Waku node in the browser. So enables you to send messages in decentralized manner. So these messages are off chain.
00:01:31.510 - 00:02:28.534, Speaker B: So if there is anything you want to take off chain and still enable some interaction between users, you can use Waku. So once the messages is any payload, so you can encode anything in the messages. So it could be chat messages, it could be a sign message that you want to send exchange off chain to then later put in a smart contract. What can that be? It could be the signature for multi SIG transaction. It could be a bid on an NFT auction. So sign the bid so that if you take the message and put it in the smart contract, you get the NFT sold. It could be maybe some event in a game and you could sign it so that later this lead to some asset exchange on the blockchain for a game move picked a card.
00:02:28.534 - 00:03:36.800, Speaker B: So for example, you do a card game, you can pick a card to commit to a card and you can sign a message which is the hash of the card to say I committed to this card. And then when you revisit the card, you can have another message which shows what card was hashed. So at the end of the day, it can be any message with any payload and it's really limited by your own creativity and imagination. So in short, ask yourself when using Waku. Well, if you are thinking about having some communication going on with your project and at the moment you're looking at maybe having a centralized server that could run Firebase for example, or like a lightweight database to be able to use message exchange. Instead, try to use Waku so that your application can be decentralized. If you are maybe thinking about using DPT, but you also need to run your own nodes, maybe instead use Waku, because with Waku the node are generic, which means that anyone running Waku node can support any kind of project.
00:03:36.800 - 00:04:13.446, Speaker B: So that's pretty much it for Waku. It's really just about being able to send messages off chain in decentralized manner. And decentralized manner means that it is sensorship resistant, it is resilient because we have a number of node. That's pretty much it. So now let's have a look at, let's look at some more ideas. So I put this thing, I'll talk about the ideas again at the end. We have this website doc Wacoconnect dev, where we have a lot of documentation for Gswaku.
00:04:13.446 - 00:05:12.442, Speaker B: Waku is a browser, so I just click on this link, it's open there already here we so message can be a chat message. That's absolutely fine, everyone can get that. So, poll message should I say we also have some polls in your project, a bit like Twitter polls, okay, that doesn't need to be on chain, it can be decentralized using Waku. So what happens that you send one message which is your poll questions and then users, other users can see the message and can answer the poll by sending the answer and everyone can collect the answer and see the answer of the poll. We actually have an SDK available for polls which is react based. So you can just jump into the repo there. For NFT marketplaces, there's few ways you can use Waku when you are building a decentralized NFT marketplace.
00:05:12.442 - 00:06:25.550, Speaker B: One way is to add a social media layer so that for example, you can enable users to publicly like an NFT or to publicly comment on this NFT and we just send the like or the comment as a message over Waku and other user cross this message from Waku and can display it. Or you can see them in their app. And also you can look at some of the actions you do as part of the NFD platform and see whether it be worth putting them off chain. So the idea is instead of having to go layer two, for example, to make it cheaper, especially if some of the NFC are running on the L one, you could use Waku to make some of the action off chain. So one of the action which would make sense to have off chain for example, is bidding. So you could still have someone, alice sells her NFT, so she's going to interact with the L one contracts to say okay, my NFT is up for auction now. But then when Bob and Carol bid for the NFC, what they could do is that they could send a signed message over Waku to say I want to buy Cnft for this much east.
00:06:25.550 - 00:07:45.126, Speaker B: They may have to prioritize the east to be transferred by the smart contract, but that's only once when they use the platform and then alice can collect all the bids, take the highest bid and put this one on the blockchain to sell the NFT to the highest bidder. So that's one way actually to move things off chain to save gas. In this scenario, Alice and maybe Bob and Carol didn't win the bid, but they didn't have to pay any gas to bid in the first place and that is again in decentralized manner. We have other so stationary is quite a complex one, so I skip this one I think for catan voting and proposals. So one way that can be done with voting, and we have an SDK for this one as well, is instead of having each user vote on smart contract and pay gas, what you could do is that users vote. By signing a transaction, signing it over waku and then you could have the Dao or maybe the proposer take all the votes and submit them on chain so that you basically enable users to vote without paying gas and the gas is being paid when someone submits a batch votes. Signature exchange for Mystic Wallet.
00:07:45.126 - 00:08:54.478, Speaker B: So we actually have for Agnosisafe, we have a little POC doing that. We talk about game pay communication. So instead of having all the move happening on the blockchain or all the move being on Samsung server, any move that doesn't immediately lead to an asset being burnt, mint, exchanged or moved can be done on Waku off chain. So let's say you do card game, you can have the move of setting up what card you're going to use and then revealing the card done over Waku. And then if winning the round then lead to an asset make move off chain, then you can go to the blockchain. But just thinking about what can be done off chain basically DAP to a communication. So you can use Waku if you integrate Waku in a wallet in DAP, which may not be possible within the hackathon, but you could use Waku to do communication here as well and something for layer two as well because maybe a bit complex for hackathon.
00:08:54.478 - 00:09:54.706, Speaker B: There you go. So that's any kind of generic marketplace as well. So we could see Waku as an open network to enable any kind of market. So if you want to have a market where Alice can sell something, so you say have something to sell, and Bob wants to buy something. You don't have to go on the blockchain and having Alice paying gas to say she has to sell something, and then Bob paying gas to say, oh, I want to buy it, but just take it off chain and have Alice, okay, I want to sell something and send a message over waku. Bob can see the message and say okay, I'll buy it, I send a message to Alice say okay, I'll buy this message still by Waku and so far nobody has paid gas and then Alice and Bob can enter into the sale and then now enter this contract and have this sale opening over Ethereum or any chain. And what's interesting with that is you could maybe have one part of the sale.
00:09:54.706 - 00:10:40.610, Speaker B: So let's say you are selling a physical item, then this part of the sale can happen in the real world. In the real world and only the transaction, the asset being happening over the blockchain. So, yes, worker could be used once they send you messages, it can be used in a way where you broadcast messages so that you send a message and everyone can access it. So that Ali is saying I want to sell my NFT or sell an item. But you can also use Waku for one to one private conversation. And we do offer some encryption methods which are really available. So when Bob wants to say to Alice hey, I want to buy this thing, bob can send a message about Waku that is only for Alice.
00:10:40.610 - 00:11:23.342, Speaker B: Okay? And there are strategies for yeah, okay. So we have three Waku implementation available at the moment. So, Gswaku is our browser focused implementation in written typescripts and available in JavaScript and TypeScript, that's the one where we have most documentation available. Then we have Nwaku, which is our service node and has a JSON RPC API. So Nwaku is a node. So when you use JSO, you do run a node in the browser. Now, if you want to run a node in the cloud, for example, you can use Nwaku and it has a JSON RPC API.
00:11:23.342 - 00:12:07.620, Speaker B: So if you have maybe a Python backend or node JS backend, you could use Nwaku and access Waku network using the JSON RPC API of Nwaku. And finally we also have a Goacu version. So if you have a go backend software, then you can integrate Waku using Goaku. We also provide some C bindings for means and we have some examples. So with C bindings you could integrate it in most if not any language. And we do have some examples on how to use these Cbindings either in C Sharp, especially for Unity, in Swift and in Kotin. So it does work on the mobile, if you are building a mobile app.
00:12:07.620 - 00:12:45.434, Speaker B: So, Gswaku, so most of the commentation of Gswaku is available on the Waku Connect Doc website. So if I just jump in there. So here's the website and here are all the Docs available. So we have a number of guides available. If you just jump on the guide one, you can see they are grouped. So, we do have some example using showing how to use Waku with React framework and Angular framework. If you are using other framework, you can just jump in JavaScript section and use all this framework.
00:12:45.434 - 00:14:06.120, Speaker B: So for example, if I jump in the Receive and send messages using Wakuole, so, Wakuole is a gossip sub protocol. So meaning that you send a message and a message is being forwarded to other node and propagates through the network and then it can be received by your power party on the other side. So if you look at using Waku with a simple JavaScript or any framework, so you can just install Gswaku inside our package and then to create a Waku node, it's very simple, just Waku create API bootstrap is when you create a node, you need to connect to the network. So we have some bootstrap method available. So from like a JavaScript developer point of view, you can just use that and we connect to some Wakuno being run by status that's we are evolving and improving as we improve Waku. So you can just do bootstrap default true. Now if you decide to run your Nyuku node, you could decide to pass the address of One kunode there, which is this way.
00:14:06.120 - 00:14:45.138, Speaker B: But for hackathon we suggest you just use default. True. Then we have a method just to ensure that all the handshakes are being done and you are ready to go. Once you are ready to go, to send a message, to receive messages, first you just need to try to change side of the screen. You just need to create a callback method that processes your incoming messages. So this process coming message a function is just a callback method that take a welcome message and then you can do whatever you want. You can display it, you can process it, it's up to you.
00:14:45.138 - 00:15:52.074, Speaker B: And then you just do work related add observer. So you add observer, you pass your callback function and then you pass this array of strings. So this is a content topic, okay, a content topic is so when you send a message, you always attach content topic to it. So that if you say I have my cool card game, all right, and this message and you want to have messages to be able to commit to card, then you could have a Content topic which is Michaelcard game one commit to Card. So that when you send a message, you set this content topic to commit to Carl and then the users are playing the game will listen to messages on this content topic. So that basically is a way for you to categorize messages so that you can process only messages that are for your app instead of processing all messages of the network and trying to find ones there. So it's a way to tag your messages to say, okay, this is what's relevant to me.
00:15:52.074 - 00:16:52.720, Speaker B: If you want to know more about Content topic and see on the left we have a guide which is how to shoot a content topic. So when you send a message, you need to create a welcome message. We have some helper functions to create messages and you just need the message first. And then here the content topic that we just talked about now in terms of the message here, so we have a string utf eight helper, but most likely you want to just use bytes so you can put whatever you want in there. So we have a form byte function and then you just use okay, so now in terms of using byte, we do suggest to use protobuff and we have some explanation on how to use protobuf. And back to the guide. So we have some explanation around the concepts, content, topic, discovery, bootstrap, how to debug if you have some issues.
00:16:52.720 - 00:17:36.860, Speaker B: What's good with Waku that we have what we call a store protocol that enables so you start your node in the browser and you may want to retrieve past messages. So you can query any Waku nodes to get past messages for your given constant topic. And that is explained in these retrieve messages from using Waku store. Okay. And then if you want to encrypt messages or sign messages, we also have a couple of guides that explain how to encrypt messages and sign messages. So I really suggest you go have a look there once you know what you want to do with Waku. And we also have an FAQ page with some of the basic questions.
00:17:36.860 - 00:18:09.640, Speaker B: So if you have any error or issues, just jump into FAQ first. And of course you can ping me on Discord. No issue. All right, so that's for Jswaku. So one more thing I wanted to mention is that in the Doc website we also have a list of examples. So here are all your examples being listed and what you want to do. You can jump in this page and try to find examples that matches what you want to do.
00:18:09.640 - 00:19:10.166, Speaker B: So also Waku code is open source of course. So in the Waku repo we have an example folder and in which we have the example sample here for pure JavaScript in HTML example, we have an example for that and that's HTML code. And you can go in there and demonstrate what we showed. So that's something that's a good resource as well to jump into. The example folder in the work repo has a number of examples, they are available so you can see more consider code instead of following a guide. Okay, now if you decide to go so that's JavaScript. So if you decide to go, let's say you have a node as part of your project, you have some back end running, hopefully it's decentralized, right? Then what you could do is use Nwaku to access the Waku network.
00:19:10.166 - 00:20:09.470, Speaker B: So we do have Nimarku latest version is Nine, and it is available on Docker. So I would suggest use Docker so you don't have to worry about trying to compile it. So anymore queue is written in NIM, which is a functional language very similar to Python and Rust. So you don't have to worry about trying to compile it or anything as I just use as the docker image to go faster. The connection is mainly available in the Nwaku repo and you can see Nwakuakuv two. And there so explanation how to build and run, but I suggest you use Docker and there is some explanation on how to configure domain name and use DNS. So if you are using Jetwork on the other side, you need SSL and domain name for the browser to use WebSocket to connect to your Nwaku node.
00:20:09.470 - 00:21:15.994, Speaker B: So you may want to look into that. Now, if you are using Nwaku because you have a backend, then you just use Nwaku, try to move faster. In terms of the JSON RPC API, it is fully described and spec in our specs. So that's what could be to RPC API, I will send the link to the presentation with all these links in the discord in the Waku connect discord channel on the Is global discord at the end. So here, so Waku V two RPC API, so Gen RPC, and that enables you to use Nwaku with any other software just using RPC. So if we look at sending a message, then we have the Role API, which is our gossip sub protocol, and you can do a post work who V two, role V one message per method topic, that's topic of the message, and then the message by itself. And if you jump to work relay type, you have a payload.
00:21:15.994 - 00:21:58.314, Speaker B: So you just anchor your payload as a hex string. You have a content topic and your timestamp, and that's how you send messages. We have some API. So to get messages here, and then the store API to retrieve the messages from other Nwakunode extra. So that's where the API is defined. If you want to go through the route of having your Nwaku node running with some other backend software or some other node of yours. All right, and then finally, we do have a Goaku Go implementation.
00:21:58.314 - 00:22:36.730, Speaker B: So that's useful. Both if you have Go, so if your back end your node is retaining Go, you can Go. But we also have Cbikings, as I mentioned before. So if actually any other kind of software, and you prefer to go through the CBI route instead of going JSON RPC, then you can use Go. Okay, so it's really up to you, whatever you feel more confident, familiar with. You could either run Nwaku and use JSON RPC to access to Waku network, and you have to run two software, your software and Waku. Or if you want to integrate Waku software directly in your native software, then you can go with Goaku.
00:22:36.730 - 00:23:16.790, Speaker B: For Goaku, the best way to go is going to examples. So we do have some docs, we do have some documentations that explain a few things in Markdown. So if you jump into know, it explains how to do that. So that's a good way to start and have some explanations. And once you feel like, okay, you're getting a hang of it and getting some understanding on how the API works, then you can jump into the examples. So into the examples. Basic Two and Chat Two are good examples to look into.
00:23:16.790 - 00:23:53.858, Speaker B: So Chat Two is a simple chat application and you can have a look at the code and see what's used once you have seen the docs. And if you are interested in integrating Goacu in C Sharp or in Swift or Kotlin, it's all in there because it's all based on Cbinding. So again, Germany's example and that's one way to go. All right, running out of time. That's it. Yeah, so that's pretty much it for me. So again, maybe back to the idea.
00:23:53.858 - 00:24:53.782, Speaker B: So, lots of explanations. So Waku is to send messages, okay? And whether it is about broadcasting messages to users or doing what to one messages, anything you want to take off chain, you can use Waku send message. We provide some method to encrypt messages so that if you want to have this, the messages can be anything because we enable you to have any kind of payload, which is a byte array. So you can put anything you want in there. In terms of use cases, you can go in there and have some ideas. But if you look at your project and you want to have some interaction between the users, most likely today you are either thinking about having a centralized server or maybe you are thinking about putting all the interaction on the blockchain. Or there is a better way, which is to use Waku so you can have the message being sent in decentralized manner and Waku is able for the browser, for native apps and for any kind of backend node as well.
00:24:53.782 - 00:25:06.410, Speaker B: So all the different implementation we have available there, yeah, that's it for me. Don't have any questions, so if you have questions, now is a good time, otherwise happy hacking.
00:25:07.630 - 00:25:14.080, Speaker A: I don't see any questions right now, but if anyone does have any questions, they could bring them over to can't hear me?
00:25:14.690 - 00:25:15.870, Speaker B: Yes, now I could hear.
00:25:15.940 - 00:25:36.230, Speaker A: Okay, great. Yeah. So I don't see any questions, but if there's any questions, you could take them over to the discord channel that we have set up for Waku. So this is our last workshop of the day, we will be having more starting tomorrow, so tune into that. We have this dwell on our website as well. Thank you very much, Frank.
00:25:36.810 - 00:25:37.750, Speaker B: Thank you.
00:25:37.900 - 00:25:39.140, Speaker A: All right, have a good one everyone.
