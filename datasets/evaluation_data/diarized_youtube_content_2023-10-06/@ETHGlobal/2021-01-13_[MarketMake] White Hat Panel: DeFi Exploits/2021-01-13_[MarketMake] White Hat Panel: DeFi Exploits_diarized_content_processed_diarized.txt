00:00:00.810 - 00:00:35.318, Speaker A: Hello and welcome everybody, to the DeFi exploits panel. I want to thank Heather, Andrew and ETHGlobal for organizing it. I'm joined by five of the greatest minds in the ecosystem. Let me introduce myself first, real quick. My name is Mariano Conti. I used to be head of Smart, our contracts at the Maker Foundation. Lately, just figurehead and DeFi floating around, waiting to see what's up.
00:00:35.318 - 00:00:59.070, Speaker A: But for now, I'll be your host for the day. So let me start with the introductions. I want everybody here to just say a couple of words about what you do and then please, just yes or no if you've been personally wrecked in a DeFi exploit. So let's start with Sam.
00:01:00.610 - 00:01:25.480, Speaker B: All right, cool. Hey, everyone, I'm Sam. I'm currently a research partner at Paradigm and what mean? You know, find bugs, report bugs, help white hat hack funds back if there's a problem, and personally involved in getting wrecked. Not yet, but never say never.
00:01:27.930 - 00:01:31.030, Speaker A: Thank you. Morelian. You want to go?
00:01:31.180 - 00:01:48.670, Speaker C: Sure, sure. So I recently joined Optimism layer two scaling solution as lead security engineer. Prior to that, I was one of the original auditors at Consensus Diligence, and I still keep in close touch with them as an informal.
00:01:50.930 - 00:01:51.294, Speaker A: Never.
00:01:51.332 - 00:01:59.140, Speaker C: I haven't been wrecked on DeFi, I don't think, but I've definitely lost crypto in other strange and exciting ways.
00:02:01.190 - 00:02:03.140, Speaker A: We can get to that later.
00:02:03.670 - 00:02:46.370, Speaker D: Emiliano hi, everyone, it's a pleasure to be here. And I'm Emiliano Bonassi, and I do DeFi most in my spare time. I'm a builder. I participate in several staffs and integration hackathons. I used to work in DeFi for some project, but now it's not my main duty. I mean, during the day, mostly during the night. And as Sam said, I participate to helping sometimes to investigate what's going on on security breaches.
00:02:46.370 - 00:03:00.280, Speaker D: And to be honest, I never get wrecked for an exploit, but I get wrecked with some liquidation, let's say.
00:03:00.810 - 00:03:03.510, Speaker A: So playing it fast and loose.
00:03:05.690 - 00:03:06.006, Speaker B: With.
00:03:06.028 - 00:03:12.378, Speaker A: Your vaults or loans with you, maya okay.
00:03:12.544 - 00:03:34.894, Speaker E: Tincho hey, everyone, I'm Tincho. I've been for more than two years already a security researcher, Opensupering, while doing research. I'm mostly doing audits as well. So long being exposed to DeFi and ecosystem. No. And so far I haven't been wrecked. Fingers crossed.
00:03:34.894 - 00:03:35.780, Speaker E: I know.
00:03:37.350 - 00:04:03.100, Speaker A: Lucky you. Well, let me just say, as a fellow Argentinian, it's so encouraging to see a company like Opensepland be founded in Argentina and with so many of my countrymen and women being setting an example in this ecosystem. So, cheers. And finally doggy B.
00:04:05.870 - 00:04:44.440, Speaker F: Hey, everyone. So I've been in the space for a couple of years now, usually as an independent consultant, worked on various projects, including Urine. Now I'm the maintainer of Viper compiler and several of their Python based projects and help admin the security space, and so far been, I guess, paranoid enough not to have been affected by any issues, and hopefully that remains the case in upcoming in 2021.
00:04:46.650 - 00:05:39.754, Speaker A: Excellent. Well, those were the intros, so let's get right to it. 2020 was an incredible year for DFI, right? We started with much less than $1 billion in total value locked. And as of today, it's what, like $21 billion. And as always, as these numbers increase and the popularity of protocols increase, so does the risk of some of them being hacked or exploited. And I wanted to start with seeing if you make this distinction. So Julian Butelou actually calls some of them hacks and some of them like clever or beautiful know, I wonder if you agree or disagree with that.
00:05:39.754 - 00:06:03.620, Speaker A: Like, for example, pickle the evil jars that might have been a hack and then something like Harvest he would classify as an art. Do you agree with this? Do you disagree? And whoever wants to answer.
00:06:08.210 - 00:06:08.606, Speaker B: I have.
00:06:08.628 - 00:06:35.880, Speaker C: To admit I don't really know what the details of that Harvest hack. Believe it or not, I don't read every post mortem, but I don't think I see a big distinction. Like if somebody loses money in a way that they didn't anticipate or expect nor the developer through malice, then feels like an exploit to me.
00:06:37.450 - 00:07:38.780, Speaker F: Yeah, I guess I would agree with that. I guess the distinction perhaps is that the logic error was either internal to the contract that the developer created or was kind of external through their misunderstanding of how to interact with another component. And as we see more of these DeFi money, Lego stacking behavior that misunderstanding how to use an external protocol is just as dangerous as making a logical error internal to your contract. And luckily, since 2017 in the ICO boom, a lot of those internal errors, we've created tools and methods of detecting them. So a lot of that has minimized and now we're moving to this external. How do we understand the system, how do we interact with the system? And that's kind of the next frontier of security for Ethereum, I think.
00:07:41.070 - 00:09:06.562, Speaker D: I agree totally with Marian and mean it's a really, let's say gray area, arbitrage versus unexploit. I mean, this is the area where Julian want to play. I would say that as soon as you have, let's say, a bad implementation or maybe you are not using correctly external protocols and you are target of this kind of stuff, basically, it's not an Arbitrage, it's an exploit. So like traditional markets where we don't have any sort of smart contracts or whatever, if you, let's say, push the environment or push the other Arbitrageous bots to behave in some way, basically you are conditioning. So this is not playing fair, let's say. So for me, they were not maybe an attack because an attack, it's more something hard, but for sure they were exploits. And Morillian told very I mean, boldly.
00:09:06.562 - 00:09:14.840, Speaker D: As soon as someone lose monet and this is something that it's not expected to be, then it's a problem.
00:09:17.630 - 00:10:04.600, Speaker E: Yeah, I would say I agree with that. But I would put the focus on the word expected, right? Perhaps for the attacker it is expected for somebody to lose money, right, because it's attacking a system and for the common people using it, obviously not. So I'm not sure to what extent expected or unexpected is the right word. This is like a discussion that I've had with many professionals already and it's a discussion that I'm having with myself. My bottom line is like what people have just said. If there is people losing money, probably it's not the best for the ecosystem and there is something to be learned and to be fixed in the future.
00:10:08.590 - 00:10:43.990, Speaker A: I'd like to ask how we have in this panel independent researchers, people working for or that used to work for big auditing firms. I want to know how you approach looking for vulnerabilities in smart contracts. For example, Sam, I think I saw you Live Stream once and I was surprised to see that it was mostly reading from GitHub and pasting to remix and running it there. I was surprised.
00:10:46.250 - 00:11:35.894, Speaker B: Yeah, I think Tooling is great for the regular developer. It really helps them catch the very simple, classic bugs that we've all come to know and love, like using block block hash. But I guess it's just block hash now. On the current block or past 256 blocks, there was a study that Trail Abyss did where they found that I think it was like 50% or more of the bugs that they identified in their audits were probably not ever discoverable by Tooling. That's sort of something I've sort of held as a belief before I found about the study. I think really tooling is not the key when you're looking for bugs. It's really understanding the code, understanding the patterns that you need to be looking for.
00:11:35.894 - 00:12:33.880, Speaker B: And that's why for me, my Tool set, unless I'm dealing with a huge code base like zero X, is just GitHub and remix. In terms of process, the big question you want to ask yourself is what is the goal? Right? You'll get nothing done without a goal. And for attackers, the goal is usually to drain the money or drain the ETH or drain the tokens. And so my process is usually start there, right? If the contract has no way to send Ether out or has no way to transfer token out, there's no point look for your bugs because it's impossible. And likewise, if there is a way to transfer the tokens out, that's where you want to get to. You can start working backwards from there instead of working forwards because you're starting from somewhere that you know it's reachable, right? You're not starting from the entry point and then sort of you're not sure where you're going to end up, right? You know exactly where you want to end up. It's the part that sends the Ether out.
00:12:38.510 - 00:13:18.360, Speaker A: I want to know somebody know doggy yearn is probably one of the ecosystems that's most integrated with so many other protocols. We usually hear android say itesting prod, but that's only a half truth. Right. You need to put things into ethereum mainnet in order to properly interact with the plethora of protocols that are around. But there's a lot of things that you can fork mainnet state and test like that up to a point, right?
00:13:18.890 - 00:14:38.800, Speaker F: Yeah, I mean, I usually would paraphrase everyone knows that phrase, but I would usually paraphrase it as experiment prod because you can get an idea of whether or not something works. And people like Andre, they do this, they do a lot of experimentation like off chain and local development networks and stuff. But at a certain point you kind of only really get a feel for how something works by actually trying it. And that's the experimental part. So when I first got involved with urine, the design was a particular way and I saw a couple of points where I wanted to give a little bit more of a barrier between the aspects that interact with external systems and that was really kind of the genius of the strategy and vault dual architecture. So you create this barrier between the external system and you have some sort of trusted entities in using that strategy that can do a migration or pause it, stop it, withdraw. They have a lot of actions available to them and they can react quickly.
00:14:38.800 - 00:15:40.050, Speaker F: And then that's connected to the vault, which is the user facing portion where we want to obviously be more careful with how users interact with our ecosystem. And that's also a point where because it's externally available to anyone, then that can be used in an exploit for some sort of recursive behavior. And I think we've seen this in the past with how we interact with curve and then how curve interacted with another system. You can create a loop that a hacker could exploit in order to gain money because of depositing affects the price and then the price affects the curve price and then back to the other ecosystem and then it kind of all loops over again. Sorry, I kind of went a little off topic there.
00:15:40.200 - 00:15:46.214, Speaker A: No, that's okay. That ended up being a pretty common exploit during the summer, right?
00:15:46.412 - 00:17:13.700, Speaker F: Yeah, I would say there's a couple of variations of it. But the first idea is that if you can create a loop between a lot of the urine clones fell into this trap where if you can create a loop where the depositing and I think calling the earn function, which moves the funds over to it could affect the price of the protocol it was invested in. And then you can call withdrawal to actually drop the price because you've created this up and down action on the price of the external system. You can actually manipulate that with a flash loan in order to extract value, more value out of the withdrawal action than you got when you deposited it. So that was one of the major changes that I ended up making, was there is no way for the deposit action to trigger a deposit into a strategy that is a permissioned call that only the strategy keepers can call, so that prevents that action from happening. And then the withdrawal is also kind of I guess the withdrawal is like the most important call to look into because you do want users to be able to extract funds from the underlying strategies. Otherwise they won't be able to get their funds, like 100% of their funds at all times, which is something we want to move towards.
00:17:13.700 - 00:17:30.760, Speaker F: So with the withdrawals, we analyze the ability to suffer a loss in the strategy from doing withdrawal if you're in a leveraged position or something like that, and just making sure all the bookkeeping is accounted for there.
00:17:33.370 - 00:17:49.920, Speaker A: Interesting. And I want to hear from Tincho and morelian their experiences with big auditing firms and do you know what the process is like over there?
00:17:50.850 - 00:19:07.800, Speaker E: Yeah, I could start by saying that it's different from going into Etherscan and just looking for transfer for external calls and so on. When we approach an audit, we take a more like holistic approach because we are not only trying to break the system in a possible way to steal Ether, of course, but we also take security from other perspectives of how mature the system is, how we can improve in the future, how sustainable and maintainable it is. So noise usually is a more comprehensive snapshot of the project at a point in time. My particular approach as an auditor, I usually go bottom up in the sense that at the beginning, I don't want to be misguided by the documentation that the developers put together. So I only trust the code and I will just start looking at the code and reading line by line the functions and what it's intended to do. And from there I will start building the bigger picture of what's going on at the end of the audit. My objective is trying to get to know the system even better than the people that design it.
00:19:07.800 - 00:19:39.680, Speaker E: I feel that I need to learn all the rules about the system so as to be able to understand what can be broken. Right. If you don't know the rules, you don't know what are the rules to be broken. And we as auditors, putting ourselves in the attacker role, we need to understand what are the actual rules to be broken. And to do that well, we need to understand fully the code and to again be able to understand it even better than the developers. It's a super big challenge, but I don't know, it's exciting and always something new comes.
00:19:43.750 - 00:21:20.638, Speaker C: Definitely what Tintro says about maybe not just thinking what's the worst thing I can do and how can I do that immediately is probably I think one of the greatest differences between how I imagine basically like main net bug hunting, which is something I kind of started doing. Like, I had a bit of a hiatus between jobs and I just started doing that for the Christmas holidays and found that really fun. And through observing, basically what other people, and in particular Sam, were doing, just through comments, I sort of been trying to shift my mindset a little bit more to just, how can I break this? Let's just try and do that as quickly as possible, which is a more fun approach, really. But with auditing, I tend to have a very visual sort of approach to things. Like, I really want to see how the system fits together and what all the moving parts often there's a tool that diligence uses it's open source called Surya. And then there's like a Vs code extension that uses it, which makes it really easy to build call graphs and that sort of thing and just see how the various code paths so I lean pretty heavily on that. I sometimes use tools just to kind of prompt me.
00:21:20.638 - 00:22:09.520, Speaker C: So if I don't know where to start in the code, I'll run a scanner like Mythx or Slither just to sort of it'll probably land on the most complex area of the code if I look for an interesting warning. So that gives me a prompt kind of to go after. And then also I'd call threat modeling. So thinking about, like, Tincho mentioned actors and permissions and roles. So really trying to break it down into who are the different players here? What should they should they not be able to do? We still see a lot of access control bugs where just there's a missing modifier somewhere, and that opens doors for bad things to happen a lot.
00:22:11.110 - 00:23:16.982, Speaker A: And Emiliano, I remember you found, for example, the Curve voter proxy vulnerability for Yarn. And then I became obsessed every time there was an exploit. Your Twitter, it gave detailed explanations of how these exploits worked, and they were great learning experience. And you've been in plenty of war rooms, actually. I'd like to know what it's like. And you've probably been in war rooms with some of the people in this panel. Can you tell us whatever you can reveal about how that works? Sometimes probably before an exploit is sometimes after somebody has already exploited a protocol, but oftentimes maybe before and how to fix.
00:23:16.982 - 00:23:19.720, Speaker A: Can you give us some idea?
00:23:20.730 - 00:24:43.966, Speaker D: Yeah, it's an interesting question because if you look behind the scenes, you can understand more. How is natural the approach that we use? Generally, everything starts with a message on Telegram from someone with Are you up? It can be you, for instance, me, that contact maybe Sam or Artem or maybe directly, for instance, for Kuva Finance recently for the problem with Idol and with Synthetix recently for the short collateral issue. But yeah, there is a distinct branch between if you catch before the issue or after before. If you catch before it's quite easy because you contact directly the founders of the platform or the contacts that you have to use. Most of the projects have contacts that you have to use for disclose the issue. You don't have to be shy. I mean if you find out that probably it's working, you have to contact them.
00:24:43.966 - 00:26:16.366, Speaker D: For instance with yern I did another time and it wasn't an issue but it's better if you alarm one more time instead of not alarming at all. So before that you have all the time to discuss with the projects about the issue, to let them explain and to explain how to replicate the issue and after the moment that moment we will discuss after. Maybe we will ask also to Sam because he wrote that beautiful piece for the dark forest taking an action could be something dangerous because we have front runner generalistic bots that can do the same. I mean replicate you, front run you and create the issue. So depending on the size of the problem, then you have to take different action. But if you catch before, it's quite straightforward, if you catch after that someone broke already the system, you don't have so much time. So I found out that especially new protocols are not used to security processes that we have in traditional computing companies or in general in traditional companies.
00:26:16.366 - 00:27:23.398, Speaker D: So setting up a room, basically a war room where you have all the stakeholders of the protocol and all the analysts or people that help you to understand what's going on and which could be the first action to do it's essential, it's essential for taking an action and at the same times to organize the communication. So these are two elements critical for the platform because if the users start to be scared, becomes harder, adds a lot of noise. So basically when you start a warm what you do is what I did on Twitter basically. So you try to analyze what's the exploit is. So you try to replicate. You have several tools. You have command line tools or that beautiful website iftx info that help you to graphically see what's going on and if you are able I mean to understand where is the point the first action is okay.
00:27:23.398 - 00:28:17.080, Speaker D: How we stop the protocol, how we put the funds safe and depending on the case, this could be okay. Setting up the limit to zero. For instance, yuan for a specific strategy. Or maybe upgrading the contract with a dummy one that doesn't allow deposit or withdrawals. For instance, with the recent acts to warp finance. Or maybe do the exploit yourself to size the fund because you don't have any sort of other action. So the idea is take the action promptly, avoid to get front runner and in this sense dark pools or services like Taichi could help in this sense.
00:28:17.080 - 00:29:00.014, Speaker D: And that's all. I mean, after you basically put the protocol in a safe zone, then it start all the second part that it's quite important because it's communication. So you have to support the protocol for leveraging communication correctly. So you don't have to rush too much. You have to communicate concisely. So you have to say, okay, we are taking an action. We are going to update you regularly on some time frame.
00:29:00.014 - 00:30:13.862, Speaker D: So every 2 hours, every 6 hours, and then do a very, let's say perfect post mortem explaining what happened and how are you going to it's basically in traditional companies, it's called correction of error. So basically how you avoid that, it will going to replicate. And how do you basically, let's say, help the users that maybe lost funds? That's the idea. But explaining like this seems to be very structured. But if you participate mostly of the time, especially at the beginning, you see that it's not so organized. It's quite important that someone inside the group take the lead somehow and do order. It could be also not technical, to be honest, but in this kind of situation you have to be very organized.
00:30:13.862 - 00:30:19.020, Speaker D: Otherwise it will be a mess and more time pass, more issue.
00:30:20.030 - 00:31:31.700, Speaker F: I think the follow up yeah, sorry to follow up with what Emiliano is saying. It's about preparation. So one thing that we really got set up around 2018 was setting up a security group where people could figure out how to get contact information for different projects. And that's one of the ways that as a community we're prepared to respond to these scenarios because if you can't get in contact with them, you can't find the right person to help you solve the issue. And then as a suggestion to development teams out there, it's a great idea to have defined procedures or at least a good understanding of how you're going to react to different types of events. Like if you have an upgradability system, maybe think about different ways you can upgrade, quote unquote, to disable the protocol in different ways and just kind of spec that out or have a contract ready to perform that action. So that when you're in the scenario, it's kind of an emergency scenario where you need to take action quickly.
00:31:31.700 - 00:32:07.310, Speaker F: You can just follow the procedure, follow the deployment script that you've created in order to resolve that quickly. So you don't spend precious time when you're in this kind of war room scenario and you're stressed out about what to do. And if you're going to run into issues with the Dark Force, like Emiliano was saying, having all that planned ahead of time gives you more emotional and psychological headspace to think about how you're going to do those actions without suffering worse consequences than if you didn't.
00:32:10.390 - 00:33:03.940, Speaker A: And Emiliano mentioned sam's amazing escaping the Dark Forest. On the one hand, I hope that Sam never has to write one again. Because that would mean that we wouldn't have another DeFi exploit again. But I guess it's inevitable, right? I think your article was really good that it brought to a broader audience how some of these hacks happen. And for everybody who had already read Ethereum is a Dark Forest by Dan Robertson, in that one, the monsters won, but in escaping the Dark Forest, you ultimately won that time. Can you talk a little bit about that? Or maybe another one that we don't know about?
00:33:05.270 - 00:33:48.480, Speaker B: Yeah, actually it's funny you mentioned one that you don't know about. There was a fun incident that happened a couple of weeks ago that I'm sure there's an interesting part to it that someone else is planning to write about. So I'm not going to spoil that part. But we had to rescue funds from a wallet that was compromised. An attacker was running a sweeper on that wallet, right. So when you send Ether to it, it would immediately sweep the ETH out. And so we were really considering how can we get tokens out of that in such a way that the attacker doesn't pick it up.
00:33:48.480 - 00:34:55.000, Speaker B: In that case, we considered a lot of solutions. If you haven't heard about Flashpots, it's a project that Tina and Co are working on and Phil, and they've got this API that very much resembles what we used with Tai Chi during Escaping the Dark Forest. We considered using that, but unfortunately it was a bit slow for getting the tokens out. So in the end, we managed to get it out with just the blowing and contract that performed all the requisite operations and then quickly getting transaction out from the compromised wallet. There's another story in there about getting the NFTs out, which I'll leave for the other people to tell that tale, I think. Yeah, it's definitely fascinating what's happening inside the mempool in Ethereum. There's really not a lot of visibility for everyone.
00:34:55.000 - 00:35:27.390, Speaker B: You have Block Native who are doing a really good job with their mempool service, but I think we're still really in the early phases of observability where we have this giant pipeline of raw data and we're not really sure what to do with it. And hopefully as time goes on, we'll start working on better tooling, we'll start working on better processes and eventually we'll be able to process all that data into something that's actionable and something that gives us actual signals into what's happening rather than this giant fire hose of noise.
00:35:29.670 - 00:36:12.186, Speaker A: Yeah. And it's great that you mentioned Block Native disclosure. I'm an advisor to the project. I love them and they try to shine a light on the Dark Forest. So any recommendations, please? They're always open to improving their product. I want to ask morelian something. I saw a tweet that when you joined Optimism, your first order of business was designing a bounty program and you were asking white hats and projects for input.
00:36:12.186 - 00:36:32.580, Speaker A: And I want to see what you learned about that because it's weird, right? Maybe White Hat can give you, what, $50,000 from a project that has 500 million in value locked. So can you talk a little bit about that?
00:36:33.450 - 00:37:20.020, Speaker C: Yeah, absolutely. Thank you to everybody. I got so much help with that project. It was fantastic. There was so much good stuff. Bounties I think there's something that comes up a lot and maybe the first thing to say is, how do you think about a bounty? The way that I think is one way of thinking about it at least, is that it's a way of incentivizing talented people and there's a scarcity of the talent that it requires to find these kinds of exploits. It's a way of incentivizing them to your code base.
00:37:20.020 - 00:38:05.460, Speaker C: So in that way, it's something of a substitute for an audit. I won't get into that. I really don't consider it to be a substitute for an audit. But it serves a similar purpose in that sense, in that it's eyeballs on your code looking for bugs. You can also think of it as simply like the way you want to find out about bugs. So that's a little bit more where it is perhaps an alternative route for a talented security researcher to get some compensation. And there's always discussion about trying to peg the payout to the amount of money that was on the line.
00:38:05.460 - 00:39:30.560, Speaker C: They're so divorced in scale in our space that I think that's almost like 10% of $10 million is still more than a lot of teams have to pay. And if they did pay it, they wouldn't really be able to continue paying their developers for very long. So really, I think of it as like it's way easier than trying to launder money and way less stress knowing that you operated legally and are not going to have anybody coming after you and don't have this gains as well as more ethical so you can sleep well at night. Other things that I learned the importance of so my understanding, what I've been told is that it's like any announcement, right? So you get like a huge rush of attention and people coming in and looking at your stuff. So you really have to get it right off the bat. We actually decided, I'll say this now, so we're launching our system on Friday. We'll have a security MD and disclosure page and probably sort of a good faith we'll figure out what we owe you if you report a serious issue to us.
00:39:30.560 - 00:40:36.110, Speaker C: But we decided that getting the bounty design right was something we didn't have time to do right now, and we really wanted to get it right from the get go. It'll be later next week, I think, that we actually release that bounty program. But so having the details down clearly so that people know just doing the work, so that people can see that you've thought about how much you're. Willing to give for what kinds of exploits, pointing people in the right direction, saying can you drain all the funds from this or can you cause optimism? Very strange system. So it's not just Oracle exploits, but can you invalidate a fraud proof or cause a consensus failure between the two layers, if you will. So laying that all out, making it really easier for people, providing good documentation so that they can get into the code base with minimal effort. Those were a lot of the good suggestions that I got that weren't.
00:40:36.110 - 00:40:41.326, Speaker C: I maybe wouldn't have known how important those aspects would be without that feedback.
00:40:41.438 - 00:40:47.720, Speaker A: Do you think something like Immunify? I believe it's like an on chain bug bounty platform.
00:40:48.810 - 00:40:58.220, Speaker C: Yeah, I haven't really looked into it. I thought it was just a page where it lists bug bounties that people can go and so just sort of aggregating information. Is it doing an on chain thing?
00:40:58.670 - 00:41:13.200, Speaker A: I believe they said that we're going to do a 500K bounty on batcher dow, but I'm not 100% sure. I don't know if somebody here knows a little bit more about it.
00:41:13.650 - 00:41:54.460, Speaker C: Otherwise we can that's like the Holy Grail kind of is like this idea of can we put the money on chain? Like put the bounty on chain and then that bounty contract can assess whether or not the exploit has happened in the target contract. My sense is that if you can write the invariance or the properties effectively enough in an external smart contract, then you can also just write those checks in the smart contract and not get hacked. I think it sounds awesome, I just don't see it ever actually happening.
00:41:55.550 - 00:43:02.658, Speaker A: Good point. Tincho, let me ask you this. During the coin craze, I would see so many projects just copying another code base, launching and then tagging auditing firms on Twitter and it's like, hey, can you audit us for free or for like five E? How do you feel about that? There are not enough auditors. Right? And I think that's also why you created damn vulnerable DeFi XYZ. It's a series of coding challenges. Is that a way to bridge developers to have a more security minded mind, so to speak? I can architect and develop smart contracts, but it is not my strength. It's not in the security part of things.
00:43:02.658 - 00:43:08.340, Speaker A: I think that requires a different kind of training, at least for me.
00:43:09.910 - 00:44:44.718, Speaker E: I think there are two questions entangled in there. Let me start with the or DeFi. Yeah, I basically will that because the best way for me to understand what is going on in the DeFi space and seeing all the postmortems and write ups and Twitter and stuff is for me to actually locally try the exploit and understand step by step what's going on. So as I was doing that in my home, my personal computer, I realized that I was actually building challenges for myself and that it would be awesome if I could publish those challenges out there for developers to understand. What are the common pitfalls today in DeFi? It's clearly inspired by many and many countless CTFs and war games and so on, that there are in classical application security, let's call it, and also inspired by the Ethernet, a war game that opens uplink, created by Alessant and there a few years ago and captured the ether and so on. There are plenty of them, I think, already in ethereum, but then vulnerable DeFi is extremely focused on DeFi problems that I have seen during audits in exploits in the wild, some little things that I add into the code to make it more challenging. Some people have told me, hey, this is awesome, but I didn't also find it super challenging.
00:44:44.718 - 00:45:34.980, Speaker E: And then I realized that that is true. Like many of the actual exploits that we see today in DeFi, they are not that complicated. Once you already found the vulnerability and know how the system works and can execute it, yeah, of course that is very difficult. But in that vulnerability, I wanted to take the whole complexity of that into its simplest form. So each challenge is like a simple way to exploit a system related to DeFi. For instance, there is a challenge where you need to take a flash loan, take a snapshot, and then hack a governance system and you can do that and it's there and it's a way to teach or to educate the community in those regards. So it was like a super learning process for me and hopefully it is also valuable for the community.
00:45:34.980 - 00:46:29.460, Speaker E: Coming back to the original question about auditing firms being tagged in Twitter for audits, I don't know. I think that many the most respectable auditing firms have built a reputation already in the space. So I don't think that we are particularly affected by a project tagging us or not in Twitter. But it's also true that today many of these most respectable auditing firms in the space are like super booked, fully booked. Everyone that has tried to book an audit with these firms has probably seen that already. So there is clearly a shortage of auditing professionals in the space. But I don't think that China, a specific company in Twitter, will change that.
00:46:29.460 - 00:47:00.670, Speaker E: I think that there are always, like, perhaps putting grants out there. If a project needs to be audited and it needs to raise money from the community and something in those lines, I think there might be other ways to fund audits for a project where the community can contribute to a project by funding an audit and then using that money to pay for an audit in these auditing forms. That might be a way, but I don't see again, tagging somebody in Twitter.
00:47:01.010 - 00:48:07.794, Speaker B: Won'T change much just to jump in here. While we're on the topic of challenges, I think it's definitely a true point that right now there's not a lot of opportunities for people to sort of get hands on without actually exploiting a protocol. And exploiting a protocol at least should be fairly difficult. So it's not very suitable for beginners. We do have things like OpenZeppelin has Ethernotes as well, which I was a big fan of smarts made Capture the Ether, and there's been a smattering of challenges competitions held over the years. But I mainly wanted to jump in just quickly show I'm helping write challenges for Paradigm CTF, which you should totally sign up for if you're interested in trying both some very simple, like, do you understand this concept? Can you execute? And then also some very difficult challenges written by yours truly that I don't know, you might find a bit challenging. So if that sounds like your thing, you should definitely sign up for that.
00:48:07.794 - 00:48:10.820, Speaker B: Anyways, that's the Quick show right there.
00:48:13.690 - 00:48:30.182, Speaker A: That sounds incredible. I hope that this helps because that was one of my questions. I think Dean just sent me this one. What can auditors, security researchers, and ethical.
00:48:30.246 - 00:48:31.050, Speaker B: Hackers.
00:48:33.150 - 00:48:58.930, Speaker A: How can they help improve the ecosystem? And I think building this sort of tools and challenges out of your experience with working on this is a great step. But what about training the next generation of auditors and security researchers? Doggy. But I remember reading about the Y Academy.
00:49:01.110 - 00:49:40.340, Speaker F: Yeah, so, I mean, I'm kind of loosely familiar with it. I forgot his name. I don't even know if it's a he or whatever their name is. We've done a partnership with Gitcoin. So Gitcoin has this kernel program, and one of the tracks is a security track so that's people who are interested in getting more involved with Ethereum DeFi security topics. So the point of the kernel program is to kind of funnel people down this path of like, yes, I'm interested in it. Yes, I'm good at it.
00:49:40.340 - 00:50:30.274, Speaker F: Yes, I want to get deeper inside of it. And as a part of the kernel track, they're going to be working with us and kind of being trained in our process, our internal review process that we're using for auditing strategies to kind of expand on that. As Cincho was just saying, the timeline for auditing is just super out of the water right now. No one can really book anything. There's been a few. Like, we have an auditor that we use that has this monthly kind of rolling basis that you can get a little bit of auditing time out of them on a monthly basis. And that's something we have as well.
00:50:30.274 - 00:51:03.930, Speaker F: But for us, because we're releasing so many contracts, namely strategies that interact with external systems in certain ways, we have this internal review process. So as a part of the kernel program, we're going to be involving those people in really like that peer review process, which is, I would say, one of the more important parts of the security process, I guess, of developing Smart contracts. So just getting different eyes in different viewpoints.
00:51:07.330 - 00:51:08.080, Speaker B: Cool.
00:51:09.250 - 00:52:02.506, Speaker A: Let me change topics a little bit and talk about flash loans because they always come up during exploits. Personally, I think flash loans are great. They allow so many good tools, debt swaps between protocols, even the playing field for everybody. I cannot think of any exploit or correct me if I'm wrong, that was done with a flash loan that couldn't have been done with just a whale with enough capital. But actually, Fiona Kobayashi sent a couple of questions that I want to read out. So I don't know if you know, there's a maker improvement proposal to allow Flash minting die. I don't think it's infinite flash Mint.
00:52:02.506 - 00:52:34.280, Speaker A: It's probably up to the debt ceiling. And there is also a wrapped ether, a West Ten version that it does allow infinite wrapped ether minting. How do you think about this kind of thing? Do you incorporate this into your security based thinking? I think it was James Preswich who said that every token should allow infinite flashment because why not?
00:52:36.490 - 00:53:55.534, Speaker B: Yeah, so I think definitely the first thing to keep in mind about flash loans is, as many people have already mentioned, the problem isn't the flash loans, it's the fact that the system doesn't handle large volumes. And I think with Flash minting it's even more interesting. Yeah, I took a quick look at maker's Flash Mint dye implementation and it is up to, I think it's a separate ceiling configured in the module itself. And I'm super excited for the future that brings, I think flash loans and Flashbinding sort of forces people to consider things that they otherwise would have shrugged off and then would have gotten bit by down the road. And then with their introduction, they now have to consider it before launch or hopefully consider it before launch. Because if not, then it's not a whale who notices that can attack you, it's anyone who notices that can attack you. But then of course, people implement protections like they'll prevent any contract address from interacting with their contract, or they'll prevent you from withdrawing in the same block that you deposited.
00:53:55.534 - 00:54:55.266, Speaker B: And I think this is sort of in the same vein as the non wrenchant modifiers where I've seen some people mention like, this feels kind of dirty, like you should just design your protocol to work properly. And I just wanted to offer a counterargument that if it fixes the problem, right, you could definitely rewrite your code to make it so that it is ranchingly safe and then not use a modifier. But if the modifier works, why wouldn't you use it? Right? It's providing the security you need, even if it might feel a bit dirty. And then same with the TX origin ecos message sender. It still raises the bar for an attacker. Right? At the end of the day, you're still adding additional security even if it feels a bit dirty. Go for it.
00:54:55.288 - 00:55:20.390, Speaker F: I think yeah, I think the words for that would be like defensive programming. So you're just kind of adding layers to your design where you're not sure, you know, it'll solve an issue. Like reentrancy, like a reentrancy guard, you know, that solves a potential issue, and that's just guarding against a scenario. I'm pretty sure this doesn't have a reentrancy bug, but in case I'm.
