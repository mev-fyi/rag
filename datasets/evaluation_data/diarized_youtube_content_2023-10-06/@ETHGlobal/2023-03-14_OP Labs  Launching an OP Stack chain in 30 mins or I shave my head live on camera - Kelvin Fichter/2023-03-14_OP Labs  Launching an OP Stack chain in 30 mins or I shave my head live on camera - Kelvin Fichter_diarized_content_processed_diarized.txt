00:00:15.360 - 00:00:15.910, Speaker A: You.
00:00:17.880 - 00:00:32.390, Speaker B: Hello, everyone, and welcome to the Op Labs workshop. Launching an Op stack chain in 30 minutes or I shave my head live on camera. Joining us today is Kelvin Victor, who will be taking us through this session. And with that, I will pass it over to Kelvin to get the session started.
00:00:32.920 - 00:00:58.784, Speaker C: All right, hello, everybody. I'm sitting on the floor right now, which is very bad for my back, but what can you do so such as life when you don't have a desk? This is running an Op stack chain in 30 minutes or I'd shave my head live on camera. Unfortunately, I don't have a razor with me, so if I can't make it in 30 minutes, I'll have to do the shaving at another time. But I will do it live on camera. So I'm going to start a stopwatch. Oh, God. Okay, let's go.
00:00:58.784 - 00:01:32.504, Speaker C: So essentially what I'm doing is I went to Stack Optimism IO and sorry, I even forgot to introduce myself. I'm Kelvin. I work for Op Labs, doing a lot of different things. But today I'll be running over the process of running an Op stack chain, which is really, really easy now. So essentially, what we're going to do is launch our own roll up in 30 minutes. It'd be super, super easy and you can then later on go and modify it if you go to the Opstack docs. So Stack Optimism IO and scroll down to building Op stack roll ups and go to the getting started.
00:01:32.504 - 00:01:50.268, Speaker C: You can follow along, but I'm basically just going to follow this tutorial and show you what I'm doing. So let's get a move on. I've opened up a new folder called Demo for the sake of this, and I'm just going to start running the tutorial. So first thing we do is launch.
00:01:50.364 - 00:01:51.010, Speaker A: The.
00:01:53.780 - 00:02:35.016, Speaker C: Clone the optimism mono repo. So that's where a lot of the code lives. Pretty much everything except for guest lives in the optimism mono repo. And we're just going to go ahead and install dependencies, and then we're going to build a whole bunch of packages. Installing dependencies and building packages takes a little bit of time. So once we start building the packages, we can go ahead and move on to Cloning and building Op Get, which is the execution client, the default execution client for the Op stack. So if you are familiar with the architecture of the ethereum node ecosystem these days, there are two components.
00:02:35.016 - 00:02:44.892, Speaker C: There's a consensus client and an execution client, and the Op stack and optimism. And all the rollups like base that are based on the Op stack also use the same split.
00:02:45.036 - 00:02:48.036, Speaker A: So we will be running both of.
00:02:48.058 - 00:02:59.380, Speaker C: Those components as part of this tutorial. First things first, I'm going to start building the optimal monorefo. In the meantime, I'm going to go ahead and clone Op Geth.
00:03:01.160 - 00:03:01.892, Speaker A: And building.
00:03:01.946 - 00:03:19.816, Speaker C: Opgeth at the same time. So, yes, like I was saying, there's this two components, the consensus client and the execution client. The execution client is called Op get. It's a very minimal disk on top of upstream geth, represented right now as a single commit.
00:03:20.008 - 00:03:20.684, Speaker A: Here you go.
00:03:20.722 - 00:03:42.736, Speaker C: I'm just building geth. This is how you would build geth if you were building normal geth. You just run make geth. And this is usually pretty fast. So this is just going to take a second. And then once that's done, we're going to go back to the monorepo. So back at the monorepo, it's still building a whole bunch of things, building a whole bunch of different components.
00:03:42.736 - 00:04:28.368, Speaker C: But again, the most important thing that we're going to build is this thing called the Op node, which is our consensus client. So in the meantime, we sort of get a look ahead of what we're going to do. We're going to generate some private keys. So as part of this tutorial, there are four key actors in the system that we want to generate keys for. There's an Admin account which has the ability to upgrade contracts within the system. A Bachelor account, which publishes sequencer transaction data, takes sequencer transaction data and publishes it to our L one. There is the Proposer account, which publishes transaction results to the L one, and the Sequencer account, which is going to sign blocks on the L two.
00:04:28.368 - 00:04:45.992, Speaker C: So that if we wanted to run more than one node, we can run that. And it will connect over a peer to peer network and distribute blocks quickly over the peer to peer network. So the first thing that we're going to do in a second, once this builds, is we're going to create a whole bunch of these keys using the.
00:04:46.046 - 00:04:52.988, Speaker A: Read key command, because I'm going to.
00:04:53.154 - 00:05:01.340, Speaker C: Keep these keys private. I'm going to go over to my other window here. And where are we?
00:05:01.410 - 00:05:02.344, Speaker A: Here we are.
00:05:02.482 - 00:05:04.076, Speaker C: And in a window that you can't.
00:05:04.108 - 00:05:07.724, Speaker A: See, I'm going to run this command.
00:05:07.772 - 00:05:09.250, Speaker C: So all this is going to do.
00:05:10.580 - 00:05:17.076, Speaker A: Is it's going to do exactly what.
00:05:17.098 - 00:05:48.408, Speaker C: You can see on the screen. It's going to generate these keys, and it's also going to generate a mnemonic. Okay, so give that a second to finish building. If I can't make it in 30 minutes, I blame girly. I almost learned my lesson and didn't do this on Gurley this time, but then I got lazy and I decided to do it on a girly again. So my guess is that the most annoying thing will be deploying smart contracts.
00:05:48.424 - 00:05:54.600, Speaker A: To Gurley, but we'll find out. So give it a second.
00:05:54.770 - 00:06:00.256, Speaker C: Almost done building. Either that or the build process is.
00:06:00.278 - 00:06:00.784, Speaker A: Going to kill me.
00:06:00.822 - 00:06:29.450, Speaker C: Okay, good. We're done. So in another terminal that you can't see, probably, if you can, I'm going to run the NPX hard Hat three key command, which is a custom task that we have added, and it's just going to generate these keys. So you can't see this I can see this, but I now have an output that looks like this. And in a minute, I'm going to fund some of these keys with some e. Now I'm going to.
00:06:33.230 - 00:06:34.300, Speaker A: Where are we?
00:06:34.850 - 00:06:40.462, Speaker C: I'm going to go and configure the network. So right now, network configuration happens inside.
00:06:40.596 - 00:06:45.090, Speaker A: Of the Contracts Bedrock package.
00:06:46.550 - 00:06:57.458, Speaker C: So there's this folder called Deploy config inside of Packages contract Bedrock, deploy config within the optimism monorefo. And there's this network called Getting Started.
00:06:57.544 - 00:06:59.474, Speaker A: That is sort of set up for.
00:06:59.512 - 00:07:09.150, Speaker C: You to fill in so that you can go and run your own chain. So it's got these things that you need to fill in here. And what I'm going to do now is I'm going to run this command.
00:07:09.250 - 00:07:14.042, Speaker A: Down here that will give me some.
00:07:14.096 - 00:07:25.134, Speaker C: Information about a recently finalized girly block, which I can then use to set the starting block for my roll up.
00:07:25.172 - 00:07:31.120, Speaker A: So the roll up can start at any point where are we? Hash and number.
00:07:31.490 - 00:07:43.006, Speaker C: It can start at any point, so it can start syncing from any point. But we really just want to find some block that we can use as our starting point. So I'm just using the latest finalized block on Gurley as the starting point. You can see I got the hash.
00:07:43.038 - 00:07:44.610, Speaker A: The number, and the timestamp.
00:07:45.910 - 00:08:23.370, Speaker C: Next, I'm going to fill out the remainder of the pre populated config. So I'm going to take the hash that I just generated, I'm going to paste that in where it says L One starting block tag, that's where the network is going to start. And I'm going to take my timestamp and I'm going to insert that as the starting timestamp up here. Then the rest of this is just filling out some addresses. So I'm going to copy paste from my other terminal where I generated those addresses. And I'm basically just wherever it says Admin and filling in my admin.
00:08:23.530 - 00:08:25.998, Speaker A: That is not supposed to say Admin.
00:08:26.094 - 00:08:27.890, Speaker C: I need to make this case sensitive.
00:08:28.230 - 00:08:29.154, Speaker A: There we go.
00:08:29.272 - 00:08:32.580, Speaker C: So wherever it says admin, I'm filling in the admin address.
00:08:35.030 - 00:08:39.880, Speaker A: Did I do that right? Yes. And come on.
00:08:40.490 - 00:08:50.570, Speaker C: Wherever it says proposer, I'm going to fill in my proposer address. That's the second one. Wherever it says batcher.
00:08:53.990 - 00:08:57.586, Speaker A: I'm going to insert my that's not my batcher address.
00:08:57.688 - 00:09:02.338, Speaker C: I don't even need to find and replace only one. And wherever it says sequencer, I'm going.
00:09:02.344 - 00:09:05.410, Speaker A: To insert my sequencer address. Boom.
00:09:05.570 - 00:09:45.970, Speaker C: That was really easy. And that's the whole thing. So the next thing I'm going to do is I'm going to deploy the L One smart contract. So I've just configured the network I need to deploy the L One smart contract. So the very next thing to do is to go into Contracts Bedrock and create a env file. So there's this example env file I'm going to copy and I'm going to paste it, rename that to just Env. And I'm going to fill in my l One RPC, which I'm just getting from Alchemy, and I'm going to fill in my deployer private key.
00:09:45.970 - 00:09:57.618, Speaker C: I'm going to hide the deployer private key part so you don't steal all my Girly ETH. Now, that Girly ETH is so expensive and I'm also going to get rid.
00:09:57.624 - 00:09:58.694, Speaker A: Of this tenderly stuff.
00:09:58.732 - 00:10:18.586, Speaker C: So you only really need those two first things. The next thing I'm going to do is I'm going to send some Girly ETH over to my E or to my deployer address so that I can actually pay for this if it ever decides to load. See, this is going to be the.
00:10:18.608 - 00:10:24.030, Speaker A: Deputy it's going to be the part where I can't send Girly ETH.
00:10:25.330 - 00:10:27.118, Speaker C: Come on, frame. Yes.
00:10:27.204 - 00:10:27.838, Speaker A: Okay?
00:10:28.004 - 00:10:39.780, Speaker C: So I'm going to send my girly ETH. I'm going to send myself why not? 2020 whole Girly E. What's that like $3,000 now?
00:10:40.150 - 00:10:48.552, Speaker A: Who knows? All right, sending that. Boom.
00:10:48.616 - 00:10:57.390, Speaker C: Okay, so my account should now have 20 Girly E. That's great. I just sent the ETH to myself.
00:10:57.780 - 00:10:58.768, Speaker A: Oh no.
00:10:58.934 - 00:11:04.930, Speaker C: Okay, now I need to send it again. I just sent myself 20 burly that doesn't make any sense.
00:11:05.460 - 00:11:06.450, Speaker A: Come on.
00:11:07.220 - 00:11:12.580, Speaker C: Now I'm sweating. It might be because my heater is on too high, but I'm sweating.
00:11:14.440 - 00:11:17.492, Speaker A: Oh, boy. Oh no.
00:11:17.626 - 00:11:20.150, Speaker C: Okay, I got 20 minutes left.
00:11:22.700 - 00:11:23.770, Speaker A: Oh, no.
00:11:25.340 - 00:11:29.860, Speaker C: Okay, well, in the meantime, I'm going to start deploying the smart contract.
00:11:29.940 - 00:11:30.570, Speaker A: So.
00:11:34.300 - 00:11:59.810, Speaker C: All you need to do is NPX hard Hat Ploy network getting started. So now my account should have enough ETH in it and I'm just going to start deploying. So this is the slow part of the whole process. Basically, just deploying these contracts takes while on Gurley gurley gurley is usually fine, but it's not the fastest network to deploy to.
00:12:02.260 - 00:12:03.632, Speaker A: All right, it looks like we're going.
00:12:03.686 - 00:12:11.492, Speaker C: I'm going to keep an eye on my Gurley ETH account to make sure that I'm not running out of money because you never know when your account.
00:12:11.546 - 00:12:13.284, Speaker A: Is going to run out of money.
00:12:13.482 - 00:13:03.236, Speaker C: But it looks like it's going. So this is just going to go and deploy a whole bunch of smart contracts that make up the L One side of the system. Those smart contracts are things like the bridge smart contracts, the contracts that configure the network. So there's something called the system config contract that is sort of a way to manage the L Two system on L One. So if you make a change to that contract on L One, the system will actually upgrade sort of automatically or it'll detect the change and change automatically. And a couple of things. There's the core bridge contract, there's like user land bridge contracts, and then there's the ERC 20 and ERC 721 bridge contracts which sit on top of all of that.
00:13:03.236 - 00:13:26.076, Speaker C: And so a lot of these things sit behind Proxies so that they can be upgraded. And so as a result, you can see that we're deploying a whole bunch of proxies first. Then we're going to go ahead and deploy a whole bunch of implementations. And then we use this cool contract called the System Dictator, which handles upgrading all of the smart contracts at the same time and initializing the system in.
00:13:26.098 - 00:13:27.500, Speaker A: A series of steps.
00:13:28.660 - 00:13:56.692, Speaker C: At this point, all we need to do is wait. It's pretty tame. Luckily, it looks like gurley ETH is cheap right now, or gurley gas is cheap right now. So I'm not burning through ETH. But I can show you what we're about to do next. So once all these smart contracts deploy, I mean, at this point, it's going to look identical to the system that runs Optimism and runs Base. So everyone gets the same smart contracts.
00:13:56.692 - 00:14:05.356, Speaker C: There's some legacy stuff in there as well. But the point is that by making the system uniform, everybody gets the same.
00:14:05.458 - 00:14:06.860, Speaker A: Box to play with.
00:14:07.010 - 00:15:06.684, Speaker C: So, okay, what's next? Well, like I said, we need to run these two components, the op node and Op Get. So the first thing that's necessary is to run a whole bunch of not a whole bunch of things, just a couple of scripts here to generate some config files. And those config files are based on the deployments that we generate. So we're going to need to wait before we can do that. Once we generate the config files, we also need to generate a JSON web token that is used to interact between Op Geth and the op node. This is the exact same system that's used for the consensus client and execution client. Then we're going to take some of those config files and we're going to copy them over to Op Get, where we're going to create a data directory and we're going to load the sequencer key and we're going to import the sequencer key and initialize Get.
00:15:06.684 - 00:15:36.730, Speaker C: Like I said, we're going to try to run a full roll up here. So we need a sequencer. So that's why we generated that sequencer p to P key earlier. But essentially you only need one sequencer node per network. So we're just going to run one. I'm not going to have time to run a second node, but you could also just run a second node and connect to the sequencer over the peer to peer network and receive blocks right away. So we're almost ready here.
00:15:36.730 - 00:15:50.796, Speaker C: Still deploying a whole bunch of contracts. This is the unfortunate thing about the way that we do our deployments right now is it takes quite a bit of time to deploy everything. But what can you do? That's just how it goes. But luckily, this time we are not.
00:15:50.818 - 00:15:54.270, Speaker A: Running out of cool.
00:15:54.640 - 00:16:50.864, Speaker C: In the meantime, I'll talk about what you can do with all this. So right now we're going to be running a standard roll up, right? We're going to be running a thing that looks exactly like Optimism main net, and it's got all these default configurations, but you can tweak the configuration quite a bit. So if we take a look at the getting started, we can tweak things like the block time, right? So if you wanted 1 second blocks on your roll up, or if you wanted ten second blocks on your roll up, you can tweak that there. And there's also stuff like the finalization period. Just for the sake of example, we set this to 12 seconds, which is one l One block, but you could set that to pretty much any number. Then there's things like the block gas limit that you can modify and stuff just these parameters for essentially how much time a sequencer has in order to get data onto l One. Almost done here.
00:16:51.062 - 00:16:51.810, Speaker A: So.
00:16:54.340 - 00:17:45.872, Speaker C: The other thing that we can talk about later a little bit, if we have time, is that you can also modify the node software itself to do some really cool things. So inside of this example or inside of the docs, if you head over to the op stack hacks sample hacks, so the adding attributes to derivation function, adding a pre compile, you can actually see example hacks of how to modify the op node or the l Two. Like the op geth node, to do things like the example that we give for modifying the op node is automatically tracking the l One burn. The gas burn on l Two can do all sorts of stuff. You can just track all sorts of things about different smart contracts. You can pull data. You can put things into l Two.
00:17:45.872 - 00:18:31.376, Speaker C: Whenever there's a specific event on l One, you can do all sorts of things. And then, of course, you can do things like add a pre compile to Get, which lets you take expensive common computations and make them cheaper. So now we're near the end of the deployment process. You can see here that we have basically transferred control over to the migration system dictator, and it's essentially just executing a series of steps, preparing the system, getting everything ready for deploying the real network, and then we're going to be able to run our blockchain. So hopefully nobody has broken anything on Develop, and this deployment is going to.
00:18:31.398 - 00:18:33.744, Speaker A: Work with no problems.
00:18:33.862 - 00:18:40.960, Speaker C: Otherwise, I will be shaving my head. But I guess we'll find out.
00:18:41.030 - 00:18:41.650, Speaker A: Okay.
00:18:44.980 - 00:18:52.230, Speaker C: Finalizing deployment. My girly whale account is visible. Is my girly whale account visible now?
00:18:53.000 - 00:18:53.668, Speaker A: Uh oh.
00:18:53.754 - 00:18:55.212, Speaker C: How do I make it hide?
00:18:55.376 - 00:18:59.816, Speaker A: I just want it to go away so I can see the screen.
00:18:59.998 - 00:19:01.930, Speaker C: All right, Frame, what are you doing?
00:19:06.800 - 00:19:09.528, Speaker A: Uhoh uhoh.
00:19:09.704 - 00:19:13.100, Speaker C: Oh, no, I didn't oh, my gosh.
00:19:16.000 - 00:19:17.848, Speaker A: My screen is frozen.
00:19:18.024 - 00:19:26.370, Speaker C: I didn't expect that the death of me would be that my computer would crash. Oh, my God.
00:19:31.400 - 00:19:32.630, Speaker A: Oh, no.
00:19:33.480 - 00:19:34.660, Speaker C: This is bad.
00:19:34.810 - 00:19:38.470, Speaker A: Okay. Hello.
00:19:39.480 - 00:19:43.190, Speaker C: I think Frame did this to me. No, I think Zoom did it to me.
00:19:45.020 - 00:19:51.530, Speaker A: Uhoh uhoh.
00:19:56.190 - 00:19:57.580, Speaker C: Not like this.
00:19:58.510 - 00:20:06.490, Speaker A: Not like this. Oh, my God.
00:20:12.950 - 00:20:17.480, Speaker C: Not like this. Please just start working.
00:20:18.810 - 00:20:26.282, Speaker A: No. All right.
00:20:26.416 - 00:20:30.300, Speaker C: I don't know what to do. I don't know what to do. I'm going to have to restart my computer.
00:20:31.970 - 00:20:32.718, Speaker A: Wait.
00:20:32.884 - 00:20:37.498, Speaker C: Oh, my God. I'm back. Everything is flashing.
00:20:37.674 - 00:20:38.522, Speaker A: It's frame.
00:20:38.586 - 00:20:41.200, Speaker C: I'm blaming frame. Quit, please.
00:20:44.150 - 00:20:44.994, Speaker A: No.
00:20:45.192 - 00:20:45.940, Speaker C: Okay.
00:20:49.110 - 00:20:54.820, Speaker A: Oh, God. Oh, God.
00:20:55.510 - 00:21:02.710, Speaker C: This is terrible. I need to get a terminal. Come on, let me have a terminal.
00:21:05.660 - 00:21:06.730, Speaker A: Okay, wait.
00:21:07.180 - 00:21:11.856, Speaker C: I need someone in the chat. My screen is just frozen.
00:21:11.988 - 00:21:13.036, Speaker A: Can anyone hear me?
00:21:13.058 - 00:21:20.780, Speaker C: Am I just talking to myself? I'm very confused. I think my wallet software just broke.
00:21:27.380 - 00:21:29.376, Speaker A: Oh, God. Hey, Kelvin.
00:21:29.408 - 00:21:30.390, Speaker B: Yeah, I'm here.
00:21:33.160 - 00:21:39.620, Speaker C: I don't know what's happening. Oh, man. I'm just trying to open up one terminal so I can kill my wallet.
00:21:43.160 - 00:21:44.108, Speaker A: Everything is dead.
00:21:44.144 - 00:21:54.536, Speaker C: Okay, what's the command to open up a terminal? I need someone in the chat to tell me the command to open up a terminal without any control over the.
00:21:54.558 - 00:21:55.610, Speaker A: Rest of my screen.
00:21:57.520 - 00:21:59.070, Speaker B: Can anybody help them?
00:22:00.800 - 00:22:03.230, Speaker C: There is a command for this that I never remember.
00:22:07.510 - 00:22:35.026, Speaker A: Take screenshot, whatever, I don't know. Okay, wait a minute. Let's give you this out. Hey, Cohen, if you can hear me.
00:22:35.048 - 00:22:36.850, Speaker B: I've typed in something in the chat.
00:22:52.270 - 00:23:05.934, Speaker C: What are we going to do? All right, control alt key is not working. I'm wondering how quickly I can restart my computer. All right, be right back. Let's do the speed run.
00:23:06.132 - 00:23:08.654, Speaker A: Oh, God. Oh, you know what?
00:23:08.692 - 00:23:13.570, Speaker C: I have an idea. What if I kill one of my monitors?
00:23:23.370 - 00:23:24.710, Speaker A: No, still nothing.
00:23:24.780 - 00:23:30.410, Speaker C: All right, this is bad. I need to restart. Bye.
00:23:34.440 - 00:23:41.730, Speaker A: All right, we'll see you in a bite.
00:23:48.320 - 00:24:44.774, Speaker B: All right, folks, well, he has five minutes to come back and finish this. Otherwise, as he said, he is shaving his head. In the meantime, if anybody has any questions, feel free to type them.
00:24:44.812 - 00:24:49.210, Speaker A: Leave them in the chat when Kelvin returns.
00:26:04.440 - 00:26:10.594, Speaker B: Hey, how's it going? I can't hear you.
00:26:10.632 - 00:26:14.182, Speaker A: You're still muted, maybe. Or different.
00:26:14.236 - 00:26:15.590, Speaker B: Audio source?
00:26:17.370 - 00:26:18.600, Speaker A: Can't hear you.
00:26:48.080 - 00:26:53.648, Speaker B: Can you not type in the chat either? Oh, there you go. I can hear you.
00:26:53.814 - 00:26:56.240, Speaker C: I'm back. All right, we're good.
00:26:56.390 - 00:26:57.090, Speaker A: Maybe.
00:26:58.180 - 00:27:00.224, Speaker B: All right, you got two minutes.
00:27:00.422 - 00:27:01.612, Speaker A: Let's go.
00:27:01.766 - 00:27:09.430, Speaker C: Okay, let's run a sequencer in two minutes. Come on, desktop, two share.
00:27:09.880 - 00:27:10.820, Speaker A: We can do it.
00:27:10.890 - 00:27:11.830, Speaker C: Two minutes.
00:27:16.920 - 00:27:18.070, Speaker A: Let's go.
00:27:18.600 - 00:27:42.380, Speaker C: All right, run the sequencer in two minutes. Okay, so we got to go to the op node. Okay, we're in the op node. We have to make the genesis config. Come on, make the genesis config. I'm just going to paste it in here so we can where is my key? All right, we're almost there.
00:27:46.450 - 00:27:59.620, Speaker A: Okay, we're going to do this. Oops, no. Come on. Go generate the thing.
00:28:02.150 - 00:28:09.800, Speaker C: Oh, I needed to put this in quotes, I guess. Oh, boy. This is not going very well. And ended up having to shave my head.
00:28:12.570 - 00:28:19.706, Speaker A: Okay, what is this? What's going on?
00:28:19.808 - 00:28:20.860, Speaker C: I don't understand.
00:28:21.630 - 00:28:24.302, Speaker A: This should work. This is bad.
00:28:24.436 - 00:28:36.510, Speaker C: I don't know why it's not working. Now I blame whoever wrote this code. No, what is happening? Oh, it's probably because it's in here and it's using the config lol.
00:28:36.590 - 00:28:37.762, Speaker A: That explains it.
00:28:37.896 - 00:28:41.890, Speaker C: Okay, come on, come on. Generate the JWT token.
00:28:42.470 - 00:28:50.710, Speaker A: Copy the genesis file. Copy the JWT token.
00:28:57.740 - 00:28:59.050, Speaker C: We're so close.
00:29:01.100 - 00:29:02.010, Speaker A: All right.
00:29:04.860 - 00:29:16.860, Speaker C: Create a data directory. No, don't do this to me now. All right, put a password in the data directory. Put a private key in the data directory.
00:29:17.760 - 00:29:20.190, Speaker A: Where is my other page?
00:29:27.750 - 00:29:43.720, Speaker C: All right, put a private key in the data directory. Import it. Come on, import the key. Initialize yourself properly. All right, it's initialized.
00:29:45.180 - 00:29:58.700, Speaker A: Run gith, run. Geth come on, come on, come on.
00:30:02.270 - 00:30:03.690, Speaker C: Run properly.
00:30:07.970 - 00:30:08.782, Speaker A: It's running.
00:30:08.836 - 00:30:11.120, Speaker C: Okay, get this running. Get this running.
00:30:12.530 - 00:30:17.620, Speaker A: We're almost done. We're so close.
00:30:20.150 - 00:30:23.860, Speaker C: Now we just got to run the op node. That's it, that's it.
00:30:25.990 - 00:30:32.326, Speaker A: Copy this thing in. Get the sequencer key in here and.
00:30:32.348 - 00:30:47.990, Speaker C: The L one RPC and L one RPC and it's an Alchemy key. And come on, run.
00:30:49.000 - 00:30:49.828, Speaker A: It's running.
00:30:49.914 - 00:31:21.950, Speaker C: Okay, we're running it. It's running. Okay, so essentially all that's happening here is that it's catching up to Gurley, to the L One Gurley etherscan IO. And it is a couple of hundred blocks behind. So it'll take a minute to catch up. But essentially, this is just running the sequencer now. So the sequencer is running and the only thing left is to start posting transaction data to L One, which we could do, but I don't know if we have much time to do that.
00:31:21.950 - 00:31:31.890, Speaker C: Why not? We can give it a shot. Who cares? Why not? Just do this, run this.
00:31:32.340 - 00:31:35.712, Speaker A: And you know what?
00:31:35.766 - 00:31:43.670, Speaker C: For the sake of time, I'm going to use the same key as the sequencer key. I don't know if that's going to break anything, but to be honest, I don't have time to do anything else.
00:31:44.520 - 00:31:45.670, Speaker A: Put in that.
00:31:46.540 - 00:32:10.270, Speaker C: Run the batcher, get the private key to the sequencer, put that in there and start running the batcher. Okay, so we started running the batcher and essentially now if we go over to Gurley, we should start to see.
00:32:13.360 - 00:32:17.968, Speaker A: As soon as the batcher decides to start producing blocks, which is going to.
00:32:17.974 - 00:32:52.516, Speaker C: Happen in a second because we're almost at the tip of the chain. So you can see the tip of the chain is at block early, block 435. This is at 425. So in just a second, the sequencer is going to start producing blocks and then we're going to start sending those blocks off to L One. So, boom, the sequencer started producing blocks because it got to the tip. Right now it's filling in the blocks with empty blocks because we didn't produce any transactions. So it's going to start doing that, and then after it's done, it's going to start producing one block every 2 seconds like clockwork.
00:32:52.516 - 00:32:57.612, Speaker C: You can see here the batcher is starting to add those L Two blocks to its local state.
00:32:57.746 - 00:32:58.136, Speaker A: Boom.
00:32:58.168 - 00:33:37.384, Speaker C: The batch is starting to submit transactions. And so if we head over to the batch address, which is FF Four 2069, you can see that 3 seconds ago, the batch submitter started submitting addresses, and we now have a fully functional roll up. I don't know how much time that took in total. I hope it was less than 30 minutes in total, otherwise I have to shave my head. But even in a chaotic situation, you see that the Op stack is so good that even under pressure, in a chaotic situation, you can restart your computer halfway through and still do it in 30 minutes. So there you have it. That's a roll up.
00:33:37.384 - 00:34:02.816, Speaker C: I can expose this thing to the Internet, and people could start transacting on it, but I probably won't do that yet. But I don't know if you're interested in doing that, let me know, and I can send you some testnet. But this is a fully functional roll up. We have this node, and I can start sending transactions to it, and they'll start doing stuff. So there we are. That's basically it.
00:34:02.998 - 00:34:04.188, Speaker A: That's the whole thing.
00:34:04.294 - 00:34:06.436, Speaker C: Hopefully that was 30 minutes. I don't know.
00:34:06.538 - 00:34:09.990, Speaker A: Who knows? All right.
00:34:10.680 - 00:34:11.990, Speaker B: I'm not sure.
00:34:13.480 - 00:34:18.090, Speaker C: We'll see. We did it.
00:34:18.780 - 00:34:20.330, Speaker B: We had a question, though.
00:34:20.860 - 00:34:21.610, Speaker C: Okay.
00:34:24.220 - 00:34:28.890, Speaker B: Does this process work on Sepolia network as well? What changes need to be done? If so.
00:34:30.780 - 00:35:00.788, Speaker C: This process does work on every single network. The only thing that you will need to change is in the config, just what the L One chain ID is. And you'll also need to, in the hard hat config, specify a network for Sepolia because it's not in here yet, actually. Yeah, so you'll see that there's this getting started network. So you'll just have to edit the chain ID to be the Sepolia chain ID, but otherwise it'll work exactly the same.
00:35:00.954 - 00:35:02.416, Speaker A: And you can do this on any network.
00:35:02.448 - 00:35:04.548, Speaker C: You can even run it on another roll up if you wanted to and.
00:35:04.554 - 00:35:10.250, Speaker A: Do an L Three. Cool.
00:35:10.620 - 00:35:23.870, Speaker B: That was the only question? Yeah, I don't know. I think well, since you said you don't have a razor, I think you need to shave it the next presentation you do.
00:35:24.320 - 00:35:26.668, Speaker A: All right, thank you, everybody.
00:35:26.834 - 00:35:44.930, Speaker C: We kind of made it. I blame Frame for all my problems. I'll have to shave the Frame logo into my head. Thank you, everybody. Cheers. Follow the tutorial, and you'll get far and DM me if you need help.
00:35:45.620 - 00:35:46.092, Speaker A: Cheers.
00:35:46.156 - 00:35:59.912, Speaker B: Thank you, Kelvin. And thanks, everybody, for attending. I posted the discord link to the Optimism channel as well in the chat. If you have any other questions. But, yeah, this was fun. Kelvin. Definitely appreciate you.
00:35:59.966 - 00:36:04.230, Speaker C: Thank you. And thanks for everybody for sticking in there. I appreciate it.
