00:00:38.810 - 00:01:31.550, Speaker A: Good morning, good morning, good afternoon and good evening everybody and welcome to the Hackafest finale. My name is Kartik. I'm one of the co founders of ETH Global, and I want to thank all of you for being here. So we're wrapping up Hack FS today, and just before I walk into how the next 2 hours are going to go, I want to make sure that I kind of COVID some of the important details for how we're set up today and this whole event. So first of all, ETH Global. For those of you who don't know, ETH Global is an organization with a very simple mission to onboard thousands of developers into the web3 ecosystem. And six weeks ago, we kicked off Hack FS to bring together hundreds of developers who were interested and curious about decentralized storage and smart contracts.
00:01:31.550 - 00:02:30.450, Speaker A: And with the help of Protocol Labs, we announced this event in July. And our goal was to bring in hundreds of developers into this ecosystem and give them the resources they need to build something of their own choice. And wanted to invite some of the best companies pioneering the technologies in this space and offer them support with any types of problems that our hackers face to see if we can get something incredible out of this experience. And at the end of it, we got exactly that. We had 470 hackers from 50 different countries who worked across 19 different time zones to build a project they were really passionate about. We had an amazing set of mentors who were there for these developers and participants to offer their feedback, comments and help them unblock with any issues they were facing as they completed their projects. And we also had a wonderful roster of sponsors who were there the entire time, helping our teams by offering them support tools and SDKs to make their lives easy.
00:02:30.450 - 00:03:36.386, Speaker A: And not only that, they were also there to help inspire all of our teams by doing talks, panels, AMAs, and office hours to explain the details and the nuances of how everything works in this ecosystem. And at the end of it, we got 134 projects that came out of Hack FS and this absolutely blew us away. So we spent all of last week looking over every hack. And by the way, you can also just head over to Hack ETHGlobal Dot Co and check out every single project that came from this event. And I can tell you that the creativity, the technical engineering, the amount of problem solving, and the diversity of ideas and the challenges everybody faces across the world just blew us away. So today in this vanilla, we're going to be showcasing some of our favorite projects who we think were really creative and really cool, and we want to make sure that everybody else also gets a chance to see these projects. So we have our ten finalists who will be joining us today and going over their demos.
00:03:36.386 - 00:05:02.766, Speaker A: But before we go into these ten teams and who they are, I want to make sure that I really take the time to say and emphasize, just because somebody was not part of the top ten list, it does not mean they were not good enough. The 124 projects listed here continued to put in the same amount of work effort and focused on learning as they built their projects over the past month. And even after judging finished last week, a lot of them came to us and told us that they'll continue building what they started off over the last few weeks and take this to the next step and really accomplish the goals of what they wanted to build at the end, even after this event finishes. So I want to really thank you for kind of saying that to us for everybody who reached out. And this is exactly the type of energy positivity and the motivation to continue learning and being better that inspires us to continue doing more events like these at ETH Global. And we're super thankful for everybody who was there and who kind of helped make this super successful and also submitted their hack. So with that, I want to go to our ten finalists and I want to congratulate IPFS Recovery Block SIG pygate web3 API, public annotations network, sailplane, planet flare, valid pulp and decentralized docker hub.
00:05:02.766 - 00:05:55.118, Speaker A: These are our ten teams that will be coming on presenting what they did to everybody else at this event. And as we look through these ten teams, we noticed that they all fall nicely into the developer stack of applications, infrastructure, and developer tools. We have a nice mix of teams that encompass each of these categories. And what we'll be doing today is walking through this whole stack from top to bottom and seeing the best of the applications, the best of infrastructure, and best of developer tools that came out of hackfs. And with us we have an awesome set of guests who will be here chatting with these teams after they present and asking questions and giving them feedback on how to actually take this thing to the next level and make this a really successful product. And I want to welcome Molly McKinley, who is the IPFS lead at Protocol Labs. I want to welcome Pooja Shah, who is the FalcoIn product lead at protocol labs.
00:05:55.118 - 00:06:44.660, Speaker A: I want to welcome Juan Benet, who is the founder of Protocol Labs. And lastly, Ken Eng, who is the lead for the Ecosystem Support Program at Ethereum Foundation. They'll be here with us today talking to all of our teams and giving them feedback. And with that, we're going to be moving on to our first block and seeing the four applications from the finale. And we'll have Sailplane, Public Annotation, Network, Pulp and Blocksick come in one after another, back to back, and then we'll be joined with all four of these teams again, where we'll be doing a big Q A with all of our teams, and our guests will be asking them questions and their feedback. So let's kick off hack FS finale by bringing on Sailplane for their demo, and I'm super excited to see what everybody's done.
00:06:55.290 - 00:08:21.428, Speaker B: Hi, I'm Anders, and my partner is Steve Deck, and we've been working on Sailplane, which is a collaborative file manager in the browser. It's live right now at Sailplane IO. Sailplane is like Dropbox, but peer to peer, and every file uploaded is encrypted end to end by default. What's great about Sailplane is users can navigate to the website and immediately start using the app. There's no need to make an account or install a browser extension. The two primary technologies Sailplane uses are IPFS and orbitdb. IPFS is used for replicating and transferring data or referencing and transferring data, and Orbitdb is used for representing a mutable file system and handling concurrent writes.
00:08:21.428 - 00:09:10.472, Speaker B: Both of these run entirely inside of the browser tab. When a user uploads a file or photo to the website, it's added to the IPFS local store. The output from this is added to a custom Orbitdb store representing a mutable file system. This mutable file system exposes methods for moving around the files and folders and also computing a CID that can be handed to IPFS to download the data. Later, we're going to move into a demo. When a user first navigates to the website, they'll see this intro modal with some information, and when they're ready to start using the website, they can click on Open Drive. This first thing they see is the File Explorer for the default drive.
00:09:10.472 - 00:10:09.350, Speaker B: The default drive is private, which means that every file that's uploaded is encrypted with a random AES key. Before being added to IPFS, we're going to add a handful of files. We can preview multiple different types of file extensions. These are image previews. We can also upload albums or folders, and we can move files in the File Explorer into the folder. We can see that they've been moved into the folder, and we can download the mutated folder. Next, we want to show collaborative file managing, so we're going to simulate another user by opening another browser.
00:10:09.350 - 00:10:49.480, Speaker B: If we navigate to Drives, we can see the default drive. If we want another person to be able to write and read to this drive, we need their user ID. So we'll go to the Drives panel and copy their user ID. We go to manage users. This user ID is also a public key. Once we've added them to the drive editors, they'll have read and write access to the drive, but we still have to import it. So we'll copy the drive address and paste it.
00:10:49.480 - 00:11:56.692, Speaker B: Now that we've joined, the drive will be into sync, and we can see that. We can move files around and see the changes. Propagate can also delete files, and we can upload new files we can also preview them from the other side, we can download them and we can share these encrypted files directly by encoding the IPFS CID and the AES key for that file into the URL fragment. What this share link will do is open up a local IPFS node that will grab the data from IPFS and decrypt it with the encoded as key. That's our presentation. Thanks for watching. Here's a link to the source code and the website if you'd like to try it out.
00:11:56.692 - 00:11:57.670, Speaker B: Thank you.
00:11:58.680 - 00:12:18.350, Speaker A: Awesome. Well, thank you so much for that. And we'll move on to our next demo. And just to a note for the Sailplane team. We'll just have you stay here with your videos off and we'll invite everybody else at the end for the Q A. So, next up, we have Pan Network, which is Public Annotation Network, and I'll have them just kick off with their demo.
00:12:19.760 - 00:12:43.156, Speaker B: Hello, everyone. Welcome to the Public Annotation Network presentation. Just a quick overview of our team. There are three software developers amongst us and one business developer. Three of us are based in Germany and I am based in Lisbon. So, about our project. We are an open source, censorship resistant web annotation tool for any web page.
00:12:43.156 - 00:13:32.276, Speaker B: And our MVP for this hackathon is focused on Twitter. So we built this because our society is becoming increasingly independent on centrally controlled platforms, which have a huge amount of power to censor how information is passed around amongst people. They can delete it, they can mutate it, or they can just selectively hide it. Parallel to this, web annotations are a very nice way to promote discourse on the web. You can add information to any web page and they play very nicely with web3 technologies. I'm now going to show you a quick demo of our browser extension, working on Twitter, creating comments using our decentralized infrastructure, and then showing on another browser how those comments are propagated and displayed. Here we go.
00:13:32.276 - 00:14:12.960, Speaker B: So this is actually a new feature from Twitter which plays really nicely with what we built. Now, people who create a tweet can prevent anyone from replying to it, right? So our colleague here, Dominic, said that we need to prove him wrong, that no one can comment on this. So I already have my browser here loaded with the pen extension noticed by this yellow pen. So if we can come here, we can see that no one has commented so far. So I can come here and just say you're wrong. We sign it with MetaMask because we are sending the message. This is now being sent to our layer two, which is processing batches of annotations.
00:14:12.960 - 00:14:36.788, Speaker B: And when you go back, we can see that it's already being displayed here. Now we can go and just do another one saying that it's still wrong. We comment that as well. We sign it, we wait a few seconds and I go back. It's still here. Now you may see that the icon, the status has changed. That's because we are only processing every two comments.
00:14:36.788 - 00:15:01.760, Speaker B: So every two comments that come, we take this, put in IPFS and Ethereum. We can increase the size of this patch, obviously. So if we come to another browser, can just reload the window. Here we are on the same tweet. No one has replied so far, but if we open Pen, we can see that the comments show up here. So that's what we have for our demo. So this was just a video backup.
00:15:01.760 - 00:16:05.920, Speaker B: The way this works is the browser extension is talking to our layer two, which is a network of publishers which take these annotations, arrange them in batches, and when a certain threshold is hit, it sends the annotation to IPFS and then stores a fingerprint on Ethereum. Then we have a subgraph running on the graph, which is then indexing all of those transactions and taking that information, sending it back to the client to be displayed to everyone. The web annotations are AW three C standard and they are wrapped into Verifiable credentials which are then signed, which are also standard. And these standard data models are very nice because this can then be displayed on any application. So as far as our infrastructure choices go, we are using IPFS and Ethereum to reduce the censorship attack factor. We use the publishing service to lower the cost for annotation, the cost of running the server, and for better UX, because it's much faster to show the annotation right after it's created to everyone else. We use a smart contract to keep track of all the annotations that were created.
00:16:05.920 - 00:16:44.368, Speaker B: This is very important to make sure it's censorship resistant. The only way to ensure this is that you know that you have the exact number that should exist. And we are using double three C standards to make sure that this can work on any presentation layer. So next we want to do a Mainet deployment. Right now we are on Robston, although on mainnet, the gas prices are not friendly to try new stuff out. We also want to implement native interaction from the web extension with IPFS and Ethereum. We could have done this, but out of lack of time we decided to focus on the layer two to create the best user experience possible.
00:16:44.368 - 00:17:14.430, Speaker B: But it's not a big stretch to implement directly to JS IPFS and then using web3 JS to use Ethereum. We would like to build a community network of publishers. We just need to get incentives, right? Because someone needs to pay for the transactions, refine the UX naturally to target nontechnical users and build more clients. The web extension is just one way to take this data and show it to everyone. The sky's the limit in this case, so the QA will be at the end. So that's all from us. Thank you.
00:17:16.080 - 00:17:32.930, Speaker A: Awesome. Well, thank you so much. This is a really cool demo, and we'll kick off with our third demo for today, and that is Pulp Network. So as soon as they are ready to join and share, we'll have them kick off with their video or demo.
00:17:36.300 - 00:17:55.852, Speaker B: Hi, everyone. My name is Dan. I am one of the members of the Pulp Network team. There are three of us on the team. I'm joined by Roland and Mason. We are from Boston, Massachusetts and Calgary, Canada. Our accomplishments over the last few weeks are twofold.
00:17:55.852 - 00:18:50.640, Speaker B: We formulated a protocol for the publication and subscription of blog content, and we implemented a proof of reference client for that protocol. Pulp Network is a Web three blogging platform. The artifacts and actors in our system would probably be familiar to you if you've ever used something like Medium.com or Substack, but Pulp Network is an abstraction on top of a bunch of existing distributed technologies. The Pulp Protocol outlines six procedures, each which dictates an interaction between the Pulp client, the Ethereum Network, and the IPFS and filecoin networks for hackfs. We built a reference client that implements the first four. It's an angular app, and it's deployed by fleek, so the app itself is served in a decentralized manner.
00:18:50.640 - 00:19:49.060, Speaker B: We're using Textile Buckets on Textile Hub to interact with the IPFS network, and we're using MetaMask to broadcast and sign transactions for the Ethereum Network in the demo. I'm going to show how an author can create a new blog and upload their first blog post. I'm going to start by going to Robson Pulp network. Note we have a main net contract running in Pulp Network, but for demo purposes, this is faster and cheaper. So we're going to start by signing in. This is going to prompt MetaMask to sign a message, and using the signature, we generate a lib P to P identity. And effectively, that allows this Ethereum address to update IPNs records and thus write to IPFS Directories and note that we display the ENS alias instead of the Ethereum address if it's relevant.
00:19:49.060 - 00:20:26.300, Speaker B: So we're going to start by publishing or start a new publication. I'm going to grab a little bit of test content here. We're going to call this the Pulp team Dev blog. I'm going to add a tagline, but more importantly, we are going to reserve a URL. So this is going to prompt MetaMask to sign a transaction which accomplishes two things. It's going to reserve this URL and it's going to map it to our IPNs address that this user controls. So we can wait and watch for the transaction in any Blockchain Explorer.
00:20:26.300 - 00:20:42.390, Speaker B: But I'm going to fast forward here a little bit so we don't have to wait to an empty blog post that I created a little while ago. This is a new blog. There are no articles in it yet, and we are going to add our first one. So again, I'm going to grab a little bit of test content.
00:20:44.120 - 00:20:45.188, Speaker C: Add a.
00:20:45.354 - 00:21:31.024, Speaker B: Subtitle, and I'm going to grab our README from our repository to serve as the blog content so we can preview that and our client renders content in markdown. But more importantly, we can publish it. And so publishing it accomplishes two things. We are persisting this file, this blog post as a IPFS file to the IPFS network and we are taking the IPFS hash and stamping it on the Ethereum blockchain in a transaction. So that serves both as a proof of existence and as a endorsement by the author. So again, I'm not going to wait for this transaction to go through and I'm going to fast forward a little bit into a new tab. This is an article that I wrote a little bit earlier.
00:21:31.024 - 00:22:25.716, Speaker B: So this has already been persisted to the network. And I'm going to zoom out a little bit here to look at the blog itself. I've populated this blog with a few sample articles. We've added a little toggle here that shows what's going on under the hood for the demo. Our blog is just an IPNs record and all of the articles in the blog are IPFS files. So each of these files lives at the IPFS directory that this IPNs record points to. The result is that we can explore this information in any IPNs resolver, we can look at the IPFS contents in any IPFS explorer, we can look at the author and the proof of existence contracts in any blockchain explorer.
00:22:25.716 - 00:23:04.580, Speaker B: And I just want to highlight kind of the groundbreaking nature of what Ethereum and IPFS are allowing us to do here. This is a simple web app. In the browser, there is no server. Our identity mechanism is just MetaMask. The persistence mechanism is just IPFS and all of our business logic is happening on the Ethereum blockchain. And the result of that is all of this content is available in the public domain. And that's really important for both the author and the readers.
00:23:04.580 - 00:23:35.630, Speaker B: They don't need Pulp network specifically. They don't need our specific client to kind of intermediate their relationship. And we've talked to a number of blog authors and they find this feature to be quite valuable to them. They want to kind of own the relationship with their users and this allows them to do that uniquely. So we're kind of excited about this. We appreciate you watching and we look forward to answering any questions that you have at the end. Thank you.
00:23:37.680 - 00:23:49.170, Speaker A: Awesome. Thank you so much, Dan. And with that we'll have our last application demo and that is going to be team blocksig. I'll have them kick this off and we'll then move into our Q A.
00:23:56.660 - 00:24:48.464, Speaker B: Hey everyone, I'm Sauroop and this is my co founder Anomet and we've hacked together Bloxic. Bloxic is a notarized document signing solution that's backed by proofs on Ethereum and encrypted files on IPFS. So to give you a quick overview, so as a notary, you set out this document, which is signed on the Smart contract, and every party that is supposed to do a Wet signature, an email. Oracle sends out an email where they make the signing just like any Web 2.0 app. And once all of the signatures are propagated through a transaction lifecycle, the notary finalizes the document and the final hash is stored on Ethereum for proofs. So under the hood, we have a Node JS back end for the email oracle, we have a very simple HTML Five front end that's open source and is hosted on Fleek.
00:24:48.464 - 00:25:24.684, Speaker B: We use a block visual API gateway that uses the Ethereum mainnet using Matic l Two So to reduce gas costs and faster transactions. And we also use Space daemon that allows us to use textile buckets for encryption, so we don't have to publicly put the files on IPFS. So let's jump to the demo. So I've hosted the file the Front end here on Fleek. So let's load this up. The experience is very similar to that of DocuSign. You simply upload a file, a PDF, fill out who the notary is, put in the information of each of the signers.
00:25:24.684 - 00:25:54.840, Speaker B: We can add as many as we want. I'm just going to do a very simple one here for a tenancy agreement between three people. So that's me, Anumit and a notary that are going to sign this. So let's hit continue. We can review it. Since we wanted to monetize the service, we've added a very simple Stripe integration that allows you to pay using a credit card. In this case, I'm going to do an actual transaction with Apple Pay processing live demo payments.
00:25:54.840 - 00:26:57.010, Speaker B: Let me just give it one more try. So sorry about this. Let's see if our free plan actually works. Okay, so at this point, we've actually stored the PDF on IPFS and encrypted it using Space Demon, and each of the parties have received a request to sign it. So before that, as you noted, there was no sign up or login. Right, so we actually just sent out the first email to the notary to sign up, and they can confirm the document. This point, it's simply sorry.
00:26:57.010 - 00:27:01.730, Speaker B: The problem is, because I used the free plan, I haven't tested that in yesterday's demo.
00:27:03.460 - 00:27:05.744, Speaker A: It's okay. We can try the paymenting again if.
00:27:05.782 - 00:27:07.200, Speaker B: It takes a few seconds.
00:27:07.560 - 00:27:08.710, Speaker A: Not an issue.
00:27:14.790 - 00:28:16.810, Speaker B: Swear. I ran this five times today and it worked. Don't worry, it's just demo. It's all good. We all know how we go. On my Touch ID, it just says processing for some reason. Actually, you know what? I can just do this demo using it.
00:28:16.810 - 00:28:48.800, Speaker B: I like how the front end cache has actually not come in on this browser. That's okay. Fortunately, the functionality should work. This one. Google pay. Let the world know my CVC number. Okay.
00:28:48.800 - 00:29:14.614, Speaker B: Right. Okay, I think that went through. All right, attempt number two. So this is the notary receiving another call here. So we're going to confirm the document and this time it should go through. So at this time, we are actually making the first smart contract call as well. So hopefully that transaction comes in.
00:29:14.614 - 00:29:35.120, Speaker B: There we go. If I actually just show you here, that's the first creation in the transaction cycle. And now each of the signature requests. The parties would have received a request. So I'm going to check my inbox. There we go. There's a signature request, and I hope Anumit, who's on the call, is also signing on his computer at this moment.
00:29:35.120 - 00:29:57.934, Speaker B: There we go. I'm the landlord. Separate my signature. This is yet another transaction which should come in here. I'm also going to quickly show you the backend as well. So we're actually receiving these webhooks and that's what the Oracle is constantly managing. And this is the space demon.
00:29:57.934 - 00:31:06.720, Speaker B: It's not very easy to read what's going on, but that's actually what's taking care of the file stuff on IPFS and filecoin, that makes it really easy for us not having to maintain a node. So at this point, the node tree should have received a notarize event. Yes. So that means the node tree will get final request. Serious googles actually been sent out, as I can see here from AWS, but some reason Google isn't. I just hope it's not in. They've not decided to mark it as spam.
00:31:06.720 - 00:31:43.998, Speaker B: Sorry about this. Right, so this is the final step at this point, once the notary sign. So this is equivalent of doing this in real world. But due to COVID, I realized this was a huge problem that's been happening here in India and many other places. So we can see both parties have signed and each of the signature proofs as well. I'm going to show it right at the end. So as a notary, I'm going to finalize the signature and let's actually take a look.
00:31:43.998 - 00:32:44.666, Speaker B: There should be a transaction coming in for notarization. And once all of this has propagated, what the system does is it actually goes through, takes all the signatures, puts it on a PDF, adds some metadata, and the final hash is what we actually store on the blockchain. Right? So every party should have received a final email right now. But meanwhile, let me just quickly show you what I'm about to before I sort of show you the demo of this, how do we sort of ensure that no one sort of tampered with the data, right? So what if this service goes out of business or anything bad happens? Right, so this is a page that's actually also hosted on IPFS. You can simply put the final PDF and what we do is using MetaMask or any Web three provider, we're able to extract metadata, check against the hash, figure out all that information, actually prove it on this page. And that's what this protocol does. So let's actually get that final PDF.
00:32:44.666 - 00:33:23.244, Speaker B: So I can show you this demo. So I'm going to download this and let's drive. We can drag and drop or we can just call this. There we go. So it's making a bunch of different calls. It's all open sourced on our GitHub, so you can actually take a look. I wonder if it's just my Internet that's having issues.
00:33:23.244 - 00:33:50.060, Speaker B: There we go. Sorry about that. So that's approved. So all of this information actually can be verified on the smart contract. So when I showed you those transactions so let's just go back quickly before I end the demo. This is the finalization hash that was done through which you can actually go and make a bunch of smart contract calls and check that every information that was submitted, which is including when a person signed because a lot of people say, I've done the signature and that proof can be verified here. So that's our demo.
00:33:50.060 - 00:33:56.270, Speaker B: Please do check out Blocksuit app to see our gitcoin. Grant. Thank you so much.
00:33:56.960 - 00:34:26.420, Speaker A: Awesome. Thank you so much. And that was our last application demo. So what I'm going to do is I'll invite all the teams to turn their cameras on and we'll kind of jump into a massive Q and A. We'll just have a pretty big discussion in any direction from anybody and just kind of go over some of our cool projects. I'll kind of start this off. One thing kind of we noticed after all these demos was Swaroop ended up paying a lot of money to do these trial runs.
00:34:26.420 - 00:34:50.912, Speaker A: So it was really the most expensive demo. That's just one comment, but just overall, the theme is that out of all four of these demos, the most interesting part is that they all are seamless. They all rely on Web three technologies. We haven't seen the kind of hurdles or bottlenecks that we usually see in Web Three apps. And they are very much ready to go and be used for everybody else. So to me, that's an amazing accomplishment. We saw some layer twos being used.
00:34:50.912 - 00:35:10.676, Speaker A: We saw actual payment integrations, and they use the best of storage and smart contracts. So let's kind of kick this off and I'll see if any one of our guests wants to jump on and ask anybody a question. Just go for it.
00:35:10.698 - 00:35:27.092, Speaker D: This is so cool, you guys. Thank you so much for the awesome presentations. It's just really amazing to see what you guys have built. We definitely have the fun job here, which is watching all of your great demos. I had a question for Sailplane. Really amazing app. You guys like super slick.
00:35:27.092 - 00:36:02.180, Speaker D: One of definitely something where like, okay, cool. No longer using Google Drive and Dropbox, like moving to this thing. I was very curious. You guys are using Jsipfs in the browser to kind of do this handshake. What happens if, say, I've sent my link from one account to a friend who's going to open up and. Try and grab the data from my drive after I've closed my web page and maybe my Node or my computer has gone offline because JS IPFS happening in the browser. How do you guys handle that scenario?
00:36:02.760 - 00:36:42.230, Speaker B: So right now everything is working peer to peer. So right now you would need someone that has the browser open with that file already loaded into their IPFS store. However, we're going to very soon implement filecoin functionality for pinning. So you'll be able to, if you want, use MetaMask to pay a little bit to have someone else replicate the file. But we found that most of the time when people are sharing files, they just want to send it from one person to the other. And with most services like Google Drive and Dropbox, you have to store it on a third party server for someone else to fetch it, which doesn't make sense if you're just trying to go peer to peer. So we try to solve that problem.
00:36:44.840 - 00:36:46.230, Speaker D: Got you. Thank you.
00:36:50.030 - 00:37:39.066, Speaker B: I have a general question for everybody again, just to reiterate, this is so awesome. I had so much fun watching these. So I think the corny thing to ask is like, what's next? What are you guys going to do after this? But I have a different question. So all of these are stark improvements over what we currently have, not just that, but also stark improvements over paid services that are already existing. Web two, do you or any of these teams plan on monetizing? And if so, how do you plan on doing so? What's the model here? And yeah, I can answer the one with the failed demo. That's the way I showed it. That's how we want to monetize it.
00:37:39.066 - 00:38:43.280, Speaker B: So every document that you see, so either you pay with each document fee or with a subscription, I'll answer for us, we plan on, like I mentioned, the pinning service that we want to do. We're probably going to implement a proxy contract to be able to take a small amount of revenue for ourselves. Very small. On the blogging side, I think there are a couple of areas that one could or a company could kind of come in and potentially monetize. I think content discovery is an interesting area that our blog system did not even touch on. Right? How do you surface interesting content if you have the link, if the reader has the link, they can visit the blog, but there's no search or indexing. And so I think there's some room there where authors want their blog content to be exposed to users and they would probably pay for that.
00:38:43.280 - 00:39:30.286, Speaker B: The other area is sort of just in the convenient delivery side. If a company is facilitating something like an RSS client or an email delivery system where you're piping this stuff straight to somebody's email inbox, I think readers and authors would probably split some of their transaction fees with a company on that side as well. Cool. On our case for the annotations, we think that we could monetize by running one of the publishing services. So publishing is great because you can take the transaction cost and make it very small, and it can also accompany gas prices. So right now, gas prices are very high. So that's cool.
00:39:30.286 - 00:40:03.578, Speaker B: Let's just make the batch size bigger, and you'll take a little bit longer to be filled, but you end up paying the same. So we could almost charge constant pricing for that. We ran some tests, and if the batch size was like, 1000, each annotation would cost like 1% of $0.01, even with today's gas prices. So if there's a lot of influx, we can make the batch size even bigger and make it very cheap. And people pay for services like VPNs, which in a way, are also in the interest of circumventing censorship. So we believe that for some cases, it would make sense to pay for a service like this.
00:40:03.578 - 00:40:37.890, Speaker B: And if not, they can just pay for their own transaction and pay like $20 right now. I don't know. Cool. Thank you. I have a question. Whenever you're building something and you're making something, there's a lot that goes into it, and you work on a bunch of different parts of this whole system, and you design a really large thing and you implement all the parts and so on, what was your favorite part? Sometimes when you're making a thing, there's like, a specific thing that either was really hard to do and you accomplished, or the design came out really well and so on. That really highlights how the entire thing comes together.
00:40:37.890 - 00:41:01.980, Speaker B: And so I just want to hear from each of you. Which part for you as a team was like, your favorite? And maybe you have three different answers or whatever. Just give us one per team. Thank you. When Steve implemented the image previews, that was awesome because all the files are like, full resolution and you can zoom in. The viewer is just so nice. It was just like, a really nice point in the project.
00:41:01.980 - 00:41:37.446, Speaker B: On our case, it was how we dealt with Ethereum. So I sort of thought about this before, about how we kept track of all these comments on Ethereum, and it was a mapping on a contract, which is using storage, which is incredibly expensive. And then sometime later, I thought, oh, maybe we can use transaction logs, and logs are a bit cheaper. But now Johannes, one of our teammates, said that we could just use the call data and then index it with the graph. And that made it way cheaper. And that was great. That was like, when we saw that this could really work on real use case.
00:41:37.446 - 00:42:38.424, Speaker B: So, yeah, super happy with that. For ours, I think it was the moment actually, Mason was the one who delivered this. We ended up in Bridging, kind of the Ethereum private key and the lib p to p identity in many ways that kind of bridges kind of IPNs key space and ethereum key space and just allowing that to unfold without kind of a third party let's MetaMask be a pretty powerful kind of identity center across applications. And that was kind of a breakthrough moment for us. And props to Mason for actually accomplishing that. So for us, when I actually gave this to a friend who usually has not tried out any ethereum DAP. So for them to be able to complete the entire flow without having to set up MetaMask and stuff.
00:42:38.424 - 00:43:11.076, Speaker B: So I think that's what actually made our team more confident about being able to ship this for public use. I want to add something. One of the coolest things was my wife was having issues using AirDrop, dropping files from her phone to her computer and vice versa. And I was just like, use sail plane. And I didn't even have to tell her how to do it. She just did it right away and was sharing files. So that was awesome.
00:43:11.076 - 00:43:12.550, Speaker B: My favorite part.
00:43:16.920 - 00:43:50.450, Speaker E: Sorry. Yeah, I just wanted to say also, thank you so much to all of the teams for these demos. I think one thing that's especially exciting to see is that I think all of you invested in really great UIs and just having really great UX around what is ordinarily really complicated web3 concepts and technology. And I think you were all really successful at that. And it's just awesome to see that you can create these sorts of experiences on top of this stack now. And I think these are all really creative applications. And I did have one specific question for the sail plane team.
00:43:50.450 - 00:44:24.200, Speaker E: Oh, sorry for the public annotations team, because I was wondering, especially when you think about annotations at scale, it seems to me like it maybe gets into this territory where a lot of the larger social media platforms start to have really large trust and safety teams that are kind of monitoring the information that exists in these public information networks. And so I was curious how you're thinking about that, especially once a project like this starts to see real scale.
00:44:24.620 - 00:45:04.976, Speaker B: Thank you. That's a great question. That's a great case to tell you about our solution. So what we thought was that we would implement some method of whitelisting so you could essentially individually select people that you want to see comments from, or better yet, you could start subscribing to groups, right? These groups could be managed by communities like last year data structure called TCR was really popular, like somehow using a token to curate a registry, to curate a list. So you could think about something similar to that. Groups of people would subscribe to certain interests that they have. If one of these annotators became a bad actor, you just unsubscribe.
00:45:04.976 - 00:45:17.660, Speaker B: And not only would this be a good way to curate the content you were shown, it would also be a good way to prevent spam because if this is super cheap, then people can spam it, right? So it would be like a twofold solution.
00:45:22.160 - 00:46:02.916, Speaker A: Great. Well, I want to thank all four teams. So thank you so much Sailplane, Public Annotations, Network, Pulp and Blocksyk for being our application demos and this was an incredible start and I'm glad that we all got to chat and see everything that's super seamless. So with that, we're going to be moving on to our next block. So I want to just spend a little bit covering what the next block is, and that is infrastructure. So we have three projects that fall into our infrastructure category and that's Vallast, IPFS Recovery, and Planet Flare. And we'll be inviting these three teams to come on, do a demo back to back, and we'll have another group, Q A with all three of these teams.
00:46:02.916 - 00:46:08.430, Speaker A: So without further ado, let's welcome Vallus to kick off with their live demo.
00:46:16.900 - 00:46:43.588, Speaker B: Hello everyone. I'm Alec. I'm here with Zach. And we are Team Vallast. What we built is a decentralized software firmware, really, any arbitrary binary data distribution system. And basically our motivation for this was secure and simplified. Software updating is a problem in pretty much every system out there, primarily in IoT traditional systems and in many new cases now DApps.
00:46:43.588 - 00:48:02.768, Speaker B: And in many of these cases, much like authentication, people are rolling their own solutions over and over and over again and they're typically stuck to some centralized process or server. So what valid enables is basically developers can use their Ethereum wallets as their developer credentials, register organizations and create repositories under those organizations and have access control at both levels. So what they could do is publish software or firmware or binary releases and this will trigger events on contracts that clients can then subscribe to. So our original architecture for this was basically we have this core library that abstracts away the communication between Ethereum and in the future Powergate and IP fest filecoin and enables a lot of helper functions to build different clients off of particularly a Rest Relay and a Web UI and in the future a CLI. So what we've currently got now is basically the core library is mostly built out with lots of helper functions. It's talking directly to IPFS, it's using Ethereum as the source of truth for where everything's at and IPFS is storing all the organization metadata, repository data and software releases. And the core library abstracts away everything.
00:48:02.768 - 00:49:09.530, Speaker B: And we use Next JS to build a really easy Rest Relay for classical HTP clients and a browser Web UI that connects directly to your MetaMask Web Three provider. So we have some familiar namespacing with the way we've organized this. Basically you can pick a relay here and if you don't trust our first party relay, you can start your own and you can navigate to Apiyyourororganizationslug, the repository slug and then the version tag. Pretty similar semantics to things like GitHub, try to make it familiar to everyone. So the web front end is mostly built out and intends to abstract away all of this functionality for people, but currently the actual API is functioning. Apologies for the small text here, I'm having trouble hearing Siri's Chiming in here. Okay, so basically what we have here is API Akashictechmeta, and this will give you our organization's metadata that we have.
00:49:09.530 - 00:50:05.256, Speaker B: And then we could do the valids repository and pull the meta Uri here and fetch the repository's metadata. But we could also do here is Go latest and we could get the latest release available here. And if for some reason our first party relay goes down, we have IPFS valid IO hosted on fleek, which only provides the front end functionality and does not abstract away the API, but you can run your own relays if you so choose. And apologies again for the small text here, but couldn't find a good way to expand the console size without messing everything else up. But basically what I'm doing here is I'm going to publish a new release, ballast 1.3. I'm going to tag it with 1.3, give it the hash of where this data is stored, and a little change log inside of the metadata as well.
00:50:05.256 - 00:51:14.400, Speaker B: So we hit confirm here. And while that's mining, we could check out the latest release change whenever that gets confirmed. But effectively what we could do here is we could do something like an NPM install and pull that release from a gateway and in the future we could actually abstract away you having to navigate to your own IPFS gateway. What we actually want to be able to do is have a drop in replacement for things like NPM, Pip, Maven, you name it, and any other HTP based package management system to where all you need to do is change your registry to the Vallast relay of your choosing and then you can get new releases from there. So hopefully this transaction has been mined and yes, our latest release has changed and then we can of course go into the different versions. So that's about it. Again, in the future we want to be able to support more functionality on the front end and we make it really easy to start your own relay and we also have the ability to deploy into serverless environments as well, just to make it a little bit easier.
00:51:14.400 - 00:51:19.330, Speaker B: But yeah, that's about it. So I appreciate your time. Thank you very much.
00:51:19.780 - 00:51:37.130, Speaker A: Thank you so much. Alec and I have a lot of questions for this one too, but we'll save it for the Q A session and with that we'll move on to the IPFS recovery project. That's our second project for infrastructure category and I'll let Govind and Lee take it away.
00:51:38.620 - 00:51:47.850, Speaker F: All right, so this is IPFS Recovery, our submission for Hack Effect 2020. You want to hit present.
00:51:48.220 - 00:51:48.970, Speaker B: Yeah.
00:51:49.680 - 00:52:19.968, Speaker F: And coming into this hackathon, I had some experience working with error correction in the context of distributed systems. I thought IPFS could really benefit from this for reasons we'll see shortly. So, first off, here's the team that brought you guys this hack. So there's me. Govind from Toronto, sarah from Sydney, and Cleve from Odessa. We all met at Hackfest, so it's an international team. So the real problem we want to solve is ensuring the integrity and availability of data, both data at rest as well as data in motion.
00:52:19.968 - 00:52:49.368, Speaker F: Data at rest can be compromised by things like coffee pouring on your laptop, which could be serving vital content somewhere, or power grid shutdown, which is a larger scale effect of the same problem. And data in motion can be hindered by poor network connectivity, which can happen for all kinds of reasons. Further censorship could cause parties that are trying to censor data can go to any length to try to bring down data that's on the network. So we want to ensure that data is not compromised in any of these situations.
00:52:49.544 - 00:52:50.540, Speaker B: Next slide.
00:52:51.120 - 00:53:44.930, Speaker F: So the solution to this problem is erasure coding canonically, which is a method of data protection in which data is broken into fragments, expanded and encoded with redundant data pieces, and stored across a set of different locations or storage media. What this really means is that data on the network becomes kind of a hydra, where if you chop off a whole bunch of heads, it's going to still survive unless you chop off most, if not all the heads. And the point we're trying to make is that it's worth consuming some extra storage to obtain better data resilience and protection and persistence of data in the network. Next slide. So, what we actually built is IPFS Recovery, which is an abstract erasure coding module that operates over the IPLD. Merkel Dag we did a lot of research on which layer of IPFS to bring redundancy into because there are many possible avenues. But since IPLD is sort of the essence of the notion of data that's on the IPFS network, we decided that IPLD would be the perfect place to do it.
00:53:44.930 - 00:54:36.556, Speaker F: We also have a very good integration with Goipfs with CLI utilities, as you'll see shortly in our demo. And we built two erasure codes. One is the Read Solomon erasure code, which is the industry standard, where you have a few data blocks and a few parity blocks for one single file, and you can use some subset of these total blocks to recover your entire file in the event that some of these blocks are not available. And we also built a novel alpha entanglement code. So these codes work where data blocks and parity blocks for multiple different files are arranged in a latice. And the latice is self healing in the sense that if data blocks or parity blocks go down, the network can figure out how to reconstruct those blocks. And we also have some test plans that we implemented in using test ground because we want to battle test the network and see how much resiliency it possesses.
00:54:36.556 - 00:54:39.570, Speaker F: So I'll let you take it away for the demo now.
00:54:40.100 - 00:55:36.500, Speaker B: So hi guys. First of all, we'll start from clean IPFS. I need an empty repository. Then I'll add an arbitrary directory that just has bunch of logos of companies connected to hackaths. The next step is to actually encode this directory through our additional comments to IPFS that will produce us a new CID, new hash that we can explore through refs. We will see that this new encoded directory has a lot of blocks. And to show you how we able to recover that directory, I'll delete some of those blocks.
00:55:36.500 - 00:57:08.012, Speaker B: So some of them are just random blocks. It doesn't matter what blocks delete any of them, not all of them. It depends on parameter named recoverability, but it's separate topic. Okay, so I removed some of them and the next thing is like the actual magic, how we can still can get this directory. Like, as you can see, 100%, so we're still able to get it while we deleted some of the blocks. This is kind of the end of our demo and there are still a lot of things under the hood, how it works, how this setup works, not just in one node, how it works on a network and it works because it's IPLD and it's created there. And also I'm really excited about this and I would like to talk about this with IPFS Devs, and maybe they can take a little dive in this and to explore some of these technical things behind this, because I think there is a lot of great potential in this project that can be upstream to IPFS and also added to specifications and maybe then to new IPLD layer other IPFS implementations.
00:57:08.012 - 00:57:14.180, Speaker B: So I'm really excited with our team to present you this hack. And that's all. Thank you.
00:57:14.250 - 00:57:15.590, Speaker F: Thank you very much, guys.
00:57:16.920 - 00:57:49.068, Speaker A: Awesome. Well, that was a cool demo. Turns out that we have a minor issue with our next demo, and that is the building is on fire for the next team. This is something we're going to adjust real time. So what I'll do is we'll have them move to the end of the group three demo and just come back in about 20 to 30 minutes. And it's unfortunate everybody's safe. I think it's a test.
00:57:49.068 - 00:58:22.010, Speaker A: I'm looking at all that in real time. And what we'll do is we'll move on to our Q and A with just these two teams, and we'll have Planet Flare, which is our third team, come in after group three. So again, this is a thing that we have to kind of handle as things go along. So let's sort of just move into our Q A for the infrastructure section. We'll move in Planet Flare at the end of our DevTools demo. So let's welcome Vallust and IPFS recovery here and let's see if our judges have any questions.
00:58:28.220 - 00:59:07.130, Speaker D: This is super cool. Thank you guys all so much. My mind is blown, like on the IPFS ankle. Both of these are just like literally my dreams come true. So I'm super pumped. I have lots of questions, so many questions for both of you guys because I'm really excited to see how you guys kind of created these and pushing them forward. Maybe just to start with Balust, you guys are pushing things forward on kind of the package manager side in a way that was definitely a top focus for the IPFS team last year when we were thinking about large repositories and versioning and making it easy to do updates and things like that.
00:59:07.130 - 00:59:43.990, Speaker D: One question I had just kind of listening to your presentation, you were talking about kind of putting the metadata on IPFS, but I wasn't quite clear on how you were doing. Versioning of content on IPFS. Is the repository itself versioned through IPFS and downloaded from there? And then did you guys think at all about encryption? For example, there's a couple of teams like literally launching products that are doing updates using IPFS for firmware and one of the things that they have to think about is encrypting the updates that they put out.
00:59:45.000 - 01:00:36.390, Speaker B: Yeah, definitely. So with the metadata, basically everything is logged with events on the contract. So anytime an organization updates their metadata, you can even go back and potentially see how that's changed over time, which could help maybe with some scamming situations or something like that. And then the repositories also use events to log different releases so you'll always be able to go back to every single previous release. And then we wanted to implement filecoin to kind of make sure that that permanent store is there. And as far as encryption goes, definitely have that in mind. We want to basically do that afterward, after we kind of have the whole system kind of figured out and then we can basically use similar styling where you could take the public keys of all of the organizations or whoever has access and encrypt it live there.
01:00:36.390 - 01:00:53.384, Speaker B: But we want to explore the best way to implement that before. So right now we're just kind of focusing on the public software for now, but in the future definitely see more enterprise use cases with adding encryption and things like that.
01:00:53.582 - 01:01:00.296, Speaker D: Gotcha. But right now the firmware itself does get published to sorry, yeah, everything is.
01:01:00.318 - 01:01:17.970, Speaker B: Getting published to IPFS and then the only thing that is being stored in the contracts are the references to those SIDS. So those references could be on Filecoin or IPFS and we could handle there. We tried to abstract it away as much as possible there so you can plug and play different stores as you see fit.
01:01:21.060 - 01:01:56.940, Speaker A: We just got the confirmation again, the fire alarm was a test, and it's over. So what I'll do is I'll have Plentif come on, do the last demo, and then we'll just resume the remaining Q A session with all three teams. So, Joshua, if you're there, I'll just have you turn your video on and kick it off with the demo. And just in case you're talking, I think you're muted. So I want to just make sure. Yes. Perfect.
01:01:58.110 - 01:02:34.534, Speaker B: We're Planetflare, and we're building a decentralized global CDN. We're three students studying computer science at the University of Waterloo, and this hackathon was our first exposure to Web Three technologies to motivate Planet Flare. Let's quickly go over the traditional CDN architecture. Here, we're using the example of a video streaming platform that hires a CDN, such as Cloudflare, to help globally distribute its content. There's a few problems with this model. First, it's a very closed market. To act as a CDN such as Cloudflare, you need to own massive data centers all around the world.
01:02:34.534 - 01:03:15.282, Speaker B: As a result, pricing power is concentrated around very few CDN providers. Second, for users in more remote regions where there may not be a CDN data center nearby, this could actually lead to sub optimal performance. Instead, we present Planflare, which features an open market. Anyone with a laptop can easily spin up a Planet Flare node, become a CDN provider, and get paid for it. For the end user who's receiving the content, we feature seamless integration as they don't need any Web Three technology. And finally, the price is a true equilibrium. Because publishers need to bid to distribute their content on Planet Flare, it's also truly global, as users in remote regions don't require data centers nearby.
01:03:15.282 - 01:03:41.710, Speaker B: They just need a Planet Flare Node. And it's fault tolerant by default. It's built on these technologies. Let's quickly dive into the architecture. The first step is for the video streaming platform to upload its files inside a textile bucket. Once it does that, it can create a bid to distribute that bucket on the Ethereum Planet Flare contract. We use Textile buckets over here so that we can create one bid for many files.
01:03:41.710 - 01:03:48.830, Speaker B: Disregard.
01:03:51.910 - 01:03:57.666, Speaker A: We'll just go with it live. Unless we can play this by ear. If you think it's going to be.
01:03:57.688 - 01:04:34.170, Speaker B: Over, that was just an announcement for the second time, telling us that it was a test. I can continue. That's fine, right? Yeah. Where was I? So the video streaming platform to recap upload its files onto Textile. And we use Textile so that we can create one bid on the Ethereum Planet Flare contract for many different files. And this lets us scale easily and so that we're not rate limited by Ethereum on the number of files we distribute. So once we create the bid on Ethereum, potential Planet Flare providers can decide what to host based on the expected reward.
01:04:34.170 - 01:05:10.774, Speaker B: Once they do that, they eventually serve the content to the end user via IPFF in return, the end user sends back a proof of receipt to the provider. Over time, the provider aggregates these proofs and submits it back to the original publisher via a payment channel. Once the publisher verifies these proofs, it sends the provider an authorization to get paid from the contract. To see this in action, let's jump into the demo. Over here, we have our publisher UI, which lets us upload files to Planetflare. Here. Let's suppose we want to distribute the following content via Planet Flare.
01:05:10.774 - 01:05:58.660, Speaker B: Hello. Planet flare from us. So we're just going to upload the file. As I do that, it's creating a new textile bucket with this file inside of it. Once it does that, it will create a bid on the Ethereum Planet Flare contract to distribute that bucket. And now, via MetaMask, I can confirm that transaction and the bid has been created to see the bucket. Let's open it up in textile, agree to that's.
01:05:58.660 - 01:06:39.340, Speaker B: And so we can see our file, and to actually serve it, we're going to copy the content ID and place it inside this index HTML file, which is what we will serve to the end user. I want you to note that the paragraph tag in here is completely empty. And this is just a skeleton file. It has no real content inside of it. Now let's switch to the perspective of the potential provider. As a provider, I have seen this bid on Ethereum and I want to serve this bucket and get paid for it. Typically, this would be done in an automated way, where the provider would be streaming data from Ethereum and deciding what to host dynamically.
01:06:39.340 - 01:07:18.690, Speaker B: But for the purposes of the demo, I am just going to paste the bucket ID into the UI. Over here, I can see that the publisher has pinned the bucket, and now we're ready to serve it to the end user. So let's jump back to the perspective of the end user. The end user simply accesses a website and opens an HTML file. We can see that the initially empty paragraph tag will eventually get populated by our data that we serve via Planet Flare. This works only right here. We're showing it on text, but in principle, you could use this for images, video, or practically any content.
01:07:18.690 - 01:07:58.750, Speaker B: We also see on the provider UI that they received a token from the end user. This is their proof of receipt. By submitting this token back to the publisher, they'll be able to get paid in Planet Flare coin. And now we can see that the balance in Planet Flare coin got incremented via MetaMask. So that's our whole demo. In the future, we plan to package all of this work via NPM so that anyone can create provider nodes or end users very easily. We want to further document our protocols, and we want to review some of our key design choices, especially around performance and security.
01:07:58.750 - 01:08:01.950, Speaker B: Thank you. We look. Forward to your questions.
01:08:03.440 - 01:08:40.650, Speaker A: Awesome. Thank you for that. Great live demo. And what we'll do is we'll just kind of resume our Q A session. So I'll just have you disable the screen share, and we'll just have all of you turn your videos on and we'll just kind of resume our Q A session. So now that I have all three teams, there's a lot of resilient infrastructure that's being built, CDNS package management and integrity management and recovering data and just having actual data recovery encoding measures. So let's just resume back our Q A and I'll take it away, or I'll let the just take it away from here.
01:08:43.040 - 01:08:51.976, Speaker B: That was awesome. Great job. Great job, guys. And remaining with composure through all of that. That's awesome. Great work. Hey, awesome projects.
01:08:51.976 - 01:09:31.512, Speaker B: All three of them are really amazing and very near and dear to all of what we've been thinking about for a long time, from package management to erasure coding to CDN use cases. Really great job doing all this stuff, folks. It's awesome to see the quality level of the work. I had a question for the ratio coding folks. Really great work with that. Curious how easy it was for you easy or hard it was for you to kind of wrap your head around all of the IPLD data, model and model the data structures with the different charts and so on. And that's a very kind of tricky area of things, and I think your approach to it sounded perfect.
01:09:31.512 - 01:09:38.300, Speaker B: So, yeah, just curious if that was easy hard, or if that was easy. Maybe talk about another hard part of the project.
01:09:38.450 - 01:10:01.068, Speaker F: So, yeah, the short answer is I kind of lucked out because I found Lieb and I know the erasure coding stuff. I didn't know IPLD before coming here. Lieb knows the IPLD stuff like the back of his hand pretty much. So it was a very smooth process for us. He was just like, putting out all this stuff, and I was just like, okay, cool, we just need to do this here and here, and I worked out there. Lieb, do you have anything to add there?
01:10:01.174 - 01:11:12.888, Speaker B: Yeah, sure. So I had some experience with IPFS, their source, closer goals, and I really like IPLD and how it like to make content decentralized and everyone can share it and use it. Also, I'm looking forward for new IPLD version. So when Govin came with this idea, I already seen some issues on GitHub about razor coding, and we were thinking about the overlay service for that. But from the beginning, I realized that we need to do this on IPLD because this is kind of the way that it can work inside the protocol. One uploads the file, encodes it, and then that content is distributed on the Internet. Some blocks can be lost and all the other stuff can happen with them, but still you're able to restore those blocks, like as a hedra heads that's kind of like the best comparison.
01:11:12.888 - 01:11:42.870, Speaker B: And it really works like that. We still don't have a lot of proofs and benchmarks for that, how it can give actual numbers, actual percents, how this upgrades the IPFS network. But from the first scene, it's definitely a good start. And I see that this really helps IPFS, and I'm really proud of it. Kind of this thing.
01:11:44.680 - 01:12:28.960, Speaker D: Follow up question to you guys. You mentioned using test ground to test out your erasure coding, which is super cool and awesome. I was really curious kind of what you guys discovered from running test ground tests. I think one of the things that's in the past been like, oh, should we add more razor coding directly in is like, we're very curious what the performance characteristics will look like. Does this kind of speed up the accessing data? Does it actually add significant resilience factors versus every individual node storing their own copy of a file? And so I was curious if you guys had any early findings from running some of these test ground performance benchmarks to kind of compare your changes versus vanilla IPFS? IPLD.
01:12:29.700 - 01:13:07.456, Speaker F: So, yeah, that's the part which is kind of ongoing, because I posted on Slack, I think a few days before the deadline. I'm like, does anyone know something that's similar to Ganache that we can use for testing out? And then why are you sleeping? I don't know his real name. He's like, hey, try out test. Like, okay. So it was going really smoothly, but we encountered some bugs with the way I think Bitswap worked that didn't allow us to actually complete the test. And that was actually mainly done by the third member of our team, who unfortunately couldn't make it here. Yeah, and do you want to talk a little bit more about that Bitswap bug? Because I think we still have some.
01:13:07.478 - 01:14:14.500, Speaker B: Version, current version of IPFS. When you fail to find the block in your block store, and then you fall back to Bitswap to try to get it from the network. And from this point, you can wait endlessly. And by original idea, I was thinking just to make this work fully over duck service. And this worked, but really bad because I was forced to use timeouts and all of that stuff. But like, later version right now, I'll just rewrite some of the so we have a doc service which works with those redundancy blocks, and it simulates blocks service in some way, and it recovers blocks all the time. So now it works.
01:14:14.500 - 01:15:21.528, Speaker B: We haven't had a chance because not a lot of time to make this work on test ground. So answering your question, Molly, that test ground has shown us this bug, but we still haven't got a lot of information from using test ground. But this is a good start. I think the next step would be to upload this latest version, which is currently in API in our repository, to work it on test ground and to see how it works. Because multiple nodes set up now works and we are able to add file on one node, remove some blocks and govin can take this data on the other side. But we didn't have a chance to show it to you because we had some connectivity issues and none of us had open ports on our router. We didn't have way to do this.
01:15:21.528 - 01:15:25.290, Speaker B: Fast forward, that's probably all.
01:15:25.760 - 01:15:36.860, Speaker D: Well thank you so much. I love that you guys are thinking of using test ground to benchmark performance. That's the exact next step of our conversation when it comes to merging this all into core.
01:15:39.520 - 01:16:33.408, Speaker B: This is really cool for me and this is exciting because this is the infrastructure section but just listening to the project there's so much more and not to overly anchor on anything, but to give the other two projects some love. I was talking to Austin Griffith in the side chat right, specifically for Vallus. Right. I think there's something here where we're talking about an infrastructure how we can also move and I think you mentioned now that there's an enterprise play here. One thing that Austin mentioned was what if we did like Samsung ETH and then now you're pushing out firmware and not only like what if there's fridges that you have incentivized upgrades, know you get paid and die to upgrade your refrigerator's firmware. So. Same for Planet Flare as well.
01:16:33.408 - 01:17:38.500, Speaker B: I was thinking this is amazing and I've said this to other hackers as well because there's low hanging fruit where you can start streaming not just videos, not just hosted, we're talking about hosted content. You can also think about ads and then with payment channels you can really switch them out, you can have a bidding war and it gets really exciting to think about what else there can be there. So I'm very curious for both teams to hear more about what other integrations have you thought about? Like what is the next integration we're going to see? Say, I don't know, let's just give it a let's. Let's say two weeks. What can we expect to see from you two? Yeah, I guess I'll give it a shot. So, definitely looking forward to implementing more filecoin features right now. IPFS was our go to, we're very familiar with it and unfortunate time crunches led us to not be able to implement all filecoin stuff that we'd like but that we definitely want to implement as far as keeping the store permanent.
01:17:38.500 - 01:18:35.800, Speaker B: And yeah, we definitely are interested if we could find some way to incentivize IoT updates that would be great because that could significantly improve the cybersecurity for lots of different industries. So definitely really liking the idea. With Samsung ETH for example, we 100% intended that with people to be able to spawn their own relays and secure them in their own fashion, however they deem fit, whether they wanted to pin the certificates for their personal relays. They could do that so that less powerful clients can then trust the relay a little bit more. Yeah, that's definitely what we're trying to go towards. Of course, the encryption aspect is very important for private stuff. But we also want to maybe bundle this in a way to where you can deploy this to other ethereum compatible blockchains like hyperledger Basu or something like that.
01:18:35.800 - 01:18:55.280, Speaker B: Where if they already have an enterprise chain and they want to integrate these similar features, they could do it in their own private networks without having to use the public if they want. But of course we're always trying to leverage the public network for all kinds of use cases. Hopefully that answers.
01:18:59.220 - 01:19:08.116, Speaker E: And I don't know if Ken, you're also asking Planet Flare Team as well. I also have a question, but I'll.
01:19:08.138 - 01:19:08.710, Speaker D: Wait.
01:19:10.760 - 01:19:50.944, Speaker B: Sure, I can answer that question because I think Chishon's fire alarm is going off again. So I'll take a stab at this. Yeah, so for next steps, I think that our project itself is pretty much ready to go. We just need to package that into an NPM package so that anyone can just NPM install and run their Node server or even on the client side, install that as like a script tag as you saw in their HTML web page. I think the next steps, too is just to formalize it, make sure that our security and design decisions are all well thought out. But yeah, I think it's in a good state. We just need to flush out some things more and package it.
01:19:50.944 - 01:20:28.396, Speaker B: Nicer. Very cool. I'm just going to put this out into the world, but if Ben Nolan or anyone from the Crypto Voxels team is listening, maybe we can figure something out where we have hosted billboards and Crypto Voxels in Decentraland just sprinkling their ideas. I'm blown away by the yeah, that would be an awesome idea and I'm a huge fan of Cryptoxels and Decentraland and so on. Planfire super blown away by the awesome work you guys did. It looks really cool and you got the whole flow working and the publisher and the publisher pace model and so on. That's really awesome.
01:20:28.396 - 01:21:28.816, Speaker B: I'll ask my same question that I asked earlier. What was the part that your favorite part of building this? And maybe I don't know where some components came together really nicely or something that was easy but that you thought was going to be hard or something that just was your favorite part of the project and also ask the same thing to the other. I can answer this for me personally because we're all really new to Web Three. I think for me it was just like learning the possibilities that this technology can have and allowing anyone to design custom strategies. So I think for me it's the fact that the implementation of custom strategies to allow any provider to figure out what to host and what to cache, and the possibilities are endless. Basically, it can be as complex as hosting a machine learning model on AWS and then querying that in your provider node and then serving that model, and.
01:21:28.838 - 01:21:29.856, Speaker A: There'S a lot of stuff around that.
01:21:29.878 - 01:22:02.696, Speaker B: And I think there are other teams too, that are creating some sort of bounty oracle, stuff like that. So I think that our project is more like a stepping stone that allows all these integrations from other parties to integrate with this. So, yeah, I think for me, it's just like the capabilities of this technology. Yeah, definitely. So aligning with what Rap said. As we mentioned, we're kind of like new to the whole Web Three thing. So for me, I guess the most interesting part was just being able to piece everything together and see a functional product out of it.
01:22:02.696 - 01:22:29.090, Speaker B: So we got to work across different layers of the stack, from IPFS down to creating a nice front end for everything. So it was really cool to both be able to have an excuse to kind of hack together this project while learning different things about decentralized systems as well as even content delivery networks, which none of us really knew much about. But as we were researching and as we were developing the project, we kind of got to know what actually underlies a service like Cloudflare. So, yeah, the whole learning process was really fun for us.
01:22:30.440 - 01:23:07.920, Speaker F: I can go next. So for us, for me personally, I think just learning about IPLD and this whole new world is amazing. There's like a 1 hour long video on YouTube somewhere by one of the guys, I think the IPLD developer, that I was just blown away by it completely. So I've been following the IPFS project for a while. I even wrote about it in my university article, like, three years ago. So it's so great to actually be as hands on in this project as possible, and especially even working with Alpha Entanglements. I think novel erasure codes offer a lot of possibilities for the future, pushing our limits for data recovery to the Shannon capacity.
01:23:07.920 - 01:23:16.530, Speaker F: I think that's what's possible and that's what I want to enable for, especially a project with the scope that IPFS has.
01:23:21.080 - 01:23:24.710, Speaker A: Maybe lastly, we can just hear back from Vallus as well.
01:23:26.600 - 01:24:02.770, Speaker B: Sure, yeah. For me, personally, I think building the core Lib was the most fun part and just abstracting away all of the things, and we really tried to make it developer friendly as far as a library goes. And pretty much after the Core Lib was built, it was super easy to take those helper functions and build the rest API off of it and then integrate it into the front end directly. And just exploring the filecoin ecosystem was incredible. Definitely lots of exciting stuff going on there. Yeah, that's probably my favorite stuff.
01:24:03.140 - 01:24:13.990, Speaker A: Amazing. Well, congrats to all three of you, and we hope you kind of keep building this thing. And I want to definitely see a lot of these merged into a master for the libraries you're talking about.
01:24:15.080 - 01:25:24.700, Speaker B: Sorry to interrupt you. Just before we finish the Q-A-I think Pooja had a question and she had to run because now her fire alarm is going. It's a crazy day. Her question was curious for the Planet Flare team, what do you think it would take in terms of network growth for Planet Flare to become as performant as centralized CDN services? Yeah, that's a kind of difficult question to answer because traditional CDNS also tend to have partnerships with ISPs for priority routing through network requests. So we haven't looked into it too deeply, but I think that would probably require a thorough dive of IPFS, an estimate of how close a nearby node would have to be to the end user to achieve comparable performance with a data center that's a little bit further out given networking constraints and differences in routing. So the short answer is I don't really have a great answer around that and I need to look into it a lot more. But we have thought about it and benchmarking is probably our next most immediate goal.
01:25:27.520 - 01:26:09.080, Speaker A: Great. So with that, we'll move on to our sponsor section, which is all of our sponsors will be announcing which teams won their prizes. And what I'll do is for our judges, if you're not one of the sponsors talking as well, you can kind of turn your video off. We'll be resuming in like eight to ten minutes, and then when we hear the sponsors kind of are finished with their demos, we'll move on to the group three presentations. So I want to kick this off first by calling up our first sponsor to tell us who won their prize. And that'll be Bret from Fleek. So please welcome Bret to come turn their videos on and let us know the name of the teams that have won the Fleek prizes.
01:26:11.020 - 01:26:27.120, Speaker B: Awesome. Thanks so much. Yeah. So I'm Brett Shearer. I'm one of the co founders and the COO at Fleek. This has been an amazing month. Thanks so much to Protocol Labs and ETH Global for putting this together and all the hackers involved.
01:26:27.120 - 01:27:26.424, Speaker B: Today has been an awesome call too, just seeing all the presentations. Congrats to all the finalists and it's really exciting to also see all the projects building on Fleek as well. I think in the beginning we saw there was about 134 projects from the hackathon, and from the ones that we reviewed, there was about 80 that built on at least one Fleek product, some of them all the way up to about three, even like, all three products. So that's the Fleek hosting product, the Fleek storage product, and the Fleek space daemon. Yeah. Just real quick, we put an announcement out during the hackathon that we released the Space app. So the Fleek team is building on top of the space, daemon ourselves, using the encryption, the peer to peer, and uncensorable aspects.
01:27:26.424 - 01:28:09.456, Speaker B: So we're releasing the space app that is essentially like a decentralized dropbox to start, but to hop into the prizes, a ton of amazing projects. Took a long time to review and go through them all with a bunch of really good UXs and UIs. But yeah, congrats to the fleek winner is specifically the Space Damon prize itself was a $3,000 prize to one winner. So huge. Congrats the shop. FS team. After looking at all of them, we were blown away by, well, there's a couple of really cool aspects here.
01:28:09.456 - 01:29:01.948, Speaker B: They had like, a decentralized dropbox aspect with being able to upload files that are encrypted and share them peer to peer. But they also had another super cool aspect, which was like a data marketplace. There was a smart contract integration that you could put a value in, die for those files and have a buyer's marketplace to be able to, once you buy those files, be able to decrypt that file and look at the image or whatever the file may be. They also worked super closely with us to provide a bunch of feedback while they're building and helped us debug some of the methods on our Space JS client. So huge shout out to the Shop FS team and the other ones, the hosting prizes and the storage prizes. We had a lot of applicants come in, so congrats to the ones that won. It's $100 to each of these teams.
01:29:01.948 - 01:29:31.290, Speaker B: So the hosting prizes, you can see block, SIG, Pyre, Web, Three, API, IPFS, FPS, Cadbury, WFIL, parcel, public annotation network, sail plane, pulp network, blocksig. Again, for the storage side, there's a bunch of other a few more other ones, so you guys can just kind of take a look here. But yeah, congrats to everyone across all the different projects, and it was an awesome experience for us.
01:29:32.400 - 01:29:40.780, Speaker A: Thank you so much, Bret. Next up, we'll have Andrew from Textile, and he'll be telling us who won the Textile prizes.
01:29:42.880 - 01:30:04.948, Speaker G: Hi, everybody. Yeah, thanks. Presentations so far have been awesome. Thank you for putting this all together. Protocol Labs and ETH Global really cool month, and we had a blast helping out all the teams. So this is like the hard part is to pick a few winners. We spent a ton of time reviewing all the videos and looking at some of the code.
01:30:04.948 - 01:30:35.464, Speaker G: And as a whole team at Textile, we've seen all the projects, so really proud of everything that you've done and built on Textile. We had a ton of submissions. So just a quick reminder of what we're giving prizes for today. We had a few different categories. We had a best browser solution, we had a best mobile solution, and we had a best desktop solution. Then we had just best of threads or buckets. And then finally we had the big best of powergate prizes.
01:30:35.464 - 01:30:58.992, Speaker G: So we had one best browser, one Best mobile, one best desktop. Each of those will get $500. Best of threads or buckets. We're giving out three prizes there, each worth $500. And Best of Powergate, we're giving two prizes worth $1,000. Right here you can see what we've selected and it was really hard. There were just so many good entries.
01:30:58.992 - 01:31:27.704, Speaker G: So I guess starting from the bottom right best desktop solution we saw was the decentralized Docker Hub. It was really great. This was really cool. I realized we should have even had a Best infrastructure category because there were so many solutions that were that mix of desktop and infrastructure that we really wanted to give prizes to. But decentralized Docker Hub we thought was really promising and want to see something continue to build there. Really exciting. Best browser.
01:31:27.704 - 01:32:05.280, Speaker G: We awarded openpoke assembly. We thought that this was just an excellent showcase of threads and really touching on a few different sponsor projects and a really nice, well thought out application and user experience. Best of mobile. You couldn't beat Mobility Marketplace. They had a really great demo and really had thought out kind of a future market where they could actually build a company and we hope they continue to push there. Then just the open buckets and threads. Best of we selected the three newsbuff, Kazan and Edguvalt.
01:32:05.280 - 01:33:05.880, Speaker G: We thought that they really played with the idea of using threads or buckets in kind of three different, unique and really interesting ways that we're excited to see them push forward and really expand on those. And then the big ones, there were a lot of different ways to use Powergate. With Textile, we had the hosted instances, we had Run It Your Own and we had the experimental Hub version with access of all the projects that we saw working there, we had to just select two. And so the two that we were really excited to see push forward, well, we're excited to see all of these projects push forward, but the two we selected were pygate. We really were excited about this. Opening the door for data scientists to use Filecoin and deploy for Java we just saw was a really well thought out and kind of very full, kind of complete flow for deploying packages to Java and having it work over IPFS and integrating to Filecoin. So we were really excited.
01:33:05.880 - 01:33:24.100, Speaker G: Those sort of like nucleus of future ideas and building infrastructure on these networks was really exciting to us. So thanks to everybody for building on us. We learned a ton about how to make our APIs and technologies better and we're down to keep helping you build your projects. And to the winners, congratulations.
01:33:25.080 - 01:33:33.640, Speaker A: Thank you so much, Andrew. So next up we have Unstoppable domains and we'll have Say. Tell us who won the unstoppable domain prizes.
01:33:34.460 - 01:33:44.508, Speaker D: Awesome. Thank you. So, can you hear me everybody? Good? Awesome. Okay, cool. So unstoppable domains. I'm Zaji. Great meeting everybody.
01:33:44.508 - 01:34:16.692, Speaker D: We had a blast during this hackathon. This is one of the most engagement hackathons we've seen in a while. We had 77 projects submit for unstoppable domains, and we were just so proud to see everybody building. So thank you to everybody who was involved, and I can go ahead and get started with the winners. So, the website prizes, we had a few winners for our first one. It's a $2,500 prize, and that is going to IPFS FPS. This is a really fun, cool, first person shooter game.
01:34:16.692 - 01:34:43.336, Speaker D: All of our team had a blast playing it, and I highly encourage others to give it a go. So congrats to that team. I know they were messaging me curious about what was going on, so you guys definitely won. So congrats. And then we had Padlock Crypto, which is a file sharing platform where you can buy files with dai. We were really impressed with the solution, and we were excited to give them the second place prize of $1,000. And then our third place prize, we actually had to split between four teams because we just really couldn't decide.
01:34:43.336 - 01:35:18.164, Speaker D: They were all really great solutions. So each team gets 500. And these go to pygate Crypto, which is an information on Python development platform, secured Finance Crypto, and Dfihedge Crypto, which are both trading platforms, and then Libra Toss, which is a really cool social network. And then finally, our winner for the $4,000 chat prize is Cadbury Chat. We were super impressed with this innovation. It's a peer to peer video and text chat, and you can find it at Meetcadbury Crypto. So, yeah, thank you again to the teams that submitted.
01:35:18.164 - 01:35:29.564, Speaker D: It was really hard to choose. We're happy to continue chatting with all of you offline and hope to see more development from everybody involved. And thanks to the hackfs team.
01:35:29.762 - 01:36:03.340, Speaker A: Thank you so much. Saji. Next up, we'll have consensus and we'll have Gabriel. Tell us who won the consensus prizes. Gabriel, can you hear us?
01:36:12.900 - 01:36:18.720, Speaker B: I think he's having technical difficulties. Maybe let's move to the next one and come back.
01:36:18.790 - 01:36:28.740, Speaker A: Yeah, we'll do that and then we'll come back to consensus. So next up, we have Ethereum Foundation. And I'll have Ken. Come on and tell us the EF prizes.
01:36:32.780 - 01:36:58.704, Speaker B: Hi, I'm Ken from the Ethereum Foundation. So we had several prizes. We had the best uses for a Lip PDP and E two. We had one for differential privacy and one for the best use of our best hack for decentralized social media. I guess we had three of them. For Lib PDP and E two, we have secured finance web3, API and Cadbury. For decentralized social media.
01:36:58.704 - 01:37:17.952, Speaker B: We have blue coty, PNLP and upala. And differential privacy, we have Koyo. I hope I pronounced that right. Congratulations, everybody. Thank you for working with us and building great.
01:37:18.026 - 01:37:25.800, Speaker A: Thank you so much, Ken. And we'll move on to our next sponsor, and that is Pinata so we'll have Kyle from Pinata. Tell us who won the prizes.
01:37:26.380 - 01:37:46.032, Speaker B: Yeah, awesome. Thanks. Thanks everybody for taking part in this hackathon. I loved all the projects that we saw submitted. Our first winner was actually Leon and Randy with IPFS FPS. We loved the project because they were bridging the gap between web two and web3 gaming. Second.
01:37:46.032 - 01:38:24.392, Speaker B: One would be caramel. That was done by Kevin and it was pretty simple adding Pinata to Truffle. Third one, Daikons, was an icon registry for smart contracts built by Yasik, Maximilian and Simon. And the reason we like that is because there's a lot of DEXes that are using IPFS. So we thought that was a pretty neat little project that they created. And then the final one was Unchained Index created by Thomas and Mariam. And basically they're trying to replace APIs by delivering data with IPFS and Ethereum.
01:38:24.392 - 01:38:30.850, Speaker B: So congrats to all those teams and thanks for choosing Pinata to build on.
01:38:31.700 - 01:38:38.400, Speaker A: Thanks Kyle. Next up, we'll move over to ENS and I'll have Brent Lee. Come on and tell us one of the ENS prizes.
01:38:40.360 - 01:38:41.684, Speaker B: Hey, can you hear me?
01:38:41.802 - 01:38:42.756, Speaker A: Yes, we can.
01:38:42.858 - 01:38:47.220, Speaker B: Okay, great. So we had five winners.
01:38:49.960 - 01:38:50.516, Speaker A: Lots of.
01:38:50.538 - 01:39:05.000, Speaker B: Great projects submitted for this. Of course, it was difficult to choose. Our first winner was web Three API, which just made various web3 APIs automatically updated to ENS and IPFS.
01:39:05.440 - 01:39:06.872, Speaker A: The second was Parcel.
01:39:07.016 - 01:39:38.420, Speaker B: So Parcel IDs were ENS names and also made use of reverse resolution. Rick Liu. This was a great project, the blogging platform and just in which authors were identified by their ENS names. Then Decentralized Docker Hub, which you could load docker images from IPFS via ENS and Nonce, which was an ENS IPFS directory kind of search engine thing. So thanks to all of them. It was great. This was a great hackathon.
01:39:39.400 - 01:39:46.330, Speaker A: Thanks Bradley. And now we'll move on to our next sponsors, and that is the Graph. So Martin, please take it away.
01:39:46.700 - 01:40:04.472, Speaker B: Thanks Karthik. Hey everyone. Kira Martin from the graph. Super excited to be here. We had two bounties each of 1000 die for new subgraphs on the Graph Explorer and happy to share that we had great submissions. Our winners are public Annotation Network and Padlock. And thanks to all the team that applied to the bounties.
01:40:04.472 - 01:40:06.540, Speaker B: And congratulations to winners.
01:40:07.200 - 01:40:15.360, Speaker A: Awesome. Thank you so much. So next up, we have $3 in Ceramic network and I'll have Michael tell us who won those prizes.
01:40:17.060 - 01:40:53.192, Speaker B: Thanks Kartik. First wanted to say congrats to all the hackers. We received I think like over 40 submissions that built on three box and a few even on ceramic, although it's not even live yet. And we learned so much through both of those experiences and learned as a team both how we can improve the three box product and the ceramic protocol. And so with that, we had a couple of prizes. We offered three prizes for three box and one for ceramic. The three box prizes were best overall, and then we had two second place winners.
01:40:53.192 - 01:41:28.916, Speaker B: And for best overall, we picked Multiverse. It's a complete social network built on three box and also uses Textile, which we love to see. So Multiverse basically was storing everything from profile data to post metadata for images, they used threads for messaging and friend requests, and they also used private chat between users. And so that was awesome. That product also had a really sweet UI, so congrats to that team. They won the $1,500 prize. Second place was a tie between Koyo and Padlock.
01:41:28.916 - 01:42:05.844, Speaker B: Koeo is a decentralized organization management platform. They use three box for profiles, proposal information and commenting on proposals. And it was delivered in a really nice package. Also had some other cool tech regarding vote secrecy and privacy. And for the last three box prize we had Padlock. And Padlock has already been mentioned, but they are a way to sell data or information. And they stored secret keys and integrated three box with Secret Network, which was awesome to see.
01:42:05.844 - 01:42:50.640, Speaker B: We've been chatting with Secret for a while and doing that, so thanks. And for Ceramic, we had a prize for $500 to create a new DOCTYPE and docketypes on. Ceramic are basically ways of creating content. They define rule sets and Aridinos created a brand new DOCTYPE for Verifiable claims. And so they use Ceramic as a way to create and publish Verifiable information and perform state management on that information. So typically verifiable claims are anchored on they're stored somewhere and then you need a revocation registry. But they actually use Ceramic documents as an innovative way to manage the state of the claim inherently in the claim itself.
01:42:50.640 - 01:43:00.070, Speaker B: So you don't need to rely on a third party registry to do that. So congrats to all the teams and to all the other sponsors and to ETH Global and Protocol Labs for a great event.
01:43:00.600 - 01:43:07.560, Speaker A: Thank you so much. And lastly, we have protocol labs, and I'll have Molly. Come on and tell us who won the Protocol Labs prizes.
01:43:09.740 - 01:43:34.800, Speaker D: Awesome. There were a lot of ones here, so thank you so much to all of the teams. There were some really amazing submissions here and it made our jobs very hard when selecting across them. I think there were over 100 proposals using projects using IPFS itself somewhere. I didn't get quite the numbers for filecoin, but a ton of amazing projects. We were just really excited to review them all. For DeFi.
01:43:34.800 - 01:44:01.160, Speaker D: Our selected winner was secured. Finance. There were a couple of different collateralized loan submissions and this one was just phenomenal. Was really impressed at the way that you guys did filecoin loans backed by Ethereum. It was really well set up and had a great demo. So thank you so much to this team. For data sets, our chosen winner was the watchdog dow.
01:44:01.160 - 01:44:59.596, Speaker D: The kind of point of this category was thinking about teams were making the mission of storing data in a decentralized, resilient way really accessible. And this team did a really great job at that, handling large data sets and really captured the spirit of this prize category. Thinking about critically vulnerable data sets and thinking about reducing friction in user experience as well. So huge thanks to that team. For DevTools, chosen winner was Cotel and did a really great job here thinking about tradeoffs of managing nodes and had a really nice Kubernetes extension which we thought was really slick and something that's going to be really useful. And for video winner was IPFS, FPS had a really amazing demo, was super fun to play and just in general pushing IPFS forward for kind of the video game category in a really slick way. So we really had a good time playing it.
01:44:59.596 - 01:46:19.568, Speaker D: I'm terrible at speedruns, I always failed, but thanks so much for giving us something that was really amazing. For Audio, this one was a really hard choice. There were a lot of really amazing submissions, but we ended up going with Cadbury because they did a really good combination of both having kind of a technical challenge and really great demo thinking a lot about the signaling server and the client side mesh that were also really amazing building blocks that other groups can build on in the future. For networking, the chosen winner was Mayel, if I'm pronouncing that correctly. This category also just had a ton of awesome submissions within it, but we think the networking between nodes and devices and thinking about distributed load and reducing points of friction was just really good and the whole idea of kind of a faucet architecture to deploy out retrieval deals was also really a really cool innovation. For mining, the chosen winner was filecoin pricing mechanism, FPM. They did a really awesome job solves a really critical problem in Filecoin and thought about the solution really well and really thoroughly.
01:46:19.568 - 01:46:59.196, Speaker D: And so we had a really great time looking and learning from looking at your submission. And finally, last but not least, the smart contract selected winner was Web. Three API chose a really important problem to solve. Looking kind of across the ecosystem and really this problem of easing the development across ecosystems just is a really big boon to everyone. And you guys did a really good job matching up your project with the ecosystem need in a way that's going to kind of fit in really nicely. So huge, huge. Thank you to all of these teams.
01:46:59.196 - 01:47:22.680, Speaker D: There were amazing, amazing things here. I imagine we're going to probably, or hopefully at some point hop back and look at what Consensus ended up giving as their prizes, but we had an amazing time judging and thank you all for the phenomenal projects. It's just been an amazing experience being part of this entire hackathon. We've learned a ton as well and it's been great building relationships with all of the amazing project teams.
01:47:23.100 - 01:47:58.884, Speaker A: Thank you so much, Molly, and as we know, Contentious is having some technical difficulties, so we'll see if they're able to come on later at the end of the group three demos. If not, we'll be announcing them and notifying the teams directly on the event Slack and over email. And also, just if you're one of these teams who won a prize from any of our sponsors, we'll be putting you in touch with them directly. And a lot of them probably already reached out to you, so just give them a couple of days and we'll make sure that everybody gets the prizes that they just received. So congratulations to everybody. So next up, we have our third group for demo. So we have three more projects to go.
01:47:58.884 - 01:48:21.150, Speaker A: Some closing remarks. So the next category, and the last category in our stack is Developer Tools. And we had an amazing set of three teams that will be kind of covering what they did to make the developments on Web Three a lot smoother and easier. So what we'll do is we'll have Web Three API, Decentralized, Docker, Hub and Pygit come on and just kind of jumping into it directly. I'll just let the Web Three API team go and share their demo.
01:48:24.900 - 01:48:51.172, Speaker B: Hello. My name is Jordan Ellis and I also worked with Roberto Henriquez Perozo, caesar Brazon and Ori Shimoni, all living in the US. And Spain and members of the Dior family. We're here today to bring you web3 API. Web Three API is a developer tool chain that brings the ease of Web Two to Web Three. It enables multiplatform and dynamic Web Three applications. Integrating Web Three into your applications today is difficult and slow.
01:48:51.172 - 01:49:23.988, Speaker B: App developers and protocol developers need to be in constant coordination to maintain compatibility and support new functionality. JavaScript Smart Contract SDKs limit depths to just the browser prebuild steps, hinder developers ability to build dynamic applications. And lastly, JavaScript limits performance and creates attack vectors. We can do better. We built a web. Three WASM runtime for universally compatible smart contract APIs. This allows protocols to implement user friendly wrappers in a language agnostic way.
01:49:23.988 - 01:49:55.816, Speaker B: These WASM modules paired with a subgraph for historical data querying combine together to create a single GraphQL schema that defines the entirety of the protocol. We call this GraphQL schema a web. Three API. Web Three APIs live on IPFS and are addressable using ENS. They can be queried from any language or platform node browser c Sharp, C C Rust, Go, Python, et cetera. DApps only need to include our lightweight client to query any Web Three API. Here we can see an overview of the architecture.
01:49:55.816 - 01:50:33.290, Speaker B: At the bottom, we have our multiplatform applications that all include their various versions of the Web Three API client. This client library enables the querying of any Web Three API given its decentralized API endpoint, also known as an IPFS hash. Once the web3 API is downloaded and all necessary. WASM modules are loaded at runtime queries can now be executed. These queries may lead to interactions with various peer to peer networks such as Ethereum, IPFS and Graph protocol. In summary, Web Three API instantly integrates into your applications, runs on all devices, and interacts with your favorite peer to peer networks. And so, let's see a demo.
01:50:33.290 - 01:50:58.092, Speaker B: So here we have an example project. We created a simple storage project, which is a lot of people's first project they jump into when they start developing on Ethereum. The first thing we'll do is we'll use the Web Three CLI to set up our test environment. This is where we have a subgraph graph node. We have IPFS and we have Ethereum running in the background. Next, what we'll do is we will deploy our contracts to the Ethereum network. This is using ethers.
01:50:58.092 - 01:51:15.492, Speaker B: JS you can use any other Web three library you like. Like Web three. JS or Biddler or Truffle. And then lastly, we'll build the web. Three API. What this is doing is it's compiling the query and mutation WASM modules. It's building out the subgraph using the Graph CLI.
01:51:15.492 - 01:51:45.490, Speaker B: And then lastly it's uploading the whole project to IPFS. And so here at the bottom we can see our handy Uris for our project. And so if we wanted to see what this project looks like, we can go ahead and paste in the IPFS hash into a browser and see the contents. This is our build folder. This is our Web Three API manifest, which describes the project as a whole. We also have our Schema, which defines our mutations and our queries. We have the mutation and query WASM modules and our subgraph as it is normally built.
01:51:45.490 - 01:52:16.820, Speaker B: And so now that we've talked about the build step, let's actually see what using this looks like. So normally you would probably be familiar with writing your tests in JavaScript or some other language. We wanted to create something a bit different and simpler, which is just a series of GraphQL queries in a JSON recipe. And so as we execute this JSON recipe, what it will do is it will go ahead and call the Git function on the smart contract, the set function. Here's our transaction receipts. We can see that the value is changing as we make new sets. And then lastly it's querying the subgraph.
01:52:16.820 - 01:52:57.092, Speaker B: And so all of this is in this little query recipe here, which links to these query documents. If we look at what these look like, this is just a simple GraphQL query. This is all that an application developer needs to understand in order to use your protocol. And then the protocol developer who's implementing these mutations would compile them to WebAssembly. This is an example in assembly script where we're interacting with the Ethereum network through the WASM runtime of Web Three API. As you just saw, through the magic of WASM and GraphQL, we're able to bring smart contracts into applications with lightning speeds. The impact this has in the Web Three space is immense.
01:52:57.092 - 01:53:40.340, Speaker B: We now have a blazing fast dev loop, multiplatform support, dynamic adapts, and secure and efficient SDKs executing inside of a WASM virtual machine. Here's where we are currently at in development. And here is what we're looking to do in the immediate future. And here's our current north star, the Web three hub. A place for developers and users alike to discover, use and fork Web Three APIs for their specific needs. Web Three Hub will allow users to visualize the GraphQL schema, query the API in its entirety, and publish user friendly dashboards at the drop of a hat. Here we see an example of a DFI protocol which has dashboards for its governance stakeholders, liquidity providers and traders.
01:53:40.340 - 01:53:56.650, Speaker B: If you'd like to join early access or become a governing stakeholder of the project, please join the mailing list at Web threeAPI dev. If you're interested in joining the development team, please contact myself or anyone else@d.org. Come help evolve Web Three with us and hopefully we can make the world a better place. Thank you.
01:53:58.300 - 01:54:10.130, Speaker A: Thank you so much, Jordan. It was a really cool demo and we have a bunch of questions. So what we'll do is we'll have viraj from Decentralized Docker represent and we'll move into the Q A after. So take it away.
01:54:11.460 - 01:54:45.604, Speaker H: I'm Viraj Anchan from Mumbai, India. And for the hackfs hackathon, I worked on decentralized Docker Hub. Using Decentralized Docker Hub, you can easily push and pull docker images from IPFS and Filecoin. It is powered by powergate. It also has support for ENS domain names. Why? Decentralized Docker Hub images can be deleted from centralized docker Hub and dependencies can break. In the past, a popular package was deleted from NPM which broke lot of dependencies.
01:54:45.604 - 01:55:34.420, Speaker H: The other thing is, I also believe that the combination of IPFS and Filecoin is very cost effective because it provides a multi tiered storage where IPFS is a hot storage layer and Filecoin is a cold storage layer. Now, how do you use decentralized docker, Hub? Using decentralized docker hub is really simple. You just need to install it. And then what you can do is once it's installed, you can push docker images to IPFS and Filecoin, and then you can pull docker images from IPFS and Filecoin. So the first step is to push the docker image to IPFS and Filecoin. For that you will use the command D docker push and the docker image name. In the next step, what you will do is you will pull the docker image which was pushed to IPFS and Filecoin.
01:55:34.420 - 01:56:07.488, Speaker H: For that you will use the command ddocer pull. And here you'll use the IPFS CID which was generated from the previous step. And also Ddocker also supports ENS domain names. So what you can do is you can link the IPFS CID to the content hash of your ENS domain name and then you can pull the docker images using the Ddocer pull followed by the ENS domain name. And finally, you will then create a container using the docker container run command. Future work. I'll work on the search feature, where you'll be able to search various docker images.
01:56:07.488 - 01:56:37.678, Speaker H: And then I'll work on one step install, so that installation is really simple. And finally, I also plan to integrate multiple decentralized naming protocols. Now the demo step. Yeah. So here you can see that the command that I'll use is d docker push Ubuntu. As you can see that the docker image was successfully added to IPFS. And this is the CID over here.
01:56:37.678 - 01:57:14.690, Speaker H: And then it was pushed to Filecoin. Now let me pull using the CID. So here I'm using the CID generated from the previous step. As you can see that the docker image Ubuntu was successfully pulled from IPFS and filecoin. Now I'll do the same using the ENS domain name. So as you can see that the ENS domain name resolved to the Ipfscid. And now it's fetching the docker image.
01:57:14.690 - 01:57:32.410, Speaker H: And you can see that the docker image Ubuntu was successfully pulled. Now at the final step, I'll create a docker container using the pulled image. As you can see that the docker container was successfully created. This concludes the demo for decentralized docker hub.
01:57:34.110 - 01:57:49.360, Speaker A: Thank you so much. This was a really cool drop in replacement for the docker hub registry. So next up, we have our last demo for today, and that is Peter, who will be presenting pygate. So I'll let Peter show us our final demo.
01:57:57.390 - 01:58:06.118, Speaker C: This is pygate, a Python interface and tooling for the filecoin network. I am Peter Van Garden. A digital archivist from Vancouver, Canada.
01:58:06.214 - 01:58:17.360, Speaker A: My teammates, we're seeing the other desktop, so if you could just go back to the PowerPoint workspace, we'll be all set. There we go.
01:58:25.900 - 01:58:55.588, Speaker C: Sorry about that. So I'm peter vanguard and digital archivist from vancouver, canada. And my teammates are based in London, Berlin and Abuja, Nigeria. pygate is built using Powergate gRPC and the Python Flask web framework for the hack effects hackathon. The pygate project team has two goals. The first goal is to bring Python into the Filecoin community. This is a February 2020 stack overflow survey of over 65,000 developers, and Python is overwhelmingly in focus.
01:58:55.588 - 01:59:47.312, Speaker C: Given these vast possibilities, our team reasoned that there would be an acute need for tooling. We identified Textile's Powergate as a front running developer tool for application access to the filecoin network. We were encouraged by its use of a gRPC interface, which meant we could use existing protobuff libraries to create a Python port. pygate now exposes Filecoin via Powergate to the enormous and influential Python developer community. Machine learning, data science, web applications, digital preservation systems, and many other innovative tools rely on the flexibility and consistency of Python to help solve problems for people around the world. Until now, the tooling for File code and powergate and the major paradigm shift in online content management that they introduce had only consisted of Go and JavaScript libraries. Our second goal is to build tools on which Pythonistas can build applications and experiences.
01:59:47.312 - 02:00:30.652, Speaker C: pygate provides these developers a set of tools to build their next project, solving big problems on top of the Filecoin ecosystem. In order to achieve these goals, we created three products. The first is the pygate gRPC interface. A python library for powergate. The second is the pygate Web app, a Flask reference client for powergate and filecoin. And third is the pygate API, also a Flask based tool that provides an asynchronous Http and WebSocket API for web application clients to manage their long running network tasks and other complex filecoin interactions. Building on the gRPC definitions provided by the textile team, the client library allows for drop in support from Filecoin to any Python software.
02:00:30.652 - 02:01:11.560, Speaker C: We're happy to be able to provide this to the community. It has roughly 90% feature parity with the Powergate interface. It's actively powering the reference pygate clients. It has developer quick starts, and the best part, it's available on Pip right now. The pygate gRPC package makes the endpoints of the Powergate API to the Filecoin network available as Python methods. We've included a number of example scripts as Quick starts for developers. Here you can see that we now get all the power of the Powergate in a Python script with a simple import statement.
02:01:11.560 - 02:01:52.720, Speaker C: Powergate uses the concept of a Filecoin file system, or FFS, to broker client interactions. In this example script, we created FFS and use it to push a file to Filecoin and then retrieve it back again. So I had my terminal running in the other screen. I was using two monitors. I'm trying to show you guys my terminal right now, and it's completely disappeared. Okay, well, here we go. Here's something.
02:01:52.720 - 02:03:13.994, Speaker C: So here's that FFS script running in my terminal now as a CLI job. So that's all pure Python code now running, interacting with the Powergate interface. So the Pygopc package is also being used in the pygate web app to demonstrate basic Powergate functionality in a Python Flask application. After Django, Flask is the most popular web application framework for Python developers. It provides the most simple structure from which to present the skeleton framework that other Python developers can use to kickstart their own filecon applications. Users can upload single files, batches of files, or package a group of files in a tar package to upload as a single tar file. These files are all being pushed to the Filecoin network.
02:03:13.994 - 02:04:42.206, Speaker C: Using the Powergate API by pygate, users can browse and search. I was expecting a bigger screen search on files already uploaded to Filecoin. Via the pygate interface, users can create new FFS through the reference client. They can edit the configuration for those edit configurations for existing FFS and push those changes to the files already on the Filecoin network that are using those configuration settings. Thereby changing their deals. Users can check wallet balances, a new one's created for every FFS, and the pygate reference client maintains logs of all the transactions and any error codes that have happened while using the reference client. We know that pygate will open filecoin to the influential and ambitious Python community, and we are very proud to make this contribution.
02:04:42.318 - 02:04:43.220, Speaker B: Thank you.
02:04:44.070 - 02:04:56.120, Speaker A: Thank you so much, Peter. So what we'll do is we'll move on to our Q A for all the DevTools groups. I'll have just all three teams turn on their cameras, and we'll let our guests ask any questions.
02:04:58.250 - 02:05:21.200, Speaker E: Hey, everyone. Also, sorry for the background noise. They had to move outside due to the fire alarm. It's a weird day for fire alarms, but I wanted to say excellent work for all these projects. This is so incredible. I reviewed many of these projects, too, when we were doing our judging, and I thought they were all extremely exciting and will contribute a lot of value to the ecosystem. And I specifically had a question for the Web Three API team.
02:05:21.200 - 02:06:21.150, Speaker E: First of all, just wanted to say props. Also, I think pygate team did this as well. Just the combination of several different products to make sure around this one problem area, to make sure that developers sort of have all of their whatever they'd want to do with this sort of tooling to make sure to support all of those user needs. So that's really awesome. For the Web Three API team, I noticed that you mentioned you're interested in onboarding more protocols, and I was curious, what is kind of the plan for having more protocols onboarded? Is that something that you'd want, like protocol developers or teams within the ecosystem to PR these sorts of interfaces to Web Three API yourself, or is there some other plan for that? And also just thinking about the complexity and how heavy this client is to run for projects as well, how to manage that as this kind of grows and many more protocols are added.
02:06:21.310 - 02:07:26.840, Speaker B: Yeah, thank you for those questions. So, first off, the onboarding of protocols, the nice part is that we can do this pretty permissionlessly because everything's open source in the Web Three ecosystem, so we don't have to kind of try to sell this to people. We can basically say, okay, these are the most impactful protocols on chain today, picking the ethereum network. First, let's go ahead and let's implement a web3 API for them and then talk to the developers on that team and show them what the benefits of this are and see if they want to take ownership of yeah, it'll very much be kind of a bootstrapping period where we'll be eating our own dog food by implementing existing protocols that are much needed in all of software. And then secondly, you brought up a really great point about the bloat of the client. So how we're planning on fixing that is to be able to try and implement as much as possible in WASM so that that way we can host these packages remotely and then the client can be as thin as possible and then just download what it needs. And then for the things that we can't try and really harden a simple standard that everyone can use.
02:07:26.840 - 02:07:51.230, Speaker B: But the big thing to note there is that this does require us re implementing, let's say, like Ethers JS or IPFS JS in WASM. So that's a large feat. And so a shorter term solution is to just do modules that you can include with your client. So, yeah, need a client with IPFS and Ethereum. I just include those packages similar to how you would add ons to your webpack.
02:07:53.090 - 02:07:56.414, Speaker E: Awesome. Thank you. Sounds like a really clever way to address it.
02:07:56.532 - 02:07:57.780, Speaker B: Sweet. Thank you.
02:08:06.720 - 02:08:26.096, Speaker D: I had a really awesome time watching all of these demos, especially the Distributed Docker Hub. Was really cool to see kind of how you guys took all of the things that, again, we had this focus on IPFS for package management, and you guys have all just totally leapfrogged all of the things we were working on.
02:08:26.118 - 02:08:27.328, Speaker B: And thinking on last year, which is.
02:08:27.334 - 02:09:14.540, Speaker D: Just amazing to see that some of the underlying problems have gotten fixed here and you guys have really been able to push it to the next level. Especially this isn't so much a question, but using ENS for decentralized naming is like a really smart innovation and something that we were definitely struggling with the idea of. Well, in a decentralized network. How you manage naming? Independent? Naming of various repositories to make sure that you could truly have a decentralized repository system was one of the challenges that we were facing when thinking about trying to go fully decentral about package manager repositories. And you guys did a really great job at that. Curious if you have other kind of next steps that you would want to augment distributed Docker Hub with along those lines.
02:09:14.700 - 02:10:03.020, Speaker H: So the next step, what I want to do is I want to make the installation steps more simple so that any developer can install and they can use it in production. So basically I work with a lot of containers at scale, right? So basically the way I envision is it should be really simple like a one step install that will bring a lot of developers to this. Then I also want to integrate other naming protocols as well because that will encourage more people to use this. And the other step is also discovery the search features. So I'm also thinking of utilizing say, Ethereum and the various side chains for the discovery part. And the other thing what I've realized is if you build simple things, but if they are very powerful things and if it solves a huge problem, right, and a lot of developers would come and they would use this at scale. So at huge scale.
02:10:03.020 - 02:10:12.100, Speaker H: This could solve a lot of problems at scale, say, where you deploy thousands of containers. So there you will see the power of IPFS and filecoin at scale.
02:10:15.320 - 02:10:25.530, Speaker A: My favorite part of that demo was that I just realized that he owns Docker Eat. So that should be a fun, but that's great.
02:10:26.060 - 02:10:58.564, Speaker B: One quick rec for decentralized docker hub. A lot of container images have a lot of duplicate data or very similar. So it's a big tar file full of a bunch of files that are kind of the same. You can import the data smartly by creating kind of some IPLD data structures for the docker images themselves. And you can deduplicate tons of the data. So you could actually bring my guess is you could bring down the storage of docker hub by an order of magnitude or so, and that would be huge storage and balance. So recommend you check that out.
02:10:58.682 - 02:11:04.070, Speaker H: So I'll consider that as a next step improvement deduplication of the data.
02:11:04.840 - 02:11:28.910, Speaker B: Yeah. And then I would ask the question that I asked to the other folks. What was the area, what was the thing of your project that you're most excited about? Or what was your favorite part of working on this? Either a specific part of the design or of a specific challenge that you solved or something like that. Just tell us a bit about what got you really fired up. Everyone.
02:11:32.240 - 02:12:03.032, Speaker H: Whenever I work on any project right. The core part that I like is ideation why I'm connected to that problem. And if I feel deeply connected to that problem, then I'm motivated more to solve that problem and understanding the various pain points. So once you do that thing, then you'll identify the technologies that you will use and what state those technologies are to solve your problem. And then you utilize those technologies and you experiment with them. And whenever you face any roadblock, then you experiment more and then you work towards it. And then finally you have a solution ready.
02:12:03.032 - 02:12:34.690, Speaker H: And that is a eureka moment when everything works as when you thought the first time during the phase. And feedback plays a key role. You share the video demo with various people and you get the feedback. For my case, I got feedback from Karthik, I got feedback from Andrew, I got feedback from you and multiple others on Slack like Jacob also, that really helped me various small improvements from building the project to the presentation as well.
02:12:35.700 - 02:13:04.348, Speaker B: Yeah. I'd like to echo what Viraj had just said about being deeply connected to the problem, because for us, this has been something that we've been banging our heads against for a long time. The problem of bridging the gap between these web3 protocols and the applications. And so trying to over the past year and a half, trying to figure out what that best solution looks like. And so, yeah, being deeply connected to it and then. Seeing it actually come to fruition is.
02:13:04.434 - 02:13:45.604, Speaker C: The best feeling for me. I've been working as an analyst in It for a number of years, and I'm more of a hobbyist coder. And I've been following IPA Fest for a long time since its early days and was very excited about see Falcom coming to fruition now. And then a few months ago learned about powergate and really wanted to get my hands on these tools. But I really feel comfortable as a Python developer, as a novice developer. And I was fortunate to get two very skilled Python developers on board on my team, and they did the heavy lifting of the protobuff work. And my favorite moment was the first Hello World when I was able to just import Powergate and do create FFS and push and Whammo.
02:13:45.604 - 02:13:55.630, Speaker C: I was interacting with Filecoin, right? And I felt like I just was given the keys to a starship. It was a very empowering and beautiful moment for me.
02:13:57.280 - 02:14:31.530, Speaker B: Now is, like, the perfect time to start Shilling Grants programs. Protocol Apps has an amazing grants program here, and I work on the Ecosystem Support Program. This is what I love about Youth Global so much, is that you come to this and you really start to dive head first into the Rab role, and it's like a bottomless pit. Right? And then the next step is, what do I do now? Yeah, let's start applying for grants and start having this conversation of figuring out what's next. Let's identify and of how to take this to the next level. Let's get connected. Yeah.
02:14:33.420 - 02:14:45.564, Speaker A: And a special shout out to Peter for taking on an actual Klein library for a four week event and being okay with maintaining it from here on. So we hope that this becomes a new standard.
02:14:45.682 - 02:14:51.260, Speaker C: Big props to my teammates, and we hope to work closely with Textile and hopefully adding it formally into their suite.
02:14:51.920 - 02:15:33.790, Speaker A: Amazing. So with that, we'll end our block three Q and A. I want to give a special shout out to all ten projects that just demoed today, and we're super excited that you got to share everything with everybody else here and got the feedback. And of course, even better to hear that you're going to continue working on these projects and make them go mainstream and have them be used by developers in your audience. So I have a few closing thoughts that I want to just share with everybody before we wrap this event up. But before that, we were able to get in touch with Consensus, and I'll have Gabriel come on and tell us who won the Consensus prize. So if he's here, please feel free to unmute yourself and let us know.
02:15:35.040 - 02:16:01.088, Speaker B: Yes, I am here. There we go. Great. Yes. First of all, amazing work from everybody. Appreciate the patience as I'm working through technical difficulties, I guess between Fires and desktops dropping off and all kinds of fun stuff just the kind of day we're having. Wouldn't be a fun hackathon without the fun stuff, right? Our team had just so much fun going through these projects.
02:16:01.088 - 02:16:54.756, Speaker B: I have to say, this is probably I'm extremely impressed with the final set that demoed and the projects that we saw come out of this. I think everybody did just tremendous, tremendous work. I mean, we were just shocked to see companies already starting to think about their business model and pricing and accepting money. So really hats off to everybody within the hackathon. I think we were just really blown away and really excited about this ecosystem. So as a part of the prize pool, Tachyon specifically, we have partnered with Protocol Labs as a part of our next program, the File Coin Launch Pad Accelerator. And so we're excited to extend an invitation to the ten finalists to do an interview with the selection committee with a full application.
02:16:54.756 - 02:17:21.740, Speaker B: Just as a reminder, I know some of you attended our workshop. Applications are open until August 21. This accelerator is going to run from mid September through the end of December. Teams will receive ADK in funding in addition to mentorship programming and just a global network of you can visit our website, labs. Consensus. Net tachyon to see the list of mentors. We're really excited.
02:17:21.740 - 02:18:10.140, Speaker B: And all teams who get accepted into Tachyon will also have preferential pricing across our entire consensus's, entire Web Three stack. That includes infuria special developer access via Slack channels To, MetaMask. And so, yeah, we're really excited about our involvement here with this hackathon, excited about our partnership with Protocol Labs, and especially another huge shout out to all the teams that participated in this hackathon and the ten finalists. We're really excited for those of you who want to continue building and seeing your project scale up. We are really excited about seeing you guys apply to the Filecoin Launchpad Accelerator.
02:18:11.680 - 02:18:57.788, Speaker A: Amazing. Thank you so much. So we're at the last kind of few minutes of this, and then I want to just make sure that we do a really nice wrap up of everything that's happened over the past six weeks. We had all of July to work on our hacks, and we have last week dedicated to judging. And today was the finale where we got to see a lot of our favorite projects. And as we kind of just saw, we saw the full stack from developer tools that made it possible to have robust infrastructure, and that robust infrastructure made it possible to get applications at the end that were very seamless and ready to be used by anybody who may or may not even understand the nuances of Web Three. So all of that said, I want to just take a few minutes here to thank everybody here that made all of this possible.
02:18:57.788 - 02:19:54.988, Speaker A: And again, it's not just the ETH Global team. It takes a massive amount of people to make all these events successful. I want to especially thank all of our judges who spent all of last week, including weekends, talking to all of our teams and over 130 projects, giving their feedback, looking at their demos, and really doing the kind of the best and the hard work that we like to call in making sure that everybody is in a place where they can be successful, especially should they choose to learn more and then continue working on these projects. I also want to thank all of our sponsors and mentors. They were there, not only just helping out with workshops and talks and AMAs, but every week when we asked our attendees to check in with us and let us know where they're stuck or where they need help, we were able to connect them with all these companies and mentors who were there to just unblock them with any technical difficulties and just kind of really having all of you there available. Constantly replying to things from 09:00 A.m to 04:00 A.m
02:19:54.988 - 02:21:02.020, Speaker A: made all of this possible because we saw the amazing results all of last week and also today. And of course, I want to give a very special shout out to the Protocol Labs team. This has been a pleasure to work with them over the past six weeks. And this is everybody we interacted with over the Protocol Lab side. And I want to make sure that everybody's recognized for all the hard work they put in in making this successful. For not just all of you, but everybody here to ensure that they have the best experience, from being ready for documentation, to being available for judging, to being available to run workshops and sessions and asking and answering questions, and just really opening up their entire team to make this event successful for nearly 500 of you. And of course, this would definitely not be possible without all 470 hackers who kind of gave us the last month of their time and stuck with us and shared us their feedback and kind of learned with all of us as we figured out how we can make this thing better for not just the File Coin Ethereum Ecosystem, but also ETH Global and this developer community in general.
02:21:02.020 - 02:21:50.164, Speaker A: These events are very much catered to audiences that are trying to learn what's possible in this space, and Hack FS is an exemplary example of how we were able to accomplish that with your participation and for all the time and love you've given us. And of course, I want to just give a special shout out to the Youth Global team, especially Trent, Emily, Andrew and Jacob. There's eight of us on this side. And the hard work that everybody's put into making sure that everybody is accounted for, everybody's not blocked on anything else. We get all of your questions and emails answered to, anything we can do to make sure each and every one of you, whether it's sponsors or hackers or our partners, are happy. This would not be possible without the hard work that ETH Global team has done. So the final list.
02:21:50.164 - 02:22:23.688, Speaker A: So we saw ten teams present today and they came in and showed their demos. We grouped them by different categories. But if you've been to any other ETH Global hackathon in the past, you'll realize that the reason we call them finalists is because these events are designed to be opportunities for everybody to learn. These are not set up to be competitions. We have no notion of first, 2nd, third. And when we call somebody a finalist, we're calling each of them first in the same place by our definitions. And as a result, the top ten teams or the ten teams I presented today are all of our winners.
02:22:23.688 - 02:23:19.468, Speaker A: And to kind of give them a congratulations, we're going to be giving 1000 USD to every member on each of these teams as part of being a finalist. And also each member will get 250 filecoin tokens after the network launches and just kind of make it even more possible for all these teams to continue building these projects. We also have a $30,000 USD pool set up for them to tap into if they wish to continue or if they are going to continue. We'll be able to grant some of that capital to ensuring that these projects sort of continue being worked on. So I want to congratulate everybody here who presented as the ten teams and that's not it. Again, the goal for these events is to keep learning and keep building. So anybody who submitted a hack, if you deploy to filecoin, main, net or testnet, we'll be giving 100 filecoin tokens to each of these teams and we'll be sending a lot more information on that over email to all the teams.
02:23:19.468 - 02:24:09.932, Speaker A: So keep an eye out for how to actually claim your reward after. And lastly, this would not be an evaluable event if we don't tell you what's next. So I am super excited to announce that we have just launched our next hackathon ETH online and we'll be doing this hackathon and a mix of Summits over the course of October. And if you're interested in signing up and participating again or just even looking at attending the Summit and learning about the best of research and applications in this field, please check out Ethonline.org and we'll be seeing all of you in two months again. So with that, I want to thank everybody for making this possible. I hope you have a great rest of the week and thank you so much for giving us the past six weeks and showing us all the love for being part of hackfs.
02:24:09.932 - 02:24:11.650, Speaker A: I hope you have a great day.
02:24:15.220 - 02:24:20.450, Speaker B: Thank you so much. Thank you so much to all the hackers and to the Global team. Kardik. Thank you so much.
02:24:21.700 - 02:24:42.490, Speaker D: Thank you guys for organizing this. This has been so much fun and so amazing to see everything that everyone has built. It's been phenomenal. So congratulations to everyone. Congrats to all the winners and the finalists. And huge thank you to everyone who was involved in making this successful. All the questions answered by everyone participating and all of the mentors is huge.
02:24:42.490 - 02:24:43.110, Speaker D: Thank.
