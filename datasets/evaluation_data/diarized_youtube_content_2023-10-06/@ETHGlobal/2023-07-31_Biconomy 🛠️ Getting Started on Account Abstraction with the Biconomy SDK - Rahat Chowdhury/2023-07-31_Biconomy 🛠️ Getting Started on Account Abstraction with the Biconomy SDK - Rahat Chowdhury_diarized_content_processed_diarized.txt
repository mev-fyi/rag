00:00:07.210 - 00:00:33.606, Speaker A: Thank you, everyone, for coming to my talk. So we're going to be talking today about count abstraction and how you can get started using count abstraction in your devs today with the Biconomy SDK. So a little bit about me. My name is Arat, head of Developer Relations at Biconomy. I'll be here throughout the week to help you out as you're hacking through this. Answer any questions that you might have. Formerly been a front end engineer, did some solidity, former founder, didn't really work out.
00:00:33.606 - 00:01:13.150, Speaker A: But yeah, also a former hip hop artist. I am retired. I do not do freestyles anymore because I'm not good at them anymore. But yeah, so I usually look like one of these two things, usually the first one. So wanted to kind of talk a little bit about the current UX of Web Three. If I were to try to bring my mom into using a D Five protocol, she would have no idea what to do. She would have no idea how to onboard herself onto a wallet, go to an exchange, get some funds, transfer them over to the EOA, and then go and finally, at that point, start to interact with a DAP.
00:01:13.150 - 00:02:17.190, Speaker A: Right? And this is the exact set of steps that every single person who is not native to Web Three needs to go through before they actually even use your DAP. If you're trying to actually get users for your DAP, which is probably something you should do if you're building something, get users, make it as easy as possible for them to do so. So there's a lot of things wrong with that general kind of feeling. The first part is like that onboarding onto a wallet, right? There's this fear of losing private keys. A couple of weeks ago, I unfortunately got my own account hacked and got drained of a significant amount of funds. But this whole private key situation, this whole saving a bunch of words of nonsense that need to be written down somewhere, it's not a great, UX, complicated Web Three UX, I just explained having to go through so many different significant hoops in order just to get started doing your very first transaction on any DAP. And then there's the whole thing about paying too much gas fees.
00:02:17.190 - 00:02:55.086, Speaker A: So how can we actually improve the Web Three user experience, incomes, account abstraction, EIT four three seven, which you'll see on my shirt. We have some more of those downstairs. If you're hacking out by economy, definitely pick up a shirt. But what exactly is account abstraction? You can define it as the ability to add arbitrary logic to the process of validating a transaction. So any transaction adds some additional information to it. That information helps you do whatever other type of logic you want to do when you add this information to it. This new data object is called a user operation.
00:02:55.086 - 00:03:34.334, Speaker A: So this is like a new way of looking at transactions through the scope of account extraction specifically through four, three, seven. So user operations live in what's called an alternative mempool. And you have service called a bundler, which will take a look at this alternative mempool. Take these user operations, send them to what's called an entry point contract that lives on each chain and handle actually executing them into regular transactions. So all of this stuff is achieved with using smart accounts or smart contract wallets. Normally wallets are secured by code. Well, not normally.
00:03:34.334 - 00:04:28.770, Speaker A: These wallets are secured by code instead of the ECDSA. So this allows for you to actually execute that additional logic on top of your transactions. So the main thing you want to ask yourself is, how do I want to authenticate a transaction? What additional logic do I want to add? On top of it, that's kind of like the most basic way of thinking about account abstraction, just taking a transaction and figuring out what else you can add before you validate or let it actually go through. Quick diagram, just to show kind of like the lifecycle of how this works. In the green box kind of represents a smart contract wallet secured by code. It can be owned by EOA externally owned account, which is like your regular wallet account that you might be used to. It can be secured by hardware, devices, paskeys, which is going to be coming soon to our SDK, currently in audit.
00:04:28.770 - 00:05:04.138, Speaker A: But these are what actually executes those user ops that live in this mempool. And a bundler is simply a service. It can be written in TypeScript, rust, whatever, is going to be looking at that mempool and sending it to that entry point contract. Now, I mentioned the user op mempool can have additional information in it. One bit of information that it might have is data regarding a paymaster contract. A paymaster is simply going to allow you to do a couple of different things. A, it can let you sponsor transactions on behalf of the user, so from the user perspective, they don't have to pay any gas.
00:05:04.138 - 00:05:55.040, Speaker A: You can also decide to let the user pay in, ERC, 20 tokens. So it depends on what kind of user journey you want to build out for folks. And eventually the entry point contract is going to handle the execution phase of the transaction. So all of this is basically governed through this entry point contract that lives on each chain. The infinitism team deployed the entry point contract a few months ago on the Ethereum mainnet. There are entry point contracts across polygon and optimism, et cetera, several other chains as well. If you ever want to just get another quick breakdown of account abstraction, I've done a few Twitter threads that have like a little whiteboarding session going through them.
00:05:55.040 - 00:06:28.226, Speaker A: Definitely take a look at that without any code, just kind of like goes through explains some of the principles. These also exist in blog form on our blogs. So if you go to Biconomy IO, head over to the blog. You can read the blog format of this as well. So I explained a whole bunch of stuff to you. But to actually leverage count abstraction, you probably don't want to code out all those contracts yourself, build out all those services yourselves. So we give you a solution in the form of the Biconomy SDK.
00:06:28.226 - 00:07:10.374, Speaker A: So, the Biconomy SDK comes in mix and matchable packages. So these are the three main packages that are going to help you actually building out your projects as you're building this weekend. First is our accounts package, which is going to help you deploy your smart accounts. It's also going to help you creating user operations. We have a bundler service in the background, so you can use the bundler package to interact with that same for our Paymaster. So, like I said, Paymaster can sponsor gas's transactions or allow users to pay gas with ERC 20 tokens. The bundler is again what's going to look at the user ops that are created from the accounts package and send them to the entry point contract that exists on the chain that you wish to interact on.
00:07:10.374 - 00:07:44.062, Speaker A: The cool thing with the Paymaster and bundler, you don't have to actually use our services to use the SDK. If you want to plug and play different services, as long as they are four D seven compliant, you just need a URL of a Paymaster of a bundler and you can plug and play it into our SDK. So it's completely mixed and matchable with other services. I said that I guess too soon. That was my slide explaining that. But let's dive into a demo and some code. So on the screen here, you'll see this is actually a live website.
00:07:44.062 - 00:08:31.934, Speaker A: You can go to it now aaswap Versaille app, but it is a miniature version of Uniswap. This app is using the Uniswap V three router under the hood and is also using the Biconomy SDK in order to add a couple of functions to it. So I'm going to connect to web3 and I'm going to pretend I'm actually just a user who has never onboarded onto a wallet before. So since I don't have a MetaMask, I don't have any wallet, I'm going to use Google to log in and I'm going to sign in using my email. And once I've done that in the background, this is using Web three auth under the hood to create an EOA for you. And that EOA is actually going to be an owner of a smart account that is deployed by the SDK. So this address here is actually the address of the smart account.
00:08:31.934 - 00:09:10.810, Speaker A: I have some funds on it from before. So you'll notice I have some wrapped ether link USCC and I have Nomadic, even though this wallet is deployed on the Polygon Mumbai network. So just a thing to keep in mind if I wanted to onboard quickly if I had no funds whatsoever. I can hit buy crypto, I can use bank account, credit card, anything. I want to add funds directly to my wallet. I already have some, so we'll just not enter my card details there. So I have some USDC here, so maybe I want to swap some USDC for some wrapped ether.
00:09:10.810 - 00:09:38.120, Speaker A: I'm going to hit the swap button and in the background so there's nothing I have to sign. There's no metamass pop up that you have to go in, approve transactions, things happening for you in the background, everything is being signed for you. What's happening in the background is there's two transactions actually running at the same time. There is the approval and the swap. Okay, I forgot to actually click on the link. Let me see. I hope I console logged it.
00:09:38.120 - 00:10:12.604, Speaker A: Okay, I have a transaction response. Okay, but this is on polygon scan. This is a main net transaction. Let's just do the transaction again. This time I'll remember to click it. So basically in the background it is approving and swapping one USDC all at the same time. So that's two transactions being batched into one.
00:10:12.604 - 00:10:45.696, Speaker A: So as a brand new user to web3, I don't have to worry about approving x amount of tokens to be swapped. It's just done it for me and it's only being done for the exact amount that I need to swap. And you'll see here, this is a transaction happening right now on mainnet, on polygon, mainnet refresh. Okay, cool. So you'll see here, it was completely successful. I swapped one USD coin for the equivalent of wrapped ether. I had no matic in my account, so that was completely gasless.
00:10:45.696 - 00:11:31.120, Speaker A: If I wanted to, I could switch this so that I paid for the swap using my USDC as well. So that's another option that I could have enabled for my users. So again, it's up to you. Which side of the UX do you want to work with? You might come to the conclusion that it'll cost too much to sponsor all your users gas. So maybe the USDC payment is something you would prefer. Or maybe if you're using something like polygon where the transactions are low enough, where it's totally fine, you can just completely sponsor it yourself. So how does some of this stuff work in the discord group? You'll see a bunch of links to our documentation, several blog posts, several example and quick starter tutorials.
00:11:31.120 - 00:11:59.216, Speaker A: So if you want to see how it works in react, how it works in next JS vite, how it works with node. I'm going to go over the node JS scripts right now, just because it's a little bit quicker to go through that in a workshop setting. But initializing it is really just copy pasting a bunch of boilerplate code. You initialize our bundler. Like I said, you can use any bundler that you like. I'm just using our bundler here. Just pass the URL of the bundler that you're attached to.
00:11:59.216 - 00:12:34.980, Speaker A: Same thing for the Biconomy paymaster. I'm attaching our Paymaster to this. These can be found on the Biconomy dashboard. So that's dashboard byconomy IO, that's where you would go to get your API keys, authorize your smart contracts and everything there. And then the last part is just creating this Biconomy smart account configuration. So you're just going to be passing the signer, which is your wallet, your EOA, because you're able to pass just any signer object. You don't actually have to use our social login.
00:12:34.980 - 00:13:00.032, Speaker A: You can use any social login that provides you an Ether JS object. So you can use magic. You can use Web Three author, which is what we use under the hood. Anything that you like that you're used to, it is compatible with RSCK as long as you have that Ethersjs transaction object. So here just a quick thing. I'm initializing the Biconomy account. I created the account and I'm just logging out the owner.
00:13:00.032 - 00:13:39.090, Speaker A: So the owner is the EOA that is used to actually put this to actually, sorry, the notification messed me up. That is actually used to create this smart account. So right now, all of our smart accounts have to have an owner. We are in audit to have future versions where you can have an ownerless smart account. So definitely keep an eye out for that. But for now, you do have to have it owned by some external EOA. In the case of Web Three Auth, they do create an EOA for you in the background that owns everything.
00:13:39.090 - 00:14:09.304, Speaker A: So let's just take a look at Minting, an NFT, pretty basic kind of thing. Example. So I have this interface of a safe mint function. I have the NFT address here. One of the main things I need to do really is just basically get information about this specific function that I want to execute. And there's a couple of ways to do that. So this is one of the ways the Docs has different examples how you would do this on front end.
00:14:09.304 - 00:14:56.104, Speaker A: It'll be slightly different, but you're just going to get some information about the actual function that you want to execute, pass it, any parameters that it needs. Once you have that info, you're going to start building out the actual user operation. But the only part of the user operation you need to build out is this two and this data field. The two is just going to have the address that you're interacting with and the data is just going to have this information here about the transaction that needs to be executed. So we have this build user op function attached to our smart account, which is just going to take an array of these constructed transactions. So you can put one transaction in here, you can put several transactions in here. If you put one transaction, it will just execute that one.
00:14:56.104 - 00:15:23.856, Speaker A: If you put several transactions in this array, it will bundle those together into a single transaction. So that's how I did that, approve and swap on the uniswap demo. These are just some typings. And then the other main thing to see here is this paymaster and Data is going to take that user op. It's going to take data that you can build out using RSCK. And there is a mode. There we go.
00:15:23.856 - 00:15:58.776, Speaker A: So there's a mode here for how you want to sponsor. If you want to sponsor completely gasless you just use a sponsor tag if you want to sponsor with the ERC 20 tokens, meaning let the user Pay. In ERC 20 tokens you simply switch this flag. It's just a flag that you switch. Nothing too difficult there. And the last part, this is specific to ERC 20 sponsorship, is just getting fee quotes. So what are the quotes for the different types of swaps that they can do? Currently we support a few different stable coins.
00:15:58.776 - 00:16:28.762, Speaker A: You can get a full list of that on our docs to see which coins that we support. I usually just use USDC for demos, just the easiest one. So let's go ahead and execute this. Take a look at that. So yarn dev. I'm just going to log out the owner the address. This code is also available on the links that are shared in Discord.
00:16:28.762 - 00:17:07.718, Speaker A: You'll see that a user op hash is printed on the screen as well. Let me actually bigger. Cool. So this is not on main net, this is on Polygon Mumbai, I think from the chains that are sponsoring this time. We support Polygon as well as linear. So those are two different chains that you can launch on. And you'll see here that there were two NFTs Minted all in one transaction.
00:17:07.718 - 00:17:57.070, Speaker A: I passed that transaction twice in the array and let's just confirm that. So that is token 149 and 150. We're going to grab the address from here. Let's head to openc and verify that that was done. And we have 149, 150 here. Cool. So all of this code you can definitely take a look at on our docs as well as the notion pages that we've provided in Discord that show you some examples of how you can go through and build a lot of these things out.
00:17:57.070 - 00:19:01.774, Speaker A: We have tutorials and starter kits that show you how to actually use other sponsors technology along with our tech, as well as just like different variations of how you would do this in NextJS, how you would do this in React or using Vite. So whatever flavor of front end you kind of like to use, we have a couple of different tutorials for doing that as well. So definitely explore that. There is one other, I guess, our larger prize that we have. So if we take a look at the prizes, you'll see that there are two $2,500 prizes for the best use of session keys that are built on top of our smart accounts, we have a tutorial that will go through how to build your own session key module on top of our smart account as well. So definitely take a look at that if you're interested in building with session keys for anything else. We do have three $1,000 prizes for best consumer use cases in Web Three, as well as a $2,000 pool prize.
00:19:01.774 - 00:19:30.362, Speaker A: To be eligible for the pool prize, you just have to successfully execute a single user operation. So as long as you do that, you are eligible to be part of the pool prize. If you need any dev support, myself and Yash will be here in person. He's the guy right now at the booth. And we have another person Vansika on Discord who you can tag and ask for questions as well. If you need to refine your pitch or your idea. We have Tommy and Ahmed who are both around.
00:19:30.362 - 00:20:20.432, Speaker A: Ahmed is our Is, you know, part of our content team and is amazing at weaving stories together. So if you need help on your ideas or refining your pitch, definitely these guys are cool people to go to. And yeah, if you're excited to build, definitely let us know. Add byconomy on Twitter or Ad or Hotcoats on Twitter. And thank you. If there's any questions, happy to answer those. Do you have mobile SDKs coming? So you can use RSDK with react native with some configuration, but right now it's just mainly a JavaScript SDK.
00:20:20.432 - 00:20:57.372, Speaker A: But we do hope to have more support for other mobile. The SDK has upgraded to version two from version one. So what's the main difference between version one and version two? So version two is more modular. So one of the things I was kind of talking about is how you can use, mix and match different packages with other services. So we opened it up so that you can use any bundler, any paymaster service. We do, of course, offer the full suite. You can definitely just use ours if you want to, but if you have any specific use cases that you want to use, like other services with, that's what it opens up with.
00:20:57.372 - 00:21:05.170, Speaker A: We also made it a lot easier to execute user operations than our previous version, so a lot of improvements on the developer experience made this out.
