00:00:07.290 - 00:00:59.706, Speaker A: All right. Hi everyone. I'm Jason and this is Sarvesh from airstack. Today we're going to show you how to build applications using airstack, how to use the APIs high level. First of all, airstack is a single API that enables you to query and combine data across chain cross project in a single query in response. We have APIs today that blockchains ethereum, polygon, every transaction since the Genesis block and new transactions within a few seconds as are finalized as well as very strong in areas such as identity, so ENS, Farcaster, Lens, Poops NFTs Socials. And so a lot of projects are using airstack for identity resolvers, for creating recommendation engines, for doing all sorts of new types of data ware experiences.
00:00:59.706 - 00:01:40.650, Speaker A: Sarvesh is going to show you exactly how to use airstack and what the APIs are involved. I'm going to show you first the cheat codes really quick and then Sarvish will go into actually the details. But if you go to app airstack XYZ you'll see a marketplace first of queries that other people have run and have shared with the community. So after you run a query, if you want you can share it. So here are popular queries such as recent transfers of Dai token, metallic's, balance of Apecoin, a bulky and s query that Sarvesh actually ran. And the cheat codes I'll show you is sarbash is going to show you how to write queries in scratch. The cheat codes is using our AI generator to write the query for you.
00:01:40.650 - 00:02:17.000, Speaker A: I actually recommend trying it to start because it's a great way to very quickly learn the APIs. If you look out of the left hand side, these are all the APIs that airstack offers. And I can write a query that cross chain, cross DAP and the AI will write the query for me. So I could say show me all holders of orange dow and we have a chooser. You can select it from about 10,000 different tokens poops NFT projects. Orange dow is on polygon and I can say and their web3 socials and ENS. And the airstack AI will generate this query for you.
00:02:17.000 - 00:02:44.366, Speaker A: And so here you can see it's putting in get token balances of this contract address. It's looking on polygon, it's getting the first ten. You can increase the number of responses. And for each person it's getting the token balance that they have, the owners, their domains, primary domains and their socials. So here for instance, we can see that orange dow, this token holder, his lens name is Byron Sue Lens. You can see his ENS names and.
00:02:44.388 - 00:02:45.342, Speaker B: You can see this for the next.
00:02:45.396 - 00:03:11.150, Speaker A: Person, next person, next person. So it's a great way to learn how to use the APIs. I'll do one other just to show you is you can also do this like in all sorts of directions. So I can say for Stani lens, show his NFTs and their images. And so here we're combining. We're getting Stanny lens. As you know, obviously he's the founder of Lens.
00:03:11.150 - 00:03:30.910, Speaker A: That's an address on Lens that's on polygon, resolving that to a zero x address. Then we're going looking up all of his NFTs and also getting images which we've resized so you don't have to go out to IPFS and get them yourself. So here is stani's NFTs as an example. So let me hand over to Sarvesh though, and he'll give you an entire tutorial about how to use the APIs.
00:03:31.650 - 00:04:16.186, Speaker B: Over to you, sir. Yeah, okay. So I'll use next couple of minutes to go through what's currently possible with Airstrike APIs. And then I'll cover a couple of use cases that you can build with the APIs right now. So in this diagram you can see we are currently live on ethereum and polygon chain. And on the left side we have like most basic building block of any of the blockchain based projects. So we have all the Tokens NFTs balances and transfers for NFTs.
00:04:16.186 - 00:04:38.066, Speaker B: We have off chain metadata and resize images. We have whole vertical on identity. Like this is where a lot of people are integrating Airstrike. So you can query all the ENS domains and their primary domains. We have lens and forecaster. You can query Poops with Airstrike right now. And then at the last side we have sales data coming from NFTs.
00:04:38.066 - 00:05:13.918, Speaker B: So we have sales from OpenSea, Blur and Durable. We also aggregate this sales data on specific NFT level or a collection level or a marketplace level. And this aggregation runs on different timelines, like daily, weekly, monthly, yearly and lifetime. So this slide is a basic summary of what you can build today with Airstrike in this hackathon. And these are like couple of use cases that we feel it's very easy to build on Airstrike right now. This is not an exhaustive list you can add because Airstag is a general purpose product, so you can add more to it. But to go through, the first thing is identity resolver.
00:05:13.918 - 00:05:41.370, Speaker B: So I'll build a couple of queries from this use case, I think three or four of them. But if you have any zero x address or any ans, you can actually ask about the Lens for Castle Poops NFTs. So this is an identity resolver. Similarly, you can build groups if you are building like a chat application and you want to figure out what are the groups you should build. So you can build groups based on NFT holders or the Poops, the event that attended together. So this is possible. I'm going to build this recommendation engine today.
00:05:41.370 - 00:06:25.790, Speaker B: So a simple recommendation engine based on Poops. So if you have a Lens profile and you need to recommend what other lens profile that profile should follow. So based on similar events you attended, I'll try to build a recommendation engine today. Definitely token balances transfer history, token gating is very much possible. So you can use token balances API and put a wallet and a token address and check whether the wallet has a token or not. This new thing that we are looking into how airstack can be used for Zcash association so you can prove what's on chain truth and so airstack can be source of truth and then you can generate proof and validate with some other protocols that's here for it. And one more area that we are looking into to build very awesome visualizations on top of airstrike.
00:06:25.790 - 00:06:54.450, Speaker B: So we have a lot of data on NFT sales and ENS and Poop. So you can actually build a visualization like find the common wallets who attended each ranu in each order loop so a lot of those visualizations are possible. I'll go through a couple of use cases, I'll prepare the queries that I'm going to build. So I'll start with a simple query. I want to build a token getting use case. So I want to build like token balances along with NFT images and metadata. So I'll go here on the wallet.
00:06:54.450 - 00:07:43.570, Speaker B: Yeah, so here I have all the list of the APIs but for token getting I want to build with token balance. So I'll select the token balance I will filter based on a wallet. So I will select this as a variable and I will select all the fields that I want as an output. So definitely I need amount and because I'm fetching balance so I need to query name and symbol and if the balance is of NFT then it also makes sense to ask about any images or metadata it might have. So I'll select those twins and yeah, from the token I should also select address and token ID. Right, these are all the fields that I'm going to use for the query. Now let's go to the filters part.
00:07:43.570 - 00:09:36.360, Speaker B: So we have very complex set of filters that is allowed. So you have and or Nor in clause. So all the clause you have used in anysql or any database programming language, those kind of filters you can build in abstract APIs. So I'm going to add filter on owner right now and so my query is complete. Now I'll add a variable so it's autocompletes so just let me just reload it. Yeah, now it loads properly. Quickly build the same query again, select amount, token, address, name, symbol from the NFDS I will select images, I will rename my query variable to something more meaningful so I will name it identity and I will put it here in the variables then now it should be able to tell me it's a little field.
00:09:36.360 - 00:10:18.466, Speaker B: Sorry about this. Just use this one. Yeah. Okay, we are ready with the query. So let's say first I want to build token gating and I want to fetch balances based on ENS name. So I just put in ENS name of italic so that's possible. If you are integrating with Lens or Lens then you can also put a Lens profile here.
00:10:18.466 - 00:10:45.830, Speaker B: So you can also query based on Lens profile. You can get the same result. Definitely you can put a wallet address. So I'll just select my wallet? Yeah, so that's possible too. Now, let's say you're building token getting so not just owner but you also want to add a filter on token. So you will add a filter here and you can just put your token address. You see, like I have the token.
00:10:45.830 - 00:11:18.882, Speaker B: So this query can help us help you build the token getting applications. I'll go to the next use case. So next use case is more about identity. So you want to figure out holders of Moonbirds collection and along with you want to know about what are the social profiles and the primary NS of those holders. So holders are returned from the token balance. So I'll again use the same kind of query and again the token address is Moonbirds for me. So I will change to the moonbirds.
00:11:18.882 - 00:11:47.790, Speaker B: I don't care about owner right now because I'm looking for all the holders. So I will remove that. Okay, now I am interested in social profiles of the owners. So in the owners, so Owner represents a wallet and you can ask any question about the wallet from this wind. So you can ask social profiles. I'll select the DAP name and the profile name. Similarly, you can select ENS domains.
00:11:47.790 - 00:12:23.900, Speaker B: We also have primary domain if you are interested in that. So this completes the query, we can just run it. So it gives you all the holders of Moonbuds and it will also give you all the domains and primary domains of those holders. Let's see some of the interesting data points here. Okay, one more thing you can add ask for 200 records in one go. So initially by default it takes ten. So I will add 200.
00:12:23.900 - 00:13:03.462, Speaker B: So you can see you're getting lot more records. You can see right, this Moonbird is being held by this Lens Profile who has this ENS. And this is also a primary ENS for him. So you can resolve a lot of identities with this combination. Okay, now last two queries are more like a recommendation engine that I'm trying to build today. So the use case is I have a Lens Profile and I want to know what all event I have attended. That's first part of the query and the second part is from one event that I have attended, I will figure out what are the other lens Profile OS attended same event.
00:13:03.462 - 00:13:21.870, Speaker B: So I'll build the first one. So the first query is to build get the Lens Profile. Given the lens profile. Find the poops. So because I'm querying on Poops, I need to go to the Poops API and my input is a Lens Profile. So that's an identity for me. So I will select owner.
00:13:21.870 - 00:14:02.030, Speaker B: Then from the Poops, I will fetch some details about the Poop event itself. So the description and the name of the event. Yeah, so this is complete. If you want we can change these variable names. These are not that good but I'll just keep it same right now. Okay, so this is my lens profile and I can also select event ID. Yeah, let me just see what happens here.
00:14:02.030 - 00:14:57.526, Speaker B: Let me try thing here. Yeah. So I will ask about the event, I'll select some more fields name of the event. I can just run this query. So you can see I have attended this events. One of those event is Eigth Denver 2023. So the event ID is 1030 93.
00:14:57.526 - 00:15:24.650, Speaker B: So I'll just remember this one. So here the input was a lens profile. So I could see this lens profile has attended this event. Now in order to build the recommendation engine, you need to also figure out what other lens profile has attended the ETH Danware. Right? So that's my second query. So fetch web3 socials and private DNS to the people who attended Ethanware. So this time again, I'm in poop's API.
00:15:24.650 - 00:16:08.470, Speaker B: But this time I want to filter based on event ID and the event ID of ETH Danworth. I will use this event ID that I got in the past query and I'll put it here. Now in this case I want the lens profile of the attendees, right? So I will go to the owner and I will select the socials and I last the app name and the profile name. If I put it here, I get the lens profile. So not everybody has a lens profile, but I can also select like identity and user addresses. So it will give me the wallet address with that list. So you can see this lens profile also attended ETH Denver.
00:16:08.470 - 00:16:57.186, Speaker B: So if you're building any application which has a social angle, you can actually build a recommendation engine with this kind of queries. I can also add more records to it so you'll see more data coming. So there is also one profile on Forecaster who attended the East Stanford. So combining these two queries I can build a simple recommendation engine where I'm finding people based on the same activity on Poops. Okay, let me showcase a couple of more queries. I want to showcase this bulk social query once again. So we have this wallet API and we have social API.
00:16:57.186 - 00:17:27.570, Speaker B: So sometime you have a use case where you want to ask for more than one wallet. So you want to look up for 100 such wallets, right? So here we are using something called in clause. In the in clause you can pass array of addresses in one go and you can select. So in this query I'm putting like I'm finding based on some identity. So the identity here is a wallet address. So I have 100 wallet addresses and I'm asking for social profiles for those wallets. So I'm getting all the results in one query.
00:17:27.570 - 00:18:12.350, Speaker B: So you can ask about like in bulk of 200 profiles in one go along with this if you're building your apps. So we currently have two SDKs react and Python. I can quickly showcase how SDK looks like and how you can add these queries to SDK and get the data. So this is a Python SDK so you need to first install the Python SDK and once you have the SDK you need to import necessary files. So Abstract Client is a class that we export and in any of the SDK you will need an API key to integrate. So in order to get the API key you will go to the profile page. So here I have a profile.
00:18:12.350 - 00:19:08.900, Speaker B: In the profile you will get your API key, you will copy this API key and you put it in the SDK and any query that you would want to run you build on the query builder and you put it here. So you'll initialize your query. The next thing you'll do is you will create a query object and you'll just execute that query. So in this case you can see I have Poops query already created here for service lands and you can see each query response give me two things an error object and a data object. So if error is none you will get the data and you can just use it. Sometimes you are building an application which requires lot of data and one API cannot give you all the data so you need to use pagination. So in that case SDK provides you two boolean flags in the query response that is Next page and Previous page.
00:19:08.900 - 00:20:06.290, Speaker B: So if you have a next page in your query response you can ask for the next page again here, this will give you the second page. Similarly, if you want to go to the previous page then you can again go to the previous run the previous page method. So I built this small utility function where you can just pass airstrike SDK client a query and variable. What this function is doing, it's executing the query, it's collecting the response, and it will keep on doing it till it goes to the last page. And as soon as it gets the response, it will return it in one go. This way you can actually integrate any of the query into SDK. So because the SDK is general purpose you just need to work on the query part and put your variables here and you will just run it and it will give you the response like this yeah, I think this is it.
00:20:06.290 - 00:21:18.306, Speaker B: These are the use cases I wanted to cover. Yeah so for NFDS you will be able to query based on so the token represents the collection here so you will be able to query based on let me select the token CPI here so you will be able to query based on address, name, symbol and type. Yeah you can put the address of the contract and ask it. And we have one more thing that I want to showcase. So, in the token NFTs, if you want to query specific NFTs of a contract and you want to query based on trades, so something which has a background color green. Right. So you can basically go to the attributes, and you put, like, trade type is background color, and you put the value as green.
00:21:18.306 - 00:21:40.150, Speaker B: Right. So it will only give you the NFDS of that collection who has that background? Yeah. Custom properties. Right. From genesis, we only have poops right now poops. But for ethereum and polygon, we have all the data from genesis to the live blocks.
00:22:07.770 - 00:22:33.486, Speaker A: Yes. We have five $2,000 prizes. The first three are just our three favorite projects. Build anything you want on airstack. There's lots of ideas in our notion, and then we have a $2,000 prize. Specifically, if you build something that makes use of airstack and xmtp or AI or attestation. And xmtp is specific.
00:22:33.486 - 00:23:14.198, Speaker A: We do a lot with a lot of xmtp projects are building with airstack. No, we do not. Xmtp is an awesome way to message people with an ethereum address and what they've been missing before airstack was a way to resolve, say, from a zero x address to an ENS or a lens or forecaster, et cetera, et cetera. And so we've kind of teamed up together to make that possible. And so a lot of applications are making use of that. And so, if you build some of the xmtp, there's $2,000 from air stack, plus another 1000 from xmtp available. And then, finally, if anyone just wants to build a unique visualization of airstack data so, if you see right now the response here is a JSON file.
00:23:14.214 - 00:23:15.226, Speaker B: If you want to build something that.
00:23:15.248 - 00:23:51.214, Speaker A: Is just a unique visualization of the response, that's another $2,000 value we have, as well. And just to show you real quickly, an example. We built a demo app you can look at on demo airstack XYZ, which is just a front end to, I can say, put in any lens, barcaster, ENS, et cetera, and it's pinging the OSC APIs and give it a visual response rather than the API response. Exactly, yeah. So, if you check out an app called I can show you afterwards, called converse.
00:23:51.262 - 00:23:51.874, Speaker B: It's at get.
00:23:51.912 - 00:24:24.840, Speaker A: Converse. They have a recommendation engine. It's built on top of fairstack, where if you click on a button that says, who can I message? It'll show you everyone that went to the same events with you, from Foops, everyone who you sent tokens to, or from your transfer history with air deck. So it's kind of getting past that cold star problem with web3 and showing you people you know already based on on chain data. Other questions, anyone? All right, if you need any help, our telegram chat is our team is there 24/7.
