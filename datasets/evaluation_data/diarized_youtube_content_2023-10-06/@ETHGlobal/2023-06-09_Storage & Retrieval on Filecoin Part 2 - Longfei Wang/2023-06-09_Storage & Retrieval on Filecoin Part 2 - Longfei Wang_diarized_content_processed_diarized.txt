00:00:29.420 - 00:00:43.010, Speaker A: Hello everyone and welcome to the Hack FS Filecoin Storage and retrieval on Filecoin part two session. Joining us today is Longfei Wong who will be taking us through this session. And with that I'll pass it over to Longfei to get the session started.
00:00:46.560 - 00:00:54.080, Speaker B: Thank you. So you all be able to see my slides, right?
00:00:54.150 - 00:01:43.220, Speaker C: So it works fine. And I'm going to start today's session. Hey everyone and good morning. Good afternoon, good evening whenever you add and welcome to listen to this talk about storage retribo part two. I hope you guys have spent some time and listened to what Matt has talked about last time and about making storage deal on filecoin through smart contract, either through client contract or through the aggregation. So this topic will be part two and after what Matt's talk and we will talk a little bit more about what afterwards. If you make a storage deal on Filecoin, what it can do to replicate, to renew or maybe to repair on the Filecoin virtual machine through smart contract.
00:01:43.220 - 00:02:25.700, Speaker C: So let's maybe introduce myself a little bit. And my name is Longfei and I work with the Filecoin developer advocate and now because FVM is super important on that so I'm going to mainly helping on FVM team as well. So if you guys work with hackathons and you guys stay in the community either through Slack or Discord, you might see my name popping around everywhere. I'm trying to help developers in the community and hopefully I'm being helpful and be able to bridge you guys with the team, product team or our engineer team to be able to fix your problem and to providing a better and more stable infrastructure for building things on filecoin.
00:02:26.680 - 00:02:27.430, Speaker B: Cool.
00:02:30.520 - 00:02:48.228, Speaker C: For guys have been listening and following the Filecoin workshop and you might have seen this slides thousands of times. But I think that's a great slide to be able to tell what the Filecoin plan is and why we're doing things at a certain stage of the development phase.
00:02:48.404 - 00:02:50.072, Speaker B: If you're not and the first time.
00:02:50.126 - 00:02:56.876, Speaker C: Jump into this workshop and then I will give you a brief talk about what Filecoin are doing and why we.
00:02:56.898 - 00:02:59.992, Speaker B: Bring FVM on board at this period of time.
00:03:00.146 - 00:03:06.092, Speaker C: So obviously filecoin is building a decentralized network, decentralized storage to provide the storage.
00:03:06.156 - 00:03:11.532, Speaker B: For all the web. Two or three words decentralized storage.
00:03:11.596 - 00:04:31.310, Speaker C: Obviously the storage is most valuable things for us. Starting from 2217 or 220, we launched the main net. We are putting a lot of effort trying to providing the decentralized capacity into the network, trying to onboard a storage provider, trying to onboard storage provider to provide more stable storage through the global. That's the first that we've been doing and we've been doing a great job since 2020 and then the network has growed a lot. If you look at our Blockchain Explorer or any static website, you will find out that the storage capacity, regardless of raw storage capacity, or that just the storage capacities through Filecoin Plus have grown rapidly until like twelve or 13 gigabit right now and after that, obviously we want to onboard data on filecoin we want to onboard data like valuable data set and humanity data set on filecoin either through Web two applications collaborations or providing the storage for all sort of the Web three applications platform like Ethereum, Solana and near or any blockchain to onboard the data on filecoin. And that's growing very great as well. And the third step is what are we doing right now?
00:04:31.680 - 00:04:33.580, Speaker B: We are trying to bring the service.
00:04:33.650 - 00:04:57.956, Speaker C: On filecoin and harvest the real value stored on filecoin, which is data, and then providing the computation through this data, either through the data or through the status of the data state. Of the state on filecoin and to be able to build web scale applications on filecoin. And that's where we bring Filecoin virtual machine into the picture to be able.
00:04:57.978 - 00:05:01.764, Speaker B: To provide the on chain programmability through.
00:05:01.802 - 00:05:53.156, Speaker C: The data through the state of the data on filecoin, as well as other computations like bacalau, things like that. And this is the brief idea of what we are doing and why Filecoin virtual machine is important and how it will bring the programmer into the Filecoin network. I think. Now, we've been talking about Filecoin and we've been talking about how Filecoin is providing the data for web two, web3. Now, because we are at a hacker fest and we're trying to get developers interested to be on Filecoin. And so the most important part is how are we going to build on Filecoin and what kind of a service and what kind of tools that we can use. I think for developers, we want to be clear that we want to be.
00:05:53.178 - 00:05:55.316, Speaker B: Clear to developers that based on what.
00:05:55.338 - 00:06:08.164, Speaker C: You'Re building, you need to find the right builders paths to go, to follow, to use the right tools to build. And we don't want to developers to bump into the road that they're just completely using the wrong tool and building.
00:06:08.222 - 00:06:11.372, Speaker B: Things that would not expect them to do so.
00:06:11.426 - 00:07:02.444, Speaker C: This diagram prepared by Sarah, one of our team members on Femt is great, it's very clear and then guided develop through the process of picking the right tool and thinking from the perspective what the product needs. So we can look at this diagram from two sides. The left side. The green part is if you want to build something more programmable on filecoin which means if you want to using the programmable storage on filecoin and then the right side is if you don't and for the applications that you're building you just want to store your data in a decentralized manner that you just want to put your data in filecoin or IPFS network and you don't need to handle or like making storage deal and monitor the storage data or doing the renew or replication that kind of.
00:07:02.562 - 00:07:04.572, Speaker B: Job and you will go this way.
00:07:04.626 - 00:07:06.264, Speaker C: For example, if you're building an NFD.
00:07:06.312 - 00:07:08.572, Speaker B: Project, if you're building a GameFly project.
00:07:08.626 - 00:07:10.716, Speaker C: Like AI or Social, you just want.
00:07:10.738 - 00:07:16.224, Speaker B: To store your data in a decentralized manner out of the control of any.
00:07:16.262 - 00:07:40.808, Speaker C: Central party and you go this way. All you need to do is use this storage service. Web three storage NFD storage lighthouse or s three. Now they change to Farcorn Data tools and then all you need to do is just store data and then those storage service will take care of storage deal making process. So actually all those storage service are.
00:07:40.894 - 00:07:48.996, Speaker B: The builders for the left side of this diagram. This diagram.
00:07:49.108 - 00:08:49.928, Speaker C: So they are building something on filecoin and those storage service will build on filecoin storage. We need to make storage deal on filecoin network and monitor the storage status and be able to renew and repair. And also if the data are small, they also need to do aggregation. If you are building some data service like Web Three Storage or Asteroid and you mainly going to link on the left side of the picture, or if you're building something like we've been talking about data dow perpetual storage and storage automation, then you also need to go with a programmable storage side. And if you're storing some data on smaller size or less than four gigabit, which is what we distinguish of, smaller size, small data, large data on filecoin and you probably need to go through the aggregation. Or if you're storing data larger than four gigabit, you can go on the deal. Clients, all this have been covered by Matt from the previous session.
00:08:49.928 - 00:08:52.368, Speaker C: And then the thing that I'm going.
00:08:52.374 - 00:08:55.344, Speaker B: To cover mainly today is if I.
00:08:55.382 - 00:09:04.176, Speaker C: Made a deal on filecoin, regardless through aggregation or without aggregation, there's a deal lended on filecoin. We just need to keep monitor and.
00:09:04.198 - 00:09:06.516, Speaker B: Then be able to replicate as many.
00:09:06.538 - 00:09:11.844, Speaker C: Copy as we want and be able to renew or maybe essentially we'll be able to repair if there's something wrong.
00:09:11.882 - 00:09:13.860, Speaker B: With the storage deal of our coin.
00:09:15.560 - 00:09:21.048, Speaker C: Today. I think we just want to be clear. If you are in this workshop and.
00:09:21.134 - 00:09:25.124, Speaker B: If you're interested into building perpetual storage.
00:09:25.172 - 00:09:42.512, Speaker C: Or renewal repair and you're going to mainly land it on here, but if you're building that's part of a developer so we want to track we want to track developers who are interested in this site and pay more attention to this workshop. If you're building NFT or DeFi and the storage service might be the best.
00:09:42.566 - 00:09:52.656, Speaker B: Options for you, okay, so let's get into it because everything I'm going to.
00:09:52.678 - 00:10:07.124, Speaker C: Talk about today is for the storage deals. I want to go back one step and to refresh everybody's mind on how filecoin storage works. I think Matt has also covered that in a previous talk. But I'm going to bring it again.
00:10:07.322 - 00:10:12.424, Speaker B: Because that will be important for you to understand how we'll make some of.
00:10:12.462 - 00:10:27.820, Speaker C: Those process on filecoin on the Filecoin virtual machine and through smart contract and why we are doing certain work, like why we're doing replication, why we're doing renew and why we're doing things through aggregation.
00:10:28.240 - 00:10:30.412, Speaker B: All right, let's first go through this.
00:10:30.466 - 00:10:41.840, Speaker C: Storage deal making process very quickly and we'll see what whale can put on Filecoin virtual machine and what we can do is renew. So if you want, let's starting with the client spot.
00:10:42.420 - 00:10:44.236, Speaker B: If you as a client of Filecoin.
00:10:44.268 - 00:11:35.004, Speaker C: And you want to store data on Filecoin. So the first step when you do is, yeah, you can find your wallet and you need to have certain field token in your wallet, so you'll be able to pay the storage service fee and maybe potentially pay a class from your storage. Or you can use data cap to store your verified data on Filecoin. And that's the essential part of using Filecoin. And then once you have that you want to store data, the first step you need to do is do data preparation. So you need to prepare your data from regular file into the call file which is the data format used on filecoin and IPFS based on the IPLD standard and you'll be able to retrieve them by the CID. So those call file can be either saved on the file server or IPFS.
00:11:35.004 - 00:11:44.336, Speaker C: Eventually the storage provider will retrieve this data and store for you. Once you have that ready, the second step is you need to make a storage deal proposal to the storage providers.
00:11:44.368 - 00:11:46.704, Speaker B: On filecoin based on what the storage.
00:11:46.752 - 00:12:42.584, Speaker C: Provider requests, based on the geographic of the storage provider. So if the storage provider sees that a proposal come in and that's okay for them, they will accept this deal and then eventually request the data you want to store from the file server or IPFS. And once they get it done, they will publish these storage deals on chain on the Falcon network and after going forward, they'll just keep proving the storage they have stored through the proof of replication or proof of spacetime. From that there was something stay on chain which is deal, storage deal and then storage deal will have all this information recorded on chain. I won't bring this up because that's the most important value, best important paramount on that deal is starting epoch and ending epoch which indicates that how long the storage deal will leave on filecoin network as well as if this storage deal is active on filecoin or not.
00:12:42.782 - 00:12:46.184, Speaker B: That's very important for renewal storage or.
00:12:46.222 - 00:13:51.288, Speaker C: Repair storage or making sure that we store enough replications for this client as they wished. And as you know, this whole process happens on chain and off chain obviously. And from this picture you can see data preparation, storage deal proposal, data transfer, all this happened off chain and then deal publish proof of the deal and then storage deal on chain. So now with Fem coming in we are trying to move some of the component on chain through the programmability on the smart contract. So now, if you imagine that you can start using a few token to fund your storage and maybe you can have your own token to fund the storage. Trying to incentive data. Trying to incentive clients to use trying to incentive storage provider maybe like geographically to incentive and then the second part we can make it on chain is making storage deal like Matt's presentation last time for the first part of the process that we can make deal through the client contract.
00:13:51.288 - 00:14:06.820, Speaker C: Which means you propose deal in the contract and contract will imitate events on chain and the storage provider Boost will be able to pick it up and publish deal. All the orange side, the orange part that I put it here will be able to make on chain through smart contract.
00:14:07.160 - 00:14:09.188, Speaker B: And another part, most important part I'm.
00:14:09.194 - 00:14:30.968, Speaker C: Going to talk today is we can also make the deal renew deal repair and do replication on chain as well. And on chain we'll be able to monitor all this process and made it eventually on chain. Before we're going into all this detail of the renew and replication, I want to bring another concept up is Aggregation. The deal aggregation.
00:14:31.144 - 00:14:34.172, Speaker B: And Matt also talked about last time.
00:14:34.226 - 00:14:44.864, Speaker C: So I want to emphasize a little bit more because that's also something that is very important in the Filecoin ecosystem. And I think it's a super interesting idea for developers to build on top.
00:14:44.902 - 00:14:46.048, Speaker B: Of it as well.
00:14:46.214 - 00:15:06.708, Speaker C: And you can see there's a QR code down here. If you're interested in building aggregator, you can just go scan and look at the specs that our product can prepare for you and you read through and see if it makes sense if it's something interested for you to build and then go forward. If you have any question, just talk to us, talk to product team of Alcoin.
00:15:06.884 - 00:15:09.284, Speaker B: But essentially what is aggregation?
00:15:09.332 - 00:16:05.332, Speaker C: Why it's needed? You probably heard I talk about data size over and over again because there are some data size that we call sector size which is on filecoin is how big the data USC you store and then on a file coin the sector size is 32 gigabit or 60 gigabit. Imagine that if you store like NFD data, which is like a few gigabit or maybe 1 MB, how much data you need to store to pack to 32 gigabit. That's a lot of data you need to pack into there. And it's not economic friendly for the storage provider to pick up a small data and then store. Imagine like 32 gigabyte and you put thousands of files into one deal and it will generate tons of messages, generate tons of proof for storage provider to do so. It's like expensive execution, also very expensive on gas fee.
00:16:05.476 - 00:16:07.256, Speaker B: And imagine all those deals will come.
00:16:07.278 - 00:16:18.620, Speaker C: A different turn, like how long they want to store, how much they wanted to pay and what storage bar do they need. It's very difficult to handle and that's why we bring aggregation into the picture.
00:16:19.120 - 00:16:24.332, Speaker B: So what Aggregation do is the aggregator.
00:16:24.396 - 00:16:58.548, Speaker C: Will listen other files and pack them into one deal and one deal or maybe a call file to also at the same time generate what we call parsi. It's an inclusion proof that you can improve that your file is included in that call into that sector and then be able to verify that as well. Imagine that if you're putting all your files into a black plastic bag you'll not be able to verify and parsi is the standard that we bring in to be able to help to verify in the aggregation.
00:16:58.724 - 00:17:01.564, Speaker B: And then the process of aggregating the.
00:17:01.602 - 00:17:51.210, Speaker C: Files and generating the proof all could happen on chain and off chain as well. On chain means through smart contract. Off chain means what web3 storage or falcon data tools are doing. And they are building by some of the collaborators in our system as well. Like falcon data tools, lighthouse and sephora, they are building this if you're interested building an on chain aggregator, off chain aggregator, go scan this code and you'll be able to just learn. If you want to see some example, maybe you can see how farpoint data Tools and Lighthouse are building their solution. So keep in mind aggregation aggregator is very important to handle small deals and that's what we're going to take as example for our deal aggregation, renew and deal application.
00:17:51.210 - 00:17:59.228, Speaker C: We are using the aggregator in this example but of course if you are storing some data with larger size, you.
00:17:59.234 - 00:18:01.776, Speaker B: Can directly use a client contract to do it.
00:18:01.958 - 00:18:29.636, Speaker C: So let's look at this picture. So now we're talking about renew. What do we call ros. You could do replication as a service, renew as a service or essentially repair the service. So what we'll do and we can look at briefly on this side is if I'm a client and I want to store my data on filecoin. So if those data are small, first I need to store that with aggregator.
00:18:29.828 - 00:18:32.692, Speaker B: So aggregator will have a smart contract.
00:18:32.756 - 00:18:34.856, Speaker C: Which will be able to record all.
00:18:34.878 - 00:18:38.088, Speaker B: The data come in and there's going.
00:18:38.094 - 00:18:50.468, Speaker C: To be aggregator part aggregator function will be aggregate all the files together and then generate the proof, essentially send the proof back to the clients or recorded the proof in the smart contract.
00:18:50.664 - 00:18:53.356, Speaker B: And that's part of once you successfully.
00:18:53.388 - 00:18:54.496, Speaker C: Make a storage deal.
00:18:54.598 - 00:18:57.824, Speaker B: And a storage deal will leave on.
00:18:57.862 - 00:19:23.796, Speaker C: Filecoin network regardless it's to aggregator or not aggregator. And this deal will be stay on filecoin network with a certain time, which is the lifetime now minimum is 180 days. And possibly something might go wrong with the sector. Sector might go down because the storage provider has some issue maintaining that. And so after you make a deal successfully on filecoin.
00:19:23.908 - 00:19:27.268, Speaker B: We need to constantly monitor these deals.
00:19:27.444 - 00:19:48.368, Speaker C: So first making sure all the sector are healthy enough and then the deal isn't expired. Or if the clients want to store multiple replica and want to make sure that that's enough applications exist on Falcon network, all this has to be monitored through smart contract or through what do we call Ros node as well.
00:19:48.534 - 00:19:53.796, Speaker B: So if anything goes wrong, we need to make sure that we kick off.
00:19:53.818 - 00:19:59.028, Speaker C: Another storage deal to repair or to renew based on what we service, what.
00:19:59.194 - 00:20:05.748, Speaker B: The developers are building on. And then if you are interested, if.
00:20:05.754 - 00:20:42.560, Speaker C: You want to know more, here's the QR code as well. You can scan and then go to the spec page that we have been preparing. I've got to show this aggregation spec page and also the storage deal renew process as well. And keep in mind, this is just the starting point of preparing a spec and we are providing the minimum features required to be able to make the storage renew or storage application works. And obviously there are a lot of more detail could be added in there. And if you're interested, go find it out. Find out and then do expanding that knowledge.
00:20:42.560 - 00:21:34.470, Speaker C: All right, so let's talk a little bit more into the detail on each part of this, how it work. And I'm not going to spend too much time talking about how to make a storage deal through aggregator because Matt has covered it last time. So I'm just going to go over very quick. And the example here, making storage deal through aggregator. The important part comparing with what Matt talked about is we bring the application part, which involving updating data, uploading data to aggregator and then be able to submit the CID to aggregator as well. At the same time, it might need to register the renew job or replication job or repair job with what we call Ros node in the future. And then Rosnode will be able to monitor those.
00:21:34.470 - 00:22:35.020, Speaker C: And that's what we expect developers or we expect builders to build for this. Maybe it's going to be a part of the perpetual storage part of the storage service that they are working on. And then the process are quite simple. And if you're making a storage deal with aggregator, you're going to submit your data and submit your CID to aggregator. And then aggregator smart contract will be able to monitor that if they received a request of storing data and they're going to emit events of receive a request. And once the request come in and have enough data to pack into one sector, the aggregator will do the job and then aggregate all the deal, generate the parsi and then be able to call back the complete function. So the complete function will record the proof and then the deals including the CID in the aggregated smart contract.
00:22:35.200 - 00:22:36.776, Speaker B: And that will be able to be.
00:22:36.798 - 00:22:40.730, Speaker C: Encrypted by.
00:22:42.620 - 00:22:44.648, Speaker B: The nodes as well as.
00:22:44.734 - 00:22:56.044, Speaker C: The smart contract which I will cover next. And once you have this is the process of making storage deal once your storage deal is finished and then the gregator smart contract will be able to.
00:22:56.082 - 00:22:59.052, Speaker B: Record all the deals have been made.
00:22:59.106 - 00:23:01.452, Speaker C: For that CID and included that CID.
00:23:01.516 - 00:23:05.536, Speaker B: Into the deal process and that's the.
00:23:05.558 - 00:23:08.028, Speaker C: First step of making storage deal through aggregator.
00:23:08.204 - 00:23:11.328, Speaker B: Keep in mind that we are taking.
00:23:11.414 - 00:23:30.136, Speaker C: Filecoin data tool edge as example here and if you're interested you can also use them as well. And there's a smart contract have been provided by aggregator and has a submit function a complete function that I demonstrated I talk about in this diagram and also have a Get audio function will.
00:23:30.158 - 00:23:36.250, Speaker B: Be eventually used by the dealstatter smart contract as well.
00:23:37.340 - 00:24:02.208, Speaker C: And once the deal is made successfully on chain the next step will be we'll keep monitoring those deals and if something goes wrong the Ros node will be able to take actions here. I'm going to take replication and renew as example and repair will be coming later as well. So if you remember earlier I said.
00:24:02.294 - 00:24:04.644, Speaker B: When application make a storage deal and.
00:24:04.682 - 00:24:07.700, Speaker C: You can also register a renew job.
00:24:07.770 - 00:24:15.700, Speaker B: And replication job with Ross node with this note.
00:24:15.780 - 00:24:26.916, Speaker C: So eventually this note will work with deal status smart contract and monitor those deals on filecoin through the aggregator.
00:24:27.108 - 00:24:30.110, Speaker B: So how that works is there's a.
00:24:30.640 - 00:24:41.636, Speaker C: Deal status smart contract in a smart contract and you're going to get all the active deals through the aggregator smart contract. So we send requests to the aggregator.
00:24:41.688 - 00:24:43.856, Speaker B: Smart contract and get a list of.
00:24:43.878 - 00:24:55.990, Speaker C: The deals that, including that CID have made on chain. And then they will check on Falcon network, calling the building actors to look if those deals are still active or not.
00:24:56.360 - 00:24:59.588, Speaker B: And once they get data back, and.
00:24:59.674 - 00:25:23.532, Speaker C: It will emit events about which deal is active or not. And eventually the roster will be able to listen to those events and then calculate if there are enough active deals exist for this CID. So if not for example if the clients want to have ten replications on the file coin but we can only.
00:25:23.586 - 00:25:26.316, Speaker B: Find nine active deals which means this.
00:25:26.338 - 00:25:43.004, Speaker C: Is one missing and it could be a repair and a replication as well. So the rust node has to take action to start a replication work or start a repair work, kick off not a new proposal with aggregator and activate.
00:25:43.052 - 00:25:44.956, Speaker B: A deal for these kinds.
00:25:45.148 - 00:26:08.744, Speaker C: This is the brief process which involves a lot of monitoring, a lot of customer logic into replication as well and that works the same for the renew job. The only little bit difference is on the deal status contract we are going to look at is there any deal expires within certain epoch and those list of deals are also request from the.
00:26:08.782 - 00:26:11.356, Speaker B: Aggregator smart contract and you'll be able.
00:26:11.378 - 00:26:31.724, Speaker C: To get a list of deals that have been made to include that CID in. And for each of the deals we'll look at the building actor and to look at the deal term to make sure if it's expired or not. If it's close to expire, we're going to emit events and those expired deals events will be listened by the Ross.
00:26:31.772 - 00:26:35.812, Speaker B: Node and Ross node will decide if.
00:26:35.866 - 00:26:39.888, Speaker C: There'S a new deal needs to kick off to do the renew.
00:26:40.064 - 00:26:42.020, Speaker B: And all these are the brief process.
00:26:42.090 - 00:26:45.092, Speaker C: Of what a deal monitor and what.
00:26:45.146 - 00:26:50.648, Speaker B: Ros node should do. So like I mentioned earlier, this is.
00:26:50.814 - 00:27:21.520, Speaker C: A very minimal features that we have put into the spec to make sure that this renew as a service or replication as service works fine end to end. But obviously there are more that we can add into this future. For example, if we look at the deal status smart contract, currently what we design it for is for what the client has stored for the CID and this contract will be able to get a list of the deals and keep monitoring those deals periodically.
00:27:22.420 - 00:27:24.320, Speaker B: So there are two functions that we provide.
00:27:24.470 - 00:27:39.928, Speaker C: One is get active deals which we'll use to determine if there are enough replications for this CID on chain. And then the second one is get expiring deals which is used to determine if there's any deal expiring that we.
00:27:39.934 - 00:27:44.264, Speaker B: Need to renew for it. So this is a very basic function.
00:27:44.382 - 00:28:13.104, Speaker C: But if you think about more and you probably will get out. But when exactly should I monitor those contract? When exactly should I monitor the deal? Do I need to get oracle into the picture? How do I do a chrome job to make sure that I don't run that status check too often? And maybe if there's new renew and repair coming, what's the logic should I.
00:28:13.142 - 00:28:14.050, Speaker B: Do right.
00:28:15.800 - 00:28:35.640, Speaker C: Should I renew based on what the clients ask for? Or maybe I can renew in a different location and pick the different storage provider to do that and how to pay, how the clients will pay the renew service or repair service. Those are a lot of more detail you can add and I think for this kind of a renew and repair.
00:28:36.060 - 00:28:40.744, Speaker B: Ros service deal and for the Ros node as well.
00:28:40.862 - 00:29:05.040, Speaker C: And we're designed the Ross node as the point of be able to monitor the steels we have made through the aggregator and also be able to help monitor the expiring deals or active deals and actually kicking off the job of renew a deal or replica deal or repair deal with aggregator or not aggregator on filecoin.
00:29:06.580 - 00:29:10.464, Speaker B: All these very detailed spec are included.
00:29:10.512 - 00:29:30.092, Speaker C: Into this QR code if you scan and you'll be able to find it and that's the part we are pulling it out. And if there's any developers are interested into building replication renew as a service and you can go follow and go read this note and read this spec.
00:29:30.226 - 00:29:33.100, Speaker B: And welcome anyone to build it for it.
00:29:33.170 - 00:29:44.050, Speaker C: And if you're building a perpetual storage or if you're building a storage service, you're also interested to build this and also very welcome to do so.
00:29:44.820 - 00:29:46.544, Speaker B: Feel free to reach out to us.
00:29:46.582 - 00:30:10.410, Speaker C: If you have any question and all this document has been put it out into our link to Tree. If you are interested you can scan and get all the information we are looking for like aggregator specs, aggregate specs or this renew repair service spec. And also if you follow us on Twitter, we have a twitch happen every month to talk about all this to detail.
00:30:10.860 - 00:30:15.864, Speaker B: I think I first think I might.
00:30:15.902 - 00:30:54.420, Speaker C: Don'T need 30 minutes, but after I'm going through, it feels like a lot of information to digest. And I hope after this session you'll be able to go back and have the picture of how the deal process on filecoin looks like and maybe have the aggregation in why it's needed and have the clear picture of why we need a renew. I need to repair why need the replication into that picture. And if you are interested building it, just keep following us. And if you have any question maybe you can ask now or maybe ask us on Slack or Discord.
00:30:55.240 - 00:30:58.730, Speaker B: Okay, that's all my content for, thank you.
00:30:59.420 - 00:31:39.020, Speaker A: Cheers Longfei. Yes, if anybody has any questions, please feel free to type them in the chat now or take yourself off mute and ask. And as Longfei said, if you don't have anything now, please definitely take advantage of the Discord partner channels as well to reach out to Longfei and other partners via that route. Okay, if there are no other questions or no questions, thank you Longfeit for the great presentation and thank you everybody for attending. And yeah, we will see you all later. Cheers, have a good one.
