00:00:06.250 - 00:00:18.750, Speaker A: Hello. Hi. ETH, New York. How you going? Good to see everyone here. Hopefully you're all in an empire state of mind, ready for this hackathon. It's like packed out here. So I'm super psyched to be here.
00:00:18.750 - 00:01:05.434, Speaker A: I'm Ali, I'm a filecoin developer advocate or I work at the Filecoin Foundation, so and yes, the accent is Australian, for those of you wondering. But tonight I want to give you a brief intro into IPFS and Filecoin. And then I'm going to dive into the mechanics of making an NFT contract and why IPFS and Filecoin are so necessary, particularly if you're not storing that metadata on chain and why that sometimes gets really prohibitive as well. So this is a little project I've made. It's a MultiChain, multi contract personalized NFT collection. So just built on solidity contracts. I've used both an ERC 721 and an ERC 1155 contract.
00:01:05.434 - 00:01:51.278, Speaker A: And I'll dive into why they're different a bit later and with a react front end and some dev tools around this. So hard hat Morales for node provision and specifically NFT storage to store our NFT metadata. So, firstly, I just wanted to clear up some confusion that's maybe out there around a few names you've probably heard floating around the web3 ecosystem and share how these fit together. So, Protocol Labs, firstly is an open source research and development lab. It's building protocols, tools and services to improve the internet. And we really believe in this concept at the moment. Actually, we're running funding the commons here in New York as well, in parallel with this.
00:01:51.278 - 00:02:33.194, Speaker A: So we're really aiming to build tools and services that help radically improve and drive breakthroughs in computing and move humanity forward and for the common good as well. So some really big goals there. IPFS and Filecoin are two of the projects that were originally incubated by Protocol Labs and they now operate as their own separate but complementary projects within the ecosystem. Still sharing the same vision. But let's jump into firstly, cue the Star Wars music here. Interplanetary file system. So this isn't just a meme name though, because there's a distributed peer to peer network for files and folders.
00:02:33.194 - 00:03:40.530, Speaker A: IPFS was designed to be able to work even when you're between planets. So let's say you signed up for the Mars colony program and you're now living happily on Mars. Maybe it takes you an hour or so to request a file from Earth that you need, but if someone else on Mars already has that file, then they can just serve that content to you instantly with IPFS. So maybe you're thinking this is just a fancy name for a peer to peer protocol or network now, but there's real gravity. Get it in what it does. Because IPFS is distributed by design, it has no central authority servers, it's designed to be offline first for resilience and it uses specifically a really unique and upgradable standard for addressing content. And this is the unique part of IPFS, because rather than using methods that we might be familiar with for storing and accessing content, so location paths, we go to the web, we type in a Http URL, and that location serves us up a piece of content from some specific centralized server.
00:03:40.530 - 00:04:38.440, Speaker A: So this is called location addressing, and we're never really sure what content we're going to get for that location that we go to. So with IPFS, instead, we generate a content ID, and I'll just jump to this one for a second. So each piece of content actually has its own cryptographic hash function, so it's like a unique fingerprint for each piece of content. And this is kind of wild, or at least it was to me when I first started looking into IPFS. And it's because it's such a mind shift from the web two way of doing things that we're really accustomed to at the moment. And it's super elegant for its simplicity, because this really opens up the web to fully massively distributed storage systems. And that's important, right? If you can always verify what content you're getting back, you really don't have to care where that content comes from.
00:04:38.440 - 00:05:12.926, Speaker A: So that's really like the key part of learning IPFS, the fact that it's not just a peer to peer protocol, but it also has this content addressing system, so it makes the web work peer to peer. And by the way, that's a bit weird. My speaker notes have stopped. But anyway, that's all right. So IPFS is not just for Web Three either, so it also works with web Two. It's a protocol, not a blockchain. So it's used in things like Flickr has been using it.
00:05:12.926 - 00:06:11.842, Speaker A: Some of our amazing colleagues here in the Web Three are also using it. So I know Vallast has built on top of it, Livepeer is built on top of IPFS audience as well, to name a few. So the problem with IPFS in the wild though, is like, you can run your own nodes, but as soon as you shut your laptop, that content that you've stored on your own node is no longer really retrievable by anyone else. And let's be honest, not everyone wants to run their own content nodes the other way. You can maybe ask someone else to store your content for you, but unless they really like that data, or they really like you for some reason or whatever it is, that content may become unretrievable after a while. And we've all seen this with kind of torrenting systems where less popular piece of data just stop being retrievable or available, basically. So a third way to do it is you could pay a pinning service to pin that content on the net for you.
00:06:11.842 - 00:07:03.634, Speaker A: But if we start doing this, we're kind of opening up to these centralization issues that we already have in the web today, and we really kind of want to avoid centralizing our data pinning services by using pinning. So despite maybe what the really annoying anyway, despite what the community's general altruism or wanting to do this, eventually content can become like unretrievable. So this is where Filecoin comes into the system, really. So Filecoin is storage designed for web3 from the ground up. It's a distributed storage network. It uses crypto economic market levers to incentivize the storage of data. So it uses two main consensus mechanisms to do this.
00:07:03.634 - 00:07:42.990, Speaker A: The first is proof of replication. This ensures that providers are actually storing your data and keeping it safe when you first upload it. And the second one is proof of spacetime. So all of our storage providers, and there's like over 4000 storage providers globally at the moment, all of them put Filecoin up as collateral. And they have to prove daily that they're holding a subset of the data that you've asked for them to store. And if they don't do that, their File coin is slashed. And because running a data center is quite expensive, plus the amount of Filecoin to do it is also expensive, we're really decentivizing having bad actors in the system as well.
00:07:42.990 - 00:08:27.722, Speaker A: So the second thing is that Filecoin runs on market deals. So if you want to store data on the network, you can firstly decide how many storage providers you want to store that with for resilience and redundancy. And then secondly, you can decide how long you want that content to be stored. So it's really your data and it's your choice. You can decide if you want to store that for six months or you want to perpetually store it using something like smart Contract for 500 years and just keep doing that. So the too long didn't read basically is that IPFS and Filecoin are great complements. So IPFS is great for that content, addressing verifiability of content coming from anywhere and for fast and flexible retrieval.
00:08:27.722 - 00:09:10.886, Speaker A: And Farcoin is really that persistence and verifiability of that data storage layer. But what's this got to do with NFTs? You might be wondering, well, if we dig into the anatomy of an NFT contract and this is the ERC 721 standard, the original NFT contract, and this is the Open Zeppelin one. So you could build an ERC 721 from scratch if you wanted to. But most people I think, would use this template. It's been audited, it's community tested. This is probably where you'd start in developing an NFT. So this is a contract from Open Zeppelin.
00:09:10.886 - 00:09:50.162, Speaker A: Like I said, it's been audited and community tested. And here's the API for it. Here's the basic functions that come with this ERC 721. And here's an example straight off the Open Zeppelin website that shows this implementation of ERC 721 in solidity the ethereum language. So this contract basically creates a grain item here as an NFT, an ERC 721, and the function that mints that NFT or stores it on the blockchain is called award item. In this scenario, in this code here anyway. And it takes two parameters.
00:09:50.162 - 00:10:15.130, Speaker A: The first is the address of the player. So I assume that's who they're awarding this NFT to, the player. And the second one is a string and a token Yuri. What is this? Token. Yuri. Well, it turns out that this token Yuri is basically just a JSON file. It's an object that has a few descriptors of what this NFT is and it's really what you'll view on the web as an NFT.
00:10:15.130 - 00:11:10.814, Speaker A: So you can see here it's got a name, a description, an image, and say, some other attributes like strength or whatever you want to add to this game item. For example. Now, the problem with this contract is that this image has a location address, it's got a Https address and even OpenZeppelin itself says you'll notice that this item's information is included in the metadata, but that information isn't on chain. So a game developer could change the underlying metadata, changing the rules of the game. And there's been some famous examples of this happening because they're using location addressing rather than ensuring immutability and non fungibility of the NFT with content addressing. So one of them is this like rugs contract here. Someone created a full NFT line, it sold out, it was really famous.
00:11:10.814 - 00:11:53.494, Speaker A: And then they swapped out all the tokenuries, all the metadata for actual rugs. It was a rug pool basically. So pretty funny that one in retrospect. The other one was this F bubbles one, I won't swear, but they basically used their NFT collection to then advertise their next NFT collection. So they change whatever this bubble said to advertise their next collection. Which really, if you're buying an NFT, you want it to be non fungible or at least operate how you understood it to operate in the first place. And this is where you can really come into trouble with HTP addressing in NFTs.
00:11:53.494 - 00:12:49.038, Speaker A: So you need firstly, if you're not storing your metadata on chain, which let's be honest, it can get very expensive, especially if you're storing this on the Ethereum main net and particularly for large files as well. If you want audio, if you want video, if you want 3D objects as part of your NFTs, which you may well want to do with for example, metaverses or gaming examples, then this gets really prohibitively expensive to store on chain. So secondly you want to keep a fixed address for that content that ensures immutability. Now you can code in like Mutability to your contracts and actually we've got a whole tutorial on how you would go about that in the right way as well. But that's beside the point for now. But we want to ensure that this non fungible token stays non fungible. So that's where the IPFS content addressing protocol comes into its own with NFTs.
00:12:49.038 - 00:13:43.458, Speaker A: So these CIDs on IPFS guarantees immutable content referencing. And the third thing is you really need storage that's persistent and reliable. You want these NFTs to last forever, right? Not just like the next five minutes and then never be retrievable again. So this is where filecoin comes into play as the Decentralized Storage guarantees for that NFT metadata. Luckily though, you don't have to go around and create the whole IPFS thing and then store it on eight different storage providers and make storage deals with those storage providers instead. We've created a public good called NFT Storage, and this is designed for devs who want free multi generational decentralized storage. Firstly, you create this NFT Storage metadata, it will create a CID IPFS CID for you.
00:13:43.458 - 00:14:14.400, Speaker A: It will then make deals with at least eight storage providers to store that filecoin content and it will auto renew those deals in perpetuity. And the best thing about it is it's completely free. It's a public good, so there's no cost to using NFT storage. It's actually used by Openc and Magic Eden as well. We're storing about 45 million, I think it is, at current rates, NFTs on NFT Storage. So it's really like a standard. It's not just great swack, but it is that too.
00:14:14.400 - 00:14:58.780, Speaker A: So project demo, I'll see if I can hopefully change my screen, which looks like that's not what I meant to do. Awesome. So this is the project that I've kind of made. You can see I can just type in my name and it's kind of a customized personalized NFT. Now I'm doing this on the rinkby chain at the moment, but it also deploys to polygon or binance chain and that's via Morales. So I'm using Morales nodes to enable me to deploy to multiple ETH compatible chains with this. Now at the moment it says it's saving NFT metadata to NFT Storage and I just want to show you the mechanism behind that as well.
00:14:58.780 - 00:15:30.198, Speaker A: If I can find it, which hopefully I can. All right, yeah, not that one, not that one. Let's try this one. So this is creating the NFT metadata. This is my function that creates the NFT metadata. With NFT Storage it's really as easy as like importing that NPM library or that node library into my react front end, basically into my react front end. And I create the client the same way you do with anything with an API key.
00:15:30.198 - 00:16:05.274, Speaker A: And then I use await client store. You can see here the JSON that is going to be my metadata. So I've got a name, I've got a description, I've got an image and I'm just like encrypting that on my front end so I don't get any injections. But it's just an IPFS image basically and then know, storing whatever other attributes I want to with it. So it's really as simple as calling a function like this to create your NFT metadata. Let me just go back to it looks like it's actually minting. It's asking my wallet to mint.
00:16:05.274 - 00:17:09.640, Speaker A: I just want to go back here quickly because if I have a look here, I've actually created an IPFS image link, and I think my Internet's a bit slow, so my image isn't showing up. But you can see here, it creates I don't know if you can actually see the URL, but it's got a Https and then it's got a CID, which is like this big long letters and numbers here. And then it goes IPFS NFT storage link and the name of this image, which hopefully will come up soon. So this is our gateway. So IPFS by default doesn't actually work straight with Http, which makes sense, right? They're two different protocols. So IPFS needs to go through a Http gateway to be seen on regular web browsers. Now, luckily for us, browsers like Brave and Opera do this by default, so I can just type in IPFS and then the CID and Brave will automatically route that through a Http gateway for me.
00:17:09.640 - 00:17:35.774, Speaker A: But other browsers don't do this by default, and that's where you'd need to add on this gateway for it. So things like Chrome wouldn't do that by default. Don't know why that's not coming up. Let's not worry about it. So basically, after I've created my NFT metadata, it will return an IPFS CID for me, which I'm pretty sure it does. Let me just type in metadata instead. There we go.
00:17:35.774 - 00:18:16.570, Speaker A: I've got too many console logs anyway, so this is what gets returned from NFT storage. Hopefully you can kind of see that. So basically, Ipnft URL, and then that data that I stored with it. So attributes, description, image, and the name of my NFT. So I'm taking that IPFS URL, basically, and then I'm sending that because this is actually a JSON object, which I can verify by putting this into Brave browser as well, which also may not come up. There's an example from earlier. So there's one I did earlier, like the cakes.
00:18:16.570 - 00:18:52.874, Speaker A: Anyway, so this should come up. There we go. So this comes up as the JSON object here, and I just typed that straight in IPFS and then the CID into the Brave browser and it automatically shows you the JSON object that I put into that. That's kind of just an aside. Now, if I do click Mint, that's what I will send as my IPFS Uri to my contract. Sure. So now I can call lick mint.
00:18:52.874 - 00:19:14.200, Speaker A: Oh, look, there we go. My images finally showed up. Thank you. It does work. It's true. So now my NFT is Minting, and it's basically just calling that Mint my NFT function in the ERC 721 contract or 1155 contract. Taking that IPFS Uri and sending it through.
00:19:14.200 - 00:20:16.490, Speaker A: Think maybe I'm just about at time here, so I won't linger too long on this. You can actually go. And are we still note what are we seeing up there? It looks like sorry guys, looks like my screens are showing the wrong thing. So I'll just try and fix that's better. All right, so you can actually go and mint your own NFT. I've only got it on testnet, but you can go and mint your own on whatever chain you like. Just go to New York, filecoin NFT on the bitly link there, and you can go and mint your own if you've got some testnet.
00:20:16.490 - 00:21:17.054, Speaker A: What else have I got? All right, there are more DevTools than just storing NFT metadata, obviously, to IPFS and Filecoin. Some of the easy ones. If you want to get to know IPFS, you can install our IPFS desktop or IPFS companion for browsers and play around with IPFS and how it works that way. We also have IPFS, Http and Go client libraries, so you can go and have a look at those and use them in your projects as well. Fleek hosting is another cool one. So Fleek actually deploys your static websites on IPFS and then stores that to filecoin, and it's as easy as using, say, Netlify or Versaille, which you might be used to in the web two world and taking your site from GitHub and then deploying it through Fleek instead, which actually is on IPFS and filecoin. So actually making your DApps your decentralized apps more decentralized instead of using a centralized website.
00:21:17.054 - 00:21:41.742, Speaker A: Sorry, CICD. You could use fleek. So another cool project is Web Three storage. So this is for any content that isn't just NFT metadata. So files, folders, text, whatever else you might want to archive and store. Web Three storage is the right place to go for that. Another one I'll mention is textile powergate.
00:21:41.742 - 00:22:20.174, Speaker A: So this is a bit more advanced. It's a docker container wrapped around an IPFS and Filecoin nodes, and it gives you more granularity around how you want to access storage deals or access lib peer to peer, which is another thing in our ecosystem, or access IPFS. They also have some experimental bridges to other chains as well. And the other thing they do have is something called Threaddb. So a lot of people come to Web Three and they're looking for a relational database. Now, that's not an easy thing to achieve in Web Three and distributed storage, but there are people working on it. And one of those projects is Threaddb.
00:22:20.174 - 00:23:00.530, Speaker A: Another one of those projects that's working on a relational database is Orbitdb. So you can try that out. If you want to get in the weeds and work on something relational database, have a go at Orbitdb or Threaddb. There's also heaps more tools out there using IPFS or Filecoin or making them easy for you to use, I should say. So Ceramic is also using IPFS and Filecoin and that's a decentralized identity based solution for social ID portability lighthouse storage as well. Also makes it super easy to use IPFS and Filecoin. And another project in our ecosystem if you're looking for random numbers is Dran.
00:23:00.530 - 00:23:31.586, Speaker A: Love. So check that out if you're looking for random numbers. So some further resources as well here's that guide to Mutable NFTs that I was talking about earlier. So that's on Nftschool Dev, there's also more like really short tutorials that you can go through on proto school and get an idea of how that works. There's. Obviously the docs always look at the docs, right? And then our YouTube channel as well. And after this hackathon, if you do submit a project, you can go and apply for one of our grants.
00:23:31.586 - 00:24:12.020, Speaker A: If you want to keep building on your projects, that's probably some of our further resources. Get in touch. Of course, all our get in touch things be involved. You're already involved because you're all here, right? So congratulations on that. And I've also got finally, I just want to show you some project ideas. So these are some of the cool projects that are actually building on IPFS and Filecoin. So I did mention live here and audience earlier, Huddle One, if anyone's seen the Zoom like Web three version though, huddle One is also building on IPFS and like I said, Openc is using NFT storage.
00:24:12.020 - 00:24:56.616, Speaker A: There's a couple of cool projects at the top there that are from ETH Amsterdam that, well I really liked. So Detris, they were creating a whole tetris game basically and saving each piece as an IPFS CID and then reconstructing that and making an NFT out of that game. So I felt like that was like a really clever use as well of things to do. But there's so many more things you could do with this. So you could create a video streamer, you could create a YouTube wrapper with IPFS which might be kind of current at the moment, distributed metaverse. There's heaps of project ideas and past winners on our hackathon filecoin IO site. So if you want to get some inspiration, go and check out that site and otherwise thank you everyone.
00:24:56.616 - 00:25:03.000, Speaker A: Appreciate your attention. And I'll be around all weekend. So if you want to ask us questions, come by the booth.
