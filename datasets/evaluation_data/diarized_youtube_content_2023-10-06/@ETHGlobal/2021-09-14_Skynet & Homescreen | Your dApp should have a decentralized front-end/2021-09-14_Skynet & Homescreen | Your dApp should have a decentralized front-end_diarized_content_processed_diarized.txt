00:00:17.210 - 00:00:55.340, Speaker A: All righty, welcome, everybody. This is our Skynet and Home screen sponsor workshop titled Your DAP should have a Centralized Front End. And here we have Daniel to be leading it and teaching you guys all of his amazing knowledge. He said that he's comfortable with you guys just kind of unmute and asking questions. But please do just be a little bit cautious about where he is in his presentation because who knows, he might just answer your question. And if you don't feel comfortable unmuting, you can just shoot them in the chat and then I'll check them out. Okay, Daniel, off to you.
00:00:55.710 - 00:01:12.318, Speaker B: All right, thanks so much. Yeah, so I'm going to kind of have a set up where I'm going to be talking a little bit about Skynet and then jumping into a live demo. And I've never done this in 30 minutes before, so we're going to try to go fast and we're going to.
00:01:12.324 - 00:01:13.854, Speaker C: See how it all pans out.
00:01:14.052 - 00:01:58.510, Speaker B: So, yeah, this talk is called DFI needs decentralized front ends. Getting started with Skynet and home screen. I am Daniel Helm, developer Evangelist at Skynet Labs, where we believe in a vision for a decentralized web. We want Skynet to be the foundation for deploying and accessing decentralized web apps. I don't think with this audience, I need to make the case for why decentralization is really important for a bunch of ethereum developers. But as the Web Three grows to really engage wider audiences, I think we really need platforms and protocols that are, one, easy for developers to learn, and two, don't require users to have special.
00:01:58.580 - 00:02:03.280, Speaker C: Software in order to onboard into the decentralized web.
00:02:03.730 - 00:02:27.446, Speaker B: So our solution for that is Skynet. We try to fill that gap as a decentralized storage protocol for the Web. To better understand how, we need to kind of look at the blockchain storage project that underpins Skynet, which is called Saya. So Saya was first launched in 2015. I believe it was founded in 2014. And a way to see SIA is.
00:02:27.468 - 00:02:29.570, Speaker C: Like Airbnb for data storage.
00:02:29.730 - 00:02:38.186, Speaker B: The people who need storage space on the Internet can be renters, and then.
00:02:38.208 - 00:02:41.660, Speaker C: There'S hosts that then can provide that storage space.
00:02:42.270 - 00:02:58.062, Speaker B: Payment happens in saya, coins, and there's a lot to saya, but in the end of the day, for a small talk, I'm just going to say it's fast, it's secure, it's affordable, and it's really actually built for personal storage, not.
00:02:58.116 - 00:03:00.210, Speaker C: Sharing things on the open web.
00:03:00.360 - 00:03:22.438, Speaker B: And so Skynet comes in as kind of a layer two to build on top of that. And we have a network where we have the Saya network over here, where we have all these storage pools and hosts or larger infrastructure supplying that data on the site network. And then over here we have what.
00:03:22.444 - 00:03:24.230, Speaker C: We call Skynet portals.
00:03:24.390 - 00:03:37.806, Speaker B: And so this can be a public portal where users can all share the same infrastructure to save and access their files, or it can be a private one that you run on your own machine because it's all open source and.
00:03:37.828 - 00:03:40.750, Speaker C: That'S the way that you're going to interact with the SIA network.
00:03:41.970 - 00:03:55.438, Speaker B: But the great thing about Skynet is that when you're interacting with the SIA network through a portal, you're not having to deal with things like a cryptocurrency with a wallet, with a big consensus file on your machine.
00:03:55.534 - 00:03:57.940, Speaker C: Your users don't have to worry about any of that.
00:03:58.710 - 00:04:24.986, Speaker B: So what is it like to use Skynet? Well, you can go to Sciasky. Net and there's an uploader right there. You can drag and drop some files. And once you do so, you will return back a Skylink is what we call these. And what this is, is it is essentially kind of like a hash of your file. You have this URL that we call the Skylink. And when you use that, that is.
00:04:25.008 - 00:04:29.354, Speaker C: A reference to your immutable file as stored on Skynet.
00:04:29.482 - 00:04:37.470, Speaker B: And so you can plug that into any Skynet portal and you have kind of a cryptographic guarantee that the file that you're getting back matches the file.
00:04:37.550 - 00:04:40.050, Speaker C: That the original uploader uploaded.
00:04:42.070 - 00:05:21.546, Speaker B: So what are some use cases for this? Well, we've got all sorts of things that we've seen built, and some of them we're hoping to see more things built, which is why we're excited to be sponsoring things like ETH online. We've seen people building fully decentralized web apps. We've seen Skynet used as persistent storage for decentralized and peer to peer applications like Gundb. Or we've seen decentralized Android app stores. We've seen it used for off chain storage for blockchains. NFTs is a good example of this. We've also seen it used for hosting censorship resistant websites.
00:05:21.546 - 00:05:26.602, Speaker B: And that's one of our big polls right now for thinking about decentralized front.
00:05:26.676 - 00:05:29.730, Speaker C: Ends for DeFi applications.
00:05:30.230 - 00:05:51.958, Speaker B: And the last thing we've seen it used for that I think is pretty interesting is folks running server side processes that might scrape some data, but then end up storing kind of process data on Skynet in a predictable location as a way to kind of publish that data. And other user apps can then kind.
00:05:51.964 - 00:05:53.846, Speaker C: Of pull in that data and it.
00:05:53.868 - 00:05:58.154, Speaker B: Becomes this kind of like way of having a decentralized API, more or less.
00:05:58.192 - 00:05:59.734, Speaker C: We don't request it from the original.
00:05:59.782 - 00:06:02.518, Speaker B: Server, but from Skynet where that server.
00:06:02.534 - 00:06:03.900, Speaker C: Is publishing the data.
00:06:05.010 - 00:06:50.394, Speaker B: Okay, so all told, our goal is for any developer to be able to build a D web app that anyone can use. So that's my really quick Skynet spiel. I'm going to now transition into the crux of the talk, where, you know, DeFi needs decentralized front ends. So we know that DeFi is revolutionizing how users interact with finance, giving them all sorts of control and ownership over digital assets that they haven't had before. And you can just pull up their website and boom, you're trading tokens, you're providing liquidity. You're an ape. You're degenning all the rest of it.
00:06:50.394 - 00:06:59.774, Speaker B: But what happens if the project gets hacked and their front end is compromised? We know that the Ethereum layer is secure, right? But what if the actual way to.
00:06:59.812 - 00:07:02.410, Speaker C: Access that becomes unusable?
00:07:02.490 - 00:07:19.206, Speaker B: Not all of us are able to open up Ether scan and interact directly with contracts. What if a project goes broke, it introduces the paywall or advertisements on that front end? Or what if a project is required by its local government to remove your.
00:07:19.228 - 00:07:21.590, Speaker C: Favorite tokens or your favorite feature?
00:07:22.490 - 00:08:09.060, Speaker B: Well, DeFi needs decentralized front ends. We're trying to build that ability to quickly deploy and have users quickly access these decentralized front ends with Home Screen. And so Home Screen is the other big thing that we're talking about for this hackathon. And what it is, is a decentralized application. So it's stored on decentralized storage that lets users log in with a fully decentralized identity and access versioned saves of their favorite applications. And so I'm going to kind of just maybe really quickly show what Home Screen looks like and how to interact with it. You would go to Home Screen, I'm already logged in but there might be a button for you to create a MySky account.
00:08:09.060 - 00:08:37.118, Speaker B: And then once you're logged in, you have something like this and you can add the Skylink of the application you're interested in, add it to your home screen and what that will do is it will save it in your user spaced personal data area and then add that icon onto your home screen. So now you kind of have control.
00:08:37.284 - 00:08:41.354, Speaker C: Over this pinned data on a decentralized storage network.
00:08:41.482 - 00:08:43.390, Speaker B: So I can now open that up.
00:08:43.460 - 00:08:44.894, Speaker C: And we'll see that this is being.
00:08:44.932 - 00:08:57.118, Speaker B: Accessed through the Sciasguy net portal and at any time there's information stored in that where I'm able to actually upgrade this. And so I installed an old version.
00:08:57.214 - 00:09:02.918, Speaker C: And I'm able to check for updates and update to the newest uniswap that.
00:09:03.004 - 00:09:27.246, Speaker B: The publisher of this application has made available. Okay, I update. I realize something bad happened in the update. Well, I can come back here, view details and then I can essentially downgrade to an older version and save that. And so that way I know that I've got this kind of version history where I own every single build and I am secure in the fact that.
00:09:27.268 - 00:09:30.640, Speaker C: I can always access these things in a fully decentralized way.
00:09:32.130 - 00:09:36.094, Speaker B: All right, so that's Home Screen, we're really excited about it and right now.
00:09:36.132 - 00:09:45.346, Speaker C: We'Re really excited about getting apps deployed onto Home Screen. And that is why we are putting.
00:09:45.448 - 00:10:25.966, Speaker B: Up a Skynet prize for the hackathon. We are putting up a 10,000 saya, coin pool for anyone that if their project ends up being deployed on Skynet with Home Screen support, you are automatically entered into this 10,000 Psyacoin pool. So no matter what you're building, what other projects you're roping in that is eligible for you. Additionally, we're going to have $2,000 for the project that we consider kind of like the best. And so that could mean a lot of things. We're leaving it kind of open, but we really want to see projects understand the importance of a decentralized front end.
00:10:26.068 - 00:10:31.460, Speaker C: And advocate for that for other projects to be deploying in a decentralized way.
00:10:32.790 - 00:10:56.026, Speaker B: So we're doing kind of shares of the prize pool. There's a few other details here that you can read know. We have a GitHub action that I'm going to show later in the talk. There's a little save to home screen button that can go in your GitHub repo. And then we also have support for decentralized domain names with ENS and also with handshake HNS. And so if you implement either of.
00:10:56.048 - 00:10:59.260, Speaker C: These, you'll get an additional share of the price pool as well.
00:11:01.310 - 00:11:31.186, Speaker B: Okay, so that is my quick introduction to everything. I am not watching the chat, so if someone wants to ping me or interrupt me, that's good. At this point, what I'm going to do is a speed run. So what I want to do is show real quickly what it looks like to deploy an app on Skynet, how to set up automated deployments so that every time you push domain in your GitHub repo, it will kick off a deployment to Skynet. And lastly, how to get your project.
00:11:31.288 - 00:11:32.514, Speaker C: Working with home screen.
00:11:32.632 - 00:11:39.814, Speaker B: And so by the end of this demo, which is now going to be about 18 minutes, we're going to hopefully get all three of these things done.
00:11:39.852 - 00:11:44.330, Speaker C: To finish up the Skynet prize portion of the hackathon.
00:11:45.630 - 00:11:58.858, Speaker B: So first off, let's talk about deploying an app to Skynet. Well, first you're going to need an app to deploy. So before we actually start deploying it, let's go to uniswap and say we're.
00:11:58.874 - 00:12:00.720, Speaker C: Going to fork this.
00:12:02.770 - 00:12:20.274, Speaker B: And make it a home screen application. So you'll notice a few places here, I've cheated a little bit for the sake of time. But one thing I've done is already cloned the uniswap.
00:12:20.322 - 00:12:23.506, Speaker C: But I could in theory say clone.
00:12:23.698 - 00:12:25.734, Speaker B: But what I haven't done is I.
00:12:25.772 - 00:12:37.066, Speaker C: Haven'T added this as a remote. So what I will say here is get remote, add DGH. All right.
00:12:37.088 - 00:12:38.874, Speaker B: So now I have this as an.
00:12:38.912 - 00:12:41.180, Speaker C: Upstream ready to go.
00:12:41.630 - 00:12:53.118, Speaker B: And so with uniswap, typically the first two things you're going to be able to do is type in yarn to install your dependencies. And then you can write yarn build.
00:12:53.204 - 00:13:08.898, Speaker C: To then build that thing. So I am going to kick that off in just a second. Let me open up tmux here and.
00:13:08.984 - 00:13:10.614, Speaker B: Down in the bottom here, I will.
00:13:10.652 - 00:13:19.142, Speaker C: Go ahead and do a yarn build and kick that off. But I have cheated and done a.
00:13:19.196 - 00:13:21.318, Speaker B: Yarn then yarn build already that I.
00:13:21.324 - 00:13:32.540, Speaker C: Will open up here to show what it looks like to deploy this built application onto Skynet with no adjustments, modifications or anything.
00:13:32.990 - 00:13:56.754, Speaker B: So I will go to sayasky net go to? Do you want to upload a web app or directory and drag and drop my build folder? Okay, this is kind of a naive way of uploading and deploying your application, but it works. And I just kind of want to show that any folder that has a index HTML file is going to work.
00:13:56.792 - 00:14:00.150, Speaker C: For deploying a web application on Skynet.
00:14:01.930 - 00:14:33.310, Speaker B: And so static deployments are fully supported. And so this is a single page application built in react, and it's more than happy to live on Skynet. But we've also rolled out support for Gatsby and full react router support. If you've developed with IPFS or with Skynet before, you know that with react router, you have to have these URLs that have like little hashes in them to make it happy. But now we've got full support for.
00:14:33.380 - 00:14:39.940, Speaker C: Setting up custom routing as well. So ask me about that in the discord if you're interested in that.
00:14:41.030 - 00:14:55.174, Speaker B: All right, so we have deployed an app, right? We built it. Our build folder has an index HTML file, which I'm sure is too small to read on the screencast, but when we upload it, we get back our.
00:14:55.212 - 00:14:57.240, Speaker C: Link and that's that.
00:14:58.330 - 00:15:01.474, Speaker B: Okay, well, let's get something more exciting going.
00:15:01.612 - 00:15:06.570, Speaker C: Let's look at making automated deployments using a GitHub action.
00:15:09.390 - 00:15:27.146, Speaker B: So the goal here is going to be looking at how to create a GitHub action for Skynet. And so, like everything I'm talking about in the talk, you can go to our developer docs and there's a walkthrough.
00:15:27.178 - 00:15:31.060, Speaker C: On kind of exactly how to do it. Make this a little bit bigger here.
00:15:31.830 - 00:15:39.374, Speaker B: And so if you go to Docs sciasky. Net, we will have info on everything being talked about.
00:15:39.432 - 00:15:45.030, Speaker C: But most importantly, we have one called Deploy to Skynet GitHub action.
00:15:46.490 - 00:15:48.966, Speaker B: So if I click on that, it's going to give me all sorts of.
00:15:48.988 - 00:15:50.870, Speaker C: Information about GitHub actions.
00:15:51.770 - 00:15:57.510, Speaker B: And at the bottom here, we have an example that we can just copy.
00:15:57.590 - 00:16:00.906, Speaker C: Paste and it's entirely before I do.
00:16:00.928 - 00:16:19.154, Speaker B: That, though, now that we know kind of where this is, I want to show what a GitHub action is just in case anyone watching is not familiar with them. In a project, you can kind of go to your actions area and it will show you kind of the things.
00:16:19.192 - 00:16:21.662, Speaker C: That you've installed in your project that are actions.
00:16:21.726 - 00:16:23.538, Speaker B: And so let's see what those are.
00:16:23.624 - 00:16:28.900, Speaker C: In our Uniswap interface that we have right here.
00:16:31.850 - 00:16:46.586, Speaker B: These actions live under a folder called GitHub workflows. And we see that we have all sorts of things that the Uniswap team has already kind of got working with GitHub for doing automation. We don't really care about these, so.
00:16:46.608 - 00:16:54.720, Speaker C: Let'S just go ahead and actually delete those to make sure that we are running a little bit faster here.
00:16:55.490 - 00:17:01.194, Speaker B: All right, so now we have nothing in our workflows. Let's go ahead and create a file.
00:17:01.242 - 00:17:15.730, Speaker C: Called maybe just Deploy to Skynet. Great. And in this, we can then come back, copy our action.
00:17:17.590 - 00:17:25.286, Speaker B: And paste it. So what's happening here? Well, let's try to look through the code real fast and kind of get.
00:17:25.308 - 00:17:26.646, Speaker C: A sense of what's going on.
00:17:26.748 - 00:17:37.466, Speaker B: We have a GitHub action called Deploy to Skynet. It's going to occur, the action will occur on push to the main branch. It's going to do a job called.
00:17:37.568 - 00:17:39.546, Speaker C: Build, where it is going to be.
00:17:39.568 - 00:18:03.102, Speaker B: Running this thing on Ubuntu and take the following steps. It's going to check out our code. It's going to make sure nodes all set up with version 16. It's going to run yarn just like we did locally. It's going to run yarn build just like we did locally. And then it's going to jump into this Deploy to Skynet action. And so what we're doing is we're going to upload our build directory.
00:18:03.102 - 00:18:14.050, Speaker B: We've labeled it here, and we're also going to pass in two variables to this action. One's, the GitHub token. We can kind of ignore that. And the other one is our Registry Seed.
00:18:14.130 - 00:18:17.154, Speaker C: So we have this thing called skynet registry seed.
00:18:17.282 - 00:18:22.694, Speaker B: And this is going to be used as basically our private key for being.
00:18:22.732 - 00:18:26.566, Speaker C: Able to update what we call the Resolver Skylink.
00:18:26.678 - 00:18:39.870, Speaker B: And so when we saw earlier that we were able to install an application on home screen and then update that thing, it was this Resolver Skylink that was sitting underneath. And what that is, is that we can have a single Skylink that points.
00:18:40.020 - 00:18:45.520, Speaker C: At our Immutable Skylinks. So let's go ahead and save this.
00:18:48.230 - 00:18:51.074, Speaker B: And we now need to come into.
00:18:51.192 - 00:18:55.358, Speaker C: Our repo and set that GitHub secret.
00:18:55.534 - 00:19:01.750, Speaker B: So we can go to settings, come down to secrets, make a new repo secret.
00:19:02.410 - 00:19:09.030, Speaker C: And that one was called Skynet Registry Seed.
00:19:09.930 - 00:19:12.700, Speaker B: And I'm going to actually hide this.
00:19:13.710 - 00:19:18.300, Speaker C: So that I can keep my deploy working later on.
00:19:29.410 - 00:19:31.834, Speaker B: But I have now made a repository.
00:19:31.882 - 00:19:38.206, Speaker C: Secret called Skynet Registry C. Okay, so.
00:19:38.388 - 00:19:54.280, Speaker B: We'Re automating our deployments. We've come up with a way to add a GitHub action. And we know that that GitHub action is going to both upload our build folder and then update this Resolver Skylink to point to that latest Skylink. So let's see what this looks like.
00:19:54.810 - 00:20:02.330, Speaker C: On this side over here. We can go ahead and oh, my goodness.
00:20:03.710 - 00:20:06.630, Speaker B: Come back to our uniswap interface directory.
00:20:06.790 - 00:20:09.580, Speaker C: And I can say, get add all.
00:20:10.990 - 00:20:13.162, Speaker B: And we should be deleting the old.
00:20:13.216 - 00:20:17.870, Speaker C: Ones and making a new workflow so I can say, git commit.
00:20:21.890 - 00:20:41.894, Speaker B: Deploy to Skynet action. And then once I have done that.
00:20:41.932 - 00:20:49.110, Speaker C: I can say, then get push to repo.
00:20:49.770 - 00:20:50.966, Speaker B: Oh, I'm in Main.
00:20:51.068 - 00:21:02.170, Speaker C: Whoops. That's fine. Let's make it work this way. Get push to DGH, my main branch.
00:21:11.840 - 00:21:13.416, Speaker B: All right, so now I have pushed.
00:21:13.448 - 00:21:25.410, Speaker C: This code to the DG helm repo. So let's see what happens. I close that. No, here it is. Then come back here.
00:21:26.980 - 00:21:40.036, Speaker B: We can see I've made one commit. And you'll notice there's this little kind of golden icon here that means an action has been kicked off. So let's go look at our actions. We can see that our previous actions are now gone, but we now have.
00:21:40.058 - 00:21:42.496, Speaker C: One called Deploy to Skynet action.
00:21:42.608 - 00:21:48.356, Speaker B: So what this is going to do is go through all the same steps.
00:21:48.388 - 00:21:52.280, Speaker C: That we made in our Deploy to Skynet YAML file.
00:21:53.180 - 00:22:02.908, Speaker B: I happen to be down to eight minutes and know that Skynet deployment after building is going to be about five more minutes. So let's go ahead and take a.
00:22:02.914 - 00:22:17.248, Speaker C: Look at a different repo where I know that this has happened on. I can click Go to Skynet and.
00:22:17.254 - 00:22:28.580, Speaker B: We'Ll see that once something has built, then when it gets deployed, we get a Skylink back. And so this is what we can access that immutable file directly.
00:22:28.920 - 00:22:32.272, Speaker C: But then it says that we've updated a registry entry.
00:22:32.336 - 00:22:39.784, Speaker B: And so that's what's going to make this Resolver Skylink that stays the same across all these deployments point to the.
00:22:39.822 - 00:22:42.516, Speaker C: Latest Deployed to Skylink.
00:22:42.708 - 00:22:45.764, Speaker B: So I can access that here and.
00:22:45.822 - 00:22:49.550, Speaker C: We have a uniswap interface ready to go.
00:22:50.320 - 00:23:06.544, Speaker B: Okay, I'm going to keep this open in the background as we now step from automate the deployments to an Add to Home Screen button. So the last thing that we're interested in doing is making sure that users are able to find this application and.
00:23:06.582 - 00:23:08.210, Speaker C: Add it to their own home screen.
00:23:08.660 - 00:23:31.576, Speaker B: And so there's a few ways of doing this, but the one that we're encouraging developers to do for the hackathon is in your GitHub repo. Where you submit for the hackathon is adding a button that looks like this. And then when a user clicks on this Add to Home Screen button, it will open up Home Screen, attach on your Skylink and automatically come up with.
00:23:31.598 - 00:23:35.850, Speaker C: This way to save or update the application.
00:23:36.380 - 00:23:46.364, Speaker B: All right, so how do we add this button? Well, let's go back to our documentation, which is in one of these tabs, and come up to Home Screen.
00:23:46.562 - 00:23:50.784, Speaker C: Add Home Screen support to an app here.
00:23:50.822 - 00:23:59.184, Speaker B: You'll probably end up finding the video to this workshop. And then you'll see some steps that walk through exactly what we've done.
00:23:59.222 - 00:24:01.216, Speaker C: So we've made sure our site works.
00:24:01.318 - 00:24:10.656, Speaker B: When deployed to Skynet. We've set up the Deploy to Skynet GitHub action, which will give us a Resolver Skylink. And then once we have the Resolver.
00:24:10.688 - 00:24:12.420, Speaker C: Skylink, we need to do two things.
00:24:12.570 - 00:24:23.336, Speaker B: We need to add it in our manifest file. So that way we know on older deployments what Skylink it is that we're going to look for for updates. And then we want to add that.
00:24:23.358 - 00:24:25.880, Speaker C: Home Screen button on the project threeme.
00:24:26.540 - 00:24:34.124, Speaker B: Just to be confusing, I'm going to do number four before number three. So let's go ahead and grab the button code. We will jump back over in our.
00:24:34.322 - 00:24:47.836, Speaker C: Code editor, come down to the README after all these other buttons, I will go ahead and paste in the code from the documentation.
00:24:47.948 - 00:24:49.264, Speaker B: And you'll notice that there's a little.
00:24:49.302 - 00:24:52.032, Speaker C: Bit here where we need to put in the Skylink.
00:24:52.096 - 00:24:54.436, Speaker B: So let me grab that Skylink from.
00:24:54.538 - 00:24:57.990, Speaker C: Our Resolver Skylink here.
00:24:59.080 - 00:25:03.510, Speaker B: We don't need the protocol, just the actual Skylink part.
00:25:05.260 - 00:25:07.290, Speaker C: Paste that and save.
00:25:07.980 - 00:25:09.544, Speaker B: Then the other thing we're looking for.
00:25:09.582 - 00:25:11.124, Speaker C: Was that manifest file.
00:25:11.172 - 00:25:37.968, Speaker B: And so lots of frameworks, front end frameworks come with this automatically here something usually called manifest JSON or something web manifest. But if you find that file, it is a JSON file full of information about stuff that's great for building something like home screen. Icons, names, description. We're going to go ahead and add one more field here, and we're going.
00:25:37.974 - 00:25:46.550, Speaker C: To call it Skylink. And we're going to put that Resolver Skylink there. Let me close this so you can see.
00:25:47.880 - 00:25:54.536, Speaker B: So now, even though this is going to be an old build at some point, our users will always know where.
00:25:54.558 - 00:26:14.668, Speaker C: To look for updates. All right, so let's go ahead and say make sure we've only modified it, the README and that let's say get add all get commit screen button. Change me. Okay, great.
00:26:14.834 - 00:26:16.892, Speaker B: So now that I have made that.
00:26:17.026 - 00:26:23.200, Speaker C: Simple push, I will come back to the repo.
00:26:26.580 - 00:26:28.128, Speaker B: And down here at the bottom, we.
00:26:28.134 - 00:26:36.790, Speaker C: Have an add to home screen button that I'm able to click and it will pop up and find it on home screen to add to home screen.
00:26:38.600 - 00:27:05.192, Speaker B: Okay, so that is the fastest version of this talk I have ever given. I hope it wasn't crazy fast. If you needed more information, please check out the Skynet guide to learn more. Just about using Skynet, the developer guide for building things. We have SDKs in a lot of languages. If you want to work more low level with Skynet, we also have a wonderful community. I want to really highlight our Discord.
00:27:05.192 - 00:27:16.800, Speaker B: Of course, there's the ETH online Discord as well, so come talk to us in our sponsor channel. But if you want to really get deep in the Skynet scene, that is the place to go. We have a lot of really great.
00:27:16.870 - 00:27:19.920, Speaker C: Developers that are really generous with their time and knowledge.
00:27:20.420 - 00:27:22.484, Speaker B: So I've saved only two minutes for.
00:27:22.522 - 00:27:25.190, Speaker C: Questions, but let's see what we've got.
00:27:35.050 - 00:28:16.920, Speaker A: Okay, it doesn't look like there's any questions in the chat or anything being brought up right now. So I'd really like to thank you, Daniel, for coming out and teaching all of us a little bit more about Skynet and home screen. And I really encourage you guys to reach out to Daniel and other developers in the sponsor channels on Discord and obviously connect with Skynet on their social media platforms as well. Kate, thank you so much. Have a great day, everybody. Actually, I think there is a question there from Lucas in the chat that just popped up if you want to answer.
00:28:18.090 - 00:29:00.494, Speaker B: Okay, I see it. How do you get token for deploying size of space? Okay, so Skynet is built on kind of a freemium model, and so if you go to Sciasky. Net, you can anonymously upload all day. We only have a kind of 90 day guarantee for uploads that happen if you don't have an account, but you can spin up your own account and pay for it in Sciacoin if you're not logged in, the limit for uploading is 1GB. If you have an account or running your own web portal using some other place with accounts, that limit is 100GB. At the moment, we're kind of making sure 100GB is stable, but we plan.
00:29:00.532 - 00:29:17.510, Speaker C: To keep increasing that cap, too. All hope that answers the question. All right, great.
00:29:18.840 - 00:29:30.080, Speaker A: Okay, perfect. Again, thank you so much, everybody. Have a really great day. And contact skynet on discord.
