00:00:08.170 - 00:00:22.346, Speaker A: Welcome to the Compound grants Workshop for ETH online 2023 Compound Grants is excited to be a part of ETH Online this year. We're excited to see everything that you all build in the hackathon. Let's get started. I'm Adam.
00:00:22.378 - 00:00:43.642, Speaker B: I'm the developer relations lead at Compound Labs. I'm here to help out with Ethereum related development projects that use the Compound Protocol. You can find me on Twitter and Discord. I'm mostly in the development channel of the Compound Discord. I can answer your technical questions there. Compound Grants is sponsoring the hackathon this year, and we're really excited to be at this event.
00:00:43.776 - 00:00:45.674, Speaker A: We're ready to see all the cool.
00:00:45.712 - 00:01:18.822, Speaker B: Things that you're all building and ready to help out with Compound related projects. And if you want, you can apply to Compound Grants. We can tell you a bit more about that if you're interested and help you get your application accepted. So in this presentation, I'm going to tell you about the hackathon bounties for this year. And if you're not familiar with Compound, I'll tell you about the Compound Protocol. I'll tell you about the key differences between the protocols V Two and V Three. V Three is the latest version that has new deployments that came out this year and a little bit of last year as well.
00:01:18.822 - 00:02:03.134, Speaker B: I'll tell you about protocol governance, and I'll also show you some developer resources so you can get started building right away. All right, Compound Grants has a Pounty prize this year of $5,000 USD to the best integration of Compound Three. The rules are that your project must interact with a smart contract or with JSON RPC, with any instance of the Compound V Three protocol, or be a supportive project that is specifically created for the compound community's use. All right, a little bit about Compound. I work at Compound Labs, and we're the authors of the Compound Protocol. It's a protocol made up of several smart contracts running on Ethereum mainnet since 2018. And our mission is to create efficient algorithmic money markets.
00:02:03.134 - 00:02:55.300, Speaker B: What gets me excited to work in the DFI space is that we author and continue to steward decentralized, free, and open crypto tools for everyone with an Internet connection, including the banked, the underbanked, and the unbanked. And if you think about it, that's a huge amount of market to serve globally. Anyone on Earth with a smartphone and an Internet connection can use DFI and can use Compound. So historically, we've seen interest rates for suppliers to the protocol as high as 15% APY on USDC, as well as other supported assets. And I love that. What we're doing is different from TradFi because DeFi systems like the Compound Protocol are transparent and they're voluntary with public ledgers where code is law, and with DeFi, you instead get decentralization and transparency, unlike centralized banking and financial systems. That's what gets me excited to work in DFI and also in the Ethereum space.
00:02:55.300 - 00:03:40.194, Speaker B: What is the compound protocol? Simply put it, is crypto asset money markets and we refer to it as the Compound Protocol. It runs on Ethereum, as well as several L2 S that you can see here. It's decentralized, which I will explain a bit more shortly. The main use case is that it allows users to earn interest on their cryptocurrencies or permissionlessly borrow other cryptocurrencies. So instead of an asset like Ethereum or USDC sitting idle in your wallet, you can supply it to the Compound Protocol and earn a varying interest rate. Users that supply crypto collateral and borrow a different crypto asset against their collateral. And the interest that suppliers earn is driven by the interest that borrowers pay.
00:03:40.312 - 00:03:41.906, Speaker A: Those are the two basic uses of.
00:03:41.928 - 00:04:23.306, Speaker B: The Protocol for everyone earn interest on your crypto or borrow other crypto assets. The Protocol can only support crypto assets that are tokenized on Ethereum or other EVM chains as ERC Twenty S. It allows suppliers to earn a variable interest rate on their assets. An individual that uses an app like the ones listed on the Compound homepage or their own code, can use every feature of the Protocol. Developers can build their own apps that use the Protocol as interest earning infrastructure. Users or organizations can use interfaces to earn interest to borrow assets or participate in Protocol governance. So use cases that we've seen are crypto wallet applications.
00:04:23.306 - 00:04:37.730, Speaker B: They use the Protocol to offer interest earning for their users and also any business that holds funds for a period of time. They use the Protocol to earn interest for that period to create some income instead of letting those assets sit idle.
00:04:38.550 - 00:04:39.478, Speaker A: So I'm going to give you a.
00:04:39.484 - 00:05:11.550, Speaker B: Little bit of an example here. Let's say you use one of the many interface applications for the Protocol. You can supply assets to compound. When a supplier supplies, they get a fixed amount of C tokens, which you can think about as a one one asset that is representing the underlying that you have in the Protocol. In V Three, c tokens are only minted for the supplying the base asset. They're not minted when you supply collateral. They're one one and they rebase.
00:05:11.550 - 00:05:15.066, Speaker B: So when you supply, you have this.
00:05:15.108 - 00:05:16.574, Speaker A: Balance of C tokens in your wallet.
00:05:16.622 - 00:05:53.070, Speaker B: And that balance will go up over time automatically. And you can redeem those C tokens for your underlying asset at any time. I'll give more differences between compound V Two and V Three in a later slide. Those assets are stored in smart contracts that no individual controls. There's an onchain government system that will be covered later. C tokens are redeemable at any time. Users can supply for as little as one EVM block and interest accrues every EVM block, which is about 12 seconds nowadays on Ethereum.
00:05:53.070 - 00:06:25.378, Speaker B: This enables on demand supplying and redeeming from the Protocol. No need to wait for a lockup period. You can earn interest for supplying to the Protocol for even just 1 minute. The other big use case is over collateralized borrowing of assets. So a user can supply a collateral asset before they borrow. They can only borrow up to a certain amount of USD value of their collateral. So the token value of their collateral is always worth more than their total borrow value relative to USD.
00:06:25.378 - 00:07:13.554, Speaker B: So an example would be to supply a collateral like wrapped bitcoin or wrapped ether or one of the many others, and borrow a smaller value of Dai or USDC such that your account is over collateralized. The limit of the borrow depends on the collateral asset. There is a percentage called the collateral factor, which is set for each individual collateral token type. Wrapped ether and wrapped bitcoin have different collateral factors. Those factors are chosen by the community members and are selected based on perceived risk of the value fluctuation. In order to borrow, a user must supply a supported collateral asset, and they can then borrow. In V three, there is only one asset that can be borrowed from each instance of Comet.
00:07:13.554 - 00:08:13.094, Speaker B: So currently there are deployments of USDC and wrapped ether as the base asset. So you can supply a collateral and borrow those two assets, or you can earn interest on those two assets, only those two assets. So you can't earn interest on collateral and V Three, but you can earn interest on the base asset. If an account becomes under collateralized, like when the USD value of the collateral goes down or too much borrower interest accrues for that borrowing account, the user's collateral can be liquidated and a liquidator will perform a liquidation. By calling these two methods on the protocol, they can call Absorb and then buy collateral. So what happens is the user's collateral is taken over by the protocol, their borrow is repaid by the protocol reserves, and their collateral is sold off at a discount to a liquidator that can then swap it on a Dex for a profit. So supplying only is safer than borrowing.
00:08:13.094 - 00:08:49.320, Speaker B: You can't get liquidated if you only supply. There's much less risk involved. When a user only supplies and does not borrow, liquidators keep the protocol safe and collateralized they are incentivized to do so. So borrowers that become under collateralized are subject to liquidation of their account at any time. They will lose all of their collateral, but they will get some of the base asset back after the liquidation process ends. Due to the autonomous nature of the protocol, the liquidation system is much harsher than traditional finance. There's no negotiating, there's no delinquent repayments allowed with the Onchain code.
00:08:49.320 - 00:09:21.994, Speaker B: The latest version of compound is Compound Three. It is more gas efficient and capital efficient than compound V Two. It streamlines the most popular use case of compound V Two, which was to supply a volatile priced asset like wrap bitcoiner or Ether, and then to borrow a stable price asset like USDC or Dai. This version has additional safety for liquidations. It has a higher threshold for the same collateral factor. So you can borrow more with the same collateral. One asset can earn interest or be borrowed per deployment.
00:09:21.994 - 00:10:06.122, Speaker B: That's called the base asset and it makes opening positions in V Three have less stacked risk than V Two. Currently, there are seven deployments of Compound Three. There are deployments with USDC and WETH as the base asset and that is on Ethereum Main Net. And also on base. There are deployments on other chains like Polygon and Arbitrum, and there are many more to come soon this version of the protocol is able to be deployed on any EVM chain. The key differences between V Two and V Three are that V Three has less risk, less gassiness and can be deployed anywhere that solidity is supported. V Two you can borrow any supported asset, but V Three you can only borrow the one single base asset per deployment of Comet.
00:10:06.122 - 00:10:18.930, Speaker B: Compound v. Two and v. Three. Coexist. V Two is not going anywhere. However, there is a deprecation going on by the community at the moment. You can follow along with that at the forums at www dot comp XYZ.
00:10:19.430 - 00:10:21.346, Speaker A: Basically, what the community is doing is.
00:10:21.368 - 00:10:45.018, Speaker B: They'Re lowering the protocol rewards for V Two and also incentivizing users to move from V Two to V Three. So here are some key differences between Compound V two and Compound V three. In Compound V Two, C tokens are minted to the suppliers of any asset and C tokens are about a 50 to one ratio and the C tokens can be redeemed for more underlying as.
00:10:45.104 - 00:10:46.890, Speaker A: The block height increases.
00:10:47.230 - 00:10:57.134, Speaker B: In Compound V Three, C tokens are only minted for supplying the base asset and those tokens are one to one and they'rebasing so that balance automatically goes.
00:10:57.172 - 00:10:58.330, Speaker A: Up in your wallet.
00:10:58.490 - 00:11:36.522, Speaker B: In Compound V Two, you can borrow any asset supported by the protocol, but in Compound V Three you can only borrow the base asset per deployment of Comet. And currently there are only two base asset deployments. USDC and wrapped ether. Compound V Two was a single system with many assets. It's only running on Ethereum Main net, and Compound Three is a single asset focus per deployment and it's running on several L two s as well as Ethereum Main Net. Compound V Two is a single protocol deployment on Ethereum and Compound Three can be deployed on any EVM chain. In Compound V Two, max borrowing and liquidation are at the same point.
00:11:36.522 - 00:12:12.338, Speaker B: So if you borrow the maximum amount allowed by your collateral, you'll get liquidated in the next block. In Compound Three, there's a separate max borrow and liquidation point. So there's a no new borrows period, which makes it safer for borrowers to borrow the maximum amount and they won't always be liquidated immediately. In Compound V Two, you can earn interest on any supported asset, but in Compound V Three, you can only earn interest on one asset per deployment. And that's the base asset. In Compound V two there are some assets that are not valid collateral. They can't be used as collateral to borrow other assets.
00:12:12.338 - 00:12:42.446, Speaker B: And in Compound Three there is no interest for suppliers of collateral. Collateral is only used as collateral in Compound Three. So in Compound V Two there is an integrated comp distribution into the comptroller contract. In Compound Three there's an encapsulated rewards contract that can be used with any ERC 20 token. It's outside of the protocol and is a little bit neater from a developer's point of view. Compound V Two has one account controller and that's the one controller of that account. In Compound V three.
00:12:42.446 - 00:13:27.034, Speaker B: There's Account Manager. So you can approve a different manager for your address or you can revoke those permissions later, and those permissions allow an account to transfer or borrow or withdraw on behalf of that account. Compound protocol is decentralized and it's governed by the comp token holders. The comp token is an ERC 20 token that can be used to propose on chain protocol upgrades or to vote yes or no on those proposals, and the community can make those proposals. The contracts for governance are in the Compound Finance GitHub organization under the Compound Protocol repository.
00:13:27.082 - 00:13:28.014, Speaker A: You can check them out there.
00:13:28.052 - 00:13:52.034, Speaker B: There's a governor contract as well as a comp token contract. So the comp token is the voting and proposing token that allows Onchain governance to function for the Compound Protocol. The protocol has been decentralized since June of 2020 and the comp tokens have been distributed to users of the protocol.
00:13:52.082 - 00:13:53.138, Speaker A: In a slow drip.
00:13:53.234 - 00:14:40.518, Speaker B: And those users can take those tokens and vote on proposals, or they can create their own onchain code proposals to upgrade protocol code or protocol asset configuration settings. And with this token, you can delegate your voting weight to your own address, or you can delegate that voting weight to another address. So say there is a delegate that has more knowledge than you of the protocol. Many addresses can delegate to that one if they trust them to vote on their behalf. Or you can always vote on your own behalf if you delegate to your own address. The governance process is a seven day process for ethereum, and it's an eight day process for all L two S. So what happens is a community member will make a proposal, and there's a.
00:14:40.524 - 00:14:42.886, Speaker A: Two day review period where all of.
00:14:42.908 - 00:14:46.390, Speaker B: The other community members can check out that proposal, make sure it does exactly.
00:14:46.460 - 00:14:47.334, Speaker A: What it says it does.
00:14:47.372 - 00:15:46.518, Speaker B: There are no bugs, there are no issues, and also the consequences of that proposal succeeding. For apps that depend on the protocol or other protocols that use the compound protocol as infrastructure, after two days of review, there is a voting period where anybody with comp tokens delegated to their address can cast their vote on the proposal, whether they can vote in favor or against the proposal after the three day voting period. The proposal either succeeds or is defeated. It needs to reach quorum of 400,000 votes in order to proceed. After a proposal succeeds, it is in the time lock for two days where it is queued and then executed. And after it's executed, there's an additional day and execution for all L2 s. So what happens is the timelock will pass the message to the bridge for the L two, and then there'll be an additional one day time lock on the L2 before it's executed.
00:15:46.534 - 00:15:47.338, Speaker A: On the L two.
00:15:47.424 - 00:15:56.510, Speaker B: So those are only for proposals that affect the comet deployments on other chains than Ethereum. The timelock phase is only two days on Ethereum.
00:15:58.050 - 00:15:59.438, Speaker A: So if you're a developer, you can.
00:15:59.444 - 00:16:25.378, Speaker B: Head over to Docs Compound Finance to find smart contract method documentation, you can find contract addresses as well as SDK documentation, explanations for how each of the contracts work, and links to guides and security audits. If you have a technical question or just want to join the community conversation, you can go to Compound Finance, Slash Discord and join the discord.
00:16:25.554 - 00:16:26.838, Speaker A: If you want to apply for a.
00:16:26.844 - 00:16:31.720, Speaker B: Grant to work on something in the Compound ecosystem, you can go to Questbook App.
00:16:32.330 - 00:16:33.846, Speaker A: If you want to see code examples.
00:16:33.878 - 00:16:44.990, Speaker B: For building on top of Compound, you can go to the Compound Developers GitHub Organization. Or if you want to see the Compound Protocol smart contract code, you can head over to the Compound Finance Organization on GitHub.
00:16:47.090 - 00:16:49.054, Speaker A: Here's the workshop we're going to be working on today.
00:16:49.092 - 00:16:50.622, Speaker B: You can head over to GitHub and.
00:16:50.676 - 00:16:51.994, Speaker A: Check out this repository.
00:16:52.122 - 00:17:05.730, Speaker B: You can always clone it. It's open source and you can use this QR code with your phone if you want to check it out on your phone. Compound Grants is an independently led organization that funds projects that are working on the protocol.
00:17:06.550 - 00:17:08.742, Speaker A: You can head over to Questbook App.
00:17:08.796 - 00:17:29.018, Speaker B: If you want to apply for that program. They have rolling applications. They have funded many builders in the ecosystem and got them going. Building on Compound if you have more questions about that, you can come over to us during the hackathon and ask us, and we're happy to help and connect you with the right people to get your project approved for a grant. If you're not sure what you want.
00:17:29.024 - 00:17:30.554, Speaker A: To build in this hackathon, we have.
00:17:30.592 - 00:17:50.100, Speaker B: An Ideas blog post. You can head over to this link. If you want to check out that Ideas post, we have several ideas that can help you win this year's Hackathon Bounty for ETHGlobal New York, and you can also see links to previous year's winners of Hackathon Prizes in the ETHGlobal hackathons. So please check out this blog post.
00:17:50.630 - 00:18:44.370, Speaker A: Next, I'm going to walk through a developer workshop and show you how to build a DAP that you can use to interact with Compound Three on Ethereum main net as well as Base. Here we have a repository for the code. In this workshop. You can clone this code and use it for your own project. In the ETH online hackathon here we have code for a DAP that has a server which hosts a ethereum provider that hooks up to JSON RPC through Alchemy and it connects to mainnet or base. So you can use a forked version of mainnet or base to interact with the compound protocol via this user interface. And I'm going to show you how to select the right network.
00:18:44.370 - 00:19:06.522, Speaker A: You can get JSONRPC provider URLs from Alchemy.com for free. And when you run the server application locally, it will fork the network that you choose and you pass your JSON RPC URL as a environment variable to.
00:19:06.656 - 00:19:09.446, Speaker B: The Start command for the NPM server.
00:19:09.638 - 00:20:12.072, Speaker A: It is a JavaScript node JS express server. And first you have to install node JS if you don't have that already. And I'm going to clone this to my machine and I'm going to walk through the code and show you how to use it. So I have a command here to clone to my machine, going to go to my terminal, going to paste in this command. Then I'm going to change my directory. And then I'm going to use the NPM install command which will install the dependencies. So I'm going to cat my package JSON file.
00:20:12.072 - 00:20:45.338, Speaker A: So you can see that there are three dependencies in this project. They are ethersjs, exprsjs and hardhat. I'll walk through how those are used. I'm going to open this in a text editor I like Sublime. The first file I'm going to look at is a server script. So this runs on my local machine. You run this using the NPM Start command.
00:20:45.338 - 00:21:34.666, Speaker A: I have all of the relevant contract addresses in this file here, called addresses JS. So this references the compound protocol. Open this file here. We reference each of the assets that are supported by each of networks that compound three is on. So in this workshop we're supporting mainnet and base. So the assets that you can use compound three with on those networks are listed here as part of the server script. We're going to fork the live blockchain to a local version we have here, where we can control more factors like the gas costs and we can send ourselves tokens for free, so we can do everything that we need to do for testing purposes.
00:21:34.666 - 00:22:46.416, Speaker A: So I'm going to show you where I got all of these addresses. If you head over to Docs Compound Finance, you'll find the compound protocol documentation and there's explanations for every concept of the compound three protocol as well as method documentation for the smart contracts. And we have addresses for the relevant smart contracts here, including each of the assets that are supported by the deployments. Of course you can switch the comet deployment by clicking on the tabs here and the addresses down here will change and you can find the ones you need. So in this workshop we're working with Mainnet, USDC and Weath and also base Usdbc and base Weath as well. So you can use the Copy button to copy these contract addresses and you can paste them into your files here. So we have four parameters for each of these asset objects and this is used in our server file.
00:22:46.416 - 00:23:48.856, Speaker A: Down here we have seed local dev account. We have our test account that's going to be running on our local machine with 10,000 base token. Well on main net it's ether and also on base it's ether. So we get 10,000 ether to test out things with on our local machine. And we can also seed our local dev account with ERC 20 tokens in addition to the gas token. So we do that using this function I wrote here, uses the Hard Hat Impersonate account and it basically moves some tokens from a whale to our test wallet address so that we can use them in our DAP user interface. So each of the assets you see here, we have the asset address itself, the whale in this case for Weath, there's some weath sitting in the contract itself that was accidentally sent there.
00:23:48.856 - 00:24:24.310, Speaker A: So we can take some of that and send it to our localhost account. So this is the first address of my development mnemonic and my development mnemonic is listed in my Hard Hat config file. So definitely do not use this on any network besides localhost or a test network. You don't want to use these on mainnet. There are malicious actors that will honey pot and steal tokens. So definitely do not use this mnemonic on a live network only in your development node. It's fine.
00:24:24.310 - 00:25:33.800, Speaker A: So the first address of that mnemonic is here and this address will have 10,000 gas tokens and also thanks to our server script, will send us a bunch of ERC 20 tokens. So in this addresses file I also specified the amount. So for wrap bitcoin here we're going to send ourselves five rap bitcoin, 5000, USDC, et cetera. And you can change these every like and find whales on either Scan or Block Explorer that you want to take some assets from for your testing purposes on your local machine. So we run this server script, we have our provider URL from Alchemy as a environment variable and the script will use that to boot up JSON RPC server on your machine. We specify the network we want to use as an environment variable, we want to run our DAP and test against mainnet. We could pass mainnet as a parameter or we can pass base as a parameter.
00:25:33.800 - 00:26:26.164, Speaker A: The script will start up an express server and serve the files we have in the public folder here we have some HTML, CSS and JavaScript that I'll go through in a few minutes and we're going to listen on port 3008. So you can visit this address in your web browser and see the user interface. We create a JSON RPC server using hard hat and it's going to use the configuration that's set in our hardhat config JS file. And we're going to have either a main net fork or a base fork. So I need that. And we're going to seed our first address in our mnemonic with BRC 20 tokens. So this loop here goes through each of the assets for the network that we selected.
00:26:26.164 - 00:27:06.280, Speaker A: So we got main, net and base in our addresses file. So based on whichever one we choose, we seed each of those assets to our first address. And then once that's done, we'll see. Ready? So I'm going to run this script. I'm going to run it against Mainnet. We're going to do that by doing NPM start Mainnet. And I already have my environment variables for my JSON RPC API URL as listed variables in my configuration for my terminal so I don't have to write them out here like you see in the GitHub README.
00:27:06.280 - 00:27:43.760, Speaker A: So I'm going to run this command and we're going to see that our interest rate DAP is served at Localhost 3008. We have our Ethereum node fork running 85 45. And we seeded our development mnemonic account with wrapped Ether, Rapidcoin and USDC. These are assets that we can use with the main net instances of Compound Three. So now that we're ready, we can play with this app. Okay, here's what our app looks like. In the browser, we have the two deployments of Compound Three.
00:27:43.760 - 00:28:12.780, Speaker A: On Ethereum Mainet. We've got cUSDC V three, as well as Cweaf V Three. We can select them here in the select box, we can supply or borrow the base asset. And when we select an instance of Compound Three, we can see the supply Apr and the borrow Apr. So currently for cUSDC V Three, our main net, we have a 2.98 supply Apr and we have a 3.92 borrow Apr.
00:28:12.780 - 00:28:57.260, Speaker A: We can supply collateral down here if we want to borrow. So you need to supply collateral before you borrow. So we can choose an asset to supply here and we could also withdraw it. And then down here it displays the balances. We haven't interacted with Compound three yet, so our balance for every asset is zero. Of course, if we take a look at our MetaMask, we have 10,000 Ether, that is test Ether. On our localhost account, we have five wrapped bitcoin and five wrapped ether as well as 5000 USDC thanks to our server script that seeded our accounts.
00:28:57.260 - 00:29:26.064, Speaker A: So these are all test assets available on localhost only. So you can play with your forked blockchain here in test mode. When we switch the comet deployment using the select box, we have a different Apr listed. So this is for the CWF V Three deployment on Ethereum. Main net have a 1.86 supply Apr. And the collaterals that we can supply are coinbase ether as well as wrap staked ether.
00:29:26.064 - 00:30:05.650, Speaker A: So these are the main net deployments of Comet. I'm going to show you how to set up your app so you can play with the base deployments next. But before I do that, I'm going to show you the front end application code. So here we have our HTML. We have an Ethereum enable button. In case you have not enabled MetaMask to work on this web page, you could click on this button and MetaMask will pop up requesting your permission to allow the page to use your wallet. We have our select box here which gets filled with the instances of compound three.
00:30:05.650 - 00:30:50.610, Speaker A: We have those listed in our constants JS file. This is a JavaScript file with just some references. We have each of the asset addresses of the compound three instance. We have the address of Comet. We have the name that shows up in the select box as well as the value we can reference in our JavaScript code later, the chain ID so we can differentiate between base and mainnet. We also show asset address, symbol and decimals so we can do math to supply and borrow the right amounts later. So we fill in our instance select box which we can see here.
00:30:50.610 - 00:31:39.940, Speaker A: I've already enabled Ethereum on the page so we don't see this button hidden. And in our three little modals we have on the page, we have a way to show the supply apr and the borrow apr well as a button and a text box for entering an amount to supply or withdraw. And then down here can also supply or withdraw collateral. Then we have our little asset interface that displays our balances within the Comet protocol. So we haven't done anything yet. Each of those balances are zero. At the bottom here we have reference to Ethers JS.
00:31:39.940 - 00:32:18.920, Speaker A: We have version five that we get from a content delivery network. We have our constants JS file which has all of the references to the elements in HTML as well as our abis and some JSON objects with the compound three instance information. And then the important file is app JS. That's where all of the logic happens for the functioning of this DAP. Let's take a look at that. Here's our app JS file. We have an event that fires only after the web page has finished loading.
00:32:18.920 - 00:33:00.020, Speaker A: That's when each of these functions run. We have in a selected account, which is the first account in our MetaMask that we're using to interact with the page we don't have in a window Ethereum object. There will be an alert to the user saying install MetaMask to proceed using the page. You can't use the DAP if you don't have a web3 wallet. We're going to make a request to the Ethereum object to get the accounts. And once we're connected, we're going to fire this event here. And if we click the Enable Ethereum button, which you'll see on the page, if you're disconnected.
00:33:00.020 - 00:33:31.644, Speaker A: It'll also fire that event. So first thing we do is get the chain ID so we can differentiate between Mainnet on Ethereum and also Base. They have different chain IDs. We're going to get the first instance with the matching chain ID from our constants file. So if we're connected to Ethereum main net, we're going to see USDC v three. And if we're connecting to Base, we're going to see Cusdbc v three as.
00:33:31.682 - 00:33:33.970, Speaker B: The first instance in our select box.
00:33:34.740 - 00:34:21.354, Speaker A: So we go through each of the common instances and set up our options. We have in our select box we select our account. Thanks to MetaMask and Ethersjs, we allow our instance select box to be seen on the page. It's hidden at first and the Ethereum enable button is hidden. If we're connected with our MetaMask wallet, we set up an event handler for our instance select box. So every time it changes, it's going to rerender the user interface with the newly selected common instance. So you can see a different Apr and you also see different collaterals available to supply and borrow from the protocol.
00:34:21.354 - 00:34:47.186, Speaker A: Of course, you're not able to borrow collateral. It's a key difference between compound V two and V three. So those are just collaterals that you can supply and withdraw. We have our render UI function here. This basically sets up all of those elements on the page we saw. We refer to our instance of Comet by index that we have in our Constance JS. So there's four available that we can use in this DAP.
00:34:47.186 - 00:35:32.294, Speaker A: At the moment. We assume that the first one listed in the array is the Base asset. So that's either USDC or wrapped ether. Each of the collaterals are all of the other assets in that array. We set up our collateral select box by adding option elements to that select box HTML element and we add one for each of the collaterals so we can select it and supply it using the little modal here. So we could select a collateral and then put in a number here and supply. We get the APRs of the instance of Comet that we're referring to.
00:35:32.294 - 00:36:22.754, Speaker A: We use this function uses Ethersjs to create a contract for Comet. We have some of the Comet methods referenced. We have our Abi here for getting all of that data from the Comet contract. Going to get the utilization supply rate and the borrow rate. We're going to do some math to show a human readable percentage and we're going to return an array with the supply and borrow Apr and we're going to set those numbers in our HTML elements here. We're going to chop off any excess decimals because sometimes JavaScript math will leave us with a lot of decimals. So to make it nice and neat for the user, we'll do the two fix method and then we're going to set up event handlers for each of our buttons.
00:36:22.754 - 00:36:51.020, Speaker A: So when we click the Base asset supply button. We're going to supply. We're going to specify the number that the user put in the text box. We do that for withdrawing as well as collaterals, withdrawing and supply. Let's take a look at those supply and withdraw functions. So again, we're setting up a Ethers contract. We're getting the signer for MetaMask.
00:36:51.020 - 00:37:39.580, Speaker A: We're finding out the specific data about the asset which we have listed in here. We need to know the symbol, the decimals and the address. We set up a contract for the specific ERC 20 asset. We use the ERC 20 approve method to allow Comet to move it from the end address to the Comet contract. We have the receipt, we could log it later so we can debug if there's an issue. And this transaction here supplies to comment and we log the error in case there's an error. Withdrawal method is pretty similar.
00:37:39.580 - 00:38:29.830, Speaker A: Doesn't have an ERC 20 transfer because it doesn't need it. We withdraw. We can send the acid right to the end user address when they're ready to withdraw. All right? So the last thing we do when we render the UI is we draw the balances. So this is only for once the user has begun using Comet, they will see different numbers here in the Comet balances area of the damp. So we use our get balances function. We're going to make a contract for Comet and we're going to go through each of the assets that are available to use with Comet.
00:38:29.830 - 00:39:36.680, Speaker A: And we're going to use the user basic as well as the collateral balance of functions for our account that we have selected in MetaMask. We're going to get the balance and we're going to take all of those requests, wait for all of them to finish using Promise All. And we're going to have an array of balances and we're going to add them to our results and return it to our render UI function sorry, our Draw balances function which is here. And then after we've gotten all the balances, we can insert them into our HTML here in a label and it'll show the balance as well as the symbol of the asset. So like we see here, we have wrapped Ether and zero. The user has not yet used the protocol. So that's how each of the balances is written to the page and that is all of the JavaScript in app JS.
00:39:36.680 - 00:40:27.320, Speaker A: Let's try and use our app. So the first thing I'm actually going to do is I'm not going to use it with Ethereum mainnet, I'm going to try and use it with Base. So in order to do that, I'm going to kill my server script and instead of using NPM Start mainnet, I'm going to change it to NPM Start base, like that. And you'll notice that the logs are a little bit different from earlier. We're going to seed our account with Usdbc DBE comp and wrapped Ether. So these are the assets that can be used with the base deployments of Compound Three. So we have the same application running at the same address, except when I refresh this page, it's going to show me the Base instances.
00:40:27.320 - 00:41:11.450, Speaker A: Okay? It's not going to show them to me just yet because my MetaMask is not set up for the localhost server. So what I'm going to do is I'm going to go to MetaMask and I'm going to open my settings. I'm going to go to General and I'm going to go to no, General is not the right place. I'm going to go to networks and I'm going to go down to Localhost 85 45. And that's going to open a new MetaMask page for me. I have the local host 85 45 network selected, and it's going to try and get the chain ID. And obviously there's an issue because chain ID one is for ethereum main net.
00:41:11.450 - 00:41:42.690, Speaker A: Base uses a different chain ID. So if we go over to our server file no, not our server. We want to go to hardhead config JS. We can see that Main net uses a chain ID of one and Base uses 84 53. I'm going to copy that value. This is the localhost node configuration that we set up. We have the chain ID based on the network we're connecting to.
00:41:42.690 - 00:42:16.910, Speaker A: We have our dev mnemonic here, which is what I have in my MetaMask for interacting. Yeah, I'm going to take this chain ID. I'm going to paste over with the Base one because that's the network we're forking now with our hard hat node that we're running locally. Going to save that, and it saves successfully because it's connecting to my local host node I have running right now. Okay, so when I go back to my DAP, when I refresh the page, this will now say Base. Great. So we have cusdbc v three Base.
00:42:16.910 - 00:43:01.390, Speaker A: The current supply Apr for that version of USDC is 1.78%. And the available collaterals we have are wrapped ether and coinbase ether. So if I go over to my MetaMask, you can see I have 10,000 ethereum. I have 100 wrapped ether. I have 5000 Usdbc and five coinbase e. And the place that I define this is in my addresses file, which is server side. My server references the addresses up here at the top go over to addresses and we have Base.
00:43:01.390 - 00:43:53.672, Speaker A: So we're going to seed our local host account with each of these four assets. So 5000 Usdbc, we have five CBE and 100 wrapped ether. So that's what we see in our MetaMask wallet over here. And if I want to supply the Base asset, which is Usdbc, I'm going to try and supply 100. When I click this button, MetaMask is going to pop up and ask me for approval. Okay, I got a nonce issue with my MetaMask because I did not reset it. So this is a simple fix.
00:43:53.672 - 00:44:20.000, Speaker A: You go into MetaMask settings advanced. And you click activity. Sorry, click clear activity tab data. This will clear my nonstata. So MetaMask does not get confused when it tries to submit a transaction to my local host blockchain. So I'm going to try again. I'm going to try and supply, going to try and supply 100 Usdbc.
00:44:20.000 - 00:45:13.320, Speaker A: Well, it's going to approve it first and once the approval transaction mines, which takes just a second on my localhost hard hat node fork, and then we can do the actual supply method. So we're going to supply and it's going to cost us this very small amount of ether in gas. Going to confirm. And then you can see down here that my Usdbc balance within the compound protocol is now a positive number 99.99. And here we have our transaction receipt that we logged to the console. We did this within app JS. Here we have our receipt that we logged to the console.
00:45:13.320 - 00:46:16.540, Speaker A: Can check out the events that fire our token transfers as well as supply events within Comet. And next I'm going to try and borrow. So in order to borrow, I need to supply collateral. I have 100 wrapped ether, so I'm going to supply ten of them to the protocol. Okay. Once they're supplied, we can see that my balance is updated. Since I interacted with Comet, it actually recalculated the amount of Usdbc owed to me, which is now more than 100 because interest accrued in the time that it took me to supply my collateral.
00:46:16.540 - 00:46:39.344, Speaker A: So now that I have collateral supplied, I can actually borrow Usdbc. And I'm going to try and borrow a number that's greater than I have already supplied. So I'm going to try and borrow 300. So I should have a Usdbc balance of like, negative 200 once I withdraw. So actually, this is the wrong text box. I'm going to put it here and put 300. I'm going to withdraw.
00:46:39.344 - 00:47:27.590, Speaker A: And MetaMask is going to give me one transaction that I can do. And yes, now that it has mined and mined instantly, here's the receipt. We can see that I have a negative balance of Usdbc and it's slightly less than, or actually more than negative 200 Usdbc. So this is a little app you can use to supply collateral or supply the base asset, or borrow the base asset and play around with compound three. You can set it up for base. You could use either of the deployments on base or main net. Remember, you need to change the chain ID within your MetaMask localhost settings like I did here.
00:47:27.590 - 00:48:09.110, Speaker A: And you can choose the instance. Or you could choose the network that you're using by choosing a parameter here for your NPM start command. You can use base or mainnet. And you can check out those configurations in the server JS file as well as the hard hat config you can build. On top of this, you can add more deployments of compound three. Which we have in the documentation. You can check out each of those addresses here, and you can change this app to whichever addresses you need for whichever networks you're working on.
00:48:09.110 - 00:48:53.276, Speaker A: Each of the protocol contracts for Compound Three have explanations listed here in the documentation. There's also more developer resources available, including some code examples in the Compound Three developer FAQ. This is a GitHub repository with a bunch of tests as well as solidity code for interacting with Compound Three a little bit more deeply than I did in this demo. We have examples for running proposals and upgrades to compound using scenarios, migrations and workflows. There's a guide here if you want to look at that. You can create your own liquidator for insolvent positions on Compound Three. You can liquidate them or underwater positions.
00:48:53.276 - 00:49:51.334, Speaker A: You can liquidate underwater positions using this guide. You can also build a common extension that goes in the app Compound Finance Extensions page. You can have external apps there, and this page also has a search box at the top. You can search for any methods or relevant topics for comment here, and you can go to those explanations and read about them. Remember, if you want to apply for a grant, you can go to Questbook app and you can build on Compound and get paid to do it using the Questbook program. So again, that's at Questbook app you can find us in Discord and we'll explain how to apply for a grant here. Or you can head over to this.
00:49:51.372 - 00:49:53.080, Speaker B: Page and try it out for yourself.
00:49:53.450 - 00:50:25.890, Speaker A: Apply for a grant to build on Compounds of course, if you want to get involved with the compound community, you can always go to. Comp XYZ, which is the forums. So here's where the discussion happens for compound protocol development and upgrades. Community talks about what they're going to do next with the product roadmap of the protocol. Also discuss development, grants, new markets, governance process, and we talked about times of.
00:50:25.960 - 00:50:27.650, Speaker B: Developer calls and discord.
00:50:30.970 - 00:50:59.710, Speaker A: Everyone is welcome to attend there or state your opinions here or create new topics here and join the discussion at www. Dot. Comp XYZ. I hope this workshop was helpful to get you started working on your Hackathon project. Remember, there's a $5,000 USD bounty for the best project building on Compound Three or for the benefit of the compound community. On behalf of compound grants, thank you for coming to the Hackathon this year. Thank you for watching my presentation.
00:50:59.710 - 00:51:29.850, Speaker A: Best of luck to the hackers in the Hackathon. Excited to see what you build. Remember, you can always message us in Discord. We're happy to help you out with technical questions or explaining how concepts work in Compound Three, and we're also happy to review your project and let you know if it's eligible for the bounty. Thanks again, again for watching and hope to hear from you soon. And best of luck to the hackers in the ETH online 2023. Hackathon.
00:51:29.850 - 00:51:30.550, Speaker A: Bye.
