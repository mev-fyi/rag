00:00:04.490 - 00:00:29.222, Speaker A: Can you hear me? That's amazing. How is everyone today? Right? Eve New York. I love that song. I love that song. So second. You didn't hear that. All right, Eve New York.
00:00:29.222 - 00:00:49.960, Speaker A: Give me one more time, a big round of applause for yourselves. For yourselves. Actually, you know what we're going to do really quickly here? We're going to do something special. We're going to take a selfie. That's right, all of it. Take your badges, put them up. See, everyone here say, Eve New York.
00:00:49.960 - 00:01:20.134, Speaker A: That's right. It awesome. Great. How's everyone feeling after that? A little tired, right? Once more, how's everyone feeling after that? Right? This has been amazing. So many hours hacking late at night. I want to spend a special thank you to the volunteers who are here overnight. I don't know if anyone realized, but they're volunteers that just came in the evening and just stayed here all night long.
00:01:20.134 - 00:01:45.260, Speaker A: And they're actually not here because they went home to sleep. But let's give them a big round of applause, because without the volunteers, this really wouldn't be possible. So, as you know, I'm Dennison Bertram. I'm Developer Advocate at Zeppelin. I've been your MC this weekend. I've seen a lot of you around working, hacking, come up, ask me questions, most of which I had no answers for. I was just like, Go talk to someone else.
00:01:45.260 - 00:02:14.866, Speaker A: But I hopefully was helpful in that regard. Anyway, this space has been amazing. I don't think I have ever been in a hackathon where it was so beautiful, where you could just be together all night. You had meeting rooms, you had places outside to hang out to eat. Really fantastic. So this event in particular has been our most experienced field of developers ever. Right? Should be very impressed.
00:02:14.866 - 00:02:36.490, Speaker A: We went over that in the beginning, how experienced everyone is, and we've really seen that. We have 500 plus total attendees. That's 300 hackers, 62 projects submitted. 62. That's huge. That's a huge number of projects for a hackathon. We've had 40 plus amazing talks, 15 judges, 2000 plus meals served.
00:02:36.490 - 00:03:14.410, Speaker A: And I want to point out, with those judging, the judging for those 62 projects, we saw all those projects twice. You pitched those projects twice. That was amazing. 62 hackathon projects. So our five finalists that we're going to go through in no particular order, these are the people who we've really seen and we've been really impressed with. We want to go through if you're in the project, if you're in the room, which I hope you are, I'm going to ask you when I say your name, if you can sort of line up over here just to be ready for your demos. So we have DeFi assurance.
00:03:14.410 - 00:03:29.422, Speaker A: DeFi assurance around. Line up over here. Ultralight Beam. Also come over here. I don't see anybody over here yet. Some people coming over. Takoyaki, I don't know if I'm saying that right.
00:03:29.422 - 00:04:07.480, Speaker A: Takoyaki Ftdp. Nice. And either XA Dao or exe dow or executable dao, one of those. So come over here and line up over here because we'll do the presentations in a second. Yeah. So first is come on up. Do you need anything? Who's going to speak? Yeah, you have your HDMI and then we have a little adapter there.
00:04:07.480 - 00:04:50.270, Speaker A: It hey everyone. How are? Good. Glad. Okay, good. Some people are awake. So what's up? Oh, I should introduce us. We're DeFi assurance.
00:04:50.270 - 00:05:28.500, Speaker A: I'm Andrew. This is Daniel, this is Veronica and this is Namil. And like most of you all, we're really excited about decentralized finance. But the reason we haven't all closed out our savings accounts and put our money on the blockchain is there's some risk involved with DeFi, right? Like contracts can have bugs, they can get hacked, and so it's a little risky. And so what we wanted to set out to build is essentially FDIC style insurance for decentralized deposits. And that's what we did. So the main challenge around this was how do you price this kind of insurance, right? You have these new protocols coming online.
00:05:28.500 - 00:06:08.222, Speaker A: The risk is a bit unknown and so we're using auger under the hood, right? So I am developing a new protocol, let's say, and I want to ensure my users deposits. And so I open a policy on DeFi assurance. And what this does under the hood is it essentially opens up a prediction market, saying, and I'm betting that my protocol will get hacked or that a bug will be found. And so what happens is that if there is such a catastrophic event, my users will be paid out. So let's take a look at how the site works a little bit. So who is DeFi insurance for? Well, there are sort of three categories of users. There's just general users who are putting their money in these protocols.
00:06:08.222 - 00:06:44.650, Speaker A: There are the protocol developers themselves, and then there are also investors. Since insurance is a two sided market, anyone can invest in the insurance pool. And assuming there are relatively few hacks, you'll earn sort of a steady dividend on the money that you put in. And occasionally the value of what you put in the pool will go down in such an event when a claim needs to get made. So let's walk you through that now. So when I log into the site as a user, I see all of the DeFi protocols where I have money invested on the right side here you see sort of the level of coverage that you have. So, for example, this is of course all dummy data.
00:06:44.650 - 00:07:15.174, Speaker A: Well, not all dummy data, but Xerox is not fully insuring their contract yet. Although if you want to come talk to us, please do. So that's an example of sort of an investment that's fully covered. But I'm noticing my eleven ethan compound, I only have about 15% coverage on that. So if you tap on that, you get this nice slider. And this allows you to readjust your coverage, right? So you can buy more coverage. Tap the button, we're going to get a transaction, confirm it.
00:07:15.174 - 00:07:59.720, Speaker A: And just like that, now the money you have locked in that contract is covered in the case of sort of a catastrophic event. On the other side of that is the investor pool. And so if I want to earn some money on my crypto, I can invest in the pool. And what this does is sort of what we've built so far is this basically will give you sort of a weighted distribution of all of the insurance markets that are out there, kind of give you some diversification. But later what we would hope to build is the ability for those that are knowledgeable investors to be able to go through and pick contracts that they feel better about. And what this will do is it'll help better price the premiums on the other side and also be a signal to users for which protocols are safer for them to be using. And that's DeFi insurance.
00:07:59.720 - 00:08:54.954, Speaker A: Thank you, guys. Thank you. Next team. Hello. Hello lovers. So, hey, I'm Alex and this is Tom. We're from Flextapps.
00:08:54.954 - 00:09:42.880, Speaker A: But we have created the Feline term deposit portal wherein you can earn interest on your CryptoKitties. So we took the most memey things in crypto. We took the two most useless things, CryptoKitties and stickers, and we combined them with the most useful thing, DeFi, to allow people to stick their CryptoKitties on a virtual sticker wall and then make returns from compound finance. Because why not? So here are my CryptoKitties at the bottom and I can fucking rotate them, make them spin around, I can make them a lot larger. So if I want to flex my bags, then I can do that and I can stick my sweet pirate kitty on the wall. This is main net. This is all live.
00:09:42.880 - 00:10:23.078, Speaker A: This is actually going into compound right now. One transaction will wrap the ETH like deposit into compound and then I'll just start making returns and I can withdraw it whenever I want. We like to call this little box the regulatory sandbox because we don't know how legal this is, but teach your kids how to invest with their CryptoKitties. So one last thing. So Austin Griffiths pointed out this is a really interesting example of just the permissionlessness of this space. Like we can put money in compound through some arbitrary front end. So this is using pixie.
00:10:23.078 - 00:11:11.322, Speaker A: JS we didn't know how to use Pixie JS, so all we've made is this kind of rudimentary sticker wall. But you could have some really interesting interface that allowed you to access decentralized finance. So have a think about how you can use other people's smart contracts and build funky DApps on top of them because you can do whatever you want. I'm Ray Pulver, author of the IDEX hybrid decentralized exchange contract. This is Matt. He works with Terminal. This is Dylan ZK Consulting.
00:11:11.322 - 00:11:51.020, Speaker A: And where'd Lewis? Go over there. All right, so really excited about that CryptoKitties app. Going to be using that a lot. We are exit out, not exit dao. So your funds are safe and took me forever to think of that joke. All right, so what we have to show get a VGA cable up here so we can it I guess we're not well, we're gonna like into the past. Yeah, go ahead, get back there.
00:11:51.020 - 00:12:49.680, Speaker A: Take your time. So we'll talk a little about what we made. We made a new kind of proxy contract that actually accepts a compiled contract as input, as transaction input, and it will dynamically rewrite the bytecode and sanitize it. So in case you have a complex permissions model on your proxy contract, considering you might want to do multi SIG or have some kind of advanced ownership model of who's allowed to control the funds controlled by this contract. We sanitize the S store operations, delegate call code, basically anything that could allow an untrusted user to S store and overwrite the permission system. So this might allow you to do things like execute multiple atomic transactions. If you're doing arbitrage between maybe Fork Delta or Zero X or what we have in our demo, which we would be very happy to show you, is going to be a simple example where we just deposit some ether on the contract and we vote to send the ether out to some address.
00:12:49.680 - 00:13:28.458, Speaker A: Oh, here we go. Things are turning up. I'm still thinking. So basically what this does is heavily written in inline assembly and solidity, and it's going to load the input contract into memory and it's going to allocate a new memory segment that it will then just start parsing opcode by opcode and passing over push instructions to make sure we don't sanitize anything we don't want to. And it's going to rewrite the contract into something we think is safe and we will run and trust. Almost there. So we have a demo too.
00:13:28.458 - 00:14:22.720, Speaker A: It's pretty cool. All right. And so this might enable you to do things like if you can do your validation in your proxy contract, if you can express this as a bytecode transpiler, then you might be able to sanitize arbitrary transaction inputs and make sure nothing you don't want to is going on against whatever contract back end that is trusting this proxy contract. Or you could do things like but our example is we have a simple example of a multi SIG wallet where we can execute arbitrary inputs and just make sure that no one is taking away permissions from other owners of the multi SIG contract or anything like that. Still working on this VGA, but it's a nice demo, you can take my word for it. Thank you. Thank you, sir.
00:14:22.720 - 00:14:58.370, Speaker A: Okay, we're going to point a camera at the screen and that's basically our stand in for a VGA cable tonight. Hopefully the camera works. The camera doesn't take VGA. Hopefully. No. I don't see anything. Well, we tried.
00:14:58.370 - 00:15:19.260, Speaker A: Oh, it's black. That's different. Very optimistic. There we go. Is that a camera screen? Oh, that's your phone. Okay. Could probably pull it up on the phone, maybe.
00:15:19.260 - 00:15:58.790, Speaker A: All right, well, that's okay. Thanks, everybody. We're going to see if there's a vaga cable somewhere in the house, and then if we can find one at the end, we'll have them come back up and show it to us because it looked cool. I saw it next. Yes, we do have USBC. We're good. I mean, we have most cables.
00:15:58.790 - 00:16:25.560, Speaker A: It doesn't seem to go further in, but it seems to be is it mirrored or what is it doing? Oh, is it working? Awesome. Sweet deal. Hello, everyone. So I'm Richard. This is Lou. We did Takoyaki. It's a lot of weird little things all glued together.
00:16:25.560 - 00:16:40.412, Speaker A: So I think what we're going to do is we'll do the quick slideshow thingy. Oh, do you have some questions? Oh, is it not thingied? Yeah, I'll do that in a second. Good point. Dupe. Ha. But now my notes appeared. Okay.
00:16:40.412 - 00:17:20.508, Speaker A: Anyways, then we'll do the demo because the demo takes about a minute because I actually have to mine a bunch of stuff on the blockchain and there's kind of a complicated thing I need to explain. So I'll gloss over it during this and then I'll explain it afterwards while we're seeing our Takayaki mine. So the idea was I really want my notes anyways. The idea was to make ENS you know what, I'm doing the notes anyways, so you get to see my notes as well. So the idea was to make ENS fun and simple. So if you use ENS today, basically what you have to do is there's two transactions you have to place at least a minute apart. The longer the delay, the better.
00:17:20.508 - 00:17:58.884, Speaker A: This means, for example, two interactions with the ENS contract. And you have to sit around and wait for it, and it's kind of boring. So the whole goal is to make ENS more exciting to use and also to provide a random source of data for games like CryptoKitties that's more reliable than just block hashes. So the problems are, I think I just stated, requires two separate UI transactions. ENS is tedious to wait for. I'm just reading notes at this point, so let me just get to the cross. So the first part of it is basically when you buy an ENS name, when you buy like a Rickmoo Takoyaki ETH, you actually get an NFC token.
00:17:58.884 - 00:18:32.468, Speaker A: And so this is kind of like CryptoKitties. You get an actual token out of it. But unlike CryptoKitties, where you pay for your kitty and twelve or 20 blocks from now, you get your cat all at once, this octopus inside, this little ball of dough that's delicious. Is being slowly decided what type of traits it's going to have. So you can see by the time it gets to this one, you can tell what color your Takoyaki is going to be. And by the time it gets to this one, you can see what type of eyes it's going to have. And by the time it gets over here, you kind of have idea of what type of mouth it has, what color its legs are, all that sorts of stuff.
00:18:32.468 - 00:18:44.440, Speaker A: So it's more engaging. So as you're waiting for this minute long process, you actually have something to look forward to. You're like, excited because this next block comes along, and boom. Look it. Oh, I got the round eyes. Hoza. Super exciting.
00:18:44.440 - 00:19:23.796, Speaker A: So that's like, step one of the things. So the other thing we wanted to focus on for Usability, so that was just to help waiting around for the transaction to finish or like, the delay between yes. So you need to commit to what you want to buy and then wait some time and then reveal what you actually committed. The reason for this is because if you don't in IC, you're buying, like, McDonald's ETH. I can jump in and steal that name from you if I pay a higher gas price. So the idea is you commit to buying McDonald's but secretly, and then later you reveal you were buying McDonald's, and now it's too late. No one can jump in and steal that name from you.
00:19:23.796 - 00:19:55.900, Speaker A: So this is the thing I'm going to explain while the demo is running because it's kind of complicated, but basically we use a technique that has keyless EOAS. An EOA is an externally owned account. These are the only type of ethereum accounts that can actually execute transactions. And so normally, if you use MetaMask for ENS, you would need to commit one transaction and then wait a minute and then commit a second transaction. So two UI interactions. So this was really just to reduce it down to one. And so yes, we'll explain that in a minute.
00:19:55.900 - 00:20:36.780, Speaker A: So the other thing is, because of this, if people aren't familiar with A Randow a Randow is a system for producing truly random numbers. It has a commit phase and a reveal phase, which sounds very similar to the ENS we just described, where you have a commit phase and a Reveal phase. So we can actually bootstrap reliable random numbers from ENS, especially once we have scale and there's ENS entries coming in all the time, we can generate actual random numbers. This technique works entirely fine with top level domains as well. We just did it with the Takoyaki ENS name because it's cuter and adorable. Yes. Oh, demo.
00:20:36.780 - 00:20:57.888, Speaker A: Yes. Let's do the demo. Yeah, we'll come back to questions lit. So I will explain what's going on for the how do I make this thing bigger? Ha. I'll let you hold on to that. You can talk for a second. Okay, so this one's already been not available.
00:20:57.888 - 00:21:24.330, Speaker A: So because we've been testing, you can see the address display. So this one is available. It's a new ENS name that you could purchase. So we're just going to click on the button Buy me. Now, you'll notice there's exactly one interaction I have to make with this contract. Yeah. So basically, you notice that MetaMask only pop up one time.
00:21:24.330 - 00:21:57.910, Speaker A: I'll try to explain this might be too low level for some people, it might be too high level for others. We were asked a few times by people and it's a bit complicated on how it works. But basically, if you think of how a normal transaction works on the blockchain, you have a private key. So you generate your transaction and you use that private key to sign that transaction, which gives you a signature. You then glue those together and give it to the blockchain. The blockchain. An important thing to realize, though, is that a transaction doesn't have a from address.
00:21:57.910 - 00:22:40.464, Speaker A: What the Ethereum Network does is it takes your transaction you gave it and the signature you gave it runs EC Recover, and now it knows who to charge for that transaction. So what we want is a system that doesn't have a private key. Oh, I can see his little purplish head is showing through. So what we're going to do instead is we're going to use the contract to produce a guaranteed so we still build our transaction, but rather than signing it with a private key to get a signature, we're going to choose a provably random signature. Now, obviously, there's no funds sitting here because it's a completely random address that no one has a private key for. But that's the only thing really stopping it from being a real transaction. So you can just send money.
00:22:40.464 - 00:23:06.140, Speaker A: If you run EC Recover on that transaction, you'll still get an address. So if you send money to that address, that's now a valid transaction that you can drop on the network and it'll go off to the races. And so you can see his eyes are showing. I was going to say he's got the round eyes. We only implemented one type of eyes, so it's not that impressive of a feat, but yes. So that's it in a nutshell, yes. Anything else we should talk about? Yeah, go for it.
00:23:06.140 - 00:24:01.884, Speaker A: Thank you. We found a VGA cable to the back. It'll take us a second to set it up. Just bear with us a moment while we get our antique BGA cord working on. Yeah. So we're going to show you guys two things. We're going to show you a brief snippet of the part of the segment of the code, the assembly code that will rewrite opcodes.
00:24:01.884 - 00:24:47.890, Speaker A: And again, we are replacing certain insecure opcodes with reverts. And then next, we are doing something you can actually only do with inline assembly and solidity. Since you need a fully written contract in your code for this solidity compiler to use the create opcode. So we are just storing it at some base, offset the output contract we were rewriting, and we are deploying it with the create opcode. So we're going to take a little look at that, and then we're going to demo the application we made very soon. All right, exit. Oh.
00:24:47.890 - 00:25:13.370, Speaker A: All right, we've got our VGA cable holder in place. Shout out to him. All right, so, Dylan, let's pull up the code first and just take a brief tour. Oh, do you close? It? Not there it is. All right. Oh, no. This VGA is over 100 years old.
00:25:13.370 - 00:26:00.536, Speaker A: Might need two VGA cable holders, one for each side. We do need two VGA cable holders. Power is green. Hold the clutch. It's going to be worth it, trust me. Now. There we go.
00:26:00.536 - 00:26:39.572, Speaker A: All right, quick look. All right, so we have a little snippet of code we call data copy, get our input contract, and then we go over opcode by opcode, passing over all push opcodes, and we want to rewrite the s stores call codes, delegate calls, and just make over. Can we increase the size? Dylan, how good are your Google Chrome skills? There we go. Little more. A little more. How are we doing? More. How's that legible? All right, I heard some more.
00:26:39.572 - 00:27:12.576, Speaker A: Maybe a little more. All right, there we go. That's real close. All right, so we have to shift out, get the Opcode out, and we want to just do a brief switch statement and make sure we sanitize those insecure inputs. Let's scroll down a little bit because we see the sanitization and we want to go a little more. And that is an example of how to use the create Opcode with just a raw pointer, and you can pass in any dynamic contract you want. And then we immediately delegate to it.
00:27:12.576 - 00:28:11.940, Speaker A: And in our template contract, we self destruct it. So we've gone over the applications of this, so let's take a look at the demo now. Say what? Yeah, so we need to hurry up. So you guys can find the demo on Dev post or on GitHub? Oh, we can give the demo. Okay, so we have a dow here that uses this contract, and we're going to just create it real quick. So you go to make the dow, you provide the list of addresses that are owners of it that can vote on proposed inputs, and then you say what the threshold is for how many people have to approve it before it will run code that you provide. I have to go off screen and confirm this with MetaMask.
00:28:11.940 - 00:29:13.240, Speaker A: Okay, so we now have created the contract, and I'm going to send a little bit of ether to it. Okay. And so now the MetaMask that I have in this other browser is already part of the dow, so I just have to load it. Okay. And then I have okay, so we have, like, a template contract here so you can just write some lines of solidity and not have to give the entire contract. And then it'll just kind of pop it into the template. Then we compile it.
00:29:13.240 - 00:29:45.218, Speaker A: If we check the status real quick, it says that we need two votes before it will be able to run. And so I'm going to vote the first time on the left. Now it says we need one more vote and then I'm going to vote on it again. I have to confirm it. Okay. And now it executed. And then if I look at the address, the code there just sends a little bit of Ether to another address on my MetaMask.
00:29:45.218 - 00:30:10.180, Speaker A: And so if I check on here, we can see account one has two Ether. And this is the address that we put in there. Thank you. Thank you so much. Thanks, everybody. I promised the laptop was worth it. Thank you, Next.
00:30:10.180 - 00:30:45.166, Speaker A: Thank you. Sorry, we're going to have to set up. We have a lot of computers. Which one do we want to plug in? So you guys want to know how we scammed our way here, right? Because it's Dean who led him here. Yeah. So we're ultralight beam. Yeah, true.
00:30:45.166 - 00:30:53.140, Speaker A: I'm not plugged in. No, I need regular. I can do HDMI. HDMI. Yeah, that works great. Who's next? Whose computer's next. I think.
00:30:53.140 - 00:31:18.630, Speaker A: Oh, can we do two? Yeah. Oh, that's convenient. Oh, not at the same time. We can switch back and forth. Let's get rid of that. What do you have, USBC? Yeah, we have that someplace. There you go.
00:31:18.630 - 00:31:48.920, Speaker A: Right, good. Yeah, so oh, jeez. Yeah, perfect. Cool. Our project is called Ultralight Beam. Essentially what it is is a MANIT network, very similar to kind of a mesh network, except we relay, like, arbitrary data across. And it's completely over Bluetooth in this POC.
00:31:48.920 - 00:33:00.148, Speaker A: But basically the vision of it was we're going to be over the next week or two actually developing protocol for it so that wallets can essentially have an offline mode with the idea that, for instance, what's a wallet like? SIG Status or Burner wallet could essentially be offline and relay ETH transactions amongst other offline nodes through Bluetooth and then find one that's actually online, which will then broadcast messages upwards. Yeah, I think there's yeah, I don't know how we did it. Okay, so I might get the ETH transaction wrong because I'm like hacking the nonce. All right. So basically how it works is my device will be off on Bluetooth, so there's nodes, which is mine, and also Dean's phone, which we might okay, we are not going to use this phone. And then basically this computer here is running as the relayer. So the relayer actually has connection to the Internet, which can then broadcast to other relayers to basically update the message.
00:33:00.148 - 00:33:36.748, Speaker A: It's essentially a giant IIRC for messaging. And then the Ethereum transaction, it's like first come first serve the first relayer that gets it, takes it, consumes it, and then just doesn't pass along the transaction. That way there's like no double spend attempt. Really can spend it, but same nons. Are you live? Cool. I'll send this. Yeah, this is kind of tough to we need like four screens, but basically, as you can see oh, damn.
00:33:36.748 - 00:34:13.770, Speaker A: Can we switch to the other one? Shoot. I sent the wrong knots. Two. Yeah. So basically what happened right here on the connecting part. I don't know why it's backwards, but essentially I discovered the Bluetooth device over there, connected to him, created my transaction, sent it to him, and then he sent me back the actual transaction, which should be on Gurley. I don't have Internet, which will work.
00:34:13.770 - 00:34:37.700, Speaker A: And he didn't get it because there's no reason to publish that to the whole network. That'd be a huge waste of bandwidth. And yeah, so it's actually included into the block, which is kind of cool. And then the other half of the demo, which would be like the arbitrary message passing. Did it actually get included? I think Gurley's broken. We built that. That's a problem.
00:34:37.700 - 00:34:55.910, Speaker A: Oh, yeah. That's my private key. It's a dummy. Don't worry. And then this would be like arbitrary message pass. So I sent a message to him. So to Cayman.
00:34:55.910 - 00:35:25.280, Speaker A: And it's going to be on a ping. So you can see I'm pinging and receiving. No, I'm only sending right now, but this computer is actually getting my messages. And it's basically Bluetooth to Bluetooth, then through the interwebs to his computer. And Dean's phone can do the exact same thing that my computer did, just he didn't write half the X code stuff. So bad. iOS Developer But that's our demo.
00:35:25.280 - 00:35:58.760, Speaker A: Hopefully in like a week, we'll actually have a protocol for it and we can actually start forking it onto burner and whoever else has a wallet that actually wants to try and test this out, because this will be really useful at conferences or just anywhere if we need to talk to people in a large group of people area. When you have no cell service. Burning man. Excellent. I am shocked. First time the demo work. Yeah.
00:35:58.760 - 00:36:36.340, Speaker A: Let's get a round of applause again for our finalists. So, as you know, also we have our sponsors and they have our sponsor bounties. So we will have our sponsors come up one by one and talk about who has won their bounties. If all the sponsors could sort of, like line up over here just so we can go through it one by one. And first up is New Cipher. New Cipher. Don't do this to me, man.
00:36:36.340 - 00:36:53.650, Speaker A: All right, I guess we're going to have to come back to New Cipher and Scale. All right. What a weekend. That was fun. Okay, we have six winners. I'm Jack, by the way. From Scale.
00:36:53.650 - 00:37:11.360, Speaker A: Chadwick. From Scale. Okay, so let's get started. All right. We have six bounties. The first five are for 500 die. The first one is a simple and fully decentralized search engine with sorted stacking order using the fast finality of scale to enhance the end user experience.
00:37:11.360 - 00:37:46.650, Speaker A: Blockchain name service. Great work. The second one is a ballot creation mechanism for current token holders using scale's decentralized file storage to store a merkle tree root. Hash goes to ERC 20 voting app. Nice work. Third one is an ether payment button for websites and apps with an incentive system behind it using scale's fast finality for great user experience. The aptly named the collusion resistant upvote button for locrus.
00:37:46.650 - 00:38:40.742, Speaker A: Fourth is a fractionalized asset investment that lets multiple people invest in assets that would otherwise be too expensive using fast finality and cheaper transactions on the scale platform. Investor. The fifth one is a ultra simple NFC wallet that even a child can use. Donors convert fiat into dai using wire and dai is converted onto the scale chain using SDI and used for an awesome seamless user experience enabling smartphone NFC to transact SDI for school meals for children. Let's hear it for tappy. The grand prize winner for 1000 die is a three player capture the flag meets mineseeper like game where players collude to reach the center place and reveal. Mines.
00:38:40.742 - 00:39:06.173, Speaker A: Be the first to center and claim your prize collusion. All right, great work, everybody. It's fun. Thanks. Is the new cipher here? Thundercore. Just as a little overview, we're just going to say the winners, but you don't have to come up. Hello.
00:39:06.173 - 00:39:33.320, Speaker A: Hello. Thank you to everyone who hacked on Thunder. So we're going to be announcing two or let's see, three different winners. So we had actually our first winner won both best game and best combination of stacks. We have Robot Rumble. Thank you. That's awesome, guys.
00:39:33.320 - 00:40:26.190, Speaker A: Congratulations. And then instead of awarding a best tooling and a best privacy, we had a tie for privacy between I vote you and ERC 20 voting app both get 1000 thunder each up. Seller. Seller you hi. This time we have two bounties. And for the first bounty c gamer, the bounty goes to Kojo. Kojo is the application that you can put your cute crypto kitties together and let them fight in a state channel.
00:40:26.190 - 00:41:14.240, Speaker A: And the second bounty goes to my project too, which is a cash like application that you can send incident payment to merchants and enable this kind of micro payment, financial transactions and purchases. All right, so that's from us. Next up, the graph. Hi, I'm unique from the graph. So I loved Vitalik's talk on Friday. And we had not one but two teams working on collusion resistance. So if anybody's thinking about starting a cartel and making things closed, you all are about to get out engineered.
00:41:14.240 - 00:41:28.864, Speaker A: We're doing $5,000 in prizes. We've got five winners. They're web3 bindings. I vote for you. Sorry. I vote you. Smart piggies cygnus and ERC 20 voting DAP.
00:41:28.864 - 00:42:00.444, Speaker A: Thank you so much. Airsoft. Hey, guys. First, thank you very much for East Global and all the hackers for making the trip. AirSwap is based in New York. So great to see this big gathering here. We got one prize today for 1000 die that goes to Caspian Trade X for building on top of Dex index and allowing arbitrarized searches between different DEXes.
00:42:00.444 - 00:42:30.180, Speaker A: Congrats, Dapper. Hey, everyone. We're super excited to be here at EF New York. But before we announce the winners, as I always do, I would love to hear the loudest meow from this room. So when I count down from three, two, one. Giver three, two, one. That's weird week.
00:42:30.180 - 00:42:50.862, Speaker A: Not enough sleep. I probably let's give it another try. Three, two, one. Great. So we have two bounties. I'm going to announce the CryptoKitty Kitty verse ones, and then I'll have Lynn announce the Dapper ones. So in second place, the winner is kujo.
00:42:50.862 - 00:43:26.846, Speaker A: They built a game that allows your kitties to battle. As you heard in the last announcement, the first place winner is kitty Phi. They basically took the Opcodes from Pokemon game. And the sound bites, they actually linked it to the genetics of the cats. So each cats now have a voice. So we're really excited about that project. And for dapper our smart contract wallet, we have Feline Term Deposit, cygnus, Crypto Bingo and Kittyfi.
00:43:26.846 - 00:44:07.748, Speaker A: Congratulations to all of our winners. Matic. Hi, everyone. This is sandeep from Matic. So we have four teams which we are giving bounties to. These teams used Matic plasma enabled post side chains which ensure fast finality while having the security of plasma for the assets. So the first team is Zero Xu, which created an app for shortening the URLs.
00:44:07.748 - 00:44:52.200, Speaker A: The second team is Discord Button Wallet which allows you to send ERC 20 tokens within Discord or Telegram. Also, then there is one more team which is Cash Loots, which created a game for kids. And then the last project is Project Genie, which allows you to make wishes on the blockchain. Binance Labs. What's up, guys? This is tech from Binance Labs. We have three winners of our fellowship grants. The first is to the discord button wallet team.
00:44:52.200 - 00:45:22.080, Speaker A: They're building an easy to use wallet on Discord. Second winner is Binance Pay. They made a wallet that has a very easy payment UX for physical retail. And then the third winner is Cap Easy, which they made a tool that makes it easy to issue tokens on the Binance chain. Congrats, guys. Thank you. Foam.
00:45:22.080 - 00:45:55.690, Speaker A: Hey, everyone. Really excited to be here. Just want to also add foam has been based in the new lab for the last two years. So it's been really amazing to see the Ethereum community come here and utilize the space in such a way. We have one winner for our Foam API prize of 30,000 Foam tokens and that is French toast. Kitty, this is a new way to interact with your CryptoKitty in the real world. And it integrates with Taurus CryptoKitties chainlink and foam.
00:45:55.690 - 00:46:22.780, Speaker A: So essentially you can give your CryptoKitty a geospatial address and have it show up on a map. And it also then uses chainlink to get the real time weather. So you can now learn what the weather conditions are where your kitty lives and then uses the foam API to filter what points are in the area that are worth going to based on the weather. So if it's cloudy, all the outdoor places won't show up. So now you can take your CryptoKitty with you and see what the weather is on the foam map. So that was really awesome to see. Thanks and congrats to the team.
00:46:22.780 - 00:47:18.814, Speaker A: Are we okay? Hi, thanks. So we have one prize for $1,500, and it goes to the slice of Dow team. So essentially what they did is they built a kind of system for Bootstrapping, a company with no ownership. So when you start a company and you don't know who's actually going to end up doing what, then essentially you just get tokens for what you end up doing and then you create a sort of cap table based on this and it's really cool. And because it's stored on the Rweave, you can never lose access to the UI, so it's always going to work. Thanks. Hey guys, we have five prizes of $200 each and there is no particular order.
00:47:18.814 - 00:47:55.386, Speaker A: Fast one is One inch Exchange, which provide aggregated token swap. Congratulations. And number two, Natural Files, which provides undecentralized IPFS file tracker. Natural files. Congratulations. And Takoyaki. Which congratulations? They've demonstrated great technical knowledge and love for ENS and ISS three, right.
00:47:55.386 - 00:48:58.670, Speaker A: And yeah. Fourth one is Ocerium integration, which provides the web two login flow for Ethereum. Special mention that to demonstrate the integration with DAP, they actually integrate with the Kickback, which is another project of mine demo, which is awesome. And did I say force? So the last one last not least is I don't know how to pronounce estore gate Storegate. Yeah. Which has a long description of open the portal to the toll network, register your hidden service onion address on the ENS, use MetaMask to explore Tor directory from your search bar or just use our search engine. A special mention to this team that they just not only demonstrated, they actually raised a pull request to both MetaMask and their ENS manager, which can be integrated even now.
00:48:58.670 - 00:49:33.200, Speaker A: Thank you, Taurus. Hi guys, I'm Zen from Taurus and we do distributed seamless logins for DApps. We have several prizes to give out to those who integrate us. Thanks a lot for everybody who did. So. Our first prize is to the most innovative DAP, and that's to exe Dao. Our second prize is to the DAP, which best fills the industry needs and that's to Frappay.
00:49:33.200 - 00:50:09.720, Speaker A: And our third prize is to the most seamless DAP, which also goes to the slice of dao. And our best DAP goes to DeFi assurance. Thank you very much, Aztec. Hi, guys. I'm Tom from Aztec. We saw some really cool use cases of our zero noise proofs this weekend. And we were particularly impressed by one team who took some really cool strides towards doing zero noise salary streaming from Adapt.
00:50:09.720 - 00:50:32.340, Speaker A: And so we decided to award this team $500. And that prize goes to zalary. So congratulations, UNICEF. Thank you. Hi, everyone. I'm Christina. This is Betty.
00:50:32.340 - 00:51:10.592, Speaker A: I'm announcing the prize on behalf of UNICEF France for reducing the digital divide. And I'd like to congratulate the Hack Packers team for building both the ability for a donor to fund a specific region, to bring connectivity to it, but also to monitor the connectivity and manage the relationship with the ISP. So congratulations to hackpackers. We actually have one more. We don't have the slide for Infura. Give it up for Infura. All right.
00:51:10.592 - 00:51:39.450, Speaker A: Hi, I'm Danny from Infura. We gave out two API bounty prizes today. We just told you guys to build cool things and connect them to ethereum using Infura. So our two winners are Takoyaki and Kujo. Congratulations. We also have a prize by, uma, clap. Hi.
00:51:39.450 - 00:52:16.464, Speaker A: So we had a prize for the project that we thought would bring the next hundred Ethan to DFI because we want to grow this whole space. So the project we're awarding $3,500 is the Feline term how do you say it? Term deposit portal, which you all saw earlier. Woohoo. Thank you everyone very much. I would like to call up all right, we're going to go through the sponsors. These you've seen everybody, but we want to give a special round of applause. So I'm going to go through our sponsors.
00:52:16.464 - 00:52:29.164, Speaker A: We have news. Cipher and scale thundercore seller. The graph. We can do a big clap at the end. Clap the whole time. Wire zero X air swap. Keep it going.
00:52:29.164 - 00:52:48.572, Speaker A: Consensus dapper off chain labs. Wireline chain link maddox mysterium network finance labs. Hiraku. Uma loop ring formatic infura. This is incredible, guys. Foam rweave kyber network. ENS taurus one KX.
00:52:48.572 - 00:53:04.548, Speaker A: Quicknode. Aztec kickback. Keep it coming. Nervous. Reciprocal Ventures, UNICEF Pulp, the Bounties Network And of course, give a big round of applause to ETH Global. It'll have Kartik and Andrew come up to tell you more. But thank you guys so much.
00:53:04.548 - 00:53:19.688, Speaker A: Thank you, everyone. Humans, thank you. Oh, just all serious now. Hey, everybody. I'm Kartik. This is Andrew from Eat Global. As you know, Eat Global runs events like these all over the world.
00:53:19.688 - 00:54:01.448, Speaker A: And our goal is to get more developers into the web3 ecosystem. Eat New York is our fourth event of the year, and we're so happy that it is the way it is right now. The excitement that we saw in the crowd on Friday, on Saturday today, all the amazing projects that came out of it, all the amazing sponsor projects and the interest we've seen it just constantly amazes me. So we want to wrap the event up. As you know, and I know a lot of you are tired, and it's been a long three days for all of us. So I want to just spend the next few minutes thanking a handful of really important people that kind of made this event possible. These events, as you know, are free for developers, and a lot goes into making these events happen.
00:54:01.448 - 00:54:33.104, Speaker A: The months of time all of us have kind of put into making sure that you have the best experience here ever really deserves a special recognition. The best thing about these events is that you only realize that the amount of work that goes into them when something goes wrong, because if something is going smooth, people don't even notice. So this is our opportunity to thank everybody that kind of put in all the hard work and time and dedication to making these events possible. I'm going to hand this off to Andrew to kind of kick this off. All right. Thank you, Kartik. Yeah, I'll make this quick.
00:54:33.104 - 00:55:15.252, Speaker A: There's almost too many people to thank. There's so many million details and little decisions that happen over weeks and weeks and months. And many of these people have been on long phone calls late at night making decisions about how many banners and how much coffee and where are we going to park. Oh, we have no parking, by the way. We're not supposed to say that, so I can't run through them all, but there's a hardcore team, I call them. They've been working for months and months and a whole list of organizers here. I want to make special thanks to James WA, Simona Pop, Daniel Sorio, Brian Eisenbach, Victor Buenan, Denison, Bert Trem, and Megan NAB.
00:55:15.252 - 00:55:35.296, Speaker A: These people have been working so hard. A lot of thanks to them. And also two key people here at New Lab who've been working for months is Cody Moy and Stephanie Hemschrot. They've been working on all the details with us. A big round of applause to them, too. Thank you. And now I'll hand it off to Kartik.
00:55:35.296 - 00:56:26.920, Speaker A: And, of course, this event is a hackathon. After all, we had 62 projects kind of pitched to our judges and did the hard job of figuring out who the top five teams will be, who the runner ups will be. So I want to just kind of give a special thanks to all of our judges. So, Wendy, Will, Philip, Danny, Lasse, james Mo, Joy, Scott, Joseph, Evan, Giorgio, Simona, Anna, Austin, and Spencer, thank you so much for spending the last 3 hours kind of looking at teams twice to select the amazing projects that we all got to see. Thank you so much. And, of course, all the mentors that were here this entire time, all of our speakers who kind of including sponsors, and the people who kind of got the spot through the Call for proposals, our volunteers, the event staff. They've been kind of making sure from the security to the cleaning, that the entire event stays in a really good shape for the last 36 hours.
00:56:26.920 - 00:57:08.992, Speaker A: And all of you hackers and our MC Denison, give him a round of applause. And of course, this is my time to recognize the five other people on the It Global team that spend all of their time making sure that you have the best experience ever. So please give a really big round of applause to Andrew, Heather, Jacob, Josh and Liam from the It Global team. So the real question is, we just talked about all this stuff and what do the finalists actually win? We kind of saw five people present on stage 62 different projects. The best thing about these events is that we don't structure them as competitions. There is no objective. 1st, 2nd, 3rd ranking.
00:57:08.992 - 00:58:02.870, Speaker A: These are supposed to be collective events where we just get to show the cool stuff that we've all worked on over the past weekend. So as part of this and kind of the tradition for keeping these ETH Global events consistent, all five winners are going to get $500 worth of ETH to every team member on the team. So this is great because every time we do these events, and so far we've done one every month starting February, we have yet to see somebody come to us and be like and ask us just what are we going to win and how do we kind of win the best prize? We don't publish these prizes online. People don't kind of bug us. We don't get any of these emails and really kind of speaks to the actual excitement and effort people have in wanting to learn and experiment and we want to just keep on doing that. So congratulations to all of you winners and we'll kind of reach out to you, all the sponsor winners, all the finalists and everybody else over email with the next steps on how to kind of move forward from all this. So thank you so much for that.
00:58:02.870 - 00:58:40.396, Speaker A: And all of you will also get this really cute pizza rat NFT delivered to your smart contract, your ethereum address from the check in process. So this wouldn't be an ETH Global event if we don't announce what's happening next. So we just finished New York, or we're going to finish New York in two more minutes, but we have two more events upcoming that I want to really talk about. So the first one is actually going to be ETH India. It's going to be our second time. We're going to the biggest event in Asia and that's happening on August 2 in Bangalore. You can kind of learn more and start applying.
00:58:40.396 - 00:59:19.480, Speaker A: Or if you want to attend, you can go to Ethindia Co. And for the first time, we're going to announce our last and our biggest event in the US now, which is ETH Boston happening on September 68, and we're so excited to host an event in Boston. It's been one of our most requested cities to do an event in, and you can learn more at ETH boston. So find out more about both of these events and all the other events we have planned this year by just going to ETHGlobal. Dot co or following ETHGlobal on Twitter. There's also a mailing list you can subscribe to that has information and we kind of message everybody on everything else that we're doing. So I'm going to try to finish this in the next 30 seconds.
00:59:19.480 - 00:59:47.872, Speaker A: All of you, when you checked in, probably got this Ether card. These are cards given to all the attendees with an Ethereum account and a private key. We kind of loaded them with some max die. And we're going to use this thing for the after party for you to be able to pay for drinks. So we want to try to use the stuff we work on in this ecosystem. And this is one of the coolest things we've done today or this weekend. So after this, we're going to just kind of go assemble in the main hall.
00:59:47.872 - 01:00:33.044, Speaker A: We're going to be hosting an after party for all of the attendees, and we're happy to be sponsored by Reciprocal Adventures for doing so and being our host, for being the official sponsor for the after party. And with that, thank you so much for being at Eat New York. And actually, I forgot one last thing. We're going to take a massive group photo right outside. So if you can just kind of assemble for the next two minutes right outside this hall, we're going to take a group shot and we'll party. Thanks, everybody. It all I need in my life is there it's nothing like it.
01:00:33.044 - 01:00:40.850, Speaker A: Yeah, I never felt quite like this. The shoe. All I need is.
