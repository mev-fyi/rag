00:00:00.090 - 00:00:28.102, Speaker A: Thank you for having me here today. We're extremely proud to be the sponsors of this hackathon. We love the developments of any kind. And we have a special product for all of you here today. It's wearable protocol. It was pre released, I guess, on the NFT hack a while ago. And since then, we've learned a lot.
00:00:28.102 - 00:01:11.506, Speaker A: There are several teams working on top of Wearable Protocol right now. Just yesterday, the App Singh went live on wearable protocol using lazy minting mainly. So Wearable Protocol allows you to do a lot of cool stuff. And we are more than happy to work with all of you on the next wave of the adoption of the protocol. We learned a lot from the first teams and that's why we improved how the protocol works. And today I want to talk to you about how to use it and what is the overall philosophy of the Wearable protocol. So, let me share the screen real quick here and I'll start.
00:01:11.506 - 00:02:13.346, Speaker A: So, Wearable Protocol, the idea in general is to build the liquidity layer for the NFT ecosystem, just because right now we've built Wearable for almost two years now. And one of the hardest things to build or to crack was to acquire the liquidity on the marketplace. It's the hardest problem to get because when you're building something new, there are no buyers to work with sellers. And when the sellers come, they feel sad. And the same works vice versa if there is a buyer, but no real items, so they also feel upset. So to kick the roll, the ball rolling to kickstart the network effect for the marketplace, you really need some initial liquidity. And that's why we built wearable protocol.
00:02:13.346 - 00:03:08.518, Speaker A: It's basically the set of smart contracts and indexing back ends on top of that to allow you to interact with existing shared order book with a lot of liquidity. All the Wearables users, like 500,000 users monthly, are at your hands when you're using Wearable Protocol. That's the most important part about Wearable protocol. What we really wanted to do basically right now, wearable, we just released that wearable.com uses Wearable Protocol under hood as the main way to talk to blockchain. So Wearable Protocol does all the heavy lifting concerning Minting, concerning sales, bidding, auctions, it's all done on Wearable Protocol. And Wearable.com
00:03:08.518 - 00:03:51.970, Speaker A: is just a proxy to the protocol when we are talking about this trading stuff. So verbalcom is an app built on top of Herbal Protocol. So let me briefly cover what we built for you. So the first, the most basic layer is the NFT layer. You can use your own NFT contracts. Any ERC 721 or 1155 contracts are compatible with our trading smart contracts. But in addition to that, we've created a special set of smart contracts, wearable token contracts that allow you to use Lazy Minting.
00:03:51.970 - 00:04:49.670, Speaker A: So that means to create items that doesn't live on chain before they are bought. So it's like a signature item, you sign a message and then you submit it to the protocol and you create an order. And once that order gets matched, this item would be minted by the matching contract on chain and given to the new owner. So that basically uncover the Minting to all the people out there without the need to have ETH to pay the gas prices. It's not expensive these days, but still, that's an entry barrier. Right now you can just support Fortmatic or any other great custodian wallet and the user would only need to sign the message in order to create an item that's really powerful. Aside from the Lazy Minting, this user contracts, the user token contracts.
00:04:49.670 - 00:05:39.722, Speaker A: They support such nice things as baked in royalties. So you can specify the arbitrary set of royalties that would be respected by the exchange contract on every secondary sale. And aside from that, you can also specify multiple creators. So instantly enabled collaborations. I guess the space really lacks a nice app for the collaborations and if everybody is building it today, that would be really cool. So it's all supported on the Wearable Smart contract for the token for the NFT created. So if you want to build a great NFT asset, you can fork the Wearable token contract, create your own collection out of it, deploy it and enjoy the Lazy Minting and multiple creators, all of that.
00:05:39.722 - 00:06:34.182, Speaker A: So the second big part of Wearable Protocol is actually matching contract. It's the contract that does the swaps. It supports ERC 721, ERC 1155 and ERC 20 trades in any pair. Basically you can change ERC 727 21 to 721 or 721 to ETH or 721 to Die, 721 to USDC. So all the combinations are supported. The main thing that you need to understand probably is that the order storage is off chain. So in order to create the order, you just need to sign the message that I am the wallet, zero x blah blah blah, I want to sell that NFT that I own for ten die.
00:06:34.182 - 00:07:31.018, Speaker A: So there are like two sides of the order the asset that you want to make or you want to give, and the asset that you want to take, you want to receive in response. So two sided order, you combine that message, you're signing it and you submit it to the protocol, you submit it to the backend API that would store the order and that you can query for all other orders. That's how shared order book is implemented. So it's a backend API that you can store orders on. And if you want to buy an item now you're creating a counter order. The counter order is the same order basically, but where you specify it as a make, you now specify the make asset as money. I want to give money and I want to receive an NFT.
00:07:31.018 - 00:07:56.626, Speaker A: And again, you can either store this in the API or you can take these two orders and go to the contract and match them. So that's that simple. Basically. Again, I want to sell an NFT. So I'm assigning a message and I also calling an approval function. So I need to allow the contract to take my NFT without my knowledge. I might be offline.
00:07:56.626 - 00:08:28.218, Speaker A: I'm approving an NFT. I'm signing the order. I store it on the back end. So now, how does the auction work? The auctions are basically the consecutive bids and bid is just the order which comes before the sell order. It's a buy order which comes before the sell order. The buy order is when you're making. So the make part of the order is money and take part of the order is NFT.
00:08:28.218 - 00:09:11.630, Speaker A: And again, you need to call an approval for your make part of an order and then you can match an order. That's the basic architecture. There is a lot of features that our matching engine supports. It supports multiple payouts. So you can specify again the arbitrary set of addresses that would receive the appropriate amount of funds that you specified in the order. It obviously respects all the royalties that it finds in the asset. And it also allows you, I guess that's the most important feature out of all of them.
00:09:11.630 - 00:10:08.734, Speaker A: It allows you to instantly monetize your use of the protocol. It allows you to specify the front end fee. So each front end through which the order was submitted can add the fee on top. And when the matching engine works, it just transfers the fee to the front end address. This is really important for everybody who wants to work on top of the protocol because we understand that you want to have a sustainable business and it's important to understand that there is a sell order and the buy order and each of these orders can have its own respectful fee. So if there is a one front end that specifies on minting, you can only mint through that front end. You are really targeted to acquire the best talent out there.
00:10:08.734 - 00:10:52.174, Speaker A: And these people come to your front end and they mint a token on your front end and they put it for sale on your front end. So when they put it for sale, they create a sell order and the minting front end adds a sell order fee that they will receive once the order is matched. Now this order is in the shared order book. Everybody can match against it. And now there is a wallet. Imagine there is a wallet that doesn't do any minting, but they have a lot of users and they show all the orders for sale to their users. So when the users come to that front end, they create a buy order in respectful buy order to match the sell order.
00:10:52.174 - 00:11:40.930, Speaker A: And now this wallet as a front end adds its own fees to that front end. So now when the orders will be matched, the protocol will receive the fee. The front end that created the sell order would receive the fee and the front end that created the buy order would receive the fee. So there is like a full supply chain from the seller to the buyer. So these are the main things to understand. On top of that we have an indexing layer, the backend that listens to the blockchain to understand all the things that happened. Every NFT transfer, every NFT creation, every NFT burn or a sale is indexed by this layer.
00:11:40.930 - 00:12:29.062, Speaker A: And once you submit your NFT for Mint, you can now query that in the indexing layer. So basically there are all the tools that you need to build either a marketplace or a minting tool or even the contract that wants to interact with other contracts. So as a task for this hackathon is to build something on top of protocol. The sky is the limit in the imagination. You can choose anything. One thing is particularly interesting to wearable protocol. I think as your participation in the hackathon, you can actually build something inside the protocol.
00:12:29.062 - 00:13:16.966, Speaker A: So to improve the protocol, for example, if you want to improve the contract to contract interaction and you want to create a storage on chain storage for orders, that's one task. Or you want to add on chain English auctions that would work directly in the protocol, that's all part of the scope as well. So here is the Wearable.org website with all the resources that you need. You can join this discord and ask for the questions. And basically the two most important, the three most important links here is like contract addresses. It's our contracts deployed on Mainnet and Brinkiba and Ruptin.
00:13:16.966 - 00:14:11.130, Speaker A: You can find the addresses here as well as API reference and tutorials for the protocol. So API Reference is the most up to date controller listing for the indexing service. Here you can find order controller and code controller. Item Controller so item controller is the place where you query all the items. For example, you can query items by owner or by creator collection. Then you can query the metadata of an item by ID or to get the same item by ID. If you already know that here on the right side you can find the API endpoints to query the protocol.
00:14:11.130 - 00:15:09.630, Speaker A: Here again Robstein, Rinkibuy and Mainnet. All three endpoints are here. Some example on answers there is a lazy Mint controller if you want to create a lazy mint items that would leave inside the protocol and some other helpers. So if we try to get on the overall protocol flow. So at first you need to create an item. In order to create an item you need to call the lazy Mint controller if you want to create a lazy Mint item. Or you can call your contract mint and transfer function on Wearable ERC 720 111 55 contracts.
00:15:09.630 - 00:15:46.726, Speaker A: There is a little helper function that would help you to generate the token ID that you need to pass. We are pre creating the token IDs. They are not created as the part of the minting, you need to specify them. So you're calling here the Generate token idea. Then you create a lazy mint item. In order to create the Lazy Mint item you need to combine a structure something like this. So it's a type contract, token ID, Uri creators, royalties and the signature.
00:15:46.726 - 00:16:36.906, Speaker A: So you need to sign this message without this field in order to create a Lazy Mint and then you submit it here basically to the Create Lazy Mint. As soon as you did that, you want to create a cell order. So to create a cell order you're going to in code controller and you are creating the order. So the maker is you, you basically want to make an asset. The asset is ERC 721. Here is an example for the bid. So if you want to create a sell order the asset would be ERC 721 and here would be the let me find it here.
00:16:36.906 - 00:17:46.980, Speaker A: Yeah so ERC 721 and the contract and Token ID you pass it here contract token ID in ERC 721 then the taker is empty and what you want to get in response you want to have ten ETH in response. Salt is the random number start end is the time constraints for that order. To get life, here is the data field. You need to have the variable V two data and you can specify payouts and origin fees. Origin fees is this front end fees that you want to pass and you need to sign this order, this signature. So why encode controller? So this controller would return you the special encoded the encoded structure that you need to sign using EIP seven one two. It's the signature, it's the typed signature that you need to use to sign this order.
00:17:46.980 - 00:19:11.066, Speaker A: So basically this encode controller is returning you all the data that you need to pass into EAP seven one two to create the order to sign the order on the front end it also gives you the transfer proxy address. It's the address to which you need to approve your item. You're selling an NFT, you need to approve the spending of that NFT to this particular address. So if you used the Wearable ERC, 721 or 1155 contract, you don't need to call any approval just because all the items are automatically approved for our own exchange. If you use wearable contracts I don't know how clear that is, but I know that as soon as you will start to dive in into the protocol, this video would be helpful to you. So try to release on that. So again we created an item with the Lazy Mint or an actual item and now we call the encode order controller that basically is building the order structure for us that we need to sign.
00:19:11.066 - 00:20:05.578, Speaker A: So if that's a lazy mint item the order encode controller would understand that this is the lazy mint item and it would automatically prebuild the correct structure again. So you're signing that and you go to the order controller, create or update order. This is the endpoint and you're putting the signed order here. You signed it with the EAP 7112 seven one two and you put it here in this endpoint designed order. Now what you can actually do, you can get all bits or get all cell items for sell orders by maker, by item, by collection. So the order is already there on the protocol and now you want to query the protocol for all the orders. This is when you're making a listing.
00:20:05.578 - 00:21:08.190, Speaker A: You're querying the protocol for the orders for this particular item or for the list of items and now what you want to match that order. So again in order to match the order you need to create a counter order. So basically just the mirror, the order to switch maker and taker places and to sign with the new wallet that is making the bid the buy order. Instead of doing that by hand, we created a nice little helper for you which is called prepare TX for order. So if you found an order then you can call prepare TX by order. Here's the endpoint. It takes the hash of the order as the order ID and the prepared TX and all you need to supply is the maker.
00:21:08.190 - 00:22:25.930, Speaker A: Basically you who is creating the contour order is the amount. So if the sell order was for ten items and you only want to buy two, you put two here in the amount and you can specify the payout and again, the fees. And that little helper would return you the transaction, the pre built transaction, the two and data. So that you can actually call it, you can actually call it with web3. You pass this tool and data to the Web Three provider that you have. And also, if that's a buy order and you want to attach the ETH as the value to pay for the order, it would tell you how much ease do you need to attach. And if that's ERC 20 it would also tell you how many ERC 20 tokens you need to buy and it would give you the transfer proxy address to which you need to make an actual approval because the contract would need to be able to spend your ERC 20 tokens without your transactions.
00:22:25.930 - 00:23:32.230, Speaker A: Again, not sure how clear that is but that's all you need to actually match the order. So I would go one step further. So here are the docs. It more or less describes the overall flow of the protocol. Some calls from here are outdated that was pre released for the previous hackathon so please don't pay attention to exact calls here. The up to date version is here, it's API reference but you can read what I just said about the overall structure of how the protocol works. Again, the best link here is under the Docs tutorials, there is an example code on GitHub that our CTO prepared for you to actually see the example code which does a lazy minting and creates a sell order and submits a sell order to the protocol.
00:23:32.230 - 00:24:38.070, Speaker A: That's what you need in order to use the protocol. Okay, I'll stop here and let's see if anybody has questions. There are several questions in the chat. The question. Does wearable support Zora protocol? NFTs So Wearable supports any NFTs out there that is compliant with ERC 721 and 1155 standard. If you want to create an order, the only thing you need to do is to specify the contract and ID and make sure you don't forget to approve the contract to spend your NFT. And the question from Nadit is are the NFT files stored on the IPFS or any pinning services? So yes, Wearable items are stored on IPFS.
00:24:38.070 - 00:26:07.700, Speaker A: The protocol does not actually give you the endpoint for IPFS. So if you want to create the NFTs that are stored on IPFS, please use Wearable UI or your own Pinata and pinata credentials to upload to IPFS. The next question does Wearable support any other networks besides its main net? So we don't support that yet, but this is on our really short term plans to deploy that to Polygon, Matic and to several others EVM compatible networks, probably after Matic that would be Moonbeam to support Polkadot version or Xdai. So we completely rebuild our infrastructure to support multi chain. We will do that really soon. If you want to build a product for any other network, please just refer to Robston or Rinkibyte version for the Karen hackathon and then we can extend we can work with you to deploy that to the other network. You can deploy these contracts yourselves, but you won't get the indexing service.
00:26:07.700 - 00:26:20.440, Speaker A: The next question do we need Rari tokens to interact with protocol? I completely forgot to tell about this. Emily, do I have a couple minutes more?
00:26:21.450 - 00:26:25.990, Speaker B: Yeah, sure. We can extend by about like five or so minutes. That's no worries.
00:26:26.650 - 00:27:17.142, Speaker A: Okay, thanks a lot. So you don't really need Rarity tokens to interact with protocol. The best thing is that you will actually get Rari tokens for interacting with protocol. There is the app mining program that we are developing right now and if you brought some volume to the protocol, you would be granted with the Rari token because we want to build a Dao that would govern the protocol and the best citizens of that Dao is the users of the protocol. And Kevin is asking is the unlockable content feature only component of Wearable.com? I don't imagine it is in the Wearable.org protocol, but just wanted to make sure.
00:27:17.142 - 00:28:05.666, Speaker A: So unlockable content is done on the back end so it would be part of the protocol soon. We didn't make a public API yet. If you want to interact with unlockable, you can try to just find the call for the Unlockable API endpoint from the network tab of your developers tool in the browser and use it. If you want to build a project that would be utilizing unlockable, I encourage you to do so. It will be part of the protocol. It can't be done on chain. It's off chain with the backend will wearable support NFTs whose balance of function behavior have been changed.
00:28:05.666 - 00:28:15.900, Speaker A: As far as I remember, we don't use balance off of the NFTs at all, so we only use transfers and approvals in order to sell them.
00:28:19.870 - 00:28:49.254, Speaker B: Okay, great. Thanks so much, Alex. Some great questions coming in there. And if you have any more questions, alex is in the Sponsor Rarible Channel in Discord, so feel free to ping him in that channel as well. Big thanks for the session and maybe you can share those slides and we can post that in the Sponsor Rarible Channel as for everybody to use as a resource. But thanks so much.
00:28:49.372 - 00:28:51.110, Speaker A: Where there will be a recording.
00:28:51.530 - 00:28:58.386, Speaker B: Yes, this is available on YouTube and we can link this in your channel as well for people to have a look at posts.
00:28:58.418 - 00:29:04.486, Speaker A: Yeah, that would be really great. Thank you everyone for all the great questions. I am excited to build some products with.
