00:00:07.220 - 00:00:28.610, Speaker A: Hi, everyone. Welcome to the Polygon building with Polygon workshop. Here with us, Arjun and Pranav, who will go and do the deep dive with you. So on this, I'll let them give a quick introduction to themselves and kick off the session. Thanks for joining us this morning.
00:00:30.100 - 00:00:39.256, Speaker B: No, sure. Definitely great to be here. So just as a quick intro so hi, guys, I'm Arjun. I head growth for Polygon and, yeah, Pranav.
00:00:39.388 - 00:00:43.300, Speaker C: Hey, guys, I'm pranav. I lead solutions at Polygon.
00:00:45.960 - 00:01:35.856, Speaker B: Right, and again, just to quickly just jump into it. So we just have like a quick 30 minutes. So I'm just going to just take maybe five to seven minutes to just quickly cover a few things about Polygon, like who are we, what is our plan, where we come from? And then from there we leave majority of the time to Pranav to sort of COVID how to deploy on Polygon. What are some of the things you need to keep in mind? It's basically the same as Ethereum, but we'll just cover some of those points. Let me just hit this button right here and I hope you all can see my screen today. I'm just going to quickly just talk about what our plans are, so just to dive right into it. So the story of Polygon actually starts in 2017 when we were called Matic Network.
00:01:35.856 - 00:02:39.364, Speaker B: In 2017 is when the first conversations around scaling started because of the CryptoKitties episode. And what we kind of realized at the time is that unless and until we are able to bring a very high degree of scalability to the Ethereum Network, we would never get any serious adoption of blockchain or any kind of very scalable solution ever deployed. Because at the end of the day, if this technology is not scalable, then it will not be adopted. So at the time, Vitalik had come up with a paper citing plasma technology as a way of solving for the scalability problems of Ethereum. One of our founders was a plasma researcher and he kind of came up with this hybrid plasma POS chain approach where essentially our chain kind of is tethered to Ethereum. It behaves like a commit chain, unlike a pure side chain. So what happens is that every few blocks or every 256 blocks on our chain, we sort of merkel root those transactions.
00:02:39.364 - 00:03:19.460, Speaker B: So in a way, we sort of compress those transactions and we put like, a checkpoint on the Ethereum chain so it acts like a commit chain. And what this did is this allowed us to greatly ramp up the throughput of the chain. At the same time, the costs were extremely low and it was a great solution and it still is like, it's still under development. Our main net for our hybrid plasma POS chain went live about nine months ago and since then we've seen over 17 million blocks. We're doing close to about almost 200 to 250,000 transactions a day. So that's roughly 20% of ethereum on a daily basis. And of course, we have almost over 200 D apps deployed in this chain.
00:03:19.460 - 00:04:05.524, Speaker B: And just to sort of go deeper into the rabbit hole here. So when we developed this technology, we kind of also realized that this solution to scaling kind of created another interesting problem statement, right? So ever since 2017, when plasma was sort of the prevalent thinking around scaling, we've seen other interesting scaling techniques come out as well, like Optimistic Roll up CK roll ups. There might be some new ones in the future as well. And what we kind of realized is that every technology has its pros and cons, right? Advantages, disadvantages. So there's no one size fit all scaling solution for ethereum. At the same time, the L two landscape continuously keeps changing. So there's always some new approach to scalability as the march of technology inevitably goes on.
00:04:05.524 - 00:05:19.580, Speaker B: At the same time, we also kind of realized is that all of these approaches to scaling are sort of being developed in silos, right? So there's no formalized framework that offers multiple solutions. So developers are constantly confused on which technology is better, where should they go for what. And at the same time, because the scalability problem exists, we had multiple we have this never ending list of ethereum killers which constantly keep popping up again, mostly because of the scalability and cost concerns of ethereum. So what we kind of realized is that we needed to build a sort of a generalized scaling layer which acts like a Swiss Army knife for ethereum scaling and infrared. So the easiest way to visualize is to imagine ethereum and then scaling layer around it, right? And in this scaling layer, we would offer all the different abilities a person or a developer might need to build any kind of whether you want to build CK roll ups, whether you want to build Optimistic Roll ups, whether you want to build like your own standalone chain as well. We'll also build the interoperability here. And essentially what that does is that kind of turns sort of ethereum into a multi chain system.
00:05:19.580 - 00:05:59.976, Speaker B: So one sort of ethereum in the middle and then all of these different sort of scaling solutions around it. And this essentially is what polygon is all about, right? So all of these other technologies like Optimistic Roll up chains, ZK roll up chains, we are also developing those. Of course, it will take them a while before they become production ready and we are researching that as well. But for now, the production ready, tried and tested solution is our plasma POS chain. But what we kind of realize is that in the future, all of these technologies should be available to the developer and the developer should get to decide what kind of solution they want to use. And of know, like I said, again, we've blown past all of these numbers as well. Ever since the launch of ave as well.
00:05:59.976 - 00:06:30.044, Speaker B: And just to quickly talk about scalability. So when I say scalability, high scalability, what does it mean? So in terms of metrics it means that the transactions on our chain are final in 2 seconds. So block finality. So transaction finality happens in 2 seconds. So anytime you click something like there is some action in 2 seconds. Almost like a Web two kind of environment like when using Uber or Netflix, the average transaction cost is $0.4. It's practically free, right? At the same time we are EVM compatible.
00:06:30.044 - 00:07:10.336, Speaker B: So anything which works on Ethereum works on our network. We use the same ERC style assets. So that means all the token standards and all the tokens you're used to on Ethereum, you can use them seamlessly. On our network we don't have our own custom token standard or anything like that. At the same time we checkpoint transactions. Like I was explaining before, in a hybrid plasma POS approach, we checkpoint all the transactions onto the Ethereum network to ensure that all your assets are secured by Ethereum security. And when you have very fast transactions with very high throughput at very, very low cost at the same time with high security as well, then essentially this inevitably brings the focus to where it should be, which is on user experience.
00:07:10.336 - 00:07:40.984, Speaker B: So if you can design great and compelling user experiences then that is what will get the next million blockchain users into blockchain technology. And yes, of course, we've grown very quickly and we have an exponentially growing developer community and I encourage you guys to be part of it. I'm just going to quickly run through a few of the slides. So again, we have amazing advisors now who've joined hands with us to help us build the future of Ethereum Scaling. People like Ryan sean Adams from Bankless. Anthony Sasano john Lillich alsa Jameson. Our core team from Matic remains the same.
00:07:40.984 - 00:08:25.364, Speaker B: We also have Mihailo Village, one of the top ten researchers of Ethereum who has come on board to help us build this new future. And again, I don't want to take too much time, but I'll just quickly cover. We've got pretty much every major DApp out there, whether it's in DeFi or gaming is essentially deploying on our network. And I'm going to be updating all of these lists because we have amazing deployments. So what I'm going to do is I'm just going to stop right here and just gives you kind of a brief flavor about what polygon is all about. And then I'm going to just hand it over to Pranav, who's going to take you through how easy it is to deploy any kind of smart contract or solution on our chain. So.
00:08:25.364 - 00:08:26.700, Speaker B: Over to you, Pranav.
00:08:26.880 - 00:09:01.020, Speaker C: All right, thanks Arjun, for the brief intro. And the one thing all the developers definitely think about is these are the scaling solutions and there must be some other technologies involved in it and that will involve us to learn some other stack, learn some other language and do things around it. And that's not the case with Polygon. And that makes polygon developer first approach on Forefront. If you are an Ethereum developer, you're already a polygon developer. You don't need to make changes in your code. You don't just have to understand the psychology of our layer to chain, you have to understand our commit chain.
00:09:01.020 - 00:09:30.952, Speaker C: And your code remains the same. Everything else remains the same. Right? So I'm going to give you a brief intro of how being an Ethereum developer you can be a Matic developer. We'll start with deploying our smart contract on Remix. I'll appreciate if you can follow along, otherwise you can just watch this recording and stuff. We'll first of all deploy a smart contract on Remix, right? And we'll deploy it on Matic network doing some one or two changes. Then we'll use Truffle to deploy a smart contract on the Matic blockchain.
00:09:30.952 - 00:10:11.832, Speaker C: Then we'll go through a very peculiar and very important concept which is network agnostic feature for doing network reliant, network specific transactions which are gasless. Then we'll cover something like a bridge and at last I'll be open to questions. A lot to cover, a lot to discover. I am really excited. So it would be great if you can just have your computer started and we can maybe just rumble through it. So, all right, let's just start with again, whatever I am talking about will be available in this talk. You can just google something like Bit Lymaticworkshop, this link I'll give you after the workshop so that you are aware of it.
00:10:11.886 - 00:10:12.344, Speaker B: Right?
00:10:12.462 - 00:10:57.576, Speaker C: So this is a general smart contract as I was talking that we are EVM compatible chain. Whatever works on Ethereum works on Matic network. That not just includes the smart contract code, but also the libraries involved in it, right? So this is the best part about being on the Polygon chain. All the smart contracts that Open Zaplin has developed for Ethereum works for Polygon as well. And in that sense, most of the libraries that you have on Ethereum will work on Polygon as well, right? Web three, Ether JS and everything like that. So, just to tell you guys, this is a normal ERC 721 multiple contract. We are going to deploy it first on Ethereum and then try to do the same on Matic as well, right? So let's just I'm on Gordy testnet, let me try to deploy it.
00:10:57.576 - 00:11:34.692, Speaker C: Deploy, sign the transaction, confirm it and it will get deployed on the Gorli testnet, right? First of all, now this will happen and it will take some time. Even the test nets on Ethereum are a little slow. Anyways, moving forward now we'll do the same on something like a polygon commit chain, right? So the first thing that we have to do in that case is we have to include polygon in our network. So what we have to do. I hope you're able to see the screen. Right? First of all, let me just open the docs from where you can just copy the things that are required application files. Again, I'm moving a little fast.
00:11:34.692 - 00:11:56.024, Speaker C: You can just have this recording and do it in your own pace. But yeah, go to the Network Details network feature here. This is the place I have to be here, like RPC. I'll get it from here. And the chain ID is 137 for main net. And for Mumbai test Networks, it is 8001. Again, the Matic mainnet is the main net one.
00:11:56.024 - 00:12:22.564, Speaker C: And the Mumbai testnet, which is corresponding to Girly is on the 8001 chain ID. All right? So let's first do it on the Mumbai Girly testnet, right? Let's include that on the MetaMask custom RPC. Custom RPC matic testnet. RPC. Rpcmbai Matic. Today, I'm getting this from here. Chain ID is not 137.
00:12:22.564 - 00:13:05.084, Speaker C: It is 8001 for testnet, right? It is Matic. Explorer is also there. We also have an Explorer, right? Save it. And it is added to our test network, right? Similarly, I've done for Brave as well. So here you can see, right? Yeah. Now, the second thing that I need to do is get some faucets, right? For myself. So the first thing that I have to do is go here, faucets, Matic type in here and I'll be here, right? And I'll be getting some faucets for deploying things on Matic, right? Just copy the address paste in here, submit and if I confirm, you'll be getting the faucets that are required.
00:13:05.084 - 00:13:30.186, Speaker C: So, once I have everything, I've set the network on MetaMask. I have the faucets. Now let's deploy a simple ERC 720 on mintable which also has open Zapplin libraries with it, right? Let's just do it. This is for Gurley, right? This works relentlessly for Girly. Now let's do it for Matic testnet. So I'm on Matic Mumbai right now. Let's deploy sign the transaction.
00:13:30.186 - 00:13:57.302, Speaker C: This is on Matic Mumbai. You can see right now, confirm and it will happen. So you can see right now that I didn't even go through this. I didn't even change one piece of the code, even one semicolon. And I was able to deploy my code as I was able to deploy an ethereum testnet. Similarly, I was able to deploy on Matic as well. That's the beauty of being on EVM compatible polygons commit chains, right? This is the first part.
00:13:57.302 - 00:14:21.662, Speaker C: The second part that we'll be doing is we'll be deploying our this is just for the smart contracts. Then the second thing that we have to do is make a decentralized application out of it. For that, we can use something like something like Hard Hat or Truffle. I'll be giving you this example on Truffle. But you can also try it on Hard Hat. If you want to try it on Hard Hat, this is the place you have to go deploying automatic using Hard hat. This is a place I would suggest you to check out.
00:14:21.662 - 00:14:35.922, Speaker C: But I'll be doing it on Truffle. So this is what we'll do, right? Let me just go to this code. This is a simple Truffle package that I've installed for simplicity, right? And it has this okay, let me just expand this. Okay.
00:14:35.976 - 00:14:39.618, Speaker D: Now, you're able to see cool, right?
00:14:39.704 - 00:14:57.290, Speaker C: This is Truffle JS Config file. Let's just, first of all, comment this out, right? Let's just comment it out. This is a normal Truffle config file. If you go for Truffle, unbox any of the packages, you'll be getting this kind of environment. And let's just deploy something. An ash.
00:14:57.630 - 00:15:06.480, Speaker D: CLI. C-O-G. CLI. All right?
00:15:07.250 - 00:15:12.160, Speaker C: Okay. It's running on 8545. And let's first of all, deploy on a local testnet, right?
00:15:12.530 - 00:15:16.770, Speaker D: Truffle, migrate, reset.
00:15:19.670 - 00:15:27.326, Speaker C: And our contract, this is the contract that I've deployed will be deployed on the local networks, right? You can see over here that they're.
00:15:27.358 - 00:15:29.330, Speaker D: Deployed on the local networks.
00:15:29.670 - 00:15:51.686, Speaker C: Cool. So this is the first thing they are deployed on local test note. Now we want to deploy it on Matic network. How do we do that? Again, I'll be borrowing not more than 14 to 24. That is ten lines of code and your contract. Without changing the contract structure or without changing the migration files, without changing the SRC code structure, I'll be deploying them on the Matic as well. This is the beauty of magic.
00:15:51.686 - 00:16:12.098, Speaker C: And this is the reason why people love Polygon, right? Let's just do it. Ruffle my great network. First of all, let me just uncomment this again. This is what you'll find here as well. This is a code Snippet I've copied from here, by the way.
00:16:12.264 - 00:16:13.620, Speaker D: From here, right?
00:16:14.310 - 00:16:15.886, Speaker C: This is the code Snippet.
00:16:16.078 - 00:16:17.026, Speaker D: All right.
00:16:17.208 - 00:16:19.890, Speaker C: This is one polygon.
00:16:20.050 - 00:16:20.678, Speaker B: All right?
00:16:20.764 - 00:17:21.324, Speaker D: Network polygonrest. Everything is either it's not correct. Now, let's see again truffle, migrate, reset, network polygonreset. Oh, wait.
00:17:21.522 - 00:17:22.972, Speaker C: First of all, let me just close.
00:17:23.026 - 00:17:50.910, Speaker D: This is wider, okay? Wire, right?
00:17:50.980 - 00:18:33.934, Speaker C: So it will be deployed like this and we'll be deploying and we'll be set on the Truffle networks as well. Now, let me tell you the third part of it, which is different for L ones and L two S, right? Which is the one in which let's say you have some tokens on Ethereum and you want to okay, before that, just to tell you guys how we interact normally, let's say I want to interact with the DAP, which is deployed on Ethereum. How do I do that? First of all, I'm on Ethereum main network, right? And I then do the transactions over there. And that's how it works. If you are on Matic, you will have to do something like a custom RPC and then try to do things with that. And that is not at all which is scalable or that is not at all which is the way we want things to work upon. So there are two approaches to work upon that.
00:18:33.934 - 00:18:44.740, Speaker C: The first one is introduced by MetaMask itself. This is the blog post. I would suggest you to read out about it. So how that works is that in this application, let's say this is the application you have, right?
00:18:49.670 - 00:18:54.130, Speaker D: Okay, let's say I'm on ethereum, okay?
00:18:54.200 - 00:19:26.526, Speaker C: Here you'll find that this is the place I have to go and I'll be able to automatically switch my network connect with Matic mainnet, right? This is one of the ways. This is introduced by MetaMask itself. If you're developing a decentralized application and to reduce the user friction, you can use something like this particular widget to make it happen. Just one click and this particular network will be added, right? This is one of the approaches. Second approach is about network agnostic features. How do we work upon that is that if you are on any network, let's say you are on Ethereum, you are on Matic. Doesn't matter.
00:19:26.526 - 00:20:04.682, Speaker C: You will be able to interact with the decentralized application that is made on the Matic network using something like a relayer infrastructure, right? This is how it looks. You can use something like Biconomy or Gas station network to make it happen. So this is the decentralized application, right? You will be giving your assigned transaction to this relayer. And this relayer will be doing the transaction for you on the Ethereum virtual machine, right? So you just do a transaction and that relayer will do the transaction for you on the Ethereum virtual machine. And that's how user will be. Not he just has to sign the transaction, nothing else. He just has to provide his public private key.
00:20:04.682 - 00:20:37.510, Speaker C: And the rest of the things will be taken care of by the relayer infrastructure. If you want to develop your own, you can use something like GSN. But I would suggest you to try out something like Biconmi, which has MexA SDK which gives you the relayer infrastructure which you can directly utilize. To run this relayer infrastructure, the decentralized application developer will just give his public private key, sign the transaction, and rest of the things will be done by the EVM compatible chain, right? This is using native meta transactions. And yeah, that you have to include something like EIP seven, one, two. You have to add that part. All right.
00:20:37.510 - 00:21:06.794, Speaker C: So this is the way I'll give you a small demo of how that particular thing works. So this is, let's say, a minter that somebody in the community had created. Let's say I want to mint an NFT. Oh yeah, this is network network agnostic demo ERC 721. Let's just take any this particular thing. Let's say I'm on any network. Let's say I'm on gordy, right? Let me be on gorli.
00:21:06.794 - 00:21:22.334, Speaker C: Let me be on Ethereum main net. You can see right now I have zero Ethereum on Ethereum main net, right? Still, I'll be able to interact because this particular application uses network agnostic feature and relayer infrastructure, right? Submit the transaction. Oh, am I connected, by the way?
00:21:22.392 - 00:21:23.000, Speaker D: No.
00:21:24.170 - 00:21:50.080, Speaker C: Okay, now I am connected. Now let me just submit a transaction. It gets uploaded to IPFS. See here, I just have to sign the transaction, right? That's what I was talking about. You just have to sign the transaction, and the relayer will do that transaction for you on the blockchain, which is something like Polygon, right? I just have to sign the transaction. I don't have any ethereum. That's okay.
00:21:50.080 - 00:22:15.864, Speaker C: But the transaction will happen, and it will happen on the Ethereum network. And I don't even have to pay a penny for that to happen. See here you can see the Matic Explorer where this particular transaction actually happened. Again, this is a really good UI feature that you can add. You can use something like network agnostic feature, and people just keep on signing the transaction. They don't have to spend the gas required, and everything happens via the relayer infrastructure. Really great approach that Polymarkets also used.
00:22:15.864 - 00:22:31.388, Speaker C: And their user interface looks very seamless. And, yeah, that's one of the ways to improve your UI. And that's what Polygon actually helps you in facilitating. Again, moving forward. The last thing that I wanted to talk you about was the bridge. Let's just go to the docs.
00:22:31.564 - 00:22:32.816, Speaker D: Just go here.
00:22:32.998 - 00:22:39.810, Speaker C: Okay, so here I'm on the docs. You can see in the docs that this. So let's know let me open Google.
00:22:40.420 - 00:22:46.790, Speaker D: Chamboard to make you explain, if that's possible. All right?
00:22:48.680 - 00:23:55.128, Speaker C: Okay, so let's say this is Ethereum main network, right? And this is the Matic network. And now let's say you want to transfer you have some tokens deployed on Ethereum and you want to transfer them on the Matic network. For that, we have a decentralized bridge to make it happen, right? I'll not be going into the mechanics of how this particular thing works, but how actually it functions is that you just have to deposit in the predicate contract that Matic has deployed on the Ethereum network that will send a transaction on the child chain proxy, and the tokens will be minted on Matic. Now, let's say you want to exit from this particular thing. Then, first of all, they will be burned over here, right? And the proof of the burn will be submitted over here, and your tokens will be unlocked. They were, first of all, locked when you do this particular transfer, so that there is no double spending or double token IDs on Ethereum and Matic as well. So this is how actually the transfer of tokens from Ethereum to Matic works in a decentralized fashion, right? And this is the most trustless approach for making a bridge and transferring assets, let's say ERC 721, ERC 20, ERC 1155.
00:23:55.128 - 00:24:15.760, Speaker C: And to facilitate this, we have created something like Matic JS to make it work. So you don't have to understand the mechanics if you just want to go ahead and develop it. You just have to use Matic JS library. This is the matic JS library NPM package you just have to utilize that if it opens.
00:24:16.260 - 00:24:17.168, Speaker D: All right.
00:24:17.334 - 00:24:40.052, Speaker C: So this is the Matic JS library. Matic JS. You just install it once you have installed. You just have to utilize four of its function to do this. Transfer from ethereum to matic and let's say from matic to ethereum. Okay, I come over here and you can just see. First of all, let's say I want to transfer ERC 20 tokens from Ethereum to Matic network.
00:24:40.052 - 00:25:14.336, Speaker C: Okay? So this is the first transaction that I have to do that is approved, right? And this is how it actually works. Then deposit. So now my tokens are transferred from Ethereum to Matic. Now, let's say I want to transfer my tokens from which are currently on Matic to Ethereum again. Similarly, I have to, first of all, burn Maticpause client, burn ERC 20 and then retrieve them on the Ethereum networks. So this is the way for transferring assets from Ethereum to Matic. If you want to get the field, offer this particular thing, you can definitely check out this wallet.
00:25:14.336 - 00:25:41.776, Speaker C: This particular wallet that Matic has created. And this is for the test network. Let me be on goalie and come in here. Okay, I'm on the Kali network. I just go here, which is the bridge part. And now I'll be able to transfer assets from ethereum to matic and matic to ethereum using Pause bridge. Right? I have any tokens currently, I don't have any, so I won't be able to show you.
00:25:41.776 - 00:26:02.132, Speaker C: But this is the best way out to do your deposits and transfer of ERC 20 tokens from Ethereum to Matic and Matic to Ethereum. Again, the development is very easy. Matic is a developer first approach. So what you have to do is just go to Matic JS. This is the matic JS file. Utilize these four functions. First two for transferring ERC 20s from ethereum to matic.
00:26:02.132 - 00:26:35.348, Speaker C: And the last two is for transferring tokens from Matic to Ethereum. And seamlessly, you will be even able to transfer your assets from Ethereum to Matic and similarly from Matic to Ethereum. Everything that I've talked about is in this particular doc that you can see over here. And yeah, everything like something like Oracle if you want to use chainlink or something, every documentation is present over here. If you want to use indexers, maybe the graph or covalent, both of them are actually present over here. And yeah, this is the very exhaustive docs. I would suggest you to please go ahead and check this out as well.
00:26:35.348 - 00:26:54.004, Speaker C: And also, if you want to just try out your own ways of doing this. ERC 20 token transfer from Ethereum to Matic, Matic to Ethereum using Matic JS and you need the code for that. We also have created that. This is the one. Just go here and just click here. This is the repository that we have created. It has everything that is required.
00:26:54.004 - 00:27:20.796, Speaker C: It also has the bridge. So you can just transfer your tokens from Ethereum to Matic and Matic to Ethereum. One way of doing this is creating your own UI of the bridge for doing things like what Ave Gotchi did. They created their own Avigochi bridge for doing that particular thing. But the other way out is using this wallet that Matic team has created for transferring your tokens from Ethereum to Matic and Matic to Ethereum. So yeah, that's pretty much it. From my side, we have covered a lot.
00:27:20.796 - 00:27:48.408, Speaker C: We first of all deployed our contracts on the remix side and make it work. Then we deployed our contracts on Truffle and they were also working very much fine. Then we discussed something like what MetaMask has added. You can add Matic using one click. That's also possible. Then we discussed something like network agnostic feature for doing transaction. In between, we discussed two tools which was Faucets and Explorer for facilitating your experience on Matic making it look like Ethereum.
00:27:48.408 - 00:28:39.084, Speaker C: Right? At last we discussed a little complex procedure which is required for doing communication and asset transfer from Ethereum to Matic and Matic to Ethereum that involved the bridge. And at last, one last thing which is again created by this is a community project that is created by some Matic lover. Just wanted to show you the stats of how blazing fast Matic is and how cheap it is. It is almost free to do a transaction on Matic network. This is the comparison as well for minting an NFT and things like that and yeah, so definitely would suggest you in this hackathon to try Matic network out and build a particular project. We have a lot of bounties whose details is there in the discord. If you're developing something and you're facing some issues, let's say in the bridge or maybe in the deployment or something, please tag me in there.
00:28:39.084 - 00:28:50.530, Speaker C: I'll be super available over there all the time. Please tag me. And let's make our development super strong and super blazing fast with Matic. So yeah, that's all.
00:28:51.620 - 00:29:20.564, Speaker A: Thank you so much, Pranav. That was a great presentation. I trying to crush a lot. So really invite everyone to join you guys on the Sponsor channel in the discord, you'll have access to them and their team. There's a lot of resources already that are pinned to that channel and they will probably post more if you ask specific question. It's all going to be there. Thank you so much again, Pranav and Arjun for joining us today and presenting any questions you may have.
00:29:20.564 - 00:29:30.510, Speaker A: We are running out of time so I'll invite to go and leave them in the Sponsor Channel. And on this I will wish you a great day.
00:29:32.160 - 00:29:34.250, Speaker B: Thank you so much. It was great to be here. All right, take care guys.
