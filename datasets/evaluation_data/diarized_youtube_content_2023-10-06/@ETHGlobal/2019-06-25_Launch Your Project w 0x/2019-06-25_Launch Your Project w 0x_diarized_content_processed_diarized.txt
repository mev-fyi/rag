00:00:00.330 - 00:00:42.570, Speaker A: So, just a show of hands, who here has heard of Xerox before? Maybe built something with Xerox? Okay, so pretty much everyone cool. Great. Good crowd. So I'm here to talk about Xerox launch kit. With Xerox Launch Kit, you can start your own Xerox relayer in under a minute. So what does this mean? What is Xerox? Well, we sort of have this vision that the world's assets are becoming tokenized, meaning different assets of value. Are we going to be placed on a public blockchain to improve liquidity and ease of access? And Zero X is going to be sort of this exchange layer that underpins all these different types of tokenized assets, being able to trade all these different types of items that might exist, as well as different modes of exchange that might be required to trade something.
00:00:42.570 - 00:01:21.990, Speaker A: You can imagine auctioning off your CryptoKitty is going to look much different than trading one stablecoin for another stablecoin. But luckily, Zerox is flexible enough to support all these different modes of exchange. So we sort of provide this core settlement layer for trades where people sign orders off chain and then settle them on chain when they find a counterparty. And you can use this free to use, open source, noncustodial platform to build any sort of different relay that you want. So in the top here, we have an example, we have Paradex. They sort of employ one different style of relaying of exchange. You have radar relay, sort of a different style of model, and then you have Vale as well.
00:01:21.990 - 00:02:09.462, Speaker A: They're relaying shares in Auger markets as opposed to just your standard ERC, 20 utility tokens. But they're all using Zero X under the hood to settle trades between two different people without having to have a centralized exchange, custody their funds or execute the trade on their behalf. And so this is what we mean when we talk about having a relayer for every different market. Trading collectibles on relayer like emoon looks much different than trading commodities on a relayer like radar relay, which looks much different than trading shares in a prediction market on a relayer like Vale. Many different modes of exchange, many different types of assets, but all using Zero X under the hood. So if you want to use Zero X today, you'd be probably interested, most likely in using it to build your own relayer. Maybe you have a new type of asset that you want.
00:02:09.462 - 00:02:44.990, Speaker A: You've created a new token and you want to create a first party marketplace for it. Maybe there's some new mode of exchange or some new asset that you've discovered and you have a really good idea for creating your own relayer. And we want to make that really easy for you to do. So a couple of months ago, we launched Xurex Launch Kit, which has this tagline of being able to start your own relayer in under a minute. So it's this open source sort of bootstrap template for building your own relayer. And we provide this GitHub repo that you can clone and in under a minute start your own sort of server that's going to host orders from different users and then serve them up to people who might want to trade them. It comes with a TypeScript and a JavaScript code base.
00:02:44.990 - 00:03:29.358, Speaker A: We include an API that complies with our sort of standard relayer API spec, so really easy to share orders or for traders to plug into your API and start filling orders that you might be serving. We automatically validate and prune orders on your behalf so you don't have to worry about writing code to verify that orders are correct or non expired. We take care of all of that and then we have the SQL At database for storage. But previously people had to develop their own UIs for LaunchKit, so it was just a server. And if you wanted to go build your own stablecoin relayer for a particular locale, you would go actually write that on front end. And one of the largest pieces of feedback that we got was that people want a sample front end as well. So we've been working on two new front ends for Xerox Launch Kit that we're really excited to share with you guys today.
00:03:29.358 - 00:04:17.486, Speaker A: One for trading ERC, 20 tokens and sort of looks like maybe your standard commodities exchange on the left, as well as a front end for trading crypto collectibles or ERC, 721 tokens. So this looks more like maybe like an Ebay or something like that, but both using Launch Kit to sort of store those orders and serve them and then all using zero X under the hood to actually settle these trades. So it's a free relayer for you, Jim. It's convenient professional react code base that you can use as a template for building your own relayer. So we support different types of orders, we validate your orders. The 721 relayer comes with a Dutch auction, so you can actually auction off different crypto collectibles that might need this sort of mode of exchange. We take care of wrapped ether, which maybe you've heard of or familiar with.
00:04:17.486 - 00:04:58.120, Speaker A: We sort of abstract all that complexity so you get a really nice user experience. And we sort of default to using MetaMask, but it works with any web3 providing wallet. So we're actually going to do a little demo for the remainder of this time. So if you guys want to follow along, I have links to both the Launch Kit UI, the Launch kit back end, as well as a live running demo of Launch Kit on Covon that you can play around with if you want to get a sort of a feel for how this thing works. So if you go to Launchkitbe for the backend, you can clone both these repos and follow along if you want. And with that.
00:05:00.050 - 00:05:51.036, Speaker B: No. Is this okay? No, not my gray bag. It? No, you should be able to compile.
00:05:51.068 - 00:05:53.170, Speaker A: That into JavaScript as well.
00:05:55.860 - 00:05:59.430, Speaker B: Can we see this? Okay, because it's still kind of too small.
00:06:12.230 - 00:06:20.166, Speaker A: I might just narrate what's going on and we have the instructions inside of both the repos as well. So just like a couple of different commands that you can pick up and.
00:06:20.268 - 00:07:06.446, Speaker B: Use to follow along. So to start right now, I'm starting off in the launch kit back end and you can sort of see when we get started. It really needs actually cool.
00:07:06.548 - 00:07:34.520, Speaker A: So to start, we have both the TypeScript and JavaScript folders, so you can sort of choose your language. Obviously we use a lot of TypeScript at zero X, but you can also compile the TypeScript down to JavaScript if you want. So I've cloned the launch kit back end, that's what you're looking at right now. To start, you're probably going to want to install all of your dependencies so you can just run yarn to do that and we'll download everything that you want.
00:07:34.970 - 00:08:10.696, Speaker B: They've already done this on the computer, so already have everything good to go. And then you want to go into the language folder that you want to use. So I'm going to use TypeScript and we're going to look at the config So source and check out the so.
00:08:10.798 - 00:08:12.428, Speaker A: There'S a couple of different parameters that.
00:08:12.434 - 00:08:18.476, Speaker B: You might want to set for your own back end. For your own launch kit. To start, you might want to check.
00:08:18.498 - 00:08:21.296, Speaker A: Out the whitelisted tokens. So these are different token pairs that.
00:08:21.318 - 00:08:21.776, Speaker B: You want to want.
00:08:21.798 - 00:08:42.180, Speaker A: You want to allow trading on your relayer. So by default we allow any sort of asset pair that you want to be traded on your relayer. So anyone can make an order for trading token A for token B and will accept it and store it, validate it and then serve it up to new users. But if you only want to restrict trading to a few different types of token pairs, you can set those contracts in this parameter.
00:08:43.000 - 00:08:44.788, Speaker B: Also network ID, again, we sort of.
00:08:44.794 - 00:09:12.530, Speaker A: Default to Covon, but you can set it to Mainnet or Roston or whatever your preferred network is. We also have instructions for making this work with Ganache. If you want to do some local development as well, you can set your maker and taker fees. This is how most relayers monetize is, they charge a fee for hosting orders and you can sort of set those parameters there. And then your RPC URL, it comes with a inferior coban endpoint, which helps it work out of the box, but obviously you can supply your own as you want.
00:09:13.620 - 00:09:58.274, Speaker B: So now that we've configured our back end, we can compile the TypeScript. So just yarn build and then TypeScript if you want to use TypeScript. Okay, cool, so we're all good. And then we are going to start our launch kit back end and you can sort of see we print out a couple of logs when you get started along with the config and I can query it in different panels and you can just sort of verify that it's actually running on four 3000 and.
00:09:58.312 - 00:10:01.380, Speaker A: Serving up orders that are being stored on this back end.
00:10:01.750 - 00:10:17.608, Speaker B: So now that's all running, we can switch over to the LaunchKit UI, which is sort of the new thing that's just come out. So it's all static files, but we.
00:10:17.614 - 00:10:21.130, Speaker A: Do include sort of a simple server just so you can get started. So.
00:10:23.260 - 00:10:24.744, Speaker B: You can serve this up on.
00:10:24.782 - 00:10:26.376, Speaker A: S Three or whatever your preferred static.
00:10:26.408 - 00:10:31.630, Speaker B: File hosting service is, but it ultimately plugs into Launchpad on the back end.
00:10:32.160 - 00:10:50.000, Speaker A: So you can choose to either you use the ERC 20 or ERC 721 interface, they just refer to different paths when you actually end up serving files, but they both come in the same repo so you sort of get both for free, but you can choose which one you actually want to end up serving the users.
00:10:50.340 - 00:10:53.652, Speaker B: So let's say we plumb this and then it's really simple.
00:10:53.786 - 00:11:05.450, Speaker A: We just set this environment parameter. Environment parameter the react app relayer URL. Right now I'm pointing it at localhost 3000 V two, which is where our current back end is running.
00:11:05.820 - 00:11:32.380, Speaker B: And then yarn start and then we're going to start stripping it up on port 3001. So now this is running and we are running a real zero three layer running on Covon. And you can sort of see right now there's no orders on the order book, but you can see my balance over here. You can see my balance over here. You can see my order creation form to the left over here.
00:11:32.530 - 00:11:44.390, Speaker A: You can make a market order if there's already orders on the book. And then we'll just match, find out which orders you actually want to buy and then fill them for you. Or you can post your own limit order if maybe you're a market maker or you have a specific price in mind that you want to see.
00:11:45.080 - 00:11:54.404, Speaker B: You can select which token pairs or which markets you want to trade on. So right now we have Xerox Week and Maker Week by default, but obviously.
00:11:54.442 - 00:11:55.536, Speaker A: You can set whatever sort of token.
00:11:55.568 - 00:12:05.256, Speaker B: Pairs you actually want to allow trading for. And then you can also check out your wallet and check out your balances. So you can see over here we have this really nice conversion dialogue for.
00:12:05.278 - 00:12:11.340, Speaker A: Trading, moving between ETH and we. This is maybe something that you have experienced in the past and been very frustrated with.
00:12:11.490 - 00:12:23.552, Speaker B: We've also been frustrated with this too. Now it's just a really simple slider. You can set how much ETH you want, how much wheat you want, hit update balance and get a nice little.
00:12:23.606 - 00:12:32.230, Speaker A: Confirmation transaction confirmation dialog and then we're good. And now we have as much ETH as we want, or as much ETH as we want. No longer Fiddling with different numbers.
00:12:33.960 - 00:13:08.620, Speaker B: Pretty nice. Move this back just for the demo, and you can see our balances update in real time. So previously this moved back to having a couple of weeks. Now we have no weeks. So let's go back to the ZRX week market. And let's say that I want to sell some of my CRX. So we'll say I want to sell 100 ZRX and I want to charge one week for ZRX.
00:13:08.620 - 00:13:14.556, Speaker B: I click Sell DRX, but first I have to enable DRX for trading on.
00:13:14.578 - 00:13:23.356, Speaker A: Zerox by setting my allowance launch kit. Front end will determine if you actually have your allowances set, and if not, we'll prompt the user to enable allowances before trading.
00:13:23.468 - 00:13:39.910, Speaker B: So I'll confirm that I want to allow XRX to trade XRX on my behalf. When new orders come in, they get filled. And then after my ZRX gets unlocked, I then go ahead and sign this order. So you can see down here sorry.
00:13:40.760 - 00:14:09.904, Speaker A: You can see down here we use EIP seven, one, two, so you can actually see what you're signing. You're not signing some arbitrary hash and hoping that the relayer is doing everything correctly. You can actually see the content of the message, see how much you're actually selling, see which token contracts you're using, et cetera. So I'm going to go ahead and sign this. Placing the order. And now we have a live order on Kobon for selling some ZRX and buying some wheat. And we can verify on the back end that, oh, we actually did see this request come into the back end.
00:14:09.904 - 00:14:12.336, Speaker A: So the front end was able to.
00:14:12.358 - 00:14:13.696, Speaker B: Post the order and then now start.
00:14:13.718 - 00:14:20.790, Speaker A: Serving up to new users. So going back to front end for a second.
00:14:24.760 - 00:14:25.780, Speaker B: There we go.
00:14:25.930 - 00:15:02.240, Speaker A: Cool. So now let's say someone else comes along and they want to actually buy this ZRX. So let's switch accounts real quick. And, oh, I actually see there's some ZRX in the order book, and I actually want to fill this. So I'm going to do a market buy for 100 ZRX, and the launch kit UI will ping the back end, calculate which orders actually need to be filled for a market buy, and then generate a transaction for filling those orders for the user. Of course, I can also always place a limit order, but it's always really convenient to just do a market buy if you're pretty price agnostic. So let's say I want to actually buy this CRX.
00:15:02.240 - 00:15:32.884, Speaker A: So I'm going to confirm this transaction. And you may have noticed that I actually don't have any wheat on this account, right? If you look up here, I have zero weath. So how is this actually happening? Right, that should have gone through. So I don't actually have any weath. So how is this transaction actually happening? We determine if you don't have enough.
00:15:32.922 - 00:15:55.064, Speaker B: Weath, and if you do, we automatically route your orders through what we call our forwarder contract which will wrap ETH on your behalf and then fill the order and send the result back to you. So we removed that one extra complicated step of using Zero X or using many of these other DeFi products by optimistically determining what the best path is for the user. And I did not do enough sacrifices.
00:15:55.112 - 00:15:56.536, Speaker A: To the demo gods, and we're hitting.
00:15:56.568 - 00:15:59.084, Speaker B: A small snag, but trust me, this.
00:15:59.122 - 00:16:11.098, Speaker A: Works and it's really, really slick. So I think that's about it, actually. Any questions so far?
00:16:11.184 - 00:16:47.478, Speaker B: Yeah, is there a database schema? Yeah, so if you look in the backend, we have some handlers, we use a type orm so we default to using SQLite, and we have some types defined that will write to the database for you, but you can use any sort of database that you want as long as there's like a handler for type RM. Can you talk about a little bit like the order sharing between relays? Yeah, really good question. The Launch Kit back end uses what.
00:16:47.484 - 00:16:49.000, Speaker A: We call an open order book model.
00:16:49.530 - 00:17:03.594, Speaker B: And so meaning that these orders, once they're being relayed, can be filled by anyone else who finds them. And the way this is usually done is by pinging a Relayer's API, getting your order book, and then maybe there's another relayer, downloading it locally and then.
00:17:03.632 - 00:17:04.730, Speaker A: Serving it back up.
00:17:04.880 - 00:17:10.074, Speaker B: The standard relayer API makes this really convenient. It's a common API spec that we.
00:17:10.112 - 00:17:11.706, Speaker A: Sort of propose that many relayers implement.
00:17:11.738 - 00:17:35.220, Speaker B: And many of them actually, and many of them do. So in this example, let's say you're running your own version of Launch kit and I'm running my own version of Launch kit. You would using some of the standard libraries that we put, ping my relayers API, download my orders, and then serve them back up to your own users on your own interface. So having this common API spec makes it really slick. And LaunchKit comes with this out of the box.
00:17:35.750 - 00:17:37.414, Speaker A: We're actually working on a new project.
00:17:37.452 - 00:17:51.706, Speaker B: Called Zorox Mesh, which creates sort of a peer to peer order routing network that makes this entire process much slicker. And so we have some details out about that right now. We'll be giving a talk about that later at East New York, actually, that.
00:17:51.728 - 00:17:53.020, Speaker A: Should be out in the coming months.
00:18:00.430 - 00:19:04.500, Speaker B: Do you have any sense of mechanisms for relayers to share order group with Dimension? Yeah, so let's say you're a relayer and you're charging fees for using a particular relayer. Those fees are baked into the order itself. So if you mirror my orders and some user fills it, I actually collect fees on that order and you get the additional benefit of having deeper order books and more liquidity. So, as a relayer, I'm really incentivized to make sure that orders that get posted on my book get spread everywhere, so I can collect fees on those orders as they get filled. And what's really interesting is this sort of enables this concept of what we call contract fillable liquidity, where it's not just other Relays and other users actually filling these orders, but it's other DeFi apps like dYdX Filling Xerox. Liquidity or different interfaces like Xerox Instant, where people on a different application or on a new site or adapt can fill orders from a relayer and that relayer can still so this pool of network liquidity really enables all these different new use cases. Cool.
00:19:05.130 - 00:19:15.880, Speaker A: So there's no more questions about this. And we'll also be at our table during Geek New York. If you have problems or questions or anything like know what now?
00:19:16.250 - 00:19:25.418, Speaker B: Build something people want. We're really hoping that this sort of new addition to LaunchKit provides some new tooling and scaffolding so you can really get a jump start on some of.
00:19:25.424 - 00:19:26.394, Speaker A: The new products you might be interested.
00:19:26.432 - 00:19:51.234, Speaker B: In working on for East New York. So ENS stands are now ERC, 721 assets. Maybe you want to use our 721 interface to build a ENS marketplace. Maybe you want to build a mirror trading platform or a secondary marketplace for CDPs. We put out a bunch of blog posts with a bunch of inspiration about new ideas that you can build using Zero X under the hood. And we're giving away two different prizes. One, one $500 prize for the project with Zero X.
00:19:51.272 - 00:19:52.286, Speaker A: And then we're also doing a joint.
00:19:52.318 - 00:20:17.780, Speaker B: Prize with Wire for combining some of the APIs that Wire provides along with Zero X. So Launch kit is also just sort of the tip of the iceberg when it comes to different projects and tools that Zerox provides. Definitely go to our website, zerox.org. Check out some of the tutorials documentation tools that we have. We really want to make it easy with just like, a few lines of code for anyone to use Exchange in any different node that they want. So, yeah, looking forward to hearing from you guys and seeing what you build.
