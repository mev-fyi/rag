00:00:00.810 - 00:00:46.220, Speaker A: All right, hello everyone. I am Ben and I am a co founder of Optimism. We're building optimistic ethereum layer two scaling solution for making your EVM more beautiful and fun and fast and cheap. So today I'm going to be talking about some old things and some new things and their intersection. So we have this enticing title searching for EVM Parallelism. But where I want to start is just talking a little bit about out mev and how we're thinking about it on L2, and especially how it's been in the last year. Because about a year ago oh, I guess a year and a half ago now, we put out this post called Mev Auction, which basically talked about how in protocols generally not just on L2 Although L2 is particularly suited for implementing it.
00:00:46.220 - 00:01:26.146, Speaker A: We really can separate out the role of transaction inclusion and transaction ordering and break those into two separate rules. And there's some fun stuff we can do with that, especially if we auction off the right to ordering those transactions and we call these Mev auctions. So I just want to reflect for a minute on where we're at with that. A year and a half in and there's an elephant in the room that relates to this, which is Flash bots. So I think this chart is way out of date. We're way above 60% hash rate now running Flashbots. If I'm not right, if I'm not wrong, and this is a question that comes up a lot, people look at that post that we put out and say, okay, that's an auction for mev.
00:01:26.146 - 00:02:13.990, Speaker A: How does that compare? Does it relate? Does it contrast? Does it complement with Flashbots auction? Because now we have 60% plus of the hash rate running Mev guests and basically running auctions for mev. So that's a really great question. And the cool thing about it is that they are totally complementary. So I just want to talk a little bit about that to set the stage cool. So the Mev auctions that we were talking about and this Flashbot auctions are not the same thing and they're actually complementary. So the analogous property that these Mev auctions where you're in the protocol selling off the rights to ordering within the protocol is actually similar to leader selection or like proof of work or proof of stake. And you can think about the sequencer that is being a position.
00:02:13.990 - 00:03:03.746, Speaker A: Auctioned off in Mev auctions is actually the equivalent to the proof of work or the proof of stake that's determining the block proposal for the protocol. So this is an important note. Obviously we have Mev auctions in some effect taking place with Flashbots right now. But this did not require a fork of the L One, it didn't require a change of protocol. We still have miners that are finalizing and assembling these blocks and continuing the chain, and yet we still somehow have these auctions going on as well. So what does that mean? Why is that? And really the answer is that we're just further separating concerns. So whereas before on L One, we had miners and the pools that were both progressing the consensus of the protocol and determining the ordering, we actually still have that ordering being upheld by the miners.
00:03:03.746 - 00:03:38.274, Speaker A: But where Flashbots comes into play is that we now have a secondary market for reselling that ordering. And that's really what Flashbots is doing. And I think this is an important note, because it's a separation of concerns where now we have miners that are able to do their specific thing that they're good at, which is compete on providing network security, and they're able to outsource the searching for the mev extraction. And what is the correct order to make to external parties. And Flashbots is there providing that auction that sits in the middle. And of course, this is an order. So a market.
00:03:38.274 - 00:04:13.482, Speaker A: So in fact, there's a bunch of people that are participating in this market, not just one big yellow circle. So I added some more yellow circles. Oh, yeah. So what do we expect this to look like on L2, right? Is it a matter of these mev auctions replacing one part of this or something else? The answer is something else. What we can imagine on layer two is that we have L One that is determining the inclusion of transactions. We have an in protocol on L One, effectively a sale of who is allowed to order transactions through an mev auction. But there's no reason.
00:04:13.482 - 00:04:40.414, Speaker A: And in fact, now that we see the popularity of Flashbots, we actually think it's very, very likely that we will still see resale of ordering rights on layer two. So we still can expect to see a secondary market for ordering. And it actually is complementary to these two things. They both come into play. So it's not a matter of whoops. It's not a matter of replacing some part of this. It's putting something in the middle and extending it.
00:04:40.414 - 00:05:11.840, Speaker A: Okay, so that's why I want to say oh, and then also by selling it off within the protocol, we can redirect those funds to all sorts of lovely projects and research and development. That's for another talk. Okay, let me do a time check. Oh, we're doing great on time. Good. Okay, that's a bit of an aside, an update on our thinking about mev on L2. Now I want to talk a little bit about some new stuff on how we're realizing we can use this, given the fact that it seems very, very possible that we'll have both of these markets layered on top of each other.
00:05:11.840 - 00:05:44.262, Speaker A: Okay. So we're going to start with a digression into a very old problem. Now, I guess old for the crypto space, which is parallelizability. I guess the problem statement really is the EVM is darn slow. And one of the reasons it's so slow is because you have to run it in serial, you can only run it on a single thread. So we have here from Vitalik an EIP that's, wow, fully four years old at this point, talking about maybe we can parallelize these things. And by things I mean transactions.
00:05:44.262 - 00:06:25.010, Speaker A: And spoiler alert, that is still an open PR. So we're not there yet, although we are getting closer. Right. So one of our recent forks, we had access lists which could set the stage for parallelism, but hasn't quite done that yet because they're optional. But it's worth noting. Okay, so why are we four years in and not having parallelized EDM yet? The answer is basically about state access and what happens when you say that transactions can or can't be parallelized. So to very quickly summarize, if we have two transactions and they do not touch the same state, then they are parallelizable.
00:06:25.010 - 00:07:32.282, Speaker A: If they do touch the same state, then they are not parallelizable. Okay, so this is pretty obvious. If they touch the same state, then you're required to know what modification the first made to the state before you can know the result of the second. Okay, so that's a very simple definition of parallelism. And the reason that we haven't seen these things is because in the current EVM design, any smart contract at any time can talk to any other of these money Legos, right? This is like a huge feature of the EVM, is that we can just jump around and call any contract and everything's very interoperable and lovely. But it does come with a problem for parallelism because it means that you can't know if two transactions are parallelizable until you have run them both, because it could be the very last thing that one transaction does is to call out to another piece of state that intersects with the access list for a previous transaction. Okay, so just to maybe state this in an even more simple way, there's more complex things you can do with gas metering, but we could just try to parallelize the EVM right now.
00:07:32.282 - 00:08:29.102, Speaker A: We could say, okay, consider a block. We're going to introduce a new block validity rule, which is that no transactions can touch the same state within the same block. This is maybe not, maybe not the best way to do it, but it's very simple to imagine, right? If there are TXi and Txj such that they're not parallelizable, meaning their state intersects, then the block is invalid. So why haven't we done this yet? If we have such a simple construction that will let us increase the throughput of our EDM, can we do this? The answer is we could, sort of, but it's not so clear. And in particular, there's two separate things and one is okay and the other is not from the perspective of a verifier. So someone who is taking the chain and checking that it's valid, there's no problem with this condition. This is a very simple condition to check and you just as a part of your processing, you output, you look at the result, you say, did these things intersect? Yes, they did.
00:08:29.102 - 00:09:06.554, Speaker A: Therefore it's not parallelizable and it's an invalid block. The problem comes from block production because block producers don't know whether or not two transactions are going to intersect without running them and they have to choose them somehow. So how do the block producers choose a valid block? It's often been considered a dos vector. So I want to quickly call out Jeff Coleman. I think this presentation is public. If not, I'll link it after for a great little thread on this. But just a quick chunk of this is that you can really think of there being a first run of a transaction and a second run.
00:09:06.554 - 00:10:11.370, Speaker A: And the first run is what happens when you're producing the block and the second run is what happens when someone is verifying an already produced block and these two things are different. Okay, so this problem of how does the miner, how does the block producer figure out whether or not it can put these two transactions, will they be parallel? This is the problem that we have right now. Okay, but I now have a question for you, and especially if you're in the flashbots community. Does this problem statement sound familiar to you? The problem that you don't know whether a transaction is valid until you've run it? Well, I will tell you that this should be a problem that you're familiar with because it is exactly what we see in flashbots. So I took this from some of the docs on flashbots, right? Flashbots what is fundamentally doing. It's letting you pay the miners at the end of a transaction. So literally, I mean, at any point in time, but literally, in the example that is like the first one I found on GitHub, the very last thing that happens in this flashbots execution is the transfer to the coinbase.
00:10:11.370 - 00:10:50.026, Speaker A: So this is the exact same problem statement that we have for valid bundles in flashbots and valid blocks in a parallel block validity condition. It is impossible to know beforehand, but you can know after. And then that part is no problem. So I'm running a little short on time, so maybe we'll have some more time back for you too, Tina. But the thing that I just want to conclude with is that this is awesome because we are not yet seeing flashbox collapse due to dos. I think there's concerns, but what's very exciting is that y'all are working on it. So this is a message to all of the folks that are out there working on flashbots and keeping this alive.
00:10:50.026 - 00:10:59.930, Speaker A: You are actually going to increase the throughput of our chain more than you even realized. And that is incredibly exciting. So that is my 15 minutes talk. Thanks you all. Bye.
