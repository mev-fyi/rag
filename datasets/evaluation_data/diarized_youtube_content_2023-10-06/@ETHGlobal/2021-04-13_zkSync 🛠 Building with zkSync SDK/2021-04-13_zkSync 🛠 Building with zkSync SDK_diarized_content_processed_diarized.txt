00:00:00.170 - 00:00:25.880, Speaker A: All right, well, welcome to are people like yeah. Hi, everybody. Hello. Welcome to our workshop with Angela Liu. We'll be going over ZK Singh SDK and I will let Angela take it over and go on with the workshop. Thank you very much.
00:00:26.250 - 00:01:26.920, Speaker B: Hi everybody, I'm Angela, and today I am joined by Igor and Stas, who are going to be in the chat answering any questions that you might have along the way. And today we are going to do a bit of and today we're going to do a bit of a ZK Sync 101 and basically everything you need to know to be able to build on the ZK Sync SDK. But I did not come empty handed. I brought you guys, first a little surprise gift. So in 2021, in May, DK Sync will be launching swaps on Mainnet, which means the trading of fungible tokens via atomic swap and limit orders coming with swaps will also be NFTs coming to Mainnet. And we will support the functions mint transfer in atomic swap and layer two, as well as the withdrawal to Mainnet. And then lastly, we have the ZK Sync 20 coming to test in May.
00:01:26.920 - 00:02:06.678, Speaker B: ZK Sync 20 is our EVM compatible ZK roll up. We built a Snark friendly LVM engine. So this means portable solidity code and ethereum wallet native support. And this will be coming to Mainnet in August. We are aiming for virtually no difference between the Zkevm and the EVM. And if you want to know more about how we built the Zkevm, tune in to the ZK Summit in this hackathon during week three. In October, we will also be introducing VK Porter to Mainnet as part of ZK Sync 20.
00:02:06.678 - 00:02:54.050, Speaker B: This is our engine for mass adoption, and we are aiming for 20,000 plus transactions per second, with even more security guarantees than that of optimistic roll ups. We just released an article on Twitter today on our Medium, but if you want to know more about given in a presentation form, tune in on Friday, April 16, which is this Friday. So let's begin. Today we're going to first take a bird's eye view of our roll up architecture. And then we're going to talk a little bit about how our rollup communicates with Mainnet. And then we're going to go over our initial user flow, talk about some functions that are available for you in the ZKsync SDK. And then we're going to talk about a fun topic called transaction batching.
00:02:54.050 - 00:03:40.610, Speaker B: But before we get started, I wanted to introduce to you a few tools that you're going to need to everything that you're going to need to become an Sdksync developer. So the first tool that you're going to need is our SDK docs. Here you can see that there's JavaScript and TypeScript libraries as well as quest. Next is going to be our ZKsync GitHub. I have highlighted three folders that you're going to be frequenting the most and are going to be most important to you, the contracts Docs and the SDKs. These two files, the ZK Sync file and the protocol file, are going to be most frequently visited for you and the most important as well. So let's begin.
00:03:40.610 - 00:04:13.310, Speaker B: Let's talk about the ZK role of architecture. The ZK role of architecture is split into two parts. The first one being that of On Ethereum. And these are our solidity smart contracts deployed on mainnet, which are managing your user funds. Next is going to be the rollup side. And this acts sort of like a side chain that produces roll up blocks and executes roll up transactions. Currently, this side chain is secured by the ZK Sync server, but will soon transition to proof of stake via the ZK Sync token.
00:04:13.310 - 00:04:58.358, Speaker B: Next, let's talk about how Mainnet and the role communicate. So we have ZKsync servers always including transactions into roll blocks. And once included, these funds from your transaction will be usable in one to 2 seconds. Once there are enough transactions to fill a block, we call the function Commit block. And this is when the smart contract receives a commitment that transactions have been executed in layer two. So the server is receiving these committed blocks and the server starts generating these proofs right upon receiving the block in parallel. So this means that there are ten committed blocks.
00:04:58.358 - 00:05:35.510, Speaker B: Then the server is generating proofs for ten of those blocks in parallel. And once these zero knowledge proofs are generated, we will call Proof blocks. And here the smart contract receives the proof that all transactions in layer two are correct. Next we'll call the function Execute block. In this, the smart contract updates its internal state with the information received in the commitment step. And at this point, transactions are considered finalized. And these three functions can be found in the ZK Sync file that I showed you earlier.
00:05:35.510 - 00:06:25.640, Speaker B: So next we're going to talk about the initial user. So user first has to start by sending funds to the smart contract by calling Deposit to Sync from Ethereum. But if you're depositing an ERC 20 token, you have to remember to approve the token by calling approved ERC 20 token Deposit. And you can find these two functions in the SDK folder in the wallet file. So if this is successful, then the smart contract will emit an event called Deposit. And the ZK Sync server is always monitoring Ethereum for events. So when the ZK Sync server sees this deposit event, they'll create a priority operation and we'll talk about what that means a little bit later.
00:06:25.640 - 00:07:09.990, Speaker B: So now in layer two, the user balance is increased by the token amount for the specified token. But there's a little caveat to this. If this is your first time using ZK Sync layer two, you first have to initialize your account by calling Set signing key. And you only have to do this once. This function can be also found in the SDK folder in the Wallet file. But as I said, this will be decorated in ZKsync 20 as we come up, as we will support Ethereum Wallets natively with ECDSA signatures. So let's talk about functions.
00:07:09.990 - 00:08:03.202, Speaker B: So, as I said, we would come back to priority operations. And there are two types of priority operations deposit, like I talked about, and also full exit and full Exit withdraws the full balance of one token from the ZK roll up. This function is used in case l two transactions are being censored by the server. And although unlikely, this is for the ultimate security. And if this still doesn't work, and the server is either not working compromised, or is creating blocks that are ignoring priority operations such as your full exit, the contract will enter exodus mode. And here the contract will freeze all funds, and all users will be able to withdraw their funds. Next are the basic operations, which are your favorite because they are cheap.
00:08:03.202 - 00:08:40.610, Speaker B: Layer two Transactions there are three types of basic operations. The first type is transfer. And here you can send ETH or ERC 20s from one layer two account to another. Then there are two types of withdrawals. The first type of withdraw is a normal withdrawal, where you can just withdraw your ETH or your ERC 20 tokens to Mainnet. But the second type of withdraw is called forced exit, and this is used when you cannot set the signing key. For example, if your address is that of a smart contract and here to withdraw, you would call forced exit rather than withdraw.
00:08:40.610 - 00:09:26.146, Speaker B: Lastly, we're going to talk about batching. Batching transactions means that these transactions will either succeed together or fail together. And this can be analogous to batch loans. And some creative use cases include paying the transaction fee in your ERC 20 token. But we're going to focus on the Gitcoin Grants case studies. So the user starts by picking their grants, and then after the user finalizes the grants that they want to donate to, they move to ZK Checkout. Then behind the scenes, all the magic happens.
00:09:26.146 - 00:09:51.996, Speaker B: Gitcoin grants, batches all these donation transactions, sets the signing key and pays the fee for all the transactions at the end. Wow, so smooth. And ask him, do you have a.
00:09:52.018 - 00:09:53.576, Speaker C: Link you can provide on the Summit.
00:09:53.608 - 00:10:01.668, Speaker B: You were talking about? That has not been set yet, but it will be set as week three in the hackathon.
00:10:01.784 - 00:10:34.044, Speaker C: Okay, thank you. Hi, I was wondering so, Stanslav, thank you for asking some questions, but I'm a bit confused now. So can we deploy smart contracts onto ZK Sync using your Zinc language? Or is that not possible until ZK Sync 2.0?
00:10:34.242 - 00:10:41.228, Speaker B: Yeah, so ZK Sync 2.0 will come with full smart contract support for Zinc and Solidity. So we can't do that.
00:10:41.314 - 00:10:42.220, Speaker D: Jessica.
00:10:45.300 - 00:10:54.130, Speaker C: And I saw on the documentation for Zinc that there is something already for the Rinkerbee testnet, right?
00:10:54.920 - 00:11:58.490, Speaker E: Yeah, I will clarify that. So basically, sync is two related but very different projects. So the first version of Sync was during Incomplete and it had a lot of limitations. And we actually had a separate testnet in which you could try to write contracts in sync and deploy it to that testnet. But it never got to production because we found a way to make sync fully during Complete and moreover to transpile existing Solidity code. So we decided to not continue the previous Turing Incomplete version and focus on the Turing Complete version instead, which will be available in May.
00:12:03.340 - 00:12:04.792, Speaker F: Thank you for your answer.
00:12:04.846 - 00:12:11.340, Speaker C: And Rogue gets early access to the smart contract functionality. So before the hackathon ends?
00:12:13.520 - 00:12:23.410, Speaker E: No, I don't think so. Once testnet is ready, it will be open for everyone. But we are target in May.
00:12:26.740 - 00:12:53.130, Speaker B: So we have some questions from YouTube. One of them asked if exchanges are planning to make direct deposit, direct withdrawals to ZK roll ups. And yes, we are partnering with many exchanges so that users don't even have to go through L One they can just directly transact from L2. And Iwari did you want to answer about gas efficiency from Solidity or the first question?
00:12:55.500 - 00:13:11.870, Speaker E: Let me see. I'm not sure if I understand the question.
00:13:15.280 - 00:13:50.040, Speaker F: I hope I understand. So if the question is about if there will be any difference between solidity or zinc on layer two, then the short answer is either no or it will be very small because the main price from contract executions comes from public data that is published on ZK roll up. So it will be just the same for both solidity and zinc contract. If we understand the question correctly.
00:13:53.600 - 00:14:35.800, Speaker B: And regarding the Starks in the future, I believe it is not in the near term future, but maybe like in the long term future, we will transition. But the cool thing about how we're able to support the Cke EVM is the fact that we figured out recursion in the plug system that we use. And then another question is currently is it just doing payments? And yes. So the creative avenue here is the last slide that I mentioned, batching transactions. And you can do up to 50, which is the amount that can fit into a roll.
00:14:39.340 - 00:14:40.090, Speaker D: Um.
00:14:42.000 - 00:14:43.804, Speaker G: Hey, can I ask a question?
00:14:43.922 - 00:14:44.590, Speaker B: Sure.
00:14:46.000 - 00:14:54.460, Speaker G: So how does multi signature wallets work with ZKsync? Would it be the exact same way as in Ethereum?
00:14:58.080 - 00:15:01.150, Speaker B: I think Dos can answer.
00:15:01.940 - 00:15:27.610, Speaker F: I think there are two parts and answers of your question. Well, first part is that ZK Sync actually supports natively multisix. But they're like N of N. So you need all the signatures for the multisig to send any transaction. And it's already supported. They just send transfers. And if the question is about more complex multisigs, then I guess they'll be available.
00:15:27.610 - 00:15:42.300, Speaker F: They will be available when the ZK Sync 2.0 launches and they'll be just the same as the ones on layer one because the smart contracts will be supported just the very same smart contract.
00:15:43.860 - 00:15:52.850, Speaker G: Cool, thanks. Yeah, I asked because I couldn't really find any reference on how to work with multi SIG wallets, but I guess it's somewhere there I didn't find.
00:15:56.180 - 00:16:28.380, Speaker B: Cool. So there's a question asking, is there going to be more native languages for writing smart contracts on ZK Sync One that might be more efficient than EVM porting? And yes, so Sync currently is non turn complete, but in ZK Sync 2.0, it will be turn complete and it is designed after rust and it's designed to be a lot more safe and a better user experience than Solidity. It's also specialized for generalized zero knowledge proof circuit.
00:16:30.960 - 00:16:31.740, Speaker D: Um.
00:16:35.080 - 00:16:49.004, Speaker B: Another question from YouTube. Will ZK think 2.0 support l two contracts. Calling functions on L One and vice versa. For instance, on Optimus and l One can call l Two functions immediately. But l Two has the delay time.
00:16:49.042 - 00:16:54.670, Speaker D: To call L One. Does Igor want to take that there?
00:16:55.840 - 00:17:14.390, Speaker E: Yes. There will be layer one, layer two interoperability, but not in the first version that comes in May. The first version will come without layer one, layer two interoperability and it will be added later.
00:17:16.760 - 00:17:25.370, Speaker B: The next question is asking where the ZKsync servers are and if they're secure. I'm not sure where exactly they are.
00:17:26.540 - 00:18:33.100, Speaker E: Yeah, so right now, the Cassini server is managed by Matterlapse. It's being hosted in a cluster. It's pretty secure. And actually, the architecture of the Ksync is kind of indifferent on where server is located and whether it's cured. Because even if the server becomes compromised, their knowledge proof just will not be generated or it will be incorrect and will be declined by the Sync smart contract on layer one. In the future, however, there will be a fully distributed model with multiple validators and proof of stake algorithm.
00:18:34.320 - 00:19:19.992, Speaker B: Right. So we're going to be doing progressive decentralization in respect to the Zkync service. The next question is given only the payment SDK is available for the hackathon. What kind of tools would the ZK Sync team like to see? In particular, are there any SDK reference guides to link us to? So first you can check out the prizes link that maybe Catherine could send in the chat. And here we listed some cool tools that you could use that we would like to see built. And like I said, the best SDK reference guide is the first link that I said in my presentation. And you should be able to find it by going to ZKsync IO and going to the Docs section.
00:19:19.992 - 00:20:00.012, Speaker B: It should be Developer Docs. Another question from YouTube. What's the usage of the ZKsync token? So we're going to use the ZK Sync token to secure our network through proof of stake. So the validators in the ZK roll up side. So in the future, Zkync 2.0 will become split into the ZK roll up side and the ZK Porter side, and basically the ZK Sync token will be used for proof of stake. Another question from YouTube kind of confused what tech we will have access to for the hackathon.
00:20:00.012 - 00:20:56.370, Speaker B: Where should I look at? So you should look at the SDK. It has very detailed documentation about the kind of learning about how ZKsync works and things that you will be able to build on top of ZK Sync. And also I have listed in the Prices section some examples of tools that we built, such as the ZK wallet, a ZK link which generates payment links. We would really like to see a tool for mass payments or multi sigs that would be really cool. Or we're looking for cool integrations, such as what Gitcoin Grants did. Another question. Are Cksync bridges similar to Optimisms and Arbitrums in that in the beginning there will be a centralized bridge, but there's a plan to decentralize going forward? Or does ZK Sync even need this trusted bridge software? Igor, do you want to take this one?
00:20:59.000 - 00:21:00.870, Speaker E: I'm sorry, can you repeat, please?
00:21:01.400 - 00:21:14.890, Speaker B: Yeah. So they're talking about how ZK Sync if ZK Sync will have bridges similar to how optimism in Arbitrum has centralized bridges. Or do we even need this bridge to.
00:21:17.820 - 00:21:24.670, Speaker E: I'm not sure if I'm ready right now to provide technical details on that.
00:21:25.280 - 00:21:26.316, Speaker D: Okay, cool.
00:21:26.418 - 00:21:32.636, Speaker B: We will take a rain check on that question. The next question, I want just to.
00:21:32.658 - 00:21:58.020, Speaker F: Say that but there are some bridges which only require AVM support. So if some bridge wants to be created between ZK Sync and any other system with AVM compatibility, I think it will be possible since ZKE EVM is EVM compatible.
00:22:00.600 - 00:22:01.060, Speaker D: Cool.
00:22:01.130 - 00:22:45.830, Speaker B: So the next question is from YouTube. It says I think you answered this question, but I missed it. Will there be an official ERC 721 contract for ZK Sync coming soon? Yes. So NFTs will be on main net early May, and we will be supporting Mint transfer and atomic swap on layer one and also withdrawal to layer one. I might have missed both Mint transfer atomic swap on layer two. Is there any concern that open public smart contract publishing on ZK Sync 2.0 result in unmanageable proof generation time? Is this a linear or exponential relationship amount of smart contract logic versus proof generation? Great question.
00:22:45.830 - 00:23:21.890, Speaker B: If you look back at the slides I talked about, there's three steps. There's commit blocks and then there's proof blocks. So once blocks are committed by the ZK Sync server, proof generation starts right away. And each time a new commitment of a block is received, it's going to start right away. So these will be in parallel. So if there's 20 or 30 commitments altogether, the proof generation will be in parallel and then they will start. Yes, it will be.
00:23:21.890 - 00:23:46.330, Speaker B: Another question from YouTube. Will our experience playing around with ZK Sync on this stage be useful when EVM compatible ZK Sync 2.0 comes out? Good question. So I tried to keep this presentation with as little deprecated things that we're going to remove from ZK Sync 2.0. And so everything except the set signing key in this presentation will.
00:24:03.140 - 00:24:16.070, Speaker A: Great. So I don't see anything else coming up on YouTube. If you guys have any more questions, please we have a couple more minutes left, so feel free to ask anything. Take the mic.
00:24:19.240 - 00:25:41.850, Speaker B: And while questions are trickling in, I would just take a moment to promote our ZK Porter, which is our Exponential Scaling engine. And we just released a Medium article detailing it today. You can find on our Twitter or our Medium. And also we will be having the DK Porter talk on Friday and then the ZKE EVM talk about how we created generalized smart contract circuits I'm sorry General, zero knowledge proof circuits called the Zkebm on week three of this hackathon during the ZK Summit. And I can also post the Discord link, but if you have any oh, there's a question. Where are events emitted by smart contracts posted? Mainnet or somewhere else? Right, so smart contract events you should be able to see just like normal because they are on Mainet. Let me find our Discord link, I will put it in the chat.
00:25:41.850 - 00:25:48.794, Speaker B: If you have any questions, feel free to join and ask here. And also there is a channel in.
00:25:48.832 - 00:25:52.026, Speaker D: The East Global Discord.
00:25:52.218 - 00:26:03.600, Speaker B: Will V Two have a limitation on the size of the bytecode of supply contracts? Optimism has this limitation. Igor, do you want to take this one?
00:26:07.430 - 00:26:55.890, Speaker E: I'm not sure right now there is no real limitation on the code size itself other than the storage capabilities of the node. But maybe there will be some technical limit just to not allow unlimited code size and private the case of abuse, but I don't think that it will be some kind of limit that will affect a lot of users.
00:27:06.070 - 00:27:17.154, Speaker A: Any more questions before we wrap this up? We still have a minute or two left, otherwise I'll direct you to the Discord now and never.
00:27:17.352 - 00:27:18.860, Speaker D: All it.
00:27:23.230 - 00:27:40.110, Speaker A: All right. Seems like oh, we actually have one more here. Do you consider using Ncloud Tees to ensure the correct L two execution of contracts?
00:27:42.450 - 00:27:46.738, Speaker B: I didn't quite catch what you said.
00:27:46.904 - 00:27:48.580, Speaker A: Sorry, I'm just reposting it.
00:27:50.710 - 00:27:55.620, Speaker B: I do not know what that is. Igor, do you know?
00:27:58.330 - 00:28:00.760, Speaker E: I'm not sure as well.
00:28:02.810 - 00:28:03.800, Speaker D: I'm sorry.
00:28:05.450 - 00:28:06.520, Speaker A: All good.
00:28:06.890 - 00:28:16.410, Speaker B: All right, well but the LTO execution of contracts will all be verified through zero knowledge proof.
00:28:19.870 - 00:28:39.106, Speaker A: Great. So I'll just invite everybody who has still a question or if you want to expand on any of these topics, please go to the Discord channel. There's a specific sponsor channel specific for ZK Sync and the whole team is there to answer your question and support you through the hack. And I know they'll be more than.
00:28:39.128 - 00:28:40.420, Speaker B: Happy to support you.
00:28:40.950 - 00:28:53.700, Speaker A: So very huge. Thanks for everything, Angela and Igor and Stani. It was a really great workshop. And really appreciate having you.
00:28:54.390 - 00:28:59.320, Speaker B: Great. See you guys on Friday for the yes. Awesome.
