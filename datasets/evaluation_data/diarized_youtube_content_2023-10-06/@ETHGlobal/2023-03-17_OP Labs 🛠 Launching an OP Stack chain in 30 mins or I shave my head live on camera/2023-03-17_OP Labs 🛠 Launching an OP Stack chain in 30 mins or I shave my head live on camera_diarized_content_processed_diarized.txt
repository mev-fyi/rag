00:00:00.410 - 00:00:01.280, Speaker A: Thank you.
00:00:05.970 - 00:00:20.400, Speaker B: Hello, everyone, and welcome to the Op Labs workshop, launching an Op stack chain in 30 minutes, where I shave my head live on camera. Joining us today is Kelvin Victor, who will be taking us through this session. And with that, I will pass it over to Kelvin to get the session started.
00:00:21.010 - 00:00:45.962, Speaker A: All right, hello, everybody. I'm sitting on the floor right owl, which is very my back. But what can you do, such as life when you don't have a desk? This is about running an Op stack scene in 30 minutes or I'd shave my headlight on camera. Unfortunately, I don't have a razor with me, so if I can't make it in 30 minutes, I'll have to do the shaming at another time. But I will do it live on camera. So I'm going to start a stopwatch. Oh, God.
00:00:45.962 - 00:01:20.534, Speaker A: Okay, let's go. So essentially what I'm doing is I went to Stack Optimism IO and sorry, I even forgot to introduce myself. I'm Kelvin. I work for Op Labs, doing a lot of different things. But today I'll be running over the process of running an Op stack, which is really easy now. So essentially, all we're going to do is watch our roll up in 30 minutes, be super, super easy, and then later go unmodified if you go to the OpenStack docs. So Stack Optimism IO and scroll down to building OpenStack roll ups and go to the getting started.
00:01:20.534 - 00:01:56.510, Speaker A: You can follow along, but I'm basically just going to follow this tutorial and show you what I'm doing. So let's get a move on. I've opened up a new folder called Demo for the sake of this, and I'm just going to start running tutorial. So first thing you do is watch the watch the optimism monitor repost. That's where a lot of the code lives. Pretty much everything except for gift lives in the optimism monitor repo. And we're just going to go ahead and install dependencies, and then we're going to build a bunch of packages.
00:01:56.510 - 00:02:51.474, Speaker A: Installing dependencies and building packages takes a little bit of time. So once we start building the packages, we can go ahead and move on to quoting and building Op Get, which is the execution client, the default execution client for the Op stack. So if you are familiar with the architecture of the ethereum node ecommerce system these days, there are two components. There's a consensus client and an execution client and the OpenStack, the optimism and all the rollups I've based that are based on the Op stack also use the same split. So we will be running both of those components as part of this tutorial. First thing first, I'm going to start building Monterey boat. In the meantime, I'm going to go ahead and longwo nutget and building open geth at the same time.
00:02:51.474 - 00:03:09.862, Speaker A: So, yes, like I was saying, there's two components, the consensus client and the execution client. The execution client is called op. Get. Set the very minimal diff on top of upstream get represented. Right now it's a single commit. Here you go. I'm just building get.
00:03:09.862 - 00:03:46.814, Speaker A: This is how you would build geth if you're building normal GIF, you just run me get. This usually pretty fast. So this is just going to take a second and then once that's done, we're going to go back to monorebo. So we're back mono repo. It's still building a whole bunch of things, building a whole bunch of different components. But again, the most important thing that we're going to build is this thing called the BOP node, which is our cleansenses client. So if that means rhyme key, look ahead of what we're going to do, we're going to generate some private keys.
00:03:46.814 - 00:04:47.490, Speaker A: So as part of this tutorial, there are four key actors in the system that we want to generate keys for. There's an admin account which has the ability to upgrade contracts within the system, a batch order account which publishes the sequencer for that, publishes it to our L one. There is the Proposer account, which publishes transaction results to the L one, and the sequencer account, which is going to sign blocks on the L two. So that if we wanted to run more than one node, we could run that. And we will connect over peer to peer network and distribute blocks quickly over the peer to peer network. The first thing that we're going to do in a second, once this builds, is we're going to create a whole bunch of these keys using the remake key command, because I'm going to keep these keys private. I'm going to go over to my other window here.
00:04:47.490 - 00:05:29.886, Speaker A: And where are we? Here we are. And in a window that you can't see, I'm going to run this command. So all this is going to do is it's going to do exactly what you can see on screen. It's going to generate these keys and it's also going to generate a monitor. Okay, so give that a second to finish building. If I can't make it in 30 minutes, I blame girly. I almost learned my lesson and didn't do this on Gurley this time.
00:05:29.886 - 00:06:24.742, Speaker A: But then I got lazy and I decided to do it on Gurley again. So my guess is that the most annoying thing will be deploying smart contracts to Gur, but we'll find out. So, almost done building either that or the build process. Okay, good, we're done. So in another terminal that you can't see probably again, I'm going to run the NPX part at V key command, introduce a plus that we have added, and it's just going to generate these keys. So you can't see this, I can see this, but I now have an output that looks like this. And in a minute, I'm going to find some of these keys with some now I'm going to noodle reading, I'm going to go and configure the network.
00:06:24.742 - 00:07:22.890, Speaker A: So right now, network configuration happens inside of the Contracts Bedrock package. So there's this folder called Deploy Config inside of Packages Contracts Bedrock, one of config within the optimist of Monterey Club. And there's this Never called Getting Started that is sort of set up for you to fill in so that you can go and run your own chain. So it's got these things that you need to fill in here. And what I'm going to do now is I'm going to run this command down here that will give me some information about a recently finalized Gurley block, which I can then use to set the starting block for my roll up. So the roll up can start at any point where we hash a number. It start at any point, start syncing from any point.
00:07:22.890 - 00:08:02.966, Speaker A: But we really just want to find some block that we can use as our starting a point. So I'm just using the latest finalized block on grille as a starting equal. You can see I'd have a hash the number of times down. Next, I'm going to fill out the remainder of the pre populated config. So I'm going to take the hash that I just generated, I'm going to paste that in where it says L One starting block tag, that's where the network is going to start. And I'm going to take my timestamp, and I'm going to insert that as the starting timestamp up here. Then the rest of this is just filling out some addresses.
00:08:02.966 - 00:08:34.946, Speaker A: So I'm going to copy the nation by other terminal where I generated those addresses. And basically, just where was that admin and filling me my admin? I think maybe it stay sensitive. There we go. Wherever it says Admin filling the admin. I did that right. Yes. And wherever it says proposer, I'm going to fill in my proposer address.
00:08:34.946 - 00:08:58.130, Speaker A: That's the second one. Wherever it says basher, I'm going to insert my nest on my batcher address. I don't even need to find or place one. And wherever it says sequencer, I'm going to insert my sequencer address. Boom. That was really easy. And that's the whole thing.
00:08:58.130 - 00:09:31.210, Speaker A: So the next thing I'm going to is I'm going to deploy the L One Smart contract. So I've just configured the network. I need to deploy the L one. Smart contracts. So the very next thing to do is to go into Contract Bedrock and create a env file. So there's this example env file I'm going to copy and I'm going to paste it rename that just env. And I'm going to still put in my L, one RPC, which I'm just getting from Alchemy.
00:09:31.210 - 00:10:07.290, Speaker A: And I'm going to sell in my deployer private key. I'm going to have to hide the deployer private key part so you don't steal all my hero meat. Now, that hero eat is so expensive. And I'm also going to get rid of this tender and stuff. So you only really need those two first phase. The next thing I'm going to do is I'm going to send some girly ETH over to my E or to my deployer address so that I can then actually pay for this if it ever decides to load. And this is going to be the death.
00:10:07.290 - 00:10:32.180, Speaker A: It's going to be the part where I can't send Gurley. Come on, frame. Yes. Okay, I'm going to send my girly ETH. I'm going to send my soul. Why not? 2020 full girly. What's that, like $3,000 now? Who knows? All right, sending that.
00:10:32.180 - 00:10:51.400, Speaker A: Boom. Okay, so my account should now have 20 girly eat. That's great. I just sent the ETH to myself. Oh, no. Okay, now I need to send it again. I just sent myself 20 girly.
00:10:51.400 - 00:11:08.230, Speaker A: That doesn't make any sense. Come on. Now I'm sweating. It might be because my heater is on too high, but I'm sweating. Oh, boy. Oh, no. Okay, I got 20 minutes left.
00:11:08.230 - 00:11:56.530, Speaker A: Oh, no. Okay, well, in the meantime, I'm going to start deploying this FireCon trick. So all you need to do is network getting started. So now my couch has up east in it, and then I'm just going to start deploying. So this is the slow part of the whole process, basically, just deploying these contrast takes while I'm growing girly. It's usually fine, but it's not the fastest network to deploy to. All right, it looks like we're going I need to keep an eye on my EEP account to make sure that I'm not running out of money.
00:11:56.530 - 00:12:51.296, Speaker A: Because you never know when your account is going to run out of money, but it looks like it's going. So this is just going to go into a whole bunch of smart contracts that make up the L one. On side of the system, those smart contracts are things like the grid smart contracts, the contracts that configure the network. So there's something called the system confate contract that is sort of a way to manage the L2 system on L to one. So if you make a change to that contract on L one, the system will actually upgrade sort of automatically or will detect the change and change automatically. And a couple of there's a core bridge contract but user land bridge contracts. And then there's the ERC 20 and ERC 721 bridge contracts which sit on top of all of that.
00:12:51.296 - 00:13:25.932, Speaker A: And so a lot of these things sit behind proxies so that they can be upgraded. And so as a result, you can see that we're deploying a whole bunch of proxies first. Then we're going to go ahead and deploy a whole bunch of implementation. And then we use this cool contract called the System Dictator, which Candle is upgrading all of the smart contracts at the same time and initializing the system in a series upstairs. At this point, all we have to do is wait. It's pretty hanging. Luckily, it looks like Gurley eat is cheap right now.
00:13:25.932 - 00:14:05.576, Speaker A: Or girly gas is cheap right now, so I'm not burning through eat. But I can show you what we're about to do next. So once all these smart contracts deployed, at this point it's going to look identical to the system that runs optimism based. So everyone bids the same smart contracts. There's some legacy stuff in there as well. But the point is that by making the system uniform, everybody gets the same box to play with. So, okay, what's next? Well, like I said, we generate first we need to run these two components, the op node and Op get.
00:14:05.576 - 00:14:58.764, Speaker A: So the first thing that's necessary is to run a whole bunch of not a whole bunch of things, just a couple of scripts here to generate some config files. And those config files are based on the deployments that we generate. So we're going to need to wait before we can do that. Once we generate the config files, we also need to generate a JSON webtopian that is used to interact between Opgeth and the op node. This is the exact same system that's used for the consensus client and execution client. Then we're going to take those config files, we're going to copy them over to Op Get, where we're going to create a data directory and we're going to load the sequencer key and we're going to import the sequencer key and initialize get. Like I said, we're going to try to run a full roll up here.
00:14:58.764 - 00:15:27.376, Speaker A: So we need a sequencer. So that's why we generate that sequencer PDP key earlier. But essentially you only need one sequencer node for network. So we're just going to run one. I'm not going to have time to run a second node, but you could also just run a second node and connect to the sequencer over the peer to network and receive blocks right away. So we're almost ready here. Still deploying a bunch of contract.
00:15:27.376 - 00:16:11.300, Speaker A: This is the unfortunate thing about the way that we do our deployments right now is it takes quite a bit of time. So you deploy everything, but what can you do? It's just how it goes. But luckily, this time we are not running that cool. In the meantime, I'll talk about can do with all this. So right now we're going to be running a standard roll up, right? We're going to be running a thing that looks exactly like optimus mainnet and it's got all these default configurations, but you can tweak the configuration quite a bit. So we take a look at the get it started. We can tweak things like block time, right? So if you wanted 1 second blocks on your roll up, or if you wanted ten second blocks of your roll up, tweet that there.
00:16:11.300 - 00:17:11.850, Speaker A: And there's also stuff like the finalization period. Just for the sake of the example, I'm going to set this to 12 seconds, which is one l one block. We can set that to pretty much any number. Then there's things like the block gas movement that you can modify and stuff, just these parameters for essentially how much time a sequencer has in order to get data onto l One. Almost done here. So the other thing that we can talk about later a little bit if we have time, is that you can also modify the node software itself to do some really cool things. So inside of this example or inside of the docs, if you head over to the op stack facts sample hack, so the adding attributes to the derivation function, adding a recompile, you can actually see example hacks of how to modify the op node or the l Two.
00:17:11.850 - 00:18:09.476, Speaker A: Like, the op geth node to do the thing was like the example that we give for modified review is automatically tracking the l One burn, the CAS burn on l Two. You can do all sorts of stuff. You just track all sorts of things about different smart contracts that we pull data. You can put things into L2 whenever there's a specific event on l One and you can do all sorts of things. And then of course, things like add a pre compile together, which lets you take expensive common computations and make them cheaper. So now we're near the end of the deployment process. You can see here that we had basically transferred control over to migration system dictator, and it's essentially just executing a series of steps, preparing the system, getting everything ready to deploy my real network.
00:18:09.476 - 00:18:47.876, Speaker A: And then we're going to be able to run our watch in. So hopefully nobody has broken anything on develop and this deployment is going to work with no problems. Otherwise, I would be shading my head. But I guess we'll find out. Okay, one finalizing deployment. My Drury Whale account is visible. Is my Drury Whale account visible now? How do I make it hide? I just want to go away so I can see the screen.
00:18:47.876 - 00:19:19.350, Speaker A: All right. Frame, what are you doing? Oh, no. Oh, my gosh. My screen is frozen. I didn't expect that the death of me would be that my computer would trash. Oh, my God. Oh, no.
00:19:19.350 - 00:19:47.950, Speaker A: This is bad. Okay. Hello. I think Frame did this to me. No, I think sneak did it to me. Uhoh, not like this. Not like this.
00:19:47.950 - 00:20:16.542, Speaker A: Wow. My God. Not like this. Just start working. All right. I don't know what to do. I don't know what to do.
00:20:16.542 - 00:20:27.790, Speaker A: I'm going to have to restart my computer. Wait. Oh, my God. I'm back. Everything is flashing. It's Frame. I'm blaming Frame.
00:20:27.790 - 00:20:49.334, Speaker A: Quit, please. No. Okay. Oh, God. This is terrible. I need to find but I need to get a terminal. Come on.
00:20:49.334 - 00:21:08.300, Speaker A: Let me have a terminal. Okay, wait. I need someone in the chat. My screen is just frozen. Can anyone hear me? Am I just talking to myself? I'm very confused. I think my wallet software just.
00:21:16.740 - 00:21:18.450, Speaker B: Hey, Kelvin. Yeah, I'm here.
00:21:21.220 - 00:21:43.690, Speaker A: I don't know what's happening. Oh, man. I'm just trying to open up one terminal so I can kill my wallet. Everything is said. Okay, what's the command to open up a terminal? I need someone in the chat to tell me the command to open up a terminal without any control over the rest of my screen.
00:21:45.580 - 00:21:47.130, Speaker B: Can anybody help them?
00:21:48.860 - 00:22:16.458, Speaker A: There is a command to this that I never remember. Take screenshot, whatever, I don't know. All right, we're in a sequencer in two minutes. Okay, so we got to go to the Lt node. Okay, we're in the Lt node. They have to make the genesis con plea. Come on.
00:22:16.458 - 00:22:49.910, Speaker A: Make the genesis con big. I'm just going to paste new so we can where is my key? All right, we're almost there. Okay, we're going to do this. No, come on. Go. Generate with a player. Oh, I needed to say quotes, I guess.
00:22:49.910 - 00:23:12.350, Speaker A: Oh, boy. This is not going very well. And then I'm going to shave my head. What is this? What's going on? I don't understand this in word. This is bad. I don't know why it's not working now. I blame whoever wrote this.
00:23:12.350 - 00:23:54.808, Speaker A: Not what just happened. It's probably in gear and it's using the to make lol. That explains it. Okay, come on, come on. Generate the JWT token spiral. It's so close. All right, not trying to do this to me now.
00:23:54.808 - 00:24:24.980, Speaker A: All right, put a password in the data directory. Put a private key. Data directory. Where is my other all right, put a private key to the not at arrived already. Import it. Come on, import the key. Initialize yourself properly.
00:24:24.980 - 00:24:54.252, Speaker A: All right, it's initialized. Run. Get it run. Gabble on that. Run properly. It's running. Okay, depth is running.
00:24:54.252 - 00:25:12.390, Speaker A: Depth is running. We're almost done. We're soaked both now. I just got to run the op now. That's it. That's it. Copy this thing in.
00:25:12.390 - 00:25:47.530, Speaker A: Get the sequencer key in here and the L one RPC. And it's an alchemy key. Come on. It's running. Okay, we're going to get it. It's running. Okay, so essentially all that's happening here is that it's catching up to gurley to the L One gurley Episcan IO.
00:25:47.530 - 00:27:05.694, Speaker A: And it is a couple of hundred blocks behind, so it'll take a minute to catch up. But essentially, this is just running the sequencer now. So the sequencer is running, and the only thing left is to start posting transaction data to L One, which we could do, but I don't know if we have much time to do that and name why not? We can give it a shot I'm keras. So we're going to why not? Why not? Why not just do this, run this and you know what? For the sake of time and saying key and his insert key, I don't know if that's going to break anything, but to be honest, I don't have time to do anything else. Put it in that run the batcher, get the private key from sequencer, put that in there and then start running the batcher. Okay, so we started running the batcher and essentially now we go over to Burlme. We should start to see soon if the batcher decides to start producing blocks, which is going to happen in a second as we're almost at the tip of the chain.
00:27:05.694 - 00:27:42.442, Speaker A: So you can see the tip of the chain is at block early, block 435, this is at 425. So in just a second the sequence is going to start producing blocks and then we're going to start sending those blocks off to L One. So Bro Dong, the sequencer started producing blocks because it got to the tip. Right now it's filling in the blocks with empty blocks because we didn't produce any transactions. So it's going to start doing that and then after it's done, start producing one block every 2 seconds like clock quarter. You can see here the batcher is starting to add those Elsa blocks to its local state. Boom.
00:27:42.442 - 00:28:21.674, Speaker A: The batch is starting to submit transactions. And so if we head over to the batch address, which is F at 420 69, you can see that 3 seconds ago the Bash submitter started submitting addresses and we now have a fully functional roll up. I don't know how much time that took. In total I over blessed 30 minutes bottle, otherwise that should end. But even in a chaotic situation, see that Bopi stack is so good, even under correct there in the chaotic situation you could restart a computer halfway through it in 30 minutes. So there you have it. That's a wall up.
00:28:21.674 - 00:28:48.466, Speaker A: I can expose this thing to the Internet and people can start quantacting on it, but I probably won't do that yet. But I don't know if you're interested in doing that, let me know or I can sessions in testing it. But this is a fully functional roll up. We have this node and I can start sending transactions to it and I'll start doing stuff. There we are. That's basically it. That's the whole thing.
00:28:48.466 - 00:28:51.750, Speaker A: Hopefully that was 30 minutes. I don't know, who knows?
00:28:53.290 - 00:28:56.280, Speaker B: All right, I'm not sure.
00:28:57.770 - 00:29:02.460, Speaker A: We'll see. We did it.
00:29:02.990 - 00:29:04.700, Speaker B: We had a question though.
00:29:05.310 - 00:29:06.060, Speaker A: Okay.
00:29:08.510 - 00:29:13.280, Speaker B: Does this process work on supply network as well? What changes need to be done? If so.
00:29:15.010 - 00:29:48.166, Speaker A: This process does work on every single network. The only committee you will need to change is in the config, just what the L One chain ID is. And you'll also need to in the architect config specify a network for Sequolia because it's not in here yet, actually. Yeah, so you'll see that there's this getting started network. So you'll just have to edit the chain ID to do the Sequolia stream ID, but otherwise it will work exactly the same. And you could do this on any network. You need to run it on another roll up.
00:29:48.166 - 00:29:54.540, Speaker A: If you want to do an L three. Okay, cool.
00:29:54.910 - 00:30:05.518, Speaker B: That was the only question? Yeah. I don't know, I think well, since you said you don't have a razor, I think you need to shave it.
00:30:05.524 - 00:30:30.402, Speaker A: The next reason you do. All right, thank you, everybody. We kind of made it. I blame Frame for all my problems. I'll have to shave the Frame logo into my head, follow me, tutorial, and you'll get Far and DM me if you need help. Cheers.
00:30:30.466 - 00:30:44.214, Speaker B: Thank you, Kelvin. And thanks, everybody, for attending. I posted the discord link to the Optimism Channel as well in the chat. If you have any other questions. But, yeah, this was fun. Kelvin, definitely appreciate you.
00:30:44.252 - 00:30:51.660, Speaker A: Thank you. And thanks for everybody for sticking in there. I appreciate it. Cheers. Have a good one. See it.
