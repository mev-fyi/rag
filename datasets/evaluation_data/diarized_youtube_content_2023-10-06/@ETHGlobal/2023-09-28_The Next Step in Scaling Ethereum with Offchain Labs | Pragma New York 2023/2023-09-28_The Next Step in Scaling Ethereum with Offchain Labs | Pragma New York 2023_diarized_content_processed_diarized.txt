00:00:07.450 - 00:00:52.646, Speaker A: Our second interview for today. Want to bring on somebody all of you have known for quite some time, a lot of our New York natives. Here the co founders of Offchain Labs. You may know about Offchain Labs from the famous layer two call Arbitrum. We're going to talk about what it means to scale ethereum, how that whole process has been over the last few years, where we're going ahead and next in terms of the evolution of our infrastructure and everything in between, from how everything started to what we're excited about right now. So without further ado, please join me in welcoming Ed, Harry and Stephen from Offchain Labs team. Oh, pure silence.
00:00:52.646 - 00:01:21.958, Speaker A: I love this. So I have a bunch of topics we're going to cover. I want to talk about sort of the history of how everything started to kind of some things you've announced recently. And I'm hoping this is more of a friendly chat between all of you as well, because I want to understand all three of you kind of getting you on at the same time as I'm hoping we're going to learn some new things. So my kind of first question is coming from academia to where we are now, how did you all meet? How did this get started, and what's the story?
00:01:22.124 - 00:01:51.534, Speaker B: Sure, yeah. Let me tell the origin story. Well, we met when I was a professor and Harry and Stephen were PhD students at Princeton, and we had had a history there of doing blockchain related research. The original idea for Arbitrum started in 2014, thinking about how to scale smart contracts before there were any smart contract blockchains. And a bunch of undergraduates built a.
00:01:51.572 - 00:01:53.694, Speaker C: Course project to build a sort of.
00:01:53.732 - 00:02:21.500, Speaker B: Very early proto version of Arbitrum in the fall of 2014. And then after that, I took this strange detour to work at the White House for two years, came back to Princeton, and after parachuting back into academia and wondering what I was going to do with myself, one day, these two PhD students walked into my office and said, hey, remember that Arbitrum thing? Let's work on that again. And that was the genesis of the.
00:02:21.870 - 00:02:25.146, Speaker A: Looks like we're what happened with the mic here?
00:02:25.248 - 00:02:44.990, Speaker B: I'll just check. Yeah. Okay. So these two walked into my office and said, let's do Arbitrum again. And that was the genesis of the Arbitrum academic project. But let me pass the baton to Harry or Stephen to continue this story. Okay.
00:02:44.990 - 00:02:46.320, Speaker B: Mine is live again.
00:02:47.810 - 00:02:51.266, Speaker A: Well, just for the audio, can we turn on all the mics, just make.
00:02:51.288 - 00:02:52.962, Speaker D: Sure is that better?
00:02:53.016 - 00:02:55.140, Speaker B: There we go. Okay, good.
00:02:56.070 - 00:03:26.634, Speaker D: Yeah. So we published the academic paper for Arbitrum in fall in August of 2018, and that was at the Usic. Security Conference. And at that time, we also looked at each other and said, I think there's something really very important here and we want to build it ourselves. So the way it sometimes works in academia is you do something and then someone else builds it. But we're like and we all worked on many different academic projects in our day, so we're like, no, this is the one that we actually want to go ahead and build. And that's when we actually started the company that month in August of 2018.
00:03:26.634 - 00:04:04.138, Speaker D: So we just turned five. Happy birthday. And we were building and building for the past five years and even before that. And it was in August of 2021. So two years ago, just over two years ago, that the Arbitrum Network actually launched to the public. And that was a culmination of years of research and building and some of the actually the initial designs that went way back to Ed's 2014 days at Princeton. And you can look on YouTube and find that original class video, actually from fall semester of 2014.
00:04:04.138 - 00:04:41.362, Speaker D: And the reason I like to mention that is because it actually launch of Ethereum, which is super cool. So Arbitrum has been definitely we've been thinking about it for a long time. And in the academic literature, actually, it was built as a very theoretical system, like, hey, you can build this on top of some other blockchain. But from the earliest days of the company, even before the company founded, it was clear that we were building this on Ethereum. And that's where we put our focus ever since. And in the past few years since launch, we've had a few different iterations. So we launched Arbitrary Nitro a year ago, and that massively increased the capacity.
00:04:41.362 - 00:05:04.158, Speaker D: And Lee is the lead brain behind that. And he's here today somewhere, so go find him. And just recently we announced Arbitrum Stylus, which is the ability now to not only launch EVM contracts on the chain, but also to launch Rust and C and C. And Rachel is here as well. You can find her and the Stylus team. But anyway, I'm sort of getting a little bit past the order we're going.
00:05:04.164 - 00:05:05.440, Speaker A: To cover all those things.
00:05:06.130 - 00:05:08.160, Speaker D: I'm just very excited about those things.
00:05:10.130 - 00:05:42.794, Speaker C: I think there's a little bit more kind of fun to map out kind of the history, like slightly after that. I think early 2019, I think kind of was when I think I went full time and I was the first one to take the plunge into like, okay, this is it now. And we had, I think a good year and a half year, year and a half when it was just us, we brought on one or two other people tiny in person office in Princeton that was convenient to get to.
00:05:42.832 - 00:05:43.514, Speaker D: From where we were.
00:05:43.552 - 00:06:28.710, Speaker C: We met co working space, and we had moved into our own little dedicated office, but very tiny building away in this kind of like, hey, we're all nerdy academics building something awesome that we love. And we raised a seed and we had investors, but it was very much in this kind of beautiful little like it wasn't a garage, but it felt a little like it. And eventually then we kind of started to expand out a little more, got up to, I think, maybe like six or seven people. We ended up deciding to move into a WeWork in New York and kind of had like a few months there because that was in January of 2020 or maybe like a month earlier.
00:06:29.530 - 00:07:10.822, Speaker B: And then COVID and that was actually really COVID was actually an important development for us, as it turned out. And the reason is that when COVID came, so we were actually close to signing a lease in an office space in Manhattan and we were going to be a company with a centralized office in New York. That was the plan. But then COVID happened and so that obviously wasn't going to happen. Fortunately, we had not yet signed the lease, promising to pay monthly rent for two years. So we went virtual because of COVID And then we started hiring people who were not in the New York area. And pretty quickly we realized, hey, this is working a lot better.
00:07:10.822 - 00:08:03.378, Speaker B: This fully distributed thing is working a lot better than we thought it would. And there's just a huge advantage of being able to hire people from not only all over the US, but all over the world. And so we took that plunge, becoming a fully distributed company and that's been huge. I think we would not be where we are today without all of that talent that we've been able to bring in from all over. The ability to go from a few smart and hardworking people in a room to an operation that can actually deploy something like Arbitrum and build the ecosystem that requires just a ton of great talent. And we were able to recruit that in part because we went fully distributed. And I don't know if we would have if not for COVID.
00:08:03.474 - 00:08:25.566, Speaker D: Yeah, I don't think we would have. The fun fact, maybe not so fun for Harry. Harry got the raw end of that deal because he relocated to New York for that New York office that never was. So he basically moved to New York maybe three days later. Everyone's, we're going remote, we're going virtual. And Harry basically had us sit at the cramp department in New York for a year. Fun story for me.
00:08:25.566 - 00:08:28.046, Speaker D: I don't know about that. He's Laughing so we're all good?
00:08:28.068 - 00:08:39.860, Speaker C: Oh, it's all right. But I like to say it's fun. It's nice that ethereum is global. I want a little much louder Groan I feel like that really deserved you know.
00:08:42.070 - 00:08:43.890, Speaker A: That'S what we call it, beast global.
00:08:45.110 - 00:08:45.860, Speaker B: Well.
00:08:49.110 - 00:09:18.398, Speaker A: I guess I'm curious about how the last three years have been, or I guess a little bit over two. You kind of launch main net. It's been monumental to kind of see what's happened with the success of how widely the chain is used, the chain is. I mean, it's still the biggest TVL out there. If you check on l two beat. What was that experience like? What kind of went well, what didn't go well? What are you skeptical of or don't agree with on those certain metrics? From that laugh, I could have guessed. How would you kind of retrospect on the last couple of years?
00:09:18.484 - 00:10:10.714, Speaker B: Well, yeah, so we launched this thing in August 31, two years ago, and this was after about three months of a closed developer only mainnet. The idea is we wanted all the application teams to be able to get their stuff set up and running so that when we threw open the doors of the mall, all the storefronts would be occupied. So we opened it and we got some healthy use. And I think about a week plus in, we had like $100 million of TVL or something. And Stephen went offline for 24 hours, and when he came back, he's like, how are we doing? What's? The TVL. And the answer was 1.6 billion.
00:10:10.714 - 00:10:19.902, Speaker B: So we had like a billion and a half dollars of TVL come onto the chain all of a sudden over a 24 hours period. Completely unexpectedly.
00:10:20.046 - 00:10:36.600, Speaker D: Yeah. So it was right around this time of year, so there are the Jewish high holidays, and like I said, I went offline for a 24 hours period, and then I just thought there was a mistake. I'm like, I don't know what's going on here. RB Nyon for those of you who remember, that was that event. Wow.
00:10:37.390 - 00:11:04.930, Speaker C: But it was a very interesting kind of like, hello into the space just in terms of you spend these months working with teams and getting tons of teams deployed on mainnet in this kind of relatively open developer period we had. But the first application that kind of got this huge amount of involvement was a meme.
00:11:06.230 - 00:12:25.066, Speaker B: Yeah, right. But I think there is kind of a lesson there, and it's sort of proved out over time, too, is if we had at the beginning said, okay, we're going to pick which four or five projects we want to really kind of work with and drive the success of when we launch, we would have probably guessed wrong. That is, we're really happy in hindsight that we went with this fair launch approach that was designed to kind of bring everyone on board and then let the market decide, or the ability of these teams to deliver, decide which ones were going to be big. And I think it's part of the reason that Arvitrim has been as successful as it has that we took that sort of big tent approach to working with applications. But I also want to say that that's not just a sort of marketing or strategy choice, because in order to make that work, we needed to do a ton of really hard engineering work to make it so that it was pretty easy for a team to switch from, say, Ethereum to Arbitrum. And because that switching cost was low, teams that wanted to come on board did not need a month of special engineering support from our team.
00:12:25.248 - 00:12:25.834, Speaker C: Right?
00:12:25.952 - 00:12:40.846, Speaker B: So in order to make that sort of adoption at scale possible, we needed to do a lot of really hard detail engineering work. And I think that's another part of why we've been able to be as successful as we have.
00:12:41.028 - 00:13:22.374, Speaker C: Just to add a little fun piece of color onto this story, it's now something that's kind of like an interesting, exciting story to retell. But at the time, it was terrifying. People who know me can vouch for me. I have pretty solid nerves. It's basically the only time in my life that I think I've had anything that gets at all close to a panic attack was when this novel piece of technology that we had all sorts of warnings about of like, this is novel. This is experimental. Use at your own risk and kind of tried to educate people on we were not expecting and not really hoping for that kind of adoption.
00:13:22.374 - 00:13:45.346, Speaker C: And so I think that it was a very interesting and I think that kind of like we had confidence in what we had built, but there was also a level to which, after a week, I became more confident that if there was going to be a major issue found, probably people would have found it because the incentive was so huge. But it kind of took that for me to sort of calm down a little bit.
00:13:45.448 - 00:13:52.134, Speaker D: That moment for me where there was a single transaction that bridged $500 million. Just think about that for a second.
00:13:52.252 - 00:14:37.090, Speaker A: That's a lot of money. Yeah, that's definitely a high stress environment. Well, one of the interesting things that kind of for some people who've been in this space for longer than three years, one of the interesting things is that we've also kind of seen a narrative change. Four years ago, l two S were just like, hey, we need something up there that can get the TPS up. And that's kind of the metric that mattered. Now it's a mix of not only do we have better ways to think about what types of roll ups there could be or what type of L two definition you want to kind of consort to, we also have now nuances in, well, maybe everybody should have their own and we can kind of do spin offs. We can do very specific things and kind of looking at things like, I mean, you have the Op stack, the Polygon CDK.
00:14:37.090 - 00:14:49.400, Speaker A: You have kind of the ZK development kit. I forget the acronym that they use. How do you kind of view all those developments? How does that cross compare to what you're trying to do? And sort of, what are your kind of thoughts on all those things?
00:14:49.930 - 00:15:26.242, Speaker D: So we have Arbitrage Morbid, which is the offering that allows you to build your own chain. You can build an L three completely permissionlessly and open. You take the code, do what you want with it. There's a set of customizations that come out of the box like your own fee token, the gas token, but then you can actually go in and make deep customizations. I'm probably like I'll give a slightly controversial take maybe, which is I don't necessarily know that it makes sense for every project to have their own chain. There's a lot of interest there and I think we'll find the right balance between them. The analogy that I like to give is to TV channels in which it's clearly that wouldn't work if every show was on the same channel.
00:15:26.242 - 00:15:56.346, Speaker D: There's just too much there and you need differentiation. But it also clearly wouldn't make any sense if every show decided, no, we're not a TV show, we're a channel. You'd end up with like empty programming most of the day. Everyone would have to go and negotiate their own deals with advertisers and distributors. And the system that we have I know this is data like, who watches TV anymore? But it's just an analogy. The system that we have is kind of a decent one which is you have organization by type and interest. So if you're into cartoons, you have the Cartoon Network.
00:15:56.346 - 00:16:18.962, Speaker D: If you like nature, you'll have the National Geographic channel. And there's no exact science where you can have a cartoon about nature which could sort of go either way. And I think that's what we'll see with roll ups. And you also could have some competition. You have a few different news channels, for example. And I think we'll see verticals. So you'll want to be in an environment where you're loosely organized with others that want to be in the same chain with you, that will have benefits for you and your users for this discovery.
00:16:18.962 - 00:16:38.534, Speaker D: Like, oh, I'm on Arbitrum. Nova playing this game. Let me check out this other game that's on the same chain. So I'm not that personally bullish on the idea that every app will have its own chain. I don't think that makes so much sense to me. But I do think we'll see many chains pop up and it's sort of open season now. And who those winners will be, it's hard to know.
00:16:38.534 - 00:16:47.022, Speaker D: And I think a lot of people are angling to sort of build those for new verticals. But also we don't even know what the verticals are yet. I think those will pop up over the next number of years too. Yeah.
00:16:47.076 - 00:18:04.360, Speaker B: So with Orbit, really the good reason to have your own chain if you do is because you need something different or custom that the big public chain like Arbitrum One doesn't provide. Right. And so it's kind of about customizability on those chains because I think a MeToo chain that works just the same but has a switching cost and less TBL and smaller user base doesn't really make sense, right? And so we're really thinking about giving people the most flexibility to figure out how they're going to launch their chain, how they're going to configure it, what kind of data availability, what kind of sequencing, and so on. So, I mean, that's really sort of from the standpoint of how we think about what Orbit is providing. It's really providing that ability to have your own chain, to customize it the way you like. And if you do this as an L3s chain, it's fully permissionless. This is actually pretty important too, because it's not a goal to have a single overarching governance framework that's going to or a single rule or law or principle that everyone has to abide by.
00:18:04.360 - 00:18:12.874, Speaker B: If it's your chain, it's your chain, and you should be able to choose how it operates and you should be able to decide how it's governed for yourself.
00:18:13.072 - 00:18:17.450, Speaker A: What are some of the other kind of toggles that you can customize in this chain definition?
00:18:19.310 - 00:19:13.990, Speaker B: Oh, yeah. So a good example is which token to use that okay, yeah, good. A good example is which fee token to use the Arbitrage One chain and Nova use ETH. And there's a lot of advantages to using ETH. But some chains want to use their own chain as a fee token. Some might want to have a different economic model where, say, they have very low gas price or even don't charge for gas at all, but then have some kind of, say, subscription model or in chain purchases or in app purchases or other kind of economic models. Some might want to tune the chain differently, so they care a lot about they care more about cost and maybe not so much about super fast finality.
00:19:13.990 - 00:19:24.070, Speaker B: There's a whole set of different trade offs that people might make based on the needs of their particular business approach.
00:19:26.090 - 00:19:32.314, Speaker C: I had kind of just like a fun diversion from this which is very related. If you want to do more features first, I can just briefly, I guess.
00:19:32.352 - 00:19:58.846, Speaker D: Two more that come to mind are permissions. So you can scope permissioning differently. You can say it's a chain that's secured by Ethereum, but only these set of people or only I can launch contracts on the chain. So you can control not only your environment, who's actually building in your environment, but it can be open to users. You can also permission on users. This is something we're seeing from institutions. They want to maybe have a KYC chain where actually you can only interact with the chain.
00:19:58.846 - 00:20:19.930, Speaker D: And again, the cool thing here is you can have these permissions, but it's still a public chain in the sense that it's secured by Ethereum. But actually that's another when it comes to public, that's another area which you can innovate on is public versus private. Can you build something that's secured by Ethereum but also has built in privacy. And the answer is yes, these are good reasons to have your own chain.
00:20:21.790 - 00:21:04.920, Speaker C: Now I get my fun little diversion here, which is, again back down memory lane, which is that I guess around four years ago now, when we were working on this originally, like I was describing, we were not imagining building a roll up. And we were not imagining building a world with kind of like where there'd be like, one big or a couple big arbitram chains. We were imagining something that looks a lot more like Arbitrum Nova based on Arbitrum. Any trust today with smaller groups of participants. And like, for example, I think our go to example at the time was a chain that's just one poker game that's created for the poker game. And you play it and then the chain dissolves and much more kind. Of ephemeral chains and sort of at the time.
00:21:04.920 - 00:21:13.706, Speaker C: And this is like one of the things you get maybe when you have a bunch of academics. This was not exactly something that had product market fit. And so it's not an idea that.
00:21:13.888 - 00:22:12.318, Speaker B: But it's also the case that at that time that we hadn't yet figured out what we understand today about how to build a chain that is ethereum compatible as an L two. Right? When we started out back in started the company back in 2018, I think nobody knew how to build an L two that was performant and practical and ethereum compatible and we had to figure that out along the way. And so one of part I think we knew early on that something that had that generality and compatibility was something we wanted. But early on, because we didn't know how to build that, we were focusing on something that ultimately is less useful. But this may be coming around again because the ability to launch, say, an ephemeral chain to manage a particular poker game or like a duel in an online game still probably has some use eventually, as long as it's not the main and only thing you can do.
00:22:12.404 - 00:22:21.694, Speaker D: And another fun fact poker game might have seemed like an example Harry just threw out of there. But you'd be surprised back in that Princeton office the number of hours we.
00:22:21.732 - 00:22:27.170, Speaker B: Spent researching poker, what particular trustless poker.
00:22:27.590 - 00:23:03.326, Speaker D: Call actually science, of course. For science, yes. Nontrivial Hannah design, actually. For science, no. Yeah, there's a lot of academic literature on poker and we used to be reading poker papers a lot as early example of what you can do on an arbitrary chain and just shows sort of how things have developed over time. Back then, there was a time where it wasn't clear that the adoption would be as quick as sort of all in everyone doing it at the same time as it was. And there were thoughts we need to actually not only build the core stack, we need to build some good examples showing people what you can do.
00:23:03.326 - 00:23:27.110, Speaker D: When there was a stop, there would be this one off environment like this. So it wasn't like DeFi is moving wholesale, it was like, hey, you can do a poker game on layer two. And we were going to try to build some of those early applications for our chain. Turns out the way history went, we didn't need to do that, fortunately. And others found the technology and were excited about it even before we had launched it. But we definitely spent a lot of time thinking about those early applications.
00:23:27.610 - 00:24:11.202, Speaker A: I bet those were the good days of state channels being the top of where everything used to be. I think most people already have a good idea for optimistic roll ups are, but I want to just make sure we're not kind of assuming that. So I'd like to kind of have you give like a 22nd version of optimistic roll ups in the next question, but I want to bake that in before you answer the actual question, which is kind of giving how optimistic roll ups work, understanding how something gets finalized is important and decentralization and measuring that is equally important. And now I'd love to kind of understand, from your perspective for Arbitrum, how do you think about sequencing and the guarantees that need to have in the space?
00:24:11.336 - 00:24:53.762, Speaker B: Yeah, so there's often misconceptions about this and there's a bunch of reasons for that. One of them is that the way Arbitrum does this is different from how other optimistic systems do. In designing Arbitrum, we made a pretty hard line that the sequencer should be minimally trusted. That is, the thing that the sequencer needs to do is to vouch for and record which transactions arrived in which order and nothing else. So the sequencer is not trusted for any other purpose and that's actually really important. So to give you an example, the sequencer does not decide how much fee someone is going to pay. Right.
00:24:53.762 - 00:25:38.026, Speaker B: There are some other systems in which the sequencer just essentially takes from your account whatever it thinks is fair. We think that design doesn't make sense and we don't think it is the right design for users from a trust standpoint. Right. So for us, it was always a requirement that the fees you pay are defined by the parameters of the transaction that you signed. And so the sequencer doesn't set the fees, it doesn't collect the fees, it doesn't control what the fee amount is for any transaction. Also, the sequencer is not a proposer. Again, in some other designs the sequencer is a block proposer, but it's not here because we don't want to have that function centralized.
00:25:38.026 - 00:25:40.478, Speaker B: So the sequencer does one and only one job.
00:25:40.564 - 00:25:42.734, Speaker A: What's the definition of a proposer? Just for the audience?
00:25:42.782 - 00:25:42.946, Speaker D: Yeah.
00:25:42.968 - 00:26:51.414, Speaker B: So a proposer basically. So the sequencing is the function of saying which transactions have arrived at the chain. The proposer is the one who says which blocks get built as a result of that transaction. Right? Now one way to build an optimistic system is to say we have a single centralized proposer that announces blocks and then those blocks can be rejected by the optimistic fraud proof system if you have one, if it's not right. But the problem with the centralized proposer is if the proposer is not proposing correct blocks, then you can't make progress. So in Arbitrum, proposing is part of what validators do and the validator set is a broad set of currently ten plus parties anyway. So in the design we took a lot of pains to make the sequencer be minimally trusted for that purpose and to push all of this sort of trust to make all of the other important properties be part of what the fraud proof system is dealing with.
00:26:51.414 - 00:27:31.278, Speaker B: Because the fraud proof system can prove the correct outcome of what happened. So that's an important piece of it that we did early on. So that's kind of the role of the sequencer, right? And currently there is a centralized sequencer that is run by offchain labs and of course it's under the control of the Arbitrum Dao who runs that sequencer. And we started a recently announced a research collaboration with Espresso Systems to build a distributed version sequencing system and so that over time will become available as an option for any Arbitrum chain.
00:27:31.374 - 00:27:34.550, Speaker A: Why is it important to have that be distributed?
00:27:35.130 - 00:28:20.994, Speaker B: Well, as I said before, the sequencer is currently trusted for transaction ordering. The sequencer can censor a transaction for a limited time, not forever, but you might worry that the sequencer will front run or reorder transactions in an exploitive way. And currently that is based on trust, right? The Dow chooses one sequencer and then has to trust that sequencer to not do these extractive actions. But when you go to decentralized sequencing, distributed sequencing, now there's a committee of sequencers also chosen by the Dow, but you only have to trust that some majority of those is honest.
00:28:21.112 - 00:28:52.586, Speaker D: And just to echo what I'd said, I think that there is like this misconception out there when people say decentralize the sequencer. Sometimes people think that the sequencer can at will post arbitrary transactions or take money from your account. In some systems that actually is the case. That's what a centralized sequencer can do. That gets to what Ed said about being a proposer. And if there are no fraud proofs and are no validators, what the sequencer says basically is a law and no one can challenge that. But because there's a live validation and proving system, the sequencer is minimally trusted.
00:28:52.586 - 00:29:24.658, Speaker D: So the sequencer can't take money from your account if it tries to, the validators will stop that. They can't do that. The sequencer can't post a bad transaction that will be included in the chain. There's already a distributed validation system that will protect that. I'm not trying to minimize the importance of decentralized sequencer, but. That's. I think what Ed was getting out just focusing it's about this problem of reordering or delaying transactions it can't infinitely censor because you can always post a transaction on Ethereum but that has its own cost and delay.
00:29:24.658 - 00:30:14.162, Speaker D: What it can do is it can reorder transactions and it can delay transactions. And today there's a centralized guarantee which is we are not doing that today. The arbitrary sequencer is processing things in a first come, first serve manner currently and it's enforcing that policy in a centralized way. But the question is can you decentralize the ordering of the sequencer such that you have a decentralized or distributed property that's guaranteed that, hey, if this consensus property does the right thing, if the majority of these users of these participants do the right thing then the Sequencer not only isn't, but cannot do this malicious reordering. And that's sort of again, not to minimize the problem, but just to focus on what the problem is. It's not quite this large problem that others think it is. Again, in the case of arbitrary specifically, that's not the way the Sequencer is designed.
00:30:14.306 - 00:30:43.890, Speaker C: I want to just circle back around that, finish that out with kind of like what is the 20 seconds of kind of how this works at a high level just because and hopefully this will help some of what Stephen and Ed said click into place if you're not already kind of familiar, which is so basically you're using MetaMask. That's the good place to start. You submit a transaction. That transaction with Arbitrum goes to an entity called the Sequencer. The Sequencer then very quickly confirms the order that it's sequencing those transactions in. That's where the name comes from. It's sequencing your transactions.
00:30:43.890 - 00:31:03.698, Speaker C: At that point. It says, hey, this is the order. If it's malicious, it could change things. It's just a promise that it's making. It's not enforced by Ethereum. That's not kind of the real Ethereum security of a roll up. What happens next is periodically on Arbitrum one, it'll be every couple of minutes depending on how much traffic it posts a batch of those transactions to Ethereum.
00:31:03.698 - 00:31:31.086, Speaker C: That batch just contains the signed transactions. So it's just the same transactions that would look be in an Ethereum block get posted directly onto Ethereum. That's just the inputs that's just kind of specifying what your transactions are. The same way, like I said, would be in a block after that's posted the order of transactions set. So anybody looking at the chain knows what the result will be. You read those transactions, you execute them, you know exactly what the result is. Anybody off chain at that point knows what it is.
00:31:31.086 - 00:32:07.846, Speaker C: Ethereum has no clue. So you can't withdraw your funds at that point because how is Ethereum supposed to know what the result is of executing those transactions? The whole thing is we're not forcing Ethereum to execute them. That's how we're making things cheaper at that point a validator comes in or a proposer and says hey, if you executed those transactions, this is what the result would be. And it just makes a claim about that. And at that point, again, you can check off chain very easily. If that claim is true, it's trivial to check, it's just that again, on Ethereum we can't. And this is where the challenge period comes in, where any other validator can see if that's incorrect.
00:32:07.846 - 00:32:28.930, Speaker C: And if it is incorrect, they can initiate a fraud challenge. And there's an interactive mechanism for Ethereum to actually resolve that challenge and figure out who's correct and who isn't correct and make sure that Ethereum actually has proven knowledge of what this is, which is how you can take funds on Arbitrum and withdraw them back to Ethereum securely.
00:32:31.110 - 00:32:36.840, Speaker A: Maybe also quickly worth just understanding then what is Arbitrum Bold and what's the nuance here?
00:32:37.850 - 00:33:53.098, Speaker B: Bold is the next generation challenge protocol or fraud proof protocol that is currently in the pipeline. We've published the code for Bold as long with a paper explaining the algorithm. There's been a security audit of the code which is published and it's on the pipeline to get to being deployable. So this is the part of the protocol where validators are able to work together to establish what is that to checkpoint to Ethereum what is the correct outcome of of execution. So a way to think about this is a validator can make a claim about what the correct outcome is and stake on that claim. And if nobody makes a conflicting claim, after about a week that first claim will be confirmed and it will be canonical and official and recorded on Ethereum if somebody else makes a conflicting claim. Now you can think of it like a fork of the chain.
00:33:53.098 - 00:35:01.042, Speaker B: So there's a fork and we need to have a fork choice rule to decide which one of those branches is the correct one. So, unlike Ethereum, where it's a consensus protocol and basically it's kind of voting among the Ethereum validators to decide which branch to take with an optimistic roll up like Arbitrum with fraud proofs. The way this works is that it is actually a kind of dispute on the merits about who's right. So one staker or one party who's correct is able to force their version of the chain to be confirmed and all the other ones to be pruned off the protocol for doing that. That is the thing that allows validators to stake on claims about the correct outcome and then any disagreements about them to be resolved. That's the challenge protocol. So Bold is a new version of the challenge protocol which has a bunch of really important technical properties which I'm not going to go into right now.
00:35:01.042 - 00:35:37.562, Speaker B: But the upshot of it is that Bold makes it safe to make the validator role be permissionless. Yeah. So let me talk about what that means. So currently there's a set of around ten validators. That's a permission set and includes a bunch of large and well known entities in the space. And all you need is for one of them. Any one validator can force the correct outcome to be accepted, even if all of the others are trying to lie and cheat.
00:35:37.562 - 00:36:05.446, Speaker B: So when you make validation permissionless, now we have what I think is probably the best possible security guarantee for the chain, is that you'll get the right result if any one party is honest. If any one validator is honest and you can be a validator, that means you yourself with your laptop in your little apartment, if that's how you live, can force the entire Arbitrum chain to get the correct result.
00:36:05.548 - 00:36:11.706, Speaker A: If you hear in 2020 you can be a validator and still make sure nothing goes wrong because you just need.
00:36:11.728 - 00:36:21.920, Speaker B: One honest just need one honest validator. Right? And it's something when it's permissionless, anyone can be a validator. Yeah. So that's the key thing that Bold makes possible. That's awesome.
00:36:23.090 - 00:36:26.206, Speaker A: This is just a research proposal or does that get rolled out?
00:36:26.228 - 00:36:28.734, Speaker B: What's the well, there is code for.
00:36:28.772 - 00:36:29.360, Speaker C: It.
00:36:31.910 - 00:37:30.846, Speaker B: And because it is one of the core security functions of the chain and because it's replacing a fully functioning and battle tested fraud proof protocol, we're going to be cautious about we think the Dow should be cautious about when to roll it out. And so there'll be a process, right? It's been through security audit. The code is published, the paper is published, and there will be a test net that uses Bold. And then presumably after that, Bold will get assuming the Dow decides to a primary Arbitrum testnet, will be upgraded to do Bold. And then again, assuming the Dow decides to Arbitrum one, and Nova would then get upgraded to Bold. So that's a process. And the next step of it is a public Bold testnet.
00:37:30.846 - 00:37:40.294, Speaker B: But if you want to see the code, want to understand the protocol by reading a paper, want to read the security audit by trail of bits, that's all available on our website.
00:37:40.492 - 00:38:54.910, Speaker C: This is one of those cool things. And I think when Ed was describing this, there was the kind of the clause of assuming the Dao approves it. It points at this really cool thing about where we're at now, which is like, Dows are big and messy and complicated, which is great because these are big technical changes that are critically important, and you don't want it to be easy to deploy changes like that. I mean, this is kind of the beauty of where ethereum development has really thrived, where you have a lot of voices and a lot of thoughts and you kind of need to form consensus over kind of wide swaths of stakeholders in order to really make changes happen, which is just kind of critical to avoid sort of capture and to maintain decentralization. And so I think that kind of the neat thing about sort of where we're at working on stuff like this with Offchain is sort of we're building the tech and we're building it in kind of the best way we know how. And I think kind of the cool thing is that Orbit chains, for example, can make their own choices even before the Arbitrum Dow if they choose to adopt something like Bold for Arbitrum One. Anybody else launching an Arbitrum chain can just make their own choice.
00:38:54.910 - 00:39:06.098, Speaker C: And sort of seeing how all of that evolves from just kind of like, implementing this tech and then how it actually sort of enters into the world and gets used is pretty interesting.
00:39:06.264 - 00:39:25.078, Speaker D: I think it's also worth just clarifying when we say assuming the Dow approves, that's not a formality and Harry and I have the keys and we'll listen to what the Dao says and we'll do it. That's not at all how it works. That's not the case. To be clear. Yes, I don't have the key to the chain. The three of us together don't have the keys. No one in our company does.
00:39:25.078 - 00:39:59.154, Speaker D: The only way we can upgrade the chain is we can't actually we can propose software to the Dao as can by the way, anyone here go ahead and build software and propose to the Dow, and the Dao can vote and hopefully will vote on actually executing that change. And it's self executing. What that means is the Dao's vote is not a signal to some multi SIG. And that's how actually, some Dows work where there's an on chain vote and there's a multi SIG that's supposed to listen to the vote. That's not the case here. The Dow actually votes on what the software is, and that vote actually executes that change. So it's not like us.
00:39:59.154 - 00:40:28.010, Speaker D: We don't have any capability to do that. No matter what you do, we can't change that. The only entity that can change that is the Dao. And it's really cool because that means that anyone who is part of the Dao and part of the community can participate in that process either in the discussion on the forums or the voting, and really can build the future. And if there are developers here, again, you can go to the Dow and build software changes yourself and present things, and you're in no more better position than we are at Offchain Labs. We just have a lot of expertise in building the software.
00:40:30.290 - 00:41:16.534, Speaker A: I want to touch on one other technical thing before we move on to kind of one of my last couple of questions, but bear with me on this oversimplification but off chain labs and Arbitrum was not really started as a way to scale ethereum. It was a way to scale smart contracts. From kind of my perspective, you've always sort of talked about and innovated on how you can actually have better execution and better runtimes for smart contracts. So I'm kind of curious about what are kind of your different views here on how people should think about the evolution of smart contracts. And I think the stylus comes into play here too. What's kind of the thinking behind that? Why do you think it's important or what that unlocks or kind of keeps the same, but you have some better guarantees? What's kind of the way to frame all of that from your perspective?
00:41:16.662 - 00:42:18.254, Speaker D: I think the way to frame all that is, as you said, Arbitrum as a project, as a concept existed before Ethereum. But it was very clear to us early on, as it is today, that Ethereum is where it's at for smart contracts from a technical standpoint, decentralization security, but also from a community, from the room here that we have today, all the people building and innovating that's happening on Ethereum. But I think we also have to step back and realize that the world of Ethereum today is relatively small. If you look at the numbers out there, there are about roughly 25,000, again estimated to be Solidity developers, 3 million Rust developers, 12 million CC plus plus developers. And I believe in Ethereum ETH global, right? I believe that Ethereum should be globally. I don't think that should require us to say, okay, all these millions of developers need to learn all the tooling that we know how to do. We have something very special here, but the rest of the world is catching on and we should bend our systems so that they can easily develop on those.
00:42:18.254 - 00:43:21.246, Speaker D: And that's know, I think EVM is critically important. I think we have a massively important community around the EVM and that's the people that's the code, and that's not going anywhere. So I wouldn't recommend that Arbitrum or any other chain get rid of EVM support. Arbitrum has the best EVM compatible support that's possible today, deep, deep down uses the same guest node, and that's here to stay. But we should also say, hey, is there a way we can do more? EVM shouldn't be the ceiling, it's not the ultimate goal resource the floor, we need EVM. But hey, are there ways we can make a forward insist to other developers? And today you have other chains that have done things like Solana has Rust support, for example, and they've done a great job in onboarding Rust developers. But the question that we asked is, can we in one environment have Solidity and Rust and C and C plus plus working alongside each other? So you have the best in class EVM experience, but you can also bring in C libraries if you want your application, or others can, and you can interact with them in one chain and you don't even have to engage with it's not like, oh, you're in the Rust zone, I'm in the Solidity zone.
00:43:21.246 - 00:43:43.642, Speaker D: No, this one zone. I don't even know what language your contract was written in, but I can talk to it and that's what arbitrary Stylus is. And again, it's about inclusivity. It's about we have something great with EVM. We're going to keep that. But can we do EVM plus we call it can we actually expand this to expand the reach to more developers to make it even easier building on Ethereum? And the answer is firmly yes, we can.
00:43:43.776 - 00:44:28.106, Speaker B: Yeah. So let me just put in a plug for trying. Stylus is one of those I keep telling everyone this, but I think it's true. It's one of those tools that you can't fully appreciate until you try it because the team developing Stylus did an incredible job led by Rachel, who's here in the room. And basically it's one of those tools that when you want to do something, you think, I hope it works this way. And Stylus is one of those tools where everything pretty much worked the way you hope it does. And sometimes it does the thing that you thought probably wasn't possible but you just wished for.
00:44:28.106 - 00:44:30.166, Speaker B: It's actually kind of an incredible development.
00:44:30.198 - 00:44:31.050, Speaker A: That'S rare.
00:44:33.550 - 00:45:31.386, Speaker C: Just to kind of zoom out slightly on this, just because I think Steven and Ed already did a great job talking about Stylus. One of the cool things that L two S get us for Ethereum is basically kind of this open space to innovate, that Ethereum is slowing down and it needs to slow down the rate at which it's breaking things because fundamentally you need a strong layer that everything else can build on top of. And L two S, and in particular, I think Arbitrum One has made similar decisions to kind of innovate relatively carefully. And I think Stylus is kind of very careful innovation that makes sure to not kind of disrupt anything that exists. Just to add. But roll ups also provide this kind of open slate of you can do anything. I think we just saw yesterday before announced like a roll up on top of Ethereum that uses the Solana virtual machine that all of this, and especially with arbitrary orbit chains, the ability to kind of just arbitrarily innovate.
00:45:31.386 - 00:45:42.138, Speaker C: And have chains that are secured by ethereum consensus but can do. All of this experimentation and playing around in the execution layer is just such a cool ability.
00:45:42.314 - 00:46:17.046, Speaker D: And the really cool thing is the successful experiments there can actually be potentially brought back to Ethereum. So I think this would be a long road to get there. But I'm actually pretty hopeful that maybe Ethereum would consider adding sort of Stylus support eventually as well. And to those of you that sounds like a foreign concept if you're here for long enough. There used to be a project called eWASM and there was a lot of interest around this. It didn't actually for different reasons. It was early, wasms developed a lot in years and maybe now is the right time and Arbitrum is excited to lead the way, but we're also excited in offshore labs to contribute back to Ethereum.
00:46:17.046 - 00:46:29.440, Speaker D: We build Prism as well, and we're excited to contribute in many ways to Ethereum. So my hope is this is super successful in Ethereum and our goal isn't to lock it into the Arbitrum ecosystem, it's to make it accessible to whoever wants it.
00:46:30.370 - 00:47:06.170, Speaker A: No, thank you for that. This is actually extremely helpful because one of the things that we've seen, just kind of from my personal perspective the last five years, is getting people to learn a brand new language is not easy because their primitives are not exactly the same. They're sort of the equivalent, but they're not exactly mappable. But more importantly, having a rich ecosystem matters. Being able to use dependencies that you rely on, being able to get support on those things, people just plug into things that we know have worked is a massive unlock and this type of thing just enables a lot more of that. So getting those 12 million more developers in is a pretty big win.
00:47:06.320 - 00:48:04.378, Speaker B: Yeah, and there's another way in which that large developer community in these languages really helps, and that is that the software development tools, tools for testing and debugging and all of that, are much more mature for these more popular languages. And if you want to ask why is it that Stylus is ten x or more efficient for computation than EVM? There's a bunch of reasons, but one of them is that it gets to use, say, compilers. If you're using the Rust compiler, the Rust compiler is better at optimizing your code than the Solidity compiler, which is what you'd expect given that Rust has so many more users and therefore so much more effort and engineering has been put into optimizing all of that. And so it's not just that we bring in all these developers, it's that we bring in these much more mature and battle tested and functional tools.
00:48:04.474 - 00:48:09.120, Speaker A: Absolutely. Is there something that you disagree with each other on?
00:48:10.610 - 00:48:15.682, Speaker D: I wore a polo shirt, Harry a T shirt, and ed a button down, so couldn't coordinate that.
00:48:15.736 - 00:48:19.490, Speaker B: On a different day, it might have been different, although Harry will probably be in the T shirt every day.
00:48:19.560 - 00:48:19.986, Speaker D: Yes.
00:48:20.088 - 00:48:23.970, Speaker C: I'm the only one who's not human, apparently, judging from my profile picture.
00:48:24.950 - 00:48:30.690, Speaker A: I think the thing that I'm most impressed with is I don't know, this was coordinated. You ended up sitting in the same spots as your photos.
00:48:30.770 - 00:48:31.960, Speaker B: That was something else.
00:48:32.730 - 00:48:33.830, Speaker A: There we go.
00:48:33.980 - 00:48:35.478, Speaker C: Not my first panel.
00:48:35.654 - 00:48:40.460, Speaker B: Yeah. A lot of success in this field is about attention to detail.
00:48:40.830 - 00:48:44.700, Speaker A: I absolutely agree. I still want an answer, though.
00:48:45.790 - 00:48:49.274, Speaker D: Well, yeah, let me say this tension to detail.
00:48:49.392 - 00:49:29.610, Speaker B: Yeah, no, let me say this. I think a really important part of being successful and having a good experience as a startup founder is who your co founders are, and the ability to work together and the ability to complement each other and sort of take advantages of the strengths of each of you. And I think we've done a pretty good job in hindsight. Not a perfect job. We're always learning, but I think we've done a pretty good job of that, of taking advantage of the things that each of us brings to the table. And we certainly have had some vigorous internal debates. I wouldn't call them fights, but I would call them vigorous debates about what we should do.
00:49:29.610 - 00:49:33.002, Speaker B: And we end up, I think, making better decisions because of it.
00:49:33.056 - 00:49:34.540, Speaker D: I'll give you a fun one.
00:49:35.230 - 00:49:36.380, Speaker A: There we go.
00:49:38.690 - 00:50:12.626, Speaker D: Cornell has this blockchain boot camp every year, and I think it was 2018. And anyway, I went and someone was really actually, it was Nicola Greco from Filecoin was like, pushing me and like, hey, there's this thing called ZK roll up. You guys need to call this thing a roll up. Call this thing a roll up. And we had a vigorous internal debate on Larry Davis style. I don't think so over time, but over time we came around to that. But yeah, it's kind of funny because the ecosystem is sort of the default.
00:50:12.658 - 00:50:13.670, Speaker A: For most of us here.
00:50:13.740 - 00:50:14.360, Speaker D: Yes.
00:50:16.090 - 00:50:29.660, Speaker B: Well, yeah, so that was an interesting one because it wasn't clear what roll up was going to be. And in fact, the thing that people call a roll up today is not really what that term means. Something different today than it did back then.
00:50:30.670 - 00:50:58.870, Speaker D: Yeah. And one other, just on this point is sort of tangential, but we were raising funding for the company initially in 2018. We got into the following conversation all the time. So are you a state channel or are you a plasma? Neither, but no, you're a state channel or a plasma. And eventually I actually gave a talk where I said Arbitrum and advanced state channels where you sort of just like reframed everything for state channels because no one else will.
00:50:59.020 - 00:51:00.486, Speaker C: Plus exactly.
00:51:00.588 - 00:51:19.022, Speaker D: There you go. So it's interesting, actually, the way it doesn't really answer your question. It's like some skirting here. I'm satisfied. Okay, good. But the vocabulary develops in a very interesting way in the space. And the other interesting point here is people get very caught in sort of their memes and things that you're supposed to believe.
00:51:19.022 - 00:52:04.906, Speaker D: One of them, which I disagree with currently, is ZK is the end game. And anyone who wants to I won't have time here because you don't have a few hours, but anyone who wants to engage with me in that, I'm happy to. But if you look back, actually, just a few years ago, and I mentioned this when we raised money, plasma was the end game. And many of the same smart people, and they legitimately are very smart people saying that then or saying the ZK thing now and there's vigorous debate on this point is to make our point here, you should have your opinion. And if you want my opinion, I'll be happy to give it to you. I guess I already have. But the point is, actually, for builders out there, it's super interesting because don't get caught by the memes and say or don't be locked in by the walls that other people's people have built.
00:52:04.906 - 00:52:23.586, Speaker D: Because if you do, we would never have roll ups because we'd all still be building plasma because we were told that is the end game. There are a lot of smart people out there, but smart people make mistakes and smart people's thinking evolves. So if you have a really good idea and you're convinced it's a good idea, keep building it and keep trying and the narrative will come around to you if it's a good idea.
00:52:23.688 - 00:52:41.190, Speaker B: Yeah. So just more on this sort of ZK is the end game thing. Watch the off chain Labs Medium account for a post written by me that will be going up probably within the next 24 hours on exactly that topic.
00:52:42.330 - 00:52:43.382, Speaker D: You heard it here first.
00:52:43.436 - 00:52:44.310, Speaker B: It might be up already.
00:52:44.380 - 00:53:09.760, Speaker C: Actually, I was just going to add on in terms of arguments. One of the fun things I think is all of us kind of coming from an academic environment is just like you're very used to arguing in front of whiteboards. It's definitely a very important part of academia. And so, kind of like before we started getting into sort of like the business world, I think we already had a good amount of experience with butting heads in a productive way.
00:53:11.650 - 00:53:17.490, Speaker B: One of the first things we bought, actually, as a company was a Ginormous Whiteboard massive.
00:53:18.230 - 00:53:22.340, Speaker D: Got to get it through a window on the second floor because it wouldn't have been in the elevator, actually.
00:53:24.170 - 00:53:29.234, Speaker B: Now, of course, we're fully distributed, so we only get to use whiteboards together occasionally.
00:53:29.362 - 00:53:35.510, Speaker C: But that same whiteboard, actually, I learned not that long ago, still exists in a storage unit somewhere.
00:53:36.250 - 00:53:37.320, Speaker D: This is true.
00:53:37.690 - 00:53:45.590, Speaker A: Well, Steven, Harriet, thank you so much for joining us and sharing your thoughts. This has been excellent and looking forward to that blog.
00:53:46.410 - 00:53:48.350, Speaker D: Dear Tajit.
