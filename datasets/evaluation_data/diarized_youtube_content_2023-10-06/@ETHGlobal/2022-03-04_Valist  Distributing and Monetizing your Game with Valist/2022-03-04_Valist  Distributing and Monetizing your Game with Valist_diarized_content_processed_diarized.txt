00:00:00.650 - 00:00:37.254, Speaker A: We actually came out of a Hack Effect 2020 hackathon two years ago. So it's been a really cool full circle coming back and sponsoring a neat global hackathon. It just feels that like, perfect full circle. But yeah, we're super pumped, I guess. To tell a little bit about that story, we did come out of Hack FS 2020, and then Consensus Protocol Labs noticed us, requested us to apply to their tachyon accelerator, and then we went through that. That was amazing. It was like a startup boot camp.
00:00:37.254 - 00:01:01.230, Speaker A: It was amazing. And after that, we raised a precede round, hired an engineer, and then spent the last year solving a bunch of engineering problems around Web Three native software distribution. So now we're here. We're super excited to kind of be the Web Three native platform for these games and applications that are being published.
00:01:03.890 - 00:01:20.438, Speaker B: Well, thank you. Thank you again. It's always great to have former hackathon participants come back and join us for these events. It's kind of like the perfect life cycle right there. So we're stoked to have you. We will be taking questions throughout this session if you guys are interested. If you have any questions, ask now.
00:01:20.438 - 00:01:43.280, Speaker B: It's a great opportunity to do that. You're going to be building with some of the stuff that Alex working on that Valis brings to us for this event. So highly recommend linking up with him in Discord afterwards and continuing that conversation. He'll probably drop some details in the chat, just just follow up with them. It's a great way to keep it moving. But without further ado, the floor is all yours, my man.
00:01:43.810 - 00:02:10.070, Speaker A: All right. Thanks, Luke. Appreciate it. Well, I will just get started by sharing my screen real quick. Just a quick format for this. I'm just going to go through a little bit of conceptual stuff, sort of what Web Three native software distribution is and what you could do with the Valas platform. And then at the end, I'm going to show a little demo of publishing a Unity game and token gating it with our software license NFTs.
00:02:10.070 - 00:02:41.518, Speaker A: And yeah, I'll be happy to take questions in the chat. I'll be paying attention to the chat. So if there's anything that comes up that you're curious about, definitely feel free to drop it in there. But otherwise, let's get started. So I'm going to share my screen here. So Valus is Web Three native software distribution, and that means it's the best way for developers and Dows to securely publish, fetch, auto, update, and fairly monetized software. And so I'll be going into a little bit what that means.
00:02:41.518 - 00:03:54.290, Speaker A: But basically the concept is bringing over all of our software to Web Three. So these elements here, publishing, fetching, secure updates, dow coordination, and software licenses and why do we need it? Well, as I mentioned earlier today, we're still distributing Web Three over Web Two. So despite all of the energy we're putting into decentralization we're decentralizing everything kind of at the distribution level by publishing our packages on systems like Microsoft Azure, Google Cloud, GitHub, Amazon, Versal, you name it. That's kind of the current bottleneck that we're trying to fix. And what can we do now that we're in Web Three? Well, at first the concept is very similar to any other Web Two publishing platform. Again things like versions publishing fetching, but also things like access control, both at the team level and at the project level. So we just poured over all of the existing functionality from our Web Two counterparts and then once reported over, we no longer rely on a single entity for distribution.
00:03:54.290 - 00:04:45.590, Speaker A: So there's no way for this software to get taken down. And we've seen GitHub do that with some security tools. I actually come from an infosec background myself, so I get personally caught up when Microsoft makes those types of decisions and I'm sure everyone here has experienced some form of that. But another amazing thing that we could do now is Dows can coordinate software releases together. So instead of relying on a single team like on the Ethereum Foundation to build and publish Geth or any other blockchain node software or really any other web3 tool that we use, instead of relying on a centralized team to package it. Or a lot of the times it's a GitHub action running in some CI CD. That's the sole packager and distributor.
00:04:45.590 - 00:05:37.794, Speaker A: We can now multi SIG this and have multi sigged software releases where now a thousand people from around the world can help build Geth, submit their version and coordinate based off of a hash there. So basically decentralizing that process and allowing Dows to actually publish their software directly. And then of course awesome things like secure auto update systems. So for tools that are relying on IPFS and other smart contracts, you can easily update that software. So you can imagine in the future browsers like Brave instead of updating through a centralized entity. Brave has a lot of Web Three stuff built in. If Brave upstreamed vallast, then it would be able to update itself in a decentralized way like this.
00:05:37.794 - 00:06:44.702, Speaker A: And you could apply this to all browser extensions, pretty much any binary software or package software. And then of course, and this is quite relevant for this hackathon, you can monetize software directly using software license NFTs. You could basically create a license that you can then token gate your application or game with and basically sell it as if it was a game. In Steam, only Steam takes 30%, whereas with the software licenses you could configure that how you'd like. And we have awesome features coming soon, like ERC, 20 payment support and royalties and things like that. But how does it work? Well, the high level is basically you publish a release to IPFS this then gets backed up across a bunch of IPFS nodes on different storage networks or sorry, pinning services and then it's archived onto filecoin. So pretty much anything you distribute through Valust is going to be redundantly backed up all over the world.
00:06:44.702 - 00:07:52.500, Speaker A: And then Vallast takes the SIDS from the artifacts that you just uploaded and tags them as a version inside of a smart contract. And then this smart contract is on Polygon and manages your team access control, your project level access control, as well as Immutable versions for each one. So this then makes the client aware of all the access control lists and releases. And then if you fast forward this too, you can have awesome things like versioned front ends to where now you could go to Vallastuniswap Frontend and you could pick a version of the front end that you'd like and it's all distributed that way. And really it's a set of tools that glue these protocols together to make Web Three developers lives easier that's you and so how do I use it? Well, basically for this hackathon, the primary methods are the Web dashboard and the TypeScript SDK. We also have a GraphQL API. A lot of that stuff is abstracted away in both of these tools and yeah, you can use it all kinds of different ways.
00:07:52.500 - 00:08:47.986, Speaker A: Where do you find it? You could check it out at Vallast IO of course, come hang out in our discord, we'd love to have you. And then the docs are always a wonderful place to look. So I'm going to start there and just kind of go a high level tour, so to speak, of how you're going to navigate around and sort of the key concepts to definitely read up on if you're curious. But of course getting started page you could go straight into publishing a release if you like. But if you want to learn more about Web Three native software distribution, the big picture of it again kind of how it works as well as the impact of Web Three native software distribution, you could go ahead and check that out here. We're always thinking about awesome different mechanisms for things like public goods funding as well. Proof of contribution NFTs are coming soon as well, but right now we have software license NFTs.
00:08:47.986 - 00:10:02.878, Speaker A: So definitely would love to hear your ideas for what you think Web Three native software distribution should look like and some of the use cases that you've run into in distributing your Web Three software. So core concepts you could check out how teams work really teams are very similar to any organization account on things like GitHub or Versal. It's simply a higher level username that you can then put team admins on and projects under the team and then anyone who's a team admin can manage all projects and are effectively admin accounts. So for larger teams we definitely recommend making this a multi SIG system so you can deploy a Gnosis safe onto Polygon and then set that as the only member in a team and make it to where. Now that team is controlled by a multi SIG for some of the more security critical actions. A team also does reference a Beneficiary address. So I'll get to this in a second when I go through the web app, but basically you're going to take an address for all payments in the system.
00:10:02.878 - 00:10:41.818, Speaker A: So either donations or the revenue generated from a software license NFT will go to this Beneficiary address. And you could also do things like free licenses that allow you to allow people to donate. Or if you're an open source developer, then you can create a special license that gets people extra support, things like that. And then projects. Super simple concept really. A project is just a namespace for all of the versions for that project and it also contains a separate set of project publishers. So the members inside of a project only have permission to publish inside of that project.
00:10:41.818 - 00:11:20.870, Speaker A: So very similar between a team and a project. And to answer the question in the chat Marwanaziz, sorry, if I butchered the name, can the Beneficiary also be a multi SIG? Absolutely. Pretty much any address in the system can be a multi SIG if you'd like. It's also really easy to rotate keys if a key does get compromised if you didn't have multi SIG. But yeah, all the access control is super flexible. You could plug in your own multi SIG. The only one we don't support yet is Argent, but when we deploy to ZKsync, we intend for Argent to work as well.
00:11:20.870 - 00:12:26.780, Speaker A: But Gnosisafe on Polygon is a good bet and then releases are just what they sound like. They're just a packaged up application. It could be any binary executable, it can be a web application, it could be a unity game, which I will show off here in a little bit, but it's really just any arbitrary piece of software that you give a version. The release points to the IPFS hash and so you could fetch it there. And then we're adding more support for different storage networks as well. But yeah, our defaults are IPFS and Polygon just as a reference. And then for software licenses, I kind of talked about this a little bit, but it's an ERC 1155 token and you can use our front end to easily set a price and our front end allows you to easily purchase these NFTs basically as if you were buying a game from Steam is the concept here.
00:12:26.780 - 00:13:31.594, Speaker A: It's 1155 compatible and then once you've minted the license, our front end allows people to purchase them and it checks the balance before showing them the download link. And then for the extra security, you want to token gate from inside of your application. So basically the flow here is once you've created the software license NFT, you need to embed the license check inside of your app. And really all that is, is making sure that the user has a balance of the software license NFT. So really you're just checking, okay, balance of the wallet address, make sure it's greater than zero or however you want to set it up and then unlock the rest of the game or application from there. And we recommend several different ways to do that. For Node, JS and web applications, you could use our Valust SDK to check these balances and you could also use Mintgate.
00:13:31.594 - 00:14:15.630, Speaker A: Our friends at Mintgate build awesome things and you can Token Gate with them for Unity. We actually have a lot of options here. ChainSafe gaming is a great option. Our friends there do great things. We also have an example script that I will go over a little bit soon that you can use kind of as a boilerplate for your game. This is always going to be different depending on how you actually implement your game. But we provide a sample script for Token gating with the Valis software licenses and then you could also use the Morales Unity SDK or really any Unity SDK that can query polygon balances.
00:14:15.630 - 00:15:03.660, Speaker A: So yeah, let's just get right into the actual deployment. I have this test key here with the test organization called Acmeco that I'll be publishing to. And I have a few example games published here to jump into this one. This is what it looks like when you've uploaded the game that you set a price to and you don't have it in your wallet. So the front end knows that I haven't purchased this game and then offers me the ability to purchase the license I set it to super cheap just as an example. But you could set this to any amount in Maddox that you'd like. And again, very soon we're going to have ERC, 20 payments there.
00:15:03.660 - 00:16:11.922, Speaker A: And then when you do have a game, it'll just show the download link and then you go ahead and launch it and it will launch the Unity game there. And so I will show you how to actually set this up in an easy way. Really all you have to do once you create a team, I won't go through the team creation process, but basically you would create an example team and you would fill in your website, you would fill in a description and then you would fill in your beneficiary address for that team. And again, to answer the question in the chat, this could be a multi SIG address and then you put a list of members that are admins of this team. So I already have a team created, so I'm not going to do that. I will create a project instead under this team and I'm going to call this Token Gated Unity Four. Done this demo a good bit, so that's what happens.
00:16:11.922 - 00:16:56.818, Speaker A: But yeah, let's give it a short description. Token Gated Unity game and an example token Gated Unity game sold through the Ballast platform and then you could give a project a list of members that are separate from the team admins. We recommend that you do use a different set of project keys from team admin keys for security reasons. So just in case the project key gets compromised, it can only affect that project. And again, a project key can also be a multi SIG. So it doesn't have to just be a multi SIG on the team level, it can also be at the project level. So I'm going to go ahead and create this.
00:16:56.818 - 00:18:10.730, Speaker A: Actually, I'll set a project image and we'll do something cool here and create a project. What that'll do is trigger a meta transaction. So this is on Polygon Mainnet and Vallus is paying for all the gas for all of these features, everything except for the actual purchasing of a game that you got to do yourself. But everything else as far as creating a team, a project, and releases, all are metatransaction powered. So you could get started using this by just generating a fresh key and getting started with it. So our concept there is trying to make Ethereum keys, more like SSH keys, in the sense that right now your SSH key is kind of your developer identity on GitHub and other places. And developers are pretty used to that flow, whereas now you could build up reputation on your wallet and you can view all of the projects that you published from there, as well as proof of contribution and any software licenses that you've purchased.
00:18:10.730 - 00:18:43.460, Speaker A: So that transaction just mined on the Polygon main net and we'll give it a second for the subgraph to index things. Sometimes it takes a second. But yeah, when we created that project, I hit refresh and now we have Token Gated, Unity Four. And we go in here and we see we don't have any versions yet and we don't have a license for this game. It's currently. Sorry, siri. Yeah, but anyway, so right now this game is just a regular project.
00:18:43.460 - 00:19:23.300, Speaker A: There's no license associated with it. I've created these other licenses, but they're for other games. So I'm going to go and create a license for this game now and set a certain price for it. I'll use the same image just so that it's a little more consistent. And then we'll call this I was using Gems so far. We'll do Sapphire Edition for this license and then I'll set this super cheap just for example purposes. But yeah, this is the Sapphire Edition of the Unity game.
00:19:23.300 - 00:20:00.570, Speaker A: And then I go ahead and create the license. It triggers another meta. Then, you know, we'll wait for that to mine. And yes, Siri is always chiming in. She's always got opinions for things, but we welcome all opinions here, human and AI. But anyway, so we created this license and while we're waiting for it, I will check out the Unity example that we have now. Just quick caveat, I am not a game developer.
00:20:00.570 - 00:20:56.766, Speaker A: I learned just enough to be dangerous for this demo. Thankfully, our lead software engineer, Keenan, actually is a game developer by night, which is incredible combo, but he helped me put this together. So apologies if I'm butchering all the game developer stuff, but this is an example script using the ChainSafe SDK to query the balances of this license contract. So the way this works is and you could kind of configure this how you'd like. You'll implement this as you'd want to, but the contract address that you could stay, and then you change the token ID. You could change the salt that you want to use. But the general flow is that when you click this button here, it triggers a MetaMask prompt to sign a message.
00:20:56.766 - 00:21:40.970, Speaker A: And then it takes the recovered signature, it recovers the address from it, and then it uses that to query the balance of the token. And then it logs whether or not you actually have a token balance. So you as a game developer, when you connect this up, all you really have to do is check the balance. And then if the balance is greater than zero, you can move on to the next screen. So you could do this however you'd like in a loading screen or a menu, really. It's up to the way that your game mechanics work. All you have to do here is I drag and drop this script into this object, and then now you can actually change the attributes.
00:21:40.970 - 00:22:18.600, Speaker A: And so what we would do here is go to the view the licenses. I'll give it a quick refresh, make sure that the subgraph updates, and we see the Sapphire Edition of the license. So I could copy that token ID. It's in my clipboard now, and then I could program this button to check for that token ID. Once you hit save, you can go ahead and build it for reference. I'm using WebGL. That's the easiest way to get a game to talk to MetaMask, but if you're using Morales SDK, I don't think you need to do that.
00:22:18.600 - 00:22:50.562, Speaker A: And then if you're not compiling WebGL, it'll pop open in the browser. But this is a good flow, really. The only settings that you need to really care about are IPFS gateways don't support some of the compression that Unity expects. So checking decompression, fallback, or even disabling the compression format will help there, but then you just go ahead and hit build. I'm not going to do this now because it'll totally wreck my computer. It's actually bizarre. It'll make crazy pops in the microphone and everything.
00:22:50.562 - 00:23:31.710, Speaker A: So I won't do that. I will show another license game that I already put together in the Unity Three example. But the idea being is that once you get your license ID, you could program it into your game. You could go ahead and build, and then when you go to publish, you would pick the Sapphire Edition license in the front end. You give this a version. This would be the first release, and then from here, you would be able to build your game files. You can upload it there, and then it'll upload the whole game bundle.
00:23:31.710 - 00:24:01.878, Speaker A: It'll, create a transaction and link it to that license. This one's connected to the wrong license, so it won't work. But just for an example, this is how you would actually publish your game. You literally just drag and drop the Unity exported files into the drag and dropper, and it will publish everything for you. You could also drag and drop next JS applications, any static websites or any binaries, really. You name it, it's arbitrary. And then the vallast front end and SDK.
00:24:01.878 - 00:24:39.222, Speaker A: Just try to be clever about what kind of file it is. Let me just go ahead and purchase a license that we've already set up and built so that we don't have to go through that whole process. By the way, throughout this, I have learned game developers are a totally different breed. I have a newfound respect for these things. Fascinating stuff. So anyway, I go and purchase a license, and it pulls up the value that I have. I go ahead and click Confirm, and then we could watch this.
00:24:39.222 - 00:25:50.506, Speaker A: This is a normal transaction, not a meta transaction, since I actually have to pay for this game. But we'll wait for this transaction to go through, and then this will actually mint the token into my balance. And you could actually check this out on websites like OpenSea and any other NFT gallery that supports polygon. So you see, the software license shows up here, and then the one I just minted will also show up here in a you know, of course, you got to wait for things to index, and you can kind of see? Okay, I've minted a software license token to this wallet, and then after that, it'll detect that I have this license, and then I can actually go and launch the game. So this is my super simple attempt at a Unity game, my first ever Unity project. But, yeah, again, this is built with the ChainSafe SDK. So when I go and click Connect wallet, it'll switch me to the main net because that's how chainsafes works.
00:25:50.506 - 00:26:25.042, Speaker A: And I got this weird Unity issue I see every once in a while. It's a weird unity thing. But anyway, I connect my wallet. It prompts for a message signature, and then I go ahead and sign it. And then it's hard to see here, but in the log, it says a balance of one here. And the success means that I actually have the token in my wallet. And if I was actually any good at game development, then I would make the screen change and go over to the next screen now that I have the balance.
00:26:25.042 - 00:27:07.570, Speaker A: But as you could kind of see, the end to end flow works there, very similar to something like Steam to where you just go ahead and drag your game assets in. The license check happens inside of your game to keep things really secure. So even though the front end is also gating the download link, even if you grab the IPFS hash manually and downloaded it, the game still won't launch without the NFT. So that's kind of a key piece there. But then the front end will also be intelligent about whether or not the user needs to purchase that NFT. Again, you don't have to do this to qualify for the prizes that we're giving away. This is just to qualify for our track one prize.
00:27:07.570 - 00:27:55.880, Speaker A: So any game that's monetized through this system, you could also use the licenses as an in app purchase if you like. But yeah, to qualify for the other prizes, really all you have to do is drag and drop your game or application, hit Publish and then you qualify. So there's definitely lots of different ways, lots of opportunities there. And yeah, that's about it. That should be the whole process we're standing by for if you need help. Like I said, our lead software engineer is actually a game developer, so we could absolutely help with these integrations. Whether you're using ChainSafe for Morales, their teams are also great and are always going to be happy to help as well.
00:27:55.880 - 00:28:22.620, Speaker A: And yeah, I'll just kind of catch up in the chat here. Pretty sure you are now a professional game developer since you made definitely that's a new stripe on the belt for sure. Yeah. Thank you. And Clark. Thank you. And Marwan Aziz? Can we deploy to Mumbai? Actually, yes.
00:28:22.620 - 00:29:03.660, Speaker A: This is on Polygon, Mainet, right now, but we actually do have a Mumbai deployment. If you want to use that one to test things out, I could definitely send you the link to that. We actually just removed that link, so I'll add that back for you and then you'll be able to go to Mumbai vallast IO to check out the testnet version you'll have, know, kind of make sure your MetaMask is configured properly. But the metatransactions all work there. Everything still should work the same exact way. It just won't show up on OpenSea or anything like that. So a little less convenient, but yeah, absolutely.
00:29:03.660 - 00:30:19.060, Speaker A: And then Pablo, is it in your future plan to simply import from GitHub? Absolutely. So right now we've kind of focused on everything in the software development lifecycle after the source control onward. But with our proof of contribution NFTs we're going to be having clever ways to scan the dependencies and contributors to give them that proof as well as importing build scripts and making it super easy to basically plug this in to either your GitHub repo, your radical repo, or GitLab any other git repository. We absolutely are going to have lots of deep integrations with Source Control, but you can kind of think of this as like the hub part of GitHub. So all the features that GitHub has around CI, CD, software releases, access control, all those things are what we're focusing on solving while our friends at places like Radical are solving for Source Control. And then we come together and the entire process is then web Three Native. So long way of saying absolutely yes.
00:30:19.060 - 00:30:41.180, Speaker A: All right, so it looks like we are right at time. So, again, I'll be in the discord. I'm going to post my hashtag here, definitely check us out and we're happy to help for anyone looking for it.
00:30:42.350 - 00:30:57.662, Speaker B: Right on. Thank you again, Alec. That was great. Excellent session. Thanks to everyone who joined us. As he said, follow up in Discord, that's where all the magic is going to happen. That's where all the great conversations take place and that's where you're going to learn everything that you didn't already learn here, which is, I guess, nothing.
00:30:57.662 - 00:31:09.230, Speaker B: You learned everything you need to know here. He ran you through everything right like that. Thanks. Hopefully excellent presentation. Yeah, thank you. One can only hope. We're going to be closing the room here.
00:31:09.230 - 00:31:20.200, Speaker B: We'll see you guys in a short bit for one more workshop tonight, but good luck with your projects. Looking forward to seeing what everyone builds. And thanks again to Alec and everyone else.
00:31:21.370 - 00:31:24.340, Speaker A: Thanks, Luke. Thanks everyone and best of luck and have fun.
