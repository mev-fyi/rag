00:00:00.410 - 00:00:01.200, Speaker A: Thank you.
00:00:05.970 - 00:00:27.622, Speaker B: Welcome. Thanks for taking your time to join us. Today we have Zachary and Alec here from Ballis, and the workshop will be on how you can publish and distribute your app, games and binaries in Web Three. I'll let you both take the stage and if you have any questions in the meantime, feel free to pop them in the chat and we'll take them as we go.
00:00:27.676 - 00:00:28.280, Speaker A: Thanks.
00:00:30.250 - 00:00:38.630, Speaker C: Awesome. Thank you so much. And, yeah, I'm Alec, co founder and CEO of Vallast, and we do Web Three native software distribution.
00:00:39.290 - 00:00:44.474, Speaker A: Zach hey, everyone, I'm Zach from Vallast. Great to meet you.
00:00:44.672 - 00:01:19.366, Speaker C: Sweet. Awesome. So we are going today to learn how to publish apps, games, binaries, pretty much anything you need in a Web Three Native way. And I'm going to start off by sharing my screen, going through a little bit of a quick presentation that just goes over the concepts of Vallast and what you could do with it. And then I'm going to pass it to Zach for a quick demo and then yeah, please feel free to ask any questions as we go. We'll keep track of the chat and yeah, we want to make this interactive as possible, so we'll just jump right into it. Yeah.
00:01:19.366 - 00:02:11.654, Speaker C: So Valus is Web Three Native software distribution. And so what does that mean? What is Web Three Native software distribution. Well, that includes things like publishing, fetching and secure updates. But now that we're in Web Three, we could also do some really cool stuff like Dows coordinating software or teams together coordinating software as well as software licensed NFTs to create a new way to monetize and create a DRM system. And why do we need Web Three native software distribution? Well, right now in Web Three, we're still relying entirely on these Web Two platforms for distributing our core components. So things that actually run these blockchain networks like the Geth binaries, the Boar binaries that run these awesome Ethereum based networks, and it all the way goes to the end user for things like Wallets games that we play. But yeah, pretty much everything in the infrastructure layer is still relying on Web Two.
00:02:11.654 - 00:02:49.726, Speaker C: And so despite all the energy that we're putting into decentralization, everyone's pretty much decentralizing everything at the distribution level by publishing Web Three software on Web Two platforms. So that's what we're going to change. And some of the issues with Web Two distribution are some of the issues we're all familiar with. With Web Three, solving is risk of compromise, censorship risk, and availability risk. These are all common things. So, for example, you can have a secure messenger, but if you can't actually deliver it when you need to, how's it going to be helpful. So Web Three native ways to distribute software can actually enable these awesome use cases.
00:02:49.726 - 00:03:56.882, Speaker C: And then if you actually wanted to sell some software, you basically have to ask Apple, Google, Facebook for permission and then they take 30 plus percent. Same with Steam if you're trying to sell a game. So all these centralized payment infrastructures are permission in the first place and then they have this high take rate, so they're actually siphoning off lots of value that we're creating. And so what can we do now that we're in Web Three that we couldn't do before? Well, at first everything kind of looks pretty similar. You port over the common features that you already know and love about these common features such as like versioning publishing, being able to update your apps and artifacts, things like that, as well as manage both team level and then project level access control so you can actually have some security around your different projects. But then Valus is a set of tools that coordinate a bunch of different protocols together to make publishing and software in Web Three pretty easy. And then once we're ported over, we get these awesome benefits, the most obvious being no more reliance on a single entity for distributing any software.
00:03:56.882 - 00:04:33.262, Speaker C: So even if Vallast IO and Vallast inc. Disappears for whatever reason, Vallus the protocol can of course still continue to run. Everyone could continue helping the network itself and then you could monetize software directly to your audience using software license NFTs. So again, instead of having to configure some random Web Two DRM system, you have to give all this information. It's very OD. You could just create a wallet, start publishing software under it, and then start collecting fees from your application. And then Dows can also coordinate software releases.
00:04:33.262 - 00:05:23.278, Speaker C: So if you can imagine a Dow coordinating a new release of Ethereum, clients like Geth pretty incredible. And then you could also create these awesome auto update mechanisms. So things like Brave, how it self updates with Web Three native stuff your applications can self update in a completely decentralized way. And then last but not least, we have some pretty awesome public goods funding mechanisms built in here. So the software license NFTs can actually be used to redirect some community treasury in order to vote on some new indie games, dev grants, things like that, that can actually be more regenerative to the system. So how does it work? Well, it's pretty much tying together a few different protocols. Like I said, the developer initially publishes the release, all the software, all the data gets stored on IPFS and filecoin.
00:05:23.278 - 00:06:09.538, Speaker C: Vally describes the type of software with some metadata and then it is checkpointed onto a smart contract right now mainly on polygon, but we're supporting other networks at the moment as well. And that's where all of the registry stuff is for the team level, project level, and each version within those project, all the access control lists, all the security, everything around that is handled there. And then at the end of it, the client is made aware of the latest releases, who published them, what keys did what, et cetera. And you have this immutable source of truth there. And how do you use it? Well, actually, it's very simple. So we have a web front end, CLI, GitHub Actions and SDKs, depending on your preference. The web front end is a really easy way to get started.
00:06:09.538 - 00:06:35.766, Speaker C: It's a pretty simple. You set an account, set a project, you set a version, drag and drop your files, click Publish, you're good to go. So if you're publishing a unity game, this might be the easiest way for you to do this. The CLI is another great option. You can basically just type Valust Publish and then type your account project version and then give it a path and it'll upload it. And then we'll also go over this later. But you could also configure multiplatform builds.
00:06:35.766 - 00:07:13.654, Speaker C: So if you're writing a Go application and you're building it to Mac, Windows, Linux with the CLI, you can actually describe in the Valous YAML, which binaries go to which platform, and Valus will be able to understand and interpret that. And then we have a super simple GitHub action. Just paste this at the end of your workflow if you're already using GitHub actions. This example here just takes every GitHub release and automatically publishes it on every release. But you could configure it however you like. And then if you want to get in the nitty gritty, start creating auto, update systems, stuff like that. We have TypeScript and Go SDKs, and then you can find it.
00:07:13.654 - 00:07:30.182, Speaker C: Valust IO. You can head to our docs at vals. IO or docs vals IO and then definitely come join our discord. We're super happy to help our community. Yeah, super helpful. We're definitely excited to see you there. And then of course, our code is all available on GitHub.
00:07:30.182 - 00:07:39.760, Speaker C: Every single thing is open source. And so, yeah, thank you so much and best of luck. Much love from the team. I'm going to pass it to Zach and he's going to show you how to publish an app.
00:07:40.450 - 00:07:45.220, Speaker A: Hey, thanks, Alec. GM. GM. FAM. Demo time. Let's go.
00:07:53.830 - 00:07:54.882, Speaker C: Okay, cool.
00:07:54.936 - 00:08:20.786, Speaker A: Let's just jump into it. So this is the ballast dashboard. You can find us on app ballast IO. I'm just going to take it from the beginning. So the first thing on Vallast is we need to create an account. Now, accounts on Vallast are in Immutable namespace. So once you create it, you have it, you have the namespace.
00:08:20.786 - 00:09:16.062, Speaker A: It's a lot like an ENS, it doesn't change. But you can think of this namespace kind of just like as your root namespace, as something like on GitHub, where on GitHub I'm Geogen and then any repos that I publish or any packages that I publish under that are Gujin, whatever the name of my project is. So we can create a new username here. I'm just going to name mine web3 game and then I can set a display name. So the Immutable username you can't change, but the display name you have the full ability to change. You can add special characters, kind of whatever you need. So a web Three game and I can even get sassy with it.
00:09:16.062 - 00:10:23.300, Speaker A: And then I can add my account photo. I always use my handy Dandy Crypto Coven tropoline of the tower, shout out to Crypto coven, best NFT project ever. And then I could just put a domain here. So I'm just going to say, hello world. A web3 game. And so then every valid account has a set of members because this is where things like Dao coordination comes in. If Uniswap wanted to vote on what the next version of the Uniswap front end that will be published? This is where you could link a multi SIG or a Dow contract or really anything like that that would allow your users to kind of sign off on any kind of like group transaction or anything like that.
00:10:23.300 - 00:11:04.050, Speaker A: So I am going to take my address, put it in there, then I'm going to create this account. Oh, sorry. Looks like weird network error there. Let's just try this again. Hey, there we go. Cool. So if I take a look at this transaction there, my transaction has already been included in a block.
00:11:04.050 - 00:11:08.340, Speaker A: Just give this a second. And.
00:11:11.750 - 00:11:23.590, Speaker C: The meta transactions on here as well power the whole system. So just to add to this, actually all the gas is paid for by the protocol as well. So all the publishing is free?
00:11:23.740 - 00:12:11.720, Speaker A: Yeah, absolutely free for open source. Anything you need to do it's all meta transactions, easy to go. So here is my web Three game. So now what this has done is this has redirected me now because my account does not have a project, valas has redirected me to the project creation page so that I can now create my first project. And so same thing for the project, I can select like a nice project image. I'm going to use my other crypto coven for the project image and then for my account or team, I'll select web3 game. And I'm just going to call this the game.
00:12:11.720 - 00:12:37.262, Speaker A: Or even shorter, we can just say game. The greatest web3 game. I don't like that greatest. It's not a competition here. We're all building together the fun web Three game. I'll skip the website on that, but I'll add a project type here. I'll add web game.
00:12:37.262 - 00:13:15.610, Speaker A: And then let's add some tags because on Vallus we have a lot of amazing tags. I would encourage all of you, please, if you're submitting on Vallus, add your tags, add all of the content. We have a beautiful app store, Discovery Marketplace. The more content that you add, the more that we can feature your content and get it in the marketplace and have it discoverable to the whole world. So I'm just going to say application game NFT here. Cool. Next we have our description field.
00:13:15.610 - 00:14:43.830, Speaker A: So I can just put a web3 game in my description header there. So the long description is a full markdown doc. So again images, videos, links really any content that you want to put in there, throw it in there, throw your full markdown in there if you have a repo members again, now there's the idea of because we have this role based access control with Valis it's all completely on chain. You have your account level keys which are kind of like your admins of the overall all of the projects, that kind of thing, the account level users but then you have the ability to add slightly less privileged users and these are just basic publishers or maintainers on a given project. So I can take my key that has that admin level key but I can throw him on here as well. And so then graphics now I have all these amazing graphics that I can add. I'm just going to throw a couple of these in as well.
00:14:43.830 - 00:15:30.742, Speaker A: I'm just going to use some of my NFTs here. So you'll see I have this amazing promo image that shows up here with my description. And then there's also things like I could add a YouTube video, YouTube URL or any other screenshots like that. But I'm just going to add a couple more of my fun little NFTs here and they will show up in this image gallery. And so my NFTs are not 1080 by 920. We use the standard sizing that like Steam or any of these other marketplaces kind of use. Okay so we are good to go.
00:15:30.742 - 00:15:46.140, Speaker A: I'm going to now create my first project on Vallus and we can check that transaction as well.
00:15:49.470 - 00:15:50.222, Speaker C: Good to go.
00:15:50.276 - 00:16:57.970, Speaker A: And then once this is done we should be redirected back to the home page and then from here we can publish our first release. So I'm going to switch to now you can see my new account here shows up web game and now my first project under this account shows up called Game. Both of these have my crypto covenant images. You'll see I have my screenshots here and I have an example markdown description with any content that I might want to add there. So you'll see currently I don't have any versions on this. I'm just going to actually switch here and then so to show you an example publish of one that I do have a couple of versions on here. I have three versions.
00:16:57.970 - 00:17:53.620, Speaker A: I will go here and let's do version four. Now on Valis we typically recommend that users use semver like just basic semantic versioning but you can really use any versioning that you want or any type of tagging. So what I'm going to do here is I'm going to go in my sorry, I'm actually going to drag and drop here. So I have this example DAP here and I am just going to drag and drop that nice and easy right into the front end. And that's it. All you need is your tag and your files. Drag and drop them.
00:17:53.620 - 00:18:12.280, Speaker A: We'll sign one more signature here. Check on that transaction already in a block. Thank you. Polygon. Shout out to Polygon. Vallast main app is deployed on Polygon. Check us out on Mumbai as well.
00:18:12.280 - 00:19:18.840, Speaker A: And there we go, it and there is our 4.0 release. So if I click launch here, you'll see we get this amazing screen that says welcome to the Web three game. So now this is a great time to talk about pricing. So developers need to eat too. And so Vallus is free for all open source developers, but it's also free for if you would want to list your software that could be paid software on Vallast. You are able to, through the platform create a token gated on chain, kind of DRM through a project NFT that you create.
00:19:18.840 - 00:20:47.090, Speaker A: So each Valis project comes with a token ID that can be used to token gate a game. So I can take this project ID and embed it, or I already have now directly into the game that I just published on this test account here. And now I can even set things like a price, a limit and even a royalty percent for when somebody is buying or selling that game license for it. If I wanted to even resell it and create an aftermarket for an old game or something like this. And this gives you a lot of power because all of these exploitative app fees. The Apple App Store takes 30%, google takes like 20%, itch takes like 15, steam takes like 30, valid takes two and a half percent, and then even all of those protocol fees go directly to a community treasury that all gets funneled back into all your favorite open source projects that you know and love. So now I have this beautiful token gated game screen, but I can't play because I don't have the token.
00:20:47.090 - 00:21:11.610, Speaker A: But this is exactly how, within a few clicks, within a few steps, I could publish my web app game binary artifact tokengate it with Vallus and then monetize my software as a developer. But yeah, I'll hand it back to Alec to talk a little bit about our CLI and continuous integration.
00:21:14.350 - 00:21:44.454, Speaker C: Sweet. Awesome. Yeah. Thanks, Zach. Yeah, so let me jump right into it with this. One of the examples that we referred to earlier was the ability to publish Go binaries and other types of software in this project. So if you can imagine something like an Ethereum client or IPFS clients or anything like that, or really anything that's a binary software, we can publish with this.
00:21:44.454 - 00:22:31.058, Speaker C: So the way to do that is pretty simple. So we have this project here called it's just a CLI publish Go project. This GitHub repo is also available so that you could see all of the example projects that we have and that includes, oh, it looks like we got to enable some main branch protection on that. But anyway, so these are all the examples you could see for how to publish different types of projects. And then we have links to them as well. I think we just had a question for how you can view the project by Uri link and then that is actually part of this is yours as well. So you could view it from the app.
00:22:31.058 - 00:23:08.910, Speaker C: It'll also give you an IPFS Uri that you can use to directly pull that from there. And then we're also working on support to be able to plug that into your ENS name. You could also access it by version. So if it's Six, then we can actually go to six and then it will directly take you to that release as well. But how to actually get this published? We have this simple hello, world. Go file here. This is just a simple hello world and then a make file that has the build steps.
00:23:08.910 - 00:23:38.534, Speaker C: But basically all we need here, once we have these binaries available, we have this Hello World built already. Then I could just go ahead and CD into this folder. Let me make this a little bit bigger here. That's pretty big. Okay, so now all we need to do is valus publish Acme Co. That's the account go binary, that's the project. And then we just saw six was taken, so now we need to do seven.
00:23:38.534 - 00:24:25.746, Speaker C: And then I could just point it at this disk folder here. It'll ask me to select which account I want to sign the message with. As you can see, metatransactions are enabled, it's publishing the release, it's logging all the opengsn stuff there and you can see it's confirming the transaction right there. So as soon as that gets mined, we will see the link to the project. But sorry, my cat's meowing in the background. But anyway, we'll let that run while I jump to this make file to show the multiplatform build. So basically what this is, is the same hello world, Go file at the beginning, only we build it into four different binaries for different projects.
00:24:25.746 - 00:25:04.758, Speaker C: You could also use things like Go releaser, that's a very common thing there. And then you could just point the same binaries at the end. But we just did the regular go build strings and that's ready to go. So if you notice, the valus publish command is actually a lot shorter. It's because we have this valus YAML file where we can actually define more advanced functionality. So this project, we defined an account, the Acme Co, we also defined multiplatform. We define a version for the release and then we gave it a path to the binaries that are inside.
00:25:04.758 - 00:25:49.282, Speaker C: And then this install field actually allows us to tell Vallus what the name of these binaries are and how to actually save it on the system and then which platform it corresponds to. So basically, it's going to go inside the disk folder, upload all that stuff, and then map from there the paths for the Darwin build to here. And then when you're installing this on a Mac, it'll save it as hello go as well. So we could show what that looks like there, but it's essentially the same thing. You just configure that you hit Valus, publish, and you keep rocking and rolling. Oh, I got to actually bump the version. So let's do that, hit that and then it should be good to go.
00:25:49.282 - 00:26:41.762, Speaker C: So it'll start doing that. I'll show you what it looks like deployed with the multiplatform version. If you actually see that last version, this JSON has a little bit of that metadata in here that shows the install fields. The Darwin binary is this hello, Darwin. And then if you actually go and launch it, you can check it out from there, but the SDK, the CLI, everything will know which platform it's built towards and be able to decipher it from there. And then same thing applies to the searching and tagging everything like, yeah, and then we also have a GitHub action example as well that I could actually show real quick. But the way it looks, actually, we could show off the react app or the next app here.
00:26:41.762 - 00:27:13.438, Speaker C: So this example, NextJS app, we have the example here for what the GitHub action actually looks like. It's super simple, config every time you do a release, it'll publish the stuff and then you can see the example there. And then you can also go ahead and click to view that project on Vallast. And you could go ahead and launch it and see how it works there. But yeah, that's it for us. We'll be in the discord as well. And definitely let us know if you need anything.
00:27:13.438 - 00:27:32.840, Speaker C: And yeah, best of luck. We're super excited to be here and actually we came out of a hack effect hackathon ourselves. So it's a really awesome full circle for us. So keep hacking away. Really excited to see what you all build and let us know if you need any help. Thanks, everyone. Thanks.
00:27:34.810 - 00:27:41.250, Speaker B: Thanks, Zachary and Alec and everyone likewise with the questions. Feel free to follow up over discourse.
