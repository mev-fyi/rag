00:00:07.210 - 00:01:29.560, Speaker A: Hello everyone, I'm Vivian from privacy and skilling exploration team and today I'm going to talk about how to hack on the ZK project. Yeah and this is the slides there's link and then the first link is the slides so you can see the examples and links inside. Yeah so the PSE provides price. So I'm going to introduce a little bit. So we provide five K and we will choose four projects. And these four projects can choose either three of these projects and first one is Semaphore and then second one is UniRep and the last one is E, two Ezk EC, DSA. And I will going to introduce these three projects later.
00:01:29.560 - 00:02:09.350, Speaker A: So you can choose one of them to hack. Yeah and I will introduce a little bit about ZK really short. So here's an example. So how we verify a transaction is correct, how we verify that this equation is correct, then we provide plain text x so the miner and others can verify oh, you know the x of this equation.
00:02:09.930 - 00:02:10.680, Speaker B: Yeah.
00:02:12.650 - 00:02:32.890, Speaker A: So what ZK does is that we provide approve and then you don't know what is the equation and then anchen it just verify approved and then tells you if it's correct or not. So it is decay due on chain.
00:02:33.570 - 00:02:34.320, Speaker B: Yeah.
00:02:37.010 - 00:04:15.210, Speaker A: If you want to know more about zero knowledge you can go to the Ethereum website and there is a zero knowledge proof page and then zero x. Park is also provides some materials for you to learn about ZK. Yeah so I'm going to introduce the first project called Semaphore. And Semaphore is like an identity system and then you can generate identity and then you can generate a membership proof of a group and then also you can include a signal in the proof such as to vote or endorsement some information in this proof and there is a Semaphore website and then you can getting started easier in this website. Yeah so what Semfor can do is something like you can prove that you are a member of one of a group and then you don't reveal who you are. And like I said you can endorse and signal. So you can include a signal in this proof to prove that I want to say something like voting always toll bowling.
00:04:15.210 - 00:05:02.810, Speaker A: Yeah so I will provide some example codes here like how you generate and random identity. So you install the Semaphore identity package and then you use a new identity function to create identity. And there are several secrets or public signals in this identity, they are called trapdoor nullifier and commitment. And you can go to the documentation to see the definition of this different terms. Yeah, so this is basically how you create identity.
00:05:03.970 - 00:05:04.526, Speaker B: Yeah.
00:05:04.628 - 00:05:42.264, Speaker A: And then you can add your identity to a group. And then you install a package called Semaphore Protocol Group. And then you can create a group with index one. And then you add a member in this group. With the add member function. Yeah, and then how? You generate a ZK proof and you install the package called Semaphore protocol proof. And then there is a generate proof function inside.
00:05:42.264 - 00:06:21.284, Speaker A: And then you can generate external null fire. And signal in your proof an external nullifier is used to prevent your action being doing twice. For example, if you want to vote an event and then the external rule fire is the name of the event like the topic. And then your signal is your vote. Like you vote one or two or three or something like that. So the signal can happen many times, but the external nullifier, it can only happens once.
00:06:21.482 - 00:06:21.940, Speaker B: Yeah.
00:06:22.010 - 00:06:56.572, Speaker A: So you include this information in your proof and then code it with the generate proof function. Yeah, and there's a verify proof function as well. So you provide the proof and then the group dips and then the group dips is the mercotree dips and then I think it's provided in the group object. So you can just use the group.
00:06:56.626 - 00:06:58.880, Speaker B: Dips depths.
00:07:00.980 - 00:07:56.020, Speaker A: And also Semaphon provides CLI to install the package easier. So you install the CLI and then you can use Semaphore Create and your project directory to create your project. And if you want to explore this command, you use the Semaphore help to help you understand these comments. Yeah, if you want to learn more about Semaphore, you. Can use the demo app or go to their discord to ask them questions. And then we are also in the first floor so you can fight us and then ask us about if you have question. Yeah, and there are documentation.
00:08:01.100 - 00:08:01.800, Speaker B: Yeah.
00:08:01.950 - 00:08:34.080, Speaker A: So the second project is called Unirap. So UniRep is a private and non reputable data system, and it is also provides anonymous to users. But in the same time, the user can prove how much data they have. And then you can go to this UniRep. IO to see the document.
00:08:37.100 - 00:08:37.604, Speaker B: Yep.
00:08:37.652 - 00:09:50.028, Speaker A: So what it's used for? You can use it for the reputation or data application. For example, you have GitHub and then you want to prove that you have how many stars in GitHub and how many followers in GitHub. You can use this protocol. So you turn the web two data to web three and then you can generate zero knowledge proof to prove oh, I have such amount of stars in GitHub. Yeah, and also you can prove the membership of oh, I'm a user of GitHub. Something like that, yeah, and there are some example application by our collaborators so the first one is trust list, so you can sell product and then you choose which buyers you want to transaction with. Yeah, and the users are anonymous.
00:09:50.028 - 00:11:06.200, Speaker A: And then the second one is what I said, you can bridge your web two reputation to web three. Yeah, and then the third example is social media, so we can build an anonymous social media and then other people can upvote or downboard a post and then if you are not able to generate a positive proof in the future, you are not able to post in this anonymous social media. So it can help to manage an anonymous social media in web three. And then the last example is Voltasong. So it is like a voting system but it's different from Semaphore is that in the end of the hack zone people finish voting and then you can prove that how much votes I have. Yeah, it is a little bit different from Semaphore.
00:11:07.740 - 00:11:08.296, Speaker B: Yeah.
00:11:08.398 - 00:12:46.570, Speaker A: So to install this package you use the NPN install unirap core and they are the file of the following example codes because they are pretty much sorry. Yeah, so the example here is that if we want to deploy a unirap contract we use the deploy unirap from the contract package and then you just connect your wallet and then call the deploy unirap smart contract. Yeah, and if you want to connect to a deployed unirap contract you provide an address and then the provider or your wallet and then you can connect to a deployed smart contract. Yeah, and then the protocol is like this floor. So the users are just providing proof to the Attesters. And then the Attester or Relayer will submit the proofs to smart contract to verify these proofs. And then the users can see the data on the smart contract and then know which is my data.
00:12:46.570 - 00:12:50.780, Speaker A: And then you can generate a valid proof to prove them.
00:12:52.510 - 00:12:53.260, Speaker B: Yeah.
00:12:56.770 - 00:13:51.550, Speaker A: So the Attester here is like an application and then you set up rules for the data, how user can get data. Like, for example, the GitHub. GitHub is an Attestor and then the developers are users in this application and then the GitHub will manage how user get received stars or followers and something like that. So the Attester is pretty much like an application and set up rules for users. You can sign up an Attester with a wallet. Here's a wallet example. So you call the smart contract and then call the function attester sign up and provide an epoch lens.
00:13:51.550 - 00:16:03.350, Speaker A: Yeah, and you can go to the document to see the definition of like epoch or epoch. Yeah, and then there's another way to sign up and a tester is use a smart contract. You can call the UniRep on chain with the smart contract. Yeah, so if I am a user of this application you can generate so how to sign up a user so user can generate a Semaphore identity here and then create synchronize all the ontrad state with the user state class. So you provide a prover, it is used in a circuit, this help you to provide a zero knowledge proof and then you provide unirap address contract address and then you provide a provider and then your Semaphore identity and then you use the start and wait for sync to start syncing. The whole event happens in UniRep contract and then you can generate sign up proof with a gen user sign up proof function and if you want to return then you just call the user state stop or it will keep synchronizing all the states. Yeah and when user generates this proof in client, the user should submit this proof to the Attester or application itself and then to call the Attestor only the Attestor can call the unirap contract to send the proofs on chain and then update the unirap smart contract date.
00:16:03.350 - 00:16:59.166, Speaker A: Yeah and how users receive Attestations or data or reputation the user should generate a temporary identity called EPA key. So you can imagine that you have a list of wallet accounts and people cannot link all these accounts to you but in UniRep you can generate a set of Apaches and then you can prove that all these assets is yours. Yeah so epoch key is one of this address but it only lasts for an epoch can be like one day or seven days or one week or something like that.
00:16:59.348 - 00:17:00.080, Speaker B: Yeah.
00:17:01.490 - 00:17:17.560, Speaker A: So if the epoch is too short, you're not able to use this epoch key for a long time but if epoch is too long, you should use the same identity for a long time.
00:17:18.810 - 00:17:19.560, Speaker B: Yeah.
00:17:20.170 - 00:18:52.740, Speaker A: So this is how it generates a temporary identity called epoch key. Yeah and when the Attestor see this epoch key he can send data or Attestation to this epoch key. Yeah so in this example, the Attestor send the index zero data index zero to five yeah, because we provide for example six data lengths so you can change six of them. Yeah, but in this example is that if we define field index zero is the GitHub stars and it increased by five so you give the index zero to five. Yeah, it is how if you don't want to know more about data you can go to the documentation to see how data is defined. Yeah and when an EPA ends, the user should call a user state transition to receive all the data to the user itself. So after user state transition the user can prove how much data he has.
00:18:52.740 - 00:20:31.724, Speaker A: So here's an example to generate a user state transition proof and also the user should submit this proof and then it can be submitted by relayer. So yeah, I use the signer here but not relayer. Yeah and after user say transition, the user can generate a proof to prove how much data he has. For example, if the user have five and then he can prove that oh, I have at least three. So you don't have to review all your assets or amounts of data but you can generate a valid proof to prove oh, you are in a certain range of data. Yeah and then you can also build a tester with the CLI, it's more easier and this CLI will provide circuits and contracts and relayer and front end so you can start the app by Yarn build and with hardhat node and then deploy your smart contracts and then you can start the relayer and front end client. Yeah so the last project is called E two E ZK ECDSA so it's the private ECDSA signature verification.
00:20:31.724 - 00:21:57.250, Speaker A: So you prove the ownership of Ethereum address. Yeah, so the problem with the previous example is that you have to generate a new identity secret but it is really hard to manage many different secrets. So this example is that you can use your wallet to generate a proof so you don't have to manage a new secret yeah and then you can use the Zkedsa for a Verifier contract so your contract can still verify assets but with ZK proof and then you can use for an anonymous AirDrop or discord verification bot. Yeah, I'm really not familiar with this project so please go to the website to check how it can be used. So this also an example code here.
00:22:01.560 - 00:22:02.310, Speaker B: Yeah.
00:22:05.900 - 00:22:53.680, Speaker A: And there is a demo app so you can prove your assets with your wallet in this link. Yeah so we have these three projects and five K bounties so if you are interested in one of these projects, please hack it. Yeah so if you have more further questions you can go to the PSE discord now there are many people there to answer questions for people yeah and thank you.
