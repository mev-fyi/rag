00:00:01.290 - 00:00:40.378, Speaker A: So, Dr. Vitalik, thank you for joining us. For those of you who don't get the joke, he just got his honorary degree last week and now he's a doctor. We're super excited to welcome all of you here. Thank you so much for being in this room. It's amazing to see a massive crowd of developers excited to be hacking on a weekend and especially here on a Friday night. I think we kind of already went over the numbers, but there's people from about 30 countries that are represented here and they kind of flew in for this weekend and we're super excited to host all of you.
00:00:40.378 - 00:01:09.220, Speaker A: So I kind of wanted to focus a lot of this chat on just kind of having a conversation around anything from how the Ethereum Project has evolved to where we are now, which is at this hackathon and how we can make this a conversation around what is exciting to build. So I'll kind of start off by just asking, you are the chief scientist of the Ethereum Project right now. What does your day usually look like and sort of what are the things you focus on?
00:01:10.070 - 00:02:11.430, Speaker B: Let's see. So this morning I participated in a couple of GitHub discussions on the Ethereum Serenity Spec, which is what we're doing, the spec that's describing currently the intended proof of stake protocol and then also parts of the Sharding spec. Yesterday I worked on that blog post where I described in my own words what I think CBC Casper is and how it works. I also wrote a post describing a layer to scalability thing that makes crush our transactions go faster in days before. And it's sometimes researching a lot of just keeping up with what other people are thinking and reading a lot of just talking to different community members instead of helping different projects and efforts like plasma and so forth out. So it's like some of everything that's awesome.
00:02:11.500 - 00:02:26.170, Speaker A: So kind of from your experience or the way you work, what is the lifecycle of the work you do from the research side making it to the application side? And at what point do you kind of consider that as a handoff versus things you're involved with to the full on development?
00:02:28.030 - 00:03:27.466, Speaker B: It does kind of hand off at different stages. So there are times when I would come up with an idea and first of all, sometimes there's either a buck in the idea or there's a better idea. So it kind of stops and gets scrapped there. Then after that, the next step is if people like it, then either someone kind of likes it enough that they just take the idea and start off and go on a path developing it themselves. So with, for example, minimum viable plasma and plasma cache and plasma prime, there's already teams of developers that want to do plasma. So as soon as they see a better way to do plasma, they just go ahead and do it for layer one. Stuff I do needs to be kind of more actively involved going later into the pipeline because layer one is really important and it's not just a matter of kind of the basic ideas.
00:03:27.466 - 00:04:12.540, Speaker B: We also want to make sure the spec is kind of maximally clean and simple, make sure the spec does everything that we want. And generally there's a lot of loose ends that it's importance to try to tie up as well as possible. And for 1.0 we have this sort of parallel track approach where a lot of teams have already started developing clients and they're kind of keeping up with the changes to the spec at this point, though at some point fairly soon. Well, development on the spec itself will kind of slow down a lot and it'll mostly be development another kind of later stage. Part of the pipeline that's also important to remember is just people often have questions and it's good to answer people's questions.
00:04:13.230 - 00:04:35.166, Speaker A: No, this is wonderful and it kind of set up the stage for all the ten things I had on my list to ask. But before I get to those, what I want to talk to you or ask you is Defcon Four just happened about a month ago. It's the Ethereum Developer Annual Conference. What were some of your takeaways from being at the event and kind of seeing about 3000 people attend and talk about and be excited about Ethereum?
00:04:35.358 - 00:04:55.420, Speaker B: So one Of The things that we were definitely kind of trying to do as a Deliberate strategy and I'm Very Happy that at Least I Think it's been Going Very Successful so far, is to try to kind of make bridges between the Ethereum community and Other communities, both inside Crypto and outside that we feel share similar.
00:04:58.030 - 00:04:59.130, Speaker A: Zcash being one.
00:04:59.200 - 00:05:39.378, Speaker B: Yeah, with Zcash. We came to their conference in Montreal a few months ago. Now they came to our conference, they presented a Defcon last year about a bunch of zero knowledge stuff. They presented about a defcon this year about even more zero knowledge stuff. Zuko gave a really nice talk about, you know, there's also all of the other crypto communities that show up. And I saw the bitcoin Cash people and they expressed how much they like the Ethereum community and how they appreciate its general friendliness outside the crypto space. Glenn Weil from Radical Markets.
00:05:39.378 - 00:06:49.950, Speaker B: Stuart Brandt from the Long Now Foundation. Corey Doctoral. And then there's a kind of list that goes on and on. And so I think it's definitely good to see all of that attention from the outside both because people outside the crypto space kind of caring about what we're doing is a useful form of validation. It makes sure that we are building something that at least these other people also consider to be actually useful. And having a kind of two way communication between them also ensures that they know what's going on on our side and we can tell them about what the technology is and give them some of the ideas so they can figure out what to do with it. And we learn from them what kinds of problems they're working on, what kind of challenges could actually be affected by the resolved by the technology, which is also really nice because it helps us to kind of continue to steer where the emphasis is.
00:06:49.950 - 00:07:01.730, Speaker B: So I think those kind of relationships are very valuable and it's something that I feel like we've been definitely doing fairly well so far and we should strive to do even better going forward.
00:07:01.880 - 00:07:18.290, Speaker A: Absolutely agree. And that's wonderfully put. And it's the same reason events like these also end up becoming those test grounds where people can experiment and prototype things over the weekend and that sets up a lot of the experimentation to evolve into products or problems that people need solutions for. Solutions.
00:07:18.450 - 00:07:59.266, Speaker B: Yeah, look, one thing I've been starting to kind of force myself to care more about lately is to try to push beyond kind of sticking things on a blockchain for the sake of sticking things on a blockchain because I feel like that's what a lot of the earlier crypto projects were. But at this point it's fairly clear that if we want crypto to get more adoption at this point that it has to get adoption by providing real value to people and so on and so forth. And for that to happen, we have to kind of be more explicit and clear and understand better what is the specific value that the technology provides.
00:07:59.458 - 00:08:10.950, Speaker A: Do you think in this case, the only possible path here is we know that we have these certain primitives that exist in this decentralized or this crypto world just even for ethereum, and we have to figure out what the best solution could be?
00:08:11.020 - 00:08:28.190, Speaker B: Or is it still necessarily us figuring out? It could be the people that already are in, the communities that care about whatever the specific problems are that figure it out. But if we educate them and then let them educate us, then the opportunity that will actually figure it out increases.
00:08:28.690 - 00:08:32.574, Speaker A: Got it? I think we're having some mic troubles with WA.
00:08:32.692 - 00:08:33.680, Speaker B: There we go.
00:08:34.950 - 00:09:07.020, Speaker A: Solved. So earlier today you were on a panel about scalability and just sort of the attempts in layer one and layer two. What I want to kind of talk at a high level is yes, we know that things need to be faster for us to kind of look into comparable applications that we are used to now. And also there's a lot of efforts being worked on, but oftentimes we miss to highlight what the trade offs are or the complexities that get introduced as a result of working on these things. What are some of your thoughts on kind of what these trade offs or complexities end up being that we don't often talk about?
00:09:08.030 - 00:10:12.702, Speaker B: Yeah, I think first of all it's important to remember that the technology as of today is still fairly immature and there's a lot of little kinks that don't theoretically need to exist but as a matter of fact today do exist. So things like nodes not perfectly syncing and sometimes falling off the network for a couple of minutes or light nodes not fully connecting very easily. Things like transactions seeking like three minutes to get included in the chain because of bad gas price estimation. A huge portion of the network being on infuria instead of some more decentralized solution. And there is this kind of longer and longer list and especially as someone who works spends more time on theoretical side. On the theoretical side, there's no real reason why these hurdles need to exist. And theoretically, if you just sort of throw more resources at the problem, it seems like that we can make a lot of those issues go away.
00:10:12.702 - 00:10:23.086, Speaker B: But the fact is, we haven't yet thrown the resources at the problem. Or we've only started in the end. In any case, the issues haven't yet gone away and that's something that's important to recognize.
00:10:23.278 - 00:10:48.090, Speaker A: Absolutely. It's not even abundant good or bad. But how do you think about parallel implementations of the problems that we know we need to fix and then kind of hopping back and forth, or just kind of how does that change the developer experience? When you have so many options that are all in work in progress stage and then now developers have to choose or pick and think about how to evolve as the protocol is also evolving.
00:10:49.070 - 00:11:59.746, Speaker B: Yeah, it's definitely a challenge at this .1 of the issues with building applications that depend on especially more either layer twos or frameworks or kind of anything other than the base chain is that those are kind of extra dependencies that you have to worry about. Those often have their own user experience issues and then any one of them could just end up becoming a not maintained project later. So it definitely does kind of add to compounding the problem. But on the other hand when someone builds something that's genuinely reliable and useful and valuable then that's something that can really reduce complexity. One thing that's kind of annoying in the short term is that a lot of application teams are starting to move from pure layer one to some layer two for scalability. And on the one hand, the scalability gains are real but on the other hand, Ethereum is really nice because programming applications on it is, relatively speaking, quite simple.
00:11:59.746 - 00:13:11.530, Speaker B: You write the piece of code, dump the piece of code on chain and the piece of code does what it's supposed to do. Whereas if you're building a state channel application at least at this point you have to personally worry about oh, when the channels get opened, when the channels get closed. How do we actually write the code to implement this weird logic? How do we do meta channels, how do we do atomic swaps between them? If we make a plasma thing then what does the exit game look like? And blah, blah, blah, blah blah. And in the long term you're not going to get applications if in order to get a useful application you have to both be an expert at whatever your application actually is and be an expert at making weird crypto economic layer two things. And so there's definitely a goal of trying to create kind of fairly generalizable layer two kind of plug and play frameworks that people could just run and use and then adapt to their application fairly quickly. And I know there's been a lot of good work on trying to make that happen for state channel projects. I know there's been increasing and kind of faster work on plasma test networks.
00:13:11.870 - 00:13:26.542, Speaker A: Absolutely. I guess there's a side of DApps that talk about usability from the end consumer standpoint but this is a UX improvement on the developer side and just kind of abstracting that to make it easy for developers to go in there is equally important.
00:13:26.596 - 00:13:41.140, Speaker B: Yeah, I think developer experience and user experience are both important and the two issues are not always fully separate because part of developer experience is a developer's experience in creating an acceptable user experience.
00:13:41.670 - 00:14:15.230, Speaker A: Yeah, it's very recursive. So kind of coming back to this hackathon and just sort of themes in terms of things we can focus on near term when we're talking about this chat before we kind of made a list of possible things we could possibly focus on and kind of brainstorm ideas about. So I generally just took down a lot of notes and essentially what I want to do is kind of get your thoughts on anywhere from if you were to do something in this category, what is something that makes sense and what are some of your wish list items. So some practical themes are basically applications of crypto economics.
00:14:15.810 - 00:15:17.774, Speaker B: Sure. So one kind of category of thing I care about that I have kind of talked and posted about a couple of times, but I think hasn't been discussed enough is the use of crypto economics for anti spam and things like chat and social applications. Basically one very simple kind of archetype of this that I came up with recently is what I call a proof of state conditional HashCash. So the original version of HashCash right, basically said that it's like an antispam measure where in order to send an email that someone will see your computer has to do a bunch of work and then the proof of work gets attached with an email. And if the proof of work, say costs you make, then that's kind of a cost of sending an email. The way proof of stake conditional hash cash works is that instead of burning the $0.05 through proof of work you would along with your message, publish a kind of pointer to an on chain deposit, which could be bigger, say it could be fifty cents.
00:15:17.774 - 00:16:39.526, Speaker B: And then only if the recipient considers that message to be spammed, they can press a button to basically burn the money. And so that way for spammers it's as expensive or even more expensive than proof of work hash cash, but for regular users it's free. And then you can expand this to things that are kind of more than two parties. So you can think of, for example, social media platforms where people can create an account with a deposit and then someone has the ability to basically, if your account gets banned, then the deposit ends up getting burned and things like that. And the reason why I care about things like that is I think, as we have figured out over the last decade or so, problems around spam, trolling, that whole category of things, blah blah blah, on internet applications are very real. And it seems like a lot of the kind of mainstream world is moving toward just requiring identity as a way of solving these problems, which solves the problems, but on the other hand has some very kind of dark consequences in other ways. And crypto economics is basically an alternative that kind of solves the antispam problem and makes spam expensive, but at the same time is first of all, much more protective of privacy.
00:16:39.526 - 00:17:17.240, Speaker B: Second of all, any identity system is going to have a very hard time being usable by everyone in the world and so it becomes much more accessible. Third, it just becomes more friendly to people who really care about protecting their privacy and it's also just another way of making accounts easier to get. I mean, also just relying on things like phone numbers for everything is just a huge security hole and there's a bunch of reasons. So something in that general space I think would be interesting to see explored more.
00:17:17.610 - 00:17:39.626, Speaker A: I hope everybody's taking notes because these are excellent hackathon ideas. You kind of mentioned identity here. I'll try to merge that with the two categories. Just identity as a problem in this space, as well as sort of zero knowledge proofs and ZK, Starks and Starks that are coming about how do we kind of can be practically users of those technologies or primitives.
00:17:39.738 - 00:18:50.434, Speaker B: Yeah. I would also just kind of expand from identity to reputation more generally, because it's important to think of identity not just as a thing that gets assigned by a central authority, but more generally just the idea that people you interact with can be more inclined to trust you if you know that you have some history of interactions with other people that seem to have gone well. Right, and that's something that's useful as a primitive in a bunch of ways. So one simple example of this is you can make things like Lightning Networks work more effectively, just without kind of fairly complex multichannel locking structures by basically saying we'll use more trust A sense to b B sense to CC sense to DD, sense to E. But then for each link, you would only send smaller amounts at a time, and you would go up to bigger amounts when you know that whoever the person is that you're interacting with has some higher reputation. And you can kind of automate these protocols. You can automate them in ways that impose kind of mathematical bounds on how much money you lose.
00:18:50.434 - 00:19:40.280, Speaker B: You can use zero knowledge proofs to do a lot of these protocols in a way that preserves privacy better. So one of the problem, there's kind of two contradictory goals here, right? Where one is that you want to maintain some kind of reputation so that you can become more trusted as a result of long running behavior. And then having the ability to trust makes kind of future interactions more efficient. But then on the other hand, you don't want literally everyone to see that all of these activities can be traced to each other. So you can do weird fancy zero knowledge proof stuff to create reputation systems where you can come up with some kind of score that says this person is trustworthy and no one has said bad things about them before and people have said good things about them without actually kind of linking people's behavior to each other.
00:19:40.650 - 00:19:50.870, Speaker A: Sort of a side quick question. If somebody wants to work on a reputation project here, what are some resources they can look at that kind of help you understand how to bootstrap a network?
00:19:51.030 - 00:20:28.406, Speaker B: Sure. First of all, look up different kinds of trust metrics. I think advocado trust metric is like one keyword thing that you can look up. There's another category of thing is kind of proof of unique identity. So there's something called, I think, Pseudonym Party that's trying to do that. A third thing is also just understanding zero knowledge of proofs in ZK starks themselves because that's what you need for privacy preservation and for mean. There's a bunch of theoretical materials on what zkSNARKs are and I wrote some of them.
00:20:28.406 - 00:20:56.206, Speaker B: But then there's also the actual libraries, lipsnark and then Socrates and the different toolkits. You can also look at the source code of existing applications that use zkSNARK. So for example, you can look at some of Barry WhiteHat's stuff around roll ups and he has other applications. Generally, if you want to build something, starting from something that already exists and kind of editing lines of code is definitely a good way to do it a lot of the time.
00:20:56.308 - 00:21:13.666, Speaker A: That's awesome. So we kind of covered reputation, identity, and snarks in there. One other interesting category I think is just kind of the emergence of serverless applications and mixing that with blockchains. How do you kind of see that? How do you describe that? And what are some of the applications you see?
00:21:13.848 - 00:21:45.262, Speaker B: Yeah, so the most recent one I think in this category is uniswap, right? So, basically, decentralized exchanges have historically had terrible user experience, because if you want to convert from A to B, you have to convert your ETH to west and then do some other thing, then put up an order, and then the order book depends on logs. And so the order book takes two minutes to load, and then you click on some other order, and then, oh, by the way, you forgot to load a bunch of logs and you clicked on an order. That's a day and like 20% of price movement out of date.
00:21:45.316 - 00:21:46.542, Speaker A: Don't forget to unwrap these.
00:21:46.596 - 00:23:22.286, Speaker B: Yeah, right, then you got your other token, then your other token, you have to move it out of the exchange and then you withdraw it again and the whole thing is overcomplicated. And also these decentralized exchanges often depend on centralized servers to manage the order book, which is annoying because for various reasons those centralized servers can disappear, those centralized servers could get attacked, a bunch of things can happen and uniswap is this really nice and interesting design which basically is entirely on chain, does not have a kind of order book. Instead you basically are kind of buying and selling against the liquidity pool and it depends on just basically arbitrage to keep prices in line with the actual market price. And the user experience is basically you take coin A, you send it in and you just immediately, literally within the same transaction get coin B out and that's it. And it's literally more usable than even the centralized exchanges and it is decentralized and it does not depend on servers whatsoever. So basically I think we can expect to see kind of more applications that start following this kind of pattern because just the ability to kind of create an application and just fire and forget it and run it with kind of zero infrastructure. I think at least to me it was always a big part of the original Web Three vision and it's good to see it actually becoming more and.
00:23:22.308 - 00:23:31.710, Speaker A: More possible from a protocol standpoint to make a lot of those kind of standalone serverless applications happen. What should we prioritize?
00:23:32.770 - 00:24:28.180, Speaker B: I think scalability is important, but also in the shorter term it's important to remember that there are decentralized protocols other than ethereum blockchain itself that are necessary for this. So probably the top two are decentralized message passing and decentralized peer to data storage. So basically what Whisper and Swarm were kind of filling in the original vision and then more recently there's been other protocols and then there's people building on IPFS and so on and so forth. So trying to kind of build up those layers and make sure those layers are more robust. So that, for example, it's not just the smart contract code that can just live in the decentralized cloud, it's also the user interface for the application that you can just push into the decentralized cloud and also just fire and forget and be fairly confident that it'll be still floating around somewhere that users can access five years from now.
00:24:28.710 - 00:25:22.260, Speaker A: No, that's awesome. So this is a very interesting thing which is we kind of talked about some of the applications from a short term, which is kind of things we can prototype this weekend to upcoming months. And this is kind of like a wish list for you. And the Ethereum Foundation itself also has this grants program where people can apply to get a grant for the project that they're working on. And there's a lot of things that the foundation and just the ecosystem has a list for things that they need anywhere from documentation to implementations in other languages for clients or Lip PTP or layer two and stage implementations to plasma implementations. Usually the wish list comes from a handful of people on the foundation side. For the long term, what is your personal wish list of crazy or really ambitious things that you would like to see done on either Ethereum or just blockchains in general?
00:25:23.270 - 00:26:54.580, Speaker B: So I guess closer to the base layer, I mean, there's obviously the base layer itself and then there's whisper and swarm and kind of whisper and swarm like things being kind of developed up to their full potential. I want to be able to use the decentralized cloud to back up my hard drive and I want to be able to just fire it and know that if I just have the address and my password in five years, I'll be able to download it again. I say also the infrastructure needed for all of these zero knowledge proof based applications to be just very easy to build and deploy and that includes Snarks, darks programming languages, Oxocrates and all of these related things. On kind of moving a bit up the stack, a kind of richer and more diverse ecosystem of Oracles for providing data and both centralized Oracles and kind of auger style decentralized Oracles. And I'm definitely looking forward to seeing how that auger market on who won the election in November ends up resolving. I think that'll be a really interesting kind of test of a decentralized Oracle's ability to be sane. Going even further up, another one I care about is also wallet security.
00:26:54.580 - 00:27:41.760, Speaker B: I talk about this basically every time, but coming up with smart contracts or secret sharing or whatever, some mechanism, so that users can be sure that if their computer or phone or password or whatever gets lost or stolen, they don't lose all of their money along with their identity and their estate and every application they care about. So that's something where we know what a multi SIG wallet is and we know what secret sharing is. So from a cryptography point of view, it's not the hardest problem, but from a kind of user experience design problem and coming up with what specific instantiation of these components is maximally grandma friendly I think is definitely an important challenge for people to think about and try to come up with some more solutions for.
00:27:42.450 - 00:28:07.110, Speaker A: I hope you're still taking notes. So the next kind of few minutes I want to spend doing a segment that we did before even at ESF and which we kind of stole from Tal Cohen and the section is called the segment is called Underrated or overrated. I'm going to name one topic and you have to say is this underrated or overrated? And then a one line comment on why. So we'll start off with ZK snarks.
00:28:08.410 - 00:28:34.690, Speaker B: I would say still slightly underrated. To me, general purpose, zero knowledge proofs are like literally on par with blockchains in terms of kind of the power and transformativeness of the technology. The ability to just have privacy and correctness of execution at the same time is just something that cannot be understated.
00:28:35.110 - 00:28:37.810, Speaker A: That's fair. What about formal verification?
00:28:40.390 - 00:28:50.790, Speaker B: I would say at this point around probably about correctly rated in terms of people talking.
00:28:50.860 - 00:28:52.470, Speaker A: It's not binary vitalik.
00:28:53.050 - 00:29:22.240, Speaker B: Yeah, sorry. The one formal verification related thing that's still underrated is just making it easier for developers writing contracts to formally verify them. I want to be able to add claims on top of a solidity or Viper contract to just have them be checked automatically. And so far formal verification just seems to be this racket where a small number of people can earn $250,000 in the course of eight weeks and that's terrible and should change.
00:29:23.430 - 00:29:26.290, Speaker A: That was a good one. Stablecoins.
00:29:30.950 - 00:31:31.194, Speaker B: At this point I would say the Fiat backed backed asset variety of stablecoins, still slightly underrated and the MakerDAO style category probably, I don't know I want to do the cop out and say correctly rated at this point because I feel like it is like it's not a really good job of surviving a 93% whatever price crash in the underlying collateral. But on the other hand, people and the market seem to recognize it as such for kind of issuer backed stablecoins. The reason why I find them interesting is that I think there are a lot of even mainstream applications for programmable money that people can find very interesting and valuable. And there isn't really something that exists for just a thing where you can build your own Kickstarter like thing, and even things like building crypto, venmos and so forth. Another important application for this is the reason why I care about fiat backed stablecoins is that they can kind of disintermediate part of the centralized exchange cycle. So basically, if you look at historical centralized exchange hacks and thefts, bitfinex, Mount Cox, blah blah, blah, blah blah, the greatest majority of the problems was not on the fiat side, it was on the crypto. So the mutability of it is yeah, the vision that I want to see the community try kind of moving closer to is that centralized exchanges specialize in basically being.
00:31:31.194 - 00:31:42.080, Speaker B: The Fiat gateway and then converting fiat backed tokens to things like ETH is something that can be done in a either decentralized or at least kind of plasma style non custodial way.
00:31:43.570 - 00:31:47.790, Speaker A: So it's rated sufficient.
00:31:48.690 - 00:31:50.910, Speaker B: I think the summary was underrated.
00:31:51.970 - 00:32:01.394, Speaker A: And finally Singapore. There's only one correct answer here.
00:32:01.432 - 00:32:28.940, Speaker B: Yeah, I know. Yeah, it's obviously underrated, but Singapore is really hot. Yes, the temperature is like really nice and stable. Not many places in the world have a hundred year minimum temperature of 19.6 and 100 year maximum temperature of 36. Yeah.
00:32:30.990 - 00:32:48.660, Speaker A: That'S awesome. So what I want to do is end this conversation with a question and then we'll open up the audience questions. So kind of my final question to you is just generally why should people care about decentralization and why does that matter for you?
00:32:49.430 - 00:33:37.300, Speaker B: Yeah, I've definitely think started kind of being more explicit recently about viewing decentralization less as an end in itself, but more as a kind of means to achieving a particular goals. For example, the reason why I like things like decentralized exchanges is because number one, the whole thing about exchanges getting hacked and losing huge amounts of money is something that's sad and it would be nice to minimize. And number two, I actually do feel like centralized exchanges have this unhealthy level of influence over the industry because individual listings can basically increase or decrease the price of some coin by a factor of two.
00:33:38.070 - 00:33:38.866, Speaker A: Or more.
00:33:38.968 - 00:35:02.602, Speaker B: Yeah, or more. And that's just like power that's so obviously ripe for being abused and probably is totally being abused behind our backs and we'll never know. And basically this is like a great opportunity for the crypto space to kind of use its own technology and values to solve its own problems. If we look at things like these serverless applications, for example, I think the value that they provide is that if you build an application on top of many components, then each component you add is a dependency. And each dependency you add is a thing that could break and is like something where if it's managed by someone, it's someone else that could break you. And so if we want to kind of actually be able to build things where people build components and then these components rely on each other and create this ecosystem cooperatively, then building more and more base components that operate in the structure where once they're built, they're basically, literally as close as possible, just guaranteed to last forever, regardless of what happens to the team. I think is really nice and being kind of more broad and philosophical, I think decentralized blockchain applications are in some ways a kind of spiritual successor to the concept of open source.
00:35:02.602 - 00:36:10.450, Speaker B: Because the nice thing about open source software, right, is that once again, you can build and use applications where they don't depend on a single party that could disappear, where you know what's actually going on, where you have stronger assurance that it's not spying on you, it's not screwing you over in some way. And 20 years ago, it was actually a kind of much smaller fight because even stuff like Microsoft Word, the worst thing they could do is they can lock you in with proprietary file formats and possibly stick watermarks into your documents or whatever. But now we're not talking about proprietary software on your computer versus open source software on your computer. We're talking about proprietary software where even your data is being stored in servers inside of Google and we have no idea what they're doing to any of your stuff. And so trying to come up with a kind of credible technological alternative to that paradigm I think is something that a lot of people want and it's something that could be potentially very socially valuable.
00:36:11.270 - 00:36:21.350, Speaker A: That was my last question, but I will ask another question as a follow up to what you said is do you think we often kind of conflate decentralization with transparency?
00:36:23.210 - 00:37:30.406, Speaker B: Transparency is one of those complicated values, right? Because there's clearly things that we want to be transparent and there's clearly things that we're building stuff to try to make more private. And I think the place where transparency has a role is basically so that people know what kind of a deal they're getting, right? And so if you want to interact with some application or you want to just know that you want to know what terms you're getting, you don't want to kind of sign a blank check to people you don't know. And that's something that I think blockchains are definitely good at providing. They're good at providing kind of transparency and kind of guarantees of what the process is that you're going to be participating in. And that's something that's valuable. You can also talk about kind of transparency of organizations. And transparency of organizations can be valuable basically just as a way of convincing people that there is nothing nefarious going on, which is something that definitely is valuable.
00:37:30.406 - 00:38:41.166, Speaker B: But on the other hand, there are a lot of good reasons to have privacy too. And we can talk about personal privacy. And my usual kind of one sentence utilitarian argument for why personal privacy is really valuable is that basically people should be free to do things to optimize for their own happiness. It should not be that every single thing that you do should carry some component of either doing it or deciding not to do it for social approval. Because if things go kind of go far in that direction, then you just get an equilibrium where people do things that they really don't want to do to do what they think makes each other happy, but actually the whole thing just makes everyone less happy. But then even aside from those kinds of more social and of privacy for the individual things, privacy is just a fundamentally necessary component of making many classes of mechanisms work. So even if you look at voting, for example, if voting is transparent, then that makes it insanely easy to pay people to vote in one particular direction.
00:38:41.166 - 00:39:35.974, Speaker B: It makes it insanely easy to penalize people who vote for something you don't like. And then if that happens, then the kind of mathematical description of the game changes because instead of it being a game where people make decisions independently, it becomes a cooperative game. And cooperative games are notoriously harder to make, kind of actually be stable. And so when we are in designing mechanisms, whether for governance or for whatever else, basically having the option of kind of more privacy helps reduce those kinds of issues. So I guess privacy and transparency as well as decentralization, I think are something that you can get more mileage out of them if you start kind of decomposing them more into, well, why do we actually want this thing?
00:39:36.172 - 00:39:54.906, Speaker A: That was awesome. Well, Felic, thank you so much for being here. And we'll open up the room for questions. If you have a question, you can just come on up or shout. I'll try to repeat the question itself. We'll do a handful of them. Oh, we actually have an extra mic.
00:39:54.906 - 00:40:12.080, Speaker A: So just raise your hands and we'll have somebody come to you. Hi Vitalik. So one year ago you proposed an idea of daiko. So why was the community relatively abundant by this.
00:40:13.830 - 00:41:24.978, Speaker B: Mean? So just to kind of describe what a DAICO is, this was my attempt at kind of mitigating the problem in an ICO where the founders of the ICO have no incentive to not enough of an incentive to work hard or even to just not disappear with the money. And so the way that this works is that when you do an ICO, instead of the money immediately going to the developers, the money goes to a smart contract. And in the smart contract, the participants in the ICO can vote on basically how big the tap is. So how big the amount of money per day, per block, per month, whatever is that goes to the founding team. And they can either vote to increase it or they can also vote to just shut off the whole thing and immediately refund the money proportionately. And the nice thing about this mechanism is that for a DAICO to kind of break, you actually need both the voting mechanism and the founders to be dishonest, right? Because if the founders are dishonest, then the daiko mechanism can just or the voting mechanism can just say, oh, it looks like they're dishonest. And so we're just going to refund ourselves the funds and we'll participate in some different DAICO.
00:41:24.978 - 00:42:17.240, Speaker B: But on the other hand if the voting mechanism gets corrupted then if the founding team itself happens to be honest then well the only thing the voting mechanism can do is it can either not increase the tap in which case money will still keep on flowing to the team or it can cause everyone to refund the money. But then if refunding the money was the bad thing to do then everyone who still wants to participate would still just be able to join a new ICO created by the founding team. Honestly, I think one of the main challenges is just people are afraid of staking $50 million into an unaudited smart contract. And so far, no one has had enough private incentive to just develop the contracts and have it audited. And so if people at this hackathon want to take the first step and just develop a simple DAICO application, I think that's a totally legitimate thing to do as well.
00:42:19.310 - 00:42:46.050, Speaker A: More questions. How do you feel like the DAICO squares with security laws? Because from my understanding, security laws are kind of like, don't make promises to develop an application and steadily get money from it. They just want you to develop it and not advertise it as an investment.
00:42:47.110 - 00:43:48.950, Speaker B: I think my instinct is that from a kind of very narrow legal standpoint whether or not something is a DAICO should not increase the chance that it's a security. But basically because the tests that we've seen so far used in practice about whether or not something's a security have more to do with basically whether or not the actual application looks like an investment. And also, to some extent, another contributing factor is, like, when you get money from the public, are you getting the money based on promises or you already have something that's basically usable, already built. So if, for example, you have something that's already built and you're just collecting money into a pool that maintains it, then that seems like it's lower risk than for creating a totally new project. But this seems kind of very jurisdiction specific. And talk to lawyers, blah, blah, blah, blah.
00:43:51.210 - 00:43:59.580, Speaker A: We'll do two more questions. So if you have any more questions, please raise your hand and we'll come to you with a mic. One at the back.
00:44:05.630 - 00:44:15.950, Speaker B: Hi. Who would you say is more handsome, virgil Griffith or Vlad Zampier? Can I answer? Carl.
00:44:17.890 - 00:44:20.110, Speaker A: What about underrated or overrated?
00:44:27.060 - 00:44:36.240, Speaker B: I don't know. I just realized I haven't said overrated even once in these sections before, so I don't know. Keep throwing me stuff, and I'll say overrated the first time I think of something that's overrated.
00:44:36.400 - 00:44:37.220, Speaker A: Vlad?
00:44:42.220 - 00:44:54.388, Speaker B: I don't know. I've actually been warming up on at least some parts of CBC lately, though I do think the Sharding stuff is overrated. Shasper the name look really overrated.
00:44:54.564 - 00:44:56.584, Speaker A: Perfect. We met.
00:44:56.622 - 00:44:59.400, Speaker B: The official clip of Larding is underrated.
00:45:02.340 - 00:45:09.390, Speaker A: Perfect. Well, I think we'll end it here. Talik, thank you so much again, and we'll get on with the rest of the opening ceremonies. Thanks, everybody.
