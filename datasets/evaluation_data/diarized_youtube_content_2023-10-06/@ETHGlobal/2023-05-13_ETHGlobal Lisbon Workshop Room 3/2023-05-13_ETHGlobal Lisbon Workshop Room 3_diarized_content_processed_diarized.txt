00:00:33.030 - 00:05:30.880, Speaker A: It sam it. Don't dam it.
00:06:23.170 - 00:06:53.078, Speaker B: Thanks for coming. I know it's the first talk and it's three floors up so it's a lot of work to get here. So hopefully you will get something useful out of this. I'm Ilya. I'm co founder of Neo Protocol and CEO of Pagoda. And today I want to talk about how to build decentralized composable front ends and kind of really accelerate how fast you build and how fast you can actually ship things to your users. So just a little bit about near.
00:06:53.078 - 00:08:24.190, Speaker B: We started in 18 as a blockchain a layer one we launched in 2020 and since then we've really been trying to empower developers, kind of me and kind of all of our group really believes that developers, entrepreneurs, makers are ones who actually bring Web Three to the users. And so we want to give the best tools to everyone who is building. And so throughout 2022 we've been building a lot of developer platform kind of data stack and a lot of other things. And this year we've kind of positioned this set of tools that we're building as blockchain operating system, right? And this is all in the goal of achieving billion users in Web Three broadly. So what is blockchain operating system? It's really a common layer to discover and experience kind of applications in open web and main and important thing, especially for this, is compatible with any blockchain. So what problems is it solving? First of all, we all know like I mean here we are in Web Three because we want to solve a lot of Web Two problems, right? The censorship of Web Two, the problems with user retention and discovery, the problems with launching on App Store, lack of data ownership, lack of privacy. At the same time, web Three itself comes with a lot of challenges, right? We have a very fragmented ecosystem, right? Each blockchain has its own kind of set of applications and have very little in interconnectivity.
00:08:24.190 - 00:09:37.562, Speaker B: Discoverability of new applications is extremely hard, right? Finding what actually apps are launched and live real, not trying to rug pool, it's pretty hard reengagement, right? Somebody came in, started using your app, you have no idea how to reach them again. You have no idea how to kind of bring them back when a new feature launched or the bug that they stumbled upon got fixed. And there's a set of common problems, right? Just like as the systems grow, the complexity of building and operating them is growing as well. So blockchain every system is really trying to address all of this in a cohesive way and give you tooling to do this and do it all in decentralized and user owned way. So kind of the way it does it by having a set of layers, blockchain layers, a middleware, user interfaces and kind of onboarding wallets layer. So diving in a little bit deeper, what this means is you have kind of blockchains on the bottom, right? So this is where your identity, your kind of money and ownership, the trust of the whole system we're building in Web Three is laying. But blockchain is not everything, right? You cannot fit everything into that.
00:09:37.562 - 00:10:59.042, Speaker B: And there's a whole layer of indexers, streamers, notifications, search, relayers that needs to exist to really provide the experience that we're all used to from Web Two. So this is what we call data platform. This is where kind of all of the abstraction of the different blockchains happens and at the same time kind of all the common services for really powering kind of normal user experience, right? You should be able to type in that you want to play a game and find what are the games in web Three exist, right? So this is where kind of this layer lives now, the new layer we introduced, we call it discovery. And this is actually a different way of building applications, front ends in itself. And so the way it works is you actually take the front end kind of componentize. It right similar how you do it in react or in view and you put each component independently on the blockchain. So in a way, what we did with front end here is what Smart Contracts did with services, with web services, right? We put them on a blockchain, we made them uncensorable, unstoppable, always accessible and very composable, right? Because now each atomic piece, a swap, an NFT, a feed of social posts can exist on its own and can be embedded anywhere.
00:10:59.042 - 00:11:47.162, Speaker B: And I'll show how all of this works. But this is just a protocol, right? All of these are protocols that really define how data flows and how it shows. And you need a place where all of this is being combined. And so what we call those things gateways. So gateway is something where pretty much you go there, it's either an app, a website, a browser or a wallet. And this is where it loads all of this and shows you exactly as a user what you want and depending on your account allows you to interact with it, right? So this can be kind of a variety of things and it still works with any of the wallets, like MetaMask, wallet connect. It can be wallet itself that does it, right? You can actually have rich experiences inside the wallet that are rendered directly from blockchain.
00:11:47.162 - 00:12:43.720, Speaker B: I'll show how it all works. So conceptually what we're trying to solve here is that when you were choosing to build in Web Three, you kind of forced yourself into having very little distribution, right? Like in Web Three we're all trying to find more users and the users in silos across the ecosystem. And so what we're doing with blockchain operating system is really removing the trade off, right? We're saying decentralization actually leads to more distribution because there will be more places where the same experiences, the same applications will be accessible now instead of uniswap just being on uniswap.com or it now is accessible on every place, on every wallet, in any app that supports this blockchain operating system. And it's censorship resistant. It's mobile web. You can run it locally on your laptop, data belongs to the user or to developer who builds this.
00:12:43.720 - 00:12:56.342, Speaker B: And you have kind of this new layer of discoverability and kind of common user base that spans across all of those applications. What does this mean for kind of enterprises?
00:12:56.406 - 00:12:56.634, Speaker C: Right?
00:12:56.672 - 00:14:05.966, Speaker B: Existing applications? Well, it allows you to grow existing website or an app, right? You can take existing application or a website that you already have and you can embed all of this web three experiences directly into it. You don't need to kind of hire a huge web three team to build this, rebuild your website. You can just embed that directly into it's easy onboarding for users and it's really kind of smooth experience that you can integrate with your already existing web two. And it's multi chain, right? So you don't need to choose like, oh, I'm going to build on near or I'm going to build on Ethereum, but is Ethereum going to have high fees? You can actually use all of the smart contracts from the right chain at the right time, right? I need an NFT that already exists on Ethereum. I can throw for example, loyalty points on near and I can use all that with one UI, which doesn't really care which smart contracts are used at what time. As a user for developers, for you here in a room, it's kind of build once and use everywhere, right? Like you build this component once and now it's accessible everywhere. You're cloning in JavaScript and you can clone from thousands.
00:14:05.966 - 00:15:01.380, Speaker B: There's like over 4000 components already since we launched this like two months ago, that you can just really start reusing it's distribution, right? Again, the problem in web three that we have, we all build really cool stuff and then people are not finding, not using it. So here people can find it through search, people can find it through social, you can start sharing it and users already onboarded through whatever gateway they're using. They don't need to relog in trust. Again, that this website is not trying to steal all my money and no hosting, no infrastructure. You just launch once and start using. And finally, for individuals, it's a place where they can do commerce, they can start earning, they can find people to collaborate with, to engage with groups, et cetera. So it kind of merges the commerce, the social and kind of all the finance that we've been doing.
00:15:01.380 - 00:15:57.226, Speaker B: So the main benefit is it's all life, right? So this is all life. And we have launched a featured gateway which is near, but there's also already a bunch of other gateways you can access this with. And so the first thing it starts with, if you go right now to near and try to create account is the fastest onboarding on the web, right? So it's using this new technology that Google, Microsoft and Apple actually launched. It's accessible on all the browsers and it's using on device cryptography to create your account. And you use email to do recovery with NPC and over time you can actually set up social recovery and any other types of recovery that you need. So this takes about 5 seconds to set up. You'd never see any hashes, you never see any seed phrases and it's using your Biometrics or Pin code on your phone or on your laptop.
00:15:57.226 - 00:16:34.760, Speaker B: So it is the fastest as it can be. It's faster than figuring out a password that needs to have some characters. Then you land on kind of this common experience. So right now near the is mostly this social developer environment, right? Again we're focusing on developers and empowering them. And so we have kind of a combination of social interactions and developers posting updates and kind of some of the projects posting updates. We have also featured components which you can think of as App Store. You can discover apps and so we can actually switch to the left version of this.
00:16:34.760 - 00:17:42.062, Speaker B: So if you go to Discover, right, you can see all of the components. There's over 4200 already and it's everything from NFT views, trees, kind of like elemental pieces, to full on applications that span games, chat, financial like Liquid Staking, kind of developer tooling and many more. So it kind of allows you to have a full thing. You can also have so check out Developer Hub because this is where kind of developers meet social, right, and decide what to develop on next, and kind of propose ideas and just kind of get funding, get grants through a Developer Hub. Now, the cool thing about it is at any point of time when you looking at something, you can look how it's implemented. So if you go to develop mode, you can see the exact source code of the component you're looking at. And so that's really powerful because it means you can at any point fork what you're looking at and start playing with it.
00:17:42.062 - 00:18:24.860, Speaker B: Right? So let's say I go to my profile. So this is profile page. You can also see the dependencies that it has. So the different component, other components it uses, right? And so you say like, okay, cool, I like this profile page, but it's missing something, right? And so you can go to a develop mode and you can see like, all right, here's a source code, I can render it right away. By the way, there's a Visual Studio extension if you don't like in browser development that gives you exactly the same form. And as you do this, you can save and publish right away from here. So Publish actually puts it on the blockchain and publishes it under your name.
00:18:24.860 - 00:18:55.560, Speaker B: All of this is on board right now, you actually don't need to pay any fees so the underlying infrastructure covers the fees on the blockchain for that. So you see like okay, this is cool, but I think there's something missing here, right? I think I want to have another component here. And so you can just add a widget which is how you link to another component and you just.
00:18:59.370 - 00:18:59.926, Speaker A: Pretty much.
00:18:59.948 - 00:19:42.434, Speaker B: Need to type in its URL. So URL is like when you navigate to for example lido component, right? How you stake ethereum. The URL is this path of a username and the name of the component that you use. So you can just paste this I want to see lido here and boom, you have a lido component inside my profile page, right? So this is how easy it is to start combining things. You can iterate and change things. For example for lido you can again go and check out the source code and there's a chain ID here defined smart contract that's used, et cetera. You can fork it, you can modify it.
00:19:42.434 - 00:20:42.086, Speaker B: So you have kind of a whole experience here that you can interact with and the cool thing about it is you have search now that indexes all of these applications, indexes users and it's kind of expanding this across other blockchains right now that you can start interacting. So if you're looking for something to swap, there's SushiSwap which actually was probably a fork of lido component somebody modified which smart contract to use. So you have all of these experiences really tied in in one place. But as I said, this is just one gateway. So here is another gateway, it's boss GG and so this runs exactly the same code. It just parameterized differently, right? Like you can actually run your own gateway on Versaille in about five minutes, which the five minutes it takes Versailles to build everything. And if you run it, you can specify the steam, the design, you can change the page, right? So this homepage is very different from the homepage we're just looking at, which was social.
00:20:42.086 - 00:21:45.660, Speaker B: This is just apps that build at hackathon. But you can open the same lido component here, right? It's the same path on the top and you see exactly the same thing. So that's the idea that you build the component once and it's now accessible across every single place this blockchain operating system is installed. So that's why one of the reasons we call it operating system because it follows very similar pattern where as a developer now you don't need to think about distribution. The distribution is achieved by pre installing this operating system in all these places and you really develop the app and then kind of gain usage from there. So another example just to show is ZK sync. So this is actually a ZkSync example if we switch to it with a swap and bridging to era and so you can have kind of if you log in with MetaMask here, you can have a if you approve stuff, kind of the full ZK sync experience.
00:21:45.660 - 00:22:27.420, Speaker B: And so you can keep building, right? Again, you can always go view source code, see what's going on here and decide that like, well, actually Zkvm is cool too. Maybe I want to build this for Zkvm and start iterating from there. So really kind of pushing away from a web two. We use still front ends in web three. That very much web two, right? Running web server need a domain making sure that it's secure, that nobody hacked it. Like what happened with Curve last year, where the front end got compromised and so all the transactions were compromised. So this actually creates also a level of isolation because every component is isolated in the security sense.
00:22:27.420 - 00:23:22.026, Speaker B: So kind of there's a lot of things here I'll just kind of walk through just to we talk through all this. What would be like a cool example that you can build this weekend? Imagine you are a fictional hacker that building a fitness project, right? And so fitness is about social engagement and individual. It's about kind of how do we reengage people and bring them back to the interaction. It's about motivating them and really creating a business around that as well. And so there's four steps to building a business, right? First you test the hypothesis. So first you want how quickly can you learn if this is the right thing and you can actually find that right thing that people are engaged with. And so the cool thing here is as you're kind of navigating through this blockchain operating system, you see different interesting things.
00:23:22.026 - 00:24:11.818, Speaker B: You're like, oh, there is an NFT Minter here, there's a social feed there. And you can pull it all together really quickly from these components and just make it your own, redesigning them, right? So you create account. You see Minbase, which is NFT marketplace and kind of they have NFT Minter called Minsta. And you take the code, modify it a little bit to mint badges and boom. You have minter of badges for your fitness app, right? So that's idea and I showed you fork it, start kind of changes the code. The API is pretty much react and you have access to all the blockchain tooling you need. So it's fastest way to prototype an idea to get to some hackathon level kind of product and then start showing it to people.
00:24:11.818 - 00:24:45.106, Speaker B: Because it's already published, it's already on chain. Everybody's accessing it already. You can put it on the social feed, people will see it. You can go on Twitter and other socials to attract attention to this. And people can start signing up, can discuss this. So on every component app, there's a discussion. So you can think of it as like feedback form and you can share links, right? And so there's one more component of this called keepon where you can actually share a link that directly contains an NFT.
00:24:45.106 - 00:25:59.680, Speaker B: So as they click on this link they will actually go create account and receive NFT from that. So you can start creating more complex onboarding experiences which already include some interactions blockchain and so you can start sharing this, emailing them and notification. So I showed you how the fastos works. So really kind of onboarding people extremely quickly, very web two like experience but having all of the cryptography underneath to power that kind of interaction with blockchain and you're kind of just building this really engaging experiences to lend people on it. Finally I showed you Search so people can find these things. Again, search is really powerful, there will be recommendations but also nowadays a lot of the interaction are happening through the social, right? So really important is to continue kind of interacting and posting on social. The one thing we're planning to launch is the social feed itself will actually be able to embed components and so you'll be able to embed existing experience like an NFT, like an active NFT, like with buttons and things for example into the social feed as you post, right? This is something that Twitter or any other kind of web two socials are not able to do.
00:25:59.680 - 00:27:08.100, Speaker B: So more efficient way to acquire users and kind of you have built in feedback, right? People can interact on discussions, you can onboard new users that don't have any crypto and kind of start earning first NFTs, maybe start earning first crypto and loyalty points and there's other ways to discover these applications and finally you want to retain users, right? So retention is one of the hardest things not just in web three but in web two as well. And so you really want to get people to kind of transact and subscribe. So the benefit here is you can kind of again social is already embedded, you have all the APIs and importantly you can start doing notifications, right? So you can start doing push notifications to the user. User can manage that on their side, like what notifications they want to receive. But this way you can pretty much reengage user as there's new things happening in your app or with their account itself. The cool thing about this, this all works in mobile web and this is first time, especially on the Apple side, you can actually do this in mobile web. They just launched that last year.
00:27:08.100 - 00:28:14.710, Speaker B: The benefit is Apple allowed it on mobile web and they may not allow all the crypto apps on App store. So you're actually able to build the app level experience inside mobile web now. And so this is an example and kind of the toolkit for you to do that I mentioned. You can deploy your own gateway. So there's actually a link, you can just click on it and it will deploy on gateway and then you can configure parameters with a clone on GitHub but also there's a component for that. And so boom, you have now your own Fit app ifit app which renders the same thing, right? You just customize the menu and the home page now to be your fitness kind of app interaction. So you went from like I built a component, I lended some people on a full on flat page and then boom, I built it on my website without actually writing any of that code, right? Like writing all of that underlying kind of scaffolding of how to link accounts, how to build all the linkage, all the data processing that needs to happen underneath.
00:28:14.710 - 00:29:19.562, Speaker B: So increased retention, ways to reengage users and really kind of customizations you could do. You can also serve it through IPFS on ENS domain as well, right? So you have like a full decentralized stack used as well. And so now that you have it fully done and you know how to engage users, you want to grow the market, right? And so here you have abilities to go MultiChain and kind of expand with, partner with other projects, build other experiences and geographies, right? So imagine you have for example some of the NFTs on Ethereum that you can actually engage and link with your app. And so you can have this cross linkage between multiple chains in one place. You can work with other apps. So existing applications like Sweatcoin which has millions of users, you can pretty much engage with them. They can either render it directly in or they can kind of send out to your app as you're partnering with them and you can scale geographically.
00:29:19.562 - 00:30:33.714, Speaker B: So there will be internationalization added to this, right, which really going to power that as other people running gateways in their local geographies, for example, customize for that language and for that culture, they can actually have your apps directly embedded there. So work with any chain, extend to any experience and a lot of the pieces are reusable and kind of can be scaled from there. So this is what we call kind of community commerce, right? It's really engaging social, digital kind of assets and value and kind of participation in one place, right? The Dows, the kind of marketplaces, all the things we're building in web three is really powering that. And so you can go from hypothesis to kind of a hackathon project to an app to engage with users to really start building a business and growing and partnering on this platform and kind of grow it from there. And just finally to mention one more thing is we just launched near Horizon. So this is actually an app built inside the Blockchain operating system as well. And if you go to or you just search for it, it's near Horizon.
00:30:33.714 - 00:31:22.434, Speaker B: You can actually see kind of the platform that's designed to really help startups to find broadly speaking, contributors, right? So this is everything from developers, market agencies, legal agency, to investors and kind of advisors and supporters. Right. And so the idea really to kind of create one single place where all of the people in the ecosystem can meet and start helping each other to grow each other startup and project. And so there's like a few features already launched and more launching. The important part actually is there will be credits as well. So as you onboard, you can receive some credits to get services from a marketing agency or legal agency to set up your company or have marketed your project. So this allows to kind of really bootstrap and this works for any blockchain.
00:31:22.482 - 00:31:22.694, Speaker D: Right?
00:31:22.732 - 00:31:53.278, Speaker B: Again, it's not really specific to near ecosystem, near blockchain ecosystem. So try it out, try to build. Would love to hear your feedback. You can leave feedback directly on social there. There's actually a support line as well that you can use. It's just near the sign up. It's not that hard, but you can pretty much build applications, use Ethereum apps or any layer twos as well.
00:31:53.278 - 00:32:34.570, Speaker B: Right there you can have decentralized front end that's not going to be censored or stop running. You don't need to pay for hosting to start with and you can really kind of get usage and distribution from there. So again, Nier started as a blockchain originally, but it's not a blockchain, not just a blockchain anymore. Right. It's a lot of different tooling and pieces that come together to really provide kind of solve developer and enterprise use cases and problems. And that's why we call it the blockchain operating system. The system where you can come in and really rely on to allow you to build your business and your applications.
00:32:34.570 - 00:32:41.840, Speaker B: Thank you and yeah, love to chat with you. Who's interested to learn more?
00:33:54.480 - 00:34:52.348, Speaker A: Sam SA it.
00:34:52.434 - 00:35:20.996, Speaker C: All right, what's going on everybody? We're going to get started here. If you want to find a seat, welcome, welcome. Cool. So this is going to be a talk. This talk is an intro to, ERC six, five, one this is an upcoming standard, it's an EIP. And this kind of talk is going to be a walkthrough of what it is, how it works, why it's important, and most importantly, how you can use it to build cool stuff at the hackathon this week. So before we go too much farther, obligatory intro slide.
00:35:20.996 - 00:35:40.604, Speaker C: I'm Jaden, I'm one of the founding engineers at Future Primitive. We're a venture studio. We build crazy crypto stuff. I'm also one of the authors of, ERC six, five, one. If you want to follow me on Twitter, that's where you can DM me Future Primitive. So we are a on chain venture studio. We build crazy crypto experiments and we love everything NFTs Benny, one of our founders, is sitting here in the front row.
00:35:40.604 - 00:36:17.228, Speaker C: He was one of the founding team of CryptoKitties back at ETH Waterloo, an early ETH global hackathon, and from there worked in Dapper where they launched Cheese wizards and NBA TOPSHOT. So been around in the Mnft space for a long time and have launched a lot of crazy NFTs since then. You can see a couple of the ones we've built here, but we believe really deeply that NFTs are much more than just a financial commodity or something you buy, sell, and flip. We believe really strongly in the potential of NFTs as an on chain medium. We think every NFT should be able to do more than just be an asset that sits in your wallet. Shouldn't just be a static image, a static thing that sits there. NFTs should be able to own things.
00:36:17.228 - 00:36:43.220, Speaker C: They should be able to take actions and do things. They should be able to change states. They should be able to claim things like airdrops. They should be able to be used as an ethereum identity because that's the potential of NFTs as a token. But right now, it's not really realized. NFTs are just a thing that sits in your wallet. So how can we change that? I mean, if you zoom out on the history of media on the internet as a whole, JPEGs kind of brought media onto the Internet, where you can now see images online.
00:36:43.220 - 00:36:58.956, Speaker C: And then we built stuff like Facebook and things like that. We can start doing things with media. You can start liking it, you can share it, you can send it to your mom. You can do all these things with media. And then NFTs took that even further. Now not only can you interact with media, you can also own it. You can buy it, sell it, trade it, you can own a piece of it.
00:36:58.956 - 00:37:18.016, Speaker C: It lives on chain. And we think kind of the next evolution of NFTs is that you can become your NFT. You can use your NFT, you can interact with it. It's no longer just a thing that gets passed around. It's its own unique identity. And that's what ERC six five one is designed to allow. ERC six five one or the token bound account standard.
00:37:18.016 - 00:37:48.020, Speaker C: This is a proposal that gives every single NFT a wallet and not just new NFTs that you build. Every NFT that's ever existed on any EVM compatible chain has a wallet now that it can start using today. And you can see up here, these are real wallets, real tokenbound accounts for these NFTs on ethereum. So now every NFT is a wallet. NFTs can do crazy things like own any kind of asset because it's just a wallet. Your NFTs can connect to DApps. You can trade your favorite meme coin on uniswap using your NFT rather than using your wallet.
00:37:48.020 - 00:38:16.116, Speaker C: Your NFT is that same ability that used to be only something that wallets could do. And NFTs can have their own transaction history, right? With their own wallet, they can generate their own history outside of the history that your wallet creates. So how does that work? So, ERC six. Five one, the standard. You go and read it's live on the EIP page. What it does, it defines a single registry that is permissionlessly deployable. Nobody owns it, it's fully decentralized, you can deploy it on your favorite chain, this hackathon, if it doesn't exist there yet.
00:38:16.116 - 00:38:56.136, Speaker C: And that registry gives every NFT its wallet address and it does so using the magic of Create Two. Create Two lets you deploy smart contracts to predetermined addresses. And so the registry reserves wallet addresses for every NFT that's ever existed or ever will exist. Every NFT gets a unique wallet address that only the owner of that NFT will be able to use. And so when that wallet address is deployed, the only person who can use that wallet is the owner of the NFT. You can think of it kind of like a token gated, one of one safe. The owner of the NFT will always own the wallet and all assets inside it and all execution permissions on the wallet.
00:38:56.136 - 00:39:37.884, Speaker C: And this is all allowed by having that registry that's open and public. The whole source code is in the EIP. You can go and start using it today. It's fully decentralized, works with every NFT. It's pretty cool. One of the things we get asked a lot since we started this process of trying to get this standardized as an EIP is well, wait, isn't this just X? Isn't this just, ERC, nine nine eight? Didn't we do this a long time ago? Isn't this just some other, ERC, isn't this just some other centralized company that I've heard of that does like NFT nesting or NFT holding things? And we've built with all of those at Future Primitive. We've built a lot of experiments with NFTs and we've used all the tooling that's out there and none of the things that we saw really fit our use case because we had some really core beliefs about what NFTs should be able to do.
00:39:37.884 - 00:40:09.732, Speaker C: What rights should an NFT have? First of all, every NFT should get a wallet, not just some NFTs that implement a certain standard, right? Just because you launched your NFT a long time ago doesn't mean your NFT shouldn't be able to use all of these cool features. And most of the standards out there, they only work for new NFTs and they only work for a subset of NFTs. And so that didn't fit our use case. We also wanted NFTs to be able to own anything. They shouldn't just work with some types of assets. It's no fun if your NFT can only own other NFTs in the same collection. NFTs should be able to own anything, ERC, twenty s, seven twenty one s, eleven fifty five s.
00:40:09.732 - 00:40:49.044, Speaker C: If somebody comes out with a crazy new token standard tomorrow, it should work with your NFT, your NFT should be able to own it. And the biggest thing was we wanted all of this to work without any contract wrapping or burning a lot of the other standards. If you wanted to use existing NFTs with them, you'd have to wrap the NFT into another NFT that could then be used with the standard. And wrapping NFTs is great for some mechanics, but in a lot of ways you lose the provenance and the value of the original NFT when it gets wrapped. So we wanted to do all of this without any wrapping and we wanted to work with existing platforms, right? It's cool if your NFT can own things. It's cool if your NFT can own anything. But if you can't know see the things your NFT owns anywhere other than some app that somebody builds, that's no fun.
00:40:49.044 - 00:41:13.060, Speaker C: It should just work with existing infrastructure so you can see what your NFT owns and finally, it should be fully decentralized. There's a lot of other projects that do this in like a centralized you've got upgradable contracts, everything goes through one place. We really think that NFTs should have their own self sovereign wallets. Nobody should be able to control what you do with your NFT. It's a bearer asset. It's something you own. The same should be true of the things that your NFT owns.
00:41:13.060 - 00:41:41.540, Speaker C: And so we thought all of this was really, really important and we didn't see anything out there that did all of these things. And so we started talking to friends of ours about this idea we had about giving NFTs wallets and they were like, wow, this is super cool. We would use this for a whole bunch of things. And as soon as we heard that, we know this is way bigger than just our projects, just things we want to work on. This should be a standard that every NFT should be able to use, that every Ethereum should be able to use. So we launched ERC six five one. Now you're an NFT developer, you're here at a hackathon, you're building cool stuff.
00:41:41.540 - 00:42:21.432, Speaker C: You kind of have the chance to choose your own adventure. If you're building with NFTs, there's a couple of options you have. First, you can just pull like an off the shelf, open zeppelin NFT, spin it up and then you can worry about all the utility for it later. If you want to build like a staking contract, you want to build some game mechanic with your NFTs, you can launch a really plain NFT and then put all the logic in some external contract that you use. That's good and all, but you have to build a whole bunch of custom contracts and it's only going to work with some NFTs. I mean, you can make it work with all NFTs, but there's just some necessarily non standard things you're going to be able to do to make that work. And so it's not going to work with every system out there because a lot of it has to do with wrapping NFTs or burning NFTs when they go into a certain circumstance.
00:42:21.432 - 00:42:43.496, Speaker C: And so you can do it. It just gets kind of messy. Everybody does their own thing and then if you're going to bring this to production, you've got to get an audit, you got to do all of that. It can be pretty heavyweight. The other alternative you have is to use one of these other standards that have come out. You could build your NFT project on something like ERC nine nine eight and you could write all of the logic about your NFT owning things into the core NFT contract itself. You can do that.
00:42:43.496 - 00:43:22.004, Speaker C: The problem is, with standards like ERC nine nine eight, it only works with NFTs and ERC twenty S and I think only NFTs and ERC twenty S that also implements the sum nine nine eight compatible interface. And so you can build all this logic into your NFT contract, but you're making some trade offs. It might not work with every other token out there. Your NFT might not be able to own every other thing. And that's only talking about ownership. It's not talking at all about being able to use your NFT to interact with DApps or all of those other things. So you can build a lot of logic into your NFT contract, but at the end of the day it'll still be hindered by even if it is using some sort of standard, it's not going to have the same level of compatibility that your NFT having a wallet is going to have.
00:43:22.004 - 00:43:51.308, Speaker C: Because wallets are universally supported. Any application on Ethereum has some concept of a wallet and some support for the concept of a wallet. So your third option with ERC six five one is you can launch the most boring NFT. Nothing special about the NFT contract. You can launch an open edition or you could launch an open Zeppelin fork. And all of a sudden every NFT you've launched will have its own wallet and you can start building and putting things in that wallet, building authentication logic using those wallets. And your NFT project doesn't have to be anything crazy.
00:43:51.308 - 00:44:15.584, Speaker C: You don't even have to write very much custom code to support this. Your NFT can just own things and do things out of the box and that's a really powerful mechanism. You don't need to make this decision when you're launching your NFT. You don't need to do crazy custom contract development afterwards. You can just bank on the fact that every NFT in the collection that you launch has a wallet and you can build applications around that because that's a really powerful medium. Some cool things you can build with this. So this kind of turns every NFT into a folder.
00:44:15.584 - 00:45:00.740, Speaker C: So if you're doing Airdrops or if you're collecting Poaps, or if you've got soulbound tokens in your project, all of a sudden NFTs can start collecting those poaps and those soulbound tokens. You can start putting assets inside of an NFT. This opens up some really cool mechanics that you can build inside of a hackathon project. And especially for Airdrops, it's really interesting when, say, you have a big collection of NFTs and you want to do an AirDrop to all of them. Every NFT having a static token bound account address versus a dynamic owner address makes stuff like Airdrops really easy because you don't have to do snapshots and you can do some really neat gas hacks to save gas when doing that. So your NFT being able to have a wallet, you being able to put assets into it is a really cool thing that you can use for your hackathon projects this week. A couple of other interesting ideas to throw away Dao membership.
00:45:00.740 - 00:45:41.808, Speaker C: A lot of DAOs have this concept of a membership card or an NFT that represents your membership in the Dao. You can see in this case, this is the FWB membership card NFT. And the more things you do within the Dao, the more stickers you collect to prove that you've done things in the past. Except as it stands right now, all of that just sits in your vault. So every time you do something in the Dao, it's your wallet that gets the sticker. But what happens if you sell the membership card but keep all the stickers? You kind of have this weird out of sync history about your participation in the Dao, or you keep the membership card but you sell all your stickers. What are you supposed to do with that? When all of the NFTs are supposed to render the card and all of the stickers? You just get this weird kind of out of syncness because the membership card isn't really your core membership in the Dao, your wallet is.
00:45:41.808 - 00:46:26.828, Speaker C: And trying to represent that as an NFT gets difficult. But with token bound accounts, your NFT can actually own all of the artifacts from the actions it's taken within the Dao. Your NFT can be the core participant in the Dao rather than your wallet being the core participant. And your NFT can collect artifacts about its historical contributions to the Dao, can collect soulbound tokens, it can collect Attributions, and all of that will go wherever the NFT goes. If you sell that NFT on OpenSea, all of that history goes with the NFT to the new owner, whereas before it's just stuck in your wallet address. And finally, this is a really cool mechanic for onchain gaming because it works with every asset. So your characters in the games can own ETH or they can own meme coins, or you can represent items in the game as 1155.
00:46:26.828 - 00:46:59.768, Speaker C: And because every NFT has its own wallet, you can have your character represented as an NFT collecting all of these assets in game. And then when you go to sell your character, all of the assets it's collected over time go with the character versus right now if you're putting all of those assets into somebody's wallet, then they can sell the character but keep all the assets. Or sell all the assets but keep the character. And you have to figure out how to do, like, bundle orders on OpenSea to make that work. It just gets messy. But with this, characters can be represented as NFTs, and this forms a really interesting basis for on chain inventory management inside of an on chain gaming context. So, crazy amount of stuff.
00:46:59.768 - 00:47:36.660, Speaker C: We can go down many, many deep rabbit holes to share what that's all about. But to start, we'll get to a demo eventually, but we've got a crazy community of developers who have helped contribute to this standard. There's been a ton of folks in our DMs in a Telegram working group that we've formed. If you want an invite to join, come see me afterwards. We'd love your contributions, because with EIPS, the biggest thing is getting community support is rallying the community to come to consensus about what is the standard that should be there. And we really think it's important that the concept of NFTs having a wallet, NFTs having an account, is something that everybody agrees upon that we can come to consensus on. And so people at all of these companies have been helping us do that.
00:47:36.660 - 00:47:59.836, Speaker C: We've got a killer group of devs if you want to join, so I'll give you a quick demo. We built a bunch of tooling around this. If you want to build on top of ERC, six, five, one at the hackathon, we've got some tooling for you. So the first thing we built as an explorer, you can think of it as Ether. Scan for token bound accounts for any NFT that exists. You can find its wallet address, and you can interact with the wallet if you're the holder of the NFT. Let me just see if this works here.
00:47:59.836 - 00:48:20.580, Speaker C: I'm going to pop this open. All right, does anybody have an ENS address? I'll just pick someone random in the audience. Okay, what's your ENS? Zero xjax ETH Jacquese okay, so I'm going to go to Etherscan, and I'm going to grab your wallet address.
00:48:22.390 - 00:48:24.158, Speaker B: Let's hope Etherscan doesn't think I'm a bot.
00:48:24.174 - 00:48:39.160, Speaker C: Okay, is that the right wallet address? Okay, yeah. Give me a different one. WH A-L-E.
00:48:41.550 - 00:48:47.434, Speaker A: Jockswales ETH okay.
00:48:47.472 - 00:48:52.574, Speaker C: I don't see it anyways. I'll use mine. It would have been super cool to use somebody in the audience's, but oh, yeah, sure.
00:48:52.612 - 00:48:53.200, Speaker E: Yeah.
00:48:54.210 - 00:49:09.794, Speaker C: Jordan Public. Okay. Jordan public ETH. Okay, is this the right wallet address? AAC two. Perfect. Okay, so let's go and take a look at all of your NFTs there Jordan. So I just got to paste your wallet address in here.
00:49:09.794 - 00:49:12.398, Speaker C: And so here are some NFTs you own, right? You've got a pragma?
00:49:12.414 - 00:49:12.654, Speaker F: NFT.
00:49:12.702 - 00:49:26.022, Speaker C: You've got Jordan public ETH. So let's pick the Pragma NFT. So here's the NFT, and here's the wallet address. Your NFT is a wallet, and you can see it there. So if I pop this guy open here in Etherscan. You can see it's got a wallet address. It works just fine.
00:49:26.022 - 00:49:31.000, Speaker C: So now what I'm going to do is I'm going to go into a.
00:49:31.950 - 00:49:32.826, Speaker B: NFT that we have.
00:49:32.848 - 00:49:46.800, Speaker C: This is our nice future primitive logo here, and I'm going to AirDrop an NFT into that NFT's wallet. So let me just send this through. Yeah, you got the free AirDrop here. So if we just wait for that transaction to go through.
00:49:59.800 - 00:50:00.596, Speaker B: Excuse me, while.
00:50:00.618 - 00:50:03.670, Speaker C: The Ethereum network takes a little while. Cool.
00:50:04.120 - 00:50:05.190, Speaker B: Is in there.
00:50:07.240 - 00:50:15.290, Speaker C: In the MetaMask. Oh, I airdropped in the MetaMask. Oh, my bad. Yeah, sorry. Let me AirDrop it in the Token bound account. So now you get two. You get one in your MetaMask, too.
00:50:19.460 - 00:50:22.064, Speaker B: All right, pop it in there.
00:50:22.182 - 00:50:42.228, Speaker C: Great. Now we're going to put one in the Token bound account of the NFT. So in a second, when that happens, you'll see that NFT just shows up here. It shows up in this wallet. Because this NFT's wallet now owns that NFT. We just use an external tool that knows nothing about Token bound accounts, knows nothing about, ERC, six, five, one. And it just works if you want to AirDrop NFTs to this wallet.
00:50:42.228 - 00:50:54.860, Speaker C: So we refresh the page, bam. This NFT now owns this token. And this works anywhere. Like, you can copy the same address and go see it on OpenSea. Right, if I copy and paste this address in here onto OpenSea whoops, sorry, I got to search for a wallet.
00:50:55.680 - 00:50:56.188, Speaker A: There we go.
00:50:56.194 - 00:51:29.738, Speaker C: If we go see this address on OpenSea, you can see that it's probably going to be under Hidden, because we just airdropped it. Sorry, OpenSea sometimes hides it when it's an AirDrop like that, especially when it's an Open edition. But it is in there. You can go see it on Etherscan. If we pop this guy back open, you can see that the NFT really exists. We go under NFT transfers. You can see we minted this NFT into this wallet.
00:51:29.738 - 00:51:58.486, Speaker C: So stuff like Etherscan, stuff like OpenSea, all of that, it all just works. Even despite not knowing about this NFT being owned by an NFT, it knows this NFT is owned by a wallet. And that's really important because wallets are universally supported on Ethereum. It doesn't matter what you're building, you're going to support wallets. And if you support wallets, you naturally support six, five, five whatnot? Box. That's part of the power of this. And so, by giving every NFT a wallet, we let NFTs participate equally in the Ethereum ecosystem.
00:51:58.486 - 00:52:25.586, Speaker C: Just like any human, just like any wallet, ethereum NFTs can participate. And that's a really, really powerful thing. There's a ton of stuff we go into that to start, because this is a hackathon, we'll dive in mostly into what you can use this weekend. So the Explorer is there, you can check it out. Works on Mainnet, works on Gurley, adding polygon support this afternoon, for you guys who want to play around on Lens, because there's some really cool things with Lens. We're also sponsoring a bounty with Lens if you want to build a cool Lens x six five one integration. But the token bound explorer is there.
00:52:25.586 - 00:52:49.418, Speaker C: You can go to Tokenbound.org for any NFT you own. You can see its wallet and you can start using its wallet today, which we think is pretty cool. Second thing we built is an SDK. So if you want to build deep support for ERC six five one accounts into your application, you can install the Token bound SDK. It's on GitHub NPM install at tokenbound SDK if you're using VM SDK ethers if you're using Ethers. If you have issues with that, come see me, happy to help out.
00:52:49.418 - 00:53:19.374, Speaker C: But you can just pull this into your applications and start calculating the addresses for any NFT right away. If you launch an NFT this weekend, you can get the address for that NFT within your application and start airdropping stuff into it, or start executing transactions from that NFT's wallet within your application. And you don't have to worry about any of it. You can just pull in the SDK and go to town. It works really simply. The other thing we've launched is a Token bound wallet. So it's actually really hard to build a wallet smart contract.
00:53:19.374 - 00:53:38.746, Speaker C: SAFE's done a great job that a lot of other teams have. But for a hackathon or for a product in general, you shouldn't be responsible for the security of your NFT's wallets with some contract you threw together. You should use something proven, something audited, something that you can trust. And so we've got a Token bound wallet implementation. It's live on main net. It's live on all the testnets for you to play around with. If it's not on your favorite chain, come see me.
00:53:38.746 - 00:54:04.686, Speaker C: We'll get it up there together. But this is a really extensible ERC six five one account implementation that you can start using right out of the box. If you use the SDK, you don't even have to worry about this. The SDK takes care of it for you. But if you want to do some crazy custom smart contract wallet stuff, that's our implementation. You can feel free to play around with it's open source, and it is 4337 compatible. One really powerful part of 6551 is you can think about it as account abstraction for NFTs.
00:54:04.686 - 00:54:33.066, Speaker C: Every NFT gets an abstract account that the NFT owns, and that's a really powerful paradigm. Means you can use all the crazy cool four three seven Tooling that's coming out with your NFTs wallet. So your NFT's wallet gets automatically deployed on the first transaction. Your NFT's wallet can use Paymasters, so it can use other tokens other than eat that they gap all the crazy four three seven stuff you've seen. It works out of the box. And so you can start using it with Tokenbound accounts it's extensible. So if you want to add custom logic to your Token Bount account, our wallet implementation supports that.
00:54:33.066 - 00:54:53.054, Speaker C: That's super cool for folks who want to do stuff like overriding receiver methods and stuff it's live on main net so you can play around with it. We do have some audits for it. So this is kind of like out of the box. You don't want to do anything crazy, you just want to start using this paradigm. Feel free to pull in the SDK and the Token Bount account. Tokenbound Wallet implementation. And if you have any questions about how any of this works, docs Tokenbound.org
00:54:53.054 - 00:55:22.166, Speaker C: is your friend. So that'll cover the SDK to cover our wallet implementation. It's a little sparse, forgive me, we are working on that, but if you have any issues, please, I'm here all weekend, come and see me. And for anything like, ERC, specific. If you want to dive into the internals of how this works under the hood, how 6551 actually gives every NFT a wallet without requiring any interaction from NFT creators or NFT holders, you can look it up on the EIP website. Just google EIP six, five, one and it'll come up. That's all the crazy nerdy details if you're into like EIP development.
00:55:22.166 - 00:55:33.600, Speaker C: So that's that, that's Token Bound accounts that's ERC, six, five, one. We think it's really cool. We think there's a ton of applications you can use. We've got a few minutes left if anybody has questions, would love to answer some of them.
00:55:38.290 - 00:55:47.390, Speaker A: How accessories?
00:55:48.150 - 00:56:20.030, Speaker C: Totally. So the question is, you know, every NFT has a wallet, that's cool, but how do I actually use that wallet, right? If there's assets in there, how do I pull it out or how do I interact with it? And so there's a couple of ways you can do that. First, every wallet is its own smart contract. So every NFT gets its own smart contract that it is Token Gated. So the owner of the NFT is the owner of the Smart Contract wallet. And that means that you can use any tool that interacts with smart contracts to use the wallet. So if you want to go on Etherscan and manually execute transactions using your Token bound account, you can, because it's a smart contract that you control.
00:56:20.030 - 00:56:45.778, Speaker C: If your NFT is owned by your MetaMask wallet, you can use your MetaMask wallet to control the Token bound account smart contract. That ownership is transitive. So if you own the NFT, you own the Smart Contract wallet. And if you ever sell the NFT, you will no longer have access to the NFT Smart Contract wallet. The new owner will automatically have access the moment that transfer takes place. And so you can use either scan, you can use the Tokenbound.org website, there's some you can pull assets in, put them in, pull them out on the Tokenbound.org
00:56:45.778 - 00:57:30.354, Speaker C: site, deploy the contract. We've got some tooling around that you can use, but really anything that works with smart contracts you can use your wallet with. That's a good question. So question is, what happens if you burn the NFT? What happens to the stuff in the wallet? It's all burned too, because nobody's ever going to be able to access that Token Bound account again because the NFT changed hands is now the burn address. And unless you can somehow figure out how to execute transactions from the burn address, which would cause other very significant issues, all of the NFTs in the Token Bound account will be forever burned. So if you burn the core NFT, you also burn the assets in the wallet. Oh, yeah, absolutely.
00:57:30.354 - 00:57:51.234, Speaker C: Let me see if I can pull up this demo. We do have a demo of this. It gets crazy quickly. Benny, what's it called? Token bound demo Versal app. Yeah, so excuse this. This was kind of an early iteration of this concept that we built, but yeah, NFTs can totally own NFTs, that own NFTs, that own NFTs as deep as you want. You can create a whole family tree of NFTs.
00:57:51.234 - 00:58:11.114, Speaker C: And this is a real live example of that on chain. So you can see this testnet Clonex owns these three NFTs. These three NFTs each own NFTs themselves and these NFTs own other NFTs. You can make this as deep as you want. It's crazy enough that NFTs can have their own wallet. That's kind of what we're focusing on. But if you want to go really off the deep end, NFTs can own NFTs in any depth.
00:58:11.114 - 00:59:08.128, Speaker C: It creates a graph of NFT and Token ownership, which has some crazy implications. And importantly, with some of the changes we have coming up to the wallet, you'll be able to, if you own this root NFT, you can just execute directly against the contract of any sub NFT because transitively, you're the owner of it. And so it creates some really interesting ways that you can build like tree based structures on chain. One more. Go for it, you would think, but that's actually not the case. So the question is, isn't it really expensive in gas fees? Because you have to work out the transitive properties of the graph and yes, it will cost more gas if you execute further down in the tree, it will cost more gas, but it's actually not incredibly much more gas because what you can do is because all of the Tokenbound accounts, their addresses are computable, right. You can compute the account for any NFT without making any external contract calls.
00:59:08.128 - 00:59:43.570, Speaker C: And so you can pass in a set of data that you can compute the owner addresses all the way down the tree locally within the contract. You want to do the logic. So in this case, the lower level NFT account can do this computation on a proof that verifies that you, the caller, are calling from the top level NFT without having to execute a waterfall of contract calls all the way down. So you as the caller can call just into the bottom NFT and it will cost a little bit more gas because you're like verifying data on chain. But it's much, much cheaper than if you had to call into the top contract which calls into the next one. Which calls into the next one. Yeah, go for it.
00:59:43.570 - 00:59:49.100, Speaker C: Yep.
00:59:52.530 - 00:59:53.114, Speaker G: Totally.
00:59:53.162 - 01:00:18.130, Speaker C: Yeah. So that's an important thing, the security of wallets. In this concept, your wallet is only secure. Your token mount account is only as secure as the wallet you hold it in. That's true for all NFTs, but it becomes especially true when your NFT can own assets. So if your wallet gets rugged and you lose your NFTs, sorry, you lost your you know, if you get rugged, you get rugged. If there's something malicious on the contract where somebody steals your NFT from you even though your wallet was still secure.
01:00:18.130 - 01:00:38.640, Speaker C: Sorry. Your wallet will also get stolen wherever the NFT goes. Specifically wherever the NFT contract says the owner of the NFT is, that person will have execution permissions on the smart contract wallet. So if you get rugged or if you lose your private keys or something like that, not much we can do. I'm sorry, that's just the nature of self sovereignty. Cool. I think we had a question here.
01:00:38.640 - 01:01:18.378, Speaker C: That's a really interesting thing. Yeah. You can totally have a Gnosis safe that has NFTs as signers on the Gnosis safe now because you know the wallet address for any NFT. So you can have a five of five Gnosis SIG that the signers are actually NFTs and no matter who owns that NFT, they'll automatically be a signer on the nosisafe through their token about account. Sure, yeah. Yes, it would work for every contract. The question is, where do you draw the lines? Like, where does this become useful? Because if it's not token bound, it's really just contract bound contracts.
01:01:18.378 - 01:01:51.258, Speaker C: And what does that mean? What are you going to do with contract bound contracts? Totally. And so importantly, this works with seven hundred and twenty one S, the best. Right. So a lot of this assumes there's a single owner per token, but this can also be extended pretty easily to work with other types of tokens where there's not just one owner. So you can make this work with 1155s if there's the cases where 1155s have one owner, like ENS names are now 1155s. This works out of the box because ENS supports the owner of method. So tokenbound accounts work with some box.
01:01:51.258 - 01:02:32.310, Speaker C: They can also work with some more fungible, 1155s with a little bit of Tweaking. And so you can use this same pattern to support other types of tokens. You would be very much breaking kind of the spirit and the lines that we've drawn in the standard to do contract bound accounts. But theoretically, if you put an owner of method on the contract, this could. Be contract bound accounts. But we just think that because of the liquid nature of tokens, because tokens change hands, that makes this really powerful because we haven't had a way to do wallets that have liquid marketplaces for their contents before. And so by tying wallets to tokens, you get to take advantage of all the infrastructure that exists around tokens rather than working with custom contracts.
01:02:32.310 - 01:02:57.262, Speaker C: Question in the back. Totally. Yeah. So the question is, what are some use cases? So we talked about three of them. A little bit in the slide. So this is really cool for Airdrops because you can AirDrop to token amount accounts. It's cool for DAOs because NFTs can now be members of DAOs, signers on the safe voters on the contract, and your entire history of membership in the Dao can be a part of that NFT you've got on chain games, which is super cool.
01:02:57.262 - 01:03:23.954, Speaker C: This is kind of like the perfect inventory management solution for on chain games. But there's lots of cool things beyond like what are some of the things people in the what's that? Oh, digital fashion. Yeah. So for example, one of the projects we're working on, I'll demo this real quick because I think it's in my wallet. We're working on a contract called Sapiens. If I can find the NFT in the sea of stuff I've collected here, we're working on a project called Sapiens that uses this mechanic for digital fashion. And so this is a Sapiens NFT.
01:03:23.954 - 01:03:50.014, Speaker C: You can see inside the Sapiens NFT are two other NFTs. One is an NFT that's part of a previous collection. We did that once. This all reveals this NFT at the beginning is going to turn into a T shirt. And the PFP that's revealed in this artwork is gonna be able to wear that T shirt and then collect future NFTs that become t shirts and hats and other items equipped onto the NFT. And if the NFT owns the assets, the NFT has the rights to equip those assets. We think that's super cool.
01:03:50.014 - 01:04:27.682, Speaker C: The other one is one of the reasons we're here at this hackathon is NFTs can own Lens profiles. So this NFT owns a lens profile? And that means this NFT can post on Lens. It's got its own social profile that goes wherever the NFT owns, wherever the NFT goes. So if I sell this NFT, the new owner automatically gets the Lens profile and can keep posting from it. So some really cool use cases around NFTs can now become identities in a social context. They can chat with each other, they can use Lens, they can use other decentralized social protocols. And really by giving an NFT a wallet, which is the core of all of this, you let an NFT do all of the same things that you can already do as a Web Three user.
01:04:27.682 - 01:04:45.550, Speaker C: So if you can do it, your NFT can do it now. And that's pretty powerful. I think that's all the time we've got. Thank you so much, you guys. Yes. There's going to be some really cool stuff around. What if your NFT is powered by AI?
01:04:45.630 - 01:04:48.740, Speaker B: Yeah. All right.
01:05:05.470 - 01:06:48.896, Speaker A: Ram Jam. Om. Sam Test.
01:06:48.998 - 01:06:49.680, Speaker C: Whoa.
01:06:50.340 - 01:06:51.090, Speaker E: Hey.
01:06:53.780 - 01:07:24.924, Speaker H: I figure I'll just get started so that we can keep the time here. Thanks for having me. My name is Matt. We're going to be talking about building community in Web Three today. I guess I don't need to come up on the mic, so I want to give you guys a background about me. I just want to make sure can everyone hear me cool. Thanks for having me.
01:07:24.924 - 01:07:37.312, Speaker H: ETH Global. And hello to everyone at home. Thanks for listening in and tuning in. My name is Matt Kay. I go by crypto. Matt Kay. A little bit of background about me.
01:07:37.312 - 01:08:04.230, Speaker H: I've been in crypto marketing for about two years now. I'm a social media manager and a digital community builder. I'm also an AI nerd, and you guys may or may not have seen me around at some of the Ethereum events. I DJ them sometimes. I'm also a core member of the ETH Warsaw team. I run socials for them and help them with their marketing efforts. That's my handles right there, cryptomat K.
01:08:04.230 - 01:08:33.730, Speaker H: So to give you some background, my path, I started working for Forge. It used to be called Bondley finance. I've taken their community from about 20,000 followers to 60,000 Twitter followers in the six months that I was there. This is during, like, the 2021 bull market. We pushed around $5 million in NFT sales. That was about 25,000 NFTs sold at Mint. So that's before secondary market sales.
01:08:33.730 - 01:09:04.110, Speaker H: I ran projects for Tory Lanes. It's a rapper, in case anyone doesn't know. Logan Paul and Lewis Capaldi. Then I switched over to TrueFi. At Truefy, I joined the company when they had about 20,000 Twitter followers and grew the account to about 87,000 Twitter followers. When I joined, there was about 3000 Discord members. And then by the time my time ended there, we were at around 25,000 Discord members.
01:09:04.110 - 01:09:46.884, Speaker H: Throughout last year, I also helped bring over 5000 people to our in person events that we hosted around the globe. So these are kind of the three topics that I want all of you to walk away with. Understanding the importance of building community in Web Three. One of them, being Community is a pillar to project success. Community is web three marketing. And I'll go into that to kind of give you all an understanding of how marketing used to be and where we're at now and where we'll be in the future, as well as understanding that persistence is key. A lot of people think that you come in, community is just built overnight.
01:09:46.884 - 01:10:28.544, Speaker H: But the reality is this takes like, three to six months, nine months to actually implement and execute a proper plan. So I want to kind of introduce and start us off with explaining the good. So what does it look like when a good attempt at Community happens? So the Logan Paul NFT sale is a very great example. Does anyone know who Logan Paul is in here? Do you guys just want to raise your hand? Let me know. Do you guys know who Logan Paul is? Okay, so this guy clearly, as you guys know, has a very active community online. He's a YouTube influencer. He is like super hype on Pokemon.
01:10:28.544 - 01:11:11.828, Speaker H: So during this time, we helped sell NFTs around his Pokemon release launch. And so he kind of went in and allowed people to come visit him and open the box with him. And they made a bunch of content around that after this sale. So that is what it looks like when Community is good and dialed in and there's proper implementation there. Another one is Tory Lanes. If you guys don't know who Tory Lanez is, he's a rapper, independent music artist out of the US. Helped launch an NFT sale where he sold something like a million copies of his digital album as an NFT for one dollars.
01:11:11.828 - 01:11:30.730, Speaker H: So in like 90 seconds, he sold over a million copies of his digital album, generating like a million sales and a million dollars of revenue. So what does that mean? He ended up getting like a couple of awards after that. So these are really great examples of what proper community execution looks like.
01:11:33.180 - 01:11:33.592, Speaker B: Now.
01:11:33.646 - 01:12:08.692, Speaker H: This stuff is the bad. So this is like the opposite end of the spectrum, right? So as someone that works in Community, I've been a community moderator, I've been a community manager. It really sucks to get messages like this. This is during times of low sentiment, during times of low volume. This is when you are engaging with your community, but there's nothing being rolled out from the product and engineering side. This is like when morale is really low and you start to lose faith in what you're doing. As folks in Community, we're all here.
01:12:08.692 - 01:12:55.860, Speaker H: And whether you guys realize it or not, ETH Global Ethereum is a community as well. And we're here to kind of help each other grow through these efforts of the Hackathon, for instance. Right? So this is kind of the negative aspects when things are down and it's really tough to get out of this situation. I've been here before. It's not fun and it takes a lot of grinding and really being persistent and present to show the community that you're not going anywhere to kind of dig yourself out of this hole. So this is kind of a slide on Breaking It Down how to build Community within web Three. First, you want to define your community.
01:12:55.860 - 01:14:11.260, Speaker H: I'll show you guys the spaces model in the next slide and kind of unpackage that before we go into steps two, three and four. Here is the spaces model. This is by David Spinks. He's one of the most well known creators in the community space since it became kind of like a thing in web two. He kind of put together this spaces model where if you're someone that works in community and you want to show KPIs to your business leaders at your organization, this is the direction that you want to take your program in from the inception. A lot of companies have one to three of these in their growth implementation models, and you want to kind of prioritize each one of these avenues one at a time because if you do too much, you have a team that gets burnt out. You can't report proper results, and then it kind of just leaves everyone frustrated and wondering what went wrong, right? So if you take a look at this slide, this is kind of what the current landscape of community looks like within the spaces model.
01:14:11.260 - 01:15:08.380, Speaker H: As organizations implement each one of those layers, you'll see that the top three are pretty much support. So that's kind of like customer support, external engagement. Those are folks that are actually empowered and confident and have faith in, let's say, the protocol or what the technology is internally, and they help adapt techniques to approach folks that are outside of the organization. Success is that last kind of important pillar that folks lean into from the spaces model. And that kind of shows you have tried out certain campaigns, you've seen what the results are and you're tweaking them moving forward to kind of reproduce better results in the future. So we're in web three. I made this meme.
01:15:08.380 - 01:15:19.788, Speaker H: All of you guys are devs. I'm a community guy. I'm a marketing guy. Like, none of y'all want to be approached by targeted ads. Like, that doesn't look good. No one likes that. It's annoying.
01:15:19.788 - 01:17:04.900, Speaker H: So you guys can read past that, right? Like, you can just go and check out the code and read through all of the nonsense that the ad is telling you. So you want to be part of a group that helps foster ecosystem growth, and you have like minded folks that you could talk to about the technology versus being hit by the ad, right? So moving on, this is kind of like what it looks like from a business perspective as well as a user lifestyle perspective on how to implement a community growth plan. And you want to start off by cultivating community through Discord Telegram, Twitter. As you all know, everyone loves memes. The recent meme coin season has been out of control, and you guys see how much engagement that produces on socials that catches your eye. That's a way to kind of sell what you're building as a community within your organization, right? So once you join, once you got kind of pulled in by this outreach and you're within the system, you're like, okay, what do I do now? So people need to educate you internally, and they can do that through a light paper, blogs, videos, AMAs are a great way to foster engagement and education within a community. This helps people kind of sit in a room together like we are today, and learn about what the technology is, what your value add is to the ecosystem.
01:17:04.900 - 01:17:50.470, Speaker H: Later on, as you get educated and empowered, you kind of enter this adaption curve where more users and builders join the protocol. And then it kind of starts to have that yield curve where you kind of hockey stick up. And that takes time. I mean, this is like we're talking about months to years now just to get to this adoption curve. Once you get to credibility, that's when you start really focusing on press releases, partnerships with bigger communities. You can bring on influencers during this time as well as proper team leadership. So that means hiring folks from Web Two that are veterans in DFI or like, Wall Street veterans for a DFI protocol, stuff like that.
01:17:50.470 - 01:18:27.738, Speaker H: Eventually you get to the build phase, which is, hey, we had V One. That was dope, we crushed it. Let's implement V Two and let's execute on this model now. And then you kind of start that cycle all over again because more and more people start joining, and then you engage with them to push them through the lifecycle of a community member. So circling back to the three topics that I want you all to walk away with ZK Sync. I guess I'll start asking, who knows ZK Sync in here? Are you guys aware?
01:18:27.834 - 01:18:28.142, Speaker F: Yeah.
01:18:28.196 - 01:19:37.540, Speaker H: So ZK Sync layer two scaling solution uses zero knowledge proofs to push faster and cheaper transactions, right? They've been really present as leaders in the space for over a year now, constantly doing spaces on Twitter, constantly doing AMAs on Discord, hosting town halls, pushing product and engineering updates. Now they just launched, I think it was like a month or two ago that they're on main net. I'm pretty sure it was last month. And within 30 days, I think it was even like 15 days, they went from zero to 100 million total value locked within their ZK Sync network. And I mean, that is without a doubt a tail sign of what it looks like when you've been building for months, even years at a time to have this sort of metric to share with the ethereum ecosystem. Number two that I wanted to point out here is Qui network. Does anyone in here know quiet? They're relatively new, so I wouldn't be so you do.
01:19:37.540 - 01:20:38.134, Speaker H: So smaller percentage of the room knows about quiet. But I met the quiet guys at ETH Denver, and they are an L One that claims to be pushing like 50,000 transactions per second. So we all know that L One competition is very stiff out there. We all know that L ones are not as popular as they used to be. But quiet is all over the place, and they're present because in their Tokenomics model, they've actually built out a portion of their future token AirDrop and Token release to be distributed to folks that help them with the marketing efforts for the L One Network. That is something that hypes people up. It lets people feel bounded to and invested in something that is to be in the future.
01:20:38.134 - 01:21:27.618, Speaker H: And I've seen Quie's social media engagement as well as they have different hashtags for different projects, that they're pushing different efforts. And it's insane to see how the community is so engaged and so active to pound the pavement and let the world know that Quiet Network exists. It's going to be really cool. Keep your eyes out about quiet network. It's going to be cool to see where they go in like six months to twelve months from now when they eventually head over to Mainnet. So this is the second pillar that I want, and in my opinion, this is like the most important pillar of this talk because I want you all to leave. Understanding that community is marketing.
01:21:27.618 - 01:22:33.706, Speaker H: It's marketing in the sense that social media is incorporated into this, press is incorporated into this, but also presence. And I think that when folks think about marketing, they initially go to Web Two marketing and how things were built back in the day where you get hit by targeted ads and newsletters and stuff like that. Nowadays in web Three, we're doing stuff like what I did for True Phi. This NFT project helped create like 120,000 emails for us. We had about 13,000 people mint this NFT. It took our Twitter followers from like 40,000 to 87,000 Twitter followers, and our discord grew twice from 12,000 to like 25,000 members. And so what I want to ask you guys to think about is what did we do with these folks afterwards? I guess I'll pause here now that I've spoken about the kind of implementation model.
01:22:33.706 - 01:22:47.870, Speaker H: If you think you mint this NFT and now all of a sudden you have it, you're excited about TrueFi, but you don't really know what it is. What do you guys think we did to kind of help foster them and educate them? Does anyone have any ideas?
01:22:48.370 - 01:22:50.080, Speaker B: I'll take like a break here.
01:22:51.510 - 01:23:42.658, Speaker H: So it could have been something like doing AMAs with them, pushing blog posts, hosting kind of live events digitally so that they can come in and ask us questions about what we were doing. TruFi, by the way, is a decentralized lending protocol. And so the NFT had water flowing in and out of it, and that's kind of like what represented the liquidity that enters and leaves the protocol. So through AMAs and spaces, we were able to educate them on what we were doing. Eventually we took them through the lifecycle and they became contributing Dao members and token holders. So that's kind of another good lesson learned around community building. Now this is an NFT project.
01:23:42.658 - 01:24:34.020, Speaker H: I know my guy. Before me was covering NFTs. I think this is a really good example of one of the three kind of legs of a table of community building in web three. Persistence is key. These guys that are in this NFT project, I see them as like the builders of web three right now within the NFT space. These are folks that may not have made their financial gains or whatever in web three yet, but they're all there tinkering and building and pushing the ecosystem to grow more. I've actually met a lot of other marketing folks and VCs through this community that I'm now doing work with to help build their portfolios out and kind of scale their marketing efforts up.
01:24:34.020 - 01:25:29.860, Speaker H: The reason I add them as the persistence leg here is that they almost died. They had their rise up and then the NFT market crashed, the crypto market crashed and they almost went to zero. But through folks literally showing up every day and grinding and creating different narratives to show like, hey, we're still here, just buy a seal, you coward. Is kind of like what they say. But eventually they got the seal of approval from the ethereum NFT community and now they're kind of back to a nice and reasonable sustainable level. This is another thing, they created this, you guys will see, I'm sure, where a lot of NFT folks, this is my seal, by the way. But they have this meme generator where it pushes unique user assets so that you can kind of create your own content online.
01:25:29.860 - 01:26:28.150, Speaker H: And these are some examples of what that looks like. I want to explain what some tools are for building community in web three. You guys saw that NFT by TrueFi earlier that I was describing, galaxy is the organization that helped power that effort. So what we did was we launched the NFT on Galaxy's platform and through leveraging the two communities, we were able to amplify the noise that we had during that campaign. Zeali is another tool that helps drive growth and engagement. NFT Inspect. If any of y'all are in NFTs, you can use NFT Inspect to kind of compare and contrast different metrics across projects.
01:26:28.150 - 01:26:56.190, Speaker H: Quest is kind of similar to Galaxy quest and Galaxy. You kind of need to complete different steps, different credentials to earn the experience that's at the end of the road. There lens is here. They have a table lens. This is pretty much web three social media. It's like the Facebook of web three, I like to say. Then we also have super spaces that help supercharge your Twitter spaces.
01:26:56.190 - 01:27:32.380, Speaker H: And then you all know discord, telegram and twitter. I would consider those like your base layer tools for building community in web three. That's where your main communication channels are now. Food for thought. I kind of want you guys to leave here also understanding, like, we're in this space where we're doing community based engagement because we're so early. People want to feel like they're part of something bigger than themselves. And that's another reason why we're all here, because we want to build the next best thing and bring that to the ethereum ecosystem to keep expanding this.
01:27:32.380 - 01:28:45.490, Speaker H: The plumbing doesn't exist like it does in Web Two. If you want to go, for instance and change your euro to dollars on your revolute or whatever, the button that you press to create that exchange to sell off your euro and buy dollars doesn't exist in Web Three yet. And that's why we're really clunky and that's why we haven't really reached mass adoption yet. So I'm curious and I think you guys all can think about this as you leave this talk to think what does the future of Web Three marketing look like? Is it going to be focused primarily on this community building aspect or will it grow to shrink into a smaller community building aspect where we focus more on user based marketing because we have all of the elements and the plumbing required to make it user friendly versus the way it is right now. Wrapping it up. The three topics that I want you guys to understand from this conversation is community building is a key pillar of growth. Community is web three marketing.
01:28:45.490 - 01:29:25.470, Speaker H: It is one of the foundational legs of the table that is Web Three marketing. I think without it, you don't have a product or a company rather. And persistence is key. This doesn't happen overnight. You have to grind to make this a reality and you need to have a plan over a six to nine to twelve month kind of period of time in order to see this growth happen. So once again, there's my information. My Twitter is at Cryptomat K, I'm at Cryptomat K on Telegram and thanks for having me guys.
01:29:25.470 - 01:29:40.580, Speaker H: Really appreciate the time. If anyone has questions, my time is at the top of the hour, but I'd be happy to take yours, sir.
01:29:42.170 - 01:29:57.180, Speaker F: Many of us here run how beneficial it is versus when people figure out.
01:29:59.790 - 01:30:42.694, Speaker H: So the question is an AI chat bot within your project? I guess within the Telegram channel, right? So my thoughts on chat bots are do it. They're only getting better transparently. This whole slideshow was made by AI, so I'm a huge advocate for AI. I use Chat GPT for my work almost every day. I use Mid Journey to create all the graphics that you guys have seen here. Use the bot, you don't have funding like major VC companies do. Implement it and use it as a means of creating a funnel for yourself.
01:30:42.694 - 01:30:55.500, Speaker H: As folks kind of break through that barrier to get to a human. You're saving a lot of time and resources by doing that. So I think in the stage where you're at, I would highly recommend you lean into it.
01:30:56.770 - 01:30:57.840, Speaker E: Anyone else?
01:30:58.450 - 01:30:59.440, Speaker A: What's up?
01:31:00.290 - 01:31:07.600, Speaker B: It makes perfect sense for everyone in this framework like Web Two have you done a presentation similar to this.
01:31:09.250 - 01:31:11.374, Speaker A: I always struggle to make Web Two.
01:31:11.412 - 01:31:17.666, Speaker B: Companies, and the easiest way I send is basically saying direct marketing. Take your marketing budget, give it to me, and I'll AirDrop them something and.
01:31:17.688 - 01:31:19.314, Speaker A: You can skip everything in between.
01:31:19.512 - 01:31:24.760, Speaker B: I'm just wondering how the framework works or where you are.
01:31:26.490 - 01:32:13.202, Speaker H: So where am I? Transparently. This is my first talk, and I haven't even spoken to Web Two. I haven't even thought of doing that. I'd be curious personally to see what that looks like because it's a completely different conversation. And I think that just thinking about this in real time, I would focus on kind of what they're doing and then just explaining to them what this is, what I just explained to you guys and why it's important in order to create, like, a bridge. There was a talk that I sat in on where we're actually as marketers looking to withdraw from crypto native, because eventually you're going to hit a wall and then you're going to be like, all right, well, I have as big of a market share as I can. How do I get more users? And that is by going and talking to the Web Two folks.
01:32:13.202 - 01:32:33.610, Speaker H: So consider this the beginning of something and it's going to get fine tuned as we move forward here. Yeah, man. Any other questions? Sweet. Thanks guys so much. I really appreciate the time and I hope you guys have a great hackathon.
01:32:50.620 - 01:34:56.200, Speaker A: It's Sam. Sam. Sam. Sam.
01:35:33.760 - 01:36:13.240, Speaker F: Hi. Sorry for interrupting the break. So, my name is Miguel. I'm going to talk about developer experience, something that I've been building for the past couple of months kind of as a side project. So, first of all, even though it started as a side project, I need to thank my employee, Lightshift Capital, and also people from subvisual that were helping me along the way and giving me time and resources to be able to do this kind of thing. So with that out of the way, let me get to it. So I come from a web development background.
01:36:13.240 - 01:37:03.008, Speaker F: This is kind of an illustration of one of the most important concepts I learned there about this red green refactor cycle and about the feedback loops that you the quick feedback loops that you need to get in order to do good TDD. Just by show of hands, I'm assuming most people here are hackers of some sort. Either experience, junior, seniors, doesn't matter. Okay, good. So, yeah, I learned a lot of stuff like this from web developments. I used to work in Ruby, unrails elixir, then rest more towards the end. And all of those ecosystems had something in common that I don't really find in Ethereum about the developer experience, which is that the tools are usually a lot nicer to use, especially for beginners.
01:37:03.008 - 01:38:13.452, Speaker F: If you're an expert and you can read EVM bytecode at breakfast, it's probably not a pain for you but for beginners or for people that are on the sidelines of Ethereum, like front end developers that don't write smart contracts but still need to interact with them. There's a lot of things that I found along the way that small things that kind of build up and make the experience a bit painful for me to build and for even to teach newcomers in the space. And the way I started this whole research and work was actually something kind of stupid. I'm not sure if anyone, depending on what you do for a living, if you recognize any of the issues on either of these screenshots. So, yeah, I use a lot MetaMask for development. Often I'm writing smart contracts and doing some front end work at the same time and I use Envil Organ or that sort of thing. I already learned from speaking at people here at the Hackathon that a lot of people don't use local nets that just deploy to sepoli or Gorli and so on, which is just going to increase that feedback loop and make it harder to iterate on stuff.
01:38:13.452 - 01:38:58.170, Speaker F: But yeah. So the first thing is I think the biggest pain in the butt for me, which is when I'm iterating on smart contracts and the UI at the same time, I'm going to do some quick fix on smart contracts going back to the UI, testing the transaction again, and it doesn't work. Why? Because to redeploy the smart contract, I needed to restart envil trigger the redeploy. MetaMask doesn't know that it still tries to submit transaction with the nons from the state it had before. It doesn't know that it should go back to zero. I need to go to the settings, reset that manually. It's a small thing that bothered me, like every ten times a minute when I'm doing some quick change.
01:38:58.170 - 01:39:38.730, Speaker F: And then the other is something that happens if I close my browser on my laptop and then I open it back up and I start MetaMask. But it was connected to Anvil. Anvil is not live anymore and MetaMask doesn't even let me input the password and sometimes I need to start envel just to get MetaMask going. Yeah, so these are two small things that kind of started me after this. I literally went into the MetaMask code base. I started reading maybe I could fix these things with a small pull request. That was kind of naive because the MetaMask code base is too big and with a lot of hands involved, it's not like I was going to learn how to touch on it in a couple of days, but then I got to learn how MetaMask works.
01:39:38.730 - 01:40:30.804, Speaker F: It was kind of magic for me the way the extension would communicate to the pages, and I ended up learning a lot about how that worked. That's mainly on EIP 1193, which specifies a lot of how window ethereum works, how the web page connects to your browser and. Vice versa. There's a lot of other IPS for other parts of the RPC API, but this is one of the main ones. And through this research and talking with other people and brainstorming I kind of remembered a few other bigger pains, I guess, or not pains, but things that are kind of technical depth that there's reasons for those things to be the way they are but they still could be improved. So for example on MetaMask you're connected to one account, to one chain. When I'm developing what I would want ideally is if it's on local hosts I want to use my test account or Mnemonic.
01:40:30.804 - 01:41:11.620, Speaker F: If I'm on a regular website connected to mainnet, maybe I want to use my real wallet. But on MetaMask I need to switch between the two back and forth. If I'm developing it switches globally to my development account. And same thing for network I'm either connected to Anvil or to mainnet. I can't be connected to both depending on which website I'm working on. There's security reasons, there's scalability reasons for these things to exist but still they're a pain for our side. And the main thing after reading this EIP and noticing and others and noticing how it's a bit not necessarily incomplete but it's old, maybe a bit outdated in some things.
01:41:11.620 - 01:41:55.604, Speaker F: It was built mostly by MetaMask, for MetaMask because it's what existed at the time and as a result they then iterated and implemented some new endpoints that are actually not part of the RPC. And then Rainbowkit comes in and depends on those endpoints. So the spec is no longer being followed fully. Which means that you don't actually get a connect with an EIP compatible wallet. You just get a connect with MetaMask button that assumes that window Ethereum is MetaMask when in reality it should just be a generic thing. So other than MetaMask, just a quick rundown of some of the tooling that I use. And this is by no means exhaustive, but a lot of the things that I use day to day.
01:41:55.604 - 01:42:36.928, Speaker F: So Foundry does a lot of great things. It allows me to impersonate accounts, create forks, snapshots and a lot of cool stuff. Of course see the scan to maybe browse for Live Smart contracts and interact with Dbis tenderly. If I want to simulate some transactions. Then there's this impersonator XYZ, which I think a lot of people don't know but it's really cool. It creates a fake wallet connection and it allows you to see any mainnet websites as if you were vitalik or any other address. In Ethereum, obviously you can't sign transactions, you still don't have the private key but you can see the UI states and interact with the site as if it were someone else.
01:42:36.928 - 01:43:21.890, Speaker F: For QA, for Debugging, this is really useful. Then there's public databases, public APIs that you can use to feed information like the Ethereum Database signatures. Ethereum Signatures Database sorry, what do these things have in common. So a lot of these things are either CLI tools that you kind of need if you're not actually a solidity developer, but more of this kind of front end developer. Maybe you're not aware of those tools or you don't know how to use them properly. Others are web tools that exist online and that are connected to livenets only. So if you're running your local stuff on Android for fast development cycles, you don't have access to those, like tenderly and impersonator, for example.
01:43:21.890 - 01:44:07.576, Speaker F: And so all this research and all these small frustrations and talking to other people, it led me to, ironically, to this thing where I'm frustrated with the current standard. So I decided to build my own. And right now the way that that's materialized is that I ended up not fixing MetaMask but essentially building my own wallet. As I was learning how MetaMask was working that communication between the tabs and the extension and so on, I noticed a few other things that could be improved, at least for developers. That's the thing I'm focusing on right now, making the development experience a lot better. But there are some things that, at least in theory, could be useful for users as well. So what's this? Iron wallet.
01:44:07.576 - 01:44:45.720, Speaker F: So right now it's an attempt at being a drop in MetaMask replacement. What this means is that there's still an extension. The Iron Wallet itself is a desktop app, but there's still an extension to handle that communication. But the extension just sits there idle. You don't interact with it. It's drop in in the sense that any site that has a connect with MetaMask button, the Iron Wallet will fool it, and the website will think that it's interacting with MetaMask because it supports the exact same RPC API and so on. So it should just work smoothly, of course, still work in progress, no promises.
01:44:45.720 - 01:45:17.792, Speaker F: And the main things I was focusing at the start was just the developer experience. So first of all, it's anvil aware. It knows if you're connected to an anvil node if you're just developing something. And in that case, it does some additional things already. First of all, that non reset thing that I was talking about earlier, it doesn't happen at least on anvil because it detects that anvil was restarted. It resyncs all the states right away. I'm going to show that in a minute also because this is right now targeting just development.
01:45:17.792 - 01:45:49.024, Speaker F: I don't care about passwords or encryption, just using the test mnemonic, the one that's usually publicly available. Of course it's not safe for real private keys. But the advantage is that I don't get that annoying pop up every time I need to do a transaction. If I'm testing a smart contract, I don't need to worry about checking what the gas fees are or rechecking my transaction. I just want to click things fast and iterate quickly. And then some built in devtooling, which is more generic. But these are the things that I'm working on right now.
01:45:49.024 - 01:46:35.996, Speaker F: I'm going to work in the future. And that actually I'm here in the hackathon trying to do some of those. Maybe some of these will materialize into an actual wallet for end users. But right now, that's not anywhere near my radar. So things that I'm thinking about, both for developers and for users that could be useful and that these are work in progress, not yet supported, but in the works. So, first of all, it doesn't have to be restricted to a single chain, a single account at a time. I'm able to keep track of which tabs are connected to the extension and allow the user or the developer to configure which tabs he wants connected to which chain, based on maybe the domain name.
01:46:35.996 - 01:47:17.704, Speaker F: Maybe I want localhost to Anvil and everything else to mainnet, something like that. Some rules around that, being able to use multiple mnemonics instead of being restricted to just one. Or if you're like me, you have like five chrome profiles with five different private keys. Transaction simulation and inspection, because I mentioned tenderly and impersonator. Those things you can do use on mainnet, but locally you have anvil, but you can use anvil on foundry tests or through the CLI. There's no way to write, at least that I'm aware of right now, to use it in a wallet. As a non EVM solidity developer, I would say smart contract interaction.
01:47:17.704 - 01:48:13.980, Speaker F: So if you're interacting with smart contracts, it's usually very useful to have some kind of a built in Etherscan contracts page for reading and writing smart contracts without having to implement the UI for each one of those yourself. Because those things are there's an Avi, we can just programmatically build a UI around that. And then this may be just my opinion, but the fact that it's not sandboxed to a browser also makes this a lot more beneficial. There's access to a lot of other features of the operating system that can be useful. Opens up a lot of doors about where can we store the private key, in what format, maybe in multiple formats. Maybe they're in the cloud or in some other external device. And then this again, pet peeve and probably a very niche thing, but I use a Tiling window manager, and those MetaMask pop ups on my computer just mess up my entire workspace.
01:48:13.980 - 01:48:33.780, Speaker F: But maybe that's just me. So, yeah, now demo time. If it works, if I can get to that screen. No.
01:48:35.910 - 01:48:36.660, Speaker C: Okay.
01:48:40.840 - 01:49:04.268, Speaker F: This is very hacky. Yeah, I can't clone the screen here. So this is what I'll have to do. So what I have here, that's a generic NFT Collection thing that I implemented a long time ago just to test things out. It's running that. It's a NextJS app. It's all running locally with angel and so on.
01:49:04.268 - 01:49:45.518, Speaker F: This is the wallet that's also running locally, but it's a desktop app. It's not an extension, even though, as I said, there's an extension. Yeah, I need to refresh this, probably. Okay, so there we go. So just to prove that it's working, this is the current UI for the wallet, where you have the same thing as MetaMask, like account selection, network selection. It propagates that to all the tabs. But already because on MetaMask, every time you do that through a website, the MetaMask pop up, asks you to confirm, et cetera, et cetera.
01:49:45.518 - 01:50:44.006, Speaker F: Right now, I don't care about that, so it just switches automatically. There's also this Connections tab which shows which tabs are connected to it, which you can see it updates in real time. The work that's not yet done is to be able to select some of these tabs or by domain or something like that, and override which network those are connected to. And I can submit transactions. And because this is Anvil, and because this doesn't have that whole confirmation screen, it's still estimating the gas. But that's all on Anvil, you can see that just the fact that I'm clicking things and I'm literally minting NFTs a lot faster than I would with MetaMask and other wallets. And the other nice thing about it is that now if I come here and I restart the server, that's server Foundry, all the stack that's powering that website, and I restart it.
01:50:44.006 - 01:51:07.360, Speaker F: Now, in MetaMask, this would be the moment where the nonce wouldn't allow me to just mint. But here that all works right off the bat. Yeah. Again, we can see transactions here right now, no more details. It's also tracking balances of both Eats and DRC 20. Right now, that doesn't exist. The Contracts tab is where those interactions that I mentioned through the API will be.
01:51:07.360 - 01:51:40.920, Speaker F: But this UI is not. I'm not married to this. It's just your basic tailwind UI. So the initial focus was to get this to this state where it's already kind of useful, or useful if you're just developing contracts and just need a wallet to submit transactions. And none of those fancy features, just the speed. And now this akaton. And in the future, it's when I'm going to be working on all those other development nice features that I mentioned before.
01:51:40.920 - 01:51:53.420, Speaker F: And because I think I went pretty fast, I have time for questions, I guess. Yep. Yeah. Problem where.
01:51:56.750 - 01:51:58.922, Speaker C: I set up dual sign.
01:51:58.976 - 01:51:59.580, Speaker F: Up.
01:52:03.890 - 01:52:06.030, Speaker B: Basically let a master.
01:52:08.680 - 01:52:10.228, Speaker F: Sign up Wallet Connect.
01:52:10.314 - 01:52:10.950, Speaker G: What.
01:52:25.120 - 01:53:16.312, Speaker F: Wallet not all, but well, I don't know about this. Yeah, and if you keep the question starting so you're saying you have both MetaMask and Wallet Connect, and sometimes the page you're using gets confused about which of the two it's supposed to use. Okay, yeah. You sign up with Wallet Connect, and then Ethers thinks it's supposed to go to MetaMask. So I never had that use case myself. So I don't know what specific bug that is, but I did come across not in Ethersjs, but once in Rainbowkit and some other SDKs, that there's some specific nuances about how they connect to the wallet.
01:53:16.376 - 01:53:16.990, Speaker A: Where?
01:53:18.000 - 01:53:44.990, Speaker F: As I said before they assume that if window ethereum is there, then it's MetaMask. And if it's not MetaMask, they will get confused about it as well. About wallet connect. Yeah, I don't know. I would have to try it, but it's probably something worth checking out and fixing somewhere. Well, I think I know a guy who knows a guy, but no promises.
01:53:56.210 - 01:53:57.920, Speaker B: And I really like this.
01:54:05.790 - 01:54:59.850, Speaker F: Well, so you shouldn't be making a DAP for Iron Wallet. You should be making an app for an EIP 1193 compatible wallet in theory. So, yeah, right now, probably there's some component of the spec that I haven't implemented that I missed. But the idea is that this would either completely implement the spec without adding any additional endpoints that you would rely on. It's just all the RPC endpoints that are specked out. If there's some limitation in those that makes some feature not work correctly, and maybe MetaMask and Wallet Connect both do something that is not part of the spec, then it should be part of the spec. Essentially, whatever DAP you create shouldn't be tied to a specific wallet.
01:54:59.850 - 01:55:23.000, Speaker F: It should be tied to those specs and every wallet should implement those. So guess that's it. Thank you.
01:55:44.930 - 02:04:00.590, Speaker A: Sam one sam don't ow nam sam and Sam. It Sam SA. It's SA.
02:05:43.930 - 02:06:26.700, Speaker I: Hi, my name is Sarah Schwartz, and I'm a developer relations engineer at Fuel Labs. And today we're going to do a workshop to walk you through how to build a fuel stack DAP on Fuel. So really quickly, what is Fuel? Fuel is a modular execution layer. So it means you can execute on Fuel and settle on any other L one like Ethereum, and it uses the Fuel VM set of the EVM and it has a UTXO model which allows for parallel transaction execution. Some quick terminology about fuel. When I say Fuel, I'm referring to the fuel blockchain or network. Sway is our Rust based, domain specific language that we're going to be writing our smart contract with.
02:06:26.700 - 02:07:10.338, Speaker I: Fork stands for Fuel Orchestrator and it's essentially like Cargo for Rust or NPM for Node. FuelUp is the toolchain manager that will install Fork and the Fuel node software on your machine. And then Fuels is the SDKs. There's a rest and TypeScript SDK that you can use to interact with Fuel. So really quickly comparing EVM to SVM or Fuel VM So EVM, you're writing your contracts in Solidity. You're probably using some sort of development framework like Hard Hat or Foundry. You're probably using ethers JS or Web three JS for your SDKs to interact with your contract.
02:07:10.338 - 02:07:32.970, Speaker I: And for the indexer, you might build your custom indexer. You might use something like the Graph. And basically these are all sort of independently managed tools that you have to sort of plug and play. Get them all working together versus Fuel. Everything is built in house, like all the aspects of your application. So sway is by language. Fuel up is sort of like tool chain manager.
02:07:32.970 - 02:08:15.106, Speaker I: We have our own rest and TypeScript SDKs and our own indexer system. And Solidity is really like the OG language for the EVM. It's been there for us for a lot of cool stuff, but it can also be like a minefield for vulnerabilities. It can be really tricky to feel confident that your contract is not going to get hacked and there's just sort of a lot of environmental things that you just have to know about Solidity versus Sway. It's rust based. So if you're familiar with Rust at all, you'll know that the compiler in Rust is really helpful because it will tell you exactly where all of your errors are. And we have the same sort of thing going on with Sway.
02:08:15.106 - 02:08:58.138, Speaker I: We have our own compiler that will give you really detailed error messages and also warn you if you possibly have a reentry vulnerability. So it's really built with lessons learned from Solidity in mind and designed for really good developer experience. So the dependencies you'll need to build with Fuel is first you'll need the Rust toolchain and you'll also need Fuel Up. So I can show you how to install fuel up. So you can find this on our GitHub. Fuel labs. Is our GitHub name FuelUp? And we also have a book.
02:08:58.138 - 02:10:28.576, Speaker I: If you go to install Fuel network latest, you'll find these instructions and basically to install Fuel Up, it's this one really simple command here and it should modify your path for you. So it's just one step and then once you have that installed, you should be able to use this like Fuel Up show command to see all of your tool chains installed. So right now I have the beta three tool chain set as my default and these are essentially like different versions, so we have different testnets that associate to the different versions. So right now beta three is our latest testnet and to develop and deploy on the beta three testnet you need to use the beta three tool chain. So I'm going to make a new project and go to my desktop and let's make a new folder called Sway demo, actually just called Sway Oops and go into that folder and we're going to use the fork command to create a new project. So it's fork new and then we can just call this contract, you can call it whatever you want. So I'm going to open this up in Vs code and here is what the template contract looks like.
02:10:28.576 - 02:11:12.492, Speaker I: So it's really simple. There's the getting nor file, there's this fork TOML file which is essentially like configuration or manifest file. And then here's our contract main Sway. And the first line of all contracts in Sway start with this contract keyword and this is because there's different program types in Sway. So there's something called Predicates, which are essentially like functions that evaluate to true or false. There are scripts, there's libraries, and then there's contracts, which I'm guessing you're familiar with already. And one different thing that Sway has, that Solidity doesn't is you have to define your own Abi here.
02:11:12.492 - 02:11:48.824, Speaker I: So this is the name of the contract, my contract, and we can change this to whatever we want. So I can call this game. And then we have one function here, it's called Test function, and it returns a boolean. And then below is where we actually implement the logic for the functions that we have in the Abi. So essentially the Abi is like an outline for all the functions and their inputs and outputs. And then we implement the logic here. So we're going to implement the game Abi as a contract and we're going to make a really simple game.
02:11:48.824 - 02:12:16.272, Speaker I: It's not going to be too crazy. We're going to create a game and this game is going to have players. So I'm going to create a struct called Player. And if you're not familiar with Rust, a struct is sort of like an object in JavaScript. Essentially. It's just something that has keys and values. So our player can have a level and we have to give it a type here.
02:12:16.272 - 02:12:55.392, Speaker I: So the standard number type in Sway is a U 64. We can say the level is a U 64. And then we might also want to have something like a player type. And we can use an enum for this. So an enum is essentially it stands for enumeration. It's essentially just a list of options. So we could have, let's say, like our enum can be called player type and can say there's one that's like a superhero and the syntax is a little different than Rest if you're familiar with that.
02:12:55.392 - 02:13:41.820, Speaker I: And then we can have like a supervillain or something. So these are just sort of unit types. They're just basically like a blank type. So the player type is either going to be a superhero or a supervillain. All right, so now that we have our players, we want to be able to store them persistently in our contract, right? So we're going to have a function called New Player. So we're going to change the name here sorry, to New Player, and it can return the player struct. And you can see that it's not very happy with me because the API here is not matching the functions in the actual implementation.
02:13:41.820 - 02:13:51.810, Speaker I: So we need to update that new Player. There we go. And True is not a player.
02:13:52.790 - 02:13:53.540, Speaker A: Okay?
02:13:54.070 - 02:14:51.314, Speaker I: So we have this new player here and we function and we know that we're going to want to store the player somewhere. So we'll just add a comment like Store player, store player. So in Solidity you're probably familiar with like persistent you might be familiar with persistent variables in Solidity and know that they can sort of be anywhere in the contract as long as it's outside of the function. But in Sway, we actually have a dedicated storage block. So you know as you're reading this, okay, everything inside the storage block is what's going to be the persistent storage. And I don't have to keep track of is this variable persistent, is this one not? Anything outside the storage block is not persistently stored. So we're going to have all of our players stored here and the type of this is going to be a mapping.
02:14:51.314 - 02:15:42.598, Speaker I: So we have a special type called storage map, and it takes like a generic key and value here and you can initialize it as an empty storage map just like this. And so thinking about the key and values we're going to use here, we're probably going to want to save their address to the actual player. Struct. So another thing that's different about Solidity and Sway is that Sway has two different types to distinguish EOAS or externally owned accounts and contracts. So you can't just use like an address type for contracts. So we have another type that's an enum that's called identity. And an identity can represent either an address or a contract ID.
02:15:42.598 - 02:16:32.524, Speaker I: So here we're saying that we don't care if a contract wants to play this game. If we did care about that and we only wanted EOAS to play the game, we could store this as an address. But just to keep it simple, I'll keep it as identity and we're going to store that to the player. Okay, how do we get the identity in this function? So just like Solidity, we're going to use a message sender. And this is actually going to be a method that we import from our standard library. So like Rust, there's a standard library and it's sort of like if you're familiar with React at all, it's sort of like being able to import use state or use effect from React. Like it's already there.
02:16:32.524 - 02:17:21.464, Speaker I: You just have to explicitly import it and call it. So we can say use standard library. And the message sender function is in this library called Auth message sender. And before we store the player, we can say let sender equals message sender unwrap. And why does it say unwrap is because message sender returns a result type, which means that there is a small potential that it's unable to detect the sender. And that's like for really specific edge cases. So generally you're going to be able to reliably detect the sender, but that's why it's there.
02:17:21.464 - 02:18:08.640, Speaker I: And then we're going to insert it into the storage map so we can say storage. And this is a really important part. So instead of like in Solidity, if you want to call or reference a persistent variable, you just use the name of that variable and you sort of have to keep track. Like, okay, this one's in use already, but with sway, you use the storage keyword and object to access all this. So I can say like, let player equals x and then storage players something else and they won't conflict. So storage players is how we're going to access the players mapping. And then we can use this insert method to insert the identity and player.
02:18:08.640 - 02:19:14.670, Speaker I: So it's going to be the sender and a player, which we haven't made yet. So there are a couple of ways to create a new player. One way we could do is just say let player equals and then use this player struct keyword and sort of like create an object and recreate this right here. Another way is that we can implement associated functions for a struct. So we can sort of use this like object oriented programming method here, say implement player and add a function called new that's going to return itself, which is sort of like this in JavaScript. And essentially we can just say self. The level will start at level one and then player type will be a parameter here.
02:19:15.040 - 02:19:38.480, Speaker A: So player types, player type.
02:19:41.010 - 02:19:42.110, Speaker C: Our variable.
02:19:43.350 - 02:19:48.830, Speaker A: Okay, so now we want to decide.
02:19:48.990 - 02:21:24.840, Speaker I: Whether or not to make our player a superhero or a supervillain. And one thing we can do is decide like, okay, if you're an EOA, you can be a superhero. If you're a contract, you're a supervillain. So we can use a match expression to match the type of sender and see whether or not it's an address or an contract ID. So Sway has exhaustive pattern matching just like Rust, which means that it will detect basically all of the possible options for you and let you know if you haven't addressed some possibility. So the sender, let's see, let's say let the player type equals and it will use this match expression. So if the sender is a type identity of an address or like this, sorry address, the player type is going to be superhero and the contract ID supervillain match type player.
02:21:24.840 - 02:21:50.210, Speaker I: Okay, let's just for the whole function and then to initialize our new player, we can say player equals player new and then pass in that player type. And at the end here we can return the player object and should be happy with us.
02:21:50.900 - 02:21:58.456, Speaker A: Okay, let me spell this righteous.
02:21:58.588 - 02:22:43.408, Speaker I: All right, nice. So there's our new player function. Let's see, what else can we add to this. One really cool feature that Fuel has or Sway has is native tokens or native assets, which means that essentially you can mint tokens in your contract and then send them directly in a call so you don't have to approve and then transfer. You can just directly send tokens. And we have something in our standard library to make this really easy. So we have a token library and you can import this like mint two function and then we can just call that here and mint a bunch of tokens to our player.
02:22:43.408 - 02:23:26.610, Speaker I: So I think we're going to mint one token which the units in sway are basically guay. So 1 billion is one token and we'll send that to the player. Nice. All right, we're going to have one more function here which is level up. So the player starts at level one. But how do we increase that level? We can add a new function here called level up and we'll have it return a U 64, which can be the new level. And this will take a parameter of ref mute self.
02:23:26.610 - 02:24:05.390, Speaker I: And what that means is just a reference to the struct itself and it's mutable. So by default, all variables are constants in sway. So we have to declare this as mutable and we can say self dot level plus equals one and then just return the new self level. All right, so we need to add one more function here that can be called to actually level up. So we'll have to add it to our abi so we can say function is level up. We'll turn to use 64.
02:24:07.680 - 02:24:08.108, Speaker A: And then.
02:24:08.114 - 02:24:49.310, Speaker I: We need to add it down here. And I like to just sort of copy and paste to make sure everything matches and the player oops, sorry, the sender, not the player. There we go. All right. So to level up, we're going to need to grab that player from our storage. So just like this, we're going to get the sender with the message sender function and then we're going to look into storage players to see if we can get this sender. So you can use this get function.
02:24:49.310 - 02:25:56.972, Speaker I: So let player equals storage, players get sender and then we can say player level up and then we have this. So it's already upset at me right now, just because this player should be mutable, we're going to update it and then we're going to reinsert it into the storage mapping to overwrite our previous value. So we can just use the same line right here and then this level up function returns our level. So level was that and return it at the end here. All right. So there's a lot more we could do with this contract. We could also make this function payable and say like, are they sending this token that I just minted them? And essentially how you can do that is in solidity you can just sort of look at the message amount, but in Sway you can see the message amount and the message or sorry, the asset ID being sent because you can send almost any asset.
02:25:56.972 - 02:26:53.910, Speaker I: So essentially you could just add like a require statement, something like this, say require the amount is greater than zero and require that the asset equals the contract ID, the asset ID equals the contract ID and add like a payable annotation. So that's actually one more thing I forgot here is in Sway, functions are pure by default and you have to specifically say when you're. Going to access storage. So right now if I try to compile this, it shouldn't work. Let's see. Yeah, okay, it should say the field thing. Few things here.
02:26:53.910 - 02:27:31.520, Speaker I: So it says storage attribute access mismatch. Oh, sorry, that's a different thing. So basically, essentially storage attribute is this thing right here. I'm going to add it above each function. And so our new player function writes to storage. Our level up function will read and write to storage. And we just have to add these here as well.
02:27:31.520 - 02:28:40.040, Speaker I: Oh, excuse me. We have to add them to our actual functions down here have the same name, storage, read, write and storage write. Okay, let's see if this compiles now. Okay, so again I said insert, let's see, storage type player. Okay, so I forgot one more thing, which is when you're getting something from storage, it returns an option type and an option type is basically it can either have the value that you're looking for or it can return none, which is sort of like null. So we also have to unwrap this as well. Awesome.
02:28:40.040 - 02:29:44.660, Speaker I: The command I'm using is fork build and it created our build file. So I don't have enough time to create a front end for this. But I do have an example I can show you install. Basically this is what our TypeScript front end looks like. Let me start this. So we have our contract ID and you can see the steps to deploy the contract if you go to our developer Quickstart. And we have this fuel wallet like window object.
02:29:44.660 - 02:30:46.132, Speaker I: So we have our own wallet extension and we have this hook to check if it's connected. And basically here's our new player function. So we can use the fuels or fuel window object to get the user's account and then we can use these generated types that we got from our contract to instantiate a connection to our contract with the ID and the wallet as the provider. And then here's calling our new player contract. So we say awaitcontract functions, new player transaction parameters and add variable outputs is one. So this is probably the trickiest thing about this is whenever tokens are sent from the contract to an address, that will affect the UTXOs of the transaction. So we have to specify that tokens will be sent out to an address here or else this call will fail.
02:30:46.132 - 02:31:22.410, Speaker I: And then we just say call and our level up function is basically the same. I actually added like a payable thing here. So we're sending 0.1 of our tokens in the call parameters and I'm basically just console logging this. So I'm going to say make a new Oops. Let's see, this works. I'm on the wrong network.
02:31:22.410 - 02:32:07.020, Speaker I: All right, so beta three testnet, I have funds in my wallet, make a new player and it will show inputs and outputs. And I'm going to receive one of these unknown tokens because I don't have this asset in my wallet yet approve that and should see our player. All right, so here's our new player, the superhero, level one. And we're going to level up real quick. And this is sending 0.1 of our tokens. And we should see the new level in the console.
02:32:07.020 - 02:32:44.712, Speaker I: All right, so now we're level two. Okay, so yeah, that's basically it for how to build a Fuel stacked app. If you're looking for resources, fuel Network is our website. You can find links to our developer Quickstart and all of our documentation here. And then I also have a copy of this contract and front end, we just built on my GitHub Sarah Schwartz swagamedemo. And I'll put up the QR code for that if you want to check out that code. Yeah.
02:32:44.712 - 02:32:45.690, Speaker I: Any questions?
02:32:51.140 - 02:32:53.750, Speaker E: This looks like yeah.
02:33:01.720 - 02:33:42.384, Speaker I: It'S just like Ethereum, sort of whoever deploys the contract, basically. I guess you have to write in an owner. Correct. The question was, if you're calling a contract and storing it using storage, then who's paying for that? It's whoever's calling the contract. Just like ethereum. Yeah. All right, well, if you haven't already, we have a booth downstairs with a ton of T shirts.
02:33:42.384 - 02:33:49.390, Speaker I: Please get a free T shirt. You don't have to fill out a survey or anything. And yeah, come let us know if you have any questions. Thanks.
02:34:26.680 - 02:36:56.780, Speaker A: WAM SA. Sam sam sam ram.
02:37:00.920 - 02:37:02.292, Speaker E: Okay. Hey, guys.
02:37:02.426 - 02:37:03.300, Speaker C: Sweet.
02:37:04.200 - 02:37:41.568, Speaker E: Thank you for showing up to this workshop. I know there are some Ravi tickets going on in the next workshop, so I appreciate you guys taking the time to meet me here. So today what we're going to go over is a quick introduction into what Uniswap is, the Uniswap Foundation specifically, and how we're different, and teaching you parts of our SDK and how to get started building on Uniswap. Before I get started, how many people are familiar with Uniswap here? Okay, cool. How many people have built on Uniswap before? Okay, sweet. So a lot of people familiar? Some new builders. Cool.
02:37:41.568 - 02:38:19.052, Speaker E: So before we get started, a little bit about me. My name is Tylin. I'm the head of developer relations at Uniswap. And if you guys have any issues or any questions about building on top of Uniswap, this is my contact information. Happy to help out with whatever you guys need. Our mission at the Uniswap Foundation for Devrel is to fuel creativity and cultivate a community of empowered and influential developers who are shaping the future of technology. We feel like Uniswap has pushed crypto and DeFi forward, and we believe that the people that build on top of Uniswap will keep on doing the same thing.
02:38:19.052 - 02:39:10.268, Speaker E: So we want to empower you to do that, and we think we have a great community that enables that. Now, what is the Uniswap Foundation? Have you guys heard of the Uniswap Foundation? First of all? Okay, sweet. So for those of you who haven't, we were created almost a year ago and the foundation passed as a governance vote to create a foundation that would be the mainstay and the hold for pushing Uniswap and the protocol forward. In addition to helping out on the developer community side, we also help provide grants. So if you guys are looking to build on top of Uniswap, if you have a great hackathon idea that you want to keep pushing forward after this is done, please connect with me. We do provide grants so that we can help support you even afterwards. We have tons of RFPs as well for things that we're looking for.
02:39:10.268 - 02:39:48.024, Speaker E: We release them every quarter. Our team is here that actually does that as well. So you can ask them what we're looking for also. And we'd be happy to explain some of the workings of the foundation and how we go about doing that. So, to the hackathon, we have this really great resource for people that are new to Uniswap, that are new to building on top of Uniswap. It's called our hacker home. And what we do here is we actually have a page that allows you to go to it, and we have some intro resources to building on top of uniswap to learning things from.
02:39:48.024 - 02:40:54.616, Speaker E: How do you do swaps, how do you create liquidity pools, how do you go a little bit more advanced, and how do you use subgraphs, how do you create flash swaps, all of these things. And if you have any ideas you're thinking about building, please go to our Hacker Homepage and it's a great resource for a ton of hackers. And also if you have feedback on how we could improve the hacking experience, we would love to have that also. So with that, let's get into for those of you who don't know what Uniswap is and how it operates, or for even those of you that do know how it operates but maybe don't know the inner workings of maybe more than a swap, let's take a look at that. So what is a Uniswap pool? Well, it consists of basically two tokens, token A and Token B. So in order to swap Token A for Token B, you need to have people providing liquidity into this pool so that this pool can have funds to actually execute the swaps. So you have accounts that provide liquidity to both sides of the pool.
02:40:54.616 - 02:41:35.790, Speaker E: And then when this liquidity is provided and when swaps occur, the people who are actually providing liquidity collect fees on these swaps. So there's a whole mechanism behind Uniswap that's not just swapping, but it's also a whole liquidity side that's very engaging and enticing for people to build on top of. And Uniswap has a lot of liquidity and there are a lot of cool projects that can be built using that liquidity. Now, maybe you see this and it's a little abstract. It's token A and token B. Well, what does that look like in real life? Well, if you're trading Ethereum, can anyone think of a pretty popular token that people are trading ETH for right now? Pepe. Oh, yes, Pepe, of course.
02:41:35.790 - 02:42:23.860, Speaker E: So to actually have Pepe and to have trades happening on Pepe, a lot of people are going through uniswap to do this. So you would have accounts depositing both Ethereum and Pepe at different price ranges. And then when that happens, you create a pool. And now things can be swapped on top of uniswap. So now that we've gotten over this kind of cringe meme coin, maybe we can go into some code and see how now that you have a pool, how you can actually interact with that pool and do something simple like pulling the price of the certain coins in that pool. So we're going to be looking at fetching spot prices live for uniswap pools. And to do that, we're going to be using documentation on the uniswap SDK.
02:42:23.860 - 02:43:21.944, Speaker E: And how we do that is the first thing, in case you're new to crypto, you have to create a provider. And essentially you're going to be using a tool called Ethersjs to interact with the smart contracts and call certain functions on there so that you're able to live pull data that you need on chain. So what we'll do is we're going to get a provider from infiro. Once we get that provider, we're going to call Ethersjs and we're going to use the pool address of the uniswap pool that we want the spot price for. And we're going to use the quoter address, which is a built in contract that uniswap created to actually get live quotes from the pools. So if we're looking at this pool address right here, you might be, you know, these are just a random contract. Know what pool is this actually calling? Well, this is for the ETH wrapped BTC pool.
02:43:21.944 - 02:44:15.310, Speaker E: And a really simple way to get the pool information that you want is you can go to info. Uniswap.org for wrapbtc slash ETH. I can click on this info, and in the URL you can see the contract for the pool right here. So anytime you want to know if it's Pepe and ETH, if it's USDC Dai, you can just go and click on this website and you can see the contract that you want and then you can plug it in to basically this code to get the live spot pricing. So once we get the pool address and once we have the quota address and we've set up our provider variables, we can now start creating the function to get the live price of the pool. So what we do here is we create a constant called pool contract and then we use Ethers to initiate the contract and we put in our address.
02:44:15.310 - 02:44:46.532, Speaker E: We also call in the uniswap V three pool Abi. What an Abi is essentially it dictates all the functions in the smart contract and then you can call these functions. And when you're calling these functions, you're able to read and write real time on the smart contracts. So the uniswap v. Three Abi comes with the uniswap v. Three SDK. So you're going to be using this Abi to pull the addresses, to pull basically the addresses of each of these token pairs.
02:44:46.532 - 02:45:49.224, Speaker E: Now, once you have the addresses of these token pairs, you can use that to call these contracts individually to pull information from each specific token. So here we have wrap BTC and ETH. We're using this code to go and get the actual contract information. So as we're doing this, we're starting to get variables that will help us get the live swap price in the Uniswap pool. So we'll go here and we're going to use this helper function we just created called Getabis. We're going to pass this into our Get price function when we're getting the Abis for these token addresses that we just got from our pool contract, we use that to now get information, or we use that now to instantiate new ethers contracts for the specific token contracts. So now that we have wrap BTC individually and ETH individually, we have Abis.
02:45:49.224 - 02:46:44.610, Speaker E: We can now access in those contracts to get additional information as well. So what we're going to do here is we're going to get the symbols for each contract so WBTC and ETH and then we're also going to get the decimal information. Decimal information is pretty important in crypto and it's a good thing to note as you're working with Uniswap, it really impacts the formatting of how certain tokens look and operate or even field. So you would use this token decimal information as you're outputting the information to output it in a format. And the other thing to note is that tokens have varying decimals attached to it. I believe like wrap BTC may have eight decimals after it and I think ETH may have like 16 or something more. We go on to that into the code, but it makes a difference as you're thinking of how do I do the swap exactly.
02:46:44.610 - 02:47:29.580, Speaker E: So we then create another helper function that will take in that pool contract that we initiated early on and we will get the actual tokens in that pool contract. And then we're going to get the fee of that contract. If you've used Uniswap before, you've probably seen that we have different amounts of fees based on what the liquidity provider has provided liquidity at. So it can be one basis, .35 basis points. And based on that fee, it dictates the actual price in the pool pairing and it dictates how much the liquidity providers will get in return for providing liquidity at those fees. And we need to know that as we're calculating the spot pricing.
02:47:29.580 - 02:48:30.930, Speaker E: So we get the symbols, we have the decimals, now's the time where we use our quota contract. Our quota contract is going to be used to get the quotes for the prices and then it'll be used in our calculations as well. So we have our helper function that we did earlier, which was right here, get our pool immutables. We're going to be getting our token information and our fees for wrap BTC and ETH. And then what we're going to do is we're going to pass in our pool contract, which we initiated right here, so we use the pool address for Rap, ETCE. The Abi, the providers, and now we're going to get all that information. And what we're going to do is now that we have all the information we need to actually get the live spot price, we're going to use Ethers to calculate an amount in and then a quoted amount out and then format that and get our result.
02:48:30.930 - 02:49:24.480, Speaker E: So here we're putting in an input amount which will be what is the price of one wrap BTC to ETH. And then we're going to also include the decimals for one wrap BTC so it can be formatted correctly. As you can see here, one wrap BTC has eight decimals, while as one ETH has 18 decimals after it. And that will impact what your result looks like after you've actually calculated it. So we take in our amount in and then what we're going to do now is create this const called quoted amount out and we're going to take in our tokens, our fees, the amount in that we're looking for. And then zero is just a constant variable you will put in there. And then we're going to get an amount out that will be showing us the live spot price of this pool.
02:49:24.480 - 02:50:20.710, Speaker E: So you can console log your result here, you get the price and then boom, you run your code and you can see the live price of one wrap BTC. Whether this is live today or not is that it can be swapped for 13.3 wrap T. And this is a simple way to just start getting used to the Uniswap contract, integrating with it, and then start building on top of Uniswap really seamlessly and easily. The more you get familiar and comfortable with the Abis, the better you can get with doing more advanced things like liquidity providing, creating different variable fees or working with fees and building more unique solutions on top of Uniswap with that. I do want to go into our bounties that we're having for this hackathon. So if it's your first time, if you built on Uniswap, if you've got some kind of idea, we have a wide variety of bounties for you to go after.
02:50:20.710 - 02:51:20.224, Speaker E: We have an Ecosystem Prize, which is essentially any tools that you could build that are unique and help our ecosystem grow. This could be expanding the realm in which Uniswap even operates anything around decentralized social applications that are integrating unique tokens that you create in these experiences and then helping provide liquidity pools for people to trade. On top of these tokens, we have a whole governance suite that's important to us, and we also help lead a lot of governance in the space. So we're constantly looking for ways to improve the communication between delegates, to improve the voting experience, to work on different I think even different chains would be exciting to see how they could help operate and expedite the voting process. And again, liquidity. You're working with a ton of liquidity within Uniswap. I think there's lots of ample ways to use that liquidity that isn't being built right now that is very relevant to this hackathon.
02:51:20.224 - 02:51:45.212, Speaker E: And I would love to see things like that built. Developer tooling, things that will help developers build on top of Uniswap. We're looking at infrastructure. We're looking at things that could help people understand Lping, understanding different analytics for helping strategies be developed. And then we also have an Open Innovation prize. It's whatever goes. Anything that is the most exciting and innovative project on top of Uniswap can apply for this prize.
02:51:45.212 - 02:52:00.390, Speaker E: You're also welcome to apply for all three of them if you think your idea hits all three. But yeah, that was our intro to Uniswap. A quick overview, open for any questions, if you guys have any. Yes, sir.
02:52:03.000 - 02:52:03.750, Speaker C: Yes.
02:52:12.660 - 02:53:06.500, Speaker E: So the gentleman asked the question about using we showed how to just do one pool and pick the spot price of the pool. But when you're using the actual application, it shows you three or so different, or it shows you the best route to the best price, and then it routes it to the best price for you to execute the swap. Is that correct? And how does it do that and is there an easy way to do that? We do have documentation on how to do routes and it is within our SDK. So if you go to Docs Uniswap, you'll be able to actually use our routing a swap documentation here and then it will show you how to do that and how to use the different tools we've built as well with like, the permit two router.
02:53:07.000 - 02:53:07.508, Speaker F: Cool.
02:53:07.594 - 02:53:32.990, Speaker E: Any other questions? I saw a few. Hands up. Sweet. Well, maybe now you guys have time to go get the Ravi tickets that this has finished early. It's a party here, so that's about as much as I know. Sweet. Thank you guys for your time.
02:53:32.990 - 02:53:47.830, Speaker E: Hope you guys build on Uniswap. Looking forward to it. Yes, we could. Awesome. Thank you.
02:53:47.900 - 02:53:48.680, Speaker C: Thank you.
02:55:09.670 - 03:00:49.968, Speaker A: Sam. Sam. Sam. Ram. Sam. Rain. Don't it Sam.
03:00:49.968 - 03:03:24.940, Speaker A: Sam. Sam. Sam.
03:04:32.660 - 03:04:37.250, Speaker G: If you're here for airstack, we'll be starting in two minutes. Thank you.
03:05:08.630 - 03:05:09.540, Speaker A: Do that.
03:05:16.870 - 03:05:58.874, Speaker G: All right, we'll get going on the airstack workshop in a minute. Looks some people are still coming in. Welcome everyone. Welcome. All right, there's a lot of people coming.
03:05:58.912 - 03:06:00.780, Speaker C: We're gonna we're gonna give another minute or two.
03:06:29.710 - 03:07:11.320, Speaker G: All right, folks, if you can come on in, we're going to get started. All right, let's get going. Hi, everyone. Good afternoon. Hope everyone's doing well. I'm Jason, founder of airstack, and I'm here with my colleague Rishi, who's one of our senior developers. Hope everyone's enjoying the hackathon thus far.
03:07:11.320 - 03:08:23.226, Speaker G: So I'm going to do a very short introduction to airstack, and then Rishi is actually going to show you a demo app that we've built using our SDKs and then talk through the APIs really quick. For those who are unfamiliar at all with airstack Web three developer API platform that enables you to very easily integrate both on chain and related off chain data into your applications. With airstack, you can run a single query across chains, across both Ethereum and Polygon, and also across DApps as well. So we have an identity API that cuts across Farcaster, Lens, ENS, and then also we have on the NFT marketplace side, OpenSea, Blur and Rarible. And you can query all of that in a single query and response using our APIs. If you have any questions, we have a Telegram chat that is very active with developers and we encourage everyone to ask questions in the Telegram chat. You can come up to us afterwards if you don't have access to the chat.
03:08:23.226 - 03:08:56.278, Speaker G: We have a team of 16 people working on airstack. There's two of us here today. The other 14 are all standing by, answering questions as you have them. If you go to airstack XYZ, where I am, see, you can access by launching the app. You can go to the app homepage here, and from here you can sign in. And when you sign in, you will get your API key. It is entirely free.
03:08:56.278 - 03:09:24.606, Speaker G: We don't plan to charge for airstack for several, several months now. Our focus is just on working with developers, helping you build good use cases. So it's entirely free. Just one thing I'll point out. You'll get an API key provisioned when you sign in if you want to get a higher rate limit. So all you need to do is go to manage your plan and request a rate limit increase and our team will receive it. And it just asks you to explain why they need the rate limit increase and we'll give it to you.
03:09:24.606 - 03:09:55.894, Speaker G: Don't worry. We want you to build great applications, so we have other plans that we can upgrade you to. No problem. And there will be no charge at all, I promise you. Last thing I just want to point out is if you go to the airstack app, you've probably seen that we have the AI Assistant. It's kind of like cheat codes. In the end, if you're a developer, you need to use the SDKs or use the GraphQL or access the APIs directly.
03:09:55.894 - 03:10:35.480, Speaker G: The AI Assistant is just like cheat code is a great way to help you get started and to learn the product. So you can write a query using the AI and it'll create the GraphQL query, and then it's a great way for you to learn the syntax. So I'll just show you a quick example. I can say, show all NFTs owned by Betashop ETH and the images along with his Web Three social profiles. And the AI assistant will create this query. Where am I missing the.
03:10:40.650 - 03:10:41.286, Speaker C: Where'S the.
03:10:41.308 - 03:10:41.880, Speaker F: Actual.
03:10:45.500 - 03:10:47.930, Speaker G: Do you know where the actual Explorer is?
03:10:48.700 - 03:10:50.648, Speaker C: Yeah, sorry.
03:10:50.734 - 03:10:51.512, Speaker D: No worries.
03:10:51.646 - 03:10:52.600, Speaker G: It's there though.
03:10:52.670 - 03:10:59.304, Speaker D: Yeah, just got masked. Can you do it in a new tab?
03:10:59.352 - 03:11:05.974, Speaker C: Yeah. There we go.
03:11:06.012 - 03:11:06.646, Speaker F: Okay, sorry.
03:11:06.748 - 03:12:03.430, Speaker G: So I can say show all NFTs owned by Betashop ETH and the NFT images and his Web Three Socials, just an example. And the AI will generate the query. So it's essentially the APIs that we have are NFT collection stats. So stats about NFT collections domains, which is ENS marketplace stats, NFT sale transactions. So all transactions happening on OpenSea and Blur and Rarible socials is Farcaster and Lens token balances or balances of a wallet. NFTs is you can look up a collection and see all the holders, all the metadata about the collection token transfers. So the whole transfer history of an address as well as wallet, which is everything related to that wallet.
03:12:03.430 - 03:12:44.130, Speaker G: So you see for the query that it did here, it just created basically it opened up the GraphQL and it created the query. One thing you note is the queries can be cross chain. And so this is all NFTs owned by Betashop, which is ETH, which is on Ethereum and NFT images. And here, I'll just run this and I can get the JSON file here and you can then work with that. And you can see we also have images as well that are resized and you can ask for different sizes as well. I'm going through this really fast because I want to get reachy up here. The last thing to show you is the docs are very comprehensive.
03:12:44.130 - 03:13:06.030, Speaker G: If you go in the docs, you'll see the SDK information about the API and then the reference has every detail about each of the APIs that we have. So you can see exactly what's in the APIs and how to call them. That was me in four minutes, giving you a very high level airstack. He's going to show you the real meat. Go ahead, Rishi.
03:13:08.700 - 03:13:31.264, Speaker D: Yeah. Thank you, Jason. So, hi everyone. I'm really excited to demo what we've done. And great to see you all. So the query with Jason Ran, we're kind of building a demo similar to that which uses the same query underneath. And let me just open up how we're planning to make it look.
03:13:31.264 - 03:14:18.520, Speaker D: So it's going to be a single react page. And how it's going to be is we're just going to enter a wallet address or any other identity. It can be an ENS name, it can be a Farcaster handle, it can be an address as well. And accordingly, we'll get a prompt of all the images which are there as well as other data associated with it. And alongside that, you'll see that we have these buttons below Next and Previous. So we support Pagination in our APIs and we'll be demoing how to integrate all of that, so anyone can just plug and play. So for the purposes of the hackathon, and in general making developers life easier, we thought that, let's build an SDK.
03:14:18.520 - 03:14:57.508, Speaker D: And it's a react based SDK that would allow users to just take these components, take our react hooks, and just plug it into their application and get started right away. Focus more on the actual app and not how to plug airstack into your service. So I'll just quickly walk through how it looks and what are the different support available. So you just need to run NPM, Install or Yarn, whatever works for you. And we have react hooks. So we have query hooks and Pagination query hooks on a high level. And query just involves running a single query.
03:14:57.508 - 03:15:29.760, Speaker D: And Pagination is the example which we showed where you may need to iterate over multiple pages of data. Because we have a limit. You can just use these particular hooks and get started. And alongside that, we have a lazy version of each query. So you don't need to actively handle it. You can get the particular function from the hook, and then you can just use that function in any of your handlers. And alongside that, we also have an asset component.
03:15:29.760 - 03:16:02.160, Speaker D: So, just referencing back to our figma, you can see that the NFT images that we get, they may be of different sizes. And it's often difficult to resize and keep everything standard. And it's a lot of effort to do it by yourself. So we decided that you can just use our asset component and get started, and everything will be resized the way you'd like it to be. We have different sizes, and I'll explain further as we get there. So, yeah, let's get started. We have a demo app here.
03:16:02.160 - 03:16:41.900, Speaker D: It's on our GitHub and it's public. I've already cloned it here so we can get started. First thing I'd suggest is just NPM install, make sure that you have everything. And now you can just import this from our SDK, this init function, we just need to pass the API key, which Jason mentioned, and this key would basically append itself throughout any API request as a header. So you're good to go. You don't need to manually add it anymore, and I'll just show how we can get the key. So just go back to here.
03:16:41.900 - 03:17:09.556, Speaker D: You can just click View API keys and copy, and you're good to go. So this is the first part done. Now let's look more into how the actual structure is coming for the react app. So, as I mentioned, we had these hooks, and this is one of the hooks we're using. Lazy query with Pagination. So this will ensure that you can just have a. Next and previous button.
03:17:09.556 - 03:17:55.776, Speaker D: And whenever you click it accordingly, the Pagination will take place. We have the hook here and these are how the variables look. So just quickly explaining that get data is the actual underlying function which makes the API call and it updates these following four variables. So data would be the actual API data and loading and error are just used for error handling and state management. And Pagination is what we use actually underneath to implement the Next and Previous buttons. And you can see just using this single Pagination has just reduced your code lines really fast. You don't really need to know underneath how we're using Pagination, how the API uses cursors.
03:17:55.776 - 03:18:30.672, Speaker D: You just straightaway do this and you're good to go. And the argument we pass here is the query. So this query here, we can get it from the Explorer as well. And you just need to use that query and you can build this straight up from the Explorer and you just need to paste it and we're good to go. Right, so here we are basically destructing that Pagination variable. And we have two Boolean variables and two functions. And the Boolean variable is just used to denote whether we can traverse in that direction or not.
03:18:30.672 - 03:19:13.948, Speaker D: And the Next and Previous page does the actual API call implementation. Here we have a submit handler that takes the input from the text box here and we alongside that pass the limit. And this limit is 50 for us right now. So that's why we need to use Pagination because you may have thousands of NFDS and if we only return 50 at a time, we needed a strategy to show everything. So we went that way. And now this is where the main header and the structure lies. And basically from the data response, we're kind of showing how the state would look like.
03:19:13.948 - 03:19:53.304, Speaker D: This is the actual list which comes. And here is how we've implemented the Next and Previous button. So you can see it's just have an on click pass the variable that we got from Pagination and you can even disable or enable it using the states which were provided. And we'll dive in now to how this token list looks like. So here we're using the asset which I mentioned before. And this asset basically airstack has all the assets on it. So we're not querying externally for any further data, everything's with us.
03:19:53.304 - 03:20:25.616, Speaker D: So we made this asset component that you can directly plug in with our API and it's going to be very seamless. We have the chain which is needed. Like if you want polygon data, by default we assume Ethereum. But if you'd like polygon data, you just need to add that as a field the address and token ID of the NFT you'd require. And yeah, we also have preset. This is what I meant by the size. So we've resized all these NFT images based on some dimensions, which is there in our docs.
03:20:25.616 - 03:21:20.080, Speaker D: And you can just pass it here. And everything would be uniform. Everything would be scaled and yeah, I think we're good. So let me run this so we can start with italic ETH. So now I just click submit 1 second. Oh, I think let me try to show sorry. This always happens.
03:21:20.080 - 03:21:34.190, Speaker D: Is my Internet working?
03:22:28.310 - 03:22:29.042, Speaker F: Yes. Sorry.
03:22:29.096 - 03:22:53.680, Speaker D: I entered the wrong API key. So, yeah, here we can see how the images are turning up. They're all of the same size, even though the original images might be of different sizes. We can paginate go to the next page and you can see how it works. And you can enter anything here. So we can enter Stanny lens. You can get lens related data as well.
03:22:53.680 - 03:23:08.340, Speaker D: You have a farcast ID. You can pass that as well. And all this data is available on airstack. I think with this, we're good with the demo. So open to any questions anyone has.
03:23:16.550 - 03:23:17.774, Speaker G: So we have time.
03:23:17.832 - 03:23:18.950, Speaker B: So ask anything.
03:23:19.100 - 03:23:23.570, Speaker G: Be specific about your build or just overall questions about the API.
03:23:23.650 - 03:23:23.990, Speaker E: Anything.
03:23:24.060 - 03:23:32.800, Speaker C: Go ahead. Anyone?
03:23:34.950 - 03:23:41.742, Speaker G: All right, let us stop by if you have any questions directly. And feel free to ask questions in our telegram.
03:23:41.806 - 03:23:42.846, Speaker F: And thanks, Rishi.
03:23:42.878 - 03:23:44.020, Speaker C: Thank you. Thanks, everyone.
03:23:59.310 - 03:29:02.360, Speaker A: Sam here's. Sam mo jam dream. Sam. Sam. Sam. Sam.
