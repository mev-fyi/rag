00:00:00.410 - 00:00:30.802, Speaker A: In summary, what we do is we allow you to log in to DApps with Google, and basically you don't have to care about your private key as a new user. Not yet, but then after a while, we will let you off board and behind the scenes. How we do it is we split your key into shards, and in order to reconstruct it, you need majority of the shares. And then we have all these shares be held by other servers. So the servers are not run by us. We run only one of the servers. So a bunch of people are running servers.
00:00:30.802 - 00:01:14.580, Speaker A: They're distributed across the world. And then when you log in Google, you get that share back, and then you reconstruct a key in the browser. So, long story short, log in Google shares from somewhere, come back after you've proven that you've logged in Google, and then you get back private key so users don't have to keep it. They don't need to know anything about seed phrases like private keys, like hard wallets, stuff like that. So it's easier to show how it works just by looking at existing integration. But for now, if you guys are interested in trying out as I give the talk, you can go to App Tor US and App Tor US. App tor us.
00:01:14.580 - 00:02:06.518, Speaker A: I don't have the thank you. It's the other side. So show of hands, who here is already building a DAP, or, like, has an existing DAP that they're working on before they came here, and the rest of you are working on this hackathon? Just doing cool stuff. Okay, I see. Okay, and before this, you guys were using MetaMask, like, to let users interact with your DApps? Predominantly MetaMask? No. Brave users? No. Okay.
00:02:06.518 - 00:02:51.060, Speaker A: What about mobile? Have any of your users asked for a mobile version of your DAP? No. They have. What do you tell them? Okay, then how are you communicating with the blockchain via mobile. Okay, so you set up remote node, like guests or something? Or interior. Okay, but what about the keys? Like, it's managed by you guys or the user? Oh, it's in the phones. Okay, cool. So presentation is up.
00:02:51.060 - 00:03:02.710, Speaker A: It's not connected. Yeah, you know what? Why don't you use yours? Mine doesn't seem reconnected.
00:03:07.130 - 00:03:39.810, Speaker B: How many of you guys are targeting mainstream users? How many of you want to like everybody to use your idea? Not crypto enthusiasts. So this is one of the issues that Taurus wants to solve, right? So we want to be able to give your users just that. They see a login with Google, and we give you a decentralized way to have them. I think of Taurus as a decentralized key management. They don't need to care about the underlying mechanism. You can check them, you can verify how it works, but he doesn't need to know about it. So this is what we give you.
00:03:39.810 - 00:03:56.294, Speaker B: A new user can just come into your d app, go log in with Google or log in with Taurus, which actually uses Google, and then he has a private key that and you have actually any other basically what that means.
00:03:56.332 - 00:04:01.014, Speaker C: Is if you guys are using MetaMask right now, you guys can swap MetaMask out for Taurus.
00:04:01.062 - 00:04:23.460, Speaker A: One for one. Great, thank you. So, yeah, you guys already heard what it does. Basically fricians login for DApps. And if you already have a DAP, you can check out the docs at Docs tor us or you can do this. This is actually you need to put App tor us in front of this. Let me just change this.
00:04:23.460 - 00:04:59.846, Speaker A: You want to put App tor us here. And actually if you go to the site, it should just give you this entire script tag. So you notice there's a Shah hash there. So the reason for that is our front end needs to be secure, right? Because we're handling users keys. So we want you guys to know that we don't change the JavaScript as and when we like, right, if we change the JavaScript, then we could potentially steal keys. So all this code is actually open source. You can look at on GitHub and there's a Shah Integrity hash.
00:04:59.846 - 00:05:35.222, Speaker A: So if anything changes, you would know. So you can just go to App tor us and copy that one. So once you do that, all you do is put the script tag in your body of index or HTML. So a lot of like, if you're in react, usually it's index or HTML, right? Just put it in a body, the script tag no, not the head. The reason for that is because there are certain, like, for example, some Web threes, like MetaMask. Web Three actually detect it a bit later. So putting your body makes it load on time.
00:05:35.222 - 00:06:09.970, Speaker A: So it's just some timing issues. Anyway, once you do that, it basically provides a Web Three instance that you can just use. So if your app is integrated with MetaMask already, it can use it straight away. So you just need to disable MetaMask on your browser, put this script tag in your body and it should just work. We hook into the basic stuff like Ethereum, enable the usual Web Three calls, like signed transaction stuff. And yes, that's about it. So it may not seem like it's that straightforward, but it really is.
00:06:09.970 - 00:06:38.358, Speaker A: So this is an example integration right here. I'm using JavaScript injected into this tag onto the page, and after you click Login, you will just trigger a Google login. And if you have two FA enabled, it will prompt that and then you can just log in and start using the DAP. So afterwards, after this talk, we have lots of time, I'll go around and make sure that all you guys can get this integration working. It should be pretty straightforward.
00:06:38.454 - 00:07:17.826, Speaker C: Maybe what we can cover a little bit more is how Taurus works behind the scenes. Okay, yeah. So this diagram kind of shows a little bit. I'm not sure how much Lennox covered, but we essentially allow users to log in to the decentralized ecosystem via social logins. So right now we support Google, but in the future we'll be supporting Twitter, GitHub, LinkedIn, and several others. You can combine multiples of these authenticators to one public private key pair to make kind of like a threshold key. So, for example, you could have a two hour three with LinkedIn, Google, and GitHub.
00:07:17.826 - 00:07:32.750, Speaker C: And if somebody wanted to access that key, they would have to have two access logins, either two or three of them, to get that key. And that ensures that the authenticators themselves can't get access to your key as.
00:07:32.900 - 00:07:39.310, Speaker A: Secure because someone hacks like, let's say, your GitHub or Google accounts.
00:07:41.010 - 00:08:23.450, Speaker C: Back in the background. What we use is a scheme called distributed key generation to generate users'keys. These keys are generated in the buffer in a series of nodes which are then assigned to users as they log into the platform. So right now, these nodes are actually run by several organizations, including Virgil from Ethereum Foundation, binance Labs, Waseta University, as well as Kyber Network and several others. And these guys are basically the people which keep these different shares of your user's keys, which your user will authenticate with them to get back and add up in the browser and start using as a webtree instance.
00:08:23.610 - 00:08:25.198, Speaker B: General overview, if you're interested.
00:08:25.284 - 00:08:26.494, Speaker A: It's not super important.
00:08:26.612 - 00:08:26.990, Speaker C: Yeah.
00:08:27.060 - 00:09:03.478, Speaker A: And then, yes, we are giving you API prizes. So these are the API prizes. There's a one grand prize of $2,000 in ETH. Each is fluctuating a lot right now, so I really don't know how much Ether is, but it'll be awarded when we make the decision to the best DAP that incorporates taurus as the login mechanism. So that's the first grand prize. And then we're giving two prizes of $1,000 to DApps that fulfill an industry needs. So in this particular case, it has to be like an existing industry, not something that is very crypto specific, but something that's already an existing industry.
00:09:03.478 - 00:09:31.646, Speaker A: And then the last one is one prize of $1,000 in ETH awarded to DAP. That's the most seamless and intuitive user onboarding process. So that's also really important to us because one of the core goals of Taurus is to make crypto applications that you guys are building accessible to public. Right. Normal users may not want to deal with private keys or even know what they are before they use your app. And we have a few other prizes after that. One prize of $1,000, an east awarded to DAP.
00:09:31.646 - 00:10:00.730, Speaker A: That's the best overall user experience. And so the previous one was user onboarding user experience. Another one for DApps that displays the most innovative use of taurus. So Taurus right now is used for logins, but you can actually use it for other things. You can use it, for example, to look up a person's since it's tied to Google, right. You could maybe send money to person's Google account or send a crypto kitty to person's Google account. There's something interesting that you could use it for examples.
00:10:00.730 - 00:10:42.602, Speaker A: And then the last one is a price of $1,000 in ETH awarded DAP the most creative design for implementing taurus. So that's all we actually hook into a bunch of existing Web Three calls. So you do Ethereum Enable if you are used to MetaMask APIs. Nowadays they use Ethereum Enable to call that before you get access to the user's ETH account. Right? So if you do Ethereum Enable, it actually just triggers this call window torres login. But if you want, you can also just call this yourself to trigger user login. And if MetaMask is already installed, would Torus be able to work? No, it won't work.
00:10:42.602 - 00:11:01.450, Speaker A: MetaMask loads too fast because it's a browser extension, so it will just disable it. So if you want to test it out, please turn off MetaMask. Easy way to do that would be to run it on incognito, and the last one is run your browser incognito.
00:11:01.530 - 00:11:12.610, Speaker C: I mean, you could actually just build two paths as well if you want to integrate it right now, you can just disable MetaMask, play with taurus right off the bat.
00:11:12.680 - 00:11:39.286, Speaker A: But if you use incognito mode, it shows will just work. And yes, you can read from ethnet. Just use the same web3 calls like web3 east getaccounts web3 econtract at and then make a call. They all use the same APIs. So yes, if you like what we're doing, you want to reach out to us, come here. We're always open. We're actually looking for authenticators that may be interested in building out more login mechanisms.
00:11:39.286 - 00:11:53.438, Speaker A: So right now we have Google login. But if you are authenticator out there, let's say you have some type of API login, like OAuth login, we'll be happy to integrate you. That's all cool. Yes.
00:11:53.524 - 00:11:56.340, Speaker C: We can come around if you guys have any questions.
00:11:57.510 - 00:11:59.122, Speaker A: Oh, sorry, you're having a question?
00:11:59.176 - 00:12:02.734, Speaker D: Yeah, I was just asking a little bit like, how do you guys incentivize.
00:12:02.782 - 00:12:04.418, Speaker B: These guys to stay available with all.
00:12:04.424 - 00:12:06.020, Speaker D: The different shares and then.
00:12:13.050 - 00:12:52.354, Speaker A: Right, so the back end of it, right, is actually publicly verifiable in a sense that all of these nodes, they do a lot of messages to do key generation, right? All of that happens on a shared BFT layer. By the time fault tolerant layer, we actually use tendermint core as the engine. And all of that is actually recorded. So if any of them did malicious activity, it would be there and you could submit a proof of that. So that's one way to do it. Right now, a lot of these nodes they're running it are not doing it for money, right? I mean, this is free to use, first of all. Second of all, they just want to incentivize ecosystem to build apps that are usable by the mainstream audience.
00:12:52.354 - 00:13:02.234, Speaker A: And this I think provides way more benefit than whatever money we can offer them. So that's kind of like the incentives for a lot of these nodes. Cool, go ahead.
00:13:02.352 - 00:13:28.426, Speaker D: So when it comes to funding the accounts that are generated yes. If you have MetaMask, typically you're going to buy these on Coinbase or something, transfer it separate account. How do you have access to the address so you can withdraw to that? Or is there some flow that you recommend using accounts?
00:13:28.558 - 00:13:31.160, Speaker A: There is an associated ETH address.
00:13:31.610 - 00:13:34.120, Speaker D: How does the user retrieve that?
00:13:36.250 - 00:14:08.980, Speaker A: Okay, let me just show you a live demo. Do you have the latest one? Do you need this? Okay. I think it works. I'm not sure. I tried it just now, but it wasn't working at the connection. It's a very tiny screen.
00:14:13.670 - 00:14:16.450, Speaker B: Click this because this one is connected to remote.
00:14:18.070 - 00:14:41.604, Speaker A: Yeah, I think you have to use this. Yeah, it's connected to the remote. I don't know. This way.
00:14:41.642 - 00:14:44.030, Speaker B: Click this eight.
00:14:59.780 - 00:15:01.520, Speaker A: Yeah, I use my IP.
00:15:05.780 - 00:15:06.530, Speaker C: Yeah.
00:15:15.000 - 00:15:17.350, Speaker A: So what did you want to see like getting the.
00:15:19.560 - 00:15:22.020, Speaker D: Kind of user flow.
00:15:26.200 - 00:15:58.788, Speaker C: Actually run out just yet. On our front end we have several fiat to crypto integrated fiat to crypto providers integrated into the platform. So these include Wire, which is just outside simplex wire is integrated now, but yeah, the rest aren't integrated just yet. But like any other DAP, you'd be able to easily just get your public address and take it off and like.
00:15:58.874 - 00:16:00.070, Speaker D: You just get account.
00:16:00.840 - 00:16:01.590, Speaker C: Exactly.
00:16:03.400 - 00:16:21.464, Speaker D: Also on that point of Web Three is it basically injecting normal Web Three with its own provider. Could we take our own version of Web Three that's like at a specific version and pull in the provider from.
00:16:21.502 - 00:16:32.380, Speaker C: The Web Three version that's being injected? You probably could inject your own Web Three version as a mask either over the one that we are providing.
00:16:34.080 - 00:16:34.444, Speaker A: You.
00:16:34.482 - 00:17:00.404, Speaker C: Could actually rip it up, but I think it would be the easiest thing right now. So how it works on the front end is that we keep a user's key. So MetaMask keeps a user's key on a separate JavaScript context, which is the Chrome extension. Right. And this ensures that your key isn't readable by any DAP using it. And basically the DAPs can't take and run with your key.
00:17:00.442 - 00:17:00.836, Speaker A: Right.
00:17:00.938 - 00:17:23.068, Speaker C: So we do something similar, but we use an iframe as a separate JavaScript context to keep your key. So this Iframe basically communicates with the webtree instance that we provide to you guys and you can replace that webtree instance with a newer version and provide a provider on top and then inject the provider that we provide on that web train instance. It is possible, but it's just a bit more work the same way you.
00:17:23.074 - 00:17:51.240, Speaker A: Would do with MetaMask right now. MetaMask exposes windows. Wrap that around a Web Three version that you want and use that version. So use the same calls on the hood. So anyway, I don't know why the screen resolution is like this, but okay, what I'm showing here is I have this tiny little user script. And what it does is it just injects the script tag that showed us. Now app auto us onto the page and it just works.
00:17:51.240 - 00:18:17.344, Speaker A: So let me show you. So you click start, it's going to trigger a login, which usually looks bigger. Guess what she said. And then you can just start using the DAP. So I'm logged in, I can check out my wallet here. What's this dapper is here. Oh, they are here.
00:18:17.344 - 00:18:38.708, Speaker A: And then this is usually way bigger, actually. But I don't think I can change the display size. I tried it just now. It's super small here on my screen, too. But anyway, I just made it bigger. You can see how much you have. You can look for top up, not integrated right now.
00:18:38.708 - 00:18:58.110, Speaker A: And then if you want to see your address, you can just get it via Window Web Three East accounts. So if you go to here, I'm not on the main network. Yeah, if you go to App tort US, you can just integrate it like that.
00:19:00.560 - 00:19:07.612, Speaker D: Also, I wanted to mention one of our developers noticed that the app Tour US snippet works, but the one under.
00:19:07.666 - 00:19:09.824, Speaker A: Get It and Started page, we're having.
00:19:09.862 - 00:19:11.570, Speaker D: Like, core header issues.
00:19:12.020 - 00:19:13.088, Speaker A: Which ones?
00:19:13.254 - 00:19:16.610, Speaker D: The one on the Snippet on the Getting Started page.
00:19:18.660 - 00:19:19.410, Speaker A: Right?
00:19:21.700 - 00:19:24.420, Speaker D: Getting the core header issues. That's what's going on.
00:19:24.490 - 00:20:04.640, Speaker A: Okay. So, yeah, just put this in your DAP and it should just provide you a Web Three instance. It's kind of really small. I'm just going to not use this hard setting for scaling. Really tiny. Okay, we better. Thank you.
00:20:04.640 - 00:21:21.758, Speaker A: So let's try different app. So this is just window Web Three sign, and you can just get back a signature for those of you who are more interested in the console stuff. Yeah, all these things are available in the browser. So we provide this Web Three, they can just call. So for most DApps, I think you probably call sign transaction, send transaction, as well as some other smart contracts as they call. So those should just work. All right.
00:21:21.844 - 00:21:28.980, Speaker D: And if you're doing a send on smart contract call, it's going to pop up with that.
00:21:30.390 - 00:21:37.220, Speaker A: Let me see whether I can do it. Here's a smart contract here, right? I don't know if on this account.
00:21:41.080 - 00:21:47.510, Speaker C: So we have some spike for you guys to ask questions. I think the gentleman there one for you.
00:21:52.840 - 00:22:03.150, Speaker A: Yep. So not sure whether you saw that already, but you can just buy stuff on I can just buy stuff on a tap here.
00:22:06.900 - 00:22:09.648, Speaker E: Can you link an existing address?
00:22:09.814 - 00:22:35.288, Speaker A: Sorry? Can you link an existing address right now? Not yet, no. Right now? Not yet. We are planning on doing that, but the problem with that approach is that it's actually less secure. So our keys are generated on behalf of you by multiple servers. So it's not just one person doing as long as any of them are doing securely. It works because they contribute randomness to.
00:22:35.294 - 00:22:46.490, Speaker E: This happens real time when a new user just happens to log into an application of the first time user or.
00:22:47.360 - 00:22:57.970, Speaker A: Yes, but we do it with a buffer, so it's way faster than doing real time, like a buffer keys. And we come along, assign you run a buffer regenerate, more like that.
00:23:04.670 - 00:23:05.660, Speaker E: Thank you.
00:23:07.490 - 00:23:09.006, Speaker B: We have five minutes.
00:23:09.188 - 00:23:16.574, Speaker A: Yeah. So we can go around, like you guys have very specific questions. You can answer them. Yes, go ahead.
00:23:16.692 - 00:23:21.946, Speaker D: Do you only share private keys, or are you considered sharing arbitrary secrets?
00:23:21.978 - 00:23:23.040, Speaker B: Like death specific?
00:23:24.870 - 00:23:42.646, Speaker A: Not considered yet, but private keys are, like, what we're focusing on now. What were you planning to do with private, like, these things. Okay. Sharing secrets. I see. Okay, cool. Yeah.
00:23:42.646 - 00:24:09.040, Speaker A: So that's basically what you can do. I think there's also, like, a few more APIs. It's in our documentation site, but mostly just around these things. You think CryptoKitties or which one? Oh, there was a demo app. Is it this one? CryptoKitties one. Okay. Oh, it's huge.
00:24:09.040 - 00:24:36.220, Speaker A: So I think you can just log in. Okay. If you want that amino problems, please put it in the body. I know a lot of different react has a few libraries that listen to web3 really late, so if you have it in the head or something, sometimes it just doesn't hook. Yeah, so put it in the body. It has the best results. I've done a lot of testing with these things.
00:24:40.030 - 00:24:45.514, Speaker B: We have two minutes left. If someone wants help or has questions or anything, we'll be around.
00:24:45.712 - 00:24:47.760, Speaker D: Actually don't have anyone following you.
00:24:49.330 - 00:24:50.462, Speaker A: You can hang out here.
00:24:50.516 - 00:24:51.120, Speaker C: Continue.
00:24:55.730 - 00:24:56.640, Speaker B: This one.
00:24:58.210 - 00:25:19.960, Speaker A: Can I get a chair? Crypto keys is actually kind of wonky. Like, they have a really weird loading thing. It works sometimes. Thank you, man. No problem. So not upload my but I want to see.
00:25:22.250 - 00:25:24.440, Speaker B: Alert. Thank you.
00:25:27.930 - 00:25:41.600, Speaker A: Yesterday no, yesterday was had some huge server issues. Like last night, highly slapped dude. It was really annoying. But it's working now. Yeah.
00:25:44.050 - 00:25:46.238, Speaker C: You guys going to have a booth here all day?
00:25:46.324 - 00:26:12.050, Speaker A: No, but we'll be here all day. We'll be here all day. What are you guys doing? Right? Let us know if you have any issues. You guys can go to telegram, chat. That's like, one for Taurus here, and it's just Taurus labs.
00:26:12.210 - 00:26:12.630, Speaker C: Okay.
00:26:12.700 - 00:26:13.320, Speaker A: Yeah.
00:26:13.930 - 00:26:15.100, Speaker C: Thanks a lot. Cool.
