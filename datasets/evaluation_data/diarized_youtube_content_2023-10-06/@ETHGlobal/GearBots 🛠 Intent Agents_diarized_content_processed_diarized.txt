00:00:07.290 - 00:01:40.186, Speaker A: Thanks for coming. My name is Mikhail and I'm original inventor of Gearbox and today's speech we will talk a little bit how many interesting things you can build on Gearbox and we choose a very narrow topic which is called Bots. I believe it's a quite interesting to introduce me, I am a hacker like you so I participated in many hackathons primarily for crypto and as you know Gearbox was created during S global market make hackathon in 2021 and after the demo day thanks for cardsc, thanks for all support of Is Global. It became a real project and now we deployed on Mainet since 2021 the highest TVL we achieved was around 120,000,000, now it's around 30 and pretty soon we will deliver with three. So I consider hackathon is the best way for innovation to create new ideas, test your hypothesis and today my short and brief discussion about our bots what to inspire and show how many interesting things we can build together using Gearbox bot concept and how it could be done practically. So I will try for next 20 minutes tell you how to build something interesting in today's. I know how it's hard.
00:01:40.186 - 00:02:25.974, Speaker A: As I said, I'm already hacker. I know that time is going too fast and you should implement smart contracts, front end application and so on in very short period of time. How to get as many integrations as you can because there are many interesting protocols as well. And of course people want to learn more from different protocols, get more prizes and make something which could really be helpful for community and different DeFi protocols. And of course, how to set up environment and do some practical stuff. So let's start a short and brief explanation what Gearbox is. Gearbox is a solution which create on chain credit or credit obstruction.
00:02:25.974 - 00:03:49.362, Speaker A: So basically we create a protocol which I think quite novice and it represents a credit account obstruction. As you know, account obstruction is the way how you can really manage your onchain activity using smart contract wallet. And Gearbox could be considered and credit accounts itself as a smart contract wallet but you have ten times more money on them. So really incredible like a credit card you shouldn't worry how to money get in and out, you shouldn't go to Ava for looping and so on and of course our primary usage is leverage but we are open to create many new things. So as you can see, you can be EOA, you can really use any wallet account abstraction, you can connect our credit account and interact with different protocols in native way. There is nothing to be programmatic before it's really like your wallet but of course it has some limitation and if we go to briefly to architecture, we shouldn't spend a lot of time here. As you can see, Gearbox is two side protocol, on the left side you can see LPs people who are interesting in passive income they provide liquidity to our pools.
00:03:49.362 - 00:04:34.878, Speaker A: Our pools is one token pool so they have no impermanent loss and so on, a little bit similar to Ave. So you can provide USDC to USDC pool or east or east pool and so on. But what is really exciting is the right part. So in the center you can see a credit account and if you a gearbox user, you can open multiple credit accounts wherever you want. So you can 110, 100 like wallets in your MetaMask and then you can send transactions. And when you open this credit account or even after, you can provide initial funds to be able to get a margin loan. For example, let's check how it works.
00:04:34.878 - 00:05:42.698, Speaker A: Oh, it's transaction, sorry. You provide ten ease to credit account and you take leverage or margin loan from the pool like a 90 ease. After opening credit account, you have ten times more and then you just send transaction to credit account. They automatically execute it on third party protocol in a native way but all tokens and outcomes should be on this credit account. And here a more detailed version so you can see as account owner, you send a transaction or a batch of transaction, then they will be checked because the target contract should be whitelisted from the risk perspective, it's significant not to send money everywhere. Then we check the token you will get back is in collateral list. So we should really have some experience how to evaluate these tokens and then the transactional batch will be executed and after that we will compute health factor just to be ensured that there is enough money to pay the debt back.
00:05:42.698 - 00:07:05.766, Speaker A: Is it clear or any questions at this point guys? Okay, let's move forward. And the problem we really want to solve using bots that probably users should continuously check their health factor, they really want to go to vacation and for example, forgot about some debt and so on because as you know, crypto is a high volatile market and you could not predict what could be even the next day. So we try to find a way how to solve the interesting problem of at first part automation of everyday leverage activity. Another part, what we really want to do is to be able to connect different servers to manage your portfolio. As you know, if you want to build a bot in Python, in TypeScript or Rust, you should provide a private key. It's not safe when you will keep it in plain form on your web server because someone could crack your server, take the key and steal the whole money. So we want to solve this problem as well and of course, we want to create a lot of possibility like ecosystem like an app store for unleashing creativity and create a lot of different stuff.
00:07:05.766 - 00:08:17.690, Speaker A: And here how bot works. So just to remind credit account simply works as a smart contract wallet, but now not only you can send transaction, you can allow external smart contracts to do it on behalf of you. It's a quite simple idea. However, we have a very robust permission system so you can allow some bot just to add collateral. It makes sense because if your health factor is going down you only need to implement one function just give me a collateral somehow or you can build a bot for example which could really swap one asset into another and could be done like add collateral and withdraw. So basically the idea is a very simple it's doable during the hackathon what you should done is the way how to automatically provide transaction on behalf of account owner and how to build a trust model. Because of course owners could be worrying about allow some bot which do not check and meet some security measurements.
00:08:17.690 - 00:09:12.494, Speaker A: So there are a lot of ideas which we can implement. So the first part of course it's AI agents, portfolio management and different stuff. You can use chat GPT, you can go to hugging face and find pretrained model wherever you want because now you have the way how you can really automatically execute any prediction. With bots we can connect to really a lot of interesting stuff which could be computed off chain because it's quite difficult to build neuron network using smart contracts. But here you can build some part off chain and then allow to be executed by bot. I think it's a really interesting and good stuff to development. Of course.
00:09:12.494 - 00:09:37.462, Speaker A: Great. UX it's amazing. You can connect your credit account with Telegram, with Lens, wherever you want. Because, as I said, you should not keep your private key. You can set permissions, you can really provide a lower possibility to manage your fund. You can say hey, my Telegram bot could be ragged me more than ten person in months. And even in the worst case, you will still have your money.
00:09:37.462 - 00:10:34.934, Speaker A: So it's incredible. You can build different things related to health factor protection comparing these parts protocol so you can say guys, hey, you have for example credit account going to be liquidated soon, a few notification, but if a user invocation and forgot ledger somehow, you can do it for himself and take some profits. Also good. And of course a lot of stuff to be integrated cow swap one inch any protocol. For example, you can bid a limit order bot using flashboard together. So I think it's also pretty cool stuff because using Cowswap you can find better rates, you can really execute limit orders and create totally new experience for credit account users. So a lot of interesting stuff could be built and let's check how it works in practically because we are developers and on hackathon we should deliver some code.
00:10:34.934 - 00:11:22.738, Speaker A: Let's check how it works step by step. Let's start from the bot anatomy. So at the first part you should create any function which could be executed and here two possible types of bots. Some of them could be private. For example, you are hedge fund and you want to create some proprietary wealth management system, which will be closed and used inside your organization. You can create some access modifiers like owner only then bot you connect to your system is fully private, it's totally okay. And then you can maybe stream some AI data or some risk data to the bot and understand how to manage the funds.
00:11:22.738 - 00:12:07.030, Speaker A: Or maybe what is more interesting, you can build a public bot and it has no access modifier. So everybody could call it, everybody could connect it to its own account. And then of course these execute methods could be triggered by you if you have some server. Or you can ask any automation platform like Gelato for example, then we should build inside a trust model. Gearbox bots has a very and incredible open API. So we have some things to measure and help you to measure. For example, you can store some balances to prove the user that you do not take more.
00:12:07.030 - 00:12:57.142, Speaker A: You can really set the minimum level or health factor after the execution and so on. But the primary efforts to build the trust is on you. Because for example, if you make a swap from one token to another and you want to say hey user, we will never pick a swap than 5% worse than chain link. It's an idea. So you in the trust model block when you can see a function called store state, just get a chain link price. You compare this price with tokens and then you can check it after multicolored execution to prove that everything is okay. If the price was not so good.
00:12:57.142 - 00:13:44.142, Speaker A: For example, you have a strong price impact on uniswap you will reward pretty simple, build a good trust model and users who you provide this public bot will really happy. And the central piece is a multicolored. So gearbox allow you to really combine transaction in the batches. It's quite cool. So you should not really do continue things approve, approve, call uniswap, approve, approve called curve and so on. Just list what you need. If you want to call uniswap, call uniswap and Gearbox itself will provide needed allowances approvals and take them back after the transaction.
00:13:44.142 - 00:14:44.920, Speaker A: If you want to build more complex stuff related to adding quota and so on, everything, the whole account management could be also done in the same multicol. Any questions at this part? Everybody knows how to build? Okay, perfect. And there are three corner things I believe. Maybe I couldn't go more details, but what we can deliver today for you, we have a public testnet. It's unville fork for everyone. If you want to have your own personal public envelope fork with deployed V three, just ask our team on a stand. Or we will provide any different things like Telegram channel, discord channel and we will provide an URL for you, which represents RPC.
00:14:44.920 - 00:15:24.980, Speaker A: We have a pretty fast res unwell which could really help you to test your solution much better than you will really use infra for example, or Alchemy. Each such deployment lives 24 hours. Keep this in mind multicolored what I mentioned, amazing tool to put all transaction together to be executed at once. And another part we can also provide. Keep in mind router IP. Router could help you to find the best path between two assets. So if you have no idea how to build multiple, it could be a little bit more complex.
00:15:24.980 - 00:16:18.600, Speaker A: During this today's on hackathon, just ask Router and say hey Router, help me, I want to swap USDC into this convex position what to do and you will get multiple immediately. Very cool. So basically, do not spend time on small things, things wider and create a great picture. So we have all those tools together, just ask for them. And now let's check what I already promised as a code and I will show that oh, I think it should be yeah, and prove that writing bots, it's a very fun things. So basically here it's not count manager. I think limit order bot what we already mentioned before, it's quite easy to build.
00:16:18.600 - 00:17:09.064, Speaker A: So of course, the first part you should clone our repository as it's written in Docs, just Gitlan force install and everything you need in the repo of the smart contract deployment. No more complex installation. Then you can start from this like a boilerplate and create wherever you want. So nothing to go deeply to libraries and find different stuff. So here you can see a very simple things just to explain the limit order bot. So we have an order and here you can see borrower is account owner, manager is a credit manager. And this is a contract which help allow you to really get and execute different stuff.
00:17:09.064 - 00:17:46.512, Speaker A: Credit account is the address of credit account token. In this token you want to really go out from account token out what you want to get. And I think all other things are pretty understandable here it looks like a uniswap transaction struct or similar to it. So you create a simple contract. Let's keep orders one by one in a mapping and to store the latest ID. Let's add an internal variable called next order ID. A few events just to be able to manage what's going on with your contract.
00:17:46.512 - 00:18:22.192, Speaker A: And of course for monitoring as well. And here some errors to understand what was incorrect. But here, as I said, three functions to show how it works. The first part is the part when you can submit order. It's a pretty simple, we just store it in a mapping and increase the index of order ID and emit events. The second part we just want to cancel order and we cancel it here. And the latest part is execute order.
00:18:22.192 - 00:18:51.708, Speaker A: So maybe it's the most interesting part of our bot. So everybody could call execute order. So it's why limit orders could be called by any gelato person or any other staff. And of course here we do not focus on how to pay rewards. But of course it's up to you how you are going to pay this. And you can see it's quite simple. The first we validate and get amount intend and man amount.
00:18:51.708 - 00:19:26.630, Speaker A: Then we transfer funds from MSG. Sender to the bot account because bot will be counterparty in this multicol and create approval to the manager and then it's quite easy we create multicol of two positions the first one is okay sorry yeah, sorry I hope this all codes so you can find in our repos thanks for attention and your time and let's build together.
