00:00:23.100 - 00:00:25.250, Speaker A: All right, we're good. Stream is up.
00:00:26.820 - 00:00:27.184, Speaker B: Cool.
00:00:27.222 - 00:00:28.450, Speaker C: Can I get started?
00:00:33.380 - 00:00:38.450, Speaker A: Stand by 1 second. Thank you, everyone who is just joining us now.
00:00:39.380 - 00:00:40.130, Speaker B: Okay.
00:00:49.180 - 00:01:11.550, Speaker A: Okay. I'm actually going to jump in our MC. Luke is having some technical problems. I'm Andrew with ETH Global, and I'm here with my colleague Luke, also from ETH Global. And this is the Aztec workshop. Private trading with Aztec Connect. We have Joe Andrews from the Aztec team.
00:01:11.550 - 00:01:35.750, Speaker A: He's going to be giving a talk that you guys are encouraged to interact with. So this is questions either in the zoom chat or you can raise your hands and we can try to field questions as we go through. But with that, I'll let Joe take over and go from there.
00:01:36.940 - 00:01:37.304, Speaker B: Great.
00:01:37.342 - 00:02:12.480, Speaker C: Thanks, everyone. Yeah. As I was saying, we want to make this interactive. I'm assuming the audience is fairly technical, so I'm going to run through some slides. But I think the fun part is getting on to kind of a demo and how to actually write a bridge contract and be in with a chance to win our bounty. So let's get started. So we're thrilled to be sponsoring this week for this two week hackathon.
00:02:12.480 - 00:03:10.790, Speaker C: We're sponsoring a 5000 ZK die prize for the best bridge contract, which is built on uniswap V three and Aztec Connect. And I'll go into a bit more detail on what Aztec Connect is in the following slides. ZK die is just our shielded die, which is on the Aztec roll up. So we'll pay the die out kind of privately through Aztec, which is just a nice thing for us. So what is Aztec Connect? Aztec Connect is a way of talking to any layer one DeFi protocol or smart contract from within the Aztec network. So if you've got shielded funds on Aztec, let's say shielded Dai Zkdi, you can send a transaction on Aztec on layer two. That transaction, the intent of that transaction is to talk to a layer one smart contract, uniswap ave really any DeFi protocol on layer one, you're talking to the same liquidity that's on layer one.
00:03:10.790 - 00:03:58.980, Speaker C: And the benefits are you've got privacy as the source of the funds is Aztec. So everything's shielded. And the great part is that if other users are doing the same thing as you, your transaction is batched through a process of DFI aggregation. So we can deliver ten to 30 times gas savings for popular protocols such as swapping and lending all through this simple Aztec Connect interface. I talked about this previously a little bit, but just a bit more information on how this works. We aggregate layer two transactions for each bridge ID. The bridge ID is pretty much just an ethereum address with some more information around assets and kind of what is expected back.
00:03:58.980 - 00:04:56.580, Speaker C: So a roll up provider will kind of aggregate layer two transactions, which are zero knowledge proofs, aggregate them together and one large l one trade will happen on behalf of all of those transactions. I'll go into this into more detail on the next slide, but some of the high level stats of what's possible using this flow is it's around 8000 gas per user for the privacy side of things, and then you split the cost of the L One transaction. So if you're doing a uniswap trade, it's around 150,000 gas, depending on which path you take through the router. Worst case scenario, you pay 158,000 gas, and it's private. You don't get any gas savings. Best case scenario, you're batched with 100 other users, and you pay a fraction of the L One gas cost, and you kind of have uniswap trades with privacy for around 10,000 gas. The system itself can support multiple kind of layer one interactions per roll up.
00:04:56.580 - 00:05:41.220, Speaker C: And at launch, we're targeting 256 transactions per roll up, with blocks going every 20 minutes. So this should give you an idea of what's actually possible as we get closer to kind of production. Right now, we're on Test Network, and we're trying to incentivize some really great bridge contracts to be written so that we can bring scaling and privacy straight to L. So, as this is a uniswap hackathon, let's go through how this can work with a uniswap trade. If anyone's got any questions at any point, please stop me and I'll go over stuff in more detail. But I think we want to get through the slides quite quickly to get into the code. So for a uniswort trade, let's say I want to swap E for Dai.
00:05:41.220 - 00:07:01.112, Speaker C: A user is able to create a transaction using the Aztec SDK. They take their shielded E and instead of sending it to another user, which is the current functionality of Aztec, they create a proof which effectively sends it to a bridge ID. In return for kind of spending the shielded ETH, they get what we call claim notes, which are really just pieces of encrypted value that represent a claim on the result of a future DeFi interaction. In step two, this transaction arrives at a roll up provider, and our roll up provider bundles up hundreds of these DeFi proofs together into a roll up proof. Any proofs that are going to the same bridge ID will be bundled into kind of one transaction, and the whole roll up is then sent to our layer one smart contract, which owns all the funds which are inside Aztec. So currently, the roll up contract just does payments, but as we upgrade it for Aztec Connect, it will be able to support all these DeFi bridge contracts as well. So if the roll up proof is valid, then the roll up contract effectively has loads of little tiny proofs inside the user's, DeFi proofs that have been aggregated in a giant roll up that give it authority to send e on behalf of all those users to an Aztec Connect bridge contract.
00:07:01.112 - 00:07:49.368, Speaker C: In this case, one that's representing uniswap. So at step four, the bridge contract now has a load of e that it wants to swap for die via uniswap just the standard kind of uniswap v two or uniswap v three swapping happening directly in a smart contract. And the bridge contract is then responsible for returning the die in the same transaction to the roll up contract. And the last step in this is just the roll up contract recording kind of what happened. The reason we have to do this is because in step one, the user didn't know quite what price they were going to get. So they weren't able to specify the amount of claim notes they were going to actually receive in terms of dai. They just know their pro rata share of the overall transaction.
00:07:49.368 - 00:08:50.304, Speaker C: So the interaction result basically lets the roll up contract record this interaction and it allows us to kind of work in a world where the exchange rate is not known ahead of time. The next kind of block is completely this happens automatically and without any interaction from the user. All the data to do this is already on chain and it's contained in this interaction result. But the next block, the rollet provider can create these untrusted claim proofs for every user who did a DeFi proof and what the claim proof is actually doing. It's proving the correct distribution of dai for every user who had a claim note for one bridge ID. So as an example, if I put in one ETH and someone from Aztec, Charlie, also put in one e, we're going to end up with kind of a claim note worth one, and Charlie's going to have a claim note worth one. And if we get back 4000 die exchange rates are quite bad.
00:08:50.304 - 00:09:21.832, Speaker C: Obviously we both would be entitled to 50% of that. So that's kind of what the claim process does. But as I said, this happens all automatically by the roll up provider. And there's no need for the user to do anything. The user just waits for another block. This is an ethereum block, not Aztec block, and they will receive back effectively notes that are now worth CK die on Aztec. In step two, those CK die notes are completely fungible.
00:09:21.832 - 00:10:07.560, Speaker C: They can be sent, they can be withdrawn from the roll up back to l one, or they can be used in future DeFi interactions through other bridges. The best part about all of this is that it's completely private in terms of identities. So because the source of funds is shielded ETH on Aztec, the identity of all the users are kept encrypted throughout this entire process. All you can see on chain is a lot of DeFi proofs were created. You can see the value in each DeFi proof, but you can't see who sent it or who it's going to. And if you look at kind of ether scan, you just see the aggregate transaction. So you see the aztec roll up contract, trading with Uniswap directly and receiving dieback.
00:10:07.560 - 00:10:50.250, Speaker C: And this creates a very powerful kind of privacy set for private transactions and basically brings very strong privacy guarantees to DeFi. That was a lot of talking. So this is maybe a more pictographic representation of the same flow. These blocks here are kind of the L one blocks. And this graphic here is just a representation of two users wanting to send ETH to get die back via Uniswap bridge. So they both put in five ETH from their shielded ZK ETH and Aztec. This is bundled up in a roll up.
00:10:50.250 - 00:11:42.404, Speaker C: The roll up smart contract then interacts with Uniswap, sending tenny out. Uniswap sends back 10,000 die, and that's automatically distributed pro rota to each user on Aztec. Ah, we'll go over this in more detail in a second, so I think we can do this one quickly. But the way you interact with kind of the Aztec rollout contract and a DeFi protocol is by putting a contract in the middle we call a DeFi bridge. This basically just maps a DeFi protocol to an interface that the rollout can understand. We think we can hit most DeFi protocols this way. The interface supports up to two input tokens and two output tokens, and it can also handle async flows.
00:11:42.404 - 00:12:45.150, Speaker C: So it can kind of be finalized later on, not in the next block if you want to do something like an LP position or a more complicated flow. So, ideas for the hackathon, and this is where it may be useful to be a bit more interactive and take questions before we go into the code. Having privacy, we believe, enables flows that aren't really possible on layer one today. So this simple example is around a whale who wants to sell a large amount of ETH for die. Let's say if they went out and tried to do this kind of today, their options are go to a centralized exchange or an OTC kind of trader, or they can go to Uniswap. They could try and split it into smaller trades on Uniswap, but their trade intent is probably known. If you see someone who's got a lot of ETH selling units of ten E over time, it's kind of obvious what they're trying to do.
00:12:45.150 - 00:14:04.448, Speaker C: Or they can do a big trade on Uniswap directly. And the price impact and kind of available slippage for front running is very high in this case, which I put a sad unicorn for, because it's the one case where Uniswap is not able to kind of perform like it does for smaller users with Aztec, we think we can solve this. So you can now do things such as time weighted average orders. That same whale can break down their large trade into hundreds of smaller trades. And because their identity is kept hidden, and the amount of funds they have in Aztec is also kept hidden, it's now possible for them to average in or out of a position over hours or days without revealing their trade intent or how much they want to buy or sell. We think this is kind of a way of massively changing the profitability of large trades, going through uniswap, and helping to remove not all mev, but identity based front running. So you can't now front run made trade based on my other positions or kind of how much of an asset I have if you think I'm selling.
00:14:04.448 - 00:15:03.540, Speaker C: So the first kind of simpler task is to write a bridge contract. We've got a bridge contract at the moment which supports Uniswap V Two. We'd like to see it updated to uniswap v three. And we'd like to see a UI kind of that enables someone to come along, create a load of Aztec transactions, that allows a trader to kind of split a large trade into lots of small trades that can be drip fed into the market over time, protecting their privacy. One of the kind of key things about this ability to split it into smaller chunks is the gas price. If each of these trades was kind of costing the same as an L one transaction, it may not be profitable to do this, but because we get batching here, the hope is that obviously, if this is a liquid asset pair, other users will also be wanting to swap E for die at the same time. So this trader is kind of bundled with those other trades and gets a much cheaper kind of gas price per trade.
00:15:03.540 - 00:15:18.670, Speaker C: So you can afford to split it into smaller sizes without having very high gas costs. Does anyone have any questions on that one before I go on to the next one? Given this may be something that someone wants to start hacking on.
00:15:22.180 - 00:15:22.656, Speaker B: There are.
00:15:22.678 - 00:15:25.280, Speaker A: A couple of questions in the chat.
00:15:26.180 - 00:15:27.692, Speaker B: I can't see the chat.
00:15:27.836 - 00:15:29.730, Speaker A: I can read them to you if you are.
00:15:30.180 - 00:15:31.520, Speaker B: Oh, there's a chat.
00:15:33.300 - 00:16:19.564, Speaker C: This one from Olic. Cool. So the privacy is not volume dependent. So the privacy set here is basically all the users who've ever deposited the source asset to Aztec. So if you're kind of using Zke ETH in your bridge and a user does a transaction that kind of takes their Zke and sends it to uniswap, as long as the amount of that transaction is not, like, astronomically. Large. Their privacy set is all of the deposits into Aztec.
00:16:19.564 - 00:17:06.348, Speaker C: And those could be deposits for payments could be deposits just for mixing or deposits for other bridges. So the more bridge contracts there are, the better the privacy set is for everyone, but it's not dependent on the number of users in your particular batch or in that particular bridge interaction, if that's helpful. And the second question, the whale could split his ETH across multiple wallets. I guess the way you would do that is either out from Coinbase. So Coinbase is basically the largest centralized mixer. So you could set up loads of unique wallets and fund them each from coinbase. Or you could use tornado cash or the current Aztec system, which is about 50 to 100 times cheaper than tornado cash to kind of make these fresh wallets.
00:17:06.348 - 00:17:45.404, Speaker C: But it's a bit of a user experience nightmare. You have to kind of keep track of all these wallets, make sure you don't dock yourself or accidentally link them. So we think this just provides a much nicer way of doing this through an SDK and completely decentralized. It's a good point. The bulk union sort of trade would be more susceptible to front running. There's a couple of things. So you can use flash bots, and that's kind of one thing we're looking into.
00:17:45.404 - 00:18:17.830, Speaker C: You also have kind of a larger collective bargaining power because there's multiple users in the roll up. You can effectively pay more per unit of gas. You can pay more per unit of gas for a transaction because there's more users. But you're right, the roll up is susceptible to front running. One advantage, and this is kind of leading on to the next idea, is that if you have a bridge contract that does ETH die and di.
00:18:20.040 - 00:18:20.356, Speaker B: The.
00:18:20.378 - 00:19:16.904, Speaker C: Naive way of doing that would be doing two large trades on uniswap. But you can now write a bridge contract that nets the two. So the only thing that can be front run if you front run the roll up is the Delta. So if kind of more ETH is being bought and sold on Aztec, then you can front run the difference. But you can't kind of the only way to get in on that transaction is actually to be part of the Aztec network and have a DeFi transaction. Anything that is not private is that a specific address is interacted with Aztec. You can see that a specific address is deposited to Aztec.
00:19:16.904 - 00:20:08.670, Speaker C: Correct. You can't see what that address has done in Aztec. That's correct. You also can have addresses that are kind of fresh directly in Aztec. So you could potentially do kind of private on ramps, private off ramps, if you didn't want to have the kind of layer one deposit. I'll come back to the roadmap question later and we can go into the more exciting, kind of but slightly more difficult second idea. We have the second idea kind of basically we came up with it because of some of the front running problems that could happen if the roll up is incredibly successful and there's large uniswap transactions happening.
00:20:08.670 - 00:21:00.540, Speaker C: And it's taking advantage of limit orders with uniswap V three. So uniswap V three enables kind of two types of limit orders, which are expressed as single tick kind of LP positions. So you can kind of have an order where you're taking profit. So you've got e and you want die, and you want that to happen kind of above the current price range. So say, let's say the price is at 1500 and you want to sell when it gets to 1700. You can kind of provide out liquidity for that range and you could end up with die opposite. Obviously, if you think ETH is going to crash at some point and then rebound, you could put like a limit order in to purchase ETH, let's say at 1200, the price was 1200 die.
00:21:00.540 - 00:22:04.880, Speaker C: So those two types of limit orders are possible today on Uniswap, but they have some problems. The main problems are you have to enter into an LP position. So it's expensive, not really suitable for kind of everyday users. The position must also be exited whilst the price is in your target range. So if the price goes on the right up to 1650 but then comes back down to 1500, you'll receive trading fees, but your position will be back in ETH again, which is not what you wanted to do for your trade intent. So you need to kind of act quickly and monitor your positions, which cost a lot of gas. Secondly, everyone can see your limit orders and they can kind of see they can link different strategies together again, which is not ideal if you're kind of trying to do hedging or kind of any other kind of types of orders.
00:22:04.880 - 00:22:36.430, Speaker C: So we think that Aztec Connect can also solve this. You could kind of, if you're a large whale, kind of do these limit orders and you probably wouldn't mind paying the gas fees to transact as an LP and then exit the position. But if you're trading kind of one to ten k in USD terms, the gas costs really start to eat into.
00:22:37.360 - 00:22:38.110, Speaker B: The.
00:22:39.920 - 00:23:50.740, Speaker C: Overall transaction price. The idea here is that you can create Aztec Connect bridge contracts that for a given asset pair. So let's say Eftai set up these single tick LP positions for popular kind of ranges and they do that on all the users, on behalf of all the users who entered into that particular kind of bridge ID. So the effect here is that lots of users can club together and in terms of the roll up, they look like a whale. It's a very large trade, it's a very large kind of LP position. In the example here, I give we have ten trades of a 10,000 and the economics suddenly flip on the head so that you can do very interesting things like incentivizing a keeper to automatically close the position when it's in range. So the idea here is to write a bridge contract that helps users effectively like a private limit order exchange where the identities of all of the people in the order book are hidden.
00:23:50.740 - 00:24:42.390, Speaker C: But you use Uniswap V Three to process the limit orders and maybe chain link keepers or other keepers to incentivize the closing of the positions with the liquidity fees that you get from being in the position. I did some kind of back of the envelope sums down here to work out that this is actually including paying chain Link Keeper gas costs at a pretty high gas price. The trade is still profitable. So it'd be quite nice to kind of have a system where you can set up these limit orders or take profit orders for large amounts over time using Aztec Connect bridges. This one is a bit more complicated, but I'm happy to take some questions on it.
00:24:43.240 - 00:24:44.710, Speaker B: Some more questions here.
00:24:45.800 - 00:25:40.840, Speaker C: How expensive in gas is Aztec proof checking? So validating a roll up costs around 400,000 gas and we can fit between 256 and 512 transactions inside that. At the moment, we're working to expand that pretty drastically. The important thing here, though, is you don't need to fill the whole roll up. So we have payments happening at the same time. We have different bridge interactions happening at the same time. So at Launch, we think that we can get the cost of being in the roll up down to around 5000 gas for a D Five interaction. So if you write a bridge contract, the only thing the user has to pay is the cost of the L One bridge contract and 5000 gas for doing the proof.
00:25:40.840 - 00:26:24.020, Speaker C: We're going to be running blocks every 20 to 30 minutes launch, but there's nothing stopping us kind of if we have the transaction volume, running blocks, every kind of ethereum block, it's just a case of getting a flywheel going and making there be enough transactions for everyone to make those profitable. And proof generation happens on the client. This is private, so you create a little proof in your browser. Takes about 10 seconds, but five to 10 seconds, depending on the device. The roll up also has a proof generation cost. It's about two to four minutes, but we haven't really paralyzed it right now. It's not the bottleneck.
00:26:24.020 - 00:26:33.320, Speaker C: How long do I have? Do I have time to go into kind of a demo and code that went on a bit longer than expected?
00:26:35.180 - 00:26:43.596, Speaker A: Yeah, you can keep going. There's not another workshop right now. There is a quiz night if people want to go, but you can keep going.
00:26:43.778 - 00:27:14.870, Speaker C: Cool. Well, let's do an example of this. Working on Gurley, the test network, and then I'll post a link to this starter kit we set up, which is basically just a solidity contract and some test files that you can change. And if the test pass, your bridge is working, the goal for the hackathon, I think, is to submit a solid contract by the end of kind of two weeks. We'll then get that deployed on Gurley and working with the testnet roll up.
00:27:16.760 - 00:27:17.510, Speaker B: Cool.
00:27:18.940 - 00:27:57.330, Speaker C: This file here is on our GitHub under. This is kind of using our SDK. It's using a slightly older version of Aztec Connect, but basically it's using an already deployed uniswap V Two bridge. And it runs through kind of some of the flows. So what I'm going to do next is take some ETH. I'm going to shield it on Aztec, end up with Eke ETH. So zero two ETH here, wait for that to settle and then I'm going to do a DFI interaction to swap die privately using uniswap V Two.
00:27:57.330 - 00:28:14.790, Speaker C: The way that works is we've got this uniswap bridge contract already deployed. I'll just run this and then I'll take a little bit of time for these to actually process because the test machine is not our big roll up server, but we can look at the ether scan output and see what you can see.
00:28:21.520 - 00:28:22.270, Speaker B: It.
00:28:27.840 - 00:28:48.914, Speaker C: Demo gods. Maybe this is not going to work today.
00:28:49.072 - 00:29:34.030, Speaker B: Day wrong second, sorry, 1 second.
00:29:34.180 - 00:30:42.872, Speaker C: I think I got my private demo private key wrong. We'll switch to the other one, something that got corrupted on my BS code. I'll come back to that one in a second. It so we have this repository, I'll just post it in the chat so everyone can see this. If you find the bug, it depends where the bug is. This is the starter repo for kind of the docs as well of how bridge contract works. And it has kind of some test cases and an example kind of uniswap V Two contract.
00:30:42.872 - 00:31:38.652, Speaker C: So I'll go through this on my Vs code, but I'll just switch across actually. So we've got inside here in the source folder, we've got a uniswap bridge test. And what this does is it simulates the Aztec roll up calling a bridge contract. It calls it with kind of different assets and different amounts and it expects the bridge proxy to receive assets back. So it's actually quite a simple interface to write the contract. You just need to write stuff in solidity and all of the kind of zero knowledge and roll up cryptography is abstracted away the way developers kind of and users actually end up interacting with. This is via the SDK you create a proof that kind of you send to the roll up and then that lets the roll up actually call your bridge contract.
00:31:38.652 - 00:32:21.020, Speaker C: But this kind of starter kit doesn't worry about any of that. It just mocks this effectively. So what this looks like is in this case, we have a uniswap bridge and this uses V Two. But it's quite a simple bridge. It's basically the moment only has support for swapping ETH to a token and a token back to ETH. All of the bridge functionality happens inside this convert function. This function is called by the Aztec rollout contract through our DeFi bridge proxy contract.
00:32:21.020 - 00:33:23.920, Speaker C: And before this point you can assume basically that the Aztec roll up contract has sent you ETH if your input asset is ETH or Tokens if your input asset are tokens. And as before, you can specify two input assets and two output assets. And this function should basically do the work of interacting with the DeFi protocol and it needs to transfer tokens or ETH back to Aztec and tell the call of this function how much you've returned. So in this example we only have one output asset and we only have one input asset. So we're taking ETH and we're swapping it for die. And I can run that just by doing this. So we'll kind of spin up a local ganache.
00:33:23.920 - 00:34:09.890, Speaker C: It's just going to run the test. This is kind of the very simple flow. There's a few things in the interface which I'll go through in a second, which I think are quite useful for kind of more advanced flows such as private limit orders or other things. So the main one is this boolean. Let me go to the interface. Actually, it'll be easier to talk through. So this boolean down here is async basically tells the roll up contract if it should expect the results back from this interaction now or in the future.
00:34:09.890 - 00:34:54.924, Speaker C: If it happens in the future. Effectively what the user's done is it's sent these assets into the bridge contract and the bridge contract owns them at that point and it can put them as an LP position in Uswap. It could buy an NFT, it could do lots of things. But in this case, in the limit order example, it's going to open up a single tick range position. How it does that and how it knows what to do. It's got the kind of input asset data and output asset data which tells us kind of if we look at the types we can kind of see that these are asset types of kind of ETH, ESC. 20 or virtual.
00:34:54.924 - 00:35:51.584, Speaker C: And we'll come on to what virtual means in a second. But go back to the interface. It also has this aux data field. So you can use the aux data field to basically specify kind of your price effectively. And this is all done by the client or the SDK and ends up in the bridge contract. So in this example, if we wanted to do the limit order, we would return async being true, which means these values would be zero. And then at some point later on when the position was in range, you could set up a Keeper to kind of call cam finalize with the ID of this particular interaction and also call the finalize function which actually returns the values back to the roll up.
00:35:51.584 - 00:36:38.370, Speaker C: So you can think of that as like the actual settlement. So when you've exited your LP position, you've got the die back, need to send it back to the roll up and you need to effectively disperse it back to all the users who participated in that particular trade, let's say. So the goal for the hackathon for us is that people kind of take this project and come up with their own bridge contracts and we'll be awarding this 5000 ZK die prize for the best bridge contract. I'm around in the discord to answer questions. I've got. Lots of ideas on, I think how this could be used. I think it's quite a new primitive to bring to kind of uniswap and we're excited to see what people build.
00:36:39.780 - 00:36:41.250, Speaker B: Maybe take some more questions.
00:36:43.300 - 00:37:34.300, Speaker C: Does this mean a bridge is needed for every uniswap pair? No, it doesn't. So I guess challenge one would be to enhance this current bridge contract to make it such that we use the same bridge contract for kind of multiple assets. At the moment, we kind of can do ETH to any token or any token back to ETH. We couldn't do kind of token swaps just in this bridge contract. The interface itself supports it. You can have any input assets and any output assets in terms of batching. I'm not sure if that was the question, but your batch will only obviously be batched with kind of your asset pair.
00:37:34.300 - 00:38:01.688, Speaker C: So you can share in the same roll up as multiple different bridge interactions. But if you're doing kind of ETH die and I'm doing ETH BTC, that's going to result in two bridge interactions in the same roll up. So you only split the L one gas cost with people who are doing your exact bridge interaction. Let me try and get this other.
00:38:01.774 - 00:38:08.760, Speaker B: Example working because it's more funny.
00:38:34.900 - 00:38:37.744, Speaker C: I'll take some more questions. In the meantime, I just have to stare at this for a while.
00:38:37.782 - 00:38:40.650, Speaker B: It was working it five minutes ago.
00:38:55.590 - 00:39:32.550, Speaker C: Has anyone got any other questions? What's wrong?
00:39:32.620 - 00:39:33.240, Speaker B: Sorry.
00:39:35.850 - 00:39:46.060, Speaker C: Give me 1 second. Forgot to put in my new private key from MetaMask. You can see this one because it's fresh account.
00:40:16.080 - 00:40:17.164, Speaker B: It cool.
00:40:17.202 - 00:40:22.780, Speaker C: So this is our SDK spinning up. This usually runs in the browser.
00:40:24.480 - 00:40:24.796, Speaker B: And.
00:40:24.818 - 00:41:00.090, Speaker C: This is kind of just a TypeScript SDK. This is how your users eventually will interact with your bridge contract by creating bridge ID. Your kind of address. First step here is as you can see, if this is big enough, I'm going to deposit my .2 E. So I create a join split proof which takes my point to ETH and converts it into Zke ETH. The proof takes a little bit of time to create on the client and then it gets sent to the roll up.
00:41:00.090 - 00:41:25.280, Speaker C: The roll up on testnet is quite slow and it only handles two transactions at a time. But we can kind of wait for this to settle and at that point we have DKE, which we can use in future join splits or DeFi bridge interactions. So whilst this is settling, maybe I can take some more questions. How is astick stimulant?
00:41:27.780 - 00:41:28.144, Speaker B: Yes.
00:41:28.182 - 00:42:07.188, Speaker C: So every user pays a fee for their transaction. At the moment, it's kind of a break even. But the long term kind of model is that roll up providers will earn kind of fees from their users. So you can see in the code right now, every transaction has a fee paid in the assets that you're transacting in. At the moment, there's no markup on that fee, but longer term there would be fees there and as protocol owners, we could take some of that fee. It's kind of sustainability.
00:42:07.284 - 00:42:08.850, Speaker B: Long term. It.
00:42:33.350 - 00:42:36.290, Speaker C: So this is our roll up on Ether scan.
00:42:38.070 - 00:42:38.820, Speaker B: Believe.
00:42:40.950 - 00:43:47.140, Speaker C: This was my deposit transaction. So as someone mentioned earlier, you can kind of see that I interacted with this. I put 0.2 Ethan, but after that point it's kind of hard to see what's happened. There's not a very big privacy set, obviously, around the test network, but there's a much larger one around Mainnet, which is growing every day. In a second, our roll up provider will spit out a roll up and I'll get my Cke and then we'll kind of be able to use that in a bridge contract. There's the pending roll up.
00:43:59.180 - 00:43:59.816, Speaker B: And once.
00:43:59.838 - 00:44:41.190, Speaker C: It'S settled, the SDK kind of automatically decrypts it. And you can see here that in the logs, I've got an encrypted value now inside Aztec worth 0.2 e denominated and way. And now the user is going to do is buy some die by swapping on uniswap privately. So we created the proof, added a new DeFi transaction. We have to wait for that to settle as well, which will be another roll up. You can see here, this is the roll up one.
00:44:41.190 - 00:45:14.412, Speaker C: To save time, I may just go back to an earlier roll up. I'm not sure how long we've got, so we'll see one of these in a minute. But what you can see here is I think this was for 0.4 e if it was a different transaction. But we swapped 0.4 e for WEF to interact with the uniswap router. This is through the bridge contract I showed you earlier and then that was swapped against test die with a terrible exchange rate because I think the pool is not configured correctly.
00:45:14.412 - 00:45:56.050, Speaker C: So this test die basically came back into the roll up contract and was dispersed to the users with a different asset. So you can kind of see an end to end bridge interaction here. The roll up provider on testnet is kind of small, so it doesn't do that many of these. But you can imagine with the four machines kind of multiple bridge interactions with hundreds of users, this becomes a pretty great hub for kind of private trading and private DeFi. Any more questions?
00:46:05.940 - 00:46:07.424, Speaker B: It yes.
00:46:07.462 - 00:46:51.020, Speaker C: So this is our this is the test roll up that the SDK is connected to on testnet. We've changed the interface slightly on this one. So if you write a bridge contract using this starter kit, we'll be deploying a new kind of beefier girly machine that has the new interface towards the end of next week. So if you're writing bridge contracts, you'll be able to kind of test these things a lot quicker towards the end of next week once we've upgraded the machine.
00:46:51.680 - 00:46:52.332, Speaker B: Yeah.
00:46:52.466 - 00:47:38.102, Speaker C: So I think if you're planning on writing a bridge contract that takes advantage of this. I'd start in slozey. It looks like if you interrupt any underground assets you would DOX yourself. Can you explain what you mean by that? Sorry, maybe on voice or in chat? I'll keep going for now whilst okay, I'll speak to you on Discord.
00:47:38.166 - 00:47:38.826, Speaker B: Great.
00:47:39.008 - 00:48:19.830, Speaker C: You can see here that the first part of the process just completed. So these are the notes that give me my claim on the output. And in the second, these will be updated again. It so here's the latest one that kind of swaps four E, sorry for test tokens. And then there'll be a final roll up after this, which actually gives the user their encrypted die.
00:48:24.410 - 00:48:25.320, Speaker B: All right.
00:48:27.630 - 00:48:50.640, Speaker C: If there's no more questions, feel free to kind of reach out in the discord and also in the Aztec discord. I'll be around. So will some of our team members for kind of questions, support. If you want me to run through the private limit orders idea again or just kind of bounce some ideas around, send me a message and I'll be available.
00:48:52.710 - 00:48:55.330, Speaker A: Awesome. Thank you, Joe.
00:48:55.830 - 00:48:56.514, Speaker C: That was good.
00:48:56.552 - 00:49:04.630, Speaker A: I'm glad we extended it so you get through the demos there. Also remind everyone that this is recorded so it'll be up on the YouTube.
00:49:06.730 - 00:49:07.814, Speaker C: Go back to it.
00:49:07.932 - 00:49:19.180, Speaker A: And I'm also reminding everybody, yeah, he could be reached in discord in the Aztec sponsor channel, in the Unicode discord, as well as they probably have their own discord too.
00:49:19.710 - 00:49:22.060, Speaker C: Also Telegram or Twitter. I'm here.
00:49:23.150 - 00:49:23.898, Speaker B: Awesome.
00:49:24.064 - 00:49:44.670, Speaker A: I'm also linking in the chat in case you want a little something different going on right now. There's a Halloween Friday quiz night. The next 45 minutes, I think it goes 1520 minutes, I don't know. So I just linked it there. All right, Joe, thanks for the workshop. And we'll see everyone in Discord.
00:49:45.570 - 00:49:46.270, Speaker B: Great.
00:49:46.420 - 00:49:58.070, Speaker C: We just finished as well. So you can see here down the bottom, I got my die. You so yeah. Thanks everyone, for listening. And yes, meet you on Discord.
00:49:58.810 - 00:50:00.020, Speaker B: Thanks. See ya.
