00:00:06.730 - 00:00:29.160, Speaker A: Great. Hello and welcome everybody. Thanks for joining our workshop session today with mohammed, who is from parasop. And he'll be taking us through a session, build a limit order app. And yeah, with that, will hand it over to him to introduce himself and kick the session off.
00:00:30.490 - 00:01:12.978, Speaker B: Yeah. Thank you. Thank you, emily so, I am mohamed asen mami web3 engineer at PowerSwap. So, yeah, we're going to build together a limit order app. So first thing first. A limit order app is this thing when you want to buy a stock or you want to buy some crypto asset, let's say under some price, you want to set a limit order or you want to sell it for over a certain price. Then you put this limit order and it works the other way around with the buy.
00:01:12.978 - 00:02:13.090, Speaker B: So here we are going to do the sell together and we are building this with paraswap. Angelato so here is the app that we are going to build together. We are not going to start from scratch. I'm sorry. All the CSS, I did all the CSS and the heavy lifting of setting up everything, but it's going to be a cool ride. So why paraswap? First, paraswap is a dex aggregator, so decentralized exchange aggregator. And the idea of paraswap, if we put apart crypto, say I want to fly one person from paris to sydney, and I have multiple flights at different prices, and chances are the cheapest one is one with transits.
00:02:13.090 - 00:03:13.158, Speaker B: So, okay, I can buy this flight and I can fly cheaply from paris to sydney through roma and mumbai. But what if there is only two spots available and you want to fly four persons? So in this case, you have to make some choices. You can't fly all your passengers through the paris, roma, mumbai sydney flight. Or maybe you can negotiate with the company and you can end up paying a premium to get on this flight. But when you're going to pay this premium, you're going to find yourself paying more than a worse price, say this one or this one. And this is where it makes sense to split your passengers across all these flights. And this is where what paraswap does with your cryptos with decentralized exchanges.
00:03:13.158 - 00:04:08.650, Speaker B: And this is how optimal it is. So here we can see a real life example of a paraswap trade that everybody can do. And you can see that it works also in small amounts on networks like polygon. So why gelato? Gelato is answering this question, like how to wake up smart contracts. Because, okay, they are the best to explain this, but their white paper explains that first thing first, smart contracts are lazy, right? So the program software on the blockchain cannot run without triggering it via EOA. So an externally owned account. So at some point, it should be something outside of the blockchain that triggers the smart contract.
00:04:08.650 - 00:04:29.940, Speaker B: And you can come up with some boats. They are quite complicated. To maintain you have to have some DevOps capabilities. Also you can delegate this to a network. But it has to be decentralized. There are lots of questions. And actually Gelato is answering these questions.
00:04:29.940 - 00:05:08.058, Speaker B: So let's go together. First thing first. We are going to use quite amount of libraries which will help us on the way. Let's remind ourselves the app that we want to build. So as I told you, we have something that is quite it looks like it's working, but it's not. I can maybe write some stuff, but nothing is really picking. I can click here, for instance, on Connect to MetaMask.
00:05:08.058 - 00:05:37.094, Speaker B: And this is the idea. We want to connect our account to MetaMask. We don't want to say have a private key somewhere. So, okay, this is all what we are going to do. So first thing, let's remove the background as everybody is disturbed by this. So what we want first thing first is to connect our account to MetaMask. And this is where web3 react is a convenient tool to help you do this.
00:05:37.094 - 00:06:13.038, Speaker B: And it does. It really simply so. For this, let's just start and look at the structure of the project. It has been generated by create, react app. So we have an app component at the top. Then we go a bit down. So a bit deeper the structure, the body of the app, where we give it a web3 react provider, which is mandatory to use web3 react.
00:06:13.038 - 00:07:14.486, Speaker B: So it just gives the context to the rest of your app. And for using Web Three React, you have to give it a provider, which is actually a library. It's actually what's your wallet going to pass over to Ether JS, which I told you, which is going to be used. By web3 react so now let's get back to this connect MetaMask button if I go into main I have a structure with header a body but what we are looking for is in connect account so I did a couple of things. Styled apart, we have some default, so we have four connecting to MetaMask. MetaMask is one of the solutions to inject a wallet. Inside the DAP and web.
00:07:14.486 - 00:08:20.570, Speaker B: Three, React has this generic injected connector that will help us grab our wallet. So what we want to do is we want to activate whenever we click on Connect to MetaMask, we want to activate our wallet, so we want to connect it with the DAP. So for this, we need to grab the activate function, use web3, react, and we have to get the account, which is the public address. So let's get back to here. We have nothing yet because we didn't connect the wallet with the DAP. And we want to do it here. So we want to activate injected.
00:08:20.570 - 00:09:32.800, Speaker B: And now, if I click on connect to MetaMask. All right, I should see what's going on. We want to click on. All right, activate injected. Doesn't seem to work. All right, you know what, I'm going to use a cheat code so I'm getting my code from here. Ah, let's go, let's go, let's go.
00:09:32.800 - 00:10:54.214, Speaker B: Okay, let's double check some stuff provider it okay, I'm connect. Okay. All right, I got it. So apparently I was connected to the wrong network which is something I didn't support and this is because I'm connected to Ethereum and we want to do this demo on polygon so I will connect on polygon and this is it so I can refresh and prove myself that I can connect to MetaMask on polygon. So click on connect. Here is my address here. So once I connect in my address I can see it here.
00:10:54.214 - 00:12:04.940, Speaker B: There is this code here that formatted so we can see the whole address. So this is the first step. Now the second step that we want is to say handle this inputs here. So here I want to be able to select one of the tokens and I want to specify what amount I want to sell and here I'm going to get from paraswap the market rate and here it will be the calculation of what I will receive based on the rate that will be here. So by default I will have the market rate. This is what we want to do at first but then the user can change this rate to give a better rate for himself like to sell it at a higher price in the future. All right, so for this we have to go back to main and we have the limit order component which does everything that happens here.
00:12:04.940 - 00:13:10.370, Speaker B: So we go to limit order. We have some stuff, we have some variables declared but no logic yet because as we saw we can type stuff but there is nothing reacting at all. So what we want to do first is to maybe have some state. So I want to maintain amount state. So this one will goes for this input so I can give it to this input which is already done. This token input is a component that is reused between the token I'm selling and the one that I want to get. So we can see quickly what it does but it's mostly some presentational component.
00:13:10.370 - 00:14:47.310, Speaker B: So looking at the interface we have to pass an amount token address, a token change which is a callback function that we can use to update our state at a upper level and on amount change if we are allowed to change the amount. Okay, so we have the amount we can set on amount change so we can pass set amount and normally this should still work, we should still be able to type something. All right, we can look at DevTools to see if we are or not playing with some state. So let's see this one if I go up all right, meet order. So I do have a state where there is 20 312 here and it's a string. All right, I want to keep track of the source token address. So the one that I'm sending, so I will also have a use state and all right, let's do this properly.
00:14:47.310 - 00:15:41.600, Speaker B: We want to do the same for the desk token address. So now we have so we can see that there is an error. We are passing this token address, but there is an error because the exercise, the idea is to have to init this value with some token. So this is what I'm going to do. I'm going to grab my token list somewhere. So I have this file where I have few tokens. So I'm going to grab the matic address on polygon, which is ethereum on ethereum, sorry.
00:15:41.600 - 00:16:47.430, Speaker B: And I want to do say die. All right, so I initialize my source token as matic and my desk token as die, right? Okay. So I still have some trouble keeping. Apparently I didn't manage this one all right, because source token could be undefined or maybe not. Okay, so now I have the source token, I can give it this setter. So we have default tokens. I click on this exchanges.
00:16:47.430 - 00:17:50.214, Speaker B: Okay, so I am keeping track of this state and this one and for the desk token. So I need to pass also my setter here. So it's somewhere like here. I hope everyone can see what I'm doing here. All right, so now that we have our source token address and test token address, what we want is okay, so we have the amount first, we have to pass an initial amount just to see some number and it's going to make sense after when we're going to retrieve the rate. So first thing first, we're going to retrieve the rate. So the market rate that I'm going to get from PowerSwap.
00:17:50.214 - 00:19:07.250, Speaker B: So the market rate, I can see that there is a hook already. So use market rate, it takes the source token, address, desktop and address and the source amount and we're going to use the PowerSwap SDK here. So let's just use the hook market rate and we're going to give it source token, address desktop and address an amount. All right? And if I look at the logic here, so I have a state, I have a use effect, a fetch, and I want to fetch some rate and I want ultimately to set the rate. So for this we can look at the documentation, how we can easily query some rate on paraswap. So you import PowerSwap, you create a new instance and you can call some methods on it. So get tokens, that's not what we are interested about.
00:19:07.250 - 00:19:39.966, Speaker B: And get rate, this is the one that we are interested about. So what we can do first is create a new instance of power swap here. I will give it network 137, which is the polygon chain ID. I want to get the rate. So I want to get sorry, the price route. So this plugin is AI powered. Sometimes it gets as well, sometimes not.
00:19:39.966 - 00:21:08.906, Speaker B: So we want to get the rate. Okay, I didn't write and as we are using TypeScript to pass some types and I think the IDE is a bit late, can't find this. Okay, the source amount, I give it a source amount here and it could be in the undefined. So let's say if it's undefined, we just skip. So looking at this, I can probably put a debugger and see what's going on if it's building first. Okay, it's optimal rate. So as you remember, we have always one here, so this amount will be one.
00:21:08.906 - 00:22:08.160, Speaker B: And we want to sell one token, one magic for server too busy, let's try again. It compute price error. All right, so I have an error when querying our API, so probably I didn't pass some info, right? Yeah. So I'm asking for one unit of magic, but in reality here. So as some of you might know, tokens are encoded with the decimals. So most of the tokens, if I'm not wrong, are encoded into 18 decimals. So here what I have to do is multiply my number.
00:22:08.160 - 00:23:00.526, Speaker B: I have to multiply it by ten to the power of 18. But if I want to do this, I'm going to run into overflow. So I need to use big number library, which will help me do this without overflow. So I can multiply and I can just do two fixed fixed formatting a bit. Didn't set up my prettier, unfortunately. So where are we? All right. Okay.
00:23:00.526 - 00:23:43.014, Speaker B: And I have another error here where it says optimal rate is not sustainable to optimal rate. So this happens if we have an error. So this price route isn't always optimal rate. It can be API error at some point. And now we can see what's going on. So we have a price route. We can see that we have a price route.
00:23:43.014 - 00:24:37.034, Speaker B: We can see it also in the network if it's more convenient. So these were all the failing requests and this one is working well, but we stopped everything, so we can see it. All right. So here we have a price route. So the things that we want to look at here is the source amount, what we passed. So one multiplied by ten to the power of 18 and the desk amount, which the most optimal amount we can get by selling at this point. But what we want to do first is to have an idea of the market rate.
00:24:37.034 - 00:25:19.562, Speaker B: But this is just indicative because what we want to do ultimately sell our token at a higher price. So this will help us compute a market rate. But this is not what we are going to use. If we want to use it right now, we have to call another API in the PowerSwap SDK that we can pass it the price route and it will help us execute a transaction right now. But that's not what we want to do here. So all we want to do is get an idea of what's the rate between these two tokens at instant T. So we are not going to finish this part of the code.
00:25:19.562 - 00:26:03.766, Speaker B: We are just going to get some code here that does the calculation. So the idea is that this price route can be an error. So we have to skip if there is an error or we have to handle it properly. But this is out of scope and this will help for TypeScript also. Then what we want to do is compute this market rate which is just simply dividing the test amount by source amount. And now we can set this rate. Once we set it, we can see that it's returned by this hook which is used market rate.
00:26:03.766 - 00:26:38.434, Speaker B: We can completely forget it from now on if it's working, of course. And we can look at where it's used. It's supposed to pass a market rate here. This rate is desired rate double exclamation point market rate. So as it's undefined, it's always be market rate at this point. And we are calculating a mean return that will be interesting at the end to show what amount we are going to get. So let's see if this is working.
00:26:38.434 - 00:27:21.490, Speaker B: It seems like it works. This seems to be the matic price for if we want to sell one matic today, you get 1.22 die which is also in dollar. It's an approximation of a dollar. You can put whatever value here so you can see that the market price shift a little bit. This is because the more you swap, the more you are having this price impact problem. That's what I show you in my analogy with the flight.
00:27:21.490 - 00:27:48.234, Speaker B: All right, we can also check at Ether. I have Ether here so I can see that one ether is 3158, which is not that much. All right, let's continue. So we have the market rate. Now what we want is to let the user put a rate here. So here for now, I cannot change this. So this is the idea.
00:27:48.234 - 00:29:03.700, Speaker B: I want to be able to change this rate. So it's really classic dev, it's classic react coding. So let's just do this desired rate, set desired rate and thank you GitHub Copilot. All right, I want to set the desired rate somewhere like here. So this is a matter UI component and it's going to give me at some point the event and I can use it to set my desired rate by default. Okay, so now I can see this rate and I can see I want to buy it to sell it only if it's over 1.4 and I can put any number.
00:29:03.700 - 00:29:47.182, Speaker B: So now we are over the market price and this is when this will be submitted. So let's connect our MetaMask and try to submit it. We can't. This is because the button is grayed here. So for this, I have also to have the whole logic to submit a sell order. And let's do it so I can use this premade hook, which is unsubmit order. And I can see that we don't have that much time.
00:29:47.182 - 00:30:34.160, Speaker B: So I'm just going to use my cheat paper again where I can show you that there is this hook. It's going to give us ultimately a callback. We're going to see how it's used. But this callback, we are going to give it to the button to submit here, this one, we can disable it if we don't have an account connected. Now we can submit, but at the end, we still have to have the logic. And the logic is quite simple, actually. What we have to do is so let's see if we have time.
00:30:34.160 - 00:31:11.740, Speaker B: So here I am in the use on submit order, which will return me a callback. This is where I'm going to submit to Gelato. So I have this hook that you can see by yourself. It's just instantiating. The SDK gelato. And what we can do here is grab this code that we had. So if the token is not it, we have to approve it.
00:31:11.740 - 00:32:04.380, Speaker B: If not, we can pursue with the transaction. And after this, we have a functional limit order app. This is just purely passing the so we are passing the token address from the two token address, the amount we want to buy to sell and the Min return, which is what we want ultimately. So I'm just going to revert this one so we can have it working. It should work out of the box. And let's try to submit an order in real time. So say I want to sell one magic for 1.3.
00:32:04.380 - 00:32:36.786, Speaker B: I can submit the sell here. I have MetaMask that opens. Okay, so MetaMask opens. Why? Because of web3 react that helped us connect to MetaMask. And when we submit this transaction, we are giving the provider to Gelato. This part I didn't show you, but this is what we are giving. Here the library, which is the one that we gave to Gelato.
00:32:36.786 - 00:33:17.826, Speaker B: And we give it the signer, which is our account. And instead of passing the private key, we pass it signer, which is an abstraction for saying this MetaMask account. I can confirm now this transaction. So let's confirm it. So this is a contract interaction and I can look at polygon scan to see what's going on. I can prove myself that it's working, to prove myself like it's working. But it can take some time.
00:33:17.826 - 00:34:09.940, Speaker B: So what I want to show you at the end is that we can easily, thanks to Gelato, see at all our orders. So by just fetching orders via their SDK. So we are not going to do it. We're just going to grab it from my previous coding session. So now that we have the order history. I can just see my orders here and this is quite simple code, like, honestly, it's just calling Gelato limit orders, get orders. And these orders, I can give it to this hook and this is it, this hook, I use it to just provide this list of entries, which is just react code.
00:34:09.940 - 00:34:59.810, Speaker B: So what I wanted to tell you at the end, you can go further. I advise you to keep this somewhere so you can go further by accomplishing this bullet point. Also, if you want to build with PowerShell, it's super cool because we have this permissionless monetization, so you have to check out the documentation. We are hiring react developers, we are hiring node developers, solidity developers, of course. And she can just keep in touch on Twitter. So these are our Twitter handles, but we are an army, as Munir likes to say. And I just want to finish by saying just judo.
00:35:04.970 - 00:35:33.680, Speaker A: Thanks so much, Mohammed, that was a really great session and yeah, I guess more time needed to get through absolutely everything. I've saved the questions in the chat and what I'll do is I'm going to transfer these over into the sponsor Pariswap Discord channel and Mohammed will be able to answer all those questions there and hopefully also share a link to the slides that he took us.
00:35:34.210 - 00:35:46.400, Speaker B: Sure, I can see all the questions in the chat, I'm just screenshotting it and I'm going to answer it in discord if it's okay for everyone.
00:35:47.090 - 00:35:58.178, Speaker A: Yeah, great. Thanks so much, Mohammed. Yeah, I'll also just transfer those over worries and thanks everyone for joining and yeah, have a great Monday.
00:35:58.354 - 00:35:59.220, Speaker B: Thank you. You too.
