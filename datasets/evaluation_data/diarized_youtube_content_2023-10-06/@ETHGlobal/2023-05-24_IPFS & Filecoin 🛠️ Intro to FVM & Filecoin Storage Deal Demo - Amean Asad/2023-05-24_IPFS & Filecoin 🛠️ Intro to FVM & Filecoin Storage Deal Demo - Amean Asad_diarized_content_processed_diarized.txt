00:00:07.290 - 00:00:33.846, Speaker A: Okay, so hello everyone. My name is amin. I'm a software engineer, protocol labs. I work on a project called filecoin saturn. And recently we've been using the newly launched fevm. And I'm here to present a quick intro to filecoin and fevm and give a quick demo of some of the cool things we've been building with it. So here is a quick agenda of the kind of workshop presentation today.
00:00:33.846 - 00:01:34.138, Speaker A: I'm going to start with a recap or intro on filecoin and then going to give an introduction to the fem and what it's about. Going to give an example, use case of how we use it at FalcoIn saturn and explain what FalcoIn saturn is and then give a short demo. Okay, so before we dive into the intricacies of fevm, let's have a quick recap on what FalcoIn is. And the de facto term that we say is FalcoIn is a decentralized storage system that is meant to onboard humanity's most important data. And you can think of filecoin as an AWS without a central entity or company that owns anything. And how does this work? Essentially it's a peer to peer network that stores files and has a built in economic incentive system to incentivize nodes on the network to behave well. And the consensus system is essentially proving that you store things reliably for a given period of time.
00:01:34.138 - 00:02:22.566, Speaker A: And there's some really marvelous cryptography that goes on to make sure that all of this is provable and reliable. And basically, in filecoin, users pay to store their files on what we call storage providers. And storage providers are essentially the nodes or computers responsible for storing these files and proving that they're keeping these files on the network. So essentially, anyone who wants to store their files or get paid for storing other people's files can join the filecoin network. So let's supplement this with an example. Let's say you have a lovely cat named dolores and you love Dolores so much, you think that Dolores should remain with the world forever. And you want to upload Dolores's picture to the fogwin network to store it forever.
00:02:22.566 - 00:02:52.626, Speaker A: Now you choose a nice compression type. PNG is nice because PNG is lossless. And we want to keep every feature of the loris there for people to see. And what you can do is essentially come to the falcon network and kindly ask to store the lorisis picture on there. And what will happen is that you'll be contacted by a storage provider. You can make a deal with that storage provider, there will be a fee for storing it, and you can determine how long you want to store Dolores's picture for and you pay the fee. And essentially it's on there.
00:02:52.626 - 00:03:50.598, Speaker A: And from there, you can get reliable provable methods that prove to you that dolores'picture will be replicated and you can retrieve it whenever you want as long as your deal is valid. And it's as simple as that. And hopefully this gives you a better idea what Filecoin is as a network and how it works. This is kind of a more detailed slide of what happens as part of a storage deal. So if you're a client, you attempt to make like a time limited deal on the Falcon network, you will make a deal with a storage provider. Initially the storage provider will give you an initial proof of replication and that essentially proves that your data has been replicated on the Falcon network. It's available and then over time, these providers will essentially give you what's called a proof of spacetime, which essentially just proving that they have stored your file and they're storing your file as time moves on.
00:03:50.598 - 00:04:52.060, Speaker A: And this is all done by some of the Marvel Scriptography that's part of the filecoin network and towards when the deal is going to expire, you can choose to renew it, or if the deal expires, you can just let it expire and Dolores's picture will disappear. So I want to motivate how naturally to come across something like the FVM, like why do we need it? How does it help Farcoin? So farcoin is great. We can store things, we can retrieve them, we can make sure that this storage is reliable. But let's think of some use cases. Now let's say that you're a user that wants Excel user experience. You want to store Dolores'picture, but you don't want to keep renewing that deal. Wouldn't it be ideal if you can automate the renewal of your storage deals that way that whenever a deal expires, you can have just like a subscription, like a paid subscription, and just says, as long as I have funds, let me keep renewing my storage deal.
00:04:52.060 - 00:05:34.694, Speaker A: Another example is that you can think of a developer, let's say a developer, you're trying to build an application on top of filecoin. That's a photo album application. A natural feature as part of a photo album application will be to add permissions who can access a certain album, who can edit images on the album, who can upload images to an album. So if you have a storage network like Farcoin, and you want to build something on top of that, how is that possible with such feature? Another example is, let's say you're a researcher. You're a researcher in machine learning. You want to build a nice model that detects meercats in your backyard and you have a nice data set for that, that's stored on fogoin. And now you want to train that data set.
00:05:34.694 - 00:06:16.546, Speaker A: So you want to outsource that computation and pay for whoever does that computation for you. How can you do so with these examples? What I described, the Falcon network would be really difficult to implement. And the common theme between these examples is that they need what they call programmability over storage. And that is exactly what the Fev gives us. It enables us to add a programmability layer on top of the things that we store. So it enables us to develop applications that have features like this. And this makes total sense if you think of major cloud providers like AWS.
00:06:16.546 - 00:06:54.206, Speaker A: They have storage solutions like RDS, S Three and all that, but they also have solutions that complement and supplement these storage solutions like Lambda Compute, Cloud, Front, which is a CDN, et cetera. Companies have realized that there's a lot of value to allowing people to add programmability to their storage. And the same applies for the filecoin network. And that's why the FVM exists. And a good question you might have is not why not use the EVM, the Ethereum virtual machine. And the reason is that the EVM doesn't have access to filecoin storage deals. Filecoin storage deals.
00:06:54.206 - 00:07:19.522, Speaker A: And that aspect of storage is unique and native to the filecoin network. So that's why you need the FVM and you cannot just not use the EVM. So, yeah, EVM is the answer. EVM brings programmability to filecoin decentralized storage. And this is a nice diagram to kind of display like how it's layered. You can think of the L zero as a filecoin network. That's all your storage, that's your data.
00:07:19.522 - 00:08:15.850, Speaker A: And then on top of that is the FVM, which brings Compute to the state of that data. And that enables to build other L two solutions on top of the Fogoin network which do computation over data. And that happens off chain. All right, so now hopefully it's clear what problem the Fem is solving and how it naturally comes in into the FalcoIn ecosystem. So let's explore more about what the FVM is. So what is the function of a blockchain VM? Essentially, it should act as a runtime to execute smart contracts and it should allow various smart contracts to interact with each other. And additionally, an ideal feature of a VM is that it allows you to reuse smart contracts that you've written for other blockchains on that existing VM without you having to rewrite that or modify it.
00:08:15.850 - 00:08:44.050, Speaker A: And these are like the core features of the FVM. Basically, FVM is like a multi VM runtime for the Falcon network and it's built on WebAssembly. And what does that mean? It means that it's built to support multiple runtimes. So you can actually build multiple VMs on top of the FVM. And the Fevm is one of them. I'm just going to describe that in a moment. And you can bring your own VMs and build on top of that.
00:08:44.050 - 00:09:24.444, Speaker A: So, as I mentioned, basically this diagram shows kind of how multiple runtimes can be built on top of the Fogoin network. And as long as your VM compiles to Ozum, you can run it on top of Fogoin. And the EVM was the first one that was launching. And essentially it's an Ethereum virtual machine that runs on top of the FalcoIn virtual machine. It's Ethereum compatible. It means that you can reuse all the features of the EVM for foulcoin, like the addressing the account types, et cetera. And this is just hopefully one of many.
00:09:24.444 - 00:10:15.960, Speaker A: And you can build any type of VM as long as it compiles down to WASM. So I don't know if you really like your cat Dolores so much and you want to build the Dolores VMs where the account types are just unique pictures of Dolores. You can do that as long as it compiles to WASM. All right, so hopefully it gives you better idea of the Falcon network FVM, what Fevm is and all that. So I'll go into a use case. So I mentioned earlier is I work on a project called Flycoin Saturn and I wanted to present a production use case for the FVM because we just deployed one of the very big production use cases for it earlier this year. And what FalcoIn Saturn is it's basically a decentralized CDN that's meant to accelerate retrievals on the FalcoIn network.
00:10:15.960 - 00:10:55.204, Speaker A: And what that means basically is right now Falcon is really good at storing things and can store things reliably. But we want to complete that storage loop by having really fast retrievals because that's what we expect. We expect to deliver the same experience as web two and for web three, which means we need to have really fast retrievals. And that's why Falcon Saturn exists. And Saturn is an absolute monster. We currently have 2000 nodes that's eight times more than cloudflare and we serve around 150,000,000 requests every day. And what's really cool about Saturn is that actually there are real people running these nodes.
00:10:55.204 - 00:11:44.780, Speaker A: And what's even cooler is that these people get paid for the retrievals that they make. And how do we orchestrate payments for the Saturn network? The answer is the FVM. So we want to run Saturn as a protocol, which means that when you're a node operator in Saturn and you want to serve retrievals, you interact with a protocol and you get paid through a protocol because that's trustless and that's decentralized and that's what port three is about. And the Fem coming to filecoin enabled us to do that. And the Fem allowed us to deploy smart contracts that maps the contributions of our Saturn nodes to payouts. And eventually these nodes can claim these payouts and the smart contract will distribute the payouts. And this is kind of like the level that the FVM can play at all the way from tiny applications to doing the accounting for a whole CDN.
00:11:44.780 - 00:12:32.650, Speaker A: So I'll give you a quick demo for our payouts. Actually I'll start with the UI here's, the UI for our payouts and this is built with existing this is all built and this is also open source. I'll give the links for the repos later on. But this is built with existing infrastructure that works for the ethereum virtual machine and it's running on the focal network. So as a Saturn operator you can go claim your funds from a VM deployed smart contract. And you can still use things like Ethereum Addressing and all the account types. One SEC.
00:12:32.650 - 00:13:30.634, Speaker A: Sorry, the Internet is a bit slow here. All right, yeah. So this all runs on regular Web three tool, and I would use and this runs on the Fem. And as a Saturn node operator, you can see kind of like what your earnings are, what transactions you can claim, et cetera. And on Saturn, we've been working some really cool tools and makes deploying on the FVM really easy and also very flexible if you want it. Our payments Contracts repo is open source and it's a really nice resource if you want to really dive deep into how FVM can work and all that, just to demo. So we actually built a CLI for Saturn to deploy things on FVM.
00:13:30.634 - 00:14:09.450, Speaker A: And I was obviously testing it before the workshop just to make sure I'm clear with the Demo Gods. And if it doesn't work, I have a demo to show. But, yeah, running it is essentially just as easy as a very simple CLI command that just gives you the RPC URL. And here I'm copying a local secret, which you should never do, but for the sake of the demo I am doing, because I don't have my hardware wallet. And you just deploy. And as you can see, you're seeing all my rust linting errors. And this is Live stream, so no shame.
00:14:09.450 - 00:15:08.864, Speaker A: The block times on the Flock Coin Network is like 30 seconds, so it does take a while to deploy. But, yeah, dar CLI gives you releaseful tools like what the gas price is. It can convert Ethereum style addressing to Falcon style addressing. And you can edit, for example, the gas multiplier. So you can make it really flexible, or you can just use it out of the box. And since the block times are really long, I'll just show you what the deploy contract oh, my God, I have so many linting errors. All right, so if so, Phil Fox is a Falcon Blockchain Explorer that you can use to check out your contracts and all that.
00:15:08.864 - 00:15:40.280, Speaker A: And this is the contract that I deployed before the demo. And it's essentially exactly the same experience as you would use with an EVM smart contract on filecoin. It has a filecoin address, has an Ethereum address. You can see the message ID. This is like one of the payouts who deployed. And here it is live. And hopefully the other one would have deployed.
00:15:40.280 - 00:16:02.272, Speaker A: There we go. So this is the one I just deployed. Just want to show it's working. The Demo Gods are with me today and I'm very proud about that. All right, back to the presentation. To wrap things up, I've lost my mouse. There it is.
00:16:02.272 - 00:16:37.768, Speaker A: All right, so here's some useful resources. The Fevm team has a bunch of starter kits for working with the Fevm. We at Saturn really like rust, so we use the foundry kit but there is Hard hat, there is Remix. There is a ton of other tutorials also that are available there to show you how to deploy and work with the Fem. And it's really useful. The Testnet Hyperspace is a repo dedicated to the hyperspace testnet. It shows you how to get test fill, how to add that hyperspace to your MetaMask wallet.
00:16:37.768 - 00:17:25.820, Speaker A: And it's very similar to what you would do on Ethereum. Basically, if you're familiar with Ethereum and development, saturn contracts is our contracts repo. So basically everything like the way we do accounting for Saturn is in that repo. It's public as open source and it's a great demonstration with how to use the Fevm with Rust. And we developed a Rust Fevm Utils Library and has very useful things like sending transactions. The Fevm has its own gas calculation model, so sometimes when using it with some of the Ethereum tooling, you run into some annoying bugs in Rust. We completely removed that experience for you with the Utils library.
00:17:25.820 - 00:17:59.130, Speaker A: Other things like converting file coin to Ethereum addresses, you can find it all there. The library is very new, we're developing it and there are some issues. So if you feel the Web Three hard in you to come in and contribute, feel free to do so. And lastly, this is the contracts UI. So the UI I just shown is also open source. And in case anyone wants to look at how to build front end applications on Fevm, it's very similar to Ethereum, in fact, like the same exact tooling. And we have it out there.
00:17:59.130 - 00:18:46.260, Speaker A: So, just a reminder. So we have some prizes at this hackathon. We have an Fevm Sheet sheet if you want to scan the barcode. So we have a grand prize and another pool prize if anyone is interested to hack on the Fevm, that'll be really nice. And just a reminder to qualify for the prize, if you want to deploy things on the Falcon network, NFT Storage and Web Three Storage are really nice. APIs abstract away a lot of you having to do a storage deal and all that, it does that all for you. So if you don't want to get too deep in the weeds, these are really nice services that offer you APIs to store things directly on the filecoin network.
00:18:46.260 - 00:19:38.186, Speaker A: And that is it. If anyone has any questions, happy to take them. Sorry, I can't hear you. Yeah, so you can do it a few ways, like you can encrypt the data before you send it and then decrypt it. And some like I'm guessing, like NFT storage or f three storage. Do some inclusion for you. Or you can go through a smart contract route.
00:19:38.186 - 00:20:48.580, Speaker A: So that is what it means, like Ring programmability is that you can do things. Also, just to repeat, the question is how do you ensure that the data is encrypted or not visible to someone or not accessible? So IPFS, so you can access storage deals from the EVM itself. You can access them from the Fevm, and then IPFS is content addressed. So you can access yeah. Okay. So the question is, is it possible to use smart contracts on FVM to store data? And yes, you make a storage deal with a smart contract. Yeah.
00:20:48.580 - 00:21:41.130, Speaker A: So you can make storage deals with a smart contract for sure. Correct. Okay. So the question is, does Spock one store the relationships between different files? Not really. I don't know if you're familiar with how Ipfest store things, and it's a merkle Dag, basically. So if something is another merkel dag, there is no connection, essentially, unless it's part of the file. You can reference another file in some file and that's fine.
00:21:41.130 - 00:22:49.448, Speaker A: But unless it's actually part of the directory, you can just link it natively. Yeah. You mean like having versioning? Yeah, you can have that. But a nice feature that comes baked into merkel Dags is that, for example, if you have files that are really similar or have the same content, we don't need to create a new miracle deck for it. They will share that from an existing miracle Dag and just extend it. So does that make sense? Yeah, you can traverse it and query, like, certain parts. You're welcome.
00:22:49.448 - 00:23:29.978, Speaker A: Thank you. Fast. Yeah. So the question is, is there some infrastructure ready for off chain compute? So, yeah, there's a project that spun out of PO called Bacchayao, and Bacchal is all about computation, basically compute over data. It's called cod. That's why the name Bakio came out. But, yeah, it's all about that.
00:23:29.978 - 00:23:50.610, Speaker A: If you want, I can share with you after, but it's basically dedicated project for that. And it's an L two skill and later for computation over data on the Falcon network. Does that answer your question? Okay, perfect. All right, I think we have no more questions. Thank you very much for coming. Listen.
