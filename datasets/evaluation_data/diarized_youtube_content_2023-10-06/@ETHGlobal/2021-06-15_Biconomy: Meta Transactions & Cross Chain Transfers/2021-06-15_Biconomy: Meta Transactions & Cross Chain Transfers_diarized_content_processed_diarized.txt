00:00:02.970 - 00:00:38.950, Speaker A: Okay, thank you everyone, for joining. I know some people are going to trickle in, but we may as well get started. We have Chirag from Biconomy who's going to give a high level workshop on how to integrate Biconomy into your hack. And today we're going to cover some subtopics such as meta transactions and cross chain transfers. If you have questions for Chirag, please save them for the end and we'll have a question and answer period as soon as he's finished his workshop or presentation. Okay, I'll let you take it away. Thanks, Chirag.
00:00:40.350 - 00:01:24.482, Speaker B: Hi. Hello, everyone. Thank you, Heather and Andrew, for having me here today and very excited and proud to present at this event. And let's get started. So basically I'm going to be talking about Biconomy, which is multi chain transaction infrastructure. So there are so many infrastructure projects to bring DeFi closer to drive more adoption on the usability side. So I'm going to be covering these topics to broadly start with some of the challenges and how do you improve the experience and drive more users for your hack.
00:01:24.482 - 00:02:24.080, Speaker B: So that's the idea. And Byconomy allows you to do lot of cool stuff. By, if you are a DAP developer, you can integrate from multiple different approaches and make the user journey as easy as possible for any of your hats. So let me go ahead and share my screen quickly. All right, sweet. So Biconomy is transaction infrastructure for it doesn't matter which chain you are developing on, and you want to simplify the user journey and reduce some of the friction points in your DAP, then it has like, SDK and API solutions. So I'm going to walk through the workshop of integration so it will be more on the technical level.
00:02:24.080 - 00:03:59.622, Speaker B: But let me just come back first and start with the challenges and how do we end up here or realize the need of having a transaction layer in improving usability of the application? Let's get started. Here are some stats on DeFi. So there are plenty of use cases and very impressive projects that have come out of different hackathons. And since the DeFi summer, the volumes have been increasing, number of users and taps have been increasing. And still, if you want to get your project to the next level and have more and more users, there are still some challenges at the interaction level or the number of steps involved when users are interacting with your DAP. Like this says that even if you have a best UI and the user experience in terms of the other interactions which are not web3, but the blockchain interactions will turn out to be a very big pain point for the users. Here are some examples, like you need to pay the gas fees, I need to download a wallet, and I need to understand that, okay, this is the native currency for this particular blockchain, and you could be building on any chain.
00:03:59.622 - 00:05:29.730, Speaker B: And I need to set the gas price for that chain and I need to worry about resubmitting the transactions, whether my transaction will succeed or fail or I'll miss out a particular chance, let's say if you are trading and there are a couple of other pain points which I'm going to talk about in the next slides. So you can have another aspect is when you want to go from one layer to another layer two to interact with a particular DAP of your choice be it like a gaming use case or a social use case for which layer twos are very popular. So then in order to move your funds there are very long processes or you have wait time is very long for you to actually be able to do something on those tabs. So this is an idea where you think of DeFi as a highway and there are various checkpoints where you need to stop and pay for the gas fees. And gas fees is just one of the things where user needs to understand. But there are some other pain points in terms of you can think of different use cases where it's going to be hindrance for the users. So the idea is, and before I talk about Usability, so this is the idea, like, since 2017, we have seen the market rise and after the network congestion, so for blockchains to grow in the next rapid growth cycle, there are key challenges like scalability.
00:05:29.730 - 00:06:48.180, Speaker B: So there are so many layer to solutions. Optimistic roll ups, arbitram are in the space now, so there is a very good progress there. And second is interoperability where you need to move from one chain to another chain and do the cross chain swaps or cross chain smart contract calls and these can be a big challenge in several use cases where the user is not like blockchain or network agnostic or your application itself. And the third important aspect is usability. So that's the pain points which I just talked about and I'm going to talk more about that followed by a high level workshop or integration with biconomics. So these are the goals in terms of when you think about user adoption for your DApps where you basically need to capture the market of users which are not crypto savvy and you can also delight the users which are used to interact on DeFi protocols but you give them more options based on their use cases. So that's the idea or like throughout this workshop you should think about some design ideology or principles and also think of usability when you are building something.
00:06:48.180 - 00:08:26.258, Speaker B: So these are the pain points and these should be the goals to give the web two like experiences for example Amazon or any other web two space application on web3 layer. So that's the idea and Biconomy is a transaction infrastructure for multi chain and it is achieved by metatransactions and there are some other offerings where you can integrate and delight the users. So besides that, in terms of pain points, I forgot to add that let's say since if we talk about usability before there used to be like long hexadecimal addresses user needs to remember their address and share it with someone. So there have been some progress in Ethereum domain name service where you can link your domain with your Ethereum address and it is way easier to give out to someone and not remember your whole address. So that's on the addresses level and then on the wallet level there are some solutions out there like Wallet Connect or Magic Wallet which allows you to interact with any DAP from your mobile phones. You can share a QR code or you can have a decentralized identity without having the complexity of having a browser extension and these sort of things. So these are like owning your UX on the wallet level and apart from that, what we are doing is on the transaction level.
00:08:26.258 - 00:09:42.006, Speaker B: So on the transaction layer there are some pain points and if you can simplify those experiences so that's the key idea and let me give you some more examples. So let's say if you are a freelancer and you have not worked with DeFi or Blockchains before and you earn some Ustt from a crypto client and you need to transfer this Ustt and you do not have an Ethereum and you don't know about how to set gas prices, how to download the wallet, et cetera. So I need to go and make this whole round trip of going to an exchange buying ETH and then this poor guy will possibly make uniswap trade to convert this USDT into ETH by having those ETH. And what if the deadline expires? Then the transaction also gets dumped by wasting the gas fees. So, here are multiple challenges can be thought about with Biconomy integration. In your DAP it says few lines of code and some amount of registering your artifacts on the dashboard. So I'm going to cover those steps like what you need to do in order to have a guestless experience for your users.
00:09:42.006 - 00:11:13.990, Speaker B: So that's the first key aspect of offering a gasless or sponsored transactions by your DAP to the user and it is very cheap on the layer two and you can sponsor plenty of transactions and drive more user base for your use case. And the features are like there are gas optimized transactions, there won't be like any pending transactions. You get to own or know more insight about the transactions that are going through your DAP. You can have the user limits, you can have the meta transaction limits and sort of control your data which is of the user interacting on the application. So this is just another infographic to showcase what are the benefits of using or having few lines of code for any layer. And there are many supported networks so it's multi chain and network agnostic so even if user is on the Ethereum main network on MetaMask or any wallet, they can directly integrate or interact with DAP on the Polygon mainnet, Polygon, Mumbai, et cetera. And that is the idea like user just signs kind of messages and these messages are being exchanged with each other and there will be like a third party relayer which will actually pay on behalf of the user.
00:11:13.990 - 00:12:28.080, Speaker B: It can drive many jobs which let's say you want to set a particular constant or update something in your smart contract or you can have any DeFi job to provide liquidity or you want to run a bot and manage your transactions through dedicated relayer. So that relayer infrastructure is pretty scalable. And this is the idea of on a technical level, there will be a transaction signer which is the end user and then they will just see the structured message in their browser or in their wallet app which they can sign to sort of prove their identity and that's it. So after that they do not need to worry about the transaction. So transaction is going to be relayed by a relayer and there are so many things which are happening behind the scene. Like for example, you need to be managing nounces, you need to have a resubmit module to submit the failed transactions, you need to monitor the gas prices and you need to bump up the gas prices. So all of this is being handled by Biconomy in the back end.
00:12:28.080 - 00:13:22.638, Speaker B: So once the user sends a transaction, it comes to a generic trusted forwarder. So this is more standardized approach, you can have different custom approach as well where basically user just says that okay, this is my smart contract, this is the method I want my users to call and be Metatransaction compliant or enabled and that's it. So it appends the user's address and it retrieves that address in the smart contract, in your recipient contract and it just verifies that whether it is from the right user. So that's the signature verification and another is the nouns verification for replay protection attacks. So that's the first step. Like you need to modify your recipient contract to have this message center feature so that it can realize whether it is coming from a relayer or an end user. So this is the idea.
00:13:22.638 - 00:14:18.706, Speaker B: And in terms of integration with Biconomy, so there are three crucial steps where first step which as I mentioned that you need to make the changes in your smart contract and second thing is you need to register the artifacts on the dashboard. So by artifacts I mean you need to add your smart contract and you need to specify that okay, which method or which type of meta transactions you want for this particular contract or its methods. And then you sort of register all of those methods in the dashboard and that's it. Then you are done. You get the API key which you can use in your backend code integration. So I'm going to show that part of the code through maybe like a pull request or the code example. So that's the third step where you basically use the Biconomy SDK and you can also have an API integration where you can just directly make an API for your transaction call.
00:14:18.706 - 00:15:22.098, Speaker B: So user just signs a message from your front end or it can also be done using a private key in the back end. So these are the steps which I'm going to show moving forward. So in terms of changing the let me go to the slide. Yeah. So here's, so this is the example of the changes you need to make on the smart contract, which is the first step where this is a very simple contract where it maintains the storage variable code and user can come in and set this particular storage variable and become the owner for the particular code. So this is the contract before and these are the additions. If you want to make the contract meta transaction compliant, so you need to inherit from a certain contract.
00:15:22.098 - 00:16:01.570, Speaker B: It can be base relay recipient or EAP seven one two metatransaction, which allows to sort of verify the nonsense and verify the signature. So that's sort of like an it and it allows the support for the trusted forwarder and forwarder's job is just to verify the signature and the nonsense. So you need to just make these small changes in your contract and wherever you are using message sender, you need to replace it with like underscore message sender. And that's it. You are done for the first step. And this is just one time. The second step would be to, like I said, to the dashboard registration.
00:16:01.570 - 00:16:45.114, Speaker B: So if you go to the website, you can go to the dashboard from here and you can create so you can create any new DAP with your name and you can pick a network that you want to that your DAP is on or whichever project you're building. You can give it a name. And these are the steps to integrate smart contracts. You give the contract a name, you paste the API. So all of this I have done from the backend code here. So I'm going to paste the API. I can paste the smart contract address and with that I can specify the approach.
00:16:45.114 - 00:17:28.254, Speaker B: So there are different approaches. Trusted Forwarder is more generic approach for gasless transactions and ESC 20 forwarder is something that allows end user to pay gas fees and stable coins. So shortly I'll come back to that also. So once you register your contract, then you can go ahead and register your methods. So let me just show for so these are the steps involved in terms of registering methods and your artifacts. So that's the second step that we are covered. And the third step is to sort of write or modify your code to use the Biconomy API key.
00:17:28.254 - 00:18:38.150, Speaker B: So the idea is what's happening in the SDK is when you send RPC call to send out any transactions so SDK is going to like you can replace that provider, whichever provider you are creating for the network with a Bikonomy provider by using the Bikonomies API key. And once you have that provider you can create your contracts using the new provider. And when you send RPC call each and transaction, it's going to intercept that RPC call and it checks the artifacts or registrations on the dashboard and accordingly, it sends that API call to the server. And then everything is managed by the relayer infrastructure. There where we talk about resubmitting transactions or the non management and ultimately getting the transaction hash response back. So you can show your end user, then you can enable any watcher. You can pretty much do like other composable stuff in the DeFi so getting the subscription for block native or reading the data from graph for the particular transaction.
00:18:38.150 - 00:19:45.174, Speaker B: So that's the idea. So ultimately you get the receipt and the transaction hash. So this is the code which shows the integration part. So you need to have your contract object you create by economy by using the APA key which you get in the dashboard. So that's like few lines of code and then you replace your web3 with the Biconomy object you have just created and once the Biconomy is ready you can initialize your contracts whichever operations you're doing in your app in the back end. So this is all you need to do in the client side. And let's say if I'm sending a transaction using like yeah, so if I'm sending a transaction like populating for data for a particular method and then I'm sending a transaction so this code also remains the same, you don't need to change anything, it will just ask user for the signature.
00:19:45.174 - 00:20:58.834, Speaker B: So everything happens at the back end and the end user will not end up paying for the gas fees. So this is the gasless use case where you can sponsor the gas fees on behalf of your users. So this is the third step and you can play around with this demo. So it is hosted and there are several variations there in the playground branch which I'm going to share as part of resources and if any questions you can come back to us on discord. So this was to basically showcase how to integrate Biconomy in a very simplistic use case for this app. And besides that, what you also can do is on some layer ones it probably doesn't make sense to sponsor the gas fees on behalf of your end user. Or what you can do is enable a switch where gas prices are very low or you can have a happy hours thing where for that time you are sponsoring gas fees for your users and for other times you can allow users to pay gas fees from that site.
00:20:58.834 - 00:21:54.222, Speaker B: So in this case, gasless is not free, right? So you need to pay something, but if you do not have ethereum, then you're also allowed to pay these gas fees in ERC 20 stable coins. So whatever supported tokens you have as allowed fee tokens for ERC 20 forwarder contract. So that's the idea. Like you still have the trusted forwarder which still verifies the signature and verifies the nonsense. But what you also have is an ERC 20 forwarder which facilitates as fee calculator. So, for example, I am calling a certain method on my smart contract and there is X amount of execution gas for this method call. So what this contract does is it calculates that okay, this much, let's say 200K amount of gas is going to be spent for this transaction.
00:21:54.222 - 00:22:42.962, Speaker B: So basically it calculates all of these ETH amount into ESC 20 token amount and identifies how many tokens are to be charged. And then it charges these tokens from the user's wallet. So that's the idea. And it has different protocol level contracts. So there's a fee manager which allows adapt to charge a bit more as a fees for providing this service or give the users rebate also the users who are most active on their apps. And then there is Oracle aggregator, which basically sources the live fees data from the changing price feeds. So these feeds look like USDT to ETH, Dai to ETH, USDC to ETH and that's how you get the price.
00:22:42.962 - 00:23:27.870, Speaker B: And so there is a concept of gas price and there is also token gas price. So with the token gas price you can identify that. Okay, this many tokens I need to charge. Here is a sample transaction where the end user was able to swap die for a certain token on uniswap by not paying any ETH, but just paying some extra Dai as a gas fee. So this is the idea. So this transaction relayer has paid the ETH fees and the user address is this one where user has paid only like die and they have made the transfer to the fee receiver for their die stable coins. And this is just one of the use cases facilitated.
00:23:27.870 - 00:24:34.006, Speaker B: Besides that, what you can do is you can also have, ERC, 20 token transfers. You can batch the token transfers and build a certain UI where user can send out a batch and batch of, let's say ten addresses and ten destinations, ten different amounts to send ustt and pay the entire fee, gas fee for this batch in ustt by spending some extra token. So that makes sense in some of the use cases where you are depositing some liquidity into a liquidity pool, interacting with any method which already involves some ERC 20 token interactions. And by paying the fees also in these tokens, which makes very delightful for the user and on the UI level, you can still give the option to the user okay, these are going to be fees in ETH. These are the fees and stable coins and you choose like which coin you want to pay with. So that makes a good use case in some scenarios where there are already some token transfers involved. And third thing is on the cross chain transfer.
00:24:34.006 - 00:25:56.034, Speaker B: So currently the problem is, like I mentioned in the beginning as well, so between moving your liquidity of certain tokens from layer one to layer two, you want to go to another DAP and you want to, let's say, mint an NFT. So these probably artists do not know how to, they need to worry about the gas fees, they need to worry about moving the tokens. It takes a lot of time and also to move back to ethereum to sort of sell back some of your assets. It is a very long process, it can go up to an hour to a week. So Hyphen allows you to do instant transfers between across the blockchains and it is cheaper and instant. And how it is facilitated is there are liquidity pools maintained on both chains and it just rebalances liquidity. And once you decide to move tokens from chain B to chain A at the back end, there are some executor nodes which are going to listen to your withdrawal transaction and they facilitate the liquidity for you on the other chain A.
00:25:56.034 - 00:26:50.910, Speaker B: So that's the idea. And you just need to pay like liquidity provider fees or the network fees which can also have gasless or like a forward experience where you can pay using those tokens as well. So that's the idea. Here is a simple UI which is hosted as one of the resources going to be sharing this on the channel as well, so you can play with it between Godly and Mumbai and soon live on the main net as well. So, yeah, I'm pretty much done. And these are like some of the case studies of improving the user onboarding on different apps and nailing some use cases of trading, social use cases, DeFi use cases, et cetera. In terms of resources, you can go through the Biconomy Docs dashboard.
00:26:50.910 - 00:27:05.160, Speaker B: There are some other resources which we can share on Telegram or Discord. I encourage builders to go through this. So I'm done, I am ready for the questions. I think we're out of time, maybe two, three minutes.
00:27:06.330 - 00:27:20.538, Speaker A: Thanks. Shrug? Yeah. So we have about ten minutes left. Just first off, would it be possible for you to share those links in this sponsor in the Biconomy sponsor channel, just so people can access them?
00:27:20.704 - 00:27:22.538, Speaker B: Yeah, I'll be doing that.
00:27:22.704 - 00:27:45.090, Speaker A: Perfect. So there aren't any questions in the chat. I thought I would open up the floor if there's anyone in the call who wants to jump in. Unmute yourself, turn on your video if you're comfortable and ask the question yourself. I've got one question that just came in from Goain, which he asked, does Biconomy interact directly with Venley wallet?
00:27:45.910 - 00:28:11.840, Speaker B: Yeah. So these wallets, basically, you just need to modify your Web Three provider or ethos provider, which is implemented in a specific wallet, so it can be done with pretty much any wallet. Any other questions? Yeah.
00:28:22.630 - 00:28:41.850, Speaker A: Okay, we will give people one more minute if they want to jump in. Chirag, what's the best way for people to ask questions? We are on our discord. So there's the dedicated Biconomy channel. Where else can they find you so.
00:28:41.920 - 00:28:57.360, Speaker B: They can come on Biconomy discord channel as well? Or on the Telegram group of Biconomy. So the team is always active there and it is distributed team. So anyone would come and assist you guys.
00:28:59.250 - 00:29:19.750, Speaker A: Great. So unless there's any last questions thank you very much, Jarag. That was a great workshop, really appreciate it. I'm excited to see what hackers build using Biconomy. And if you have any more questions for Chirag or Biconomy team, jump in on Discord or Telegram.
00:29:20.890 - 00:29:22.598, Speaker B: Perfect. Thank you so much.
00:29:22.764 - 00:29:24.870, Speaker A: Thanks, Chad. Cheers.
00:29:25.290 - 00:29:26.130, Speaker B: Cheers. Bye.
