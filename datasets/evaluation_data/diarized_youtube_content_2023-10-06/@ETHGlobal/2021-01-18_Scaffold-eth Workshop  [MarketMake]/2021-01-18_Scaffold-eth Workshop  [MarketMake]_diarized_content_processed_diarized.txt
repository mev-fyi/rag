00:00:00.970 - 00:00:07.950, Speaker A: Feel free to throw your local time in the chat. Let's see who's up latest for this. Hopefully not too late.
00:00:18.540 - 00:00:28.352, Speaker B: Stream is up. Trent, cool it.
00:00:28.486 - 00:00:58.376, Speaker A: And maybe this is just a personal preference, but I always love seeing video on. So if you can throw on your video, it's always nice to see faces of the hackers we're going to be working with for the next few weeks. If not, that's totally fine. If you prefer to just be audio or just kind of passive observer, that's cool. Or if, you know, sometimes my Internet cuts out and I got to turn off my video, that's totally understandable. Cool. Jack, welcome.
00:00:58.376 - 00:01:28.864, Speaker A: Bob, what else we got here? John, Max, Maximilian, Jaden, Micah. Thanks for the video, everybody. Looks like Maximilian. You're the latest 1900. You win. Congrats. All right, I think we've got a good number of people who are ready to go.
00:01:28.864 - 00:01:30.370, Speaker A: Austin, you ready?
00:01:31.480 - 00:01:31.796, Speaker B: Cool.
00:01:31.818 - 00:02:14.800, Speaker A: I'll just do a quick intro. This is the Scaffold e workshop as part of market make. If you don't know, we are having a series of workshops all throughout this week to get people situated with sponsor stacks and various tools that you can build Ethereum applications and Ethereum projects with. And this is one of the ones that's going to be really helpful if you are new to Ethereum, if you are experienced, all of the above. Scaffold ETH is an amazing tool. The way we summarize it is, it's like a DAP template that's really perfect for hackathons like this. So Austin's going to give a pretty open session.
00:02:14.800 - 00:02:49.512, Speaker A: He'll go over what the structure is going to be, but I will let him introduce himself. And thank you again for everybody showing up. The final bit of housekeeping is check ins start today. So if you're not familiar, we do weekly check ins just to make sure we are aware of what you're working on. And we can help you connect with various sponsors as needed. So you should be able to access that with your hacker dashboard, I think, a little bit later today. So make sure to do that today.
00:02:49.512 - 00:03:03.890, Speaker A: And it's just one per team, so if you fill it out, the rest of your team doesn't have to do it. Just make sure to check out your dashboard a little bit later today. Okay, that's enough for me. Austin, why don't you tell people who you are and what you're going to be going over?
00:03:04.660 - 00:03:16.064, Speaker B: What's up? I'm Austin Griffith. Thank you, Trent. Thank you, ETH Global. Thank you, hackers. Happy Monday. No bow tie today. Just doing it normal.
00:03:16.064 - 00:03:53.164, Speaker B: So, like Trent said, Scaffold ETH is like a hackathon stack. I've taken kind of state of the art tools. I've put them into one big repo, I've glued them all together, and then the same stuff that I found myself building at every hackathon I put into this repo. So then you have all these components that you don't have to build an address input component. It'll be right there for you out of the box. And then I think a key piece is it starts you out with a contract and lets you just make small changes to the contract. Like, oh, maybe I don't know a ton about hooks.
00:03:53.164 - 00:04:30.792, Speaker B: It'll let you make small changes to the front end, kind of figure out how those hooks work and get you sort of situated and confident with your local environment. But really, you should be able to just spew out decentralized applications using this template. So I'm going to just dive right in. I'm going to share my screen and give you a look at Scaffold ETH. But let's do this very open. I'm totally open to questions all along the way. If there's something in particular you would like to learn or see how to build within the next hour, go ahead and post it to Chat.
00:04:30.792 - 00:04:50.592, Speaker B: Let me see if I can figure out how to get Chat somewhere where I can see it. There we go. Okay, cool. So scaffold ETH not etherscan. Let's go to Ethereum.org. Just like if you're getting started or you're looking for information, there's always something for you on Ethereum.org. Let's see.
00:04:50.592 - 00:05:12.084, Speaker B: So if we want to set up our local environments to learn by coding, check out ETH build Boop slideshill. Okay, so Scaffold ETH is right here on ethereum.org. And let's see where it takes you. Cool. It takes you right to the repo. If you were to Google for Scaffold ETH, I think Scaffold ETH IO may show up, but it just links you to the repo. So it's all right here in the repo.
00:05:12.084 - 00:05:36.032, Speaker B: The repo is the kind of the key piece. There's a lot of packages here. There's hard hat and react and the subgraph. There's docker for the subgraph. The important files that you'll need, we'll get right to, but let's dive into it. So I have cloned down Scaffold ETH, I have CD into the directory, and I've done the yarn install. It takes some time to do that.
00:05:36.032 - 00:06:20.092, Speaker B: So I would suggest, like, if you're on a mentorship session with me, bang that out first, just so we're not sitting here for ten minutes waiting for all these packages to install. But once you get it installed, you've got a few commands to run. You run a yarn start that's going to fire up your React dev server, that's going to fire up your front end, and that's going to give you kind of a local host here. But it's going to fail unless you do a yarn chain and fire up your Hard hat node previously Biddler. You've got your own local chain and it also generates a bunch of wallets for you. So we've got our React front end and we've got our back end, right, which will be our Ethereum chain. Now let's go ahead and deploy.
00:06:20.092 - 00:06:53.560, Speaker B: So just a yarn deploy is going to compile our contract, ship it to our local chain and then inject that into our front end. Let's see that again. If you watch over here, you'll see this? This is a contract component for our contract that's going to change a new address every time we deploy our contract. And in fact, we can even come over here and change something with our contract and do a yarn deploy. And now, instead of programming unstoppable money, our purpose should change to programming decentralized money. Cool. Awesome.
00:06:53.560 - 00:07:27.876, Speaker B: And if we add I do this, like for every demo. But if we add some counter in here and set it equal to one, and we create some decrement function that makes it so we can do counter minus minus, like, stupid simple programming here, but just showing you that you can kind of iterate on your solidity, you can go to things like, a really great example. Watch this load in real quick. Let's make sure it's there. Cool. There we've got a counter solidity by example. So let's see.
00:07:28.058 - 00:07:29.140, Speaker A: Hey, Austin.
00:07:29.480 - 00:07:30.790, Speaker B: Yeah. Yes, please.
00:07:31.960 - 00:07:34.120, Speaker A: Could you zoom in on your terminal a little?
00:07:34.190 - 00:07:36.250, Speaker B: OOH, is the terminal two?
00:07:38.220 - 00:07:41.944, Speaker A: Yeah, I think we had a request on YouTube just a little bit.
00:07:42.142 - 00:07:48.984, Speaker B: Oh, I'm not even looking at the YouTube chat. There's a YouTube chat, too. Holy moly. Okay, sorry, I've only got the zoom chat.
00:07:49.032 - 00:07:50.744, Speaker A: Yes, I'll monitor.
00:07:50.792 - 00:07:52.444, Speaker B: Okay, you got it, you got it.
00:07:52.562 - 00:07:55.550, Speaker A: Anything I'll relay and there is currently.
00:07:56.800 - 00:08:24.936, Speaker B: Here is the hard hat node. And yeah, I think the difference between yeah, no, I think the hard hats hackathon boilerplate. I'm not sure if it has a front end, but this has a front end and then a bunch of components on top of it and it kind of wires it together. So I don't know exactly the difference between my boilerplate and hard hat's boilerplate. They're probably both worth checking out. I don't know exactly what components they have with theirs. So just zooming in.
00:08:24.936 - 00:08:37.320, Speaker B: So there's our chain. Here's our dev server. Here's our deployer. Hopefully that's big enough. Yeah, I can make it a little bit bigger. There we go. But then we've added some stuff to our contract.
00:08:37.320 - 00:09:16.772, Speaker B: Okay. So you should be able to just grab solidity examples. Like if you want to bring in some mapping, right? You can just go here, find an example, copy and paste it into your contract and start tinkering. And that's kind of like the goal with setting up this repo is you have an app that's ready to go, but you can tinker with your solidity, you can tinker with your front end and kind of build up a prototype. So let's see accounts. One other thing is if you go to your local Host 3000 from a different so this is an incognito window. See how we get a different address here.
00:09:16.772 - 00:09:39.308, Speaker B: 7339. That's actually a burner wallet. And you can even go here and generate more burner wallets. We'll see another one come up, we'll see another one come up if I do this. There we go. So I'm just like generating these accounts and we can see them over here and then I can go select those anytime I want in my private key section. And by the way, if you have your phone open and you pointed at that, you would just straight up get that account on your phone.
00:09:39.308 - 00:10:09.136, Speaker B: But let's keep that there. So Scaffold ETH is going to generate a burner wallet for you on page load, but you can connect your MetaMask or wallet connect or whatever. So your users in the long run will be able to log in, but stay away from MetaMask locally at first. Let's just iterate using a burner wallet. And so I'm just going to copy my address there. See this nice address component where it has a blocky display, shows the address, gives you a little copy button. That's the address component within Scaffold e.
00:10:09.136 - 00:10:20.332, Speaker B: So every time you want to display an address, you just bring in the address component. You send it the address and you get that. Nice. Oh, does it link to yes, it does. It links out to ether scan even. Cool. So I'm going to head to the faucet in the bottom left.
00:10:20.332 - 00:10:47.376, Speaker B: This faucet is just the first account of the hard hat node and I'm going to give myself some ETH. And then let's just try setting this purpose. It's just some random string that we're storing for now and I should be able to set that purpose to hello world and spend some gas. One neat thing I want to show off is, let's see, I'm going to clear this and run that one more time. Boop. There we go. So you get a nice console log right in your hard hat node.
00:10:47.376 - 00:11:19.310, Speaker B: So that's another good reason to be using hard hat here is we get stack traces and console logs and that's coming in from that line there and that line there. Cool. Okay, so we set up a counter. Look what happens when we decrement it. We can see that underflow happens. That was one thing I wanted to show. And then let's see if we set this to what, zero 80, right? And then we go into our hard hat config and we set this to zero 80.
00:11:19.310 - 00:11:56.506, Speaker B: What we're going to do is bring in the latest hard hat compiler and hopefully it will what doesn't it like this bad live demo. Wait, what's wrong with that's? I have no idea. All I want to do is show the counter. Let's see. Okay. I don't know, maybe I wasn't allowed to do that with that string. Something with eight doesn't allow me to do that.
00:11:56.506 - 00:12:27.714, Speaker B: But now we have eight and now if I decrement zero and one, it's going to throw an error. Right? So with solidity 8.0, I was able to double check that underflow is not going to happen anymore. And that's just kind of a nice little tinker thing, right? You hear them say Solidity Eight doesn't allow for underflow. But using Scaffold ETH, you can dive in here and you can just try it out real quick and see for yourself if it works. I wonder what that string error was. I'm still wondering about this.
00:12:27.714 - 00:12:42.410, Speaker B: I wonder if it won't. Are they not allowing me to have emojis? Let's see it's. The emoji. Put it back in there. Let's see it again. Really.
00:12:44.460 - 00:12:45.768, Speaker A: Breaking Austin's heart.
00:12:45.854 - 00:13:09.980, Speaker B: Who knew that Solidity eight would not let you put in an emoji? Boo. Okay, whatever. All right. No emojis, no more emojis. All right, so every time I'm running this deploy, by the way, I'm like, shoving a new contract out to my local chain. And there we go. Okay, what happens if I send an emoji here? This still works, right? Okay, just double checking.
00:13:09.980 - 00:13:28.280, Speaker B: It's just the solidity compiler. Okay, cool. So let's see. It doesn't like, we don't say public anymore for our constructor. I learned so much from compiler errors. And something about a license, right? We would want to stick MIT at the top of that or something. Look at this.
00:13:28.280 - 00:13:45.630, Speaker B: Cleaning up the code. How about that? No more warnings. No more warnings. Yes. All right, so we're cleanly compiling with eight, except for there's something else happening over oh, that was something else. Okay, awesome. Let's iterate a little bit and build something interesting.
00:13:45.630 - 00:14:16.932, Speaker B: Yeah, Unicode. Yep, I think that's what it is. Something with. Okay, any any questions from YouTube yet? Are we jamming? Trent, how are we? Okay, so you should be able to sit down, clone this, mess around with Solidity, see it change in the front end, kind of figure out how you want your app to work. Now eventually you're going to carve out this component. So, let's see. We've got your contract from Hard Hat, we've got our front end over here, and let's go through it real quick.
00:14:16.932 - 00:14:56.692, Speaker B: So your front end is going to have a couple important providers. Mainnet provider is the first one. And why do we need main net here? Well, if I go to an address input field and I type in Vitalik ETH, if I spell it right oh, man, there we go. It resolves to his address and I can send him one testnet dollar. Okay, so we have a main net connection to give us ENS and main net balances. Then we have our local connection, which hooks us up to our local contracts. Then there's just a bunch of handy hooks in here.
00:14:56.692 - 00:15:36.884, Speaker B: Something like getting the current price of ETH, which is displayed here. Getting the best gas price to go on main net to go fast. Like if you're building a main net app, you're going to have to figure out how to get the gas price to make sure your transactions go through quickly. Like this is all built for you and it's all here. Your user provider is this up here using that fallback burner wallet, use balance. That's a really common hook, right? So a nice react hook that you give it your provider, you give it the address that's currently logged in and it's just going to keep your balance in the react state for you. Scrolling down, there's a bunch of contracts here, but then here's reading.
00:15:36.884 - 00:15:52.212, Speaker B: So if you want to read a value from your smart contract and keep it in your front end right there. If you want to listen for all your events, right there. And those are eventually going to feed into an example UI. So I created this example.
00:15:52.346 - 00:15:53.344, Speaker A: Another thing, Austin.
00:15:53.392 - 00:15:54.692, Speaker B: Yes. Ready?
00:15:54.826 - 00:16:01.528, Speaker A: Unfortunately, zoom puts your face over your top right corner. So if you can slide things over a little bit.
00:16:01.694 - 00:16:04.170, Speaker B: Got it. Cool.
00:16:04.940 - 00:16:09.412, Speaker A: I think that should be good. Stay away from the top right corner.
00:16:09.476 - 00:16:24.648, Speaker B: Cool. Yeah. So by the way, top right corner, we were showing this. This is my address here. And then with the burner oh man, what have I done? Let's pull those up here with the burner address. It's going to show up. So, see, this was an incognito window.
00:16:24.648 - 00:16:56.360, Speaker B: We have a different address here, and this is my window here. So just like by opening up an account or a browser, you get a new address. Hopefully that's not too covered up. Okay, so example UI. So you think that the hardest part of building a decentralized app is the smart contract. And that's probably true. You probably should spend most of your time there, but kind of in reality, it seems like I get my smart contract put together and then I spend ten times longer, like getting the UI, right, getting it in someone's hands, having someone use it.
00:16:56.360 - 00:17:37.172, Speaker B: So Scaffold is also trying to help with that, right? It wants to get you to the point where you have an app that you can share with people after just one. So what you do is you can kind of play around like, okay, hello world. I figure out how to kind of talk to my contract, I get it working the way I want. And then we can kind of move over to building a UI instead of having this ugly thing and having to convert from way to ETH. You have this nice example UI, and then I can say, hey, and just kind of use this UI. And it does things like keeping track of a purpose here, right? And then we have an input box, and when the input box changes, we update that state. Simple react stuff.
00:17:37.172 - 00:18:09.920, Speaker B: But then here's how we trigger a transaction, right? So we go write contracts, your contract set purpose. We set it to whatever purpose we were tracking. We wrap it all in this TX function, which I could probably zoom in a little bit more on that. We wrap it all on this TX function. Wrap it in this TX function to kind of notify the front end. So when I fire off a transaction here, we see that little notification. But if you're on a public network, that's going to be block native's, notify that's just there to show you that it's going to work, but when you go to any other public network, that's going to be a much nicer dialog.
00:18:09.920 - 00:18:41.212, Speaker B: Let's see. And that's what that TX wrapper is for. However, you can also send see, we've got like a nice address component, we've got a nice balance component, just things that you find yourself needing. You can also send an object right to that TX wrapper. So if you wanted to send just like a raw transaction, it's there. And I get increasingly harder here's, setting a purpose and sending value. And then here's like super hard mode, like crafting a raw transaction, crafting the raw call data.
00:18:41.212 - 00:18:49.228, Speaker B: So this is going to let's have it not send any value. Yes, please.
00:18:49.314 - 00:18:50.510, Speaker A: Could I ask a question?
00:18:50.880 - 00:18:51.868, Speaker B: Yeah, for sure.
00:18:51.954 - 00:18:59.570, Speaker A: What are the dependencies for this? Because I was looking at the README, but there wasn't any clear list of packages I have to install for this.
00:19:02.420 - 00:19:07.940, Speaker B: You just do a Yarn install and everything should work. I think what you mean is like, you're going to need Yarn.
00:19:08.280 - 00:19:17.350, Speaker A: Yeah, I just tried to grab it through the package manager, but it's just giving me an error. So I'm figuring I probably installed the wrong thing.
00:19:18.680 - 00:19:53.084, Speaker B: Oh, Yarn is giving you an error? Yes. If Yarn is giving you some error about like timing or something like that, you've got the wrong Yarn. If you have NPM, do NPM install G and then Yarn, I think okay, that should give you yes, you want to have like, node. I think I have node twelve working the best, but node ten, node twelve, maybe node 14. Yeah. So you'll need node, you'll need NPM. And then once you have node, you can do an NPM install of Yarn.
00:19:53.084 - 00:20:07.652, Speaker B: And then once you have Yarn let's make sure I have Yarn version here. Have the right one. Yes. So your Yarn version should give you something like this, not some weird timing output. And if you get timing, it means you've got the wrong Yarn. That happens to me on my Ubuntu boxes now and then.
00:20:07.786 - 00:20:08.820, Speaker A: Okay, got you.
00:20:08.890 - 00:20:09.764, Speaker B: Cool. All right. Yeah.
00:20:09.802 - 00:20:10.516, Speaker A: Thank you.
00:20:10.618 - 00:20:20.172, Speaker B: Yes, no problem. So you'll need to grab, get you'll clone this down, NPM install globally yarn, and then you'll be set to do the yarn install.
00:20:20.306 - 00:20:22.268, Speaker A: Okay, gotcha. Cool, thank you.
00:20:22.354 - 00:20:36.588, Speaker B: Cool. Good luck. Also, I'm at Austin Griffith on Twitter, so reach out anytime my DMs are open. So if you have questions or you get stuck, hit me up and I can help you out there's.
00:20:36.604 - 00:20:37.840, Speaker A: Also, are you on discord?
00:20:38.980 - 00:20:42.480, Speaker B: Sort of. I'm in like too many discords.
00:20:42.980 - 00:20:43.488, Speaker A: Okay.
00:20:43.574 - 00:21:00.756, Speaker B: Yeah, but yeah, I mean, like hit me up. There's not a specific discord channel for Scaffold ETH. There is a telegram channel. So when you get your scaffold ETH up. There's like this support link right here. And this takes you to a Telegram channel, I think. Okay, so feel free to ask questions there or just DM me directly.
00:21:00.756 - 00:21:01.784, Speaker B: Cool, right?
00:21:01.902 - 00:21:02.472, Speaker A: Thank you.
00:21:02.526 - 00:21:36.544, Speaker B: Awesome. Okay, so let's see. Where were we? We were talking about you kind of tweak your contract. You get it looking right, but then eventually you'll build some kind of example UI, and you can probably find examples in this example UI. The point is you should be able to copy and paste a lot of this stuff and focus on just the stuff that you're innovating on. What product are you building and how are you focusing on that product. And all the other stuff, hopefully, is kind of here and available for you to kind of copy and paste and pattern match and figure it out.
00:21:36.544 - 00:21:46.372, Speaker B: By the way, how's bandwidth going? Trent? I didn't even ask. I've got my E two node running here, and sometimes the bandwidth is a little choppy. And are we pixelated or are we good?
00:21:46.506 - 00:21:51.672, Speaker A: I mean, it actually only started doing that right when you asked, so just don't ask about it and it should be okay.
00:21:51.806 - 00:21:56.008, Speaker B: That's true. Yeah. I can shut it down if we get a lot of choppiness, but it.
00:21:56.014 - 00:21:58.200, Speaker A: Seems like, man, you got a stake.
00:21:59.180 - 00:22:18.032, Speaker B: Yeah, that's right. I can let it bleed a little bit. It's fine. Okay, so events are here too, right? Event map. Once you kind of start building your front end, you start putting events into your smart contract, you're going to want that event parser. Right. And we found that in the app.
00:22:18.032 - 00:22:39.024, Speaker B: We've got this event parser. Where is it? Right here. You throw in this hook and you tell it what the name of your event is, and it's just going to keep all your events loaded up in this array for you and you can list them out. What's cool is you can just dump this object right into a list object. Where is that list? Right here. We're dumping it right in here. So there's just this nice list.
00:22:39.024 - 00:23:26.020, Speaker B: So I put my event in my contract. I deploy my contract, I do some stuff with it, like interact with it. Then I set up an event listener and I feed that into a list, and then I just have that in my front end. And anytime anybody sets the purpose, we see a new event come in there. And just to prepare you, once you go to production and you have a production level app parsing events in the front end is probably not going to be the way you go if you're building something simple like the bank, right? The Build Guild bank still operates on events, right? This is okay. It's like there's like six of them, right? I can get away with that. But then over like a nifty inc we had to take, we couldn't parse event anymore because there were just so many of them.
00:23:26.020 - 00:23:52.380, Speaker B: If I go here, hopefully there aren't too many DS drawn today. Oh, just the word penis. That's nice. So when we were reading these events, we saw that it was too slow, so we had to set up something else. And so Scaveneth will be ready for you when you're ready to go and set up a subgraph. I think Adam might be on the call. Adam set all this stuff up, but it's like when you're ready, you can fire up a fourth command out of all these commands that we're running here.
00:23:52.380 - 00:24:45.600, Speaker B: You can fire up a graph node locally using Docker and then that will parse your events. And then you can query that using GraphQL. Something a lot easier than parse all my events and find how they're mapped together and display them in the front end. So knowing that this is there for you, just use your events, set them up, use a list for now, and then when you're ready to go to production, you can move over to the subgraph and it will all be there for you. You'll have to edit some files in here, some config files for the subgraph, but again, that's not until you've got lots of events firing and you need a better method around that. Okay, any questions before I sort of dive in and start building something little just to show off an example? Anybody want to oh, events. How do you go from events to subgraph? So basically you stop displaying your events.
00:24:45.600 - 00:25:26.380, Speaker B: You'll set up some config for the subgraph, like you'll have to set up your schemas and then you fire up that other node, and then you just basically follow these instructions. And then you'll start being able to and there's an example right in here in the subgraph of how to display those. Just how to take that list of events and turn it into a list that's being pulled from the subgraph all happens here on this page. So I think that's let's see redux. I'm not using redux. We probably do need to figure out some kind of context. Like we're getting to the point where we could use some kind of context in React.
00:25:26.380 - 00:26:03.604, Speaker B: Let's see, that event listener is here, right? And then it's getting passed into the example UI. So I think that we could use some let's see, but probably not redux. Yeah, I don't have anything with redux yet. Cool. Oh, and React router just while we're here is here. So these tabs that you have across the top are kind of here's the links to them, and then here's what they display. I think I was running to this contract component earlier, but this is kind of a magical component.
00:26:03.604 - 00:26:56.356, Speaker B: This is the component that your contract is set up here. Just speaking of that, let's just create a second contract, right? So I'm going to duplicate this and call it second. So what are the steps of adding a second contract, right? We'll just call this guy, we'll give him another purpose. I don't know why I'm doing purposes, but we'll make a second one. And so what are you going to need to change? Once you've got your contract added to your contract folder, you'll need to add another line to your deploy file where we say this will be our second. You would think I'd get better at typing second. All right, and then boy doesn't.
00:26:56.468 - 00:27:08.828, Speaker A: Where's the directory for yarn? Because I think even though I uninstalled it, it's still on there. What's the directory for it?
00:27:08.914 - 00:27:31.670, Speaker B: Yeah, it's wherever you installed it on your operating system. It's probably like in yeah, well, I can tell you where is Yarn on my machine? No, nothing. Let me go into the pinner real quick. Where is Yarn? There it is. So user ben yarn or user share yarn? Check those out.
00:27:35.160 - 00:27:35.910, Speaker A: Okay.
00:27:37.820 - 00:27:43.480, Speaker B: I don't know. Good luck. You've got yarn installed on your machine?
00:27:44.060 - 00:27:46.680, Speaker A: Yeah, I regret installing the wrong version. Wrong.
00:27:46.750 - 00:28:05.376, Speaker B: Yeah, I did that too on mine. I'm not sure. Try where is Yarn and you might be able to find it. Okay, here we go. So adding a second contract. We've got second here. We've added it to our deploy and then we add it to the front end where we add another contract called second.
00:28:05.376 - 00:28:21.796, Speaker B: Those are the three places you have to add it. Now if I do a Yarn deploy, we should get a second contract in our front end. So now we're going to compile them. We're going to deploy both of them. We get them in the front end. And now we have there we go. So we have two different contracts now.
00:28:21.796 - 00:28:42.904, Speaker B: So as you add new contracts, you can have this cool scaffolding. I just wanted to show that. I don't think we will. Let's see. Let's see if we can use our second contract. Okay, so we've seen underflow. You should be able to just poke around on solidity by example if you need some solidity help or inspiration.
00:28:42.904 - 00:28:56.680, Speaker B: Check this out. Like reentrancy multisig wallet. This multi SIG wallet is so cool. This is a great way to learn structs and arrays of structs. Build your own multi SIG wallet. Okay, so let's say you're iterating. You're kind of getting there.
00:28:56.680 - 00:29:31.940, Speaker B: You're building out your contract the way you want. You can kind of poke at it from the front end, get it to kind of work the way you want. So eventually you're going to get to wanting to inherit something from OpenZeppelin. And that comes, I think it comes with hard hat or maybe it's installed in scaffold ETH into the hard hat folder. But let's go look at the OpenZeppelin contracts. One thing specifically for DeFi we probably want to dive into is looking at tokens. So there's a lot of different tokens here, but ERC 20 is like the most famous.
00:29:31.940 - 00:29:45.650, Speaker B: And so instead of us. Having to write our own token. We can just inherit that in. I'm going to grab that right there. Okay. So we're going to make a token here. There we go.
00:29:45.650 - 00:30:11.156, Speaker B: And since I'm going to eventually deploy this, I'm going to pull out my console log stuff. Let's see. I haven't done this in version eight yet either. We may find some weird things here, too. So this is going to be an ERC 20. We're going to inherit that. And then on deploy, we're going to say, this is going to be your token.
00:30:11.156 - 00:30:38.032, Speaker B: We're going to give it a symbol of YT. We're going to go ahead and mint some to let's just mint some to our front end account at first, close all this stuff out. All right, let's mint some to this guy and we paste that right in and let's just mint him ten Ether worth. All right, let's see if this compiles. No. Oh, man. Yeah.
00:30:38.032 - 00:31:03.496, Speaker B: Okay, let's switch back. Let's switch back to 67. I guess maybe the Open Zeppelin stuff isn't versioned yet for eight. Let's see. And then we'll change our compiler. What's that? They don't do safe math or they have safe math. Okay, back to six seven here.
00:31:03.496 - 00:31:28.848, Speaker B: And probably this needs to be a six seven, too, where underflow will still occur for us. But what I do public. Got it. Okay, so they force us to write public in six seven, but they tell us to remove it in eight. Here we go. Oh, wait, there's still a no, we're good. Okay, awesome.
00:31:28.848 - 00:32:11.580, Speaker B: Now we have deployed our token, and we can see that the your contract kind of Scaffolding auto adjusts to that, and we can even now grab our address and check our balance. And there we go. So we've got ten ether. What I like to do a lot on mentorship sessions is show off, like a vendor contract. Maybe we could turn this into a vendor and we could sell. Like, we could bring in an interface. Probably not a ton of time for that, but I would suggest if you're looking for a good little quest, you can always just dive into Scaffold ETH, create a token like I just did, create a vendor, have that vendor put it on sale.
00:32:11.580 - 00:32:32.528, Speaker B: We'll get to that. I'm going to leave it here and we'll attack it, maybe. But for now, I just want to kind of COVID as much as I can without writing too much. But eventually maybe we'll have a vendor here. Maybe we will. Let's see. Vendor.
00:32:32.528 - 00:32:55.500, Speaker B: And we'll have it here. Yeah, I mean, I'm already halfway to having a vendor. We might as well just have it in here, right? Okay, cool. All right, so we've got our vendor, we've got our contract. What I want to do is instead of minting to myself, I want to mint to the vendor. So here's what we'll do. We'll mint to the message sender.
00:32:55.500 - 00:33:10.412, Speaker B: Okay. And then in our deploy script. We'll mint the vendor. And the vendor is going to need to take in the contract address. Get to that. But then we're going to need to await. Let's see the your contract, which is our token.
00:33:10.412 - 00:33:37.930, Speaker B: I should have just named it your token transfer. And we're going to send all of it to the vendor. Yeah. This dude awesome. And so I need what do I need? Wait. Oh, man, what am I doing? Here we go. Here we go.
00:33:37.930 - 00:34:26.024, Speaker B: There we go. I'll mint a token. I'll mint a vendor that takes in some token address and it and that'll take in our address, token address. And we'll bring in contracts token, ERC 20, ERC 20 or IERC 20. Right. We'll bring in the interface for the ERC, 20. You probably just bring in ERC, 20.
00:34:26.024 - 00:34:48.210, Speaker B: I don't think it matters. Bring the whole thing in. Yeah. What about I mean, it would be heavier, right? Because I would have to have right. You're going to be loading all the functions of the interface you don't use. But that'll be all right. This will compile this will work.
00:34:48.210 - 00:34:57.990, Speaker B: Let's see. Let's see if this works. What did I do wrong here? It's still commenting out. There we go. Got it. This is it. This is it.
00:34:57.990 - 00:35:40.640, Speaker B: Okay, so we have a token and then we're minting that token to ourselves and sending it into the vendor. We're minting a vendor and setting that up with our token. What we need is a buy token function. And really, if we have time, we should do something neat with this and make it more defiish. But right now, it's not going to let's see. It'll just be a payable function and I'll sell it to you one for one. Right? So I'm going to token transfer to the message sender whatever the message value.
00:35:40.640 - 00:36:08.684, Speaker B: So they put in one ETH. They get one token back for non standard. I learned this from the open zeppelin, guys. Nonstandard tokens. You want to require that? Let's see how we doing. Do we have a buy tokens function? Can we mint and sell our oh, feel like I messed something up in that. There we go.
00:36:08.684 - 00:36:22.112, Speaker B: There we go. Okay, cool. Awesome. So we've got our vendor, we've got our token. And right now our vendor probably has the full ten balance. Yes. So our vendor holds all of them.
00:36:22.112 - 00:36:38.916, Speaker B: And then if we go in here and so this is an example of I'm going to buy one ETH worth. Actually zero. One ETH. Do I have that much? Yes. So I'm going to buy one ETH worth. This is an example of what a developer is going to do. You have to take it times ten to the 18.
00:36:38.916 - 00:36:56.444, Speaker B: So the scaffolding kind of sets you up with a lot of raw inputs. You have to hit this little button to take this times ten to the 18. That's what the contract needs it in. But that's not what you want your end user to do. So eventually you'll carve this out. But just showing you. There we go.
00:36:56.444 - 00:37:11.996, Speaker B: So we were able to spend 0.1 ETH. Now if we go check our balance, we should see that we have some tokens. There we go. Awesome. Okay, so if we wanted to make this more DFI Ish, we would probably put in some kind of pricing function. We could make it more of an AMM.
00:37:11.996 - 00:37:59.212, Speaker B: We can make it on a curve. The reason why I like to show this as contract to contract interaction is if we set up a sell token function, and I'll let you kind of just, like, take that on your own. But a sell token needs to set up an approve, right? So you get used to the pattern of first I have to approve the vendor to take my tokens. Then I have to tell the vendor how many tokens they want. So there's a two transaction kind of thing that you have to set up, but that's a good side quest for anybody who's looking for building. The last thing I want to do is just put this out on a network, and then we'll go through all the different branches that we have. So Scaffold ETH has a ton of different branches.
00:37:59.212 - 00:38:16.912, Speaker B: Let's see. This will take a second once I point it because it needs to build. Okay, what network should I deploy this to? Anybody? Any choices here? Coven? Maybe just rinkabee. Coven. Okay, let's go coven. I like it. Let's see COVID.
00:38:16.912 - 00:38:39.212, Speaker B: So if I put in so your hard hat config is here. Your default network is here. So I'm going to put in Coven as my default network. Now, if I just do a yarn deploy, it's not going to work. I need to generate so I'm going to do a yarn generate and generate an account. Then if I do yarn account, this is going to be my deployment account. Let's see.
00:38:39.212 - 00:38:57.620, Speaker B: Hopefully I have some coven. If anybody has any Coven, you should shoot it to that address. Let's see. I was planning on using an Instant Wallet, but I don't know if I have any Coven in my Instant Wallet. Let's find out. Oh, I do. Check it.
00:38:57.620 - 00:39:11.370, Speaker B: Check it. Instant wallet built with Scaffold ETH. I'm going to hit scan. I'm going to scan that address. There we go. Got a nice little blocky. Hopefully zero one is enough.
00:39:11.370 - 00:39:28.476, Speaker B: Three covan getting sent right now, maybe. Wow, it just went away. I didn't get a I wonder if Block native doesn't have Covan. I bet that's what it is. Let's do a yarn account. It should take, like, 5 seconds, right? Covan blocks. There we go.
00:39:28.476 - 00:39:58.260, Speaker B: All right? We've got covan. We've got a deployer account. Now let's do a yarn deploy. Same thing, but this time it's going to be pointed at Covan, right? So instead of deploying locally, we're deploying to Covan. And we can see that this is going to take some time to update. While that's running, I'm going to jump over to our front end because our front end is still pointed at localhost. What we need to do is bring in this, and we need to point our front end at COVID.
00:39:58.260 - 00:40:16.444, Speaker B: Hopefully it's that easy, but I'm not sure if it will be. Let's see. So our vendor is getting deployed. There's our last transaction that gets injected into our front end. And now if I do a reload now our vendor is here, and this app is here and ready. Let's see if I check the balance of this. There we go.
00:40:16.444 - 00:40:42.912, Speaker B: So there's ten tokens. How do we prove that it's on Covan? Is there a Covan ether scan? I don't think there is. Oh, there is? Okay, so let's just go look at this contract to make sure. Let's go talk to a disinterested third party, and sure enough, our contract was created. We could even go contracts. Oh, not similar. We go and you probably should right? If you're deploying a token in a vendor, you should definitely go get your contracts verified.
00:40:42.912 - 00:41:16.704, Speaker B: And if you do a yarn flatten into a flat TXT file, you can go grab that flat TXT file. Got to trim some stuff and go verify and publish it here as a flat file, and then everyone will be able to see it. They can see your contract code publicly, so they know it's not, like, inflationary or something weird. Okay, so we've set up a token contract. We've set up a vendor to sell that token contract. We've deployed it all to Coven, and now someone can come along with some coven ETH. I got to send some Coven ETH to my actually, let's see.
00:41:16.704 - 00:41:26.612, Speaker B: Let's do it with MetaMask, right? Okay. I bet. Oh, look how much Covan ATG has. Look at that. I am a testnet whale. Check it. Okay, so let's see.
00:41:26.612 - 00:41:44.664, Speaker B: I'm going to go buy one ETH worth of this token, please, sir. Man, that is scary. That is Ethereum main net. Do not fire that transaction. Okay, that would have not been fun. Let's make sure this is on Covan. There we go.
00:41:44.664 - 00:41:58.012, Speaker B: Probably should have a network warning there. All right. One of those purchase. There we go. So we're on the COVID network. We're sending one ETH to this five abe. Okay, there we go.
00:41:58.012 - 00:42:14.944, Speaker B: Glad I didn't burn one ETH live in front of everyone. That would have been embarrassing. Yeah, that would be real. Yeah. Welcome to web3. Okay, so now let's check Austin Griffith's balance on Covan. He has one.
00:42:14.944 - 00:43:01.964, Speaker B: Could we even check it from the contract's already closed? Okay, so the last thing you want to do is you want to do a yarn build, right? We want to ship this, and obviously we would not ship an app with this junkie scaffolding, but you would kind of go this example UI route and build out your UI. But for now, I'm going to do a yarn build, and that's going to build a static website. And then I'm going to yarn surge, and we'll have this token on Covan and the app live, and you guys can get in with your Covan and buy some of my shitcoin that I just minted. Okay, cool. So that's going to take a bit and that's kind of closing the loop on. You should be able to get Scaffold ETH down. You should be able to tinker with your contracts, add in some UI, then you should be able to push that out to a testnet or even a public network.
00:43:01.964 - 00:43:52.840, Speaker B: Right? We could have totally put in Mainnet right here and we would have paid for it, but we could have deployed this token to Mainnet just as easily and my one Mainnet ETH would have actually been a buy. So that would have worked okay. But what I want to dive into now is just all the cool branches on Scaffold ETH. So we found that it's a really kind of like a cool tutorial format to just make a fork of Scaffold ETH and build it out and build the tutorial right in the README. So this is market make. So I'm thinking my old school knowledge of Market Make makes me think of like an order book, like a make it, take it kind of order book. And so if you want to build something that uses an order book, you're going to need to know how to do Signature Recovery.
00:43:52.840 - 00:44:34.912, Speaker B: So if we go to Signature Recovery here or Signature Recover, there's a Scaffold ETH README and you basically just clone this and switch over to this branch. And it's all of scaffold ETH. Everything is in the same place that you would normally expect it, but then it's going to deploy your contract that shows you how to do EC Recover in the contract. So let's see, it sets you up with yeah, it basically walks you through this. And once this deploys, I'll check out some of these branches. But you can see how we generate a hash. We sign that hash, then we open up a second browser and we make sure that that signature works.
00:44:34.912 - 00:45:11.564, Speaker B: And then this leads you to a meta multisig. So if I go meta multi, there's a meta multisig branch, same thing. It talks you through how to build. Now that you know how to do Signature Recovery, here's how you would build a multi SIG wallet using that Signature Recovery. And by the way, this is what runs like the Build Guild Bank, right? This code is deployed live. This is on Main net here's a bunch of people getting streamed funds from the wallet that we built with. Oh, our app is done.
00:45:11.564 - 00:45:31.196, Speaker B: Here we go. We are all over the place here, but I'm going to surge this. What are we going to call our token? Anybody? How about Gusty cats? All right, I'm just going to call it Gusty token. I don't know why it's windy. I've been windy on this call. There we go. We've got gustytoken surge.
00:45:31.196 - 00:46:04.524, Speaker B: Sh. You can now be very careful not to make a main net transaction. There is not a warning on that. If you connect your MetaMask, you should know what you're doing, but there is gustytoken surge. And if you want, you can just kind of pull up one of these addresses and send it some covan and then just use your burner to buy some tokens for some reason. Just showing you that we can kind of close the loop and make a fully pushed DAP in one sitting. Gustytoken search.
00:46:04.524 - 00:46:17.040, Speaker B: Sh. Okay, now what I want to do is check out a couple of repos. Do we go to the hour? Do we only have four minutes? Where are we at here? I got a lot of extra stuff to show here. What do you think?
00:46:17.110 - 00:46:24.320, Speaker A: You can keep going. Let me double check the calendar, but I think the next one is at 430 Eastern, so you've got quite a bit of time.
00:46:24.390 - 00:46:51.500, Speaker B: Okay, well, I'm definitely not going to go that long. I got sushi waiting for me in the fridge. I'm going to go eat it real soon, but how about let's go for 15 more minutes and I'll just show off all the branches. I'm wondering if Adam is around eventually. I'd like to have Adam show off the new hot hot. He has a branch, that is all. I don't know if I see him here, though.
00:46:51.500 - 00:47:10.528, Speaker B: He may not be here. I have a screenshot that he sent me. Okay, cool. Let's look at branches, right? Okay, so let's check out let's look at what branches are good here.
00:47:10.614 - 00:47:12.576, Speaker A: Oh, was that Adam? Just talking?
00:47:12.678 - 00:47:16.356, Speaker B: Adam, are you yeah, there he is.
00:47:16.458 - 00:47:17.830, Speaker C: Hey, how's it going?
00:47:19.400 - 00:47:21.908, Speaker A: Do you want to do this now at the end?
00:47:22.074 - 00:47:35.976, Speaker B: Yeah, we'll do this in a second. I feel like we'll finish with the say, let's say in five minutes, we'll go all Aave for the rest of the call. Give me five minutes to jam through all the other tokens, and then I'll hand it off to Adam to show off, if that's good.
00:47:36.078 - 00:47:37.848, Speaker A: There are a few other questions in.
00:47:37.854 - 00:47:58.176, Speaker B: The chat, but those at the see. Okay, cool. Oh, I see a question about TypeScript and JavaScript. I asked the same question to a lot of people. I've asked it on calls we've done before. Right? Trent, like, ask the guys a lot smarter than me. And it seems like if you're prototyping, you're just dogging something out.
00:47:58.176 - 00:48:35.820, Speaker B: That's probably JavaScript. Once you have an established product that is now going to start getting used and more people than just you are going to use it, you probably do want to start using TypeScript. TypeScript is just so frustrating to me. I just start shouting cuss words whenever I'm writing TypeScript, so I usually just switch to JavaScript because I can get stuff done. Yeah, maybe that's the key, is use the thing that gets the product out the door. But if it's a long running product, you're going to probably want to start looking at TypeScript and typechain. Maybe I just never build any long running products.
00:48:35.820 - 00:49:05.844, Speaker B: Everything I do is just dogging it and whatever ends up, ends up okay, what do we got for branches? There's so many cool branches here, and there's so many things that it's not just the code, but it's a walkthrough, and it tells you how to emoji support. This is a good one. Here we go. Emoji support. I don't know if it's oh, look at this. It's a nice tutorial. Okay, so let's say you want to run your own quadratic funding round you would like to have.
00:49:05.844 - 00:49:22.828, Speaker B: Let's see, what do these contracts look like? Do we have some square root math? Oh, it's still old Bibbler, by the way. Contracts. There we go. MVP Clr. We got to have a square root in here somewhere. Whatever. But if you want to build your own oh, I just closed it.
00:49:22.828 - 00:49:39.132, Speaker B: Bring it back. Bring it back. Okay. If you want to build your own quadratic funding round with a full front end with the contracts and the app, it's right here. You just clone this repo and kind of go through these instructions and it will show you how. By the way. Bear Market Liquors.
00:49:39.132 - 00:50:11.076, Speaker B: Come on. Bear Market liquors. That's the best name for a company ever, right? Trent? We're not in the bear market anymore, I don't think. But we were when I made can, and we can tell by that right there. You can fork a lot of these different branches and kind of have a working DAP and then make those small tweaks and kind of work toward whatever product you're thinking of building. The bank, the Build Guild Bank, the multi sigs that I was talking about are there for some reason. We did an allow list example a while ago.
00:50:11.076 - 00:50:51.592, Speaker B: I don't remember exactly what this is, but I don't remember it's an Allow list in a contract or something, but there's just tons of branches. And also you can jump into the Scaffold ETH chat and just ask and someone might be able to point you at the right branch. We got to clean this up. There's a lot bonding curve. Here's a good one. So this one talks you through how to build a bancor style bonding curve with Scaffold ETH and kind of just like what the UI is going to look like, how you mint and burn. Let's see what else we OOH Bytes Land.
00:50:51.592 - 00:51:22.336, Speaker B: Do I have this? This is a fun little game that I built that looks at the block hash and then generates these NFTs and you can claim them. And there's an interesting thing that the block you can only read the block hash back, like 256 blocks. So you have this window within the last hour to mine these NFTs from the deterministic block hash before they disappear forever. Fun little game. Fun little something to play with there. Let's see. Starting from the bottom, what else do we have? So the uniswapper is a big one.
00:51:22.336 - 00:51:40.804, Speaker B: We'll get to that in a minute. Let me see if I can find OOH token allocator. This is a fun one we were looking at. Could we build like, this credibly neutral token allocator while people send tokens and it splits it to different people. I know there's a commit reveal. Let me just search commit reveal. There's a couple of commit reveal tutorials.
00:51:40.804 - 00:52:29.990, Speaker B: And if you're thinking of something to build, build a commit reveal tutorial in scalp just to go through it. Build a decentralized bank, build a multi SIG wallet, build a staking app where you can stake funds and make sure you have the date timestamp right. Lots of little things that sound dumb simple, but by building them, you'll kind of find your blind spots and you can fill them in. Okay, what do we got? What do we got? What do we got? Yeah, this is like old school, like minimum viable decks, basically building that pricing function that makes an AMM work. There's so many cool ones. What else? What else? I think it's time for haiku exchange. This is cool.
00:52:29.990 - 00:52:52.164, Speaker B: So you get in and you mint haikus and they're ERC 720 ones and you mint them on a bonding curve. So look for the haiku exchange coming out soon. Let's see. Roll some dice. That sounds interesting. Not much there. Okay, let's go look at the swapper.
00:52:52.164 - 00:53:02.088, Speaker B: It's time. Wait. Instant wallet. Is the instant wallet here. There we go. There's a couple of them. An Instant wallet is just instant wallet IO.
00:53:02.088 - 00:53:16.956, Speaker B: Darn it. There's not a good one. How about eight bit? Does the eight bit wallet? Adam built an Instant Wallet but gave it the NES CSS feel. No. Very cool stuff, though. Lots and lots of cool branches. All right, the uniswapper.
00:53:16.956 - 00:54:06.060, Speaker B: This is the one. So the uniswapper is it brings in a couple of things. So first of all, I'm going to kill my local. Let's see. Can I just check it out? The uniswapper is built by Adam and he took kind of a similar uniswap UI and built it into no yarn install probably, and set it up. So you can create a uniswap, like front end for your back end or for whatever you want. You can just like off the shelf, you can bring in a dex UI.
00:54:06.060 - 00:54:32.872, Speaker B: So if you have to swap between tokens or swap between ETH, you can just go to the uniswap or branch and clone that in. Let's see. This is going to be a wild one if I can pull all of this off. But let's see. We'll do a yarn start and that's going to bring up our front end. Then I'm going to do a yarn fork. And yarn fork is going to give us main net fork of ethereum.
00:54:32.872 - 00:55:03.140, Speaker B: Right? Let's kill that and say yes. Let's see if this works. So we're going to fork main net, and then we're going to bring in an exchange component that lets us do, like, uniswap like stuff, but all within our own app. Okay, let's see if this comes up. Cool. There it is. Okay, so I'm on a Mainet fork, so this is going to be weird, but I'm going to bring in my MetaMask.
00:55:03.140 - 00:55:17.240, Speaker B: Yes. Localhost. Make sure you're on localhost, even though it's going to show my normal main net. I wish that was my main net balance. Let's see. Let's connect. Let's connect MetaMask.
00:55:17.240 - 00:55:48.524, Speaker B: Make sure we're on localhost 8545. Hmm. I am weird. Okay, I guess this isn't going to work. Maybe it's oh, you know what? I know I have a shoot. I changed my chain ID for my local host, so I need to get in and edit that. And I don't want to navigate MetaMask when we only have five minutes left.
00:55:48.524 - 00:56:09.432, Speaker B: But look at this. You have this nice component where we can swap from ETH to Dai. I think I can switch that. Yeah. So or I could do Dai up here. Right? Basically, you can swap between tokens within your own UI, and there is a medium article that goes with this. Wow.
00:56:09.432 - 00:56:33.810, Speaker B: I'm not doing a very good demo here. Sorry, guys. I think it will be about time to hand this off to Adam to show us the ave stuff. But you do have a uniswap like interface in Scaffold ETH. You'll just need to be careful when you do this yarn fork that your chain ID is correct. And that's what I need to go fix to be able to pull this off. So I won't be able to do a live demo.
00:56:33.810 - 00:56:59.610, Speaker B: But you do have a uniswap component built into Scaffold ETH to pull it off. Let me can adam, can you share your screen? What do you think is the best way to do this? Yeah, I would love to see the me. Let me stop sharing. You see, if you can share, we might have to make you a host. We may have to have some magical I'm going to look through questions too. Awesome. You got it.
00:56:59.610 - 00:57:12.764, Speaker B: Oh, look at you got the uniswapper too. Yes, the uniswapper do a better demo than is, like Austin said, essentially using.
00:57:12.802 - 00:57:47.796, Speaker C: Scaffold ETH, but starting to pull in some more things from DFI. So I don't actually have 25,000 $24,000 worth in here. The nice thing when you're running on a fork is that you can effectively give yourself as much as you like. So I'll pull open the faucet and give myself let's give myself, whatever it is, another 50,000, and that should hopefully land 74,000. That's quite nice. So to give you a sense of the uniswap, of how that works, you can see essentially it's got that balance, 61 die, 661 ETH. I can switch that out for die.
00:57:47.796 - 00:58:01.132, Speaker C: You can set the amount in ETH so I can add 50 there and give it a second. It sometimes takes a little while to get going. Yeah, that'll give me 50, 62,000. If I swap that, it clicks up.
00:58:01.186 - 00:58:05.070, Speaker B: Confirm and see the slippage on that.
00:58:05.680 - 00:58:43.852, Speaker C: Yeah, not too bad. That gives me sort of 83,000 dime. So you get a sense where first you feel like an absolute baller, but then secondly, it's a good example of how you can extend the components to be actually interacting with DFI, which is what you can do when you're on a main net fork. Aave, obviously. So like the same idea. This is sort of an ave lender component. And the key thing here, I'm just showing this window rather than the whole screen, but all you do here is you basically pull in the component and then pass in like a local provider which has got a signer and then that's pretty much all this needs to render like this.
00:58:43.852 - 00:59:20.932, Speaker C: So this essentially is again, taking this account here, this like I deposited it earlier, but it shows your sort of collateral, your debt, your allowance. You can show that in the native amount or you can show it in US dollars. And effectively this may maybe if I hide this guy yeah, effectively shows you all the different markets, the different deposit rates. And so this is like pulling on chain to get this information. Just my local chain. But then, yeah, so you can deposit, you can borrow. So I've got a bit deposited already.
00:59:20.932 - 01:00:13.796, Speaker C: Maybe if I wanted to borrow some uni or maybe some WiFi we've just got some little helpers here which tell you what you've deposited, what your maximum borrow is based on the amount you deposited, this kind of stuff. So again, it's just taking a load of the components and hopefully also showing how to do a bunch of stuff like interact with contracts that have already been deployed that you haven't deployed, as well as some of the stuff. Like if I wanted to deploy, if I wanted to deposit a load of dai, starting to handle some of the give a second approvals and those kind of things. And essentially it's a bit more complex than uniswapper, but like Austin said, it's getting closer to DeFi. So, yeah, that's the lender component, which is on the lender the lender branch.
01:00:13.828 - 01:00:15.450, Speaker A: Of Scaffold right now.
01:00:16.140 - 01:00:47.484, Speaker B: Yeah. So good. So we've got a yarn fork. So on top of just like the usual scaffold eat stuff, you can learn commit, reveal, you can learn kind of how to get your solidity in your local environment, building tokens, building vendors, building AMMS. But then it's like integrating with existing protocols, right? We've got the uniswapper where you can swap stuff, you can bring in a component, swap stuff, you can fork mainnet and then this is super. Cool. I haven't even played with this yet, but I'm excited to mess around with some ave.
01:00:47.484 - 01:01:15.740, Speaker B: And it's like you could do it on a main net fork, right? You could set up your UI to kind of like, okay, let's make sure this is going to work. But then you can deploy it and actually switch it to real mainnet and run through it live. Also, this is really awesome. Adam, great work, man. This is so let's just open it up, right? Uh oh. I don't know if I can hear you. Let's just open it up for questions.
01:01:15.740 - 01:01:35.250, Speaker B: Anybody out there have any questions? Anybody want to see us hack on something? Like, I've got some extra time. We can stop the recording. Whatever anybody wants. I'm open for whatever. If there's a specific question you want to see something built? You want me to talk through something, I'm up for whatever. Open it up to the world. Anybody have any questions?
01:01:42.200 - 01:01:45.110, Speaker A: The Immaculate Workshop, sounds like.
01:01:46.840 - 01:02:22.784, Speaker B: So one question, Trent, that you talked about was I kind of have a hint in there that you can upgrade or you can graduate to Create ETH app. And create ETH. App is also on ethereum.org. It's built by Paul Berg. It's a little bit different. It's more like he's done the work of taking Create React app and then adding kind of DeFi protocol interfaces to so if you need to build your own contract and you want to kind of iterate on the contract, use Scaffold ETH. If you just want to go talk to one of the contracts that's already deployed, try Paul's Create ETH App.
01:02:22.784 - 01:02:58.664, Speaker B: My instinct is eventually these things are going to kind of come together and all of this stuff will just be one big or maybe it's a bunch of like maybe we take our hooks library maybe we take our components library and make them more reusable in something like Create Ethap. But yeah, take a look at his stuff. Also just making sure that is on everyone's radar, too. Like, use the best tool for you to get the job done. Link for Paul's create ETH app. Let's see if you just go to Ethereum.org and do Local Environment.
01:02:58.664 - 01:03:22.070, Speaker B: So ethereum.org developers, local environment and then create ETH app. Is there I can post it. I got it. Cool. What else? Oh, have I showed ETH build yet? I should show that real quick just to you got to shill when you got it around. So if you go to let's see, learn by Coding, go to ETH Build.
01:03:22.070 - 01:03:54.956, Speaker B: This will help you just kind of COVID a lot of the fundamentals hashes, key pairs, transactions, encryption. Kind of goes through how consensus comes together and then we get smart contracts. But it also just can set you up, I think there's oh, yeah. It can set you up with just this nice sandbox right? Where you can go let's go talk to I don't even know here let's bring in some random chain. Let's go see what block Covan is on. Since we have that. There we go.
01:03:54.956 - 01:04:31.748, Speaker B: Then it'll run a query and it's on that. That's the block that Covan is on. For some reason, if we wanted to make a transaction or we wanted to bring in a key pair and sign some message and then send it across IPFS and then store it as a file drop and display it as a QR code and input a file upload. Okay, I'm all over the place, but you get it. This will help you even, like what if you had, like, a number that was just like and you're like, whoa, what is that in? Oh, look at that. That's 1000 GWe. That's pretty cool.
01:04:31.748 - 01:04:55.756, Speaker B: Or if I add a couple more, will it do way instead? No, it's not going to. But you could do two way. Right? So just a handy little I don't know what I'm doing wrong here. Okay. Handy little tools that you can use to kind of build stuff out. That's ETH build. Getting the fundamentals and then switch over to Scaffold ETH.
01:04:55.756 - 01:05:09.190, Speaker B: Build out your app. Lots of branches on Scaffold ETH. Lots of people helping out, building new cool things. If you're interested, hit me up. Like, straight up in the DMs. I'm at Austin Griffith. Join our scaffold ETH channel.
01:05:09.190 - 01:05:18.090, Speaker B: Open to any more questions, but I feel like we're wrapping up. Anybody got anything? Hit us. Hit us if you got something.
01:05:18.940 - 01:05:20.360, Speaker A: I don't have Twitter.
01:05:21.020 - 01:05:26.936, Speaker B: Yeah. How about telegram? Can I just post a link to the Telegram chat?
01:05:26.968 - 01:05:37.650, Speaker A: Right, telegram either. You might want to get one of those discord for, like, the first time in five years.
01:05:38.900 - 01:06:13.592, Speaker B: Yeah, it might be time to get Telegram, I think. Let me send you, like, Twitter is pretty awesome for getting crypto Twitter news. I feel like I've learned a lot from having Twitter and following smart people on Twitter. Like, smart crypto Twitter people. I would get Twitter. Even if you just create some anon account that's just some cartoon character, go follow the top 20 awesome people in Ethereum and you will learn so much. There's so much neat stuff going on.
01:06:13.592 - 01:06:25.250, Speaker B: There's a lot of stuff that you can ignore. Right? There's a lot of good stuff, too. So I would say get Twitter. I'm going to post Austin Griffith. This will be your first follow. Follow me. Number one.
01:06:26.980 - 01:06:33.792, Speaker A: So it's not like people that are like, ETH is going to $1 million in two weeks. It's not just you like that.
01:06:33.926 - 01:06:41.648, Speaker B: No. There was two years of a bear market where we didn't even talk about price. It was fantastic.
01:06:41.744 - 01:06:44.310, Speaker A: Yeah, I recall. I bagged help.
01:06:47.720 - 01:07:08.252, Speaker B: Let me grab the chat. Just so we have the Scaffold ETH chat. I'm going to paste that in here, too. Anybody who wants to join the Telegram channel for Scaffold ETH? If you just have random Scaffold ETH questions, post them in there anybody else?
01:07:08.386 - 01:07:12.510, Speaker A: There are a few questions. I think maybe.
01:07:15.780 - 01:07:29.760, Speaker B: This is a cool question. Just making a list of my favorite Twitter people. That's a cool like, we could do that, like, not live right now, but I feel like maybe I need to do a Follow Friday. I'm putting it on my list.
01:07:29.830 - 01:07:30.064, Speaker A: Right?
01:07:30.102 - 01:07:33.524, Speaker B: Wasn't that a thing back in the day? You would do Follow Friday and you tag a bunch of people?
01:07:33.562 - 01:07:40.730, Speaker A: Yeah, there's still some people do that. You can make a list yourself of, like, Ethereum devs for new people to follow.
01:07:41.900 - 01:07:44.376, Speaker B: Ethereum devs for new people to follow.
01:07:44.558 - 01:07:48.250, Speaker A: And you can make a list and share it in your Scaffold channel.
01:07:49.020 - 01:07:53.710, Speaker B: I love that. I feel like that's going to be a thing.
01:07:54.720 - 01:07:55.596, Speaker A: Starter pack.
01:07:55.698 - 01:08:02.380, Speaker B: A starter pack. Yeah. That's great. The crypto twitter starter pack. I like that a lot. Let's see.
01:08:02.450 - 01:08:06.140, Speaker A: One question is what's the benefit of Hard Hat over Truffle?
01:08:06.300 - 01:08:53.100, Speaker B: That's a great like, Truffle got the job done, right? Like, so many great apps have been built or great contracts used Truffle. So I don't want to riff on Truffle or say anything. I would just say that there were issues that I had with Truffle that just like, mentally, it was hard to understand. Why is there a migration contract? There's nothing to do with migrations at first, but you have to learn why there's a migration contract. There's just a lot of junk that you learn that you don't need to learn or the mental model isn't quite right. And I think my intuition is that Truffle was built to get the job done and Hard Hat was built with a developer in. And they're both great.
01:08:53.100 - 01:09:37.548, Speaker B: They're both on ethereum.org. You can use both of them. I think a key difference is you'll get console logs and you'll get some more stack traces and stuff like that, so you get a little bit more introspection into what's going on. But on top of that, I think there's a growing developer community around Hard Hat, and there's more community and there's more plugins, but use both. Going back to I feel like a star over everything is use what gets you to the finish line, right? Like, whatever tool you need that gets you done, go for that. But I would recommend using Hard Hat just by using both of them. One of them being kind of aggravating and frustrating and the other one being slightly less frustrating, and I can get work done.
01:09:37.548 - 01:09:39.900, Speaker B: I would just lean toward hard hat.
01:09:42.880 - 01:09:48.080, Speaker A: The next one I see is would it be hard to replace the react and scaffold with angular?
01:09:48.740 - 01:10:22.436, Speaker B: That's a good one. I would love to see that. Like, angular is about fifth on my list, but I would love to see other front ends, like Svelte and Vue, right? Like some popular front ends. Maybe angular is the second most popular. I don't know. But it's not going to be super hard in terms of you compile and deploy the hard hat and then it injects into the react. So whatever front end you want, you would just set up that publish script to make sure it injects correctly.
01:10:22.436 - 01:11:05.290, Speaker B: But there's a ton of components that we built right? Like, that contract component is probably some real custom react stuff. So there's going to be some nice things that I have that you won't have if you go with a new front end. But if you've got a couple of weeks and you want to work on that, hit me in the DMs and I will turn on a stream from the Build Guild to you of ETH to build a View version, to build Angular version, to build a Svelte version. So I'm always for people to contribute to the repo, and sometimes contributing to the repo just means building something awesome with it and creating one of those tutorial how tos. So if you are building something awesome with it, also slide into the DMs and let's figure something out there, too.
01:11:05.980 - 01:11:19.340, Speaker A: Maximilian, did I get that right? Okay, cool. There's a question about scaffold. ETH has a direct connect with XD chain. Is there a matic configuration?
01:11:19.680 - 01:11:49.800, Speaker B: Oh, there totally is. I'm surprised that let's it's not okay. I had a Matic one, so I was giving Igor some shit because I couldn't deploy two contracts. So I was on Dappa University the other day and we did kind of okay, I'm going to deploy a Token. I'm going to deploy a vendor. Just showing that stuff off. And the vendor wouldn't deploy because Dark Forest was happening and all of Xdai was just so it was the third most active chain in the world.
01:11:49.800 - 01:12:15.836, Speaker B: Right. Igor had to set up probably some web, two defenses to try to combat all the noise on the network. And so I couldn't deploy, like, two contracts in a row, so I sent him some shit like, I'm deploying a Maddox right now. And it's fine because they're like kind of competitors. I think there are two side chains of choice. They're the same to me. Basically.
01:12:15.836 - 01:12:34.340, Speaker B: I point the satellite at XDI and it works and it's fast and it's cheap. I point the satellite at Matic and it's fast and it's cheap. I think that there isn't an endpoint, but I'm putting that on my list. By the end of today, there will be a Matic option in Scaffold ETH.
01:12:37.560 - 01:12:50.570, Speaker A: Are there any more questions? Thanks, everybody, for sticking around. This was no, that's fine. I think we wrapped within a reasonable amount of time.
01:12:52.480 - 01:12:52.844, Speaker B: Yeah.
01:12:52.882 - 01:12:56.300, Speaker A: So we're going to wrap here. We're going to let Austin go eat his sushi.
01:12:57.520 - 01:13:01.128, Speaker B: It's from a grocery store, too. Grocery store sushi.
01:13:01.304 - 01:13:06.590, Speaker A: Hey, man. No shade. I've done that. Everybody has.
01:13:07.700 - 01:13:08.064, Speaker B: Yeah.
01:13:08.102 - 01:13:21.744, Speaker A: So thanks again, Austin, for that. If you haven't joined the Telegram channel, do that. I'll link it in the discord as well. For anybody who misses the link or wants other people to join. What's?
01:13:21.792 - 01:13:23.648, Speaker B: That huge. Thanks to Adam.
01:13:23.744 - 01:13:42.264, Speaker A: Oh, yeah, Adam jumping in unprompted and filling in some of the stuff. It's going to be perfect for people who are trying to integrate with Ave, and hopefully it'll help them get a little bit more out the door over these next few weeks. So. Thank you, Adam.
01:13:42.312 - 01:14:03.644, Speaker B: What's the ave branch called? Sorry, let me go find I feel like is it called let me I'm just going to paste that into the chat right now since it's such a hot topic. Here comes the lender branch in the chat. Bam. Sorry for the interruption, Trent.
01:14:03.772 - 01:14:08.656, Speaker A: No, I'm going to go through the chat really quick and pull all this stuff out.
01:14:08.838 - 01:14:09.280, Speaker B: Okay.
01:14:09.350 - 01:14:29.652, Speaker A: Yeah, I think that's it. Maybe I'll go over the logistics again. So later today we have one more tutorial or one more workshop with chainlink. So if you're interested in pursuing some of their bounties or integrating Oracles into your project, definitely check that out with Patrick Collins. And then, like I said, there's workshops this entire week. A couple more. Tomorrow.
01:14:29.652 - 01:14:48.708, Speaker A: Wednesday. And I believe Thursday and then Friday. We haven't chosen the time yet, but that's going to be the idea validation session. So that's going to be me and the Ave team. You're going to have a few minutes to pitch what you're working on and we'll be like, awesome, that sounds good. Or, we think you should trim your scope a little. Here are some ideas.
01:14:48.708 - 01:15:17.608, Speaker A: Here's something to look at. It'll be a pretty high level thing, but we want to hear what you've come up with over this past week and give you feedback on it. So that will be Friday. Hopefully we'll have two sessions for people in different time zones, but at a minimum, there will be one on Friday for idea validation. So I think that's it. The last thing is check ins should be fixed. Now, we had a few little quirks on your dashboard, but you should be able to check in with your team.
01:15:17.608 - 01:15:33.560, Speaker A: So just head to your dashboard. There's a couple questions. It shouldn't take more than five minutes and then put that response into your cohort channel in the discord. Okay, I'm done. Thank you, Austin. Thank you, Adam. Thank you everybody, for sticking around so long.
01:15:33.560 - 01:15:34.830, Speaker A: And and we're going to wrap here.
