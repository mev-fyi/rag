00:00:18.620 - 00:00:18.880, Speaker A: Great.
00:00:18.950 - 00:00:31.040, Speaker B: And we are live. So we have John here from Uma who's going to give a workshop lesson on how to get started with DeFi's easiest Oracle. John, I'll let you take the spotlight.
00:00:32.500 - 00:01:12.438, Speaker A: All right. Hey, everybody, I'm John. I'm a smart contract engineer at Uma. We built web3's optimistic Oracle which can pull any kind of data on chain that you need your products or protocols. It's super flexible. And I'll just kind of walk through what an optimistic Oracle is, show an example of how to use it to solve for a particular real world question, and then show a little bit of code from a contract that could be a good base for hackathon projects. All right.
00:01:12.438 - 00:01:45.518, Speaker A: Welcome to Hack Money. Transitions. Okay, so the goal of the workshop, I want to explain what an optimistic Oracle is. I want to show how it works. Just do a walkthrough of a demo and then explain a little bit of what teams are actually using it for because it's been live in production for a couple of years. And we've got a bunch of interesting protocols that are using us, plus one off products for treasury management and that kind of thing. So basically, if you're not familiar, oracles are a really important part of a smart contract system.
00:01:45.518 - 00:02:23.798, Speaker A: They allow you to communicate between the external world and on chain environments. And the external world might include other blockchains too. So it's not just about these real world events that you would think about. It could also include off chain calculation. It could be bringing together a lot of information from multiple chains. And we'll get into a little bit of the flexibility when we talk about some of the projects that are using us, but they're really critical. Basically the problem with smart contracts, well, one of them is they don't know anything outside of their own context where that context is state that's stored on chain that they can access through various call functions.
00:02:23.798 - 00:02:55.030, Speaker A: And that doesn't include most of the information that you would want in order to resolve economic agreements or run an application. And it's actually best practice to not store too much data on chain. It's really expensive. You really only want to store what you need for an atomic transaction. Like all the state is right there for you to use in a particular transaction. Everything else. If you can have an Oracle system that is economically secure, it's better to offload that to some kind of off chain source.
00:02:55.030 - 00:03:47.350, Speaker A: So a type of Oracle you might be familiar with are price feed Oracles. This is your chainlink style Oracle, and it's kind of the powerhouse of DeFi. A lot of DeFi is built on top of price feeds that are coming in as like a push based system where it's like, here's the price of ETH, or here is some information about the world continuously updated on that kind of system. It's not as great for scalability though the way that it works is you try to verify it in advance. You have a bunch of nodes or some other mechanism that are reaching an agreement on what the actual state of the world is. And then after you've verified that, that's pushed on chain, and that answer is more or less final. So it's not as flexible as you might want for a new type of protocol.
00:03:47.350 - 00:04:39.558, Speaker A: And you also don't get the shared security either that your security is based on how many nodes there are, or how strong the consensus mechanism is before the price gets pushed on chain. There's no recourse to it, but I don't want to downplay it too much. Obviously I'm biased working on optimistic Oracles, but a lot of DeFi has been made possible by a price feed style Oracle. So optimistic Oracles have their own trade offs they enforce correctness after a dispute, so it can bring any kind of verifiable state of the world on chain. You don't even need a particular API endpoint. It assumes that a proposal is correct unless it's disputed. And if you're familiar with how optimistic rollups work, you'll see that it's basically the same mechanism where with an optimistic roll up you're proposing like here's a bundle of all the transactions that happened on this roll up.
00:04:39.558 - 00:05:30.694, Speaker A: If that is incorrect, somebody else can dispute it and you can go to a fraud proof system. This is very similar to that, except it can be any piece of data that you might need for a smart contract. There's a clear price tag to manipulation too, where if you have a lot of contracts that are using the optimistic Oracle as a security layer, the cost to corrupt the Oracle, the cost to rig a vote should always be kept higher than the potential profit to make a bribery attack non economic. That you don't have to rely on altruism from any of the voters in the dispute resolution system. And it allows for recourse too. So if the data is wrong, you have a chance to correct that. But a big thing is though, as you can imagine, the delay is something you have to work around and we'll get into that with some of the protocols that we've built and other people have built.
00:05:30.694 - 00:06:21.282, Speaker A: On top of that, it is possible to have more or less instant settlement based on some price, but we'll get into that later. Normally there's a delay of like 2 hours or so and it just depends on who is actually waiting those 2 hours. A bit vague, but I'll explain later. This is kind of the process flow, I link to the slides in the chat. I won't walk through this entire thing right now, but I think maybe looking right here is useful. So what happens if there is a dispute is that it gets escalated to what we call the Data verification mechanism or DVM, and with that it's a vote of all of the Uma token holders. So when somebody makes a proposal, they're posting a bond behind their data that they're going to lose if they're disputed and ruled to be incorrect.
00:06:21.282 - 00:06:56.450, Speaker A: Same thing for a disputer. They're incentivized to dispute incorrect data because they'll get a cut of that proposer's bond. But they also have to post a bond to prevent arbitrary disputes when it escalates. Every Uma token holder can go and make a secret commitment on chain of what they think the actual answer was. And the reason it's kept secret is, well, one, to make bribery attacks harder. Nobody can prove how anybody else voted and people could make claims about how they voted that are incorrect. So the bribery type systems that you see around rewards systems would not work for this.
00:06:56.450 - 00:07:27.846, Speaker A: You couldn't demonstrate that you're voting a certain way in order to collect a bribe, at least not in advance. It also prevents lazy voting where you can't just see like, oh, here's what the majority is voting right now. I'm just going to vote that way. You do have to think about it and you have to follow the methodology to find what the actual correct answer is. And then after all that's done, there is a 24 hours reveal period. Everybody reveals your votes and you figure out what the actual answer was based on the majority response. And the voters that voted with the majority get newly minted Uma tokens.
00:07:27.846 - 00:08:04.038, Speaker A: So you are incentivized to participate in the system. And we have pretty high participation compared to a lot of Dow governance systems where there isn't any direct incentive. With Uma, you always have an incentive to vote. You always have an incentive to vote correctly and you're disincentivized to vote incorrectly even if you are with the majority. It's going to tank the price of Uma because the Oracle is not working anymore. And since your voting rewards are based on how many Uma you have, you have a lot at stake. You want your value of your Uma to remain high and not have the oracle break and then Uma goes to zero.
00:08:04.038 - 00:08:43.294, Speaker A: So that's kind of where the cost of corruption, profit from corruption calculation comes in. Okay, so that's a lot of high level stuff. I want to give just a simple demo of how this works in practice by walking through a flow of just like a basic factual question and then showing what the proposal process looks like. Going to pull up my terminal here. So we're going to deploy on Covan. I ran through this earlier today, so hopefully it is still working. So what I'm doing right now is I'm deploying a contract called a long short pair contract.
00:08:43.294 - 00:09:13.280, Speaker A: And this is a contract that uses the Oracle to settle essentially a bet. There's a long side and a short side on some question. The holders of the long tokens will get paid out 100% of the locked collateral if the answer is yes. The holders of the short token will get 100% of the locked collateral if the answer is no. And these parameters are kind of set in here. If you're interested in the code, you can dive into it later. All of this is in our protocol monorepo, so you can take a look.
00:09:13.280 - 00:09:57.740, Speaker A: So you can see here the question is going to be, will the Uma hack money demo be presented on Cinco de Mayo? So this isn't something that is like a price feed. There's no API for this. It's just a factual question about the world that a neutral third party with access to a computer and the internet would be able to verify what the answer to this is. And it is Cinco de Mayo. So you can kind of predict in advance how the rest of the demo is going to play out. So I'm going to mint the long tokens and the short tokens and send those to various recipients on Covan. Just waiting a moment.
00:09:57.740 - 00:10:54.830, Speaker A: Okay, that's minted. And now I'm going to submit a request and we'll walk through a bit of code later to show what this looks like in a smart contract. But this is making the request now, saying like this answer is knowable at this point in time, we're calling to expire this contract and get an answer and settle everything. And so then we can go over to this optimistic Oracle interface, which we set up to answer a lot of these types of questions, connect them to a wallet and you can see that there are a bunch of proposals and settled responses. This is a yes or no query. So this is an example of an Identifier that you can use within Uma. This is if you want to just ask a yes or no question that's just written in natural human readable language.
00:10:54.830 - 00:11:29.274, Speaker A: So when you go in here, you can see some more details here about how to answer the question. So if you're a proposer, anybody can be a proposer. You just have to back it with a bond. So anybody can see these requests come in and anybody can answer them. And in practice, that's what happens and it's fairly competitive. A lot of questions will also have a proposer reward attached to it so that the proposer has a reason to take the risk and post the bond and give an answer. So here you can see a more detailed question and you can see various answer values, which are customizable depending on your use case.
00:11:29.274 - 00:12:08.040, Speaker A: But basically the idea is you would answer one or P two if the answer is yes. That Uma hack Money is this demo is taking place on Cinco de Mayo. So I'm looking at the calendar and it is Cinco de Mayo. So I'm going to answer one and submit that. All right, so that is going through and we should see an update pretty soon once this transaction goes through that is going to basically start a dispute countdown. There's going to be in this case because it's demo. Oh there we go.
00:12:08.040 - 00:12:44.270, Speaker A: Okay so it did the update and then I refreshed unnecessarily. There's basically 45 seconds left. I did link to the covan interface here so if anybody wants to go in there you could actually go and enter a dispute. There would be very little consequences except that the demo would probably not settle correctly. Which would also be interesting though I wouldn't be too mad about it because at least you're trying out the system. But basically there's like 22 seconds left. This would normally be about 2 hours.
00:12:44.270 - 00:13:11.594, Speaker A: If you have a lot of value that's at stake you might set a longer challenge window to make sure that there's plenty of time for people to get eyes on it and dispute any information that's incorrect. But 2 hours is sort of like a default for most use cases. This is 60 seconds just because it's a demo. So three, two, one. Okay. It should no longer be possible to submit a dispute for this. So the interface has picked that up.
00:13:11.594 - 00:13:52.870, Speaker A: Now it should be doing some updates here basically saying that this is now possible to settle. So I'll go in, do that final step to settle it and this will pay out the values to the long and the short tokens. So the holders of the long tokens in this particular case are going to get 100% of the locked collateral from this contract calling the settle method and it's settled. So that's the basic idea. Oh and this is updated now. So this is all done. If you go back to the home page here, this should update to settled.
00:13:52.870 - 00:14:19.166, Speaker A: Yeah. So this is settled now. All right so the demo all worked. Sweet. Okay so just to reiterate, we asked a yes or no question, we answered the question and any proposer could do this. You could have gone in and done this if you had some covan ETH and anybody else can dispute you. You wait for a resolution and then we accepted the information as correct.
00:14:19.166 - 00:15:03.934, Speaker A: If the Sid get disputed it would go to the data verification mechanism and that's like the whole 48 hours period of the whole on chain voting process. By design that is really rare. The economic incentives for the proposers and disputers disincentivizes incorrect answers and incentivizes correct answers. So disputes are very rare and that's by design. So what you need to know, if you want to ask a question to Uma's Oracle, you have to write Uma improvement proposal or UMIP that describes the methodology for arriving at the answer. So we have methodologies for a lot of different things, various token prices, yes or no, queries, custom KPI option outcomes. There's a lot of cool things.
00:15:03.934 - 00:15:43.178, Speaker A: You can find this all on our website. The liveness period is customizable, it can be longer or shorter depending on your use case and resolution is all decentralized, anybody can propose, anybody can dispute and every dispute shares the same level of economic security. It escalates to a vote of all the token holders. Even if it's just a matter of $100 or something, it doesn't matter. You'll have the full weight of the multi hundred million dollar market cap staring down at your question and trying to resolve the answer correctly. So these are not hypothetical things, these are things that people have built on. Uma, so there are prediction markets, there's insurance.
00:15:43.178 - 00:16:59.022, Speaker A: Optimistic governance is something I've been working on. So being able to manage a gnosis safe optimistically rather than with a multi SIG so you have more trust minimization there rewards as a service KPI options and synthetic assets which are kind of a classic use case for an Oracle. So these are some examples of questions you could ask. So Polymarket is these kind of yes or no questions that we were looking know did something happen in the real world? Sherlock is an insurance protocol and the question is basically was this protocol hacked with a little bit more complexity, they've got their own Identifier there. Across is a cross chain Bridging protocol and for that the question is basically did I do this relay correctly? It's a permissionless system where anybody can be a relayer who advances you the money on the destination chain when you made a deposit on the sending chain and then they get reimbursed after the dispute period. And so when I was talking earlier about that waiting period and who's going to actually wait, it would be a bad user experience if you're trying to bridge from one chain to another and you have to wait 2 hours. This system means that the relayer pays you immediately, sometimes within the same block within like a few seconds and then the relayer is just waiting a couple of hours for reimbursement.
00:16:59.022 - 00:17:52.702, Speaker A: So the user experience is that it's basically instant but you have the full economic security of the Oracle. And then a couple of other examples. Success tokens shapeshift did some fundraising with venture capital firms where instead of just selling them tokens at a discount, they sold them a token with an embedded call option that is only valuable if Fox's token price goes up. And so that's implicitly a discount, but it's more incentive aligned because it's not like the venture capitalist got 50% off the current market price of Fox. Their upside only comes if Fox's price goes up past a certain level and stays there at the expiration time. And then with Boba network which is an optimistic roll up, this is a custom KPI option, they want to incentivize people to use their network in certain ways. You saw like the optimism AirDrop plan of having multiple airdrops, it's kind of a similar thing with Boba but with adjustable KPIs.
00:17:52.702 - 00:18:21.680, Speaker A: So each epoch they're maybe focusing on different thing and calibrating to try to encourage something. And so the payout for the tokens that are being airdropped to people is based on TVL in this case. So higher TVL means higher payout. Everybody's incentivized to increase TVL on Boba network. All right, so our team is growing. Everybody's hiring as you. We're really actively hiring, especially for front end engineers, right.
00:18:21.680 - 00:18:59.514, Speaker A: Recently, we're about to double the size of our smart contract engineering team. The range of things that you can build on our Oracle is immense. And so it's really just a resource constraint kind of thing. We can only build so many things in house. We would love other teams to collaborate with. So even if you're not joining our team, we would love for you to build on our Oracle, and we'd love to support you as much as we can as you build out your own protocol. And there's some links in the slides that I sent in the chat, and if you aren't personally looking for work or interested in working on this, but you know somebody that might be, please send them our way.
00:18:59.514 - 00:19:31.650, Speaker A: We do have a really good referral program too, so you'll get payouts if they make it to past such and such interview stage, or if they join the company, if they stay at the company for a certain length of time. And these are all through KPI options too, so it's using our own technology for it. So please refer people if you think that they would be good. And that is about it. You can follow me on Twitter. I'm stepping in for Chandler, so I left him in as a contact on Telegram. Just his voice is a little bit shot today, and I am open for questions.
00:19:31.650 - 00:20:00.190, Speaker A: Let me see what people are posting on here. Link to the dashboard. Yeah. So that link is there for the Covan version of the dashboard. So if you go in and create your own contracts, you can kind of follow these demo scripts. The scripts are also public, so you can test out, deploying something on Covan or for your own hackathon project. If you want to use Covan as like a testnet for that, you can use this interface.
00:20:00.190 - 00:20:37.734, Speaker A: If there are no proposers, the question just kind of hangs there until somebody proposes. So you can also propose yourself, and that's kind of a common flow too. So with a cross, for instance, you're doing one step as a relayer. You want to request an answer to the question of, did I relay this correctly? And you're also proposing the answer at the same time because you just want to get paid back. And that's literally like one function call for that. So that's a common flow. How is, uma, different to Teller? So I'm not super familiar with Teller.
00:20:37.734 - 00:21:06.260, Speaker A: My understanding of oh, if you scroll up, Javier. So the Covan optimistic Oracle UI is the link to the interface. I do think that Teller is price feed style oracle. So I think that the difference there is really like the mechanism. I could be wrong about that. Maybe Teller is an optimistic Oracle, but I think it's a price feed style Oracle. Feel free to correct me.
00:21:06.260 - 00:21:08.020, Speaker A: Thanks.
00:21:10.310 - 00:21:10.722, Speaker B: Cool.
00:21:10.776 - 00:21:33.180, Speaker A: It looks like we've got a few more minutes too. If anybody wants to ask questions live as well, I'm happy to answer or dig into something. Oh, you know what, actually I forgot to show you the code, so let me go to that. I'll walk through some example code. There's like a fairly simple I will have a question.
00:21:34.990 - 00:21:58.370, Speaker C: Can you show us the callbacks where the contract received the information that the proposal has been either disputed and at the end of the day approved or rejected? How does this happen? Because I know that we can propose. We asked an Oracle and how is the communication between the Oracle and the contract with Callbacks? I assume?
00:21:58.790 - 00:22:35.294, Speaker A: Yeah, the interaction between the contract and the Oracle. So I think that this we can dive into the actual contract addresses and I can add those links. But I think walking through the code of an example contract here might be useful and just kind of show the flow. So this is a really simple contract. The purpose of it is just to do a demo where you're getting the ETH USD price. So you put some ETH into this deposit box and then later you're going to say, give me x dollar amount of ETH. Obviously the smart contract doesn't know what the current price of ETH is.
00:22:35.294 - 00:23:18.646, Speaker A: And so that's where the Oracle comes in and says, here's what the current conversion rate is. So if you're withdrawing $1,000, here's how much ETH you would actually withdraw. This is in our protocol repo under packages core contracts. And let me add this to the chat as well, in case I didn't yeah, this is a good one to use as like a base template because a lot of use cases are basically modifications of the same deposit box idea. You put some money in a box and then based on certain circumstances, you withdraw money from the box or send the money to some other address. So the flow is basically this. There's a bunch of stuff here for just handling withdrawal requests.
00:23:18.646 - 00:24:04.860, Speaker A: You don't have to think too much about it. It'll just be useful. When you dive into the code yourself, tracking different deposit boxes for different users, the price Identifier is going to be ETH USD in this case, rather than yes or no query here, we're getting the conversion rate of ETH to USD. So the actual functions so when you make a deposit, there's no interaction with the Oracle yet. You're just putting money in there and it's updating the state within the contract. But when you start a withdrawal request, this is going to start interacting with the Oracle. So you want to withdraw a certain dollar amount of ETH you're going to request a withdrawal and this is going to request an Oracle price.
00:24:04.860 - 00:24:44.598, Speaker A: So this is an internal function that'll do that. There it is. So yeah, it's basically going to get the Oracle contract address and it's going to call Request Price. And then that's going to be open for proposals after you've requested the price, which is the ETH USD exchange rate at the time of the withdrawal request. So then following that, anybody else can propose. And that's just within the Oracle system itself. So you would go to the same Oracle contract either through our interface or you could go directly through Ether Scan or you could have a bot that's automatically responding to these things.
00:24:44.598 - 00:25:29.030, Speaker A: Since this one's a token price one, it's probably just a bot is going to be the fastest one to do. Yeah. So that price request is made. Anybody can propose, assuming that it goes through the whole process and it's settable now, which means that either it wasn't disputed within the challenge window or it was disputed and you got an answer from the DVM. Now you can execute this withdrawal and that's going to get the Oracle price. And so very similar, you're going to call a function on the Oracle down here. So first it's going to check like, is there a price? Was this resolved otherwise? Error out? And then it's going to call settle and get price, which is going to give you the actual price.
00:25:29.030 - 00:26:03.150, Speaker A: It's going to just check to make sure that it's a positive number. There's no negative value for ETH, doesn't really make sense. And then it returns it. And that Oracle price is now going to be used within this contract to send the correct amount of ETH to the user. So taking a look here, you're getting the exchange rate and then you use that exchange rate, do some math on it and give them the correct amount of ETH. And I won't walk through all of the math or whatever, but you can take a look at it and see reasoning about it, how it works. There's some comments to explain it, but that's the basic flow.
00:26:03.150 - 00:26:48.312, Speaker A: You're going to request some information from the Oracle, you get a response, which is some value, and then you use that value inside your contract to do some other stuff. Does that make sense? Cool. Well, I guess if there aren't any other questions, we can wrap it up. I think I shared all of the links in the chat. Let me see, when is it disputed? I see, okay. Could I pull data well, there's a couple of questions. Could I pull data from an API to get the going rate for an item on a resell market? Yes, but you don't have to do it directly through.
00:26:48.312 - 00:27:34.032, Speaker A: Like it's good to have an API that is accessible to anybody to use. So any proposer, any disputer, any voter could access that API and see what the going rate was at a time of request. So you could absolutely do that. In some cases, though, you don't need an API. Like the question about, is it Cinco de Mayo when this demo happened? There is no API for know it doesn't exist, but you can verify it just by thinking about it and doing some research and seeing when this was posted on YouTube or whatever. But yeah, absolutely, you could use an API. And what do the fees look like for using Uma? So the fee model is basically maintaining that cost of corruption profit from corruption comparison.
00:27:34.032 - 00:28:35.268, Speaker A: So if you are a big protocol that is using Uma and contributing a lot to the potential profit from corruption by providing value that could be stolen if you corrupted the Oracle, the model we're kind of leaning into right now is that you do a token swap with the Uma Dao. So you have Uma tokens now with your protocol or with your project, and you're using those to vote. So you're participating in the voting system and the tokens that were received in the Uma Dao can be used to buy back Uma from the market and basically drive up the price of Uma to increase the cost of corruption if the numbers are getting too close together. And right now, I think the total value secured by Uma is around $130,000,000 and the market cap is something like $500 million. So we're in a fairly safe place right now. But that's kind of the general fee model and it's kind of a friendly fee model too, because you're not getting nothing from it if you're doing this token swap. And it really only applies to people that are contributing a lot to total value secured.
00:28:35.268 - 00:29:21.972, Speaker A: So if you only have a contract that's going to have like a million dollars or $2 million secured, it's not significant enough that we would ask you to pay fees. If you're bringing in $100 million and we're close to the threshold, then we'd need to talk about like a token swap. And it's in everybody's interest because it keeps the Oracle secure. It's also a nice revenue stream for whoever's holding those Uma tokens in their protocol or their project because they get the voting rewards now and they're highly incentivized to vote correctly because they rely on the Oracle's correctness for their own system. So their actual cost of corruption is much higher than just the value of their Uma tokens. Their cost of corruption is the value of their Uma tokens plus all of the value of their oh. So javier so when it's disputed, that's just going directly to the Oracle contract.
00:29:21.972 - 00:30:02.512, Speaker A: So anybody can dispute anything. You don't have to go through, for instance, this optimistic deposit box contract to dispute. You just go to the Oracle and you can dispute anything that you see is wrong. And in a lot of cases, you'll be doing it through this interface a lot. Of people are watching this interface for mainnet to manually dispute stuff and check, and then sometimes there's the contract. Now it is disputed. Well, this one wasn't disputed, though I guess we're running out of time, but oh, how it knows it's disputed so it won't settle on a price unless a dispute is resolved.
00:30:02.512 - 00:30:38.850, Speaker A: So when you're going in and you call this like, get Oracle price here and you're getting the price from the Oracle, you won't be able to get a price unless it's resolved, which means either it wasn't disputed and the time limit is up, or it was disputed and the dispute process is done now and you have a final price. So that's kind of where that check happens and you'll see it error out here. You'll basically get in this case unresolved Oracle price on this check call has price, and if you do this and there isn't a price, then this will also just error out too.
00:30:43.620 - 00:30:55.030, Speaker B: Thanks John for the presentation and thanks everyone for joining. If you have any more questions, feel free to follow up over discord. And yeah, enjoy your day. Thanks.
