00:00:02.250 - 00:00:25.030, Speaker A: All right, we are good to go. Hello, everyone. Thank you for coming to our first workshop of Road to Web Three. Super excited to have you all here and we're super excited to have Ivan on tech here from Morales, who's going to do a workshop on building full stack polygon DApps. So with that being said, questions go into the zoom chat and Ivan will answer them all at the end. And Ivan. Feel free.
00:00:25.030 - 00:00:26.038, Speaker A: I take the mic.
00:00:26.204 - 00:00:49.110, Speaker B: Perfect. Thanks a lot. Thanks a lot, guys. So, yeah, in this video, in this workshop, we're going to discuss how to build full stack, because full stack means a lot in crypto and it's actually not that easy to do if you just use the bare bone tools like Web Three JS or Ethers JS. Why? Because they don't create a connection to your back end. And often when you create DApps, in most cases, you need the back end. Why? You need to initiate a user session.
00:00:49.110 - 00:01:27.766, Speaker B: You need to put a cookie on your user's computer so you can have a normal user session, so you can save data about the user, so that if they enter something on your website you want to save off chain in your database, you can do that. And of course, you can sync smart contracts, you can sync user events and so forth. For all of that, there needs to be a back end component. And this is the hard part about creating DApps. When we've interviewed DAP creators and we looked at the biggest projects, 90% of development time goes into building the back end for your DAP. And in this video, we're going to talk about how you can make this process quick and how we can make it as quick as possible. So you should see my screen, by the way.
00:01:27.766 - 00:01:45.274, Speaker B: Let me know if you don't see my screen. You should see my screen. This is what this talk is about. And we're going to focus on polygon. But also I'll mention how to do this cross chain because at the end of the day, we have a goal. Want to build great DApps and want to build them quickly. Because when you are in a situation like this, in a hackathon, of course speed is of the essence.
00:01:45.274 - 00:02:06.814, Speaker B: You got to be quick. If you're not quick, you're not going to build great things. And you want to build on polygon. But as your DAP scales, you will have a lot of demand from other chains. And if you look at the big projects today, they're almost always cross chain. You have some kind of components on other chains. So you want to have an option to go cross chain.
00:02:06.814 - 00:02:49.330, Speaker B: And that's also what we're going to talk about, how you can go cross chain seamlessly and how you can go cross platform seamlessly. Meaning that, let's say you have your DAP. How do you build a website? How do you build a mobile app. How do you build a game? Let's say you have a gaming use case where your users have assets. How do you easily get your NFTs, your users into a game engine like Unity? So in this talk I really mean we're going to speak about full stack and full stack means that you are on any front end, basically any whether it's mobile, web game, you're on any blockchain, whether it is polygon or anything else. And you also have this back end component handled for you. So with this kind of tools, with this kind of agenda, the goal is that we will reach our success.
00:02:49.330 - 00:03:27.226, Speaker B: Which is of course that you get a lot of users, you get them quickly and you reach your ambition and that's what we're here for. Now you have a lot of ideas, maybe you have some idea about NFT marketplace, maybe some kind of web3 game, maybe something else. No matter what kind of idea you have, you will need exactly the same things to get started. You will have to log in the user because that's what everyone needs. If you cannot log in a user, you cannot have an app. You will have to fetch the balances of the user, how many matic tokens they have, what NFTs they have and so on and so forth. If you want to extend your DAP cross chain, you also need to do it for other chains, for solana.
00:03:27.226 - 00:04:00.854, Speaker B: How do you build a DAP which works on polygon, on Ethereum, but also on Solana which is non EVM? We're going to discuss that. Then you need to fetch transactions, meaning that when users do something in real time, do you get an alert? Do you get push SMS webhook? How do you do that? It's very important. And of course there you need back, you need the back end solution for that. That's where we start really speaking about this big, big part which is your back end that you need to have. You need to have real time alerts like we discussed and you need to build indexes. So index is very important. It is basically taking on chain data and making sense of it.
00:04:00.854 - 00:04:42.166, Speaker B: So the simplest example of an index I can give you is let's say you have a game where people can trade their NFTs back and forth. How do you get the total volume of all your user transactions? You cannot ask the blockchain for the total volume. The blockchain does not know the blockchain, just knows the transactions. And so based on the onchain transactions now you can calculate them together and you can get volume metric. So this is an example of where we take on chain data and then we do some calculations and we have a new metric, a new high level, more abstract metric. And of course when you have an indexer like this, each and every block, you need to update it because you have new onchain data coming in, we're going to discuss that. And you need to send transactions as well.
00:04:42.166 - 00:05:16.354, Speaker B: Initiate transactions, initiate transfers, initiate smart contract interactions. So no matter which blockchain you are on or which use case you have in mind, you need these things. This is cross use case, standard stuff. And the problem that many people make is that mistake many people make is that they are reinventing the wheel. Everyone is creating these solutions to do these simple things over and over again, over and over again. Although everyone needs exactly the same thing. The problem that arises very quickly is that if you connect directly to an RPC node, which is in many developers mind is the standard way of starting.
00:05:16.354 - 00:05:43.338, Speaker B: You have a new project, you connect to an RPC node, you quickly start to realize that it's very primitive, low level technology, it's very very bare bones. It cannot tell you anything. Basically it cannot even tell you the balances of your users. You cannot ask an RPC node to give you the tokens that your users have. It doesn't know. You need to loop through a bunch of smart contracts, ask each smart contract and then maybe you can figure out. So number one, it doesn't have a lot of data, it's unstructured data.
00:05:43.338 - 00:06:07.646, Speaker B: So you always need to do work on the data that RPC node gives you. This is by default it's a horrible database. What do you mean by that? Well, the blockchain is unstructured. If I want to sort, let's say I have an NFT marketplace or NFT game, I want to do some sorting. Let's say I want to have the biggest users in my game based on volume. I cannot ask that from an RPC node. It cannot do queries, it cannot do aggregation, it cannot calculate some kind of average.
00:06:07.646 - 00:07:00.654, Speaker B: For me, it's up to me to build around the RPC node and build these features. And this requires massive code base. So what does happen when you connect to an RPC node directly? Well, what does happen is that you end up with a massive massive code base around the RPC node where you for example, need to log in the user and you need to verify signature in order to establish a user session between your server and your user. You need to have a user session with a cookie. You need to do it yourself if you do it from scratch. You need to figure out how to do real time so that when something happens on chain, something happens in your user database. How do you quickly get an alert into the front end, or send an email, or send a push notification? How do you do this user lifecycle where they sign in and you initiate the pipeline of fetching their events and their tokens and their NFCs? How do you sync transactions, smart contracts.
00:07:00.654 - 00:07:32.586, Speaker B: And you need to not only build this, I mean building this is difficult enough. It's going to take a long time. You're going to make many mistakes. It's going to be very difficult to debug. But it's not only that you need to build, you need to provision. You need to provision infrastructure so that when you get many users that this monster, this Ginormous thing actually scales, and you need to ensure that it can actually be debugged when some issue arises, not only you have to scale to debug, you need to maintain it. There are new versions of different components you need to maintain it.
00:07:32.586 - 00:07:54.670, Speaker B: So all in all, it becomes a mess very quickly. And that's why most web3 developers say that this takes 90 plus percent of their time. Because creating a smart contract, creating the smart contract part of your DAP, it's easy. It's relatively easy. Is it expensive? It's expensive. You need to have a professional, you need to have audits. But once it's done, it's done, it's on the blockchain.
00:07:54.670 - 00:08:27.418, Speaker B: It's not something you have to maintain or something that you have to sit and babysit. But everything off chain, your back end off chain, that's a babysitting job. And you're signing up for years of work, years of scaling and massive backend SIM that will handle it for you. So when you are building around RPC node like this, you have slow iterations, it's difficult to move quickly, it's difficult to test, long time to go to market. And when you have all of this, for example, you iterate slowly difficult to test. You increase your failure rate. So what is the solution? You don't do this, you don't connect straight to RPC node.
00:08:27.418 - 00:09:19.870, Speaker B: Also this hurts your cross chain capabilities because once you build around an RPC node and then you want to go to Solana, you can't, it's impossible. You need to start from scratch and then build another monster like this, but now around another blockchain and around a new type of architecture. So what if there was a prepackaged solution which does all of this for you out of the shelf? And what if you could just use it with a nice SDK that works in JavaScript and TypeScript and C sharp? You can use it in any game engine. What if there was such a solution? And that's of course what we at Morales are building, where you get the backend solution which is the Morales server, and Morales SDK which is the SDK. And it supports many languages. And let me show to you how it works. In one way you can think of it like firebase of crypto in the sense that you don't have to manage the back end.
00:09:19.870 - 00:09:52.390, Speaker B: We will soon have a self hosted version. So you can self host it yourself if you want. But if you don't want to self host, you can use it as Firebase where you just get it up and running. You create a DAP. Then you connect your SDK on the front end and you can just focus on building the front end and that's the magic. You have most of the stack already figured out for you and it is cross chain and it is EVM and non EVM everything out of the box. So in a way you can think of it as firebase of crypto although it's not one to one of course comparison but in a way you can think about it like this.
00:09:52.390 - 00:10:42.714, Speaker B: So building with Morales is super simple. Let's say you want to build a polygon DAP you want to log in your user with any wallet and also on any chain even if they are not on polygon. You just write Morales Webtree Authenticate and as soon as the user clicks login in their MetaMask you have instantly a user profile in your Morales database. You instantly have a user session. Basically how we solve this problem of how to create a web two user session based on web3 wallet login and this is many steps on the back end where you have to verify the signature. You need to put the user into a database, you need to create a session and as you can see also as soon as your user is logged in you get all the assets, all the transactions, everything cross chain in your database. Now the beautiful thing with this is that this database updates in real time.
00:10:42.714 - 00:11:17.634, Speaker B: So when your users do new transactions, this database also gets new transactions in it and when the users are moving assets this database reflects that. So this is very important because you can basically work with a database like you would in Web two, but it is reflecting the on chain status of your users. And that's very powerful because imagine how long time this would take you to build yourself, to set up to connect to the node, to set up infrastructure, to listen for changes, to ensure that you don't have duplicates, to ensure that there are no bags, that it works. Cross chain. EVM. Non EVM. It's years of work, years and years of work.
00:11:17.634 - 00:12:14.870, Speaker B: Now let's say that you want to read the database, you want to get the transactions of your users. Very easy. Morales get transactions bam getting the Ether Matic balance, getnative balance, get ERC 20 tokens, one line of code and this is really our motto can we make as much as possible one line of code and it should be one line of code. We're dealing with simple stuff, relatively simple stuff here to get the transactions, to get the native balance, to get the NFCs. But these simple things in reality are very difficult. And this is where a lot of our motivation for creating Morales came from because when we entered web3 and we looked at big projects like Openc or Ether scan we thought whatever the guys are doing there at Openc or Etherscan, it must be easy because it's not complicated. They're just showing your NFCs and allowing you to trade NFCs in Openc, how difficult can it be? Or Etherscan, how difficult can it be to read from a node? Should be easy.
00:12:14.870 - 00:12:52.446, Speaker B: Turns out they have massive backends, massive teams, massive, massive work to maintain and scale it. Because the blockchain cannot tell you many things without you building this tech stack around it. And so our motivation here is to give the average developer who comes here and wants to build, even if they don't know a lot about web3, or the developers that are in web3. Our goal here is to give the same tools, the same capabilities, the same power, the same technology as Openc has, so that you also have it. And we even teach you how to do it in our videos here. I cloned OpenSea in 2 hours. Or how to do it web through social network.
00:12:52.446 - 00:13:26.062, Speaker B: You can go subscribe to Morales YouTube channel and you will see a lot of these real world tutorials. And this is so important because these things, they should be simple, so we can actually build more complex things on top if we all spend months just fetching the simple data from the blockchain, which we do right now. Most developers, like I told you, spend 9% of their time doing the simple things, doing these simple things. They are not simple, but the result of it is quite simple. But on the back end it's massive. It's massive. And look, you've just written four lines of code to get the balances here and then one line of code to log in, you remember from before.
00:13:26.062 - 00:14:04.754, Speaker B: So basically with five lines of code you've written something that could be a DeFi dashboard where you have all their assets and you have the user login. It's basically like a copy of Zapperfi or Zerium. So it's just five lines of code. So this is true power that you're getting here. Now, you can also do queries, which means that you can have filters, you can have conditional queries, you can have aggregation. So this is very important because you can run any MongoDB query on this Morales database, because Morales database is just a wrapper around MongoDB. So all the data you have, you can run any query, which of course you cannot do if you just have a node node that does not do any query.
00:14:04.754 - 00:14:30.814, Speaker B: You can also listen to on chain events, which means that if you have an on chain event, let's say in your smart contract track, you just enter the API and you can listen for it very quickly. And all of the events will be entered into your database easily and you can watch them in real time. You can create a subscription like this and get real time alerts into your front end or webhook, whatever you want. Very easy. It is unlimited power. Unlimited power also because it's by default cross chain. So let's talk about indexing.
00:14:30.814 - 00:15:09.866, Speaker B: So indexing means that each time something happens on chain that you run some kind of calculation, you run some kind of calculation, you update some values and then you wait for the next thing to happen. Like for example with this volume example I gave you that something happens on chain, you update the volume or something happens on chain and you update something else. So this is very easy to do. You just specify which smart contract you want and then you do subscribe and then in real time bam bam you can index and do it. We have amazing docs. I mean we put so much time into documentation because we know that this is the most important thing for devs to get started. And we ourselves have struggled a lot in web3 with getting started, getting into docs.
00:15:09.866 - 00:15:41.274, Speaker B: So we ensure that our docs are world class. So if you go to docs, Morales IO, you can go through here and read about everything, how to send assets, how to initiate transactions, how to log in users, and finally how to send assets. Very easy morales transfer and you just specify whether it's NFT, whether it's a token, whether it's native balance, very easy to do. So as you can see, we basically covered what all DApps need here. Login users, fetch transactions, initiate transactions, real time alerts soon guys, we're going to go to Q A. But there is more. There is more.
00:15:41.274 - 00:16:21.762, Speaker B: But wait, there is more what is more? Plugins. Sorry, I hear someone, can you please mute I think it's Andrew. Thanks. With plugins, basically this is infinitely extendable, meaning that you can soon also create your own plugin. As you know, a Morales database has the data about the on chain, about the users, which means that you can plug in new technology here. Let's say you want to KYC your clients, maybe you have a financial institution or something, you need KYC in your DAP. With one click you will be able to install a KYC plugin and then all your users will have a new table here, a new column, KYC and then yes, no in each row.
00:16:21.762 - 00:17:08.258, Speaker B: So it's an example of the extensibility that is coming and this also means that when you build on Morales, you know that it's future proof because for all new tech there's going to be a plugin. You want to have Fiat in your application. Very easy morales plugins fiat and you can now accept fiat and sell crypto in your application. You want to have a Dex, it's one inch swap with one inch integration. So all in all guys, it's crosschain by default both EVM and non EVM. And this explains it in a way. And also we have a lot of support for React, for view, for React native, for unity and this is all and more you can learn about if you go to morales IO slash mage, so Morales IO slash mage and join our discord so we can teach you more there.
00:17:08.258 - 00:17:40.286, Speaker B: But morales by default, it is on all of these different platforms. And I can show you, for example, our Unity integration, which we call the Metaverse SDK. So this means that with Morales, if you know simple C sharp and you can program in Unity, you can easily create exos games. And imagine you are in your living room and you just spent literally ten minutes creating a game where you have Wallet Connect QR code. You are in your living room, you're sitting, you're pulling up your phone on your TV. You see wallet, connect. You just scan it with your wallet and now you run around with your NFT in your Xbox game.
00:17:40.286 - 00:18:10.086, Speaker B: I mean, it's mind blowing. Of course, Unity supports web mobile. They support all kinds of platform. So Morales is by default cross platform, meaning that of course it's web, but also react native. We support game engine and so on and so forth. On that note, guys, I have some more slides, but let's cut it a bit short here in terms of presentation and let's instead go into the Q A and we are going to discuss it. I can actually take the questions myself here.
00:18:10.086 - 00:18:30.030, Speaker B: That technically okay. I see one question about centralized decentralized. So look, soon you can self host your Morales instance. That's important. And also we have a very nice video on it where I explain it in depth. Because Morales does not make your app centralized. You know why? Because all the assets are on chain.
00:18:30.030 - 00:18:43.682, Speaker B: Whenever you want, you can build your own backend. At the end of the day, Morales just makes it quicker for you. But you have all the power always to come back to your own. So let me actually open it up. It's a great question. It's a great question. So let me show it to you.
00:18:43.682 - 00:19:06.886, Speaker B: So, first and foremost, all your assets are on chain. So Morales doesn't have any private keys. And always in adapt you have on chain part. For example, all your NFTs smart contract assets. And then you have the off chain part. So here you will have a server, you will have some kind of RPC connection. What I just explained to you in this presentation, you need to have your own back end connection.
00:19:06.886 - 00:19:39.170, Speaker B: You need to build this. So this is by definition off chain. Now the question is, do you want to spend months building this or do you want to have an off the shelf solution that does all of this for you? And also soon you can self host it, which will ensure you can self host it on your own machine. So now you see that, number one, from an onchain perspective, it doesn't make your app centralized. From an option perspective also doesn't make your app centralized. And whenever you want, let's say that your DAP becomes big. I mean, first and foremost, when you're thinking about your app, if it has zero users, you have zero issues with anything.
00:19:39.170 - 00:20:01.786, Speaker B: Let's say that your DAP becomes big. You have many users. I mean, at any point you can go back to recreating if you want. You can always go back to recreating this. But when you are building from the beginning, you got to be fast, you got to try your things. Because what if your idea is bad? Nobody will even use it. And you have spent months building this up and maintaining it and creating a back end team.
00:20:01.786 - 00:20:24.334, Speaker B: You don't want to do that, but also self host. If you want to self host, it will also be possible. So that's a good question. Thanks a lot for that. Let's see also how does Morales answer the scalability question for I mean, that's our bread and butter the scalability question for blockchain. It's also a big problem if you are to do this on your own, to have your own back end. Let me give some examples.
00:20:24.334 - 00:20:48.678, Speaker B: Let's say you want to run this back end for binance chain. Binance chain spits out 2000 transactions each and every 2 seconds. 2000 transactions. You have to index them, you have to put them into a database, you have to make alerts in real time, you need to send out notifications to your user and so on and so forth. And then 2 seconds have passed, you have another 2000 transactions. So imagine the scale of this. The same with Solana.
00:20:48.678 - 00:21:21.746, Speaker B: So of course our bread and butter is to have the infrastructure to serve whatever blockchain we need to serve based on the developer demand. So this is massive, massive. You can go to Morales IO pricing and there you can see the cost if you want to use our hosted solution. And so you can self host yourself as well. Let's see more questions. You don't need to run any full node or anything. Our belief, by the way, is that you don't need to worry about any nodes.
00:21:21.746 - 00:22:04.606, Speaker B: Because when you are building a website, you don't worry about the CPU. Imagine if you built a website and you had to worry about Is CPU Intel, or Is CPU AMD or Arm or something else, or something else, or Apple M One chip. You don't care about that. It would be horrible if you had to care about which exact CPU does the machine have? Instead you have a unified cross CPU, cross hardware, web technologies that allow you to just focus on the end result. But in crypto you build for specific node. You build, for example, for ethereum node, or for polygon node, or for avalanche. And while they are compatible with each other, you have Solana or Elrond, which are not compatible.
00:22:04.606 - 00:22:48.082, Speaker B: And of course it doesn't make sense that we as developers in the future will have to care about these differences because all DApps at the end of the day need very similar things. They need to do this no matter which blockchain, no matter what architecture underneath so that's why, ideally, long term, if this industry is to grow fast, developers should not be even talking to Nodes. The only reason you should be talking to Node is to upload a smart contract maybe, and to maybe call a specific function a smart contract. So that's important. Is there any way to interact with smart so exactly. To interact with smart contracts, you can go and you can get the Web Three instance. So you can get, for example, Ethers and you can speak to it like this.
00:22:48.082 - 00:23:33.162, Speaker B: So Morales does provide access to low level tech like Ethers JS. So you can do it, or you can also have the execute function which will do it for you here. So execute function in Morales will run smart contract function. Right now this is currently only for EVM, and currently, because it's only EVM, it's just a wrapper around Ethers. But of course, as we are integrating more of Solana and we have integrated a lot of Solana already, but the next step would be to fully integrate it. So soon this execute function will also support Solana. For example, that's a big, big important reason why we do some high level wrapping on top of the low level libraries like Easter JS.
00:23:33.162 - 00:23:56.150, Speaker B: Because to be cross chain, we have to create this layer on top. I hope that makes sense. Do you support testnet? Yeah, I would support testnet, yes. How do you handle security part of user data? Well, if you self host, you handle it yourself. And of course we follow all industry standards to secure it. And you can read more in the terms how that works. How will Morales allow communication between EVM and non EVM? So, that's a good question.
00:23:56.150 - 00:24:25.946, Speaker B: When it comes to Morales, we are handling the off chain. So we're pulling the data from EVM, non EVM and so on and so forth. The way it is currently is that you still need to redeploy your smart contract. You need to create a version of your smart contract for non EVM. But once you've done so and your users log in, your smart contracts get indexed, we pull that all into a unified format. So that's how it works. And in the future there will also be bridges for this asset back and forth.
00:24:25.946 - 00:24:52.002, Speaker B: But currently Morales is off chain. It does all of the off chain work. And we do have a roadmap to go also more towards on chain. So you can also easily go between chains and you can transfer assets between chains as well. So that's in our roadmap, it's not currently live. But if we're thinking about the ideal world of Web Three development in 1020 years, of course it should be one line of code to send any asset to any blockchain from any other blockchain. That's how it will be.
00:24:52.002 - 00:25:20.274, Speaker B: We're not there yet technically because even bridges are not that reliable. We did see a lot of hacks recently as. Well, there is one bridge I find a bit more interesting from Celsius that is coming out. I just read about it a few days ago. But we don't really have good bridge technology right now. Yes, we do have bridge solutions, but they need a bit more time for us to integrate them and have a peace of mind. Does Morales have a we do have VDP, which is Vulnerability Disclosure program.
00:25:20.274 - 00:25:36.530, Speaker B: Yes, we do have that. And Bug Bounty is coming soon as well. It's a bit different. Let's see. Any way to mitigate users from greeting the platform to abuse API? Lookups, for example, the user can log in to exhaust. So yeah, exactly. You can set limits.
00:25:36.530 - 00:26:20.630, Speaker B: Let's see where we have that rate limit here. You can easily set it by writing this in your settings. So you can rate limit how many requests anonymous users can do, how many requests authenticated users can do. And also, what's the time window? It's a good question. Which video tutorials do you recommend to do an NFT game in Polygon Blockchain? I think you can watch this NFT Marketplace or just go here web Three programming projects and you will see a lot here. I think we have some if you want to build a Web Three Unity game, we have this whole walkthrough about Unity. And you can watch this exceedme Morales Unity workshop, where we show you how to log in with Wallet Connect and all of that.
00:26:20.630 - 00:26:39.146, Speaker B: But guys, only two minutes left. I'll give it back to the moderators. Thanks for great questions, was fantastic questions and again, fantastic speaking to you all. If you have more questions, go to Morales IO slash Mage. Morales IO slash mage. Like a wizard. And you can join our discord there.
00:26:39.146 - 00:26:41.340, Speaker B: So join our discord and let's continue there.
00:26:42.750 - 00:26:57.390, Speaker A: Awesome. Thank you so much for the super interesting workshop. Ivan just echoing what Ivan said. If you didn't have your question answered or if you have more questions, definitely feel free to reach out to him on the Ethgobal sponsored discord or on the Morales discord.
00:27:00.070 - 00:27:18.354, Speaker B: One final plug. If you know, by the way, if you like Unity, you like Game Engine. We are actually looking for someone who can work with us and create tutorials. So if you go to Talent Morales IO, so Talent Morales IO, you can apply to Game Engine content creator. And you need to know C Sharp. You need to know. Unity.
00:27:18.354 - 00:27:26.230, Speaker B: Game engine. And yeah, maybe we can even work together. So, yeah, that's it for me, guys. Thanks a lot. Have a good day. Bye.
00:27:27.050 - 00:27:39.180, Speaker A: And for the rest of you, I hope you have a great day as well. We do have some more workshops and other event sessions today, tomorrow and Friday. So hope to see you all there. And with that being said, thank you again.
