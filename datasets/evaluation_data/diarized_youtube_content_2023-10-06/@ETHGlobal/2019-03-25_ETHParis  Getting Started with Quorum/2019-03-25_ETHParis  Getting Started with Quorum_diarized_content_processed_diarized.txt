00:00:00.330 - 00:00:37.898, Speaker A: Fantastic. Okay, so my name is Peter, I work at Morgan on the Quorum Platform. Hopefully some of you will have heard of it before. For those of you who haven't, I'll give a quick overview of what Quorum is and what it offers and I'll give you a demonstration on how you can get set up with Quorum quickly and easily today, if you wanted to. Okay, so, Quorum, we've been around for about three or four years now. Since the start of 2016, we were a fork of the Go Ethereum client. What we aim to do is add enterprise based features on top of blockchain, which is a big problem.
00:00:37.898 - 00:01:17.880, Speaker A: Most public blockchains have that data requirements low throughput. We aim to solve these issues today. So 2016, we looked back and we thought, okay, what options are available? And the Ethereum platform really stood out. And so we started on there and we haven't looked back ever since, to be honest. Just to give an overview of who's using it today. So there's some big organizations, Santander, big bank providers and startups are even looking at Quorum. What does Quorum offer and can we use it? And yes, people are using it in production today.
00:01:17.880 - 00:02:01.746, Speaker A: So what is quorum? So, Quorum is made up of four big features on top of Ethereum. So we aim to introduce privacy, so, permissioning, various consensus mechanisms as well as high performance. So for privacy, we aim to only allow the participants who should have access to a contract or transactions to actually see what's going on there. So not everyone should be able to see what's happening. And we can't even store encrypted data on the chain, which is a lot of solutions these days are doing permissioning. So again, we work for enterprise environments. So for permissioning, you want to know who you're interacting with.
00:02:01.746 - 00:02:31.866, Speaker A: Even if you don't trust them, you want to know who's there who can see what information is publicly available. You don't want anyone to just come into your network configurable consensus. So I'll go over in more detail later. But various consensus mechanisms provide pros and cons such as high throughput or low, latency or scalability. So we give users the choice of what they want to do. And lastly is performance. So, I mean, there's a lot of work in Ethereum at the moment for improving performance.
00:02:31.866 - 00:03:21.470, Speaker A: We have solutions that we have today, usually related around consensus, but we're always looking to improve that as well. And lastly, I've still got Ethereum on here. So Ethereum was the starting point for us and we still get benefits of what we have today and we want to give back. So the community, you guys are really the biggest part of what Quorum is today, right? So we do have some bounties, which I'll go through later, but we do need to give back to the community, we do appreciate that. So, technically, what is quorum? So Quorum started out as a modification of go ethereum. So we've added some modifications on top to enable high performance privacy. To enable the privacy, we have what we call a private transaction manager, which is separate to the Geth client.
00:03:21.470 - 00:04:05.366, Speaker A: And what this transaction manager does is it holds the encrypted payloads off chain and distributes them point to point between the participants who are party to those transactions and passes back a hash. So a hash is what is stored on the chain for witnesses by other members. We do want to keep up to date. So we are currently on 18 1812, we won't be on 1818 and we know there are a few updates to get after that. So what you have available for public ethereum today is usually more or less available for Quorum as well. One of the fantastic things about Quorum is because it's not a whole new application, it's a fork of an existing application. A lot of the tools work out of the box without modifications.
00:04:05.366 - 00:05:04.986, Speaker A: So Remix, MetaMask, Truffle, Block Explorers you might be using usually work out of the box without any need for any modifications, which is a fantastic thing. Okay, so consensus, so Quorum provides three different consensus mechanisms. We have a proof of authority, raft and IBFT. So POA for those familiar with guests is just click, which good, it's good for public blockchains, but for enterprise solutions you want finality guaranteed. So finality is a thing that often crops up and especially like financial institutions, you can't be reversing transactions. So finality is a big thing, which is what Raft and IBFT provide. Raft is our high throughput and low latency solution.
00:05:04.986 - 00:05:59.120, Speaker A: So it's a crash vault tolerance solution based on the Etcd implementation for those familiar with that company and offers transaction finality, high speed and low latency and is meant for really small permission networks. So one of the things about Raft is that you need all the participants to know who else is in the chain. So it has scalability issues but allows you for fast transactions. IBFT on the other hand, is almost the opposite. So Istanbul Byzantine fault tolerance has a set of validators in there and then participants for the rest of the chain. So there are a few block makers and then everybody else can submit transactions. So, because there's only a few block makers, it has the same sort of scalability as proof of work and that networks can scale to sort of thousands or tens of thousands of nodes just fine.
00:05:59.120 - 00:06:26.612, Speaker A: But it also offers transaction finality, which is one of the big things I mentioned earlier. And today I showed a few companies using it earlier. But there are over 2000 networks running IBFT today. Cool. So, I mean, as I say, we've been here four years and we've done a lot in that time. We've seen a lot happen by you guys, but there's still a lot more to go. So I'll pick out a few key ones here so privacy.
00:06:26.612 - 00:07:20.184, Speaker A: So we have a POC with Zcash to do zero knowledge proofs. We really want to get that in production and cement it in, take it out of the POC stage. This year private contract extensibility, allowing users to come in after contracts have been created and interact with them, as well as private state consensus. So you have the public state of the chain, you also have the private state, but there's no consensus over that private state, which for some scenarios is really key performance as well. Performance isn't still quite what we want it to be. It's a lot better than what you might find with other solutions, but there's still a lot more to go. So as far as performance goes, transaction parallelization, there are public EIPS for this as well that need to go through a bit more process, but we're looking into that as well.
00:07:20.184 - 00:08:03.396, Speaker A: We'd love to contribute EVM optimization so you can always make what you have faster as well as Euasm. So Euasm is a big thing coming up and as that gets introduced, we'll be looking to take that on board as well. And last thing is tooling. So one of the big things about enterprise blockchain is it could be difficult to set up and anything that lowers that barrier to entry means that more people are going to start using blockchain. So the better tooling we have, especially sort of one click deployments are fine existing databases, so people want to store their data in the way that they want. We want to allow that. Monitoring and logging, network health, particular node health, things like that, and identity management tools.
00:08:03.396 - 00:08:35.450, Speaker A: Identity is a big thing. You want to know who you're interacting with. A lot of like know your customer requirements require that. Okay, I'm going to go through how to set up Quorum. I've got some links here. Cool. So if you go to the JPMorgan GitHub, we have all our repos here, some of them blockchain related, some of them not, but Quorum is what you're looking for in Tessera if you want to install it yourself.
00:08:35.450 - 00:09:10.160, Speaker A: But what I'll be going through is this Quorum Examples project. Yes. Hi, Go. Oh yeah, sure, no worries. Cool. And so once these have been installed, we have this Quorum Examples repo which allows you to set up a network nice and quickly with seven nodes so you can send transactions between them. We have some instructions on how to set it up, but I mean, I'll be going through these now as well.
00:09:10.160 - 00:09:36.710, Speaker A: It cool. So once it's all cloned, I'll start from the very beginning. Okay. Yeah. So this is the starting point. So we have a Vagrant file if you are that way inclined. There's a docker compose file if you want to set up a docker network or if you want it straight from the machine, which is what I'm going to do.
00:09:36.710 - 00:10:38.550, Speaker A: There's a nice audit files here. As I say, we provide three different consensus mechanisms. So we have Raft, Istanbul, and somewhere in here, click. So setting up the network if you don't want to do too much work, simple as choosing which consensus mechanism you want and going through an initialization stage, which will seed each of the seven nodes with the genesis block and configuration and then starting it. Now, we have two transaction managers. I'm going to be using the one called Tessera. It does take a minute to start.
00:10:38.550 - 00:11:48.956, Speaker A: While that's going on, what I'm going to be showing is a transaction of just a very simple I'm not in the right directory, that's why. Okay, so Tessera is the private transaction manager. That meant before. That holds the encrypted payloads and distributes from point to point. Just do it right here. So just an extremely simple smart contract that takes a value for its constructor and you can overwrite it or fetch the value back out. Okay, so one thing I'll mention now, as well as your ethereum public keys, you have a private transaction manager public key, and this is your identity within the Tessera network.
00:11:48.956 - 00:12:43.180, Speaker A: Okay? So what we've done is we have the API, the bytecode, and we'll send the smart contract using web3, as you would usually. But we've also got this extra field here, which is this private four. And this takes the private transaction manager public key and says this is the intended recipient. Okay, so only the person who owns this key will be able to actually see that payload. Yeah, you can have as many as you want in there. Yeah, including none if you just want to send it to yourself. So I'll come back to that question in a bit.
00:12:43.180 - 00:13:40.520, Speaker A: Cool. Okay, fantastic. So I sent the private contract, and before I go into the details of that contract, you'll note that the transaction was immediately mined. I'm using Raft, which offers the low block times. So I've currently set it up to create blocks every 50 milliseconds, only if there are transactions present. So because there were no transactions pending before, as soon as one comes in, it will create a block and the network comes to consensus on that. If I take the contract address, get the contract address first.
00:13:40.520 - 00:15:01.730, Speaker A: That's not fun. That's not fun at all. Too private. Yeah, it's not been making I lied, apparently. Now, I did fiddle with this right before the presentation, so that could be why never do a live demo without testing it. Okay, take two. I'll use the IBFT consensus mechanism instead, which I have not fiddled with.
00:15:01.730 - 00:15:48.914, Speaker A: Yes. So. No, I don't. Raft is usually IBFT is a lot more popular because you can scale it a lot easier. A lot of blockchains require a lot of participants and they may not know all those who the participants are. So IBFT is usually the option of choice. Raft is good if you need high throughput, but there are quite limiting constraints on that, but no, I don't know how many are using it.
00:15:48.914 - 00:17:23.100, Speaker A: Okay, take two on this. Success. Okay, so the transaction has gone through, we have our contract address, and using a script I made earlier, we can see the value of 42, which we put in earlier. Nice color scheme, does in fact come up. Okay, now if I go to one of the other nodes, so this was, as I say, this is a seven node network between nodes one and seven is who I sent this transaction. So from one to seven, if I were to do the same thing on node three, for example, they will only see a value of zero, which is the default value for an integer. So there we can see that only nodes one and seven have access to the data.
00:17:23.100 - 00:18:06.090, Speaker A: If I were to do something like if I want to see what the code is on a non party node, there's nothing there. Right? So node three literally doesn't know what this contract is about. It knows the address exists, but it doesn't know if it's a contract, it doesn't know what code is there, it doesn't know what data is there. Only nodes one and seven know that. And like we mentioned earlier, this could be between all seven nodes. This could be a subset of, in this case it's two. So this is really one of the big features that Quorum provides.
00:18:06.090 - 00:19:16.238, Speaker A: If I had Raft working on my machine, you'll get it working on your machine, I'm sure the high transaction throughput you can create I've managed to get 300, 400 transactions per second in about half as many blocks maybe. Whereas Istanbul I've set to have a 1 second block creation time. But this is configurable. So yeah, now that the seven nodes are running, all your existing tools that you may be using for public ethereum work with Quorum. So you now have a network up and running that you can develop DApps on. So, and as I mentioned earlier, we do have some bounties if you fancy using Quorum for one of your projects. This hackathon, we have a $1,000 prize for the best use of the privacy features that Quorum has, another one for the use of the fast transaction throughput, and finally the best use of existing public tools, how to integrate them with Quorum.
00:19:16.238 - 00:19:54.186, Speaker A: So if you're interested in building on Quorum, then you could get one of these prizes. So thank you very much. So any questions, please feel free. So Tessera is really just a data store and encryptor. So what happens is the data comes, quorum sends the data to Tessera, tessera encrypts it and sends it point to point. Okay. And returns the hash to the original transaction.
00:19:54.186 - 00:21:18.764, Speaker A: So if I go back to here, I try and find my transaction before all that's put on the public chain. Is this hash okay? No, it's got its own network layer. So it does sort of a naive synchronization between nodes so that everyone has access to everybody else, because communication has to be point to point, so it cannot be relayed like it does in Ethereum. Does that make sense? We have references to every other node in the network because we need to know directly who to contact. If we want to send a transaction to a particular public key, we need to know directly, this is who I call and so I need to keep a reference to that for as long as my Tessera node lives. So inside Tesseri, yeah, it's just basic storage. So all that's stored is this hash and this is what's put on the public chain.
00:21:18.764 - 00:22:30.736, Speaker A: And this references an encrypted payload, which was the original data that was sent in to begin with. Yeah, you know, this node did something, but you don't know what it did. Okay, so there are levels of privacy that you have and this is what we provide. So yeah, if you didn't want to have this transaction at all, then side chains would be an answer to that, but we go with a single chain solution. Yeah, absolutely. So payment channel, state channels are a big solution to that, plasma is another big one as well, but they don't provide direct privacy. You can always put all those transactions back onto your main chain, your subchains, wherever, so they allow scalability but they don't allow privacy and they don't allow permissioning as well.
00:22:30.736 - 00:23:25.990, Speaker A: As far as I'm aware, you can probably implement permissioning on top of side chains. I've not come across any solutions. So if you only want certain participants to access your chain, then that's going to be a bit more difficult and involved. So if I spun off an 8th node here and he wanted to connect and he knew about one of these existing nodes, even if he tried to connect to it, he wouldn't be able to, the connection would be refused and he wouldn't be allowed access to that data, not even this hash of data. So he can't see anything that's going on. But no, we're always keeping up with layer two solutions and other solutions in general because they do benefit coins much as anyone else. Yeah, sure.
00:23:25.990 - 00:24:43.824, Speaker A: So I don't know if you guys have seen, we have our own stablecoin that's being trialed internally at the moment called JPM Coin. Microsoft are using this for their Xbox loyalty platform, so they'll be able to distribute loyalties over the Quorum network. There's a top of my head, there's a healthcare network in the US that's currently trialing Quorum as well as the Brazil National Bank, seeing what they can do with Quorum as well. So there are production environments out now, but there's also a lot of, as I say, this is still quite new, so there's still a lot of trials going on about how blockchain can be used in enterprise solutions. So as I say, existing tools work with Quorum so something like Remix you could do to submit transactions. We're making some modifications at the moment to allow you to do the private transactions, so you'd be able to do public ones at the moment. But as I say, existing tools work.
00:24:43.824 - 00:25:48.774, Speaker A: So if you've got your favorite ID or something, it would be able to submit transactions and you can continue using that with quorum. Yeah, Truffle works out the box. Yeah. So when submitting your transaction, if you do the same sort of thing of adding the private four field, okay, it's going to say autocompleted work on it. Yeah. So in Truffle, if you literally just add this field when deploying your or migrating your contracts, then they'll be done as private contracts and that works out of the yeah. So they work, but they may not always have all of the features.
00:25:48.774 - 00:26:25.122, Speaker A: So like I said, with Remix, you can't send private transactions with Remix at the moment. Same with MetaMask, you can't sign a transaction and submit that due to the way Corn works, you can do public transactions. Yeah. But you can't do private transactions. Okay, so those sorts of things, how can we adapt existing tools that are mostly there and finish them off? Yeah, exactly. Sorry, I'll go. No, MetaMask, well, it's supported for public transactions, but not private ones.
00:26:25.122 - 00:27:16.136, Speaker A: So it needs particular logic to be changed to enable private transactions through MetaMask, it would be a quorum specific change. So we would do that. We would do that and then support it. When you say validator, you mean okay. Yeah. So, so every, every node in the network has two state trees, the public state tree and the private state tree. So the private state is particular to a certain node.
00:27:16.136 - 00:27:36.592, Speaker A: Every node may have a different private state, so it only has the data that it's privy to. Okay. So to access it, it's done in the same way through all the tools. So if you're from a user perspective, there's only a single state which they access. They don't know whether it was a private state or public state. Okay. But internally, these are kept separate.
00:27:36.592 - 00:28:13.216, Speaker A: And so if I receive a transaction which was meant for me, that existed in my private transaction manager and I execute that transaction, it would execute on the private state. If I see that it's a public transaction, then it would execute on the public state. Ah, yeah. So if the access control is whether you have the transaction in your transaction manager, so that's the only access control at the moment. There are other access controls we want. So someone mentioned it earlier. I was going to come back to it.
00:28:13.216 - 00:28:40.430, Speaker A: One of the features that doesn't happen at the moment is node three could send if it somehow got hold of the code or the API, it could still send transactions to that contract, which clearly is not what you want. We do have a solution to that. Which we're trialing, and we want to make sure it's right before we put it out. But we are aware and we are fixing that. So no other questions? Okay. Thank you, guys.
