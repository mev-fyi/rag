00:00:00.330 - 00:00:00.590, Speaker A: Cool.
00:00:00.660 - 00:00:00.942, Speaker B: Okay.
00:00:00.996 - 00:00:47.980, Speaker C: Hey, everyone, thanks so much for attending this. This is our first session of the Ethereum Dev onboarding series, so hopefully we'll do many more of these if they're valuable. We basically want to make sure that new devs to the space have just a way to just feel comfortable and really understand how you navigate the ecosystem. It can be really overwhelming at first when you first join Ethereum. So we have just these wonderful speakers today who are just some of the top educators in the space, and we'll have a Q and A with them. And we also have a Telegram group set up the links in the calendar invite. So if you want to connect with the other attendees and work on something together or collaborate, definitely feel free to join that and chat with people.
00:00:47.980 - 00:01:29.226, Speaker C: Yeah, so this is just an hour long, so I don't want to talk too much in the beginning. Thanks, Trent, for co organizing this with me. I'm really excited about all the work we're doing with this. And yeah, so the format's going to be first we're going to have the dev panel. We're going to have all the devs intro themselves, and then we're going to ask a couple of questions to them that we think are valuable. Then we're going to pull from the pre submitted audience questions and cover the most commonly asked ones that we think will be helpful. And then we're just going to open up to live Q A and we'll pull people up to unmute themselves and ask the questions.
00:01:29.226 - 00:01:40.300, Speaker C: Just please don't ask any price related questions. We're here to just talk about development. Yeah. So Trent, if you can maybe kick off and intro yourself and stuff.
00:01:40.830 - 00:02:11.490, Speaker A: Sure, definitely. So I currently work with ETH Global. Some of you may have had experience or been to one of our events. We do. Previous to 2020, we did all in person hackathons around the world, and in 2020, we've done a couple online hackathons, and we're running one currently ETH Online. So I do community management and sort of help keep the wheels turning inside the organization. Previously, I was just a community member starting about 2016.
00:02:11.490 - 00:02:14.040, Speaker A: So been around for a few years now.
00:02:17.540 - 00:02:18.290, Speaker B: Cool.
00:02:18.740 - 00:02:33.720, Speaker C: So then I guess can we kick off the panel and maybe have everyone intro themselves very quickly? And then Trent will go into asking the questions that he prepared, maybe Alexis and then Austin and then Jordan.
00:02:35.340 - 00:02:55.150, Speaker B: Sounds good. Hey, everyone, I'm Alexis. So I'm currently working on Open, which is a DeFi project, but had gotten into the space a couple of years ago, initially just through trying to build interesting random DApps at Blockchain at Berkeley. So excited to chat today.
00:02:58.020 - 00:03:19.190, Speaker D: Awesome. And I'm Austin Griffith, builder in the space. I've worked on things like Metatransactions and Burner Wallets, and now I'm spending a lot of time on devtooling and helping y'all get started being an Austin builder like me. Thanks for being here and I'm excited to show some stuff off.
00:03:23.130 - 00:03:55.300, Speaker E: Hey, my name is Jordan. Jordan last got in the space in 2017. For some reason, I'd never really heard of all this stuff before. Studying computer science, figured out this is like the ultimate and decentralized distributed system, so been loving it ever since. You might know some of the things I've done BTC on Ethereum.com, I built that the ETH supply gate issue. I built a script with some other people and hopefully put an end to some of the confusion, but I guess not.
00:03:55.300 - 00:04:01.800, Speaker E: Yeah, I just love building stuff, so just have a bunch of projects I'm working on.
00:04:07.890 - 00:04:11.840, Speaker C: Oh, Trent, are you going to ask the dev questions?
00:04:12.930 - 00:04:18.346, Speaker A: Yeah. Do we want to do that before or after going through the person stack?
00:04:18.538 - 00:04:22.002, Speaker C: Maybe it's just like we can start off with that and then get into it.
00:04:22.136 - 00:05:01.870, Speaker A: Cool. All right, so, I mean, we asked everybody to submit a question or two, and Linda and I have gone through those submitted questions and picked out some of the most common ones. So we'll just start with a few of those and hopefully it will hit at least a few people who submitted the same question. So first one was, what are the best resources for getting started? I know this is pretty wide ranging question, so maybe just start with your personal experience. Like, what did you do when you first started and maybe what resources would you recommend? Today we'll start with Jordan.
00:05:03.970 - 00:05:57.546, Speaker E: So, yeah, I think this question kind of depends on what it means to get started or how getting started are you if you have no programming experience whatsoever, I'm not sure jumping straight into Solidity is a good idea. If you just focus on Solidity, just Smart Contracts, it's a major piece, but it's kind of actually a small piece of the entire stack that we're trying to build here. So if you have no programming experience whatsoever, I highly recommend essentially jumping into web development. Understand the basics of HTML, understand the basics of CSS, understand the basics of JavaScript. I call it the triumvirate of languages. Kind of like in the Roman times. With those three things, you can build amazing things, you can build mobile things, you can build server things, you can build front end stuff and lots of the front end user interfaces.
00:05:57.546 - 00:06:34.494, Speaker E: So all this stuff is going to be web. So I say jump into some web, get some basic programming experience there. Once you kind of have your way around programming just a little bit, then it might be time to jump into Solidity. Actually, let me walk that back just a little bit. You don't have to jump straight into Solidity either. So writing Smart Contracts is one part of it, but also interacting with Smart Contracts is a whole thing as well. So Ethereum is essentially just a new backend environment for us to work with.
00:06:34.494 - 00:07:10.646, Speaker E: You're going to interact with it using APIs, just like you'd use any other API almost if you're using Twilio or Stripe or whatever APIs Ethereum, you're going to interact with it, with those APIs doing Http requests. So in that way it's not necessarily different than anything else that you're going to deal with. Obviously there are specific challenges and nuances to the environment that is Ethereum. It's a new computing environment, it's a new back end environment. So you will have to learn those things. So a good way to jump into that, just grab one of the client libraries. Personally, I use ethers.
00:07:10.646 - 00:07:55.830, Speaker E: JS I prefer it over web Three. JS. You can also use the JSON RPC API directly if you want to and just pull data off of the blockchain. Just take a smart contract, maybe Uniswap or USDC or Dai. Grab the current supply of Dai. If you can use Chainlink, get a price feed, throw that onto the total supply of Bitcoin, for example, of like WBTC or so there's you can just kind of pull stuff off and read. And then once you're good at reading know, just kind of making a UI that can display, then you might want to go a little bit deeper and actually start writing.
00:07:55.830 - 00:08:30.862, Speaker E: So when you start writing stuff, you're actually signing and sending transactions and you can just use MetaMask essentially to do that for you, combined with something like Ethers or Web Three. And once you're reading and once you're writing, then you might want to jump into actually creating your own smart contract. And if you really want to get started with Solidity, sometimes I think it's just best to start. There's tons of YouTube videos, tons of blog posts. Start reading some. Honestly though, what I'm doing personally is I look at the Solidity documentation. They have quick starts, they have examples.
00:08:30.862 - 00:08:53.660, Speaker E: Read that and use the Remix IDE if you're just getting started. So Remix Ethereum.org, I believe it's a full on development environment right in the browser tab. And you can write a simple smart contract. You can deploy it to just the browser, you can deploy it to a test network like Robson or any of the others, and you can even deploy to Main.
00:09:00.030 - 00:09:22.542, Speaker A: You would recommend first that you don't have to start making smart contracts right off the bat. You can start by learning how to interact with existing ones. That's the first thing. And then the other thing you mentioned was to have a proper foundation of pre existing foundational skills that inform learning about Solidity. And then maybe once you've got those things under your belt, you can move into actually writing smart contracts.
00:09:22.686 - 00:09:23.378, Speaker E: Exactly.
00:09:23.544 - 00:09:28.958, Speaker A: Cool. Awesome. Alexis, do you want to take a swing in that one? What are the best resources for getting started?
00:09:29.144 - 00:10:00.350, Speaker B: Yeah, for sure. Yeah. One thing that personally helped me a lot when I was getting started was actually just being a really curious user of applications that already exist. So going and trying things and trying to understand exactly how it worked. So I'd make a transaction on say, uniswap and then click the Ether scan link. And Ether scan takes you to where you can see all of the different transactions that occurred in that one kind of call. And trying to understand how did each one of these things actually work.
00:10:00.350 - 00:10:37.370, Speaker B: And going and trying to map that back to those existing contracts that actually exist. And so I found that that was one thing that was actually really helpful for me is trying to understand how the existing kind of best practices fit together, how they work in production. And also helped me kind of get a sense of, oh, as a user I would want to do this or I would want to do that. Which also helped me kind of figure out what I would want to build initially. So that's one thing that I would suggest. And then in terms of a tangible resource, when it comes to Solidity, one thing that has been really cool to see come up is Crypto Zombies. So I know that wasn't when I was starting.
00:10:37.370 - 00:10:46.990, Speaker B: It was also kind of just starting. But that was a super fun way to learn. It's a game and you go through different levels. And so that's I think a great way to get started with solidity.
00:10:49.170 - 00:10:56.690, Speaker A: Awesome. Yeah, I know a lot of people had their initiation ritual learning doing the Crypto Zombies tutorial series.
00:10:57.830 - 00:11:37.562, Speaker D: Austin yeah, I think echoing back basically what happened there. If you're not a great developer, make sure you can build a product on Web two first, right? Like go build a to do list. Go build something that you'll use. Build something and give it to your friends and let them use just, just iterate on what it's like to build a product first and then think about, okay, now with this new just like Jordan said, it's similar to a database, right? This new paradigm of storage, it's going to be more expensive. It's backed by a lot of other things and a lot of other trust assumptions, but it is still just a storage layer. And think of it like you've got your front end and your back end and you can go to places you can Google things. Like Ethereum.org
00:11:37.562 - 00:11:58.926, Speaker D: has a lot of developer stuff. I got started with YouTube videos like Jordan Lay's Decipher Media. He went through just like, here's how to build a DAP. And it was like eye opening to see him build through things and kind of get context for the space. And for me that really got me going. So look for other people building things. Look for the resources.
00:11:58.926 - 00:12:30.334, Speaker D: Like on Ethereum.org, if you are into the fundamentals, check out ETH Build. And then if you're ready to start building, check out Scaffold ETH. And I will shill those some more later. But yeah, I love the idea of know exactly what's going on. Like what says, like, sure, like, you send some stuff around, you approve some stuff, you transfer some stuff. You think you're an expert, but do you really get under the sheets and figure out what's going on with those bits? Figure out how to underflow a variable, simple things like that.
00:12:30.334 - 00:12:44.020, Speaker D: But it's neat to actually test those assumptions and try that and prove to yourself, sure enough, yes, this is how it works, and I've done everything just right. And sure enough, when I fire that transaction off, that magic thing does happen.
00:12:45.910 - 00:13:16.880, Speaker A: Be curious, be snooping around, be poking around. Ether scan. Awesome. All right, so let's switch it up from verbal questions and why don't we do the Show US Your Stack? A lot of people asked about this, and I know everybody's. Jordan, Alexis, Austin, you're working on different things, so you might have a little bit different. But Jordan, why don't you start share your screen? If you have stuff ready, let's see what you use to build.
00:13:18.370 - 00:13:53.094, Speaker E: Okay. Screen is good. You can see I mean, like I said, if you focus on the web, essentially the first thing that you're going to need is to install node JS. Node JS comes with NPM, which is the node package manager. So first step, just install node JS. I highly recommend not installing it with the default operating system way of installing it, but to use NVM, which is the node version manager. Okay, so once you have Node installed, you're going to create a package JSON.
00:13:53.094 - 00:14:28.726, Speaker E: This is kind of like the main configuration file for the entire application. And these are the dependencies that I use for interacting with smart contracts from a front end or essentially from anywhere. I really recommend Ethers. JS I love it. It's simple, it works great, and the maintainer of the library is just very responsive to any issues that you might have. It's super helpful. For a front end, you're going to need some kind of component model.
00:14:28.726 - 00:15:04.990, Speaker E: There's react there's View there's angular there's Ember there's all those. Personally, I use web components, so there's actually a component standard built straight into the browser. I just use the raw custom elements, and I use a templating library called Lit HTML right here and essentially gives me the power of react, but just without all the dependencies that react gives me. And then I use redux. I wrote a little library to help me use redux a little bit better. Yeah, front end. For ethereum development, I use custom elements litishml, Redux, and ethers.
00:15:04.990 - 00:15:17.300, Speaker E: Your stack, like I said, might be different. Ethers is kind of the common thing here. But ethers and react, it'll work great. Ethers and View, that'll work great. Ethers and angular, that'll work just fine. Ethers and vanilla JS. It doesn't matter.
00:15:17.300 - 00:15:56.382, Speaker E: So this project does have some smart contract capabilities, so I highly recommend Waffle. I just started using this, but it's really nice. Super simple testing library. It will spin up a local Ethereum node just in memory for you and it will let you write your test using very common testing libraries. So Chi or Chi, very common testing library. It's not ethereum specific, but ethereum. Waffle integrates with it.
00:15:56.382 - 00:16:29.846, Speaker E: Same thing with Mocha, not Ethereum specific, but Waffle lets you integrate with Know. There's you don't have to use Waffle. A lot of people use Truffle and I'm sure Austin has a different setup and opinions on these as well and maybe Alexis as well. And that's mostly it. I personally also love TypeScript, so when I'm doing TypeScript on the backend I use TS node. It gives you almost the same CLI as node. You just add TS on it and so boom.
00:16:29.846 - 00:17:19.020, Speaker E: I can write everything in TypeScript. TypeScript is nice because it helps you write maintainable code, catches lots of bugs for you and in my opinion makes things much more understandable and readable and it will catch bugs before you run your code. So not all bugs, but there's a certain class of bugs that it's going to really help you with. And then on the front end, if you want TypeScript and all the crazy stuff, a lot of people will use Webpack or Parcel or some kind of bundler. Personally, I don't use Bundlers. I use a project that I made called Zwaiterion and in my opinion it's much simpler than the bundlers and it just kind of lets you compile things in real time. And you can do other languages like Assembly Script and Rust and CNC Plus plus to varying levels of usefulness there.
00:17:19.020 - 00:17:31.600, Speaker E: Those are the dependencies that I use. That's kind of the stack and that's probably good for now.
00:17:32.450 - 00:17:44.434, Speaker A: Awesome. One quick follow up. What sort of projects, what takes up the most of your development time using that setup? What sort of things do you work on? Most often?
00:17:44.632 - 00:18:20.330, Speaker E: I am mostly focused on interacting with smart contracts. So most of my projects have been all right. Other people have smart contracts deployed. So I'm going to be writing front end code that deals with private keys, public keys, and signing and sending transactions or just pulling information off of the blockchain and compiling it down and then kind of visualizing it. So that's most of what I'm doing. I'm about to launch an NFT project. So this setup that I showed you right here has that smart contract.
00:18:20.330 - 00:19:06.154, Speaker E: You know, if you're actually writing a smart contract, you're going to need more than just a front end. Obviously you need the contracts. You need to write tests unless it's truly just a prototype and maybe on a test network. But you really should have automated tests. So this Proof of Rank project is going to have the actual contracts folder and it's going to have here's some tests I really recommend for testing, property based testing. So I use a library called Fast Check. Essentially takes unit testing a step further and lets you write kind of arbitrary, essentially lets you write infinite test case in one test case instead of just writing one example by using random inputs.
00:19:06.154 - 00:19:08.798, Speaker E: So sorry, that's the answer.
00:19:08.964 - 00:19:12.810, Speaker A: Do you want to drop a link to that fast check you just mentioned in the chat?
00:19:12.890 - 00:19:13.520, Speaker E: Yes.
00:19:14.210 - 00:19:19.666, Speaker A: Austin, do you want to share what you've got? A little bit of E build?
00:19:19.848 - 00:19:36.114, Speaker D: Yeah, for sure. Okay, I stopped it. Start it and stop it. That's all you get. That's it. Okay, here we go. So first I want to talk about just like introductory.
00:19:36.114 - 00:20:06.020, Speaker D: If you're wanting to kind of figure out the basics. You want to learn how a hash function, a key pair transactions, encryption, byzantine, general blockchain transaction, smart contracts work. This is a good place to go. ETH Build. I've done videos. Basically, if you click build here, you get kind of a sandbox and you can move things around and you can wire things up. But what I've done here with ETH Build is use this platform to create kind of tutorials on how things work.
00:20:06.020 - 00:20:40.858, Speaker D: For instance, let's just prove to ourselves that given some key pair here, a key pair is just a private key, right? And then the public key is derived from that. And then you get an address that comes out of that, right? And someone might tell you that your address is a hash of your public key. But if you wanted to prove it to yourself, if you wanted to test those assumptions, you can get in here and pull that out. And then if we look along here somewhere actually, can I turn this into a nice little let's see.
00:20:41.024 - 00:20:43.100, Speaker A: Yeah, let's do this.
00:20:44.030 - 00:21:12.658, Speaker D: There we go. We can see that guy line up there? See that? The eight F is actually the given some private key. We derive a public key, then we get a hash of that to get our address right. Simple stuff. But then you can use those to kind of like sign and recover data or maybe encrypt and decrypt some data. It gets pretty far into weird blockchain stuff. You can actually kind of compile and deploy a contract.
00:21:12.658 - 00:21:41.182, Speaker D: And this is a module. If I click into this, we see that there's a bunch more stuff underneath. That a compiler that's giving us the Abi blockchain transactions. Just this really kind of like visceral, hands on experience to let you test those assumptions that's ETH Build. And I think that got put into the chat, so I won't worry about it. But not just with building. You can get in here and just watch me build and figure out how I go through and do things.
00:21:41.182 - 00:22:08.310, Speaker D: And the audio, I don't have this nice soft aperture video and good mic back then. So you'll have to deal with some choppy audio. But the content is good, I promise. Then once you kind of have the fundamentals figured out and you've got an idea for how you want to build some kind of product. That's what I made scaffold ETH for. And Scaffold ETH isn't really a product itself, it's sort of a stack of existing products. One of those is Bidler dev.
00:22:08.310 - 00:22:50.178, Speaker D: So Biddler you'll probably hear about a lot today, I hope. It's kind of like a replacement for Truffle. They rebuilt the EVM in a way that gives you lots of good debugging out of your local contracts. You can do a console log writing your contract and then if you're just writing the front end, check out Create ETH app or Paul Berg's Create ETH App. It's basically a bunch of templates ready to go for you to just fork create. I think you just do like NPX Create ETH app or something like that, but basically it gives you a react app right away with some templates in there, whether you're talking to the uniswap contracts or the maker contracts. Check this out.
00:22:50.178 - 00:23:41.506, Speaker D: If you're going to create something that doesn't need sort of a backend built in with it, or you're not trying to prototype something, but if you are trying to prototype something and you kind of need the full stack both smart contract back end and some kind of react front end. Scaffold ETH brings both of those to you in one simple Git clone. So the reason I put it into a repo is there's all sorts of dependencies and you can run into dependency hell and have problems with no jip and stuff like that. So I put it all into a repo and then I put in all the fun components and hooks and stuff that I find myself using for a decentralized app. So this is a perfect hackathon stack. If you're about to start a hackathon and you want to have the tools ready to go for you and you don't want to spend the first three days trying to get your stack ready. Basically, you can just clone Scaffold ETH and hit the ground running.
00:23:41.506 - 00:24:29.990, Speaker D: You'll do a yarn install and that takes a while and it does throw some node chip warnings, but just go ahead and ignore those and you'll get your dev environment up with a yarn start. You'll get your Biddler node up with a yarn run chain and then you have yarn run deploy over here and that's going to compile a local contract that I have for you here. So basically you start out with a back end and a front end. You've got your your contract and then you've got your app JSX. And I've done a lot to sort of scaffold this with tons of comments trying to explain like, okay, here's how you get your balance, here's how you go load some contracts, or go read from some contracts, or maybe go read events into an array. There's a lot of front end stuff kind of just scaffold in for you. But what's most important is this nice little contract function.
00:24:29.990 - 00:25:01.470, Speaker D: I built this contract component. So when you have your app up and running, basically you get this nice little contract scaffolding. And what that's doing is taking. So let's do this real quick. I'm going to create a UN eight public counter. I'm going to set it to one, and then I'm going to create a function that decrements that counter by one, and we'll make it public. So we'll do counter minus minus, and that's it, basically.
00:25:01.470 - 00:25:25.058, Speaker D: Then I can do a yarn run deploy over here. So here's my dev loop. I've got a nice tight dev loop where I can change a little solidity, I can test my assumptions. What the heck does UN eight do? And you'll see that the app hot reloads. Do you see that? I got a new contract. Let's do it again. I'm going to yarn run deploy so it compiles my local contract, ships it off to my local chain, takes the artifacts and injects it into the front end, and we get a hot reload.
00:25:25.058 - 00:25:43.674, Speaker D: See that new address show up. And I've got two different players. So this shows that I've got an incognito window. Any incognito window is going to generate you a burner wallet. When you land on any app built with Scaffold ETH, you get a burner wallet right away. A good example of that is Nifty Inc. If you go to Nifty inc.
00:25:43.674 - 00:26:09.010, Speaker D: Right now, it's an NFT platform that we launched with meta transactions, burner wallets, side chains. Please don't show a dick right now. Shoo okay, good. But basically what you can do is anybody can get in here and create, and they're going to have an address right away. If I log out of here or if I open up Nifty Inc. In an incognito window, I get one of these addresses, and it's a full wallet ready to go. So a lot of these components, like, oh, here, let me find this component.
00:26:09.010 - 00:26:36.938, Speaker D: Say you want a two address, right? It's got a scanner built in on it. So you create an address input, and it's already got a QR code scanner hooked up to it. Watch what you can do. You can even type in Austingriff ETH, and it's going to auto resolve that give you a nice blocky preview. All these things that every app needs this as their address input. And every single DAP builder is like, rebuilding these things. Let's just kind of get these component libraries together for this kind of reuse.
00:26:36.938 - 00:26:53.810, Speaker D: Let's see here's for the fun here. So here's my counter that I created. It was a UN eight. We're using eight bits when we decrement it. Oh, wait, we don't have any money. Wait, we got to have money to operate on this network. I'll go to this faucet and I'll send myself some funds.
00:26:53.810 - 00:27:14.310, Speaker D: Before we get to that, you're right. Let's talk about this. This guy's another address, right? This is a multiplayer game, so I can pull up this address I can compare those two blockies. I can send this guy a dollar. Hit send. Now this guy has a dollar, right? He has gas. But what's going to happen when I decrement this variable? So it was a UN eight, now it's zero.
00:27:14.310 - 00:27:44.046, Speaker D: What if I go it again? How many people on the call know what this value is going to be? Oh, it rolls under. It's underflow, right? We went to 255. And sure, you can know that. You can say that, but to have it happen right in front of you, to be able to just write the code and go prove it real quick, and you could say, well, what if that's a UN 256? What happens? It's so easy to test, my friend. You just change it right here. You hit Yarn Run Deploy, and it'll pop up in your front end. And then you can kind of poke at it and test those assumptions.
00:27:44.046 - 00:28:15.498, Speaker D: So that's what Scaffold ETH is for, basically setting you up to test these things. Then eventually there's some UI that helps you sort of scaffold in and build your app. If I hit set purpose here, it's going to fire a transaction. It's going to set this purpose up here, and it's going to give me an event. And so there's all these kind of nice things to follow, just instructions. I'm doing one on one dev sessions where we go through this for the first session, and then I send you. You'll find it in the Scaffold ETH repo.
00:28:15.498 - 00:28:28.942, Speaker D: There's some nice instructions here. So once you get your environment set up, I have you open up solidity by example and solidity global units. I think someone mentioned this earlier, but look at this, solidity by example.
00:28:29.076 - 00:28:29.566, Speaker E: Look at this.
00:28:29.588 - 00:28:42.646, Speaker D: It's so clean, so easy. If you want to know how to create a mapping, there it is. There's the mapping, right? If you want to know how Delegate Call works, click it. Well, no one truly knows how Delegate Call works actually does.
00:28:42.748 - 00:28:43.826, Speaker A: It's just complicated.
00:28:43.938 - 00:29:23.314, Speaker D: Okay? But this is the reference material I have ready for someone. Have this already, even just for inspiration. And then you basically can just do this. Kind of edit your contract, push it into your front end, get the interaction right, get it feeling right. Understand? Are my assumptions correct? Is this app going to actually work? And then you can do something like yarn run build and yarn run s three or even yarn run surge. And that will take a static build of your app and deploy it to a website. So within the second session, basically, the homework is let me go back to that.
00:29:23.314 - 00:29:54.714, Speaker D: The homework after the second session in here is to build a decentralized bank. Your homework is to build a decentralized bank, basically get a smart contract, have a deposit function, have a withdraw function, track that message value, use a mapping to take care of balances. And if you want. To go pro mode. Use the block timestamp to pay a small amount of interest based on how long funds are locked up. Then there's a whole bunch there to follow. But that's my speed run through my stack, Scaffold ETH.
00:29:54.714 - 00:30:01.200, Speaker D: I will paste it into the chat. Thanks. That was a long winded response. Sorry.
00:30:01.890 - 00:30:21.590, Speaker A: Just to summarize if I'm interpreting this quickly, if I was a developer coming in with not a ton of experience, you've created ETH Build as a tutorial series for people to just dive in and learn sequentially. And then there's a playground that they can also do those sort of that visual coding.
00:30:24.250 - 00:30:46.874, Speaker D: Yes, exactly. Kind of being able to test those assumptions with just like, how does a hash function work? How does a key pair work? Then once you have those, like, can a key pair sign a transaction? Can a key pair sign a message? Can we recover that just seeing how things are kind of backed by the cryptography, even before you even deal with transactions, getting mined into blocks and consensus mechanisms and stuff.
00:30:46.992 - 00:30:58.958, Speaker A: Yeah. And then you also created Scaffold ETH as a tool to help you build. But it's also a bit of an educational resource. So it's kind of a little bit of both things. Right?
00:30:59.044 - 00:31:26.806, Speaker D: It's kind of like kind of how Jordan mentioned. Go to remix. Like remix is such a good idea because you can just land in a browser and you can put in some solidity and you can test those assumptions. This is sort of like that, but it takes maybe five extra minutes to set up. But then you have a local environment where you're testing those assumptions. You can do it on an airplane, but when you're ready, you basically have this app. Underneath there you have all the state of the art tools that are kind of hidden for you, but you've gained exposure.
00:31:26.806 - 00:31:47.022, Speaker D: And by the way, he was talking about testing with Waffle. I mean, if you look in there, I'm testing with Waffle too. He's using ethers. I'm using ethers. I think someone was talking about a comparison between web3 and ethers earlier. I think maybe web3 might be a tiny bit easier for a brand new person. But I think we're moving toward ethers kind of being the library that a lot of people use.
00:31:47.022 - 00:32:07.080, Speaker D: I think maybe there may be a little web3 revival going on too. So we'll see how that goes. But yeah, I think that testing your assumptions, iterating getting your hands dirty. Scaffold ETH is just meant to kind of set everything up for you and kind of hide it away and let you play around and then slowly kind of peel the layers off and figure out how it works.
00:32:08.010 - 00:32:17.386, Speaker A: Awesome. We will have Alexis answer, and then we'll keep going with the questions. Lexus, tell us verbally what your stack is.
00:32:17.488 - 00:32:52.546, Speaker B: Yeah, I feel like that was super comprehensive. So that was really awesome to hear from both of you guys. I'll just shout out a couple of things that we use and kind of talk about some of what I do. So right now I'm also kind of mostly connecting contracts to a front end. So similarly I'm using React and TypeScript, all these fun things. And one thing I wanted to shout out that I don't know that we've mentioned yet is something called the graph. And the graph is a GraphQL API, which makes it super simple to grab data from the blockchain.
00:32:52.546 - 00:33:56.266, Speaker B: And so that is something that we've built like a subgraph for open and that's how we kind of get all of our data. And one thing I really like about that is once you've built this graph that has all this functionality, it also makes it really easy for anyone in the community to come and build on top of your set of smart contracts. And there are graphs for a ton of the big projects on Ethereum, whether that's compound or uniswap or what have you. And so I think one really cool way to get started is to take a project you really like and do something interesting with a lot of data that they expose on the graph. So we've seen a lot of community members build alternative interfaces to different projects using these same kind of calls that are already available. So I think that's a good way to start to get your hands dirty, to understand how your favorite projects work, how calling actual data works without even having to write any solidity in the first place. So I think that's one thing that's really cool and that's something that the graph is something that we use a lot and then wanted to touch on contracts just a little bit.
00:33:56.266 - 00:34:59.882, Speaker B: I think smart contracts can get a little bit more tricky. And one thing that's really important I think to build from the beginning is a security mindset when thinking about smart contracts, especially if they're going to be holding a lot of funds and there are a lot of tools that can help you get started here and make this process easier. So Trail of Bits has this great tool called Critic and you can basically run it continuously like every time you make a PR, it'll run and it'll give you an analysis and report on any bugs it finds. So even if you're not necessarily planning to make the first thing you build like a production app or anything like that, I still think that's something that can be useful. They've got like a free trial for three months and that way you can see kind of what bugs pop up as you go along and fully understand them, understand the implications, especially if you want to build a contract that's going to hold real funds. And then another helpful thing, especially these days is something called ETH Gas Reporter. So it's another great library and every time you make a PR, it'll tell you, oh, this function is using more gas, or this function is using less gas.
00:34:59.882 - 00:35:33.020, Speaker B: And especially if you're trying to build something that you want other people to use given insane gas prices right now, that's something that we use a lot in our stack to make sure that the functions aren't going to be super gas intensive. Create ETH app, which Austin mentioned is also awesome. That's something that I personally use all the time. So highly recommend that it comes with a react set up, a subgraph set up, and a contract set up so you can immediately get started. And so I think those are the main things I would call out in addition to what has already been mentioned.
00:35:33.790 - 00:35:48.400, Speaker A: Awesome. Perfect. Let's go to the next question, which is you don't have to give a super long answer, but just what's one thing that you wish you knew when you were first starting out? Jordan, do you want to start?
00:35:50.770 - 00:36:19.350, Speaker E: I wish I had understood the limitations of Ethereum better. So there's certain class of applications you cannot build because it's far too expensive and far too slow. And so if you don't understand those limitations, you might have grand ideas that aren't going to come true, which I applied for a grant to the Ethereum Foundation with an idea that now I realized was just completely ridiculous and I did not get funding.
00:36:21.130 - 00:36:57.198, Speaker D: Yeah, I can totally echo that 100%. And that's basically my answer is going into it. I thought I was a genius. I thought I was going to get rich and I thought I discovered something that no one else knew about and I spent months heads down building that thing. And so I would say that the advice here is, first of all, you have a lot to learn, right? You get to a certain point where you're like, oh wow, there's so much more where you didn't know that at the beginning. There's so much to learn. But also you have to kind of throw stuff away.
00:36:57.198 - 00:37:26.618, Speaker D: You may become married to an idea so much that you forget that there's this product, market fit and context and even just like limitations of Ethereum, right? So you've got to almost work in public. You've got to iterate. You've got to get things in people's hands and see how they use them. And you got to throw things away. It's got to be okay to throw things away and you got to put the ego aside. You are not a genius. You are not about to get rich.
00:37:26.618 - 00:37:46.500, Speaker D: Well, some people, I guess, have gotten lucky along those ways, but this is a long play game where we're building kind of some really neat technology that's going to have implications into the next decades. Don't try to get rich in a month with some hair brain idea.
00:37:48.230 - 00:38:04.602, Speaker A: Yeah, those are incredibly profound. Build in the open and just come to respect the limitations of what Ethereum is. And actually, really quick, somebody asked what would be not a good fit. Austin, what were you building around that time that you realized quickly?
00:38:04.736 - 00:38:56.330, Speaker D: Well, for me, I saw that Oracles were going to be very important. So I built like an Oracle platform and it was going to be the first decentralized Oracle platform. And I am not a genius, just the game theory and crypto economics alone involved with something like that is so far beyond me. But a better answer to that is something that requires a bunch of storage or something that requires quick speed. There's a lot of really great things that Ethereum is for, kind of these trust minimize setups and something where you do need to be able to back to a public blockchain. But there's a lot of apps that people you should ask yourself, why blockchain right away? And if you can't answer that 100%, then you are just messing around. And a lot of my projects are just messing around.
00:38:56.330 - 00:39:03.840, Speaker D: Right. And some things come out of that. But if you don't have a clear reason why you're using Ethereum, you probably shouldn't be.
00:39:05.730 - 00:39:06.574, Speaker A: Perfect.
00:39:06.772 - 00:40:09.330, Speaker B: Alexis yeah, I guess I just kind of want to echo play off of what both Jordan and Austin have said about iterating and trying to figure out what really makes sense to build. I think again, a great place to start is working off of existing contracts and building interfaces off of that. And then also the cool thing I think about Ethereum is that all of these contracts are exposed on chain, which means you can connect them in really cool ways. And so connecting these different contracts I think is a really great way to learn. And that's something that I ended up doing relatively early, which was super helpful because you get to understand the mechanics of how these things work and then get to build new things that are connecting these kind of open APIs. And then I'd also say start to try to understand the people that you're building for and kind of become the person you're building for or build something that you'd want to see yourself talk to lots of users. Don't be afraid of sharing your ideas or your code.
00:40:09.330 - 00:40:35.500, Speaker B: People in the community are so welcoming to look at prototypes and give feedback and hop into discords. People are always open to ask questions and stuff. So even if something feels really early and I'd almost say you should feel embarrassed to share your first thing because you want to share early and often and get that feedback because it'll help you improve what you're building, help you move in a direction that's building something that people really want and are really excited about.
00:40:37.630 - 00:40:38.138, Speaker E: Awesome.
00:40:38.224 - 00:41:02.900, Speaker C: Thanks for sharing. I think that's really helpful. So we had a couple more questions that were presubmitted, that were really popular. If people want to just also add in the chat questions that you can ask the Dev panel, we'll just unmute you and you can ask them. So a really common question was how should new Devs think about east 2.0? Will existing DApps need to be rewritten for it? So, love to hear your thoughts on that.
00:41:07.190 - 00:41:38.778, Speaker E: I guess I'll answer that. I'm not on the client team, so I'm just going off public information and maybe some conversations on discords and stuff. But it seems the latest research is heading towards something called Ethereum Phase 1.5. So let's just go over the phases real quick. Phase zero is the beacon chain that's going to be proof of stake instead of proof of work. It's going to be the foundation for all subsequent phases. Phase one is going to be sharding.
00:41:38.778 - 00:42:18.006, Speaker E: So we're going to split up the blockchain into pieces instead of just being one coherent whole. And Phase 1.5 is essentially taking Ethereum 1.0 almost as is and putting it onto a shard on Ethereum Two. And so it's going to take all the state, all the applications, everything, and essentially just put it into a shard. And it should be a very seamless process to all of us. Any users of those applications, MetaMask and Impura and all those should take care of that pretty easily.
00:42:18.006 - 00:42:27.120, Speaker E: If you're running your own node, you might have to download some extra software to get that working. But essentially everything's just going to be ported to a shard is the current idea.
00:42:30.690 - 00:42:38.020, Speaker C: Cool. So another really popular question was is Solidity or Viper better for beginners? What would you recommend?
00:42:42.660 - 00:43:32.576, Speaker D: I can jump on that and just say solidity is a lot easier for me to read. I think that there is some kind of if you're a Python person, you might like Viper more. But whenever I going back to everything is public, right when someone launches a uni token, I can get in there and look at it right away before I even can touch their front end. I can go see all their public contracts. But I think that composability layer is pretty important and being able to go see that stuff is really important. And for me, I can read solidity a lot easier than I can Viper, but it's probably just because I've seen a lot of solidity, which maybe is also an answer, because there's just more solidity around for people to see, I think. I would guess that solidity is better for newcomers than Viper is, but maybe some other builders can chime in there.
00:43:32.758 - 00:44:01.240, Speaker B: Yeah, I would also shout out solidity also just because there's more documentation. I remember when I was starting and there was also very little solidity documentation. And you'd Google and there'd be like, you'd see the same question you have, but no answers. Now, at least for solidity, there are a lot more answers. And with Viper it's even harder. And I think when you're starting to build that's one of the biggest things, you run into common problems when other devs have had those problems and have solutions, it makes it a lot easier. It helps you get unblocked.
00:44:04.140 - 00:44:36.996, Speaker E: I echo everything they just said. We don't need tons of languages that are all trying to accomplish the same thing generally, in my opinion. So you're going to be going against the grain if you choose a language that kind of isn't the accepted language with the most network effects. So Solidity has the most network effects. Pretty much everyone's writing in Solidity. All the major projects, I believe, have Solidity source code, at least most of them. So I don't understand why you would just decide to choose to randomly kind of not randomly, obviously.
00:44:36.996 - 00:45:06.060, Speaker E: It might have better syntax. There's trade offs to everything. But you're going to be going against the grain also. Just something interesting to think about is the future of Solidity itself. Ethereum 2.0, once we get to phase two, is going to introduce potentially a WebAssembly based virtual machine. If we do have a WebAssembly based virtual machine, we can now use languages that compile the WebAssembly, such as C, C Plus Plus, Rust, assembly script, languages like that.
00:45:06.060 - 00:45:51.420, Speaker E: So your investment in TypeScript and JavaScript right now, that may pay off huge dividends in the future because you might be able to write smart contracts in TypeScript, assembly script, or Rust or something like that. And I don't know if Solidity will survive that environment if we do have those other languages that have even far more powerful network effects than even Solidity has. And Solidity might survive because a lot of people are writing it now. But Viper surviving into Ethereum 2.0, that seems even less likely. So if you have limited time and money like most of us do, you probably want to choose something that's going to be around for a long time. So that's my thoughts.
00:45:56.080 - 00:46:49.468, Speaker A: Did we get everybody there? Cool. All right, so this has been an awesome speed run. Now we're going to open it up into any live questions people had or if you wanted to follow up on something that was touched on earlier. So if you do want to unmute, just give me if everybody knows that I use the raise hand function in Zoom, I can't really demonstrate it, but hopefully you can find the interface where you can raise your hand in the side panel. Or is it on the bottom now? It might be on the bottom. Either way, does anybody have any questions that they want to ask? These excellent developers live in the participants. If not, we can oh, Marcus.
00:46:49.468 - 00:46:50.610, Speaker A: Yeah, go ahead.
00:46:52.900 - 00:46:54.224, Speaker F: Yes. Hi, guys.
00:46:54.262 - 00:47:00.690, Speaker A: Can you hear me? All right, we've got two Mark like names. I'll let Marcus go.
00:47:04.580 - 00:47:47.170, Speaker F: So, yeah, thanks all for your introductions and everything. Going to the question. I'm really excited about DeFi about building on the top of other stacks, on top of Compound and WiFi. Basically what I'm trying to do is it's hard to use rinkbee or other testnet because some of the smart contracts are not there, so on and so forth. When I fork Ethereum Mainet with the Ganesh fork, the problem is that I don't have any ether to play with on my fork of the main net.
00:47:50.930 - 00:48:07.410, Speaker A: Oh, no. Did we lose him? I think he had to drop. So maybe we'll wait to answer that while he rejoins Mark. Maybe we can jump to you. Sweet.
00:48:07.750 - 00:48:13.746, Speaker E: Hello, everyone. Just a quick question. Earlier you guys mentioned that a good.
00:48:13.768 - 00:48:15.570, Speaker D: Way of learning would be looking at.
00:48:15.640 - 00:48:18.770, Speaker E: Existing projects and kind of digging through.
00:48:18.840 - 00:48:19.998, Speaker D: Some of those contracts.
00:48:20.094 - 00:48:21.506, Speaker E: I guess my question is, I already.
00:48:21.528 - 00:48:25.638, Speaker D: Have off the top of my head some projects I'd want to look into. But do you guys have any interesting.
00:48:25.724 - 00:48:27.766, Speaker E: Projects that you think are interesting in.
00:48:27.788 - 00:48:29.542, Speaker D: The way they're developed or have really.
00:48:29.596 - 00:48:31.306, Speaker E: Good source code and be great to.
00:48:31.328 - 00:48:32.460, Speaker D: Use as an example?
00:48:34.590 - 00:49:06.578, Speaker B: Yeah, I think here I definitely shout out one like what you're most interested in, because that'll be fun for you to look at anyway. But compound and uniswap, I think are two really good ones. They're both developed with really good practices. They're widely used contracts. They're applications that you can test yourself and then kind of see what's going on in the background. And they're both pretty active on discord. So if you have questions, it's a great place to hop into the channel and have lots of people chat about these things with you and answer different questions.
00:49:06.578 - 00:49:09.080, Speaker B: So I would definitely shout out those two.
00:49:11.290 - 00:50:00.150, Speaker D: Yeah, totally. Just to piggyback on that like thinking about DeFi and thinking about the primitives. Start picking out those primitives and figuring out what they are. For instance, just how does an AMM work? What does that formula look like that calculates the AMM? How does lending work? How do I over collateralize a loan? How does the new stable credit work? Right? Looking at Andre's new stable credit, it's a similar thing where there's an AMM, but there's a second AMM for credit. And how the heck does that work? Right? So you could go grab that source code from Ether Scan. You could paste it into something like Scaffold ETH and then have a nice sandbox to basically poke around and try your assumptions locally. So, yeah, I would just say look for those primitives and figure out there's probably three lines of solidity that makes the whole thing work.
00:50:00.150 - 00:50:05.960, Speaker D: Really? When you get into it, go find those three lines and dissect them and understand them.
00:50:10.460 - 00:50:26.050, Speaker E: How I do it kind of is I just go to ETH gas station and look at the biggest users of gas and uniswaps at the top. So it's the most in demand project. Seems kind of important, so I might as well go look at that one.
00:50:28.420 - 00:50:49.656, Speaker A: That is a good proxy. It'll save you a lot of time. Cool. Tim, just a note. We only have a few minutes left so just try to keep your questions short so we can get to a couple different things. But Tim, if you want to go ahead and unmute. Hey, everyone, thank you very much for doing this.
00:50:49.656 - 00:51:13.790, Speaker A: It's been really great. I have a quick, very simple question. So we talked about different dev chains you can use. So there's bitler Waffle and there's also Truffle organash. I guess if anyone wants to tell me the pros and cons of each, I would be very appreciative. That's my question.
00:51:15.120 - 00:51:59.224, Speaker D: So I think that Truffle was just first and they got the job done right. For me, using Truffle was always a little bit infuriating. Having Truffle, getting Truffle working always kind of just made me a little angry. And I think that we're kind of at a turning point for devtooling where the tooling finally doesn't make us angry anymore. And so I just like something that's new because of all the anger I had before. But really, Truffle probably has all the same things now that Biddler does, or Biddler is staying ahead of them a little bit, but you can get things like console log and stuff out of Biddler. So, first of all, the three are Truffle with Ganache, right? So you've got Ganache or you've got Bidler with their own EVM.
00:51:59.224 - 00:52:24.260, Speaker D: And I think those are the two, right? Actually not three, two. Right? So so you can choose which one of those two you want. But Ganache is cool because you can fire it up locally and it's just everyone else uses it also. But I think Biddler is kind of like the next kind of coming of that tooling, I think. And it's Biddler Dev. I'll type it in, but I think everybody else should give their comment too, just in case. I don't want to be too opinionated.
00:52:28.840 - 00:52:38.360, Speaker B: Yeah, honestly, for me, Truffle. And so I've just kept using Truffle and now I feel like I really need to go check out all these other ones. No strong opinion.
00:52:39.900 - 00:52:56.652, Speaker E: One thing to keep in mind is these aren't all chains necessarily. So, for example, Ganache, it's its own local blockchain. It can be used in multiple projects. So I think Truffle uses ganache by default. Waffle uses Ganache as well. It sounds like Biddler, though. Austin uses its own thing.
00:52:56.706 - 00:53:00.350, Speaker D: They have their own EVM, so they can do things like console logs and.
00:53:01.200 - 00:53:32.356, Speaker E: There'S and also if you really are looking just for a local chain, you could just spin up geth or something and use it locally as well as for libraries. I tried Truffle for like a second and it had this weird concept of migrations and I thought, that sounds I yeah, exactly. And then I asked on Twitter, probably you helped me, Austin, and people said waffle. And then I tried out Waffles. Someone said waffle. Tried out waffle. Oh, man, it's beautiful.
00:53:32.356 - 00:53:34.860, Speaker E: So that's why I like waffle.
00:53:38.080 - 00:53:57.936, Speaker A: Short and sweet. Nice. Hopefully that answered your question. Tim, seems like you could start anywhere and then figure out what works best for you and then kind of adapt that into your workflow. Marcus, do you want to finish what you were asking before your PC dive? Sure.
00:53:58.038 - 00:53:58.304, Speaker E: Thanks.
00:53:58.342 - 00:54:25.320, Speaker F: So I'll just be succinct. Basically I would like to have a setup somehow set up environment to be able to test locally and interact with other DeFi projects or basically any other projects to have a fork of the main net and also to be able to have funds of various coins.
00:54:31.840 - 00:54:37.856, Speaker E: So you want actual main net state, like all the accounts and balances of the main net?
00:54:38.038 - 00:55:03.590, Speaker F: Yes, basically I want, let's say specific projects, but if you use Die and they have a lot of dependencies between each other and I would like to know how does it really behave in the real world. So I think I would need a state of the main net to certain time or right now.
00:55:04.860 - 00:55:17.870, Speaker E: Yeah, well, maybe we could talk offline because it sounds a little more complicated, but it sounds like you really have to do sync a node if you really want all that state. And then once you sync your node, you can just kind of use it locally. You don't have to have any.
00:55:20.720 - 00:55:51.960, Speaker F: Has this functionality. Somebody is writing that and I have used it. There is a functionality in Ganesh to do that. But if someone has a nice hag because obviously I don't have a lot of balances of all the certain coins I would like to test with. And basically currently I either have to buy all these coins on Mainet so that I have it in my local fork, or if you can think about some workaround.
00:55:52.780 - 00:56:06.250, Speaker E: Yeah. So once you disconnect yourself from mainnet, you can do whatever you want. So you can just sign and send transactions and give yourself stuff because you're the only miner on the network, right?
00:56:06.780 - 00:56:36.704, Speaker D: Yeah, I think so. I think you do a Ganache F. So it's had some limitations for me. I think we're getting close to having something that's really good at this. It totally is a problem though with DeFi composability, it's so hard to test what's really going to happen. I know there is the Ganache F and I know that once you've F'd off you can basically kind of have control of things. I'm pretty sure you could just take control of the zero account and send yourself some of those burned tokens.
00:56:36.704 - 00:57:23.252, Speaker D: Right. There's probably tokens in the zero address. You could just send yourself some of those. But I would also keep an eye on this whole F in the ecosystem because this is a problem and there are very smart people working on these tools. My guess is there's going to be a bibbler F soon that does this a lot better, but I'm not exactly sure. And just to piggyback off a little bit more, what we should be doing is taking these primitives, like an AMM or Lending, and we should be putting them on a side chain like XDI where we have value, where we have skin in the game. And it's super cheap to deploy and basically build the composability up there as a community where we can get in and kind of we can all andre a little bit.
00:57:23.252 - 00:57:40.170, Speaker D: We can all test in production because we're only deploying contracts that cost a fraction of a cent. And if something gets hacked, maybe we lose $10 or $20 or something like that. But with a testnet of value, but low value, I think that we could find this composability testing again.
00:57:41.500 - 00:57:43.710, Speaker F: Maybe can I have a quick follow up?
00:57:46.400 - 00:57:47.470, Speaker A: Sure, yeah.
00:57:48.080 - 00:57:52.796, Speaker C: I'd like to maybe get Dan to ask his question because we just have like a couple of minutes left.
00:57:52.818 - 00:57:53.996, Speaker E: So maybe hit us up.
00:57:54.098 - 00:57:58.368, Speaker A: Yeah, join the telegram if you haven't Marcus, and then we can cover it there.
00:57:58.454 - 00:58:00.832, Speaker C: Yeah, and then Dan, if you can just summarize quickly.
00:58:00.966 - 00:58:01.552, Speaker D: Yeah, sure.
00:58:01.606 - 00:58:30.410, Speaker A: So thanks everybody. This has been super awesome. So I'm just getting started. I have my own personal wallet that know, have coins in and traded. And so one of my biggest concerns is as I start developing, I don't want that oh, shit moment when I have my wallet, my own personal wallet, and I made a mistake and somehow I used my coins and it's all gone. So just wondering, what are the best practices to isolate your personal wallet from your development so you never get into that situation?
00:58:32.380 - 00:59:10.570, Speaker D: First of all, with development, I use a lot of burner wallets where I have the app just generate me some junkie PK right at the beginning, and I send that thing some local testnet. I rarely ever log into an app with my MetaMask when I'm working on it locally until it's about ready because I can just generate burners and Scaffold does that for me. But I think a second piece there is probably just like the bonehead thing of just like keep it in two different browsers, keep two separate metamasks. I'd like to hear what other people say, but basically I just have my only touch, this MetaMask if I know exactly what I'm doing account. And then I have a yolo MetaMask that I use for all sorts of stuff.
00:59:12.220 - 00:59:17.290, Speaker B: Yeah, I pretty much do the same thing where I just have different MetaMask accounts for different stuff.
00:59:20.300 - 00:59:48.130, Speaker E: I don't hold that many funds in MetaMask personally, so I'm just careful. And then the majority of my funds, I personally use Coinbase and their vault feature. But if it's a significant amount of funds, you want to get it off your browser and in your own cold storage or whatever someone else is custodying it for you. If you're concerned, just get it off of there. It's not probably not a safe place.
00:59:48.580 - 01:00:00.944, Speaker D: A bigger oh, shit moment is when you have a mnemonic that you're using for. Testing this idea of these burner wallets and you have this mnemonic somewhere laying around in your GitHub and you go get commit and all that money disappears.
01:00:00.992 - 01:00:01.750, Speaker A: That quick.
01:00:02.280 - 01:00:12.990, Speaker D: Someone pays $400 in gas to sweep all your money out of that mnemonic. So be very careful about where you're pasting these mnemonics within your code and private keys, too.
01:00:14.880 - 01:00:43.316, Speaker A: Perfect way to end this session with a word of warning, everybody. Be really careful about your mnemonics. Awesome. This was an amazing first session. It turned out way better than I think either Linda or I had expected. So thank you, everybody, for showing up and submitting your questions, bringing your live questions. And to Jordan Alexis Austin for sharing your time, your expertise, and all the pitfalls you've learned to avoid along the way.
01:00:43.316 - 01:01:09.180, Speaker A: We're going to wrap up here. If you haven't joined the Telegram, I believe there's links in the chat right now. But if you for some reason get kicked or can't find it, it should be in the calendar invite. I think we are for sure going to do some other version of this maybe next month, but we'll try to make this a recurring thing because it seems like it was really helpful. So join the telegram. Follow all of these people on Twitter. They're very intelligent.
01:01:09.180 - 01:01:21.628, Speaker A: We'll add their links in the Telegram. Did I say telegram or Twitter? Follow them on Twitter and we will be in touch either in Telegram and various other places.
01:01:21.724 - 01:01:23.424, Speaker E: Can I say one more thing? Do you mind?
01:01:23.462 - 01:01:24.050, Speaker A: Sure.
01:01:24.980 - 01:01:37.412, Speaker E: So I offer Mentorship. It's paid, but the first hour is free. So just go look at my know one on one. Way more in depth than this, if you want that.
01:01:37.546 - 01:02:02.940, Speaker A: Yeah. And I know Austin's doing a recurring onboarding session for Scaffold ETH. So hit him up. I'm sure he'll try to fit you in. He's probably got the next couple of weeks booked. I don't know how he does it, but you will definitely want to access some time with him. And one last shell from me if anybody is interested in diving in, a hackathon is a perfect place to get started.
01:02:02.940 - 01:02:23.700, Speaker A: So I'm with ETH Global running ETH Online, which is a three week online hackathon with a ton of great sponsors. So dropped the link a few times in the chat. So go check that out. Apply it's open to beginners, intermediate, advanced, anything. We'd love to have you join us for October. All right. My cat says bye.
01:02:23.700 - 01:02:27.456, Speaker A: Thank you, everybody, for coming. We'll see you in the Telegram.
01:02:27.568 - 01:02:29.380, Speaker C: Thanks, everyone. Bye.
01:02:29.960 - 01:02:32.880, Speaker D: Happy Thursday. Bye.
