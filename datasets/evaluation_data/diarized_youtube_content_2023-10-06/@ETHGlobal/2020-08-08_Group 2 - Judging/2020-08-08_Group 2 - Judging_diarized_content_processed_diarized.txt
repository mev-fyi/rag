00:01:03.840 - 00:01:44.908, Speaker A: It. All right, welcome everybody. We see a lot of the hackers joining in. So as kind of from some of the chat there is good morning, good afternoon, and good evening to a lot of you. And I am Kartik, one of the co founders of Eve Global. And today is day one of hackfs judging. So this is being recorded.
00:01:44.908 - 00:02:38.240, Speaker A: So a lot of you are going to watch this after. This is a culmination of the hackaths, four week long hackathon. And we're moving into our first week of day one after the whole week of judging. And for everybody who's on this webinar, I want to congratulate all of you as hackers for making it to here and submitting your project. And we're super excited to see what everybody does. So as a summary of how the last month has been, we've had 470 hackers from 50 countries and 19 different time zones participate in hackaths and work towards playing with technologies and ideas in the ethereum and the Falcon ecosystem for the past four weeks. And after all of their hard work, two days ago, on Thursday night, we received a lot of submissions for what everybody had done as part of their hackathon project.
00:02:38.240 - 00:03:44.064, Speaker A: And today we're kicking off the first day of seeing what everybody has done and going through the judging process with all of our teams. So after all that hard work, I'm super excited to announce that we've had the support from not only just these sponsors, but 132 submissions. And this is super exciting because that is a lot of projects from participants from all across the world and we can't wait to see what everybody's done and also share their excitement. So I want to congratulate to every team that has submitted a project and everybody who countlessly spent hours over the past four weeks working on, understanding and learning about what they can do with the technologies available to them. And also for this call for taking up the time in all the time zones you're in and being here to present what you've done and showing everybody else your project as well. So before we kick off the actual judging process, I want to move on to some of just the logistics of how this call is going to work. There's going to be 14 teams that are going to be presenting today to our judges.
00:03:44.064 - 00:04:43.960, Speaker A: And we'll have four minutes that each team is going to get for their demo and four minutes for a Q and A. And to kind of minimize any technical difficulties we have or maybe may have during the session, we've asked every team to pre record their demo and we'll be playing those pre recorded demos for our judges. And then we'll move into A-Q-A session, live with those teams to ask any questions or clarifications or give any feedback. And for everybody who's not familiar with the structure of this event, the rules were fairly straightforward every project that you see is a mix of individuals or a team. And if somebody was on a team, a team could have a maximum of five members. And the criteria for this process is simple all code that you're going to see today was written at the hackathon. And this is kind of where it's super interesting because we've seen everything that hackers have done and our developers have worked on is a result of the past four weeks of work.
00:04:43.960 - 00:05:52.620, Speaker A: And the biggest criteria that qualifies every team to be eligible for any price is that they must incorporate the tools and technologies from the Protocol Labs and Ethereum Ecosystem. So you'll see a lot of creative uses of decentralized storage and also smart contracts. And we're super excited to see how our teams have mashed up those two ecosystems to make something super useful. And a quick overview of how judging is going to work. We are going to have five categories for each team, and our judges will be scoring each project on how technical the project is, how original the idea is, and how practical the solution is for everyday use, along with how easy it is to use and understand. That kind of falls into how the UI and the UX of the application is, and if it's a developer tool, how well done the abstraction is for the Developer Use case and for any categories that we missed or anything that we kind of failed to outline. In any of the four categories above, we've had a general category called the wow Factor that lets us skew and highlight and do a catch all for anything that we may have missed.
00:05:52.620 - 00:06:51.312, Speaker A: And before we move on to the demos, I want to emphasize that this is actually not a competition, and I want to really focus on that for everybody watching this recording after, but then also our judges and our teams. The hackers are here to learn. We have a lot of beginners who are super excited to kind of share what they've learned over the past four weeks in each of these ecosystems. We have a lot of people who understand the Balcony Ecosystem, trying to play with the Ethereum slide and vice versa, and also everybody who is just super interested in seeing what they can do with Web Three and decent trust technology. So we're super mindful of everybody's skills and time they've kind of given and kind of the stepping stones they need to get to a place where they're comfortable with all these technologies. So we want to make sure that everybody's aware of this as well. And the judges are here to actually give feedback and actually understand and kind of encourage you to learn more or try different things and take this to the next level so you can continue working on it and just to kind of really nail that down.
00:06:51.312 - 00:07:33.330, Speaker A: Not everybody's trying to become a business, so a lot of the stuff you're seeing is a mix of experimentation and creativity, and we want these things to be fun. So nobody's going to be judged on how the ODS of somebody becoming a business is as part of their hack. So with that, I want to actually just move right into our first demo. So we have all these 14 teams that are going to be coming on today and doing the hard job. Our three judges, they'll be here for the rest of the call, giving feedback and understanding what everybody's done. So I want to welcome Juan Benet from Protocol Labs and Evan Venss and Portal Lambda from the ethereum foundation. And they'll be our judges doing all the hard work today.
00:07:33.330 - 00:08:20.114, Speaker A: So with that, I want to kick off our very first demo for today, and that is Team Cellplane. And with that, I'll welcome them onto our zoom stage, and I'll let them kick off with their demo. So team, sailplane, please take it away. Hey, guys, just a SEC. Our project for hackaths is named Sailplane, and it's a collaborative file manager. In the browser, Sailplane makes it easy for users to upload, share and collaboratively manage files. You can visit the website, and there's no need to create an account.
00:08:20.114 - 00:09:08.340, Speaker A: Everything that's happening is peer to peer. The two primary technologies Sailplan uses are IPFS and orbitdb. Both of these run inside of the browser tab. IPFS is used for referencing and transferring data, while Orbitdb is used to represent a mutable file system and handle concurrent writes. When you upload a file or folder to the website, it's added to IPFS. The output from this is added to a custom Orbitdb store representing a mutable file system. It exposes methods that allow us to move around files and folders and also calculate CIDs, which we can give to IPFS later to download the data.
00:09:08.340 - 00:10:09.100, Speaker A: When a user first navigates to the website, they'll be introduced with a little modal with some information. Once they're ready to start using the Web app, they can click on the Open Drive button. This shows them their first drive, where they can start uploading files. The first drive is a private drive, which means every file uploaded is encrypted with a random AES key. Before being uploaded to IPFS, we can preview images and audio files, and we're looking at supporting more file types for previews. We're opening up another tab, and we're going to copy the new TAB's user ID. This is a public key that we use for shared secrets and digital signatures.
00:10:09.100 - 00:11:12.560, Speaker A: We're going to give this key write access on our drive and also read access. We're going to copy the drive address and import it into the other browser tab. We can see it's syncing, and if we take a look at Manage users, we can see that we're now a rider on the drive. If we navigate to the File Explorer for that drive, we can see the files have synced and we're able to delete files in the File Explorer, we can also upload new files. We can preview them from the other side. In the File Explorer, we're also able to download files or folders, and we can share single files from encrypted drives. And we can do this by adding that files random AES key to the URL fragment.
00:11:12.560 - 00:11:49.630, Speaker A: There are some things we weren't able to show, so we'll have some links to the site on the last slide. These are some future improvements we have in mind for the Web app. We're also interested in making it easy for users to self host. Currently, there's no built in high availability nodes, and we're looking at the best way to do that. That's the end of our presentation. Here's a link to the source code and some public sites where the Web app is hosted. All right, that's it.
00:11:49.630 - 00:12:42.982, Speaker A: Awesome. We'll move on to our Q a. So, our judges, any questions or comments for the team? Very cool. I mean, what was the part that you spent the most time on? Technically, probably, I'd say, like UI and UX was a lot of it. And probably encryption for the encrypting files and public key encryption for files. And how are you storing how am I managing the keys? Right? Like, if I use those sorry, how am I managing the keys as a user? Is it like I use MetaMask. What happens is it's all in local storage.
00:12:42.982 - 00:13:05.940, Speaker A: So it creates a key. Orbitdb has an Identity Pub key pair, and we're using that for encryption. Yeah. So it would be kind of per device. Like if you think if you are in a different browser or something, it probably get a different key. Yeah. And we're going to implement exporting keys and importing keys as well, so that'll be easy to port over.
00:13:05.940 - 00:14:24.910, Speaker A: This is really cool, by the way. Thank you. So have you hit any limitations or any blockers during the development of the app? There's no streaming in browser right now, so we're kind of limited to file by file size. And I guess also the total amount of storage is probably limited to in that well, we've actually found that IndexDB on most browsers actually isn't really limited. We've been able to store multiple gigabytes of data with no issues. And from what I've read, Googling it, there's really no straightforward answer, but it seems that people have tried all sorts of file sizes in Chrome at least, and had no issues. There's also issues with Safari deleting index to be after not visiting a site, after a little bit, there's no way to recover keys currently.
00:14:24.910 - 00:15:09.180, Speaker A: Yeah. Have you considered back, something like that? Yeah, we haven't implemented it yet, but that's something we're interested in. How ready do you think it is for just broader users to start playing around with it and using it for their own for files that are under 100 megabytes, I'd say it's pretty damn usable now. In fact, actually when we were building that demo video, sending it back and forth, we couldn't use discord because of file limits. So we were just using sail plane. We just had a shared folder. We were sharing all our stuff through our app.
00:15:09.180 - 00:15:41.634, Speaker A: It actually works pretty well. The best kind of dog fooding right there. Yeah, that's right. I've thought about maybe in a month we could do like more public release, but we haven't really talked about it. Yeah, we just wanted to make sure you guys had a pretty good release. And it's pretty good at this point, but I'm sure within a couple of weeks we'll be really solid. Okay.
00:15:41.634 - 00:16:22.814, Speaker A: Something about the name of the project. There's these really high definition videos on YouTube of gliders people flying around in them and stuff and I just liked them. There's another name for them is Sailplanes. Amazing. All right, so that is our time and thank you so much and volunteering for being the first. So we have a lot more teams to go and we'll do is move on to our second project in this team. Iman's already on the chat but I'll be playing the video for her and we'll then have her join for the Q A part.
00:16:22.814 - 00:17:29.260, Speaker A: So let me just kick that off. And with that we'll move on to our second demon from web3 drive. The problem we are trying to solve is letting the user the ability to upload large files to IPS end to end encrypted from client side. So Nweb3 drive user can upload any file from any site download it. User can teach any IDs file with the ID. As long as it's not in the current workspace it will be added. In order to download it, he needs to add the encryption key to decrypt the file.
00:17:29.260 - 00:19:12.260, Speaker A: So this is the keyboard. It download the file. User can export his left file metadata, can delete the entire list, can import the list again. It user also can connect to web3 and sync his file data from three box. Sorry. So this file is on three box. If I want to import my last file, I can sync the file to three box, refresh my file, connect to three box.
00:19:12.260 - 00:20:29.860, Speaker A: Each file has a unique key to encrypt and decrypt the file. And I can see the file which is not synced with three box and file which is sync. If I deleted all the file here, as long as I'm connected to three box it will be removed from the correct workspace. And from three box nothing here they connect it, nothing will show and here nothing in the workspace and nothing in the three box account. So user can have the full control over his files and can share it with anyone. Thank you. Awesome.
00:20:29.860 - 00:21:06.536, Speaker A: So with that all, let's open up the Q A. This is really cool. I'm curious if you can share if there's only one list, or you can have multiple lists and share them with different people. Currently, the current implementation is that what you have stored in the workspace? It's only one bucket. It's like a one bucket or one nest. Also, the integration of three rocks is a really cool idea. Yeah.
00:21:06.536 - 00:21:43.990, Speaker A: How technically difficult was that? Was it that kind of a straightforward thing? Or was it kind of hard to move from the local storage buckets world into three box? It wasn't hard. The integration with three box wasn't hard. It was very good in the documentation. I was just wondering if you use the threaddb and hub the GS hub or using Cdpox. The only issue I found is that I'm not experienced with redux and react. That's big time for me. Thank you.
00:21:43.990 - 00:22:11.576, Speaker A: Thank you. So just to be clear, you're using Throughbox as like, the account and that's it, right? Did I miss anything? Yeah, it's accounting, I think. Like linking it to linking the file list. Sorry. Maybe I missed. Okay. Sounds like I had a rat.
00:22:11.576 - 00:22:44.410, Speaker A: Yeah, if you want to answer that question. I don't know for sure. I think, like, using the account and syncing the file list to throughbox, right? Yes. This is what I'm doing. I'm just syncing the account and I'm using the private thread, if I remember right the term. And I'm just incrementing what will be in this private file. Thank you.
00:22:44.410 - 00:23:22.254, Speaker A: Awesome. Any other questions? Or if not, we can continue to our third demo. Great. Well, thank you so much. I hope you continue to work on this. And with that, I'd like to invite Eric to showcase IPFS deploy for Java. Introducing IPFS Deployed for Java.
00:23:22.254 - 00:23:54.678, Speaker A: I'm Eric Lau and this is my project submission for Hackfs. First, let's look at the motivation. Java packages are typically deployed to a centralized repository known as Maven Central. This is the largest centralized package repository behind NPM. It requires a formal publishing process and it takes hours before your published package is available. Naturally, a decentralized alternative to this could be useful. So I've created some build tools to help with deploying and consuming Java packages on IPFS and Filecoin.
00:23:54.678 - 00:24:28.562, Speaker A: This allows for decentralized Java package repositories, permissionless, publishing of your projects, and instant deployment results. Let's take a look. Let's say you have a Java project, project Eight, that you want to make available as a package for other developers to use. This is the build file for your Java project. Simply add the IPFS deploy plugin into your build file in order to use it. Now we run the build command to deploy your project to textile. You can see the command running in the terminal output where it deploys the project to a textile bucket.
00:24:28.562 - 00:24:57.018, Speaker A: The bucket URL is shown at the end. This is the URL of your repository. Simply copy that and you can use it later on. Now let's look at archiving your repository to Filecoin. Simply run the build command which will archive the textile bucket to the Filecoin testnet. You can run another build command to check the status of the archive process. After a while, you see that the archive is successful and that the deals have been made with the filecoin miners on the Filecoin testnet.
00:24:57.018 - 00:25:32.534, Speaker A: We can verify the status of the deals by using a filecoin client such as Lotus to get the deal. State now that your Java package is published to IPFS and Filecoin through Textile. Let's see how you can use it in a consuming project. Let's say your project, Project B, has a compile dependency on Project A. However, Project A was written by someone else, and they've made that available on a textile bucket. Simply add the URL of your textile bucket in the repository section of your build file. Then you can run your build and you can see that Compilation is successful.
00:25:32.534 - 00:26:03.810, Speaker A: Notice in your build block that the dependency was downloaded from the Textile URL. Instead of using Textile buckets, you can also use Fleet Buckets through Fleek storage. Let's see how this works. Enter the Build command to deploy to Fleek storage. Include your Fleet Bucket name as well as an optional directory name. You can see it uploading to the Fleet Buckets, and when it completes, you can get the URL of the repository. Then in Project B, which has a dependency on Project A, paste the Fleet Storage URL and then you can compile it and Compilation is successful.
00:26:03.810 - 00:26:35.994, Speaker A: Another thing that you can do is to use IPFS URLs directly. In this case, this is just an IPFS protocol URL, and you can use it by adding a build extension in your build file for IPFS URL support. And you can run the build again and see that it downloads the dependencies directly from the IPFS URL. Now, let's talk about how this was made. This solution implements a Java build plugin to deploy projects to Textile or Fleek buckets. It achieves textile integration through the textile hub. CLI fleek integration through the AWS SDK for Java and Filecoin.
00:26:35.994 - 00:27:17.814, Speaker A: Integration through textile to filecoin archiving. As you see in the image below, your Java build can simply make use of this IPFS Deploy plugin to interact with Textile or Fleek, which then interacts with IPFS and or Filecoin. The next steps for this project are to add IDE extensions for development environments. This would allow for a better user experience and to add support for local IPFS nodes. This would allow for enterprise use cases. For example, you could have packaged repositories on IPFS nodes within company Firewalls. This build plugin was used to deploy itself onto a fleet repository, and you can use it right now in your Java projects to decentralize your repositories on IPFS and Filecoin.
00:27:17.814 - 00:28:14.348, Speaker A: Thank you for your time. That's really cool. Thanks. How are you thinking of the packages being managed in the long term? Have you thought about versioning and so on? Certainly with the fleek or textile links and so on, that might work because you can publish a new version and so on, but wondering if you've been thinking about yeah, so the way it works right now is you can publish multiple versions onto the same repository and it will be the same URL. Then you can just specify the version that you want in your build, but it's all on the same repository. It was super neat. I don't know if I have any questions though.
00:28:14.348 - 00:29:16.064, Speaker A: Okay, thanks. So what Java projects have you packaged so far? Is there anything that works well or doesn't work as well? Right, so this build plugin was I packaged itself and then deployed it onto fleek. So you can make use of this build plugin by adding the fleet repository which itself was deployed by awesome. Maybe I have a question. I guess in general you did this for Maven, but what is kind of the abstraction here that may let you do this thing for other projects and other sort of dependency? I mean, this idea could be used for any sort of dependency and build technologies. Right now, Maven is one of the major build technologies for Java, but it can easily be applied to other built technologies for Java or other programming languages. Got you.
00:29:16.064 - 00:29:46.430, Speaker A: Awesome. So if there are no more questions, I think we'll move on to our next demo. Sorry, one last question. Sorry. Can people start using it? Yeah, so it's available right now and as I said, it's available on the big repository. So all you do is add the repository and the build plugin in your build file and you can start using it. Fair enough.
00:29:46.430 - 00:30:25.290, Speaker A: Great. Well, thanks Eric. And with that, we'll move on to our next demo, and that is Planet Flare. And I think the team's already here, so I'll let them kick off with the video. Looks like we're not getting your audio. So I think if you can stop the share and then make sure that you press the audio button on Zoom, that'll help us align the audio settings. I think we should be good right now.
00:30:25.290 - 00:31:06.164, Speaker A: We're building a decentralized global CDN. You stop sharing now so we don't see the video, we have the audio. We're building a decentralized global CDN. To put things in context, let's quickly go over a traditional CDN architecture with the running example of a video streaming platform. Here, the platform hires a CDN such as Cloudflare to help globally distribute its content. The problem with this architecture is that it's a very closed market. To act as a CDN, you need to own massive data centers around the world.
00:31:06.164 - 00:31:43.116, Speaker A: As a result, pricing power is concentrated to very few CDN providers. Second, the data is not truly globally available for remote user in a location such as Argentina. There may not be a data center nearby, and that user has to suffer from poor performance. Instead, we present Planet flare, which has an open market. Anyone with a laptop can spin up a Planet Flare node and become a CDN provider. We also feature seamless integration, where the end user does not require any web Three technology to enjoy this content. And then the price is set by an equilibrium between the publishers and providers.
00:31:43.116 - 00:32:17.800, Speaker A: Because publishers need to bid for content distribution. It's also truly global, because you don't need massive data centers, and it's fault tolerant by default. It's built on top of IPFS, Ethereum, Lipidop, MetaMask, and Textile. Now, let's dive into the architecture. Over here, the video streaming platform submits its bid for content distribution on the contract. The content is wrapped in a textile bucket that is shared to providers via the contract. Meanwhile, providers can decide what to post based on their expected reward.
00:32:17.800 - 00:33:00.500, Speaker A: Over time, the providers cache this content and serve it to the end users. In return, the end users submit back proofs of receipt to the provider. Over time, the providers aggregate these proofs and submit it to the publisher via payment channel. The publisher verifies these proofs and sends the provider an authorization to withdraw money from the contract. Here we're using Planet Flare Coin, an ERC 20 token which is going to be used for all of Planet Flare's transactions. To get a better sense of everything and how it all ties together, let's dive into a demo. In this video, we'll walk through a basic EndToEnd demonstration of Planet Flare's capabilities.
00:33:00.500 - 00:33:45.140, Speaker A: The text document that we're currently showing is going to be used by the publisher and shared across Planetflare. First, using the publisher UI, the publisher will upload the file demo TXT to Planetflare. This has the effect of creating a new Textile Bucket, and with this bucket, a new bounty. So let's wait for the file to finish uploading. Once the publisher has finished uploading the file, you'll notice that a new bounty appears in the bounty table. This bounty table is initialized with a cost per token of one, which means that for each token or each file inside the Textile bucket, any provider that serves this bucket will achieve one Planet Flare Coin. Now, to verify that a Textile Bucket was actually created with these contents, we'll visit the Textile Gateway.
00:33:45.140 - 00:34:47.980, Speaker A: Now we'll take the new content ID for the file that we just uploaded on Planetflare and copy paste it into the skeleton HTML document that clients will see when they visit a website that's hosted by Planetflare. In order to alert a provider that they should be the one to help start hosting this bucket, we'll also copy the bucket ID into their UI. Now, in the console, you'll see that we just discovered this bucket, and we're ready to start hosting it. Next, we'll mimic the role of a client. A client is just a regular user who's trying to access content that's hosted on Planetflare. So we'll open the index HTML skeleton file and try to load it in a separate window, you'll see that the contents of that originally empty HTML tag just got populated. This is because we retrieved the file using the data PFC attribute on that tag.
00:34:47.980 - 00:35:41.610, Speaker A: As a client, we also want to notify the provider from whom we retrieved this content that we just got it, and that we should reward them using one of the tokens we originally received from the publisher. Now we see that the provider has one token which they got for successfully providing a client with one CID. Finally, we present this token to the publisher who verifies that the token was one that they originally provided to a client. And now we get paid. That's awesome. That's really cool. That's so great to see the whole flow working like a publisher actually loading it on a page and then getting submitting the results and so on.
00:35:41.610 - 00:36:15.536, Speaker A: Thanks. Awesome. Thanks. Quick question. Are the bounties I didn't see kind of like an actual contract hitting Ethereum at that point. I know that at the beginning, during the hackathon, you were kind of talking about posting these bounties on Ethereum and that might have been a scalability problem, but here I didn't see you needing to do that. Is that just kind of hidden somewhere in the flow or do you still have that? So the bounties are very much posted on Ethereum.
00:36:15.536 - 00:36:52.302, Speaker A: We've just hidden it away because it didn't show up in the MetaMask UI, but it's actually happening in a backend. Yeah. So creating bounties on Ethereum, but every time you want to get paid, that's done via payment channel. So that scales really easily. But you still kind of sort of sorry, go ahead, go for it. So you still rate limited by transaction throughput in Ethereum and on just how many transactions you can put. Is it how many transactions can you have in Ethereum per year? That's like the maximum.
00:36:52.302 - 00:37:42.242, Speaker A: Like, if you saturated all of Ethereum, that's how many files you can how many buckets you're rate limited on the number of buckets you can put up. You're not rate limited on how many times you serve that bucket. And you're probably also not rate limited on the bucket size. Right. So that's a really good scaling idea because then you can aggregate a lot of stuff into a bucket. That's a good did you implement the payment channels? Did you implement your own did you use something off the shelf? We wrote it ourselves, so we just implemented it on the smart contract and then we exposed an endpoint on the publisher side that the provider would call and submit the tokens to and they could increment it. And it works in the classic microtransaction way that you'd expect.
00:37:42.242 - 00:38:14.256, Speaker A: So you can batch 1000 tokens into the payment channel and then only make one call to the chain to withdraw your planet flirt coin at the end. And is this like a full time project for you going forward? I. Get that feeling. We're open to it, depending on feedback and guidance, seeing how the adoption is. So we're very much open to it. We haven't made a very hard decision over there just yet. Gotcha.
00:38:14.256 - 00:38:35.710, Speaker A: I mean, I assume that's partly why you used PFC instead of Ether or something like that, right? Yeah. Fair enough. Just want to make sure. Awesome. So if there are no more questions sorry, going no, I asked a bunch of questions, so I'm good. I really like the project. It's really cool.
00:38:35.710 - 00:38:57.664, Speaker A: Thanks. Yeah, this is really cool. Glad to see some familiar faces on this team. Awesome. So congrats on this awesome project. I hope you continue working on it. And we'll follow up with all teams, actually on how you can actually get support for continuing to work on this thing, whether it's from the Falcon Ecosystem or the Ethereum Ecosystem.
00:38:57.664 - 00:39:35.704, Speaker A: And we'll do that after. And with that, I want to call up Ryan, who will be walking over or talking over his demo, which is OSNAP. So let Ryan take it from here. Everyone. So this is a quick demo for OSNAP DAP. So the primary goal here was to create an alternative to using a lamp stack, but using decentralized technologies to where you can create something like Instagram or Patreon and deploy it quickly. So the main thing is that this is all open source.
00:39:35.704 - 00:40:48.500, Speaker A: So if you go to GitHub, you can see just the basic project where this whole thing was set up, and you can create your own clone and deploy it in just a few hours. Really? So the idea for this one is to create something like Instagram again, but we're using IPFS to host the content. We use Filecoin to pin the content, and then for any post that someone submits to this social network, we require that each post tips to other posts. So you can create something kind of like Iota, but bootstrapping off of the Ethereum Smart contract, which is available again just on this open source repo. So then to run through a quick demo, we will connect to either the local or the hosted gateway, and then we'll upload media directly into the application to where each media file has its own unique ID. So just pulling in some media off the hard drive, we get a multi hash. And again, this is either hosted from our local gateway or through the hosted gateway.
00:40:48.500 - 00:41:42.570, Speaker A: Then to upload our media to this social network, we again just enter the post IDs that we want to tip and how much we want to tip each post that we're connecting on this tangle. As a minimum requirement, you have to give it at least one over ten to the 18th of a tip. So then this will post through MetaMask and we'll wait for that transaction to process. Takes just a minute for everything to synchronize. Wait for it. There we go. So now our media is on this decentralized social media network and that's basically it.
00:41:42.570 - 00:42:33.252, Speaker A: That's really cool question too is we can run this again as a DAP, so we can pull it up just directly off of IPFS. So to host this network, there are no hosting fees, but everyone who submits content will get paid. Is that what drove the design decision that every submission has to tip two others? Yes. So anytime you put content into the network, two other people get tipped and you can't tip yourself. Although I suppose you could create other accounts. But it's ideally requiring two tips. This goes over time.
00:42:33.252 - 00:43:42.140, Speaker A: Content just by the unique sender. So I can look at just this address and any content that that address has submitted, or I can go to another address and see just the content that user has submitted and I can look at their content and we get something kind of like instagram, but with no hosting fees. And it scales peer to peer with the cryptocurrency incentives. And again, the cool thing is you can deploy this real quick, just a few hours and you have your own instagram. And just to understand kind of what the relationship here means, it's that a post that is tipping another post? Is there kind of a relationship implied there or it's just picking any two posts. Meaning is it meant to be kind of like derivative content or content that kind of wants to specifically select and highlight and tip that other content or is it just kind of like exactly. It's two other pieces of content that you support, basically, but that way you kind of get that exponential scale of tips.
00:43:42.140 - 00:45:03.916, Speaker A: How do you see this getting used in applications? Do you think it's going to be like all applications on one really large angle or do you think it's going to be kind of be application specific or maybe even community specific? I could imagine really the main purpose of this is just to showcase the source code so that you can get in, you can see how do you create a react app that's communicating with Ethereum? And how is this all submitting content onto this platform and be able to just look through a minimum viable project which does just that? The actual social network, I don't know how popular it would be, but for the code base, I think it's a cool starter. I think it's really cool and looks really cool. Thanks. It so if we don't have any other questions, we can move on to our next demo. And with that, I want to welcome Hadrian and he's going to talk about Iexec ODB P to P. Hadrian, take it away. I think you forgot to check off the audio.
00:45:03.916 - 00:45:41.514, Speaker A: So we're not getting the audio on your screen share. I'm sorry, I closed the video, so now I'm getting a hard time finding it again. No worries. Hack. Hello everyone. Welcome to my presentation of Ixecodb P. Two p.
00:45:41.514 - 00:46:25.370, Speaker A: I'm Adrian Kuboa and I'll be presenting you my work for this hack FS hackathon. So my work focuses on the IXe ODB. What is Theodb? It's the open decentralized brokering. So basically that's the protocol powering the exec marketplace. This protocol is pretty similar to zerox protocol that you may know, consisting of signed structures that are exchanged off chain that are signed and that can be sent to the blockchain for verification by a smart contract. It's decentralized by design, but the current implementation relies on a centralized point which is their exec marketplace. This is a place where people are publishing their order or where they are querying other people's order in order to make matches, what we call deals in the exec ecosystem.
00:46:25.370 - 00:47:10.006, Speaker A: So by design it decentralized, but sure we can do much better than that and have a more powerful layer for communicating orders. So this is why I decided to take this time the ACFS hackathon to try and build a prototype for a better implementation. The required features are obviously decentralization, but liveness efficiency and security are also paramount. We want to have a censorship resistant protocol that has low overhead on each node. So we need calabrate collection of invalid orders or past orders. And we need Byzantine fault tolerance. We don't want anyone to be able to publish bad orders or even worse, submit erase existing orders.
00:47:10.006 - 00:47:43.634, Speaker A: So it's not just another decentralized hash table built on top of Lip PTP. But this is more like blockchain aware. We want to have blockchain in mind and build our infrastructure with blockchain at the heart. So this is the initial design. I won't go over it very long, but you could see that I started by building my own distributed data store using Lip, two P go, six sub and a local data store with mongo. But it was not that efficient and it was very difficult to manage the replication and the search mechanism. It was very secure.
00:47:43.634 - 00:48:24.862, Speaker A: However, the later design uses Orbitdb for better functionality and also for the search capability of Orbitdb, which is very nice. One of the issues, however, is that Orbitdb is not blockchain aware. So I had to embed some of the checks into the code through the Iexec ODB core. And so you've seen that on one side there is the blockchain that is listened to, on the other side there is the distributed structure data store. And you also have an optional Rest API below that that can serve external nodes. So this is where modularity comes to mind. First orbitb is necessary.
00:48:24.862 - 00:49:18.114, Speaker A: It's the heart of the system. There are additional modules that you can enable through common lines which is blockchain awareness to have better vision of validity of orders blockchain listening to be able to share information coming from the blockchain to nodes like an order. Just being cancelled by its owner and arrest API, which is an option that is not available for browser node, but that allows external clients to connect to a node node. So this is a view of the network and you can see that we support both browser node and basic node JS node. And the node JS node are the one listening to the blockchain and the one serving terminals through the Rest API. This is a view of my prototype. On the left you've got the react application, the broaderified version that connects to the network and can show you the data store.
00:49:18.114 - 00:50:07.010, Speaker A: You can also inject new orders from that. And on the right side you've got both the node JS daemon running and another terminal just asking data through the Rest API. So beyond the Icaton, there is still a lot of work to do. Security is a major concern. So I will have to build a custom access controller for Orbitdb that is more blockchain aware. I also want to focus on the Lib B two P optimization, potentially creating a private network pirating from the IPFS network, testing, testing a lot and eventually moving the exec infrastructure to decentralized platform. So thank you for listening to me, thank you for all the organizers of the ICFs hackathon and I hope to see you someday when conferences start again.
00:50:07.010 - 00:50:53.954, Speaker A: Bye. Awesome. We'll let judges ask some questions. It maybe I missed it, but maybe I missed the reason. But was there kind of like a demo? Were you able to kind of get the whole thing working or did you get kind of pretty close? No, so I've got the whole thing working, but it's just like it's mostly a demon in the command line interface. So there is not much stuff to show. It's not like moving stuff.
00:50:53.954 - 00:51:34.414, Speaker A: It's not like depositing file. It's more like I was able to bootstrap an entire network of PT two P node. It was a major challenge to get it working and to synchronize fast because I don't know about other project, but having a client page on a browser just sync to Orbitdb through the P two P, having this sync under 1015 2nd taps, this was a major challenge. So it's not something that you can show very easily, but it's working. I think you can definitely understood. I do think you can definitely have demos with command line and browser pages and so on. And that would help everybody kind of.
00:51:34.414 - 00:51:47.334, Speaker A: And you can talk through the challenges while you show. It'll be like, hey look, this looks really easy. But in reality, this was a challenge to get this working. But anyway, so really cool project. Yeah. Excited for how it's going to get used. Yeah.
00:51:47.334 - 00:53:08.812, Speaker A: And also unlike maybe other presentation, something that was said during the initial presentation of the entire talk is that my objective was not to build something that will be useful for everybody, that it's going to turn to our product. It was more a stepping stone for me to move from the tierm ecosystem and learn about lipidp, which was something that was very complex to me before this akatong and kind of show how I grew into this ecosystem. So what ended up being your favorite part of the project? Sorry? What's your favorite part of the project? So I definitely love learning about P Two P. Starting my own decentralized network was very nice. Apart from that, like, Orbit DB was an interesting stuff to work with, but I think what was for me the most interesting was to personalize and customize the P Two P option to have a fast Discover network and be able to put IPFS instances and Orbit instances on top of that. So I think most interesting part for me was learning and discovering the Lip Two P ecosystem. It's great.
00:53:08.812 - 00:54:02.180, Speaker A: Well, thank you so much, Adrian, and hopefully you continue to work on this thing. There's a lot of cool concepts in there and it's a really cool mashup of what you can do with PDP and just mix that with IPFS and Ethereum side. So super excited to see that. And with that, we'll move on to our next project, and that is Team Omo Earth. So I'll let them kick off with their demo. So I think we're not getting the audio here, so if you would mind just sharing that with the checkbox on the Zoom setting, that would make it all good for us on the live stream. Yeah, sorry.
00:54:02.180 - 00:54:40.480, Speaker A: Perfect. When we are young, we dream to become superheroes and astronauts, but no one believes in our dreams. When we turn into young adults, we dream to become inspiring makers and leaders. But we are all alone, trying to survive in life. When we are old, we dream to become young again, to follow our dreams. But now it is all too late. And soon death will take us down.
00:54:40.480 - 00:55:48.046, Speaker A: We believe your dreams are the driving force into a new world of thriving abundance and open source creativity. We are all Homo sapiens and we are there for your dreams. My dream, for example, is to kickstart the universal basic income economy of tomorrow. Over the last year, I inspired Philip and Daniel to join my dream and it became our shared mission to empower everyone's dreams by open sourcing, one by one, all the tools and platforms which we all need to become successful entrepreneurs. And now we are ready to alpha test our first proof of concept while launching our own Dream as Test campaign, inviting you to join along our journey. Now let's start the campaign to validate our own dream. Hi, I'm Samuel.
00:55:48.046 - 00:56:42.070, Speaker A: And I'm Philip. I'm Daniel. Our dream is to launch Omo Earth with our first yearly Quantum Leap Summit on the 21st March of 2021 in the form of a one month eve global Omuprener hackathon where the entry ticket price is a weekly subscription. Like our summit project, every Omo campaign is divided into five leaps. Leap One is all about inspiring the first twelve fans and core supporters who contribute time in return for lifelong free access to our Summit. In Leap two, you can reserve your first event tickets for lifelong discounts. In Leap three, you start to pay your reservations and Summit subscriptions.
00:56:42.070 - 00:58:44.666, Speaker A: The best part about your subscription is that you don't need Fiat currencies as we have fully integrated the Circles based unibort of basic income. In the Circle's economy, everyone has their own personal tokens. Personal tokens become interchangeable through a web of trust and ripple like transitive path payments. During Leap four, Impact investors will be able to buy Circles for Fiat or other crypto. Leap Five will launch finally the Quantum Leap Summit Dow, where all early supporters can get ownership token and voting rights. It yeah, I think there's a lot to this platform. I wonder if you have, like, what is kind of working now kind of end to end.
00:58:44.666 - 01:00:27.490, Speaker A: So in the demo that was sort of creating a campaign, joining it, potentially chatting and so on, I'm guessing everything that was sort of on the demo is working now, or close enough. Yeah. Do you want to say more of a bit, maybe a bit more about how do you see this kind of like evolving over time in that do you think you're going to build out the whole platform before trying to start working, trying to get users through it? Or are you going to kind of focus and narrow down to a specific set of to maybe like a subset of the functionality, release that and then go from there? So our goal is to pretty much early make user onboarding around September, October with all the test nets and really try to get them into it and test all the functionality. And regarding the implementation, all I was showing you is already implemented on top of textile and fully interactive with mutations. And you built all of that during this hackathon? Yes, correct. Three of us, Daniel, Philip and me, because it's an ongoing I mean, the idea is old and we made many tests and interacting and trying our concepts out, but really starting and pulling it together was in this hackathon. Can you tell us more about that web of trust that you showed in the video? The web of trust is you mean from the Circle side? Yeah.
01:00:27.490 - 01:01:28.284, Speaker A: So Circles, everybody starts with their own currency, and you can only change them if you trust another person. When you don't trust someone, you can only get the tokens through a trusted yeah, I don't know how to explain better now. Maybe Philip has an yeah. It's circus is not our implementation, but a partner of us. So we use them for the payment in our system. So, for example, if you trust me, I can send you my tokens, but Samuel couldn't send you his tokens to you, but he could send you tokens with exchanging it over me. So, for example, somewhere want to give you ten tokens for the entry fee for the hackathon.
01:01:28.284 - 01:03:03.680, Speaker A: So he exchanges to me and I will give you my token you trust and I get the sample tokens I trust. In terms of kind of like the next steps, you kind of talked about how you're going to launch with those sort of goals in mind, but what does that timeline look like in terms of how long do you think it'll take you to achieve that? What was the first question again? You kind of talked about the next steps for the projects. I'm just curious, when do you think you will be able to sort of meet those milestones in terms of timeline for when others get to see it? So, like on Testnet Side and on Alpha Playground, we think we can around October, we can have the first users play with it and where we don't reset data anymore. Got it going. If you still have that question. Yeah. So I'd like to just dig deeper into how the project was built and what you liked about building it during the Acton.
01:03:03.680 - 01:04:25.676, Speaker A: Philip, you have something sorry, we didn't get the question. So during the like, what did you like about building it and which components or parts were the most enjoyable or did you have any pains during that project? The most enjoying part for me was creating those craftql layer on Textile. So we built an abstract layer there on textile where we easily can create the Schema model and consuming data over those GraphQL layer now and really on the fly. So that was great and big stuff. And for next big components, it will be creating those compiler views for creating those subcomponents and then directly pushing them into textile buckets and IPFS, of course. Great. Well, with that, I think we want to move on to our next project.
01:04:25.676 - 01:05:07.304, Speaker A: And I'd like to call up Group Facts and I'll have them share their demo. So I see two of you are here. If you're ready, feel free to share your screen. Hello. We are Team Eureka, and we present to you the facts. The Facts is a decentralized censorship resistant paper post model, news sharing and blogging mobile application. The core idea of this app is to have users post news articles and other users to verify the genuinity of it by adding threads to it which are in favor or against.
01:05:07.304 - 01:05:52.280, Speaker A: Users can add images as a proof for their post or their thread. Let us see how this actually works. First of all, you'll have to create an account by signing up. After signing up, you will be redirected to the home page, as you can see in the drawer of the app. After signing up, you will be given with an Ethereum address. This address will be used to map your post with your account and also to manage all of your transactions. You will also receive thousand The Facts token as a signing up bonus.
01:05:52.280 - 01:06:28.630, Speaker A: On the homepage. The thumbnail of the post and the post title are visible to everybody. If the user wishes to know more about that post, he can click on it, after which he will be asked to purchase that post. As of now, the default price per post is set to 100 tokens. He can only purchase the post if he wishes to view all the contents related to it. After purchasing the post, the user will have access to all the contents of the post along with the threads that have been added under it. He can also add a thread if he has some additional information related to that post.
01:06:28.630 - 01:07:22.090, Speaker A: By adding threads, there are chances of him receiving incentives for that thread. If the number of upvotes reaches a certain number, the transactions can also be tracked on Etherscan. The user can choose to upload a thread or a post. He can also choose to donate to it. By doing so, he is supporting the publisher of it. All of the transactions, again, can be tracked on Etherscan. The user can also view all of the threads and also choose to upvote or donate to them.
01:07:22.090 - 01:08:26.750, Speaker A: The user can also donate from the homepage. All the users are permitted to add a new post completely free of cost. After adding the desired contents when he submits the post, the post contents are post to IPFS through textile buckets. The IPFS reference, along with some more information like the user's address, are then pushed to a smart contract. All of the transactions, including the upwards and donations, happen through the same smart contract. Users also have the functionality to top up their wallet. As of now, there is no payment gateway attached to it, but in the production version, there will be a payment gateway to manage all the fiat transactions.
01:08:26.750 - 01:08:58.700, Speaker A: We can extend the idea by having the users to contact the publisher of the post to query more information regarding the post or actually buy it. The front end for this app was built with Flutter. Node JS was used for the back end block visuals, API was used for smart contract interaction. And last but not the least, textile IO's buckets for interacting with the IPFS. This is what we came up with in the last 30 days. It was a great experience building. Thank you.
01:08:58.700 - 01:10:24.250, Speaker A: That was very cool. I see you listed Flutter in your stack. Now, Flutter is built on Dart and pretty new. How did it work with Web Three integration? Do you need any libraries or did you have any problems there? So basically we just used Web Three for building the user interface. Everything on the back end happens on Node JS ExpressJS server. So do you use Web Three in the front end anywhere in Flutter? No. Do you think that's possible to move Web Three components to the front end or make API calls from Flutter to Web Three? Instance, I didn't really get the question can you please repeat it once again? So compared to many browser apps that use Web Three on the front end side with something like MetaMask or some other local Web Three provider, do you think something like that would work with Flutter or in your mobile app? No.
01:10:24.250 - 01:11:36.770, Speaker A: To interact with the smart contract we are using, there is a Block Vigil that is a provider. So basically it provides ready made APIs to interact with smart contract by basically just pushing it. So that actually eliminates the need for something like MetaMask or stuff like that. And we don't let users to handle their own Ethereum address to reduce the complexity because letting users handle their own Ethereum addresses sort of interface in the user experience for the app. So that's why we chose to handle the Ethereum addresses mapped to the user's account ourselves on the back end in a database, you touched a bunch of different parts in the stack of different stacks. That may be even better way to say it. What was the worst pain point that you experienced? Most frustrating thing.
01:11:36.770 - 01:12:04.482, Speaker A: Curious. I don't think there was any nothing challenging. It was the first time working with IPFS. This is how we got introduced to it through this competition. And the most challenging part itself was understanding and getting to know how it actually works and learning how to use it. Yeah, exactly. Like getting started was, I guess, the toughest part.
01:12:04.482 - 01:12:45.664, Speaker A: And then once we got in the flow, it was like things worked out great. Any other last questions before we move on to our next demo? Going once, going twice and we're good. So thank you so much. And with that, I want to call up Team Eat Sign to kick off and share what they made. So please welcome eat sign. You can start your screen. Hi.
01:12:45.664 - 01:13:25.520, Speaker A: This is Team E sign. What we have built in is hack FS is a decentralized version electronic agreement signing application built on Ethereum and five coin. Here we are. We have three team members in this hackathon, which is Porter, Jack and Xin. We present a decentralized DocuSign built with Web Three technologies. And this is how it works. User log in with MetaMask, upload and encrypt an agreement, then store it in filecoin, sign the agreement with Ethereum private key and a transaction.
01:13:25.520 - 01:14:32.260, Speaker A: Then invite other parties to do so. Ethereum's Smart contracts locks every activity of the agreement. Related parties can easily verify signatures, track activities and download a specific version of the agreement from filecoin. So let's directly dive to the and I say Alice login with my Musk and Powergate. So she started a new document and uploaded to the filecoin network. And let's wait some time for the filecoin network to seal the document. Okay? After that we can download it from Falcon and we can start to invite trusted party to sign the agreement with Alice.
01:14:32.260 - 01:15:55.760, Speaker A: After that, she will vote yes for her proposal. Of course. And then we can view all this history, all these activities in the history page. Okay, let's switch to Bob's account, same login and we can see the active document share with me and we can see Alice proposal and we can download the agreement Alice has uploaded and will the history. Okay, so Bob will say well, yes for it and that's all done. But he can also raise a new proposal by uploading a new version of the agreement here and the same procedure to it. And he will vote yes for her for his proposal.
01:15:55.760 - 01:17:13.288, Speaker A: And from Alice's point she will find her proposal being denied and she also had right to say vote no for the new proposal. And that's the major functionality in this demo. Esign is made of three main pieces which is decentralized identity, smart contract and decentralized storage. The logic we design is to make it easy to use all logic runs on smart contract and users explore no other servers needed. And the future works we're going to do is to deploy the application on the mainnight and we are going to expand it to a platform. We're going to build more applications such as paper read or Bit ads. And there's also some cryptographic issues we need to figure out, like how to sharing a key with a smart contract but without linking it to non related people.
01:17:13.288 - 01:17:44.132, Speaker A: And we're trying to use nonfundable token to enable intellectual property trade activities. And that's all, thanks for your time. Wow, this is really cool. Sorry, I don't know if you're are you actually done or is it just your demo? Thanks. I think we're in the Q and A. Yes. Okay, good.
01:17:44.132 - 01:18:07.230, Speaker A: Yeah, this is really cool. Was somebody talking? Sorry. Yeah, thank you. I think there's a lot of lag. Sorry, I'll try waiting a little bit more. Yeah, I think this is a really cool platform. A ton of functionality, really good idea.
01:18:07.230 - 01:19:10.000, Speaker A: I think the functionality is there. There's a lot of functionality there which is awesome to see. I think the UI is functional and good, but I think the UX and placement of buttons and so on needs to get a lot of polish for it to become like a really nice, good, usable product. But I think you have the core functionality there and that's kind of some refinement that you need to do. I think you are also probably trying to do too much at once and so maybe narrowing down the product focus for the beginning might help you find a really core great use case and then from there expanding out. So, for example, the IP trading NFT stuff, that sounds like a really cool idea, but I almost would say it's a different project that you might relate to this one, but it's kind of like a different I would probably not try to just bundle everything in and try to kind of decouple that to some extent, but. Yeah, I think it's a really cool idea and maybe attaching to identities to some of the identity providers would be really useful because knowing that a particular identity signed a particular document, that's where it starts becoming really useful.
01:19:10.000 - 01:19:42.956, Speaker A: Kind of managing a lot of the keys is kind of complex. Yeah, that's actually what we're going to do. Maybe in the next hackstone we're going to build more applications between Ethereum and Falcon. That's what we do. Yeah. So for the non fungible token part, our original idea was to kind of make this project as a basis for a future project. So it's not necessarily building directly on this one, but more kind of using it as a starting point.
01:19:42.956 - 01:20:24.036, Speaker A: And also for the UX thing, I do apologize, I'm a mobile developer and I had to learn react in like three weeks from nothing. Sorry. I think the functionality is all there and I think you work through a ton of really hard challenges very quickly. These platforms take years to build and you guys did an amazing job putting it all together. I'm just saying as you refine the product and focus, you're probably going to play. If you stick with this and you build out this platform, you'll probably refine a lot of the product usability to get it to a point where it's kind of a very smooth flow, right? Like if you use something like DocuSign or hello, sign out of those things, it feels really clean and polished. There's a lot there but it's just kind of refined.
01:20:24.036 - 01:21:15.320, Speaker A: I agree, I agree, definitely. Yeah. So it sounds like you're going to be building other things later on, but not necessarily this one or are you going to continue with this one? Because I think it's a really cool idea. So you should consider continuing to do this because I think there is a need for being able to sign agreements with Web three identities and keys and so on and there just isn't a solution right now. And that's a cool idea, but it might not be the best idea you can work on. So I don't know. So one question, have you thought about batching these seniors or combining inputs to reduce the friction or work around scaling problems? Sorry, I didn't hear your question clearly.
01:21:15.320 - 01:22:06.440, Speaker A: So I know of some other documents signing projects that try and combine these inputs to reduce the amount of data that needs to be submitted on chain or needs to be communicated. Have you thought about optimizing this far? Yeah, so I think we've already tried to minimize the amount of data stored on chain so that the user doesn't have to pay a huge gas fee. The chain really is just for record keeping. All the actual documents are relying on IPFS and filecoin. Yeah, and I'm guessing the signatures too, right? Like the signatures go on a thread. I don't think the signatures make it on chain. I think they just make it onto.
01:22:06.440 - 01:22:35.120, Speaker A: I think they're off chain. Right? Maybe I missed that. Yeah. So the quote unquote signature here is basically you have a history of you can see that. So this person voted yes on this version of the document with their private key. So that's like their signature in this case, if that makes sense. So it's just like a record or an event on the ethereum blockchain.
01:22:35.120 - 01:22:55.560, Speaker A: Okay, got it. So it is like an actual full transaction. So there is kind of like a proposal and a full transaction flowing on the chain. That's cool. Yeah. And the file is stored only on the Falcon. Awesome.
01:22:55.560 - 01:23:29.270, Speaker A: Well, thank you so much each time. And we'll continue to our next demo in the next team, and that is Project Phone World Workshop. So I'll let Jay and the team take it from here. Randy, go ahead and start the video. Thanks. Hello. I'm Jay Carpenter, representing the phoneword workshops team in the Hack FS 2020 event.
01:23:29.270 - 01:24:16.220, Speaker A: We have created your global directory. We asked ourselves, what is missing in the decentralized web? What could take the decentralized web and move it to the next level? We have this tension between machine friendly and human friendly addressing. What if the two were compatible? In the past, we've had directories like telephone books that combine machine friendly with human friendly addressing. In web one and two, we've had the domain name system that does the same. Decentralized web has yet to create such a construct in our directory. We kept it as simple as possible. We're combining public keys with human friendly addresses and indexes.
01:24:16.220 - 01:24:49.596, Speaker A: We're using hashing and bash scripting. We'll have a marketplace for lookup numbers so that they can move to the highest and best user. And most importantly, this will be Swiss neutral nonproprietary to ensure the highest degree of trust and permanence. It works like this. We can take an easy to remember phrase like 1833 Hollywood and pair it with a machine friendly peer ID like this IPFS peer ID. Here's our Global Directory in GitHub. Let's take a look at an example.
01:24:49.596 - 01:26:08.500, Speaker A: Using dial 1833 Hollywood, we'll show a peer connection, a pub subtopic using that same peer Identifier and a connection list. Normally, when we're connecting to IPFS peers, we use this long string, which is machine friendly. But now we can add an easy to remember address and use a bash script like bash dial 1833 Hollywood and get the same result. So we can take that same easy to remember identifier and we can subscribe to pub subtopics that are using that identifier. And we can voila communicate over pub sub and lib P to P using an easy to remember topic. Let's take a look at how we can create contact lists that have a lot of flexibility and power. So if we do this bash dial eight three three Hollywood, we can create different contexts like Twitter.
01:26:08.500 - 01:26:52.960, Speaker A: We can create email contexts. We can even create cryptocurrency contexts like ETH and File, storage contexts like Filecoin, and we get the same thing. Our team is made up of seasoned It professionals. We're looking to introduce new decentralized addressing like Quad One. Ethereum quad One protocol labs 1000 filecoin. Quad Nine textile. And we're extending an invitation to hack FS participants to create your own human friendly, decentralized addresses using the Phoneword Workshops Directory.
01:26:52.960 - 01:28:27.458, Speaker A: We're also extending an invitation to hackfs sponsors to become inaugural registrars. With the Phoneword Workshops Global Directory, you can connect the way you want to connect. Here's our connection address on PubSub with Phoneword Workshops Global Directory, we can take the decentralized web to the next level, join us Web and move it to the next. Any questions from our judges? Yeah. How did the registry end up working? I know there were a lot of ideas while during the hackathon just kind of curious, how does one register a name and assign a phone number to a value? So initially what we'll do is we will take pull requests on our GitHub account where you can request a particular phrase or lookup number and also include your peer ID with the connection information. That's how we'll get things started. And we're also having workshops which will start next Thursday that'll basically be an introduction to people as to how they can get started with this.
01:28:27.458 - 01:29:07.374, Speaker A: Does that answer your question, Juan? Yeah. So it sounds like the registry is just managed through GitHub, right? Yeah, and it's posted on GitHub. Now there's only two days worth of data on it, but part of the next steps is redoing the registry so it's easier to update and quicker to add, basically registrations. There was nothing in there. Go ahead. I'm sorry, I was going to say there's something in there about reassigning the most valuable namespaces. So basically, if somebody went dormant, you would reassign them on GitHub or something.
01:29:07.374 - 01:30:03.150, Speaker A: Or initially, people will be able to choose two addresses. One will be picked randomly and the other one they'll actually be able to choose. So, for instance, one of our team members wants Quad One or one one blockchain, so they'll be able to get that. And then if they want to immediately resell it, they could put that on the market and resell it to somebody else, if that makes sense. And somebody else wanted one one cryptocurrency and they can get that and they can build something behind it or they can sell it, whatever. Does that answer your question as to the reassignment and so forth? And we can give this a try if you'd like to, like right now. So I'll put this in the chat.
01:30:03.150 - 01:31:06.050, Speaker A: Here's an example. So if you have an IPFS, the ability to start up a daemon, you can start it up with that first command and then open up a new tab and put in the subscribe to the one One one Phone Word Workshops and then open up another tab and you can send a message. And if anybody's fired up a Damon yet, I'll be happy to send the first message. I'm going to send a message and hopefully somebody got it. I can send that again if so anyway, it should work. It works. Now, the idea was to keep it as simple as possible, the registry as well as the functionality.
01:31:06.050 - 01:31:31.798, Speaker A: And it's just been a blast to do this. And I want to thank everybody for putting on this event because this would not have gotten to this point without this event. Any other questions? Very cool. Awesome. Well, thank you. Yeah, this is cool. Thank you, Jtman.
01:31:31.798 - 01:32:02.248, Speaker A: We got two more projects to go from our side. And with that, I'd like to invite the second last project, and that is LiveLike and think Simone Pierre is already here, so I'll let him kick off with sharing this video. Hello. My name is Simopia. This is my ACFS submission. I'm doing decentralized live streaming. So this is Brave, my browser.
01:32:02.248 - 01:33:05.250, Speaker A: It's equipped with IPFS companion and also another extension to play HLS live stream. So we just need a URL. I have here a HTP server that I made which is going to be serving the playlist used to view the stream. But right now you can see we're not receiving anything. So I'm just going to start streaming. This Http server is listening to a gossip sub topic. It is receiving CIDs of dag nodes, custom ones which contain all the video segments, CIDs plus the previous dag nodes, so that the stream can be linked together.
01:33:05.250 - 01:33:46.672, Speaker A: So as you can see, it's receiving. Now I will copy paste the URL. I'm going to mute myself. So as you can see, it's downloading the Master playlist which is used to select the stream variant. And then it's downloading the stream variant playlist. Every segment is fetched through the IPFS gateways. So this is it on the viewer side, on the streamer side.
01:33:46.672 - 01:34:43.948, Speaker A: Now I have OBS, which is recording this video and streaming at the same time. On the left, this is FFmpeg, which is transcoding the video from OBS into four different variants. It is outputting those video segments to another Http server that I made. This server is receiving the video segments, it is adding them to IPFS, creating a dag node to link the four segments plus the previous dag node. And it's publishing the CID of the latest dag node to the same topic as the viewer. And this is how it works. Thanks for listening.
01:34:43.948 - 01:35:33.500, Speaker A: Bye. Love the background and we'll let the judges ask any questions. So I'm testing. Did you try different resolutions, bitrates? Is there some limits there or how was that experience? I use the default four variants. For example, Twitch TV used those four variants. I just use the same codec and all the same thing, just to go faster. But it could be anything, really.
01:35:33.500 - 01:36:16.990, Speaker A: Yeah. This is really cool. It's a really cool idea. Thanks. Maybe I didn't catch this, but how do you expect kind of the scalability of the whole flow to work? Meaning maybe can you talk about through what happens if thousands of nodes or tens of thousands start following the same stream? Yeah, that's a big question. I'm not super sure how it works. Maybe private networks or I don't know, the four weeks I were used to learn everything.
01:36:16.990 - 01:36:55.490, Speaker A: Yeah, so pretty cool. Awesome. Sorry, go on. No, I was going to say yeah, I think if you're using gossip sub, which I think you are, then it should kind of scale out nicely. It just might be a question of like yeah, that would be great to test. Right? Try live streaming something and see how many people and different things you can get watching us. The latency too is very important when you're live streaming.
01:36:55.490 - 01:37:44.930, Speaker A: Just see how big is it or how low we can get. Actually, maybe it would be even better than what we have now with YouTube or Twitch or the other platform. Maybe it'll take a lot of optimizing to get there because they work really hard to immediately blast out content to a bunch of edges. Maybe use with a private network, I don't know. Are you going to keep working on this after the hackathon? Yeah, at first I was supposed to add chat, but it's too much. I just focused on the video part. But obviously chat and Monetization too.
01:37:44.930 - 01:38:19.566, Speaker A: That would be cool. That's another kind of awesome. May I also want to see, with all the kind of transcoding and so on, are you using Lifeyear or did you do it all yourself? Yeah, I think you're using Fmpeg and so on directly. Yeah, it's called transcoding. Yeah, got it. Great. Well, thank you so much for a really cool demo.
01:38:19.566 - 01:39:26.910, Speaker A: And with that, we'll move on to our final project for the day. And I admit I looked at this ahead of time and I'm super excited about this one. So I'll let Leon and team talk about the IPFS FFPs demo. So take it away from here. Just making sure that you're about to share the video flutter. What if I told you there is an app jing? This is the assistant. Wait for the boss to pitch.
01:39:26.910 - 01:39:55.350, Speaker A: What if I told you there is a PowerPoint on the market? Just kidding. We have a product called IPFS FPS, which stands for Interplanetary File System. First Person Shooter. The unofficial decentralized game that can be played on Earth and or Mars. We're working on it. Background Story we wanted a game on IPFS. Not just any game.
01:39:55.350 - 01:40:26.354, Speaker A: We wanted a game with 3D graphics, cross platform compatibility and a physics engine. DApps nowadays are quite simple. They have an input box, a button and maybe a smart contract. We did more research and found Unity. So the question now is is it possible to have Unity in IPFS? We searched online for examples and or documentation, but we couldn't find any. So we spent the next two weeks in the hackathon to see if it's possible. Long story short, it worked.
01:40:26.354 - 01:40:43.960, Speaker A: And here's the demo. Here's a demo of our site. Just visit IPFS FPS zill. If you don't have a chrome extension, then add in Sh. Here's the homepage. If you want to start playing, click here. If you want an overview, here's the high level.
01:40:43.960 - 01:43:06.380, Speaker A: It uses unity. GitHub, Fleek, unstoppable domains, pinata and IPFS. If you want to read the full documentation, then just click here. The team is me, Leon and Randy, the designer. We also made a game trailer for you guys, so check it out. It's you. Have you guys enjoyed that? I think everybody thoroughly enjoyed that.
01:43:06.380 - 01:43:41.508, Speaker A: But I'll let our judges ask the questions about how the game works. Great game. Very nice. So is there some kind of leaderboard or some kind of score system to have competition in the game? Yeah. So, quick story. We had a speed run at the top, a timer at the top. To make things competitive.
01:43:41.508 - 01:44:19.824, Speaker A: We shared it with a couple of people, and things got really so that's just a side story, but we've had tons of features kind of listed out, one of them being a leaderboard, one of them being a multiplayer, as Juan mentioned, having actual tokens involved. So there's a lot of features we can add onto it. For this hackathon, specifically, we wanted to keep things simple. Our main goal was to see if we can get Unity on IPFS, and it turned out okay. So tell me about putting Unity on IPFS. Was it hard? What were the challenges? I'm curious. Yep.
01:44:19.824 - 01:44:56.156, Speaker A: So if you want the whole spec, we have a documentation, so you can go to the site. There's a button called Read More, something like that. You can go in and read from A to Z how to set it up. But in short, you install Unity, create the game, export it. There are certain configurations. Save it onto GitHub and then hook fleek into GitHub, which does CI CD stuff, and it spits out a CID. But to make it more human Readable, we added unstoppable domains and Pinata for meta tags and long term storage for the leaderboard.
01:44:56.156 - 01:45:34.480, Speaker A: Did you try doing like a textile thread or something so that everyone could see it? Or is it just kind of like a speed run set, or is it just kind of like a leaderboard out of the game? I think we'd like to integrate more decentralized tech into it. So yeah, something like Orbitb. There's so many different options. I'll give you another example. Someone reached out to us. They realized that it's possible, and they reached out to us and said, is it possible to have prefabs into these games? Maybe in an hour or so, I'm going to write an article on how to set that up and make that all decentralized so there's so many different options. This is just the beginning.
01:45:34.480 - 01:46:40.724, Speaker A: Yeah. I think that the big potential here is that there's a lot of kind of dev tooling to write between gluing all of these pieces together, right. So the distribution flow that you're talking about can work, and the kind of features and functionality to connect other games are probably very similar across a large set of games. So maybe by category, maybe the degree of latency that you need in multiplayer or the amount of data that you need to send between parties or whether they use NFTs and all that kind of stuff. And I think you can probably translate now that you've kind of built the game, played with all of those things, seen what it looks like. I'd recommend kind of doing that a few more times for a few different games and for a couple of other kind of things and then thinking of building a dev tooling that makes that whole process extremely easy, where you have just one library for a particular kind of game. Right? So if you wanted an FPS like you have, that is mostly a single player game, but it has maybe a leaderboard or something, then there's like a standard distribution and it's kind of distributed in this way.
01:46:40.724 - 01:47:12.910, Speaker A: It's kind of like an easy website that guides you through how to deploy your game this way or how to build it. Yeah, I think right now, all of the tooling is there for people to build the kind of stuff that you showed. But learning it and gluing it together is hard, and that's kind of like what you achieved through all of this. That kind of suggests making it very easy for other people to do. That might be a very useful thing out of this. Yeah, definitely. To answer your question, Evan, the hard part was gluing everything together, as Juan mentioned.
01:47:12.910 - 01:47:46.410, Speaker A: So it took us about two weeks to actually figure it out, but we made sure to document it because we couldn't find anything. And then after that, we shared that documentation with other people and they were able to spin it up in maybe half a day. So a fraction of the time. Have you made games before, or is this just like something that seemed like New Frontier tried out? Yeah, so the second hardest part was learning Unity. So I just learned it maybe five weeks ago. Cool. Awesome.
01:47:46.410 - 01:48:54.930, Speaker A: Great. Well, that was a really cool demo and a really good end to our judging session for today. This is day one, and I want to thank every single team that took the time today to present and talk about what they did when all of our judges were asking really interesting questions and kind of being excited about it and giving their feedback on all the projects. So before the teams go, I want to just make a quick note that I think a lot of you have been contacted individually, but we are making a mini documentary on this whole event. So if you want to be one of the projects to be interviewed and be included in the documentary, there's a link in the information channel on Slack for the attendees, so just make sure you go there. Right now, we're hosting these mini interviews as we speak, so if any of you who are still here and are interested in that, I'd encourage you to just check that out and join that call for a few minutes. So with that, I want to end off today's session, and I want to thank all of our judges and all of our teams, and also for everybody who stayed up time zones to be here and share what they built.
01:48:54.930 - 01:49:14.590, Speaker A: And with that, I'd like to thank everybody here, and we'll see you all tomorrow for day two of judging. So thanks, everybody, and hope you have a great rest of the weekend. Thanks, everybody. This is awesome. Great to see everybody's demos, a lot of really cool stuff. Web three is coming. All.
