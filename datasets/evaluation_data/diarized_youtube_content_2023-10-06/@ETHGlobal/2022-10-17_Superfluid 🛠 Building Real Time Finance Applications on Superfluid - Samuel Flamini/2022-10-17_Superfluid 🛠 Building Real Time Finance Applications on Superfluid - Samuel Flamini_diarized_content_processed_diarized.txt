00:00:06.250 - 00:00:30.882, Speaker A: All right, so we will get going then. Thanks to everybody who is here. It's fun to be in Bogota. I think all the LATM events that I've been to have been great so far. The communities here are excellent. But yeah, I'm excited to get started and talk you guys through Superfluid and also show you some examples of how to actually get started with super. Superfluid with code, right? So let's go through building on superfluid at ETH Bogota.
00:00:30.882 - 00:01:38.682, Speaker A: So what is Superfluid for those of you that don't know? Well, it is a protocol that enables something we like to call real time finance. So the one big way that this manifests itself is through something called money streaming. So Superfluid enables these money streams, which are digital native programmable cash flows that let you stream money with no capital lockups in a way that is 100% programmable and on chain. So at Superfluid, we like to say that the Internet is to information what blockchain is to value, right? We believe that we're in the very early innings here of new forms of finance that will bring this old world of finance into the age of the Internet. And one way this manifests itself is through the way that payments work for things that have to do with time, right? So services, right? So if you think about services businesses, if you're an employee, you're kind of in the services businesses, business as well. With services, the way these work is that they flow in real time from a provider to a client, right? Netflix is something you watch in real time. Your work is something you provide in real time.
00:01:38.682 - 00:02:51.074, Speaker A: However, the issue is that the payments for that value are disconnected from the way they're actually being provided, right? So you work through an entire month and you get paid at the end of the month. Why shouldn't you be getting paid every second? So let's dive into money streaming a little bit more, right? This thing you're seeing there in the bottom right hand corner of the screen is a live money stream that's ETH being streamed on a testnet. And you can think of these as continuous payments. We are used to a world of discrete payments. What if we could make them continuous, right? What if we could create this direct link between the service provision and the value transfer in return for that service? And the other thing that's cool about this, because it's all on chain, it completely gets rid of any delays, unpayment risk, or any intermediaries, because it's all mediated through blockchains and smart contracts. So how is money streaming possible? Well, we built in an EVM compatible smart contract framework to make this happen, right? And it's made up of three pieces. So we'll get into how the heck this thing here is happening in the bottom right hand corner, but it takes some building up to it.
00:02:51.074 - 00:03:44.302, Speaker A: So these three pieces are Superfluid agreements. Super tokens and the superfluid host contract, which brings everything together. So what are agreements? Well, these agreements are peer to peer financial relationships that are open ended and perpetual between two accounts, or potentially more than two accounts. When I create an agreement to stream you money, what's happening is I send a transaction on chain which agrees to stream you a certain number of tokens per second. And that amount of tokens that I'm streaming you per second is actually built directly into the token balance. So we'll get into how the token balances work in just a moment. But what's happening here is, within the constant flow agreement, which is the main agreement that facilitates all this money streaming, you define that flow rate, and money begins flowing immediately in real time from you to the receiver.
00:03:44.302 - 00:04:02.746, Speaker A: Right. The sender or receiver can be smart contracts. It doesn't matter. You're just executing a transaction and money begins flowing in real time. So literally, this right here, these simple lines of code, CFAV One, create flow receiver, token, flow rate will open this money stream. Right. It will create this in the end.
00:04:02.746 - 00:04:43.954, Speaker A: As a developer, it's quite simple, but to understand how it works, we got to go a little deeper. Right. So this is all great. You might understand this concept of an agreement. Yeah, I kind of get that. But how are you doing this without calling transfer? Like, every millisecond? How is that not how this is working? And the way we get around this is by building an extension onto the ERC 20 standard, right? So we built an extension onto the ERC 20 that comes with all the stuff you're used to approve transfer from symbol, all this stuff. But the way balances are calculated will take into consideration all of the agreements you have outstanding for any given token.
00:04:43.954 - 00:05:21.950, Speaker A: Right. So within that balance of function on a super token contract, there's another call that's made to something called to a function titled Real Time Balance, of which takes into consideration your real time balance. Right. And your real time balance is really just an aggregation of all of the money being streamed to you and all the money you're streaming out to give you a kind of single net flow rate. So let's dive into these a little bit more. Right? Again, ERC 20 compatible plugged into the protocol. And what's cool about it is they're usable anywhere in web3, right? So we know that interoperability is super important within this industry.
00:05:21.950 - 00:06:03.310, Speaker A: So for existing ERC twenty S, or even native assets like ETH, AVAX, Maddox or other native assets and other chains, we've built wrappers. Right. So you can go wrap USDC, like, actually, right now, my salary is paid using a wrapped version of USDC called Usdcx. If you see the X appended to the end of a symbol, it just means that it's a super token. It's a wrap version of that existing asset that enables all of the streaming functionality, right? It's a wrapper super token. There's also native super tokens whose supply is 100% streamable. So if you know about Superfluid, you learn about superfluid today and you decide to launch a token, you might opt to just deploy it out of the box with all these features so you don't have to wrap anything.
00:06:03.310 - 00:06:39.962, Speaker A: That's an option too. There are several of those out in the wild that have a lot of usage. That's another option. But the key thing to keep in mind is this real time balance, right? It's an aggregation of all the incoming flows and outgoing flows. To create this kind of single number, the protocol needs to keep track of to figure out how many tokens you should be sending or receiving every second. If anybody else has any questions on that, I will stand out there right outside the door and answer as many questions as you guys have just to make sure we really drill that into your heads. Because I know it can be kind of weird at first, but it is critical to understand if you're going to interact with superfluid.
00:06:39.962 - 00:07:09.306, Speaker A: It okay. The final thing here that's important for understanding how the protocol works is this thing called the superfluid host. The superfluid host brings this all together. It's like the brain of the protocol, right? So it's made up of some whitelisted agreements. Again, the main one is that constant flow agreement, which defines how balances can be changed during using that constant flow formula. It also is something you call when you deploy a super token. It supports something called batch calls, which lets you just batch a bunch of superfluid related operations into a single transaction, which is kind of helpful.
00:07:09.306 - 00:08:59.330, Speaker A: You can do things like open 150 streams in one transaction, other crazy stuff like that. And then it also serves as a registry for something called a super app, right? So what is a super app and why is that interesting? Well, the other interesting component of Superfluid is that it is programmable. You can build contracts that are aware of these streams coming in that have callbacks, which can automatically run whenever a contract starts receiving tokens, whenever those streams are updated or whenever those streams are deleted, right? So this opens up all kinds of really interesting connections between smart contracts that forms a really interesting network that I'll show you a visualization of in just a second. But to understand these, you have to keep in mind that all of these callbacks here, this after agreement created thing you see in the bottom, right? These are called by the superfluid host contract because when you deploy a super app, you just register it with that host contract, which is the brand of the protocol, right? So that the host contract will know, hey, this contract that is a super app is receiving tokens call. This function with your arbitrary logic in it to do something else cool, right? So again, there's lots of super apps deployed right now and they all kind of do different things. One big one is called Ricochet Exchange, which allows people to stream funds into a contract and effectively dollar cost average into different right? So right now I can go DCA from USDC to ETH on polygon and all that's happening in real time, right? So it's just like this loop where you have a contract that's receiving funds and sending funds out. And what this looks like when you start stitching things like Ricochet and these other contracts together is this you get this really crazy network of cash flows where every single green ball there is an account, whether it's a smart contract or an EOA.
00:08:59.330 - 00:10:03.702, Speaker A: And all the connections between them are cash flows, right? So for you here that are considering building applications on Superfluid, you have a gigantic network of cash flows to make use of, point them into new places, build new things for them to do, and we'll try to reward you for it. So a quick little aside on the prizes. We have ten K in prizes this weekend, three K for the best over our project built on Superfluid, a few $2,000 prizes for various purposes like DeFi and best use of Superfluid and NFTs. And then we have this thing we call the Pool of Honor, which is just a pool prize where if you implement Superfluid in some capacity, we'll throw you some money. Just don't do things that I've seen where some of you guys just throw a little git commit there at the end and just add the couple lines. I'll actually look all right, but just wanted to plug those, but all right, let's get into the actual building. Okay, what do you need to know about before you start actually building on Superfluid? Well, you should be made aware of a couple of dev tools, right? The first is the Superfluid developer console.
00:10:03.702 - 00:10:25.890, Speaker A: This makes it really easy to see all these streams. Ether scan is not quite optimized for this sort of thing yet, as you can imagine. So we built our own console. It makes it easy to manage all this stuff. We have a dashboard to let you create streams and update streams and all this stuff in a no code way, if that's your thing. And we have an SDK. So if you like JavaScript, you like TypeScript, you don't know solidity.
00:10:25.890 - 00:10:47.898, Speaker A: The SDK core is your friend and I'll show you how to use that in just a second. So let's build. Okay. And I guess, you know what, before we click away, I'll go over what we're going to build. The first thing we're going to do is we're just going to interact with some really dead simple front end examples. So this is for you. React fans out there, you TypeScript JavaScript fans out there.
00:10:47.898 - 00:11:20.150, Speaker A: We'll go to our docs. I'll show you where to find these. We'll create flows, update them using JavaScript. All right? From there, we'll actually go through the process of building a super app in a couple of minutes. I got a pre deployed contract here that will receive incoming streams and send all those incoming streams to the owner of the contract. And plot twist, the contract is also an NFT, right? So if you trade this contract, the cash flow follows it. So it's a really interesting primitive to let you tokenize cash flows, which can open up a lot of really interesting applications, in my opinion.
00:11:20.150 - 00:11:59.826, Speaker A: So first thing I'm going to do is go into our docs where we have a lot of front end examples. All right? So let me expand this a little bit here. All right? So in our docs, if you have computers out, you can literally go to this right now. Docs superfluid finance and in developers, if you go to Constant Flow agreement, it just says CFA front end examples. Super easy to find to create a flow. What we do is we import the superfluid SDK over here. You can kind of drag this over and see it.
00:11:59.826 - 00:12:19.350, Speaker A: Sometimes I'm bad at Internet. These don't load great. We might find an alternative to code sandbox. This is what we got for now. We just set up a simple react app and we have a really dead simple function here where we initialize the SDK using this line, where we create this framework object. We specify the chain ID. You can get this dynamically, but I just hard coded to Gurley.
00:12:19.350 - 00:12:59.074, Speaker A: We create a signer. We load the super token contract using this dix load or not dix. This awaitsf load super token line that'll load a super token contract object for us and then we'll create a flow. So what we do is we just create a really simple operation object using SF CFAV one create flow pass in a few parameters like the flow rate receiver and super token. And then we execute that from our signer. Okay, this is hooked up here. It's hooked up to an exposed private key, right? You don't have to have an unlocked private key to do this.
00:12:59.074 - 00:13:20.506, Speaker A: Obviously, that's not the preferred way for you to do it. It's just really easy because we have an address with a ton of fake tokens in it. And we let you just basically demo this in real time. So here I have an address, I've pasted in. I've got an amount here, which is our flow rate. This thing down here will calculate what that flow rate actually is when you put this number in. This is actually in way per second.
00:13:20.506 - 00:13:44.210, Speaker A: So it's helpful to have a kind of formula for UX purposes to calculate what this actually is on a per month basis. So what I'll do is I'll just click this to create the stream. This should work in just a second. All right, so we just created a money stream. So what I'm going to do is I'm going to plug this address into the console. This is the console. Check it out.
00:13:44.210 - 00:14:22.854, Speaker A: Useful tool. If you click Home, you can see a bunch of streams, right, on different networks. If I want to click on Guerreli, I can just paste in the address that I just used to create to send the stream to. And we can see that we are receiving some money, right? So I just created a stream to this address. Pretty cool, right? Not very much has come in yet. That's because it's a pretty small amount, right? So we created a stream in this page. We have a few other ways you can do this, right? So we have at the very bottom a MetaMask and Web three provider example where you can just use MetaMask.
00:14:22.854 - 00:15:10.286, Speaker A: Yes. Question whatever amount. So no one thing you so I'll walk through what I think you mean if you're starting with dai and you want to stream money with that dai, you have to wrap that dai to super token dai, right. So again, if you want simple examples of that, again, we got more front end examples here around let's go to Tokens, super tokens. We'll walk you through how this works. And then we have an example here that's just like the other interactive ones where you can just call the upgrade function to wrap those tokens. That's the only thing you have to do.
00:15:10.286 - 00:15:43.802, Speaker A: But if you already have those wrapped die in your account no, you just call that function and boom, you're good. Makes sense. Cool. All right, so I won't belabor the point. You can imagine that Updating and Deleting is very, very similar, right? I won't go into those, but that is dead simple. Creating updating and deleting streams in JavaScript, right? Pretty straightforward, really easy to integrate with any other project you're probably working on. For a more complex example, let's get into this Tradable cash flow thing, right? This super app thing.
00:15:43.802 - 00:16:00.490, Speaker A: And I have a project up here. I'll show you where to find this. After I'm done. We have this in our main repo. I'll zoom way in. Hopefully you guys can see that. All right? But inside of our examples, this is inside of our super examples repo.
00:16:00.490 - 00:16:38.250, Speaker A: We have this Tradable cash flow example here, okay? So this is going to look exactly the same as it does here, as it will in that repo. We have two contracts, and the first one is called this Redirect All contract. So what the Redirect All contract is it's a super app, which means that it allows us to send money into it. And then when we send money into it, we can execute arbitrary logic in these callbacks to do something. That something could be anything you want. But in our case, what we're going to do is we're just going to send 100% of the value coming into the contract to the owner. All right? So we have a bunch of stuff set up in the constructor.
00:16:38.250 - 00:17:19.558, Speaker A: We initialize this CFA library to make it really easy to create streams in Solidity. I won't go too deeply into that right now, but the cliff notes is it makes it so that creating a stream in solidity looks a lot like how it did in JavaScript. We register the app, so remember that that host contract has a registry of super apps on it. So we need to register it and we need to define the callbacks we do and don't want to use, right? We have docs on this that explain this in much more detail. But in essence, there are six callbacks that can run. There's a before agreement created, an after agreement created, before agreement updated, after agreement updated, and the same for deleted. The before will run before the actual logic takes place.
00:17:19.558 - 00:18:09.666, Speaker A: The after will run after the event takes place. Okay, so we're basically just turning all of the before agreement options into no ops. We're not going to use them. So the only callbacks we're going to use are these after agreement callbacks, okay? So inside of these, we get a bunch of parameters that the host will call it with and we're going to run a single operation here. And that's this update flow operation. What's happening in update flow? Well, all we're doing is we're just checking whether or not a stream already exists into the contract and we're handling that situation accordingly. Right? So if there already is a stream coming into the contract and the operation is a delete operation, that means we need to not only delete the stream coming into the contract, but also delete all the funds coming out of the contract, right? 100% of the inflow should equal 100% of the outflow.
00:18:09.666 - 00:18:44.034, Speaker A: So we're just basically going to make sure those match in this function, right? But again, the limits here are your creativity. You could put whatever you want here, right? This is just one example. The other function here that's useful is this change receiver function. This will run every time the token is transferred. So if I want to sell this NFT, this change receiver function will run, which will just change who is receiving the flow. So if I sell it, we'll take as a parameter here, the new receiver, which is going to be the person I sold it to, that person is now going to receive 100% of the outflow. Simple enough.
00:18:44.034 - 00:19:12.746, Speaker A: And then inside of this tradable cash flow contract, it's an NFT, it's an ERC 721. It inherits from the redirect all contract. And then we use this nice little helpful before token transfer hook you guys can find in the open zeppelin API docs, and we just call that change receiver function in there. So I have a pre deployed version of this. Let me go to it in just a second. And I got a bunch of scripts, so we're going to interact with it really fast before we wrap up. So I have some scripts.
00:19:12.746 - 00:19:45.894, Speaker A: Let me grab this contract address so we can go look at it. This right here will be our Tradable cash flow NFT address. We can see I've been playing with it, I've been sending streams to it and stuff. But if I want to create a stream to this NFT contract using a script, what I can do is I can just call this create flow script. And what this is doing is it's basically using the same logic we had in our react app. We're creating a flow with the script. So we're just doing this in node instead of the react version we just saw a bit ago.
00:19:45.894 - 00:20:07.198, Speaker A: So if I run this using hard hat create flow JS, we're going to create a flow from our signer into the contract on Guerreli. This should work. Please. Internet gods. All right. Yep. I think that just worked.
00:20:07.198 - 00:20:37.894, Speaker A: In a couple of seconds, as soon as the transaction propagates and stuff, we'll go back and see what just happened inside that NFT contract. But again, if you want, we can go through the update examples, right? Instead of it being create, we're just calling update. And instead of same thing. Instead of create or update, we're calling delete here. Right. The only difference in these functions is that the delete function doesn't need a flow rate because there is no flow rate, we're just deleting. Okay, so let's refresh this again.
00:20:37.894 - 00:21:01.710, Speaker A: Prayers up to the Internet Gods. See if it works. There we go. All right, so what we can see, let me zoom way in. What we can see is my account just created a stream of about 33 tokens per day into the contract. We can see how much has been streamed in, and we can see that because, again, 100% of the flow into the contract is going to go to the owner. So there's no net flow rate for this thing.
00:21:01.710 - 00:21:19.880, Speaker A: It's just basically coming in and passing it all through to the owner. We also have an outflow rate that was automatically created. We didn't create that. Those callback functions created that. So it reacted to that operation for the exact same amount. Right. So that they match and that's the idea.
00:21:19.880 - 00:21:53.102, Speaker A: So that's end to end a super app contract and all of those JavaScript SDK examples, right. It should get you started, hopefully give you some ideas to wrap things up here I want to walk through, like what else you could build. Right? I have a lot of ideas. A lot of people here that are sponsoring will tell you they have lots of ideas that you can take and build on, but I'll just give you a few right now. Right. One interesting one is a platform for token vesting. Our community would like to see this, right.
00:21:53.102 - 00:22:24.234, Speaker A: Streaming money is good for vesting tokens. Right. You do have to lock the funds up in a contract at first, but money is being sent per second, right? So it's pretty useful to be as you're vesting, be able to vest on a per second basis and actually receive the money second by second. The other one is Web three Native subscriptions. So these are all recurring payments, right? They're money streams. There is no canonical yet. There are some great teams, we love working on it, but there is no Canonical web Three Native subscriptions platform that uses money streams yet you could build that.
00:22:24.234 - 00:23:15.830, Speaker A: Another one is a decentralized advertising protocol where you could effectively turn that NFT contract I just showed you into like a billboard space for banner ads and have all the money streamed into it be sent to the owner of the billboard. You can do interesting things in those callbacks, like split the funds too, if you want. Two other ones are around like lending, borrowing and lending. One of them is a lending protocol that would use streams to amortize loans. So what if I could pay off a loan with a stream instead of discrete amounts? Our hypothesis is that doing that would justify a lower interest rate because the lender is getting their money back faster. It's more granular. And the final one that's really interesting, based on that huge network I showed you, is being able to borrow against an incoming money stream, right? So there's a lot of people receiving salary streams right now.
00:23:15.830 - 00:23:31.630, Speaker A: I'm one of them. There's many, many others. What if could because that's a cash flow. It's an on chain cash flow. It's proof of payment. What if I could borrow against that and not have to put up any other collateral? That would be really interesting and it'd be the kind of thing that I personally would try out. So there are markets here.
00:23:31.630 - 00:24:02.650, Speaker A: These are things we've thought through a lot. If you guys want to build them, come up and say outer booth and I'm happy to help. Finally, what I want to leave you with is where to start. Okay? Like if you leave here and you're curious about Superfluid, where do I go next? All right, well, the first place is those SDK examples inside of our docs go to our Docs constant Flow Agreement front end examples. The second place is our Solidity Examples repo. Look up superfluid finance on GitHub and look for super examples. And I'd also recommend YouTube for a lot of tutorials, more in depth stuff.
00:24:02.650 - 00:24:37.794, Speaker A: And the last thing is a podcast we just launched, right? So this really doesn't have anything to do directly with Superfluid, but it is a great resource for technical people like yourself. We've interviewed a lot of top devs from Maker Balancer, uma, devrel leaders like Austin Griffith about very technical topics, right? Like their favorite gas optimizations, how they ship new features, how they manage their engineering teams, all this stuff. We try to pull it out and give you guys the insights, so I'd recommend checking it out. Devs, do something on your favorite podcast platform. But yeah, that's the last thing I'll plug. I'll leave you with that. Come say what's up at the booth.
00:24:37.794 - 00:24:47.730, Speaker A: And thank you for being here. Appreciate it's.
