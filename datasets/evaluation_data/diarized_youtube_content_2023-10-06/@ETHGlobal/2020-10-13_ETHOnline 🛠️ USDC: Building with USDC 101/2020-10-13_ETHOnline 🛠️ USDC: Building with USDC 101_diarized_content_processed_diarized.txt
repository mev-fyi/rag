00:00:00.250 - 00:00:12.110, Speaker A: We have Pete from Coinbase who's going to give us a talk titled USDC building with USDC 101. Excited for this? Take it away, Pete.
00:00:13.810 - 00:00:43.654, Speaker B: Welcome everyone. Thanks for joining. Today I'm going to talk about how you can build with USD Coin, also more commonly known as USDC. So what is USD coin? Well, I would say it is the most trusted fiat backed stablecoin available on Ethereum today. So what does it mean by fiat backed? Well, it means that each and every USTC. Token minted on Ethereum is backed by a real US. Dollar we keep safely in the bank.
00:00:43.654 - 00:01:29.154, Speaker B: And it's fully audited by one of the largest accounting firms. And the audit reports are publicly available in the URL shown below. So each USDC is equivalent to $1. So who is behind this? USCC is brought to you by Cineconsortium, of which the two most trusted crypto brands in the US. Coinbase and Circle are the founding members. USDC was first launched in October of 2018 and we've been growing exponentially ever since. We exceeded $100 million in market cap in December of 2018, just two months after the launch.
00:01:29.154 - 00:02:29.850, Speaker B: $500 million in December of 2019, 1 billion in July of 2020, 2 billion in September. And we are now fast approaching $3 billion. Thanks to all of you. The growth is largely attributable to the explosive growth of DeFi. These are some of the most popular DeFi applications out there that utilize USDC compound and ave where you can borrow and lend crypto and earn interest curve, where you can swap stablecoins with minimal slippage urine that helps you yield farm very easily, and balancer where you can have automatically rebalanced portfolio of assets. And some of those the companies mentioned are also sponsors and I think they are also sponsoring hackathon prizes for ETH online. For this hackathon, we are sponsoring a total of $8,000 worth of USCC in prizes.
00:02:29.850 - 00:03:12.422, Speaker B: Would especially love to see the use of metatransactions and the use of layer two scaling solutions, but those aren't required. Check out the prizes page for more information and additional resources. So let's learn about how you can integrate with USDC smart contract on Ethereum. First of all, we recommend the use of goalie testnet for development. To make it easy for you to obtain USCC tokens on the goalie testnet, we created a faucet contract. You have to call the claim function in the contract to claim 100 USDC, which you can do every hour. And you can do that very easily in Etherscan.
00:03:12.422 - 00:04:14.766, Speaker B: So navigate to the contract page on Etherscan by entering that contract address you see over there, which you can find in the prizes page as well under additional resources section. And then you can click on contract, click on write contract and you're going to find the claim function there. If you click on the right button, that would call the function and you'll get your 100 USDC. But you can only do it once every hour. And this is a contract address on the main net. Unfortunately, there's no Faucet on the main net for obvious reasons, but you can buy USDC on coinbase or on other exchanges, including decentralized ones such as uniswap. USCC is for the most part a standard ERC 20 token, but it also includes some extra features such as EIP 20 612, which is also known as permit, and EIP 39, which is called transfer with authorization, which we'll talk about later.
00:04:14.766 - 00:05:24.900, Speaker B: And those are used for metatransactions, which lets you send USCC without requiring ease. One thing that's peculiar, I'd say about USCC when compared to other ERC 20 tokens, is that it has six decimal places, as opposed to 18 USB, ETH, and most other tokens. The smallest unit is called a microdollar, which is ten to the power of negative six, and not way, which is ten to the power of negative 18. Why is it six? We kind of regret having it be six instead of 18, but we knew that USDC is going to be on multiple blockchains, and indeed, we are currently adding support for new chains. And six was chosen because when USCC was first being developed, six was the lowest common denominator among the most popular chains out there. So I'm sorry that it's six and not 18, which is another thing that you have to remember when using USCC. But please blame XRP for that.
00:05:24.900 - 00:06:10.100, Speaker B: To use USCC with your DAP, you're going to first need the Abi JSON. If you've opened USCC page on Ether scan before, you might have noticed that you see a proxy contract but not a token contract. And that's because we wanted to make USCC upgradable using the delegate call upgrade pattern. And we actually upgraded USCC before to V two a few months ago to add support for meta transactions. And it went really well. And only in Ethereum, I think you can upgrade an asset. I think at that time we had 2 billion market cap, a 2 billion market cap asset without downtime with zero downtime, and that was really cool.
00:06:10.100 - 00:06:40.702, Speaker B: Anyway, if you want to see the actual underlying implementation contract, you can click on the Read proxy read as proxy button on either scan. It'll reveal the actual implementation contract address, and when you go to the implementation contract, you'll be able to see the source code for USCC as well as the API JSON. I think I saw some question come in. Was there a question?
00:06:40.836 - 00:06:45.070, Speaker A: We have Fox Raymond who's asked? Do you have a faucet.
00:06:55.270 - 00:08:09.530, Speaker B: On matic Mumbai testnet? Okay, yeah. So this is how you would get to the actual implementation contract and see the Abi JSON. Once you have the Abi JSON, you can instantiate a contract object with web two JS or Ethersjs, as shown in this slide. So the abi here I put dot, dot, dot, but this is where you would paste this data in there, and this would be the contract address and that depends on which network you're on. And once you have that, you can instantiate the web3 object or Ethers signer object and the USCC contract object which is then used to call all of the methods on USCC contract with the USCC object instantiated. You can begin calling the methods on the USCC contract. So let's take a look at some basic operations.
00:08:09.530 - 00:09:10.282, Speaker B: To check the current USCC balance of an address, you can use the balance off method, and this is the same in all other ERC 20 tokens. So you can reuse the things that you learn in this session for other ERC 20 tokens, including Die, which is another popular stable coin, and many others. So balance off call method can be called in web3 this way. So you have the USCC object that you instantiated earlier. So you do methods and balance off and then the account is the account you want to query and then call to actually make the call. And Ethers is a little bit simpler, just do usuc balance off and then the address and the balance returned by the balance off method is in micro dollar. In other words, it has six zeros at the end.
00:09:10.282 - 00:10:06.574, Speaker B: So if you want to display dollar amounts, you'll have to do a conversion and you can do that using web3 by calling web3 utils from way method with Megaway as the second argument. Megaway just means six zeros at the end. Or in Ethers, you can use format units method with six as a second argument, and this will convert the micro dollar amount to a dollar amount. So instead of, for example, 3.5 million micro dollar, you can have three point fifty cents. To transfer tokens, you use the transfer method and two arguments to this method. The first argument is the recipient's address and the second argument is the amount that you want to transfer.
00:10:06.574 - 00:11:25.378, Speaker B: And again, this is in microdollar amount. So you'll have to convert from dollar amount to the micro dollar amount by calling the two way method on web3 or the parse units method in Ethersjs. And once you have that micro dollar amount, you can just call transfer method with the two arguments to N value and it's very similar for Ethersjs as well. So checking the balance and transferring tokens from one to another was really easy. But what about more complex use cases? Say you want to make a smart contract that accepts USDC and perform some action with the USDC received. So this is your smart contract and you want users to send their USCC and you're going to do something with it, something really cool, I guess, and I don't know, profit right now, intuitively, you might think that you can use a transfer method we talked about earlier to send money to the smart contract. However, the transfer method will actually just update the smart contract's USCC balance but not execute any code that you have on your smart contract.
00:11:25.378 - 00:12:08.120, Speaker B: And that's because transfer method doesn't have a callback mechanism. There are some other token standards like ERC 777 that aims at that callback functionality, but ERC 777 hasn't been able to gain much traction. And USCC is also a standard ERC 20 token. So this is not going to work. After making a transfer call you could also make another transaction to call a function on your smart contract to execute the custom code you have on there. But smart contract will not actually be able to determine accurately who sent how much. So that's not how you should do it.
00:12:08.120 - 00:13:35.040, Speaker B: So what do we do? The established pattern with ERC 20 tokens is to first ask the user to allow your smart contract to pull funds from their account using the Approve method. And in your smart contract function you can then call the transfer from method on USC you see to actually pull the funds and then do things with it. And this is typically called the approved transfer from pattern or the allowance pattern. So in the deposit function you'll be calling transfer from inside and that can be called once user has already given the approval or the allowance. One thing to note is that allowance, once it's given to the smart contract and the smart contract actually calls the transfer from, it actually gets used up. So you'll have to call Approve again if it's depleted to zero. There's an anti pattern, but nevertheless something that's really popular is to ask the user to grant permission for a really high number, such as the Maximum Unsigned Integer, which is essentially unlimited, so that the application doesn't have to ask for permission ever again.
00:13:35.040 - 00:14:49.180, Speaker B: Which can get expensive at times because gas prices can be really high sometimes and almost every DeFi app actually does that. But the downside is that the user will have to then trust the application or the smart contract not to pull funds beyond what it needs because you are basically giving the smart contract a perpetual permission to pull funds from your account anytime in the future. But because the approved call is transaction and it requires guests, a lot of DApps just ask for the permission to spend unlimited amount of funds in your account. And that's unfortunate, but that's one deficiency of the ERC 20 spec. This is a dialogue that is shown to the user when the approved method is called. If you've used DeFi apps before, this must be very familiar to you. Like this is the first thing that you have to do before you can actually deposit or do anything on most DeFi apps, not just DeFi apps, but other apps that require you to send tokens.
00:14:49.180 - 00:15:48.360, Speaker B: Once the allowance is granted by the user, a second transaction can then be made to call the function that you have on your smart contract that will pull the funds from the user's account and then you can then do things with it. So here you can see this is a ERC 20 interface that you can find this using open zeppelin. So this can be used to interact with any ERC 20 token. You give it the USDC contract address and then you can call the transfer from function on USCC to send money to pull funds from the user's account to the contract itself. And once they're successful, you can do things with it. This is solidity code, by the way. So this is what you would add in your smart contract.
00:15:48.360 - 00:16:47.976, Speaker B: Now, let's talk about meta transactions that was added to USCC in v. Two. So every transaction on Ethereum, including USCC transactions, require ETH for gas. This isn't very good UX because this means the user needs to have both ETH and USCC to be able to transfer USCC. But it's a very strange concept, right? Like if you to you are visiting Europe or something and you're paying for things in Euro, if they asked you, okay, you can pay for this in euro, but the tax you're going to have to pay for that in USD if they do that, that's going to be super weird. So this is not very good UX. If you want to build something like a mobile app that's kind of like a crypto version of Venmo that works globally.
00:16:47.976 - 00:17:49.244, Speaker B: And maybe you want to use USCC because USCC is stable and doesn't fluctuate in value as much as other currencies like Bitcoin or Ethereum. And if you're building that app, and if the user has to own both ETH and USDC to be able to use that app that exclusively deals with USDC, again, that's going to be very poor user experience. A meta transaction technology can be used to actually get around that. It doesn't actually eliminate the payment of gas, but it allows a user to delegate the payment of gas to somebody else. And that could be the app itself, the provider of the app itself. That could be the wallet app, or it could really be anybody. So metransactions solve this problem by letting the user authorize an action.
00:17:49.244 - 00:18:40.008, Speaker B: So in this example, Alice is authorizing transfer of ten USDC to Charlie, not pictured here. And in addition to that, maybe pay Bob, who is a relayer who will be paying gas on behalf one USCC to compensate Bob for spending his ETH to pay for gas. So that's the instruction. And then Alice can sign it cryptographically with her private key and that can then be sent to the relayer. In this case, Bob. And Bob can then submit that transaction to Ethereum network and pay for gas for Alice. And that eliminates basically the need for Alice to also own ETH in addition to USDC to be able to transact in USDC.
00:18:40.008 - 00:20:04.746, Speaker B: And as you can see here, it's also lying allows to pay for transaction fee in USCC as opposed to ETH. So USCC allows two different types of metatransactions one is EIP 20 612 permit, in another is EIP 39 transfer with authorization. The EIP 20 612 permit is basically a metatransaction version of ERC 20 approved function that you saw earlier. As you can see, the approved function has the spender and value but no owner, right? Because the owner is actually implicitly given because the sender of this transaction, the caller of this function basically is the owner. But with Permit, which is a meta transaction version, you have to specify owner because this permit call will be made by somebody else. In the previous example it would be Bob. Now, if it's called by Bob, then how do you know that the owner actually wants this to happen? Allowed for this to happen, right? And that's done by verifying the signature.
00:20:04.746 - 00:21:36.122, Speaker B: So the owner will have to basically hash all of this information and then sign it with their private key. And the VR and s are actually the components to the signature that you have to submit to prove that the owner of the tokens actually allowed authorized this. For this to happen, permit also introduces something called Nuns, which you'll have to also sign along with the rest of the parameters and that is used to ensure that this action can only be processed by the blockchain once and can't be reused again. And 20 612 and also EIP 39 which we'll see later, both use EIP 712, its sign type data spec, to request human readable signature request and also to prevent replay attacks. Please note that there have been multiple revisions to this spec and you should be using either v three or v four. And this is how the signature request would look like. Making a signature request with EIP 712 is a little bit complicated, but this is how you would do it.
00:21:36.122 - 00:23:00.342, Speaker B: First you need to prepare the data. You need, for example, a chain ID the name, which is the name of the token. On the main net you'll be USD coin, on the testnet, you'll be goliath USD coin, for example, and those are used as part of the EIP 712 domain which actually makes the replay attack not possible. So that's there just to ensure that the signature that's generated will be valid only for USDCoin running on this specific chain, whether it's goalie testnet or mainnet or broston or encappy or whatever that might be. And then you have to prepare the data, the parameters for the approved call, which is the sender and the amount that you want to approve or allow the other contract or the spender to pull from your account, and the nonce, which is a sequential number. And you can call the nonsense function to get the next nonce that needs to be used. And once you have all those parameters, you have to create this giant JSON and nobody can really memorize this, so I just recommend you to just copy and paste this whole thing.
00:23:00.342 - 00:24:03.820, Speaker B: And once it's done, you can serialize it, call each sign type data. In this case I'm using V four, but V three will work as well, but not any of the previous versions. And once the signature is created by the user, so if they click on Sign button, that is then you'll return the signature and you can then extract VRNS from it, which you'll have to send along with the rest of the parameters to the relayer for relayer to be able to submit this to the network. So those are the parameters. Then you have the VRNS which are components to the signature, you can then send that to the relayer. The relayer then calls permit function with those parameters and it gets sent to Ethereum and Bob will then pay the transaction fee. And even though Alice didn't actually make a transaction by herself, the allowance update will actually happen.
00:24:03.820 - 00:25:38.966, Speaker B: Okay, USCC also implements EIP 30 at nine, which is our own contribution. It's mostly similar to EIP 20 612 permit, but the main difference is that it uses a random nonce as opposed to sequential nons, and that is to make it easier to support multiple simultaneous transactions from multiple apps. Also, this is used to authorize a token transfer, a simple token transfer instead of just updating the allowance, which would require second call to call the method transfer from. But this can actually be used for both simple guest list transfers between accounts or as part of another smart contract function call. In other words, it can be used to either push like the regular transfer function, or to pull like the proof transfer function funds to both push and pull the funds. As mentioned earlier, EIP 39 also uses EIP 712 and making a signature request for EIP 39 is also very similar to that of EIP 20 612. But as you can see here, we use a random 32 byte nuns here, as opposed to fetching the next unused nuns from the blockchain.
00:25:38.966 - 00:26:37.070, Speaker B: And that's what allows the EIP 39 based transfers. That's what allows multiple simultaneous transactions to happen. Because with permit, if you end up using a non that is either too low, too high, it will revert and fail. So if you make multiple transactions at once, the miner can reorder them as they desire and you have no control over which one gets processed first, and that might cause the permit call to fail. And also if you're using multiple DApps, until the previous permit call is confirmed, you won't actually know, like the second DAP will not know what's the next unused nonce. So you might end up using the same nonce twice, and that will also cause one of those two calls to fail. So that's the main difference.
00:26:37.070 - 00:27:57.122, Speaker B: And I guess that's the main benefit of using transfer with authorization. But this also actually leads to slightly higher gas usage. So depending on your use case, you should use EIP 20 612 or 39 depending on what you want. So by making the EIP 712 request as shown in the previous slide, you'll be able to obtain VRNS of the signature and you also have all the parameters that can then be sent to Bob, the relayer. And Bob can then call transfer reauthorization with those parameters to have the transfer actually be processed on the network. And if you want to make the transfer re authorization call as part of another smart contract call, say you have a custom smart contract that needs to take in USAC and it will then do additional things with it. You can either try to take in all of the parameters separately, but the transfer with authorization call requires a lot of parameters, which is a lot.
00:27:57.122 - 00:28:53.010, Speaker B: So you can actually condense it down to a single parameter by taking it a single byte array and then just extracting what you need from it using and you can then forward the call to the USC contract by using called method in solidity. And that way the transfer with authorization can be processed. And then once the tokens are transferred, you can do things with it. And that's basically it for working with USDC. There's nothing too special about it. It's very simple to use if you're new to Ethereum. Maybe this is overwhelming, but if you actually try building an app with it once or twice, you'll realize that it looks harder than it actually is.
00:28:53.010 - 00:29:32.560, Speaker B: So I would highly encourage you all to try integrating with USDC. And most of the stuff that are here are also applicable to other tokens as well. Dai also has a permit function, but the implementation is slightly different from the actual EIP 20 612 spec. It's an earlier version, but it's fairly similar. I think uniswap's ERC 20 token standard also uses 20 612. They are the ones actually that submitted EIP 20 612 standard. So it's going to apply to all of the pool tokens that you end up creating with uniswap V two.
00:29:32.560 - 00:30:29.860, Speaker B: So just try it out. Now I also want to show you USCCL two demo. And this is something that I'm personally really excited about and part of the reason why I'm super excited about layer two. There are a bunch of layer two scaling solutions out there and I think ETH Online is also sponsoring a few, or rather a few of them are also sponsoring ETH online. And the reason why I'm super excited about layer two scaling solutions is, well, first of all, we all know that Ethereum has limited transaction throughput, right? And it can only handle about 15 to 20 transactions per second. And that's shed across all DApps and smart contracts. So if you're building something that realistically, you can't really expect a transaction throughput of more than like one transaction per second.
00:30:29.860 - 00:31:18.414, Speaker B: That's problematic because Visa, for example, can handle about 2000 transactions per second, which is a lot greater. But we are trying to displace Visa and all the other legacy financial systems, right? So scalability is really important, and the Ethereum Foundation is slowly but surely making progress there. But it'll take a while before the l One of Ethereum start to scale. And with layer two scaling solutions, actually you can build scalable applications today. So that's why I'm excited about it. The DFI Craze actually pushed the gas price really high. It's come down lately as the DFI yields fell.
00:31:18.414 - 00:32:12.930, Speaker B: But at some point, you needed to pay like 600 to 800 gigawe for gas as gas price. And that basically meant to transfer USCC, you needed to pay about $10 in transaction fees, which is crazy. You can't buy coffee with USCC if your coffee costs $4 and the transaction fee costs $10. Right? And that's not what we want. And also, I think USCC, and not just USCC, but crypto in general, can provide a really great opportunity for less developed and underprivileged countries around the world to modernize their financial system. And that is also a core mission of Coinbase as well, to build an open financial system. And that can't be done if transaction fees are super expensive.
00:32:12.930 - 00:32:59.806, Speaker B: It will cost $10 to transfer USDC regardless of the amount. Like, if you are going to transfer one dollars, you will have to pay $10 in transaction fee. If the gas price is really high. If you're transferring a million dollars, you would also pay $10 in transaction fee. And we obviously don't want to build a financial system that's only for the rich and only for the whales who can afford to use it, right? And that's why I'm personally really excited about L2, and I would really love to see you all build things with L2 and also gasless transactions. Often on layer two, the transaction fees are so cheap that the DAP can just pay for it. For the user, I can show you the demo later, but it's so cheap that the users can just ignore transaction fees altogether.
00:32:59.806 - 00:34:20.346, Speaker B: And that's the kind of financial system that I want to create something more inclusive, something that can be used by everybody, regardless of their background, regardless of where they are, regardless of their socioeconomic status. The hackathon prizes that we have, if you build something with gasless transactions, the Meta transaction functionality in USDC and L2 scaling solution will definitely love you and give you extra credit. So let me show you an USCC L2 demo Pjchim.com to check out this demo. So I'm going to connect to my MetaMask here. Okay, so I'm connected for this demo. I'm using Matic, but you can build this with any other L2 scaling solution as well.
00:34:20.346 - 00:34:57.058, Speaker B: I believe that's EVM based, it'll be really easy for you to do that. There are also non EVM based solutions out there, like ZK Roll Up. It'll be a little bit different. But for simple transfers, you can also build something like this very easily. So I'm on l two right now and you can go between l one and l two. So in l Two there is a button called Gimme Sum and that's the faucet. I think somebody was asking earlier if there's a Faucet on Matic Mumbai testnet.
00:34:57.058 - 00:35:45.416, Speaker B: Take a look at the code. It's all open source. And there's a function on the contract that allows you to get some USCC tokens on layer two. But I clicked on that button, and because I'm in full screen, it's opening in the full screen, but let me just minimize it so it doesn't look so crazy. Okay, so I clicked on that function and it shows a signature request. I'm using EF 712 again for the Faucet function, and that allows me to get the tokens without having to worry about gas. And also using the EIP 712 allowed me to cross sign across chains.
00:35:45.416 - 00:36:39.548, Speaker B: So even though I'm currently on goalie testnet, my MetaMask window is not appearing for some reason. Okay, even though I'm on goalie testnet, I was able to sign a transaction that happens on layer two, which is on a different network. Okay? So now I've received some additional USCC token. I received ten, and now I can send it. So I'm going to put another address here. I'm going to transfer ten USCC, send again, the EIP 712 pop up appears, and this will use EIP 39 transfer authorization spec to make the transfer happen. Guestlessly so I'm going to click on Sign, and now it's submitting the transaction to the relayer, and the relayer then submits it to the network, and within like 2 seconds, it's complete.
00:36:39.548 - 00:37:25.724, Speaker B: It took us a little longer just because I'm running this on a $7 instance on Heroku, but it can obviously be made much faster if you have a beefier machine for the relayer. But you didn't have to wait 15 to minutes or even hours for that transaction to complete. And I didn't have to pay gas. I don't have any ETH on L2, but I could still make the transaction. And you can see the transaction here. Yeah, the transaction fee was 0.1 USC, and because it was so cheap, the DAP could just pay for it for the user, and the user doesn't have to worry about it.
00:37:25.724 - 00:37:52.544, Speaker B: And that's such a good user experience. Not to mention it was a lot faster. So that's l two. You can move between l two and l one. So I'm going to go to l One here, and L One is goalie testnet here. I'm going to try to get some additional USCC. And this calls the claim function that I was talking about earlier confirm.
00:37:52.544 - 00:38:32.690, Speaker B: And because this is happening on L One, it's going to take a lot longer for this complete. It's not going to take as long as you would on the main net just because the testnet is not as congested, but you can see that it's still taking a lot longer and you. Can see the block height between L One and L2 as well. And on L2 you can see the block height increasing at a much faster rate than L One, which is really nice. So I'm still waiting. It's an L One, so that's kind of slow, but now it's done. So I have additional USDC now and I'm going to try to transfer some tokens on L One.
00:38:36.520 - 00:38:52.680, Speaker A: Pete, there's a question here from Light client. Why would Coinbase use a trust SDK l Two system? Coinbase seems to be one of the few crypto companies that is actually oriented to operate a trusted L2 e G sensing.
00:38:53.180 - 00:39:33.780, Speaker B: Yeah. So all I can say is that there have been multiple discussions. I've also suggested multiple times of possible side chain solution that we can build ourselves but obviously we can't really reveal our plans. And Coinbase is, yeah, sure, it's just trusted. So if you operate a know, that could be popular. But then there are so many projects out there, they're doing it and for those companies it's literally the point of their very existence. Right.
00:39:33.780 - 00:40:06.290, Speaker B: Whereas sidechain by coinbase might just become like a side project or one of many projects. And I think supporting the projects that are out there and there are multiple, there's matic, there's optimism, there's xdai, there are a lot of them out there, and I think we just want to support as many of them as possible and help them grow instead of trying to build our own. But building our own is obviously not completely out of the question.
00:40:09.940 - 00:40:10.690, Speaker A: Great.
00:40:13.320 - 00:40:50.460, Speaker B: I'm seeing other question. Please make a customer or consumer custody solution that allows us to sign messages with keys that Coinbase holds. Okay. Yeah. So I think that what the question is asking is if there's a way for people to spend crypto in Coinbase wallets. And I think the person, my client, they're referring to the Coinbase.com wallet, not the non custodial Coinbase wallet, which is a separate product that we have that's similar to MetaMask.
00:40:50.460 - 00:41:47.212, Speaker B: Like if there's a way to sign transactions from that, then you'll be able to use DeFi products directly, right. Not via MetaMask, but directly from Coinbase account. And that's actually a really cool idea and that's something that we are looking into as well. I can't make promises, but all I can say is that we've actually, definitely talked about it, discussed it, and that may not happen, but I agree that there'll be good user experience. But at the same time I want to say that non custodial wallets do have value. You might have heard the phrase not your keys, not your coins. And I'm saying that even though I'm employed at Coinbase, there's value in learning to hold crypto on your own know, being your own bank.
00:41:47.212 - 00:42:26.296, Speaker B: Because after all, decentralization is what we want to see and that's what's going to really disrupt the financial system. So do look into a noncustodial solution, MetaMask is great. But also check out Coinbase Wallet, which is a product that we have that's also non custodial. And it's really great. And it's something that I've been working on myself for two years when I first joined Coinbase. So do check it out. Anyways, I'm going to try to make a transaction on L One, and here I'm not doing a gas list transaction.
00:42:26.296 - 00:43:20.700, Speaker B: So this is going to consume a little bit of my Gorelay ETH and it's going to be a lot slower as well. And that's the difference between l one and l two. And you can go between L One and L2, for example, by depositing, by locking up some amount of USCC in a smart contract. And the L2, you will see that token appear in L2. And you can try that by this section over here. By using this function over here and the active depositing funds to L2, this takes about eight minutes to complete, and exiting takes slightly longer, about 30 minutes. But you can go between l one and l two fairly easily.
00:43:20.700 - 00:44:00.172, Speaker B: So that's a small demo, I think. I see. Another question. If you could change anything about L One Ethereum, what would you change? Okay, if I could change anything about L One Ethereum, there are two things that I would love to change. One is I want the meta transactions thing to be basically built into Ethereum. And I think account abstraction is something that they are looking into doing. I don't know the exact details, but meta transactions are currently implemented at the contract level.
00:44:00.172 - 00:44:59.660, Speaker B: But if it's implemented at the protocol level, then basically anything that you can do on Ethereum can be done gaslessly and they'll be realistic. But in addition to that, I think scalability needs to happen. Like l one needs to scale I'm not sure exactly when that would happen. I think the foundation is leaning towards leveraging L2 solutions as much as possible, such as roll ups, side chains, et cetera. But I would still like to see L One scale because composability is a lot easier to leverage on L One than L2. Because L2, you're going to see some fragmentation. And I think I'm starting to see some fragmentation already.
00:44:59.660 - 00:45:20.820, Speaker B: A bunch of games and NFT solutions tend to prefer side chains, and a lot of DFI apps tend to prefer wall ups, I think. But if Ethereum scales at L One, at layer One, then we won't lose any composability.
00:45:24.920 - 00:45:35.530, Speaker A: Pete, if there's time for it, maybe we could just unmute everyone and like client if you wanted to jump in, you guys could jam on this idea.
00:45:36.620 - 00:45:45.720, Speaker B: Yeah, we can do that. So that's actually the end of the demo and you can check it out yourself. That's the end of my talk. So we can do questions and answers.
00:45:45.880 - 00:46:07.760, Speaker A: Awesome. If you have a question for Pete, jump in, unmute yourself. Your time is now. Light client. You could talk about what you're working on there if you wanted to. Yeah. You can unmute yourself if you want.
00:46:07.760 - 00:46:17.520, Speaker A: Try here. I'll try. Should be good.
00:46:17.910 - 00:46:18.658, Speaker C: Hello.
00:46:18.824 - 00:46:19.474, Speaker A: There you go.
00:46:19.512 - 00:46:20.146, Speaker B: Hello.
00:46:20.328 - 00:46:37.560, Speaker C: Oh, great. Thank you for that talk, Pete. That was insightful. I figured work on EIP 3009. I think it's awesome that people from Coinbase are community changes and standard. Awesome.
00:46:38.570 - 00:46:39.142, Speaker B: Thank you.
00:46:39.196 - 00:46:55.180, Speaker C: You guys specifically mentioned account abstraction. That was interesting. I didn't know what your experience with account abstraction? Use cases that you guys are excited about in that front because that's something that my team has been working on since about February of this year.
00:46:55.490 - 00:46:56.240, Speaker B: Cool.
00:46:58.130 - 00:47:08.740, Speaker C: Obviously your experience like working with a wallet. You've probably thought about ways that this experience could be better, top of your head that you wanted to share.
00:47:11.910 - 00:47:14.850, Speaker B: Are you talking about account abstraction specifically?
00:47:15.510 - 00:47:46.074, Speaker C: Yeah think that Meta transactions is very clear. That's critical to have at layer one and we're working really hard to make that happen within the next twelve months account to bigger a change. And we're trying to understand in terms of account abstraction because we can think of great things to do with it. But I think that it's going to provide is going to allow for a lot of other people to come with even greater things that we could have never thought ourselves. And I don't know if you guys at Coinbase or yourself have thought about.
00:47:46.192 - 00:47:47.194, Speaker B: That would be I see.
00:47:47.232 - 00:47:47.578, Speaker C: Cool.
00:47:47.664 - 00:48:33.340, Speaker B: Yeah. So obviously Metatransactions would be great, but I think that would be great is some kind of count recovery mechanism. Right. There are a lot of smart contract wallets out there, argent being one of them. There's really cool count recovery mechanisms like social recovery, for example. But that does require a spy contract wallet. If there's a way to somehow add some of that functionality, maybe even something as simple as multisig, basically, if there's a way to add things like social recovery to EOA accounts, that'd be really cool.
00:48:33.340 - 00:49:27.470, Speaker B: I personally do know of a lot of people, because I was building wallet apps for the past three plus years that lost tons of money because they forgot the recovery phrase or they lost their phone and didn't write it down. And it makes me feel really sad. Sometimes people would lose like tens of thousands of dollars because of a small mistake, or they did write down the back of the recovery phrase but they misplaced it or dog ate it or something. I'm not sure exactly how this problem can be solved in account abstraction, but something that I think we should definitely think about recoverability.
00:49:29.010 - 00:49:33.470, Speaker C: Do you have any preferred mechanisms for recoverability?
00:49:37.750 - 00:50:33.220, Speaker B: Yeah, it's tricky. Social recovery seems to be popular at the same time. It's funny, but I'm not sure if I have enough people. It's not that I don't know enough people that I can trust, but I don't know if I know enough people who are sophisticated enough to be I think Arjun called the Guardian, for example, to be holding a fragment of the key that will help me recovery. Obviously companies like Coinbase can provide that functionality as well. We are trusted. So we could hold a fragment of it that would help you with the recovery process.
00:50:33.220 - 00:51:22.740, Speaker B: But maybe it can be built in such a way that we can never touch the funds ourselves. I'm not sure exactly how the implementation is going to look like, but yeah, it's hard. Sure. Another thing is if an account remains untouched for a long time maybe you can mark an account in such a way that if it has some flag set and if the account, if the funds don't move for a long time maybe there's a way to somehow challenge and claim the account. But then who can do that? That's going to be again complicated. Yeah, it's hard.
00:51:23.590 - 00:52:01.150, Speaker C: That's an interesting idea. It's been a long time at Waltz, but I think something like that where you have like a heartbeat, where if you don't have a transaction to that account for a period of time, then what you could do is maybe fall back to a long they don't have to be as secure. They could just be something you've written down, put in a glove box, a mobile phone somewhere, a friend. If dozen of those handle to find one of those allows you to your funds. And it also doesn't put you into a situation where you're trying to compete against one of these thousand guay for the gas.
00:52:02.450 - 00:52:58.480, Speaker B: That's an interesting idea. And you could also put something like Coinbase deposit address, right. If you put Coinbase ETH deposit address as sort of the fallback address to where the assets will be transferred if you don't use the account for a long time. That way as long as you're continuing to use your account coinbase will never have access to your funds. But if you forget, if you lose your private key or something and if you can't make transactions from that account for a long time and they can be configured by the user then the funds will just be deposited automatically or you can make a transaction for that to happen to say, a Coinbase deposit address. That could be an idea. So Coinbase will basically receive the funds only if the account remains unused for a long time.
00:52:59.570 - 00:53:19.670, Speaker C: So the Coinbase deposit addresses these mapped from generation to time to a certain Coinbase account because whenever I use Coinbase and I try to deposit I'll get a different address every time. Does that mean that there's like address associated with my account that I'm depositing?
00:53:22.010 - 00:53:55.490, Speaker B: You know, at least the last time I checked the addresses will change but all of your previous addresses that were shown will continue to work. So every time you click on deposit button the address you see might change. But if you used an address before then that address will continue to work, and you can still send funds to it. Got you. I hope that was helpful.
00:53:57.510 - 00:55:09.354, Speaker C: That was cool to riff on wallet ideas. I feel like anytime I have a chance to talk to anybody who's working at Coinbase, I hope that Coinbase contributes more on the front of being a custodian of private keys rather than just assets. Because to me, that's the greatest barrier to reaching a lot of consumers who are technical enough to have thousands of dollars on a hardware wallet or a phone or it doesn't matter what the smart contract is. They're always a little bit more traditional about crypto, is that we have the opportunity to choose if we want to have control or if we want to give the control to someone. Even today, in 2020, there aren't great solutions who are interested in crypto and want to use applications on the blockchain because it's about storing assets rather than storing key. I feel like if I tell enough people Coinbase this eventually and you guys obviously think about this every day, I'm sure these are conversations that you guys have, but that's something that I would love to yeah.
00:55:09.392 - 00:55:23.600, Speaker B: So I wholeheartedly agree with what you said, and you can expect to see us do more native integrations with popular DeFi contracts and applications in the new year.
00:55:26.210 - 00:55:27.600, Speaker C: Excited to see it.
00:55:29.270 - 00:55:30.260, Speaker B: Thank you.
00:55:37.040 - 00:55:54.524, Speaker A: Awesome. Oh, Patrick, would you like to yeah. Did you want to ask a question? Go ahead. Can you unmute yourself or let me make sure. Do that. Weird. Oh, zoom.
00:55:54.524 - 00:55:55.844, Speaker A: You should be good now.
00:55:55.962 - 00:55:57.444, Speaker D: Hey, can you hear me?
00:55:57.562 - 00:55:58.230, Speaker A: Yes.
00:55:59.320 - 00:56:14.280, Speaker D: Hey, Pete, I really enjoyed your tutorial. As a experienced DeFi and DAP coder and whatnot, that was the best intro that you could have given. So really good job with that.
00:56:14.430 - 00:56:15.240, Speaker B: Thank you.
00:56:15.390 - 00:56:43.330, Speaker D: I just wanted to ask about plans for the wallet because specifically the mobile wallet itself, I just noticed it's kind of stagnating. Is there something that's going to get released soon that you guys are kind of keeping under wraps? Because I have a couple of GitHub issues there, and I have some things I've tried to kind of push that forward, and I'd really like to be able to use that wallet more.
00:56:43.700 - 00:56:54.160, Speaker B: Gotcha. And by wallet, are you referring to Coinbase wallet, the separate noncustodial wallet product, or Coinbase.com wallet?
00:56:54.320 - 00:56:55.924, Speaker D: The noncustodial one.
00:56:56.042 - 00:57:22.888, Speaker B: Noncustodial one, yeah. So I transitioned to a different team. So as of April, I'm not working on the wallet myself. I used to be leading that team. Now I'm working on different projects. But I do know that they are working on some big launches soon. I think you're going to see a native swap functionality very soon.
00:57:22.888 - 00:58:00.956, Speaker B: I guess I'm leaking here, but yeah, you're going to see, like, a native swap functionality very soon. They launched lend functionality recently, so you can lend on compound, for example, and earn interest. But yeah, they're working really hard and I think they're working on a bunch of new features. Obviously, I can't leak anymore or else they'll try to kill me, but, yeah, don't think they're stagnated. They're just working on really complex features, and it's just taking a little longer, but it's not abandoned or anything.
00:58:01.138 - 00:58:01.628, Speaker A: Okay.
00:58:01.714 - 00:58:03.484, Speaker D: Yeah, I appreciate that. Thank you.
00:58:03.682 - 00:58:04.670, Speaker B: Thank you.
00:58:10.690 - 00:58:19.950, Speaker A: Awesome. Yeah, I agree. This has been the, as I say, gold standard workshop. Well done, Kim. Pete. Sorry, misspeaking.
00:58:20.110 - 00:58:20.866, Speaker B: Thank you.
00:58:20.968 - 00:58:30.494, Speaker A: Thank you so much. Unless there's any more questions, we could probably wrap up with how we can reach you. If we have questions, where's the best way?
00:58:30.552 - 00:59:04.830, Speaker B: Yeah, if you have questions, I think the best way to reach me is actually via Twitter, so I'm Pete J. Kim. Let me just type that out here as well. It's at so reach out to me on Twitter. You can also mail me, but I'm not very good at checking my mail, and I get a lot of spam too, so it's a little harder. And I might not respond to you quickly enough, but Pete@coinbase.com is my email address, and you can also find me on Discord.
00:59:05.350 - 00:59:19.400, Speaker A: Awesome. Thank you so much. There's one last question, if you feel like hanging around for one more minute. What are the more institutional use cases of USDC that you've seen?
00:59:20.330 - 01:00:09.030, Speaker B: Okay, so that's a really great question. And the coolest use case that I've been seeing lately a lot is actually investment, as in angel investment or VC. Investment in startups are increasingly done in USCC. So instead of the investor writing a check, they would acquire, say, I don't know, like, a million dollars in USCC and send it, and it's a lot faster. The recipient can get it instantly and start using it instantly. And I thought that was really cool. But USCC is also a great gateway to DeFi, right? DeFi yields.
01:00:09.030 - 01:01:04.130, Speaker B: Some of the protocols are giving yields that are, like, in the tens, in the hundreds even, or even the thousands. Some of the more sketchy ones, I would say. But that's actually really attractive to a lot of investors. It's much better than what you would get with a typical savings account, right. Or treasury bond. So investors are using it not only to invest in companies, but also using it to get the yield themselves. And also, if you receive investment in USDC, you could also keep your USCC in, say, urine or something and get a cool 10% APY so you're not screwed by inflation.
01:01:04.130 - 01:01:07.060, Speaker B: That's really cool, I think.
01:01:08.630 - 01:01:14.760, Speaker A: Nice. Awesome. Way to end. Thank you so much, Pete. Have a great day and.
