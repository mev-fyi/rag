00:06:23.460 - 00:06:51.460, Speaker A: Hello. Hello. Checking. Hi guys. You can hear us? Are you here for the workshop maybe? Sure. Let's get started. Let's get started.
00:06:51.460 - 00:07:20.944, Speaker A: Okay. Hello. Hello. Okay, you guys can come here and sit in the front. We'll just get started. So in your place there's a headset. You have to wear it.
00:07:20.944 - 00:08:14.580, Speaker A: And once you power on the receiver, change it to channel two. Channel two? Yeah. This side. Okay. This side with this, guys, let's see. You need to put that headset on. Yeah, you need to put that on.
00:08:14.580 - 00:08:49.618, Speaker A: Okay. Anyway, I think I'll just get started now. Basic bama pushlon kisablok channel number two connector now. Good. Let's get started in a minute. Yeah, just a minute because these sorry. Yeah, we did a sound check.
00:08:49.618 - 00:09:05.746, Speaker A: Sound check? Did you announce that? Yeah, we announced that. Your main goal, the point where you are standing, that will be your endpoint. Endpoint? Oh, that's right. You're not going to move that side. This is our endpoint. This is your endpoint. You can sit there.
00:09:05.746 - 00:09:26.670, Speaker A: You can come inside. So like this, I can go anywhere behind, right? Okay. I'll just speak from here then. Got it. Maybe when you're changing the slide. Okay, cello. Guys, I think we can get started.
00:09:26.670 - 00:09:50.726, Speaker A: I hope you guys are on channel two. You are able to hear me. All good. And me? Am I audible? Great. So, hello everyone. Welcome to the third edition of ETH India. It's really great to see you, everyone in person after like long three years due to the COVID So here, myself, Trilok, and my teammate Shriya are here from the team instead app.
00:09:50.726 - 00:10:18.622, Speaker A: And we are going to show you how to build the DeFi DApps on top of App smart wallet. So, shreya. I have a question for you. So I have a question for you. So, I have some idle ETH lying in my wallet. So I was thinking maybe to deposit that in Lido for some rewards. They were mentioning that I'm getting almost 4%.
00:10:18.622 - 00:10:53.210, Speaker A: So what do you think? What's your opinion on that? Well, Trilok, you're right. Lido is offering around 4% rewards of Staking on your ETH. But how much idle ETH do you have? Around 100 ETH. You're a big man, Trilok. No, but although, what if I tell you that not just 4%, but using your 100 ETH, you can gain almost as high as seven to 8% rewards. Whoa, that's really interesting. But how is that even possible? So Trilok, it's possible by using a financial strategy called as leverage.
00:10:53.210 - 00:11:21.460, Speaker A: So leverage is when you sort of increase your exposure to some assets. So if you can see that this is how your position will look like. In the first case, this is you just holding your stake deed, earning the regular 4% Apr. And in the second case, you're going almost two X leverage earning around 7% Apr. Whoa, that's really interesting. But how is this even possible in DFI decentralized finance? So in DFI. This is how you should go.
00:11:21.460 - 00:11:47.190, Speaker A: Now, this is you holding your 100 stake death. Now you can deposit your 100 stake deed into Ave. Now on Ave, you can borrow against your stake death up to 72%. So now you borrow some ETH from Ave. You swap this ETH into stake death, and now you deposit it back. So as you can see that your collateral has sort of increased. So you can obviously borrow more against your collateral.
00:11:47.190 - 00:12:12.770, Speaker A: So you borrow 28 ETH more to sort of go to X, which is 200 staked ETH. You swap it back and you deposit it again. So there you have it, your two X position. Oh, whoa. So like this, I can earn up to 7%? Yes, that's right. But here, if I see it almost took like seven transactions, I think it will be a bit time taking. And for me to research how I don't think it might be feasible.
00:12:12.770 - 00:12:31.990, Speaker A: Well, look, you're right. It is time consuming. And don't just get me started. This is you going just two X. Let's say you want to increase your rewards even more, and you want to go three X or even as high as 3.5 X leverage, which is the maximum that you can go. And if you see that it takes you almost 16 transactions to go three X leverage.
00:12:31.990 - 00:12:58.114, Speaker A: But your Apr at the same time is going to increase to 10%. And in 3.5 X, it's almost as high as 12%. But I would really like to have more than 11% here, but I'm not sure if I can do more than 16 transactions. Well, trilogy. So this is where Insta dub comes into play. Instadap provides these complex strategies available to the users in just one click.
00:12:58.114 - 00:13:27.574, Speaker A: And such strategies are available on top of so many protocols like Uniswap, Ave compound, et cetera. And you would be shocked to know that Instadap is currently managing around 1.7 billion TVL. Whoa. Isn't that very huge, guys? Well, it is. So now let me tell you how you can sort of achieve this strategy available in one click. So to achieve this in one click, we sort of use something called as a flash loan.
00:13:27.574 - 00:14:02.722, Speaker A: So now, mind you guys, you will be just doing one transaction, but I will be breaking that down into a set of actions that will be performed sequentially. So this is your action stack. Now, again, we started with 100 stake death. Now we flash borrow 100 ETH. We swap this to stake death. We deposit the 200 stake deed that I now have, I borrow 100 ETH, and using the borrowed amount, I pay back the Flash loan. Now, since this is a transaction, but it has not happened on chain, so it has not yet executed.
00:14:02.722 - 00:14:40.062, Speaker A: So we need to execute this transaction so that your balance get updated on chain. So we cast this action stack. And this is how your position looks like in the end. Oh, that's real. Oh, that's really cool. So if it's really taking one transaction, I think it's like doable I would love to see how is that even possible? Maybe I would try to go by 3.5 X to get maybe the 11% that you are showing in the previous slide.
00:14:40.062 - 00:15:06.906, Speaker A: Is that even possible? Well, yes, Trilok. So here's the catch. Now we just went two X. Now even if you have to go as high as three X or 3.5 X, you can see that your Apr is increasing, but your number of transactions just stays the same. And that is possible because now you're just taking a higher amount of Flash loan. So now Trilok, I have sort of conceptually explained you how you can achieve this.
00:15:06.906 - 00:16:15.098, Speaker A: Will you be able to show our fellow developers how you can code this out? Sure, I think that would be interesting and everyone is looking forward for that. So instead, App offers an advanced web3 based online editor that lets you to interact your DFI right from your browser and that we call it as playground. So in the playground we have TypeScript and HTML supported too. I guess most of you guys would be using Vs code or some code like editor, right? But what if you had the same visualization for Vs code in your browser? The playground is built using the same architecture or the same libraries to give you the same Vs code like feel. And then have you ever wondered you can import your NPM packages in your browser? It's possible using the ESM automated library import. And not only that, in your browser or in your playground you can use natively big number library axiom and then the await. The top level await I hope in Blockchain or DeFi.
00:16:15.098 - 00:16:55.120, Speaker A: You guys might have to do a lot of Asynchronous calls that you can do it easily. And then okay Trulok, so I think you can get started. And don't forget to log in using your GitHub or email so you can share me a link and I can cross check whether you have written the right code. Sure. So let's get started with the demo. So I'll be showing you guys how to code in just like ten minutes, how to code a leverage strategy. So before that, before that I'll just give you an understanding of what's playground and how the playground is connected with our main application.
00:16:55.120 - 00:17:29.590, Speaker A: So this is our main application, this is our instead of main application. So in this application we have a feature called something as simulation. So when you turn on the simulation, you can actually do all your work like whatever you want to try it without really spending. So that means it's like a testnet environment. You're actually converting your main application into your testnet environment. So I've turned on the simulation, not sure why. Net maybe try reloading.
00:17:29.590 - 00:18:44.674, Speaker A: Just a second guys. Some issue with the internet. Let's try with zone two. Okay, I think it's connected. Can you connect with MetaMask connect? Okay. Anyway, so let's assume that we have turned on the simulation. I've turned it on over here and in the same way, once this has enabled, it will show you that this model that you can do all this like all the transactions.
00:18:44.674 - 00:19:15.322, Speaker A: Like let's assume that you want to before using your real funds. Maybe someone is like putting real money. Then before doing all the real transactions you can really test it out on the simulation. So now the simulation mode has been turned on and it gives you 1 hour of time to do whatever transaction you want. And then this is the playground. Top up the balance. And here also I'll link the simulation.
00:19:15.322 - 00:19:33.830, Speaker A: I'll link the main application simulation with the playground. So I'll connect like this. So once it's connected, both the playground, the code over here and over here it's connected. So let's see. So when I go to ave V two so do you see any funds over here? No. Right. It's currently empty.
00:19:33.830 - 00:20:12.910, Speaker A: Now this is already like the prescript written that whenever you kind of first time go to it, you'll be able to see this. So what this basically does is that it tries to deposit ETH. This is the ETH address that we use to have a proper convention. And this is the connector. So instead of smart wallet so instead of smart wallet can interact with the protocols using something called as a connector. A connector is an intermediate contract that helps the DSA to interact with the protocol. So the connector has all the logics.
00:20:12.910 - 00:20:45.854, Speaker A: Suppose let's say you had to give the allowance and then deposit. So the connector handles allowance and the deposit for you. So you just need to call something like this. And also you guys might be wondering why this is in JavaScript and why not insolidate and how I'm exactly interacting. So the playground is built on top of a DSA connect SDK. What it does is that you can interact with your DSS smart wallet directly with the JavaScript. So you can just write the code.
00:20:45.854 - 00:21:28.942, Speaker A: This is the connector. That how you are going to interact. So now here I'm just going to change the amount. Maybe let's take one, three, four I think one, I think one, 3.45. This is the amount that when I run it, you don't have balance, you need to top it up. Okay, I think I don't have a balance. So on simulation we have a feature that you can get the test funds and we just call the top up function over here and then we just put 100 and once that is top up you will be getting like it's like your test tokens.
00:21:28.942 - 00:22:14.732, Speaker A: If you have been on a testnet or anywhere, you will be going to the faucet, right? So in the same way we have our own thing called as top up where you will be able to top up 100. So once this is top up, I'll call it. And now it's showing casted to spells and the transaction hash. So let's see what happens. Now I'll try to reload the DAP. Since the internet is a bit slow, it's kind of taking time to load it. So here, if you see, I've deposited whatever, the amount that I've entered over here was exactly deposited over here.
00:22:14.732 - 00:22:45.460, Speaker A: So you will be able to see. So that's how you can connect the playground with the real app. And then you have a visualization to also look into it. So now I've explained you what's playground and then what's the main application, how they both are connected. And also one more thing, just to give you a short brief of what are the components there on the playground. So this is the left side is the online editor, right side is the console. If you remember, I've said it supports HTML too.
00:22:45.460 - 00:23:17.584, Speaker A: So when I click on the toggle at the bottom, it shows me the HTML editor and the right side the preview of the HTML. So for now, I'll just turn it off. This is the simulation button where you can connect the simulation with the main app. And then we are supported on five chains. Here you can see the five chains. Then a person or an owner can own multiple DSA accounts. So since he can own multiple DSA accounts, you can toggle between them.
00:23:17.584 - 00:23:47.210, Speaker A: So now, for now, what I'll do is that I'll create one more DSA on our main application to get started with the leverage strategy. So this is how I'll be creating. I'll be just calling the new over here and then it will create a new DSA for me. So the new DSA is this actually. So this is the ID. So you can see the ID over here. And this is my DSA address.
00:23:47.210 - 00:24:12.236, Speaker A: And a DSA can have multiple authorities. So this is the address that I'm connect on MetaMask. This is my EOA address and this is my owner. So my owner, my MetaMask address controls this DSA. There are different types of authorities. Also, I'll explain you later when we go on to that slide. So now I've created a new DSA.
00:24:12.236 - 00:25:02.310, Speaker A: Let's see here also if it's there, here if you see it's 35820. And here also three five, sorry, it's two three at the end and it's two three at the end. So now I'm on the same DSA. So let's get started with the leverage transaction before starting. As SRIA explained, I initially had 100 stake it. So let me top up 100 stake it. So here it shows me I've added 100 stake it.
00:25:02.310 - 00:25:32.300, Speaker A: So in my balance, I should be seeing 100. So now we have our requirements set up. Let's get started with the coding. So, I have some pre code written. Those are just like addresses and all the stuff you can just find it over the ether scanner anywhere. And the amount that I'm going to start is with the 100. Since you all guys know we can't directly use the ether format of a number or amount, we have to convert it into V.
00:25:32.300 - 00:26:09.608, Speaker A: So we have converted this amount into V format by multiplying it with the ten to the power of 18. And now the leverage factor. So in the leverage, as we have seen in the diagrams, I'm going to explain you with only the leverage factor of two. So the leverage factor is two, the leverage amount. So if you guys see over here in the leverage factor of two, the amount was 200 stake ETH. That is I need to have at the end 200 stake it. So the amount that is going to be over here is going to be the amount in V times this one.
00:26:09.608 - 00:26:53.588, Speaker A: Now, as Tria explained, first we need to take a flash loan. Have you ever wondered like what if there was an autocomplete where you just call take flash loan and it automatically gives you the flash loan code. You just don't need to remember, you can just use it directly. See it gives you the autocomplete and here is where you add the spells. So in Flash loan you have to mention the address that you want to take, the amount and the route, the flash loan fee and everything. You can dive deep into it on our docs which is available for now. Those are set as constant five and the flash loan fee is set as to five basis point.
00:26:53.588 - 00:27:27.104, Speaker A: So the flash loan token. So here in the example we have taken 100 ETH. So in the same way I'm going to take 100 ETH, also we have the rapid address as autocomplete. So if I just type Rapid and press enter I get this or else since I've already saved at the top, I can just use that one it says and the flash loan amount. So now how much amount do we need? We need 100. So the amount in V would be the flash loan amount. So that's it.
00:27:27.104 - 00:28:04.748, Speaker A: So you have the flash loan ready, flash loan spells ready. You have to just add the required spells and also once you have taken the flash loan there was a requirement to swap the ETH into stake ETH. So now again for the swap we use one inch. So to use one inch there are like lot of setup you have to do. So we have simplified that on our DSA and also we have autocomplete for swap. That's it. You can see you have a swap spell also ready.
00:28:04.748 - 00:29:14.500, Speaker A: You have to just mention the sell token. That is what we are going to sell. We are going to sell the wrap ETH to stake ETH and the amount would be the flash loan amount and the slippage, I'm setting it to 1%, you can increase it according to your requirements and this is the swap spell here the swap connector ID. So all the connectors on our smart contract level are linked with an unique ID and you have to just mention that so you don't have the hassle of remembering the connector address and stuff. We face that in DSAV one so we made it easy for you. So this is the ID and the name of the action is sell the byte. Sorry, I'll try to buy rapid, I'll try to buy stake it and I'll try to sell rapid and the amounts, the Uwent and everything you don't need to know right now you can go into it maybe whenever you're diving deep into the docs.
00:29:14.500 - 00:30:49.220, Speaker A: So now I have the spells also ready for the swap. Now I think I have only two spells required that would be deposit and borrow. So now how will I get the connector ID of Ave V two? Let's say in the first thing I've been shown you so you can go to our docs, you can navigate to the connectors, the main net, you can go to Ave V two and here you can see a deposit spell, the deposit spell, the connector ID and then the arguments. A description for that is also available. So again I'll be using autocomplete to have the basic structure of the spells to add ready and then I'll be just entering and then I have to deposit what I'm going to deposit the stake ETH did you guys have any question or anything? Why here it's 200 and why here it's 100? You had any questions? Maybe we can do it in the Q and A for now. So we'll be depositing the stakeholder and the amount, so the amount would be the leverage amount. So we are going to deposit 200 and then the set ID and get ID is zero, you can understand them later maybe once you dive into the docs.
00:30:49.220 - 00:31:55.072, Speaker A: Then the other spell that is required is borrow so I have to borrow 100 e so that I can pay back the flash loan. So I'll be again calling add spell autocomplete, I'll be writing our way V two A borrow and I'll be just mentioning the parameters. So these are the parameters. Now we have our leverage spells ready. The only thing here, if you have also seen, okay, so the payback of the flash loan was already added over here when I've used the autocomplete for the flash loan so it's already there, so that I've skipped. But now since we have all the spells ready in a sequence for the leverage strategy, now I have to just cast them. So executing the action stack or the spells.
00:31:55.072 - 00:32:57.564, Speaker A: So here transaction hash wait, so this is how I cast it and I'll be getting a transaction hash. So let's again jump into the Ave dashboard on our main application here you'll be see it's empty, we have hundred stake, it all the requirements looking good. The next part would be just casting. So I'll be calling this and now it tries to cast it and gives me a transaction hash the transaction was successful. Now let's see what happens. What I see over here. So here if you see 200 stake ETH and 100 ETH, the same thing what Shia has told you, that how the position would be looking.
00:32:57.564 - 00:33:53.080, Speaker A: So in the two X leverage, 200 stake ETH, 200 stake ETH and then 100 ETH and now the Apr is 7.2. Here you can see the net APY. Also the rate is currently 7.2. And that's how you can do that's how you can build your own strategies or the spells and then you can connect them or maybe create your own application or a DeFi DAP. Also, you guys might be wondering, I've said that you can build your DAP but there is no UI, it's only the script. So for now, since it might take a bit of time me to explain HTML. So I've already have the pre code written where if I turn on and I have a UI also ready and then I can share this link with Shria.
00:33:53.080 - 00:34:35.004, Speaker A: So Shia can actually just enter the amount and we'll automatically do the two X leverage for her. So now we have built a DAP just in few minutes using playground. And that's playground. Well, Trilok, the demo was really amazing. So, as you can know that Instadab also has a product which is the Instadap Lite, which also uses the same strategy, which is the St ETH ETH leverage Staking and provides around 8% to 9% of Apr on the yields. It is currently managing around $200 million of TVL. And you almost wrote that code around the 70% of the same code in just 15 minutes.
00:34:35.004 - 00:35:23.244, Speaker A: Isn't that amazing? It feels so building just on top of Insta DAP and DSA account is just as easy as this because of the playground and the development environment available. So let's switch on to some question and answers. If they have yeah, if you have any Q and A, you can ask them also. No, it's fine. Sorry. So you guys have any questions, any doubts? Just a second. Let us wear the headset then you can ask.
00:35:23.244 - 00:36:25.238, Speaker A: Yeah. Hello? Can you hear me? Very faint noise. Can you hear me now? Not exam, I'm not able to hear. Hello? It's come, but the mic that mic is not coming. Yeah, I think it's working. Hello? Yeah, it's working. So I was wondering if does the SDK or the playground provide anything that the website does not provide out of the box? So can you give me an example of a strategy? Okay, so currently, whatever the strategies that we have on our main application are also built using the same SDK, that is the DSA connect and the SDK and the application also use the same set of sequence of the spells.
00:36:25.238 - 00:37:17.578, Speaker A: So maybe if you want to have a strategy that is not available on our main dashboard. Could be lot, it could be person to person but we have only added the topmost strategies which our users were looking for. So that's why we have added maybe if you want to build something maybe a new strategy where let's say you want to do something like this you want to borrow sorry? First let's say you want to deposit ETH into ave borrow die and then deposit into compound maybe let's say there was some strategy that was yielding you much higher yields. So in this you can just combine them in the sequence of series and then you can build it and then you can share it as I've shown you how to share it. I do have another question. Yep. So does the SDK support only the platform supported by InstaDApp or can I go for a custom platform like some other lending protocol? Okay, so that's a nice question over here.
00:37:17.578 - 00:38:25.470, Speaker A: So basically as I said, the app smart wallet and the protocols can only interact via the whitelisted connectors. That means first we need to build the connector that is written in the solidity or the smart contract and once that is written and that has been whitelisted once that's whitelisted and then you will be able to interact. So now assume that instead app is like an OS. So once we have added the connector to this OS platform you can create n number of combination with the other strategies but we have to add that connector because we kind of follow some standards and some security concerns where it makes all the things whatever I've shown you makes simpler for you guys. Anything else? Thanks. Okay, great. Anyone, any other questions? My question is actually extension of why DSA is controlled by an EOA, right? An owner.
00:38:25.470 - 00:39:38.374, Speaker A: So why can't owner do any arbitrary transactions from sorry, sorry, what was the last thing any arbitrary right now owner has to do the transactions, why can't owner do arbitrary calls to any contract? Okay, so now as you all know, EOA can do only one transaction per time. So EOA is an external own address or the MetaMask address, whatever you see it can only do one transaction, like one action because we don't have a batch or anywhere there is no like a standard that's been followed where you can batch all these things. So insteadap has done that for you guys where we have created the standards, where all the protocols as I said right, the connectors follow a standard which makes you composable between different protocols. So now what do you say? A DSA can be owned by any address, any address that can do a small kind of transaction that could call the DSA. The owner can be an EOA, the owner can be a Genosisif or any other smart contract. Owner can be anything. And then in the authorities you can have different levels of permission.
00:39:38.374 - 00:40:11.262, Speaker A: This is not available on the main application yet. But currently we have only one kind of owner that is the full access owner. You could have manager, guardian and the automation. The manager is now whatever the owner has access, right? He can access all the connectors. That means he can access the security, he can access the funds and everything. But the manager has only limited amount of access. Maybe let's say he can just interact only with the compound.
00:40:11.262 - 00:40:42.042, Speaker A: Only with the compound. He can't interact with the ave. So that's a manager type of authority. Then the guardian guardian just helps you to recover in case you have lost the owner address. Let's say your MetaMask private key, maybe the guardian can help you. And then the automation, automation is just like a thing like whenever the market is crashing or something, the position you have seen right? In those cases if it has to save it has a limited fixed strategy that it can execute. So automation can execute a fixed strategy.
00:40:42.042 - 00:41:20.102, Speaker A: So that's like an automation authority. So was your doubt clear? Yeah, that's right. I just wanted to ask that is there any way a connector can be added? You can connector allows arbitrary calls. Okay. So for the security reasons we haven't added a connector that can do arbitrary calls. Like you can't just call any direct random contract that's for the security reasons. So if you want to maybe in the hackathon if you want to build, you can build a connector you can add it to the instead app on the testnet or on the main net folk.
00:41:20.102 - 00:41:53.106, Speaker A: So if you want to building on top of where you need a custom connector then you can build your own connector and then you can just create like a main net folk environment and then you can do it. But currently the adding of the connector is done by the dow. All right, makes sense. Thank you. Any else question? Any other? Okay so the other team also has a workshop so we won't maybe after this question. Okay, so I think we are running out of time. We'll be at the booth and we'll be around.
00:41:53.106 - 00:44:10.960, Speaker A: So this is our discord channel. You can just connect and ask questions. That's our twitter handle and our email address if you're building on top of instead app. And if you have any questions or anything we'll be around or you can email us or you can come onto discord. All right guys, all the best for your hack check partaidia. Check. Check.
00:44:10.960 - 00:46:41.220, Speaker A: Can you guys hear me? Give me a thumbs up. Yeah you can't hear me? You're not wearing it. Yeah, check. Check it's great. Thank you. Right. Hey, guys, I'm akshay.
00:46:41.220 - 00:47:05.890, Speaker A: So yeah just to remind you guys, you have to connect your headsets to channel two so that you can listen to me. Not the other session but yeah. So, by the way, I'm Akshay. And I work. For Leifi and we have great shirts. So come to oh, we have great shirts. Come to our booth and pick up the shirts and yeah, so let's start.
00:47:05.890 - 00:47:52.310, Speaker A: To begin with, I'm just going to give you a short intro about Lefi. So Lee Fi is a bridge and dex aggregator. So we're kind of like one inch for bridges. If you are bridging from one chain to other chain, we find you the best route through various bridges that we have. We currently have 15 bridges and like countless DEXes inside Lefi. So for now, I'm going to let you guys scan this for this presentation as well as all the links that I will have in the presentation. So, yeah, after the presentation, you can get the links and while you're hacking as well.
00:47:52.310 - 00:48:47.038, Speaker A: So you guys want to scan give five more seconds. Okay, so these are the links that we're going to be using. I mean, you're going to have to use if you're hacking with Leifi first, of course, the website. We have a front end as well. If you want to bridge from any chain to any chain, just like go to transfer two XYZ here. And yeah, we have a crazy UI through which you can bridge from any token on any chain to any token on any chain. So we also have SDK, we have API docs examples.
00:48:47.038 - 00:49:38.930, Speaker A: I'll go with the links again. So what exactly is the problem that LiFi is solving? Right? So why do we even need Lefi? So of know, you can go to individual bridges, individual DEXes to do swaps and bridging manually, and it's still going to be fine. You're still going to make it right. But what Lifa is doing is we are aggregating all these things into a single interface so that you don't have to worry about the various DEXes that are there and the fees that they might be charging you. And if they are secure or not, nobody knows, right? Everything's on the blockchain. And unless you verify, unless you can verify, you can't know whether the bridge you're using or dex you're using is right or not. So I want to give you an example of why a product like Lefi would actually make a lot of sense.
00:49:38.930 - 00:50:28.130, Speaker A: So recently we were supposed to get merge for the hackathon, of course. And yeah, we faced a lot of issues because there were no aggregators which were aggregating t shirts for hackathons. So what happened was that we got designs done online, of course, and we chose a printer based in Germany and they told us they're going to print all those things to us and they're going to ship it to India, to Bangalore, so that we can deliver, give it to you guys. But we faced so many issues because this German company, they gave the contract to Latvia, then to Bangladesh, then to us. Then they shipped each of the shipments through FedEx, to India. And at FedEx I had to go through KYC. I had to pay unknown fees.
00:50:28.130 - 00:51:01.994, Speaker A: I had to make cash payment. Like FedEx, I'm paying, like, thousands of rupees when they're delivering much to me, right? But I would not have cash at all. They're expecting me to pay all that money in cash and it was a huge mess. I had no idea this would happen at all. So this whole thing can be I mean, all I want is that as a customer, I just have designs for T shirts. I just want to get merch at Eat India, right? That's my only goal. And all these extra steps that I had to go through.
00:51:01.994 - 00:51:55.086, Speaker A: And this was very stressful in the last one week, sorry, one month. And these things as an end user, I don't have to know all these things, all these details. So instead what you can do is that's the same thing happens with swapping as well. If you have Matic on polygon and you want to get GMX on Arbitrum and stake GMX, you have to go to several steps. You have to choose a Dex, then get USDC, use Hop to Bridge to Arbitrum again, use Uniswap to swap to GMX and stake GMX. All these steps. And each of these steps would have various fees, various security assumptions and various bottlenecks, right? And as an end user, I would not know each and every detail about all the things that I'm going to use.
00:51:55.086 - 00:52:35.980, Speaker A: Right, so what we do at Lefi is that we just kind of abstract everything here and all you are going to see is that you're going to choose Matic, that you have Matic on polygon and you're going to stake GMX on Arbitrum with a single transaction. That's what we do at Lefi. I mean, that's exactly what I wanted for Lefi. Merch as well, but nobody is there working on that. So soon I'll be able to do it. I guess some aggregate is going to be there, but yeah, so this is what we do at Leefi. We abstract away all the nuances, all the steps that you have to take to swap one token on one chain to a different token on different chain as well as do another action on top if you wish to like staking GMX here.
00:52:35.980 - 00:52:59.358, Speaker A: So you guys are with me still till now. Thumbs up. Yeah. Great. Okay, so I am going to talk about so this is our core protocol, right? Like we help people swap tokens and deposit funds. And we have this core protocol. We have several products which is using this protocol, you can build so many things on protocols.
00:52:59.358 - 00:53:26.890, Speaker A: And Lefi is also a protocol that means you can build things on leafy as well. So that's why we are sponsoring this hackathon. And I'm also going to talk about the bounties that we have. So we have several products. One is transfer two XYZ, which is our front end. If you want to go to Arbitrum and stake or buy something on Arbitrum. An NFT you can use transfer two XYZ and then reach to Arbitrum using Leafy in the back end and buy an NFT.
00:53:26.890 - 00:54:23.686, Speaker A: Similarly, we have a widget which as a mean, of course, you're all builders and hackers, right? So if you are deploying your smart contracts on Arbitrum, then that means that all of your users would have to transfer funds from where they have funds in to Arbitrum to use your DAP. So it's a hassle for a new user who is not very Djeny. So what you can do is you can just plug Lee Fi's widget onto your website and directly let users swap from any chain to your token on your chain. And we have a widget and we also have SDK. If you don't feel like you want to have a widget which is built by us, the UI is built by us. You can just use our SDK, and you can build your own UI. And you would have, of course, have a lot more customizability options, and it's a lot more linear to use your own SDK and UI.
00:54:23.686 - 00:55:06.518, Speaker A: We also have APIs. So it's kind of going bare bone from the widget with the widget is where you can just plug it in in five minutes and start using it. It's very easy, right? It's like the wrapped version of LiFi as a protocol and the SDK is kind of like in the middle where the functions are wrapped. If you're a developer, you'd know the functions are wrapped and you can easily just call functions and perform actions or perform swaps. But APIs are like bare bones where you get APIs and you would have full freedom to do anything that you want. We have APIs and you can just pull our we have unlimited there's no limit right now at least. So we can use our APIs.
00:55:06.518 - 00:56:34.932, Speaker A: So, I mean, even if you go even down below the APIs, you can also interact directly with our smart contracts which are Lefi smart contracts. Your smart contract can directly interact with LiFi smart contract and perform actions. So for example, if you are Yearn and if you are an yield aggregator and you want to move your funds to Arbitrum and then deposit into a pool and then get the yield back to, let's say, polygon, right? So you can do all those things using a smart contract and you would need LiFi smart contract for that. So these are our various products. I'm going to go through these things in this session, of course, each of these things so that you guys can decide what you want to use in this hackathon. I do want to touch upon the ideas before I dive into anything to build on so that you guys have an idea of what is Lefi, what can I do with Lefi? Can I build something cool here? And is LiFi alone enough to build something if you use LiFi alone, of course, just by using LiFi you can build so many cool apps, right? And we have Bounties, which supports we're just going to of course give you this is not updated. Okay.
00:56:34.932 - 00:57:51.332, Speaker A: So to start with, SDK, the SDK that I spoke about, which directly interacts with our APIs and get your codes on front end, if you want to swap from one token to other token, you're just like passing these two tokens as parameters to our SDK and you're fetching the codes for these tokens. And to show you an example of using SDK, we have built, of course, our front end on LiFi's SDK as well. So this front end that you see is built on leaf SDK and you are choosing a token, let's say, oh, I like GMX a lot, so I'm choosing GMX on Arbitrum and I'm going to get ETH on optimism. I'm going to swap 20 tokens. Of course, the Internet is very slow here, so I might not even get routes, but usually you get several routes on the right side as you swap and as a user, you can choose what route that you're comfortable with. It can be based on your favorite bridge that you trust, or it can be through like a native bridge, arbitram native bridge as well. So, yeah, the SDK works this way, where you pass these two parameters, GMX and Arbitrum to Ethan optimism and 20 tokens.
00:57:51.332 - 00:58:27.920, Speaker A: Right. You're going to pass these three things and we're going to fetch you so many quotes can be 1020 based on the chains and tokens that you have chosen. Yeah. Oh, yeah, we found one route, sadly, but yeah, so usually we find so many routes to do these swaps. Oh, I have disabled other bridges. So, yeah, another cool feature about Lefi that I kind of have to show right now is that we have a feature to enable and disable bridges at Lefi. We have several bridges, twelve plus bridges.
00:58:27.920 - 00:59:06.006, Speaker A: And I had disabled all the bridges because I trust connex and Stargate a lot more. But yeah, I mean, I like all the bridges, to be honest. So now we'll get a lot more routes. I'll come back to this. So to start with, what can you build? What can you as a hacker build with leefi using just the SDK? Right. So on the front end, you can just build cross chain yield aggregator. So USDC, of course, everybody wants to hold USDC these days because nobody knows how down we're going to go from here.
00:59:06.006 - 01:00:27.986, Speaker A: So if you are holding USDC and you want to earn some yield on USDC, then you can use Lefi and mean, like, you would have to go through various DApps, various chains, various yield aggregators, and find the best yield and then deposit into that yield. Right. So instead you can just build this interface using Lefi where you can aggregate yield for USDC on various chains, Moon, River, Moonbeam, which are new chains and they're going to offer a lot more higher yields than Arbitrum optimism which are like old and secure. So you can aggregate these different yields on different platforms and you can just give your users just a single button to deposit into these vaults through Leafy. So as what you can imagine, you said like USDC on Arbitrum, USDC on optimism and a user just like is going to select one USDC on optimism which is going to give you 5% yield unheard of and the user is going to select USDC on optimism and just click Deposit. And the Leafy is going to bridge the funds from wherever they have the funds in, for example, Polygon bridge to optimism, then deposit into pools. And yeah, you can just do that in the single interface that you are going to aggregate on your front end.
01:00:27.986 - 01:00:58.250, Speaker A: That's one of the easiest things you can build on Lefi. And yeah, so we're also partnering with Etherspot. Etherspot is a smart contract wallet. So Etherspot helps you in automating these things kind of like vaults. So you can use that as well to make it much, much better. So you can use Lefi and Etherspot together again. So Lefi, of course, it's also a great standalone product, but it works better with smart contract wallets.
01:00:58.250 - 01:02:00.222, Speaker A: So you can use Leafy and Ether spot, you can borrow assets crosschain. So I mean, one of the things that are in Hype these days is that crosschain borrowing where you can deposit ETH on Ethereum and you can borrow USDC on Arbitrum or optimism. Right? So this thing is being built on layer zero or Axela, these different messaging protocols. But I'm not going to go deep into it, but these protocols are great, but they add another security assumption to you as a user, right? So instead what you can do is that you can still have the exact same experience, but you can build that with Leafy and Etherspot with a lot less security assumptions than building on Crosschain, like fully native Crosschain. So yeah, we also have partnered with GoPocket wallet. So if you wish, you can just build a wallet on your own and integrate LiFi and make it cross chain wallet from day one. And yeah, cross chain wallets are great.
01:02:00.222 - 01:02:48.202, Speaker A: We have a few wallets that have integrated LiFi. They are frontier, they are Omni, these wallets have integrated LiFi. And through this people can do a lot more cross chain things and deposit into different chains and do a lot more things. So another thing is multi hopping that's something you can build with is that which means that, for example, let's say you have funds on Phantom and you want to get your funds on Avalanche, right? So this is very hard because there's not much liquidity between these two chains. So ideally you would have to go from Phantom to ETH then to Avalanche. So this is called multi hopping. You are going through a different chain to go to a different chain.
01:02:48.202 - 01:03:20.040, Speaker A: So this thing can be built using leafy. And currently we don't have that. We are trying to have that. So we are offering so I have to update this. We're offering $2,500 for using SDK plus Widget. SDK or widget thousand 250. And you can find these prices on ETH global website.
01:03:20.040 - 01:04:13.990, Speaker A: We're offering these bounties in this hackathon. So please build on LiFi and of course you're going to get these things. So I'm going to talk about contract calls as well. So I gave you an example when I started this presentation, which is that you can stake on GMX, right? So usually you would have to swap on GMX, swap to GMX on Arbitrum and then perform another action to stake into GMX which can be automated using exchange contract calls that we have, which what it does after the bridging happens, after the swapping happens, it calls another function which deposits funds into GMX on Arbitrum. So the end user is going to be only performing only one action, just going to be, let's say like USDC on polygon. You're just doing that, that's it. And everything else is going to be taken care by bridges and LiFi.
01:04:13.990 - 01:04:47.148, Speaker A: So that's something you can check out as well. Of course, if you build only on Crosschain counter calls, which is a new feature that we have. We have separate bounties for this, $2,000 thousand dollars, $500. And we also have Widget bounties, which I combined with the first bounties now. So there's going to be another fourth prize here. Six, seven minutes. Okay, so I don't have much time, but I'll be in our booth.
01:04:47.148 - 01:05:04.292, Speaker A: So you can feel free to ask me. You can come drop by. We also have a game in the booth. So come by the booth and play the game. You can earn some tokens too. So I'll be near the booth. You can ask me for any questions that you have about Crosschain, even if it's not related to Lee Fi, anything.
01:05:04.292 - 01:05:39.656, Speaker A: Crosschain, multi chain, bridging. I'm open to answering any of the questions that you guys might have. So I want to touch upon before kick me out. I'm just going to talk about how we can start building right now. So we have examples. So of course in this presentation we have something called we have widget examples which are very simple to start with, right? And of course, after you are familiar with a widget, you can move on to SDKs, APIs and contract calls as well, which are lot more complicated. But widget is just like five minutes a lot more complicated.
01:05:39.656 - 01:06:17.180, Speaker A: I mean, like five minutes to 2 hours to probably one day, right? Not too hard for a dev. So we have examples, for example, create react app. You can check this out. I use next JS. This is pretty simple because this widget is also an SDK on JavaScript, it's a JavaScript on TypeScript SDK. And you can import the widget and you can just plug it in on your UI. It can be anywhere on your UI.
01:06:17.180 - 01:07:34.552, Speaker A: So a few things that I want to touch upon, since I don't have much time is that this widget is fully customizable and you can just do so many things with this widget because this is kind of stuck. Yeah. So this widget, you can control all the UI elements that you can see on the widget from outside the widget, which is very useful if you are building something like something like this. So we built this recently and it uses only Lee five widget and I feel it's like very useful for sure, because it aggregates a few things. Okay, yeah. So this is like one basic example where I have a few buttons here. If you guys can see I'm not a great front end dev.
01:07:34.552 - 01:08:14.290, Speaker A: Sorry. So what we can do is I can just control the wallet, control the widget from outside the widget. That means that you can build a lot more things on top of this. For example, USDC can change the token ETH from outside. So, I mean, a better version of this is obviously this is probably only on one. Yeah, it is slow. Oh no, decline, decline.
01:08:14.290 - 01:09:38.946, Speaker A: Okay. So this is something that I built, that we built a few days back, a few weeks back, which is an aggregate, I mean, which is a way to store your friend's address or your centralized exchange address on our DAP. And you can easily send money from any chain that you have to that centralized exchange in a single transaction. For example, if you want to add a new wallet, let's say Binance, I trust Binance and I want to get ETH on Binance, and I have some address, let's say Binance main. So I have this address that I've just added and of course I can save this address on this website. You can just build a simple DAP, which is very useful. Currently, what we do as Djens when we want to off ramp money from one chain to Binance for to let's say I have optimism funds I have to bridge to BSc chain or like polygon or Ethereum to deposit into Binance.
01:09:38.946 - 01:11:00.450, Speaker A: But instead what you can do is that let's say I have funds on even like let's use chain, like, let's say avalanche, right? I have AVAX on Avalanche and I want ETH on Binance. Right? So you can just have such a way that it just selects everything is populated. Oh, I have to connect my wallet. Oh yeah, that's not working because I just disconnected my frame wallet. So yeah, so the ideally if you have IVACs on avalanche and then if you have 20 of that and you want to get to finance on you want to get to finance, you can just build a simple app like this where I just sends you to finance. You can just bridge in a single transaction, which is I feel very cool. So, yeah, you can build something like this.
01:11:00.450 - 01:11:37.722, Speaker A: It's like a very generic app. And you can also build a DAP where you can add your friends as receiver addresses and send funds to your friends. That's also something you can build. But I think I'm happy to answer any of the questions that you guys might have in the booth. Feel free to reach out to me on telegram at akshay underscore Lefi and Discord. Join our discord and ask for support as well. I can also show you a few examples that are built using Lefi.
01:11:37.722 - 01:12:05.346, Speaker A: One is that so recently MetaMask integrated Leafy to support Bridging inside MetaMask. So if you go to Portopeortfolio MetaMask IO, you can see Lefi being used in the back end. So these guys use API because MetaMask wants a lot more freedom, right? So MetaMask wanted API. So they have integrated our APIs. We also have Dodo Exchange integrate using us. They are using our SDK. We also have Superfluid using us, they're using our Widget.
01:12:05.346 - 01:12:51.000, Speaker A: So we have three examples of different DApps using LiFi. And if you are building any project and if you aim to deploy on any of the L two chains or side chains that we support, I mean currently we support EVM, we are going to expand to non EVM as well. Feel free to reach out to me. Reach out to us. We're going to help you guys integrate LiFi into your DAP so that you can help your users onboard in a much, much easier or seamless manner to your chain and use your DAP without much hindrance. I'm going to give you guys like two minutes to scan the QR code, join our Discord. You can also scan this QR code instead to get this presentation and get all the links at once.
01:12:51.000 - 01:13:28.494, Speaker A: So if you have any questions, I'm happy to answer right now. Yeah, Chanto. Yeah, I can't hear him though. It's too, I think. No. Yeah. Okay.
01:13:28.494 - 01:13:52.694, Speaker A: Yeah, now I can hear you. Nice. So I want to ask, let's suppose you are saying supplying token from one chain to another chain. Let's suppose at the same time second chain got a very high fluctuation and second transaction got failed. How you are handling that? Yeah, so, of course. So this happens a lot. You would know, especially in crypto.
01:13:52.694 - 01:14:21.170, Speaker A: So what we have is that we have slippage parameter that we set. Of course you have access to set the slippage on SDK, API and smart contracts. So if you set slippage like 0.5%, the final transaction is going to I mean, the contract is going to make sure that the deviation isn't like more than 5.5% for the end token. If it does, that is like for one chain. But when we are going to another chain, it is not an atomic swap.
01:14:21.170 - 01:14:46.614, Speaker A: How you are handling that? Thing, even for the destination chain. So this slippage is actually for Cross chain. That means that, as you can see here, GMX and Arbitrum to Ethan optimism. This tokens, like 20 tokens is like $1,075. Right. So the final amount should not actually go below $1,075 with 0.5% slippage.
01:14:46.614 - 01:15:01.280, Speaker A: So if it does, the transaction fails and you get the money back on where you are. That's like any other slippage. Got it. But I can play around with the slippage to make sure. Yeah, I will get to your boots, short. Yeah. Okay.
01:15:01.280 - 01:15:47.038, Speaker A: One more minute. Okay. Any other questions? Let's see. Yeah, I have this link over there as well. And yeah, just like, go through these ideas and you guys can definitely come up with something much more creative, for sure. If you have any ideas and if you're still brainstorming as well. And you want to build on Crosschain.
01:15:47.038 - 01:16:40.094, Speaker A: Crosschain is like the need for the near future, right? So people would want I mean, it's ideal to build on Crosschain because there's a lot of need from end users to bridge between chains, because the chains are exploding right now. Right? So we have all these optimistic bridges sorry, optimistic chains roll ups, like optimism, Arbitrum boba and we're also going to have ZK roll ups in the future so that before the chains consolidate, the chains are going to explode in the near future, in the next one year or two years. So I think it's ideal time to start building on Crosschain or building Crosschain. DApps solving crosschain problems, because everybody's facing these problems, all of us. So, yeah, I wish good luck to you, all of you in this hackathon. All the hackers. I'll be around in our Lefi booth.
01:16:40.094 - 01:21:35.210, Speaker A: We have a game and we have merch, really good merch, by the way. And yeah, I'll see you guys over there. Thank you. It with MacBooks unit, right? It maybe plug out and put in again. Where is the guy? Automatically you full karuhar. Yeah, we are at its place. Wagara.
01:21:35.210 - 01:25:08.700, Speaker A: But I want it. But they gonna get a mirror. Mirror me ara mirror. Don't laptop as your laptop with ojiyoga. It. I think so check if this works. How about try another private laptop? See the laptop works or what's the issue? Because I think you kidding.
01:25:08.700 - 01:35:30.690, Speaker A: It's JMA Kiman. It's there. Bye. It. It. So I think it maybe in the Windows laptop, you can give us the access, email, ID net, connect output, laptop change here, left over. Hi password care directly the current issue, you know, the computer issues with the Mac, HTML with the Mac.
01:35:30.690 - 01:36:29.602, Speaker A: I have Linux. It'll take five minutes, but you know, it'll work. But I need HTML. I can stand up my screen and go, look, you can lap up here. Okay. That's needed. But the Internet should be I'm just trying to the data limits here are very high and like, the amount of data you get here every day.
01:36:29.602 - 01:40:23.820, Speaker A: I get them off Mira. Yeah. Marketing and limited data. I pay $20 a month. Yeah, welcome to the yeah, my presentation is completely willing. Forgive, support Nigeria, but you mean start. Imagine not having a USBA portrait.
01:40:23.820 - 01:42:50.320, Speaker A: Can we have, like okay, now it's loading. Working? It's working. I mean, no, it's tight, it's lightning. You need a type. Like, I've already sent a message to get a USB adapter. Other option, Bluetooth, but it might take a minute. I don't think we have it downloaded on your system.
01:42:50.320 - 01:45:31.020, Speaker A: But it's open in Google slides, right? File export out. Yeah, but oh, that might take that takes time. And it might take time. So the main ID, he forgot his password because you don't have Internet. The WiFi is just so slow. But I send it to my friend. Was working.
01:45:31.020 - 01:45:53.270, Speaker A: I'm on Osbot now. Is it working? Okay, speaker. That's supposed to be speaking right now. Data fixed. Cross. It is. I want to try and download you have it open? Okay, sweet.
01:45:53.270 - 01:47:06.320, Speaker A: We actually got the slides into that Windows system. Thank you so much for the camera. It I'll hook you guys up with Ethernet. Ethernet now. It's good. Negative. Hi, guys.
01:47:06.320 - 01:47:43.730, Speaker A: Can you guys hear me? We can switch to channel two. I'll just let them know they switch to channel two. Hi, can everyone hear me? You just have to switch to channel two. This is like a silent disco, but without the disco. Okay, sorry for the intense delay. There was a problem with the HDMI cable. But hope you guys are all fine and having a good time here at ETH India.
01:47:43.730 - 01:48:23.686, Speaker A: So I'm part of covalent. Covalent is a data API service, and we provide blockchain data to more than 40 blockchains. Close to 50 now. So today I'm just going to give you a quick introduction to what is Covalent, how you can start building on it, and what kind of data you can get. Before we begin, if you scan this QR code, you receive free Covalent themed ETH India NFT. So, yeah, there's no reason not to do so. You just need to sign up and register.
01:48:23.686 - 01:49:01.880, Speaker A: You get a free API key. You can start calling and using our API and you also get this NFT. So please go for it. Testing. Okay. Yeah. Okay, awesome.
01:49:01.880 - 01:49:38.478, Speaker A: So, as many of you all know, the future is looking MultiChain. In fact, right now, it's already MultiChain. And we believe that by 2025, there will be dozens of dozens of blockchain, layer one, layer two, app chains, et cetera. And there will be a problem. However, from a perspective of a dev, which is that we're going to have a data challenge. Right. Unless you're working purely in one ecosystem, you will probably need multi chain data.
01:49:38.478 - 01:50:03.090, Speaker A: And MultiChain data right now is difficult to access. Right. They are mostly stored in point query form. If you host your own node, obviously that's terabytes upon terabytes of data. And that's really difficult. And most of the data is not aggregated host on Smart contracts. And even if you call using Web Three JS or Ethers JS, they are point query little small Lego bricks.
01:50:03.090 - 01:51:02.230, Speaker A: So it's hard for you to get the high level picture, right? And most of the time if you are querying using some sort of SQL database, the queries can be really complex. So we've kind of abstracted that away from you as a dev, right? Especially if you've already built spend all your time, energy on UX, UI on your backend, solidity code, wherever, and you just need a quick way to get on chain data onto your front end or any other kind of client. Covalent is the solution for you. It's a single Rest traditional Rest API which allows you to get all kinds of blockchain data, like balances transactions, NFT data. It's queriable from the cloud. You can use all sorts of environments to call it. Technically there's no code required, right? We even have a feature where it allows you to download everything in CSV.
01:51:02.230 - 01:52:11.168, Speaker A: So it's super convenient for the analyst friends if you just want to download the data, put it on Google Sheets or whatever, and it enables you to go multi chain in a matter of minutes. How does it work? So obviously the blockchains host the data themselves and then expose to us via RPC nodes, right? Covalent is almost like the data layer. We host full archival nodes of every single chain and then we aggregate the data, package them up into a standardized model, and we serve them up to you in a Rest API form. So it's really simple for you when you use it. And it's used to power all sorts of applications, so on top of the fact that it'll make your life simpler, we are also used by over 40 plus developers and more than 3000 projects out there right now. So yeah, I'm sure you guys are dying to know how you can get started. So everything is our docs.
01:52:11.168 - 01:53:42.560, Speaker A: You can just check out how to use the API. From our documentation we have an API reference which allows you to call the API directly from your browser. Typically I would be exploring this, but because the Wi Fi is a bit flaky right now, I would just be skipping that and maybe I'll show you a little bit about what the response looks like using some of the slides here. And also we have also built out code templates that enable you to just code along or quickly drag and drop code snippets into front end, like react front end or something to see what kind of data you can get. So this one for those of you who are familiar with postman, right, getting all sorts of data through this lovely interface, we have built out this postman collection that enables you to sample all of our endpoints from the comfort of your postman workspace. So you just go to this URL Covillianhq, postman Co and you will be able to find this collection here and it has all our endpoints with the chain ID, with the Wallet addresses pre configured. So all you need to do is to press the Send button and you'll be able to save the response to study in the future, you'll be able to see the response structure, does it have the data that you need, et cetera.
01:53:42.560 - 01:54:39.116, Speaker A: Right, so it's probably a bit small for you to see here, but there are four categories of data that we provide in general, that's balances data and that includes NFT balances as well. There's NFT data, there's also transactions data and what we call base. So that allows you to get all log events of smart contracts, for instance. Right? And also XY equals to K, which is the Dex data. So you can get all the liquidity pools, you can get all the amount of seven day liquidity in a time series, you can get 30 day fees, et cetera. So if you're looking for inspiration, you can build NFT marketplace very easily. And that's just a matter of a couple of API calls.
01:54:39.116 - 01:55:58.840, Speaker A: All the data is there, right. You don't have to, I guess, make 50 or 100 queries, which is what you will be doing if you're using the likes of JSON RPC. You can build D five portfolio trackers like Zappa, right, which allows you to see all your token balances and more. So all these are the endpoints that allows that loading. You can build the likes of Wallets. In fact, our balances endpoint is one of the most popular endpoints that we have that allows you to very quickly get all your token balances as well as NFT balances, as well as the NFT metadata, which is all where all the images, et cetera are stored. You can build sites like CoinGecko, which has the top tokens, the amount of liquidity, et cetera.
01:55:58.840 - 01:56:46.024, Speaker A: So now for this hackathon, we have also a pretty juicy price for you guys. So you have 10,000 USDT or USDC price pool and the top three prizes get respectively three K, two K and one K. And then we have the $4,000 price pool for the remaining projects. And all you have to do to qualify for the price pool is to make a meaningful call to our API. And as long of course, to qualify for the top prizes, you have to have a good use case. Your use case has to be novel. The problem they are trying to solve should be a genuine and good problem, of course.
01:56:46.024 - 01:58:13.410, Speaker A: And we also judge on the quality of your implementation. But of course, given this to be a hackathon environment, most of the time we are judging on the quality of the idea itself. Right, and then you need to use the Covalent API. Yeah, typically I would try to give a quick demo and if I'm connected, okay, I am connected to the internet. Let me just oh yeah, maybe we can second hopefully it allows me to call something without an API key here. Oh, there we go, we have the response here. Let's open it up.
01:58:13.410 - 01:59:00.620, Speaker A: I need a JSON formatter. I wouldn't get you to suffer through that. But if you see here, this is the sample response of our balancers endpoint. All it is is one query. The query string passes in the chain ID which in this case is one and then the address it resolves the ENS which is demo ETH. But you can of course put any address here and then it gets you the token holdings of this address. And as you can see, this address actually holds 122 tokens.
01:59:00.620 - 01:59:55.250, Speaker A: 123 including zero. And each of these items are all the information you need about the token, you know, USDT. And this is the contract address of USDT. And this is the balances in Way. And all you need to do to get the ETH is to take that and divide by ten to the power of the contract decimal here. And it also holds some frontier token, this amount of frontier token, some native token, ETH. Right? Fairly straightforward, you can get the historical portfolio value of any address so that will allow you to build the chart with ups and downs of all the tokens that you hold.
01:59:55.250 - 02:01:34.378, Speaker A: You can get all the NFT holders of a particular collection as of any block height, right? So that's very useful if you are doing on chain NFT analytics of let's say who are the token holders of Paji penguins as of January this year, right? Any compared to now maybe. And so for NFTs you can get all the NFT transactions you pass in a NFT contract address and it will give you all the transfers of the NFT that is made. So of course get all the transactions et cetera, et cetera. Now just one final thing before I wrap up. So yeah another thing is you go to that I believe it's this URL I need to sign in but if you go to that URL you will be able to fork the Covalent postman collection which is a super neat tool, the one that I mentioned just now. So we also have built a web3 resources which is like a starter pack for you to quickly integrate it into your app. So this is like a react library.
02:01:34.378 - 02:02:40.188, Speaker A: We have built out a couple of components, right? So for token balancers you see that this is the simple react component that will just input in the address and it gets you all the token holdings. So it is a component here that you can plug and play. This is an ERC 20 transfers component. You see all the transfers made of all these ERC 20 tokens. This is a token holders component and this is a transactions component you pass in the address. You see all the transactions of this wallet. So each of these are built just simply using one endpoint, one call, right? Yes, that's about all that I have.
02:02:40.188 - 02:03:52.528, Speaker A: Thank you for staying through with this. I'm opening up this last bit of time for any questions that you may have. If not, for those of you who have just arrived, you can still scan this to get a free covalent at ETH India NFT. Any questions? Anyone, feel free to ask. All good? Okay, it thank you, guys. I have to sign out. Oh, yeah, I'll just sign out.
02:03:52.528 - 02:04:49.610, Speaker A: Let me see. Let me just refresh and try. No, bro, it's in the guest one. Okay. Did you sign up? Yeah. Promote. Yeah.
02:04:49.610 - 02:05:45.290, Speaker A: Thank you for drinking. Whoa, that's a big screen. Can we resize it? Do you want a going to do it 4K? God knows. No. Do we have a visual? Working screen maybe? Nice me drag this one over there. No. Cool.
02:05:45.290 - 02:06:17.970, Speaker A: More HDMI issues. What's the fucking 4K? Yeah. Do you want me to tone it down to 1920, 1080? How about now? Cool. Oh, there we go. Beautiful. Thank you for swapping my main monitor. Yeah, what's up? Yeah, do you want me to just ask them to channel two? Okay.
02:06:17.970 - 02:06:32.214, Speaker A: Yeah, like loud or okay, cool. Can we see my screen? We're good. All right. If you put on your headphones, it's channel two. Sweet. Cool. All right, let's see.
02:06:32.214 - 02:06:47.594, Speaker A: We are a little behind schedule. Am I audible? Yes. Awesome. I'm going to get a lot of thumbs up from you just because I'm nervous now. It's okay. Let me refresh this and ask for chaos, and then we should be good to go. All right, so hi there.
02:06:47.594 - 02:07:07.678, Speaker A: I forgot my clicker. That's my first fail. I'm Luke from ENS, or otherwise known as zero X two two five, F 137127, D 906-77-8314, BC seven. Okay, I'll cut it. Otherwise known as loop computer. And that right there. Or luciman's ETH.
02:07:07.678 - 02:07:48.350, Speaker A: And that right there is the core premise of ENS. ENS the thank you. Other room. ENS, the ethereum name service, is a name service on top of ethereum that simply turns human readable names like Nick ETH into machine readable addresses such as zero X B eight, C two, S two. Yeah, that and backwards. So your address into your ENS name as well as profile pictures. So this now means that all of these DAPs that in the top right corner show your zero X two two five, F 1373, C three, B five address will simply show loop computer as well as your profile picture.
02:07:48.350 - 02:08:10.786, Speaker A: We don't want to see any more zero x addresses ever again. So before you run off, here's a couple of talking points that I will be covering during this talk. If you're sitting there and you're going, yeah, I already know ENS, and this is not going to be interesting, hear me out. Wait till the end of this. Don't run off. Wait till the end of this slide and then you can judge. So I'm going to be talking about what ENS is and how it works under the hood.
02:08:10.786 - 02:08:58.902, Speaker A: Our latest DNS integration and the ability to now take your computer, your your IO, your XYZ, your Dev, or any DNS name, web two name you have and bring it onto ENS and use it as your ENS name while it's still a web. Two domain name, records and resolvers and the ability to custom program your ENS name and your avatar and all your records subdomains and a whole ton more cool stuff. Cross chain interoperability, the ability to have stuff on other chains, off chain and have your toaster control your computer. How to implement all of the above? Well, not in detail because we have a limited amount of time, but if you want to know more, you can always ask me and how to get your first ENS. So before all of that, I want to cover some milestones. These numbers are a little out of date. We've gone above and beyond after these, but we've had 2.75
02:08:58.902 - 02:09:24.480, Speaker A: million ENS names registered recently, 506 official in quotation marks. Integrations. These are integrations that I'm in group chats with. These are integrations that are on our websites and all that cool stuff. But there's a ton more sites out there using ENS. If you you know, we have a bit of a bigger project we're taking off, we've got VC funding or something along those lines. And you want to integrate with ENS and you need help or you just need someone to hold your hand and make sure you don't blow up.
02:09:24.480 - 02:09:46.920, Speaker A: I don't know, things message me, we'll start a group chat. We'll have a good time. And 593,000 individual owner addresses. So let's talk about that practical example from earlier again. Right, this is Tic TAC so a tic TAC toe app that I built to ETH Paris a little while ago. Thank you, I appreciate it. Too much fun.
02:09:46.920 - 02:10:09.626, Speaker A: Let's not talk about the design. But it works. You can play TicTacToe and it does ENS name resolution. And as you can see, my other two wallets don't have ENS names. And if you check the top right corner right there, you can see V three X E, which is at the time I took this screenshot, my primary ENS name. So ENS allows you to have multiple names and you can set your primary name and change it as you go. So I have Luke computer, I have Lutman ETH, and I have VCX ETH.
02:10:09.626 - 02:10:38.422, Speaker A: So I'm on polygon. My Tic TAC toe game is on polygon because I don't have the time. I spent 4 hours to build this during a hackathon. I was high hypothetically because it was Paris and I decided that I wanted it on Polygon because ETH mainnet fees for my very not gas optimized app were not going to happen. So here's our app and now let's say you're sitting out there and you're like, okay, I want to try this out. How do I create a game? You press the Create game button. You get this ugly screen.
02:10:38.422 - 02:10:53.500, Speaker A: And then right there, you can either type in their address or their ENS name. So right here we enter Nick E. You can see his profile picture, and you can see his address. Easy ENS. So, big flex. I am now playing toe against the founder of ENS. It's going great.
02:10:53.500 - 02:11:18.434, Speaker A: Above and beyond my bad tic TAC toe skills and the fact that this ended up in a tie, I think I know the winning strategy, but I keep forgetting it's. Okay, this is a simple use case of ENS. We've got names, we've got profile pictures, and the DAP has nothing to do with ENS. If you do want to build something ENS specific, you're more than welcome to. But this is just your average DAP and ENS integration. So that's the core idea of ENS. In this specific example.
02:11:18.434 - 02:11:42.006, Speaker A: It provided the username and avatar. But we have a whole lot more than that. We have email, we have your GitHub, your discord, whatever other things you'd like to link to it. So this is me, Luzma ETH, or loop computer, or V, three x E, zero X, two two five F, 1373, blah, blah, blah blah. And my profile picture, as you can tell, I do not like saying out loud addresses. So loop computer it is. And this is Nick ETH.
02:11:42.006 - 02:12:28.658, Speaker A: And Nick ETH is composed. I'm going to use him as an example because he has a lot more records set than I do of a bunch of different records. So it's not just your ENS address, it's your ETH address, right? Your zero x, BHC, blah, blah, blah, blah. Doge address, because why not have doge address your Bitcoin address? Because why not have a Bitcoin address, your Litecoin address, and like a whole bunch of other chains that we support. Your website, if you have a centralized website, your email, because email, your discord, Twitter, your Reddit, your telegram, your GitHub, your ENS delegate link, in case you want to be an ENS delegate and you have a forum post about it, your avatar and a whole bunch more ENS names have key value storage. So all of these, if you lowercase them, except for the coins, they have numbers. But if you take website all the way to avatar, you lowercase them and you put them in your ENS name and you put them in the records, they're just key value storage.
02:12:28.658 - 02:12:45.310, Speaker A: You can add anything you'd like. There are proposals out there. You can make proposals. You can standardize these things if you choose to. So there are a couple of projects out there standardizing having audio in your ENS name. There's a couple of projects out there standardizing all sorts of cool stuff, storing KYC in your ENS name, whatever you'd like. And it's optional, of course.
02:12:45.310 - 02:13:18.618, Speaker A: So how does all of this work? ENS is composed of a couple core contracts and their logic is relatively simple to understand. It simply stores for every name, name, looseman ETH, the registrants, my address when it expires, and a resolver address. That resolver address is just another smart contract. In this case, zero X 49 seven I happen to know is the public resolver. It's a contract that we deployed. It allows you to do key value storage and it simply just checks if you're the registrant of a name. So it stores this for me, it stores this for Nick, it stores it for Vitalik and it stores it for everybody else out there that has an ENS name.
02:13:18.618 - 02:13:41.918, Speaker A: And that's the whole core contract. So when you have your library and your front end and your app is, you know, I want to invite Nick to a tic TAC toe game. I'm looking for Nick ETH. It'll go over there, it'll grab this Nick ETH from the list and right there we go. Nick ETH registered expires and resolver. It'll look at the resolver and it will reach out to that smart contract. This is the public Resolver smart contract.
02:13:41.918 - 02:14:17.340, Speaker A: And that smart contract will simply return all the information aforementioned. So we now have all of our information stored in that smart contract. Cool. This is the public resolver, like I mentioned, but this can be your code, this can be your contract. Everything from here on outwards can be fully customized. What this means is that your contract can return your ETH address and an avatar based on the day of the week, based on your profile picture, your portfolio, that is your profile picture, whatever you'd like to do, what NFT club you've joined or anything along the lines. Cool.
02:14:17.340 - 02:14:35.620, Speaker A: So I get it, this is cool. You sit out there and you're like, yeah, ETH Mainet is cool, but ETH Mainet is not sponsoring this event. Polygon is. So you want to use the fancy things and we get it. The ENS core team wants to use the fancy things too. All of these and more. And you can.
02:14:35.620 - 02:15:16.254, Speaker A: There's a little thing that we released about halfway throughout last year and it's cross chain interoperability protocol, CCIP for short because nobody is going to say cross chain interoperability protocol every single time they want to talk about it. So CCIP works very simple. It allows you to store your data on chain off chain on a roll up on a layer two, which these are all kind of overlapping terms using zero knowledge, using Http if you'd like HTCPCP to control your coffee pot, using your toaster or anywhere else you would like. It is ridiculously powerful. So this is essentially how it works behind the scenes. I'm going to give you a really quick rundown. It's all done.
02:15:16.254 - 02:15:34.714, Speaker A: Client side these slides as well. If you want to take pictures, it's great, but they're also up on loop show. It's https loop show. You'll find all the slides as well. This right here is Ethers, a library that most of us use in our front end and our back end. And Ethers will reach out to ETH mainnet. It'll go, I'm looking for Nick ETH.
02:15:34.714 - 02:16:03.470, Speaker A: Nick ETH will have the name, the registrant expires and resolver, just like I mentioned before, the resolver. It'll go to the contract and it'll say Hi, contract, I'm looking for Nick ETH. Get me its avatar. So get avatar, sorry, gettext Nick ETH avatar or gettext Nick ETH GitHub easy. The smart contract will then throw a custom error off chain data and it will say you need to go to polygon to this smart or sorry, in this case, optimism. Optimism. This smart contract run this function.
02:16:03.470 - 02:16:43.494, Speaker A: So Ether says, oh shoot, the transaction failed, but I know how to handle this error code off chain data. So it reaches out to optimism or Polygon or HTP or an RPC endpoint or whatever chain you'd like, whatever. L one, l two, roll up, name it. Optimism or a BNB chain or any other network that you'd like will then execute a function, return some data, look it up in a database. God knows what it's all up to. You run your code over there. So if you run the registrar on Optimism, or if you run subdomains, or your dow is based on polygon, all of that, and then it will return with oh yeah, by the way, this is his avatar, and send you the URL, IPFS, Rweave, regular HTP.
02:16:43.494 - 02:17:20.294, Speaker A: Same goes for addresses, for Bitcoin, for litecoin, for all of the other cool stuff. So I recently built a centralized version of this, which contacts a centralized API endpoint on one of my servers, and it is Twitter NGO. So I made subdomains of Twitter NGO. This was another 48 hours. I quickly coded it together because I felt like a project. And what happens is, if you take anybody's Twitter username, provided they have ENS in their name, twitter NGO, it'll go to the ETH mainnet smart contract. The main net smart contract will say you need to go to Luke's server, it'll go to my server, and the server will then use my Twitter API key.
02:17:20.294 - 02:17:48.730, Speaker A: Yes, you need a Twitter API key for this, but it works. Use the Twitter API key, make a request, get the user's ENS name, get their user's address, and then return all the information. So this now means that any Twitter user, provided they have an ENS name or an address in their actual username or description, is also automatically an ENS name. Congrats, you have a subdomain now. Sweet. So an example is Nick Johnson or Nick Sdjohnson twitter NGO. That's Nick's username.
02:17:48.730 - 02:18:29.030, Speaker A: And because he has Nick ETH in his Twitter bio, all of the fun stuff happens in the backend. We've resolved it. It shows his ETH address, it shows his Twitter, it shows his profile picture and it shows his description. Cool beans. So this is obviously super cool, right? But I understand most of you are sitting here and you're going where do I start? What is this? So there's a ton of libraries out there that already support ENS. If you're building a DAP, you're probably using Ethers or web3 JS, or if you're doing something in the back end, you're probably using web3 Go or web3 J for Java or anything of the sorts, right? Or just Ethers because it works in the back end as well. Wagme provides react hooks, wrapping ethers.
02:18:29.030 - 02:18:59.254, Speaker A: Super nice. So if you use Rainbowkid, if you use web3 modal, if you use any of the sorts, ENS is already built in and it's going to be one line of code away. So all you do is for any of these cool libraries. And there are more than this. These are just ones I have worked with to make sure CCIP DNS and all of the other cool stuff is integrated. It will automatically have a get ENS name or use ENS name, use ENS avatar reactbook for Wagme, for example. I really like Wagme because it makes DApps so easy.
02:18:59.254 - 02:19:33.374, Speaker A: You simply just for forward resolution, you simply just say use ENS address address v three x e in case I try and invite v three x ETH to a game and it'll just output zero x 257373 blah blah blah blah. Cool. If I do it with Ethers, it's provided up resolve name and there's a bunch more code examples in our docs if you want to do reverse resolution. So showing your avatar and profile picture, look up address or use ensname and it will simply just work. It's that easy. And there's a ton more ways to do this uz avatar, et cetera, et cetera, et cetera. And then I haven't even covered subdomains yet, so my talk needs to be short.
02:19:33.374 - 02:20:01.818, Speaker A: So I've yoinked out these slides. But there's more on the interwebs if you'd like to find some. If you want to know more, check out the documentation. Now I see you going, yeah, this is cool, ENS or whatever, but how do I get one of these wrong slide? How do I register one? So you use the ENS manager. The ENS manager is our DAP. It's both available, decentralized and centralized ENS domains and it allows you to register ENS names. But ENS is fully on chain and we are a true public good.
02:20:01.818 - 02:20:33.678, Speaker A: Meaning all the money spent goes back into the community, goes back into the ecosystem and back into other public goods. AHA, I work for a nonprofit. But the ENS Manager is not the only place you can register ENS names because we're fully on chain. There are community projects like ENS Ferry where you can give names to other people, like Rainbow that literally has ENS names in their wallets, where you can register them, set them, edit your records and all that cool stuff. Coinbase they give out CB, ID, subdomains lens, any lens name. XYZ is a valid ENS name. Argent gives out subdomains of argent XYZ.
02:20:33.678 - 02:20:50.230, Speaker A: So a little bit of alpha. We're working on a new manager, not to tease too much. It should be out ideally end of this year, beginning of next year. It's alpha ENS domains, if you'd like to check it out. It's purely on Gorely at the moment, but the real ENS manager works around about like this. Here's what it looks like. It's app ENS domains.
02:20:50.230 - 02:21:12.350, Speaker A: You go to the search bar, you type in the name you want. So Alice ETH in this case. And then there you go. Here's your registration screen. So any ENS name that's five characters or longer is $5 a year, converted to ethereum. So we use a chain link oracle and we figure out what the current price is. And then it's $5 a year plus whatever the estimated gas fee is right now.
02:21:12.350 - 02:21:53.130, Speaker A: So in this case, you can see that Alice is going to cost me about $9. This is on testnet, so it doesn't cost me anything. I press Request Register and we do it in three transactions, or at least two transactions in three steps. Transaction number one is a commit transaction. The reason we do this in two transactions is to prevent anybody, whether that's somebody listening to your JavaScript code, somebody looking at your screen, somebody listening to your network connections, somebody running the EMS website, or anybody in between will be unable to see what name you're registering until you actually own the name. This means that anybody who might be spying on you, might be listening to you, might have bugged your computer, will not be able to front run you and steal your name before you can register it. So the first transaction hashes the name and commits it to the chain.
02:21:53.130 - 02:22:10.850, Speaker A: Next, we wait 60 seconds. This is done to prevent front running and for stability. After those 60 seconds, you make your second transaction and you send your actual $5 worth of ETH. And now you have the name easy. So your profile looks around about like this. For the new alpha, it looks like this. It's super cool.
02:22:10.850 - 02:22:29.526, Speaker A: And you have your avatar, you have all your records, you can edit them. The current manager allows all of this as well. It just looks less fancy. And you can do all sorts of cool stuff like setting your avatar, which is super easy. So this is the current manager. All the way in the bottom right there, you'll see add and edit record. You press on that and then you scroll down right below these text records.
02:22:29.526 - 02:22:46.270, Speaker A: I could show you if the Internet was actually stable. It sets your avatar. So you just put a URL there. This can be an IPFS URL filecoin URL, which is IPFS an Rweave URL an HTP URL anything of the sorts and. Then you have your avatar. Easy. So I'm almost at the end of my talk.
02:22:46.270 - 02:23:06.930, Speaker A: Don't worry, the next speaker can come up here in a minute. I have one last thing I want to do and I apologize in advance to everybody here but you've been rickrolled. My name is Luzman. Studies luzman's NL On Twitter Luke contact has all of my contact information. If you want to WhatsApp me, telegram me, twitter me, whatever you'd like. Docsudynest domains has more of the information. Happy hacking.
02:23:06.930 - 02:24:31.520, Speaker A: Thank you. Linux you it can be both. Did your way check madam. Check mike testing one it's okay. Hello. Check mike testing one, two, check. Not looking really nice, especially like that.
02:24:31.520 - 02:26:28.068, Speaker A: Just hold on a second. But it's giving some red tint no sir. That people are any option to color change to what? Any, if any option to color change the color? No, it's okay right now. Stand back. Put it on it's here. Okay. Hey guys, can you hear me? Channel two.
02:26:28.068 - 02:27:16.868, Speaker A: Everybody cool? Fine. Okay. So lovely to be with you guys. My name is Carlo, I'm a senior lead solution architect at Cartesi. And today we're going to talk about how can we do things using our tech, right? So basically what we will cover is an overview of Cartesi, an overview of how you can develop with it. And I'm going to do some comparisons on how you do web free development, web to development and then how you do it with Cartesi, right? And a quick intro to Cartesi rollups which is the product we use for enabling our tech. So just an overview of what this stack is about is this so basically the objective is having this really rich code that you can use for decentralized applications.
02:27:16.868 - 02:28:06.996, Speaker A: So if you develop on Solidity, you probably have faced a lot of issues like the size of transactions or lacking libraries that do stuff that you're usually doing on web two, like parsing a string or something like that, access and database, all this stuff. And that's what we want to bring. We want you to have the same power and expressiveness and computational power that you have on web two. Only available on web3 in decentralized fashion, right? So if you take a look in here, this is a really simple example of a DAP in Cartesi. This is an echo DAP. Basically what it does is whatever you throw at it, it just throws back at you, okay? And if you are into Python, you can see that this code looks just like any regular web two Python code, right? That's because we wrap the whole framework and how we interface with it in a simple Http interface. And that has a couple of reasons.
02:28:06.996 - 02:28:42.976, Speaker A: Because most developers, they are not web3 developers, right? You have a really steep learning curve and in order to make it easier for web two developers to onboard, we made this decision of providing this nice Http interface. You comply to it, you're used to it, and now you have a decentralized application, right? This is just a preview. I'll just explain stuff and go back to this later. Okay, so let's go from overview of Cartesi. Basically, we're bringing this new OS and we think it's pretty neat. So we love ethereum. Ethereum has security, it has decentralization with censorship, resistance.
02:28:42.976 - 02:29:49.064, Speaker A: We have all these thousands of nodes validating everything. Anyone wants to tamper with something, it's really hard because you have to lie consistently with thousands of nodes in order to do this. But Ethereum also has its drawbacks, right? Because since everyone on the network is validating everything, it means that all the nodes on the network are producing all the computations. And that makes it very limited. Because if you have the Ethereum network and you don't have tiny transactions, well, just throw a Y one loop at it, you just halted the entire network, right? Or if you don't make it really expensive like this, well, then you can just flood it with useless tiny computations and you halt the network anyway, right? So the idea on Cartesi is, can we get this really nice security guarantees of the blockchain, but enable really large computations and also bring better tooling for development. And that's what we go for. So how do we do this? Well, basically what we do is have this special VM we call the Cartes machine.
02:29:49.064 - 02:30:34.810, Speaker A: And this Cartes machine provides a Linux runtime environment and the computations that happen inside Cartes machine are secured by the blockchain. Right? So this cartes machine is based on RISC five. And what happens here is RISC Five is an open hardware specification done by the guys at Berkeley. And it's really similar to what we have on our computers, on our cell phones, right? And because of that, it's compatible with Linux. And another thing we do is that unlike in Ethereum, in which everything is running on the same VM, so the AVM basically is running all the applications. If some applications use more resources using a lot of things, the other ones lose it. We have a VM per application.
02:30:34.810 - 02:31:18.516, Speaker A: So a VM per application with a regular processor and Linux, well, we just enable a lot of things for you to use in there. And the Cortez machine, in order to do this, needs to be deterministic. So we put a lot of effort on making this risk. Five based machine deterministic like clock, floating point instructions, all the stuff that could generate entropy. We just had to make it deterministic. And yeah, as I was saying, to reach this stage in which you have a lot of computational resources, what happens is we rely on local consensus and we have a ropes solution on top of it. So what happens is that unlike an Ethereum in which everyone on the network is validating everything, on Cartesi, we have different sets of validators per application.
02:31:18.516 - 02:32:04.144, Speaker A: So if you're interested in an application you can validate it. If you're not, you just let it go. You don't have to watch and validate everything that's going on in the network. And as I said, so consensus is basically really strong on ethereum and others because if you want to tamper with a computation it's really hard to lie because you have a really large amount of nodes. And I just told you guys that in order to scale, what we do is not everyone validates everything. So you can have a really small subset of the network validating a certain application. So how do we keep it secure? So basically when there's a dispute and you don't agree with result, it's not a matter of a local consensus with the people that are validating that application and you just pick up the majority and that's consensus? No, what we have is a dispute protocol.
02:32:04.144 - 02:32:53.488, Speaker A: We call it the verification game in which whenever there's a dispute, what we do is basically the people that are disputing since they are running the same application on the same cartes machine and deterministic, they should reach the same result. If they didn't, it means that at least one of them did something that they shouldn't. So we have this interactive protocol called the verification game in which it has two parts. So the first part is it tries to use this cartesian machine on both parties off chain and they post a signature of the state. So we basically pick up all the cartesian machine state with Ram disk, even processor state, like the instruction counter everything. We map it to Ram and then we divide it in 4K pages. And these 4K pages are hashed and those are the leaps of a merkle tree.
02:32:53.488 - 02:33:37.940, Speaker A: And then this root hash of the mercury represents the whole state. And you use this to check if you agree or not with the state of someone's else cartesian machine. So when there's a dispute, what you pick up is you pick up the whole computation. Let's say we have, I don't know, a million for instance, cycles on that computation. So we do an NR search to search what's the first instruction we don't agree on? What we do is, okay, I'm going to post my root hash of the Merco of the cortez machine at 100 million cycle, 10 million cycles, sorry, 20, 30, 40, up to 100 and then you're going to tell me, okay, so up to 40 million, I agree, 50 million onwards doesn't match. So now we know the divergence is between 40 million and 50 million. Then we drill down.
02:33:37.940 - 02:34:14.156, Speaker A: So 41,000,042, 43, 44, up to 50 and we go there and each time we divide the search space by ten. So in logarithm number of interactions, I'll know it's instruction 43,003,007 that we don't agree. Cool, now we know the instruction we don't agree, but who did it, right? Right? Because I'm claiming something. You're claiming something. Else. That's a real special part. So what we did, and this is the second part of the process, is whenever we reach that instruction, it's not my word against yours, we just pick up that instruction and we have an on chain implementation of the Cartez machine.
02:34:14.156 - 02:35:14.852, Speaker A: So we had this huge effort of making an onchain set of contracts that can emulate each instruction of the Cartes machine. And this on chain emulator is the one that actually picks up that instruction and executes it. So it's not me, it's not you, it's the thousands of nodes on Ethereum or whatever based blockchain we're using that are going to say who did the execution, right? So this way we can have a really tiny set of validators and computations, really large ones, but still maintain the guarantees of the strong guarantees of security of the blockchain, right? So as I said, it's an optimistic lob solution in which we build. So basically we do all these computations inside the Cortez machine and from time to time we just pick up the signature of the Cartez machine and put it on chain. If someone disputed, okay, there's a verification game. If not, we move on that's set on stone and you can keep up the computation for Next stuff. So how's the development of this? So you guys are used to web Two.
02:35:14.852 - 02:36:08.820, Speaker A: Web Two is really simple. You have a browser, you use some framework like, I don't know, angular or React or whatever you want the tools HTML, CSS, JavaScript, as based technologies, and you do these nice interfaces and then you interact with a back end, right? Generally using http or HTPs. And then you have a service, the service might use a database, might use someone else's API, this kind of stuff, right? Really simple. Now when we go to webfree, we still have a similar front end, but now we need a special library to interact with the blockchain. Generally we have something that implements the JSON RPC protocol. So E first, web3, JS something else. And then instead of talking to a backend, this guy is actually talking to the blockchain, like a node on Ethereum or maybe a broker like Infuria or Alchemy or something like that, right? And as you guys know, you have multiple limitations and processing all this stuff.
02:36:08.820 - 02:36:54.608, Speaker A: It's very hard to look for data. That's why we have services like the graph and stuff like this, which are very popular, help you on the indexing and this kind of thing. And how does it look when you develop with Cortez? Well, basically you still have your front end in which you use whatever technology you want. So if you have a browser, you can still use angular, view or React, all the stuff. And then you have a set of libraries to interact with the framework, right? And this framework there, then it has a real nice machinery which takes all the abstraction of the verification game of all this stuff from you. And inside the Cortez machine we actually wrap, as I told you guys, all the framework on an Http interface. So we have this Http dispatcher service, which is the one that you're talking to when you're developing your application.
02:36:54.608 - 02:37:33.384, Speaker A: So from your development point of view, you're just talking to a Http interface and that's it. You don't have to care about the blockchain, about reorgs, about any of that. We take care of that for you. Okay, so just going a bit deeper on how this works. So those libraries I said, they basically use three different interfaces. So we still need a JSON RPC to talk to the blockchain because whenever you're trying to reproduce computation, well, you need the inputs, right? So you have a data availability problem if you're not using the blockchain. Let's say I'm storing my input on IPFS, for instance, and then you say I cannot do your computation, why? I don't have the inputs.
02:37:33.384 - 02:38:30.560, Speaker A: Okay, from the blockchain point of view, there's no way for you to say it's me lying about it not being rPFS or it's you lying that you didn't put it in there. So that's why we need a JSON RPC interface and we provide inputs through the blockchain. The second interface we use sorry, the second interface we use is a HTP Rest interface and that's used for something equivalent to ethereum calls. Right? So we have this Inspect interface that on this Inspect interface, basically we allow you to directly talk to the cartesian machine without any fees, anything, it's just Http connection directly to it and you can do whatever processing you want to query for state. So let's say you have a chess game. For instance, if you open an application on mobile phone and you want to know if you have ongoing games and what's the state of the game, you probably need your client to go there and look at a GraphQL with something or an indexing or go directly to the blockchain. Check that you have a transaction which you started a game.
02:38:30.560 - 02:39:31.488, Speaker A: Check all the moves that our players did until you have the current game state and you're actually good to go. Right? So this inspect interface is to handle things like that. So instead of doing that, what you do is you go through this Inspect interface, you just call it the cartes machine, you give your address and you say hey, what's up? And then inside the cartes machine you can process it on whatever language you want, python C plus plus regular backend, and then you can check, oh yeah, you have an ongoing game because I started it in the database and yeah, this is the game state in a JSON and it's white player's turn. So much easier than just going through the blockchain trying to reconstitute the data or using something like the graph to index a lot of data, right? And the third interface in there, which is the graph, is an interface that we use to ease the outputs of the cartesian machine. So the cartesian machine basically use reports, which is something you generally return when you're using this inspect interface. Then you have notices. Notices are a mechanism really similar to what we have on Ethereum Events.
02:39:31.488 - 02:40:18.772, Speaker A: So when you want to have a statement and it makes sense forever, like, I want this match or something like this, notices is what you want to go for. And then we have this third interface, which is Vouchers. So what Vouchers are is a way for you to emit a transaction to interact with the blockchain from within the cartes machine. So since the cartes machine is deterministic and doesn't have outside interfaces like Internet and stuff like this, inside the cartes machine, you just do your transaction and then you put it on a Voucher. And the Voucher is a really cool mechanism because you query it on GraphQL. Anyone can enforce it because after all, it's a transaction that's signed by the application itself. And then we have an incentive mechanism that when you submit the Voucher and enforce it, you get rewarded by it.
02:40:18.772 - 02:40:49.532, Speaker A: And we got all these nice smart contracts on the framework that check if the Voucher is valid, if it was submitted already, and all these guarantees that we should have. Right? Okay, so let's go back to that initial code. So how does it look like? So basically, this is an echo application. As I said, it's a really simple one. Whatever you throw at it, it throws back at you. On the left side, we have an example using this front end console that's available on our Apple. So the URL is down here, but you can also query me for that later.
02:40:49.532 - 02:41:16.128, Speaker A: Also available on our site. So it's a simple application done in TypeScript that basically implements all those freeze interfaces I shown. And on the right side, we have a basic echo application written in Python. So that's the actual decentralized go, right? So what we have in here, if you take a look, is first we start using this front end and sending a payload. So hello there. So, from the blockchain point of view, we don't know what it is. It's just a binary output, binary input.
02:41:16.128 - 02:42:10.900, Speaker A: But your application knows that's a string, right? So inside your application, that's regular Python code, as I said. So we're importing OS because after all, it's a Linux machine. And that service that I mentioned that has all the wrappers in HTP interfaces, well, basically, this server is listening somewhere and we settle an environment variable with it. So we're using OS environment to load up that variable. And we also use requests so people familiar with Python know it's a really well known HTP library, right? And okay, using that OS now, we're picking up that environment variable so we know where to connect on the Cortesi Http service. And now we have this dictionary here in which we settle Advanced State and map it to a method called Handle Advanced and Inspect State and map it to Handle Inspect. So advanced state and inspect state are payload.
02:42:10.900 - 02:42:43.216, Speaker A: Whenever you receive an input on the Carte machine, it can be from two different sources. So it can be this input that came through the blockchain and is actually advancing your application state, or it can be a direct query. You do, for example, that chess in which I said, so do I have any game? Something like that. Inspect Host. It will come with this metadata as Inspect State. So you know it's something that's going to be thrown away afterwards, right? And the basic structure is you have this infinite loop. And this infinite loop has an iterator, okay? In this iterator, you're doing two things.
02:42:43.216 - 02:43:09.992, Speaker A: When you call that Finish endpoint, you're putting a payload that's saying what you did with the previous input. So let's say we're playing chess and I just do a legal move with the queen. Well, shouldn't happen, right? So you refuse this input. So in that payload, you're going to say that the status is reject. Now, if you provide me with a valid input, I'm just going to accept it. And that's the input of this endpoint. Now what's the response? The response only comes when there's something to process.
02:43:09.992 - 02:43:42.292, Speaker A: So once you call this guy, it just pauses the Cartes machine. And the Cartes machine is woken whenever the framework has something new for each process, either Inspect or a new input for the blockchain. Right? And well, this response there, then you parse it. And as I told you, you have a special header in there, Request Type, which can be either Advanced State or Inspect State. And given that, we're going to use that dictionary in there to map to the right method to handle it. And then we just call this method so Handle Advanced, which is the one we call in case it's Advanced State. It's an app application, really simple.
02:43:42.292 - 02:44:09.516, Speaker A: So it just picks up the payload that you received. It creates a new dictionary with a payload entry and putting whatever you receive in there. And then once again, a simple call. So you do a post on this notice endpoint with the payload that you've just set on that dictionary. And that's it. You just immediately your first Cartesi event, which is a notice with the payload you received from the blockchain itself, and you return accepted because, well, that's valid. So let's go forward.
02:44:09.516 - 02:44:47.768, Speaker A: So on the Handle Inspect, which is the case for the Inspect API, which is Ephemeral, same stuff, only that this time we're picking up this payload and we're putting on a different endpoint on Report. Report is this other interface in which I told you guys that it's meant to be Ephemeral. So whenever you do a report, it's not stored, it's not there in forever. It's like an ethereum call response, right? And yeah, that's it. After you process it, we just set up that finish status to accept or reject and do it again. So now on the left side, once we process this, what happens is we emitted a notice in there, right? Because we just sent this payload through the blockchain. Hello there.
02:44:47.768 - 02:45:20.336, Speaker A: We got in there and a notice was emitted. So we can still use this front end application and use this really nice command yarn start to notice list. And what this does is it goes to the cartesian node to the GraphQL interface and says, hey, show me the notices. And there it is. You're going to have a notice, sorry, you're going to have a notice stating the epoch input and notice index and the pelosi is in there. Hello there. So epoch is because we're optimistic roll up solution, right? So all these time frames in which we validate stuff and then we roll up those we call epochs.
02:45:20.336 - 02:46:00.176, Speaker A: So that's the index of the epoch. So in a given time frame you can have multiple inputs, so you have the index of the input and then a single input generates multiple events, right? So we also have another index for the notice there. Well that's it. So basically we have a tracking here which has a $10,000 USD price and it's divided in three. So first place takes five k, second place takes three k and third place takes two k. We have multiple resources available to help you guys. So first of all we're here so you can just come at our booth and talk to us.
02:46:00.176 - 02:46:38.264, Speaker A: We also have multiple examples of code. Like we have this getting started which is echoing Python in JavaScript in C, plus plus in Low in multiple languages. We also have some nice applications using machine learning or database like SQLite and yeah, a lot of interesting stuff in there so you can give it a look. We have a special discord channel for this hackathon, so if you scan our QR code on our booth, you'll get there. You also get a special badge that no one else would ever get, just people attending this event. And we also have the Cartesia docs available. So yeah, once again this is a hackathon.
02:46:38.264 - 02:47:32.136, Speaker A: So you probably want to mix most tracks to have more chances, right? So if you want to mix our project with something else, let's say you want to do a slot machine and you want to do it on top of polygon calling smart contract on chainlink for random number generation, and then you want to feed it to carte's machine to actually do the slot machine. So you want jackpot or you didn't get anything or something like that, you can always come and discuss with us and we can help you integrating stuff and figure it out, right? That's it. Hope you liked it. If you have any doubts, anything, just talk to me later or can stop at our booth and yeah. Hope to see you guys doing something really nice on this hackathon. Thank you. Yeah, sure.
02:47:32.136 - 02:48:37.832, Speaker A: Is there a Q and A or no? Okay. Yeah. So guys, it seems like we have like ten minutes for Q and A if someone has a question, doubt or anything. Yeah, sure. Can you go back to the starting of the slideshow? This one? Starting of the slideshow next, the flowcharts. This one? Yeah, this one. Okay, so let's say for the Ethereum network, right, it is more secure because you need more nodes to there are many people, right.
02:48:37.832 - 02:49:30.356, Speaker A: You need more than at least half of the chain for the request to get through, right? Yeah. Basically, when you reach consensus it's true. And you need most of cardisai. We have different for different CMS, we have different computers. Like DAP A will have its own set, DAP B will have its own set, right? Yeah. So less number of members also does mean that it's more susceptible to monopolizing, right? Yeah. As I said, if we just use consensus I'm playing poker with you and two other guys, right? If I just ask, okay, so what's the winner? And then if we have like three people saying one guy is the winner, well, he's the winner.
02:49:30.356 - 02:50:06.320, Speaker A: And that's easy to manipulate, right? You just have to temperate it with three people. But as I explained, whenever there are disputes, we don't rely on the consensus of the nodes that are involved in that computation. We actually engage on this verification game and then the consensus is based on the execution of that instruction that we came together as the divergence instruction. And this is done on chain on a blockchain with thousands of nodes like ethereum. So I'm playing with you and two other guys. Poker. We have a dispute, it's not us that settling.
02:50:06.320 - 02:50:51.284, Speaker A: We engage on this verification game, and this verification game runs on top of ethereum or another protocol with thousands of nodes. And then even if the three of you are lying but I'm telling the truth, I can still enforce the truth. So what's really nice on this protocol of ours is that the security guarantees is not most of the nodes, it's at least one. So a single party can enforce the correct result. So we have computation with 100 validators 99 are lying, but a single party can still challenge them all and enforce the correct result because in the end, it's consensus of the underlying blockchain that settles it. Which in case can be ethereum, polygon, hypnosis, even other roll up solutions like optimism or arbitrary. Thank you.
02:50:51.284 - 02:52:03.508, Speaker A: Yeah. Anyone else wants? When you're using a database, that database will be public, right? And if you're encrypting from the cartesian machine, will we store the key also in the cartesi machine? How does it work? Okay, so basically the Cartesian machine can have the size you want as long as the validator is willing to store it. Right? So you can think of it kind of like a decentralized AWS, right? So you set your application, you say that your cartes machine is, I don't know, 2GB of Ram, for instance, and 10GB of storage. And then you say, I'm willing to pay Xctsi per epoch validated. And then on the other side you have validators that will say, okay, I'm willing to start this cartes machine. I have the resources and yeah, I'm willing to validate each epoch for the amount that you're proposing. If not, then you should probably raise your fee and actually have a group of validators wanting that.
02:52:03.508 - 02:52:53.024, Speaker A: But going back to the storage itself. So basically the validator is holding that Cartez machine, which in practice is a docker container with this emulator inside. And if he wants to store like a Cartez machine that has 10GB database, that's fine. And yeah, the database would be stored inside the cartes machine so off chain so you don't have to pay for a lot for storage and stuff like this. Did I answer your question? Okay, awesome. Anyone else got a question? Anything? Okay, awesome. It was great talking to you guys and well, looking forward to whatever you're building have.
02:52:53.024 - 02:56:54.280, Speaker A: Funny. It open the door. Yes. Hey guys, can we have full screen over here? Can we have full screen over here? No? Okay, can you hear us? Fine. Yeah, exactly. I did that. I don't know how to do it.
02:56:54.280 - 02:57:55.546, Speaker A: What? Can I just what do you want to do? It's brought thank you. And the full screen, that one would be yeah, and we need to all right, can you start? Yes. Hello everyone. Can you hear me? Well, can you put on the headphones now? Sorry for the delay. Yes, please give me a clap if you can hear me. Thank you. All right, so hello everyone.
02:57:55.546 - 02:58:46.998, Speaker A: My name is Alexandra and I'm from the Etherspot team. Thanks for attending our workshop today. And we are going to tell you how to improve and simplify the user experience of your DAP and also how to go cross chain. All right, so why did we decide to create Ethospot? Well, obviously we faced some issues that we would like to be able to solve. For example, the complex web3 user experience for average users. Let's imagine that you are an average crypto user and you want to take part in some staking program, let's say of Klimadao. And it requires to take Klima tokens which are based on polygon, but you currently have only tokens on NASA's chain.
02:58:46.998 - 02:59:20.690, Speaker A: So what options do you have? First of all, you can go to the exchange, right, and just purchase some tokens. But at the same time, you already have some crypto tokens in your wallet. And why do you need to purchase more? So another step, you can for example, find some bridging solutions and try to bridge your tokens. But. Again, it requires additional steps. At the same time, when you are interacting with different blockchains, you have to switch RPC network in your wallet or even add it. So it's also quite annoying.
02:59:20.690 - 03:00:21.590, Speaker A: And at the same time, when you perform any transactions, you have to sign it every time after each transaction. Well, I can say that for not advanced users it can be a showstopper because you have to perform a lot of actions. Another example, let's say that you would like to perform the crosschain swap and you need to have a gas token from the destination chain. Otherwise yes, you can complete the cross chain swap but then you will be stuck because without gas tokens you are not able to operate on any blockchain. Another thing is that onboarding to self custody is hard at the moment. So recently I reinstalled my Chrome browser and I realized that I need to submit seed phrases to be able to get access to my wallet. But then I totally forgot where I saved them and I lost twelve phrases, I lost access to my wallet and so there is no option to recovery.
03:00:21.590 - 03:01:03.718, Speaker A: I lost my funds. But fortunately it was just one of my testing wallets and I didn't have a lot of tokens there. But in any case, it's quite an unpleasant situation and I think that any user can be in the same situation. And also it's generally accepted that hard wallets are more secure than any other wallets but you know that they are not quite user friendly. And at the same time, not all of the users can afford to get these wallets. So obviously these are not all of the issues that we face with, but I believe that they are the most relevant at the moment according to the market situation. Next one.
03:01:03.718 - 03:01:30.094, Speaker A: So, and we have a solution for you. It's Etherspot. Etherspot. It's an account obstructions decay that can deliver a frictionless web3 user experience. So it means that your users don't need to switch or add RPC networks in the wallet at the same time. It enables asset management on multiplying chains. And also you can see here the screenshot of the tweet from one influencer.
03:01:30.094 - 03:02:14.510, Speaker A: And here he shows how a typical DeFi app works today and at the same time how he thinks it should work. And actually the second picture is what Etherspot can provide you with with our batch transactions. Etherspot can batch several transactions into one and for users it will be just one click action. And let's look back to my example with cross chain swaps. Well, I mentioned that users have to get some gut tokens on the destination chain. But with easy Spot it's not needed because users can pay for transactions with any token. It can be stablecoin or any other token.
03:02:14.510 - 03:02:55.580, Speaker A: Next one. All right. And also Etherspot can deliver an easy onboarding to self custody for your users so they can get access to their smart wallets via their social media accounts or for example email address. And it means that they don't need to set up these seed phrases, keep them somewhere. And there is a recovery option as well because they can just get access via their social media accounts as well. And smart wallets are more secure than hard wallets because you can simply lose the USB stick itself and you will lose your funds. Next one.
03:02:55.580 - 03:04:02.702, Speaker A: Well, Etherspot has a lot of outstanding features like transaction batching, sponsored transactions, metatransactions, MultiChain, NFT support, fiat, on and off ramp support and it's without KYC for users up to €1000 per day. And we have quite a friendly environment for developers. We have updated documentation, you can find it in our website and in case you have any questions, you can just simply reach out to our dev team for example on Discord or Telegram and they will be able to help you. But I will share the links later. At the same time is the Spot supports more than 15 EVM compatible blockchains and it means that your DAP will be able to capture cross chain liquidity and you don't need to deploy your DAP on any chain separately. And the star of our presentation is the Builder react component. This is a component for plug and play integration.
03:04:02.702 - 03:04:55.586, Speaker A: So I'm passing it over to Wignesh to present it. So many thanks, Alexandra, for explaining the Ethersport SDK. But then now we are going into the Builder. So SDK Builder is a react component that we have built on top of the SDK to showcase you what the SDK can do. So SDK Builder is actually two lines of code which is required for the builder to integrate it to your front end. So as you can see, you can just import our NPM package and then just say Ethersport, that's all. So all the things that we have said like smart wallet, all the interactions will be done inside the Ethersport itself.
03:04:55.586 - 03:05:29.082, Speaker A: So what you need to do is just write Ethersport tagline, that's all. So it's very easy for the developers, for yourselves. So that's how to integrate Builder. I'm going to talk about the features that they are there in the builder itself. So first is multicolored transactions. Multicolored transactions, as you can see by the name itself, it's like calling multiple transactions into one. So it's a smart way to actually submit the transactions.
03:05:29.082 - 03:06:40.814, Speaker A: So what I did on this one screenshot is from USD, I'm actually swapping to Ave and it's for two USDC and again I'm actually starting the multicol and the Ave is actually preselected because you are actually receiving the Ave and how much you are receiving is actually on this one offer that you get over here. So if it is zero three away then zero three is the remaining one which is already there. Then you can actually use that three on the next step itself without even executing the transaction. On the blockchain. So this one can be done via multicol transactions. So one of our testers actually did it and you can see the transaction details where he actually sent two USDC but at the end he received 2.7 USDC on the same chain itself.
03:06:40.814 - 03:07:29.090, Speaker A: So he got like 0.7 USDC more than what he sent. So it's actually kind of if you know persons in share market and all it's actually trading that you give and you can get profit out of it also. But this is just this one just an example but then it depends on the luck and the share markets. Like that time the offers was like this so he got it but then it depends on the luck guys. So this is just this one illustration. But then you can do lots more into this itself like an innovation.
03:07:29.090 - 03:08:34.022, Speaker A: So next one is shared sessions in this the react component. When you actually sign one transaction, I mean when you sign from keybase to your contract call for deploying the smart contract, you are just signing it once and you are actually accessing it for 15 different chains. If you actually kind of switch network also it's going to access the other chain without even asking you next sign. So it's just about that. So we have actually built a Klema dow example for you to illustrate custom contract interaction. So stake into esklema from any of the assets which are there in Xdai or BNB or whatever the thing is. So first what happens is you have to select the from asset and then Sclema is automatically selected because it's a Klema dow contract.
03:08:34.022 - 03:09:41.950, Speaker A: So the minimum amount is 0.4 USD because you need to pay the gas fees from the USDC that you are going to send. You don't have to actually have the native token on the polygon itself. You can actually kind of this one execute the transaction on polygon itself without the native gas token it's on the polygon you are actually submitting Metatransaction. Metatransaction is nothing but paying gas fees via the USDC itself. So the next one is I'm going to tell you the steps that are involved. So from USDC on Genesis XDI I'm actually kind of this one building a cross chain to USDC on polygon first, that is the first step and then from polygon it's actually staked into Klima to get so all these steps are actually one single click away.
03:09:41.950 - 03:10:37.822, Speaker A: So that's what is the Kleema dao example. But then I would say this is the custom contact interaction that you have to give. So for example, you would have the contact API yourself which is there in the blockchain itself and you would have the contract address which is also there in the blockchain itself. What you need to do is just register the contract in the SDK itself so that you can actually call the method under that contract execution. For example for let's say Staking or yield protocol or something like that. So you can call the contract function using these steps alone. So what you get at the end would be the transaction request which is like two and data which needs to be sent.
03:10:37.822 - 03:11:35.842, Speaker A: That's all. That's all is the steps for the custom contact interaction. So the next one is we are open for innovation so if you feel like you can do something else also you are open to actually submit a PR under this website. I mean this GitHub repo itself, this GitHub repo is actually open source. Everything that I've talked about before is actually available inside this git repo itself. So you can just scan the QR code to get the URL and then you can actually see the source code of the package itself which I have said before. So that's really helpful for you, for the developers and I think that you can actually do it pretty well.
03:11:35.842 - 03:12:26.862, Speaker A: So this is Ethersport playground. Ethersport Playground is something that we have built so that we will demonstrate the SDK examples in the website itself. So you can just go into the website and what it does is every functionality that it is there on the SDK has been illustrated with the code examples itself. So you just need to create an SDK inside it and you can test it. So it is also available on testnets. So please test it once and then you can do whatever you want. So we are also running Bounties in this hackathon.
03:12:26.862 - 03:13:17.780, Speaker A: So the first is best full fledged SDK implementation which is like it should actually contain most of the important SDK methods that are there. So that will be served as an example for full fledged SDK implementation. The next one would be best protocol interaction. Best protocol interaction into builder is something that custom contract interaction just as I said Clema dow example it's already there on the ripple. But you need to actually build some other thing. We actually have 15 different chains, I mean 15 plus chains that we support. So any of those chains dao can also be included in this itself.
03:13:17.780 - 03:14:38.718, Speaker A: So that's it. So that price money is 2500 USD. The first one would be 4000 USD and the last one which is best integration of the builder which is all front end guys. If you feel like it needs something else rather than cross chain simple swap and send this one same functionality which is included on the builder component then you can actually build something else and then show it to us. So that's included and that price money is 1500 USD. Next is we are actually combining with Lefi with the bounty to select the best project for that collaboration so that ideas would be so Leafy is actually integrated with cross chain swaps and single chain swaps. Single chain swaps is like you have the provider inside just see if it is Leaf five then that is actually kind of valid in this boundaries for cross chain everything is valid because cross chain we have it leaf five integrated so that's all available.
03:14:38.718 - 03:15:23.450, Speaker A: The first place is 750 USD, the second place is 450 and the third place is 300. So the next one. Yeah, so here also I wanted to mention quite important point I guess that we are not newbies in this year and we have quite a solid background in blockchain development. And we've been working on Ether spot since 2017. And Ether spot is audited by consensus diligence. And we have battle tested, trusted and reliable smart contracts. So here please feel free to scan this QR code.
03:15:23.450 - 03:15:46.210, Speaker A: You will get all the links that we used in this presentation. Also you will get all the links to our social media networks. Please feel free to join us there. And also we have a booth there. If you would like to have a chat with us or you have any questions that you would like to discuss, please feel free to come to our booth and let's build together. Thank you. Yeah.
03:15:46.210 - 03:16:58.630, Speaker A: So any questions guys? Just 1 minute questions. Yeah, I think so. Yes, go on guys. I think I can't hear ayank yeah, we just wanted to understand how configurable is the entire SDK? How comfortable is the entire configurable? Configurable, sorry? Configurable. Configurable. Okay, so the thing is we are all open source. So whatever the parameters that are there as default is actually changeable.
03:16:58.630 - 03:17:53.260, Speaker A: Right, because we are open source in the first place and the SDK configurations are all available on the docs that if you need for example for crosschain you will have like from Stain, from asset ID and all that will be there on the docs itself. So please just look at the playground and the documentation for all the details or if not, please come to the booth. I'll settle all the doubts that are there. I mean on this one, configurations and all. Sure. So any other questions? Yeah, all good. Please press thumbs up if it's all good.
03:17:53.260 - 03:18:45.850, Speaker A: It's just to interact guys. Thank you. Thank you very much. It yeah. So this entire thing done. Sorry? Yeah, weapons created, land give and internet. I'll just like give you the strategy.
03:18:45.850 - 03:19:55.046, Speaker A: Yeah, sure, no problem. The name of the book? Kayak K-A-Y-A-K-A-Y-A-K-A-Y-A-K? Yeah, you can do that's. Fine. Do you want to use this? What is preferable? What is better for audio quality? Audio quality, okay. So I can just go and start speaking. If you want to walk then are you going to stand on the obviously if you want to walk then you can't cross. Yeah, because the camera is also there.
03:19:55.046 - 03:20:41.196, Speaker A: Okay, I can stand it. Ask them to get to channel two because they're wearing that and if someone asks question to me, you can hear it, so I know. Yeah, right. Hello? Check. Hey everyone, can you hear me? Okay, great. Everyone here. Can you switch to workshop two so that you would be able to hear me on the headphone? Switch your headphones to workshop two.
03:20:41.196 - 03:21:26.724, Speaker A: And thanks for being here. With the limited Internet that we have, I won't be able to play my slides in full mode, but we'll make do with this. I don't have a line connection. All right, as the title suggests, we are here to biddle with Dune. And I planned this workshop to be very hands on plan for you guys to work along with me and write some queries on Dune. I hope your Internet works just enough for you to be able to do that, but otherwise, we still have some content that's stored offline, and we'll have a great time. So I have added all slides to this QR code so you can scan it and get slides.
03:21:26.724 - 03:22:03.992, Speaker A: You will be able to access all links that are shared in the presentation. So those of you would like to do that, I'll just give a moment for you to do so. How many of you are here, by the way, familiar with Dune? You have used Dune, or at least seen a Dune visualization. Can I see a raise of hands? A quick raise of hands, please. Okay, so a few of you. So you must have come across visualizations dashboards like these over Dune. And for me, the best place to start for any new programming language or a technology like this is to write a Hello, World program.
03:22:03.992 - 03:22:38.992, Speaker A: So without any further delay, what I wanted to do was to just go to Dune.com and start writing queries. Okay, I don't think that's going to work, but we can continue the presentation. So basically, Dune has decoded tables from all blockchains that are mainstream right now. We have data from Ethereum. We have data from Polygon, L ones, L two, S, arbitram, optimism, and now even solana. So this data is community sourced in a big way.
03:22:38.992 - 03:23:15.870, Speaker A: The community submits contracts for decoding, and that's how the data gets available on Dune.com. And everything that you see on Dune, all dashboards like these that you see on Dune.com, when you go to the Dune website, you see all these trending dashboards which cover the latest in all blockchains, all protocols. When you go to this website, everything that you see has been curated by the community, and it's open source. It's available for you to use when you click on one of these dashboards. If it opens with good Internet, you get to view the query with which the data has been fetched, and you get to modify that query and make it work for your own use. Case.
03:23:15.870 - 03:23:59.740, Speaker A: So I am here particularly for the API. We, as the Dune team here, are particularly at ETH, India, for the newly launched API. The API is still in beta, and you guys get very early access to it. And what the API does is everything that I just showed you all Dune queries dashboards. All that data is now available on an API endpoint for you to consume in any medium that you like in your applications, directly on your front ends, if it permits, or replace your entire data engineering pipeline with just a simple Dune query. So it's a very powerful API. It's a very simple API, but its capabilities make it very powerful because of the community sourced work that's been done on Dune.
03:23:59.740 - 03:24:41.880, Speaker A: So I have the Dune API documentation open with me right over here. And it's as simple as you go to any query that you would like to access on the API, the data from any query that you would like to access on an API endpoint, you take the query ID. I'm going to zoom in a little bit. So whenever you are on Dune.com, there is a query ID associated with any query that you see on Dune. You take that Query ID and you just call our Execute Query Endpoint execute Query API endpoint with that Query ID, which returns an execution ID. Then you take that Execution ID and you get your data just like that.
03:24:41.880 - 03:25:36.620, Speaker A: So you pass the Execution ID to our getQuery Results endpoint and you get the data. So, basically, with just two API calls, any data available on Dune is now available on an API endpoint. That's how simple and how powerful the Dune API is. So I have created a sample application as well for you to show how we can go from a Dune query to a Dune app very quickly now that we have API access to Dune. So, if the internet works just fine, what I'm going to do is this GitHub repository, by the way, is publicly available and it is linked in the presentation as well. This is the link to the GitHub repository. I'm going to try to fetch this code and just show you how you can use the same code to run any query and quickly build an application on Dune.
03:25:36.620 - 03:26:28.812, Speaker A: So I am going to make another folder. I'm going to call it ETH. India. And I'm going to go into this folder and I'm going to clone this repository and I'm going to give it a few seconds with the current internet that we have and come back to the presentation. So, while the code is being fetched on the terminal, I'll quickly go over the steps that you need to follow to get an API key for yourself. So we have specially prepared a hacker guide for ETH India hackers. You can again get it if you have scanned the presentation already, you already have the link, otherwise, there's another QR code here, you can scan it and you will get the hacker guide we have prepared specially for you guys.
03:26:28.812 - 03:26:54.980, Speaker A: And it has all the details for you to get started, different ideas with which you can get started, and most importantly, how you can get an API key. So there's a form, a short form that you'll need to fill up. And we'll quickly set you up. You'll find the API key in your email shortly after you fill up the form. And after which we also have bounties. I'm going to talk more about that. So I can see the code has been fetched the code for the Dunap template that I've just prepared.
03:26:54.980 - 03:27:37.130, Speaker A: So I'm going to show you the steps that are needed to quickly spin up a Dune application. Using this template that you see right in front of me. I'm going to open this code in Vs code. So this little part over here is something that developers might be able to follow more easily, but any of okay, sure, yeah. So I'm also going to try to zoom in a little bit. You can see now. Fantastic.
03:27:37.130 - 03:27:59.646, Speaker A: So what I did here was there is this link to GitHub repository which is also in the presentation. I'll again share the QR code to the presentation. So you'll have all the links in place. So what I did is I just clicked on code on GitHub. I just copied this Git URL and I cloned it into my local system. Right. This is pretty much all I've done.
03:27:59.646 - 03:28:15.846, Speaker A: And to open the code in Vs code, I just have written this little line. I'm going to move a little quick, quickly. So those of you who are not developers might miss a few steps. But we have our booth right here. Please come to us. Right now we are a little bit crunch on time, so I'm going to move a little faster. But please come to us.
03:28:15.846 - 03:28:43.280, Speaker A: We are here to help you. We'll get you cross any step that you're stuck on. We are here to help you build with the Dune API. I opened this code in my Vs code. And I trust the authors. I am the author and I'm going to quickly copy this environment variable file. So there is an environment example file which you need to copy to just pass the API key to the application.
03:28:43.280 - 03:29:14.058, Speaker A: So I'm just going to create a new file. I'm going to call it env. And I'm going to paste this over here. So I have my API key stored with me right now in the D one folder. Just give me 1 second. I prepared this just now. Yeah.
03:29:14.058 - 03:29:35.630, Speaker A: Okay, found it. So I'm going to be deleting this API key. So that's nothing to worry about. And I'm going to paste this API key into my environment variable file, which is to pass this API key to my application. I'm going to save this. And another change that I'm going to do is there's a file called application. PY app.
03:29:35.630 - 03:30:01.914, Speaker A: PY. What I'm going to do is just pass a query ID, a Dune query ID to this application. And that's pretty much all. So like you pass this query ID, you just edit this query ID I have an example ID right here. I'm going to take this and add this over here. And this template is pretty much ready. Just one last minute change, which you would not need to do, but I'm doing it for the demo over here.
03:30:01.914 - 03:30:30.070, Speaker A: And now we are good to go. And I need to activate my virtual environment. Yeah. And I can run my application. I ran into an error over here. Let me try to debug this. Okay, thank you.
03:30:30.070 - 03:31:00.444, Speaker A: Yeah, now we are good. Yeah, now it works fantastic. So, yeah, this is the template app. So we went from a Dune query to an application just like that in a couple of steps. This exact steps are listed on the GitHub repository. And again, as I said, we are at the boot to help you out. And if the internet works, this application should actually work right away.
03:31:00.444 - 03:31:24.710, Speaker A: So within this application, you saw I passed a particular query ID. You saw this query ID being passed over here. So I'll quickly show you what this query actually does. So I have this query open@dune.com with me right here. So this is a query that fetches the total amount of US dollars spent by any particular address in their entire transaction history on ethereum. This is what this query does.
03:31:24.710 - 03:31:59.920, Speaker A: So it takes an argument as an address, as any wallet address on the Ethereum blockchain, and it gets you the total amount spent in US dollars. So the details of this query are something that if you want to learn about, you can again come to our booth and we'll definitely explain you. But right now you can consider this as a black box. The good part about the API is so the good part about the API is that you do not need to understand these queries. You do not need to understand SQL. All this work has been done by a community. You take the query ID, you get that data on an API endpoint just like that.
03:31:59.920 - 03:32:28.564, Speaker A: So all the work that has been done by the community, you get access to it and build interfaces on top of it with the API. So I'm going to quickly show how this works in the Dune interface. I'm going to take a random address. So zero x five sub ETH. It's an address that belongs to one of my friends. And while I wait for this Ether scan link to load, I'm going to go back to my application. Okay, this is loaded.
03:32:28.564 - 03:33:03.896, Speaker A: Fantastic. When I paste this address here and I run this query, it just fetches the data for me. It fetches the total amount of US dollars penned by this address on the Ethereum blockchain and all their transactions, the sum total of all their amount. So right now it's in the Dune interface, it's on the Dune.com interface. And the same thing is now available to us on an application. And this is taking a little while extra it's quicker than this again, because of the Internet.
03:33:03.896 - 03:33:35.344, Speaker A: As you all know, the Internet situation right now. So coming back to my presentation, I'll come back to the application and show you when the results are loaded. But coming back to the presentation, yes, we have $10,000 of Bounties on offer, five applications. Five top applicants to this bounty will get $2,000 each. And we have some swag for collection. So you can come to our booth and see the swag that we have. And we are very serious about our swag.
03:33:35.344 - 03:33:53.690, Speaker A: What you see here is available only for this event. It would never be available again. We in fact, have a page dedicated to how serious we are about our swag. You can check Dune.com lookbook to have a look over that. So that's about the bounties. And I'm going to come back to the application.
03:33:53.690 - 03:34:28.404, Speaker A: Well, it's still running because I suppose the Internet coming back to our presentation again. So I've also attached a link to our discord. That's the best place for you to get into the Dune community. It's super active with not just our community team, but the community of wizards we have built, the data analysts who use Dune every day. So many of them are using this for their full time jobs now. And they're all hanging out on our discord. You can come and start playing around with Dune, playing around with the Dune API.
03:34:28.404 - 03:34:56.092, Speaker A: And you would find us there. And you can follow us on YouTube as well as Twitter. So YouTube particularly, we are releasing some really good content. Andrew Hong, if any of you are in the Web Three data space, you probably follow Andrew Hong. He has recently joined us full time and he's going to be releasing some amazing content on our YouTube channel. So stay subscribed there. Follow us on Twitter, give us a shout out while you are building at ETH India, using that API.
03:34:56.092 - 03:35:26.136, Speaker A: And we'll retweet you and we'll follow you back. And with that, let me come back. Yeah. So the connection was about it because I guess it took too long. If you want to have a real demo of this application and the things that were actually planned for this workshop, you can of course come to the workshop, come to the booth. We would be there for all three days. If you guys keep coming to the booth, I'll be hanging out there late until night.
03:35:26.136 - 03:35:52.840, Speaker A: I'll be there building with you, hacking with you. So our team is here. We have our champion, community wizard, Zero Xboxer, aka Florian over here, who has built the Dune community from ground up. Come say hi to him. Come say hi to David Bell and me. We are all at the Dune booth. And with that, I think I'll open for questions because with limited Internet, I don't think I can actually do more demos.
03:35:52.840 - 03:36:54.530, Speaker A: So those of you who might have some questions about Dune, any. Kind dune or the dune API. We're open to taking them and you can raise your hands and someone will help you out. Okay. Is someone from the organizing team around here at workshop too? We need some quick help over here. I can just use this and audience questions. Can someone will go around the audience and take the mic or something? Please go around.
03:36:54.530 - 03:37:34.108, Speaker A: Yeah. Can you raise your hands again, please? Hi. So what is the source of your data and do you publish it? I mean, I did see Ethers scan on there, so I guess that's one of them. But what about the others? Yes, so the thing about data from Blockchains is it's all openly available. So this data is nothing that Dune is curating. It's available on Blockchains openly. What Dune is doing is it's just making it easy for you to access it.
03:37:34.108 - 03:38:00.472, Speaker A: That's all we are doing. So Etherscan is one UI on top of the same data. So if the Internet was working, I would have actually gone to Etherscan and shown you how the same data is available on Dune and Etherscan and perhaps on many different platforms. We're just building a UI on top of these chains. So this is a completely new paradigm for data. And Dune is just trying to make it super easy to have it in a place where you can analyze all this data in a very simple way. Like, you don't even need to install anything.
03:38:00.472 - 03:38:27.798, Speaker A: You can be on any system. You just need a browser. You go to Dune.com and you can start analyzing Blockchain data straight from Blockchains guys. So does that answer your question? Thank you. So I had a chance to go to the booth. So before I get to my question, I just like to know that can we have customized SQL queries? Yeah, of course.
03:38:27.798 - 03:39:04.580, Speaker A: Okay, so if we can do that, let's say I have multiple sources of data. One of them, let's say, is on Ethereum chain or something, but others are like, let's say, MongoDB production database or something like that. So does Dune have a facility where I can use, let's say, DB, like MongoDB along with some chains to analyze all those things at one place? Or will I have to do that separately? Yeah, absolutely. So this is where our API comes in, right? So before I continue my answer, I'll just check with the organizing team. So I have to use the same mic, or is there a different mic with the headphone? I'll use the same mic. I need to be here. Or I can walk around and it still works.
03:39:04.580 - 03:39:25.798, Speaker A: Does it still work? Okay, I'll stick with my mic. All right. So of course, this is where the API comes in. So you can combine data from Dune. You can take it out to an API endpoint. You can get it into the media, into a medium that you're familiar with. It could be tableau it could be any database, it could be a MongoDB database that you want to get that data into.
03:39:25.798 - 03:39:42.206, Speaker A: So our data is organized in SQL format. So it will need some work for you to combine data from two sources. One is NoSQL and one is SQL. But yes, it's possible. And in fact, we are here to help you with just that. So come to our booth and we'll help you out. We'll fix you up.
03:39:42.206 - 03:40:07.606, Speaker A: I'll just go to my second question there. Yeah. So from what I heard, you can basically use Dune also as a data engineering platform, like to set up pipelines and all right, so I didn't see that in the demo. So maybe come to the booth. No, I'll just give a quick answer to that as well. So what I meant by that was currently if you have to source data from chains, you have to build very sophisticated engineering infrastructure. So those of you who are developers here, you would know how much pain that is.
03:40:07.606 - 03:40:36.542, Speaker A: So what Dune does is if you want very customized data, you want some exact data that you want from chains and nothing else, you can simply write a SQL query instead of building that entire infrastructure. Now that gets outsourced to Dune. So Dune is taking care of building your engineering team and engineering infrastructure. You just write the query, you get the data into your own database using that. And of course, again, for implementational details, come to a booth. Happy to answer. I think you also touched about multiple chains, so I'll drop a quick note on that as well.
03:40:36.542 - 03:41:09.286, Speaker A: So some of you had questions already about do we support data from different chains and do we support cross chain data. So on Dune.com you will find something called Dune Engine V Two, which is especially meant for cross chain data analysis. You can actually combine data from Ethereum and Polygon. If people have addresses across chains, which is similar addresses across chains, you can get their transaction data across chains in a single query, in a single table. So this is also super powerful and we'd love for you guys to explore that as well. So it is possible to do cross chain analysis.
03:41:09.286 - 03:41:53.686, Speaker A: It is possible to take dunes data and combine it with off chain data. Everything's possible. And we are excited to see what hackers here build with the API now that all of this is possible. All right, next question please. Hey, so my question is, let's say I have an NFT marketplace and I want to fetch all the NFTs held by a particular user from the wallet address. So for that, I usually do a solidity function to fetch all the data. So how is that different with Dune? Yeah, so you just mentioned the complexity that you go into to get that simple piece of data.
03:41:53.686 - 03:42:36.786, Speaker A: With Dune, it's going to be super simple. So we have created an aggregated NFT table which is called NFT Trades. And this is again, being done by the community. So we have an initiative called Spellbook, and we have a GitHub repository called Analytics Spellbook. So over there, our community is aggregating data from across chains, from across protocols of different NFTs, and they have integrated it into a single table called NFT Trades. So every trade that has ever happened on any NFT, it's all aggregated into a single table. And if you want to query data for a particular address, what you simply have to do is select star from NFT rates, where address is equal to the address that you want.
03:42:36.786 - 03:43:07.886, Speaker A: And it will happen in minutes. Like, you just go to Dune.com, you write this query, and you have all that data, and now you can get it on an API endpoint, use it in your application. One other problem is that when I try to fetch all the NFT, let's say it can't can you be a little louder, I guess? Hello? Yeah. Yeah, I can hear you. Okay, so another problem is that let's say the wallet has 100 NFDS. So for every NFD, I have to make a different RPC call.
03:43:07.886 - 03:43:31.640, Speaker A: So will that be same for the Dune or the Dune simplifies? It also so I think this is a question you would have to come to our booth, and we'll be happy to go into further details of this. Yeah, okay. Thank you. All right. Thank you. More questions. All right, I'm trying to look into the back if anyone still has any questions.
03:43:31.640 - 03:44:12.130, Speaker A: In any case okay, we have one question. Okay. I was just also asking about your community program. So you have this wizards program. What's it like? You have a progression there. You have certainly can you talk about that? Right, so you just mentioned wizards. So the community that has grown around Dune, people who are actually doing data analysis on Dune, we call them wizards because it just feels magical to be able to get data from chains just like that.
03:44:12.130 - 03:44:55.398, Speaker A: And when you say we have a program for visits, I wouldn't say we have a program for visits, but we do value our community very highly, and there is an entire community team at Dune dedicated to just supporting our visits. So if you start working on Dune, if you start doing data analysis on Dune or even using our API now, so you would be in our visit community. And, I mean, this is something to be experienced. So just come into our discord, hang out with us, build with us, and you'll get to experience what it's like to be there. So that's the answer to your question? Yeah. All right, thank you so much, everyone, for your time. And please come say hi to us at the Dune booth.
03:44:55.398 - 03:53:43.486, Speaker A: We would love to help you build with the Dune API. Thank you so much. It yeah, this one. Oh, no. That's HDMI. No. Yeah, it's HDMI, but ethernet.
03:53:43.486 - 03:54:26.020, Speaker A: Okay, give me a second. Yeah, you can connect or we'll give you a good WiFi. Sorry? We'll give you a good WiFi. Yeah, that was great because from the morning till now the WiFi no, we'll give it to you. Okay. When you're connecting with that, we have one WiFi available. I'm trying to connect with one.
03:54:26.020 - 03:54:51.420, Speaker A: No. Yeah, we are giving them one of the working WiFi. Access it. Okay. You want to allow? Don't allow. Yeah, we can allow. All right.
03:54:51.420 - 03:55:14.520, Speaker A: Is there any way I can just share a window? Yeah, no problem. You have that thing? Okay, perfect. You have that. Thank you. So maybe I can just update it to only show for now. Maybe I could let me just presenter view. Okay.
03:55:14.520 - 03:55:43.638, Speaker A: Is it connected? Yeah. Okay. Sorry. Actually, I just want to basically share only one. You want to share only one? Yeah, I mean, basically I won't share this one and then read from here in case I need something. Okay. But it should be presented like both.
03:55:43.638 - 03:56:08.444, Speaker A: Maybe this is something in the system setting. Not much aware about the Mac settings. No problem. Should be here. Use as a optimize, as a RGB. Okay. So what you have presented, like just like last time it got extended, I guess.
03:56:08.444 - 03:56:17.152, Speaker A: I mean, it works. I mean, no problem. I can keep this one here and this one. Okay. Not there. Perfect. It came out.
03:56:17.152 - 03:56:36.570, Speaker A: Yeah. Okay. You can see it from here as well. Oh, yeah, sorry. Sure. Thank you. Is it there? Yeah.
03:56:36.570 - 03:56:47.852, Speaker A: Perfect. So you can switch it from just see how you're switching it out. Yeah, sure. Let me bring up the mouse. This side. Okay. Is it switching open? Yeah.
03:56:47.852 - 03:56:59.270, Speaker A: Good. Perfect. If I fix the mic, it will automatically be fine, right? Sorry. Should I stop like it's fine. Everything yeah, it's good to go. Okay. Yeah.
03:56:59.270 - 03:58:03.648, Speaker A: Okay. Can you tell them like, I'll do it? You'll be here? Yeah, I'll be here. Yeah, please go. Guys, put your headphones on for listening and make sure that you are on channel two. Can you just confirm if I'm audible? Sure. Thank you. Yeah.
03:58:03.648 - 03:58:58.310, Speaker A: So, hi everyone. I'm Suhal and I work as a developer advocate at Livepeer. And today I'll be leading a workshop on building the future of video with Live Peer. In this workshop, we will be covering on what is Live Peer, who can use Live Peer, what problem does it solve, and how to integrate Live peer into your application. So before that, we know that approximately 80% of the Internet traffic is accounted by the video. This means that the large majority of the content over the Internet is in the form of video, such as streaming video, on demand video sharing on social media, and also online video calls. This is the reason why our brain loves video, because it is programmed to retain the visual content better than the page loaded with the words usually an average viewer remembers 95% of a message when it is watched whereas only 10% when it is read.
03:58:58.310 - 04:00:09.370, Speaker A: However, there's a one catch to the video sharing it is very expensive. Video streaming and also transcoding can be very expensive to the applications who are building for the users. And one of the main factor is the amount of data and the bandwidth that is required to transmit, receive high quality and transcode the videos. In addition to this, the video streaming and transcoding requires a specialized technology and infrastructure such as a powerful servers and high speed networking equipment. And furthermore, the video streaming transcoding can be a resource intensive meaning it could increase the cost of hosting and delivering the video content and yeah, so it is very expensive and the solution to this problem would be Lifebeard. Lifepeer Protocol is a decentralized video streaming and video on demand platform that uses blockchain technology to enable anyone to easily and affordably stream live videos to the global audience. It is built for developers and it aims to increase the reliability of the live and on demand streaming while reducing the infrastructure cost by up to 50 times.
04:00:09.370 - 04:01:22.620, Speaker A: Who uses live peer. Like who's lifepeer for? Well, the Live Peer is for developers who want to build application on top of Live Peer and uses its broadcasting or live streaming feature or maybe on demand feature to serve the video on a decentralized network. Or it is for users who want to stream the video of maybe gaming, coding or any entertainment into their mobile phones using the Livebeer at Last. It's also for broadcasters such as Twitch or YouTube who have a very large audience and also very large creators that would significantly decrease their bills and infrastructure costs. And how does livebeer work? Well, when you broadcast a video the broadcaster sends the video to the Lifepeer Network and Lifepeer Network transcodes the video using the nodes that is powered by the Lifepeer and it is deployed on Arbitrum blockchain. After that the video gets distributed on a global CDN and after that the users would be able to play the transcoded version of the video. So for those who don't know, transcoding is basically a process in which the video gets transcoded into different formats.
04:01:22.620 - 04:02:10.956, Speaker A: For example, if it's in a video would be transcoded into 240 p, 360 p and 1080p just to ensure that the video gets placed properly on different devices, internet connection and also browser. Last year growth has been very tremendous. This year we had over 2.7 million transcoding minutes per week and yeah, so this was about Life Peer and we have both Life Pure APIs which you can use and one of the best ways which you can interact with the Lifepier Network would be Lifepeer Stadium. Live Peer Studio is an open source dashboard for interacting with the Lifepear Network. It is used to create and also manage developer API, keys, assets and streams. Of course completely open source on GitHub.
04:02:10.956 - 04:03:34.472, Speaker A: And basically most of the many webtree video applications are currently powered by Livebeer. For example, hello one beam lens tube, bonfire stream, eight TV and many other application. And yeah, so this was just an overview of Live Beer on how does it works and how you can use it. Now I'll basically go through a demo app on how we can basically integrate Live Beer into a sample application. Let me just come back. Excuse me. Oh yeah, no problem.
04:03:34.472 - 04:04:21.104, Speaker A: Thank you. Yeah, so I just go through a tutorial on how to use Live Peer into your React application. And for this we would be using Live Peer JS yeah. So live Peer JS is an SDK built on top of Livepeer CDU API. It is basically it provides the ready made hooks and also components to easily build applications with React or maybe next JS and Livebeer. So the first thing which we're going to do is open up the terminal and go to the directory where we want to create the application. In our case we want to create a folder, name it for example Eat India and then inside of the folder we want to create a React application.
04:04:21.104 - 04:05:05.676, Speaker A: So I'll just say NPX create a React app and then dot which would create it inside of this folder. So this will create us a sample react application and until it's completed we can go to the Livepeer CDU which I mentioned earlier. And here you have to go ahead and create an account. It's pretty easy and you would basically have a transcoding minutes of 1000. Basically I think it is enough for many of their projects. But if you go over it you can basically pay which is like very negotiable amount like 0.1 /minute but yeah once you are here in the Live peer studio you can go to the developers and click on create an API key.
04:05:05.676 - 04:05:58.060, Speaker A: You want to name anything for your API key. And then also allow cars. And here I want to allow from everywhere and also give a full API access to the API. And then we want to create it and then copy the token ID here for now let's see if our so now the React application is completed, we can open it in the Vs code. So this is our React application, let's run it on a local dev network. So now the application is running. What we want to do is we want to install the Live Peer JS which you can do by running NPMI Livepeer React.
04:05:58.060 - 04:06:52.188, Speaker A: And this would basically install Live Peer JS into our application until it's completed. We want to do a little cleanup into our application. So I would delete the app JS, app CSS, the test files, the logo here and also here and index JS. I would just remove the last port here and yeah, that's it. Coming back to app JS I would remove logo and app CSS so we won't create a very simple React application to this one. It's a very simple message basically for now. But yeah, so once the Livepier JS is installed in our application we can come to the index JS and basically create a client.
04:06:52.188 - 04:07:20.784, Speaker A: To do that we want to import create a React client and import it from Live Pure React and also Studio Provider. Studio Provider. And at last we want to also import the Livepier Config. Live pure. Config. So we have imported these three packages. Now in here we want to run Const client is equals to create a React client.
04:07:20.784 - 04:08:02.000, Speaker A: And here we would put a provider, studio Provider. And here we want to put our API key which we created here. So I just copy it and then basically put the API key here. API key, yeah. So once we have put the API key here, let's close the bracket and yeah, perfect. Now at last we have to basically remove the strict mode and also wrap application with Live Peer Config. Live Peer Config and then the client would be client.
04:08:02.000 - 04:08:56.164, Speaker A: And here we can import app. So yeah, conf client is equal. Just come to here, get started and this is it. Copy back the API key and then paste it here and yeah, so now we have Livepeer JS integrated into our application and we can use the hooks, components and everything just to test like if everything is working fine, like if we have integrated successfully, we have a hook name, it Lifepeer Provider. So we can import that use Lifepier Provider. And here we can say Const provider is equals to use Lifepier Provider. And here we want to put our provider name.
04:08:56.164 - 04:09:43.132, Speaker A: So we say Provider basically get comFake name. And yeah, once we save it here we should have Lifeview. Yeah, which means the integration now works fine. And our application is integrated with Lifeview. In this demo application we want to basically create a very simple upload and transcode video. So what we can do is we want to use first maybe let's create an input or let's first create a state const video is equals to set video. Yep, yep.
04:09:43.132 - 04:10:49.018, Speaker A: So and here we want to keep an input and this input would have a type file which on change it would be basically set on the estate which we have the set video one and yeah, that's it, let's save it. And now we have this file picker and for now we can keep it like that. And then here we would have also a button like Create Asset. And then on click for now we just for now we can keep it like this. So we have file input and also a button. So here what you want to do is we want to basically import the use create Asset which is the asset to create a video on the Live Peer network. So we say Const is equals to use Create Asset and here we want to put our video.
04:10:49.018 - 04:11:26.514, Speaker A: So in my case it's going to be, for example, sources. And in the sources we want to keep it like it's an array. So since we have only one video so I'll just put it this way and here we at last you'll have a name. For example, maybe we can keep this one video name. And also at last we want to also put the file. So we say file is equals to video name. So this would create an asset for us, this hook.
04:11:26.514 - 04:12:13.846, Speaker A: And just to make sure that we get the correct responses, we would also add a few we add a much weight and we put it like on Create Asset. And then we would also add a data that you'd get in response. We would have assets, this one and maybe progress if in case we need it. And yeah, so pretty much this is the hook which we want to use. And here on the button click, we can say if the video is not there, you can disable it. Oops, yeah, now it's working. Maybe I can just come here, use, create assets.
04:12:13.846 - 04:13:06.844, Speaker A: So this is documentation which you can use. Like you can have all the assets and hooks which you can take a look and yeah, so this is the code which we would be basically using. It like there missing colon. Okay, let me remove the TypeScript. One, save it and yeah, so we have the button, disable it and yep. So now it should work just to see if the progress and everything, we want to also add this one and the error message and let's put this here and save the file. Cool.
04:13:06.844 - 04:14:15.132, Speaker A: So now if you have to app, do this. Yeah, and now so let's come here, click on choose File. This would open up a video for us. Maybe I can find the video Rweave net. Okay, we don't have a demo video. I don't have a demo video to upload it. But basically once you choose a video okay, yeah, got it.
04:14:15.132 - 04:14:43.264, Speaker A: So we have a video. Now, once you have the video, you can click on Create Asset and this would basically upload the video to the live peer network and transcode it. And once we have the video back, it would basically show us here. So currently it's been an uploading process. We can come back here, close this and go to assets. Yeah. So this is how you'll be able to create an asset using live peer JS.
04:14:43.264 - 04:15:20.224, Speaker A: And one more thing which I want to add to this workshop and that would be completed, is basically the player component. The player component is like easy to use HLS player which you can use to play the videos on the livebear JS. So for that we have a guide on how you can basically play back the IPFS and RV video. As you know that both IPFS and RVs are not CDNS. They are a storage. So in order to play the video properly without any buffering basically you would want to use Live Pure. It would play back the transcoded version for us.
04:15:20.224 - 04:16:01.052, Speaker A: So we have already set this up and I think yeah, so you don't want to go through that one. But this is how you'd be able to also transcode the videos from IPFS. And orweef just to show you an example, we have a few I put some examples here, like Rweef. And if I basically put the Rweave link here, it would take a minute for the video to get transcoded and then save it into the live peers network. And once it is done, you would be able to basically play it just in the case. I can also live here and then destroy this is an example application. So for example if I want to play this video the video would be played actually.
04:16:01.052 - 04:16:48.090, Speaker A: So this is how the live pair transcoded it would play any type of video on either on IPFS and Rweave. So this is an example with the Rweaves that any size it would be transcoded and then playback the most optimal version similarly like this one or this one. I think due to bad turn it they don't play it but yeah, it should work actually. And yeah. So this is regarding the live peer. I hope you understand on how to use them and yeah, let me know if you have any questions. Yeah, any questions? Cool.
04:16:48.090 - 04:23:02.860, Speaker A: So I think we don't have any questions which is good but we are at the Live here booth. If you need any support during like tomorrow or day after tomorrow, we would be there and yeah, thank you very much. Something okay, can you guys hear me? Okay cool. Okay so let's just start I think. Okay, so my name is Aniket and I am from the remix team remix IDE. I hope some of you have been worked on that. So I am going to basically explain that how you can use the remix for the hackathons.
04:23:02.860 - 04:24:31.930, Speaker A: Okay, going further. Okay just I would like to add that at the end of this session there will be a challenge where there will be some questions and they should be answered depending on the session flow or session slides. So they will require some of the optimized ETH and you guys can scan this QR code, open this URL which can help you to get the required optimizer to perform the challenge, perform the tag challenge because that will be one contract interaction. So you can just open this link, it will open one HackMD document, you can put your address there and you will get certain amount of optimizer in that address. Okay, so let's moving further so we can see that how remix can be useful when there are such hackathons like at India. So in the hackathons there can be the teams which wants to learn and develop some things very fast or like they are kickstarting a project or like collaborating together within the team. Then there can be like they will be needing some importing of files and then they can export some files for sharing it with somebody else online.
04:24:31.930 - 04:25:29.544, Speaker A: And then there can be a chance that you are developing a project which is requiring you to deploy a particular contract on multiple chains. Then it can be that you are working with certain frameworks like Hard at Foundry or this Truffle. So you can combine those frameworks and mimics both and at the end there can be a way where you can just share one UI for your smart contract and it can help maybe your judge so that your code is working or something. So let's moving on these things one by one. Okay, so this is the latest Remix ID home page. This is the first page you see when you just land on Nimix ID. And you will see that Remix provides you certain default workspace with certain list of files so that you can just quickly start with your development.
04:25:29.544 - 04:26:20.700, Speaker A: So there are some contracts, there are some JS files, there are some test files in Solidity and JS also. And if you are like very beginner and you are just starting the things with the web3 word you can just go to this Learn section where there is this Remix basics and you can just click on Get Started. It will take you to a plugin called learneth. There you can basically check out the Remix Basics. There are multiple tutorials, you can go through them one by one and apart from the remix there are other tutorials so you can just check them in the remix itself. There can be like Solid Beginner course or like you can develop the ERC 20 token or the one NFT. So I would just detail out that how this course work.
04:26:20.700 - 04:27:22.572, Speaker A: If you will go inside a course, inside a solid day beginner course so what will happen? There is some description given for particular concept. Like here on screen you can see that there is a detail about that. How you can use the enum in your smart contract. And then, after giving that theoretical detail, there will be one particular assignment on the bottom of it which will ask you to perform certain step on the remix ID itself. And then it will basically require you to write some code so you can just write that code and check your answer. So there is this button which basically helps you to check your answer is right or not. Otherwise if you are just stuck and couldn't find any answer, you can just click on Show answer and if you are very new and you don't even have come across with the Remix ID before so you are using a plugin so you can always go through these plugin documentation.
04:27:22.572 - 04:27:54.840, Speaker A: Here you can see there is. This carrot icon you can say and then there is this documentation link. So you can just go to that documentation and you can check that how you can use that plugin. Also if there is a green checkmark on the top of a remix plugin, it means that Remix maintains this plugin. Remix is like maintaining the code of it and they are doing everything here and there. It is not an external plugin or developed by any third party. So this is a plugin maintained by Remix.
04:27:54.840 - 04:28:41.444, Speaker A: Moving further if you are just starting with the project. So you can see on the home tab of Remix there is this section which says get started project templates. So there are particular templates. You can see here there are blank template and then this default remix template there is this ERC 20 template and ERC 721 templates. So you can just quickly click on one of the card and it will just load a set of files for you along with the contract. So here I am showing the example for ERC 20. So it will just add a MyToken solve contract which will be having the ERC 20 code and then there will be like scripts which can help you to deploy that contract.
04:28:41.444 - 04:29:38.228, Speaker A: And there is this test file which is basically containing the test cases in a solidity file itself. Moving further. So this was one way that you can just create a workspace which is already there. But if you just want to customize your templates, your workspace templates so you can just use these icons here there is this plus icon and then this create workspace icon will also open if you will click on this hamburger. So if you will click any of those options there will be this Create workspace model and if you will choose a template from Openjaplin category. So for now this customization is available for the openjaplin only. So you just select a template from openjaplane and then there will be these options where you can just customize your templates.
04:29:38.228 - 04:30:21.716, Speaker A: So you can make your token mintable burnable or posable which are very common use cases now. And then you can also decide if your contract can be upgradable or not. So you can just select one type of contract upgradability here and you can further click on OK. And yeah here you can select the option and this will just load the updated contract code in your workspace. Okay then during a hackathon you need to work within a team so you may be collaborating on a project. So remix supports some of the Git operation within the browser itself. So let's talk about the cloning.
04:30:21.716 - 04:31:29.928, Speaker A: So you can just quickly click on this hamburger icon and there will be this clone option which you can click on and then there will be this modal where you can just put your GitHub repository link and it will just quickly load all the files from that repository in the Remix File Explorer Plugin. So this is very quick. You can use it anytime during the hackathon coming to this. Okay, so when you are working with the git, you are definitely working with lots of the branches so that is also provided within the Remix. You will see this git section, git branch section on the bottom of File Explorer Plugin on the Remix and then once you click on it, it will show all of your branches which are there on your git repository. So you can just quickly switch between them. These were some initial operations and then if you are looking for more elaborative options like pushing and pulling some repo.
04:31:29.928 - 04:32:23.264, Speaker A: So there is this D git plugin which is there on the Remix ID itself and it allows you to do the GitHub operations in the browser itself. So there are some dedicated cards here you can see and you can expand one of the card according to your use case. You will see that there is this GitHub setting. So basically if you want to perform something with your git repository, you have to provide certain GitHub credential which are there only in your browser itself. So you can just go to change the settings and then you will see this GitHub access token section on the settings section of Remix ID. There you can just provide your username and email and at some places you will require a token also. So those description is given here already.
04:32:23.264 - 04:33:24.900, Speaker A: You can just read out that how you can create one gist token. Okay, further, when you have just cloned a project and you have activated the D git plugin so as soon as you will update a file, you will see that I have added one comment here. So those changes or the changed files list will appear on the DGIT plugin. And if you want to just check anytime that what is changed in that particular file, you can just click on that particular file name and it will show you the side by side difference that what is changed in your file and that is completely online on the browser Remix ID. Further you can just add your files, you can see these plus icons here. So you can just add those files and then you can just go to the commit section and provide a commit message. I have provided the test commit message and you can just commit those files.
04:33:24.900 - 04:34:05.004, Speaker A: Then there is this last option where you can just update your GitHub repository online. So you can just select a remote branch and click on push button. So this will be updated. Okay, apart from the git, if you are working on a project and you are just looking to import any file in your existing project. So remix provides that. Also on the home tab there is this open file button which basically allows you to upload a file from your local computer or local device. Further, if you want to import some files from some of the online resources.
04:34:05.004 - 04:35:11.220, Speaker A: There is this GitHub, Jist IPFS and Https options, you can click one of them and you can provide the online link of that file and that file will be loaded in your workspace. If you don't want to load the files in the workspace and just want to use in your code files so you can just write these import statements. So first import statement is for the NPM modules. This is very common throughout the frameworks and then if you are just looking to pick a file from the GitHub so you can just put the complete URL of GitHub and it will just pick that file also. And then there is this common way of importing the relative files you have also the options to export a file as a Gist which can help you to show that file via one URL. So whenever you go to your workspace, you can just right click on a file name. And there is this option publish file to Gist.
04:35:11.220 - 04:36:27.852, Speaker A: And once you will click on it, it will just ask that you are going to publish it publicly. And once you confirm it, it will just publish that file on the Gist and then it will give you this URL. You can just quickly open and check out that if it is properly published or not. And then there is this GitHub icon you can see on the top of your workspace files which basically allows you to export the complete project as a Gist URL. So it will basically export all the files within the contracts, folder, scripts and test all the files from those directories will be exported on the gist and you will get that particular link where you can just share those files with the others. Okay, coming to this compile contract and running a script so there is this traditional way if you have worked with the remix before so you can just see that there is this common button using which you can just compile the contract. And for running a JS or TS script you can just right click on a script name and you can just click on the run so that script will be running.
04:36:27.852 - 04:37:27.010, Speaker A: So remix support the JS and TS both the scripts now. And then there is this recent addition. There is this green play button you see. So if you have selected a solidity file so you can use this green play button to compile that file quickly and if you have selected the TS or JS file in your editor so this same particular play button will help you to run that script. So you don't need to switch between the plugins, you can just quickly click on this play button on the editor and then there is another way to just quickly compile and run the script. So basically you can use this if you want to attach a script execution with a contract compilation. So what will happen that you will write this custom dev run script Natspack tag and you will provide one script path here.
04:37:27.010 - 04:38:16.496, Speaker A: And what will happen that as soon as you click on, click the Control Shift s keyboard shortcut. So you can just quickly edit your file and then you can just click Control Shift s so it will just compile that file and will run that script. So script can have the logic to deploy a contract to run the JS test cases or even verifying a contract on the ether scan. So that is also possible by writing a script on the remix. So you can just quickly make the changes in your file and then run the JS script. Okay, then there is another way where you can just share your state of transactions with others. So remix provide this transaction recorder here.
04:38:16.496 - 04:39:32.532, Speaker A: So if you are working on a project and you are like performing ten steps and then you want that your teammate should be on the same level to test out some quick things. So you can just go to this transaction record instruction and you will click on Save. So it will basically save a scenario file scenario is basically mentioning all of the transaction that you have performed. You can save that file and you can share that with your teammate and your teammate will open that file on the remix and he or she can just click on this run button here and he or she will get the same list of transaction executed automatically on that particular contract. So you don't need even that particular contract or you don't need to compile that contract, you just need this scenario file and all the transaction will run in the same sequence here and you will get this log of running the transactions in the remix terminal. Okay, coming to this part where you are working with some framework which is like Hard at Truffle or Foundry so remix helps with that also. So there is this NPM module which is Remixd.
04:39:32.532 - 04:40:49.388, Speaker A: It helps you to connect a project from your local computer to on browser remix ID. So you can just go to your project directory on your local computer and you can just run the Remixd command and it will start basically a WebSocket channel and then you can go to Remix ID. You can click on connect to localhost, it will show some instructions and you can click on connect and it will load that project from your local device. This will be loaded under the workspace localhost so that you can always remember that you're working with your local host and not with the workspaces which are online on the remix. And then suppose you are working with hardware framework and you have connected your harder project with the Remix ID. So when you will go to the Solidic compiler you will see this new option of enable hardhat compilation. So what it will do, it will basically compile the content on the Remix and for the hard hat also like when you run the NPX hardhead compile command, it will do that automatically as soon as you click on this checkbox.
04:40:49.388 - 04:41:44.660, Speaker A: And this compilation will take place using the configuration which is set in this solidity compiler plugin itself. And then you can just go from Remix compilation result and from Hardhead compilation result there is this refresh icon. So anytime you click on this refresh icon, it will load the compilation result from your local hardhead project. And then there are these specific providers for the frameworks. So all the frameworks provides a certain local chain and you can use these providers to connect with those chains. You need to provide these JSON RPC endpoint and you can see that this foundry provider provider has loaded these addresses here. Okay, so Remix also provides some L two providers.
04:41:44.660 - 04:42:21.504, Speaker A: So you can use the Optimism provider or the Arbitrum provider or if you want to use any custom network. So you can just click on this plug icon. It will take you to the chainlist.org website where you can add the other network and you can just connect with them using the Remix ID. Okay, so there are some more editor features which are provided by Remix ID. One is that if you have just messed up your code and you just want to quickly format that. So you can just right click and click on this format code.
04:42:21.504 - 04:42:55.076, Speaker A: There is this keyboard shortcut also which you can use. Remix provide the autocomplete when you just type. So if you just write Import you will get the option of Open Japanese. And as soon as you will type the path, you will get the other options. And this feature basically provides you the inline gas estimates here. So as soon as you write some code, you get the gas estimates. And if you will close all the tabs in the Remix ID, you will get these keyboard shortcuts.
04:42:55.076 - 04:43:22.880, Speaker A: And there are some random features that Remix support the console log. And then you can load a contract from GitHub to Remix just by changing this URL. So you can see just that. I have just updated GitHub.com to Remix Ethereum.org and it has been loaded here. You can just quickly use the library methods with the Remix ID.
04:43:22.880 - 04:43:50.664, Speaker A: So there are Web three and Ethers and other Remix libraries which you can use. So here I have shown this method which can help you to quickly convert one string to bytes 32. And then if you are done with your smart contract, you can just quickly go to one click DAP plugin. You can select your contract here. Contract should be compiled and deployed. And then you can provide this deployed address. You can click on generate.
04:43:50.664 - 04:44:44.254, Speaker A: DAP. It will basically create one unique link for you which you can share with anyone you want to allow the interaction with your contract so if you will just open this, it will open this interface where you can just read and write the contract methods. Okay, so that is it for the workshop. Is there any query from anyone? Okay, so there is a quick remix challenge if you want to perform. So you can just open this link and there will be the four questions which you can answer. And then you can create a zero knowledge proof using that. So as soon as you open this link, you will get all the instructions there.
04:44:44.254 - 04:45:42.980, Speaker A: That how you can perform that challenge. I can try to open it here also. So here you will see, you will see these four questions, you can find their answers and then you can go through these steps which are described during the workshop. So you can just clone this repo in the Remix ID itself. I can show you it directly on the GitHub. And then you need to go to this script, this compute JS. This script will basically help you to compute the zero knowledge proof.
04:45:42.980 - 04:46:21.810, Speaker A: So you can go to this compute. Please clone it within the Remix ID because you need to perform some contract interaction. So you will clone it on your Remix ID. And then we'll open this file. And then you will go to line number 52 where you need to update this nullifier value to some random value. This should be unique for you. And then you can put the answer of those questions within the quotes here on the line number 54, 55, 56 and 57.
04:46:21.810 - 04:47:23.180, Speaker A: So these answers are case insensitive. So you can just put the answers here and then you can run the script in the Remix ID as it has been explained. Just make a right click on the file name and you can just let me just do it with you. So you can open the remix. ID. You can go to clone. Okay me, come on.
04:47:23.180 - 04:48:47.950, Speaker A: Wow. Okay, it is taking time for me. Usually it is not like that. Okay, seems hanged a bit. Okay, so it is cloned here and then you can go to scripts, you can go to compute and here you can just update this value to any random value and you can put your answers here within the codes like so here are the questions in the HackMD file. What is the name of the plugin that allows the git operations? And then this one is about the net spec tag and then this is about the workspace name when you connect a project using Remixd. And then this one is one non technical question.
04:48:47.950 - 04:49:56.810, Speaker A: So you can just put the answer of those four questions here one by one and click. You can just right click and run it. So if you will put the right answer only then it will run, otherwise it will just fail. So if I just try to do something like that, it will show you the logs here on successful completion so I have won't put the right answer so here it is showing me this error. So you need to put the right answers. And once you will put the right answer and run that script, it will basically create this file in your workspace, which is a zero knowledge proof. And then once you submit that proof so it is clear that you know the answers, but you don't need to disclose the answers.
04:49:56.810 - 04:50:53.100, Speaker A: And then you can just go to this plugin and connect to Optimism provider. It will require some optimism ETH so if you don't have them so just go to this link and drop your ethereum address you will get some optimism ETH to perform the transaction and then you can just run this script. This script will basically submit your zero knowledge proof. And as soon as this will be successful, you will get one NFT minted like this. It will be looking like this, which is like limited for the Athenia. And you can see always these remix reward NFTs here on the remix reward platform. So there are more other people, there are other NFTs which are distributed.
04:50:53.100 - 04:52:31.780, Speaker A: So these are the just remixes. They may take some time to load. So you can get one of these NFTs. Does anybody need any help to execute this challenge? Go here and select this optimism provider. I don't have MetaMask here so this will not work for me. Okay then I think this is it. So here are the remix links and we are most frequent we just provide most frequent responses on the gitter so you can just put your queries there and this challenge will be open for some time so you can just try out in some time so this hack MD document is visible out there.
04:52:31.780 - 04:52:44.800, Speaker A: Okay thanks for your time it maybe I can just do this.
