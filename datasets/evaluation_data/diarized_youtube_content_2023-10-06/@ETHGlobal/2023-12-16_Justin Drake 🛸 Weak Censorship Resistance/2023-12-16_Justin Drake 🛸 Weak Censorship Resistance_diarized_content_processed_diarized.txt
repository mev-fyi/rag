00:00:07.370 - 00:00:42.182, Speaker A: Okay, so backstory on the slides is I've. I tried to do a new set of slides for every talk, and I've had five talks. This is my fifth one. And I was like, okay, I'm just going to reuse slides for the last one. And then I looked back on my old slides from, I don't know, 18 months ago, and the state of the art has changed so much that I had to do new slides from scratch. So now this is my fifth new slide deck from scratch. So I'm going to be talking about weak censorship, and it's going to be in three parts.
00:00:42.182 - 00:01:31.670, Speaker A: One, I'm going to talk about definitions of censorship and weak censorship, and then talk about the problems with weak censorship, and then finally talk about solutions to weak censorship. So my definition of censorship is to invoke this test, which I call the append test. It's a very simple test. If you have a transaction which is publicly available but didn't make it in a specific block, you need to ask yourself, could it have been appended at the very end of the block? And if the answer is yes, it was appendable, then the transaction was censored. If the answer is no, then that's fine. The transaction was not censored in that specific block. And there's multiple reasons why a transaction might not be appendable is because it might have been invalid.
00:01:31.670 - 00:01:52.590, Speaker A: Or maybe the block was full. Right. If the block is completely full, you can't append more transactions. Or if the validator was offline and the slot is empty, well, there's no block, so you can't append a transaction. So that's my append test for censorship. Now, there's two types of censorship. There's weak censorship and strong censorship.
00:01:52.590 - 00:02:29.530, Speaker A: Weak censorship is when the censorship is temporary, so the transaction actually makes it on chain, but it's delayed. It could be a delay of a few seconds or a few minutes, generally. And then there's this other notion called strong censorship, where a transaction just never makes it on chain. It's kind of this permanent censorship, and this is really bad because it's effectively a 51% attack on Ethereum. And we have some really, really big issues if permanent censorship happens. And so this talk is going to be about weak censorship, which is the censorship we've seen so far on Ethereum. We've never seen strong censorship.
00:02:29.530 - 00:03:04.466, Speaker A: So, yeah, we're all familiar with the MEV pipeline, which starts with the user and ends with the attester. And there's kind of this travel right from intent to proposal. And the reason why I show here the MeV pipeline is to try and tell you where weak censorship lives, where it comes from. So, at the very top here, we have, I guess, what I label the private domain, right. The user and the wallet is kind of stuff happening off chain. And so there's not much we can do. It's in the private domain.
00:03:04.466 - 00:03:35.842, Speaker A: And then at the very bottom, you have strong censorship, which originates from attesters. Right. If you have a 51% attack, it's the validators, the attesters, that are doing this attack and leading to strong censorship. And so the weak censorship is the stuff in between, from searcher to proposer. Okay, so what are some of the problems with weak censorship? And there's at least three of them, and they all have to do with inclusion. One is inclusion latency, meaning that transactions take longer to come on chain. There's something I mentioned.
00:03:35.842 - 00:04:18.746, Speaker A: It could be a few seconds of delay or a few minutes, but there's another problem, which is inclusion bandwidth. And I'll give more details about that. And then finally, there's inclusion mimetics. And roughly speaking, the less important problem is actually latency. It's the one that people think about immediately, but it's the less important one. The most important one is the inclusion mimetics, at least in my opinion. Now, there's this kind of formula for inclusion latency, which is, you take the latency of the l one, which is, for example, 12 seconds, and then you divide it by the amount of blocks which are not being censored.
00:04:18.746 - 00:05:19.970, Speaker A: So, for example, if only half of the blocks are not being censored, then you divide by one half, which is the same as multiplying by two, and so your latency kind of doubles. And this is relevant for tornado cash transactions today that are tornadoes on the OFAC list. And very roughly speaking, there's 75% censorship, meaning there's only 25% of lock space, which is neutral. And so actually, you have a multiple of four there on the inclusion latency. Now, inclusion bandwidth has to do with rollups, not transactions, but more so for roll ups if you have a censored roll up. So one example would be Aztec. Aztec is trying to build a roll up on Ethereum, and it's trying to have this private kind of mixing service, I guess, within its roll up, and it could just, like tornado cache, get censored.
00:05:19.970 - 00:06:06.414, Speaker A: Now, one of the problems with a weak censorship is that if only 25% of block space is neutral and 75% of it is censored, then now, Aztec can only consume 25% of the blobs. And so its max capacity, its maximum bandwidth is actually only 25% compared to another roll up. And I think this is an even bigger problem than the inclusion latency. For inclusion latency, people will say bitcoin has ten minute block time, and so a few seconds of delay is not a big deal. And maybe that's the case. But for roll ups and bandwidth, it's a huge issue. And then there's what I think is the biggest issue with weak censorship is mimetics.
00:06:06.414 - 00:06:53.942, Speaker A: It's just a very bad look that 75% of Ethereum blocks are censored today. It's kind of a sign that governments kind of indirectly have influence over Ethereum. And when you even just mention the word censorship, the first thing that comes to mind is censorship is bad. And so it's just not good from a marketing standpoint. And it's also been used by journalists as a way to criticize Ethereum, and it's also been used by bitcoiners and various other critics of Ethereum. And so I think it is something that we need to fix. And the reason I think we need to fix it is because there's this mimetic chain going on, right? Censorship resistance is at the very beginning of a chain which ends with monetary premium.
00:06:53.942 - 00:08:03.266, Speaker A: So censorship resistance gives us credible neutrality, which gives us social legitimacy and means that e for the asset can gain the so called monetary premium, which is very important from a utilitarian perspective. Why? Because monetary premium gives us a huge boost in economic security as well as a huge boost in economic bandwidth for applications. Now, what is the situation today in terms of censorship? Unfortunately, five of the top six builders are censoring, and these are their seven day dominances. And so you can see the top two builders account for roughly 60% of Ethereum blocks, and they're both censoring. And so if we look here, just with these builders that are listed, that's about 75% of Ethereum block space, which is censored. Now, I think it's a pretty bad situation because we've had 75% so far. But actually the progression has been in a worrying direction.
00:08:03.266 - 00:08:46.866, Speaker A: If you look at Beaver build here, builder zero x 69 and gambit just a few weeks ago, they were non censoring, so something happened. They flipped to becoming censoring. And so it's possible that we're actually going to have much more than 75% censorship in the short term. And one of the reasons has to do with searchers. So it turns out that searchers have a huge amount of power. Take, for example, Jared from Subway, who's, like, one of the big searchers. Searchers provide flow, bundle flow to builders, and today, Jared from subway provides their bundle flow to both neutral builders and censoring builders.
00:08:46.866 - 00:09:50.380, Speaker A: But imagine that Jared from subway gets a new job or was acquired, and now is Jared from Citadel. Well, Jared from Citadel might, you know, we're Citadel. We don't want to send our blocks to non censoring builders. We're only going to send them to censoring builders. Well, now, as a neutral builder, you just have know go out of business because you're not going to win a significant portion of blocks if you don't receive the bundle flow from Jared. And so there's these few searchers out there or ofa providers, whereby if they suddenly decide, hey, we don't want to give our order flow or bundle flow to neutral builders, well, we're going to see an eradication of neutral builders, and it just takes one of these meaningful searchers to do so. And so a possible situation is that layer one, the dominance of layer one, neutral block space, is basically going to be the non mev boost portion, the self built portion, which is about 6%.
00:09:50.380 - 00:10:35.270, Speaker A: So this is where we might be heading very, very soon. And it's even worse than that, because the portion that self build is also kind of shrinking over time as more and more validators that are somewhat unsophisticated realize that they're losing a lot of money and kind of activate mev boost as opposed to self building. Okay, so I hope I've convinced you that there's real problems even with weak censorship. It's not just strong censorship, which is a problem. Now, let's talk about some of the possible solutions here. So there's basically four solutions that I see. Encrypted mempools, inclusion lists, MeV burn and enshrined PBS.
00:10:35.270 - 00:11:35.450, Speaker A: And basically, there's four different actors that now will have some sort of power over improving the situation. So let's start with users. Users with encrypted mempools will have the option to encrypt their transactions and basically say, no, you can't see the content on my transactions. And that's going to be very helpful for censorship resistance. We're going to have proposers who now with inclusion lists, are going to be empowered to force include transactions on chain, again, helping with censorship resistance. We're going to have attesters with Mev burn that are going to require that the proposer picks the most valuable block, therefore making sure that any block that does censorship is much more expensive to get on chain. And then finally we're going to have the relays with enshrine PBS that can just piece out and disappear.
00:11:35.450 - 00:12:06.642, Speaker A: Okay, so let's go through each of these four solutions. Encrypted mempools, inclusion lists, MeV burn and epbs. So let's start with epbs actually, because it's very simple. The idea of epbs is to remove the relays completely. So relay censorship goes to zero. Nice and clean formula here. The next one, which is a bit more interesting, is forward inclusion lists.
00:12:06.642 - 00:13:03.618, Speaker A: So the idea of an forward inclusion list is that as a proposer, I will self build a block of transactions. And this block has to be some sort of a block template for the next builder in the next slot. And this next builder has the option to reorder transactions and insert transactions, but cannot delete transactions from that list when they're building their block. So this is where we are today. Before inclusion list, the neutral block space on Ethereum corresponds to the block space built by neutral builders. But with inclusion lists, we're going to have this additional component, the plus inclusion list percentage. So just to give you an example, let's say half of the builders are censoring, half of it is neutral, and half of the proposers are forcing transactions on chain.
00:13:03.618 - 00:13:42.434, Speaker A: Then basically we're going to have half, plus half is one. But then there needs to be a corrective factor when they overlap. So one half times one half is one quarter. So you subtract one quarter and basically we'd be up to 75% of neutral block space on Ethereum. So with inclusion list we can significantly improve the layer one neutral block space dominance. Another really powerful technology is encrypted mempools. And there's various flavors of mempools, and there's various talks online that you can find on that.
00:13:42.434 - 00:14:31.058, Speaker A: But here I really want to look at the economic consequences of mempools. So today, before we have encrypted mempools, the cost of censorship is absolutely minuscule. It's basically just the sum of the tips of censored transactions. Now there's very, very few censored transactions out there, and they each pay a very, very small tip on the order of one gui per gas. So in terms of revenue that's sacrificed from the builders, it's very, very small. But what the encrypted mempools do is that they basically transform the costs to the sum of all the tips from all the encrypted transactions. And the reason is that if I want a sensor now, I have two options.
00:14:31.058 - 00:15:19.150, Speaker A: Either I include the encrypted transactions, but now I take a risk. There's a risk that within those x encrypted transactions, one of them is a transaction that I want to censor, or I just censor all the encrypted transactions. But if the vast majority of encrypted transactions, if the vast majority of transactions are encrypted, then now I have to basically censor everything. And so the cost of censorship goes up dramatically, maybe by a factor of 1000 x. Here. Now, another really cool technology is MeV burn. So, right now, this is the same formula as in the previous slide.
00:15:19.150 - 00:15:57.514, Speaker A: The cost of censorship is the sum of the tips from censored transactions. But what MeV burn does is that it adds another component to the cost of censorship. And specifically, it adds the base fees of the censored transactions. So now, as a builder that wants to censor, I have to cover both the tips and the base fees. But it turns out that tips, in practice, are much, much lower than base fees. So, generally speaking, to give you an order of magnitude, tips about one way per gas. But base fees is, let's say, 30 gray per gas.
00:15:57.514 - 00:16:33.660, Speaker A: So there's a 30 x delta between the two. And if we combine the two technologies, MeV burn, with encrypted mempools. So we have 1000 x. Here we have 30 x. So we're basically making the cost of censorship, roughly speaking, 30,000 times larger by compounding these two technologies. And what I believe will happen is that censoring builders will just go out of business. It will be unprofitable to be a censoring builder once these two technologies are in place.
00:16:33.660 - 00:17:35.950, Speaker A: And then there's this one final idea, which I want to mention. It hasn't been disseminated very much, but if we go back to the inclusion list, there's a bit of a problem here, which is that the percentage of proposers that will start using inclusion lists might be relatively small. It might be 2030, 40%. And really, we want it to be as high as possible, ideally 100%. And what we can do is we can apply the same ideas as MeV burn, which is to maximize the block, but for the inclusion list itself. So, for example, we can have a rule which says that a block is only valid if the inclusion list was built in such a way that it maximizes the amount of base fees in the inclusion list. And so it's now to the incentive of proposers to build inclusion lists with all the transactions that they see in the mempool, and basically removing the option to not use the inclusion list.
00:17:35.950 - 00:17:54.860, Speaker A: And so I think we're in a very, very good position. From a research perspective and from a design perspective, I believe we have all the tools to fight weak censorship. It's just a matter of time until it's solved, and that's it. Thank you. Thank.
