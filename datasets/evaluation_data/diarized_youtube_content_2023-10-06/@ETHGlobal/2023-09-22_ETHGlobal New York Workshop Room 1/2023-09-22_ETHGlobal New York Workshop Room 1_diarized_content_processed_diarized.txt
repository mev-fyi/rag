00:00:28.190 - 00:01:26.890, Speaker A: Can start. Okay, cool. All right, folks, if you're a builder, I promise this will be the best 20 minutes of your next three days because we've worked with over 150 startups in the last three years, many of which are the who's who of crypto at the earliest stage. So we learned a lot of lessons, and we're going to distill all these lessons with you in next 20 minutes. So we've worked with, for example, synthetic x, zero x kyber, tensor stepan at the earliest stage and of course, many failures. And so we're going to share some of the key ingredients for success and failures with you guys in the next 20 minutes. So we're going to talk about today, how to find a winning idea and also winning team in crypto.
00:01:26.890 - 00:02:08.550, Speaker A: So myself, Imran, we're partners at allianstyle, will be giving presentation for about five minutes each. So how to find the winning idea in crypto. One of the best ways to build a winning idea, to find a winning idea in crypto is to build something that you yourself want to use. And that should be fairly intuitive. I'll explain why that's the case. And this is not really unique to crypto, by the way. Building a startup is almost like finding a secret, and it takes a long time to find that secret.
00:02:08.550 - 00:02:47.890, Speaker A: It takes a lot of really good intuition into the market that you're operating in. And guess what? If you are the user of your own product, you're going to have the best intuition about the market that you're operating in fairly intuitive. I'll give you an example. Tensor, which is now the number one NFT marketplace on Solana. We supported them at the earliest stage. Those guys, when they applied to Alliancedao, they were building something completely different. They were building some random NFT pricing protocol.
00:02:47.890 - 00:03:39.300, Speaker A: Obviously, we knew it was not going to work, but these guys have been in Solana NFTs for two years before they really and they were Djens themselves, they were NFT traders themselves. So eventually they had this idea of building an NFT marketplace for pro traders such as themselves. And every time I talk to them, every time they talk to us about a new feature, a new product idea, it's always about, oh, would I want to use this myself? And that's always one of the really great ways, likely ways for you to find a good idea. And this is not just unique to crypto, it's everywhere in startups. So that's one the second way.
00:03:43.450 - 00:03:43.814, Speaker B: To.
00:03:43.852 - 00:04:48.634, Speaker A: Find a winning idea in crypto. And unfortunately, this is going to sound pretty discouraging because the way to find winning ideas is to be in the space for long enough of time and really focus on the space full time, day in, day out, for a long period of time. And that usually takes one to two years at least. And why is that the case? Well, that is the case because crypto is such a counterintuitive space, right? I'll give you some of the things in crypto that are counterintuitive that web two people don't really appreciate. So for example, in crypto, if you build decentralized applications, you're not supposed to move fast and break things because crypto handles money. So if you move fast and break things, you can lose for good, you're going to lose your reputation for good. So that's one of the counterintuitive things that crypto is about and it takes a long time to appreciate these things.
00:04:48.634 - 00:05:40.170, Speaker A: So being in crypto for long enough of a time will help. Unfortunately, a lot of founders coming from web Two, especially in the bear market, they pivot back into web Two, including AI or whatever the latest hype cycle is. They pivot back right before the critical juncture of that one or two years, right before the time they find that secret that I was talking about. And you don't want to do that. You want to stick to crypto for at least enough time for you to develop the intuition. The next way to find a winning idea is to explore the intersection of your previous domain of expertise and crypto. This one should be also fairly intuitive.
00:05:40.170 - 00:06:54.046, Speaker A: Helium is a very good example. If you guys know helium, that's the decentralized HubSpot network. And the founder, Amir, he spent almost a decade in network engineering and at some point he was like, maybe I can apply the idea of bitcoin, this decentralized compute using tokens to incentivize people to participate in the network. And so that's how he figured out or the original idea of helium. And so if you come from, for example, I don't know, imaging, like aerial imaging, like drones or whatever, you can think about maybe using drones to capture images in a decentralized network and build some sort of Google Earth kind of product, for example. Think about some of the ways in which crypto could potentially help with your existing domain of expertise. So these are some of the ways to find winning ideas.
00:06:54.046 - 00:07:44.610, Speaker A: Now what are some of the ways not to find winning ideas? And this will sound really controversial, talking to users is actually usually not the way to find the winning idea. I'm not saying you should not talk to users, talking to users is absolutely critical. But some of the best ideas I've seen, they always come from organically, come from their intuition. Intuition is where the best ideas come from almost all the time. You should talk to users once you have the product out and learn why people do or do not use the product. Again. This touches on the three points that I brought up before, especially the second point of being in crypto for a long time and developed intuition.
00:07:44.610 - 00:08:24.830, Speaker A: So talking to users counterintuitively is usually, of course there's always exceptions, but usually it's not the best way where the best ideas come about. And the next one is reading thesis that VCs put out. Some of you are laughing because you do that. I can tell you do that. And I'll tell you why this is not a good idea. There's a couple of reasons. One is every time you read a thesis that VCs put out, chances are especially the super famous popular VCs on crypto Twitter, chances are 10,000 other people read the same thing.
00:08:24.830 - 00:09:22.660, Speaker A: And I know this for a fact because every time someone I don't know, Kyle Simani or Paradigm or whatever, every time they put out a thesis, we receive a bunch of applications to Alliancedale that are building the exact same thing. And this is a really bad idea because if you just decide to build something because VCs think it's a good idea, you don't fully understand. Again, you don't have the intuition, the deep intuition as to why this product matters. And you're competing with 10,000 other applications. And this is why it's not a good idea to read, to use what VCs put out on Twitter as the key determining factor for why you want to build a product. So very straightforward. I'll pass it over to Imran to talk about how to find the best teammates to work together on.
00:09:24.470 - 00:09:50.458, Speaker C: Hi guys. So the next five to ten minutes I'm going to help you think about how to find the right co founder or to hire your first employee in your company. But primarily this is about finding your first co founder. And the reason why I think this is important is because primarily in hackathons when people are meeting with others just to figure out an idea, they typically may have no idea that they may have a lightning in the bottle moment. And when they do, then that co founder is the co founder for the.
00:09:50.464 - 00:09:51.562, Speaker B: Rest of your life, right?
00:09:51.696 - 00:10:55.146, Speaker C: So what I want you to do is within the next five to ten minutes, I'm going to help you assess who is going to be the best team member for you to work with for the next ten years. And the first is the why, the what and synergy can you align on ideas quickly is like the number one example. Like if you were to meet with someone and you're ideating on a certain idea that you want to hack on, are you able to ideate smoothly with the person that you're talking to? Can you support each other through stress? So an example of this is being able to understand if or if not they can help you with the stress and the situations that you can go through. And number three is high agency. Does that person that you're working with have high agency? Can they take on tasks and know that they can fulfill those tasks? So those are some of the things that I would look for when you're looking for a person that you want to hack with. And so sometimes when we get applications within alliance, we see solo founders that apply. And there's nothing wrong with solo founders.
00:10:55.146 - 00:11:47.680, Speaker C: There's many successful solo founders that have succeeded. But an interesting story I want to bring up to you was the story of Paul Graham at YC and Drew Houston of Dropbox. Drew Houston actually applied to YC two times and he was denied and the reason why he was denied to the program was the fact that he was just a Solo co founder. And Drew asked Paul like, why can't, you know, build this idea that I have, which was Dropbox at the time? And Paul Graham specifically said is you need moral support and you need someone that can have synergistic value so that you can focus on one area of growth while the other person can focus on the other. Similar with Coinbase, you had Fred and Brian and others in the space. You need moral support. You need someone that can understand you and you need someone that can help ideate throughout the process.
00:11:47.680 - 00:13:10.666, Speaker C: And so when you think about looking for a co founder or a hacker, what are the things that you'd want to look for? Well, there's two ways that you can go about it. The first way is, are you a domain expert yourself? Do you have a secret that no one else does about the expertise that you have? A clear example is what Chow just said earlier with the intersection of domain expertise in crypto. If you have that domain expertise, then you may want someone that can help you with business and growth. Let's say you are a business and growth lead. Then maybe you'd want someone that has a very deep technical background or a secret that they know that can help support the project that you're working on. And I think this is a very clear, important message I want to give you guys is that you have to do this early on because if you don't, then there is going to be a lot of overlap and then stress, and then it can lead to things that you don't want it to go through. So finding that early on is going to be very important for you two is, and I think this is the second reason why most founders break up very early on is the fact that stress is a very it's going to happen, right? You're going to work 80 to 100 hours a week and stress is going to ultimately make or break a startup that's like hands down.
00:13:10.666 - 00:14:20.194, Speaker C: And so what you want to look for when you're looking through the folks that are in this room or outside this room is can they deal with stress? Do they have emotional, high emotional intelligence or EQ? And the reason why I'm bringing all this up is because towards the end of this presentation, I'm going to give you a five minute test that you could take and use this test to find others and ask specific questions within five minutes. To find out if they're a good match for you or not. So there's a reason for some of the questions I'm bringing up here. The third is, do they complement you? Because as I've mentioned earlier, is, let's just say that you have two technical folks that are co founders. The biggest problem that I see here is the different unique insights and advantages that they have when it comes to building product. And one co founder could have a very specific tech stack that they want to work with, and that's all they want to work with. And I've seen many hackers early on that kind of fight, and they end up not delivering a product or even an MVP after the hackathon is done.
00:14:20.194 - 00:15:06.190, Speaker C: So it's important to really figure out if that person that you're hacking with is going to be aligned in the vision and are they able to complement you in regards to where you're going to go next. So here's a quick five minute test. The questions I ask, and in fact, it turns out these questions is how the tensor team got started. And the tensor team, if you know, is the number one NFT marketplace in Solana. And the way they found each other was through this test. I gave you a minimal version because this is good for just a hackathon. But for a real startup, there is a longer list that I can share with you guys later.
00:15:06.190 - 00:15:46.054, Speaker C: But I'm going to go through this quickly. Some are obvious, so I'm not going to go through it, but some aren't. One question I want to bring up is, are you control or wealth oriented? I think this is important because some co founders want control. Some just care about money and they want to help build the product to a certain point and allow the actual founder that wants lead to take leadership and run with it. It's much easier to find this out early on because you know who's going to run what. And usually it turns out to be a good decision. And the reason why I bring this up is because many co founders, you'll notice this in mid of growth.
00:15:46.054 - 00:16:53.540, Speaker C: You'll see like co founders kind of fighting with each other. One wants to be the CEO, the other wants to be CEO. Then you see this co CEO role that kind of is given, and it's usually a red flag when you see a co CEO role. So that's why I was kind of bearish on salesforce. So that's one question. The second question that I want to highlight is if you are really serious about starting a startup, if you're here to start a startup, the one question you want to ask is, where is the priority of starting a startup in your life? Right? Is it your number one priority? Is it number three? You're just here to hack and have fun, make friends. You could quickly figure out who's going to align with you and who's not? So I'd say that's number two important question, and some of the other questions are a little bit more detailed, but what are the things that are important to you? What type of product do you like? What type of culture do you like types of folks that you want to hire? Another question I want to point out is, like, what happens if we make no money in twelve months? And then finally here's a second set of questions.
00:16:53.540 - 00:17:44.580, Speaker C: If you were to pick one thing, what is your superpower? I think this is another good question that you should ask someone. What role do you have envisioned for me? How do you deal with stress? What is your biggest weakness? And at the end of the project, you should kind of decompress and ask questions in terms of, like, did you guys enjoy working with each other? Did you see eye to eye? Did the ideas that were generated really come to fruition? And so these are the set of questions that you should ask when you're looking for someone because this will kind of boil it down to the people that you really want to align with so that you can start a startup or build an idea here at ETH Global and then be able to work on a winning startup idea moving forward. If you have any questions, you can find us at the alliance booth. But yeah, thank you for coming.
00:18:34.430 - 00:21:38.218, Speaker D: That should be they have not projected it yet. Yeah, great. Hey, is this good or oh, great. Oh, yeah, awesome. Thank you. Well, they signal me. Hey, welcome everyone.
00:21:38.218 - 00:22:51.970, Speaker D: Yeah, we're going to get started with the workshop. Just want to first give a brief overview of what Axiom is and then talk through how you can actually build a ZK powered app with Axiom in about 30 minutes. So, first of all, what's the problem that we're trying to solve at Axiom? It starts with the observation that if you're building a smart contract on Ethereum today, you actually quickly realize that your contract can't access much data. As an example, if you look at the OpenSea listing page for Pudgy Penguin, you'll notice that almost all of the information that is on the page is on chain data. For example, the transaction history or historic owners, but only the current owner is actually accessible on chain. And the reason for that is to maintain the decentralization of transaction validation on Ethereum. So developers work around this by making pretty difficult tradeoffs today between paying more to access more data in their smart contracts by just storing more data in storage, or reducing the security of their applications by using a trusted oracle that simply puts data on chain.
00:22:51.970 - 00:23:55.030, Speaker D: And so at Axiom, we're removing this trade off by providing a new way to access historic on chain data using zero knowledge proofs. What that means is that we use the fact that the current block of Ethereum commits to all historic data on Ethereum to give cryptographic proofs that a piece of historic data that your application is using is actually valid in the history of Ethereum. Because we're using cryptography instead of consensus to access data, we can offer a whole new set of capabilities for your application. And so we've wrapped this up into what we're calling a ZK coprocessor for Ethereum. The flow of using it is that you send a query to our smart contract. We provide trustless reads to any blockheader, any account or any contract storage variable in the history of Ethereum. And we're also adding transactions and receipts in our V two, which we're previewing at ETH Global.
00:23:55.030 - 00:25:08.590, Speaker D: Once you have that data, you can do computations on top of it with custom ZK circuits and get to a result that your onchain application is interested in. We provide a zero knowledge proof that those results are actually correctly computed and come from data which actually comes from Ethereum. So that means that you can rely on data results that come from Axiom with the same cryptographic guarantees as something you're accessing directly on chain. So let me talk through how you'd actually use this in your application. So, the flow of an application that uses Axiom to access historic data goes as follows first, we provide a very easy SDK to allow your users to prove computations and request data in your web front end. So here we actually provide a client side ZK prover that your users are going to be running on their laptops. They'll send a query for on chain data to the Axiom smart contract, which we're indexing, and we'll prove that the data access that they're doing is authentic using zero knowledge proofs.
00:25:08.590 - 00:26:10.850, Speaker D: Finally, we verify the end result on chain with the ZK proof, and we execute a custom callback on your smart contract, which is the only change you need to make to your contract to integrate Axiom. So let me talk through the steps of actually integrating Axiom into your application. First, we've provided an easy web replace for you to specify the computations you want to do and the on chain data access you want to make. So this is called Axiom REPL, and we'll walk through it later in this workshop. Once you've done that, we allow you to export a WebAssembly ZK prover to a next JS app. We have a scaffold app for you already from this web REPL, but you can also migrate that prover to a web front end of your choice. This would be ultimately what your end user is using to interact with Axiom.
00:26:10.850 - 00:27:19.750, Speaker D: Once that's done in the flow of your application, users would send queries to Axiom from the web front end that happens through an on chain transaction. We're indexing those queries and we'll prove valid data access through zero knowledge proofs that are executed on our server back end. Finally, we'll implement a callback sorry you'll implement a callback on your onchain application. And what we ask is that you extend our Axiom V two client interface that gives a standardized format for the callback, which allows you to check various properties of the query, make sure things are authenticated and permissioned correctly, and finally gives you the user data that you're actually interested in. Okay, so now time for a demo. You can follow along by going to reply Axiom XYZ. It unfortunately will not work on your phone, but for those of you with laptops, you can watch what I'm doing.
00:27:19.750 - 00:28:34.260, Speaker D: You'll actually see the same demo code as I'm running live. So let me just pause for like 5 seconds so everyone can get the URL and then I'll go to do some live coding. All right, so back to Axiom replace. We've developed a JavaScript interface to allow you to actually access on chain data and do computations on it. So as you can see here, we have this in this window you are writing actual JavaScript and we're going to write an application to prove the first block that a user's account actually made a transaction on Ethereum. So how can we know that a user's account made a transaction for the first time at a certain block? Well, if you look into the details of the EVM, you'll know that we have to check that the nonce of that account was zero at the previous block and then became positive on the claimed block where they made the first transaction. And that's exactly what we're going to check in this JavaScript interface.
00:28:34.260 - 00:29:31.712, Speaker D: So we have an input box which let me just pull up here. And what we'll check is that for this address, the first block in which it made a transaction was the claimed block number here. And this is all on girly testnet. So the way we do that is first we compute the previous block. And here whenever we do any computations in this JavaScript interface, we require you to use our JavaScript functions. We've written custom functions, for example, sub, add, mole and div to implement arithmetic operations that will later be proved in zero knowledge. So here we would compute the previous block number and then we would call functions that we've implemented to allow you to access on chain data through this interface.
00:29:31.712 - 00:30:35.000, Speaker D: For example, here we're calling Get account. You can also call functions like Get Storage, get Solidity Mapping, get Transaction or Get Receipt to access the entirety of Ethereum execution layer data. So here we get the account object from the previous block with this address and then we can access the nonce from that account just by calling nonce. And remember, we wanted to check that that nonce was zero. So we call assert equal to check that the nonce at the previous block was actually equal to a constant, which is zero. Now we want to check that at the claim block this nonce actually became positive. So again we fetch the nonce by fetching the account and then calling dot nonce on that account and then we use a function check less than to check that zero was less than the current nonce, thereby showing that it's actually positive.
00:30:35.000 - 00:32:05.300, Speaker D: So if all of these pass then we can use a final function add to callback to specify that the address and the claim block number should actually be sent to your smart contract as the callback arguments. So if I click test circuit we're going to generate test outputs here and we'll see that indeed we outputted the address and the claimed block number as the test callback arguments. Now I'm going to show a demo flow of this actually interacting with a contract on Gurley testnet. So to do that we're going to generate proving and verification keys and then we're finally going to generate a zero knowledge proof of the execution of these computations, namely subtracting one from the claimed block number and checking the equality of the nonce to zero and the positivity of the next nonce. Once we've generated this proof we now can send a query to Axiom to authenticate all the data inputs that went into this proof. What I mean by that is we need to check that the account nonce that we fetched was actually correct for both the previous block and the next block. So we can do that by sending a query on chain to Axiom and that actually sends an on chain transaction on Gurley.
00:32:05.300 - 00:32:59.944, Speaker D: Once we send that we can check it out on Etherscan. As you can see it's still being indexed. So let me pull up a transaction I sent maybe 1 hour ago so that's the exact same transaction and we called this send query function. What we sent and that's being done in our web front end is some information about the data that we wanted to fetch. So here we have the source chain, in this case the source chain ID is five which corresponds to girly testnet the data query hash which is a hash that specifies that we wanted to fetch the nonce of one account and the non at one block and the nonce that same account in the next block. And finally the information about the computation we did which we encode in this compute query object. So we have two pieces of information.
00:32:59.944 - 00:34:16.620, Speaker D: One is a V key that allows us to verify that the zero knowledge proof we did in the browser was correct and secondly the compute proof which actually is the proof. So what this query is going to do is to request Axiom to check two things one, that the Compute proof was correct and two, that the data we're requesting was actually used correctly in that compute proof. Once that check has passed, we're going to call this callback that you can specify here I've specified address of an example contract, a function selector of an example callback call and we specified that two results should be passed, so there's a result length of two. And finally we allow you to pass in extra data in the callback as well. The rest of the arguments specify what sort of gas requirements you want us to hit the callback with. So this is a transaction that's been sent to the Axiom Smart contract on chain and we will fulfill that request by calling the fulfill query function. As you can see, the fulfill query function gives you the compute results.
00:34:16.620 - 00:35:18.212, Speaker D: So this was the address and this was the block number that the address first sent a transaction. It also provides a zero knowledge proof that the compute proof was correct, that the data was validly plugged into the compute, and that everything really came from the history of ethereum. And finally we hit a callback on an example contract in this case, but in an application this would be your contract and we require that you implement an interface for we call Axiom v Two clients that simply takes a callback that expects the following arguments that kind of correspond to your query. So the first argument is just the source chain ID where the data is coming from. The second argument caller address is the EOA address that initiated the query. So if you're allowing any user to send a query into Axiom for your application, this would be the address of your user. Finally, the query schema specifies what your query is about.
00:35:18.212 - 00:36:36.360, Speaker D: So every time we write a query in the browser, it generates a unique query schema that you should validate in your application. The last two arguments, the query hash is a unique identifier for the specific query that's being sent and the Axiom results are the results in this case, the address and the number and the block number where that address first sent a transaction. So all you need to do to integrate Axiom into your application is to write a query in our Axiom REPL interface, export the NextJS prover, and then implement this Axiom v Two callback function on your Smart contract application and we provide this interface Axiom v two client for you to do it. Okay, so last couple of minutes, just wanted to reiterate those steps. So first you write a query or circuit in Axiom REPL to specify the computation, export the prover, modify your front end. To integrate that prover, we will on our server index your user's queries and provide approve valid data access. And then you will implement a callback on your contract.
00:36:36.360 - 00:37:35.240, Speaker D: So for this weekend we stood up a preview version of Axiom v two on Gurley and we have a bunch of ideas for what you can build with it. First, we think the areas of identity and governance are super interesting. We think you can provide autonomous Airdrops, namely Airdrops, where you deploy a smart contract with some criteria for who should be able to get the AirDrop users can. Prove using Axiom that they performed relevant activities in the past and are therefore entitled to get incentivized. That takes away control of the AirDrop from a centralized team and gives it to a smart contract. Similarly, you can imagine giving volume rebates or other types of loyalty rewards for usage of on chain applications. If you think about Uniswap, no matter how much you trade, you're paying the same fee with Axiom and uniswap V for hooks.
00:37:35.240 - 00:38:34.044, Speaker D: You might imagine that higher volume traders or new traders can get lower fees. Another angle is that you can actually construct a trustless Oracle using Axiom. You might imagine taking an average of on chain gas prices and constructing an index of ethereum gas prices to settle a derivatives protocol. We listed a few other DeFi ideas here and we're having special prizes for the best usage of Axiom in both identity incentivization and Oracles sorry and DeFi in the last couple of minutes. Just a couple more ideas. You can use Axiom to slash participants in a protocol on chain. For example, because we allow you to access transaction and receipt data, we think you might be able to detect whether an ethereum block contains a sandwich attack and who might be responsible for that.
00:38:34.044 - 00:39:26.632, Speaker D: If someone's responsible for a sandwich attack, maybe you should punish them, or maybe you can use that attack to refund part of the proceeds to the initial user. Other things we think are interesting are automatically adjusting parameters of a DeFi protocol using on chain historic data or having batch auction settlement prove to be optimal again off chain. Finally, there are a bunch of very silly ideas. You can give people little badges for various on chain Dgen activities they may have done. Imagine proving that you owned a lot of one type of NFT or you lost money trading NFTs. Imagine you have a badge if you lost 100 ETH trading NFT. You could also prove that you did various interesting onchain activities.
00:39:26.632 - 00:40:03.310, Speaker D: For example, if you farmed yam during DFI summer, I think that might be a notable attribute of your account. So we really are interested in creative ideas from you guys. We also have a special prize for the most creative usage of Axiom as well as the best overall usage. So we have a bunch of materials prepared for the ETHGlobal hackathon. We have a special guide at ETHGlobal axiom XYZ, and if you use this QR code, it'll take you to our telegram group where you can get help directly from the team. That's it. And I think we have maybe 1 minute for questions.
00:40:03.310 - 00:40:45.394, Speaker D: Yes, the question is can the users decode the query hashes to understand what people are querying? And the answer is sort of the query hash commits to the query, but it doesn't reveal the information of what's in the query. So that's actually sent separately on chain. Any other questions in the front? Real quick, just making sure here is.
00:40:45.432 - 00:40:47.714, Speaker E: There any sort of application broke up.
00:40:47.752 - 00:40:49.394, Speaker F: Interface for this, basically.
00:40:49.592 - 00:41:05.654, Speaker D: Would that be in the docs? Yes, we have a full TypeScript SDK and actually we export a sample NextJS app from Axiom REPL that uses that SDK. Are you guys using web clients for.
00:41:05.692 - 00:41:09.254, Speaker F: All this or just a regular I'm just making sure.
00:41:09.452 - 00:41:10.010, Speaker B: Yeah, yeah.
00:41:10.080 - 00:41:24.620, Speaker D: So all the proving for the front end can be done just on the client side, so no special stuff on the web client side. Okay, thanks. And we have a booth out in the booth area, so if you have further questions, you can come find us there.
00:41:27.710 - 00:45:38.670, Speaker B: So it's cool. Just feel me. I was feeling our I feel it. Display arrange. Wait, where's mirror? Even mirror.
00:45:38.830 - 00:45:40.050, Speaker D: Where's mirror?
00:45:41.390 - 00:46:06.580, Speaker B: Ram it.
00:46:39.070 - 00:47:08.142, Speaker G: We're clearly not trained to set up this, but glad it's up. So good afternoon, everyone. Thank you for coming to the workshop on Next ID with Mask Network. My name is Hannah. I'm one of the co founders of Nextid and head of Global growth at Mask. And today we'll have David here leading our developer relations, talking more about how to take reputation everywhere with decentralized identity and universal profiles. And we'll definitely talk more about, for this hackathon, some of the exciting things we want to build with all of y'all.
00:47:08.142 - 00:47:10.358, Speaker G: So without further ado, David, take it away.
00:47:10.444 - 00:47:22.440, Speaker H: All right, so as much as I love fragmented tension, we're going to do a quick exercise that will make this really a lot more fun. And it's a repeat after me.
00:47:29.950 - 00:47:30.410, Speaker B: Good.
00:47:30.480 - 00:48:27.902, Speaker H: Now that I have your attention, we are taking reputation anywhere and everywhere. We have cool pictures to tell you who we are, because just in case we're faking our identities, you need to know that at least we are cool. So there we are. We're going to jump straight in and cover a quick context of what has identity been in the past, what is it today and where is it going in the future? And why does all the stuff that we do really, really matter in a deeply important way for that? Traditionally, identity looks like credentials that allow us to do things like get mortgages or go to bars. They come from a central issuer and they're super, super useful and powerful for us. But today, the world is transitioning bit by bit and slowly and all at once from analog to digital. And so we see that represented a few metrics 8% more time.
00:48:27.902 - 00:49:31.250, Speaker H: Year over year has been spent every year for the last 20 years online. So we start to think like, we have these really useful identities for the analog world that go with us when we go to a new place. But how does that look online? How do we have identities that we can control and identities that we can take with us to different parts of the Internet? So a lot of people ask, is a wallet an identity? The answer is actually no. It's an identifier. It's like an email address. It's something that represents a way that someone can find you. And so what we look at is, how do we combine Identifiers, traditionally in web3, identifiers in web two, such as Twitter handles and email or YouTube channels or whatever you want, and all of the data and reputation that you've built, how do we package that into identity that you can bring with you to any place in any ecosystem? And the whole point of all this is our identities today in the real world are sovereign, portable and relatively secure.
00:49:31.250 - 00:49:39.140, Speaker H: But a wallet address doesn't really pass that test because it can't really go outside of a single chain ecosystem usually.
00:49:39.670 - 00:49:40.658, Speaker E: So we're going to look at like.
00:49:40.664 - 00:49:41.298, Speaker B: How do we solve that?
00:49:41.304 - 00:50:51.290, Speaker H: How do we move forward? It's going to be cool. So we think of identity as a sum of the Identifiers of the person that represents who you are. So this would be like, it could be an Ethereum address linked to your Twitter, linked to your Facebook, to some sort of business page that you have. And one of the cool concepts about this is when you have a universal identity graph, when you go to a new place, if you as a dev are like, hey, I wonder if this user has an identity or has a footprint. Are they a real person or a real enough person? What information do they bring with them that is useful? Can I instantly personalize an experience in my DAP or in my app? Because now I know their Ethereum history, their Solana history, the amount of Twitter, the type of their Twitter footprint, and all of that. So it's kind of cool and we'll spend a little more time on that and hopefully have a couple of light bulb moments for you all. But we bind these Identifiers together with something called DIDs.
00:50:51.290 - 00:51:32.278, Speaker H: Sometimes people say, oh, did decentralized Identifier, almost did is a decentralized or a decentralized identity. Almost. It's a decentralized identifier. And it actually is something that we call an avatar, but it's a key pair. And a key pair is used to sign proving ownership of your different Identifiers to create and knit this identity graph. So you see your avatar is your key pair and you're using signatures to record a record of I own this Ethereum address, I own this Twitter account. These get stored in a public database on our Weaver.
00:51:32.278 - 00:52:07.938, Speaker H: You can get them from us through our APIs. We focus primarily on data that is public. So a lot of times we talk a lot about privacy as a sector, and there is a ton of information that should be below the privacy waterline of the iceberg, really important. However, there's also a lot of identity and reputation that is above that waterline. And that's most of what we focus on currently today. So the public facing things of what matters about you. We have three primary parts of our services.
00:52:07.938 - 00:53:12.860, Speaker H: So one is using is a service called Proofservice to create the bonds between these DIDs that constitute your reputation or your identity. And then we also have basically a way to query those or to get those get all the DIDs called relation service. And then we have a really nice new SDK that makes working with these things super, super easy. And it makes querying or updating what you call an identity graph or a universal profile really easy. So I'm going to jump into this really quick. So one way that this can look is pretty cool is you see here we have for a single user all of the different profiles or Identifiers about a person displayed in one place. So if you as a dev want this information to make your profiles super, super rich in whatever you're building, this is how you do that.
00:53:12.860 - 00:54:18.620, Speaker H: If you want to have the reputation or accolades that somebody builds in your ecosystem, in your game, or in your DeFi battlefield, if you anchor these actions to a did with our services, that means people can care or people can take this reputation that they've built in your product with them everywhere that they want to go online. So a little bit of a different paradigm and a little bit more portability than we might be used to ecosystem to ecosystem. But it's that same magic moment that we all felt the first time that we used a DeFi DAP when we logged in and we signed in with our wallet and then all of our information was just there. That's what we want to create beyond financial use cases using the same cryptographic primitives. And we are going to be at our booth and we'll be able to answer all these questions because it can be a little tricky. The SDKs make it a lot easier. It's actually pretty darn cool.
00:54:18.620 - 00:54:57.960, Speaker H: So Hannah, you want to and now Hannah will talk to you a bit about bounties and past winning projects and a little bit about what we're looking for this week.
00:54:58.570 - 00:55:05.580, Speaker G: Yes. Thank you, David. I'm going to start lowering this microphone because I'm very much buried short person.
00:55:06.270 - 00:55:06.634, Speaker B: Great.
00:55:06.672 - 00:56:03.930, Speaker G: So you've seen a lot of these demo of how web3 bio would look like and our SDK for developers to build on. And for the past year or so, we've been running nextid to understand how to better serve our developers and help you build the next really exciting applications around social or gaming. I think this is do you see it? My slides are gone for some reason. Do you see it? That's okay. I think we can.
00:56:07.980 - 00:56:08.680, Speaker I: One moment.
00:56:08.750 - 00:56:09.780, Speaker F: Technical difficulty.
00:56:09.860 - 00:56:10.490, Speaker G: Yes.
00:56:16.140 - 00:56:17.400, Speaker B: Go on, mate.
00:56:20.440 - 00:57:06.602, Speaker G: You saw it in the previous previous year. Do you not see it now? All good. You know what, we can go to East Global's website. Yeah. And if you want to start talking yes. All right, so we have about three minutes and I'll quickly go through what people have built in East Global Paris in the past and what we're looking to build with you all for this hackathon. So, in East Global Paris, we've seen a lot of exciting projects utilizing both our proof service and a relation service, which is our universal profile like SDK.
00:57:06.602 - 00:57:46.140, Speaker G: So what two projects have built, one's called Graph ID, another one is called Data for Builders. Essentially they read into Nextid's Relation service and are able to help builders build up their very credible user profiles. That has their GitHub lens profile forecaster on top of other credential or a newsfeed. So it really serves as the identity underlying like a layer for people to get onboarded and start creating their profiles that are suitable for web3 use cases. And for proof service. We have actually one project called Builder Garden. They are a crowdsourcing project.
00:57:46.140 - 00:58:42.142, Speaker G: Wow, I'm so big on the screen. Builder Garden. So they're a crowdsourcing platform allowing people to fundraise, to attend expensive crypto events and hackathons around the world and to verify that you are a real hacker and you have these identities you can see here, they integrated with the proof service, with our Proof service. So users, after they onboard and create an ID, they will send a message on Twitter verifying who they are on Twitter. And thank you so much David, for rescuing me with this tech glitch. Yes, and for Data for builders, you can see the workflow here. So after users, usually you can create a connect to wallet flow and then read into Nextid's Relation service that will be able to pull through with one Identifier, multiple profiles, and then you can build more like recommendation feed, et cetera on top of it.
00:58:42.142 - 01:00:18.310, Speaker G: And now, so this time, this time for New York, we're continuing the bounty around building cool applications and use cases around our universal profile SDK and a relation service. So if you want to build applications that allows for multi cross platform search and recommendations or developing the next generation analytics, user analytics, that helps projects identify where their potential users are most active. Are they twitter Djens? Are they like opinion leaders on a forecaster or lens? You can use our universal profiles to build that. And a new one that we're really excited about is a specific identity solution for so this is the visualization of how our identity graph would look like. And if you want to go back to the new bounty, a lot of us through the booth have already asked us about account abstraction and how they can integrate some of our identity graph or did into that design. So we do identify a particular use case around onchain gaming, but not limited to onchain gaming and the potential developments you can do or to work with like account of abstraction and did through that lens. So the different challenges that we see in onchain gaming today, there's a lot of latency and also disconnection between different parts of the games in autonomous world.
01:00:18.310 - 01:00:48.174, Speaker G: So how to have a more unified, seamless onboarding system for the gamers and allow their reputations and credibility to be carried across different parts of the autonomous world. That is a big challenge. And it's our first time testing out this bounty. So definitely welcome a lot of the feedback. And see, besides gaming, what are some of the other use cases you may be interested in building out this infrastructure? Yeah, so that will be it. We are right on time. And if you have any questions, we're happy to address it offline here.
01:00:48.174 - 01:00:58.660, Speaker G: And also we will be at the booth the whole day, scan into our QR code there we'll have cool swags. And also our dev will be on our office hours for the entirety of today and tomorrow. Thank you so much.
01:02:07.250 - 01:03:23.000, Speaker B: Sam Ram. Sam, hello.
01:03:24.090 - 01:03:27.160, Speaker E: How are how's everybody doing today? Are we off to a good start?
01:03:27.610 - 01:03:28.166, Speaker B: Perfect.
01:03:28.268 - 01:03:28.566, Speaker F: All right.
01:03:28.588 - 01:03:28.726, Speaker B: So.
01:03:28.748 - 01:04:01.458, Speaker E: Hey, I'm Carl Fluke. I am a solutions architect and starting to do devrel for Coinbase, specifically focusing on our new L2 op stack Base. So today we're going to just run through a super quick all about that base, kind of some of the tools and partner ecosystem we've built up. And then what bounty overview are we doing and what do we recommend that people build during this hackathon? So just curious for a show of hands, like, how many people participated in On Chain Summer and did something with Base so far? Did anybody good amount. Awesome.
01:04:01.624 - 01:04:02.098, Speaker B: Cool.
01:04:02.184 - 01:04:07.522, Speaker E: Has anybody actually deployed something on Base yet? Just one. Okay.
01:04:07.576 - 01:04:07.906, Speaker B: All right.
01:04:07.928 - 01:04:10.370, Speaker E: Well, we're going to change that this week or weekend.
01:04:10.870 - 01:04:11.282, Speaker B: Okay.
01:04:11.336 - 01:04:46.862, Speaker E: So a lot of people have heard Coinbase kind of the internal joke for the actual Base team is we're kind of like the biggest off chain L2. We have 120,000,000,000 some assets. All of them are off chain. And we slowly want to start pushing all of that consumer and institutional assets to be on chain so that we can actually use them in DeFi and start to go even further into crypto. So our big motto for Base for probably the next year or two is on chain is the next online. So I don't want to overkill this, but before the Internet, we had Blockbuster Video. I'd actually go to the store.
01:04:46.862 - 01:05:12.194, Speaker E: I'd get my Xbox or GameCube? Game. And that was old school. And now that's gone physical is slowly moved to digital. Now we have the Internet. It's super fast. We have things like Netflix, but kind of the very much so that these web Two companies now control your content. You have the ability to read and write, but at the end of the day, that ownership is with Google, it's with AWS.
01:05:12.194 - 01:05:40.080, Speaker E: They have the ability to turn it off. And so now here we are. Blockchain technologies are actually you have digital ownership. And we can start to recreate all these web two tools to actually be permissionless. A big part of that is that I think crypto focused on infrastructure for the past couple of years. And now we have a whole bunch of kind of building blocks we can use. And a big part of that is now we need more developers to understand them and use them to build actual consumer products.
01:05:40.080 - 01:06:11.846, Speaker E: So our kind of thesis is we've been slowly growing on chain users. With more users means that there's more developers that can build tools for them. There's more actual users that you can use to grow your protocol. So some example use cases. Here we have Farcaster for social media local to New York. There's Blackbird, which is starting to do some restaurant loyalty programs. So you can imagine that's a combination of Tokens and NFTs and then good partner parallel.
01:06:11.846 - 01:06:44.726, Speaker E: They have a trading card game that I like a lot, but starting to do some of that GameFi on chain. So as we have developers, they start to expand these use cases that we can provide. And then ultimately that means that transactions will continue to grow on chain. Here, the blue line is Ethereum. It's been more or less at capacity since 2020. And so now these L2 roll ups are starting to come out and take over that actual transaction volume. But unfortunately, there's only 10 million people on chain so far, and we have 8 billion in the world.
01:06:44.726 - 01:07:13.386, Speaker E: So we got a long way to go. And our thesis is that we can slowly start to expand that pie. So kind of just super quick history. Coinbase Central Exchange started with Bitcoin, started to a ton more assets. Our first kind of like on chain activity was USDC partnership with Circle. Now that USDC is on multiple blockchains, moving into DeFi. Like Coinbase, wallet was our first true crypto product, non custodial wallet.
01:07:13.386 - 01:07:50.490, Speaker E: It enabled us to actually go into the DFI ecosystem and then that's kind of continued. And so now we have our L2 base. And so here we say we're like maybe 10% on chain, maybe it's closer to five. But over the next five years, how do we switch that to be 100% on chain? Okay, so a lot of people have already used base, so I'll kind of quickly go over this. We chose the Op stack mostly because it's MIT licensed. Coinbase is the second core contributor to the optimism collective and like the Op stack, so all of our contributions are open source. We actually directly are part of that code base.
01:07:50.490 - 01:08:23.960, Speaker E: So as more Op stacks come in, we're in partnership with them. The main thing that we're focused on is I'm super looking forward to 4844 hopefully coming out later this year. That would get us super close to transaction. It's probably eight to, but we think that there's a lot of unlocks that happen once we actually get to a $0.01 transaction. We kind of have a company goal if we want to be able to do transactions in 1 second under one cent. And that's kind of like the two year journey that Coinbase wants to move is being able to give users that.
01:08:23.960 - 01:09:01.600, Speaker E: So, as I said, Base is the second core contributor to the Op stack. MIT licensed 15% of all revenues from the sequencer fees we actually give directly back to the Op collective and that helps fund their public goods funding. So we're super happy to be part of that and help expand the open source and slowly keep helping optimism move to be decentralized. Okay, so as a bunch of you guys are already well aware of Base. We had our on chain summer. It's been open for seven weeks now, eight weeks. So excited to get more people building on it.
01:09:01.600 - 01:09:24.502, Speaker E: There's actually a ton of DApps out there today. We did a pretty good job on getting the ecosystem on board. Definitely a long way to go to get more tools. If we're missing anything in our ecosystem, please let us know. We're always looking to expand partnerships. So, yeah, so far today, we've actually already bridged 145,000 ETH. It's pretty gone pretty well.
01:09:24.502 - 01:10:10.354, Speaker E: And then our transaction volume has surpassed Ethereum pretty consistently for a month or so. We're also the fastest L two to actually get 100,000 users. So that's kind of the main thing that Base can bring is we have around 100 million, a little over 100 million KYC users on the exchange. And how do we slowly push them to actually being on chain? We have a ton of users that bought Bitcoin, they bought ETH. They kind of get it, but they haven't done on chain stuff. So how do we make good user experiences for them to move into this new world? So high level? The main thing that we wanted to build Base for was we wanted to have a tool out there that we could start to move a lot of our products on chain. We started as a very centralized company and so slow and steady.
01:10:10.354 - 01:10:43.874, Speaker E: We will start to rebuild some of our internal products to be just completely on chain by default. So there's lots of examples here and it goes across both actually our consumer facing products and our institutional. So you got the full list here. Gives you kind of like a good spread of where we're heading. So I want to go over just some of the tools available to you. If you're a developer, a lot of these will be familiar, but we also have some net new ones that are kind of specific to the Op super chain. So I think Etherscan is probably going to be the best well known here.
01:10:43.874 - 01:11:09.146, Speaker E: We have our own version, it's called Base Scan. With that. Just for pure redundancy. We have a second version for Block Scout. It's very familiar. But then these other three you may not be as aware of route scan or super scan is actually a Op superchain Explorer. So it'll actually show like base optimism, mainnet Zora network, public goods network, all side by side.
01:11:09.146 - 01:11:36.274, Speaker E: So being able to do a better job of putting L two blocks side by side in the Op super chain. And then Dex Guru and Tenderly both have a little bit different focus kind of based on use case node providers. We have a ton, everybody needs an RPC endpoint. So a lot of these you are probably familiar with. I do think Alchemy recently launched. So they are on here now. So easy for this.
01:11:36.274 - 01:12:09.950, Speaker E: If anybody has any questions about node providers or if we're missing one that you like, come talk to us. Oracles. So I think Chainlink and Pyth probably have the most feeds that's just if you need off chain data and use it into your product, they have a ton of feeds available. Redstone is fairly new. They're starting to spin up more feeds. And then Supra launched their Verifiable random function. So if you need random numbers that's available on base now data indexers, I know that a couple of these are here.
01:12:09.950 - 01:12:43.990, Speaker E: These are the big three. If you need to do graph API of on chain data or have it indexed in a custom way, it's available to you. Cross chain messaging. So AxLR with squid, router layer zero with stargate, and then wormhole. So if you want to do Bridging in between other L two S or do cross chain messaging. We are focusing on kind of like base is a bridge, not an island. So we do want to work with all the L two S and make it so that they're interoperable for Dows, for actual just bridging of assets for doing DFI.
01:12:43.990 - 01:13:19.060, Speaker E: So very much so we are in it for the ecosystem and for furthering Ethereum. And some of these tools help further that mission. Okay, so most of you guys are devs here. Tool chains, very basic, ripped a truffle. If anybody saw the Tweet yesterday or the day before, they did say they're going to close down in 90 days. But if you're familiar with EVM, very basic build, deploy, test and then clients, same work with Ethers, work with Web Three, one newer kind of client to the game. Has anybody used VM yet?
01:13:19.670 - 01:13:20.354, Speaker B: A little bit.
01:13:20.392 - 01:13:43.770, Speaker E: All right, so that's a newer client. It's just much more type friendly. I've been growing as a fan of it. Okay, so for support for this hackathon, we do have our own Base Discord. We kind of break it down into infra developer, smart contract, front end. So if you want support, it will be there. We also will be on the ETH Global discord.
01:13:43.770 - 01:14:16.854, Speaker E: Okay, so for our actual Bounties here, so build the consumer product. So kind of coinbase is like a short motto, is the most trusted, the most secure, easiest to use. So that's kind of how Coinbase has grown to where it is, is focusing on those three tenants. And in line with that, build a consumer product truly is make it easy to use. So we want to see very creative consumer products. So we're not trying to go after just another financial use case. We want to see something that's like, a consumer could use.
01:14:16.854 - 01:14:53.454, Speaker E: They could understand it. It's not confusing. So we gave just a few examples here. Use account abstraction, make subscriptions easier, do something with ticketing, show kind of some benefits of what being on chain means and how that's more visible and helpful. Second, big bounty is just do a creative NFT project. So we wanted to be vague on this on purpose just so that you can be creative and fit kind of with what you want to build. So examples here are, like, we had the on chain summer.
01:14:53.454 - 01:15:50.020, Speaker E: We had a ton of users go through and mint different NFT collections. Like, what could you find out from that activity? Another account abstraction kind of idea. But how could you combine paymasters with NFT activity to actually choose, do I pay for gas for somebody or not? And some novel ways of doing that onboarding. Six, five, one wallets. So if anybody has a good use case for actually using the NFT wallet for a loyalty program, I don't want to be very prescriptive with use case, but just creative use of it. And then lastly, how do you combine NFTs with Attestations? So Ethereum Attestation service went live on base two weeks ago, and it's just a way to be able to attest on a custom schema that somebody did something or has something. Okay, so before I do Q-A-I just want to show one fun project that I've been a fan of.
01:15:50.020 - 01:16:20.202, Speaker E: So this is called base paint. And so this was just a project that every day people agree on a theme. People can come in and do one pixel. So did anybody take place in the reddit our place? A few people. So it's kind of like a different idea of that, is that every day you have pixel artists. They can do many pixels based on a time frame. After 24 hours, it gets snapshotted and people can mint those NFTs.
01:16:20.202 - 01:16:45.874, Speaker E: So yesterday, apparently the theme was lens. So here's a Lens Garden custom art piece. You can mint it. They're not very expensive. And then after that 24 hours, the open edition ends. And my favorite part is that the amount of ETH that was collected. So in this example, Lens Garden yesterday has had 1400 ish mints so far, that was 3.4
01:16:45.874 - 01:17:02.266, Speaker E: ETH. And what they do is actually take that ETH income that they had and they redistribute it to the pixel artist. So 645 artists got some amount of that 3.4 ETH. So just a very creative, consumer friendly way of, hey, let's get people to collectively make an art piece.
01:17:02.368 - 01:17:02.678, Speaker B: Let's.
01:17:02.694 - 01:17:11.900, Speaker E: Mint it and let's redistribute those funds back to the artists with that. Does anybody have any questions? Yeah.
01:17:12.430 - 01:17:16.398, Speaker D: Regard to what sort of documentation can.
01:17:16.404 - 01:17:18.254, Speaker F: You provide in regards to stuff like.
01:17:18.292 - 01:17:21.630, Speaker D: React, Native or API?
01:17:25.170 - 01:17:54.858, Speaker E: Yeah, so Base is our main website and under here, Docs, it kind of has like the high levels of what all of our actual ecosystem partners have. But if you're kind of new to Solidity or smart contracts, basecamp is a pretty well formulated walkthrough of all these kind of like what are ERC 20 tokens? What is a lot of the basics of these? And we do have like NFT badges once you get through certain sections. So this is always my starting point.
01:17:54.944 - 01:18:00.800, Speaker D: Okay. Is there any sort of SDKs for Base?
01:18:03.810 - 01:18:26.310, Speaker E: Yeah. So the question was, are there any other SDKs for Base? So essentially the Op stack is EVM equivalent. So almost anything that works on just L one ethereum, you should be able to use directly in place. With the Base, you would just switch out your RPC endpoints to point to the correct chain ID and the correct RPC node.
01:18:26.810 - 01:18:28.360, Speaker D: Sounds good. Thank you.
01:18:30.330 - 01:18:39.430, Speaker F: For that. I'm not sure if you have recommend that you go directly to the core.
01:18:43.630 - 01:18:59.360, Speaker E: Yeah, so the question was, where can you guys seek out help in the ETH Global discord? We should have a partner coinbase channel and so we have a few people remotely that will be monitoring that and then we're more than happy to jump on Google Meet or Discord video.
01:19:01.410 - 01:19:07.020, Speaker B: Cool. Yeah.
01:19:08.190 - 01:19:11.820, Speaker E: Then I think we got two minutes ahead of schedule. Thank you all.
01:19:14.310 - 01:21:48.090, Speaker B: Sang it's. It's Sam.
01:21:49.270 - 01:22:44.638, Speaker F: Hey, everybody. All right, so I am John with Uma, and I'm here to talk about one of our newer products that we came out with this year called OSNAP, which you can use to actually decentralize your Dao and then also talk about how you can modify it for some really cool hackathon projects that use natural language rules. So, a problem that a lot of DAOs have is that they're voting on snapshot and then they have a multi SIG that actually executes the transactions on chain. So you have this point of weird centralization where you had a whole bunch of people come together to vote, but then what actually happens is controlled by just a handful of people that have these admin permissions and a lot of DAOs realize that's a big problem. So OSNAP's been really popular, especially with DeFi protocols. And I'll go through some examples and explain how it works. So, first off, Uma is an optimistic oracle.
01:22:44.638 - 01:23:30.924, Speaker F: And the way that basically works is you can bring any kind of data on chain. You're saying this statement is true. And also here is a bond. Take my money if the statement is wrong and there's a challenge window where anybody can show up and they have that financial incentive to dispute you if you are wrong. So there are people that are watching these proposals 24/7 looking for disputable proposals. There's also a lot of very bot driven flows for some of the products that are built on top of Uma, and it makes it super flexible because you could have things that are human reviewable, you could have things that are bot reviewable, and you can build all kinds of products with it. So what it can actually do a lot of people think about Oracles as being this price feed style thing where you have a network of nodes that have to reach consensus on some data before pushing it on chain.
01:23:30.924 - 01:24:06.076, Speaker F: But what it really is, is like a truth machine. You're trying to record some truths about the world onto blockchains. And the optimistic Oracle mechanism makes it really flexible to record basically any kind of truth as long as it's publicly verifiable. We kind of like walk through that. One thing I didn't mention is it adds some recourse to contracts. A lot of the issues that come up with Oracles are if the data is wrong, that a bunch of nodes came to consensus on some data that is wrong in some way, that could cause a lot of damage to a protocol. With an optimistic Oracle, you don't have that kind of issue.
01:24:06.076 - 01:24:56.140, Speaker F: Like if you are dealing with price data, for instance, it might be that a market's being manipulated and if that goes on chain, you can actually dispute that and say like, hey, this bot, it read the price data from the data source, but this is a manipulated market, it's not the true price. And that makes it really interesting for those types of use cases. So what goes into it? You have some kind of contract, some protocol that's requesting data. They've preset a bunch of parameters like here's what the minimum bond is going to be, here's what the challenge window is going to be, maybe here's a reward for posting the data. You have some kind of process for resolving the disputes. So disputes are really rare because of the bonding mechanism, but if it does come up, it goes to a vote of all the Uma token holders. And it's kind of a shelling point game where you commit a secret vote on chain of what you think the truth is.
01:24:56.140 - 01:25:38.590, Speaker F: You can't see what other people are voting, so you can't just copy answers. The most likely shelling point is going to be the truth, and you get rewarded only if you're actually going with that majority. And you need to have some kind of methodology of saying what the truth is, like what is this question? And it needs to be really explicit because otherwise people aren't going to even come up and make a proposal. They're not going to risk a bond on like a wishy washy ambiguous question because they might lose it. And you need to have some economic guarantees that bound the cost of manipulating the system how much would it cost you to try to mount an attack on this Oracle system? And there's a lot of different ways to do that. I won't go into a ton of detail on that in this talk. So I want to get into OSNAP, but come by the Uma booth this weekend if you're curious about that.
01:25:38.590 - 01:26:03.136, Speaker F: So it can work for all kinds of questions. Polymarket uses US, so you can do natural language prediction market stuff. You can do insurance protocols, you can do on chain derivatives. You can do different fundraising mechanisms. You can verify a whole bundle of cross chain data, which is what across does. Across is our sister protocol that's built on top of Uma. That's done about $2 billion of Bridging volume between different roll up chains.
01:26:03.136 - 01:26:34.332, Speaker F: And it uses Uma to verify that all the relayers are getting refunded correctly on those chains. Yeah, kind of going through that. All these things are like, live in production, pretty easy to spin up. We have tutorials for all of these, so if you're interested in any of these topics, you can do it. But we'll focus on optimistic governance, how OSNAP works, and how it could be modified for cool hackathon projects too. So this is that flow I was talking about. Like, you talk on the forums and everybody's involved there, and it's free to do.
01:26:34.332 - 01:27:08.516, Speaker F: You have a snapshot vote that's also free, so everybody that has a token or has some voting permissions can participate. But then there's just a jump off point where, okay, the Dow is actually run by this multisig, and it's just like three of five people decide what actually happens. So that's a huge, huge problem. I mean, it removes that decentralization. And we've seen a lot of adoption from DeFi protocols because they're the most concerned about that centralization risk. There's, like, a lot of negatives associated with that. So with OSNAP, you can still vote on Snapshot, so you don't have to pay for gas on chain.
01:27:08.516 - 01:27:37.010, Speaker F: You don't have to do these delegated voting schemes. You can vote gas free transactions that are approved, they're validated by the Oracle, and then they're automatically executed. Anyone can dispute the transaction. And it's usually like a long challenge window. It's like a one to three day challenge window in this case, because DAOs aren't in that much of a hurry. Depending on your Oracle integration, you might want to have just a couple of hours if you need something done fast, like Polymarket, it's a two hour challenge window. With OSNAP, it's one to three days.
01:27:37.010 - 01:28:04.730, Speaker F: And then the truth is economically incentivized, and you can set it up in under a minute, actually. So if you have this pattern where you have a safe multi SIG on chain and you have a snapshot space I did a speed run. You can actually do it in under a minute of adding OSNAP because it's this really lightweight module you attach to a safe and then a plugin that you add to your snapshot space. And that's it. That's the entire thing. And now your dow is like decentralized. The multisig does not have to get involved in actually executing things.
01:28:04.730 - 01:28:31.344, Speaker F: So we're getting a lot of adoption. I had to add a bunch of logos to this one today. So we've got cowswap connects premium l two dow across shapeshift, Barnbridge lossless plus dow. And you can kind of see that theme that I was talking about. With DFI protocols, there's a ton of regulatory and legal scrutiny. Like, people do not want to be multi SIG signers on a DFI protocol. So it's securing, I think I said over 100 million.
01:28:31.344 - 01:28:50.324, Speaker F: It's close to 100 million. I was exaggerating on that slide a little bit, but it's growing really rapidly and we think it's found a really good fit. And this is just kind of the flow. You deploy. The module just a really small contract. It's like 100 lines, just a lot of comments. Mainly you attach it to your safe, you're setting the parameters.
01:28:50.324 - 01:29:29.796, Speaker F: We've got some defaults. The defaults are just like a two WETH bond that you have to post as a proposal bond. But we'll get into how that's kind of automated and some services we run around that you create a snapshot proposal like normal, but you can attach transactions to it. So when you have our OSNAP plugin there, you can actually define specifically what transactions you're approving. You're not counting on the multisig signers to read what you voted through and then figure out what the transactions are and execute them. You see what they are and you build them. And then if it passes, either the transactions are going to be proposed on chain and after a day or two or three, they'll be executed or they'll be proposed and there's a dispute because maybe it didn't pass on.
01:29:29.796 - 01:30:15.524, Speaker F: Snapshot and it's actually somebody trying to do something they're not allowed to do, in which case it gets disputed and it's basically thrown away. You don't have to rely on the, uma, token holders here exactly, because uma, token holders cannot execute transactions against your dao. Any disputed proposal is tossed. And it's using tools that are really familiar. Just using a Gnosis safe, a cool little logo for the zodiac framework for adding stuff to a Gnosisafe. There's all kinds of other cool zodiac things that you should check out for the hackathon, snapshot and uma, and this is kind of like the know, it's pretty straightforward. If you go to slash OSNAP, it'll have links to more docs for this.
01:30:15.524 - 01:30:45.804, Speaker F: So I won't walk through all these steps, links to the videos showing how to set this up. But one thing I would add is once you deploy, if you're doing custom rules and I'll get into that, just modify the rules that are in your contract. So instead of the rules saying like, here are the rules around snapshot, you could say, here are the rules for how I want this safe to behave. Maybe I'm putting my personal funds into this safe. I want an automated investing strategy or I want some safeguards. Like I got a board ape in there. I would never transfer it.
01:30:45.804 - 01:31:15.764, Speaker F: If it's being transferred, it's being stolen. So like block that transaction. You can add any custom natural language written rules that you want for your hackathon projects and definitely contact us if you're doing a deployment for an actual dow that you're involved into or something else. Kind of just showing what it looks like. Circling the OSNAP module in Zodiac. This is in the safe interface. You add the Zodiac app to your safe and then click the button for the OSNAP module.
01:31:15.764 - 01:31:45.264, Speaker F: It'll deploy with the defaults and you're pretty much ready to go there. Yeah, here are like some defaults. You enter your Snapshot space URL, this rules parameter, like this natural language written thing, that's what's going to be enforceable with the Oracle. And it will just plug in the values that you put in there. And there's a bunch of boilerplate too. Like what if your Snapshot admin went rogue and they set like a quorum of one and a voting period of 1 minute and they passed it. It's not going to be valid because it's not meeting the minimum voting period in quorum that you set here.
01:31:45.264 - 01:32:19.208, Speaker F: Like the Oracle will check that. It'll get disputed if Snapshot itself became evil and they're like censoring your votes. And this is a notorious thing that Snapshot is now doing that also can't just transfer tokens from your dow or something. All those extra rules are there for that. And this is actually automated now. So we have, like, a V two. It is basically a bot that Risk Labs runs because we know that it's a hassle to post a Two West Bond to make a proposal and like a hassle to go back and execute it after the proposal challenge window is over.
01:32:19.208 - 01:32:42.608, Speaker F: So we just have a bot that we run that does this on your behalf. It watches your snapshot space. We know all of the OSNAP deployments that are out there, so we can monitor them and we'll make the proposal. And after a couple of days we'll execute the proposal for you too. And we actually cover the gas. Like unless your Dao is doing a ton of contract deployments or something and it's starting to get expensive, we're happy to cover the gas for whatever token transfers. We just want to make this as easy as possible to use.
01:32:42.608 - 01:32:56.730, Speaker F: And the bot doesn't have any special permissions. Like if the bot is offline, you can click the buttons yourself in the Snapshot interface to do it. And anybody can dispute it too. If the bot got something wrong, go in and dispute it and take Risk Labs money. Enjoy.
01:32:58.940 - 01:32:59.208, Speaker B: Yeah.
01:32:59.214 - 01:33:19.180, Speaker F: And these are like extras. It's all audited. You can set it up on a ton of different chains. It's really beginner friendly. You don't need to write any code for it. You don't have to go to the command line for any of this. If you're just setting up a dow as just a person who's interested in DAOs, you can deploy your snapshot space and your safe and your OSNAP module and everything else and understand how the module works without writing any code.
01:33:19.180 - 01:33:57.896, Speaker F: You can deploy a token too. I mean, you can do the whole OpenZeppelin Governor module and deploy a token, do the whole end to end process without ever writing any code, which is kind of cool. And we got some new stuff coming out soon too. We're going to have a native safe app just for OSNAP and a snapshot plugin that is going to improve the transaction builder and make the whole experience nicer. And then this is kind of more of the hackathon thing. So you can think of OSNAP as a specific product, a specific use case for this optimistic Governor contract. What makes it OSNAP are the wraparound things like the Snapshot integration and this set of rules specific to snapshot.
01:33:57.896 - 01:34:40.792, Speaker F: But you could write all kinds of rules that do all kinds of things. Instead of writing a smart contract where it's enforcing encode all of the things that this safe or this contract can do. You can write something that just is human, readable and makes sense and say this is the way this safe behaves here's, the incentives around it, something simple like if you said I want to sell ETH. If it goes above $2,000 and stays there for at least an hour, and if you go and sell this ETH for me, you can take $2 worth of ETH out of my safe, write that out literally just how I said it. That seems reasonable enough. That's interpretable by the Oracle attach that as your new set of rules for your OSNAP module. You've now created a different product.
01:34:40.792 - 01:35:23.124, Speaker F: It's like not a snapshot thing anymore. You've created this product around automated ETH investing. You could add any kind of set of rules you want and that's kind of where the creativity comes in because again, you did this 1 minute kind of deploy thing. You've got the safe, you just got to figure out what the rules are. And why would this be a product people would actually want to use? I think that that makes it really cool and open ended and it's nice for like a weekend hackathon because it's quick to deploy and if you come up with the idea and you can write down the idea clearly you kind of have half of the product already. You save yourself writing a lot of code like the sentences are being enforced rather than coming up with code that does everything. And you can maybe focus on the front end stuff and other aspects of it.
01:35:23.124 - 01:35:54.684, Speaker F: So it's really our most advanced form of generalized contracting. You can write these contractual agreements in human readable language, and you can enforce them on chain with the Oracle, checking that everything is being done correctly. So you can get maximum flexibility with minimal trust. And here's like a link DM me on Twitter or come by the booth. We'll be there pretty much all weekend. And there's a lot of other stuff too. I mean, we've got prediction market tutorials, insurance tutorials, just like general data assertions.
01:35:54.684 - 01:36:19.720, Speaker F: You can build derivatives with us. You can do a lot of cool stuff with across our cross chain bridge. So it's not just about OSNAP. It's just like a newer thing that we're very excited about and think raises a lot of possibilities for new products you can build at the hackathon. But that is all for me. Are there any questions on it? I don't know how we are on time. I feel like I was blasting through that.
01:36:19.720 - 01:36:45.084, Speaker F: Oh, no, we've got like only five minutes. Okay. Yes. As I understand, it's like an on chain validation layer for Snapshot governance. As I understand snapshot. Yeah. So basically the way the optimistic Oracle works is anybody can make any kind of assertion on chain.
01:36:45.084 - 01:37:20.412, Speaker F: So in this case, the bot is basically watching Snapshot. It sees what transactions were approved on Snapshot, and the specific assertion is this bundle of transactions was approved by this Snapshot vote according to these rules for this OSNAP space. And then after the challenge window of a couple of days, you can execute those transactions. And like, what's happening technically in the contract, obviously you're not storing all that transaction data. That's really expensive. You emit it as events so everybody can see it, and so you can populate front ends and disputer network. People can watch it and other bots can pick it up.
01:37:20.412 - 01:38:03.956, Speaker F: But you store a hash of the transactions and you make sure that that hash matches the actual transactions. When you come back in to execute, does the bot put any data on chain? Let's say I put a boat and I write something obnoxious in there. Can I get that data on chain with your dash? Well, I guess so. I mean, if you had a transaction that is writing the data somewhere else. So what the bot is going to do is it's going to execute your bundle of transactions. So if your bundle of transactions includes writing something obnoxious to some contract somewhere, then you could do that. It's not going to automatically pull anything from your written Snapshot proposal.
01:38:03.956 - 01:38:23.650, Speaker F: It only cares about the transactions, and then it'll also emit in the events link to IPFS or like the IPFS CID for the specific Snapshot proposal. So you know which one you're talking about, and you can go and check that it passed and all the transactions line up correctly. No problem.
01:38:27.530 - 01:38:28.310, Speaker B: Yep.
01:38:36.280 - 01:38:38.020, Speaker I: If you wanted to use variance.
01:38:40.450 - 01:39:15.950, Speaker F: I think so. I mean, it's it's just like basically a string. So anything that you can put in, like a string in solidity, you can put in there, but it just needs to be interpretable to whoever is going to be evaluating it. So whatever your rules are, you have to be able to publicly verify whatever the outcome is, and it has to be deterministic, and you have to be able to look at it historically, too, where you were like, this thing happened. If there's a dispute, the voters might have to look like a day in the past. Like, was it true at the second that this person made the proposal? But those are the main considerations.
01:39:18.930 - 01:39:19.246, Speaker B: And.
01:39:19.268 - 01:39:25.550, Speaker F: The question was whether you could have certain characters, like special characters in your rules.
01:39:27.410 - 01:39:28.160, Speaker I: Yeah.
01:39:32.210 - 01:40:13.994, Speaker F: It does remind me of account abstraction. It's the same issue there where the bot can get trained, they can make a proposal so that it reverts. If the bot even does any on chain validation once it tries to perform in one chain. Who can run those bots and how difficult is that? What kind of validation they have to do? Anybody can run the bots, and you also don't have to use a bot for it either. Like, if nobody's running bots watching a snapshot space, there's like, buttons that will pop up in the snapshot space when it's time to propose and execute. I think that the bot logic does check for reverts so that it's not going to waste a bunch of gas, but it's fully permissionless. So anyone can run a bot.
01:40:13.994 - 01:40:44.922, Speaker F: There's docs up to do it. It's open source code, and anybody can also dispute anything too, so the bots have no special permissions associated with them. Not really. Our incentive at Uma is we want people to use OSNAP, so we just made it easier. Like before the bots, it was just buttons and snapshot, which is still pretty easy, but just fully automating. It seems nice, and we're happy to pay basic gas fees for dows aren't doing a ton of stuff. You're moving some tokens from time to time.
01:40:44.922 - 01:40:46.570, Speaker F: It's not wildly expensive.
01:40:51.670 - 01:40:52.370, Speaker B: Cool.
01:40:52.520 - 01:40:54.500, Speaker F: I think that's it for me. Thanks, everybody.
01:41:08.190 - 01:43:03.478, Speaker B: Ram it's SA. Cool. Hey, guys. I am Greg with ENS, and today we're going to be talking about all things ENS. So before I get started, raise your hand if you have an ENS name. Okay? Awesome. Avanch.
01:43:03.478 - 01:43:30.310, Speaker B: That's good. Sweet. So I'm going to be going through a few things. First of all, what is ENS? Why it's important? Some of you guys sounds like will know this stuff already. Then we'll get into more technical details, some of which you might know, some might not. How do people use it today? Our Bounties and all of that stuff. So first of all, what is ENS? ENS is a decentralized permissionless naming protocol that lives on ethereum and is built to scale to the entire Internet.
01:43:30.310 - 01:44:16.286, Speaker B: DNS solved the problem of IP addresses to human readable domain names and we all use it. Today, ENS solves a similar problem, but was even worse for crypto because Ethereum addresses are impossible to remember. And so ENS abstracts those IP addresses away and makes it into human readable names. Cool. And the idea is, anywhere you read or write an address today, you should be able to use an ENS name instead. So you'll see over here I have Luke ETH sending something to Gregscroll ETH, and then I have Gregscroll ETH sending something to a long random address, which has to get truncated because nobody's going to remember it. And if you ask me, the name to name is just a more enjoyable experience for everybody on chain.
01:44:16.286 - 01:44:50.286, Speaker B: And here's another example of using Yanessa out in the wild. If I'm sending Ether to somebody in a MetaMask or any asset in basically any wallet, I'd rather send something to a name that I know rather than a long hex address that I'm not going to remember. And so this really shows that ENS started as a Web Three username, right? Instead of an address, use a username. But over time it's becoming more of a Web Three profile. And in order to do that, we have two different types of resolution. So forward resolution is what you just saw in the MetaMask example. I go in, I type a name, and that resolves to an address.
01:44:50.286 - 01:45:48.322, Speaker B: But the thing here is I can have multiple names that resolve to the same address, and so I can register a ETH name today that resolves to some of your addresses out in the audience. But really what makes it a portable profile is the opposite reverse resolution or having a primary name. And what that means is the controller of the address basically sets a name that they want to be their global Web Three profile. And so in this case, my address ox one seven nine, will reverse resolve to Gregscroll ETH because Gregscroll E is my primary name. So what this means is when I log into different applications across Web Three, I'm kind of greeted with this universal Web Three profile, right? I see Greg scroll, Gregscroll E, I see my avatar, and it just like follows me around. And this is another view of that profile. I have a name, I have an avatar like you saw before, and I also have all of these other text records, as we call it.
01:45:48.322 - 01:46:43.598, Speaker B: So text records allow you to store any arbitrary data on an ENS name. We'll get into exactly where that works later on, but it's just leaning into the idea that this is really a universal global Web Three profile. And all these websites on the bottom are just third party websites that people have created that kind of identify me as my ENS name. That is my, again, portable Web Three profile. Cool. So now we know what ENS is, but why is it important? So it's cool, it's fun, it's portable, extensible MultiChain public good, it's decentralized and most importantly, it improves the crypto user experience, right? And so if we look at Ethereum over here, the Ethereum logo ENS the entire ENS branding and logo is just a nice friendly wrapper on top of the Ethereum logo because it's a nice friendly wrapper around the user experience of web Three. So what are the different types of ENS names? And I think this is where we're going to get into some misconceptions.
01:46:43.598 - 01:47:27.518, Speaker B: So a lot of people assume that ETH is ENS's only type of name, but that's actually not true. And so you can use almost any DNS name as an ENS name as well. So this means XYZ, IO or anything else. And then the MetaMask example that I showed before would work with any DNS name. So for example, you can go to MetaMask and try and send something to Ensferry XYZ, which is a DNS name and it will resolve to an Ethereum address just like any on chain E name. So there are a few differences between these two things. First of all, ETH is really the only blockchain native TLD in the ENS ecosystem.
01:47:27.518 - 01:47:56.042, Speaker B: So it lives on mainnet Ethereum. It is fully decentralized. The only way something changes about ETH is through an ENS dao proposal and successful vote. So there's no single entity that can change any of the ENS. ETH core contracts. And ETH names have a small annual fee each year to prevent name squatting and basically promote a healthy ecosystem. So this means if names go unused, then eventually they will be recycled and somebody else can pick them up.
01:47:56.042 - 01:48:42.700, Speaker B: So this is ETH kind of the top dog in ENS in terms of decentralization. Next, we have DNS and ENS as a protocol respects existing internet infrastructure and it's like the realization that DNS works pretty well. All of us use it all across the web every day. And so we want to allow DNS name owners to use that in the ENS world as well. So using DNS names in ENS has no protocol fee, although in the past there has been a pretty substantial gas fee to use this. And the reason is because you're submitting a proof on chain saying that you actually own the DNS name, soon you'll be able to use DNS names in ENS completely for free, including gas. And this will be powered by something really cool, which I will show you in a second.
01:48:42.700 - 01:49:39.142, Speaker B: And it's powered by ENS names that are off main net, right? And so this is all powered by a cool standard called CCIP Read. And before I dive into that with these off chain names, there is no ENS protocol fee, there is no gas fee, there is ultimate flexibility because the developer can really do whatever they want and read from any data source. And like I said, Ccipread is a Ethereum standard, not just an ENS standard to securely retrieve off chain. Data from smart contracts and it gets verified on the front end level. And again we'll dive into exactly where that falls into the ENS kind of flow in a few minutes. And just to point out that these off chain names powered by CCIP Read are already used in production today by some pretty large teams like Coinbase, Lens, Eco and so on. And so here is a simple example of what that might look like in the wild.
01:49:39.142 - 01:50:18.230, Speaker B: And I'll go back to the QR code after if you guys want to try it out, but basically let me make this bigger. Cool. So this is what it could look like to register a free off chain ENS name. I'm just going to say testing like that. And so I'm going to have testing off chaindemo ETH and I'm going to set my description, which is basically an ENS text record. And so this would normally be on chain and cost gas to be hello, I'm going to press register here and just sign a message. So nothing on chain at all, I'm not paying anything whatsoever and boom, I just created ENS name.
01:50:18.230 - 01:51:06.360, Speaker B: And so if I press View in ENS Manager, you'll see that testing with a bunch of G's offchaindemo ETH just like works, right? And I can copy this name and go into MetaMask. And if I wanted to send Ether to this name, then it works right away. And that was free for me as a developer, free for the user and overall a great user experience. So let me go back, I'll point out here that the docs on how this works, which I'll mention in a minute, and the exact code is linked in the footer. And so I'll leave this up just for a second if that's interesting to anybody. And you might want to do something similar as part of your hackathon project this weekend. Cool.
01:51:06.360 - 01:51:59.046, Speaker B: So oops with all that, how does ENS work and where does the CCIP Read off chain stuff fall into the mix? So ENS at its core is just a registry on mainnet Ethereum and in that registry stores a name alongside a resolver. A resolver is also a smart contract which basically stores everything, all the data for a name. So these text records that I've been talking about, the address that it points to and so on, is all historically stored in a resolver. So you'll see that the same name can have multiple multiple the same resolver can be used for multiple names. So I'm Greg Shreddadith and we have recmoodith in the audience over here. We both use the same resolver, Ox 4976 and so on. But also you can have custom resolvers and anybody can develop their own custom resolver which has whatever custom logic they want.
01:51:59.046 - 01:52:46.898, Speaker B: And so you'll see, offchaindemo ETH has a different resolver than the others and that's what allows it to do cool things like have that off chain registration. So if we look at the default on chain resolver again, ox 4976 and so on. Basically, this stores all the data for a name in just internal storage. So if I wanted to set the Ethereum address of Greg's ETH, I have to make an on chain transaction to this contract saying update my ETH address from Ox one seven nine A to whatever else, and same with a text record and so on. It's important to note that address and text are basically like objects. So text records, for example, support any arbitrary key value pair. And address records can be set for multiple chains.
01:52:46.898 - 01:53:30.214, Speaker B: And so that's another misconception that ENS is only for mainnet Ethereum, it's really for any layer two or even other networks. So you'll see right here, Rickmoo ETH has set an ETH address and a Bitcoin address. And so if you were to go to a wallet that supports this standard and you type in Rickmoo ETH, then it would allow you to send Bitcoin to Rickmoo. And so that's pretty cool and something I think most people often miss. But now what is different about the off chain demo ETH resolver? And the answer is basically everything. So instead of looking at internal storage for addresses and text records and so on, it reverts with this off chain lookup. And this revert is exactly what CCIP Read is.
01:53:30.214 - 01:54:10.798, Speaker B: It's a standard that defines a custom error in solidity and it tells the client to do something different. So that something different is basically look off chain at a data source of your choosing. This can be a database like how Coinbase does in Coinbase wallet. If you're to sign up as a new user, you can claim a free CB ID subname and that uses exactly this. And you could also use it to look at a layer two and stuff like that, which I will get to in a second. CCIP Read works really well in conjunction with Ensip Ten. Ensip is just an ENS improvement proposal and ten is the number for wildcard resolution.
01:54:10.798 - 01:55:09.910, Speaker B: And so what that means is if a client attempts to resolve a name that does not exist on chain, then it will go up to the parent and basically ask that parent if it has a record for something below it. So the name that I created before testing with a bunch of G's does not exist on chain. And so the front end client would then go to Offchaindemo ETH, see the resolver of Offchaindemo ETH, and then make a request from there basically to get the data wherever else it might be stored. And so again, it is a matter of internal storage versus reverting off chain to get the data from somewhere else. And that is powered by Ccipread and ENS IP Ten. So if we just take a step further, how can ENS work with layer twos, which is a common question that we get, and really the answer is the same, right this is exactly the slide that I had before offchain demo ETH revert with off chain lookup for each type of text record that we have. And what I want to point out is that that off chain lookup again, can be anywhere off of mainnet, including a layer two.
01:55:09.910 - 01:56:06.214, Speaker B: So how do these different approaches kind of change the resolution process? The first one is what you might know as ENS today, meaning everything being on chain, a client will go to the ENS registry and find a resolver and that resolver will have internally stored the data for the name and just return it, right? Very simple but somewhat limiting because it's just a mainnet ethereum contract. The next would be using CCIP read. So a client like a front end goes to a resolver contract. That resolver contract says actually I don't have the data, but if you go to this gateway, it will tell you where else to get that data. And then that gateway pulls in the data from a centralized database. So again, this is what Coinbase Wallet does because they're not treating users as people who are obsessed with decentralization and need everything to be totally permissionless. We have options for that, but not everybody is of that mind.
01:56:06.214 - 01:56:48.086, Speaker B: And so it's okay to have a database for a good user experience. And then the database returns the data on chain and that resolves the name or returns whatever data you're requesting. The next approach would be basically just replacing the database with a layer two contract. So same process, front end goes to a resolver on mainnet that goes out to a gateway. The gateway then pulls the data from a layer two contract and returns the data so on. The problem here is that the gateway in both the second and third example are basically fully trusted. So if the gateway wanted to just not read from the layer two resolver, even though they said they would, they can do so.
01:56:48.086 - 01:57:34.846, Speaker B: And so again, that's okay for some use cases but not all. And so the kind of coolest approach to this and something that's being more actively explored recently, is adding a verification to that layer two state on main net. So again, the client would go to a layer one resolver. The layer one resolver would go to a gateway. A gateway would go to the layer two contract. And then once that data is returned to the client by the gateway, a contract on layer one verifies that that data is legit by checking basically the proof that the layer two deposits on layer one every x period of time depending on layer two. And so what this gets you is a trust minimized gateway that cannot return bad results because you have a contract on mainnet.
01:57:34.846 - 01:58:18.610, Speaker B: Verifying these results each time. So in the first case it is fully trustless but expensive. In the middle two use cases it is basically fully trusted but free. And then in the last use case it is both free or I guess you pay layer two gas, but it's cheap and trust minimized. So the worst that the gateway operator can do is just shut it down and stop operating. Which of course isn't ideal, but they can't fully attack you by changing any data. And yeah, so those are basically the different approaches and why you might want to do each one and why the last option is a cool one more recently.
01:58:18.610 - 01:59:24.290, Speaker B: So now we have a good understanding hopefully of what is ENS, how does it work, why you might care, and different kind of extensions to make it work beyond main net Ethereum. And so it's really just like how do people use these names? Like I said before, it's really a portable web Three identity. This is how I represent myself on chain and my usernames places my display name on Twitter is Gregschool ETH because this is really just what I lean into and everything that I store in this profile is kind of officially me on chain. Next would be communities. Communities have really taken a liking to ENS subdomains as a way to feel part of a community, right? So PCC ETH is a popular NFT project that only allows NFT owners to claim subdomains of PCC ETH. And so if you look on Twitter and you search PCC ETH, you'll see a bunch of users that rep this name as their display name on Twitter and they feel part of this community and it's proving that they own an es name and part of your identity. Next would be Immutable text records.
01:59:24.290 - 02:00:00.766, Speaker B: So like I mentioned before, ENS names can store any arbitrary Q value pair as a text record. And so uniswap. Somebody made a proposal to the Uniswap Dow to establish V three deployments. Uniswap ETH. And on this theme they set a number of text records for basically official deployments of their Uniswap contracts across different chains. And so any user of Uniswap, if even front ends get hacked or anything like that, the only way that this name can get changed is by a Dow proposal. So it's really like an immutable record, an official list of their deployments.
02:00:00.766 - 02:00:47.390, Speaker B: And so it's a very different use case for ENS, but something that certainly makes sense. It's just a generalized data store that can be used in any creative ways that you come up with. Next would be naming contracts. So a lot of this has been about identity and paying people personally or representing a single person on chain. But also we deserve to have good user experiences around contracts as well. And so you'll see here under ENS ETH we actually use this ourselves to name a bunch of the ENS protocol related smart contracts. So if you were to go to Etherscan and search Registry ENS ETH, it will bring you to the ENS Registry smart contract that I was talking about before, which is kind of like the home base for everything ENS and this would allow Wallets to basically display that.
02:00:47.390 - 02:01:43.010, Speaker B: Gregscrow ETH is interacting with registry ENS ETH that is so clear and it makes so much sense and you don't need arbitrary labels per block explorer and so on. Again, it's just a way to improve the user experience of Ethereum and Web Three overall by way of ENS. Next would be usernames. So ENS as a profile, ENS as a username really is just like the most obvious example I think. And Farcaster, a decentralized social protocol recently took this and kind of did exactly that. Instead of having their own centralized username space, they allow you to bring your own decentralized ENS name and use it as a username across the protocol. And so I can go to different Farcaster clients and I can see that a username is an ENS name across the board and it's a cool example of connecting protocols across Web Three for something that actually has tangible use and people have seemed to really enjoy this.
02:01:43.010 - 02:02:33.198, Speaker B: So usernames are definitely one of the more obvious and just like cool examples of ENS, I think. And then last but certainly not least, Web Three messaging. So our friends at Xmtp are also here this weekend and they utilize ENS for a number of things. This is what Xmtp looks like inside of Coinbase Wallet and you can see I am messaging other addresses like Slobo e a friend and you can imagine how if I was messaging Ox 1234 so on, it would just look ugly in S names. Make user experience better by having human readable names for all types of crypto addresses. So now we have a good understanding of hopefully many things ENS and let's give you some resources to move forward. So first we have a front end quick start guide.
02:02:33.198 - 02:03:15.950, Speaker B: This will allow you to very easily get started with an ENS app on the front end side in just a few minutes. It is a full doc running you through things. And also there's a GitHub repo that you could just clone as a template and get off to the races. I'll point out that there's a QR code on this slide and the next one if you want to scan that. But you'll see here that it's really just a few lines of code with any popular Web Three library and you are off to the races. Next is the thorin design system. So this is actually a little bit detached from ENS protocol but just a cool developer tool that we've been working on and it makes it easier to build cool looking ENS applications very quickly or just cool looking applications quickly.
02:03:15.950 - 02:03:53.222, Speaker B: It's a react component library that I've had a lot of fun using and I think you might too. So really quick, the last thing I want to do is highlight the prizes. We have a range of them, $2,500 to the best overall use of ENS, $2,000 to the best use of ENS subnames that could be on chain off chain layer two. Like I described, the option is up to you. $2,000 to the best implementation of ENS with account abstraction. So think combining certain ENS transactions to the initial contract deployment and $1,000 to the best use of Thorin and then $500 to five honorable mentions. So open to your creativity.
02:03:53.222 - 02:06:33.290, Speaker B: It could be subnames, it could be account abstraction or anything else. It's up to you. So thank you. I hope this was helpful. We have a booth. If you have any questions, we'll be there to help or message us in discord and we'll be able to help you out. Lam, Sam.
02:06:33.290 - 02:06:58.460, Speaker B: It.
02:07:38.370 - 02:08:10.274, Speaker I: Okay. We are ready to get started. I'm going to be going kind of quickly because we only have 20 minutes, so hopefully you'll still get a lot out of this. And I'm not going so fast to kind of not explain some of the core concepts here, but I'm going to be talking about building full stack social applications today. And we're going to be combining a presentation at the beginning with an actual coding demo at the end. And the team that I work with is Ave and Lens Protocol, and Lens Protocol specifically is what I'm going to be talking about today. I'm Natter.
02:08:10.274 - 02:08:36.242, Speaker I: I've been a developer for about eleven years, worked in the traditional tech world and cloud and mobile, and then have now been in the blockchain world for a little over two years. If you want to get a reference to the resources we're covering here today, I'll give you a couple of minutes. If you want to scan this QR code. If you want a Lens handle, by the way, also come by the booth today. We can get you set up with one. If you want some swag, come talk to us. We have a lot of swag there.
02:08:36.242 - 02:09:36.798, Speaker I: We're trying to mainly get that swag to people that are building on Lens or Go. But if you come like, maybe tomorrow and we still have some swag left and you're not yet building on Lens or Go and you can still pick some up, but if you are building on Lenser Go definitely come speak to us. Okay, so I'm going to first introduce Lens. So what is Lens? Speaking to developers here, I'm going to give a different description than what Lens is to a user. For a user, you could kind of think of it as a social layer for Web three, or just really a composable social graph that allows you to take your identity and your followers across multiple applications and multiple experiences. But for developers, I could say it's more of like a protocol and a suite of tools and APIs for easily building social apps or integrating social features into existing apps. The way I like to kind of describe this, that might resonate with traditional software engineers.
02:09:36.798 - 02:10:09.034, Speaker I: It's kind of like a managed service, offers features like Auth Zero or Okta, might offer authentication for you for your application. You don't have to build all that from scratch. You just tie into something like Clerk or Auth Zero and you're good to go. You have things like S Three for file storage. You have even I don't know, there's all sorts of these managed services out there like Twilio for messaging. You can think of Lens Protocol as a managed service for building social applications or social features into existing apps. So you don't have to build or manage this back end infrastructure.
02:10:09.034 - 02:10:34.966, Speaker I: It's all there for you. You just build out the front end, either a web or a mobile app. And social is really interesting because it's kind of the biggest use case that there is in software today. I think 4.9 billion people are familiar with social. It's not like a lot of other blockchain technologies where there's a lot of onboarding and friction for people to have to understand why they would use this in the first place. It's just something that people are already knowing and understanding as well.
02:10:34.966 - 02:11:26.998, Speaker I: And I think it's also interesting to see the two biggest social founders in the history of the world, mark Zuckerberg and Jack Dorsey, also moving into decentralized social. Jack with blue sky who then moved on with Nostra. And now you see Adam Maceri, who's the head of both Instagram and Threads, giving a talk at Ted last year talking about building decentralized social applications. And then one of his first posts on Threads is talking about how Threads is moving into a decentralized network and some of the language he's using here is Web Three language, portable, social, graphs, censorship, resistance are some of the themes here in one of his first posts. And I think it's really interesting and validating for anyone here that's been building in Web Three to kind of see that these ideas in practice actually do make a lot of sense. And I think when applied to social, it makes especially a lot of sense. And hopefully you can see why by the end of this talk.
02:11:26.998 - 02:12:24.646, Speaker I: So a social application doesn't necessarily mean an Instagram or a TikTok, it just means that you're implementing a feature that has some type of social functionality into your app. As developers, what are some applications that we might not think of as social, that are social? Well, GitHub is a very good example of this. I don't use GitHub only for storing code. I use GitHub for discovery of new APIs and new applications and new software that the people I follow are building because I can follow a developer on GitHub. And now I have a feed of some of the most interesting things that are happening in the software space because the algorithm is giving me that information based on who I follow. So there's all types of ways that you can integrate social features into apps that don't necessarily have to be a social app in the front and forward main selling point and Lens basically allows you to do that. Lens is at the core a set of smart contracts deployed to polygon.
02:12:24.646 - 02:13:27.050, Speaker I: But what really makes Lens powerful, I think as a developer is more about how easy it is to build with. We have a lot of different things that you can use that kind of abstract away the traditional complexity of building on a blockchain. We have a GraphQL API that allows you to query it like you would a database. So you can say give me profiles that have been created, like for instance at a certain point in time or that might have you might be able to search publications and sort and filter and all these things that you can do with the database. Our API allows you to do that. We also have a lot of interesting SDKs and developer tooling and things like that that allow you to build much quickly, more quickly than you would by calling just Raw API requests that I'm going to show in Just. A moment as well for UX, for the actual user facing things that we've built into the protocol that make it kind of more of a desirable place to build than just directly on chain is our gasless transactions and our dispatcher.
02:13:27.050 - 02:14:27.758, Speaker I: Gasless transactions basically mean that the user doesn't have to pay for anything. So when a traditional blockchain application is launched and you want to get a user to use that, the onboarding flow is actually very bad. You have to explain to that person that they need to download this wallet and they need to create a private key. They need to go to the bank and they need to open an account and then they need to connect that account to an exchange like Coinbase. Then they need to buy the right token. Then they need to send that right token to the wallet and be on the right network and then exchange for whatever token it is that works on, right? That's a shitload of friction, right? Users are very hard to come by already and when you put all this additional friction, that's kind of a no brainer. While most blockchain applications don't have any users, if you think about building in the traditional web, two world people literally make onboarding seamless as clicking on a button to sign in with Google and they still can't get users.
02:14:27.758 - 02:15:12.542, Speaker I: So I think that making this onboarding process as smooth as possible and not requiring all this is super important. So with Lens applications, the user doesn't need tokens, they just need a wallet and then they can start using the app for free. And the reason that it's free is because we've upgraded and improved our infrastructure. That I'm going to talk about in just a moment to make transactions super cheap on an order of magnitude of a traditional database. A couple of orders of magnitude, which makes it very inexpensive. I'll show you some numbers in just a moment. And then also our dispatcher at the API level allows you to just sign a single transaction saying I can post using this account without having to sign every other transaction going forward.
02:15:12.542 - 02:16:06.446, Speaker I: So the end UX ends up being more of something like Twitter, and I will try to kind of show an app in just a moment and then the developer experience is something that I'm going to show in just a moment as well. So one of the things that has been a challenge for building this type of application in Web Three is the scalability. If you look at a database like DynamoDB, I used to work at AWS for a little over three years. We had applications that literally would be able to handle, that did handle around 100 million operations per second for a single application. We have blockchains that are supposedly scalable, that can't even hit a few thousand transactions per second. And this is a shared environment. Like, not only that blockchain can only handle a few thousand TPS, but that is being distributed between every application ever launched to that blockchain and every single user on every single application that's launched to that blockchain.
02:16:06.446 - 02:17:00.066, Speaker I: Clearly not a good use case for Social. And I think that we're starting to see a lot of improvement in the space with app chains and things like that that I think are going to be great. But even with that today, you cannot build using a traditional, what I would call a financial blockchain that has the limitations around fixing the double spin problem, which turns out on social doesn't even matter because who cares if me and my friend post at the exact same time? The only thing that we care about is that that content is going to be there, it's going to be immutable, and it's going to be available for people to kind of use and be able to read publicly. So removing the constraint of the double spin problem allows you to use a protocol like Rweave. And Rweave is a protocol that's built specifically for data storage. And it's not built for financial use cases. It's more just built to store files and stuff.
02:17:00.066 - 02:17:42.640, Speaker I: So our new infrastructure uses our weave, and it's called Momoka. And at the last time that I checked, we had hit around 800,000 transactions for a total cost of $261. I paid $261 for a single ETH transaction during the bull market. So this is 786,000 times more scalable than that one transaction I did. Obviously, that's not the typical cost. The typical cost for a transaction on a new L2 is probably closer to a few cents. But still we are orders of magnitude cheaper than that, and therefore it makes it easy for us to be able to subsidize all the transactions on the network at this cost.
02:17:42.640 - 02:18:23.470, Speaker I: Now, in terms of developer experience, we have the GraphQL API that I talked about a moment ago, but we also have SDKs. So we have the Lens SDK, which is both a react hooks SDK and an agnostic JavaScript SDK. The react hooks SDK just allows you to call APIs with two lines of code. The Lens client is a more agnostic JavaScript SDK that also allows you to kind of make requests with just a few lines of code. It sits above the lens. API So instead of having to understand and format GraphQL, you can just say give me publications or give me a profile. With this ID, two lines of code, you have that data back and ready to roll.
02:18:23.470 - 02:18:53.506, Speaker I: This is what the API looks like. So you just import the hook and then you render data loading and error, which kind of gets returned from you there. And you also can pass in arguments for different props, things like sorting and filtering and stuff like that. We have a UI kit for react native. You can get started with two lines of code as well. You can render a feed, you can render a publication, you can render a profile, all sorts of stuff. And then we have a widgets library.
02:18:53.506 - 02:19:40.626, Speaker I: This is kind of an idea of what those widgets look like when you render those out. You have a way to share profiles, we have a way to share content. You have a way to sign in with Lens using it more of like as an integration, which is what most of the time these widgets are used for. But it's also just a really simple way to kind of get started with Lens using just a couple of lines of code. And then finally something that a lot of people have been building some of the most interesting stuff with is our BigQuery data set. So with our BigQuery data set, I think we have like 65 or 70 tables that allow you to literally query every piece of data in the history of Lens in a fairly short amount of time. And with this, people are building things like analytics dashboards and recommendation algorithms.
02:19:40.626 - 02:20:13.402, Speaker I: And then we integrate really closely with Xntp. There's a Lens namespace that allow you to kind of integrate with every other Lens app. So if I send a DM on Orb and then someone else opens it on Butterfly, and then you build a new app, you'll have all of those DM conversations integrated into your app without having to do much work. A couple of the core features of Lens that I think are super important to highlight that aren't really specific to Lens. It's more of like a Web three thing. But I will just underscore them because they really shine with Lens. One of them is extensibility.
02:20:13.402 - 02:20:53.390, Speaker I: So with Lens, and especially with Lens V Two, which was just launched to testnet a couple of days ago, you can build your own custom functionality with custom modules and. What we call Open Actions with these new features or with that new feature Open Actions and with custom modules. Basically it would be like if you could submit a pull request to Twitter and add a feature that you wanted. You can do that with Lens. So if you see something that you want that isn't already there, you can kind of integrate this. And this also opens the doors to a lot of cross chain stuff. So we're already starting to partner with some other protocols that are outside of the polygon network that allow you to interact and integrate with their applications and vice versa.
02:20:53.390 - 02:21:45.402, Speaker I: And then there's this idea of Composability. Composability is a big thing with smart contracts because anyone can just build on top of each other's contracts and you have all of this DeFi stuff that happened and there's all types of stuff you can do that. But beyond that, I think it's important to underscore that the protocol itself is almost more of a managed infrastructure service like you would see with traditional cloud providers. Because not only do all of these things exist, they continue to be maintained and improved over time. And you as a developer only have to focus on the front end. So you can be a front end developer building web or mobile apps and not have to build and manage DevOps infrastructure, database, all this other stuff. And you also inherit the existing Lens user base so you don't have to kind of bootstrap and cold start as bad as you would from a traditional application.
02:21:45.402 - 02:22:25.900, Speaker I: You still have a little bit of a cold start problem because you have to get awareness of your app. But once people know about it, it's not like they have to sign up for a new profile file. If they already have a Lens profile, they already have their followers on your application as well. And one of the things that we're doing now that Lens V Two has been rolled out essentially is we're opening up Lens Protocol to be completely open for, I would say more of a permissionless access for new users. So as a closed beta, it's been hard for people to get handles. They have to go through this process. But very soon we're going to have a way for developers to be able to onboard users directly through their applications without any involvement from the protocol at all.
02:22:25.900 - 02:23:14.246, Speaker I: Composability for developers was spoken for there for users. It's interesting because for me as a user, I have this portable social graph and I can focus on building my audience on one of these applications. But if I see a new application that launches tomorrow that I like a lot, I now have all of my followers there and I can experiment and try things out there without having to kind of worry about bootstrapping from scratch. So Lens Tube orb launches and then I see this new app that is called Butterfly. Okay, this is pretty cool. Every time I sign into a new app, all of my followers are there and this is a really fun experience from the user perspective and I think a lot of creators kind of like that for the tech stack as a front end developer because you are not having to build the backend. This is kind of the tech stack.
02:23:14.246 - 02:23:41.474, Speaker I: You might work with GraphQL and the Lens API, one of those SDKs that I just showed you. You still need to manage your metadata for a post. So when you publish some content to Lens you can choose where that needs to be stored. So you can either store on IPFS or Rweave. We recommend bundler with Rweave. You can also integrate video streaming features with Live Peer. We see a lot of people doing that and you'll still be using some of the same SDKs that you've used in the past.
02:23:41.474 - 02:24:10.422, Speaker I: Things like Rainbow kits, wallet Connect, ethers wagme and on the front end you can use any of the libraries that you've used in the past. Like next. JS react native. Whatever. Okay, so tried to go through that kind of quickly so we could get to an actual demo. What I want to do is just show you how to build a social app in, I don't know, five minutes I guess. So what we're going to start with is the Lens docs.
02:24:10.422 - 02:24:10.600, Speaker I: So.
