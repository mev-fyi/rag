00:00:00.490 - 00:00:20.414, Speaker A: Let's do this. Okay. Thank you, East London. Thank you, everybody. Yes. See, I wasn't even going to ask you to whoop and clap yet, but thank you. I was thinking, you know, we'll get a little while to get going and get the energy up, but no.
00:00:20.414 - 00:00:53.402, Speaker A: Okay, we are back. This is the end of our we weekend together, but hopefully the beginning of many more. Thank you very much for being here, for hacking on some pretty awesome projects. I've had the pleasure of seeing some of them I was judging earlier. So it's been wonderful to see the work that everybody has been putting in. Thank you so much for your tireless nights. And yeah, awesome.
00:00:53.536 - 00:01:19.030, Speaker B: I was there at 09:00 a.m. Just 30 minutes before submissions were due and you could see almost not a sound to be made. Everybody was focused or passed out. And the energy right now, the energy 30 minutes later was just incredible and it just felt like Friday night again. So it's exciting to see that you're all still up and excited and let's get to this thing, make this super quick.
00:01:19.100 - 00:01:48.698, Speaker A: And with that okay, so going through these wonderful stats again, we have had 300 attendees, all of you wonderful people, 23 advanced intermediate beginners and newcomers to Ethereum who have actually been doing some pretty fine hacking, if I might add. All of you have, but it's great to see those beginners getting stuck in. We have had oh, man, that unicorn.
00:01:48.794 - 00:01:49.786, Speaker B: The unicorn overflow.
00:01:49.818 - 00:01:59.566, Speaker A: Never mind. Tired, tired. So 50 project submissions. That is insane for the attendee.
00:01:59.598 - 00:02:09.960, Speaker B: Give yourself a round of applause. Yes, 50 projects. So I know, Simona, you just a handful of these projects. What were some of your takeaways from the submissions you saw?
00:02:11.370 - 00:03:32.414, Speaker A: This is definitely not my first hackathon rodeo, so I have had the pleasure to judge for the past two years and the evolution of the projects that we're seeing, the evolution of the thought process that goes into those projects, the care for the user experience has just gone up and up and up and up and up. And the quality that I'm seeing from across so many different use cases and the fact that the projects are actually incorporating so many of the DApps that we already have in the ecosystem, not starting to build something from scratch, using things like three box things, like all of the different plugins, all of the different protocols. It's super awesome to see because it means we can move quicker and we can deliver more and we can create more. Also, I definitely want to mention again, for me, seeing beginners get stuck in and actually go from, let's say, zero to submitting a project in 48 hours is pretty damn good. And I think DAP Hero, I must mention them here is a huge help for that. Where are the guys at? DAP Hero. There you go.
00:03:32.452 - 00:03:32.930, Speaker B: There we go.
00:03:33.000 - 00:03:52.002, Speaker A: I've seen so many beginner projects use them. And actually, Denison has been running around giving people solidity help that is needed at 03:00 A.m.. When we all need some solidity help at 03:00 A.m.. It's been awesome to see. So, yeah, continues to be a great pleasure.
00:03:52.146 - 00:04:23.982, Speaker B: Having been through this ecosystem for the past few years, it's always amazing to see just abstractions becoming more and more viable because it just lets us build it really quickly. And the goal of the whole event and these events in general is to make that a lot easier. So you're focused on the products, not on the setup. So 50 projects, that's awesome. All of you presented to all of our judges twice, which was amazing. The judges had a wonderful time. They were definitely tired in doing that for 5 hours.
00:04:23.982 - 00:05:05.434, Speaker B: And after all of that deliberation, we ended up with top six teams that the judges chose. And what we're going to do next is just invite them one by one and they'll demo what they built on stage to everybody. And before we kind of kick into that, I just want a big round of applause for all those six teams that made it to this finals. And these teams are good. Ghosting josh Quatchley, OneHop IO ZK, Social Recovery and Lurch. So please give them a big round of applause and also to all the other 44 teams that are not on this thing. You had an excellent sort of run here and it's an amazing to see all of you still made it and you're here sitting in this audience.
00:05:05.434 - 00:05:13.562, Speaker B: So without further ado, what I'd like to do is call Good Yoasting up on stage to present to everybody what they did for their hack. Please welcome them on stage.
00:05:13.626 - 00:05:14.720, Speaker A: Come on up.
00:05:23.410 - 00:05:28.200, Speaker C: Do we get USB? See it's here?
00:05:40.430 - 00:05:41.500, Speaker D: What's this?
00:05:42.510 - 00:05:44.940, Speaker A: This is always the best part of what happens.
00:05:46.430 - 00:05:48.730, Speaker B: We put adapters in adapters.
00:05:53.890 - 00:05:55.840, Speaker C: Okay, this should work.
00:05:56.290 - 00:05:57.630, Speaker A: Is it connected?
00:05:59.170 - 00:06:00.670, Speaker C: Okay, here we are.
00:06:00.820 - 00:06:02.686, Speaker B: Okay, take the mic.
00:06:02.788 - 00:06:21.250, Speaker C: Good Ghosting. So you know when you're on dating app and she doesn't show up and you're sad, so good Ghosting. Right? So you know when you get ghosted by a girl from a dating app, she never shows up, right? It sucks.
00:06:22.570 - 00:06:25.880, Speaker A: Tinder, this is going to be an app that you're going to want to get Ghosted on.
00:06:26.490 - 00:06:43.134, Speaker C: Yeah. So that's the origin of the name. So it's a savings game. So we're using Ave in the background. Users commit to deposit. 990 die every week. Users who follow through for a year eventually get to withdraw all their money.
00:06:43.134 - 00:07:19.846, Speaker C: And users who drop out lose all the interest. They can still withdraw their principal, but they lose all the interest. So what happens is users who stick to it get a higher Apr than they would if they just put the money in. Ave starts off like this, and then over time, you see people start dropping out. They start ghosting you. Your friends aren't as loyal as you thought, but your Apr goes up, so you're happy. Right? So ghosting but made good.
00:07:19.846 - 00:08:12.970, Speaker C: So, yeah, this is what we built it's on coven at the moment. We can show you in a second, but one thing I did want to talk about is that we have a very good referral program. So if you have any friends who you think might ghost you, this is a very good way to find out if they're good friends. So invite them, you will get 10% of the interest that they should earn, and if they invite other friends, you also get 1% of that. So it's very good to invite friends and you'll find out if they're good friends or if they'll ghost you over time. We can also calculate some stats so you can check out how many players are in, who are the most infectious, players, who have spread the love more. And you can also see the prize it grows every day and how long it's going to take before the game ends.
00:08:12.970 - 00:08:23.040, Speaker C: Yeah, we can show you our Quick demo. We call it quick. It's not actually Quick because it's web free stuff, so it's going to take a while.
00:08:28.230 - 00:08:28.594, Speaker E: Yeah.
00:08:28.632 - 00:08:35.830, Speaker B: So there's only one button in this app and you need to press it once in a week or you will be hosted or you will become the host.
00:08:36.570 - 00:08:41.750, Speaker C: Yeah, we think this is the best UX one button, actually.
00:08:41.820 - 00:08:44.280, Speaker B: Metamat makes it like a five, but that's different.
00:08:48.670 - 00:08:58.780, Speaker C: Okay. And it's going through, we think, in the background and over time, over time, covan it's taking its time.
00:08:59.090 - 00:09:09.550, Speaker A: Approve the contract to spend your die and then you can send the next confirmation. Then it will send the then it's sending the die.
00:09:10.210 - 00:09:28.790, Speaker C: Guys, let's clap for it. Come on, come on, give it some cheer. Come on. Yay. Success. So we didn't ghost anyone this week, but maybe next week we'll drop out, who knows?
00:09:32.810 - 00:09:34.680, Speaker A: Thank you. Yeah.
00:09:40.670 - 00:09:49.370, Speaker B: Thank you, thank you. Good ghosting. Next up, we have dodge money from the future. Please welcome the dodge team on stage.
00:10:19.400 - 00:10:21.430, Speaker C: Which one is it? This one?
00:10:41.950 - 00:11:15.102, Speaker F: All right, that's working. All right, so we're dodge. It means interest in Klingonian. That's beside the point. Basically, it's a time warping machine that allows you to get future money right now. So what I mean by that is that if you want your Dai, for example, to earn interest, there's a lot of Star Trek memes in here. If you want your Dai to earn interest, you have to put it on avi or compound, and you have to wait for that interest to accrue.
00:11:15.102 - 00:11:54.458, Speaker F: And you actually don't know how much you're going to get because the interest rate is variable. So dodge solves both of those problems. You know exactly how much you're going to get, but not only that, you're also going to get it up front. So you're basically getting your cake and eating it too. So the use cases for this hopefully are obvious. It's a good way to avoid the opportunity risk with a lot of popular activities. In web3, if you're staking or escrow deferred payments, say for example, Alice wants to set up a Gitcoin bounty for Bob.
00:11:54.458 - 00:12:19.420, Speaker F: She has to lock up her die. But obviously if she's locking up her dai, she can't earn interest on that Dai, so she uses DAJ to get the interest upfront. So kuba, you're going to show how it works. It's basically based on the new asset class, which are called future tokens. So future die FDAI. The letter wasn't taken, so we took it. Nobody else can have it now, sorry.
00:12:19.420 - 00:12:25.260, Speaker F: And maybe.
00:12:28.190 - 00:13:10.044, Speaker C: Over to you. Okay, so this part looks quite typical, like an up from the presence. So you can just select how much F you want to deposit, what's depositing period. You can see what are the current rates and you click on depositing. Where's the MetaMask? So right now we are waiting for the interest rate to be transferred from the future. What actually is happening behind the curtains. We take your deposit, we look for the best available option on the liquidity pools, we diversify the risk and we recalculate the interest rate and send it back to the user.
00:13:10.044 - 00:14:38.570, Speaker C: So what you receive is a future token, in this case future F that is locked until a maturity date expressed here. Actually it's kind of a multitoken ERC, 1155. And what can you do with that token? You can transfer it in space and in time. So what do you mean by transferring in time? You can decide to, let's say, okay, take part of your deposit and push it farther to the future and earn more interest or push it closer to the present so we repay the interest that you already taken upfront. Let us try that and maybe let's show also how to transfer that in space because it's like a fully fungible token within the categories that we define. So you can send it to your friend, you can put it on stake on the different protocols, you can mix with other DeFi app, and you can even swap future app for future Dai if you are brave enough. So have you got metamata? What can you just copy? Okay, so let's transfer.
00:14:40.160 - 00:14:59.360, Speaker F: So here for example, Alice can put her FDI or her f ETH in Gitcoin, and when Bob delivers the bounty, he'll get his FDAI and then can convert that for actual Dai at the maturity period. So if it's June die, he gets it in June.
00:14:59.520 - 00:15:17.840, Speaker C: Okay, let me refresh because you switch to a new account, welcome MetaMask taking transferring space to another account.
00:15:18.370 - 00:15:45.560, Speaker F: And while that's going on, we're working on this as an actual product. So we've been developing also a nice user friendly front end that explains it, that you can get your future money up front with like nicer sliders that are hopefully going to win the UX people prize, we don't know. And that's it. Thank you.
00:15:50.510 - 00:15:59.740, Speaker B: Thank you, Dodge team. Next up, we have quatchli. Please welcome them on stage. And I'm pretty sure I butchered that name, so let them correct me.
00:16:13.230 - 00:16:37.750, Speaker G: Hey, folks, just get set up here. So we all met this weekend on Friday. The problem statement that was originally postulated was just really kind of like privacy in general. And then Tom came up with a really cool idea. He said that Sapier is a nice way to stream money to people. Let's just say I wanted to earn a salary and I wanted to earn my salary. Over time, everybody would be able to see what my salary is.
00:16:37.750 - 00:17:04.938, Speaker G: And that's not really great. It wouldn't be great to see what my colleague's salary is. It wouldn't be good to see what my boss's salary is. So the solution to this would possibly be to do it in a private manner. And so we have integrated the Aztec Protocol to create streaming private money so you could conceivably stream a salary over a period of time. So we tried it and it's pretty close to working. So here you can see that I have a balance of 600 die.
00:17:04.938 - 00:17:46.282, Speaker G: I've actually locked up 125 into ZK die, which is on the Aztec Protocol. And we can create a stream. And so to create this stream, we say how much we want to stream. So let's stream 100 die, let's decide who we'll stream it to. So let's just say this is my employee, I'm going to stream him over the next seven days, a stream of 100 ZK die. And so then we'll create this stream and we use the Aztec API to do it. And I can maybe allow Tom to explain the proof that's about to get created, its destination, and all the fun stuff that goes on in background.
00:17:46.346 - 00:19:02.280, Speaker H: Okay, so at this point, we have created a Aztec note and sent it to the smart contract. Once this transaction goes through, that is, we then are going to send another transaction which defines all the parameters of the stream. So that's going to tell you who it's going to and how long this stream is going to go on for. Once that's done, the recipient can kind of obviously find an event on chain which tells them that they have this stream pointed at them. They can then choose to withdraw any fraction of that time frame. They just need to give a timestamp to smart contract and it will do a dividend proof, which proves that the amount of money that they want to withdraw from the note on the smart contracts is equal to the time period that they are claiming over. We then kind of check that they're not claiming money into the future.
00:19:02.280 - 00:19:29.278, Speaker H: And yeah, I think that's about technical details with those two aspects along with the standard joint split proof proving that they aren't creating money out of nowhere that throws another note over to the recipient and then the change note gets replaced onto the contracts for them to claim in future.
00:19:29.444 - 00:19:31.950, Speaker C: These notes, they hide the value.
00:19:32.020 - 00:19:35.466, Speaker D: So no one ever knows what value you are transferring.
00:19:35.578 - 00:19:37.066, Speaker C: Yeah, that's the idea.
00:19:37.188 - 00:19:39.490, Speaker G: All right, so private money on Ethereum.
00:19:47.110 - 00:19:54.690, Speaker B: Thank you. Next up we have OneHop, the CDP manager. So please welcome Sergey from OneHop on stage.
00:20:20.750 - 00:20:37.710, Speaker C: All right. Hi everyone. It's a pleasure to stay on the main stage. Thank you very much. Ethereum foundation. Ethereum global. So what I built on this weekend, this is CDP manager.
00:20:37.710 - 00:21:26.974, Speaker C: CDP manager can be used to migrate CDP position, collateral tap position of a user and can improve the usability in DeFi. You can see on the screen there OneHub IO. It's actually deployed also on the main net here I have a compound position. I lent 195 die and I borrowed a little bit WBTC. And I would like to move this position to Ave because it's more profitable for me to lend and borrow there. Because of the great interest rate on.
00:21:27.012 - 00:21:27.630, Speaker E: Aave.
00:21:31.670 - 00:22:43.874, Speaker C: You can do it just with a few clicks which I will not execute the transaction because it's on the main net and can take little time. After the migration to an NFT token, you can actually easily migrate between different provider like compound, like MakerDAO, like Ava as well. So I will show you small architecture diagram, how it works and why I need here an NFT token RC 721. So it solves a big problem. Like if you have only on wallet, you are really limited on compound. You can have only a few positions there and with an ERC 721 NFT token you can have as many position you want. Yeah, I tried to build a small mini or microservice because I love and also my team from one inch loves the composability of DeFi.
00:22:43.874 - 00:23:50.570, Speaker C: Just plug every available service into your own service and expose clear usable APIs to everyone so that everyone can get profits from your service and you get profits also from other service. So in this diagram you can see as a user with a normal Ethereum wallet, you can create an NFT token which would hold the position in a proxy smart contract under the hood. And I like flashlands. Yes, maybe you heard we hacked Fulcrum with flashlights white hacked in January before it started to be popular. But this is another story. I like used to flashlights from our of course there's little fee but they do a great job with that. It's really usable.
00:23:50.570 - 00:25:00.318, Speaker C: So what I did, I migrated the position from the wallet into the NFT token proxy smart contract by asking for a Flashline on Ave. I repaid the user debt to be able to migrate position and I grabbed the user collateral tokens from the user and I created new borrowing position on compound and paid back the flashland to Ave. So first of all, you need the migration part and to just migrate your position from your wallet to be flexible to migrate to other services from an NFT token. And the migration works similar to the import logic. It's the same you have already deposition in your NFT token and again flashland and actually the same. I can show you how such flash lawn looks like. This is a tool from my colleague Anton bookov.
00:25:00.318 - 00:25:58.600, Speaker C: You can see the whole stack trace from parity trace more in detail and usable also to debug. And you can see it looks like I had here more than 137 hops in different smart contracts to just import a position. So I also used here Taurus also a great solution to login with Google or also some Zamara oaf provider. And what I heard they plan also to release a solution for free guest transactions like that. We are going also to integrate them, I guess. So like some cool things. Yeah.
00:25:58.600 - 00:26:01.000, Speaker C: Thank you very much. That's all.
00:26:07.050 - 00:26:15.750, Speaker B: DeFi arbitrage of the service. It's great. Next up we have ZK Social Recovery. Please welcome the ZK Social Recovery team on stage.
00:26:30.550 - 00:26:31.300, Speaker A: It.
00:26:33.110 - 00:26:33.570, Speaker C: Cool.
00:26:33.640 - 00:26:55.322, Speaker E: Does that work? So everything you any good at this?
00:26:55.456 - 00:26:56.620, Speaker C: No, that's fine.
00:26:59.730 - 00:27:02.800, Speaker E: How many blockchain engineers does it take to fix a screen?
00:27:09.250 - 00:27:10.000, Speaker C: Oh.
00:27:12.570 - 00:27:18.890, Speaker E: Nice to be hey, we're there. Perfect. Fantastic.
00:27:19.550 - 00:27:19.914, Speaker B: Cool.
00:27:19.952 - 00:27:33.866, Speaker E: Yeah. So hi. So, yeah, we're the ZK social recovery team. We're kind of going through a rebrand exercise at the moment. So some people also know us as secret guardians. Anyway, so I'm Tom. I work at Aztec.
00:27:33.866 - 00:27:39.330, Speaker E: By day they're somewhere sat over in the corner, I think. And then guys, do you want to introduce yourselves?
00:27:39.670 - 00:27:45.950, Speaker B: Makoto from ENS and Kickback. And I'm Janice and work with smart contract wallets, mainly.
00:27:46.030 - 00:27:47.490, Speaker C: So we combined everything.
00:27:47.640 - 00:28:17.194, Speaker E: Yeah, exactly. So we came with a problem statement. So smart contract these days smart contract wallets these days so you can think of things like monolith. Argent increasingly have this feature where you can nominate guardians. And these guardians basically, if you lose your private key or you lose your access to your smart contract wallet, these guardians can restore you access to your wallet. So they're in quite a privileged position. But talking things through, we quite quickly realized that these guardian addresses are stored in public on chain.
00:28:17.194 - 00:28:47.794, Speaker E: And so anybody on chain can see who your guardian address is. We think that's both a privacy concern and a security concern. So we set out to try and fix this. So to do this, we basically rely on zero knowledge technology. So we've built a yannis has built a proof of concept, Smart Contract Wallet. And then I've integrated some zero knowledge stuff into it. And Makoto has helped draft this front end along with we're using a tool called Sol UI by Ram, which is really, really useful.
00:28:47.794 - 00:29:27.790, Speaker E: So check it out anyway. So how does this work? So normally in a smart contract wallet, your guardian address is stored on chain in public. Now, instead of doing that, we take a hash of this. And when you add a guardian to your wallet, you store the hash of the address of the guardian on chain, which means nobody else can work out what this maps to. And then fundamentally when a user is trying to get access back to their wallet, a guardian has to generate a zero knowledge proof that they know the pre image to this hash. Now, the only way that they're going to be able to have this proof satisfied is if they do in fact know the pre image to this hash. Which means that they are a valid guardian.
00:29:27.790 - 00:30:00.414, Speaker E: So if we take you through what this looks like step by step. So the first thing we're going to do is we use Socrates to build some of the ZK snark stuff that we need. Specifically we're using a snark called Gruff 16. So first of all, when you're using these sort of things, you have to do various steps and you're going to see some matrix s stuff going on. So there's various steps going on here. When you're using ZK snarks, you have to do a trusted setup where you're basically creating some toxic waste and some of the crypto points that are used in this. We're creating a proof here.
00:30:00.414 - 00:30:31.510, Speaker E: We're computing some secret information and also generating various keys. You'll see at some point a proof is going to get output from this. It looks like, I think there's three elliptic curve points and you can see here at the bottom. So we get a proof out. So that's going to be our guardian's proof eventually that they know the pre image to the hash that is stored on chain. So that's the local proof side of things. Now this would happen on the client locally, ideally in the browser, if you can get this working in the browser.
00:30:31.510 - 00:31:10.180, Speaker E: So the next thing we built was ZK social recovery is in the app. So this is connected to Rinkby and it allows you to deploy one of these ZK wallets as we call them. So click Execute, MetaMask pops up, all standard stuff. So this is going to first of all deploy the wallet. It's then going to deploy the associated verification contract. So when a guardian calls recover on the ZK wallet, the method is going to static call out to a proof verification contract and it sends the proof to this this verifies that the ZK snap proof is correct. And if so, the normal mechanics can continue.
00:31:10.180 - 00:31:36.542, Speaker E: So we're on Rinkby, so this might take 30 seconds, something like that. But basically once you've deployed this wallet, you can then interact with it. You can get state, I think MetaMask is requesting my signature. So it's also deploying the proof validator. So it wants two signatures. And then you can do various things you can send just as a normal wallet. And then we have to set our proof validator, we have to link these two contracts together.
00:31:36.542 - 00:32:07.960, Speaker E: This will ideally be abstracted away in a future version. You can add a guardian by adding this hashed address that we talked about. It has to be split into two segments at the moment, some technical details, and then eventually, once you're working through this flow, you can then call ZK Recover, where you pass in some of those proof variables that you saw on the iterm terminal anyway, so that's ZK Recovery, it's on GitHub. Feel free to check it out. And yeah, thank you for everything. It's been great.
00:32:14.190 - 00:32:30.510, Speaker B: That was awesome. Just being able to see privacy related things actually become integrated into products is a wave I'm super excited about. Next up is our last presentation on stage. And with that, please welcome Richard Moore to talk about Lurch.
00:32:38.210 - 00:33:03.834, Speaker D: My name is Richard. I go by Rick Moo. I'm going to gloss over a few things during this talk. If you have some questions, feel free to come up and pester me afterwards or at the after party once this thing comes up. So what is lurch? So, Lurch is this awesome new product I built. It allows you to execute Ethereum contracts on Ethereum. It's amazing.
00:33:03.834 - 00:33:19.870, Speaker D: So everyone's favorite feature of JavaScript? Come on, say it together with me. We all know that ah, crap. Eval. Everyone loves Eval. It's such a useful feature. It's flexible, it's easy to use, and it throws all security right out the window. All things that we desire.
00:33:19.870 - 00:33:48.722, Speaker D: So we can go a little bit better these days in JavaScript and instead use the VM module. This unthrows things out the window a little bit in terms of security, but it also gives us hookability, which I'll cover more in later. So what is lurch? It's written 100% impure EVM assembly. It's under 2 KB. I'm not sure if people are used to writing an assembly. It just makes you want to tear your hair out sometimes. And I'm doing good though, so yes, basically it's an Eval for Ethereum.
00:33:48.722 - 00:34:22.734, Speaker D: It's performant ish, the cost analysis is later on as well. But basically it's an EVM emulator written in EVM. So it doesn't matter whether your contract was written in Solidity or Lll or Viper or whatever you use, it'll just work. You give us some bytecode and some call data and it just runs. So there was two other options I was going to add, but time ran out and hackathon yada yada yada yada. This will still be complete at some point in the near future. But basically you have a smart contract.
00:34:22.734 - 00:34:49.194, Speaker D: This is the solidity signature. It's not written in Solidity, it just knows how to pull Solidity signature apart. So you give it the bytecode, you give it the call data, and whatever your call in that contract for that data returns is what it will return. I will give a quick demo now. Yeah, everyone else has had a beautiful UI. This is the antithesis of the beautiful UI. So we will as you can see, I've been running it before for the various things.
00:34:49.194 - 00:35:26.870, Speaker D: It's going to probably say the exact same numbers. So what it's doing right now is it's deploying an ERC 721 sorry, ERC 20 contract to a DevNet at the same time it's deploying Lurch. It's then taking that same ERC 20 contract and running it entirely through Lurch as well. Just so you can see that both the real ERC 20 and the ERC 20 that's running inside Lurch are both doing the same things. The important thing is you can see it started off with 10,000 units, and then it went down by 42 to 9958. Yes, the math works out. And that's my beautiful UI.
00:35:26.870 - 00:35:52.720, Speaker D: Yes. The one other kind of interesting thing to note is so this right here I ran earlier on main net. If you want to use it's at Lurch. ETH, you can see there's no other transactions that have ever been sent to this contract. It was able to execute code. Any existing way to kind of do this require like, paying and doing transactions, that sort of thing. This just lets you do it for free.
00:35:52.720 - 00:36:05.486, Speaker D: Let me go back to my slides again. I'm going to power through some of them because how does it work? It's a little bit like a virus. This is more complicated than I really have time to get into right now, but please feel free to come after and be like, Yo, what virus?
00:36:05.598 - 00:36:05.970, Speaker B: What?
00:36:06.040 - 00:36:32.438, Speaker D: And I'll explain to you. So random use cases. So counterfactual verification. Currently, as it stands today, if you're trying to counterfactually verify something and somebody's lying, you might have to deploy a whole black load of contracts and then execute them to prove that you're being lied to. Instead of all that, you can just simulate running the contracts. Yes. You can also do large contracts.
00:36:32.438 - 00:36:49.218, Speaker D: I didn't get a chance to get a demo together. But for example, you could easily build a two gigabyte contract with this because you only ever need to put the piece of code around that actually gets executed upgradable. Forward storage. The next part is more interesting. I'm going to skip by this because it's just kind of like a reworking of this.
00:36:49.384 - 00:36:50.146, Speaker C: Yes.
00:36:50.328 - 00:37:24.970, Speaker D: So, for example, this allows you to run arbitrary code. Anything you want to do. You can just take code from your users and do what that code does, but you can put hooks in it. So, for example, maybe you don't want a person to be able to suicide your contract. If they try, you're just going to roll back the whole transaction and consider their data invalid. You can hijack pre compiles if you're doing some cool new thing, or you want to replace a pre compile, or you just want to intercept addresses, maybe you only want to accept addresses that own a CryptoKitty. Forwarding storage is interesting.
00:37:24.970 - 00:37:53.122, Speaker D: As well, but I'm trying to keep this short, so please feel free to come up and bug me with that as well. Bug me with anything limitations. I don't currently have the jump desk checking for anyone who's done EVM stuff. Push ops have a really weird restriction for the EVM for security reasons and yada, yada, yada, it's not done, but it's easy to do, I just haven't done it. I also eat up four slots on the stack. These things are really important for this discussion. There's no gas metering.
00:37:53.122 - 00:38:18.906, Speaker D: It does cost more. So onto cost analysis. So to do a simple symbol of an ERC 20 contract, it costs about 60 times as much to run it through Lurch. Right now these will come down, but you see, like once you start having I don't want to point at my screen. That doesn't help you forget balance, for example, you see, it comes way down. That's because you're doing a read operation. And read operations are expensive.
00:38:18.906 - 00:38:33.410, Speaker D: The more expensive the operations are, the better your deal is. Which is why if you're doing a transfer, you see you're only paying 1.6 times as much to run in this. Yes, I think that's all. So haza.
00:38:41.130 - 00:39:19.442, Speaker A: Thank you. I think they all deserve a huge round of applause. And obviously, like Rick said, chat to them later over drinks and so on. Any questions? And collaborations and so on. So those are our six winning teams, but of course we also have all of the teams that have worked on these sponsor bounties. So what I'm going to do is get the sponsors up here, they'll announce the winners of their bounties and we're going to start with Ave. So, Jordan, come on up here.
00:39:19.442 - 00:39:36.390, Speaker A: Where is he? There he is. Oh my God, look at the jacket. Yes, very good. Oh, multitasking and fashion. There you go.
00:39:36.540 - 00:39:37.638, Speaker C: Wait, let's see.
00:39:37.724 - 00:39:40.054, Speaker A: Do you want me to hold the microphone for you?
00:39:40.172 - 00:39:41.154, Speaker C: I should have enough finger.
00:39:41.202 - 00:39:42.010, Speaker A: There we go.
00:39:42.160 - 00:39:50.650, Speaker C: Yeah. Okay, so I'm doing a paper, our friends there used to try that. So I will announce the winner of the Abbey bounties.
00:39:51.310 - 00:39:53.262, Speaker B: So I will start from the third.
00:39:53.316 - 00:39:58.430, Speaker C: One, it's called Flash Dash. So round of applause for Flashdash. Flash Dash.
00:40:04.130 - 00:40:06.894, Speaker B: Flash Dash is a dashboard to basically.
00:40:07.012 - 00:40:14.942, Speaker C: Get to know what's happening within a Flash loan. We have seen in the past weeks a lot of Flash loan, a lot of people trying to understand what's happening within those transactions.
00:40:15.006 - 00:40:19.800, Speaker B: Flash just help you to do that. Okay.
00:40:22.730 - 00:40:43.370, Speaker C: Let me post it and I will try another paper to another second one. So the second one actually you saw the yes. Nice. No one told me that. Okay, let me do this. Okay, Joe.
00:40:43.450 - 00:40:45.680, Speaker B: Later. Okay, so basically.
00:40:47.570 - 00:41:00.898, Speaker C: The second bounty. So flash won 1000 adai So actually it's a bit more because we deposited the die in the protocol at the beginning of the weekend. So it's still growing at the moment. The second bounty for 1500.
00:41:00.984 - 00:41:02.926, Speaker B: Adai is good ghosting.
00:41:02.958 - 00:41:19.400, Speaker C: So you saw the presentation. Round of applause for Good ghosting. Very nice. Very nice project. And the winner of the Avid bounties is DAJ, the time traveling tokens. Round of applause for them as well.
00:41:25.150 - 00:41:36.320, Speaker A: Thank you. Thank you. Next up, we have hold on, I'm doing the whole thing with we have Arno from Aztecs. There he is.
00:41:38.610 - 00:41:42.574, Speaker B: Thank you very much. Yeah, it was really good to see.
00:41:42.612 - 00:41:48.862, Speaker E: The whole number of teams that integrated with Aztec. The team that we've chosen is Quatly.
00:41:48.926 - 00:41:52.142, Speaker B: For the Sablier and Aztec integration.
00:41:52.206 - 00:41:53.454, Speaker E: And, yeah, they get the bouncy.
00:41:53.502 - 00:41:54.580, Speaker C: Thank you very much.
00:42:00.070 - 00:42:07.800, Speaker A: Awesome. Next up, we have Pipo. Kevin, come on up. Or Paul. There he is.
00:42:08.970 - 00:42:36.660, Speaker C: Thank you. So, first off, thanks to everyone who submitted for an award. We had 18 submissions, which was awesome. And we judged off of five criteria, which was use case, end user, motivations, empowerment, innovation and responsibility. So the three winners are and it was 4000 die up for grabs. So 20 00, 10 00, 10 00 are whoop together? Lakshmi and Lone Shark. So a round of applause, please.
00:42:36.660 - 00:42:46.340, Speaker C: And for all of the everyone who submitted, we've got a free huddy at our desks if you want to pop over afterwards, please do. Thanks.
00:42:51.510 - 00:42:59.160, Speaker A: Awesome. Next up, we have diversifying star query. Dan, where are you? There he is.
00:43:03.950 - 00:43:04.522, Speaker E: Thank you.
00:43:04.576 - 00:44:09.134, Speaker B: So I have the pleasure of presenting the diversify and starquare bounty for the hackathon. We have the pleasure of unveiling the first version of the API for our new starquare powered exchange. And we had some interesting project built on it. The first prize goes to Nabil and Osama for building a diversified telegram bot, which allows you to trade on the exchange from telegram like you have a broker, which is a bot. Now, we didn't see our API being used in kind of a significant way in any of the other projects, but we're going to keep our prize open for the next week, so we're going to keep our development environment up. So if any of you guys want to develop anything, second and third prize are still up for grabs, especially as our wallet connect and ledger integrations are going live over the next few days. If you want, feel free and contact us on telegram or all the resources available@diversville.com
00:44:09.134 - 00:44:11.760, Speaker B: slash hackathon. Thank you.
00:44:15.590 - 00:44:23.300, Speaker A: Thank you. Next up, taurus. Zen, where are you? He is running. He is arriving. There he is.
00:44:24.470 - 00:44:52.700, Speaker C: Hey, guys, thanks so much to everybody who integrated Taurus. We really like seeing the excitement over the weekend. It was a pleasure hacking with some of you guys. We have four prizes to give out. The best that goes to Lakshmi. They integrated Taurus with a smart contract wallet with Biconomy meta transactions, which basically used CDI interest rates to pay for the transactions themselves. Very interesting, very cool.
00:44:52.700 - 00:45:32.300, Speaker C: The next one is Patreon Dai. They used the key resolver to build a social application to fund people in a patron like manner. So that's the best social application. The next one is Poll US, which integrated Taurus using Discord to prevent civil attacks for voting applications. So that was very interesting as well. And finally, OneHop IO, which unfortunately couldn't get the smart contract Wallet gasless transactions out, but I guess they still integrated it as well. Thank you very much.
00:45:34.590 - 00:45:41.180, Speaker A: Thank you, Taurus. Next up, ENS Makoto. Let's do this.
00:45:44.190 - 00:46:51.860, Speaker B: Okay, so, ENS, in the past, we used to give prize to anyone who integrated to ENS, which was kind of too easy. So we kind of raised a bar a bit to more like, creating tools to enhance capability over ENS or hacking, extending or issue more domains. So we have three prizes. Fast prize for the $600 wasoba I think it is possibly is Radical Domains. And the second prize of $300 is Ping ENS. And the third of $100 is E Wallet. And I only comment on the winning prize of the what was it? Radical Domains is that have you guys know, like a radical markets book and there's a system called I don't know how to pronounce Harburger Tax.
00:46:51.860 - 00:47:22.970, Speaker B: Harvinger Tax, yeah, there's some radical Ways, which was originally actually like radical ways to basically have ownership on the property. And actually Vitalik kind of suggested to ENS team that our short name should do that. And we actually rejected his idea. But the team kind of came up with opting ways to make it only radical as people who's radical enough. So I would say this is like a better than Vitalik prize. So thank you to radical domains.
00:47:27.410 - 00:47:34.670, Speaker A: Thank you. And next up, we have Daphero with Denison and Drake taking to the stage.
00:47:35.970 - 00:47:50.114, Speaker C: Hey, Drake has arrived. If you saw the flyers, this is Drake. He's here. So this weekend we saw some really amazing submissions. We were really excited by seeing what people were building. We're thrilled. So keep it up.
00:47:50.152 - 00:47:51.346, Speaker D: We're here really late at night.
00:47:51.368 - 00:48:30.094, Speaker C: Well, I was drake wasn't here yet, but we had two prizes to give out of 500 die each. Both the winners, they were really awesome. So the first one was Co Tukin or Tukan, because they have a Tukan as their logo. Really beautiful. But the idea was really fantastic. They had figured out the carbon cost of solidity transactions in their contract and made a library so that your smart contract can offset its own carbon emission cost directly in the code. So not only did they use dapura to make a beautiful interface really blew our minds.
00:48:30.094 - 00:48:31.300, Speaker C: That was really amazing.
00:48:32.310 - 00:48:56.890, Speaker B: Yeah. And the second bounty goes to Nebulous. This team created a decentralized marketplace for purchasing, or renting, rather, the high end hardware used for PC gaming. Think Uber for PC gaming. So all from within the browser, you can select gaming hardware and play the game directly. They created a beautiful user interface and they powered the connection with Daphero.
00:49:03.890 - 00:49:13.360, Speaker A: I know you guys want to stay on stage, but you can't. And now the last one is the Ethereum Foundation. And welcome, Proto. Come on up.
00:49:18.130 - 00:50:00.350, Speaker C: So we had lots of different people working on Ethereum 2.0 during the hackathon. And I know it's like a very difficult challenge, it's difficult to get to learn Ethereum Two, but we made it really easy. We tried to have these people learn about Ethereum Two. They met lots of programs, and so we had to split the price pool in a different way. So instead of assigning, like, first place, second place and all that, we split it in four segments. So it's $1,000 each for each of the submissions they hacked on, protecting validator clients from the network, protecting from slashings and analyzing the Lipid P stack.
00:50:00.350 - 00:50:23.080, Speaker C: And the other remainder of the prize money goes to the ongoing challenges. So there's all these people who learned a lot about if two who tried different things have all these ideas, they started hacking. But we will continue the challenge online and then we'll be able to kick off this new bounty program and continue hacking. Thank you.
00:50:29.690 - 00:51:03.202, Speaker A: Thank you, sponsors. And of course, we're hoping that everybody had a wonderful time and you already started clapping and you know what's coming. It's going to be the four slides of sponsors that we must really thank for. You thought that was finished. It is not. So we must thank them because they make all of this possible. They help us be here together, having a wonderful time in a wonderful venue, being able to enjoy each other's company and food and comfortable places to hack in.
00:51:03.202 - 00:51:15.010, Speaker A: So let's go. Ave people. Starquare diversify. Orchids consensus. Liquidity Network. Aztec. ENS.
00:51:15.010 - 00:51:20.242, Speaker A: Biddler. One. KX. Taurus. Metapresent. DAP. Hero.
00:51:20.242 - 00:51:27.462, Speaker A: Pillar. AWS infura. Kickback. Acropolis. Endorse. DFI prime. TCL blockchain.
00:51:27.462 - 00:52:00.278, Speaker A: Ethereum london. Meetup group. Holy smokes. Okay. And of course, what ETHGlobal does really, really well, they tend to work with yearly partners to basically enable everything that we're doing, the community, the action that happens all over the world. So Aztec, Lendroid, people of Ethereum Foundation are the 2020 partners. And also what I would love to say is give yourselves a big hand.
00:52:00.278 - 00:52:47.726, Speaker A: This has been amazing, the energy, the quality of the project, the wonderful faces for all of our peoples and Tweets and everything. We also really appreciate. And I'm here with supporting the guys at East Global, and I think we all want to hear your feedback, what you loved, what you didn't, maybe share it in community. We would love to hear back from you and also find out whether we should do this again next year in London. What do we think? I think that's good. I think that's good. So what I'm going to do now is I'm going to let Kardik share a few thanks, a few stats and close this off and then we can head to the party.
00:52:47.726 - 00:52:50.298, Speaker A: Yeah. Sound good. Great cardik.
00:52:50.334 - 00:53:21.358, Speaker B: Thanks, Simona. So when I come on stage, it's usually the sign that we'll be done in the next five minutes. So you can clap about that, this exciting part. So what I want to do is actually just be serious for a minute. I want to thank a lot of people that actually made this event possible. There's a lot that goes into making this happen. You all get to experience the two and a half days when you come up here, but the behind the scenes work is kind of what we want to highlight for the next few minutes.
00:53:21.358 - 00:53:59.930, Speaker B: So I have a bunch of that and a handful of other notes. So with that, let's start with actually our mentors. These are the people that actually were available for this entire weekend in person, online, on Discord. And these are the people that made anything from unblocking people from their projects to help them just understand the basics of anything from solidity the workshops that conducted, to just being there to support people, especially the beginners and the intermediate developers out there. So without you, our mentors, this would not be possible. So thank you so much. Please give them a big round of applause.
00:53:59.930 - 00:54:46.442, Speaker B: This is the list of every person that volunteered this weekend. People took all these shifts the past few weeks. When we've working on these events, they kind of helped us out from being anywhere from local to helping out with all these things that we needed to do for making this venue work in this event possible. So these are 40 or so names that made all of this work. Thank you so much, all of our volunteers, for making this the best weekend for all of us, and we cannot thank you enough. Thanks again. And lastly, we rely a lot on our local organizers, so we want to particularly thank Men, Abel, George, Franco, Patrick and Simona for being super helpful for the Youth Global team.
00:54:46.442 - 00:55:01.054, Speaker B: Because when we come into a new city that we're not locals for, they help us anywhere from make not stupid decisions to guide us into making this a really good experience for all of you. So thank you so much, all of.
00:55:01.092 - 00:55:01.680, Speaker C: You.
00:55:03.810 - 00:56:18.534, Speaker B: And of course, the judges who saw 100 demos this morning without all of your hard work that I'm really glad that I don't have to do because deliberation and just figuring out how to actually put forward six teams, this would not be an event without all of you. So thank you so much to all twelve of the judges that gave us all of their Sunday and of course, everybody from the staff for this venue that made it possible, to the videographers, to the photographers, the catering service, the AV crew, thank you so much for making this work and giving us a really smooth event for this entire weekend. And lastly, the ETH global team. This has been one of our smoothest events in terms of logistics. And there's seven people on the ETH Global team that make all of this work. And I so want to particularly highlight Andrew, Heather, Emily and Jacob that were there for this entire time. This is one of those events where you may not realize this, but we pulled all of this in five weeks, so a lot was up in the air when we were figuring this out.
00:56:18.534 - 00:56:59.266, Speaker B: And I'm so excited to say that this is one of the best events we've done. So thank you so much and thank you, ETH Global. So back to the actual finalists. We saw six teams come up here on stage and they kind of talked about what they built and we saw some of the sponsor prizes. So the question is, what do the actual finalists win? If you've been to an ETH Global hackathon before, the thing about these events is that these are not competitions. We don't have a first 2nd, 3rd. What we really want to do is actually make this easy for other people to come here and experiment and keep on building and trying new things so we can actually move this space forward or actually help improve the developer platform in general.
00:56:59.266 - 00:57:37.574, Speaker B: And as part of that, the goal for the finalists is to actually just bubble up and highlight the really interesting and cool projects that we saw. And what we do is actually, instead of calling for a second 3rd, we actually consider all of them our first place winners. And what we're going to do is the finalists actually win $500 in ETH or Die. Every member on the team gets that. So that is actually the prize that every team is getting. So please give all six of those teams a big round of applause and some announcements. We are in London Ethereum London Meetup Group is one of the biggest Meetup groups just on the planet.
00:57:37.574 - 00:58:15.802, Speaker B: So if you are local, which we know 65% of you are in this room, please take a look at all the Meetup groups that are out here. There's the EEA Meetup group, the London Ethereum Code Up Group, and the Ethereum London Group as well. And there are some of these upcoming events on 11 March and 18th and the 24th. So please check out the Meetup groups here. And if you want to be more involved in the local community, this is how you get started. So this would not be an ETH Global event without an announcement of what's next. And this is our first event for 2020.
00:58:15.802 - 00:58:51.186, Speaker B: We have plans to do a lot more this year. And I am super excited to announce that the next event we're going to be doing is going to be Eat New York and Eat NYC. So we just made everything go public. You can go to NYC, eatglobal Co, and we'll be hosting this event in New York City on the 15 May. And we look forward to seeing a lot of you in New York. So with that, I want to just kind of wrap up and say that the whole point of this event is to encourage building an iteration. Some of you got to really amazing demos.
00:58:51.186 - 00:59:32.446, Speaker B: Some of you got to things 80% of the way. Please continue to work on them, because we really like seeing that, and we want to actually help you with this thing. So whether that's additional mentorship or grants or what have you, like any help you need, we're there to help you. But this whole thing is about getting you to keep on building and pushing this space forward. So with that, I want to thank everybody here for being here, giving us all of your weekend. I know some of you are super tired. This is definitely the last slide, and we're going to be thanking all of you by just a small thank you celebration right outside on the left in the restaurant area that's in the middle, right in front of the entrance.
00:59:32.446 - 00:59:37.300, Speaker B: So thanks again. Please give everybody a big round of applause, and we'll see you at the next event.
