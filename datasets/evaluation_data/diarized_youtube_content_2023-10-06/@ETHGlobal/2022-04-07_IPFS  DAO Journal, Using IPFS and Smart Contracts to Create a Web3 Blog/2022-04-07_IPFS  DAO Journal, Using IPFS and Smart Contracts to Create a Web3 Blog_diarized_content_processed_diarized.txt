00:00:04.450 - 00:00:04.806, Speaker A: Great.
00:00:04.908 - 00:00:27.150, Speaker B: So welcome to our session on IPFS and Dow Journal. You're going to learn how you can use IPFS and smart contracts to create a webtree blog with Girogo here. If you have any questions during the presentation, feel free to pop them in the chat and we can take them as we go or towards the end. Thanks Jerogo. I'll let you take stage.
00:00:34.300 - 00:01:24.916, Speaker A: Hey, hello everyone. I will share my screen. So today I'm going to show you how to do journal with IPFS and what content addressing can bring to you. So the first thing I want to go over quickly is what is IPFS? So it's decentralized file sharing network and the main way it works is by using content addressing. So I believe the best way to explain what it does is just by showing you. So I have an IPFS node running on my computer right now and the main thing I can do is add a file. So in IPFS you add we will have a different API.
00:01:24.916 - 00:02:12.328, Speaker A: I will show you another one later. So I basically added the Hello World file to my IFFs node that gives me this. This is CID or a content Identifier and that's the hash of the file. So if I go to C, so if I go to this website I can see how it break it down. And basically here we have the shared 256 hash of the file we are looking for. And what we can do is we can go on IPFS IO for example, which is a gateway gateway or servers run by people that let you access the IPFS network. We'll see later how we can use them in the app and basically we see the file Hello World.
00:02:12.328 - 00:02:57.456, Speaker A: And so what has happened in the background is that the gateway contacted my node and downloaded the file and hashed the content. And since the content is hashed again with the hash we can find here and we verify the hash, we always are certain of the integrity and immutability of the content. That means that I cannot get something else from this file is Hello World and it will never change. It's. Hello, world. And if someone tries to send me a me another file, the hash will be incorrect and then that will reject it. So what I have prepared for you already is some simple hopefully contract.
00:02:57.456 - 00:03:42.884, Speaker A: So we can ignore most of this. This is basically ERC 20 and token that we will be able to use for the contract and the part we are mostly interested in. So this you could technically just import the ERC 20 token from openc if you wanted or write your own. The path I'm going to teach you today is about how we can use CIDs in the contract and what can they do for us. So I already have a contract deployed here and the main thing it's going to do is allow us to create the block. So it seems like it's a lot of code. We are going to script through it.
00:03:42.884 - 00:04:38.480, Speaker A: Most of it is just the proposal and management thing. So the first thing we see how about I use the CIDs in the contract? Why we do that? So I want to have a block, a blog on the blockchain. So I want multiple people to propose article and then if enough people vote on the article, then the article get passed and it is published on the block. So there are multiple ways you could go about that. The way I'm going to use is I have an ERC 20 token which represent voting rights and I'm going to attach to these Ipfscids. The main reason I'm going to use Ipfscids is because as you can show, since they are only the hash, they are pretty small, they are mostly 32 bytes or so, a bit more. And what to do is I don't have to store everything on the blockchain if I want to have images or I'm just going to do text right here because it's shorter.
00:04:38.480 - 00:05:14.656, Speaker A: But that allows us to extend the trust we have. So we trust the dio on the contract and the di will give us the hash of the content. And since the hash can be used to verify the integrity of the content, we are going to use that to fetch the correct thing from IPFS. So I already have it deployed. The first thing I'm going to do is to create a proposal. So I don't know if we are going to have the time to fully get over this. I will send at the end a link to the code.
00:05:14.656 - 00:05:43.976, Speaker A: You will be able to see it. So the first thing which I'm going to do is I'm going to add the file to IPFS. So to do that I have a basic app set up. I'm not a JavaScript developer, I'm a backend one. So sorry if my code is a bit messy. But what I want is a way for people to upload things to IPFS. And since running your IPFS node can be a bit complicated, just too busy.
00:05:43.976 - 00:06:26.264, Speaker A: And to get started we are going to use Webfree Storage which is a service that basically they run IPFS node and you can send them content and they will host it on IPFS for you. There are other service like that pinata NFT storage infura. I'm just going to use this one because it has a 1 TB free and it's done by the same company that I work for, so I know it well. So the first thing we want to know is how to upload something. So again, like anything, we start at the Docs. You have multiple options, so I want to store a file. You have multiple options, very good.
00:06:26.264 - 00:06:59.430, Speaker A: One can the JavaScript client library. We are not going to use that though because it requires using webpack and I'm using browser refi in my setup right now. So we are going to use the Http client but if you understand the Http version, the JavaScript one is the same but easier. So you should not be feel left out basically. Yeah. So the thing I'm interested in first is yeah, so sorry, I want to get text form. So I don't actually remember how we do text form.
00:06:59.430 - 00:07:45.170, Speaker A: I'm just going to do a basic so sorry. The reason I'm doing this is I want for people to be able to write text and upload it to IPFS. I think I forgot to say why I'm doing this. So I'm just going to create a text box ID text and I'm going to create it a function on here. So I have a small setup where I can bind things like that for people that use react that was an unchained to you, sorry. But I'm doing it that way. So I'm basically getting the text box and I will add it a new function on here on click.
00:07:45.170 - 00:08:41.680, Speaker A: Okay, so basically if I just run which one is it? Okay, so if I build this and browse to here f five. Okay, we have the new textbook right here. It's not very pretty because I didn't organize things nicely. So I'm just going to make a div right here. Okay. I also want a button to upload. So I'm just going to steal this button and upload to IPS.
00:08:41.680 - 00:09:51.120, Speaker A: Okay. So I will get back to my JavaScript code and here I want my upload to IP access button and I just realized it's on the button that I want this. So here we can go to the webfree storage API and what I want to use is the upload right here upload point. So to do that we just look and here I will do something simple with a single file blob file object as dory so here. I have previously looked up the Mdn for some fetch reference. So method poor post, that's good. All of this node that I don't want the content blob file.
00:09:51.120 - 00:10:43.636, Speaker A: Basically what they said in this redirect no and no referral. Yeah, fine. And the body that I want, I basically want my text. So text value and so it okay. So one thing we also need to do is authenticate the request. So the way webfree storage do that is with JSON web token. So you can see here at the top authorization bearer and the token, you can get your token on webfree storage.
00:10:43.636 - 00:11:41.528, Speaker A: So you first log in. You can do it with GitHub or email and you can copy paste the token here, I have it here in my code and I'm going to basically add a new header which is why am I just let's be lazy. And I'm going to add my API key. Okay, so I will first check that this oh I need a and one point is upload and so I will first check that this works. Hopefully. So yarn build. Okay, so test file.
00:11:41.528 - 00:12:09.412, Speaker A: How's the console open? Okay. Did I forgot? Yeah, I forget to link my script. So just script. Scriptur. Yeah. Main JS. I believe that the name.
00:12:09.412 - 00:13:07.140, Speaker A: Yeah, I need to rebuild it. Okay. Upload is no, what I did something wrong? Upload to IPFS should be good determinant by ID. It has the ID upload to IPFS waiting. So why I'm curious why just if I did this instead? Upload. Oh, I will just check what they did in this. No, it has mostly the same thing.
00:13:07.140 - 00:14:10.730, Speaker A: Type it on ID. So I will double check what's in the browser, inspected ID upload to IPFS, what documents and it finds it here. Well, I'm confused. If anyone has a solution, it's a free Internet point. So I'm not worth something, but I'm surprised. I know I'm not the best front end developer, but I did not expect it to be stuck on something. So it's not really why.
00:14:10.730 - 00:14:55.620, Speaker A: Okay, I will just so I had some referrals that did something similar and what was the oh, no. Okay, I know, it's just I have to load the script after the button and we'll be fine. Okay, well, is it doing okay? So it seems. Oh, it's doing something. Promise. Forgot to await. Always await response JSON.
00:14:55.620 - 00:15:28.796, Speaker A: Okay, so we successfully uploaded something to IPFS. So I will repeat what I just did. So basically I simply created some text input and an upload to IPFS button. Then it is as easy. I call the API. The API web free storage. The web free storage API.
00:15:28.796 - 00:16:31.152, Speaker A: I just pass it my file, the right content type, the authorization, the authorization, which is just the key, the API key you can find on your icons. And I pass as body my itext and we get our CID back. So then I will try to make a new proposal. So just so for the new proposal, the interface I come up with, we are going to see how to interact with the contract, but just to fetch the feed because it's going to be simpler and more visual. So I basically have a create proposal function that I can send it a CID and we should see it on Azure scan after. Okay, trans confirmed. And so right now if I go to my Get proposal, I can get the proposal number zero and we see my proposal.
00:16:31.152 - 00:17:31.080, Speaker A: So basically the get proposal function returns the writer, the CID, the vote count as a creation date and I'm going to vote on the proposal. So on the different function I have created, we have this vote one, which is kind of it has lot of code, but that's actually far simpler than it looks like. So the vote is going to be I want to vote on zero since I have all the tokens. The way I have configured these contracts, which basically half of the token need to vote yes. And I have all the tokens, so it will be done. So, okay, new transaction and we will wait on the terra scan or I guess no, we can look at this. So now if I look at my feed, if I look at the feed count, we see it's one.
00:17:31.080 - 00:18:12.148, Speaker A: So I have one item in my feed and I can feed the item at index zero and we see that it's zero. So basically, the way I wrote the contract, we have two mappings, the mapping of feed, which is the actual things in the block that we need to display and what we will get around doing shortly. And the proposals. And the proposals. The idea is like, you can have proposal hold in the proposal IDs and that just points to the ID, to the proposal. So here we check feed ID zero, it gives us zero. So we need to check proposal zero.
00:18:12.148 - 00:18:43.948, Speaker A: And we see that proposal zero has a vote count of whatever this is the CID. So what we are going to do right now is fetch the feed and fetch the proposal. Yeah, basically. So I have a function updated. All of this around is mainly plumbing logic, so it gets updated from time to time. So I have diff feed. And for each entry in the block, I want to fetch it and add it to the feed.
00:18:43.948 - 00:19:37.730, Speaker A: So the way I'm going to do this okay, do I have feed in? No, I don't have feed. So I will create my feed object. So the first thing I want to do is get on my di object. I want to get the number of feed. So the function for this is feed count. So I'm using web free right now, the web free JS API. And to do that, it's basically I believe it's just and I just do which do is an object of the contract with address method, feed count.
00:19:37.730 - 00:20:26.050, Speaker A: And I want to call it and I want to await that. Okay, just checking that I'm not getting something easy wrong. Am I at least getting the number of feed in this? It's not the right page, this one. Okay, I connect to MetaMask. No, that's my I need to move it here and next. Okay, so I'm going to connect oh, I just connected my bad console. I want it on the right.
00:20:26.050 - 00:20:54.612, Speaker A: Perfect. So we see the feed. So that means the web3 is working. So now we just need to get all the items to add them to the feed. So for oh no. So this function is going to be called multiple times every time there is a new block, actually. So I don't want to refit things I have already fetched.
00:20:54.612 - 00:22:10.160, Speaker A: So I'm going to keep track of last vid index zero letter while feed while the number of item in the feed is last is smaller than what it was last time. I'm going to continue doing this and I'm just going to do plus plus at the end. So now the function I want to use is feed one and I want to pass it the current index. So I'm going to const proposal ID. So that's just by the way I've created my contract, it needs to work that way. So I'm getting now the proposal ID from the list of it and now from this I want to get the actual proposal and the proposal is going to be get proposal and it's going to be the proposal ID to ensure things work. As always, we are going to log the proposal.
00:22:10.160 - 00:23:21.960, Speaker A: If I connect to MetaMask should be working in the background. Is it? Well, am I calling? So what am I doing with updates? Ah, okay. Schedule update should be on M. Actually just shortcut this because that's going to be easier to reason about. So just update, I want to do an update. Okay. Now I'm going to actually comment that line on headers.
00:23:21.960 - 00:24:23.790, Speaker A: Okay, well, so now I connect to MetaMask and it should schedule an update in a few seconds, hopefully. Well, okay, so debugging time again. Sorry. So the first thing I'm going to check is am I actually coming here? Which should be good because last time we were here. So in update feed and am I actually getting my proposal. So proposal idol already logging in. Oh, my bad, I got it the wrong way around.
00:24:23.790 - 00:25:15.100, Speaker A: I was checking that basically if I had new proposal, I wouldn't run, which is the other thing I wanted to do. I wanted to run this loop while I have proposals that I don't know about yet. So I'm just going to return to this because it was working schedule update. So by the way, for those who want to know, the schedule update function is just some race logic, some locking logic to prevent that. If this function is called multiple times, for example, say in multiple block in a row, there is not multiple execution in flights of update feed. So I already have one and just so else one will run, fetch the update and start to fetch the first feed. But then a new block arrives and another one starts.
00:25:15.100 - 00:26:09.708, Speaker A: You could have two function in slide that are actually fetching the feed, fetching the same thing. Okay, so it works and we have the object right here. And what I want to see is the CID. So I have the CID right here and I'm basically just going to add it to I'm going to fetch it again with fetch and I'm going to add this content to my list of feeds. So to do this, I'm going to use a gateway. So there's reasons security concern about using gateway, mainly that the hash checking is done on the gateway side. And that means that since the gateway checks the hashes, the gateway can send you wrong data and your browser wouldn't know we have some work currently being done.
00:26:09.708 - 00:27:03.328, Speaker A: Where the gateway? Instead of returning you the file you are asking for, it actually returns you the IPFS blocks and then your browser can check this feature. However, this feature is not yet released in IPFS, so I couldn't use it with public gateway just because public gateway are not running that code yet. Const body await. Fetch what I want to fetch now it's gateway plus the proposal one. Because if I go right here one was my CID. Now again checking that things work await body res, I believe. Or is that python same again to save me again.
00:27:03.328 - 00:27:47.210, Speaker A: So I don't want a response JSON, I want a response object. Okay. I want response body. Okay, so that's res actually res, is it? Oh no, it's text. I remember now. Or is it wait, yeah, it is right here. Okay, well this should hopefully work.
00:27:47.210 - 00:28:18.736, Speaker A: Now I have to get back here. So now I connect to MetaMask and we get test file. So remember what the code do. So the first thing we did is we used this add to IPFS function. I don't remember where I put it. Okay, so we use this code to upload to refrigerator storage. That gives us the hash of the data, which is the fingerprint of it and allows to keep the integrity of it.
00:28:18.736 - 00:29:00.060, Speaker A: Then we publish that hash on the blockchain in this transaction. No, this one was about contract and so we publish the hash onto blockchain and it's not going to be able to decode it for me, but oh no, if I do utf eight, I can show it. So here we have the hash onto blockchain. So what's good here is test file is pretty small and I wouldn't really need however, if I put a lot of data here and I upload it to IPFS, it has been sent. Yeah. And I have my CID. I make a new proposal.
00:29:00.060 - 00:29:33.304, Speaker A: So I create a proposal, then I will want to vote on it. So I know it's going to already have the ID one. So I'm going to send the transaction already. The only thing I'm sending on chain is the CID and the CID is very small. And so again, that allows us to keep this chain of trust. So we trust the dio and the dio give us the hash of the content. And so we know that the content is good.
00:29:33.304 - 00:30:07.910, Speaker A: So if I connect to MetaMask test file and I get my big content while I don't have to store that on IPFS on the blockchain. Sorry, since install on IPFS now we should get to display those journal. Yeah. So where is my update feed function? Right here. And instead what I want to do so don't do that, it's unsafe. So basically what I'm going to do right here eventchild. Okay, wow.
00:30:07.910 - 00:30:58.020, Speaker A: Okay. So I'm going to take my feed element and I want to append child P and its inner text is going to be. So basically this is unsafe because I'm just taking the check the text from the blockchain, from IPFS. Sorry, but the blockchain give us the link to IPFS which give us the content. And I'm putting it in our text. And that could allow people to execute code on our site because if this contained code in inner text, it will see this, it will parse the JavaScript and start executing it. If you want to solve this, you need to use an escaping library or use a framework that doesn't have those issue like react.
00:30:58.020 - 00:31:45.136, Speaker A: Then it should be fine. The argument what is not an object? What am I giving wrong? Okay, so first on okay, I create my p on the document. Document create element p. Then I do p. Okay, that's just web. So now I click connect to MetaMask. It's going to start fetching from the blockchain to hashes and it's going to start fetching them and adding them to the page.
00:31:45.136 - 00:32:17.800, Speaker A: It should oh, but I believe is my feed. No, the feed is not hiding. Why? Okay, so let's debug this. Why did go wrong? Is feed something? Does feed exist? Well, yeah. Oh, I don't fetch the right thing. I need to fetch the feed, not the text. I was adding my post to the fetch.
00:32:17.800 - 00:33:03.964, Speaker A: So connect to MetaMask. And here we have our two posts. So this is very ugly, as you can guess. But I will leave you the work of making that pretty. We're going to maybe try to make that a bit less awful by adding I don't know with the address. So we can get this from proposal zero, I believe. Then it and here we see the different code.
00:33:03.964 - 00:33:50.510, Speaker A: So we see that my address has created this post and the post. So I will go again on what we are doing for last time because it's important. We are keeping the trust from the do contract, which is on the blockchain, and we use IPFS as a way to find the content. So the DL contract gives you the hash of the content, which tells you basically what the integrity of it must be at the end. And then we use that to be sure that we fetch the right thing. And what's nice about that is we can use many different actual services for this. So right now I'm using Webfield Storage because that's very easy.
00:33:50.510 - 00:34:33.384, Speaker A: But you could use other things. So for example, Webfield storage is a way to view my files. So what I wanted to show you is just the files. Okay. So I have my file here and Webfree storage does replication on filecoins, for example. Oh, well, this one has a lot of replication, but WebID storage runs their own cluster and run and replicate on filecoin. Some others have Lighthouse storage, for example, which is another thing.
00:34:33.384 - 00:35:03.692, Speaker A: So they also do on ITFs. Oh, wrong link filecoin. Can I found this, for example, filecoin. So Lighthouse Storage is a protocol that use Filecoin to replicate the files forever. And they have their own protocol on top of it that you can access from the blockchain. For example, you can use Pinata, you can use infira. And so the point of it is, like ICFs doesn't lock you in in a solution.
00:35:03.692 - 00:35:50.080, Speaker A: So right now the solution I've used to host my File is webfree storage because it's very convenient, but I can also just take the CID and pin it to my node. And I can do this right here, for example. So I want to get the proposal one. I see the CID right here and I can do IPFS pin. And here I see that I have been the CID. So now instead of just webfield storage, hosting the CID, I have the CID on my node and on webfield storage. So you will imagine that if you were using this for real, what you will have is people on the Dao will run some software that automatically pin the different articles that are created.
00:35:50.080 - 00:35:55.590, Speaker A: Yeah. Do we have any question or something that people want to see?
00:35:57.080 - 00:36:06.500, Speaker B: We're just a bit short on time. Maybe we can take one question someone asked is there a good place to refer for real examples.
00:36:11.820 - 00:36:17.450, Speaker A: Real example of IPFS usage or something more particular?
00:36:18.700 - 00:36:23.470, Speaker B: Maybe, billy, I can unmute you to ask.
00:36:23.920 - 00:37:09.130, Speaker A: Yeah, so to do that we have which has a bunch of different platforms that use IPFS. The main example that comes to mind is the NFT community, for example, which use IPFS links. There is not only IPFS, but IPFS is very widely used. So they use IPFS to store bigger content because you cannot pass a GPEG on the blockchain, because just the storage on the blockchain is very expensive. I can send you that link. You can find multiple one. Yeah, exactly.
00:37:09.130 - 00:37:27.440, Speaker A: That's why IP address is so good. The contract addressing part allows you to use whatever solution you want and it allows you to move from the really expensive place to something that is really cheap, like Filecoin, for example, or Pinata or whatever you want. Great.
00:37:27.510 - 00:37:38.320, Speaker B: Thanks, Gerogo. We do have a few more questions. What I can do is pop them in the discord chat and you can answer them async and yeah, thank you so much for your workshop.
00:37:39.780 - 00:37:48.600, Speaker A: Well, thanks. Good luck on your projects, everyone. Bye.
