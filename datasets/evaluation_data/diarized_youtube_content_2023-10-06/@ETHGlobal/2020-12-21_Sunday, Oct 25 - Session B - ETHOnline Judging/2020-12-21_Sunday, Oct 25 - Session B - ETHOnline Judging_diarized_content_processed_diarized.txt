00:00:00.410 - 00:00:32.760, Speaker A: It. Welcome, everybody, to ETH Online judging day two. We've had an amazing month of hacking and learning from people all over the world. 65 countries, 700 hackers, one K applications. It was our biggest online event yet, and we're really happy with how it came out. We had over 175 projects actually submit, and today we're going to actually be seeing what a few of them made. So just a quick overview of what the format is.
00:00:32.760 - 00:01:47.520, Speaker A: As you are all probably aware, it's four minutes for the video demo, four minutes for questions and clarifications from the judges, and then we'll take a ten minute break. Halfway through, we have, I believe, twelve projects for this session. So right after the 6th one, we will so what is the criteria for judging today? Five different areas that the judges are going to be looking into, which is technicality originality, how useful something is for just regular people, or how simple the project is, UI UX, how people use it, and then the wow factor, which is the wild card area. If you bring something unique or really unheard of, that's what the wow factor is. So one thing we just want to remind people of is that this is not a competition, though there are prizes involved, obviously, and you can win some money. The majority of people are here tend to learn and really get something bigger out of it, take it beyond the hackathon. Not every project is necessarily trying to raise funding or become a business.
00:01:47.520 - 00:02:32.080, Speaker A: Many people are here to get feedback and just really dive into web3 ecosystem and ethereum generally. So just keep that in mind. Judges are here specifically for that purpose. And speaking of judges, we want to introduce our three wonderful judges that have joined us for this session. First is Patrick McCorry from Anydot Imran Khan from Bold Capital and Arjun bology from Paradigm. They're going to be doing the hard work of giving you feedback, really drilling down into what your concept is, and we're very fortunate to have all three of them with us today so we can move right into demos. Now is the time.
00:02:32.080 - 00:02:43.920, Speaker A: So the first team up is Yield Curve. So let's get Max promoted and he can start sharing his screen.
00:02:52.630 - 00:03:00.742, Speaker B: Hi, everyone. So in the previous room, when I shared my screen, they told me that they were going to have to play the video for me.
00:03:00.796 - 00:03:07.640, Speaker A: Yes, I can do that. I'm just seeing the note now. I will pull it up right now.
00:03:23.170 - 00:03:57.858, Speaker B: Hi, everyone. This is Max with the Ethereum Yield Curve here to show off our project, which is an abstraction on top of ave a tokens. So our project allows users access to fixed income investments through zero coupon bonds, which is just a bond that pays out a specific asset at a specific maturity at a rate of one to one. So each ZCB token is equivalent at the maturity date to one of the underlying asset. So let's hop into this diagram. So we have ZCB on ETH that matures on January 1 of 2022. And on the left we have Alice, the credit trader.
00:03:57.858 - 00:04:35.470, Speaker B: And on the right, we have Bob, the fixed income investor. So Alice thinks that the money market rate in Ave will be higher than the current rate at which ZCBs are selling against ETH. So she believes that she can profit if she is to sell ZCBs on the market. So in order to do this, she has to deposit a tokens as collateral into the ethereum yield curve smart contracts. And in return, she has minted ZCBs, which she can sell on the uniswap. It's important to note that when she deposits collateral, she will continue to generate the yield that is begotten by that collateral up until January 1 of 22 22. And then on the right, we have Bob, the fixed income investor.
00:04:35.470 - 00:05:00.406, Speaker B: So he just wants to lock in a fixed rate for a fixed period of time. He likes the stability, so he takes his ETH and he goes onto the uniswap market and he buys ECBs. And he knows that he can take that rate to the bank. He knows that he will be able to exchange his ECBs one to one for ETH at the maturity. So let's go and look at what a yield curve looks like. So this is a hypothetical yield curve for ETH. Right now, this product is just on Covan.
00:05:00.406 - 00:05:26.230, Speaker B: So this is just a projection of what it might look like. But as the market starts to project ETH 2.0 and staking to come online, yields start to pick up. Okay, so let's go through the process of what it would look like to actually sell some bonds. So you've got some Ae. And what we need to do first is wrap it and put it in a form which our other contracts can interact with. So we will get a wrapped A etherc 20 token back.
00:05:26.230 - 00:06:06.014, Speaker B: Let's just wrap 1.0 A E. And I've just confirmed the transaction on MetaMask, though you won't see it because OBS is only capturing my browser. This will just take a moment. And one of the very important things to keep in mind about this project is this puts DeFi on full display for institutional investors and anyone who's been skeptical. Well, now it's very compelling for them to get into DeFi, as the yields, plainly put, can be compared right next to the yields of traditional finance. And the yields from traditional finance, to say least, leave something to be desired.
00:06:06.014 - 00:06:49.166, Speaker B: And I think this project hopefully can bring about the next wave of capital inflows into DeFi. All right, so now let's go ahead and let's deposit our wrapped Aeth. And let's deposit one. Okay, so I have just hit confirm. So just take a moment, and before you know it, we'll have some bonds, and then we're going to go on a uniswap and we will sell the bonds and see what that looks like. All right, we've got it. So we've got a little more than one Azcd and well, the reason that we've gone over one is because Aviatokens generate yield as time goes on.
00:06:49.166 - 00:07:09.350, Speaker B: So yeah, sell bonds against your collateral. Now we're taking uniswap. Okay. So I preloaded these two tokens in here, which Uniswap doesn't recognize, but that's okay. So if we want to sell just a bit, let's say we just want to swap 0.1. Okay, now we're going to swap.
00:07:15.770 - 00:07:16.134, Speaker C: Okay.
00:07:16.172 - 00:07:21.130, Speaker B: So, yeah, we can see that we have sold 0.18 ZCB.
00:07:25.310 - 00:07:28.886, Speaker A: Seems like that cut off at the end. Was that the proper ending?
00:07:29.078 - 00:07:31.120, Speaker B: Yeah, I had to fit it in four minutes.
00:07:31.650 - 00:07:32.014, Speaker A: Okay.
00:07:32.052 - 00:07:40.000, Speaker B: I just said at the end something about ZCBs. I was just saying we sold 0.1.
00:07:45.700 - 00:07:46.908, Speaker D: Should we ask questions now?
00:07:46.934 - 00:07:49.380, Speaker A: I've got one. Yeah, it's on to you guys now.
00:07:49.450 - 00:08:05.930, Speaker D: Yeah, maybe there's like, me being a bit ignorant around financial assets. So zero coupon bonds, they don't normally pay any interest. Normally you just buy something on the cheap and then over time it gets released, then you get the asset. So how does the yield work here?
00:08:06.380 - 00:08:25.656, Speaker B: Well, yeah, so depending on what you pay for it, you can derive the yield. So let's say you buy a ZCB that matures one year away from now at 0.5 of the underlying asset. That would imply a yield of 100% because in one year you will be getting double what you've paid to get the ZCB.
00:08:25.768 - 00:08:26.044, Speaker A: Okay.
00:08:26.082 - 00:08:31.810, Speaker D: So it's based on the accurate value at the end. So you sort of just estimate or predict what the yield is going to be?
00:08:32.260 - 00:09:21.102, Speaker B: Yeah. So that allows the market to have a prediction on what the underlying money markets rates will be over time and it allows traders to arbitrage. So if they think the money market rate is going to be higher, they sell ZCBs S or vice versa. What was the hardest part about working on this project? I think actually the front end was probably the hardest for me. It was actually my first time using React, so that was probably the hardest part.
00:09:21.156 - 00:09:24.320, Speaker D: I feel European bad up. I've had to use React this year.
00:09:29.090 - 00:09:36.610, Speaker E: What interesting extensions do you think Ave could make to the protocol to make constructing products like these easier?
00:09:37.190 - 00:10:08.720, Speaker B: So I think that the main use of Ave right now is we just use it as a money market and it's really just another money Lego that will allow DeFi to mature. So Ave really just underlies everything that this project does. Without Aave, we wouldn't even be able to function. Just the basic generating yield function. That's what we use Aave for. We just use Aave to generate yield without the users really having to think about it.
00:10:10.130 - 00:10:28.850, Speaker D: I have one question. I guess so obviously the UX still has much to be desired. You've got a bunch of fields that are populated going forward. How do you think you can make this more user friendly for, let's say, finance newbies like myself, where then I'd actually just want to go and participate in this market and get my yield.
00:10:30.170 - 00:10:58.426, Speaker B: Yeah, so definitely UX is something that we're going to have to improve on. You know how I had something where I had to wrap my Aeth first? I can get rid of that. I can actually put that in another contract. You'll have less buttons, and you won't have as many fields of information popping up once I just get rid of that. So that's just something that I had here for this hackathon because I was kind of pushed rush for time or.
00:10:58.448 - 00:11:06.000, Speaker D: Like, I don't know, like diagrams or something you could put on it where it would help me understand the two side of market a bit better. How that? I gauge of what I should buy.
00:11:07.830 - 00:11:56.720, Speaker B: Yeah, I'll look into that for sure. What are some features that you'd like to add that you didn't have time to add? So I'd like to add tranching so that if at the maturity, for whatever reason, something were to break and we weren't able to get our yield back, you could actually kind of token out that risk. Tokenize out that risk by putting bonds of different tranches. So that just means that the highest tranche, so the senior tranche would get paid first, and then whatever isn't paid to the senior tranche would go to the middle tranche. Then if there's anything left over, that would go to the lowest tranche. So just kind of tokenizing risk. I think that's a big application of this project in the future.
00:11:56.720 - 00:11:58.900, Speaker B: Cool, thanks.
00:12:05.700 - 00:12:18.100, Speaker A: Any final comments? All right, I think we are going to move on to the next project. Thanks for being the first presenter, Max. That was great. Thanks for sharing, Max.
00:12:20.360 - 00:12:21.444, Speaker B: Thank you.
00:12:21.642 - 00:12:50.160, Speaker A: All right, next up is audit protocol, and I believe Swarup and Animate have already joined, so I'll let you guys start. Hey, everyone. Hi. This is Sarup and my co founder Anamit. We work at Powerloom for ETH Online. We decided to work on audit protocol. The idea behind it is to build a verifiable audit vouching solution for businesses.
00:12:50.160 - 00:13:49.840, Speaker A: We're using Ethereum and filecoin protocols to back the data and the proofs behind it. So just to give you an overview of how it works as a developer or a business, you simply use our API to submit a payload. We encrypt that document or string and store that on filecoin. The proof of the document, which is in this case a hash of the resulting document, is also stored on the Ethereum smart contract. This actually allows us to sort of generate an event, and this can be an entire stream that offers a chronological view of accounting records. Under the hood, we're using a Python backend with Fast API and a few microservices that talk to both protocols there's a very simple front end UI that I've built to show this demo. But primarily it'll be used using an API.
00:13:49.840 - 00:14:19.288, Speaker A: We use Matic Mainnet to store our proofs using blockvigil's API Gateway and Powergate Textile Powergate to manage our hot and cold storage on both Filecoin and IPFS. All right, let's get to the demo. Okay, so I have a bunch of things running here. So we simply create an account right now for the purpose of the demo. So you get an API key. That's what you'll be using to talk to the API. Now let's try to submit a payload.
00:14:19.288 - 00:15:06.984, Speaker A: So I have an example here, which is just a sample of invoices or like some sort of a transaction list in a CSV. So I'm going to just copy that, take that payload here and hit submit. So at this point, what happens is we're submitting the job onto Filecoin. Our deal watchers are actually watching for the job to be completed. But from a perspective of hashing, we already committed that onto the blockchain, right? So I'm just going to go step by step. So this is the transaction hash of the data that was committed. So what we're doing is we're taking that payload, doing a Ketchak hash on that payload, and committing that to this very simple smart contract.
00:15:06.984 - 00:15:39.860, Speaker A: So you can see here the payload hash that's been generated against the API key hash. So meanwhile, the job should have been completed. Sometimes it gets done faster, like in this case. So you can see the entire process that's happening. So if we actually check here so it should have gone to stored, right? So I'm also going to show you when it actually fails. So intentionally, for anything that is a small payload, we are not storing that and that actually fails through. Let's take a look.
00:15:39.860 - 00:16:11.532, Speaker A: If you actually come back here, so you'll see that the storage has failed, right? If the company or the developer wants to download their payload, right? So they can actually make a request. So this is what the UI sort of does behind the scenes. So you're going to make a request. So we check here and if the payload is ready, then we'll be able to download that payload right away if it's been cached. If it's not the case, we will send them an email and they'll be able to request that. They'll be able to either fetch that through the API or through the UI, right? So we can just click here. We can see that the payload exists.
00:16:11.532 - 00:16:40.250, Speaker A: Let's actually make sure that this is the hash that was actually committed, right? And as you can see here, that's the KCHECK hash and that is what the payload was committed, right? So this is how we can ensure that the timestamp which you can actually see an event that was generated for this record, this is the timestamp, right? So this is the proof that the audit log was done at a certain point of time. Yeah. So that's our demo.
00:16:47.180 - 00:16:56.796, Speaker D: I can ask a question. So you mentioned at the start that there was some encrypting off the document, but it looks like in the example, there's no encryption on the document that.
00:16:56.818 - 00:17:10.528, Speaker A: You downloaded, so we actually decrypt that for them. So we're using, like, textile buckets to do it. But the company can also encrypt the payload if they don't want to send us the plain text. Yeah.
00:17:10.614 - 00:17:32.520, Speaker D: I've got, like, two further questions, I guess. One question. One comment. One question is what sort of companies do you foresee wanting to use this? I imagine for some companies, there may be some regulatory concern that they're storing encrypted documents on a peer to peer network, and biggest decrypted is really bad for them. And then I guess that's the question first.
00:17:32.670 - 00:18:04.048, Speaker A: Yeah. So that was the reason why I mean, for the demo purpose, I didn't want to play with an encrypted payload. It's hard for people to understand what we are storing, but we mostly see companies wanting to not give us in plain text, and even if they do, they can probably host this on their server as well. So it's open source right now if they want to run it on their end. But it is a challenge for since we're dealing with secure data here, since it literally called the audit protocol, it's something that we will have to ensure that they don't store.
00:18:04.214 - 00:18:04.736, Speaker F: Yeah.
00:18:04.838 - 00:18:07.956, Speaker D: So this is my comment, and this is a comment that everyone else thank you.
00:18:07.978 - 00:18:35.820, Speaker A: That's great of I'm sorry to interrupt. I'm sorry. I'm just another of the teammates of Swaroop. Hi. Yeah, I just wanted to say the merkel proofs, right? Like, we'll be mostly taking a hash of chunks of these payloads because they're going to get appended like a log event. Right. So we do not actually need to keep exchanging the entire plain text data.
00:18:35.820 - 00:18:40.350, Speaker A: Most likely it will be bits and pieces of merkel proofs that will be moving around.
00:18:40.960 - 00:19:04.410, Speaker D: Okay, yeah. I guess my only comment would be, normally with audits, you want to prove something about the information to an external party. So there's a lot of these protocols around, like proof of reserves, et cetera, where you use snarks to prove meaningful information about something. Maybe there's something you could look into in the future. So there's an audit going on because you're proving something without revealing it. That'd be my comment. I'll let the others take over.
00:19:05.180 - 00:19:07.000, Speaker A: Yeah. Thank you. Patrick.
00:19:08.940 - 00:19:19.710, Speaker B: What are some use cases that you'd like to see companies use out of audit protocol? As you were envisioning building this product out, what were some of the use cases that you're thinking about as you're building this up?
00:19:20.400 - 00:20:04.740, Speaker A: Yeah, so we've been talking to companies even especially we've been in the blockchain space for, like, three years. So this came out of an idea because we've been providing APIs for a long time to non blockchain companies. How do they use blockchain? Right, so when you look at the traditional sense, they use a lot of third party tools and middlemen, which they can totally eliminate if they actually want to do this right now. Right. So primarily, I think we will first target financial companies because it makes the most sense and to begin with, because there's a bit of that blockchain element that even though we don't try to say that when we give the API out, we want to make sure that they can actually use it. Right. So we'll first talk to even like, centralized exchanges.
00:20:04.740 - 00:20:13.230, Speaker A: They're trying to store a lot of data right now and then sort of move on to traditional companies who are just storing any kind of financial, non financial data.
00:20:17.240 - 00:20:18.470, Speaker B: Cool, thank you.
00:20:18.920 - 00:20:19.670, Speaker A: Thanks.
00:20:20.140 - 00:20:22.968, Speaker B: How did you guys decide to use.
00:20:23.054 - 00:20:25.370, Speaker A: The sort of Matic L2.
00:20:27.660 - 00:20:27.928, Speaker B: I.
00:20:27.934 - 00:20:30.836, Speaker E: Guess all of the different components of your stack.
00:20:30.868 - 00:21:04.500, Speaker A: I'm curious what the motivation is. Yeah, like I said, we've been building blockchain APIs for about two, three years now. So we wrote Ethereum only and then we launched with Matic earlier this year. So we sort of power their entire infrastructure at the moment. So we have seen their scale and what's possible. And also because the gas costs are so high, if we were to do this live demonically main net today, that's precisely, I would say the number one reason was to use an L two. Great.
00:21:04.500 - 00:21:20.330, Speaker A: I think that might be time for this project. There's not any final thanks for presenting. Thanks. Next up is molecule protocol. And I think we just have Calvin here. So I'll let Calvin start.
00:21:21.340 - 00:21:26.510, Speaker E: Hey, from the green room. I wasn't able to share the video.
00:21:26.960 - 00:21:29.500, Speaker A: I am playing your video. You are awesome.
00:21:29.650 - 00:21:30.636, Speaker E: Thank you.
00:21:30.818 - 00:21:39.410, Speaker A: Get that pulled up now and we will get started.
00:21:45.300 - 00:22:12.820, Speaker E: Hi. This is Kelvin Pack. I'm presenting for Team Maximus a teammates, including the Fazon and Andrew Bust. And we are presenting the molecule protocol. Right now. A token can be transferred to a sender and recipient on a Dex or marketplace without any restrictions. What if we want to validate both sender and the recipient? We look at the security token, standard composable token, ASAP protocols for inspiration, but we want to do something simpler.
00:22:12.820 - 00:22:39.996, Speaker E: So what are molecules? Molecules are unique. ERC 20 and 721 combos. It's very similar to a chemical reaction. Molecule protocol enforces a token combination for both sender and recipient in order to approve a transaction. This is an example of a molecule structure. And let's look at a case study with KYC. Right now, you have two choices on centralized exchanges, they will take care of your KYC and compliance and install in a centralized database.
00:22:39.996 - 00:23:27.792, Speaker E: They control your private key and charges you a lot of fees. On a Dex, you control everything, but it's not compliant. So what if your KYC approval can be stored on chain? Now your wallet is compliant and tied to your identity, and you can still retain full control with your private key and not pay expensive key fees. With Molecule protocols, compliance can be enforced in all subsequent transactions, so user can participate in DeFi without having any blockchain knowledge. By creating a POTUS account which creates Ethereum Wallet address, go through KYC, get approved by Bloom now we mean a UFC 721 Token representing your KYC. Similarly, for other legal docs, for real assets, you can do the same approach. So there are two different ways we can implement this.
00:23:27.792 - 00:24:04.008, Speaker E: One is through an extension, adding a new compliant transfer from with the Molecule Smart Contract address as additional paran. But this will require changes to all existing assets or implementation of the wrapper. So the other way is to inject a check in all decks and marketplaces so we can validate. So the process of creating Molecule protocol is pretty simple. One is to define all the Molecule structures. Here's a schema for doing that. And then once you've done that, a validation smart contract.
00:24:04.008 - 00:24:51.704, Speaker E: The Molecule Smart contract will be generated and deployed. And now when you list your asset for transfer, you will specify the compliance requirements, and it will be enforced by the Molecule protocol. So here's a live demo. Let's create two ELC 721 tokens because this is what I defined in the Molecule Smart contract. So we are launching two different ERC 721 contracts. And now let's launch a Molecule Smart contract, which takes two different ERC 721 Token smart contract addresses. So we're waiting for the second one to be minted.
00:24:51.704 - 00:25:44.520, Speaker E: Now it's done. And then so we can deploy our predefined Molecule Smart contract. So what it does, because with my current Wallet address, I created the ERC 721 Tokens. So my address already contain the approval. And let me add myself into the whitelist, make sure that I'm being whitelisted. So if I enter my current Wallet address and transact, you see as a recipient, I should get a recipient total, and the transaction is beaming right now and see it's done. And what if we use a non compliant transaction will be rejected.
00:25:44.520 - 00:25:46.670, Speaker E: Thank you so much for your time.
00:25:57.760 - 00:26:09.028, Speaker B: Calvin, quick question. You were building molecule. What intended use cases were you thinking about as you're kind of thinking about meshing tokens together?
00:26:09.194 - 00:27:21.150, Speaker E: So we guys were really thinking about doing a project on a CDP with Megadao. But during the time of Hackathon, I think the shockwave sent because of the arrest of the CTO of BitMax. And then we started talking about, hey, why can't decentralized exchanges also be compliant? So we started this discussion on it and thinking about, hey, actually, if you got approved by a KYC, why can't we just mint a token and represent it and associate that with a wallet, so this way you can actually have compliance easily. And then I tried to do a more generic way, like, how can we structure this. So basically that's how we came up with the Molecule idea. Because on top of KYC, you may have other regulation requirements, some legal documents in the real world. And just by representing such requirement or approval process, by an ELC 721 token, you can enable a lot of different combination and real use case.
00:27:21.150 - 00:27:37.840, Speaker E: Of course. I think the first thing came to mind is the ELC 1400. That's the polymath attempt at a security token. But I think the implementation is actually way more complicated than what we can understand. So we're trying to do a very simple solution.
00:27:38.340 - 00:27:38.752, Speaker A: Awesome.
00:27:38.806 - 00:27:54.410, Speaker D: Can I just clarify the solution a bit? Maybe I missed it there. Sounds like you modify the ERC 20 token and then you add a new function that checks if the address is compliant. Is that right or is it like a new token in its own right?
00:27:56.460 - 00:28:35.380, Speaker E: This is one of the original thought we have. Hey, we can just add one function, but then thinking about it, it's going to change all the existing assets. So instead of doing that, I think it's easier to add a function to the Dex. Like we can FOC uniswap and then before they approve the transaction, we enter the Molecule smart contract address and then there's a function called just like verify Molecule. And if it returns true, then we'll enable the transaction, otherwise we reject it. We actually started working on an ERC 721 token. It's kind of like an openc implementation, but we didn't get to finish it.
00:28:35.380 - 00:28:40.870, Speaker E: So this is a pre generated Molecule smart contract that I did in the demo.
00:28:42.520 - 00:28:50.196, Speaker D: Just to clarify then. So basically in the DAX there's a compliance function, it calls out to your ERC. I don't know what it is. Seven, two, one contract.
00:28:50.228 - 00:28:50.810, Speaker E: Yeah.
00:28:52.380 - 00:28:55.488, Speaker D: Whitelisted and KYC and their compliance.
00:28:55.684 - 00:29:17.120, Speaker E: Yeah, the wireless function could be done in the real time, so you don't have to get pre approval. But yes, with the marketplace contract you can actually validate that at a time of transaction. But you need to do one more thing, which is add the compliance contract when you list the asset for sale.
00:29:19.140 - 00:29:19.792, Speaker A: Cool.
00:29:19.926 - 00:29:21.884, Speaker D: Maybe you could change the name for Molecule.
00:29:21.932 - 00:29:22.163, Speaker B: I don't know.
00:29:22.163 - 00:29:25.444, Speaker D: I don't know if Molecule has confused me to begin with.
00:29:25.482 - 00:30:23.270, Speaker E: That's why it could be very generic in a way, if you think about it. I'm not good with names, but definitely yes. Kevin, what's the next thing that you would add to avoid kind of the KYC component here being Gamified or the two things that I plan to do next is, number one, to get a signature block. It's very similar to how you sign any agreements on using private key and I think that's something like a term and condition which is very commonly used. The second thing I want to do is actually build out an ERC 721 marketplace contract to showcase how easy it is to integrate the Molecule protocol. I think it's way simpler than I thought it would be, but then.
00:30:25.340 - 00:30:25.656, Speaker A: Our.
00:30:25.678 - 00:30:27.530, Speaker E: Team didn't have time to finish it.
00:30:31.630 - 00:30:35.318, Speaker A: All right, I think that's it for Q A. Thank you Calvin, for presenting.
00:30:35.414 - 00:30:36.074, Speaker E: Thank you so much.
00:30:36.112 - 00:30:46.000, Speaker A: Project. Next up is Oracle Sandbox. I'll let you guys start, okay? Sure. Thank you very much.
00:31:01.100 - 00:32:28.608, Speaker G: Hello, this is Logan King, here to talk about our hackathon project, Oracle Sandbox. Oracle Sandbox is a project designed to assess the security of smart contracts and the data feeds that they are getting data from, which are often web APIs or similar. You can see that contracts are kind of hierarchically connected and we have chosen to visually display them in our app for better intuition to users. We have a grading system that comprises of assessing the data reliability of data sources which is basically comparing similar data sources to one another and seeing if any of them are outliers vulnerability assessment which if you import your smart contracts into our system, we will tell you if any of the contracts are known, vulnerable or may contain bad source code. And then we have a quorum rating which is basically stating that if you're only getting data from one centralized web API service or entity handing the data, it's hard to trust them. So we recommend getting data from multiple sources visually for our application. We wanted to, as I said before, do kind of a block diagram structure and this is kind of the reference we were going for where we have multiple nodes that represent data feeds or APIs in Oracle.
00:32:28.608 - 00:33:09.756, Speaker G: And then to represent which data is going to what smart contract. We have kind of Oracle ports that the data flows through. The software we're using to display this currently has a limitation that only one input can go into one input port at a time. So we've kind of compromised with the port diagram. Instead of having one block, we kind of have these port nodes that we've created. And here is our website where it's our application. So users can come and create components using spawning them from a selection.
00:33:09.756 - 00:33:57.772, Speaker G: Over here they can create data feeds, they can create Oracles smart contracts or ports which kind of collect multiple data sources together as one output. So, for our example, we have three data feeds here going into being basically used by this first smart contract all through this. First Oracle, and then we have another smart contract importing a library from another smart contract, only taking one data feed. And we have the security grading is working, but we haven't hooked it up to the front end yet. So visually that's all we have right now. But we do have an update button for pun. So when that's plugged in, the users will get a nice result of how their contracts are secure insecure.
00:33:57.772 - 00:34:09.510, Speaker G: And you can build all of this even without source code just to kind of play with architecture to see if. It is safe or not. Or you can import your source code and it will automatically load all this in.
00:34:21.580 - 00:34:52.390, Speaker D: I can start you said you can upload the source code. I guess the first point I actually want to ask is so it looks like it's a gui for putting together the architecture of your API and then getting like a security reading or comments to say, oh well, this is bad practice. Just to clarify, that's like the main idea, isn't it? And then you can also upload your source code. And that was going to be my question. The source code does have to be like a particular format. How do you go about just reading random source code for identifying this information?
00:34:52.760 - 00:34:55.190, Speaker H: This is Logan King. You guys can hear me, right?
00:34:55.720 - 00:34:57.012, Speaker A: Yep. Yeah.
00:34:57.066 - 00:35:07.530, Speaker H: Awesome. Right now the app doesn't have source code importation, but what we would like once it's built is to.
00:35:09.820 - 00:35:10.216, Speaker A: Be able.
00:35:10.238 - 00:36:08.590, Speaker H: To just provide source code. But mostly what we're analyzing is contract architecture. So what we'd mostly rely on for importing the block diagram is kind of seeing what imports what. Such as if a contract is importing another contract, then we can see that that's hierarchically a dependency if it's using an oracle and then what data feed APIs are being called from that oracle. And from that we can get all our block diagram information. We would also like to get additional information from source code to assess vulnerabilities either whether the source code itself contains known malpractices or whether the source code is known to be vulnerable through a hash or something else. But you can use our app without source code to just entirely play with architecture in a theoretical system.
00:36:12.560 - 00:36:28.530, Speaker A: Awesome. Imran or Arjun, do you have any thoughts or feedback?
00:36:29.750 - 00:36:43.080, Speaker B: So what was the most fun part of working on the project, I guess, as you were forming a group? Why this idea and what led you to build this up?
00:36:45.530 - 00:37:54.202, Speaker H: One of our members is working on a project that they thought could benefit from this application or kind of being able to assess the security of data feeds. There's many different types of data feeds. You can have web APIs, you can have receive data from sensors in a specific location. Some data feeds must be structured in a certain way for contracts to work or contracts are expecting a certain format and APIs might be able to change over time, which we would recommend. Smart contract owners kind of build in the checks to make sure that you're using the data you expect before you use it. But the most fun part of it for me was probably just meeting the team and learning to use new tools and programming it also.
00:37:54.336 - 00:38:15.460, Speaker A: Yeah, I can compliment that. Also, it was fun to apply a user centric approach from the beginning about thinking about who's going to use this tool and how the UX and the UI going to be. That was also an interesting part, which is one of the result for the project.
00:38:16.070 - 00:39:01.860, Speaker I: Yeah, a major element of it too is just considering that for real world application of actual onboarding of people in the average world. We thought that a lot of the projects are going to be focused on that are going to be necessarily looking to see off chain data, and also are necessarily going to be the types of development teams that aren't crypto native, but they're not familiar with the concept of deterministic backends. And so at least this is a place where they could land and get some initial feedback, general advice on good practices. Oracle teams could also participate in this, collectively add to that information that first time development teams are going to be using.
00:39:06.310 - 00:39:07.650, Speaker A: Patrick? Yeah, go ahead.
00:39:07.720 - 00:39:34.246, Speaker D: One small comment. Obviously there's lots of different Oracles that people are using that all have different API setups. One thing that you could do that would add context to this work is maybe a comparison of them all and they actually highlight the list of vulnerabilities that pop up if used different solutions or the good or bad things of each solution. For example, what would be the difference between using Coinbase API and the chain link API at the technical level, not just the fact that there's different source origins.
00:39:34.438 - 00:40:14.620, Speaker H: Part of what we this is a very security focused thing, but it's also just trying to prepare developers and newbies to understanding what they're looking at. So part of what we are doing is automated assessments. And then the other part is when you would click a component such as an Oracle, which we'd hope to have different Oracles such as Teller and Chainlink and other services, hard coded knowledge about. We'd like to give resources on them, a little explanation of how their network works, what users need to know in order to assess the health of that network. If any major vulnerabilities have been detected or happened recently, or if it's been compromised, they should know about all that.
00:40:14.990 - 00:40:23.580, Speaker B: And is this ongoing or is it just kind of you want developers to use as they're kind of pushing out their final product?
00:40:29.810 - 00:40:32.698, Speaker H: I'm not entirely sure what you mean by ongoing but development.
00:40:32.714 - 00:40:46.254, Speaker B: What I mean by is that is it more of a kind of like an ongoing monitoring service as well, or is this just going to be something that developers can kind of fact check to make sure that there's no issues with their data feeds?
00:40:46.302 - 00:41:13.450, Speaker H: Right? It's more of a developer user fact check. You could either point to contract address or source code. You can do it on the contracts you are developing, but you can also do it on live contracts once they're in use and that data may update, such as if an Oracle service or a data feed is detected as compromised recently, then that information will present itself, whereas it might not have presented to developers upon them. Moving the software to production.
00:41:14.670 - 00:41:42.150, Speaker I: If it became robust enough in the future, it could be a potential tool where you actually screenshot or grab some sort of off of it and you put it on your application as sort of a check mark of security to present to people. So just an additional thing there that users who are about to put in some actual capital can see on the user interface and determine for themselves if they find it to be more secure.
00:41:43.210 - 00:42:00.840, Speaker A: I got to jump in because we are a couple of minutes over before, so I'm going to wrap up there and thank the Oracle team for presenting. So great job guys. Thank you very much. We're going to move on to the next team here and that would be Foe Block. I'll let you guys take it away.
00:42:01.850 - 00:42:02.760, Speaker C: All right.
00:42:04.610 - 00:42:05.360, Speaker A: It.
00:42:11.890 - 00:42:40.018, Speaker C: Just a SEC. Could do something, can you platform? It's called four block. It is a community owned for the chain decentralized app. Our team is consist of three people. Me. Rafi kalil from Malaysia. Sergey Alcaras from Spain.
00:42:40.018 - 00:43:11.714, Speaker C: Jungsu from South Korea. The purpose of us doing this project was to try to understand how to develop decentralized apps. And it's been a steep learning curve for us. We haven't done our project throughout, but we have some stuff that's already been done and we can show it to you guys. What is Fullblock Foldblock is a community on decentralized free sharing photo platform. Meaning that in simple terms it is a decentralized unsplash. We're hoping that photographers can upload their pictures for non and commercial use for everyone.
00:43:11.714 - 00:44:08.222, Speaker C: But in return they will be rewarded with a token called Foe from our platform and they can use that token to vote for any new features in the platform. And also they can use that to buy services within the platform as well. We're thinking about making a fully decentralized application by implementing IPFS for the uploaded picture in our platform. But that's going to be our future plans for this platform. So how it works, the communities that we are trying to get engaged with are the photographers and also for the users that wanted to download pictures for their own personal use or for commercial use in a way that photographers will upload their pictures in the platform. The users will go through browse of platform and try to get pictures that they like. They download that picture the moment they click download smart contract will be activated to send one token of Folk to the photographer, the owner of that picture.
00:44:08.222 - 00:44:51.522, Speaker C: And the photographer can use that token to vote any proposal and also use that to buy services within our platform. So this is the flow diagram on how the token is going to be like the economy within our platform. That's the logo and also the name of the token first. As you can see here, the moment the download button being clicked, one token will go to photographers and the photographer can use that to buy proposal and services within a platform. So let me show you our design for our front end. This is the homepage of the platform for photographer who wanted to join this platform. They need to sign up here and we will ask for their Ethereum wallet here as well so that it can automatically send the token to their wallet the moment they already made that.
00:44:51.522 - 00:45:43.246, Speaker C: This is the account page for them and the token available for them the moment they upload. We also offer the services down here so that they can use the token that they already gathered within the platform, like here, be on top of the search rate for this keyword for 15 foot and they can use that token for this page here to vote for proposal and also to submit proposal. This token will be done quarterly. So every photographer can use their token to vote whatever proposal they think will be beneficial for the community. So as a user, what you're going to do, you're going to go here and try to see what pictures that you like. The moment you see these pictures, if you like this one, you can click here, download and then it will give one token for that photo. And this is the search page.
00:45:43.246 - 00:46:09.020, Speaker C: Same process for them. Right now we have it already done. The front end programming using React and also the back end using Springboot and maybe in a couple of months we will have up and live for our platform for everyone to use. For now, this is what we have and we're hoping to get it done as we are moving forward and learn new tools for our platform. Thank you, that's all from us.
00:46:12.270 - 00:46:20.126, Speaker D: I can go first, I guess I can just jump in. So I think for the this is mostly just a comment at the moment. I think for the project, I think.
00:46:20.148 - 00:46:21.390, Speaker E: You could take a slight.
00:46:23.410 - 00:47:06.160, Speaker D: So for example, a few months ago we were looking for a logo for a browser extension. We ended up with a Pomeranian with a little black tie, which was really cute, but I just couldn't work out the license around it. I went to several websites and I couldn't find out who made the image and what was the license for and how could I pay for the license. So we can never use it for production, where if you use something like this, the photographer or the graphic designer can upload their image, detail the rights to the image and then actually allow me to pay for it and then prove to other people that I have right to it just to avoid copyright issues. I feel like if you did something along those lines, I'd find it really useful because I was a pain in the ass for me. So that's the comment, I guess. I don't know if you have any thoughts on it.
00:47:08.610 - 00:47:09.360, Speaker C: Okay.
00:47:16.530 - 00:47:25.730, Speaker A: It. I guess the question would be, have you thought about how you might work licensing into just a place for photographers to share photos?
00:47:26.710 - 00:47:50.646, Speaker C: So far, we haven't figured that out yet because we're just looking for something to do for this hackathon, try to learn as many tools as possible to try to develop a decentralized application. And another thing is that in answering that question, I would say that we haven't done a lot of research on that, on how to pursue on that direction.
00:47:50.758 - 00:47:51.338, Speaker D: Look at it.
00:47:51.344 - 00:47:51.980, Speaker A: I mean.
00:47:56.590 - 00:47:57.530, Speaker C: Proceed.
00:47:58.910 - 00:48:22.200, Speaker D: I was just going to say that the copyright bill for images is a mess when I was trying to find this copyright, and it's just something that could easily be solved by something like this, whereas the graphic designer can just pick a license and then sell it on the Internet. So I think you could go towards that direction. That'd be really useful versus voting tokens. I'll open up the floor to other people.
00:48:23.930 - 00:48:24.710, Speaker A: Mmhmm.
00:48:27.850 - 00:48:29.960, Speaker B: What have you learned throughout this process?
00:48:32.670 - 00:49:12.454, Speaker C: I'd say on how to develop smart contracts, because to me, it's really a strange thing trying to figure out what smart contract is. And through this process, I see the technical behind on how to develop a smart contract, even though we haven't fully developed one. But I've already see the fundamentals on why this thing works and why people invest in it. Before this, I don't really understand why people would invest in trying to develop this kind of thing. I know that we understand how the blockchain works, but to develop tokens and smart contracts, it's something alien to me.
00:49:12.492 - 00:49:12.694, Speaker A: Now.
00:49:12.732 - 00:49:14.200, Speaker C: It's pretty much obvious.
00:49:16.650 - 00:49:24.394, Speaker E: How are you thinking about kind of development of the project kind of going forward? I know that you guys have now.
00:49:24.432 - 00:49:29.322, Speaker A: An interface fully designed, so we're thinking.
00:49:29.376 - 00:50:00.100, Speaker C: About just finishing this project, moving forward from here, because technically we had, like, a technical difficulty before this. We use Flutter to develop our front end, and we try to increase our learning curve by learning that framework, but instead, we kind of change our mind along the way in the middle of the hackathon. And that's why we need to reorganize everything and try to finish up, at least have a demo website to show.
00:50:02.070 - 00:50:33.840, Speaker A: Cool. All right, great. Thank you for sharing the project, guys. Thank you. Okay, thank you. All right, so the next project and the last one of the first half is going to be X Win investment. And just after this, we'll take a short ten minute break to stretch your legs, get some water, whatever you need to do.
00:50:33.840 - 00:50:42.222, Speaker A: I'll let Calvin present. Hello.
00:50:42.276 - 00:50:45.070, Speaker F: Hey, guys. Good morning. Let me share my desk.
00:50:49.130 - 00:51:08.830, Speaker A: It did you share the did you share your sound?
00:51:11.120 - 00:51:12.860, Speaker D: I don't hear anything. Yeah.
00:51:13.010 - 00:51:22.576, Speaker F: Oh, sorry. Well, you're in your yeah, let me share it again. Sorry about that.
00:51:22.678 - 00:51:23.570, Speaker A: No problem.
00:51:23.940 - 00:51:25.004, Speaker D: I blame YouTube.
00:51:25.052 - 00:51:25.890, Speaker A: It's okay.
00:51:26.420 - 00:52:26.740, Speaker F: Xmen is a decentralized investment platform that connecting fund managers to investors. How it works the protocol use uniswap for the swapping purpose, chainlink price for the fund valuations and finally Aave as a lending protocol. The protocol has interface for fund subscriptions, redemptions, rebalance create target, direct swap and liquidity pool. Now let's go for the demo. Fund manager can create that fund target through the screen here. So for example the fund focus on tech focus will be having say dive for 30% and bat as 70%. Once they look so fine, they will start to create the target.
00:52:26.740 - 00:53:04.370, Speaker F: So I need to confirm and sign the transactions in the MetaMask. It's done now. And now we refresh the screen. The Xmin tax is enabled to allow investors to do the subscription and redemptions. Now the fund is ready for the subscriptions. Click on the subscribe button and key in the number of Eve that you want to subscribe to the fund. Press Invest and MetaMask will be pop up.
00:53:04.370 - 00:54:13.940, Speaker F: Click on confirmations and wait for the transactions to be done. Now the transaction is done, refresh the fund and we will see the number of supply is increased. Next we will go for the redemptions. In redemptions, click on the fund that you want to redeem and key in the number of units that you want to redeem from fund and checkbox here will give you the choice whether you want to return eve or underlying token. Click Approve and sign the transactions in your MetaMask and once it's done, continue with the redeem axlim. Provide the rebalance functions for the fund managers to manage the fund. Basically, to rebalance the fund there are three steps.
00:54:13.940 - 00:55:06.680, Speaker F: The first step fund manager has to move the underlying token into ETH. The next step it will go update the token with the new target. Once this is done, fund manager has to move the eve back to the underlying new target. How it is made xfin is built in solidity as a backend react JS as a front end. There are two main smart contracts. The first one the core interface that interact with the front end and the second one the fund to store the token balance in the future. For the next step we will launch the fund in the main net, enhance the autonomous algorithm and finally we want to integrate with other protocol.
00:55:06.680 - 00:55:11.720, Speaker F: Thank you for watching. Now we are open up for the Q A sessions.
00:55:16.720 - 00:55:56.056, Speaker D: I could start quickly if you want. So my understanding is that there's a fund manager, he has a list of assets and I can deposit into that and then they basically manage my wealth for me. They rebalance it for whatever goal. Have you heard of set protocol before? So they have something along those lines but I guess not for funds or wealth. It's more for copying someone's trade and then you can actually get like a token that represents that basket of assets. Then you can trade those tokens as well. So if I want to join your asset, I can just tokenize the basket of currencies and then you can trade that around.
00:55:56.056 - 00:55:59.930, Speaker D: Have you looked at that before? How does it compare? What do you think?
00:56:01.180 - 00:56:58.470, Speaker F: Yes, before the idea came, yes, I know token set and when I started the idea and started to build this, I think token set, they don't have any I think now they come up with the version two where they have integrated with the farm farming and then they have a lot of more features integrated before that. I just feel that token set was a bit I mean, most of them, they just are two tokens in each fund and they basically just do two swapping back and forth. So I thought that would be good to have a bit more features like providing the alpha strategy or connect to other off change indicator so that they can have a bit more autonomous. So basically.
