00:00:23.960 - 00:00:34.910, Speaker A: Hello everyone and welcome to the SuperHack Base workshop building on base. Joining us today is Ryan Knitz and Carl Fluke who will be taking us through this session. And with that, I'll pass it over to Ryan and Carl to get the session started.
00:00:36.560 - 00:01:05.930, Speaker B: Excellent. Thank you Roy. Nice to have everyone here. So today we're just going to do a quick run through of talking about Base and then just show an example of how you can bridge ethereum over to Base and start using it for gas. So thanks everybody for coming to the super hack. Kind of the motto for Base that we always want to kick off with is on chain is the next online. So bringing those users to actually doing on chain actions and kind of rebuilding our web two world we live in today.
00:01:05.930 - 00:01:16.664, Speaker B: So today we're just going to give a big background about Base. We're going to talk about how you can bridge in between go early testnet and base testnet so that you can have some funds to do smart contract.
00:01:16.712 - 00:01:19.196, Speaker C: Deployment and then talk about scripting that.
00:01:19.298 - 00:01:26.048, Speaker B: So I'm Carl Fluke. I'm a solutions architect. I've just started to do some developer relations at Coinbase and been with the.
00:01:26.054 - 00:01:28.640, Speaker C: Company for a little over a year. And Ryan.
00:01:29.700 - 00:01:36.210, Speaker D: Hi, Ryan. It's head of Solutions architecture at Coinbase, also working with Carl on the Base deb rail side.
00:01:38.840 - 00:01:39.590, Speaker E: Awesome.
00:01:40.760 - 00:01:53.256, Speaker B: So kind of what is Coinbase's mission? We've been around for about ten years, so just high level we wanted to make Base just to kind of further economic freedom and self sovereignty. So there's a few examples of the.
00:01:53.278 - 00:01:56.296, Speaker C: Areas that we've done this across, but.
00:01:56.318 - 00:02:12.456, Speaker B: That'S just super high level what Base really wants to focus on. As blockchain starts to get cheaper and cheaper with gas fees, we see the L Two summer is upon us and it continues to grow. So they already have surpassed native theorem.
00:02:12.488 - 00:02:14.770, Speaker C: Transactions and they are continuing to grow.
00:02:16.020 - 00:02:48.664, Speaker B: So kind of Coinbase has had this history of being a very centralized crypto company and slowly we've been coming more on chain by default. So we launched our stablecoin with Circle USDC. We started do noncustodial wallets, we start do liquid staking and now as of kind of on chain summer is starting now and that's our L Two op stack chain. So just give some examples and some partner ecosystem that we've been focused with. We are very focused on helping the optimism team kind of bring these use.
00:02:48.702 - 00:02:52.904, Speaker C: Cases on chain and helping kind of.
00:02:52.942 - 00:02:56.268, Speaker B: Grow the crypto market. And Jesse's here, so hey Jesse, if.
00:02:56.274 - 00:02:57.310, Speaker C: You want to say hey.
00:02:57.840 - 00:03:13.804, Speaker F: Hey everyone. I just wanted to pop in. Thanks Carl and Ryan for the invite. Thank you all for being here. It's awesome to see we have a full room. I know there's a bunch of other people working on the live stream. I hope folks saw my message in the keynote.
00:03:13.804 - 00:03:49.790, Speaker F: We were really excited to launch base open up for bridging last week. We're opening up Base for everything this week and so excited for all of you all to be hacking in SuperHack. So it looks like Carl's solidly into this deck. I love all these use cases that are starting to be built and I'm really excited about the next wave of use cases that are going to be built at hackathons like SuperHack by folks like y'all. So thank you for being here, thank you for building On Base. Thank you for believing in the on chain future and let's freaking hack. Thanks for having me.
00:03:51.120 - 00:03:52.140, Speaker E: Yeah, awesome.
00:03:52.210 - 00:04:00.290, Speaker B: Thanks, Jesse. Glad you could make it. So, yeah, just to hear some of those example use cases 100%, we want you to build some new ones.
00:04:01.380 - 00:04:01.744, Speaker C: Okay.
00:04:01.782 - 00:04:31.610, Speaker B: So kind of like, what is Base? The real focus is that we want to have a million developers. That's part of the super hack. We're doing a few other ECC or ETH, global focused hackathons. We want to bring developers on chain and we want them to have a user base. And that's something Coinbase can really help, is that we have a ton of Coinbase users today and we're going to bring them to be more and more on chain. So, as you are well aware, with the Op stack, it's a layer two, it's Ethereum equivalent. So if you're used to Solidity and Ethereum, this will feel exactly the same.
00:04:31.610 - 00:04:54.608, Speaker B: One of the things I really want to focus on is that we are becoming a core contributor to the Op stack. So we are trying to make the advancements that we create for Base be able to be pushed back to the optimism team so that we can contribute and help grow this stack together. So that's a very big important thing is that we do work with the optimism engineers to help open source and.
00:04:54.614 - 00:04:57.040, Speaker C: Continue to expand the Op stack.
00:04:58.260 - 00:05:30.590, Speaker B: So some big things that we want to do is that we want to keep growing the EVM developer ecosystem. We're working on doing 4844, so Dank Sharding coming out hopefully in the next Ethereum upgrade. And then we want the super chain vision. We want to have these multiple app chains. We want to work with the Op stack and improve that collaboration across those protocol teams. So Ryan, did you want to go through some of our prize money? That kind of our four buckets we have.
00:05:33.540 - 00:05:37.780, Speaker D: Yes, absolutely. Let me just pull up that. Do you have it on the slide?
00:05:38.520 - 00:05:39.716, Speaker C: It's on screen.
00:05:39.898 - 00:05:57.716, Speaker D: Okay, thank you. Sorry, I'm just switching windows here. Yeah. So basically what we want to do there you go. All right, so build a consumer product. This is really up to you all to figure out what you want to build. And we're just asking be creative.
00:05:57.716 - 00:06:44.600, Speaker D: We don't necessarily need the 8th copy of something that's already out there. So it doesn't have to be finance, it doesn't have to be DeFi. It can be NFT, it can be creative, it can be really anything. And so we're just looking to be amazed and to be wowed on this one. For the next one, we are looking at Base native. And what this is, is we want Base to have provider implementations. We want constants, we want as many open source projects as possible to have Base as a native construct and have it be a core part of that library so that when developers come online, they don't need to go look up the chain ID and they don't need to go do all the configuration for everything.
00:06:44.600 - 00:07:17.796, Speaker D: And so what we're looking for is we're looking for merged PRS pull requests, as many as possible. That said, we will take in consideration if something doesn't get merged and there's no objection from the project and there's at least some movement on it, we'll take these into consideration. Doesn't have to be developer tools either. If you want to add Base support to an open source wallet, really anything that is open source, that will take a PR and make Base more part.
00:07:17.818 - 00:07:21.620, Speaker C: Of the tool for the next one.
00:07:21.770 - 00:07:24.964, Speaker D: Carl, do you want to talk about what you were thinking about on this one?
00:07:25.162 - 00:08:07.936, Speaker B: Yeah, so a big part of what we want to do with Base is make the user experience much simpler. So account abstraction is starting to become more and more common. There's a lot of examples out there like I know Biconomy and Safe and a few others have decent developer libraries. So being able to leverage some of that account abstraction to help improve the user experience. And so we gave a few examples here. So such as making Minting NFT easier if they don't have gas, making subscription services easier, just anything that really makes it so that a net new user can come on chain and be successful. And then lastly, we have kind of an infrastructure project, so anything that could help make the Base nodes easier to.
00:08:07.958 - 00:08:09.084, Speaker C: Set up or operate.
00:08:09.212 - 00:08:31.420, Speaker B: I think just last week we released snapshots so that you can now have a much easier time to be able to sync. But there's tons of improvements that can go into this. I think right now there's just a docker file set up, but that can kind of be expanded to how do you help an individual be able to go from a bare machine to actually having an operating node?
00:08:34.320 - 00:08:36.440, Speaker C: All right, so those are our prize pools.
00:08:36.520 - 00:08:40.780, Speaker B: I will give us a minute here if there are any questions specifically about the prizes.
00:08:47.300 - 00:08:48.930, Speaker C: I do not see any.
00:08:50.420 - 00:08:55.956, Speaker B: Okay, so let's just jump into kind of like a UI friendly and then a developer friendly of how can you.
00:08:55.978 - 00:08:57.190, Speaker C: Bridge things to Base.
00:08:57.560 - 00:09:08.776, Speaker B: So does my screen look okay here? All right, so by default, I'm just going to do an example through the.
00:09:08.798 - 00:09:11.690, Speaker C: UI just so that we can see.
00:09:12.220 - 00:09:35.304, Speaker B: So I have a coinbase wallet set up here. And in testnets. I just sent one gorli ethereum here. We do have testnet funds if you need some. Also, the default faucet on the Coinbase website or inside of the wallet extension itself has the ability to get both Gorely ETH and Base ETH. So this wallet has had only one transaction.
00:09:35.352 - 00:09:36.896, Speaker C: It's net new for this demo.
00:09:37.078 - 00:09:39.936, Speaker B: So I just gave it one ETH and I will go ahead and do.
00:09:39.958 - 00:09:42.690, Speaker C: This deposit transaction so we can look at what really happens.
00:09:45.060 - 00:09:47.556, Speaker B: So I will confirm that transaction and.
00:09:47.578 - 00:09:50.004, Speaker C: It'S going to wait for confirmations while that happens.
00:09:50.202 - 00:09:54.660, Speaker B: So let's hope the testnet is going to behave for us during this session.
00:10:02.660 - 00:10:17.120, Speaker C: All right, almost there. And if this doesn't finish, we'll just use a different example and come back.
00:10:18.290 - 00:10:48.582, Speaker B: Let's just use a different example for a second. So we just wanted to see a deposit transaction. I'll use somebody else's while mine is still loading. So really what I want to show here is that from that transaction, what we're actually doing is calling the bridge smart contract to this deposit transaction. If we decode the input, we can see specifically what parameters is it passing. So it passed which address. So I think by default the UI is just using your own address, but via the smart contract, you could bridge to a separate one.
00:10:48.716 - 00:10:49.754, Speaker C: It has a value.
00:10:49.872 - 00:11:01.546, Speaker B: So this looks like it's in way. So the most significant units has a gas limit is creation false and data is null. So we'll reuse these parameters later and.
00:11:01.568 - 00:11:03.306, Speaker C: Let'S see if mine went through. It did now.
00:11:03.328 - 00:11:06.586, Speaker B: And I have the exact same or a very similar output.
00:11:06.618 - 00:11:10.880, Speaker C: I just have a different amount here as I did 500, starting with five there.
00:11:11.330 - 00:11:13.826, Speaker B: All right, so let's see, kind of.
00:11:13.848 - 00:11:21.710, Speaker C: Like how does this actually work? So I pulled up the proxy address here and we can go to contract.
00:11:21.790 - 00:11:24.626, Speaker B: And actually see what is happening.
00:11:24.728 - 00:11:27.794, Speaker C: So this is a proxy, which means.
00:11:27.832 - 00:11:30.646, Speaker B: That we can upgrade it in the future. So what we actually want to look.
00:11:30.668 - 00:11:32.438, Speaker C: At is for where it's pointed to.
00:11:32.604 - 00:11:37.874, Speaker B: So if we go into the read, we can look at, hey, this is the API implementation for this contract.
00:11:37.922 - 00:11:39.350, Speaker C: So this is the real contract.
00:11:40.170 - 00:11:45.866, Speaker B: And then likewise, we can do read and write here and be able to see these items. So most importantly, we would just want.
00:11:45.888 - 00:11:49.290, Speaker C: To look at the deposit transaction. I can make this a little bigger.
00:11:50.510 - 00:11:54.638, Speaker B: And here's kind of those exact same fields that we had, is there's an actual value?
00:11:54.724 - 00:11:58.590, Speaker C: And then we had the two, the amount, the gas and is creation false.
00:11:59.330 - 00:12:13.986, Speaker B: So how do we do this in a little bit more of a developer friendly way. So I was going to show through an example of just spinning this up through kind of like a hard hat script and show how you can get balances. And you can do that bridge just.
00:12:14.008 - 00:12:15.300, Speaker C: From hard hat itself.
00:12:16.250 - 00:12:22.118, Speaker B: So to get started, I'm just going to make a new project here.
00:12:22.204 - 00:12:26.680, Speaker C: Call it Demo bridge. Hopefully this size looks okay for everybody.
00:12:30.430 - 00:12:31.914, Speaker B: And then I will spin up Hard.
00:12:31.952 - 00:12:44.430, Speaker C: Hat and I'll just use an empty config file so we can run through it. And then lastly, I will also save.
00:12:44.500 - 00:12:52.830, Speaker B: Some dependencies here just so I have the Ethers. That makes it a little easier to manage contracts.
00:12:54.610 - 00:12:56.960, Speaker C: And this may take a second as well.
00:13:05.220 - 00:13:21.880, Speaker B: For SuperHack projects should be on Mainnet or Testnet. That is up to you. I'd recommend testnet. We're hacking, we're being developers. If you want to deploy on mainnet, you absolutely can. Okay, so I have this open.
00:13:21.950 - 00:13:31.294, Speaker C: Let's just go ahead and get that in Vs code. All right.
00:13:31.332 - 00:13:49.570, Speaker B: So I have kind of my default dependencies here and I have Hard Hat configured. So one thing that I do want to call out for everybody is that since we're on the Op stack, you do want to make 8.17 version of Solidity, the highest. There are some issues in like 19 and 20 with new Opcodes.
00:13:50.310 - 00:13:52.500, Speaker C: So that's just a little got you there.
00:13:52.870 - 00:14:06.870, Speaker B: So the next main thing I want to add in here is that there's going to be two networks that we're working with. We'll set the default just to Gorely and then we have to set up our actual networks.
00:14:06.950 - 00:14:14.986, Speaker C: So on Base website in our docs, we talk about our network information here.
00:14:15.088 - 00:14:16.478, Speaker B: So depending on if you want to.
00:14:16.484 - 00:14:18.526, Speaker C: Use mainnet or testnet, we kind of.
00:14:18.548 - 00:14:23.710, Speaker B: Want to configure our networks. I think there's actually a very clear.
00:14:23.780 - 00:14:25.520, Speaker C: Version of doing that in.
00:14:28.870 - 00:14:29.282, Speaker E: Here.
00:14:29.336 - 00:14:30.846, Speaker B: Kind of gives you also the helper.
00:14:30.878 - 00:14:32.930, Speaker C: Of it's a little more straightforward.
00:14:33.670 - 00:14:36.126, Speaker B: Since I will be using Alchemy, I'm.
00:14:36.158 - 00:14:42.820, Speaker C: Going to copy this out of another project just so I have it here.
00:14:43.510 - 00:14:50.294, Speaker B: So this is just adding Base Gorely and it's saying, hey, here's this URL. I'm going to load in a mnemonic and then I'm actually going to use.
00:14:50.332 - 00:15:10.766, Speaker C: A specific account on that mnemonic. So to do that I will create a secrets file. So always the fun part of a demo is not showing off any keys or anything. While I'm in here, I'm also going to require some helper classes and that.
00:15:10.788 - 00:15:14.414, Speaker B: Just sets up Hard Hat so that I can have ethers available to me.
00:15:14.532 - 00:15:25.410, Speaker C: Which is just what I'm used to to make contract calls a little simpler. All right, so then after that we would want to get that API from the bridge.
00:15:26.070 - 00:15:31.490, Speaker B: So I'll just make a new file here and just call it Bridge JSON.
00:15:31.910 - 00:15:34.446, Speaker C: And so we went to this portal.
00:15:34.638 - 00:15:36.194, Speaker B: Or we went to the actual bridge.
00:15:36.242 - 00:15:50.940, Speaker C: Contract and we'd want to go to code here. If we scroll all the way down, there should be an abi. So that's our abi here. We will save that. So that formatted that for me.
00:15:52.430 - 00:15:53.786, Speaker B: And then we are going to want.
00:15:53.808 - 00:16:06.800, Speaker C: To use that abi here in a minute. So I'll just add it while I'm up here. All right, there we go.
00:16:07.270 - 00:16:11.522, Speaker B: So I'm going to use hard hat tasks, which are just an easy way.
00:16:11.576 - 00:16:16.580, Speaker C: To be able to specify that I want to have like a.
00:16:18.950 - 00:16:19.860, Speaker E: All right.
00:16:26.410 - 00:16:37.274, Speaker C: Here we go. That looks good. And then we can add parameters so.
00:16:37.312 - 00:16:45.690, Speaker B: That looks straightforward enough. AI is helping me quite a bit today on this. So our action is we just want to have an Async task.
00:16:52.130 - 00:16:54.800, Speaker C: That actually helped me almost all the way here.
00:16:55.250 - 00:16:56.286, Speaker B: So we just want to make sure.
00:16:56.308 - 00:17:01.220, Speaker C: That we get that account. So let's just say console log.
00:17:03.590 - 00:17:04.340, Speaker E: Perfect.
00:17:05.350 - 00:17:07.170, Speaker B: Let me see if this all looks correct.
00:17:07.240 - 00:17:08.580, Speaker C: It looks okay to me.
00:17:13.210 - 00:17:14.994, Speaker B: And then I need that secrets file.
00:17:15.042 - 00:17:17.480, Speaker C: So let me copy that over.
00:17:26.410 - 00:17:30.614, Speaker B: And there we are. So I just have in our example file, I have a mnemonic.
00:17:30.662 - 00:17:32.266, Speaker C: So I have my account, and then.
00:17:32.288 - 00:17:40.862, Speaker B: I have an Alchemy key just so I have an RPC node that I can trust. And with that, this should actually just work.
00:17:40.916 - 00:17:51.890, Speaker C: So if I do NPX hard hat and then I do Balance account, and let's get that account out of the wallet.
00:17:57.990 - 00:17:59.330, Speaker B: So that listed our account.
00:17:59.400 - 00:18:03.062, Speaker C: Perfect. And then next, we essentially want to.
00:18:03.116 - 00:18:07.234, Speaker B: Switch this out to actually get the balance. So that's very straightforward.
00:18:07.282 - 00:18:34.160, Speaker C: With Ethers, we just await and AI is helping me achieve here. And then I can just console log. Let's do taskgards account. We can just do balance as is. We can see how that works. All right, so we have a balance here.
00:18:34.610 - 00:18:36.814, Speaker B: And then most importantly, we're doing this.
00:18:36.852 - 00:18:44.478, Speaker C: Across networks, so we can also check that on base gorli. Okay.
00:18:44.564 - 00:19:12.730, Speaker B: And I have someone base gorli as well. So if I go into my addresses or go back into my wallet, I just want to double verify that's correct testnet. I have half on Gorely and I have half on base Gorli. So now that I can do a basic balance check, let's kind of do the same thing, except let's do that Bridging action. So bridge ETH to base Scorely.
00:19:13.070 - 00:19:18.814, Speaker C: And in here, we'll kind of do the exact same param for account and.
00:19:18.852 - 00:19:21.040, Speaker B: We'Ll do an apparum for amount.
00:19:23.970 - 00:19:32.050, Speaker C: The amount to Bridge. Okay. And then same we do our set action.
00:19:36.470 - 00:19:38.034, Speaker B: And then I always like to make.
00:19:38.072 - 00:19:42.386, Speaker C: Sure that my arguments are correct before I go farther.
00:19:42.578 - 00:19:44.354, Speaker B: So I have a new task bridge.
00:19:44.402 - 00:20:01.610, Speaker C: And it's going to require an account and an amount. So I'll add an amount here of 0.1 and we'll switch the balance call to bridge and perfect. So I have these values.
00:20:02.110 - 00:20:07.534, Speaker B: All right, next, I want to make sure that I use this Abi up.
00:20:07.572 - 00:20:12.506, Speaker C: Here, which I called API for some reason, abi, and I want to load.
00:20:12.538 - 00:20:14.350, Speaker B: That into an actual Ethers.
00:20:16.290 - 00:20:24.420, Speaker C: Contract. So I'll just say const bridge contract equals new Ethers contract. Yep, it's got it.
00:20:25.990 - 00:20:30.518, Speaker B: And it's going to take a couple parameters. It's going to take that API and.
00:20:30.524 - 00:20:45.740, Speaker C: Then it's going to require a signer. We'll just use Ethers Provider first and then I need that bridge address. So believe this is the one we want.
00:20:49.550 - 00:20:55.062, Speaker B: Okay. And now that I have that bridge contract, I should be able to essentially.
00:20:55.126 - 00:20:56.234, Speaker C: Call any of the methods.
00:20:56.282 - 00:20:59.146, Speaker B: Let's do something simple. Let's just do like l two sender.
00:20:59.178 - 00:21:08.610, Speaker C: To make sure that I can read this. So equals await that bridge contract. And then it's just the method.
00:21:10.310 - 00:21:10.722, Speaker E: And.
00:21:10.776 - 00:21:13.060, Speaker C: Let'S log that out to make sure it works.
00:21:15.590 - 00:21:17.698, Speaker B: So just simple, make sure I got.
00:21:17.704 - 00:21:34.780, Speaker C: The contract correct, make sure I have my abi correct. And the sender is that dead, which matches here. So we have everything right so far. All right, so then we essentially just want to call that bridge call.
00:21:36.830 - 00:21:38.666, Speaker B: So do some error handling in case.
00:21:38.688 - 00:22:09.778, Speaker C: I mess something up. And then otherwise I just want to let's say const bridge result bridge contract and then what is that actual? It's called deposit transaction. And then let's look at those parameters again. So it has a value.
00:22:09.864 - 00:22:10.738, Speaker B: We have a two.
00:22:10.824 - 00:22:17.298, Speaker C: We have a value gas limit and is creation. So since we have value here, that's.
00:22:17.314 - 00:22:22.434, Speaker B: Probably going to be in way and I don't want to necessarily send in way. So let's do a format here really quick.
00:22:22.572 - 00:22:47.950, Speaker C: So let's skip that for a second and let's say const format value. I don't think I actually need to await. I do not just Ethers parse units. We can log that just to make sure that we have it correct format value. Okay.
00:22:48.020 - 00:22:50.514, Speaker B: So it now understands 0.1 means that.
00:22:50.552 - 00:22:59.810, Speaker C: With the appropriate amount of decimals excellent. And then deposit transactions. So let's put these side by side so we can compare.
00:23:04.650 - 00:23:05.400, Speaker E: Sorry.
00:23:06.650 - 00:23:14.220, Speaker C: So we have two, which is just the taskgargs account. We want that format amount.
00:23:15.710 - 00:23:17.094, Speaker B: We want the gas limit.
00:23:17.142 - 00:23:38.850, Speaker C: So I think let's compare what my transaction was and just use the same not that transaction. Where was I? Here we are. We'll just set it to a static 1000 or 100,000 and then as is creation false.
00:23:41.270 - 00:23:42.894, Speaker B: And then data is null.
00:23:42.942 - 00:23:53.014, Speaker C: So I always just do zero x. So it's a little more clear. And I believe that's everything we need to actually just call this from hard.
00:23:53.052 - 00:23:58.838, Speaker B: Hat so we can console log that and then we can also await to.
00:23:58.844 - 00:24:09.260, Speaker C: Make sure it actually happens. So yeah, it's helping me here. All right. So I think this should be all that we need.
00:24:10.510 - 00:24:13.302, Speaker B: So I am loading up that contract.
00:24:13.366 - 00:24:16.778, Speaker C: I am formatting the value and I'm.
00:24:16.794 - 00:24:19.120, Speaker B: Doing the exact same thing our UI did.
00:24:23.850 - 00:24:32.070, Speaker C: No does not support sending transactions. This is probably from me loading the wrong account. Oh, I need to set up a signer.
00:24:32.150 - 00:24:35.286, Speaker B: So by default, Ethers Provider is not actually a signer.
00:24:35.318 - 00:24:49.040, Speaker C: I need to pull out the appropriate signer. So this is actually except I don't think I need to give it task ARGs because I have that set below.
00:24:50.210 - 00:24:51.360, Speaker E: Yes, I do.
00:24:56.470 - 00:24:58.420, Speaker C: Invalid argument address.
00:25:01.190 - 00:25:01.940, Speaker E: Oh.
00:25:03.910 - 00:25:45.880, Speaker C: That is what I'm looking for. Insufficient funds. I am probably loading the wrong signer. I'm going to go ahead and just use my backup account. So always be prepared. So in this account, which I'll pull up on Etherscan in a second, we'll do the exact same command, but a slightly different address here. Sorry, let me clear this and.
00:26:03.000 - 00:26:03.316, Speaker E: Make.
00:26:03.338 - 00:26:29.980, Speaker C: Sure I have an appropriate amount of Gorely. I do. All right. Well, that is live demos having an issue. Let me see. I'm using a different account here. This is CBEC six oh, I know why on this one, I do not want a path.
00:26:29.980 - 00:27:07.342, Speaker C: So one secondary. All right, there we go. So, transaction submitted. And then let's go ahead and pull that address up to make sure we can see it. And so there is that bridging transaction going through. Hopefully it goes back through. I can get my hash here too, and look up the transaction by that while it's indexing.
00:27:07.342 - 00:27:19.350, Speaker C: So here's a success. Center value. We have our method here. And then lastly, let's pull that up on Base scan so we can see it on the other side. Here's our base scan.
00:27:19.770 - 00:27:20.834, Speaker B: Different transaction.
00:27:20.882 - 00:27:32.380, Speaker C: So let's do it by address. And this is me receiving that bridged value.
00:27:33.070 - 00:27:34.778, Speaker B: So it may take a minute to show up here.
00:27:34.784 - 00:27:36.506, Speaker C: It can take like four to six minutes.
00:27:36.688 - 00:27:40.320, Speaker B: So really, that's what I wanted to run through today. I know we're close up on time.
00:27:41.410 - 00:27:44.366, Speaker C: Let me go ahead and go back to our slideshow here.
00:27:44.468 - 00:27:48.386, Speaker B: That's just giving you an example of using hard hat, pulling down like an.
00:27:48.408 - 00:27:50.340, Speaker C: Abi and actually calling it.
00:27:53.510 - 00:28:01.906, Speaker B: So questions. I was playing with doing different mnemonics. So instead of having one mnemonic per.
00:28:01.928 - 00:28:03.810, Speaker C: Demo, I was trying to get used to the paths.
00:28:03.890 - 00:28:06.726, Speaker B: So that was just me trying to upgrade the demo game and it did.
00:28:06.748 - 00:28:07.960, Speaker C: Not work very well.
00:28:10.410 - 00:28:15.370, Speaker B: But are there any other QA questions on, like, Base op stack the prizes.
00:28:21.550 - 00:28:37.700, Speaker D: So, just a reminder, if you're not already engaged, there is a partner Base channel under the Superhax Partners where you can engage with us if you have any sort of questions about building on Base.
00:28:46.290 - 00:28:51.710, Speaker A: Yeah, there was one question. What advantages does Base have over other blockchains?
00:28:53.410 - 00:29:59.270, Speaker D: So, Base is there are many different blockchains and there will be many blockchains out there for Base. We really wanted to find a place that we could bridge the coinbase users on Chain as well as we wanted a home where we could actually deploy our applications as well as we move more and more on chain, as we move more of our centralized services on chain. And so that was the kind of the decision to launch Base. Base is a part of the optimism superchain vision, where it's a series of L two S that help scale ethereum horizontally in different namespaces, and there'll be different ecosystems and there'll be different developer communities. So if you're comparing it to the main l One Ethereum, you're looking at many more transactions per second, and you are looking at shorter block times and.
00:29:59.340 - 00:30:03.480, Speaker C: Lower latency in general, much lower fees. Sorry.
00:30:05.930 - 00:30:06.680, Speaker E: Yeah.
00:30:10.890 - 00:30:11.506, Speaker D: Great.
00:30:11.628 - 00:30:16.220, Speaker A: Lewis asked how much cheaper is based transactions fees versus l One?
00:30:19.390 - 00:30:47.410, Speaker D: Right now, it's ten times less expensive with EIP 4844, that could go to 30 5100 x. There'll be a little bit more information once the implementation is fully out. The goal for us is to make the network fees as inexpensive as possible on the L Two. We think that there'll be a lot more activity as the fees come down further.
00:30:47.990 - 00:30:56.626, Speaker B: Yeah, we do have a company goal of we want transactions to be 1 second, and that's kind of the I know that 4844 will help that significantly.
00:30:56.658 - 00:31:02.922, Speaker C: But that's kind of the company mission is 1 second.
00:31:02.976 - 00:31:08.810, Speaker A: Question was how decentralized is base? How many nodes are supposed to be managed by people outside Coinbase?
00:31:10.030 - 00:31:51.420, Speaker D: So the nodes can participate in the network, but they are not a part of the roll up the sequencer. Right now, the sequencer is a bit centralized. This is somewhat of a technology challenge, and that's something that we're working on. Together with the Optimism Foundation. Coinbase is now a core contributor to the Optimism Foundation or to the Op stack excuse me. And we're working with them to invent the technology that will enable decentralized or more than one sequencer at a time.
00:31:54.470 - 00:31:54.882, Speaker E: Okay.
00:31:54.936 - 00:32:01.826, Speaker A: And another question. Any on ramp apps already supporting today?
00:32:02.008 - 00:32:02.578, Speaker E: Go ahead.
00:32:02.664 - 00:32:03.058, Speaker C: Yes.
00:32:03.144 - 00:32:07.574, Speaker B: So Coinbase pay is Coinbase's own onramp, and it does support just ETH and.
00:32:07.612 - 00:32:10.406, Speaker C: CBE today, but I think that was.
00:32:10.428 - 00:32:19.260, Speaker B: Turned on like, two days ago. So definitely developing. We do have a couple on ramp providers, but they kind of have control of their own marketing of when they're going to announce support.
00:32:25.430 - 00:32:30.034, Speaker E: Okay, awesome. Yeah.
00:32:30.072 - 00:32:53.930, Speaker A: So we're a little over time now. Thank you, Ryan and Carl, for the great presentation workshop for the hackers that attended. Thank you all for attending. And just a reminder that Project Check in One is due later today, so take advantage of that opportunity to submit your project current status and get feedback from partners and mentors on it. Cheers. Thank you all. Have a great rest of the day and happy hacking.
00:32:53.930 - 00:32:54.950, Speaker A: Bye.
