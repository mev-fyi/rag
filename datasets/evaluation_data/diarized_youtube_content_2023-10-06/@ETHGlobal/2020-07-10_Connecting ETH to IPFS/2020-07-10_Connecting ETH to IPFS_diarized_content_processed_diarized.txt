00:00:00.570 - 00:00:13.440, Speaker A: We're closer. We're live.
00:00:18.530 - 00:00:21.146, Speaker B: That's your queue. Go retweet.
00:00:21.338 - 00:00:29.400, Speaker A: Okay. Oh, go retweet, too. Okay, so it's going to show up. I'm looking. We're live. We're retweeting. Wait, I don't see it yet.
00:00:29.400 - 00:00:37.954, Speaker A: It's there. There it is. There it is. Tweeting. Okay. Look at that. We're full circle.
00:00:37.954 - 00:00:43.420, Speaker A: That's a full devil. We went in to end there. I can see it live on Twitter. Retweeted it. Here we are.
00:00:44.510 - 00:00:46.122, Speaker B: Watch yourself. Great.
00:00:46.176 - 00:00:47.034, Speaker A: Yep. Oh, yeah.
00:00:47.072 - 00:01:26.674, Speaker B: All right, quick intro before we get started. Welcome, everybody, to this Hack FS tutorial session with none other than Austin Griffith. If you don't know Austin, he's been building and experimenting and hacking stuff for a few years now in the Ethereum space, and we're very fortunate to have him put together a very specific tutorial just for Hack FS. And he's going to be going through that today. And I know I'm pretty stoked on it. Let's see. Any logistics I have to go over? Staking deadline was yesterday, so hopefully everybody here has staked.
00:01:26.674 - 00:01:56.606, Speaker B: Like I said in other sessions, we're going to start kind of pruning the slack to people that are going to stay around for the next 30 days or so. I keep forgetting that we're already at the end of week one, which is pretty incredible. It's already going fast, so it's going to be not 30 days, but three ish more weeks until submission. So exciting. It's moving fast. We're learning stuff. And Austin is going to be going through his tutorial in a minute.
00:01:56.606 - 00:02:18.920, Speaker B: But before that, let's just get a quick poll of the audience. Give me if everybody could turn on their video. If you can't, that's okay. But if you are able to, that's fine. Let's see if you've heard of or used. Well, let's stick with used. Austin, do you want to do used or heard of?
00:02:20.890 - 00:02:31.214, Speaker A: Is this the ENS one? No, ether's? Yeah, whichever one you're using, basically your preference, even if it's just heard of or something. Whatever your preference is.
00:02:31.252 - 00:02:45.410, Speaker B: Have you used or heard of web3? Just give a little wave with your hand, all right? And then if you've used or heard of Ethers JS, give a little wave.
00:02:46.150 - 00:02:46.514, Speaker A: Okay.
00:02:46.552 - 00:03:15.562, Speaker B: A little bit more people for web3. All right. Give me a wave if you know what ENS names are. Okay. Give me a wave if you own an ENS name. Austin has 300 ENS. Does it count if I lost the wallet? You own it in your heart.
00:03:15.562 - 00:03:27.470, Speaker B: How about that? All right, cool. That's a good sampling. Got some idea of people's experience, Austin? I'm done.
00:03:27.540 - 00:04:00.698, Speaker A: That's great. Is it ready? Okay. All right. Let me so hi, I'm Austin Griffith, a builder in the space. I have put together a ton of projects. Many of them were failures, and that's part of how this hackathon process works, right? You'll build a lot of things before you find something that really sticks, and that's just part of the grit that it takes to work in the decentralized web. So let me just share screenshot or screen here.
00:04:00.698 - 00:04:52.826, Speaker A: And I should have the Hack FS website. We good. So I wanted to do a tutorial that would prepare you for Hack FS in terms of being able to build something. So if you're interested in the fundamentals, just kind of how web3 works, how Ethereum works, this is a good place to start. I would go to ETH build. This is a pretty fun video, but then after the fun promotional video, there's going to be a lot of good content there that just talks about what the heck is a key pair, how is a distributed ledger different than blockchain, and how did we get to there and how proof of work kind of changed things. And there's just a lot of little tidbits here that will get you a lot more context into how Ethereum works and then kind of how smart contracts and transactions and all that work.
00:04:52.826 - 00:05:12.990, Speaker A: But I won't dive into that stuff. I'm going to assume that we kind of have our bases covered in terms of the fundamentals and we're going to move to how the heck do I build a product in a couple of weeks on top of Ethereum and IPFS? So I would start with this tutorial, which I will paste into chat.
00:05:13.730 - 00:05:28.450, Speaker B: Sorry to interrupt, but I don't know if you mentioned it, but if people do have questions, just, oh, yes. Either drop it in the chat I think that's probably the best way. Either drop it in the chat or raise your hand and then Austin will hopefully see that and they can pause.
00:05:29.670 - 00:05:34.246, Speaker A: Yeah, for sure. Chat is hard to find when you're sharing your got it. Okay.
00:05:34.428 - 00:05:35.160, Speaker B: Yes.
00:05:35.690 - 00:05:58.430, Speaker A: Oh, there we go. Okay, so that is the first tutorial. It used to be called like, IPFS too long, didn't read IPFS Ethereum. I changed it to Connecting ETH to IPFS to be a little clearer about what we're doing. But we're going to just kind of run through this today, kind of step by step. Take our time, please ask questions. Let's just get started.
00:05:58.430 - 00:06:25.560, Speaker A: So I do a speed run where I do this very quickly. This will be a little bit slower and we can kind of talk about it a little bit more. So the prerequisites are you're going to need node, I think version ten or greater yarn and get all of these links will take you right to those. Again, I talked about kind of core Ethereum concepts. There's some links there in the article to go check that out. What if we make this a little bit bigger? There we go. Okay, so I'm just going to clone this down and we'll get started.
00:06:25.560 - 00:06:46.110, Speaker A: Let me get a console over here and get it zoomed in. All right. That's too big. Too big. Okay. So we're going to clone I already have a Hack FS. Let's name it something else.
00:06:46.110 - 00:07:13.494, Speaker A: This will be IPFS demo. Okay. And it'll take a while to install, so we can kind of look through it as we get to it. But this is scaffold ETH. Scaffold ETH is not technically a product itself, but more like a stack of existing products. Kind of like a lamp stack. We'll do, let's see, we need to check out the IPFS example and we need to yarn install.
00:07:13.494 - 00:07:36.814, Speaker A: Okay, so this is going to take a bit to run. We'll keep that over there. But while we're at it, we'll bring up a new console and we'll just go look at the code just to get familiar with the code. So OOH, that's going to be hard to see. You'll have to trust me here. I bet that's pretty hard to see. But we've got a Biddler folder right here and we've got a React app folder here.
00:07:36.814 - 00:08:08.120, Speaker A: Those are your two main directories. Within the Biddler folder you'll find a contracts folder and there is our Attester. So we're going to make a smart contract called a tester that will let us write stuff to the Ethereum chain to attest to those strings. And then over here in the React app, we have the source app JS. And this is your front end application. If you're familiar with React development, you'll be right at home with this. We're going to get into the hooks and components a little bit more.
00:08:08.120 - 00:08:41.566, Speaker A: It looks like our installation finished. Now you might be like, oh no, you got a giant error, I've got to fix this. Actually, this giant error is an issue with dependencies, with script, with old node. You're actually fine. It's a warning. You should be able to do a yarn start and fire up your front end. But this will spin out of control if it gets set up because there's a couple more instructions and you'll see those in here, it's going to say, be careful, your CPU will go nuts.
00:08:41.566 - 00:08:59.526, Speaker A: You also need to do a yarn run chain. Okay. And that's going to fire up your blockchain. And that is backed by Biddler. And Biddler is a wonderful speaking of the stack, the L in my lamp stack is Biddler. It's my b, I guess. I think they're changing their name, so we'll see what think.
00:08:59.526 - 00:09:29.090, Speaker A: I think it's going to end up being an H. That's a low key inside knowledge. But Biddler is up and running now. We have accounts that are loaded up with ETH. This is similar to Ganache or other kind of local blockchains that you can have up and running. And then once we have all of that, we're going to do a yarn run deploy and let me zoom in on that. That will take our smart contract, compile it into bytecode and push that bytecode to our local chain.
00:09:29.090 - 00:10:06.558, Speaker A: And if everything works, we should have an Ethereum app that comes up and I'm just going to bring it up here and let's see. Can I zoom in a little bit? Will it look okay? It looks okay. So this is our Attester, and before we get into the code, let's just see how it works. Basically, you can take a bunch of data. You can type in hello world. This can be image data, this could be compressed data, this could be a whole number of types of data. But basically what you do is you push that up to IPFS and we'll see that API in a second.
00:10:06.558 - 00:10:35.014, Speaker A: But basically that goes up to IPFS and comes back with a hash. So this is how IPFS works. You give it some data and it's content addressable. So whatever data you put in there, it basically takes a fingerprint of that data and gives it back to you. And what I can do with this fingerprint now is take this somewhere else, some kind of disinterested third party, some gateway that is also reading off of this chain. And there we go. We see.
00:10:35.014 - 00:11:02.430, Speaker A: Hello world. If I zoom way in cool. Oh man. Is it going to be zoomed way in if I reload? Okay, good. How does that work? What are we doing here? What's going on here while we're pushing stuff to IPFS? Well, if we go look at this app, it's going to give us the code is actually very simple. For pushing something to IPFS, we bring in the client. So you'll do like an NPM install of this client, then you bring it into your code.
00:11:02.430 - 00:11:29.606, Speaker A: And we're doing that here somewhere? Yeah, right there. Okay. And then you're going to need to connect to some node. If we think of IPFS, like Ethereum, we have all these distributed nodes all over the place. And you have to connect to one to kind of start participating in the network. And you're going to use a key pair to sign things just like you did with an Ethereum key. Also, so once you're connected to the network, we're going to connect through Infura.
00:11:29.606 - 00:12:13.058, Speaker A: So Infuria, just like they provide us with an endpoint to Mainnet or Rinkabee, we're going to also be able to connect to Infura to deploy stuff to IPFS. And that's that next line there. And it's a little slower, but it's a really nice kind of public offering to have that there available so everyone doesn't have to run their own node. Then we can do an IPFS git and we can get some hash, just like I pushed that hash to that website and got it back. Or we can do an ad. So the API is very, very simple. You bring in the library, you connect to some node that's IPFS, and you do gits and ads.
00:12:13.058 - 00:12:47.826, Speaker A: You do gits and ads. I got to do that the right direction. Okay, so let's dive into this a little bit more and see what the blockchain side of this looks like. So going back to our we, once we have something, once we have our Hello, World pushed up to IPFS and we get the fingerprint back. Oh, also if I change this at all, like exclamation point, that's going to change our hash. See that? If I do that, it's a little bit different hash. So since things are content addressable, since you're getting a fingerprint of the data, the data changes, the fingerprint changes.
00:12:47.826 - 00:12:57.454, Speaker A: Makes sense. Content addressable stuff. Content. Content addressable content. Happy Bota Friday. Okay, here we go. So now we want to attest to this on chain.
00:12:57.454 - 00:13:50.134, Speaker A: What we want to do is let's go look at our contract. We have a hash of a thing that everyone else has, and now we want to kind of sign that hash in a way that proves on Ethereum that we're attesting to it. And so what I did is set up this simple contract that does nothing more than has an attest function that takes in a hash and then using the message sender, which is whoever signs that transaction, we save that and we emit an event. So if I go over here and I'm going to get out of MetaMask at first, okay, so it's not going to let us do anything. Oh, wait, we need to do Hello World again, and we need to upload that to IPFS and get our hash back, but it's not going to let us do anything because we don't have any gas on the network. So the first thing you do with Scaffold ETH usually is dive in and give yourself some local testnet ETH. And you can see that kind of flow in there.
00:13:50.134 - 00:14:10.694, Speaker A: Right now. When we attest to this, it's going to make a call to this contract and it's going to pass in that hash. And then we can see if we read from our chain, we can see that this address is attesting to this information. Cool. And there it is. That's probably not that's brinkabee or localhost. Looks like I deployed that to production earlier.
00:14:10.694 - 00:14:42.822, Speaker A: Okay, now let's dive into what the heck is going on here. So this is a Scaffold ETH app, and it has a lot of stuff provided for you. You'll notice that if we get in and look at the wallet, there's an address entry. And I can do things like ENS resolution, right? I can do things like click here and it'll be my scanner, I think. Yeah, hello, right. So I can scan a QR code, things like, oh, I can put in 100 USD and I can swap that back and forth between ETH. Just little nice things about building an app.
00:14:42.822 - 00:15:17.070, Speaker A: A lot of those UI UX niceties that you'll get scaffold E has those for you here. When you want to create a component, let's go to Scaffold ETH and let's look at those components. If you want to create that address endpoint, it's just an address input component that you put in. So there's a lot of components that are already made for you. And if you're getting started with Scaffold ETH, I would start with this programming decentralized money. Let me paste that into Chat. Also, this gets you just a good kickoff of how Scaffold ETH works and how it compiles.
00:15:17.070 - 00:16:03.050, Speaker A: The contracts are compiled and along with these components that you have that are really nice token balance providers, faucets, blockies balance input, all the stuff that you find yourself using over and over again. When you build a decentralized application, those components are all here for you. PR is welcome if you want to help out. And then hooks are the second thing. So a lot of times you will need to say, let's see, we're getting the gas price here, right? If we want to get the gas price, yes, you could go to an API and you could build the react components yourself that will go out and get that stuff. But wouldn't it be nice if something was already built for you and that's the gas price hook or the exchange hook. Or maybe you need to load a contract or read from a contract.
00:16:03.050 - 00:16:24.866, Speaker A: This contract reader hook is really useful. I use it all the time. It's just like, go to this contract, tell me what the value is for this, and then pull for it and keep it up to date. And that is so nice to just be able to say, use contract reader this contract, this is what I want. And then I just have it in my app. And if you don't have that, you'll find yourself building it. So instead of reinventing the wheel, try using some of these hooks.
00:16:24.866 - 00:16:48.046, Speaker A: Same thing. If you need the block number, you need a balance. The timestamp from the chain, token balance, all that stuff is here. You need your transaction count. So there's hooks and there's components. Getting started with Scaffold ETH would be decentralized programmable money, but once you get here, you're going to be familiar with, okay, I've got a contract. I can compile it.
00:16:48.046 - 00:17:12.854, Speaker A: It automatically injects itself into my front end. I can talk to my contract here. We're talking to IPFS in this example. Basically, we've got sort of a working app sort of ready to go, right? We can put in any data. We can upload that to IPFS using that code. Let's see if I can find it before it gets back. That code right here.
00:17:12.854 - 00:17:37.066, Speaker A: We're using this add to IPFS function and it's still going. So it takes like 15 or 20 seconds to put. So this is brand new content. And so it went back and forth and said, oh, I got to really upload this thing. And so now that is going to take some time going through infuria, and we'll dive into kind of how we can do that better at the end of this call. Okay, so there we go. For the first time ever, that data is probably written.
00:17:37.066 - 00:17:54.226, Speaker A: And if I go to IPFS Ioips this hash, it's probably oh, put any data in that's pretty quick. Pretty quick. Okay, cool. And then if we wanted to attest to that on chain, we just make a transaction. Okay. Basically we have our app. It's built.
00:17:54.226 - 00:18:28.654, Speaker A: Let me go to MetaMask. I know I'm going to need to reset it. So if you use MetaMask so basically to bring MetaMask in, there's a connect button up here and you connect your MetaMask and it's going to detect things like, your know, address displays. Do that automatically with Scaffold ETH, but you'll need to make sure you're on local host. And one last thing. You have to do this all the time, but go to Settings Advance, and you'll have to reset your account because the nonce needs to go back to zero every time you restart this chain. And there's really not a great way to do that right now.
00:18:28.654 - 00:18:53.442, Speaker A: So that's just one of the little gotchas kind of why we go through this. But if I reset this, it's going to set my account nonce back to zero. Now I can give myself some money from the chain. You'll see that happening over here. And then I can say, hello, world, and we'll get that back quickly. And now I can attest to that on chain and all the way over to the left for some reason. Let me go get that MetaMask dialog.
00:18:53.442 - 00:19:14.334, Speaker A: Here it is. And we can confirm and that's going to write to my local chain and notice bonus points. We've got a console log that's saying what address attests to what? And that's coming out of our contract right here. Console log right in. Solidity boom. Props to the Biddler guys for that. I think they had to rebuild the whole EVM just to get that to work.
00:19:14.334 - 00:19:24.850, Speaker A: But props there. Look at that. I got a console log. I'm attesting to something with my MetaMask. Basically, we're done with part one. We've kind of figured it out. We've used it with both.
00:19:24.850 - 00:19:45.382, Speaker A: Now you've got a DAP. You've created it with Scaffold ETH. Actually, let's take a second to pause and see if I have any questions here. Local host crypto wallets. Building locally. Yeah, building locally is some kind of trick. You kind of want to have your own chain and everything up.
00:19:45.382 - 00:20:14.398, Speaker A: If you do need to interface with other things, you kind of want to use the fork function from Ganache until Bitler gets that built in. Yeah. The MetaMask. I wish MetaMask could do a lot of things. We're going to get into the ENS app. It's going to even be more complicated than where can I find more about the nonce issue? Okay, so basically there's not a bunch to it. Basically, when I restart this, my transaction count is going to go back to zero.
00:20:14.398 - 00:20:33.222, Speaker A: Right. But MetaMask is keeping track of my transaction count over here. And so I just need to reset that back to zero. If I try to make a transaction with a nonce of three. It just won't be valid on the chain. And I think they're working through something. But I talked to the guys this morning, it's still an open issue there.
00:20:33.222 - 00:20:56.080, Speaker A: So what you'll do, honestly, you'll reset this. You'll get in here, you'll stop messing around with Scaffold ETH, you'll connect with MetaMask and it'll fail. And you'll go, what the heck is it failing for? First thing you should check is resetting that nonce. And then the second thing you should check is your gas price. And if you have both of those, it's probably going to work. It's probably a failure within your contract. And you can debug that really easily with Biddler, which is awesome.
00:20:56.080 - 00:21:33.766, Speaker A: Okay, so now we have built an app. We've used Scaffold ETH, we've used all these tasty hooks and fancy components to put together a decentralized application. Now what is next? How do we deploy that? Right? Like, it's all working locally. What do we do to go to production? And so what we'll do is we'll go to just Rinkabee and IPFS for our production deployment. But the motions that we'll go through here, you could just replace Rinkabee with mainnet, and it's going to work the same. It's just going to cost a lot more and take a little bit more time. But we'll go through those steps as if Rinkobee is mainnet.
00:21:33.766 - 00:21:59.540, Speaker A: But I'll just use Rinkabee now because it's cheaper and quicker. Okay, so this is decentralized deployment. This is basically part two. So if you go to this and scroll down, there's probably part two of two. And this is part one of two. And I just deployed this this morning. So there's probably yes, see that error you're getting might be, did you do an NPM? You need to do a yarn install.
00:21:59.540 - 00:22:28.842, Speaker A: Whoever is getting that error, you want to do a yarn install first? Okay, here is the second article. This article is yarn. Ad. I don't think I understand. Yeah, that looks like it's doing a we're doing two different things here. Instead of yarn install, yarn add. Yes, do yarn install.
00:22:28.842 - 00:22:41.534, Speaker A: There we go. Okay, here we go. Part two. Part two. Time to deploy. So we've got our app built. It's accessing our local blockchain, and it is actually deploying the text to IPFS and coming back.
00:22:41.534 - 00:23:21.178, Speaker A: And we're attesting to that, right? But we're attesting to it locally. We want to attest to that on a higher value chain. And so how do we deploy? First our contract, but then also our app to something that basically what we want to do is create something that even we can't stop, right? We want to really build something that's unstoppable. And let's do that. So let's see, the first thing we need to do is put our smart contract out on a real chain. And what you'll need to edit, and if you follow these instructions, it'll tell you packages, Biddler, Biddler config, which is right here. Your Biddler config is going to have some stuff from me in here that helps you send stuff and get balances.
00:23:21.178 - 00:24:00.878, Speaker A: For instance, I can say yarn run balance of some address and it's going to tell me what that address's balance is. I could do yarn run send and send some money from one to the other, get the block number, just little handy things like getting the account. But at the bottom you will see that it's bringing in a mnemonic and it's connecting to whatever network you're using. Your compiler is there too if you ever get too deep into things. But what we need to do is point this thing instead of at Localhost, let's point it at Rinkavi. Okay. Now we're going to need a mnemonic.
00:24:00.878 - 00:24:23.406, Speaker A: It's going to read this. So this is going to fail because it doesn't have what's called an HD wallet. What we need to do is basically create an account. So let's go to am I missing something in Chat? Let me find yeah, post your question.
00:24:23.508 - 00:24:38.674, Speaker B: I don't think you can also unmute too karate if you want. Yeah. My question was I created a new crypto wallet for this lab in advance. And so I didn't see how you connected that wallet to the app that we built. So I grabbed some of the accounts of the deploy.
00:24:38.722 - 00:24:38.934, Speaker A: Right.
00:24:38.972 - 00:24:48.614, Speaker B: So we deployed the started the chain. We have all the accounts in there. And I'm trying to use account with the app. This is me pointing at the app that I started. So I'm not seeing where that is, basically.
00:24:48.732 - 00:25:03.550, Speaker A: So that account from the app is a burner wallet. Basically, if you open up localhost in Incognito, you're just going to get an account and all you got to do is just send that account some money from the faucet. Is that what you're asking about?
00:25:03.620 - 00:25:07.854, Speaker B: That was absolutely the question I asked. That didn't seem to work, but I'll try it again.
00:25:07.972 - 00:25:09.200, Speaker A: Perfect. Yeah.
00:25:13.410 - 00:25:14.110, Speaker B: Thanks.
00:25:14.260 - 00:25:33.186, Speaker A: Cool. Awesome red. No problem. Okay, it's going to get a little tricky here because we're going to have to do a little bit of magic. But what we're going to need to do is what Biddler is going to need, it's an HD wallet. It's what it's called. And what it wants to do is it needs to deploy this thing to Rinkabee.
00:25:33.186 - 00:25:51.102, Speaker A: So what we're going to need to do is create an account that has some Rinkabee ETH on it. And so what we'll do I think I have a handy ETH build laying around here somewhere. Actually. Let me just go to Sandbox ETH build and see if it just shows up. It might already be here. Yes. Okay, here it is.
00:25:51.102 - 00:26:41.734, Speaker A: Let me just share this with everyone right here in the Chat if you're interested. So what we're going to do is if you're familiar with a mnemonic, it's basically this phrase, right? And this phrase is used to derive a private key, which then is used to derive a public key, which then is used to derive an Ethereum address. And if you want to create an account on Ethereum, all you have to do is generate these random 64 characters to get that account. And if you do a good job of generating a random account, no one's ever going to be able to find it. So what we use is a seed phrase. We use a twelve word seed phrase to generate this private key. And what that is, is it just makes it a lot easier to share this or to save this or to put it in our underwear drawer to be safe.
00:26:41.734 - 00:27:17.042, Speaker A: Fish right. So what we want to do now is I'm going to hide that so no one can see it. And I'm going to generate one. All right, so here is going to be our address, right? And what I want to do is download that and I'm going to put that out on our desktop and call it Mnemonic TXT. This is cool. This is some real blockchain stuff right here. Okay, so now we have a twelve word seed phrase.
00:27:17.042 - 00:27:49.250, Speaker A: And just to verify, let's just keep an eye on let's put it here. Let's put it here. Okay, so I'm just saving our address and then I'm going to regenerate it so it blows away whatever changes we have. Now if I bring in this mnemonic and I drop it in here oops, I did something wrong there. Bring in this mnemonic and I drop it in, we should have that same picture. Okay, so now we reliably have this mnemonic. What we want to do is put it in this folder.
00:27:49.250 - 00:28:15.782, Speaker A: Bidler. So now our mnemonic is here. So now when I try to deploy on Rinkabee, it's going to use that address. But that address doesn't have any ETH yet on Rinkabee. So let's send it some and we can see that by this guy is actually going out. It's taking the key pair, getting the address, asking Rinkabee for its balance and getting zero. So let's send it some Rink real quick so we have money to deploy this contract.
00:28:15.782 - 00:28:35.566, Speaker A: So I'll change my network to Rinkabee. I'll hit send, I'll paste this in, have to put that or the UI locks up. Thank you, MetaMask. And let's send zero point. What do we need? Five. That should be enough, right? Connect send. I hope that's enough ETH.
00:28:35.566 - 00:28:55.160, Speaker A: We'll see. So in 15 seconds we should see that go through. And then we're watching this number here in ETH build. Come on, testnet blockchain. Come on, testnet blockchain. Wow. Okay.
00:28:55.160 - 00:29:12.362, Speaker A: Still waiting for a Rinkabee transaction. There we go. Confirmed. Okay, so now this guy should eventually load and I'm worried about this Rinkabee. Let's try this real quick just in case. Just in case that infuria is overloaded. Yeah, something is not.
00:29:12.362 - 00:29:33.534, Speaker A: Oh no, we have the wrong name here. We need to put our. Mnemonic file back in here. Show and finder. Sorry, everybody. We need to get that Mnemonic. Oh, where did it go? Oh, it's lost in my windows.
00:29:33.534 - 00:29:44.680, Speaker A: Here we go. Here we go. Got it. Okay, we need to drop this guy in right here. And then it'll set the address right. And then it should be reading from the chain correctly. It is not.
00:29:44.680 - 00:30:02.438, Speaker A: Let's set this back to Rinkov. Making sure I didn't do something wrong there. Oh, there it is. Finally, everybody, we got it. Okay, so there we have a Rinkavi balance. I could have just copied this and gone to Rinkavi, but I had to do it the hard way for some reason. If I paste that in, we should see this guy has 0.5
00:30:02.438 - 00:30:16.270, Speaker A: ether. Okay, we are ready to deploy. Sorry for the slowness. Here we go. IPFS demo. So normally we just did a yarn run deploy and it shipped our contract to our local chain. That's because we had oh, there's my mnemonic.
00:30:16.270 - 00:30:28.306, Speaker A: Don't go get it. Give me a second to deploy this before you fill my Rinkabee e. Okay, that looks good. We've got this in here. Okay, I'm going to go for it. I'm going to say we want to use Rinkabee to do our deployment. This is saved.
00:30:28.306 - 00:30:48.940, Speaker A: Here we go. Yarn run deploy. Now, hopefully, this will compile and deploy our contract. And this could be oh, no. Okay, we're not getting a good response. That means that my inferior key is probably slammed, which I have a lot laying around. Let me find another one.
00:30:48.940 - 00:31:05.442, Speaker A: Okay, here we go. This one. All right, let's try again with a new infura key. If you're interested, there's a link to infuria. Oh, it's taking longer now. It's working. It's working.
00:31:05.442 - 00:31:23.270, Speaker A: We're deploying. We're deploying. 15 seconds. Boom. There we go. Okay, so now let me just paste this into Chat. You guys can actually take that and put it into Rinkabee ether scan.
00:31:23.270 - 00:31:44.638, Speaker A: And it should think that that is a contract. Okay. And also, this is injected into our front end. So now that our front end is set up, if I do, I think let's just go back to the we use the ETH build. We got our twelve word seed phrase. We did the deploy. Okay, so that's going to take a little bit longer now.
00:31:44.638 - 00:32:00.162, Speaker A: Yeah, we want to go look at our address in Rinkabee and see that this thing is out there and live. There we go. Yes, it is a contract. It thinks it's a contract. That's good. It knows it's a contract. Cool.
00:32:00.162 - 00:32:18.598, Speaker A: And we know who created it. Okay, cool. So a disinterested third party has validated the fact that we have uploaded our contract and our contract is live. That could have been mainnet. It would have just cost a little bit more. The steps are exactly the same. You just get your main net thing here and put it in there.
00:32:18.598 - 00:32:42.634, Speaker A: Now our contract is up and the artifacts for our contract, like the address and the API are injected into our front end. So our front end needs to be we'll make one more change. And I believe we talk about that next. Oh, yeah, if you want, we can prove that our front end has the current address. Look at this. So we're looking in the React app. Remember, there's two packages.
00:32:42.634 - 00:33:33.054, Speaker A: There's Biddler, where our contract is, and then there's the React app, where our app lives. And this is just proving that the Biddler artifacts have been ejected into our app. And our app will basically talk to the Rinkabee contract now. And the problem with that is our Rinkabee isn't our app. Let me go find it. Our app is actually still set to talk to localhost, and I can set the React app provider environment variable, or I can just do something like this where I'm just going to snag this and tell this to go talk to Rinkabee instead. And just knowing that this might be bad, I'm going to go ahead and replace that.
00:33:33.054 - 00:33:59.654, Speaker A: So we have a good token in there. There we go. So now we've got an inferior provider that's talking to Mainnet for things like ENS. We have our local provider that's just hard coded to Rinkabee. So when someone lands on the site, we're going to go talk to Rinkabee to find our Attester contract, and we can test that locally. If I reload here, I'm going to need to make sure I put my MetaMask on Rinkabee. And if I do? Hello, world.
00:33:59.654 - 00:34:39.734, Speaker A: It's going to go to IPFS exactly the same. But now when we attest to this, we're going to be Attesting on a real chain, not a local chain, even though it's a test net, could be main net, but all real kind of chain things now apply. Right? I'm going to have to wait for that block to get mined. I'm going to have to wait for my transaction to go through. But now you could go look at that contract, and you could see that I attested to Hello World as soon as this transaction comes through. So even if I was being censored in so many different ways, you guys could still get to this and see, you could get to the contract and you could get to the IPFS information. Okay, so now we've got our front end talking to Rinkavi now, and it works.
00:34:39.734 - 00:34:52.534, Speaker A: And we've tested it locally. Now we want to deploy our code. So we'll need to do a yarn run build. And this will take a second. I'm not going to lie. Sometimes you run out of Ram. You have to have a decent machine.
00:34:52.534 - 00:35:14.574, Speaker A: There's a lot of dependencies that go into building a decentralized application. So when you package it up and get it ready in a static site, it just will take a while. Let's see. Any big questions? Let's see. Contract integration. Do you have to build. Oh, the contract injection.
00:35:14.574 - 00:35:48.970, Speaker A: So the contract injection functionality is automatic and part of Scaffold ETH. If you go look in the Biddler folder here, there's scripts, there's a deploy script. And what you'll find is right now it's doing an auto deploy. It's taking all the contracts and just shooting them to the chain. You'll end up saying, okay, I want to actually deploy a token and then take that address and put it into the constructor of another contract. So you'll have a more exotic deploy scheme and you can kind of comment out this auto deploy and start customizing it. But out of the box, Scaffold ETH just tries to figure it out for you and auto deploy it.
00:35:48.970 - 00:36:32.714, Speaker A: Same thing with the publish. The publish is just going to read biddler's artifacts and then pushing those into your Create React app or Create ETH app is what it is. That's the kind of the second letter in the stack is Create ETH app by Paul Berg. It's like kind of this minimalistic it's like Create react app for Ethereum where you can bring in some kind of abi and of I think Paul's working right now on kind of creating. What does the template scheme look like? When I bring in uniswap, I'm bringing in an address and some other artifacts. But can we standardize that? And once he standardizes that, I'm going to standardize this publish to use whatever method he comes up. Like, it's kind of raw right now.
00:36:32.714 - 00:36:48.330, Speaker A: Just trying to figure it out. But good kill in time because we got our app to deploy. So now we have a built app. If I do an LS, we can find that. There is this build folder. It's buried in there. Let's see if I do an LS packages.
00:36:48.330 - 00:37:08.054, Speaker A: Let's see. React app, no build. There we go. This should list. There we go. So that is a list of our packaged up app. Now, if you're familiar with a static app, you can put that anywhere, right? I think in here I talk about this is normally when you're building an app, you would yarn run surge, you would yarn run S three.
00:37:08.054 - 00:38:00.658, Speaker A: You would get that static content out to some edge servers, right, where it's hosted, where basically a DDoS isn't even going to shut it down. It should be able to handle some traffic, but we could still shut it down, right? Like if I deployed this Attester and I attested to I love blue popsicles, and the next day I decided I like purple popsicles and I want to shut everything down. If I've deployed this to a static place where anybody can get to, I just go take it down. Right? But the point of a good Attestation and something important is that no one can mess with it, right? And that's what we want to do. Basically, these traditional static deployers can be shut down by at least you, if not some other folks. Definitely running servers and stuff, amazon regions and whatnot. So what we're going to do is use IPFS.
00:38:00.658 - 00:38:30.074, Speaker A: Just like we're using IPFS to attest to some information. Let's actually put the Attester itself on IPFS. So you don't even have to go to right now. You could go to Scaffold ETH. Let's see what's a good example of the Instant Wallet, right? This is something that I'm building with scaffold ETH. Right? This is just hosted on AWS, right? I could shut that down. Or the Nifty Ink project that we're working on that's not in IPFS.
00:38:30.074 - 00:38:58.440, Speaker A: This stuff is stored on a server and could easily get shut down. I don't know exactly where I was going with that, but let's jump into IPFS. Just like we're using Infura to push our messages, our Attestations, we will push our code. And that's actually all ready written for you in Scaffold ETH. You don't need to do anything other than just do a yarn run IPFS. And so let's go find that deployment. I wrote it this morning.
00:38:58.440 - 00:39:25.582, Speaker A: It's in here somewhere. IPFS JS okay. And there's a lot of stuff commented out, but we can see again, oh, we're bringing in the IPFS API. We're talking to infura. We're doing a little bit of stuff where we make it recursive so we can send a whole block. But basically this and this could take some time. This is going to take our website and it's going to one asset at a time, push each thing into IPFS in a recursive structure.
00:39:25.582 - 00:39:53.562, Speaker A: So we're left with basically a hash pointing to the directory of all the information and all of it lives in IPFS. But this could take longer than a demo is worth waiting. Okay, so let's just imagine that just went to IPFS. Let's see what the next steps are. Yeah, so basically it's going to go for a while and then it's going to give us back this CID, which is that I think it's called a dag. I don't know a ton about IPFS. There's like a hash and a dag and I don't know the difference.
00:39:53.562 - 00:40:32.966, Speaker A: But if you just think about it as there's a hash addressing your content, this is the thing that is the address to your content. I could take this right here and I could put this into IPFS IO and I could go get this information. Any questions while we wait for oh, no, we got a gateway timeout. Okay, so Infuria is not even letting us push content to them. I've probably hammered on it too hard, which is why we're going to need to get into hard mode in the first place. Okay, so if this doesn't even let's try it again. Let's see.
00:40:32.966 - 00:40:46.742, Speaker A: Can I set the timeout? The timeout set at zero. I mean, it's just going to wait a while. Come on, IPFS. Actually, I'm going to shortcut this. Here's what I'm going to do. Here's what I'm going to do. I'm going to pull an audible.
00:40:46.742 - 00:41:06.610, Speaker A: I'm going to bring in a little secret. Let's see what's it called. It's called pinner. Bring in a secret pinner. What's it called? Is it nifty ink? I think this is it. And this is probably wide open and anyone can hit this, but let's try using my own pinning node. No.
00:41:06.610 - 00:41:36.954, Speaker A: Okay, so it's not liking that. Maybe it's go there we go. Okay, so I happen to be running my own IPFS node just like infuria Is, but it's set up just for me. And I'm going to show you how to do that in a second. But you can see now it's pushing those static assets out. And there we go. We got this hash back and we could even locally tell our own, oh, no, we don't have a local node yet.
00:41:36.954 - 00:42:02.482, Speaker A: We're not ready for that yet. Okay, so this came back and we could double check it, right? Just like we're going to Ether Scan and we're going to that kind of disinterested third party. You can find any IPFS gateway and you could type that in and you could wait for a long time. It's not even there's a package. There's a gotcha here. Let me see if I can find it. So I get this right.
00:42:02.482 - 00:42:21.354, Speaker A: It's homepage. Okay, you need to in your react app, set homepage dots. And I didn't even put that in the article. Let me put that in my notes to make sure that goes in the article. Homepage dot. Okay. The homepage dot basically routes it locally so you won't get this weird dead page.
00:42:21.354 - 00:42:57.190, Speaker A: Okay, so let's see. We're going to save that. We're going to Yarn Run Build and Yarn Run IPFS, but we're running out of time, so I need to probably jump forward a little bit. Let's see, we have let's look at the article. Where are we in the article? Okay, ENS. So the next thing we want to do is if we get this working and actually this will work without that, so I can just grab this. So ENS ENS is like DNS It's basically you can ask for an address.
00:42:57.190 - 00:43:27.070, Speaker A: It does the thing where it translates this nice name into an ugly name. Like for have, you can go to Google IO instead of having to put in Google's IP address. Right? So ENS will do the same thing as DNS for this hash right here, so we can use this as a content hash. So I'm going to go to ENS. And you don't want to do a live demo on the ENS. Let's see. So let's get it on mainnet.
00:43:27.070 - 00:43:49.106, Speaker A: The demo gods are laughing at me right now, trying to pull up the ENS app, but we're going to go for it. All right. If you go to you can basically register anything. ETH. I think it has to be a certain length. I've already registered Scaffold ETH, and I'm going to just set up a subdomain. There we go.
00:43:49.106 - 00:44:15.214, Speaker A: So built, and it's going to be ahead of me. Okay, so this will be let's just call it Hack FS. Now, you got to be very careful here. I'm going to hit save, and a metamass dialog is going to come up way over here, and the gas is not going to be set. So you're going to have to manually set your gas like it's 2017 and it's going to cost me. Do this, but here it goes. Okay, now, I don't think you could leave the page.
00:44:15.214 - 00:44:30.560, Speaker A: Like, you got to be really careful with this, but I think you don't leave the page for the registration. Like the commit reveal stuff. You're probably fine once you fire that off to leave the page, but I mean, like, superstition. I'm not even touching anything electric right now.
00:44:31.410 - 00:44:32.234, Speaker B: Hopefully.
00:44:32.362 - 00:44:46.280, Speaker A: There we go. Okay. A good old what? What is that? Why did it get set to the name and not that there's no resolver? Oh, man.
00:44:47.210 - 00:44:48.374, Speaker B: This is great, by the way.
00:44:48.412 - 00:44:59.258, Speaker A: Austin. Yeah. This is nice. What is that? Okay, let me try that one more time. I don't even know. One more time. I would like to register this.
00:44:59.258 - 00:45:25.282, Speaker A: I'm going to hit save. I'm going to grab my MetaMask from all the way over here. I'm going to manually edit the gas so it goes quicker, and save and confirm and another transaction goes. What is this? I mean, what is even going on? One more time. One more time. Worked. Okay, so the trick with any web, three app.
00:45:25.282 - 00:45:29.074, Speaker A: Try at least three times. You never know. Here we go.
00:45:29.192 - 00:45:30.290, Speaker B: Higher gas.
00:45:30.450 - 00:45:47.482, Speaker A: Yeah. Always up the gas, but I think I was, like, 40 something there. We can go look at the transaction. Something weird happened with the way it translated the text to Hex, I think. Okay, we are very close here now. It already has a resolver set. You'll see over here, a record.
00:45:47.482 - 00:46:31.878, Speaker A: We're looking for content. Content. What can we do? Well, we can go back and we can find this hash that we deployed to IPFS. And we can come in here and we can say, this is an IPFS content hash and we can save and we can go grab our MetaMask dialog all the way over to the left and we can edit our gas price and make sure it's turned way up, because there we go. All right, praying to the blockchain gods. Let's see what happens here. Hopefully what happens here is we take a name one more time, scaffold E, and we associate it with the content that we put on IPFS.
00:46:31.878 - 00:47:11.222, Speaker A: But that association is also in a smart contract. So we have our smart contracts that we're attesting to something from a front end that's pushed to IPFS and then registered in another smart contract. So all of this stuff, if you were in a place where you could hardly get Internet and everything was censored, you could figure out a way to run an ethereum node and run an IPFS node and do all of this stuff without getting censored. So let's see. Here we go. If I put in what we're linking to oh, here. Let's go to it, right? It would be one more time scaffold e link.
00:47:11.222 - 00:47:29.878, Speaker A: You have to add the link on the end. And there we go. Oh, man. 404 page now found. Okay, so does this work? Let's work backwards. Here's the link it gives us. Oh, wait, there we go.
00:47:29.878 - 00:48:06.870, Speaker A: There it goes to the gateway. And there's our attester. Okay, so then Y link, it's set up here. We can see that we have it linked and the gateway works here. Let me post that into Chat. At least we can see that this guy is very decentralized. Other than that gateway, right? That gateway could go down and we would have to find another gateway.
00:48:06.870 - 00:48:27.486, Speaker A: I'm at a loss for why this that worked earlier isn't working. Okay, we got a speed run. We got to finish it up. Oh, someone else can go to one more time. Let's try that. Let's try that. Do you guys get the app if you go here? Maybe let me try Https just in.
00:48:27.508 - 00:48:28.080, Speaker B: Case.
00:48:33.450 - 00:48:47.258, Speaker A: I'm getting page not found. No one gets the app. Everyone gets 404. Maybe I built something around here. Maybe this? No, because it comes up. I don't know. We're about out of time.
00:48:47.258 - 00:49:19.814, Speaker A: Let's see what is left in this doc. Basically exactly what we did. But normally you will find that you can go to this address, and if you have IPFS, I mean, it's set exactly like I have it. And when you click that, this goes to your gateway. That doesn't go to the gateway. I don't know, when I click this, it goes to the gateway and that works fine. Not sure what's going on here.
00:49:19.814 - 00:49:22.822, Speaker A: Okay, hard mode. Let's finish this up with hard mode. Hello.
00:49:22.876 - 00:49:23.878, Speaker C: It's working.
00:49:24.044 - 00:49:26.650, Speaker A: Yeah, you get it? It works for you.
00:49:26.800 - 00:49:28.060, Speaker C: Yeah, it's working.
00:49:29.630 - 00:49:35.306, Speaker A: So maybe you're closer to the master IPFS node or something. I don't know.
00:49:35.328 - 00:49:36.090, Speaker C: Blockchain board.
00:49:36.160 - 00:49:38.570, Speaker A: I don't know why. I don't know what's going on in the back.
00:49:38.720 - 00:49:40.722, Speaker B: Maybe it just took some time to propagate.
00:49:40.886 - 00:49:50.654, Speaker A: Yeah. By the time you are watching this at home, you should be able to go to one more time scaffold ETH link and see it. It all worked perfect.
00:49:50.852 - 00:49:52.110, Speaker C: Okay, excellent.
00:49:53.090 - 00:50:33.950, Speaker A: All right, so there's kind of a weakness in our chain of stuff here, and that is that we are talking to infuria for a lot of this stuff. Right. What you probably want to do is run your own ethereum node and run your own IPFS node, and it's going to go a lot faster if you're pinning them on your own nodes. So let's just go through get it's called Goipfs. You go download that, you extract it, you CDN and you install it and you'll notice that. Let's see if I can bring up this IPFS we want to run. Damon right.
00:50:33.950 - 00:50:48.482, Speaker A: Let me zoom way in on that. Too far. Here we go. So now I should be able to run a local node. There we go. And so what he's going to do is he's going to swarm up, he's going to have a bunch of peers that he's talking to. They're all going to do their decentralized thing.
00:50:48.482 - 00:51:10.940, Speaker A: No one's the leader. All sorts of problems with what happens when a network is decentralized and there isn't a centralized leader. That very hard. Problems that much smarter people than me are solving. But what we can do now is we can replace anywhere we were talking to IPFS with. Now let's go talk to local host. So let's go try this out.
00:51:10.940 - 00:52:09.070, Speaker A: Let's grab where's my code? Where's my code? Running out of time. Let's grab this. Okay, so instead of talking to my cool penning node, basically we were hoping that we could use this and it would be slow but work. But I think it took so long that let's now use our own local host node and watch how quick this thing can pin this stuff. So now if I do yarn run IPFS, it's basically just pinning it locally, right? And then if someone wants to get that content, they're basically going to have to traverse the network and do all sorts of magic stuff and find my node that has it, and then they grab it and maybe they pin it. So now there's two people holding it, and if you need it I don't know exactly how that all works, but if we were to go ask IPFS Ioipfs what this is, we should get our app.
00:52:09.140 - 00:52:10.094, Speaker B: Yeah, cool.
00:52:10.212 - 00:52:11.230, Speaker A: Oh, whoa.
00:52:14.690 - 00:52:16.734, Speaker B: Look at that, look at.
00:52:16.772 - 00:52:46.066, Speaker A: That, look at that. There we go. There's our attester. Just one more time. Can I do one more time? It come on. No. Okay, now that we are talking to our local host, we can tell it that we want it to pin.
00:52:46.066 - 00:53:13.674, Speaker A: I bet this is the issue. We weren't pinning it, right? Okay. So we were just adding it. We weren't pinning it. So we're going to do a couple of things here. First, I'm going to tell it to just pin to our node immediately, and then we're going to bring in a second phase of IPFS that's called IPNs, and that is IP. It's like a name service, right? So IPNs is a way to have kind of a hash on top of your hash.
00:53:13.674 - 00:53:41.546, Speaker A: So every time we make a change to our app, our hash is going to change. We don't want to have to rewrite to ENS every time that new name. So what we want is an IPNs name in the middle. Kind of unfortunate naming, the way that rolls off the tongue. But what we want to do here is we're going to do IPFS again. Let me make sure I have everything saved over here. But this time, it's going to pin it locally, and then it's going to try to get that name service piece going.
00:53:41.546 - 00:54:11.554, Speaker A: So it's going to take that hash and it's going to try to submit it to IPNs. Now, that is also going to be slow. I'm going to just cut this off since we have very little time. I'm going to point it at my node and I'm going to tell it to Pin and go to IPNs, all that kind of stuff on that node, that's kind of like it's out in the cloud. So I'm assuming people can get to it easier. And then I'm going to do one last ENS set and see if we can get it. But that's basically it.
00:54:11.554 - 00:54:45.386, Speaker A: Once you have the IPNs, then you have basically a nice hash that sits on top of your moving hash and you set your content to that. The final gotcha is this wonderful ENS app does not let you set IPNs yet, so you will have to make a custom transaction to the Smart contract to set it to this value because their lovely form won't let you set it yet. There's an open issue. There's an open issue. I should open up an issue about this gas problem too, but whatever. Okay, I think we're about done. Let's try one more subdomain.
00:54:45.386 - 00:54:55.346, Speaker A: Let's see. Did this thing upload? Yeah, it did. It went to right there. Let's try one more time. My name Scaffold ETH. We got five minutes left. I'm going to open it up for questions.
00:54:55.346 - 00:55:12.850, Speaker A: Anybody out there ask any questions while I'm working on this? I'm open to whatever. What are we going to call this? Testy. Right. Good. Testy save. IPFS is way over here. Go manually.
00:55:12.850 - 00:55:25.962, Speaker A: Set your gas like a peasant. Hit save. It's going to cost me $0.76. Hit send. Hope it works. Any questions out there, just shout them out in there. Turn on your mic and jump in.
00:55:25.962 - 00:55:57.334, Speaker A: Anything about Scaffold ETH? Build, building on Ethereum, IPFS, whatever you're looking for, all of that should be in this app. It'll work the third time, I promise. All right, let's go to a testing. Austin, I have to make a short comment. You are totally crazy in a very awesome thank you. Thank you for the kind words. So we could do IPFS here, right? And I'm going to save that.
00:55:57.334 - 00:56:24.382, Speaker A: Now, what I would really like to do is do IPNs and put that right in there, but it's not going to let me. So we'll do IPFS, and if I use the IPNs name, I don't think it even works here, so you can't even do it. But I will try the IPFS link just to see if we could oh, I almost hit save there. If I would have hit save, that transaction would have gone out. I would have had to speed it up. Okay, one last try. We're going to try to set a record.
00:56:24.382 - 00:56:43.794, Speaker A: We're going to see if this works, we've got this pinned to a server in the cloud. You know what I should do is I should pin it. Let's pin it everywhere. So if I take this, I can pin it on my local node by saying IPFS pin add, and then that oh, yeah. It pinned. It recursively. Oh, yeah.
00:56:43.794 - 00:57:01.210, Speaker A: And if I SSH into my pinner, I think it already is set, but let's just be sure. We want to make sure this thing is out there when it goes looking for it. Oh, yeah. It's pinned on both. Okay. And now we've got the content set. So if I click this, it should go to the gateway.
00:57:01.210 - 00:57:15.760, Speaker A: Okay. I don't dare try to type in this. All right, here we go. Take your ENS name, paste it into here and dot link. Here we go. Drumroll. Come on.
00:57:15.760 - 00:57:46.886, Speaker A: Oh, no. 404 page. Okay, so there must be something wrong with my deployment that's the only thing I can think is this website thing is not working. Exactly. I think this is working. I think it's actually hosting our site, but something's wrong with this homepage thing. So I will update the docs and make sure that the next time you read through this tomorrow, it will sum this up a little bit better with a better conclusion than I can deliver without figuring out what's going on with this static deployment.
00:57:46.886 - 00:57:51.500, Speaker A: But thank you for checking it out. Check out ETH build.
00:57:52.990 - 00:57:54.314, Speaker C: Test is also working.
00:57:54.432 - 00:57:59.066, Speaker A: Yeah, let's hear it. What was that?
00:57:59.168 - 00:58:00.220, Speaker C: Is also working.
00:58:01.470 - 00:58:08.430, Speaker A: Oh, it's working for you. Okay. Yeah. Do you have any special plugins or something that do anything weird with ENF?
00:58:09.330 - 00:58:10.080, Speaker C: No.
00:58:10.550 - 00:58:25.060, Speaker A: Okay. There's a cool resolver. Let's see if I resolve that same. Yeah, so it resolves for me. Okay.
00:58:28.730 - 00:58:33.960, Speaker C: Well, my secondary DNS is 8.8.8, which is Google DNS. You can try that.
00:58:35.230 - 00:59:04.786, Speaker A: Oh, actually set okay. Like set my own machine to go talk to Google as my resolver instead of whoever else I'm like. Comcast or whatever. Oh, disable unstoppable domain. I don't have that turned on. I'm pretty sure I'm doing something weird with that because wait, what if I do index HTML here? Yeah, that's weird. Okay, I'll figure it out.
00:59:04.786 - 00:59:19.478, Speaker A: I'll solve it. I'll put it at the bottom of that article. This decentralized. So, yeah, check out ETH build. Check out Scaffold ETH. It's just a GitHub repo. You can clone it or you can just fork it and run with it.
00:59:19.478 - 00:59:43.806, Speaker A: The docs are all here. There's a speed run of me going through it, but you've got all your different providers talks about the helpers. It kind of has a transaction helper to give you more feedback about your transaction. There's hooks. We kind of covered those components. There's a lot to it, but basically it just kind of stacks up all the cool tools you're going to need and hopefully kind of abstracts them away until you need them. Trying to make it as.
00:59:43.806 - 00:59:51.600, Speaker A: Easy as possible to quickly build a product, like a hackathon product. Any other question? Hello?
00:59:52.050 - 01:00:13.734, Speaker C: Yeah, actually, I had a simple question. Like, I have started just learning Ethereum and everything. So I was working on a personal project of mine. So I had to send sensors data to the Ethereum blockchain, like temperature data or something. So for it every time, I can't ask MetaMask to pop up right. For every data to send.
01:00:13.932 - 01:00:14.294, Speaker A: Yeah.
01:00:14.332 - 01:00:16.600, Speaker C: So any alternative or thought on.
01:00:18.490 - 01:00:55.938, Speaker A: I mean, like, first of all, all you need is a key pair, right? There's a private key sitting here. So what you could do is I would just go look at Ethers JS and look at how it's doing things like making a transaction. And basically what you'll do is you'll just the same thing we did with that mnemonic, where we created that mnemonic and created that address and we sent some rinkabee to it. Ethers will take in some kind of mnemonic or generate a private key for you. What you just need to do is fund that private key and then you'll have a script that well, we don't want the legacy documentation. Let's see. Ethers JS V five.
01:00:55.938 - 01:01:00.486, Speaker A: What you want to do is basically create like an HD wallet right in your code and have it.
01:01:00.588 - 01:01:07.870, Speaker C: But for that, I have to keep my private key in the same code, right? Like the HTML file JS?
01:01:08.050 - 01:01:25.722, Speaker A: Yeah. Don't ever put a private key in your code. Like, put it in like we had that mnemonic file, right? Yes. Right. So here's how we do it. Here you'll do it similar to this, but probably better. I just have a mnemonic and it tries to read it, and if it's not there, it just silently fails.
01:01:25.722 - 01:01:30.270, Speaker A: But if it happens to have that mnemonic, that's what it's going to use when it talks to Rinkabee.
01:01:31.570 - 01:01:34.260, Speaker C: Every time ask it, right. It will automate the process.
01:01:34.870 - 01:01:47.142, Speaker A: Yes. It will automate everything. Yes. This thing will yeah. With a private key. Here, let me send you this exact page, too. So with this page right here, you can basically just send it in a private key, right.
01:01:47.142 - 01:01:54.390, Speaker A: So this will give you a wallet and you could make a transaction. I'm sure he's got a transaction here somewhere.
01:01:55.050 - 01:01:56.098, Speaker C: Thank you so much.
01:01:56.204 - 01:02:10.480, Speaker A: Yeah, for sure. Yeah. Send transaction right there. So you'll basically create that thing with that private key and then you'll do a send transaction. I think your MIC's messed up. I'm not.
01:02:19.890 - 01:02:22.610, Speaker B: I just muted everybody. So you're going to have to unmute.
01:02:33.990 - 01:03:08.234, Speaker A: I'm back again. So to speed up your tinkering, what we were talking about, that key pair. Where does that private key come from? Right? If you are here and you're like, oh, I got to go get a private key, same thing. I just use ETH build and I go over here and I just generate a private key. All this is, is a random number. But this allows you now to grab an address. It allows you to grab a blockchain and check your balance on that chain, right? If you want to get crazy with it, you can craft up an actual transaction, right? You can bring in your MetaMask and craft up a transaction.
01:03:08.234 - 01:03:34.280, Speaker A: You can create a wallet that will craft this transaction for you. And you can plug that, oh, there's what the wallet looks like on the inside. No one wants to see that. And then you hook up your blockchain, you hook up your private key, and you can do some transaction right here in ETH Bill. But basically all you need is a private key sign in those transactions. That private key needs to have funds on whatever network you're talking to, and you can have that thing automatically doing all sorts of stuff.
01:03:35.050 - 01:04:14.126, Speaker B: I'm going to jump in really quick. You mentioned it a second ago about never including your private key anywhere. We actually had this problem a few times for hack money. So it's worth mentioning to people who maybe are getting into tools that they're not familiar with or just may not be familiar with exactly what they're doing. Be very careful about how you commit things and where your private keys end up going. So we had some people, they would be sharing some code with some of the sponsors and they would drop it in a channel in hack money. And we actually had a few people end up losing funds because they're just not aware that it's linked.
01:04:14.126 - 01:04:30.860, Speaker B: And then also when you're committing code to GitHub, sometimes you just do it inadvertently. Be very careful about how you're setting things up and what you're actually committing. And I'm sure Austin probably has some very specific best practices. We should probably write them down and get them distributed. But it's worth just bringing up again now that it came up.
01:04:31.630 - 01:05:06.630, Speaker A: I lost a hunt. It one time I sent $100 to one of my buddies and he had posted his seed phrase for that account on GitHub and it was gone instantly. And you can imagine there's probably even people trying to front run that, right? Because if you could get free money and he can get free money, basically whoever sets their gas price high enough is going to get the free money. So you could try this out. Try this out. Put a seed phrase on GitHub and then send it $50 and watch how much well, don't send it $50, but send it $5 and watch how much of that $5 they use in gas just to get it back, just to steal it from you.
01:05:06.700 - 01:05:16.182, Speaker B: Yeah, there are definitely scrapers running. Sorry to segue into this, but be very careful where these private keys and it happens.
01:05:16.236 - 01:05:19.274, Speaker A: You just have to be careful. It happens to the best of us.
01:05:19.312 - 01:05:26.650, Speaker B: I couldn't don't ever use your main wallets for all this testing. Have distinct wallets for testing?
01:05:27.230 - 01:05:39.678, Speaker A: Yeah, don't get into your MetaMask and grab your private key and pull it out and use it somewhere else. Don't do that. Create another account somewhere else and send some funds over to it. Cool. Anybody else?
01:05:39.844 - 01:05:42.000, Speaker B: Yeah, if you scroll up, there were a few questions.
01:05:42.450 - 01:05:43.550, Speaker A: Oh, sure.
01:05:43.700 - 01:05:51.282, Speaker B: Let's see. I can copy them down. There's one from TJ. Rush copy that.
01:05:51.336 - 01:05:52.980, Speaker A: J. Rush. What up, man?
01:05:54.650 - 01:05:56.040, Speaker B: Just put it at the bottom.
01:05:58.330 - 01:06:21.866, Speaker A: Oh, yeah, for yeah. I think that maybe that was asked before I started running my own node. But basically the key here is run your own ethereum node, and instead of talking to inferior, talk to that and set it up to talk to that. Right. So then basically you're talking to IPFS to get the content. Then you fire up the content and it connects to your local node and your local IPFS node.
01:06:22.058 - 01:06:34.450, Speaker B: Just for reference. The question was there's a fair number of Web Two stuff in here into your IPFS? Do you see a path for full decentralization already, or are we waiting for something? That was a question, Austin.
01:06:36.070 - 01:06:38.770, Speaker A: Is it too slow if you're not.
01:06:38.840 - 01:06:42.690, Speaker B: Using web two stuff, or is it usable?
01:06:43.110 - 01:07:25.410, Speaker A: Yeah, I think to make it usable, you probably are going to have to infra up yourself. Right. Like you'll probably have to create a couple of penning nodes, put them on some edge servers and do that kind of stuff. Like right now, basically what is missing to answer that question is filecoin, or probably a sponsor of this, but basically some way to incentivize people to pin that information. Like if I had something important, what I want to do is write to an ethereum contract that I'm willing to pay some protocol where I'll pay for people to have this thing live. I remember reading the Filecoin white paper years ago, thinking how complicated it was going to be to figure that out. But we've got good guys on the job.
01:07:25.560 - 01:07:25.922, Speaker B: Yeah.
01:07:25.976 - 01:07:46.314, Speaker A: Okay. We're getting there, though. Yeah, I think so. Really? I'm not getting censored, so I think all of this stuff is decentralized. Right, but you don't know. I don't know how well decentralized it really is. Right.
01:07:46.314 - 01:07:51.978, Speaker A: You would have to be in a place where that really mattered and find great.
01:07:52.064 - 01:07:53.766, Speaker B: Great session.
01:07:53.798 - 01:07:56.220, Speaker A: Thanks. DJ Rush. Thanks for coming, man.
01:07:59.550 - 01:08:02.126, Speaker B: There's one more I just copied down for you.
01:08:02.228 - 01:08:32.722, Speaker A: Oh, shoot. Okay. From what I see here, the Attester is a custom contract. Curious if there are any standards around storing IPFS hashes in a contract. I would look at the OpenSea stuff. Like OpenSea kind of has pioneered a lot of kind of the NFT space and some of the standards there. And what you'll find is in an NFT, you have this URL that points to the metadata of what that collectible kind of contains its title and link openc.
01:08:32.722 - 01:09:12.678, Speaker A: Nice link. Great work. I would dive into their docs and see how they're because it's obvious like, oh, I have this expensive ass mainnet smart contract that's referencing a URL that is just my Web Two website. There's an obvious that needs to be decentralized too. You need to distribute that content somehow. So I know that with Nifty's on OpenSea, the kind of state of the art is to have the NFT URL point to something in IPFS that you go query and then inside of that manifest are usually more IPFS things that you need to go get. So I bet that the OpenSea standards would be a great place to look at who's kind of pioneering that stuff.
01:09:12.678 - 01:09:25.640, Speaker A: It happy Friday, you all. Any other questions?
01:09:27.610 - 01:09:39.738, Speaker B: That might be it. I think you probably hit a fair number of the edge cases you had not expected, so props to you for pushing through all of them.
01:09:39.904 - 01:09:52.640, Speaker A: Did not work out for me. I'll figure out what it was and put that in the bottom of the doc. I'm pretty sure I broke something. What do you mean by breaker in your Twitter profile? Oh, I break things. I break things all the time. Right. I just broke things.
01:09:52.640 - 01:10:16.840, Speaker A: I'm not a very safe person, let me just put it that way. I like to get into things and I like to crush them and I like to figure out how they work. A lot of times I have to take them apart to understand how they work. I grew up in the early 90s when you could still just take stuff apart and understand how it works. So I apply that kind of skeomorphically to software also. Awesome.
01:10:18.010 - 01:10:21.720, Speaker B: I think we can probably wrap there.
01:10:22.350 - 01:10:28.300, Speaker A: Scaffold ETH go build on IPFS and Ethereum. Sorry. Right.
01:10:30.510 - 01:10:39.360, Speaker B: All right, cool. Thank you again, Austin. This is thanks, guys. And I'm sure a bunch of people are going to reference this recording as they're building other things.
01:10:39.810 - 01:11:00.680, Speaker A: Yeah. Hopefully these templates just give you basically an app ready to go that's already talking to IPFS and you can focus more on building the actual application you want to build for hackfs and not all the underlying junk. Obviously some of that underlying junk is still a little shaky and we're working on it, but that's part of Web Three.
01:11:01.850 - 01:11:19.678, Speaker B: Awesome. Yeah. And just for reference, if anybody is going through this again, they got lost and just want to kind of do it again on their own. Austin's in the slack as well, the hackath slack. So reach out and hit him with any issues you're experiencing that'll only help to improve this tutorial and in the.
01:11:19.684 - 01:11:27.760, Speaker A: Project itself at Austin Griffith on Twitter and Telegram and all those too. Yep. Cool. All right.
01:11:28.290 - 01:11:29.374, Speaker B: Thank you so much.
01:11:29.492 - 01:11:32.650, Speaker A: Thanks, guys. Happy bow tie Friday. Bye.
