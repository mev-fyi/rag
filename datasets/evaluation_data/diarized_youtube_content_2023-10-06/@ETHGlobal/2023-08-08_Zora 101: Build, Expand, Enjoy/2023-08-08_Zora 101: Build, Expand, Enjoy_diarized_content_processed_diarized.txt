00:00:07.130 - 00:00:19.040, Speaker A: Hello, everyone, and welcome to the SuperHack Zora Workshop Zora 101. Build, expand, enjoy. Joining us today is Dan Ovid who will be taking us through the session. And with that I'll pass over to Dan to get the session started.
00:00:20.050 - 00:00:59.840, Speaker B: Hey everyone, it's really great to be here. This is workshop is called Zoro 101. Build, expand, enjoy. I am a protocol engineer in Zoro working on the NFT smart contract technology, working on building new contracts and deploying us on the MultiChain world that we're living in. So I was a previous ETH global participant. I've been to four E Global hackathons and hackathons are what got me into web3. So I'm very glad to be kind of contributing from the other end.
00:00:59.840 - 00:02:09.506, Speaker B: And I'm here to answer any questions. So let's get started. So first question is what is Zora? Zora is an open source protocol that enables creators to mint NFTs on their own, ERC 721 or 1155 contracts using our user interface or from our smart contracts. Additionally, it provides a Minting interface and a place that you can mint tokens from all over many different EVM compatible blockchains. We offer creators customizable mint pages, profile pages, and all the profiles are stored on chain. And we really think of Zora as like an on chain destination to create and collect NFTs and kind of just general media. We've just launched a layer two which is on the optimism stack, which is a fast and cost effective EVM compatible blockchain.
00:02:09.506 - 00:02:50.450, Speaker B: And the goal is to just make it really easy and cheap to create and collect. We really want to just empower creators by giving them all the tools they need and bunch of management tools. And we don't charge anything for creators. Everything is free for creators. The only thing you pay is transaction costs. First I'm going to talk about the layer two which was recently launched. In the first month we had 161,000 NFTs minted over 15,000 contracts deployed, 995 E bridged and 2500 creators coming onto the layer two and 70,000 collectors.
00:02:50.450 - 00:03:36.306, Speaker B: What's difference between the Zor network versus other layer twos is we're really focused on NFTs and creators and the culture and community around it. So we're trying to build like an ecosystem around that and we're just trying to bring more expression and experimentation on chain. The nice thing about the layer two is that it's still secured by Ethereum, but transactions confirm really quickly. I believe the block time is 2 seconds and minting an NFT is very cheap as far as transaction costs. Here are some examples of some NFTs that have been NFT contracts that have been created on our platform. I'm going to open some of these. This is probably many of you heard of.
00:03:36.306 - 00:04:02.406, Speaker B: This is the Okapan tradition. We just go to this link. You can see here. 67,000 of this has been minted. Not going to go into talking about what these are, but it's just examples. This is like a simple image. This is kind of like a video that's an ongoing Mint.
00:04:02.406 - 00:04:33.422, Speaker B: It's a free mint. We also support all different formats besides just images and video and gifs. We also allow audio. So this is a podcast that was minted, that was published. And here you can see 7500 have been collected so far. And we also allow PDFs. So this is the Gitcoin impact report that was created.
00:04:33.422 - 00:05:30.454, Speaker B: And then we also have allow 3D files so you can upload a GLB and it'll render the 3D model and animation. And one thing you'll notice is all these Mint pages are fully customizable and the attributes there's themes that can be purchased as NFTs that can be applied to min pages. And this is a final example of interactive HTML NSA with the repeated stationary. So yeah, we allow all different kinds of media to be minted. Just want to walk over the Zora network since it's been launched. So in around June, I don't remember the exact date that Zora network layer two was launched. And these were the Mints on main net before by week.
00:05:30.454 - 00:06:19.366, Speaker B: And as soon as we launched a layer two, we launched on Optimism and Azora network. You can see that there was a huge appetite for people to launch on something that's cheap, fast and efficient. And pretty much everyone now is minting using the layer two networks. So this has been really great to see. So we offer basically two different kinds of contracts that people can create on there's 721, ERC 721, which is you can think of I'm sure many of you are familiar with this, but if you're not, you can think of this is one token and one owner. And each token can have its own piece of metadata. Zora Er 721 can mean a little bit beyond that.
00:06:19.366 - 00:07:09.602, Speaker B: So for example, you can have an ERC 721 contract that is an addition. So you can have one piece of content with many, many owners and many additions of it. That's what we call an addition contract. Or you could just mint individual tokens which are each one is going to be a unique one of one, which is a traditional ERC 721 model. More recently, we launched ERC 1155, which is a multi edition collection. This is ideal for releasing related bodies of work together. So for example, if you want to release an album, you would do an ERC Eleven two five because you could have a bunch of different individual tracks on the album and each one of them could have multiple additions and multiple owners.
00:07:09.602 - 00:08:02.870, Speaker B: You could also think of ERC 1155 as an ERC 20, as a contract composed of multiple ERC 20s. But each ERC 20 has metadata. We allow the configuration for each ERC 1155 token to be configured independently. So you could have like one token that has a price of this amount and can be purchased between these dates. You could have another token that can be completely an open edition, has no Mint limits, and can be Minted forever. So we allow these things to be configured on a token by token basis and the code for these can all be browsed, can be found at these repositories. I believe we should have links on the bounty, but if not, join the discord chat room and we can send these links.
00:08:02.870 - 00:09:09.222, Speaker B: A more recent thing that we launched last week is a thing called Protocol Rewards. So traditionally, even on free Mints, zora collected a small fee of 0.7 E for each Mint whether it was free or not. And with these new Protocol Rewards, we're actually passing back a lot of those fees to the ecosystem. So whether that's creators, developers building on top of the contracts or people that are servicing Mints on their own website. So in the first case, if it's a creator, let's say you launch an NFT contract, you launch an NFT and it's a free Mint, you would be able to receive a portion of this fee in the form of a reward. If you're a developer and you create tokens using our contracts, you would be able to collect a small percentage of a percentage of this fee in the form of a reward.
00:09:09.222 - 00:10:11.482, Speaker B: And also if you, let's say, want to create a website where people can you want to just embed a Mint on another website that's not Zora. You have a way to configure an address that will receive a portion of this fee in the form of a reward on each Mint. I'm actually going to go through a demo now on how to create an ERC 721 contract using our JavaScript SDK without needing to really write any solidity code. So I'm going to use the tools wagme and react. And I'm going to use a Wagme CLI to kind of scaffold a simple next JS application and create a DRC 721 drop and set whatever account I want as the referral that will collect this fee. So I'm going to go into my terminal and I'm going to do Yarn create Wagme. I'm using the Wagme CLI.
00:10:11.482 - 00:11:10.060, Speaker B: Which HCLI? This is going to the installation instructions. And then you could basically if you want to create something from scratch, you could do yarn. I forgot where that anyways, I would install that program and I would do Yarn create Wagme. I'm going to call this Protocol Ward demo then next site and then it's going to create a new scaffolded project. And then I'm going to show how to install our SDK, which I'll show you is actually pretty nice. It makes it very easy to connect to our contracts and develop against them. It's just installing this 1 second.
00:11:10.060 - 00:11:53.610, Speaker B: Okay so I go to CDPRO zone. I'm going to open this in Vs code. Okay, so what this did this scaffold that Wagme created, created a bunch of folders code that I don't need. But I'm going to first show you. Let's say I start this application by doing yarn dev. Let's open this. So I'm going to connect my MetaMask.
00:11:53.610 - 00:12:39.938, Speaker B: I'm going to use this wallet. So right now this is using Ethereum, this demo app that's with scaffold it only uses Ethereum borderly. I'm going to switch it to use the Zord networks. So if you can open this, this is the configuration they generated this file wagme TS. I'm going to replace this main net and Borrely with just if you can wag me. Hardy has our change bigger so I could do Zoro testnet. Now when I reload the page it says I'm connected to Zoro borrowed testnet.
00:12:39.938 - 00:13:09.060, Speaker B: I can switch to Zora. This would be connecting to our Zora Mainet, our layer two. And this is going to be connecting to our layer two testnet which is free to use. Great. So now I have that and I'm connected to this. This generated a bunch of scaffolded code that I mostly don't need. I'm going to go just delete a bunch of that stuff and then I'm going to delete basically this is kind of like the writing contract is all I care about.
00:13:09.060 - 00:14:34.386, Speaker B: I'm going to just quickly delete that and open write contract prepared. So this is using the Wagme's hooks which are very nice for using TypeScript for connecting to smart contract which is super helpful when you're trying to make sure you're passing the right types and data. So using our SDK, it fits in nicely into this and I'm going to quickly add it to my project by doing yarn add zora Labs Zora 721 contracts. This repository is going to be in the final slide so it just has to install this quickly. And then I'm going to just install this 1 second. So this is what's here I can now show here. There's ERC 721 Zora entity creator config.
00:14:34.386 - 00:15:56.506, Speaker B: So this is actually going to let me connect to our factory contract which creates 721 contracts. I'm going to quickly so basically that'll open. So there's this documentation here on NFT creator which is instructions on how to create a 721 contract using our if you want to call the solidity code directly. So this is a function that will create an addition which is basically a 721 with a single piece of content. But multiple owners and protocol rewards will show how you can call that same function with referral and pass a create referral which means that this address will get a percentage of all mint fees in the form of rewards for each token that's minted. So I can now change this use prepared contract right to so it's going to ask me for the Abi. So if I go to definition here, what's nice is this gives you our NFT factory 721 factory for every chain what address it's deployed to so you don't really have to and this will be if we ever update this address, you just do NPM install and install the latest version.
00:15:56.506 - 00:17:14.632, Speaker B: So this gives you both the abi of that contract and everywhere it's deployed. So if I go to Abi and Ibizora abi and I do address or creative address but the problem is this is a JSON object so I can now just get the chain ID from Wag. From Wagme. I'm just going to just ignore that. It's always a fun thing to do. What's nice is now if I do function name, it'll give me all the possible functions on my ERC 721 factory based on the Abi. So we're going to use Create addition with referral and that's going to basically create this addition and then it's going to ask me for the bunch of arguments and this is going to be based in the Abi and I'm not going to build this in this demo.
00:17:14.632 - 00:17:56.150, Speaker B: I've already done this somewhere else. So I'm going to just copy and paste my code that already works if I go here, just going to copy and paste this. This is giving me an error because it's something let me just fix that. It wants es next or later. So I'm just going to fix it to be red big. Get the address 1 second going to publish this code that you can use later. Just chase it.
00:17:56.150 - 00:19:12.256, Speaker B: So this is basically calling our factory to create a contract with a referral. And I'm not going to go into these parameters because there's not enough time here. But you can look at them on our documentation. And then I'm going to just create a mint button that is going to so now if I go to here's, I'm going to show a version that works because I'm not going to debug this right now. But anyways, a more complete version is going to be here that I don't have those weird node errors. So this is going to so if I go to testnet by the way, you want to go to testnet Zor co because this is where you can experiment with testnets and not use any gas. So if I'm logged in, these are my collections.
00:19:12.256 - 00:20:17.592, Speaker B: I have nothing here. I'm going to create an ERC 721 edition using the same code that I had before. But this is like a separate repository that everything works. So this is going to create it using the JavaScript SDK and Wagme, the Abi and contracts and that succeeded. So now if I go here, my collection should show up share actual anyways, I'm going to switch to another account. I'm probably just having issues with accounts lock but let's say then that would have created, if I think it was working correctly, one of these contracts. I just clicked another account.
00:20:17.592 - 00:21:24.664, Speaker B: These were all created via that SDK. And so then this contract now has an address as a Create Referral which was configured here. This Create Referrals last arguments and then every mint on the contract that Create Referral is going to get a portion of the fees in the form of a reward. There's also another example of how to then actually I'll just show quickly Minting. So let's say I go to Mint. So I've already configured this other function to mint with the referral configured and just quickly what that looks like is what that function looks like is you call a function on the ERC seven contract mitrith rewards you give it, the recipient is going to be the recipient of the NFT. The quantity is how much they're going to get is like a comment, anything you want to add, which will be an onchain comment and then a Mint referral.
00:21:24.664 - 00:22:06.576, Speaker B: So this is going to be the address that's going to get the referral fee. And this is very useful if you want to place a Mint anything on your website and let people Mint there. And so this thing minted on that transaction. And then if I go to Total Rewards, you can see here that my account has rewards that I can withdraw. This is the contract creator. So then these were generated from a combination of these were generated based on the create referrals. I don't have time to go through all the details, but you can kind of get a sense of what's possible and I will just publish that repository later so you can look at the code and understand it better and all the parameters.
00:22:06.576 - 00:22:52.490, Speaker B: So then I could withdraw this and it'll withdraw from this rewards contract into my account. Let's see. Anything else? This basically shows a crate referral. I just want to show a nice example of create referrals I'm talking about. So this is the OPA pen, which many of you probably heard about. There's an option now to kind of make a derivative work and you can change parameters. And then I can mint this on Zora, says redirect them to Zora.
00:22:52.490 - 00:23:56.366, Speaker B: And then I would connect my and then this would create another token with the original creator. This is configured to create another token with the original creator as the referral recipient. And the nice thing about this is this kind of allows forking of NFTs and content and passing back rewards to the original creator of the original token. Yeah, this is just the Mint with rewards function and you can go to our website to find out more about these fees. But I think also what I'm trying to show you is you can interact with all these contracts through SDK, through Solidity. It's all open source and decentralized CRS and showing up. I'm actually going to stop sharing and just leave this screen here.
00:23:56.366 - 00:24:19.382, Speaker B: And I want to leave five minutes for questions. I wish I had more time. Yeah, these are just some resources that you can follow. Definitely use testnet in this hackathon. Use testnet Zora co to just test stuff out. You can bridge to our testnet using Guarleids, using Bridgesora World. Our docs are here.
00:24:19.382 - 00:24:28.620, Speaker B: These are our JS SDKs if you want to use JavaScript. And our solidity repositories are here, so yeah. Any questions?
00:24:33.770 - 00:24:38.230, Speaker A: Yeah, there was a question earlier in the chat. Can we do attestation Zora?
00:24:39.930 - 00:24:46.706, Speaker B: Can you explain what Attestation are you?
00:24:46.748 - 00:24:54.720, Speaker A: Yeah, could you want to maybe take yourself off mute and kind of clarify the question, what you're looking for?
00:25:00.270 - 00:25:01.130, Speaker B: Yeah. Hello.
00:25:01.200 - 00:25:26.350, Speaker C: Yeah, what we see in Tikhakatong and another chain, we can do a testation. What is a smart contract? I like to make sure maybe Sora already has something there or maybe the auction is we deploy our own smart contract similar to another one can simulate a station. I just want to make sure maybe you already have in Sora right now something who support Attestations.
00:25:27.650 - 00:25:49.350, Speaker B: I think the way that station happens is you would call our factory to create a contract and then you would build like the contract can communicate with other contracts. I think the Attestation, but as far as Attestation, do you mean proof that the contract is a real ERC 721 or 1155 or what exactly do you mean by Attestation?
00:25:51.390 - 00:26:21.780, Speaker C: It's like a type when you can say, okay, this one, you pass a smart contract, you have those address and you can say, hey, I say, is true, this person is like this or this have this role, something like that. No, we see that one in another change. They just started using that one. But I like to make sure you already have something like that. In that case, I don't need to deploy a contract in order to mimic that one.
00:26:23.990 - 00:26:33.686, Speaker B: I'm not entirely clear what that is, but maybe you can ask in the discord about it.
00:26:33.708 - 00:27:19.174, Speaker D: So Attestations are essentially like messages on chain, like arbitrary data that sets into EAS is something you can look up. They're in the role of sponsors, but they're used to basically confirm real life things on chain. So it'll be like your Twitter address or you can make schemas and data points for a lot of things to go from real life to on chain. So like an Attestation would be like a basic question and answer with a variable type, like a boolean or a number or any type of data that you want to put into that Attestation for the user to confirm or deny, if that makes sense.
00:27:19.292 - 00:27:24.200, Speaker B: Yeah, I don't believe we currently have that now.
00:27:24.810 - 00:27:30.220, Speaker C: Yeah, but atolis l two. That's correct. I'm sorry, it's an L two.
00:27:30.670 - 00:27:44.220, Speaker B: Yeah, the L two. Yeah, it's an EVM, it's an optimism. It's an Op stack based there too. So yeah, you could just deploy any contract there. Thank you.
00:27:46.610 - 00:28:04.180, Speaker D: I have one question. Do you guys have a contract with the CCIP protocol? Like, what's CCIP protocol? Is there a lane to get to you currently?
00:28:04.630 - 00:28:12.194, Speaker B: I think the only bridges that are currently supported as of now are you talking about like well, they just released.
00:28:12.242 - 00:28:21.580, Speaker D: Kind of a couple of weeks ago, so it's like brand new, but a lot of us are trying to use CCIP to bridge messaging to different chains and I was just curious all of them.
00:28:22.190 - 00:28:35.280, Speaker B: I don't think we have it now, but I think Bridging is something we're definitely we want to make better and support more technologies that enable that. As far as I'm aware, we do not currently have that.
00:28:42.040 - 00:28:46.790, Speaker A: There was another question. Any support for ERC 65 51?
00:28:49.240 - 00:29:36.150, Speaker B: ERC 65 51? I would probably have to Google that. Could you mind explaining what that is? Yeah. This is NFT accounts. So basically an NFT can basically own other NFTs and other assets on chain. So I just wanted to find out sort of like whether you guys either have any support or whether you have any plans in terms of that and what those are sort of looking like. We certainly discussed something along that both lines internally, but currently we don't have that built in. But I mean, we would welcome hackathon projects that explore that.
00:29:36.150 - 00:29:59.790, Speaker B: It's really interesting, for sure. That's something we've discussed, but we haven't done. I mean, the closest thing we have is ERC 1155, but that's not really what you're talking about. But it would be really nice if there's an album and you could just own the NFT and it owns all the tracks and you could sell it all as like one thing. Yeah. Thank you.
00:30:04.470 - 00:30:14.742, Speaker A: There was a question about to build on a testnet. So are hackers eligible for the Zora bounty if they only deploy on the testnet or build it?
00:30:14.796 - 00:30:37.920, Speaker B: Yeah, I guess. Yeah, we should probably make that clear. You shouldn't have to spend real Zora East to do that. So definitely just on the testnet is fine. We should make that clear in the prize description. I think we did, but if it's not clear, then, yeah, definitely just use the test network and use testnet Zora Co to access all the same tools user interface in testnet. Yeah.
00:30:42.360 - 00:30:59.950, Speaker A: Thank you. I also wanted to just quickly clarify, I missed the Minting of the NFT that we had. I originally saw that it was a bridge transaction, but could you explain that just a little bit again?
00:31:01.920 - 00:31:13.680, Speaker B: Sure. I've been looking so there's a couple of ways. If you want to go into the technical details of doing Bridging and Minting.
00:31:15.140 - 00:31:18.240, Speaker D: There is just like a high level version.
00:31:18.900 - 00:31:37.764, Speaker A: I've seen stuff on Zora Mint before, but I just went in real quick and I was like, oh, I only had five minutes. And I was like, oh, I want to mint this before we run out of time. And when I clicked Mint, it immediately switched over to bridge right on the.
00:31:37.802 - 00:31:47.370, Speaker B: Mint page from the L one. I'm not familiar with that page, but it switched to the main net and wanted you to bridge there.
00:31:48.460 - 00:32:00.110, Speaker A: Yeah, and I'm just talking just specifically about our internal not that big of a deal, which is really cool. E global kind of released an NFT for us to.
00:32:03.360 - 00:33:15.726, Speaker B: A really bridging is a really interesting thing and I'll just point you to some documentation about where you could read out how to do that. Yes. So this is like a nice basically there's an L One cross domain messenger contract deployed at a specific address which you could look up. I don't know the exact address now, but basically you can send a message from the L One to the L2 to any L2 contract. With ETH, you basically specify the target contract, the encoded call data, which is a message and how much gas you think the l Two transaction will cost. And you can also send Efipit, so that could be a way you could do like Bridging, like minting on an L2 from an L One by basically sending the message from the l One to the l Two contract that calls a mint. So this is the one way, there's this one and there's also deposit transaction which is kind of more lower layer where it's more risky.
00:33:15.726 - 00:33:47.534, Speaker B: But this one uses quite a bit of gas. But there's a deposit transaction function which is more risky because if not enough gas is sent, then the funds will be locked forever. But that deposit transaction is like a lower a cheaper gas way to send messages from l One to l Two, but there's more risk involved. Yeah, we've been looking at this quite a bit, but I mean, cool projects, projects that do interesting thing with this are great for the hackathon, I would say very cool.
00:33:47.572 - 00:33:50.814, Speaker A: And thank you for the presentation today, I appreciate your time.
00:33:51.012 - 00:33:51.760, Speaker D: Sure.
00:33:54.290 - 00:33:58.420, Speaker A: And there was a question on where's the repo that you're working from?
00:33:59.510 - 00:34:42.080, Speaker B: The one that I'm just working from, let me push it to GitHub and I'll paste it in the chat. I'll just publish it on my personal quickly and then I'll share share link here and then maybe I'll move it to the Zora.org. So let me just push it here. I think people would find it useful. Let me just quickly create it. Sorry I'm doing this during the call, but I think you find it useful. Doesn't have a README because I don't have time, but I'm just going to create it and then I'm going to push the code there and then.
00:34:47.180 - 00:34:48.090, Speaker D: Get it.
00:34:57.250 - 00:35:34.510, Speaker B: Okay. So now I'll add a README after this call. But this is the I'll paste it in the chat here. Where is it? Oh, there it is. And I'll add a README and I could do more examples and better commented code. But yeah, just one of the things you'll find there is that the SDK makes it really easy to work with wagme and react or even just vanilla like VM and JavaScript with our Spark contract.
00:35:38.110 - 00:35:57.198, Speaker A: Awesome. We're a little over time, but thank you Dan, for the great workshop and thank you all for attending. This was the last workshop for the day. So nothing tomorrow. But then the Thursday we have a few more workshops and also the second project feedback session. So thanks. Thanks all for attending.
00:35:57.198 - 00:36:00.690, Speaker A: Have a great rest of the day and cheers. Thanks again, Dan.
00:36:01.190 - 00:36:01.680, Speaker B: Thank you.
