00:00:10.730 - 00:00:48.266, Speaker A: Hi everyone. This is Alberto from Moombeam. I work at Developer Relations. And today, thank you for joining this workshop that it's going to help you get started with the bounties that we've offered for ETH Bogota 2022. So yeah, today the idea is that go through some concepts about Moonbeam, what it's moonbeam, what it's all about, and then we'll move towards explaining important concepts that will help you through the bounties. And last but not least, we'll do a very short demo to show you how to get started with Moonbeam. And last but not least, we'll do a brief bounty description and talk about what's the idea that we want you to guys do.
00:00:48.266 - 00:01:44.670, Speaker A: So as I've mentioned, first we're going to do quick introduction to polkadot and Moonbeam. We're going to overview what it's connected contracts and what's the main idea here. Last but not least, a short description of the bounties. So let's talk about polkadot. And this is going to be a very brief definition about what polkadot is. The main idea here is that you're not going to be an expert on polkadot, but it's going to give you sort of a rough idea of what polkadot is about, right? And the main component of polkadot, or the main idea is specialized blockchains that are interconnected. There are many best blockchains out there and there's no one blockchain to rule them all, right? And so within this architecture you will see what is called the relay chain, which is the actual polka dot blockchain and a lot of people like to refer to as a layer zero.
00:01:44.670 - 00:02:34.442, Speaker A: And the main idea is that we all know layer ones, right? Like ethereum, like Moombeam. But on top of layer ones, the only number that it's there is zeros, right? And so the layer zero is because it provides sort of like an infrastructure for many blockchains to connect to. And the main purpose of this infrastructure is that these blockchains that connect to it are interconnected and polkadot would guarantee block finality. So security, the security of the blockchains of these blockchains is guaranteed by polkadot and its economic model. And so the second component of this architecture are the parachains. And the term comes from parallel blockchains. And the idea here is that you'll have specialized blockchains that provide a specific functionality to the ecosystem.
00:02:34.442 - 00:03:24.042, Speaker A: So you won't have sort of like one parachain that does everything. You'll have a parachain that is particularly providing sort of like a service to the entire ecosystem. And so for example, within polkadot you have parachains that are very specific to privacy. Like for example, manta, you have parachains that are very specific to storage like crust. You have parachains for identity, you have parachains for Oracles, for Bridges, and you have Moonbeam being one of these parachains. And we'll talk about Moonbeam in a later slide. And as I've mentioned before, the key thing that polka dot basically provides or offers to the table to the web three world is the interconnectivity that all these members of the ecosystem will have natively.
00:03:24.042 - 00:04:12.618, Speaker A: And this is the key word here, right? Because we know that nowadays a lot of blockchains are connected through bridges, and the idea of connected contrast is still used as the concept of bridging. But the main benefit of polkadot and XEM is that all these pair chains and the relay chain that I've mentioned before are interconnected and will be able to talk with each other in a native way, that it's a lot more secure than the risks that are inherited by bridging. Okay. And yeah, I mean, this is, like I said, it's probably more than 1 minute, but the main purpose here is that you get familiar with what polkadot is as a concept. Cool. So now that we've talked about polkadot, we can go ahead and talk about what is Moonbeam, although you might have a slight idea. Right.
00:04:12.618 - 00:05:04.334, Speaker A: First, Moonbeam is a parachain on polkadot, as you would expect. And the main purpose and the main added value that we bring to the ecosystem, it's an Ethereum compatible smart contract platform, right? So polkadot does not really you cannot actually build on top of polkadot, for example, smart contracts. So the idea is that polkadot relies on these other parachains to offer this functionality for the ecosystem as a whole. And so it is really important to understand that polkadot, it's nothing without the parachains, and the parachains are nothing without polkadot. And so Moom has the typical Ethereum compatibility offering, I mean, a baseline EVM layer for EVM execution. But we also have sort of added benefits on top of the baseline EVM layer. Right.
00:05:04.334 - 00:06:15.246, Speaker A: The main benefit is that we'll build with substrate, and substrate is sort of like an SDK to build blockchains. Or one of the bigger benefits of using substrate is that it can basically allow you to really easily build a blockchain and connect to polkadot natively and basically benefit from the native interoperability. You can also build blockchains with your own SDK or language, but then you need to sort of follow certain guidelines that polka dot needs in order to connect to it, and it's a little bit more complicated. The second benefit of Moomim is that it offers a full web three RPC support. This provides seamless ETH JSON RPC interactions or integrations. And this is why, for example, wallets like MetaMask or ETH development environments like Hard hat or Truffle works seamlessly, right? Because at the base layer, all these tools, what they do is that they provide a very nice user interface for users or developers. But underneath what they're doing is that they're doing each JSON RPCs to a node.
00:06:15.246 - 00:07:06.546, Speaker A: And so the idea is that Moomim will receive this JSON RPC request, is able to understand them, right, and say, okay, so this person is asking me for the balance. And the node, the Moomim node, will respond to the user request by providing the balance. And we've expanded this web three RPC support to include more advanced stuff like tracing functionalities. And this is actually very beneficial because you can offer more advanced block explorers like Ether Scan or Block Scout, which we offer both on Moonbeam. Next is Unified accounts. If you're familiar with substrate based blockchains, they normally offer an SR two 5119 account system. The main idea here is that it's not the Ethereum styled account, right? I mean, they have different keys and account management stuff and everything is a little bit different.
00:07:06.546 - 00:08:23.386, Speaker A: So what we've done is that we have modified our substrate chain so that it uses the Ethereum account system and signature algorithm. And the main benefit of this is that users don't really if they want to interact with Moombeam's EVM, they can do so from their substrate account because in our parachain, we use Ethereum styled accounts compared to other parachains. And last but not least, our team and community has worked tirelessly into bringing all the Ethereum dev like environment with expanded features, right? So you will find things like Chainlink Oracles, you'll have Moonscan, you'll have the Graph, you'll have a Gnosisafe friendly fork. So all the tools that an Ethereum developer or a project expects out of like an EVM compatible blockchain, they all find them on Moonbeam. And we take that as a priority one. If there's an integration that a project requests, basically we'll work with the Moombeam Foundation to sort of make sure that we can bring that integration to Mumbi. But, I mean, there was something that I mentioned before, right? An EVM with expanded features.
00:08:23.386 - 00:09:57.610, Speaker A: And you might ask yourself, hey, Alberto, what is that? Right? And so the idea here is that it's called Moonbeam Pre compiled Contracts, right? And so if you want to interact, let's say Alice, right? If Alice wants to interact with Moonbeam, she can do so through the Ethereum interface, right? So, I mean, we will see this in the demo. We can go to Remix, we can connect MetaMask, we can deploy a really simple smart contract. And all this is using sort of Moonbeam's Ethereum interface to the end user or developer, but also a developer end user can actually use sort of the substrate interface. This is really more advanced because polkadot or substrate provide features such as the interoperability governance, staking and many other features that we can add sort of as pallets or sort of plugin modules to substrate that can only be accessed through the substrate interface. Recently, we launched a VRF like offering that is only accessible through substrate because it's a substrate native thing. But however, using Moomin Pre compiles, the beauty of it is that we provide sort of solidity interfaces for developers or users to sort of through the Ethereum interface, call the Moomim Pre compiles to access a substrate interface and then interact with Moomim through the substrate interface. So that is why, if you've ever sort of done staking on the Moomim DAP.
00:09:57.610 - 00:10:37.618, Speaker A: This is actually a substrate feature. Okay? This is not something that we're doing through smart contracts. You're interacting with Moomim runtime directly. And the way that this works is that there's a pre compile, a staking precompile that allows you to expose the functions, the substrate functions, let's call them like that. And so that's why you can sign with MetaMask or Leisure or whatever other compatible wallet. And so the main idea and I've listed some of the pre compiles, these are not all, but you can find a list of all the pre compiles in our documentation link at the bottom. But the idea here is that you have many, many pre compiles to access sort of this substrate native features.
00:10:37.618 - 00:11:50.426, Speaker A: I mentioned staking, but you can also access democracy features, right, and participate in democracy using your MetaMask ledger, trezor or whatever other compatible wallet. And the example that I brought today, it's one of the most complex examples, and it's the one that lido actually uses. This is really interesting because you're enabling sort of liquid dot and KSM liquid staking sorry, dot and KSM liquid staking on another blockchain, right, which is polkadot or Kusama, depending if you're talking about which ecosystem directly from Moonbeam or Moon River. The way that this works is that on the right hand side, you will see that basically a user will sign the transaction from their NMS ledger, Tressor whatever wallet, and interact directly with the lido contracts. And this is all within the context of the EVM. We're not going outside of the EVM yet. And so the lido contracts, roughly, I mean, this is sort of simplified, will basically mint the liquids, taking derivatives in this case is Lksm, and then also will interact with XCM pre compile called the transact pre compile.
00:11:50.426 - 00:12:48.030, Speaker A: And this transact pre compile exposes a function from which you can actually interact with other blockchains in the polkadot Kusama ecosystem. In this case, what we're doing is that we're interacting with Kusama. And the lido contracts are basically saying through this contract, hey, Kusama, I want you to stake XYZ tokens to so this the cool thing that this allows, if you think about it, is that a person signing a transaction with their MetaMask on Moonriver or Moonbeam, they're actually staking on a completely separate blockchain. And this is all guaranteed by this interoperability protocol called XCM. So, yeah, you can do very, very advanced stuff with the pre compiles. All right, so let's talk about connected contracts. And you'll get the idea of connected contracts quite quickly, because we've actually touched on one example already of connected contracts.
00:12:48.030 - 00:14:13.450, Speaker A: So the future we think that the future is multi chain, right? There's some ideas here for why we think so, but basically, there's an increasing number of users assets and services on different chains, right? We've seen chains like Avalanche, like Cosmos, like Polkadot, in this case, Moonbeam, near. I mean, many different chains have brought new assets, new users, new communities, and they're basically fragmentating the space. And on the other hand, we have new frameworks like Substrate that makes building blockchains very, very easy, right? So a lot of teams are using Substrate to build their own standalone chain. It doesn't have to be connected with Polkadot, but they can build their own standalone chain. And so as time and the tech stack gets standardized as time goes along, we do think that we're going to see chain space innovation, where we're going to see blockchains that are very good into doing something, and they'll provide a service very well. And we'll also see blockchains that are going to scale out strategies for gaming and EVMs, right? We are actually seeing this already in Polkadot, where the Moonsama project is going to launch her own parachain that is going to be basically focused on gaming and EVM. And so this is going to create, once again, if you go back to the original idea, a very fragmented set of users asset.
00:14:13.450 - 00:15:41.094, Speaker A: So we think that it's important to interconnect them. All right, if we think about the idea of connected contracts, is that you can use sort of Moonbeam as a hub to reach any user, any asset or service from Moonbeam, right? So within Polkadot ecosystem, Moonbeam will provide a very advanced EVM compatibility feature where you have all the tools and sort of assets that you would need. But we're going to use also GMP protocols or general message passing protocols to connect to blockchains like Ethereum, Cosmos, Avalanche. And so this is a bi directional connection, right? I mean, let's say, for example, a project like Akala or Parallel, they might want to have sort of an asset on Ethereum from Ethereum, and they can bring it over through Moombeam and the connected contracts approach to actually get it to Parallel. We actually have one of these use cases being designed, and it's going to be probably released quite soon with Centrifuge, in which they're going to bring USCC from Ethereum through Axelr and Moombeam to their parachain directly. So this is really cool to see how multiple things work together, right? Multiple messaging protocols and multiple blockchains. And so how does Moomim supports connected contracts? Right? So we have basically three main ideas here.
00:15:41.094 - 00:16:58.526, Speaker A: So the design of smart contracts that access functionality across many blockchains through integrated cross messaging. And what this means is that Moomim will offer the interfaces to sort of interact with XCM internally, but also will work with teams such as Axelr, Layer Zero Wormhole, and any other GMP protocol to make sure that this integrations become seamless. Also, we build the ideal development environment that offers a full Ethereum compatibility, but also broad tool and infrastructure support. And this is what Moomim is right now. Like I mentioned before, we have a seamless sort of Ethereum compatibility integration where we actually improve in it by the day. But on the other hand, we also have features like the graph, like gnosis and all these sort of elements or components that are important from an infrastructure perspective for projects that want to build on Moonmeam or want to use Moomme as a kinetic contracts hub. And then we have Polkadot, where you can actually scale through specialized resources, right? So we've seen for example, projects that want to tap into the polkadot ecosystem to target a specific parachain, for example, for prediction markets, right, or they want to target interlay for their trustless BTC.
00:16:58.526 - 00:18:45.960, Speaker A: And so the main idea here is that we're going to have these specialized blockchains and Moomin can be sort of the gateway for projects to access the polkadot ecosystem as a whole. And so one of the things that it's happening currently right now is that we have sort of two multi chain approaches with a lot of challenges, right? So we have centralized deployments where everything happens on one blockchain and we ask users and communities to sort of bridge assets from other blockchains into that specific blockchain. And this provides bridging UX and security concerns and a limited market because you're only tapping to this persons that want to sort of do that approach, right? On the other hand, we have deployments, like for example, SushiSwap is a very perfect example of this. That is called what we call multi instance deployments. And this is basically they grab the same code base, the same user interface, the same everything, and they deploy it to multiple blockchains, right? And the way that this works is that when you visit Sushi and you select the chain that you want to sort of interact with, the interface will refresh and will only interact with one specific chain, right? There's no real multi chain deployment here. There's just basically fragmented deployments on multiple chains. And so this creates a very fragmented user base, very fragmented features and liquidity, right? Because you have, for example, Moonbeam can provide stuff like, hey, you want to bring assets from polkadot, but then Ethereum doesn't have those features, right? So at the end you're sort of fragmenting features as well and liquidity is kind of obvious.
00:18:45.960 - 00:20:04.190, Speaker A: And so the key innovation here is general message passing. And this has been here for a while, but I'm guessing right now that we have all these sort of pieces in place, it's becoming more prominent. And so the idea is that you have multiple blockchains that are living in their own little world and you can pass through this GMP stuff, either tokens or messages. Actually sending tokens is a subset of sending a message basically because it's basically sending a message saying, hey, can you actually create this representative token of this one USCC that someone deposited on another blockchain? So gel message passing allows you to communicate any message from one blockchain to another. And like mentioned before, there are many prominent protocols in the space like the one that we've worked the most right now is Axelar, but we also have layer zero, we have Wormhole and many others that are bringing their GMP solutions to Moonbeam. And Polkadot's general message passing system, like I've mentioned before, is XCM, although there's a very different sort of key thing here that it's polkadot. You're already trusting Polkadot's security.
00:20:04.190 - 00:22:25.798, Speaker A: And so Polkadot will guarantee, in a way the XCM execution, right? And so it's a little bit more secured because you're already trusting Polkadot and their economic model for securing your own blocks as a blockchain, right? So this is one of the probably best examples of connected contracts. And the project is called Prime Protocol, right? And by now, you already understand the idea of connected contracts is that you can access any asset, any user, any blockchain from Moonbeam. I've mentioned the example of Lido when you could access relay chain features like Staking from Moonbeam, and this is Staking Kusamas or Polkadots. The example of Prime Protocol is really, really interesting because it solves sort of like the liquidity fragmentation problem. The idea is that Prime Protocol will have sort of like the brain of the smart contracts living on Moonbeam, and it will have sort of like a subset or a lighter version of the logic on all the different blockchains, right? Let's say ethereum, avalanche, anyways, all the different blockchains that we know, BSc and everything else. And so the idea here is that let's say a user wants to deposit collateral from ethereum, but they want to mint the stablecoin on avalanche, right? What will happen is that that liquidity will actually move from Ethereum to Moonbeam. And so basically, the brain of the operation in Moonbeam will say, okay, a user deposited one ETH or whatever on ethereum, I'm going to bring it over to Moonbeam, and then I'm going to basically mint the stablecoin that the user wanted to mint on the target protocol, right? And so this solves basically the problem of having to sort of, like users fragmented everywhere, because you're allowing that smaller logic that you've deployed to all the other blockchains, allow all the communities in these blockchains to interact with your protocol, but you have the core layer of the logic and everything happen underneath, like in the backend, happening on Moonbeam.
00:22:25.798 - 00:23:15.926, Speaker A: And so this relies on GMP protocols like Axelar, in this case, I think, to sort of pass messages all over the place. And so the benefit of connected contracts approach, you might have already answered this question yourself, but it solves the fragmentation issues that it inherits with multi instance approaches like we've seen before with Sushi increases the efficiency by using specialized chains and scale out strategies. In this case, for example, we can think about the Centrifuge example. They are specialist chain that need to have sort of like liquidity. And so they're using Moomim's and the connected contract approach. In this case, Moomim will be the specialized chain that is providing this Bridging service. And then also improve the end user experience by hiding the infrastructural complexity.
00:23:15.926 - 00:24:04.970, Speaker A: And actually for this I'm going to bring another example, which is that you can actually now send dot from Polkadot to Osmosis and Cosmos. And the idea here is that in the near future, hopefully the user will only need to send sort of like dot to a single address on Polkadot. And then all the complexity is hidden from the user and then the user will see the dot on Osmosis and all the complexity it's hidden underneath by sort of this connected contracts approach. And that is basically what we think that it has to be the goal in the near short term. Okay, so GMP protocols, I mean, you understand more or less the idea by now. But the idea is that you have one blockchain, you have another one, and you're sending basically a message. It could be from the Magenta blockchain, hey Dr.
00:24:04.970 - 00:24:35.634, Speaker A: CN blockchain. Our communication seems to be so one sided. And so, I mean, the idea here is that you have an interaction. This message could be, hey, write this to the smart contract, do this with this other smart contract. And so we have two main sort of like inter blockchain communication systems on Moonbeam. One is Polkadot or XCM that like I said before, inherently secured by Polkadot and allows participants of the Polkadot ecosystem to interact with each other. And we've already seen this.
00:24:35.634 - 00:25:17.330, Speaker A: And Moonbeam, this is Live, where we have a lot of sort of like dots living on Moonbeam. We have lido staking solution. We have other ones coming with centrifuge and others in the work right now. We also have general GMP protocols. These are different protocols that provide different solutions. But the goal is very similar, that is to execute a call in a destination chain that has been initiated through a call in the origin chain, right? And we have different integrations right now on Mooming, like Axelr layer, zero, wormhole and many others. If we have any others between now that I'm recording this and the hackathon, I'll add them to the slide.
00:25:17.330 - 00:26:08.420, Speaker A: Only today we're going to talk about interoperability in Polkadot and XCM. But if you want to learn more about GMP protocols, I recommend you to visit their documentation page and just basically apply their sort of tutorials into Moonmer, moonbase, alfar testnet. Cool. So XCM Polkadot and XCM, like I've mentioned before, is the native intracommunication layer of polka dot. XCM is basically a given instructions. Basically, let's say the instructions are stand up, walk ten steps to your right and turn on the light switch. And so the idea here would be that XCM contains a set of instructions that all the parachains or the blockchains in the polka dot ecosystem can understand and will do a set of actions that these instructions basically ask you to do.
00:26:08.420 - 00:27:05.186, Speaker A: There are multiple ways. There is actually a virtual machine that you can call the XCM virtual machine that is going to interpret and execute these instructions within the XCM message, right? So this will be sort of the logic or the brain that will read the instructions and execute them as they go. There are many communication channels in this XCM sort of technology. The main ones are actually the channels are unidirectional, meaning that if you want to communicate to another parachain, you have to make sure that there is a bi directional channel. And these communication channels allow message passing in a given direction. You have, for example, UMP, to communicate from Moonbeam to polkadot, DMP from Polkadot to moonbeam, and then Xcmp or HRMP between parachute chains. And this is basically how the messages are passed around.
00:27:05.186 - 00:27:50.158, Speaker A: The cool thing is that in general, pre compiles that I've mentioned before allow you to hide all this complexity that I'm explaining right now. And basically it provides methods that are a lot simpler to use because all the set of instructions that you need to send and everything are hidden from the developer, right, by using these pre compiles. And that's the main idea. So let's go through some scenarios, right? So the first one is remote transfers. This is one scenario that is probably the most logical one. Let's say you want to bring dot from Polkadot to Moonbeam, right? How would this scenario look like? And these are the sort of XCM instructions that are needed in Moonbeam. And these are the instructions that are needed on Polkadot.
00:27:50.158 - 00:28:36.454, Speaker A: So the main idea here is that you're going to send your tokens through an XCM instruction. You cannot send it manually because it will not work. You send tokens from Polkadot, your account on Polkadot, to a special account called Sovereign Account that is controlled by the Moomium parachain. It's not controlled by one person, one protocol, one bridge. It's controlled by the blockchain itself and it can only be accessed through specific ways. And so once the tokens are being held by this account, mumi will actually receive an XCM message with the following instructions that is basically saying, okay, I can ensure that the tokens are being held by my account on the relay chain. So I'm going to create a representative asset called in this case Xeot.
00:28:36.454 - 00:29:20.030, Speaker A: I'm going to send it to the account that the XCM message instructed me to. We have a pre compile for this called X tokens where you don't have to worry about XCM instructions. Just follow a tutorial and you'll understand basically what you have to provide. The second one is remote execution. I already explained this with the Lido example, but it's really cool because you can actually transact any sort of bytes that perform an action in a destination chain. I'm not going to go through that because it's not really that important. But you can see the XCM instructions that are related or are needed for this action to exist.
00:29:20.030 - 00:30:12.062, Speaker A: And last but not least, we have remote EVM calls. This is still being worked on and it's available on Moombay software testnet, but it will allow you to trustlessly and remotely call Moomim's EVM from another chain in the ecosystem. So on bridges, we know we can do that with general message passing protocols, but on polkadot it's a little bit different because you have to do this in a trustless way. Remember that in bridges, you sort of have the security problem, let's say, where you are relying on the bridge to pass your message. And so here we are still writing the documentation. There's still some security, not security problems, but design choices that were made to sort of prevent certain type of collusions, like with the EVM transaction hashes and everything. But you can actually use this on Mumbai Salpha today.
00:30:12.062 - 00:31:05.378, Speaker A: And we have projects actually working on integrating this solution with their sort of like tech stack. So, I mean, this is really exciting because projects that don't have any VM will be able to access an EVM through XCM and polka dot. And going back to the remote transfers and scenarios, we introduced something called the XC 20. And the main idea is that usually when you want to ship assets through the ecosystem in polka dot, they have to be substrate based assets. Remember that substrate is the SDK that Mumi will build on top of and sort of only substrate assets, only assets that are created with the substrate interface can actually be sort of shipped around the ecosystem. This means that regular ERC 20s cannot be sent through XCM. But then what we've done is that we've sort of built an ERC 20 interface or pre compile on top of XE twenty s.
00:31:05.378 - 00:31:55.134, Speaker A: And this is what creates the XC 20 token. And XE comes from the cross chain terminology. And so basically the cool thing is that you can actually access this XC twenty s from tools like Hard Hat, Truffle, web three, JavaScript, Ethers web three, Python. If you're a Python person as a regular ERC 20. But then you can also use some other pre compiles like the X tokens to send these XC 20s around. And sort of the cool thing is that you have the best of both worlds. And that's why we've seen, for example, projects like DEXes, like Sendlink, Solar Beam, Stella Swap, Beam Swap, all these DEXes implementing or adding sort of like this XC twenty s, or liquidity offerings or swap offerings, right? We have XE Dot on Estella and Beam swap.
00:31:55.134 - 00:32:32.842, Speaker A: We have Xiksm on Solar Beam. And so this is becoming a thing where Project Parachains want to tap into Moomium's DFI ecosystem, and so they'll create an XC 20 that represents their token, and then we'll contact the teams for DFI. And then the other possibility is transact that it allows you to do arbitrary calls with purchase execution. So like I said before, this is how, for example, Lido works. We're buying execution on polkadot, and we're. Doing a transact where that transact is basically a stake. But you can actually call our EVM as well through this.
00:32:32.842 - 00:33:19.818, Speaker A: And like I said, this is still being worked. I mean, the documentation is still being written and we should have it soon, so you guys can use it on the hackathon. There's certain limitations here. You cannot do anything that you want, but I mean, it's pretty open. We're still thinking about how we integrate with other projects, but this is basically the interesting part, right? I mean, Token transfer is sort of like everyone now sees it as something that is a given. This is the more interesting part where we'll see more advanced interactions being worked on between Moombeam and other projects, like the Lido example that I've mentioned before or the Centrifuge example. So how to get started with Moonbeam? You have two ways.
00:33:19.818 - 00:34:00.022, Speaker A: I mean, you can also go directly to production if you want with Moonriver and Moonbeam, but you have the way of a development node that it has instant finality. So every time that it receives a transaction, it would create a block like Ganache. You can get one started with Docker or sort of the more hardcore way, which is know, I want to compile the binary myself. You need Rust for this, it's a little bit more complex, so I personally recommend the Docker way. But on the other hand, and by the way, the development node has some limited features. You cannot do XCM because it's a standalone node that you have for yourself. On the other hand, you have Moonbase Alpha, which is our testnet, and it's accessible for everyone.
00:34:00.022 - 00:34:34.514, Speaker A: You have Http and WebSocket Endpoints, you have Staking features, governance features, and XCM features as well. And so it's a little bit more complete, but it's a little bit slower because the block times is every 12 seconds. So I mean, you should just decide, depending on what you're trying to build, go with a development node or go with Moonbase Alpha. So if you want to do a development node, I personally recommend Docker. Like I said, you just run this docker command and that's it. You have a standalone node running super quickly. There are different flags that I've added here.
00:34:34.514 - 00:35:11.882, Speaker A: If you want to have a block every X seconds, if you want to trace RPC calls, it's a little bit of everything. So I'll leave it up to you to sort of like if you want to use them or not. On the right hand side, I've provided the instructions for the binary way of running a development node. Like I said, I don't personally recommend them. You need Rust, you need to clone the repo, check the correct Rust version and build the binary. But if you want to do them, the instructions are there. The second approach is by using Moonbase Alpha you have the HTP and WebSocket Endpoints are available in this URL.
00:35:11.882 - 00:35:41.894, Speaker A: Please note that the public ones are rate limited. So I mean if you want to have a more performant one, you'll need to contact the endpoint providers and enroll to their service. They do have free tiers. If you want to get started with Ether JS or Web Three JS is super, super simple. You just need to create a provider on Ethers. When you provide the, in this case the public endpoint for Moonbase Alpha, even though there are other public endpoints, and then for Web Three JavaScript, it just created using the Web Three constructor. Just create the web three instance.
00:35:41.894 - 00:36:11.540, Speaker A: It is as simple as that. There's no other requirement. Moomim is very Ethereum compatible, like I said before. And with this you'll have a provider or you'll have a Web Three instance that is already Moomim enabled for Truffle and Hardhead. Define the provider in the Truffle config or hardhat config file. As you would expect with any other network, it's very straightforward. Just by using the endpoint and the chain ID, you have everything already ready to go.
00:36:11.540 - 00:36:38.550, Speaker A: So quickstart Survival Guide this is a page that we released yesterday. I'm recording on Tuesday, October the fourth. If you just want to get started super quick, I don't want to know anything. I just want my endpoints. I want to know what block stores you guys have and everything. Just click on this link. Go to this link and you have all the information to get started super, super quick, including faucet information for Moonbase Alpha.
00:36:38.550 - 00:37:07.666, Speaker A: So everything is in there. Our documentation is very thorough. So if you have any particular sort of integrations that you want to take a look at, there's a lot of information in the documentation side. But if you really want to get started super quick, this is your URL. Okay, so now we're going to do a very simple demo. We're not going to do anything complex, no worries, but it's going to be super short just to help you get started. So I do have my MetaMask here.
00:37:07.666 - 00:37:54.818, Speaker A: As you can see, I already have it connected to Moonbase Alpha. If you want to get it connected, I think the easiest way you can do is visit our doc site and click here and connect MetaMask. You will be given the option to connect to Mumi, Moon River or Mumbai Salpha. And if you click on Mumbai Salpha, it'll automatically configure MetaMask for you. And so once you have MetaMask connected to Mumbai Salpha, you can do as you would expect, right? You can send tokens, you can actually even add ERC twenty S in here and everything, right? So what we're going to do today is we're going to deploy a very simple ERC 20 and we're going to import it into MetaMask. So for that, as you would expect, I'm going to go to remix. Let me actually increase here the size.
00:37:54.818 - 00:38:25.530, Speaker A: I'm going to create a new file called ERC 20 Sol. And I don't really want to write the code of an ERC 20. So what I'm going to do is that I'm going to go to Open Sepling Contract Wizard, and I already have an example here for you guys where you actually just click ERC 20, provide the name of the token, the symbol if you want to pre mint anything. And then you add the features that you want. Right. Super simple, very straightforward. And all this works with Moomim, as you would expect.
00:38:25.530 - 00:38:54.760, Speaker A: So what I'm going to do now is I'm going to copy to Clipboard. You can also use the Open Remix feature, but I'm going to copy it to Clipboard. I'm not sure if it did it, so I'm going to do it manually. I'm going to visit Remix. I'm going to paste this information here. As you can see, I already have the compiling feature enabled. I normally have Autocompile, but if you don't have Autocompile, you can press CTRL S in here or just compile it manually as you have here.
00:38:54.760 - 00:39:30.482, Speaker A: So I have my ERC 20 token called Ethbogotad 2022 ready to go. The next step would be to go to deploy and run transactions. For sure, I need to connect to my injected provider, MetaMask as the environment because we're going to deploy on Moonbase Alpha. It's telling me that it's unlocked, needs to be unlocked, which it is. Okay, so wait, I do have some messages here. So let me refresh remix. This tends to happen once in a while and this is a remix problem or a MetaMask problem.
00:39:30.482 - 00:40:05.156, Speaker A: So probably if I refresh Remix, it will probably oops, I forgot to click here. It'll probably work itself out. All right, so I do have my ERC 20. It is already compiled, hopefully, so I should be able to it's compiling. I'm going to go to deploy and run transactions. It's already compiled. So I'm going to go to injected provider and you can see that I already connected to Moonbase Alpha.
00:40:05.156 - 00:40:36.520, Speaker A: This is a chain ID. I have Alice, the account selected with this amount of dev tokens. And I'm going to deploy my ETH Bogota 2022. So when I click deploy, as you would expect, I get a metamass pop up. All right, let me expand this. Oops. All right, so we have here and you can see that I can just scroll down and sign the transaction.
00:40:36.520 - 00:41:04.640, Speaker A: And now we have to wait because this is a twelve second block time. With the Asynchronous backing, which is a technology the parity is developing, we might see 6 seconds block time. But this is still being worked on. I think it might be live end of year, but we'll see. But now we're just waiting for our transaction to go through. And this will just deploy the token into Moonbase Alpha. As you see, I have it here.
00:41:04.640 - 00:42:16.110, Speaker A: I have all the ERC 20 token methods that you would expect. I have also the domain type hash because I put a domain separator because I put the permit stuff so I have the name, I can check the balance of Aleth which should be 1000 tokens plus all the decimals here. So if I do this, this is all as you would expect on any Ethereum like environment, right? I can even go ahead and copy the ERC 20 token, go to MetaMask and import it and you will see that I have my ETH Bogota 22 token and I have 1000 and I can just quickly import it and I can send it to any other account that I have here. Let's send it to Bob and I'm going to send ten. And this is all like I said, as you would on any other Ethereum like chain. You can see that I'm sending ten and I'm paying the gas fees in dev token and then I'm just going to confirm and we can also see the transaction in block Explorer. This is Moonscan, which is ether SCAN's deployment on Moonbeam.
00:42:16.110 - 00:42:56.554, Speaker A: And you can see that this is a Moonbase test and transaction only. So once the transaction is approved, you will see everything here. Moonbeam offers deterministic finality. This means that we don't have to wait for block confirmations, we just have to make sure that the transaction is shown as final. And Moonscan has this integration already done, meaning that once the transaction is marked as final, it is already done. You can see here that the block is still unfinalized so the transaction cannot be considered final yet. But it's not like Ethereum proof of work where you had to wait a certain number of block confirmations to ensure finality.
00:42:56.554 - 00:43:42.030, Speaker A: So now you can see that you have here the block has been finalized so this transaction is final. And if I go back to MetaMask actually Alice has now 990, EB 22 and Bob should have ten. So I mean, like I said, this demo was super, super simple because it's just to show you this is like an Ethereum like environment. If you want to learn a lot more, you could just have to visit our documentation site. This offers every single piece of information that you probably need to get started with Moonbeam. And if not, we're very active in our channels like Telegram or Discord for technical questions. So now that we've done with the demo, let's do the Bounties really quickly.
00:43:42.030 - 00:44:11.442, Speaker A: So we have two bounties for Ethbogota. They're mainly focused on inter blockchain communication mainly. The first bounty is create a cross chain DAP. The idea is that must be around Moonbeam and connected contracts. You can use any of the GMP supported by Moombeam. This is XCM or external, it doesn't have to be XCM, just create a cool cross chain DAP to showcase sort of a connected contracts approach. The second one is use one of Moombeam's pre compiles.
00:44:11.442 - 00:44:58.498, Speaker A: So the idea here is that you can create a cool DAP bot or feature that uses one or multiple Moomium pre compiles, be creative and have fun. If it's related to inter blockchain communication, it's better, but it doesn't really have to be right? I mean, you can create any sort of DAP, bot or feature that just uses Moomin pre. Compiles just to show how powerful precompiles are. Some of the relevant documentation you can find. On the right hand side, we have precompiles URL, the Axiom page of Moombeam. We also have a specific one for transactor precompile, and we created a series of articles with Axelor that are in connected contracts. And here we are deploying a very simple example.
00:44:58.498 - 00:45:32.654, Speaker A: Hello world. We have one coming up that will be a multi chain DAP as. So, you know, make sure that you check this one out and you check other ones in the Moomim net website because those will be helpful to sort of build the connected contract DAP. So that's all I have for you today. I thanks a lot for tuning in into this workshop. Hopefully you found this information helpful. How you can contact us if you want to know more, go to our Moombeam Network website for sure.
00:45:32.654 - 00:46:10.314, Speaker A: Our documentation site has, like I said before, a lot of information around how to get started on Moombeam. You can go to our Moomim official Telegram channel, our Discord channel, as well as very active, and you can follow us on Twitter at moomime network. Today's presentation, you will find it on the right hand side of the slides. You can scan the QR code or the Bitly link moomim ethbogota 2022. So, yeah, thanks a lot for tuning in once again. I'll be actually in ETH Bogota this weekend, so hope to see you there. Hope that you decide to build on Moomim, and hope you actually check the Bounties out and work on them.
00:46:10.314 - 00:46:13.190, Speaker A: So thank you very much. And yeah, I'll see you in Bogota.
