00:00:06.170 - 00:00:32.850, Speaker A: So up next we have Norswap, who's going to be talking about modular sequencing. Norswap, welcome. Happy to have you. Thanks for being here. Okay, I'm going to be talking to you about modular sequencing. So I want you to know that I did not come up with the title of the talk, otherwise it would have been transaction Ordering is a Social Construct. Who watches the sequencer? Mev is everywhere.
00:00:32.850 - 00:01:04.574, Speaker A: Wow, that's a lot. Let's unpack that. First of all, none of this is future plans. We haven't decided what we're going to do about this stuff. These are just some thoughts and ideas to explore design space, okay? So don't make investment decision or whatever based on this. Just don't do anything stupid, really. So modular sequencing core talked about how the Opie stack is modular and just like everything else, sequencing is something you can change in the Op stack.
00:01:04.574 - 00:01:38.620, Speaker A: Okay, so what's sequencing? Sequencing is picking which transaction to include in blocks and how they are ordered. Okay? And also who sequences these transactions, right? And so who gets to pick and what do they pick, how do they choose? So first we're going to be talking about who and today it's us, it's Opilabs that runs the sole sequencer. So we get to pick the order of transactions. In practice, we just pick them in the order Uri. First in, first out. It's very simple. We haven't done a lot of work on this yet.
00:01:38.620 - 00:02:29.900, Speaker A: What could go wrong? No comments, but you get some idea, censorships, all that bad stuff. So what we want to do really is decentralize the sequencer, which means having multiple sequencers that cooperate to come up with blocks. Okay? And so what are our goals when we say sequencer decentralization? There are two goals, really. One is liveness, such that if a sequencer were to go down the network, the L two chain keeps progressing anyway. Very important. The other one is censorship resistance. And that's like making sure that we Op labs cannot make your transaction be censored forever and that nobody can force us to do that either.
00:02:29.900 - 00:03:03.720, Speaker A: The non goal of this is safety. Optimism is safe, but the mechanism that we use to ensure safety is not this, it's the fault proof. Okay? So even if there's a single sequencer, then the chain is safe. Nobody can steal money. But decentralization is important nonetheless for questions of censorship resistance in liveness. So how do we decentralize? Like everything, there's a short term view and a long term view. There are things that are easy to do and things are harder, but maybe more interesting.
00:03:03.720 - 00:03:49.022, Speaker A: And so at first the idea that we're playing with is to have a low number of permission sequencers and to have them run round, round robin. So what that means is that there will be one sequencer. It would take care of a certain number of alt blocks, like ten or 100. We need to figure that out and see what's feasible, and then it would be the turn of another sequencer who would do the same. Okay? And so if one sequencer is misbehaving or Censoring or things like that, e would only be able to do that for a certain number of blocks before another sequencer takes over. And if we diversify the set of sequencer well enough, we put them in different countries and we make sure that they have some vested interest not to misbehave. So they should be like known entities.
00:03:49.022 - 00:04:23.486, Speaker A: They have some reputation, or maybe they put a bond that the governance could take from them. If they misbehave, then we ensure that at least one of the sequencers is going to behave correctly and the chain will make progress and your transaction will be included. So there's another model for this which is interesting. It's called meva. And meva stands for mev. Auctions we'll talk about Mev a whole lot in the rest of this talk. But Mev, if you don't know what it is, you can think of it as the arbitrage profit, right? If some token is cheap on uniswap and it's expensive on Velodrome, well, you buy it.
00:04:23.486 - 00:05:25.060, Speaker A: Uniswap sell on Velodrome, you make money. Who gets to make that money? Well, the first person that notices this and does it and who gets to decide who's first while the sequencer. Okay, so sequencer is able to capture these profits if he's aware of them. And so yeah, and so since there's a lot of money in this, basically one way that you could say that the sequencer could be decided among a set of sequencer is the sequencer that bids the most gets to sequence the blocks. Okay. There are questions here, right? You don't want to make it so that the same sequencer wins every single auction. So you still need some kind of mechanism to ensure that this does not degenerate in a really bad scenario, but otherwise it's a pretty solid one to decentralize and also make sure that we capture some value through Mev, and I'm going to come back to Mev later.
00:05:25.060 - 00:06:11.454, Speaker A: All right? So another model that's interesting is that we could just go and say, well, optimism will behave like a small blockchain, like a blockchain that's not very decentralized, like some of the blockchains in the Cosmos ecosystem or even Solana. And then we'll run some consensus on all these sequencers and they will come up with a block, and then that's the block that will propose to the L one chain. Yes. Let me see if I need to add something on that. I think I've covered everything. Yeah. And the thing that this small blockchain is not very decentralized doesn't matter, because like I said before, the safety comes from the fault proof.
00:06:11.454 - 00:06:52.880, Speaker A: Okay? So even if you have a 51% attack, it doesn't matter. It's just a way to ensure that, again, the network is live. So even if nodes go down, it still works and nobody can censor because this mechanism is going to pick different people to propose the block each time. And there are many existing consensus algorithm we could use for this. We could even reuse the Proof of Stake algorithm from ethereum. Or we could use something simpler like tendermint. The reason we don't need to reuse the algorithm from Ethereum is that the Ethereum Proof of Stake algorithm is made for a huge number of validators, right? And we're only dealing with a small number, at least at first.
00:06:52.880 - 00:07:34.118, Speaker A: So I've been saying, yeah, sequencers can misbehave, they can do things they shouldn't do. And so I want to list the ways in which sequencer could misbehave. So a sequencer can lie and just include transactions that don't work. If they do that, if they submit bad transaction, they will just be ignored. Basically, other sequencer will just read them and say this is bullshit, it doesn't work and so they'll be ignored. The other role of a sequencer so one role of sequencer is to pick the transaction and propose them. The other role is to submit output routes.
00:07:34.118 - 00:08:07.622, Speaker A: Output roots is a commitment to the result of executing your transactions. And if a sequencer submits bad output routes, then the fault proof can prove that these are bad and the sequencer will be slashed and so it will lose the bond that deposited. So it's economically unsound to do this. The other things that can go wrong, the sequencer can go down. Meaning that he will not do his work. What it's supposed to do, he can censor. And then it can misbehave in term of mev and we will see later what that means.
00:08:07.622 - 00:09:03.900, Speaker A: But say we decide that optimism we don't want sandwiching, okay? If you don't know what is, I will explain it later. Or think front running if we decide that we don't want that, but the sequencer does it anyway because technically he's able to, then what we can do in those cases where a sequencer is down all the time, he sandwiches. When we said that we don't want that or he censors, then governance can take some action and just ban the sequencer, basically. And that works if the set of sequencer is permissioned, right? If you had to apply to become a sequencer and you had to be accepted, then we can ban you and then you cannot reapply. If it's permissionless, we can't really ban you, right? You'll just go to another server, get a new IP and then join again. In that case, it's necessary to have a bond that governance can slash and basically take your money. Okay? Like you saw, there's a lot of ideas on how we can do this.
00:09:03.900 - 00:09:42.802, Speaker A: But the point I want to make is that all these models are compatible with our current architecture. We can just slot them in. And so that's very exciting. We have a free rein to come up with the best solutions in the short term and then in the long term. All right, second topic on modular sequencing, what can we do? Sequencing? Well, how do we pick the transaction? And surprise, this is a talk about mev. You might have heard about mev, you probably have. But just in case, what is mev? Mev is value that can in theory be extracted by the actor.
00:09:42.802 - 00:10:03.760, Speaker A: That's the power of ordering transaction. So in ethereum proof of work, there was the miners in proof of stake. It's the validator. And on layer two and optimism is the sequencer. Some people also call that maximal extractable values, but whatever. So how is mev extracted? And this is a copy. Okay, there we go.
00:10:03.760 - 00:10:30.706, Speaker A: So how do you extract mev? So there's different kind of mevs and we're going to review the different major kinds in a bit that will make it much clearer. But let's take the example that was before of an Arbitrage. If nobody knows that the Arbitrage exists, you can just send a transaction, do the arbitrage. Boom. You won. Except people might be watching the mempool. If it's public, they can see your trade.
00:10:30.706 - 00:11:11.086, Speaker A: They can see this is a profitable trade. What if I do it before this guy? Or I put higher gas fees so I will be included first and so people can actually steal your transaction. This is called front running. So in general, you will need to outbid other people. So in ancient times of the HR Blockchains, people did exactly this. They did something called Price Gas auction, which means they put a really high gas price to be the first in the block and the miners would include them based on the gas price. Then came along a little company called Flashbots, and they released a software called Mev Get and they offered Mev Get to all the big mining pools.
00:11:11.086 - 00:12:11.318, Speaker A: And basically how it works is if you are someone that wants to extract mev an arbitrator, and now we call them Searchers Mev searchers, you will send your transaction to Flashbots. Flashbots will relate them to the miners and miners will include them in their blocks based on how much you pay the miners. A very important thing the Flashbuds does compared to previous auction is that it guarantees that if your transaction is included, it will not revert. Which means that basically you can send a lot of money. You'll basically check if you get the arbitrage, and if you get the arbitrage, you send a bunch of money to the sequencer or the miner, et cetera. Another thing that Flashbot enables is that it enables you to send not only transactions, but also transaction bundles. And so you can see a transaction in the mempool and you can put trades around.
00:12:11.318 - 00:12:41.082, Speaker A: So before and after that. And that enables you to do something called sandwiching. And we'll see that in a second. And people don't like that. Usually this system has a flaw that is not often discussed, is that all the mining pools that run Mvvf, they can see all the trades sent by the searchers, okay? And so if they wanted to, they could front run all the searchers. They could just steal their trades. They don't do this because they know that if they do this, they have a lot of reputation.
00:12:41.082 - 00:13:30.030, Speaker A: And then if they are found out, they might be kicked out of Flashbots, which will end up costing them much more money than they can hope to make by basically stealing a transaction. But they could, and this will be important later, then we switch to proof of stake. And in proof of stake, flashbots have proposed a new system called Mev Boost. Mev. Boost is something called a proposal builder Separation system or PBS. And basically you get a new entity, which is a block builder that builds the block, and then you got the block proposer, and that's like a validator. So if you're picked as a validator in Ethereum proof of stake, you can ask block builders to bid for the rights to pick the transactions in the block.
00:13:30.030 - 00:14:25.442, Speaker A: And then the block builders will now act like the mining pools in the previous model. So they will probably run Mevgaf or something like that to get transaction from the searchers. So why did we change this model? The reason is that after proof of stake, no matter what people say, validation on Ethereum is much more decentralized. There are a lot of small staking pools, there are a lot of small stakers, and we want them to be able to make money. If they get to pick a block, they should also get the mev money. Unfortunately, you cannot trust everybody with the transactions, right, because anybody that can see the transaction from freshbots, from Mvgaf, they could steal these transactions. And this is okay if you're relying on like six mining pools, it's a very limited set of people.
00:14:25.442 - 00:15:11.806, Speaker A: But if you have thousands or even tens of thousands of validator, it becomes almost impossible to say who stole the transactions. And so instead, you will now centralizing the trust into these block builders and all the validators can contract the block builders. Okay? So now let's like what's mev? Let's see a few flavors. Arbitrage. If there's a decentralized exchange where price is low, you can buy there and you can sell it higher on our exchange. Very simple. Backtraning simply means capturing some financial opportunity right after the transaction that creates it, right? You want to be first, basically, and how to be the first is to be right after.
00:15:11.806 - 00:15:53.434, Speaker A: And so the biggest example of this is on lending markets. There might be liquidations because the price has dropped, the price of the collateral dropped. And so these lending platforms want you to take over the collateral for a price in stable coins or something like that, and you will sell it, but they will leave you a margin which will be your profit. And so people will compete to be the person that liquidates these loans. So that's a case of back running simply for NFTs. If it's completely open, mint the first people to mint get the NFT. And so that's a race.
00:15:53.434 - 00:16:23.202, Speaker A: You want to be first to mint the NFT. Generalized front training. We set example when we say that pools can steal trades from other people. So basically you'll look at the ManPool, you'll look at all the trades, right? And you'll try to see, well, if I were to do the same transactions, could I make money? And if the answer is yes, then you just do that. You just do exactly the same transaction. You will just bid more than the other guy and then you will take the profit. So it's called generalized front trading.
00:16:23.202 - 00:16:55.518, Speaker A: Generalized because you're trying this strategy over every single transaction in Mempool. Then we got sandwiching. Sandwiching is kind of complex, but it goes like this. A user makes a big trade, say on Uniswap or something like that. So say he wants to buy ETH with USDC. The Mev searcher sees this, sorry. And so what it's going to do is going to do the same trade but before him.
00:16:55.518 - 00:17:39.902, Speaker A: So it's going to buy ETH for USDC, which pushes the price up. Then the user is going to make the trade. He's going to have a worse price. And so that also pushes the price up, right? So if the initial price was X, after the sandwichers buys it's express A, and after the user buys its express A plus B, and then the sandwicher turns it around and sells what he bought in the first step. Okay? And basically he's able to sell that at a higher price that he bought because the user pushed up the price. And so basically he's making the price worse for the user and he's pocketing the difference. And so that just makes life shitty for you.
00:17:39.902 - 00:18:12.906, Speaker A: If you're making a big trade and people don't like this a lot. There's also something called just in time liquidity. I'm not sure I'm going to have time to talk about that. It's a little bit complex to get into all the nuances, but this slide is there and I will link the slides later and maybe we have time, we'll come back to it. I think I'll leave it if there's some questions about it. Basically, mev is big business. So this is a screenshot from the Flashbots Explorer, which I took in August, I think.
00:18:12.906 - 00:18:51.670, Speaker A: So this is not entirely new, but it gives you an order of magnitude on these things, right? Like on a month, eight, 5 million in 24 hours, about six K. And in total, and I'm not sure how long this tracking has been going on, but like 600 million. So this is a massive money that's being made here. It's also highly asymmetric. Some blocks will have massive mev and some blocks will have very little mev. If you multiply 24 hours. The 24 hours number by 30 you don't get the eight 5 million.
00:18:51.670 - 00:19:17.994, Speaker A: So it's very asymmetrical. About 33% of this mev is paid to miners. So this is not a lot, right? You would expect people to know the opportunities and basically bid a lot to the miners. Like up to 90% in practice. We don't see this yet. Maybe we'll see that in due time. There's been 18 transactions tracking more than 1 million in Mev.
00:19:17.994 - 00:19:43.094, Speaker A: It's interesting. And the biggest one has actually occurred on L Two. There was some 5 million plus Arbitrage on Arbitram a while ago. So mev and l two already exists. Even though there's no flashbots, even though there's no auction, there are arbitrages to be made and people will make them. People will make the money. So mev good is mev bad.
00:19:43.094 - 00:20:12.318, Speaker A: People often say mev is bad. That's a naive take. Someone will profit from arbitrage. Like I said, if there's a discrepancy in price, someone will pocket that profit. And I think personally it might as well be the network that enables those things. And it might go to public goods and to a whole lot of things that benefit everybody. Basically, instead of just benefiting some guy that runs algorithmic trading or some kind of mev software at home.
00:20:12.318 - 00:20:52.190, Speaker A: He's not redoing. Like arbitraging is useful, but there's no reason you should be paid a huge amount of money for it, right? So sandwiches are almost purely zero sum. Someone that does a sandwich is not providing any value on the network. It is possible. So there's been a paper published that says in some cases it could be better with sandwiching than not. I really doubt it is relevant in practice, but in theory you could construct these scenarios. And I mentioned this just to be complete, but my conviction 100% the word would be better off without sandwiches.
00:20:52.190 - 00:21:23.970, Speaker A: Nobody likes front running people. If you smell an opportunity, make a good trade, someone slips from you. It's kind of shitty and just in time. Liquidity I didn't get into details, but basically this one is good for users, but it's bad for liquidity provider and in turn that makes it bad for user in the long term. So preventing mev is dumb. People say we should just prevent mev. You can prevent Arbitrages.
00:21:23.970 - 00:22:13.810, Speaker A: Basically one way that some people try to prevent mev is through this thing called fair ordering which is first in, first out. And this is not fair at all because it privileges organizations that can build order or infrastructure to reduce latency of mev extraction. And so what's fair in that? Right before you had at least at a competition between guys, it could be at home and you came up with the cleverest solution and now you have the same thing that's as flawed but also only rich organizations can do it. This isn't great and if you do this, you still have a problem that people will try to start spamming to capture opportunities. This is not hypothetical. It's happened on ethereum. Free Flashbot.
00:22:13.810 - 00:22:44.158, Speaker A: It's happening on Salana. It's happening on Binance smart chain and probably on L Two. To some extent, though, not quite as bad. So knowing all this, now we've got a big picture of mev. It's not good, it's not bad. We need a solution for it. How do we make sure that we capture all this money for the protocol, for the public goods, for the ecosystem? And there are a few solutions for that.
00:22:44.158 - 00:23:17.446, Speaker A: So, yeah, the goals capture the value for the protocol, as I just said, make the user experience good for users. And so for me, that means no front running and no sandwiching. This is sometimes something people argue with. They're wrong, like fight me. Maybe we'll get some interesting questions around that. But basically, this works pretty well, and it is actually feasible to achieve that. And I'll talk briefly about how we can do that and then decentralize effectively.
00:23:17.446 - 00:23:48.018, Speaker A: So all the MVV solutions that we came up with must be compatible with sequencer decentralization. As we talked before, it's extremely important to decentralize. So how do we do it? Basically, we want to run some auctions just like Flashbots. One thing we could do is just run images on the sequencers. The thing is that with bedrock, we'll have two second block time. Okay? And so two second is not a lot of time. And if you have to people need to send their transactions to MVV gas, need to simulate the blocks.
00:23:48.018 - 00:24:29.758, Speaker A: You'd send that to the sequencer, maybe the latency starts to add up and 2 seconds is a little bit too tight. What you could do instead is do meva so that's MV auctions via something like mev boost, mev boost, basically does MV auction, actually. And then you would sell basically the rights to sequence more than one block. You could sell right to sequence ten blocks or 100 blocks or something like that. So that's for the mechanism. So making auctions make sure the protocol captures value. And then we could also impose some rules on how mev can be captured.
00:24:29.758 - 00:25:04.346, Speaker A: And so the simple and effective rule is no front running. If you count front run, you can also count sandwich. And you can sort of enforce that on the short term, you can have governance oversight. So basically, we say to the sequencers guys, it's not allowed to front run. And if they Vlad this rule, then we can slash them or we can ban them, just like we discussed before. This is not great, right? Because we have to monitor what the sequencer are doing and make sure that they don't do this. And then we have to do a governance vote.
00:25:04.346 - 00:25:37.330, Speaker A: It's a lot of drama and people need to vote, et cetera. I'm of the opinion that generate governance should be minimized whenever possible. In this case, it is indeed possible via technical solutions. Okay, and these technical solutions basically work in two steps. The first step is to remove the power of the sequencer to order transactions altogether. And there are basically two solutions that are being talked about in the space right now. The first is a first and foremost Oracle.
00:25:37.330 - 00:25:58.990, Speaker A: So chainlink has a solution, identical fur sequencing services. Again, this has nothing to do with Furnace boo. And the other one is called Threshold Encryption. And that's a solution that a company called Shutter Network is working on. And there may be other people working on that. Yes, there is another company whose name I forgot. Entropy.
00:25:58.990 - 00:26:51.434, Speaker A: Maybe entropy, but I'm not sure. But in both cases, basically you have a networker node that provides an ordering for the sequencer to respect, right? In the first in, first out, Oracle. How that works is that all the nodes in that network, in the first sequencing network, they will receive a bunch of transactions and they will give their ordering of transactions. And if a majority of them are honest, then it's impossible to front run. Basically in the Threshold Encryption case, you will send your transaction encrypted to nodes in the network and they will make an ordering of the encrypted transaction so nobody knows what's doing what. The sequencer will sign on the ordering. And then the network, the Shutter Network for instance, will come together, create a key to decrypt all these transactions.
00:26:51.434 - 00:27:36.750, Speaker A: Then you get them decrypted after the sequencer has said, yes, for sure, I will use this ordering. So that's how you take the power away from the sequencer. Now you cannot order anything. And so as a user, if you use this solution, you know that you won't be frontrun or sandwiches or anything like that. The next step is to reintroduce some form of auctions because we still want to capture mev and we still want that value to go through protocol and to public goods. How you do that is that you conduct two kinds of auctions, ideally at top of block auctions for things that should go at the top of the block. So say last block after the transaction will reveal you're like, oh, there's a massive arbitrage now where you can bid to be on top of the next block.
00:27:36.750 - 00:28:24.560, Speaker A: And then some transaction also creates a massive mev, just like, let's say Oracle updates. And so this could be in a public pool and people could bid to backtrack them. The reason why you could say, well why don't we just put the Oracle updates encrypted and then we reveal them and then people will bid to be on top of the next block. That doesn't quite work. The reason why it doesn't quite work is that people will know the Oracle is coming and they will start spamming to be by luck after it, right? They'll just spam a whole lot and then they will get to be in the same block after the Encrypted Oracle update. So you have to do something special for them. You have to allow background options, basically.
00:28:24.560 - 00:29:02.810, Speaker A: And I think this is the end of okay, indeed the end of our presentation. So some conclusion there. So the Op stack in Bedrock is the first incarnation of the Op stack. They are flexible and you can easily change sequencing and we will indeed work on that in the future. And the goals with changing sequencing would be to decentralize for liveness for censorship, resistance, and to extract mev so that we accrue value to the protocol and the ecosystem and the public goods. What are our best solutions? Well, we're still thinking about that. We're still talking to people in the industry.
00:29:02.810 - 00:29:33.570, Speaker A: If you are smart and you have some ideas there, feel free to message me. I love to talk about that stuff. And there are short term and long term solutions. On short term, we can use governance as a crutch to say, hey guys, behave or else. But in the long run, there are technical solutions that we can implement that make sure that no matter what, you can't misbehave. All right, I've been Norswap, you can find me basically everywhere. My handle is Norswap, including on Twitter.
00:29:33.570 - 00:29:38.900, Speaker A: And yeah, if people have questions, I think we have a tiny bit of time.
00:29:40.070 - 00:29:42.086, Speaker B: Hey, Norswap, good to see you, man.
00:29:42.268 - 00:29:44.406, Speaker A: Hey there, how's it going? Good, yeah.
00:29:44.428 - 00:30:08.400, Speaker B: Thanks for your talk. There were a couple of questions, so I'll just kind of ask them to you here directly. First question here is just about kind of the fraud proofing and how that works. Is it somebody individually is submitting that there's kind of a fraudulent thing that's happened? And if that's the case, then how would you go about preventing people from front, running the fraud proof, basically, and getting the reward for doing so?
00:30:09.650 - 00:30:43.100, Speaker A: That is such a good question. I love it. Yeah, that's a difficult question. I think the disappointing answer is that you would go through something like Flashbot that has sort of a trust agreement not to frontrun because otherwise it's really difficult. I've thought about this a little bit, like we're not quite there yet. We still need to build actually the technology of the fold proof fully. And this economic part comes even after that.
00:30:43.100 - 00:31:02.362, Speaker A: But I've started a little bit with trying to compensate people that contribute, but it's really difficult because then you can just sort of copy what our people are doing without doing your own work, and you don't want that either. So it's a real problem. Gotcha.
00:31:02.426 - 00:31:26.920, Speaker B: And then another question that came up was and I know we have 1 minute left, which might not be enough time, but you mentioned as one of the ways to deal with kat is here to deal with mev is sort of threshold encryption is one of the kind of the ideas that's been put out for managing this. Can you maybe chat a little bit more about the. Interaction of Threshold encryption and mev and kind of how that might be a way to mitigate it.
00:31:28.410 - 00:32:19.414, Speaker A: Yeah. So threshold encryption, basically, alternative encryption, I should first explain, is you have this private key and you split it between all a bunch of people, and in this case, the nodes of a network. But the public key is known to everybody. And so as a user, you encrypt your transaction with the public key, and only when the nodes come together to create the private key can you decrypt the transactions. And so it's a way to basically remove the power of the sequencer to order transactions, because now you are ordering encrypted transactions. You have no idea what's going on there, and then the sequencer will commit itself to them, and then later you can reveal. And so it's a way to make sure basically you can't front run or sealed opportunities or sandwich and things like that.
00:32:19.414 - 00:32:28.458, Speaker A: And if you want to extract MVG, then you need to introduce auction, but you can do that in a way that you can't do these bad things, basically. Got you.
00:32:28.624 - 00:32:51.870, Speaker B: Awesome. Okay, cool. Well, thank you so much for being here and running through your talk with us. Modular sequencing, which was actually just a secret mev talk in disguise, as almost all of them are. But, yeah, thanks for being here, Norswap. Really appreciate you taking the time. And if anybody else has any questions, feel free, as Norswap mentioned, to grab them on any platform at Norswap.
00:32:52.450 - 00:32:54.700, Speaker A: Cheers. Thanks a lot. Love that. See you around.
