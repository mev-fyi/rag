00:00:00.330 - 00:00:28.706, Speaker A: Is dropped into the event chat as well. Okay. Thanks, Rob. You're right. Thank you. All right, so next up, we have a talk from both Brian and Alan from the Dark Forest team. Dark Forest is I mean, I'll let them explain it properly because I won't do it justice, but it is a real time RTS built on Ethereum, fired by the Three Body Problem series of books.
00:00:28.706 - 00:00:42.534, Speaker A: If you recognize the name, the Dark Forest is the second book in that series and they're going to talk about challenges and constraints in ZK gaming. So, Brian Allen, I'll let you take it over from here and please welcome them to the stage.
00:00:42.582 - 00:00:43.420, Speaker B: Thank you.
00:00:44.910 - 00:00:45.370, Speaker C: Awesome.
00:00:45.440 - 00:01:13.374, Speaker B: Thanks so much, Josh. Let's just get our screen share working first and then we'll go ahead and do a quick intro. Are you guys able to see this okay? I think it's awesome. Nice. Yeah. So, first off, thanks for having us. Just by way of brief introduction, my name is Brian.
00:01:13.374 - 00:01:17.826, Speaker B: I'm a sort of senior at MIT studying math, and I'm working on Dark Forest.
00:01:17.938 - 00:01:24.418, Speaker C: And I'm Alan. I'm a sort of sophomore at Columbia studying CS, and I'm also working on Forest.
00:01:24.594 - 00:02:17.270, Speaker B: Cool. So, like Josh mentioned, dark Forest is a real time strategy game in a persistent universe built with ZK snarks on Ethereum. And like you mentioned, it's inspired by the three body trilogy, written by Leo Sashin and translated by Ken Leo. So it's been a lot of fun to work on this project and we're excited to share with you some of the challenges and constraints that we have found in building games on zero knowledge and on Ethereum, which is what we're going to be talking about today. Cool. So, first off, for those of you who aren't familiar with Dark Forest, like we mentioned, it's a persistent strategy game built with ZK snarks on Ethereum. The sort of experience of the game is one where players are exploring space, they're conquering planets, they're looking to build their kind of, like, galactic space empire.
00:02:17.270 - 00:03:04.758, Speaker B: And last month, we ran our first semi public play test, dark Force D 0.3, with about 300 beta players and broke Robston, which was quite exciting. So I think at peak, the usage of the Dark Force core contract, as far as gas usage goes, was exceeding the entire Ethereum mainnet combined. So we have some things to say about Scalability at the end, and we're also obviously very excited for Vitalik's talk on Scalability later this evening for this reason. So just to give a quick, almost like, little demo of what Dark Force actually looks like, 1 second, I think my how do think okay, here we go. Yes.
00:03:04.844 - 00:03:05.142, Speaker A: Cool.
00:03:05.196 - 00:03:24.666, Speaker B: So this is a little just sort of demo video we just recorded on Dark Force V 0.4 gameplay. So Dark forced V 0.4 is the next version that we're actually releasing today. So the first round of Whitelist Keys is going to go out later this evening. But as you can see, it's a space conquest game. There are planets in a large universe.
00:03:24.666 - 00:04:09.740, Speaker B: You can make moves between these planets. Planets have resources. Your goal is sort of to explore and conquer space and that's sort of the mo of the game. And if you're interested in checking out V 0.4, you can go to Zkga Me and we'll have contact info at the end as well. So today we're going to be talking about challenges and constraints in building a fully decentralized persistent strategy game that is actually fun. So, as we all know, Ethereum as a computer is extremely slow, but there's been a lot of excitement around blockchain gaming the last couple of years, just especially given the potential of games to really showcase the possibilities of technology.
00:04:09.740 - 00:05:26.680, Speaker B: So our goal is to create a persistent universe almost like an infinitely modable scriptable Eve Online sort of game with economic value at stake and all these sorts of things and have it built entirely crypto natively. So there's no notion of we're not just periodically committing stuff to the chain, we're not having some system where some game assets happen to be like Exitable NFTs or something. It's like the data layer of this application is on Ethereum and anyone can interact with that programmatically however they like. So the first challenge and the whole reason why Dark Force is built on ZK Snarks is that the notion of incomplete information is really hard to achieve on the blockchain. So what does this actually mean? Well, to understand what this means, first we have to understand the difference between two classes of games complete information games and incomplete information games. So for those who aren't familiar with the concept, complete information games are games where all players know the full state of the universe. So you can think of games like chess or Checkers, where basically I know where your pieces are, you know where my pieces are, there's no secrets anywhere on the board.
00:05:26.680 - 00:06:32.540, Speaker B: On the other hand, incomplete information games are going to be games like Poker or StarCraft where there's some hidden information and not everybody knows everything that's going on in the game. So I don't know your hand necessarily and you don't know my hand or in a lot of strategy games, there's the notion of a fog of war where you don't know where your opponent's base is until you've explored the map and found them. So traditionally, incomplete information games are often able to offer players a much richer space of possible strategies to execute. The reason being because when you have this asymmetry of information between different players, it opens up strategies like deception or conditional coordination. You get to see sort of these large scale social dynamics or even like emergent player behaviors. So traditionally, pretty much all popular MMO massively multiplayer online games are going to be incomplete information games. So we think about RTS games, we think about RPG games, all these sorts of things.
00:06:32.540 - 00:07:22.700, Speaker B: Unfortunately, if we're trying to build a multiplayer game on the blockchain, well, this is almost at ODS with the affordances that the blockchain allows us. In particular, by design, blockchains and decentralized systems are often systems whose data layers are completely open and transparent. So the EVM state is completely inspectable like everybody knows everybody else's balance. I can look up your balance, you can see my balance. We can inspect the state of this contract. And so it means that the notion of keeping private state on a blockchain or a decentralized system is actually quite tricky. If I want to move a piece on this board or something like that, naively, it seems like I have to commit the starting location of the piece and the ending location of the piece and that's going to go onto the EVM and everybody's going to be able to see where I am.
00:07:22.700 - 00:08:41.234, Speaker B: So this means that the games that we've seen so far on blockchain are oftentimes we've got games like CryptoKitties, so we've got these trading card games where everybody knows for example, who owns what kitty and what all the properties of each kitty are. But we don't necessarily yet have games with meaningful notions of incomplete information or private state. So how do we get information asymmetry on a blockchain? Well, it turns out that with some ZK snark technology that was made possible about twelve months ago, we're now able to keep hidden information in DApps and use this to create some class of incomplete information games. So how exactly does this work? Well, let's suppose that we've got some incomplete information game where players are keeping a notion of private state. So on the left hand side of this diagram we've got this player who has some secret state s one. Instead of committing their private state up to the network, which would make it public, what the player is going to do is they're going to commit a commitment to their private state. So for example, a hash of their private state up to the network and they're also going to associate that with a proof, a zero knowledge proof that that hash does indeed correspond to a valid private state.
00:08:41.234 - 00:09:37.182, Speaker B: So by submitting this zero knowledge proof on chain, what they're essentially saying is here's a hash of my private state. If you inspect this proof, you can verify that this does not correspond to a private state where I've given myself extra resources or cheated or anything like that. So what happens when a player wants to make a state transition? Well, if the player wants to transition from private state s one to private state s two, what they're going to do is they're going to publish a commitment to their new private state. So this would be C two along with a zero knowledge proof that there is indeed a valid state transition between the private state's underlying commitment c one and commitment C two. So morally this zero knowledge proof is saying something like for example, in a chess like game you might say something like, I'm moving my knight from secret location A to secret location B. I'm not going to tell you where A and B are. But this zero knowledge proof does prove that the knight moves in an L shape.
00:09:37.182 - 00:10:08.030, Speaker B: It was a valid move. So in this way the player is able to keep, players are able to keep a meaningful notion of private state but zero knowledge proofs keep them honest and these proofs are going to keep them to playing consistently by the rules of the game. So just to clarify the information that players know, they know their own local private state, but information that any public person just inspecting the network knows, all they're going to be able to see is C one and C two and that S one and s two is entirely obfuscated.
00:10:10.050 - 00:10:56.480, Speaker C: All right, so I'm going to talk a little bit about trying to actually build a game that's real time on Ethereum and the constraints we have there. So in particular, there's kind of two large problems. The first is that we can't really schedule any sort of tron job. We can't really schedule anything that happens in the future. So traditionally, if I'm going to play a multiplayer game on a centralized server, I can queue some moves and then maybe my client disconnects and then these moves are queued on the server which is going to modify the game state afterwards. But if I make some moves in the Dark Forest and then close the client, then there's no way to actually ensure that these moves are going to be, are scheduled to happen at some point in the future. And on top of this, each time I submit a move to the game, it takes a few seconds to confirm because of the Ethereum block times.
00:10:56.480 - 00:11:54.450, Speaker C: So the first technique that we use to solve this is something that we call lazy updating. So in particular, we have some resources in the game which follow some sort of a growth curve and suppose that say I have energy at some point in time, I have my energy at a certain value and over time this grows. So for instance, at T equals zero, as a player I can move shifts from planet A to planet B and I can schedule them to arrive at time T equals ten. And then at time T equals ten, the number of shifts that I have on that planet is going to change. However, at this point I can't actually schedule a cron job for the state to change. So what I do is instead I queue the event or I queue the arrival of this event occurring on the planet. Then at T equals 15, after any other player makes a mutation on planet B, I can retroactively apply the event and I can kind of pop the stack and go through every event that's been queued.
00:11:54.450 - 00:13:08.200, Speaker C: So the other solution that we have is that we basically try to design the game around longer timescales in order to circumvent the fact that it takes time for transactions to go through. So in particular, if we have moves that take like on the order of ten to 15 seconds, then block times, the three to 15 seconds meaningfully impacts its experience. But if our move times take from like ten minutes, like 2 hours, then in this case the three to 15 seconds basically doesn't make a difference. Now we actually have a nice side effect from this, which is that we not only want to build something which is technically interesting, we also want to build a project that can really target not only people who are really interested in crypto, but can target general consumers. Basically we want to be able to build a game that's really accessible and fun as well. And games that have typically done a really good job of this are games like Pokemon Go or Candy Crush in which you basically play for a little bit at a time and then you check back in a few hours later. So the way that we kind of see this internally is that this is not so much of a restriction, but it's more of a constraint that we want to lean into, which is that if we build a game, that occurs on longer timescales, it might actually be better for targeting the kind of audience and getting the kind of players that we want.
00:13:08.200 - 00:13:39.220, Speaker C: In particular, if we build a game that's really APM sensitive, where the number of moves you make and how quickly you make them meaningfully impact how well you can play the game, this is not only bad for Ethereum, but this is also really bad for casual players. And our last solution for this problem is that we want to build meaningful client side mechanics. So because we have a lot of private state that's all held off chain, we can interact with the game in a way where we're only interacting with that private state. So for instance, planet locations are held as private state and this means that we can.
00:13:41.190 - 00:13:52.694, Speaker B: It'S the weird thing. Where the screen recording box? Wait 1 second. Here we go.
00:13:52.732 - 00:14:31.422, Speaker C: There we go. Okay, so in particular you can explore the universe and find new planet locations and all this happens off chain. You don't actually need to interact with the blockchain at all. So this means that players can play the game for stretches of like ten to 20 minutes at a time without ever actually needing to interact with the blockchain at all. So the other challenge that we have is we want to build a rich and meaningful universe, but we have a constrained environment. It's not only constrained by time, but it's also constrained by compute and by storage. So the way that we approach this is we basically lean a lot into procedural generation.
00:14:31.422 - 00:15:41.990, Speaker C: So procedural generation is a technique that's used a lot by games like Minecraft where you basically set some number of simple rules for the universe and you can use these rules to generate what the universe will look like. So the picture here shows perlin noise, which is this function that's often used and you can basically think of this heat map as being analogous to mountains and hills in Minecraft. And this means that we can have dense areas, we can have hot areas, we can have oceans, we can maybe have areas where the planet density has changed or planets are more powerful. And there's also a neat side effect of this, which is that since we need to roll this up into a Snark, this actually means that we can save some of the compute from the contract, because the contract doesn't actually need to be aware of the perlin function. It only needs to be aware of whether or not the proof is correct. So we also lean into this kind of generation on the client side as well because on the contract, the contract is only aware of planets as being some sort of ID with some properties. It doesn't actually have any knowledge of what these things look like.
00:15:41.990 - 00:16:45.262, Speaker C: So the way that we present this is that we deterministically from the hash of the planet, use this to generate all the planet properties and this way people who are using the same client are going to be able to see the same planets. So the thing that this kind of leans into and where this presents another constraint is the fact that DApps are all client agnostic. So people can only if people are using the same clients are they going to see the same planets, but people can all bring their own clients. And the problem here is that if we want it is that typically it's already very hard to design games. And some games in the past like RuneScape have had problems where they design a centralized player experience for their server and they give people a client, but then people start bringing their own clients and this can do things like show additional stats or maybe queue moves for you in an automated way. And this is basically guaranteed to happen as long as we're writing games on ethereum. So again, we try to lean into this and we don't really see this as so much of a restriction, but it's more of a constraint that we're able to lean into.
00:16:45.262 - 00:17:27.034, Speaker C: So it means that we want to lean into interop and modability. We want to lean into interop where other contracts can be making calls on the Dark Forest client. And the way that we do this is we build a really simple set of rules. We say something like we have a notion of distance and we have a notion of resources, but we don't actually say what these resources necessarily mean. And what this means is that someone could technically reskin the entire client. They could write ZK Fantasy or they could write ZK Spaceman Spiff and we could write a different version of the client where instead of sending forces between planets, we're sending gold between different castles and there's dragons and flying around and everything. But at the contract level, the contract is only aware that there's resources moving around.
00:17:27.034 - 00:17:34.030, Speaker C: It's not necessarily aware of the cosmetics or of exactly how the game looks like to the user.
00:17:35.330 - 00:18:28.266, Speaker B: Yeah. And to jump off this, this is not just something that necessarily exists on the cosmetic level, but can also exist on the level of mechanics as well. So even with our last game that lasted about a week, we saw players like modding clients writing extra features. What we're really looking into is this idea of being a very modable boughtable interoperable game from day one. Just as an example of things that might happen with this in a traditional game. If you as a game developer wanted to introduce a trade feature where players can sort of exchange resources, then what you might have to do is like on your canonical client, you would write a trade button and then you'd write the trade server route and propagate that all the way to the data layer here. All we have to do as developers is we define essentially the physics of the game universe and implement that as smart contracts.
00:18:28.266 - 00:19:38.150, Speaker B: Someone else can come in and they can say something like, well, I'm going to spin up an escrow smart contract that says anybody who deposits three ether into this contract, I'm automatically going to send them some amount of silver from my planet to theirs. And in this way you can get these sort of like coordination constructs that are happening at the contract level without any input from some centralized authority that's determining what the gameplay experience ought to be on the client level. What we're trying to look into now as well is with V 0.4 we're introducing an interactive terminal as a first class feature in the game where basically anybody can write and share scripts that perform different automations. For example, sending forces programmatically between planets or anything like that. And what we're really looking to do, and what we're really excited about is the prospect of a game that is really built and designed by the community and just leans into the creativity of the player base in order to really achieve its potential cool. So the final challenge that we're just going to briefly touch on is the challenge of scalability.
00:19:38.150 - 00:20:20.146, Speaker B: As mentioned, our last play test, which was a private beta with about 300 players, exceeded the total transaction volume of main net, especially with current gas prices. This means that the game is currently unfeasible to be played on E one, L One. So what we're looking into here is we're looking at all sorts of different strategies for potential layer two solutions. I know that optimism. They just announced their testnet and there's a lot of great progress going on with ZK Roll up as well, which we're super excited for. So roll up solutions in the long term. And as of the current iteration of the V 0.4,
00:20:20.146 - 00:20:56.910, Speaker B: we're actually going to be running this one on the L2 XDI Stake Network, which has a token bridge to Ethereum, is essentially just another EVM swap out the RPC endpoint. And what this allows us to do is we can introduce the notion of economic value into assets in the game while keeping low gas costs, security guarantees and centralization obviously aren't going to be as great. But as a staging environment, this is a good way for us to be testing out what potentially the future might look like once there are these sort of off chain L2 solutions for cheaper computation and storage.
00:20:59.250 - 00:20:59.662, Speaker C: Cool.
00:20:59.716 - 00:21:35.258, Speaker B: So I guess the last thing that we'll mention is that Dark Forest V 0.4 starts today. We're sending out the first batch of invite keys tonight and there's a number of interesting things for those of you who have seen V 0.3 that we're introducing here. One thing is burner wallets. So players in the previous game who would make thousands of moves over the course of a week would have to click that pesky little MetaMask confirm button, like literally thousands of times. With Burner Wallets and sort of an in page provider, we're able to hopefully clean that up for a lot of people.
00:21:35.258 - 00:22:31.342, Speaker B: We're on the XDI stake network now, so that allows us to test kind of small amounts of economic value while keeping gas costs low. So shout out to Igor and his team for helping us on with that. We've introduced kind of an interactive terminal so you can write little custom scripts and share automations and things like that. And a big thing for us has been getting the perlin noise ZK snark working. And that is only possible because of the work of Jordy and his team at Ident Three on tools like Sircom and Snark JS and continuing to make those more efficient. So something as heavy as Perlinoid would certainly not work without the existence of tooling such as that and a number of other kind of fun little mechanical changes and quality of life upgrades. So if you're interested in following Dark Forest, the game, you can subscribe to our mailing list and blog at blog zkga me.
00:22:31.342 - 00:22:44.580, Speaker B: We're also on Twitter at darkforest. Underscore east. We love to ship posts about Snarks and we have a Telegram group for general discussion at Zkforest and I think that's all for us. We'll take questions now.
00:22:48.470 - 00:23:16.598, Speaker A: Great, thanks guys. Yeah, we'll see if there's any questions in the chat while we kind of wait for that to queue up. I've got one for you guys. I would love to know if there's any either gaming or zero knowledge related ideas that you have that you think will be good for hackers to work on at ETH Online this month. Maybe you've got a side project idea you haven't had time for yet that you'd love to see someone ship in three weeks, if you've got any I'd.
00:23:16.614 - 00:23:17.660, Speaker C: Love to hear about.
00:23:18.910 - 00:24:10.826, Speaker B: Yes. So I think that there's definitely a lot of and we sort of juggle this around in some late evening conversations oftentimes as well. But the potential for ZK in gaming we think is really huge. And a few things that we've sort of bounced around are things like if someone put together like ZK Battleship or something. This is hopefully fairly straightforward kind of thing to build, but it would be really great to just showcase the process of building that end to end, putting together a tutorial or something. There's constructions for a ZK really slow motion agar IO that could be done. And within Dark Forest itself, things like scripts or Reskins or Interop Contracts, smart Contracts can own planets now in Dark Forest V 0.4
00:24:10.826 - 00:24:34.580, Speaker B: and building almost a nested game inside of the game, which allows players to sort of dictate how a planet resource is allocated or something like that, could be very cool. And we're always really happy to chat about that with anybody who might be interested. I know some folks the last game spun up things like custom miners or other hacked clients. Our stuff's all open source, so if folks are interested, we're happy to share. Cool.
00:24:36.230 - 00:24:44.742, Speaker A: How fast are the keys going out for version .4. And this is a question from the chat. Are they going out quickly or you're trickling them out? How does that work?
00:24:44.876 - 00:25:09.200, Speaker B: Yeah, we're going to be trickling them out over the next couple of days. Usually in the first few days, we start with a little bit of a slower onboarding just to make sure that we can fix any critical issues that come up. But we're hoping to get keys out to a substantial subset of the waitlist for this game in the next half week to one week.
00:25:10.530 - 00:25:26.470, Speaker A: Got it. Question from our team. What was the inspiration for combining these elements into this game? I mean, obviously it's named after the Dark Forest trilogy, but was that the inspiration or was there something else and you kind of figured out the name afterwards?
00:25:28.250 - 00:26:15.234, Speaker B: Yeah, I guess so. The original idea for Dark Forest came from like, I think it was back in summer of 2019. And I think that a lot of these ZK tools had, for the first time, just become viable. So in particular, Jordy had just published a few months ago what was called Websnark at the time, which made it feasible to generate ZK proofs in browser. Around the same time, we happened to read the three body trilogy, and a couple of days later there's this idea of like, oh, wait a second, we could make a cryptographic. Dark Forest dark Forest is the second book in the trilogy. And for those of you who are familiar, there's sort of this thought experiment around civilizations like discovering each other in the universe and sort of the interesting dynamics of information asymmetry there.
00:26:15.234 - 00:26:24.198, Speaker B: And it was just kind of like, oh, yeah, you could do this with zero knowledge proofs. So that was a really fortunate coincidence that we happened to stumble on both of those around the same time.
00:26:24.364 - 00:27:06.702, Speaker C: And some of the stuff in terms of game mechanics and cosmetics are like, these aren't necessarily the only ways to do this, but given from where the ideas came from and given the constraints, they're either one of the only or one of the easiest or one of the most obvious ways to do these things. So in particular, procedurally generated planets. Well, it's like, well, we have the notion of information asymmetry being important. And this is where we have this metaphor of space combat because you don't want to reveal your location to other civilizations. And then we have the notion of like, well, we have to use some sort of random generation. And this kind of just led to planets being the kind of main cosmetic thing. So a lot of it just came from the set of constraints.
00:27:06.702 - 00:27:25.690, Speaker C: And even for game mechanics, we're constrained to the set of game mechanics that are still good and non degenerate in a world where there's going to be lots of bots. So a lot of the things just kind of fell into place of the art now, and we're still experimenting, but given the set of constraints, there's only so many ways to build the first version of Dark Forest.
00:27:27.150 - 00:27:28.090, Speaker A: Got it.
00:27:28.240 - 00:27:28.602, Speaker B: Okay.
00:27:28.656 - 00:27:40.110, Speaker A: Another question from the chat. Do the game mechanics in their current form favor those willing to spend tons of money? I assume that it does. And is that intentional?
00:27:41.890 - 00:28:43.898, Speaker C: So they favor those willing to spend a lot of money? Only a little bit, in the sense that it's always strictly better to make more moves rather than make less moves. But this also depends on what our scoring function is because in the current version of the game, in the last play test, we distributed prizes based on just, like, the top players. And therefore, you had some consideration for like, well, if I want to maximize the chance to get the largest prize, then I want to be spending the most money. But in the future, these incentives aren't super clear because ideally, we want to build a version of this game where the planets themselves and the in game assets actually have economic value. So in this case, the game you're playing internally is like, wait, is the amount of money I'm spending actually going to increase the economic value of my empire? And in this case, it's actually not so clear anymore whether or not it's beneficial to be spending all these moves. In particular. This is a constraint that we're aware of and there's always going to be whales who spend a lot of money and there's always going to be people who write bots.
00:28:43.898 - 00:29:22.240, Speaker C: So this is why we kind of take this physics based approach and why from the very beginning of the design we're trying our best to make our system robust to this. So for instance, we have a sort of exponential scaling in planet Rarities and also in planet strength. And this means that once you have a level four planet you basically shouldn't care at all about level two or level one planets anymore because they're just so much weaker that it just doesn't add anything to your empire. So this is a consideration and hopefully this is not going to be a problem. It might be a problem right now but we're hoping, I mean part of this is play testing as well but we're hoping that we'll be able to build something which is robust to this in the future.
00:29:24.210 - 00:29:50.060, Speaker A: And if you guys have time we actually got a couple more questions too so I'm just going to keep going. So another question besides games, what are other use cases for zero knowledge tech that you're most excited about? So for example, like ENY has this system that uses zero knowledge tech for an enterprise context. Are there other applications there that you think are particularly interesting or.
00:29:52.110 - 00:30:30.406, Speaker B: I mean, I think one of the things that we feel most clearly as a pain point is all the scalability stuff. So once ZK roll ups become more accessible and production ready we want to be hopping on that train as soon as that stuff is feasible. So ZK tech for scalability is huge. I think privacy obviously is a massive one as well. I guess it's a little bit of a basic answer since scalability and privacy are sort of the go to. But yeah, scalability, privacy and gaming are where we sort of think about for the immediate uses of ZK there's one.
00:30:30.428 - 00:31:22.146, Speaker C: Answer which is not so much directly answering this question but might be interesting just in the vein of other things that's cool about this. And I guess this is also not even like a native blockchain thing either but native to ZK, a blockchain in general. But one thing that's interesting is because we have access to interop. One thing you could do and Brian mentioned this is you could have infinite worlds within each planet. So the thing we think about here is well, you can provide an interface and this is some sort of metaverse where you can have each planet is proxied by some sort of other contract. And the reason why this is interesting outside of the scope of just gaming is because this would be kind of a prototype for what? A real world in the sense that people care about things that are meaningful and are connected by space. The really bad example is you could have, like, a virtual meeting space on some planet.
00:31:22.146 - 00:31:40.830, Speaker C: And because information is a first class resource, and because locality is enforced by the contract and it takes time to move to places, well, then this is like a meaningful proto version of a metaverse. And maybe Dark Forest is not the one who actually builds this, but maybe it's the one that proves out this concept.
00:31:42.930 - 00:31:43.680, Speaker B: Cool.
00:31:44.130 - 00:31:57.860, Speaker A: Okay, and one more question. So we had someone ask, how did you guys first get interested in Ethereum? What was the path? I mean, if it's a long story, we can get the short version, but what was the path that led you to working on this?
00:31:58.710 - 00:32:26.300, Speaker B: For sure. Yeah. So this is actually really interesting to me because I have done some work with the EF on thinking about how to get more, like, university students interested in Ethereum. But for me personally, a mentor of mine was he joined the Ethereum Foundation in 2017. 2018. We interacted through some other tech and math related things and he was sort of like, you got to check this Ethereum thing out. It's awesome.
00:32:26.300 - 00:32:50.866, Speaker B: People are doing some amazing stuff. So I started going to a few conferences and workshops, and eventually it got to the point where I was like, oh, wait, there's a meaningful thing that I'd actually be really interested in building. But it was really like my entry point was one specific person who basically was like a real evangelist for crypto. And then I guess, yeah, I have.
00:32:50.888 - 00:33:41.874, Speaker C: A similar story here, except it's like one order of separation in which for me, the evangelist was Brian, where it was like I met him at some event for college students, and I was just working on some random apps and Brian gave this kind of small presentation on Ethereum. And I was like, Whoa, this is really cool. And also mentioned that he was working on this game called Dark Forest. It just so happens that I really like games. And for me, what's really cool about this is that it's pretty rare that you see nowadays in gaming, people tend to just take the same ideas and just turn out sequels over and over again each year. It's pretty rare that you see a technology which forces first principles and new kinds of thinking. So what I really like about Ethereum here is that because of the constraints, the constraints actually force you to design games in new ways.
00:33:41.874 - 00:34:00.578, Speaker C: In particular, I've always liked the idea of infinite worlds. But there's always been a problem in games like Minecraft and no Man's Sky, where the worlds don't really have any meaning. You have these vast infinite worlds, but in practice, they're all the same. In practice, someone could have given you a bucket of 100 worlds and you wouldn't really care. But on Ethereum, because of all sorts.
00:34:00.594 - 00:34:02.358, Speaker B: Of things credible scarcity.
00:34:02.454 - 00:34:22.958, Speaker C: Yeah, so there's this credible scarcity, there's true ownership, and there's all sorts of other things. There's much more of a realness and meaningfulness to these procedural infinite assets. So for me, this is actually the thing that drew me into Ethereum, was like, I saw CryptoKitties and I was like, whoa, this is really awesome and really cool and it's something I'm into, but it could also be so much more. And that's kind of the angle I come in from this.
00:34:23.044 - 00:35:00.640, Speaker B: Yeah. And then we have two other teammates, actually, who are not here today, but Scott and Robert. They're also college students. We all met at the same event, like a hacker house sort of thing called Hack Lodge. And I believe that Scott was actually into Ethereum before any of us. And the way that he made his way into Crypto was by buying some dogecoin many years ago and then realizing like, oh, wait, what's going on with this? And Robert similar to mean we think a lot about what can we do to bring in more students in university into the Ethereum eco system.
00:35:01.090 - 00:35:20.860, Speaker A: Yeah, that's great, guys. Yeah, I think those are the most two common pads. Like knowing someone great who says, hey, this is cool, or buying Doecoin and realizing that you should know something about it if you're going to own it. Thanks, guys. That was an awesome talk. Really excited to see what comes next for Dark Force. And thank you for being with us.
