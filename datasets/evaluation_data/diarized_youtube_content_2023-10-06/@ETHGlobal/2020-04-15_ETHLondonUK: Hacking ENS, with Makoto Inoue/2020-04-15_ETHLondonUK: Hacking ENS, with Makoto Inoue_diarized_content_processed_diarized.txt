00:00:00.890 - 00:00:42.060, Speaker A: Good morning, guys. Hey. Okay, so, yeah, I'm Makoto and I'm Dev. ENS domain ENS And I'm assuming everybody knows what ENS is for this workshop, I'm also hosting like a London Ethereum code up. Who else? Based in London? Okay, it yeah, if you hack and if you want to show off your thing and the stuff, just you ask me to host events. I do that semi regularly, so come along and show the code. And also I'm also known for these things.
00:00:42.060 - 00:01:08.270, Speaker A: Who registered on kickback. Yeah. So I checked and currently about 74% people are checked in. So, like taurus who are giving T shirts with their own money. I give money to everybody from the people who didn't turn up, but only if you are checked in. Mark that check in. So if you go to the website and if you're not checked in, you lose your stake.
00:01:08.270 - 00:01:24.680, Speaker A: So make sure that you go to the check in counter, get checked. Then if this is it, then we should get extra seven die. Wow. Yeah. Sorry.
00:01:28.170 - 00:01:30.582, Speaker B: Can you retrieve it only for one week.
00:01:30.636 - 00:02:20.214, Speaker A: Now, that's a hard setting, but we'll usually have a longer period, so don't worry about it. But this is not about Kickback session, this is about ENS. So I wanted to tell a bit of story that back in 2000. So ENS has been running since 2017 and in 2018 we had an ENS workshop plus Hackerson, and this is one of the winners. What they did is wrap BTC, that kind of stuff. Then they wrapped ENS to make it as nifty, like NFT non fungible token. And at that time, I think NF, ERC seven two one standard only came like six months beforehand and that was after ENS first launched.
00:02:20.214 - 00:03:03.078, Speaker A: So these were the kind of new things. So we thought, oh, that's really clever idea, and we decided to steal their idea. So that when we did the major upgrade about in May last year, we actually said, actually ENS is now ERC, seven two one. So that you can basically put in open sea and you can trade. So now it's kind of getting one of the highest traded asset on the open sea. And you can also see that we did a short name auction three months ago and people are basically bidding all over the place. And one of the examples is like, Amazon is got bid for like 100 AC and all the stuff.
00:03:03.078 - 00:03:59.190, Speaker A: So I know that this is more for the speculation, but this kind of tokenizing name as an asset suddenly tying to ENS is more variable to everybody. Also it's much easier to trade. And so if you look at the whole ecosystem, the token transfers, you can see probably ENS is third next to crypt kitties and Gods unchained stuff. So the idea is like one small hack happened in the hackathon, actually changed the ENS and it kind of helped for reviving the popularity of ENS as it is now. So we really want to encourage that idea. So last year we sponsored this global hackathon. At that time we are still asking people to do basic thing of integrating ENS into your app.
00:03:59.190 - 00:05:10.394, Speaker A: So we are giving basically prize for anyone who just did the integration but that was actually two lines of code so it was a bit too easy. So this time we want to encourage for you guys to push the boundary of ENS to make ENS more interesting stuff. So we just kind of changed it's still the same amount of money but we just said if you do something interesting we're going to put a bit bigger portion. So our prize is like three prizes, 600, 300 and for something which kind of add a new feature into ENS which we could later bring as a part of ENS feature. But that sounds like it's quite complex but thanks to the kind of very modular structure of ENS, actually extending ENS is a lot easier than you think it is. So that's what I want to go through today. Some of the ideas is that for example so I already mentioned any names longer than three characters are already auctioned so everybody is all sold but we actually have one character and two characters.
00:05:10.394 - 00:06:11.154, Speaker A: So this kind of unicorn is space is not in use. So if you kind of come up with new way of sharing this namespace, maybe your solution could be one of the Unicorn s registration method or ENS is basically a big key value dictionary. So you could create some sort of turn ENS into new way of storing data, build your dictionary or one of the stuff I get often ask is it gets expired in the May 4, 2020 unless you renew and the ENS doesn't offer any sorts of renewal or any ways to make renewal easier. So maybe any ways to make that capability easier. Probably that's kind of ideas. And with that in mind, we will talk about three things. So ENS eleven I casually mentioned about registrar resolver but it might not mean to you guys yet.
00:06:11.154 - 00:06:55.202, Speaker A: So I'll just quickly go through what the whole architecture is. Then I'm talking about basically building your own resolver, building your own registrar with some examples. Good so far. Okay, so ENS 101, so that's my address but when you say hey, send me this to this then you either have to scan or copy and paste that's too hard. So actually who do have ENS name? Okay, two, three, four people. So like ENS looks like something like this. So if you go to MetaMask or even ESA scan, if you search Matokun is it actually turns into this address.
00:06:55.202 - 00:07:55.810, Speaker A: So if you find this talk useful and you want to tip something to me, this is my name. This is my name, and I put in a business card and I also even put the back of my T shirts. And so, like, you never kind of one of the memes started happening after the short name auction that like, this is everyone character, but people start putting their own favorite east. Eric is, like I said, four character, actually. It's quite expensive, $100 a year or something, but he got it through auction, so he put it and so now there's over like 400,000 names actually registered, including subdomains and yeah, there's lots of wallets and adapts. Torus right. And the coinbase, I think, recently announced somewhere.
00:07:55.810 - 00:08:57.480, Speaker A: Yeah, maybe I forgot to put anyway, and there's over 100 DApps integrated, and most of them, how they integrate is like basically you go to our Docs ENS Domains, which has quite extensive way of information about how to do everything. So if you listen to my talk and if there are something not clear, if you go to this page, most likely there's an answer here. And the easiest way to integrate is like, I don't know, you guys use web3 JS or ESA's JS or favorite libraries usually kind of integrate with CNS. So in this case, it's like web3 JS and actually, web3 East ENS already has it. And if he wants to, for example, what's the same address of Alice is or Matokun is, all he does is ENSK address. So last year this was a way to get 200 die and we just realized that's too easy. So that's why we are going to the kind of ENS 102.
00:08:57.480 - 00:09:57.398, Speaker A: So it's slightly advanced and another way is this is called for lookup. Another way you can actually do is for example, this is our ENS manager which allows you to basically manage your ENS names when you log in it automatically knows who I am. This is way it's called reverse lookup and this is how it's achieved is again web3 JS doesn't support that. So Esell JS supports the provider lookup address and if you pass the address it returns name. Again, it's very easy and there's a Python version, Java version, all that stuff. So that was my entire talk last year but this year we go one step above. So now I'm going to talk about building your own resolver.
00:09:57.398 - 00:11:16.920, Speaker A: But before talking about resolver I was just going to talk about the entire architecture of ENS which is like this. So we have something called Registry where it has basically the keys of all the names and when you look up and I'll just go through this one fast if you go to ENS like hey fast like say what is Matoku is? It returns not the address of Foo but it returns the address of so called resolver and Resolver is another smart contract which defines how to resolve this name and you ask to the resolver what the address of food is and returns the address. I think that makes sense. So this is actually the gist of the ENS registry and it's actually about SATY lines code but we found a bug three months ago so we had to register. This is a part like it's kind of ENS registry. Address is hard coded on everybody's project. So we had to migrate over, like, 200 different project or replacing the hard coded smart contract things.
00:11:16.920 - 00:11:57.118, Speaker A: But usually this one should stay unless there's another bug. But what it does is when you ask for the resolver, your name. But it's in a by 32 type, not the string. The reason is if it's string, there will be limited amount but if it's like hash version you can basically put as long as whatever the long name you can put time to fix. So hence we pass by 32. Then it returns this resolver address. And what it does is, once it returned, you also have a resolver contract where it defines whatever the rule.
00:11:57.118 - 00:13:02.610, Speaker A: Most of the time it's just a key value store that you set the certain address for certain name. But this is like a very lame things like whatever I ask name I just return one specific address which is my address matokun s goes to me, roscoe s goes to me. If you want to write that kind of resolver you can do that if you want to. In this example I mentioned return ECM address. But now ENS is going just beyond just resolving ECM addresses. So you can start resolve other stuff such as content, hash, public key, abi, text record, multicoin which I can explain multicoins like you can actually put like bitcoin address, litecoin, mona, binance, whatever shit coin addresses, you can add it. And also this is example key value, sorry text record you can actually set your own keys and the values.
00:13:02.610 - 00:14:04.554, Speaker A: And this is interesting one do art is one of the internet domain. They actually integrated with CNS. If you buy Doe art domain you can basically put the record of your art history but on the back they actually store in the key text field of the ENS. So you can actually show the art attributes in our ENS manager like this one but on the back it's just like a key value. So if you want to kind of experiment building your own dictionary first go to places using key value sorry text field. So that's one way. Another way which happened in East New York is that do you guys know Onion? Like Thor, like anonymous browsing something I don't really use, but for them they also said they have gibberish addresses like this kind of stuff.
00:14:04.554 - 00:15:06.030, Speaker A: So in their case they kind of extended not only ENS to add new record, but they also extended MetaMask so that they can use if you type these things you can browse in on your own, something like that. So that became part of the feature that's another example Hackerson project turned into actual feature another way this one is not really productionized yet so for example when you try to log into Kickback Kickback, ask ten different wallet to sign in. And if you already know what your go to wallet is, it's quite annoying. So what they presented is use ENS. If you type ENS name, it kind of knows which wallet you use. And how they did is they kind of extended resolver to put the web3 provider information into the ENS so that people don't have to choose anytime. This is a way of extending resolver.
00:15:06.030 - 00:15:12.958, Speaker A: That's the example of extending resolver. Any questions so far? Yes.
00:15:13.044 - 00:15:21.810, Speaker B: What's the hashing function for the actual addr function that's used? What do you do to a domain name to get the basic hash.
00:15:23.990 - 00:15:54.110, Speaker A: For the label? It's just a shell three or something, I think. Okay, I have a code later on. Yeah. So there's a label hash and name hash. Label hash is just like a shell of the for example, if it's matokun, label is matokan, right? If you hash it, this is label hash. But there's also another one called name hash. Name hash is I think you shar each component, then you shar the combined stuff and the stuff.
00:15:54.110 - 00:16:49.086, Speaker A: Yeah. Combine the hashes. Label hash is just so if you have like a MetaMask matokun is the whole thing is name. If you hash the whole thing, it's name hash. So when you do, for example, ENS lookup address, you pass whole thing, right? Because yeah, label hash is when you I can mention that, but that's when label is mostly needed when you register a new name him, which I can go through now. So that's a good transition. Any other question about resolver in general? Good.
00:16:49.086 - 00:17:47.086, Speaker A: So resolver now I'm talking about build your own registrar. So one of the interesting thing is who knows? So probably if you have Argent wallet, they actually give you subdomain like Johnargen XYZ when you create the wallet. Same for the this is a new one called Ethereum. Has anyone used ethereum? Yeah, it's kind of similar. They're both based so called contract based wallet. And they also, again, issue a new name like Chris ethereum is registrar. And also there's another example that anyone know Decentraland? Yeah, they just opened up the market that you can create your own 3D virtual space you can navigate.
00:17:47.086 - 00:18:16.234, Speaker A: And what they announced is that Decentral has a new naming system that converts all names to the ERC, seven to one token as well as ENS. So they not only issue subdomain. So I actually played with avatar. So this is me. I spent like about 30 minutes just trying to figure out best part to be, does that look like me? Ish? Yeah. Thank you. So if you do that, it's quite fun.
00:18:16.234 - 00:18:53.160, Speaker A: Like you pick your own eyebrow and all that stuff and eyebrow, yeah. Anyway, so if you create Makoto, then they actually create Makoto DCL East and you can just check it. So like, E also creates a subdomain and e also turning into ERC seven, two, one. So the registrar is the ones to create your new subdomains. And I was quite intrigued how they did that. So in this example, I'll just look into how they did it and it's quite simple. Registrar is the one which assign subdomain or set the name.
00:18:53.160 - 00:19:41.330, Speaker A: When you purchase ENS name which ends with ETH, you are using, I think, fastin. Fast subbed. No, it's using S registrar, actually. But there's other type that for example, I think, Robstam, there's something called test domain just for the testing purpose. That one is just fast and fast served. So that has a lot simpler rule, like whoever if it's not taken, you just take it that's fasting, fast up. And also like Argent, XYZ or Art, you have to send a proof that you actually own that internet domain.
00:19:41.330 - 00:20:09.642, Speaker A: So we have special registrar called DNS registrar. And also people start doing something like start setting subdomain. So popular one nowadays is called isMONEY east, which is started by the Eshub guys. Like you can buy basically Makoto isMONEY Es and they sell the subdomain. And we already have the smart contract folder called subdomain. Registrar. Again, just another smart contract.
00:20:09.642 - 00:21:03.962, Speaker A: But all they do and how you set it is like this is basically the decentraland domain name. There's a notion called Registrar and Controller. And Registrar is the owner of this domain. But Controller is the one who be able to basically set the resolver, set address, do the actual operation. So the common practice is that you might want to keep this into your address, but you set this into a smart contract so that rather than you creating subdomain all by yourself, you can create smart contract to automate. So this controller is an important one. If you actually look into this smart contract address, you can actually look into their smart contract.
00:21:03.962 - 00:21:04.638, Speaker A: Yes.
00:21:04.804 - 00:21:07.460, Speaker B: Can the controller control transfer?
00:21:09.750 - 00:21:36.926, Speaker A: Yes. So controller can registrar can set controller. Controller can set them himself. So there's a button called transfer. So if this is set to you, you can also transfer to someone else. But this guy always can override. Registrant is stronger than once you initially budget.
00:21:36.926 - 00:21:37.498, Speaker A: Yes.
00:21:37.584 - 00:21:39.718, Speaker B: And then you can pass it to a controller.
00:21:39.814 - 00:21:40.134, Speaker A: Yes.
00:21:40.192 - 00:21:41.870, Speaker B: But they can still overwrite.
00:21:42.290 - 00:21:43.040, Speaker A: Correct.
00:21:44.290 - 00:22:00.900, Speaker B: If the controller sells the domain, the controller can list the domain on openc and sell it. Right. Can the controller call save transfer problem?
00:22:01.670 - 00:22:06.566, Speaker A: Controller only can transfer controller's ownership. You can't sell yeah.
00:22:06.588 - 00:22:11.906, Speaker B: Not just setting the resolver. I think controller is the ERC seven to one function concept.
00:22:11.938 - 00:22:39.038, Speaker A: Right. I think Registrar is I can show you the code now. So this one is the what was it looking? Two eight one a Actually, in this case, they set in the same smart contract to both Registrar and Controller, actually. Yeah. Maybe you set registrant. I can't remember. I have to look into the code.
00:22:39.124 - 00:22:39.760, Speaker B: Sorry.
00:22:41.730 - 00:22:57.222, Speaker A: This registrar okay. So I think I made the wrong statement. If you want to create sub new registrar, you have to say here, I think, confused. You do try an error and figure.
00:22:57.276 - 00:23:06.930, Speaker B: Out seven two one has a concept of an owner and a controller. And I think I might be getting confused. Seven two one concept of controller.
00:23:07.090 - 00:23:09.958, Speaker A: Seven two one has no sham controller.
00:23:10.054 - 00:23:10.700, Speaker B: Yes.
00:23:12.110 - 00:23:12.860, Speaker A: Really?
00:23:16.910 - 00:23:25.630, Speaker B: So you have set approved. Set approved and set proof for all. So if you set approved and you give an address that is then the controller.
00:23:26.130 - 00:24:17.200, Speaker A: Okay. But the concept controller is different to what I describe as controller between controller and this controller. Yeah. We have another things called controller inside ENS, which confuses the hell out of me all the time. But if you look at this DCL registrar, which you can verify from this ESA scan how many so five minutes left, you can see that it inherits E house and you have to somehow pass registry so that it's aware of the ENS. And the gist is when you register a new name, such a makoto DCL, what it's doing is calling set subnode owner, which you find in a registry contract. Right.
00:24:17.200 - 00:24:52.194, Speaker A: So it just does set registry, set subnode owner and you put a domain name hash and the subdomain label hash. This is where you put the label hash. And then after that, because in their case, they not only create a new name, but they also create tani as an ERC seven two one. So you just calls mint of the ERC seven two one contract. That's pretty much all they do then if you look into it. Yeah. So this is one way of turning the hash of the label.
00:24:52.194 - 00:25:36.710, Speaker A: It's just a sha three makoto one gist, which I took a while to figure out is like if you go to open ESA scan, if you just pass this one, you can return the character address, like owner of, but openc only recognize the integer version. So you have to convert that into Integer to be able to find the right one. So this is actually the nifty token of Makoto DCL is sorry, integer version big of the shaft of that string.
00:25:37.470 - 00:25:39.926, Speaker B: That's an interesting choice. Probably of leading zeros.
00:25:39.958 - 00:25:40.538, Speaker A: Right.
00:25:40.704 - 00:25:56.560, Speaker B: Probably of leading zeros big and two strings leading zeros where's the leading zero a zero padded. Hex would be really that's fun. That's really good.
00:25:58.050 - 00:26:36.810, Speaker A: Okay. I think idea the OpenSea I was talking to OpenSea guys that you guys should actually show my avatar profile rather than just like this number because it doesn't look good, but probably because they just announced like it last week. So it will get better. Yeah, but one thing people, I was looking into many people's integration and quite often they set the controller, the owner to you, but they don't set resolver and address. So when it's being assigned.
00:26:39.950 - 00:26:40.634, Speaker B: You own.
00:26:40.672 - 00:27:13.462, Speaker A: It, but your ECM address is not set. So if you really want to do extra mile you actually want to set the resolver and the address. So that here Makoto DCL doesn't have resolver. So you had to enforce users to go to our manager and set resolver and set record. But if you do that on their behalf, it just does all the way. So that's probably UX wise a lot better. So that's a little bit of tip two minutes ago.
00:27:13.462 - 00:27:49.714, Speaker A: So that's pretty much it. And most of the smart contract is in GitHub that we have lots of small ones. So we do have ENS is where it contains a registry information. If you go to registrar, you go to this registrar. Most of registrar have its own repo. So if you go to subdomain registrar it has subdomain registrar information and the resolver is all in one repo. So if you look into these you can basically see the inside.
00:27:49.714 - 00:28:10.360, Speaker A: And again, Docs is a good place to look into. And also if you want to play with how other people are doing, you go to RPNs domain and look at their control rollout to see you can check the source code and stuff. That's it. Any questions? Yes.
00:28:12.350 - 00:28:21.180, Speaker B: Is there any API out there that will give you a list of either a list of domains that own by a particular address?
00:28:22.450 - 00:28:23.998, Speaker A: Good question. Good question.
00:28:24.084 - 00:28:26.640, Speaker B: A way of going from a hash back to.
00:28:28.690 - 00:28:46.040, Speaker A: Possibly you are asking this information is if we guy go to Makoto East, this is my address and if you go here it shows you all the address owned by me.
00:28:46.490 - 00:28:47.430, Speaker B: How do you do that?
00:28:47.500 - 00:28:53.990, Speaker A: I just clicked the ethereum address. This list, the graph.
00:28:54.330 - 00:29:03.750, Speaker B: Yeah. So this app is saying, okay, let's address what names does it own. But it can only get the hashes of those names from the smart contract.
00:29:04.250 - 00:30:10.404, Speaker A: Good question. I love it. So what we do do on the back is we go to the graph information. So like if you go to the graph ENS, who knows the subgroup? Graph API. Yeah. So you can actually go here, I think where I think yeah, I think yeah. So if you do the query says domains where name is makoto is the graph actually have a dictionary which do the dictionary check with all the hash so they decode it for you.
00:30:10.404 - 00:30:25.610, Speaker A: So like if you do Makoto where name equal Makoto is, it actually shows the label hash, label name and name. And this is a name hash. So you can see all of them there. This is like got send. Yes.
00:30:26.700 - 00:30:28.280, Speaker B: How do they add new entries?
00:30:29.260 - 00:30:44.864, Speaker A: So you go to the graph.com Doc, that's their product. But they basically have the structure that for each event ECM emits you create writes a handler to index. So they do the indexing for you.
00:30:44.982 - 00:30:47.570, Speaker B: Does the event actually contain the name and text?
00:30:48.900 - 00:31:10.916, Speaker A: They only have hash but for ENS they have a special function which calls our dictionary and they do the check that's a special bit they added for us. They have it? Yeah. About like Miriam record.
00:31:11.018 - 00:31:14.180, Speaker B: How did they get dictionary?
00:31:15.480 - 00:31:22.500, Speaker A: Nick comprised and Nick gave it to graph guys. It's in somewhere.
00:31:24.700 - 00:31:25.256, Speaker B: Available.
00:31:25.358 - 00:31:32.990, Speaker A: Otherwise I know where that is. Talk to me afterwards. But I think most of our use case, you can just use this.
00:31:34.880 - 00:31:36.488, Speaker B: Updated automatically.
00:31:36.664 - 00:31:52.210, Speaker A: This gets updated for well, the dictionary data is not it's just a generic information, static data. But this one gets done every time event is emitted. So very up to date.
00:31:53.140 - 00:31:55.040, Speaker B: Dictionary isn't updated.
00:31:55.620 - 00:31:57.490, Speaker A: Is it? Just a static information.
00:31:58.260 - 00:32:05.936, Speaker B: But if I register a new domain today yeah? How long does it take for that name in text form to end up in this database?
00:32:06.048 - 00:32:07.008, Speaker A: Instantaneous.
00:32:07.104 - 00:32:08.390, Speaker B: Okay, cool.
00:32:11.260 - 00:32:12.010, Speaker A: Good.
00:32:12.780 - 00:32:20.680, Speaker B: Thank you. The difference between registrant and the controller is only that the registrant can change.
00:32:20.830 - 00:32:30.510, Speaker A: I think registrar is the owner of the registrar, whereas controller is the owner of registry. That's a difference.
00:32:31.440 - 00:32:47.760, Speaker B: Registrar not registrant. If you look up on Google, you get registrar and registrant. So, like, if you register a domain name, the registrar will be GoDaddy and the registrant will be Makoto.
00:32:48.260 - 00:33:08.568, Speaker A: The owner of registrar is registrant. Owner of registry is controller. Yeah. And the registrant actually only exists in east level. If you go to subdomain, you actually don't have registrar in the ENS manager. It's just controller. Good.
00:33:08.654 - 00:33:09.112, Speaker B: Thank you.
00:33:09.166 - 00:33:09.510, Speaker A: Thank you.
