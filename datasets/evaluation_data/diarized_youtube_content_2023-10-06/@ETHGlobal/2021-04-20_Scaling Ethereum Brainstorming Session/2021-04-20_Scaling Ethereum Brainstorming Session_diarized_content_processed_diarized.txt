00:00:07.170 - 00:00:07.814, Speaker A: Guys.
00:00:08.012 - 00:00:09.062, Speaker B: Hey, how's it going?
00:00:09.116 - 00:00:27.320, Speaker A: Hey, Harry. Okay. I think I'm waiting for someone on our team. I want to help out from the brainstorming side, but waiting for the person that's kind of more orchestrating right now.
00:00:27.770 - 00:00:28.840, Speaker B: Sounds good.
00:00:29.330 - 00:00:30.958, Speaker A: Where are you at? Is it new York?
00:00:31.044 - 00:00:36.670, Speaker B: I can't remember Michigan now. I was in New York but living in a studio.
00:00:38.050 - 00:00:38.800, Speaker A: Yeah.
00:00:40.450 - 00:00:43.506, Speaker B: And we've been remote since, well, I.
00:00:43.528 - 00:00:46.580, Speaker A: Guess over a year. Wow.
00:00:48.790 - 00:00:54.820, Speaker C: Yeah. It's a weird time vortex. A year will go by and it doesn't feel like it.
00:00:58.570 - 00:01:01.160, Speaker B: Feels both way more and way less.
00:01:04.330 - 00:01:05.080, Speaker C: Yeah.
00:01:08.090 - 00:01:12.300, Speaker B: But pumped for hackathon though.
00:01:13.390 - 00:01:24.560, Speaker A: Yeah, I think it's going to be interesting. It's interesting to see how people grok this stuff. It's quite esoteric for a lot of folks. Right. For us, we've been doing it for years.
00:01:26.530 - 00:01:27.520, Speaker B: No, absolutely.
00:01:28.930 - 00:01:39.060, Speaker C: I've seen a lot of the interest in the Find A Team channel. People are looking for DeFi. That just seemed to be a strong signal. A lot of people saying, DeFi this, DeFi that.
00:01:44.630 - 00:01:45.154, Speaker B: Come on.
00:01:45.192 - 00:01:47.030, Speaker C: Yeah, I had a look at my NFTs.
00:01:48.090 - 00:01:49.560, Speaker B: DeFi is all news.
00:01:50.890 - 00:02:10.874, Speaker C: Yeah. So I wonder how many, like I just looked at earlier, sort of the five categories you guys had put the contract optimizations protocol changes, relayers. Yeah. I wonder how many are going to hit those other ones or if it will all sit as apps on layer two. But either way, it's good people building on it, getting familiar with it.
00:02:10.992 - 00:02:24.190, Speaker A: I think it can depend on how persuasive sponsors and mentors are. There's. A lot of people are just like, I don't know anything, I just want to build something. Tell me how to build or where to go to build something.
00:02:24.260 - 00:02:24.638, Speaker C: Yeah.
00:02:24.724 - 00:02:26.290, Speaker A: That's a lot of persuasion.
00:02:27.030 - 00:02:45.800, Speaker C: Yeah. I'm trying to not be biased. I'm using optimism for what I'm doing, which is also using BLS signatures, so I can easily talk to that. But I'm also aware of the other areas, so I want to try suss out where they are, what their skills are, and if I can help them go somewhere else.
00:02:48.090 - 00:02:53.030, Speaker B: The notion documents seem pretty nice set of ideas.
00:02:53.710 - 00:03:04.542, Speaker A: Yeah. If you have more to add, I just brainstormed a bunch, like a month or two ago and added a couple recently. But if you guys have any specific ones or want to add to it, please feel free.
00:03:04.676 - 00:03:11.150, Speaker B: Yeah. I'm not going to remember who on the East Coast I we talked to, but there are a few more that were added.
00:03:16.070 - 00:03:31.890, Speaker A: You guys with the BLS stuff, what's the strategy for users signing locally with BLS interest without compromising the existing APIs?
00:03:32.050 - 00:04:10.100, Speaker B: Yeah, we have the back end support for BLS in, but there isn't really like wallet support yet. I think there are some people who are going to be building new wallets, basically that support it for kind of application specific things, but obviously those aren't going to get mass adoption. So I think it's kind of probably not going to get a ton of use at first, but also the savings from it are nice but it's not like they're worth the hassle at this phase in terms of compared to just using.
00:04:12.310 - 00:04:16.246, Speaker C: Harry. I should just ask, I guess. I don't know where you're from.
00:04:16.268 - 00:04:16.502, Speaker A: Sorry.
00:04:16.556 - 00:04:20.006, Speaker B: Oh, sorry. Yeah, I got to do the same here.
00:04:20.028 - 00:04:20.310, Speaker D: Yeah.
00:04:20.380 - 00:04:21.750, Speaker B: From Arbitrum.
00:04:22.570 - 00:05:00.702, Speaker C: Oh, nice. Awesome. Yeah, I do want to use that too. I'm working on basically making use of the BLS signature aggregation that others have developed and trying to bring that into something that is usable. And I think the Hubble BLS repo is doing a signer but I also am wanting to make that easier to use locally. And I've had a look at Deno, I hadn't actually looked deep into that and that seems to do a lot of the nice things like being able to have a local executable, but exactly to your point, it's a little bit fiddly and the gains are just a little bit better. Like L two is a major kind of like low hanging fruit gain and then you've got BLS which is just a bit more on top of that for extra effort.
00:05:00.702 - 00:05:02.514, Speaker C: And I totally agree with what you said.
00:05:02.552 - 00:05:17.446, Speaker B: Yeah, that's super cool. Yeah, I mean pitch for arbitrary. Our current testnet, we don't have any wallets that are capable of doing this but we support the same BLS like hash to curve. We support the same thing that Hubble is doing, basically.
00:05:17.628 - 00:05:18.360, Speaker C: Nice.
00:05:19.550 - 00:05:20.890, Speaker B: From Barry's.
00:05:24.510 - 00:05:27.340, Speaker C: Yeah, I definitely want to be agnostic and just let it.
00:05:29.250 - 00:05:44.370, Speaker B: No, I just mean like if you have that it would be awesome to use the signatures produced from that. No, it's like client side but essentially just in terms of if you're looking for places to send those signatures.
00:05:45.270 - 00:05:50.834, Speaker C: Awesome. Sounds good. Yeah. So I'm also doing the aggregator to then be able to send it to.
00:05:50.872 - 00:06:01.960, Speaker B: Different yeah, that's awesome. That's super cool. Yeah. Because the tooling obviously yeah, I don't need to tell you the tooling right now.
00:06:05.930 - 00:06:13.338, Speaker C: And we'll see what teams form, see if we can direct them to build more on these things.
00:06:13.504 - 00:06:55.750, Speaker B: I would love that. Yeah. Because it'll be interesting to see. It seems like I think with probably with Arbitrumand with optimism, the initial gains off the bat with ECDSA are pretty damn good. But it's not like it needs BLS to be good, but it makes it a hell of a lot more awesome. So it's the sort of thing especially once there are optimistic rollouts out there, I think the demand will BLS is the most immediate way to get another level of performance bump.
00:06:56.410 - 00:06:58.554, Speaker C: Yeah, cool.
00:06:58.752 - 00:07:06.006, Speaker B: The interest in that is going to blow up, I would guess. When you start saying how would you like to be way cheaper?
00:07:06.038 - 00:07:24.580, Speaker A: Even question. There's a couple of people in the waiting room, usually with this sort of a thing, they kind of trickle in, come and go. We'll see how it goes. Where did you guys want to start? Do you want to open up the ideas list? Do you want to start on a specific topic? How would you want to start?
00:07:27.190 - 00:07:29.906, Speaker C: Yeah, I guess I'm not sure how it flows, but if you're saying that.
00:07:29.928 - 00:07:37.846, Speaker A: People just come and very free form, very jam session, touch on a topic yeah, I guess.
00:07:38.028 - 00:08:02.720, Speaker C: I normally get a feel if it's then we get to talk to the individuals, I'd get sort of suspect where they're coming from, what they can do, and then if they've already got something in mind and then kind of just riff off that because then we could, I guess, direct them to something that we know from that list. If that's a good enough strategy. That's all I can think of.
00:08:04.370 - 00:08:06.800, Speaker B: That certainly sounds good.
00:08:15.350 - 00:08:15.874, Speaker A: All right.
00:08:15.912 - 00:08:17.060, Speaker B: We have friends.
00:08:18.310 - 00:08:27.300, Speaker A: Yeah, a few folks entering. Hello. Hey, Austin. I'm going to move rooms real quick.
00:08:27.850 - 00:08:47.258, Speaker D: Liam, you've got to be sticking around for that. Are you just introducing me, Liam, or are you sticking around for more? I feel like I was just doing some scalability research and all your state channel stuff is, like, at the top of the top of so many of my searches. I feel like I'm not the guy to be talking here. You're the guy to be talking here.
00:08:47.424 - 00:08:53.760, Speaker A: Yeah, we can all talk. I think this will just be like an idea session. We'll just touch on whatever we find interesting.
00:08:56.850 - 00:09:01.854, Speaker C: Yeah, I guess if there's the new devs who want to get into coding, then we just point them to scaffold.
00:09:01.902 - 00:09:02.500, Speaker A: Right.
00:09:04.950 - 00:09:19.560, Speaker B: My favorite part of the current iteration of scaling stuff is that roll ups are on the rise and plasma is kind of down, but state channels are jumping right up there, too. For interoperability. They managed to really kind of hold their position.
00:09:22.410 - 00:10:08.662, Speaker A: Cool. For folks that are in the room, this will be a pretty interactive session. Am I good? Yes. I would recommend if you want to turn your video on, it makes it a bit more interactive and easier for us to kind of allow people to ask questions and we can a bit more personalized. We'll probably go topic to topic. There's a lot of things, obviously, in layer two, whether we're talking about bridges or we're talking about how any of these things work with optimistic roll ups or ZK roll ups, or if we're talking about more abstract stuff like getting BLS materials into these things. There's quite a lot of topics and I really want to make sure that folks are getting a lot out of it.
00:10:08.662 - 00:10:38.930, Speaker A: So, anyway, that's what mentioned. Please feel free to also ask questions in the chat or if you want to raise your hand, we can hear a question out loud. Also. Yeah, catherine's here. Also, I don't know if you wanted to introduce the session at all. Any context more than what? Okay. Yeah, catherine.
00:10:38.930 - 00:10:44.260, Speaker A: Catherine. Messaged me. She's just going to be hanging around. Okay, cool. Thank you.
00:10:44.950 - 00:10:47.890, Speaker B: I'm happy to join, but I can't be on camera.
00:10:48.470 - 00:10:53.698, Speaker A: Okay, no worries. Okay, I just got my audio back.
00:10:53.784 - 00:10:56.680, Speaker D: Sorry if I lost her audio there. I've got it now.
00:10:57.850 - 00:11:32.500, Speaker A: Nice. Okay, so maybe one thing. Again, this will be very much a jam session. We want to make sure we talk about the things people are most interested in. Maybe we'll start out with just very brief, like 22nd introductions, just of, like, myself, Austin, Harry, James, just so people are aware of who we are and how we can maybe be helpful. And then after that, or even during, I'd recommend if you have a very specific topic in mind that you wanted to touch on or mention it in the chat. That way we have a list of running things to go talk about.
00:11:32.500 - 00:12:05.900, Speaker A: Okay, so I'll introduce myself really quickly, then we'll do James, Harry, Austin. Okay, so my name is Liam. I'm working on optimism. Basically across the board is engineering. I've been doing scaling stuff for many years now, from state channels now to roll ups. Just generally, like, how do we get layer two to work and how do we get the systems actually working in production, not just in people's heads. And, yeah, I'm excited to build stuff and to help others build on layer two.
00:12:05.900 - 00:12:07.290, Speaker A: James.
00:12:08.830 - 00:12:30.930, Speaker C: Hey, I'm a developer. Been working on a smart contract wallet that uses BLS signature aggregation and currently deploying that to a local optimism. So just using rollout solutions for that. So, yeah, I'll be mostly tech focused and hopefully helping a time zone when other Americans are asleep. Yeah. So over to Harry.
00:12:31.990 - 00:13:01.760, Speaker B: Awesome. Hey, I'm Harry. I'm one of the co founders of Offchain Labs building Arbitrum, which is also an optimistic roll up. Been in blockchain space since 2014. Been started bitcoin stuff, been doing Ethereum stuff since 2016. All sorts of different kind of scaling, but kind of been pretty focused on optimistic roll ups, well, since like, 2018, before the term was coined. So been a while and it's awesome.
00:13:04.610 - 00:13:35.346, Speaker D: What's up? I'm Austin. I do lots of tooling in the space. I kind of do weird builds where we try out user experience, stuff like the burner wallet, probably. Other things I've ventured into are like, meta transactions where you have signed messages. And I think that might be something we'll talk about a little bit today, how you can sign off chain messages that can eventually go on chain. I do like some side chain stuff. And that experience over on the side chain is going to be very familiar when we move to some of these L two solutions.
00:13:35.346 - 00:13:37.660, Speaker D: So hopefully I can help out. Thanks.
00:13:42.350 - 00:13:52.010, Speaker A: Cool. Yes. Reminder again, third topics, ideas, questions in the chat. I also linked a document. Document is called Scaling. Ethereum idea. Brainstorming.
00:13:52.010 - 00:14:17.298, Speaker A: There's a bunch of just stuff in there. Breaks down by category at the bottom. There's a list of ideas in a table. If you're curious about any one of those particular ideas, just throw it in the chat, mention it and we can talk more about it. Yeah. So where should we start? Austin, maybe? Do you have a good pulse on what you think the very first topic might be to throw an idea out that we could brainstorm?
00:14:17.474 - 00:14:45.630, Speaker D: Well, I think I love going back to signed messages, how state channels early, especially with you here, I feel like very early state channels and how like a payment channel between Alice and Bob might work. How they can send funds or they can stream funds back and forth and it actually never has to touch the and that's the that's kind of the magic to a state channel. What do you guys think? Sign messages, state channels, gas stuff, side chains?
00:14:46.290 - 00:15:37.422, Speaker A: Yeah, I think maybe one thing that's worth calling out, at least in regards to state channels that people often forget is kind of like how just basically you now need to take into account storing data off chain. Lisa, obviously Rob is a bit different when you put the transaction on chain. But what I mean specifically is thinking about state channels is you're actually now having a wallet that's local to your environment, whether that's in the browser or if you're running a process that is signing things regularly. People often forget about the fact that you're not always just sending RPC calls to some endpoint. You actually sometimes need to be doing things that require storing signatures. But yeah, that can get a bit into the weeds. There are a lot of state channel related projects that exist that are doing stuff like this, including Kinext is doing this.
00:15:37.422 - 00:16:06.774, Speaker A: They have support in lots of different wallets. There's a project called Statechannels.org which provides kind of end to end toolkit for the contracts, the wallet architecture, the kind of easy tools to be able to send messages and signatures across the wire. Another one is Seller Protocol, which is a bit more they have tooling for people to run nodes so the node will store your signature for you. State channels. There's a lot of things to be done there. Yeah.
00:16:06.774 - 00:16:12.460, Speaker A: I'm not sure how many people want to dive into state channels right now, but I'm happy to go more in depth if you'd like.
00:16:13.310 - 00:16:50.370, Speaker D: So I just pasted into chat a line of code and this line of code is how you use MetaMask to sign a transaction. And then I'm going to paste in a second line of code that's going to be on the solidity side. If you have that signed transaction given somebody's signature and the message they signed, if you can put both of those things into the contract, the contract can then recover who signed those. So with a state channel, you're going back and forth signing things. Alice signs a little bit more to Bob, a little bit more, a little bit more. And then their session ends. Bob takes that last signature and puts it on chain.
00:16:50.370 - 00:17:50.394, Speaker D: But he knows at any time he can put it on chain and it can settle on chain. And that's what's I think the tricks here, when we talk about scalability, there's a lot of tricks and the trick is keep it off chain, but know that that can settle on chain at any moment, sort of. Alice is streaming to Bob and Alice has signed a certain amount over to Bob, but she's just signing incrementally 1-2-3-4. And then when they're done with their session, bob can take that single transaction and put it on chain and recover his $4, the highest one. And there's probably some kind of with all of these systems, there's usually some kind of game in terms of challenges and if someone does something wrong and a lot of adversarial thought that has to go into these the optimism challenge stuff is good too, and we could dive into those stuff. But is there challenges in state channels too? And what do those look like, Liam? Do you just prove that they were a bad actor or you prove that there's a further nunce or something like that? I can't remember exactly.
00:17:50.512 - 00:18:43.334, Speaker A: The thing yeah, with state channels, the way that that works is basically like you just mentioned, you're all the time signing new transactions between a small group of people and is a nonce. Effectively, as you're signing more things, the latest nonce is sort of the source of truth. Either somebody could submit the chain, a really old one, in which case you just need to submit any of the new ones to chain and that visually proves that person was intentionally lying, which one that they themselves signed, not you. If they sign an earlier one and you submit a later one that they signed, that's an intentional lying. But the more likely case is that you're doing some application and the person goes offline entirely. They don't sign any future thing, they just stop. In which case you need to submit your latest state and start a timer prompting them to react.
00:18:43.334 - 00:18:45.690, Speaker A: And if they don't react, then it ends the channel.
00:18:45.760 - 00:19:03.520, Speaker D: There's this challenge period, though, that's the thing to think about is you have to knowing that you know that you have to write the thing and you know the thing is going to be good, but you have to wait for that whole challenge period to end because you need that period for the game theory to work out. We should probably open it up for questions too. Good conversation though. I love this stuff.
00:19:04.210 - 00:19:26.166, Speaker A: Understood in state channels also. I'll just link in this for later. I'll link in the zoom. There's a talk I gave a while ago that I think is the one that was the clearest about this stuff. I wouldn't recommend everyone watch it now or anything. It's 40 minutes. But if you did want to dive into state channels the first half of that, it does give a pretty good comprehensive overview of how it works.
00:19:26.348 - 00:20:11.590, Speaker B: I just wanted to throw in there that this is a topic where I love to put on my like I'm not going to say Ethereum maximalist, I'll say smart contract maximalist hat and say payment channels are also a thing on Bitcoin lightning network. Most people have heard of that, but they're incredibly, incredibly, incredibly complicated because Bitcoin doesn't have sort of any of the awesome tools that Ethereum has for statefulness, for defining kind of complex state machines with rules. And so kind of a simple kind of payment channel on Ethereum is like a handful of lines of code versus kind of the same payment channel on Bitcoin is an incredibly complicated application. So that's just kind of like it's a really nice way to kind of highlight what Ethereum has when it comes to Lt scaling.
00:20:12.730 - 00:20:48.580, Speaker D: And to add to that, if you had a state channel set up, say, any old programmer can pull it off the shelf, can figure out how to sign messages with MetaMask, can figure out how to recover those messages in a contract. But then once you have that solidity just doing that, all of a sudden you can say, okay, well, let's put in some kind of timing factor where they get paid a different amount for overtime or something like that, right? We just invented overtime. In smart contracts, if you've worked more than 8 hours, within 24 hours we start doubling the rate, right? And we put that right into the solidity. So you don't have to trust anybody, you just have to trust the code. And now we've created a new product on Ethereum for overtime billing for some reason.
00:20:51.990 - 00:21:31.246, Speaker A: Just to answer a couple of questions in the chat. Can multiple addresses contribute to a state channel? Yes. The way to think about a state channel in my experience, is that the core API is basically deposit and withdraw. There is also the unhappy case where it's challenged, but assuming actors are participating in the way the protocol is expected to work, deposit and withdraw. And so the protocol should be such that anyone could deposit any type of funds or any type of state at all into the channel. All that matters is that participants in the channel are signing the corresponding messages. A good state channel framework can handle any of that.
00:21:31.246 - 00:22:08.250, Speaker A: And there's really nice APIs. I'm personally partial estatechannels.org because I spent as much of time building it, but it's basically made to be as simple as possible for that sort of a use case. The other question by Evor was like, can you have some sort of a lightweight router? So the word router is very overloaded in layer two, I would say. And in state channels in particular, I think the word you're looking for is more like hub. I know, Kinex does use router, but the word Hub is a bit more accurate, I think, because the way I think about it is if this Alice has money, Bob has money. Alice and Bob want to transact, but they don't have a channel.
00:22:08.250 - 00:22:29.198, Speaker A: But they both do with Charlie. You can use Charlie as a hub. You can route capital through Charlie. That's the route router idea. Through a hub. The hub does not need to be massive and then you don't need to have $100,000. It can be any amount of value, but it does need to have enough value to support the bandwidth of the transaction.
00:22:29.198 - 00:23:04.222, Speaker A: I think for demo purposes on an L two, you can kind of use your own token if you want. You can just mint any number. But yeah, you don't need to worry about literally the raw amount of volume of liquidity. Next question is like someone asked how are state channels even usable if both people have to be online? I would say state channels are best used in context where you know for sure everyone's going to be online. So maybe not like in MetaMask because you close your laptop, right? But maybe if you have two node processes running on two servers. Like an example is with the Graph. The Graph is an API for accessing blockchain data.
00:23:04.222 - 00:24:00.026, Speaker A: They have people that are accepting API requests and rather people these are services servers, like literally node processes and then they have node processes serving blockchain data. So basically API requests come in to one party called Alice and they send requests to the other party. The indexer call it Bob and Alice and Bob are doing state channel payments all the time and both of these servers are basically running 24/7. So that's a good state channel use case. And then just the very last question around topic of state channels is how the hell does this stuff fit into E 2.0? I would say kind of there's not really much of an overlap yet. There's been a proposal that if there were stateless clients for Ethereum, meaning you don't store the full state of the chain, then maybe there would be an interesting use case where state could be stored in a way where you can get paid for storing it through some micro payments.
00:24:00.026 - 00:25:01.938, Speaker A: But that's more of like an idea that's been tossed around by the researchers that work on that as opposed to like a real thing. So I would be hesitant to unnecessarily coupled state channels and E Two, but it might be an interesting segue to roll ups because there is a very interesting roll up related thing with E Two, which is I'll just say it pretty briefly again, keep asking questions, even unmute your mic if you'd like. But just really quickly on roll ups is the key idea is that you're putting the transaction data from the roll up on the L One, right? So you're literally taking a bunch of data bytes send a transaction to l One, not to do anything with those bytes other than to basically log them. So the data is now part of the chain's history. The problem is call data still is expensive. However, with E Two there's way more data that can be stored because of Sharding, basically. And since there's way more data that can be stored, that means through market dynamics, the price will go down for storing data.
00:25:01.938 - 00:25:30.620, Speaker A: Not, sorry, not storing, but rather like just allowing it to be a part of the call data on a transaction. So that's a great thing. And it would be very interesting to see anyone experimenting with the ray and ism E One, E Two bridge or emerge testnet that they're doing during this hackathon and putting roll up transaction data on that. That would be kind of a crazy like bleeding edge hack, but that would be very interesting. Anyway, I've talked for a while, anyone else? Please feel free to chime in.
00:25:31.490 - 00:26:31.882, Speaker B: I was just going to add in there. Roll ups in the context of ETH Two are also kind of in this really cool position that ETH 2.0 is not like a single thing, it's a single end goal. But there are multiple phases of rollout and we're already in the first phase and it's been going for months now, which is awesome, but it's not the phase that matters to end users because it doesn't support actually using it for smart contracts. And kind of the other phases basically are kind of expanding out into Sharding and then finally kind of expanding out into execution. And there was this really interesting thing which is that the last phase is kind of the most in doubt because it's the farthest away and that's kind of how to actually kind of bring the execution in at the end. But it's kind of looking as though that won't even be necessary basically because roll ups will essentially kind of solve that problem and become sort of a core component of ETH 2.0
00:26:31.882 - 00:26:34.450, Speaker B: in at least one pretty likely scenario.
00:26:38.070 - 00:27:31.602, Speaker C: And if I could riff a little bit off Austin's meta the burner wallet and meta transactions, I'm just going to share a line of code which uses the BLS signatures and verification of those on chain to do effectively a similar thing. Yeah, I think at first this is sort of equally generic, I guess way of doing it, but using different signature scheme. And the idea there is to save what is put onto L One when sending a transaction to L2. So it's to reduce the call data. Also in that file is some compression, I think I've called it, or it's an expander on this side, but you'd be sending it compressed data as well. So there's other optimizations people are working on around there. One is just to deduplicate parameters in a function call because that will save you on L One and also to potentially compress parameters, but I think there's another team working on that.
00:27:31.602 - 00:27:34.920, Speaker C: But there's a few optimizations around there that could be of interest.
00:27:41.050 - 00:28:12.720, Speaker A: Yeah, I would say probably in general, getting a knowledge of BLS signatures as a hacker would be worthwhile because it's something that was not quite really, as far as I'm aware, fully understood. Maybe even maybe even in existence when Ethereum was kind of first conceived, wasn't it? Yeah, 2018 or something. Or 2017, the scheme was proposed, I forget. But definitely it's recent. I think there's a lot of opportunities, I think, for using it for different sorts of scalability applications. So it's a worthwhile thing to know a little bit about.
00:28:14.850 - 00:28:40.200, Speaker C: Yeah, I think the key takeaway I got from it is that if you have multiple signatures and you want to prove just one of them, you can. I think it is literally addition of the signatures, but you can just check it with one signature to say yes. This data was signed by this single address even though the signature is one, an aggregate signature of many individual ones. I probably could have explained that better, but you can ask me questions about that.
00:28:41.050 - 00:29:17.310, Speaker D: Well, even just thinking about a multi SIG wallet, the way a multi SIG wallet works is you have like M of N, right? Like three of five people need to sign this. So you have to collect at least three of the signatures and then submit them on. Think I'm just a builder? I don't know. I just know that does like grouping. Right? So you could have I talked to Danny Ryan about this one time. We were talking about how ETH two has it's a hard barrier to entry to get your 32 ETH together. But with the way BLS works, you could technically have 32 different people all have one ETH.
00:29:17.310 - 00:29:27.880, Speaker D: And the way the signatures could work, like you could all sign the blocks each time or something like that. It had to do with group signatures and it got really exciting for me, but I haven't played around with it. I'm excited to try them out.
00:29:29.370 - 00:30:15.430, Speaker A: Just on the topic of brainstorming again. So one idea I would love to see someone work on or think about is basically with BLS signatures, one thing you can do, it's kind of been alluded to is you can have a multi SIG basically built into the signature scheme. They're called aggregate signatures. So like four people can be required like we just mentioned, three or four people can be required to sign something in order for a signature to be valid. And that's super useful. But the problem is there's very little infrastructure that is made to make that easy. In the existing stack that we have in Ethereum, and in particular with the ledger devices, this is a very specific idea.
00:30:15.430 - 00:30:51.970, Speaker A: With ledger devices, there's currently no way to have four ledger devices and run a it's a very specific. Word. It's called Horcrux, a horcrux setup ceremony such that you can set up one of those M of N like three or four BLS signature scheme aggregations with literally ledger devices. But it's not that hard to do. The ledger team is open to implementing parts of this. Also, the APIs also support BLS signatures in general, but that would be an insane hack. I would even personally offer a prize around that would be a great thing to see.
00:30:51.970 - 00:30:53.780, Speaker A: So a very specific idea.
00:30:57.670 - 00:31:32.400, Speaker B: I'd feel like I'd be betraying my co founder Steven if I didn't point out that a lot of the cool stuff, not everything there's some stuff that's kind of unique to BLS. But a lot of the cool stuff that Austin you were talking about, for instance, is also actually possible with regular old ECDSA signatures that we use for Ethereum every day. They're called Threshold signatures and it kind of allows that same sort of thing. And I know there are a number of companies that have been kind of building threshold signature tech for kind of off chain multi sigs just with regular old kind of Ethereum and user accounts being multi sigs, which is pretty cool.
00:31:33.330 - 00:32:32.110, Speaker D: Maybe it might be cool to even talk about the difference between a multi SIG wallet that stores all the transactions on chain and a multi SIG wallet that does it sort of counterfactually. So there's kind of like two ways you could build your multi SIG wallet. And I want to throw a solidity by example in of multisig just so you see how it works. But it would be a group of people all have to basically vote on that transaction, right? And if you check out this code I'm pasting into chat now, you can see that we're tracking the transactions in the contract. So all of that call data and whether or not each person has confirmed those, each one of those goes into that contract. And that's a lot of storage and a lot of transactions. Really what you want to do, kind of moving toward this off chain stuff is what if the transaction information is stored off chain? People land on a site and they get the transaction information from a central server, they sign it and all their signatures are just stored on that central server.
00:32:32.110 - 00:33:18.782, Speaker D: And then you write the smart contract not to store all the transactions, but just to say, hey, if you can collect some call data and three signatures from the four owners, then we'll go ahead and execute this call data and I'll send a repo that I have that does this for a multi SIG. It even opens up streams too. I'm pasting that in here. And total tangent now. Total tangent. I was thinking merkel trees and merkel roots, right? When Uniswap wanted to do a distribution to all of their users, obviously they didn't want to run through and make all those transactions. They didn't want to set it up so some contract had 100,000 accounts in it, and people would have to get in and withdraw.
00:33:18.782 - 00:34:27.298, Speaker D: Right? So what they did was use a merkel tree, which, again, I'm a product builder. I don't know how this stuff works underneath completely, but a merkel tree let me find the uniswap merkel tree. And what they did is you create a merkel tree, and then you take that root and you put the root in the contract. And then if someone wants to prove that they exist somewhere in that tree, you have an off chain service that kind of proves up the tree that they do exist in there, and you give that to the user, and the user submits that to the smart contract. And so all the smart contract needs to know is like, oh, yeah, they do exist somewhere in this tree, so therefore, we can send them some money and check them off the list. And so we created, just to extend this even more, an NFT Minting app, where an artist could actually select, like 10,000 different generative works that they've put together and then have the gallery set up. So there's one smart contract that gets deployed, and then the whole gallery is basically just all of the artworks within that merkel tree.
00:34:27.298 - 00:34:50.574, Speaker D: And then if someone wants to buy that, they click it, and they also do the merkel proof that it exists within that tree, and they can go ahead and prove that that is one of the artists'work and it can get Minted in the contract. And I'll send that along here, too. I feel like I've talked too much. Someone else should go, but merkel roots I'll paste in the uniswap merkel library. I see my dude Sean On showed up.
00:34:50.612 - 00:34:50.894, Speaker A: What up?
00:34:50.932 - 00:34:52.686, Speaker D: Sean on. How you doing, man?
00:34:52.868 - 00:34:54.240, Speaker B: Hey, how's it going?
00:34:55.410 - 00:34:56.590, Speaker D: Are you hacking?
00:34:57.490 - 00:35:05.540, Speaker B: Yeah, I'm thinking about I'm just looking into things right now. Obviously, I've never built with anything OVM related before, so I'm pretty excited to dive into this.
00:35:06.150 - 00:35:09.570, Speaker D: I got an optimism starter kit for you. Let me paste it in here.
00:35:09.640 - 00:35:11.060, Speaker B: Oh, that sounds cool.
00:35:12.790 - 00:35:55.090, Speaker A: I would also just maybe we've said a lot really fast if for any folks that are in the room, literally, if you're confused about something or if you came here hoping to talk about a very specific subject, please don't be shy. If you want to put it in the chat, you can do that. Or if you want to take a moment now, I'll let people unmute if they want to ask a question or chat out a topic we can dive into, please. This is for you, so please let us know. How can we help you? Hey. This is Shannon. One thing I've been thinking about know as different chains like Tezos are starting to offer Minting platforms.
00:35:56.310 - 00:35:59.662, Speaker B: Obviously, I can see reasons why artists.
00:35:59.726 - 00:36:01.174, Speaker A: Would want to go to that platform.
00:36:01.292 - 00:36:07.094, Speaker B: Versus ETH to Mint, but collectors, if you think about the marketplaces they would.
00:36:07.132 - 00:36:30.106, Speaker A: Want to go to to buy NFTs, they're going to be chain agnostic. So what, from a technical standpoint needs to happen for chain agnostic NFT marketplaces? That's a great question. Let me take a second to think about it. Or Harry James, if you had it's.
00:36:30.138 - 00:37:01.160, Speaker D: Happening, right, because of the degentrification of Ethereum, like the spill off is landing in all these other chains, we're going to have NFTs in other places. I think the saving grace is the places that it's landing. They're all EVM compatible. So as long as your stack works here on Ethereum, it'll work on a side chain, it'll work in L two, it'll work on some of these other platforms. I don't know about Tazos exactly. I doubt Tazos has any EVM compatibility at all. But also, like, who's messing around with NFTs on Tazos? Come on, come on with that.
00:37:01.160 - 00:37:16.506, Speaker D: But it's EVM compatible. So a lot of your tools, whether they work on the side chain or Ethereum, you're just going to have to kind of parse all the different networks. But the tooling will work the same EVM compatible across a lot of different networks.
00:37:16.698 - 00:38:09.918, Speaker B: But I think, yeah, the part of the question about so there's chain agnostic in terms of the same thing can be deployed in independent ways in a lot of different chains. And then there's sort of applications that actually connect a bunch of chains together. Chain Agnostic. Multiple deployments on different chains, I think are pretty easy. But that sort of leads to very kind of segmented ecosystems, which is kind of not the best I mean, I think with NFTs, the best example of that's probably NBA TOPSHOT on flow, which has gotten a lot of usage and is kind of like its own little world completely pretty separate from the ethereum world. NFTs are really the hardest thing to bridge between chains. And it's right in the name it's because they're non fungible and so there's stuff you can do and it gets kind of tricky and interesting.
00:38:09.918 - 00:38:57.742, Speaker B: If you want to move from chain to chain, then you take the NFT on one chain and you lock it up and you somehow mint a token on the other chain that is redeemable for the original token. And then you say, well, okay, that now represents this NFT. So there's kind of a lot of stuff that can be done, but it gets pretty complicated. And so I would expect that a lot of work will be done around the edges with UX in order to smooth it out. The first thing that will probably happen in terms of a single shop location for NFTs that kind of crosses multiple chains will be something centralized, will essentially be sort of coinbase for NFTs where there's somebody who kind of escrows, all of them. And you can buy them and sell them on their platform and then withdraw them onto the chain that they're on. That probably exists already.
00:38:57.742 - 00:39:03.070, Speaker B: I don't know if anyone, but doing something that are decentralized is a lot trickier.
00:39:04.050 - 00:39:56.954, Speaker A: Yeah. I would mention I think one thing that hasn't been fully downloaded yet into the Zeitgeist is the idea of NFTs being themselves marketplaces. So there's a lot of talk of, like, oh, there should be a marketplace for this type of NFT or a marketplace for that type of NFT and you deposit into the marketplace. But I think actually the better way of doing it, and this is what a company called, I guess, a protocol called Zora is doing is that the asset itself has on it, like, functionality to bid, basically to buy and sell it on the asset itself. So these marketplaces don't need to have the assets in them. It's more like the assets are wherever they are, and the marketplaces just provide an API or an interface, interact with them. I think that's been underexplored underappreciated personally.
00:39:57.082 - 00:40:12.322, Speaker D: We built that right into Nifty Inc. Too. We noticed. We created the NFT platform. We're like, Wait a minute. We need, like, one more variable to track whether or not it's for sale, and we can build a marketplace into this. Like, going back to that, you add one line to your solidity, and you create a new mechanic.
00:40:12.322 - 00:40:44.938, Speaker D: So we did that. So on the side chain of Nifty Inc. It's just is it for sale and how much is it for sale for? With just one number, and then someone can pay that to mint them. And those upgrade to Ethereum, too. That's topical. You can mint over on the sidechain XDI, and you can buy and sell these NFTs for, like, a dollar if you want. It costs a fraction of a penny to mint them and move them around, but it backs with one of these bridges that Harry was talking about, where you burn them on the side chain, and then they're minted over on ethereum.
00:40:44.938 - 00:40:56.818, Speaker D: But it's crazy right now. You buy and sell them for a dollar, and then it costs you, like, $209 to upgrade them to main net so you can have them in your open sea. I will, yes.
00:40:56.904 - 00:41:19.978, Speaker A: Yeah, exactly. Cool. I'm just going to repost the list of the brainstorm ideas. Shannon, did that answer your question? Do you have any follow ups? I'm actually not a dev, so I can't really follow up intelligently. That was really helpful, though. No worries. Anyone else?
00:41:20.064 - 00:41:22.730, Speaker B: Summary of a lot of that? Was it's complicated?
00:41:23.230 - 00:41:23.980, Speaker A: Yeah.
00:41:26.290 - 00:42:05.714, Speaker D: Okay, real quick, let's talk about the off ramping of an NFT from Optimism. So if you're in Optimism l two and you want to off ramp a fungible asset, it is locked up, and it does take weeks for that fungible assets to get unlocked. But what happens is someone can I think, Joshua, is that someone can create a market across that and say, okay, this fungible asset over here will eventually get released in two weeks. I know it's going to get released. It's just we have to wait for this challenge period we were talking about earlier. Well, you create a market across that and someone can make a premium by giving you a loan on your stuff and then getting it eventually. But an NFT, like you said in the name, is not fungible.
00:42:05.714 - 00:42:22.080, Speaker D: And you can't be like, okay, I'm going to lock up my crypto punk over here and get a crypto kitty on the other side. You have to wait for that one unique token to go through that whole challenge period. And I don't think anybody's come up with anything better for off ramping those out of those L two S.
00:42:24.370 - 00:42:31.220, Speaker A: Isn'T ave collateralizing NFTs though, already, like with the Avagatches, is that a workaround for that?
00:42:35.390 - 00:42:52.800, Speaker C: Yeah, that sounds interesting. If you are assured that you will be in possession of it after a period of time, can you act as if you have it then and then be able to generate revenue off the possession of it? And then after it's released, it then goes to the original owner? Yeah, something like that. That could be interesting.
00:42:53.330 - 00:43:14.310, Speaker A: I think I was sort of saying in the chat a little bit like the idea of making withdrawal, withdrawals, pending withdrawals, tradable assets. I'm not aware of any standards around that, but it's sort of the same way you kind of like wrapped ETH. Like if the standard of wrapping something like wrapped is a standard thing we do, maybe like wrapped withdrawal ETH is a thing that should exist eventually.
00:43:15.450 - 00:43:24.380, Speaker D: But here we are, here's the edge of the ecosystem. Here we are as developers, innovating and talking about what are we going to build at this hackathon to solve this problem?
00:43:24.750 - 00:44:23.310, Speaker B: I'll say this is a pretty good opportunity to plug, I think one of the project ideas that we working on, Arbitrum plugged in for context for anybody recently joined building an optimistic roll up called Arbitrum. And along with that we have sort of a one stop shop token bridge basically for porting tokens kind of to and from between the ethereum chain and the Arbitrum chain. And one of the really cool abilities it has is it has sort of a kind of generic plugin facility for a liquidity provider to purchase some tokens that are being withdrawn. And so kind of one of the project ideas that we're hoping some people will be interested in is kind of exploring various ways and kind of various trust models and various kind of price points that different types of applications can kind of plug in and provide fast liquidity to users.
00:44:26.310 - 00:44:49.520, Speaker A: It's awesome. Cool. Any other folks want to ask anything super specific or even just ask for us to dive into a particular topic? I was hoping I could ask a question about a particular kind of NFT since we're on the subject.
00:44:50.500 - 00:44:52.348, Speaker B: I'm not a developer, but I'm helping.
00:44:52.364 - 00:45:02.870, Speaker A: A developer research and he's building marketplace for Harbinger. I think it's pronounced NFTs. And.
00:45:04.840 - 00:45:08.356, Speaker B: I guess I would just want to know if there's anything that comes.
00:45:08.378 - 00:45:18.810, Speaker A: To mind that you would like to see done as far as scaling is concerned with NFTs and specifically with Harbinger NFTs, if that's something that you're interested in.
00:45:21.520 - 00:45:56.650, Speaker D: Not sure how they would collide. Yeah, so Harburger taxes are like it's like part of the radical exchange stuff. A Harburger NFT would be you have to pay some tax to continue holding the NFT and if you go delinquent on holding the NFT, someone can liquidate your NFT, I think is what he means by a harbor NFT. That's my guess. But then I don't know how that would collide with Scalability. I'm not sure what tips and tricks we're using there to scale. I'm not sure.
00:45:58.780 - 00:46:12.668, Speaker A: Yeah, I think it ends up being the same question as before, just ways in which you can scale NFTs, which I think we covered. I'm not sure if there's any super specific harbor related thing. I was just kind of like stirring the pot.
00:46:12.834 - 00:46:15.116, Speaker B: But I guess it just goes back.
00:46:15.138 - 00:46:22.636, Speaker A: To minting the actual NFT and how you can lower the gas costs for that. If there's any kind of interesting workarounds.
00:46:22.828 - 00:47:09.252, Speaker D: How about an NFT that holds a whole bunch of other NFTs and you can sell them kind of instead of selling ten NFTs at a time, right? You can just sell the basket of NFTs. They buy that one NFT and you actually make just one little change to the ownership of this guy and he owns all of them inside. So then you could buy and sell like baskets instead of having to spend all the gas to buy all of them. And then you could unwrap that one thing from that basket and sell it somewhere else. I don't know. Just trying to think of fun ways we could package up NFTs or find some gas hacks for NFTs, which, speaking, this is a fun, weird paradigm here. A lot of our Scalability stuff is like figuring out tricks to spend less gas.
00:47:09.252 - 00:47:33.124, Speaker D: But a lot of our L2 solutions and our side chains gas doesn't even matter, man. We're just throwing stuff at it like crazy. So it's funny that there's almost a paradigm shift when you get up into these L2 s or on these side chains where you quit worrying about gas and you just start throwing everything at the chain just because it's cheaper and you're not as concerned with those tricks. So that might be just a weird thing to think about. Go ahead.
00:47:33.162 - 00:47:47.390, Speaker C: Yeah, it just goes back to, I guess, thinking of any startup idea that you would have originally before Ethereum and before being constrained by gas, and now that's open again, it's just sort of saying, hey, any wild ideas are now possible and bring them onto L2.
00:47:50.880 - 00:48:34.190, Speaker A: Just with regards to idea of brainstorming, if you're just totally not sure what to do. I think a really good just default or fallback idea is just find something on Ethereum that got really popular and just put it on an L2. Like FOMO 3d on an L2 tornado cash on L two. Just something that was really popular in Ethereum and just get it on an L2 and just run the exact same playbook. Make it so the UI works, make it so that it's usable and make sure the contracts compile as appropriate need to pro optimize or Arbitrum or whatever it is you want to deploy on and that would be great. There's not enough people experimenting with these things. Literally just finding something that already works and putting on L2 would be great.
00:48:35.120 - 00:49:07.956, Speaker D: And games. You can do so much more on L2 than we thought of in L One. One thing that's really going to be fun is when you can ramp directly into L2. So if I can swipe a credit card and get $10 worth of tokens on Arbitrum and I can run for a long time on $10 worth of tokens in Arbitrum, right? So once you're ramped into that L2 and you can buy and sell stuff, man, that UX is going to be so smooth and fun.
00:49:08.138 - 00:49:34.780, Speaker B: That's one of the and even flowing things is that there's every chance that in the future users just don't transact on Ethereum l One, even with these 2.0 that they just are just in roll ups or state channels or Plasma. I don't know exactly what it'll look like, but it seems like there's a pretty good chance that at that point l Two might even stop being called L2. And it's just like Ethereum.
00:49:36.960 - 00:50:08.490, Speaker C: And just like sort of Liam's point. If you have an idea or something that you use like a financial app or like a bill sharing app so, you know, you go to restaurant, you pay when we used to go to out, you pay at a restaurant and you split the bill. Like even bringing that to an L2 is now possible because you wouldn't have thought to have brought that to L One. But ideas that are outside of Ethereum that are working in the real world say, hey, let's bring that because we can bring it into Ethereum now. So some bill sharing app or any other ideas like tax savings apps, Acorn, whatever it is.
00:50:09.900 - 00:50:12.330, Speaker E: Can I just jump in for a SEC?
00:50:12.780 - 00:50:14.092, Speaker A: Go for it. Yeah.
00:50:14.146 - 00:51:31.652, Speaker E: I was thinking about addressing some of the architectural issues in Ethereum. Not necessarily just for the hackathon because obviously probably not enough time. But some of the things I was thinking about is that it should be what I call more massively parallelized. Currently, what you have is the state has the world and some transaction comes in and moves the state to next state at time T plus One. In the meantime, you have the entire world waiting for transactions. So I was thinking of ways of not exactly shorting, but I guess it has a similar idea of breaking things down into smaller regions, like creating smaller worlds, in effect, so I don't have to put in locking mechanisms because the idea of having a single transaction come in while everything is paused is sort of like locking in a sense. But that was one thing.
00:51:31.652 - 00:52:35.700, Speaker E: The other issue is the fees. I always thought that tying the fees to Ether or Gas to Ether was probably a bad design. I was looking at the devs while they were working in 2014, I think, January, and they were talking about that. I thought maybe that was a bad idea, but I couldn't really say anything about it. So I want to sort of look at that. Could that be done in a different way? Instead of say, mining or staking, could there be like a set of nodes that are, let's say, the fastest nodes within the subnet, if you want to call it that, or region that could be the ones processing in some sort of round robin, maybe? The concept of fees also had to do with preventing infinite loops.
00:52:37.080 - 00:53:21.776, Speaker A: I can touch on one element of what you're talking about when it comes to the fees management. One thing idea that you're sparking in my head is that let me set it up a little bit. Basically in Ethereum, if I want to change Ethereum, like there's a whole EIP process, it's a pain in the ass. Got to go through months to month to month of work, got to convince everybody in Vitalik and it just sucks. But on L two I can just launch my own roll up or a small roll up and I can just change the structure of the protocol any way that I want as long as in the end of the day I'm still getting transactions on. So for example, one thing on optimism we've done is by default your EOA that you don't normally would have in Ethereum, right, the account with Ether balance with no code. Instead that's actually now it's a contract wallet.
00:53:21.776 - 00:53:46.332, Speaker A: So by default you have a contract wallet. That's just one design. We said let's do that and let's see how that works. If we don't like it, we can change it. You can do all sorts of stuff like that. Right now on roll ups, you can experiment. If we wanted to, we could put EIP 1559 on optimism or someone else could deploy their own optimism instance and put it on there and we could experiment and you can do this with anything.
00:53:46.332 - 00:54:04.228, Speaker A: Like another idea I had is what if we just change to your point, change the way that gas is spent, let's use some completely other token or arbitrary token or build in totally different mechanisms. This is another area for exploration, I think in layer two is like just totally new protocol experiments that we haven't seen before.
00:54:04.394 - 00:54:40.080, Speaker E: Yeah, I understand. I mean, I'm just kind of learning a little more about these roll ups and layer two, but just listening to some of the presentations earlier, I was thinking that you could have like in a database, you have two phase commits, you could have issues of that sort when you like in layer two. And I think one of the presenters almost talked about that. I think he did talk about it. So you could have more complexity.
00:54:41.780 - 00:54:42.096, Speaker B: In.
00:54:42.118 - 00:55:56.440, Speaker E: The system, the entire ecosystem, because mainly what you're looking at is that Ethereum has certain, I think, architectural deficiencies. And guys, I'm not trying to bash Ethereum and everyone's trying to create hacks, if we want to call them that, or solutions around that. But you might find and I'm a developer, I've been developing stuff for a long time. You might find that what you're actually doing is that, yeah, you're bringing solutions, but there's going to be a point at which things get very fragile. Or maybe it's just tough, and maybe you really have to go back to let's call it L Zero, the idea of Ethereum and say something's wrong in the architecture. We got to think of some here, otherwise things are just not going to work. And it's interesting, someone on Facebook asked me, and he's not a programmer, he asked me, well, what's web 3.0?
00:55:56.440 - 00:57:00.060, Speaker E: And I was thinking, all right, well, it's decentralization, it's maybe internet money, it's smart contracts on one level. On another level it's DApps, like using IPFS, so you're not centralized, it's decentralized. And then I looked up the definition and it talked about semantic programmable web, and I was thinking, yeah, monetization and all of that sort of stuff. And then I started thinking about the architecture and I was thinking, well, Ethereum actually, and that sort of like definition of semantic web never really panned out, right? I mean, I could be wrong, but I've not seen it. But in thinking about Ethereum, and if it were done the way I was thinking, you could actually get to that semantic web where basically the leaves on the chain and you could have lots of chains. I'm talking about millions of chains.
00:57:03.520 - 00:57:04.910, Speaker A: Sorry, James. Go.
00:57:08.160 - 00:57:44.376, Speaker C: So I was just going to say, it sounds like one way to go about it is try to go from first principles to kind of say, okay, what if it was before Ethereum? But in a way, I think reaching that sort of distributed consensus is kind of solved with the single threaded nature of what we have, and then sharding is the way of then fixing the other things that you're mentioning. And I guess my take is sort of, okay, where are we today? What's working and what's the next thing to build to bring it to something better? But it is sometimes good to reflect on first principles and think, how could it have been done differently? I've got to head out.
00:57:44.398 - 00:58:20.948, Speaker D: Guys, I'm going to post in one last link, one last challenge. Try building something on Ethereum that never touches Ethereum. Think about it. Think about it. What could you do? So think about this. What if you wanted to build a voting system for all the people who held dai or some other token, right? How about like a personal token voting system that just uses signatures? And if a signature says they vote one way, you can go look at their token balance and apply how big of a vote? And you never touch Ethereum, you never spend any gas, and you get a cool vote from all the token holders. So I left a last little link.
00:58:20.948 - 00:58:26.660, Speaker D: Hearts. Hearts. Hearts. I got to go do another talk. Got to go carve some food real quick. See you guys. Happy Thursday.
00:58:26.660 - 00:58:29.400, Speaker D: Good luck at this hackathon scale Ethereum.
00:58:31.020 - 00:58:33.080, Speaker A: See you, Austin. Wow, what a legend.
00:58:34.860 - 00:59:25.020, Speaker B: I wanted to throw in there as well. I think we should just make the theme of the rest of this roll ups solve everything and are the answer to everything. Because the first part of the question also in terms of different options for kind of even models of blockchain at all, all of that stuff is kind of areas that can be explored with roll ups. Like Fuel, for instance, is doing a UTXO based roll up for that. One of the things they've focused on is actually kind of being able to do a lot of stuff in parallel. And so, yeah, it's basically just kind of like roll ups are basically kind of everything we ever wanted in terms of flexibility in order to explore kind of what's possible in a blockchain, all while staying within the security of Ethereum, which is just pretty damn exciting.
00:59:25.440 - 01:00:08.856, Speaker E: I'm not saying that's a bad thing, but let's say as the price goes up, right, you still have to at some point pay for the gas and all of that sort of stuff. And yes, you could say, well, the number of transactions processed on the layer two, well, you could increase that so that you decrease the cost. But I just think that and I think I saw Lewin talk about that where he said it's kind of like a POC proof of concept and maybe it did a very good job as a first version. And someone I'm not saying this is.
01:00:08.878 - 01:00:10.760, Speaker B: Why there's an Ethereum 2.0.
01:00:10.910 - 01:00:11.688, Speaker E: No, I understand.
01:00:11.774 - 01:00:13.096, Speaker B: But the thing is that is it.
01:00:13.118 - 01:00:43.924, Speaker A: Really benson just because we're running near the end of the session, I want to make sure we let chime in and we stay at the topic of brainstorming. Whatnot lucas, you've been here for a long time. I see your hand raised. Do you want to chime in? Yes. No, I just had a question. I want to know how do you synchronize sorry, my English, the state in L one, M two. What are the problematic that you how.
01:00:43.924 - 01:01:48.490, Speaker A: Do you synchronize the data? I guess there's different ways you could interpret that question. Okay, so I guess maybe what's worth understanding is the idea of moving data from l One into l Two. And maybe a better way of saying it is sending a message from l One to l Two, and then the inverse, which is sending data from l Two to l One. Both are again, it's a bit nuanced sending data from l Two to l One and sending state from l Two to l one. Okay? So if you want to send money into l Two, what you can do even is basically you can send a transaction to a contract that's sort of like some people call it gateway, some people call it a bridge. Where transactions that are sent to that contract are read by the sequencer block producer, the roll up operator, and they will read those transactions in that specific contract and interpret them as layer two transactions. Okay, so that's how transactions can get put into the L2.
01:01:48.490 - 01:02:39.850, Speaker A: That's the general way. One example use case of that is depositing ETH, right? You can send ETH into this contract. The sequencer will be like, oh, this user wants to send ETH into the l two, and that's the active depositing. Okay? The inverse is an L2 user says, I want to send this transaction and I want it to be relayed onto l One. So in that case, you're sending a transaction to the sequencer. The sequencer will take it and say, oh, this is actually a transaction that must be that is relayable, that it's put onto a contract in L one, and then anybody probably the same user that sent the original transaction. Can basically poke that contract in l one that after the batch has been submitted and the timeout has been elapsed, and then that transaction can then be replayed relayed as a better word on the l one.
01:02:39.850 - 01:03:46.990, Speaker A: So you can move transactions in and out of l Two. And that's sort of like the key mechanism for actually executing transactions between the two. And then there's the other nuance, is that the way the roll ups work basically is the operator submits the full transaction data onto the l One just for the data availability purposes. So anyway, the question you ask is how do you synchronize the data between the two? It's a bit ambiguous and I kind of described message passing and just the act of putting data on chain. Is that a helpful answer or do you think, yes, no thanks. But things like Unicorn version two, you can't scale like that uniswap. How do you scale the way uniswap work? You meant uniswap, right? Yes.
01:03:46.990 - 01:04:27.016, Speaker A: Okay. Basically, if it's not clear, the way uniswap would work is that on the l Two itself, that's where the uniswap contracts would live. So if users want to use uniswap, they would deposit their assets into the l two or initially have received them on the L two. Somehow users have assets on the L2 and they interact with the contracts on the L two. The L two is fully EVM compatible, whether it's arbitram optimism or whatever. Your role of implementation is such that contracts can be deployed. Users can interact with the functions on those contracts, and those contracts can be the uniswap contracts.
01:04:27.016 - 01:05:11.896, Speaker A: Now, what does that mean, those transactions? On L One, the gas price would have been obviously quite high because everyone's here is familiar how expensive it is. But on L2, what ends up happening is the sequencer is collecting all those transactions and submitting the call data for them onto L One. So the users only need to pay for the cost of the sequencer to put the call data on L One, which ends up being it's difficult to give an exact number, but basically 100 x to 500 x cheaper. It's a rough range. It depends on a lot of factors, but yeah. So how does it scale? It scales because way more users can now use it. That's one element it's no longer bottlenecked on, like needing to pay $50 to trade $50.
01:05:11.896 - 01:05:51.364, Speaker A: And because the sequencer does not need to deal with achieving consensus with a large number of nodes, it can achieve consensus on its own. It can respond to the API's queries really fast. Your confirmation time is negligible. It's in the order of milliseconds. So you click a button to go to uniswap, you click Trade, you pay five cents and done instantly. Basically, yes. But if you are using the contract of uniswap in level one, no, layer one, that Ureth is here, you double spend on L two.
01:05:51.364 - 01:06:21.948, Speaker A: I don't understand this. No, double spending is a good point because now we have multiple chains. The way that Ethereum typically handles that is the transaction itself will have a chain ID parameter in the transaction, so that way you can't replay it. The chain ID is different per chain. So, for example, the Ethereum main net, I think, is ten or one actually, I forgot. And the layer two will be some other number could be like 420 or something like that. So that's how you do the replay protection.
01:06:21.948 - 01:06:54.168, Speaker A: But the question you're asking is pretty fundamental. Where do the contracts live? Probably the answer is, in the near term, they'll be in both places. There will be contracts for you to shop in layer one, there'll be contracts in layer two. However, there'll be this huge incentive for users that want to trade a lot, which is deposit your money into layer two because it's way cheaper to do it there. And eventually people will realize what the hell is the point of using the layer one, use layer two. Unless you're like a mega whale trading with other mega whales and it's just not worth it to deal with that. Maybe.
01:06:54.168 - 01:07:00.364, Speaker A: But I think over time people will just go to layer two. Okay, thanks.
01:07:00.482 - 01:07:18.012, Speaker B: All right, just to piggyback off that a little bit, though, say that you're transacting on layer two and uniswap, unless your end goal is to participate and trade and do DFI stuff. Whatever else you're going to do with those tokens has to be on that layer as well, right?
01:07:18.166 - 01:08:16.150, Speaker A: Otherwise you have to it's a great point. Yeah, it's a great point. A lot of people are thinking about this problem. Like you mentioned, the assets are in one place, right? You might have fungible assets like, let's say it's dai or ETH or any, ERC, 20 token, in which case you can have ETH on l One, you can deposit into l Two and you can withdraw it again pretty quickly because someone might be willing to trade that withdrawal for your asset, in which case it's pretty fluid, moving it around. If it's non fungible, then you're kind of stuck until the withdrawal period is done. And this is one side effect of the point you brought up, which is that these assets need to be in one place or the other. If I am on the ethereum mainnet and I go to MetaMask and I see I have, like two ETH, those two ETH I can't spend on layer two, I need to put them into layer two.
01:08:16.150 - 01:08:46.720, Speaker A: Okay. So somehow, whether I click a button on Adapt, maybe MetaMask will have a button built in. Who knows? Somehow I got to deposit that two ETH into layer two. So on MetaMask, when I go to the main net drop down, it'll say two. Then I click the button deposit and it'll say zero. And I'm like, okay, where's the money? I'll go to the drop down, I'll go to optimistic ethereum or arbitrary main net, whatever, and it'll say two there. So you're moving your money across chains.
01:08:46.720 - 01:08:52.130, Speaker A: Yeah.
01:08:57.540 - 01:09:36.940, Speaker B: In the short term, there's going to be sort of like a lot of moving back and forth. I think the expectation is, in the long term, more and more stuff gets deployed into roll ups until essentially your average user is going to spend most of their time into roll ups. And so a lot of kind of what we're looking at is sort of intermediate growing pains, which is important because essentially if we can't sort of overcome those intermediate pains, maybe we never get to the full awesome roll up future. But essentially kind of the future we're targeting, though, is one where 95% of users probably never even leave. So kind of how to get there is the question. But in the end, there won't need to be that much moving back and forth.
01:09:39.440 - 01:09:39.804, Speaker A: Yeah.
01:09:39.842 - 01:09:59.220, Speaker C: Even some UX improvements around that. Like, as you said, that if you've just sent something from L One to L two and then you see your balance go to zero, that probably doesn't feel too good. But if you see it and then stead change oh, your two is now here and maybe it says, would you like to go follow your ether or whatever? Smoothing those points of friction could be interesting things to address.
01:09:59.290 - 01:10:40.450, Speaker A: Yeah, absolutely. And I would say each one of those little points of friction themselves end up being little mini projects you have to think about. And if you're a hacker thinking again what to do, even just trying to do anything on layer two now and expanding the pain points and just being just saying I want to fix that pain point will be enormously valuable. There's a shortage of developers building out all the things that we need to make the experience smooth like butter. So if you want to be a contributor to that, you'll be amazingly praised and probably win a lot of prizes also. I see like four emoji hands, I guess. Joshua, I don't know.
01:10:40.450 - 01:11:17.292, Speaker A: Joshua, did you want to ask? Yeah, sure. Thanks for all the discussions. I do want to quickly brainstorm around a lot of the DeFi issues. And one thing that as a developer, when I was working on it was the time value of money concept. Ethereum never had a concept of actual time. It was in blocks and it's implied. I'm just curious from anyone in the discussion to just share how they see time come in because DeFi really depends in the real world.
01:11:17.292 - 01:12:05.020, Speaker A: Depends a lot on value of money. Interesting question. I'm trying to figure out how to relate it specifically to scaling. I'm not sure Harry James talk about scaling in particular. I think we use a lot of calls like cleaning alarm clock and other hacks which don't depend time but depend on state. For example, only measuring time at the point of objection to then imply they accumulate the interest or something like that. And I think every DeFi protocol would eventually need a standard which has to be off chain and provided constantly.
01:12:05.020 - 01:12:12.796, Speaker A: So I'm just thinking, is there any way people see this improving in off chain environment?
01:12:12.908 - 01:13:13.440, Speaker B: It's a good question. Having kind of secure knowledge, being able to securely operate on short timescales is a really hard problem. It's a problem where kind of depending on how secure it needs to be can be solved. You're never going to get sort of like even Ethereum kind of blocks come in irregularly with proof of work that'll be improved to some degree with proof of stake. Timestamps are kind of somewhat accurate long term, but essentially kind of in the really short term can be manipulated. So essentially kind of doing things on really short timescales is difficult. With roll ups running with sequencers, you can get sort of quicker blocks and this is kind of a complicated can of worms, but essentially you may not want to trust on really short timescales or you might want to consider how much you trust on really short timescales that the timing information will be precise.
01:13:13.440 - 01:13:25.610, Speaker B: So there's kind of more we can do with roll ups. But even there kind of when you want to come to consensus over sort of things that occur in a really tight interval of time, it's definitely a tricky area.
01:13:27.660 - 01:13:42.684, Speaker C: Yeah, I think maybe it's the same with Arbitrage, but you can rather than rely on the aggregate or the one that's bringing transactions together, you can submit it directly yourself. I think there's that part as totally yeah, yeah.
01:13:42.722 - 01:13:50.930, Speaker B: But the thing is that that is kind of more on the Ethereum level of kind of timing granularity. So essentially yeah. My only point was.
01:13:53.700 - 01:14:33.310, Speaker C: What I was also going to add for joshua is if there was some, rather than say, a small timing thing you needed, but if it were in fact a sequence of individual transactions you needed, you could do something like a batch set of transactions, and obviously you'd need a smart contract wallet that did that. So if there was a feature that was required to say, we need these sequence of different transactions to occur, having maybe a generic smart contract that does that, again, I'm just going to say BLS signatures, because you then submit one signature for a set of transactions that you want to do. And then if your wallet isn't able to do that, that could perhaps solve some of the problems around time.
01:14:34.960 - 01:14:55.620, Speaker B: A lot of times the general area is difficult to solve, but particular cases of it can be solved really nicely. So it's the sort of thing, I think that the details matter are not essentially kind of exactly what you need to be able to do since the general problem is so hard, but a lot of kind of specific versions of it are totally doable.
01:14:58.040 - 01:15:02.404, Speaker A: James, your hand is oh, I think.
01:15:02.442 - 01:15:07.450, Speaker B: Veron and Alex were before me, my question was sort of answered. I do have another question, but.
01:15:09.260 - 01:16:25.390, Speaker A: Alex yeah, sure. So have a rather broad like it may give some brain foot for someone on the call to develop further. But in general DAOs, also known as decentralized autonomous organizations I believe they have a hard time living on Ethereum right now because first role of gas fees to participate in the governance and in general ethereum gives you UX that is worth then can be achieved on l two, I believe. So if somebody want to work on a nice app with a cool user experience on L2, that can be a big thing to do. I would say a specific thing aragon the project recently it's had a bit of ironically, governance issues, but it's an extremely high quality project that is all open source and has a lot of projects using it. It's a framework for running a Dow basically with a bunch of branch UI elements. Really great contracts, excellent project, excellent quality.
01:16:25.390 - 01:16:55.266, Speaker A: It's been difficult these days for someone to use it because again, the gas fees are super high. On the same topic of what I mentioned earlier, like taking existing project, putting in L two. I think Aragon is a phenomenal candidate for that because, again, it's all open source, phenomenal quality, requires lots of transactions for it to run well, and you can get it up and running pretty fast. Yeah, that's true. I agree, absolutely.
01:16:55.368 - 01:17:01.800, Speaker B: And a great example of kind of where just taking something from layer one and deploying it to layer two is an awesome, powerful project.
01:17:05.930 - 01:18:05.674, Speaker A: Yeah. Varun hello. So the question that I had is, what exactly does this hackathon mean? Can we build DApps or does this have to be specifically I already asked a question on the chat, but I wanted some clarity on that sort of layer because you did mention that we could sort of take DAP, which like a DFI application, which is quite popular on the layer one, and then port it to some. I'm also a co founder of ETH Global, so I'll put on my ETH Global hat. Basically, the way that ETH Global works is we want to make sure anyone can do whatever they want. Like when I'm not going to say, hey, you got to build this thing on optimism or else it's not meant to be something prescriptive. Really.
01:18:05.674 - 01:18:56.422, Speaker A: The goal here is learn, meet new people, have fun, and build what you want. Now, that being said, there are sponsors and there's folks that are here to help kind of persuade you of what's awesome and interesting to work on. And the theme of the hackathon is around scaling, which means the types of people around are going to be really smart people around scaling, and there's prizes around scaling. So if you're interested in using the hackathon as an opportunity to get into a network or to build something really valuable on the topic of scaling, or to perhaps win some money around scaling, or perhaps get a job in the industry of scaling, which is scaling right now, then I recommend doing something related to scaling. That being said, if you want to do something else, go for it. The goal here is to become a part of a community and learn and make friends and have fun. Interestingly.
01:18:56.422 - 01:19:25.602, Speaker A: I noticed, I think the CEO of Blockstack is in here. If you want to work on Blockstack, you can do that. But it's not part of the prize set right now. So I would do what makes you most inspired and motivated. But you'll win prizes if you do stuff related to scaling. Right. One more thing that I just wanted to clarify is that a lot of the sponsors and the prizes, they specify that the application should be on their chain or something of that sort.
01:19:25.602 - 01:19:47.020, Speaker A: Does that mean that it has to be something specific to scaling, or could it be just an app that runs on their chain? Well, the way the sponsors offer the price is totally up to the sponsor. I would clarify that in the discord, there's a discord like sponsor Hyphen, name of company. I would just ask exactly what you just said for the specific prize. Yeah.
01:19:47.950 - 01:19:48.650, Speaker B: Thanks.
01:19:48.800 - 01:20:13.698, Speaker A: Also, is there any good starting place for a beginner to learn about different scaling solutions and getting more deeper into it? Is there a great starting place? I would say that what is the notion was handed possible resource shows. Yeah, the notion was handed showed the.
01:20:13.704 - 01:20:15.140, Speaker C: Breakdown of different things.
01:20:15.510 - 01:20:37.978, Speaker A: Yeah, I posted the notion for the brainstorming. That's kind of useful for this particular discussion. Okay, so here's maybe what you might want to do on Friday tomorrow to kick off. There's a summit. Right. And as part of the summit, folks from various scaling projects are going to be giving comprehensive introductions and there'll be more of this sort of discussion. I would make sure to tune into that.
01:20:37.978 - 01:21:11.334, Speaker A: That's one two is I would recommend to anybody, really, to go to Ethereum.org on Ethereum.org. They have great sub pages around Sharding, around layer two around all sorts of stuff that links out to all sorts of resources. So if you really just want to get to know what's going on across the whole space, I would do that. And then that's another final really great one that linked out to all the stuff that James just linked in zoom. Also, there's lots and lots and lots of links there just to get started. Yeah.
01:21:11.334 - 01:21:32.410, Speaker A: Fully recognized scaling in particular is a broad topic, but really for folks that are motivated, there's an enormous number of problems to work on and lots of people motivated to help you out with them. Thanks a lot. Cool, James.
01:21:34.030 - 01:22:11.814, Speaker B: Yeah. So this is kind of a bit of a two partner one. Is it winner takes all when it comes to L two? And if not, is there a focus on people talk a lot about L One to L2 bridges, but what about from side chain to side chain? Say I want to go on L2 on Uniswap and I want to trade my Ether for USD because I want to stick that in a yield farm that I really like the look of on some other side chain. Do you kind of have to pick your ecosystem or is there also sort of between layers? Is that a thing being talked about?
01:22:12.012 - 01:22:14.040, Speaker A: Yeah, I'll let Harry answer this.
01:22:15.050 - 01:23:26.894, Speaker B: So first, so basically all the tech that's being built for kind of interoperability between roll ups and Ethereum is also basically going to be useful for interoperability between roll ups, which is really cool. So essentially that's 100% sort of the work done on any of these sort of interoperability problems is really nicely applicable to all of them, I'll say. I definitely think that the future involves multiple roll up chains, even kind of at a fundamental level. Even if, for example, there was only sort of like one DK roll up that was like the only type or one optimistic roll up that was the only type. You'd probably want to have multiple of them because you want to have them running in parallel because you want to have sharding. So I can't imagine kind of any world where each two launches and there's only really a single roll up chain because it would be really hard to run a node for it. And so I think that kind of how the ecosystem developed is something that everybody here at this hackathon is going to play a part in because everyone's just figuring it out right now.
01:23:26.894 - 01:23:46.326, Speaker B: We're very much on the cutting edge and so I think interoperability is going to be a big part of it. Which is why I know for Arbitrum we have kind of a prize that's centered around Interoperability. I'm pretty sure Liam, that optimism has something focused there. Probably not sure.
01:23:46.508 - 01:23:47.654, Speaker A: Let me double double check.
01:23:47.692 - 01:24:08.800, Speaker B: I know a bunch of the sponsors are definitely going to have some serious focus there just because it's such a kind of important area. And I think that what's going to happen is basically over time it's going to become more and more seamless what chain you're operating on. And there's kind of a lot of work going on to that effect already and I think that's going to continue.
01:24:12.290 - 01:24:32.726, Speaker C: Yeah, I agree regarding bringing state between them. So that'll definitely get interesting if that's made seamless. So if you want to do something on optimism, but then you realize there's something else on Arbitrum that you need to use, you can go there, do that and then bring it back. Having that low cost and fast and still verifiable and correct would be quite interesting to see.
01:24:32.908 - 01:24:35.800, Speaker B: Yeah. And I think at some point.
01:24:37.770 - 01:24:38.098, Speaker A: I'm.
01:24:38.114 - 01:24:58.320, Speaker B: Pretty sure Connect is going to be in a number of events here. I think they're probably the farthest along right now at kind of like designing, for example, workflows where sort of a user is kind of interacting with adapt on one chain and adapt on another chain in kind of interesting ways.
01:24:59.250 - 01:25:30.600, Speaker A: Yeah, I think another one is hot protocol. I know that some projects are kind of building their own custom things. Yeah. I think the space of cross chain interrupt just basically roll up interoperability is underexplored. There's due channels or there's simple market making contracts to deal with fast withdrawals. But I don't think people have really fully explored what's possible yet.
01:25:34.430 - 01:25:35.482, Speaker B: Thanks very much, guys.
01:25:35.536 - 01:25:36.540, Speaker A: Appreciate it.
01:25:36.910 - 01:25:37.660, Speaker B: Absolutely.
01:25:39.310 - 01:26:02.350, Speaker A: JC, your hand is up. Yeah, hi. I just wanted to say that is this just focused on one solution alone or just we can do like Zapper with OBM optimism. Yeah, you can do that. Go nuts. Yeah. Put all things together.
01:26:02.350 - 01:26:15.904, Speaker A: There should be a best Lego blocks hack. Just go nuts. Honestly, don't go nuts for no reason. But if you find a way to get multiple things worked together, then please try it out.
01:26:16.102 - 01:26:21.200, Speaker B: We didn't end up doing it, but we almost did a kind of joke prize of most layers.
01:26:24.600 - 01:26:27.910, Speaker A: Yeah. Oh, man. Yeah, I heard some.
01:26:34.600 - 01:26:35.748, Speaker C: Liam, I think we lost you.
01:26:35.754 - 01:27:02.616, Speaker A: There is like direct ledger channels and layer for a second. Yeah, sorry, my bad. I was just saying recently someone at Consensus was saying layer two is roll ups. Layer three is direct state channels between two people. Layer four is virtual channels. And it was just really ironic because the company was working at it was called L Four for the past little while. And so now we're coming full circle.
01:27:02.616 - 01:27:18.724, Speaker A: L Four is the next major scaling revolution. Okay. Anyway, sorry, Shannon, a bit more about some of the technical pieces of cross chain interoperability that could be hacked. There's quite a few actually. Harry, do you want to tackle that one and I'll see you to spirit back for like a minute or two.
01:27:18.762 - 01:28:26.728, Speaker B: Yeah, totally. So I think kind of the very first thing that kind of people are already focused on and this is kind of where I think Connect and hop and I know Stellar also have been kind of putting a lot of focus is sort of interoperability of fungible tokens. So you have an ETH token on one chain and an ETH token on another chain or Dai or USDC or what have you, and you want to be able to sort of migrate your tokens over. These are different tokens that all represent the same asset, but they're on different blockchains. And so kind of a variety of ways of basically kind of making the experience as seamless as possible of kind of having the token on one side and then moving the token to the other side is kind of like where people are starting, but it only gets crazier from there. So kind of one sort of natural extension to that question is, let's say you have kind of tokens in some smart contract on one chain and you want to have that smart contract itself interact with a smart contract on another chain. And maybe kind of the contracts both hold fungible assets and they want to interact in some way.
01:28:26.728 - 01:29:00.020, Speaker B: So I think that kind of like the table stakes basically for sort of interoperability is being able to kind of do nice things with fungible tokens in order to kind of make the user experience nice. But that the frontier is going to be basically kind of taking the core ideas from that and applying it to kind of more complicated situations where it's not just sort of an end user who owns Dai on one. Chain who wants to also own it on another chain where kind of contracts and multi sigs and kind of DEXes and stuff like that is involved.
01:29:07.620 - 01:29:30.500, Speaker A: Yeah, I would recommend checking out connect. I put the link in the zoom also. They talk about this a bit. That's super helpful. Cool. Yeah. I guess we've been going for a little while now.
01:29:30.500 - 01:29:56.450, Speaker A: Thanks everyone, for sticking around. Thanks harry. James, also, all of your time, is there any last thing maybe we could end with one idea that each of us three maybe one specific idea. Think about it for a second, but maybe james, do you want to go?
01:29:59.300 - 01:30:03.888, Speaker C: Sorry, I partly broke up. So one idea that we've got for the hackathon.
01:30:04.064 - 01:30:06.310, Speaker A: If you were hacking, what would you build?
01:30:07.640 - 01:30:52.592, Speaker C: Probably what I'm working on. But basically the interesting application of I should say the thing I'm working on is maybe the lower level tooling, but maybe an application of that. So I had a list somewhere, if I can find it. Basically ways you can. When you batch multiple transactions, what advantages do you get in different circumstances? And I'd probably try explore around that. Like to say, if I needed to do an AirDrop, how could I do that all in one transaction with one single signature and a bunch of data? That would be kind of one application that uses what I'm making now, airdrops and other things. Like, say I want to do a sequence of transactions just from my wallet to a bunch of other contracts.
01:30:52.592 - 01:31:11.720, Speaker C: I could prepare that and then send it as one. So the tooling around that, on the client side, getting that nice and smooth for specific use cases. So you might just have a tab for Airdrops, a tab for change transactions and so on. So let's just say that a smooth client side to do multiple transactions.
01:31:15.770 - 01:31:53.970, Speaker B: Happy to jump in next? Yeah, I think for me it's probably I don't know, especially after kind of talking through this, I think kind of the area I'm most excited about people working on is Interoperability. There are all sorts of really hard problems at helping people kind of understand. What does it mean? Like the example that Liam gave, you have two ETH on Ethereum, and then you deposit it into a roll up and then it disappears. And then you have to switch over to this other network, and then suddenly you see ETH there. That sounds pretty scary. And that's optimism. That's arbitrary.
01:31:53.970 - 01:32:20.000, Speaker B: Any l two scaling solution these days? Because all of this infrastructure was designed with kind of the idea in mind, basically, of like users were going to be on a single chain. And so kind of really kind of exploring and expanding how we kind of conceive of multiple chains. And that's a little vague, but I think it's an area that needs a lot of thought and there's a lot of area to run with that and build. Awesome stuff.
01:32:23.890 - 01:33:05.194, Speaker A: Yeah, totally. I totally agree that I might normally have answered something around that, but since you put that answer, I think maybe what I would do is I would probably find something that I really want to play around with that's a protocol level chains. I'd really want to play around with, like EIP 1559 and deploy a roll up on testnet or a main net that. Actually implements that thing and then try and get a bunch of people in the community to actually use it. And let's just get legitimate data on how that performs for real as opposed to in theory. I just think that would be a cool thing to do. And you could launch it.
01:33:05.194 - 01:33:33.810, Speaker A: You'd have a landing page for deploying into the experimental ethereum. You could even have a cool name like Experimental Ethereum and get people to add it to their MetaMask. It'd just be a fun thing to do. Creating an actual product people can play around with that uses the scaling stuff, I think would be a great end result. Cool. Just one final question. I'll just answer quickly.
01:33:33.810 - 01:33:58.794, Speaker A: Does optimistic OVM have a bridge? Yes, there is a bridge. Individual DApps have their own bridges. I think same will be true for Arbitrum. And then optimism will also offer a bridge. There is a bridge now, but the link is not public for Mainnet, but we were to put up one in the hackathon for testnet probably tomorrow. But anyway, thank you, everyone. This has been super fun.
01:33:58.794 - 01:34:06.874, Speaker A: And, yeah, I hope you have a great rest of your whatever times in your morning, afternoon, evening. All right, take care, everyone.
01:34:07.072 - 01:34:08.060, Speaker C: Thanks, everyone.
01:34:08.830 - 01:34:10.070, Speaker B: Thanks for really attending.
