00:00:07.050 - 00:01:03.982, Speaker A: I'm Debbie and I lead Developer Experience Outlet Protocol. And today I'm going to go over a bit of our SDK V Three, as well as how you can find resources to build. And I do want to say we're really excited to see what projects you're building. And for the lit specific prizes we are only giving out for folks building on LIT's newest SDK, which is in beta, which you can see from our docs on that top header banner. And so jumping into it, what is lit? Lit from even just this overview section here, you can see it says Lit Protocol lets you create and manage distributed cryptographic key pairs for condition based encryption and programmatic signing. A decentralized key management network. Lit can be used in place of centralized key custodians and other key management solutions.
00:01:03.982 - 00:02:48.530, Speaker A: So what does that actually mean? Some of the core use cases of Alit are decentralized Access Control, where you're able to set access control and then encrypt content, where based on those access control conditions someone can decrypt that content. Or on that programmatic signing piece you're able to set some condition saying okay, I want to be able to sign, or I want someone else to sign on my behalf if these conditions are met. So being able to use let's Network to be able to do that, and that's through what we'll call programmatic signing or through our parallel key pairs and Let actions. If you want to learn more about that, you can see within the Docs page here decentralized Access Control. So just a higher level concept view of what you can build with lit in terms of decentralized access as well as on that programmatic side, being able to set up account abstraction. And then one of our newest features which I'm really, really excited for folks to build with, we do call it Claimable Keys, which is essentially you're able to determine if derived keys so that the public portion of the key pair is known before creating the full key pair. So a use case with that is you might want to send, want to create and seed a wallet for someone with some amount of asset.
00:02:48.530 - 00:03:53.590, Speaker A: Let's say you want to put like 0.1 matic or you want to put the testnet token in there, you're able to kind of get there. They're able to come onto your platform, input their Auth type so that might be email, that might be SMS, and then be able to generate a claimable key. And then after that generation process, they're able to come back onto the platform and then claim that wallet. So the claiming process would be associating their Auth with this public key pair. And then on the Lint network side, fully connecting that through saying okay, this person now has ownership over this key, they have now claimed it is theirs, as well as programmable signing. So setting conditional signing automations, as well as being able to set up MPC Wallets, where a programmable key pair is essentially an MPC wallet.
00:03:53.590 - 00:04:54.570, Speaker A: And MPC part is utilizing LIT's Network, which is a multiparty computation network, and then a public private key pair is the wallet component. So how you would utilize lit let's go into this installation side. So right now, our V three is in beta. So be sure to, when you're importing it, either this is a general import or on server side, through the node JS, you're actually doing this tag where you're doing version three. I think now it's actually not just two, it's 5305 or above. On the server side, you'd be importing the lit note client node JS package. And so one thing to note is, for general purpose use, I think Lit Note Client will fit most use cases.
00:04:54.570 - 00:06:18.340, Speaker A: We do have a mono repo for our SDKs. So a lot of times, if you need something a bit more complicated or you need something more custom, please go into GitHub as well as let me pull up actually our JS SDK API documentation for Y'all. So you can see what this layout is. So we have these modules where we have the JS SDK, and underneath that we have the Access Control Conditions package, auth browser, auth Helpers BLSS SDK Core Crypto. So if you have more unique or advanced use cases, be sure to look through here to see what you need to include in your project. So with the installation, you'll import the 30 package or above, and then make sure that when you're connecting to the Lit Node client that you're passing in the lit network as Cayenne four, V three, that is the only network that is supported. And so make sure that that flag is added in.
00:06:18.340 - 00:07:33.040, Speaker A: And then we have different helpers on how do you authenticate through Lid, either through OSIG or through session signatures. Be sure to read these part of the docs on getting that set up, depending on what your use case is. And then for Access Control, I actually want to walk you all through a demo or a code repo that I made for using Access Control, where if you've been with lit since Sckv one, sckv two on Sckv three, if you've been with us for V one or V two, we have changed how encryption works. So encryption now is what we call ID encrypt, and the usage of it is a little bit different, where we don't have symmetric keys anymore. We have a different way of interacting with the node. So there are different calls. So let's actually jump into an example.
00:07:33.040 - 00:08:43.890, Speaker A: And this will all be linked off of LIT's page on ETH global site for ETH Online. So be sure to check that out as you're going along with this video. So you can go into my GitHub, which I'm Debly, and then to get here, go to my GitHub Debly. You can find this on my homepage IPFS, Lit. And make sure that you're actually on the lit SUV three branch. So we're on the SQV three branch where this example has the most up to date usage of ID encrypt. And so from here, some basics is you'll need to set up a project with infura where you'll need your project ID and project secret, as well as making sure you're importing bullet node client version 30 one or above.
00:08:43.890 - 00:10:01.714, Speaker A: And then within the setup page where you can find this within, actually the lit TS or JS file is setting up how do we use lit and setting up making sure that the network is cayenne and then connecting the lit node client, which is necessary for interacting with the lit nodes in general. So having this async and wait is really important here, so don't forget that. And then in this example, we just do like a fraction of one ETH as the access control condition. And what the encryption looks like with ID encrypt is we get an auth SIG and then we call encrypt string with that data to encrypt. And in this example, it's a URL string passes the chain Ethereum. We have that auth signature that we generated previously, as well as our access control condition, which is just that fraction of ETH. And so what gets passed back is this encrypted object.
00:10:01.714 - 00:11:20.250, Speaker A: So for lit encrypt string, it'll pass back a ciphertext and a data to encrypt hash. So just like the encrypted hash, as well as the symmetric key from v two version of using the lit SDK, you also need to save both of them because you'll need both to decrypt. And then for a decryption function of string, it's pretty straightforward. You need to pass in access control conditions ciphertext, which is what we've received from that encryption step, as well as that data to encrypt hash we received previously, and then an auth signature chain, which in this example is ethereum, and then also pass in a lit node client. Why we pass in the lit node client is just this function is a bit more closer to functional programming, where you also do pass in that function or object. So make sure to include that, which is just a LitNet climate loop initiated for using in this project. Yeah, and then that's pretty straightforward.
00:11:20.250 - 00:12:23.998, Speaker A: And so from this example, you should be able to encrypt and upload to IPFS and then when you're decrypting, you should be able to see that file on display on this site. And if you want to check out more examples, we have another example that's actually within the lit JS SDK branch v three. And this is another example of just doing a simple encrypt and decrypt of just a string where you could change the string and you can see from base of the input on the left hand side kind of the code and output on the right hand side. Yeah. So excited for Y'all to use ID encrypt. It is significantly faster than our previous encryption on Serato and Jalapeno, which are also the older testnets. And so encryption and decryption now should take about two milliseconds, whereas before it took up to 100 milliseconds.
00:12:23.998 - 00:13:36.260, Speaker A: And so this is a really big improvement on just like speed and node interactivity. If you want to do different types of access controlled conditions, be sure to check out types of conditions as well as certain, like more specifically for EVM or other chains. It's all documented here. And then if you still have questions, please go on Discord and ask us there. Then before I jump into claimable keys, I'm going to actually talk a little bit about Programmable Wallets. So, Programmable Wallets are MPC wallets that have an additional layer of usability that's built through the lit platform. So you might be able to Auth in through a web two Auth method like Google or Discord or Apple Passkey, which is all set up within lit system.
00:13:36.260 - 00:14:49.416, Speaker A: And if you want to do your own setup, we have more tutorials and tooling for you to set up your own relay server to do that. So programmable key pairs, they can be used to sign transactions on blockchains or state machines because the underlying algorithm is ECSDA for digital signatures. And we have a lot of different methods for creating wallets on EVM and Cosmos based chains. And then for that conditional logic of Programmable Wallets, we have a concept that we call Lit Actions, which is the application logic that each programmable key pair should follow. This is useful for defining signing automations, handling Auth, or generating conditional proofs because the let Actions is where you might say only sign if these certain conditions are met, or only sign if this is true. Or we have these Auth methods. So you can check out these different use cases as well as on the side here we have different Auth methods that are supported.
00:14:49.416 - 00:15:44.002, Speaker A: We support address Lidactions web authent discord Google, as well as one time passwords. So one time passwords are email or SMS login. We had that supported through stitch and then minting PKP. So Minting a forbidden key pair. You can go on our network Chronicle and go and get testnet tokens and then Mint PKPS off Chronicle. And then moving on from that, I'm going to go a little bit into claimable keys and what that is. So claimable keys is what we'll refer to as also HD keys, so homogeneous derived keys.
00:15:44.002 - 00:16:59.226, Speaker A: And so when you're creating a new programmable key pair, it's now possible to deterministically derived keys. So the public portion of the key pair is neoed before creating the key. And these keys work off a set of root keys which combined with the key Identifier, allow the deterministic generation of new key pairs. Be sure to go here for the vocabulary around how do you use claimable keys. So essentially you might be able to based on Auth like email or something else derive the public key for someone's email and then when they're coming in, they can claim that account that's associated with their email. And so I want to go over a small actually demo here around using playable keys. Good, okay, so I'm going to go over a short playable keys demo.
00:16:59.226 - 00:18:15.300, Speaker A: Mainly, this will be all on the terminal and I will leave the building out the front end for you. But we're going to go through the process of creating a claimable key and then claiming it by looking up the programmable key pair and then linking our email through that Auth. First things first, where can you find this demo? Let's go on the search right now where we can actually find it through the lit protocol repo here or feasible, so we can find it here at the claim key. Devonode JS I'll also link that within the Ethanline kind of resources for lit. And so all the code is here. One thing that is noted is that you will need to create a Stitch account and get a project ID and a secret from that Stitch account. And then from there you should be able to do the same exact demo that I'm doing.
00:18:15.300 - 00:18:57.548, Speaker A: Okay, so jumping in, we have our Stitch Project ID secret and then the Lit Relay API key. Be sure to follow. Oh my God, I can't talk today. So you can find the form on lit site to be able to request a Relay API key. If not, feel free to jump on in, discord and ask about that. So there's some setup here. I'll go through a bit of the setup parts and then go through what's specifically around claimable keys and how to use that.
00:18:57.548 - 00:19:55.020, Speaker A: So this first part, we're going to initialize the Stitch client and create the Stitch client. So you're just passing in your project ID and secret. And then from here, this is actually just taking in a prompt from that terminal command line where we're just asking for Selen's email, so being able to pull in that email that we're going to associate or create that claimable key for. And then once we have that email, we're actually going to call the Stitch login or create, which is actually just creating an Auth for that. So we're passing in the email and then that actually will prompt for that email, that'll prompt them to check their email for a code. So that's a one time password code. That's what OTP here means is one time password.
00:19:55.020 - 00:20:52.020, Speaker A: And so then we input that code to confirm like, yes, I have access and authorization to this email. And then from that we call the Auth response where we're getting the authentication response, where that method ID is that email ID we've received. And then the code itself is the one time password code, which is, it is usually a string of numbers of like six numbers. And then for the session duration, I think generally it's set to be five minutes. So someone has about five minutes to get that authentication code and pass that in. And then we have session response which we call the Stitch client to get that session based on that user ID. And then as well as we get a session status.
00:20:52.020 - 00:22:01.200, Speaker A: So the session status we're actually calling Stitches client to authenticate based on that Auth response session token. So that's just the stitch side setup that we'll need. And then on more of that lit side, we're going to jump into what we're building here where we have the lit node client. And for this we're doing strictly node JS. So we want to import the lit node client node JS for other usage, you might just be importing the lit node client and then we have the lit network make sure that that is included in there, especially because we're using the v three SDK. So then we connect our lit node client which is essentially we're connecting to the lit nodes and we want to wait for this connection to happen because that's how we'll be generating these lit specific. Parks is calling the lit nodes and then from there we initialize the lit Auth client which will help us actually generate a program key pair.
00:22:01.200 - 00:22:59.740, Speaker A: So there we go back to our session and we're calling Stitch in order to get a session. And we're passing the provider type, which I think in this case is the Stitch OTP. And then we have our user ID that we've generated from previously from that session status and then the app ID which is actually just the project ID when we created that Stitch project. So from there we call Auth method to get the Auth method. And from here that jelly is like email is the Auth method. So we're just passing in for the access token that session JWT that we got in the session status. And then this line actually here, this public key.
00:22:59.740 - 00:24:19.250, Speaker A: So this is actually where we are calling the to get our public key, which is that public key generated from LIT's end in order when we're setting up claimable keys. So session compute public key from Auth method pass in that Auth method. And then from here we have kind of two ways to cross check that we've created the correct public key as well as that public key once we've authorized in that is associated to that owner. So that email address. And so here where we do the claim flag. We're actually saying like, okay, can I see that claim response for that public key to know that it has been generated. The second one is a lookup which is we want to see if based on that public key, let's look up that programmable key pair and see that match that public key based on the email I'm passing in.
00:24:19.250 - 00:25:40.744, Speaker A: So let's take a look at that. Let's start with the claim process email. I'm going to enter in my lit email here. Okay, sorry, that my mistake. I missed out an M on there's. Okay, so then we have from here we have the lit compute key, local key, public key computed. Great.
00:25:40.744 - 00:27:20.520, Speaker A: And then we can see from here the JWT body that Project ID. And then what time is started, what expiration, as well as the stitch endpoint or what we call it to Stitch Project ID. Okay, so then we're going to actually check our claiming or let's check if that PKP is matched up and put the screen we're going to do a lookup here. We will have to authenticate in again on this cup. And so this account I've been testing all day, so these are all just generated throughout the day as I been testing it. And we could see we have many different public keys. And so from there, I would encourage you to test this on your own as well.
00:27:20.520 - 00:28:02.640, Speaker A: And I would love to see folks building with claimable keys, especially. There are a lot of different use cases that we've thought about at lit where you can kind of send wallets to people much more easily, especially folks who might not already have a wallet or to be able to create different kinds of bundles with claimable keys. So, yeah, excited to see what y'all build, and if you have any questions, please jump in. Discord. We're active on Twitter as well. All the links should be updated within ETH online page. And I hope to see y'all out there hacking.
