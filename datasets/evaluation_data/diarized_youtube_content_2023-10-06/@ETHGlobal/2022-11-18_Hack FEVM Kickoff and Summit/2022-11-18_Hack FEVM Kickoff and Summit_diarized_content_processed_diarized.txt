00:09:26.990 - 00:09:52.938, Speaker A: Good morning, good afternoon, and good evening, everybody. My name is Kartik. I'm one of the co founders of ETHGlobal. And I am super excited to welcome all of you to Hackthev. Thank you so much for joining us on ETHGlobal TV. This is what we're going to be using this entire weekend for all the talks, workshops, and all of our demos at the end on Sunday. So if you are using this for the first time, I really encourage all of you to sign in and say hi.
00:09:52.938 - 00:10:21.742, Speaker A: You can chat with us. We are monitoring this chat. If you ask a question, I'll be able to look at everything and answer this stuff directly on the live stream. And for everybody that's going to be participating on equivalent TV on this chat, we'll also be receiving a PO app for being part of this event. All right, let's get right into it. This event is brought to you by E Global. And for those of you who are joining an E Global event for the first time, we're an organization with a very simple mission.
00:10:21.742 - 00:11:10.770, Speaker A: Our goal is to onboard thousands of developers into the Web Three ecosystem. And we do this by running hackathons and summits, and today and this weekend is going to be no different. So let's talk about what the next 48 hours are going to include. We have an incredible summit talking about all things filecoin virtual machine. We're going to bring on a lot of people who have been behind the scenes, making sure that this runtime and this whole new innovation is ready for all of you to use and make really amazing things, and also to get feedback so they can improve things. And we're going to bring on all these speakers to talk about what is possible and where things are going. And then in the same time, we're going to be kicking off our first ever Fevam hackathon.
00:11:10.770 - 00:11:50.880, Speaker A: So let's go right into all the details about this hackathon. This is the world's first ever Fevam hackathon. We're going to be giving everybody an early release on how things are going. You'll be able to chat with everybody to understand how to best use this runtime and build amazing things. And the best part about this thing is that this event is already huge. There's over 400 hackers from 70 different countries participating, spanning 19 different time zones. This is an online weekend event by ETH Global, which means that all of us will be pretty involved and staying up for the next two days.
00:11:50.880 - 00:12:40.350, Speaker A: And we kind of put everybody on a map to see where they were all coming from. And it's super exciting to see representation from six different continents. So thank you so much for joining us for this incredible weekend, and I can't wait to see what all of you built and meet all of you and say hi to all of you on Discord. All right, let's go right into it. Not only do we have 400 plus amazing developers trying to build things on FBM, we have 22 amazing mentors who are going to be here all weekend making sure that you get all of your questions answered and help to really do anything that you want to do as part of building your project. And to top it all off, we're going to be giving $50,000 in prizes and I'm going to be sharing all those details with you shortly. I want to really thank the IPFS and Filecoin teams for making this event possible.
00:12:40.350 - 00:13:25.642, Speaker A: They're going to be here making sure that you have the right support and you all have a really positive and amazing experience in building incredible Web three projects. So let's talk about this weekend, lots of things to cover from our end. We're going to talk about how team formation works, how you can get help, all the prizes you can win. We're going to talk about judging a submission, and also after all of that, we're going to run into the summit piece and kick off with our first set of talks. So the most important thing here is that everything that we're going to be doing over the next two days is going to be on Discord. So please make sure if you are a hacker, that you have gone to your dashboard on Ethglobal.com and connected Discord.
00:13:25.642 - 00:13:54.502, Speaker A: Connecting Discord will give you access to all the Fevin private channels. These channels are only available to people that are participating at the hackathon. So if you are a hacker, you will have access to these. If you are a mentor, you will be able to see this as well. And you get to ask questions here and see everything that's happening on Discord. If you want to just confirm if everything is right, you should see that hack Fev category on your left sidebar. So just quickly check if you can see this.
00:13:54.502 - 00:14:52.962, Speaker A: And this is where everything will be happening. We'll be making all the announcements, covering everything around, judging and all of the prize info and mentorship is right here. There's also a dedicated channel for getting help, so you can just click on the Mentorship Help channel and ask any questions and we'll be there to answer all of these things for you and clarify anything that you may be confused about. And also we'll be giving and sharing a lot of calendar invites for some important talks and workshops and things like judging and submission deadlines. So don't worry, even if you are currently sleeping, which you want to get to hear this, you'll know exactly when things are happening and they'll be normalized for your own time zone. And the website is our source of truth, which means everything that's happening here this weekend is listed on the website down to the minute and whatever the website says is what's happening. So if things are running behind or something changes, which it won't, you can check out all of that directly by heading over to the website.
00:14:52.962 - 00:15:21.620, Speaker A: We really want this thing to be asynchronous and as efficient as possible. We have 70 countries and 19 different time zones. So we're going to try to make sure that you are at your best set up to take advantage of this entire weekend. And the only synchronous part here will be Sunday judging which I'll talk about to make sure that we can all see and enjoy what everybody built. And as a reminder, the website is Fevm eatglobal.com or FBM ethglobal.com also works.
00:15:21.620 - 00:16:14.580, Speaker A: All right, so how does the hackathon work? So this is a unique event for us because this event is a large introduction to hundreds of you to really explore what this virtual machine can do. And as part of that, the most common question I got was what can I do here and how is this different than all the other events we've done? So I'm going to cover all of that in a second. So officially the hackathon has kicked off, which means you can start working on your projects now and you have 48 hours to build anything that you are interested in and get to demo and present that to our judges on Sunday. You can work on a project with a team. If you are working with somebody on a team, your team can have up to five members and it is also totally okay to work on your own. You don't necessarily have to have a team. You can have one person on a team or two, three, four or five.
00:16:14.580 - 00:16:47.406, Speaker A: The submission deadline is 12:00 p.m. Eastern, Sunday, November the 20th. In relative time, that is 47 hours and 40 minutes from me saying this sentence. So we'll be giving ample reminders just to make sure nobody has any confusion around the time zone normalization. But you have 48 hours before everything is due from a submission standpoint. Now, let's get to the question that we've been asked the most. What can I build this event is to highlight that.
00:16:47.406 - 00:17:46.234, Speaker A: The most important thing piece here is that for this event Fem is EVM compatible. You get to use everything from tooling to libraries to your dev tools to existing code all out of the box and really deploy things that take advantage of storage as a primitive now with solidity and smart contracts and that gives you access to a lot more new things that were previously not possible before. You have a lot of new, unique, interesting applications. On decentralized compute you can do a lot more interesting integrations. With Ethereum you have a lot of stuff that you can do that is specifically native to filecoin on retrieval markets and storage derivatives or replication workers and data availability, or just renewing contracts based on conditional logic. You can automatically now make cross chain applications possible that take advantage of the filecoin virtual machine and different chains. And there's a lot of stuff around data dows and integrating with content and data to be now programmable.
00:17:46.234 - 00:18:36.734, Speaker A: There's a lot of room here for really creative and impressive and interesting ideas, especially that now that you have EVM compatibility and you get to use a lot of things that you already know to how to do on Solidity and on Ethereum. And the big most important thing to remember is that experimentation is okay. This is a 48 hours event. We know that you can't do too much in this short time, and that is totally expected and known. And we really want to encourage all of you to start small. This is okay for you to have a large idea and only get halfway through implementing some of those pieces that you wanted to do on Sunday or by Sunday. So don't try to finish too much and compromise on anything from sleep to rest to just making sure that you are well suited to really function and do things that you're excited about.
00:18:36.734 - 00:19:33.438, Speaker A: And because you're also going to be trying this thing for the first time, the goal is to really explore the possibilities of ideas and really make sure that you can see what can be possible and use now after Sunday to really continue building those projects. So starting small is also okay. If you have a grand idea, you can just aim to finish a few features for it over the next 48 hours. And one other important thing here is that we really want to make sure that FVM gets better. And Fathom is an exciting runtime for people to build cool integrations, leveraging storage. So one of the other highlights that we want to bring up here and make sure that we get to prioritize is that if you think something could be better, you get to actually actively improve the protocol and the runtime. And the feedback that we're going to get here helps everything get really even better for the next set of builders.
00:19:33.438 - 00:20:21.986, Speaker A: And if you are interested in doing something more than just playing with this over the weekend, there's also an early builders program. You can see that on the Fem filecoin IO website. So if you're interested in taking a project further, there's direct support and a next batch of builders program cohort that you get to be part of to get direct feedback, advice and integrations and just work with amazing people that are building similar things on the same platform. All right, so let's go into some of the key other pieces. Rules and Criteria so this event is going to be slightly different as part of being an equal event. The rules and criteria are fairly straightforward for all of our events, which is everything that we're going to be doing must be done from scratch. And you cannot build on a preexisting personal project.
00:20:21.986 - 00:21:19.746, Speaker A: We want to make sure things are fair to everybody that's participating from across the world. So adding things to something you've been doing for months or weeks or even days in your own free time on a personal project makes things kind of hard to really assess and keeps things a bit unfair. However, we are going to be making one exception here for this hackathon, and that exception is that if you are trying to port one of your existing solidity projects to be compatible and run on Fem or Fevim, you get to do that and that is allowed. And that means we get to really see how compatibility works here. We get to explore how we can do interesting integrations between two blockchains or two or more blockchains, and that piece is allowed. So if you are interested in porting something that you've done before to entirely this new runtime, that will be allowed. And there may be some education and nuances here.
00:21:19.746 - 00:22:08.870, Speaker A: So if you are in this category, just send us a ping and we'll be able to clarify this for you. The other piece I want to be really cognizant of is that only RSVP attendees can win prizes, which means that if you are working on a team, please make sure that your team members are listed under your team's section on your dashboard. If they do not show up and if you win a prize, then we will not be giving prizes to anybody who is not listed as a team member. So you have today to just really make sure that all that is ironed out and that all of your team members show up on your dashboard. And if you have any other questions that we haven't addressed, you can ask them directly here on Apecglobal TV Chat. And I'll be able to look at this right now or ask us this on Discord or email or any other way you can contact us. We'll be monitoring all those channels.
00:22:08.870 - 00:22:37.370, Speaker A: All right, let's talk about judging. How is all of this going to be set up? So the most important thing here is that submissions are due on Sunday, 12:00 p.m. Eastern. That is in relative time, 47 hours and 30 minutes from now. This will all be done through your hacker dashboard. So if you just go to Eighthglobal.com, you'll be logged in and you'll be able to see where to submit.
00:22:37.370 - 00:23:26.958, Speaker A: You'll see all the information that you need to do. And once a submission is done from your side, you will have to go through the main judging process. The main judging kicks off immediately after submissions are due, which means that as you are submitting, you will be told what the next steps are. And we'll do a first come, first serve basis for assigning a judging room to all the teams. You will get to present what you built to an amazing set of judges. And then in parallel, all the prizes will be judged asynchronously from the Protocol labs and the IPFS team. And if they have any questions, they'll be able to ping you directly on Discord, but project judging for any prizes is going to be asynchronous and in the background while the main judging is going on.
00:23:26.958 - 00:24:13.594, Speaker A: Now, here is how the judging works. After you submit your project, you'll be told to get to a Zoom room where you will be assigned a room for a judges who you will be presenting to. You will get seven minutes in total to present to one of our judges, and that is broken down into three minutes for questions and four minutes for a demo. You are allowed to make a live demo happen, which means you get to share your screen directly on Zoom and demo what you built. You will still get four minutes. We'll cut everybody off on the four minute mark because there's a lot of projects that we have to do in a really short amount of time and then the next remaining time will be moved over for Q A. We really recommend that you record a video of your demo instead of trying to do everything live.
00:24:13.594 - 00:25:06.462, Speaker A: If you get the time, try to just quickly record a screen share of your demo up to four minutes and submit that as part of your submission process. Because if something goes wrong or something takes time, or if you're trying to do some main net transactions on a blockchain that's going to take a little bit longer. You want to be cognizant of the fact that you still have four minutes in total. And if something goes wrong, at least this backup works really well for everybody else to also see what you did and spent all this weekend working on. So really don't do this last minute. If you're listening here, I really encourage you to at least take 1 hour in total to make sure you have all the stuff for submission in the form worked out as well as a demo recorded as a backup. In case the live demo doesn't work last minute, all these details are going to be on your dashboard, so you don't have to worry too much about remembering any of this.
00:25:06.462 - 00:25:52.522, Speaker A: We'll be prompting with a lot of this thing from calendar invites to Discord messages to just your dashboard, really telling you what the next step is. The other important piece is that there's a lot of prizes that we're giving and I'm going to cover a lot of them in a couple of minutes. And when you are trying to win any of these prizes, make sure you select that you are trying to win those prizes as well and in that submission form, and only if you select that is when the IPFS and filecoin team will know that we have to evaluate your prizes. So if you forget that, there's no other way for somebody to know that you wanted to be eligible for a particular category of prize. So make sure that you do forget. Don't forget to check that box and do remember to check it. All right.
00:25:52.522 - 00:26:34.918, Speaker A: And of course, there's a lot of you here who are joining us for the first time. There's a lot of you here who are joining us from Web Two for the first time as a seasoned engineer. So I want to welcome all of you here and really kind of talk about what happens if this is your first time participating in this event. This event is designed to be friendly for everybody with any skill set. This has an intentional goal around onboarding a lot of existing developers into Web Three and we have amazing content and plans for how do we onboard a lot of beginners and also make this equally interesting for anybody who's been in this space for a long time. That means there's a lot of talks and workshops. Some of this has already happened, some of you already joined us on a lot of these workshops and brainstorming sessions.
00:26:34.918 - 00:27:36.974, Speaker A: Everything is on the website from the schedule. We're going to kick off a summit in about 1015 minutes right now directly and our goal is to make sure that you are as informed as possible and you get to learn about all the exciting things that are happening on the cutting edge. So don't be afraid to just jump in, learn about what's happening or join any of these talks or workshops or just simply ask questions. There's a lot of people here who want to make sure that you are successful and you are able to learn and get your questions answered. And also all this information is recorded which means that if you are in different time zone and if you want to sleep in ten minutes but you want to really catch the talk that's in 2 hours, you'll be able to watch that immediately on YouTube the second it finishes. And that means you have a 62nd delay in catching up on something after it ends. And all these things will also go be reflected directly on the website for this event, Fevm Eglobal.com
00:27:36.974 - 00:28:28.240, Speaker A: and you can just head over to our YouTube channel to watch anything that comes out of this weekend directly on Demand. And if you are still looking for a team, you can head over to find a team channel on Discord and reach out to all others that are looking to also meet other potential teammates and really work on exciting projects. And of course, there's so many of you from so many parts of the world, so don't forget to introduce yourself into the Hackfevum Chat channel. We're really excited to meet you and see what you're excited about and where you're coming from. And again, just to remember if you can't find a team, that's totally okay. If you want to work on a project on your own and use this as an opportunity to learn something or learn how to deploy something on Fevin for the first time, that is totally okay. You don't need a team to submit a project, you get to work on your own as well.
00:28:28.240 - 00:29:13.242, Speaker A: And in case you haven't seen this yet, you also have access to a tool on your hacker dashboard to find potential teammates from this event. You can look for people who are experienced in certain skill set. If you're looking for a front end engineer or a designer or a back end engineer or somebody who really knows smart contracts, you get to use this on your hacker dashboard to find other team members and contact them and see if they are also interested in working with you. This is a double opt in. So if you are looking to be found on this database, you have to go onto your hacker dashboard and check the box saying I would like to be contacted by others who are also looking for a team. So give that a shot. And we're also doing a team formation session shortly later today.
00:29:13.242 - 00:29:46.374, Speaker A: So just check out all of those details on the website. Now, the other couple of things are that this is a really tight weekend and there's a lot of things going on. So I want to make sure that you have opportunities to get feedback on anything that you are either stuck on or want to know more about or anything that you are trying to understand better. So we're going to be hosting a feedback session with the Filecoin team. This is tomorrow, 03:00 P.m. To 04:30 p.m. In relative time, this is going to.
00:29:46.412 - 00:29:47.000, Speaker B: Be.
00:29:49.050 - 00:30:08.634, Speaker A: Man, this is hard. 29 hours from now, 28.5 hours from now. And you get to come in, get feedback on what you're building. If you are trying to get some questions answered, you get to just hop in. And this worked kind of like an office hours. There'll be the people there to make sure that you are unblocked on anything that you're excited about.
00:30:08.634 - 00:30:41.554, Speaker A: And if you want to just show off what you've been building and just get feedback on how to make this even cooler, you get to do that right now. So check this out and you will be seeing all this stuff on your info center and all of our schedule website too. And lastly, we want to talk about the code of conduct. Even though this is an online event, all of our rules and code of conduct still applies to this event. And in short, please be respectful and harassment and abuse in any form will not be tolerated. All the rules are listed on Ecglobal.com rules.
00:30:41.554 - 00:31:25.654, Speaker A: And one quick thing to just note is that anything that you build is going to be solely owned by you. So all intellectual property belongs to you as a hacker. And we want to make sure that you get to maintain the full rights to everything that you're building. And if you have any other questions or anything that we can clarify, just ping us on email or discord or anywhere else you can find us and we'll be happy to answer those questions for you. And as a reminder, the website is Fab eatglobal.com that has everything for we're going to be doing the next 48 hours. All right, before we kick off with the Summit, I want to quickly talk about all the amazing prizes that we have and then I'll stop talking and get to listen to a lot of more amazing people talking about all the things that they've been working on.
00:31:25.654 - 00:32:13.158, Speaker A: So a total of $35,000 will be awarded for this event from the IPFS and Filecoin team. And to quickly talk about what these things are, let's go right into this. So there's a lot of prizes that you can win for just building cool things on Fathom. The grand prize for the best and the most interesting project will be taking in $6,000. And there will be two runner ups for the same category for the best and most innovative use, taking in $3,000 each. And then there are going to be ten recipients who will be winning $500, who are also going to be qualifying for the most innovative use of heaven. Then there are subcategories for how you can best check out what is possible and extend the use cases here.
00:32:13.158 - 00:33:12.050, Speaker A: So the best use case for lending and DFI will be receiving $3,000. There's going to be two winners here, and you'll have bonus points for also integrating any storage or retrieval market use cases. As part of this category, we also want to make sure that we get to do some cool experiments with data dows, and the best use of Fabin within a data dow will have two recipients winning $3,000 each. Then there's also a category for the best building blocks, such as building native DEXes or AMMS or other primitives that will be useful for others to build on in the future. And there's going to be two $3,000 recipients for this category as well. So these are all the amazing prizes, and we're going to disclose some more later on the website and on Sunday. So check out all this information on either your hacker dashboard or if you want to find out specifics about these prizes, on how you qualify the documentation or the specific nuances on what is and isn't allowed.
00:33:12.050 - 00:33:44.222, Speaker A: You can go to the event website and click on the prizes section and you'll be able to see all those details immediately. And finally, just before we kick off the summit, as a reminder, we really want you to pace yourself. I know this is the weekend hackathon, but do not work on something at the cost of your health or sleep. We really don't want this thing to be exhausting for you, and we really want you to have fun. We're going to be here making sure that you have all of your questions answered. And at the end of the day, this whole event is about experimentation and learning. This is the first large scale global event on Fathom.
00:33:44.222 - 00:34:25.898, Speaker A: We have no idea what's going to happen in terms of the cool things that we're going to see, and that's the best part. And we want to make sure that you get to try out these new things instead of treating this as a competition. This is not a competition at all. So with that, happy hacking, everybody, I will thank you so much for listening in. We're going to see all of you on our discord, and if you have any questions about the hackathon specifically, you get to ask these questions on Discord or on Ecobol TV. But I'm going to stop talking now and get right into our incredible summit. We're going to have the next few hours jam packed with amazing technical things that you get to do on the FBM runtime.
00:34:25.898 - 00:35:13.626, Speaker A: And this kicks off the Fevam summit. So an amazing set of talks here today. We have six talks we're going to go into. We're going to bring on Molly to give a keynote on what FVM is. Then we're going to have Sarah talk about the compatibility pieces of FVM and Fevam. We're going to talk about Glyph and Zondex on just how do you make tooling even better to make sure you are able to really build cool things quickly with John and Noah and Zach's going to talk about just what it looks like to program on Fathom and how you get to just go get started quickly. And then we're going to bring on a lot more people to talk about glacier dao LaGrange dao, and the bootcamp that we're doing to get all of you more involved into this ecosystem with Puja closing off today's summit.
00:35:13.626 - 00:35:28.694, Speaker A: So with that, I want to welcome our first amazing, incredible speaker, Molly, on stage. I'll ask Molly to turn on her camera and kick us off with this amazing event. Hi, Molly. How's it going? Going good.
00:35:28.732 - 00:35:29.522, Speaker C: Hi, Kartek.
00:35:29.586 - 00:35:30.934, Speaker D: Excited to be here.
00:35:31.132 - 00:35:34.680, Speaker A: Excited to have you. This is going to be exciting. 400 people.
00:35:35.210 - 00:35:35.910, Speaker D: Amazing.
00:35:36.060 - 00:36:22.774, Speaker C: Well, welcome, everyone. I know this is an exciting kickoff to the day and the weekend, and so pumped to share a little bit more about Falcon Virtual Machine, what it is, what you can do with it. I'm going to share a lot of my favorite ideas, the things I'm most excited about people potentially building, maybe in this summit, actually. So really excited to share that with you. But you have an awesome lineup for the rest of the day as well, to dive into even more depth and how to get started. I know we have some folks who are coming from the existing kind of FBM community. We have other folks who are brand new to this, so I'll try and fit both audiences, but you'll be getting even more layers of depth from other people kind of throughout the course of the day.
00:36:22.774 - 00:36:26.200, Speaker C: So give me a second. I'll share my screen. And we'll get started.
00:36:28.250 - 00:36:29.926, Speaker D: All right, anyone tell me if that.
00:36:29.948 - 00:37:47.634, Speaker C: Looks terrible, otherwise we're jumping into it. So for context, my name is Molly. I lead the PL engineering and research team at Critical Labs, which is building the Falcon Virtual Machine. So the core of all of the technology that then enables all of you amazing builders to write your own amazing smart contracts or new layers of programmability. And that's really what we're most excited for with Fem is bringing all of this on chain programmability, being able to act with Filecoin actors or bring any existing DeFi or lending or other contract over to the Filecoin network. This has not been available in Filecoin, so there's lots of latent demand for people to be able to kind of access and bring their own programs into Filecoin. There's a lot of opportunity as well to kind of use everything about computing that we know and love to improve, filecoin in all sorts of great ways automating, repetitive tasks, making sure that when people are wanting to store data that they can do so persistently over time without having to get reinvolved in the network to renew their deals after five years and making sure that as we generate new contracts, they're solving real problems for people.
00:37:47.634 - 00:38:55.400, Speaker C: We sit in Felcoin world at this really exciting intersection where people are both building kind of core infrastructure tools but also combining them with the new really exciting kind of like blockchain financial primitives that exist out there. And so I'll tell you a little bit more about some of the areas that I'm most excited about. But this is kind of like a whole new horizon of what's ever existed before and we're really excited for you to trail, blaze for others to follow and others to see. You are the Lewis and Clarks of going into this and we're really excited to see what you uncover. This is a super big deal for us because there's now all of these new applications that can possibly exist and it enables developers like you to customize what the Filecoin network can do for us. Besides storage and retrieval, there's all sorts of exciting things like data dows, liquid staking, lending, decentralized compute and a lot of other ones being able to replicate and repair deals over time. NFTs with built in, long term persistent and verifiable storage, just all sorts of exciting things become possible.
00:38:55.400 - 00:39:08.998, Speaker C: And you are becoming the builders of all of what Filecoin can do for the world. And we're really excited to have you. And I want to dive into a couple of these in more detail because some people are probably thinking like data dows?
00:39:09.094 - 00:39:09.802, Speaker D: What's that?
00:39:09.856 - 00:40:10.634, Speaker C: What does that mean? So maybe to explain a couple of the potential things that become possible here. First and most obviously is staking and loans. This is a super huge opportunity. We have not had a set of available VM primitives that allow people to build contracts like connecting our FalcoIn token holders with storage providers who are offering core services into the filecoin network. And so this can kind of bridge that gap, help token holders put their resources to work within the filecoin economy and similarly help those storage providers get access to FalcoIn liquidity so that they can make more and more storage deals to store useful data. Because in the FalcoIn network that requires them to put up collateral so that the network can ensure that they're offering those services really effectively. And this is a really exciting option as well, because those are their resources.
00:40:10.682 - 00:40:14.426, Speaker E: In a useful network, an opportunity for.
00:40:14.468 - 00:41:17.460, Speaker C: Share in their yield coming from that allocation. And so that's super exciting. Another really exciting thing that becomes possible with FBM is all of that information on how a storage provider has been behaving in the network in filecoin over time. What has been their success rate in deals, how much data have they stored, how reliable are they as a participant in this network? All of that information is available on chain. And so you can actually generate reputation scores for these storage providers and use that on chain data to power smart contracts that are making much smarter allocation decisions. For what interest rate should be required? What sort of collateral? Should be required from storage providers. All of those things you're informed with all of this rich on chain data to make really good decisions about how to allocate those resources and you can even do these, of course as collectives and DAOs and mining pools and all sorts of really exciting things.
00:41:17.460 - 00:42:40.222, Speaker C: And so we're super excited about people who are building in this space and also building primitives that others can build upon. As Kartik mentioned, there's lots of bounties specifically for people who dive into this area. Actually, one other thing to mention here, that's a useful primitive to hold onto. There's a way for storage providers to set the multi SIG of their kind of like the wallet that we call it an owner address, but it's the wallet in which they get block rewards from the network, which is separate from some of the other wallets they have for their workers who are doing work within the network. And so that owner address can be a multifig which can then be shared between multiple different parties and that can increasingly secure lender assets with other third parties to make sure that the storage provider is kind of guaranteed to behave correctly within that system. Another area that's super exciting, there's already a couple of groups that have started building in this space, but still a lot more opportunity to push forward is around perpetual storage deals. We know that lots of people when engaging with blockchain storage networks or even in hackathons like this, they really want to just store data long term, they want to write once and not have to worry about it.
00:42:40.222 - 00:44:06.378, Speaker C: Right now, FalcoIn network optimizes for about one and a half year storage deals, which is already pretty long compared to something like AWS, where you have a monthly bill you have to keep paying. But when we're thinking about long term assets, like all of the Neutrino data that CERN has put on the Filecoin network or the Internet Archive, which is storing data on the FalcoIn network, they kind of would really, like 1050, maybe even 100 year terms for the data that they're putting on. And they'd be willing to put up a lot more collateral as kind of an endowment for making those deals over the long, you know, Filecoin as a network really wants to put users in control of how they're replicating and also the longevity of the data they put in the network. And so a whole new plethora of applications can exist here that are building on top of Falcoin's verifiable storage, primitives but offering all sorts of long term deals. Lighthouse is a good example that's already started doing this long term storage and auto renewing of deals and making sure that you can kind of store once. But I think a lot more kind of like continued innovation in this space is super, super welcome, especially groups that are taking different strategies around how to kind of do long term endowments and things like that. And there's also the core building blocks that make this even easier for other people to build around.
00:44:06.378 - 00:45:25.074, Speaker C: Repair bots that monitor a specific CID, a specific content ID for data, and then automatically repair and make new deals with storage providers. If they ever see the number of Replicas drop or folks that are doing kind of data bounties where all you have to do is give it a CID and then anyone who stores that CID in a deal in the network can unlock the bounty kind of locked up within that contract. These are super useful and super exciting and building on top of proofs of storage that allow you to verifiably check. FalcoIn network does this for you automatically every 24 hours, making sure that all of the data that's been stored in the I think we have over 250, maybe it's 280 at this point. I'm having a hard time keeping track, but that's the number of petabytes of data that are stored in the filecoin network today. And all of that is being verified and checked every single day to make sure that the exact data that users desired to store is being stored persistently. And so this gives you a lot of benefits and also solves kind of a critical user problem, say, for other web3 networks, for NFT holders, for Archivists, for anyone who wants to hold around data for the long.
00:45:25.074 - 00:46:11.634, Speaker C: Term and so really excited for people to push in this area and make sure that Filecoin's mission to make sure that we have a robust foundation for humanities information is achieved. Next area is programmable storage tools. This is super exciting. And there's a couple of groups who have been pushing in this area. The example here is the onchain storage solution. So you can go and look up that website and see what they've been building. But these are things like multi protocol storage retrieval assurance contracts where you could, for example, put up an amount of collateral when a storage provider makes a deal guaranteeing that they are going to serve retrieval requests for that.
00:46:11.634 - 00:47:14.482, Speaker C: Deal over time, which then allows you to have very high even in this fully decentralized distributed network have a guarantee and a pot of collateral that you can slash and remove resources from if that storage provider ever doesn't behave correctly. To actually go ahead and start making those reliable retrieval requests, you can do data bounties now with Filecoin and a ton of other things. And so we're really excited for people to program directly in with Filecoin's actors to start making these things possible. There's also all sorts of interesting things in the kind of like financial DeFi space. So because the FVM is designed to be fully EVM compatible, the FVM design is actually a hypervisor. So we are running literally an entire EVM in the Filecoin network. You can bring ERC, 20 tokens directly into the phum network here and you can bridge those to token pools and other chains.
00:47:14.482 - 00:48:29.470, Speaker C: You can write L, two networks that are plugging into Filecoin to benefit from storage power or security. There's all sorts of things that are super common in the ethereum ecosystem which you can use those exact same bones and connect that over here to the fevum network. And so hopefully there's a lot of EVM compatible chains out there. This makes writing smart contracts that move between chains or kind of have intersections much, much easier because you can write exactly in the languages you're familiar with and the same contracts work in both places. Another super exciting area for FalcoIn, which is FalcoIn is this large distributed storage network. And maybe one of the things that people are excited about is decentralized access controls. We definitely know about the centralized model of the world, but how do you do this when you have many parties who are all collaboratively adding data to a kind of pool of data together? Things like Medusa, which is a threshold encryption network where you have a whole group of parties and they have to all kind of cryptographically agree before, say, access to a piece of data is unlocked.
00:48:29.470 - 00:49:50.890, Speaker C: That's a way of in a decentralized way governing access programmatically for who can access some sort of data collection without even those parties needing to be able to see the thing that they're governing access to itself. And so this is one of those you split up many different shards of a key and then if you combine together x many shards, you actually unlock a key and all of those shards only get sent to the person who's requesting and has proved that they deserve access to that next chunk of data. So this is super exciting and groups that make use of that can then do all sorts of exciting stuff. An example of that is data dows. And so this might be the thing where you're like, what is this? I've heard of dows maybe, but what are data dows? And I don't think this has been possible ever before in any other blockchain network. So this is a super exciting new area for folks to be building in. And the idea here, the concept is you have some decentralized group of people, maybe this is all of the editors of a Wikipedia page or maybe this is all of the people who are collectively adding new works to some kind of like archival Gutenberg library thing.
00:49:50.890 - 00:50:53.246, Speaker C: And so collectively they gather and curate useful data into a collection together. Maybe they govern and persist that data over time. So that involves pooling some resources to make sure that that data stays available collectively across their group. But then they can also do really interesting things where they have kind of this collective dow structure where they can govern that data set. Govern what data gets added, govern its long term persistence, but also govern its access controls, where you can potentially pay into that multi SIG in order to then get access to kind of the next chunk of data. So that's super exciting and then great, you have that shared treasury of all of the data that you're earning and you get to hop into using that for the long term preservation and growth or for incentivizing even better data to be added to the system. So we're super excited about that.
00:50:53.246 - 00:52:02.686, Speaker C: This whole cycle can very much be automated by smart contracts to actually kind of like hone the growth and monetization of data collections as well. Maybe last but not least, one of the really exciting things is actually being able to do compute over this FalcoIn data. That's step three of our FalcoIn master plan which starts by building the world's largest storage network which we have already achieved by far the largest centralized storage network onboarding and safeguarding humanities data which is work in progress, as we mentioned something like 280 plus petabytes of useful data and then bringing compute to that data and enabling all sorts of exciting applications. And this is a super exciting area to unlock. Now, this is one of the most valuable collections of open source data. We have kind of like an amazing set of data sets already stored on FalcoIn that are already available and accessible here. There's landsat, there's all, I don't even know, 100 million NFTs the million song data set, flickr commons, internet archives.
00:52:02.686 - 00:53:33.802, Speaker C: So there's a lot of useful data sets that are already stored on FalcoIn and many more that are coming. And so this is a really awesome opportunity for compute networks that want to kind of interact or compute over these large scale pieces of data and where you want to send the compute to the data itself instead of having the kind of like retrieval and bandwidth requirements of fetching all that data and centralizing it. And so this is already a really exciting area in web3 where you have multiple other chains storing the chain history of their blockchains in Filecoin. Obviously Filecoin is a decentralized verifiable storage layer that fits really well with what other blockchain needs for long term storage. And so I know Salana for example, is already storing and backing up their chain state to Filecoin which is really exciting but a great opportunity for more other blockchains to do similarly and find ways to do this kind of like more scalably and in ways that make that chain state accessible to other blockchains. So you can use Filecoin as a data availability layer as well, which is a huge need for especially layer two blockchains with validator size requirements. Right now we also expect that many layer two compute networks are going to optimize for different parts, some are going to maybe be very privacy focused, some very verifiability focused, some really focused on performance.
00:53:33.802 - 00:55:07.258, Speaker C: And this is using all sorts of kind of exciting new tools CKPS, fully homomorphic encryption, all sorts of things like that to help power things like machine learning pipelines and other things that are interacting with data stored in Filecoin. And we want to use this really to help power the entire DSI movement, especially around large scale data science where scientists can better collaborate using data dows on shared data sets. They can publish those and earn rewards for valuably processing this data and making it more and more useful for different groups and just in general accelerate this whole data analytics industry which is a huge, huge community and a lot of value to be created there for the entire world. And so one of the things we're working on really in support of all of this is making sure that we're scaling the FalcoIn chain as well. Hopefully all of the amazing smart contracts that you here are creating are going to add a lot of kind of additional activity to the FalcoIn network. And we have a next gen scalability solution called Interplanetary Consensus which is actually launching their testnet in like a couple of weeks but that's aimed to come in kind of post fem launch which will then kind of enable seamless transferring of state and scaling the Filecoin chain massively. So really all of these things together help us build a scalable blockchain that really helps unlock kind of like web scale applications.
00:55:07.258 - 00:56:18.966, Speaker C: Hopefully the next set of DApps that need large scale storage, fast processing and also computation over that storage will see a great home in Falcon and the tools you guys are building. And so quick rundown. I know I'm probably at time and should hop but about how FBM has been designed to kind of unlock some of these really exciting use cases. FVM is seen as a hypervisor, and this allows us to plug in multiple second layer VMs on top of kind of this virtual hypervisor layer. And so what this looks like is that you can have both Filecoin's built in actors, but you can also have entire other VMs things like the kind of like EVM, which is the first one that we have brought in creating Fevm, but also additional entire networks as well. You could add, say, the Agoric VM, or you could add the Cosmos VM and get access to IBC. And that's a really exciting direction that we think this whole area is going to move.
00:56:18.966 - 00:57:08.642, Speaker C: Right now, we've really focused on bringing EVM on top of Fem, but the milestone after that is focusing on kind of native WASM actors that are going to be running in Bare Metal Fem mode, which can give you even more access to kind of the core functioning of the system. So here's our quick roadmap. This is where we are today on ETH Global. As you can see from my background, we've already had a ton of milestones related to building the Fem. The first one was in February of 2022. Fem is actually already powering the Filecoin network. We launched Fem into Filecoin main net in July 2022, but we have not yet enabled that programmability layer or brought all of the amazing tools around EVM into Falcon yet.
00:57:08.642 - 00:57:59.634, Speaker C: And that is what is coming in our February release here for milestone two, one. And so we already have our testnet up, which many of you guys are going to be working with later today. We're doing amazing hackathons like this one. And really this is helping us build kind of like all of that great momentum into our main net launch date. And then coming after that, we have additional releases, m Two two and M three, which are adding both access to those bare Metal WASM actors, but also deeper protocol improvements that are going to unlock additional parts of FDM. We've been running an FBM Early Builders program for the past number of months with this amazing group of participants. And I think we have over 100 people that have participated.
00:57:59.634 - 00:58:46.162, Speaker C: And they've created all sorts of useful tools for you to learn from, build on top of, and synthesize into your applications. And so there's an awesome FBM Actor playground, which is an amazing place to get started. Go check out this video from Jim Pick. There's assembly script rust and TinyGo SDKs. And there's a lot of reusable components in here that you can build on top of in your know, you only have weekends, so we want to make you super productive. And they've also started building kind of early contracts in a number of areas. Some of the groups thinking about NFTs, perpetual storage, liquid staking data, dows and so likely have some early things for you to harness, learn from iterate on, collaborate with really exciting thing there.
00:58:46.162 - 00:59:32.046, Speaker C: But we also have a lot of new open opportunities that no one's dived deeply into yet that are super exciting around cross chain bridging or thinking about data discoverability or cross chain liquidity or all sorts of other really exciting things. And so we're pumped for people to dive into those areas as well. When it comes to resources, definitely check out the Fem Developer Forum. There's a lot of great questions, documentation, answers in here. There's some great blog posts already for how to deploy your first smart contract to Fem. And definitely all of the videos from the Fem Foundry program are a great place to learn more. But you're going to be meeting a lot of these wonderful humans.
00:59:32.046 - 01:00:05.710, Speaker C: This is the team that's building kind of the core layer of the FBM. You're going to be hearing from Sarah in just a second, but all of these faces are going to be popping in and out of these sessions and there to help you and help you find amazing opportunities. And we're really excited to see what you build. Feel free to if you want to gut check your idea, you can message me on Twitter. I'm MoMac 28. Or if you're in the file point Slack, I'm MoMac maybe just MoMac two there and feel free to get in touch. I'm super excited to hear what you're building and give you any advice that might be useful.
01:00:10.220 - 01:00:25.068, Speaker A: Awesome. Thanks a lot, Molly. This is incredible. This was a whole massive overview that got a lot of people excited. And thanks for clarifying what data dowser. Those are the most common question we got and this is a good overview. Well, thank you so much.
01:00:25.068 - 01:00:43.860, Speaker A: And this gets us right into our next talk, which is you learned about the surface area, but let's go directly deep into what is the EVM compatibility piece means here. So to talk about that, I want to welcome Sarah here and I'll let her take over. Welcome, Sarah.
01:00:44.200 - 01:01:31.756, Speaker D: Hey. Hi, Karthik. Thanks for welcoming me. Thanks, Molly, for that great introduction to the vision of Fem as a whole. I'm just going to start sharing my slides in a yeah, I think Molly has painted a really good vision of what we hope to achieve with Fem and where we're at right now on the Fevm. So what I'll do for my talk is kind of go a little bit deeper into the architecture of how the Fem is set up and also specifically the EVM compatibility piece of the FVM, which then constitutes the word Fevm. And then for the rest of the day, we'll have all my other teammates coming on, as well as some of our partners, to share a little bit about some tutorials on how you can build certain scenarios.
01:01:31.756 - 01:01:54.788, Speaker D: These are just ideas that you can have. So Zach's going to come on and talk a little bit about that and then we're going to have Zondex Glyph come on to talk about the really important tooling that you can use to build in your project as well. So I hope my session kind of gives you a sense of the underlying concepts of what you'll be building on. Cool. So a little bit about myself. Nice to meet all of you. My name is Sarah.
01:01:54.788 - 01:02:17.904, Speaker D: I'm an FVM dev advocate. I'm on the Developer Experience Team. I've been at Protocol Labs for a few months now. I am supported by a really amazing team. We have a few faces here that are not on the board, that are still joining our team and so on. But these are like product engineering strategy, DX, ecosystem. So we all work really well together.
01:02:17.904 - 01:02:54.280, Speaker D: And a lot of the content I'm sharing today is just me sharing of what's been built. But it's really owing to a lot of the good work that has been done by my team before this. So, yeah, we'll all be on the chat answering questions. I think we're all kind of on standby through this weekend just to kind of be able to support your projects. So really looking forward to getting all the questions from all of you. And that's already started, right? I've seen some of you on the brainstorming in the Twitter spaces, so that's been great. Also, a few of our partners that we work really closely with, we operate in a very open source way, and there's also no way that we could build to the point that we've built at without the help of all these great partners.
01:02:54.360 - 01:02:54.604, Speaker A: Yeah.
01:02:54.642 - 01:03:32.036, Speaker D: And definitely more that are not featured here. So I'll get a little bit into I know you've seen the slide a little bit earlier on, but let me touch a little bit deeper on it. So this one talks a little bit about how the FPM itself was inspired. This was, of course, started way before I joined the team, the founding engineering team for the FVM. They were really inspired by Hypervisors, the actor model and the Unix kernel. I think what we envisioned was a system that could host multiple runtimes and serve as a seamless connector between them. This was really important as well because blockchain runtimes are developing really rapidly and harboring many different developer communities.
01:03:32.036 - 01:04:22.356, Speaker D: And so we want to make sure that we are able to accommodate them as they come in. And I think the general ethos of the PL, the Protocol Labs network, to be able to build things that complement the ecosystem and allow people to build on top of that whichever tooling or systems or preference or languages that they have. And I'll talk a little bit more about that and you'll understand the features of that with the FVM and how we've really worked towards implementing that. So for the Hypervisors piece, it is the underlying machine that allows multiple machines to run on top of it. And so we're know today might be EVM, but in the future it might be other user defined VMs as well. For the actor model, it acts very much as the interaction paradigm between runtimes and the contracts or the workloads that they interact with. So that's also why we call the smart contract equivalent, but not exactly an equivalent.
01:04:22.356 - 01:04:59.488, Speaker D: I'll talk about that in a second. We refer to them as actors. So you'll see the word appear a lot in our documentation. And that's what we're really referring to over here. The Unix kernel itself was a point of inspiration because of the isolation, memory environment, storage abstractions, and so on, all of which are really accessible through system calls or syscalls. So to kind of explain the difference between smart contracts and actors, the way you can think about it is that on the FalcoIn network, the FVM and Fevm functionality is carried out by actors. So when you deploy an EVM smart contract to the FalcoIn network, an actor is created that contains the ethereum bytecode and executes that code on the EVM.
01:04:59.488 - 01:05:33.490, Speaker D: Yeah. So right now it's more on the EVM deploying to the FalcoIn network through the SVM. We hope that in the future we can think a little bit more about engineers right now are thinking about things like parallelism. How can we know? I'll talk about the architecture later on. But the way that we've built it allows us to maybe be able to build parallel ways of functioning across foreign runtime, as well as the FBM itself. So that leads to tighter coordination, things can move faster, it's more performant. So these are things that we're thinking about right now.
01:05:33.490 - 01:06:13.404, Speaker D: You've also seen the slide, but let me go into each of the points, because I know Molly was going through the paint division. And so let me explain a little bit about each of these points. So these are different features that we considered when we were building out the Fem. I'll talk about the architecture in a second, but let me also talk about some of the features here and what we've considered. So, first of all, it's based off on WebAssembly using WASM time under the hood. In its reference implementation, you can think of WASM running at the hypervisor level, which we talked about hypervisor layer, which we talked a little bit about earlier on. As I mentioned, it can power multiple runtimes like EVM, secure ECMA, script and so on.
01:06:13.404 - 01:06:40.496, Speaker D: And because it compiles the native bytecode, it really leads to great performance. So for those of you who have used WebAssembly, you know how efficient it is, maybe in a web browser, but here we're trying to use it within a VM instead. And as you can see, it has really led to the outcomes that we wanted. WASM gives high level languages a compilation target, so then devs will be able to use their preferred language to write their actors. So you could use languages that. You're comfortable with. Such as? Like Python JavaScript assembly script.
01:06:40.496 - 01:07:33.088, Speaker D: Well, we actually have a few SDKs out for native actors and I'll talk about that a little bit later but you can see on the architecture diagram over here you have native actors in your foreign runtimes. And so for native actors we actually have developed SDKs such as Tiny Go Assembly Script, High Level Ras and these are developed by our partners. So yeah, we look forward to the community building out more SDKs for the languages that they prefer or the communities that they are part of. And so WASM also imports Syscalls and declares them which makes it easy to audit and static analyze in the FVM. So especially if it's the wrong syscall that you are then able to identify and isolate it, whereas in other VMs typically you kind of have to scan the code and identify that yourself. So we think that that allows a lot more control for us. WASM also provides a sandbox environment that assumes zero trust that again makes it easy to analyze an instrument.
01:07:33.088 - 01:08:41.592, Speaker D: So what that allows is that the FBM will then we can then have things like built in resource metering for gas estimation and accounting and each actor also runs in isolation and can escape its sandbox through syscalls which is once again very much inspired by the Linux model around low level system calls. That's also a feature that we've considered, again, that gives a lot more control around the Swiss calls that we want to make IPLD native. So for those of you who are new to IPLD, it stands for I think it's Interplanetary link data but might be wrong on that. But it basically links to content addressable data structures that are linked through hashing. So why we've chosen to make the FBM IPLD native is because all data is managed and exchanged through IPLD, which means that all our content is addressed and linked through hashing. And that makes it really efficient in building the fem or for devs like yourself to build on top of it, because it makes it really easy to snap muggle tree data structures for historical state checks, for example. And so this allows you to build much more efficiently.
01:08:41.592 - 01:09:26.244, Speaker D: You will also be able to account for state of not just the account itself, but also state of the actors within. It really getting to more atomic pieces that you can then account for, which then makes it easier for you to have control over what you want to build and better coordination amongst actors for example. And lastly, you also get to define your data layout. So if you want to choose having this piece of data to sit next to another piece of data, that's up to you to choose if you think that's more efficient for what you're trying to build. So yeah, we're trying to give as much control as possible to the developer and so that's a lot of the thought that has gone into building the FVM. It also supports foreign addressing and foreign signature schemes. And we'll get to that a bit in the next section where I talk about how the EVM is made compatible for the FVM.
01:09:26.244 - 01:09:53.932, Speaker D: This really very much ties into it. And so let me touch a little bit on the diagram over here. As a whole, you can see that the FVM, to be clear, for those that are new to the FVM, the Fem sits on top of a filecoin node. And so everything I just described sits within what the FVM is able to execute. And then on top of that, you have two categories of actors. So you have native actors and you have foreign runtime actors. I know Molly talked a little bit around the foreign runtimes there.
01:09:53.932 - 01:10:43.756, Speaker D: Right now we're talking about EVM, and in the future we hope to build for other VMs as well, or have the community build that out for the native actors. Two subcategories in here, one is the built in system actors, and one is the user defined WASM actors. So for built in system actors, that's something that is hard coded into the network in the FVM and then onto the network itself. So these are actors that you will interact with, like a market actor or a minor actor that then allows you to do all the storage and retrieval capabilities and primitives that you want to do. And on the other subcategory you have to use the defined WASM actors. I think if you were to write native actors within the Fem, it would usually be writing in Rust, C C, and also we are developing other SDKs as well, but those three languages are the most recommended. But then that's for you to define.
01:10:43.756 - 01:11:16.380, Speaker D: You can write your actors and it should run within the FVM itself. So as a whole, that is how the FVM architecture works. And so right now we'll jump into the foreign actor piece, which is around the EVM phase that we're at right now. We talked a little bit about the roadmap earlier. Earlier in July this year, FVM is actually live on the filecoin network as of today. The portion here, the subcategory around built in system actors, is what's available on the main net. So you might not see it or experience it, and you also can't program it as of today.
01:11:16.380 - 01:11:48.936, Speaker D: But where we're at right now is around Fevm. And so when that launches in February next year, when it goes live to the main filecoin network, you would then be able to program actors there. And then later on, probably mid year 2023 is what we're looking at, always subject to change. But it's something that we're focusing on, is to then allow for that subcategory of user defined native actors to be launched into mainnet so for developers to use. And so I think that's the point where it will really unlock a lot of the capabilities, not just for the Ethereum ecosystem, but for many developers out there.
01:11:48.958 - 01:11:49.530, Speaker A: As.
01:11:53.340 - 01:12:32.836, Speaker D: Yeah, so this is the question around how does the EVM deploy to FPM out of the box, we talk a big game about making sure that it is seamless and it's a seamless deployment for EVM developers. Again, you all are like one of the early builders, first few early builders to be touching this piece of technology. We have not launched yet. We are pre launched. So a lot of this, I think as of probably two days ago, our Ethereum JSON RPC API is now fully feature complete. So you have a lot of new capabilities, really hot, fresh out of the oven for you to use. So we really look forward to testing and all the feedback that's going to come.
01:12:32.836 - 01:13:14.364, Speaker D: But let me talk a little bit about how that is achieved. So I'll run through a few of these considerations. Not considerations, these are more like factors or ways in which the EVM can then seamlessly deploy the FVM. First up is around how EVM runtimes compile to WASM. So the FVM supports EVM smart contracts out of the box. The EVM runtime is always compiled to WASM, as I mentioned earlier, with the FVM architecture. And so the FVM emulates EVM bytecode at a low level, supporting contracts written in solidity Viper and Yule very much focused on solidity.
01:13:14.364 - 01:14:05.060, Speaker D: Right now, there is no special EVM support per se. And this once again plays to the ethos of how we hope that the FVM is something that can support different blockchains and different VMs out there. EVM is the first one that we're building for, but we want to make sure that when we build for it, it's not that we have to have a lot of bridging or special features or special support marked out just for the EVM so that it becomes a general purpose hypervisor. And when other VMs are coming on, it makes it much easier to accommodate and integrate them into the FVM ecosystem. We talk about familiar the. I think as of right now, you'll see when I share a little bit about it later, and in the tutorials that you'll see, you can use MetaMask, you can use Hard Hat. We're testing for a few other frameworks like Foundry and so on.
01:14:05.060 - 01:14:55.288, Speaker D: The reason why this can happen is that we actually point the EVM tooling to the Lotus node via the Ethereum JSON RPC API. So that allows you to use the tooling that you're familiar with and deploy pretty much seamlessly to the FPM itself. And then embedded addressing was something that we talked a little bit about earlier. But let me get into it because I think it's something that not sure if other blockchains have this today, but it's something that was started, built by our engineering team. And it's a really interesting concept. It's a concept of a new class of F four addressing basically taking the EVM addressing and embedding it within the FBM addressing. So right now there are existing prior to this, there are existing F zero to F three address classes for billion actors, users and miners.
01:14:55.288 - 01:15:44.036, Speaker D: The F four address class is for foreign runtime addresses like EVM itself. It is intended to keep account addressing consistent, to have them all operate in the same network. And so F four addressing is enabled by an address management actor. So we've actually written one of the built in actors itself to deal with this. You can deploy your EVM with an Ethereum address into FBM and then it gets encrypted and converted into a consistent address on the FalcoIn network. And so the FalcoIn network then be able to recognize it, and then it allows it to compute overstate and you on your side continue to access your account via the Ethereum address. We're also building out support for block explorers that will be able to parse this so that when you see, you technically wouldn't see all the translation of addresses and the multiple addresses that you would get, you would just focus on looking at your Ethereum address itself.
01:15:44.036 - 01:16:26.044, Speaker D: So again, adding to that seamless experience, again, how it works is you can deploy your EVM with an Ethereum address into an FVM encrypted. It gets encrypted and converted into a consistent address. And I think the way that the equation looks, I didn't actually put it into this slide, but it's really interesting. We have a whole GitHub written about it, a whole GitHub written about it. And I think it's really something that you should look into. But basically it's a compilation of the transaction address and then the Ethereum address as well as the filecoin address. And then that makes up the F four address that is then recognized within the FalcoIn network.
01:16:26.044 - 01:16:59.230, Speaker D: So, yeah, when I learned about the concept, I was like, that's really cool. So something to look into. Okay. Account abstraction. So, account abstraction basically allows a user program actor to be at the top level entry point that initiates a transaction and pays fees. It allows the user to use smart contract wallets containing arbitrary verification logic instead of externally owned accounts as their primary account. And so what that means for you is that a transaction can start from a smart contract and not only an externally owned account, which is much faster and much easier from the user's point of view.
01:16:59.230 - 01:17:42.516, Speaker D: Account abstraction itself decouples the ownership of assets, which is the wallet, from the authority to transfer them into via a wallet specific policy. You can then submit your Ethereum transaction exposing the Ethereum address on RPC API on Lotus, and then it makes a FalcoIn transaction. And then you have an Ethereum account on chain. It validates the signature and then your native Ethereum transaction works. So that's how there's all the thinking that has been built on the back end. But then what that means for you is that you're just working on your native Ethereum transaction and it works within the FalcoIn network and then on custom account types. So this one will basically allow the Falcon chain to include your Ethereum transactions.
01:17:42.516 - 01:18:15.600, Speaker D: We talked a little bit about that as well and then I didn't add this in, but in just I think a day or two days ago we had Ethereum Event System. Now we've created a new FVM event system to accommodate for Ethereum event systems. So Events and locks now works within your Fevm deployment. This is pretty bare bones because we've just created it. A lot more optimization will happen and more under the hood. So you won't really see it. It can write events, but it's not so much indexed yet.
01:18:15.600 - 01:18:37.556, Speaker D: And we're still working on tracking the active state and so on. Okay, so I'll talk a little bit about tools that we have available. So this is Wallaby. You'll see in the quickstart resources. This is very much what you're all going to be building. Your projects on the Wallabies are bleeding edge testnet. It will not be bleeding edge for the period of this hackathon.
01:18:37.556 - 01:18:51.372, Speaker D: So don't worry about it. It will stay consistent. Your code will not disappear. It is fully ethereum. JSON RPC compatible. Again, not reset on a weekly basis. And we have maintainers that will be around.
01:18:51.372 - 01:19:18.324, Speaker D: So that is the Wallaby bleeding edge testnet. We have quick start guides on how you can get your wallet connected and I'll show you a quick demo or a short video GIF on how you can do that through Chainlist just in one click later on. So as you can see over here, you can just go to Chainlist. It's really easy. It's one click. Make sure you turn on testnets. Look for the wallaby testnet add to MetaMask.
01:19:18.324 - 01:19:41.628, Speaker D: It should pop up if you click. Yeah, you can see the steps here. But if you click Add Wallet and your main wallet is for example, a coinbase wallet or something else, it should pop up as well. So once you've connected it, you can then go to the Wallaby Faucet and get your funds. It should take a minute or two for you to get some of the tfill. Then you can start building your project on it. Falcon MetaMask.
01:19:41.628 - 01:20:06.232, Speaker D: This is to show you the capabilities that are now enabled today. So this is something that we've tested multiple times. It works really well. We're still doing testing with various other wallets. If you have a wallet of your preference that you're using and you, let's say, hit a snag and you want to let us know, definitely put it in the discord, we'll see how we can work on that. But yeah, we've tested it with wallet connect ledger MetaMask. These are a few wallets that I think are good to go.
01:20:06.232 - 01:20:33.516, Speaker D: So yeah, open to any feedback there. But for MetaMask itself, you can already do value transfers. You can deploy ERC 20 token and you can do contract calls. And these are all the things, all the capabilities that are available today with MetaMask. So it's pretty much seamless at this point for Wallets and then remix ID. I'm sure all of you are familiar with this. This works really well as well, as you can see, we've tried it out with a few template contracts.
01:20:33.516 - 01:21:10.732, Speaker D: We have early builders also testing it out, and it seems to work so far. So, yeah, I think pretty good on remix as well. So another tool that you should all really be familiar with to be able to build a project on really quickly and deploy to the FPM for the hard hat itself, if hard hat is something that you use, this is a very popular tool for development. Again, we have Hard Hat starter kits that are actually ready today. You can see in the link below, but it's also included within your Quickstart resources. So you should be able to go in and build your project via Hard hat as well, if that's your preference. The other framework that we're trying right now is Foundry.
01:21:10.732 - 01:21:52.350, Speaker D: So looking for feedback on that, it's worked for a few users. We haven't hit a snag, but that's something that we're looking on building out for as well. So Falcon Sol is a library that we're looking to build. Right now, we're still prototyping and building out the library, but for the hack itself, we've created a mock version. So let me talk a little bit about FalcoIn Sol first. What we're trying to build here is really a library that makes it easier for you to access all the primitives within the FalcoIn network via FBM. And we want to make it as easy as possible so it will look like an open zeppelin type kind of utilities that you can then access, so be something that you're familiar.
01:21:52.350 - 01:22:39.646, Speaker D: So for the heck itself, what I mean by the Falcon Mock Sol, you will also get links to this within the Quickstart resource. We have built a few mock built in actor APIs for you to play around with, to build your project with. And these are the two main ones around the market, actor and the minor actor. You will see that within the Quickstart documentation. We have documentation on how you can access these and use it, as well as the features that have been enabled and the features that have not yet, although those that have not yet are typically not so much used within the scenarios that most people will be building on. But if there's anything that you really, really need, again reach on Discord and let us know. So, talking a little bit about block explorers, these are a few of the block explorers that have been built out.
01:22:39.646 - 01:23:09.754, Speaker D: We're also working in partners to develop them further. So you have a filmine explorer, Glyph Zondex. These are the different ways that you can use. Again, these are in the Quick Start guides, but if you want to check out your transactions and all your storage deals that you have built out of your projects, you can always use these explorers. They're pretty actually really easy to use. Sonnex also has a Berks API that you can use to then query and find out information about your transactions. They'll be talking a little bit more about that tooling later on.
01:23:09.754 - 01:23:49.630, Speaker D: And also all these different explorers have docs for them as well, so you can understand how to use them better and talk a little bit about evolving wallaby so things that you can look forward to really soon. Is that so? I say evolving Wallaby because Wallaby is like a young kangaroo. I think we've played around many names. The name is not decided. Obviously it's not going to be kangaroo, but we'll have a much more stable testnet around that is not beating edge and reset every single week. I think we're thinking of some activities to come on top of this. Things like Buildathons hackathons, acceleration programs, things to support builders to actually build out a lot of these projects.
01:23:49.630 - 01:24:34.522, Speaker D: It will roughly run between early December until Mainet launch in February 2023. So if you're starting on this hack today and you think that your project is something that can go further, look forward to this. We're going to have a lot of programs coming out here and a lot more resources to support your project all the way until main launch. So the moment it launches, you can immediately deploy your project onto it. And I wanted to do a quick shout out to other Quickstart resources that you should not snooze on. The team has prepared a few cookbooks and idea forums for you. So if you're looking for ideas around data, dowels, lending pools, what the specific bounties are for as well, you can check out these links on the Quickstart that will bring you to discussions around how you can think about designing your projects.
01:24:34.522 - 01:25:04.620, Speaker D: Build on top of it, adapt it, use it up to you. We also have two cookbooks that we built out, one for lending pools and one for datadals. It's not just a forum article, it actually links out to a GitHub and then you can use it as a guide to then build your project through the weekend. And of course, again, always looking for feedback on all these cookbooks. And yeah, lastly, again, sharing the Fem Foundry early Builders program. I know some of you here might be in the Early Builders program itself. I run it on a weekly basis, so you'll see me every single week.
01:25:04.620 - 01:25:40.098, Speaker D: I promise it'll be fun. But yeah, what we talk about mostly is like technical support for the projects you're building, resources updates. We do work really closely with our builders in a two way relationship, so they do a lot of testing as well for us and gives us feedback on what we should be focusing on and what we should be building the fevm out for. So if you want to have a see in how it's built out, sign up. For the early builders, we're looking for developers who are solidity devs, ready to build and being able to build together with them or to create content out of it as well. So, yeah, that's mostly it for me. I know it's a mouthful.
01:25:40.098 - 01:25:43.350, Speaker D: I hope it was useful and we'll see you on the discord.
01:25:45.610 - 01:26:07.310, Speaker A: Amazing. Thanks, Sarah. That was an awesome and comprehensive overview, and I know a lot of people will have questions that they'll be able to ask, so we'll redirect all of them to the discord. And up next, I want to welcome our next speaker inoa to talk about and Zonex, and then John will be coming on shortly after to do the rest of the talk. So without further ado, let's welcome Inoa. Hi.
01:26:07.460 - 01:26:12.260, Speaker F: Hi. Thank you, Kartik. Thank you so much. Let me share my screen.
01:26:15.270 - 01:26:17.890, Speaker A: Do you see that everything is good?
01:26:18.040 - 01:27:13.034, Speaker F: All right. Okay, so we are here to hack and we are super excited. I'm really happy to represent today the Thundecs team and the great work we have been building during the past week to really enable hackers build on top of Fevm. And very briefly, we are a team of really passionate people building a lot of tech solutions for the blockchain ecosystem in multiple areas. And like Sarah was saying, we are also contributing to FVM Foundry program and building on top of AVM things like assembly, script, SDK and many other great tools. Like, we are also the team behind things like many ledger apps. But today we are here to talk about AVM tools and how you can use them in the hackathon.
01:27:13.034 - 01:28:12.642, Speaker F: So I want to talk about the Devtool suite we are building on top of AVM. This is conceived to be like something holistic like tools to enable you to build, test, explore and interact with the blockchain as well as with the smart contracts we are deploying. There is still a lot of work to be done and a lot of iterations, but we're really happy to present you today the following three tools. The first one has been already introduced by Sarah. She was talking about the Falcon Sol library, or more precisely, the Solidity MOX library because there will be very soon, but still work in progress. A Falcon Solidity library that will enable solidity smart contracts to call methods on Falcon built in actors and access Falcon specific syscalls. But since this is still work in progress, what we have created for the hackathon is a Falcon Mock Solbrary containing basically mocks for two actors.
01:28:12.642 - 01:28:56.466, Speaker F: The miner actor dealing with storage, mining operations and collecting team proofs and the market actor that manages storage and retrieval deals. And we have built two smart contracts, test smart contract that hopefully help you to perform these hard coded calls to interact with the FBM. We will put all the links later at the end of the call. So don't worry about that. We have a repository. We have created also an NPM package. So you can easily import that and use that in your project.
01:28:56.466 - 01:29:41.970, Speaker F: But it's very important to note that these mocks are not really performing real cross contract calls or sys calls, but will enable to work with your smart contract. We kind of like hard coded some market deals for example. And the second tool I want to present you is the Barix Public API. This is an API that indexes the whole filecoin blockchain historical data and provides you a very simple, easy way to interact and ask for transaction account and tipSet data. And I will make a quick demo in a moment. It's very easy to use. The only thing you need is your GitHub login account.
01:29:41.970 - 01:30:30.450, Speaker F: And the operations that we support are account tips and Transaction. You can query by Balance, by Info, based in accounts tipSet like by Hayth and latest tipSet and Transaction by Hash Hath and Address. And we're really happy to announce that we have also included support for wallaby so that you can also use it in this testnet. I will show you very quickly how to go to it. So you can go to our documentation and go here to Barix API. And the only thing you have to do by scrolling here is to ask for a token. You get your token after accepting the terms and conditions.
01:30:35.430 - 01:30:36.180, Speaker A: Here.
01:30:38.810 - 01:30:51.340, Speaker F: So you upset the terms and conditions and you get an API token. And automatically with this API token you can query it. Let's wait a second.
01:30:56.510 - 01:30:59.630, Speaker A: Should work. Yeah.
01:30:59.700 - 01:31:28.390, Speaker F: Okay, so here we are. So here we have our token. We can just copy it and add it into our code. And this token has already been introduced here. So we can also interact directly here and play around. We can select between the Falcon mainnet network and the wallaby network. So here we are querying, for example, by balance and we can just try and get a response.
01:31:28.390 - 01:32:07.140, Speaker F: And the same for all these operations. We have also developed a client tool so that it's for you. Even easier to use it. You have an NPM package here so that you can build on top of it. Coming back to my slides. So the next tool I want to present you is the BRICS Explorer. We are also building a block Explorer that interacts with the Falcon blockchain and also have recently add wallaby support.
01:32:07.140 - 01:32:34.490, Speaker F: Yeah, I will show you how a bit. Okay, I will copy here. So it's very easy. You just have to go to Barix Sundaex Ch and here we can paste for example, we are here in okay, so this is a wallaby address sort.
01:32:34.560 - 01:32:40.000, Speaker D: Address and we can search hopefully works.
01:32:46.500 - 01:33:29.820, Speaker F: I will refresh just in case. Okay, let's see. Okay, so it works so here we see the response and for that address we have here all the transactions in Hafe by hash from, et cetera. Here if we click into, for example one specific hash transaction, we see here the data. We have conceived this really to be useful for the developers. So you can easily save the response and export it in either JSON XML file or text. And for example, I will export here in JSON file.
01:33:29.820 - 01:34:10.890, Speaker F: You can also here very easily filter, for example here all the same, you can filter by type by any of these columns. You can also move the columns as you wish. That's pretty it. And similarly to Mainet, for example, similar to Mainet, I can do the same. Go back. I can do, for example, this short address. So now we are querying main net.
01:34:10.890 - 01:34:17.948, Speaker F: So this is in mainnet and yeah, we don't have any transactions here.
01:34:18.114 - 01:34:18.830, Speaker D: Okay.
01:34:20.020 - 01:34:27.970, Speaker F: And the last thing I want to show you is a way to interact with your smart contract. So let me copy here I have.
01:34:29.860 - 01:34:30.720, Speaker D: Contract.
01:34:35.560 - 01:35:00.296, Speaker F: So if I go to this section, I can insert smart contract. This is an ethereum address that I have deployed and it will decode it. And you can check here the API, the information bytecode by operation and the methods. Okay, this is not decoded.
01:35:00.408 - 01:35:01.020, Speaker D: Yeah.
01:35:01.170 - 01:35:01.870, Speaker F: Okay.
01:35:04.160 - 01:35:08.300, Speaker D: Yeah. Well, that's pretty it.
01:35:08.370 - 01:35:57.790, Speaker F: Yeah, well, I think yeah, that's pretty it. And yeah, I just want to thank you and say that there is still a lot of work to be done and we hope you can use these tools during the hackathon. And here is the QR code with a link to all these tools and we hope you enjoy the building and yeah, happy hacking and you can contact us. We'll be mentoring also during the hackathon and will be available in Discord. And you can also contact us here at hellosantex ch. And thank you so much.
01:36:12.110 - 01:36:21.040, Speaker A: Awesome. Thank you so much. I'm just jumping in for Kartik here. John, I think is it possible that you had something else to jump in on for the rest of this?
01:36:22.550 - 01:36:23.058, Speaker G: Yeah.
01:36:23.144 - 01:36:25.218, Speaker A: Welcome to the you.
01:36:25.304 - 01:37:02.750, Speaker G: Thank you. What's up everyone? I'm John and Jonathan. I work on Glyph, and in case you haven't heard of Glyph, glyph is basically like an umbrella brand for a suite of filecoin apps and tools similar to Zondax. And that was also an awesome presentation. Always very impressed with Zondax's work. So, yeah, I guess today I was going to just share with you. I've definitely done my fair share of hackathons and so I was going to share with you, I think, some tools that I would use if I was participating this weekend just to kind of help people get up to speed.
01:37:02.750 - 01:37:26.126, Speaker G: So I'll just share my screen as well. And I have a few things. Yeah. So hopefully everyone can see Chrome here. I think it looks right to me. So the first and sorry. If any of this is already repeat information, but the first is called Chainlist.org
01:37:26.126 - 01:38:15.222, Speaker G: and Chainlist.org. Just makes it much easier for us to add in a network into MetaMask. So I've actually already done this, but the idea is you want to search for filecoin, make sure that testnets are enabled, and then you can easily add the Wallaby testnet URL. And so if you click Add to MetaMask, I don't know what will happen if it's already added. But my MetaMask is connected to Wallaby and I have a little balance here. I don't know if you can see that because my tab yeah, that might not go across screen share, but now basically if I'm building any sort of front end application that needs to interact with the chain and write any transactions, I'm just kind of like already set up there. So that's one helpful tool.
01:38:15.222 - 01:39:12.040, Speaker G: Another helpful tool for kind of exploring the JSON RPC is this open RPC playground. And this should be on one of the hacker links that is made available to you. But I'll put it in the chat here too. I don't know if this chat is going to make it all the way around, but it's basically this open RPC playground where you just point the RPC to our wallaby node. And so the really cool thing about this is you can look through all the methods that are supported by the Glyph Wallaby API. So this is a mixture of filecoin specific calls as well as ethereum JSON RPC calls as well. And so if you click into any of these calls, let me find a good one that hopefully will work well here.
01:39:12.040 - 01:40:03.960, Speaker G: Let's see like chain head. Okay, so this filecoin chain head call, you see, it doesn't take any real arguments here. This is like a back end implementation thing and it will tell you what types I'm supposed to get back from this response. And then actually down here, there's an easy way for me to actually go ahead and try it out. And so if I use control space oops, that didn't work. If I click the play button, I should get back a sample request response here to help me design the architecture of my application. And so this is a really helpful tool, kind of like postman, but everything is just generated for you.
01:40:03.960 - 01:40:57.420, Speaker G: And I actually learned about this very early this morning. So I would have saved myself a lot of time in the past had I known about this. Okay, so that's two tools so far. There's chainlist for just making it easier to import wallaby into MetaMask, which you've probably already done. There's this openrpc Playground, which is another really helpful tool just for experimenting with the Glyph APIs and just generally like the filecoin API and what is possible there. The next tool to show you is the Glyph Explorer. And here, so I have this wrapped filecoin ERC 20 implementation here, which I'll also put in the chat and anyone can fork this or deploy it.
01:40:57.420 - 01:41:47.418, Speaker G: If you're working on any sort of DFI protocol, sometimes it's good to have a wrapped ERC 20. I'm not going to go into the details over what benefits this can give you, but if you do want to use an ERC 20 version of Filecoin on Wallaby, you can go ahead and follow the instructions in this README. And so I've actually already done that right before this demo. And I sent a couple of test transactions. So this is an example of a transfer, just like a simple token transfer from one account to another. And that is an interaction with my wrapped fill contract. So I'm actually sending some wrapped fill tokens from one account to another.
01:41:47.418 - 01:42:49.654, Speaker G: So if you have a transaction that you've submitted to Wallaby, you'll either get back a CID, which looks like this Bafy string, or you'll get back like, an EVM transaction hash, which might look much more familiar. And so in the Glyph Explorer, you can go ahead and search by either one of these. So I can plug in this transaction hash, and I get back the transaction. I can plug in the CID, which is a filecoin specific content hash, and I'll get this transaction detail view. And if I scroll down, you'll see there's a lot of meaningless data here, or not meaningless, but hard to make meaning from. So to make meaning from this data, you can go ahead and upload an Ethereum smart contract Abi, which if you're using a tool like Hard Hat or Foundry, you should have no problem finding these. They've most likely been pre generated for you if your contract is already deployed.
01:42:49.654 - 01:43:42.670, Speaker G: And so here you can't really see this part of my screen, but I just clicked on the Abi box and I'm uploading the abi of wrapped fill, which I got from my wrapped fill repo that I shared a second ago. And once I upload that now, I can make meaning from this transfer event. So it now no longer says unknown. I can see the event logs that fired and those are parsed, so we can make some more meaning from those. And these were the actual params of what I said, of what I sent. So I sent this address some funds. And now a thing that's awfully confusing about Filecoin is that addresses look potentially a little bit different than what you might be used to in the Ethereum development world.
01:43:42.740 - 01:43:43.360, Speaker H: So.
01:43:45.810 - 01:44:29.594, Speaker G: Let'S inspect this smart contract. So this is an EVM contract and you'll notice I have like three different addresses here. For the purpose of this hackathon, you can kind of think of these as all equivalent. This is the ETH address that we see on Etherscan or on an Ethereum specific developer tooling environment like Hard Hat or Foundry. This address is the filecoin equivalent of an Ethereum address. So any address that you see that starts with like T 410. This is an ethereum address.
01:44:29.594 - 01:45:10.586, Speaker G: And so we literally just do some different encoding to this address and we just plop it on right here. So this is basically just the filecoin equivalent of this. And now the ID address is basically just like a sequential number, like a non that's assigned to your smart contract. So the next smart contract that gets deployed to filecoin after this one would be 1068. And so this might be confusing if you have trouble understanding this, which a lot of people probably should, because it's quite complicated, I'll be in the discord. I haven't joined yet, but I will. You can also tweet at me or whatever.
01:45:10.586 - 01:45:46.706, Speaker G: I'll post my links in here. That's my twitter, my discord. I'll just hop in the chat. So feel free to ping me and I'll get back to you. And there's one other thing that I want to share, which is that at Glyph, our application that we're building and launching alongside the launch of the Fevm is called Glyph Pools, and it's a staking protocol, kind of like rocket pool mixed with urine finance in a way. And so if you are building, I'll show you a little teaser screenshot.
01:45:46.738 - 01:45:47.510, Speaker A: Hang on.
01:45:47.660 - 01:46:30.770, Speaker G: If you are building an app that needs yield, like a native source of yield through solidity APIs, definitely hit me up. We will be providing mock contracts, probably not this weekend, unfortunately, so those won't be ready in time for the hackathon. But if you're serious about building an idea on the Fevm that requires native sources of yield, definitely hit me up. I can help point you in the right direction for how things will look. And then we're also still learning about the needs of builders. So it would be really helpful for me and for the Glyph team to learn more about what your use case is. So definitely reach out.
01:46:30.770 - 01:46:38.680, Speaker G: And I think that was the time that I had. But yeah, I guess that's all I have.
01:46:40.250 - 01:47:16.660, Speaker A: Still have about ten more minutes, actually, so I'm going to try to fill a little bit of that gap. I'm just kind of curious. Well, first of all, seems like an amazing tool and seems to be super helpful for everybody building this weekend. So glad that we got those resources. And I was kind of throwing everything over to the hackers as you were posting them in here too, I guess. Kind of curious, like you've had your head in this for a while. What are you excited to see built this upcoming weekend or just in general? And what are some of the kind of cool tools that are out there? You mentioned what you're working on, but also other stuff that you encourage people to take a look at.
01:47:17.110 - 01:48:34.060, Speaker G: Yeah, that's a really good question. Well, a couple of thoughts on this. One is that there is, I think, sort of a natural competition among layer one blockchains, and I think it's important to ground Filecoin in the right context. Filecoin I see as a very complementary layer to other layer, one blockchains in the sense that Filecoin is a really good place for storing data. And so while I think we've seen other EVM compatible blockchains come to market, especially in 2021, and there's a large appeal to just fork protocols from other EVM networks into new EVM networks, the ones that worked well. But I challenge the hackers who are aiming to do something like that to think. I think there is value in that and I don't think that it would be a bad idea to do, but I think there's some interesting new primitives that are becoming available that if you get them right, it becomes a really interesting environment to build storage primitives and storage applications that simply aren't possible today.
01:48:34.060 - 01:49:32.670, Speaker G: And so some things from the Ethereum world and the EVM world I think will be awfully important. Like, we do need native sources of yield. So building a DeFi product in the FVM is important. But that DeFi product, it looks different than just like an Ave or a compound because the needs of Filecoin are much different. And when you take that kind of nuanced look into Filecoin and the fact that the miners that are running this network are actually producing real world work, there's some new things that can't be done on other chains that position Filecoin in just like a separate place. And so I would urge you as a hacker to start thinking in that area, like, what can I do on Filecoin that's simply not possible in other places? Because I think that's where you'll find some really interesting value and some really innovative use cases.
01:49:33.730 - 01:49:34.480, Speaker B: Amazing.
01:49:35.570 - 01:49:54.420, Speaker A: Very cool. And then one question that came in from the audience, actually, as we're kind of chatting about this, somebody's asking if there's actually an API available for Glyph yet, where they can grab the CID or grab any other info that you guys are making available on the UI in, I guess, a programmatic way.
01:49:55.350 - 01:50:32.990, Speaker G: If you're talking about transaction history, I think the Berry API is probably more stable. So I'd recommend going with Zondax's route for that. And our API would pretty much do the same thing that theirs is for an equivalent of Etherscan's verified contract API. That's not something that we have. Like when you store a contract, an Abi in the Glyph Explorer UI, it's just stored in local storage for yeah, and if you find bugs too, definitely reach out and let me know because this stuff is all bleeding edge.
01:50:33.330 - 01:50:47.814, Speaker A: Totally makes a lot of sense. Awesome. Okay, great. Well, thank you both for being here and being a part of this. Really excited to see all the new things that are being built on top of the fem and yeah, really exciting to have, I guess.
01:50:47.852 - 01:50:48.310, Speaker B: Yeah, exactly.
01:50:48.380 - 01:51:16.800, Speaker A: The people who are working on the bleeding edge of this as part of this event so really excited to see what gets built. Awesome. Okay, great. So we're going to go right in to our next conversation, which is going to be an actual workshop. So this is going to be the longest talk of the day. It's going to be kind of a full and workshop of how to program on the febm. So we're really excited to have Zach here from the FBM team to kind of walk through this workshop with us.
01:51:16.800 - 01:51:25.586, Speaker A: So, yeah, I'll turn it over to Zach to share his screen and jump in from here. But yeah, really nice to have you here, and thank you for being here.
01:51:25.688 - 01:51:26.002, Speaker D: Awesome.
01:51:26.056 - 01:51:59.000, Speaker E: Thanks, Jacob. Excited to be here. And hey, everyone excited to see what everyone builds on the Fem and the Fevm specifically. And that is what my talk is going to be on. So let me go ahead and share my screen. All right, so, yes, today I'm going to be going over a demo on programming on the Fevm. And if you're familiar at all with the EVM, programming on the Fevm is almost exactly the same.
01:51:59.000 - 01:52:55.158, Speaker E: So this is a note I've been including at the beginning of my presentations, and I see a lot going around. But when you're programming in the web3 space, there's a lot of terminology and a lot of new projects and a lot of new technology, and information can get really overwhelming, and it can really feel like you don't know a lot or you don't know what you're doing. This jargon here was some notes I was taking just a couple of weeks ago in Lisbon. So I went there for a bunch of protocol labs and filecoin conferences, and this was me trying to understand the addressing schemes in filecoin from my coworkers. Right? So I'm over here. I'm learning this all with you all. So don't feel lost.
01:52:55.158 - 01:53:43.900, Speaker E: Don't feel bad to ask questions. We're all in this together. All right, so I'm going to try to focus this on just a straight demo. We'll do a little bit of work in Remix, a little bit of work in hard hat, and I'll point out some resources you can go to. And if you didn't know, the first MetaMask transaction was actually tested just about a month ago, right before Phil Lisbon. So the engineering team has been working at a breakneck pace to get all of the EVM features that you're used to working with in the Ethereum world. And yeah, so we just had the first MetaMask transaction and just got some events added in.
01:53:43.900 - 01:54:51.614, Speaker E: Keep on the lookout for more features being added in. All right, so we're going to go through Remix. If you're not familiar. Remix is an online IDE for developing EVM smart contracts, specifically in Solidity. And yeah, this is kind of a great first place to test out any ideas you have just to get used to EVM development if you're not used to it. So let's go ahead and first thing you're going to want to do is add in a MetaMask extension to your browser, right? So I already have it downloaded, but you can go to type in MetaMask, click on here and follow the instructions to download MetaMask. The walkthrough here is pretty clear and once you have MetaMask installed I know they were kind of talking about this in the last talk, but just to walk you through it, you can go to Chainlist.org,
01:54:51.614 - 01:55:20.380, Speaker E: which I already have up right here. And we're going to be doing everything on testnet. Mainnet is not yet ready, so we're going to go ahead and click here testnets. We're going to type in Wallaby. So that's the name of the filecoin testnet. And you can click Connect Wallet and it will add in the information straight into MetaMask. I already have it added in since I've been working with it, but just so you can see what that flow is like.
01:55:20.380 - 01:57:15.492, Speaker E: Okay, so once we've got Wallaby added into our MetaMask, you're going to want to get some T fill in there, right? So I already have some T fill, but again, to show you how that's done step by step, the first thing you're going to want to do is get your T four address, right? So in the ethereum world, all addressing is done with zero X and then yada, yada, yada, your hex. But in Filecoin, the addressing scheme is different and every runtime that eventually is added on to the FVM could have its own addressing scheme, right? So this is why the F four addressing scheme was created, right? So if you go to explore Glyph IO ethereum, you'll have this handy little screen here that kind of automatically connects to your MetaMask and converts your ethereum address to the equivalent F four address, which is just kind of an abstracted away address where we can add any other addressing scheme to. Right? And if we switch it to Wallabynet, you'll see, the only difference is it's a T four for Testnet address. So this T four address corresponds to this ethereum address. That will basically be only important for the next step because now we are going to get testnet funds. So if I copy the T four address, I got, here we go to Wallaby network, paste it in. Got to go through the captcha.
01:57:15.492 - 01:57:28.124, Speaker E: These CAPTCHAs are always really interesting. You can get some funny ones today. We got cupcakes. Of course, they try to trick us by putting regular cakes in. So I think I select all that.
01:57:28.162 - 01:57:28.556, Speaker A: Yes.
01:57:28.658 - 01:58:13.860, Speaker E: And just select send. And that should send 5000 T fill straight to your MetaMask wallet. Again, this is testnet currency, so unfortunately not real fill. We're not just printing real money here, but that would be awesome. Okay, so now we've got MetaMask, we've got the network added on MetaMask and we've got funds to pay for transaction fees in our wallet. We will go ahead and go to Remix. All right, so here's kind of a layout on Remix.
01:58:13.860 - 01:59:06.728, Speaker E: The main things that you will need here are the file, the file sub tab here. If you go down, you'll see a compiler, a deploy tab and a debugger. So we're going to start over here in the file explorer and we're just going to go ahead and click on the storage contract. So Remix has a bunch of built in simple contracts just used as an example. You'll see, a storage soul is simple read, write contract. It has a single variable number, a function store which will set that variable to a value and retrieve will get displayed as value. So if we go to the compiler tab, hit compile, we need to make sure everything is good.
01:59:06.728 - 01:59:48.144, Speaker E: It's compiling storage. Sol says all right, it's fine. And now we need to deploy our compiled code to the filecoin wallaby testnet. So one of the most important things you need to do here is click injected provider MetaMask. This will tell Remix, hey, I want to communicate with MetaMask. MetaMask is going to be the gateway I send transactions through and otherwise if you stay on Remix VM, that's just like a local copy of the blockchain of an ethereum blockchain in Remix. Right? So selected injected provider.
01:59:48.144 - 02:00:45.836, Speaker E: And if we look at that account, it indeed matches the account in my MetaMask wallet. All right, so we'll select storage, make sure that's selected hit deploy. Now MetaMask is going to come over this transaction saying, hey, this is going to cost gas fees, any transaction that you write to the wallaby testnet, just like a regular network costs transaction fees, right? So this is why we filled up our wallet with Tfill earlier. So I'm going to go ahead and click confirm and this will probably take a minute. So it takes 30 seconds for the wallaby testnet to include the transaction. And then there's this whole design pattern that the team implemented called delayed execution. So it'll then get executed and 30 seconds later give us a transaction receipt.
02:00:45.836 - 02:01:48.740, Speaker E: So it actually takes a whole minute to get this transaction in. So while we are waiting for this to go through and we'll come back and interact with it, I'll go ahead and move on and talk a little bit about the mock file coin APIs. Right, so we had the Zondax team present earlier about these, but these are extremely useful tool going forward. These will kind of enable you to test what it would be like to develop with all these filecoin native features that you don't have on other blockchains. Right? These APIs are still being worked on to fully open. That's why we're mocking them for now. So this will kind of give you the tools to really build interesting new applications like data dows or storage lending markets because you'll have the storage deals which are already native to filecoin available to you in solidity.
02:01:48.740 - 02:03:26.180, Speaker E: So, yep, still taking its time. And where we'll go after this, after Remix is done deploying is we'll talk about the Hard Hat Starter Kit, right? So Remix again is great for kind of just getting your feet wet and testing out smart contract development, but not the best for when you want to get into a professional workflow and actually develop smart contracts that you want users to use and you want to make sure are secure, right? So Hard Hat is a kind of local development environment you can install on your computer and use it to automate all your deployments and tests. It doesn't have the GUI, but gives you a lot more power. Okay, so Remix is still taking its time. We may just have to move on. If the transaction is getting stuck, we can try reloading it and give it another shot. Sometimes Remix kind of errors out.
02:03:26.180 - 02:04:44.170, Speaker E: So go to storage, we'll compile it, switch to injected provider MetaMask and deploy confirm and hopefully this transaction goes through. If not, we may need to speed it up. All right, but for now, we'll go ahead and move on to Hard Hat, right? So you can find the Hard Hat in the Hard Hat Starter Kit in the filecoin GitHub right here. So we'll go ahead and click on this So filecoin project fevm Starter Kit. Okay, so here you'll have kind of a base project set up with a bunch of instructions in the README on how to get it started. We're going to go ahead and follow these instructions and get going with the Hardhead Starter Kit. All right, so here I have a terminal open.
02:04:44.170 - 02:05:55.170, Speaker E: I'm running Mac OS. See, I'll try to get this text bigger so everyone can see. Just got a test folder here and I'm going to type in the command git clone and we can come here to code copy the URL, paste it in right? So that clones our repo into the test folder. Now we'll CD into it tab to autocomplete and we'll go ahead and open this in Vs code, right? So I have the Vs code shortcut installed code and we've opened up that folder in Vs code. Of course you can just go into your file folders and open it that way, but I prefer to do as much from the terminal as possible. So you'll kind of see the structure of a Hard Hat project. We have contracts where you'll put the smart contracts you want to actually deploy onto the blockchain.
02:05:55.170 - 02:06:58.090, Speaker E: You have the deploy script right here, which will you can kind of go in and customize and tell it what contracts you want to target to deploy to the blockchain and how you want to deploy them. And Tasks, where you get a lot of where Hard Hat really shines is where you can write these customizable scripts to do just about anything you want, interact with smart contracts, write data, read data, test some things. Tasks is a very powerful kind of feature of Hard hat. Right. So we'll open a terminal within Hard hat here, and we're just going to type in Yarn in the terminal, right. So this will install all of our download and install all of our packages. And again, all of these instructions are in the README and on the GitHub.
02:06:58.090 - 02:07:07.734, Speaker E: So while this is going, let me just double check on that remix, see if it's gone through.
02:07:07.772 - 02:07:08.354, Speaker A: Nope.
02:07:08.482 - 02:07:31.380, Speaker E: Something's holding up my transactions. They may not have enough gas fee, so I'll try speeding them up right here. Just bump them up and see if that goes.
02:07:33.750 - 02:07:34.306, Speaker A: Okay.
02:07:34.408 - 02:07:55.674, Speaker E: So back to the starter kit. Right. So our Yarn install has completed. And from here, what you're going to want to do is, again, in order to interact with the blockchain, you need a wallet like MetaMask. You need a private key that's stored in that wallet. Right. And this is very important that you never share this private key.
02:07:55.674 - 02:08:32.250, Speaker E: Right. So the private key basically is your wallet. It gives you the right to make transactions for that account. And so what we're going to do is we're going to make a file here. We don't want it there. We want it in the main repo. Just going to type env, right? And we're going to type in private key, all caps equals, and put in quotes here.
02:08:32.250 - 02:09:16.720, Speaker E: And we'll go back to our MetaMask really doesn't want to deploy. We'll go back to our MetaMask, we'll go to account details, export, private key, and you're going to have to type in your MetaMask password. And again, I never show this to anyone. I'm kind of live streaming this because it's on testnet, and I never use this for anything else other than testnet development. This is kind of a dummy account for me. But we'll copy the private key.
02:09:18.450 - 02:09:18.814, Speaker A: And.
02:09:18.852 - 02:09:35.534, Speaker E: We'Ll throw it in here and save. Right. So now Hard hat knows. Okay, this is the account I'm going to sign all of my transactions. All right, so hey, Zach.
02:09:35.662 - 02:09:36.002, Speaker A: Hey.
02:09:36.056 - 02:09:36.930, Speaker E: How's it going?
02:09:37.080 - 02:09:44.566, Speaker A: Good. Do you want to just zoom in a little bit on the font size for some of these two windows here just so that people can see on the stream a little bit better?
02:09:44.668 - 02:09:45.334, Speaker E: Oh, sure.
02:09:45.452 - 02:09:48.326, Speaker A: You can do command plus. Yeah, exactly. Perfect.
02:09:48.428 - 02:09:56.140, Speaker E: Yeah, I've got an ultra wide over here, so it's easy for me to forget on streams. Appreciate that. No problem.
02:09:57.870 - 02:09:58.234, Speaker A: Okay.
02:09:58.272 - 02:10:01.020, Speaker E: Yeah. So hopefully everyone can see that a bit better.
02:10:03.470 - 02:10:03.834, Speaker A: Yeah.
02:10:03.872 - 02:10:34.440, Speaker E: So we've saved our private key in our project. So now Hard hat knows what wallet we're going to use to transact with the blockchain. And we can actually run our first Hard hat task if I type in Yarn, hard hat get address. Believe this address is not just address, get address.
02:10:38.230 - 02:10:38.980, Speaker D: Enter.
02:10:43.500 - 02:11:12.684, Speaker E: Typed in get addresses. Yarn hard get address, not addresses. Right. It'll kind of do what that Glyph tool was doing in the background in the browser, only this time it'll do it in hardhat. So it'll calculate the F four address which we used with the Faucet right here and our actual Ethereum address. For the most part, you're going to be using this as you interact with the fevm. Everything works just like the EVM.
02:11:12.684 - 02:12:31.390, Speaker E: So other than sending testnet fill, you can use this Ethereum address here for kind of the remainder of the tutorial, right? And if you want to check out the logic for that task, we can open the task folder, click Get Address, and you'll see here the logic we're doing when we're actually running this command. All right, so let's use this and actually deploy a smart contract, interact with it. So if we click here on Simplecoin Sol, we have a very simple contract, right? A very simple contract, simple Coin. And this is kind of like a very basic form of like an ERC 20 contract, right? An ERC 20 token. Just for demonstration purposes. So I wouldn't actually make a token this way, but it has a mapping which maps any addresses to balance a constructor which sets our initial balance to 10,000. So there'll only ever be 10,000 of Simple Coin in existence.
02:12:31.390 - 02:13:06.090, Speaker E: And two functions. Or three functions. Send coin, get balance and ETH and get balance. We're really going to be using Git balance and sendcoin. So let's go ahead and deploy this contract. If you yarn hard hat deploy. Now, there is a bug in the Hard Hat Kit at the moment with the deploy script that is being worked on as we speak.
02:13:06.090 - 02:13:38.900, Speaker E: But it sends the deploy transaction. The contract does get deployed, but then it returns an error. So you actually have to run it. Run it, it'll error out. It's going to compile it successfully. And see, it's going to say Deploying Simplecoin. This will return an error and then you just run it again and click Resume Transaction and it'll actually return the receipt of the deployment.
02:13:38.900 - 02:14:01.320, Speaker E: But to save us some time, I actually have another Vs code open right here. So after you actually deploy all the contracts, you'll get this deployments tab right here, right? This shows that you have successful deployments.
02:14:03.660 - 02:14:04.072, Speaker A: Right?
02:14:04.126 - 02:14:58.084, Speaker E: So if I click on Simplecoin JSON, this shows me the address at which it's deployed and a bunch of the metadata. All the JSON abi data we need for that contract, it also deployed. So there's a folder here with the mock APIs. So I copied over the mock APIs from Zondex and put them in here so anyone can kind of interact with them and start building with them immediately. The main two ones are the Miner API and market API. These again mock all of the internal file coin logic for getting any kind of market data, any kind of storage deal data and data on specific storage providers who are the miners. But we're going to be messing with Simplecoin in this.
02:14:58.084 - 02:16:05.882, Speaker E: Demo, right? So we have a Simple Coin deployment at an address right here in the JSON, right? And we're going to interact with it. So again, remember when we deployed this Simple Coin contract, the constructor assigned 10,000 Simplecoin to my address, right? So I should have 10,000 there. If we go to task, you'll see there is a Simple Coin folder and we have a Git balance task. So this is basically going to go in and it's going to read our smart Contract and call that method Get Balance and show us a balance for a given address that we push in. We just need to give it two parameters, contract and Account. Contract. The contract we're interacting with, where it's located, its address and the address of the account we want to get the balance for, we'll just type it in from scratch.
02:16:05.882 - 02:16:37.970, Speaker E: So if we do Yarn Hard Hat and then you're going to do double dash for the first parameter and we'll type in Contract and we'll go to our deployments. Again, we'll go to Simplecoin JSON and we'll copy this in and actually I forget to put need to put quotes around here.
02:16:45.240 - 02:16:45.764, Speaker A: All right.
02:16:45.802 - 02:17:33.958, Speaker E: And then we'll do account. And again, that's the account of which I have it right here. But the account of the wallet we deployed the contract with, that's our wallet since it's the one with 10,000. Again, almost forgot my quotes and quote enter darn hard at Get Balance. Oh, I didn't actually type in. Get balance. Okay.
02:17:33.958 - 02:18:43.684, Speaker E: So yeah, yarn hard hat, get balance, contract, put your contract in account, put your account in and quote enter. So saying reading Simple Coin owned by our account on Network wallaby and we have 10,000, right? And the task isn't in here right now, but you can make a simple task for sending the Simple Coin as well. So that's just kind of like a basic overview of the Hard Hat starter kit and what you can do in Hard Hat. You can write tests and put those in there and have a whole test directory. All of this is kind of be developed on the fly. So feel free to open up any issues on the actual GitHub and we'll be kind of looking over them and being in the discord, helping people out with any issues that may occur and again, trying to fix that deployment issue we're getting at the moment. But yeah, very powerful tool.
02:18:43.684 - 02:19:50.140, Speaker E: If you're going to actually kind of get serious and want to speed up your development, I would highly suggest learning this, especially since it has the mock APIs built in. If you want to take advantage of those, you can kind of go through them and use them again to mock those solidity calls. We also have the forums. I'm sure they've been called out earlier, but there you'll find some tutorials, some high level sketches of things like how to make basic designs for data dows and lending markets. Please go ask questions there. We'll try to be monitoring them and answering questions over the weekend if you have any. And yeah, thank know the Fevm is kind of an exciting development in the Fem lifecycle as it allows Fem to take advantage of all this EVM tooling that already exists and that you may or may not be familiar with.
02:19:50.140 - 02:20:01.706, Speaker E: And yeah, just allows a new paradigm of applications to be built with these filecoin native primitives that are the storage deals.
02:20:01.738 - 02:20:01.982, Speaker B: Right.
02:20:02.036 - 02:20:29.800, Speaker E: This off chain storage that's such an important component in web3 applications if we really want a decentralized web. And with that, that's what I got for the demo. I hope you enjoyed it and I'll see you around in the forums and in the discord trying to help out and answer any questions. So thanks again.
02:20:30.730 - 02:20:31.606, Speaker B: Amazing. Thank you.
02:20:31.628 - 02:21:03.326, Speaker A: Zach, we do still have a little bit more time in case there's anything else you wanted to kind of dive a little bit deeper into. I also just asked the chat to see if they had any questions on their end as they were going through this, although it looks like sort of most people got their questions answered as you went through the demos. Yeah, I mean, if there's nothing else you want to dive into, I think the default fun question to ask is just what would you like to see built this week or this weekend and what are you most excited about seeing as an outcome from this upcoming weekend?
02:21:03.518 - 02:21:50.180, Speaker E: Yeah, I think a couple of the speakers have kind of mentioned it before me, but anything kind of using those mock APIs I think would be awesome because those are the unique features that are in filecoin. When the Fee EVM was created, it wasn't kind of created as a thought of, hey, we want this to have all the same applications as the EVM or compete with the EVM. We want unique applications that can be built to take advantage of these storage deals. Right. All these off chain storage miners, they have this native primitive storage deals that has all the metadata of those deals and make cool applications like Data Dows or Lending markets. Right. I think data dows are extremely interesting.
02:21:50.180 - 02:23:10.554, Speaker E: There's a lot of problems in the world where people just need data, right? Like a lot of scientific researchers need large sets of data to run their models on. And if people can kind of come together and create primitives that allow people to crowdsource and crowdfund this data in a decentralized way, I think that would be really awesome. Right, and then the lending markets as well, like lending markets, like, hey, for the first time, instead of just having kind of like an Ave, an over collateralized lending platform, instead you can have a miner who comes in and posts their future earnings as kind of collateral. Right. So it will require some underwriting on the behalf of the lender to say, hey, do I trust this miner to make my money back? But if there's this earnest miner who wants to come in and provide storage to the network, but they don't have the fill up front to stake, someone can lend them that fill. It can be staked trustlessly and all future revenue up to a point can be given to the person to help jumpstart that miner's career.
02:23:10.602 - 02:23:35.806, Speaker A: Basically. Amazing. Okay, well, very cool. Thank you, Zach, and thanks for mentioning datadals. It's a very natural segue into the next part of the summit anyway, so, yeah, of course. Anybody who has any questions, I think, Zach, you're probably going to be around all weekend, I'm guessing, helping people build. So thank you for yeah, looking forward to seeing what everybody builds.
02:23:35.806 - 02:23:37.938, Speaker A: And thanks again for helping us out.
02:23:37.944 - 02:23:40.920, Speaker E: With yep, yep, no problem. Thank you.
02:23:41.530 - 02:23:42.358, Speaker H: Okay, awesome.
02:23:42.444 - 02:24:21.780, Speaker A: So we are running a little bit ahead schedule, which is great. So thanks again, Zach, for the programming with DVM. And then yeah, up next we're going to have actually, as just mentioned, a sort of panel on locking data dows. So we're going to hear about Glacier Dow and the LaGrange dow, but also we're going to just hear about people who are actively feeling the pain points in the industry that the Fem is set up to uniquely, basically satisfy. So we're going to take about a 15 minutes break. So everybody feel free to get up, stretch your legs, grab a new cup of coffee or tea, and we'll be right back with you at 245 Eastern for the upcoming panel. Thanks, everybody.
02:24:21.780 - 02:42:42.830, Speaker A: Hey, everybody, welcome back to the Fevm Summit. We're excited to have everybody here and excited for this next set of talks. So we're going to be learning about basically unlocking Data DAOs with the Fevam and being able to hear a little bit more from the teams behind Glacierdao and LaGrange Dao. And yeah, we're really excited to hear a little bit more about this use case. We just had Zach point to this as being a pretty interesting base layer situation that can be improved by the yeah, now, kind of great to hear firsthand from injest and from Joel about first of all, I think for Glacier Dow, and then we'll also hear a little bit later from Charles from the LaGrange Dao. So, yeah, when you're ready, feel free to turn on your cameras and unmute and I will stop sharing screen. I'll turn it over to you both.
02:42:42.830 - 02:42:44.290, Speaker A: Hey, welcome to the stage.
02:42:45.030 - 02:42:45.780, Speaker D: Hello.
02:42:47.270 - 02:42:50.994, Speaker A: Awesome. Okay, cool. And yeah, there we go.
02:42:51.032 - 02:42:51.186, Speaker D: Great.
02:42:51.208 - 02:42:59.922, Speaker A: So I'll let you take it from here and yeah, feel free to take your time and I think a lot of people have a lot of questions about these, so I'll try to relay those questions to you after the presentation.
02:43:00.066 - 02:43:00.786, Speaker F: Okay, excellent.
02:43:00.818 - 02:43:01.542, Speaker C: So you can see my screen.
02:43:01.596 - 02:43:03.090, Speaker D: All that's good. You can see the slides.
02:43:03.250 - 02:43:04.662, Speaker A: Yeah, everything looks great.
02:43:04.796 - 02:43:06.326, Speaker D: Perfect. All right.
02:43:06.508 - 02:43:06.962, Speaker F: Yep.
02:43:07.026 - 02:43:08.854, Speaker C: Well, first of all, hello everyone.
02:43:08.972 - 02:43:10.014, Speaker F: My name is Inej.
02:43:10.082 - 02:43:14.730, Speaker C: And together with Juan, we are here to tell you a little bit about Glacier Dow.
02:43:16.190 - 02:43:17.482, Speaker D: Do you remember this?
02:43:17.616 - 02:43:26.030, Speaker C: When GitHub created Cold storage repository using an archival facility that was placed 250 meters deep in the permafrost of an arctic mountain?
02:43:27.650 - 02:43:28.958, Speaker D: What about this?
02:43:29.124 - 02:43:37.380, Speaker C: When the same entity, GitHub, decided to ban Tornado cache code and suspend its developers from their platform.
02:43:40.230 - 02:43:41.122, Speaker A: We believe that.
02:43:41.176 - 02:44:21.898, Speaker C: Code like data should be preserved in a censorship resistant way. And this is where Glacierdao comes in. So Glacierdao is a decentralized autonomous organization that preserves code as a public good. And Glacierdao's lifecycle evolves into a series of stages. Each epoch starts with a call for funds at stage zero, followed by a call for votes. Afterwards, storage providers are allowed to make submissions which are then validated by Dao members. Stage four is considered to be more of a buffer in the epoch.
02:44:21.898 - 02:45:01.760, Speaker C: So it's essentially a time where users and storage providers can chill. And at the end of the epoch at stage five is when storage providers can collect their rewards. But let's go through each stage in more detail. At stage zero, users are invited to commit funds to the current epoch. Currently this is done by committing Falcon, but it will be possible to commit funds using any ERC 20 token in the future. In stage one, users who have committed funds are also attributed then voting power. And this is done in the form of one vote per cell.
02:45:01.760 - 02:45:40.390, Speaker C: They can either vote for a submitted repository or they can submit their own repository for its code to be preserved. So right now, users are only able to vote for one single repo. But in the future we want to allow people to vote for multiple repositories. And we also want to evolve into other forms of voting, potentially quadratic voting. All right, enter stage two and enter storage providers. These make filecoin storage deals, three filecoin storage deals with themselves. And what they do is that they then submit the deal IDs and the PCIDs to the Dow smart contract.
02:45:40.390 - 02:46:24.870, Speaker C: These are then validated, that is, Dow members verify that the deal is legitimate and that the stored data corresponds to the submitted repository. Since the epochs have a fixed duration, if everything from the previous stages is done, then the epoch will just continue to run. And it's time, like I said before, for everyone to just chill both users and storage providers. Finally at stage five. So at the end of the epoch, storage providers can claim their rewards. And what happens is that the smart contract then verifies that the storage deal is healthy and that there was no breach of the deal. So if there was no breach of the deal, then the storage providers are able to collect their rewards.
02:46:24.870 - 02:46:29.820, Speaker C: All right, let's go for a demo now.
02:46:31.230 - 02:46:35.020, Speaker A: I'll pass on to Juan for this thank you.
02:46:35.950 - 02:47:01.516, Speaker B: So let me just share my screen. Everything good. Can you see my screen? The website? Yeah. Nice. So now we're now on the Glacier website. I encourage you to view it. We have a video that really shows our smart contract interaction in more depth.
02:47:01.516 - 02:47:48.080, Speaker B: There's also some other information and we've set up like a little demo here. So essentially our application is not live yet because as we're going to discuss later, there are still some technical limitations as to what we can do with Solidity and Fevm. But we were like, we've been working on this for less than a month, so things are still fresh. So we thought that for this presentation to be nice, to show you what the app will look like when everything is connected. And then we are also going to show you our roadmap to how we're going to replace the pieces to make it more and more decentralized over time. So let's assume we are now here on our app. We created two users, so we can switch between user one, user two, or a storage provider.
02:47:48.080 - 02:48:40.796, Speaker B: Let's assume that user one wants to join the Dow and is going to commit like 250 fill for this epoch of storage. So he commits 150 fill. Then we have user number two and maybe just commits 100 because he has a little less. So so far this epoch on the Dow is 350 fill committed. So if you're a storage provider, you know that okay, the cake is 350 fill big for this epoch, which will help him make a decision of do I want to participate in this? Is there enough incentive for me or not? Then as we go on to the next stage, users can vote on which repos they want to keep preserved. So you can either submit a repo or you can just vote for one that exists. So let's say, for instance, that user one wants to vote for the IPFS repo.
02:48:40.796 - 02:49:10.520, Speaker B: He comes here and he clicks vote. Now all of his votes were cast for this repo. Right now we are only allowing you to vote once and all your votes are cast just for simplicity in creating the contract later. We definitely want to evolve in the direction of for sure, being able to vote for multiple by splitting your votes, possibly even using quadratic voting. It might make sense. In this case, it's really cool. We just didn't do it for simplicity's sake.
02:49:10.520 - 02:50:12.136, Speaker B: So now let's say user number two, instead of voting for an existing repo, they prefer to vote for the JS IPFS repo so he can now come and cast his 100 votes. The storage provider can only see that these are the proposals that are ongoing. The vote button is just a bug here. I need to remove it because the storage provider is obviously not able to vote, but they can see like, okay, there are 250 fill in price for IPFS and there's 100 in price for Jsipfs. So now on the next stage, the storage provider is probably going to be like, okay, this one has a bigger price, so I'm going to go for this deal. So they go on FalcoIn off band, they create a deal with themselves for zero. The reason why they create the deal for zero is because the rewards for storing this data are expected to come from the Dao, right? Not from Falcoin's native rewards mechanism.
02:50:12.136 - 02:51:05.260, Speaker B: So in this case, what you're doing is like thinking, well, it's okay for me to do a deal for zero through FalcoIn because I'm going to get more rewards from the Dao on some native token from the Dao or even from Field directly from the Dao. So they can for instance come here and apply for the IPFS one and then they put the deal ID and the PC ID. So these are two Identifiers that you get from FalcoIn deals. If you go to Field Fox, which is like the Blockchain Explorer for Falcon, you can see this data there. But for now we can just put some chipper just to make sure that it stays here. So they submit their application and at this point users don't do anything. It's just a source providers, once they have done their applications, time goes on, we move to the next stage.
02:51:05.260 - 02:52:01.010, Speaker B: And what they see here is that their application is now waiting approval. This is because this is the time where the Dao members get to vote and why are they voting. So one of the limitations that we currently have is that it's very hard, I'm not going to say impossible because I'm sure someone might be able to do it would actually be a pretty cool hackathon project if you could. But it's really hard to verify that a filecoin deal contains exactly the zip file from the GitHub repo to start with. You would need an oracle to know what the GitHub URL actually means. But I guess eventually the submissions for repos could include the repo hash as well. But still on chain you would need to hash the entire repo, which is insane memory requirements, obviously.
02:52:01.010 - 02:52:56.560, Speaker B: And you would need to hash essentially the data available on IPFS and then compare it to the hash of the GitHub repo. That's tricky. So what we are doing is we are calling on the Dao members to go on FalcoIn verify, go on FalcoIn, get the data from FalcoIn. So from the deal ID and the PCID get that from FalcoIn, hash that data, compare that against the hash of the GitHub repo and if they are satisfied that the storage provider is indeed maintaining the data that they say they are, then they vote yes. Meaning, yeah, I checked, it looks legit. Once the vote reaches 50%, like if 50% of the Dow members vote that the deal is legitimate, it's considered to be approved. Meaning that the Dow has voted and they have approved this.
02:52:56.560 - 02:53:24.360, Speaker B: So in this case user one has more than 50% of the votes so it becomes automatically approved this deal. So when we go to the next stage, the storage providers can see that their deal was approved. So the Dow is voted, it has approved this deal. The potential reward here is 250 fuel for this deal. This value is incorrect here. We have to fix it. You can see that the potential award is 150 fuel.
02:53:24.360 - 02:54:11.930, Speaker B: So at the last stage they can collect their reward. The way the reward collection works is there is a method on an actor on FalcoIn. Actors on FalcoIn are like smart contracts. We're going to go over this after on the architecture but essentially the smart contract can verify that a FalcoIn deal is healthy. What this means is that for the whole period of the deal duration the storage provider was able to provide the necessary proof of spacetime. However, if they have not done that the deal is not healthy, then they are not able to collect the rewards because obviously they did not keep their promise to the Dow so they would not be able to collect anything. But in this case, assuming that they did, they'd be able to collect here.
02:54:11.930 - 02:55:07.580, Speaker B: 99 is again the wrong number. They'd be able to collect 250 fill and get that money sent to their wallet. So now let's look at the architecture of this and where we are going from here. So the way we want this to work is we have our little front end which is what we just saw in this demo. This front end is connected to a smart contract which is written in solidity the data. Maybe it gets data through some indexing server or maybe we deploy a graph on the FalcoIn network to get this data from a Rest API or from a GraphQL API instead of going directly to RPC calls, but doesn't matter. So there's a solidity smart contract that handles the voting, the Dao funding, the storage provider rewards, the deal making and the deal verification.
02:55:07.580 - 02:55:46.424, Speaker B: The key pieces here is that the deal making and the deal verification need to talk with FVM actors which like I said are like smart contracts on FalcoIn. But unfortunately this part is still under construction so it's not ready yet. There is no solidity library for solidity smart contracts to interact with FalcoIn primitives. There is a mock library available. You should search the Docs or search discourse for that or maybe I can send you the link later so you can see what the interfaces will look like. But it's not actually working yet. So there is that limitation there.
02:55:46.424 - 02:56:40.884, Speaker B: So we are keen to get this off the ground and get it working soon. So what we were thinking of doing right now oh sorry. So just to summarize, the current roadblock that we have is that there are no solidity libraries and also if you want to call actors on the FVM from Solidity, you have to encode the parameters in CBOR and that is a tricky encoding to do in Solidity. I heard that there's already a library for that, but I couldn't find it yet. But that's also a tricky part. So right now it's just hard to make those calls. So what we thought we would do is to make the deal making and deal verification work for now is we would use Web Three storage, which is also a product of Protocol Labs, and essentially it is an abstraction on top of Falcon and IPFS, where you can go you can store files very easily.
02:56:40.884 - 02:57:38.428, Speaker B: I think they have a Rest API as well, so you can do it programmatically from some server. So our goal is to have the Dao, like some Dao members, Dao administrators, something like that, replace the storage providers for this intermediate period before the Solidity libraries are ready. And what would happen is the Dow goes on as normal, but the proofs are submitted by Dow members who have stored this deal on Web Three Storage. So they would just put some pointer to that data on the verification stage and the Dow would still vote if the deal is valid or not. And that's very easy to do because on Web Three storage you get not only the PCID and the storage ID, but also an Ipfsciid, which makes it much easier to retrieve the file because it's pinned by their servers. So that's what we're thinking of doing right now. So right now we have our demo app.
02:57:38.428 - 02:58:34.616, Speaker B: We also have some smart contracts which work except for the part of talking to the FVM. So even though they work, they're not very useful at the moment. So what we're going to do is replace some of those components with Web Three storage and then once the Solidity libraries are available, we are going to swap Web Three storage for native FalcoIn primitives in Solidity. So yeah, this is extremely exciting though. I'm not sure if anyone here has experienced developing Solidity, but it's really cool that you can just take all of your Solidity knowledge and write a smart contract and deploy it on FalcoIn. And even though the storage primitives are not there yet, you can still start playing around with it. You can go on the wallaby network, get some testnet FalcoIn and just deploy it and see things running on FalcoIn.
02:58:34.616 - 02:59:10.072, Speaker B: I was blown away when I tried it because it was super easy. I wrote a little blog post on how to do like a Hello World on, so like if you want a link for that, you can just send me a message on discord. But yeah, there's a lot of cool stuff to do. So yeah, thank you for your time. You can see mine and in his Twitter handlers here at the bottom maybe hurry up, put a note for how long twitter will be running. I'm just kidding. There's also a link to the website and yeah, let us know if you have any questions.
02:59:10.072 - 02:59:11.176, Speaker B: I think we have some time for.
02:59:11.198 - 02:59:13.690, Speaker E: Q A, so that's it.
02:59:15.580 - 02:59:58.360, Speaker A: Awesome. Thank you so much for that. And yeah, if anybody has any questions, feel free to drop them in the global TV chat. In the meantime, I had a couple that kind of came to mind as you were going through this. One is you mentioned that the storage provider at one point would have to sort of open a storage contract for zero fill and then sort of count on the dow to pay them out that stream down the road. I think it makes sense to some degree why that's the case. Is the reason why we can't do that under the Filecoin default kind of reward thing just because that missing library or is there kind of something else to it that the data dow kind of enables that is more interesting than doing it just with the base layer reward scheme.
03:00:00.300 - 03:00:41.910, Speaker B: There are probably more reasons to it. A reason that I think is compelling is that it makes it very easy for a group of people to come together and fund one specific thing. While I'm sure you can somehow do it on Falcon now, but it would be harder, as in, like, some doubts exist and they solve problems that could be solved before, but they make the cost of what's the word cooperation much lower. So that's kind of the idea here. You can come together with a bunch of friends if you feel very strongly about a certain piece of open source software. We like, everyone chip in $5 and maybe we can store this for a long time. And I think that's pretty cool.
03:00:43.080 - 03:01:29.030, Speaker A: Got you. Yeah, I do too. I was thinking about even extending that. I wonder if you've thought of ways where you could actually do sort of like what GitHub had done and sort of actually incentivize storage of large amounts of different repositories even if they don't have backers specifically the IPFS one, for instance, feels like a really natural one to want to back up, especially using Filecoin. But my random repo that I care about, but maybe I don't have the funding to back up. It would be cool to see if there was a way where we could kind of have a kind of community pool that could go out and identify other repos that maybe don't have direct funding but could use a pool of funding to do so. I don't know if you've got any thoughts into that area as well.
03:01:32.120 - 03:02:00.320, Speaker B: Inez and I were discussing a few days ago. So if you participate in the Dao often, you could maybe get some loyalty points for being an active member of the community. So maybe, let's say if you have participated for five epochs, which might be, I don't know, three months, six months, whatever, maybe you get some tokens which for the next epoch gives you like a vote with a higher weight.
03:02:00.980 - 03:02:01.488, Speaker A: Right.
03:02:01.574 - 03:02:32.970, Speaker B: So even though you're not committing funds on that one, you're a valued member of our community so you can signal that this one really should be stored. Guys, I mean, I'm seeing danger here, so maybe that would be a way to do that. But there are so many dows with so many amazing mechanisms nowadays. I don't know most of them, obviously, but I'm sure there are some very bright people that thought about really cool ways to coordinate and do those things.
03:02:33.900 - 03:02:35.144, Speaker A: Cool. Yeah.
03:02:35.182 - 03:02:35.432, Speaker H: Awesome.
03:02:35.486 - 03:02:50.720, Speaker A: Yeah, I mean that feels like almost like building in more of like a yeah, in in that case kind of feels a little bit more quadratic funding where it's like one vote means a little bit more because of the actions that person had taken or like civil resistant thing.
03:02:50.790 - 03:02:51.120, Speaker E: Yeah.
03:02:51.190 - 03:02:53.616, Speaker A: Very cool. Yeah.
03:02:53.638 - 03:03:08.180, Speaker C: This type of thoughts is really important for us as well. So maybe just a shout out to the people who are also listening. If you have any ideas, things that you would like to discuss. I mean, we're on Discord, so feel free to reach out. We're more than happy to talk more about glacier dow.
03:03:08.680 - 03:03:17.130, Speaker A: Amazing. And then I think I saw right at the beginning of the presentation you mentioned you've been working on this for a couple of weeks, but I think I also saw that this might have been a hackathon project at some point.
03:03:17.660 - 03:03:19.496, Speaker B: Yeah, two weeks ago.
03:03:19.678 - 03:03:20.600, Speaker A: There you go.
03:03:20.750 - 03:03:21.256, Speaker B: Amazing.
03:03:21.358 - 03:03:27.000, Speaker A: So there you go. So for everybody watching, here's where you could be in two weeks, which is on the youth global stage.
03:03:27.080 - 03:03:27.950, Speaker E: There you go.
03:03:29.200 - 03:04:00.032, Speaker B: Yeah, I think I would like to incentivize. So there's this open problem right now. I see that rule is in the chats. He can also attest to this. There's this before the solidity libraries are ready, you can do this thing. You can write assembly code in a U file, not in line assembly. It's had to be a U file and call the verbatim which means you can just run arbitrary bytecode that you write by hand like a maniac.
03:04:00.032 - 03:04:39.410, Speaker B: Sounds safe, but what I'm saying is currently an actor, there is an actor on filecoin on some testnet that allows you to interact with the storage layer, but it's super hard to access it because you have to build like the bytecode by hand. So you have to push all the arguments to the stack. Then you have to manually encode the data in Cbore from Rust. If you can make that work, that'd be amazing. We haven't been able to make it work yet, but if you go to our GitHub repo you can see all my failed attempts with commented codes of like manual bytecode. But if someone wants to pick that up, that would be amazing.
03:04:40.920 - 03:05:01.592, Speaker A: Jeez. Well, it's possible at the end of the day somebody did. Make roller coaster tycoon in assembly. So I'm sure we can do storage deals in assembly too. But yeah, I think you need to be a special kind of developer to really want to put yourself through that. So if there's any of you out there, feel free to give these guys a hand. All right, well, thank you very much.
03:05:01.592 - 03:05:18.530, Speaker A: I think we're going to just move on to Charles'chalk next. So Charles is working on another data dao side which is the LaGrange dao. So Charles, when you're ready, feel free to yeah, welcome to the stage and yeah, feel free to jump into your presentation when you have a second.
03:05:19.460 - 03:05:20.736, Speaker H: Yeah, great.
03:05:20.918 - 03:05:21.360, Speaker A: Yeah.
03:05:21.430 - 03:05:23.680, Speaker H: So 1 minute.
03:05:27.060 - 03:05:27.810, Speaker A: Yeah.
03:05:32.720 - 03:07:07.470, Speaker H: So I'm darf so I'm founder of First One. So we have been working on the Frycoin storage and development ecosystem for quite a while and I felt exciting recently because we have found new opportunities and start a new journey to working towards the launch dow for the data sharing and analyst space for decentralized scientists. Basically we see that there was lots of interesting scientific data in the world. They need really better services, so there's lots of good public data sets. People want a world of wide access, they want a lower cost computing power, they want to have contribution and a social impact because when they do the data uploading they want people know that they actually do something good for the society. And also there was a lot of things on the data but it's not really on chain. So which means that sometimes link loss, the space loss, work loss, which is really important for those precious data and Virgining now is basically the version is all based on the centralized system and there was also like sharing the data is based on Google cloud or AWS cloud.
03:07:07.470 - 03:07:51.336, Speaker H: This is really a huge market. From the graph you see there will be more than 250 petabyte storage after a few years. That means that it will be covered 10% or even to 50% of Frycom storage, which really means a lot. But FICO has over 18GB of storage. On the other side, the different scientific data they're still hosting on some central storage places looking for storage space. So we really want to build a place for decentralized science without borders. There were a couple of different places people need storage and need decent incentives.
03:07:51.336 - 03:08:37.760, Speaker H: So we see like enterprise have their data stay in the hard drive. We see like storage provider working hard on better storage proving technology. We see like developers working hard on the retrievals and the token holders, they have five point token in hand. They really want to encourage the ecosystem but they don't really know how to do that. So we need the better places to add different people in the same cycle so they can contribute to the bigger system. With the FBM found that there was a better opportunity to get everybody together. So first of all there was lots of data sets.
03:08:37.760 - 03:09:37.712, Speaker H: You can converting the data set become data schema stored on IPFS and also on the firecorn network. Previously without FVM we can only do one and a half a year which is 18 months storage. But now it's possible to make extendable long term contract to satisfy the needs of storage for long term. For example 75 data in university, maybe they need more than five years, ten years storage. So it will be really good opportunity for them to store on Frico now compared to what happened in the past few years. On the workspace side, we can create a place for people to sharing their data and models. And on the payment side, the K proof can be aggregated on the FVM to reduce the gas cost and increase the volume of transactions.
03:09:37.712 - 03:11:05.990, Speaker H: Cross chain Payment with FVM integration, it gives you more possibilities to make a payment not just in Faricoin, but other blockchain users like polygon and banner chains also make a payment using the cross chain DeFi bridges to enable the storage on Farico network. We have already done some work on that, but now it's become more easy under the modeling and computing kind of working together as well. We already noticed that there are lots of computing power existing in the Frac network for ceiling storage, but not 100% dedicated ceiling after the storage is onboarded. They can also share some of the computing power for the cross chain computing. And if we can create a workspace, put the data set and the model together, and add a PowerPoint in the same places, it can contribute. There was a token economics we needed to be done to sharing the revenue from data provider, storage provider, data consumer and computing consumers. Then we need an effort on the data onboarding and allocated the dedicated funds for people willing to provide a storage and willing to use the data.
03:11:05.990 - 03:12:21.448, Speaker H: This is the technical part of the stack. So in order to make a very strong system we needed to using the smart contract and core services to make the payment where you upload the data to the fragment work you need different people to swap the tokens so the external ecosystem they can using smart contract based on DeFi cross chain to using the same storage services. At the end you need to give people the capability to mint their data asset as NFT. It will be great if it's a one click experience instead of writing a whole bunch of code and at the end all the resources in the fractal network can be contributed to different system. The critical part is about data governance under the computing validation. So we need a data oracle to help proving the data on chain data availability and also the data computing capability. So this part is by a Dao organization.
03:12:21.448 - 03:13:33.030, Speaker H: You need a multi SIG wallet to sign the proof on chain. So we have done some work on top of that under the help of chaining external adapter and also Frycoin native fevm. This is the data and payment flow. So we found that in the new Dow model there are actually new business opportunities for existing Far plus system. There was a couple of things like the data provider. So the data set owner and the model creator they are those data provider with the Frycom Plus project they become five plus deal which will be ten times more power than CC sectors. The storage provider willing to store them for free even they're willing to give them some revenue sharing and then generate some confusing why storage provider sometimes willing to pay for stored client data.
03:13:33.030 - 03:14:20.948, Speaker H: This seems like a very not common in traditional business. This is because when storage provider started using the data to earn extra fire coins, it becomes a data consumer in business side. Actually data consumer is paid for everything. He needs to pay for the storage, he needs to pay for the computing and he needs to pay for the binaries. So when storage provider trying to get the fireplace data for storage he is downloading data from the data provider. That's why he needed to share the revenue to the data provider. It is for the data downloading data is the value, that is how it works for today.
03:14:20.948 - 03:15:19.940, Speaker H: But there's no clear way and a clear market about how we can do this process automatically under in smart contract way. And this is a data schema. So this is a data schema and the model storage so we don't have a bigger data set. For example more than 400 terabytes it will become chunked to 32 gigabyte data pieces. The index data should store in a safe place as a data schema and this schema can be stored on IPFS because people need the index to easily fetch it with the data relationships. At the end of the day, those data include the data schema needed to backup to Frycoin. It should be to backup up to five nodes or even more to provide enough redundancy and availability.
03:15:19.940 - 03:16:38.220, Speaker H: The data space is also on firecoin because it's a huge amount of size and you can trading the data set minted as an NFT on the data market to show that you are actually a data owner of it and you want to provide opportunity for others mix the funds together. This is one example from the community who using the same methodology to mint the five coin snapshot as a data set. So basically like the backup frequently backup the Frycoin snapshot, put it storage on Fryco network and create a CSV format CSN format data set schema and they mint the schema as the NFT with the smart contract and put it on OpenSea so everybody can fetch the data set schema from the smart contract. And because this is really important so it will be the key pointer in the smart contract. With the IPFS hash you get the data safely, persistent in the network for long term.
03:16:41.840 - 03:16:43.004, Speaker A: And in order to make.
03:16:43.042 - 03:17:44.420, Speaker H: The computing become altium easy, we needed to create a space which can join the data provider and the model provider together with the computing power and at the end the communicator will become a computing result back up to fracture network. We have done lots of work in the past few years and we have web3 switch to worldwide searching all the available storage provider and give them retention points. So we know that who is good for the community to store, who is reliable. We have a cross chain storage previously already working with the polygon network and we are planning to migrate to EVM Fryco network. It's really solidly compatible. It can automatically backup storage to five nodes on firecoin ecosystem. We also have eight computing nodes doing the computing based on the IPFS container hash.
03:17:44.420 - 03:18:36.352, Speaker H: So now we are course for participants to join the ecosystem doing the revenue sharing. So we are estimated about twelve to 10% revenue were shared with all the data set uploaders. We have been contributors in the system for a long time since 2020 and we participated in the sneakshot one sensor v two and Fry Austin. We managed the data dow hackathon. You can see we already have lots of ecosystems projects working on the data and related building work. Now we are going to show some work we have been done already. So this is the system we first using as the v one draft version.
03:18:36.352 - 03:19:09.650, Speaker H: So we will be able to connect with the Frypoint valid system and you can log in with the MetaMask to sign in and you will see your wallet address and your balance of the Frycoin. And you can create your data set here according to your need. If you want to create a new one, you can just add the data set. You have your wallet as the owner you can give the name of our data set for example.
03:19:13.620 - 03:19:14.560, Speaker A: Global.
03:19:17.700 - 03:19:18.656, Speaker B: And for.
03:19:18.678 - 03:19:24.790, Speaker H: The data schema you can choose the data schema. For example I have a data schema here already.
03:19:25.560 - 03:19:29.350, Speaker A: You can put the data side here.
03:19:30.840 - 03:20:43.160, Speaker H: So in the future we can fetch it. You see here you create a new data. We're still working on the model and the space and the computing. We managed to get the computing work here from the TensorFlow running all everything, doing all the computing works here and get the result from all the systems. So the next step of the work is really like to make every pieces working together computing hashi, machine learning, FPFS integration and create the working space for everybody. And the token sharing model with this margin storage we are working on provide people a feeling of 30 gigabit bytes of free storage. So with those storage can be connected with the data dow.
03:20:43.160 - 03:21:13.540, Speaker H: You can use this as AWS compatible filling storage and the storage data used stored on the datadal will be backup to IPFS and then back on five nodes and those storage providers will share their revenue with you. And as a data provider you get income because your data value when data model start and the computing power start, you again extra value from your machine learning models.
03:21:13.700 - 03:21:14.410, Speaker A: Yeah.
03:21:14.860 - 03:21:34.360, Speaker H: So that's pretty much about what we are now and we're working toward the next milestone to bring the computing power online. And please follow our Twitter and if you have any questions, you're also welcome to me on Telegram.
03:21:34.520 - 03:22:15.064, Speaker A: Thank you. Awesome. Thank you Charles for the presentation and also for those demos at the end on what's actually being built. I think really awesome to see just this concept of being able to take just kind of underlying infrastructure and actually make it really easy for end users to store files or then eventually do compute and these things seems like really valuable effort that's being put into this. So thank you for that. Just see if there's any questions from the chat. But it doesn't seem like any have come in through so far.
03:22:15.064 - 03:22:34.000, Speaker A: So maybe just curious on your end, like if you were you yourself, you say you've been in the community for a long time and I saw a lot of the hackathons and stuff there. If you were going to be building this weekend at this hackathon, what would you be thinking about and what are some of the projects that come to mind that you'd like to see built this weekend?
03:22:34.820 - 03:23:38.550, Speaker H: Yeah, so I'm really interesting about the project. He make a usage of the data. For example, we see in last datadog hackathons we see people like using the data for the decentralized routing because the CDN network building on top of the data is trying to share using the revenue sharing from the data storage and redistributed to other services become a cycle. We're also interesting to see people how to do in the governance part, for example, votings, sharing, openings, proposals, submissions. And the third part is something like we really like to see people can using Firecoin provide value for access like Miro. We know that Mirror is already using the IPFS and the Firecoin storage, but how can make them use more and eventually pay more in the future. So that will be a very interesting topic for us.
03:23:39.640 - 03:24:03.528, Speaker A: Amazing. Cool. It totally makes sense. Okay, great. I didn't see there is actually okay, cool. Somebody asked is there really a connection in between IPFS and NFTs? I guess it might be worth kind of dipping in a little bit closer into how you can kind of use IPFS to be that storage layer behind NFTs.
03:24:03.704 - 03:24:17.756, Speaker H: Yeah, actually we see like NFT stored on IPFS is valuable, but the only issue is like lots of NFTs have IPFS content hashi but they don't really tie together and where they're stored.
03:24:17.788 - 03:24:17.984, Speaker B: Right.
03:24:18.022 - 03:24:43.448, Speaker H: That's just one IPFS. How about the IPFS Content? We know that IPFS is not incentive to store for a long time yet. So have IPFS storage backup on Frycoin and building the relationship, bonding together, then user feels safe. Like yes, my storage is on IPFS and NFT. So permanent storage, that is how it works.
03:24:43.534 - 03:25:13.308, Speaker A: Right? Right. Yeah, exactly the kind of NFTs right now a lot of them have the content hashes, but of course if somebody stops serving that file or the network stops serving that or whatever, even Gateway, a lot of people use gateways instead which is even more fragile, then your NFT, at least the content behind it goes away. But then yeah, actually having that defined relationship between filecoin and IPFS and kind of having that guarantee that perpetual storage.
03:25:13.484 - 03:25:32.120, Speaker H: Is sort of the FBM, we don't really rely on other block cross chain solutions. We can have febm Native solutions, smart contract, get everything in one system, which means makes sense, ultimately much easier than the cross chain solutions.
03:25:32.620 - 03:25:33.320, Speaker A: Definitely.
03:25:33.470 - 03:25:34.410, Speaker E: Very cool.
03:25:34.860 - 03:25:35.320, Speaker B: Awesome.
03:25:35.390 - 03:25:51.968, Speaker A: Okay, well that's all the time we have on our end. Charles, thank you so much for your time and your presentation on the LaGrange Dao and looking forward to having you back on the show at some point. And also feel free to join the discord and chat with people as they build over the yeah, thanks for being here.
03:25:51.974 - 03:25:52.690, Speaker E: Thank you.
03:25:54.660 - 03:26:21.210, Speaker A: Awesome. Okay, cool. And then we're going to go to our last, but certainly not least talk. So thank you again to our last panelists and yeah, going to invite Pooja to the stage. Hey Pooja, feel free to share your camera, unmute yourself and welcome to the stage. Excited to hear about the FBM bootcamp from Pooja and always wonderful to have Pooja be a part of anything we're doing basically. So welcome to the show.
03:26:21.980 - 03:26:22.776, Speaker F: Thank you.
03:26:22.878 - 03:26:38.056, Speaker I: Super excited to chat about this today and also very excited to be participating in the hackathon this time. So that's been but yeah, I will share screen. And does this look okay, Jacob?
03:26:38.248 - 03:26:39.288, Speaker A: Yeah, looks great.
03:26:39.394 - 03:26:41.776, Speaker D: Okay, great, thank you. Awesome.
03:26:41.878 - 03:27:48.996, Speaker I: Well, yes, as Jacob mentioned, I'm here today to talk about the SEM bootcamp, also formerly known as the Radius Fellowship FBM Edition. And so for those of you who may not know me, I work with TEFRA Labs, and Radius is a project from TEFRA Labs. It's a decentralized talent marketplace. And so for the Radius Fellowship, this is a program we recently launched and we basically saw that there was a need for people within the Web Three space to have more protocol specific training if they were interested in finding future opportunities within Web Three and maybe in that particular protocol ecosystem. And because we know and love the filecoin team so much and also have been watching the progress of FVM and Fevam really closely over the last few months, we thought we would run the first version of this protocol specific training program with Fem. So the radius Fellowship more broadly is an advanced training program for folks who are interested in learning how to build with new protocols. We are really excited to kind of introduce a community element to it.
03:27:48.996 - 03:29:00.968, Speaker I: So this is a cohort based program and folks apply to be part of the fellowship. We go through a little selection process so that we can make sure that the cohort will have really great connections and really start to build that sense of a network and community amongst itself. And then we're also working with the various protocol ecosystems to identify grant opportunities for the folks who participate in this cohort so they get an opportunity to build something that's real, sort of like get we all love hackathon prizes. So it's sort of a similar vibe in the sense of getting some funding to work on something that's meaningful within this ecosystem, building a community, getting the training to know how to really confidently build within that ecosystem and then seeing what that sort of opens up in terms of future opportunities after the program is done. The first cohort, as I mentioned, is focused on FBM and we're starting this program in early January next year. The applications are closing next week, but they're still live now. So if you do want to take a peek at that, the website I think was on the previous slide, but that's at Fellowship Radius Space and we are looking for folks who especially for this first cohort, we want to make sure that everyone is really set up for success.
03:29:00.968 - 03:29:44.216, Speaker I: So looking for folks who do have a few years of engineering experience, but it doesn't have to be in Web Three. So I think a lot of the folks who are maybe participating in this hackathon could be a really great fit for the first version of this program. And then we are currently charging a fee for the course, but there are fee waivers that are available as well and that's something that we are planning to be fairly generous with. So ultimately, if you are interested in participating in this program and you would be really excited to complete all the assigned work and participate in projects with other people in the cohort and really just do the work of going through this boot camp, because it will probably be a fairly intense experience for the folks who are participating. For this first version, we'd be happy.
03:29:44.238 - 03:29:44.788, Speaker D: To waive the fee.
03:29:44.804 - 03:30:54.384, Speaker I: It's mostly just about making sure we have people who are really excited about this and willing to put in the effort it takes to be successful. So just to give a little bit of an overview of how we're thinking of structuring this program, it's a four week program officially, but there are a couple of precursor weeks, I would say, or kind of preparatory weeks for folks who are newer to Web Three. The first week or week negative one, as we're calling it, is kind of a more general introduction to Web Three broadly, sort of like the ideology of the space and especially how that ideology and some of that ethos translates into how we think about building projects in Web Three. I think it's like a very unique space largely because of just how many shared values and principles there are and how that does translate to how people think about building software and projects more generally. So I think it's always important to start with that. And then we'll also be doing a little bit of a deep dive into Solidity. The first version of the FDM boot camp is going to be focused on Febum because also just because of the timing, it's early 2023 and so Febum will be pretty robust I'm sure by that standpoint by that time.
03:30:54.384 - 03:31:57.664, Speaker I: But I believe the timing of the FDM itself is scheduled for later in Q One 2023. So that's why we're sort of focusing on Febum for the first version. But we will be doing a little bit of a deep dive into Solidity for folks who this may be like their first time kind of experiencing it or they're sort of like newer to working with Solidity. And then the full program which everyone will be participating in who's accepted into the cohort is the four week program and the first week of that will be focused on file Quinn Protocol fundamentals and also some of the architecture of Fem, starting to do some introductory content on that front. The second week will be more of a deep dive into how Fem itself is structured and some of the tooling that folks can use if they're looking to deploy projects. We'll also this week talk about use cases and start to brainstorm and ideate on really valuable opportunities that might exist in the File Queen ecosystem to build high impact projects on Fem. And then the third week will sort of kick off formally working on bigger projects.
03:31:57.664 - 03:33:24.476, Speaker I: There will kind of be like smaller projects that everyone is kind of doing the same thing the first couple of weeks and then week three will be more like choose your own adventure type of projects with teams that will help you form and then if you're interested in that you could also work solo. And then week four is kind of like wrapping up those projects or deciding what the next steps would look like if they are going to be longer term, helping to construct portfolios and so on, if that's interesting. And then the last piece of it would be thinking about how to set folks up in this cohort for whatever future opportunities might be interesting to you. So whether that's looking for grants to continue the work that you were sort of doing during the program, or finding new grant opportunities, whether it's looking for full time opportunities in the FBM or sort of that general ecosystem or other ecosystems, or finding teammates to continue working on exciting projects with. This is a little bit of just today how we are imagining the weekly structure will kind of look. So we've planned basically a live session every weekday and there will be some amount of async work as well, pretty much every day, although a lot of this will kind of be at your own pace, the non live sessions at least every week. We'll sort of have a project assignment as I mentioned, and then we're trying to introduce other sessions to make this fun and expanding horizons in terms of thinking about opportunities in web3 more broadly.
03:33:24.476 - 03:34:34.970, Speaker I: So we're planning on doing weekly guest speakers who are all amazing humans and also giving cohort members sort of like private AMA sessions and so on with those speakers also doing small group sessions so that we can really start to build that network and community within cohortmates. Some of the types of live sessions that we are planning on organizing include live coding sessions, lectures on many different topics sort of governed by the theme of the week and then a number of different deep dives which we'll be happy to sort of organize and schedule based on interest. But these are some of the topics that folks have already mentioned being interested in, that we're planning on covering and then also just throughout the program we are really here to basically support. We're doing this because we want to see how we can help set people up for really amazing careers in Web three. And so there will be numerous opportunities to kind of get feedback and mentorship from the folks who are running this program and also others within the ecosystem. And as I mentioned, we're working to identify projects and grant opportunities for folks to kind of pick up during the program as well. So you sort of get that real life experience a little bit.
03:34:34.970 - 03:34:49.608, Speaker I: This is the current group of folks that is organizing the fellowship and it's myself, Rohan and Steph, all really friendly people and yeah, excited for you to meet them if you decide to participate.
03:34:49.624 - 03:34:51.964, Speaker D: In the program and that's pretty much it.
03:34:52.002 - 03:35:03.090, Speaker I: If you have any questions, feel free to email us or DM us on Twitter and the website is fellowship radius based and you can take a look and apply if you're interested.
03:35:03.940 - 03:35:04.930, Speaker D: Thank you.
03:35:07.380 - 03:35:25.768, Speaker A: Amazing. Thank you. Pooja it sounds really exciting and I mean also a perfect segue from if you hack this weekend and really like what you see and want to keep going. And this seems like an awesome way to sort of take that deep dive and go through a really rigorous experience and maybe at the end of it, it probably will be life changing for.
03:35:25.774 - 03:35:29.016, Speaker B: Some of these people. So I'm really excited to hear that.
03:35:29.038 - 03:35:33.240, Speaker A: And I'm glad that we talked about this at the hackathon. I think it's perfect timing.
03:35:35.100 - 03:35:35.800, Speaker H: Cool.
03:35:35.950 - 03:36:14.630, Speaker A: All right, well, thank you again pooja and thank you everybody for tuning in today. Really appreciate you all being here. And of course, with that, this is the end of the Hackfebham summit, but of course, it's only the beginning of Hackfebham. So everybody, if it's not already obvious, you can start hacking and really excited to see what everybody builds in your submissions on Sunday after this weekend. So happy hacking from all of us at Ethgobal and from the Protocol Labs team and everybody here. Really excited to see what everybody builds and hope you all have a great weekend and we'll catch you on the discord. Yes.
