00:00:05.290 - 00:00:22.030, Speaker A: And let's jump right into it. So, next up we have Danny Ryan from Ethereum Foundation doing his talk. And it is titled The End of Proof of Work, which is already hot enough of a topic, so let's get right into it and I'll let Danny take over. Welcome, Danny.
00:00:22.610 - 00:00:30.658, Speaker B: Thank you. Actually changed the top the title name, I think it's called Killing Proof of Work. Now a little more aggressive.
00:00:30.754 - 00:00:31.574, Speaker A: Even better.
00:00:31.692 - 00:00:34.120, Speaker B: Okay, so you all can see this.
00:00:34.650 - 00:00:35.814, Speaker A: Everything is great.
00:00:35.932 - 00:01:30.630, Speaker B: Okay, cool. Today I'm talking to you about killing proof of work on ethereum at least. But we might inspire others to kill proof of work too. The subtoc is when, why and how emerge. First, I can talk a little bit about Win recently, which if you were following in the past week on the internet, many developers and researchers met together for the Amfora interop, and we had much progress on the merge, specifically on killing work, proof of work on unifying the Beacon Chain consensus with that of the execution layer of ethereum today. This was pure joy, this picture. This was like T minus two minutes before our final kind of closing dinner and we successfully had launched a test net of 100 nodes, 10,000 validators, had proof of work going, had proof of state going.
00:01:30.630 - 00:02:09.910, Speaker B: And they came together and we're all cheering. Actually, we're all looking at a screen and cheering because of this tiny little text that appeared on the screen which says entered proof of stake stage and then subsequently watched that proof of stake finalize the merge. So when? Sooner than ever. I know when I began to work on proof of stake in 2017, everyone was saying Casper is coming. And it was, but it wasn't coming quite as soon as we thought it was. But now, this is actually soon on all core devs. Today we're talking about how long to push back this difficulty bomb in December for kind of a final stretch.
00:02:09.910 - 00:02:45.278, Speaker B: We have a testnet up today that you can go and check out, but at the end of November, targeting a reboot of the testnet with the latest and likely to be final specification updates. So it's coming. When it's coming? Why? I talk about this a lot. Three S's to increase security, increase sustainability and scalability of ethereum while retaining decentralization. These things are hard to do. It's one of the reasons it's taken a long time. But here we go.
00:02:45.278 - 00:03:15.178, Speaker B: I'll dig into each one of these and we can better understand what I mean when I say this. So, security, I make a claim. Proof of stake is more secure than proof of work. I'll give you at least a high level intuition as to why that is. So, first one, is it's less centralizing with respect to the crypto economic asset at play. So what is proof of work? What is proof of stake? It's really proof of dedication of scarce resource to the protocol. In proof of work that's mining hardware and the burning of energy in proof of stake that's the dedication of the end protocol asset itself.
00:03:15.178 - 00:04:29.986, Speaker B: Ether both of those things are easy to prove to the protocol that you've dedicated to it. And that's why they're good versions of a crypto economic consensus protocol. You could imagine like proof of car would work but it's hard to demonstrate that you dedicated a car to a blockchain but that's the intuition is scarce resource. But the thing about proof of work is you get these economies of scale. The large players are entrenched in supply chains, they're building their own chips and so they can take some amount of capital and more efficiently turn that into profit as opposed to like the home hobbyist which is getting second generation hardware maybe even used hardware light in the supply chain. And so their function of turning their capital into profits is not quite as good as those entrenched in the supply chains. But with ETH and with proof of stake the crypto economic asset is ETH itself and thus the conversion of that into staking rewards is much pure function lacks these economies of scales we see with proof of work the asset is also highly liquid and available.
00:04:29.986 - 00:05:24.210, Speaker B: It's kind of implied by the previous if I want to stake I go get ether. You can get ether in 10 million different places and there's a very active market of trading. Thus you get a pure function of return of capital and you don't have these mega centralizing factors that you do in proof of work. There's also a higher security margin and I don't know if this is very widely spoken about. So we take crypto economic capital, whether that be mining power and energy or the staking asset and a proof of stake protocol and we dedicate it to the protocol so that's this white block crypto economic capital and then you get a return. So some amount of issuance, staking rewards and fees and other ways that you can get a return on that investment. And in proof of work that's your security margin is that return.
00:05:24.210 - 00:06:14.846, Speaker B: And so that's a carrot. We incentivize you to put up your capital to make this thing more secure and you get a carrot. The thing about proof of stake is that not only do we have a carrot but we have a stick. And so the security margin isn't just the return but because the asset itself is in the protocol the asset can not only be rewarded for positive behavior but penalized for negative behavior. So this might be penalized for being offline, not doing your job very well or in the extreme where you're doing something explicitly nefarious you could actually lose all of that capital. So the intuition here is if you try to attack proof of work ethereum, no one can come. Well, somebody probably could but the protocol cannot go burn your mining farm down whereas in proof of stake, those assets are literally in the protocol.
00:06:14.846 - 00:06:58.926, Speaker B: And so the protocol can identify attacks itself and burn your virtual mining farm down. So we get a much higher security margin. And so for the same amount of crypto economic capital securing a protocol, we get a much better security margin. Stick and carrot, better than just carrot. We also get better emergency recoveries. So in proof of work, when you get attacked in a 51% attack, that entity now just is in God mode. And they can reorg and double spend and reorg and double spend and vitalik in a post long ago called this a Spawn camping attack, where essentially, like, you come back alive, you're back at the head of the chain, and then you get attacked again, and you can just do it in perpetuity.
00:06:58.926 - 00:07:22.810, Speaker B: You can't really get your feet underneath you again and secure the chain. And this is because those attacking assets, the mining hardware and the energy are extra protocol. They're outside of the protocol. And so the protocol can't do anything about it. Once you have enough capital to attack the chain, it's game over. Your spawn can't forever. And so you can say to the miners, please stop spawn killing us, please.
00:07:22.810 - 00:08:17.750, Speaker B: And they'll just say, stop spawning, we're in god mode. The nice thing about proof of stake, and I alluded to this in the security margin, is that attacking capital can either be burned depending on the type of attack or can be socially intervened. So many attacks are actually detectable by the protocol itself and can burn nefarious capital. So if you try to rewrite history, you get to do so once and then you get all your assets burned as opposed to proof of work. And certain other types of attack, like potentially censoring can be identified and at least socially coordinated around. So we cannot socially coordinate out a subset of mining censoring mining capital, but we can, because the asset is in protocol, socially coordinate in the event of an issue and essentially fork out evil people's assets. That's a nuclear option and one I don't actually expect to see, but the threat of it is actually pretty powerful in and of itself, sustainability.
00:08:17.750 - 00:08:39.886, Speaker B: The third is this is ethereum proof of work. Well, it's probably more like bitcoin proof of work. I think they use a lot more energy than us. But because the amount of mining power that secures a protocol scales with the value of the protocol, eventually that's where we're going to end up. And that's not where we want to end up. We want to end up more like this ethereum. We want to build new, beautiful utopias with ethereum.
00:08:39.886 - 00:09:47.782, Speaker B: So we need to kick out this energy hungry component. And that's the third s of Y proof of stake and we can take a deeper look at this. The estimated energy consumption of ethereum right now is 80 terawatt hours per year, which is a lot that is akin to the energy consumption of Chile and would put it, if it's its own country, like in the top 40 countries of energy consumption in the world. Bitcoin is actually much worse, orders of magnitude worse and is more like on the order of Poland and is maybe in the top ten, top twelve in terms of countries energy burning in the world. So let's look at some quick napkin math on what this means when we get rid of proof of work. So a normal computer, which I think my computer looks something like this, takes about 400 kilowatt hours per year of energy just to keep it on, do its normal processing, light up its screen and talk to the internet. On Ethereum today there are about 10,000 nodes, give or take some amount.
00:09:47.782 - 00:10:48.730, Speaker B: And so that's four gigawatt hours of energy per year. That's kind of the baseline to run all the computers in the network. And then you have this other thing, the mining, which is that 80 terawatt hours of energy. And so when we get rid of proof of work we actually just become a network of nodes, a network of like the energy consumption is literally just the amount of computers on the internet that are running Ethereum which is not that much energy, it's a bunch of laptops, it's a bunch of home servers. And so we get to take this 80,000 gigawatt hours and slash it out and we just get the four gigawatt hours of running about 10,000 nodes. And even if that scales, even if that goes to 100,000 nodes in the network, which would be awesome, it's 40 gigawatt hours on the entire usage of energy. And so to contextualize that a bit, that's a 99.995%
00:10:48.730 - 00:11:23.878, Speaker B: energy reduction. That's insane. And the intuition there is because you don't have to secure the network. The dedication of the resource, the scarce resource is not energy. The dedication of the scarce resource is ETH itself in proof of stake. And so that is how we're going to go from this to this 99.95. And the crazy thing is if Ether ten x, not making price prediction but if a proof of work asset ten x's, the new equilibrium for the amount of energy you're burning also scales linear with it.
00:11:23.878 - 00:11:45.182, Speaker B: So we also get out of this like this hamster wheel thing of energy. As the protocol becomes more valuable, we'll burn more energy. We don't want to do that. Proof of stake, more secure, more sustainable oh, I didn't do the third one. And more scalable. Oh that's I messed up that slide. Anyway, that said 10% faster block times.
00:11:45.182 - 00:12:17.862, Speaker B: So we're going from like 13.6 seconds to 12 seconds and less variance in timing. Scalability. We actually do get that scalability gain, but that's not like the main reason proof of stake is going to be more scalable at the merge. It's going to give us just a little bit of marginal gain because you get more regular block times and you get a little bit faster block times. But that's not the end of the scalability narrative with proof of stake. What it actually does is it opens up the door for more sophisticated consensus mechanisms with proof of work.
00:12:17.862 - 00:13:18.346, Speaker B: Because the consensus participants are extra protocol, we cannot sophisticatedly orchestrate them to do more complex things in our consensus protocol. And what it really does is it allows us to utilize Sharding, which takes consensus participants and randomly samples them in a very secure way to do distributed work across different subsets of the protocol at any given time. So Sharding, the intuition is that we get to get more out of our consensus mechanism. So the merge lays the foundation for more scalability because by moving from proof for proof stake, we can architect more sophisticated consensus mechanisms to come. So I'm going to shift into we did when relatively soon we did why the three S's, more secure, more sustainable and more scalable while retaining decentralization. And now we're going to do the how. The how and what it's going to look like.
00:13:18.346 - 00:13:45.774, Speaker B: So this is Ethereum after the merge. It looks like a blockchain because that's literally what it is. It is a single unified blockchain. And to an end user it looks and feels like a blockchain. It looks and feels actually exactly like Ethereum does today, except it's a little bit more secure, it's mega more sustainable and we all get to hang out a nice more secure land. But let's dig in a little bit. This is what it looks like after the merge.
00:13:45.774 - 00:14:27.410, Speaker B: We have the consensus layer, we have the beacon chain supporting the security of Ethereum, and then we have the execution layer where all the transactions and accounts and state and stuff lives. If we dig in a bit deeper, we can take a look at this consensus layer. If you're familiar with the beacon chain, you have slot, you have a parent, you have randomness, you have deposit route for bringing in new validators, you have all these system level operations like attestations and deposits and exits. And then you have the execution layer embedded in this beacon block. That again is all the things that you know and love and hang out with in Ethereum today. That's what it looks like after the merge. And actually this execution layer references itself.
00:14:27.410 - 00:14:58.986, Speaker B: So we have kind of this like sub blockchain inside of the blockchain. That's an important point that I'll reference in a minute. So this is the execution layer. This is from the perspective of a user today on proof of work and after on proof of stake. This is what everything looks and feels like. The outer consensus that gives you security is for most use cases and for most users that's an implementation detail, right? As long as I'm getting sufficient security. So this is what Ethereum looks like today.
00:14:58.986 - 00:15:32.310, Speaker B: Instead of that proof of stake consensus layer as the kind of outer secure shell. We have a proof of work consensus layer and we have that execution layer embedded in proof of work instead of proof of stake. So this is what the consensus layer looks like after the merge. We don't need to really go into that. I think that's a bit extraneous but essentially it is consensus and we have some stuff we can shove into consensus in this blank spot. And Ethereum after the merge is simple and we're going to show you how we get there. So this is ethereum today.
00:15:32.310 - 00:16:07.700, Speaker B: The beacon chain was launched at the end of last year in December. And the beacon chain is a consensus mechanism. It's a proof of stake consensus mechanism and is primed to come to consensus on things other than just itself. And parallel to this beacon chain that is running very successfully is the proof of work chain. This proof of work chain as you see, runs in parallel. It has all the user activity today and the idea is we want to take all this execution layer activity and shove it into the beacon chain and let go of our energy burning proof of work overlords. So this is what it looks like.
00:16:07.700 - 00:17:09.190, Speaker B: The execution layer is chugging along in proof of work. We hit a terminal total difficulty. So essentially this block exceeds some threshold of total difficulty that will be decided upon in a few months. And at that point the proof of stake validators say you're mine now and continue make a continual chain, a continual sequence of history from where the previous execution layer lived into proof of stake. And from the end user they go from here to here to here to here and they just are hanging out in a proof of stake chain instead of hanging out in the proof of work chain and we can finally move on with our lives and finish this proof of work business. So again, the key is that we have these two things in parallel right now the proof of stake doesn't really have any much valuable things for users. The proof of work has all that and at a point of transition in time, the proof of stake validators take over the mantle of securing the execution layer of Ethereum.
00:17:09.190 - 00:17:41.118, Speaker B: And the nice thing is that to an end user it just looks like this. The first two blocks here could be proof of work. The next three and forever are proof of stake. And to the end user it just feels and looks like a continuous blockchain. That's major, major design goal like Ethereum is a fantastic place with tons of activity and tons of security and lots of things and needs uptime and it needs consistency. And this merge process has been designed with that in mind. There is no downtime and there's no migration process.
00:17:41.118 - 00:18:17.770, Speaker B: You literally just continue to use your DApps and the security gets better and we get rid of all that energy consumption. And after that we take that consensus mechanism. This is a bonus. This is something we do after, is you shove more things in the consensus mechanism. We have that execution layer inside of the consensus layer. And then we also add the Sharded data layer where the validators not only are processing the EVM and that transaction payload, but they're also being randomly sampled across shards to provide a scalable data layer. Cool.
00:18:17.770 - 00:18:57.110, Speaker B: So there's some engineering implications here. I alluded to it at the beginning, but we have different types of client teams now. We have what we're called ETH one clients. Those become execution layer clients. They build execution engines for this post merge world. They essentially take their client, subtract out proof of work and begin listening to the beacon chain. And so if you're building geth is primarily a sophisticated execution layer that handles transaction processing and state management and all that hard stuff and a very minimal kind of brain called proof of work.
00:18:57.110 - 00:19:30.942, Speaker B: And we're essentially cutting out the brain and listening to the beacon chain after. And what we call E two clients. What is that? These clients become consensus layer clients. And what have they been doing for the past few years? They've been creating highly sophisticated proof of stake engines and those drive that layer of the software after the merge. And so what does this look like? It looks like two pieces of software living next to each other. The execution engine being driven by this engine API. You have user APIs that remain entirely stable, all those Web Three libraries.
00:19:30.942 - 00:19:55.910, Speaker B: Then you have these beacon APIs where if you want to query about validators and different things about the consensus, you ask there. And actually the nice thing is we can take a Web Three library, web3 JS, Web Three Pi, whatever it may be, and just namespace these things. The standard API is still a bit web. Three e. No problem. And then we can add some additional APIs, web Three beacon. And so I can continue to use the same software.
00:19:55.910 - 00:20:23.780, Speaker B: And if I want to get a peek into the consensus layer, the proof of stake consensus layer, I can just call Web Three beacon and the nice things there. There's a bit of UX work to do here. Obviously running two pieces of software is harder than running one. But there's some nice efforts on doing a unified GUI on the two, maybe some unified CLIs. Peter was working on this thing called Minority. Maybe it doesn't help the UX, but it does a nice multi client thing. Check it out.
00:20:23.780 - 00:21:05.170, Speaker B: Anyway, that is it. I will shill these NFTs one more time. If you want to check out, if you want to own a piece of ethereum history, you can go to this OpenSea when merge page. I think the floor has been bought up. But if you want to donate to the researchers and developers working on this day in and day out, you can go buy an NFT, support the cause and these will be distributed to those that work on the merge after or on the merge chain. I think I have a few minutes. If there's any questions, I'd love to chat.
00:21:06.550 - 00:21:24.280, Speaker A: Yeah, thanks danny, one question from one of the audiences like you talked about killing proof of work kind of extrapolating way too far out. What does the world look like with post quantum kind of pieces coming in and any concerns that you may have now for proof of stake in that world?
00:21:25.130 - 00:22:38.634, Speaker B: Yeah, so there are a number of things that we want to do in the next few years. So that involves killing proof of work, that involves creating a more sustainable state solution, that involves bringing Sharding online and probably a number of iterative improvements to the EVM. Once we get a lot of that in place, ethereum becomes like a very sustainable piece of architecture for the internet, except for this one glaring problem which depending on the person you ask, could be in ten years or could be in 50, and that is to make the protocol quantum resistant. The entire internet, including Ethereum, is going to have this problem and it is on the roadmap to replace all non quantum resistant components with quantum resistant components as soon as is feasible. So that was a design goal in a lot of the building and designing of the beacon chain was there needed to be a known post quantum analog for any of the tools and gadgets we were using. So like signature aggregation, we use BLS, that's not quantum resistant, but you can use Starks to do the same thing. You wouldn't want to do it today because it'd be very expensive.
00:22:38.634 - 00:22:52.690, Speaker B: But we do expect in the next five years or so for that to be a much more palatable solution. And so in that probably five plus year range, I would imagine we slowly kind of swap out some of these components for quantum resistant components.
00:22:53.670 - 00:23:16.826, Speaker A: Awesome. Well, hopefully Jared, that was a satisfying answer. One other question I have for you Danny, is and he kind of talked about mostly what's in the future and how we're looking at killing proof of work. Could you give us an update on basically what's happening right now with the Merch timeline just from your overview? Just high level items. We got a couple of minutes so.
00:23:16.848 - 00:24:18.990, Speaker B: We'D have to we talked about this a bit on all core devs this morning. At the end of the interop, which was last week, we had a general thumbs up all around of we had a number of spec refinements and mostly simplifications that came out of the interop and those will certainly be done by the end of October. Then throughout November client implementations will iterate to get these spec changes done. I think we'll do a few short lived testnet launches in November with a target of a sustained testnet at the end of November to run through the holidays. Then we come into January and are able to make a little bit more clear decisions about timeline. From there, it's either going to be something where we're feeling pretty good and it looks like March, April, maybe early May, or things have surfaced where we need more time, more testing, and at that point we would have to kick it down the line. I'm very confident.
00:24:18.990 - 00:24:52.680, Speaker B: I think that the work that we've done and the momentum behind this thing is pretty extraordinary at this point. And I think in January we're going to be feeling pretty good. There will be in December a hard fork and upgrade on the proof of work chain to push back the difficulty bomb. And I believe that would be pushed back for about early May, mid May. And so really, that is what we're tempting to do, right, is before we hit that difficulty bomb. And if not, we'd have to kick it back maybe a month or two.
00:24:53.210 - 00:25:11.502, Speaker A: Well, you heard a year second, because I think you heard it first at the core desk call, but this was great. Hopefully we get things sooner than outlined, but that's the plan, what happens next. So thank you so much, Danny, and if there's any other questions, we'll let them to you over email.
00:25:11.636 - 00:25:13.260, Speaker B: Thank you very much, appreciate you having.
