00:00:08.680 - 00:00:33.312, Speaker A: Okay, we're good. Hello. Hello, everyone. Welcome to week two of Hack FS. This is the first event, and for this session, we are excited to have Pooja with us. She's from the Filecoin team, and she's going to be going over the general topic of developing on Filecoin, so we're very excited to have her with us. It's going to be a good session.
00:00:33.312 - 00:01:04.472, Speaker A: Just a quick question. Who worked on their project over the weekend? Give me a raise. All right. Karate is like, who didn't? Very cool. I think the last event I would point people towards and really encourage you to attend this week's event was the hack feedback session. I know some people in this session were there last Friday. It was a really great time to get feedback from Juan.
00:01:04.472 - 00:01:45.164, Speaker A: There was a couple Textile team members. The recording is on our YouTube channel, so go to it and see some of the suggestions and discussions. There was a very good session. Today is the first check in for your team, so you're going to want to go to your hacker dashboard and just write a quick, very short check in. I think we give a prompt, but it's a few bullet points on what you're working on, which sponsors you're looking to integrate, and any blockers that you're having. And this is what we use to help track your progress and get help to you from any experts who might be knowledgeable about what you're working on. So make sure to complete the team check in.
00:01:45.164 - 00:02:18.150, Speaker A: Today. Monday the 13th, is the first Hack FS check in. If you for some reason don't have any question or for some reason you have questions or issues doing it, just hit up any of the ETH Global team members. You should have all been added to a cohort team sorry, a cohort channel in slack. So that'll be another place for you to relay those updates to ETH Global team or the rest of your cohort. Okay, that's enough logistics. I'm going to turn it over to Pooja and she can get started.
00:02:21.900 - 00:02:59.670, Speaker B: Trent hello, everyone. Let me see if I can start playing this. If I do this, can you see the presentation view? Okay. Awesome. All right, well, hello, everyone. It's great to be here today. My name is Pooja, and I'm the Filecoin product lead, and today I'm going to be talking about developing on Filecoin.
00:02:59.670 - 00:03:50.200, Speaker B: So in today's presentation, I'll start with a brief introduction, kind of a recap of some of the resources that the Filecoin and IPFS and Protocol Labs teams surfaced over the last and Textile Team as well, surfaced last week. And then I'll go into a bit of an overview of the various developer pathways that kind of exist to building your application on Filecoin. The ecosystem can be a little bit complicated if you're not already deeply embedded in it. So this presentation is sort of to help as an orienting function to kind of place all the resources that are available in the biocin ecosystem sort of in context of one another. So that's kind of the second part of this presentation. We'll be talking about those high level pathways. And then the third section is sort of I'll dive into a number of different use cases and examples and talk about how some of these applications are integrating Filecoin into their own application.
00:03:50.200 - 00:04:28.334, Speaker B: And then lastly, I'll talk about how the Filecoin team is here to support all of you during Hack FS and also beyond the end of the competition. And so I do have the chat window open. So if you have any questions, feel free to definitely drop them into the chat. Or if there's something super, super burning, feel free to just unmute yourself and voice your question as well. Awesome. So we'll get started with the introduction. So I think there were a number of presentations last week that talked a little bit more about what Filecoin is, or actually in a lot of detail in some cases.
00:04:28.334 - 00:05:48.480, Speaker B: So I'm assuming today that you at least know kind of the high level of the purpose of Filecoin, how it generally kind of works. And so the one sentence summary of Filecoin is that it's a decentralized storage network that provides data persistence via a decentralized protocol and publicly verifiable storage proofs that make it onto a blockchain. And so this is kind of a dense sentence to unpack this a little bit. Filecoin is obviously a decentralized storage network. We can in some sense, think of it as a two sided marketplace where you have clients who are interested in data storage and retrieval services. There are miners who are the providers of the data storage and retrieval services to clients on the network. And then there's kind of the network, the decentralized network protocol, which you can think of kind of as the intermediary between the two sides of the marketplace and the way it can actually work to give participants in the network guarantees that the behavior they're expecting out of everyone else in the network works as intended is one major mechanism for that is are these publicly verifiable storage proofs? And so if you watched some of the presentations last week, this is kind Ask the Filecoin protocol asks all miners on the network to submit storage proofs at periodic intervals to continually prove that when they say that they're storing your data on the network, they actually are.
00:05:48.480 - 00:06:53.714, Speaker B: And you can trust this because the proofs make it onto a blockchain. And anyone in the world who has synced the blockchain can kind of verify these storage proofs and make sure that they are indeed correct. And so diving a little bit into some of the core features that make Filecoin potentially really valuable for your use case, there are five main ones that I wanted to highlight today. So the first was that with Filecoin you have really granular control over all of the parameters that you might think about when you're interested in storing data on any service. And so this includes in some applications, you might want to have really granular control over where you're storing your data, like the geographic location. Some regions of the world have things like data localization laws, and they require that certain types of data must be stored in their own municipality or in certain jurisdictions that follow GDPR regulations or things like that. So maybe you care about where your data is stored and with the Filecoin network, there is a way to do this to make sure that the miners that you're storing your data with are exactly where you want them to be.
00:06:53.714 - 00:07:37.258, Speaker B: You can also control replication factors. So how many copies of this data, of this particular CID or Content Identifier do you want to be storing on the network? And so this is also something, if you're maybe using a centralized cloud service, you might not have control over this. Most centralized cloud services do make redundant copies of all data that exist on the system, but you don't get to really choose how many you'd like. And so this is another parameter that Filecoin kind of gives users control over. You can also store how long your data is being stored in the network. And there are a few other parameters that also exist today, but many more that will be coming to Filecoin over time. Another core feature of Filecoin is this idea of storage receipts.
00:07:37.258 - 00:08:47.160, Speaker B: So I mentioned earlier that Filecoin asks storage miners to produce these proofs that show that I, as a Miner, am indeed storing your data that you've paid me to store on the Filecoin network for whatever period of time. And you can think of these kind of proofs that make it onto the blockchain as storage receipts. And they can actually be used in really interesting ways in applications as well. Maybe you want to provide your users with some sort of portal where they can see all of the data that they have stored on with your service, all of the videos that they've uploaded or whatever it is and get some sort of ticket or receipt that shows them that they can independently verify that shows them that their data has actually been stored in filecoin with this particular miner. This storage shield started at this particular block and it is continuing to be stored over time. This is when we expect the storage to expire and so on. So storage receipts are a pretty especially in applications that are kind of targeted towards privacy focused or web3 kind of users and applications, storage receipts can be really valuable to include in your application as well.
00:08:47.160 - 00:09:15.994, Speaker B: The third major feature is that Filecoin is a marketplace. So you as a user have control over storage pricing. You get to enter into economic contracts that are affordable for you. It's not like you don't have to just take the price that is set by a centralized storage provider. You get to kind of choose miners that are selling their storage to you at a price that you can actually afford. And so this is another element of control that Filecoin gives users. Filecoin also makes use of Content addressing.
00:09:15.994 - 00:10:20.606, Speaker B: And so again, this is not unique to Filecoin. A number of other protocols make use of Content addressing, including IPFS and various other protocols as well, kind of in the space. But the idea behind Content Addressing is that your piece of data is uniquely identified kind of by this hash of the data. And you can use that hash or we call a CID or Content Identifier, you can use that as the data's address anytime you want to refer to that data from your application. And so filecoin uses content addressing and so this means that a couple of benefits of using Content addressing, or that this feature that we see sometimes with Http, which is a location address protocol, is that sometimes we end up with broken links on the Internet and so on. With Content addressing this, it's not really possible. It could happen in other ways potentially, but that's one benefit of using CIDs and then another is that CIDs kind of uniquely identify data that is stored on the network.
00:10:20.606 - 00:11:10.206, Speaker B: And so it kind of helps you avoid duplication of data. You can see if a particular file has already been stored, and if it has, you don't need to store it again. And then the last major feature of Filecoin is a little bit obvious perhaps, but Filecoin, its entire purpose in a sense really is to provide data persistence on a decentralized peer to peer network. So there are networks like the IPFS public storage network which allow you to store data with peers and it has a lot of the same properties. Filecoin is built on top of IPFS and uses many IPFS protocols. But Filecoin adds this kind of incentive layer with the Filecoin cryptocurrency and this element of cryptographic proofs. And the combination of these mechanisms makes it so that you end up with a PDP network, but one that does have data persistent.
00:11:10.206 - 00:12:03.830, Speaker B: So these are some of the core features of Filecoin. And when you're thinking about building your application on filecoin, you may want to build on top of the core protocol implementations, which are kind of in this box in the bottom right, which are you may have heard these names before. The Lotus implementation, which is in Go filecoin. It's also a go implementation. Forest is a Rust implementation and Foohan, which is a C implementation. Or you may choose to use any of the other number of a huge number of other services and libraries and products that are being built in the Filecoin ecosystem and that can make for certain use cases can make development on Filecoin much easier. And so today I'm going to talk a little bit about some of these different developer tools and how they can be kind of assembled together to build applications in various use cases.
00:12:03.830 - 00:12:45.054, Speaker B: Last week and the week before, we had a number of workshops through Hack FS that have been really incredible. I highly recommend everyone check these out. So last week, Juan gave a talk about kind of an in depth overview of the Filecoin protocol and how the system works overall. That's, I think, a great introductory explanation if you kind of want to understand the underpinnings of the whole network and the whole system. It's fairly complicated, but I think this is, like, a really great explanation of it. Andrew from Textile gave a great presentation on getting started with Filecoin. And this kind of talks about one of the technologies I'll dive into today, which is the Power gate.
00:12:45.054 - 00:13:14.694, Speaker B: And so I think that I refer to that later as well. I think this is a great workshop. Carson from Textile also gave a presentation on getting started with the Textile Platform. The Textile Platform includes a tool called Buckets, which I'll talk about today as well. That's kind of a hosted solution to store your data on Filecoin. Jimmy from the Filecoin team talked last week about Slate, which is a full featured sort of really beautiful kind of application that's being built on Powergate and Buckets today. And then we have this presentation.
00:13:14.694 - 00:14:05.126, Speaker B: And then there are two more workshops that are coming up later today. One on how do you build an application like a chain explorer using Lotus, one of the core filecoin implementations. And then later today, we're going to have a workshop from two of the folks actually on the Lotus Team who will walk through how to use the Lotus CLI. Okay, so with that overview, let me just quickly check and see if there are any questions here. Okay. I can't actually see my mouse, so I can't scroll up, but I see one question here, which is from Unmole, which says is File Point IPFS network a private network separated from the public IPFS network? Okay, yeah, great question. Today it is all IPFS like goipfs nodes, JS IPFS nodes and all filecoin nodes.
00:14:05.126 - 00:14:31.426, Speaker B: They're all ultimately underneath everything. They all speak P to P. So the technology kind of is there for them all to interoperate on the same network. Today. They are like the public IPFS and public filecoin networks are separate networks. And if someone else had a question earlier that I missed, feel free to voice it now. Okay, sounds like we're good.
00:14:31.426 - 00:15:18.194, Speaker B: I'll move to the next. So, starting to talk about kind of the high level developer pathways. So when we think about building on this technology stack, there are kind of four major avenues I would recommend. One starts with just looking at core IPFS technology, including the IPFS protocol implementations, and kind of bridging that to Filecoin in a number of ways. The second is this class of services that it's kind of got a mouthy name, but it's filecoin backed IPFS pinning services. So we call it FPS for short. These are services that exist in the ecosystem, run by companies that will basically take your data, pin it to the public IPFS network, and then also backup your data to file point.
00:15:18.194 - 00:16:08.690, Speaker B: And these are hosted services, so it makes it really easy to kind of integrate into your application. And we recommend this for the vast majority of application developers today. The third pathway is Powergate, and again, I mentioned this earlier, but this is a technology that's being built by the textile team and you can think of it as a local version of an FPS. It allows you to connect to an IPFS node and a filecoin node, and specifically Lotus, and run your application kind of connecting to the nodes that are run locally on your machine. And it provides a number of really easy to use interfaces on top and abstractions that make it really easy to interact with both networks. And then we also have filecoin protocol implementations. So I'm going to start by diving in a little bit into IPFS protocol implementations.
00:16:08.690 - 00:17:10.194, Speaker B: And as I'm sure many folks here know, IPFS is a free and open source network stack protocol that allows users to store and transfer verifiable data with each other. IPFS has been around for a few years, and so we've seen a huge explosion in the adoption of IPFS, especially over the last year and a half, are so many projects that have started using IPFS in various ways. This is just kind of a subset of the teams that we work pretty closely with. And one of the core things about IPFS is that a lot of the core file system and file storage protocols that IPFS uses, filecoin uses as well. The one missing piece from IPFS, and kind of the hole that Filecoin was aiming to plug, is this idea of data persistence. So in most cases on IPFS, the way that your data kind of gets and by data persistence, maybe I'll just describe this first bullet. It kind of explains it in IPFS.
00:17:10.194 - 00:18:18.438, Speaker B: Most of the time when you are adding your data to the network, you're relying on other peers in the network to kind of voluntarily pin your data for you. So if someone else I want to store a particular image and I decide to add it to the public IPFS network, someone else may find value in that content and that peer may like, you know, I want to IPFS pin this particular CID. And then that data is now pinned in the IPFS network. And what that means essentially, is that it won't be garbage collected the next time the local node tries to garbage collect the data store. And so pinning is kind of like the key idea for persistence on these. So sometimes this does happen where people will voluntarily pin other users data but that doesn't always happen. And so if you're thinking about building a production application on IPFS, the strategies that folks often employ are it looks like either you maintained your own local IPFS node or a cluster, which kind of is like this orchestration layer which allows you to scale it's.
00:18:18.438 - 00:19:10.926, Speaker B: Basically, if you're storing a huge amount of data, you might want to instead of using just like a single IPFS node, you might want to use cluster, which kind of is an abstraction over multiple IPFS nodes. And so you could pin your data to your own local IPFS infrastructure. And so for users that are comfortable kind of maintaining their own infrastructure and maintaining a certain SLA that you might need for your users to interact with data storage through your application, this is like a good solution, but this isn't comfortable for all users, right? Maybe you have way too much data for this to make sense. Maybe you have less experience with DevOps or infrastructure. This is not something that your team kind of wants to get into the business of doing. And in those cases, teams will sometimes use a centralized IPFS Pinning service. And so that's kind of related to the FPS concept that I mentioned before and we'll talk about in more detail.
00:19:10.926 - 00:20:22.358, Speaker B: But really there are a number of groups in the ecosystem which run IPFS pinning services and usually these are like long lived IPFS nodes that are hosted on some sort of cloud service provider like AWS or something. And then a company, one team that runs an IPFS Pinning service is Pinata. So Pinata, for example, will make their IPFS storage or like their IPFS node kind of accessible via an Http API, and then you can send storage requests and retrieval requests to that service. And so most teams that interact with IPFS and server production capacity will use some sort of IPFS Pinning service. And then the last two options are more relevant to our conversation today, and they're newer options, so they don't have as many people using them. You won't see as many guides about this, but one option is to just pin your data to a decentralized storage service or a decentralized storage network like BioCoin. You can either do that by using some of the other technologies that I'll talk about later, or using directly Lotus APIs or something like that, or you can do that using a filecoin backed IPFS Pinning service.
00:20:22.358 - 00:21:02.162, Speaker B: And so it's just a variant sort of of the centralized IPFS pinning services that I mentioned before. They're long lived IPFS and Filecoin nodes that instead of pinning everything to AWS, will ultimately pin everything to the filecoin storage network. So IPFS has a really mature ecosystem today, especially compared to filecoin. And so there are a number of really awesome products that have been built to interact with IPFS protocol. So you may have heard of Goipfs. There's also JS IPFS and IPFS Cluster. I talked a little bit about cluster before.
00:21:02.162 - 00:21:42.542, Speaker B: It kind of like orchestrates across multiple IPFS nodes. And there are a number of other products here as well. So the IPFS team maintains an Http client library, which can be used with any JavaScript application and allows you to interact via an Http API with any running IPFS node, whether it's a Goips node or a JS IPFS node or cluster. I believe it works with Cluster. I can double check, but it does definitely work with Go and JS IPFS. There's also IPFS desktop. That's a local GUI application basically to interact with all of the IPFS functionality that you can kind of access through the command line.
00:21:42.542 - 00:22:27.846, Speaker B: And it's really nice, it's like a really great starter tool if you're just getting started with IPFS. IPFS Companion is a browser extension that allows you to also kind of pin websites and other data to IPFS through your browser. And then there are a number of IPFS pinning services that are listed here that exist today. There are many more than I've kind of listed on the slide, but a couple of the ones that popular ones that we see a lot of people using are infira temporal from Rtrade and Pinata. Okay, so I will take a quick look at the chat. Okay, so Joseph has a question. Could the file coin backed IPFS pending services be a potential point of mean? I guess it'd be helpful if you want to clarify.
00:22:27.846 - 00:23:08.918, Speaker B: I can try to answer what I think this question is asking. So, I mean, in the sense that it's a centralized it is kind of a centralized service, you have a third party who's managing the infrastructure for you. In that sense, it potentially could be a point of failure. But oftentimes the teams that are running these sorts of services are really experienced infrastructure and DevOps folks. They're building a business that has guaranteed SLA for the service. And so they're professionals generally who are running this infrastructure. And so it's probably much more robust and reliable and you can have higher expectations often than if you're running your own node, unless you yourself are really excited about DevOps or infra and want to invest in maintaining high SLA.
00:23:08.918 - 00:23:55.980, Speaker B: So in a sense, yes, it could be a point of failure, but in most cases it's one of the most reliable ways to kind of interact with these networks. And then Alex asks how to connect our IPFS cluster to IPFS IO network, how to think. So IPFS cluster is the I'm not sure what the website is for, I think it may be cluster IPFS IO. Not sure I can find the link for you. But cluster is just software that you can kind of download and run, and when you run it, it automatically connects to the public IPFS network. So that's something you wouldn't have to worry about manually. Okay, great.
00:23:55.980 - 00:25:00.826, Speaker B: So we'll talk next about these filecoin backed IPFS pinning services. Okay, so this is kind of like one high level architecture diagram of an IPFS, sorry, a filecoin backed FPFS Pinning service or an FPS. Two things I'll just call out really quickly are that these types of pinning services, the FPS pinning services one of the key benefits why they can be really valuable for your application is that if you want to interact with the filecoin network and also have fast retrieval. You need some sort of intermediate layer, either IPFS or some sort of caching layer or something that will allow you to retrieve data kind of at the subsecond performance level today. The way that filecoin works because of the storage proof that I mentioned before, storing and retrieving data takes. There's kind of this overhead process that's called like sealing and unsealing data. There are some other solutions that we have built into the protocol today, but they're still a little bit raw.
00:25:00.826 - 00:26:05.380, Speaker B: So in most cases it ends up taking a bit longer to kind of retrieve data directly from the filecoin network. And so if you want to have subsecond retrieval through the filecoin network, you generally want to interact with something like a filecoin. Back to Pinning service, the other thing to note is that these services, as I mentioned, because they're using filecoin kind of as the underlying storage layer, all data is being persisted on a decentralized network and it's not in the control of a centralized cloud provider. So this is kind of, again, simplified architecture for what IPFS Pinning services tend to look like. So they'll run sort of long lived IPFS node, like a Goips node in the cloud, and then expose that through some sort of IPFS Pinning API to users. In between, there may be some sort of service that does things like user management and it'll kind of manage requests to the IPFS node that's ultimately interacting with the public IPFS network. And here are some other teams as well, so I mentioned three of these, but there's also Global Upload and Internum are other Pinning services as well.
00:26:05.380 - 00:27:07.590, Speaker B: And so how these architectures are amended when you include the filecoin piece is that either from the user facing perspective, often the service looks exactly the same. You kind of still have an IPFS pinning API. But in the background what's happening is that in addition to an IPFS client, you may have a filecoin node as well, like a Lotus node. And as your data is kind of being cached on the public IPFS network, the service is also sending the data for storage on the public filecoin network as well. And then when it comes time to retrieve the data, different services employ different strategies here, but one thing that we've seen a lot of is that if the data is still cached on the public IPFS network, the service would retrieve it directly from there. And if not, the service would trigger kind of a retrieval deal through the public filecoin network. In order to then serve it back to the user.
00:27:07.590 - 00:28:10.326, Speaker B: We have some documentation on kind of the general structure of FPS and how they can be used on the filecoin documentation site. And we ran a summit, the IPFS Pinning Summit, earlier this year in May, which generated a bunch of really awesome content. So if you're curious about these sorts of services and what they do, I highly recommend looking at some of the videos that were produced from this event. And so when we talk specifically about file coinbacked IPFS pinning services, one of the teams that we've been working super closely with, like, an awesome team, and you may have seen some of their workshops, is the textile team, and they're building on the textile hosted platform, which is called Textile Hub. There is also the ability to interact with this sort of product called Buckets, and that's essentially textile's FPS, and that allows you to interact with IPFS storage. Also filecoin storage through the public mean. And it's all kind of hosted.
00:28:10.326 - 00:28:52.570, Speaker B: And so it's like, by far, I think, the easiest way to store your application data on these networks. And I think there was a workshop that was given on this last week, and it's a really great product, so I would definitely recommend looking at that. There's also the Pinata team is also doing a filecoin integration, and that Pinata will also be kind of filecoin backed within the next month or so. And there's a team that we've been working with called ChainSafe, which is also building an FPS. And so you can expect to see these services come online very soon, and there should be more options for this in the future. All right, okay. And so then we'll jump a bit into Powergate.
00:28:52.570 - 00:29:45.820, Speaker B: All right, so Powergate is also a software that's being built by the textile team, just like a really powerhouse team. And Powergate really what it is. This is an architecture diagram that the textile team put together, but it's essentially a set of libraries, a set of modules that exist on top of an IPFS node, a Goips node specifically, and a Lotus node. And what these modules will do is, if you think about it today, like, Goips and Lotus are fairly low level software. If you kind of try to interact with these protocols through the CLI, it's really granular sort of transactional movements. Like, you directly have to add data. You delete data, like, one file at a time or one folder at a time.
00:29:45.820 - 00:30:31.378, Speaker B: In the case of Filecoin, you have to find a storage miner. You have to propose a deal to that storage miner and kind of just monitor each deal individually over time. So there's a lot of power in that because it allows you to kind of support infinite use cases, but it makes it a little bit difficult to learn, and it's not always necessary, unless you want to build some sort of tooling that makes. Interacting with these nodes easier. And so what Powergate has done is exactly that. So it's built like a bunch of really valuable modules on top of Goipfs and Lotus. And these will do sort of that management I mentioned before, the data flow from hot storage to cold storage through this concept called FFS.
00:30:31.378 - 00:31:17.400, Speaker B: Powergate also maintains a reputation module. So a Powergate node will sort of index the whole chain, understand which miners have been behaving and which have been misbehaving, and kind of assign miners reputation scores. So when you want to store data on the network, on the filecoin network, it'll know which miners are kind of the best bet for you to store with, most likely to actually store your data correctly. And it'll also kind of maintain an index of deals that exist in the network. So that's also kind of just easier to interact with. It also abstracts all of the steps of kind of making a storage deal. So you just have to literally run one command like store this, Eid this many times, and I think there are a couple of other parameters, and it'll handle all of the deal management for you.
00:31:17.400 - 00:31:53.346, Speaker B: So Powergate is an incredibly useful tool. It is something that you're intended to run locally, that is maybe a little bit, depending on what application you're trying to run. You may or may not want your users to be running kind of this whole infrastructure on their machine. So Powergate Node would spin. If you don't have an IPFS node running or a Lotus node running, it would spin up both of those and also have its own processes. And so it can end up being kind of resource intensive, definitely wouldn't work on sort of like a mobile app or something like that. But it's a really powerful development tool for sure.
00:31:53.346 - 00:32:26.110, Speaker B: And there are many ways to kind of integrate Powergate. Like you could run one of these yourself in the cloud and then expose have the users kind of interact with the hosted Powergate node through its API. So there are many ways to use Powergate and all of its Power in your application too. The textile team has these really beautiful docs on how to interact with Powergate. And you can see they've listed the various APIs that exist for Powergate. There's a JS client, and then there's a Go client as well. And then there's also the CLI, which you can use to kind of explore the different functionality.
00:32:26.110 - 00:32:56.450, Speaker B: And then there were also a couple of workshops on this. There was one last week by Andrew. And then also at the IPFS Pinning Summit, andrew and Erin from the textile team did a really great presentation of Powergate as well. So that's like a good introduction too. Okay. And then lastly, filecoin protocol implementations. So I mentioned before, currently today in active development, there are four implementations of the filecoin protocol.
00:32:56.450 - 00:33:26.974, Speaker B: And what that means is that Filecoin in the most basic form is a protocol. It's not even really a piece of software. You can kind of think about it like that. And the most lowest level artifact of that is the filecoin spec, which is I have a screenshot of it here. And the protocol implementations all implement the filecoin spec. So the most feature complete protocol implementation today is the Lotus implementation. And then I screenshot it here as well.
00:33:26.974 - 00:33:55.580, Speaker B: We have on the filecoin documentation site kind of some more information about the various protocol implementations and how to use them. And the Lotus implementation, it's really great, has a number of APIs that are available for developers to use. So there's a JSON. RPC API. There's also a JavaScript client as well. And then there are other resources too. So I mentioned on the filecoin documentation site, Lotus also has its own documentation, which you can it's lotu Sh.
00:33:55.580 - 00:34:37.190, Speaker B: And Lotus is basically what we would recommend for lotus is an extremely powerful tool. It's kind of what is going to run the entire file coin network. Of course, the other implementations will as well, but it'll probably be one of the more widely used implementations. And so we recommend this for developers that want to build kind of lower level tooling or something that requires you to interact with the protocol more closely or developer tooling or things like that. It's just a little bit more overhead because you kind of have to become more familiar with some of the underlying filecoin concepts. But the APIs exist and are pretty easy to use too. So also definitely a pathway for developers.
00:34:37.190 - 00:35:28.694, Speaker B: And so, yeah, that's kind of the high level overview of what are the main technologies. And then I'm going to do this rapid fire just going through five use cases and how these use cases integrate filecoin. Let me see really quickly. Okay, so I can't scroll up, but I see this question from Karate which says the filecoin miners have commitments and proofs of availability and storage. What about bandwidth and latency? That's a really great question. So in filecoin, there is also this concept of retrieval mining or retrieval market. And so in the first version of the filecoin protocol and the core protocol itself, the basic version of retrieval looks like you pay to have a miner kind of serve your data back to you.
00:35:28.694 - 00:36:19.906, Speaker B: And because there is this transaction, the financial value associated with retrieval filecoin, there's like economic incentives to make sure that miners retrieve data as quickly as possible. There will also be second layer solutions as well. Like we're working with a couple of teams that are building gossip, sub based retrieval networks and so on, where there are even stronger incentives to kind of like you could build a whole business essentially as a retrieval miner and not have to be a storage miner at all. And those will be some second layer solutions that exist. But in the core protocol V one, there aren't proofs for bandwidth and latency. I think that's a hard challenge, but it's definitely something that would be really cool to solve. And then the rune asks, as Powergate is using Lotus under the hood, wanted to know about how we can sign transactions from client side offline and submit sign actions to Powergate.
00:36:19.906 - 00:36:53.810, Speaker B: Awesome. Okay, so Aaron's here. Great. And Erin is on the textile team. So I think there are a number of libraries, which I'll talk about in a little bit too, that allow you to do message signing remotely. They don't currently work to do deal instantiate storage deals remotely currently, but you can do other sorts of transactions without having to run a whole Lotus node or a Powergate node or something like that. So I'll talk about that in a minute.
00:36:53.810 - 00:37:45.810, Speaker B: Okay, so just quickly going through a few use cases that integrate Filecoin. So the first of these is if you want to store static data such as images or videos, how would you do that? And so today there are a couple of applications. One is Audius, which is kind of like a decentralized SoundCloud in a sense. There's some really awesome, very talented artists that are using this platform. And today Audius uses IPFS kind of end to end for its application. I believe audience manages their own IPFS node today and are looking to find a way to integrate Filecoin as well. There's this project called Dtube, which some of you may have heard of, and it's kind of like a decentralized version of YouTube and also uses IPFS under the hood.
00:37:45.810 - 00:38:56.138, Speaker B: And so for these sorts of projects, we'd often recommend that whatever your files are, your static data, you can persist this data kind of by pinning it to some sort of local IPFS node, or using a pinning service or a remote IPFS node, maybe, that you manage so your users don't have to pin it to their local node. And then that will sort of get is accessible now from anyone that's connected to the public IPFS network. There's a version of this that now you can also just from your application back up all of this static data directly to Filecoin as well. And so that would potentially look like say, that you require users to kind of be running a local IPFS node for this kind of first step in the middle. And then you could also have them run a local Lotus node and then basically manage that every time the data is being stored to the public IPFS network. Also persisting it to filecoin. You could also replace this kind of like bottom half of the chart with a tool like Powergate or just completely abstract it away if you want to include the Filecoin component using a filecoin backed pinning service.
00:38:56.138 - 00:39:42.730, Speaker B: And so that would kind of replace this like the right side of the graph with just like API requests to a pinning service like Textile Hub or Textile buckets if you wanted to publish a static website. And so these are some examples I just took from our own properties. But Protocol AI is hosted in IPFS and obviously IPFS IO is as well. And generally if you want to publish a static website or any sort of static web application, there are a number of ways that you can do this. So you can use a tool like Fleek which will kind of do the whole web. It is basically like web hosting that uses IPFS under the hood to kind of distribute all the data. There are other tools as well like unstoppable domains and ENS.
00:39:42.730 - 00:40:38.118, Speaker B: And then this data, once it's been persisted to the IPFS network, can be loaded via an IPFS gateway. The Protocol Labs IPFS team maintains a gateway as a community resource which you can kind of use for development and testing, or you can use one of the others that are maintained. I think Cloudflare also has an IPFS gateway and then ultimately you want some way to kind of link through DNS, your domain to the content that's being stored on IPFS. And there are some tools that are listed here as well that you could look into for how to do that. And so that one is actually kind of more today that looks like more just use. For this sort of use case, we would probably recommend using IPFS in some cases. We might also recommend that maybe you backup this data to File point if you want some sort of like backup or recovery option from a decentralized storage network.
00:40:38.118 - 00:41:38.820, Speaker B: But generally IPFS will do a pretty good job here on its own if you wanted to build some sort of infrastructural service yourself, like a pinning service. And then one example of this is Buckets, and we actually have built kind of an example application that's a very simple pinning service as well. So you can see here it kind of integrates with MetaMask and then can show you just some information about the local network that this example is running on. And this is kind of the main part here. It's like you could see the ability to pin data to both that public IPFS and filecoin networks as well, and it shows you kind of like activity. So this is the sort of data that you could get if you were trying to run this on filecoin. If you wanted to build a service like this.
00:41:38.820 - 00:42:51.000, Speaker B: One architecture that you could use, that's kind of being used in. The second example I showed was having some sort of JavaScript front end that runs in the browser and under the hood it's connecting to a local powergate instance which is then under the hood powergate kind of connects to a Lotus node and IPFS node. So you could run kind of a service like this, have a browser application, and now it's kind of running. And so theoretically your users like you might want to have some sort of user management system and your users could create accounts through your web app and it's kind of all pinging your local powergate node. Or you could directly integrate Lotus and goipfs under the hood of your application as well and kind of have the same sort of experience where your users are interacting with your pinning service through the UI. This is kind of the richest bucket is like really dynamic applications. There are a couple of examples that we've built that have the application primarily serves a function of file storage, but you can imagine all sorts of applications that do really cool things.
00:42:51.000 - 00:43:29.060, Speaker B: Another example is this idea of a meme marketplace. This one also, and all of these examples are on the Filecoin Doc site. So you can kind of play around with them yourselves. They're intended to be kind of code samples for developers who are just getting started. And this sort of just shows you how you can upload images as memes. And this actually integrates with the NFT standard from Ethereum as well. So this is one sort of application that you could build and this is just to know, hey, we have a tutorial for this online.
00:43:29.060 - 00:44:16.066, Speaker B: And the way that this application is architected, it uses Textile Hub as the sort of back end and uses this kind of as the authentication server for the browser, like the front end, which is written in JavaScript in react JS. It also pings out to the Ethereum network. I think right now it's kind of running on a testnet. And it does this because I mentioned it uses ERC 721, the NFT standard. And so it wants to be able to kind of integrate the NFT functionality into the application as well. And then it uses, as mentioned here as well, it uses Textile Hub for the file storage, the image storage on IPFS and filecoin networks. There's also an application called Slate, which Jimmy Lee from Filecoin team gave a whole workshop on last week.
00:44:16.066 - 00:45:05.086, Speaker B: And this is just a really great example, I think, of very nicely designed, sort of like holding itself to at least the top of web two design standards. But an application that's built the entire stack is built in using Web three technology. And so Jimmy gave a talk on this last week, so you should check that out. And the way that Slate works is essentially it's built on Powergate. So today Slate is an application that you're intended to run locally. And I believe the team is also working on building a hosted version of Slate. And the way that would work is, it's going to be built on Textile Hub or on Textile buckets and users will be able to kind of create accounts through the hosted front end, the hosted web app front end, and interact with kind of their files and data through the browser.
00:45:05.086 - 00:46:02.550, Speaker B: And then everything is kind of like stored on the decentralized storage network, which is pretty cool in these types of applications are generally like two major pathways that we have seen. So you either want to use Textile Hub or any other file Quinn backed pinning service to run fully hosted applications. This is probably the easiest in terms of lift for your users, but in some cases say that if you want your users to host their own nodes, maybe because you want them to have full control over their own. Private keys and their wallet and all of these things that people care about a lot within the space that are more privacy oriented features. Then you might want to think about integrating powergate into your application and then having your users just run the whole thing on their desktop. And then I think this may be the last or second to last example is just Chain Explorers. So there are a couple of really awesome chain explorers that have been built by community members over the last few months.
00:46:02.550 - 00:46:42.580, Speaker B: And all of these directly interact with Lotus nodes. So the way that these teams have built these applications is they're running a Lotus node somewhere on their servers and they kind of index the chain state that they're seeing from the Lotus node. And then they basically serve this data up through this front end application. And then the last use case here was Wallets. And this is one web wallet by a team called Openwork Labs. And you kind of have a screenshot here of a test version of this. And this web wallet is intended to connect to a ledger hardware wallet if you have one.
00:46:42.580 - 00:47:17.354, Speaker B: And the way that this wallet was architected as well. So this is kind of I mentioned earlier the remote signing library. So you have the application front end. They also make use of the remote signing library. So this allows you to, from any sort of other application, construct a valid filecoin transaction and then ultimately submit it to a remote Lotus node that is being kind of interacted with via its JSON RPC API. I think it's a huge amount of information. I recognize this.
00:47:17.354 - 00:47:50.386, Speaker B: So what I was planning on doing was sharing both the slides and also kind of a cheat sheet which has the links to every one of the resources and tutorials and libraries that I mentioned. So I'll maybe share that today later with the ETHGlobal team who can share it with everyone who attended. But all of that is like it's a lot of material. If you ever need support with developing on Filecoin, there are a number of resources that you might want to check out. Kind of like the first places to see if it might answer your question. The first is going to the Filecoin documentation site, which is docs filecoin. IO.
00:47:50.386 - 00:48:20.486, Speaker B: You may also want to check out Filecoin Shipyard, which is a GitHub organization that we it's. It's not actually maintained by us. It's kind of like a bunch of projects that are built by folks in the community, and this contains a lot of really awesome examples of what you can do with Filecoin. It's like a bunch of really interesting experiments. So I would recommend kind of starting with both of those places. Slack is where everyone talks about the Filecoin project. So you can go to Filecoin IO slash Slack for hackeths.
00:48:20.486 - 00:49:11.782, Speaker B: These are kind of the three main filecoin related Slack channels that the Protocol Labs filecoin team will be monitoring really closely. And then even beyond hack FS, if you're interested in continuing to work on Filecoin, we're always here to help. And there are two channels here that would be useful to start getting involved in as well. And then we also have a discussion forum, discuss Filecoin IO. So there are a number of really great questions that have already been asked here, and you should feel free to use this as well. And then the last sort of resource, or actually this is the second to last one, is that we recently started doing Filecoin Developer Office hours, so you can sign up for one on one time with some of the core developers on the filecoin team to learn about what's the best architecture for your application or if you're running into any issues. They can help you debug.
00:49:11.782 - 00:49:49.790, Speaker B: And so we have a form linked here, and also I've included the email address of the person on the Protocol Labs team who's kind of helping to run these. And then last but not least, there's the Filecoin Dev grants program. So this is probably most applicable after hack FS, but if you get really excited about building in the File Queen ecosystem, there are often like many different kinds of grants that are available to teams who want to continue to contribute. And that's everything. So thank you so much. I think we have about five minutes left. I'm going to stop sharing so you can see all the messages.
00:49:49.790 - 00:50:52.220, Speaker B: Cool. Okay, so I think I'm not sure how to pronounce this username, but someone asked, could you explain how smart contracts are used in the filecoin context if it uses Solidity and if they're experiments with other blockchains. So today in Filecoin, we have the notion of actors, which is really what we that's kind of like our word for smart contracts in the Filecoin context. But today these are all built in actors, so they run like, core functions of the filequin protocol. It includes the storage market and the storage minor process and so on. Today there isn't user generated. Smart contracts aren't a thing that you can natively do in the File Quinn blockchain, but there are a number of bridges to other blockchains that are in progress, and so it would be in whatever the programming languages for those blockchains.
00:50:52.220 - 00:51:45.816, Speaker B: The link to the Meme Marketplace tutorial, I'll put that in the resources thing that I'll send to the ETH Global team after this talk. Let's see. Okay, I think oh, maybe I missed one. What is the main difference between Filecoin and other coins like Tiacoin? So I think the core thing that we think is really important about the filecoin protocol is the fact that it uses the fact that the whole system is essentially we're trying to incent this behavior of storage miners correctly. Storing data over a long period of time. And you, as a user, being able to really trust that this is actually what's going on. And so Filecoin makes use of these cryptographic storage groups that I've been mentioning that's kind of unique to the Filecoin protocol.
00:51:45.816 - 00:52:00.170, Speaker B: There's been a lot of research that's gone into how these can work reliably and securely. And so that's like, one thing I'd say is kind of a differentiating feature for Filecoin. Awesome.
00:52:02.860 - 00:52:26.800, Speaker A: Cool. If there's no more last minute questions, we can probably wrap up there. I'll give people a second. Okay. This clapping, not hand raising. Okay, cool. Before we wrap completely, I'm very curious how people actually heard about this session or just sessions in general.
00:52:26.800 - 00:52:51.716, Speaker A: So what we've been doing is a couple of different things. At the beginning of the event, we had a public calendar that you could subscribe to. We've also been sending calendar invites. We sent an email this morning with the list of events for this week. And then there's also the Hackafest schedule channel. So there's four options. So I'm just very curious how people have been keeping track of all the events.
00:52:51.716 - 00:53:34.436, Speaker A: If there's too many emails for calendar invites, people want fewer emails, so it looks like okay, so public calendar, email invite, calendar invites seem to be the best way for people. Oh, there's also the hackath. The schedule on Hackafest.com. Forgot about that. We have five ways to get this to this is this is good. So it seems like the calendar invites seem to be the best way for people to stay up to date, but karate still misses them somehow. Yeah.
00:53:34.436 - 00:54:08.304, Speaker A: So we'll keep updating all of these places, but be aware that we update all of them throughout the week. It's available in multiple places, and that we'll keep doing that if that's what works for people. I think that's it. Thank you, Pooja, for that session. This is really great to have a high know, overarching summary of all the ways to interact with Filecoin, all the tools, the projects. It's really exciting. And I know I learned something because especially last week, it was more of the conceptual or project specific thing.
00:54:08.304 - 00:54:12.450, Speaker A: So it's good to see it all together in context with each other.
00:54:13.140 - 00:54:16.960, Speaker B: All right, thank you. And thanks so much, everyone, for listening.
00:54:17.380 - 00:54:32.740, Speaker A: Thank you. Final reminder again, check ins are starting today. So go to your Cohort channel, go to your hacker dash board, write your team project check in, and happy week to everybody. We'll see you in slack.
