00:00:06.090 - 00:01:17.122, Speaker A: Welcome to our workshop. So I'm TF from Techsign Network. And also here's our team member, Chris. So in this workshop we'll be introducing how to build what textile network does and what scenarios should you use Texan Network and how do you build a privacy preserving and computational powerful Web Three services. Okay, so the problem that Texan network is trying to solve I know you have heard a lot of projects that are focusing on solving the scalability of the blockchain. Well, Texan network is not addressing the network performance in term of TPS. But Texan network is focusing to provide a more powerful version of smart contracts and we are focusing on the performance of individual smart contracts, which in terms are those aspects? So here's a comparison between the Web Three applications and Web Two applications in some aspects and I know this is not a very fair comparison because the main breakthrough of Web Three is on its trustlessness.
00:01:17.122 - 00:02:48.290, Speaker A: Well on the performance it suffers a big disadvantage. For example, the time and space resources you can use in an individual smart contract is very limited because of the limitation of gas fee block size and also the functionality are very simple and basically focus on crypto and the very basic business logics while lacking of some rich functionalities. That is mainly due to the consistency requirements and also because of the consensus mechanism we have to wait for the block confirmation. And also it's very difficult to protect your privacy on the blockchain. So we have paid a very heavy price to achieve the trust and Texan Network is aiming to solve the performance and privacy issue for the individual smart contracts. And our solution is to build a layered architecture for the DApps and by moving your business logic from onchain to off chain, we don't have to be restricted by the consensus mechanism of the Smart contracts. While we are using the trusted execution environment technology which is a privacy computing technology, we can guarantee the application's trustlessness in terms of confidentiality and also integrity.
00:02:48.290 - 00:03:38.846, Speaker A: So in conclusion we put them off chain and so we will have a higher privacy and we can build interactive applications. Well by using the Te technology we can guarantee the integrity and confidentiality of your application even without the blockchain. So here's the idea of a layered architecture of the future envision bias of the future applications. Today you already see a lot of middleware infrastructures acting a very important role in our DApps. For example, the oracles or the IPFS. Well in the vision of Web Three we are still lacking one very important cornerstone which is computation. Today they are most built on the layer one smart on layer one blockchains.
00:03:38.846 - 00:04:56.954, Speaker A: Well to support more meaningful applications for example like games, interactive games, we do need an infrastructure that can do some high performance computation while keeping the user's data privacy and Texan Network is aiming to becoming this role. So as you can see, we put the computation from in the middleware Texas network. Well, only when you need to generate a finalized state will you need to generate an onchain transaction or in other words, the relationship of Texan network to a blockchain is like a back end to a database. You only need to write a finalized state on chain while the computation can be done completely off chain and protected by the privacy computing technologies. And let me introduce you the Tservice which is the application running on the middleware Texan network. T service is short for Trustless services and it's a bit different from the Onchain smart contract. First, it's interactive based on a request response based protocol and we also wrapped it into a Restful API just like calling a web two service.
00:04:56.954 - 00:06:33.786, Speaker A: But it's trustless and also due to the nature of text and network, we are not a layer one blockchain, we are stateless but we provide very convenient way of interacting with layer one blockchains. Third, because we are off chain and using the privacy technology privacy computing technology we guarantee your data privacy in your applications and the privacy data during transmission and during computing are private unless the developer choose to review it. So it's opt out privacy. So on the development wise, you can sync the T service like a type, you can sync Texa network like a typo oracle but instead of feeding the internet data, we feed you the result for your entire business logic and which guarantee the data privacy and the computing performance in term of the computing and storage resources. So we migrated on Python interpreter environment inside the trusted execution environment. Currently we are using Intel SGX and you can develop the trusted applications using one of the most popular language which is Python service oriented development framework and also supporting a lot of third party libraries. So the example let me begin with our Hello World example on Texa network which is called the Millionaire problem.
00:06:33.786 - 00:07:37.914, Speaker A: It's one of the most fundamental privacy computing program proposed by professor Yao Tiju. And the problem is, assuming there are two millionaires, they want to know which of them is wealthier without revealing their actual worth. So in an ideal case, you want a judge and both parties can trust it and both party can guarantee is honestly executing the business logic and well keeping their data privacy blockchain is designed for trust. However, it's very difficult to implement on today's architecture due to privacy issue. Well, in our case on Texas network because by default we can guarantee the data privacy. You can implement such a Hello World application in a very simple architecture. Just like imagine you are developing a centralized application, the two users don't trust each other, but they do trust you and they send their privacy data to the application and the application will serve as a judge.
00:07:37.914 - 00:08:07.534, Speaker A: Tell them the result. It's very straightforward but on Texas network we execute those applications inside the security enclave. So you can guarantee three things. First, you can always guarantee the textile node is honestly executing your code. And secondly, you can guarantee the integrity. You can always guarantee the node feed you back the correct result without tampering. Thirdly, it can guarantee the data privacy during execution.
00:08:07.534 - 00:09:09.642, Speaker A: And the way user interact with hexa network is based on interactive protocol. And all the entrance of the T service are marked by a URL, a web3 URL, just like the IPFS one. And using multi hash, it indicates the hash of your T service code. Just like because it's compatible with IPFS, you can directly serve the code on IPFS. And both user will establish a secure connection with the enclave in the text node. And just like you can imagine, it's like an HTPs handshake and the node the computer provider serving as a middleman, although he's a service provider, it cannot read any private data submitted by user or during the computation. And the code for solving the millionaire problem is very simple.
00:09:09.642 - 00:10:03.310, Speaker A: So in our case, we have two entrance. First, both users submit their words and the function is called submit value and you write a Python function. And secondly, after both users have submitted their worth, both millionaires send their worth and they will call another function called get result. And we directly feed the user the result by very direct business logic. And all those code are running inside the security enclave, which means the node will not be able to read or tamper the computation and you just feedback the user result and both users will be able to decrypt the result on their client side. Yeah. And when you are developing T service, there are several key concepts.
00:10:03.310 - 00:10:40.246, Speaker A: First, request and response. They are in JSON format. They're carrying both confidential and non confidential data. And there's a certain field called data which is encrypted, which contains encrypted data, and only the user and the secure enclave have the decryption key. Any third party, including the service provider, will not be able to decrypt them. And the IPID means the hash of the code is the only Identifier of the code. So when two users are calling the same IPID, we can guarantee they are calling the same T service.
00:10:40.246 - 00:11:33.370, Speaker A: And also UIL is consistent with text header and the code of the hash and the function. And the user identity is represented by ECDSA key pair. And later you can find them on our developer documentation and also Texas network support temporary storage mechanism called Session. We keep them by default, seven days by default, and you should not rely on it will be available during your T service lifecycle, but you should not use it for permanent storage and for the Python develop framework. We call that PEXA and which in short of Python plus Texa, that is a Python runtime environment. We migrated inside Intel SGX and it's derived from Python 2.7 and in addition to Python 2.7,
00:11:33.370 - 00:12:31.760, Speaker A: we have added some crypto and blockchain library support. So for example, you can directly generate signatures, generate wallets inside the Python code and due to the nature of Tservice, we also removed the file system network and process access, so it's pure computation. And also we are keep expanding our framework, adding vertically to add some third party libraries to support more functionalities on Texas networks. And I'll briefly introduce how you interact with a layer one blockchain from Texan Network. Chris will later show us the details, but the basic idea is very robust and simple. The idea is generating signature. So the problem we are solving is how can we trigger a transaction on layer one? Or in other words, how can we verify whether a result is generated from textile network or is a forged one.
00:12:31.760 - 00:13:49.880, Speaker A: And the solution is we generate signatures inside the T services, inside the security enclaves, and later we could verify such signatures on Solidity using EC recover function and then you can authorize transactions. For example, assuming there are two players want to play a poker game. Poker game is the multiplayer poker game is not very easy to be built on layer one because it should be interactive and also you need a certain level of privacy. Well, on Texas Network you could just build in a very straightforward business logic. Well, after the game is over, the text and network could generate a signature and the winner could submit that signature to Solidity smart contract and the Solid smart contract can verify that signature, whether it's coming out of Texas Network and execute the transaction. For example, who will take the chip on the table? We provided a library called Pixa ECDSA, which is compatible with Solidity's EC recover. And because of our private preserving feature, the user could safely submit their private key into the T services and the T services will generate the signature for them.
00:13:49.880 - 00:15:07.546, Speaker A: So, some ideas of building on Texas Network first, game and NFT are always a hot topic and especially for the know, today's games are suffering from some limitations when you are building on blockchains. For example, you may easily build a chess game on blockchain, but if you want to build a card game which requires interaction and requires a certain level of privacy, it's much easier to be built on Texas Network and also NFT related features. For example, some developers are building some gamification type know. For example, in the previous East Global there were people building the Prisoner Dilemma game on Texas Network and combined that with NFTs and also collaborate computation and DeFi privacy and also identity. For example, how do you authenticate a user without revealing his details? It's like the T service will tell a yes or no, but the user won't need to reveal their actual privacy data. Yeah, and let's begin with the demo. So we have two demos.
00:15:07.546 - 00:16:05.712, Speaker A: First demo is about how you set up an SDK and execute some basic text and network request. Second, demo is how you authorize layer one transactions. So Chris okay, so first we connect to our node and to send a request on Texas network, you can set up the text SDK on our documentation. And there are three very simple steps to send a request. First, you import our SDK in your local Python code. Notice, although it's Python, but it's running on your locally on the SDK. And the second step is to generate your identity.
00:16:05.712 - 00:16:49.792, Speaker A: And we already support a function by initiating a request object. And if your first time using this, the SDK will automatically generate a key pair, elliptic curve key pair representing the user's identity. And go ahead. We call the send function, which will carry the Python code with it, by the way. So due to the nature of text and network, there is no deployment necessary for the T services. And on protocol wise, the user is required to carry your T service code inside your request to the node. And the node will hash your code and find out the app ID.
00:16:49.792 - 00:17:45.632, Speaker A: And engineering wise, our node will cache the code for the T services. So you don't actually need to submit every time, but by default, you can just submit the T service code as a parameter and you call the send method to send a request. Yeah. So when sending the request for the first time, the Texas network will do three things. So first, it's called a remote attestation. That means your computer will establish SSL tape connection with enclave in the text node. So after the handshake, they will do the DF Hellman key exchange, and they will negotiate an AES 128 key communicating directly between the user and the enclave.
00:17:45.632 - 00:18:35.300, Speaker A: No one else in the world have that key. So, yeah, it's basically like SSL handshake and all your traffic is communicated by is encrypted by AES. And as you can see, there are some debugging data, but the request contains a status and a response. And also most importantly, there is a data field which contains the secret data in your request, which is encrypted by AES. And also there's a response. Response will also be carried and you can decrypt them and process them in your Python code. And next, Chris will demonstrate how to generate a signature and verify it on Solidity.
00:18:35.300 - 00:18:36.950, Speaker A: Go ahead.
00:18:37.640 - 00:19:18.616, Speaker B: So this contract that we just executed, what it is, is basically just this right here. It calls this ECDSA signing key ETH sign, and it generates a signature, and it's signing this message up here. This just ABCDEFG. And then here's my private key. And so the signature is returned and then it's added to the response. And so if you look up here the decrypted data. This is the response from the taxa server that's been decrypted.
00:19:18.616 - 00:19:47.732, Speaker B: And so right here is our signature. And so what we're going to do is verify that this is a valid Etheram signature by we have this solidity contract that has been deployed to the testnet and it's simply just we have this is valid signature. Well, down here where is it is valid signature?
00:19:47.796 - 00:19:47.976, Speaker A: Yes.
00:19:47.998 - 00:20:17.870, Speaker B: So it takes two arguments. The message, the original message, which is just ABCDEFG, and then the signature, which I'm going to paste in here. And then we can call it and the return value is true. That's because the signature is valid.
00:20:18.290 - 00:21:09.680, Speaker A: Yeah. So the key is first inside the taxi service, you use the ECDSA library to generate a signature. And it is safe for the user to submit a private key inside the T service because it's entirely running in the security enclave. And after you generate a signature inside the T service, you output the T service inside the response. And if you want to verify the signature, you call the Ecrecover in solidity and the format is entirely compatible. So the Ecrecover will tell you whether the message is legit generated from the text It service. So that's the way you authorize a transaction on layer one.
00:21:09.680 - 00:21:48.500, Speaker A: Yeah. Okay. And here are some useful links. So for the developer documentation, go to Darkstocks network. And also you can always go to our booth at first floor. We are happy to answer all your questions in our development. And also our engineers will be on discord to answer your questions.
00:21:48.500 - 00:21:53.490, Speaker A: So yeah, please mark those link and happy hacking. Thank you, guys.
