00:00:06.490 - 00:00:26.040, Speaker A: Hey, everyone, welcome. Thanks for taking your time to join us. We have harsh here from EPNS. He's going to teach you how to add webtree notifications in your application, and I'll let you take the stage. If there's any questions. In the meantime, feel free to pop in the chat and we can take them towards the thank you.
00:00:28.010 - 00:00:48.138, Speaker B: Thanks, Huey. Hey, everyone. Really excited to be here. Hopefully my screen is visible so we can get started. So, a little intro about me. I'm Hirsch Project, lead and founder of Ethereum Push notification service. Just like you guys, we essentially started from ETH Global Acme 2020.
00:00:48.138 - 00:01:25.922, Speaker B: That's when we invented communication for Web Three, and we are going to look deeper into it very quickly. While we are called Ethereum Push Notification Service, we are not just ethereum. In fact, the vision is to be on every Web Three blockchain possible. And of course, we started that effort with polygon as well. So we are going to see how to create and send notification from Polygon as well. And of course, we support even non Ethereum blockchains also. And we are not just push notifications, we are the Web Three communication.
00:01:25.922 - 00:02:06.370, Speaker B: Stack. More on that later. So let's kick things off. All right. The first thing I wanted to talk about is why notifications? Well, in essence, if you just think about it, everything in your virtual life starts with a notification. We get up in the morning, we look at our phones and we see notifications, no matter from what app it is, but that's web two. In essence, we see our important emails and our important work staff, true notifications, slack messages and everything else, they come through notifications.
00:02:06.370 - 00:02:32.250, Speaker B: Our banking that we do or everything financial that we do, we see it through notifications. Any PayPal and more payment that we do, we see it through notifications. Amazon delivery. Again, that's notifications. Any social media that we go to on web two, that is again triggered by notifications. We get to know who liked our post. We get to know what our post is, trending and so on and so forth.
00:02:32.250 - 00:03:14.426, Speaker B: Even when we are chatting on Discord or Twitter or WhatsApp, we are not actually chatting on that platform. We are chatting through notifications. So if I'm going to essentially do a WhatsApp or teach you to eat global, I am not actually chatting. What I'm doing is I'm sending a notification out to them through which they are informed that something important might have occurred and they might want to respond to my chat. And then they come, and then they basically carry the interaction forward. So, yeah, just wanted to make that clear that everything starts with notification. But yeah, that's just web two.
00:03:14.426 - 00:04:13.950, Speaker B: In web three, communication is in Stone age. Web Three users are actually wallet addresses, and there was no communication primitive that was built for them. And because of that, there was this huge gap of critical info drop that occurred. Whether it was loan liquidations, whether it was important governance proposals, whether it was even NFDS and your NFDS getting outbidded, or anything else, even something off chain such as a contract moving from V Two to V Three. You don't get to know about it because there was no communication stack that was built for web three. And that is what we started building back in Global Hacking 2020. The vision was that once we perfect the basic primitive notification for Web Three, after that we can start releasing Lego blocks for all the stacks of communication, including chat, video and whatnot.
00:04:13.950 - 00:04:59.434, Speaker B: So yeah, that's a missing piece. How did we solve it? Well, in essence, we created a decentralized communication protocol that allows any smart contract, any DAP, any back end, any protocol or any Web Two services as well to send communications that are tied to your wallet address. These communications that are tied to your wallet address are sent through an open network, just like Ethereum. So any crypto wallet can just tap into your communication and show it out to you. Of course they are encrypted, so they are secured as well. But yeah, the idea is that the three usernames are shared and therefore communication needs to be shared. These notifications, we started with notifications, so of course I'm going to talk about that.
00:04:59.434 - 00:05:45.802, Speaker B: These notifications are dynamic. The idea is that to compete with or to build the next Twitter, to build the next Facebook, you need really extensible notifications. And that's what we did. So it doesn't matter where the notifications are stored. IPFS, a smart contract, wherever the nodes, the validator and indexer nodes of us can pull it out and can basically validate and index it to a particular wallet. It doesn't matter if the notification has call to action images or even encrypted transaction in the future, everything is supported. And of course, most of the time it's gasless, or in fact, all of the time it's gasless for the users to opt in to your protocol so that your protocol can send notifications out.
00:05:45.802 - 00:06:38.230, Speaker B: And from there on everything just becomes like a huge UI and UX improvement. So I'm not going to lob it because I already did that. But yeah, Dows Defies and Ft, MetaWars, even something as a Web 2.5 platform like CoinDesk, all of them, they need notifications. We are actually working with a lot of protocols and Ethereum and now we are launching on polygon. So we are working with Uniswap or we are powering communication for Uniswap, Avi, Gitcoin, polygon and Decentraland and a lot of other cool protocols. We have sent over 15 million notifications from the time we launched in January of this year and we have over 60,000 subscribers.
00:06:38.230 - 00:07:13.074, Speaker B: So basically Web Three notifications are live and they are battle tested now. All right, so yeah, that's what I said. We are working with all of these cool protocols and yeah, let's talk a little bit about bomb piece. So if you're building on EPNS protocol or even not, we just love to help hackers out. So whether you're building or not, just come talk to us on our channel. But if you are building, of course, cool hackathon Bounties await you. We have one more surprise for you, like a surprise NFT Drop.
00:07:13.074 - 00:07:45.070, Speaker B: It's a rare NFT which is held by Balaji and DeFi dad and a lot of other cool folks. The best hacker will mostly get that. And yeah, one last thing. If you are going to continue building after the hackathon, and if you need support for your project, our governance and our Push Tower is live. So come apply for our $1 million grant and we would love to help you out build cool things. All right, enough talk. Let's do the workshop.
00:07:45.070 - 00:08:52.704, Speaker B: I had a video also, so that's going to you be all right. So, workshop time. I'm going to essentially open a few tabs over here. I'm going to, of course, cheat a little bit, but I'm going to walk you down how to get notifications going. So the very first prerequisite is for any protocol who wants to send notification, is to create a channel. A channel basically allows people to send notifications out. It's a channel that is created on the protocol.
00:08:52.704 - 00:09:16.972, Speaker B: You can create it via interacting with our Epnsco smart contract. But the better way would be to come to seeging EPNS IO like I did and create a channel. Another prerequisite is because this is a coven test network. So you do need COVID to create a channel. You do need COVID. I as well. We have faucets for that.
00:09:16.972 - 00:09:54.692, Speaker B: And in case you're creating a multi chain channel, of course you need polygon channel also. But yeah, polygon faucet as well. But yeah, in case you have trouble finding it out, just go to EPNS IO, scroll all the way down. You will see discord. Join our discord and just bug one of our cool community managers and they will make sure to provide it out to you. Or just call it out on the discord channel. All right, so let's just start by creating channels.
00:09:54.692 - 00:10:22.528, Speaker B: So this is Channel Charlie. We will call this address channel Charlie. I already have created a channel, but I'm just going to walk you down the steps on creating the channel Afresh. So I'm going to do go channel creation. I already have die in the channel. But yeah, this is a faucet, so you can get dice from here. Let's just quickly set up our channel.
00:10:22.528 - 00:11:17.228, Speaker B: Now we are going to create a multi chain channel. So the channel name is ETH Online. Because it's multi chain. You can create an Ethereum channel as well, in case we're working on Ethereum. But because we are going to create it on polygon, we have to put this then the next thing is for polygon, we have to put our channel alias address channel alias address is nothing but the address from which you want to send notification from the blockchain. I'm putting the same address as the address for Ethereum, but you can do it differently as well. Of course, the private keys and the API keys that I have, I already assume that it's dogs, but yeah, we will basically be using some of it to see how notifications work.
00:11:17.228 - 00:11:50.350, Speaker B: So, yeah, once the info is done, the next part is just dropping the logo, cropping it and creating the channel. You will need to sign two transactions. Transactions will essentially be one to approve the die. And then after that the channel details are essentially uploaded to IPFS. That IPFS is sent to our push notes. Then that push notes basically pin that IPFS out. So that is why it takes usually from five to ten minutes to create this channel.
00:11:50.350 - 00:12:40.604, Speaker B: If it doesn't happen very soon, we will probably switch to a different channel which I have already created. And it's always recommended to create a channel already. All right, I think while it's waiting for confirmation, the next thing we'll do is we are going to set up receiving or set up testing sent notification. So it's a protocol, so any crypto wallet or any crypto content can do it. But for this demo, we are just quickly going to go ahead and download the EPMs teaching protocol extension. We are going to pin this in and we are going to sign up. So, as I said, I have cheated a bit.
00:12:40.604 - 00:13:46.240, Speaker B: So we have a user Bob who is going to sign up and it's as easy as entering your wallet address and we are done. Now you can receive notification on Chrome extensions whenever a website protocol who you have opted into decides to send it out. I also downloaded our staging app and what I have also done is I have signed user Bob over here just so that we can see notifications being platform agnostic as well. All right, returning back. So we basically have done both the transactions, but because this is a multi chain channel, we have to do one more transaction and this time we have to switch the network and do that transaction because it's polygon. So we have to switch and we have to signal to the smart contract. That a channel that we created on Ethereum, we own whatever channel polygon address we gave.
00:13:46.240 - 00:14:49.430, Speaker B: So that's what we are going to do. Channel Charlie doesn't have enough polygon or enough matic tokens. So we are going to go to Faucet and we are going to essentially make sure that channel Charlie has enough matic tokens. Hopefully it will not take that much time. So meanwhile, what we'll do is meanwhile, before channels are deleted some token, what we are going to do is we are going to look into some of the ways by which we can receive notifications. So when we are sending notifications, we are essentially sending identity to the push. Note identity is basically a format that describes from where the notification payload is coming and the rules on how to interpret it.
00:14:49.430 - 00:15:35.620, Speaker B: The best way to learn about what an identity is and how we are utilizing it or what the notification identity is and how to utilize it is to go to Docs and go to Notification Standard and just read through Notification Basics. It's very simple and most of the time the SDK or the DAP or the Smart Contract interaction will abstract that away from you. But just in case you are curious, you can learn more about it. In case you're more curious, you can go to Notification Standard Advance and learn about the composable blocks as well. All right, coming back. Hopefully Matic would be here. It's here.
00:15:35.620 - 00:16:15.152, Speaker B: So now we can start the verification process for polygon. We are not going to wait for it because of course it might take some time. So instead what we are going to do is we are going to switch from channel Charlie to channel Alice, which I've already created. So I'm just giving it a little bit of time. Oh, it's already done. So yeah, we don't have to switch then. Channel Charlie is the guy who's going to send the notification out.
00:16:15.152 - 00:17:08.036, Speaker B: So as I said, notifications are supported on any platform. So let's start with deploying or enabling notification on your smart contract. Again, the best way to go docs IO developers sending notification we want to do from smart contract. So let's look at that. So this is a normal ERC 20 contract that we have. What I'm going to do is first I'm going to import that interface of EPNS form and then I'm just going to call that interface out wherever I want the notification to be sent. One thing you will notice like what we are doing is we need to have the channel address of ours passed as a channel.
00:17:08.036 - 00:18:11.912, Speaker B: The recipient is the two address that we pass. It can basically depend like notification can be subset broadcast or targeted. So it doesn't matter if you want to send notification out to a lot of users, you can use broadcast like it will be sent out to everyone who is subscribed to your channel. If you want to send it out to subset, you basically select subset and if you want to basically send out to just one person, you target it. I do realize that I haven't shown you how these notifications come, so before sending it via Smart contract, let's just quickly send it to user Bob who signed in from the manual DAP interface. So targeted, which basically means I'm just sending it to Bob, I'm going to put his wallet. Address notifications are content independent, which basically means that I can play around with notifications a lot.
00:18:11.912 - 00:18:37.872, Speaker B: So let me put a subject we are going to also put a notification message. We also support content markdown. So just something to keep in mind Call to Action. I also want to put that and Media URL. This is basically a composable content markdown. So in case you want to extend it, you can do it. We are going to open up improvement proposals very soon to do that.
00:18:37.872 - 00:19:28.848, Speaker B: But in case you want to see the content markdown right now, you can just go to developer Design notification content, go to Notification content and follow the previous markdown. That works. So, yeah, let's just try sending the gas list notification out right from here in the background. A lot of things basically happen, but let me do one thing. Let me refresh because I never refreshed after my channel was created. So go again to target it. Go to subject enable, subject enable, media enable, Call to Action and just trying to be superhuman and filling all the details out.
00:19:28.848 - 00:20:13.820, Speaker B: So it came online hackers and my notification privacy setting is getting boxed over here. All right, subject is this Call to Action. Let's not we can probably try to do Call to Action as well. Just have quick about it. So of course right now because I'm sending notifications something, no, nothing occurred. It's basically two desktop, so it was working previously as well. So let me just cancel send notification again.
00:20:13.820 - 00:21:22.112, Speaker B: MetaMask is pop send. I have to sign this content payload, which basically means that the reason is getting signed by EIP seven one two. Then that notification payload is getting sent to the Push Note and very shortly it's going to be picked up as well and it's going to be shown. So I think it's already picked up, but yeah, it's not shown because of course I forgot that I created this channel, but I haven't add user Bob opt into this channel and unless user Bob opt in to this channel, userbob will not receive the notification. So let me just do very quickly an opt in that opens up the MetaMask again, guestless opt in and yeah, that should be it. User Bob is all ready to receive those notifications. Let's come back to Channel Charlie.
00:21:22.112 - 00:22:21.604, Speaker B: Channel Charlie is a little slow in sending the notifications, but hopefully he can make up for the lost time. So online hackers, notification, message notification media and Call to Action. And yeah, I do need to put Bob addis because it's targeted notification, send notification, it will pop in the MetaMask, sign it again and this time once it goes to Push Note, it will make its way to the mobile app. Not only that, it will make its way to the Chrome extension. Very cool notification and it will make its way to usable address as well. So this is manual notification. Let's return back to Remix.
00:22:21.604 - 00:23:04.580, Speaker B: So after Manual, let's try to see how to get notification done for the smart contract. I'm going to cheat a lot now, but yeah, in essence I'm going to go to examples notification via Smart contract and we already have a way to send a notification out. So what I'm going to do is go back. I have already imported an interface. What I'm going to do is now I'm going to import my Epnscom address. This is different for different blockchains. The best way to see because we are going to do it for polygon.
00:23:04.580 - 00:24:03.176, Speaker B: So we are going to go open again the docs and the UPNS smart contract address and we are going to take the polygon address and go back, put it in upnscom address, make sure this upnscom address is reflected over here. The next thing we need to do is we need to essentially say like from what channel the notification is coming. Two is basically the token, two is basically the receiver to whom the notification is going and then we form an identity. Zero essentially means minimal standard. We have a lot of standards. You can find out about it by going to Docs, sending notification, notification standard again, going to cheat a bit. So going to go ahead and make it a little cool that we can transfer.
00:24:03.176 - 00:24:58.776, Speaker B: So going to put two helper functions. These two helper function helps me transform an address to a string and the other helper function helps me transform a number into a string. Once I've added this, I'm going to change my string to instead of a boring string which is sending a notification to tree which is a targeted user with just saying normal title and body. Instead of that, I'm going to replace this out and now I'm going to send a transfer alert. So whenever a transfer is happening, the person who's going to receive the transfer will get an alert very quickly. I am going to deploy this out on the polygon testnet. Hopefully this is okay.
00:24:58.776 - 00:25:55.820, Speaker B: So I need to switch to channel Charlie, connect it and then deploy it out soon. Yeah. And yeah, just wait for the deployment to be done. Once the deployment is done, essentially your smart contract has notifications enabled. You just had to call, send notification out with a proper identity with whatever logic you want. The next step is once your contract is deployed, you need to go back to your channel and because this smart contract is essentially a new address that will be sending notification on your behalf, because of that, you need to add the smart contract address as a delegate. So I'm going to do just that.
00:25:55.820 - 00:27:02.784, Speaker B: I'm going to confirm it out and the delegate should be added very soon and should be reflected at the same time. What I'm going to do is because it's a ERC 20 contract so I'm going to import my token and now I am going to send a lot of tokens to lucky user Bob. Let's just give it a refresh because we want things to be done faster and hopefully I'll be yeah, delegate is added. So now all I have to do is go over and we are going to send around 80 push to Bob. So this is just a smart contract now, which once executed should be able to send Bob a notification that they got ERC, token transfer. But not only token transfer, it's also a lot of things like on chain governance proposals. You can use that.
00:27:02.784 - 00:27:46.816, Speaker B: You can now send notification when an onchain governance proposal is coming and you can send it to almost everyone. You can also use this for basically NFT transfers and so on. So I'm just going to see if user Charlie has received it out yet. Not yet, actually. Not in users Charlie's. I did this like a couple of times, guys, I swear. But yeah, let's see what is the issue.
00:27:46.816 - 00:29:29.440, Speaker B: So the contract is deployed, let's try to send some more push to use the charging, hopefully this time or user Bob and hopefully this time user Bob will be able to pick it up sent and it all right. I think I might have missed a step in case it doesn't come even right now, but in case it doesn't come, like we have tested it a lot of times, so it definitely works. And our team is online to essentially let you know exactly how and what part to debug. Let's just switch because we are running out of time. So I just wanted to quickly tell you that smart contract is not the only way by which you can send notifications out. We have seen the gas list, we have Ssdk as well. Showrunners is essentially the fastest way of sending notifications via backend.
00:29:29.440 - 00:30:20.450, Speaker B: We also have subgraph, but the subgraph has essentially sunset at Coven. So heads up, we are deploying that on Gorely and that will work. Then we have receiving notifications as well. What we have prepared for you is actually an entire repo of examples which you can go to Ethereum, push notification service and push for Hackers and you can see but those examples basically have the original boilerplate and the Modded boilerplate. So you can see how to enable notifications for your Web 2.5 platform as well as well as front end integration. So you can basically just do opt in or receive notification right on your front end.
00:30:20.450 - 00:30:53.450, Speaker B: I think I'll probably because I ran out of time so I'll probably put out entire Workshop video very soon on the Discord channel which covers everything and yeah, going back, we are available for all the question and answers and we are available on Discord daily. So reach out to us in case you are building something cool with EPNS or in case you are even building something cool and will require any of our awesome builders help.
00:30:58.510 - 00:31:15.300, Speaker A: Great. Thanks Harsh, for the demo. Yeah, we are running out of time for Workshop, unfortunately, but feel free to follow up over Discord it's sponsor Eepnf and Harsh will be there to answer any questions. Thanks everyone.
00:31:17.110 - 00:31:18.160, Speaker B: Awesome. Thanks everyone.
