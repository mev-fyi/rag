00:00:00.410 - 00:00:56.446, Speaker A: Good to go. Okay, so hi. I am Austin At, Ethereum. So and it's just basically at Austin Griffith, if you want to follow me on the socials. So what I'm focusing on is education and auditing of new developers, bringing in guys that are maybe two Savvy, but maybe not Web Three Savvy yet. And kind of you all had the moment that brought you into Ethereum, that sort of goosebumps moment, but it probably meant you had to dig through a white paper and get way deep into the rabbit hole before the goosebumps moment happened and you realized how powerful it was. So my plan with ETH Build is kind of have this educational workbench that I can use to sort of show people the way to the rabbit hole without having to go through white papers and stuff like that.
00:00:56.446 - 00:01:31.260, Speaker A: So ETH Build, you can just oh, I'm at localhost right here. Let's see, which one should I run on? Let's go to ETH build. So if you just go to ETH Build, there are a few lessons already that I'm working on, and if you hit load, it'll bring the lesson in for you. But let's just kind of go through I think the first building block of Web three development is the hash function. Everybody in here knows what a hash function is. I can say, hello, world, over here. I'm going to get this nice deterministic string over there.
00:01:31.260 - 00:01:58.110, Speaker A: Let's make this a little bigger, too. Yeah, you know how a hash function works, but explaining this to my dad or something like that, it's going to be a little different. But I can say I can type. Hello, world again. We're going to get that same hash, right? It's deterministic also. It's one directional. If I were to give you this string and you had to figure out the other direction, you would have to brute force your way back on the hash.
00:01:58.110 - 00:02:36.414, Speaker A: And kind of arbitrary size, too. No matter how big this thing is over here, that resulting string is always, what, 64 characters, I think. Yeah, it ends up being 66 with a zero X. This is sort of a tool where I can kind of now, so we know what a hash function is, right, and we can put an input. But now let's set up a key pair. So a private key is basically just 64 characters of Hex, right? So I can plug that hash in here and I can create a key pair from Hello, World, maybe. Right? So this is actually going to produce an Ethereum account, right.
00:02:36.414 - 00:03:13.450, Speaker A: And no matter what I type in over here, I'm going to get an Ethereum account over on the other side, basically a private key and a public key. And we can even kind of play with this a little bit if you take the public key and you get out of here and you hash that. So if I plug the oh, boy. If I plug the public key into here. I'm going to get a hash out of that. And if we look at those last characters, that's where your Ethereum address actually comes from. You can see that these are kind of lined up there, right? You can see the C eight at the end of that hash.
00:03:13.450 - 00:03:58.198, Speaker A: So basically we can generate Ethereum accounts by just kind of banging away here, right? So what's up? Questions? Yeah, shout things out too. There's no real rules here. Okay, so I'm going to create, let's see, a hash function and a key pair. And we'll set up a text box so I can enter some kind of secret in there. And I could just make this like a password if I wanted to. But since we're all friends here, I'm just going to show it directly. So let's just come up with maybe just call it Waterloo or something like that, right? So there's the private key that we get from Waterloo we can address.
00:03:58.198 - 00:04:47.326, Speaker A: I can even make that a little bit more friendly. Wire up an address. So what can we do with a key pair, right? Like the essential piece of an elliptic curve key pair from 1983 is you can sign and recover messages and you can encrypt and decrypt information. So let's just play with that just a little bit. So let's bring in our private key and then let's hash some message like the bear is sticky with honey, right? So now we have a signature. And as I type, see if I change that to a Y. So what I can do with this key pair is I can sign a message and I can ship that message along with the signature.
00:04:47.326 - 00:05:19.074, Speaker A: So let's say down below here is like a third party, right? So they plug in my message, they plug in my signature and they can cryptographically prove that that account. So these two are equal. See, that the AC 36. AC 36. So that they can cryptographically prove that I signed that message, right? And all of this, you guys have known this. This stuff is like technology from 30 years ago. The point of ETH build is just getting it exposed to someone where they can play around with it.
00:05:19.074 - 00:06:07.698, Speaker A: They can kind of see, well, what happens when I change that, y, what changes? So you'll notice that this account changes. So if we plug in a different message, we're still going to get an account, right? So I can take one signature and some other message and get a weird address. That doesn't make sense, right? So you're always going to get an address out of there. But what can we do with that? So now if we can sign and we can recover messages, then we start talking about like, well, what if that message isn't just like an attestation to something, but what if it's like Alice sends Bob $5, right? So then we can kind of start talking about what maybe a ledger would look like, right? So let me bring in a ledger here. And I think this is kind of hard coded with this specific account. There we go. Yeah.
00:06:07.698 - 00:06:41.094, Speaker A: So the word test plugged into a hash, plugged into a key pair, you get this address. But what we can do with the ledger is start oh, Greg, get out of here. I should probably get rid of that. Did that show up up there, too? I think he's trying to get me to go drink some whiskey or something. Come on, come on. Okay, so with a ledger, we can actually start talking about what if these messages are transactions? And I can kind of do something like, let's create a two address to and I'm just getting started building this stuff. So some of this is a little raw.
00:06:41.094 - 00:07:26.680, Speaker A: The point of it is to be, hopefully, eventually, very approachable for someone who wants to kind of understand the basic building blocks leading up to what programmable money is or decentralized programmable money. So let's see. One, two, three. I think it's that long, right? I think that's an address. We'll go with it, and then we'll set up a from, which will be this guy, and we'll send a value of, like, $10. So we're just sort of, like, crafting this transaction. It didn't value, needs to have some quotes around it.
00:07:26.680 - 00:07:57.460, Speaker A: There we go. That should parse it. Anyways, once I explain what a hash is, and I explain what a key pair is, I think the next thing is to explain how a ledger would work and even, like, maybe a decentralized or a distributed ledger. And then you can kind of start talking about different attack vectors and eventually why we would need to get to needing a blockchain. Let me see if I'm doing something. Anybody see? Oh, it's right here. It's right here.
00:07:57.460 - 00:08:21.866, Speaker A: How about that? Is that going to parse? There we go. Okay, so now I can add that transaction over here. There we go. Okay, so this kind of gives us this feel of we can grab my address here, get the value of that. There we go. So now I can check the balance against the ledger. So now we have different accounts.
00:08:21.866 - 00:09:04.474, Speaker A: We have transactions interacting over here. And I haven't built this yet. I'm still working on it, the education around this. Then we start talking about double spends. We start talking about how the network needs to be on all the time, or you have to figure out a way to basically you get to all the problems of why blockchain and why we got to the Nakamoto Consensus and all that, but we can kind of play with this a little bit longer. What do I have, about ten more minutes, maybe? I think so let's just kind of get weird with this stuff and play around with it a little bit more. So I'm always looking for feedback and I have ETH Build up right now, so you can get in and play with it if you want.
00:09:04.474 - 00:09:32.500, Speaker A: But there's a ton of if you let's see, I think it's right click. Yeah, there's a ton of different components here. So if we get in and we look at actually, I think I made a list somewhere. If we get in and look at the components that we have here, there's some really fun ones in Web Three. Okay, now I remember what I was going to do. This is back to localhost. Let's get out of actually one more demo on ETH Build.
00:09:32.500 - 00:10:23.074, Speaker A: I hooked up IPFS, and I want to show you how you can save things. So if we set up a IPFS publish and we're just going to run on this channel and I set up a button to publish it. Okay. And then I'm going to set up a subscriber that will subscribe to that same channel and then output the message so I can type in like Hello World here, and it's going to publish it to IPFS and then the subscriber comes back around. But what I can do so all of this is happening in your browser. You're not really going out anywhere except for to compile contracts, I needed the Sol C compiler and I couldn't just dump it in because Node just completely runs out of memory as I'm adding all these libraries in. So now I'm starting to run like these third party services just to compile things.
00:10:23.074 - 00:10:53.130, Speaker A: But I'll get to that in a second. So what you can do, though, since this is all in your browser, you can save this and the whole thing is compressed into that QR code and anybody should be able to shoot that. If I click that, I'm going to get this exact thing. So I could download this as a file. It's just a compressed JSON file and then I can load it in and I'm going to get all these boxes back and I'll load in some stuff earlier. But see, I've got that here. So my phone is on the cellular network.
00:10:53.130 - 00:11:48.954, Speaker A: Now, I don't know if this is going to this is a shifty demo, so I'm going to try to put Hello Waterloo in here and hit did it go through? It did, yeah. So that went from my phone through ETH Build to like a peer to peer IPFS network and published there on this machine through a different network. So a lot of really, so a lot of different neat little networking things going on there. Okay, now let's go to local host and we can start getting a little weird with so at the Happy Hour tomorrow night, we're going to have a what is it? It's going to be a stock market. Stock market buying. So we're going to have a burner wallet, we're going to have David's burner wallet and we're going to have a stock market for the beers, and the beers will be increased. They'll increase in value on a bonding curve, and then they'll cool off on a second curve.
00:11:48.954 - 00:12:13.000, Speaker A: And we'll be adjusting those curves, like as people are buying. So it should look like a stock market. Right. So I have the contract here ready to go. And what I want to do is kind of go through kind of the education behind how transactions work and deploying if we probably don't have enough time for that. But let me just dive right into this as fast as I can and see how far we get. So let's see.
00:12:13.000 - 00:12:38.142, Speaker A: What we need first is probably let's just send value first, right? So go back to our text and our hash and our key pair. Okay. And plug that in here. And let's see. Let's just do Waterloo. That sounds good enough. And so there is our address.
00:12:38.142 - 00:13:04.230, Speaker A: And what I want to do is probably get a QR code for that. And I'm going to hit that with a burner wallet, send it some money. So what we'll do is I will oh, man. Come on, come on. About five minutes, probably. I'm going to have to shove a lot of stuff into five minutes. Seven minutes.
00:13:04.230 - 00:13:38.270, Speaker A: Okay, cool. So I'm going to send some money to that. So how do we test the balance of this key pair? Right? So what we're going to need is a web3 balance, and we'll push the address in, and then it's asking us for what chain we want. And so I'm going to do that on XDI in this case. So it will be what? Http? Right? I think that's it. Right? And that'll be our blockchain. And then we can check this guy's balance.
00:13:38.270 - 00:13:51.554, Speaker A: And it's currently zero, actually. Let's do dollars. Oh, that won't work. We need to go let's send this guy a buck first. Yeah. Okay. So I'm sending this dude a buck.
00:13:51.554 - 00:14:12.670, Speaker A: Okay, so now he has a dollar. I should be able to check this. There we go. Now we see that this guy has a balance, but this is classic blockchain development. You've got to explain way and decimals and all sorts of stuff like that. But eventually we get, oh, get out of here. Is this big enough? Maybe I should make this a little wider.
00:14:12.670 - 00:14:53.654, Speaker A: So eventually we will get there we go. So there's our $1. So now this guy has a dollar. Now let's say this guy wants to send some funds, right? So what we'll do is we'll add in a QR reader and that will output to a transaction block. And what I can do is hook that up to like, the two address, set up a value. We'll have to go two way. Right? But say I wanted to send $0.25
00:14:53.654 - 00:15:09.854, Speaker A: back to my phone. Let's see, what do we need? We need a private key. OOH, this can be hard to stretch it up there. Let's see. I think it's that one right there. Here, let's do this. I totally said that up here.
00:15:09.854 - 00:15:46.664, Speaker A: Good Lord. Okay, let's bring our blockchain over here and let's see. So data, gas. We're not going to worry about any of that stuff, but I think we're about ready. So if I have this QR reader set up, we need to toggle it and I'll show this guy my receive code. Uhoh oh, man, I'm not doing anything wrong here. That's got to be it.
00:15:46.664 - 00:15:58.844, Speaker A: That's the one. Maybe it's already did it already go through. Maybe it just doesn't disappear here. Let's double click this. Oh yeah, it's already there. Okay, so toggle this guy back again. Get him out of here.
00:15:58.844 - 00:16:41.192, Speaker A: Okay, so we've got our two account. There's kind of this gap right now between I'm explaining hashes and key pairs and a ledger and then all of a sudden we're sending transactions. So I have within my curriculum a lot to fill in there to get to the point where we're sending transactions. But I kind of want to just skip ahead and show you guys so we can basically sign this transaction and then I can send it. If I take the signed transaction and the blockchain, I can send this thing along. So this is just going to help me explain to people and help them kind of understand very visually how this works and we should get a hash out of that if I send it. There we go.
00:16:41.192 - 00:17:18.164, Speaker A: So now this dude probably is going to get that money back in a second. Okay, so now we've kind of explained transactions. We've kind of explained let's go a little bit different route here. I'm just piling stuff on here. But let's bring in a compiler and we'll compile the market contract that we'll be using tonight at the meetup or no, tomorrow night. Tomorrow night we got a lot of work if it's tonight and we'll set up a file drop here. Okay.
00:17:18.164 - 00:17:46.416, Speaker A: And then that's going to compile to bytecode and an Abi. And so if I drop this market contract in here and hit the compile button. There we go. So now we get this cool bytecode. So if we wanted to deploy this contract, we technically could take this transaction that we have set up here and we're going to pull the two address out. Right? So when you deploy a contract, you're basically sending a transaction with no to address. But this will be our data.
00:17:46.416 - 00:18:27.112, Speaker A: So we'll plug this bytecode into our data field and I think I need to have a nunce of two now, or maybe one. We'll see what happens here. Let's see if it's going to let me do this. So now if I sign that and I send that did not work. I bet it's either gas limit or things that like a new user. I'm going to have to figure out clever ways to sort of educate them on this because there's a lot going on here? Oh, no, that went right. There's a transaction.
00:18:27.112 - 00:18:50.204, Speaker A: It's signed. What happens when I send it? Oh, we're getting an error. Oh, the gas is too low. Okay, so let's go back over to our gas and set that at like 2 million. Sign it again, send it again. Let's see. Did that one go through? Yeah, we got a hash.
00:18:50.204 - 00:19:49.270, Speaker A: Okay, so there we just deployed a contract. So then what you could do is once you have the address of the contract, since we're kind of out of time, I'll just quickly dump in a contract here. And what you'll do is you'll plug in an Abi and an address and your blockchain, and now you'll have this over here. So I could technically query the price of a beer, right? So if it was drink ID zero, I could call against that and I'd get the price of the beer out on the other side. Or if it was more of a set function, like I was doing a set owner, I could plug in an owner here and it's going to give me the Abi encoded version of that over here, and then I would plug that back into a transaction. So all these building blocks sort of plug together to do what we're familiar doing, kind of on the command line. But I think it's going to help me to sort of educate people and hopefully bring new people into the space and give them this whoa, that's really cool programmable money Goosebumps moment.
00:19:49.270 - 00:20:09.790, Speaker A: Today was a little less of that and more of just kind of me explaining how this stuff works. But I would love Feedback. And it's available at ETH build. So hit me up. Like I said, I'm at Austin Griffith on the socials. Any questions or anything leading up? Yeah. Yes, please.
00:20:09.790 - 00:20:48.544, Speaker A: Oh, absolutely. Yeah. It does feel like very elementary with like the prime prime color. Prime primary colors, for sure. Yeah, I would I would love to see something like this there. Right? Like this is meant to be kind of an educational workbench. When I get through it and I end up building some crazy stuff, like, let me load in.
00:20:48.544 - 00:21:36.450, Speaker A: I have this badge dropper I built. It ends up looking like this very complicated thing that is doing all this crazy stuff. But in the beginning, it's like these really simple building blocks, and it's all public, it's all open source, everything's out there for anybody to use this. But also I personally would like to evangelize it more and get into places like that and make sure this is I'm not exactly sure my three year old is going to understand a key pair, but maybe sort of like email, right? Email wasn't we didn't know what email was until it came along. Some of the technology is abstracted away and some of it becomes very native to our culture or whatever. I think probably a key pair will be which is an interesting thing like understanding what a private public key pair is and some of the properties. So maybe my three year old will get into that.
00:21:36.450 - 00:22:28.590, Speaker A: I hope to do that one day, to have that stuff available and to also evangelize it to a level that it gets out there and people use it. Anybody else? Yeah, I think you could. So what you can do is you can dump this file now to just like a node JS file and run it without the GUI or anything like that. So technically you could build a DAP. But I think this is more like building proof of concepts, like, hey, what could this thing look like? Can we wire it up and just get a feel for how it works? So for me, it's used for education, but like I said, yeah, it does have some powerful pieces like map, complex contracts. Go through your thing and be like, oh, that's how right. Without getting context of complex contracts diving in.
00:22:28.590 - 00:22:59.464, Speaker A: Totally, yeah. Just having like a nice visual environment where you can kind of poke at things. And what happens if I do this? What happens if I do this? Yeah, for sure. Anybody else? What up, Billy? Yeah, go ahead. How hard is it to make a custom little widget? Oh, like how to code one up. Right? If you grab my code. Let's go look at R1 quick.
00:22:59.464 - 00:23:14.850, Speaker A: That's a great question. So let's look at maybe the key pair. Right. And this is using a library called Light Graph. So I didn't build the underlying this whole thing I put together in a few weeks. So it's very, very fresh. Come on in.
00:23:14.850 - 00:23:31.104, Speaker A: Arnand. It's not Arnand. Arna. You got to just French it up at the end, right? Yeah. Well, welcome. So you have basically your class here and you set your inputs and your outputs. And then there is an on execute.
00:23:31.104 - 00:23:58.236, Speaker A: And that's basically like if you look at your CPU, this thing is using way more CPU than it should be. Right. This is a proof of concept kind of thing because this thing is just like jamming away if the thing was doing a hash function. Here, let's do this. This is cool. So if I take a hash function and I take some text and I wire them up and I type hello, we're going to get a hash out of that right now. Watch what I do here.
00:23:58.236 - 00:24:19.316, Speaker A: I'm going to wire this guy back around. Oh, wait, what did I do wrong? Usually that will give me let's see, something's not right here. The hash function is not working. What's going on? Oh, there we go. Okay. For some reason it wasn't running. Now let's wire it back to itself.
00:24:19.316 - 00:24:29.684, Speaker A: There we go. Yeah. Okay, so it's like constantly running. So you have an execute function. So what we could do, we could do like a substring. Oh, man, I wish I had more time. It's so much fun playing with this.
00:24:29.684 - 00:25:09.836, Speaker A: We could do a substring and we could not subscribe. We could basically set this thing up to mine for accounts that have leading zeros or something, right? We could check for a substring that has more zeros and we could have it stop when it gets to the one. But basically, you've got this on execute and it's running through doing something every time it renders the object. So your CPU definitely takes a hit here. And then there's a display here somewhere, too. So if I go to, like, maybe the and his stuff is all in the canvas and then I'm rendering react, like hacking react in over the top of his canvas. So it's really kind of messy, but it's proof of concept.
00:25:09.836 - 00:25:42.296, Speaker A: It's coming together. But yeah, you sort of have this execute function. You have, like, when someone calls a function and then you have the display stuff, but yeah, you just kind of plug in a thing and it just shows up in that menu. So it shows up in the menu here, but you can also just type file drop, right? And it'll show up. Okay, I think I'm probably out of time. Any other quick ones? No, I think it's plenty. Go to ETH build, check it out, give me feedback.
00:25:42.296 - 00:25:44.650, Speaker A: I'm at Austin Griffith. Thank you guys so much.
