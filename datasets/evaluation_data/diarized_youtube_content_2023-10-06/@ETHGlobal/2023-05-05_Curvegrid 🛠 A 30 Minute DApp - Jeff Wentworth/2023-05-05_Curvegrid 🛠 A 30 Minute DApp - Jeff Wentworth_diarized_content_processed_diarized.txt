00:00:07.610 - 00:00:21.594, Speaker A: Huge audience today. It's really great. Really appreciate it. Hello, everybody on the live stream. And that's tuning in later on. My name is Jeff Wentworth. I'm co founder of a company called Curve Grid.
00:00:21.594 - 00:01:15.634, Speaker A: And this is a 30 minutes DAP. So what we're going to do for the next 30 minutes is basically walk through building a sample DAP, and we're going to show you how it's possible to do that faster and easier than it might be if you build everything from scratch. So basically, what we're going to do today is not only talk about building a DAP, but also some of the challenges that you encounter building adapt and then talk about some, let's say, bonuses that might help you more broadly in your DAP building experience. So, first of all, as I mentioned, my name is Jeff, co founder of Curvegrid. We're actually based here in Tokyo, Japan. We have been in business since 2017 for six years. And mostly we tend to be in the background a little bit.
00:01:15.634 - 00:02:17.240, Speaker A: So our customers tend to be blockchain companies or developers that are building different kind of DApps on EVM blockchains. And really for the first time at this ETH Global hackathon, we're looking to connect with more individual developers in a much broader audience. So you can see us here in the red coveralls. We're here to help. We have ten people at ETH Global Tokyo, and if you have any questions about building a DAP in general, not just our product, but anything technical related, design related, or just about Tokyo and Japan, we're here to help. So creating a DAP, and in fact, whether this is some sort of production DAP or a hackathon, like this weekend, there's a whole series of steps that you have to go through, including planning the back end, the front end, the smart contracts. We're going to talk about all of that, and then we're going to talk about some of the other ways that we're here to help you.
00:02:17.240 - 00:02:55.346, Speaker A: So first, I want to talk a little bit about multibas. Multibas is multi blockchain as a service. So our whole theory is that this is and will be a multi chain world. But blockchain is difficult to build on. And so what we're really all about is helping you get to market faster, more easily, and ultimately doing it with fewer developer resources. I talked a little bit about Curvegrid, the fact that we're based here in Tokyo, Japan. We have a number of different solutions as well that can help you.
00:02:55.346 - 00:03:50.258, Speaker A: So in addition to multi core multibas, we also have a multibas proof bridge and spreadsheet. The latter two are actually former ETH Global hackathon projects that we turned into products. And we also have Nftpot, which is shopify minting app for minting NFTs on shopify. So what is a DAP? We're going to go back to first principles or basics. And again, whether you're building the next decks or NFT Marketplace or you're just hacking on something for the weekend. This is what a typical DAP looks like, right? Front end, back end, connecting to a node provider, smart contract on the blockchain. In the mix there as well you have a wallet, whether that's a non custodial or custodial wallet, you've got a database where multibask sits in this stack and makes things easier, is typically between your DAP, front end and backend and your smart contracts.
00:03:50.258 - 00:04:40.534, Speaker A: And the idea is that you're actually having to build less on the front end or backend and less of kind of the core infrastructure. We take care of a lot of that for you and so that's what multibask provides. So we put together a sample DAP that you can use as a base for your work this weekend or even going forward. And our DAP is a NFT sprite maker. You're going to see it in a moment. Again, if you're thinking about putting together an application, the first thing you want to do of course is ideate, get your team together and then plan, build and submit. So throughout the next several pages we have a QR code at the top and you can find this sample DAP repo there.
00:04:40.534 - 00:05:22.930, Speaker A: We also on our website Curvegrid.com have a blog post that we've put up with a complete walkthrough of this tutorial as well as other resources to help you get started in building a DAP. So the planning phase is typically user stories, design, user flow. You decide on your stack, front end and back end and smart contract. And then for the NFT Sprite maker, this is all about one of the key things that we want to do here was allow people to free Mint and you'll see what I mean with that in a moment. On the front end, this could either be used by end users or admins. We can talk about that a little bit more.
00:05:22.930 - 00:05:38.274, Speaker A: And for the smart contract, we started with the open Zeppelin wizard NFT Smart contract and built out from there. So here's our sample DAP. I'm actually going to go switch to it here. You can see it's just running on localhost. So. It's called sprite. Write.
00:05:38.274 - 00:06:01.390, Speaker A: And basically what it allows you to do is draw some sort of fun picture here and then connect your wallet. We're going to do connect wallet. Come on internet. There we go. Enter my password. There we go. Connect my wallet.
00:06:01.390 - 00:06:35.830, Speaker A: Okay, I pulled up the wallet address and what we've done here is we're actually with a custodial wallet paying the gas fees for the user to mint. So when I click Mint here, it's going to send the transaction to the blockchain and it'll show up a minute later once it's mined. And there we can go. We can see the sprite and the token ID and the owner and the time that it was last transferred at. We can see some of our past Sprites. If you want to try this out. You can click on any of this past sprites to load it back into the canvas and then continue drawing.
00:06:35.830 - 00:07:43.670, Speaker A: So this is Sprite write our sample DAP for basically writing Sprites that we're going to be demonstrating a few different things here. So what are some of the challenges you have when building a DAP? Well, the first is interacting with a smart contract, right? How do you interact with the smart contract? The second is around in this example is minting the NFTs. And again, the whole point of the sample DAP is we want to mint the NFTs for free for the user, right, so that they don't have to spend gas to do it. Then the third challenge is listing the minted NFTs, and the fourth one is managing the smart contract. So here's the structure of our sample DAP, and I want to point out that on the left you can see we have a screenshot of the DAP, as I had shown in the kind of typical DAP structure before. We have a front end and a back end. The front end is written in HTML CSS and TypeScript.
00:07:43.670 - 00:08:26.070, Speaker A: The back end is written in Go. The front end is actually using two different techniques to get data from the blockchain. So first of all, the color palette is actually being pulled from the smart contract itself. The second is that we're using something called an event query to actually pull the table. Here the list of Sprites, of past Sprites. And those are all going through multibask to the blockchain. And then on the back end, the front end is also, of course, talking to the backend, we have our Multibask Go SDK that's talking to our HSM transaction manager TXM to actually mint for free the Sprites.
00:08:26.070 - 00:09:16.946, Speaker A: So what does multibas do for you, basically? How would you set it up in a typical environment? Well, you would typically have both a development and a production environment. And the key differentiators here, the key differences here are in your development environment, you would have developers with administrative rights, maybe your whole team of, say, 50 or 60 people that might be making frequent updates to the environment. And then in your production environment, you're going to have your operations team with very limited access and updates, for example, controlled via CI CD. So keep this in mind as we continue to go through. So how do you get set up on this sample DAP? First, again, you clone the repo. You sign up for multibas. You set up your project, and then you understand Multibask middleware.
00:09:16.946 - 00:09:56.790, Speaker A: So signing up for Multibas is super easy. What you do is you go to our website and you click on Get Started and that will take you through a sign up process. There's no credit card or anything needed, just your email address and name and you're away. And as I mentioned, we have a whole blog post, an ETH Global Tokyo developer package. If you go to Resources and blog, that basically walks you through all the steps that you need to get started. In addition for that, we have extensive documentation, including articles and an interactive Rest API reference as well. So you'll be well supported.
00:09:56.790 - 00:10:55.044, Speaker A: Okay, so I've got my Smart Contract written, I've got this cool, like, Sprite Smart Contract written, and now I want to interact with it. How do I do that? Well, there's different tools that one can use, but in Multibass, we've basically built that all into one package. So what I'm going to do here is I'm going to show you the multibas web UI. And this would typically be used by developers during the development stage and then the operations team during the ongoing production stage to essentially manage and interact with multibas itself. So when you log in, you're going to come to the Core Contracts page. What you can see here is an interactive web UI that allows you to do a few different things. First of all, you get all of the static state variables at the top.
00:10:55.044 - 00:11:30.300, Speaker A: You can see output here. Here's the color codes that I mentioned before that are coming from the Smart Contract. We have the total supply, we have the symbol and the name. Then we have all of our events from the Smart Contract, and then we have all of our methods or Smart Contract functions. Basically, what we can do here is use this in a way to interact with the Smart Contract. So for example, in this function here gets bright image Uri. If I come in here and I type in zero get method, I'm actually going to get the data back from the Smart Contract.
00:11:30.300 - 00:12:13.308, Speaker A: One of the nifty things we've done here is we've embedded all of the image data directly into the Smart Contract itself. So the Smart Contract is actually rendering the SVG file directly. So if I paste this data Uri in here, I get my beautiful green field with the sun shining. But you could see, I think, how sort of easy it is to really interact with your Smart Contract this way using the multimask UI. The second way is via the Rest API. And again, in addition to our documentation, we also have integrated Rest API functionality built right into the multibas UI here. So you can see how easy it is to really interact with the Smart Contract this way.
00:12:13.308 - 00:13:03.288, Speaker A: In addition, we've got multiple SDKs right now in beta for Go and for TypeScript. And again, those are linked from the tutorial page. So you don't need to build everything from custom with the Rest API. The final feature that I want to point out is that when you are interacting via the Rest API, we have full role based access control with both users permissions, cores, domains, and a full audit log. And that allows you to build either a front end or a backend directly on top of multivas. So, okay, great. I'm interacting with the smart contract via the Web UI or via the SDK or the rest API.
00:13:03.288 - 00:13:55.896, Speaker A: Now I actually want to build a little bit more automation in there. And what I actually want to do, what you saw earlier was we're actually paying the gas fees on behalf of the users that are minting the NFT. And we do this using something called HSM, which is basically a custodial wallet or quasi hardware security module that allows you to programmatically sign transactions and sign messages on the blockchain and submit them to the blockchain. At the moment, we primarily support Azure key vault. It's a cheap and cheerful, basically a third party custodial service provided by Microsoft Azure Wallet Service. And in that tutorial, we have very easy steps to basically sign up for an Azure account. And then we have a PowerShell script that in one shot allows you to set up a key vault.
00:13:55.896 - 00:14:23.936, Speaker A: You then load it into multibas, fund the HSM and you can interact with it via the Rest API or even the Web UI very easily. So I come back into multibass. Here. I go to HSM and Configuration. What I can see here is my HSM configuration. Right? This is coming from, again, would have been loaded in from Azure Key Vault when I set that up. And then I also have my transaction manager.
00:14:23.936 - 00:15:08.644, Speaker A: So I come into my Hsmtxm, I can see all of my past transactions. This was the one that I most recently minted. And if I click into here, I can see all of the transaction details, including all of the decoded function parameters and event parameters that were emitted from here. So this is a very easy way that either if you're working on something that is not publicly released yet and so you don't want to confirm all of the data on Etherscan or if you're iterating rapidly, you can very easily use the Web UI again to manage this. So that's the HSM. Next. How do I list the minted? NFTs So there's a few different strategies for this in general.
00:15:08.644 - 00:16:04.100, Speaker A: The first is you can iterate using Smart Contract functions through all the NFTs. One of the challenges there, especially if I'm using something like the ERC 721 Enumerable Smart Contract, is it's very gas heavy. The second way is events, right? And really this is the correct way in general to be interacting with Smart Contracts from a DAP off blockchain off of the blockchain. The idea here is that essentially the Smart Contract is going to be emitting event logs and you're reading those and then using that data to essentially drive your front end or your back end. The challenge with that, of course, is that the blockchain is eventually consistent. And it's very, very complicated to typically deal with this from scratch. So often what you'd be using is a piece of technology called a chain indexer.
00:16:04.100 - 00:16:57.108, Speaker A: We actually have a chain indexer built into multibas. So if I come back to the multibas UI here, I can go back to my contracts, I can take a look at Sprite right here and I can see all of my events. And in fact, if I just copy and paste this Sprite right, there we go. I can see come on. There we go. I can basically get a decoded JSON view of all of my event details, including again, the transaction that initiated it, the parameters that were in the transaction, the decoded event parameters, time that it was triggered at. And this isn't coming from it is coming from the blockchain, but it's via our intelligent cache which handles things like chain reorgs nodes, restarting, everything like that.
00:16:57.108 - 00:17:49.056, Speaker A: We have one additional feature built on top of that which is called event queries. And essentially this is a way to aggregate this time series data and report on it very, very easily. So again, even though the DAP itself, Spritewrite, is being driven programmatically, this whole table is being driven by an event query. We can also go and take a look at that in the multibas UI. If you come in here, you can see very it's very easy to basically define your event queries either through this interactive builder or just via JSON that is events. Next we have managing the smart contract. I'm not going to demonstrate this in real time, but essentially we also have a built in Gnosis multisig functionality that's built into multibass.
00:17:49.056 - 00:18:56.920, Speaker A: So what that allows you to do is essentially you can set up a multi SIG wallet, either link to an existing one, deploy it to the blockchain, and then if you set, for example, that multi SIG wallet to be the owner of your DAP when you come into multibass either again programmatically or through our web UI and you say do safe Mint. If you select as your signer here that Multi SIG wallet, multibass will automatically wrap your transaction in a multi SIG transaction and either allow you to sign it via MetaMask or via your HSM and submit it to the blockchain. So we've basically taken all of the complexity away from dealing with multisig wallets and multi SIG transactions. Bonus time. This is the first bonus. So our spreadsheet plugin, as I mentioned, this was a hack money 2020 finalist project that we then over the subsequent months turned into a full fledged solution. So what's the lowest common denominator for inter, for building any kind of application? I would argue that it's a spreadsheet.
00:18:56.920 - 00:19:53.116, Speaker A: There's something like 9000 smart contract developers in the world, something like 9 million developers in general. 25 million actually, sorry, nine 9000 smart contract developers, 25 million developers, but there's a billion spreadsheet users. So what we actually have is we have a publicly available it's available on the Google Docs or Google Workspace Store. We have the multibask for Google Sheets plugin. And this allows you to essentially when you install it and set your Multibas deployment ID and API key. You can come in here and in real time you can actually query Multibask and essentially the blockchain in turn. So if I do Sprites, query Sprites, basically this is going to go out and call my event query and pull all of my blockchain data in real time into here and you can say Token ID zero through seven.
00:19:53.116 - 00:20:39.900, Speaker A: If I come back to Sprite, write and let's say I load in my smiley face here and put a little pink hat on top and then go Mint again. It's driving my HSM to Mint, that to the blockchain. I come back to here and it's a spreadsheet, so I actually have to do something a little funky and delete this. There we go. Put it back in because it's Google Sheets, but what you should see in a second is I've got my Token ID eight that was just Minted. So this is another option, and it's great for both debugging as well as, let's say, if you're a company, your finance team, or you want to do any kind of reporting, very quick reporting on your smart contracts. We can do things like we can call any arbitrary on chain function.
00:20:39.900 - 00:21:37.630, Speaker A: And of course, you can use aliases as well, which is another, I think, key thing that helps you go a lot faster with multivas. So we're going to do, let's say, balance of this address here and it's a spreadsheet, so I can just use all of my standard spreadsheet semantics. And you can see that this address here has not a balance of nine on my ERC, 721 smart contract. That's bonus number one. Bonus number two is Nftpot. So Multibas is our main product, but also last year we released a Shopify NFT Minting app that allows you to easily create Mint and sell NFTs on Shopify, either through lazy Minting or also through importing existing NFTs. And it's super easy to integrate into your Shopify store.
00:21:37.630 - 00:22:23.740, Speaker A: Shopify's logged me out, so I'm not going to show that to you right now. But basically just add this into your store and yeah, you can immediately be building store that allows you to sell NFTs. So that's another option for this weekend, actually. If you are less into code and more into e commerce, we're happy to have you build on Nftpod as well. Super bonuses. We've actually prepared a public GitHub repository. It's going to go live a little bit later tonight, but if you're interested in it, come talk to our team with all of the or no, I shouldn't say all, many of the other sponsor smart contracts preloaded with an easy script to essentially get you up and running in Multibas.
00:22:23.740 - 00:23:04.836, Speaker A: Regardless, what you'll see in the sample tutorial repo is we have a hard hat and truffle plug. Hard hat and truffle plugins for very easily loading your smart contracts into basically multibass at the same time that you deploy them on the blockchain. So I'm actually going to show you that now in real time. So I have all of my minted sprites here, and I can see on Multibass, I also have, for example, total supply of nine. And here's all the Sprites that I minted. I'm going to flip over to my terminal and I'm going to go Yarn. Whoops yarn deploy sprite write testing.
00:23:04.836 - 00:23:47.330, Speaker A: So standard Yarn or NPM script with hard hat. And with the Multibas plugin, it's basically going to go and redeploy the smart contract and relink it to Multibas. And when I come back in here, you see that all of my old Sprites are gone because it's a new contract version and I'm just left with what I had preset up. Okay, great. So in closing, we would love for you to use Multibas. We'd love for you to try it out this weekend. We've been working with different companies for many years, helping them get their DApps to market much, much faster.
00:23:47.330 - 00:24:11.334, Speaker A: But even if you don't use Multibas, we're based here in Tokyo. We've got a big team. We're a little bit visible with our red coveralls on, so it should be pretty easy to find us. We're happy to chat about Multibas. We're happy to chat about DAP development in general. We've got engineers, designers, marketing, and business folks as well. So we're happy to help with any technical questions or any questions about Japan and Tokyo.
00:24:11.334 - 00:24:48.358, Speaker A: And I should mention our prizes. So our total prizes are $2,000. We have $1,000 for first place. Second place is $700, and third place is $300. And for anyone that incorporates Multibass in some way into your project this weekend, we're going to issue an NFT that may be redeemed for physical merch later on again through Shopify. So we'd love for you to participate and join us. So, again, QR code for the repo is there.
00:24:48.358 - 00:24:54.860, Speaker A: Our blog post has more details on the tutorial. And thank you.
00:25:14.870 - 00:25:31.426, Speaker B: Yeah. So as we're using the API, do we actually have to necessarily plug the wallet to some Azure Key Vault and then have that specific plugin? Or can we just fund any normal wallet and then, hey, at our risk, I'll end perils.
00:25:31.458 - 00:26:22.520, Speaker A: Though you can fund any normal wallet, you absolutely don't have to use Azure Key Vault. That's only if you want to use the HSM functionality. So it works really well with MetaMask or any other web3 wallet as well. So, for example, if I come over here and I go to the Multitoken Smart Contract and I click Deploy, and let's say I just plug some values in here and I hit Deploy, I'll get a Metamass pop up asking me to deploy the Smart contract, and I'll confirm that and there we go, smart Contracts deployed. And I can see the deployment transaction here and I can start interacting with it right away. So, yeah, absolutely not a requirement to use that thank you so much. All right, any other questions? I think we do have a couple of minutes left, actually, so yes, please.
00:26:24.670 - 00:26:26.970, Speaker B: Do you have event webhook?
00:26:27.390 - 00:27:00.826, Speaker A: Webhooks are coming. Webhooks are absolutely coming. Something that might help you out there in the SDK is allows you to basically do polling for now and again with our event queries, where you're not waiting on the blockchain node, you're not spending any, let's say, credits with node blockchain node providers. Yeah, it's super easy. Often requested feature. It's coming soon. Any other questions? Okay, well, thank you very much.
00:27:00.826 - 00:27:02.430, Speaker A: Happy hack game. Bye.
