00:00:00.570 - 00:00:33.720, Speaker A: I'm really excited to actually welcome our next talk. And for our next talk, we're going to cover what it means when we talk about ETH one, ETH one point x e two, and how do all these things kind of merge together? And how do we actually make sense of all of this to kind of really get to understanding how we build Ethereum for tomorrow? And talking about all of this will be Danny Ryan, who is a researcher at the Ethereum Foundation. So I hope you enjoyed Danny's talk on how to make sense of everything ethereum and I'll let him take it from here.
00:00:34.650 - 00:00:52.204, Speaker B: Hello. Thank you. Appreciate the intro. Let me share my screen. Okay, great. Thanks for having me. My name is Danny Ryan.
00:00:52.204 - 00:01:59.960, Speaker B: I work with the Ethereum Foundation on the research team. I spend almost all of my time working on kind of core consensus protocol upgrades. And that project is kind of encapsulated in what we call E Two. And today I wanted to give you some context on what E Two is, what ETH One is, what these things are in relation to each other, and how they kind of come together to be the future of main net. And if you take away one thing from this talk today, it's that the terms ETH One and the terms ETH Two are a misnomer and imply a false sequentiality, they imply one being deprecated for the other, they imply some sort of migration. They imply something that not quite accurate. Instead, they represent different layers of the stack, different layers of focus, different layers of optimization and R and D.
00:01:59.960 - 00:02:38.304, Speaker B: And I'm going to get in and explain what these two layers are and how the vision of how they will come together in the near future. So E One plus E two is Ethereum talking about future main net today. So what is ETH One? E One is quite plain and simply the Ethereum we know and love today. Again, if I could erase these terms and use something different, I would. Maybe we'll try to in the future. But ETH one is ethereum, warts and all. It is a single blockchain.
00:02:38.304 - 00:03:25.288, Speaker B: It is run by a proof of work mechanism. It has tons of DeFi activity, NFT activity, identity protocols, all sorts of really cool stuff and it's why we're all here. But concretely, we have implementations of this protocol, kind of accesses into this protocol and gateways into this protocol called ETH One clients. And really, what is an ETH One client? Obviously it's an implementation of the protocol. But we'll dig a little bit deeper for the purpose of this talk. I'm going to view it as it's consensus and its user layer. Its consensus is Proof of work, which is actually a relatively simple consensus mechanism.
00:03:25.288 - 00:04:21.588, Speaker B: That's one of the beauties of Proof of work is that it is indeed simple. From an implementation and software perspective, a lot of the complexity of the protocol randomness leader election dealing with the actual economic asset for the crypto economics that's all handled outside of the protocol. In the sophisticated mining hardware, you end up with relatively simple rules and protocol, verify some hashes, add up some difficulties and find the head of the chain. In addition to what I would argue is a thin consensus protocol and software is a highly optimized user layer. When you think about all of the hard work that goes into optimizing Ethereum and dealing with the complexities of state and transactions and all of that, that's really in the user layer. And if you go and look at the diff in Geth, there's probably almost been no work done on the proof of work consensus algorithm for years. Go look at it.
00:04:21.588 - 00:05:13.300, Speaker B: I haven't looked at it. Probably pretty thin on what's going on there. Whereas all the work is happening on state sync, state management, transaction optimizations, EVM, execution and it's all really like the secret sauce here is how to get that user layer highly optimized. And so I mentioned some of these things, some of the optimizations, you hear people and some of the deep work being done on equone clients are transaction mempool management. There's riddled with security issues when people can send random transactions to you, dos, vectors, all sorts of stuff transaction gossip, optimizations to optimize bandwidth consumption, efficient EVM state transitions and state accesses. State writes, read and writes and a big one is state sync. The active state in Ethereum, quite large.
00:05:13.300 - 00:06:21.260, Speaker B: And so managing that from how do you get it, how do you share it, how do you store it? A lot of effort goes into these types of things. This is an extremely oversimplified diagram that I've threw together of an ethone client. You have the PDP network where you're communicating with peers and sharing information about the protocol transactions, blocks state sync and you have this proof of work consensus which is at the top because it's kind of the brain. It's ultimately deciding what should be done at any given time with respect to finding the canonical chain, which blocks should be included and viewed as canonical. How should it manipulate the state with respect to that? And if you were producing blocks, if you're a minor, how to go about that and then you have everything else and everything else is a lot and everything else is again where a lot of the hard work is done. Managing the EVM state transitions, managing the complex state and the state tree, managing the mem pool and all the complexities that come with that. And so that's neither one client and the bulk of the work is not in that proof of work component.
00:06:21.260 - 00:07:25.640, Speaker B: A little side tangent, what do we mean when we talk about e one X? E one X is generally a group of people on the internet. Like all these things, we're just random people on the internet focusing on R and D, on the user layer. So all those things, it's not an upgrade of that proof of work. Instead, it's really all those other things. How do we manage state, how do we manage transactions and execution and how can we make it more sustainable and how can we make it a better experience for Ethereum and the community? That's one x focusing on that layer to mention some of the things going on here. They're looking at upgrading the state. Try from this hexary try to a binary try for some efficiency gains stateless block processing as a method for managing the complexities of having a large and growing state so that we can have spectrums of different types of clients interacting the network that don't necessarily have to have all of the states account abstraction to increase open up some interesting types of applications.
00:07:25.640 - 00:08:08.620, Speaker B: And some of the stuff I'm really excited about is some of the security implications of having account abstraction, being able to do tornado cash and that kind of stuff in a more secure fashion. Gas fee reform 1559, improving the UX of getting transactions included, improving some of the security concerns around minor structural value. Again, all in this user layer. So that's ETH one client. Any questions? I'm sugar e two. What is ETH Two? We talked about ETH one. What do we mean when we say E Two? Really what E Two is, is a radical upgrade to the consensus layer of Ethereum.
00:08:08.620 - 00:09:03.052, Speaker B: When you look at all of the research for the past five years that has culminated into this E Two project, all of the work going on in E Two clients and all of the work in this layer and in this subsection of the Ethereum project is on consensus upgrades. Can we upgrade to a more secure, more sustainable and more scalable consensus mechanism? And that's what we mean by E two. And so again, different layers, different separation of concern, false sequentiality bad terms. E one, e two bad terms. Maybe they're here to stay, but let's start thinking about them more as layers of the stack. So it's ultimately this is back to that crappy diagram of an ETH One client. It's looking at that proof of work consensus mechanism and it's saying can we do better? Again, can we make it more secure? Can we make it more sustainable? And can we make it more scalable? Past five years of research, say, are resounding.
00:09:03.052 - 00:09:36.772, Speaker B: Yes. I just wanted to include this image because I thought it was pretty cool, pretty worthless slider than that, but great decide. Yes. So the plan is to move to a proof of stake and Sharded system, sharded consensus mechanism and I'll talk to you a little bit about what that looks like. So what then is an ETH Two client? We have this piece of software called an ETH One client highly optimized user layer. But what is an ETH Two client, really? It doesn't touch any of that user layer stuff. It's really looking at that brain.
00:09:36.772 - 00:10:23.816, Speaker B: What was that? Proof of work brain and it's swapping it for building out a proof of stake and sharded consensus. Like I said, proof of work. We get a lot of stuff for free because it's handled in extra protocol complexity, whereas with proof of stake and a sharded consensus mechanism, there's a lot of in protocol, a lot of software complexity to make that work. And so all of the work that's gone on in E Two clients in the past two years is to solve that problem, is to handle and manage the complexity of a proof of stake and charted consensus mechanism to zoom in into that brain right there. We solved that problem. Or solving that problem through the introduction of a system level chain called the Beacon. Chain that manages Validators, manages the Core Consensus, manages a system level state called the Beacon State.
00:10:23.816 - 00:11:00.192, Speaker B: Has its own P. To P layer, where it essentially manages gossip and communication of system level, consensus level items such as beacon blocks attestations validator exits, that kind of stuff. And ultimately manages is the brain for the consensus of rather than just one chain. My cat, of course, is here rather than just one chain. ETH One, as we know and love today, managing the complexity and consensus of multiple chains, then we call them shard chains. So that's what an E Two client is. It doesn't touch the user layer.
00:11:00.192 - 00:11:46.116, Speaker B: It's coming to consensus on. It's a sophisticated mechanism to come to consensus on things. And obviously the stuff that we want to come to consensus on is things that are valuable to users and valuable user layer. But it is more of just a general mechanism to come to consensus. So then, like I mentioned, one of the things we want to come to consensus on is ETH One is the ethereum chain that we have today. And so the plan is to hot swap the consensus of ETH One at a point in the future with the consensus proof for consensus, with the consensus of an ETH Two client, with that proof of stake, sharded consensus. So I've kind of implied and alluded to the fact of where we're going.
00:11:46.116 - 00:12:42.064, Speaker B: But we have all this incredible work that's done in East One and on E One clients. GEF is a machine. Like there's awesome stuff going on Nethermind, badass stuff going on, all these clients, lots of great work going on in that user layer. And then in East Two we have incredible work going on in this consensus layer. And so the future of the ethereum stack from a node perspective is really the unification of these two pieces of software into a beautiful cohesive combination that each piece of software handles the sophistication of its designated layer. So let's drill into this image and take a look at what that actually is going to look like. In the prototypes of this merge that we've been working on, this looks like an E two client and an ETH one client.
00:12:42.064 - 00:13:26.396, Speaker B: Or as we might call it in the future, an ETH one engine running on the same computer connected via RPC. So that ETH One engine, that's that ETH One client diagram that we had earlier, instead of a little proof of work brain, it's opened up its consensus to be controlled via RPC, to be controlled via a remote protocol. Now, the E Two client is running in parallel to this E One client and it's company consensus on things. It's driving, it's building that system level chain, it's building the shard chains and it's communicating to its local ETH One client the state of things. The state of things from a system level perspective. Being like, here is a new block. Rather than the proof of work saying here's a new block, it's saying, here's the new block.
00:13:26.396 - 00:13:59.096, Speaker B: Oh, there's actually been a minor reorg here. Update your internal state. This is the new head. And really that E Two client becomes the driver, becomes the brain, whereas the E One client handles all of the user layer complexities transactions, state sync, all that kind of stuff. This quick zoom in, these are just the two diagrams. The E Two client controlling to the E One engine via this RPC and getting responses, sending requests, getting responses, a unidirectional directional protocol. The E Two client being the brain drives.
00:13:59.096 - 00:15:01.410, Speaker B: And that simplifies this relationship between the software in the prototypes. There are prototypes of this unification of software and ETH One existing as a shard. Today in these prototypes, we have four RPC methods block production, block validation, block insertion, and setting of the head. Produced block is similar to the Git work RPC call where on demand today in ETH One, where on demand you say, given all the transactions in your mempool and given your current state, give me a good looking block to build on this chain. Validate block is I've got this shard block. I do some base validations on the system layer, for example, validate the proposer signature and some other things. But then I say, hey, ETH One client, can you actually validate this with respect to all the user layer rules? Can you actually execute the transactions here and see that things turn out valid? And if so, return true? Great.
00:15:01.410 - 00:15:41.532, Speaker B: Insert block. This is kind of a variant on validate block. It's really like insert it into that local ETH One block tree and updates the state and set head handles reorg. So the E Two client, being the controller of the consensus, understands when the shard chains reorg and need to be reorg. So when you need to update the internal state of what's going on in E One and on that user layer, you can set the head there. Validate block can easily be modified to be stateless and some of these methods can be stateless. And there might be additional methods that make sense to add, for example, the East Two client is aware of finality and so might tell the ETH One engine that it's time to you can prune these things.
00:15:41.532 - 00:16:21.428, Speaker B: This has been finalized, so the E One engine can be a little more proactive in pruning state and things like that. Okay. This E 22 merger work has largely been carried out thus far by Mick I L from TXRX at Consensus and Guillaume with the Gas team at the EF. They've been driving these prototypes. It's pretty exciting to see these two pieces of software come together and to see that we can then by keeping the user layer intact, we can leverage existing wallets, existing tooling to interact with that ETH One shard. So, for example, you can check it out. Mikhail has this out on Twitter.
00:16:21.428 - 00:16:55.472, Speaker B: I'll repost it later today. But he has a video of demoing the E Two driving a multi sharded consensus. There being an ETH One shard and sending transactions with MetaMask unmodified MetaMask very cool. So the vision here is really to not modify, not to make extremely minimal modifications to that user layer in this migration and upgrade of the consensus. I got some cool stuff going on. Shout out to some of the quilt team. It looks like they're going to get involved in this ETH One E Two merger effort.
00:16:55.472 - 00:17:33.244, Speaker B: Now that we have the base demo in place, there's plenty of work to do, a lot of fun to be had. And if this stuff interests you, please reach out in the coming months. There's plenty of fun stuff to do on the development and the research side. So we're working on the proof of work, proof of stake, hot swap mechanics. So essentially, on the live ETH One chain, how we can swap from proof of work to proof of stake safely looks like Mick Isles taking the lead on that and doing some R and D and prototyping. Validator deposits and withdrawals. Once you have the unification of the ETH One chain with the beacon chain, we can handle validator deposits and withdrawals natively.
00:17:33.244 - 00:18:01.800, Speaker B: There's some stuff to think through there, especially like on the withdrawals push first pull, who pays gas, that kind of stuff. Shard data fee market. At the initial merger, there will be one shard chain of state and execution. That's the ETH one shard chain. But there will be many shard chains of layer One data. And we expect this to be very valuable to applications, especially in the roll ups. We need to have a good way to pay for the data and essentially say, I want this data to get on chain.
00:18:01.800 - 00:18:57.740, Speaker B: So working through those mechanics, opcodes additions and reform due to the new consensus mechanism of the beacon chain, there will be some system level opcodes that would be useful for user applications. Namely, checking what's going on with validators or even especially looking into recent cross links from different shards so you can make proofs against data and do cool roll up stuff. And some opcode reform. There are opcodes that will need to be thought through once they move into this new consensus mechanism. For example, there is the proof of work difficulty opcode where you can peer into the chain and see what the difficulty is. It's not quite clear what meaning that should take on once we've moved to proof of stake. So we need to investigate some of the existing applications and usages and try to move forward with the minimally invasive path.
00:18:57.740 - 00:19:55.490, Speaker B: So a lot going on. Again, if you're interested in this stuff, reach out. There's a lot of work to do and a lot of fun stuff to work on. So what about statelessness? One of the other major upgrade projects and I mentioned this in the One X stuff to Ethereum is this major upgrade to the user layer into the State to move to Stateless execution, stateless blocks where essentially you don't have to have the entire State locally to process and follow the head of the Ethereum chain. Instead, bits of the State and proofs about them called the witnesses are included in blocks so that you can perform the execution without having the whole State. And this opens up a sustainable path to State management in Ethereum. In terms of where this fits into the E 22 merger, these things, because of the separation of layers can both drive forward kind of unimpeded by each other and there's not really a path dependency on one or the other.
00:19:55.490 - 00:20:37.132, Speaker B: The merger can happen and then Statelessness or Stateless can happen and then merger. So we're driving forward on both. And then when one's ready, we're going to do it. When the other is ready, we're going to do it. In terms of the long term implications of not moving to Statefulness. On East Two, if we have Statelessness, it opens up the opportunity to potentially have State execution on multiple shards. If we don't have Statelessness, we can't really open that up because all of a sudden you're going to be putting the burden of not just one State but the burden of many Ethereum states on all validators to be able to process and validate things.
00:20:37.132 - 00:21:21.768, Speaker B: So salesmith does open up opportunities in how the consensus layer and the user layer together grow. But in the initial merge, in the initial kind of immediate future, they're path independent. So what's the end game? I didn't know that Vitalik was going to post that excellent article on I think it was the Magicians forum this morning about a roll up centric map but something that I roll up centric path for Ethereum. But this was something that I did want to talk to you a little bit about. In the beginning of an ETH one eight two merge. We have State and execution on one shard. So we have Ethereum like World on one shard and we have a lot of data, a lot of L One data coming from all of the other shards.
00:21:21.768 - 00:22:27.580, Speaker B: We expect it, as I said, to be very valuable to roll ups and to scaling in the immediate. And so we expect roll ups today on ethereum. And one shard might I mean one just ethereum chain might provide a few orders of magnitude scaling. Then once you have 63 shards of data you can get another couple of order magnitudes of scaling. And so once we get to this merge place we're going to have many if we go down the path of roll ups we're going to have many orders of magnitude of scaling which would probably be sufficient for a long time. So the question really becomes we have one shard of state and execution and many shards of data availability and thus tons of scaling. Is it really worth this is a question, I don't know the answer, but is it really worth at that point adding additional L One complexity to get another ten x 100 x in L One scalability? The end game for me is to get to this E 22 merger and get to statelessness as soon as possible and at the same time to allow the roll up ecosystem to grow and to mature.
00:22:27.580 - 00:23:17.072, Speaker B: I think at that point we'll have a lot better information on how, if and how to expand native execution beyond that initial one shard. And so the end game might look like one state and execution shard, many data availability shards, maybe a few state and execution shards and many data availability shards or the full blown state and execution everywhere. But we'll see. And I think the next twelve months as the user layer E one develops and as the consensus layer E two develops and as L2 and the exciting roll ups develop, ethereums have become better and better. A lot of awesome cool stuff going on and we're going to have better information on how to make good decisions beyond these initial developments. Cool. This is something near and dear to my heart.
00:23:17.072 - 00:23:47.140, Speaker B: The merge of E One, E Two is, I think, one of the most important things going on right now. It's an exciting R and D project. Hit me up if you want to get involved and again if you didn't take anything else away from this talk. ETH, one E, two misnomers false sequentiality. Instead they are separation of layers. That's the better way to think about it. And it's really the most informed way that we can talk about upgrades here, talk about the different layers of the stack and the software.
00:23:47.140 - 00:24:01.490, Speaker B: So thank you. I appreciate it. I'm sad that we could not get together this year at DevCon but I am excited. One day we will all hang out again together. Take care everyone.
00:24:04.740 - 00:24:33.160, Speaker A: Danny, thank you so much for giving us an amazing overview. Looks like we have a few minutes before our next talk and we got a handful of questions that people have asked on chat. So I'll just kind of ask them to you here and we'll just relay them directly to you. So the first question we have is I mean, you did a really great job at clarifying the separation of these layers but if somebody holds ETH today, what do they have to do when ETH Two launches?
00:24:33.820 - 00:25:09.924, Speaker B: Right? So ETH Two is launching in phases. This is to manage iteratively, manage the complexity. It's a major upgrade to the consensus. It's a modification, it's a major upgrade of the kind of the core economics of the system. So to do that safely, we're doing that in phases. What happens initially at phase zero and what we expect to launch imminently is that we bootstrap this new system level chain called the beacon chain in isolation from existing Ethereum main net. Meaning that proof of work module, that proof of work brain that's controlling Ethereum continues to control Ethereum for now.
00:25:09.924 - 00:25:49.008, Speaker B: And then when we're ready for the merge, when we're ready for ETH One to become a Shard governed by E Two, at that point the existing state, the existing chain at this point, before this point it's going to be governed by proof of work. And proof of work miners are going to build a blocks and then right after the same state, the same execution is going to be built and governed by the proof of stake validators. And so in doing that, there's nothing you have to do. Applications will continue to run, your Ether will continue to exist on this chain. Essentially it's that swap. I called it a hot swap of the consensus from proof of work to proof of stake. So chill out.
00:25:49.008 - 00:25:54.508, Speaker B: Nothing to do unless you're a validator and you want to get involved early and kind of bootstrap this new consensus mechanism.
00:25:54.684 - 00:26:14.264, Speaker A: That's great. I think people are getting excited about hot swaps on the chat here for a live stream. I know this is going to come up again so maybe just we'll ask this and clarify this one more time. But if somebody is a DAP developer, do they have to do something special? Once e one is merged into e.
00:26:14.302 - 00:27:16.456, Speaker B: Two, the intention is no. Because of the way that the state will continue uninterrupted and because of the way that ETH One clients will actually still be the interface into the user layer, the way that applications are built will be uninterrupted, will be the same. And the way that applications interface into that user layer, for example, how you send transactions, how a web interface might use Web Three libraries that is uninterrupted because you use the same user layer APIs to interact with ETH One. Once it's integrated into ETH two. Something important to note is that although things can continue uninterrupted, capabilities will expand. So we'll have this new Sharded data availability layer which first and foremost we expect roll ups to highly leverage and use for scalability. But having a scalable data availability layer is kind of a very new thing in decentralized protocols.
00:27:16.456 - 00:27:31.728, Speaker B: And so we expect there to be a lot of innovation just with that in general. So keeping your eye and your ear to the ground on developments there and kind of expanding what Ethereum can do rather than fundamentally changing the core is the goal here. Awesome.
00:27:31.894 - 00:27:54.810, Speaker A: And the last kind of two part or two related questions are how can somebody kind of keep up with what they have to do to Stake for Phase Zero? Where can they find out more latest information? And then on that same note, for people who are interested in understanding how to keep up with what's happening with all of you too, what is the best place they can go to stay up to date?
00:27:55.420 - 00:28:32.212, Speaker B: Yeah, so on the Staking front, there's a testnet called Madasha Longstanding Testnet that's up and stable. If you want to get involved, you can stake on that. We have another dress rehearsal testnet called Zinken that will launch in about a week and a half. If you want to get involved in a Genesis event, which is kind of like one of the more interesting parts of Staking, is really getting the chain up and running at the start. And then if you want to follow I've been super excited about the ETH Staker community. They started as a Reddit community and they have a Discord and they're just like super supportive. Like, people are asking questions, people are answering questions.
00:28:32.212 - 00:28:48.184, Speaker B: People are talking about hardware, people are talking about different software, security practices, all sorts of stuff. Check out that should be the gateway. Go check out the ETH Staker reddit and the ETH Staker get Discord if you want to get involved. And the second question, sorry, just for.
00:28:48.222 - 00:28:54.908, Speaker A: Everything eids to on research or implementation or progress updates, what is the best place to keep up to date on it?
00:28:54.994 - 00:29:51.752, Speaker B: So I do blog posts on the Ethereum blog every about seven to 14 days, depending on what's going on. They're called East Two. Quick update, I try to keep you just informed on the little happenings. If that's not enough, then if you jump into East Staker, that is a great place to follow on the kind of Staking side what's going on? And if you want to dig a little bit deeper, there's the ETH Research Forum. And something that has been really exciting development and become really fruitful over the course of 2020 is the ETH R and D Discord, where there's all sorts of conversation, talking about consensus, talking about there's psycho talking about consensus, talking about user, talking about E one, talking about E two, and really technical fun discussions. It can probably be pretty intimidating at first, but lurk just lurk see what's going on. Eventually you'll start figuring out what's going on and probably have something to contribute.
00:29:51.752 - 00:29:56.336, Speaker B: So, yeah. Blog post, ETH, staker and ETH r and D. This is great.
00:29:56.358 - 00:30:09.716, Speaker A: I think your blog ethereum.org posts are super helpful because they kind of condense it for every day. People just kind of understand what's going on without having their heads fully integrated, the technical pieces. And before we kind of end one.
00:30:09.738 - 00:30:23.592, Speaker B: More sorry, go ahead. Ben Edgerton does. What's new in East Two? And it's so good. Mine are like short little like I just say what's going on real quickly. He gives some deep thought about what's going on. So check out Ben Edison too.
00:30:23.646 - 00:30:27.290, Speaker A: If I'm not mistaken, that is a suspect you can subscribe to, is that correct?
00:30:28.300 - 00:30:30.920, Speaker B: Probably. I trust you.
00:30:30.990 - 00:30:32.648, Speaker A: We'll post it on the chat.
00:30:32.824 - 00:30:35.150, Speaker B: Yes, it is, it is. I forgot what that was.
00:30:36.080 - 00:30:48.850, Speaker A: One last question that we got from our YouTube chat before we move on to our next talk is can you tell us what is the role or features relating to the BLS signatures in Etsu and kind of what the significance of BLS is there?
00:30:49.300 - 00:31:30.110, Speaker B: Yes. So in a Sharded proof of stake model, we have to do random sampling to send parts of the validator set to different shards at any given time to essentially validate subsections of what's going on. And in doing so, we need a lot to get to make the random sampling safe, we need to have a ton of validators. So we expect from the consensus perspective for there to be like on the order of 100,000 of these little validator entities. Obviously a user might run a few of them or even many more, but this helps with the random sampling. But because of this random sampling, because of how many validators we have, we have tons of signatures. Like they're constantly saying what they think is the state of the world.
00:31:30.110 - 00:32:08.484, Speaker B: And so to do this efficiently and be able to verify and process everything efficiently, we heavily rely on BLS aggregation. So anyone when people agree on something which if they agree on the head of the canonical chain and the state of a shard, then we can aggregate their signatures. You can actually aggregate things that don't agree. But what we do is we aggregate signatures that agree and then we bring that all on chain and thus we have much smaller amounts of signatures to process. It's a great cryptographic technique. Obviously there's a lot of networking complexity and stuff that comes out of here and how we actually get all the signatures together and aggregate them. But that's a different layer of stack.
00:32:08.484 - 00:32:18.604, Speaker B: But BLS is awesome, aggregation is awesome and it's been a really crucial feature to get this thing to work in a Sharded context. Awesome.
00:32:18.722 - 00:32:37.010, Speaker A: Thank you so much, Danny. And for those of you who are interested in Ben's newsletter that's actually EEP Two news, that's the domain name. So you can just go there directly and stay up to date. So thanks again, Danny, for giving us a great overview of how all the ethereum layers stack with respect to each other. And we can't wait for eats, too.
