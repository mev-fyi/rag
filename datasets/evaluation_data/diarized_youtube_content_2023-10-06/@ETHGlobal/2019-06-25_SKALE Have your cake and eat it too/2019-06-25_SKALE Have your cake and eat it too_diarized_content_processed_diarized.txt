00:00:00.090 - 00:00:50.458, Speaker A: The title of this talk is have Your Cake and Eat It Too. And we wanted to do something a little different. Instead of going deep into talking about consensus or cryptography or, like, really deep engineering, we really wanted to change the talk up and kind of put on a play, which I think is very relevant for a hackathon like here, but to help guide you through understanding like the end user and how you can really win in by creating great DApps that have really good usability. And so we're going to showcase that flow in terms of the end user and how you can really win with scale by having Your Cake and Eat It too. So it's going to be a little bit different of a talk because we're going to put on a play, and that play is going to be the setting of a hackathon. And I had just run into Christine, a very talented engineer. Christine, should we form a team?
00:00:50.624 - 00:00:53.038, Speaker B: Sure, I think that'll be a fabulous idea.
00:00:53.124 - 00:01:13.214, Speaker A: Awesome. Because you're the engineer. I know a lot about product or the end user. I've never used blockchain systems, so I'm going to be like blockchain crypto, agnostic. So maybe we can work together to make something for people like me that don't really want to go the crypto rabbit hole but still need to use apps, decentralized apps.
00:01:13.262 - 00:01:20.658, Speaker B: Well, I think for people like you and everyone else, I have a sweet tooth and I love cake, so I want to build something around cake.
00:01:20.754 - 00:01:40.954, Speaker A: All right, so cake is great. I think that's a good starting point. People love sugar, people love desserts. I think end users can really wrap their heads around some sort of cake app. I love to cook and bake. So maybe we could do something around recipes. What do you think? Like something with recipes and cake.
00:01:40.954 - 00:01:45.182, Speaker A: Make this sort of a decentralized fashion. Could we do something there? What do you think?
00:01:45.236 - 00:01:51.486, Speaker B: I think that's a good idea. And I was by the scale booth, and they had these prototyping pads, so I already started to jot down some ideas. Do you want to see it?
00:01:51.508 - 00:01:52.350, Speaker A: Let's check it out.
00:01:52.420 - 00:02:27.990, Speaker B: All right. So the prototyping pad that they gave me looks like this, and I thought about my cake recipe. So I'm thinking what we'll do is first thinking about who's going to do in our team. Obviously it's us too, but we might need two more. So anyone that has suggestions or ideas during this talk, let us know then. Some of the ideas that we have are that this application needs to be able to accept ingredients, think of them as assets, but I need to store them somewhere and place these on the blockchain because we're at a blockchain event. But then I want to use tools that people are familiar with MetaMask, blockchain, rinkby.
00:02:27.990 - 00:02:31.702, Speaker B: And I need to develop all this with validity based smart contracts.
00:02:31.766 - 00:02:32.154, Speaker A: Got it.
00:02:32.192 - 00:02:32.750, Speaker B: What do you think?
00:02:32.820 - 00:02:59.406, Speaker A: Okay, I like that. I mean, let's keep it decentralized. Let's keep it censorship. Know, I might have a secret carrot cake recipe that someone like Facebook or some huge corporation might want to take and centralize and control that recipe and get rents from it. So let's make this carrot recipe or whatever recipes I create, I want it to be available to everyone. Okay, so if we can keep that with the end user, I think let's go with this. Let's check it out.
00:02:59.406 - 00:03:04.022, Speaker A: So why don't you walk me through the contract that you built? Maybe let's start there.
00:03:04.076 - 00:03:28.026, Speaker B: Good point. So if we start there, let me go over to my code here. And if I go into the contracts, what you'll see here is I have this bakery contract, and it does one thing essentially, it has two contracts in here, bakery and cake. And the bakery contract is actually creating a new contract on the blockchain. So every time I store a recipe, a new contract is created for that through this contract.
00:03:28.138 - 00:03:29.662, Speaker A: Got it. Excellent. Okay.
00:03:29.716 - 00:03:30.618, Speaker B: Like inception.
00:03:30.714 - 00:03:37.658, Speaker A: Like a contract within a contract. Awesome. Cool. Can you walk me through the React integration?
00:03:37.834 - 00:03:44.930, Speaker B: Yeah, absolutely. But before doing that, how about I show you the UI so I can show you what users are expecting to see, and then we'll walk through the code.
00:03:45.000 - 00:03:46.050, Speaker A: Okay, sounds good.
00:03:46.120 - 00:04:03.882, Speaker B: Okay. So here's my UI. It's pretty basic. Essentially what I'm doing is allowing the end users to be able to add ingredients and then click on make a Cake, which connects to that contract that I showed you. So what that looks like here is let's say I add a few ingredients, eggs, flour, and milk. You want to pick the last one.
00:04:03.936 - 00:04:07.606, Speaker A: You can't really do much of those ingredients. So maybe let's pick fruit.
00:04:07.718 - 00:04:35.602, Speaker B: All right, so we'll do fruit. I have my MetaMask connected to Rinkby here, as you can see. And so I had to download that as an end user. Now if I click on this make a Cake, what it's doing is it's connecting to the blockchain here to the Rinkbee network, and I'm going to confirm that transaction. But one of the things that's happening and I've been struggling with this is that it takes a really long time for the transaction to come back. So I'm not sure if this is the application that I want to develop out long term because of this experience.
00:04:35.736 - 00:05:04.058, Speaker A: Yeah. Did your application fail? Is there a WiFi issue? Is there some other bug? As the end user, I'm like, what is happening here? And now I'm given this ugly fruitcake, and I don't really like fruitcake. To me, the end user one to be delivered fruitcake is not a good user experience. But also clicking, MetaMask, clicking, waiting for this amount of time, I'm wondering what's wrong with this application. It doesn't feel like an application I'm used to.
00:05:04.144 - 00:05:22.980, Speaker B: It doesn't. And I'm with you there. So I've done some research, and I've discovered these API based wallets that I've started to tinker with because we're at a hackathon, so why not? So I'm going to show you in the code what that looks like, and then I'll walk you through the new UI that uses that. So here I am. I'm going to go back to my code. Let's close a few things. Here.
00:05:22.980 - 00:06:07.700, Speaker B: The first thing I'm going to do yeah. Before doing that, though, let's turn on MetaMask here. So I'm going to switch to my scale chain. And that scale chain was given to me by some representatives here in Discord. So here, if I copy this Http, what I'm able to do is then go within my code, go to Truffle. And then they said it should be pretty easy to implement this. So a few of you have already seen this yesterday, but what this looks like is I'm going to put in scale, add that endpoint, clean it up, and then copy this Rinkbee integration, give it a new name.
00:06:07.700 - 00:06:11.586, Speaker B: And just like that, I have scale up and running here.
00:06:11.688 - 00:06:20.610, Speaker A: Got it. So instead of Rinkabee, we're actually transferring over to the scale network and trying to see what advantages we have to the end user from using the scale network.
00:06:20.690 - 00:06:55.538, Speaker B: Exactly. So if I switch over, the next thing I have to do is just simply deploy it using Truffle. Now I won't bore you. I run this today because I've already run it, but I want to show you what this looks like. Essentially, all I have to do is change network to scale, and then I'm up and running. So when I go back to the application here, what I'm able to do is simply change Metabask to use scale and then run this again to see whether or not that speeds up the transactions. So I'm going to add in the ingredients, but this time, I'm going to pick cheese and let's see what comes up.
00:06:55.624 - 00:06:56.178, Speaker A: Got it.
00:06:56.264 - 00:07:05.870, Speaker B: So it's the same process as before. I'm running on metamass. I click Confirm, but it's now using the scale blockchain and backend. So now we have a cheesecake.
00:07:05.950 - 00:07:25.994, Speaker A: Awesome. This is a much better experience. There was no waiting. Like in Rinkabee. It was like, near instant as soon as you clicked the confirmation button, and it was like, boom, got my cheesecake. So I feel like this is a lot closer to more of a feel of an app with just that speed. That's great.
00:07:26.112 - 00:07:43.598, Speaker B: Yeah. But we can do a lot more here, I think. I think with it moving fast with scale, maybe if we remove the extra friction point for the end user with having to download MetaMask because that's not a good user experience. I don't want to have to go to Adapt and then only be able to use it after I download something else. That's not how you usually interact with most applications today.
00:07:43.684 - 00:07:56.162, Speaker A: Yeah, like when I log on to Facebook or whatever else. I don't have to use the Fox icon. And there's this little pop up and maybe it's trying to spam me as an end user. This is a different experience. Let's see what else we can do.
00:07:56.216 - 00:08:25.010, Speaker B: So what that looks like here, if I go back in the code again, I'm going to show you how to implement that. So I have these reducers where I group together all of my Web Three instances. And you can see I've been playing around here a lot. I've tried Bitsky, which is another API based wallet. I'm trying portis here, but right now it's connected to Rinkobee. So let's switch that to scale. And all that portus requires is that I pass the endpoint and the DAP ID that portis gives to me in order to make this connection.
00:08:25.010 - 00:09:00.802, Speaker B: But I still have to connect it to a button that a user would touch on the actual application. Like a login. Most people are familiar with something like that. So what this looks like here in the code, if I switch over here, I'm going to go down to the user login features, login button, login actions. And here I'm just calling portis on Login, which will return back a wallet address that they've created for them. Now that wallet address I can then use for certain things within those Web Three interactions. But here all this is doing is giving me a better way to be able to control or handle the private keys for end users.
00:09:00.802 - 00:09:23.390, Speaker B: So showing you what this looks like in production, if we go over here, I'm going to go ahead and refresh my screen. And let's try that again. So it's using scale. I'm going to click on this Login button and what you'll notice is that I didn't have to download something else in order to make this work. It just works. So portus now has this wallet that it's bringing in. And you can see that I have a little bit of money in here.
00:09:23.390 - 00:09:51.318, Speaker B: I'm going to go ahead and close that out and let's go through this process again. But we're going to add the same ingredients and see what comes out. So just like before, I don't have to confirm that transaction. But instead if I was interested in the gas fees or anything else that's going on, cortis gives me the option to stop the transaction if I don't want it to continue. But for everyday users that simply just want to use adapt, they can just do that without having to do another.
00:09:51.484 - 00:10:19.794, Speaker A: Nice, nice. This is like much more familiar to me. There's no Fox Icon or Chrome Plugin. It's a button just like any other DAP that's in the NAV bar that I can use to log in. I use my email address, I can log out. It allows me that window that in case I accidentally click the button, that I can revert or at least stop that transaction. So it gives me that pause period if I accidentally wanted to create that cake, that I can stop it.
00:10:19.832 - 00:10:20.034, Speaker B: Yeah.
00:10:20.072 - 00:10:26.814, Speaker A: So this is much more familiar to me. This is great. But still, it's like, can we take this even any further?
00:10:26.942 - 00:11:04.382, Speaker B: I think we can. So I feel like for some applications out there, they really don't need the user interaction at all. So for those, you can actually manage the keys for the user and just simply sign it in the back end. Web Three gives you all the tools to do that via just signing transactions. So if you want to see what that looks like, let's go to the code here. And I'm going to switch over to the component that's managing all of these cake transactions that's going on. So here, if I scroll down to the function where I have Scale turned on, one of the things you'll notice here is that I'm still able to use Truffle because that's a tool that I'm familiar with.
00:11:04.382 - 00:11:52.990, Speaker B: But I can then just switch the web3 and have it get the transaction count, which is the Nunch that I'll need to be able to create this raw transaction to, then in the end sign the transaction for that user and then send that off so the user doesn't have to click or notice anything is changing on the front end. So to show you what that looks like over here, let's refresh the screen and go through what that would look like. So I just wanted to test that out because I'm not sure if I want to commit to that model. But I'm going to turn this on here and that will activate that function. Let's go ahead and add some new ingredients here, but I'm tired of just adding the same ingredients. Let's try something else by using file storage. And I didn't tell you about this because I wanted to be a surprise, but file storage is a feature that Scale has that allows us to add new ingredients here and use it directly on the page.
00:11:53.140 - 00:11:53.598, Speaker A: Wow.
00:11:53.684 - 00:12:20.702, Speaker B: Yeah. So if I were to add a new ingredient, let's just choose chocolate here. What you're seeing is just being added to the blockchain here. Now, as it's being added, scale is now replicating that across the blockchain. And so then you're able to then download that file and use it within your code or just download it directly to the browser. I choose to use it within my code. So here I now have the option to choose chocolate and wait for it to be downloaded from the blockchain.
00:12:20.702 - 00:12:35.246, Speaker B: But once that download happens, I'm able to then display that image for that end user here. Now, if I click on make a Cake because I'm signing that transaction for the user, it happens in near real time. So we've really transitioned from making a DAP to more like an app.
00:12:35.348 - 00:12:56.930, Speaker A: That's awesome. So one, it's like now I'm given teramisu, which is like the ultimate experience. My favorite cake. So one, I didn't have to click anything. It was all sort of seamless and automatic. Felt much more like an app. We're able to access a way to store new data that the Smart Contract can access in a decentralized fashion using scale file storage.
00:12:56.930 - 00:13:02.834, Speaker A: And this is amazing. I feel like this is a seamless experience that I need to access my cake recipes.
00:13:02.962 - 00:13:03.590, Speaker B: Absolutely.
00:13:03.740 - 00:13:09.894, Speaker A: Awesome. Absolutely great. All right, so can you tell me more about how you integrated file storage?
00:13:10.022 - 00:13:52.262, Speaker B: Absolutely. So here if I go to the developer documentation, one of the things you'll notice is that there's a section for file storage, and you can access the NPM package directly if you would like. But both of them pretty much has the same information, where you're able to see how easy it is to get up and running with Scale on file storage. Instead of having to create a server that you would then have to connect to IPFS if you were planning on using that solution, you can simply use a beautifully packaged NPM library to then use methods for uploading your files, showing your files, downloading your files, or deleting them. And only the person that owns that file can delete that file in the end, but you can share it out for other users within the network to view.
00:13:52.396 - 00:13:57.414, Speaker A: Awesome. That's great. Anything else you want to add?
00:13:57.532 - 00:14:15.278, Speaker B: Well, I did want to add something else because I'm using Scale. I do want to make sure that we are actually going after these bounties, and I think we have a good use case to do that. So Scale told me they have five bounties, each for 500 and die, and then one for 1000 die. So are you still with me? Are we going to add more people?
00:14:15.364 - 00:14:24.500, Speaker A: Let's do it. Let's add some more people. So come join our team if you have more questions. We'll have desserts and cake by our booth. Any questions?
00:14:28.230 - 00:14:47.266, Speaker B: Yeah, I do. So every example that we build for hackathons, you can access from our GitHub. So the GitHub is accessible from our documentation, too. And there you'll see the make a Cake, the Rock, Paper, scissors, one from yesterday and others. Yeah, absolutely. I'll put that in discord.
00:14:47.378 - 00:15:05.790, Speaker A: Yeah. The fire storage you have, it's separate storage. So it's an all inclusive solution that if you're deploying DApps onto scale side chains, you can also access the scale API to use the file storage on your scale side chain.
00:15:09.250 - 00:15:10.400, Speaker B: Any other questions?
00:15:11.890 - 00:15:18.610, Speaker A: You have an HD wallet, right? So over here, when you connect to the main net, that HD wallet, how do you generate.
00:15:22.150 - 00:15:48.520, Speaker B: It? Are you referring to the HD wallet within my truffle file here? So this is for deploying the smart contract. And essentially, I'm just passing in the private key and the scale endpoint, and the private key I just have stored into an environment file. So that way. No one steals my fake ETH provider. It's given to us by Truffle. So I'm using the Truffle HD provider here.
00:15:51.540 - 00:15:54.088, Speaker A: Anyone else? It cool.
00:15:54.254 - 00:15:54.632, Speaker B: Awesome.
00:15:54.686 - 00:16:02.260, Speaker A: Well, thanks for coming. Come by our booth to talk more and enjoy some cake that we have. Bye.
