00:00:00.730 - 00:00:23.920, Speaker A: From the USDC team from Coinbase, and we've actually got Pete and Namil and Joel joining us. Namil and Joel are going to give a brief introduction to USDC and then Pete will give an overview of their recent upgrade to USDC version two. So, welcome to the call, guys. I'll let you take it from here.
00:00:24.610 - 00:00:25.046, Speaker B: Go.
00:00:25.108 - 00:00:29.400, Speaker C: Thanks so much, Josh. It's super exciting to talk to you all. Let me just really quickly share my screen.
00:00:32.010 - 00:00:32.760, Speaker B: Cool.
00:00:42.750 - 00:01:13.218, Speaker C: Sorry, Pete, would you mind sharing your screen? Thanks. So thanks, everyone. It's super exciting to talk to you really quickly. I'm a product manager at Coinbase. I'm here with my counterpart at Circle, Joao Reginano, and also Pete Kim, who's the lead engineer at Coinbase on USDC. We're super excited to talk to you about stablecoins, but also about what it takes to upgrade a token that has a lot of market value. So there's a number of, ERC, 20 tokens out there and in a lot of ways a number of them have upgradable capabilities.
00:01:13.218 - 00:02:01.570, Speaker C: And we thought it'd be really helpful to show what our journey was to be able to move from our USDC version one, kind of the way we thought about feature development and how we got to USCC version two. But before we do that, I thought it'd be really quickly just to recap some of the growth. So, USDC was launched several years ago and over the course, for a long time, it was about a 100,000,200, 300 and 400 million dollar market cap. And then slowly with the growth of the ethereum ecosystem, especially with D Five liquidity mining, we've had just a tremendous amount of growth. So USDC is the second largest stablecoin in the world and it's almost at about $2.7 billion in market cap right now. Our core differentiator and the thing that we focus on the most is to make it the most trusted fiat bank stablecoin.
00:02:01.570 - 00:02:52.898, Speaker C: And you'll see that not just in terms of the discussions that we have today, in terms of what it means for our smart contracts, what it means for our deployment and the super user keys that we hold, but also how we think about auditability, putting money into the bank account, making sure that third parties are reviewing it. And if we go to the next slide, the core thing for us has always been that we should always want to be able to provide. If somebody comes to us, gives us a dollar, we can provide one USDC, and vice versa is that you can give us one USDC and we can provide you back $1 in fiat. And so that's just really critical. And that trust for a stablecoin is a really basic key value proposition that we offer. And the idea is then a lot of DeFi protocols and other teams can build on top. Another core differentiator for USDC versus other types of stablecoin is this consortium.
00:02:52.898 - 00:03:25.380, Speaker C: So initially it started with Circle. Coinbase will work with a number of different partners. And the goal over time is that we continue growing this similar to, let's say, a visa with a number of different members, all who can issue and hold and participate in USDC. And so I think this multi year share model is a big part of it. I think that idea that we have transparent and third party audited and that we're one of the fastest growing stablecoins jod, did you want to go next?
00:03:26.470 - 00:03:44.582, Speaker D: Sure. Yeah. I think Pete is saying that for some reason he couldn't present the screen anymore. But I'll talk over what we had there and then hand it over to Pete to talk about the upgrade of Usdcv. Two. Another thing. Oh, it's back.
00:03:44.582 - 00:03:51.270, Speaker D: Awesome. Namil, you want to pick back up from there?
00:03:51.420 - 00:03:53.720, Speaker B: Yes, sorry, I got kicked out for some reason.
00:03:55.390 - 00:04:33.862, Speaker C: No worries. If you go to the next slide so I think the core part is that just a number of different teams are building on top of USDC. If you go to the next slide, a lot of the protocols that we use each and every day, they all use USDC. And I think the main plug I would maybe just give here for the group of anyone who's building an Ethan mine on USDC is if you go to the next slide, is that Coinbase has a USDC bootstrap fund. And what we do is this is different from other venture capital funds. What we do is we put money directly in a protocol. And so as a result, what that means is that if you have a protocol, you're getting started and you want liquidity in your protocol in the early months and weeks, it can be very difficult.
00:04:33.862 - 00:04:44.140, Speaker C: There can be very little liquidity. So what the USDC team has done has basically been to put money in a variety of different protocols. If you want to apply, there's a bitly link right there.
00:04:45.710 - 00:04:46.460, Speaker B: Cool.
00:04:46.830 - 00:04:48.940, Speaker C: And I'll turn it over to you.
00:04:49.470 - 00:05:49.550, Speaker D: Yeah. So another thing that we are passionate about in the USCC front and obviously myself coming from the circle side and Namil and Pete have been working on this on the Coinbase side amongst a lot of other team members. If you can move to the next slide, Pete, is how USCC can be used as really an alternative money infrastructure. Right. For those of you, I don't know how many of you have built more traditional financial services, but if you have, you're going to be familiar with integrating with banking connectivity systems, banking networks around the world and payments processing around the world. That can be extremely difficult, time consuming, expensive, and quite cumbersome and poor from a technology point of view. We're passionate about seeing people beginning to use USCC as an alternative infrastructure for money, whether it is use cases around payments and payouts commerce, what we call digital dollar accounts, which is imagine every app on your phone that has a dollar balance, right? It doesn't have to be a financial service.
00:05:49.550 - 00:06:40.046, Speaker D: It can be Uber airbnb marketplaces and how you can basically reimagine all of those things built on top of this infrastructure. We are very passionate about that. On the Circle side, we have actually pretty much bet the company now on this. And we offer a number of developer tools, whether it is on fiat, on and off ramps, custody, and various other types of APIs. And Coinbase also has obviously a ton of resources for that. So make sure you head over to the resources that those two companies have and there should be a ton of more developer tools coming out. And in that spirit of making sure that USCC is not only a stable coin, not only the raw rails, but really a tremendous amount of tools for developers to build the next generation financial services, we have devised Usccv two.
00:06:40.046 - 00:06:46.050, Speaker D: And I'll hand it over to Pete to talk about what we designed there and how we've done the migration.
00:06:50.230 - 00:07:28.640, Speaker B: Hi. So how was USCC v two developed? First, it started with proposals. Lots and lots of pages of text describing the motivation, technical design and the rationale. It was a lot of writing, and frankly, I don't really enjoy it as much as writing code, but I took it as practice for writing white papers for my future billion dollar blockchain projects. It wasn't so bad. Anyway, three different proposals were created and those were then reviewed by people at both Coinbase and Circle. And after a bit of back and forth, both Coinbase and Circle gave the thumbs up and it was time for building.
00:07:28.640 - 00:08:20.240, Speaker B: The first thing I had to do was modernizing the code base. USCC was first deployed in 2018 and it was really starting to show its age. It was using Solidity 0.4, it used JavaScript as opposed to TypeScript, and modern tooling like auto formatter and static code analyzers weren't used. It took a long time to update everything, but I managed to discover and fix quite a number of bugs, such as some tests passing only because some variables were being declared globally and accidentally being reused across multiple tests, things like that. So it was worth it. Once that was done, it was time to develop the Fiat Token v two contract, which is the name of the USCC contract in our code base.
00:08:20.240 - 00:09:22.930, Speaker B: USCC was designed to be upgradable. We do it by using this proxy contract pattern. So basically users can interact with the proxy contract, which borrows code from the implementation contract, in this case Fiat Token v one, while keeping state data stored within the proxy contract. This is made possible via the use of the delegate call Opcode. So to upgrade to a new version, we have to first deploy the new implementation contract and then update the pointer in the proxy contract to point at the new implementation contract. That sounds pretty simple, right? But well, in practice it's not actually, as simple as it sounds, there's one thing that you got to be mindful of that a lot of people are not aware of and that is the storage slots. So Solidity assigns storage slots for each state variable within the contract in the order they appear in the code.
00:09:22.930 - 00:10:37.722, Speaker B: So in this case, for example, alpha maps to storage slot of zero, bravo maps to storage slot of one, charlie maps to storage slot of two, delta maps to three and echo maps to four. And that's because this contract buzz, which is a contract that I'll be deploying, inherits from foo and bar. So it first takes a look at foo and then it maps the source slots and then bar and then followed by the variables within the contract itself. If I'm using the delegate call pattern, the contract state is actually stored within the proxy contract and not the implementation contract itself. So later on when you actually update the implementation contract, when you replace it with a new one, it could potentially lead to the variables pointing at the wrong slots. So for example, here I added a new variable called Foxtrot and what ends up happening is Foxtrot will take the story slot of three and it already has a value much well and it will just use that and delta instead of pointing at three it will now point at four. And four used to be an address of type address but it's string so I don't know what's going to happen.
00:10:37.722 - 00:11:48.740, Speaker B: It's probably going to take like the Unicode value of this binary data and Echo will not point at five which doesn't even exist yet. It will lose the value, the existing value which was zero x cafe dude. And in this example, this is a different example where I make this new contract derived from another contract and in this case the same thing happens. The storage slots are now, the variables are now pointing at different storage slots and it gets messed up. So in order to prevent myself from accidentally messing up the storage slots, the first thing I did was to create a unit test that checks that all of the existing variables map to the correct storage slots. Now if you're building a brand new smart contract from scratch you might want to take a look at new patterns like EIP 25, 35 diamond standard that makes management of contract storage much more modular. But that wasn't something I could use because I was upgrading an existing contract that didn't use that.
00:11:48.740 - 00:12:51.314, Speaker B: With the test in place, I felt much more comfortable to make sweeping changes and I also made sure that all the new code added had 100% test coverage. Honestly, like way more time was spent writing the tests than the contract code itself and the ratio was probably 20 to one or more. By the way, USDC is 100% open source and you can find the code in the URL shown here. And the code was then reviewed by Circle and Merged. I want to give a huge shout out to Eric from Circle, who really patiently went over and scrutinized every line that I changed in my gigantic pull requests that updated thousands of lines. It was truly a massive collaborative effort between the two companies and really felt good, man. And then once that was done, we had our contracts audited by OpenZeppelin.
00:12:51.314 - 00:13:14.922, Speaker B: We used OpenZeppelin mostly because of an existing relationship we had with them, but we actually reached out to Consensus, Diligence and Trailerbits as well. And they're all fantastic. You really can't go wrong with any of those firms. I must say that it wasn't cheap, though. The audit was definitely not cheap. Maybe because we are Coinbase and maybe they overcharged a little bit, I don't know. But it wasn't cheap.
00:13:14.922 - 00:13:39.906, Speaker B: And sometimes it makes me question why I'm writing code when reading code can be far more profitable. Obviously. I'm kidding. Anyways, then comes the scary part. The deployment we decided to perform the upgrade on the 27 August USDC had then reached $1.4 billion market cap. Now it's close to 3 billion.
00:13:39.906 - 00:14:23.922, Speaker B: So we could not afford to screw up. We had 100% test coverage. We tested the deployment multiple times independently within Circle and Coinbase, both on a testnet and a local main net fork. So using Ganesh, you can actually fork the main net and try simulating how things will go on the main net. And we did that as well. But even then, I wasn't feeling 100% confident about the upgrade. The amount of damage a botched upgrade could do was unimaginable, and screwing up would surely be a career ending move for myself, and I couldn't afford that.
00:14:23.922 - 00:15:18.414, Speaker B: And it's 2020 and anything is possible, right? So what did I do as an engineer? Write my code. I ended up writing an upgrader contract that performs the upgrade, runs some tests, and then reverts if issues are found, all within a single transaction. This ensures that there is zero downtime. And if the upgrade is botched, it'll simply revert and nobody would even notice because it's an atomic operation. As you can see, it updates the pointer in the proxy contract, initializes the new contract, and before it does that, it also copies some of the values from the existing contract. And then it runs some tests by reading the contract state. And it also performs some ERC, 20 operations, like Approve, and then it checks the allowance.
00:15:18.414 - 00:15:43.370, Speaker B: It then does the transfer from. It also does a transfer call. And if all of these checks pass, then the upgraded contract will self destruct and the upgrade will be finalized. And all this, again are happening within a single atomic transaction. So there is zero downtime. Now, was this necessary? I don't know. I think it was probably an overkill.
00:15:43.370 - 00:16:28.998, Speaker B: But the peace of mind that it gave was definitely worth the extra code that I had to write. This is a snippet from the center slack. One day before the upgrade, we were honestly scared because like I said earlier, this timeline in 2020 proved that any disaster is fair game. And this is right before the upgrade. On the 27th, we started a war room in Zoom, and we then called the upgraded contract by calling the upgrade function within the upgraded contract. And it was done within a minute. And as far as I'm aware, no animals or people were harmed.
00:16:28.998 - 00:16:59.510, Speaker B: And more importantly, we managed to upgrade a $1.4 billion financial product with zero downtime. There's no way you could do that with traditional money or in traditional financial system. And that just shows how powerful this technology really is. And that's it. That's it for The Talk, and thanks everyone. And I would like to remind you that we are sponsoring hackathon prizes, total of 8000 USDC in prizes.
00:16:59.510 - 00:17:55.160, Speaker B: It's a lot of money, so all you have to do to qualify is to use USCC in whatever you are building. And if you want bonus credit, we'd really like to see the use of some V two features like Metatransaction support and the use of L2, but those aren't required, but would love to see those being used. For more details you can go to Htpsonline.org prizes and you can find URLs to the Faucets and testnet contracts, et cetera there as well. So I would love for you all to participate and I'm really looking forward to seeing all the cool, exciting things that you build with USCC and Ethereum. And that's it for the talk. And we'll now take questions.
00:17:55.770 - 00:18:16.270, Speaker A: Great, thanks, Pete, that was a great talk. We do have some questions from Chat. I'll just jump right into them. So one question from a user. This upgrade great. What are the next features you're excited about for future versions, future implementations? What's on the more distant roadmap?
00:18:23.010 - 00:19:31.250, Speaker B: Yeah, so I'll take the question Namil and Joao can just hop in time, but one thing that I really like to see is USCC on chain rewards. Unfortunately, that was actually one of the proposals that I wrote. Similar to Die savings rate today, if you have USDC deposited within Coinbase, you can actually start earning rewards. And we actually had to postpone that project just because the federal interest rate went down so much that there wasn't enough interest that we could then pass on to our users as rewards. But that's something that I definitely want to work on in the future, and I want to make that accessible. Regardless of how you're using USDC, whether you're holding it within a non custodial wallet like Coinbase wallet or MetaMask or on a different exchange, it shouldn't matter. You should be able to earn the rewards.
00:19:31.250 - 00:20:16.178, Speaker B: And that's something that we wanted to work on but couldn't because of the current interest rate situation. So that's one thing that I want to work on and I would love to see just USDC being used in applications like global Venmo type of applications. Obviously, Venmo is only available within the US. And other countries like China. They use WeChat, which is not available outside of China for payment use cases. And there are other solutions like LinePay, et cetera. But what I really want to see is a global version and something that anyone can download from anywhere around the world.
00:20:16.178 - 00:20:31.320, Speaker B: And for that to happen, scalability is really important. So integrations with various L two protocols and side chains and maybe even other chains, that's something that we are actively working on today.
00:20:33.050 - 00:20:58.980, Speaker C: I just would plus one, what Pete said on layer two scaling. I mean, there's just been a tremendous amount of innovation going on in the space. I think one thing we'd say is feel free to reach out to us. And Pete shared our Twitter handles, but feel free to reach out to any of us if you are a layer two solution or even if you're a DAP and you're looking at a layer two solution would be really valuable for us as we decide which ones we might prioritize and when. But I think scaling is probably one of the top of mind things for us.
00:21:00.550 - 00:21:20.486, Speaker A: So another question. So one thing that's interesting about USDC is, of course, it's created by both Coinbase and Circle and there's kind of a consortium behind it. What does that look like from an engineering perspective? What is it like to collaborate across organizations on such a big financial product, as you explained it?
00:21:20.508 - 00:22:00.274, Speaker C: Kim yeah, Pete, I'll explain the context and would love to have you explain the engineering side of it. But I'd say the context has been the vision has always been something like a visa where there's a lot of different banks that are all involved together. They have the brand and they have the security of the broader system and the adoption right that they have availability everywhere else. And that's basically been our goal. And so the great things is that, for example, Circle has a ton of different features that they're able to provide. We have another set of features and basically community can pick and choose amongst all of that and they can still use the same USDC. Then I think on the end side, it obviously is much more challenging to have a consortium rather than one company.
00:22:00.274 - 00:22:03.080, Speaker C: It's just a lot more coordination, and I think Pete can share more.
00:22:04.410 - 00:22:59.430, Speaker B: Yeah, and I'll just want to add a little bit to that. We do want to expand the consortium and we do want to make it not just a Coinbase's or Circles thing, but like something that the broader ethereum ecosystem could use and influence. So if there are organizations that are interested in joining the consortium, you should definitely reach out to us. As for the development and the collaboration between the two companies, when it comes to engineering, it's very much like an open source project. We have a slack channel. We just casually talk about different ideas, and then we create proposals and we review each other's proposals, and we make pull requests. And the pull requests then get reviewed by both parties.
00:22:59.430 - 00:23:29.220, Speaker B: And we also coordinate how we get those new code audited by external auditors. But it's just like any other open source project or any other dev project. So even though USDC itself is sort of centralized, the way we do the development for it is very similar to how a lot of these decentralized applications and protocols are built.
00:23:31.830 - 00:23:58.570, Speaker D: And actually, just to add on what Namil and Pete said and Pete mentioned this, right. USSC is open source. I mean, as far as the smart contract goes, obviously there's a ton of things that Circle and Coinbase build that is proprietary. But the smart contract source code and a lot of satellite things are open source. We would actually love to see more suggestions from the ecosystem. Right. I think we have seen a few pull requests here and there from folks on the ecosystem, but we would welcome a lot more participation.
00:23:59.390 - 00:24:00.140, Speaker B: Great.
00:24:00.750 - 00:24:35.300, Speaker A: And then one last question, and then we'll move on to the next talk. But Pete, one thing you mentioned in your segment of the talk is the difficulty of doing audits. Paying for audits obviously a challenge for Coinbase, but a much bigger challenge for smaller organizations who nonetheless have to audit very thoroughly before launching a product. Curious if you have thoughts on how, as an ecosystem, we can address that problem, what teams that maybe aren't as well funded can do to get audits done or to at least a secure product.
00:24:36.870 - 00:25:16.194, Speaker B: I see. Yeah, similar gitcoin. If we could create some kind of marketplace is that the right word? Where people can submit contracts to be audited by the community, and in return, maybe they earn some kind of tokens. That could be cool. But in addition to that, I think we should just invest much more heavily into all the tooling around Ethereum development. There are lots of great tools already, like Slither was very useful for us, for example. But I think we can definitely do better.
00:25:16.194 - 00:25:31.818, Speaker B: And that's something that I think we collectively should come together to collaborate on with great tooling. I think we'll require less and less manual audits. Okay.
00:25:31.984 - 00:25:34.470, Speaker A: Thanks, Pete. Thank you, dwell. Thank you, Namil.
