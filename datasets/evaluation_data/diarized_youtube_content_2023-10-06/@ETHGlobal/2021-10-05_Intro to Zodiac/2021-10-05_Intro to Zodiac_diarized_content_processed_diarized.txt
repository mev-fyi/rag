00:00:05.690 - 00:00:46.810, Speaker A: And for this next talk, I want to welcome Oren, who is going to be talking about Zodiac. Zodiac is a project that just came out a couple weeks ago, and I'm super excited for him to share everything that's Zodiac. So, without further ado, let's welcome Oren. And feel free to get started. Looks like we're not getting audio. We'll blame the Bluetooth in the meantime for this, but.
00:01:12.290 - 00:01:16.062, Speaker B: All right, testing. There we go. Nothing.
00:01:16.196 - 00:01:17.534, Speaker A: Loud and clear. No worries.
00:01:17.572 - 00:01:20.926, Speaker B: You're good. I should be coming through. It looks like it is on my end.
00:01:21.028 - 00:01:22.760, Speaker A: You are. You are. This is good.
00:01:34.890 - 00:01:36.162, Speaker B: Testing. Testing.
00:01:36.306 - 00:01:37.594, Speaker A: Yeah, we can hear you.
00:01:37.712 - 00:01:38.650, Speaker B: Testing.
00:01:41.070 - 00:01:51.630, Speaker A: Okay, so it looks like this is a zoom issue because we both can hear each other, but there might be a lag, so oren, we can hear you. The audio is coming in. If this message reaches you all right.
00:01:51.780 - 00:02:13.430, Speaker B: I can hear you now. Sorry about the issues. We got it sorted in the green room, but evidently whatever happened in the green room didn't carry over. So anyway hey, guys. I'm Warren. I've been working and playing in the Ethereum and kind of Dao space since Ethereum's Genesis. I'm a solidity developer and product manager and currently lead our kind of Dow related efforts over at Gnosis.
00:02:13.430 - 00:03:09.990, Speaker B: Gnosis has been a key contributor to the Ethereum space since 2017, providing a range of kind of critical infrastructure pieces to the ecosystem. And perhaps the most notable of these is their nosis safe, secure, multisignature smart contract wallet. And it's accompanying a suite of applications and integrations for, I guess, the uninitiated, which is probably not many of you at this particular talk. A multisig wallet is essentially an account that requires confirmations from a threshold of keys, say, three or five, before it'll execute a transaction. And the Nosisafe is the most trusted multi SIG solution in the Ethereum ecosystem, currently securing more than 90 billion in assets over the kind of Ethereum and Dspi ecosystem. But under the hood, the Nosisafe is much more than just a multisig. It's a modular, extensible programmable account that can kind of grow and adapt with your organization.
00:03:09.990 - 00:04:03.026, Speaker B: So, a little backstory. Late last year, we did kind of a wholesale review of the Dow tooling available kind of in the Ethereum ecosystem in the lead up to launching the Gnosis Dow, which will ultimately control a really sizable treasury, around 150,000 Ether, worth roughly $400 million, along with a whole bunch of other tokens. So, in choosing a Dow solution, we had a small handful of really key requirements. One is that it must be audited, must be proven to secure kind of millions or billions of dollars. Two, participants must not be kind of cost prohibitively excluded from participating. Number three, it must be kind of permissionless and, ideally, kind of trust minimized. And then four, it must be flexible and not kind of unnecessarily restrict future decision.
00:04:03.026 - 00:05:04.102, Speaker B: And so, after reviewing each of the existing dow tools, we found that none of them could reasonably check all of those boxes. Almost none were proven to secure that amount of value. Those that were, were kind of cost prohibitive for most end users because voting was happening on ethereum Mainnet. And those that were not cost prohibitive introduced some unacceptable long term trust assumptions and almost all introduced significant switching costs if the Dow if wanted to migrate or kind of change how it worked later on. So just another quick backstory in response to the kind of escalating gas prices on Mainnet around August last year, a whole bunch of kind of aspiring Dows made a compromise on trust for the sake of usability and started adopting this combination of a Nosisafe and a Snapshot instance. The previous speakers talked about this a little bit. And so Snapshot is a tool for gas free off chain voting.
00:05:04.102 - 00:06:17.170, Speaker B: And basically in the combination of this setup, you would have a group of multisig signers that essentially agree to execute the will of the community, whatever the community kind of decides via Snapshot proposals. But you're obviously trusting this core group. And so recognizing this pattern, we realized that there's an opportunity to kind of improve on it, improve the trust assumptions on this and essentially try to give the community more autonomy. And so we created this module called Module to the Nosisafe that at the time we were calling the Dow Module. We've now relabeled to the Reality module. And basically what it does is use an oracle to bring the results of a Snapshot vote snapshot proposal on chain and allow you to kind of autonomously permissionlessly execute the results of an off chain proposal on chain. So this was the framework that we decided to go for with the nosis Dow because it, in our opinion, kind of checked all of these boxes that we had previously set as our requirements.
00:06:17.170 - 00:07:18.466, Speaker B: But in designing this, we realized that this pattern could be generalized and actually created a bunch of really nice features or outcomes for our Dao, but also for the Dao space as a whole. And so this is essentially how our Zodiac was born. Let me go and share my screen. Not that there's much in the way of content there, but we can just have a bit of a backdrop for it. So Zodiac is, we're calling it this expansion pack of doubts. And basically what Zodiac does is makes this really fundamental distinction between the accounts and the logic that controls it and tries to decouple those two. So in every kind of existing Dow framework right now, those two things are pretty tightly coupled.
00:07:18.466 - 00:08:37.514, Speaker B: Either kind of within the same contract logic or multiple contracts, but in a system that tightly couples them and makes it really difficult to migrate and to kind of, I guess, change things beyond the kind of initial scope of that change things kind of outside of the scope of the framework. And so what we have done here is basically decouple those two things. Use the Gnosis Safe as again this kind of programmable account standard and treat it essentially as your organization's avatar on chain. Then plug in as a module any additional logic that you want to use to control it. And so this is essentially what Zodiac is. There's this kind of design philosophy and kind of standard for building organizations, building kind of Dow structures that inherit this nice property of being kind of flexible, portable, composable and allowing organizations to kind of leverage those. So essentially, Zodiac has a handful of components, avatars, which are the core of your organization.
00:08:37.514 - 00:09:16.410, Speaker B: In this case, we're using the nosis Safe. And essentially any contract that exposes this I avatar interface can work. Basically, you need to be able to enable modules and then call an exec module transaction function. If your kind of account can do that, then it can act as an avatar. Modules are contracts that are enabled by the avatar and then implement some decision making logic. And when I say contracts, I guess actually it could be anything. It could be an EOA as well, but it's some address that can basically call that function.
00:09:16.410 - 00:10:02.278, Speaker B: So you could enable an EOA like someone's MetaMask account as a module and just give them total control of the safe. But more than likely, you would want to create a scenario where you actually have some logic there. So this is going to be, in most cases, a contract and that's going to implement some logic. So a module can be literally anything that can call the exec module transaction function. And so that could be one of the modules that we've built, but it could also be any of the existing Dow frameworks. And so this is what we say when we're talking about kind of enabling portability and composability. Essentially with this pattern, what you're able to do is set up a notesafe and then control it with any of the existing Dow frameworks.
00:10:02.278 - 00:11:07.786, Speaker B: So say you're an organization and you want to start out with an Aragon Dow. Then you go and deploy well, I guess maybe we'll do two kind of hypothetical examples here. One where you just deploy your Aragon Dow and you use that account to control all of your assets, control all of your systems and kind of references externally, say, then six months down the road you say, hey, Aragon's not working for us for whatever reason. Let's migrate over to a Molokdao and Dow house. So now you have this kind of monumental coordination challenge, right, to move all of the assets that the Dao controls, to move all of the systems that it controls, they update the owner transfer, ownership function and any kind of ownable systems. And then also to move any external references to your Aragon Dows account, now to your new Moloch Dao account. And so that kind of monumental coordination effort in the context of a Dao that probably has to put through proposals where people vote and all that kind of stuff is exactly that monumental.
00:11:07.786 - 00:12:16.454, Speaker B: It's a painful coordination challenge if you imagine the same scenario in a dow that has, I guess, a little bit more foresight and says, okay, we're going to set up a nosis Safe as the core, we're going to enable our Aragon Dao as a module to the nosis Safe. So Aragon Dao now has kind of unilateral control over the nosis Safe and then same thing happens six months down the road, they say, hey, we'd like to switch over to Moloch. For whatever reason, it's literally one proposal with one transaction to enable the Moloch Dao as a module. So the safe and disable the Aragon Dao. And so that monumental coordination challenge now is drastically reduced simply because you've decoupled your account and your control anyway. So modules are these addresses, accounts that control the safe. Modifiers are contracts that you would sit basically between a module and an account or a module and an avatar to modify what it does.
00:12:16.454 - 00:13:48.350, Speaker B: And so simple example of that would be things like a time delay or potentially something to scope out the functionality that a module can interact with. And then guards are another concept here where you can basically implement pre checks and post checks on execution. So you can do things again like limit the scope of the addresses and functions that the safe is allowed to interact with or that the module, I guess, is allowed to kind of send transactions to the safe to interact with and also prohibit things or kind of limit things like whether it can do delegate calls, what functions it can interact with, potentially things like pass out and limit what types of parameters it's allowed to pass. And also in post checks do things like make sure that certain state hasn't changed. So really with these kind of four kind of basic pieces, you create a really flexible and composable framework then to build dowels on and to leverage all of the existing tools in the space in a really composable way. And so for the rest of the talk here, I really just want to take a quick dive through one of our modules to kind of show you how it works. If you're wanting to build your own modules, you'll essentially just add the Zodiac library into your module repo and then import the module contract into your contract or the module kind of abstract into your contract.
00:13:48.350 - 00:14:41.378, Speaker B: And I'm going to jump over and we'll take a look through the Exit module. So exit is one of the modules that we built and what this does is essentially replicates closely Molok's Rage quit function. So this gives you the ability to claim a portion of the safe ERC 20 and native token assets in exchange for some token that the dow designates. So it has a designated token and you can redeem it for a share of the safes assets. So basically to build out this module, we've imported our module contract here. And then there's a few functions that we basically need to overwrite or kind of write our own implementations of. So here we have a setup function.
00:14:41.378 - 00:15:44.780, Speaker B: This is leveraging the module factory that we created. And so this just really exists so that we can allow anyone to easily create proxy implementations of their sorry, deploy proxies pointing to their modules. And so the reason for that is to reduce the deployment costs for end users and it also then gives us a nice quality of making it a bit easier to track in things like a subgraph. But here we've got a kind of standard implementation of this. You'll override it and basically just pass in some variables that get then decoded by the setup function. The main piece that you need to essentially do for your module is at some point you will call an exact function. Let's see if we can find it.
00:15:44.780 - 00:16:38.262, Speaker B: So here we go, an exact function. And so this is not, this exact function is essentially what you'll see over in the module contract. Let's jump into here. Um, bear with me. All right. So we've got our exact function here and this is what, whatever the kind of logic is in your module that's going to eventually trigger the safe to do something, this is what it will call. So you'll pass it to a value and a data parameter as well as an operation.
00:16:38.262 - 00:17:33.850, Speaker B: And essentially two is just the address obviously that you want safe to call. Value is your ether value, data is your abi encoded input. So essentially kind of telling the safe what it should do and then operation is whether it's a call or a delegate call. So back over to here. We're essentially for our exit function up here, a few different places are going to call. We're basically going to build this exact function here for in this case transferring a bunch of ERC 20 tokens. So we build out this exact function call to then trigger the execution in the safe to give us our share of the ERC 20 token.
00:17:33.850 - 00:18:31.520, Speaker B: In this case here, we drop in some designated tokens as a parameter. So amount to redeem of your designated tokens and then you pass in an array of tokens that you want to claim. And essentially then the exit function is just going to go through. Check that you have the right amount of tokens. Check the circulating supply, transfer the tokens from you to the avatar and then it's going to transfer you. Your share of the SAFE's native assets and then go through and basically iterate through this loop to transfer you your share of any one of the tokens that you passed in to the array. Once it's done that, it's going to emit a successful exit event and you're good to go.
00:18:31.520 - 00:20:01.894, Speaker B: The point of all this being that with this kind of module sol that you are importing, you get to essentially skim over having to implement a bunch of the logic for actually kind of creating a module and being able to manage it and focus just on the functionality that you want in your module, just on the limited piece of control. And the reason I chose to show the exit module here is just to illustrate that a module doesn't have to be a kind of fully fledged governance framework. It can be something that implements a really specific piece of logic. So in this case, it implements just the equivalent of the kind of rage quit function in Molok, just the ability to redeem a designated token for a share of the safes assets. And then you can essentially mix and match all of these little modular pieces to build out any combination of functionality and build out essentially the dow framework that best suits your organization. And so that might be, say, a compound governance dow in combination with an exit module or something like that, if you're wanting to use an existing very robust governance framework, but add this one piece of functionality that it doesn't have. Or it might be that you go and kind of piece together a bunch of individual pieces.
00:20:01.894 - 00:21:51.394, Speaker B: Maybe you use a reality module connected up to snapshot with our Safe Snap plugin. And then maybe you go and add things like the allowances module to give a few people some spending limits and things like that to really kind of be modular and I guess, composable. So the reason that I guess we wanted to talk about this here this week was really just that Zodiac kind of represents a shift in how we and hopefully how others will start to think about constructing dows. So for anyone that's thinking about spinning up a dow, adopting this pattern essentially gives you the most possible kind of future flexibility without having to go through these kind of, again, monumental coordination challenges to migrate from one framework to another or to kind of enable functionality after the fact. The other thing that this setup kind of enables fairly uniquely is the idea of kind of cross chain dows interdimensional dows. What that's going to do is essentially allow you to have a dow deployed on one execution environment, control a safe on another execution environment, and potentially control multiple safes across multiple execution environments. So you could do something like have a Molokdao deployed to XDI and control that, or have that Molokdao control a nurse safe over on Mainnet, and then also potentially control one on polygon and one on arbitrary and one on optimism, essentially creating this kind of constellation of nursesafes.
00:21:51.394 - 00:23:15.370, Speaker B: And this is obviously the thing that gave us the idea for calling it Zodiac was essentially starting to think about dows as these constellations of contracts, of systems, of people, of communities in a much more I guess again, composable way. But yeah, this idea of these kind of interdimensional cross chain dows is one of the really key features that this new pattern of designing dows really enables. And it's one of the things that we're really excited to help facilitate as this kind of sidechain and layer two ecosystem continues to evolve and flourish. So I guess I'll wrap it up there for anyone that wants to check out Zodiac more jump onto Twitter, follow at Gnosis Guild jump into the Gnosis Discord server at chat gnosis IO you can always find me at underscore Macmillan on Twitter. And yeah, look forward to, I guess seeing what people come up with, what different modules people start building on this. And if you have any questions, then yeah, feel free to lean on us as a resource. There's also a link to the Gnosis Guild Discord server on the Gnosis Guild Twitter account, so feel free to jump in there and happy to answer any questions if there's any that have come through from the audience.
00:23:16.270 - 00:23:48.014, Speaker A: That was really awesome and thanks for doing even walking through the code base. It's always risky to do live demos, but this worked out. No questions around what the modules or sort of how Zodiac is set up. I do have a couple of questions around, maybe just out of purely out of curiosity, what are some things on your wish list as modules that you would like to see? You obviously talked about the rage quit one, but can you just walk us through a handful of things that are possible or things that you would like to see or just get uniquely enabled with Zodiac?
00:23:48.142 - 00:24:45.670, Speaker B: Yeah, so I think probably the earliest thing on the wish list is I would love to see some kind of native integrations into some of the existing Dow frameworks. So the Dow House guys jumped in really early to do that for Dao House. So you can already spin up a safe minion for Molok DAOs on Dao House and that allows now your Dow House DAOs are really easily controlled and those are safe. So I'd love to see the same kind of pattern happen for each of the other Dow frameworks. An Aragon application, a colony extension, a Dow stack, schema, and then same thing for compound and tally and stuff like that. I think that would be a really great first step. Some of the other things on the wish list are additional voting types, proposal types, novel ways of reaching consensus.
00:24:45.670 - 00:25:16.080, Speaker B: We are looking into doing things like zero knowledge voting with Macy and so anyone that's interested in that, then please jump in and come and help us build it, help us make it a reality. We have a really cool proposal framework called Zilla that was built by a community member who is now a part of the nurseskill team. And so we're going to be looking to extend that out, make all kinds of different adapters for different voting types on that.
00:25:16.690 - 00:25:22.578, Speaker A: Can you walk through a couple of these different types? Was zero knowledge like one of the examples or what are some other ways?
00:25:22.744 - 00:26:46.700, Speaker B: Yeah, as of right now, the adapters that have been built, I think like a quadratic voting option, a linear voting option, like an ERC 20 balance of type thing. So you can imagine the same kind of flexibility in Zillow as you have for strategies in something like snapshot, where it's up to you to kind of design a strategy or pick one of the existing strategies, but there's unlimited flexibility in terms of what the voting types could be for that. Another thing that I'd love to see is more kind of Oracle types than just the reality ETH oracle that we have currently. So we built that out as our first kind of foray into this kind of pattern of designing things. And we're going to generalize, probably using Zillow generalize how the reality module works. And so we could imagine also similar kind of adapters for other Oracles. You could imagine one for chain link or one for API Three or literally any other kind of Oracle framework just for bringing kind of decision making from off chain or from other chains that maybe don't have a reliable bridge or something like that.
00:26:46.700 - 00:27:46.366, Speaker B: So I could see that being really useful. And then I think the other thing that I'm really excited to dive further into is more a variety of kind of Bridging technologies. So the version of our kind of bridge module right now that allows you to do things like control a safe on mainnet with a Dao on XDI leverages XDI's arbitrary message bridge, or in the case of Polygon leverages their data tunnel. But I would really love to see some exploration into other Bridging mechanisms, so like cello's optics would be neat to leverage. I'd love to see things like NIA's rainbow bridge leveraging that so any chance that we can basically get to extend the reach of a dow deployed on one network, one kind of execution environment out to the stars, out to all of the other execution environments. So there's other fun stuff happening that.
00:27:46.388 - 00:27:57.778, Speaker A: Makes a lot of sense. Maybe it's just my not good at understanding, but how does the Bridging work in this case? If it's cross chain or even L two?
00:27:57.944 - 00:28:02.486, Speaker B: Yes. I mean, that's dependent obviously, on the bridge that you're going through.
00:28:02.668 - 00:28:04.600, Speaker A: Let's use Polygon as an example.
00:28:05.050 - 00:29:08.722, Speaker B: Yeah, so the Polygon bridge I'm actually not as familiar with. I can talk pretty concretely about Xdive AMD. And so that essentially it's a multi SIG of sorts, where you essentially have a set of bridge oracles and you call a function, which is the request to pass message on the XDI side. Those bridge oracles then sign that message and then anyone can take that signed message once it passes some threshold of signers and execute it on the other side of the bridge. The contract on the other side of the bridge has logic to basically validate that the signatures that you pass through are valid. And if they're valid, then it'll reach out to whatever contract it's meant to be reaching out to. And then our bridge module essentially is going to receive that message validate that it came from the right address, it is from the right bridge contract, that the chain ID is correct, that the equivalent of message sender on the other end is correct.
00:29:08.722 - 00:29:40.130, Speaker B: And if it kind of passes all those checks then it will let the execution pass through to the safe. And so I'd like to see that kind of generalized to a whole bunch of different bridge types so that organizations can, one, kind of extend their reach to other networks and then two kind of choose their trust assumptions. Choose which set of validators in the case of these kind of more trusted bridges they accept or what kind of cost or kind of time trade offs they need to accept in order to get this kind of cross chain execution. Got it.
00:29:40.200 - 00:30:10.410, Speaker A: And maybe one other question and I feel like this may be a stupid question from my end but could you clarify the difference between not difference is there a nuance between who can write these modules and deploy them? Because does this mean anything that you want to think about or you talked about on your wish list has to be adopted and agreed to by that Dow community? Or does that mean anybody can say, hey, I'm going to add this attachment, but I don't necessarily need this to be part of the main Dao's decision or progress.
00:30:11.330 - 00:31:20.814, Speaker B: Anyone can write and deploy a module obviously but for it to pass a kind of execution call through to the safe the safe has to enable it as a module. So there's a function call on the safe side that is enable module and once you enable the module the module gets unilateral control of the safe. And so a dow needs to be really selective about what it enables as a module. If you just enable someone's DOA address then they just now own the dow. So yeah need to be very careful about that. One other thing that I wasn't very explicit about is that the modules they gain kind of unilateral control and so once you've kind of enabled that control mechanism you can get rid of all of the multi SIG signers and so we see this as kind of a progressive decentralization pathway right? You start out as a notes are safe as kind of a multi SIG and then maybe you add something like snapshot to give your community kind of a voice but no direct control. Then a step three might be to add something like our reality module and the safe snap plugin to now give the community more permissionless control over the safe.
00:31:20.814 - 00:31:53.294, Speaker B: They now can execute things without the multisig signers having to do anything. The multisig signers are still there. They can both kind of control things in parallel. And so now maybe your next step in progressive decentralization is to scope what the multi SIG signers can do. Maybe you say we only want them to be there as a backstop, we only want them to be there to be able to stop malicious transactions. So we're going to scope them to only being able to call the Mark transaction as invalid or Mark proposal as invalid function on the reality module. Anything else they do is just going to fail but they're allowed to call that.
00:31:53.294 - 00:32:52.850, Speaker B: And so now if a malicious transaction happens to make its way through the snapshot vote and through the Oracle, then we've still got them there as a backup. And then last step would just be to go no hands, get rid of the multi SIG signers altogether and just let the community kind of totally own things. And the thing that we really like about this is that it is a lot more comfortable for many organizations to take those kind of baby steps towards decentralization than just going from zero to one. Just going from, hey, this is our baby. This is the thing that we built. You guys have it now. And do your Thing is one of the reasons that we really like this kind of framework is that we can very much enable you to take the smallest little increments that you're comfortable with to get Your project from Being controlled by a Small group of people to now being controlled by your community to now really being kind of a Dow.
00:32:52.850 - 00:32:54.018, Speaker B: Awesome.
00:32:54.104 - 00:33:22.250, Speaker A: No, I think that's a whole new set of possibilities now. I kind of do like the pitch you have for the launch. It is an expansion pack. You want to think of it as like a big video game and you can kind of add in customize all these modules. So this is really cool. And a couple of already asked how do we learn more about it? People have sent the link to the blog so please check that out. Is there any other way people can follow what's happening with the project or.
00:33:22.320 - 00:33:59.718, Speaker B: Is that the best way? Yeah, keep an eye on the blog. Obviously if someone's already shared a link there otherwise nosis Guild on Twitter it's just at nosis Guild on Twitter is another great place to keep in touch and short of that then jump into the Gnosis Guild Discord or the Gnosis Discord. We're available most of the time and happy to answer questions, happy to help people through getting set up or if you're trying to build your own modules or plug into existing modules. Yeah, happy to help wherever we can. Amazing.
00:33:59.804 - 00:34:06.706, Speaker A: Well I hope everybody is satisfied with that answer paying or in 50 different places until response.
00:34:06.818 - 00:34:44.066, Speaker B: Yeah, great strategy and then I guess my. Ask for anyone listening is just if you are thinking about a dow, about setting one up, if a project that you're working with is thinking about setting one up then explore this pattern as a way of essentially future proofing your dow, allowing your dow to kind of grow and adapt where it needs to. This is probably the biggest challenge that we have now is just encouraging people to kind of explore and start using this as a pattern because it is new and it's not the prettiest user experience yet. We're working on that but it will pay dividends in the longer run.
00:34:44.248 - 00:35:11.806, Speaker A: Absolutely. And I think this is also a pretty good segue to what we want to actually cover next in the talk in general, because that's exactly the topic which is how do we manage thousands of scale and mostly from the point of view of what are the things that we think are just not good right now and things that we can improve? But the way Zodiac is starting off with an expansion pack and a more plugin based model, I think this is super cool. So thanks so much again and really appreciate you doing this talk today.
00:35:11.988 - 00:35:13.100, Speaker B: Cheers. Thanks for having me.
