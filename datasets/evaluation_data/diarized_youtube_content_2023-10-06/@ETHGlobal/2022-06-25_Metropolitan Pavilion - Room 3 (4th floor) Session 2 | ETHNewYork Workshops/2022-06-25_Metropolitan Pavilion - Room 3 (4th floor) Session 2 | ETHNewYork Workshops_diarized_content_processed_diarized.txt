00:12:03.180 - 00:12:03.730, Speaker A: You.
00:12:05.780 - 00:12:21.404, Speaker B: Hi. Okay, 930. So I'm just going to kind of take a slow start. Maybe a couple more people will trickle in. But it's also 930 on a Friday, so might just be us. Thanks for coming. I'm leilani or ley.
00:12:21.404 - 00:13:02.192, Speaker B: I'm a product marketing manager at Covalent. So I think I've seen a couple of you at our booth this morning, or all through the day really. I'm just going to give an overview of Covalent, how you can use it and how it might be useful for this hackathon. And this is kind of the broad agenda for the talk. So before we get started, if I haven't kind of given you the spiel already at the booth at some point today, covalent is an indexing company for blockchain data. So what we have is an API that's actually free and it's unified, so you can use it across all the different chains that we index, which currently is 35 different blockchains. And then you can basically build MultiChain applications pretty quickly.
00:13:02.192 - 00:13:42.360, Speaker B: It's a rest API and it's also read only. So those are kind of like the ground details before we get into the rest of the presentation. Common use cases are like Wallets NFT galleries, but any on chain data you can pull into your applications with us. So, yeah, I'll cover some of the data challenges just so you get an overview of how we compare to other solutions, go a little more into the API, how to access it, get started, and then our bounty info. Because we are doing a $10,000 bounty for ETH New York, and it's a general bounty. So if you use the API at all, you're actually eligible for part of that prize money. So kind of how we usually start off these presentations.
00:13:42.360 - 00:14:46.370, Speaker B: Maybe if you've participated in ETH Global hackathons before, you might have actually seen one of these kind of talks that we do and overviews. But Covalent's always really been focused on the future interoperability and just gambling on real mass adoption of blockchains, whether or not that's in a DeFi landscape like the Woo, or whether or not you even know you're using a blockchain. So in the future we see millions, maybe billions of pieces of information on chain. I should update that slide actually, because I think there's already dozens of blockchains and lots of applications, which means also lots of users. And initially when Covalent was developed, it was with this in mind, which was that data was going to be very complicated and in demand, especially because blockchains are not all the same. They use very different architecture. We've seen the EVM model and now the non EVM model, and it can be challenging to standardize data across those, to access them, to learn new tools and new ecosystems and all of the things that come with that.
00:14:46.370 - 00:15:40.150, Speaker B: So that's kind of where we saw the data challenges and what we wanted to address. So what it kind of boils down to is interoperability. And this is everything from users. So if you've even just used a D Five protocol or bought an NFT or really done anything in the Web three space, you notice that it's pretty fragmented. There are different solutions across different chains, and a lot of solutions are kind of in silos. So especially for developers like yourselves, if you're building applications and you have that user persona in mind where you want to aggregate their data, perhaps to make that UX or UI a little bit easier, there aren't many solutions to actually do that, and there's also just so much data on the blockchain in general. So doing the indexing work yourselves or running your own infrastructure could be pretty challenging because it's just adding an element on top of what you already want to build.
00:15:40.150 - 00:16:16.030, Speaker B: So this is like a little bit more into the data challenges. I know I'm really illuminating the problems here, but not only is it complicated, it can be expensive. If you have experience like running your own nodes, perhaps you know that the more you scale, the more your project grows, the more you're also paying. And at some point that's quite a barrier, I think, to a lot of growth in some interesting use cases. Also missing delay data, lack of standards, blah, blah, blah, blah. There's a lot of problems. I don't think we need to illuminate every single thing because if you've spent time building in this space, you probably have run into these problems.
00:16:16.030 - 00:16:53.656, Speaker B: So that kind of leads me into the Covalent API. I hope you can see that QR code. It's just going to take you to our website, which is the point of contact for signing up for an API key, which is free, but also for all of the information that I'm going to cover throughout the presentation. So if you want to follow along, you can do that, and I'll go into some of those links as well. It's one solution to access all on chain data. So the unified aspect, as I mentioned before, aggregates different APIs across different blockchains so that you're only really interfacing with one tool, and you do that through what's called a chain ID. In the future, it might be a chain name.
00:16:53.656 - 00:17:35.530, Speaker B: We're just trying to make that the easiest possible experience for developers. But basically, if you built a project on Ethereum and you want to include polygon, or you want to include another chain that your users might be on, you just have to change a parameter to be able to add that in. So it's super useful for focusing on multi chain applications. It's also useful for all historical data, granular, transaction data, really anything on the chain we index. And what's nice about the unified API is that it's a standard request and response format. So we're pretty big on developing a standard for data. So that, again, you're not kind of like reinventing the wheel every single time you build something new.
00:17:35.530 - 00:18:00.928, Speaker B: So yeah, you can get really familiar with the tool and the response. And then as we scale, you scale. That's kind of the idea. With this. There's also no code required. So recently I'll show you the docs in a little bit. But we did develop an analyst mode because we saw that a lot of kind of normal users or people dipping their toes into Web Three want to be able to understand the data and make quick insights and cut through the kind of the noise on Twitter and things like that.
00:18:00.928 - 00:18:25.256, Speaker B: So that is a useful feature as well. So this is kind of where we fit in the crypto stack. It's a question I think we get pretty commonly because there are a lot of different infrastructure solutions out there. There's people that both read and write to the blockchain. We are kind of a read only layer. So you can think of the blockchains as the blockchains. I guess they're the foundation where the data lives.
00:18:25.256 - 00:18:57.792, Speaker B: The nodes are the way that you interact with those blockchains. So without covalent, you'd be running your own nodes, paying a node provider, or using some other kind of solutions. But where we sit is between that and the application layer. So really what we support is just those applications on top. So if you need to display any kind of data or pull in those feeds into your applications, whatever you're doing, we just make it easier so that you don't have to do all those steps beforehand. You don't have to run your own nodes, you don't have to write complex queries. You just make API calls and the data is instant.
00:18:57.792 - 00:19:54.790, Speaker B: So that's kind of how we see supporting the scaling issues of just development in the ecosystem. I think at this point we've seen reports that there's pretty small group of developers. So I think a big chunk of the active ones in Web Three are actually at these events. Because I think I read there's 30,000 active monthly developers in Web three, which when you think about that globally, it's really not a lot. So in order to make that process easier, need better onboarding tools or things that people are just familiar in general, like APIs, people understand APIs and we can simplify that language and make it easier for more people to build in this space. So that's kind of how we see empowering more users again, kind of just supporting adoption in general. Because as much as it's really exciting to meet your small little tribe at these events, to support the mainstream and to make it for all of us, we need to make it easier for people that have no experience or don't know what any of these things mean.
00:19:54.790 - 00:20:32.672, Speaker B: So these are kind of our two main users, developers like yourselves. Maybe crypto isn't the right word, maybe Web Three is a little bit better, but developers and then analysts. So really in the past year, I think we saw a lot more mainstream news applications covering the crypto markets. And if you've read some of those articles, I don't know where they get the data. It's not always accurate. It is hard to find just granular accurate data that is easy to access. So if you don't have that, you can rely on misinformation or on other sites that might not be giving you like the most.
00:20:32.672 - 00:21:24.512, Speaker B: I mean, it's just better to be able to do things yourself and verify yourself. Anyway, with that in mind, we did develop an Analyst mode. So with the API, if you use it in developer mode, you'll get a JSON response. But if you switch it to analyst mode in our docs, which I'll show you, you can actually just download those directly as CSVs or you can see it as a spreadsheet in the browser. So even if you are a developer and if you have limited time at these hackathons, I think it's a really useful way to just visualize the data because you can clearly see all the columns that you'd be getting and what those values are. So there's a little bit about our ecosystem, some of the bigger projects that use us, but also just the proof that a lot of developers have tried out covalent and yeah, really enjoy the ease and the speed of working with it. I think especially because you have a tight turnaround of these hackathons, it's kind of nice to have one solution that you can really experiment with.
00:21:24.512 - 00:22:06.076, Speaker B: It's good for beginners as well, but also bigger projects that again, kind of want that like standard response, MultiChain capabilities and everything else that we support. So, just a little bit about our network. One of the questions that we used to get a lot is are you decentralized? How does that work with web Three? It is important to a lot of people in this ecosystem. We actually are decentralizing and we took a big step a couple of months ago with launching single sided staking and launching what is called a block specimen producer. I'm not going to get too into the details because I don't think that's the most relevant. If you want to learn more, you can talk to me after. But basically it's a first proof based extraction mechanism for the blockchain.
00:22:06.076 - 00:22:44.988, Speaker B: So what we do is we have validators that are running our block specimen, we extract the data and then they verify that it is like they verified it with the cryptographic signature that is accurate. So that's a really important part of our decentralization step. And throughout the rest of the year we plan to decentralize the storage, the indexing, the querying, really probably in like a quarter by quarter format. So we're looking at about a year roadmap. But of course things are kind of flexible in that way. But yeah, that would be the universal decentralized data model for MultiChain indexing and querying. It's quite a complex sentence, but you get it.
00:22:44.988 - 00:23:17.364, Speaker B: We're decentralizing. So this is a little bit more on the bounty that we're providing for ETH New York. So $10,000 in stablecoins ETH New York itself actually distributes that. But basically it's just meaningful use of the API. So we like to keep it open because actually our slogan is one unified API, 1 billion possibilities. When you're a data provider, you don't really gear people in a certain direction. It's better to actually just see what comes out of events like these.
00:23:17.364 - 00:23:43.084, Speaker B: And I really like the unique use cases. So if you have a weird idea in mind and you need any sort of on chain data, the most useful endpoint I think, is like log events. You can scrape through those. You can do that by topic hash, you can go through the contracts. But we do have specific endpoints for NFTs, for instance, specific balances endpoints. I'll show you those in the Docs as well. So by meaningful use, the top prize is 3000.
00:23:43.084 - 00:24:13.764, Speaker B: The minimum prize is 500. And basically we judge it based on complexity and the creativity of the use case. So if you do combine more than one endpoint, you're typically eligible to win more. But if you integrate Covalent at all with other solutions or whatever you want to do, that's totally okay, and you'll be eligible to win part of that bounty. So I can go to those details a little bit more in depth once we get into my other links. So, here is kind of the primary developer resources. One is our Covalent Docs.
00:24:13.764 - 00:24:41.740, Speaker B: Obviously, when you try a new product, you go to the Docs to see how it all works. So on there you can see supported networks, more info on the blockchains that we actually support, and how you can use those endpoints. You can also see how to guides. You can see some of the other tech that we have built on top of the API. That's an option for you to use. Then there's the API reference itself. So that is the extension of the Docs, where you can actually try the API Live in the browser.
00:24:41.740 - 00:25:33.280, Speaker B: So we added that feature last year and it was a really important thing for us, again, to make that onboarding experience a little bit easier. So you can actually see exactly what the data is that you'll be getting before you go ahead and build something with it. So you can try all of the endpoints live in the browser and you can view that response and you can see the fields and everything like that before you might pull it into another solution. And then the third important resource, if you've been by our booth, I've probably plugged this to you as well, is our code templates. So we've started to build out more code templates, components, tutorials, just kind of focusing on onboarding more people into that ecosystem. And we have a giveaway going on that. If you go to that link for our code templates, you star our repository, you enter to win AirPods Pros, which we'll give out at the end of this conference.
00:25:33.280 - 00:25:53.416, Speaker B: And now I'm actually going to go to these links. Okay. It's a little bit complicated on here. Okay, so is that like showing my whole screen? Yeah, it is. We love to see it. There we go. So this is what our docs look like.
00:25:53.416 - 00:26:12.652, Speaker B: You have an overview of pretty much everything that I just said. So what Covalent is apps that are building on us. And then the sidebars where you can get the rest of the information, this is Covalenthq.com docs. And what you can do is expand the developer tools. You can see the updates that we've recently made here. We do that month by month.
00:26:12.652 - 00:26:33.840, Speaker B: You can see Primer, which is kind of similar to MongoDB. It's like another thing that you can do to customize your API queries. And you can click on Support and Networks. So this is where we show all of the information on our blockchain partners. We're adding these like crazy right now. It's been a really big year for indexing for us. So, yeah, stay up to date with those because it's pretty exciting.
00:26:33.840 - 00:26:51.420, Speaker B: But if you go to click on them, for instance, you can just see the chain ID. A little bit more details. Oh, yeah, I wasn't going to click on anything because the WiFi is not great, so I probably shouldn't have done that. Whoopsie daisy. Stopped. Okay. And then, yeah, there's a little bit more on here.
00:26:51.420 - 00:27:29.364, Speaker B: We actually did have a network section of our docs as well. Oopsie daisy. Just if you want to learn more about that decentralized component and how the API is connected to our network and how it all connects. So you can browse these at your leisure and you can ask us questions in the booth. So, moving to our API reference, this is where you can actually see the endpoints that we provide, and this is where you can test them as well. Again, I'm sorry, Wi Fi, so I can't really do it right now, but I was just informed that they're pushing a big fix, so stay tuned for that. But we have been broken down into some categories.
00:27:29.364 - 00:28:08.128, Speaker B: So these are what we call class a endpoints, and then we have further categorization in there. So broadly, we separate into balances, NFT transactions and base. So Balances, this is the most used endpoint that we have. We kind of started with Balances, and it's been our rock ever since. And we are making more improvements to it on a continual basis. But especially in the next quarter, it's going to be revamped and faster again. So when you get in other solutions, you can query like, does this wallet hold this exact token? For instance, with our balances endpoint, you put in a wallet address and it just shows every single token that they have.
00:28:08.128 - 00:28:45.984, Speaker B: So it's a really good way for aggregating balances data, for building wallets or just anything where you want to display a user's assets on chain. And you can again do that across multiple chains. Our NFT endpoints, a lot of these were developed in the last year just because NFTs became such a huge trend and a huge space for developers to innovate. So you can get metadata for NFTs, like the images themselves, the gifs, whatever that is. Also the attributes. This is kind of more used for building like NFT galleries or speculation tools. For instance, we've seen people build predictive tools for whether a collection is going to go up or down.
00:28:45.984 - 00:29:07.700, Speaker B: So cool things like that. And yeah, NFTs are a fun creative project for hackathons for sure because it's visual. So if you're thinking of doing that, we can support you. There transactions. So a lot more of these are used in DeFi use cases. So you can just show a user's actual activity on chain. I'll kind of go into that a little further and then base.
00:29:07.700 - 00:29:59.430, Speaker B: So base is just things like to get a block, a date and time, anything that you might need to help support your other queries. Class A endpoints can be done across every single chain. So if you want to see the supported chains, oops, you can click the drop down here and this can show you all of the chains that we index and you can switch between them. Yeah, it'll show you their IDs, everything you need to know and if again you want more details, you go to the docs and then we have class B. So class B originated as just like protocol specific endpoints. We actually only have this one on here right now, but it's a very powerful set. So if you're familiar with like XY equals K, it's the AMM model that uniswap B two popularized that a lot of other swaps have like forked and cloned, so pancake swap and spirit swap and a lot of the swaps basically.
00:29:59.430 - 00:30:30.748, Speaker B: So what you can do with this endpoint is you can query all of the Dex data where they use that model. So it's a lot of the DEXes in the market. You can get pools, spot prices, volume, any sort of decentralized exchange data. Really useful if you're doing sort of Dex analytics. And we do support a lot of those clients as well with their info pages. So if you're building something like that, XY equals K is a really powerful tool to use at the bottom here too, you just have a couple of pricing endpoints that are always useful. So yeah, that's an overview of the docs.
00:30:30.748 - 00:31:06.824, Speaker B: And now I'll show you that code templates thing that I was talking about. So if you come by our booth or if you copy the link in this presentation, it's going to take you to the web3 starter resources. These are some useful things that we're consistently adding to to help people get started. So we do a little bit of the work and you can fork it and modify it and basically just use these in whatever builds you want. So again, if you go to this where's the Star, I already starred it, but if you start it, then you're eligible to win those AirPods. This is what it looks like. So right now we have in XY equals KDEX dashboard template.
00:31:06.824 - 00:31:33.716, Speaker B: So the ones that I just mentioned, where you can show all of that different data, you can fork and clone this and modify it. It looks kind of like this at its base. So we've built this out. You could switch the different exchanges. Oh yeah, I'm only on Ethereum, so it's those two. But you can switch the chains supported over here. You can see all the different chains that this supports and then it'll populate the different exchanges supported on those as well.
00:31:33.716 - 00:31:57.192, Speaker B: It even has like a little sentiment analysis thing. And this is again, just like the very base. So you can improve this. But if you are looking for a quick thing to build, maybe this is somewhere for you to get started. And then we have a price tracker Chrome extension as well. I haven't played around with this as much, but I recommend checking it out. We're getting a little more into Widgets lately.
00:31:57.192 - 00:32:32.832, Speaker B: Oh, you're welcome. We're getting more into Widgets lately and components. So if you are interested in integrating those into your apps or whatever you're building, it's another quick addition that you can quickly add in. It might add some pizzazz to your project and the readmes for these kind of give you all that you need to know. Where am I going? Yeah, and then just at the bottom here, we have a code along. So we're starting to do a couple more of those as well. It's just like a Python notebook that you can follow along and get started with.
00:32:32.832 - 00:33:00.284, Speaker B: Yeah, there's also like a little bit of a narrative in this one, but you can get started with our API and see what that would look like as well. So just to give a little bit more info on the bounty, pull up this page. Hopefully the writing is like a decent size. I think I can. There we go. Cool. So as I mentioned, the API is super useful for NFT storefronts on chain analytics wallets.
00:33:00.284 - 00:33:42.110, Speaker B: A lot of these are popular use cases that some of our bigger customers who are around sponsoring also uses for. And if you want ever to have a more in depth conversation on how that works, you can also come see me at the booth or ask me afterwards. But this is kind of broadly how we look at judging. So one to five on each of the key factors, which is the creativity and feasibility is kind of a big part. This was more relevant, I think, in the bull market when you just saw everybody building things kind of for no reason, which was great, but you know what I mean. So people that are looking to solve a key problem, obviously that's awesome in judging. We take that into consideration and then which endpoints you used.
00:33:42.110 - 00:34:10.852, Speaker B: I still really recommend checking out log events because that's just like the most versatile endpoint for anything you might want to query. And then the user experience is a factor. I always just advise people. Maybe this is the first hackathon or maybe you've done a lot, but good design goes a long way because it makes you more noticeable and it's awesome. And then the technical competence. So basically just like how organized, how clean the code is, things like that. So the resources are at the bottom of this page.
00:34:10.852 - 00:34:46.384, Speaker B: This is published somewhere on each global site as well. And we actually do have our lead API engineer with us at the booth, which is amazing, his first time he's here. So if you have specific technical questions or anything you want help with or more inquiries, stop by and he's around to help with all of that, which is amazing. So, yeah, I think what else did I put in this presentation? Let me just see if I'm at the end. 1 second. Yeah, that's basically it. So if you have any questions, I can take those.
00:34:46.384 - 00:34:58.840, Speaker B: Now that link I think is just going to take you back to the website again so you can follow everything I just said. And yeah, I'm happy to chat. You can also come up here if you don't want to say it loudly, but thanks. Thanks for joining.
00:46:00.080 - 00:46:35.720, Speaker C: Really excited to see you all. So today we're going to explain what Uma is, what optimistic Oracles are. And for the hackers in the crowd, we're going to give some ideas for some projects you could build with optimistic Oracles. I think we have a pretty decent quick hack idea, but also just give some examples of how Uma is used in the wild today to help you guys out, no matter how far you are in the process. And I'm Nick, I'm an engineer. And this is Sean, product manager. And yeah, let's.
00:46:38.300 - 00:47:37.500, Speaker D: So just starting with the basics. Basically, uma is an optimistic oracle. I think to talk about what an optimistic Oracle is, we need to first talk about the fundamentals. What is an oracle? An Oracle is a system that is built to trustlessly and reliably bring data on chain so it can be used within smart contracts. So if you have a smart contract for a derivative on the price of, say, gold, you need to know what the dollar value of gold is and you need a way to actually get that data on chain because smart contracts have no notion of off chain data. So in DeFi, what do people think about, when they think about Oracles, they typically think about things that we call price feud Oracles. So an example of a price feud Oracle would be something like chainlink.
00:47:37.500 - 00:48:37.120, Speaker D: What are price feed oracles good for. Basically, price feed Oracles have a trusted set of actors that push prices frequently and are good for deterministic types of data. So they're used a lot in DeFi for things like securing lending protocols and running like liquidation engines there. And they're very good for times when you need data quickly and you care less about flexibility of the types of data you can get access to, or you care less about a concept of recourse and you also don't need any element of human judgment. So things like crypto prices are probably the best example. What is an optimistic oracle? So optimistic Oracles are a different take on how you approach this Oracle problem. Optimistic Oracles, we say enforce correctness after a dispute.
00:48:37.120 - 00:50:14.050, Speaker D: So what are they good for? They're good for basically bringing any type of data that is generally verifiable on chain. So you can ask a much broader set of questions of the Oracle. So rather than only being able to get things like crypto prices, you can ask it like very general questions and we'll go into why that is and how the Oracle actually works. But it's good for things like not only can you get access to the price of ETH, but you can get access to basically the answer to any sort of yes or no question that you can ask, like who won the Lakers game last night? Or who won this political election or what happened on this other blockchain network. Those are all things that optimistic Oracles can serve very easily. This is a very complicated diagram, so we'll share slides afterwards and I would recommend going through it then, but just at a very high level. What does the data request process look like? Basically with price feed Oracles, the way they work is that this permission set of actors will come to consensus on prices beforehand and push these prices on chain very frequently with our optimistic Oracle, basically somebody needs to say, hey, I need this piece of data, so they need to submit a request.
00:50:14.050 - 00:51:15.154, Speaker D: Once that happens, anybody so a completely permissionless set of people or not a set, but anybody can come in and say you're asking for the outcome of the sports game last night, or you're asking for the price of ETH and I can submit a bonded proposal saying I know the answer to that question and it's this. That answer then sits through this liveness period or verification period where anybody else can view that and decide if they agree or disagree with it. If everybody agrees and nobody disputes what the initial proposal is, then this is accepted as truth and this is where the word optimistic comes from. So it's kind of similar to optimistic roll up fraud. Proofs where there's a verification period where things are verified. So if nobody disputes it, then it's accepted as truth. And that's the data point that's used.
00:51:15.154 - 00:51:35.500, Speaker D: If somebody disputes it, then it basically gets escalated to a larger court system or dispute arbitration system. Again, there's a lot here, so I would go through the diagram, but that's it at a high level. And Nick's going to go through a couple demos of things you can build.
00:51:37.470 - 00:52:15.730, Speaker C: Cool. So this next section is mostly for builders, developers, and I'm just going to walk through some very simple toy examples of contracts that use the optimistic Oracle. I'm going to explain how they are very simple versions of real apps that are out in the wild right now using the uma, optimistic Oracle. And then we'll walk through some of those real life applications at the end of this. So the GitHub repo, the quickstart repo that we just put together is Live at the URL there. We use TypeScript hard hat ethers. JS typechain.
00:52:15.730 - 00:52:55.220, Speaker C: Pretty standard stuff in the industry today, but it could be, I guess it's just a good place to go if you want to just get started quickly with the latest of the tools that real solidity developers use today. So I'm going to explain a really simple contract first called the deposit box. I'm going to extend that with what I think could be a potentially useful application in the real world, but maybe not. But it does actually use the optimistic price request very well. And then the third, I'm going to explain how you could build a prediction market very simply. Well, actually, we built it. I'm just going to explain how it works.
00:52:55.220 - 00:53:29.360, Speaker C: So the user story is there's a deposit box. Let's treat it as a black box. That's why it's black. A user deposits ten ERC 20s into the box and the idea is to keep it safe there, safe from their own hands in case they trade it. So call it, let's say, 30 days later, the user wants to withdraw money from the deposit box to pay for cookies or coffee, and the user wants to withdraw $10 worth of tokens. Now, recall when the user first put in tokens, they put in ten tokens. They had no idea what amount of dollars they were put into the box.
00:53:29.360 - 00:54:32.274, Speaker C: So 30 days later, the user wants to withdraw $10 worth of ERC 20s. How does the black box know what one dollars worth of tokens is? Well, the deposit box can make a price request to the, uma Oracle. This is a very contrived example because you could have asked this to a price feed, Oracle. As Sean explained earlier, for most tokens, it's pretty easy to understand what $1 worth of that tokens are. But you could ask this to the uma, price Oracle and you'll ask, hey, what is $1 worth of tokens today? And the Uma Oracle is going to respond to it. So I'll give a really quick segue on how does the Oracle know how to answer the question. So the actual price request that the deposit box is making to the Oracle is a question, what is $1 worth of tokens? Today? Voters who are off chain actors need to look at some sort of legal contract or some sort of rules off chain or methodology to understand how to respond to this question.
00:54:32.274 - 00:55:23.330, Speaker C: So a real life example that we use to secure contracts that store like the Comp token comp is the off chain set of rules might be look at these three exchanges and take the median of their prices at a current time, and that is the price you should return. So, uma, Oracles are secured by these off chain contracts with rules that voters can easily follow. And the onus is on the writer of the contract to define these rules correctly. And then voters should be completely neutral about how they respond to them. So in this example case, the deposit box has asked the uma, Oracle, what is $1 worth of tokens today? The uma, Oracle says one token is worth $5, so the user will receive $2 back. Let's extend this. That deposit box is not super useful.
00:55:23.330 - 00:55:58.960, Speaker C: You could have used a different Oracle for that. Imagine I deposited ten ETH into a lockbox. This is something I've been thinking about and actually just was talking about today with some coworkers. Say my daughter was one years old and I wanted to give her ten ETH, but I didn't want her to be able to withdraw it until she was older and not just based on her age. I didn't want her to withdraw it when she was 20. I wanted to sort of incentivize her. So I set a rule that she could withdraw the money if she graduated college.
00:55:58.960 - 00:56:41.446, Speaker C: This is something that is easily verifiable by an off chain set of rules, but it's not necessarily easy to define on chain. There's no sort of bot that's tracking my daughter's life and responding to this automatically. So say for the next 20 years, she tries every day to trick me and asks she requests to withdraw ten ETH every single day. I'm going to look at this set of contracts and I'm going to answer no. If she ever wants to dispute me, she can dispute me and she can raise this question to the DVM. And then, uma, voters can then answer this question. Hey, the box might ask, uma, has Nick's daughter graduated college yet? Someone might propose no.
00:56:41.446 - 00:57:24.090, Speaker C: She's four years old. She has not graduated college yet. So the example, UMIP, identifier for this might be a yes or no question. Has my daughter graduated college yet? Voters, uma, voters, remember, are incredibly neutral and they're going to vote according to the rule set that's described. So this, UMIP, or this methodology might be vote yes if there is proof that her name has appeared on the graduation list for some certified college. This is obviously a very hazy set of rules, but it's just a toy example here. And vote no otherwise, and the contract could take the result of that vote and unlock her assets.
00:57:24.090 - 00:58:43.266, Speaker C: Is this a useful product? Maybe not, but I think it would. One thing that actually it could be useful for is if you in the future, say you lose communication with your daughter, uma, voters will still continue to vote on this question, has she graduated college yet according to that set of rules? So maybe it has some use case, but it's just a little bit of an example of a deposit box that could not be used on a different price feed Oracle. Okay, so I'll explain the prediction market. This is a very simple example of how a prediction market today called Polymarket is built on the, uma, optimistic Oracle. And this is how it's sort of built today. So say users want to bet on the question, who's going to win the Kentucky Derby? So you as the user, you might put ten USDC on the horse Seahorse to win the Kentucky Derby. You're going to deposit this into a contract written by the prediction market developers, and the prediction market is going to immediately ask the, uma, oracle, did Seahorse win the Kentucky Derby? Say the user originally deposited this ten days before the Kentucky Derby started.
00:58:43.266 - 00:59:37.314, Speaker C: So there's actually no answer yet. The contract needs to be written in such a way that the prediction market contract needs to be written in such a way that it will throw out answers where voters answer to the question that the question hasn't resolved yet. There's no way to know if Seahorse won the Kentucky Derby if the Kentucky Derby hasn't started yet. So the Oracle is going to basically just give a standby signal to the contract, and the contract is going to wait around until the Kentucky Derby actually happens, and then someone will be able to propose a price. The proposer wants to do this because they might earn, like, $50 or just some simple reward for responding to the question. Assuming no one challenges it, the contract can then pay out users. And so that's a very simple example of how Polymarket works today.
00:59:37.314 - 01:00:22.660, Speaker C: And imagine they're running this on many, many different markets that are all asking questions to the optimistic Oracle, maybe ten a day. And individual people around the world are responding to this for a little bit of a reward. And very few of these actually get challenged because they're relatively easy to verify. They're pretty hard to verify in a price. Feed Oracle. It's not easy to answer questions like presidential elections or whether insurance contracts, smart contracts got hacked. So today we'll just walk through some of the products out there that actually do use the Oracle, and we can reduce their use case to the questions that they ask.
01:00:22.660 - 01:00:25.620, Speaker C: Do you want to give this. Cool.
01:00:26.570 - 01:01:32.278, Speaker D: Yeah. So these are some examples of protocols that use Uma today. And like Nick said, the questions they ask. So Polymarket is a prediction markets platform, and they ask questions like, did the Trailblazers win their basketball game last night? So you can create prediction markets on Uma based on very arbitrary flexible types of real world data. The second one, the purple one is Sherlock, which is decentralized insurance protocol. And they ask uma, basically, was this protocol hacked? And should my DeFi insurance contract, should it cover this insurance claim? So another good use case is enforcing legal contracts where there's some degree of ambiguity and you need some sort of human element to resolve these things. The third is across, which is a cross chain asset bridge.
01:01:32.278 - 01:03:15.430, Speaker D: And across uses Uma's Oracle to ask for information about transactions that have happened on other networks. So if you're trying to bridge USDC from, say, optimism to mainnet, and basically across is asking questions about certain USDC deposits and if relayers are basically forwarding funds, yeah, it's pretty complicated, but was this relay correct? So was this transaction correct and were the fees that were taken out of it correct? The fourth one is basically asking for the price of a specific DeFi token. So here it's asking for the price of the Fox token and can be used in things such as structured products or bespoke financial contracts. And then the last one is asking, what was Boba's TVL in February of 2022? So this is used within these things that we call KPI options, which are essentially trying to tokenize arbitrary KPIs or metrics around certain protocols. So here you can create like a financial contract where the payout is actually determined by Boba's TVL in February of 2022. So this is really a reiteration of that with what we're actually calling the products. So prediction markets are good use case bribes.
01:03:15.430 - 01:04:21.690, Speaker D: Optimistic governance is one thing we didn't talk about, but basically we have a set of contracts where you could ask the Oracle, does this arbitrary transaction follow a set of off chain rules for a Dao? And if it does, it allows it to be executed. And then KPI options we briefly covered, and then synthetic assets is like a pretty simple use case, but basically tokenizing derivatives based off the price of any real world thing. And then the fun stuff. So, prizes we're giving out 10,000 total dollars, $5,000 1st place, 3000 a second, and 2000 a third. We have a link where we give a more in depth explanation around the criteria associated with it. But to really distill it simply, it's basically the best use case that integrates Uma's optimistic Oracle. We also are hiring extensively.
01:04:21.690 - 01:04:50.790, Speaker D: We have a referral program. So right now we're hiring for a product lead, front end engineer, smart contract engineer. So if you're looking for jobs and want to apply, please do. We also have a referral program. So if you have friends that are interested, you can make money off of that. If you follow that QR code, it links you to our referral program details and yeah, thank you. Here we have some resources.
01:04:50.790 - 01:05:17.140, Speaker D: There actually should be more than that, but we'll publish these slides afterwards that link to our docs. The quick start tutorial that Nick went over. Within the docs are tutorials that go through that quick start tutorial and the example contracts. And then we're all here for the next few days enjoying this experience with you guys. Thank you.
01:05:21.510 - 01:06:15.460, Speaker C: Are there any questions? Yeah, so the question was not just that anyone can propose an answer to a question. Actually, anyone can propose an answer to a question, but you just have to stake a bond. The bond keeps you honest and disincentivizes you from just spamming answers. So you'd post a bond that's usually much larger than the reward, but anyone can propose an answer. Anyone can also propose a bond and challenge you. And if someone challenges you, the answer goes to a vote to the Uma Oracle, at which point there's no further escalation and the Uma Oracle will just resolve the question. Yep.
01:06:15.460 - 01:06:48.140, Speaker C: So the voters which are Uma holders are paid in Uma to respond to votes, and they're paid if they vote with the correct answer. So think about participating. Voters who vote correctly earn a relative, they accrue a share of the network and it's sort of taken out of the it's diluted from the people who don't vote correctly or don't participate.
01:06:50.440 - 01:06:51.300, Speaker D: Bond.
01:06:59.760 - 01:07:14.310, Speaker C: Cool. Thank you. Thanks for coming.
01:11:41.740 - 01:12:15.750, Speaker A: So I think we're going to be good to get started here, just a quick session. What we're going to be doing is just kind of going over the basics of what Pocket Network is and how you will very likely want to use it in your application. So I think we can just get right into it. So let's start off with the basic kind of what is Pocket Network? So in short, Pocket Network is a decentralized RPC provider. And yeah, I think we're good. That's kind of all we have to say. No.
01:12:15.750 - 01:13:38.620, Speaker A: So what exactly does that mean in the Ethereum network? There's kind of two ways to get your transaction out there. You can run a client and then broadcast the transaction to the network through the client, or you can send a request to a node that offers some form of RPC service. And so when we ask what a client is, some examples of those are mining nodes in ETH. One validator nodes in ETH, two things that are called full nodes, which is the blockchain in the most 128 recent blocks, archival nodes, which is all the blocks in the history of ethereum. And so what exactly does it take to run a node? What this means is you need a machine that can be on 24/7. Is that an old computer? Is that something like a raspberry pi? Is it a rack server? Is it in the cloud? On top of making sure it's on, can you get to it securely? Can you figure out how to scale it if you need more than one? There's a lot of work that goes into this process that's completely unrelated to smart contracted development. And if you're not coming in as someone with a solid DevOps experience, this is a really tough barrier to get over if you want to start using your application in production.
01:13:38.620 - 01:14:41.760, Speaker A: But wait, isn't this what light clients are supposed to do for us? And it would be great if they were here, but unfortunately you can't really run a light client in a web browser today, and so it's because that client still needs to actually talk to the chain. And there's a lot of complex behavior that just can't be done yet. And so incomes RPC service, and this is what MetaMask uses and ledger smart contracts use this. And so does Trust Wallet and Guarda Wallet and Myether Wallet, and basically every web based DF that you've ever used. But what exactly is that? And RPC itself stands for Remote Procedure Call. What that is, is the messages go between the network through JSON nodes expose it over http https, and so you can talk with it as you would any other standard web application. And it provides the lowest technical barrier of entry for people building apps that work with the blockchain.
01:14:41.760 - 01:15:46.580, Speaker A: Almost everything can go through JSON https. So if you can write a traditional web two app that uses JSON http, you can start building smart contract interfaces. And who handles this? Is it the miners? Which will be validators eventually? Is this what Gas pays for? And the reality of that's, no, miners and validators can choose to serve RPC service, but there's nothing that's obligating them to do so. And so what this means is there's no on chain incentive for nodes to actually serve RPC service to the network. So while there's incentives to keep the blockchain data valid, there's no way to incentivize that the blockchain actually provides service in the way that every application uses it. Today, some of the solutions for this private entities have really stepped up to fill this space. Some examples of these are infura Alchemy Anchor, and these are great products.
01:15:46.580 - 01:16:38.440, Speaker A: They make blockchain development super accessible, but they're centralized, and they all require monthly fiat payments to keep that DApp open. Typically, the only solution for contract developers who don't want to do this is to stand up their own servers until Pocket Network comes along. Pocket Network is an independent blockchain that runs on the Pocket token node. Runners earn that pocket for serving those RPC relays, and apps can stake up Pocket to get that RPC access. It provides a utilitarian market for this infrastructure, and it makes RPC permissionless and decentralized. This all sounds neat and all, but how does Pocket actually help you as a developer. And so a big thing is you have less risk from outages.
01:16:38.440 - 01:17:17.552, Speaker A: Pocket nodes run in a variety of configurations. There's people who self host physical machines that they actually own. There's people who cloud host AWS, DigitalOcean, all of those standard providers. There's people who rent direct hardware through OVH, IBM, Cloud, Bare Metal. Basically, if any of these big services goes down, there's an entire other swarth of nodes out there ready to pick up that service. Another big advantage of Pocket is it allows you to own your access. What do we mean by that? It means once an app is staked, that rate is locked in.
01:17:17.552 - 01:17:59.676, Speaker A: And as long as that app remains staked, there will be some guarantee of service. This means for app developers that you don't have to worry about monthly billing. You can't accidentally run up a giant cloud bill and you could actually recoup some of that initial infrastructure investment by unstaking and selling that when you're done. In short, with Pocket Network Web Three, infrastructure becomes an investment and not a cost. So let's actually get started getting free access here. So the portal is an application that we've built on top of the network. We have a link through today's event that gets anyone wanting to build on us free service up to a million daily requests.
01:17:59.676 - 01:18:38.110, Speaker A: It gives developers the same kind of user experience that they have if they were using a previously centralized option. It gives them that dedicated URL that they expect. It gives them the security configuration options to keep that contract and endpoint safe, as well as dashboards about actually watching and understanding what's going on and who's using your infrastructure. And it keeps you alerted in case you are approaching your limit. And again, that free tier that we're offering gives you a million daily relays. And so this is where you go. This is the URL will take you to here.
01:18:38.110 - 01:19:30.648, Speaker A: You sign up, get registered, and then creating an app is as simple as heading over to apps, typing in the name, launching the application, and then URLs are available and you're ready to roll. There's the option of setting up security that allows it so that you can protect who actually can access that endpoint if you don't want to make it public. And there's ways to set up the notifications. That way you'll be sure that you're not going over your service limits. So how do you use it? We'll get started with just your basic solidity development environments. So in hard hat, if you're in your hard hat config JS, it's as simple as using the pocket network URLs from the portal in place of where you are. So for example, the mainnet is the main net URL that you would get from the portal.
01:19:30.648 - 01:20:12.684, Speaker A: We have Robston and Rinkby and Gorely and COVID and Truffle. Looks very similar. You're doing is plopping the URL in where you would previously plop something else. In and you're good to start deploying in your build environments across testnets and mainnet with Pocket Network instead of any centralized option. On top of this, you can also use this in Remix if Truffle and Hard Hat are a little too in the weeds. So if you go to the Deploy and Run tab of Remix, you have an option here of select a Web Three provider. And then after you select that, it's as simple as putting the URL into that box and clicking OK.
01:20:12.684 - 01:21:05.066, Speaker A: And you're running in Remix with us as well. What about now if you're using it in JavaScript? So in Ethers, it's as simple as using the JSON RPC provider with that URL and you're ready to roll. Web three JS very similar. You can instantiate the Web Three provider just with that Pocket Network URL and you're ready to start gaining service using US in Python again, it's going to start to look really similar. Just drop that URL in and you're ready to roll. On top of that, you can use us in ways if you're not just a DAP developer. MetaMask gives people the option to use their own RPC and Pocket Network provides a variety of public RPCs for people to use.
01:21:05.066 - 01:21:56.940, Speaker A: So if you go to MetaMask in your networks, you can choose to add a network, give it a name, and then you're free to use the Pocket public RPC. And now your MetaMask is also decentralized, so if Infuria goes down, you still have access to the service that you expect through MetaMask. And you can repeat that for any of the chains we use right now we have just a subset of chains that we have public RPC for. The full list is available on our docs for anyone interested. On top of that, what's so great is Pocket can be used for cross chain and MultiChain uses. So the same application that you register in the portal not only gets you access to the Ethereum main net and testnets, but as of now, up to 50 other chains. So for example, let's say you wanted to use Polygon and ETH in the same application.
01:21:56.940 - 01:23:03.872, Speaker A: It's as simple as taking the URLs, throwing them into providers, and you can get the ETH block number and the Polygon block number just as easily. And the full list of supported chains we have available at the docs. And for anyone interested, this QR code here will take you to a link. If you register and use us, you're you're set up to start getting going with 1 million daily relays. Thank you. Any questions? Yeah. So this whole focus has been about how Pocket fits into your from the perspective of an app developer, but the network itself, what it is, is the app developers actually have the ability to get service from a network of independent providers.
01:23:03.872 - 01:23:58.280, Speaker A: And so those providers, when they successfully provide service to an application who requests it, are rewarded with that pocket token so they would all be pocket still. Yeah. So how it works is that pocket itself is its own blockchain and that blockchain is used to validate that nodes are servicing applications correctly. And then the native token of that blockchain pocket is what's used to distribute the rewards? No, not currently. It's based off of tendermint, based off of the Cosmos tendermint system. The underlying chain. Yeah.
01:23:58.280 - 01:25:02.860, Speaker A: So when people run pocket blockchain nodes themselves, what they do is they configure that pocket node to point to instances of nodes that are running on other chains. Those other chains nodes don't have to be validators. They just have to be able to provide essentially the data and write service the read write from that layer. So it would be like running a node but not validating on it. Yeah. So the pocket network sits on top of those RPC nodes to provide some incentive mechanism to do so. Anything else? Yeah, go ahead.
01:25:02.860 - 01:26:34.670, Speaker A: Yeah, so there's options to do so. The underlying mechanism is that that native token is staked, not necessarily paid. So there's features coming out to help us with bringing that out in ways that make the experience easier for those who don't have liquidity in the native token. But yeah, it's not actually spent is the core difference there. Well, everyone holds that stake and then everyone who is servicing continues to earn rewards while the apps that are staked don't earn anything. That it's essentially locked is probably a better term. So it's locked up in a way that they can't access it, they can't build on it, while those who have locked up tokens to service continue to earn rewards for doing so.
01:26:34.670 - 01:26:46.080, Speaker A: Awesome. Thanks everyone.
01:27:01.390 - 01:27:02.380, Speaker B: Thank you.
01:27:03.710 - 01:27:04.700, Speaker A: Yeah, absolutely.
01:27:15.710 - 01:27:20.770, Speaker B: Thank yeah. Funny trailer.
01:28:46.380 - 01:28:47.130, Speaker A: Um.
01:28:49.900 - 01:30:41.670, Speaker B: Oh my God. I know, I know. I lost. You guys waiting for a ticket.
01:30:46.560 - 01:30:47.310, Speaker C: Okay.
01:30:50.130 - 01:31:07.890, Speaker A: I have not. Are you guys working all night earlier?
01:31:08.050 - 01:31:09.510, Speaker B: I can't believe, honestly.
01:31:15.640 - 01:42:49.420, Speaker A: For Login? Yeah. First of all, I was. Yeah, I did. Long time to get 110.
