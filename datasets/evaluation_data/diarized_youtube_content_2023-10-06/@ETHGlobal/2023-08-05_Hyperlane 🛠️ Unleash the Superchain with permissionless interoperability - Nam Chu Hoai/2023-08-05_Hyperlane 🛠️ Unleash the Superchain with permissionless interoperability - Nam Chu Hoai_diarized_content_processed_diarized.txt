00:00:03.890 - 00:00:05.190, Speaker A: Look at all those otters.
00:00:26.000 - 00:00:37.630, Speaker B: Hello everyone, and welcome to the SuperHack Hyperlane Workshop unleash the superchain with permissionless interoperability. Joining us today is Nam, who will be taking us through the session. And with that, I'll pass it over to Nam to get the session started.
00:00:39.920 - 00:01:03.930, Speaker A: Cool. Thanks, Rory. Yeah, so, like Laurie said, my name is Nam. I'm one of the founders here at Hyperlin. And, yeah, very excited to be participating in SuperHack. We've been big fans of Global in general. So if this is not your first if global hackathon, you probably have seen us around.
00:01:03.930 - 00:02:02.810, Speaker A: If you will be participating in one of the upcoming ones in either New York or Istanbul, we'll be there as well. But yeah, I think for today, we really, like, always been enjoying these kind of online hackathons, scaling ethereum last time around. And there's always been really cool hackers and projects kind of coming out of these hackathons. So, yeah, looking forward to that for this one. Right? We'll be talking about SuperHack, which is kind of in the theme of the Op stack and the super chain. And so we felt like apart from a very, I think, generic maybe kind of like workshop that maybe we would do normally, we would want to focus on how we as hyperlane or how attackers using hyperlane can kind of unleash the superchain with what we call like modular or permissionless interoperability. All right, sounds good.
00:02:02.810 - 00:03:05.504, Speaker A: Yeah. So let's start with what is the superchain? So this is the agenda we'll talk about what is the superchain, what is the current state of Op stack interoperability. And I will go into what's hyperlain and why it might be interesting for kind of the superchain and by extension, for folks who are hacking at SuperHack. And so I hope this is not news, but, you know, kind of who's participating for the first time here, right? But Optimism Labs has kind of built the Optimism chain and the stack that they're using to kind of deploy that chain. The initial kind of chain is called the Op stack. And I think since the creation of that Op stack, there's been a lot of interesting folks who have kind of used that stack to deploy their own chain. And so most recently, probably most noteworthy as well, is Base Coinbases l Two, I think.
00:03:05.504 - 00:04:44.508, Speaker A: Zora Public Goods Network by Gitcoin. I think there's a lot of interesting examples of folks kind of deploying their own roll ups for the applications and kind of making certain modifications either technically or culturally, kind of like to basically customize, I guess, the blockchain or the roll up to their needs. And I think superchain is kind of this concept. I think that Op Labs and various folks using the Op Stack have been kind of trying to rally around as this kind of vision for how Op Stack chains kind of together can make this more cohesive network and ultimately scale ethereum vision further. And if you're more interested in kind of what exactly that means and how let's say the Op Labs folks have been thinking about that, I highly recommend going to their website. But one of the things, obviously, that this kind of vision of this kind of network of chains requires is interoperability between these chains, right? Let's say if you had Gitcoin, if you had Zora on Ethereum, those contracts were able to interact with each other because they were sharing the same VM, right? They were able to make calls to each other, compose with each other. And that is something that now that these are technically different blockchains is something that you need an interoperability protocol to kind of allow for messages to be sent between these applications.
00:04:44.508 - 00:06:14.040, Speaker A: And so I will quickly go through the current state of Op Stack interoperability operability. Basically, how does Op Stack communicate with, let's say, the l one? And to be honest, the current state of OpSec interoperability is not super great, right? So, one, you can really only use the contracts that do PSEC has primarily the cross domain messengers to send messages between the L One, which is obviously Ethereum, as well as the L Two, the chain that you're deploying. So either optimism base, there's no way really, if you have an application on base on Zora for those to connect to, you have to technically kind of like send it back to Ethereum, wait seven days, and then send a message back up to the other L Two. And I think the op labs folks are kind of like on the docs. Are recognizing that to ultimately Extend a Super Chain vision, there needs to be this ability to Do Cross chain transactions that are faster than that kind of seven day period, but also allow for, again, not Just Like, faster to L One, but also faster to Other L Two. S. I think the second thing that we saw last week is that there's actually no out of the box UI for the standard bridge for Op Stack deployers.
00:06:14.040 - 00:07:02.172, Speaker A: Let's say if you deploy a new Op stack chain, you actually have to figure out how to build a UI that kind of allows users to, let's say, deposit USDC on the L One standard bridge contract to ultimately receive USDC on L Two. And then the other way around, and then even there was UX is kind of rough and we'll go into exactly why that is the case. So again from l one to l two. It's actually pretty simple. Right here on the right side, you can see the diagram. Basically the user calls the bridge USC. 20 contract on the L one standard bridge, which ultimately calls the cross domain messenger on L One, which the sent message function that ends up calling the optimism portal with the deposit transaction function.
00:07:02.172 - 00:08:27.640, Speaker A: And that kind of emits a deposit transaction event. And then because a rollout is literally rolling up over l one states, the rollout will ultimately kind of have a virtual deposit transaction transaction on optimism or on the l two, which calls relay message to the cross main messenger, which itself will basically call finalized bridge ERC 20 on the l two standard bridge. And that's how basically you get kind of this synthetic USDC, let's say, on optimism, because you deposited the USDC right on ethereum as collateral. And so this actually is pretty nice, right. The user initiates only a single transaction on the origin chain, and the message is automatically processed kind of like as part of the rolling up over l one state. And so you have kind of like full security, right? Like, there's no kind of additional trust assumptions beyond just the normal roll up trust assumptions that you have. However, sending from l Two back to l One looks a lot more complicated, right? So today, what you have to do is as a user, you call the bridge ERC 20 contract sorry, l two standard bridge contract and the Bridge ERC 20 function with the synthetic USDC that you have, right, that will basically burn the USDC on l Two.
00:08:27.640 - 00:09:51.216, Speaker A: It will send a message to the cross domain manager, which itself will kind of call initiate withdrawal on the L two to l one message passenger. And that basically writes this particular message to storage on optimism L two. And so at some point later, I think usually the docs say it could be up to an hour later, the proposer actually proposes the state route of that l two onto the l two output Oracle contract on l one. And that's right where anybody depending on the configuration of the contracts, somebody could basically contest and submit a fraud proof. Effectively of like, hey, the statement wasn't actually the case, but let's kind of just assume optimistic case a proposer proposes a valid state route, then we as a user, we can make a second transaction called proof withdrawal on the optimism portal. And for that, we basically check the merkel proof on the we attach a merkel proof to that transaction, which basically proves our particular message in the storage slot on optimism. And optimism portal is basically able to check that merkel proof against the L.
00:09:51.216 - 00:11:01.092, Speaker A: Two output Oracle. And once that is the case, the optimism portal will basically kind of have this pending withdrawal, right? We'll rate the famous seven day period to make sure that there were no fraud proof submitted in that time period. And then after that, the user has to initiate this third transaction to ultimately finalize the withdrawal, right? And that will ultimately call relay message on the l one cross domain messenger, which will call finalized bridge ESC 20 on the l one standard bridge. And that's what releases the USDC to the user, right. We said it's a little bit rough of an experience because there are three transactions over a period of seven days. That a user has to manually submit. Developers have to make UIs, have to create tooling using the SDK that is provided to allow users even actually to do that, it relies on the proposer, usually a single EUA to actually propose these state routes.
00:11:01.092 - 00:12:21.356, Speaker A: And so there's kind of like life misconceptions on that. And then probably the biggest thing obviously still is the fact that you have to wait this seven day challenge period for Tokens. But ultimately any message to kind of make their way from L Two to L One that's I think a pretty rough experience and I think a reason for why many users never actually end up using the kind of like canonical bridge, right? But actually use third party systems like things like pop across, connect to kind of actually bridge. Let's say even USDC around. And so we think that's great. And for this and many other reasons, we've worked on Hyperlain, which is basically a more generic interoperability protocol allowing any chain to be connected to any other chain. And so I will quickly go over what the kind of flow looks like in Hyperlink and ultimately how that might be beneficial to the superchain and how you hackers here at SuperHack can kind of improve the number ability of the superchain ultimately.
00:12:21.356 - 00:13:29.050, Speaker A: So the basic master flow looks actually fairly similar, right? So basically, we have these contracts called mailboxes on every chain that Hyperlink supports, that is both EVM chains, but can also be non EVM chains. And so there's a bunch of non EVM implementations that are about to go live. But for now, I think I'll just kind of for instructional purposes just kind of assume the EBM. But basically, we have mailbox contracts on both chains right, and as a sender. And, like, for example, the L one standard bridge in the kind of, like, op stack token bridge context can just call the dispatch function with basically the destination, which is just like a chain ID, basically, of the destination chain, a recipient, the address of the address of the recipient on the destination chain. Right. So in that case it would be, let's say the L Two standard bridge contract and then the body which basically just kind of signifies, hey, mint this synthetic or release this collateral token right? There's arbitrary bytes depending on the application.
00:13:29.050 - 00:15:39.890, Speaker A: And yeah, basically we have kind of this system more into it called Interchange Security modules, where those are the contracts on the destination chain which the recipient can specify to ultimately say like, hey, under what circumstances do I accept messages? Under what circumstances do I believe that this sender has actually sent a message? And with that, basically you can relay that message to the mailbox and the message recipient will basically be called with this kind of handle function and then they can again do whatever they need to do with that. And so war browse are kind of like hyperlain's. Take on again the classic block and mint token bridge similar to the standard bridge in the Op stack where that's basically the collateral contract on, let's say, Ethereum which accepts the collateral that sends a basically like mint synthetic message via the mailbox to the hip ERC 20 contract on, let's say, any other chain. Let's say, in this case, your Op Stack chain. And basically that contract can again specify what security model it wants to use. And if it kind of accepts, which is what we call the Ism, the transaction submitted by the relayer is able to basically process the message to this contract, it will mint the synthetic token and then the same thing obviously applies and vice versa. And so the nice thing about warp routes is, for example, that we do have a out of the box UI, right? So let's say if you, instead of using the standard bridge use warp routes to deploy a token bridge between Ethereum and optimism, you are able to use other security mechanisms for kind of the withdrawal from optimism, right? So you could for example choose to either go through the canonical bridge but you could also choose to use a validator based system or use like staking or eventually there will be maybe better validation mechanisms like clients available.
00:15:39.890 - 00:17:28.144, Speaker A: And so the key piece here is that the warp brow by these token bridge contracts are sovereign to the issuer and so you can actually have custom functionality onto the token contracts themselves to again facilitate both things like securities and features. One of the things that, for example, we recently had a contributor work on is the ability for a token to be votable on both L One and L Two so that you could vote on L Two for proposal on L One. There's a lot of kind of cool extensions basically of warpouts that you could do and that's another offering that hyperlain has that kind of brings us to how can hyperlain improve super chain interrupt. And so actually there was a contribution last week by another contributor who kind of basically adds hyperlain as a pre deployed contract onto the Op stack, right? So basically, if you go to this repo and you deploy the Op stack using this fork, you automatically have the hyperlane mailbox contracts on both L One and L Two. And it modified the standard bridge to basically allow for certain configurable tokens to basically be withdrawn with a different mechanism other than the kind of like L Two output Oracle and therefore the seven day window. And because of that, because of users kind of the hyperlain mailbox system, it also benefits from this kind of relayer system where a user can just pay a relayer on the origin chain for this kind of processing on a destination chain. And so ultimately the user experience is that you only have to sign for withdrawal.
00:17:28.144 - 00:19:43.600, Speaker A: For example, you only have to sign a single transaction on optimism and you just pay an extra amount of ease so that you no longer have to submit these transactions on ethereum. And so it ultimately looks a bit like this on the standard bridge, instead of it calling the L Two cross domain messenger, it just calls the dispatch function depending on the configuration. But let's say it calls the dispatch function on the mailbox and then the relayer will basically kind of like relay that message to the mailbox. Again, depending on the Ism used by that particular token, the L One standard bridge will kind of get the handle call from the mailbox and then release the token to the user, right? And so that's where kind of the Ism piece comes in because you can part of again hyperlink kind of ethos is basically there's different security modules for different trade offs, right? So again, maybe for the ETH, right? Like yes, hey, it's like the most secure token on the roll up and so therefore you want this kind of very heavy system that makes sure that there's these fraud pools available and you have to wait seven days. But maybe if you are like a game and you want to take a certain different trade off you are able to specify a different Ism that is say let's say a multi SIG, right? Like it could be like let's say if you're on chain like maybe like Zora has kind of their validators that could be run and that would allow developers or token issuers to basically have withdrawals that are faster, that don't have to wait seven days. And obviously again, the security is different but there's no kind of single answer that we can think of and so that's why we want to support kind of like this generic modular interface to allow developers to pick whatever trade off they want to choose. You can actually also wrap the kind of optimism portal l Two output Oracle into an Ism itself and then again allow different tokens to kind of have different security mechanisms under the kind of safe interface.
00:19:43.600 - 00:21:18.216, Speaker A: What you could also do is you could actually move once you have this kind of like mailbox and modular interface you could actually move the canon fault prover as an Ism right? And so again, therefore allow tokens to selectively move into different proving mechanisms. We also basically have all the kind of contracts basically set up to support staking and permissionless slashing. So you could imagine folks basically validators, let's say in this kind of multi stake ism basically have an economic stake and if they ever lie about it, they would actually get slashed. And there's a cool kind of construction where actually because generally in hyperlain the stake can only be slashed on the origin chain. But because there is this kind of very secure canonical bridge that does exist from L Two to L One you can actually communicate the slashing condition over that canonical bridge to l One and have the stake live on. L one, which actually means that for restaking, for something like Eigen layer, you could have validators validate messages for multiple roll ups with kind of the same economic stake and therefore get higher economic efficiency. And then last but certainly not least isms are composable and so they allow you to basically aggregate multiple verification mechanisms, right, where you could basically say like hey, I want something super secure.
00:21:18.216 - 00:22:46.372, Speaker A: So I actually want both the canonical bridge but also this set of validators to agree on a message for me to consider it secure. And so these are kind of these what we call security Legos that developers can use to kind of ultimately adjust the trade off that they want to choose when it comes to sending messages between different chains, right? And in this particular case, let's say from L Two to L One. And so, yeah, so there's a lot of really cool, I think, opportunities here because I think the Op sector op has been so focused on the kind of, like, classic canonical bridge with the seven day fraud window that there's a lot of opportunity for you hackers here at SuperHack to kind of improve the interoperability of this Op stack. Right, we very much agree with, again, I think the super chain kind of proponents that this is the world we're going to be living in, right? There's going to be all these super chain chains that use the Pstac to deploy their own roll ups. But for that we just need better interoperability between all of these roll ups. And so here are a few ideas that I think we want to share with you guys. Certainly not kind of limited to this, but one thing that you can do is you can support the hyperlain Ism interface not just at the standard bridge level, but even lower at across the main messenger or even optimism.
00:22:46.372 - 00:24:16.176, Speaker A: Portal level so that you kind of have more like op stack native, I guess the OpSec native interface, but have this kind of modular security via hyperlink. Like I mentioned, you can kind of implement this kind of slashing where you have fast withdrawals via validators, let's say on a multi stake ism, but still have economic security attached to them because their stake kind of will be flashed via the kind of slower security mechanism of the canonical bridge. Other things you could do is I think if you've seen uniswap X, right, the kind of like uniswap take on cowswap, one inch fusion, they kind of explicitly talk about this opportunity for doing swaps cross chain or in our case cross roll ups. And so being able to basically have these settlement articles, you can implement them with hyperlain and therefore support kind of like native cross chain swaps. Even if you don't want to do kind of like, let's say like uniswap X style swaps, you could even still support moving tokens from one roll up to the other. So right now, again, the standard bridges are between the L One and a single L Two. But let's say if you moved, like, USDC to base, you can't directly move to USDC over to Zora.
00:24:16.176 - 00:25:51.780, Speaker A: And so one thing you could do is you could modify the standard bridge contract on L One to basically be able to kind of, let's say, collectively collateralize USDC on both base and USDC on base and Zora. And so that would allow users to actually indeed send USDC directly between roll ups. And so that's, I think, another thing that you can could because there's no, I guess, default UI, you could use the warp UI, the template UI that we have for our warp browse, and you could just modify them for the standard bridge so that folks can use that if they didn't want to kind of deploy the warp browser contract themselves. And then actually, one really cool thing as well that we have is what we call dynamic withdrawals, right? So let's say right now, I just kind of framed it as for a single token, you could just use, let's say, validator based security to do withdrawals. But actually, what's really cool is you could also do something along the lines of like, oh, withdrawals of, let's say, 100 USDC or less, which are basically smaller retail users. We actually support using the validator based mechanism. But for withdrawals larger than 100 USDC, we actually do require folks to kind of go over this kind of slower path, right? And so, again, that allows kind of for, I think, just better trade offs for people to actually use these bridges versus kind of relying on just like, I think, third party solutions to kind of support, say, token bridging.
00:25:51.780 - 00:26:33.492, Speaker A: And then the last two, I got kind of maybe more like application things. For example, you could bridge Zora NFTs to base with warp routes that we recently announced our NFT support on the warp routes. So that should be pretty easily done. You could just go on a docs and deploy these warp routes. And similarly, you can kind of take inspiration from, I think, two weeks ago when we announced this kind of like tally integration, where you allow to use warp tokens on the L Two to vote for proposals and L One. And so you can do something similar with, say, between PGN and optimism. I think that's it.
00:26:33.492 - 00:26:57.160, Speaker A: I think I'm surprisingly good on time. If you want to learn more, read our docs docs at hyplane XYZ join our Discord. Follow us on Twitter. You can follow me individually on Twitter under at Nombrad or at me on Telegram. Under the same handle. You can email me. We are going to be on, obviously, the global Discord as well.
00:26:57.160 - 00:27:45.864, Speaker A: But yeah, please do not hesitate to reach out. We are very active. We have pride ourselves to have great response times on our Discord as well as in person if you kind of come to New York, Istanbul the remainder of the year. And yeah, I think with the remaining time, I would love to take questions and go from there. All right, so first question I see from Julio, can we transfer tokens to Zora girly testnet and how? Yes. So like I mentioned, you can basically obviously use the default standard bridge contracts, right? And then you can use subject to this kind of seven day window. Or what you can do is you can deploy hyperlane basically to Zora, because hyperlain is permissionless, which I guess I haven't gone into.
00:27:45.864 - 00:28:36.600, Speaker A: But you can deploy hyperlane to Zora and then deploy what we call the warp route between Zora and Gurley. And that kind of allows you to have basically a token bridge that kind of isn't subject to the seven day window. And so for that, as I mentioned, I will link you to the relevant docs pages. Give me 1 second. Deploy and then deploying a warp route is here. And then Nicholas asked, in this function, can you explain what included in the body parameter? Can we pass the function you want to call destination contract. So at the base layer let me actually go back to the figma.
00:28:36.600 - 00:29:40.164, Speaker A: Basically, at the base layer, there is just kind of the arbitrary message passing. And so you as the sender and therefore receiver, have total freedom as to what you want to pass in the body parameter. Right. And so what you could do, for example, if you want to call something on a destination chain, you could just write in the body basically abi encode your function call, right. And then as the recipient, you basically receive that body. You kind of parse that abi encoded a function call and then the message recipient on the destination chain makes the call to kind of your desired destination chain contract. So that's kind of like one way to do remote function calls, right? I think if you are kind of on the existing chains that we have deployed on, we have this API called interchange accounts, like the Accounts API.
00:29:40.164 - 00:30:37.500, Speaker A: And that actually does it automatically for you, right? So you basically just specify again a call in a struct. Let me see if I can actually screen share that right here. Excuse me. So basically here you can call kind of call remote function and specify a bunch of calls and then actually the kind of hyperlink contracts will create you a proxy account on the destination chain which will make those calls on behalf of your sender contract. And so that's another way of kind of like doing remote function calls on the destination chain. So I hope that answered those two questions. I don't see any more questions that folks have.
00:30:37.500 - 00:30:43.500, Speaker A: Yeah, if there's any more questions, happy to stick around and answer them.
00:30:45.470 - 00:31:20.504, Speaker B: Yeah, if you want to just go ahead and take yourself off mute and ask questions. Feel free to do so. And yeah, if there are no more questions, thank you, nam for the great workshop and presentation and thank you everybody else for attending. So, yeah, we've got a few more workshops later today, but, yeah, hopefully everybody's super hack is started off to a great start. So cheers. Thank you all.
00:31:20.702 - 00:31:22.230, Speaker A: Thanks for.
