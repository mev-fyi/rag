00:00:00.170 - 00:00:02.190, Speaker A: Off the talk. Welcome, Nick.
00:00:03.010 - 00:00:05.246, Speaker B: Awesome. Can you guys hear me and see me?
00:00:05.348 - 00:00:07.294, Speaker A: Loud and clear. You're ready to share?
00:00:07.412 - 00:00:19.360, Speaker B: All right. And I'll share my screen. Okay. And this goes to full screen. Is this full screen or am I in semi full screen?
00:00:20.690 - 00:00:25.526, Speaker A: It's not a full screen yet, but if you do that, I'll just give.
00:00:25.548 - 00:00:30.600, Speaker B: You get this to full screen. Okay.
00:00:31.050 - 00:00:34.214, Speaker A: What you want to do is present instead of full.
00:00:34.412 - 00:00:35.014, Speaker B: Okay.
00:00:35.132 - 00:00:40.410, Speaker A: On the top right? Okay, let's see here the button on the top right.
00:00:40.480 - 00:00:41.466, Speaker B: There we go.
00:00:41.648 - 00:00:42.090, Speaker A: Yes.
00:00:42.160 - 00:01:20.966, Speaker B: Awesome. All right, so my name is Nick and I'm presenting for the Fuel team and we're doing optimistic rollup scaling. And I'll get into it because it seems like got a half hour. So let's do it. So yeah, today we're just going to be going through our fuel optimistic roll up. Sort of what it brings to the table what UTXO models can do in terms of scaling and throughput and sort of our take and approach on where scaling is headed and where we think we can add value to the ecosystem in the space. So just to dive right in.
00:01:20.966 - 00:02:22.918, Speaker B: So Fuel is a permissionless trustless layer two protocol for ethereum, for low cost, high throughput value transfer and exchange. And our main technique that we use is highly optimized optimistic roll up design. And our focus, which takes top priority over everything, is parallelism. So our designs feature sort of an approach where instead of designing for specifically the language down, we're designing for where we can get throughput up. And we think we can offer a lot of interesting benefits with minimal trade offs using this technique. And so far we've been doing pretty well. So before we get into too many details, we have one announcement we'd like to make from the Fuel team, which is that currently with some of our most recent tests and thanks to the Hubble project and Barry White hat, we were able to get 4300 CPS for transfers and swaps.
00:02:22.918 - 00:03:28.320, Speaker B: So we think this is a significant increase and it's definitely putting us at a high throughput advantage over a lot of different designs. The main thing to bring home here is that it scales on consumer hardware. So we even think we might be able to validate blocks even on mobile phones, validating these large 4300 TPS blocks. This is obviously more fun than it is realistic, but it's something to be said and just given the way that our validation computation works. So to get into what Fuel can do, because I think there's going to be more presentations on optimistic roll ups and more presentations on layer two and the trade offs. So we just thought we'd focus on what Fuel brings to the table and what it can do. So our current design features native color coins, so we treat ETH, ERC, Twenty, S and NFTs as sort of first class citizens within the layer two itself.
00:03:28.320 - 00:04:30.286, Speaker B: And this also falls into approach that we think layer one is still base settlement layer for all of these assets and base settlement for protocol design. But we think layer two is a good option to scale these assets. And so our focus is to bring a lot of throughput and scale to these assets and provide a service that can get you the most efficient scale. The second thing that we'd like to focus on is multi user transactions or partially signed transactions. So with Fuel we allow for a trustless exchange between two or many parties within a single transaction. And you can think of this as offering a way to do noncustodial order book exchange or even other models that don't even feature an order book. So it allows for a lot of off chain settlement and a lot of off chain exchange that you wouldn't normally get if your transactions don't allow for multi users and multi tokens.
00:04:30.286 - 00:05:38.522, Speaker B: So this is one really interesting aspect of using multi token UTXO model. So the next thing that we'd like to go over is a focus on the opern. So like some protocols like Bitcoin, we have an open oper for data and this allows for sort of arbitrary data blobs. And not only arbitrary in the sense that you can put any data there, but also arbitrary in the sense that they can be accessed or validated through our optimistic roll up contract and deployment on Ethereum. Which also means you can build other logic and realities around data posted on Fuel. So one application you could imagine being used for arbitrary data is something like decentralized Twitter where you're getting a sort of signed payload around data and then that's going on to eventually into an Ethereum block somewhere. And what Fuel is doing is sort of organizing, publishing and making the process smooth and efficient to produce this data.
00:05:38.522 - 00:06:38.426, Speaker B: So you can imagine a decentralized Twitter, you could imagine decentralized social networking or just anywhere you're officiating data using Ethereum and using our particular technique. So this is one really cool sort of aspect of what we can get done with Fuel right now. The second thing which we think is incredibly important both to the layer two ecosystem and to Ethereum more broadly, is hash time lock contracts. So Ethereum has actually been able to do these since Mainnet was launched. And hash time lock contracts are a very simple mechanism to allow for cross chain atomic swaps, to allow for immediate withdrawals out of different D Five protocols or different layer twos. And they allow for migrations as well. So they're a great tool for migrating from one version to another, say your own roll up.
00:06:38.426 - 00:07:15.062, Speaker B: So, to talk about this a little more, the hash time lock design is quite simple. It just allows for parties on both sides of a blockchain reality. So say one party on layer one and one party on layer two to be able to exchange in a way that allows the party on, say layer two to easily exit to layer one. And you're doing that with just a hash and release function. So it's very simple, very simple contracts. It can be made relatively efficient and allows for bridging of these different protocols. You could also imagine bridging different layer ones.
00:07:15.062 - 00:08:08.034, Speaker B: So going between say, ethereum and going between avalanche or going between ethereum and going between xdai hash time locks provide a really great way to do this. And you can also imagine going between different optimistic rollups. So going between say, Fuel and optimism or optimism and Arbitrum or Arbitrum and Fuel. So hash time lock contracts give us a lot of utility and they allow us to sort of jump chains where liquidity is available. So we support those natively and we support them across every token that we have. So the next thing that Fuel has a pretty big focus on is mass token airdrops. So Fuel supports pre signed transaction chains and this allows us to actually form interesting pattern using our eight input in eight output transaction formats.
00:08:08.034 - 00:09:13.930, Speaker B: So essentially you can start with a single input in say a deposit or a large amount of liquidity from a single input or deposit. And then effectively we can use that single deposit in a transaction chain and sort of merkleize that or it's like a merkel tree and pre sign trees for dispersal. Such know, users in the hundreds of thousands could be dispersed a transaction and you would only need to pay for the transactions that are getting picked up. So this allows for a unique pattern of dispersal and pickup for mass token airdrops. So we saw something similar with the uniswap AirDrop which was really awesome. And this is sort of an extrapolation on that and a more unique or efficient way to do a similar thing. And per pickup you can imagine with a merkel tree of several depths, a single pickup might cost three or four transactions, but in the end everyone gets to disperse their tokens and it's all relatively efficient.
00:09:13.930 - 00:10:30.914, Speaker B: We've proved this out in our benchmarks which are available in our docs, so you can check that out there. So, going on to our next thing. So, pre signed transaction chains, once again we also allow for an interesting pattern where presigned transaction chains can be used to do things like digital subscriptions. And so effectively you can assign say twelve months of worth of transactions ahead of time using a single output and then only under certain pretenses or under certain circumstances, those transactions can be triggered on chain and then dispersed to whoever you're subscribing to. So this use case was referred to in the Reddit challenge and it was also something we were able to achieve quite easily with pre signed transactions. And so this is just another use case for having this kind of tech inside of our roll up as well. One other interesting aspect to having an eight input in eight output transaction format is that if you want to approach something like a privacy mixer, you can do all sorts of interesting mixing patterns.
00:10:30.914 - 00:11:30.700, Speaker B: And we already have a project that's researching and experimenting on this, largely because as well, Bitcoin is just so damn limited that in order to experiment with the UTXO model, we're sort of the next best thing for them. And so you can imagine scenarios where you want some level of privacy. And obviously, you're not going to guarantee full privacy. You're not going to guarantee something like a bulletproof kind of level privacy. But what you will guarantee is that you're making it much more difficult for, say, your friends or local businesses or other things around you to be able to see into your transaction history easily. And I think this is one great aspect of having this as your base transaction layer, is that you can kind of get this sort of activity done. So, in terms of our timeline and how much time do I have left? Do I have 15 minutes left?
00:11:32.510 - 00:11:33.514, Speaker A: Yes, you do.
00:11:33.632 - 00:12:42.400, Speaker B: Okay, just check in on that. So, in terms of our timeline right now for Fuel and our optimistic role of releases, right now we're targeting mid Q Four for a version one main net launch, and that includes all of the pre signed transaction tech, some really nice deposit and withdrawal tech as well, lots of all the different features you saw today. And basically it'll open up the field a little bit for our type of execution model and sort of add more to the roll up space. So that's our current main net launch, and it sits around 500 TPS in terms of throughput, which is still pretty good considering you're not using any new key formats. So it's just vanilla ethereum keys, and it should allow people to get a taste of what Fuel is about and why we're taking the approach we're taking. So that's our current main net launch timeline is around mid Q Four. So it's coming up.
00:12:42.400 - 00:13:34.130, Speaker B: Our next major drop will be the end of Q Four. So this will feature our version 1.5 testnet. So this is where we'll be able to really turn up the heat and kind of achieve our highest throughput that we can think of right now, which is 4300 TPS. And so you'll see sort of our compressed transaction formats, the use of BLS, and once again, thanks to the Hubble team and Barry for all the work they've been doing on BLS, it's been fantastic. And I think we're looking to make sure we have some kind of standards around that key format so that every optimistic roll up can benefit from the same kind of key format and we can kind of get rid of those signatures. So that's going to be our end of Q Four and then Q One 2021.
00:13:34.130 - 00:14:23.540, Speaker B: We'll have our specification lined up for our virtual machine, which I'll talk about in a second. And then lastly a testnet for our version 2.0 release. So that'll feature, hopefully if we can hit all our targets, a new virtual machine specification for Fuel which provides some nice abstractions over all the things we want to get done in the optimistic roll up context as well. It'll also feature how we get it done in parallel with mass throughput and in a sustainable way. So hopefully we'll get to that testnet release so long as we hit all our targets and don't have any huge major setbacks. So just a small word on our version two.
00:14:23.540 - 00:15:13.380, Speaker B: So currently our version 2.0 is focused on UTXO based Ethereum style smart contracts. So we're still finalizing our specification for a virtual machine here, but effectively it'll provide one of, if not the most performance options for doing parallel transaction verification and particularly without global state. So we've constantly made an effort to avoid global states and global state serialization. And so this really gives us a lot of opportunities for really efficient, really performant design patterns. And you can look at John's work on strict access lists and UTXO smart contracts. It's the link below there if you want to read more about what we're doing there.
00:15:13.380 - 00:16:31.180, Speaker B: We really think given that the space has a lot of or will have a lot of EVM oriented and account oriented options for people to attempt to scale their work and their efforts. Still, using Ethereum as a base officiation layer that UTXO based transactions will provide a huge throughput benefit. And hopefully we'll be able to really demonstrate that with a full virtual machine basically without losing pretty much most of everything that everyone loves about the EVM and about Ethereum but with also providing all the benefits of parallelism with minor trade offs. So just to talk about where to find us. So our Twitter is Fuel Labs underscore website fuel sh GitHub and a discord link there. So yeah, we purposefully left I think, quite a bit of time for some questions and to go back and forth. I think we're pretty curious to see what people want to ask in terms of questions and how we're doing things and yeah, we can probably start that.
00:16:35.710 - 00:16:36.890, Speaker A: Thanks Nick.
00:16:37.230 - 00:16:37.980, Speaker B: Awesome.
00:16:38.590 - 00:17:14.966, Speaker A: I think from our side, given the slight delay in the stream being looked at, our audience have a delay coming in with a question. So I'll urge all of our audience to send questions as we are kind of talking. In the meantime, I think what will be super helpful for us is that we'll do is all get us started on just kind of comparing fuel to the other roll up approaches, kind of how do you think about what the trade offs are and sort of what's good or bad about the trade offs for each of the other solutions out there? I mean, we can just do that until we get more questions in.
00:17:15.148 - 00:18:33.120, Speaker B: Yep, for you know, from the beginning we decided to go the route of the optimistic rollups. Our expertise is more around fraud proofs and optimistic roll up design and that's thanks to John's efforts on the team. And so that's the first thing is we're an optimistic roll up, not a ZK roll up. And I'd say the main thing we think about there is that we like the properties of the fraud proofs and the one week delays and we like those trade offs over CK related trade offs and we think we can really achieve high throughput and block production without really losing much for security and for user experience. And thanks to the efforts of Barry and the foundation, we get to benefit from aggregate signatures and aggregate signatures allow us to get rid of that troublesome signature data, which really is where you're going to get the maximum amount of savings. So for us, yeah, I think our main focus versus the ZK roll ups is that we focus on aggregate signatures and we don't mind the trade offs of fraud proofs. We do think they're as or more secure in that sense.
00:18:33.120 - 00:19:33.554, Speaker B: And once again, you can do block creation validation on easy consumer hardware. So it's really accessible and democratized. And then in comparison, just to quickly touch on it from the other optimistic roll ups, I'd say our main focus is that the other roll ups right now are focused on servicing what Ethereum currently is. And I think that's awesome and we need that kind of work. But for us we're taking sort of a different approach where we think we can add a lot of benefit by showing people sort of another generation of what's possible and potentially trying to approach the problem from bottom up, so approaching it from parallelism up versus code and compiler down to what's possible. So that's more or less, I think, the differentiating factor for us and it's a different kind of work and it's a different kind of approach. But once again, we're really happy with the way the ecosystem is developing and we're super excited for all the launches coming up.
00:19:33.554 - 00:19:36.980, Speaker B: I think the space is really developing and we'll have lots of options.
00:19:37.510 - 00:19:53.660, Speaker A: Awesome. So we have a couple more questions that have come in, so I'll kind of just start asking them until we're at time. Next question is what other features besides TPS are most important when designing a roll service and sort of what other things should we be excited about.
00:19:54.270 - 00:20:57.678, Speaker B: So I think when designing these roll ups, I think you want to really focus on your use case and what we need from the user perspective down. So if the user needs cheap transactions and they need it to be noncustodial and whatever the user needs, we should aim to provide them with. And I think we have a lot in the ecosystem, especially if you think about stablecoin access that we have to me, stablecoins and lending protocols are still the hugest value add we have in the space. And I love all the fruit coins and everything, it's great. But if we can really scale and provide a lot of throughput and exchangeability in various formats for users, particularly of those stable coins, I think that's like one of the greatest benefits we can add to the world. So for me, I would just say with roll ups you should design them around specific use cases and try to target them specifically to what users need. It's that simple.
00:20:57.678 - 00:21:01.310, Speaker B: And if we're making that process better, then we're doing our jobs.
00:21:02.050 - 00:21:25.382, Speaker A: No, it's great. I think this kind of sparks another question, and really fits nicely into it, is if you're imagining a world where there are use case specific roll up services, how do you kind of think about solutions that help you do cross layer two transfers in kind of anywhere from frameworks to best practices? Or how should one think about that, and how do you imagine that world panning out?
00:21:25.436 - 00:22:50.750, Speaker B: Yeah, so I think that's going to be one of, if not the most important questions over the next year or two is what the hell is going to happen with liquidity and where is it going to go and what is it going to do? So I think we should look at ethereum layer one as still base settlement layer for issuing assets and for creating your protocols. I still think it gives you the maximum amount of options, but in terms of having liquidity on different systems, I think we should be open to once again really available hash time lock contract swap systems between these different systems so that we're not too locked into anything. This goes for being locked into not only different roll ups, but being locked into different versions. So we will need easy ways to transit between different layer twos and layer ones. And so HTLCs provide basically all we need and I think even state channels might even give us even another level of speed there if we can do it right. So I think hash time lock contracts are just a way to free us from these liquidity questions and we can just get on with experimenting with where development is going to go across the different layer two s and layer ones. Because right now it's so early that if we lock up a lot of liquidity on anything, it'll either want to get off or it'll have to get off eventually.
00:22:50.750 - 00:22:58.210, Speaker B: So I think we'll just touch and go and we'll see know things like hash time lock contracts can bring to the table.
00:22:58.370 - 00:23:25.870, Speaker A: Yeah, got it. And we have another one. And if you don't have enough context, I'll ask Samuel to expand. But if you do, I think it'll be great for the audience to get some context too. And the question is, what do you make of the capital efficiency argument that was put forth by Starquare and kind of what do you think about that? And for the audience, if you can also just tell us what that argument is by Starquare before answering that, that'll be great as well.
00:23:26.020 - 00:23:40.494, Speaker B: Yeah, I have to say I just briefly skimmed that. So I don't know if I have a huge depth yet. I just saw that today. I'm currently off Twitter. No worries getting off the Hype.
00:23:40.622 - 00:23:52.178, Speaker A: You don't have to directly answer that. We'll follow up with a different question there. And the question is how does delayed finality affect composability and how long would it take for fuel or any other layer two to kind of help solve.
00:23:52.194 - 00:24:56.822, Speaker B: This so not to drag again? And I seem to keep talking about HTLCs, unfortunately, but yeah, with the optimistic roll ups, the trade off is that you can do smart contracts, you can aggregate the signatures and you can get all the throughput you want and you can do it whatever way you want. And you can do that on consumer hardware generally and without needing ZK proofs in any way. So you get a lot of benefits. The trade off is that there's a week time delay to remove your assets if you don't have regular access to HTLC liquidity. But the thing is, to exit these chains, you just need any party on Ethereum or any party on any other layer one, to be sitting with some liquidity and running a liquidity provider which they'll make fees for and that will be able know basically solve that issue, in my opinion. I think it sort of optimistically solves it, but it's a fantastic solve and it sort of gets the job done from what we can see. And we'll just have to see how it plays out.
00:24:56.822 - 00:24:58.486, Speaker B: Yeah, awesome.
00:24:58.668 - 00:25:05.020, Speaker A: Well, Nick, thank you so, so much for your amazing talk and answering all of our questions. I'm sure there's a lot more questions.
