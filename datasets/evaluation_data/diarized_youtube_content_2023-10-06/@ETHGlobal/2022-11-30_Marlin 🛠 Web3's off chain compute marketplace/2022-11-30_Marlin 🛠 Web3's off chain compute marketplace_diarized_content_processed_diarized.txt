00:00:07.530 - 00:00:58.990, Speaker A: Hi, thanks for tuning in. In this presentation, I'll be walking you through the different features and use cases of Marlin and how you can offload intensive compute onto it to build secure and scalable decentralized applications. The flow of the presentation is as follows we'll start with a brief introduction to Marlin. We'll quickly skim the different services that the Marlin network provides, and this will be followed up by some example use cases which might even inspire your project. Once you have an understanding of the capabilities you have access to when using Marlin, we'll walk you through some tutorials for using some of these features. Specifically, using Marlin for privacy preserving or confidential computing offloading the operation of backend services onto a decentralized network, as well as outsource proof generation for ZK applications. Finally, we point you to some appropriate resources and channels to further your exploration.
00:00:58.990 - 00:02:16.310, Speaker A: Mullen, in short, is a network of nodes that make their hardware resources available to users under a PRGO model. These resources can include anything from a vanilla service to trusted execution environments like Intel, SGX or AWS, Nitro Enclaves, GPUs or even FPGs for hardware acceleration of, say, CK proofs or storage and bandwidth for Caching. A trusted execution environment of Te, in short, is a special piece of hardware in computers where code and data is protected from interference or leakage to external processes. Any code or data sent to the Te can be encrypted and decrypted only inside the Te with special keys, ensuring that when you send private data like identity or like financial or medical records to someone else's device, the owner of the device or any program running in the device isn't able to access the data. Since the data might include code itself. Programs can be run securely in these environments with the assurance that no one can manipulate the execution of the code and that its output isn't tampered with. As Tes can be used to serve Http or RPC requests like entire backends can be offloaded to a network of Tes to decentralized services that you might otherwise run on a centralized server.
00:02:16.310 - 00:03:20.150, Speaker A: Building ZK based applications involves a proving step which is computation intensive, but can be optimized using GPUs and FPGAs. Some applications require that such operations be run client side to ensure privacy of secret inputs involved, resulting in minutes of wait times for end users. However, such computations can be outsourced to the Malay network, where even the secret keys can be secured by running the operations inside secure on place. So under normal circumstances, validators control the ordering of transactions within a block. However, interesting applications can be built if ordering preferences of transactions can be communicated to validators. So users who are familiar with using Flashbots on Ethereum can now use it with polygon as well using the Malin relay. So, as mentioned earlier, Tes can be used for building decentralized applications where the confidentiality of data and integrity of execution matters.
00:03:20.150 - 00:04:21.690, Speaker A: For instance, identity for credit scoring and insurance protocols, applications that involve running machine learning algorithms or private data sets. In fact, even private keys can be shared inside Enclave. So one can deploy mev bots or applications that use such bots. For example, decks that shares mev profits with users entire backends like trading engines for a closed order book decks, gateways for IPFS, RFQ based DEXes, et cetera can be deployed inside Nclaves. So ZKPs can be used to build games, wallets, voting apps, ML applications, and a lot more. And if you want to have the provers run efficiently without utilizing all of your or your users resources, such proving operations can be outsourced to Marlin. You can also build integrations with existing ZK ecosystems by outsourcing some of their provers to our network using our Flashbots relay.
00:04:21.690 - 00:05:03.070, Speaker A: You can build rescue bots that help users rescue funds from hacked wallets, bots that help users get priority doing NFT Mints, maybe sharing DEXes that shared captured me with users, and a lot more. So without further ado, let's jump into some walkthroughs for some of these features. In this tutorial, we'll take a look at how to create a simple node JS server and deploy it inside an enclave. The tutorial that we'll be following for this is the one from our docs. You can find it under User Guides enclaves tutorials deployment JS server. I also have with me a fresh Ubuntu 20.0, for instance, where I'll be running all the commands.
00:05:03.070 - 00:06:30.888, Speaker A: So before we do anything, we need to install dependencies that we are going to need later. So we need docker to actually build the employer image. So let's install that. Since we are building a node JS server, let's go ahead and install that as well. And we also need to install MetaMask, but I already have it installed, so I'm just going to skip that step. Great, let's move on to the next step now. So let's actually create our node JS server.
00:06:30.888 - 00:07:28.746, Speaker A: So let's create a working directory for it first, and let's just create a basic node JS project. Great, so we'll create our server using Express. So let's install that and let's actually create our server file. So you can actually deploy node JS servers directly inside Enclaves, which install node and use that to run it. But if you were seeing our steps from before, installing node takes a lot of time and then installs a lot of stuff. So that basically bloats the image size significantly. So what we are going to do is we are going to use Pkg to package up the server file and node JS into a compressed binary so that you can just run it directly without installing any dependencies.
00:07:28.746 - 00:08:18.812, Speaker A: So let's go ahead and do that. Let's install Pkg first and let's actually create the binary. Great. So if you see I have an app binary now and you should just be able to run it and yeah, it just opens up a server that's listening on port 4000. Let's now move on to actually creating our enclave image. First we'll set up a development environment. And for that we'll use our nitro CLI image, which sets up a development environment for you out of the box so you don't have to do manual installation steps.
00:08:18.812 - 00:08:57.528, Speaker A: So let's do that. Great. It's running. Now I will just open new terminal and leave the other one running. And we'll basically get a shell inside our container using this. So this container basically comes pre installed with like docker and ito CLI, the most important parts that you need to actually build the on click. So let's navigate to our server here and you'll see that our server from outside has basically been mounted inside the container.
00:08:57.528 - 00:09:31.850, Speaker A: So any changes that you make to files directly on the instance itself will reflect over here. The next step is to actually prepare our image specification. And for this, let's go to this link. What we'll be using is we'll be using the default image specification that we provide and we'll basically just be customizing all this stuff. So let's first create a docker file. I just open a new terminal for this. Let's go inside.
00:09:31.850 - 00:10:19.252, Speaker A: Yeah, let's create a docker file first. The next one is setup sh. Create that. And finally we have the supervisor configuration. Let's also set that up. So something that you'll notice is that all of these files basically have customization points built into them where you can basically put our custom setup code. And that's exactly what we'll be doing in this tutorial.
00:10:19.252 - 00:10:55.248, Speaker A: So now that I've copied the files, let's go back. Yeah. So the docker file basically sets up a lot of default networking and supervisor related stuff for you. And what we are going to be doing is we want to run our server when the enclave boots up. So we'll just copy our server into the enclave first in the docker file. Yeah. And the setup sh file doesn't really need any modifications.
00:10:55.248 - 00:11:29.700, Speaker A: And what we'll do is we'll edit supervisor d to basically start up our enclave program. Start up our server program when the enclave starts up. So let's copy this. So this will make your server startup, but one thing that you need when you're running inside enclaves is you need a proxy to basically expose it to the outside world and not just inside your enclave. So let's set that up as well. Great. Yeah, that should do it.
00:11:29.700 - 00:12:45.000, Speaker A: So let's go back to the terminal that we had before this one. And let's first build a docker image based on the docker file that we just created. And you should be able to see the image that you just made over here on player latest. Now let's use this docker image to create our enclave image. Great. And it basically prints some measurements over here. These are used to ensure that the integrity of the enclave is maintained.
00:12:45.000 - 00:13:39.832, Speaker A: Let's move on to the final step, which is deploying the image on the Malay network. So here one thing you need is you need to host the image somewhere where it can be publicly downloaded by nodes in the Malay network. So for this purpose, I have chosen to go with the service called Web Three Storage. You can upload files to the service and it stores them on IPFS and pins them using Filecoin, essentially. So I have already uploaded my image over here that you can see and it gives you a URL. If you just right click and click Copy link, it gives you a URL that you can use to basically copy the onclair image. So once I've done that, let's actually just verify whether the image hosting and stuff is working properly.
00:13:39.832 - 00:14:18.460, Speaker A: So let me just copy the link address. Let's go here and let's try to actually download it. One thing about Web Three Storage is you need to manually add the file name at the end. But yeah, seems like it's able to download it, in which case it's hosted properly. So that shouldn't be an issue. Now, let's create a job for this. For that, we go to the UI that's hosted over here using the URL link.
00:14:18.460 - 00:14:48.656, Speaker A: And what we do is we basically fill in fields as given over here. So for example, this is the provider that we've run for ETH India. So we put that over here and we put 250 as the deposit amount. That will make your own place run for roughly two to three days. And we also give the link that we just saw to the Web Three storage thing. And yeah, we need two steps. One is we need to approve the contract to actually get your tokens.
00:14:48.656 - 00:15:28.420, Speaker A: So let's do that. Yeah, it's done. And let's now create our job. That should be done as well. Yeah, that's controlled. So once you've done this, you can basically come to us and we can give you the IP address of the enclave that you just deployed. So in my case, it happens to be this.
00:15:28.420 - 00:15:53.862, Speaker A: So what I'll do is to ensure that the enclave is running. I'll just try to call 4000. Yeah, there we go. There's the response from a server that we just deployed. And so that concludes this particular tutorial. And thank you. Let's try something a little bit more complex.
00:15:53.862 - 00:16:31.218, Speaker A: Now in this tutorial, you'll learn how to perform privacy preserving compute inside enclaves. This tutorial is also from our docs, you'll find it under Oyster Tutorials. More specifically, we are going to learn how to load numbers inside an enclave and also how to perform compute on them. In this case, it's going to be addition. So we just expect the enclave to return the sum of the numbers that we are going to be loading inside it. I have an Ubuntu instance with me where I'm going to be running most of the commands. Let's start by installing some dependencies.
00:16:31.218 - 00:17:18.030, Speaker A: So I need docker to build the infrared image. So let's install that. Most of our programs are also written in Rust, so let's install that as well. Let's install a few more programs that we need to actually build our programs. You also need to install MetaMask wallet, but I already have it in web browser, so I'm just going to be skipping this step. Let's go on with creating a project now. Let's create a working directory for it first, and let's just create a basic cross collect.
00:17:18.030 - 00:18:07.560, Speaker A: Let's now set up our dependencies and the binaries that you're going to be building. So here I just have a bunch of dependencies that are going to be used by the programs that you're going to build. And this is a list of the programs that you're going to build. Let's first create the app server. So the app server is the main program that's going to do the addition inside the enclave. And it accepts two types of messages. One message is used by the loader to load numbers into the enclave, and the other message is used by the requester to essentially fetch the results of the addition operations.
00:18:07.560 - 00:18:59.320, Speaker A: The privacy is maintained here because the program first does a diffie helmant key exchange to generate a shared secret key. And it expects the data that is coming in to be encrypted by this key. So nobody can eavesdrop on the data, and the data can't leave the end play either. Let's create our loader. Now, the loader is the one that's going to be sending data to the enclave. In our case, we've chosen the numbers to be twelve and 43. So our expectation is that the enclave is going to add these numbers up and return as a result of 55.
00:18:59.320 - 00:20:22.418, Speaker A: The loader also does the same DP helmet key exchange to generate the shared key and it encrypts the data using this key to ensure that nobody is eavesdropping on it. Let's write our requester now. Requester pretty much just does a query of the result that's inside the enclave and it prints that on the console. That's pretty much it. Let's create a key generator program that we're going to need to generate keys for the DeFi Herman key exchange and let's create the verification program. Now, if I start by creating an AWS cert file this certificate is the root certificate of the AWS Nitro infrastructure. So this gives you an assurance that you are actually communicating to an enclave and not any other random server.
00:20:22.418 - 00:21:25.488, Speaker A: Let's create our Verifier program. Now. The Verifier basically downloads the Attestation from the enclave. It does a verification of is the Attestation signed properly? Are the certificate chain signed properly? Are they expired or not? And does the chain end up at the AWS root certificate? Things like that. And yeah, that's pretty much all our components. Let's now build everything. It's done.
00:21:25.488 - 00:22:22.722, Speaker A: Let's generate our keys that we're going to use for the key exchange and we should have our loader and requested keys over here. Let's now build our image. Let's first set up a development environment by using the Nitro CLI docker image that we have. This already comes built in with a lot of the dependencies that you need, mainly like docker, nitro CLI and all that. Let's get a shell into this and you can see that it already has the main dependencies that you would need to build NKL images. Let's navigate to our directory and there we have the directory that we had before mounted inside this NCLE. Now let's now start preparing the specification for our image.
00:22:22.722 - 00:23:12.120, Speaker A: So the images that we are going to be using are going to be based on our default image specification. So you'll find it on the link here, which basically consists of three main files. Just open a new terminal for this. Let's create docker file. First you'll see that the docker file has a customization point where you can write your custom setup code. Let's also create the setup file. And same here, the setup also has the customization points where you can put stuff.
00:23:12.120 - 00:23:57.622, Speaker A: And let's finally create our supervisor file. This has all the programs that are going to be running inside the enclave and you can add your own over here. Let's customize the image. Let's go back here. And once we build the image, you should see that we have an app binary over here. That's our actual server. So we need to copy it inside the enclave and start running it.
00:23:57.622 - 00:24:40.840, Speaker A: So let's do the copying first. We also need to copy the public keys in order to support the deb admin key exchange. Let's do that. The setup file doesn't really need any changes, so we leave that alone. And let's now copy our program specifications and start running them. Our server goes here and we also need a proxy to expose the server outside the enclave. So let's add that as well.
00:24:40.840 - 00:25:43.770, Speaker A: And that goes here. So yeah, that's pretty much it. And let's now build our image. Let's go back to the terminal we had and let's start building our image. We first build a docker image using the docker file that we had and now we use nitro CLI to convert the docker image into an enclave image. So this command prints some measurements. Make a note of these values because we'll be using them during verification later.
00:25:43.770 - 00:26:28.822, Speaker A: Let's now deploy the image. So for this you first need to upload the image onto somewhere where it can be downloaded by the nodes in the network. So for this I've chosen web3 storage. It stores files on the IPFS network and pins them using filecoin. I've already uploaded my image over here. That's the first one here, and you can just right click to get a URL link to the CID archive that's on filecon. One thing that's good to do is check whether the URL is publicly accessible using just duplicate or call.
00:26:28.822 - 00:27:03.700, Speaker A: You can just download it and just verify the step. Let's move on with creating a job. So for that, I first go to the oyster portal, and I already pre filled in some data that's over here. This is the address of the infra provider that you deployed for ekindia. And you can just put a deposit amount, and the link that we just saw from every storage goes here. One thing to remember is you need to add the nclea EAF file name at the end manually over here. Just make a note of that.
00:27:03.700 - 00:28:45.460, Speaker A: Let's go ahead and create our job confirmed as well. So once you've done it, you can come to us and we can share the IP address of the enclave that you just deployed. Let's now move on to verification. So for this part, I'm just going to use an existing enclave that's already deployed, just so I don't have to wait for the current one to get deployed. And that's over here, you can see it pretty much has almost all of the same files that you had previously. And the enclave image that was previously deployed had the following measurements, and it was deployed on the following IP. So I'm going to be just using this data.
00:28:45.460 - 00:29:49.020, Speaker A: So let's first verify whether we are able to communicate with the NCLA, whether the attestation matches and all that. So let's do that. You'll see a lot of blank spaces here that you'll have to fill in. Let me fill the IP first. It once it prints the puppy like this, you know that the verification was successful. And it also creates an app pub file that contains the public key of the enclave that you can use to basically do the defaultment key exchange. Let's now load data into the Nclip.
00:29:49.020 - 00:30:15.364, Speaker A: And there we go. It says, data rate succeeded. And recall that the data that we loaded were with the numbers twelve and 43. So our final step should give us the result of 55, which is the sum. And there we go. So that's how you do privacy preserving compute inside the enclave. Of course, I just did.
00:30:15.364 - 00:30:41.660, Speaker A: Simple addition. You can do any sort of computation that you want inside that. And that concludes this tutorial. Thank you. In this tutorial, we'll create a small circum program and take a look at how to outsource compilation and proving onto our prover network. The tutorial that we'll be following for this is again from our docs. You can find it under user guides pros tutorials.
00:30:41.660 - 00:32:15.480, Speaker A: Let's start with installing some dependencies that we'll need in later steps. So first, let's install snagges that we're going to use to verify proofs. Also install unzip that we need to extract proofs from archives that the proven network is going to send us. Yeah. So let's create our program now. Let's first create a working directory for it. And let's create our program.
00:32:15.480 - 00:33:07.488, Speaker A: The program that we're going to use today is a simple multiplication program. So you have two secret inputs, A and B. And the goal is to check whether you know a particular combination of A and B that when multiplied together, gives rise to a public output C. Now let's outsource compilation of this program onto the pro network. We do that by making a simple API call. And when you're running it yourself, you would probably want to change the entropy value to some other random combination of letters. That's done.
00:33:07.488 - 00:33:46.872, Speaker A: And make a note of this project ID. We'll need it while generating the proof. Before generating the proof, we need to first specify what the values of ENB are going to be. So for this tutorial, I've picked C to be 1024. So I've picked a particular combination of A and B as like 16 and 64, that multiplied together gives you 1024. So let's create our inputs file and let's now generate the proof. This has the project ID blank over here.
00:33:46.872 - 00:34:27.564, Speaker A: Let me just copy and fill in from before it. Now we have an output zip file which contains the proof. Let's extract that. Now it and there we go. We have all our proof files over here. So to verify proof, we need to verify a couple of things. We first need to verify whether the public outputs or like public inputs that were generated by the proven network match with what we expect.
00:34:27.564 - 00:34:56.530, Speaker A: So recall that we wanted our C to be 1024, which matches over here. So that's all good and let's do the final verification step now. Yes, seems like all good. And yeah, that's essentially like compilation and proving outdoors to our proven network. And you can easily verify it locally using Snap JS. And that concludes this tutorial. Thank you.
00:34:56.530 - 00:35:14.180, Speaker A: You can reach us on these platforms and we'll also be in person at the ETH India event itself. So if you guys have any feedback, any questions or want help with the hackathon, feel free to hit us up. Thank you and the best of luck for the hackathon.
