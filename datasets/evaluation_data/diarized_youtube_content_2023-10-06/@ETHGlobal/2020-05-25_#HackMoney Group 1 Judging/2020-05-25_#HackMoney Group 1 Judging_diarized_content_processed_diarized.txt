00:00:02.570 - 00:00:42.310, Speaker A: Okay, so we are live and we are able to begin now. Welcome everybody. This is hack money DeFi hackathon. I am Karthik Talwar, one of the co founders of ETH Global and this is our day one of Hack Money. Judging now for those of you on the live stream who are not familiar with Hack Money. Hack Money is an event that's organized by ETH Global. And for the past four weeks we've had 300 hackers from 40 different countries and 15 different time zones working on making really cool stuff in the world and realm of DFI.
00:00:42.310 - 00:02:07.346, Speaker A: And we've had people from all these amazing countries, we've had over 30 mentors who have helped out our hackers from things like technical things for their projects, to product help, to UI design help and even how should they take it to the next level if they are planning on doing so. And of course, we've had some of these amazing sponsors from the DeFi world who have kind of put in their time and effort and their resources to make sure that every team that's been working on their projects for the last month are set up for success and are able to accomplish anything that they wanted to on top of their platforms and kind of really take the composability to the next level. So let me say this again. We have had 350 hackers that kind of spent the last entire month working on projects in this space for this hackathon. And as of 12 hours ago, I am excited to announce that we have had 118 D five projects that have been submitted for Hack Money. I can comfortably say that this easily doubles the number of D five projects that exist in this ecosystem. And we've seen amazing stuff from new financial instruments, to arbitrage bots, to tools that make it easy for others to leverage and actually extend DeFi.
00:02:07.346 - 00:03:01.458, Speaker A: And on top of all of that, we've had so many attempts from our projects to make it super easy for these primitives to be used by everyday audience. So there's a lot of stuff that we're still processing in terms of the kinds of projects we've seen and everything we're going to see this week. So with that, I want to kick off to how today is going to work. So here's the quick logistics for everybody that's on this call. We have 15 teams here that are going to be presenting and we'll be giving them four minutes to demo what they built and then they'll have three additional minutes for questions and feedback. And just that kind of gives seven minutes in total. And if someone is kind of moving along a bit later or just kind of not ahead of schedule, we can sort of be flexible around that seven minute in total and split this up accordingly.
00:03:01.458 - 00:03:50.200, Speaker A: But just to keep everything moving on schedule, we've also made one little change here, which is we've pre recorded all the demos themselves. So when the teams come on, we will be actually playing a video of those teams or the teams themselves will be playing this and they will get to talk about what they've done and answer any questions live. So think of it as a two hour movie of 15 different trailers and we should see how that goes for all of us. And we're also experimenting with this format, so there might be some hiccups, but we'll walk through them. So as a quick overview of how all of this is going to go. So, the rules and the criteria for this hackathon were simple. A team could have five maximum team members.
00:03:50.200 - 00:04:38.166, Speaker A: And that doesn't mean that everybody has to have a team. We have a lot of people who worked on their projects individually, but they have to ensure that there's two things that were accomplished. One was they must incorporate DeFi perimeters that exist in the space, whether that's stablecoins or building on top of another platform. Hack money is the theme that we're aiming for and hacking on money. And also all code for this event must be written at the hackathon, which meant that every project that you will be seeing was started just about four weeks ago on the 24 April. And as the judges sort of look at all the demos and give their feedback, they will be scoring projects on these five different categories. And these will be kind of how technical, original or practical a project is.
00:04:38.166 - 00:05:32.870, Speaker A: And in addition to all those how the UI and the UX of that said project is, and a general catch all category for what we call Law Factor, that sort of accounts for any outlier that may not be justified properly in any of the previous four categories. Just so I can make sure that it's clear to not only our participants, but also everybody on the live stream that this is not a competition. In lieu of the theme of how we do all of our events at ETHGlobal, the hackers are here to learn and they're here to share their excitement and actually talk about the things that they've experimented with. And the judges are here to give feedback on these projects. We don't expect and nor do we want or tell anybody to do this thing to become a business. So that is not the general goal for any of our submissions. We just want to tell you about the amazing things that developers are doing in this ecosystem and actually help boost the system entirely.
00:05:32.870 - 00:06:22.054, Speaker A: So with that, I'm going to quickly get to it. The schedule of today is that these are the 15 teams that will be going on our Zoom stage and I'm going to start calling them one by one. And as I call the team, they get invited to present on Zoom and they'll start playing their demo. And the judges sort of come in and ask any questions or give the feedback that they have. So, last but not least, I actually want to welcome all of our judges who are going to be doing all the hard work today. And with this, I'd like to welcome Mintia from Consensus Labs investments, patrick McCrory from Anydot and Mariana Conti from MakerDAO to come on our zoom stage. And we're super thankful for the time that they're giving us this morning.
00:06:22.054 - 00:06:59.620, Speaker A: And with that, we are ready to kick off our first demo. So I'd like to invite Team EPNS to kick off Hack Money 2020. Please welcome EPNS on stage. Thanks, Karthik. That was really awesome. Let's get let's get started. I just need confirmation that I'm live.
00:06:59.620 - 00:07:22.940, Speaker A: I can hear. Awesome. Awesome. So let's get started with Ethereum push notifications. Hey, everyone, this is Harsh from Kmepns Ethereum push notification service. Hirsch, you're not sharing the video. You needed a little share button.
00:07:22.940 - 00:07:56.290, Speaker A: Yeah, sorry. Yeah. Hey, everyone, this is Harsh from Teambns Ethereum push notification service. In short, let's get started. So, a little bit about the team. I'm Harsh. I'm the designer and the developer of the entire ecosystem.
00:07:56.290 - 00:08:46.930, Speaker A: And on my left is my forever colleague, Richard. She was responsible for product management and researching about idea solutions. Moving forward. What is EPNS? So EPNS is a way to connect decentralized ecosystem to centralized services. Simply put, Pool Together can send you a message on your iPhone or on your Android, and you will still receive it without signing on Pool Together or any other DAP for that matter. How does that help us? It opens up so many possibilities. DApps can send clear cut communication between their users.
00:08:46.930 - 00:09:31.998, Speaker A: The user will have more enhanced and enriched experience and so on and so forth. One more thing. I wanted to tell you that push notifications are never boring in EPNS, which you can see in a short. Python, let's jump onto the demo. So one thing which I wanted to share with you guys was that when we started, the plan was to create a very simple POC because there are a lot of movable parts in sending a push notification. So we have a server which is actually doing eight or nine things. Then we have mobile app, then we have the smart contract.
00:09:31.998 - 00:10:23.502, Speaker A: And each of them are talking with themselves to figure out the push notification. However, having said that, we are glad that we had some time. So we started working on the DAP aspect of this is one of the first feeds which we worked on. You can connect with MetaMask, so on and so forth. Not a lot you can do on the DAP except for creating a channel and sending a message. In the future, we will have channels which is more or less like the YouTube way. Anyone can come and create a channel and subscribers can come and join those channels.
00:10:23.502 - 00:11:18.050, Speaker A: Once they have joined them, whenever you send them a push notification, they will receive that let's jump to mobile. And I'm very happy to say we are on Android from day one. Yay. I'm also mirroring my real device over here and which is spamming me along with all the other simulated device so that you can see why I said push notifications are never boring on EVN. So entire interface looks quite good. We have a lot of dummy channels which are registered and you can do a lot more. You can interact with the images.
00:11:18.050 - 00:11:55.522, Speaker A: The blue outline means that you can click on the feed and it will take you directly to the URL for certain actions. Well, that's about it. I wanted to go for the business. All right, guys. Yeah, we kind of ran out of time, so thanks for watching and we are open to questions now. Yes, if I can start. So I'm guessing this is like a two way.
00:11:55.522 - 00:12:42.042, Speaker A: So the user needs to go to the website and approve notifications, but then on the other side, each DeFi project or a provider needs to also sign in and be able to send out those notifications. Right. I'm wondering how easy it is for each project to do that to interface with your system. So yeah, when we started we had the same question. So that's a great question. And what we did was we created interface on the smart contract as well as the interface on the DAP for all the channels. So whatever DAP is joining, we call them channels.
00:12:42.042 - 00:13:34.718, Speaker A: And the only thing the DAP has to do is create the channel, provide just three basic info which is the name URL and a short message along with their icon so we can show it to the users because they are receiving messages from many channels. And after that, the next step is sending some amount of die as fees. So the fees is dynamic. They can provide us 50 die or even higher. The reason for that is this fee goes into an interest pool and whoever subscribes to those channels, they earn a small profit amount from the interest these channels are earning. So that's how we are incentivizing the whole system. We kind of thought that the users, if they're joining or subscribing a channel on chain, they are paying a very small fee.
00:13:34.718 - 00:14:39.960, Speaker A: And while it's fair, because if they're joining a channel then that means they are interested in doing something. But at the same time we wanted to incentivize them so that if they join a channel they have some interest which they are earning small enough to make sure that subscribers are not spamming the channel, but still balanced enough to make sure that they earn whatever transaction fee they are paying. And for the subscriber they can again just go to the DAP, join in or interface with the Smart Contract join in. Or the DAP owner can also make the subscriber join in by just paying $0.10 as a delegation fee. Again to ensure that it's spam free. If the DAP is sending a request that this is my subscriber, I would like you guys to join in, then of course we want to have that thing to make sure that the bad actors are taken care of.
00:14:39.960 - 00:15:10.414, Speaker A: I just want to ask a question about this. So I get the rough idea in my mind. So there's a smart contract that accepts brought in. There's a smart contract, users register with a smart contract and they'll earn any interest and any deposits. During this smart contract as a company, I come along, I'll sign a message, I'll send it to the contract, I'll pay a fee, maybe it's like $50. Then this message will get broadcast to everyone who subscribed. So yeah, it's kind of like that.
00:15:10.414 - 00:16:34.806, Speaker A: Only the channels need to pay the fee and this fee is used as a pool for the way for all the subscribers of those channels to earn interest on the channel's pool ratio for the subscribers, they have to go and subscribe to a channel. They can do that from the DAP or the smart contract or even from the mobile in the future. And in the mobile app they need to just connect their wallet and as soon as they connect their wallet, the entire system, the mobile server and the smart contract, they talk to each other and figure out anonymously what the user is, what their subscriber channel is and start sending them messages. And of course we also have secret messages so a channel can also send encrypted message. We were not able to cover that in the demo but yeah, so you can get personal messages from the tab owners as well. Thank you for your submission, super interesting stuff. Could you maybe talk a little bit more about how you might improve the project over time? Like maybe are there any analytics that you might want to add to it? Sure, actually I'm glad you brought that up.
00:16:34.806 - 00:17:34.890, Speaker A: So yeah, the project actually we kind of see it like an ecosystem. So we need to have analytics. We have planned few of those things like the channel based on the channel, the subscriber, we are already storing few anonymous data on the server and on the smart contract. And the way we see it, since we also have targeted messages and those targeted messages are basically JSON file with message type. So we already see us increasing the number of messages or the type of messages you can send. So right now a channel can send I encrypted message which is called secret or a group message which is for the group. But we already are thinking that we need to add a message type tree which will be a targeted message which is non encrypted, just a targeted message type of system.
00:17:34.890 - 00:18:36.182, Speaker A: Then the other thing which we did was when the owner deploys a smart contract, we have created two channels for the owner. One channel is for all the app channel owners or all the channel owners. So when they create a channel, they are automatically added to the owner channel. And that way we are also able to keep track of all the channels, what they are sending, how they are coming from, and we can interact with them. Also, let's say if we try to go for a subscription model or if they are spamming the users, we can send a message from our channel to these app owners that, hey, you are spamming the users and you need to calm down. The possibilities are really endless if you come to think about it. Yeah, I think I would use it if I mean, it sounds like it's really useful for newsletters, et cetera.
00:18:36.182 - 00:19:21.926, Speaker A: If I could auto subscribe to a newsletter, at least I could earn interest off that every time they spam me. I'd probably use it more often if I could make money from those newsletters. That's awesome. We're running a bit behind already, so I want to make sure that we get to move on to the next teams. But thank you so much, EPNS, and we'll move on to the next one. So with that, please welcome the 1inchh Chi team onto the zoom stage. And just to confirm as the team joins, please make sure that you are ensuring that the audio is coming in through the Zoom checkbox from the bottom of that share panel.
00:19:21.926 - 00:19:41.058, Speaker A: And you are also full screen. So hi everyone. Here's. Team one inch. And here's Sergey, the CEO. Anton the CTO of one inch. So I'm going to share my screen.
00:19:41.058 - 00:20:24.426, Speaker A: My first question, can I avoid to play the pre recorded video? Because I was really tired last night after 48 hours hackathon. I would just try to present it in four minutes what you have done, if it's possible for you. Yeah, that sounds okay. Okay, here we go. Hi everyone again. So my name is Sergey, here's Anton, and we built two things on this hackathon. We were a little bit late with that, but anyway, we built the Create Two powered gas tokens.
00:20:24.426 - 00:21:21.366, Speaker A: So you have maybe heard that we use GST Two token and we found out that we can optimize the token by using Create Two and we name it Cheat Token. One inch is based on the one inch punch from Bruce Lee. We do very efficient things on the blockchain, but to do that, we need power and the cheap power. And so we have just created a nice smart contract which is optimized comparing to the GST Two original gas token. So on top on that, we thought, how can we improve the developer space in Ethereum? And we built the Deployer contract, which can be used to deploy smart contracts on Ethereum chains and burning gas token or Cheat token. You can just use both. We support both here and you can reduce up to 42 percentages of the gas costs.
00:21:21.366 - 00:22:01.470, Speaker A: The main problem is right now is we have gas costs at 50 gray and it's a lot. So just imagine we are a developer here in Ethereum Network. We have to deploy almost every day and it costs a lot. So we reduce it by almost a half by just using the cheat token which you can already mint on a one inch exchange. So we thought, okay, not everyone can just find out how to mint the gas token. We just integrate it in one inch and you can actually trade it. I just mint yesterday for like $10 and sold today already on one inch for like $20 and made two X profits by trading gas.
00:22:01.470 - 00:22:51.278, Speaker A: So the solution for the deployer is just approve the Chi or GT two token for the deployer ETH smart contract. The address you can find on meterscan for example, then tap Deploy and put the hex data from your smart contract and that's actually it. And it's then deployed with almost a half of their cost. You would pay in a normal way and that's actually it. If you would like to see any demo how the mint processes work, it's like a simple swap. If you like, I can show you, otherwise I can answer your questions if you like. Um, okay.
00:22:51.278 - 00:23:22.466, Speaker A: This this looks really interesting. I would like to see for the actual mint. So I'm imagining that you're going to be trying just like gas token to mint when gas prices are cheap. Yeah, sure. So the smart contract, first of all, use twelve zeros, not ten. We were able to mine twelve zeros in the beginning. It's a huge effort.
00:23:22.466 - 00:24:27.630, Speaker A: We used AWS Cloud for that and a lot of GPUs. And so Minting you can just use here on Ether, scan the right contract tab and just use here the Mint function with like 100 cheat tokens. Or you can just go to one inch exchange. You can just select Ether on the left side, right? On the right side, the cheat token select only Chi and Minter and then just swap now that's it. I have to just approve in the MetaMask, you don't see that? And after that, something with the MetaMask. After that you should have here the Qi token in your wallet and you can just trade it back on unisoft V Two for example, it's also listed there and just sell it and also earn money with that. Yeah, the Deployer smart contract you can use here to write contract tab and just deploy here he deploy or GC Two Deploy.
00:24:27.630 - 00:25:03.754, Speaker A: What do you want here? Just with data. You have of course to approve the token to the smart contract. Zodiac have the right to transfer it from your wallet. Can I ask one question? I don't think it was very clear to me. So what's the advantage of using this over gas token? Is it just that it's using Create Two or are you actually getting more of a gas refund. Yeah, we have better gas usage, so we made it more efficient. So how already said we use more serials at the beginning of the address.
00:25:03.754 - 00:26:01.420, Speaker A: And the thing is, we save one byte. So we deploy here, this is a smart contract data which we deploy to each subsmart contract, which is cheat token. So you can mint it on low gas usage and burn on low gas price and you can burn it on a high gas price and you can save like a lot. And we also optimized here this minting process. We implemented batch minting with 32 tokens. If you try to mint more than 32 or equal 32. And we also used create Two to just avoid huge logic and also using of gas in the original GST Two to just find the right smart contract address for the burning process.
00:26:01.420 - 00:26:44.662, Speaker A: Awesome. Yeah. I just want to make one other comment to say that I love projects like this. I know the Ethereum developers probably hate it, but is this sure, you could abuse parts of the system that should be fixed. That's incredible that you can also trade it not just for using it for burning. Also you can trade it like trade gas Ethereum. Have you thought of doing some kind of proxy that also automatically burns cheat tokens on calls or are you leaving that for the community? I agree with Pat.
00:26:44.662 - 00:27:33.470, Speaker A: I think this is I mean, I love gas token and if this one's even a little bit more efficient, to build a proxy can be really difficult because you interact with other smart contracts which may not support such a proxy, which try to transfer something from you and you have to approve this contract. It's quite complicated. So we built support for gas token. Our smart contract for one inch, for example. And other developers can do the same. And then everyone can just maybe in the future approve transferring burning gas tokens from any contracts on owned wallet, which can help to reduce your transactions. Like on compound on Ave.
00:27:33.470 - 00:28:55.090, Speaker A: Maybe if they would integrate such a support would be thanks for the demo. It's super cool, like Mariano and Pat said. And how do you sort of strike a balance between sort of the usage of the token and people sort of hoarding it for trading? How we see that? Yeah, so I see a huge opportunity to trade that because we have real value behind the gas token, because there are developers, there are users who use DeFi and it's growing and the gas price jumps like up to 200 way. In such a case, you need the gas token, but you have to get it somewhere and there could be a lot of people who mint it and set it as a limit order, for example, to sell it or put it in a uniswap V Two pool, for example. And also this using more and more projects, start using gas token and I guess we were like the first production team with a production ready platform who just use GST two Token. But this technology comes from arbitrary traders. They are since last year working or maybe two years working with the GST token.
00:28:55.090 - 00:29:26.320, Speaker A: And I would also wish to see more projects who use that. Of course it's a hack of EVM, but it's a nice hack, I would say. Awesome. Well, we're going to move on to the next team. So, team 1inchh, thank you so much for this demo and it's only great to see arbitrages that are not entirely on the DeFi realm and also on the EVM stack. So with that I will invite the next team on stage and that is the project terminal who are working on a trip delay insurance product. So please welcome.
00:29:26.320 - 00:30:11.544, Speaker A: Thank you very much. Bye terminal. Hi everyone. Hey guys, can you hear me? Yeah. Yes. Let me start sharing the screen. Hi everyone.
00:30:11.544 - 00:31:07.288, Speaker A: I'm a team called Hybrid Startup based in the Netherlands who tries to disrupt the traditional insurance with the power of blockchain decentralization. And I'm happy to show you what I've built for a hack money hackathon. So, my name is Kiril Ivanov, I'm a founder and a full stack builder and the visionary. So, what is terminal about? Well, terminal is a sort of autonomous machinery for the trip delay protection where the payout happens automatically and due to decentralized nature of it, it's not only for people but also with. So why do we do that? Well, the traditional insurance is boring and nobody likes it. Why? Due to a variety of reasons such as too many middlemen in the value chain. The insurance traditionally has got high operational costs and the policyholders are the community, but it's got low community touch.
00:31:07.288 - 00:32:09.656, Speaker A: So let's see how the terminal is different. So, how it works? Well, people log the digital asset or ETH against the particular trip they're about to take. Then the payout is calculated on chain, the buyer takes the trip and when or if the trip is delayed, the payout happens automatically with no manual claim needed. But there is also another use case when people can join the risk capital reserves and earn interest on it. So let's hit the demo how it actually works. So, here the user interface and imagine I'm about to take the trip from London to Paris on let's say 1 June. I got a ticket for morning trip and I expect to take some financial loss in case if my train is a little bit delayed.
00:32:09.656 - 00:33:03.528, Speaker A: So based on that, I want to buy the protection for this amount of money and in case if this train got delayed for 2 hours or more, I'll get the payment like this. And if my train is canceled, then this will be my payout. So yes, I confirm I got a ticket and I understand that it's machinery, it's not an insurance in any form, I sign it in MetaMask a little bit faster and that's pretty much it. So in case if my train got slate, I will get this payment instantly. At the time of planned arrival, I don't need to do anything, I don't need to claim nothing. So just the future is now. So that's first part.
00:33:03.528 - 00:33:34.052, Speaker A: But there is another one. It's my favorite actually. The opportunity that terminal offers is that it allows people to join another side of the fence when traditionally it's been a possibility of only of risk carriers and reinsurance funds. So to back up the risks. So let's see how this works. Vaults here mimic traditional institutional reserves which are backing up risks, the operational and reinsurance. Both these funds hold the reserves in a number of assets and they're balanced automatically.
00:33:34.052 - 00:34:13.012, Speaker A: The beauty is that in fact everyone can join the reinsurance vault and earn interest coming from two sources. First one is their internal fee coming from protection sales and the second one is integration with interest earning protocols such as AVM. So what's next? So here are the next things to do. Well we plan to add extra data sources and cover all the international trains of Western Europe. We launch on Mainet, then more decentralization and consensus needed on the data sources and we plan to expand to the flight delayed protection. So the app is available live. It's already on Robstone testnet and that's pretty much it.
00:34:13.012 - 00:34:33.880, Speaker A: Thank you for your time. Yeah, that was it. Thanks. I really like the demo. It was very on point and highlighted pretty much everything. I guess my question yeah. You mentioned chainlink or Oracley.
00:34:33.880 - 00:36:03.112, Speaker A: You say that everything happens automatically but of course you are going to need the Oracles for making sure that for payouts or if trips completed correctly, how are you going to pay for those? Is that going to come out also from fees, from the people using the platform? Do you think there's going to be eventually maybe, I don't know, a way to contest the Oracle results for any, you know, it's by nature it's quite commercial business case. Well it's basically sort of insurance, right? So there is a business model behind and I already planned so some part of that will go to as a fee or earning model to the insurance to share with people and well obviously I need decent data sources. I don't want to tell that the three piece there. So yes, well sharing some parts over there is also the priority actually. In fact the chainlink I think offers already flight schedule or flight stats start. It's not that advanced for trains yet but wow, that's the potential I can tip in quickly. I think it's really cool.
00:36:03.112 - 00:36:23.970, Speaker A: You just made me question what insurance is all about and I guess the point of insurance is that you have this company that's betting against the customer. It's a two sided market in a sense they're paying insurance. Because it breaks down and now you're just opening that up to everyone. I think it's really cool. I just wanted to make my comment. I think I know how it works. I don't really have that many questions about it.
00:36:23.970 - 00:37:26.688, Speaker A: If I may, I have another quick one. So this reminded me a little bit of how open works. I don't know if you've seen it. It's also like an insurance and you can protect your investment and somebody can take the other side. The interesting thing there is that the resulting market is a token, right? An O token, an ERC 20 that can then also be plugged into the ecosystem. Do you plan to have something like that so that the instruments that come out of your platform, can they be integrated with something else? Like I'm going to package, I don't know, a month worth of travel and speculate on it on another platform? Yeah. This case is called Parametric Insurance.
00:37:26.688 - 00:38:03.804, Speaker A: So that's an insurance that the case happens. How to say? It's not a subjective case. Right? So it's either happened or not. So that's why the train or any delay or weather, other opportunities are there. If you're talking about, let's say, the car damage, let's say, or something like that, well, you need to do decent proof or decent consensus on the fact. So then I'm having it in mind that it might be a good way to go towards the crowd. Well, sort of for voting or something like that, when the people, you know, can vouch for you that this event really happened.
00:38:03.804 - 00:39:07.364, Speaker A: So that's a way and talking wise, well, we have eat, so that's fine to have it for now. Yeah. Great work on the demo and very intuitive. Have you spoken to any of the travel operators or train operators about this? And do you think they'll be excited about it or how do you think they'll sort of react? Well, yes, there are a couple of companies that are offering the sort of a cash back encryptor for the hotel and trip bookings, so sort of a loyalty scheme. I think this might be an interesting one, but the traditional risk carriers are also curious. Actually, I'm in touch with the French one soon, because they understand they're not dinosaurs, right? I mean, they are expensive and nobody likes them, although everybody has that insurance, et cetera. So they are looking for innovations and this drastically cuts on costs, so that's an option too.
00:39:07.364 - 00:39:41.864, Speaker A: But they're slow, I rather want to get along with their innovations. So pre payouts, maybe the cash back is the one. Yeah. Just one quick question. How would you go about setting the price? I just thought about that. How do you actually set the price for buying the insurance? Is there some market there as well? You mean how much you can lock? Well, there is artificial limit on this. Well, in fact, there is another concept, it's about risk self sovereign risk.
00:39:41.864 - 00:40:22.388, Speaker A: So that's a risk every, let's say, person has, right? In this case, we are talking about people, we are talking about trains. So in fact, every train supposed to get have some sort of risk profile. Whether it's or the flight, whether it's often on time or it's late or quite often it's low cost and got canceled. So this is the underwriting. So using this sort of profile that I plan to build over the time, it will take some time and more data, I get less risk it is. But so to calculate the payout well, the best way yeah. Awesome.
00:40:22.388 - 00:40:49.220, Speaker A: Well, thank you so much, Carol. I think the best part about this whole demo was that other than the video being super concise, you were wearing the same. Great. So awesome. So, with that, thank you so much. And we'll call the next team which is BTC Tornado. So please welcome BTC Tornado on the live stream.
00:40:49.220 - 00:41:37.546, Speaker A: Hello, everybody. Do you hear me? Yes. Can you hear me? Swell. Yeah. Good. Okay, so I will start a screen sharing and play the video. My name is Janbanesh and I will present you a project I have built with my friend during the hecman hackathon.
00:41:37.546 - 00:42:12.598, Speaker A: The project is called BTC Tornado. And in a simple words, it's a bitcoin mixer powered by Ethereum. My friend was responsible for the front end and the server side. And I was responsible for the implementation of the contracts and the integration with Opengsn. The goals of the project were to extend the reach of Tornado Cash between the bitcoin users and to make it as simple as possible, we wanted users to not even know that they are using Ethereum blockchain. Now I will show you the demo. So, the website has two sections deposit and Withdraw.
00:42:12.598 - 00:42:56.898, Speaker A: On the deposit section, user can select the denomination, the Tornado denomination he wants to use. Then he will obtain the bitcoin address to which he is supposed to deposit his Bitcoin and Tornado node. This node makes him eligible to withdraw the PBTC from the Tornado contract. And the user is also asked to save the seat. What the seat is for, I will explain in how it works section. On the withdrawal side, user will input his note and the recipient's bitcoin address. This is pretty much equal to how normal Tornado Cash front networks.
00:42:56.898 - 00:43:31.330, Speaker A: The only difference in the withdrawal section is that the user will input the bitcoin address instead of the Ethereum address. You can see that the front end is now generating, approved and sending the transaction. The transaction is being sent through the relay. You see that everything was okay. Now I will explain how it works. So, the deposit section first Ethereum account and Tornado Cash note is generated. Then bitcoin address is requested from the Ptoken service.
00:43:31.330 - 00:44:09.242, Speaker A: And ETH address is an input. User sends the BTC to the transaction. And at the same on the front end, the GSN reli request is signed and sent to a server. Now the user can go away. We've pretty much separated the transaction broadcasting and signing because depositing of the PBTC in our testing takes approximately half an hour. So we wanted the user to just sign it and go away so that he doesn't have to wait. Then the server is continually checking for the ERC, 20 deposit event on the PBTC token.
00:44:09.242 - 00:44:51.950, Speaker A: And once tokens are deposited, he will broadcast the transaction through the relay to the Ethereum blockchain withdrawal. So on the withdrawal, user inputs his node and BTC address front end generates the proof. The front end will send the proof to the relay. The relay will verify the proof, and then if the proof is valid, it will send it to the Tornado contract. And the Tornado contract checks the proof validity as well and then calls the redeem function on the PBTC token contract. And then the BTC gets deposited to the user's address. Thank you for your attention.
00:44:51.950 - 00:45:48.640, Speaker A: It was it okay. So, any questions? Hello? Can you hear us? Patrick, you're muted. Yeah. I've got one question. How did you find using the Ptoken API in order to do Tornado cast? Like, what was the intersection like between them? Okay, so there is one problem, and that is that PBTC doesn't at this point support meta transactions. So, for example, as you probably know, di has permit function. In order for us to release it to the main net, we would need the P tokens to add that support.
00:45:48.640 - 00:46:41.418, Speaker A: So how it works is that contract help of that like having a contract in the middle that controls the funds. Well, we didn't want the user to trust us at all. So we pretty much in the front end. We generate new Ethereum address, new Ethereum account, and we tell him to save the seat and the node. We're actually thinking about it and this was the only way to do it. trustlessly if you liked it. The problem there was that the P token, when the PBTC is deposited to the Ethereum account, it's like impossible to invoke like it's impossible to P token service to invoke a function on a contract.
00:46:41.418 - 00:47:18.660, Speaker A: So when the user sends the BTC to the P token service, the only thing P tokens allow us to do is to deposit it to some Ethereum address. That way we could not create some Ethereum contract which would control the funds. Do you understand it? I think so. So they force you to send it to an externally owned account? Yes. Okay. pTokens don't at this point support invoking some contract functions, like when the BTC is sent through the token bridge. Okay, I think that's fixable.
00:47:18.660 - 00:47:52.850, Speaker A: You can just trick it. That's too technical, probably as a question. Well, we think that meta transactions are more and more trendy and useful. So we hope that there will be like an update of the contract. I think metatransaction could easily solve a problem there. Yeah. So once they'll do it, or there will be some other BTC bridge, we'll be able to release it to the main net and we will have the UX VL one to use.
00:47:52.850 - 00:48:59.330, Speaker A: Thanks for the demo, guys. Really cool project. Do you sort of see any obstacles with integrating any of the other sort of wrap tokens as well? Any other app tokens? Any of the like, say, WBTC or TBDC or any of the wrapped bitcoin tokens? Well, for this to work for bitcoin users, there has to be the bridge from bitcoins to Ethereum. So wrapped, but it's just like a collateralized BTC on Ethereum blockchain, so it's not useful in that way, but it would definitely be possible. But it would not require such a complex logic like through Opengsn and such, because our goal was to make it simple to use for bitcoin users. So if the users already had web BTC at their Ethereum account, it would be pretty much the same interface as Tornado Cash has now. They would just have to support another ERC, 20 tokens.
00:48:59.330 - 00:49:42.234, Speaker A: So what the goal of our project was is to use Opengsn and P tokens to make it as simple to use for bitcoin users. Awesome. Well, thank you so much. I have one tiny comment if I can. You said that bitcoin users could use this and not even know that they're using Ethereum. I think that you should put it front and center that they are actually using it so that we're trying to bring them over to our side. Right? Well, in the branding it is there like it is bitcoin mixer powered by Ethereum.
00:49:42.234 - 00:50:12.310, Speaker A: But our goal was to not force the users to install MetaMask or something like that. So we want them to know it, but not know how Ethereum works or something. Awesome, thank you. That was great. So thank you so much. And we'll call the next team up, which is Flash Shield high frequency yield bot Arbitrage. So with that, please welcome them onto the zoom call.
00:50:12.310 - 00:51:30.362, Speaker A: And I think this is one where we may have connection issues, but I think we should be fine. Oh, hi guys. Let me try to share my screen. You can hear me? Yes. Let me quickly go to the video, Vijay. And today I would like to talk about high frequency yield bot. So I'm very interested in DeFi space and I was wondering if it is possible to have a series of swaps which are done and at the end of which to generate a very small amount of profit.
00:51:30.362 - 00:52:35.298, Speaker A: And if we could repeat this process several times by automating it in the form of a script, we would be able to achieve a small profit which when multiplied over a large number of time, would enable us to have a significant profit. So this is like a classic Arbitrage strategy and this is like an token arbitrage. So first of all, for this to be successful, all we need is a wallet with a little bit of ETH. We then query uniswap and version two API to get a list of tokens, find out what the ETH value the exchange rate is, and then once again exchange that to the next token in this list. So for example, it could be USDC to Die or USDC to Bat, and then exchange that again back from that final token to ETH. And then at the end of that, if we generate a profit, for example two or zero one, then this transaction would be successful. And finally we would have like a small profit.
00:52:35.298 - 00:53:15.554, Speaker A: So this is the goal of this. So for this purpose, I built a small script in uniswap to just query and get all the values. I've already run that and you can see for example, it just generates like a list. So in this case, the current rate was 190 for your die, 202 for USDC and so on. And hex and in this case bart USDC was better. So I could do that and then from add to USDC to ETH gave me 0.992,162. Now unfortunately, this is less than one, so therefore the transaction would not be successful anyway.
00:53:15.554 - 00:53:44.538, Speaker A: I will just show you how it will work if it is profitable. So this list would then go into this list of tokens to be swapped from ETH to Bart. In this case it will be ETH to Bart, and then Bart to USDC, and then USDC to ETH. So all these addresses will be loaded here. Then let me show you. I've already deployed the contract on chain. This is a deployment cost and then you have the final cost.
00:53:44.538 - 00:54:25.602, Speaker A: Then all we need to do now is to run the contract. So the contract is basically quite simple. It's just built on a standard flash loan, uniswap wrapper or the box. And then you would have token one address, token two address, and then a list of that. Then you would start sorry, once again, I'll just quickly show you the next video. There's a merging issue. So as you can see, I've already deployed the flash loan.
00:54:25.602 - 00:55:15.238, Speaker A: And after deploying it, I've just called it again with the liquidity needed for ETH in this case. And you would see that the transaction has failed. Now, this is due to the fact that it did not satisfy the conditions and it reverted. And we could also have a look at it in Robston, give you the overview. So fail with couldn't transfer ETH, and basically the flash loan itself was successful, but unfortunately we did not generate enough profit to actually pay back the flash loan. And so this fails and this means that this pipeline fails here. Sorry.
00:55:15.238 - 00:56:05.398, Speaker A: So basically it was a good learning experience for me to understand the flash loans and swap and the liquidity. The problem what I had is that the number of times the arbitrage was generating profit was very rare, but the advantage is that it can be completely automated, as you have seen. So basically you just run a script, let it run in the background. All the user does is he just needs to have a little bit of ETH in his wallet, like 0.1 or something to pay for the gas over a series of time, and then let it run few hundred times over a series of days and then generate small arbitrage. And if it is slightly more than 1001 or something like that, then it generates profit and that is the goal of this project. Awesome.
00:56:05.398 - 00:57:04.730, Speaker A: Well, thank you so much Vijay. And with that, we'll move on to the next demo. So next up we have Capital ETH and they're currently having some technical difficulties. So what we'll do is we'll play the video on my end and I'll share my screen with their demo and we'll have the team answer any questions if they're able to join from the video side or the call side. Hi. I'm Sudip, and I've been working on building Capital Eight for the Hackaba. So capital, it allows you to invest in tokens in a smart, systematic and a hassle free way.
00:57:04.730 - 00:57:59.820, Speaker A: So instead of investing everything at once, you can create a goal and invest small amounts which would be automatically debited from your wallet and invested regularly as per your plan. So the main advantage of this is that you average out the buy price and you don't have to worry about timing the markets. So we have two actors here, one is the investors dashboard and another one is the providers. So investor is basically anyone who creates a plan and a provider is any user who processes those installments by paying a transaction fee and receives a processing fee in return. So let's connect with MetaMask here and let's go to the investor dashboard. Right now, in the dashboard we can view our existing plans or create a new one. So I'll just go ahead and create a new plan.
00:57:59.820 - 00:59:07.620, Speaker A: So for example, say I would like to invest 30 die every ten days to buy the link token. So I have an option to redirect the final tokens to another address, but for the time being, I've just pasted my same address here and I've already approved the contract to spend die. So I'll just go ahead and create the plans. The transaction is confirmed, so the plan should be available on the provider's dashboard and they should be able to process it. So let's switch to the providers view here. So I have Chrome open here and let's connect using port is this time. Okay, so I'll switch to the providers tab here.
00:59:07.620 - 01:00:01.300, Speaker A: So here I can see all the plans that are available and the corresponding fee that I will receive to process them. So these are the available plans. So I'll just go ahead and process this one. So just confirm this and let's check the status on Ether scan. So right now, as we can see here, this installment was worth 100 die and I would be receiving one die in this wallet for processing this transaction. Let's just wait till this transaction is confirmed and I have my portis wallet open here. So I don't have any die as of now.
01:00:01.300 - 01:00:51.380, Speaker A: So the transaction is confirmed now. So as we can see, $99 worth of die, which is $100 minus the processing fee has been swapped for buying Ether bragged ether, which is a token and one die has been deposited to my address as the transaction as the processing fee. So if I check my portis wallet here, we can see one die. Basically we are incentivizing the users to process transactions and collect fees in return. Thank you for your time. Have a nice day. Hello everyone.
01:00:51.380 - 01:01:56.920, Speaker A: Background yeah, actually I'm not sure if it was me or some other team, but yeah, I was here all the time. That was like a small mistake. On our end, we ended up switching the order. So I had this one as the one I had to play, but the video still got played and you're here to answer questions, so we should still let the judges kind of give feedback and comments. Yes, no issues. Yeah, I've seen a couple of projects that been trying to do automatic dollar cost averaging or different strategies. My only worry is I like for example, the fact that you give it out to the community as well to be the ones that process and I expect that to eventually be bots looking to make a quick die or whatever the transaction fee is.
01:01:56.920 - 01:03:12.474, Speaker A: I'm wondering if there is any way to reduce those fees because, for example, somebody who may want to buy a little bit every single day. So actually I've been thinking about mean that was too much for the scope of this hackathon, but I've been thinking of including an Oracle which could literally fetch the current gas price from somewhere and based on that just have a fee which is a little bit more than that. So that would be enough for the I mean, that would be beneficial to both the investor as well as the processor. And one more thing we can do is we can have open GSN included here. So in case even if the processor doesn't have anything to pay for it, he can still process the transaction and half of the transaction fees goes to the paymaster in opengsn and half of it he can receive in his wallet. So that is one way we could do reason. Yeah.
01:03:12.474 - 01:03:47.190, Speaker A: So the main reason I built capitalith was because right now everyone is so much more focused on trading and other things. No one is really paying much attention to investing. Right. So most of the people right now invest mostly because of FOMO or maybe some anonymous tips or something like that. So yeah, this would be a smart bitcoin companies, like a lot of bitcoin companies, have this thing where they take money from your bank account and buy bitcoin every month. This is the same, but with Dai. That was going to be my question because you already have Dai.
01:03:47.190 - 01:04:39.566, Speaker A: Why does you not just convert all that to ETH right away? Is there some argument where it's better to phase it out over a few months? So the main advantage would be you reduce this risk of buying at a high price. So once if you buy every month, say every 15 days or every month, so you basically average out your buy price and eventually, by the benefit of compounding, you would over a span of time, be profitable. So that's the main idea here. Cool. Any other questions? Awesome. Sadib, thank you so much for making that awesome demo. And we'll move on to the next team, which is Godmode for test to do local testing or letting you do anything on your local blockchain.
01:04:39.566 - 01:05:51.764, Speaker A: So please welcome them on Zoom. Hello. Hi there. It let me share my screen and that should go oh, 1 second. Presenting my project for Hack the money. Hi, this is Martinet presenting my project for Hack the Money got moved for test. As we know, millions of funds are being managed in DeFi and naturally we want a secure system.
01:05:51.764 - 01:06:22.240, Speaker A: We want the system tested. However, this is challenging, especially for DeFi project. First, it is hard to replicate the main net structure of other projects on Ganachi. For example, just imagine deploying the whole MakerDAO system on your local Ganachi. So people of course use testnet for that. However, it is also challenging because of DeFi composability on testnet. Testnet only simulates mainnet structure within a project, but not between projects.
01:06:22.240 - 01:07:09.144, Speaker A: And I quote this from our fellow hacker on a public channel small rant here on testnet, compound and Avi are using different dye mocks. Another option, which is using Ganachi with the forked option could overcome this. But there are other issues as well. And this is mainly because like code is law, you fork from a given state and you'll have to follow all the rules. And it will be hard, for example, to get some tokens, let alone creating different scenarios for testing. Again, here I'm quoting one of our mentors, Mariano, when he was answering a question on how to obtain Dai. You won't be able to mint directly for minting die, you need to go through the whole open vault, lockup collateral, mint die cycle.
01:07:09.144 - 01:08:12.640, Speaker A: That's why better off just using just mocking an ERC 20. So this makes it very difficult to set up testing environment for D five projects that wants to build on other money levels. Thus, what I built is to overcome this codeless law issue in local blockchain. God mode for test consists of three pieces a modified Ganachi core that can ignore blockchain law and Arbitrarily modifies, contract storage and contract code when sending an RPC request, a node JS library that integrates into Truffle framework and leverages solidity contracts as API to modify the storage of the blockchain at will and a set of precompiled got mode contracts that works in default mode. For example, MakerDAO that just mints die uniswap v two enables the fee compound mint different C tokens to mint die in one's Truffle test. Now, the developer only needs to do this, but it's pretty simple. And all you need to do to become the Fed is to add a for loop.
01:08:12.640 - 01:08:40.168, Speaker A: I also provide a generic function so that the developer can do anything he wants. All he needs to do is to code another solidity contract. No need to learn new stuff whatsoever. Now, let me quickly show you how this would look like. Now I'm in a sample truffle project. Here I have a contract with Privilege Action, and only owner can access it. The owner is set during deployment, and there is no way of changing the owner.
01:08:40.168 - 01:09:25.000, Speaker A: And this can also be seen in our tests. This is the Truffle test suite, and we have Alice and Bob. Alice is the owner, as you can see here, and she can access the Privilege Action. Under normal circumstances, when Bob tries to access this, bob will not be able to do so. However, here, with the God mode enabled, bob actually can access the Privilege action. And even going further, we can create a new function and set Bob as the owner. The left, I have a modified Ganachi running, and on the right, I have the Truffle test that utilizes the library.
01:09:25.000 - 01:09:46.160, Speaker A: And that's it all passed. That's a wrap. Thank you very much. All right. Thank you. That's it. Wow, that was a great presentation in this case.
01:09:46.160 - 01:10:35.664, Speaker A: Let me get this straight. With the modified, when you enable God Mode, you can use any account and you have some presets specifically for several DeFi projects so that you can in one call override any of this. I think this could be useful also. For example, we do a lot of testing for maker votes, and we need to simulate. You could just take out all governance and send transactions one at a time to test the system. I really like this idea. Thank you.
01:10:35.664 - 01:11:11.176, Speaker A: Yeah, that is exactly the motivation behind this, because I want to enable to make testing really easy. Right. So, yeah. And so basically, what I need to do right now is just to modify current contracts. And let's say I just take MakerDAO's contracts and then just remove some stuff. Then that's it. How does it work with contracts that have a deterministic address? So, for example, in our system, some of our contracts have the same address on testnet and mainnet.
01:11:11.176 - 01:11:52.526, Speaker A: When you use God mode, will it change the contract address? No, it doesn't change the contract address because it's forked from the main net. So Ganache has this fork option right so it basically uses the same thing but you have to do it like sorry does it fork the blockchain itself and then correct? Yeah. So you can either work using the local blockchain or you can use the Ganachi fork. Then it will pull the state when you're sending the transaction. Awesome. Well, if there are no more questions, we'll move on to the next one. Marinette, thank you so much for this amazing demo.
01:11:52.526 - 01:12:56.472, Speaker A: And next up, we have Inscript, and this is the team with the technical difficulties. So I'll be playing the video while Sonny from the team joins to. Answer any questions. Hi, I'm Sandra. My project name is Inchcube so instrument use Unison V two oracle and Unison V two protocol to build automated trustless to providing platform without requiring user to pass written minimum value for safety. Okay, so let's check automatic trade like Unite works on pace so we will choose WH die and WH for step and we'll take thousand. Okay if the slippage rate is less than 0.5%
01:12:56.472 - 01:13:13.392, Speaker A: then trade will be happened. Otherwise it will get error. So now the transition is done. As you can see over here. Okay, so this is how the automated trade happened in instac. If the slippage rate is less than 0.5%, then trade will be happened.
01:13:13.392 - 01:13:38.740, Speaker A: Automatically by Instrive. Otherwise it will give error like this I can show this error. I can see like zero the slippage is greater than 0.5%. It will give error. Swap will not be able to perform slippage rate is high. Okay, so this is the automate trade. Now, we will show look into liquidity provider.
01:13:38.740 - 01:14:48.456, Speaker A: As you can see over here, liquidity provider can deposit liquidity over here for pair. In return, uniswap or inscript will give UNICEF liquidity. Pool token. Here you can see currently we have for WH die. We have w is a die token one zero fifteen two. Like okay, now we will be adding more w fly. Okay, so as you can see over here successfully added liquidity now you can see UNICEF will give us token it will be increased by some token as you can see, over before it was seven two over here now is nine four three so the liquidity added and you will get in return UNICEF Liquidity Token.
01:14:48.456 - 01:15:36.860, Speaker A: Okay? If the liquidity provider want to remove the liquidity so they need to get back the segments. As you can see over here, liquidity is removed. So now we will check over here w to die. So there will be zero, as you can see over here. And you can check any liquidity reserve here. So if you want to check reserve, you can check over here, if any. Traders wants to see any result for any pair before trading.
01:15:36.860 - 01:16:40.980, Speaker A: So you can see over here all the trading transaction we are saving in the transaction history over here. So all the transaction history you can check over here this transaction fail as. You can see over here. Repeat and die. Okay, perfect. Hello, can you hear me? Yes, sorry I don't have WiFi, so I am in mobile net. So any question? Hello? If I understood correctly? Yeah.
01:16:40.980 - 01:17:38.710, Speaker A: Can you hear me? Yes, I can hear you. Okay, so the audio wasn't all that great, but is this like a one stop dashboard for uniswap P two? Like trading and adding liquidity and that? Yeah, motivation was that if you want to trading using NUSF B two, so you need to pass minimum return value for safety and the path of the tokens and deadline. So using inscript, you can remove these hurdles. You just need to choose the crypto pair and just need to add the value. So automatic technically platform will calculate the slippage rate for that. If the slippage rate was less than 0.5, then automate trade will happen.
01:17:38.710 - 01:18:16.290, Speaker A: Otherwise it will give the error that slippage rate is high, swap will not be performed. So I made the automated trustless crypto trading platform. Okay, cool. I don't have any more questions. Thank you so much. Sonny, I'm sorry that you had some technical difficulties on your end, but we'll aim to give more feedback on our discord. Okay, sure.
01:18:16.290 - 01:19:10.010, Speaker A: And sorry also from my side. No worries at all. Thank you so much for hacking and submitting the project. So next up we have team cryption. So please welcome cryption on stage. Okay, I'll just share my screen share computer sound. Hi, my name is Tejas and I'm from the team cryption.
01:19:10.010 - 01:19:56.680, Speaker A: Our submission is interest bearing. Dai ETF. This is a balancer liquidity pool with Adai, CDI and Dydi. We've made dy dai using smart contracts. How does it work? So, the user sends his Dai to our smart contract which is then forwarded to solo margin or dYdX protocol. The rate at which Dy Dai is minted in the user's wallet is calculated by the total amount of Dai deposited from our smart contract into solo margin divided by the total supply of D. We created a balancer pool with Adai CDI Dydi with 33% wheat each.
01:19:56.680 - 01:20:49.526, Speaker A: Holding the CTF allows you to hedge your Dai interest rate position across all three protocols. So it doesn't matter if one day Dye is gaining more interest, or if one day Adai is gaining more interest. On top of just maintaining 33% of each protocol. Whenever a trade is done between these three assets, the liquidity providers, which are the ETF holders, get 0.2% of each trade. So the question that everyone liquidity providers generally have is what about impermanent loss? Well, according to how this works, there shouldn't really be any. So there are many rate chasing protocols like Ray Idle Finance yDAI which should eventually balance out the rate interest between these three protocols.
01:20:49.526 - 01:22:03.086, Speaker A: So if there is a higher interest rate at Adai and a lower one at Compound, then Ray and Wydi and Idle Finance move their CDI holdings into Ada. First of all, rate chasing costs gas. So whenever you try to move from Adai to CDI to dYdX, when you try to get the highest interest rate, this all costs gas and money. Secondly, as usage increases, all of these interest rates would generally tend to the same number, especially because of idle finance, wide eye and staked. If you keep chasing the high street, they will all eventually balance out. And whenever a trader tries to gain arbitrage, our pool becomes balanced automatically while gaining interest and without losing any gas. So what we want to do in the future is add chai and add an interest bearing token like Dydi for DX to the ETF.
01:22:03.086 - 01:22:42.510, Speaker A: Right now we haven't added chai because it's giving us 0%. And once it starts giving us some DSR, we would add that too. So let's jump into the demo. Right now, I've connected my MetaMask wallet to the coven network. And over here you can see the total Dydi supply in circulation, the total amount of Dai locked up in dYdX, and the interest rate which is given by dYdX at the moment. So let's convert 0.5 die.
01:22:42.510 - 01:23:42.600, Speaker A: And now you can see my Dy die balance has increased. If we scroll down, I can add my 0.5 Dy die balance into the interest bearing die ETF. I just have to first approve my Dydi, confirm adding liquidity. You can now see my Dydi balance has changed. And if we go to ether scan, you can see that I got 8.208 BPT.
01:23:42.600 - 01:24:36.942, Speaker A: Now let's try removing some BPT balance. Once I remove the liquidity, I'll get zero point 44 Dy die, 17 CDI and zero point 42 Adai. And here you can see 17 C die, zero point 44 Dy die, zero point 42 Adai. And that's basically how the interest bearing Dai ETF works. Thank you. Hey, can you hear me? Yeah. Cool.
01:24:36.942 - 01:25:33.002, Speaker A: I think it was interesting. I haven't seen a lot of projects yet that are using balancer, and I think this is like a really good use case. Do you see this? So you mentioned that you could add chai eventually once DSR starts generating interest. I don't really know a lot of how balancer works, but could you add it to that same pool? Or do you need to create a new pool with all the tokens? So right now I'm not on Main net, so if I go to Mainnet and I create a public pool, I can add chai to it. So once I add Chi and I can add other interest bearing Dai tokens to it. And yeah, so there's no issue with that. If I do that before I go to Mainnet, I can do it afterwards.
01:25:33.002 - 01:26:06.220, Speaker A: Also, I just have to create a private pool where there's a controller for balancers. So liquidity would be routed from my smart contract, basically. But I can then change the weights, I can change the swap fee, all of that. I was thinking of changing the swap fee according to the difference in the interest rate that is given. So if someday Duidx is giving 10%, then we would increase the swap fee because that's when everyone would want to trade. Right? I like that one. That's a good idea.
01:26:06.220 - 01:26:33.358, Speaker A: Cool. Thank you. Super cool demo. So just to pull on that thread a little bit, what's the range that you think that swap fee will sort of vary between? It should be quite less because in the end, they're very stable and it's a stable coins, they don't increase that much. So I would say 0.1% to 0.3% would be the range.
01:26:33.358 - 01:26:54.190, Speaker A: Maybe 0.4%. Awesome. Thank you so much, pages. This is really cool. And with that, we'll move on to our next demo, which is Team Lucram. Thanks. Please welcome Lukram onto the presentation arena.
01:26:54.190 - 01:27:42.340, Speaker A: Hello. Hey. We can hello. Yes. Yeah. Thank you. So are you guys able to see my screen? Yes.
01:27:42.340 - 01:28:12.854, Speaker A: Okay. Thank you. Hey, this is Sai. Me and my teammates are here to present Lucram decentralized, innovative, and efficient limit order protocol. So here is my team. So what we have built, we have built decentralized limit orders platform boosted by the market. So current protocol take the limit orders and keep the users money idle in the smart contracts.
01:28:12.854 - 01:29:07.760, Speaker A: So we are trying to solve this problem by utilizing the idle money that are present in the smart contract and lend that particular money into the different lending protocols so that user profits from this particular order that has been placed on the Lucrum contract. So for building this, we have used the lending protocol fiber network as a liquid diploma and changing for getting the prices of each and every individual token. So let's actually dive into the demo and see how it actually works. So we have built this completely on the Coven Ethereum network. So in order to place the limit order, you have to enter the amount and the price at which you want to purchase this currency and the expiration date and whether it is buy or sell and submit the transaction. And that's it. So this is how it actually works.
01:29:07.760 - 01:30:36.730, Speaker A: So you just enter the path into the Lucram and Lucram just creates a new order and we just credit the Ether into the RV and which in turn gives the aether to the order contract that has been created by the user. Now let's confirm the transaction and see at one of the previous transactions that we have placed. So here, this is the Lucram contract through which we have sent the wealth into the afe protocol. So wealth has been credited into the AFIC and we just get blocked the aid. So there are different functionalities such as execute, widow, and cancel. So for this account purpose, we have put the execute button, but in future, we will be having a background circle which will execute this order whenever the price has been hit that has been set by the user. So after the execution happens, you can either withdraw your money or just allow us to utilize your money again to send back the destination amount into the protocol so that you'll be benefiting again from the Apr that we get from the Ave protocol.
01:30:36.730 - 01:31:41.914, Speaker A: This is all about the protocol. So let us see how the execution process, the A that we got from the Arbitrate will be sending this A back to the Arbit and get back our web. So we will just swap the web into die and that's it. So the die that we have got, we will again send back to Abe and get back the Abe die. So as long as we don't withdraw, we will just keep on lending to the protocol so that user will get the maximum benefits. Let's actually go into the slides and understand more about the execution. So chainlink actually provides us the prices of each and every individual token to the order contract and a it has been directed to the RFA which in turn give us the ETH and we just swapped web into the die and we just land die into RA and bought back the die.
01:31:41.914 - 01:32:43.380, Speaker A: So whenever user will cross so we just give up the a die and get the die and just credit the die into the user wallet. That's it. So what are the advantages? So advantages are, so we are providing batch prices for the limit orders given to the users and we also giving out the market making for lending protocols so that there are both way benefits for the user and for the protocols. And there are some limitations too. So dependency on the other protocols, centralized execution service, no lending rate. So in future we are planning to integrate compound VCX and we also want to integrate Makeadao and Uniswap for more powerful oracles and we want to support more token based and deploy all these contracts to the main. Thanks to our advisors who consistently helped us for building this product.
01:32:43.380 - 01:33:04.262, Speaker A: These are the resources and you can contact us anytime. Thank you. Yeah. So that's all about Lucram. So let me know if you have any questions. Awesome. I have one quick question, just from my high level understanding.
01:33:04.262 - 01:33:38.982, Speaker A: So the idea is that I want to do a trade. I want to sell ETH when it hits $290. So I put in the order and while I'm waiting for the price to increase, interest is being earned. When it hits $290, anyone can hit execute and then they'll execute my trade and give me my 290 die. Is that like a good high level overview of what's going on? Yes, exactly. So you can purchase at low price and you can in turn get the Apr from the lending protocols. Yeah, with the execute button.
01:33:38.982 - 01:34:17.198, Speaker A: Is anyone pressing that or is that the person who deposited the ETH? No. So for now, for this hackathon buzzer, we just integrated the execute button but in future we are planning to have an ecosystem of liquidators who can just liquidate this particular order for just incentives. So just like the compound does with the liquidations. Cool. Yeah. That's interesting. I saw that you put under limitations that it's dependent on other protocols.
01:34:17.198 - 01:35:06.910, Speaker A: I don't think that's a limitation. I think that's in the spirit of DeFi I just wondered, you mentioned some kind of centralization how do you expect to decentralize a little bit more? Okay, so for now we have execution process that is centralized. So we actually execute the orders. So if the background services fail to execute this particular order, then order won't get executed at that particular price. So for this we are planning to have a liquidations mechanism where we put the ecosystem so that ecosystem will get the incentives for liquidations. Cool, awesome, thank you. Yeah, great.
01:35:06.910 - 01:35:59.080, Speaker A: Thank you so much Sai. And we'll move on to our next demo which is Flashmint, a no code. So please welcome Lucas from Flashmint. And we also have oh, looks like we have a different set of people that were promoted. So let us get in. Sachin hello. Hey guys, can you hear me? Yes.
01:35:59.080 - 01:36:21.890, Speaker A: Awesome. So I'll just share my screen. And here. Hey, guys. I'm partha from Team Flashment. Hey, you all. This is Sachin from Team Flashment.
01:36:21.890 - 01:36:57.370, Speaker A: Hey guys, this is Mitra from Team Flashment. Hey guys, this is Sanchez. Hi, I'm Vitar. I'm one of the creators of Flashment. Flashment is a game. Yep, it's a DeFi game playing with real money. It's a game find way to building with no code arbitrage transactions, finding opportunities in the market and executing them without the player having any need to have any capital as we're leveraging Flash loans.
01:36:57.370 - 01:38:22.094, Speaker A: That's quite neat. As you can see on screen, this flowshot represents a way for a player to exploit an arbitrage opportunity. So player defines which interconnecting blocks each one representing a DeFi protocol or an operation in a DeFi protocol will be used to construct this transaction and execute this opportunity. When a user executes this opportunity, we show him on the sidebar the corresponding amounts of each step, the balances that he has after each step, and if he has a profit, we just transfer it back to them and the block end. Yeah, but just by having this little amount, just enough to cover the fees, you're going to have the user being able to execute this transaction and take advantage of this opportunity. They just make this a social sharing platform so people learn how to perform this arbitrage demystify democratizes these opportunities in a way so you have this shared component where people can talk about what they are doing. And if you have to look at this monero panel have a scoring leaderboard type thing which actually shows the actual profits.
01:38:22.094 - 01:39:38.980, Speaker A: And the idea is and this eventually didn't get implemented because they got to this during the hackathon sprint, but the idea is to allow sharing of these boards through the screen. For example, every time someone scores, actually makes a profit together with the link showing hey wallet XYZ did this amount of profit, had this call. You can actually go and tap and see how the opportunity was made, which connecting blocks were used so you can explore what's going on and use the learning tool. We do have a few improvements to make. For example, right now the UX accused on building the transaction, one of the feedback from design exploration during this sprint was to actually this is not the only step needed, but identifying the opportunity is actually a very strong component of doing this. So we need you to expand the UX flow to actually permit the user to go and find these opportunities and then build on top of them. So it needs to be informative to them now as well as a no code platform.
01:39:38.980 - 01:40:56.860, Speaker A: So yeah, this will be the next steps for Flushman. Well, thank you very much. That's it for the product video and please let us know with the questions. Hello? Yeah, hi, I like the UI. I'm trying to think of a question so as we saw actually getting our opportunities, it's not that common, right? And here the thing that I find a little bit weird. I like the fact that you're gamifying this, but I don't know if I found an arbitrage opportunity and would be able to run it over and over, I don't know if I would necessarily share it with others. Right? Yeah, but it's like a come and go, right? When ARB opportunities come and go really quick and we have seen in the ecosystem already arbitrage dow and people are actually building our monitors and sharing them in the community.
01:40:56.860 - 01:41:55.260, Speaker A: So it's there and everyone wants to sometimes flash loans are not right now common to run because of the gas cost and stuff, but once this starts democratizing and people are using it more and more, then we will be able to see more transactions using flash loans. It will not be the attacks, it will not be the flash attacks, it will be the new normal attacks. I have one brief question. How many arbitrage moments do you find? I mean, are there many arbitrage moments at the moment between any of the platforms or tokens? Yeah. So the ARB monitor, which you just saw in the presentation, it showed around four ARBs at that present moment, and it gets updated every five minutes. And it was just ETH pairs, so no one's really exploiting that then. I guess that's from the sound.
01:41:55.260 - 01:43:13.480, Speaker A: Actually, right now, due to the gas price, it's almost no profit for right now, but we hope to see that changing. Also we are gamifying this so that more and more university students can come along. Like in our team also we have three university students. So when we say university students, it's like they are trading their time for money. So once they have this motivation of money right, where they are not risking any of their capital because they're using flash loans, so they'll be more and more interested in exploring how to earn that. And of course, the technical overhead is high, but if we are just focusing on a special use case that is Flash loans, then we will be able to iteratively show to the users that how you are using our monitors and how you are using Dex AG. But other than all that, we have also integrated leaderboard in our platform which will allow them to also follow the top profiles, the top players who are performing on our board, and they'll be able to understand what's going on.
01:43:13.480 - 01:43:25.402, Speaker A: Great. Thanks Sachin. Thanks, Vitor. And parth. Thank you. And Sanchez. That's an amazing five person team.
01:43:25.402 - 01:44:18.860, Speaker A: And we'll move on to our next demo, which is project Hobby Hodlers with their portfolio management tool that they'll be demoing soon. So with that, please welcome Hobby Hoddlers onto the participation side, everyone. Hey, how's it going? Going awesome. Play my video. Hello, fellow decentralized citizens. This is Trevor Clark. I'm the creator of Hobby Hoddler, a decentralized finance portfolio and goal management tool.
01:44:18.860 - 01:45:02.938, Speaker A: So many people are using multiple cryptocurrency wallets to track their digital asset holdings. I've created a tool that helps you take all of those different wallets and look at a single pane of glass to track all of those holdings. This is a project that helps you take the time to invest in projects that you believe in and keep tabs on them over time. So my solution is Hobby Hodler. It's a self hosted application for viewing portfolio assets, achieving your goals, and researching your next move. This is a totally made up metric, but 91% of users are using more than one wallet or exchange in cryptocurrencies. But I've found that it's actually kind of true.
01:45:02.938 - 01:45:36.926, Speaker A: If you look at the app marketplace, things are focused too heavily on just one blockchain or single use case wallets. So this is my concept for multiple wallets. You can even track manual accounts and create goals for those different accounts or portfolios and just see the overview of your holdings over time. So let's do a quick demo. Let's set up a new Hobby Huddler portfolio. I'm going to use portis as. This is where it's an easy single login for a user.
01:45:36.926 - 01:45:56.342, Speaker A: It finds my account and loads it in my Hobby Hoddler portfolio. So the wallet loaded there. Let's create a goal. So let's use ethereum. We already have Ethereum wallet loaded up and let's do 0.5 Ether. So once it's tracked, that it will load up my goal.
01:45:56.342 - 01:46:44.060, Speaker A: You'll notice it's worth $101 at the current date. Now, if we look in the portfolio, you'll see that this is my account balance over time. And here's the goal. My goal versus the account balance. Hobby Hoddler also keeps track of different assets across different feature sets so you can look at things like Die and calculate how much I would earn if I had a starting balance of $250 held within Ave, for example. You can also see other rates and staking rates if you're looking into proof of stake and check just how much you would earn if you use those protocols. So Hobby Hodler is not only just a lens to view your holdings, but also a way to research different assets that you would like to get into.
01:46:44.060 - 01:47:29.926, Speaker A: Lastly, it's a decentralized governance for things that you want to research or plan for your portfolio. So I've created a Dow that allows users to add or vote for new features for Hobby Huddler to track. If you'd like more information, check out the repo, which has a full visual walkthrough of what I just demoed. It also shows the other features that are available, like alerting on stake or price for assets that you hold, there's lots more features. And lastly, I just want to say thank you very much. Hope you enjoy the rest of your afternoon. If you'd like to learn about more things about Hobby Hodler, check out the repository and see the other cool features that I have in mind.
01:47:29.926 - 01:48:05.700, Speaker A: Thanks a lot. Thank you. Any questions? You yeah, that was really impressive. There's a couple of things that I really liked. The first one is that it is self hosted. That for me is really important because yeah, that means that the data hopefully stays in my computer. Also, the research tab, that was really good.
01:48:05.700 - 01:48:59.618, Speaker A: I hadn't thought about an integration with that before, but it really makes sense. So you can look at different things. And I also think there's a lot that you can do with the cost. For example, a really basic one would be getting 32 e thread to be able to stake once Ethereum Two comes out and think you can do interesting things or maybe deals with other tokens so that you can earn some money from this project by maybe showing promoted the goals. I don't know I'm talking out loud, but I thought this was really good. Congratulations. Thank you.
01:48:59.618 - 01:49:23.482, Speaker A: Yeah, that's exactly what I was going for and I'm hoping that other people can run this themselves as well. And if that Dow integration finishes, I can actually have people buy into tranches and be part of that goal and income. Yeah, you go ahead man. I'll ask after. No worries. Just want to second Mariano's comments. Super cool.
01:49:23.482 - 01:49:46.580, Speaker A: Been sort of looking for something like that. I think especially like doing a lot of discovery across all the DeFi assets and being able to do discovery for the various protocols would be super powerful and there's a social element to it as well. But really cool stuff. Great work. Thank you. Yeah, I just wanted to say that the one thing people do in this space is huddles. So obviously that's a good target audience to go after.
01:49:46.580 - 01:50:06.138, Speaker A: I think what it sort of reminded me of as well was a project called Rotkey. But that's more to do with accountancy and doing your taxes. And I feel like something like that could also be there's some intertwining connection you can have there. This year shows you how you make more money. This shows you how you deal with your accountancy. And it's all self hosted. I think people pay money for what you're doing anyway.
01:50:06.138 - 01:50:26.750, Speaker A: It makes them more money they can pay you for. It sounds good, I like that. I'll look into the project. Thanks so much, Trevor. And we've seen Trevor at so many in person events. So glad to see you participate in hack money too. And with that, we'll move on to our next demo, which is team DeFi BTC.
01:50:26.750 - 01:50:44.144, Speaker A: Please welcome them here and let's check out their BTC on ETH demoAt from.
01:50:44.182 - 01:50:45.970, Speaker B: DeFi BTC and I'll share my screen.
01:50:46.660 - 01:51:01.350, Speaker A: Sounds great. Can you increase the volume? I think there's some audio volume issues.
01:51:02.440 - 01:51:04.260, Speaker B: Increasing volume? It's like max.
01:51:10.280 - 01:51:23.150, Speaker A: I think we're still having some AV issues here, so can I just make sure that when you are sharing your screen, it says Proxy Audio in zoom? So can you exit the screen share and then make sure you check the audio box.
01:51:25.440 - 01:51:26.510, Speaker B: Covered by.
01:51:31.840 - 01:52:04.088, Speaker A: The video? Still playing, but doing that again will route the audio directly to zoom. Unfortunately, that did not fix that. Varaj, can you confirm that you have checked the Share audio? Checkbox when you get the screen?
01:52:04.254 - 01:52:05.450, Speaker B: I've done that.
01:52:12.540 - 01:52:18.808, Speaker A: Maybe you can just talk us through it, I guess. Yeah, I think it might be easier if you can just talk through this. We're not able to hear the audio.
01:52:18.904 - 01:53:10.740, Speaker B: I'll just do that. Yeah. So for this hackathon, I worked on D five BTC. So what DeFi BTC allows, it basically brings D Five capabilities to bitcoin. So you can deposit bitcoin and get equivalent PBTC. PBTC can be redeemed for bitcoin anytime. The next thing that you can do is you can swap PBTC to ERC 20 tokens.
01:53:10.740 - 01:53:42.268, Speaker B: Say, for example, you can swap PBTC to ERC 20 tokens like WBTC, Die, USDT, et cetera. And this is powered by uniswap V two. Then what you could do is you could deposit tokens to earn interest using a tokens. Say, for example, convert PBTC to WBTC and deposit it to Ave to earn interest using Awbtc. You earn interest for every ethereum block. Eight tokens can be redeemed to get tokens back anytime. The next cool thing that you could do is you could stream tokens using Sablia so easily stream tokens like PBTC, WBTC, Dai Ava Interest Bank Tokens, et cetera.
01:53:42.268 - 01:54:20.950, Speaker B: And you could redeem tokens from stream in a single click. The final thing is you could send or receive any ERC 20 tokens like Adai, PBTC, Die, et cetera. I've also created an open source project which allows merchants to process DeFi payments. Yeah, and this is a user interface. So when you come in the screen you see your PBTC balance and account and say, for example, you click over here, BTC address is generated. And what you could do is you could send BTC to that address and corresponding PBTC tokens are minted. After that you could swap PBTC to WBTC.
01:54:20.950 - 01:55:01.970, Speaker B: Finally, then you can deposit to ave and you get corresponding awbtc tokens and you could also redeem them to get WBTC back. And finally you could also create a Sablet stream. For example, you could stream PBTC to some recipient. You can select start time, end time amount and then click create stream. Once you create a stream, then a stream ID is generated and the recipient can then enter the stream ID withdraw on to withdraw from the stream. Finally you could send tokens like, say, PBTC WBTC to an address and also create an open source project to process ERC, 20 payments for era, PBTC, dai, et cetera. It's a non custodial solution which allows you to trigger your own purchase flow on a transfer confirmation.
01:55:01.970 - 01:55:12.280, Speaker B: Yeah, any questions?
01:55:24.020 - 01:55:37.510, Speaker A: I'm still kind of playing your video on my end without the audio because I thought you were going to just do this thing in tandem, but I can still play the rest of the video or you want me to stop and we can just go on to the question.
01:55:37.880 - 01:56:23.096, Speaker B: You can play the video. So basically once you generate a BTC address, right, you can scan from a wallet and send BTC to that address and corresponding PBTC tokens are minted and you can also redeem them to get BTC back anytime. And the next step is to conduct the video. Then this swap tokens feature, say, for example, you could swap PBTC to WBTC and if you enter the from amount and to amount is automatically filled. And once you get the WBTC right, then what you can do is you can deposit it to Aave to earn interest using Awbtc. And then what you can do is you can also redeem WBTC anytime. And after that you can also create a sabbath stream.
01:56:23.096 - 01:57:11.566, Speaker B: Say, for example, you could stream PBTC tokens to a recipient. You just enter the amount, start time, end time and the recipient address, and then it would stream tokens to the recipient. And what it does is at the end when the stream is created, it creates a stream ID so the recipient can enter the stream ID to withdraw from the sabbath stream. If you can see over here, this is sabbath UI, and then you can withdraw from the stream once that's done. And the next step would be after this there's a step where you can send tokens basically, like say, for example, you can send PBTC tokens or say die to any recipient. And what also I've done is I've created an open source project basically, which is a non casual solution. So you run the script and.
01:57:11.566 - 01:57:42.330, Speaker B: What it does is it watches for ERC 20 transfers to address. And what you can do is you can run a script to process the purchase. And for this, ada is the perfect currency because it increases in balance over the time. And this is an example of the script. I got a payment, say from this address and two address and this is the amount. So here what I can do is I can write a custom script which triggers the purchase and it's a complete noncustural solution. So you don't have to trust anybody, you can just run them on your own servers.
01:57:42.330 - 01:58:13.650, Speaker B: And finally, the front end is powered. DAP utilizes smart contracts from P tokens ave uniswap we sablit supported login options are MetaMask and Portis. Front end is hosted on Netlify and Skynet. ERC 20 payments processor utility is powered by node JS and the future work would be Mainet release and to add more features and improve UX further and it's live on Robson on Netlify as well as CSI.
01:58:15.530 - 01:58:41.310, Speaker A: Can I ask one question? Yeah. My understanding is that you've built a user interface where I can deposit in, let's say, BTC. I can then lock that in this how do you pronounce this? Sabbalr? And then I can stream that BTC to someone else and I can withdraw that at some point. So it's sort of like a user process around it. Is that a fair way to describe it?
01:58:41.460 - 01:58:54.640, Speaker B: Yeah, same token during the duration increasing withdraw that and the balance of.
01:59:01.990 - 01:59:37.626, Speaker A: I'm having a little bit of trouble with the connection, but I will say one thing that I like is that you could flesh it out as a portal for bitcoin people coming into Ethereum. It's like you got a way for them to mint tokens on the blockchain and then you have like three or four different use cases, right? Like you say you can stream your BTC or you can loan it or you can send it, you can deposit.
01:59:37.658 - 01:59:57.640, Speaker B: To Ava to earn interest. And using UNICEF we do can convert to other tokens. And also I have created a script which says that they can accept PBTC also or say Urdai balance increases. So there are multiple options. So basically what it does is it showcases how Ethereum and DeFi can be used. So it's DeFi compatibility, basically.
02:00:00.860 - 02:00:09.188, Speaker A: Well, can I ask one last question? At the very start of the video, do I send actual bitcoin to it and then it gets converted into the PBTC?
02:00:09.284 - 02:00:27.440, Speaker B: Okay, so it shows a barcode scanner, you scan it and then it gets converted to PBTC then so you can convert using UNICEF to WBTC, then say deposit to Ave to an Awbtc and then say you can know the stream token using. So it basically shows the entire DeFi capabilities.
02:00:29.940 - 02:00:32.240, Speaker A: Awesome. Well, thank you so much, Viraj.
02:00:32.660 - 02:00:33.890, Speaker B: Thanks a lot.
02:00:34.680 - 02:01:22.240, Speaker A: So we're coming towards the end of this judging day. We have two more projects to go. And next up, I'd like to call Bloom Finance to come up and present their hack. Please welcome Bloom Robert. Let's start with sharing my screen here. I work on the front end and the smart contracts, and my teammate Kelvin Lockwood worked on the design and documentation, along with a lot of ideas and planning for this project. We are Bloom Finance.
02:01:22.240 - 02:02:53.260, Speaker A: We created an app that allows anyone to create custom gift cards or coupons or ventures for their businesses or stores that, when purchased, earn interest on the deposit. Portion of that deposit is paid to the company in advance, which can help with revenues during COVID-19, and the remainder is held in an NFT that represents the gift card. Why? For one, it's your money and you deserve the interest on it. So when you create a gift card, buy a gift card, the money that goes into that gift card still technically yours, and you should be earning an interest from that deposit. Also during times of crisis, such as COVID-19, it does help companies to generate a revenue and keep them afloat by being able to pay half of the gift card value to the company in advance while the other half sits in escrow earning interest for the gift card holder until they're ready to go to the store and spend it. Perhaps at a time when store reopens after COVID-19. Of course, nothing better than accepting advanced payments for goods and services, so it can help both the customer and the businesses.
02:02:53.260 - 02:03:56.464, Speaker A: We have integrated with Portis for wallet management and Ave for interest, bank tokens and the whole thing. The whole website is hosted on IPFS for decentralized hosting. At this point, I would love to jump into the demo. Unfortunately, I did not have enough time to complete the entire UI, as I started a new job last week working with pool together, and I just had to shift priorities to that the last couple of weeks, which really put a time crunch on my abilities to deliver for the hackathon. But with that said, I can demo what we have so far. So this is the UI main landing page, where a person would come and find a company that could see all the coupons that company might have. Or if they already have a coupon or gift card, they can scan it to manage that coupon or gift card.
02:03:56.464 - 02:05:12.940, Speaker A: See the balance, see the interest, destroy it, claim all the assets in full, or if they take it to a store, they can use it at a point of sale system to redeem items in store. And if they are a company, they can register companies. We'd like to whitelist this at first to prevent scam companies popping up that claim to be a store that they're not, things like that, until we figure out a real solid way to prevent copycat stores and theft of funds. So to begin with, we'll sign in, we'll connect with our portis integration. You can see we're connecting through their iframe their open window. Once it's connected, we have connected our wallet address to that's pretty much as far as the UI has gotten at this point. I'm going to jump over to the smart contract code to give a brief walkthrough of how the Avengers to begin with, there's a controller contract more technical if you guys wanted to go through this or not.
02:05:12.940 - 02:05:50.200, Speaker A: Should I just let the video play or did you want to stop there? You can let it play. Manages purchases and redemption of coupons. It has a bunch of other helper functions such as getting the principal interest balance coupons. The first step would be to register as a member. Memberships are created as an NFT, a specific type of NFT. That way memberships can be transferred as easily as an NFT token. And when creating new types of coupons, you have to supply your membership token ID to confirm that you have created a membership.
02:05:50.200 - 02:06:47.320, Speaker A: Once you create a type of coupon, you can create multiple types of coupons for your company. You can specify the max supply of coupons for this type. The minimum amount of deposit minimum might be $10. But with the system we are designing, we are not planning to restrict the consumer to increments of 1025 5100. Being blockchain based, we can allow the consumer to deposit any amount of assets into the gift card as they want, provided they meet the minimum deposit. Then we supply a reserve ratio, which is the amount of money that's going to go to the company in advance and the amount that's going to be reserved for the NFT in order to generate interest upon it. And there is a minimum reserve ratio just to make sure that we do have a deposit in the NFT that can generate interest.
02:06:47.320 - 02:07:41.420, Speaker A: So that your gift card does grow. When someone comes to mint a coupon, if they purchase a coupon, they'll provide the coupon type and how much money they want to put into their coupon or their gift card, in which case we then deposit our asset tokens into Aave. And the way that works is we've created a bridge. We create really small, slim, line simplified smart wallets that are connected to every NFT that is minted. So every gift card essentially has a really slim I wouldn't call it a smart wallet. I guess it's more of a dumb wallet. It really doesn't do much beyond providing access to the funds laying in it and a place for the interest to grow from Aave.
02:07:41.420 - 02:08:38.700, Speaker A: So first when we create a coupon, we'll create a token, and we will map that token ID to the address of the new smart wallet that we've created. And then we will deposit the assets that we collect from the user into Ave's lending pool. We'll convert them to a tokens. Through the deposit mechanism, we'll receive a tokens into our contract and then we'll transfer those a tokens into the token's smart wallet, where they'll then gain interest. Now, the only person who has access to that smart wallet and the fund would be the NFT owner. Since the token is owned by someone, we can always derive the ownership of that token and determine who has access to the funds. And that way the gift card can be transferred just as easily as an NFT can be transferred on the blockchain.
02:08:38.700 - 02:09:18.680, Speaker A: Hey, Robert, I think we're coming to the tail end of the time here, but if there's any sort of closing pieces in this video, that'd be great. That's pretty much yeah. Gift cards that grow in value based on interest. Yeah, that was the gist of it. The rest of it was just kind of a technical walkthrough because I didn't have time to demonstrate the connection with Aave, so I was trying to show the technical integration with Aave that yeah. So any questions, feel free. Hey, Robert, thanks for the demo.
02:09:18.680 - 02:10:06.232, Speaker A: It was super cool. And welcome to congrats on joining Pool Together. Just on your last comment on the transferability. I mean, with coupons, how sort of business make money on them is actually for people, not redeeming them and sort of maybe giving them to someone else who might actually use them? How do you sort of think about being able to trade them or reminding people to use them? Or do you think they will sort of just kind of sit there, like, collecting interest for indefinitely? That's a good question. That's the nice thing about being on a computer base. A lot of the gift cards I have in my wallet I've actually literally forgotten about and I've never spent, mostly because I have a lot of cards in my wallet and I don't notice them. With our system, we could attach a messaging system.
02:10:06.232 - 02:10:45.108, Speaker A: So, I mean, if people wanted to provide an email address associated with their coupon or their gift card, then we could provide periodic emails and updates. Hey, you've accrued this much interest over the last week or month? Or, hey, you still have this much money to spend at this store, this store is opened, stuff like that. So the technological approach to gift cards gives us that avenue to be able to reach the customers, provided that they want to be reached. Even though I'm not a judge, I just want to comment. This is a really cool idea. Thank you. Thank you.
02:10:45.108 - 02:11:25.840, Speaker A: Thank you, guys. Awesome. Thanks again and congrats on shipping and demoing. So with that, we have our last hack for the day and I'd like to call up Collab Land on to Zoom. So welcome, James. Hey, everybody. How's it? Uh, let me get up this video demo and yeah, I'll just let the video do the talking for the first part of this and then we can go into a live demo and answer questions right after.
02:11:25.840 - 02:12:06.716, Speaker A: Let me know if the audio is not working. The team at Abridged created Collab Land this past month at the Hack Money hackathon to build a simple system leveraging tokenization for community development. Our system takes about ten minutes to create your own community concierge using a Telegram bot, an Airtable as a back end and a membership system that permissions access via an NFT using Stripe or through Role using their social tokens. The tech stack that we used leverages node red, a visual development environment and a bridge smart contracts. All of this is built and powered by Ethereum. We hope you enjoyed the presentation. Hello.
02:12:06.716 - 02:12:45.352, Speaker A: Welcome to Collabland. I will be your guide in this journey. Collab Land builds better communities by giving creatives and leaders all the tools they need to crew, create, engage and organize their people. To understand where we come from, let's go back to the beginning of the Internet. In February 1985, a community of writers, journalists, futurists, thinkers and musicians came together to form a membership called the well, the Whole Earth Electronic Link. They used email and a primitive forum to discuss philosophies and ideas about the future. Human connection continued to evolve from online forums and email groups to more sophisticated social networking sites.
02:12:45.352 - 02:13:36.350, Speaker A: The innovation of the Internet allowed humans to connect to each other across the world in a simple, instant and powerful way. With more companies working remotely since the Pandemic society is rapidly transitioning to a more virtual future and the importance of community connection could never be stronger. These times will set the standard for a new normal of human interaction. And Collabland is a perfect tool to foster online community growth. In Collab Land, you can automate processes to serve your unique community. This bot, or digital concierge acts as a doorman greeting members, a referee, rewarding participation, a signpost directing traffic, and facilitates decisions through a governance system. Collabland is the hub to onboard, understand community goals and missions, and participate in discussions wherever your community lives.
02:13:36.350 - 02:14:24.376, Speaker A: The key innovation for Collabland comes from aligning incentives with tokens to drive engagement, reward community participation and facilitate decisions for a community bank. Today, Collab Land acts as a simple subscription service for community management tools such as an exclusive chat room and Telegram. These tools form membership systems using an NFT purchased through Stripe or for the more crypto Savvy through token ownership. While simple today, the future of Collab Land holds many opportunities. Tokens on Ethereum allow for the newest and most flexible way to create aligned incentives. People are actively tokenizing themselves, like Alex Masmash, their contracts like the NBA basketball player Spencer Denwiddy, and their communities like Reddit. Collapland has a three phase roadmap.
02:14:24.376 - 02:15:18.840, Speaker A: The first phase will optimize the automation of personal token sales and dive phase. The second moves our focus to community tokens and systems with a common bank. In the third phase, Collabland will tokenize the platform itself in order to begin the process of decentralization. The feature set of the phases mentioned includes integrating more robust participation graphs like Source Cred as well as Dow frameworks with layer two voting systems. Our team comes from around the world and we work remotely with a mixture of experience in Web Three and Web Two. This project would not have been possible without the amazing designers and storytellers who helped shape the vision. The key features of Collab Land includes a tokenized membership system, a participation award system, as well as an account contract for each user bots and Collab Land automate membership, onboarding user participation, community information governance and Ethereum accounts.
02:15:18.840 - 02:15:54.632, Speaker A: Sign up for our waitlist today. We're excited to collaborate. Cool. So I'm happy to field questions right now. We can also jump into a live demo of kind of what the cloud looks like on the admin side as well as the user side. Do you have any questions immediately? I would like to see it on the user side. On the user side, sure.
02:15:54.632 - 02:16:24.064, Speaker A: That's perfect. So let me pull this to this is going to be a bit of a meta screen share here. So James Young, can you all see this? Yes. Great. I wonder if I can make it bigger somehow. Can you see it better now? No, it's still the same size. Okay, so James will be pulling this up.
02:16:24.064 - 02:16:56.168, Speaker A: But here I can also kind of show what this is going to look like on my end. So what he's going through and I'm already a member of this group, but essentially I send him the tutorial bot, the Collab Land bot. This is our community bot. And then he hits start and the bot welcomes them. Hey, here's our group. They have maybe some information about the group messages and things and then you can actually pay with stripe. And the stripe is going to mint an NFT.
02:16:56.168 - 02:18:03.730, Speaker A: Right now it's hooked up to a mentor in COVID and actually the stripe only works in mobile. That's why we have James here. So James, can you hit? There we go. So if you can see, James is now paying with stripe and he's going to insert a demo credit card, the test credit card and then the token will be minted and I can pull up the address too and show the sort of admin system. But then James will be able to join the group. And on my end, the bot greets with number go up in this instance. So that's a nice little thing.
02:18:03.730 - 02:18:47.362, Speaker A: And then this is our community and people can talk. And then a very simple the first iteration of this one piece is like both we want to allow people to use resources and tokens to align incentives. The other piece though is like there's a social layer to the system so eventually we'll integrate something like Source Cred. At the moment we just have a leaderboard that is very simply counting messages within the group. And so it's like a very simple proxy for participation. It's not perfect, obviously, but that's what we have moving right now. And all of this is set up within this little form system.
02:18:47.362 - 02:20:03.142, Speaker A: So it looks a little bit like a Zapier form where you have easy access to the API tokens you need to insert and then you can add your subscription options and your information on your community here. The services will include stripe but you could think about using different types of tokens in here and it could be a custom token system where you're using any sort of network token to create your own permission chat room. And then the dashboard is just links for community information and then the community rewards is again what I was describing earlier. Right now it's just that counting system and you can see James is like testing it on this side but then eventually we'll integrate source cred and other more sophisticated community participation graphs. This is kind of what we have today. But yeah, curious if there are any questions about the system or how we built it or even specifically this was a super fun presentation, thank you for it. One question I had was just trying to link this to the personal token element.
02:20:03.142 - 02:21:10.880, Speaker A: Is it more from the aspect of like hey, I can use this platform as a way to sort of manage my followers? Is that what you had in mind? So there's a number of ways we can use such personal tokens for this. So for instance, we've talked a lot to Alex Masnish and it's an easy way, one to maybe offer your personal tokens is like a token sale. So if people want to come and participate in your community, maybe they have the personal token integrated into the bot and then they're directed to a uniswap to purchase that or something. For instance. Another is that in this system within the admin information we can integrate into like Airtable and it's an easy way for that personal token owner to keep track of the people there that do own those. So it's relatively flexible. You could also say, set up a consultancy and maybe your personal token is just worth hours of your time and that whenever people come to your consultancy it's automatically siphoning off that number of tokens that are relevant for you.
02:21:10.880 - 02:22:07.794, Speaker A: If I may add real quick, if you guys can hear me, we're also imagining experimenting so that a dow could be collateralized by personal tokens. So that if you're an artist, let's say a musician, maybe you have a band or that then comes together as a dow where when you have ticket sales or get tipped whenever revenue comes in, that actually goes into the dow. And since it's collateralized by your personal token, you can have some type of rev share and then you can kind of go meta with that. So you will have a dow of dows where it's like a record label, for example. So there's different ways to mix and match organizationally. Are you going to integrate this with the GM style, with the governance? The governance system is sort of a few steps ahead. Right.
02:22:07.794 - 02:22:50.266, Speaker A: We kind of really want to make sure the token, permissioned, access, and then these simpler features are solid and then integrate that governance once we have that product. A little more hardened, but definitely keen. Awesome. Well, thank you so much, James and Eric and both James, all three of them that are on this call. This was a great presentation and a great close to our day one of judging. And we'll try to end the live stream now and be ready for tomorrow. So with that, thank you, everybody, for demoing.
02:22:50.266 - 02:23:13.480, Speaker A: Thank you so much for everybody who was in all the different time zones that stayed out late to present and hear the comments and questions from our judges. And we can't wait for seven more days of more demos. So thanks again and we'll see everybody tomorrow. Thank you, judges. Thanks. Thank you. Thanks.
02:23:13.480 - 02:23:15.010, Speaker A: Bye.
