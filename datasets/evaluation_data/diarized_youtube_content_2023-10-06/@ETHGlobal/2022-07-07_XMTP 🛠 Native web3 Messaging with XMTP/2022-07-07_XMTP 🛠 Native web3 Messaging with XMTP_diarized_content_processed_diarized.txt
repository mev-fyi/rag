00:00:06.730 - 00:00:34.280, Speaker A: Okay, everyone. Hi. My name is Cree. I am part of the East Global team. Really excited to have Peter from Xmtp join us. He's going to be giving his talk native Web Three messaging with Xmtp before let him kick it off though, I will just let you guys know that we'll probably save questions for the very end. So maybe like the last ten minutes.
00:00:34.280 - 00:00:57.280, Speaker A: So if you want to do Q and A, you can just do the raise your hand reaction thingy and Peter can choose you and you can come up mute and ask a question. Or if you are like me and you're quite shy, you can just drop your question in the chat and we will have them all answered. And yeah, without further ado, Peter, feel free to take it away.
00:00:58.530 - 00:01:49.070, Speaker B: Yeah, thank you so much. We're really excited to be here. I love this. You know, I want to just kind of give an overview of what Xmtp is, get into a little bit of the technical details, but mostly just kind of give you a primer of what we're trying to do in web3, and then at the end have a couple of ideas of hackathon ideas that we have that we've been working on and just encouraging people to reach out, hoping that over this month we can be really collaborative. We just got done with obviously NYC and that was an awesome event. So just really excited to keep meeting people and building cool things. So to begin with, I just want to give an overview what is Xmdb? Kind of the core concepts of our protocol.
00:01:49.070 - 00:03:32.998, Speaker B: And then I'm going to go through the SDK a little bit, give some examples and get into ideas and then point you to resources that we have available to really make building with Xmdp pretty easy. So what is Xmdp at? A big picture, right? Like, if you think about the name, it's very similar to SMTP and that's very intentional. We're all spent a lot of our careers in messaging and email and the idea here was, can we build an open protocol and standards to let Wallets message each other? Right? So our goal is to really establish this protocol in which client develop people building apps, can plug into our network and protocol and enable messaging out of the box. And not just centralized messaging, but true native Web Three messaging in that all the encryption and the storage is done on nodes and that over time it'll be fully decentralized. So it's really about building this open, composable, decentralized communication network for Web Three in which all of the code will be open source and it'll really be community owned. Technically, how it works is we built it on top of Waku, which is kind of a wrapper on Lib P to P and we spent a lot of time really making that production capable where messages don't disappear and it can really scale to unbounded extents the idea is that messages would live forever. So that's a big engineering task and we're really just focused on the protocol part like we don't want to go out and build the Gmail for web3 or something like that, we really want to be the pipes.
00:03:32.998 - 00:04:51.290, Speaker B: So we spend a lot of our time and energy just focused on encryption storage so that messages can really be reliably delivered and that users can really message from anywhere across web3. So we think about it as we're not only enabling like a protocol for developers use to send mail but we're also building a network, right? So if you think about it with a wallet, a user of your application who wants to send a message and they put in another wallet ID, that other wallet ID needs to know that that message was sent. So what we're doing is we're working with a lot of wallets we're working with a lot of application developers DApps to really build out this network so that you can reliably reach people and that your users can have a really good messaging experience. And so with that why hackathons like hack FS are so core to this is then we're just trying to build use cases with developers. So really cool things like Token Gated chat somebody built like NFT Bartering over messaging on top of Xmtp and OpenSea. So that's where we're at right now is just trying to work with developers to build really valuable use cases that will then create value for end users and help build the network. So that's really our core mission.
00:04:51.290 - 00:05:47.770, Speaker B: We've been working on this for about a year. A lot of that again has been sort of like core protocol engineering work and now we're starting to get up and extend upon the SDK. So the core concepts are really at the protocol level. Users just send and receive encrypted messages through authenticated clients by way of a wallet signature, right? And messages are persisted in nodes upon the Xmtp network enabling portability of people's communications. So it really is this thing where users own their messages. So if you think about the decentralized nodes they all gossip out the messages. A user at any point in time could go on and pull down all of their messages from any one of those nodes or clients, right? Even somebody could quickly spin up their own client and pull down authenticate and sign and then pull down all of their messages.
00:05:47.770 - 00:06:54.842, Speaker B: So this really is getting into the territory of where users own their communications. We're not building another walled garden and then node operators, anybody can come along and host a node when we're decentralized and be part of that network. And again, like I mentioned before, clients and peers are implemented as waku two peers but we built more specialization on top of that functions and capabilities to make it just better at doing this at the client level. Clients really encode and decode message formats using a standard interface. So if you think about it, what we do is when somebody signs, we encrypt and then send that message and then the client, when the user signs it decrypts that message. Right? So encrypting and decrypting encoded message content, that's what clients do. And we think about clients as clients on the network and obviously submitting and retrieving encrypted messages to and from the network and then generating secure wallet based identities capable of encrypting and decrypting messages.
00:06:54.842 - 00:08:07.646, Speaker B: So I would say that right now a lot of people would think like oh, is messaging on chain or off? We're not on chain. What we're doing is building a parallel network, something closer to probably like a file coin. So when you sign with the Xmtp network, we generate this key pair relationship and then a client can access that and then pull down and decrypt messages, right? And then what we're working on is persisting wallet based identities locally or within the network so that the user experience is good where they're not signing all the time, but where we could persist it in the browser, someplace where users could have a really good experience. So that's at the client level. And then nodes, nodes are really relaying, they're all about relaying and health of the network. So when encrypted messages get stored to the network, nodes just really relay them and then retrieve them and then deliver them to clients. So in the future when we have a lot of node operators on the decentralized network, they're really creating health of the network and then that's where it becomes really community owned, where nobody can really prevent messages from being sent or received.
00:08:07.646 - 00:09:01.462, Speaker B: And the more node operators there are, the better the network health is. So let's just at a very simple level look at kind of the current state of the architecture. So if you think about a wallet might have composer functionality that uses the Xmtp SDK and an inbox. So users like the wallets that we're working with, users will have an inbox and they'll be able to compose and receive messages facilitated through the SDK and that will talk to the Xmtp network. So in the beginning Xmtp will host all of our nodes, right? So we are sort of in production now. Production doesn't mean something like main net, it's still on a testnet. But production means that we're not wiping the network messages were persist.
00:09:01.462 - 00:09:55.434, Speaker B: It doesn't mean that there won't potentially be a breaking change or something as we go. But we're able for clients to ship messaging based applications to production and we have production level support, right? So we're ensuring uptime, we're on call, we're doing all the things necessary to make sure that clients have a good experience. We are hosting our own nodes in the beginning because we want to ensure that one, we can prevent denial service attacks. So we want to ensure there's a health of network and we want to be able to control attack vectors in ways that might be unknown to us at now. So what we're doing is we're hosting our unknowns to prevent something bad from happening. But we're on a progressive, decentralization roadmap where these nodes will then go to probably app partners who are building apps and then to anybody who wants to host a node. But how it works at the top level is all the same.
00:09:55.434 - 00:10:50.394, Speaker B: So whether you're a wallet or you're an app adapt, you all can just plug into the network and use the SDK out of the box to really bring messaging into your apps in a few hours in the future state. This is really what we're working on. So right now you can think about it's very sort of simple messaging, right? Text can be sent back and forth between wallets and the network facilitates it. But there's a huge opportunity for the ecosystem to keep expanding. And that's why I think an event like this is so core because there's so much opportunity to create value in the messaging stack, right? So if you think about things like spam or safety, so we will be the dumb pipes and just like SMTP will deliver email that gets sent over it. We're the same way. We're not going to be in the business of trying to provide block spam at the protocol level.
00:10:50.394 - 00:12:17.542, Speaker B: What can happen is at the client level, the client can do this and there's all these new and unique ways to do that in Web Three, right? So if you think about like token gated chat where a user can say, hey, I only want to say I want to use Lens or I want to use the lit protocol, I want to create rules on who can send messages to me or who I receive messages from or different channels that I'm part of. So you have these cool opportunities to build these tools that don't necessarily need to be an end client, meaning like a messaging application, but there will be a lot of services in the stack that create a lot of value, whether that's spam and safety like controlling attack vectors or that's using a thing like a social graph. So like lens or cyber connect or obvious identity. So I think it's important to start thinking about the different layers on the messaging stack across different things like Wallets, DApps, Marketplaces, as they all have unique needs. And so we really see this ecosystem of development partners where we're sort of the network and then people are creating a lot of value on top of that for all of the application developers. So just like traditional messaging stacks get incredibly complex, the same thing will happen here. So we look at that as a great opportunity for people to not only build cool projects, but actually these will turn into companies.
00:12:17.542 - 00:13:14.534, Speaker B: And I'll talk a little bit about that in the end. So messages are off chain. Essentially all blockchain wallets are supported, right? Well on, you know, we're using EVM chain and then it'll literally just work on polygon. So anywhere that EVM is supported, we're interoperable across those chains, including testnets. So it's pretty cool, like it'll just work out of the box in those environments. So getting into the SDK, so we have a JavaScript SDK, so React JS, that's open source now. And what this really handles is authentication, as I mentioned, the connection management, generating the key pair for the relationship, key storage and the signing relationship initiation.
00:13:14.534 - 00:14:07.622, Speaker B: So between a sender and a receiver, establishing that relationship and then obviously creating a conversation, sending a message, retrieving the history of all your messages, like all of your conversations, streaming messages. So when a new message comes in, sending it out to the clients. Content validation. So I'll talk a little bit about content types, but essentially we send across a payload so the SDK can validate that content and if it's not correct, can gracefully degrade and then format validation similar to that. Sorry, I'll peek at the chat. So message attachments, this is really good and I'll talk about this in a little bit. What we're working on is sort of a community driven process we call XIP.
00:14:07.622 - 00:15:01.658, Speaker B: So if you think about EIPS, these are XIPS and one of those is called XIP Five, which is message format. So if you think about Mime and SMTP, it's the same thing that we're building in Xmtp right now. It's just string, right? It's just strings of text. Next thing that we're working on are things like images and then obviously video. There's other really cool things like buttons, so links obviously lead to a lot of fraud and spam. And so what we're building with developers is the definition of those standards around the payloads so that we can support unique attachment types, right? So I would say that we're not there yet, but that's where we're going. And that's being driven with development partners currently.
00:15:01.658 - 00:15:51.754, Speaker B: So as you think about these experiences you want to build, that's something that you can come in, right in with an Xap, define it, put it out to the community, and then people sort of refactor on it, and then it becomes part of the standard. And then over time, the protocol, really, it becomes part of the protocol. So it's like a standard set in stone. Let me just keep going just so I can get through a couple more slides and then I'll get back to the chat. So the SDK is, I would say, very simple. The thing that I think we've done well here is you can really spin up a messaging client in a couple hours. And we also have a fully functional example react chat app that's open source as well.
00:15:51.754 - 00:16:41.262, Speaker B: So that has all of sort of the UI tied to the SDK. But the SDK is intentionally simple. Right now it's in react JS only we're currently working on React native and then we'll get more into mobile like Swift and go down that path and then server to server supported wallets. I kind of talked about this, but the SDK doesn't include a wallet abstraction. It's assumed. We're assuming that you already have a way of obtaining a wallet connection, like a wallet connect or something like that, so we don't handle that. And identities must be generated, generated from and associated with an ethereum wallet's, public address and private key.
00:16:41.262 - 00:17:25.226, Speaker B: So those are like things that we expect clients to be able to and those are like core requirements on generating identities. I just talked about content types. I think this is one of the coolest things that will come as part of the development of the protocol Xmtp. And that's really just these content types, right? So as I mentioned, it could be images and videos. But what we're starting to see from developers are just really cool things. Like somebody at Ethnyc built this bartering system on top of opencnc port and Xmtp, where you could essentially chat back and forth with somebody who had an NFT. You don't even need to know their public identity, just their wallet address.
00:17:25.226 - 00:18:31.070, Speaker B: And then as part of that payload, he included links generated from Seaport that would basically say like accept offer or reject offer. And if you accepted the offer, it would actually execute the transaction, right? Right now that's driven through like link based URLs, but that could be a button content type, right, where you could literally see accept offer or reject offer happening completely over messaging protocol. And that's enabled because when clients adopt a standard, then clients can trust that structure and render those buttons. And if you see a link, then we can get rid of links that are leading to so many spoofing and fraud issues. So obviously with Web Three and on chain data, there's all these completely new and unique ways of thinking about those experiences and messaging. So I just wanted to call this out specifically because I think it's a really fun way to engage and think about different experiences you can build. And then again, as we're early in the protocol development, it's really an opportunity to come in and help define this.
00:18:31.070 - 00:19:31.490, Speaker B: So what we've seen is developers go out and build something, they come back and they're just sharing it with the community. And then our job is to kind of triangulate this stuff and help it become a standard security. So what we're really focused on is establishing secure, unfalsifiable relationships between identities, right? So that's what we're trying to focus on is helping people enable these trusted communications in which they can verify, sender and receiver and trust the identities. And the other thing is only those parties can then encrypt and decrypt messages. We have no visibility into the contents of messages. It will literally only be the sender and receiver through the encryption and decryption process. And the other thing that's cool is we purposely designed the protocol with the ability to replace algorithms.
00:19:31.490 - 00:20:59.358, Speaker B: So the algorithm set on encryption and security will be extensible in that we understand that things will change. And so we've sort of added this layer of abstraction in a backward compatible manner, but that way we can replace things in the future. So it's sort of a future safe model. And again, I think this opens itself up to obviously being open source and people improving upon the protocol itself and contributing. So just something that I want to keep reinforcing as a theme is we're not going to be this black box protocol, we're really obviously going to be community owned and open source. But it's a fun time to come in and help sort of design some of these standards at the security algorithm level, at the content type level, and then obviously at the node level on the network. So what we are trying to show with Xmtp is we want to be part of this composable web, right? We are very focused on being one of many protocols that live in the messaging stack, one of many protocols that live in client messaging applications and building a community in which we're collaborating with other protocols and developers because we believe that web Three people are just going to build user experience that have never been seen before.
00:20:59.358 - 00:21:52.394, Speaker B: What we don't want to build is a walled garden. So things that have been had a lot of success at Hackathons, in fact at Ethanyc, two out of the ten were finalists using Xmtp. It's just using these different protocols to assemble these client experiences. So if you think about like Xmtp and lit being able to add inbox filters using Lens, we've done things where it's Xmtp and Cyber connect, where people can just leverage a social graph out of the box so people can already see their known connections on who they can send messages to and receive messages. You know, please, by all means build whatever you want. We're offering three prizes and then a prize pool and we're going to always be rewarding. People are being creative.
00:21:52.394 - 00:22:34.000, Speaker B: So think as crazy as you want to think. We're just trying to encourage this view of Web Three in which all these protocols work together and the more that we can collaborate the better. So resources. GitHub.com Xmtp as I mentioned, it has the JavaScript SDK. It does have this fully functional react chat app and that has everything. So obviously the authentication conversation views all of your conversations, message composition, retrieving messages, all of the things the SDK just works out of the box in the react app and a pretty good quick start guide to get you going.
00:22:34.000 - 00:23:18.554, Speaker B: We have our docs at Docs Xmtp.org and then we're very active on Discord and we'll be very active in the Hackfs Discord channel as well. The other thing, if you look at our listing on the Heck FS site, we've listed a ton of previous hackathon examples and pointed to the repos and demo apps. So there's like different ways to render the conversation views, different ways of showing this composability of Web Three. So if you need something or need an example, just hit me up in Discord and I'll send it to you. If not, check out our page on the hecfs site. And I think it has a ton of resources, so I know I only have a couple of minutes.
00:23:18.554 - 00:23:56.790, Speaker B: I'll stop. Our roadmap is very much focused on this progressive, decentralization, and obviously in future enhancements of the protocol, I would say the number one thing that we're focused on is reliability of security, message transport and storage and then just working to support all the applications on top of the protocol. So hopefully this wasn't too boring. I know it was pretty dry, but I think it's just really important in how you think about Xmtp as you start to build applications, and hopefully it's helpful in this hackathon.
00:23:57.370 - 00:24:14.480, Speaker A: Yeah, that was awesome. Thank you, Peter. I was just going to say yeah, it seems like you have a lot of questions in the chat, so that's really cool. So we are good to go over like five minutes past the original time just so you can get those answered if you'd like.
00:24:16.850 - 00:25:01.594, Speaker B: Yeah. So one thing I'll say, I'm going to take all these questions. I'm not an engineer, so I'm sort of like a technical product manager, but some of these questions I may not be able to answer, or I don't want to answer them incorrectly, so I'll be sure to respond to everybody. But something like how we handle key storage, I don't know at a deep level. Or I'll follow up and get that question answered to you, I would say, with Zach. So could File pick video attachments be colluded through a Filecoin bridge? Totally, right. I think that if you think about the payload, you can build any client experience you want.
00:25:01.594 - 00:25:46.220, Speaker B: And people are already doing this where they're using Filecoin, they're using IPFS to do different things. In fact, in that NFT message bartering system, he was using IPFS to store all the contents up there. So we're really encouraging people. And it'll work. It's easy to work with Xmtp and other services. I think the key is then how do other clients understand this? Meaning you can build an application and use Filecoin, no question. What we're trying to do is then is there a standard to be developed and how you do that so the payload itself can become standardized where other clients on the network understand that payload and can render that.
00:25:46.220 - 00:26:19.174, Speaker B: So that's really the work that we're trying to do. And so I think that the answer is yes. And then how it becomes permanent is the question over the next six months emojis totally. Supported. We don't have an emoji picker in the Example chat app, but I built examples on my own, just with NPM plugins that work. And the emojis will get sent across and rendered in the clients. Yes.
00:26:19.174 - 00:26:56.830, Speaker B: So how does Waku fit into XMT? Waku is just lib P to P. Like, it's a peer messaging protocol that is open sourced, currently available. So what we did is we started with something that kind of had the base structure of what we wanted and we built on top of it and it just helped us move faster. Right. And it doesn't mean that we had to make less compromises to go faster. Long term, we'll probably build our own Waku, we'll replace it. But it really is just think about like a pretty stable foundation to build upon.
00:26:56.830 - 00:27:39.120, Speaker B: I'd say we've done a lot of work and you can see we've done a lot of pull requests that have been accepted into Waku to be a little bit more stable and reliable. But it's a peer to peer messaging protocol that was available that we built upon. Yeah. So our goal is fully I'm reading Dyson's. Are there plans to decentralize the Xmtp network? Our plans are to be fully decentralized. No questions. And it's really because we want to establish an open protocol in which messages are immutable right.
00:27:39.120 - 00:28:35.666, Speaker B: In that anybody can host a node and can reliably send and receive messages. So we look at that as an essential requirement to how messaging would work in Web Three for everyone's benefit. So it's going to take us some time and that's okay because we want to do it right. Our engineering team has deep expertise and security in building these systems. So it's not going to happen overnight, but it's something that is going to happen not only as a tenant of our own roadmap, but with our development partners. It's sort of like a key requirement for them as well. So Kit's question is, do you have to pay for each message transaction? Like when a message is sent, does someone have to sign off on the cost at any point? So right now, no.
00:28:35.666 - 00:29:23.130, Speaker B: Everything is free. It's important to note that it won't be free forever. And I think that's really important. And how we're looking at it is there'll be a microtransaction between entities that do not have an established connection. Meaning you may have an established connection through, like, lens or through a social graph, or you may have established a connection on a marketplace with other people. So you would be able to send and receive messages for free. But say that an entity wanted to reach a bunch of people they did not have established connections with, they would pay a microtransaction for that and presumably node operators would share in that revenue.
00:29:23.130 - 00:30:28.706, Speaker B: Now, I will say that there's a lot of questions in TBD on this. It's not going to happen for quite some time, but it will be something in which the market would set the price, meaning we won't be the entity to set the price and collect the revenue. It would be something where the market economics would drive the price and that everyone participating at the node level would share in it. But again, that will be quite some time down the road. Suzanne asks could Xmtp use to easily identify users accumulating idea of information at different platforms and in, for example, WorldCoin ETH names, unstoppable names and similar? Yeah, absolutely right. I think that what we will build is a network and that network will have identities and those identities will become more and more known over time. Again, I think we'll be trying to make ourselves as functional with entities.
00:30:28.706 - 00:31:23.246, Speaker B: I mean, ENS is already supported. Somebody built something with WorldCoin at Ethnyc, so is WorldCoin identity with Xmtp. And as you think about the network itself, it will understand those identities over time. And I think that's really important as those identities then have a social graph attached and we're able to understand who those people would want to message or receive messages from, you can quickly see that it becomes really core to what we build. So, great question. Just scrolling up through the questions here, frayin. I think I covered which wallets are supported.
00:31:23.246 - 00:32:17.780, Speaker B: It's just really any EVM wallets will work. Yeah. So Sirkari asked how does this differ from the Block Scan chat and other chat platforms? So I think this is really important. We're building a fully decentralized messaging protocol which is completely different from a centralized messaging platform. So Block Scan, you can sign, you can sign with a wallet, but then the back end is completely centralized. Now, I don't know what they're doing on the back end, but presumably they could read contents, they could be doing things that a centralized messaging service would do. It probably makes a big deal, a big difference.
00:32:17.780 - 00:33:33.482, Speaker B: When we're fully decentralized, it really becomes a community owned and run network in which we don't then become the governing body over all of the decisions. In fact, if you looked at our term sheet like we will be a minority holder of node operators in the incentives model of the network. So over time centralization and decentralization will really matter in that not one entity can control the network. So we look at that as a really important distinction in our mission, in that we're trying to enable something like SMTP where not one single entity owns it. And that's really important with messages because that means that messages can always live in a decentralized network versus if a single entity owns it, they can control what can go through what can actually reach users and control the cost and different things. So we want to avoid that. I'm looking at Zon, but how are you going to teach community to drive itself properly? I don't know.
00:33:33.482 - 00:34:13.174, Speaker B: I mean, those are just questions that we'll have. To encounter. I think if you look at something like SMTP, that's sort of an established paradigm in which there's an open source protocol and people can spin up and host SMTP nodes and handle the sending and receiving of messages. So I don't think it's about people behaving properly or improperly. I think it's about building a global network in which developers can use to send and receive messages reliably, and then typically, the market will govern itself. What we don't want to be is in the censorship business or regulating who can send or receive messages. It's really about establishing a protocol in which wallets can message each other.
00:34:13.174 - 00:34:33.070, Speaker B: So we're not trying to be in sort of the political mindset. What we're trying to do is build technology that allows communication between wallets, and those wallets can expose their identities, or those wallets could just be wallets. Right? So our mission is really building this protocol and not governing then the people who use the protocol.
00:34:36.450 - 00:35:01.542, Speaker A: Awesome. Okay, well, we are at time. Thank you so much, Peter. That was super helpful. Thank you, everyone, for the questions. If you have any more, or if, like Peter said, you need more technical answer, hit up their discord channel, go ask your questions there anytime you want, and they'll be monitoring it. And yeah, thanks again, Peter.
00:35:01.542 - 00:35:06.780, Speaker A: Oh, and yeah, this will be recorded and posted for you guys too, if you need to refer back to it.
00:35:07.790 - 00:35:10.150, Speaker B: Thank you so much, everyone. Bye.
