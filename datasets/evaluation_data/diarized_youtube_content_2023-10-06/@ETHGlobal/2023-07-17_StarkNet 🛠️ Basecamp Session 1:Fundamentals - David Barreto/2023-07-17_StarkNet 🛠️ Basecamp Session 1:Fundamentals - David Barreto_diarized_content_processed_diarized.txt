00:00:06.330 - 00:00:21.242, Speaker A: So welcome to basecam. Cohort four. This is session one, one of seven. Okay. My name is David Barretto. I'm one of the developers advocates from Stagware. Focus on stagnet.
00:00:21.242 - 00:00:57.614, Speaker A: Of course. You can see here my Socials, my Twitter, my block as well. And I'm here with also Manmeet and Omar, who are also developer advocates from Stackware. So in this cohort of Basecam Cohort Four, we're going to have seven sessions in seven weeks. Each session lasts for 2 hours. What we expect roughly is that out of those 2 hours, 90 minutes is going to be the presentation or some live coding. We have 20 minutes for questions which you don't have to wait for the end or just whatever question you have.
00:00:57.614 - 00:01:28.600, Speaker A: Use the Q and A and Manmit and Omar will do their best to try to answer them. If any of you don't know the answer, you want to discuss it, please, Omar, Manmit, interrupt me. We have a discussion live as well. We will share in the Q and A for you guys after the session in an email so you have that as a reference. We will have ten minutes break as well. And just so you know, the last session of Basecamp Core Four is going to happen May 24. So it's going to be kind of like two months in the future.
00:01:28.600 - 00:01:46.382, Speaker A: We have some homework, but it's optional if you want to do or not. Just take basecam as a way to learn everything about strengthnet and Cairo. It's up to you how much you want to get out of that. So we don't have any formal aggravation. We're going to be reviewing the code. We're just here to support you. That's why the discord is important.
00:01:46.382 - 00:01:55.220, Speaker A: If you get stuck with homework, go to discord, try to get support from your peers. We will also get to hang out there to help you guys as well.
00:01:57.350 - 00:02:01.554, Speaker B: David, there's a question regarding the slides. Can we share the link?
00:02:01.592 - 00:02:16.760, Speaker A: Oh yeah, that's a good point. Yeah. Okay, let me share. Publish. Is there in A-Q-A? Yeah. Committed tab and answer.
00:02:22.030 - 00:02:24.794, Speaker B: So it stays there in the chat as well?
00:02:24.832 - 00:02:25.420, Speaker A: Okay.
00:02:25.790 - 00:02:26.860, Speaker B: Yes, please.
00:02:38.070 - 00:03:09.738, Speaker A: Is it working for you, Omar? Can you open it or anyone in the chat can come in? Let me know if you can open the slides. Okay, cool. People are able to look at the slides. So as I mentioned, we're going to have seven sessions for a Basecom. So today is about fundamentals, just the getting started, about everything. About STARnet Cairo, hopefully to have a basic dev environment set up in our machines and to deploy an example of smart contract to start so you get to interact with the network as well. Session Two next week is going to be a deep dive.
00:03:09.738 - 00:03:43.580, Speaker A: So basically it's like a part two of this same talk today. Session Three is actually about caro one going through the syntax, and if any of you have been at Stagnate for a while. You will know that caro zero is a very different language from caro one. So we want to take some time to go through all the details about the syntax. Session four is about testing and how do you test Cairo one smart contract. Then session five is about the Starnet's architecture. We will see some architecture today at a foundational level, but then session five, we're going to go deeper into it.
00:03:43.580 - 00:03:58.590, Speaker A: Session six, we're going to look at Cairo's architecture because Cairo has a very specific CPU architecture that we're going to discuss there. And the final session is going to be about starks the ZK proof that underpins stagnet.
00:04:02.040 - 00:04:02.500, Speaker B: Okay?
00:04:02.570 - 00:04:38.320, Speaker A: So some things that you should know is that after each session you will receive an email that's going to have a link to the recording. It's going to be a link to a YouTube video, a video that's going to be unlisted. So you will need the link to see it going to also share the Q A from the session. That's why we're trying to push people to have any question use the Q A because that way we can share with you after. So you have it as a reference. We're also going to send a feedback form because we want to hear from you guys. How do we improve basecam session? Not only base cam as general, how do we improve for next session, for next week? So please give us your feedback.
00:04:38.320 - 00:05:21.968, Speaker A: We're going to tell you what's going to be the homework in the email and also a form so you can submit your homework. In this case, any GitHub repo or your Stagnant address where you actually deploy it. Use the Q A system to ask questions instead of the chat and use Discord to get help from peers. So if you provide your Discord username when you register to basecam, you should already been added to a private channel on Discord in the Stagnate channel, the Stagnant Discord server. If you didn't it's because there are some issues. Either you were not part of the Discord server. So try to first of all get into the Discord for stockware and then we will add you.
00:05:21.968 - 00:06:14.014, Speaker A: Some people we were unable to actually add you because there's some rules about security, about the bots that we cannot bypass. So I'm sorry that's one of you, if that's your case, please use this session to ask all the questions that you have. So for today's agenda, we are going to cover why Cairo, why Stagnate? So cairo the programming language stagnate. The layer two with Cairo is used. We're going to also see a basic view of the stagnet architecture. We're going to do also basic view of Kyra one, we're going to discuss some of the tooling that you have available as a developer. We're going to have a little break and then we're going to do some live sessions, setting up a basic dev environment from scratch.
00:06:14.014 - 00:06:55.616, Speaker A: So I'll be using in this case a VM with Ubuntu, so you can see the whole process from start to finish. And we also have that documented. I'll share the links to where that has been documented. Any interesting questions, Omar Manmit to discuss now live, you can vote on your favorite question, the Q A as well. So that gives us more visibility, right? We lost, Manmit. So this is some question here. Which Disco server channels is dedicated to the bootstrap, the bootcamp.
00:06:55.616 - 00:07:36.088, Speaker A: Thank you. It's called bootcamp, sorry, basecamp Cob four. Yeah, that's inside of the Discord server. All right, let's get started. So, why Cairo? So, I like to start this with actually a story. So, imagine you are the head of a space exploration agency in a small country and your task is to send a spacecraft, a small one, like a robot, to a planet, let's say Mars. So of course you have to do a bunch of calculations.
00:07:36.088 - 00:08:13.240, Speaker A: And the most important one is when is the right launch window in the best trajectory. So you use the least amount of fuel, so the rocket is the smallest as possible and it takes the least amount of time. So those competitions are very complex. To perform requires a lot of computing power. So probably you will go to your engineer and say, hey, could you rip in the algorithm in some very high performing language like Rust for example, so we can get those results. We can just know those two variables, the best launch window and the best trajectory. So sure enough, they create the algorithm.
00:08:13.240 - 00:09:27.090, Speaker A: But it's very complex because so complex actually requires a supercomputer to be executed in any reasonable amount of time. But you had the issue that you don't have a supercomputer because you are in a small country, you don't have access to a lot of resources, but there is a rival country that has been willing to help you out. They have one and they have offered to execute your code and give you the answer. But then you have the issue that sure, you can provide the code to them, to the rival country, they execute it in their supercomputer and they will give you back the answer, right? So they give you those two variables, launch window and the trajectory. But then you have a problem. How do you know that that is the right answer, that is actually the result of executing your programming exactly the way you write it? How do you know that the supercomputer didn't malfunction like one bit flop doing the calculation? Or maybe there was some kind of sabotage, maybe even a small change in how the computation is performed could be a disaster for your space exploration. So you don't have a way to meaningfully to be convinced that that result is actually what the algorithm that you wrote or your team wrote actually was supposed to find.
00:09:27.090 - 00:10:34.708, Speaker A: So not even with any traditional language, you cannot have that certain thing, not even Ros, not T, not any language. But with Cairo you actually can because Cairo is a provable language that when you execute it let's repeat the scenario this time you write the algorithm in Cairo instead of Rust, you provide that code to the supercomputer of the Rally Country. But now then, because it's been used with Cairo, not only do we give you the result back and they also will give you a cryptographic proof that Verifies or will let you verify the validity of the computation or the integrity of the computation. So now you can take that proof and you can use any regular computer and just verify the proof. And that verification will let you know in non certain terms or in a mathematical certainty way that the result that you're getting is actually what was supposed to came out of the execution of your program. This is called computational integrity. So now if the execution is intentionally or unintentionally modified, the proof will be invalid and you will know it right away.
00:10:34.708 - 00:11:10.460, Speaker A: So there's no chance someone's going to sabotage your program or that there was some malfunction and you didn't know. You will know right away. So with this, with Cairo and the fact that you get cryptographic proofs out of execution, a regular computer, in this case a laptop, is able to keep a supercomputer honest and that is a superpower that only languages specialized like Cairo specialized for validity proofs can provide. Okay, just a SEC. Just trying to make the Q A visible for me as well.
00:11:11.510 - 00:11:18.130, Speaker B: David, just one question here we have channel in Discord for Discohorts.
00:11:18.790 - 00:11:22.850, Speaker A: We do. Someone actually provided based on Cohort Four, that's the name.
00:11:22.920 - 00:11:28.180, Speaker B: Excellent, thank you very much. Shipping, I saw that. Okay, perfect.
00:11:28.950 - 00:11:48.220, Speaker A: Yeah. If you provided your Discord username when you register, you should be in the channel already, unless you were not part of the Discord server. So if you were not, try to join the Discord server for Stagnate and then we will review the list again and add the new people that enter the server later.
00:11:48.910 - 00:11:55.726, Speaker C: David, if it takes just a you, could you please add me so I can also take a look at the questions and be able to answer them.
00:11:55.748 - 00:11:56.590, Speaker B: On zoom.
00:11:58.450 - 00:12:00.826, Speaker A: To add you to Discord?
00:12:01.018 - 00:12:03.360, Speaker C: Just the Q-A-I have the.
00:12:07.910 - 00:12:09.490, Speaker A: You can just open the window.
00:12:10.550 - 00:12:27.190, Speaker B: It's opening, we can figure yeah, no problem. Go ahead, David. Okay, so we have a lot of questions here, but we're trying to answer them and let you know what can we answer live?
00:12:27.340 - 00:12:47.518, Speaker A: Let me just try to answer a couple of them. Maybe you can type the answer as well so they have it as a reference. But let me just see interact with the audience. Let me see some of the questions. At least the one have been voted that have not been answered already. Sir, skip the intro. So what do I have to do to graduate? Can attend all the sessions 100% do the work.
00:12:47.518 - 00:13:10.600, Speaker A: We don't have a formal graduation this time we're going to give you homework. It's up to you if you want to do it or not. Just take base cam as a way to learn as much as you want from Cairo and stagnet. This is because we don't have capacity to assess hundreds of people submitting homeworks every week a reliable way. And we realize that the goal here is just for you guys to learn more.
00:13:13.130 - 00:13:22.140, Speaker B: We can do cool stuff. You will see that it goes to something. It will be worth it.
00:13:23.150 - 00:13:43.940, Speaker A: Box says we really need have to focus on Cairo One. No reason to do carrot zero anymore. Yes, in this base cam, we're not going to do any carrot zero. It's just all about car one this time. Just be mindful. Car one is super new, was just released to Mainent very recently. So it's going to be a little bit rough around the edges, but it will improve over time.
00:13:43.940 - 00:14:38.380, Speaker A: How can we sure that the proof is not tampered? So the probability of you being able to create a cryptographic proof that is going to fold the verifier is one over 1 billion times 1 billion times 1 billion times 1 million. So it's very small that you can actually do that. To understand exactly the reason why, you have to wait until session seven when we discuss actually Stark, the math behind these validity proofs, please turn on caption. It will be super helpful. You know what, I try last time, I don't know where it is. Can you omar, you're the host. Can you take a look to see if there's a way to enable captions? I know the last time or some previous time we were able to I just don't remember where.
00:14:41.070 - 00:14:44.890, Speaker B: Sure I'm looking for this. I don't promise.
00:14:47.150 - 00:14:55.920, Speaker A: All right, let me continue. Omar, if you see any interesting question, please interrupt me and we can have a discussion. Sure.
00:15:01.170 - 00:15:02.240, Speaker B: I don't know.
00:15:03.750 - 00:15:49.012, Speaker A: Okay, so to summarize, why Cairo? So first of all, it allows you to create what's called a provable program for when you can create a cryptographic proof that attests to the integrity of the computation. So as I mentioned, the cryptographic proof is generated alongside the result. Proof verification can detect cheating or malfunctioning without reexecution. That last word is the key to why we use the proof for scaling ethereum. We're going to look more into that in the next section. So you can summarize this by saying that a regular computer is able to keep a supercomputer honest when you use a language like Cairo. Okay, so we talk about Cairo.
00:15:49.012 - 00:16:23.156, Speaker A: So why do we need StarkNet? So let's think about the issue of scaling on layer one. Sorry, just a second. It disabled disco because I hear so many notifications that are distracting me. Okay, so in layer one. In case of ethereum we have what's called a block producer which is going to give you, okay, it's going to tell the network, hey, here's the new state of the network. Let's say the state is 42. But of course all the other validators in the network, they just don't going to take the word for it and say, oh yeah, sure it's 42.
00:16:23.156 - 00:17:04.930, Speaker A: They will actually execute independently the same block and verify that they all get to the same result independently. So that's part of the consensus. That the actual result. They all get to a consensus is actually 42. So as you can see, even a small or a simple computation takes tens of thousands of computer to actually execute, right? Because they all need to execute that independently and get to a consensus. So you can see that is fairly inefficient in that regard. So this is how ethereum achieves computational integrity, but by reexecuting the same transaction over and over.
00:17:04.930 - 00:17:46.160, Speaker A: In the case of a stagnet, we execute only once, but then we verify everywhere. So on a stagnet you will do something similar. You process transactions and then you propose a new state. Let's say the new state is 42, but not only you provide the new state, you also provide the cryptographic proof. And now the validators were just ethereum nodes, ethereum validators. They don't have to re execute the same block to see if it's 42. They only have to verify the cryptographic proof that was provided and that will give them mathematical certainty that the actual answer of the new state is 42 without having to re execute all the transactions in the block.
00:17:46.160 - 00:18:48.688, Speaker A: And as you can see, the verification takes only a fraction of the actual underlying computation. So you can see visually here why a layer two like a stagnate is so much more performant. Because now you don't require every single node of the network on layer one to re execute all the transactions. They only need to verify the cryptographic proof and that takes much less effort. What's the connection? How less of an effort? Well, if the execution takes N steps, the execution done by the sequencer on a STARnet, then the validation of the cryptographic proof associated with it actually takes lock square of N. So this polylogarithmic relationship and it's easier to see in this graph, so this blue line going vertical sorry, going in the diagonal is actually the amount of steps of certain computation. And you can see the red line is the amount of steps of the verification of the associated cryptographic proof.
00:18:48.688 - 00:19:31.500, Speaker A: So the bigger the gap between these two curves, the more you achieve in saving computing power from the whole network to achieve the same result of creating new states. So you can think of validity proofs. This analogy, a validity proof is to computation what zip is to a file size. It's all about compression. Just in the case of validity proof, it's a compression of computation while zip is a compression of file size let's see any interesting questions? Any question here? Omar Manmit?
00:19:31.940 - 00:19:38.640, Speaker B: Yes. If I inquire is asking what is honest? Supercomputer honest?
00:19:38.710 - 00:20:12.300, Speaker A: Percomputer you don't need the supercomputer to be honest. As long as they use the Cairo VM and you have access, we're going to have to see. You'll need to have access to the underlying Cairo program. So we all have an agreement which program is being executed. But as long as the supercomputer uses Cairo VM it will able to generate this cryptographic proof that the computer will not be able to tamper. Or if they do you with a verifier independently you will be able to spot when they are trying to cheat.
00:20:17.040 - 00:20:23.040, Speaker B: Sorry, when you say cheating and being honest, what do you mean? What is cheating in this context?
00:20:23.860 - 00:20:50.870, Speaker A: Cheating will be trying to create a validity proof that try to attest to a computation that didn't happen or to attest that some computation that apparently happened provide a completely different result that it should have done. And you've been trying to fool the verifier that you have on your side. So it's the combination of both. I give the security of a system.
00:20:53.800 - 00:20:55.500, Speaker B: Thank you. Secure workstation.
00:20:57.840 - 00:21:06.204, Speaker A: Please. People in the chat, please use the Q A. Don't use the chat for questions so we can keep track. Yes.
00:21:06.242 - 00:21:22.070, Speaker B: We're focusing on the Q A. And also, David, here's a question. How can Aslio join the discord? I guess they're simply going to the discord of StarkNet join and what else?
00:21:23.160 - 00:21:28.900, Speaker A: If you can share the invite link to the discord server, put it there in the it will be helpful.
00:21:29.240 - 00:21:46.300, Speaker B: Also, let me invite you to the telegram. I will send you a link in the chat so you can join the telegram here of English pickups. It's only for builders. So if you want to go there and we can just talk a little bit more and contribute, you can ask questions and so on. So I will send you the link also for the discord.
00:21:48.160 - 00:22:17.796, Speaker A: Cool. Thank you, Omar. All right, let's talk a little bit more about validity proofs. So, validity proofs are an implementation, what's called the zero knowledge proofs, or CK proofs. And it uses CK proof to guarantee computational integrity. That's basically to guarantee that certain output is a result of computation with input. So you can think about that as, like, doing the right thing even when no one is looking.
00:22:17.796 - 00:23:09.792, Speaker A: That's one way to think about computational integrity. So we use validity proofs and CK proofs not for privacy, which is a common misconception about STARnet. We use it for scaling ethereum as I showed you before, the comparison of the layer one and the layer two validators so STARnet right now is not about privacy it might be in the future, but right now it's not. That's why we think that ZK rollup is a misnomer because it kind of implies some privacy we prefer the term validity roll up for STARnet. And to be fair, pretty much any other ZK rollup out there uses validity rollups. None of them, to my knowledge, actually are focused on privacy after, I think Aztec shut down their own layer two. And very importantly, the type of ZK proof that STARnet uses is Starks.
00:23:09.792 - 00:23:49.868, Speaker A: We don't use Snarks, probably have heard both PNC proofs, but we use Starks. And there's an important reason why we chose to go with Starks and Snarks that I want to review here. So if you compare these two type of ZK proofs, the verification time for a Stark proof is polylogarithmic. If you recall the chart that I showed you, in the case of a Stark, it's actually constant. So it doesn't matter how complex the underlying computation is, the amount of work to verify the computation is always the same. Now, the proof size that we sent to layer one for verification in the case of Stark is pretty big. It's about 400 KB.
00:23:49.868 - 00:24:27.788, Speaker A: In the case of a Snark, it's pretty small. It's only close to 300 bytes. So it begs the question, if the Snarks are so much better than the Stack, why did we actually chose a stack and Snark or stagnet? There are very two important reasons for that. First of all, when you use Snarks, you have to go through the trusted setup, the trusted ceremony, where you have to fit the system with a secret, and you have to make sure that the secret is properly disposed, because if that secret is being leaked, the whole system is compromised. In the case of Stark, we don't need a trust setup. It works even without that. So it's one less trust assumption for the security of the system.
00:24:27.788 - 00:24:52.890, Speaker A: It's also very important the Starks are quantum secure, which Starks are not. So whenever quantum computers come alive with sufficient power, they will actually break a Stark, but they will not break a Stark. So we are making a bet on the future to the maximum level of security that we can think of. Of course, that has a price in the proof size, but it's better to be safe than sorry in the future. That's all. At least we'll be thinking.
00:24:56.220 - 00:25:10.670, Speaker B: David, good question here. So there are some people that join the Discord of STARnet mode. They have not been added yet to the channel. So how can we proceed in that case?
00:25:11.280 - 00:25:44.152, Speaker A: If you joined just recently, allow me some time to get in touch with the Discord mod who is in charge of the channel, so they can add you just make sure that you actually provided that your Discord username when you register, and we will try again to add you to the server. Some people might try to join the Starware server and might not be able to. And that's because some security bots. That's something that we cannot do anything about that. But if you actually were able to join. We will add you to the discord server. Just maybe tomorrow morning maybe they can.
00:25:44.206 - 00:25:51.576, Speaker B: Send their discord name in the chat, right? And we can yeah, Omar, if you.
00:25:51.598 - 00:26:04.236, Speaker A: Can take a note of that, it will be super perfect. Okay, so maybe start A-Q-A and people add their discord username. So we have one place to track all the people who were added to.
00:26:04.258 - 00:26:19.024, Speaker B: The oh, I think it's okay. In the chat we can download it and then please add to the chat your discord name in case you haven't been added to the discord channel. And we will add.
00:26:19.222 - 00:27:00.040, Speaker A: Thank you. Let me see more questions. I wonder if this is a way to hide the one that's been answered. Okay, is there a possibility to keep the algorithm private so the supercomputer cannot steal algorithm and they use it later and not now? No, because as I mentioned, STARnet is not about privacy, it's about scaling. And so you have to share the algorithm. So basically when you use STARnet, you have to publish your smart contract so it becomes visible to anyone to use it.
00:27:02.980 - 00:27:30.170, Speaker B: If you answer it. David, please click on Answer Live so we know you already answered. Okay, there's two questions from Fox, from XOP, so man, you know that there are okay, what do you think about the Snarks using a trusted without trusted setup? They are using some kind of BRFS. What do you think about them?
00:27:31.420 - 00:28:01.700, Speaker A: That I'm not sure. I haven't dig so deeper into the tech sector know what's the implication but I know that for Ethereum there's a push right now for KCG commitments. I think that's part of the secret, right? We're all collectively creating a secret to fit into the system to provide security to the stocks. So that's why it can be done. But now you have to make sure that you do the KCD commitment ceremony correctly.
00:28:04.440 - 00:29:12.910, Speaker C: Second, real quick, so when you have a circuit and the Verifier has to read it so basically you have two parties, prover and Verifier. All of this trusted set of yada yada yada is basically done. So the Verifier can read something shorter than the actual circuit and verify that the circuit is correct. So we have to, as David has been saying, go through some sort of a compression process from circuit to compressed information. And then that compressed information is what the Verifier reads. This compression requires in the case of Snarps, which is the first protocol to have been introduced in this space, it requires some randomness. Now, whether you use Verifiable randomness or I guess unverifiable randomness, that doesn't change the security vulnerability that we are talking about is that even if you do have verifiable randomness and someone is able to get access to that, or leak that information after the trusted setup, then the prover can basically cheat and create false proofs and the verifier will not be able to figure out what's going on.
00:29:12.910 - 00:29:30.370, Speaker C: That's kind of like what we're doing here. Starks required no randomness to generate. They only use collision resistant hash function, which is also why they're quantum secure. So that's kind of like just fundamentally superior tech stack, I guess.
00:29:32.420 - 00:30:25.484, Speaker A: There's a very interesting question from Zebrin Islary that says, aside from blockchain, where can Cairo be used? Let me try to I see some very good answers already from your peers, so let me just provide my own answer as well. One example that I like to think about is, in the future, you should be able to generate proofs directly on your computer, right, and then submit that proofs to some server. And the server is the one who runs the Verifier. And I like to think gaming is a good example of this. It's a common issue in gaming that people actually modify their client to cheat, right? And that's an issue. When you have a multiplayer game with a language like Cairo, you can technically request your client to every so often create a validity proof out of the execution of your client and send that validity proof to a server. Which runs the verifier.
00:30:25.484 - 00:30:59.180, Speaker A: Just to check that you are not cheating, that you are actually executing the client the way that it was supposed to be. So if you try to cheat, if you try to modify your client, the server will know because the validity proof that you send regularly will fail. So that's one use case, and there are people actually doing research in the topic to actually run, even on a smartphone. The main issue right now is that creating proof is a very resource intensive process. So there's a lot of research that needs to be done to get to that point. But it's an interesting thought as well, how to use Cairo in a different setting that is not stagnant.
00:31:03.810 - 00:31:06.240, Speaker B: We're also doing something with Bitcoin. Right?
00:31:07.090 - 00:31:10.580, Speaker A: Oh, that's great. Yeah. Can you explain? Can you elaborate, any of you?
00:31:11.350 - 00:31:36.890, Speaker B: To be honest, I am not very aware of what is happening, but I know that there is something being built. I will send you the report to the chats. Something is being built, I don't know exactly what, but it is in order to scale bitcoin, you should start and it has been very successful within the Bitcoin community, so that's something we can say about it. Also, David, there's a question about the pool will be open source.
00:31:37.230 - 00:32:25.478, Speaker A: Let me first answer the question about bitcoin. Actually, that's something that the Bitcoin community is very well aware of. I think the Ethereum community is not as much, but on the Ethereum community, they're actually using our technology to create a very light Bitcoin client. I think the basic idea is that a cryptographic proof or validity proof is generated out of a regular Bitcoin client. And then when you want to sync a new Bitcoin client yourself, you don't have to download the whole. Blockchain to calculate the UTXO yourself. You can just verify the cryptographic proof of all the calculation that other server actually perform for you, and then you can sync to the latest UTXO, just download the database and verify the cryptographic proof associated with the execution to get to the current UTXO.
00:32:25.478 - 00:32:33.820, Speaker A: So now you can zinc a bitcoin client in a matter of probably minutes instead of days. I forgot the name of the project was it.
00:32:35.710 - 00:32:51.970, Speaker B: Has zero sync. Clement Coffee here added the link to the Rip with the chat. Thank you very much, Clement. You can go and see it. To be honest, there's a lot of very cool stuff that is being built right now at the and the Star community is amazing. To be honest. It's amazing.
00:32:51.970 - 00:33:02.500, Speaker B: They are building some very cool stuff and yeah. David, do you want to do the proverb open source question?
00:33:03.850 - 00:33:32.346, Speaker A: The proverb open source? Yes. So right now it's not open source, but we made a commitment to actually we will make it open source. We're just trying to tackle other areas of the Blockchain first. Especially the sequencer is our first target. It's just already we're doing a full rewrite in Rust. Open source want to decentralize also the sequencers before we can tackle the prover. But it is the goal to decentralize the whole Stack.
00:33:32.346 - 00:33:49.990, Speaker A: It's just not yet. We're not at that level yet. So right now, the sequencer and the prover are actually centralized, which is their every other CK problem right now, that is centralized. That's all that are actually open source. Yeah. Go ahead, Omar.
00:33:51.450 - 00:34:28.450, Speaker B: There's also a question from Paul asking, can you explain why Stark is secure and not Stark? So, real quick, the part of the cryptography that is being vulnerable right now to quantum attacks are those using elliptic corp cryptography such as Starks, as Ethereum and Bitcoin and so on. And Starks are not relying on this kind of primitives. They are not using elliptic cores. They are using hashic functions as symmetric key encryptions. So it is believed that these particular primitives will be quantum resistant. So that's the main reason the elliptic core cryptography.
00:34:28.790 - 00:34:48.360, Speaker A: Yeah. At least right now, we don't know any algorithm able to break hash function using quantum computers. But we do know an algorithm to break elliptic curves and other cryptography primitives using elliptic curves using quantum computers. The algorithm exists, it's just waiting for a quantum computer to be sufficiently powerful to run it.
00:34:48.810 - 00:34:55.274, Speaker B: And they will talk when we have that. A lot of development has been done in the quantum computing side.
00:34:55.472 - 00:34:56.266, Speaker A: Yes.
00:34:56.448 - 00:35:13.310, Speaker B: And one of the goals they have is actually trying to use this algorithm to break the elliptical. Cryptography is actually a metric for how good these computers are. So it will come a day, and when that day comes, the first thing they will do is break this liptical cryptography.
00:35:14.290 - 00:35:40.470, Speaker A: All right, thank you for the question. Meet Omar. Feel free to keep answering them on the Q A. I'm just going to keep moving forward because of time constraints. All right, so you probably have heard, like in a stagnate we use the Caro VM, we don't use the EVM. So why is that? So on one side you have ZKE EVMs, which some famous one are like the polygon Hermes scroll. CK sync.
00:35:40.470 - 00:36:39.754, Speaker A: They try to be as compatible as possible to the Ethereum virtual machine, while STARnet is actually using its own virtual machine called the Carobm. So these two approaches, they're trying to optimize for very different things. So Cke EDM is trying to optimize for having max compatibility with current smart contracts deployed on layer one. But they sacrifice performance because the EVM was created for a particular CPU architecture or a traditional CPU architecture that is not really friendly to CK circuits. That's why Cairo VM or Stargrape, we decided to create our own virtual machine so we can create our model, a computer that is exactly or fine tuned for validity proofs. So we're thinking about how do we track the most performance of the network long term. Amit, do you have any more comments? You're more an expert on this area than I am.
00:36:39.754 - 00:36:40.380, Speaker A: Probably.
00:36:43.330 - 00:36:59.794, Speaker C: I would leave it at that today, but we can. But yeah, the main difference is, of course, you can compile your code directly into EBM by code on Zkebms. With us, you have to go through Sierra and maybe I'll let you speak.
00:36:59.832 - 00:37:40.640, Speaker A: More about we have a session six. It's going to be about the Cairo architecture. So probably a lot of these questions are going to get answered how the architecture of Cairo actually looks like, what the Cairo VM actually looks like. Just a quick comparison. If you have read Vitalik's article about the Ckevm classification, declassifies Ckevm in four categories, type one to four. So type one is basically no changes to the Ethereum virtual machine, full compatibility, but the performance will be very slow to create a cryptographic proof out of those execution. So pretty much no one is attempting this right now.
00:37:40.640 - 00:38:33.766, Speaker A: Type two is that you use most of the EBM, but you change at least the data structure for storage. You achieve high compatibility, at least you're going to have some smart contracts that you will need to be modified, but the performance is still very slow. Then you have type three, where you have compatibility, but you have to modify something like storage hashes pre compiled to make it a little more friendly to the new architecture. So you have partial compatibility. It's not like you can deploy every single smart contract as is to a layer two. With these characteristics, the performance is still going to be slow, at least in theory, technically. And we have projects doing that like Scroll, Polygon, Hermit, ZK Sync, even Kakarot, which is a layer three on top of STARnet, are actually tended to be type three Cke EVMs.
00:38:33.766 - 00:39:04.030, Speaker A: But then you have the Type Four where they implement a completely different virtual machine. They're not compatible with the smart contracts deployed on Ethereum using Solidity. But the upside is that it's very fast to create the validity proofs. So you have two main projects competing in this space. Obviously Stagnate is one of them. And you can consider to be a CKE EVM because you can use stagnet with a compiler called Warp to compile Solidity smart contract into Cairo VM. And the other one is polygon Smiting.
00:39:04.030 - 00:39:10.410, Speaker A: So we are really focused on performance and long term view of scaling ethereum.
00:39:13.080 - 00:39:56.688, Speaker B: Okay, to summarize, maybe quoting here eleven Sasson, he said, we really believe in Star Wars that the future of scalarity will be built using Cairo or astronaut GVM. Because David said the only focus of Cairo, the only focus of Cairo, its goal is to scale Ethereum. That is not the goal of the EVM. The EVM goal is to maximize centralization, which is great, and it's very relevant. But in Cairo we're already thinking as a given the part of the security and the centralization that ethereum gives. So now we're focusing only on scaling. And that's why we really believe that Cairo is the way to scale ethereum.
00:39:56.688 - 00:40:31.656, Speaker B: The problem here is, of course, image from David's show. There's already an ethereum building tooling, Foundry. We have profile and so on. And those we don't have in Cairo or STARnet, we need to build a new tooling. However, the tooling is being built by the day. So we have protestar, which is kind of similar to Foundry. We have actually, which we have several APIs and SDKs that we can use to interact with the STARnet.
00:40:31.656 - 00:40:44.020, Speaker B: And Kyo so tooling is getting much better. So we are able to write Kyo and scale both the social part and the scalability as lower fees and fastest transactions.
00:40:44.840 - 00:41:09.384, Speaker A: Cool. Thank you, Omar. All right, to summarize, why Stagnant? First of all, it guarantees computational integrity without re execution. Proof verification is cheaper than the underlying computation. So remember the polylogarimic relationship with the underlying computation. We can think about that as computation compression. So we use CK proof for scaling, not for privacy.
00:41:09.384 - 00:41:47.668, Speaker A: That's very important to keep in mind, at least not yet. And we use ZK proofs, we use Starks CK proofs and not Snarks because Starks are quantum secure. That's really the main reason we're thinking long term. And this is why we have the trade off. Cool. Let's talk about, at a high level the architecture of STARnet. So in my previous example, the story about the head of space exploration, the person actually got convinced that the result is 42, whatever that is, right? Because he was able to verify in the penalty the cryptographic proof in his laptop.
00:41:47.668 - 00:42:24.150, Speaker A: But then how is other people going to trust that that is actually the result? Right? Because so far only this guy was able to verify the political proof, but not Alice. So that's why for Alice to trust, a couple of things are needed. First, you need to make the Cairo program publicly accessible for anyone. She should be able to independently verify the proof, basically run her own layer two node. So she needs a STARnet. So STARnet is a layer two, right. So that's why I present here ethereum at the bottom as layer one.
00:42:24.150 - 00:43:23.510, Speaker A: So on a STARnet, when you send a transaction, you send the transaction to what's called the sequencer. Right? And the sequencer is like the block producer of STARnet and that's where the Cairo VM lives and also where the STARnet OS lives. And the sequence is just going to take all the transactions, it's going to validate them just to make sure that the signature is correct, that the person is able to do these things or been able to use this user account. It's going to bundle them into blocks and it's going to calculate what's the new state of the network based on the execution of this block. Right? Similar to a block producer on layer one in this case. The interesting thing here is that out of the execution of all the transactions in a block, the sequencer sends what's called an execution trace to the prover that we call it sharp. In the case of a stagnate, sharp is because shared prover is used by stagnate, it's used by stackx as well.
00:43:23.510 - 00:44:20.360, Speaker A: So with this execution trace, the prover is able to compute the validity proof to attest to the integrity of the computation done by the sequencer. And this validity proof is eventually sent to layer one as cold data to a Verifier smart contract that is written in solidity, right, since open source anyone can see it. So the Verifier is going to take the validity proof and it's actually going to perform the verification on layer one. This case, the ten thousands of Ethereum computers are going to perform this computation independently. And if the verification is actually successful, then the sequencer is going to change the state difference. But changing the state before and after the block was executed again to the layer one as call data, to a different smart contract that we call a stagnant core. And we use that as our data availability that year we want to publish this data on layer one.
00:44:20.360 - 00:45:14.676, Speaker A: So now we can have full nodes or stagnant full nodes, who gets what is the state of the latest block or the state of the network? It gets that from the signature currently because as of now these are two centralized entities. But the fact that we send this state diff to layer one, it means that if for some reason the sequencer or the connection between the full node and sequencer fails, you are able to recreate the layer two current state by reading or indexing data from the standard core smart contract. So you can recreate the data from layer one independently. If there is a situation that the sequencer stopped responding to layer two full nodes. So at a very high level, this is how STARnet works. So I went through some of the modules. So as I mentioned, the sequencer validates executes and bundle transactions into blocks.
00:45:14.676 - 00:45:44.820, Speaker A: The proverb creates stack proofs for a STARnet and a stack x. That's what's called Sharp or shared prover. The Verifier is a layer one smart contract. Verifies. A stack proof sent from Sharp. Stack core is another layer one smart contract that just stores storage is a big word because actually we only send it as call data. It's not get stored at the contact level storage or cost reasons and we use that as the data availability layer.
00:45:44.820 - 00:45:49.060, Speaker A: Finally, the full node provides data to layer two tabs.
00:45:51.970 - 00:45:52.830, Speaker B: David.
00:45:56.050 - 00:45:56.510, Speaker A: Perfect.
00:45:56.580 - 00:46:11.320, Speaker B: So regarding the start of your presentation, there was a question from Eliel. Sorry for coming, there are a lot of questions, we're answering each of them. So Eliel asked do we send algorithm or the data to rival country when you were talking about this part?
00:46:13.770 - 00:46:16.470, Speaker A: Oh, you mean in the example at the very beginning.
00:46:16.810 - 00:46:20.540, Speaker B: Yes, at the very beginning. So what are we sending, the algorithm or the data?
00:46:21.630 - 00:46:57.782, Speaker A: The algorithm. Like the program, you can send the program, it's just in reality you don't send the program as is, you send the bytecode of the program, the low level Cairo assembly program to the supercomputer. Yes. Thank you very much. David, questions from Amit? Go ahead, go ahead. Robert is asking can you use different data availability layer, like Celestia for example? The answer is yes.
00:46:57.916 - 00:47:32.138, Speaker B: We are working on the value views which is going to be innovations where we will be able to do the data availability part using different kind of services. For example, Celestia pycore USB if you want. It's going to be very interesting. You will be able to write Cairo code where you can declare variables that are going to be stored on chain and some variables that will be not stored on chain, it will be stored off chain or maybe Senestia or somebody else. So that would be very cool with Valid.
00:47:32.314 - 00:48:22.670, Speaker A: Yeah, just a comment. It's called volition because validium is what? So we have three different data availability modes right now. Only two really roll up is the one used by stagnet will be published to layer one Validium, which is used by Starkx that we are not covering here. But it's another technology developed by Stackware and then we have Volition that we want to implement on the stagnet, I don't know, this year at some point, which is going to allow you to choose where to store your data so you have different costs for your transaction. Are you going to store it on layer one or have a maximum security or do you want to store it in some other place that could be Celestia or a consortium of people storing data that's going to make be cheaper. So we don't have a lot of details about that but we know that is a path forward for Stagnant to enable Volition.
00:48:24.690 - 00:48:33.920, Speaker B: David, do you have curious is asking for the link to the repo of the Verifier smart contract layer one do we have yeah.
00:48:35.930 - 00:49:12.880, Speaker A: If you go to Caroline Caroline repo and it is public, you go to the Caroline repo useful info, important addresses the Verifier address is there a question here? I don't know where the question is I put it on the chat but can you please put it on the Q A?
00:49:14.050 - 00:49:20.386, Speaker B: Yes, the question is can we get the link to the repo, the verify smart contract? So I will show all right, so.
00:49:20.408 - 00:50:12.250, Speaker A: This is the link to the deploy smart contract. To see the actual source code you have to go to the Caroline on GitHub and in here I think it's here I know I saw it somewhere here but I don't remember yeah, I can search for it, I've seen it, it's there somewhere, seems fine. Perfect. Cool. Section four. So let's talk about Cairo one. We just recently released this new version of the language which is very different from Cairo Zero but it's much better than Cairo Zero.
00:50:12.250 - 00:51:07.272, Speaker A: So Cairo One is a high level language, right, which makes it easier to learn compared to Cairo Zero which was more of a low level language. The syntax of Cairo One is heavily inspired by Rust which also makes it like a strongly typed language. So if you know Rust, you will feel comfortable with Cairo One. When you compile a Cairo smart contract it doesn't directly compile to the Cairo VM by code which we call it the Cairo assembly. It compiles to the intermediate language called Sierra. Sierra stands for Safe intermediate representation because this is what allows to create validity proofs even when a transaction fails, which was not possible before and now because of Sierra basically signatures are always compensated for their work even if a transaction fails. And in the near future we allow for transactions to be reverted much in the way that happens on layer one.
00:51:07.272 - 00:51:43.540, Speaker A: So you can see on the right side you start with a car one smart contract. You compile it to Sierra and then you send this to the sequencer the sequencer that compiles to cara assembly that we also call it chasm. And from the cara assembly, the execution of this car assembly bytecode by the signature. That's where we derive the validity proof on the program. And we send to layer one. So take a look. This is how it looks like an example a smart contract on Cara one you can see at a glimpse it looks a lot like Rust where you can do some metaprogramming with macros.
00:51:43.540 - 00:52:13.816, Speaker A: This is how you bring functions into scope. This is how you define storage variables. You have to name a stroke, storage has to be the name and then you define the properties of all the storage variables felt is still the data neta type, but then we have more data types that we can use. That before in carousel zero was not possible. One very commonly used is U 256 which is commonly used in solidity. This is how you write to storage. This is the syntax.
00:52:13.816 - 00:52:43.468, Speaker A: This is how you read from storage. For now, just take a look. Today is not the day to focus on Kyro one a lot just for you to have a taste of how it looks like. And now this is how you define variables with the keyword length, which if you use carrot zero, you know that before there was like a four different ways to define a variable. Now we have only one. So it's a much nicer language to play with. So there's a thing called regenesis that is all about closing the gap.
00:52:43.468 - 00:53:30.380, Speaker A: So as I mentioned briefly that in Cairo Zero transactions, failed transactions cannot be proven. And because they cannot be proven, that opens the door for what's called a denial of service attack on the sequencer. Because the sequencer gets to execute a transaction to the point where it fails and then it cannot add it to the block because validity proofs cannot be created out of a failed transaction in caro zero. Caro one actually fixes this problem, but it means that eventually caro zero smart contracts needs to be disabled from the network for security reasons. So we have two important events that happen over time. The one that happened recently is the deployment of standard zero point eleven to Mainet. Because before zero point eleven mainet only supported Carol zero point ten smart contract.
00:53:30.380 - 00:54:30.340, Speaker A: Right after the deployment, the standard zero point eleven. Now both of the languages are supported carol zero point ten and Carol one. At some point in time we're going to go through regenesis, maybe four or six months where we're actually going to disable all the Cairo Zero smart contract and only Cairo one is going to be supported from that point forward. But in the meantime, we have a migration window where we provide mechanism for you to be able to upgrade your already deployed smart contract from Cairo Zero to Cairo one while preserving your same storage layout, the same storage values, the same address. So in a way that is completely transparent to your end users using your smart contracts. But you will have this migration window to go through it because after Regenesis we got to disable all the Cairo Zero smart contract and from that point forward it's only going to be caro one from that point on. And this is where we are right now, just at the very beginning of the migration window.
00:54:30.340 - 00:54:57.290, Speaker A: Let me go to the summary and I stopped for some questions. Probably there's some. So Carawan. Carawan is a high level language inspired by Rust sierra allows for reverted transactions before. We're not possible. We don't have reverted transactions just yet. We need a little bit more work on the Stargate to allow that, but it's now technically feasible to do it.
00:54:57.290 - 00:55:21.810, Speaker A: Smart contracts can be upgraded from Cairo Zero to Cairo One while preserving the state and their current address where they've been deployed. Target already supports Caro One in the tested and on Mainet as well, and Regenesis will disable Cairo Zero code. And that's going to happen before six months in the future. So let me stop here for questions by better some.
00:55:23.880 - 00:55:32.150, Speaker B: There's a question from anonymous attendee. Is it possible to build circuits like Circum or Noir with Cairo One?
00:55:35.510 - 00:55:44.920, Speaker A: I don't think so, because this is a high level language, but I'm not that much of an expert to get deeper into the reason why, but intuitively I don't think so.
00:55:46.090 - 00:56:10.560, Speaker B: But from what I've seen, using layer three, we can be able to use Noir and then that compile it. So you can get into Cairo, so it will be interesting. And actually, Francis mentioned something before. You can be able to prove Snarks into Starnets. It's something that's been working.
00:56:11.650 - 00:56:36.182, Speaker A: Can you can you can create your own verifier with Cairo. Right. It's a smart contract. It actually exists. There are stacks verifier, there are different stack verifiers as well. So really you can implement your own layer three right now and not wait for a stackware or stagnate to evolve to the point that we make all these things the official verifier available on layer two. Perfect.
00:56:36.316 - 00:56:44.700, Speaker B: Also, Sephorin is asking, can we expand more on Sierra? Sierra will be looking at sessions six whites. More about.
00:56:46.990 - 00:57:13.810, Speaker A: I haven't we haven't discussed exactly what's going to be coming in the chapter, but probably yes. For now, just keep in mind that it's going to be an intermediate language. When you compile in your computer before you deploy, you no longer compile directly to Kyra assembly, you compile to Sierra and that's what you deploy to stagnet. And then on a stagnet, the signature compiles your Sierra bytecode to Kyra assembly code. Yeah.
00:57:13.880 - 00:57:27.560, Speaker B: This is a great invention for those of you who want to, for example, do audits, security audits, learning Sierra will be key for you. It's very important. It's like learning jewel for layer one.
00:57:29.930 - 00:57:39.530, Speaker A: I see. Yeah. More question. Go. Can you order? Because I see some questions being unanswered with four votes, three votes.
00:57:40.350 - 00:57:49.322, Speaker B: Yeah, we're working on that. So there's a question by Gleem. He's asking Gleem, by the way. He's French living in Mexico.
00:57:49.386 - 00:57:50.218, Speaker A: Hey, Glenn.
00:57:50.314 - 00:58:06.340, Speaker B: So, in the centralized start, the sequencer will be a full node and there will also be a full node that are not a sequence line, which means all these sequences will participate to consensus and all other full nodes are only relaying data to that or other nodes. Is that correct?
00:58:11.720 - 00:58:50.276, Speaker A: Only sequence will participate consensus. So how decentralized standard is going to look like is a moving target? I don't have a clear answer. Of course, the first sequencer will be the first one to be decentralized, and it means that they need to reach consensus as any decentralized system. Do they need to be full node? I mean, sequencer will they need to store the current state of the network right, as well as a full node. But a full node can exist independently from a sequencer. They don't have to be the same thing. They can be independently, and I think that's the future.
00:58:50.276 - 00:59:11.180, Speaker A: But they will probably share some modules. Like right now, for example, if you use Papyrus as a full node, it uses a module called Glockifier that we are going to introduce also into the new sequencer that has been rewritten in rust. So they're going to share some of the same primities for storing the state. But they are two different systems in the network.
00:59:12.240 - 00:59:16.764, Speaker B: Also, we have, like, clients, right? Like bureaus being built also by the community.
00:59:16.962 - 00:59:37.270, Speaker A: We also have Burus, which is inspired by I forgot the name of the other, not Horus forgot. There's a like line developed by a 16 Z for ethereum that we're using to build Horus. On top of that, which I forget the name.
00:59:39.240 - 00:59:51.480, Speaker B: Also worth mentioning, that Francois. Thank you very much. He has been answering a lot of questions, so thank you very much, Francois. Can we start with caution to reduce the proof size, like the Mina protocol with snaps?
00:59:54.460 - 01:00:01.656, Speaker A: Okay, can we do that? We do do that, yeah. Sharp manmade. Go ahead, please. You can answer that. Yeah.
01:00:01.678 - 01:00:32.790, Speaker C: So I was just going to say we do not initially we generate one proof object per computation, but then basically, whilst we're still in the off chain environment, we batch those proofs together and keep on generating smaller proofs for a certain period of time. And only at the end of that period of time do we send the one really sort of like root proof down to ethereum layer one. So in that way, we're actually getting hundreds of thousands of transactions through one proof object.
01:00:34.200 - 01:00:45.026, Speaker A: Yeah. On session four, when we go deeper into standard architecture, we're going to look at how the prover achieves recursion. All right, sorry, let me move on.
01:00:45.048 - 01:00:46.600, Speaker B: Because time is.
01:00:49.130 - 01:01:22.942, Speaker A: If we have time at the end, we will go back to see us on this question, but please try to answer some of them directly on the Q A. So some of the tools that you should have if you want to get into stagnet, first of all, it's a wallet, and there are two main ones. You have Argentx. And you have Bravos. Argentx, they have a browser extension, as you can see, for Google Chrome, for Brave, for Firefox, bravos the same. Also a browser extension. But Bravos also has a mobile wallet, which is very interesting, how they implement that and how they use account abstraction.
01:01:22.942 - 01:02:04.874, Speaker A: So pick the one you like the most and make sure that you have installed in your browser so you can follow along some of the exercises. We have two different block explorers, welcome Voyager, and the other one called Stark Scan. Both are great options, so pick the one you like the most. And we have some tools for developers. One of them is Protostar, which right now I actually was thinking about removing Protostar for now, because it's definitely a full rewrite of how Protostar works with Caro one using a thing called Scarb. So maybe put that on ice in the meantime. But just know that there's a tool similar to Foundry on Ethereum.
01:02:04.874 - 01:02:50.542, Speaker A: So you can test your smart contract using the same language you use to program the smart contract, in this case Cairo. And also we have collaboration with Open Sepling that they actually develop smart contracts for Cairo, holding some of the best practices for ESC 27, 21, and so forth. Other tools that we have available, we have a plugin for Hardhut if you want to test using JavaScript. We have a defnet similar to Ganache as well, if you want to run it locally. We have a library for React for your decentralized app. We have different SDKs for different languages for TypeScript, or JavaScript for Python, for Java, Kotlin Scala, and for iOS. So whatever you're building, we have an SDK for that.
01:02:50.542 - 01:03:19.302, Speaker A: Many of them right now are going through the process of upgrading to support Cairo one. So just be mindful of that. All right, so let's take a break. Ten minutes. We have ten minutes. What do we have? Let's have sorry, five minutes, because we're going to jump into the live coding session. So just have washroom breaks and get some coffee and we'll get back in five minutes.
01:03:19.302 - 01:03:31.500, Speaker A: Sorry, I'm just going to mute myself and turn on the camera and I'll be back in a moment. I'll be answering some questions in the meantime, so I'm not going to talk just answering questions from the Q A.
01:03:36.920 - 01:04:11.724, Speaker B: It would be great to have a chat depicting when using information from all these questions and so you can answer these questions it faster because there's a lot of questions here. And I apologize to everybody that has been waiting for their answer. We're working on that. We already answered 50 questions. Bear with us. We're working on that. But yes, if somebody wants to work on a chat deputy, I was actually looking at something like that, maybe using that backup oil which was released by Stanford.
01:04:11.724 - 01:04:32.600, Speaker B: That would be amazing to have. So also feel free to join the Telegram channel. I will send the link again so you can get in there. You can ask questions. If you want to organize a meetup, whatever, let us know. We can help. And yes, let's make a nice communication.
01:04:32.600 - 01:05:02.284, Speaker B: Thank you very much, William, for your questions. Thank you very much, everybody. And there's French soil around the world. Yes. I don't know why French people are always exploring these very new technologies. French, I. Don't know if they like this kind of I was working in AI before coming into Star Wars and always the French are always these experimental technologies.
01:05:02.284 - 01:05:26.250, Speaker B: It's very interesting. Also in AI. You can see them in Blockchain, but also not everywhere in Blockchain. You can see them a lot in this state of the art state of the art blockchains, like Starmet. You're from carbonable. Okay, thank you very much. Greetings and thank you for your help on the question.
01:07:07.830 - 01:07:14.630, Speaker C: Omar, did you share the telegram? Telegrams.
01:07:17.400 - 01:08:04.680, Speaker A: With people? Not sure I can hear. I cannot enable my video.
01:08:06.010 - 01:08:10.890, Speaker B: Yes, you will share your screen. You will share your screen. Sorry, I was on mute.
01:08:13.470 - 01:08:15.130, Speaker A: No, my camera.
01:08:18.670 - 01:08:20.978, Speaker B: Let me see it's.
01:08:21.014 - 01:08:25.920, Speaker A: Unable to start video. You can start your video because the host has stopped it.
01:08:27.890 - 01:08:33.860, Speaker B: Okay, just a second. Let me see. Try again, please.
01:08:34.870 - 01:08:42.530, Speaker A: Now I think in the security section.
01:08:43.750 - 01:08:50.220, Speaker B: I don't have a security section. Okay, can you join again?
01:08:50.750 - 01:08:52.780, Speaker A: Yeah, I'll try to live and join again.
01:08:54.430 - 01:09:36.454, Speaker B: Well, in the meantime, we're working on the Standard book and the Cairo Book also in the community. And I will give you a small primer here for opportunity in spirits. So the difference here is that it's going to be completely decentralized. So if somebody of you wants to support us in building the book started IO, please let us know because it is very new. So we are still working on that. The getting started part is already up to date, but we will have more and more and more content. Here.
01:09:36.454 - 01:09:50.890, Speaker B: For example, we'll have content on the Starks. So there was a question on how Starks actually work and you can see them here in several chapters talking about that. But we're lacking a lot of information, so there's some persons already contributing to it.
01:09:50.960 - 01:09:52.206, Speaker A: But if you want to contribute to.
01:09:52.228 - 01:10:18.790, Speaker B: For example, talking about wallets, bridge blocks, blowers startup, Definite, everything that David has already talked about, let us know. We'll be happy to have you collaborate with us on this. So we will be sharing this in the Telegram and also in the discord in the next days for you to contribute if you want. This is a committee of and we're very happy to have you contribute.
01:10:19.690 - 01:10:55.810, Speaker A: Well, thank you, Omar. All right, I'm going to start sharing my screen again to continue. What else am I missing? Okay, cool. All right, so let's go and set up a dev environment for car one. So, first of all, just a warning. We are going to be using a lot of tools. We're very new, so we're going to be living on the edge, which means that some of these toolings are rough around the edges.
01:10:55.810 - 01:11:49.806, Speaker A: So we have two main repositories that we're going to use. One's called Cairo Lang, which is written in Python, is where we have the STARnet CLI and where we have the Cairo Zero to Cairo Assembly compiler. It's like the old compiler, but it still has the standard CLI. And then we have the Cairo repo without the Lang, which that's where we have the Cairo One compiler, the compiler to Sierra and then also we have a compiler from Sierra to Chasm. And I'm going to go into detail why we have two different compilers. I'm going to explain that in section four, I think, but this one is written in Rust, not in Python and it also has a Vs code extension that we can use, but we're going to have to build it from source so you can have some syntax completion and validation as well. So we're going to need three main languages for setting up this dev environment.
01:11:49.806 - 01:12:40.002, Speaker A: As I mentioned, this is going to simplify as time goes by, but for now we go with three. We're going to need Rust to compile the Carawan compiler and I know it's a mouthful, but that's what we need to do. And also to compile the Vs code extension because right now it's not yet published to a marketplace. We're going to need Python especially, particularly 3.9 to create an account so we can deploy and declare all these things and invoke to use the Stocknet CLI because the Cairo line where the CLI lives is written in Python and we also needed to, sorry to declare, to deploy and to invoke transactions on a STARnet. Finally we need node JS for packaging the Vs code extension before we can actually install it on our IDE. So this is the plan for the light coding part.
01:12:40.002 - 01:13:15.290, Speaker A: Hopefully you can follow along, but we have the instructions shared for you here at the bottom. So first we're going to compile Caro One from source, then we're going to test that the compiler is actually working by compiler a simple smart contract, Car One smart contract. Then we're going to install the Vs code extension for Caro One. Then we're going to install the STARnet CLI. We're going to create a user account locally, your computer. So then you can declare an example of smart contract. You can deploy it to STARnet testnet and then interact with it using Block Explorer and a regular wallet.
01:13:15.290 - 01:14:45.000, Speaker A: So you have two links here at the bottom. I'm using the guide today, but in the starting book we also have steps for performing this as well. I'm going to start a virtual machine so we can follow the steps from the beginning, basically. So let me see, give me a SEC to start this, do this cleanstall and start just a moment while the VM starts and I log in. Share the screen in a moment. Okay? And I'm going to follow my guidelines here. Sorry guys, I just tried to set up my computer here with all the things that I need or I can start doing live coding.
01:14:45.000 - 01:14:47.450, Speaker A: Perfect.
01:14:52.160 - 01:14:55.490, Speaker B: In the meantime cool, I'll be ready.
01:14:56.100 - 01:15:29.370, Speaker A: So as I mentioned, I have a clean installation of an Ubuntu machine. The instructions for macOS are very similar. In the guide I put, whenever there's a small difference, I put there comment like an if else kind of blog. So the first step is to install Rust. So to install Rust, you basically you follow the official instructions of how to install it. We want the release version of Rust. Why it came like that, we need to use curl to get it.
01:15:29.370 - 01:15:46.770, Speaker A: Let's see. How can I increase the font size of this? I'm just going to proceed with the installation. How is the font size? Not that good if you can zoom in. Okay. Yeah.
01:15:48.020 - 01:15:48.880, Speaker B: Join.
01:15:54.420 - 01:16:15.800, Speaker A: Email size, columns, rows, custom fonts here already. Change it. I have custom fonts. Can increase it to hitting better now? Yes, looking better.
01:16:16.410 - 01:16:19.670, Speaker B: What do you think, guys? They say it's okay.
01:16:19.740 - 01:16:20.022, Speaker A: Perfect.
01:16:20.076 - 01:16:21.160, Speaker B: Thank you very much.
01:16:22.970 - 01:16:46.240, Speaker A: Make a little smaller. Okay. All right, cool. So I have Rosk installed. It asks you to activate some things on your shell. So you can just run this source or you can just close the terminal, which you're going to do, and open a new one. So the configuration takes place.
01:16:46.240 - 01:17:16.780, Speaker A: And just to verify that Rust is installed, at least Rust up. Do this rust up version and yes. So we have version 1.25.2. So rust installed. As I mentioned, we need Rust to compile the Car One compiler from source. So the next step is to actually download or clone the repo where the compiler for Car One lives. So I have this command here.
01:17:16.780 - 01:17:54.740, Speaker A: Copy. All right. So this is the repo where the Cairo One compiler lives. I'm going to clone it to a specific folder on my home directory just called Cairo. I just want to have a particular location that I can always go back to because we're going to have to do some mapping of the binaries. That's why I put it here. So after toilet, we should have it in the Cairo folder.
01:17:54.740 - 01:18:30.396, Speaker A: So if I come here so we have here in the repository for Cairo One. So we need to activate a very particular tag, the latest tag available in the repo, because that's the compiler that was used or supported right now by stagnet. So we need to make sure that we use the same. So this is why we enable or activate this particular tag, which is the latest tag on this repository. Target version one, point alpha six. Right. So we are in detached mode in this particular commit of the Car One repo.
01:18:30.396 - 01:18:46.256, Speaker A: So now we can actually build all the binaries using cargo using this command. I'm sorry, it went a little too fast. Just because Rajiv and also former memory.
01:18:46.368 - 01:18:49.080, Speaker B: Are asking if we can share the commands.
01:18:50.460 - 01:19:02.430, Speaker A: Yeah. In the slides, which I share with you, at the bottom of the last slide, where I have the live coding plan, you see the reference? Let me just put it here.
01:19:05.040 - 01:19:08.190, Speaker B: You can share again the link to the slides of the P code.
01:19:10.180 - 01:19:31.100, Speaker A: Okay. Link to the slides, publish the web. These are the links. Where do I put it? In the chat? Yes, please. In the chat. Okay. So I put in the chat the link to the slides.
01:19:31.100 - 01:19:57.540, Speaker A: And if you go to this last slide before let's start the setup. You see a link to the guide. I share this link to you. This is the steps that I'm following, basically that you don't see on the screen, just using a secondary screen. But you also have this target book as a guide. This is exactly what I'm following in this session. You should turn, see it cool.
01:19:57.540 - 01:20:16.980, Speaker A: Thank you, Eric. All right, so going back here just a SEC. Setting up again my garment.
01:20:23.540 - 01:20:35.408, Speaker B: I'm sharing to chat the link to the STARnet Book, where you can also see the commands. Please bear in mind that the STARnet Book is very we're working on that, but that part is finished.
01:20:35.584 - 01:20:37.460, Speaker A: Could you share that link, Omar?
01:20:39.080 - 01:20:42.544, Speaker B: I will share the link right now. The link called the STARnet book. Yes.
01:20:42.682 - 01:20:57.550, Speaker A: All right. So next step is to actually build the binaries right. Using cargo build. And we use the release version of Rust. We don't want to use the latest or the edge. It's going to take a while. So it's a perfect time to answer some questions.
01:20:57.550 - 01:21:01.650, Speaker A: Perfect. So let's see.
01:21:03.140 - 01:21:05.970, Speaker B: When will the main net support kernel one?
01:21:10.100 - 01:21:15.570, Speaker A: It's live. It is supported already. You can deploy. Right.
01:21:16.020 - 01:21:33.896, Speaker B: There's a problem that keep saying when compiling. Okay. It's a particular problem. I will look at it. Okay, so we're really sure that math, thank you much, crypto Nerd and Rajiv, in terms of energy consumption from Ramsey, from Carnable. Ramsey, we're looking at that particular question. We don't know.
01:21:33.896 - 01:21:56.368, Speaker B: Right. But Manmit already asked internally to see if we can get an answer as soon as possible. Ramsey, thank you very much for that. What are the benefits of the Caro trauma shield versus Serenol TVMs? They have to be strong for DSL to win with solidity. And thank you very much, Paul Henry. He answered that the caravm is very specifically used by STARnet. Yes, exactly.
01:21:56.368 - 01:22:32.060, Speaker B: And the benefits is that, again, that Cairo is focusing only on scalability. And this is something that the Terror Pitro machine is not focusing on. They focus on other stuff like decentralization, which is very relevant. But the Kero has the only goal of scaling ethereum. So that allows to do certain kind of stuff that make us scale without having to follow all the rules of the EVM, which that are done for different purposes. So the Cargo virtual machine should be able to allow for more scalability. That will be the main benefit.
01:22:32.060 - 01:22:37.708, Speaker B: I don't know. Do you see any questions you want to answer right now?
01:22:37.794 - 01:22:40.930, Speaker A: David? Which one?
01:22:46.260 - 01:23:22.728, Speaker B: Sorry for answering this a little bit late. We have a lot of questions. So Tal is asking most projects will probably be attracted to zero chains because they are already bunch of solidity types. How easy will it be to transpile solidity to Cairo in the future? Is it better for BRICS to transpile or to create native on STARnet? And if you allow me, David, let me call here again eleven Sasson, founder of the Starks, inventor of the Starks, founder of Starwalk. He said that indeed we will have actually a serial GBN. Danilo is leading that development. It is called Kakalt, which Francois already shared.
01:23:22.728 - 01:24:04.292, Speaker B: Thank you very much, Francois. But Ellie said our focus here is to scale code using Cairo. So the real scale is going to be coming from Cairo, not from transpilers like the one we have. Warp will be transpiling solid code into Cairo. However, building native Cairo code will be the real power of stone. So indeed there's a lot of developers already for solidity, but we think that developers can easily adapt. So most of you I think you know at least two different languages, I don't know, maybe Python and JavaScript or something like so we would really believe that developers will have no problem learning gar.
01:24:04.292 - 01:24:06.040, Speaker B: Also aside from solving.
01:24:06.480 - 01:24:41.956, Speaker A: Also keep in mind that standard gives you way more resources for executing transaction that's possible on the limitation of a gas fees on layer one. So that allows you to create more interesting applications. You can actually create things that are not possible at all to create on layer one. So do you actually want to just transpile your contract as is? You're going to be missing a lot of interesting features. For example, account abstraction that exists technically on L one now. But it's a little confusing because there's three different ways to have an account on layer one. On layer two.
01:24:41.956 - 01:24:58.750, Speaker A: On a standard, everything is smart contract, everything is using account abstraction or smart wallets. So really the idea is that when you have a different environment with different constraints or less constraints, you probably don't want to just rewrite the smart contract exactly the same way as layer one.
01:25:00.640 - 01:25:57.980, Speaker B: And it's worth mentioning that any zero knowledge project following the terrible virtual machine like the Cke EVMs will have the same constraints as the EVM. That being a construction, for example. Okay, do you guys know any open source project that have migrated fully to Cairo so that I can refer to their codes? Let me share you the link to the STARnet Cairo 101, which you can already do and it's called as migrate to Kyle once, I guess also end to end testing. I don't know if we have a project already doing testing. So there are a lot of projects migrated to Kerr One, but they are doing it maybe not open source or experimenting behind the scene. Also Argent I think will have soon their code Kerrow One, so that will be very good. But in the meantime, I will share to you the start Kero 101 tutorials.
01:25:57.980 - 01:26:15.460, Speaker B: Those are very good for you to understand how to structure your code. If you want to learn Cairo code, you can learn with it. But it is also very useful to learn the syntax and the way to structure your project. So I will show it to you in the chat.
01:26:18.250 - 01:26:28.540, Speaker A: Compilation is taking a while. It's pretty intensive. And also it's a virtual machine. It's not my host machine, so has limited resources. But we're getting close. Perfect.
01:26:30.190 - 01:26:40.160, Speaker B: Okay. So DV is asking why not both decentralization and Scalability start disoriented more to the second one? But I don't see the trade off to live in the battle. The first one.
01:26:42.050 - 01:26:42.878, Speaker A: Yes, sure.
01:26:42.964 - 01:27:10.326, Speaker B: Well, correct me if I'm wrong here, manmade and David, but Starter is having both the decentralization from Ethereum and Scalabic that is providing. Plus we will have decentralization. There's no layer two that is decentralized right now. Actually, we're working on that. We're working on deciding how we will have centralization so we can decentralize the use of sequencers and so on. But I don't know, David, if you want to add something to these well.
01:27:10.428 - 01:27:29.982, Speaker A: The goal is to decentralize everything right. It's a hard problem to solve. It took Ethereum a long time to do it right. It will take us a while also to do it right. So we need to approach it first. Let's see that the technology works that we can scale and then we can decentralize. You have to tackle some big challenges once at a time to do it right.
01:27:29.982 - 01:27:38.720, Speaker A: But that's the goal, to have it completely decentralized. Well done. Any other questions?
01:27:42.930 - 01:27:56.846, Speaker B: Wow, we have a lot of questions today. That is great. Thank you very much for coming. Very happy to have you here. I think those are all the questions that we can answer live. We did it. Oh, there's a question from Leo Cesarette.
01:27:56.846 - 01:28:07.350, Speaker B: What are the most interesting use cases you are seeing of on chain apps that will benefit from being able to access more compute? Meat is answering right now. Do you want to answer live, manmade?
01:28:07.850 - 01:28:10.598, Speaker A: Maybe, yeah.
01:28:10.684 - 01:28:39.730, Speaker C: Just like the hats that I dropped in the chat. One of the most exciting things that I've been seeing out here in San Francisco is the new push towards Zkai because AI and machine learning models are inherently very computationally intensive. So being able to prove inferences so people don't have to run them all over again is actually quite a powerful yeah, that's one thing off the top of my head, other than the obvious scalability.
01:28:44.070 - 01:29:02.570, Speaker A: Also, if you have to follow along, going back to the previous question about digitalization, you can go to the stagnet forum that I put on the chat link where we actually post our thoughts and ideas of how do we want to decentralize Stagnates. You can follow the discussion there in the proposal and you can comment.
01:29:10.930 - 01:29:25.506, Speaker B: Anything you want to add. David, regarding Star, again, if you want to share your discord in the chat so we can add you to the group. We have a discord in case you.
01:29:25.528 - 01:29:26.578, Speaker A: Haven'T been added yet.
01:29:26.664 - 01:29:41.640, Speaker B: Please put your discord there. Also join the Telegram community where it's also useful for in order to plan meetups. If you want to do some in your cities or you want to talk with us, you have any questions, please let us know there.
01:29:43.290 - 01:30:10.282, Speaker A: All right, good news, it finished compiling. So we can move it to the next step. Let's clear the terminal here. So now that we have the Car One compiler compiled, we want to add these binaries to our path so we can execute these binaries from any place in our file system. So an easy way to do it is just by adding to our configuration.
01:30:10.346 - 01:30:11.514, Speaker B: Files for our shell.
01:30:11.562 - 01:30:52.030, Speaker A: In this case I'm using CSH, it might be using Bash. So just modify this depending of your terminal. If you're using Bash, it will be Bash RC. Just basically adding the path where we compile, where the compiled version of the Car One compiler lives to our path. So once we're done, I'm going to just close terminal and open again so the changes takes place and we're able to find the binaries. So if this goes well, we should be able to call the STARnet compiler just to see the version and what is opening. Standard compile, not compiler.
01:30:52.030 - 01:31:23.078, Speaker A: And there you go. So we have the Binary ready. The Binary is added to our path so we can use it to compile or carry one smart contracts to Sierra. So let's test that the compiler actually works. So I'm going to create a folder just like a sample project. We're just going to put a very simple smart contract and try to compile that. So just going to call this folder when I get into it.
01:31:23.078 - 01:32:07.426, Speaker A: And in here, just going to create just like a test folder. And I'm going to create two folders just for usually I like to have one for where my source smart contract is and where the compiler folder. So just going to call the compiler folder Sierra. So this is how my sample project looks like and I'm going to create a file for my sample smart contract inside of source collect example Cairo. Okay, so I put the tree again, I should see the file. So let me open this with Vs code. David, quick question.
01:32:07.528 - 01:32:11.650, Speaker B: Is there some kind of predator or ESLint for kyo?
01:32:12.790 - 01:32:38.814, Speaker A: Predier or ESLint? The closest will be this extension that we can install, but it's not exactly as prettier because prettier is a formatter so I will say not yet something that he has linked. The extension will work similarly, but not like prettier that actually formats when you save or something like that. When you execute it, how do you increase the font size?
01:32:38.852 - 01:32:39.646, Speaker B: Thank you.
01:32:39.828 - 01:33:09.346, Speaker A: Okay, here you go. I'm just going to put a very simple smart contract. Right, basically we use this macro contract and then we create a module. It's called simple storage. For now, today is not the goal to learn cara one, just to make sure the tooling is working. As you can see, we don't have any syntax highlighting or tooling or anything because we haven't done yet the work of installing the extension. But we have the smart contract.
01:33:09.346 - 01:33:39.762, Speaker A: So let's try to compile it. So here I can just do instagnet compile and I provide the file example Cairo and then the output. And it's going to be a JSON file, the output. So it worked. Our compiler is working. This is how the Sierra looks like with this very simple smart contract. Good.
01:33:39.762 - 01:34:08.090, Speaker A: So we have confirmation that the compiler is working. Now the compiler for Cairo. One next step will be to actually install the Vs code extension. And this source code for that extension, actually it's inside of the Cairo one repo. So let's go back to that repo that we store in Cairo. And we have here a folder called Vs code Cairo that we're going to get into it, right. All right, we're in the right folder.
01:34:08.090 - 01:34:40.250, Speaker A: So first of all, we're going to need to have node JS installed. So in the case of Ubuntu, a simple way to install it will be with this command. There are multiple ways to install this. I'm just going to use this to get the latest node version 19. Let me just expand this more. It's going to work. Let's see.
01:34:40.250 - 01:35:38.156, Speaker A: So in theory, now I can do pseudo apt update where I try to install it. So now I can actually try to install node JS. Let's see. Okay, so if it works well, I should be able to do node and version. And yes, we have node version 19, the latest one installed on the computer. So we're good to actually now compile the extension or just well, when you use JavaScript, you don't really compile. Let's say you package it somehow.
01:35:38.156 - 01:35:56.330, Speaker A: So first of all, we need to have installed a global package called Vs code ese. So this is what you do for compilent extensions. So install it globally. It's under this name ese. This is provided by Vs code.
01:36:01.640 - 01:36:11.044, Speaker B: So remember, everything is being recorded and it will be open YouTube. So you will be able to send you an email with the link. So you can review everything that we're doing right now.
01:36:11.162 - 01:36:59.946, Speaker A: Yeah, and the guy that I'm following, also we have shared with you the link. So exactly what I'm doing is just documenting in a nice document there you can follow along. Okay, so now let's install dependencies for JavaScript with NPM install. Remember, inside of the Vs code Cairo with the extension. Okay, let me just update my NPM just in case this is suggesting me to do copy paste. Oh, I need to do pseudo. This is just optional.
01:36:59.946 - 01:37:33.250, Speaker A: All right. So now I can actually package the extension previous to be able to be installed using this command package that we install this binary globally on NPM. Now we can use it here. This is just a temporary measure. Eventually the extension is going to be published to the marketplace and you will get it directly from Vs code without having to do that. But remember, we're living at the edge. So this is how it needs to be done right now.
01:37:33.250 - 01:38:05.364, Speaker A: So now we have the package, we can actually install it, install it to Vs code with this command. Right. Solid extension. This is the file that we just created. Now we go ahead and in theory should be installed. So let's try. Right, so if I open the extension here, okay, I can see that it is now installed.
01:38:05.364 - 01:38:30.044, Speaker A: Cairo. One is called Extension. But we need to be configured because it's asking for where's the path for this particular binary. The Cairo language server. This is one of the binaries that we compiled from using Rust from source. So we need to provide this path. And to provide that path, let's go back to that's going to be the target release.
01:38:30.044 - 01:39:09.996, Speaker A: Let me just go back here to target. This is where all the binaries are placed. This is my absolute, let's say, path to it. Just going to copy this, going to put it here and the name of the binary. And I think you need to probably close this and turn it on again. So it takes let me close the Vs code and I need to go back to my workflow. Or maybe just open here and it's not taking.
01:39:09.996 - 01:39:23.840, Speaker A: Okay, now it's work. Now I get syntax highlighting and it's going to complain, do some things wrong. Like in this case. Right. So it's a nice helper when you write Cairo one code. So cool. So we have the Vs code extension working.
01:39:23.910 - 01:39:50.052, Speaker B: Yes, Omar, sorry, it's worth mentioning that as David said, I want to repeat that, that we are not learning Cairo right now, but we will do. And we'll have the chapter of the book ready for in a couple of days. So you can start learning Cairo by yourself. And then we can come here and already with more knowledge of Cairo. And we also teach you some Cairo. And also we have some tutorials like Starlinks. We will share in a minute.
01:39:50.052 - 01:39:52.220, Speaker B: So you can start also learning Cairo.
01:39:52.640 - 01:40:12.272, Speaker A: Yeah. Today is just about the dev environment, not really about Cairo. But let me put a little more complex Cairo code here because we actually want to deploy it today. Oh my God. Fixed? Yeah. All right. Again, I'm not going to really explain how this works.
01:40:12.272 - 01:40:41.860, Speaker A: We're going to talk more about Cairo in future sessions. I just want to make sure that we can compile this, we can deploy it to stagnate. So let me just recompile this we did before. You ever go back to oh my God. Okay, so we're going to copy this. Can I paste it here? No. Anyway, stack.
01:40:41.860 - 01:41:25.794, Speaker A: Net compile. Okay, so we compiling the new version of the smart contract. So this is more and more complex now, as we can see here, right? Way more complex. So this is the code that we actually deployed to STARnet that we give to the sequencer, the Sierra smart contracts. Okay, so let's keep moving on the next step now, because to interact with the Stargate, we used to use the target CLI, the staggered CLI is written in Python. So we need to have Python 3.9 in particular to be stored in our system.
01:41:25.794 - 01:42:12.180, Speaker A: So to install a very particular version of Python, at least on Ubuntu, you will need a particular PPA. This one here every time. So I add this repository to my apt. It's because we need Python 3.9, we install Python three point ten. It might not work. Now, I do update references and I'm ready to install Python 3.9
01:42:12.180 - 01:42:51.680, Speaker A: using these two packages, especially for development, because we also need to have virtual environments. Thanks a little bit. If it all went well, we should have now Python 3.9 installed version. Yeah, there it is. You do have it. So now let's actually install the Cairo CLI.
01:42:51.680 - 01:43:36.840, Speaker A: So to use the Cairo CLI, to install it, we need to have one global dependency called GMP. So you can use this command to install it. This is required for the stagnant CLI, not the stagger CLI. You need this global dependency. Now, let's go back to our project that we were working on, call it STARnet test. We're back to our project and I'm going to create a virtual machine here for a virtual environment for Python. So when I install packages, I don't want to install it globally, I just want to install it per project.
01:43:36.840 - 01:44:35.624, Speaker A: So to do that, you do this command, you define that you want a virtual environment, and then you give it a name I'm just going to call Cairo. Right? Then you activate that virtual environment so you can start installing it's called Cairo. Cairo bin activate. So, as you can see, now we're inside of the Python virtual environment, so we can stall the Caroline package. Just before I do that, I'm just going to upgrade Pip to the latest version, just to be safe. And now I can actually install, which is going to give you the starting CLI. And it's installed for this particular project.
01:44:35.624 - 01:45:09.600, Speaker A: It's not installed globally. If you are on a Mac, this might fail. I put some instructions on the guide was the alternative command that you can run on a Mac, because happened to me that it failed. So I found a solution. It's a more complex command, but it works. All right. So if this is working, so we should be able to execute the binary called STARnet, which is the one used by the CLI.
01:45:09.600 - 01:45:28.672, Speaker A: And there we have it. We have zero point 11.0.2. Perfect. So what. Uses the start CLI. In every command, you will have to define to which network you want to deploy or interact. You use that with flags.
01:45:28.672 - 01:46:30.474, Speaker A: And also you need to define which type of wallet. Remember that on Starmet, every wallet is a smart contract, and you have to define to the CLI how the smart contract looks like and how this smart contract is able to verify signatures. So to be a little bit easier for now and not go into much into detail until we get to those sections, I'm going to define two environmental variables on my shell that the standard CLI is going to use and going to make our comments look a little bit simpler. So let me open my profile configuration. Mckaychrc, what open right now? Go to the bottom. And I'm going to add two environmental variables. One is to tell every time that I run a starting command that always targets the testnet alpha girly instead of Mainet.
01:46:30.474 - 01:47:00.490, Speaker A: Right. I don't want to spend money right now. And also to tell them, because it's a kind of abstraction, which type of wallet I want to use to sign transactions. So using this one here. So this would be export as well. It's not export, export, blah, blah, blah. It's using an aversion of the open sapling wallet.
01:47:00.490 - 01:47:34.530, Speaker A: Okay, this looks good. So I should be able now if I close my terminal and I open it again, should be able to access these environmental variables. I do echo stagnet Network. There you go. So it's installed. It's available on our shell. So now, next step, before we can deploy anything, we need to create a user account in our computer because we need to pay for declarations and deployments.
01:47:34.530 - 01:48:37.510, Speaker A: So let's go back to our project for now. Stucknet test. Let me activate again the virtual environment for Python chiro bin activate because the starting CLI is only available in this Python virtual environment. So create the new account at least to get the address of our user account, we use this command, the Stagnate new account, and we give it a name. So using the strong CLI to create a new account in my computer, and I'm going to give it a name, the zero point 11.0.2, so I can add different wallets once the network keeps upgrading. So by doing that, it's not going to create the user account yet.
01:48:37.510 - 01:49:06.762, Speaker A: It's just going to give me the address, because the address is always it can be known before you deploy because it's just an algorithm that will be always the same. So this will be the address of my user account while I deploy it. So I'm just going to copy this one here. And the next step is just I need to send test ETH to this account. I need to fund my wallet even before the wallet exists.
01:49:06.826 - 01:49:07.366, Speaker B: On chain.
01:49:07.418 - 01:49:59.260, Speaker A: This is called the counterfactual deployment, I think it's called. This is a common feature when you have a kind abstraction. So I'm going to send a small amount of ETH to this address. So let me open I think I should have a wallet here in this VM that I could use. Maybe I don't yeah, I have to send it from my so let me just bring this up. Give me a second to unlock my wallet without sharing my key or anything. Just a second.
01:49:59.260 - 01:50:36.280, Speaker A: All right. Okay, so as you can see, I have Bravos here, another account which already has some test ETH on Gurley. So I'm just going to send some test ETH there. So I need just to copy the address. And from here just going to send some amount could send 0.5 test ETH. So I'm using bravos.
01:50:36.280 - 01:51:02.370, Speaker A: It says that it doesn't exist on chain, which is fine. This is the counterfactual deployment. We're going to talk more about that when we talk about account abstraction in future sessions. For now, just follow along. All right, so I've sent a transaction to STARnet Testnet using my wallet. I can follow a lot of transaction here on a block Explorer. So we need to wait until the transaction gets at least to the pending state before we can continue.
01:51:02.370 - 01:51:36.670, Speaker A: So I think right now on testnet blocks are produced every three minutes. If I'm not mistaken, that's why you see the counter. So let's wait a little bit. Let me create the font size so you can see better. So once we get to the pending state, it means that I have the funds available on that particular wallet and I can continue with actually the on chain deployment of my user account. Again, this is a feature of account abstraction. Hopefully we can make it easier for you in the future with tools like Scarp that we haven't talked about it yet.
01:51:36.670 - 01:51:43.230, Speaker A: Questions. In the meantime, Omar or people just post questions.
01:51:44.720 - 01:52:18.970, Speaker B: We have a lot of questions. We have a question from Michael. Sorry, Michael for the late reply. He's having some trouble compiling. There are a couple of questions for you. Are you using a log local? Michael? And the second question is, are you using what version of the compiler? Can you check version please? Or if you're using Scarf, let us know. Scarf is using the newest compiler version because I think there's a problem with that part.
01:52:18.970 - 01:52:25.100, Speaker B: Okay, dimitri is asking it would be nice opportunity to showcase faucets.
01:52:26.640 - 01:53:02.856, Speaker A: Oh, it's a good yes, you in this case, I'm sending Ether from another account that I have. But you can actually use a faucet. Where is it? Tools faucet. There you go. I'm going to put it in the chat link to the faucet where you just put your address and it will give you some amount of it. The faucet has the limitation that it has a limit of how much test if it can give you every ten minutes. So if I try to use it now, I'm going to say oh, you have to wait ten minutes and I don't have time to wait ten minutes.
01:53:02.856 - 01:53:13.710, Speaker A: That's why I went the other way. But if you are more patient, you can use it this way. You will get some test if on your address. Okay, so now that we have yeah, Omar, go ahead.
01:53:14.400 - 01:53:23.150, Speaker B: Sorry, David here, Gleam is okay, go ahead. Gleam is mentioning something very important in the chat, but we can go ahead and mention it later.
01:53:23.520 - 01:54:11.680, Speaker A: Okay, so now that I have test if associated with this address, I'm actually going to deploy my user account, which is a smart contract to this address. So let me get back to my notes putting my secondary. Okay, so to deploy my user account, just clear the screen here. I use this command. So again, you see the standard CLI. Now you see the deploy account command always using this particular account that I created before, the one that we know the address. So if I do that, it's going to actually deploy my user account to testnet.
01:54:11.680 - 01:55:06.980, Speaker A: And you can see, so it says deploy account, contract transaction. So we can follow along the transaction using this hash on stock scan, stark scan, value testnet, put. Here the transaction hash, because we need to wait until it gets to at least the pending state. That's when we know that it's ready to be used. Because what we really want to do is to deploy the Cairo One smart contracts that I showed you before that we have MBS code. Okay, so it's on the pending state. So now we technically have now a user account that we can use to deploy and to invoke transactions.
01:55:06.980 - 01:55:50.192, Speaker A: Cool. Let me just clear here and let's go back now. So before we can deploy a smart contract on a standard, you have to first declare it. The reasons we're going to explain it in the next session. But for now, we're going to execute this command, just going to try to explain what it does. So basically it's going to upload our Sierra, the Sierra code of a smart contract, using this account to pay for fees, for gas fees. And declaring is the previous step before you can deploy, because on a stack you can deploy multiple instances of same declared code.
01:55:50.192 - 01:56:16.404, Speaker A: We're going to talk more about that when we go to a kind of abstraction. For now, just follow along. So when we try to execute this, send this transaction to testnet, it's going to fail because this smart contract was deployed, was declared before, actually by me. So it should tell me there's an error. Yes, the error is that says the class hash blah, blah, blah, blah is already declared. Right. And that's what I was expecting.
01:56:16.404 - 01:57:10.070, Speaker A: That's fine. It means that I can just go directly to the deploy, I don't have to declare. But because sometimes you don't know, it's better to just try to declare and see if it fails. And you can move to the deployment, so oh, wait, did I copy what was the address that I used? The address of my account? Just a SEC. I had to find out which addresses send the account number. Transaction center address. Sorry, just a moment.
01:57:10.070 - 01:57:38.170, Speaker A: All right. Yeah, I forgot to take note of what was the address of our user account, but now I have it because we need to send the deploy transaction. Let me try again the declare, because I need to take note of the class hash, which I didn't do before.
01:57:40.620 - 01:57:54.700, Speaker B: So some people are having trouble using the faucet. So it's very understandable. We are sending you or David. Do we have a method to send the leads without using the faucet? Right now?
01:57:54.850 - 01:58:01.180, Speaker A: Not right now. There's something right now how to do better, because we know the faucet has the limitation.
01:58:02.480 - 01:58:05.052, Speaker B: We have a lot of people right now asking for.
01:58:05.186 - 01:58:50.788, Speaker A: Yeah, that's why we kind of knew, but it's hard to get around. Hopefully, that's one of the things that we need to improve for next time we do base camp, for sure. So to deploy the smart contract, we need to provide the class hash that is provided here in the previous account. I'm just going to remove this because this is a previous thing that I did comment, and the class hash is here. And with this, we should be able to deploy our smart contract. Okay, so the transaction was sent for deploying our smart contract. We can follow along here.
01:58:50.788 - 01:59:17.540, Speaker A: I need to remember to not delete anything from the terminal because I need those addresses. Paste. Paste. Sure. Okay. So this is transactions to deploy the smart contract that we wrote in Cairo one. So we need to wait until it gets to the pending state before we can actually start interacting with it.
01:59:17.540 - 01:59:32.490, Speaker A: So let's wait a couple of seconds there. Any question in the meantime, Omar?
01:59:34.750 - 02:00:11.398, Speaker B: No. Michael is asking, will there be a gross based CLI? And the answer is yes, there would be. It will be swung. But don't worry, the Python one is going to be working, and it's going to be the same. Also, a lot of people are asking for it. Maybe, Mamit, if you have some it and you can help me send to Thomas, please, that would be great. In the meantime, let you know that all the transactions that I made, I send you the date and you should be able to find it.
02:00:11.398 - 02:00:17.580, Speaker B: Now you can deploy your wallet because the transactions were successful. So you can deploy your account.
02:00:18.190 - 02:00:45.266, Speaker A: Yeah. So our smart contract has been deployed, so we can actually now interact with it because we know the address. This one. And you can see first of all, there is a Carawan smart contract, and we can go to the read write section, and if we compare to our code, you can see that our smart contract had two functions. One, to increase balance and one to get balance. This is read only. This is for modify the state.
02:00:45.266 - 02:01:11.210, Speaker A: And if you see in this explorer, you see the get balance. Right now, it's going to be zero because it has no value. But we can actually use the right to increase it. I'm just going to connect the wallet. Wait a second. That's one thing that I didn't prepare for to install a wallet here. So let me just do it on my Mac copy.
02:01:13.790 - 02:01:42.754, Speaker B: While let me explain this. Rafael is asking, can we bridge girly it to STARnet? Yes, we can. You can get some eats, for example, using a faucet. Remember, the name Paradigm has a faucet that can give you girly eats to layer one. So you can send it to your MetaMask account, for example. And then from there, you can breach it using the bridge. I will send you the link in the chat and you can bridge it to the actually, Clement already shared the bridge.
02:01:42.754 - 02:01:59.450, Speaker B: Thank you very much. Clement. Stargate. STARnet IO. It is on the chat. So you can use that to connect your MetaMask account to your Parabolos or Arian account and then you can bridge that to your account. So it is relatively simple.
02:01:59.450 - 02:02:00.140, Speaker B: Yes.
02:02:02.750 - 02:02:07.820, Speaker A: Sorry, just going to we can go back to questions after. Perfect.
02:02:09.490 - 02:02:18.458, Speaker B: I think some people might be leaving right now because of the time. So is there any question? Sorry, what is the homework? Is there any homework?
02:02:18.634 - 02:02:21.198, Speaker A: We'll send it in the email. We'll send an email with the instructions.
02:02:21.294 - 02:02:23.620, Speaker B: Okay, we'll send you an email. Thank you, guys.
02:02:24.630 - 02:03:05.620, Speaker A: All right, so I'm just going to send the value ten to the increased balance just in my wallet stylish transaction, and we wait a little bit until it gets to pending state. So we should be able to do the read operation and see the value of ten coming back. So let's wait a little bit. Let me see what questions we have. When will the main net support Cara One? Okay, we answered that one. Are we sure? Omar that is deployed to Cara one.
02:03:07.830 - 02:03:08.674, Speaker B: What's, already?
02:03:08.792 - 02:03:10.718, Speaker A: Cairo One deployed to Mainet?
02:03:10.814 - 02:03:24.280, Speaker B: Because Michael is saying no, it seems like it's a little bit more complex. A contract has to be tested for a while and then it can be uploaded to the main net. So we cannot do it right now.
02:03:24.730 - 02:03:37.910, Speaker A: Gotcha. I didn't know that. Transaction is about to get to the pending state, which a little bit it means block.
02:03:38.670 - 02:04:06.740, Speaker B: While we wait for that, an anonymous attendee is having an error while deploying the account. It is called storage error code uninitialized contract. It is likely because you haven't sent it to your account. And then deploy the account as David showed, you first have to send to the address of your account date and then you can deploy it.
02:04:07.910 - 02:04:09.140, Speaker A: There you have it.
02:04:10.070 - 02:04:11.742, Speaker B: Sorry, I thought you were finished.
02:04:11.806 - 02:04:28.300, Speaker A: I query the balance again. Now I get the value ten. So to confirm that actually our transaction went through and modified the state of the Smart contract. So now we can read the new value. So that concludes the tutorial to set up the environment. It's a long one, it's a complex one. Again, car one is fairly new.
02:04:28.300 - 02:05:00.370, Speaker A: So hopefully, just to do a brief summary, we had to install Rust, Python and Node JS. We compiled the carawan binaries using rust. Then we configured those binaries to be available anywhere adding to the path. Then we install also Kyra Lang and we stole Python to be able to execute Kyolang. And we stole the Vs code extension as well. So you get this nice syntax highlighting and some easy errors to spot there when you write. Thank you very much for staying so long.
02:05:00.370 - 02:05:13.800, Speaker A: This was supposed to finish a while ago, but it took longer. Hopefully it was useful. You have the guides there and you have more questions. Please use Discord and hopefully you will be able to use the Faucet eventually and get some test it.
02:05:14.570 - 02:05:43.650, Speaker B: Yes, also, if some of you are not able to get some it, let us know please, in the telegram. So I sent it to as much as possible, but I run dry, so I will need to recharge. But let us know in Telegram, please. I won't be able to store all your addresses right now, but send it to the telegram or bridge it. Thank you very much to Clement who help us a lot in this. Also, Glenn. Thank you very much.
02:05:43.650 - 02:05:55.550, Speaker B: And Glenn mentioned also something very important that you have to change your contract hash. Okay, don't worry, we'll see the next time and we'll add it to the book. So thank you very much, folks.
02:05:55.710 - 02:05:58.478, Speaker A: Thank you. Take care. See you next week. Bye bye.
02:05:58.654 - 02:06:03.200, Speaker B: We'll send you an email. Wait for it. Thank you.
