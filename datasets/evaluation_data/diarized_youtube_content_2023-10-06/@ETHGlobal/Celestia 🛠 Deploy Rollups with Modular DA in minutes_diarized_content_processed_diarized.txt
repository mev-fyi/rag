00:00:07.130 - 00:00:57.806, Speaker A: Hello everyone. My name is Diego Ferreir and I'm a solutions engineer at Celestia Labs. And today I'm going to talk about how you can deploy rollups with modular DA in minutes. Right, before we get started, let's just quickly go over the agenda. Like what Celestia? What type of rollups do we support? Port? What's rollkit? Like, how can you use rollkit with Polaris? And also go a little bit in detail about our Celestia op stack integration and our Arbitrum nitro integration. So what's Celestia? One of the co founders of Celestia, Mustafa, recently had a tweet that said, Celestia is a modular data availability network that securely scales with a number of users, making it easy for everyone to launch their own blockchain. So let's try to go a little bit deeper into what each of those aspects actually means.
00:00:57.806 - 00:02:14.082, Speaker A: So, modular. So let's use a modular blockchain because modular blockchains decouple the core functions of a blockchain, which are execution, settlement, consensus, and data availability. So over here is like a nice, quick little diagram that kind of showcases what it means to be modular. So if you think about chains like Solana or even Ethereum, they're monolithic chains because they fulfill all the functions of a blockchain in a single layer, right? Execution, settlement, consensus, and data availability, where Celestia only focuses on consensus and data availability and delegates the job of settlement and execution to other parties, which in this case is rollups. How is data availability related to scaling? Well with data availability or more specifically, data availability sampling light clients such as the ones that we have in Celestia, users with the lowest hardware requirements are able to still verify the data availability of the chain without having to fully download a block of data. Meaning that end user verifiability has really low hardware requirements for users across the network. The more demand there is of like, Celestia block space, the more people are running light clients, the more people are sampling blocks.
00:02:14.082 - 00:03:03.718, Speaker A: And the more people we have sampling blocks, the safer it is to essentially make blocks bigger on Celestia without sacrificing the hardware requirements to run a light node. Right? So if you think about that, compared to a chain like Ethereum or even more prevalent, something like Solana, verifying the chain means running really beefy hardware. Right. It's a common relationship that we know. If you look at the history of blockchains, if you want bigger blocks, meaning more space, more scalability, you usually increase the cost of being able to verify the chain. But when you have data availability sampling like clients verifying the chain cost dramatically decrease. And yeah, now what does it mean to launch your own blockchain? Right.
00:03:03.718 - 00:04:17.390, Speaker A: So Celestia again only does state availability. We don't do settlement, we don't do execution. So there's really a lot of different flavors of sort of like roll ups and stuff that you can build with Celestia, we're mainly going to talk about sovereign roll ups and just Celestiums or Ethereum rollups that use Celestia for data availability. So what are sovereign roll ups? You may or may not have heard of what they are before, but essentially a sovereign rollup takes care of both its own execution but also its own settlement. So it's a self settling blockchain or self settling roll up, and it delegates consensus and data availability to another blockchain such as Celestia compared to a traditional smart contract roll up, where we're all familiar with kind of how they work, right? They post data to a chain like Ethereum, and in that same chain, they settle through a smart contract and either handle disputes for a optimistic rollup or validity proofs for a secret rollup. A sovereign rollup doesn't have a smart contract to talk to since Celestia doesn't have smart contract. But instead, the verification of the validity of the state of the rollup is performed through proofs, like fraud proofs or validity proofs that are relayed peer to peer.
00:04:17.390 - 00:05:14.740, Speaker A: How can you build a sovereign rollup? So at Celestia, some of the folks created a public good library called Rollkit that allows you to build sovereign rollups using the Cosmos SDK. And more recently, we integrated the Rollkit library with a framework called Polaris from the Bearachain folks, which allows you to build EVM blockchains. And by combining Rollkit with Polaris, we're able to run sovereign EVM rollups. So how does that work? That documentation PR is actually already merged to main. So if you just go to Rollkit dev, you'll be able to go to the Docs and see like, oh, what is Polaris? How can I use Polaris? But essentially, it's very simple. You clone the repo, you install Foundry, start the roll up, and you're done. So, as an example, let's see if I can let's see.
00:05:14.740 - 00:05:57.806, Speaker A: So I have that right here. I already have the dependencies installed. And whatnot I am going to need to start a actually, you bring that back because I need to copy paste the command. But essentially the way you would do this locally, right, before you interact with any Celestia testnet, is that you would run a local Celestia container, which obviously you can do that with docker. Let me get that. So now we have that, right? So we run that. I don't know why.
00:05:57.806 - 00:06:55.620, Speaker A: It's like messed up, man. All right, now it's running. So now we have a local Celestia container, right? So that way you can easily sort of debug stuff. You don't have to worry about spending testnet tokens or mainnet tokens at the beginning, right? Like, obviously you want to hit testnet or mainnet at some point, but ideally you can iterate and try things faster by running things locally. Once you have that running, you can, for example, after you've already cloned Polaris and you have all the dependencies you can do, make start, and that will start the chain. Sorry. It's also a little bit hard to see with the projector on the wall, but it may or may not take a little bit of time.
00:06:55.620 - 00:08:00.630, Speaker A: But if anything, we can just get back to it after I talk about the other roll ups that you can build with Celestia. So let's see if I can do just that while this runs. So we'll get back to that in a second, right? Let's talk about building Ethereum roll ups, right? Or more specifically, how you can build L two S, l three S and beyond, right, with Celestia DA. And why would you do this? Right? So running your own roll up on Ethereum has a big problem, and that's the fact that publishing the call data for your roll up on Ethereum is really expensive. Here's a screenshot I took of dune dashboard of this year. These are all the cost of different L two S on Ethereum and how much they had to pay for call data, right? And this is during 2023, which obviously had less demand for this block space than during the Bull run, meaning it's not congested, and it's still very expensive. It's a very scarce resource.
00:08:00.630 - 00:09:04.454, Speaker A: So the solution to that is to have your roll up post data to Celestia. Why would you do that? It has great security. It has significantly cheaper price, and it's also built for you. It's a modular DA layer because it serves the purposes of serving DA for roll up builders such as yourself. Here's an example of the folks at Upnode that are currently running a 2048 game on an Op stack Celestia chain and where it shows how much it cost to execute a transaction. Right here I also have some math that I pulled out from our docs on how you can estimate these costs, right? Because I'm about to show you how cheap it is to post your data to Celestia. So I used these calculations at another presentation, but essentially, Polygon ckvm published like, half a gig of data at a cost of $153,000 the past month, or $300 per megabyte with Celestia DA at the price of like, $5 per Tia.
00:09:04.454 - 00:10:06.430, Speaker A: That's $4.22 per megabyte, which would have costed Polygon ckvm only $2,000 in DA cost, right? And now let me get my mouse over here, and I can show you. Sorry it took some time, but that is our Sovereign EVM roll up running on Polaris, right? So that's communicating to our local Celestia testnet. The way that works is essentially you're running this Cosmos SDK chain that replaces Tendermint with the roll kit library. So it converts your Cosmos SDK application into a Sovereign rollup, and that plugs into Polaris, giving you EVM access, right? So you have access to all the tools that you're probably already going to use during this hackathon. You can use Foundry, you can use Solidity, whatever language you want. And you can connect your Sovereign roll up to existing chains by using things like Hyperlain, for example.
00:10:06.430 - 00:11:19.974, Speaker A: And you can sort of start thinking about creative ways in which you can connect your Sovereign roll up with other chains and transmit data throughout Blockchains using something like Hyperlane. But if that's not exactly what you're looking to do, and you want to have, say, a stack that you may be more familiar with or a stack that has a native bridge to Ethereum, we do have modular DA for the Op stack. It's something that we worked on since last year and it's been running on testnet for, I would say pretty much the whole year since February. So give or take ten months, right? So the way you can interact with this, we have a testnet. So the Bubs testnet, the folks at Caldera are running that. So essentially that's an Op Stack chain on top of, I believe, Ethereum Gorely, but that uses Celestia 48. So before you try to deploy your own roll up or play around with having your own Op Stack chain, you can just simply take your contracts and deploy them bub's testnet, right? See how much cheaper it is and build your app with that.
00:11:19.974 - 00:12:34.618, Speaker A: That already would qualify you for our set of prices. But also you can get more creative and realize it's really simple to deploy my contracts to Bub's testnet, and it's really simple to also deploy my own Op stack chain, right? Which you can do by looking at our docs and following the documentation on how you could do that. I am going to go back here and I am going to shut down our Sovereign EVM roll up and I'm going to show you how to run the Opistack roll up. It may or may not take a bit since there's a lot of sort of like dependencies and stuff that Op stack has, but let's just hope that that works in time for the rest of the presentation. And yeah, I mean, in theory, ideally, the path that you should follow with something like Op Stack is like, oh, you're already deploying something on Solidity, right? Deploy it to Bub's testnet, see for yourself how it works, then deploy your own roll up. The reason you will want to do this, especially with Celestia DA, it's really cheap. You can build apps that truly take advantage of the fact that transactions are super cheap.
00:12:34.618 - 00:13:38.610, Speaker A: The same way that the folks at Node, something I showed the screenshot before, built an onchain game like 2048. Each move that you make on that game is a transaction. But because those transactions are so cheap, you can just build on chain games, build high throughput DFI applications, et cetera. And once you're comfortable that I have my app, I deployed it on Bubs, I deployed it on my own local Op stack chain that's talking to local Celestia. You can swap out the local Celestia docker for Light Node that runs on the Celestia testnet, right? And at your own discretion, maybe try it out on Mainet. But you don't have to it's a hackathon, right? Just use testnets and yeah, lastly, we also have an integration with the Arbitram Nitro stack so you can deploy your own Nitro rollup with Celestia DA. This is still sort of like in the beta phase, so it doesn't support fraud proofs at the moment, I am the person working on that and it will be done soon.
00:13:38.610 - 00:14:04.410, Speaker A: But it's not done right now for people at the hackathon to use. But you can use this version without fraud proofs. It still has all the great stuff that Nitro has, right? It has Stylus, you're running your own roll up. You can transfer tokens into your roll up. You can use, again, tools like I mentioned before, like Hyperlane. And yeah, it's also pretty much like straightforward. If you try deploying this and it doesn't work, let me know.
00:14:04.410 - 00:14:56.460, Speaker A: I still haven't written documentation for how you would use this and there's also not that much documentation on how to use Nitro in general. So I apologize for that. But yeah, so we may or may not have had an issue with the Wi Fi and pulling the images for Op stack on Docker, but that's okay because we should be able to maybe showcase the Arbitrage roll up. So with that in mind so we have two sort of like categories for prices. We have the modularizer category, that's $8,000.01. Person gets $2,000.04, other people can get 1004, other people can get 500.
00:14:56.460 - 00:16:05.470, Speaker A: This is essentially for deploying your already existing app on a Celestia roll up. So deploy it on Bub's Testnet, deploy it on your own roll up. That would give you higher chances of qualifying for these prices and deploy your own Sovereign EVM roll up with Rollkit and Polaris. And my recommendation is that there's a lot of cool cross chain stuff that you can do if you just think about using something like Hyperlane. Like, how can I get, say, maybe the result of some contract that I build with Axiom on Ethel One and sort of like transfer that data to my own roll up with Hyperlain? So if you're thinking about building anything that's cross chain and whatnot highly recommend that, it's really not that hard to qualify for these prices. So if you're already going to build something using Solidity, think about it, it's pretty straightforward. Use whatever stack you want if you want to build something with Nitro, right, because you want to build something with Stylus, go ahead and use our integration and qualify for both prices, like Arbitrarium prices and celestial prices.
00:16:05.470 - 00:17:00.370, Speaker A: And finally we have a little bit more challenging price of $2,000 rock and roll of Rumble, which essentially all you have to do famous last words is to introduce a new stack to the Celestia family so you can take something like our Op stack integration. These are just some ideas that I had like 30 minutes ago. But you can swap out where you're settling, right? So op stack chain settles on Ethereum l one. And some people may build, like, op stack layer threes. But to qualify for this price, you could, for example, make an op stack chain that settles on something like Gnosis chain, the file coin fevm. Maybe you make a roll up on Chili's that uses their fan tokens in some way, right? Or maybe you make an op stack roll up that settles on Neon EVM. So now you have, like, the first op stack roll up that settles on Solana.
00:17:00.370 - 00:17:24.700, Speaker A: And another way you can also qualify for these prices is to take an existing roll up stack and modify to use Celestia DA. Right? So CK, sync, scroll, et cetera, they're out there. These are more for the backend developers. I mean, this is, like, my job. I find it fun. Hopefully you find it fun too. And let's see.
00:17:24.700 - 00:18:32.186, Speaker A: Okay, may or may not be running sorry, let me run that again. But I think I believe that's, yeah, that's pretty much it for sort of, like, the presentation. Let me see if I can actually get this thing running locally. But in the meantime, while this runs, if anyone has any questions, more than happy to answer. Oh, give me a second. But yeah, we're ready allocated. Yeah, it if you don't have any questions at the mean, you can just reach out to me on Twitter.
00:18:32.186 - 00:18:55.220, Speaker A: We also have a support channel for the entire hackathon on Telegram. And, yeah, ask any questions that you may have on, like, how can I qualify for the Celestia prices, or how do I use any of these integrations? Or how would I recommend you to start looking at certain code bases like Scroll, Cksync, et cetera, to modify them to make your own new roll up? Yeah.
