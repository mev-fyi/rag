00:00:06.970 - 00:00:15.950, Speaker A: Cool, cool. Take it away. So the focus of this panel is going to be on building trustless scaling solutions, particularly around security and auditing.
00:00:17.810 - 00:00:18.078, Speaker B: I.
00:00:18.084 - 00:00:29.830, Speaker A: Guess for those of us who are new to the event. Alex, Daniel, Barry, would you like to briefly introduce yourselves? I guess Alex, starting with Alex.
00:00:32.810 - 00:00:35.640, Speaker C: Yeah, sure. I hope you can hear me now.
00:00:36.170 - 00:00:37.030, Speaker A: Yep.
00:00:37.470 - 00:01:21.560, Speaker C: Yeah. I spent a significant number of years on EVM research, mostly at the and, you know, regarding Polygon Ckvm. At Spiritbit, we assembled a number of different teams to conduct review, and I've been participating on the EVM side, mostly on EVM compatibility questions, how the Ckvm would compare to mainnet, and if there's any differences, what kind of risks those could pose on multiple facets, including languages. I think that's like a short intro.
00:01:21.930 - 00:01:25.238, Speaker A: Cool. Daniel, do you want to go next?
00:01:25.404 - 00:01:39.034, Speaker D: Yeah, sure. Daniel from Polygon zero. So we work on a separate Zig EVM, which is focused on type one compatibility and also working on related technology like Plunky Two and now Plunky Three.
00:01:39.232 - 00:01:39.690, Speaker B: Cool.
00:01:39.760 - 00:01:47.360, Speaker A: And I guess I also work with Daniel. And then last but definitely not least, Barry. Do you want to briefly introduce yourself?
00:01:48.290 - 00:01:50.542, Speaker E: Oh, can you hear me?
00:01:50.676 - 00:01:51.360, Speaker A: Yeah.
00:01:52.710 - 00:02:07.300, Speaker E: Hey, I'm Barry. I work on a whole bunch of things, including I had a lot of fun working with on the earliest Dhdkbm stuff. I'm happy to be here today and about all.
00:02:08.070 - 00:02:17.030, Speaker A: Cool, cool. Well, I think we can just jump into it. I think it's safe to say, Jordy, from conversations that we've had, that yeah, Chris.
00:02:17.390 - 00:02:23.900, Speaker F: Yes. I'm sorry, but we do have Baya now. Everyone is now.
00:02:28.590 - 00:03:04.480, Speaker A: VI. Do you want to introduce yourself? All right. Yeah. I think it's safe to say, Jordy, from conversations that we've had internally at Polygon, that security has sort of been the guiding principle of the development of the KVM. And so I wonder if you could just talk at a super high level about the philosophy and the perspective around security and auditing and sort of building a system that fundamentally protects user funds. So we'd love to hear.
00:03:05.330 - 00:04:05.330, Speaker B: Yeah. It has been the biggest challenge of the full system because these systems are really complex and there is a lot of new pieces that are built on top that are built for this. So one single piece that goes wrong and the system is just insecure. This is really problematic, and this has been difficult here when we face insecurity, just trying to isolate the things that can go wrong, just trying to find the right mitigations for the things that, you know, that can go wrong. So in the case of Polygon, we just distinguish, like, four things that can go wrong. One is smart contracts. We know very much about what can go wrong.
00:04:05.330 - 00:04:36.250, Speaker B: Smart contract, and this is what type of things. The other is the correctness. This is really bad. If the correctness of the proof means you are proving something that's correct, but this correctness goes to that some balance is wrong. This is really bad that we cannot do much about that. The good things on this point is that because it's ethereum compatible, we just leverage on top. So we just run all the ethereum all the theorem tests and we are passing all the relevant ethereum tests there.
00:04:36.250 - 00:05:13.186, Speaker B: There's more than thousands of tests. This give us a good confidentiality that there are no correctness errors or at least it's difficult to get the correctness errors because all the tests are passed. So everything is working as it's supposed to be. This is not exactly so there are some exceptions and there are things that can go wrong and we find something at some point about that that we will be very decision. That's really difficult. The one that's really easy is the solneth error. Solneth error in the program is just forgetting some constraint.
00:05:13.186 - 00:05:52.606, Speaker B: This is really easy and this is what we can go wrong. And here the mitigation was proposed by Vitalik at some point. But there are two mitigations. The first is that if you have a priority proverb, so if you are running the proof, you are not going to prove something that's wrong. So I mean this is difficult, but the proverb may stop. Or if you want to have a decentralized system, you need anybody to write a proverb. And here is where maybe if two provers go from the same state with the central different states, then you can detect that automatically in the smart contract and how the system these two mitigations are good for this onlet which is really easy to have a mistake.
00:05:52.606 - 00:06:24.320, Speaker B: And the other, the fourth one is more technical, but it's like that the proverb just gets stopped because you cannot generate the proof. But this is just the mitigation is very silicone. The system just stops at seven days in a time. All you just upgrade the system and you continue. So this is how the things that's how you feel comfortable for launching. But again, security, you never have the 100% security that the system is correct.
00:06:25.090 - 00:06:36.910, Speaker A: Right? So we sort of have this framework where errors can be either correctness soundness errors and approver and then smart contract bugs. Is that sort of safety?
00:06:37.250 - 00:06:40.500, Speaker B: Yeah. Then the other is that approver but you are not able to.
00:06:45.350 - 00:07:12.990, Speaker A: So given that framework, I guess it would be really interesting to hear from Alex and then VI, we didn't get a chance to hear your intro. So if you could provide that but just what the experience has been auditing different parts of the system sort of within that framework of different like how do you approach auditing for correctness? How do you approach auditing for proversoundness? So it'd be cool to share for your perspective.
00:07:14.210 - 00:08:24.882, Speaker G: Thank you, Brendan. Sorry guys, I had some issues with the video so I skipped the intro. So I'm the CEO and co founder of EXAS we did the audit for the Zkvm. So about the question, I would say that with the soundness I wouldn't say that there is a lot of things different than testing for concreteness and soundness. I would say that it's about the approach that you take in auditing the different layers of the Zkvm because basically it has like we can call it like hardware layer, firmware layer and application layer. And one thing that we're trying to do is that when further we go down into the layers, for example, when we were auditing like hardware layer, we're trying to use also some toolings there because like static analysis and dynamic analysis, trying to write like a small tools, some toolings that will help us out. Because basically that's where almost everything is connected with some edge cases.
00:08:24.882 - 00:09:03.920, Speaker G: And the bigger the coverage the better. And you have a lot of, for example, auditing peel state machines, you have a lot of constraints and a lot of assumptions. It's hard to just remember all of them sometimes. Yeah, it's better to use some toolings in that kind of situation. And also like the manual review, it's always the manual review for every layer that you do. Sometimes you cannot find edge cases that will be found programmatically, you just need to watch them. That's pretty much it.
00:09:07.410 - 00:10:17.190, Speaker C: Yeah. I would say a single word answer to the question what did it felt like? It felt like scary, like extremely scary getting into it. Because the Ckvm team has built a number of languages, a lot of tooling, a lot of different parts and they were also constantly improving the system and conducting an internal review. But they were super helpful in setting up trainings, training workshops and being available to answer any kind of questions. When looking at any of the different layers, I think what has been challenging, of course, is the different layers, what kind of understanding and knowledge and background those different layers required and then the connection between the layers. I think generally it has been initially it was extremely scary, but as you get into it, you build up confidence. And especially the fact that Polygon ZKM is able to execute most of the ethereum state tests.
00:10:17.190 - 00:11:14.010, Speaker C: That was a reassuring fact. And there was in fact a good starting point to dig deeper and see why any of those test cases would have been disabled. There could have been a number of reasons, mostly because the test cases required gas higher than what the approver would support. So even just investigating from that level down, it is possible to find a number of different issues. But I think generally we had a number of different teams looking at the different parts. The state machines have been looked in isolation, the EVM instructions have been looked in isolation and then there is like a stage where you try to connect these dots together. I think tooling, we did try to invent some tooling, especially for the peel for the peel layer.
00:11:14.010 - 00:11:52.310, Speaker C: But I think given the handy synthesis technologies, there's just not enough tooling. What I see to be somewhat useful is pattern matching. And once you identified a given issue, which may look like something you want to investigate further, I think some of those patterns were emerging in multiple parts. So, yeah, I think pattern matching, when you look at such nascent technology, that's more useful than trying to invent complex tooling.
00:11:52.970 - 00:11:55.400, Speaker A: Cool. That makes a lot of sense.
00:11:56.250 - 00:12:27.490, Speaker G: Want to add that? I definitely share the sense of scare as the thing. Yeah, I was just trying to be more pragmatic on the answer, but yeah, sure. Yeah. About the tooling part. So with a lot of powder matches, like wear and analysis thing, of course, yeah. I mean, creating complex tooling here, I will pardon an overfill other than things like variant analysis techniques.
00:12:28.390 - 00:12:57.050, Speaker A: Cool. Makes sense. So, Barry, we already heard that your conversations with Jordy sort of served as the genesis for this entire project, and you guys are longtime friends. I'm really curious to hear from both you and Vitalik sort of how the EF sees its role as shepherding and stewarding these protocols and projects into maturity and into production, and particularly in the context of security and audits.
00:12:58.930 - 00:13:00.510, Speaker E: Sure. Thank you, Brendan.
00:13:01.730 - 00:13:04.014, Speaker G: So, yeah, the way I think about.
00:13:04.052 - 00:13:56.110, Speaker E: This is that there's a lot of different layer tools that are sort of, like, working to scale Ethereum. And one thing that I would really like to see on the security dimension is more collaboration between the different layer. Twos, I feel like a very nice security parameter we could have is if we had a ZK roll up that also had a fraud proof. And a fraud proof was just like the fraud proof was one of the members of the Security Council, for example. And if the fraud proof disagreed with the ZKP, then we would have to fall back to the Security Council to decide and break the tie. I think that this is a very nice kind of underrated feature where we have all these teams working independently. But I would like to see eventually everyone sort of joining forces and working together because at the end of the day, you get a lot more security having a roll up with a fault proof and a validity proof.
00:13:57.570 - 00:13:58.174, Speaker H: Cool.
00:13:58.292 - 00:14:00.126, Speaker A: And then yeah, Vitalik, it would just.
00:14:00.148 - 00:15:25.980, Speaker H: Be really cool to get your I mean, I think in general, in development of all of these new technologies, the Ethereum Foundation tries its best to play a supporting role. At the same time, try to avoid picking winners in the kind of project and application space and try to support projects that kind of uplift the entire ecosystem and kind of play those more supportive tasks that are valuable. Things across the entire ecosystem that are more kind of coordination related that would make much less sense for each individual team to do on its own and so forth. Sometimes that has meant writing and contributing to specific pieces of code, though I think even there we've been striving to not have the foundation dominate that and bring in contributions from other middle layer two teams and some other teams. Sometimes that involves being supportive on the security and auditing side. Sometimes that supports other things, but generally trying to kind of foreground the people in the ecosystem that are doing all the amazing work as much as possible.
00:15:26.670 - 00:15:50.354, Speaker A: Cool. Very. So Daniel, it would be really interesting to hear from your perspective, being internal to polygon, how sort of the culture of collaboration around security and auditing actually functions. I know that you were one of the participants on the internal audit of Flock, so yeah, it would be great.
00:15:50.392 - 00:16:52.040, Speaker D: To get your yeah, yeah, it's been a really nice collaboration between Polygon Zero, Hermes and the Mitin team. So together we're sort of the ZK side of polygon. My involvement in Hermes Zkavm was fairly small, but one thing I was able to do was help to do an internal audit of the FOC code, which was very interesting to learn about and see how they were doing things. Yeah, we just had a lot of really good discussions with these internal teams about what the right approach is, especially when it comes to sort of training wheels or backup layers of security. What sort of backup layers can we come up with to make sure that, worst case, if there is a soundness bug, then we have some kind of fallback option and it's not just game over.
00:16:52.730 - 00:16:53.238, Speaker A: Yeah.
00:16:53.324 - 00:16:53.960, Speaker E: Cool.
00:16:54.650 - 00:17:13.600, Speaker A: And so back to Jordy. It would be really interesting to hear about your sort of perspective on the roadmap for what training wheels we have now, what the process of taking them off will look like, and sort of like the end state that you'd like to get to.
00:17:14.850 - 00:17:56.534, Speaker B: Well, first of all, let me point one thing, just to answer. It a bit far here, and it's that all the audits are public. I don't know if the last ones maybe are in a draft mode, but if they are not public now, they will be public like tomorrow. You can check that in the repos. So all the repos, they have a directory with the audits. It's full transparency here. I would recommend all the especially the Zkolaps space to read those audits because as the people say here, there is a lot of patterns, a lot of things that were discovered and you can learn a lot just reviewing those audits.
00:17:56.534 - 00:18:35.394, Speaker B: And I think it's called for the security in there. Of course, we are absolutely open. Just I think collaboration is key here. Sharing and being transparent with audits, I think is one step in that direction for the future. We just started, I think was last Friday a bug bounty program. I think that continuous auditing is fundamental for here. We will continue to we plan some embrace, as I mentioned, just including this precompact smart contract.
00:18:35.394 - 00:19:35.114, Speaker B: So this will be complemented with some audits and we probably do some real audits of some of the parts we already have identified some of the pieces that maybe should be more checked more closely or just talking with different auditors. We hear we have a good feedback of what are the more dark zones and clear zones and what are the concerns and we are sharing a lot this feeling with the different teams and yeah, security is just invest as much as you can and put as much effort as you can, never is going to be enough. So here is polygon. We have a full team, full security team just working in that direction. We have a full budget in security and it's a huge commitment. And the worst thing is that you never have this confidence, but that doesn't mean that you have to invest as much as you can.
00:19:35.312 - 00:20:12.710, Speaker A: Is it makes sense? Yeah, I guess it would be interesting to hear about where this space can sort of go because I know that we've invested a lot of time in building tooling for Pill and ZK assembly. I wonder in the future do you feel like the burden of auditing will be reduced as we build more tooling? How do we get to sort of a state where we can do more kind of rapid development without as much of a burden on auditing? Do you think that's possible? Interested to get your perspective?
00:20:15.210 - 00:21:02.680, Speaker G: I think that toolings are something that needs to be done. I mean, it will never interchange the audit, the review from people, at least in the foreseeable future I think. But the toolings is a must have in any case because it will shorten the time of the reviews. It will help a lot of ways, like for example, if you can fuzz something, it helps a lot in exception that just going through by hands and doing everything manually. But it will never interchange the audit. Maybe not never but near future.
00:21:03.770 - 00:21:22.560, Speaker A: Yeah, it seems safe to say that formal verification for Zkbm is pretty far away. Alex, maybe not. Alex, anything to add on tooling and sort of automating certain parts of the audit?
00:21:27.780 - 00:23:41.790, Speaker C: Yeah, I think certainly the tools we have created were more about transforming PL to be more readable in certain aspects and then maybe being able to create some proofs for certain properties. We did initially in the first engagement, we did try to do that and you can see some of the results of that in the first report. This tool is called Perspective and later we learned that actually Polygon also has a similar inspection tool with a web interface. But regarding more rapid development, I think what we found generally is the separation of Peel and Cksm may have proved to be a tiny bit of a bottleneck, at least for us, because you have two disjoint systems which then aren't connected through various paths. And we kind of felt that maybe if there would be a language in between the two so you wouldn't have like two separate systems, maybe that would have helped, but it's really hard to tell at this point. And then I think the other tools which would be useful is more like IDE plugins to help you navigate the system much better. So one example in ZKSM, the syntax itself, it took a bit of time to get used to and as you have generally a lot of utilities just jumping to utilities and seeing what kind of constraints or registers they clobber, that is like a big question, right? It is really basically like what assembly is with calling conventions where you have to be aware what kind of pieces could be overwritten what pieces are saved and I think some kind of an ID extension to help navigate these could definitely improve the review process and then also had to actually generate some of this code.
00:23:41.790 - 00:24:59.568, Speaker C: The arithmetic state machine seemed to have been generated by a different piece of code and if you have such pieces where you can generate the build code or the ZKSM code and you can be certain that the generator is correct, maybe it is possible to formally verify the generator. That is something which could also reduce the time to review. But as it stands today, I think the really big saving grace is the testing suite. But unfortunately, as you see over time in mainnet, no matter how many tests you have, they're always going to be edge cases found. Especially if you look at the pre compiles those are like hotspot for issues and more complex call related instructions. I mean, one big one in the past has been return data and I think these pieces may be even more complicated in Cgvm, just the way memory and any of these constraints are handled. So, yeah, I would definitely welcome a lot of tooling and I think over time we may get closer to have more velocity in reviewing tests.
00:24:59.568 - 00:25:13.240, Speaker C: But I don't think menu review will ever really stop in any of these systems because you need to have a holistic view and some intuition into something which may not be a pattern.
00:25:14.300 - 00:25:55.610, Speaker A: Cool, that makes sense. I'm curious Jordy, about the sort of the upgrade path for Zkvm. So suppose that the EVM on L one introduces new EI IPS or for some reason we want to change the hash function in the state tree. How do you see that functioning? Actually Daniel, if we could also get your perspective on this as well, that would be great. But starting with like do you see the optimal path being sort of upgraded in place with a multi SIG? Is it migrating to a new roll up? What's sort of the optimal path there.
00:25:59.180 - 00:26:28.064, Speaker B: We are ethereum compatible. So the idea is at least what's in the idea is to be upgrade in place. So just doing some upgrades. Of course there are some pieces that could be a little bit complex. For example that you want to upgrade the hash function. Maybe that would be just a full brief state of the system. You can do a proof of state transition actually with aggregation we can actually build that.
00:26:28.064 - 00:27:04.910, Speaker B: But this may be maybe wrong. So here we need to see case by case and see what kind of upgrade we do. But most of the upgrades that we have planned, at least in the short run, are going to be just adding functionality and maybe just adjusting some compatibility issues. So at least for a while it's going to be that way. So the idea is to be as close as possible to Ethereum so it's transiting from type three to type through type two. Ideally in a year we should be a type two roll up if everything goes okay.
00:27:06.080 - 00:27:10.088, Speaker A: Makes sense. Daniel, anything to add on upgrading roll ups?
00:27:10.264 - 00:28:05.330, Speaker D: Yeah, I think most upgrades are fairly straightforward because well, the ones that would be difficult would be ones that touch state and changing the hash factor, for example, would be more complicated migration, but others would be fairly easy. And I think it shouldn't be that much work to keep up with changes to Ethereum because for good reason, they happen very slowly. Yeah. On our side we implemented some things already like BLS, which is still a VIP, it hasn't fully landed yet, but we just have it ready for it if or when that happens. Yeah, but overall I don't think upgrades will be a big deal unless we need to do something like change the hash function.
00:28:05.700 - 00:28:45.310, Speaker A: Cool. And then I'd like to go off script a little bit and ask I'm actually very curious on Italic's perspective on this. To what extent do you think that it's important for Ethereum to eventually be sort of sustainably verified? And obviously we're talking about incorporating EIF L two. To what extent do you think that the future design of the Ethereum should sort of take into account CK friendliness so that we get to the point that we might eventually be able to?
00:28:46.080 - 00:29:46.304, Speaker H: I think that's crucially important. I've been talking a lot about the importance of preserving and improving upon the decentralization of the Ethereum network and I think in the long term a really important part of the decentralization of the network is going to be just everyone being able to really easily verify the rules of the chain. Right. Like I've talked about how I think it should be possible to stake not even just on a laptop, but on a phone and for something like that to be a reality. Phones are very good at bandwidth, right, but they're very bad at computation. And so you basically are going to have to use something like a Snark or a Stark to replace the computation of verifying an Ethereum block with something much simpler. And the nice thing is that especially with things like PBS and the various stuff that's coming down the Mev pipeline, the computational load of running a node actually should be pretty low.
00:29:46.304 - 00:30:36.290, Speaker H: Like, it literally should be possible to make it literally just be verifying once, like, downloading a bunch of data, hashing it and verifying a like, to me, definitely a dream long term future for, like, actually, if you look at the know picture that I published on Twitter, I think at the end of last year in The Verge, after the vergle trees, the Verge is no longer just about vertical trees. The Verge is now about verification. And I added in a section where the ultimate goal basically is reducing the cost of verifying the chain down to verifying one proof. So I would absolutely love it if the layer one could eventually make its way over to satisfying that goal over the next five or ten years.
00:30:37.700 - 00:30:55.030, Speaker A: That's cool. My cell phone is often dead, so I'm sort of terrified of the inactivity penalty if I were to stick from my phone. But I'm sure for more responsible people, that would be a very workable model. Well, cool. I think this has been a really.
00:30:55.720 - 00:31:04.840, Speaker H: I have two old phones with me that I'm no longer using, so I just put one of those up for Staking and leave it at yeah, that's.
00:31:09.040 - 00:31:26.240, Speaker A: Panel has been really interesting, really fun. I think we're right at time, but I guess, Jordy, do you want to leave us with a closing thought about security auditing Zkvm in production?
00:31:26.820 - 00:31:56.650, Speaker B: I would say that especially for the users, just be responsible. It's a new thing. There is many things that can go wrong, so we need to be responsible. Of course we want this to use and we want this to happen. Security is also about people using. This is how the things get stronger, just having this maturity of the things. But at the same time, we need to understand.
00:31:56.650 - 00:32:29.250, Speaker B: So it's important to put the effort to explain to the people that this is a very new technology. That's a very nice technology. It's a very good technology. It's probably the technology of the future, but it's just important. So do not go crazy and understand that we are in the early days of this technology and taking account that don't put the money, don't put all the savings and start asking for mortgage and putting the money there. So just things like that.
00:32:31.460 - 00:32:33.744, Speaker A: Cool. Well, Grace, over to you.
00:32:33.942 - 00:32:54.500, Speaker F: Well all yes. Well, thank you very much. I thank you all, the panelists for this great panel. And also just wanted to say that we encourage collaboration, and I'm happy that Barry actually mentioned that between the CKV and Rollups now, we leave Brendan and Vitalik in this panel.
