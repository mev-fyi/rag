00:00:36.630 - 00:00:47.340, Speaker A: Hello, everyone, and welcome to the LFGO Ave Labs workshop, building applications with Go. Joining us today is Andrew Schmidt, who will be taking us through this session. And with that, I'll pass over to Andrew to get the session started.
00:00:48.430 - 00:01:27.840, Speaker B: Hey, thanks for the. Yeah, my name is Andrew Schmidt. Online to go by Defi Spartan. So, yeah, this workshop is going to be about building applications with Go. We're just going to go through some high level details about Go, the different mechanics about how it works, and then really dive into the tracks for the hackathon, for LFGo, and talk about what the different tracks are, some different ideas and resources. So what is go at a high level? Go is a decentralized stablecoin native to the AAVE protocol. So what this means is that the Go stablecoin is governed by the same DAO which governs the AAVE protocol.
00:01:27.840 - 00:02:15.128, Speaker B: And the other way that Go is native to the AAVE protocol is that when the Go token was launched, the first facilitator for Go, which we'll get into exactly what that terminology means in a bit, but the AbE protocol is actually the first way that the Go token is able to be minted and burned. And this occurs seamlessly through the very same methods which the AAVE protocol currently operates. So what is the AbE protocol? I'm sure a lot of people are probably familiar, but at a high level, there's kind of three main groups within the AAVE protocol ecosystem. So you have suppliers. These are users who are providing liquidity and then receiving a tokenized representation called a tokens. These tokens are used to earn yield and used as collateral. And where that yield comes from is from users who are borrowing.
00:02:15.128 - 00:03:06.396, Speaker B: So borrowing is drawing liquidity based on Dow controlled parameters and collateralization. So what this means is that the Dow sets parameters for specific reserves, which basically says the conditions in which a position is deemed to be over collateralized. So each asset might have different risk parameters, and these can be determined based on the liquidity of the reserve, different factors such as price volatility. There's a lot of different methodology that goes into selecting risk parameters. There are even specific teams dedicated to essentially fine tuning these parameters. But the coexistence between suppliers and borrowers is really the core of the ABE protocol. And then you have this third group called liquidators, who essentially maintain the over collateralization of the system by responding to these risk parameters.
00:03:06.396 - 00:04:06.580, Speaker B: So if a borrower has a position which is under the minimum collateralization, which is specified by these parameters, then a liquidator can come in and repay a portion of that borrow position and then redeem a corresponding amount of collateral plus a premium. And this premium exists in order to actually incentivize that this liquidation always occurs as soon as it's able to be executed. So how exactly does go interact with the Ave protocol? So this is just a small solidity snippet on the left. You can see this is the typical ave code for essentially borrowing an asset. So the pool contract is the main entry point for the AAVE protocol, and this is for regular assets and for go. So you call the borrow function and you're passing in essentially just the address of the token, the amount, the interest rate mode, which for the go token is always going to be what's called a variable rate. So we'll get exactly into how exactly that rate is determined for go, but at a high level.
00:04:06.580 - 00:04:58.628, Speaker B: Essentially what this slide is trying to show is that interacting with minting go through the ave protocol is essentially a seamless operation. You don't have to call a different function, interact with a different contract. It happens the exact same way that a typical interaction would with the Ave protocol. So how are the rates determined? So if I want to borrow a token from the AAVE protocol, I'm going to be paying a certain interest rate. And that interest rate could either be a variable rate, which is changing dynamically, or a stable rate, which is essentially selecting a single rate at a point in time, and then essentially keeping that rate constant until certain rebalance conditions might be met. So the vast majority of liquidity within the Abe protocol is borrowed at what's called a variable rate. And that is what's represented inside of this graph here.
00:04:58.628 - 00:05:41.680, Speaker B: So essentially, I'm missing my axes here, but essentially this bottom axes here is the utilization. So this is essentially the ratio of the amount that has been supplied to the amount that is borrowed. So say there is 100 tokens in a pool and 50 of those are borrowed. That would represent a utilization rate of 50%. And then on this left axis here, this is actually the borrow rate, which is being incurred by the reserve. So if you take this graph as an example, say at a utilization rate of 52%, this reserve might be 53.6%, this reserve might have a 5% interest rate, and then it ticks up as the utilization increases.
00:05:41.680 - 00:06:38.400, Speaker B: And this entire curve here is actually defined by parameters. So these parameters are what ave governance is deciding, basically, what is the minimum interest rate, what is the optimal ratio. This optimal ratio is designed so that you want to basically select an optimal rate so that users are incentivized to borrow so that there is yield coming to suppliers. But you don't want this optimal utilization ratio to be so high that people are not able to withdraw and access their liquidity from supplying. So go works a little bit differently than this curve for one simple reason, and that's that go is minted, not supplied. So with a typical reserve asset, say like wrapped ethereum, if I am a user and I supply that token, and another user comes in and wants to borrow that token, they are actually borrowing that underlying token from the user that's supplied go works a bit differently. And that go liquidity is not actually supplied to the protocol, it's actually minted.
00:06:38.400 - 00:07:23.236, Speaker B: And in a little bit we're actually going to see the exact lines of code which actually execute this minting. And the borrow rate is instead of being defined by a curve, it's determined directly through AAVE governance. And there's also this additional parameter called the discount mechanism. And so all of the parameters for Go kind of coalesce inside of this table here. And all of these like is mentioned above, are determined through Abe community governance. So there's essentially parameters which determine how much of a discount you are able to receive, what will that discount be, and also the kind of tiering of the rate. So what will the rate start at and what will the rate be with a maximum amount of the discount? And a really good way to understand this is to check out app ave.com
00:07:23.236 - 00:08:06.944, Speaker B: and click on the actual Go reserve page. And there's this really nice calculator which lets you see essentially based on the amount of Go that is borrowed, and also the amount of staked Ave. So actually to backtrack a bit, the discount mechanism for Go is based on the staked Ave token. So staked Ave represents the Ave token staked inside of the AAVE protocol safety module. There's a lot of documentation inside AAVE docs about what exactly the safety module is. What is the difference between staked Ave and AAvE? But essentially for Go, you can just think of the staked Ave token as basically a wrapped form of the Ave token. And if you hold this token inside of your wallet, you are eligible to borrow Go at a discounted rate.
00:08:06.944 - 00:08:45.756, Speaker B: So you can see that essentially in this graphic, that the base borrow rate for Go is 6.42%. And for every one staked AVe that your wallet holds, you're able to borrow 100 Go at this discounted rate of 4.49%. And so essentially, as you change the amount of Go that's borrowed and the amount of abbey that is staked, you can see what percentage of that borrow rate will be discounted versus the percentage that won't. So now we'll get into stability mechanisms. So Go is a stablecoin. And really, I kind of break this down into two different forms of stability. The first is collateralization.
00:08:45.756 - 00:09:48.048, Speaker B: So the collateralization of Go is handled through facilitators. And facilitators are essentially the addresses which are able to mint and burn go. And at the launch of Go, there are two of these facilitators, the AbE facilitator and the flash mint. So the ABE facilitator is the AbE protocol, which we went through earlier in the presentation, where users are supplying tokens and then able to borrow go against this. And essentially how the collateralization works in the Aave protocol is that the Go Oracle actually has a fixed price of one usd. And what this means is that at any point, no matter what collateral asset you've supplied, what the price of that collateral asset is, you'll be able to mint go against this asset at a value of one USD. So if I supply 100 usd worth of some collateral, and that collateral asset has a maximum borrow ratio of, say, 80%, it means that no matter what the open market price of go is, I'm always able to borrow 80 go against that in that particular scenario.
00:09:48.048 - 00:10:44.176, Speaker B: And similarly, for liquidations, the threshold at which a go borrow position is able to be liquidated is determined by this fixed price of one USD. But this is very different than saying that the price of the go token is fixed to one USD. And this is where we get into kind of the minting and redemption value. So the collateralization aspect of go having the price fixed to one USD. What this means is that within the context of the Ave protocol, that go should always be over collateralized by one USD. So for every one go that is borrowed, there should always be one USD worth of collateral that is backing go, no matter if Go is trading above or below that peg. And so the minting and redemption value, this is essentially the price which you are actually able to take these go tokens and use them in some other context.
00:10:44.176 - 00:11:20.364, Speaker B: And really the ways that kind of Go maintains its stability with respect to this minting and redemption is kind of a triage of things. So you have interest rate management. If the interest rate is lower, people were incentivized to mint go. If the interest rate is higher, people are more incentivized to essentially close these borrow positions and obtain go to do that. And then you also have other factors such as exchange liquidity. So obviously, even if the go token theoretically could be worth any amount, you actually have to be able to realize the amount. You have to be able to essentially convert some token into another token.
00:11:20.364 - 00:12:21.700, Speaker B: And having a liquidity on exchanges, particularly on decentralized exchanges, which are actually doing these actions on chain, is very important to actually have a stable minting and redemption value. And the AAVE protocol actually, or the Ave Dao, actually has essentially a committee which has been approved to kind of formulate strategies. Because the world of exchange liquidity is actually very complex and there's a lot of different mechanisms that can be put in place to essentially incentivize or disincentivize certain actions to kind of maintain this fixed value. And then lastly is a peg stability facilitator. So this essentially would be a new facilitator for the protocol which would allow kind of fixed transfers. So the ability to essentially take one of another token, say a different stablecoin, and redeem it one to one directly to another go token. And this is something which is not currently live, but has been proposed to the Abe governance forum, and actually just recently has gone to a snapshot vote.
00:12:21.700 - 00:12:53.068, Speaker B: So, to dive into the LfGO hackathon, there's four prize tracks. The three main ones are payments, vaults and facilitators. And then there's this general prize track for integrations, which is a much more open track. It could apply to projects within any of these three tracks or things which are not included in them. And obviously you can see the prize amounts here. So diving into payments, I kind of break this into three different tiers. So the first tier that I'll go through is kind of just simple go transfer.
00:12:53.068 - 00:13:40.872, Speaker B: So this is basically just utilizing the functionality of the go token. So go is an ERC 20 token. This is the standard Ethereum token type, and essentially allows you to transfer tokens from one address to another. And basically the mechanism by which you're transferring these tokens is by calling functions on the actual go contract. There's one other tidbit here, which is that the Go token supports EIP 20 612 permit, which allows for signature based approval. So instead of a user having to submit a transaction on chain to approve the tokens, they can sign a message, and then somebody else or any other address on that network can take this signature and then call a function called permit. And this performs the same action as the approval.
00:13:40.872 - 00:14:39.116, Speaker B: It's just that it does not have to be executed by the end user. And this can provide some really good user experience because the end user may not actually have to submit a transaction, they may just have to sign a message, and then the actual transaction is performed behind the scenes. The next type of action which we're getting into more practical use cases. So these are payments which are actually utilizing other tokens and potentially other networks. So there are a lot of different applications for payments inside of web three, a lot of things which you might want to use tokens for, and a lot of them mainly due to kind of the fact that the go token is new, and also that different types of applications might require different types of tokens for payments. So go might not directly be usable for a payment. But if you're able to switch the go token into any other token on any other network, essentially you can utilize go for payments in that context.
00:14:39.116 - 00:15:31.500, Speaker B: And so that's like here, starting with go, and the end result would be interacting with any token on any chain. That's kind of the idealized version of a payment application. And then lastly you have facilitator integration. So this is one way in which go is very unique and also is a very powerful tool for payments, which is that the ABE facilitator enables users to supply collateral and borrow go against it. And you can basically utilize this functionality in order to allow users to use their collateral as a form of payments without actually having to sell or liquidate that collateral. So you might say supply Ethereum, and you might want to use that ethereum for payments. But what you could do is supply Ethereum, borrow go, and then do this option too, which is basically switching that borrowed go token into Ethereum.
00:15:31.500 - 00:16:41.140, Speaker B: So now you're maintaining 100% of your exposure to Ethereum while still utilizing the go token to actually do the payments that you want to do with that ethereum. And lastly, credit delegation. So this is a really powerful feature of the ABE protocol. It allows you to take the borrowing power for your collateral and delegate it to another address. So I might take, say I have one Ethereum supplied and I have the ability to borrow, say, 1000 go against this, but maybe I want to delegate that to someone else so that this entity now has the ability to borrow that go. That entity could be a person, it could be a group, or it could be a system of smart contracts, which in my opinion is the most powerful because essentially you could build any type of scaffolded interaction so you can have really fine tuned controls over the risk and also have verifiability to see that, oh, this smart contract used this amount of credit, this smart contract has this amount of credit available. And when you kind of combine all three of these, you end up with a very potential powerful system for payments.
00:16:41.140 - 00:17:43.290, Speaker B: And lastly, you have this question of how exactly does a user interact? And so for the hackathon, there's kind of two ways that you might consider approaching this. One would be an application, either a web application or a mobile application, which essentially provides kind of that experience. And the second would be an SDK or a widget. So basically something that could be embedded into other applications. And an SDK is actually quite a powerful tool. And I would definitely suggest if you're looking into the payments track, to consider potentially exposing whatever you build as an SDK or widget, because if you have a dedicated application, essentially you might only be able to do payments through that application, and it might be a very limited scope, whereas if you expose something as sort of a library or something that can be embedded, you might be able to enable a whole lot more payments by allowing it to be integrated into a lot of different experiences. This is not to kind of restrict your ideas, it's mainly just to kind of highlight that you have these options available.
00:17:43.290 - 00:18:30.308, Speaker B: And then the next. Well, actually, to stick on this slide for a second, I highly encourage you guys to check out a docs go XYZ where we have a dedicated shoot. I can't switch my tab here, sorry, I have a zoom zoom window open on me. Sorry, I'm not able to switch that right now. But if you go to docs go XYZ, on the very flashbard on the home page, there is a link to kind of a hackathon dashboard, and there are dedicated pages for each of these prize tracks. And I would highly recommend checking those out. And you'll be able to see essentially ideas, resources and past hackathon projects for inspiration about potential ways to integrate payments or these other prize tracks into your applications.
00:18:30.308 - 00:19:19.188, Speaker B: So the next one is vaults. So this is any smart contract integration with go that defines the allocation amongst users, groups or protocols. So this is kind of a wordy explanation, but essentially what this is trying to get is that a vault is essentially a smart contract which defines the rules for who, what, where and how these go tokens are actually able to be utilized. And just a couple of examples of potential vaults that could be built, starting with ERC 4626. So this essentially is a smart contract vault which is tokenized. So it's a way to basically represent a position within a vault by holding a token and having very clear rules within this smart contract vault about what that ownership is. There's also a credit delegation vault.
00:19:19.188 - 00:20:15.340, Speaker B: So credit delegation, the feature that I mentioned on the previous slide, you can also utilize within smart contract infrastructure to define very unique agreements. So say I have go inside of my wallet, I might be able to delegate that, go to a smart contract, and then that smart contract then decides how to allocate that. It might have a system of pre built strategies, it might have sort of a community governance aspect where a community decides how those tokens are allocated. Really the possibilities are endless because you can delegate credit to any ethereum smart contract. So any logic you can write in a contract, you can execute through a credit delegation vault. Sort of on this topic, you could also collateralize different types of reserves, so things like nfts or different types of tokens which you might not be able to use as collateral in the AAVE protocol. You could build basically a custom vault to kind of facilitate that borrowing.
00:20:15.340 - 00:21:06.408, Speaker B: And then lastly kind of treasury management. So this is mainly not with respect to the Abe treasury, but kind of treasury management for a specific team or group who might want to utilize the flexibility of the AAVE protocol to kind of have their tokens supplied as collateral and then sort of utilize go as sort of this streaming mechanism to sort of perform the day to day operations that they might want to do. And lastly, we have facilitators for the core prize tracks. So the go token contract is laid out in a very simple way that essentially you have addresses which are deemed facilitators that have a capacity and a level. So the capacity is the amount of go they're able to borrow. The level is the amount of go that they have borrowed, or sorry, not borrowed, but minted. Within the AAVE facilitator, this is borrowing, but there's also this flash mint facilitator.
00:21:06.408 - 00:22:10.000, Speaker B: So flash mint is similar to the Ave protocol functionality of flash loan, where essentially you're able to borrow a specified amount of go tokens with the condition that those tokens are returned within a single transaction. And this is really powerful for things like entering positions which might require multiple transactions. So say, instead of having to do supply, borrow, supply borrow, you could essentially take that entire borrow amount in one transaction, do something with it, and then repay those tokens at the end of the transaction. And then kind of this is the cut off where essentially go is today that the AAVE facilitator and the flash mint facilitator comprise the mechanisms to mint the go token today. But these can be extended through Ave governance to essentially allow new types of facilitators to be brought to the market. So the go stability module that I mentioned earlier is the facilitator that is kind of closest. I would say that it's gone through sort of the early stages of the governance process, and essentially these could be extended to be any type of facilitator.
00:22:10.000 - 00:24:02.100, Speaker B: So for the price track, the facilitator track is to design a new facilitator that can be proposed to the Aave Dao. And kind of the features I want to highlight here are, number one, that facilitators are approved through AAVE governance, which means that there's kind of a high bar to essentially get a facilitator to market. And that's something that should be mindful of within hackathon projects is that definitely the feasibility of a facilitator is going to be something that's very important, something that maintains sort of levels of decentralization, that maintains collateralization, and probably most importantly, provides some sort of utility to the Ave Dao. So when the Ave Dao is kind of weighing these decisions, they kind of have to weigh this risk reward of do we want to basically allow this facilitator to mint go and use this sort of new mechanism for allowing Go to be minted versus the benefit to basically enabling new users to use this facilitator? And so there are a lot of different types of facilitators that you could potentially create. The Godocs Go XYZ website has a lot of different ideas and resources there to kind of draw inspiration from, but kind of the ones that I would highlight would be kind of integrations with smart contracts. Just because the AAVe Dao governance and AAVE protocol operate entirely through smart contracts. And so if you're able to define basically a really robust system of having collateral in smart contracts, or interacting with existing smart contracts, like existing DeFi protocols, such as decentralized exchanges, sort of other protocols similar to Aave, you could basically utilize these existing very secure pieces of code and leverage sort of their security and their collateralization to kind of make your facilitator more robust and decentralized.
00:24:02.100 - 00:25:01.610, Speaker B: And lastly, the integrations prize track is sort of a general purpose track to integrate gotoken in any type of application. This does not even necessarily need to be a web application or a mobile application. These could be just unique projects which provide some utility to the go ecosystem. Things like developer tooling or data analysis or wallet insights with something like metamask snaps. These would all be things that would qualify because this track is mainly meant to be just sort of a general framework for incentivizing applications to be built, which might be creative things, but may not fall within the other prize tracks. Or they could be things within the price track, the other prize tracks, but maybe they have sort of a more niche use case that maybe it's a type of payment application, but it's really mainly meant to be something focused on data analysis or getting further insights to users. So these would be the types of things that would kind of fall under this integrations track.
00:25:01.610 - 00:25:27.664, Speaker B: Lastly, we have resources, so I would highly recommend checking out this Linktree site. Here we list all of the different documentations, sdks, contract registries, anything you need to kind of get started building with go. And that is actually the end of the presentation. So I'll leave it here and it looks like we have, do we have some questions in the chat? Let me check.
00:25:27.702 - 00:25:38.660, Speaker A: I don't think there were any questions, but yeah, if anybody has any questions we've got some time. Feel free to take yourself off mute and ask, or just type your questions in the chat.
00:25:43.970 - 00:26:30.998, Speaker B: I guess as we wait for those to come in and highlight. Just this one other cool thing that I wanted to show earlier, which is that you might be familiar with kind of etherscan IO as kind of a tool to investigate smart contracts. But there's this other really cool thing that you can do, which is that if you take any block Explorer link, it could be etherscan or a different block explorer and just replace IO with this deth net. I'll put it in the chat too. This actually lets you view the verified source code through a block explorer. So this is a really neat tool to kind of dive into actually looking at the source code of how different smart contracts work. So this is actually the go token smart contract.
00:26:30.998 - 00:27:15.530, Speaker B: As you can see, it's a total of 130 lines. So it's very compact but very powerful. And it has to do with this sort of facilitator infrastructure where I'll highlight basically this mint function. This function right here is where every go token is originated from. So a facilitator address calls this mint function, and then essentially this contract delegates that call to that facilitator and says, okay, facilitator, you're able to mint this go token, and now you're able to perform the operation which your facilitator does. So I think this is a really cool contract to read through to kind of understand at a high level how the go token was designed, especially if you're looking at the facilitator track. It looks like we have some questions.
00:27:15.530 - 00:27:59.866, Speaker B: Now, could you elaborate? ERC 4626, tokenized vault versus treasury vault difference a little bit more. So, actually, there's a lot of overlap between those two things. And could a project both be present as a facilitator and a vault in terms of a prize? So to answer one at a time, there's actually a lot of crossover between the 4626 vault and a treasury vault. Essentially, you could utilize ERC 4626 to build a treasury vault. So I'd say 4626 is kind of the primitive. It's like the type of vault that you're building, whereas treasury is the actual kind of implementation, like what you're using that vault for. So yeah, definitely they're kind of not mutually exclusive things.
00:27:59.866 - 00:29:07.246, Speaker B: They can kind of exist together. And a project that could be a facilitator and a vault, this is also definitely something that could kind of be combined together. So a facilitator is a smart contract which basically is calling this mint function on the go token. And so if you have a vault which essentially defines some sort of ownership, maybe it says, maybe it's a multi signature contract, and it says, I need five of seven signers to execute something. This could definitely serve as a type of facilitator. And if you think about kind of different types of facilitators, especially if your facilitator is doing something with off chain collateral, where you're sort of utilizing some sort of oracle, you can kind of think of this as a vault or sort of a smart contract which is defining essentially what Oracle or under what conditions the go facilitator would actually be able to mint the token. So definitely I'd say that yes, a project could be of both a facilitator and a vault says do ave deposited token support permit, if not any other that come to mind.
00:29:07.246 - 00:30:05.906, Speaker B: So yes, actually every single a token within the Ave protocol v three has support for permit. So this means that if you hold a tokens in your wallet, the example you gave a wrapped ethereum, you're able to sign a message the same way that you are with the Go token and actually transfer that underlying collateral. So yes, that is definitely something that you can utilize within your projects is permit for a tokens. Then we have another question. What if, like Makerdao, we create peg based on stablecoins, like USDC USDT, or even dai to mint go peg stablecoins. So I think this is actually very similar to the Go stability module. So if you're familiar with Makerdao, they have this concept of the peg stability module, and the Go stability module is essentially just an implementation of the same peg stability idea.
00:30:05.906 - 00:30:46.190, Speaker B: So I think if I understand the question right, the go stability module kind of serves this purpose where essentially you're able to mint go one to one against other tokens that would be approved. So say the go stability facilitator is live and the governance allows a certain credit line for certain tokens like USDC, USDT Dai. In that case, then you would be able to mint go directly against those tokens. So it works very similar to that makerdao peg stability facilitator. Awesome. With that, it looks like I don't see any more questions and we seem to be at.
00:30:46.640 - 00:31:14.870, Speaker A: Yeah, yeah. So definitely a great presentation, Andrew. Really appreciate it. And everybody else, thank you all for attending. And I think we have just one more workshop later today and then also the second team formation session that Andrew will also be joining with us. So if you're still stuck on what to do in terms of ideas, we're looking for a team definitely come attend that. And Andrew would just a plethora of resources and information to help you all out.
00:31:14.870 - 00:31:17.940, Speaker A: Yeah. Thanks again, Andrew, for the great presentation.
00:31:18.280 - 00:31:20.080, Speaker B: Awesome. Thanks for having me. Cheers.
