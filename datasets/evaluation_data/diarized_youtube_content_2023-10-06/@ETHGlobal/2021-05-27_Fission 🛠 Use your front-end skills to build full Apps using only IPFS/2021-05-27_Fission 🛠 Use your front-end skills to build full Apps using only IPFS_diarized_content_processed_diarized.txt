00:00:00.330 - 00:00:06.590, Speaker A: So, without further ado, I'll let Boris and James take it away, introduce themselves, and start this workshop.
00:00:07.090 - 00:00:32.198, Speaker B: Awesome. Thank you, Catherine. Hi, I'm Boris Mann, CEO and founder of Fission. We build heavily on IPFS. We have a background, actually, where we worked a lot with ETH and some core dev activities, and going to show you pretty much helpful tips on how to use IPFS. James, I'll hand it over to you to introduce yourself.
00:00:32.364 - 00:00:51.280, Speaker C: Sure. Hey, everybody. I'm James. I work with Boris at Fission. I am head of the Developer Success Team, which means I work with developers on our platform, making sure their apps are awesome. So I'll be here to help out with any technical questions as Boris goes along.
00:00:56.370 - 00:02:11.238, Speaker B: And my apologies, I have a YouTube stream somewhere in the background, so I'm literally hearing myself talk right now on a time loop, but I'll figure that in a minute. So what is fission? What we're doing is really building a client side edge stack so that you can basically add identity and auth and user owned data and an entire distributed file system on top of IPFS, really standardizing and integrating hard things like privacy, security, sync, and a bunch of other stuff that are hard for individual developers to build. And we want to make these things accessible to people on the front end so that you can focus on full features, apps that act like desktop or mobile applications, including working offline. And all of this is really because of the magic of IPFS. So how do we use IPFS? Content addressing is the huge innovation that IPFS does. It means that Data is portable. Every single piece of content has this unique content address that isn't tied to a DNS address.
00:02:11.238 - 00:02:56.754, Speaker B: It's not tied to example forest JPEG, it's just a hash. So that means that I can put it online, you can copy it, you can host it from your computer without permission. So that kind of web3 permissionless is there. Of course, most of the web runs on Http. And what the Web native API does, our software development kit is it helps you run IPFS in the browser. So we actually launch JS IPFS, which is also developed by Protocol Labs to run a small IPFS node purely in JavaScript directly in your browser. And then Data is synced to individual users browsers and published out natively over IPFS.
00:02:56.754 - 00:03:56.806, Speaker B: We're not making Restful API calls or talking to a centralized server. We're making calls over IPFS, and then our server is helping make sure it stays online so you don't have to necessarily worry about arcane concepts like pinning, and you can add any other regular calls that you do in your front end. So we actually designed an additional layer on top of IPFS that we call the web Native File System. So it's built on top as a public and key a private encrypted file system. So right now, anybody can access a content address on IPFS if you know that address. So essentially everything is public on the wider global IPFS network. Of course, this doesn't work if you want to share private data and also adds a few other things like versioning and metadata to make it an actual file system that you can use.
00:03:56.806 - 00:04:39.010, Speaker B: So we think IPFS and content addressing is a truly new thing in the world. It's super exciting, but what we want to do is make it so easy to use that it's boring. So our web native SDK really decentralized offline user controlled Web app development. We include an Auth system so that no password secure on authentication. We're actually doing private keys in the browser, which mostly in Ethereum land you're taught, is really dangerous. What we're using is the Web crypto API. So the private key is kept in a browser, including on mobile.
00:04:39.010 - 00:05:11.658, Speaker B: There's a link to our guide, and that's where you can get started with the SDK, and it's also where you can download the CLI and get started. All of the stuff that we're doing is open source. We're happy to have people come extended and work on it right now, but right now our team is working on making really solid versions of all of this as a building block that you can reliably use. James, can I get you to actually talk over authentication and authorization for a second while I try and turn off my background YouTube?
00:05:11.834 - 00:06:07.358, Speaker C: No problem. Yeah. So in terms of dropping into what the code actually looks like in the Web native SDK, so, as Boris mentioned, it's a passwordless authentication system. So the WebCrypto API in the browser, we use to generate non exportable keys in the browser. And then as a developer using Web native SDK, we've abstracted all that so you don't have to worry about any of the key generation, the management of that, that's all handled by the SDK. So what you do is something similar to the code snippet there where you call an initialize function, and you're going to give it a little bit of information about the app that you've created and then requesting some permissions to portions of a user's file system. So when your app boots up, they load the page and they go to authorize.
00:06:07.358 - 00:06:42.430, Speaker C: They'll be directed to the screenshot that you see on the right, which is what we call our Auth lobby at the login page. And the user will be prompted. You've been asked to give permission to various portions of your file system by this app yes or no. And then once they click either yes or no, they're redirected back to your app and you'll see the second half of the code there. You've got some states basically describing the current state of authorization for the user.
00:06:43.330 - 00:06:43.790, Speaker B: Awesome.
00:06:43.860 - 00:06:44.334, Speaker C: Are you back?
00:06:44.372 - 00:06:44.606, Speaker B: Thank you.
00:06:44.628 - 00:06:44.846, Speaker C: All right.
00:06:44.868 - 00:07:39.866, Speaker B: And I managed to go and stop myself from going, well, more crazy. Lots of code snippets around this where basically you've got these public and private files, everything's encrypted at rest. Our basic view with a lot of the stuff that we take on encryption is that you kind of have to assume that all the pipes are broken. And so our approach is that for private data, you should encrypt it end to end and you should encrypt it at rest. And we've done this in such a way that we feel quite confident about the security of your data. All of this is non custodial, so Fission doesn't have access to any of your encryption keys. We encourage you to link between your CLI and multiple browser devices so that you can get back to those keys.
00:07:39.866 - 00:08:29.866, Speaker B: And we're working on other non custodial account recovery as well, solving some really interesting challenge. We're making all of this work in browser without any plugins, so you're not having to add Wallet Connect or MetaMask. And that's one of the things that you can do, including, of course, all of the stuff of being able to read and write files that you can't really keep on any blockchain because it is too expensive to keep large amounts of data. So we're the perfect complement for a lot of your blockchain apps where you continue to only have to be on the front end and don't have to add a centralized server to any of this. I will pause for a second. Do we have any questions in general about this? That's a great question. So NJ Singh asked for ethereum.
00:08:29.866 - 00:09:28.174, Speaker B: DApps. Any benefit of adding Fission authentication over standard Web Three MetaMask authentication method? Yes, I have an example at the end, but essentially, just exactly as I've said, there's certain things that you can do with just the back end auth from Wallet Connect or MetaMask, where you're using Web Three JS or Ethers JS to handle that with essentially a statically published site. Any data that you want to keep for the user is something that you would have to add a centralized server to, or then add a database to link a Web Three ID to something else that you store. And with Fission, the user keeps all of that data. So they come to your app and you get permission to be able to read that stuff, client side. So the user knows that their stuff is available. And literally the data can't be hacked or leaked because it isn't sitting in one spot, it's sitting with the individual user.
00:09:28.174 - 00:10:13.402, Speaker B: And so that would be the reason why you would add this kind of thing. And of course, files or anything else if you have things that you want to publish. Obviously NFTs are a big topic, so that's something that you can add where the user themselves stores the NFT in their own file system. It's the same address because it's IPFS, of course, but instead of some centralized pinning service or sort of thing like that, each user could actually store their own NFT and jointly help share it. So what we also have included with the set of capabilities that you can do with Fission is we have a full app publishing platform. So it does static file publishing. You'll get a free subdomain in SSL for both apps and users.
00:10:13.402 - 00:10:54.814, Speaker B: You can add custom domains. Some interesting things is, because of the way that we've architected it, all the features of the Fission platform are available to each of your apps as well. So you can make an app that builds apps. So lots of interesting use cases there where you might give access to users and in fact give and publish their own app for them. And all of this stuff is being published to IPFS. So it means that people can help host the app data as well as their personal user data, the CLI. Basically, we've made this super simple.
00:10:54.814 - 00:11:34.698, Speaker B: You don't need to use GitHub if you don't want to. You can download the CLI. We've bundled an install of Goips so that we can control it completely. We've designed this for not just web3 developers, but we have many web two classic developers using this successfully in the wild, you can sign up and register directly on the CLI. So you can go on the web, or you can go on the CLI and get signed up, which we think is a pretty great experience. Install it and go ahead and do a Fission setup. It'll download from IPFS daemon and set it up for you.
00:11:34.698 - 00:12:35.098, Speaker B: We've got lots of emoji, which is always important. It will generate a private key for you locally, so just like your GitHub or other SSH keys that you might have and then a DNS link for the user's did. So, as an example, my public file system that I'm just going to type into chat is at Boris Files Fission name, and that's actually my file system. You won't be able to look into the private file system because it's all encrypted, but you can go down the pretty tree and actually see the files that I have in there as well. And all of this stuff works both natively in the browser as well as on the command line for this. And then let's go ahead and register an app, fission app register. You'll have a build directory, you'll get a subdomain, and you can see here big narrow fuchsia elf.
00:12:35.098 - 00:13:09.766, Speaker B: We're pretty proud of the random subdomains that get generated for you. Or you can pick a name as well, and then you've got a little local file, and then you'll immediately get a link to where this is. So IPFS runfision.com is our IPFS gateway, but you can then access it from any public IPFS gateway or from your local IPFS nodes, and then Fission app publish. There's no step two. So all of these files are added to your local IPFS node, and then we ask the Fission server to replicate it. Actually, natively over IPFS.
00:13:09.766 - 00:13:59.686, Speaker B: A lot of other systems do uploads over Https and then do IPFS publishing on their side. We think that's not the right centralized model. We think that you as developers should participate directly in app publishing. So we've done this all over the native protocol. What this also means if you're doing your second publish so we all know if we've just added a bunch of stuff to git, it'll take longer to do a git push or something like that. If you publish a second time because you made a typo, as a lot of us do, it'll be really quick because it's literally just sending the changed files over IPFS, which will be just a few minor blocks in difference of the text that you're editing or an image that you're updating, which is a pretty nice feature. We also have a GitHub action.
00:13:59.686 - 00:14:03.626, Speaker B: James, you built it, you should talk about it.
00:14:03.808 - 00:14:54.060, Speaker C: Sure. So, yeah, one of the things, as Boris mentioned very quickly is unlike a lot of sort of static publishing platforms, we don't actually rely on git, right. We do all the publishing directly over IPFS, which is great for single users, often like low tech users. I mean, it doesn't even have to be a web app, right? Like, you can just publish a directory full of files to a Fission app, but to enable sort of larger teams, multiple users, we have a GitHub action which allows you to basically do everything that Boris just showed, but automatically. Right. So on anything merged to main automatically gets published to the new app. We are working on doing, per pull request, basically preview apps, right.
00:14:54.060 - 00:15:17.070, Speaker C: In addition to whatever automated testing you may have running for your app, you can also have it spin up a temporary URL where you can go do some user testing as well on that new basically basically the Fission CLI for multiple users.
00:15:17.230 - 00:15:48.234, Speaker B: Awesome. Thanks, James. Fission Drive is our first party app where users can browse their file system. So this can also be a really great hack. Like how do I upload something to IPFS? Use Fission Drive and put it in your public folder. So I believe we're one of the only systems that natively do read write IPFS in the browser and so we maintain the Fission Drive. James, can you drop the link in the chat there for clicking apps write data in here.
00:15:48.234 - 00:16:21.574, Speaker B: So much like you might have a library or preferences folder on your desktop operating system, you can browse into essentially the data files that apps write in there as well. This default view is encrypted by default. We want users to feel comfortable that they're not accidentally leaking data. So we've made public kind of a separate area. It does work offline because it's running as a PWA and we'll have access to whatever it has locally. Try it, it's live now. It'll guide you through creating an account on the web.
00:16:21.574 - 00:17:07.486, Speaker B: If you don't already have one. And then when you set up your CLI and run Fission setup, it'll prompt you for your existing username and actually link with your private key in the browser. A little bit like how keybase has worked in the past. All our stuff is open source and available, so you can use this yourself as well. I've said this word multiple times and it seems scary. So we are continuing our thread of private keys in the browser. So working with Protocol Labs and an initial grant from them and from Filecoin, we've got an extension to our web native SDK that allows for secure non consortial storage of private keys in the browser without plugins, including on mobile.
00:17:07.486 - 00:17:50.290, Speaker B: That's a lot, but again, it means really great onboarding. I'll drop a link later. We've got our sample app, I think it's ancient round Crab, where we've got our Filecoin demo app up and running, where we're literally issuing a filecoin key in the browser on the fly. For someone who doesn't have to go through the loop of downloading a wallet or creating something separately, it's all noncustodial. So underneath these are sort of key fragments and running a cosigner where the other parts of the key are held and then put together. So it's available now for Filecoin keys. And ethereum keys are next on the roadmap.
00:17:50.290 - 00:18:34.142, Speaker B: Again. Right now you can use Fission as is to help with your regular MetaMask and Wallet Connect powered apps to add file storage and preferences. Any other user specific data. I really want to stress for you, this works today. IPFS is exciting, you should go do it. Try not to just use Netlify or DigitalOcean or other things like this, but see if we can make this stuff decentralized as well at the app layer. So go to the guide, install the CLI, Fission register Fission publish, literally upload an image or something like that, or an index HTML and that's live.
00:18:34.142 - 00:19:25.026, Speaker B: There's no step two, we link it into DNS because lots of people navigate over web two still, so it kind of works for everyone. And try out drive and link all of those things and add that web native SDK and we've got some sample code and other things that you can get started with and then add those ethereum counts to actually exercise and show all of web3. But you can start with Shift Vision and just IPFS and you're on web3, which is pretty exciting. Crypto Poops is something that you should check out. I'll tweet some interesting stuff. They're doing some interesting NFTs and they ended up actually using Fission for storing some of their NFT data and have a nice loop going and how they update stuff. So I'll drop a link into that.
00:19:25.026 - 00:19:29.506, Speaker B: I thought I'd give a shout out to them. As someone who's leaning into this, you.
00:19:29.528 - 00:19:32.050, Speaker C: Just wanted to say poops poops.
00:19:33.750 - 00:21:03.614, Speaker B: So one more thing, which is really to answer that question of, well, what's a very specific use case of why you would be adding this. So in an Ethereum DAP, you're logging in with your wallet credentials and you have all of these other wallet addresses that might be your own, your friends and other things like that. The challenge is if as a DAP, you store that in a centralized database, you've just created some really juicy data that is locked in and available only to that user, and there's no way for people to really keep it with them in that user centric data mode. So if you've got an existing DAP, add a Fission login, let users import their own wallet address and labels and notes and other contact details so that in your app you can read from that data and instead of having this hash, it can say James's special hidden wallet. That other wallet I was testing with James or other special tokens I was sending to Catherine. Anything else like that that I can put in there and that's all private and owned by the user. Not only that, but we're actually making portable contacts where any DAP that that user logs into can with permission, read into it.
00:21:03.614 - 00:21:40.650, Speaker B: So that's a mode that we're excited to start sharing. We're going to start with Ethereum and sort of EVM based chains. We're following the chain Agnostic improvement proposals, which have kind of a format for storing those addresses, including testnets and other things like that. And with Filecoin, because of the work that we're doing there in generating Filecoin keys, so it makes sense for us to showcase that as well. And if there are other change that you want to add easily, add a PR with your own formats. It's a very basic schema. Users will be able to even go into their Fission Drive and kind of edit the JSON file directly, which we're looking forward to showcasing.
00:21:40.650 - 00:22:24.010, Speaker B: Does anyone have any other questions? I am going to do a quick demo of Drive and let's see what the demo gods say. Awesome. So, pretty simple. I can click. I might store my personal avatars in here. So I think the ice cream picture is the one that ended up getting used. Catherine, I want to know if I was the only person who shared an IPFS link to their avatar photo.
00:22:24.010 - 00:23:21.166, Speaker B: Drive is pretty cool. It's got a bunch of right click to it so I can link to the file. I can switch here and that'll be a direct IPFS link to this. I was showing before that I actually have a Boris Files Fission name and I can go here into the avatars folder and I can see the same one here. This one you'll notice, is at a DNS link, so I could actually update it, but I can also use the Immutable link with the hash in it that just works. And yes, that Contacts repo is currently still private until we get V one working. And of course, it's the same experience when I'm browsing in.
00:23:21.166 - 00:24:04.518, Speaker B: Do I have any private photos in here? No, not yet. And I can directly put apps in here as well. So in here twoceries, I've got this index file and I've got a couple of images, and if I browse to that on the web through my vanity link, I can go to here. And this will actually load up a Tiddly wiki. That's actually another cool app. So you're reading and writing a little personal notetaking app directly in here. All of the content is stored in one big file.
00:24:04.518 - 00:25:20.900, Speaker B: So you can see my shopping list that I need to buy, some eggs and some pizza dough, a few things that I have in the pantry freezers. Let's do a search for Rhubarb, my Rhubarb sugar image. And all of this stuff is stored directly on IPFS forever, right? It's a public link, so why the heck would we go to all this work to upload it multiple times if we can just reference it from anywhere at any time? And there's the direct link to it that's available there. So pretty excited about really working together with IPFS and putting things in this commons network where we can share in hosting files, and there's a fun link to TW groceries. And not to put too fine a point on it, but when Fission first launched in October 2019, we launched at a hackathon in Berlin called Diffusion, and the people who won the entire hackathon built on Fission. So just saying. And that's it from us.
00:25:25.350 - 00:25:59.854, Speaker A: Thank you so much for this great presentation, Boris and James. It was great. Is there any more questions before we wrap up? We have, like a minute left. I don't see anything coming in. In any case, feel free to add any questions you may have in the public web3 channel in the our discord channel. Boris will be there and be able to answer you if you have any additional questions. Otherwise, this was really great.
00:25:59.854 - 00:26:04.846, Speaker A: Thanks for being with us today. And thanks everyone for joining. Really appreciate having.
