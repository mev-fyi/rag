00:00:00.330 - 00:00:27.990, Speaker A: Talk and this is one I'm super excited about. This will be a conversation between Austin and Kale and they'll be talking about sort of what actually gets enabled and unlocked by developers in the world of Ethereum. And Austin and Kale have been in this community for quite some time and they have a lot of amazing insights. So I'll just sort of let them kind of come on stage and get the conversation actually started. So with that, please welcome Austin and Kale.
00:00:32.250 - 00:00:33.640, Speaker B: How's it going guys?
00:00:34.250 - 00:00:35.000, Speaker C: Hello.
00:00:36.010 - 00:01:21.670, Speaker B: This really is just going to be a right like our plan was. Let's not plan anything, let's not put a bullet point list. Let's just go back and forth and wrap about building on Ethereum and I like what that unlocks too. I think earlier I heard someone mention something about like we keep building the same web two thing over and over on web3 and that's really not the answer here. So it'll be cool to talk about what things are also unique to web3 and then I think Kale in particular you like to dive into and you have some great perspective here on kind of public versus private and also enterprise versus public. Maybe you want to jump in on that first and start driving the boat and we'll see where we go from there. Also, thanks for having us ETH Global.
00:01:22.250 - 00:02:19.180, Speaker C: Yeah. Thanks, everyone, for having us on here and talked to Austin quite a bit and a bunch of others in the community around. From being from Microsoft, I spend quite a bit of time on the enterprise side, but over time, and I've always been a big believer that public main net is something that is going to be embraced by enterprises. And that's happening, it's already happened, but we're seeing more of it, right, with things like baseline and some other projects that are spinning. So the back of my mind, as we've been building stuff at Microsoft for this as part of the community and whatnot, it's always been a thing to make sure our tools are compatible. When we talk about DevTools between both, we don't try to make something that's just going to work for private networks. It may have some features that are kind of centered around that, but the core is always to be open, right? To be able to have that reach into the public side too.
00:02:19.630 - 00:03:11.702, Speaker B: The open source nature of the ecosystem is so cool, just like judging hackathon projects every once in a while and I am guilty of it myself. When I try to build something, you get this really big ambitious pitch of what we want to build and when you get in and you start building something, there are some holes along the way, right? You find these missing pieces and you end up having to focus on building that tooling, but then you kind of provide that back to the open source ecosystem and that becomes a building block for the next folks that come along that want to build there. I know that you guys have some extensions and stuff. What kind of stuff are you like, what in the private world gets built and then pushed back up to the open source level where other people can tinker around with it?
00:03:11.836 - 00:03:57.462, Speaker C: Yeah, it's a great thing and I agree 100%. And I've been in those hackathons myself in the same seat. It's like, great, we're going to build this decentralized X, right. And we started building it and next thing you know, it's like we're in wallets and that's where we live for the next three days. And it's like after seeing that a few times and also working with customers on that, they do hit the same things, right? Everybody's hitting those same kind of bumps. So one of the things we were trying to do with some of our Vs code work and some of the SDKs that we built is kind of lower that bar to entry. So the idea is enable people to do stuff fast so it's not like a black box, like they don't know what's going on, but if they want to be kind of oblivious when they first get started and say, hey, I just want to build something.
00:03:57.462 - 00:04:16.446, Speaker C: I want to write some solidity code, I want to get this thing up onto maybe a dev network or something even bigger, like something in Azure or something. We want to make that right click. Right? Just right click. Deploy that thing out there and get going. But we also don't want to restrict it. Right. And say that's the only way you can do it.
00:04:16.446 - 00:04:43.814, Speaker C: And pay no attention to the man behind the curtain that was doing all that stuff for you. For the advanced users, I want them to be able to go, that's cool, but I already know how that works and I want to tweak something and I want to get in there so then they can get in there and do that and we're not getting in their way. Right. So I feel like that's like the magic to making some of these tools. Make it easy for guys who are like novices who don't know what they're doing. And like you said, remove some of those stumbling blocks that's going to block them, but then don't lock the other guys down. Right.
00:04:43.814 - 00:04:47.442, Speaker C: We got to make sure that it works great for advanced user, the champions.
00:04:47.506 - 00:05:23.202, Speaker B: Yeah, it's hard to know. One just really specific thing is my infuria key. When I distribute scaffold ETH, I want to take care of as much for you as I can. And I want you to get in there and start poking around right away and really start making queries on mainnet, which means I need that infrastructure, but with my inferior key, I just plug it into my repo and send it out to people. And so all these other people are using my infuria key. And infuria is like, what the heck is going on here? So it's funny, they just put me on the Rickmoo plan, which is the ethers JS. It must be how it's distributed or something like that.
00:05:23.202 - 00:06:29.986, Speaker B: But the infuria key will come with Scaffold ethan it will work for a little bit, but then it'll shut down on your IP address pretty quickly. And so that's just another piece of that infrastructure that I keep talking about. Our tooling is sort of I've been saying this for probably six months, so maybe it has already happened. But we really are at this changing point in terms of our tooling where the tools aren't just built to get the job done anymore, they're built to get the job done well and also be a delightful experience for the developer. And I think the ethereum space in particular is finally hitting that stride where we have tools like Biddler cross out Hard Hat, where you can compile and deploy your contracts and get console logs and get a lot more information into the EVM and a lot more just like exposure to what the heck is going on within your solidity. And I think that is a sign of a lot of other tools. I think they're even working on a Vs code extension.
00:06:29.986 - 00:06:34.700, Speaker B: I don't know if they've reached out to you yet, but I bet the Nomic Labs guys will be hitting you up for that.
00:06:35.070 - 00:06:40.858, Speaker C: Yeah, the other thing, it's a little bit of a plug for Austin, but I'm going to go ahead and do.
00:06:40.864 - 00:06:45.950, Speaker B: It anyway because I got a plug chilling and chilling. Owalki would be proud of us.
00:06:46.100 - 00:07:24.074, Speaker C: Yeah. The videos that Austin's put time in on ETH build, if people haven't seen that. And again, this is not like I'm not trying to pimp something or anything like that. I'm just saying if you're somebody who can basically break down how a wallet works, how a transaction works, how some of these core primitives that you need when you're doing a hack, you need to understand these things. Austin's amazing at that, right? Which means he really understands the ecosystem really well because the only people who can really explain it very simply and have those tools to do it is someone like Austin. So hats off to that stuff. And I highly recommend that for people who are just getting started with web3, go check it out.
00:07:24.074 - 00:07:52.546, Speaker C: Because you need to understand some of these primitives. What are these keys and how do they work? Now, to kind of parlay that into enterprise side, one thing we've worked on for a while has been things like HSMs, which are hardware security modules inside the cloud. Those things are really hard for you to do on Prem. Right. You have to have a lot of money, first off, to buy one of these things. And they're like a crazy programming language. So there's quite a bit of stuff there to run and we make that dead simple, like in the cloud.
00:07:52.546 - 00:08:32.190, Speaker C: And that's one thing I feel like really crosses that bridge between public and private, right? We build private networks utilizing that stuff. They could also be used on public ones, right? You need a good place to store your key. You need a good place to mint your key so it never leaves the HSM. We got that there, right? So little plug for Azure there. But I think that's some of the areas where we work on to try to bridge that gap. The other side is a little bit like kind of what Austin works on a lot, which I will call like low code kind of deployments. We have know things if you're familiar with Azure functions or even in Amazon if you understand lambda, where we have these serverless pieces of code that can run.
00:08:32.190 - 00:09:00.360, Speaker C: We build a lot of connectors over there for Ethereum as well, which work public, private, doesn't really matter. You just need an RPC endpoint and some counts to use. And you can essentially deploy smart contracts, call them, and very little code to write, right? You can use some tooling to basically generate the Abis, like compile them and things like that. You bring it up to this tool, it plugs everything in, it can interrogate that and tell you what methods you got and you can start calling methods on them. And you don't have to write a lot of infrastructure code.
00:09:00.810 - 00:09:45.414, Speaker B: I think I saw you do a demo of this one time. Maybe you and I were on a zoom and it was kind of like a form feeling like you were orchestrating this infrastructure but in a very web two kind of wiring things up way. It was very cool. And it's funny how that infrastructure, when we're trying to provide it for a developer going back kind of rewinding to the infuria thing and what we provide for them and what we don't provide for them. And we're thinking about a docker container for Scaffold ETH right now. And I've been asking developers, like, is a docker container too much? And I would say about 25% of them are just like a hard no on installing that docker container. And we're thinking once we dockerize one thing, we can have all sorts of things.
00:09:45.414 - 00:10:24.062, Speaker B: Like you could have a local Block Explorer, you could have a local Node running on whatever network you want to have, right? Like once you have one docker container, you could really do a lot there. But then you got to convince them to download that extra infrastructure to run the docker container and stuff like that. I guess I don't really have a question there. It's just kind of like that's one thing that we're working on is like if we took that container, we could deploy it and we could give them a web experience at first and then maybe they transition to a local dev environment and you see that on Ethereum.org too. That would be a good plug. Right now if you're a developer thinking about getting into Ethereum, of course Ethereum.org
00:10:24.062 - 00:11:23.590, Speaker B: Developers is a great portal for that and there's a lot of great resources there to get started. We were trying to kind of do in public and private blockchain. I was thinking we could talk about the tooling going between the two kind of is agnostic, right? It's going to work either way. What about security or attacks? We've talked a lot today, we've heard it a lot, the flash loans, right? When someone figures out because that to me, I think I just learned about it at ETH Denver, like what the heck a flash loan even is. And then once you understand it's like, whoa, what else can we do with this? And when a new paradigm like that enters the scene and they do so quickly because things are moving so fast in Ethereum, how does that look on the private side? How does that look like on the enterprise side? Are they thinking, well, are they going to flash loan this or is it even a concern?
00:11:24.330 - 00:12:47.898, Speaker C: Yeah, I think there's always interest there, right. So a lot of enterprise, when they hear about these things that are happening in the news, typically when they say like, oh, this DeFi thing is blowing up and things like that to be like, so should we be doing that? It's like, okay, we should probably talk about what it actually means. Are you building tokenized assets and things like that that could use some of those technologies. But I think one big thing, especially from a security standpoint, when people start building apps, especially if they're really serious about it, it's not just some sort of like POC or proof of concept or something is using things that people have built standing on the shoulder of giants, like open Zeppelin type stuff, right? So when we have these nuggets of really goodness out here for smart contracts, a lot of people, especially when you first get started, they don't know where that stuff is and they tend to have to build that themselves and then they're going through a lot of pain, right, to kind of get that through. So that's one thing we try to plug into our tooling as well. And there's others opens Upland is just one of them. But having audited snippets or full contracts that people can use and take advantage of and have a strong versioning thing around, that's awesome, right? And that's going to help people not trip over themselves as they're trying to do transfers and they don't understand what that means and how do they protect against some of these type of attacks.
00:12:47.898 - 00:13:12.554, Speaker C: Because the reality is at first people were like, well, it doesn't really matter because it's a private network, so we're all among friends here, there's not going to be a problem. But as soon as we start talking about public main nets, like, oh, we got to be careful here. Now, if these contracts are actually going to go out on Main Net now, we do have to consider those things. So we've kind of been pushing quite a bit for saying, hey, just do it from the start, right? Just pretend that you're on public Main Net because you're probably going to be there at some point.
00:13:12.672 - 00:13:46.820, Speaker B: And I think, yeah, Paul Brody actually, he kind of alluded to that. It's basically like it's going to end up on it's so fun to hear. It warms my heart so much to hear all these enterprise guys say it's going to be on Ethereum like 50%, did he say that? 50% in the next ten years? Something like that. But he's saying basically you're going to be on a private network or public network. Private technology is growing though, right? There's a lot of interesting things going on. So public network, but with a lot of privacy tech may be involved with that also. But yeah, with the attacks, that could be really interesting.
00:13:46.820 - 00:14:46.230, Speaker B: The Open Zeppelin thing really reminds me of kind of I do a lot of mentorship with developers and when we're just writing solidity and kind of getting going, I show them the ownership pattern. But when you can just carve all that code out and that's just a little bit of code, when you can carve all that code out and just put in like, oh, this is ownable now. And you get that audited code from open zeppelin. You get that right out of the box and you see that it works, then it's like, oh, what other tools do I have? And it's just like you said, you can just go through the Open Zeppelin repo and find all the different tokens and find all the different access models that have been poured over by many developers and researchers in the space that have really audited these contracts. Maybe auditing is even a good thing to talk about. Auditing is really tough right now. You can hear a lot of the hackathon hackers talk about how they're hoping to raise money to get audited and it's like, oh man, they should be raising money for their developers to be building stuff.
00:14:46.230 - 00:14:52.726, Speaker B: Auditing should not be so hard. But audits are still really tough in our ecosystem. Is it different between public and private.
00:14:52.758 - 00:15:22.930, Speaker C: Or enterprise and not no, it's a big deal, right? Especially when it's something even if it's not public yet, like on public main Net, if you're working with something like a financial institution on some of these apps, it's heavily audited, right? They have to basically go over all that stuff and make sure there's no loopholes and it's heavily poured over and they will spend quite a bit of money to have those things audited by third parties. So, yeah, there's a good business model there for those who are building this right.
00:15:23.000 - 00:15:48.806, Speaker B: That's why it's so hard. All these auditors are charging so much. We need more competition. It's something that I talk about in my sessions. It's actually thanks to this change in tooling, it's actually really easy to get started. It's pretty darn simple to actually build a proof of concept decentralized app in 30 minutes to an hour. You can sit down in a session and really build a DAP.
00:15:48.806 - 00:16:34.694, Speaker B: But building a very secure one and building one that can handle all the bad guys attacking it is a completely different game. And being able to think adversarially is like, I didn't even understand this. I have like an engineering background and when I got into Ethereum, there's so much more to it, right? There's economics, I've learned so many and even in the last six months, impermanent loss. I'm googling all day long. What are these things? What are these new tools? So there's a lot of neat things going on. I really wish audits were cheaper though. I don't know where I'm going exactly with this, but I wish we could figure out some way to have a much easier spot check auditing system for just everybody in the ecosystem.
00:16:34.694 - 00:16:37.340, Speaker B: And I don't know how that would work or scale or anything.
00:16:39.230 - 00:17:47.762, Speaker C: I mean, to talk about the open source side there a little bit, there are a few partners out there or people building things that are more I won't say they're like static testing. So when I mentioned static testing saying, hey, there's a fingerprint of something here and we check to see if your code is doing something like that and then we tell you if you're doing something bad versus something that's more like a learning type platform where it's much more dynamic about how it's looking at your contracts. Fuzz testing, if you understand what fuzz testing is of trying a bunch of different parameters that go into your program to see if the predictable outcome comes out or if something else comes. So like I know Microsoft Research has built, they actually have a plugin that they've been talking to me about like, hey, should we put that out as part of Vs code or integrate it with some of your stuff that allows people to do like fuz testing and things like that on their smart contracts. I know like Trailbits and a few other guys out there have been doing similar things, right? They have really cool tools for that. I will say that some of them are free, right? You can just use them, but there's a lot of sharp edges there and that's not a negative thing. I just mean you really kind of have to understand how those tools work.
00:17:47.762 - 00:18:04.390, Speaker C: So I think there's definitely an opportunity there for us to make that a little more smoother, like onboarding process for people to use them. But definitely something you're right. And then when you do get to the point where you're going to have a billion dollars in your application, then it probably makes sense to go pay those guys for the big audit.
00:18:05.530 - 00:19:10.134, Speaker B: Yeah, for sure. On top of the open Zeppelin contracts that have been audited, on top of Biddler and Hard Hat and these great tools, now there's all of these other components in the ecosystem that are just becoming more and more mature. And we have these new building blocks and each of these building blocks themselves are audited in some form, whether it's now there's 40 million total value locked, so it must be audited in some way or you get a formal audit. But one thing just during the hackathon and seeing the tools that everybody is using, it's crazy to see the jumps and we say at every hackathon, the jump from the last hackathon because of this composability, because of open source, because of just the nature of how the ecosystem works. It's so exciting to see each new piece just come into the world and let us be able to use it. So again, open conversation. Don't know exactly where I'm going, but I just love the composability of the space and open source.
00:19:10.134 - 00:19:12.910, Speaker B: Really kind of nudges that along a lot.
00:19:13.060 - 00:19:55.660, Speaker C: Yeah. And some of the components we've talked about before, we'll call them Lego blocks, right? Of not just the smart contract but the client application. When you're using Web three JS or Ethers or something like that, having these composable pieces, kind of like if people came from the Web Three component world or the web component world of web Two, having these little components that allow you to easily kind of plug that in. I think Austin's done great work there as well. I want to keep building on that ecosystem, keep building more of those reusable components that people can use. So not only can they go fast at the hackathon, but if we get a lot of people using those things, then again they become hardened. They become something that you can really rely on to build production scale app.
00:19:56.510 - 00:20:42.934, Speaker B: One of my theories for open things that needs to be worked on, what I'm doing in the scaffold Ethereum is it seems like when I build a decentralized app now with all the tools ready to go, I end up spending way too much time centering DIVS and getting the product to look right. And I feel like that's still somewhere where we could do better. That's not exactly ethereum. The Ethereum stuff is coming in there, but being able to handle I put out like an Allow list the other day where it's just like here is an Allow list that is connected to another contract. You can add and remove addresses to the Allow. Super, super simple, primitive. Right? But it's something that's like you don't have it packaged up with the UI.
00:20:42.934 - 00:21:19.054, Speaker B: You don't have those things packaged up with the UI. So I keep trying to what can I build that's kind of missing tooling wise, but also provide the UI on top of it and just give you out of the box a bunch of components. That a good example that we don't have yet that we need is just like an exchange. You need to be able, know, deploy two tokens and set up an exchange and just plop that little component right into your react and just have the exchange right. And I'll bet you in three months that's available if it's not already. I know you could just fork uniswap and get it going. But I'm talking about meant to be built like rapid application development.
00:21:19.054 - 00:21:46.000, Speaker B: Like can I just grab an exchange out of the block? Can I just grab a bridge? Can I grab some kind of like lending mechanism and just throw that in there? So I'm as excited as I am about the composability and the new stuff is it's like if we see these big jumps from hackathon to hackathon, I can't wait for the next hackathon, right? 2021, what's the next big hackathon? I'm ready for it. I want to see what kind of tools and other composability Lego blocks get built there too.
00:21:48.370 - 00:22:27.834, Speaker C: Yeah. The other thing that is something that maybe not on the surface seems like a big deal between public and private has been gas. So anybody working in the public space obviously understands what gas is because they're probably paying a lot for it sometimes. So what that means is from a developer perspective is though we want to make the most smallest amount of code or smallest amount of execution that we need to do there to keep our transactions as small as possible, pay the least amount of gas, those kind of things. So optimizing for that beyond just the security implications. But on the private side for a while it's been like, hey, we can spit up these private chains. We'll basically negate, yes, it's there but we're not really doing anything with it.
00:22:27.834 - 00:23:14.966, Speaker C: And it's a little bit of like, hey, I don't know that's going to lead us to a great place because ultimately the EVM in the current Ethereum does have limitations around how much we can execute in one transaction that we're going to do. And I've seen enterprises build code that's ridiculously big and they're like, oh yeah, we have to jack this up because we can't execute it. I'm like, there's going to be some downstream effects of you having something that heavy running every time you do this thing and also this future world that's not going to be feasible. So maybe we should look at your code there and see if we could break that up or do something more simple or things like that. So I feel like that's an area too where enterprises are learning, hey, maybe we should think about things a little bit more like the public guys do, at least from a gas perspective.
00:23:15.158 - 00:23:45.810, Speaker B: The mental model there is good. When I was building my games, I didn't want to think about Gas at all. Like you're saying, I was in my private world. I wanted to make the game a really fun experience, and I wanted to build it on Ethereum and use Ethereum cool things. But when it came to deploy it to Ethereum, there was no way that game was going to operate on public main net. And I found XDI eventually a side chain that was cheaper and it was like, less security, whatever. But I was able to deploy my fun games over here and it made a lot more sense.
00:23:45.810 - 00:24:44.470, Speaker B: But I still Bridging, like, you're talking about bridging this idea of building it exactly the way you wanted it to versus building it the way that it works better on a gas intensive network. One example would be like the proxy pattern, where when I go to Etherscan and I go to inspect some smart Contracts code, I don't want to land and go look and find out it's a proxy. I want to get in there and see what the guts of the thing are. But that's the way it works for Gas, right? You deploy the logic once and then you redeploy little versions that are proxies, but if someone wants to get in and inspect that, they're going to find the proxy, not the contract. And so it's kind of like you add these small layers of abstraction along the way for Gas purposes to make the deployment cheaper, but then for the Noob that comes along that wants to learn more, you've just made it a little bit harder for them to kind of get that exposure and get into that too. So it's a double edged sword for sure.
00:24:44.620 - 00:25:20.340, Speaker C: Yeah, I think it's the same. This is not a new problem, right? So it's funny you mentioned games, but building video games when you're doing stuff like that, sometimes in some critical code section, you'll basically write some assembly code to do it because you're running on an Xbox or you're running on a PS Four or something like that. And you only have limited amount of resources there, right? So you'll do that, but then when you do that, it's hard for people to read. They're like, what is this? Why we have this thing? We have this nice object oriented programming and now we're over here in SeaWorld. Like, what happened? Or assembly. I feel like that's the same thing. So I don't think there's like a magic bullet there.
00:25:20.340 - 00:25:35.880, Speaker C: I feel like, build what you want, right? Let's build it right now. But we should keep these kind of things in mind of like, hey, be aware. Like, if we're going to move over to public main net, let's not make such gargantuan code over there. Let's kind of break it up a little bit. So there's a balance for sure.
00:25:36.490 - 00:26:16.054, Speaker B: You hinted at it earlier you stop thinking about deploying it into the perfect world. You're not. Going to have your little private blockchain. You need to be thinking about main net Ethereum and thinking about how you even back to that using some other L2 solution or something else. The mental model, definitely. I think it is shifting. Hearing these Enterprise guys, like I said earlier with that, it's so much fun to hear the big guys say that they're going to start backing to Ethereum and less private chains, where you get to control the rules, and then when you want to change something, you're like, well, we just need to make the rules a little bit different over here.
00:26:16.054 - 00:26:56.180, Speaker B: Like you said, that's not going to work. So it's cool to see things moving toward the main net, but also the main net also filled up earlier. Right. We had gas prices get crazy with DeFi, which maybe kind of could be we could be plugging for developers. We're seeing a lot of great adoption on Ethereum. Right? This is a cool problem to have because we're seeing so many new users come in and they're financially incentivized in some way, and they want to play around and they want to use new tools and use new products. So there's a huge opportunity for great developers to get on the platform and build something cool.
00:26:57.110 - 00:27:21.930, Speaker C: Yeah, for sure. And I think, as you said, the goal here for us is, at least from me, my background. Like what I'm working on is I want to make that as easy as possible for the novices, not getting away of the advanced guys. And so working with different guys. We've worked with the Truffle guys for a long time, still do open Zeppelin. We're very close with them. The Biddler guys have come along.
00:27:21.930 - 00:27:49.218, Speaker C: Just a bunch of different people building hardware stuff or platforms like infuria you mentioned Alchemy's got some stuff out there too. It's been really cool to see again, I see them all as like big Lego blocks. It's like, okay, I need to do something on public. I can just plug infuriate in here really quickly and I'm off to the races. Like, I can start doing that thing. That's amazing because you talk about years ago when you had to stand up your own node, it was like, oh my God, stone Age.
00:27:49.384 - 00:28:03.766, Speaker B: Yeah. To participate in the network, you would download something and then wait hours, if not days for it to be synced up just so you could talk, so you could start participating. Yeah, for sure. That's good.
00:28:03.868 - 00:29:05.706, Speaker C: But on the enterprise side, again, not to plug baseline, but that's been a great group of guys. For those who don't know, baseline is a project that's basically bringing that world. I think Paul Brody was on here talking probably earlier about it, and there might be others, but it's bringing the enterprise and the public together to say, hey, how are we going to bridge that world? How are we going to make it work for one of the big things I've been kind of driving over there and working on is identities, right? We have identity systems that exist today in the web two world, like Azure ad and a bunch of other things like OAuth and things like that. But what happens in this future world? Because we still do, even if you're building a private network. So let's say we're building a private consortium, which is like a group of people who are going to do B to B type scenarios together, business to business, then how do we introduce them? How do we make sure that we can connect them in the network? And we've done a lot of work around there, like tried a bunch of different things. Some of them failed, some of them good. As we did that, it was like we should be thinking about this from the public side.
00:29:05.706 - 00:29:30.290, Speaker C: So whenever we're out here in the public main net, how do we discover people? How do we have an electronic introduction? There something that's reliable too, and we can stand behind not just saying, oh, it's a hacker. How do we guard against things like phishing attacks and things that happen when you start using things like decentralized IDs? So for those who are interested, definitely there's so many technical working groups that have spun up over there and we're hard at work on that stuff, so feel free to join.
00:29:30.710 - 00:30:07.374, Speaker B: There's so much you can learn from a lot of my mentor sessions when we're trying to get the mental model of what the heck the EVM is and what's going on, learning from attacks like being able to talk about Reentrance. You almost have to talk about Reentrance to talk about the atomicity of a contract of execution. And that leads to flash loans and other things too. But the attacks I think, are just so educational in a lot of ways. Have you ever played like, Ethernot or any of the games that show you the attacks? Have you gone through any of those?
00:30:07.572 - 00:30:10.970, Speaker C: I haven't used those. I did the was it Crypto? Zombies?
00:30:11.050 - 00:30:40.040, Speaker B: Cryptozombies is another one, right? Yeah. Both of these are on Ethereum.org developers getting started. I mean, there's a ton of resources there, but they kind of take you through in a very gamified way, like writing solidity, getting your storage set up, getting your functions going. But then I would plug on top of that. The Ethernot series is really good. I remember I was working my day job and I had just gotten home, I was kind of like the man.
00:30:40.040 - 00:31:22.022, Speaker B: And I sat down, I started playing the Ethernot and I got to the Reentrance and I knew what Reentrance sort of was, but I'd never gotten my head around it. And I remember the moment in the console log when I drained the contract and you get a big congratulations. That feeling, it was so great. It was better than any paycheck and I feel like that's. One of the things that really got me into Ethereum more was that excitement and that drive that comes from just although you are attacking a contract, you are kind of being a bad guy. You're learning kind of how the EVM works at a lower level and you're learning kind of some of the gotchas and how it all works. And I think that it's a fun way to learn.
00:31:22.022 - 00:31:45.006, Speaker B: Let me see if I can pull up any other resources for good tutorials to get through. I like the idea of the crypto zombies and I guess there's a lot right on the website too, but I'm going to try to find some other ones. Ethernet. Oh, viper fun was the other one. If you're a python person, not JavaScript. Or I guess viper versus solidity. Right.
00:31:45.006 - 00:31:57.230, Speaker B: There's kind of both sides of all of these things that you'll find. And again, just slash developers is a great resource to land on. And of course ETH build and scaffold ETH.
00:31:59.650 - 00:32:01.182, Speaker C: Yeah, yeah, these are awesome.
00:32:01.316 - 00:32:21.114, Speaker B: Yep. I'm just seeing those ones. Those are the ones that are on here. It was the Viper and Ethernotes and crypto zombies. You should go play all of those if you're a new developer getting into it. What else? Maybe like things that Ethereum is particularly good at versus things that Ethereum is particularly bad at. Right.
00:32:21.114 - 00:32:38.720, Speaker B: Like storage is going to be very expensive. You've got 15 2nd block times in terms of not reinventing another web two thing. What things have we seen in web3 that were very unique to web3 that kind of help a developer get a mental model for what they could be building?
00:32:39.410 - 00:33:17.226, Speaker C: Yeah, from a composability standpoint to pick on storage for a second. I mean, the first time I saw IPFS years ago, I was like, well, this is interesting. So basically I can just throw some data out here and I can have this thing essentially replicate on this P to P network. That's pretty freaking awesome. So that was a building block we use quite a bit. When you think about the web two world of clouds and things like that that have storage, they're all great, but they always have these entry points, like these single entry points. It can be attacked, manipulated, fraudled, all kinds of things and you end up with the results of stuff that happened with that.
00:33:17.226 - 00:33:40.820, Speaker C: But thinking about things a little differently around and I think what's really cool is the clouds in some ways have changed. Right. Because we have gateways and things right now to get into IPFS from traditional clouds, which is pretty cool. So I feel like from that perspective, the storage thing was pretty interesting for a decentralized a new way to kind of think about how that works.
00:33:41.190 - 00:34:15.600, Speaker B: Definitely in our sessions we deploy to a live network and I talk about not even we can stop this thing now. This thing that we've created there's nothing we can it's out there for good now and there's no stopping it. And it's an interesting mental model to get over for a developer. Like oh wow. It's not like when you think of I've got my database and I stand up my database and a bunch of people go talk to it and it falls down and I stand up another one and someone attacks it. You stand up a smart contract and it's there, buddy, it's there for good.
00:34:16.050 - 00:34:54.874, Speaker C: Yeah, that's super cool. I think something that people kind of fall into a trap a little bit is again, it's hard to kind of like especially when you first start with Web Three, think about it in a different way than you did Web Two and you start to fall back on things that you did in Web Two. So I just say people keep an open mind. I'm always looking around for different components that can help me more web Three if I what I'm doing, or more decentralized in that way. But there's certainly things like on the enterprise side where there might be some things that are semi centralized or something like that. And I don't think that's end of the world at least right now. Right.
00:34:54.874 - 00:35:01.066, Speaker C: I think, I think we need some time there to kind of adapt some of those systems to come over and.
00:35:01.088 - 00:35:03.406, Speaker B: We'Re seeing a lot of I think.
00:35:03.508 - 00:35:05.600, Speaker C: ENS's work has been super cool.
00:35:07.330 - 00:35:13.134, Speaker B: Sorry, might have been me. Might have been me. No, go ahead. I think I cut in there. Sorry.
00:35:13.332 - 00:35:35.160, Speaker C: No, I was just saying I think ENS has been one of those bridges too, right, where if we think about traditional DNS and naming systems and then looking at how ENS has changed, certainly big enterprises are looking at that now to say, hey, we need to be part of that. How can we be a part of that from a register perspective, things like that. So that's been awesome as well.
00:35:35.530 - 00:36:18.074, Speaker B: Awesome? I don't know. Let me think of let's see what else I'm trying to think of other gotchas that we I mean, like numbers and JavaScript. But that's not like when you're when you're tracking numbers as a gotcha as a new developer, you know that these numbers are going to be so big that you're going to have to use some library to track your numbers. And you don't basically display it as a float until it gets right to the user. Those are kind of gotchas that we have along the way that aren't probably as interesting. The off chain stuff that you're talking about is really cool about how you just need a signature sometimes. A lot of these you don't have to do everything on chain.
00:36:18.074 - 00:36:52.398, Speaker B: Some things can just be signature based and you can pull these voting mechanisms now that it cost one dollars per vote on chain. Let's pull these voting mechanisms off. Let's have everybody just sign things using their keys and then have one transaction that puts those signatures on chain. There's a lot of technology around that and it warms my heart to see the user experience along with the developer experience getting better and better and someone can just come in and sign a thing and just participate, which is really exciting for me.
00:36:52.564 - 00:37:20.134, Speaker C: Yeah, I think that's really powerful and it kind of ties into a little bit like DIDs and things like that, having these on chain anchored things that we can prove and always point back to. But then we have some of the assets even like living off chain. Super cool, right? And it makes a lot of sense right now. Maybe it'll evolve somewhere from there. But I think for now, I think it's a super cool solution. It helps scalability quite a bit. As you mentioned, people building apps and things like that.
00:37:20.134 - 00:37:41.918, Speaker C: I'm trying to think I mean, the other one that I think has evolved quite a bit, that was kind of a gotcha that we used to run into a lot and it's not as much anymore. Thanks to folks like MetaMask and such has been wallets. We talk about understanding what key pairs are and how to sign a transaction and things like that. But then when you start talking about hierarchical wallets and things like that, people are like, whoa, what is this thing?
00:37:42.084 - 00:37:44.740, Speaker B: An account versus a wallet? Yes, exactly.
00:37:46.710 - 00:38:34.590, Speaker C: And there's been like a drive and I'm interested to see where this goes. But on the public side, at least for a while, driven from mainnet has always been kind of, hey, we'll have a wallet concept and then we'll basically have your app that's doing something. Right. So a lot of times they would be separate, right? And you would say, well, we could have many apps use this wallet and in theory that sounds good, right? But in practice it's a little bit like I think especially from the enterprise side, they're like, what the heck is this? And they feel like they're being attacked or something. They're like, what is this other thing I have to download? Why do I need that thing? It should just be part of my app. So seeing some of the evolution of even what MetaMask is doing now, where you can kind of blend those two together, make your app just be part of it, that's awesome. I think that's going to make it on ramp for people using it.
00:38:34.590 - 00:38:40.660, Speaker C: Not just developers, but people who use the app. They don't have to download a bunch of different components, they just have this one thing.
00:38:41.190 - 00:39:11.900, Speaker B: Yeah, I think it's kind of a TLDR of our talk today, is like tools are getting better, products are getting better, everything is sort of becoming more and more composable. Every hackathon that is put on, we see new building blocks come out, we see new paradigms invented, we see new attacks. So I'm just very excited about all this. And big thanks to the ETH online team for having us and letting us rap about doing what we love to do best.
00:39:13.310 - 00:39:19.646, Speaker C: For sure. I don't know if there's any questions or anything, we got a few minutes here, but if there's any questions so.
00:39:19.828 - 00:39:55.302, Speaker A: Thank you so much for that amazing conversation. I was going to say some of the same things, austin, you were going to talk about, but you kind of front run me on that one. Analogies. There you go. No, this is exactly sort of our way to measure progress. The ease of initial setup being minimized every time we do an event or anytime somebody has to get started. And that being as small and frictionless as possible is sort of the indicator from our side that the developer ecosystem is growing and it's actually ready to be even bigger.
00:39:55.302 - 00:40:25.460, Speaker A: So we don't have a lot of time for questions. We are going to take a quick break before our next talk, but I do want to kind of point out that anybody who's listening to this thing and also to Austin and Kale York did a great job at kind of supplementing a lot of resources on the chat with a lot of links that are super useful. So we do have a lot of sort of additional context into people being able to try and play with some of these tools and that's been an amazing addition to this amazing annotation to this conversation position. So.
