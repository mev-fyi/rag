00:00:07.610 - 00:00:16.990, Speaker A: Nice meeting you all. I'm Fabri from Xmdp and this is Nick. And we are going to introduce you to the secure messaging network for webflow.
00:00:21.950 - 00:00:40.462, Speaker B: So you might have seen in the news that Xmdp launched with Coin Wallet last week. If you haven't tried it yet, the only way to get access to the feature is by scanning one of these QR codes here. But it's pretty cool. You get wallet to wallet messaging. Inside coinbase. Wallet. There's no signatures.
00:00:40.462 - 00:01:21.114, Speaker B: There's no Web three. UI. Really looks like a messaging app. And so if you scan this QR code right now, we can show you what it looks like on the other end. So this is Xmdp Chat, another app on the Xmdp network. If you scan that QR code in the last slide, you can send us a message and say hi and it'll show up right here. Any takers? Sure.
00:01:21.152 - 00:01:22.026, Speaker A: They feel it again.
00:01:22.128 - 00:02:25.600, Speaker B: Yeah. Oh, look at this. So it all works in real time. And this is interoperable across all 350 apps in the Xmtb network. You could also do it from Converse, which is a great mobile app built here in Paris. We just focus on building an interoperable messaging standard. None of these apps are ours, other than this one you're looking at right now, which is a reference implementation.
00:02:25.600 - 00:02:28.112, Speaker B: Yeah.
00:02:28.166 - 00:02:55.656, Speaker A: So let's start with the problem, right? So we can think of communications today as being broken. This is how web two works. Independent platforms that don't communicate with each other. They start the information. We are not the owners of the information, so we think this should be better. There is also the thing that in each of these centralized servers, you don't own your identity, right? They own your identity. We only rent it.
00:02:55.656 - 00:03:33.300, Speaker A: So web free is conversion into this unique identity, which is called the Wallet. And what the Wallet means is that we own our assets and we also own our communications. And that's on the side of Web Two and communications. But we can also think about more practical challenges that today exist in Web Three, that is that we cannot message. There is no open channel between Wallet to Wallet communications. So if you're a developer and you're building a DAP or a protocol, you cannot communicate with your users. If you are a creator, you cannot communicate with your audiences who purchase NFTs.
00:03:33.300 - 00:03:43.908, Speaker A: And again, there is no way for users to communicate with each other. So for this, Xmdp has proposed a solution that Nick is going to introduce.
00:03:43.924 - 00:04:08.800, Speaker B: You to you now. Sure. So Xmtp is an open protocol for Web Three messaging. We already have 350 apps built. On top of this protocol, we have SDKs for every popular language. If you want to build an app this weekend, we have the tooling to support you. It is gasless very fast to set up, totally free to use.
00:04:08.800 - 00:04:44.056, Speaker B: And so when anyone builds an app on the Xmtp network, you can immediately reach any of the wallets that are already on the network, which we have about a million wallets today. Let's look at some of the examples. This is converse, which is imessage of Xmtp. It's really fast, really clean, and gets push notifications right to your phone. Just a great simple messaging interface. This is Orb, which is the biggest mobile app for the Lens ecosystem. Lens is partnered with Xmtp.
00:04:44.056 - 00:05:27.700, Speaker B: If you've used Lens, you probably have an Xmtp identity. You might not even know you're using our protocol. But we power the DMs all across the Lens ecosystem and another 300 plus apps. Let's see if this video plays across all different categories. We have web3 gaming. We have NFTs messaging their holders, decentralized marketplaces, really a broad range of applications, all running on one protocol, all able to talk to each other. So why don't we dig in and look at some of the code and see what it's like to build an app on Xmtb.
00:05:27.700 - 00:06:29.286, Speaker B: We have a replet here, so anyone with their laptop, you can follow this short link and follow along just in the replet. You make changes on your own or you can scan that QR code and that'll also send you to the replet. Give you guys another second to take down the link before I hop over. All right, so this Replit single file, really small app, just to test the basic functionality of Xmtp. For the purposes of this demo, we are not going to deal with wallet connections. We're just going to spin up a random wallet. So in your app you'd have to use something like Wallet Connect to get access to a wallet.
00:06:29.286 - 00:07:01.220, Speaker B: But here we are just going to use the very helpful create Random. Create a random wallet when this app starts up. Now, if you want to create an Xmtb client, you import the library. Client Create pass in a wallet. This would be any ether signer or something compatible with that. And an environment. We're going to use the dev environment since this is a demo and we don't want to send messages that people are going to see in their actual apps.
00:07:01.220 - 00:07:46.310, Speaker B: And first thing we can do is just check and see if a user is on the network. So to message someone on Xmtp, they have to have used some Xmtp app at least once. We have a handy function client can message that will tell you yes or no. Is this wallet address on the network. So why don't we try running this perfect and hit run and it'll build this app and do the can message check. Oh, maybe it's doing a few more things too. Let's see.
00:07:46.310 - 00:08:32.966, Speaker B: Can message true. So we were just looking at Fabri's wallet, which thankfully he is also using the network and working here. Maybe we could do a few more things here and send Fabri a message. So we're going to uncomment this function and this function and we're going to comment this one out. So in Xmtp, everything runs over conversations, which is an abstraction we use to make it easy to manage your chats. To start a new conversation with a wallet address, this is all the code you need. New conversation, wallet two, which is Fabri's address.
00:08:32.966 - 00:08:57.342, Speaker B: So we can create that conversation. And then down here, we just use this conversation and we send a GM. Let's see if this all runs too. All right. Message sent. Send a GM. That is really all it takes if you wanted to get fancier.
00:08:57.342 - 00:09:44.558, Speaker B: We do support custom content types and so you can add codecs to your Xmtp SDK for things like images or videos or file attachments. We have some new content types like reactions and replies that you can play with. But the basics of Xmtp are just text messages, and that's the one thing that is universal across all the apps in our ecosystem. Now, let's see if we can do this in real time. I'm going to switch the environment to production so that people can actually send us a message. And we are going to listen for messages on the network. This is obviously useful when you're building a client side app where you need to see things coming in in real time.
00:09:44.558 - 00:10:09.480, Speaker B: And so we have this very helpful Stream All Messages function, and all it does is calls Xmtp conversations, stream all messages. This is going to get the full list of conversations that this brand new wallet has. And it's going to get all the messages coming in in real time for each of those conversations. And so it's just going to print them to the console here.
00:10:11.470 - 00:10:15.740, Speaker A: I'm also taking the time to answer your DMs, so it's me.
00:10:21.500 - 00:11:09.208, Speaker B: All right. Going to run this and it's going to print out a QR code for this random wallet. Let's see if this is actually legible. All right, let's see. If you scan this, you should be able to send a message that'll actually get printed out in the terminal here in real time. I'm going to try it myself. Maybe the QR code is a little mangled because of the display set up.
00:11:09.208 - 00:11:51.480, Speaker B: Let's try this one more time with it, actually. Yeah, I think let's try and print it again with I'm sorry, you're going to have to get a new QR code here. Oh, hey. All right, we got a first GM. So that's all it takes to have a real time listener for Xmtv messages set up the terminal. This is maybe 50 lines of code and a lot of that's pretty lightweight. Awesome.
00:11:51.480 - 00:12:31.290, Speaker B: Someone's using this for some free advertising space. I appreciate the hustle. I respect that. Did someone try and send us money? That second last one, I think that's a payment. Oh, that money's gone. This is an Ephemeral wallet that just went basically to the burn address. I appreciate it.
00:12:31.290 - 00:13:01.090, Speaker B: All right. But I have to stop by a lot. The WiFi in here is pretty poor, takes some time. Yeah. There's also one other function here. If you just want to stream messages from one conversation, that's equally easy. This just spits out async iterators you can just do await conversation, stream messages, and that'll give you just the messages for a single conversation, which can be helpful if you're building a chat app.
00:13:01.090 - 00:13:52.470, Speaker B: So before we move on, any questions about this code? Anything that seems a little too mysterious, happy to field those in real time. All right, here is three more messages. Late gold CMDI message. Exactly. Including newly created conversations. So there's kind of two streaming functions in Xmtv to stream the conversations, which will just let you know, hey, someone started a new conversation, but not give you the messages and stream messages from the conversation. And that API just ties the two of them together and make it really simple to build an app that has all the messages from all the conversations in one.
00:13:54.040 - 00:14:15.612, Speaker A: Yeah, so this is the basic concepts around Xmtp. So it's basically creating conversation and sending messages. And we are now working on group chats. Read receives reactions to messages. There is also a way to send media attachments like image and video, so that's on the SDK level and on the protocol level. Nick, you want to tell?
00:14:15.666 - 00:14:53.396, Speaker B: Yeah. So Xmdp has a roadmap that we've shared publicly in our GitHub discussions around decentralization. There's a bunch of milestones we have to hit to get this point where anyone can run their own nodes and then anyone can get paid to run their own nodes. Right now Xmdp is operating the nodes in the Xmdp network. We'd really like to get out of that business. And so we are working hard on decentralizing our network so that we can be a small minority of all the node operators. Also working on the next version of the Xmdp encryption protocol.
00:14:53.396 - 00:15:20.224, Speaker B: That's something that a lot of developers have been asking for better ways of revoking keys, of having device specific identities, so that if an app gets compromised, if there's a bad actor on the Xmtp network, that maybe is phishing people, that we can really limit the damage from that. And that's going to be rolling out in the next few months, but should come in the form of disappearing messages. Yeah.
00:15:20.262 - 00:15:49.620, Speaker A: As far as our developer tools, we have an SDK for basically every language, not only on Web but on mobile. This was a demo of the JavaScript SDK, but we also have, for example, React native. We have suite and android. So check out our docs. You will find more information about the whole experience of sending your first message and you will find a lot of tutorials. We are trying to push into multiple use cases. For example, you see Coinbase using a finance use case about sending money through messaging.
00:15:49.620 - 00:16:26.948, Speaker A: We think that there is room for a lot more. So I invite you to check out the docs and see how it's using marketing, how it's using commerce, decentralized social as we see with lens automation and support like creating chatbots. And if you are going to build on a hackathon, I recommend you to check out our playground. Where is the beta versions of group chat, replies, reactions and read receives. And there is also the way to do broadcasting. So if you want to send like a message one to many, there is a way to do that. So that was our talk.
00:16:26.948 - 00:16:27.936, Speaker A: I'm fabri.
00:16:28.048 - 00:16:29.060, Speaker B: I'm Nick.
00:16:29.560 - 00:16:30.468, Speaker A: Thank you all.
00:16:30.554 - 00:16:33.370, Speaker B: Yeah, happy to answer any questions you guys have.
00:16:44.030 - 00:16:51.230, Speaker C: Thank you. Could you describe the overall architecture of Xmtp?
00:16:51.810 - 00:16:55.246, Speaker B: Should have left that slide in for.
00:16:55.268 - 00:17:00.446, Speaker C: Me for the introduction. It could be really good to have it.
00:17:00.548 - 00:17:40.190, Speaker B: Yeah, absolutely. So the Xmtp nodes are built on top of Waku, which means they use Lib P to P under the hood to create this mesh. You connect to one node through our API and publish it and then it will get gossip to all the other nodes in the network, which is how our subscriptions can work in real time. Even if two users are talking to different nodes, we have a pretty big storage layer underneath it. So we can store messages on the Xmdp network forever. I think that's something in future versions we might not need. But today a message can just get persisted onto our network in perpetuity, which makes it really easy to sign in across different applications.
00:17:41.170 - 00:18:01.642, Speaker C: Okay, and another question, would that scale like Telegram or WhatsApp? And why are we still using Telegram, for example? And what would be the next application you see that could replace this kind of messaging applications?
00:18:01.786 - 00:18:22.690, Speaker B: Yeah, why are we still using Telegram? Least the people in this room when there's good web, three native alternatives? I don't know. I basically stopped using Telegram and just got people to message me on Xftp and it works great. And we're not some shady company flying around the world between Russia and Dubai.
