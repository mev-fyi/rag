00:00:06.970 - 00:00:42.246, Speaker A: Where we are going to be going through querying web3 data with the Graph. Right away, let's go ahead and go to the important part. If you are hacking and you are planning to build with the Graph, this is the QR code that you should scan. This provides you with hacker technical support where you could reach out to us on our telegram. There's also going to be quick start videos, documentation, lots of links to get you started. Also, the slides of this presentation and the repo associated with this presentation will be in this QR code. So once I see all phones down, I'll be going on.
00:00:42.246 - 00:00:55.822, Speaker A: Okay. Oh, phone up. Also, every month I write a Graph Builders newsletter for builders like you, for any updates that are in the ecosystem. There we go. Another phone up. Okay, phone up. Okay, phones are down.
00:00:55.822 - 00:01:20.754, Speaker A: All right, so if you are hacking and playing the build with the Graph, these are the bounties available. And if you want to pay attention to the second category, the best use of existing subgraph or substream that's if you simply have a query sent to the Graph ecosystem and actually use that in your DAP. And that's what we're focusing on. This presentation, just sending a query. We're not actually going to be building a subgraph. So let's get into it. The graph network.
00:01:20.754 - 00:01:50.170, Speaker A: What is the graph network? The Graph Network is decentralized indexing and querying. There's 250 plus indexers worldwide that are organizing and providing your data. And there's seven chains on the Graph Network with over 1000 subgraphs, which means over 1000 endpoints for you to all query. It's pretty cool. We could all use this and build already today. And really quickly, what is a subgraph? Well, a subgraph, if you look at this, is pretty much this. You get disorganized data and that's on the blockchain.
00:01:50.170 - 00:02:18.134, Speaker A: And then from there a subgraph will organize that data. And then from there you have nice buckets at the bottom that we can query and actually provide data to our DApps. It has an API endpoint that we're able to use. When you build a subgraph, you actually build it in Subgraph studio. And then when you have that subgraph built and we have it going on, it starts centralized. And when we iterate and build it and build it and build it, we then publish it to the Graph Network and then it becomes decentralized. So that's just important to know.
00:02:18.134 - 00:02:51.122, Speaker A: Every subgraph that you find in this Graph Explorer that we'll go through in a second will be decentralized on all of those indexers around the world who are indexing that subgraph. And why might we go on the Graph Network and actually publish our subgraph? The subgraph will have increased uptime speed and redundancy. And these network subgraphs exist in a marketplace. When we publish our subgraphs to the marketplace, we have our subgraphs being competitive. It's actually tokenomic incentivization going on in there. With the GRT Utility Token. So the indexers are incentivized to work harder for you.
00:02:51.122 - 00:03:10.186, Speaker A: All right, that's really important as a builder to know that when you see a subgraph in the Explorer, that is one that's a competitive marketplace subgraph. Okay, let's keep on going. Let's take a look really quickly at the Graph Explorer. Here. We can see, this is the marketplace. This is a little GIF of it. And you can go through, we can all go through and check it out.
00:03:10.186 - 00:03:35.410, Speaker A: And see right there, there is the endpoint and that's the query URL. We'll go through this in a little bit with some actually exploring the Graph Explorer. Let's shift a little bit after that high level overview into something that is more what we are trying to do today, which is querying. All right, we actually want to get some answers. So it's not the answer that enlightens, but the question. And that is really important. We want to ask some good questions.
00:03:35.410 - 00:04:10.070, Speaker A: We want to get some good questions from our Web Three world and let's go into that process right now. Okay, the steps to query a subgraph. First we have to set up an API key. We have to set up that API key to access the graph network and actually send out queries. The next thing we need to find and assess a subgraph on the Graph Explorer, which is exploring the graph network. Number three, we then design queries in the subgraphs playground that we are interested in. And then number four, we integrate the query that we like with our DAP and we can just send it out and get to work building.
00:04:10.070 - 00:04:43.874, Speaker A: Okay? So first things first, let's go ahead and set up an API key. We'll go to the Graph.com and we'll go up to Products and Subgraph Studio and we'll go to the top and we'll go to Keys. And really quickly, I want to preview. We are excited and always, always it's really exciting to see that we're going to be putting in subscriptions for queries. So you'll have a set rate per month, if that's something that interests you. That's not what we're doing today, but that's a little preview.
00:04:43.874 - 00:05:10.590, Speaker A: I'll talk about that a little bit later. But these are our API keys. When we set up an API key for the first time, we actually get 1000 free queries. So if any of us are setting up API keys today, you'll get 1000 free queries. And this is mine that I've built for myself. And this is also a query key that that was created for everyone here. So if anyone here runs out of their 1000 free queries, go ahead and reach out to us on telegram or find us at the booth and we'll get you this query key right here and you'll be able to keep on building.
00:05:10.590 - 00:05:31.206, Speaker A: Okay? That's really important. We don't want you guys to stop building query keys right there. So just to create an API key. Just go right here, live demo key. And from there, that is it. We have our query key, and we're able the API key. And from there, we're actually able to fill that up with the billing balance and then continue on with building.
00:05:31.206 - 00:06:18.114, Speaker A: Okay, so now that we have our API key, we have 1000 free queries and also a free API key that's able to be used. Let's move on to the next step. Okay, number two, we want to find and assess a subgraph on the Graph Explorer. All right? So let's dive in to really what that might look like. How do we find the subgraph? How do we assess it? What does that actually mean? Well, we can go through a few steps here. And the easiest way to assess if a subgraph is of high quality, because remember, it's in a marketplace, is if it is a Masari standard subgraph. If you see if we all see a Masari standard subgraph, that subgraph has been built by the Masari team, and that has a standardized schema and a actual standardized way that we can interact with it.
00:06:18.114 - 00:06:40.554, Speaker A: And that's quite powerful. Let's go through really quickly their website that shows a really nice list of Masari subgraphs. And also we can see that in the Graph Explorer, but this is through Masari. Each of these, these are bridge subgraphs that we can access blockchain data, and they all are standardized together. The derivatives of subgraphs, these have their own standard. The derivatives here have their own standard. The exchanges, these have their own standard.
00:06:40.554 - 00:07:08.530, Speaker A: And soon later in the presentation, I'll show you why this is so powerful. Just know that subgraphs XYZ is a helpful place to see all the Masari subgraphs in one location. And then from there, you can be able to use that power, and I'll show you how that is empowered. Very soon, let's go back and say, let's say we see a subgraph on the Graph Explorer and it's not a Masari standard subgraph. Well, we got to get a little bit more. We have to know the actual protocol a little bit better. We have to understand what's going on.
00:07:08.530 - 00:07:46.606, Speaker A: And there's three things that we could look at to understand if a subgraph is of higher quality or moderate quality or lower quality, because all these subgraphs are permissionless, anyone could publish these. We need to assess if it's helpful in the marketplace. So let's go through and find and assess a subgraph in the Graph Explorer together. Right now, let's go to the Graph.com Explorer. Okay, so here is the graph explorer. And right at the beginning, we see there's 932 subgraphs, 932 endpoints, 932 locations where we can access data through the blockchain.
00:07:46.606 - 00:08:30.078, Speaker A: And we have even more on Arbitrum one and really quick differentiation. These are subgraphs indexed by indexers who are incentivized by the GRT utility token on Ethereum. The Graph protocol is on its process of migrating over to Arbitrum One to take advantage of L2, all the advantages of L2. And so right now we see 376 subgraphs that have migrated from Ethereum and are currently being indexed on Arbitrum One. And just so you know, if you are going through this, this is going to help you identify these different batches of subgraphs. So let's go ahead and go to Ethereum and we will see a let's go to a crypto punk subgraph. And I want to be very specific here.
00:08:30.078 - 00:09:08.822, Speaker A: I want to look at one community of NFTs, and from there we can start to dive into a little bit more detail. So right away we see this is organized in a way where curation signal is quite important. And that's important to understand, where the ones with the highest curation signal have the most GRT incentive, tokenomic incentives going on to reward those that participate with this subgraph. And that goes into a little bit of the tokenomics. I'm not going to go too deep into that because you all are builders. We're all builders. It's more important just to know the ones with the most signal, also known as curation, typically are the most valuable subgraphs and have the most proven quality in this ecosystem.
00:09:08.822 - 00:09:23.998, Speaker A: So right now, this is the one that we're saying, and that's the curation. That's the signal. That's the one that we want to take a look at. So let's dive in there and let's move on. So how do we assess this Subgraph's quality? Let's keep on going. This subgraph is actually finished indexing. That's awesome because indexing takes time.
00:09:23.998 - 00:09:47.366, Speaker A: This is already complete. So we're getting fresh data at the chain head, which is great. Let's keep on going. All right, let's say all right, the next thing that we want to look at, first we want to look at the curation. Then we want to look at the documentation. And any good subgraph is going to have its actual code available to the public. And we can see right here this developer, Jerry Ocolo, it's jerry O'colo has provided his documentation right there.
00:09:47.366 - 00:09:59.926, Speaker A: So let's take a look at what he has done. So let's see if there is quality documentation. We can see. Awesome. There is quality documentation. We know what's going on with the subgraph because this is permissionless. It's important that we can investigate.
00:09:59.926 - 00:10:35.206, Speaker A: All right, what's going on with this? Is this gathering the data? How is this organizing the data? That's really what we like. Okay, the last thing on that previous slide was comments. So it's curation, it's documentation. And the comments, specifically the comments in Schema GraphQL. Now, why are comments important in this location? That'll come up in a little bit when you're playing around the playground. But just I want you to see here that Jerry has been kind and put in comments here. And why might that be powerful? Well, we'll see when we're in the playground why that might be powerful in a little bit.
00:10:35.206 - 00:11:20.262, Speaker A: But if you are diving into a subgraph and we're able to see comments in this location, that helps us as builders really get building really quickly because this developer has taken the time and kindness to really make our querying experience much more effective. Okay, so curation the documentation and the comments in Schema GraphQL of the subgraph. Okay, now I think personally, this subgraph is pretty good. It's a pretty dang good subgraph. We're able to say, all right, we've got some good curation on there, we've got some documentation and also it has comments. The next step let's go back to here would be to begin to design some GraphQL queries. We've found the endpoint we want, we've found the actual subgraph that we think has the information that we want because it's gathering and organizing it in a very nice way.
00:11:20.262 - 00:12:04.222, Speaker A: The GraphQL queries are important because we have to start designing these little queries to say what data are we getting and is it the actual data we need for our DAP? So the few features that the playground has, there's many, but we'll just go over the filtering, some logical operators, we could save some queries and there's many, many more features that are available in the graph.com docs and you can see how it has those features in there. So let's think of some queries and just demonstrate how we might go through some investigation of this subgraph. So here's some example queries and we'll start simple. First ten transfers in cryptopunk's history. Let's go ahead and dive into that one the first ten of all times. So we'll be here and we'll go to the playground.
00:12:04.222 - 00:12:25.074, Speaker A: It automatically populates with a query and it has accounts and it has punks. But we don't want the account entity. We don't want the punks entities. Remember, we want to look at the transfers. And that's really how the Schema is organized. With every subgraph it creates these buckets, also known as these entities in the Schema GraphQL. And these are the entities that we can begin to query.
00:12:25.074 - 00:12:46.398, Speaker A: And we're looking for the transfer entity. Right here we have a single transfer. We want to see that. But we could also look at many transfers and we want to actually take a look at many of them. So we'll click on that and that little arrow that brings it down is allowing us to say, all right, let's look at transfers and look for the first, okay, ten, very nice. We could look at 15 or 20 or 100, whatever we want. And then we also want to look at the first ten.
00:12:46.398 - 00:13:24.890, Speaker A: So we'll say, all right, we got to look at the timestamp. That's going to be important because it's timestamp. And then we also want the ID. And then just to understand the ID a little bit, we could hover our mouse over different locations and the timestamp and we'll see that in just a little bit, why that might be powerful coming up, why that might be powerful when we're looking at more complex information, that hovering is quite powerful. So let's go ahead and say, all right, we want to order this by the timestamp here, and we want the order direction. Okay, very nice. We've created a little query, and bam, we've got this back, and now it's ascending from the beginning timestamp, and it's going up and up and up, and we have the IDs right there.
00:13:24.890 - 00:14:04.102, Speaker A: So already we have a valuable query that we can then bring into our actual DAP. And then from there, we can keep on playing around. We can play around and play around, find different bits of information that we like and go from there. What's the next question that we might want to answer? Okay, what's the total value of all sales, the total supply, and the number of sales on the CryptoPunks contracts? All right, so that's a little bit more detailed. Can we actually get that information? Has Jerry done the work at actually doing some compute on the subgraph and then providing us that data? Let's go see. We'll go here, and we want to look at we don't want transfers. We want contracts, and we'll get whatever's there.
00:14:04.102 - 00:14:28.418, Speaker A: And here we can see the total amount traded. And if we hover our mouse over the actual location, we could see the comment pop right up here. This is where the comment comes through. So if the developer has done a nice job putting a comment in there, we're able to see exactly what this means when we query this property, because sometimes properties can be a little bit vague. And just by putting that in there, we know exactly what that means. This number right here, what is total sales? We just are able to hover our mouse over. Thank you, Jerry, for putting those comments in.
00:14:28.418 - 00:15:04.426, Speaker A: That is awesome, because we're able to understand this better and get building. Let's keep on going with this journey here. This is a comparison of two Masari standard subgraphs. Remember those massari standard subgraphs I was talking to you about? These are both under the same category. They're both standard subgraphs that we can query, and we could send the exact same query to any Masari standardized subgraphs that are under the same category. And that's really powerful because let's say we have five or six different subgraphs, each going into their own different protocols. And then from there, we just want to send one query to all of them.
00:15:04.426 - 00:15:41.938, Speaker A: All right, using Graph Client, which I'll talk about in a little bit, we can do that. So I'll just demonstrate this query here, find the TVL for August 20, 2023. We can look at the Curve Finance Ethereum subgraph and then send that out. We get that information right back. And then also we're able to send the exact same query because this is a standard subgraph. It's a Masari standard subgraph here and we get that exact same information back because the schema is standardized. That's going to help you get information from many different protocols all at once, all to one location through Graph Client.
00:15:41.938 - 00:16:13.710, Speaker A: That's a really powerful all right. And that's through subgraphs XYZ. Remember, go through there and see the different categories for the standardization. If you want some homework, here's some homework, and that's going to be fun for you. If there was to be one QR code for everyone to scan to integrate queries into their DAP right away, it would be this one. This is the repo that I created for everyone here that gives demos of a vanilla JavaScript and Python query, an Apollo query a Graph Client query. Graph Client was created by the team that's building many teams that are building the graph.
00:16:13.710 - 00:16:31.274, Speaker A: That allows for one query to be sent out to multiple subgraphs all at once, which is really cool. There's auto pagination in there, so we get lots of responses. Really cool. And then finally at the bottom here, there's two things I want to pay attention to. Once I see phones down, I'll move on. Phones up good. Yeah, I see it.
00:16:31.274 - 00:16:54.814, Speaker A: Thank you. Two minutes, quick. All right, phones are down. Cool here likes machine learning. I think it's super cool. If you are interested in diving into machine learning, this is an amazing library that connects directly to subgraphs and is written in Python. So we can go ahead and start going into machine learning data science right away without having to go and do anything else.
00:16:54.814 - 00:17:17.880, Speaker A: Just use this library and it connects right to a subgraph and you send queries right from there. Super cool. And then also, if anyone here likes dashboards that are no code, this is DAP looker, it's awesome. It's built on top of subgraphs and substreams, and from there you could literally drag and drop these into your DAP and have these analytics right there. And you don't really have to do any front end design. It just literally drag and drop and that's it. It's really nice.
00:17:17.880 - 00:17:35.166, Speaker A: It's really good. So, yeah, playgrounds and DAP looker. One final thing. Billing subscription, that's a new thing. If anyone here is querying the subgraph a lot and want standard monthly rates, this is a subscription, so it's a flat rate. You don't have to worry about big spikes and big drops. This is something that's rolling out.
00:17:35.166 - 00:17:59.074, Speaker A: We're in beta right now. If you have any questions about this, reach out to us on telegram or meet us at the booth. We can get you signed up and you can actually use that. So some takeaways we love decentralized indexing. There's a thousand subgraphs and the endpoints ready for everyone here to query and then go ahead and play in the playground. Thank you very much. And mean, if anyone wants to scam this and tweet that's the lifeblood of crypto.
00:17:59.074 - 00:18:00.280, Speaker A: So it does help.
