00:00:21.910 - 00:00:22.460, Speaker A: Great.
00:00:22.830 - 00:00:23.450, Speaker B: Good morning.
00:00:23.520 - 00:00:43.850, Speaker A: Good afternoon. Good evening. Depending on where you're calling from, we have actually here from Huddle Zero One who is doing a workshop for power Your DAP using Huddle One video SDK. If you have any questions, they can go into the zoom chat and actually we'll be more than happy to answer them. And with that being said, I'll pass the mic off to our speaker.
00:00:45.750 - 00:01:28.986, Speaker C: Thanks Anna. I'll just share my screen. So hello everyone, this is Akshit, I'm a full stack developer at Huddle Zero One, and I lead the front end team over here. And I am one of the founding developers as well. So lately my work revolves around building the SDK infra which you'll be using in this hackathon, and it powers the Huddle Zero One web platform as well. So what is huddle zero one? So huddle zero one is a communication toolkit for web three. So it's built upon three pillars.
00:01:28.986 - 00:02:28.060, Speaker C: So the first pillar is the Huddle Zero One DAP through which you can do Web Three video conferencing. And it's basically for Dows and NFD communities, and it feels right at home for the Web Three native person. So you can schedule token gated calls, use NFDS as PFPs and do a lot more with it. Then we have our SDK infrastructure which are plug and play SDK toolkits for you to integrate inside your app and power your DApps with the Huddle infra. And then we have our DRTC protocol which is called Divergent, which is still in the works. It gives you the power to perform peer to peer communication through audio and chat. So I'll be giving a quick overview of the web app now, so I'll quickly reshare my screen.
00:02:28.060 - 00:02:46.980, Speaker C: It give me just 1 minute.
00:03:11.490 - 00:03:13.230, Speaker A: Actually, I think you're muted.
00:03:15.890 - 00:03:48.540, Speaker C: Okay, sorry, my bad. So this is the huddle zero one web app. And if you connect your wallet over here, then you'll be able to use your NFDS as PFPs. If you own any NFDS on the ethereum or the polygon chain, those will show up here. Right now I'm in a test wallet, so there aren't any yet. But otherwise, if you don't own any NFDS, then we also have options for default avatars. So I'm giving a quick overview of the web app so you understand the SDKs better as well, because our SDKs power the Huddle One app too.
00:03:48.540 - 00:04:40.090, Speaker C: So once you join the meeting, so this is what it looks like, and then you have other streaming options as well. So you can record your meeting. You can even live stream your meeting via live peer or to YouTube or Twitch from here. So this is a basic overview of the Huddle Zero One web app. And if you'd like to create token gated meetings for your NFT community or a Web Three Dow community, then you can do that via the Dashboard Hurdles dashboard. So if you go to Dashboard hurdle One, it will prompt you for a wallet sign in. And once you do that, this is the interface that will show up and you can go to the meetings tab and create a new meeting.
00:04:40.090 - 00:05:43.230, Speaker C: And once you create a new meeting, you can then select Token gated Meeting and select whatever NFT or Token you want to token gate the meeting with. So it supports both the ethereum and polygon chains and you can just paste in the token address and create a Token gated call. So this is a basic overview of what Huddle zero one offers. And now we'll be going further into the SDKs web app which I just showcased. You can even install the Huddle zero one mobile app on Android. Then these are the features which Huddle zero one offers token gated meetings, NFDS as profile pictures and live streaming. And we even store the meeting recordings on IPFS and filecoin.
00:05:43.230 - 00:06:33.130, Speaker C: So now we'll go over the SDKs. So our SDKs aim to solve audio video for your DApps in minutes. So if you want to integrate video and audio in your application, then you don't have to go through any of your custom state management systems. We have that all part built in into our SDKs so you don't have to worry about any rerendering problems or state management problems bloating your app. We have created a resistance store inside our SDKs which gives you access to all the peers and the metadata related to the meetings inside the SDK itself. Then you have features like recording and live streaming built in as well. So you can use that in our SDKs.
00:06:33.130 - 00:07:42.130, Speaker C: Then you have NFPs, As, PFPs and the basic audio video communication that our SDKs offer. So this is the SDK architecture of the Huddle one infra. So this is our Huddle web app and the Huddle web app is powered by the Huddle client NPM package and the Huddle client NPM package talks to the media servers that Huddle has placed. So the Huddle client package was an internal package at first and then we open sourced it and published it to NPM which now you can leverage to build your own DApps. And then we also have another NPM package called the Huddle zero one Iframe. So if you'd like little to no customization inside your DAP and you do not want to code the UI from scratch, you can just use Huddle zero one iframe NPM package and install it in your DAP and customize it according to yourself, according to your DAP. And you can even use the CLI tool create Huddle zero one to generate applications based on the Huddle client package and the Iframe package.
00:07:42.130 - 00:08:25.698, Speaker C: So we'll be going over those in the hands on tutorial. So these are the three NPM packages we have CLI Tool, Iframe and the web SDK. So our CLI tool gives you very easy to use commands just to generate simple apps which you can then use for audio video communication. So we'll be going over the iframe SDK first. So if you head over to NPM, you'll find this package under the huddle zero one organization called huddle zero one iframe. It's a TypeScript package. So if you'd like types, you can even import those.
00:08:25.698 - 00:09:14.958, Speaker C: So these are the CLI commands for iframe and we'll be going over these on the CLI now. So I'll just share my entire screen. I hope my screen is visible. Okay, so I've created this directory called Spacewalk for this tutorial and you can just type in NPX create hurdle one and it will prompt you asking for what type of project you want. So first it will prompt you for the name. So you can just name this whatever you like. So I'll just call it iframe app, then you can select iframe or the client SDK.
00:09:14.958 - 00:09:40.026, Speaker C: So for now, we'll go ahead with the iframe SDK. Then if you want to use TypeScript, then you can say yes. So it will generate an app for you in seconds. Once you enter this app, you'll have to install the dependencies with the package manager of your choice. So I'll be doing so with the package manager called Yarn because I have.
00:09:40.048 - 00:09:44.026, Speaker B: The Yarn log generated over here, so.
00:09:44.128 - 00:09:49.440, Speaker C: It took 1 second. And once I run this app.
00:09:53.090 - 00:09:53.406, Speaker B: This.
00:09:53.428 - 00:09:54.800, Speaker C: Is what it looks like.
00:09:59.570 - 00:10:00.466, Speaker B: It so.
00:10:00.488 - 00:11:16.460, Speaker C: What you can do is that you can embed the hurdle app inside an Iframe and then call triggers from outside of that app to have customizability. So say I join this meeting and I want to enable my webcam from outside of the iframe app. I can simply do so by calling the methods on the huddle client on the huddle iframe, so I just click on enable webcam from outside of the app. Then it will work and I can do so and I can even use reactions from outside of the app once you install the package. So I'll quickly go over how the code is also working. So all you have to do is you just have to import huddle iframe from the huddle iframe NPM package and once you do that, you can just render out the huddle iframe inside your JSX. So if you check out here, these are all the buttons that we had created.
00:11:16.460 - 00:12:36.292, Speaker C: And if you check the huddle iframe component, this is all you have to do to render out the huddle life frame. If you want to add customizability to do methods as I showed before, like sending reactions from outside of the app or calling Enable or disable webcam or start the recording, then you can do so via the methods that are provided by the Huddle iframe app instance which is also imported from the huddle iframe NPM package. So this is how it's working. So if you even head over to the Huddle One website and go to talks, you'll find the full documentation for this over here in the iframe section. So if you're using on the vanilla if you're not using React or if you're just using vanilla HTML JS, then you can simply copy paste this snippet over there. Otherwise you can use this from NPM and install this. And this is how you can just import it just as I showed before, just import Huddle Iframe from the package and render it out on the JSX.
00:12:36.292 - 00:13:10.370, Speaker C: And then you can call instance methods using this Huddle Iframe app instance. So it just takes the method name. So these are all the methods that you can call and these are all the allowed emojis and you'll be able to fully control the hurdle app from outside of the hurdle iframe. So this is how it's working. So I'll take a few questions. If anybody has any questions, then we'll move on to the next part. You can just drop it in the chat if any questions.
00:13:10.370 - 00:13:19.410, Speaker C: Okay, looks like it's going pretty great. I'll move on to the next part.
00:13:20.660 - 00:13:21.410, Speaker B: You.
00:13:25.020 - 00:13:26.010, Speaker C: One SEC.
00:14:04.900 - 00:14:06.210, Speaker A: You'Re muted again.
00:14:08.500 - 00:14:57.330, Speaker C: Okay, my bad, sorry. So Iframe hands on what we just did and if you want to I'll just real quick go back to the slide. And if you don't want to go with the interactive command and just want to generate the app in just a single command, you can pass in name tags and the tool tag to generate the app in one go. So that's how that's working. And these are some Iframe SDK examples that we saw in previous hackathons. So this was a pretty good use case in which we had a creator economy and this person used to use LiveFrame app to tokenate calls based on the artist's holding. So you can check that out on this link.
00:14:57.330 - 00:15:48.320, Speaker C: Then we had this integration with Meet with Wallet. So they used a customized version of the Iframe to have this dark and light mode using the Iframe. So it doesn't look like the Huddle app is being integrated here, but they embedded the header and footers of their own website and used the Huddle app in between. So this was pretty creative and we are hoping to look for projects like these. Then we had this orbits example, they did a similar thing. They used the Huddle Iframe on the side where they used a transparent background and used a custom background on the back of their website to give it a better feel. So now let's move on to the client SDK.
00:15:48.320 - 00:16:26.892, Speaker C: So if you go to the NPM store, then you can find the Huddle client package over there under the Huddle organization. And this is also a TypeScript package. So if you want types, you'll get those as well. So the Huddle client package is divided into four modules. So one is Store, the other one is Hooks and we have Utils and then Schema. So if you're using TypeScript then Schema will come in handy as it includes all the types for your Huddle client package. Then we have the store.
00:16:26.892 - 00:17:02.904, Speaker C: So Store includes all the state, the store management that I talked about before. So you don't really have to create your own custom state management solution. You can just use the SDK Store management. It contains all the metadata relating to the meeting app. So once you join the app, all those states will be reflected inside the store. So the Iscampost Is mike paused and the peers metadata will all be populated inside the store. Then we have certain hooks that we've implemented to make your react, implementing it in React much more easy.
00:17:02.904 - 00:17:54.040, Speaker C: And we have some Utils as well. So all the functions that we thought were being used a couple of times, we bundled that up into a Utils package. So all these sub modules are part of the Huddle client NPM package and those are Powering, the Huddle web app. So the Store management is basically a wrapper around the Zustand store, if you'd heard of it. So it's a redux alternative which is much more optimized. So we're using that and we have a Huddle client context which you need to wrap around your web application in order to get access to the Huddle client state. So we'll be looking into that over in the code as well.
00:17:54.040 - 00:18:38.180, Speaker C: Then we have certain client methods as we saw in the Iframe as well for enabling or disabling your audio video in the room or sending reactions or sending messages and so on. And as a part of the Huddle client context, we also give the Store management there. So it's very easy to implement it. If you have a fresh installation of React. And if you have an app already built and you do not want to start from scratch, you can just go to NPM and install the Huddleflient package and then call the method of Join this way. So this is the random room ID that we've provided. You can enter whatever you'd like here.
00:18:38.180 - 00:19:22.580, Speaker C: And if you want to implement your own Wallet authentication, you can do that as well and pass in that authenticated Wallet address into the Join function in order to authenticate the user. So we'll be going over this in the code as well. This is just an overview for it. Then we have certain hooks. So we have this use Huddle Store hook to get all the states. So if you've used Redux and this is very similar to use selector hook through which you can just select certain items of the state and get access to the particular state inside it. So this is how we've accessed the Is Campo state.
00:19:22.580 - 00:19:52.860, Speaker C: This returns you the camp state of your peer. So then we have the Schema types. So these all are included inside the sub module of the Schema which I described before. So these are the Room state. This is the room state type which you'll also find in the Schema. So let's get started with the demo. So these are the CLI commands for the Huddle Client.
00:19:52.860 - 00:20:23.872, Speaker C: Okay, so we've repeated a slide here. I'll just go over it on the entire screen share. We have a mistype over there. So if you want to create a Client package, then what you can do is go ahead and type in create.
00:20:23.926 - 00:20:28.540, Speaker B: Huddle zero one and it'll prompt you.
00:20:28.630 - 00:21:12.672, Speaker C: Again for a project name and you can say Client app. And then you can select whatever tool you want to use. So we are using Client for now, then you can say yes or no for TypeScript and we have it here. So once we enter this Client app, you have to install the dependencies. So we'll do that with yarn and that's done. And once you say yarn dev, it will run the app on your local machine and this is what it looks like. So we've even given some instructions on the left side for you to use the app.
00:21:12.672 - 00:22:08.586, Speaker C: So you can just click on enable webcam and it will prompt you for your web camera and then you can join the room. And if you join from another tab, then you can join from the other side. So let's just go into the code. So if you're implementing it on an existing project, what you'll have to do is you'll have to install the Huddle Client package from NPM and follow the guide given in the docs. So let's just go to the docs real quick. So we have this tab called Add to existing project and you have to just follow this guide simply. So if you're using the Huddle Client package, then you'll have to get your API key.
00:22:08.586 - 00:22:21.360, Speaker C: So you can see this is over here and if you head on over to get your API key, you can just connect your wallet and it will prompt you for the API key and you can just copy this and add it to your project.
00:22:23.730 - 00:22:24.480, Speaker B: Then.
00:22:27.430 - 00:23:02.880, Speaker C: Once you install the package on your app, then you have to add your API key inside here and this will give you an instance of the Huddle Client. And then you can use this Huddle Client instance to call methods pertaining to it. So as we saw earlier inside our slides, so this is the first method that we have to call in order to join the room. So once you add the room ID over here and the wallet address auth, you can simply call the join method on the Huddle Client instance to join a particular room.
00:23:04.530 - 00:23:08.014, Speaker B: So if you see here you got.
00:23:08.052 - 00:24:08.850, Speaker C: The Huddle Client instance using this method, and then you can call certain methods like huddlecline Join over it to join the room. So in order to get access to the Huddle Client inside all your react components, you'll have to wrap your app inside a Huddle Client provider as well and give access to the Huddle Client to the whole of your app. And then you can just get your huddle client very easily inside any component and call methods on it. So you can simply call it using this. And if you'd like to get even more insights on what all methods are there, you can deep dive into the docs and you'll find store states over here, what all states are there, all the types for it, and even you'll get hooks for using it. And we have the client methods over here as well. So it will show all the methods that will be required for you to create a meeting app using the Hurdle SDK.
00:24:08.850 - 00:25:05.458, Speaker C: So this is how it all wraps in. If you'd like to generate a Huddle app just using the single command, then all you have to do is type in the tags for it. So as we did NPX create Huddle zero one before. So you can just type in name My app and then you can say Tool Client and add TS flag and it will generate another app for you in a single line. So you won't have to go through the prompts and you'll see that you have this My app over here. So that's how easy it is. So that was the hands on tutorial and we have seen multiple hackathon projects from the Huddle Client SDK and these were really good.
00:25:05.458 - 00:26:01.480, Speaker C: So this was the consulting app which used the Huddle SDK and as well as it used money streaming. So it charges the user for the number of minutes they've consumed and based on the number of minutes they've consumed, the amount from their wallet gets deducted. So this was a pretty cool project, which we saw in the ETH India hackathon. And this is Meet Three Club. So it's sort of an Omega clone and it uses the Hurdle SDK to match random people inside like in the project. Then this was another very cool project. It was built in one of the hacks and in this the two people could play chess while having a video, audio video conference with each other.
00:26:01.480 - 00:26:35.042, Speaker C: Then these are one of our clients, Parallax. So they've created this Dow, which uses the Huddle client as well. So it is a metaverse of sorts in which you can roam around and have meetings as well. So they've used the chat module inside a Hurdle client as well. They've used a Hurdle client for audio video and they've even used it for live streaming. So this was also a pretty cool project. You can check this project out on this particular link.
00:26:35.042 - 00:27:33.038, Speaker C: Mindblown IO. So these are the ideas that we have for this hackathon. So let me just reshare my screen real quick. Yeah, so the first idea is a video conferencing platform that uses decentralized storage to store meeting transcripts and making them easily searchable and accessible. So right now the Huddle Client SDK provides you with audio tracks. So using those audio tracks, you can generate meeting transcripts and store those meeting transcripts onto the file point network. And if you can make them easily searchable and accessible via retrieval, that would be a really good use case over FPM and Huddle Zero One.
00:27:33.038 - 00:28:43.022, Speaker C: So we are looking forward to seeing projects like those. Then we have a decentralized video conferencing platform built on filecoin that allows for real time collaboration like Google Sheets. So if I head over to the next slide, this is a reference of what we'd like to see. So say there are people on the meeting and they are collaborating on this platform and they are also having audio video calls and the metadata goes over to the filecoin network and can be indexed very easily. So this is something we'd like to see then a Marketplace for marketplace platform for renting out video conferencing and live streaming event recordings. So this would be also a pretty cool project. So to see like a marketplace or a data dow of sorts, where people can share their recordings and have a data centric approach, where they are incentivized to store those recordings, a particular type of recordings and even consume them, then we'll also like to see some social media platforms.
00:28:43.022 - 00:29:12.506, Speaker C: So this also revolves around the idea of data dows. As you can see, like in Web Three, social media is not working out so good. But with the advent of data dows, this could really help. This could be pretty cool. So we'd like to see something built around the data dows and Huddle Zero One SDKs. So that would be pretty cool. So these are some stats.
00:29:12.506 - 00:29:54.826, Speaker C: So we have 50 plus projects built on the Huddle Zero One infra in the past three months. We've had like three hackathons so far, and we've seen a lot of great projects. And we're looking forward to seeing beautiful collaborations between the FPM and Hurdle One SDK projects. And these are some of the projects that stood out inside our hackathons. So it's peer code, space, meet Farcaster spaces, and finesse. These projects were really cool and you can even check these out and get some inspiration from those and happy hacking. So this is our Hadle One team, a team of 23 members.
00:29:54.826 - 00:30:00.880, Speaker C: And yeah, feel free to reach out to the Huddle team or me and see you.
00:30:06.130 - 00:30:06.880, Speaker B: Awesome.
00:30:07.730 - 00:30:30.840, Speaker A: Thanks so much, Akshit, for taking the time to do this workshop for Space Warp. Always great to have you here. And thank you for the rest of you for tuning into this workshop. Like Axel said, if you have any questions for him or the Huddle One team, definitely feel free to reach out on Discord or email or anything. And with that being said, I hope everyone has a great rest of your day.
00:30:32.170 - 00:30:36.482, Speaker C: I think there are some questions I'd like to address, if that's all right.
00:30:36.636 - 00:30:37.354, Speaker A: Of course.
00:30:37.472 - 00:31:32.080, Speaker C: Okay. Can I use it as a classroom type app? Yes, you can definitely use it as a classroom type app. Does it charge to use? No, there are no charges as of now, so you can definitely go ahead and test it. And you can even fetch NFTs on the polygon or the Ethereum main net, so that's not an issue. Does the SDK integrate with low code tools like Ionic framework? Not as of now. The SDKs only work on the JavaScript runtime, so if you can install it on there, then it will work. Can I use it on IPFS and other storage tech? Yeah, definitely.
00:31:32.080 - 00:31:51.710, Speaker C: The SDKs are meant to provide you with the audio video communication, so if you can build something on top of that using IPFS or other storage tech like FPM Smart Contracts, then that will be pretty cool. Any other questions?
00:31:55.040 - 00:31:55.500, Speaker B: Okay.
00:31:55.570 - 00:31:57.884, Speaker C: All right. Looks good to me.
00:31:58.082 - 00:31:58.636, Speaker B: Awesome.
00:31:58.738 - 00:31:59.100, Speaker A: Cool.
00:31:59.170 - 00:31:59.356, Speaker B: Yeah.
00:31:59.378 - 00:32:09.330, Speaker A: We'll end this workshop here. And of course, feel free to reach out anytime during the the hackathon for any other questions. All right, have a great day, everyone. Absolutely.
