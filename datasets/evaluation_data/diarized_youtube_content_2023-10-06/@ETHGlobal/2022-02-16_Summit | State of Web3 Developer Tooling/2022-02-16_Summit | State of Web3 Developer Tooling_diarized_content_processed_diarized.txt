00:00:05.290 - 00:00:36.120, Speaker A: Ready for our next amazing panel. And this one is about just the state of web3 developer tooling. And joining me will be Austin Griffith from Ethereum Foundation and Natter David who is the lead developer relationship person from Edge and Node and the Graph. I did a pretty bad job at introducing you both because I want to kind of give you that option. So we'll kind of start with Austin and Austin would love to kind of hear more about who you are, what you do and sort of how you got into this space.
00:00:37.610 - 00:01:02.830, Speaker B: Yeah, got into this space building. I am a tool builder. I love building things and making them very forkable for other people to build. I love seeing weird forks of my things in production. Right. So I work for the Ethereum Foundation thinking about developer onboarding, thinking about how we scale it up to all these new developers coming out and I'm here to learn and build and wrap with you guys about web3 and tooling.
00:01:05.250 - 00:01:05.662, Speaker A: Awesome.
00:01:05.716 - 00:01:42.318, Speaker C: Yeah. So I would say one of the reasons that I'm here is because of Austin. When I started learning about web3 and how to kind of create DApps as a developer, the first person's name that came up was Austin. So I started diving into some of his tutorials and then started creating my own tutorials. So I got into Web three after being a traditional software engineer and developer relations developer advocate at AWS, writing code for about nine and a half years and then got really infatuated with Web Three and have decided to kind of take the plunge and having the best time of my life so far.
00:01:42.484 - 00:02:30.022, Speaker A: That's awesome. Well, I'm glad that you were able to share that here with Austin being on the other side there. So the context for this chat is essentially this event is one of the biggest ones we've ever done. Actually, it is the biggest event we've ever done and we have over 1200 people participating and about 70% of them are coming in from web two to web3 for the first time. And that is an incredible metric from even kind of what we see usually for all of our events. And not only that, it's not just that people are learning about programming. It's there are seasoned web two developers who are actually in writing and told, like, hey, we're considering leaving our jobs, or I'm trying to do something here in this space, and I think it's an opportunity for me to kind of try something out for a weekend.
00:02:30.022 - 00:03:26.400, Speaker A: And that sets up a pretty interesting base, because while somebody can be really good and seasoned in programming, there are obviously a lot of gotchas when you kind of get into web3. And sadly, the route of learning those gotchas after it's too late is not a really acceptable route, for too long at least. But the thing I wanted to do here was talk about sort of what you've seen yourself over the past few years as you've transitioned and sort of anywhere from observations to things you've noticed that you kind of thought were things that you'd either unlearn or kind of relearn or just adapt to. From the web two to web3 side. So I'll kind of start off with an actual specific question, which is, as you kind of interact with a lot more people who are pinging you or you're designing any of the tutorials, or any information from or content, form. What are some patterns that you notice that anyone coming from F Two web Three sort of falls into as they're going into this? And maybe we can start with Natter here.
00:03:27.170 - 00:04:31.426, Speaker C: I think one of the things that I can kind of speak to from myself is that I kind of tried to take my ideas and my experience from Web Two and apply those directly to Web Three. And I think that that was the first I wouldn't say mistake, but like, in hindsight, I would have probably tried to understand all the tooling and the different protocols and the primitives that we have that are just different and you can't really apply all those same ideas to Web Three. Instead, I think we can do some of the same stuff, but we now have new things that we can do, and there are certain things we can't yet do. So therefore we can kind of maybe rebuild some of the same types of applications that we're used to building in Web Two, but maybe not all of them today at least. But we have these new things that we can do. So to me, it kind of feels like more of an extension of my skill set that I can now apply and kind of build more things as opposed to like a replacement of my existing skill set. And I think that that might be a good way to kind of frame it.
00:04:31.426 - 00:04:59.866, Speaker C: For developers that are like in Web Two, you can still do all of the things that you used to be able to do. That's the great thing. You're kind of like taking all of that knowledge and all those skills that you had and all those opportunities. You're just now creating more opportunity and you're now able to kind of build out new types of applications in addition to what you have. And you're just kind of like now creating more synergy in the knowledge that you have and it kind of just opens up a lot of doors I.
00:04:59.888 - 00:05:49.258, Speaker B: Want to talk about that's a perfect plus one. Almost all of your skills are going to translate right into Web Three from Web Two. It's not like our troop versus your troop kind of thing, right? The place to dive in here is sometimes people use it as like a slow asynchronous database at first, right? You see first smart contracts from most developers after they get the syntax and get it down and it's like arrays of Structs and they're using it like they think that they're storing everything in these giant arrays. First name, last name, let's write it all on chain. And so that's one of the first gotchas that you have to get over is like be careful what you're putting on chain. Understand that you're making all the thousands of the nodes on the network all have to update that value and keep that value. It's like a crazy amount of redundancy compared to your read replica of Web Two.
00:05:49.258 - 00:06:10.900, Speaker B: But other gotchas we should probably dive into are just like big numbers and way versus ETH and the things that you didn't expect to happen. It's like oh yeah, I can't use a floating point here, I have to use a numerator and a denominator and this solidity because that EVM is this super simple thing that needs to execute this stuff. Like there's reasons for these tradeoffs that we get ourselves stuck in.
00:06:11.910 - 00:06:57.380, Speaker A: No, I absolutely agree. I think nader I think it's a really good framework that you just kind of laid out. And I never thought about that until you just said it, which is if you are learning a different programming language, you usually have, or even a web framework, you have, like, oh, I can do this to do list app, usually in Ruby, and let me try to learn Python or Flask, and I can just clone that. I know exactly what to expect because what I'm learning is actually syntax and not necessarily under the hood changes on how things are in a way compiled or executed. But here a lot of those principles are still applicable. However, you are fundamentally kind of restacking which layers are actually mutable versus immutable and that changes a little bit of things. So you can't just clone and try something directly, hey, I'm going to make a crypto version of some app that I already know.
00:06:57.380 - 00:07:36.400, Speaker A: And if you try to do so, you have to make really specific trade offs which become known at the 10% remaining mark and not the 90% upfront work that you do. And that sort of confused a lot of people and that's kind of what we see a lot as we kind of do a lot of our hackathons. So maybe my first question is when somebody kind of does that, or comes to you from kind of that background, what are resources that you point them to? Anywhere from get up to date on sort of how to think about coding, anywhere from smart Contracts to designing Web Three apps, or to actually stay up to date, given how fast the space is evolving. What's the answer when somebody wants to learn?
00:07:42.530 - 00:08:32.542, Speaker C: Combination of a couple of things. One of the things that I always obviously just recommend people doing is just building stuff going and finding tutorials out there like Austin Griffith's Speedrun. I have the complete guide to full stack ethereum development. There's literally probably dozens of high quality tutorials like that. So when you start building with these things, if you are the developer, you start kind of realizing some of these limitations, maybe, and you also start seeing the new paradigms that are there. So that's one thing I would do, just start building and start playing around with different things. Another thing I tried to address recently in a blog post called Defining the Web Three Stack goes into specifically the answer to this question, like what is the Web Three stack? What are the trade offs? What can you do? What can you not do? And I really tried to go into depth around my interpretation of that.
00:08:32.542 - 00:08:38.686, Speaker C: So yeah, those are two recommendations. I would love to hear Austin's ideas here as someone a little more senior.
00:08:38.798 - 00:08:52.886, Speaker B: Plus one. Plus one. Also we should shout out Patrick's, like 16 hours tutorials that he's been putting out too, right? There's a handful of great ones there too. Plus one. Speed run. Yeah, go ahead. No, go ahead.
00:08:52.886 - 00:08:53.394, Speaker B: Cartoon.
00:08:53.442 - 00:09:02.300, Speaker A: No, I was going to say Natter. Maybe it's worth sort of going a bit deeper into that blog post. So would you mind kind of going over what you talked about and sort of what are specific recommendations from there?
00:09:03.070 - 00:10:02.442, Speaker C: Yeah, so essentially when I was again, kind of going back when I started learning all this stuff, I was taking all of the ideas and all of the experience I had and thinking about the Web Three in that way. And I think not only me, but a lot of developers. Once you've kind of gotten used to building an application using the things that we have available to us as a full stack developer, we kind of have a front end, and then we have these back end primitives, and then kind of using all these together, we can build out 95% of the applications that we need. So the Web Two stack is what I would call that. What does that mean exactly? Well, typically it's kind of like a database, a server, some type of execution layer to talk to your database, a file storage system. So something like Amazon s Three would allow you to store videos, images and things like that. And then you would have something like a front end, which would be either a mobile client or a web client.
00:10:02.442 - 00:10:46.234, Speaker C: And that's kind of it. I would say using those things you can actually build out like a Twitter clone or Instagram clone, almost any application you can think of. And then the extra 5% or 10% is going to differentiate depending on the app that you're building. You might need a machine learning API or you might need something like notifications or whatever. So what does that stack look like in Web Three? And that's kind of what I tried to break down in that blog post. And the main differences are we have a lot of these same primitives. So we have the API layer, we have the authentication layer, we have the quote unquote database, which is a little different or a lot different.
00:10:46.234 - 00:11:35.850, Speaker C: I would say that's kind of one of the main differences is like how do we think about data? We have the front end, you could still kind of transfer all that knowledge and mainly it comes down to kind of like what does the back end kind of look like at this point, since the front end is essentially transferable and the new primitive that we have is the blockchain. So we've never really dealt with that. If you're coming into the space, you have the blockchain development environment. So this is really important from developer tooling perspective. If you are a developer and you've been building with something like AWS, you have things like CDK, you have things like Amplify. If you're using something like Superbase or one of these other managed services, they come with all this great tooling. And I think that we're starting to see some really great tooling now.
00:11:35.850 - 00:12:17.510, Speaker C: In web3 with things like Foundry, we have obviously Brownie and Hard Hat is really great. Hard Hat is kind of what helped me get going. So you have your blockchain development environment, you have your chain, you have the file storage, which in web two would be something like S three. But in web3 that's something like IPFS or Rweave. And that is going to be a lot different than what we're used to. We're used to paying a very small price for storage and it's kind of like centralized and obviously it can go down or whatever. And then in web3 we have kind of like two main primitives for file storage, like IPFS.
00:12:17.510 - 00:13:09.910, Speaker C: You can save stuff there and it's free, but you can't always say, okay, that's going to always be available forever. Rweave seems really interesting to me because it kind of offers this permanent stage storage layer where you kind of pay a single transaction cost and based on what the protocol tells you, it will be available ten or 15 or 20 years from now, theoretically, which is super interesting to me. And then really the other two areas would be the API layer and the identity layer, which is really you could go into those for a whole episode if you wanted to. But the API layer would be something like an RPC endpoint or something like the Graph protocol, which allows you to kind of index and serve data via some GraphQL endpoint.
00:13:10.410 - 00:13:24.142, Speaker A: That was extremely comprehensive and that's awesome. And I'll kind of keep you fair and give Austin a chance to talk about sort of the motivation for doing Speedrun Ethereum, what it is, how you kind of got to it and where your plans word.
00:13:24.196 - 00:14:10.060, Speaker B: Yeah, no. So Speedrun Ethereum is about getting that mental model sort of it's pretty easy to pick up the syntax, right? Like solidity is pretty easy for if you're a Web Two developer, you'll pick up the syntax in no time and you'll feel like you're at the top of the Dunning Kruger. But you have to go down into the valley of despair and learn all the different things. Just like Natter said, you have to build things over and over again and ship them things out in public in front of people. So hopefully Speedrun Ethereum gives you a chance to build up your Web Three profile and get the mental model of what kind of things we can build on Ethereum and what kind of things we can't what he was talking about IPFS. It's immutable and it's decentralized, so it's really hard to build. Right? Some of this stuff is super difficult.
00:14:10.060 - 00:14:38.214, Speaker B: Going back to sign in with Ethereum, learning the mnemonic and learning your key pair is hard for a first time user. But once you have that, then your identity and your inventory follows you from app to app. And that's a new thing in Web Three, and it's kind of emerging right now of what that even looks like. So, yeah, I don't know, bouncing around a little bit. But as a builder on Web Three, there's a lot of fun things to look out for that kind of come along with this new paradigm that we're dealing with.
00:14:38.412 - 00:15:33.686, Speaker A: That's awesome. And I'm just impressed with the live chat here because they're like 10 seconds away from just posting a link of everything you're referring to for everybody else. So before I could even check, there's a list to every article you talked about, a 16 hours video, all the blog posts, feed, rent. It's incredible. So thank you for doing this, everybody. Well, I also want to cover toolings in general, but I sort of asked a version of this question earlier, but I want to be really specific or see if we can get into specifics, which is what do you think people get most stuck at from kind of your experience? And this is kind of commenting on specifically Web Two devs that are trying smart contracts, any kind of catch all or very common patterns or trends you've noticed, and kind of what are those things where everybody is sort of blocked in most cases, maybe Austin, given your experience.
00:15:33.788 - 00:16:12.020, Speaker B: Tutorial hell, right? Like, a lot of people get stuck in tutorial hell of like, there's so many tutorials, there's so much material out here. What is the next thing I should build? And I'll paste a Twitter thread that I have where it's just like, all right, you've got the basics, you finished the first challenges, you're stuck. What's next? And it's like, build yourself an indexer and learn how that kind of stuff works. Each of these little places to explore is like a whole a multi SIG leads to a dow leads to building these new Dow tooling mechanisms, a Dex, like learning how to trade things. So, yeah, I'll paste a link in of a good kind of next steps. But I want to hear Natter's answer too.
00:16:14.710 - 00:16:47.022, Speaker C: Yeah, I echo everything that he said. You kind of start learning this stuff. And it's the same thing with Web Two. If you don't actually take some of those ideas and try to build something and expand the knowledge that you have learned and then actually write some code, you just won't get anywhere. So definitely start building before you feel like you're ready because that's the perfect time. Obviously you need to have somewhere to start from. So do a couple of tutorials for sure, but at some point just say, okay, that's it, I'm going to go build an app.
00:16:47.022 - 00:16:59.666, Speaker C: And there's a handful of good starter applications that are like Web Three. Like a Token exchange is a good example he mentioned. Would you say like a token gating or something like that?
00:16:59.688 - 00:17:03.122, Speaker B: Oh yeah, token gating, that's a whole other thing for sure.
00:17:03.256 - 00:17:47.346, Speaker C: NFT Marketplace is a great one, obviously. Just the hello world. Just try to build all this stuff and then maybe take someone's tutorial and then extend that and add functionality and you'll run into a lot of areas that you'll so there's that. And then the other thing would be, again, a lot of times coming from Web Two, you try to kind of apply the ideas that you have directly. And let's say I want to build out a Web Three version of something I'm used to doing. So for instance, if I wanted to build like a Twitter version, twitter on Web Three, you will definitely run into a lot of challenges because we don't really have the tooling available today to build something that is that good as far as the user experience is concerned. You have to have right now, unfortunately, points of centralization there.
00:17:47.346 - 00:18:23.660, Speaker C: So you can obviously store messages in something like IPFS or ceramic, but how do you actually do the queries and how do you do notifications and how do you do private messages? All this stuff, all this stuff is possible, but we're not quite there yet to make it easily available for most developers to do. So in Web Two, we have really great solutions that are out there that kind of abstract away all this complexity. Things like superbase, things like amplify and things like Vercell. But we don't really have that quite yet and I think that's what we're going to be building over the next few years.
00:18:24.110 - 00:18:56.950, Speaker A: That leads perfectly into my next question, which was just giving a kind of comment around what's happening with tooling, right? So I think what you just said is definitely true, but I feel like that's a one layer up on the Tooling side because that's on the enlargely manages the destination and the interface to code. But when you look at developer tooling, obviously we've seen the evolution from how kind of truffle to where we are with hard hat now, but do you think there's anything still missing or what can still be made better if we leave that open ended? What can be improved on developing smart contracts?
00:18:58.570 - 00:19:06.182, Speaker B: Optimistically. I just want to say that developer tooling is so much better than it was a few years ago. It's pretty damn smooth.
00:19:06.326 - 00:19:07.914, Speaker A: And that's a conversation every year.
00:19:07.952 - 00:19:46.306, Speaker B: Austin I keep saying it's good. I would say that one of the things that might have been missing a year ago might have been more like templates. And it's not the layer of tooling like Hard Hat. You've got hard hat. You can do all this cool stuff. If I want to build an NFT marketplace, am I going to start from complete scratch here? Am I going to have to build my own indexer? What things are available generically that I can grab off the shelf and just plug in here? That's probably what I should have said last year. I don't know what I should I wish I could see into the future to tell you what I should say right now, but I don't know exactly what's missing with Tooling.
00:19:46.306 - 00:20:04.000, Speaker B: I think Tooling is pretty good, but obviously UX can get so much better error messages every year. I probably curse error messages right enough gas. And the error message is like this big and it's like right in there somewhere is the actual error that the user needs to understand. But it's buried. So error messages. How about that?
00:20:07.170 - 00:20:42.522, Speaker C: For me, it would be kind of like the development environment for working on an EVM compatible chain is really great right now. Hard hat is just amazing. If you pick that up from Web Two, it will feel very natural because everything's well documented, everything just works. You're using node JS and you're using CLIs and stuff. It feels really great. But I would say there are a lot of areas that, for instance, documentation and a lot of the other Tooling. So Ethers JS and Web Three JS are kind of like the two main used libraries and they're both really great and just work really great.
00:20:42.522 - 00:21:20.422, Speaker C: But I would feel like that the documentation on both of those could be more approachable for Web Two developers. If I go in and read that now after having experience, I still don't know everything, but I can at least find my way through it. But when I first looked at that stuff, I didn't even understand how to do anything at all. I could literally read all that doc and there's no kind of like, show me what to do with all that stuff. So I had to go watch videos like Austin's and stuff like that that would actually show me. Oh, okay, this is how you use it. I think we could use more polished and documentation with more end to end tutorials within or examples in there.
00:21:20.422 - 00:21:28.840, Speaker C: So not only showing the API interface, but also showing how you would actually use that because there's a lot of assumptions that you just don't understand.
00:21:29.770 - 00:21:59.758, Speaker B: This is a really good first step, though, in terms of if you're a Web Two developer and you're just getting in, go grab Ethers and learn about providers and signers and wallets. Just get them and understand them. Providers are like your connection. Signers are like your sign in the transaction, and wallets are like kind of your mnemonic where you kind of generate those private keys, learn those things. Build a simple script that just like, I don't know, it's a wallet and you send money to it. And when money lands there, it sends it on to something else. Build a simple script, no front end, nothing like that, just that does that.
00:21:59.758 - 00:22:11.670, Speaker B: And that's such a good entry point to kind of get the mental model of providers and signers and eventually you'll build a full scale app that uses those same things, but just that simple little script is a lot to get you through the door.
00:22:12.730 - 00:22:25.740, Speaker A: Absolutely. I was going to say Natter. I think it's a pretty good segue into maybe you talking about developer Dow and you kind of talked about all these things, would love to hear about sort of what sparked that and kind of what happens there.
00:22:26.910 - 00:22:29.210, Speaker B: Yeah, I mean, an army of developers.
00:22:30.350 - 00:23:14.838, Speaker C: There'S a bunch of cool Dows out there right now that are doing similar stuff, and I would love to touch on a handful of other ones as well. But with developer Dow, it was kind of like I had just started diving into Dows that month. I really just started to understand them. I joined Friends With Benefits and saw what was going on there and the excitement around some of that. And I had seen the communities that were building around NFTs and I realized, okay, there's a lot of overlap between NFTs and Communities and DAOs. There isn't a clear distinction between what each of these is. So Loop project dropped that week and I realized this is a very forkable contract because all it was was just SVG.
00:23:14.838 - 00:23:45.726, Speaker C: And I wasn't an expert smart contract developer, but I knew how to read a contract and how to kind of update it. So I was like, oh, this is a cool opportunity for me to deploy my first smart contract. So I forked loot. I updated the properties. It was just a bunch of arrays of properties. And instead of using the robe and the sword, I was using developer characteristics. I am a developer that lives in Austin, Texas, and I write Python and I'm wearing a black hoodie that would be the items in those arrays.
00:23:45.726 - 00:24:18.266, Speaker C: And I was like, okay, so what can I do with this contract? Oh, let's create a dao. There isn't a Dow that's focused for developers right now that I knew of. There was Friends with Benefits that had a developer's channel, but that channel was not active at all. So I thought it'd be cool just to have that. And I just launched the contract, tweeted it out, and kind of left it alone for about a month or two. And the community actually together formed around it, created the discord, created the token gating, created the forum, and all the mechanisms around governance. And I luckily just got pulled along for the ride.
00:24:18.266 - 00:25:00.380, Speaker C: And I'm still definitely a huge I'm a contributor, but I wouldn't consider myself one of the main people that's actually doing the work. The community is there doing the cool stuff. I feel fortunate enough to kind of come along for that ride. We haven't created a ton of we're not trying to be like I feel like there's too much stuff around investment and money and stuff in web3 and not enough around focused on developers. At least there could be more, I would say. I wouldn't say there's not enough, but I feel like there's, like this hyper financialization of everything. So we wanted to kind of be the opposite of that almost to the point where we didn't have enough money to do.
00:25:00.380 - 00:25:36.680, Speaker C: Maybe we should have charged money for our NFT, or maybe we should have done something with DeFi, but instead we're focused on donations and we've sold a portion of our governance token to Gitcoin, who really align really well with what we're doing. And those partnerships and sponsorships are kind of giving us that runway. And our main focus is on building public goods. Learned a lot, again, from Austin and all the people at Gitcoin, because they are literally like the examples that we're going by spending their time, money, and effort to create things that are free for everyone to use and that kind of help people in general in different ways.
00:25:37.610 - 00:26:08.100, Speaker A: That is absolutely incredible. Thank you for sharing that. I do want to sort of switch gears a little bit and come back to the question before on tooling, both of you kind of commented on just seems like we're actually in a pretty good state right now where what developer lets us do. Do you differentiate do you change that answer? If I were to say, is that same tooling sufficient for us going deeper into l two S, like, whether that's talking to different providers or services, what does that look like when you're not on main net?
00:26:09.270 - 00:26:10.900, Speaker B: That's what we should have told future.
00:26:11.350 - 00:26:12.740, Speaker A: Let's take it to that.
00:26:13.670 - 00:26:54.400, Speaker B: I wish future Austin would have that same. Like, whatever happens on l two, something neat is about to happen, right? We've got games where things that we weren't able to do, like crafting and all sorts of strange NFTs owning NFTs and mainstream ramps into l two and these mainstream experiences. Something is about to happen, and we are going to need some specific tools. Maybe it's going back to your DevOps skills will transition really well from web two to web3 because we're about to scale up and we. Really need some help handling all of this flow of users, right? Maybe that's part of it, but yeah, I think L2 will bring a whole new set of challenges and tools that need to go with that.
00:26:56.130 - 00:26:59.646, Speaker A: Anything to add Natter there on how you see tooling wise?
00:26:59.758 - 00:27:16.854, Speaker C: Yeah, I think that tooling has kind of been built around the most popular protocols and the most popular used products in Web Three right now. And we're starting to see new things that come out and there just isn't an equal set of tooling for that.
00:27:16.892 - 00:27:19.462, Speaker A: So, for instance, I would say when.
00:27:19.516 - 00:27:44.910, Speaker C: I started learning Solidity and EVM, hard Hat was there and it was amazing. But when I wanted to go learn Solana, there wasn't anything there. So I was like, oh, and then Anchor came around and it's a really great thing that kind of fills in that gap. I don't know what the answer to that is. Someone asked me if I want to build on a ZK roll up or something like that. I don't know what that looks like. It might look the same.
00:27:44.910 - 00:27:50.466, Speaker C: I haven't done enough research in that. So maybe Austin knows the answer to this. If I wanted to, I usually just.
00:27:50.488 - 00:27:54.194, Speaker B: Say I'm an EVM maximalist. That's usually what I say.
00:27:54.392 - 00:28:03.558, Speaker C: Yeah. If I wanted to build on something like StarkNet or something like that. Can you use hard hat? I don't think you can, but maybe there's something that cairo, I think it.
00:28:03.564 - 00:28:07.202, Speaker B: Has its own language, doesn't it? Yeah, like compute heavy.
00:28:07.266 - 00:29:03.082, Speaker A: I think everything at the end kind of converges to EVM compatibility or cross compatibility, but that's a fair bet to make. No, I mean, I think the other kind of piece here is that Austin, you already kind of covered is basically we're moving towards how Web Two works right now. From a tooling standpoint, at the end of the day, maybe a year from now, you end up with specializations. Like, I don't necessarily always need to know how back end works in existing engineering company if I am solely focused on front end because there is an abstraction, there is availability of hey, this is what the interface looks like and I will talk to it. And we're kind of in the place where right now everybody's doing everything, but it doesn't have to be the case. And largely I don't think it will either. The most common questions we get is like, yeah, I don't know how to write smart contracts, can I still participate these hackathons? And the answer is yes, because even if somebody writes a smart contract for interacting with something with DeFi NFTs, it's always to be a user interface that uses React and everything else.
00:29:03.082 - 00:29:49.510, Speaker A: And that is largely decoupled from what's happening on chain and that doesn't take away anywhere from the arguments of tooling or the roles or your background or your skills. And that's absolutely still going to be the case whether it's about layer twos or Joe knowledge, proofs and abstraction still helps at the end of the day. So one kind of final question I want to ask and we're ready to move on to our next talk is obviously security is a big issue in this space, especially when we're dealing with money. Any advice for newcomers to kind of consider as they think about deploying things to mainnet, whatever chain it may be and what should they keep in mind when thinking about smart contract security? Maybe, Austin, we can start.
00:29:49.660 - 00:30:16.158, Speaker B: Yeah, I'm the guy that says prototype everything and get everything out there and let it fail and keep going. So maybe I'm not the best person to push on security. You want to have audits and you want to do due diligence and you understand that it's not just this contract, it's a system of contracts that are doing all sorts of complex things, but also I'm the prototyper that throws stuff at the wall. So maybe Natter can talk more about writing good tests and test driven development and stuff like that.
00:30:16.244 - 00:30:18.146, Speaker A: Going to only testnets, yes.
00:30:18.328 - 00:30:19.060, Speaker B: Right?
00:30:19.510 - 00:30:19.826, Speaker A: Yeah.
00:30:19.848 - 00:31:34.790, Speaker C: I think the security implications of smart contracts that deal with value are orders of magnitude, like, more important to understand or to kind of have enough eyes on it and reviews and understanding of what you're doing versus maybe something like in web two where you can't make a mistake and then lose billions of dollars or something like that. Or even a dollar or $10 or anything like that. So therefore, you see even protocols and teams that have the best engineers in the world still getting more people to come look at their code by hiring these auditors and stuff. So I guess what I'm trying to say is, yes, it's extremely important and maybe the more people that can see your code, the better. So don't build in a silo. If you're going to be shipping something, put it out there, open source it, let people scrutinize it, take as much feedback as you possibly can, especially if there's going to be any. If you're asking someone to trust you with their money and they're going to be buying something from you through that contract or an NFT project or something, you want to just do everything you possibly can to make sure that you're being a good steward of that person's trust.
00:31:34.860 - 00:31:53.342, Speaker A: I guess that's a perfect note to end on and yes, preferably on test and prod. So, Austin, I want to thank you so much for your time today and also want to give a special shout out to Karate for being an amazing member on the chat and kind of context filling all the resources that we've talked about. So thanks for that and thanks again for your time.
00:31:53.476 - 00:31:54.334, Speaker C: Thanks everyone.
00:31:54.452 - 00:31:56.620, Speaker B: Thank you. See you next.
