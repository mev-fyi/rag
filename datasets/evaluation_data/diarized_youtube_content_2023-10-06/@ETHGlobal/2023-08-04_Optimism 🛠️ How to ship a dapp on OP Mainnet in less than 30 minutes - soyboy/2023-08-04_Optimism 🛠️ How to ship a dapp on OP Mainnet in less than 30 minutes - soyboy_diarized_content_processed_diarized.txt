00:00:07.290 - 00:00:19.280, Speaker A: Hello, everyone, and welcome to the SuperHack Optimism Workshop how to ship adapt on Op, Mainet in less than 30 minutes. Joining us today is Soyboy, who will be taking us through this session. And with that, I will pass over to Soy Boy to get the session started.
00:00:20.450 - 00:00:21.550, Speaker B: Sweet. Thank you.
00:00:21.620 - 00:00:24.480, Speaker C: I'm going to share my screen real quick and then we can get into it.
00:00:26.460 - 00:00:28.170, Speaker B: You all right?
00:00:29.820 - 00:01:00.156, Speaker C: Hello, everyone. Thank you for attending this workshop. In the next 30 minutes, I am going to show you how to ship adapt on Op mainnet using our Optimism Starter Kit. So just quick rundown what you should expect. I'm going to do a quick introduction and background on myself, a demo on how to use our hackathon Starter Kit and where you can get more support. And I'll try and get some questions in during the presentation, but most likely.
00:01:00.188 - 00:01:01.650, Speaker B: I'll take them at the end.
00:01:02.900 - 00:01:43.596, Speaker C: So, first off, I'm soyboy. I'm both excited and a little nervous to be presenting this workshop to you today. Not too long ago, I was on the other side of these workshops, and I couldn't be more excited to share that. A couple months ago, well, just under a couple months, I started as a developer support engineer at Op Labs. Kind of been in this space for over five years, just like, flying around, running nodes, doing hackathons, starting and abandoning side projects, until I stumbled upon Optimism. About two years ago, I was doing a little reading and saw a couple of Carl's presentations and I was very intrigued. So I started contributing to the collective.
00:01:43.596 - 00:02:16.488, Speaker C: But my red pill moment happened over a short span of time this year when I received retroactive public goods funding. And at the same time, my employer at the time just snooked the company of over 900 people because they were embezzling money. So obviously it wasn't a great situation. My son wasn't even six months old. My wife just left her job to take care of him, and my last paycheck bounced. But thankfully, I had a nice safety net that came from contributing to a future that I believe in. And this is kind of why I'm here today.
00:02:16.488 - 00:02:23.496, Speaker C: I have that bandwidth to apply at Op Labs, and this is how I'm going to show you how to deploy.
00:02:23.528 - 00:02:31.984, Speaker B: Adapt to Op mainnet in under 28 minutes. So let's get into it. Cool.
00:02:32.182 - 00:02:40.476, Speaker C: So first off, if you need testnet ether, optimism has a faucet.
00:02:40.668 - 00:02:43.730, Speaker B: Let me get this out of the way. I can share a QR code.
00:02:48.530 - 00:03:10.600, Speaker C: So Optimism just put out a super chain faucet. Other testnet coins are coming soon. You can get a little bit by connecting your GitHub account. Or if you have an optimist NFT, you can get one testnet ether per day. So you can go ahead and check that out. Today I'm going to be running through.
00:03:11.130 - 00:03:12.940, Speaker B: This Starter kit here.
00:03:13.870 - 00:03:41.064, Speaker C: Basically, this is a boilerplate for you all to get up and running during this hackathon, I'm going to open up my terminal. Are you guys getting background noise? I'm going to put in my AirPods.
00:03:41.112 - 00:03:43.390, Speaker B: Because it's kind of loud. One SEC.
00:03:46.000 - 00:03:49.970, Speaker C: Okay, I'm sorry about that. Got my terminal open.
00:03:51.220 - 00:03:52.370, Speaker B: Okay, cool.
00:03:59.180 - 00:04:48.152, Speaker C: And to start, we're going to make sure that we have Node installed, which I'm pretty sure we do. This one was tested on version 18, so I'm going to use version 18. And then you're going to need Foundry, which is like a smart contract development framework. You can download it simply by doing this curl command and then doing Foundry up, and that'll download it for you. So I already have it downloaded, so it should be fine, hopefully. And then the next step is to clone the repository so you can grab the URL here, but I have it already cloned, so I am going to.
00:04:48.206 - 00:04:52.964, Speaker B: Open that up and share my screen. Cool.
00:04:53.102 - 00:05:16.096, Speaker C: So before we get running, the first step you want to do is you're going to want to copy this env example file, and you're going to want to fill this out with API keys from the different services that we're using and the RPC URLs. This will help power the back end, and it'll get you up and running quickly. It is a requirement, but all this.
00:05:16.118 - 00:05:18.340, Speaker B: Stuff is free, so it shouldn't be a big deal.
00:05:18.490 - 00:05:24.212, Speaker C: You're going to copy it to your own file, a env file. I'm not going to open it up.
00:05:24.266 - 00:05:29.210, Speaker B: Because then I will share all my keys, and that's not ideal for me.
00:05:31.020 - 00:05:45.288, Speaker C: And then once you have your environment variable set up, the next thing to do is install your dependencies. So you get your Node modules. You got all your dependencies, and you're.
00:05:45.304 - 00:05:51.230, Speaker B: Ready to rock and roll. And then you can do NPM run dev.
00:05:52.400 - 00:05:56.032, Speaker C: And if that all went smoothly, you're going to be able to open up.
00:05:56.086 - 00:05:58.290, Speaker B: And see this screen here.
00:05:59.300 - 00:06:06.416, Speaker C: And then I can kind of talk about what's here. You can connect your wallet.
00:06:06.608 - 00:06:08.580, Speaker B: This is my testing wallet.
00:06:10.760 - 00:06:46.000, Speaker C: And what we have here is this is the front end. It's powered by the server thing, V. It's an extremely quick tool. We have the Rainbow Kit, which gives you a great connect wallet button that you just saw. It lets you switch between networks and see the account information here. It lets you kind of abstract away the wallet connect stuff so you can start building the interesting stuff. And then on the back end, which we'll walk through, is via Wagme, which powers and generates the react hooks for the DAP.
00:06:46.000 - 00:07:16.970, Speaker C: All this stuff is really cool. I wasn't digging into a lot of the developer tools, and they've gotten a lot better lately. So this DAP here is hooked up to our V zero of the ad testation station. It's a very simple, smart contract that allows you to make attestations about wallet addresses. Basically, it's just very straightforward reason rights. You can add a message, confirm the transaction wallet and then we can get going from there. So I'm going to switch to.
00:07:19.020 - 00:07:24.300, Speaker B: Actually I'm going to switch to Op Corle, this test network.
00:07:25.360 - 00:07:27.964, Speaker C: And I'm going to just show you a quick demo.
00:07:28.162 - 00:07:31.630, Speaker B: Hello, Super Hackers Test.
00:07:32.320 - 00:07:56.740, Speaker C: This should open up the wallet. You can confirm the transaction. It gives you a nice link to Etherstand. It indexes it ideally pretty quickly. Yeah, very fast. And then it updates the smart contracts with a new Attestation, Hello Super Hackers. And then the Wagme hook, it kind of waits in the background, grabs that information and it just displays it for your users.
00:07:56.740 - 00:08:02.376, Speaker C: So this is like the high level on the outside of the DAP. So we can go ahead and do.
00:08:02.398 - 00:08:04.488, Speaker B: A quick code walkthrough as well.
00:08:04.574 - 00:08:09.976, Speaker C: So I'm going to kind of migrate over here and I'll try and make.
00:08:09.998 - 00:08:14.110, Speaker B: This a little bit bigger for you. Maybe too big.
00:08:20.790 - 00:08:52.910, Speaker C: To start. I guess I'll start with the front end code. It's all in the source directory here. It's pretty straightforward react stuff. You got your root of your project in here, your components, which you're going to add in. This is the attestation component. What I was talking about with Wagme is in our scripts here we have a very nice when we run the dev script, we do run Wagme.
00:08:52.910 - 00:09:36.922, Speaker C: And this generates all of the smart contracts, abi information, all of the functions. And so you can use it kind of natively in your front end part. So it creates this generated file. And this has all the information that you're going to need to interact with the smart contract. I checked it out, it's pretty neat. So just walking through the simple component, what we have is you're going to grabbing the address from the connected wallet, just some state for setting the Attestation a key value pair. This is just how the version zero of this contract works.
00:09:36.922 - 00:10:07.300, Speaker C: You just write and read basically like JSON or a dictionary or whatever like that. And then this is the cool part right here with Wagme, it generates these hooks, so it prepares the write to the smart contract with your arguments. You feed it in there and when that's all set and ready to go, you're going to use the Attestation write, which is also generated by Wagme. And then this hook right here.
00:10:09.450 - 00:10:09.814, Speaker B: This.
00:10:09.852 - 00:10:45.390, Speaker C: One, it waits for the transactions. And then this is going to guide your user flow. So like on success, you can direct what happens next if it refreshes the page or maybe it shows something else to kind of guide this user journey. Yeah. So that's an overview of the front end stuff, getting into the actual smart contract code. This is the Foundry arena in contracts. Here in Source, you're going to see that test station station, like I said, V zero of this contract.
00:10:45.390 - 00:10:59.094, Speaker C: And it comes with a counter, a simple counter contract some tests for it and scripts. So these are the deploy scripts that will take your environment variables and then.
00:10:59.132 - 00:11:00.950, Speaker B: Deploy it onto the blockchain.
00:11:02.090 - 00:11:04.166, Speaker C: So I'm going to clear out all.
00:11:04.188 - 00:11:05.720, Speaker B: This mess.
00:11:08.900 - 00:11:10.588, Speaker C: And we're going to kind.
00:11:10.614 - 00:11:12.836, Speaker B: Of show you the next part, which.
00:11:12.858 - 00:11:13.860, Speaker C: Is kind of neat.
00:11:15.240 - 00:11:17.430, Speaker B: Not that I'll show you that later.
00:11:19.160 - 00:11:25.640, Speaker C: Okay, so we got through generating the APIs and react hooks, deploying the contracts.
00:11:25.980 - 00:11:27.450, Speaker B: So this is pretty cool.
00:11:29.260 - 00:11:43.512, Speaker C: So we killed that. We have a very nice voice script already set up and ready to go. It's here. It grabs your environment variables. It uses Foundry to compile your contracts.
00:11:43.656 - 00:11:45.820, Speaker B: Oh, this is an older version.
00:11:47.600 - 00:12:07.668, Speaker C: It uses the RPC URL to write this onto the smart contract. It uses your private key for your testing wallet to sign it and pay for gas. And then it uses Ether scan to verify. So if you wanted to deploy this.
00:12:07.754 - 00:12:14.280, Speaker B: Counter contract, all you have to do is do NPM on deploy.
00:12:16.380 - 00:12:20.516, Speaker C: And that command that I walked you through, it'll.
00:12:20.548 - 00:12:24.260, Speaker B: Start compiling the contracts and it'll deploy.
00:12:24.340 - 00:12:38.380, Speaker C: Onto the test network. So this is my address that I deployed from. This is the address that we're deploying to transaction hash and that it was verified. So if I go on to Ether scan.
00:12:40.340 - 00:12:41.090, Speaker B: Here.
00:12:43.620 - 00:12:54.432, Speaker C: You'Ll see it's deployed. You have all the contract information from its verification, and you're able to even interact with it directly through Ether scan.
00:12:54.496 - 00:12:59.190, Speaker B: Which is pretty cool. The next step.
00:13:01.720 - 00:13:28.740, Speaker C: Is how you can develop with the front end and the smart contracts together in a local environment. So what we're going to be doing here is we're going to be developing with Anvil, which is take a fork of an op chain and then it'll allow us to deploy to it and work locally. So I actually updated this, but I don't have the most updated version. So it looks like we're going to deploy Anvil.
00:13:28.920 - 00:13:35.120, Speaker B: But what we want here is Add test station. Station.
00:13:36.100 - 00:13:38.384, Speaker C: That's the contract, so we can set it up.
00:13:38.422 - 00:13:42.148, Speaker B: I didn't pull the latest version. Sorry about that.
00:13:42.314 - 00:14:24.076, Speaker C: So to get your local Anvil ORC running, you do NPM run Dev Boundary, and that'll spin up the front end on that server. And it'll also give you ten testing addresses. So these are the available accounts. They give you 10,000 Ether and the private keys. The wallet mnemonics. And right now, it's listening to the local blockchain for different events to happen. So if we want to deploy our smart contracts, we can do NPM run deploy Anvil.
00:14:24.076 - 00:14:51.800, Speaker C: And this will deploy the Attestation Station smart contract onto our local development blockchain. So this is the Anvil wallet that they generated for me. And you can see on our blockchain, our local blockchain, it was deployed there. So what's really neat, too, is that now we can connect our wallet.
00:14:53.260 - 00:14:58.910, Speaker B: Oh, no. Keep it logged out. Give me a SEC.
00:15:25.230 - 00:16:10.930, Speaker C: Sorry about that. We can connect to the Foundry local blockchain. So as you can see, it updated locally as we connected. And what's really cool is that we can take these addresses here and we can just import them directly into our testing wallet import account there. You take the private key from anvil import and now you're testnet rich here. So if you want to switch, you can go ahead and connect this new wallet here. And now we have the front end connected to the local blockchain that we're running.
00:16:10.930 - 00:16:18.780, Speaker C: And if we make any interactions with the front end, it'll process it through this forked blockchain.
00:16:18.860 - 00:16:24.230, Speaker B: So, hello super hackers. I'm going to test.
00:16:25.560 - 00:16:47.390, Speaker C: We're going to use our Foundry wallet here to confirm and it's all very quick. He goes here. Hello super hackers. And the information is Prudent process there. I'm going to take a pause here and take a look at the questions that are coming through.
00:16:48.720 - 00:16:49.790, Speaker B: Let's see.
00:16:50.480 - 00:16:52.748, Speaker C: Does this deploy to base as well?
00:16:52.834 - 00:16:56.940, Speaker B: Can you show does that say ether scan interaction?
00:16:58.880 - 00:17:13.476, Speaker C: Yes to the first question. I don't know about the second one. If you want to deploy to a different chain, you're going to go ahead and go to your Wagme configuration here in the root of your directory and.
00:17:13.498 - 00:17:16.516, Speaker B: You'Re going to add different chains here, right?
00:17:16.698 - 00:17:26.536, Speaker C: So if we are adding base, you're going to want to add base and the address there. And then you'll want to take a.
00:17:26.558 - 00:17:29.976, Speaker B: Look at this deploy script and make.
00:17:29.998 - 00:17:38.344, Speaker C: Sure that you're using the right RPC URL. So you're going to want to talk to the base RPC and then you want to make sure that you have.
00:17:38.382 - 00:17:44.510, Speaker B: Testnet ether in base wallet as well. So that should work.
00:17:47.040 - 00:17:49.236, Speaker C: What's the main difference between the starter.
00:17:49.288 - 00:17:51.200, Speaker B: Kit and Scaffold ETH?
00:17:51.620 - 00:17:58.050, Speaker C: I think that it's just like the tech stack that we're using.
00:17:59.860 - 00:18:02.230, Speaker B: What is supposed to shitload at the top here?
00:18:03.640 - 00:18:23.624, Speaker C: This one is with optimism wagme Foundry Rainbow Kit and V. And it's the most modern and robust web3 full stack development stack. I don't know what the stack is for Scaffold, but I'm assuming that it's got to be somewhat different otherwise we.
00:18:23.662 - 00:18:27.628, Speaker B: Probably wouldn't have made it.
00:18:27.794 - 00:19:00.592, Speaker C: Okay, so that answers those two questions kind of getting back into this. So we now have showed you how to deploy onto a local testnet. We have Foundry up and running. We can use the command line to do deploys or interact with the contract. We also have the front end running and going so you can iterate on your projects quickly. So you can be making changes on your front end without having to configure the back end. So that's kind of like the takeaway.
00:19:00.656 - 00:19:02.372, Speaker B: Ideally we'd be able to use all.
00:19:02.426 - 00:19:04.596, Speaker C: This together in conjunction to make a.
00:19:04.618 - 00:19:06.340, Speaker B: Cool DAP for the hackathon.
00:19:08.360 - 00:19:22.572, Speaker C: And I realized the name of this is a bit of a misnomer and I don't know if I'm going to have to shave my head for this reason, but I'm not actually going to deploy onto main net because I don't have a wallet with Ether in it on this computer.
00:19:22.706 - 00:19:27.560, Speaker B: So kind of a bummer shave.
00:19:27.640 - 00:19:32.236, Speaker C: Yeah. All right. I'm pretty close, honestly. I was talking to the ETH Global.
00:19:32.268 - 00:19:35.410, Speaker B: Guys before this, like, the buzz cut. No big deal.
00:19:37.140 - 00:19:39.120, Speaker C: But yeah, so that's the quick run through.
00:19:39.190 - 00:19:40.320, Speaker B: Okay, sweet.
00:19:41.960 - 00:19:51.764, Speaker C: I guess I can get through the rest of this. I ran through all of that. I guess I can go through and.
00:19:51.802 - 00:19:55.030, Speaker B: Do some more Shills really quick.
00:19:55.720 - 00:20:30.124, Speaker C: So this was actually a demonstration with our Attestation version station version zero. What we're trying to do is we're trying to get more experiments with identities on decentralized identity. So if you're interested in that, we have some information on our docs that you can scroll through. Like, if you're looking for ideas for your hackathon, these are available. Lewis says, I'm not familiar with Wagme.
00:20:30.172 - 00:20:34.260, Speaker B: But does it abstract away direct calls to Ethersjs?
00:20:36.120 - 00:20:54.170, Speaker C: Wagme is responsible for making or generating the hooks, so it does do some of that extracting away. Like, you don't have to deal with getting the abi. So, I guess. Yes. The answer to that is yes. And then in this project specifically, we actually don't use Ethers. We use.
00:20:57.260 - 00:20:59.240, Speaker B: I've never said this word out loud.
00:21:00.300 - 00:21:14.800, Speaker C: Viem. It's like a newer version. And on their documentation. I was checking it out. If you're used to Ethers version five, there is a translation guide there that you can look on their documentation.
00:21:15.620 - 00:21:16.370, Speaker B: Sure.
00:21:17.620 - 00:22:00.370, Speaker C: Back to my shill. We just launched our Attestation Station version one in conjunction with EAS, who is another partner of this hackathon. So that's pretty neat. If you're looking for something to experiment with, I think that's a good place to check it out. And if you're still looking for new ideas, we have this great repository called Ecosystem contributors contributions. Excuse me. And there's a lot of different projects and ideas that have been put out here, so if you're looking for a DAP, you can check it out.
00:22:00.370 - 00:22:08.370, Speaker C: All of the ideas here are as issues, so you can scroll through and try and get some inspiration that way.
00:22:09.620 - 00:22:11.452, Speaker B: But yes, that's it.
00:22:11.526 - 00:22:14.390, Speaker C: And then kind of reeling it back in.
00:22:17.000 - 00:22:22.276, Speaker B: If you're still working with promises Wagme will make you use, try and catch. Okay.
00:22:22.458 - 00:22:25.400, Speaker C: Sorry. Reading the questions out loud?
00:22:26.300 - 00:22:28.010, Speaker B: I think that's correct. Yeah.
00:22:28.460 - 00:22:50.284, Speaker C: If you need additional support throughout the hackathon, you can find me in the discord. I'm in the Partner optimism channel. So I'll be doing my best to answer questions there. And please do your best to help each other out in there. And then I kind of did run.
00:22:50.322 - 00:22:53.324, Speaker B: Through this really quickly. I think I was a little extra nervous.
00:22:53.372 - 00:23:00.290, Speaker C: But if you have any more questions, please drop them in the chat and we can kind of talk about them right now.
00:23:09.070 - 00:23:14.430, Speaker A: Yeah, I guess you could have made that head shaving bet, and it would have worked out.
00:23:14.580 - 00:23:18.720, Speaker C: Yeah, I guess so. I didn't deploy, but I showed you how to do it, so we'll see.
00:23:20.130 - 00:23:25.860, Speaker A: Yeah. If a man has any questions, feel free to type them in the chat or take yourself off mute. We still have some time.
00:23:31.690 - 00:23:35.958, Speaker B: Looks like we still have some AIS in the chat, people's.
00:23:35.974 - 00:23:36.730, Speaker A: Otters.
00:23:40.830 - 00:23:51.840, Speaker B: But yeah. Can you share the Optimus Ideas page? Yes, I can. Here we go.
00:23:58.570 - 00:23:59.800, Speaker C: Got a quick question.
00:24:00.170 - 00:24:01.240, Speaker B: What's up?
00:24:02.890 - 00:24:32.080, Speaker C: I'm, like, really new to this stuff. So what would you say, because the focus is on Op stack, that a lot of the submissions should be in this framework, or really? As long as you have a smart contract and some front end code to make it adapt. Is that a viable submission? That's definitely a viable submission. This is ideally to help you just get up off the ground, up and running, because it's just ready to go.
00:24:32.690 - 00:24:33.402, Speaker B: Right.
00:24:33.556 - 00:24:40.306, Speaker C: So if you start running this project, you can just make Tweaks into it, but if you have a stack that.
00:24:40.328 - 00:24:42.900, Speaker B: You'Re more comfortable with, you should definitely use that.
00:24:45.270 - 00:24:57.480, Speaker C: Awesome. Okay, cool. I'm definitely going to look into that. Yeah, and then like I said, I'll try and be in discord too. So if you have any follow up questions, I can try and help.
00:25:10.640 - 00:25:11.244, Speaker B: Awesome.
00:25:11.362 - 00:25:39.658, Speaker A: Anybody else have any other questions before we close the session? If not, thank you, Soy Boy, for the great workshop. Under 30 minutes. So fantastic. And thank you all people, everybody, for attending the second workshop for the day. We have one more and then the team formations after this. After that. But yeah, if there are no more questions, we'll go ahead and close it up early.
00:25:39.658 - 00:25:41.802, Speaker A: So cheers. Thanks again. Soy boy.
00:25:41.936 - 00:25:45.430, Speaker C: Yeah, for sure. Thank you. Bye.
