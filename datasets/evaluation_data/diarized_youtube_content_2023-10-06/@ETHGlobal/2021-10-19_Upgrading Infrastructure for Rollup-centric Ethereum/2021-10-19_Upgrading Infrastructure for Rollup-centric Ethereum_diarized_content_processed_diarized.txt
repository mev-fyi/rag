00:00:06.250 - 00:00:19.280, Speaker A: All right, next up, as you've already guessed, is our speaker, Vitalik. Vital is going to be talking about upgrading infrastructure for role of centric ethereum. So whenever you're ready, V, feel free to kick it.
00:00:24.370 - 00:00:32.806, Speaker B: I guess, share the screen and then I'll use the magic trick that you taught me to only share a portion of the screen and then okay, there we go. Do you see it? Okay.
00:00:32.988 - 00:00:33.720, Speaker A: Yes.
00:00:34.090 - 00:01:50.634, Speaker B: Okay, perfect. Okay, so great. So today what I will talk about is basically thinking about this concept of a roll up centric ethereum something which was a vision one year ago and is, I think, on the cusp of becoming a reality or even is beginning to become a reality today and kind of think through some of the kind of side issues, various pieces of infrastructure that we sometimes don't think about in order to make a roll up, centric, ethereum world. Something that actually is a pleasant environment for people to live in. So, just to kind of recap a bit, the concept of roll up centric ethereum started to be introduced around the end of last year, I guess this post literally from October 2020. So twelve months ago. And this came from an observation that basically showed that if you look at our current roadmap, any way that we could realistically do the roadmap, we have a proof of stake first, then data sharding, and then only after that, possibly other kinds of sharding.
00:01:50.634 - 00:03:01.106, Speaker B: And so in the Ethereum base layer roadmap, there's only room for relatively small amounts of scalability, like with burgl trees, maybe two x or three x, but can't really go far beyond that. Right? And the problem is that we need much more scalability. Like even today we need at least a ten x. And in the long term we need 100 to 1000 x. So the only technology that is available, and that was actually making a huge amount of progress even back then, is roll ups for the layer two scaling solution. So this was a kind of brainstorm of well, given that roll ups are ethereum's best hope, what would a roadmap that's designed around that fact actually look like? And the answer basically is, well, we have a lot of technology that we can already do to make roll ups work and to make roll ups work better. So we have obviously roll ups themselves, a lot of work being done on fraud proving, a lot of work now being done on the ZKE EVM to make EVM capable ZK roll ups possible, some work being done on wallets.
00:03:01.106 - 00:03:39.886, Speaker B: The projects themselves have been making huge progress over the last year. And sharding itself, right? The first step of sharding is a data sharding. And data sharding by itself is enough to increase the amount of data space available to these roll ups by a factor of close to 100. So there's basically a lot of things are already happening to make roll up centric ethereum actually be a reality. And today roll ups are sort of kind of here, right? So there is optimism. You can do things on optimism, there is arbitram, you can do things on Arbitrum. There's woobring and ZKsync.
00:03:39.886 - 00:04:17.306, Speaker B: You can make payments on woobring and ZKsync. There's polygon, which is not a roll up, it's a trusted sidechain at present. But they bought Hermes and they seem to be on a track that will get them to being a SDK roll up at some point in the future. Roll ups are kind of underway and you can use some of them, but it's not quite there yet. Right. The scalability of a lot of them is far from optimal. So, like, for example, when I wrote my blog post on roll ups, one of the things that I talked about was how to get the really big scalability gains.
00:04:17.306 - 00:04:59.734, Speaker B: You have to do a bunch of compression work and get the transaction size down to 16 bytes. And optimism and Arbitrum yet have not done this, but they're on their way to doing it. But until then, wild transactions still take more than 100 bytes. Fees are not quite as low as they can be. Blueberry and DK sync are at that level already, right? So their fees are sometimes like 20, sometimes 40 times lower than Ethereum itself. And once these roll ups do add proper compression and they do add better signature schemes, then they'll be able to get down to these oil levels as well. So scalability is still a work in progress.
00:04:59.734 - 00:06:30.410, Speaker B: EVM roll ups still have training wheels, so they still have centralized backdoors, just because the fraud provers are either not quite finished or they're still in beta and people are not quite comfortable fully entrusting things to them yet. It's sort of on the way. But we're getting there, right? Like the roll up centric ethereum is not just a division now, it's something where there's a very clear path to it and people are already starting to use projects that are either roll ups or that are kind of well on their way to becoming roll ups. So far, roll up centric ethereum is, I would say, just still a success, obviously a work in progress, but everything is a work in progress, so even the merge is a work in progress. But we've had a successful test that two weeks ago, so it's happening. But there are still things that are missing to make roll up centric Ethereum actually easy to use, right? You can talk about roll ups being available in theory, and then you can talk about, well, roll up centric ethereum actually being an A blockchain environment that you as a user would want to live in. So what is the gap between those two things? First, kind of motivating question, right? Why can't I use a loop ring to pay for coffee? Right? Blockchains.
00:06:30.410 - 00:07:27.334, Speaker B: Our big application of them is cryptocurrencies, and we want cryptocurrencies to actually be useful as currencies, right? And what's the point of a currency if you can't use it to also pay for the small things? Right? So obviously you can't use the base layer to pay for coffee because the base layer is expensive and the base layer is meant for big and important things like layer two commitments. But we have layer twos and we have Loopering, and loop ring is already quite efficient and loopering does payments. So why can't you use a loop ring to pay for coffee today? Right? I think there's a lot of reasons for this. One is just that there hasn't really been a serious effort toward making it happen. But I think another big part of the answer is that loop ring today is kind of a bit of an island, right? If you're within loop ring, you're within Loop ring. If you're not within loop ring, then it's kind of hard to move funds to being within loop ring. Right? You have to do a layer one transaction.
00:07:27.334 - 00:08:12.458, Speaker B: Layer one transactions are expensive. Then on top of that, you have to wait. So the UX of getting into Loop ring if you're outside of loop ring is not very good. And if you're inside of loop ring, there's not that much that you can do inside of Loop ring, right? Like you can exchange, you can trade, you can have tokens, there might be an NFT feature, but you can't have your fancy DeFi stuff. Like you can't have fancy NFT auctions, you can't make a CDP and then borrow some coins from that CDP and then stick those coins into another magic DeFi thing. There's a lot of fun stuff that you can do in a full EVM environment that you just cannot do in Loopring because loop ring doesn't yet support that functionality. Right? So there's basically two ways of solving this.
00:08:12.458 - 00:09:05.020, Speaker B: One way of solving this is for Loop ring itself to turn into a ZKE EPM roll up and that's technology which is in progress. But another possible solution is to make it easy to get into Loop ring if you're not yet in loop ring. So cross roll up. Bridges right, this is the sort of thing that I've been thinking about for a while that other people have been thinking about for a while. So here on the left I have this post on Ether research where I give some ideas for how you could make NFT wrappers, where the NFT could be issued in one roll up and then the NFT could be moved to another roll up and you can have NFTs jump between roll ups. And you don't need main chain transactions for this. There's a project called Hop which is trying to make a trustless or scalable bridge to go between one roll up and another roll up.
00:09:05.020 - 00:10:06.574, Speaker B: I had another post on Ether research that tries to do a roll up to roll up bridge that only requires one side of the bridge to actually be EVM capable. So you'd be able to have a decentralized bridge between say, optimism and loop ring. So crossroad bridges are important, and I think we want crossroad bridges to be trustless. So to have trustless, safety and trustless liveness, to be infrastructure that we can count on to just exist. But this is still something that is in progress, right? So the more work can happen on crossroad bridges, the more we can make it very easy to move between any one of these ethereum layer two domains to any other ethereum layer two domain, the better. But this is something in which there has been some work, right? There are already some limited cases where you can hop from one roll up to another, but it's still something that needs to be worked on a bit more. So cross roll bridges is one problem that needs some work, other problems.
00:10:06.574 - 00:10:40.278, Speaker B: So let's take ENS. ENS probably the single most popular or most successful non financial Ethereum application. And it's a use case where it actually makes sense to use a blockchain for it. Lots of people have ETH names. I have a name, Vitalix ETH. Lots of other people listening to this probably have a name status, the Ethereum chat application status. Users have used ETH names as usernames inside of status.
00:10:40.278 - 00:11:57.566, Speaker B: Blogs can have ETH names. So if you go to Vitalik E and try to access it as a website, then you can find a copy of my blog. So lots of different applications of ENS and ENS seems to be doing great, right? But there's a problem, which is that it takes more than $10 to update an ENS record, right? So if you want to buy an ENS name, if you want to update a record, if you want to do anything through ENS, then you need to pay more than $10, right? So for example, if I want to update the ENS record for Vitalik East as a blog to update the IPFS content hash, then that's something that I have to pay more than $10. And so it basically costs me like I forget some number of dollars, somewhere between ten and 30. I forget every time I want to update my blog if I want to keep it updated with ENS. So can layer two fix this, right? And the answer is it should. Layer two should be able to fix this and we should be able to move ENS over to layer two in order to make it so that these record updates, instead of costing $10, they can go down to costing $2 today, $0.25
00:11:57.566 - 00:12:36.398, Speaker B: tomorrow, and two cent two years from now once shorting is stabilized. But we need to have a standard for how to resolve ENS domains stored inside of layer twos. So there's two ways of doing this. One way of doing this is to say we're just going to socially coordinate ENS as a whole. Moving over to one particular roll up, right? So we might say, oh, ENS, we're going to choose Arbitrum, right? And ENS is going to live inside of arbitram. And ENS will just work the same way it works today. But instead of talking to the Ethereum blockchain, they'll talk to the Arbitrum roll up.
00:12:36.398 - 00:13:25.850, Speaker B: So I think this is not a great solution. And the reason why it's not a great solution is that first of all, it creates a long term dependency on one specific roll up. And so far we're not yet sure which particular roll ups will prosper which particular roll ups Google actually wants to use. And second, people might have other reasons why they want to live inside of some other roll up. And so it would be nice if EVM can live where they live, right? People are not necessarily going to have an account on every roll up. And if one particular person just likes optimism and they want to live inside optimism, then they should be able to have their ENS domain inside of optimism. So what would be nice is to have some kind of cross roll up standard, right? So ENS should stay rooted in the Ethereum chain.
00:13:25.850 - 00:15:04.394, Speaker B: But there should be a standard where if from the point of view of the Ethereum chain, you move an ENS domain over to a roll up contract, then you would be able to manipulate and do things to that ENS domain inside of the roll up. So good news is that there's this protocol called Durin ERC 3668 Secure Off Chain Data Retrieval, which is trying to serve a bunch of use cases, but where this is one of the use cases, right? So basically the idea of Durin is that you would be able to set your ENS record to be set to an address where that address defines an off chain record keeping system. And that off chain record keeping system, it would basically have a smart contract where it would point you to a place where someone trying to get the data would be able to grab the basically state inside of either the optimism role or the Arbitrum role or whatever role you choose. They'd be able to grab the state that shows what is the current state of that particular record. And then the contract would also have a Merkel prover. And so you would be able to fetch a Merkel proof and verify the merkel proof and you would basically still be able to actually get what the current state of that record is automatically, right? So basically, from a client's point of view, the client's point of view would be like step one, it would think that you have an ENS record on Ethereum and so it would call the ENS contract. It would try to access your record on the Ethereum base layer.
00:15:04.394 - 00:15:42.650, Speaker B: Then it would realize that your record is stored in this particular contract, which is an off chain data retrieval contract. It would call it, the contract would return a off chain data lookup error. Then that error would contain instructions about where you would go and get the merkel proof. Like it could be a list of URLs and it could be a huge number of URLs, so we have a lot of redundancy. And then you as a user would just try pinging all these locations and you would ask for litecoin proof of the state associated with that record. You would get that light client proof. So that's step two.
00:15:42.650 - 00:17:35.006, Speaker B: And then step three is that you would locally do an ETH call and you would call a proof verifying function on that same contract and that proof verifying contract would verify the proof and it would also tell you basically what is the state that just got verified. So that would actually tell you that, hey, that function was actually supposed to return some particular value. Now, in order to update the state or this internal state, you would not have to send Ethereum transactions, right, because these are all state updates that would happen inside of a roll up. And the only things that would happen on Chain is that merkel roots of the roll up state would continuously be getting updated on Chain, right? So on Chain, you will just be merkel roots that get updated and then all of the actual operations that happen inside of the roll up would be happening off chain. So this is a nice solution, right, because it allows you to basically extend your kind of ENS infrastructure so that it automatically can go and fetch the state of your ENS records inside of a roll up. So if I have vitalik ETH, I could move vitalik ETH into a roll up and then if I want to make any record updates, I could do those inside of a roll up. Or potentially, if he wants to handle the use case of people registering new subdomains, then someone could make an entire subdomain move it inside of a roll up and then all domains that are subdomains of that domain could then be registered and everything could be done with them inside of a roll up, right? So for someone like status, if they want to make it possible for people to register new names at the cost of a few cents instead of $10, then they could register a subdomain and move that subdomain to inside of a roll up.
00:17:35.006 - 00:18:32.190, Speaker B: Or they could even have different subdomains inside of different roll ups and users would be able to register a U domain and that U domain would be a subdomain of that domain, but they would be able to do the entire process purely inside of a roll up. And the infrastructure that actually gets ENS record data, client side would just be able to do all of that. It will be able to fetch the data from the right roll up automatically, right? So the client side software would not even need to update to be able to handle new roll ups. So new roll ups would just be able to add themselves into the system automatically. Very versatile. So it can work with optimistic rollups, it can work with ZK roll ups, it can even work with polygon for now. So that's definitely something that I am very excited about.
00:18:32.190 - 00:20:33.638, Speaker B: And hopefully with this sort of thing we can finally have an ENS world where ENS domains are cheap to register again light clients. So this is a third piece of infrastructure that we're making a lot of progress on today, right? So in the world of just Ethereum after the altar fork we're going to have this concept of sync committees. A sync committee is basically this committee gets committed to inside of the beacon chain block headers and then that committee is going to basically sign messages attesting to a block header and then that block header can be a signature can be verified against that block header and against the sync committee. And so this provides this very cheap algorithm where a client will be able to keep up with the beacon chain at a very low cost, right, at a minimum cost of something like 40 day plus maybe 500 to 1000 bytes for every single header that they want to verify plus merkel proofs. So with Altair you're going to have these as a sync committee inside the beacon chain and with the merge the beacon chain and the execution chain are going to merge. And so you're finally going to have a path where you're going to have these sync committees that will actually verify Ethereum blocks and we're going to be able to have trustless like clients, right? So today wallets like Infuria and basically wallets like MetaMask and every wallet that exists today either talks to infuria or they talk to some centralized system. In this light client world, instead of talking to a single server they could talk to end servers, right? So they could have collection of end servers that they talk to for redundancy they could receive and they could validate merkle proofs from each one and whichever one is online they could get proofs from it and they'd be able to validate merkel proofs locally, right? So you would not have to trust the servers to be honest.
00:20:33.638 - 00:22:32.074, Speaker B: And because you would have n of them instead of one, you would not have to trust them for Liveness, right? For Liveness you would just have a one event trust assumption. So there's a big opportunity here with the merge and with the likeliance to finally move away from this kind of centralized inferior world and move toward a world where we actually do everything much more trustlessly with proof verification. But there's a question, right, which is does a move to layer two protocols risk reversing these gains? This is a like client of Ethereum but now if we're going to be talking about a world where you don't just have Ethereum, but you also have people using optimism, people using Arbitrum, people using polygon, people using loop ring. And then next year people are going to create three more roll ups. How are my clients going to be able to handle that world, right? And the risk is that if we don't provide a good way for them to handle that world, then what's going to happen is that infura is going to be the one that creates nodes for all of these systems and they're just going to end up trusting Infuria. So how can we move away from centralized trust Dystopia and make sure that these gains and decentralization actually apply not just to the base ethereum chain, but also apply to layer twos? So there's a good news, right? The good news is basically that we can use ideas very similar to Durin to create a generic layer two like client system. Basically the idea is that systems like Optimism and Arbitrum and with these layer twos they could return a list of URLs or they could basically return some kind of mechanism by which the clients can get proofs for a particular piece of state that they want to access and they can provide a function for verifying proofs, right? So the function could be a merkel proof verifier, could be a polynomial commitment verifier, it could be whatever.
00:22:32.074 - 00:24:07.962, Speaker B: And clients, they would first poke the layer two contract. The layer two contract would provide a list of locations where they can try to get proofs. It doesn't have to be like the URL standard is very extensible, right? So eventually this could be an address of a peer to peer network as well, right? So they would provide a list of just kind of ways of getting proofs. The clients would get proofs, the L two contracts would provide a function for verifying proofs and then clients would verify these proofs automatically. And so any software which is a light client of Ethereum would then automatically be a light client of every L two that supports this standard, right? So if you have any light client which supports Ethereum, then it would also be a light client of all of these L two protocols. Now this is amazing, right? And it's amazing because basically we'd be able to keep these really nice trustless properties not just for Ethereum the way that it works today, but also for this kind of allier two expanded universe of Ethereum of the future that's going to have much higher scalability, much lower fees and greater decentralization compared to today. So those are like three of the examples of very big and important situations where we need other infrastructure in order to make layer two Ethereum a world which is as usable and as decentralized as we want it to be.
00:24:07.962 - 00:25:01.740, Speaker B: There's also plenty of other examples today, right? So Wallets needs to be able to jump between layer two sufficiently. We need to make sure that security for L two S works well. We need to make sure that exchanges on all of these systems work efficiently. We need to just figure out every individual D Five platform needs to figure out is it going to live inside of a single L two, is it going to cross L twoify itself? So there's a lot of these pieces that need to be worked on. But the good news is that in general, layer two centric ethereum is not just a vision. Layer two centric ethereum is a reality, which we are in the process of building today. Still a lot of rough edges, but these rough edges are continually being worked on, continually being improved as we speak.
00:25:01.740 - 00:25:45.558, Speaker B: A lot of really impressive work happening on ZKE EVMs. Both the Hermes team and Barry's team doing a lot of good work. A lot of amazing work happening on off broad groups for optimistic roll ups. I saw both optimism and arbitram are doing some really amazing stuff. There's optimism, and then there's George Haught and all of his amazing work on Canon and basically, literally compiling GEF into an environment to where you can then compile it into a true bit like system. Then there's Arbitrum, which is doing, I think, recently had a blog post where they're taking a similar path. So a lot of really amazing work happening on layer twos.
00:25:45.558 - 00:26:35.674, Speaker B: Compression is something that I personally have kind of been pushing really hard. And I expect this is one of the things that's going to start happening pretty soon. So I expect we're going to just see continual decreases in transaction fees on optimism and Arbitrum. But we have to make these roll ups not just work well as individual roll ups, but we have to make layer two ethereum as a system easy to use, right? It's not just a matter of scaling up from Ethereum being a city to Ethereum being a country. We also need high speed trains between the cities, right? And we need high speed rail to go from one city to another city without having to pass everyone pass through downtown. So at the same time, though, these are things that we actually can do. The tools are there.
00:26:35.674 - 00:27:12.120, Speaker B: We can build these things. There's a lot of opportunity for building these things. There's an optimism retroactive public goods funding gadget, which may well retroactively fund you if you help to build these things. So there's a lot of opportunity, but there's also a lot of work to be done, right? I hope that people listening to this and I hope that anyone can be part of the solution and help kind of actually build out this world so that we can actually have this amazing layer two ethereum of the future. Thank you.
00:27:14.250 - 00:27:18.490, Speaker A: Thanks, Vitalik. That was awesome. Got a few things to dig into.
00:27:18.640 - 00:27:21.260, Speaker B: We have time, so.
00:27:23.310 - 00:27:45.962, Speaker A: We can too many things. But you just talked about this interesting project jihop is doing with the optimism? Go to Met. Can you just walk into tell us more about what that is, what's happening and how does that work and sort of let's kind of get some little bit of overview on that and then what do you think your opinion is?
00:27:46.036 - 00:28:32.298, Speaker B: Sure. Yeah. So Canon is really fun, right? It's basically this EVM fraud prover. And the way that it works is that instead of creating a new EVM implementation and then worrying about whether or not it's compatible with the existing ones, basically what it does is it takes an existing Ethereum client. So in this case, GEF, and it compiles into or it compiles basically a version of GEF that is I guess you can think of it as a stateless client and then it compiles that. So it takes a block and it takes proofs and it verifies that it's correct. It then compiles that into this architecture called MIPS, which is basically a very simple virtual machine.
00:28:32.298 - 00:29:14.734, Speaker B: And then separately there is a project which is basically building a true bid for that virtual machine. Right? So basically a kind of interactive fraud prover. So it'll take like a billion computational steps of this virtual machine to actually run. But then you would have this game where if someone challenges the results, they have to provide 100 intermediate values and then the original creator will then decide which of those intermediate values they disagree with. And then the challenger has to provide 100 intermediate values beside those intermediate values. And you kind of start narrowing down where the actual disagreement is. And then finally you just execute one step of nips on chain and we figure out whether the challenger or the original prover is correct.
00:29:14.734 - 00:29:59.610, Speaker B: So, same technology as TrueBit, right, except you just apply this directly to this kind of EVM Verifier that you basically took by just directly compiling an Ethereum client into it. This mechanism is really nice because it's also very general, right? So it's very easy to update. So if Ethereum has a hard fork, very easy to update. There's no separate implementation that needs to be updated. You just update existing implementations. You could even extend it to do things that are fancier. So one idea that you could have, if you want to be clever and you want to be really robust against software bugs is you could do the same thing for GEF and Nethermind and Beso.
00:29:59.610 - 00:30:29.720, Speaker B: And you have three fraud proofers and then you have a separate fraud proofing process where if someone proves that a particular block is valid under one client but not valid under another client, then you raise an alarm. And then for what happens to that roll up, you can delegate it to governance, but then you raise an alarm and potentially that's something you could even create an automated bounty for. Right? So there's a lot of really fun things that you could do there.
00:30:30.410 - 00:30:48.060, Speaker A: I was going to. Say maybe just to get a little bit clarity on one of those things. So because of this providstal arbitrary computation model, do you think this is an extension to roll up in this case where you can now do more with roll ups that we couldn't do before, or is this more of an adjacent thing?
00:30:48.590 - 00:31:04.430, Speaker B: I think it's like allowing us to do what we've known was possible all along. There's no one who ever, I think, ever doubted that you can make an EVM roll up. I think it's just like a whole bunch of details. Right. And this is just a way of making those details happen much more quickly and easily.
00:31:05.730 - 00:31:06.640, Speaker A: Got you.
00:31:07.090 - 00:31:21.398, Speaker B: Yeah, because all you have to do is you have to just create a true bit for a very simple virtual machine and then the rest is just compiling existing software to it, which is something that you have tool chains for as well. Interesting.
00:31:21.484 - 00:31:46.382, Speaker A: Okay, no, that makes sense. We're going to be slightly off topic on this one, but I know this whole thing was focused about roll up centric world, but maybe it'll be good to contrast this with state channels. What do you kind of think about that? I can't go into specific, but let's say there's any habitable thoughts on that when I just had that question. And I have two specific questions around state channels that we can dig into.
00:31:46.516 - 00:32:10.498, Speaker B: Right. I think what we've learned over the last few years is that state channels are a very specialized technology. They're amazingly good at a particular set of things. But users don't just want to do a particular set of things. Users just want dumb EVMs. So I think there is this really big and important central place for dumb EVMs. But at the same time, state channels have really important roles.
00:32:10.498 - 00:33:01.762, Speaker B: And I don't think it's state channels versus EVM roll ups. I think it's state channels and EVM roll ups. I think state channels can form a big part of creating efficient bridges and decentralized exchanges between different roll ups. State channels can still be useful for kind of like micro payments and kind of multi payments to individual parties. Roll up centric ethereum and sharded ethereum and all of these four scalable ethereums also imply moving toward a world where no single node is going to have all of the data to figure out what's going on locally. And so nodes are going to have to talk to other nodes. And I talked today about how when a node talks to another node, when it receives responses, how it can use merkel proofs to verify those responses, but we haven't talked about yet is how those nodes get compensated.
00:33:01.762 - 00:33:29.418, Speaker B: Right. And you could consider a client node having a long running relationship with a provider node, and that long running relationship could be paid for with estate channels. So that's just a very simple way of paying for requests. I pay you for a bit and then you send me an answer. I pay you a bit and you send me an answer. And so the amount by which either party can cheat the other is extremely low. So that's another example of a use case for stage channels.
00:33:29.418 - 00:33:40.530, Speaker B: So I think between clients and data provision and cross roll up bridging, there's lots of stuff for state channels to do within the roll up course that makes sense.
00:33:40.600 - 00:34:17.310, Speaker A: And I think one thing we've seen in the past is that for state channels, wallet integration has sort of become challenging because wallets have to manage the state. But given the success of what we've seen with the world of roll ups CK or optimistic in the last year, we've also kind of seen in parallel state channel projects like Connects or Seller kind of pivot into multi chain approaches where they connect with other side chains. Is that still a possible future for an alternative to the roll up strategy or do you think roll ups?
00:34:17.970 - 00:35:32.038, Speaker B: My personal view is that roll ups are just better than side chains because roll ups, they benefit from the full security of Ethereum. And basically there's this kind of nice tight coupling property, right, where you can trust that the roll up state is kind of like an application on Ethereum can unconditionally trust that a roll up state is correct, right? Whereas if you have a bridge between two kind of chains that are both quote sovereign and they're separately sovereign, then if one of those chains gets 51% attacked, then the bridge stops telling the truth, right? Or if the bridge gets attacked, then the bridge stops telling the truth. Whereas a lot of the bridges they do still rely on multi six or whatever. Whereas with roll ups the roll up bridges have 100% accuracy from the point of view of inside of the chain. Right? Now, obviously it's possible that there's a 51% attack on Ethereum and then optimism gets reorganed. But if that happens, then whatever thing you did that depends on optimism is also going to get reorgan, right? So you're actually 100% safe. So I think there is that really important kind of tight coupling property that you get from being inside of a common security layer, which the roll up Ethereum verse is.
00:35:32.038 - 00:35:57.440, Speaker B: So I view that as being a benefit of doing roll ups, but at the same time there's going to be other applications that are very low value per transaction and so it might not make sense to pay the fees even for roll ups. And like, okay, fine, those applications could still be in a side chain in the short term. And then in the long term, once AZEK Starks are good enough, then everything should be either a ZK roll up or a yeah.
00:35:58.290 - 00:36:04.900, Speaker A: What do you think of, I guess, monolithic changes versus multi roll up futures or just choices there?
00:36:05.990 - 00:36:58.660, Speaker B: I think realistically multi roll up is inevitable. First of all, there's just already multiple roll ups and there's these different approaches. Even if we assume that there's trade offs between ZK roll ups and validiums and some people want to be one and some people want to be another, you're going to need bridges between them. A multi roll up world just it feels more scalable because you just naturally have much more parallelization, right? Like different roll ups use different shards and the different roll ups have different computers that are creating the proofs for them. So right now, the multi roll up world feels more likely. Obviously it's definitely possible that I'm wrong here and we do just get like one ZK roll up that ends up dominating the whole thing, but we'll see what happens.
00:36:59.590 - 00:37:03.940, Speaker A: Do you think Bitcoin could be a roll up one day?
00:37:05.370 - 00:37:20.520, Speaker B: Oh, fun. Well, for Bitcoin to be a roll up of ethereum, the community is going to have to accept proof of stake, which I guess we don't understand. We'll see.
00:37:23.370 - 00:37:29.706, Speaker A: Kind of coming back to the roll up centric world, as you.
00:37:29.728 - 00:37:31.258, Speaker B: Kind of just talked about, there's a.
00:37:31.264 - 00:38:00.440, Speaker A: Lot of things where inevitably you can have anywhere from one roll up being more popular to just kind of having some specific features that are valued more from one or valued or offered by one roll up than the other. What should change or what changes for a developer when they're thinking about deploying an application? Obviously there's some trade offs on compatibility or composability. Yes, you may have different parallel worlds, but it also, I think, at some point makes development not as easy. Would you agree with that or kind of.
00:38:02.970 - 00:38:07.830, Speaker B: The question is what are the challenges for developers when moving their applications to roll up land?
00:38:07.980 - 00:38:08.680, Speaker A: Yes.
00:38:10.670 - 00:39:11.962, Speaker B: I think the main challenge is that an application has to decide whether it lives inside of one roll up or whether it's natively cross roll up. And if it's a natively cross roll up, then you have to actually think more about the infrastructure of what being natively cross roll up actually looks like. And even if it lives inside of a roll up, then there might be cases where people just want to kind of bite off some portion of the activity of your application and move it over and do it inside of another roll up. Right. So you do have to kind of think about cross roll up nuances. But even if you don't, then if you don't, then I guess the challenge is that you lose composability with applications that live inside of other roll ups, right? Like if you have uniswap inside of optimism and some DeFi thing inside of Arbitrum, then you can't do synchronous operations between the uniswap and that DeFi thing. But I think realistically, there's going to be a copy of uniswap with at least some liquidity inside of every domain.
00:39:11.962 - 00:40:04.990, Speaker B: So inside of every roll up, inside of every side chain and obviously on the base chain, as well. But that's basically how to kind of interact with the newly found kind of ability to move between domains is something that application developers need to think about. The thinking around ENS and the thinking around NFTs would be one example of that. How would, say, loot work if we assume that we want loot to be accessible to people that aren't willing to burn $40 on doing every operation? And what happens if some loot is inside of optimism and other wood is inside of arbitrary? How do you recognize loot that's in different roll ups, very similar challenges to ENS, right? Well, for a good reason. Like a loot is an NFT and ENS is an NFT.
00:40:07.490 - 00:40:41.660, Speaker A: For more experiment of no cost transacting. Yeah, that makes a lot of sense. Another question which is indirectly related to one of your slides from the talk wallets are the first interaction and barrier for an end user and kind of writing mnemonic key phrase every time won't scale for an average user or hard drives. So I'm just repeating what do you think about the current state of wallets and what solution do you think we should implement? Make that smooth, especially with layer two in mind sure.
00:40:42.030 - 00:41:35.820, Speaker B: For wallets and keys. As I've said many times, I'm a huge fan of social recovery wallets and I think social recovery wallets for your hot wallet for your assets that you need, for everything you do that's convenience oriented and multi SIG wallets for everything that's not convenience oriented. And I think the same wallet can manage both. Right, but then in order for that to happen, we need account abstraction. And recently myself and the GSN people and Nethermind people have been collaborating on ERC four three Seven, which tries to make account abstraction work without any protocol changes by kind of doing this overlay using user operations. So very much encourage people to look into that as well. And that's something that I think people should very much be starting to hack around at this point.
00:41:35.820 - 00:42:33.200, Speaker B: And I guess the good thing that's happening now, right, is that all of these roll ups are moving toward being just EVMs. And so if you have one wallet, you should be able to take that wallet software and just deploy it on every domain. So if you can have one wallet, probably same address on every domain maybe, and you have the same wallet software that could actually manage your kind of wallet and your funds inside of each one of them, then I think that could be really convenient and really amazing. And then basically I think the fewer wallet applications that users need, the more effort they could put into kind of the backup and key management for each one. And so the less the risk of unfortunate security accidents happening and the better the experience for people.
00:42:33.970 - 00:42:50.290, Speaker A: No, that's absolutely fair. Do you think there are any other well, actually, I think the answer is yes, but what are some, I guess, open problems for the world of roll ups to still figure out in order to sort of achieve that goal? Either they're still open questions or considerations.
00:42:51.510 - 00:43:14.060, Speaker B: I guess the Sequencers need to speak this account abstract. They need to speak ERC 4337 if they do natively, that would be amazing. Realistically, I think roll ups are a better experimentation ground than the main net because they're cheaper. So I could easily see account extraction wallets taking off in layer twos before they take off in layer one.
00:43:15.870 - 00:43:22.522, Speaker A: Got it. Okay, so just still on kind of the sequencers managing account extraction, right?
00:43:22.656 - 00:43:32.400, Speaker B: Yeah. Sequencers should the optimism and arbitrage from a sequencer should ideally just speak ERQ 4337 natively, and that should be one of the priorities for them.
00:43:32.930 - 00:43:40.100, Speaker A: Well, I know a couple of L2 projects watching this, so hopefully we get to work on L2.
00:43:40.870 - 00:43:42.706, Speaker B: All right, well, I don't think I.
00:43:42.728 - 00:43:46.660, Speaker A: Have any other questions. Thank you so much for taking the time today.
00:43:47.510 - 00:43:48.660, Speaker B: Thank you, too.
00:43:49.110 - 00:43:53.958, Speaker A: Awesome. Right, everybody, we are running a little bit ahead of schedule. So what we'll do is we'll take.
00:43:53.964 - 00:43:55.206, Speaker B: A quick five minute break, and then.
00:43:55.228 - 00:44:05.094, Speaker A: We'Ll do our last talk of the day, which is going to be an AMA with gucci from the Ethereum Foundation. So sit tight, enjoy the next five.
00:44:05.132 - 00:44:07.460, Speaker B: Minutes as a break, and we'll be back.
