00:00:00.490 - 00:00:10.800, Speaker A: I need to get some sort of, like, token to send to people who actually do it. When I say, yeah, we could do it to reward in some way, because nobody ever does.
00:00:11.170 - 00:00:13.950, Speaker B: Oh, folks, if you put on your video, you might get a token.
00:00:14.690 - 00:00:17.150, Speaker C: Probably not. You have some socks?
00:00:17.570 - 00:00:18.734, Speaker B: There you go.
00:00:18.932 - 00:00:23.406, Speaker C: A 10th of a sock. I'll send anyone a 10th of a sock who puts on video.
00:00:23.588 - 00:00:24.720, Speaker B: There you go.
00:00:25.210 - 00:00:26.600, Speaker D: That's like $20.
00:00:27.530 - 00:00:28.870, Speaker E: That's no joke.
00:00:30.090 - 00:00:30.838, Speaker C: There we go.
00:00:30.924 - 00:00:31.974, Speaker B: We got one more.
00:00:32.092 - 00:00:34.550, Speaker C: I also got tempted by a 10th of a sock.
00:00:35.050 - 00:00:38.990, Speaker B: There we go. It'll be in the mail. Just keep an eye out for a very small package.
00:00:39.170 - 00:00:43.580, Speaker C: I meant a physical 10th of a sock, not a digital one.
00:00:44.830 - 00:00:52.910, Speaker A: Well, I think we're good. Hayden, if you can multitask, you can retweet the live stream.
00:00:53.570 - 00:00:54.320, Speaker D: Yeah.
00:00:55.490 - 00:00:57.600, Speaker C: Okay, let me do that right now.
00:00:59.330 - 00:01:05.470, Speaker A: Well, other than that, I'll let Jacob do an intro and then we can get yeah, sure.
00:01:05.540 - 00:01:06.574, Speaker B: So cool.
00:01:06.612 - 00:01:06.766, Speaker E: Yeah.
00:01:06.788 - 00:01:37.914, Speaker B: So, first of all, thanks so much for being a part of this. Hayden and Noah, we're excited to have Uniswap as part of Hack Money and excited to be doing this as I think probably our last final event of Hack Money before judging. So we've come to the end. It's been an exciting four know your team has been super helpful in the channels and just everywhere helping people out and build on top of Uniswap. So I know I'm excited to see what people have built. I assume you guys are as well. But in the meantime, maybe we'll do a little bit of chatting about how we got to uniswap V One.
00:01:37.914 - 00:02:22.074, Speaker B: Some updates about V Two, which, as everybody should hopefully know, launched on Main Net very recently in the last week, which is amazing. Just in time for people to bring their Hack Money projects to Main Net too. So perfect timing there. And, yeah, just kind of get an idea of the story, what's up with V Two? And of course, an opportunity for you guys in the audience kind of around the world to ask some questions to the team as well. So with that out of the way, maybe we'll start with a couple of questions, maybe for Hayden, and then we'll jump into some V Two stuff and no, I'd love to get your opinion on that. So, Hayden, I'd love to know kind of how you got into Ethereum in the first place and maybe what you were working on beforehand. I know, it's an interesting story.
00:02:22.074 - 00:02:24.442, Speaker B: I think it would be cool for everybody else to hear, too.
00:02:24.576 - 00:03:17.878, Speaker C: Yeah. Before working on Uniswap, I was a mechanical engineer, so I graduated in May 2016 from engineering school, and then I spent a year working as a mechanical engineer doing thermodynamics basically tracking heat flow and car designs. I was working at Siemens. I got laid off after about a year, and at the time I was starting to get a little bit into crypto. I had a friend, Carl Flursch who at the time was working at Consensus and then he moved to the Ethereum Foundation and so he was kind of delving really deep into Ethereum and would talk to me about it and was kind of trying to get me interested. I didn't really care that much until the price went from five dollars to one hundred dollars in a few months. And then I was like, okay, maybe it's interesting but it timed out nicely where I got laid off and I had a call with Carl and he was basically like, congratulations, you're now an Ethereum developer.
00:03:17.878 - 00:04:15.710, Speaker C: I was like, I don't really know how to develop that well, but I guess I'll try it out because I didn't know what else to do. So I spent a few months experimenting with solidity, learning how to write token contracts, but I wasn't really sure. It started to feel like I needed a bigger project to learn on. And so Carl actually, once again, he kind of pointed me towards this blog post from Vitalik, which was talking about automated market making and a different way to kind of make a trading platform or an exchange. And that ended up being kind of like the earliest version of Uniswap. And I spent a few months kind of building out just basically kind of trying to learn solidity and I built out an initial proof of concept that turned out pretty well. And once I had that, I started to go to a lot of ethereum events and meet more people.
00:04:15.710 - 00:04:58.970, Speaker C: And I heard about other projects in the space like Bancorp and other bancorp was kind of at least doing some similar things. And I did get some ideas from there kind of going from just like this thing that could swap between two tokens to a thing that could hop between and go anything to anything. And I kind of just continued working on it. Still pretty much unemployed for this entire time, living at home for a good portion of it, occasionally doing a little contracting work, but I just kept working on the smart contracts and an interface for it and I kind of eventually built out like a good enough proof of concept where I met some people at Ethereum Foundation. I met Vitalik in basically spring.
00:05:03.250 - 00:05:03.598, Speaker D: 2018.
00:05:03.604 - 00:05:37.160, Speaker C: And he kind of recommended I apply for an Ethereum Foundation grant. So I did that. I got an Ethereum Foundation grant and I kind of paid contractors to build out a front end and do design work and I kind of finished up the smart contracts and paid smart contract auditors and formal verifiers to kind of make sure that they were secure to the extent that we could be at the time. And then that kind of turned into uniswap, which was pretty cool.
00:05:38.810 - 00:06:10.702, Speaker B: Obviously, I think most people on this call will be aware of the kind of explosion that uniswap kind of. It almost became like a mindworm, I felt like, where it was like there were all these other things and all of a sudden it was just uniswap. And everybody just used uniswap. And it became very popular very fast. What do you think led to that? Was it kind of any specific design choices you made? Or was it that it was significantly better in every way or just in a specific way? What do you think led to it just taking off like a rocket ship?
00:06:10.846 - 00:06:59.246, Speaker C: Yeah, I think it definitely wasn't something I was expecting or anticipating when I was working on Uniswap. The kind of the scale of what I was expecting it to be relative to all these projects that had done these huge ICOs and that were a lot more established, I wasn't necessarily expecting it to kind of compete in the same way. The kind of design choices behind it were like, how do we some of it was very UX focused. This feeling where you just you the only thing you need to interact with is a smart contract. And so it's just like, I put in this token, I get out this other token and it feels almost like a vending machine. There was like that kind of design improvement compared to at the time it was coming out. Ether Delta was, I think, still like the most popular trading platform, which was a lot kind of more complicated to use and then kind of some of the other design choices.
00:06:59.246 - 00:08:12.150, Speaker C: It was like, how do we make a trading platform that kind of mimics the underlying properties of Ethereum itself? Something I noticed about a lot of projects being built on Ethereum when I was working on Uniswap was like they kind of made various sacrifices at various different points on sort of some of the underlying properties that I cared about most for Ethereum. If something built on Ethereum is very censorship resistant, but a lot of projects built on top of it aren't. And so the idea of Uniswap was like, can we make something that's as decentralized as Ethereum itself and is as hard to kind of as unstoppable and as trustless as Ethereum itself? And I think that that kind of resonated with a lot of people and it felt like a little bit different from a lot of other projects and I think that got a lot of initial excitement. And I think another thing is just like the fact that you can sort of trade anything for anything on Ethereum and you don't need professional market makers for the order book model. You always need professional market makers to make sure that there's liquidity for any token. But for this sort of longer tail of tokens, it's hard to scale professional market making. So having this sort of automated liquidity provision where you can just lock up your tokens in a smart contract and then there's like liquidity for those tokens forever.
00:08:12.150 - 00:08:13.980, Speaker C: It's like a fairly powerful thing.
00:08:15.550 - 00:08:16.058, Speaker D: Cool.
00:08:16.144 - 00:08:16.780, Speaker C: Yeah.
00:08:17.710 - 00:08:18.700, Speaker B: Very interesting.
00:08:21.150 - 00:08:21.514, Speaker D: Yeah.
00:08:21.552 - 00:08:33.600, Speaker B: Let me see. So you've got V one. V One is doing very well. There's a lot of growth, lots of people are using it. When did you start to realize maybe this needed to have a V Two?
00:08:34.210 - 00:09:05.034, Speaker C: Basically as soon as it was doing an absurd amount of volume and had an absurd amount of traction. Just like this scale of resources that had been put into thinking about building uniswap. I mean, it was literally just me working on my own for most of the time for V One. And you heard the story I told at the beginning. I wasn't that experienced as an engineer. It was like the first version of it and it's kind of hard to get something perfect on the first time. I wouldn't say V Two is perfect either.
00:09:05.034 - 00:09:31.170, Speaker C: I think we're already starting to think about a V Three. We can get into that stuff later. But the point is that when this thing started doing a million dollars a day in trading, I was like, okay, this thing clearly has proved itself as like a concept, but I was very sure that it wasn't in its ideal engineered state. And so I definitely thought it was worth kind of continuing to iterate on and improve.
00:09:31.990 - 00:09:32.594, Speaker D: Got it.
00:09:32.632 - 00:09:33.220, Speaker C: Cool.
00:09:35.750 - 00:09:54.060, Speaker B: So now you're thinking about improving it. What was sort of like the first thing you knew that in V One? I was either maybe really worried about this or it's something that I wish I'd built in the first version. What was sort of the initial feature that you thought would be a perfect candidate for V Two?
00:09:54.750 - 00:10:43.050, Speaker C: I think that the first one we decided on was probably the arbitrary pairs allowing any ERC 20 to be paired against any other. It was definitely like the most requested thing that a lot of people would bring up. They wanted to denominate in stable coins or kind of have two things that were highly correlated. They wanted to be a liquidity provider on that and not have as much price risk and they couldn't because everything was kind of forced to be denominated in ETH. And I think ETH is a great pair and I think it will probably always be like the most common one or one of the most common ones. But kind of adding in sort of this broader options was probably like the first thing. And I was very resistant to the idea early on, but just because there's like a more complicated routing thing that occurs.
00:10:44.110 - 00:10:45.740, Speaker D: Yeah. Cool.
00:10:46.110 - 00:10:46.570, Speaker B: Awesome.
00:10:46.640 - 00:10:46.966, Speaker D: Sweet.
00:10:46.998 - 00:11:07.730, Speaker B: So maybe we'll let no Edge open to these ones too. So feel free. I would kind of get an answer from both of you guys for these kind of open questions and ideally pick different features so that you can talk about more V Two features. So maybe starting with Noah for this one. What is for you the most exciting feature of V Two that you think is going to have the biggest impact?
00:11:09.190 - 00:11:09.940, Speaker E: Interesting.
00:11:11.110 - 00:11:11.666, Speaker B: I don't know.
00:11:11.688 - 00:11:43.706, Speaker E: That's a good question. I think something that I was actually very hesitant about adding one particular feature, which is flash swap. So we were really close to the end of the contract lifecycles. We were getting them formally verified. They were kind of, in our minds, frozen. They had been stable for quite a while. And then I think Dan Robinson, who's one of our investors and kind of brainstormers when it comes to these kinds of things, had this idea and Hayden had kind of thought about this as well.
00:11:43.706 - 00:12:47.458, Speaker E: And it's basically this idea of flash swaps, which has been around for a bit now, but we had this really nice design of this really nice way to add it into V Two. And so that was a call we had to make on whether or not we were going to add that. And I was playing the kind of cautious side of things and Hayden and Dan were kind of pushing me in the other direction and we ended up going with adding it and that tacked on some time to our formal verification. And it did kind of initially add this kind of additional complexity to the kind of underlying mechanics of a swap on uniswap. But I think the more that we spent time with the code, we actually realized it was like a really natural kind of it kind of fit really naturally into the way that we were already thinking about the invariant and preserving these properties, about the contracts and things like that. Anyway, we ended up getting it in. And I think that it's a bit complicated, I think, right now for people to use because it's so new.
00:12:47.458 - 00:13:47.446, Speaker E: But I do think that it offers a lot of really interesting kind of atomic abilities to atomically arbitrage and loop through kind of other protocols and do things up front that you would otherwise have to do in an iterative way. It's also kind of on the flip side of things, it's also forcing projects who might be vulnerable to flash loans of governance tokens to kind of be aware of the fact that this is we don't want to encourage that kind of behavior, obviously. But at the same time, if it's possible on some other venue, we might as well kind of be like accelerationist in that regard and kind of force this higher standard of security for all these projects. And so we made sure to be appropriately cautious and talk to people who this might impact and such. But at the end of the day, we did feel like it was a reasonable feature to add and we do think there's a lot of benefits and so, yeah, that's something I think that's going to be pretty exciting to see.
00:13:47.468 - 00:13:49.526, Speaker D: Where it goes on.
00:13:49.548 - 00:15:05.294, Speaker C: The security thing to add to that, if being able to flash swap some token from Uniswap impacts the security of your system, then you should be aware that you can already flash loan a ton of ETH from Duidx and then Atomically, buy any token on Uniswap and then attack those same systems. Any system that is broken by flash swaps is already broken by a combination of dYdX and Uniswap V One essentially. So that was like one thing that kind of helped us get comfortable with sort of adding it despite some people's initial concern about it behind what some of the implications might be. I'll also add my personal answer to that question would probably be the Oracles. I already mentioned ERC 20 or C 20 pairs and I think those are super important. I do think that having on chain price feeds that are very decentralized and also very easy to reason about, a lot of on chain Oracle systems kind of depend more know people voting on a price feed or various trusted parties kind of coming together and you're averaging across them and all that. And this is very different from any of those.
00:15:05.294 - 00:15:29.000, Speaker C: It's very much just based on what's the amount of money you would lose moving the price on Uniswap away from the real price and then what's the amount of money that would cost and you would lose to Arbitrage if you did that. Every block for 1000 blocks. If you're doing a 1000 block average it's a lot easier to reason about and for some use cases I think it's going to be really cool and important.
00:15:31.850 - 00:15:43.660, Speaker B: What about kind of the feature that was maybe the most challenging to build and maybe it would be great to dig into what kind of hurdles you guys hit when you guys were trying to build this thing up.
00:15:44.190 - 00:15:47.622, Speaker C: Do you want to take that one? Noah, what do you think was most challenging?
00:15:47.766 - 00:15:48.860, Speaker B: That's a good.
00:15:55.810 - 00:16:48.122, Speaker E: So I'll talk about one really thorny one. Hayden, feel free to maybe do some more broad one but something that's like very technical and specific but actually potentially kind of pretty bad is this issue of minimum divisibility. So in Unisoft V one the way to determine how many pool tokens a given amount of ETH and a given amount of token would give you is basically it just gave you the amount of pool tokens corresponding to how much ETH you sent to the contract. Which is pretty reasonable right? Because ETH is in V one at least it was this canonical base pair. It kind of had this idea of enshrined value and it was kind of a reasonable unit of account for V One pool shares. But in V two we obviously don't have this feature, we don't have this property anymore. Not every pool has an e component and so we had this problem of how to denominate pool tokens.
00:16:48.122 - 00:18:21.014, Speaker E: So you might just think that you could pick the minimum or the maximum or maybe the average or even in unisop style, like the geometric mean which is the square of the product, sorry, the root of the product. If you send 100 y and ten X, you do root 1000. But it turns out that there's actually all these attackability issues with that. So if you mint the minimum number of pool shares, like you send one way of one token and one way of another token, that'll give you out root two or whatever route two rounded down, which is one way of pool shares, but then you can actually send a bunch of value into the pair, right? You can just send because uniswap can't control the token balances of any arbitrary contract. So someone could take a million way or one unit, say of this token and another 2 million of this other token send those to the contract and then suddenly one way of pool tokens denominates this incredibly large amount of liquidity, right? And so it's this kind of really arcane attack is debatable, I guess, but it's this really arcane kind of pattern and it's not something you'd typically do and there's no real reason to do that, but it turns out that if you do do that, then it kind of is this barrier to entry to new liquidity providers. And so you actually have to have above the threshold of tokens that were sent to the contract in order to get even one way of pool shares and kind of contribute to being an LP. And so you can get around this obviously by wrapping or doing other things, but it's kind of frustrating.
00:18:21.014 - 00:19:03.234, Speaker E: And so we did actually find a way around this. We essentially just enforced that. There's this minimum threshold of liquidity tokens in the minting process. So the first liquidity provider kind of has to burn this small tiny minuscule fraction of pool shares. It's typically like less than a cent for almost any reasonable pair out there. And it kind of ensures that there's always going to be this kind of very small unit of measurement, unit of pool tokens that ensure that this divisibility issue can't get that bad, right? Because there's some multiplicative factor on how bad this divisibility can get. So very technical, very specific.
00:19:03.234 - 00:19:21.838, Speaker E: But these are the kinds of things you have to worry about even though it's not that realistic and there's really no incentive to do what I was describing. There's no actually benefit, well, there's no real big benefit that we could think of outside of just kind of griefing. But you do have to be aware of these kind of things in permissionless system. So that's one thing that we had to deal with.
00:19:21.924 - 00:20:20.130, Speaker C: Yeah, v one has this griefing attack actually. If someone deploys a new pair, then if you're the first liquidity provider, you can create any arbitrary minimum liquidity threshold to become a liquidity provider for all future users. So if you're the first liquidity provider on a pair, on Uniswap, you could maybe set that to a million dollars and then say anyone else who wants to join the pool has to put in at least a million dollars. We didn't really realize that until well into the V two design process. And it's not like you can't steal people's money who've already put in pools and it can't affect existing pools. But for any future pools, actually, if someone's aware and they could start deploying, they could do this great thing, my answer would be Oracles. Probably there was like this idea of how do we when we were first doing the Oracles, we were thinking about, do we store built in moving averages, like 1 hour averages, one day averages kind of built into the contracts.
00:20:20.130 - 00:20:41.740, Speaker C: And we started to realize that it was really hard to choose what periods of time to average across. And so we ended up on this other Oracle system where we're storing these price accumulators that let anyone else building on top of it kind of choose their own periods they care about. It ended up kind of solving the problem really nicely. But I think it took a while to kind of get to the current Oracle design, for sure.
00:20:42.830 - 00:21:28.440, Speaker B: Very cool. Maybe jumping forward a little bit to maybe what could be a future feature. I think I remember, I think it was at DevCon last year, a project called, you know, in general, kind of layer two uniswap. I think we're sort of settling into the new normal that gas prices are quite high and they've been quite high for a while, maybe. First of all, how do you guys feel about gas prices being this high? Does that affect users? Does that affect liquidity pools at all? And otherwise maybe just chat a little bit about could a layer two uniswap V Two exist? What could that look like? Should it be something that somebody should have built this hackathon or maybe the next?
00:21:28.970 - 00:22:44.750, Speaker C: No, I think that's a good question. So, first off, it obviously does impact everyone who uses Ethereum in that all users are paying more towards gas fees and it kind of sucks for them and it sucks for the platforms themselves because it might disincentivize future usage if people have to pay a lot of fees. So, yeah, it's not great. The way that I think about layer two solutions is I think that a lot of kind of past layer two solutions that people have thought about a lot, like plasma and a lot of sort of different ideas people had sort of it all felt like a huge sacrifice on what it meant to be an application on ethereum. So when you're building on top of Ethereum, you have some really nice properties where you have this kind of ability to kind of interoperate between other applications on Ethereum without needing to deposit into an application and then withdraw. You can just basically use tokens on uniswap and then use them in compound and use them in Maker and you don't need to worry about withdrawals and exits. Being able to kind of seamlessly interoperate between applications is such a core property and then another core property is just like the development experience of Ethereum.
00:22:44.750 - 00:23:55.670, Speaker C: Some people complain about it and most Ethereum killers say that it's horrible but actually building on top of Ethereum is pretty great and there's a ton of tools and there's a ton of writing smart contracts isn't too bad. And I think that for a layer two to kind of completely take off and fill the needs of uniswap, it needs to have these underlying properties of ethereum, which are like general interoperability, the ability to write general smart. Contracts out of the gate and not need to be able to the applications themselves. I don't think should be creating these really intense, complicated things like what some of the past scaling solutions have required. And so I think optimistic roll up is the right level of trade off where you can actually create a general smart contract platform on optimistic roll up that interoperates out of the gate. And so I'm a big fan of formerly the Plasma Group team, they're now called Optimism. And so they are the people we collaborated with on Unipig and they're working on a general smart contract optimistic roll up chain.
00:23:55.670 - 00:24:38.840, Speaker C: And I expect to see a version from them that's main net ready at some point and I'm very excited for it personally and I do think that it would be worth putting Uniswap on and uniswap V two on. Something to note there is that for it to be ready almost for it to be the layer two that wins or whatever or gets DeFi on it, it needs to kind of support Uniswap basically. It needs to be like Ethereum where we can just deploy Uniswap to it and we don't need to build a whole back end to it. And so we're waiting on that to some extent but we're expecting it to happen fairly quickly as well.
00:24:40.410 - 00:24:41.942, Speaker D: Got it. Cool days.
00:24:41.996 - 00:24:42.920, Speaker A: Not weeks.
00:24:43.930 - 00:25:02.630, Speaker C: Yes, neither days nor weeks, some longer period of time than that. But I would say that I wouldn't be surprised if it was less than a year for us to have a general purpose. I wouldn't be surprised. I'm not speaking for them, for us to have a fully general purpose optimistic roll up chain with native solidity and.
00:25:02.640 - 00:25:05.950, Speaker D: All that stuff but we'll see. Cool.
00:25:06.020 - 00:25:50.890, Speaker B: Awesome. And yeah, I think this will be the last question from my end. So anybody in the chat, if you have questions, start thinking about them, write them in the chat and we'll call on you one by one and you can just kind of ask it live. But maybe just to wrap up this section. As you think back from your development of V Two to V One, what are some of the things you noticed that were sort of like beginner mistakes that you had made or things that otherwise just made things more difficult as you were thinking about designing further software. What are some things that maybe first time developers or even seasoned developers should be thinking about when they're putting together a protocol?
00:25:52.830 - 00:26:51.360, Speaker C: I don't know if I'm fairly happy with how everyone went, but I'll say that mistakes definitely, obviously informing people of risks. There have been people who kind of are sort of seeing things and being like, well, no one would ever do that, that's really dumb. And then like, all of a sudden, like, hundreds of people start doing that. So like, I think that just like being really, really like extremely careful with informing people, you know, of the risks of of using things and kind of the, you know, just yeah, that is like one thing that I would maybe highlight. I don't trying to think also, I think that the mistakes that a lot of other projects are making, it's just like being aware, and probably we've made those mistakes as well, is like being aware of the trade offs that you're making. Like super hyper aware. Because sometimes people make what feels to them like a very minor trade off and it just very fundamentally changes all the security properties of their system.
00:26:51.360 - 00:27:09.560, Speaker C: Or suddenly this one small change that you made, now you're dependent entirely on some small trusted party for everything in your system to work. So, yeah, I just think trade offs are under considered sometimes the implications of them.
00:27:13.130 - 00:28:16.570, Speaker E: Yeah, I don't have too much to add. I think the one thing that just from a slightly more practical perspective that differs between v one and v two is that v two has this kind of core helper separation where the core contracts are kind of very minimalistic, very brutalistic, and really only exist to kind of verify the security and safety of unisop and make sure that X times Y equals K is preserved more or less, and that liquidity providers aren't going to be fleeced in any way. And then we have this whole constellation of external contracts which are responsible for maintaining Oracles and performing flash swaps and even just doing the very basics of kind of routing between multiple pairs in order to support trading for users and front end interfaces. So I think that this is really nice because it's very extensible and it's very flexible and approves can be given fairly freely to these kind of helper contracts because they should be extremely simple stateless, never doing anything that's at all suspect or complicated in any way, so.
00:28:16.640 - 00:28:18.186, Speaker B: Very easy to verify the properties of.
00:28:18.208 - 00:28:42.610, Speaker E: And so that's something that we're pretty excited about, just because there's always new, exciting ways to transfer, ERC, 20 tokens or perform different types of swaps that swap to prices or other kinds of things. So that's something that we want to keep doing going forward and we'd like to see other projects do, is. Kind know, separate out these core pieces of logic from helpers.
00:28:43.030 - 00:28:47.140, Speaker C: Yeah, I agree with that. That's a good answer, but much better than.
00:28:49.830 - 00:29:01.900, Speaker B: Well, you know, let's let's turn this over to the audience, ultimately, why we're here. So I think Vinit had a question. Vinit, I don't know if you're able to unmute and ask it yourself. If not, I'm happy to repeat it.
00:29:06.750 - 00:29:08.874, Speaker C: What went into determining the 0.3?
00:29:08.912 - 00:29:25.966, Speaker B: Yeah, exactly. I'll read it for Stream, too. The question from Vanit, who's not able to say it out loud right now, is what went into determining the 0.3% fee? Are there ideas around making that variable? I guess basically trying to get a sense for how we arrived to that number.
00:29:26.148 - 00:29:50.010, Speaker C: Yeah, I'll say that in terms of what so the 0.3% fee in V Two is kind of a continuation of the 0.3% fee in V one, which came from a discussion between me and Vitalik where it was very short discussion. I was like, I had it at zero point 25. And then I was like, I'm worried that it might be too low and liquidity providers won't make enough. And he's like, you could try 0.3. And then I changed it, and then it never changed.
00:29:50.010 - 00:30:48.694, Speaker C: But the general thought that went into it was like, it should be somewhat competitive with other kind of types of trading platforms. And we didn't want too much active governance in V One or in V two, even, just because it felt like the funny thing is that whatever the fee is, if it's 0.3 or 00:25 or zero point 35, there's probably a different amount of liquidity where the market might kind of reach some sort of equilibrium. There are definitely for certain types of pairs, it would make sense to have much lower, much higher fees. And it's something that we very much want to explore in V three. So we are working on a V three, and I'd say that dynamic fees fall in the scope of that, where that is where we want to explore it more. But something that one of the reasons it wasn't in V One and it wasn't in V two is just because you always kind of have this trade off when you introduce governance to systems.
00:30:48.694 - 00:30:59.920, Speaker C: And we want to make sure that if we do implement a dynamic fee, it's done in the right way, where it doesn't kind of create weird incentives between different users of the system.
00:31:04.330 - 00:31:08.058, Speaker D: Cool. Got it. All right.
00:31:08.224 - 00:31:09.322, Speaker B: Accepts the answer.
00:31:09.456 - 00:31:10.090, Speaker D: Awesome.
00:31:10.240 - 00:31:15.434, Speaker C: 0.3% works for a lot of use cases. Surprisingly, for a lot of pairs, it.
00:31:15.472 - 00:31:20.220, Speaker D: Actually works fairly well, I'll add that. Cool.
00:31:20.670 - 00:31:46.790, Speaker B: Awesome. So I think Vibov, I think that's how you pronounce that. I'm probably wrong. Are you able to okay, he won't be able to speak as well. All right, so I'll read out his question as well. So what are the solutions present that would prevent, quote unquote, bots to take majority liquidity pool portions of pairs and the majority part of the fees being before a large trade hits the pool, leading to bribe griefing of existing liquidity pools.
00:31:47.530 - 00:32:09.094, Speaker C: All right, that was mentioned in the discussion section of our audit report. So basically the idea is that someone is making a swap and then ahead of that swap, someone adds a ton of liquidity to the pool, and then at the end of that swap, they remove that liquidity and so they got like a large portion of the fees for a single trade. Am I interpreting that correctly?
00:32:09.142 - 00:32:09.980, Speaker D: I think so.
00:32:12.770 - 00:33:01.710, Speaker C: The interesting thing there is basically what you're doing is you're increasing the liquidity for that trade and you're actually improving the trade execution rate for that user. It's debatable. If this is actually bad behavior. I'm not actually 100% convinced it is bad behavior because you're kind of taking on that price movement, you're giving a better execution rate. And maybe it makes sense for you to kind of give it's almost like should liquidity providers be actively withdrawing and adding liquidity constantly, or not based on kind of certain transactions or based on certain periods of time. But I'm not convinced it's like, bad behavior at all. It improves the trade execution.
00:33:04.610 - 00:33:05.600, Speaker D: Makes sense.
00:33:06.850 - 00:33:12.606, Speaker B: I see another comment in here from Miles. I'm not sure is that a question from you, Miles, or is more of.
00:33:12.628 - 00:33:40.940, Speaker F: A no, no, it's a question. Well, it's just kind of like thinking through this problem. I don't know if it's a direct, but so I agree that it's easy to reason about the cost of artificially changing a price for a T wop within a defined time. But if the attacker holds a large number of pool tokens for the pool that the TWAP is based off of and then pulls them out right before their attack, how would you kind of handle that? Is there a way to handle that? Is that being handled in a way I don't fully understand?
00:33:42.350 - 00:33:43.100, Speaker C: Wait.
00:33:46.110 - 00:33:47.340, Speaker D: Yeah, go ahead.
00:33:49.630 - 00:34:01.374, Speaker C: If the attacker holds a large number of pull tokens and then they pull out the liquidity right before an attack okay, so you're talking about the liquidity component of these sort of T wops. Right.
00:34:01.412 - 00:34:14.566, Speaker F: Is it like the cost to change the price? Like you're saying, okay, if a T wop has 1000 blocks, then pushing down the price by this much costs this much. But if the attacker holds pool tokens and then pulls out a bunch of.
00:34:14.588 - 00:35:18.618, Speaker C: Liquidity and then executes their attack yeah, so that's a very interesting point, and it's something that we've thought about a lot, which is like you do have this ability to get these T watts, but it's hard to get to know exactly what the liquidity balances was in the contract at every moment in between. Right. And so actually, it is true that that's a very interesting scenario, but there are kind of interesting ways of handling it as well. So one thing that I've thought about as a really interesting mitigation here is, for example, you could have an Oracle system. Let's say that you have a project that's using uniswap B two as an Oracle, it's very important for it to have liquidity for the safety of the Oracle itself. One thing that they could do is they could direct a small fee stream maybe from their own system, and basically pay those fees to liquidity providers who time lock their liquidity tokens. And then you can basically have liquidity that's guaranteed to be in the contract for the duration that you care about.
00:35:18.618 - 00:35:50.900, Speaker C: And you can make stronger guarantees. So you can make guarantees by basically locking up liquidity tokens in a smart contract, maybe in the Oracle contract itself, which could give you a very strong which then you would be able to say okay, well, I know. For a fact that there was a million dollars in the contract for this entire period because the liquidity tokens were in the contract the entire time. So that's one interesting way to handle it. Or if the liquidity is ever withdrawn, the Oracle contract would know because it was pulled out of the Oracle contract itself.
00:35:52.710 - 00:35:53.750, Speaker F: Yeah, that makes sense.
00:35:53.820 - 00:35:57.240, Speaker D: Thanks. Cool.
00:35:58.090 - 00:36:00.550, Speaker B: We've got a question from Trent.
00:36:01.850 - 00:36:39.140, Speaker A: So this is a little less technical, but I'm curious how you guys approach branding and meming, and what percent of your sort of product strategy is centered around picking the perfect emoji? How long did it take to pick the unicorn emoji, and how important is that to your product strategy? Because given typical financial institutions are like, it's very boring, like Bloomberg terminals, you guys have pink gradients, you've got unicorns, you've got emojis. This is all great. This is the new paradigm of branding. But how did you get there?
00:36:40.790 - 00:37:33.502, Speaker C: A lot of it was very natural. I will say that Khalil, who's the design lead on our team, has been involved in the project actually since over a year before the V One launch. So he was kind of actually working on the UX design for the original interface and actually even for the initial proof of concept before I got the Ethereum Foundation grant. So he's kind of been involved for a long time, and so there's definitely always been this design element behind it. But I do think that a lot of the meming and the unicorn imagery, I think a lot of that came naturally out of sort of the community and growth and excitement around it. I don't think a lot of it was planned. I would say that maybe the unicorn emoji was like in the original UI, and that was maybe probably from Khalil.
00:37:33.502 - 00:38:15.140, Speaker C: But I think that it was really like the excitement and growth of the project itself that kind of fueled a lot of the memes. And then the memes kind of became a virtuous cycle where the memes then fueled future excitement and growth and all that. We now. Obviously now it has become like a stronger brand and it is something that we kind of think about more and that's why we kind of spent more time building out. The funny thing is that we were using the Apple emoji for a really long time, but you can't necessarily just use an Apple emoji as your logo forever. And so we worked on the kind of the newer branding that's on Uniswap.org and that we spent a lot more time and consideration on.
00:38:15.140 - 00:38:18.980, Speaker C: But that was kind of after all the community stuff.
00:38:22.920 - 00:38:23.670, Speaker D: Cool.
00:38:25.100 - 00:38:27.930, Speaker B: Mr. Will, would you like to ask your question?
00:38:29.980 - 00:38:30.730, Speaker D: Yeah.
00:38:33.100 - 00:39:16.360, Speaker G: So if you were to have just like a bunch of ETH that you wanted to efficiently deploy into a uniswap pair, so say the pair was like a token to token pair, like independent of ETH, and you wanted to swap on a Weath Token pair to get the appropriate amount of tokens for each side. Is there an efficient way to do this without having a lot of dust left behind? Because I know you can use either an arbitrary amount of ETH to get exact tokens or like vice versa. But how do you maximize that amount of ETH and still keep the right ratio of the two tokens?
00:39:17.260 - 00:39:18.184, Speaker C: Take that now.
00:39:18.302 - 00:39:24.356, Speaker E: Yeah, that's actually an interesting one. A similar case to what you're describing.
00:39:24.388 - 00:39:27.672, Speaker B: Is when you want to add to.
00:39:27.726 - 00:39:33.464, Speaker E: A weath token pair and you have weath or you have the token and that's actually more complicated.
00:39:33.512 - 00:39:33.676, Speaker B: Right.
00:39:33.698 - 00:40:05.172, Speaker E: Because then you have to figure out which fraction of the amount of ETH, for example, that you need to convert to tokens in order to exactly match the ratio in the pair. And that actually involves square roots and math and it's actually never perfect. There's almost always some dust. But okay, you're asking a slightly simpler question, which is actually pretty interesting. Yes, there is a perfect way to do it without dust. You do need some slippage parameters to control the safety of the transaction. But the way it would work is basically like token a and token b.
00:40:05.172 - 00:40:19.784, Speaker E: And then there's a weath token a weath token b pair. So three total pairs. If you have some amount of ETH, you are going to want to first look up what the price is in the Token A Token B pair. And so, you know that the relative.
00:40:19.832 - 00:40:20.780, Speaker B: Ratios.
00:40:22.480 - 00:41:14.660, Speaker E: Of A and B. And then basically you're going to want to look up the price of a weath and b weath and then use the ratio to check how much getting exactly some unit. Let's say the ratio is five to one, right? Check how much ETH it would require to get five tokens and then to get one token and then swap for exactly that amount. And then you know, because you've looked up the price already that that is the amount that you can add to the AB pair. But actually thinking about it, I do think that there's going to be some roots involved and so I actually don't know if it's possible to do without dust. I would need to think about it a bit more. But the one thing to note is that if there's only a tiny amount of dust due to rounding error math, it's typically like a trivial amount and you can actually donate it to the pair.
00:41:14.660 - 00:41:39.412, Speaker E: So if you can't deal with this for whatever reason, and you can't send it back to the user or you don't want to or whatever, it it is possible to just donate small amounts to pairs if it's again, due to rounding error and not like slippage. Because if it's slippage, you do need some parameters to control. If the price changes dramatically between when the transaction is broadcast and confirmed, you need parameters to control that safety margin. But yeah, I don't know, it's a bit complicated, but it's probably possible.
00:41:39.546 - 00:42:04.270, Speaker C: I also just sent a link to the chat, which is our swap to price example contract. So that's basically doing what Noah was initially saying, which is like, if you want to buy up to an exact can you can you basically use that? This contract shows you how and that maybe will help a little bit with kind of some of what you're saying. You can also ask us in the discord. It's a little bit hard to do fully live vocally, but.
00:42:06.880 - 00:42:19.536, Speaker G: I was messing around with it, so it is a little bit complicated to try and do it efficiently. So I was seeing if you guys had some insight. Yeah, I'll check out this yeah, yeah.
00:42:19.558 - 00:42:32.628, Speaker C: You can check out that contract. Also in our discord, you could also try to ping Dan Robinson. He spends a lot of time experimenting with uniswap math. Like a lot of time. And so you might be able to get some interesting ideas from him as well.
00:42:32.714 - 00:42:33.830, Speaker G: Awesome, thanks.
00:42:40.090 - 00:42:42.070, Speaker B: Any other questions in the chat.
00:42:45.130 - 00:42:45.494, Speaker D: Or.
00:42:45.532 - 00:42:46.946, Speaker B: In general, feel free to just unmute.
00:42:46.978 - 00:42:52.694, Speaker D: Yourself at this mean.
00:42:52.732 - 00:43:14.458, Speaker A: I'm also curious to just hear from Hayden and Noah about anything and everything. Like something that we haven't brought up about the process of like I'm sure you guys had some sort of contingency plan like once you've deployed, what does that look like? What if shit hits the fan? I'm curious to see that side of contingency plan.
00:43:14.624 - 00:43:55.180, Speaker C: These are immutable smart contracts. Really though. These smart contracts are immutable and non upgradable something that uniswap V One that differentiates it a lot from a lot of other projects. And Uniswap V Two even, is that a lot of projects kind of have these sort of built in upgradability migration stuff where you can change the underlying code of the contract or you can move liquidity out of the contracts to other contracts. Uniswap V One does not have anything like that. Uniswap V Two basically doesn't have anything like that either. The process of upgrading uniswap is very much like you make a better version and convince people to use it because it's better.
00:43:55.180 - 00:44:57.850, Speaker C: And the process actually has gone a lot faster than I was expecting. So, so far about, I think eleven to $12 million have already moved from V One into V Two since the V Two launch like three days ago. And so that's like about now V Two is about 25% of V One, which is pretty cool considering it took a year and a half for V One to build up to that amount. So it does seem like a lot of people wanted to migrate over. The general thought is it is still like somewhat of like you saw Maker had this sort of longer transition period and I think that Uniswap will see a similar thing. Something that gives me a lot of confidence that V Two will be the one that kind of gets more of the liquidity ultimately is that there's all these things that V Two can do that V One can't. And that kind of gives you a lot of network effects where if you want these Oracle features, then you need liquidity in V Two and you can't in V One.
00:44:57.850 - 00:45:25.480, Speaker C: If you want ERC, 20 pairs, you need it in V Two. And if you want to kind of be able to do stuff that these slash swaps enable, you need it to be in V Two. So sort of there's all these native use cases for V Two that aren't possible with V One. And I think that that will kind of lead to more usage and traction on V Two. But if people really hate it, they can stay on V One because it's a non upgradable smart contract who might have force you to use the new one.
00:45:27.610 - 00:45:44.090, Speaker B: So is that kind of like your logic behind a the reason why you guys don't do upgradable smart contracts and is that mostly because of those like you mentioned earlier, it's much more closer to the core philosophy of ethereum? Is that the reason behind that?
00:45:44.160 - 00:46:42.286, Speaker C: Kind of, I mean, it's also just like this practical thing. If I could migrate all liquidity on Uniswap, then no one using Uniswap would have any guarantee that their money is safe right now. People can put their money in Uniswap. The entire reason that Uniswap I think has so much traction because people can put their money in it and not have to worry about if it will be there. Because obviously there are various possible smart contract things or smart contract bugs, or if the token itself has some issue that conflicts with the Uniswap code or something. But in general you have this very high outside of some smart contract risk, you know, that your liquidity on Uniswap, the pool tokens are in your wallet, they're your pool tokens. And us having the ability to change the code underlying that just kind of breaks that entire fundamental property in a way that we're not really comfortable with and I think would drive away a lot of usage in my mind.
00:46:42.286 - 00:46:57.250, Speaker C: I think people like it because it doesn't have those properties and it does make it harder to iterate. And so that is like the trade off you're making, but it's a trade off that feels worth it to kind of keep these sort of underlying security properties.
00:46:58.070 - 00:46:58.834, Speaker D: Got it. Cool.
00:46:58.872 - 00:47:07.110, Speaker B: I guess it also kind of incentivizes when you guys do do a new launch like a V Two that you make sure that it's worth people's while, right?
00:47:07.180 - 00:47:41.858, Speaker C: Yeah, that's part of it, definitely. It means you have to build a better version of the protocol if you want people to use it. But it's also like, yeah, if us messing up the V Two deployment, like $50 million down the drain from everyone who's ever used V One, that's awful. Right? We don't want that sort of dangling over the process even though we are very security conscious. Like V Two was fully formally verified. It was built in a very security conscious way, even more so than V One.
00:47:42.024 - 00:47:47.486, Speaker D: But still, it's like, yeah, cool. Makes sense. Sweet.
00:47:47.518 - 00:48:08.060, Speaker B: I think we'll do one or two more questions and then probably look to wrap up. There's a question in the chat that says what are some of the things that you would like to have built on top of V Two? Maybe some weird yield hacks you can think of. I guess just basically anything interesting that maybe you haven't seen or been thinking about or maybe you've been too busy to build yourself.
00:48:10.830 - 00:48:55.538, Speaker C: Do you have any I have some ideas, but also not off the top of my head. I guess one is definitely like more usages know, just because you said the word. There's a lot of things that would be cool to build on top of uniswap, definitely like Oracle things, all that. But he mentioned yield hacks and so I'll go off of that as a prompt and I'd say that more kind of uses of liquidity tokens themselves. We've seen that a little bit with Aave. They recently announced that they're planning on adding uniswap liquidity tokens as a collateral source on Ave. And then that basically allows you to kind of modify your exposure as a liquidity provider.
00:48:55.538 - 00:49:47.610, Speaker C: Where, for example, if you were to let's say that you one yield. Hack is basically like if you provide liquidity on the ETH to die pair and you use the ETH to die liquidity tokens as your collateral. Let's say you put in ETH and then you borrow if you put in ETH into uniswap and you borrow the die component and then you use your liquidity tokens as collateral for that entire thing. Like, let's say you almost did it out of order, right. Where the liquidity tokens at the end basically are the collateral used to borrow one of the two underlying tokens. That's like a very big fundamental change in what the position is when you're a liquidity provider on that pair. Now, you're obviously paying borrowing fees, but you're also maybe earning lending fees if people want to borrow the pool tokens.
00:49:47.610 - 00:50:03.150, Speaker C: But you basically are able to reduce or remove your exposure from one of the two underlying assets, maybe reduce it or modify your exposure significantly. And I think that there's all sorts of kind of cool yield hacks there when you start using pool tokens as collateral sources.
00:50:05.250 - 00:50:06.240, Speaker D: Very cool.
00:50:07.330 - 00:50:30.840, Speaker A: Just a quick one. At what point do you think you'll stop hosting the V One front end? I know people hosting their own front ends kind of makes this not really matter, but when it gets under a certain threshold or it'll just sort of exist, you'll link to it in perpetuity for people who maybe went on vacation for five years or something.
00:50:32.330 - 00:50:59.060, Speaker C: Okay, there's hosting is one thing, developing is another thing. Right. These front ends are, like, open source. A lot of people are running different forks of them as well. There's also a lot of different interfaces to uniswap. I think, like, less than 20% of the volume even would go through one interface on uniswap. Most of the volume is from other interfaces, aggregators on chain integrations, Arbitrage bots, and all these native things.
00:50:59.060 - 00:52:03.106, Speaker C: We're very much like a protocol company, and so that's definitely even the core focus. There is kind of this idea of how can we verify that? How can we trust a specific URL that we go to, which is maybe like, a different issue from hosting directly? We'd kind of prefer to kind of have immutable IPFS kind of deploys, and then maybe we kind of vouch for an IPFS deploy, saying, like, oh, we know this matches the underlying code that we believe is safe. That's more of like a kind of a in terms of, like we're not really actively doing any development on the V One version of the interface. We're a small team. We can't really be maintaining multiple interfaces and also building a protocol. So we'd honestly like to see more interface work, move to other projects and other teams anyway. So the V One interface will probably be hosted on, like, a permanent IPFS link or something, and other people can have forks if they want to continue to maintain them, but it's not something that we want to actively work on.
00:52:03.106 - 00:52:12.710, Speaker C: But the v one smart contracts, right? That's what's important. The V One Smart contracts will live on ethereum forever and work forever. The code for the V One interface will always be open source.
00:52:14.890 - 00:52:16.520, Speaker D: Got you. Thanks.
00:52:20.730 - 00:52:26.540, Speaker B: Sweet think. Barring any last minute questions, maybe we'll wrap it up here.
00:52:28.270 - 00:52:32.574, Speaker C: With what Will said about flash swaps being used to kind of make the out of yeah.
00:52:32.612 - 00:52:33.680, Speaker B: Yeah, for sure.
00:52:34.050 - 00:52:34.414, Speaker D: Yeah.
00:52:34.452 - 00:53:05.034, Speaker B: Be sick. All right, cool. Well, I think with that being said, thanks so much, Hayden and Noah and everybody else who came and attended for your, you know, really appreciate the chat. Looking forward to seeing what everybody's built at the end of this week. So for everybody who's watching who's part of hack money, make sure you submit by the end of Sunday night. That is the deadline. If you miss it, there's no backseat, so make sure you get something in by Sunday night.
00:53:05.034 - 00:53:11.500, Speaker B: And, yeah, thank you so much again, and enjoy the rest of your hackathon and the rest of your days.
00:53:11.870 - 00:53:17.900, Speaker C: Thank you. Thank you for hosting this and having thanks, guys. Been an awesome event.
00:53:18.510 - 00:53:19.354, Speaker D: Awesome.
00:53:19.552 - 00:53:21.430, Speaker B: Take care, everybody. Bye.
