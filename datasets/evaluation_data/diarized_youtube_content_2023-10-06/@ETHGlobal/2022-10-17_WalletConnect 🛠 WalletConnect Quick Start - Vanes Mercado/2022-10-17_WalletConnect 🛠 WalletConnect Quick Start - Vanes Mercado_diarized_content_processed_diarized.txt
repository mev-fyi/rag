00:00:06.250 - 00:00:43.110, Speaker A: Hi everyone, thank you for coming out today. My name is Vanessa and I'm a developer advocate with Wallet Connect. Thank you for today's workshop. It's going to be pretty quick and easy. We're going to go ahead and show off our new web3 modal, version two and we'll get connected and we'll be using some React hooks. So let's go ahead and get started. So for those who don't know, Wallet Connect is a communications protocol and we connect apps to Wallets.
00:00:43.110 - 00:01:37.750, Speaker A: We have end to end encryption frictionless, UX easy integration, and multi chain support. We support any wallet, any app, any chain. So to get started, we're going to go ahead and get a project ID. And we can do that by creating an account with Developer Cloud. So if you don't already have an account, you should be able to scan this QR code and this will be kind of like you can go ahead and start coding too. So we want to make sure that everyone's running locally at the end of this with a full on integration with the modal. So I'll give you all a couple of moments to get that if you don't already have it.
00:01:37.750 - 00:02:38.046, Speaker A: And you can also create an account using your Ethereum address, so you don't actually need to create it using an email and password. Okay, so most people use React. So we're going to go ahead and make this example using React. So to get started, we're going to go ahead and create the React app. You can do that by using your terminal and importing or typing in NPX create React app, name your app, whatever you'd like. We were calling it Wallet Connect Demo. And then the imports that you'll want to use will be web3 act and web3 modal Ethereum.
00:02:38.046 - 00:03:17.774, Speaker A: Since we will be making the example on the Ethereum chain. And then we'll also import Ethers, the QR code over here is our GitHub to our modal three version two. So if you want to take a picture of that, you can actually also follow along with the docs along with this presentation it. So to get started, we're going to first import web3 modal. So we have an example here in your index JS. We're going to first start with importing web3 modal from web3 modal React. And then we're going to configure project that.
00:03:17.774 - 00:04:11.970, Speaker A: Project ID will be that same ID you just created from the Developer Cloud. We have different theme options, we have different accent color options as well. And this is the Ethereum object where you can go ahead and name your app. And to actually use this web3 modal, you'll actually import it and use it right below your consuming app so it won't actually wrap like in the past with our old modal. So that is something important to note. For the next step, you can go into your app JS file and you can add in that line import Connect button from Web three modal react and if you just return the Connect button modal you should be able to see a view very similar to this. You should see your connect button and when you click on it you'll see this new modal pop up and that's our new modal that we will be using.
00:04:11.970 - 00:05:02.218, Speaker A: So we want to be able to actually be able to pull in some information from the user when they authorize using that connect button. So we're going to do that by using the Use Account hook. And a couple of things that we can pull out from that is is connected, which is just a boolean which will return true or false and then the address. And so for the following example we're just going to create a terinary option so if the user is connected, then we'll be able to see their address. If they're not connected, we'll be able to render that connect button. And so this is kind of an example of what that should look like. So we get logged in and then you can see your account address.
00:05:02.218 - 00:05:42.380, Speaker A: Pretty simple but we kind of want to go a little bit further. We've got ENS names these days. We've got avatars that we want to show off. So we also have some hooks for that and one of those hooks is called Use ensname. And so very similar to what we did with Use account, we're going to do the same thing with Use ENS name and so we're going to destructure the object, take pull out data and then pass in the address, which is the user's address. And we just kind of updated the return statement here. So we should be able to see their name, their ENS name as well as their address.
00:05:42.380 - 00:06:39.340, Speaker A: So that's kind of what it should look like. But if you're doing this live you might notice that there's a moment where it takes a while to load the ENS name and you probably don't want to have that because that's not really the best user experience. So we're going to add and make a couple of adjustments here. We're going to create a new file under a new folder called the Data JS. And we're basically going to kind of move everything that we had in our index or in our app, put it into data, and then we're going to also now add this new property called is loading. And we're taking that from use ENS name hook. And so what that will do is if it's loading, then we're not going to render anything, we're going to just render loading so then the user doesn't actually see their address first and then they have to wait at that moment until the loading is complete.
00:06:39.340 - 00:07:27.934, Speaker A: And then this is the updated app JS. So instead of having most of our return statement now we're just passing in that data component. And so this is kind of what it should look like upon connecting. So you have that loading state and then once it's actually complete, now you have your information. And lastly, we can't really have the full user experience unless we can also give them the option to sign out. So this is where we use the use disconnect hook. So we'll go ahead and import that in the data component and very similar to the other hooks as well.
00:07:27.934 - 00:08:09.790, Speaker A: We'll just create a new const and call that disconnect. And then we'll add our button. So right underneath address, we add the new button. We give it the on click handler, which is going to be disconnect. And this is what that should look like. You get your button once the user clicks it'll, take them back to the Is not connected state which will render that Connect Wallet button. And lastly, if you have any more questions, you can take a look at our GitHub, which will also have other react examples if you want to go ahead and play around with those.
00:08:09.790 - 00:08:25.620, Speaker A: So that kind of concludes our workshop. I know we went kind of quickly, but I really wanted everyone to have a chance to really play around with the code and have this modal working. So are there any questions or are there any places where anyone's stuck?
00:08:29.800 - 00:08:35.190, Speaker B: We've got a project and we're trying to implement structured signed data.
00:08:39.580 - 00:08:58.424, Speaker A: You said structured, structured sign data like Aze does. I'm not too sure. We do have our engineering team here, so I'm going to kind of look at them for support here and see is that something that we are able to do at the moment.
00:08:58.542 - 00:08:59.210, Speaker C: Okay.
00:09:01.940 - 00:09:03.170, Speaker B: Can do it.
00:09:04.660 - 00:09:05.410, Speaker C: Maybe.
00:09:23.310 - 00:09:24.378, Speaker A: Right up here.
00:09:24.544 - 00:09:26.490, Speaker B: What does it take to onboard.
00:09:29.390 - 00:10:01.340, Speaker A: New blockchain? Well, a couple of things. So we're going to need wallets that also play with those blockchains. So we need to have the Wallet support first and then we can have the DAP integration as well. Are there any other questions? You it great.
00:10:06.190 - 00:10:20.460, Speaker C: And we also can mix this authentication with other authentications. For example, I wrote about World Coin that is compatible with.
00:10:22.190 - 00:10:52.790, Speaker A: Is World Coin compatible with Wallet Connect with the version one protocol or the version two protocol? The two. That's something that we can look into. I haven't heard that we are or not compatible with WorldCoin. But if you want to follow up with us at our booth after this, sure, we can answer that question for you. Yeah, thank you. All right, well, thank you very much for joining us today and have a great hacker weekend.
