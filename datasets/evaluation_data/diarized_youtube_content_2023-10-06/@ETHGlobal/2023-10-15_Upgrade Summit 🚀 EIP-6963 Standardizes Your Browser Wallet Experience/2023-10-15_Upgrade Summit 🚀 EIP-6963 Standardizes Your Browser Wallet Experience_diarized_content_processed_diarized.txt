00:00:07.610 - 00:00:43.260, Speaker A: I'm going to be talking about EIP 6963 or multiple injected provider discovery. So a little bit about myself. I'm born shabatacharya or Poido? I'm a developer relations engineer over at Wallet Connect. And just before we get started, I would kind of like to take you down the journey of why it came forward and how it started in the first place. So it all began with window ethereum, which was an unofficial standard by which most browser wallets function today. So it was first brought to life by Mist wallet back in 2015. So that's a long time ago.
00:00:43.260 - 00:01:27.666, Speaker A: And back in the day, the wallet ecosystem was very small and people kind of like started adopting this standard and it became as big as it is today. So most wallets you use nowadays would probably be using window ethereum. Right? But this led to a ton of issues. So I'm going to talk a little bit about why and what went wrong specifically. So window ethereum was, as I mentioned, an official standard. And it was that for a reason because it never was actually an EIP. Right? And as the wallet ecosystem flourished, as more and more wallets started to get into place and there was competition, it was impossible to accommodate like, multiple wallets with this technique.
00:01:27.666 - 00:02:16.950, Speaker A: And why is that? So the way window or ethereum worked was the wallet would inject its provider into your browser window. And when a lot of wallets try to push their providers into that single slot, the last one basically remains and is available for you or the end user. And I'm going to give you and explain me like five type explanation for this. So imagine you're in a playground and there are different kids with different toys and all the kids basically rush to you to show you that toys because you have the popular kid and you have to pick one quickly and you usually go with the very last kid and his toy. You don't get the option to basically pick and choose. And this is what's called race condition. And in the case of browser wallets, if you had multiple wallets installed, all of them would rush to share their provider to you and the last one would often win the race.
00:02:16.950 - 00:03:04.646, Speaker A: And what changed then? So, 2015, that's a long time ago. Something must have changed, right? No, unfortunately. So this unofficial standard saw more adoption by being referenced by another EIB, which was 1193, which was on a completely different topic. But that one basically set this one in stone. And even though the actual standard was about the ethereum provider API being mentioned by an official EIP, it saw like, massive adoption and wallet started fighting for the last place for this injection to occur right till date. I think this is one of the biggest UX issue in the ecosystem and that's basically the lack of choice we have for the end users. And this is where EIP 6963 comes in.
00:03:04.646 - 00:03:50.062, Speaker A: But before that there was another attempt. So 5749 was the first step in the right direction per se. It was authored by Kosala and he proposed like a window EVM provider subject where wallet would kind of inject all their providers in like an array and this would eliminate this winner takes most condition that came with window and ethereum. Even though this was good, it was a step in the right direction. It did not see enough adoption by wallets to actually go ahead and solve this UX issue. And that's where we kind of come our segue into EIP 6963 multiple Injected provided discovery. It's authored by folks like Pedro Glitch.
00:03:50.062 - 00:04:35.154, Speaker A: Casala, Richard Jake and a lot of other amazing folks and with directions from several big wallets like MetaMask, Encrypt, Xerion, Token, Profit, Rainbow, and I think recently even Coinbase announced that they would support it by the end of this month. So to put this issue finally to bed, protocols, libraries, wallets, everyone joined their hands for a better standard. And after months of extensive discussions, meetings and suggestions, we finally have a consensus. And it was promoted to final a couple of days ago. And again, I'm going to give you an eli five version of this one as well. So remember that playground example? So in EIP 6963, the kids would kind of take turns to tell you about their toys. You'd say like, hi, I'm kid A.
00:04:35.154 - 00:05:18.526, Speaker A: I had this really cool toy robot and the other kid would say, hi, I have this colorful puzzle and that way you, the end user, actually gets to pick and choose which kid you want to play with or which kid's toy you want to play with. The website you see here is EIP 6963. You can go ahead and test it out right now. It's available on EIP 6963 and it was made by me. So moving on, I'm going to kind of walk you through a bit of the process of how it works. So what happens is the DAP dispatches an event called EIT 6963 Request Provider. And in response to that, all the wallets start announcing their provider through EIT 6963 announced provider.
00:05:18.526 - 00:06:18.310, Speaker A: And once the DAP has listened to all the announced provider, each of them coming with their own provider and metadata. This metadata consists of like UUID, which is to distinguish between the different 1193 sessions the name which is what's going to show up in the DAP as the name of the wallet the icon, which is a data Uri which points to the icon of the wallet and RDNS, which is the wallet's domain name in a reverse order. So if it's, let's say Be instead of Xerion IO, it's going to be IO sirion, if you have programmed with Java before, you probably are familiar with the RDNS syntax and this way the user actually gets to choose which wallet you want to integrate with. Now, enough of showing I'm going to give you a demo. So if you are following through, you can just scan this QR code. This will open a code sandbox for you. I'm going to keep it open for 5 seconds and then I'm going to go over to the code sandbox to actually show you in an environment.
00:06:18.310 - 00:06:45.950, Speaker A: Okay, I think that's enough. Moving on, let's go to this tab. So over here, most of the implementation for EIP 6963 would happen through the Connect Wallet provider site. So as at that you don't really have to change anything except from like update your Connect Wallet options. So right now I'm using web three model V 3.1.0, which supports EIP 6963 by default. So there's no additional configuration necessary.
00:06:45.950 - 00:07:18.434, Speaker A: And what you can do here is you just need to initiate the web three model and pass in the configuration from Wanbi Config, the project ID, which you can get from Cloud Walletconnect.com and the chains you want to interact with. So right now I've just passed Main net, but if you want to pass more chains, you can just give a comma and write all those down. Right now I'm going to go over to this website, which is basically that one, but in a different tab. I'm going to click on oh, it's going to reload. Okay, that's fine. I'm going to click on connect wallet.
00:07:18.434 - 00:07:48.782, Speaker A: And as you can see, probably as a user you wouldn't have this many wallets installed, but since I had to test all these wallets, I had to install every one of them. But you see the benefit of this, right? Instead of having just one browser wallet solution, you have all these extensions kind of like popping up and you can pick and choose which one you want to connect with. So let's say I want to connect with encrypt. I'm going to go ahead and click on Encrypt. It's going to open and let's say I changed my mind. I don't want to connect with encrypt anymore. I want to use, sirion.
00:07:48.782 - 00:08:16.934, Speaker A: So I'm going to go back and now I can click on Sirion and I can click on Connect and that's it. I'm connected. So this is the UX issue I was talking about. So initially you would only have the browser wallet option and basically that's the only option you had. With this, you get to pick and choose which wallet you want to connect with. So right now, as you can see, my ENS, everything works exactly the same because the provider object is exactly the same. You can see my address.
00:08:16.934 - 00:08:35.438, Speaker A: I'm going to go ahead and sign a message. So I just wrote GM from online. I'm going to go ahead and sign it and I get the signature. So yeah, this is what EIP 6963 is about. And thank you so much for tuning in. I'd love to take some questions. If you want to follow me, you can go ahead and scan this link.
00:08:35.438 - 00:08:39.530, Speaker A: And if you have any questions about EIP 6963, we can get in touch. Bye.
