00:01:02.790 - 00:01:22.334, Speaker A: All right. Welcome, everybody. And welcome to Hack FS judging day seven. My name is Kartik. I'm one of the co founders of Deep Global and I am super excited to welcome all of you for this call. Today is our last day of judging. This is day seven and group number ten for judging.
00:01:22.334 - 00:02:37.610, Speaker A: And for those of you who don't know, hackaths was a month long hackathon that Eat Global did with Protocol Labs to have people play with and experiment with what's possible with storage and smart contracts. So over the past four weeks, we had over 470 hackers from 50 different countries, 19 different time zones work on projects of their own choosing to see what they can actually do in the world of decentralized storage and smart contracts. And I'm super happy to announce that over the course of this event, we had 132 projects that came out of this and we took this entire week to showcase all these projects to all of us in judging them over this call. So before we go into all of our demos for today, I want to quickly walk through some of the logistics of this event and how judging will be set up today. And kind of the quick gist of all this thing is that there will be twelve teams that are going to be coming on over the next 2 hours and each team will have four minutes for a demo and four minutes for Q and A. And to make sure that we have no AV issues, we've asked all of our teams to pre report their demos so we can go through all of them smoothly. A quick overview on how the event itself was set up.
00:02:37.610 - 00:03:33.678, Speaker A: The projects you're going to see today were done with groups of up to five team members. A lot of them are working on these projects individually as well. And everything we're going to see today was written over the course of the hackathon, which is in the month of July, and also all tools as a criteria to be eligible for this event. Everything you're going to see today was required to incorporate technologies and tools from the Protocol Labs and Ethereum Ecosystem. So we were seeing some really creative mixes of what you can do with decentralized storage and smart contracts. So as we move on to how judging is going to work, our judges are going to be looking at a project and asking them on how technical, original, practical and usable a project is. And we understand that everybody has different and varying skill sets and these four categories may not be enough.
00:03:33.678 - 00:04:16.186, Speaker A: So to make sure that we account for other possible ways to score a team, we have this catch all that we like to call the wow factor to help make it easy for all of our judges to score and rate these teams. So before we move on, I want to just emphasize this event is not a competition. The hackers are very much here to learn. We have so many beginners here at this event that are playing with what's possible with Filecoin and also Ethereum. And they're very much here to share the excitement and demo you what they got built over the course of the past four weeks. And the judges are here primarily to give feedback and encourage them and offer their suggestions on how they can take this to the next step. Just to kind of really emphasize this, not everybody's trying to become a business.
00:04:16.186 - 00:04:54.920, Speaker A: Our goal is very much experimentation and giving people the opportunity to play with and improve how we can make the ecosystem better. So with that said, these are the projects that are going to be coming on today and doing the hard job are going to be our three judges. I want to welcome AYUSH Ajusikaran from Protocol Labs, austin Griffith from the Ethereum Foundation, and Brantley Milligan from ENS Domains. And with that, I want to welcome them here on this call. And we'll kick off with our very first demo, and that is Team ERC 20 Reward engine for online forum. So I see Yao is here. Kick it off with sharing your video.
00:04:54.920 - 00:05:11.280, Speaker A: Hi everyone. Can you hear me okay? Yeah. Hey, perfect. So should I share my screen now and play the videos? That'll be great. And make sure you check the Share audio box. Yes. Okay.
00:05:11.280 - 00:05:45.340, Speaker A: Can you see my screen? Good. So I'm going to play just the two minutes video just to introduction about the background of this project and why we're doing it. And then after the two minutes, I'm going to do a real demos to you guys and hopefully it'll be fun. And a lot of questions from you guys and feedback. Welcome. So let's get started. Hi everyone.
00:05:45.340 - 00:06:49.630, Speaker A: Thank you for watching this video. We are the developers behind Everfo. Everfo is a decentralized online forum platform similar to Facebook Groups or Reddit, except you actually control the content, control your privacy, and there's a lot more to it. People actually creating their Groups on Facebook or Reddit without knowing that they don't actually have a lot of control of their own content. Think about what happened a couple years ago with Google Plus Communities. Think about just what happened last year with the Yahoo groups that being shut down. We don't know how long the Facebook Groups already can last, but it's certainly not forever.
00:06:49.630 - 00:08:06.246, Speaker A: We've been thinking about how we can build something in a decentralized way for online forms. So that great content, great discussions on the online commodities can live on forever. So we find out. IPFS, we really like it and we take a lot of ideas from traditional online forms and you sort of package them together and have it run on top of IPFS. But our vision about effort is not just about putting the content on the IPFS in a decentralized way, but we also think about in addition to the content, what about the governance of the communities? What about the ownership of the communities? What about the user? Privacies have confident knowing that the community he built on this new platform is going to last forever and it's actually owned by them. So these are the quick two minutes videos. I hope you can hear it.
00:08:06.246 - 00:08:58.978, Speaker A: Okay, so basically, just a quick background, we are building in extensions on top of Everflow, but the same extension will also be compatible with any other traditional online form platform. So the extension that we're building is an ERC 20 Tokens Airdrops reward engines for communities. Meaning that any commodities, whether they are crypto communities or they are not, they can still easily create their own ERC 20 tokens easily. So not only creating it, but also ability to reward it. So for the sake of this demo, I created two groups. So I'm going to demo it in what we have done in this month. So we started groups in Everforal and there is extension you can enable.
00:08:58.978 - 00:10:05.574, Speaker A: So this is specifically we built for this project. So once you enable it, you see the crypto AirDrop tabs, you can actually create a new token or you can actually use existing tokens. So for this demo, for this group, I create a new token, token A and then Token A. So it's actually connect to the testnet right now and actually creating the smart contract in the back end. So I think the testnet takes about a minute to create it. So without wasting our time, why don't we go to another groups that I also created to demonstrate the ability to not only create token, but also you can choose existing ERC train tokens. For example, this is just for the demo, but this is actually the testnet token that we created.
00:10:05.574 - 00:11:11.390, Speaker A: For example, you want to import your Bitcoin, you want to use Bitcoin to AirDrop to reward your member. You can choose it and then it will actually respond with the wallet that you can actually import the meam and you can actually set the rules to how you're going to reward your members. So for this demo, I'm going to just show how the import is being done here. Going to show you the MetaMask and then let me see it's not connected. So let's see, I transfer 10 00 10,000. Yeah, we also want to have some time for Q and A, right? Okay, so basically you import it and then you create it. You can actually add rules how you want to reward your members.
00:11:11.390 - 00:12:00.340, Speaker A: For example, you want to reward it one token for one new topic. For example, you enter the Miao and then you create one topics and then you were able to customize the rules. So let's say you create a new topics and then as a member you will see you are being rewarded from here, right here. Okay, so basically it's how the community owners to configure the reward to their members, to encourage participation and so on. And as a member, do you mind if I interrupt a couple of questions? Yes, sure. I'm just a little confused. Sorry, I can't hear you well.
00:12:00.340 - 00:12:28.058, Speaker A: Can you hear me now? Well, maybe it's my video. Okay, can you try again? Yeah. Okay, good. Yeah. Where's the information actually living? If I created some group and I'm making some posts and so on, where is that information living? I don't think I got that. Okay, so you mean the content, right? The post, right? Yeah. They actually stored in IP address right now.
00:12:28.058 - 00:12:57.620, Speaker A: So if I show that to you on the screen here, let's say I go to the groups. For example, I go to this group. Let's say I post this content here. This is old content, so let me think. So basically, when you create something here, you're not sharing your screen right now. Okay, sorry. Yeah, we could just talk about it.
00:12:57.620 - 00:13:38.320, Speaker A: Okay, cool. So basically you would see a IPFS logo. You see this right here? Can you see it? Yeah. So when all the content are actually synchronized with the IPSS, so these are the Nil being hosting this content right now. Okay, cool. Yeah. And is it also coordinated on Ethereum? So you're pushing the content to IPFS, but then there must be the app must have to talk to some kind of other I get that there's ERC 20 tokens and those are being used on Ethereum for reward systems and stuff, but does the content also go on Ethereum? No, the content is not the content is only on IPFS right now.
00:13:38.320 - 00:14:13.690, Speaker A: Cool. Yeah, right? But the Ethereum tokens are on. Right on, ethereum. So basically, in the future, we envision that you can actually use voting to select moderators with the same token that the owners AirDrop to their members by the reward engine and so on. So everything, hopefully step by step will be more decentralized over time. But for this project, we're specifically creating the Ethereum Airdrops Token. So that just a beginning of the journey of the decentralized governance, basically.
00:14:13.690 - 00:14:29.198, Speaker A: And that's kind of what Reddit is doing too, right? They have done a couple different tokens and they're trying to use those as incentives. So it's a cool example of that. The UI is gorgeous too. Yeah, I was going to say that too. Your UI is beautiful. I love how good it looks. Yeah, I wanted to comment on mean the UI looks great.
00:14:29.198 - 00:15:26.766, Speaker A: So just so I understand, do you have a team? Was this by yourself? Did you use a framework for the UI? How did you achieve this UI? We are using the Node JS and we've been building it for six months, just for everflow for the platform. But for this hackathon, we specifically spent last month just to build the ERC 20 tokens for Airdrops. So that project's been going around for a couple of months and we just launched it two months ago. And we are thinking about how we can sort of getting more attention and using this hackathon as a way to motivate our team to continue to work on things that's the most important to them. And we have three people, by the way. We have years of experience on online forms platform, so we build a lot of plugin for and VHB, so we know the pain of the form owners. And and I personally love Facebook's groups.
00:15:26.766 - 00:16:00.366, Speaker A: I think their UI is fantastic. But there's a lot of disadvantage to it, right. Being a more web guy. So I want to marry that interface with the old spirit of online forms where it's a lot more freedoms back in the day in the news groups, in the NTP, you can host your own news server and you can use your own client without too much control from someone else. So we wanted to bring back that kind of feeling to everyone. Okay, that's great. That makes a lot of sense.
00:16:00.366 - 00:16:27.606, Speaker A: So you're saying that the hackathon project is adding the ERC 20 functionality to Everforo? That's the hackathon project, yeah. Right. The way we structure it is so that the extension can be repackaged for other traditional forms. So that not just FFO, but any form that been around for 20 years can start incorporating this into that platform. Awesome. With that, we'll move on to our second demo for the day. Thanks so much.
00:16:27.606 - 00:16:55.582, Speaker A: Thank you very much. Thank you. I see the team is here, so I'll let Free Male come on and take off with their screen share. Hello. Hi Robert. Feel free to kick off the video to begin by. Hello.
00:16:55.582 - 00:17:31.126, Speaker A: Today I will be presenting freemail. So why is peer to peer messaging useful? First of all, the receiver and sender can be obfuscated and it is encrypted. So what makes freemail unique? First of all, it's extensible. It can be used with any email client, including Outlook and Thunderbird. We have authenticated encryption. The sender and receiver are obfuscated and data is stored on a decentralized database. So what is Freemail made with? First of all orpidb the IPFS? MongoDB Lib Sodium, three box and SMTP.
00:17:31.126 - 00:18:40.890, Speaker A: Server here's the Thunderbird client. And Daniel, if you would like to talk daniel okay, so here's the Thunderbird client. And in the back and we can see that running a nodemailer SMTP server that's sending messages to myself. And we don't really have a front end. We use a client, and in this case it's Thunderboarding mail. There's a locally stored address book that is in MongoDB collection that associates Ethereum addresses with Orbitdb documents to listen to. When a new header is detected in the Orbitdb inbox, it is decrypted and Link content is retrieved from the IPFS.
00:18:40.890 - 00:19:22.282, Speaker A: Link content is decrypted and sent to a local server. We use Devcop. From there we can view your email with your favorite email client. We use thunderbird for sending mail. Locally stored address books, also stored in a MongoDB collection, associates Ethereum addresses with Orbitdb documents to write to the email client. The email client, or Thunderbird, is set up to send to the outgoing mail server on port 1587. In actuality, we are running the server on port 1587 that intercepts this message, encrypts it, and pushes it to the IPFS.
00:19:22.282 - 00:19:57.526, Speaker A: After this, an appropriate header is generated and sent to the Orbitdb document. Orbitdb. So, each person has a general inbox, which contains a public key and is used to begin a messaging database. A new document database is created whenever a person starts messaging another person. Only these two people know the Orbitdb address of this document. So currently, email addresses follow this pattern. After first communication, orbit addresses for further communications are negotiated.
00:19:57.526 - 00:20:42.154, Speaker A: However, the first communication remains tricky. Currently, the general inbox contains an Ethereum compatible signature. For verification. In the future, put the ID of the general inbox in a three box profile to secure it with your Ethereum address and prevent spoofing. Thank you. Okay, so we currently cannot demo because my partner has Thunderbird set up and everything on his computer running Arch Linux. Any questions? I'll kind of kick it off and I'll let the judges take over.
00:20:42.154 - 00:21:40.640, Speaker A: But what made you want to do this? I mean, this is a super cool project, especially the port and reception here, but what kind of decided you to make this work? So, we thought about it. We thought about it. And how has this not been made yet? Basically, the receiver and sender are totally obfuscated, and no one, even the government, can find out what's happening. So we thought it was a really cool idea and it was interesting, and we would love to make this work. Yeah, no, I think it looks really cool, and we need something like the so does the demo work? All the think? Okay, Daniel is trying to say something here. Yeah, Daniel. Well, we can't hear you.
00:21:40.640 - 00:22:22.570, Speaker A: Trent is let me make sure there's not some maybe setting on our side. Looks like it's leave and rejoin or something. Yeah, you even could talk us through it. I'd like to know about the encryption. So do you fall back on, like, three box to handle encryption, or are you doing the encryption yourself? We used a library called we used a library called Lipsodium, and we're using that was this Lip Sodium? Yeah. We're using public and private keys to obfuscate headers and all the information. And this is all running on a local Node JS app that has to connect to a client.
00:22:22.570 - 00:22:54.766, Speaker A: Sorry. Pardon me. Can you hear me now? Yes. Okay, good. So sorry, I just wanted to more thoroughly answer the previous there was a previous question about the rough, like, the motivation behind this. And just kind of while Robert answered it greatly, it's helpful to think of, like, a practical example. So the real thing that I thought was, like, an application was, for example, the case of Edward Snowden.
00:22:54.766 - 00:23:28.382, Speaker A: Right. Where he wanted to communicate with the journalist. I forgot her name, but in order to communicate with her, if I'm not mistaken, he needed to create, like, an email account somewhere. Right. Because he couldn't constantly run his own server. So he would go through the Tor network onto Gmail, create a new Gmail account I think it was Gmail through said Tor network, and then through a third friend negotiate the public private keys right. Sorry.
00:23:28.382 - 00:24:10.906, Speaker A: The public key that he would that. So our system is supposed to make that bit simpler because it's impossible to tell the difference, kind of, between nodes in the IPFS network, as in you don't know where a message is actually coming from. Right. The Tor network here is not a problem. There isn't, like, a client server model where the server could maintain record of who's connecting and so on. Were there any other questions? I'm sorry. We bounced around with encryption, but I think it got answered.
00:24:10.906 - 00:24:58.266, Speaker A: Yeah. And does this currently work? I'm sorry? Right now, the encryption things are not being encrypted fully, but as it stands, yeah, I can create an account and I can send an email, and it does push it to IPFS, and then it does receive the header. I have not tested this with multiple accounts. I've only tested it sending one email to yourself. But the two systems, the server and the system that's supposed to send the email to your IMAP server. So, like, the SMTP server, sort of. And the Sender program, they both clearly do work.
00:24:58.266 - 00:25:15.460, Speaker A: And the IPFS is the link between and I can kill the program, start it up again, and it will receive the emails that were sent. You know, it's persistent in IPFS. Yeah. Great. Cool. Yeah. No, I think this is great.
00:25:15.460 - 00:25:31.234, Speaker A: I definitely agree with your how has this not already been built yet? Sentiment. I think there have been some attempts at building something like this, but it's great. Good job. Yeah. Thank you. I think it's called mailchain. It's something like mailchain.
00:25:31.234 - 00:25:52.794, Speaker A: I think I've seen something like this before where they use Ethereum addresses to encrypt messages like email back and forth. But I think what you guys have done here with the hijacking, the SMTP, is something that I've never seen before. Like, getting it to interface with traditional client was pretty brilliant. I think that was a cool move. Well, thank you. It's only, like, a fake. It only interfaces, proxies.
00:25:52.794 - 00:26:11.280, Speaker A: It basically it doesn't send it to, like, Gmail or something. It doesn't? Yeah. Well, thank you. Thank you. Awesome. Thank you so much. Greenmail and with that, we'll move on to our third demo, and that is Reddit dow so I'll be playing this video for the team, and then the team will be here to answer any questions.
00:26:11.280 - 00:26:57.410, Speaker A: Hi. Welcome to the demo video for the abridged Hack FS hackathon submission. We're here to empower cooperative economies with Reddit. The vision for this project involves leveraging cryptocurrency to encourage humans of Reddit to create value for their specific community. And the problem we solve is really simplifying the scary user experience of onboarding into Web Three. Today, the onboarding experience prevents about 99% of people from using crypto. Due to standards like MetaMask, transaction costs are simply intolerable.
00:26:57.410 - 00:27:45.460, Speaker A: And so our solution is to use Dow Ops, which is building Web Three and Web Two, and creating systems that integrate both of these technologies in order to create a nice and fluid user experience. The stack includes the Abridged SDK, a Taurus login and OAuth system, as well as K channels to scale. And our solution includes this advanced private key management system, state channels and a relayer. And of course, using the Reddit interface to make token distribution extremely seamless. Time for the demo. So I'm a new user, I'm called Etherworld, and I'm just joining this new subreddit that I really think is super cool. I'm like reading through this new thread and be like, wow, this is awesome.
00:27:45.460 - 00:28:34.414, Speaker A: And the purpose of our demo really is making it as easy as possible for people to actually get onboarded and begin receiving tokens. And so I'm just hanging out and boom, immediately am greeted by a bot who's like, thanks for commenting, please claim your reward. And I don't know what this means, really, I don't really need to know what this means, but I'm immediately directed out of the page to a new wallet. This is using the Taurus login with the bridged contract account on the back end. In the future, we have some ways to make this more seamless to be all built within the Reddit interface. But right now this is what we're building with. We now see that, okay, yes, I have received one moon, which is really epic.
00:28:34.414 - 00:29:29.694, Speaker A: Like, I didn't do anything, I didn't even know what a moon is. But at very least I am able to actually start monitoring what this means. And if it does have monetary value, I can immediately see that the next piece here is continuing to understand. Okay, so if I am around here and I'm like, thanks Lurkey bot, thank you for the moon, I really appreciate it. And the system will continue to give points based on contributions in this page. And I know this is really gameable for now, but it's a very simple proof of concept and eventually we can make a system that's more modular that people will be able to or admin, will be able to monitor or provide different solutions for. And so once you have these moons, and I just received another one for that second comment, I can withdraw from the K channels.
00:29:29.694 - 00:30:09.310, Speaker A: So this withdraw is actually going to bring the moons from layer two down to layer one. This is using the Abridged relayer. And the nice thing about the Abridged relayer is that it is configurable. So you could have within this reddit an ability to add lurkeybot or at some of the other users and send moons either on layer two to other people, or you can actually withdraw those moons onto layer one using the relayer. And this relay is configured for ETH payments. And so it's actually sending some ETH to the user so that they can pay for this transaction. It's not requiring any refund.
00:30:09.310 - 00:30:46.026, Speaker A: And the relayer is also just the cost of a single transaction. And the other piece here is that you can actually pay in moons and configure the relayer for paying. So in moons. Awesome. That was a cool demo. So I'll let the judges take over questions, but maybe one quick clarification for myself here is this is not a Chrome extension or anything else. This is just a Reddit API interfacing as normal comments that you now link to a bridge, is that correct? Yeah, that's exactly correct.
00:30:46.026 - 00:31:00.660, Speaker A: So just integrate into the reddit API. Yeah, like custody is a cool thing to start talking about. Kind of piggybacking on that. Sort of like they're logging in with Taurus. So Taurus handles the private keys. Is that how it right, that's right. Cool.
00:31:00.660 - 00:32:00.862, Speaker A: So we had this notion of what we calling Auth keys. So it's a contract based wallet. So your first Auth key, which is counterfactually generated based off of the salt from your private key that's coming from Reddit. And so you can have this guardian access. So in the background we have a default where and we'll expose for intermediate and advanced users the ability to remove this guardian key. But it allows for the ability, what we call incremental decentralization, where at the very beginning we help you walk through this, where you have a guardian by default and then at whatever threshold, if you're an app provider, let's say, because you're not going to put your life savings in crypto when you're first starting out, right? And so you are going to put a dollar or $5. What do you mean? Well, not until you understand key management.
00:32:00.862 - 00:32:50.158, Speaker A: Right? And that's the big UX hurdle. And what we're trying to do is align incentives here. So when you're starting out, you're dipping your toes in, you have a couple of dollars in, maybe you've gotten some free moons and maybe you get a little bit of ETH, a couple of dollars worth, a cup of coffee worth. And so you're not really caring so much about if I have a guardian or whatnot, because there's not a lot at stake. And then once you get into it, once you're generating comments on reddit, once you're accruing more value, you're like, wait a second, who has access to this money? Is this really my money? And your incentives are more aligned when you as a user are interested and motivated because now you have more at stake. And so then you can remove your guardian if you want. And we call this incremental decentralization.
00:32:50.158 - 00:33:07.146, Speaker A: Then instead of getting hit with advanced mode at the very beginning where you have to learn about key management, we defer that to when the user is comfortable when they're incentivized to learn about it. Very good. No, I love good onboarding UX. Go ahead, Bradley. Yeah, no, very good. So. Maybe I missed this.
00:33:07.146 - 00:33:32.942, Speaker A: So your project was called Reddit Dow. Was there a dao that I missed? Yeah, let's talk. Yeah, I'm happy to dig into that. That was actually the original we pivoted a few times. We also were thinking about using Xdai originally for the scaling solution, which we talked to Austin to a large extent with. I think Dao, though, is a relatively flexible term. And to me, honestly, any token network, I think Ethereum and Bitcoin are effectively DAOs.
00:33:32.942 - 00:34:09.402, Speaker A: Right. They're coordinating people across the world to do a specific thing for the benefit of that network. And everyone who holds that token have the incentive to make it more valuable. Right. So definitely using Dow in a more flexible way, there's no voting or fund management necessarily within the system that we built, but there certainly could be very easily if you're already setting up a noncustodial wallet for them and giving them tokens. A natural use case would be to use those tokens for a little utility within some kind of system like this forum. Yeah, totally.
00:34:09.402 - 00:34:42.438, Speaker A: Essentially what we wanted to do was be able to incentivize upvotes or down votes and those would actually be Dow votes. But the limitation of the Reddit API is that you don't get to see who upvoted or downvoted. You get an aggregate total. And so instead of having some complex UX, we decided just to award anyone that just comments a couple of quick questions. So I think this project is great. I think it's really creative. I feel like I didn't get it initially, but now this makes a lot of sense that you're definitely solving a very real problem here.
00:34:42.438 - 00:35:34.646, Speaker A: I am curious to know what was your because it feels like the real problem you're solving is definitely like an onboarding problem where getting people onto web3 world of sort is that what you started out to solve or did you all just kind of end up there? That was the main motivation. And we think of the layer two is actually a UX issue. Not so much it is a scalability solution, but the way that we have our contracts and our Meta transaction relayer people can get onboarded without having this chicken or the egg. Like needing ETH at the beginning. Because if you start out in a channel, you can just send funds in a channel so it doesn't cost gas. And then when you want to withdraw, then we actually require ETH because in our Meta transaction relayer it deploys the counterfactual wallet and then gets refunded back. And so the layer.
00:35:34.646 - 00:36:03.330, Speaker A: Two issue combined with the smart contract and the CF wallet allows for an easier onboarding experience that allows them to incrementally decentralize. So it definitely was like an onboarding kind of focus. Makes sense. That's cool. Really important question, James. Where are you right now? Me? I'm in my car. I'm on the way to pick up my sister from the airport.
00:36:03.330 - 00:36:28.140, Speaker A: Not your standard hackathon judging, right? That's right. Amazing. All right, well, thank you so much, both James and demo. And with that, we'll move on to our next project. So please welcome Ed coin by song. So, I know you're here. Feel free to share your screen.
00:36:28.140 - 00:37:17.660, Speaker A: Hi, everyone. Hi everyone. My name is Song and I'm a full stack developer. I built this red app called E Outcoin, which rewards customers with tokens when they make a purchase from a restaurant. So right now, many restaurants are struggling on gain customers because of the pandemic. Customers feel discouraged to go outside because of restrictions, especially to social distance. Most small restaurants do not have the budget to promote their menu or advertise it.
00:37:17.660 - 00:38:27.310, Speaker A: So here is where this red app can help. It can reward customers with tokens when they make a purchase from a restaurant, which will encourage customers to go out and eat at these restaurants and earning tokens. Customers can redeem these tokens for discounts or prices. Restaurants can promote their menu by creating profile and upload image of their food and drinks with descriptions and price on this app for customers to see, all the image that the restaurant upnose will be stored on the freak storage. Tokens are created using the ERC 20 standards to work on the Ethereum platform. And it's time for the demo. So, here is the homepage of the website and we click on See Restaurant in the list of restaurants and we can see the deals for this restaurant.
00:38:27.310 - 00:39:23.460, Speaker A: Here's the deals. And if you want to create a profile for restaurants, then you can enter the name of the restaurants and the location of the restaurants and the descriptions. And we can upload the image of the restaurants and we click on Create Restaurants. The image will be upload to the fixed website. So let me refresh. And there is the image of the restaurants. And if a customer buys something from this restaurant, the owner can send tokens to these customers.
00:39:23.460 - 00:40:23.240, Speaker A: And right now, the owner has 10,000 EUP coins. Let me copy the address of the customer, which is account three and paste the address of the customer's address. And the owner can send like 200 Er coins to this customers and then you can confirm and it is successful. And you see the owner sent 200 tokens to this customer. So you can see the transactions. And when I switch to account three for the customer's account, the customer has 200 Er coins. So this is what I have and thank you for watching.
00:40:23.240 - 00:40:51.406, Speaker A: Awesome. Thank you so much, Song. I'll let our judges ask some questions or share their comments. I'd love to see like a gas solution here, like adding in metatransactions, something that you'd be handing out, like a signature based system. Because a lot of these probably could be used for interesting things. But it's almost like you got to worry about all that gas that's going to be going into distributing those tokens. I'll pass it along though.
00:40:51.406 - 00:41:14.760, Speaker A: That's one of my first thoughts. No, that does make sense. Who can create a restaurant on this? Can anyone do so? Yeah, any restaurant owners, they can contact us. Discuss. Yeah, this is really cool. I'm sorry, I thought you were done. No, go ahead.
00:41:14.760 - 00:42:23.770, Speaker A: So you get these tokens and I'm sorry if I missed this. So what's the economy with the tokens? Can you talk more about that? Originally I was thinking of creating a token which they can use to redeem rewards, like discounts. They could redeem the tokens for discounts on certain restaurant products or get some high price, basically encourage customers to go out. Interesting. So I guess your website would need a portal for maybe eventually hook into something for ordering food or something like that, or doing something like the redemption process. Did you have anything with the redemption process yet or you just have ideas right now? It's okay, I'm just wondering. Usually I was thinking the customer maybe they could order from the website and then it will send transactions to the owner's account.
00:42:23.770 - 00:43:15.018, Speaker A: The owner will get notification and then once the customer goes to the restaurant in person and picks up the order, then the owner can approve the transactions and then they will earn the tokens. Awesome. Maybe one question. Yeah, it was one question for me. What was the experience like at the hackathon? Was this the first time you played with smart contracts or kind of what did you sort of end up spending most time on? Mostly the idea and then the design into the blockchain because I was very new to blockchain and then I had to learn how to create smart contract using Ciderd. And were you a team of one or do you have other folks on your team? Oh, I'm by myself. Okay.
00:43:15.018 - 00:43:51.640, Speaker A: I was doing everything, the design, the front end, back end, and wow, good job. Interested in that? Yeah. What was your tech stack? What did you use? Like, what tools did you use? How did it go? Oh yes, I used React with bootstrap for the front end and the back end. I use Node JS where express image to the free storage. And then I use Solidity to create smart contracts and tokens. And then I use the ERC 20 token standards from Open Zeppelin probably. Maybe.
00:43:51.640 - 00:44:14.222, Speaker A: Cool. Awesome. Well, I'm glad that you were able to demo today and hope that this was a good exercise for you to see how smart contracts work and how front end development works. So I wish you continue building on this, and hopefully we'll see you on the next hackathon too. Yeah, keep hacking. I love it. Okay.
00:44:14.222 - 00:44:48.700, Speaker A: Thank you. Congrats. And with that, I would like to welcome our next team to demo the Kyber Project. Hey, I think if you're ready, feel free to unmute yourself and start the screen share. If not, we'll wait a few more seconds. I believe we're waiting for Calvin. Looks like he's in now.
00:44:48.700 - 00:45:21.382, Speaker A: Hey. Hello. Hey, Calvin. Okay, let me get the thing started. Okay. There we go. So this is just the draft UI that we have.
00:45:21.382 - 00:46:02.206, Speaker A: It's not entirely complete, but that's kind of like the article, but I'm just going to play the video. Sounds great. Due to a psychological party affiliation hi, welcome to the Kaiper Project. This is our team. We have the front end, back end, and our AI engine. What is the Khyber project? Many voters generally vote within the same party, and this is largely due to a psychological party affiliation. Kyber Project is an effort to minimize partisan voting and get voters to consider issues that are important to them.
00:46:02.206 - 00:47:25.470, Speaker A: Instead, the main aim of our project is to have our users register on our portal and then post or upload articles of their choice to our Web three application. They also have the option of voting for articles relevant to them or relevant to the issues they face or relevant to their political opinions. Based on the user's voting preference, our AI engine recommends them a list of political candidates who also align with their who also align with the user's political views. So this is the technology integration that we chose to go with. So futures will be our front end three box for user authentication and data from the user will be pushed into text files such as Articles and Postings, and from that it's stored into IPFS for long term storage, and any modifications to those articles will be tracked. Our AI engine will parse into textile for the articles to analyze data, and we use inferior to connect to Ethereum. The users will be accessing our front end via Webpage, with which they are greeted with a quick message letting them know their political concerns matter.
00:47:25.470 - 00:48:12.334, Speaker A: And our service will help recommend a candidate that best aligns with their concerns. Once the user clicks the Get Started button, they will then be asked to check off all the issues relevant to them. Once they have completed the form, our backend systems will push a candidate recommendation to the front end for the user to see who best aligns with their concerns and for the back end. For the Ethereum network, we have the solidity smart contracts, which are deployed on the rockstain testnet. And these smart contracts store user addresses that are passed from three box and store votes and IPNs of the articles. For the server side, we decided to use COA and node. This is to expose the Ethereum backend as an API for fetched calls from the Python AI engine.
00:48:12.334 - 00:49:01.722, Speaker A: We use Ethers instead of Web Three to expose the Ethereum backend as node modules for the front end for its read and writes into Ethereum contracts. We use Infuria as an Ethereum provider to connect to live contracts on the testnet. And for storage and caching, we chose Textile using the Hub. We allow for creation of organizations from developers and Hub user groups for the authenticated users via three blocks. And we chose Buckets for hot storage of articles by users and three box for data processing for the AI engine to make candidate recommendations and thread DB as the dependency for three box. This is slide seven, the Nerd pipeline. The Web application feeds into textile.
00:49:01.722 - 00:49:41.750, Speaker A: We run the Nerd pipeline, which is a batch processing pipeline to pre compute all of our AI for the application so we don't need to do it on the fly. This is done by retrieving the news article link submissions. And then there's two things that can happen. Either the links have already been submitted, so we retrieve cached results, or we parse article for text content. When we do the parsing, the two main things that we want to extract are topics and keywords. Once topics and keywords are extracted, where a topic could be a popular keyword or collection of keywords, we do named Entity Resolution and Disambiguation or Nerd. This process allows us to use things, not strings, and it really helps with the downstream logic and functionality.
00:49:41.750 - 00:50:01.890, Speaker A: Once the Nerd pipeline is complete, we're able to provide updated metadata for the back end, which feeds back into textile. Amazing. Thank you so much for that demo. I'm sure everybody has a lot of questions, so I'll just let them jump right in. Cool. Yeah. Maybe I'll go first on this one.
00:50:01.890 - 00:51:04.420, Speaker A: I think this is an interesting, if somewhat unconventional choice for kind of a decentralized Web project, I guess. A couple of questions. First off. Yeah. Why do you think this should exist in the D Web space? And also, does this already exist? Do you feel stuff like, I think Eyesight with and the other kind of political quiz which candidate aligns with me solve the same problem? So one of the main things that we wanted to do is to kind of track consistency of candidates so articles are pushed into the Web if they're modifiable or can be taken down. I think pushing the articles into IPFS allows for a censorship resistant method of tracking what candidates do in the past. And you can see that over time throughout history.
00:51:04.420 - 00:51:31.246, Speaker A: Yeah, it makes sense to be using something like IPFS and Ethereum where you can be writing this kind of stuff. Kind of like signing the hashes of the articles that get trained by the ML or whatever, and having that kind of attestation on chain. It's a good way to kind of keep that from being tampered with because there's a lot of scary stuff that could be tampered with. Like I can see why IPFS and ethereum. Yep. I definitely find that argument persuasive. Yeah.
00:51:31.246 - 00:52:53.746, Speaker A: And then I guess the other question is, AI touches a part of my brain that doesn't work very well. But can you describe how you answer the question of which candidate aligns with a certain user's views, at least at a high level? Excuse me? How do you make the final decision of essentially which candidate should I vote for, if that's what the answer? Oh, so the thing that we're working on and I think Tyler could describe it better, but we're associating kind of, like, tags of what issues each article talks about, and actually, I think Tyler might be able to explain better. Yeah, I'm not sure I can add too much to what Calvin was saying because it was working. Yeah. So you have a number of issues that the candidates are aligned on, and it's actually very hard to find that alignment across news stories just because they're so party oriented. And so you have to do some work to get there, and then so just seeing what candidates are saying across an issue, and then I think we have a pretty straightforward interface right now where you can see which issues matter to you. So I'm from ENS, and you guys put yourself down for the ENS prize.
00:52:53.746 - 00:53:22.594, Speaker A: I guess I'll just ask you while you're here, I didn't hear ENS in that presentation. Did you use ENS or did you not? So that was something that we wanted to use eventually, but we weren't able to touch on it. Yeah, that's fine. Just wanted to know. Cool project. Thank you. Yeah, I think the one thing that it's lacking is, like, the Flashy demo where I come in and say, I'm against this, and it tells me and I see it.
00:53:22.594 - 00:53:55.654, Speaker A: Right. Yes. Well, thanks again for demoing, and hopefully you can ping our judges after you have a demo video ready for them to check out. So I hope you continue working on this thing. And with that, I'll move on to our next team, and that is Project Plasma Connect. So I see that he's here, so I'll just let him kick off and share the video. Hello, everyone.
00:53:55.654 - 00:54:52.000, Speaker A: I'm Santosh and I'm going to present you the plasma connect. So here we go. A brief info about the plasma connect. Plasma Connect is a simple client side of a dow where it aims to connect or grow the people who wants to donate blood or plasma for people who are in need. And to achieve this, what better way than spreading the data decentralized and coping up together? Let me dive into the demo. So this is a client side. I'm currently using Magic Link to connect onboarding any non blockchain people directly connected to the Ethereum world.
00:54:52.000 - 00:58:12.202, Speaker A: As soon as they connect, they have to provide certain details that's the Ethereum address which can be an Identifier apart from they do get a decentralized ID plus ethereum address. Secondly, they have to provide their personal details which the soldier canvas is their ID which is created after they present the information it. So when they present the data is then first encrypted it then push to Ipsloyed on the smart contract directly rights to the smart contract it can see a soldier canvas getting updated with a new. So this is simple client for plasma connect. Let's go as stack the functionality happens here. Whatever the data is pushed to IPFS, shout out to Austin for this. Amazing, right? So the data when it's pushed to IPFS is addressed to the Dao, the people who is going to organize the event so easily one entity where people organizer can connect and retrieve the data or where the dow can be on top of everything.
00:58:12.202 - 00:59:23.940, Speaker A: And the dow provides incentives for warriors to organize themselves, to incentivize, to work together and to contribute or conduct drives and donate plasma or blood. Simple working the data is then decrypted decrypted data again we can get the decryption with the sign signature, we can get back the identity of a person, then later we can communicate back via IPSS messages. So only thing we would require for the plasma donation is you have to know whether the person has donated the blood last three months, whether he's healthy or what kind of blood did he cause, what kind of blood does he have. So according to that, we can match the donor to the receiver and connect to the person everything decentralizedly and security. So this is plasma connect. Awesome. Super cool.
00:59:23.940 - 01:00:36.650, Speaker A: I'll let her just ask any questions. Yeah. Can you tell us about what was the hardest part of making this project? The hardest part would be onboarding. So when you consider getting people to use it, the initial idea was to replace whatever the Google forms people are using to collect the data, rather have it a single ledger of single database, a corpus of data. People can dump that data and people can analyze and contact the person who owns the data directly. Which could be possible when each person have a did in this room or ethereum address or any did in this way. When this decentralized aspect comes to a point, people have to be connected to a blockchain.
01:00:36.650 - 01:02:16.246, Speaker A: So rather having a server or centralized system monitoring and misusing or having a replicate data because one person might be submitting multiple forms to multiple organizations and that cluster of data is just a redundancy in structuring and data. So onboarding the user would be one aspect and engaging the user because this is not something that once he has been written, once he has submitted the form, every period of time, every three months or every time there is a need, everyone has to be notified. Like IRSS, like a fee saying that there is a requirement for the donation of the blood or every time the person who donates the blood has to update the database saying that I have donated a blood for that updation. Simple crud they have to incentivize twice to engage them is another problem. So those aspects which were initially solution for web two are the bottleneck for web3 because it cost on web3, it cost to make a simple write operation. It cost to ping a person in. Those aspects are the onboarding problems for any common user who wants to use a D app.
01:02:16.246 - 01:02:47.586, Speaker A: It's cool that you're using magic though. That's a good way to do the onboarding. That seems like that could help a little bit to kind of give them that web two feel. This seems like something you'd want to be very careful about, putting a lot of identifying information about the person and health information. It almost seems like a problem for zero knowledge where you could use zero knowledge to prove that you gave plasma without having to give away any details. And by proving that that could give Chew access to something or some kind of reward system like you have set up. It's pretty cool.
01:02:47.586 - 01:03:00.902, Speaker A: It's a cool project. I think we're out of time, but I'd love to talk about your tech stack sometimes too. That was cool to see building there. Keep on hacking. Hit me up if you have any questions. Too. Great.
01:03:00.902 - 01:03:35.250, Speaker A: Thanks Antosh. And with that, we'll move on to our next demo, and that is Powergate docker hub with Aloke. So look, if you're there, you can start playing your video. Yeah, we'll just start with the video. And this is unedited, so please bear with me. No problem. So now we're building the docker cluster for Powergate, in which I've added the docker registry image, which is pointing to the Powergate cluster.
01:03:35.250 - 01:04:33.872, Speaker A: Initially it fails because it can't find it, but then finally connects and creates the new token for the API and then the new store, the local DB. And then we're just going to push an image that we have just built and then just see what happens. As you can see, a bunch of ops are happening on the docker image. There are a bunch of push operations that are happening. You can see the put content and all these are like generating like IPFS hashes underneath. So add into hot storage. Yeah.
01:04:33.872 - 01:05:52.754, Speaker A: So the IPFS hash and we also store the job IDs for the storage configs on Powergate. So as you can see, all the images, the sub images are getting pushed. These are just like a bunch of messages that we think hot storage successful. And then we also see the testnet trying to create execute the deals. So Docker is doing this for some reason. It's like trying to push some things and then it just cancels in the end and then it just redoes it again. So that's happening a bunch of times.
01:05:52.754 - 01:06:42.204, Speaker A: But I don't have the time to see why exactly, but it does finish eventually. I think we can go to the question. So maybe, Alic, I think it would be super helpful for you just kind of explain to all of us one more time what you wanted to do and sort of how close you got to it. I know we saw the demo, but just hearing why and what it is is going to be helpful. Yeah, sure. So basically what I want to do was create Docker Hub has like a storage driver which you can extend and write different storage backends to support. So I wanted to enable Powergate support for that.
01:06:42.204 - 01:07:29.036, Speaker A: So I built this storage driver. The Powergate usually has like a key value type interface and the Docker Storage Registry is sort of a file system interface. So it's mostly like just connecting the two and having an intermediate local DB which sort of stores temporary manifest information. And then we can even back that manifest up so that to IPFS or some other or to Powergate and then instantiate other clients in other machines and things like that. I hope that was clear. Sorry. Just like adding where I got to.
01:07:29.036 - 01:08:00.440, Speaker A: So I was able to push images and then make the deals on Powergate, but it's not like 100% working. It's still a work in progress. But yeah, I was able to push and create the deals and using the Go client for the Power gate right now. This is a really cool idea. I like it a lot. I'm curious, did you talk to any of the textile folks during hackerfest? Actually, yeah. So the thing is, I wanted to find some teammates.
01:08:00.440 - 01:08:33.136, Speaker A: I had put it up on Slack, but it's just like most of the people were working on JavaScript type projects and I'm from a Go background, so I didn't find anyone. And then I had a lot of work on my main job, so I didn't have too much time to interact during the hackathon. But I think the Go client was pretty straightforward. And I've been working on IPFS for some time in my main job as well. So I was kind of aware of what things are happening and things cool. Very cool. Yeah.
01:08:33.136 - 01:09:30.656, Speaker A: No, the reason I ask is I'm sure the Powergate and textile folks would be very interested in seeing this project, so we should definitely make sure that they become aware of it. But no, I think it makes a lot of sense. Definitely some weirdness that you might have to iron out, but it's a really good idea. How did you come up with the idea? So actually this idea was posted in the initial ideas for the Hack FS, and I started looking into how we could do it and then I came across the Docker Storage registry and then it was pretty straightforward to do because the Powergate, they had this whole Docker compose setup. Right. I just had to add the Registry image there and then have my own Registry having this custom backend integrated. And then I could push using the Docker API.
01:09:30.656 - 01:10:13.110, Speaker A: The HTP API. Nice. What are your kind of next steps or where do you want to take it beyond bug fixing? So I think what I want to do is I want to have another command or an API to do the backup. Right now, I do push to the deals immediately when I'm writing the data, but that's like a slow process. So it would be good to have an intermediate step where we just push to IPFS and then have another API, which then says that okay. Now back up to filecoin so that then I could get a new hash and then I could share that across and use that. That sounds like a good idea.
01:10:13.110 - 01:10:46.588, Speaker A: Very cool. Good project. Thanks. Yeah. So where do you plan on taking this? Do you plan on kind of finishing this out? Yeah, I definitely wanted to finish it. I was not sure because as the hackathon did ended, I did want to work on it, but I didn't want to be bad on the competition that I did after the end of the date. But I'll keep working on it, make sure it works completely.
01:10:46.588 - 01:11:19.808, Speaker A: Like, right now, there are some issues in pulling the image that was not there conveniently in the demo, but yeah, I would like to solve that issue as well. So there are a couple of small issues. It has to be integrated within the Powergate family of apps to be able to be useful. Definitely keep working on this. I think that's the key is, like, keep cedars to the end. It seems like a very cool project. And tag us on Twitter when you finish it.
01:11:19.808 - 01:11:34.732, Speaker A: Let's see a screenshot. Okay, sure. But it sounds like you should go talk to those other teams too. A lot of this is over my head. I get the docker stuff, I get the storage driver, but I don't know about the deals and the Powergate stuff. So it seems like very specific, very niche. So I'd love to see you connect with those guys.
01:11:34.732 - 01:12:09.300, Speaker A: It sounds like maybe they work on something similar. Yeah. So the Powergate is like, they have a tiered storage system where they have hot storage within IPFS, and then the cold storage is on filecoin. So it's like an API where it's easier for people to get into filecoin rather than directly using the Lotus node or things like that. Very cool. And you tried to build, like, a driver to integrate that with the docker storage stuff. So people could have containers that sort of were backed by these tiers of basically financially backed storage, which is really cool.
01:12:09.300 - 01:12:21.512, Speaker A: Exactly. Neat, neat, neat. Okay, awesome. Keep it up, man. Keep hammering at it. Definitely see through till the end. And just comment for Karthik and Trent as well.
01:12:21.512 - 01:12:39.776, Speaker A: We definitely want to make textile folks aware of this and ideally get them to talk to each other, because I think they'll be excited. I'm pretty sure they'll be excited. Absolutely. We'll make sure we connect them. So thanks a lot. And with that, we'll move on to our next demo, and that is product supply chain DAP. And Z will be presenting the video.
01:12:39.776 - 01:13:24.784, Speaker A: So whenever you're ready, Z, go for it. I believe we have enoch, can you start with the presentation? Can I go? I guess he's not I believe he's still muted. We'll give it a few seconds. If not, I have. There you go. Good day, everyone. We're here, myself and my colleague here.
01:13:24.784 - 01:14:06.568, Speaker A: We're here to present our project, which is called blockchain supply DApps. It's actually a solution for the supply chain management. One of the goals is to plan the flow of goods, product services, including data and finances. It covers the procurement of raw materials from the manufacturer to the delivery. .1 of the goals we are trying to achieve with this project is to reduce the manual operation in the supply chain industries. Supply chain industries, as we all know, operate in a paper based recording keeping.
01:14:06.568 - 01:14:55.324, Speaker A: So we want to see how we can automate these processes. The reporting system also is scattered and is incomplete. Sometimes there's a lot of falsifications, but the opportunity this solution is giving is that it's going to bring a very transparent record keeping solution. All the stockholders stakeholders have their store and chain values. They have their stores and they have their stores and their document intact. With the blockchain advantages, it brings traceability, transparency and trust. As we all know, in the supply chain, there is always a challenge of tracking some flawed parts, but with the blockchain, it reduces this.
01:14:55.324 - 01:15:32.664, Speaker A: My colleague here will be presenting a short video for the application. Resign. Over to you, Zee. Yes. I'm going to share my screen. I have to quickly disconnect and quick connect again. Would it be helpful for us to do it instead if it's the video from your submission? Because it's a permissions thing.
01:15:32.664 - 01:16:00.930, Speaker A: Looks like I don't have permission to share. We can quickly test that. Just give us 2 seconds, Trent, if you're able to confirm that. Here we go. Yeah, I mean, the permission is there, but maybe it's something local on its machine desktop. It could be a browser. Oh, hey, we got a screen.
01:16:00.930 - 01:16:42.850, Speaker A: Okay, later. Okay. What we see here is the producer side. If he has a product, he's going to enter his information so it can be stored on the blockchain. Can you guys hear me? See it? Yes, we got it. Unfortunately, we weren't able to finish this as we had hoped, but here's a little demo of what we are trying to accomplish. So a person here will go ahead and enter their product name.
01:16:42.850 - 01:17:47.284, Speaker A: I'll just give an example. They can enter any type of info they want. They. Can enter the value of their product and also the coordinates. We really want to be able to eventually have the product as it's moving to its destination, be able to report via maybe an IoT device, just give its location and then it would automatically be populated on the blockchain. Anytime the consumer, the producer, the seller, they could check this information and be verified because it's encrypted. So here's an example of the GPA coordinates from it's actually Gpgga Northwest Zero.
01:17:47.284 - 01:18:33.032, Speaker A: Maybe they would be able to get this from Google Data, Google Maps, and just copy and paste it in. That's a future feature we would like to put in. And let's put destination New York. It would enter that, confirm it. And you'll see here, product three is now available to see. We wanted to add, let me show you the actual code. We wanted to have the addresses of the other players in this, such as the consumer and the distributor and the seller.
01:18:33.032 - 01:19:33.940, Speaker A: So that is also another feature that we plan to implement. Then this would be stored on IPFS filecoin using the Slate system. And then we also wanted to be able to have the participants message each other. And as I've seen these other projects, we'd also probably have some authentication with three box. So, yeah, there's really a lot of capability that we want to put in. Unfortunately, we couldn't demo that for you today, but it was really fun to work on this and we hope to complete it. Yes, no, thank you so much for still presenting everything we were able to accomplish until last Thursday.
01:19:33.940 - 01:20:29.850, Speaker A: Was this sort of the first time you were playing with Smart Contracts or what kind of made you work on this project? Yeah, I've been interested in this space a long time, been working consensus boot camp, online training, and I really should reach out for help a little bit more to move things along. But I'm learning and I really like to learn on myself and get over those humps. And I really made a big leap with this project, so it was really fun working even though we couldn't finish it. Yeah. Wow. What was the hardest? Okay, so if you're learning a lot, I mean, that's great. What was the hardest part for you? The hardest part was managing multiple data and getting it from the front end to the blockchain and then back.
01:20:29.850 - 01:21:26.168, Speaker A: Getting a single value was easy, but multiple values, it were just small glitches that we were hard to find and also using. I was coming from JavaScript, just pure JavaScript, and then just digging into React and then, hey, there's a lot of updates, everything's changing. I've been working since version four and I like to really mess with the code and keep everything with the comments and probably too much I should just build. So I really learned and that's what I'm going to focus on next time. That's great. This looks like what I built the first time when I started messing with it too. When you start learning how to write stuff to a smart contract, get those event back, get those events back call you're hitting on all the primitives that you're going to need to build something amazing.
01:21:26.168 - 01:21:38.670, Speaker A: So just keep it up and keep building, and I want to see it's a next hackathon too. I think we're connected on Slack too, so hit me up if you have any questions. I've got tons of tutorials. All right. Yes. Thank you. Thanks a lot.
01:21:38.670 - 01:22:43.400, Speaker A: Awesome. Thanks a lot. Congrats on demoing. With that, we have three more projects to go before we finish judging for hackathrest, and I'd like to now call up decentralized Bull market directory to come on and kick off with their video. That looks like the audio checkbox was not checked when you shared the full screen on Zoom, so maybe you can just do that quickly, which was everyone, thank you for finding time to see our presentation. Today I'm going to tell you about our Hack FS project, which was called Decentralized Full Market and in short, Diffuma. The team that has been working on the project is myself, Thomas Kavatsky and Nick's Biggin.
01:22:43.400 - 01:23:26.832, Speaker A: And we together have plenty of years of experience in building solutions for Web 2.0. And now we thought that it's time to see what's happening in Web 3.0 space. Our idea was to build decentralized data market and connect advertisers with providers. So by advertisers, I mean some websites aggregating the offers, like comparison sites, and the providers are the companies that offer a product or a service. And to that we wanted to build a model of incentives to also include users. So the advertisers and providers would have a common goal of attracting users to the offer.
01:23:26.832 - 01:24:28.060, Speaker A: And the user could also have some benefits from actually seeing the offers. How did it go? The first week we started learning about IPFS and its ecosystem. Thanks to the great docs, we could easily wrap our heads around what's the problem space that IPFS is trying to cater for, and also what were the tools that were helping to implement solutions for IPFS. So with that, until the second week, we started playing with textile buckets and Biddler and see if it can help us solve our problems. We also had fantastic support on the Slack channel. So thank you to the teams for helping us with, especially the textile team with buckets configuration. It led us during the third week to creating the initial D app.
01:24:28.060 - 01:25:20.256, Speaker A: So what we did was creating a smart contract and connecting it to Web UI. We also started working on a content manager that would help us manage the content of a bucket. But then we started thinking that we actually wanted to try the peer to peer content distribution. So that was our objective. During the fourth week, we started looking into leap P to P and we started investigating the content distribution problem and yeah, now the future plans. So we'll continue exploring the decentralized system space, especially with some questions we still have around the content distribution and how to manage the re encryption problem here. Yeah, but that's the future plans.
01:25:20.256 - 01:25:58.076, Speaker A: So let me just quickly show you what we built. Okay, now the demo time. So let me show you what we've built over the past couple of weeks and what we've learned. Now let me show you our app. We integrated three box to manage the identities and also MetaMask to provide the identity. So, here is the web UI of our app. It has very limited functionality, but what works is the authentication with MetaMask and authentication with textile stack.
01:25:58.076 - 01:26:33.004, Speaker A: So, as you see here, that's something that we fetched from the textile stack. And also we are hoping to have the content manager working for the files using textile bucket, but we were not able to finish that. So that's a pretty short demo. Let me now jump back to the presentation. The next steps for us is actually the exploration. We discovered a lot of problems that we could solve for and some of them are presented on this slide. Okay, time to wrap up.
01:26:33.004 - 01:26:55.104, Speaker A: Yeah. Feel free to follow our discoveries because we are really pumped for research. Thank you very much and thank you, East Global and sponsors. See you all next time. It's really cool how the market is integrated into this. It's an important part to add the market to it. Like when you have the storage and you have the market going with it and the discovery.
01:26:55.104 - 01:27:28.764, Speaker A: It's a neat project, good hackathon project. I would have loved to see more demo and less PowerPoint. I love getting my hands dirty and actually playing with it. Yeah, sure. I mean, it's live, but as I mentioned, the functionality is very limited. We've had some problems during the development and we've pivoted a few times. I guess it comes from because we used to work the way that we plan ahead and build things and then eventually have some things working.
01:27:28.764 - 01:28:04.292, Speaker A: But the hackathon is totally different experience. So I guess that's one part here a different speed. You have to learn how to cut all the right corners to get it to work just right. Yeah, indeed. What was the most fun thing that you worked on with this? I think that personally, I like the content distribution problem the most. It was totally new space to me. And during the I think it was the second weekly demo that the problem was discussed with Juan.
01:28:04.292 - 01:29:03.404, Speaker A: And I think that this is very interesting part here. But also what I find missing is the end to end developer experience. We've had our problems with getting things working and so on. So I believe that this is a very interesting space as well to contribute to in terms of it's less about DWeb itself. It's more about the tooling, building the tooling, I hear I'd love to hear more about that. Like, what tools did you use? What happened? Yeah, so we are trying to, I guess, go with the monorepo approach as we were used to that, but then it ended up that the idea was not the best one to start with because we had some problems on how to copy the APIs on the build pipeline and so on. So also the typings for TypeScript were missing sometimes.
01:29:03.404 - 01:29:50.408, Speaker A: And I think that it would be cool to build something like a single command to deploy things to testnet and have some wallets out there that would provide the current contract that is being deployed with some test money so we could have the very neat experience. You use Bibler, right? I have a bibbler script that does that hit me up on Twitter. We've used it, actually. Yeah, we use your script. We modified it a little bit. We wanted to have it live, so not on a local host. So it took actually a bit longer than we thought to deploy this on Heroku.
01:29:50.408 - 01:30:18.630, Speaker A: Configure all of the WebSockets plus all the missing pieces. So there is not a good document for this, for deploying all of those pieces. Different technologies. It takes a lot that's web3, man. It's a lot of complicated stuff. It's quite fresh. Market recovery is fun.
01:30:18.630 - 01:31:00.992, Speaker A: Two things here, two key things. One thing for us is to continue with the idea on its own of the decentralized full market. Because it's the ecommerce problem that has been around that people have been pulling data, scraping data from some sites and then using some AI to remove duplicates and so on. What if we reverted the cycle and started pushing data instead of pulling it? So that's one thing. And the other thing to sum up is the end to end tooling for developer to really enable the developers to come to the space and not feel lost. Definitely. Can I just add that your presentation looked really good? Oh, thank you.
01:31:00.992 - 01:31:18.170, Speaker A: Very good slides, beautiful slides. Keep hacking, guys. I think that should be like a thing, like two thumbs up. Keep working, keep building. I want to see you guys in more hackathons. Like, keep creating. Something awesome will happen there.
01:31:18.170 - 01:31:28.120, Speaker A: Sure thing. Yeah. See you around then. Thanks a lot. Thanks. Both congrats again. And with that, we'll move on to our next demo.
01:31:28.120 - 01:32:01.030, Speaker A: And that is Claudia with so, Claudia, I know you're here. Feel free to kick off with your screen share. And in case you're saying something, we don't have audio, but if the video hasn't started playing yet or you're muted okay. Yeah. Okay, perfect. Sorry about that, guys. There you go.
01:32:01.030 - 01:32:38.640, Speaker A: So this is the retros. Thank you very much, everybody. My name is Claudio and with Ektor and Jonathan, we build this decentralized retrospectives app during hackfest. So the idea is your retros, your data. Sorry, about this. So our goals for Hackfs basically well, yeah, create an app to let distributed teams to participate in a retrospective ceremony for the information to be owned by the users and our core focus security and privacy. So we choose Streabox and MetaMask as our tech stack to build the solution.
01:32:38.640 - 01:33:29.090, Speaker A: So what does the retros do? It lets teams run a retrospective ceremony with the three W's. For those not familiar with the Scrum, ceremony is what went well, what didn't go well, what can be improved, and for teams to get this information and for third parties not to be able to have access to this information, just the participants on the retrospective ceremony. So login. We do it with MetaMask to authenticate to an Ethereum account. We leverage three box basis to store all the retrospectives data, and users sign the retrospective ceremony with their three box account. So that means that all the information has been stored in their tree box account and we just provide the game dynamic. Okay, they're ready for the demo.
01:33:29.090 - 01:34:00.684, Speaker A: Let's see. Okay, there you go. Okay, guys, so this is the De retros demo video. This is what we managed to do in just four weeks. Really learned a lot. And so we are using the tree box platform to do this DAP. So we sign in and so where's the Brave browser? So we get the authorization for the wallet to use it.
01:34:00.684 - 01:34:22.422, Speaker A: So we said connect. So we're connecting that. Okay. Then we get the tree box, connect your data. Yes, we're going to continue. We're going to confirm our wallet. Okay.
01:34:22.422 - 01:34:51.076, Speaker A: Your signature has been requested. We're going to sign confirming our wallet. Okay. So we're going to connect our data. One data source signing in. Okay, so we're logged in. So this is the retros.
01:34:51.076 - 01:35:35.770, Speaker A: So this is where we're going to be, the dashboard. So here you see the retros, which is one of the retrospectives we want to do right now. We didn't have well, we ran to a bunch of issues building this, but we had a lot of fun. So when you select the retros so it jumps into the game dynamic of the retrospective, which is what went well, what didn't go well, what can be improved? You can write on this. You can see how many votes. What didn't go well? Basically not enough time. What can be improved? More time.
01:35:35.770 - 01:36:10.560, Speaker A: Get familiar with DAP development, what went well. Hack FS rocks. So this is what we managed to do. So it's basically get the game dynamic, get all this information. Right now. It's not saved in the tree box space. We're working on that, and we'll continue working on it during after Hackfs.
01:36:10.560 - 01:36:31.844, Speaker A: So well, this is a quick demo. Thank you very much. Really had a lot of fun. Thank you very much, Joel from the three box team for helping us out. And we're looking forward to keep building on top of three box. Thank you very much to us all. So what we learned, basically so we come from the Atlassian ecosystem.
01:36:31.844 - 01:37:04.240, Speaker A: So we've been building applications for agile teams for the last six years. And for us, it was our first understanding on how to build the decentralized app, how it should behave, which was totally new for us. So we're still learning on that one. We underestimated the real time messaging. We're going to be using threads, three box threads in our next version. The idea is that anybody, a party could log in and start writing into that three box space. And so that was a challenge we faced.
01:37:04.240 - 01:37:30.364, Speaker A: But the three box team has pointed us to the right direction on that one. So that's cool. So that's the next step. Well, we're going to continue building the retros, the real time messaging. We're going to work on that. We couldn't work on something that's the wow factor, which is basically supporting video and audio. So basically we can do transcripts on that and leverage IPFS to store that.
01:37:30.364 - 01:37:44.610, Speaker A: So that's hopefully in the next version for our beta launch. So well, that's about it. Thank you. Gracias. Danke grazie from actor Jonathan and myself. Thank you very much, everybody. That's all for this demo.
01:37:44.610 - 01:38:03.750, Speaker A: Very cool. What a good idea. Obviously, your audience is generally going to be excited if you present something that they would want to use. And given that you're presenting to a bunch of tech people and software engineers, we're all excited. No, I think this is a really creative idea. Cool project. Well done.
01:38:03.750 - 01:38:28.236, Speaker A: Yeah, you guys needed to get this done. This is the thing. This is such a good idea. The execution, no matter what, keep building, finish this idea. Usually most Hackathons ideas are like, okay, you learned, but you need to get context for the space and find something that will find market fit. And I think that you have the fit here. It's a great use for it.
01:38:28.236 - 01:39:01.512, Speaker A: Get her done, man. No, and it was a great excuse, right? So we managed to do our first MVPs on other platforms, decentralized platforms. We didn't get up and running on that, but then Hackafest was right around the corner and so we said, you know what, let's do it. Let's do for four weeks, let's try to understand where we stand. We managed to get some people excited about this, and we have some 1012 people sign up in the beta group. So if anybody wants to hit me up, please do so. I'm still going to be there in the file coin Slack group.
01:39:01.512 - 01:39:24.690, Speaker A: So, yeah, happy to send invites to everybody who's interested in this. Absolutely. You should just send a message to the attendee group and put that on the showcase channel. Can I say something real quick? I agree. I think something like this, highly useful, would get huge amounts of use in the space. People are constantly doing retrospectives and things like that. All the time.
01:39:24.690 - 01:39:50.504, Speaker A: How is the voting working? Where was that happening? I was curious about that. Yes. Right now that will happen in the tree box space. So basically when everybody goes in signs this space, it means we were going to keep a tap on that. Right. So you're not able to there's going to be two ways to do it. Either you would like for it to be anonymous when do the voting so you don't do any group thinking right.
01:39:50.504 - 01:40:26.368, Speaker A: Or you can make it right in the open. Right. Like Claudio voted for this or Karthik voted for that and just leave it in the open. But yeah, we're leveraging TreeBox, we really liked it a lot. Really give us a really good stepping stone in order for us to build the DAP. But the idea is to have it in the three box space, but sign with your Ethereum account or your three box account, that way you know that it was your boat and nobody can vote for you. Yeah, I think that's the key here is it can't be tampered with, it can't be censored.
01:40:26.368 - 01:40:49.756, Speaker A: There are so many things where there just could be some FUD around attacking someone who came up and came out with this smart contract vulnerability. Right. It's a perfect thing to be like he or she can tweet it and say, hey, I did this thing and it can't get attacked. Right. And I think that's really cool. Yeah. But most importantly is that you're owning that information, right? We're not owning anything.
01:40:49.756 - 01:41:24.100, Speaker A: That means if the retros goes away, you keep that data and if somebody provides a game dynamic, you can reuse that data and that's not lost. So that's some feedback we've gotten from our customers, enterprise customers, like, okay, what happened? Because we are storing that information and we saw that need in the market. And this is an experiment we're doing. Yeah, we're going to start with the small team, small groups, startups and then hopefully go up market. But anyhow, it's an eat right now. Tag us on Twitter. Amazing.
01:41:24.100 - 01:41:49.532, Speaker A: Well, congrats and the rest of the team. And with that we'll move on to our last demo for the day. Cheers. Thank you very much. Let's welcome Matisse from browser streaming. Hello, nice to be here. To give you a little context, this project is like a continuation from the last hackathon, hack money where we built like a decentralized university.
01:41:49.532 - 01:42:21.816, Speaker A: So a very important piece that was missing was decentralized platform for streaming where teachers could stream classrooms for students. So I'm going to present this demo of this experiment I did and let's see what you think of it. Hello. I'm going to present the operative streaming application. First of all, I'm going to start streaming. We don't need to connect my wallet. This MetaMask configured in my browser already.
01:42:21.816 - 01:43:26.968, Speaker A: And then I'm going to fetch my credentials to connect to Flick through an API using a smart contract that store my credentials. I'm going to fetch this data that is ciphered and I need to decrypt it using a password. If I don't know the password, I can request a new one, go to Flick and put a new set of API keys in secret, no problem, and record it in this smart contract for future users. Now I'm ready to stream. I'm going to connect my camera here. And in order for people to easily access this stream, I need to configure address and the ENS so people can resolve my address to this name that I call the stream test and also get a stream record here with my bucket on Flick for easier use. So I'm going to confirm this info here and my camera is already recording.
01:43:26.968 - 01:44:28.044, Speaker A: So I'm going to start the streaming and the files are going to be uploaded to Flick while we are speaking. And if we go here on the Connect channel feature, I'm going to connect my wallet again and I can just type string that's going to be reduced over to my address. And then I can access fleek and see all the files here. So I'm just going to stop it here, confirm. And I also can upload files from my computer to be stored in this same directory with my videos. So if I connect again today streaming channel, I'm going to have access to the updated file list and I can open this image that was uploaded for video files. I can do the same process to reproduce them in my browser.
01:44:28.044 - 01:45:28.868, Speaker A: But currently there is no protocol established yet to play the chunk of files, the chunk of videos seamlessly as we would experience anomaly in a streaming application. Use Https because HLS, one of the protocols that handles this on common applications like Netflix, YouTube can join the files one after another. Inside one video streaming to all the players. But inside IPFS and filecoin, there is right now no way to make this process happen without downloading every file and merging them inside one stream. Inside the protocol level, this is a work in progress. There is much to be done in the protocol level until we can have live streaming using IPFS and filecoin. But I hope that this application can be of use.
01:45:28.868 - 01:46:19.180, Speaker A: Thank you all. Yeah, so teachers can go in the approved application, what is called and send links to the students. Because one of big caveat when you are in the decentralized environment, but you need to use Zoom, Google, Meet or Skype to connect with people and you see their identities. So we need to cover up this flaw. It's not like a ready product yet, but was a great experiment over this hackathon. So for the last hackathon you did kind of like a university thing where people it must have been like a teacher student kind of situation, but the video wasn't decentralized. So you kind of doubled up on the project to stream the video through fleek.
01:46:19.180 - 01:46:43.130, Speaker A: Yeah. Is that right? And ENS, there was ENS in there too. That was great. Yeah, great. But it's a standalone tool as well, so it can be used in any other project as well, or even in the next global event from you guys. What about streaming money there? It seems like maybe you did that in the last hackathon, but it seems like there should be some streaming money going on there with Ethereum. Yeah.
01:46:43.130 - 01:47:15.872, Speaker A: On this last weekend, I implemented new cipher. It was not inside the hackathon, but the idea is that you only get the decryption key. Actually, to be honest, I did not implement new cipher entirely. I implemented only umbrella encryption. But the idea is that you only get the decryption key if you have a smart contract inside that university that give you access in that classroom. And the thing with that approved university is that you pay by staking. So the money goes to DeFi and DeFi earnings, pay the teachers and reward good studies.
01:47:15.872 - 01:47:34.344, Speaker A: Okay, so there's kind of a lot of Ethereum in there with staking and tokens and stuff. Okay, I got you. Awesome project. Yeah, interesting. Can you tell me more about so you did the custom text record with the stream key. That was really cool. Can you tell me more about how that was used? I kind of missed that.
01:47:34.344 - 01:48:21.800, Speaker A: So you're storing something in this text record and then how is that being used in your project? Yeah, you could write the address to Fed the endpoint that Flick gives you. They are abstracting the IPNs, but would work with IPNs as well the same way. But instead of having an address for that a big hash that can be unfriendly. I can just ask for the record calling string. So instead of description, instead of email and I get the string record. Okay, that's cool. How many people are on your team, by the way, on the uproot project? University? There are three on this streaming platform, only myself.
01:48:21.800 - 01:48:38.060, Speaker A: Okay. Seems like a lot of technical stuff you had to tackle to make that streaming video work. Is that true? But I guarantee there's a lot of bugs. Me too. All my code, man. I know. Appreciate the honesty.
01:48:38.060 - 01:49:12.052, Speaker A: When you go alone, man, you go fast, but you go all wrong. I hear that. Yeah. So are you going to keep it going? Okay, so there was the university, now there's the streaming video. What's next? I guess maybe whatever cart that comes up for the next theme, for the next hackathon. That'll be your third piece. Actually, what we need mostly right now is users because we had like a better classroom last better classroom in the approved with like four persons they all loved.
01:49:12.052 - 01:49:34.530, Speaker A: I can do it eight with 16 2100 and then it can become the next thing. Hit me up on Twitter, man. I'm always trying to stream and if we can integrate some kind of ethereum stuff into it. It'd be a lot of fun for sure, man. We got an ecosystem grant from Ave and we are trying to build community. That would be great. Thank you.
01:49:34.530 - 01:50:08.128, Speaker A: Amazing. Well, I hope you continue working on it and can't wait to see how all those connects with the next Hackathon. With that, I want to thank everybody. This was our last demo for Hackafest. Big congratulations to all the teams that presented today and everybody who's been part of this event for the past month and all of our judges, of course, for this entire week and especially Ayesh, Austin and Brightly today. So thanks again for giving us your evening. Thanks again for sharing some amazing insights and feedback with all of our teams.
01:50:08.128 - 01:50:24.940, Speaker A: And we'll see you on with the Hackathon finale next Tuesday at 12:30 p.m.. Eastern. So looking forward to seeing everybody here and thanks again. Hope you have a great rest of the weekend. Peace. Thanks guys. Happy bow tie Friday.
01:50:24.940 - 01:50:26.360, Speaker A: Bye.
