00:00:00.170 - 00:00:00.720, Speaker A: Live.
00:00:03.730 - 00:00:16.880, Speaker B: Excellent. Thank you. Thank you to everyone joining us today. I'm going to give it probably one more minute, see if some people filter in, and then we'll get underway. I see a few people pulling in right now.
00:00:31.420 - 00:00:32.410, Speaker C: Right on.
00:00:32.860 - 00:00:49.150, Speaker B: I guess without further ado, I'd like to welcome Yusuf and Alan from the Protocol Labs team. I'll let them introduce themselves and get started here. But thank you. Thank you for joining us. We're really looking forward to seeing this presentation today.
00:00:50.720 - 00:01:08.376, Speaker A: Cool, thank you. Hold on a SEC. Here we go. All right, if you don't see my screen, then shout. Hello. So I'm Alan. I'm an engineer at Protocol Labs.
00:01:08.376 - 00:01:44.636, Speaker A: I'm just going to give a real quick intro and then sort of hand it over to youssef to do like a really awesome in depth demo of what this thing is. But that's a good question. What is this thing? Well, so I'm excited to be able to tell you about this incredible new service that is called Webfree Storage. And it's live as of yesterday, at Webfree Storage. Storage is a top level domain name. Who knew that? This thing is designed for developers. Developers like you to give them a real easy way to store data on filecoin and IPFS.
00:01:44.636 - 00:02:17.204, Speaker A: And in case you don't know, IPFS is a peer to peer distributed file system. It addresses files based on their content, not their location. And Filecoin adds that incentive layer to IPFS. It's a cryptocurrency based, decentralized storage network. And so Webfree Storage aims to make the process of storing data on filecoin simple. Just simple. And so for our initial launch, we've kind of focused on providing a really awesome experience for developers, web developers specifically.
00:02:17.204 - 00:02:55.920, Speaker A: So what we've done is we've built a really nice JavaScript client to the HTP API. And it's been lovingly tailored to make web developers happy. So we hope you enjoy it. We have docs, we have an incredible documentation site. We've got how to's tutorials concepts, and like a complete API reference for the JS client. It's actually kind of truly amazing that this has come together, considering it was built at exactly the same time as we were building Webfree Storage. And it's just incredible that such useful information has come together so coherently, because as we were building it, nothing was stable, nothing was finished.
00:02:55.920 - 00:03:35.664, Speaker A: And yet we've come up with this lovely website which will help you use the thing. Anyway, so this here, after you've logged in and maybe uploaded some files, this is the files listing page. This shows you all of the things you've uploaded to Webfree Storage. And it's super basic right now for launch, but it will get better. So first up, you can actually upload Direct in the UI, so you can click on that upload more files button. And so you don't even need to be a developer to get stuff stored on Filecoin network. On that decentralized network, you can just log in and upload a file and bang it's on filecoin.
00:03:35.664 - 00:04:27.430, Speaker A: That's rad. So there's a whole bunch of columns here, but the CID column this kind of links out to an IPFS gateway where you can actually retrieve or view the files that have already been stored. What happens is when you upload files to web3 storage is that we upload them to our own IPFS cluster and that's just a whole bunch of IPFS nodes that are kind of kind of grouped together, but the data is replicated to at least three of those nodes. So we've got some good redundancy going on there. Pin status, that's like the overall pinning status of the data that was uploaded. And if you don't know what pinning is, pinning in IPFS is this way of you telling IPFS not to garbage collect the data once it's been stored on the node. Just keep it around indefinitely, please.
00:04:27.430 - 00:05:18.580, Speaker A: So obviously you kind of want to know the status of Pins. Like when they first go up, it will be queued, it will then be pinning and then it will be pinned. So we have status, but this column is not showing anywhere near as much information as we have. We have a status API which you can use programmatically to grab hold of a whole load more information. And what we have is for each node that data is pinned on, we have the peer ID, like its name, its geographic region, as well as the status, obviously. So yeah, we'll have a look at the status API in just a SEC. Storage providers are actual addresses of storage providers operating on the filecoin network that are currently storing the data.
00:05:18.580 - 00:06:13.844, Speaker A: And so we aim to get at least free deals active in free separate providers for any given CID. And so that together with the free nodes that are in our IPFS cluster as well as FreeFile miners is pretty darn awesome. Like data redundancy thing that we've got going on. So that's cool. The links link out to actual deal information so you can look on chain at the deal that has been made and the minor I should say storage provider is currently continually proving that they are still storing. Yes, what else? So yeah, we'll talk a little bit about that process of deals and how we have this concept of a storage broker and how it works in just a second. The status API, this is what I talked about a second ago.
00:06:13.844 - 00:06:37.736, Speaker A: This is just some because I took this screenshot like before we went live. So it's just some example data, but you can kind of get the idea of what you'd see. You can query any CID, of any root CID, of any upload that you've done or anyone else has done for that matter. And you can see the kind of information that you'd get back. So you can see when it was created, how big it is. And we've got pins and deals.
00:06:37.768 - 00:06:38.008, Speaker C: Array.
00:06:38.024 - 00:07:16.920, Speaker A: And Pins has each of the nodes that this thing is pinned on and Deals has each of the storage providers that are storing or are about to be storing the data. So we've got, for example, here, we've got a deal ID. This is the actual Identifier for the deal that's stored on Chain, the storage provider. This is the address of the storage provider that is storing the deal. The status, it can be like queued published and active, I believe. And then we've got PCID data CID and Data Model selector. So these two things, data CID and data model selector, are really interesting because what we do behind the scenes is like we aggregate together loads of data.
00:07:16.920 - 00:07:59.050, Speaker A: So you'll store kind of small files potentially, but other people store big files. But either way, we aggregate it together into one big glob of data and then send that off to a minor to be stored. What happens with that is that there will be a root CID for all of that data that we've aggregated together. And if you want to retrieve your piece of data from that aggregate, then you're going to need something called the data model selector. And that allows you to pass through that data structure and extract the data that you're interested in. So that's the status API. That's just one of the kind of useful things that we have, along with obviously putting data and retrieving it.
00:07:59.050 - 00:08:30.284, Speaker A: Cool. This is kind of high level architecture. This is kind of fun. I'm not going to go into too much detail here, but just to say, if you start at the little black glob at the bottom left there, the users, they're actually interacting with just the HTP API. They send car files. And cars in this world are not automobiles. They are content addressed archives like Tars.
00:08:30.284 - 00:09:02.440, Speaker A: But for dags and dags. Dags are directed, they cyclic graphs. This is all IPFS stuff. But what it means is that clients send car files, they create a dag on the client, so they create that graph of data and the root CID on the client. And what that means is that they've got that dag and that CID before it's sent up to webfree storage. And in this kind of trust us peer to peer world that we're trying to accommodate, that's a really good thing. It also means you can do other stuff with that CID.
00:09:02.440 - 00:09:26.140, Speaker A: CID stands for content. Identifier. By the way. I'm pretty sure I said that. Anyway, it means you can do other stuff with the CID whilst that data is uploading. So you might want to store that in your app database somewhere whilst a big upload is happening. Or in the case of like NFTs, you might want to mint an NFT on the ethereum chain using that CID and linking the token Uri to that CID.
00:09:26.140 - 00:09:58.748, Speaker A: So that's why that's useful. So what we do is when we receive that data. We put it straight in our IPFS cluster and we also back everything up to Pinata. You might have heard of Pinata, they're a popular kind of pinning service for IPFS, allows you to put content in there. And so we have so much redundancy of this data, it's unbelievable. But yeah, we're partnering with them to store your data as well. Now, the storage broker bit, this is where the interesting stuff happens.
00:09:58.748 - 00:10:35.684, Speaker A: What it does is it grabs all of the CIDs for new uploads from our database. We use a database called Fauna. It's something that cloudflare, which is where we host the service the API recommends. So we started using them and it's been fun. And so what happens is it batches up all of those CIDs into little presents, little presents for the storage providers. They're actually car files and then the storage providers come along and say, have you got a deal for me? And then the broker service will be like, yeah, here's the deal, here's the deal. Then they'll take it and they'll do an offline deal and then it will be stored on filecoin wrap.
00:10:35.684 - 00:11:15.380, Speaker A: And the storage broker is the really interesting part because that's where a lot of the innovation in other projects is happening. We're trying to build indexer nodes for filecoin storage providers and we're going to also be building retrieval directly from storage providers. So we won't necessarily need to have IPFS nodes as a kind of caching layer. And it'll eventually allow the web free storage gateway to fetch data directly from storage providers. All right, the one thing I didn't mention yet is it's free. It's completely free and it's free. And when I say free, people often ask why? And here is why.
00:11:15.380 - 00:12:02.212, Speaker A: Well, the cool thing about it is that storage providers commit their hard disk space to the filecoin network and they earn significant block rewards for doing so. And doing so actually translates into real world profits for them. You can see the little cash bags at the bottom there. That's how much profit this particular storage provider is making. And obviously they are incentivized to onboard more storage, continue committing additional hard disk space to the network saying I've got this capacity to store data on me and they'll get rewards for it. So they're pretty incentivized to keep doing that so that they get more profit at the end of the day. Now, when storage providers are storing data from users on the network, their likelihood of winning block rewards goes up by a big factor, like ten times.
00:12:02.212 - 00:12:55.376, Speaker A: So boom. Whoa, look at those profits. You can see the potential profits to be made by storing real user data. And this is such a powerful incentive for filecoin storage providers to store user data, such as the data that they're getting from webfree storage, that they're willing to offer free storage in order to get this block reward multiple. And in some cases, storage providers want to store this data so badly that they're even willing to pay users for them to store it. And so as long as these block rewards to continue to be a really powerful incentive for filecoin storage providers, which will be true for a long, long time, for example, in Bitcoin block rewards still continue to incentivize Bitcoin miners today. So as long as there's still this powerful incentive, then storage should be free for all verified users on a filecoin network.
00:12:55.376 - 00:13:48.656, Speaker A: And if it's free for us to store the data on filecoin, then it's going to be free for you as a webfree storage user to store your data with us. And so if you want to learn a bit more about the mechanics of being a verified user and getting capacity to store data for free, then head on over to Filecoin docs. It's docs filecoin IO and click on Filecoin Plus. All right, my Bit is nearly over, but this is some of the things we haven't even really started planning for the next iteration. But these are some of the things that are in my head for the next stuff. We want to have a fully documented Http API so that anyone can use it. At the moment we've just got a JS client and no docs for the Http API, but we want that documented so that other people can build or us can build clients to that API.
00:13:48.656 - 00:14:49.380, Speaker A: We have an open API schema so that we can just generate clients. We'll have some raw file uploads to make it really even more stupidly easier for people to use. Have I don't know if you've heard of the pinning services API and IPFS, but it's a way of if you've got the data on an IPFS node, then you can maybe tell Web Three storage to you, just send them the CID and wait for that data transfer to happen over the peer to peer network. So that would kind of be useful. We might build a GraphQL API. Our database has a GraphQL interface to it, so why not? And obviously the big part would be like retrieval from storage providers, implementing those indexer nodes for storage providers, and then stuff with authentication, like scoped authentication, tokens wallet authentications and stuff like that. And basically, mostly if you have feature requests that you come across, then please tell us because we'd like to know and build something really good that is helpful for people to store data decentralized on filecoin.
00:14:49.380 - 00:15:07.600, Speaker A: All right, cool. So that's about all I have to say. So I'm going to hand it over to yousef to delve a little bit deeper into the API and how you might get started with Web Three storage and store some things, maybe retrieve them and do whatever. But thank you for listening.
00:15:11.140 - 00:15:29.110, Speaker C: Awesome. Thanks, Alan. This is so exciting. I'd like bubling over because they're finally getting to show this thing off. Like, you guys have been crushing it in the development department. Let me share my screen here and talk through using the thing. Skipping ahead to the code.
00:15:29.110 - 00:16:02.848, Speaker C: I just had a couple things to say as what Alan said before we get started coding and stuff. One thing is that we still are running NFT Storage. Web three storage does not replace it. So if you have NFTs specifically, why not head over to NFT Storage? It just has some helpful stuff for you for metadata and things like this. And it's going to be our place where we continue to do NFT things going forward. So that's cool. But I'm here mostly to talk through the developer experience.
00:16:02.848 - 00:16:38.510, Speaker C: Like how do you use this thing? I've been working on this doc site, so I would love it if you go and read the docs while you're here. It's docs web3 storage. And we're going to, in a second, just walk through this quick start guide. We'll make a tiny little JavaScript app that puts a file into Web Three Storage and then we can poke at it and see what happens. Back over here I have an empty directory. And now I'm going to go play with the website. Here's the site itself.
00:16:38.510 - 00:17:06.020, Speaker C: It's pretty, in my opinion. We want to get started. I've already signed up for an account, so I'm going to log in. It's about the same amount of time either way. If you have a GitHub account, you can connect it. Otherwise put in your email, you'll get a nice little login link and you'll end up here. So now I do not have any files yet.
00:17:06.020 - 00:17:47.906, Speaker C: I could totally upload one through the website, but instead I'm going to get all nerdy with the JavaScript and I'm going to go to my account and get API. This is interesting. But first, explore the docs. I want to know how to get running. So I'm saying okay, need node JS for this quick start. And I have that already logged in and it says I need an API token. API token.
00:17:47.906 - 00:18:27.846, Speaker C: Where are we demo? All right, now I have something. Keep it private so don't tell anybody. And now it wants me to make an upload script. We're really focused on the JavaScript API right now because we think it's like the least friction that you can have as you're building a web app. Obviously more will come soon, so stay tuned as we roll things down. But right now we're making a little Javascripty app. And I own an empty directory, which I already have.
00:18:27.846 - 00:19:12.110, Speaker C: And then here is a file called Put Files JS and it's giving me some code to paste in. Let's do that over here. Myself file. Okay, so now see if we can make this big. I got pasting things in and I like to read code before I run it on my computer. So what are we doing here? We're importing some stuff and then we have it looks like we're going to have a token like passed in on the command line. That must be our API token we've copied from the site.
00:19:12.110 - 00:19:41.282, Speaker C: And then it wants us to also pass in the path to a file that we want to store. Then we get a new storage client, it looks like. And for each of those files we're going to get all the file data and read it in. Now we have something we can call our put method on. Okay, that all looks pretty straightforward. I'm going to go just see what the site is telling you to do next. It's saying make a package JSON.
00:19:41.282 - 00:20:17.346, Speaker C: Okay, so I've done a few MTM projects before, so this seems like pretty standard Javascripty things. I'm going to take this and paste it in my thing here. I had too many code windows open, apparently. There we go. Make a new file for the package JSON. You can also do NPM in it, or there's other ways to do this, but this is faster than good old copy and paste, I guess. Quick start it is.
00:20:17.346 - 00:21:04.798, Speaker C: And obviously you can put your own things in there if you have these front end dependencies or whatever else. But we're going to now back to our docs. It says we need to NPM install here and do that. So this is going to pull down all of the client library dependencies and all that so that we can use Web Three storage in our little project. And once that's done, we say, okay, great, we got all this stuff. Now we have our Node Modules folder, and that's where all that stuff lives. And we can now run the script, I think.
00:21:04.798 - 00:21:52.890, Speaker C: Let's see, run the script. So it says we need to basically do this little song and dance here. We're just invoking the script as a command line thingy and we have to paste in our tokens. I'm going to go back here now. I should be able to say node files, token, and then I'm going to paste it in here. And then it wants me also to give it a file name or do you give it a file? So I'm going to do that. Let's see, let's do I steal I've stolen all my best gifs from Alan or Gifs, if that's your preference.
00:21:52.890 - 00:22:20.086, Speaker C: So you might find this one familiar. And this is going to take it and upload it to Web Three storage. All right, it seems to have worked. I'm going to go look double check things here. What do we have back on the site? It looks like something happened. I have an entry in here now and things are queued up, looks like, for storage on pinning services. And I can pick this already.
00:22:20.086 - 00:23:17.946, Speaker C: And now I can get it right away on IPFS through the gateway link. So it looks like I check it out and sweet. So now my stuff is immediately available on IPFS, but in a minute, let's see if we can find out a little bit more about it. And I'm going to go live code the status endpoint so we can see what the thing is actually telling us right now. So we're going to back and slash away at this thing instead of file paths. I'm just going to say that first argument, I want it to be a CID, which is content identifier for the thing that we just stored. Now I'm going to say storage status, just say argus underscore, which is where all the arguments live.
00:23:17.946 - 00:23:45.890, Speaker C: And then I will just say, yeah, well, why don't I just pop the first one off. Just going to do one right now. So we'll say, okay, I give you one CID and I will tell you everything I know about it. Log that out to the console and see what happens. Why not? So I changed my program. Now I'm going to go grab the CID. It was over here.
00:23:45.890 - 00:24:21.286, Speaker C: It also got logged out earlier. But, yeah, I got my CID. Now we're going to ask the service, what do you know, really put files anymore, but token, I have that over here. And then I want the CID, which is there we go, boom. It's telling us in more detail about the pinning status. So it's saying it's in fact no longer queued. Those pins have gone through now.
00:24:21.286 - 00:24:56.920, Speaker C: So it's stored on these three providers and it tells us the file size when it first got the file. You can also add a little bit of metadata, add a name to each upload so you can keep track of them in the storage UI. And you can also through the API list all the things you've ever stored. So it's a pretty flexible little API. We try to keep it as simple as we can while still exposing everything. You would need to go and grab things straight from IPS and file claim. So I think I'm going to wrap up there since that will leave us a little minute or two for Q A if people have questions.
00:24:56.920 - 00:25:06.540, Speaker C: Thanks very much. Excellent.
00:25:07.920 - 00:25:10.220, Speaker B: That's a great presentation.
00:25:10.800 - 00:25:28.480, Speaker C: Thanks. Like I said, we're super psyched about this. I have a quick question. Is there any rate limiting or throttling if uploading a lot of files? Or is the constraint just your upload speed?
00:25:29.220 - 00:25:42.040, Speaker A: So it's currently hosted by cloudflare so it will be throttled to if they think you're abusing their terms of usage then you'll be locked down in that respect.
00:25:43.740 - 00:25:49.428, Speaker C: So will the API just respond with please wait or how will the API.
00:25:49.524 - 00:25:53.276, Speaker A: You'Ll get four two nine responses? I think it is.
00:25:53.458 - 00:25:54.972, Speaker C: Got you. Thanks.
00:25:55.026 - 00:25:56.140, Speaker A: Too many requests.
00:25:57.360 - 00:26:08.930, Speaker C: The client by default will retry a couple of times for you also. So you might be able to hit a temporary limit and not notice. But if you're really pounding the service, maybe you'll hit something.
00:26:09.620 - 00:26:59.200, Speaker A: It's pretty cool behind the scenes because it chunks up this Dag. If the dag is more than ten megs, then it will split it up into multiple. They're like partial dags where each chunk is kind of subset of the tree, but they all start at the same route. So it will then upload each chunk kind of in parallel, and it knows that they all relate to each other because they all have the same CID. And the client will actually, if any one of those chunks fails for whatever reason, then the client will retry them. I think it's like five times or so with a back off. So it will really try and get everything up there.
00:26:59.200 - 00:27:38.220, Speaker A: And even then, even if it does fail for whatever reason, because you close your laptop or whatever, then you can come back to it and upload it again. And it will just fill in the remaining parts of the dag that it hasn't yet filled in yet. So you can retry. There's no ordering because of the subgraph that it sends. Yeah, it's pretty cool. And it obviously allows parallel uploads in the browser. We limit it to, I think, free maximum at a time, because I think browser can only make like five or six total requests concurrently anyway, so, yeah, it's fun times.
00:27:38.220 - 00:27:51.290, Speaker A: Really cool. Is there a file size limit?
00:27:54.190 - 00:28:05.840, Speaker C: It's quite large. I think 32GB per total request. Like the whole counter file that you're uploading should be less than that. Correct me if I'm wrong, Alan, I'm pulling that from the about page on the side.
00:28:07.430 - 00:28:33.980, Speaker A: Yeah, then that's mostly because right now it's hard to get a single dag that's bigger than 32 gig in a deal for Filecoin because that is the size of the biggest or the current kind of size of the sectors, I think, or something to that effect. But in the future, it will be possible to send even bigger things.
00:28:37.230 - 00:28:40.540, Speaker C: Awesome. Thank you very much for all of this.
00:28:42.110 - 00:28:47.920, Speaker B: Got a question in the chat. Is there a max number of API tokens per account?
00:28:52.610 - 00:28:53.840, Speaker A: Not at the moment.
00:29:05.990 - 00:29:12.440, Speaker B: If anyone has any questions, feel free to ask. I know they're really excited to release this project.
00:29:13.450 - 00:29:49.182, Speaker A: Yeah, this is all kind of brand new, so any feedback you have on this or any concerns you have or whatever, then please let us know. So we'd love to make it better. Want to make it really easy. Obviously, as we said, for people to use and get stuff. The whole thing for us is to get people actually using Filecoin. It's got so much capacity, so much storage, so many storage providers that don't have data yet that they really want to have data. Like they're hungry to chomp up all of your data because, like I said, they get those extra multipliers on block rewards.
00:29:49.182 - 00:29:58.100, Speaker A: So, yeah, just try it out. Let us know how you get on. Let us know if there's bugs, because that could definitely happen.
00:29:58.870 - 00:30:47.138, Speaker C: Speaking of letting us know, let me share my screen real quick again, and I'll pop up how to find us. If you're at Hackfs, then you can just go to the Hack FS Discord, and we have a Protocol Labs sponsor panel there. There'll be labors hanging out there all week throughout the event, and if you're not attending the event, or if you find this video recording later, just hang out in Filecoin Slack or in the IPFS Discord or Matrix. They're all kind of like the Web Three storage channel is bridged together. So wherever you end up entering, you'll end up in the same place there. And we'll be hanging out there, answering questions and helping you guys. I'm sorry.
00:30:47.138 - 00:31:09.260, Speaker C: Go for it. Are these slides available via email? We can probably make them available. I don't know. Right now, I think they're just sitting in my Google account. Alexis somewhere. It's possible, yeah.
00:31:15.950 - 00:31:43.698, Speaker B: Well, thank you. Thank you to both of you, and thank you to our audience for joining us. As they said, go into the Filecoin Slack and join the discord. And we also have the sponsor channel here for immediate questions as you're participating in the hackathon. I know there's a lot of stuff to be tested. There's a lot of things to be troubleshooted, so they'll be there to help out, and we all look forward to talking more about this in the future. We'll be closing out the session right now.
00:31:43.698 - 00:31:46.980, Speaker B: Thank you again to everyone for joining, and take care.
00:31:47.830 - 00:31:49.840, Speaker C: Thanks so much. Thanks, everyone. Thank.
