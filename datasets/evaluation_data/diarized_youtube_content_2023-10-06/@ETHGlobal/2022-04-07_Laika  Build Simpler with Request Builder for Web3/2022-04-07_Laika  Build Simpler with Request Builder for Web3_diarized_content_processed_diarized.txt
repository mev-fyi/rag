00:00:00.170 - 00:00:25.150, Speaker A: Get started here real quick. I'm joined by my friend Nantakan from Leica. He's going to give a quick intro in a second. I've been requested to tell you that we'll take questions at the end. So for everyone just joining us now, feel free to post your questions throughout the presentation in the zoom chat below and we'll get to them right afterwards. He'll be handling questions right after the 30 minutes segment, but without further ado, I would love to hear more from you. Nantakan, the floor is yours.
00:00:25.530 - 00:01:01.280, Speaker B: Yes. Thanks a lot, Luke. Thanks a lot for introducing me. I'm going to show you my screen real quick, just so you guys can see my screen. Yeah, well, I have something to confess before we're going to start this workshop. My internet is quite bad today, so please let me turn off my camera during this session. All right.
00:01:01.280 - 00:01:35.674, Speaker B: So, yeah, I just wanted to introduce myself again. My name is Nona Ghan from Leica. Leica is a team based from Bangkok, Thailand. We are builders from Thailand and we are building a product called Leica and it's basically a request builder. But for web3. I'm going to show you the interface of Leica real quick. As you can see that the interface looks similar to what postman or what hopsgosh or what Insomnia have.
00:01:35.674 - 00:02:38.670, Speaker B: If you use yours to working with that before, liger is actually a request builder for smart contract. You can use Liger to making a request to any smart contract that you want to connect to on any chain that support EVM. So this is a really basic idea of Liger and what Liga was built. You can just open Liger and making a request to smart contract without having to write a single line code. And if you used to work with postman before, liga really have a familiar feeling of that when you're using postmail. So I think you're going to have a really short time period or really good time getting started using Liger. And for the next slide, I want just to briefly tell you why we're building a Liger and what is the reason that you should use Liger.
00:02:38.670 - 00:03:42.206, Speaker B: So Liger was built to solve one problem and that problem is to making a request to smart contract. We want to offer you a really simple experience when making a request to smart contract. And by simple I mean that you can use Leica to improve your development workflow on local network. On Live Network, just imagine that when you're working with some smart contract on local network, like maybe you forking some main net into your local machine and just want to quickly checking some smart contract and you just don't want to write a code for that. You can just open like it and connect to MetaMask and you're kind of good to go. You can just query on any smart contract that you want to use. And for Live Network you could also use like it to making a request to all the smart contract on those network.
00:03:42.206 - 00:04:51.286, Speaker B: You can use like a on any EVM compatible chains, you can use it on Ethereum main net, you can use it on any L two that support EVM like optimism, like Polygon or altrum or Author chain that was EVM compatible like Avalanche or Phantom or anything that you could imagine. And yeah, I think that I'm talking for a while now and I think you may wonder that, hey, the user Scan could do that too. Or maybe Remix could making a request to smart contract too. That was a question that we've been asking a lot. So yeah, actually Liger was meant to have a sole purpose of making a smart contract request really easy. So when using Liger, you're not going to have an experience of open a lot of tabs of Ether scan just to making a smart contract request to a lot of contract. And every time you open Remix, you may have to just setting up your workspace every time, but Liga would always saving your smart contract request.
00:04:51.286 - 00:06:13.742, Speaker B: So you don't have to do that. But yeah, I just want to say that I didn't mean that Liga was a better tool both either scan and both remix was a really great tool, but like it was meant to have a sole purpose of making a smart contract request easier. So, yeah, this thing that I just yada yada just earlier slide wasn't just really came from me. We have been launching for a while and a lot of people have been using it and giving us a lot of great feedback that we use to building like it and to improve like it all along. The just I just want to ask you and I just want to tell you that it would be really awesome if you're trying leica out, and maybe if you try using leica, and if you love leica, please give us a feedback because we really welcome for every feedback, and we're going to use it to improve leica in the future. So, yeah, I just want to stop my slide a little bit and go ahead to the Leica website. You can go to Leica website by entering this address on your browser.
00:06:13.742 - 00:06:56.226, Speaker B: The Getliker app going to quickly getliker app on my browser and you're going to see outland page where you could just exploring around what we have to offer. But for this purpose of this workshop, I'm going to go to the launch app button real quick to just looking at what Leiga have. The first time you enter Leica, you're going to see something similar to this. But I already connect to Leica before, so I'm going to see that I already connect to Liger. But you're going to see something like this. Let me click disconnect here. You're going to see something like this.
00:06:56.226 - 00:07:54.450, Speaker B: So the first thing that I encourage you to do after enter Liger is to connect to your wallet. You can choose to connect with MetaMask or choose to connect with Web three provider if you want to working with Improve or Alchemy or something. But for this session I'm going to pick MetaMask and after you connect to MetaMask it's going to show you the address that you're connecting and the chain that you're picking. For this session, we're going to exploring this smart contract which is a wrap ease of smart contract on CoFund. So I'm going to picking CoFund from this. All right, so after you picking your decision connecting to your wallet, you are pretty good to go to using Liger. Using Liger was really easy.
00:07:54.450 - 00:08:32.670, Speaker B: As I told you that it was similar to Persman. If you used to work with Persman you're going to find yourself like you were at home. Here I'm going to click some method that you could making a request to. Like the first time you enter Liger, you're going to see the example contract that we generate for you. This contract was called Liger testing contract. It was a really simple counter contract. You could just query the counter value in this counter or you can just use an increment method to increment the value that this counter is kept.
00:08:32.670 - 00:09:38.790, Speaker B: I'm going to quickly send the request to this method and you're going to see the result down here. So what I do is that I'm making a request to this Liger testing contract with the method of count and you can just do it all by UI, you don't have to just writing code for that. So it's a really easy way to making a request to smart contract. And yeah, as I told you earlier that we're going to looking at the wrap easier for this session. So I'm at the Ether scan for now and the contract that I'm going to exploiting for this session is a wrap ease of smart contract. If you don't know what wrap ease is, it was an ESC 20 compatible. If you have an ease native currency you can transfer your ease into this account to minting a new wrap ease that was ESC 20 compatible.
00:09:38.790 - 00:10:36.280, Speaker B: So this contract was a really simple contract. It's going to have all the functionality of the ERC 20 token. But the special thing is these two function called deposit and this function called withdrawal. If you want to just minting a new wrap easily, what you have to do is just to making a request to this method and transfer your ETH to this and this smart contract will minting a new wrap ease for you. Or if you want your ease back, what you have to do is going to withdraw from this contract using the withdrawal function here. And this is basically what wrap ease that I'm going to exploring in this session was. So let me quickly copy the address of this and get back to.
00:10:36.280 - 00:11:25.654, Speaker B: So just get back to wrap easily again, let's say that I want to making a request to this function total supply function. What I have to do in Lig is that I'm going to click new here to making a new request. So I'm going to pick new request here and put the request name. And as I told you that I want to making a request to Total Supply. So I'm going to name this Total Supply with the collection name. Of hit Create to create a new request. And you're going to see this request popping up.
00:11:25.654 - 00:13:01.922, Speaker B: And what you have here is basically a request builder tool that you can just put things here to making a request to someplace. So as I told you that I want to making a request to this smart contract so I have to copy the address of this smart contract and put it here. This is the address of the smart contract that you want to making a request to and I want to making a request to the total supply. So I'm going to type the method name here total supply with the state mutability of will because total supply was will and it doesn't require any parameters, but it's going to return us unint, so let's put it into like it doesn't require any parameters, so I'm going to leave this empty. But we're going to need a return, so let's add a return here and let's pick you int. And now let's quickly making a request to this so you can see what making a request to smart contract is going to feel like. I'm going to hit send and you're going to see the result that Leica is making a request to this contract of this method and what I seeing is a total supply of the wrap east but it was in the white union and sometimes white unions are quite hard to interpret.
00:13:01.922 - 00:14:28.100, Speaker B: So let me introduce you to another function, another feature that built in with Liger that's going to help you just that. So I'm going to hit the converter tab here and choose the converter to be unit and I'm going to copy this into this. Liger also have a unit converter built in so you can just see and it could help you interpret the value of that request easier. So as you can see that Leica is convert this really large number to this 876,000 ether which means that this wrap ether had a total supply of this number, right? So that's basically how you're making a request yourself with like it. But yeah, I just think that when you want to requesting to a lot of method on the smart contract, having to just creating a request yourself every time might not be very convenient. We also have another feature built in that's going to making a request to smart contract really easy and that was in here. Let me pick new and picture explorer here.
00:14:28.100 - 00:15:43.900, Speaker B: Well, Ligand has a functionality to import the Abi of a verified smart contract from either scan. So if I were to pick this address and put it here and I'm picking the chain to be hoven, what I do now is that I want to making a request to the ether scan just to just import the Abi from this contract. And if I press import, what Liger does is that it's going to fetching the Abi that was already verified from either scan and then it's going to making that request in Liger automatically. So I'm going to hit import and this is what you're going to see. Leica is going to import all the function of this smart contract so you can just easily making a request to it without having to making it yourself. All right? So let's making something exciting, more exciting than just query for the total supply. I want to mint wrap easily for myself.
00:15:43.900 - 00:16:52.270, Speaker B: But firstly, let me make a query to get my balance. First, I put my address here, as you can see that after I query from my balance with this address, which is the address of my wallet, what I see now is the balance of rabbis in my account, which is zero because I don't have any wrappies in my account. If I want to have wrappings in my account, what I have to do is to deposit my ETH into this smart contract using this function. So let me put my ETH real quick and I'm going to hit send. And what I do now is that if I hit send my ETH, I'm going to send 0.1 ETH into this smart contract and what I expect is that I'm going to have wrap ETH in my account with the value of 0.1 after this transaction was finished.
00:16:52.270 - 00:17:47.960, Speaker B: So let's quickly click send here. All right? And yeah, just as I said that what I expect is that after this transaction was finished, what I'm going to see is that it's already finished. But what I expect to see is that if I make a query to this balance of function, I'm going to see the different number, not the zero that I saw here. So let's make a request to this. And as you can see here that I have a different number of rack keys in my account. Now, let's copy this to verify if it was really 0.1 east.
00:17:47.960 - 00:19:00.930, Speaker B: So let's hit the converter tab again pick unit. And here as you can see that I am now having 0.1 wrap east in my account. So yeah, this is basically how you're using Leica to making a request to smart contract. As I told you that it's going to have some similar experience as when you're using Postman or Author Request builder. But I just want to quickly show you the other function that we have provide if you want to making some requests to smart contract and after you finish with the UI and you just want to use this code maybe in your test script or use this code in your bot or something. We also have a code Snippet feature that you can just copy the code and auto generate the code that you can just use in your node JS or something.
00:19:00.930 - 00:19:56.612, Speaker B: Yeah. Before I wrapping up the workshop, I want to show you the feature that we've been working on. And it's a feature called Scenario Request. It's going to look something like this. Just imagine when you just want to having a request when you want to making a request after a request, after a request or when you want to planning to just making a lot of requests to some smart contracts and you want to make a scenario of it. We also have an experiment feature called Scenario Request that you could just planning your request in a flowchart and it's going to work something like this. Let me walk you through this scenario real quick.
00:19:56.612 - 00:20:55.530, Speaker B: So the first thing that I do was that I making a request to get the balance of my account and I'm putting my address as a parameters. And then because it was a view function, it's going to return me some value. So this value, I am going to assign that to the variable name my balance. And after this request was finished, I'm going to this condition and checking as I said, that after this finish, I'm going to store the value into the variable called my balance. And I could access that value by adding context before that. And what this condition does is it's going to comparing my balance to SIBO. If my balance were larger than SIBO, it was going to take this case.
00:20:55.530 - 00:21:43.220, Speaker B: But it was smaller than zero, it's going to take in this case, which is if it's taking this case, that means that my balance of Wrap East is more than zero. What I do is I'm going to withdraw all of my Wrap East. But if it's not, if it's going to this case, what I do is that I don't have any Wrap East in my account. So I'm just going into making a request to get a symbol of this Wrap East. So let's quickly running this. If this was really work, I'm going to hit start here and it's going to make this is going so quick. Let me confirm the transaction.
00:21:43.220 - 00:22:57.864, Speaker B: When Arthur finished making a request to this method of balance off and I've got a return submit, what it does is that it's going to storing this value into the context table over here with the key of my balance and the value of this really large number. And after that, it's going to this condition and it's going to compare this number to Sivo. And this condition obviously hold true. So it's going to this branch which is going to withdraw all of my Wrap East balance. And you could kind of just looking at the transaction details here. And yeah, what I expect is that if I press this button again, what it's done is that it's going to this route instead of this route. So I'm going to press Start button again and you see here that it's going to this route instead of this route.
00:22:57.864 - 00:23:49.228, Speaker B: And the value of my balance update to zero. So yeah, this is basically what Scenario Request is going to look like. There was another thing that I want to show you. Let me get back to the landing page. Go to the documentation and using hard hat lighting. If you're using hard hat in your project to making a smart contract, we also have a hard hat like your plugin that's going to help you syncing your contract to like it so you don't have to making a request yourself. And this feature is also in the experimental state, but that was really cool to try.
00:23:49.228 - 00:24:48.850, Speaker B: I encourage you to try and it's going to work something like this. Let me show you this. I have a hard hat project on this site and I'm going to run some script here. And after I ran the script, what it does is that it's going to syncing the Abi to the liker. So you can just import the Abi and you can kind of making a request through the UI without having to write L code. And this will be really convenient when you want to quickly testing some small function or something, right? Yeah, let me get back to my slide again to wrapping up all the thing I have said. I know that I've been talking so quick in this session, but feel free to ask me any question after that.
00:24:48.850 - 00:25:37.650, Speaker B: So yeah, liker would help you to making a request without having to write code. This is very convenient. You want to quickly changing some code and want to quickly test it. And also you can use liker to there's a function. There is a feature in Liker that will allow you to making environment variables so you can reuse it again in your request in the future. This feature is called Environment Variable where you can just define a new variable that you want to use again. Like you see here, I just defined the variable of uniswap token and it was the value of that address and it just reusing again and again.
00:25:37.650 - 00:26:25.884, Speaker B: This is what the hard hat liker was. Ligers also offer you a seamless no request experience where you have your hard hat and you're making some change to smart contract. Liker would have ability to auto syncing that API to Leica. So you could just quickly make a request to it. And this feature called Scenario Request. You can kind of plan your scenario or plan your request and making a request after each request with just one click away. And not just a lot of large feature, not just a lot of huge feature.
00:26:25.884 - 00:27:16.850, Speaker B: We also provide you with a lot of small feature to help you making smart contract faster or just have a better experience working with smart contract. I show you the converted app that I just convert the value boy to ease and I also show you the cursor. I just quickly show you the cursor Nippet. And there was another function that I haven't showed you yet. That was a function called Note. This feature is going to help you maybe when you building a lot of requests and you just want to quickly noting something. You can use this note reader to do that and yeah I think this was about all of I have today.
00:27:16.850 - 00:28:04.850, Speaker B: I think I'm talking really quick on this session but feel free to ask me any question if you want to ask me. Let me open. All right. So that was VG. He asked me can I not call public custom function that actually cost gas as I'm updating this contract. Yeah, well actually we not support that yet but I think there was a way to do that and that way was that you can just forking some minute into your local machine and making a request to that on your local machine so you don't have to pay gas for that.
00:28:21.540 - 00:28:48.790, Speaker A: Thank you for excellent presentation Nantakan. I think that was a great time to mention. If you have any questions, I highly recommend continuing the conversations in Discord. It's a great place to meet with everyone including him and continue those conversations. If no one has any more questions, I think we can wrap up the session here but I want to make sure that everyone gets a chance to ask. Feel free to throw some questions in the chat real quick and we'll get to them.
00:28:50.920 - 00:28:51.596, Speaker B: All.
00:28:51.738 - 00:29:12.700, Speaker A: It that being said, I think you did a great job explaining everything. It's clear everyone got all the information that they needed so I really appreciate your help in this session. We're going to be closing a session right here. I want to thank everyone for joining us and good luck hacking.
00:29:13.600 - 00:29:14.890, Speaker B: Yeah, thanks a lot everyone.
