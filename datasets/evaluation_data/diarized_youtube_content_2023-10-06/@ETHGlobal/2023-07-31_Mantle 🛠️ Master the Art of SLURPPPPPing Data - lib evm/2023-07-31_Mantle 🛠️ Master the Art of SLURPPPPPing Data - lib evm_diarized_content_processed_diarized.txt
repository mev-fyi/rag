00:00:07.290 - 00:00:30.550, Speaker A: Thanks. Coming. Welcome to schlerp. Mastering that of schlopping yummy data. If it doesn't make sense to you, don't worry, we'll proceed to explain what this is. So one query. One query is all you need is the claim that I'm giving in this talk where if for you front end developers, I'm claiming that you can extract all the data you need for your front end application in one query.
00:00:30.550 - 00:00:46.460, Speaker A: So a little bit about myself. I'm a Deverel at mantle XYZ. We're in layer two that just launched last week. Feel free to check us out. Mantle XYZ. And those are my socials. So the number one thing for every DAP is the front end.
00:00:46.460 - 00:01:24.578, Speaker A: I mean, that's what your users interact with, that's what your users see. No one really cares about the back end. It doesn't really matter how it organizes logic, as long as it's aesthetic to the user, the user will come back. If it loads quicker, the user might come back more often. So Albert Einstein, the react JS founder, famously said that frontend is just a well of bugs. Reason being because frontend requires a lot of state management, you want to query data a, data a, and then you use data a to query data b, and use data b to query data Cde. So there's a lot of state management involved.
00:01:24.578 - 00:01:59.418, Speaker A: So I'm here telling you that by querying all your data in one query, you can avoid auto state management and reduce the number of bugs we'll go through. Like a simple uniswap case study. And everyone here I assume, is familiar with the uniswap model. You put in some tokens and you get out some tokens. So in this example, we're swapping maybe say ten e to USDC. On the surface it sounds very trivial, but behind the scenes there's actually a lot going on. So the front end is kind of anticipating how many ETH you want to swap, what asset you want to swap.
00:01:59.418 - 00:02:46.642, Speaker A: In this case it's ETH. How much of the asset you want to swap. In this case it's ten. How much of the asset you want sorry, which asset you want, which is USDC in this case, how much are you going to get out from this swap, how much are the fees on the network in USD as opposed to ETH? And what is the price impact? Do you have enough ETH to complete this swap? So and so on. There's a lot of complexity going on behind the scenes. And a very simple example of how one might approach this data extrapolation is with this example whereby you get the EF address, and from the EF address you get the user's balance. When you get the user's balance, you can get the user's die balance and then sorry, if balance or die balance, and then you can get the amount of die that the user will get swap out.
00:02:46.642 - 00:03:23.390, Speaker A: Given this data. This is terrible one, mainly because this is blocking to get the die balance, you first have to get the ETH balance and so on and so on. So this is incredibly bad because it's blocking. A naive approach to do this is parallelizing all these queries into a promise. So you might call awaitpromise all and query all the promises. This is still good, this is good, this is better. But you're still doing three parallel queries and I'm here telling you that you can do any amount of data you want in one query.
00:03:23.390 - 00:04:25.730, Speaker A: So yeah, we can do all this in one query and so we can do that with multicall three. For those of you who don't know what multicall three is, it's a smart contract that is deployed on, I think, 106 chains, all using the create to upcode, so it's on a deterministic address and so you can use the same address for all 106 chains. Traditionally without multicore three. How your DAP would interact with the blockchain is by issuing a separate query for each data extraction, for example, die balance off, uniswap swap amount out and the balance of E. With multicore three it's actually a smart contract that lives on the blockchain. So when you call multicall aggregate, you actually call one query to the smart contract, the smart contract then queries all the other relevant information needed from the other contracts. So that way instead of using three queries, you can use one query.
00:04:25.730 - 00:05:40.358, Speaker A: The problem with multicloud three is that it is quite verbose by default if you're using ETIs, which is the canonical library these days, to encode and you have to actually encode and decode your function into a very specific format. So it's not very user friendly, it adds a lot of complexity on the front end, but it allows you to achieve querying parallel multiple queries in one query. Luckily, Vium, I'm not sure if I'm pronouncing this correctly VIAM from Paradigm XYZ, a new JavaScript library supports multicultural encoding and decoding out of the box, if you guys would like to check it out. I think on the developer docs page you can see that there's a specific provider for the multicall three provider provided that it's deployed on your chain. So that's cool. Multicolored is good, but it's not good enough because it does not support dependent data. And what I mean by dependent data is that it does not support the cases where the inputs to the previous query, sorry, to the current query is obtained from the previous query.
00:05:40.358 - 00:06:44.494, Speaker A: In this case we have a vault address obtained from a yield optimizer. We would like to then query that address to get the bounds of our vault address, which is simply not possible with multicolored three because it is stateless. Yeah, so we can't do that in multicolored three. However, if we combine two little known hacks on E, Call and Solidity, we can actually achieve and we can actually achieve arbitrary code and arbitrary business logic in a read only fashion. And let me explain a little bit more. So, for those of you who are not familiar with Eve call, EC call is an JSON RPC method that is used behind the scenes every time you use a readonly function. For example, if on the front end I do die balance off user address, what's actually happening behind the scenes is that I'm calling the JSON RPC provider EC call and it's providing it with a transaction object.
00:06:44.494 - 00:07:13.090, Speaker A: For example, an address the two address the data blob and then it will return me the data. So that's what's going on behind the scenes. A little known fact is that you can actually use Ethcore to query data from mutable functions. An example of this would be the uniswap quota. So traditionally, the uniswap quota is a write function. It's a mutable function. For example, the function quote exact input is external.
00:07:13.090 - 00:07:45.438, Speaker A: It's not external view and it's not external pure. What that means is that if you're using it based on the Abi loan, each query will cost you gas. But you can actually do it in a view only mode and achieve the amounts out without sending a transaction. So you can actually query traditionally read functions in a read write functions in a read only matter. So cool. That's cool. We can read on write functions.
00:07:45.438 - 00:08:46.546, Speaker A: So what? Okay, hear me out. So what if we hijack Solidity and made it return data in the constructor and write the data extraction logic in the constructor? Then we use ETH call to perform a read only contract deployment to extract out the data we want. Does anyone get that? That means, what if we can write arbitrary code? Because traditionally Solidity does not return any values when you create a contract. So what if we hijack a constructor to force it to return some data, and while deploying that contract, we get back some values? Okay, again, let's recap again what the dog said. One, we force the Solidity constructor to return values. Two, we write out our business logic in the constructor aka writing out arbitrary code. Three, we use E call to quote unquote deploy the contract.
00:08:46.546 - 00:09:20.110, Speaker A: And upon deploying the contract, our constructor will execute the business logic and return us the data because we've hijacked it to do so. So this is how you force the constructor to return values. We need to go into assembly mode. Now, we have some kind of arbitrary data that we want to return. Return data. We perform our data extraction logic or business logic, aka arbitrary code in the middle section. We abi encode it and then rewrite some assembly to force it to return some data.
00:09:20.110 - 00:10:17.326, Speaker A: And that is how you force a constructor to return values. Next, once we've written a contract to pass our custom business logic, we can use E call to deploy the contract. And by deploying the contract with provider call, which uses ETH underscore call behind the scenes, we're able to deploy a contract with custom business logic in a read only manner and extract out our data. The only thing left for us to do now is to format the data into its relevant data types. For example, U into 56 strings or bytes, depending on how you packed it. And that is how you can query all the state you need for your front end application in one query. Some parting remarks is that Eve Call actually is actually really powerful.
00:10:17.326 - 00:11:01.594, Speaker A: It has a lot of undocumented, not well known features behind the scenes, such as the state overwrite set, where you can actually overwrite the code or the storage slots behind the scenes. You can also override the balances or nonsense of things. It's very, very useful when testing things. GEF, the most popular ethereum execution layer, has a GraphQL server behind the scenes, so you can also extract a lot of data through GraphQL instead of the traditional RPC methods. Yeah, I have a proof of concept on my GitHub. It's GitHub.com libmcallabuser.
00:11:01.594 - 00:11:54.580, Speaker A: There's a proof of concept there if you guys would like to check it out. Yeah, thanks for listening. Any questions? Yes, I realized I went a bit quick here. Have you done any benchmarking to see what the actual performance improvements have been? I mean, this is more like it's the same. I mean, it's all on latency, you're offloading the computation to the ethereum node, so you're not actually on speed wise, it's the same because you're not actually doing any additional the amount of data isn't that significant. Yeah, it's kilobytes. Unless you're on like, I guess, 2G or 3G, it might make some issues, but I think traditional on on most apps, it shouldn't matter.
00:11:54.580 - 00:12:11.030, Speaker A: Yeah, because there's a contract size limit of, I think, a few kilobytes. Are there any protocols using this in production right now? No, I'm using it. Yeah, you very much. Awesome, thanks. Thank you. Bye.
