00:08:32.770 - 00:09:10.734, Speaker A: Oh, is it on now? Cool. Hello everyone, thanks for coming and it's my honor to be here and thanks for having me. I'm Andy, I'm an engineer from Quantstamp and at Quonstamp we are like the security company. So today we'll be talking about how constamp helps secure the past, present and future and just share some stories, interesting stories we had from our experience. So who are we? We are a security company. We try to secure the future of Web Three and as a security company we are very lucky. We can get involved with different kind of clients.
00:09:10.734 - 00:10:02.100, Speaker A: A lot of them are top projects within this industry and we are also a global team so we work remotely, like all of our coworkers are from different places around the world. I think it's probably the same for a lot of blockchain companies. And last, we're probably one of the earlier smart contract auditing firms and we are also trying to continuously improving ourselves and that's what we're trying to share today. So as all wisdom said, the best defense is a good offense. As a product developer or as a protocol company, the way you want to get your user is you must make sure your user can trust your product or your protocols. So you need to make sure your security is of the highest standard. So like user would be able to be comfortable interacting with your protocol or your product.
00:10:02.100 - 00:10:31.066, Speaker A: And to do that, that's what we're trying to serve. We provide audit services, that's our core service. So we usually do audit for smart contracts. It includes for instance like NFT DeFi and a lot of things. And today is an Ethereum conference so a lot of them would be in solidity. Aside from smart contract, we also help auditing since the layer one blockchain itself. For instance, these are some of the audit we did for the east .0
00:10:31.066 - 00:11:03.054, Speaker A: client. Also we also help wallet or key management scenes as well. Aside from that, we not only do audits for Ethereum, we also help Solana, we did their system contract audits and also a lot of layer one or layer twos. Like we also help Boba to do their optimistic Rob audit as well. And we also usually treat our client as a friend. As a friend we help. So we try to increase our impact not just from auditing.
00:11:03.054 - 00:11:57.240, Speaker A: There are times like client would come to us that they are not sure what's the best way to implement things and that's how we come to help because we are able to look at other protocols or how other people do. So we can for instance, help them figure out what's the best algorithm to do. So there's my personal experience. One day we have a client, they're trying to write a Staking smart contract. So as people probably know what Staking usually is like you provide your liquidity and then whenever there's a reward, you get certain reward depending on your portions of liquidity. And at that time the client, when the co come to us, we're immediately like, oh, this looks a bit weird because the way they're sharing the reward was like they run a for loop, they just run through all the stakers that's registered and they give them the reward. So it's like immediately we're like, oh, this would have some gas issue.
00:11:57.240 - 00:12:48.658, Speaker A: And that's the time we're helping them, we're trying to help them like, oh, so we see a lot of other DeFi, how they use. It's like if people developing in DeFi, they know it's usually using like reward per share algorithm and that's what we share with them. We tell them like, hey, actually here's a blog telling how you do this algorithm and there's even sample codes. And the client eventually updated their algorithm and then were able to finish our audit. Another interesting story is from like we have an optimist rob clients. So not sure if you're familiar with layer two or not, but whenever you're bridging things from layer one to layer two or layer two to layer one, you have different kind of messages that have to be relayed from either from layer one to layer two or vice versa. However, usually the protocol team would help to do that, but it is super expensive as you can imagine.
00:12:48.658 - 00:13:47.558, Speaker A: All the transactions, I mean they're layer two, but sometimes if they want to bridge things back to layer one, those messages or those transactions, they're helping you to relay back to the layer one and they have to pay the gas fee for that. So we are discussing how we can solve this and we also try to provide some potential solutions because I think currently there is no perfect answer for this yet. Yeah, so that's another interesting stories we had from we are helping out our friends and clients. So as a security firm, we're very lucky. We have able to look at so many different kind of things and we are able to get enough and also we have to keep ourselves alerted with different kind of hack or exploit during the period. So we are able to learn a lot of things from the past. So one of the really epic things we had, we participated before was the MakerDAO Black Thursday.
00:13:47.558 - 00:14:27.778, Speaker A: Not sure if anyone here was still in this industry in that time. It was a few years ago. It was like, I think three years ago, 2020 March. So what happened at that day was like, there was a time, I think it was a bear market, but it started to get up and then all of a sudden is there in the day, dropped around like 40% in the price. And that itself, it doesn't break since yet. But then the problem was, I think nowadays all the gas are super expensive if you are interacting with ethereum right now. But during that past years, the gas fee was actually pretty cheap.
00:14:27.778 - 00:15:15.990, Speaker A: Like 5G way was like the normal and ten G way is already like oh, that's expensive. I think nowadays if you are interacting, it's like oh, ten, that's freaking cheap. So it was the opposite situation compared to now. So what happened that there was a price drop so fast on the market. So everybody is trying to either run away from exchange or they're trying to do whatever things they think it's better for them to hedge the risk. So there's a lot of transaction happening on the ethereum at that single day. So what happens? Like the gas price suddenly goes up from a very low level and then when the price goes up, it start to break things that's off chain, which was like people wasn't imagining.
00:15:15.990 - 00:16:23.146, Speaker A: So the first thing that started to have an issue was their Oracles. And Oracle was kind of like the backbone of the infrastructure of D Five, if people would know because you need the Oracle to provide the price on chain, otherwise the smart contracts on chain wouldn't know how to get those things. So what happened at that time was like the gas price goes so far, the Oracle was unable to send their transactions to the chain to update their price. So their price keep saying like the old level and then all of a sudden when the Oracle transactions eventually get in, the price drops so fast it start to break all the healthy threshold for the MakerDAO. Oh, by the way, so how MakerDAO work is like they have a lot of collaterals and they use collaterals to mint their when it dropped their healthy threshold, those collaterals would be sent into an auction for sale skills. Like you're lacking money, you need more money to cover your that's. So that's how it started because Oracle price couldn't get in.
00:16:23.146 - 00:17:04.678, Speaker A: And when they get in, boom. A lot of things just started to break. And once those auctions got into there, there's another thing started to break the same way because of the gas price. So Record Dot did provide some software for the users to run and then so they can automatically beat those auctions to buy those collaterals when they're liquidated. But the problem is those software also have the gas price issue. Let's set a gas limit that's not high enough for them to guess through these kind of situations. So those bidding transactions wouldn't pass through as well during the auctions.
00:17:04.678 - 00:17:52.600, Speaker A: And until one attacker realized this. And so the only thing he did is he just increased his gas price and he do a very weird bid. He just buy an ease with zero die and it started went through and a few attacker also realized this. And then all of them start to attack in this way because all the other people who's using the original Mechadot software, they just couldn't went through their bit. So only low speed they're just buying with zero dai went through and all the ethereum from the Megado collatorial just been kind of stolen. Although they are just following the protocol. So that was what happened during the Maker Dow Black Thursday and it was around like I think 8 million of loss for the protocol itself.
00:17:52.600 - 00:18:40.278, Speaker A: It doesn't look that bad compared to a lot of current hex, but it was a very huge one during that period of time. Specifically like it was before a DeFi summer or just around the DeFi summer. So to solve this eventually there's a community group called the Diebextop Syndicate. They're trying to sort of come here and try to resolve this problem. So they come up with a solution which is they mint more maker tokens, their governance token. So they mint their governance token and to do auction for their governance token to try to compensate those collaterals. However, just in case if that doesn't work, because they set a very huge limit, I think it was like 50K.
00:18:40.278 - 00:19:20.754, Speaker A: Unless you're buying fifty k of those tokens, then you can't really participate. So in case those wouldn't work out to INBO like the retail users to participate in these kind of auctions, there's a group called Syndicate and then it provided Syndicate contract during that time. What constant help was like they had this we joined this group of community people and then they have this contract and we immediately audited it. So I think the hack was happening on the 24th if I remember correctly. And then this contract was audited just one week in within a week. So it was a very fast reoccuration. I mean, the things still happen, the hack is still like the loss is lost.
00:19:20.754 - 00:20:01.470, Speaker A: But I think all the other process, especially this is from a community, it went through pretty fast. Compare. Yeah, so that was the first one we were to talk about and the second one, one of another historical event we used to help was like the voltage finance. So we didn't really help directly on the voltage finance hack. So this hack, it was a compound related hack. So I think if you have ever been developing solidity contract you would be know about reentrancy issues. So this is a hack due to reentrancy.
00:20:01.470 - 00:20:46.462, Speaker A: But the problem and how they did is like this is a voltage finance is a fork of the compound. But it was fine in compound because the compound never interact with I would say like weird ERC 20 tokens because there are some kind of ERC, I mean they are not really ERC 20. They are following ERC, probably another protocol. But then they have a hookback functions so whenever they are receiving the tokens or they are sending the tokens. So those kind of protocols allows the tokens to be reentrant during to other protocols. But then in the compound they have a governance process. So they do a due diligence for all the integrated tokens to put on their pools where a lot of fork wouldn't do the same.
00:20:46.462 - 00:21:44.366, Speaker A: They would probably fork the code and then they just put it and they just started run it. So that was the main issue here. So this team, they forked the compound code but they didn't follow or they might not know like they actually have other security operational process to help mitigate some of their risk. So without knowing that, they come up with this kind of hack because they allow integration with those kind of more unstandard tokens. In this case, what we helped was we had a lot of our clients that's working on compound fork as well. So when we realized this during that period, there are more than this, I think there are another few hacks with the same issue. So we immediately alerted the people or the teams where we know they're using the compound fork as well and we helped at least two of them to avoid this problem from happening on their protocol.
00:21:44.366 - 00:23:02.866, Speaker A: Although another probably certain was fine. Yeah, so that was how we sort of help out on our past clients and how some of the past exploit and we try to learn from them. However, we're living in the prison world and as a security firm we have to continuously improve ourselves to be able to catch up with the newest things and to catch up with the newest hack because they always come up with new ways to attack. So to do this within our company, we are doing a monthly heck run up. So we have engineers every month we actually will try to look at what happened during the past months, how many dollars were lost and we try to understand and learn those things, how those hack happens and how can we prevent it from happening again. So one very interesting one is like deforce it is again reentrancy attack but this time a little different is a View reentrancy attack. So typical reentrancy attack you have a state change and before you finish in all the transactions you go back to the function again.
00:23:02.866 - 00:24:19.338, Speaker A: That's how you start the attackion. By in here, the View reentrancy attack usually a view function in solidity you won't be able to mutate the state. So what it does is it's actually calling another function that would change the result of the view function and then when you're integrating with this protocol, if you're calling the view function you'll get a run value and that's how they attack it and usually it happens for those functions that's providing the price for liquidity pool tokens. So for instance, if you are integrating with curve and you want to know how the Curve LP tokens price would be, you might call one of their functions to get the price of LP token. But these functions could be gamed in the re entrance way because as you can imagine how you would calculate the LP price, it will be like you have a pool with two tokens. So you'll be like how many tokens of token A is in the pool and how many tokens of token B is in the pool and times their market price divided by the total balance or total supply of your LP tokens. That's how you will calculate how each LP token would have its own value or what the price it is.
00:24:19.338 - 00:24:57.078, Speaker A: And during the reentrancy, for instance, if you are, let's say, withdrawing the liquidity, then when you're withdrawing liquidity, first you will burn the LP token because you are sending the LP token back to trying to get your original token from the pool. So you will burn the LP token. This part is probably fine, it's probably hard to re entrance, but then whenever they're sending back the original tokens, then this part could potentially trigger the re entrance. When they send back, they can trigger the re entrance. Then in this part you have three variables. One is like the token A, token B and the LP token. The token b is still not changed yet.
00:24:57.078 - 00:25:49.142, Speaker A: So you will have a round formula in here if it's reentrance and you can reentrance the integrated protocol where it would get a round value. So you will be calculating the round value of your LP token. Then everything could be wrong depending on how you integrate it with it. So that's one very interesting attack that we've seen. Although this specific vulnerability has probably been announced around a year on curve, but depending on the protocol, they might not be aware of it. Another very interesting takeaway we get from this kind of monthly hack run up is we realize sometimes the hacker or the attacker might not have an exit plan. So they are very smart, they come up with a plan to attack you, but they didn't come up with a plan.
00:25:49.142 - 00:26:51.702, Speaker A: How do they withdraw those money out to real life? So I think one time we see a hack and the hacker are actually using their own ENS that's probably linked to their Twitter account. So I think after two or three days the guy was arrested after that just because he didn't really do too much effort on that part. And also a lot of tokens, for instance, like USDT, they can immediately blacklist your address if you didn't try to mix it up to another address fast enough. So that's another interesting takeaway we get from our monthly hack roundup. Beside of that we also have restore retreat which in Japanese we kind of call it like shugil. So we try to lock ourselves for a week in probably yuang. I mean, in real life it's been hotel, it wouldn't have really been the temple, but we try to log ourselves in a hotel.
00:26:51.702 - 00:27:47.470, Speaker A: And for that way we were just discussing about, for instance, what some potential hacks for some kind of new ecosystems or for new kinds of architectures. What are some of the weakness or sometimes we just discuss what are some new tools. So for instance, I think for next one we'll probably be discussing about how we can use KGBT to do our audit potentially. So we give a lot of generate a lot of our talks or our papers from this. And so for instance last years, probably last two years we discussed about what kind of potential hacks could be happened on bridges because actually a lot of bridges nowadays are still pretty centralized. Not sure if people are aware of this and even not centralized they are still like how bridge handles reorg. Usually they didn't really handle it very well.
00:27:47.470 - 00:28:48.894, Speaker A: So we realized this after we do the research. Another thing last year we did was we're reviewing all the Rob systems and usually people when they come to row up they'll think oh it's a layer two, it should be very decentralized. But then because of their sequencer are usually still nowadays I think it's improving but it's still centralized sequencer and they don't have a very decentralized way for them to exit from the layer two if they indeed have some issue for the sequencer. So that was another research we were trying to do and then we had also have a short paper for that as well. So these are the things we do try to keep ourselves up to date. Aside from that, usually when people come to us you feel like we are third party, we are a bit farther a distant away from you guys. But there are times we try to actually be more integrated to your protocols.
00:28:48.894 - 00:29:47.492, Speaker A: For instance like in Cladton, which is a blockchain itself, not sure if people know that. I think it's from Korea so it's probably more popular there and we actually try to stake and try to join their governance. So we try to be part of them and we also run our own validation nodes for them to secure the network and this helped us as well. So we learn more knowledge and that's how we can get more deals and get more deals we learn more knowledge and we can use it as a good cycle to improve ourselves. So as our missions is to secure the future of web3. So we not only try to do those things, we also help train new talents because in the future it will be a new generation that's working on the blockchain space or even the AI risk blockchain space perhaps. So we have engineering helping this for instance before we work with the DeFi talents.
00:29:47.492 - 00:30:37.940, Speaker A: I think it's a program that's trying to train new engineers working on DeFi platform. So we have a bi weekly call with them trying to share some of our knowledge and try to share some of potential career paths with them. We also have an engineer currently teaching in a university in Taiwan. I'm not sure it's a blockchain or DeFi course but he have a course there, it's a full semester course and I look at their agenda, it's pretty deep. I think it's from 101 blockchain 101 to all the way to very complex DeFi contracts. Yeah. So that's how we are trying to help in this industry and so far our product or our service has been helping to secure before launch.
00:30:37.940 - 00:31:30.132, Speaker A: That's why we do audit. So we help to ensure your quality before you're deploying your contract. Although like a lot of clients deploy their contract and then after a while they come to us. That's another story. But usually our security, we usually help before you deploy, but we are also trying to see how can we actually continuously helping our people to help secure them further on? Because it's an ongoing game, it's not things that you finish after deployment. So we have a subsidiary called trendproof and they're trying to provide sort of like a guarantee, like an Ebol care. So whenever you have an audit and we are happy with your quality, then we can potentially give you this kind of guarantee, which in the future, if some exploit does happen and we didn't catch it during our audit, then we will be able to refund you into a certain degree.
00:31:30.132 - 00:32:01.910, Speaker A: And also we will provide a continuous monitoring service that's where we would be able to alert them, like, hey, I think this is weird. You probably want to take action to pause your contract or to do certain actions within probably like an hour to try to try to mitigate the loss of your exploit. That's what we are trying to do in the future and continuously improving this. So that's pretty much it. Thank you everyone. Any questions?
00:32:10.220 - 00:32:12.570, Speaker B: What is the name of the blockchain course?
00:32:13.420 - 00:33:10.240, Speaker A: Oh, it was called DeFi Talents, but I think it was a bit weird, like a bit years ago. Yeah, we had another course, but that's on the university, inside the university. So it's probably not online. Yeah, I think not yet. I tried it will provide certain insight, but it's still a lot first, it has a lot of false positive and it sometimes doesn't really fully understand it as well. So I wouldn't say yes right now, but given the current status, I think yeah, probably after years it will and we need to figure out how we cannot survive. As long as you can do.
00:33:14.760 - 00:33:15.124, Speaker C: What.
00:33:15.162 - 00:33:17.750, Speaker B: In your mind is the most ingenious hack you've seen?
00:33:19.640 - 00:34:22.292, Speaker A: Ah, that's a good question. The most ingenious one? Well, so the one, the real one of the recent one, it's not really ingenious, I think. It's not like they use certain things that's super brilliant, but one hack I used to see, like they just find one line of bug. I mean, a lot of hack is like that actually. So I found that that's very interesting because they have to spend so many effort on actually looking at their contracts and they don't even know which one would have issue, right? So I probably don't want to name the exploit itself, but then I used to see one, and then it's really just one issue. That's because of the mapping. When you're mapping, then usually you wouldn't map, like, a zero key, right? You wouldn't have, like, a dictionary.
00:34:22.292 - 00:35:03.136, Speaker A: Zero equals blah, blah, blah. But somehow during the deployment, during your previous deployment, they accidentally deployed the value to that mapping slot, although in the later deployment, they never used that, so people forgot about it. But then the hacker realized that and then used that as a hack to get a fee. Yeah, so that one was very interesting. And then even worse, was, like, everybody can copy the hack. So at that time, there's a transaction there, and then people just copy past their transaction, probably change their address, and then just boom. And the next hack happened, and boom, boom, boom.
00:35:03.136 - 00:35:46.494, Speaker A: So originally it was one attacker, and then it becomes a public attack on the world. Yeah. Cool. I guess if no more questions, then that's it. Thanks, everyone. Before you all leave, because you came, we do have some swag, and it's like super scarce, like bitcoin scarce, like swag. So we have, like, ten plushies we have ten, probably eight t shirts.
00:35:46.494 - 00:36:09.970, Speaker A: Sorry. And some tote bags. You all can come and pick something and take whatever is left. But yeah, sorry if we can't give you what you want. But it is what it is. Yeah, you can take yeah. Plushie.
00:36:09.970 - 00:36:15.622, Speaker A: Plushie. Thank you. One's a plushie. Very rare dinosaur.
00:36:15.686 - 00:36:22.810, Speaker B: Yeah. Can I get one rare quantum dinosaur? Awesome dinosaur.
00:36:23.970 - 00:36:38.094, Speaker A: The t shirts are really good, by the way. They're like legit, like, nice t shirts. You want a t shirt? Yeah. Nobody wants a tote bag.
00:36:38.142 - 00:36:39.634, Speaker D: This is actually, like, a really nice.
00:36:39.672 - 00:37:09.860, Speaker A: Tote bag as well. No, you want a bag? You can have yeah, thank you. You want a bag? These bags are actually really nobody else. Nobody else. We still have t shirts. T shirts. They're very large, though.
00:37:09.860 - 00:37:43.224, Speaker A: Very large. Extra fast. Small, medium. Medium. Anybody else? You're awaiting for us to leave? Can I get one of those items? Look, my friend. Perfect. Thank you, sir.
00:37:43.224 - 00:37:56.790, Speaker A: All right, thank you. Nobody wants t shirts or tow bag.
00:38:10.860 - 00:38:12.170, Speaker B: This turned up.
00:38:12.620 - 00:38:13.370, Speaker A: Anybody?
00:39:25.990 - 00:40:22.086, Speaker B: Hi, guys. Thanks for coming. I'm Krill, one of the core developers at the Bob and Zikibob project ecosystem, and we are building a next generation stablecoin with optional privacy. So we're going to talk about that. So we believe at Zikibob that financial privacy is, first of all, of course, very important for everyone use cases, not only in crypto, but in web two world. And as in web two world, is really a norm for people to think that their financial privacy is somehow preserved within banks and other institutions. In crypto, it usually becomes a big problem since the crypto blockchains are basically public ledgers and all information about public transactions are freely available for everyone on chain to see and when it comes to sensitive financial information.
00:40:22.086 - 00:41:35.886, Speaker B: So there is no really a simple mechanism for achieving privacy in these financial activities within everyday usage of stablecoins. So at Zikibob we are trying to fix this problem by introducing this optional privacy for a stablecoin. So we are basically right now building three important projects within our Zikibob ecosystem. So Bob itself is a multi chain multi collateral stable token with optional privacy implemented via the Ckbop protocol which is powered by Cksnarx which allows this private micropayments between users. And one of the recent projects we also started working with is called Bob CDP which is basically a protocol which will allow users to not only generate Bob by locking their stable collateral but also use some of their volatile on chain assets to mint this Bob using the CDP model. So just a few words about the Bob stablecoin. So the first typical question that is asked about the stablecoin which you probably didn't heard about is related to how does the stablecoin preserve its price and keeps it back.
00:41:35.886 - 00:42:44.958, Speaker B: So here we decided to follow the simplest possible approach. First of all with just starting by backing each Bob with similar amount of USDC. So for now Bob each freely available and circulating Bob is backed one to one with USDC and all circulating supply is 100% backed with on chain stable coins. And to further harden the peg we are also using this concept of very tight concentrated ranges of liquidity on uniswap v three and similar liquidity protocols. Yeah for hardening the pack and keeping this one to one ratio between other stable coins. We also introduced this headless AMM called Bobswap which is currently integrated to one inch aggregator and pathfinder and we're also looking into integrating it into other Mm aggregator frameworks in the nearest future. And basically Bob swap allows you to swap between other whitelisted stablecoins into Bob and from Bob with fixed rate which is in zero slippage and almost zero fees.
00:42:44.958 - 00:43:52.070, Speaker B: And one of the also other cool features it supports is called Idle asset compounding. So whenever somebody locks some USDC or USDT in the Bobswap contract this can be automatically autocompiled to some of the blue chips lending markets like Compound or Ava to earn some additional and notable yield for the protocol revenue which is also a cool feature to have. And just to conclude about the Bob part, just to throw some numbers. So the current market cap of Bob is about 50 million USD with achieving about eight to $10 million of trading volume daily we have more than 4600 active holders of Bob token and the overall collateralized circulating supply available freely on the market is around 7 million and the BOP itself is deployed on multiple chains. We are looking forward to deployment on other chains as well. But right now we are present on polygon optimism and Arbitrum. Rollups ethereum, Mainet and BNB Chain.
00:43:52.070 - 00:45:03.066, Speaker B: So yes, as I said before, we also started working recently on this module for collateralized depth positions which is soon going to be available on one of the Bob present networks. And this way users will be able to generate new Bob on the market using their uniswap V three or Quickswap V three LP positions with Bob or other token pairs as collateral. And this way it's going to increase the capital efficiency and allow for more collaborations for us in the future. So now jumping into the coolest part, the Zikibob. So the Zikibob is a privacy optional privacy layer for Bob token. The way it works is by using the zero knowledge proofs, people using Zikibob are able to confirm the particular validity of the particular operation and transaction without actually revealing the concrete details, sensitive details of their deposit, private transfer or withdrawal, such as the amount of their operation, the destination addresses. And so they confirm this validity of this operation by using and calculating the zero knowledge proof snark proof within their application UI.
00:45:03.066 - 00:46:01.326, Speaker B: In this way only the actual sender and the receiver of each particular operation has the ability to actually access and decrypt the operation metadata and to actually know what happens inside of this operation. Then to limit further privacy leakages and to simplify the use case the way how this protocol is used by the users all transactions are sent through the elected relayer so that users don't actually need to pay for gas. In gas tokens. And instead they can use the same token for payment of fees to the relayer as the ascending, which is the bob stablecoin. So here's a small snippet from the UI. So basically as I said, the UI allows you to make a deposit inside your privacy application from your public wallet on polygon or other available networks. Then you are able to perform transfers to other participants within the Sikibob pool.
00:46:01.326 - 00:47:05.430, Speaker B: And finally, once you for example receive the salary, you are able to withdraw them back to your public wallet to continue your DeFi journey. So right now we are looking for collaboration in multiple major use cases. So the biggest one we are currently focusing on is related to everything somehow connected to payroll activities invoicing payments processing. So basically a lot of organizations and crypto and beyond a lot of Dows are already paying their salaries in stablecoins which is a convenient choice of currency for payment of salaries and paying them and keeping them on chain is a very beneficial use case. But usually this all happens publicly on publicly available blockchains which makes it very inconvenient for everyone involved. So for DAOs makes inconvenient to disclose everyone's salary to everyone. For people receiving the salary they can be scary for receive salary on publicly available address so that everyone on the blockchain can see how much they receive, how much they spend and how they spend it.
00:47:05.430 - 00:48:27.200, Speaker B: So it makes a perfect fit for the privacy application connected to Stablecoins to kind of try to integrate with all those who are paying salaries in Stablecoins. And we are also focusing on other use cases as well, which might include something related to vendor purchases, anonymous donation, fundraising granting programs and the connection to the threatfi world and its use cases like on and off porting between Stablecoins and traditional banking, processing of bank deposits, remittances and so. And as I said, with the example of salaries, for example, how it all works. So we have our employer, Carl let's say, who wants to pay for his people and employee privately. So he has USDC, let's say he's able to go to Uniswap or one inch UI to swap his USDC to Bob at nearly one to one rate, then deposit this whole amount to the Zikibok application. And then when the day of the salary came, he's able to within one transaction to pay for all of his employees using their CK addresses. And then once the employees receive their salary, they are able to freely withdraw their Bob back to the public wallet and so nobody really knows how much each employee receives and what he does further with his money.
00:48:27.200 - 00:49:42.742, Speaker B: So right now the Zikibob application is available only on polygon and optimism, but the bob token is present on multiple chains as well and as well as people are using other chains as well. So for further kind of simplify the UX for our users, we also made this cool integration with LiFi. So you have access to the Widget of LiFi within our application which actually allows you to perform quick, efficient and fast swaps cross chain between your available assets and BOP so that you can use it for deposits or when you have withdrawn BOP, you can swap it back to other assets on any other available chain quickly within our UI. So now a few words about compliance and our approach to this topic. So first of all, we believe that compliance topic is becoming more and more important every day for every crypto project. And especially it's true when it comes when we are talking about privacy related applications. We have seen a lot of events in the past years which were related to the privacy solutions and the lack of sufficient compliance solutions.
00:49:42.742 - 00:51:32.326, Speaker B: So we also believe that no, actually a single compliance solution exists that can fit and close all the use cases and eliminate all the questions from all of the regulators. So we believe that the best approach we can choose here is to combine multiple compliance approaches which every on its own make life of malicious actors a bit harder while still preserving the decent amount of simplicity and robustness of the user experience within our application. So what we are doing on the compliance side within our application, we are basically screening the deposit and withdrawal addresses so that no malicious actors related to known exploits, hacks or other types of illicit on chain activities are able to perform operations within our privacy protocol. We also will soon start to allow our users to generate a cryptographically verified statement of their account, which includes a history of their transactions for last month, last three months or so, so that they're able to generate the report and to prove to the requesting party, which could be a centralized exchange, the banking institutions or government authorities what they actually did in the pool, where did they receive their money from and how they did it. They spent it. And so this way they're able to prove the source of funds, the way how they spend it without disclosing it publicly to the whole blockchain, but instead to just disclose them to a particular requesting party. We're also imposing different limits on the amount of activity certain actors can perform within the pool.
00:51:32.326 - 00:52:53.462, Speaker B: So we have a strict limit on the amount of daily activities you can make on the deposit and withdrawal side, we have the limit on the total pool size. All of this makes life really harder for the hackers and exploiters who want to deposit and operate on large amount of money. But at the same time it doesn't really make life harder for typical users of our application who just receive the salary or perform day to day transactions. We also did a cool integration with Binance and Know your Cat KYC provider which basically allows you to mint to your address to pass the KYC on Binance, then to connect it to the KYC enabled solbound NFT token issue that on your wallet. And our application will check the existence of this bound NFT on your account and if at present it will lift or significantly increase the available usage limits for the application. Yeah, and one of the latest feature we have added to the Ziki bob and the one we are asking our hackers to use throughout this hackathon is called Direct deposits. So basically it's a solution for simple and fast private payment integration within different partner products.
00:52:53.462 - 00:54:29.982, Speaker B: So its main goal is to minimize the required effort and coding when it comes to integrating privacy features to open source wallets, third party, centralized application, different protocols, DeFi based applications and so on. And so the coolest part of that is that even though all of the previous Vicky bob operations such as deposits, transfers and withdrawals, they require users to actively participate in the generation of the Snark proof within their UI, which makes it nearly impossible to integrate such workflow within partner products. In case of direct deposits, no actual Ezk snark proofs generation is required for the user and instead another third party is responsible for generation of those Snark proofs. So the way it works is pretty simple. So we have this potential, just a few ideas who can integrate direct deposits so it could be tax protocols, donation fundraising platforms, different crosschain breaches and protocols, maybe open source wallets, we want to simplify the life of the users, maybe some tooling related to payroll and invoice processing which is located on chain. And so all of these protocols implemented in some form of smart contracts can easily interact with the Escrow smart contract for our direct deposit processing logic. Basically by specifying the destination ZK address of the users, they want to send their money to specifying the desired amount.
00:54:29.982 - 00:55:56.590, Speaker B: Then after some time normally it takes ten to 15 minutes. The relayer, which is relayer hosted by us, will be able to process those presubmitted direct deposits in bytes, generate the necessary snark proofs for them in a trustless manner, so that no one is really able manipulate the data in the direct deposits after it has been submitted. And once this transaction from the relayer is eventually submitted to the pool contract and confirmed users of the Zikibob are the receivers of those direct deposits, are able to access the funds right away in the same way as they do by the simple interaction within our Zikibob UI. So users can continue to transfer them inside the pool to other participants or withdraw them back to the public zero X address. So now a few words about our hackathon bounty. What we are asking you to do is to help us to bring the financial privacy and to find the important everyday use cases which lacks this financial privacy for stablecoin transfers and to connect Zikibob with any existing on chain activities where it might matter. And so we are asking you to do so by integrating the Zikibob direct deposit feature with any existing or your Customly built protocol project or any other application of your choice.
00:55:56.590 - 00:56:55.438, Speaker B: So just again a few ideas. Where can we start? We can build an integration with Open Source Wallet for making deposits into privacy pool easier and more available for public usage. You can integrate it as an endpoint at the different protocols related to breaches swaps and the aggregators. You can do something with the processing of fundraising and donation from multiple users, or you can build something around the payroll tooling. And of course this list is not limited by only our ideas. You can suggest and discuss any idea you have in mind right now or later at our booth as well. So we have a total bounty of 10,000 bob for this hackathon for the five K for the first place, two K for the second price, and the remaining three K will be evenly distributed among all successful notable submissions.
00:56:55.438 - 00:57:52.670, Speaker B: So basically, all projects which successfully will be able to integrate the KBOB Tariq deposits in their projects will qualify and receive guaranteed balance from this price pool of 3000. Yeah. And during the judging process we'll definitely take a look about creativity, novelty and the implementation quality of your solution, how the Zikibop integration is actually crucial and integral to the overall application, and how your solution aligns with BOP and Zikibob ecosystem values of on chain compliant privacy. Yeah. And I think we have a few minutes for a short live demonstration of how direct deposit works. So I'm going to log in into the Zikibob UI right now. So I have created previously a couple of days ago test ZK account.
00:57:52.670 - 00:58:18.422, Speaker B: So we're going to wait until everything is loaded. So what we see here is that I have a ZK account. I have connected a public MetaMask address to it on which I have right now 5.9 bob tokens. I have a ZK account with the total balance of 14 bob. If I go to the history, I will see that this balance of 14 is obtained usually. So a couple of days ago I made a deposit of eight bob.
00:58:18.422 - 00:59:12.410, Speaker B: Then someone transferred two more bob to my receiving address, to my receiving ZK address and finally I made a direct deposit to this address, to this account as well. So in order to just do one more direct deposit to our account, we're going to need to send two transactions. So just for depositors of this demo, the simplest way we're going to do it is through polygon scan UI. So this concrete deployment is on polygon. So the first transaction is we need to actually approve the tokens, the bob tokens for usage into the direct deposit contract. So that's quite typical flow for any Web Three application. So we're going to send an approval transaction so it's good.
00:59:12.410 - 00:59:44.476, Speaker B: And then in order to send the direct deposit from the polygon scan UI without generating any Snark proof, we're going to create a new receiving Tk address in our account tab. We're going to go to the second direct deposit smart contract here. We're going to find the direct deposit function for making such deposit. So we're going to pass the address we want to make our deposit into. Then we're going to choose the amount. Let's say we want to deposit free bob tokens. So the bob has 18 decimals.
00:59:44.476 - 01:00:29.600, Speaker B: So we're going to also type 18 zeros and the fee for depositing is 0.1 bob. So we're going to add that here as well so that the receiver will actually receive free bob. And then we also have a third parameter of fallback user, which is basically alternative receiver for this particular deposit in case it cannot be made through due to some compliance issue with the sender similar problems. So since we are sending the deposit to ourselves, we're going to just copy the same address we're using in our MetaMask here, going to send this transaction. So we're going to see that from our account, 3.1 bob will be eventually deducted during this transaction.
01:00:29.600 - 01:01:42.184, Speaker B: And once the transaction, let's wait till it's displayed. So yeah, we have successfully submitted direct deposit from our address to the Zkbob direct deposit smart contract. So now we're going to have to wait for ten to 15 minutes for relayer to pick up this transaction to put that in a batch, generate an SS three snack proof and submit it to the main Zkbop pool. And after that we're going to see the one more income transfer of free bob with this direct deposit label on our account and the total balance of our account would be increased to 17 bob. So yeah, that's pretty much how it works. Feel free to access to subscribe to our Twitter, read the docs about Zkbop on our website. We have a cool page specifically for this hackathon regarding direct deposits.
01:01:42.184 - 01:02:10.800, Speaker B: Come to our booth for any questions for any other corporations for grabbing our cool swag. Ask questions in the sponsor Zikibob Hackathon discord channel at Eveglobal and yeah, thank you very much for attention. I think we have 5 minutes for questions here if you have any, if you have any questions so please raise.
01:02:10.880 - 01:02:29.814, Speaker A: Your hand so I can bring the mic. Yeah. So how volume dependent is the privacy protection? So if there's not that many people doing deposits and withdrawals, is it easy to track linked together the transactions?
01:02:29.942 - 01:03:42.750, Speaker B: Yeah, so of course there is a well known concept of anonymity pool so it works differently in different protocols since in our protocols there are not only deposits and withdrawals on some fixed amounts but you can also kind of after you make the deposit split it in multiple withdrawals to make transfers within the pool. So actually the funds become really dispersed over time pretty fast and so even within hundreds of users it really becomes nearly impossible to tell what really happens and how are they connected. So yeah, basically I think even existing anonymity set for the Ziggy BOP is already quite enough for the majority of people. So if you're going to go into the contract, open the token transfers, you will see that a lot of stuff going on here and there is actually no any way to tell how these depositors and withdrawals are connected with each other, how they kind of exchange the money within the pool. So it kind of becomes quite untrivial to reverse engineer.
01:03:46.450 - 01:03:49.680, Speaker A: What is the best way to sorry.
01:03:50.390 - 01:03:55.810, Speaker E: Is there a way to withdraw fund on chain?
01:03:56.790 - 01:04:08.166, Speaker B: Yeah, so basically once you have this balance within the ZK account and you want to withdraw to your public address, you're going to just select a withdraw tab. I mean without the UI, is there.
01:04:08.188 - 01:04:10.570, Speaker E: A way to call that on solidity?
01:04:11.070 - 01:05:17.288, Speaker B: Yeah, so it's not possible to call it directly on solidity since in order to withdraw the user must generate the Snark proof so the solidity on its own cannot generate the Snark proof. So right now the only option is to use the UI for generating these proofs. So we have more low level for this WASM library which is responsible for all this proof generation necessary SDK. So maybe we're going to build some widgets which are going to help to integrate this into some other external UIs in some time in the future. But anyway, so there is this low level library which is responsible for proof generation. And this probably going to be the only way the person is able to initiate and submit their withdrawal. Is the bulbswap deployed on any testnet now? Any test on Gory or separate? I think no, unfortunately.
01:05:17.288 - 01:05:41.490, Speaker B: But probably we can deploy it, no problem. So, yeah, it's deployed on Polygon, optimism and all other networks integrated with one inch. But if you want it to happen on Guerley or Sipoli, yeah, we can definitely do that. No problem. Not right now, but yeah, maybe within this hackathon. I'll try my best.
01:05:46.960 - 01:05:53.780, Speaker A: How strict is the deposit screening? Like, would a wallet freshly funded from tornado be sanctioned?
01:05:54.600 - 01:06:31.184, Speaker B: Well, I think you can try. I'm not sure it will be immediately flagged. So we are using the TRM for now as our screening provider. So we kind of do not screen ourselves. So we're not 100% sure. What are the policies within theorem? How this score factoring depends on the different sources, on the amounts, on how you like different timings. But I think it obviously marks very obvious use cases when someone launders hundreds of millions of dollars.
01:06:31.184 - 01:06:59.876, Speaker B: Definitely going to mark those, definitely not going to mark casual wallets of simple users who are like, transferring value of below 1000. But what happens in the middle, it's really hard to tell. Usually it all depends on how this CRM provider behaves and they do not actively disclose what are their politics and how they calculate these score factors.
01:07:00.068 - 01:07:06.170, Speaker A: What was the name of the people in charge of the sanctioning again?
01:07:06.480 - 01:07:07.608, Speaker B: TRM Labs.
01:07:07.704 - 01:07:08.408, Speaker A: TRM.
01:07:08.504 - 01:07:09.736, Speaker B: TRM.
01:07:09.928 - 01:07:10.670, Speaker A: Okay.
01:07:22.970 - 01:10:00.430, Speaker B: Yeah. Thanks for stopping by. Thanks a lot. Hello.
01:10:02.480 - 01:10:24.272, Speaker D: Yo. I'm york. Welcome to permissionless. Interoperability and warp routes. I'm from a project called Hyperlane. We're an interoperability protocol focused on modular security and bringing interoperability to all chains. So we're very chain agnostic.
01:10:24.272 - 01:11:16.020, Speaker D: We're hoping to kind of support whatever chain you guys want to be working on in this hackathon. You can stack some bounties. This is my colleague Nam. We're going to hopefully do a live demo for you guys at the end here. Fingers crossed. But yeah, first let's hop into what is Permissionless interoperability and what are warp routes and why should you care? So, just as a definition to start with, interoperability in our eyes, is composability amongst DApps that are on different infrastructure. So whether that's like a DAP that's on an L two composing with a DAP that's on an L one, or Cosmos app chain with DAP on ethereum or something more exotic, that's what we define as interoperability.
01:11:16.020 - 01:12:39.810, Speaker D: And if you look at the DAP ecosystem in the past couple of years, what you'll find is that the infrastructure that DApps are choosing to deploy on is kind of increasingly divergent as people start to realize the benefits of different trade offs. Throughout the kind of layers of the blockchain stack, they're choosing more and more diverse trade offs. So we have kind of the hot stuff right now is like, data availability layers, like having this infrastructure layer that's optimized for this specific task. There's also a lot of people thinking about app chains and kind of the different economics that you can capture as a DAP developer by kind of controlling the entire blockchain stack. So these are just a few examples, but it should be abundantly clear by now that this is only going to become increasingly diverse. So the Ethereum ecosystem is focused mostly on kind of the roll up side of things. They've kind of committed the past couple years to that scaling strategy, but it's by no means kind of like.
01:12:41.540 - 01:12:41.856, Speaker C: I.
01:12:41.878 - 01:13:31.200, Speaker D: Think, a final destination. They still want to work on these other things plasma, Sharding, et cetera. And we're seeing DApps adopt these new roll up architectures in the Ethereum ecosystem. So Arbitrum, Optimism kind of the two canonical examples of big roll up ecosystems. There's a bunch of DeFi happening on both chains. And the challenge for DAP developers is the developer interfaces for interoperability between all these different layers is super fragmented. So each one of these roll ups, like, let's say, Arbitrum and Optimism, they all have a custom bridge implementation.
01:13:31.200 - 01:14:29.280, Speaker D: And so if you want your DAP to be interoperable between Arbitrum, Optimism, and Ethereum, you got to implement like, three different interfaces depending on what you're trying to do, the action, you have to use a different pathway. So deposits and withdrawals are one pathway, and then there's like separate pathways for bridging wrapped assets or doing arbitrary message passing or arbitrary contract calls on these other chains. All these generally, you have to use some different pathway. Maybe the canonical bridge doesn't provide this or it doesn't provide it at a latency that you're happy with. And so, yeah, this is super hard as a DAP developer to actually take advantage of all these new things. So typically what we're seeing is people are just choosing a roll up. They're like, oh, I think Arbitrum is winning, so I'm just going to be an Arbitrum DAP.
01:14:29.280 - 01:16:00.050, Speaker D: But there's no reason that they should have to take on that risk of making that choice so early on in their product development. These are just a couple of examples of things that get unlocked once we start getting real interoperability between heterogeneous blockchain architectures that at the infrastructure layer provide different capabilities or features. I'm going to move quickly through this. Yeah, I'm going to also just move quickly through his. Okay, so Hyperlains kind of one of Hyperlain's core ideas or insights is that in order to provide this modular interoperability layer that developers can use across all these different infrastructure layers, we need to separate the transport layer and the application layer. And so at the application layer, we can have a consistent interface that developers can use across all of these different infrastructure layers and depending on the kind of pair that developers are having, communication move between the transport layer might look slightly different. But all of that is going to be kind of abstracted away from the application interface that DAP developers need to understand.
01:16:00.050 - 01:17:14.600, Speaker D: And this allows DAP developers to basically no longer have to think about maintaining multiple implementations of their protocol for different chains, for different roll ups. And furthermore, DAP developers should be able to express their preferences for security and kind of the trade offs that they want to make in their application. So if you look at kind of like the canonical roll up bridges like we just talked about arbitram optimism, we have a very specific fraud proof mechanism that implies some security constraints, some latency. But it's this omnibus model that all applications on that roll up need to opt into. And that might not make sense for your application, or it might only make sense for one type of action that happens in your application, but otherwise you maybe don't need all that security. Or you'd prefer the lower latency, like faster finality settlement pathway. So we want to allow DAP developers somehow to express their preference for these trade offs in the interface.
01:17:14.600 - 01:18:51.300, Speaker D: And as stronger verification mechanisms become available from kind of the R and D side of the ecosystem, like a bunch of people are working on ZK late clients, all this signature aggregation stuff. As those become available, the DAP developer can just change a very simple configuration without changing any of the implementation to say, hey, I'm going to now apply this new security module to these set of actions that are happening. Between these set of chains and that's just like a configuration layer in their Smart contract instead of a whole new implementation that they need to do to now go and verify some new security models like messaging format. Yeah, and the final kind of core idea that we're excited about at Hyperlane is extending this capability and this developer interface and modular security paradigm to any chain that you guys want to be on. So we have a feature that we've been working super hard on recently that we call Permissionless deployment. And it's this idea that someone who's maybe spinning up their own roll up, let's say they're using the Op stack or something, they should be able to just bring Hyperlane there independently from our organization. And so we've basically built out the tooling for developers to deploy our protocol to their chains.
01:18:51.300 - 01:19:23.250, Speaker D: And this is just way more scalable than what we've seen with the existing Bridging and messaging providers where you have to kind of go and lobby them and they have to take on some amount of risk to operate on your chain and maybe there's not enough economic incentive for them to do that. Yeah, so this is hopefully what we're going to live demo today. In a moment. Already went through that.
01:19:26.020 - 01:19:26.528, Speaker A: Cool.
01:19:26.614 - 01:20:19.360, Speaker D: So switching gears a little bit. The application that we're going to try and deploy today across a few different chains is called a warp route. A warp route is basically like this collection of contracts that allows you to route tokens between chains. There's a few different flavors of our warp route implementation. So we have, like, the native flavor, which allows you to wrap native assets like, let's say, ETH, and in a single transaction route them to some other chain. The collateral flavor is for existing tokens, and then synthetic is for how to represent those collateral tokens on chains where they're being warped to. So a warp route is like some collection of these set of primitives.
01:20:19.360 - 01:21:31.124, Speaker D: And I'm not going to go super in depth here, but you should definitely check out our docs. I think the basic premise is, like, I don't even really want to get into how hyperlane protocol works in this workshop because I think it's less interesting for the hackathon context. But, yeah, there's a bunch of stuff going on here. You can imagine bob being like, a recipient application. And the idea is Bob can specify his security preferences for what types of warped assets he wants to accept into his application. Whereas today we have, let's say, wormhole, USDC, that's bridged everywhere, that has some kind of global security model that everyone is basically opting into. If they're using wormhole, you can actually have different I guess you can almost look at them as like, tranches of a warped asset.
01:21:31.124 - 01:21:50.640, Speaker D: That is like using some specific risk tolerance or security model to verify that those assets have indeed been kind of locked up and collateralized on some other chain, if that's the instantiation.
01:21:52.820 - 01:21:53.376, Speaker A: Cool.
01:21:53.478 - 01:22:43.120, Speaker D: So, yeah, we've basically built a bunch of off the shelf tools for you guys to play with this warp route primitive. So the idea is you don't even have to necessarily write your own contracts. You can deploy one of these warp routes between any chain that you want to deploy hyperlane to and that'll allow you to just import liquidity. It's like a big use case that a lot of new chains are really struggling with right now. Because in order to launch a new chain, you need to establish some reason for people to come to your chain. And that usually implies having some economic activity. And so you need to bootstrap that somehow.
01:22:43.120 - 01:23:14.730, Speaker D: And an easy way to do that is just like importing liquidity from some existing chain, you kind of can leverage existing network effects, but if there's no token bridge operating through your new chain, you can't do that. So the combination of being able to deploy hyperlink to your chain and having this nice warp route primitive allows you to spin up a chain which can solve this kind of cold start bootstrapping problem.
01:23:16.800 - 01:23:17.550, Speaker E: Cool.
01:23:18.480 - 01:23:38.080, Speaker D: So, yeah, we have a bunch of different tools here for what I just described. I think Nom is going to try and demonstrate. US deploying hyperlane to a testnet and then deploy a warp route between that testnet and maybe some public testnet.
01:24:02.260 - 01:24:02.864, Speaker B: Cool.
01:24:02.982 - 01:24:47.080, Speaker E: All right. So like York said, we'll be doing a live demo of what it's like to deploy hyperlain to your own chain. So let's set the context here. Let's say you create your own roll up and you're like, oh, it's all great, but obviously now you have to convince developers and users to come your own roll up. And traditional world you maybe have to convince, I don't know, like Coinbase or Binance to ultimately list your token for people to actually be able to move economic value to your rollup right, to your own chain. I'm just using roll up as a specific instance of that. And so now with hyperlane, you can basically deploy interoperability to your chain and connect it to any other chain that is connected to hyperlane.
01:24:47.080 - 01:25:22.040, Speaker E: And so that's what we're going to be doing. So on our docs here in our guide, we have this kind of like five step process of deploying hyperlane. So the first steps is just generating keys. So I guess that doesn't even count as a step. The second point is to basically deploy contracts. And so we have a hyperlain deploy repo, which I've kind of cloned here already. And basically all you have to do is you have to add your chain, right? So basically in chains, JSON Oops actually this is the wrong one here.
01:25:22.040 - 01:25:55.828, Speaker E: Basically in chains, you just kind of add chains information. All of this really like the name, the chain ID, and then an RPC URL. So in this case we're going to be deploying to Coinbase's new chain called Base, right? And obviously if, you're know, I guess you have your own exchange. But again, if you have deploy your own roll up here today, it's going to be very hard to convince anybody to deploy anything on your chain. So he's going to do it ourselves. So all you have to do is basically add your chain here. Like York said, we have modular security.
01:25:55.828 - 01:27:08.408, Speaker E: And so in this case, what we'll be doing is we'll just deploy a one out of one, kind of like multi SIG ism, as we call it, to basically validate messages going from your chain to all the other chains. But actually you get to reuse the security that we already have existing on existing kind of default chains as we call them. So for us we should just be deploying between, let's say, Base and Sepolia. And so then all you have to do is I guess I can just copy and paste that here. So basically you add your chain, you kind of configure the security, the default security from your chain and all you have to do is run the script, right? And I'm not going to deploy this because it's like a bunch of transactions going to take a little bit too long. But at the end of this deployment you basically get kind of these addresses. So in here you get basically all the artifacts of the addresses that got deployed on both base and Sepolia and so that's kind of just the contracts and then the two remaining steps are basically to run the validator which basically validates state from your chain in this case base to all the other chains.
01:27:08.408 - 01:28:21.492, Speaker E: Right, so that's the first step so all you have to basically do is kind of run we have docker images or you can just build it from source as we did here and you basically say hey, what's the origin chain name that I want to validate on, where do I want to write my signatures to? So in this case, I'm just writing it to a local folder and then basically the config file that you got from the contract deploy. And so basically, once you run that, that validator will now observe the contract on your own chain. And basically, anytime there's a new message, it will kind of like attest to that new message. The next step then is after running a validator is to run a relayer. And so basically a relayer is a permissionless role that basically sends that uses the signatures from the validator to ultimately pass them on to the destination chain mailbox contract and that mailbox contract basically then uses the security module that is specified to validate. Hey, does this actually happen on the origin chain? And then process the message. And so basically we have relayers that run basically from one chain to another.
01:28:21.492 - 01:29:10.450, Speaker E: So in this case, you can see here, I think this is from base to Sepolia. So we'll just run that right here, and then equivalently, we have another relayer that runs from Sepolia to base. And so that's basically all the kind of, like, off chain infrastructure that you would have to run. And now we're connected. We can kind of like easily there's a test script can run right now that basically just sends two messages, one from base to Sepolia and one from Sepolia to base. And then we should see those being delivered in 1 second if all goes well.
01:29:12.180 - 01:30:49.220, Speaker D: Yeah, I realized I didn't go into a lot of depth on what's happening at the smart contract layer but just to provide some color there. When your contract wants to interact with a contract on another chain it needs to send a message kind of describing that interaction and that message needs to be authenticated such that someone can actually know that it was your contract that dispatched this action rather than some malicious attacker. And so we have a few different security models that you can select off the shelf to perform that authentication. One is this multi SIG validator setup where basically there's validators on the source chain that are signing commitments to the messages that have been dispatched from that chain such that those signatures can be used on the destination chain as an attestation that, hey, this message was dispatched on this source chain eventually. The idea is to have kind of like permissionless economic security model where anyone can be a validator if they're putting up enough stake and provide security to this type of authentication system. But yeah, what's happening here is the message is being committed to on, let's say, Sepolia. And then the validator that nom's running on his machine is signing commitment.
01:30:49.220 - 01:31:33.440, Speaker D: And then the relayer that he's running on his machine is taking that signature and passing it to the destination chain contracts, which is like one of these warp route contracts that's basically verifying, like we saw in the multi SIG ism config that he had up earlier. It's verifying that we've reached a threshold of the specified validators that have attested to the fact that this message was committed to on the source chain. But yeah, definitely. For more details, check out our docs on kind of all the different types of security configurations.
01:31:34.260 - 01:31:34.672, Speaker A: Cool.
01:31:34.726 - 01:32:50.212, Speaker E: So basically now that we've kind of verified that we can send messages back and forth, right? Like we've kind of connected this new chain that didn't have hyperlane before to all the other chains that have hyperlane. And so now that you have kind of this base messaging layer kind of set up, you can build applications on top of that, right? And like York said, I think a very common application is effectively a token bridge, right? So let's say again, if you're a new chain, one of the first things you probably want is like you want a stable coin, right? And so why don't we just kind of create a warp route of, let's say something like USDC that exists on Sepolia to your new chain, which in this case is base. And so we once again have a guide for that, right? So under warp routes here, you again just go off hyperlane deploy and you just run a different script. The script basically is configured with the swarp route config. So let's say in this case, warp route. I guess we call it warp tokens now, right? So that's basically we say like on the base chain, which I guess is like the collateral chain. We basically say like, hey, we want to collateralize this token, which in this case I think it's just a link token because there's a good faucet on it on Sepolia.
01:32:50.212 - 01:33:25.828, Speaker E: And basically we want to say like, hey, we want to create synthetic versions of that token on, let's say, a dutter chain. In this case, our base token. I see how that naming can be a little confusing in this particular instance, right? But basically we allow now to create a warp route between Sepolia and base. And so then all we have to do is what's it called deploy war brows, right, with basically our private key to kind of deploy the contracts. And I think that's what happened above here. So again, I'm not going to run through it because the transactions take, I.
01:33:25.834 - 01:33:27.030, Speaker B: Think, a couple of minutes.
01:33:27.720 - 01:34:39.512, Speaker E: And the cool thing is that once you've kind of deployed this warp route, right, which is basically just a set of smart contracts on both chains, we actually have a out of the box UI that you can use to kind of let your users now leverage this warp route to kind of have these synthetic tokens. And so all you have to do is basically take the output of your warp route deployment and basically add that to this template repo that we have that you can clone. Again, all you have to do is add your chain information in here and you add the token information from the War brow deployment. And I can do like in this case, I can just kind of run it locally right here, but it also super easily deploys to Versal or any other next JS hoster. And so basically then here on local host, it will basically fetch kind of the warp route information and then after a little bit will show you the chain options for your warp route. You can see the token that you can kind of warp. You can say, hey, I want to send this much to the recipient.
01:34:39.512 - 01:35:02.870, Speaker E: You can just say it to yourself and then basically send it to base. And again, this is all out of the box, right? I didn't have to change any code. It will prompt me to approve my link token to the warp route contract on Sepolia. And once the approval happens, and if the Wi Fi is good enough, ultimately it will.
01:35:04.200 - 01:35:26.830, Speaker D: If you guys saw the layer zero, like Gorely ETH market drama a couple of weeks ago, this is like a tool where you can create those type of markets between any chains assets super easily. So if you guys want to in this hackathon, go mess with someone else's testnet, you could maybe do that.
01:35:27.680 - 01:35:28.092, Speaker A: Cool.
01:35:28.146 - 01:36:04.330, Speaker E: All right, then we saw basically the second transaction, right, is to actually ultimately send the tokens over to base. And so that, I guess, just confirmed on Sepolia. So like York said previously, again, Valders will basically attest to that transfer on Sepolia, create signatures, and then the relayer that I'm running right here will basically observe that message and will ultimately process it on base. And so I think what we can do actually is just to take the.
01:36:08.140 - 01:36:09.096, Speaker D: Do you want to open it in.
01:36:09.118 - 01:36:51.428, Speaker E: The explorer just to show that? Yes. So we can basically take the this is the token address on base, right? So we can just go to base, I think what is it? Base ether scan. I forget what it is. Base coinbase. What was it? I just had it. I think they're called base scan. And then you can put in the token address, right? So that's basically, like you can already see here, it shows up as a chain link, even though I'm pretty sure chain Link doesn't have it deployed.
01:36:51.428 - 01:37:23.612, Speaker E: The token on base. And then under I think that tokens transfers you can see here like 25 seconds ago, we just minted ourselves one chain link token on base. And then I think in the UI you can kind of see the same thing. And then if we wanted, like, we can send it back from base, back to Sepolia again. And yeah, you can imagine what the kind of outcome of that is. I'm told we're out of time. So if you have any more questions, feel free to jump by our booth.
01:37:23.612 - 01:38:14.716, Speaker E: Today we have three bounties. One is for the best use of permissionless interoperability. So basically, right, like, you can deploy to many of the networks that are represented here today as well and kind of like would love to see kind of some cool use cases between, let's say, a new chain and an existing chain. The second bounty is for best use of the warp routes, right? So bring your token to some new chain and kind of do something useful for that. And the third is, like we said, we have this kind of modular security approach where developers can choose different trade offs. And we would love for developers to kind of build some kind of alternative models, like an optimistic one or maybe one based on succincts, like kind of like ZK Lite clients. But yeah, because we believe that the story hasn't been kind of finished talent yet about what security models they're out there for cross chain interoperability.
01:38:14.716 - 01:39:48.454, Speaker E: We would love for hackers to kind of play around with that. I think that's it. Thank you. It yeah, maybe we want to let.
01:39:48.492 - 01:39:50.680, Speaker C: People for a second.
01:40:06.970 - 01:40:08.070, Speaker E: 180.
01:40:16.860 - 01:40:19.912, Speaker C: Hello everyone. Huge audience today.
01:40:20.046 - 01:40:20.952, Speaker D: It's really great.
01:40:21.006 - 01:40:48.880, Speaker C: Really appreciate it. Hello everybody on the live stream. And that's tuning in later on. My name is Jeff Wentworth. I'm co founder of a company called Curvegrid. And this is a 30 minutes DAP. So what we're going to do for the next 30 minutes is basically walk through building a sample DAP and we're going to show you how it's possible to do that faster and easier than it might be if you build everything from scratch.
01:40:48.880 - 01:41:39.200, Speaker C: So basically what we're going to do today is not only talk about building a DAP, but also some of the challenges that you encounter building adapt and then talk about some, let's say, bonuses that might help you more broadly in your DAP building experience. So, first of all, as I mentioned, my name is Jeff, co founder of Curvegrid. We're actually based here in Tokyo, Japan. We have been in business since 2017 for six years. And mostly we tend to be in the background a little bit. So our customers tend to be blockchain companies or developers that are building different kind of DApps on EVM blockchains. And really for the first time at this ETH Global hackathon.
01:41:39.200 - 01:42:28.210, Speaker C: We're looking to connect with more individual developers in a much broader audience. So you can see us here in the red coveralls. We're here to help. We have ten people at ETH Global Tokyo, and if you have any questions about building a DAP in general, not just our product, but anything technical related, design related, or just about Tokyo and Japan, we're here to help. So creating a DAP. And in fact, whether this is some sort of production DAP or a hackathon like this weekend, there's a whole series of steps that you have to go through, including planning the back end, the front end, the smart contract. And we're going to talk about all of that, and then we're going to talk about some of the other ways that we're here to help you.
01:42:28.210 - 01:43:06.316, Speaker C: So first I want to talk a little bit about multibas. Multibas is multi blockchain as a service. So our whole theory is that this is and will be a MultiChain world. But blockchain is difficult to build on. And so what we're really all about is helping you get to market faster, more easily, and ultimately doing it with fewer developer resources. I talked a little bit about Curvegrid, the fact that we're based here in Tokyo, Japan. We have a number of different solutions as well that can help you.
01:43:06.316 - 01:44:09.756, Speaker C: So in addition to multicore multibas, we also have a multibask proof bridge and spreadsheet. The latter two are actually former ETH Global hackathon projects that we turned into products. And we also have Nftpot, which is a shopify minting app for minting NFTs on shopify. So what is adapt? We're going to go back to first principles or basics. And again, whether you're building the next decks or NFT marketplace or you're just hacking on something for the weekend, this is what a typical DAP looks like, right? Front end, back end, connecting to a node provider, smart contract. On the blockchain, in the mix there as well, you have a wallet, whether that's a non custodial or custodial wallet, you've got a database where multibas sits in this stack and makes things easier, is typically between your DAP, front end and backend and your smart contracts. And the idea is that you're actually having to build less on the front end or back end and less of kind of the core infrastructure.
01:44:09.756 - 01:44:42.300, Speaker C: We take care of a lot of that for you. And so that's what multibask provides. So we put together a sample DAP that you can use as a base for your work this weekend or even going forward. And our DAP is a NFT sprite maker. You're going to see it in a moment. Again, if you're thinking about putting together an application, the first thing you want to do, of course, is ideate. Get your team together and then plan, build and submit.
01:44:42.300 - 01:45:33.868, Speaker C: So throughout the next several pages, we have a QR code at the top and you can find this sample DAP repo there. We also on our website Curvegrid.com, have a blog post that we've put up with a complete walkthrough of this tutorial as well as other resources to help you get started in building a DAP. So the planning phase is typically user stories, design, user flow, you decide on your stack, front end and back end and smart contract. And then for the NFT Sprite maker, this is all about one of the key things that we want to do here was allow people to free Mint and you'll see what I mean with that in a moment. On the front end, this could either be used by end users or admins. We can talk about that a little bit more.
01:45:33.868 - 01:45:49.280, Speaker C: And for the smart contract, we started with the Open Zeppelin wizard NFT smart contract and built out from there. So here's our sample DAP. I'm actually going to go switch to it here. You can see it's just running on localhost. So. It's called sprite. Write.
01:45:49.280 - 01:46:12.330, Speaker C: And basically what it allows you to do is draw some sort of fun picture here and then connect your wallet. We're going to do connect wallet. Come on internet. There we go. Enter my password. There we go. Connect my wallet.
01:46:12.330 - 01:47:16.378, Speaker C: Okay, I pulled up the wallet address and what we've done here is we're actually with a custodial wallet paying the gas fees for the user to mint. So when I click Mint here, it's going to send the transaction to the blockchain and it'll show up a minute later once it's mined. And there we can go. We can see the sprite and the token ID and the owner and the time that it was last transferred at we can see some of our past sprites. If you want to try this out, you can click on any of this past sprites to load it back into the canvas and then continue drawing. So this is Sprite Write, our sample NF, our sample DAP for basically writing sprites that we're going to be demonstrating a few different things here. So what are some of the challenges you have when building a DAP? Well, the first is interacting with a smart contract, right? How do you interact with the smart contract? The second is around in this example is minting the NFTs.
01:47:16.378 - 01:48:02.442, Speaker C: And again, the whole point of this sample DAP is we want to mint the NFTs for free for the user, right, so that they don't have to spend gas to do it. Then the third challenge is listing the Minted NFTs and the fourth one is managing the smart contract. So here's the structure of our sample DAP, and I want to point out that on the left you can see we have a screenshot of the DAP, as I had shown in the kind of typical DAP structure before. We have a front end and a back end. The front end is written in HTML CSS and TypeScript. The back end is written in Go. The front end is actually using two different techniques to get data from the blockchain.
01:48:02.442 - 01:49:10.766, Speaker C: So first of all, the color palette is actually being pulled from the smart contract itself. The second is that we're using something called an event query to actually pull the table. Here the list of Sprites, of past Sprites, and those are all going through multibask to the blockchain. And then on the back end, the front end is also of course, talking to the backend, we have our Multibask Go SDK that's talking to our HSM transaction manager TXM to actually mint for free the Sprites. So what does multibas do for you, basically? How would you set it up in a typical environment? Well, you would typically have both a development and a production environment. And the key differentiators here, the key differences here are in your development environment, you would have developers with administrative rights, maybe your whole team of say, 50 or 60 people that might be making frequent updates to the environment. And then in your production environment, you're going to have your operations team with very limited access and updates, for example, controlled via CI CD.
01:49:10.766 - 01:49:45.470, Speaker C: So keep this in mind as we continue to go through. So how do you get set up on this sample? DAP first, again, you clone the repo. You sign up for multibas, you set up your project, and then you understand multibask middleware. So signing up for Multibas is super easy. What you do is you go to our website and you click on Get Started, and that will take you through a sign up process. There's no credit card or anything needed, just your email address and name and you're away. And as I mentioned, we have a whole blog post.
01:49:45.470 - 01:50:37.248, Speaker C: An ETH Global Tokyo Developer Package. If you go to Resources and blog, that basically walks you through all the steps that you need to get started. In addition for that, we have extensive documentation, including articles and an interactive Rest API reference as well. So you'll be well supported. Okay, so I've got my smart contract written, I've got this cool, like, Sprite smart contract written, and now I want to interact with it. How do I do that? Well, there's different tools that one can use, but in Multibas, we've basically built that all into one package. So what I'm going to do here is I'm going to show you the multibas web UI.
01:50:37.248 - 01:51:10.664, Speaker C: And this would typically be used by developers during the development stage and then the operations team during the ongoing production stage to essentially manage and interact with multibas itself. So when you log in, you're going to come to the core contracts page. What you can see here is an interactive web UI that allows you to do a few different things. First of all, you get all of the static state variables. At the top. You can see the output here. Here's the color codes that I mentioned before that are coming from the smart contract.
01:51:10.664 - 01:51:52.040, Speaker C: We have the total supply, we have the symbol and the name. Then we have all of our events from the smart contract, and then we have all of our methods or smart contract functions. Basically, what we can do here is use this in a way to interact with the smart contract. So, for example, in this function here gets sprite image Uri. If I come in here and I type in zero get method, I'm actually going to get the data back from the smart contract. One of the nifty things we've done here is we've embedded all of the image data directly into the smart contract itself. So the smart contract is actually rendering the SVG file directly.
01:51:52.040 - 01:52:34.730, Speaker C: So if I paste this data Uri in here, I get my beautiful green field with the sun shining. But you could see, I think, how sort of easy it is to really interact with your smart contract this way using the multibas UI. The second way is via the Rest API. And again, in addition to our documentation, we also have integrated Rest API functionality built right into the multibas UI here. So you can see how easy it is to really interact with the smart contract this way. In addition, we've got multiple SDKs right now in beta for Go and for TypeScript. And again, those are linked from the tutorial page.
01:52:34.730 - 01:53:27.556, Speaker C: So you don't need to build everything from custom with the Rest API. The final feature that I want to point out is that when you are interacting via the Rest API, we have full role based access control with both users permissions, cores, domains, and a full audit log. And that allows you to build either a front end or a backend directly on top of multivas. Okay, great. I'm interacting with the smart contract via the Web UI or via the SDK or the Rest API. Now I actually want to build a little bit more automation in there. And what I actually want to do, what you saw earlier was we're actually paying the gas fees on behalf of the users that are minting the NFT.
01:53:27.556 - 01:54:21.972, Speaker C: And we do this using something called HSM, which is basically a custodial wallet or quasi hardware security module that allows you to programmatically sign transactions and sign messages on the blockchain and submit them to the blockchain. At the moment, we primarily support Azure Key vault. It's a cheap and cheerful, basically a third party custodial service provided by Microsoft Azure Wallet service. And in that tutorial, we have very easy steps to basically sign up for an Azure account. And then we have a PowerShell script that in one shot allows you to set up a key vault. You then load it into multibass, fund the HSM, and you can interact with it via the Rest API or even the Web UI very easily. So if I come back into multibass here, I go to HSM and configuration.
01:54:21.972 - 01:55:11.820, Speaker C: What I can see here is my HSM configuration, right? This is coming from, again, would have been loaded in from Azure Key vault when I set that up. And then I also have my transaction Manager. So I come into my Hsmtxm, I can see all of my past transactions. This was the one that I most recently minted. And if I click into here, I can see all of the transaction details, including all of the decoded function parameters and event parameters that were emitted from here. So this is a very easy way that either if you're working on something that is not publicly released yet and so you don't want to confirm all of the data on Etherscan, or if you're iterating rapidly, you can very easily use the web UI again to manage this. So that's the HSM.
01:55:11.820 - 01:56:06.344, Speaker C: Next. How do I list the minted? NFTs So there's a few different strategies for this in general. The first is you can iterate using Smart Contract functions through all of the NFTs. One of the challenges there, especially if I'm using something like the ERC 721 Enumerable Smart Contract is it's very gas heavy. The second way is events, right? And really this is the correct way in general to be interacting with Smart contracts from adapt off blockchain off of the blockchain. The idea here is that essentially the Smart Contract is going to be emitting event logs and you're reading those and then using that data to essentially drive your front end or your back end. The challenge with that, of course, is that the blockchain is eventually consistent.
01:56:06.344 - 01:56:38.544, Speaker C: And it's very, very complicated to typically deal with this from scratch. So often what you'd be using is a piece of technology called a chain indexer. We actually have a chain indexer built into multibass. So if I come back to the multibass UI here, I can go back to my contracts, I can take a look at Sprite right here and I can see all of my events. And in fact, if I just copy and paste this Sprite right, there we go. I can see. Come on.
01:56:38.544 - 01:57:32.100, Speaker C: There we go. I can basically get a decoded JSON view of all of my event details, including again, the transaction that initiated it, the parameters that were in the transaction, the decoded event parameters, time that it was triggered at. And this isn't coming from it is coming from the blockchain, but it's via our Intelligent cache, which handles things like chain reorgs nodes, restarting, everything like that. We have one additional feature built on top of that which is called event queries. And essentially this is a way to aggregate this time series data and report on it very easily. So again, even though the DAP itself, Spritewrite, is being driven programmatically, this whole table is being driven by an event query. We can also go and take a look at that in the multibas UI.
01:57:32.100 - 01:58:48.320, Speaker C: If you come in here, you. Can see very it's very easy to basically define your event queries either through this interactive builder or just via JSON that is Events. Next we have managing the smart contract. I'm not going to demonstrate this in real time, but essentially we also have a built in Gnosis multisig functionality that's built into multivas. So what that allows you to do is essentially you can set up a multi SIG wallet, either link to an existing one, deploy it to the blockchain, and then if you set, for example, that multi SIG wallet to be the owner of your DAP when you come into multibas either again programmatically or through our web UI and you say do safe Mint. If you select as your signer here that multi SIG wallet, multibask will automatically wrap your transaction in a multi SIG transaction and either allow you to sign it via MetaMask or via your HSM and submit it to the blockchain. So we've basically taken all of the complexity away from dealing with multi SIG wallets and multi SIG transactions.
01:58:48.320 - 01:59:23.576, Speaker C: Bonus time. This is the first bonus. So our spreadsheet plugin, as I mentioned, this was a hack money 2020 finalist project that we then over the subsequent months turned into a full fledged solution. So what's the lowest common denominator for building any kind of application? I would argue that it's a spreadsheet. There's something like 9000 smart contract developers in the world, something like 9 million developers in general. 25 million actually, sorry, 9000 smart contract developers, 25 million developers. But there's a billion spreadsheet users.
01:59:23.576 - 01:59:38.160, Speaker C: So what we actually have is we have a publicly available it's available on the Google Docs or Google Workspace Store. We have the multibask for Google Sheets plugin. And this allows you to essentially.
01:59:40.020 - 01:59:40.288, Speaker E: When.
01:59:40.294 - 02:00:24.540, Speaker C: You install it and set your multibas deployment ID and API key, you can come in here and real time you can actually query multibas and essentially the blockchain in turn. So if I do Sprites query Sprites, basically this is going to go out and call my event query and pull all of my blockchain data in real time into here. And you can say Token ID zero through seven. If I come back to Sprite, write and let's say I load in my smiley face here and put a little pink hat on top and then go mint again. It's driving my HSM to mint that to the blockchain. I come back to here and it's a spreadsheet. So I actually have to do something a little funky and delete this.
02:00:24.540 - 02:01:20.560, Speaker C: There we go. Put it back in because it's Google Sheets. But what you should see in a second is I've got my Token ID eight that was just minted. So this is another option and it's great for both debugging as well as, let's say, if you're a company, your finance team, or you want to do any kind of reporting, very quick reporting on your smart contracts, we can do things like we can call any arbitrary on chain function. And of course you can use aliases as well, which is another, I think, key thing that helps you go a lot faster with Multivas. So we're going to do, let's say balance of this address here and it's a spreadsheet, so I can just use all of my standard spreadsheet semantics. And you can see that this address here has not a balance of nine on my ERC, 721 smart contract.
02:01:20.560 - 02:02:05.968, Speaker C: That's bonus number one. Bonus number two is Nftpot. So Multibass is our main product, but also last year we released a Shopify NFT Minting app that allows you to easily create Mint and sell NFTs on Shopify, either through lazy Minting or also through importing existing NFTs. And it's super easy to integrate into your Shopify store. Shopify's logged me out, so I'm not going to show that to you right now. But basically just add this into your store and yeah, you can immediately be building store that allows you to sell NFTs. So that's another option for this weekend actually.
02:02:05.968 - 02:02:55.240, Speaker C: If you are less into code and more into ecommerce, we're happy to have you build on Nftpod as well. Super bonuses. We've actually prepared a public GitHub repository. It's going to go live a little bit later tonight, but if you're interested in it, come talk to our team. With all of the or not, I shouldn't say all, many of the other sponsored smart contracts preloaded with an easy script to essentially get you up and running in Multibas. Regardless, what you'll see in the sample tutorial repo is we have a hard hat and Truffle plug. Hard hat and Truffle plugins for very easily loading your smart contracts into basically multibass at the same time that you deploy them on the blockchain.
02:02:55.240 - 02:03:46.608, Speaker C: So I'm actually going to show you that now in real time. So I have all of my Minted sprites here and I can see on Multibass, I also have, for example, total supply of nine and here's all the Sprites that I Minted. I'm going to flip over to my terminal and I'm going to go yarn, deploy sprite, write testing. So standard yarn or NPM script with hard hat. And with the Multibass plugin, it's basically going to go and redeploy the smart contract and relink it to Multibass. And when I come back in here, you see that all of my old Sprites are gone because it's a new contract version and I'm just left with what I had preset up. Okay, great.
02:03:46.608 - 02:04:10.460, Speaker C: So in closing, we would love for you to use Multibas. We'd love for you to try it out this weekend. We've been working with different companies for many years, helping them get their DApps to market much, much faster. But even if you don't use Multibas, we're based here in Tokyo. We've got a big team. We're a little bit visible with our red coveralls on, so it should be pretty easy to find us. We're happy to chat about multibask.
02:04:10.460 - 02:04:34.832, Speaker C: We're happy to chat about DAP development in general. We've got engineers, designers, marketing and business folks as well. So we're happy to help with any technical questions or any questions about Japan and Tokyo. And I should mention our prizes. So our total prizes are $2,000. We have $1,000 for first place. Second place is $700, and third place is $300.
02:04:34.832 - 02:05:05.850, Speaker C: And for anyone that incorporates multibass in some way into your project this weekend, we're going to issue an NFT that may be redeemed for physical merch later on again through Shopify. So we'd love for you to participate and join us. So, again, QR code for the repo is there. Our blog post has more details on the tutorial, and thank you.
02:05:19.500 - 02:05:21.720, Speaker A: Do we have to set up the HTML?
02:05:25.820 - 02:05:29.136, Speaker B: Yeah. So as we're using the API, do.
02:05:29.158 - 02:05:34.896, Speaker E: We actually have to necessarily plug the wallet to some Azure Key vault and.
02:05:34.918 - 02:05:37.164, Speaker A: Then have that specific plugin?
02:05:37.212 - 02:05:43.824, Speaker E: Or can we just fund any normal wallet and then hey, at our risk and perils, though you can fund any.
02:05:43.862 - 02:05:46.530, Speaker C: Normal wallet, you absolutely don't have to use.
