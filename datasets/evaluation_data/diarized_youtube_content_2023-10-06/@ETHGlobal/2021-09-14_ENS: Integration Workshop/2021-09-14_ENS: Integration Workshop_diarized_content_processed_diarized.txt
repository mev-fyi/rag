00:00:00.250 - 00:00:46.398, Speaker A: You. Hello. Welcome to ENS Integration Workshop for Ace Global Hackerson, September 2021. And today I'm going to talk about three topics. First I go quickly go through kind of basic of how to do the ENS integration and then I spend the rest of the time going deeper into more core of ENS. The one is called Resolver and another one is called Registrar. And I just show it as a kind of t setter.
00:00:46.398 - 00:01:53.846, Speaker A: I'll explain what this is as I go through and for the revance to the Hackerson. In the past we used to give small like $100 worth of prize to many integrations for the basic one. And this time we want to encourage you to kind of discover the power of ENS and take more advantage of it. So we will not give small prizes, but rather we're going to give bigger prize pool of like $3,000 worth of Eastwood USDC. We don't know how many the winner is going to be, but rather than giving to ten prizes we're probably going to give somewhere between three to five. And in addition to that, we are planning to have ENS workshop right after the finale of the AC Global. And so for some of the winners we'd like you to invite to do a bit of a kind of pitch to the community.
00:01:53.846 - 00:02:46.338, Speaker A: And we are kind of thinking about a kind of community voting so that you can earn extra price. Okay, and I will go through lots of material but majority of the stuff you should be able to find in our Doc page, it called Docs ENS domains or some of the information is actually too new. So if it's not in you can just ask me question on discord. I'm relatively active there. Okay, so ENS Integration 101. So one thing about gracing of an ENS integration is quite likely you don't have to install any new things. Many client library already have some of the ENS integration.
00:02:46.338 - 00:03:40.490, Speaker A: The one we also use quite a lot is called ESA JS, which actually the author of ESA JS, Richard Rick Moon, is now part of ENS team. So it has quite tight integration. But most of the JS libraries, especially ESA JS, they do good support for kind of read only operation about kind of looking up ENS. But when it comes to writing setting record support could be limited. In that case you could use our ENS official library called Ensjs. Or if you go to the Doc there's an information about how actually most of our smart contract itself is an NPM package. So you can actually just include that NPM package on either front end or you can import in your solidity contract.
00:03:40.490 - 00:05:09.666, Speaker A: So what is ENS? Actually, I don't think I introduced myself and in kind of ethereum world my identity is this hexadecimal zero x five, a three, a four, blah blah blah. And the ENS provides a kind of human readable friendly ways to associate my Ethereum kind of wallet address to this name. So if you go to for example, MetaMask or Esascan and if you look at Matokin is you should resolve to these Ethereum address so that you can send crypto address or you can receive. But it's just going a bit beyond that. Initially Nick Johnson who created Ethereum namesups, he started kind of putting his Nickdjohnson East into his Twitter profile but it kind of started blowing up when Vitalik put his Vitalik East into his Twitter profile. And now so many kind of Ethereum so called influencers now put their EDH name and also there's lots of people thanks to the NFT's popularity, many people outside of Crypt World start getting to the Ethereum. And we have lots of so called ENS fairies.
00:05:09.666 - 00:06:12.890, Speaker A: They kind of have famous several days name and they try to give it to you to these people so that they can be part of this Ethereum community. So ENS becoming just more than the convenient utility but it's almost becoming your identity on the Web Three world. So we started calling as your Web Three username. That's kind of our new catchphrase to do that again, it's quite easy, the forward lookup. If you give me the name, I retain your address. That's just done by something like ENS get address if you use Webster JS. And the reverse is that for example, if you log into, for example Uniswap or OpenSea and if you connect wallet to their site, they immediately recognize your ENS name and show it to you.
00:06:12.890 - 00:06:52.360, Speaker A: If you set this ENS name on our manager, this doesn't get done automatically when you register. So you have to do it manually. But once you do that, you can start seeing. And now I think ESA scan does actually show the transaction history with CNS. So you can actually see who transaction went from food to food a lot easier way. And to do that again, it's just almost like one line. This example uses library called ESA JS and here it says provider lookup address that returns the ENS name.
00:06:52.360 - 00:07:47.814, Speaker A: One important thing is when you set the address to name you can actually set any names like you don't have to put well, technically I can put Vitalik East to points to miser x five a address then people can easily fake it. So what adaptive should do is we should cross check both reverse lookup and for lookup and both pointing to each other that if you use library like ESA JS, it does that inside. So you don't have to worry about it. But in case you use your own way, you have to do it. Okay? So second is ENS resolver. And let me just show you this basic architecture of ENS. ENS is just like any other DAP.
00:07:47.814 - 00:08:47.658, Speaker A: It's smart contract. It's one of the oldest smart contract in production we launched back in 2017. And it's very simple. It's just basically a gigantic form book where you have an ENS name, you have a full list of ENS name. What's interesting is it has something called resolver. And let me show you the flaw that when user look for example for lookup you fast connect to this ENS registry to say hey, I want to know resolve who is and registry doesn't return the ECM address of who but instead it returns something called resolver contract address. And the client actually asks to this resolver what's the address of this who is person then resolver is in charge of returning it.
00:08:47.658 - 00:09:51.070, Speaker A: So underneath end user don't realize but underneath basically JS client is calling the ENS smart contract twice. And why we do that is because it makes basically resolver logic extensible and upgradable. We have a default one called public resolver which everybody mostly uses and we set it when you register. But you can actually set your own resolver and add extend more features. And currently most people know ENS has resolving ethereum address. But underneath you can actually set other things like content hash which you generate for IPFS or now we have a support or RV and you can set these then basically even in the IPFS site you can resolve with ENS name rather than their very long content ID. So this is how it looks like.
00:09:51.070 - 00:10:49.134, Speaker A: For example this case in the address we have now so called multicoin support. So not just ETH you have BTC LTC over 200 addresses. And the important thing is the wallet also has to support the multi coins. But once it's supported sorry, I think I got random pop up, I got close for example a trust wallet you can basically send BTC to Brantley is if you want to. And doing that is again it's quite simple. Now you know what resolve by is, right? So like if you send me the BTC, give me BTC address of this resolve is you just do like this. Depending on this case we are using ensjs.
00:10:49.134 - 00:12:05.770, Speaker A: So syntax is slightly different but all the other libraries is kind of I think this multicoin is actually relatively new. So ESA JS does support but some other libraries may not support multicoins and updating record is usually like set address or set content hash. And in this case I put setting text where you put a key as test and a record a body as test record. And we really want to promote the use of this text record and one use case is avatar. So I think couple weeks ago, well actually almost a month ago, zappa announced a new feature where you can set your NFT as an avatar. Which is great, right? But the problem is it's kind of on their own side so that information is not really shared anywhere. So We Came Up, Kind Of Talked About A New Specification that Nick Johnson, who Is The Creator Of ENS Drafted ENS Avatar P Former Specification, which Is Not Finalized Yet, so It's Relatively New.
00:12:05.770 - 00:13:18.690, Speaker A: But We Want To Kind of start encouraging user not to put avatar appeal initially we just created to put JPEG URL but we wanted to allow people to set text record text record itself doesn't have any validation you can put anything so it comes down to the specification that each DAP agreed to resolve in a certain way and with using that kind of protocol, I did actually added a small feature in the text record that if it says Avatar, if you specify. So this is example of the specification that EIP one five five and one is a chain ID and ERC, seven two one. You could also put 1155 then column contract address TokenID. Then with this information is enough. To fetch the image URL from the smart contract. So displays this is my people pleaser NFT image which I have. And one thing I added is I can also verify that I own this smart contract.
00:13:18.690 - 00:14:03.558, Speaker A: I can't really verify that this could be like copy and paste it to different contracts. So I can't say this is the canonical all I'm saying here is I own this specific contract and in this case it puts a link to OpenSea so you can actually verify that this contract address is what is it really? People, please. As contract address or punk address so that at least it allows you to verify on your own. And if you try to do that by yourself. It's going to be a bit like this. So fast on the line. Two, you do provider resolve name and you do Vitalik east or Matoku east.
00:14:03.558 - 00:15:06.770, Speaker A: Important thing is ownership shouldn't be the for example. Matoku es is an NFT itself so it has an owner information but owner should be point to the address ENS resolved to using for lookup because something like subdomains doesn't have the notion like token ownership. Whereas this resolver name is a consistent ways to tie name back to address so you put owner so Token ID of the ETH name is actually the integer version of so called label hash which is label is basically if there is a vitalic is vitalic part that's a label. And if you hash it, it becomes so called label hash. Then you tie into Integer and the token ID. And what I'm checking here is using, ERC, seven to one owner. Of function passing token.
00:15:06.770 - 00:15:40.046, Speaker A: ID it passes. Who owns it is the owner address. And then I can check that. Oh, that's the basically vitalik. Is that's how you usually use it or because we already did it. We kind of turned it into kind of metadata service API. So if you go to metadata ENS domains avatar, it returns all the basically decoded NFT information and also kind of ease owner information.
00:15:40.046 - 00:16:37.380, Speaker A: By the way, this format keep changing, so probably by the time you start hacking, it's in a different format. So you should check the actual but you will see the latest and we have a lot more features. We have some different API endpoint where it shows the metadata of the basically ENS name itself. And we are working on a doc, should be available under Docs. And one fun prototype we have in that project is to overlay ENS name on top of the image associated into avatar field. And this is still very basic version, but maybe for Hackerson you could fork this repo and it could go crazy. Interesting things.
00:16:37.380 - 00:17:31.134, Speaker A: Okay, so this one I'll go very briefly. But another way of extending resolver is for the off chain support or so called layer two scaling. It's good that you can use lots of interesting information into resolver, but every time updating it costs lots of gas. So we are working on ways to offload some of the work into layer two of your choice. And we recently announced so called during framework. This is generic ways to retrieve the information from off chain including layer two. And when you get back to how I explained in the very beginning is that resulting the name is two steps.
00:17:31.134 - 00:18:37.926, Speaker A: So fast you ask the contract to register to return a resolver and then resolver return the address. The during framework extends the resolver that instead of resolver returns ACM address, it returns service URL. And this is so called gateway. And Gateway is in charge of returning data from layer two. And if this layer two is kind of roll up model, most of the roll up should have a ways to verify L two data in L one so that the client can verify it. This is still very early stage and it's not quite ready yet, but we do have some demo of verifying optimism and we a bit in lack of resource to do. Ideally we want to basically support all the l two environment, but we haven't done it yet.
00:18:37.926 - 00:19:24.610, Speaker A: So one of the hack could be that you look into Arbitrum or Stockware and see how you could fit their L two into this during model. That could be one of the hack. And so the final step is register. I'll go back to the false diagram. I mentioned that there's a registry and resolver but there is something called Registrar which is kind of made up terminology representing the ownership of the satan name. So that when you register ETH name it's actually ERC seven, two, one NFT. And it's not neither registry nor resolver are NFT.
00:19:24.610 - 00:20:36.394, Speaker A: It's actually the owner of ETH is assigned to a smart contract which allows you to register new name which happened to be NFT standard. It's called east registrar for other domains. For example, you probably know that we recently announced that now you can turn your.com address or XYZ IO dev all the internet domain name into ENS. That's done by so called DNS registrar that it allows you to submit and claim name if you retrieve the ownership information of DNS proof and you submit the proof in another contract called DNS SEC Oracle, and using that information, you can have ensname of that's kind of different ways to work. And for testing purpose, you have fasting fast registrar as well. One thing you could do is creating your own registrar to issue your own subdomain.
00:20:36.394 - 00:21:56.230, Speaker A: So, for example, if I have Matokun is, you can issue like true Matokin is, and the prime example is decentraland. Decentraland is a kind of virtual metabolism and when you claim name on their registration page, you can set the name, but that actually also becomes a subdomain of the DCL East. So I actually do have Makoto DCL East, as I mentioned, it can be done by basically setting controller of DCL ETH into their own smart contract. And you can actually look into their source code from ESA scan and I will briefly go through that. They have something called DCL registrar which inherits ERC, seven to one contract. And when it gets deployed, it passes our registry information. And when you register their name, you call registry set subnode owner and this will basically create a subdomain under your domain, in this case DCL Is.
00:21:56.230 - 00:22:43.478, Speaker A: And while you do that, you also mint as an NFT. And that's the basic but one thing you have to be aware that I repeat, we mentioned in this talk that the ownership of an NFT doesn't and how you resolve the name are not the same thing. So minting the name itself doesn't resolve. So you also have to set resolver and then set the ECM address to the resolver. This is the part you also have to do. So this is kind of very basic of basically how to create a subdomain. Also you understand about what other things you can do with resolver beyond just setting a CRM address.
00:22:43.478 - 00:22:59.580, Speaker A: And there's lots of information. So I put most of the URL I mentioned in the slide into this part. And also if you have any questions, I'm happy to answer in the discord channel. That's it and thank you very much.
