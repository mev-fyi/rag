00:00:06.570 - 00:00:53.354, Speaker A: Welcome everyone. Thanks for, thanks for tuning in. Super excited to be here. I am Alec Wantak, co founder and CEO of Vallast and we do universal software deployment and monetization and I'm going to tell you about what that is and hopefully we're going to be able to do a demo here, but the Internet has been quite shaky and unfortunately my demo does require internet access. But we'll go over the overview and I'll show you some great links where you could find some resources to get started either way. But yeah, let's just jump into it. But yeah, at the end of the day right now today Web Three is not fully decentralized and even though we're putting massive amounts of energy into decentralization, it's pretty much completely centralized at the distribution layer.
00:00:53.354 - 00:01:44.494, Speaker A: So even though we're building all these Web Three protocols, we're falling back to Web Two platforms like GitHub and Versal, Netlify and App stores. And so really at the end of the day these have major problems in that they own all of your products because they have ultimate control over it. They actually own all of your users as well. And the crazy thing is that when your users actually buy something, they don't actually own it either because it's just a mark in the database somewhere and that they could control that and remove it whenever they feel like it. So it's this really crazy situation that we found ourselves in because we're relying on all these centralized companies and gatekeepers for distributing our software. And at the end of the day, also they take often 30 plus percent of your revenue. And when you're actually distributing software, you often have to tie multiple different SaaS products together and everything like that.
00:01:44.494 - 00:02:29.690, Speaker A: So at the end of the day, all we're trying to do is publish and potentially monetize our software and they're making it pretty insane. But it's a good thing that we do have the tools to solve this and that is Valust. So Vallast is a Web Three native software deployment protocol that is designed to replace all of these traditional gatekeepers. It is an easy way to deploy any type of application. You could deploy web apps, mobile apps and desktop apps in a super seamless easy way and then we deliver it to every single platform as well. And basically what we're doing with Vallus protocol is we're taking the same security that powers these multi billion dollar blockchain networks and applying that to the software distribution process. And so we're basically getting the security that we get from all these multibillion dollar networks right out of the box.
00:02:29.690 - 00:03:31.098, Speaker A: And really it lets us save a bunch of time and money from configuring things and reducing the operational costs and the ability to avoid these crazy fees as far as the marketplaces go as well. Because now you can directly monetize things to your users instead of going through a company. So Valus also securely delivers software to any platform. You could take pretty much anything as input, you can connect it to a GitHub repo, or you could drag and drop your build. We support web, desktop and mobile platforms, which includes of course websites, Mac apps, windows apps, android apps and Linux apps. And then everything is stored on IPFS and filecoin and we use Polygon for managing the access control and managing the accounts, the projects and then the versions underneath. So all the core logic of the protocol is powered by Polygon and basically it just ties together all these different protocols in a super easy to use interface.
00:03:31.098 - 00:04:19.550, Speaker A: And then once it's all deployed there, we make it available on regular HTP so you get an IPFS gateway URL out of the box as well as a Web Two subdomain for free out of the box. And then it's of course available on IPFS and our desktop mobile clients as well. And then we're rolling out the ability to also publish to the existing app stores so that you can get the best of both worlds. And then to avoid the 30% fees, you could direct them to the Vallast desktop launcher and mobile launcher. So you could avoid that 30% marketplace fee and replace it with a 5% protocol fee. That protocol fee also covers the gasless transactions so you don't have to actually hold any crypto to get started. You could just basically publish for free and get it going.
00:04:19.550 - 00:05:22.702, Speaker A: It also covers all of the decentralized storage and everything that surrounds it. And instead of having to tie together multiple SaaS products like GitHub Versal, Netlify or Fastlane and Configuring, all these build pipelines which could take weeks to even months to do in a production ready environment, it's just one single interface. And you could just go ahead and pick your platform, pick your targets and click deploy. And you should be ready to go in really minutes. And what does Web Three web software distribution really look like? So it includes the base fundamental features that you would expect from any software distribution system, which includes being able to deploy your application, being able to fetch and install it in an easy and secure way, as well as auto updating it. And then we have this awesome thing called software license NFTs so that if you're actually trying to sell an application, you could go ahead and create we use ERC, 1155 for it. Basically all you have to do is set pricing for your product and you can accept any types of tokens as payment mechanism.
00:05:22.702 - 00:06:14.658, Speaker A: And then we're also adding fiat gateway on and off ramp support so that your users can also purchase with cards if they want to. And then you could withdraw into fiat currency as well. Basically it's using crypto as the backbone and the rails with awesome interfaces on top to make it super easy. Even if you've never used Web Three before, or if you're a Web Two developer and you're not even trying to get into Web Three. You can definitely still use this and get all the benefits from both. And really this looks pretty familiar to existing things. Like we port over the common features from platforms like Versal and Steam and GitHub, which includes the ability to version your software, publish and auto update your artifacts, and manage both the team level access control and project level access control.
00:06:14.658 - 00:07:07.394, Speaker A: So you can add any addresses to an account, then they can publish to any projects underneath. And then you could also be more specific about the access control and say, hey, this key can only publish to this project. And you could also do really interesting things like multi SIG releases. So if you're very security conscious about this, or you're a larger organization, or if it's a protocol that multiple teams are helping build, they can actually come to consensus and coordinate on these builds as well. So it's a really interesting way that we could sort of escape the Web Two version. And once reported over again, we have a unified interface for publishing web desktop and mobile software and then we're no longer relying on a single entity for distribution. And if you're using the native Vallast desktop and mobile clients, that has its own IPFS node built in.
00:07:07.394 - 00:07:50.590, Speaker A: So the more people that download and use your software, the more resilient it becomes. We also host backend infrastructure and synchronize and make sure that everything that is uploaded to Valust has a copy on IPFS and filecoin. But you could plug in your own infrastructure, you could plug in your own IPFS nodes, you could plug in your own polygon nodes, whatever you like, or you can even do hybrid deployments and use some valid IO stuff for some things, your own infrastructure for others. So it's really up to you however you want to configure it. Or you could completely self host and not rely on anyone at all. And you can basically monetize software, like I mentioned, with software licensed NFTs. And so essentially this is a new way to do digital rights management DRM.
00:07:50.590 - 00:08:45.902, Speaker A: And traditionally we have to go through Apple, Google or Steam and basically give them 30% of our revenue for that, or we have to tie a bunch of these other crazy APIs together. And licensing systems are usually very complex and they're changing a lot, but this is the most modern way and it's the Web Three version of the DRM and this is the future of digital rights management. And again, you're monetizing it directly with your users, so you don't have to go through any entity for doing that. And like I mentioned as well, Dows can coordinate releases, organizations can coordinate releases in various ways and add different levels of security there. And then we could do really cool stuff like creating an auto update system powered by smart contracts and IPFS. So for even use cases like critical infrastructure. You can imagine that these things could be updated whenever you push an update.
00:08:45.902 - 00:10:02.558, Speaker A: The rest of the devices can actually pull that update from each other since it's all decentralized storage and CDN from that. And so yeah, it's again a more advanced way to deploy auto updates to your infrastructure, regardless of what type of platform it is. And how does it work? Well, basically I'll keep this as high level as possible, but we use Web Three native building blocks to create this secure infrastructure and basically create a new software publishing protocol layer for this. So from the software developers perspective, all you have to do is just publish your software and we use your wallet as a Web Three native identity. But if you don't have a wallet, we have passwordless, email login, so you could just log in with your email address and get moving, no problem. And then you can manage pricing via the software license NFTs say, hey, if I'm selling a game for 20 USDC, I can do that, or if I'm selling an app for five USDC, something like that, or even your own custom token, whatever you prefer, you could configure that way and multiple options as such. And then you could go ahead and withdraw balances in crypto and in the future in Fiat as well, upcoming pretty soon here.
00:10:02.558 - 00:11:02.782, Speaker A: And then everything is stored on decentralized file storage, so all the software in Valis Protocol gets stored and archived onto IPFS and filecoin and duplicated on different miners around the world. So you're pretty much guaranteed that that software is going to exist. And then the cryptographic hash of your software is then registered in the Vallus Registry smart contract. So all of the stuff gets uploaded to decentralized storage and then you take the result of that and then we put it in the smart contract. And this basically manages the entire core logic of the protocol. So it manages the entire version history across your entire organization and it also manages the accounts and the projects as well. So it's a three layer system, so it's the account that control the projects that publish releases and so it keeps track of everything there and it coordinates all of the organization members and it manages all the security features as well.
00:11:02.782 - 00:11:38.874, Speaker A: So super, super easy stuff there. And then if you're monetizing software, we support various software licensed NFT networks, we're deploying to several others right now as well. But the idea is that you could go ahead and create that on any network and then accept payments like I mentioned as well. And then from the end user's perspective, it should be pretty seamless. There's a few different ways that you can launch it. We give you a Web Two URL, as well as IPFS gateway URL, so you could direct your users there. You could also embed that stuff into your existing websites and do download links and stuff like that as well.
00:11:38.874 - 00:12:18.134, Speaker A: But from the end user's perspective, they're launching and downloading things in just as easy as ever, but in a super secure and decentralized way. And then they can go ahead and purchase the software licenses super easily. And then very soon here they'll be able to also purchase that with credit cards and Fiat as well. So that is basically the high level overview of the way that the protocol works. But then this creates that base infrastructure that anyone could build upon as well. So how do we use it? There's a few different methods. So we have a web front end and again, the Internet is not loading and everything right now, apologies for that.
00:12:18.134 - 00:12:43.774, Speaker A: But we have a web front end, that is our main dashboard. You can manage everything. It's super, super easy. It looks like Versal, it's very familiar. You could navigate and you could see your accounts and all the projects underneath and manage everything in a nice clean UI, as well as set up automatic deployments with your GitHub repo. So that's the main interface most people use. And then I'll show you this in a second.
00:12:43.774 - 00:13:35.154, Speaker A: But the Sapphire Launcher is our native desktop and mobile client. So this is essentially you could think of that as an alternative app store or a Steam, but for Web Three. And that has its own built in IPFS node and its own built in wallet that passes everything through super transparently. So that from your end user's perspective, let's say you're building a game right now most of the time. If they were to go and pick up an item, if you were minting an NFT there, it would actually stop your gameplay and you'd have to jump out and sign a message. Whereas with this it can do it super transparently when you need it. And then anything that affects money past a certain threshold, it'll do a nice Steam like overlay that's, like, hey, by the way, just to confirm, this might withdraw some matic from your wallet, just making sure that you want to do that.
00:13:35.154 - 00:14:13.610, Speaker A: And then it makes it super seamless for the user as well. And then we also have a CLI. So you could publish with the CLI super, super easily. You could put it in any CI CD system. So if you're using GitHub, GitLab, whatever you prefer, circle CI, you can put that there as well as publish it from your local machine. That also supports advanced configurations for multiplatform releases. So again, just like the web front end, you could configure, hey, I want to publish my web, my Mac version and my Android version all in the same release.
00:14:13.610 - 00:14:56.826, Speaker A: And the CLI does that super easily as well. And then our GitHub action is basically taking the SDK and making it native for GitHub. But you could also tie that in with the automatic deployments as well. So if you're already using GitHub actions, all you have to do is add the Vallus publish at the end of your workflow and it's super seamless. And then we also have TypeScript and Go SDKs. So basically the TypeScript SDK is what powers all of these other things. So it just wraps all of the different protocols together and again is basically the core logic of Valus protocol and then we also have Go SDKs for depending on your use case as well.
00:14:56.826 - 00:16:03.914, Speaker A: So if you're doing like you could do cool things like auto update your go binary by fetching the latest release and doing that so really cool stuff there the web, hopefully I'll show you this and hopefully the Internet will work but otherwise this is basically what the web front end looks like. You have your accounts, you have your projects underneath you could create more projects when you go inside of these. You could create new releases, you could configure the project settings as well as the different types of platforms that you're targeting and again all the logic of the protocol is available here in a super easy familiar way. And then the Sapphire Launcher is the cross platform game and App Launcher. And so you can see here this is a web3 game that is launched super natively. It's got a built in wallet there that passes everything through and again provides that super easy familiar interface for you. So instead of having to rely on the app stores you could direct your users to this and avoid those 30% fees.
00:16:03.914 - 00:16:54.980, Speaker A: But it also has its own built in IPFS node as well. So everything that it's downloading gets cached to local IPFS. So it becomes more and more redundant as people use your software and so the more and more people that use it, the more and more copies exist and the more and more censorship resistant it becomes as well. And so this is available on Mac, Windows and Linux and Android and iOS. We're figuring that out, there's definitely a lot of restrictions there but that'll be coming soon. But the CLI again super easy interface basically you just install it. Basically we use your native keychain on macOS, on Linux we use Gnome keyring and on Windows it is the Credential Vault I believe it's called.
00:16:54.980 - 00:17:53.726, Speaker A: But basically these are all super secure ways that are powered by hardware security on your desktops. It stores a fresh Ethereum key in there and since it's powered by Metatransactions, we can add that to the account and then to publish, you just publish your account, name your project, name the version and then the folder that you want to publish. You could also do a more advanced configuration by configuring a Valis YML file and I'll show that to you in a second. But this is a really easy way to get started and to just super easily publish. And then the GitHub action is something very similar. So all you have to do is say hey, whenever I'm pushing to the main branch go ahead and give it a publish and you could pre fill any of the previous steps here in this example, basically we're publishing to Acmeco under the test project and we're publishing the build folder from that. And again due to the access control features.
00:17:53.726 - 00:18:59.898, Speaker A: With this, you could generate a fresh key that only has access to that one project, or it could have access to multiple. If you want, you can add it to as many as you like, but it allows you to restrict the access for that particular key and you don't have to hold any crypto inside of it. So you could basically store that as a GitHub repository secret on your repo and then it will use that as a signer and we have metatransactions out of the box so you don't have to pay anything for crypto and it will automatically publish super easily there. And so that's really nice if you already have workflows. And then we have an automated deployment system as well. So on the web front end you could click the deployments tab and you could choose the GitHub repo and it will automatically generate the keys for you, add it as a secret and set up the deployment process and open up a pull request that has this GitHub action on your repo. And so you don't have to rely on any third party infrastructure except for the stuff that you're already using, instead of having to trust random build servers that who knows who's running that.
00:18:59.898 - 00:20:16.660, Speaker A: We could already use the existing stuff there, or you could use your local machines, or you could use a combination of and then we also have an SDK. This is just a quick example of fetching the latest release. You can generate the project IDs release IDs from there and basically this allows you to interact with the Valus protocol programmatically and the Valus SDK contains all the logic of everything. So you could create accounts with this, you could create releases or projects, you could create releases, you can also manage the pricing for your products as well as purchasing the products and you could also use it to write files to IPFS super easily. We have really nice helper functions like called Write JSON, write file and write folder and all you do is just pass in the file or the array of files and it gets it onto IPFS super easily and then you could use that to programmatically create a release. So if you're doing dynamic assets or things like that, you could basically use that for version control, any type of data that you want. So some use cases for that can be like if you're building a game, you can upload certain assets programmatically and then load them in.
00:20:16.660 - 00:21:09.634, Speaker A: And then we have some awesome other use cases too, where folks can create other accounts and even universities and stuff like that underneath with certificates and stuff like they were mentioning as well. But basically you could use that to get access to all the access control features, the versioning features for whatever type of use cases you need that aren't necessarily supported by the front end or the CLI out of the box. You could also use this to contribute new types of software as well. But yeah, where do we find this and how do we get started with it? Everything you need is on Vallus IO right now. There's a banner at the very top as well that says, hey, if you're here at ETH India, click here and it'll send you to the guides and shows all the bounty information that we have as well. You can find everything on the Docs as well and then join our discord. We're always super happy to help.
00:21:09.634 - 00:21:45.342, Speaker A: We have folks from around the world, so someone's going to be online if you need help. And we're always really excited to hear what you're building, so please send us a DM of what you're building and we're happy to help you anytime. And then like I said as well, everything about Vallast is open source. From the ground up, from the smart contracts to the SDKs, the sub graphs, front end, everything is open source. And you can find it on our GitHub at Vallast IO. And you could see everything I'm saying here is actually true. So there's that.
00:21:45.342 - 00:22:16.230, Speaker A: And thank you so much. I really hope this Internet is going to work out for us here. Let me just see real quick. If it does, it looks like it's not going to we'll give it a shot. All right, we'll give it a shot. But I'm going to go over the if you go to the main website, you could see this link here. If you click that banner, it'll send you to the guides that has information for everything that you need.
00:22:16.230 - 00:23:05.574, Speaker A: So it has the bounty information for ETH India, and it also shows you how to create an account, how to create the project, and then different ways to publish. And so like I mentioned, you could use the web dashboard for that. We have examples for publishing next, JS apps, react apps, unity apps, other types of binaries, and then ways to monetize your apps as well using the software license NFTs. And then we're also doing social media challenge for this actually should be Hoodies, but yeah, for the hoodies that we're giving away as well. Yeah, just share a pick with some of Val's team members and we'll do that. And then we're also doing a ledger giveaway as well. So the top three projects that also participate in these challenges are eligible for that.
00:23:05.574 - 00:23:59.334, Speaker A: So really exciting stuff there. And yeah, it looks like this Internet isn't going to work out for us unfortunately here, that's definitely apologies for that. But basically through the web front end, you could configure all the automatic deployments and sorry if anyone heard that, but this mic over here. Basically we just released this new automation piece. If you go to your project, there's a little rocket icon in the top that's called deployments. You click that, you pick your GitHub repo and then it'll automatically generate the key for you. All you have to do is give it the build and install commands we have out of the box build and install stuff for NextJS as well.
00:23:59.334 - 00:24:55.340, Speaker A: So if you're building that you should just be able to click Continue and then the ability to also publish to different targets is coming as well. So by default everything is being published over the Vals protocol but we're also enabling automatic ways to then publish to these other app stores as well. So you basically get the best of both worlds there. So you get access to if someone is already using these app stores, which we all are, right, they can download your app from there. But if they're more like Hardcore Web Three, then they could use the Sapphire Launcher and you as well can embed download links on your website and directly use that for the payment flows and everything like that to bypass a lot of these fees. And then if you're downloading the Sapphire client for mobile as well, it'll do everything super seamlessly. So all you have to say is hey, just download Sapphire and you can install all my apps from there.
00:24:55.340 - 00:26:09.266, Speaker A: And yeah, again since that all has the built in stuff, the more people that use that, the more resilient the software gets and so yeah, unfortunately I guess I'm not going to be able to do the demo because it does require internet access and it looks like the Wi Fi just keeps disconnecting and reconnecting. So definitely apologies there. But again the guides should have everything that you need but I will show you what at least it looks like to configure the CLI and I'll give you a preview of this Sapphire client as well. So for this basically you could see that we show different featured apps and different featured games and again send us your apps and games, we'd love to feature you. You could also see what's featured on Testnet. I will say it does require for the Bounties for ETH India, it does require using the mainnet Valust site but you could see top publishers, I'm sure you might see some familiar faces there. You could see recently stuff, newest stuff from there and then you can also launch these things as so we'll roll from there.
00:26:09.266 - 00:26:55.140, Speaker A: But that is the desktop client that is available for beta. So join our Discord and send us a DM and I will send you a copy of that and would love to integrate your apps as well into that and make sure that your app gets the perfect seamless experience that it deserves as well. And then for the CLI we have an example projects repo on our GitHub as well. So you could check that out and we have different examples for multi platform projects. Next JS projects, react projects using the SDK and node JS examples and pretty much anything you need. But I'm going to zoom in here a little bit. Hopefully everyone can see that.
00:26:55.140 - 00:27:57.682, Speaker A: Boom. Basically what this project is multiplatform project demonstrates the full capabilities of the Vals protocol here. So essentially what this is is a combination of a Go binary and a website. So most organizations tend to build cross platform like we'll have a mobile app and a website or a desktop app and a website or various combinations of so you can include them all in a single release with this. So we just have an example for a Hello World Go binary that gets compiled to Mac builds both for intel and M one Arm 64 Linux. We have AMD 64 in here, we have a web front end here and then as well as Windows. And then all you need to do to configure that is basically you just set up your account, you point it at the account on Vallast that you're trying to publish to you set up the project, same thing.
00:27:57.682 - 00:28:59.074, Speaker A: And then you could give it a release here that can come from wherever you'd like as well, but you just basically give it a version and it'll publish from there. And then to configure the different platforms, all you have to say is which platform it is and where it's at. So for the web builds you just say web and then we have it in the disk web folder we have Darwin AMD 64 so Mac Intel builds Darwin Arm 64, mac Arm builds Linux Windows and then we have a bunch of other supported stuff as well. And you could also add custom platforms as well so there's no limitations there. And again with this SDK, if there's a custom platform you have you can always implement it that way. But then basically we combine all of this together into a single release. And then when you view that on the project page you can actually see Mac icon, a web icon, Linux icon depending on what it is, the launch button will default to your preference.
00:28:59.074 - 00:29:46.454, Speaker A: It'll default to the web first and if you don't have that it'll default to the current running platform and then same thing for the ability to install and everything like that. And then all you have to do to publish is type Valus publish and basically what it'll do is pull the same keys that are inside of your keychain that also is shared by the Sapphire launcher but it'll use that to sign a message. It'll upload everything to IPFS automatically and it'll publish the release in the exact same way that the website does as well. So you can stick this in a CI CD system you can run this on your local machine. I just ran this a little bit ago and that's. The log that we got. So I just published 215 with that.
00:29:46.454 - 00:30:32.934, Speaker A: And then we get a couple of different URLs here as well, so you can access it in various ways. And then we also provide automatic subdomains for you. So basically whenever you publish a release, you automatically get your projectaccountename on Vallast IO. So we give you an out of the box URL similar to things like Versal as well from there. But yeah, I really wish I could be demoing this right now because it is super cool and super seamless. But yeah, again, if you go to the website and you view the guides there and you come reach out to me, anyone on the Valis team, we're super excited to help get you published. So here I just want to show.
00:30:32.972 - 00:31:22.150, Speaker B: A quick demo of deploying and setting up the automatic GitHub config with the repository, as well as the different options that you have available to publish on ballast. So right here I am on just the dashboard here and you can see my list of projects, different types of projects, go Rust, web apps and some Unity apps. And here we have an awesome multiplatform build here, which you can see. You get your own automatic subdomain, a gateway URL for IPFS, and then you can go ahead and download the web, mac, Linux, Arm, Windows, as well as Android versions. So it really depends on whichever platform you like to publish. And we could do so by just setting up a version here. Let me pick just another version.
00:31:22.150 - 00:31:52.158, Speaker B: One, one. And then from the web build you can choose your folder, which is the output folder. You could choose your binaries for the different platform types, including your APKs, and then Valus will automatically deliver it to the right platform. But for this I'm going to show you taking a next. JS repository and deploying it with our GitHub action automatically. So I'm going to fork this next. JS repo here and create that and then cool, good to go.
00:31:52.158 - 00:32:09.690, Speaker B: And then I'm going to go ahead and create a new project here. I'm going to go ahead and call it Next app, give it a display name, next JS application and then all we have to do is pick the project type, whether it's web native or CLI.
00:32:09.790 - 00:32:11.618, Speaker A: This is just a hint to the UI.
00:32:11.714 - 00:32:14.822, Speaker B: It still supports every platform, regardless of what you pick here.
00:32:14.956 - 00:32:16.246, Speaker A: But this is more so what your.
00:32:16.268 - 00:32:43.694, Speaker B: Default preferences are for the rest of the UI signaling here. So if we click web, we could go there. You could also give it some tags as well, and you can also add your custom tags if you like, and you could go from there. So you add the custom tag that way and then we hit continue. You could go ahead and give it a short description. We could just say NextJS application and then you can write markdown here in this description. As well.
00:32:43.694 - 00:32:46.414, Speaker B: And you can say NextJS app and.
00:32:46.452 - 00:32:47.906, Speaker A: Then we could see the list of.
00:32:47.928 - 00:33:11.850, Speaker B: Account admins that already have access to this project because there are admins on the account, but you can also add project level admins that only have access to this specific project. So you can have granular access control depending on your preferences. I'm just going to hit continue here. If you have a YouTube link, which you likely will, because you're going to be recording one for your demo and you could paste that here and it'll show up on your project page.
00:33:11.920 - 00:33:12.442, Speaker A: Nice.
00:33:12.576 - 00:33:34.586, Speaker B: You can also set a header image and some gallery images as well and then it'll show nicely on your project page. So highly recommend you do that. Definitely add descriptions and some screenshots there. And then when you hit create this project, it's basically going to do a gas station relay here and then it's going to pop up a meta transaction.
00:33:34.698 - 00:33:35.806, Speaker A: So we don't have to pay any.
00:33:35.828 - 00:34:10.814, Speaker B: Gas to create this project, nor do we have to pay any gas to do any releases. And then once we create this transaction, we could go ahead and see it is being mined. This is on Polygon mainnet, so you could definitely test and prod on this and the protocol fees cover the gas fees. Cool, cool. Yeah, we're still good on the display here. And so whenever this transaction is mined, then we can actually go ahead and do the release on the automatic deployment. But in the meantime, I could show you what it looks like to publish with the CLI with the multiplatform build.
00:34:10.814 - 00:34:14.862, Speaker B: So this multiplatform build has web build.
00:34:14.996 - 00:34:17.034, Speaker A: As well as a Mac for Arm.
00:34:17.082 - 00:34:20.014, Speaker B: Mac for intel and a Windows build.
00:34:20.052 - 00:34:20.814, Speaker A: All built in one.
00:34:20.852 - 00:35:02.566, Speaker B: So if you're building cross platform applications, which many of you likely are, then you can go ahead and include them all there. All you have to do is specify the account, specify the project, give it a release version, and then all you have to do is specify the architecture and the location of that deployment. And then this will be read by the Vallast CLI and you can just run Vallast Publish there and then that will give you access to which accounts you have stored on your local keychain. You just hit enter. It does the Meta transactions there as well, so there's no worries there. It uploads everything to IPFS and creates the transaction there. And while we wait for that, I'm going to go check on the other transaction.
00:35:02.566 - 00:35:09.610, Speaker B: It looks like that fired off so we can go ahead and get started with connecting this next app to that repository.
00:35:09.690 - 00:35:11.134, Speaker A: And so I go to the new.
00:35:11.172 - 00:35:41.754, Speaker B: App that I created here and I could see a couple of different configurations. I could go back and change the project settings. I can also set up pricing for this project. And so if I wanted to sell this app, or if this was a game. I can go ahead and set pricing in any token that I like. And basically what this will allow you to do is accept any type of token for payment for your application and then that will generate a license ID, which is basically the ERC 1155 Token ID that it generates for you.
00:35:41.872 - 00:35:43.318, Speaker A: You can use that to token gate.
00:35:43.334 - 00:36:21.206, Speaker B: Your application in all different types of ways. And you could also set license limits and anything else that you'd like. And then the actual image that it uses for the NFT will match your project's image. So if you set that header image there, that's what will show up as the Val's project license NFT when the user purchases it. But I'm going to set up the Git deployments here. So basically all you have to do is click this rocket icon and it'll walk us through the steps. So all we have to do is choose a project and I'm going to choose the next test that I forked here.
00:36:21.206 - 00:36:26.534, Speaker B: And this is just a basic Next JS application. And then all I have to do is from there.
00:36:26.572 - 00:36:28.054, Speaker A: And so what this does is since.
00:36:28.092 - 00:37:10.550, Speaker B: Valance is a protocol, it can use any types of build servers, including my own local machine like I did with the CLI here. But we can use GitHub actions as our native CI CD as well. But you could also plug the CLI into GitLab Jenkins whatever CI CD system you're already. So what this does is it generates a fresh ethereum key, doesn't have any crypto on it, and then it adds that to your Valus project, gives it access, and then it puts that in a GitHub secret on your repo. So then all you have to do is click Next from here. You could configure different types of builds. Right now the automation is supported by Web, but we're adding the automation flow for Mac, Windows and Linux.
00:37:10.550 - 00:37:16.486, Speaker B: But you could still manually upload those right now or with the CLI. And then all you have to do.
00:37:16.508 - 00:37:18.454, Speaker A: Is click the framework that you're using.
00:37:18.492 - 00:37:54.562, Speaker B: We have some presets depending on what you're using and then just give it the build and install command, but you can use the out of the box tooling from there and then you just click Next. And here's where we're adding some more really cool stuff. So by default, everything is getting published to the Valus protocol. Everything is stored on IPFS filecoin and then indexed with the Polygon Registry smart contract. But we're adding ability to automatically ship your application to every other app store as well, including our native Sapphire Launcher, which you get automatically out of the box when you publish to the Valves protocol. So by default you get access to this launcher here.
00:37:54.696 - 00:37:56.030, Speaker A: But then we're going to be adding.
00:37:56.110 - 00:38:20.890, Speaker B: Support to get your app in both the Web Three and Web Two app stores super easily. So you get the best of both worlds as well as future integration, where it'll post on Twitter and on discord when you roll out a new release. But all we're going to do is click next. And basically what this does is it generates a GitHub action workflow file for you. And sorry, that's not visible here, but basically it automatically sets up the workflow.
00:38:21.310 - 00:38:24.490, Speaker A: Using our Vallus GitHub action.
00:38:24.650 - 00:38:40.018, Speaker B: And there we go. Is the screen back? Okay, cool. So all we have to do here is it takes in your build and install commands from that previous form and then it there we go. We're flashing here.
00:38:40.104 - 00:38:42.866, Speaker A: Okay, but anyway, all we have to.
00:38:42.888 - 00:39:12.714, Speaker B: Do is take the build and install command from there and then it adds the Vallus publish workflow to the end there. And then when we click deploy, basically what it'll do is it will generate a new ethereum key for you. Sorry, this is kind of dripping up a little bit here with the screen, but 1 second. 1 second. Anyway. Okay, so let me go through this again. Okay, cool.
00:39:12.714 - 00:39:39.394, Speaker B: We're back. Clear. Okay, so we're going to generate a new key here and then we're going to go ahead and hit Next. There's the Valus protocol piece, and then we're ready to deploy. We hit deploy, and this is going to add that signer key to your Valus project. And then it's going to add that private key to your GitHub secret so that now your GitHub action will be able to do the publishing. And then it's going to open up a pull request on that repository for you with the new workflow file.
00:39:39.394 - 00:40:26.994, Speaker B: And then all we have to do is merge that and then the GitHub action will continue to publish from there. So when this transaction mines, we'll see that and then it will continue here. But really all we have to do is just wait for this to roll, it's going to create that pull request, and then it's going to relink that repository back into our Vallast account here. So it's going to pull up one more transaction to modify the project and do the final linking. And then it has also opened up this pull request. If I go back here, I could view this ahead of time before here, but this will also show us the new pull request after this transaction is mined. But since it already made it, I could just go directly there and what it'll show you is this new workflow file.
00:40:26.994 - 00:40:36.902, Speaker B: So if I actually click on this, it generated this for us using the standard GitHub action workflow step.
00:40:36.956 - 00:40:38.406, Speaker A: So you can see it put in.
00:40:38.428 - 00:40:56.542, Speaker B: Our install command, it put in our build and export commands here. It generates a timestamp, and then it does a release with the Vallast publish GitHub action here. And then it maps to your Valust account and your project and then uses the timestamp as the release. But you can also modify this workflow from here however you like.
00:40:56.676 - 00:40:58.734, Speaker A: But this is an easy way to get it started.
00:40:58.932 - 00:41:38.154, Speaker B: And then it also publishes the web platform's out folder. So all we have to do to get this working is give it a merge and then from there it will automatically start publishing the next JS app. And so I could delete this old branch here and then I could go ahead and check out the GitHub action. And so this is running here. This should just take a little bit, but yeah, it's basically going to do the same process that the CLI does, the same process that the Web front end does, only completely automated. So we can see each of the steps here and then that will get us rolling. So again, that's pretty super simple.
00:41:38.154 - 00:41:41.978, Speaker B: And then again, the automations for other types of software are coming soon, but.
00:41:41.984 - 00:41:43.406, Speaker A: You could still use them with the.
00:41:43.428 - 00:42:12.198, Speaker B: Web app and the CLI from there. And then we should see this build here. It'll give it a timestamp and then it'll run the GitHub action here as well. So all we have to do here is just wait for it to happen. It should take another maybe 15, 20 seconds or so, maybe less. But yeah, we could see we do the export here, it's doing the Meta transactions, it's uploading files, it's publishing the release, and then we should rock and roll from there.
00:42:12.284 - 00:42:13.698, Speaker A: And again, since this is all powered.
00:42:13.714 - 00:42:44.510, Speaker B: By Metatransactions, everything is gas free. So this new account that we created and added to this Valus repo doesn't have any crypto on it. There's no risk if it gets stolen except for publishing the new release. And if that happens, then all you have to do is remove that key from the Vallast repo and it will no longer have access to be able to publish. So super easy to manage the security around that and you don't have to worry about any other access control issues. And so, boom, there we go.
00:42:44.580 - 00:42:45.954, Speaker A: We just refresh that.
00:42:45.992 - 00:43:11.642, Speaker B: And so if I go back to the next project, sorry, the Internet is hot reload. It's a little bit interesting here, but if I go back here to the next app, you could see we've got some versions mined here and then that's our version from there. And then you could go ahead and access this from the Gateway URL from there. But yeah, that's about it.
00:43:11.696 - 00:43:34.740, Speaker A: Well, anyone who has a question, please feel free to grab a mic. And yeah, we have a couple of minutes here to go over questions. Yeah, exciting stuff. So, yeah, we'll get some mics going. I don't know if the system there, but cool. All right, got one coming here.
00:43:39.110 - 00:43:39.860, Speaker B: Cool.
00:43:40.710 - 00:43:49.400, Speaker A: By the way, I like this setup as a way to avoid cross noise and stuff. I think that's pretty cool. Definitely. Very clever there.
00:43:49.770 - 00:44:04.902, Speaker C: Yeah. So I wanted to ask that if I'm hosting my application on Valid, so do I have the option. Does it always run on the Sapphire Launcher? If it is running on the Sapphire Launcher, then what are the benefits that I'm getting? If it is running on the Sapphire Launcher?
00:44:04.966 - 00:45:11.582, Speaker A: For sure, so you can always run it on the website, you can access it in all those different ways, but the benefits you get out of the Sapphire Launcher is that it gets cached automatically to the local nodes as well. And then it has a built in wallet. So instead of having to constantly sign stuff and constantly pop out of your application to do things, it passes it through every app that is included here. So basically, if I were to launch this, you could see that this is just a regular DAP here, really awesome DAP. And then it passes through. If I were to switch the network to I'll deal with that, but basically, yeah, you could pass through the wallet and it'll automatically go from there and then same thing from here. So if I were to launch this, I got to cache this, but yeah, basically as you're playing the games, it'll pass through automatically, so you won't have to worry about having them configure anything.
00:45:11.582 - 00:45:13.182, Speaker A: This just has everything built in.
00:45:13.236 - 00:45:19.730, Speaker C: So basically it goes live. Like it just goes along if I'm playing a game just goes along with it. There's no interruption and nothing else.
00:45:19.800 - 00:45:28.630, Speaker A: Exactly. And if you're building a DAP, then this is a way to install your DAP locally so that you can access it without having to rely on another endpoint in the future.
00:45:28.700 - 00:45:40.198, Speaker C: Yeah, so it's basically like there's no this thing hardware or this thing any resistance that I'm facing if I'm just running on the Sapphire Launcher. Got it. Yes.
00:45:40.284 - 00:45:47.802, Speaker A: And then there's an additional benefit here so that all of the things that are purchased through this bypass all the app store fees and everything like that.
00:45:47.856 - 00:45:49.482, Speaker C: Yeah, got it. Thank you.
00:45:49.536 - 00:46:00.800, Speaker A: Awesome. Yeah, thanks for your question. Sweet. I think we have time for a couple more. Cool. Sounds good. Sounds good.
00:46:00.800 - 00:46:33.558, Speaker A: All right, well, anyway, yeah, I guess if we don't have any more questions, but yeah, definitely. Again, sorry for the technical difficulties demo stuff, but we roll with it. We're in web3, we're scrappy. We got this, no problem. But yeah, please find us whenever you're publishing. And yeah, we're looking forward to seeing your apps and yeah, send it to us in the discord and we'd love to highlight it. We'd love to spotlight you on our Twitter spaces or do a play session in our discord as well.
00:46:33.558 - 00:46:43.210, Speaker A: We've been doing that as well with our community members for that. So really exciting stuff there. And yeah, looking forward to seeing what people build. Good luck, everyone. Bye.
