00:00:06.890 - 00:00:49.740, Speaker A: GM or actually good evening. Good night. GN. I'm Steph and I'm a developers advocate at Polygon. And today I'm going to present on a quick start guide to Polygon for biddlers or builders, which you all are. So, quick definition of biddle or BUIDL. It kind of comes from Hodl, which I always think of Hodor from Game of Thrones when he's like, hold the door, but hold on for dear life to all of your crypto through the winter with me and also build for dear life because a bear market is a build market.
00:00:49.740 - 00:01:39.478, Speaker A: So about half of the hackers at East New York this year are first time Web Three developers, which is really cool to me because I started my journey in Web Three with ETH Online in October last year. And so the main difference between a Web Two app and a Web Three DAP is just the back end. There's components of blockchain on the back end, but from a front end perspective, it's very similar. So if you're used to creating front ends, awesome, you're in the right place. And I'll run you through how to compile and deploy a smart contract on Polygon today. But really quick, I just want to go through a couple of fundamentals. So what is a blockchain? A blockchain is just a public database that's updated and shared across many computers in a network.
00:01:39.478 - 00:02:27.558, Speaker A: We consider that a decentralized system. And a block in a blockchain is just the data or the state that's being stored in those consecutive groups of blocks. So if you've ever sent crypto to someone or received it from someone, the transaction data needs to be added to the block on the chain in order for it to be a successful transaction and to be accepted as a transaction on the network. And I took this nice little definition from the Ethereum Foundation. They have a great article called what is a Blockchain? I love the Ethereum Foundation for all of their different resources. It's where I start when I'm learning something new. So next up, what is Polygon? This is kind of a quick overview of a bunch of the different products that Polygon offers.
00:02:27.558 - 00:03:00.354, Speaker A: You've probably heard of Polygon POS the most. I'll go over that in a little more detail, but we also have a bunch of different ZK solutions. We have supernets and we also have Polygon ID. And we actually just announced an integration with Polygon Dao, I believe, two days ago. And then we went into more detail about that today at Polygon Ignite. So we would love to see you at a future Ignite event. But Polygon POS, which is proof of stake, is an Ethereum scaling solution.
00:03:00.354 - 00:03:28.874, Speaker A: And some of the reasons why I've always loved developing on Polygon is because Polygon is really fast. So the transaction speeds go through super fast, 7000 transactions a second versus Ethereum at 15. It's also very scalable. So it's built to scale with you. We've had over 1.4 billion with a B transactions recorded so far, and also 29,000 DApps on Polygon, which is awesome. Also very flexible.
00:03:28.874 - 00:04:16.320, Speaker A: It's EVM compatible. And if you've ever developed on Ethereum, you're already a Polygon developer, which is very cool. We use all of the same tooling and that's all built in, so none of that has to change just because you're on Polygon. And then one of the best parts to me is the cost. So as a developer, if you're deploying a contract on Polygon, it costs far less than Ethereum, with an average transaction being just a fraction of a penny, which I absolutely love. And then the other reason to deploy on Polygon this weekend is that we're giving away $20,000 in prizes. We have four different tracks, and we also have a pool prize which will be split between the top ten projects that deploy on either Polygon POS testnet or the main net.
00:04:16.320 - 00:04:44.486, Speaker A: So I'm going to go over how to compile and deploy a smart contract on our testnet, which is called Mumbai. So the first thing you have to have is a wallet setup. So download MetaMask, create a new address, add the test network, and then go to the Faucet. That's a lot of steps. So I'm just going to run through the whole thing as a demo. I already have MetaMask, which is a browser extension. You can see it up here.
00:04:44.486 - 00:05:18.450, Speaker A: And I'm also already connected to the Polygon testnet, but I'll show you how to add that. So you can download MetaMask from this link. But the next thing you're going to do is create a new address for test development. So within MetaMask, open up your profile by clicking that upper right hand little dot and then go to Create Account. I like to name my accounts with the date. So I'm just going to call this Wagme, which stands for we're all going to make it. And then I like to give it a date of like 624 so that I remember what I was doing.
00:05:18.450 - 00:05:59.242, Speaker A: And this is a test account, so I'm never going to use this for real transactions because just security reasons. So now I've got a new account and the next thing I need to do is add the Polygon Mumbai test network. So the easiest way to do this is to go to PolyScan. So I'm just going to open that link. PolyScan shows all of the different transactions on Polygon. It's very similar to Etherscan, but it's for the Polygon test network because you can see the little Mumbai flag up here. But if you scroll all the way to the bottom of PolyScan, you'll see a little Add Mumbai network button to MetaMask.
00:05:59.242 - 00:06:42.406, Speaker A: So that's just a way to quickly and easily add the RPC. So we can connect to this network by changing it within MetaMask. So I'm just going to switch the network. I'm going to connect to the wallet I just created and we can see that Wagme 624 account is on the polygon testnet, which is exactly what I wanted. So the next step is to add some polygon Mumbai testmatic from a faucet. A faucet is just a mechanism for receiving test crypto so that you can play with it and do different development. So you can see that I'm on the Faucet account and I'm going to get some test tokens.
00:06:42.406 - 00:07:15.240, Speaker A: Again, the network is Mumbai, which is our testnet, and I want matic tokens. I'm going to grab the wallet address from MetaMask and paste it in here. And I'm going to send myself some crypto. If only this worked for Bitcoin and Ethereum on the main net, I'd be so rich. Okay, so request is submitted. This should take one to two minutes and we'll see it directly in my MetaMask account as soon as this funding goes through. So I don't think it'll take one to two full minutes, but we'll see.
00:07:15.240 - 00:07:55.250, Speaker A: But once that happens, we have our wallet fully set up for actual smart contract deployment. So next we're going to get into how to actually deploy your first smart contract using Remix. And Remix is this really awesome IDE. It kind of reminds me of Visual Studio code. But not only can you write your smart contracts in Solidity in Remix, but you can also directly compile and deploy them so you don't need a different tool. Like, I don't know what you use for your front ends, but you can do all of this straight in Remix, which is great. I'm just going to click right into Remix and open this in a new tab.
00:07:55.250 - 00:08:26.714, Speaker A: But first let's check MetaMask and see. Yeah, so you can see that we got that 0.2 testmatic from the faucet successfully. And so let's get into the actual coding. So again, this is the Remix IDE where you can create your smart contracts and also compile and deploy them. I'm going to go straight into the Contracts folder and we're just going to look at the first contract. This comes built in with Remix for you to play with.
00:08:26.714 - 00:08:49.362, Speaker A: This is written in solidity. On line three, you can see I'm just going to zoom in. Hopefully you all can see that. But this is just on line three. This is defining the Solidity version so that it's pinned when you're developing. And on line ten, you can see this contract is called Storage. Line twelve has a piece of state, which is just number that's being defined.
00:08:49.362 - 00:09:24.734, Speaker A: And on lines 18 and 26, we have two different functions. So on line 18, we have the store function. This is taking in a number to store within the smart contract. So if we did something like store three, three would be stored in the smart contract and that would be like the piece of state that we're keeping. And then anytime we call the retrieve function, it would print the number. So if you've developed in JavaScript I think it looks very similar, which I like because I'm a JavaScript developer in a former life. But we're just going to practice compiling and deploying this smart contract.
00:09:24.734 - 00:10:24.562, Speaker A: So I'm going to save this within the Remix editor and then go to the Compile tab, which is the third one down, and click Compile. So this is just compiling the code. Okay, so this compiled and the next thing we need to do is deploy this compiled code. So the fourth tab down is the Deploy and Run Transactions tab. I'm going to switch my environment to injected web3 because this will read the environment directly from my MetaMask account. You can see there's this custom 8001 network and that corresponds to my Polygon Mumbai test network. So I'll connect to my account and just to show you that the network actually changes, I'm going to change into the Ethereum main net and watch the injected web3 network appear.
00:10:24.562 - 00:11:00.414, Speaker A: Change when we do that. So now we're in the main net, but I'm going to go back to the Polygon testnet. But that's just to show you that as you change your network, it also changes within Remix. So this is an easy way to deploy to any EVM compatible chain, although we would really like you to do it on Polygon, of course. So now we have our injected web3. We have the account hooked up and the last thing to do is deploy, which I do by clicking the beautiful orange deploy button. It shows an estimated gas fee.
00:11:00.414 - 00:11:36.282, Speaker A: So it's like zero, zero, three matic. I'm going to confirm that transaction. And you can see down here, creation of storage, which is this smart contract, is pending. And we can see there was a successful transaction with this nice little green button checkmark. So at the bottom here, you can see deployed contracts. We just have this one that we just created and hopefully we all remember. Oh, no, my mouse got stuck.
00:11:36.282 - 00:12:12.060, Speaker A: Let's see, technical difficulties. Mouse difficulties. There we go. Okay, so back in that contract again, on line 18, we had the Store function defined and then also the retrieve function. And those correspond on the left to two different callable functions within our contract. So remember, the Store function takes in a number. So does anyone have a favorite number? Shout it out.
00:12:12.060 - 00:12:26.660, Speaker A: Four. I heard four. So I'm going to set four as the store number by clicking Store. Again. This is a transaction. So I'm going to confirm the transaction. You can see it's pending down here.
00:12:26.660 - 00:13:04.420, Speaker A: And then if all goes right, once this has posted, we can retrieve whatever the number is in state and hopefully it will also be four. I know it will be because my code always works. Useless to laugh at that. It's not true. My code never works. But let's retrieve. And you can see down here that decoded output we retrieved was four.
00:13:04.420 - 00:13:40.144, Speaker A: And so just to prove this really works, I'm going to update it to 4000 and store this new number on chain. So I'm posting a new transaction to store the value, and then we'll retrieve the new stored value and it should be 4000. Okay, so the transaction posted and let's retrieve that value. 4000. Sweet. So this is how you can interact with the contract within Remix. But you can also do this from a front end in a very similar way to how you would call an API.
00:13:40.144 - 00:14:22.766, Speaker A: I'm going to show you a link to another tutorial for how to call from the front end. But this walkthrough was really just to show you how quick and relatively easy it is to deploy a contract. Because I know when I was starting out, this was something that intimidated me just because I don't know why it did it shouldn't have. But I've got all of these steps within the presentation so you can look at it later. But just back to this. Here's four more developer resources. We have our Dev library on Notion, the Polygon Documentation Polygon Academy, which has four levels of different courses that you can take after the hackathon.
00:14:22.766 - 00:14:45.126, Speaker A: And then also some web3 concepts from the Ethereum Foundation. If you're building with us, we would love for you to tweet. This is our Twitter account. Tweet, tweet, tell us what you're building on polygon. And our hashtag is hashtag on polygon. And then the last thing to plug is another hackathon we have going on. It's actually a two month hackathon called Biddle It.
00:14:45.126 - 00:15:16.820, Speaker A: And this is a great way to keep learning in web3, improve your skills. We have a bunch more workshops that we'll be running. It's a great way to meet friends and network. This is also fully virtual, so if your friends weren't able to make it out to New York, you can still totally hack with them and connect with other builders by searching for them on our social media using our two hashtags. One more plug. We're also doing a video series called Wagme with Polygon. Some of my beautiful coworkers, Mitch and Rahat, have been filming different clips hey, guys.
00:15:16.820 - 00:15:35.894, Speaker A: But they would love to meet you and hear about what you're building. And we'll get it on video. We'll make it look super cool. So we would love to see you at our booth. And thank you again. I'm Steph. I'm Oceans 404 on Twitter and this whole presentation and the slides can be found at this tinyurl, so tinyurl.com
00:15:35.894 - 00:15:39.480, Speaker A: polygon ethnyc. Thank you so much.
