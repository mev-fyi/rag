00:00:00.410 - 00:00:11.680, Speaker A: Sponsor workshop. Joining us today is Francesco and Miao from the Superfluid team. And with that, I will hand it over to them to kick off the session and introduce themselves.
00:00:19.410 - 00:00:31.990, Speaker B: Hi. This is Miao. I'm from Superfluid. I'm CTO of Super Superfluid, and very happy to be here to introduce you guys about how to create super apps.
00:00:32.970 - 00:01:00.240, Speaker C: Hi, everyone, I'm Francesco. I'm going to give you a brief introduction to Superfluid. I hope it's not too boring. Sometimes there's people who already know us, so I'll try and keep it short, and after that, I'll give back the microphone to meow who will guide you through a bit of solidity and we can have some fun there with the new applications that we're going to build. All right, so I'm going to share my screen. I hope you guys can see me. Here we go.
00:01:00.240 - 00:01:38.810, Speaker C: Hello, everyone. I'm francesco, founder of Superfluid. So Superfluid is basically an application that allows us to create digitally native programmable cash flows. So this is a very new thing in Ethereum whereby we can create recurring payments. We can create cash flows natively on chain using smart contracts. So what we do at Superfluid is basically streaming money, so transferring money from one account to another over time without the need for recurring transactions. And by transferring money every second.
00:01:38.810 - 00:02:22.934, Speaker C: We do this without capital lockup, which means that users funds aren't locked inside a contract, but rather are completely fluid and can move around in a very capital efficient way. And we have programmability built into our contracts. And what this means is that you can basically build DeFi like applications that use streams natively. And I'll show you a bit later what that means. So why are we doing this? So, as you all know, the Internet is information. What blockchain is the value, right? Blockchains are meant to transfer value. And we've seen great things happen with people exploring the blockchain and creating things like DeFi, NFTs and all sorts of other applications.
00:02:22.934 - 00:03:26.186, Speaker C: But at the same time, we haven't solved something very simple, which is the fact that services flow in real time from the provider to the client. Right? So when you subscribe to Netflix, you start enjoying it every second, right. You don't have a kind of chunky experience, but payments are still chunky. So you subscribe to Netflix, you watch videos all month, and then you pay at the end of the month. Now, why is there this disconnection between how services flow and how payments are done? Well, we believe it's because we're still using antiquated rails, but with blockchain, we have the opportunity to rebuild those rails from scratch. Right? And this is what we're doing with Superfluid, where we're building basically a new kind of money with a new kind of way of transferring it, which is money streaming. So money streaming is basically a frictionless connection and it's basically an open ended one, which means when you open a stream to a counterparty, you make one on chain transaction and this transaction initiates a transfer which goes on forever or until you run out of funds.
00:03:26.186 - 00:04:19.838, Speaker C: So every second your account will tick down and your counterparty's account will tick up. So funds are transferred effectively at every block. Now, it's a very interesting frame from an economic point of view because you have a direct connection between value transfer and service provision. If I'm working for someone and they pay me at the end of the month, I will always have this risk that they don't actually pay me at the end of the month, right? And then in that case, I've worked for a full month for free. But if they're paying me every second, then as soon as they stop paying me, I can stop working because the value transfer and the service provision are linked directly. And this is great for all those services where there is risk, right? And obviously in a global market, there are risks. So by using something like Superfluid streams, you can effectively remove delays in payment.
00:04:19.838 - 00:04:51.750, Speaker C: Right? You never get paid late because you're getting paid every second. There's no risk in not getting paid because you know exactly when you stop getting paid. And there are no intermediaries, which means nobody can block the payment except for you and the sender. And this, obviously, in the context of blockchains is very common. But as you can imagine, in traditional finance, it's very common for an intermediary to freeze a payment. Now, this can never happen on the blockchain. So how does superfluid work? Well, Superfluid basically uses a blockchain to its full extent.
00:04:51.750 - 00:05:34.626, Speaker C: Not only do we store data on chain, but we also use the clock that's present in the blockchain. And by unifying the clock with the data we have, we can then calculate users balances. And because calculations are free when you query them, we can have basically balances which update in real time every block without needing to pay for gas. So because of this, when you make a transaction to open a stream, that's the only gas you will ever pay. After this money will basically transfer itself for free with no transactions needed. Now, this might sound a bit crazy, but I invite you all to go and try it and you'll see that it actually works. So how superfluid works is through super tokens.
00:05:34.626 - 00:06:06.434, Speaker C: So super tokens are an extended version of ERC 20 that enables these real time functionalities. And these functionalities are organized in an agreement library. The first agreement that we built is called the Constant Flow Agreement, or CFA. And that's what we will be showcasing today. And it's basically streaming money. But we also have another functionality that allows you to send money to lots of different people, which is very useful in certain circumstances. You'll also see this concept of the Superfluid host coming up quite often.
00:06:06.434 - 00:06:58.914, Speaker C: And this is basically the brain of superfluid. It's one single big contract which handles all these complex interactions. So programmability in Superfluid is something you have to wrap your head around. So it's a bit different to building a normal smart contract. When you build a normal smart contract, your user interacts with your application and only in those moments your state changes, right? If nobody does anything, the state doesn't change. Now, in the case of Superfluid, it's different because if somebody opens a stream to your application, your application's balance is ticking up every second, right? So you have to build your application to take into account real time balances. You have to build the application to take into account the lifecycle of a stream which is started, can be updated, and can be terminated, right? But you can build very interesting things.
00:06:58.914 - 00:07:39.354, Speaker C: So for example, you can build a super app. This is how we call these contracts that react to streams, that receives streams and opens streams of its own. And the very interesting thing is that if you're opening and sending a stream at the same time, you can do this without needing any deposits. So you can potentially build an application which handles millions of dollars in volume but has zero deposits. And that's something that's very unique to how superfluid is built. And this is to give you an idea of how superfluid apps work. So we have super apps which basically have these three functions which trigger themselves when a stream is open, updated or terminated.
00:07:39.354 - 00:08:10.370, Speaker C: And then in the front end you have a very simple SDK to open streams. I invite everybody to go and try it. So just go to app Superfluid Finance, I'll show it later as well. And you can basically open streams, close them, update them, and do all the things I talked about today. So for this hackathon, we have $12,000 in bounties. You can find more information at hack superfluid finance. So you can see there the details of this, but suffice to say, we're very excited to see what you build.
00:08:10.370 - 00:08:42.260, Speaker C: We have a prize for everyone. So apart from this, there's also $8,000 if you use Die, which were announced yesterday by MakerDAO. So we invite everybody to have a look at our bounties and come and build something really cool. So thanks a lot for if online for having us. And now I will pass it to NIAO who will start teaching you a bit of how to build a super app. Okay.
00:08:42.790 - 00:09:13.354, Speaker B: Thanks, Francesco. What I'm going to do now is to create a super app live. So first we need to go to the remix Ethereum.org. It's a very nice in browser ID where you can create your own contracts and deploy everything is building. It's great. So once you are there, let's create a new contract. Let's call it simple stream swap.
00:09:13.354 - 00:10:14.110, Speaker B: So what I want to achieve here is to create a streaming swap system that exchange one token for the other in streams without yet the liquidity provider logic for simplicity. It's something for you to figure out later. But we'll just demo you here how easy it is to create a programmable super app. So let's create this and let me copy paste the first part. First you need to include all the superfluid related contracts. So as you can see here, we are including the Isuperfluid, the host contract, the Super Token interface which is an extension of ERC 20 and the way to interact with agreement, the super agreement and a bunch of definition files. So it's all available through the Isuperfluid solidity.
00:10:14.110 - 00:11:10.530, Speaker B: So our repo, by the way, is at Superfluid Finance Protocolmonorepo on GitHub.com. There you can see all our packages including the Ethereum contract, including the JavaScript SDK Provide, and including the subgraph mappings and schemas we shipped there's, a couple of other headers included. Then next we're going to create actual super app. So let me just get the second part of it. There you go. So what it does is that it create a new solidity contract which is going to be a super app. It inherits the super app base, it does a bunch of boilerplate for you so that you don't need to write longer contract than necessary.
00:11:10.530 - 00:11:54.514, Speaker B: Within this contract we define something about the constant flow agreement which Francesco mentioned and this is the ID of it. And we have also stored the relevant host contract, where is it during the construction phase. And you select also the Super Token One and Super Token Two. So the idea is that this contract is a simple stream swap demo. Exchange your token one for token two and vice versa. So in order to do that, you have to provide two tokens during the construction phase. And there's a bunch of other nitty gritty here.
00:11:54.514 - 00:12:44.042, Speaker B: You can check out our docs Superfluid Finance, find out why we're configured World. And in the end, what you do is register the app with the configuration you selected and after that that's done. Then you have a super app but it's not complete yet. Next is to create the callbacks, right? So let me copy paste the callbacks. So we are going to define two callbacks for this demo. One is After Agreement created, meaning that when you send a stream to this contract, it will Do Exchange. It's defined in the underscore Do Exchange function.
00:12:44.042 - 00:13:16.178, Speaker B: I will explain that in a bit. And the counterpart of this function is called After Agreement Terminated. So when you delete the stream, it will then stop exchange. So in a do exchange, I will show you. What it does is that select the other token. So if you send a stream in Token One, it will select the Token Two, vice versa. And once you know the token, then we also need to know the info about the incoming stream.
00:13:16.178 - 00:14:31.674, Speaker B: So we need to know which user is sending it and what's the flow rate. Flow rate is defined as amount of token per second, and it is with 18 decimals accuracy. Then in the end, you can create the flow. So there are a little bit code here, but in essence, what it does is that it calls a host core agreement function and it creates flow with the output token sent to the user with the same flow rate. So let's say if I send you ten die per month flow rate, I will get the ten USDC per month if I set up the token one as die and token two as USDC. So that's all it does in reverse in the termination, it does the opposite of it, which is similar here. Get the other token from token one to token two, token two, token one, the other is getting the flow rate in the end, then delete the flow.
00:14:31.674 - 00:14:38.770, Speaker B: So, all in all, there's 188 lines of code. Let's do a live deployment.
00:14:41.670 - 00:14:42.660, Speaker C: All right.
00:14:45.670 - 00:15:43.876, Speaker B: Inject the web3, in order to do the deployment, we need to know the host contract address, select the simple stream swap deploy. In order to know the addresses, we come to this docs, superfluid finance. There's a section called network directory. So I go to the section about Gurley, I select host, and then I select the Fdix as token one, and I select the Fusdcx as token two. That's all I need. And double check host address girly. That's all I do.
00:15:43.876 - 00:16:15.600, Speaker B: A transact confirm. Let's wait for girly to input it faster. Let's put tiny here. Sorry, deployed. So now we have the address ready. So I'll hand over to Francesco to continue the rest of the demo. Meanwhile, I will found the token.
00:16:15.600 - 00:16:20.000, Speaker B: Yes, I will put this to the chat.
00:16:27.930 - 00:16:30.342, Speaker C: All right. You see that? Yeah.
00:16:30.476 - 00:16:32.774, Speaker B: I'll stop sharing, I'll find the contract.
00:16:32.822 - 00:17:21.558, Speaker C: Meanwhile. Okay, everyone, so we have an exchange deployed. So basically, this exchange is going to swap any dai we send to it for USDC that we sent for USDC that now is going to deposit in. So again, as NIAO said, it doesn't have any LP logic. So basically, if it runs out of funds, it will break, right? So this is not a complete contract, it's not finished, it's not perfect, but it shows kind of how you can use this. So obviously, the simplest way for me to do this, this is our dashboard unconnected on Gurley. The simplest way would simply be to input the address here, select die and open a string, right? But we're developers.
00:17:21.558 - 00:17:52.610, Speaker C: That's Laura. So let's do it using our SDK. It's going to do exactly the same thing, but we can do it through JavaScript. So I've already created superfluid object here, so I can basically go and now use the SDK to create the stream. So we're going to create a stream of dai towards the contract. And if it all works, we will receive a stream of USDC. So the first thing I'm going to do is create a user object.
00:17:52.610 - 00:18:41.394, Speaker C: So the user object is basically a way for us to interface with superfluid through a user entity, right? So you have a user and then your user does things. So let's see. My user equals SF user address. And here you specify the address which I already saved as a variable. And we specify the token, which we are going to put SF tokens, FX deleted it. Okay, sorry guys, my user, here we go. Okay, my user equals this.
00:18:41.394 - 00:19:12.910, Speaker C: Okay, so like this, I'm going to create a user object. Now I'm going to save the exchange in a new variable. There we go. And now we can basically create the stream. So the way we create the stream is myuser flow. Actually we want to await this because it's a promise, myuser flow. And we specify the recipient which will be the exchange and a flow rate.
00:19:12.910 - 00:19:41.398, Speaker C: Now like meow mentioned before, the flow rate is defined is basically tokens per second with 18 decimals. So you have to do a bit of calculation here to figure it out. So we're going to send $3,000 per month. Per month means we divide by 30 days, 24 hours, 60 minutes, 60 seconds. But then we multiply by 18 decimals. Okay, so if that looks weird it is, but you'll get used to it. Then we go to fix zero.
00:19:41.398 - 00:20:02.990, Speaker C: This is going to remove any decimals that could be caused by the division. And then we take it to string. And this is because it's a big number. Now with this we are basically going to create the stream. Pray it works. Okay. It should trigger my MetaMask confirm.
00:20:02.990 - 00:20:27.954, Speaker C: And let's see. Now if everything goes well, our streams should appear here. Let's see, the subgraph just went down just before the demo. So I hope it's working now. But if it's not, we have someone to blame. Okay, it worked. That's lucky.
00:20:27.954 - 00:20:50.070, Speaker C: Okay, so that worked. As you can see, I'm now sending right, we have the minus sign. So I'm sending Dai and I'm receiving back USDC. And this happened through the contract that WeoW just deployed. So as you can see, very simple contract. You can do this too, right? This is very simple and I should now be basically receiving USDC. Now let's do the opposite.
00:20:50.070 - 00:21:19.170, Speaker C: Let's go and close the stream. Now closing the stream is pretty much the same code, except we set the flow rate to zero. Now by setting it to zero, it's a shorthand and it will basically delete the flow. So let's see if this works. Then we should be able to see the stream getting closed and yeah, that's it. It was quite easy. So other things you can do with the user object is get the details.
00:21:19.170 - 00:21:52.238, Speaker C: So if you get the details, basically it will give you back some information about that account. Right? At this point in time I don't have any flows, so it doesn't show anything. But if you did have flows, it would show all of them here for that specific token. And remember that users are token defined. So if you have more than one token, you have to create different user objects. So yeah, that was our demo. There's a lot more you can learn if you go to our Docs, which are here, and if you go to our Hacker page.
00:21:52.238 - 00:22:44.580, Speaker C: So the Hacker page has some great resources for you to, for example, see our prizes, but also some past workshops we did, some previous ideas that were built, and you can also submit an idea for feedback. And this gets posted directly to our discord, so people can interact and find you, and maybe you can create a team of them. We'll also be hosting a brainstorming session tomorrow during our community call, so if anybody has time to join that, it's a great opportunity to meet other people that are already hacking on Superfluid and basically find people with good ideas to work with. Now, Superfluid was born out of hackathon, so don't think of it as kind of a side gig. Think of it as your first venture into web free. So I'll just check if there are any questions in the chat. I see that there are.
00:22:44.580 - 00:23:09.166, Speaker C: You can't simply stream any RC 20. Yes, correct. First you have to upgrade the token to what we call a super token, which is what happens here. So basically you input an amount and then you upgrade it. And this basically transforms the Dai into Super Dai. Let me see what else. So it is the two transactions that use gas.
00:23:09.166 - 00:23:44.382, Speaker C: Okay, Meow has actually already answered all of these. I won't waste time. How does superfluid make money? Is there a platform fee? No, everything is free, so don't worry. There's no platform fee. Obviously there are gas fees, but on Matic and Polygon Xdai very cheap, so you shouldn't have to worry about those. Stadolf ETH asks us, since Superfluid is not changing any state, I assume the stream is just the computation of a balance in time. And super tokens are somewhat locking funds and transferring once the stream terminates? Yes and no.
00:23:44.382 - 00:24:19.342, Speaker C: So Superfluid doesn't ever transfer the funds or they're always transferred. There are different schools of thought here, but for all effects, the settlement is every second. So every second the funds are transferred, but it is happening without any gas. But it is a computation. So you're correct on how it works, but there is no transfer at the end. How does superfluid make money? We don't make money, we spend money. We are very good at spending less of money.
00:24:19.342 - 00:25:02.478, Speaker C: So at the moment we have no business model, but we still manage to survive. Okay, does anybody else have any questions? Anything we didn't cover here in the dashboard you can see more things, like, for example, your activities. These are all the streams you opened. The dashboard is a very good tool as you develop to test your app. If you need to open a stream towards it, the recipient can also close a stream. Boba was asking so if the recipient closes the stream actually, that's a very good question. Our code is currently not tested for that.
00:25:02.478 - 00:25:36.278, Speaker C: And I know for a fact that it will break if the receiver closes the stream in this case. So obviously, in the example we wrote, right, I'm sending Dai and I'm receiving back USDC. So if I close the die stream, then the contract will function properly. If I close the USDC stream, then an unhandled error will break the contract. So that was a very good catch bubble. I hope nobody would notice that we built the contract as a proof of concept. It's not finished and we're looking forward to someone finishing that.
00:25:36.278 - 00:26:18.630, Speaker C: But this is just an example, right? You can build anything at the hackathon. It doesn't have to be this. Is it possible to reverse a stream? The flow can go either way based on a contract's state. No, you can't do this because that would basically give the counterparty a way to pull funds from you. What you can do is that both parties can open a stream at the same time to each other, and based on which one is higher, the funds will go in one direction or the other. So if I'm sending meow $100 and he's sending me 50, it's as if I was sending him 50, right? But if he updates his stream to send 150, then he's sending me 50. Right? So based on that, you can kind of juggle these things.
00:26:18.780 - 00:26:35.530, Speaker B: I should also mention that we have a community call on Thursday and we will have a brainstorming session about all kinds of ideas. I think those questions and ideas are perfect for the community call. So please come to the where do we can people find about community call?
00:26:35.680 - 00:27:06.950, Speaker C: So for the community call, the best place is to join our discord, which we will link here. And there is an announcement there. So Simon is asking the brain has an index of all contracts or something and transfers from F token map address amount to F token address amount in the brain contract. No, it doesn't transfer. They're calculated. That's why they're cheap, that's why there's no gas. But you don't really need to understand it to use it.
00:27:06.950 - 00:27:23.974, Speaker C: I can assure you it works very well. The smart contracts are written very well. They're audited. They've been battle tested over the last five months. So Yad is asking if the contract is decentralized. Yes, it's decentralized. There are no blacklists.
00:27:23.974 - 00:27:51.860, Speaker C: Anybody can use superfluid. It's completely open to use. We do currently ask people to submit their apps before just so that we can help review them and audit them. And this has ensured that not too many funds were lost. So it's obviously very experimental. And you do have to be careful when writing smart contracts, so keep that in mind. All right.
00:27:51.860 - 00:28:56.290, Speaker C: Looking forward to seeing everyone in our Discord. And I'll leave here also the other link, which is Hack Superfluid Finance, where you can find all our resources for the hackathon and looking forward to know you guys build on Superfluid. So far there's been some pretty cool applications being built and some very important teams in the space like MakerDAO and Connect and Delphi Digital are getting paid their salaries and streams. And this means if you build an application which uses streams, they're going to be your first users, right? So you have respected members of the community that have their eyes set on everything built on Superfluid and they're just waiting for an opportunity to send those streams somewhere, right. They're receiving their salary. And the really cool thing you can do with Superfluid is that as you receive funds, you can also send them so as they get paid every second from their employer, they're able to, for example, stream into your apps, right. So whatever you build, you have a captive audience.
00:28:56.290 - 00:29:00.250, Speaker C: So really looking forward to see what you guys cook up during the hackathon.
00:29:04.010 - 00:29:35.550, Speaker A: Thanks so much, Brian and meow. That was a really great session. You managed to condense a lot of information in 30 minutes and get through all of the questions that came through. If you want to get in contact with the Superfluid team, they've dropped their personal Discord in the chat and they are also in the ETH Global ETH online Discord. And please don't hesitate to reach out with your questions and connect with the team. Thanks so much fanimiel and thanks everyone for joining.
00:29:36.210 - 00:29:38.970, Speaker C: Thank you guys. See you in discord.
