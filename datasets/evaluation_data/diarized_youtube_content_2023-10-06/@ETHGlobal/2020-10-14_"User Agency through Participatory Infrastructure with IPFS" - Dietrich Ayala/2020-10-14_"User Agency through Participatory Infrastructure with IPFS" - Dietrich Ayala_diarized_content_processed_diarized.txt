00:00:00.090 - 00:00:13.920, Speaker A: Presentation. But thank you so much. I hope everyone watching. If you have any more questions for Michael, you can find Pocket Network in the E Global Discord. And of course, you can ask questions in the chat as well.
00:00:14.690 - 00:00:18.190, Speaker B: Okay, thank you.
00:00:18.340 - 00:00:44.060, Speaker A: Thanks, Michael. All right, so next up, the last talk of the day. I'd like to welcome Dietrich from protocol labs. Dietrich is going to talk about participatory infrastructure with IPFS. We're very glad to have him here to give a great kind of last talk of the day and wrap it up. So, Dietrich, I'll pass it over to you and let you take it away here.
00:00:45.550 - 00:01:14.162, Speaker B: Hello, everybody. Thanks for the intro and thanks for having me here. It sounds like a long day of interesting topics. I cut the last bit of Michael's there. It's great to be here talking to Ethereum folks once again. So real quick. I'm dietrich ayala I work on that BFS project at actually first I used to work at Mozilla for many, many years.
00:01:14.162 - 00:02:14.054, Speaker B: And while I was there, I worked on a project called Libdweb, trying to bring some of these technologies and make them enabled at the very edge in the user agent itself inside browsers. And in that Libdo project, I ended up going to Ethereum Defcon Four in Prague I think it was, and had a talk there. And it was really great to be able to get introduced to some of the folks in the community and meet some of the projects that really get a sense of the values, intent and excitement of all you all. So now I've been at Protocol Labs for over a year and a half now, working on IPFS, and I'm going to talk to you today. They said there's a mixed audience of people new to the space and people not new to the space. So a quick introduction to IPFS, the problems that we're trying to solve, a bit about the side effects that I see that these types of architectures and infrastructures have on user agency and what it means when we make these types of infrastructure changes. But first, a real quick run through IPFS, the web today.
00:02:14.054 - 00:02:46.154, Speaker B: One of the reasons why a lot of us are here and working on these types of projects is because there are a bunch of problems from centralization, which has a bunch of negative side effects on our ability, our user agency on the internet, how we interact with each other as individuals and as organizations. Some of the fragility and resiliency of the web. Ultimately, we don't end up owning our own experiences so much. Some of the problems that we're trying to solve are around access from various different places. Might not have the same type of access that we have in Western countries. I'm from the US. Censorship, which is a major problem in many countries.
00:02:46.154 - 00:03:45.038, Speaker B: And I've spent some time living around in different parts of the world where it's more or less of a problem that you really do feel on a regular basis. Huge inefficiencies in network access, security models and trust models. That don't necessarily match the use cases that we have developed 30 years ago or plus years ago, organically grown and now not necessarily being growing and adapting to the use cases that we have today. And then things that don't work offline or even in disconnected networks like for example, doing this talk, and if I was doing it from a Google deck and that deck went down, or that service went down, following along, wouldn't be able to do so. There's no technical reasons why we can't have this type of local network collaboration offline collaboration, but I'm really interested in seeing those capabilities develop. Things like internet shutoffs, iran, Egypt, Myanmar and parts of India right now having really severe access issues. And then censorship.
00:03:45.038 - 00:04:50.226, Speaker B: Of course, one of the biggest groups of people using IPFS right now, well, in the last couple of years were people trying to access Wikipedia in Turkey. I went to Istanbul and you can see there are stencils of Wikipedia pages on the streets there, which was kind of fascinating and really shows how much of a public issue was. And then we have a really big group of users in China Matters news using IPFS as the last mile solution to make sure that they have access to external news sources, information. And I lived in Thailand for quite some time where you regularly see Wikipedia pages that just give you the royal seal of the censorship bureau of that country there. So it's a real thing that does affect a lot of people. So enter IPFS, a project and protocol that's used by a lot of programs and projects in the ethereum community because of its immutable addressing and the storage flexibility that it provides. Some of the hallmarks of this protocol addressing things in the web today is done by location, where something is, which server does it reside on, and which ultimately path on that server oftentimes.
00:04:50.226 - 00:05:54.622, Speaker B: And whereas IPFS addresses things by the unique signature of the contents of the data that you're asking for cryptographic verifiability built into the protocol through that address when that address is unique signature of the data that you're requesting. Is very difficult or not impossible to fake that something is what it is and that's built into the way that you request something itself. So if you trust the source that you got the URL from or the address from, then you can trust that that data will and verify that that data will not be modified in transport. And then transport agnostic peer to pair not working. So built on top of Lib PDP, although you can swap out other transport libraries, but Lib PDP providing an abstraction layer across whatever transports and common transports like TCP, UDP, et cetera. But also some groups that we're working with who've done things like develop a PDP transport for things like COAP or bluetooth other ones. And one of the most important ones that differentiates IPFS from the web of today is the idea of a contextual trust model.
00:05:54.622 - 00:06:42.714, Speaker B: So trust model that's not enforced necessarily by tied between this intersection of SSL and DNS. Talking really quickly if you're new to these types of architectural network architectures. HP today working requesting from the web browser or native application or whatever the client is to a centralized server. Whereas IPFS this data is being transferred between the different peers that are participating in the network at any given time. And that number of peers can be determined by and specific to the application that's being used at the time. So the resilience and robustness network travels along with the popularity and the user base itself. The unique Identifiers the way that we create addresses you may be familiar with URLs, where you have a domain name followed by a file path preceded by a scheme.
00:06:42.714 - 00:07:46.182, Speaker B: In IPFS, we hash the data of the file that you want to add, say cat PNG and we get the unique signature of that set of bits, create a content Identifier that you can use to be able to address or request that data. If the data changes, thus does the unique identifier, so the address itself changes. These are called CIDs when transferring data. So we take that cat picture and we split it up into a whole bunch of logical bits. And those bits can then be shared by many different participants in the network as opposed to being only requested and received by one the location based addressing. So today we have request something by where it know through DNS you find out the IP address of where this data that you're looking for resides. That request goes to a remote server that resolves eventually to a machine that responds with the spytes with Ipfest, when you're requesting something by its content, a whole bunch of different peers in the network might actually have that data who are not the publisher.
00:07:46.182 - 00:08:46.030, Speaker B: But because of the cryptographic, verifiability means that you're okay receiving that data from those other participants in the network, even though they are not the originators of that data. And ultimately, even if that publisher goes offline, some of that data might still be available. Some of those other participants who want to continue, who are getting utility out of whatever the application or service or data was and are keeping it online. So what does this have to do with infrastructure user agency? This infrastructure at a pretty high level, but one of the things that you see here is that there's a direct relationship between the person requesting the data and the person, entity or project that's serving that data. But come on, let's be honest, it actually looks like in the centralized web a whole lot more like this, where you're requesting this data from an entity or project. And the more that the number of requests go up and the more number of users that you actually have in your project, the infrastructure complexity increases and increases and increases. And this has some interesting side effects.
00:08:46.030 - 00:09:56.166, Speaker B: Raising the barrier to entry for innovators, for people who want to enter new markets, because they will have to be able to understand what the scale is going to be, make projections on that and build up a relevant amount of infrastructure themselves to be able to support that with side effect. Then again, of that there are few people as needs, user needs increase for a given type of service. There are fewer people who are able to actually provide that service because of the overhead required to actually be able to get into the game, which means there's less competition, which then means there is less innovation, a negative feedback loop of a vicious nature. But one of the other parts of this dynamic means that the power is in the hands ultimately of the publisher. With Web Two, it's a control point over the people that are using a service. For example, if that publisher goes out of business and the service goes offline, the users have no choice but to migrate to something else. Or if it gets bought by a bigger fish, you are now a user of maybe a company that you don't agree with, or you don't like their service, or what they're going to do to the service that you previously liked.
00:09:56.166 - 00:10:54.634, Speaker B: Aside from all the types of problems that I mentioned earlier, which are still subject to ultimately the publishers hold all the control in Web Two. They are the source of often the business logic where your data is stored, which opens you up to other problems such as surveillance and tracking that maybe you didn't realize you opted into. And they also have the burden of that infrastructure, but ultimately they pretty much have 100% of the decision making in applications today. In the centralized web, users have only one choice, which is to leave to go use a different service. If one exists, very little choice over how their data is treated, the ultimate longevity of the service or product. They may have their own business or livelihood it may be dependent upon. With IPFS, aside from the type of things that I talked about before, it does change the nature of this to some extent.
00:10:54.634 - 00:12:11.362, Speaker B: So you are, as I said, getting this data from other sources other than the original publisher and that publisher goes away. That data can still be there, the infrastructure that runs the application can still be there. The lifetime of these applications end up being more dependent on the user than on the publisher. In this type of model, a lot of the app logic is getting pushed out to the edges more, out to the clients more and we start to see these layers collapse. As Michael was talking about the last talk a little bit that as these layers start to mature, they also start to condense a little bit, they get more and more abstracted away and more and more of this ends up being in the hands of end users. The infrastructure both from deployment and delivery ends up being more and more user participatory as opposed solely being executed on the devices of the publisher. This is a change in how we think about things like value capture, how we think about what we invest in, how we think about what the ultimate impact of our business efforts are on the behalf of our users.
00:12:11.362 - 00:13:15.946, Speaker B: We're seeing more cooperative computing come into play as web3 layers start to mature between things. Like one of the things I'm looking at right now is with the advent of IPFS and then Filecoin suite to launch how we create cooperative organizations like DAOs around ensuring that data, valuable data and services can stay online. So where's IPFS at today? A quick run through the IPFS stack is composed of a number of different pieces from the definition of data to name resolution and finding and discovery of data, the addressing of data, and then the network infrastructure to be able to support the delivery of this data and these applications between peers. And that's what Libgdp does. An IPFS node running node does a number of different things. If you're running a node right now, typically this is a node that runs on your computer or on servers that you're running on behalf of other people. Either a pinning service or you're running in order to keep the data for your own application and some users online or keep it persisted anyway.
00:13:15.946 - 00:14:03.718, Speaker B: Right now in a running node, our default peer count is 900 peer connections at a given time. This is a transient thing, depending on the use case. You can turn that up or down. Obviously on mobile devices, keeping 900 persistent TCP connections is not going to be a viable thing to do from a device constraints, bandwidth usage, or battery lifetime. So we turn those kinds of things down. We're seeing a lot of different applications experiment with the boundaries between what does Ipfest light client kind of mean? How do you run as native as possible, a node inside of a mobile app or inside of a web page as well? Nodes can vary a lot depending on how much of the IPFS protocol and toolkit that they have implemented. We have full nodes.
00:14:03.718 - 00:15:05.658, Speaker B: Our primary implementation is in Go Go IPFS, which has a full direct connection to the DHD, to the peer to peer network. But we also have JavaScript implementations and a lot of different HTP clients and partial implementations in a number of different languages like Rust and Python and others that various parts of the community are supporting. The node deals with a few different things. It does things like manage keys for you, manage your communication between different peers, doing things like managing the peer book. So identifying which peers better or worse, connectivity with or use often or less often syncing data between those peers and then supporting the local apps that are running. So in the case of DApps being a node that does the syncing and requesting, pulling, fetching and publishing of the data that the DAP is interacting with, the easy way to get started downloading IPS Desktop this is a desktop electrode application that spins up a Go IPFS node. Gives you a little bit of an easy way to be able to start, stop and see the status of the IPFS node.
00:15:05.658 - 00:16:04.610, Speaker B: The IPFS CLI is available in a bunch of different flavors in a bunch of different places. Pretty easy to install and get started. At this point, the CLI has a number of different commands that can give you a way to explore what the various components the tools in this toolbox, from a protocol standpoint, offer you as a developer for how to integrate with your applications and be able to understand what type of communication is happening and running on a regular basis. We run HTP gateways, so we need to be able to allow HTP applications to be able to access data, publish data on the IPFS PDP network. But also some companies like Cloudflare run a large gateway as well. And we have a public gateway checker page where you can see and register a gateway that you're running. Obviously your mileage may vary, so we do post things like capabilities, level of security, verifiability, and also performance for some of these gateways.
00:16:04.610 - 00:16:47.626, Speaker B: But anytime you're not running that node yourself, you are delegating that trust to that other organization or other node. IPFS Companion is a browser extension that allows you ease of access from web applications to your local node that you're running. Something that I didn't add any slides for here, but we do have a couple of different interesting things with regards to browsers. In Opera on Android, you can actually use Ipfest pretty much directly. It talks to an HTP gateway, but you can actually use the IPFS address there. And in Brave, if you install Brave nightly browser right now and you go to About Flags, you can enable native IPFS support, which works kind of like their Tor support does. So you enable IPFS.
00:16:47.626 - 00:17:45.066, Speaker B: You encounter an IPFS address and asks you would you like to run a local node? And it'll download Goips and run and manage that node locally for you directly from within the browser. So this is something that we're hoping to ship with them in a release version of Brave sometime later this year. So pretty exciting. JavaScript IPFS JS IPFS is one of the ways that you can easily access IPFS and use it in your web application or node applications. So this doesn't have a full connection to the DHT, but does have a lot of ways to connect to it and to be able to connect to and manage your peers that your applications connect to. One of the things that we've done recently as applications are starting to use IPFS more and more, especially in web applications. If you open up two different tabs and each one uses Gsipfs right now, it would by default create a IPS fest node inside each one of those tabs, which isn't really sustainable if you have an application where your users open up multiple tabs.
00:17:45.066 - 00:18:35.774, Speaker B: So we have a way to be able to use shared workers now so that you can have one JS IPFS node running in the browser that's shared across multiple tabs of the same origin. We're working on making it work across origin as well. So you basically have a single IPFS service running inside the browser at the JavaScript level that different web pages can share. So that should make things both more performant and less resource intensive. As the ecosystem has grown and adoption of IPFS has grown, there are a number of different toolkits and frameworks you might have seen. Some of these three box is built on top of IPFS and it provides things like data storage, identity abstractions, textiles, a set of developer tools on top of IPFS that offer a couple of different ways to be able to utilize higher application level patterns instead of interacting directly at the lower level. Protocol.
00:18:35.774 - 00:20:01.660, Speaker B: And then Orbitb is a database abstraction layer over IPFS that allows you to work with dynamic data, more dynamically, and also have access to abstractions like appendall need, log and things like that. We've heard a little bit about Inferior today. Obviously one of the biggest services service providers in this space and a group that we work really closely with to be able to make sure they have the latest versions by PFS and that we're meeting the needs of their users as well. Pinata and Temporal are other services that provide IPFS pinning. They will keep your data up and available, as well as a number of other different things, providing management tools and different debugging and data archiving tools as well. One thing that we've seen start to emerge is more and more again, like Michael said in the last talk, one of the missing pieces are around CI automation and tooling. So how do you make it as easy as possible to be able to deploy our web Three applications? How do we make it as easy as possible to be able to manage them and to be able to get the same benefits that we get from a much more mature web Two infrastructure? And Fleek is one of the companies that we've been working a bunch with this year who's really done this and made it easy to be able to hook into your existing CI and CD using existing toolkits and frameworks supporting those, as well as a number of different source code management systems as well.
00:20:01.660 - 00:21:03.526, Speaker B: Name resolution is again like as you saw earlier. The Ipfest CID is not nearly as user friendly to look at as a regular textual name in a language that we understand natively. However, there are a bunch of ways to approach this. We have IPS is the Interplanery naming system, which is a way to be able to map a key to a IPFS CID. And then services like Unstoppable Domains and ENS are innovating in a bunch of different ways, providing different services to allow you to resolve human readable names to a IPFS CID and to be able to manage the dynamic updating of that content. And companies like this are also integrating in a lot of ways some of the ENS and unstoppable services to make it easier for developers and businesses to be able to ship. So if you're interested in learning more, that was a really fast tour through some introductory IP Fest stuff, how IPFS works, some of the benefits, why it matters from a larger user agency perspective.
00:21:03.526 - 00:22:02.978, Speaker B: One of the things that these transitioning architectures and changing the paradigm to a more distributed and decentralized architecture, how that actually benefits end users in a way that changes both how we do business and both the longevity and availability of the services that we want to provide actual people. So you can follow along on Twitter IP Fest. Our forums are a fantastic place to ask questions if you are building your Web Three application. We monitor the forums pretty closely now to be able to ensure that we have a really fast response. We have folks that are dedicated to answering your questions there. We also have automated monitoring of the Ipfest tag on stack overflow as well to be able to make sure that we get back to folks really soon to try to close feedback loops so that if you're building stuff on top of IPFS, and you have questions or you've gone off the rails or you have a problem and you want to be able to figure out how to move forward, that we can get help to you as soon as possible. So thanks everybody.
00:22:02.978 - 00:22:13.318, Speaker B: Thanks you all for having me and letting me speak a little at the end of your event. If you have questions, definitely feel free to reach out. Thanks again. Great.
00:22:13.404 - 00:22:20.262, Speaker A: Thanks deutric, I actually had a couple of questions that came in from Chat. If you just got a second, I can do them right here.
00:22:20.316 - 00:23:23.440, Speaker B: Yeah, sure. Just stand by. We're having a little audio difficulty here with Josh. Just hold on one moment.
