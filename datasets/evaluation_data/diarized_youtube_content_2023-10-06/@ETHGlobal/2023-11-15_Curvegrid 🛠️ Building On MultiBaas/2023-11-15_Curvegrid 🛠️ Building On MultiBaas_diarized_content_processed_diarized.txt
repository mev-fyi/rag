00:00:23.770 - 00:00:41.106, Speaker A: Hi, my name is Jeff Wentworth. I'm a co founder of Curvegrid. We're a blockchain middleware company based in Tokyo, Japan. Our product is multibass, which is blockchain middleware that helps you build on blockchain faster, easier, and much more cost effectively. In doing everything from scratch.
00:00:41.218 - 00:00:42.486, Speaker B: I'm going to show you today how.
00:00:42.508 - 00:00:49.854, Speaker A: To get your dap up and running on multibass and use it to build your blockchain vision. Let's dive in.
00:00:49.932 - 00:01:15.506, Speaker C: It basically, multibas is blockchain middleware. That makes it fast, easy, and cost effective to build on many different EVM blockchain platforms. It sits between your DAP and the blockchain. You can use all of it, or you can use some of it. You can build a front end app on top of it. You can build a backend app or both. So your typical Dap stack looks something like this.
00:01:15.506 - 00:01:25.190, Speaker C: Essentially, multibas sits above the blockchain node provider and provides a number of different facilities for you to interact with the blockchain.
00:01:25.850 - 00:02:06.700, Speaker B: Okay, so here we are@curvegrid.com. The first thing we're going to do is click get started, and that's going to take us to the Curvegrid console. Now, if we have an account, we can log in here, or we can sign up either with an email address and password or one of the social accounts. Let's go ahead and log in. Now, the Curvegrid console is your platform to deploy new multibask deployments. And typically you would have one or more deployments for development, test and production with different permissions and different access controls. So let's go ahead and create a new deployment.
00:02:06.700 - 00:03:00.700, Speaker B: First I'm going to give it a label and description, and then I'm going to pick a network and we support a whole range of different blockchain networks here. I'm going to pick the Curvegrid test network, which is our own fast, cheap, and cheerful private test network shared amongst all of our customers. I'm going to select the free type of deployment and create. Once I click create, we're going to see the deployment is being created here and just wait for a moment for it to be ready. While we're doing that, you can see that at the Curvegrid console level, I can come in here and add additional users and manage my subscriptions and check my deployments. Okay, here we go. It's being created.
00:03:00.700 - 00:03:34.852, Speaker B: So I'm going to click the link here to log in, and I'm going to be taken to multibass. There we are. It's as easy as that. So this is multibas and this is the multibas web UI which you use to manage the multibas blockchain middleware. Let's take a quick tour around it to help orient yourselves. At the top here we've got the menu bar, of course, and we have on chain and contracts as well as our library smart contracts. We'll talk about that blockchain and cloud wallets in just a minute.
00:03:34.852 - 00:04:11.408, Speaker B: First, let's go to admin. You can see there's a place to manage your users, your groups, API keys, core's origins and audit log. Let's take a look at the API keys first, because what we've done is we've created a deployment on a blockchain network that we don't yet have connected to our web three wallet. That would be the Curvegrid test network. And so we're going to go here first to admin API keys, and I can also get to it from my user's API keys here. And I'm going to click new key. I'm going to select the web three key type and give it a label.
00:04:11.408 - 00:04:35.176, Speaker B: Web three click create. And there we go. Now I can either copy and paste this into my web three wallet manually, or simply click configure my wallet. I see the pop up here. I click approve switch network and there we go. Now I'm on the Curvegrid test network with my demo account. Let's move now to contracts.
00:04:35.176 - 00:05:25.228, Speaker B: We have two kinds of contract pages here. The first is our library of contracts that have been uploaded to multibas, ready for deployment or linking to an existing onchain contract, and the second is on chain contracts. So let's look at the library first. When I first set up a new multibas deployment, I have a number of contracts preloaded into the library here. My ERC 1155 20 and 721 interface contracts multitoken, which is a sample full featured ERC 20 token, my Gnosis multisig wallet, and the witness contract. What you can see here in my for example, ERc 721 interface contract is it lists all of my different events along with their parameters and my functions. Here at the bottom both read and write.
00:05:25.228 - 00:06:03.380, Speaker B: If I toggle the call function button, I can enter an address and the inputs to that function and call that function on the blockchain. I can also view the ABI and see any on chain contracts that I already have deployed. So let's go ahead and add a new contract to the library. First I click the plus button and then I'm presented with a series of choices. I can either upload from source code from the ABI, or I can view details about how to use our multibas hard hat plugin. So let's first try from source code. I click the source code button, I click to upload a file.
00:06:03.380 - 00:06:26.972, Speaker B: And then I select my smart contract. Here I have the wrapped ether smart contract. I open it up, it gets compiled in browser, and then here it is, ready to upload to multibass. I click continue and that's it. I can see that the weft contract here is now in multibass. Let's try that again with an ABI. I've got two options for ABI.
00:06:26.972 - 00:06:59.304, Speaker B: I can either take soul C compiler combined output, which would be done with Sol JSON command line, or I can take a hard hat compiled artifact. Let's take a hard hat compiled artifact. This would be found in the artifacts directory of any hard hat project. I'm going to give it a label, in this case spritewrite and a version 10. I'm going to click here and I'm going to select my JSON file. Go next. And there we go.
00:06:59.304 - 00:07:26.116, Speaker B: Sprite is now also in our library here. So let's try deploying a smart contract from our library. I can click the three dot menu and click deploy. I could also link an already deployed smart contract if I know the address. But I'm actually going to show you how to do this from the on chain tab. So I'm going to go to on chain the on chain page. And I don't have any contracts that have been linked or deployed here.
00:07:26.116 - 00:07:59.228, Speaker B: I'm going to click the plus button and I'm going to say deploy a new contract from library and I'm going to select sprite write, going to click continue. I need to give it a label sprite write. And I have the option to sync events or synchronize events from the blockchain. If I don't click this, I'm just interacting with the smart contract itself. I'm not able to view any of its events that have been emitted, but we definitely want to do that. So I'm going to click the sync events button. I'm going to click deploy.
00:07:59.228 - 00:08:42.136, Speaker B: And I see that I have to select an address to sign this transaction with. So I'm going to click Connect account, going to collect my demo account and click deploy. I get my metamask pop up and I confirm the transaction. And that's it. Now I've got my sprite, right contract deployed on the blockchain. Now I've got three views for Spritewrite. Here I have my overview view, which gives me my basic details about the smart contract, its label, the contract name, its address, and whether event indexing is active.
00:08:42.136 - 00:09:25.770, Speaker B: And then the contract state, which are my functions or state variables that don't take any parameters, and we're pulling this information automatically from the smart contract. So I've got owner symbol, total supply, et cetera. I also have my functions view, which gives me my read and write functions that do take parameters. Finally, I have my events view. You can see when the contract was deployed there were a number of functions, sorry, there were a number of events that were emitted within the constructor. So first the ownership was transferred to my address here, and then roles were granted. Two different roles, the admin role and a minter role to the address that deployed this.
00:09:25.770 - 00:10:30.220, Speaker B: Let's go back to functions, and I want to talk a little bit about the multibas signer selector, and in order to do that I'm going to switch over to a different multibas deployment that has a few more wallets in it. And the signer selector here you can see is complementary to my web three wallet selector of different accounts. In my multibas signer selector I have my web three accounts, my metamask and others, and I can label these. I've labeled this one main and this one demo. I also have what are called cloud wallets and these are software backed wallets that exist in Microsoft Azure and can be used to sign transactions and send them to the blockchain. Basically interact with the blockchain without the need for a web three wallet. This is great for both automation operational automation within your DAP, as well as provisioning wallets for your users.
00:10:30.220 - 00:11:12.510, Speaker B: So let's talk about cloud wallets. As I mentioned, cloud wallets exist in Microsoft Azure and are configured in multibass. If I go to the cloud wallets menu, click on configuration. I can see my cloud wallet provider configuration here. I can add a new one, entering the label client id, client secret, et cetera, and then creating one or more cloud wallets, either importing one that's already be configured in Azure or creating one here through the multibas web UI. I can also select HSM protected key for extra security and extra cost. And this is a Microsoft Azure key vault option.
00:11:12.510 - 00:12:02.440, Speaker B: Once I have a cloud wallet, it shows up in my signer selector. I can click this checkbox here to add it, and then I can use it just as I would any other web three wallet. So I've now selected the QA one cloud wallet. So let's take a look at how we actually use a cloud wallet. I'm going to come back to our contracts page here, our on chain contracts. I'm actually going to try deploying a new contract, this one from source code and I'm going to again upload it. I'm going to pick my weth nine smart contract and I'm going to click continue, I'm going to click sync events, going to call it weft nine test and I'm going to say yes, use my cloud wallet for this transaction.
00:12:02.440 - 00:12:32.644, Speaker B: Got my cloud wallet selected in the signer selector here and I'm going to click deploy. Now what did you notice? It went through right away and I didn't get a metamask pop up. That's because the signing request went through to Azure key vault. It was signed and approved there. And now my smart contract has been deployed. So I can see this is my wrapped ether on my curvegrid testnet. Of course it's not real wrapped ether, it's just my own test deployment here.
00:12:32.644 - 00:13:03.410, Speaker B: I'm going to come to the functions tab and I'm going to click write and let's try depositing some ether into it. So let's try depositing 123 way into the smart contract. Again with the QA one signer wallet selected in the signer selector here. So call function. And again instead of getting a metamask pop up, I get my speed bump here in my multibas Ui. I'm going to click confirm and I can see the transaction here.
00:13:06.100 - 00:13:06.944, Speaker C: Where that.
00:13:06.982 - 00:13:58.684, Speaker B: Deposit was actually made and I can see the deposit that was made in there. 123 wrapped ether. I could also look at that in my events. I can see the deposit was made here and if I go up to the signer selector and I copy my address, whoops, my QA one address and I come back to my functions here. And if I go balance of enter my address here, call the function, I can see 123 and it's that easy. I can also go to my cloud wallets menu and my transaction manager and I can see the previous transactions that were executed. Now if these were still in progress, I would have the option here to cancel them or to speed them up just as I would in a web three wallet like metamask.
00:13:58.684 - 00:14:24.820, Speaker B: That's it. So we've talked about web three wallets in the signer selector. We've talked about cloud wallets. There's one more type of wallet that we have access to through multibass and that's multisig or multisignature wallets. So if I click the multisig tab at the top, I get my multisig page. Let's try deploying a new multisig wallet. So I'm going to click the plus sign, I get new wallet.
00:14:24.820 - 00:15:07.588, Speaker B: I'm actually for this, going to switch to one of my web three wallets, my demo wallet here. I'm going to call it Multisig one and I'm going to start adding owner addresses. So let's add three addresses. I'm going to add main, I'm going to add my demo account and I'm going to add my QA account. Going to say I'm going to need at least two out of three confirmations. And let's click deploy wallet, get my metamask pop up, I hit confirm and my multisig wallet's deployed. Can see the address here and the label required confirmations.
00:15:07.588 - 00:15:47.684, Speaker B: I'd make changes to any of these and I can see all of my transactions here as well. So let's try putting this on chain Multisig wallet to use first. I'm going to copy the address here and then I'm going to go back to my contract library. And what we're going to try doing is we're going to try deploying a new smart contract with the Multisig wallet as the owner. So I've clicked multitoken and v 10 and I'm coming up to the three dots here and I'm clicking deploy. I'm going to paste the owner address into the owner field here. I'm going to give it a label multisig token, a name test, simple test.
00:15:47.684 - 00:16:16.190, Speaker B: Six decimal places. Then I'm going to click deploy. If I don't have a wallet selected, I get this pop up from the signer selector. I'm going to click my demo wallet and then deploy. I get my metamask pop up, confirm the transaction, and my ERC 20 token has now been deployed on chain. You can see that the total supply is zero. So I'm going to select my functions and write.
00:16:16.190 - 00:16:18.808, Speaker B: And now I'm going to mint.
00:16:18.984 - 00:17:03.836, Speaker C: So I'm going to enter 123 tokens to mint. I'm going to come up to my signer selector and click my demo account and then call function. I can see that the transaction has been rejected because the owner of this smart contract is not the demo account, it's actually the multisig wallet. So let me come down here again to my signer selector, to my multisig accounts and select main under the multisig wallet, click call function again and we have our metamask pop up. So we're going to mint the tokens. Now you can see the transaction has gone through. And if I take a look at the events, I can see on that token, I don't have any events here.
00:17:03.836 - 00:17:43.880, Speaker C: That's because what multibass has done is actually recognized that this transaction is being signed by a multisig wallet. So it's wrapping the mint function in a multisig on chain Multisig wallet call. And so if I come to my multisig tab here, I can see I've got the transaction pending. If I pick the account that signed it, I can revoke it. If I pick one of the other accounts that's an owner account, in this case my cloud wallet, I can confirm it. Click confirm, we see the speed bump. Click confirm again, and the transaction will go through to my cloud wallet.
00:17:43.880 - 00:17:45.930, Speaker C: Let's refresh the page.
00:17:50.020 - 00:17:50.704, Speaker B: There we go.
00:17:50.742 - 00:18:47.904, Speaker C: We can see it's being executed. Now if I go back to my on chain contracts to my multisig token, the overview page, I can see that in the contract state, once this pops up, can see that the total supply is 123. And I can also see in the events, I can see my mint and my transfer event here with the details. If I click into this transaction hash, it's actually going to be interesting because I should be able to see my multisig events as well. So this was actually called to the multisig wallet to confirm the transaction. And then I can see both the confirmation event from the Multisig wallet and then the subsequent mint and transfer events from the ERC, the multi token. There's something else interesting I want to point out here, which is the fact that you can see that these decimals have been shifted on multitoken.
00:18:47.904 - 00:20:03.848, Speaker C: So this is another feature of multibas called type conversions. And so basically what we have the ability to do is modify the input and output going to and coming from smart contract functions as well as events. So I've come back into my smart contract library, multitoken v one. And if I click the adjustment icon here, I can see that I have my decimals type conversion set on the output of this allowance function. And I can either use a decimal function which will use the output of one of the functions on the smart contract, in this case decimals, or I can use manual input and I could just that to say 17. But in this case, we want to use the output of the decimals function next, I'm going to show you a function of multibas called event queries. And this is basically a way to aggregate and retrieve on chain events, right? So when you're writing a smart contract you almost always want to emit events when some kind of action happens on the blockchain.
00:20:03.848 - 00:20:47.448, Speaker C: Because what you would do is you would present your unsigned transaction to the user, they would sign it and then sometime later that transaction would be included in a block on the blockchain. And you may want to take some action on that. Update a balance in your DAP or display the fact that an NFT has been minted. And so monitoring events is very, very important. But it can be very challenging to do that effectively, first because the blockchain is eventually consistent and node infrastructure is sometimes somewhat unreliable. And so we've solved that problem for you in multibass by building a chain indexer into multibass along with an event aggregation facility. And that's called event queries.
00:20:47.448 - 00:21:34.904, Speaker C: So this is a predefined event query for sprites. We're actually going to build a new one. I'm going to show you how easy it is to report on balances. So we're going to call this one multisig, multisig token balances. And first we're going to add some events to it. So I'm going to click plus here we're going to select the transfer event and we are going to add a couple of different fields. So we're going to say the from address, we're going to alias that as the owner and then we are going to add another event field which is the tokens.
00:21:34.904 - 00:22:08.340, Speaker C: And we're going to alias this as balance and we're going to aggregate this on subtraction. Right. So every time there's a from address we're going to basically subtract and you can see it start to preview the events down here. They don't have much meaning yet, but we'll get to that in a second add. Then we're going to add another transfer event. So transfer and in this case we're going to add an event field again. We're going to add the two event field.
00:22:08.340 - 00:22:50.950, Speaker C: We're going to alias this again as owner and add. And we're going to add another one here, tokens balance. We're going to aggregate this as the add aggregator. So we've got, we're subtracting tokens when there's a from transfer and adding tokens when there's a true a to transfer. And we're also going to need to add a filter. So when the contract address label is equal to multisig token, I hope I have that right. And add filter, we go, okay, add filter to group.
00:22:50.950 - 00:23:15.340, Speaker C: Oops, sorry. We go, done. So I've got my and filter there and we'll add another filter here. So when contract address label is equal to multi sig token, we go, done. Okay, there we go. Just checking that. Okay.
00:23:15.340 - 00:23:46.688, Speaker C: And then we're going to aggregate. So we're going to group by the owner and we're going to order by balance, say descending. And here we go. You can see I've got 123 tokens that are owned by the multisig wallet address when hit save query. And we can see it now here as well. I get the preview here and I also get the query JSon. So you can actually either save event queries like this or you can post to them dynamically.
00:23:46.688 - 00:24:36.416, Speaker C: So another feature we're very excited about and that we've launched recently ahead of ETH Global Istanbul is webhooks. So I've come up to blockchain clicked webhooks and here we are. And so this gives you the ability to be notified via webhook when any kind of on chain smart contract or transaction event happens. And so I'm going to click and create a new webhook. I'm going to call it test webhook and I'm going to enter an endpoint URL. I'm going to use this free webhook testing service and we're going to come back here, paste in the endpoint URL. And I'm going to say anytime a transaction is included in a block or any event is emitted from a smart contract that we have linked on multibass here, we're going to add that endpoint.
00:24:36.416 - 00:25:29.924, Speaker C: So the webhook is being created and here it is. So we're basically waiting. Now I can click to reveal the secret of the webhook. And there's information in our documentation which shows you how to use this to validate the fact that this webhook has been posted from multimask. Because it's a public URL on the Internet, anybody could theoretically post to this if they knew about it. So let's go and generate a transaction. So what we're going to do is we're going back to our on chain contracts and we're going to do web nine test and I'm going to go to functions and we're going to go right, and we're going to deposit one way and I'm going to call the function, select one of my cloud wallets, call the function, and there we go.
00:25:29.924 - 00:26:04.592, Speaker C: And so let's go back to our webhooks here. We can see that it's been posted basically immediately within a second of one another. And if I take a look at my webhooks here, here they are. So I've got the body there and I've got my signature and my timestamp. And again, there's documentation available. We have documentation on our doc site about how to decode and validate these. So I've talked about documentation and there's a link right at the top here which takes you straight to our documentation page.
00:26:04.592 - 00:26:39.164, Speaker C: You can also get to it from our homepage. We have a number of articles documentation on the left here. By the time at ethglobal Istanbul you're looking at this. We will have refreshed this and updated it. But the key thing I want to call out here is our interactive API reference. So all of the different pieces, whether it's multi sig wallets or webhooks or HSM cloud wallets, event queries, it's all available through our documentation site. And this shows you exactly how to use it.
00:26:39.164 - 00:27:46.160, Speaker C: You can try it out here with different code samples. You can put your deployment URL in and work with the multibas API very easily right from within the documentation to our API. We've got comprehensive sdks both for typescript and go, as well as a hard hat plugin. And so the typical end to end DAP development workflow might look something like provision a multibass deployment and set up a repo, a hard hat repo. Introduce the multibas plugin, use that to basically upload the smart contracts into multibass and link them on chain once they're deployed, and then write code using either the rest API or sdks to build your DAP. And the whole idea here is you can build your DAP much, much faster than if you were doing everything from scratch by using all of the features available in multibass.
00:27:46.980 - 00:27:52.576, Speaker A: Thanks for watching and come by our booth at Ethglobal. Looking forward to meeting you.
00:27:52.678 - 00:27:53.070, Speaker B: Thank you.
