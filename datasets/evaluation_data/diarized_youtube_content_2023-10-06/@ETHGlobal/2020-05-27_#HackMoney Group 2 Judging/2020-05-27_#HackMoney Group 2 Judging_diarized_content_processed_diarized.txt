00:00:30.500 - 00:00:31.610, Speaker A: I think we're good.
00:01:52.300 - 00:02:38.360, Speaker B: Hello everybody. Welcome to hack money judging day. This is our DeFi hackathon and we're going to begin today. I am Kartik, one of the co founders of ETHGlobal and this is the second day of our week long of judging. So Hack Money, if you are not familiar with this from the live stream, is an event organized by ETH Global. And over the past four weeks we had 350 hackers from 40 different countries and 15 different time zones work on D Five projects in this ecosystem, leveraging all the tools and SDKs and other utilities that are out there as services. And we had all these amazing people from all these countries.
00:02:38.360 - 00:03:49.676, Speaker B: We had an amazing set of over 40 mentors who were there to help the teams and the attendees from anything technical to marketing to even making a product out of it if they wish to take it to the next level. And of course, we had an amazing set of DeFi companies in the space that were our sponsors that also spent a lot of their time and resources making sure that all these teams are successful and are able to build and really take the composability aspect of it to the next level by utilizing their protocols and SDKs into their ideas. So let me say this one more time. We had 350 hackers work on D Five projects for the last four weeks. And I am excited to announce that as of Sunday night, we had 118 D Five projects that were submitted for this hackathon, and we're starting to judge them throughout this week before we kind of tell everybody else about some of our actual top favorites. So I want to quickly go over the logistics for what the next 2 hours look like for everybody. First up, there's going to be 14 teams today that are going to be demoing what they've built.
00:03:49.676 - 00:04:51.024, Speaker B: And the way this is going to go per team is that there will be four minutes of demo per project and three minutes that will be safe for Q A by our judges. And just to kind of keep everything in check for that seven minute per team. We also made sure that to minimize technical difficulties and keep track of our timing, every project has a pre recorded demo that they will be presenting that kind of covers what their project is about and sort of makes everything very sort of clear and concise. And the judges then get to ask questions around them and give their feedback and just to kind of give an overview of how these teams were set up. The rules and the criteria for this event were fairly straightforward. You could have up to five members per team, which did not mean that you must have a team. A lot of people chose to work individually as well and we made sure that we were able to support those hackers as well.
00:04:51.024 - 00:06:08.948, Speaker B: And a project must incorporate DeFi primitive into their submission, which is kind of why we want to call this thing and keep this in the theme of hacking on money. And of course, all code at this event must have been written over the course of the hackathon, which meant that everything we're going to be seeing today was started just about four weeks ago on the 24 April. And to kind of quickly go over the judging for our teams and also our audience on the live stream, the judges from our side will be scoring each project on these five different categories. They'll be scoring it on the technicality of the project and how original and practical the application is. And on top of the addition to that, the Usability and the accessibility of how easy it is to use by in person on the UI and the UX side in a general casual category we call Law Factor to account for any outliers or any other cases that may be missed on the other four categories. And of course, I want to make sure that I remind everybody here as our judges and our hackers sort of start presenting, this is not a competition. These events are here for hackers to learn experiments.
00:06:08.948 - 00:06:52.388, Speaker B: The hackers are here to show what they've done and learned over the past month and just share their excitement. And the judges are here to give feedback. Not everybody's trying to become a business, nor are we telling them or intending them to do so, or keeping this thing in the spirit of a hackathon and encouraging experimentation. So with that, I want to sort of move on to the schedule for this call and our day of judging. We have these 14 projects that will be going on live. In order and judging these projects will be our three amazing judges. Which is frederick Haga from Dune Analytics, evan Vent Nas from the Ethereum Foundation, and Joe Andrews from Aztec Protocol.
00:06:52.388 - 00:07:15.970, Speaker B: We'll be kind of letting them to kind of join our video on the Zoom now. And with that, I'd like to kick off our first hack for today, which is C Channels. So if the C channel team can come on to the Zoom call and start sharing their demo, we'll love to kick off day two.
00:07:16.420 - 00:07:16.880, Speaker A: Yeah.
00:07:16.950 - 00:07:32.036, Speaker C: Thank you. So, my name is Alan Nader and I solo hack C Channels, which are a series of payment channel contracts built on top of compound, which use EIP seven one two to verify signatures and EIP 1167 to reduce gas costs. So I'll go ahead and share my.
00:07:32.058 - 00:07:32.630, Speaker A: Screen.
00:07:40.120 - 00:07:42.004, Speaker C: Without further ado. Here we go.
00:07:42.122 - 00:07:42.500, Speaker A: Hello.
00:07:42.570 - 00:08:35.156, Speaker C: My project is c Channels earn interest while sending payments off chain. So in a C channel, there are usually two participants, a sender and a recipient. The sender deposits funds into the cCHANNEL smart contract. Those funds are then locked into compound and begin accruing interest. The sender can then send cryptographic messages over the internet that allot different amounts to the recipient. Once the recipient is satisfied, they can then publish these signatures to the contract and withdraw the amount allotted to them. So I have several more slides, but for the sake of simplicity and time, you can go ahead and pause the video and view them on your own it's and on to the demo.
00:08:35.156 - 00:09:09.588, Speaker C: The first thing we need to do is create a channel. So I'm going to go here, create channel, then select the asset we would like the channel to be in. So you can choose from any compound supported ERC 20 token as well as ether. I'm going to select die, then paste in the recipient address, and then choose the max amount of time we would like the channel to be open for. So I'm going to choose 100 days. Click next, confirm our information, submit the transaction. We can now see that our channel was created at zero x three one nine and we can view this on Etherscan to confirm.
00:09:09.588 - 00:09:30.150, Speaker C: So now that we've created a channel, let's go ahead and add assets. So I'm going to go over here, click Add assets. We have two options. We can either supply assets directly, so in this case of the Dai channel, we can add Dai, or we can borrow assets from compound. So use one asset to borrow die. Let's go ahead and borrow assets. Let's select our channel.
00:09:30.150 - 00:09:51.560, Speaker C: Choose Ether. This is the collateral we'll be using to borrow against. Let me enter an amount of Ether. So let's say 0.2. And this means that the safe max borrow is 21 die. And this is calculated using data from compounds comptroller as well as price oracle. So I'm going to go ahead and put in 20 die.
00:09:51.560 - 00:10:25.050, Speaker C: Click Next, confirm our information, and then submit the transaction. So we can see that the 20 die was successfully deposited into our Dai channel. All right, now that our Dai channel has some funds in it, let's go ahead and sign a transaction which we can give to the recipient. Choose our channel. We can now see the underlying balance of our channel is 20 die. So I'm going to choose an amount in die, let's say ten and sign it. Sign the message.
00:10:25.050 - 00:11:04.116, Speaker C: And we now have a cryptographically signed message that allots the recipient ten die. So we can now send this over the internet via Http, email, SMS, what have you. You simply paste it in and we can send it them however method we want. So we are no longer bound by the throughput of the blockchain in how fast we can send transactions. We are now limited by how fast we can send a message over the Internet. So let's assume we switched over to the recipient's address and we've been given multiple different signatures. But we are going to now cash out one of the signatures and close the channel.
00:11:04.116 - 00:11:45.210, Speaker C: So let's go close channel close. Select our contract paste in the signature and the amount, click next confirm, submit the transaction. Now, if we look on Etherscan, we can see that ten die was sent to the recipient's address as well as the remaining ten die. Plus the interest that was accrued while the die was in the channel was sent back to the sender's address. This is C channels. Thank you. Welcome to any questions or feedback.
00:11:46.590 - 00:12:12.130, Speaker A: Thanks. That was great. Yeah, thank you. Very cool. I like to have a full UI for it was actually also pretty easy to understand. I feel like these demos can get pretty technical sometimes. So it was super cool that you had a fully working UI on top of your contract.
00:12:12.710 - 00:12:32.330, Speaker C: Yeah, just to call out one thing I was missing or I didn't have time to present was inspect signature allows for recipients to verify. A signature is valid without submitting a transaction to the blockchain. So you can just use it through the UI to verify it. And then secondly, repay is used to repay, obviously, the debt if you borrow from compound.
00:12:35.920 - 00:12:45.570, Speaker A: Did you kind of think of any ways, if you have more time to kind of share the signatures with users in the channel, kind of in a decentralized way?
00:12:46.900 - 00:12:48.608, Speaker C: Sorry, what was the question again?
00:12:48.774 - 00:12:54.690, Speaker A: Did you think of any ways to share the signatures with the recipients in a decentralized way?
00:12:55.060 - 00:13:18.040, Speaker C: Yeah, I mean, there's different methods, so it doesn't really matter. It can be sent any method because the signature is specially addressed to the recipient's address, so that recipient is the only address that can cash out. So even if the signature gets compromised, or hell, you could even make a Twitter bot that posts it publicly. There's any method to send a message over the Internet is adequate.
00:13:22.540 - 00:13:39.244, Speaker A: Cool, thanks. And in the demo, the or did you take out a loan on ETH in your UI?
00:13:39.372 - 00:14:03.636, Speaker C: Yeah, good question. So you can do both in C channels. So you can straight up, if it's a Dai channel, you can just call a function and it will lock the die into the channel and then wrap it and turn it into CDI and compound and hold that. Or you can borrow against it from any other asset in compound. And the idea behind this is leverage. So let's say you have a merchant that only accepts payment in Dai, but you have Ether. And you don't want to have to sell your Ether for Dai.
00:14:03.636 - 00:14:17.228, Speaker C: You want to continue speculating on the price. So rather than selling the Ether, you can take a borrow a loan out from compound, open up the channel with Dai, and then pay them in signatures of Dai. And then at any point in time, you can repay the debt back to.
00:14:17.234 - 00:14:25.548, Speaker A: Compound and get your Ether. Cool. Nice. What made you decide to work on this? Just curious.
00:14:25.724 - 00:14:51.936, Speaker C: Yeah, I'm really interested in layer two solutions, and given current gas prices, I think that it's really imperative that really start pushing these and I think kind of the incentive models behind layer two, like, why should I use layer two? Has never been fully pushed people enough. And I think that by having the ability to have your assets earn interest for you in a layer two solution, incentivizes people to potentially say, hey, I want to use this.
00:14:51.978 - 00:14:52.232, Speaker A: Right.
00:14:52.286 - 00:15:32.180, Speaker C: Because the problem with payment channels is I might have to lock up $500 for a month or some period of time to only spend 100. So $400 of my capital is sitting idle. But if it's locked into compound earning interest for me, that's cool. And I think payment channels and compound really synergize well because unless there's some black swan event, the worst outcome on compound is a 0% interest rate. So, like you as a recipient, if you get a signature for, let's say the channel holds 100 die, you get a signature for 100 die, you're pretty much guaranteed to know that the channel is solvent, that it will have 100 die minimum.
00:15:36.520 - 00:15:52.010, Speaker A: Nice. Yeah, that's pretty neat. I hadn't thought about how, honestly, CDI and all these wrap tokens obviously solve the collateralizing these layer two thing problems that we've had, but you're right, it does. This is a very neat implementation of that.
00:15:53.120 - 00:16:04.640, Speaker B: Awesome. Well, thank you netter from C channels, and we're off to an excellent start for the day. And with that, we'll move on to our next demo, which is project what the Frack.
00:16:05.380 - 00:16:27.364, Speaker A: Hey, I'm miles from what the frack? And we've got Theo, Demontos and Mick here. Yeah, you guys can show your video if you'd like. There they are. Cool. So without further ado, I'll share the video share and we are a team. What the frac? My name is Miles. We have three other members on our team.
00:16:27.364 - 00:17:14.176, Speaker A: PO, who worked on visual design, mick who worked on solidity backend demantos, and I, who worked on the front end. What we built are tools to manage fractional ownership non fungible tokens. How it works in our implementation, a user locks an ERC 721 and mints a custom number of ERC 20 tokens representing fractional NFT ownership. User creates an auction for the NFT, and the user can optionally distribute fraction tokens through a dynamic balancer pool. Once the auction is complete, the winning bidder can claim their NFT out of the contract. Anyone who holds fraction tokens can claim their portion of the winning bid at what the frac? Light where our DAP is live. So say I would like to fractionalize this token.
00:17:14.176 - 00:17:38.092, Speaker A: Normally I'd have to unlock that token so the contract can take it from me, but I've already unlocked it. Say I explain this is worth $500 or 500 die. So maybe it's going to create 1000 for me automatically of these fractional tokens. Say I'd like to create a million. That's fine. So the minimum starting bid, since it's worth $500, I want bidding to start at 400. And I want each bid to increase by 3%.
00:17:38.092 - 00:18:07.280, Speaker A: And I want the auction to last for one month. Now, I'll explain more later about how this balancer pool works. But say I'd like to sell 10% of these 1 million tokens. Go ahead and select that it'll 100,000 token. Now, since I've given it the approximate value, I've given it the number of tokens I'd like to send to the balancer pool. I need to then also send die to the balancer pool. Because of the split in the balancer pool, I only need to provide one die, which is pretty slick.
00:18:07.280 - 00:18:26.824, Speaker A: Looks like I need to unlock one die, unfortunately. So I'm going to do that. Okay, so now that it is confirmed, I can hit fractionate. It's going to give me a confirmation with more information about what each part is doing. Tooltip is misbehaving, apparently. And I can go ahead and hit fractionate. Now, once I do it'll, send the transaction.
00:18:26.824 - 00:18:45.196, Speaker A: We're going to fast forward past that. Now, I can go to the list of recently fractionalized items and I can scroll down and I can see there's some test phones. But here is one that I created earlier. And so I can go to this auction. I can see that there's 29 days left in the auction. I can go there. Twelve die is the highest bid, which is mine.
00:18:45.196 - 00:19:15.816, Speaker A: I can go and increase. I'd have to unlock and hit place bid. So this is how our balancer pool works. So the balancer pool is seated with 2% die and 98% of the fraction token. Within a fine time period, it flips from 90% to 98% die and 2% fraction token. The arbitrage errors can poker contracts update pool weights, creating an arbitrage opportunity for themselves. Then, once the flip is complete, the owner can pull out all the liquidity, which is 98% Dai and 2% the fraction tokens.
00:19:15.816 - 00:19:37.356, Speaker A: They've effectively sold fractional tokens for Dai. So, some ideas for future work. One, we can provide more options for composing our tools. Currently, when fractionalized tokens, you must create an auction. This is fairly arbitrary. Only when you create an auction are you able to create a balancer pool. Optionally, all these things tools should be composable.
00:19:37.356 - 00:20:01.608, Speaker A: You should be able to do any of these in any order. Also ideally upon fractionalization. The people who own fractions of this token should decide when these things happen. Creating a really thin Dow would be a great way to do this. Where fractional ownership represents fractional voting rights in the Dow. Another one is to create a fund of funds. There's all kinds of crazy things that you can do.
00:20:01.608 - 00:20:35.110, Speaker A: You can check this tool out, live at whatthepract, life. Again, this is not guaranteed to work, so just be careful. And thank you so much. Cool. So, yeah, I'm happy to answer any questions. So what's the use case? And I'm sorry if you said it, but I couldn't hear that well at certain parts of the audio yeah, I need to get a better microphone so I can have really good audio. Yeah, I didn't actually allude directly to these cases, so thank you for asking.
00:20:35.110 - 00:21:48.130, Speaker A: So right now NFTs are generally worth not a huge amount of money but as people are trying to bring real estate online, for example, we might want to transact in an NFT that's worth hundreds of thousands of dollars. Ideally, hopefully in the future that'll be a reality and say you want to get a loan against that but you don't want to use the entire NFT to do so maybe you just want to use $10,000 of that equity to lock that up. You could do that. So yeah, this is kind of looking forward towards that use case. Another one is as people start spending more money in crypto Voxels or Decentraland, maybe you want to own fractional ownership of different parts of those worlds and that would be a more immediate use case and anything else you can think of because this is an Agnostic tool that simply splits up an NFT. And the poking thing, I didn't understand how's that exactly sure. So the idea is that if you create a private balancer pool, a contract can still have control over the weights of that pool.
00:21:48.130 - 00:22:42.440, Speaker A: So the weights could be 1090, it could be 595. So our contract says, okay, this balancer pool needs to flip over this amount of time, the poke function cues that contract to go and update the balancer pool. And then if the balancer pool weights are slightly different than the amount of tokens in there, that creates that arbitrage opportunity where people can start transacting and say, well, this fractional piece of this NFT is worth this much, and now I can get it for this amount of die, which is a little bit less than it should be. And it starts flipping like that's. The pool starts at 2% die and 98% fraction tokens and then it flips the other way around. So the one selling the token ends up with only die and only a small part of fraction tokens. But you bootstrap liquidity in the pool by starting with 2% in them.
00:22:42.440 - 00:24:19.640, Speaker A: Is this a known auction mechanism or is this something you guys created to answer that? Mick, the balancer guys came up with liquidity bootstopping type pool but I think this is one of the first ones which is actually running and they're doing some experiments with perpetuals by shifting weights and kind of stuff and were you asking about the so there's actually two mechanisms that we have. We have the balancer flip mechanism to sell some of the tokens and we also have our own simple English auction implementation which we built yeah, I was thinking about the initial price discovery when you float this on the market, sorry, how do you find a price for the diffractions of the asset? Right, so that's why we actually built the English auction is so that by watching the bidding, you can start seeing, okay, well, the full NFT is worth this much, so this fraction of that NFT should be worth this much. The estimation of how much is worth at the very beginning, that's kind of up to you as the seller to decide to kind of start the biding at that place. If you set it too high, obviously there are issues. And if you set it too low, there's different set of issues. So you're incentivized to estimate as well as you can. Yeah, and because the weights are shifting, like if you estimate it too high, then the weights will shift, and slowly it will come to a normal price for the fraction tokens because the pool is flipping the other way around.
00:24:19.640 - 00:24:37.662, Speaker A: All right, we are going to move on to the next team. Thank you guys for presenting. Thank you. Thank you, judges, for your feedback. Thanks. Thank you. Next up, we have Team Vigil with the project money.
00:24:37.662 - 00:25:18.192, Speaker A: Vigil, take it away. Sorry, my mic is muted. Hi, this is Swaroop and my co founder, Anwit. We've built a decentralized expense settlement solution on Ethereum. So the premise is to allow employees and contractors to file expenses against their organization on the platform. So all of the expenses are settled using Stablecoin. In this example, I'm going to show you with diet.
00:25:18.192 - 00:25:58.276, Speaker A: I'm going to show you this entire flow from one to three, four, five in my demo. So we're going to sign up for a corporate entity here. Now, behind the scenes, what we do is we uniquely create an ACL contract for each entity that maintains the roles and also gives subdomain against the ENS registration, the transaction that's happening here. So in this case, when we blockagel domain ETH, and once that's all done, we will show them dashboard so you can see the subdomain is ready to go. So we're going to just quickly test it out. So if I go on MetaMask right now and put that ENS domain in, it should resolve an address. I'm going to send it.
00:25:58.276 - 00:26:28.968, Speaker A: Some die right now so we can see the whole flow. First, it's going to go to the contract and then maintain the mapping to their compound, which generates interest for them. So while this transactions are happening, let's try to add an employee and expense groups so the employee can actually start adding those. So once these transactions take place, in back end, the employee gets an email which they can sign up. They do not need a wallet to get this going. And there we go. They have this entry.
00:26:28.968 - 00:27:01.476, Speaker A: They can start adding sensors to it so you can attach receipts. So what we use is we encrypt the files and we store it on the Sire network. So this way you don't need SV or bucket. Behind the scenes, we have a very simple computer version API that we are using to extract this information just to make things faster. But again, they are free to edit it as they want. Just coming back. While this bill is getting uploaded, let's go back to the employers view so we can see that the Die balance is now maintained on that unique contract.
00:27:01.476 - 00:27:33.260, Speaker A: So at this point, we're going to send a background transaction that goes to compound, but the users don't have to sort of worry about managing this. So once that transaction takes place, I'll come back to it later in the demo. So let's go to the employee view again. They need to link a wallet only when they want to actually get paid. So in this case, they may not have a web3 browser. So we have a fallback on protest, so they can just connect to it. And once that's linked, let's try to show you from an admin perspective where you can actually start approving sensors.
00:27:33.260 - 00:28:01.064, Speaker A: So we've used an EIP seven one two spec to actually sign this as a meta transaction. So even the owners and the managers don't need to have the asset assistant. And this is to show you what the receipt looks like. So this is again pulled from sir through the local node and then proxy through an API endpoint. Approvers can take a look at it if the receipt matches the information. In this case, it was exactly the same one. Okay, so let's try to add some goals here.
00:28:01.064 - 00:28:22.208, Speaker A: So if I try to add that employee, it's going to throw this warning. There's no wallet address link and this is a privacy feature. So the idea is that contractors and employees might work at different companies. We've given them a way that they can actually have multiple wallets. So they need to link each of them into different entities. So once that's linked, we should be able to add that person. I'm going to just give it a different role here.
00:28:22.208 - 00:28:47.432, Speaker A: This person is like a CFO and let me go through the flow again. I'm going to approve a bill. The bill approval takes place. Let's make sure that we actually have dye sitting in the compound this time before we start to make the dispersal. Looks like the compound balance is reflecting perfect. Now we're going to automate this whole dispersal. So from the employee view, you can see that they owe certain amount of money.
00:28:47.432 - 00:29:13.884, Speaker A: They can sort of cash out. Once that request is processed, the admin is going to see that there's a payment settlement. So this is mostly for the CFOs or finance people in the company. They can disperse this and you can check that the wallet address that the money is going to actually does link to this employee here. Okay, looks good. While this transaction is getting processed, let me open Ether scan quickly and just check what the balance is before the money comes out. So it's sitting at 4.17
00:29:13.884 - 00:29:32.568, Speaker A: Die. We approved at twelve point 75. So that should be around 16.9 if I refresh this page. Okay, there we go, 16.9. The transaction came in completely automated through compound and companies accuring interest until the money was sent to them. So that's the demo.
00:29:32.568 - 00:29:59.036, Speaker A: I'm going to quickly go back to the slides. So you saw how we could file expenses in a very Web 4.0 way. But we have that advantage of using my system behind the scenes, making sure all the ACLs are managed. So all the way we could get in the number of wallets. So we have all these sponsor integrations which I've shown you and so on chain. What's happening is the organization entity has these global level permissions against the wallet address of the creator.
00:29:59.036 - 00:30:19.140, Speaker A: That's what ends up creating all sub users. And then on ENS they get a unique subdomain. So that makes it very friendly to manage the e transfers. And of course they can get their white label going as well if they wish to. So expenses that are represented at bills. So this allows a very powerful system to have debitors creditors. So it's not just about simple expenses.
00:30:19.140 - 00:30:49.330, Speaker A: At the end, I'll show you what else we plan on doing with it. I showed you the meta transactions with EIP seven one two database for approvals and disposals. We have these three main contracts. All of this is on our GitHub for you to take a look. We have the main expense engine that manages all the expenses. We have the top level ENS handler to manage all the subdomains and every entity gets their ACL dispatcher deployed. So that's what actually maintains their compound linking without having them to do anything except just sending die once and whenever they run on the money.
00:30:49.330 - 00:31:20.332, Speaker A: So we have this off screen graph database that actually builds this debt graph and calculates the settlements. We also have a relational database to do very basic background restrictions until smart contract takes over for the security. This is just an example of what the structure of the graph database looks like. We're running a little low on time, so if you're able okay, yeah. We should move on to questions. Okay. Yeah.
00:31:20.332 - 00:31:49.500, Speaker A: We just want to support multiple assets where you can have different people in different jurisdictions. So that's something we want to do in the future. Yeah. Open to questions. So I assume you built this because you needed it for your own company. Yes, we definitely needed it for our own company. And I was just doing taxes as well and I realized this is maybe less of a problem in a small startup, but it's something that people use different.
00:31:49.500 - 00:32:27.530, Speaker A: So we have played with the idea in the past, but we wanted to figure out a way to use blockchain and still make it friendly for non blockchain users to be able to do it while leveraging the power of proofs behind the scenes. And now this time. We came up with a whole diet settlement. So that actually you don't even need like stripeishing or some other third party financial system. So there's no that's great. Guys, I got a question just on who's earning the interest. I was a little confused as if it was the company or the employee was earning the interest.
00:32:27.530 - 00:32:58.466, Speaker A: So the compound is generating the interest. The compound protocol ensures that. Right. So when you send diet to the main contract so we have this linking it's all on our code. So it actually deposits as a collateral to our bond and it generates interest while the money is sitting there and then automatically takes it out whenever there's a disposal that needs to be done. Yes. I was just trying to figure out is the interest kind of owed to the company or the employee? Because the company makes it's their money, they can owe it.
00:32:58.466 - 00:33:21.020, Speaker A: I mean, in the future we definitely want to allow a way that the employees can also work onto interest. We just didn't get enough time to do that part. But we wanted to show the example of how you can make the money as well. It'd be nice, I think, to just a bit of feedback to add it for the employee. If you've got $1,000 expense, you probably want to spend some interest on that. If it's not paid for a month, that'll be pretty cool. Maybe next week.
00:33:21.020 - 00:33:38.506, Speaker A: Awesome. Thank you Swaru and the rest of your team. We're going to move on to the next thanks everyone. The next team presenting, which is DeFi Dollar. Hello guys. We are the team DeFi dollar. And I'm Arpit.
00:33:38.506 - 00:34:18.182, Speaker A: I am a software developer and with me is Mantan who worked on the front end, and Deep, who did all things design right. So I'm going to jump right into the demo. Just that we had four minutes for the demo and we had a lot to speak about. So our demo is a bit rushed up. But of course, feel free to stop us during the demo and of course there are questions after that. Hello, we are the team DeFi Dollar and we want to bring stability to stablecoins. So I'm Arpit, along with Deep and Mantan issues with current stablecoins are volatility.
00:34:18.182 - 00:34:52.786, Speaker A: We hear so much about Dai moving from its bag and even centralized coins. Then with coins like Dai, there is an involved governance process to actually being able to keep its peg. And with centralized coins there is bank run risk, counterparty risk, custodian risk and DeFi Dollar we want to attempt solving some of these challenges. So what is DeFi dollar. DeFi Dollar is an attempt at being an index of stable coins that uses DeFi primitives to stay near the dollar mark mechanism is we have a core DeFi on a contract and underlying reserves which are chosen. So true. USD and die.
00:34:52.786 - 00:35:23.474, Speaker A: For this example, a user comes in with 100 of those and these coins are deposited to Ave and then the contract gets back. Interest bearing versions of these coins back and interest from Aave is streamed to the code contract. Then these Ave tokens are deposited in a balancer pool in one is to one ratio. And from a balancer pool you can trade one coin for another. And the trade fee for that also goes to the core contract. Now, when the price of the line coins fluctuate, say die goes to 1.1 and two USD goes to 0.9,
00:35:23.474 - 00:36:15.310, Speaker A: there is an arbitrage opportunity because balancer has an AMM and because coins in those pools are still like in one is to one ratio. So what you can do is you can send in two USD and get die which is worth 1.1. So what happens eventually at the equilibrium is two USD are more in number in the pool and when you multiply that by price, it's $100 again and similarly die even though less than 100 in quantity, their eventual value is at $100. But the more interesting case is when all of the underlying coins go below the dollar mark, right? So even though there is some amount of arbitrage opportunity there, but that can only balance the pool so much. So these are below $100 because coins are below one dollars. At this point we have a rebalance mechanism in our contract. And when you do that, it fetches price from the Oracle chain link reference contracts and it fetches price for the underlying coins.
00:36:15.310 - 00:36:53.946, Speaker A: And when that happens, and because contract already knows from the chain link prices that how much is the deficit in each pool. So for each pool the deficit was $2.9. And because core contract was earning fees from two sources, it sends in coins to those pools to complete that deficit. So then we are back at $100 again and D $5 remains tip demo. We are live on Covenant Testnet and you can check out our app on D $5 XYZ. This is the mint page. So we support a bunch of coins, let's say maker, and I want to mint maker worth of DUSD.
00:36:53.946 - 00:37:17.218, Speaker A: And I have already connected to Porter's wallet here. So just waiting for that this happens. And then there's burn. So what you can do is you can burn DUSD in exchange for any coins that we support. Then there's a swap mechanism. This happens within the balancer pool. So you can say that I want to swap to Avidai for whatever amount of avid two USD.
00:37:17.218 - 00:37:56.414, Speaker A: You can do that. And then finally there's a rebalance mechanism which I has discussed is like what fetches price from Oracles and then completes the deficit so that the pool is balanced again. So this was a wrap. Do check it out. So we actually ran simulation from the data from the last four months and I picked up prices for di and SUSD. And then for the simulation I assumed that the protocol's market cap is going at 18% yearly and the income from Ave interest is 4% Apr. With that, I ran the simulations through our contracts and indeed the deviations from the one dollars mark for DUSD were minimum, as you can see along these lines.
00:37:56.414 - 00:38:27.690, Speaker A: Right? Yeah. And the sponsors that we integrated are Ave Chain Link Balancer, Uniswap PODES, and here is a mask at Dolu asking you to wear a mask and stay safe. And thank you guys for listening to our presentation. Yeah, guys, that was us. Okay, so I have to ask about the mascot. Yeah. Through DeFi Dollar, our message is bear a mask and hack on DeFi and Dolo.
00:38:27.690 - 00:38:58.870, Speaker A: Just because it sounds like Dollar. No, nothing like that. It's like an Indian kind of a nickname. So yeah, I don't think there's a rationale behind that, but probably Deep knows. Yeah, go ahead. Sorry, could you explain again how you reach the peg when both coins are underneath one dollars? Yeah. So let's say one coin is at zero point 97 and another coin is at zero point 98.
00:38:58.870 - 00:39:16.554, Speaker A: Right. So because there were 100 of those. So now the pools are at $98 and $97. So there's a deficit of two and $3. And because the code contract was yield hacking, so it has some sources from the trade fees and ave the interest fees. Right. So it says some amount of pool there.
00:39:16.554 - 00:39:51.014, Speaker A: So then it fetches price from the chain link contracts and then it knows that there is a deficit. Right. So it tries to complete that deficit. So it sends in $2 divided by zero point 98 a number of coins to one pool so that it is back at $100. And for the other coin, which was at zero point 97, it tries to send in $3 deficit divided by zero point 97. So that way, given if there is enough yield in the of course, that's an assumption that there has to be some amount of yield in the code contract and then that completes the deficit. Yeah.
00:39:51.014 - 00:40:23.860, Speaker A: That's super neat. That's a super interesting way of solving solving it, but yeah. So there would, there would be like sort of idle interest that's earned right, that's sitting there and then would be there for your rainy day, so to speak. Correct. Also, one simple mechanism here is like when coins go above the dollar mark, right. We are simply going to remove some liquidity from the pool. So it's like we are going to benefit from that as well.
00:40:23.860 - 00:40:56.840, Speaker A: Yeah, very cool. Thank you. Joey, you have any comments? How do you run the simulations? I mean, it just seemed quite cool that you managed to do that. Right. So our idea when we started this project was to only support decentralized coins in the underlying pools. But I think eventually that might not be our decision. Protocol users might have to take that decision.
00:40:56.840 - 00:41:30.200, Speaker A: But then I thought if we start with that let me just run a simulation with Din SUST. Right. So I took prices from 1 January to 1 May from the coin gecko API. So now we know how much the coins are deviating. So it's kind of like we have the chain link Oracle, right? So we took that, and then I assumed that the D $5 market cap is growing at 18% annually, which is a very reasonable assumption. And then for the yield from Ave, we assumed that it's 4% for every coin, 4% Apr. Right.
00:41:30.200 - 00:42:00.976, Speaker A: So I ran the simulation through our contract, and when I say simulation, what happens is there's a starting balance in the pools, and then when the price changes, users are allowed to arbitrage between the coins. Right. So, there's an equilibrium point. Like, you can only make so much profit because you're trying to balance the price outside within the pool. Right. There's a specific formula for that which balancer guys have it in their white paper. So given the spot price, you know how much exactly to trade to make maximum profit.
00:42:00.976 - 00:42:13.864, Speaker A: So I did that. Again. Another assumption here is there is enough arbitragers, like, in the market. That was the first check. Yeah. And after that, the chain link balance. Yeah.
00:42:13.864 - 00:42:48.030, Speaker A: We're sorry to cut you off, but thank you guys for presenting so much. Thank you, Trent. Thank you, judges. All right, moving on to the next team. Team Titans. Take it away. Michael for the hack Money 2020 hackathon, I created Bank Protocol, which is a smart contract for collateral backed lending.
00:42:48.030 - 00:43:44.810, Speaker A: My name is Michael Gen. I'm a computer engineer and electrical engineering PhD student, and I'm the only member of the team. So I built a framework for managing collateral backed loans on Ethereum. It has configurable parameters for the token you want to use for the debt. So this would be like a stablecoin like Dai or USDC, a collateral token, which is the token you want to accept as collateral, which in most cases will be a DRC 20 token like teller attributes or chain link, and then a configurable interest rate, origination fee, collateralization ratio, and liquidation penalty. These are similar to what is done on the maker platform, the Bank Protocol, the smart contract that I created uses the Teller Oracle to get the price feed for the various tokens. And the Teller Oracle price feed allows the owner to liquidate borrowers if their borrowing becomes under collateralized.
00:43:44.810 - 00:44:24.662, Speaker A: The funds for the smart contracts are supposed to be provided by the contract owner only, and the contract owner is the one who earns the interest and collects the fees. And the contract owner is also responsible for liquidating the borrowers. The contract owner is the bank, and the interaction between the banker and their borrowers are mediated by an easy to read smart contract. So, for a demonstration, I'll go ahead and I have some Teller Tributes and some Dai. And this is on the Rinkabee testnet. So I'll go ahead and first approve some tokens for deposit. This will be my collateral.
00:44:24.662 - 00:45:09.554, Speaker A: And you can see this is the Rinkabee test network. So after approving some tokens for deposit, then what I'll do is I'll be able to go ahead and actually make the deposit of the tokens. So now I'm going to go ahead and deposit those 20 tokens. After the deposit is confirmed, you see that the collateral that I have locked is 20 tributes. So because each tribute is worth about $5, I can go ahead and withdraw about two thirds of that value. So I'm going to go ahead and borrow 60 die tokens. So my current balance for die is 75 die.
00:45:09.554 - 00:46:05.494, Speaker A: And after this transaction is complete, the balance will be 75 plus 60 die. So my collateralization ratio is 160%, which is good. Now what I can do is as the owner of this contract, I can actually update the price from the Oracle. So if I go ahead and issue an update price as the contract owner on the Rinkov network, what it'll do is it will make a transaction to fetch the price from the Teller Oracle and we'll see the price get updated for both tokens, the Teller tributes and Dai in dollars. So that transaction went through and if I wait a bit, we will see that the prices have adjusted. So luckily, this contract has not been liquidated. And so this person is okay to go ahead and repay their loan, plus their interest or plus their origination fee, the 1% origination fee.
00:46:05.494 - 00:46:47.030, Speaker A: So what I'll do is I'll go ahead and approve the 60.6 die for repayment, and after that is approved, I can go ahead and actually make the repayment. And after I repay the loan, I'll be able to withdraw my original collateral. So after that transaction goes through, I'll be able to repay. So now the debt has been repaid and so I can withdraw my tributes. And there we go. So now it's back and I paid a small amount to the origination fee, which is now back in the bank.
00:46:47.030 - 00:47:13.818, Speaker A: That was my demo. Thanks. Nice. Cool. So I mean, that was basically maker but for color tokens, right? Like did you fork maker's code or did you write your own? It's a framework. So the smart contract that I wrote is only like 250 lines. And when you deploy it, you can set your own tokens.
00:47:13.818 - 00:47:56.300, Speaker A: So you can pick any two tokens. And when you deploy it, you choose which two you want to use and you choose the interest rates and other. Cool. I am good friends with the Teller team. So cool to see that you're using their product. Why did you choose the Teller Oracles? So I did some teller mining and I am familiar with the Teller smart contract and it was just a lot easier to get it set up. It makes a lot more sense to me how the prices are done.
00:47:56.300 - 00:48:47.578, Speaker A: Cool. Nice. And did I miss it? How do you set the interest rates? Do they change or that's set when you yeah, the framework doesn't have a way to change them, but they're set on the deploy. So if you imagine the deploy, it has like a bunch of initialization, like, constructor parameters and you would set it there and then yeah, there could be only owner functions for changing the interest rate, but I didn't actually add those in. So it's just on deploy. You choose. How did you imagine that these are discovered, these pools? Well, my vision would be it would be people within these smaller communities.
00:48:47.578 - 00:50:07.210, Speaker A: So specifically within the Teller tributes Teller community, it's like Teller is only $5 million market cap, but there are definitely well capitalized people in the community that would be willing to lend stablecoins if people are willing to collateralize it. So I was imagining that a lot of this would be people within the community that would want to lend to within Teller, there are miners, so people might want to offer stablecoins to the miners so that they could get a loan to buy more machinery and not have to sell their curious. Did Dell like, did you build this because people said they wanted it in that community or is this just I built it because I thought people would want it, and I've talked to people and they do want to try it. Yeah, but yeah, I think I'm familiar with people doing bitcoin lending for bitcoin mining, so they'll get loans against their bitcoin to buy more bitcoin mining equipment. And I figured the same thing would probably happen for people mining Teller. But Teller isn't listed in lending yet and it's kind of a small market cap, so it might not be listed for a while. Thank you, Michael.
00:50:07.210 - 00:50:29.800, Speaker A: Appreciate the presentation. Cool stuff. Yeah, thanks. We're going to move on to the next team, which is Batu. Welcome. Smith, you're muted. Hey guys.
00:50:29.800 - 00:51:14.180, Speaker A: Hi. So I'm smith from team Batchu. So without any further ado, let's just start with the presentation of my project, Batu. Hey, guys, I'm Smith, and here to present my hackmani project Batchu. So let's just straightforward to it. So what the project does essentially is it's basically a layer of smart contracts that will combine multiple Ethereum transactions into a single one. And instead of paying gas for individual transactions, users will have to pay gas fees for a single one.
00:51:14.180 - 00:52:14.498, Speaker A: And existing solutions that are there is the Ethereum team has already built a set of smart contracts that precisely performs this. But the problem with it is that the execution is completely binary. That is, the entire set will only execute when each of them are successful, and if any one of them fails, then the entire set doesn't execute, which doesn't really fit into real world DAP cases. So what Batch will do is essentially an off chain server would be running, which would simply group these transactions into related and non related ones, and the related ones will execute in a binary fashion, and the non related transactions will execute independently. So let's just head straight to the demo. So the project doesn't actually have a front end because it doesn't require any. So for the demo, I'll be using the demo created by the Ethereum team to display batch Ethereum transactions.
00:52:14.498 - 00:52:49.694, Speaker A: So just for this, I have to log into my Ethereum account. So here's where I'll just send three different amounts of ETH to the same address. Here. And here's where I'm batching those transactions. And here's where I send the batch to the blockchain. So the transaction has now succeeded, and I'll just go to My Robson to check out the transaction. This is the transaction here.
00:52:49.694 - 00:53:37.040, Speaker A: And as you can see, three transactions into a single transaction with a single gas fees. The only difference with the batch would be that there will be a green tick here, but there could be individual red crosses on transactions which don't execute. So how does this work? It's pretty straightforward. The signatures are directly just sent from the wallet to an off chain server, which will just separate the transactions into two batches. And the first batch would have those related transactions, which would be executing in binary fashion. And the batch two will have the non related transactions which will execute independently, which would then be sent to the forked Ethereum contacts. And what these contacts will do is just simply send these transactions to the blockchain and that's it.
00:53:37.040 - 00:54:14.400, Speaker A: What remains for the project is writing a complete server logic that groups these transactions into related and non related ones for transactions in DeFi and with NFTs and other main Ethereum domains. And what's next for the project is, using Openjsn, I can actually enable custom relayers based on the choice of users. They can actually select the relays who be paying the gas fees for them. So as of now, only Ethereum is the single relayer. But after Opengsn, we can enable other relays like Biconomy. So yeah, that's it. So thanks so much for your time.
00:54:14.400 - 00:55:03.290, Speaker A: So, do you save gas? Yeah. How much did you benchmark? That? So it actually depends case to case for different use cases. A lot also depends on the time frame that's been set on the server. I'm planning to have inputs from the user as to what should be the time frame for the transactions in which he means to have a batch of transactions. So the more the number of transactions in a given batch, the more gas he saves if there are 20 transactions in a single batch. So instead of paying for 20 different sends, he'll be paying for a single send. So that's how the gas is saved.
00:55:03.290 - 00:55:57.070, Speaker A: Cool. How do you separate the transactions out on the server? Kind of what determines if they're binary in the binary execution queue or the other queue? Yeah. So for the binary execution to have the transaction in the binary section is pretty clear. We have transactions, for example, splash loans on Ave for them, other transactions have to be in a single block. So for them it makes sense to have them in a single batch. But consider transactions of simple send transactions of EHE 20 tokens from one account to three or four different accounts. For them, you don't want to necessarily batch them together because they are just individual transactions and you don't want a single transaction to fail just because some other send transaction failed.
00:55:57.070 - 00:56:58.820, Speaker A: So of course, a lot of work has to be done on deciding grouping the transactions into these two sections. But the basic idea comes from these flash loans once and the independent sends for ESMA tokens. Is that user specified then, or is it up to you have some sort of like algorithm that looks at the contract that the transaction is interacting with on the server? Yeah, so it has to be two ways. So there will be a basic server logic, first of all, that would consider the basic cases. Then I think it makes more sense to have users finally decide and giving them a time frame to decide how long should the time frame be and in what time frames do you want the transactions to be batched and in what time frame you don't want them to be. So that makes more sense in the long run to have inputs from the user. Cool.
00:56:58.820 - 00:57:45.550, Speaker A: And I forget, was this just token transactions or does this include like arbitrary calls as well? So these are basically any transaction and not specifically sends or token transactions. It could be like anyways if it's a simple call. So it doesn't make any sense to batch those calls because calls are anyways read only calls and they don't require much any gas for that matter. So we'd be considering, of course, those transactions which actually consider some gas, like those right operations. Transactions that consider right operations and token transfers do fall in this category. Awesome. Thank you for your presentation.
00:57:45.550 - 00:58:04.760, Speaker A: Yeah, thank you guys. Next up is Team Blockhub. Welcome. Just a note, after this project we're going to take a five minute break, but take it away, team Block Hub. Hello everyone.
00:58:11.050 - 00:58:55.026, Speaker D: Hello everyone. We are the Block Hub team and today we're going to present you Fukipay, an application we built during the hack money hackathon. We are four developers. Stephen, who worked on the bot architecture, charles on the smart contracts, vincent on the backend and Timothy on the back end as well. Our project is a trustless messaging bot application which allows any user to interact easily with the Ethereum blockchain. Our system allows anyone, by simply starting a conversation with our bot to get an Ethereum smart wallet which can spend and receive Ethereum and any other ERC 20 tokens. But to also interact easily with the Ethereum DeFi.
00:58:55.026 - 00:59:40.226, Speaker D: Our system allows the communication with two DeFi protocol ave for the transfer of token in liquidity pools for lending and gaining interest, and pTokens in order to convert BTC into wrapped bitcoin on the Ethereum blockchain. In order to use Fukipay, all you have to do is start a conversation with a bot on Telegram. Once the conversation is started, you have to set up a two factor authentication. So register the secret on your mobile phone and write the OTP. Once the OTP is confirmed, your account is now activated with Fukipay. You can now ask Fukipay to create a wallet. When you create a wallet, Fukipay will deploy a smart contract on the Ethereum blockchain in order to create a smart wallet for you.
00:59:40.226 - 01:00:19.890, Speaker D: When the wallet is deployed on the Ethereum blockchain, you can now use it on Fukipay. Fukipay allows you multiple options to use your smart wallet. You can receive funds, send funds, lend funds on the Afe protocol, check the balance, or check the transaction history. For this example, we will receive funds, so we select Ethereum. We select a specific amount to receive. We enter one Ethereum for instance, and we confirm. The bot will then show the Ethereum receive address and will also generate a QR code that we can use with a mobile wallet for instance, to scan it and send the Ethereum easily.
01:00:19.890 - 01:01:12.290, Speaker D: We then wait a little and the Ethereum transaction should be confirmed. Once the transaction is confirmed, the bot will automatically notify the user that he received funds inside his smart wallet. We can then ask the bot to go back to the main menu and check the balance. The balance should then automatically be updated with the one Ethereum we just received. You can lend diet tokens through the AF protocol by clicking the Lend button. The bot will then ask you the amount of die you want to deposit on the AV smart contract, let's say two, for instance, and the smart wallet will send them automatically. You just have to wait for the transaction to be confirmed, and once you go back to your main menu, you can check your balance and see that the Dai has been properly converted into Avdai.
01:01:12.290 - 01:01:41.180, Speaker D: The next steps for the Fukipay bot application is the integration on the Mainnet in order for users to interact with real Ethereum, but also the integration of Fukipay on more messaging application, mostly discord and WhatsApp which would allow users to be quickly onboarded on the Ethereum blockchain. If you want to try Fukipay, you can directly message at Fukipay on Telegram. Thank you for listening and we are ready to answer your questions.
01:01:47.970 - 01:02:35.410, Speaker A: Thanks guys. I think it's a pretty cool use case. My question is just around have you thought of any ways to kind of tie Telegram handles into kind of the addresses or abstract the address away at all? This is something you could do. Currently we are using the Telegram ID which is unique to each Telegram user to register them inside the smart wallet. But this is something we could connect eventually to ENS, for instance, where we could link directly a small address, easier to remember. I think this is super duper cool. Very neat to see these snappy, easy to understand, usable applications.
01:02:35.410 - 01:03:25.020, Speaker A: Do you have any thoughts on how you could bring this to market or to a user base potentially outside of crypto? Even that was the target originally. We wanted to bring people that use messaging applications like WhatsApp? Or even discord, to be able to use cryptocurrencies easily. So the bot was the easiest way to bring them. So first we are doing this in this hackathon on Telegram. But this is something that we could deploy on other messenger applications. And yes, in the end, we are trying to see how easier it could be to interact with the blockchain. Yeah, very nice.
01:03:25.020 - 01:04:19.562, Speaker A: It's a smart contract wallet. Did you fork somebody's code? Did you roll your own? We made it from scratch. We still looked at Argent, how Argent is built. So we tried to mimic the architecture to make something with some modules so it's easier to upgrade later. But for now, it's just a prototype to see if it was doable and how we could bring defy functionalities inside a smart wallet. What is the sign in flow on that contract? Is it linked to the two factor code? Or do you have a key store in the server somewhere? So there is still the Telegram bot itself that has a private key. So it uses two FA to verify the user if it's the correct user that is interacting with the bot.
01:04:19.562 - 01:05:13.840, Speaker A: But we are also offering web interface where the user can add ethereum addresses that can have access to the owner access of the smart wallet so he can use it outside of the Telegram bot. And even if he wants to remove the ownership of the Telegram bot so it can be its own smart wallet. Really cool. One quick piece of feedback is I think it would be more interesting to see spend time on getting users on the Telegram bot rather than doing more chat apps initially, just because I think this is a super cool product. So I think now that you have the first version, the key thing is to actually try to get people to use it on that version. But great work. Thank you.
01:05:13.840 - 01:11:40.410, Speaker A: All right, thank you for your feedback and comments. Judges, thank you for team for that presentation. We are going to move into a five minute break and then just after that, we'll be continuing with the rest of the presentation. So come back in five minutes. It all right. Welcome back, everybody. Hope you had some time to grab a snack, get a drink.
01:11:40.410 - 01:11:48.510, Speaker A: We're going to jump right back into it with Team Pods, of course. Can't forget the mate.
01:12:00.400 - 01:12:28.112, Speaker E: Hi, everyone. Our group is called Pods and this is our hack. For Hack Money 2020. I am Rafael. I'm Rob, and this is our team. Gee and Louise were not able to be on this recording, but they helped us a lot. So what we built for this hack was essentially a way to hack a tokens yield and let the seller of this be exposed to buying wrapped BTC or synthetic ETH BTC ratio at a discount.
01:12:28.112 - 01:13:17.956, Speaker E: But how does that work? So essentially, people are trading American put options under the hood. And as a seller a user can lock a token thus collateral to write WBTC or if BTC ratio as underlying assets for American put options and be exposed to one of the following scenarios. Which is either they will get more yield on their a tokens or they are going to buy react BTC or the other underlying asset at a discount from strike price. And as a seller, this user can probably buy cheaper hedge on the underlying asset price. But be aware that this hedge has an exposure to AVET utilization ratio on USDC pool. So this is our demo.
01:13:18.058 - 01:13:55.120, Speaker A: Rob okay, so basically, we build the front end. We have two screens here. One for the investment side, other for the hedging side. I'm going to show only the investment side. And I'm going to sell our Mint zero, zero, one WBTC because WTC is expensive. So by the way, the contracts are deployed to the coven testnet. So let me check my if scan and check my transaction.
01:13:55.120 - 01:15:05.800, Speaker A: Okay, it's confirmed already. And basically what we can see here is after loading, you are going to see if the transaction was confirmed. Okay, so we have our pod token WBC aUSDC minted. And in order to do that, we had to lock five other USDC we deployed unisoft front end for COVID and the Unisoft contracts. And we have our contract interface. You can interact from remix and check on our GitHub. So to do that, we did like one token, basically for Minting, exercise the options, one function to restribute the earned, like the interest accrued after the maturity.
01:15:05.800 - 01:15:16.510, Speaker A: And for that, we use this tech, basically React and Solidity and other solidity developer tools like Waffle Butler, so Openzotlin and So.
01:15:22.430 - 01:15:45.620, Speaker E: So as you guys saw, we still have a lot to work on our front end, but most of the part of our back end in our Solidity is already done. And we look forward to also add some design here and to implement European options with different collateral assets and underlying assets. That was it. Thank you.
01:15:46.950 - 01:15:47.730, Speaker A: Bye.
01:15:52.660 - 01:15:54.210, Speaker E: Okay, ready for questions?
01:15:56.500 - 01:16:07.030, Speaker A: So the risk of the Ave collateralization pool, can you explain that to me exactly? That's also not the only risk you're taking here, right? I mean, you could get liquidated on some front, right?
01:16:07.960 - 01:16:41.244, Speaker E: Well, so the way I would explain this is think of the options as two sides. So the seller side and the buyer side. The seller is essentially selling a hedge and the buyer is buying a hedge. So the seller is what we did here is allowing the seller to lock a tokens as collateral. So whenever the buyer decides to exercise the auction, it's going to get eight USDC tokens back. So it will get that exposure from receiving a USDC back, I think.
01:16:41.282 - 01:16:52.812, Speaker A: Was that your so I guess the part that I got tripped up on that is then you actually would need an order book. Right. Like it said, it invest in hedge, but you'd actually need some sort of order book on an actual order book.
01:16:52.886 - 01:16:54.112, Speaker E: No, we actually don't.
01:16:54.176 - 01:16:57.190, Speaker A: Well, you need somebody to take the other side at least, right?
01:16:57.560 - 01:17:23.260, Speaker E: Yeah. The way we do it is at Uniswap, so we mint pod tokens for the seller. We are tokenizing the seller position. So the seller essentially mint a pod token, and then that pod token is sold on a pool at market rate for the premium, and then buyers can go to that pool and buy it directly from there. So it's not matchmaking.
01:17:26.240 - 01:17:44.710, Speaker A: Okay. All right. That's why you had uniswap in there. I guess. I didn't quite get that. Is this like straight up Arbitrage or simply earning some money in some way without gaming the system?
01:17:45.560 - 01:18:30.210, Speaker E: Yeah, I think that this is a different implementation of option structure. So in order to get more yield on top of Ave, you could just mint options with Ave tokens inside of it and get premium for that and also be exposed to one of the underlying assets that we allowed people to be exposed to. So if that option is exercised, the person is actually buying that asset at the strike price or a little lower because Ave already accrued some interest there. So it's actually just a different implementation of options to hack yield on one side, offer different underlying assets, and allowing the buyer to get exposure to Ave as well.
01:18:31.700 - 01:18:50.360, Speaker A: Okay, thanks. Any final comments? Cool. What is the name? What does the name mean? Just as a question, just why Pods?
01:18:50.700 - 01:18:51.844, Speaker E: Why Pods?
01:18:51.972 - 01:18:52.552, Speaker A: Yeah.
01:18:52.686 - 01:19:06.972, Speaker E: Because if you think, like, Pods is like, a basket of things and what we're doing here is just we are grouping different assets with options or derivatives in different ways to form little packages of things.
01:19:07.106 - 01:19:08.748, Speaker A: Yeah, it's a cool name. I like it.
01:19:08.834 - 01:19:10.450, Speaker E: Oh, nice. Thank you.
01:19:11.540 - 01:19:27.200, Speaker A: All right. Thank you, Team Pods. Appreciate the presentation. Bye. Thank you. Next up is Team Genie. Hey, guys, what's up? I'm Leon from Genie.
01:19:27.200 - 01:20:14.820, Speaker A: And let's get started. I'm Leon, and we are building the Genie, a no loss reward platform for games and competitions. The team consists of me, tamir, brahma and fabian. This is the Genie app. Genie allows you to create challenges and competitions on top of many popular games. The rewards are generated by the accrued interests of user stakes. So how Genie works from a standpoint of a player? A player joins a pool by taking money he plays the game and while he is playing, the reward is generated.
01:20:14.820 - 01:20:45.020, Speaker A: Then he wins. Everybody gets their money back and the winner receives the reward. Now let's create a pool. Genie can be integrated with any game with OpenAPI. For example, we did an integration with Pathofixel, which is online action RPG game. Leon, are you sharing the screen? Let's create a pathophile. What you mean? Sorry, we've only seen the same slide.
01:20:45.020 - 01:21:12.404, Speaker A: I'm sharing the VLC now. Yeah, now it's changed the beginning. Sorry. Now it's good. Try to play. It consists of me, tamir, brahma and fabian. This is the Genie app.
01:21:12.404 - 01:21:46.988, Speaker A: Genie allows you to create challenges and competitions on top of many popular games. The rewards are generated by the user Stake. Maybe take it out of full screen. Okay, sorry. So how Genie works from a standpoint of a player? A player joins a pool by taking money. He plays the game and while he is playing, the reward is generated. Then he wins.
01:21:46.988 - 01:22:19.530, Speaker A: Everybody gets their money back and the winner receives the reward. Now let's create a pool. Genie can be integrated with any game with Open API. For example, we did an integration with Path of Excel, which is online action RPG game. I'm familiar. Let's create a path of Excel Pool. We will set the winning player to be the first one to reach just level two and the ticket price to be $5.
01:22:19.530 - 01:23:07.212, Speaker A: Here we can set the full name, icon and cover image, review what we did and create the pool contract. So this is the created pool page. Surprisingly, there are already four players joined and the current reward stands for five Die. Let's join the pool. Here I need to enter my passive X File account name and receive this identification token to add to my game character. Now stake five Die and join the pool. Great.
01:23:07.212 - 01:23:15.500, Speaker A: Enjoying the pool? Find your redemption. Why do the king of mind seek.
01:23:19.040 - 01:23:38.470, Speaker E: The very sand shivers with malice? There's a power. And I thought I'd be a dead woman by now.
01:23:40.760 - 01:24:05.320, Speaker A: Tamir, thanks for playing. Now we can come back to the pool dashboard and see that we got a winner. Who won the prize? I can leave a pool name now and get my stack back. Let's see how it really working. There's a couple of components. The pool contract. Who holds the funds? The watchtower and the channeling Oracle.
01:24:05.320 - 01:24:40.760, Speaker A: Who? Verifies, who won? The watchtower asks the game for the list of players when there is a winner. The watchtower. Notifies the pool contract. The pool contract. Verifies, who is the winner with Channeling Oracle. The channeling Oracle returns the winner and the pool contract rewards him with the price. So in the future, we would like to ease the onboarding introducing on earm services and gas relayers.
01:24:40.760 - 01:25:03.260, Speaker A: To do an actual test case with the Pestofxl community. Go to Mainet and introduce much more games. Thank you for your time. Join our discord for more info. Thank you, guys. Sorry for the video. That was really cool.
01:25:03.260 - 01:25:41.256, Speaker A: Thanks. Is the use case here essentially that you sort of put monetary stakes into games that are not with money originally? Yes, exactly. It's a game that's not based on money. And you can create your own stake without talking with the game developers. You can do on your own and you can do the stake, get a reward, and then you get your stake back. Okay, go ahead. It's like a pull together but for other games.
01:25:41.256 - 01:26:15.700, Speaker A: Yeah, exactly. It's like a victory of pull together. Nice. Is that useful for kind of coordinating kind of people playing games at certain times or just like other games where you need multiple people to do the same thing? I think it's a lot of real world use cases of kind of getting people online at the same time. Staking would be a fun way to do it. I think it's really cool. Yeah, I think that a couple of flows from integrations of behavior, of certain behavior.
01:26:15.700 - 01:26:52.740, Speaker A: We wanted to do just games to do one use case here, but there's also much more use cases. Have you talked to any speedrunners about using this tamir? Can you answer his questions? Because I'm not sure. I'm not a gamer. No, not yet. I think that's your next task. We want to do a proof of concept with the Pesofaxel community in the next weeks. Awesome.
01:26:52.740 - 01:27:03.780, Speaker A: Yeah. Looking forward to hearing how that turns out. Thank you for presenting. Thank you, guys. All right, next up we have Licorice Jen.
01:27:06.060 - 01:27:53.600, Speaker E: Cool. Hi everyone. I'm just going to share my screen. Hi and welcome to our submission video for Licorice Den, a liquidity generator for web3 tech using bonding curves written for the ethereum blockchain. We will show you how with our tool, one can bootstrap liquidity and use our all in one bonding curve tool service to take their token from zero to Hero and launch their token on the open market on Uniswap. Shout out to the sponsors, especially uniswap. So who is this for? Well, any DeFi creator with a good idea for a DeFi solution.
01:27:53.600 - 01:28:30.880, Speaker E: So that is everyone at this hackathon. According to our research, this kind of person is ambitious, entrepreneurial, and an expert user of blockchain technology. However, we have included a novel UX interaction in our tool that makes using the tool and bonding curves easier. A bonding curve visualization without a line graph. But more on this later. Licoricegen uses a bonding curve to collect liquidity and allows the user to launch a uniswap market for their freshly funded token. We like to call this an ibco.
01:28:30.880 - 01:29:11.384, Speaker E: Using the bonding curve as an automated market maker, the token is able to accumulate collateral once a certain number of tokens have been sold, and thus there is a certain amount of collateral in the curve, the token will transition to a uniswap market. This is done through the use of a generalized equation we have derived for the smart contracts that determines the start price and amount of tokens you can take to the market. Let's take you through the demo. Start by connecting your wallet. The first set of parameters are the basic ERC 20 token parameters. This is setting up your token name and token symbol and the address of the collateral you would like your bonding curve to use. Then we get the advanced token setup.
01:29:11.384 - 01:29:33.200, Speaker E: The advanced setup is for determining the thresholds for transitioning your token from the bonding curve to a uniswap market. First you enter your token threshold. This number is automatically scaled by one to the power of 18. Then you enter your timeout. Your timeout should be in months. This will automatically be converted to a Unix timestamp. Then you enter your minimum collateral threshold.
01:29:33.200 - 01:30:25.036, Speaker E: This threshold is a backup in case you don't reach your token threshold by the time your contract times out. The parameters for the bonding curve is the most important part when it comes to the math which we have done for our users because this will determine the price of the token until the transition to the open market. First you enter A, which determines how exponentially sloped your token is. This number should not be big as it will drastically increase your token price. B represents the slope or gradient of your curve and then C represents the Y offset carrying on to the main part of our interface. Here is the summary and results of all the users inputs. Here we have decided to take a different approach compared to the normal UX for bonding curves and that is taking the line graph out completely in our experience from building bonding curves.
01:30:25.036 - 01:31:04.260, Speaker E: Before graphs bring up more questions than they answer. These are simple, basic visual transformations of scale and color. Lastly, when the user is happy with the results, they can generate the bonding curve contract at the end of this page where they will receive the unique address for their new token. From here, the user can take this onto the free market on Uniswap and see how their liquidity has helped them launch their token. Here it is on Uniswap and they can check it out on Etherscan too. Here it is on etherscan. Ultimately, this will be great for anyone who needs a utility token for their product or who wants to raise money without using the conventional investor capital fundraise method.
01:31:04.260 - 01:31:21.850, Speaker E: And that is it a way to create an ibco for liquidity for your token. Become liquid rich with licorice. Cool. So, any questions?
01:31:24.220 - 01:31:41.070, Speaker A: I'm curious about how you explain the exponents to people. Obviously, it's like a pretty easy to use interface, but I don't know, I think I would have to spend a decent amount of time filling numbers in and trying to figure them out if I was going to use it, right?
01:31:41.840 - 01:31:59.220, Speaker E: Yeah. So that's why there's the show button, so you can go and fiddle them, see how it changes, and then get a bit more feedback before you actually generate it so you have time to fiddle and understand how your inputs affect the results.
01:31:59.640 - 01:32:05.800, Speaker A: And that's what the no graphs thing was about, is saying, we give you these numbers, we don't give you the graph because okay, got you.
01:32:05.870 - 01:32:06.490, Speaker E: Yeah.
01:32:08.460 - 01:32:33.410, Speaker A: Okay, cool. How do you I guess I will, yeah, I think I would like a graph. I guess maybe I need to go look at what the numbers were because it's hard for me to intuitively grasp how it would work without seeing a graph. I think I don't know, maybe it just may.
01:32:35.460 - 01:33:02.024, Speaker E: Yeah. A lot of the time we've made bonding curves before, me and Michal, and whenever there is a bonding curve on the page, when we did, like, user testing, it'd always be like, I don't understand what's being shown here. So I think the reason we took it out was for simplicity. You can see the end price of your token. Do you really need to grock what's happening underneath or do you just want to see the end? Yeah.
01:33:02.222 - 01:33:12.444, Speaker A: Okay. So should Yuma have used this for their sale a few weeks ago?
01:33:12.642 - 01:33:20.690, Speaker E: They definitely should have, actually. It was one of the nice use cases that would have fit perfectly in our app.
01:33:21.540 - 01:33:25.680, Speaker A: And what's the main reason for that? If you can explain that in an easy manner.
01:33:26.580 - 01:33:59.720, Speaker E: Okay, challenge accepted. So I think the biggest benefit would have been a bit more transparency around the price, like the expectations of where the price is going to be, because they could have set it up that when it reached the price, that they expected, then it would have transitioned to a free market rather than letting the free market kind of go absolutely wild for a little bit and then transition. So I think the automated market mechanism of it and then the set price beforehand definitely would have been beneficial and a bit more transparent in their initial listing.
01:34:01.260 - 01:34:11.900, Speaker A: Cool. Nice. Do you have any plans to kind of either use this on your own token sale or get this to market with a real token sale?
01:34:13.280 - 01:34:30.580, Speaker E: I mean, that's always the end goal, is to get it out into the real world. But I would definitely first like to implement some additional methods, so, like some Dutch auctions maybe allowing you to enter preexisting tokens to make it a little bit more flexible before actually shipping it out anywhere. But that's definitely always the end goal.
01:34:32.920 - 01:36:14.056, Speaker A: Cool. Awesome. That's about the time. Thank you for presenting. Next up, we have Team EEG. Like, now I'm going to share the video presenting my projects of the idea is when you're listening to music, if you enjoyed it more, you reward more the artist, and if you enjoy it less, reward it less. That makes sense.
01:36:14.056 - 01:37:24.664, Speaker A: But in real life it's quite tricky because you will need to give a grade to the artist. For example for zero to ten for each song you have listening and having things converted. The idea is to have this done in automatic way using an EET. So what you see on the screen is I get it so the phone is connected to the Et. I get the signal you can see on the screen after there is some processing and at the end you get this signal coming on the thing that kind of qualify how calm is my brain and depending on how calm is my brain I give a grade from zero to ten. So you can see I get the UG information from Muse device that is transferred to the phone via Bluetooth. In the phone you have a react native apps mixed with Java for the IP for the device on Android environments that takes the raw data sending to the server.
01:37:24.664 - 01:38:25.568, Speaker A: This is Python server. I use Python because there is much more function for signal processing. So I have kind of custom signal processing that on the server I send the result to the database. On the database you find also the reference for the artist and the song. The artist and song information are stored on SIA network and artist wallet is using Ethereum name service. After using a web server you have a rack application as you guys see where you log with portis and is able to connect to the Ethereum network and make payment to the artist with the information he have from the term name service. So for the processing there is like different brain frequency that can give different type of information.
01:38:25.568 - 01:39:51.060, Speaker A: For now, I keep it quite simple looking at the delta frequency like between zero five to 4. Idea is more like relaxation and sleep and they are quite easy to see. That's one I see with the most difference and I'm able kind of to detect quiet states and calm to the person who are in 3d. When you come to the app you need to connect to your wallet so once connected you can look for artists add this to the playlist and it worked like any player music want to unmute? Jerome? Yeah. Hello. Hi. So, just to make sure I'm clear on this, your brainwave data is deciding what music will get played for you next.
01:39:51.060 - 01:41:02.964, Speaker A: And there's auto tips as well. Based on the delta, I was more working on the tips. So the idea I have my eg like this has record my brain wave and is able to see how good I feel with the music. It takes your delta of like at the end versus or rolling average during the song versus the beginning of the song kind of deal? Yeah, something like that so it takes my brain state and see how good I feel and depending I see he's deciding a grade between zero to ten and adjusting the tip depending of that grade. Interesting yeah, I think it's the first time in the world I've checked a bit on internet but I didn't find anything. When you have like direct payment decided by how your brain is feeling this is just an interesting comment. Are you tipping the recommender algorithm or the artist? Because sometimes it's about the mood for the song rather than just how good the song is to work on how much you measure and what you are going to measure.
01:41:02.964 - 01:42:39.860, Speaker A: For now I'm just testing so it's hard to know exactly what thing but with many user, many data now with big data it will be much more easy to get something more accurate and adjusting the tipping of what you are actually looking for for your brain state. I think it's like super cool technology you're using and incredible that you're taking brainwave data and turning that into payments. I'm also curious if there are other domains where this or like obviously this is kind of a niche thing for now at least. So if there are some industry feed this type of data into a payment stream and it makes sense that's a use case. Yeah, I have another domain, but it's not about payment. It's on medical because I was looking on the COVID-19 at the moment. And the idea is to be able to check the brain state of people under medication and see to be able to dose like the morphine that you give to the people and to see how they are acting it and adjusting the dosage and giving input to the medical people on how good the drug is doing on the people and adjust the dosage because dosage on drug depending on the people.
01:42:39.860 - 01:43:23.902, Speaker A: So that may be more first stage but yeah, I'm not sure what to do with this project. It's more an experimentation now because I can go back to the US for some times and raise funds on my startup. So kind of playing with other stuff. I think it's interesting for surveys as well. There's a lot of kind of like online surveys where having kind of the true feeling of the user, the true excitement for maybe the survey question would be a good way to kind of pay out users so you could tell if they're telling the truth or not for certain. I think it's really cool. Yeah, for survey you have a lot of stuff with the eyes looking where you look at the screen.
01:43:23.902 - 01:44:05.006, Speaker A: But the good things with this stuff now this one could $150 and you can buy Chinese one for like $50. So it's kind of getting a technology that everybody can buy it and the next generation is now there are stickers that you just put on your head so that much more easy and comfortable to wear. And I was at the CES also in January and I put now in the VR they have like little stuff that you put between your VR mask and your forehead and is able to get your brain while you are playing games or doing stuff like this. Awesome. We're going to wrap there. Thank you, Jerome. I can pretty confidently say I don't think we've seen an EEG project at a hackathon yet.
01:44:05.006 - 01:44:23.320, Speaker A: So that's awesome to see. Yeah. Thank you. We're going to move on to the next team, which is hello. Hello. Howdy doing? Fine. And you? Sharing my screen here.
01:44:23.320 - 01:45:13.490, Speaker A: Hello. We've built a deed decentralized university powered by DeFi. I'm Matthias here together with Flavio and Rodrigo, we built a pool together for education where students can stake die to take courses and earn money for completing them. Also, this application can be used to deploy fully working universities 100% online. Using smart contracts, students can stake die in the classroom that's going to be invested in generate returns during the course. Students that complete the course will get a share from the interest, but you only need to submit an answer to get your Dai back. Teachers will get his good, but the students that don't submit to NASA will have their principal sent to the university.
01:45:13.490 - 01:46:28.382, Speaker A: This principal is going to be locked inside the university fund and this fund also receives resources from donations and a coach from teachers earnings. This locket die will generate interest that can be used to give grants, feel GSN, pay staff and reinvesting endowment. In the application, you can connect to the university using portis and access all the classrooms listed there. The application fetched the data from ENS to fill descriptions and images for classrooms and even students. When entering a classroom with an address that is owner for that classroom, you can access the dashboard for management and set up all the parameters you want for that classroom. The teacher can set up the records in the ENS but also the parameters of the classroom like the principal cut, the cut from the success pole and how much is going to be invested on ava compound. These settings must be set before the course is open.
01:46:28.382 - 01:47:26.730, Speaker A: For applications, the teacher can trade between Dai and link using Uniswap. Link is needed to call chainlink oracles to generate seed for random numbers and also for timestamp and alarm clocks. When a student enter in a classroom page, he can apply to the course. If he don't have the money to pay for the course, he can ask for a grant for a grant manager just need to find the address and have the score for that. Or you can make the deposit of the payment in Dai that's going to be locked in the course until the end of the duration set by the teacher of this classroom. Students also have a page with their own information where they can buy and sell ether for die using uniswap if they need to. Using Scie Skynet, students can get access to the material that teachers uploaded.
01:47:26.730 - 01:48:28.996, Speaker A: This material should be used to solve the challenge of that classroom. The student need to build and deploy a contract and call a solve function for that challenge to solve his own unique seed in order to be successful in this classroom. If he do so, he can earn the successful pool prize. When the cost ends, all investments are redeemed and transferred, and the student can claim his investments in this classroom. The funds that go to the university are used, for example, to pay for relayed calls using the GSN, automated or operated fund managers can put this money to earn interest, like borrowing and lending from compound or ave by providing liquidity for uniswap pools or by just leveraging token positions. Thank you very much. Yes.
01:48:28.996 - 01:49:35.120, Speaker A: Any questions? Hello. So you implemented all of that? Yes. Seems like a long a lot of code, like 20,000 lines of code. Pretty massive. Is the idea that this is mostly suitable kind of computer science courses where you can kind of have the smart contract validate that the users or the students completed the course successfully? Or can this be kind of like done with an Oracle as well where you can kind of validate off chain that the course has been completed successfully? Yeah, by now it's only validated by smart contracts. So, like solidity math, things that you can validate with the code, but in the future, we can implement Oracles to provide right or wrong or even a grade. That's pretty cool.
01:49:35.120 - 01:50:45.080, Speaker A: Do you have an idea? You have an idea for how you could bring this to market or what would be an initial use case that could make sense? Let's say everyone in this hackathon sees this product and 10% become a teacher. We can get a lot of people to earn money already and get 100,000 of people learning solidity this next quarter in the middle of Pandemic. And this would really create a boom for the Ethereum ecosystem, right? Yeah. Nice. I guess you have to make sure your product is focused then, but I like the ambition here. Yeah, thanks. Any other final comments? Okay.
01:50:45.080 - 01:51:23.030, Speaker A: Thank you, Team Tapioca. Appreciate you guys coming on. Thank you. Next up, we have our final presentation of today, which is Team D. Five, seven, and I'll let David take it away. What's up, guys? Let me put the video on. 1 second.
01:51:23.030 - 01:51:50.646, Speaker A: There we go. All good to go. What's up, guys? David myhal here to talk about DFI triple seven, my entry for the Hack Money hackathon. Now, I don't think it's a secret that DFI has a usability problem. To use most DFI protocols, you need a DAP browser. Those can be super confusing. You get pop ups asking about gas prices.
01:51:50.646 - 01:52:16.082, Speaker A: Now, one thing in Ethereum that actually did get fairly mainstream adoption was ICOs. For better or worse, tons of people used ICOs, and one reason that happened is they were really easy to use. Usually you would take some ETH, send it to a special address, and you'd get your. ICO token back. Maybe it moons, probably it doesn't. So what if we could take that user experience and use it for DFI protocols? We can. That's what DFI triple seven is.
01:52:16.082 - 01:52:42.534, Speaker A: DFI triple seven puts ERC seven seven wrappers around tokens and DFI protocols. Fun fact, these tokens also support metatransactions with permit and infinite flash loans. But that's not really related to this project. Let's say I am someone new to DeFi. I buy a bit of Ethan coinbase and I put it in the coinbase wallet. Now, the coinbase wallet does have a DAP browser, at least on Android, but it's still kind of confusing. When I open it, I see CDP.
01:52:42.534 - 01:53:06.062, Speaker A: Portal. I don't know what that is, but maybe I saw DFI triple seven.com with an awesome Las Vegas themed website and I realized I can use DFI without a DAP browser. Now, the first thing I want to do is I want to take some of my ETH and swap it into Dai using uniswap V two. I'm going to send that ETH to Dai uniswap triple seven ETH. That's going to swap my Dai into ETH and give me back Dai triple seven. That's the dai wrapper.
01:53:06.062 - 01:53:29.734, Speaker A: You notice that ETH is the one token that doesn't need a wrapper because ETH already has payable functions. Now maybe I want to do another swap. I can take that die triple seven and send it to MKR seven uniswap ETH. And now I have MKR Triple Seven. Now, uniswap is not the only way we can swap assets. We can also use balancer pools. Say I take some of this die triple seven and I send it to WBTC balancer triple seven ETH.
01:53:29.734 - 01:53:52.222, Speaker A: Now I get WBTC triple seven. Sweet. But of course, the best part of DFI is earning interest on your tokens. So let's put some die in Ave. Going to take some die triple seven and send it to Ave triple seven ETH. And then I will get some Adai triple seven tokens and the balance of those tokens will go up. If I want to turn those A tokens back into normal tokens, I just send them to ave triple seven ETH.
01:53:52.222 - 01:54:09.554, Speaker A: Now let's do some investing with set protocol. Going to send it to linkeathrsi set triple seven ETH. That is a mouthful. And then I'm going to get back some link ETH RSI triple seven tokens. Sweet. You might be saying these are just wrappers. How do I know I own any real tokens? Don't worry, you can unwrap them really easily.
01:54:09.554 - 01:54:34.110, Speaker A: I'm going to take some of this WBTC triple seven and I'm going to send it to DFI triple seven ETH. And now I have normal WBTC. So that is DFI triple seven. I'm really excited about it. Hopefully I can expand this to include all DFI protocols, get some security audits done so people can safely put real money inside this and create some more content so I can teach beginners how they can use DeFi from any wallet. Thanks so much. Cheers.
01:54:34.110 - 01:55:42.514, Speaker A: What's up, guys? All right, go ahead, go ahead, Joe. I was just saying that was pretty cool. I like the demo, so I'll be that guy that asks, what is the security implications of putting a seven seven seven wrapper on things? So if the wrapper if your wrapper contract is secure, then this is like because these are all, ERC, 20s. Well, obviously the context of that is that, ERC, seven seven seven was the main part of those two hacks with Lend FME and Uniswap, which was actually kind of when I got this idea. The thing with those is that the token itself is not vulnerable. Like, this token open ups the possibility of reentrancy attacks, but that's really up to the contract that receives it to have blocks in place for that. So the tokens themselves, they're basically like just open zeppelin, ERC, seven seven things.
01:55:42.514 - 01:56:37.330, Speaker A: They're not that interesting, the contracts that receive them. Mine, all have blocks to stop reentrancy, but again, obviously this does open up more opportunities for potential vulnerabilities. So I would want to get this audited more before there's real money in it, but I don't think there's any reason that this couldn't be secure. So what's the use case for wrapping it in the first place into seven seven seven? So wrapping it, obviously it'd be a lot nicer if people didn't have to wrap it and they could use normal assets. But turning these into seven seven seven S is what lets us run actions when we send it. So there's no way to send die and have something happen right when it hits a contract. That's why most apps, you have to approve it and then do a special transaction.
01:56:37.330 - 01:57:21.870, Speaker A: So these seven seven seven let us do actions like lending or swapping when a contract receives them. So you're essentially removing the need to approve, but you need to wrap instead. Yeah, but, I mean, I guess one of the best benefits is that these are all like everything in that demo was just a transfer call. So you can do it from any wallet. You don't need MetaMask, you can do it in most wallets. They let you send and receive, but they don't have DAP browsers or special DeFi integrations built. I really did you build a UI or was that the coinbase wallet? The wallet in there? That was the coinbase wallet.
01:57:21.870 - 01:57:59.760, Speaker A: I made a website to kind of show what the options are, but really, the UI is like, it's supposed to work in any wallet. If it supports ENS, then it's like a lot nicer, you just type in those ENS names. But, yeah, the idea is that it works in any wallet. Yeah, the UI is basically the ENS name. Right. I think it'll be cool to experiment with kind of more human readable ones, like Transfer ETH or, I don't know, Lend on Ape or something. That'll be just a cool if it was a sentence, I think it would let people who are less familiar with some of the protocols know exactly what's going on.
01:57:59.760 - 01:58:39.120, Speaker A: It was kind of fast in the demo to figure out where the tokens were going. Yeah, it was a fast video, but, yeah, it's cool to kind of think of ENS names as, like, user interfaces and not just, like, email addresses. Yeah, I think that's really neat. Anything else? You're getting a lot of appreciation for your beard. David Quarantine beard. Well, that wraps it for group two judging. I want to thank everybody who came from the teams to the judges.
01:58:39.120 - 01:59:21.340, Speaker A: Your feedback is very critical to the entire hackathon experience, so we a huge thanks to Evan, Joe, and Frederick for giving us their time and lending some of their knowledge as feedback to the teams. If you missed yesterday's judging session to anybody watching this or here on the call itself, it's already been uploaded to our YouTube. So go to ETHGlobal, the YouTube channel, and you should be able to find yesterday's session. And we have many more sessions throughout the rest of the week. One every day up until Sunday. I think Thursday there might even be two. So if you are interested, be sure to check out some of those other live streams.
01:59:21.340 - 01:59:28.760, Speaker A: All right. With that, I think we can wrap here huge. Thank you again to everybody. We're going to sign off. Bye.
