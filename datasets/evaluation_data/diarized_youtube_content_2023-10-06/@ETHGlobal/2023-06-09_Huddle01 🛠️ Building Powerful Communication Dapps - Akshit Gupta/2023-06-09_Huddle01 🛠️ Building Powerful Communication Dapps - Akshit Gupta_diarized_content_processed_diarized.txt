00:00:07.530 - 00:01:07.810, Speaker A: Hello hackers, this is Akshut from Huddle zero one and today I'm going to be presenting a workshop on building powerful communication DApps and tailoring DAP experiences with Iframes and doping gating. So we'll be going over two SDKs today. So one is the client SDK and the other one is the Iframe SDK. So before going ahead with the workshop, first I'll discuss about the importance of audio video in the future. These days we see a lot of short video from platforms such as Instagram and TikTok where there's a very grave importance for audio and video where people communicate with each other and users tend to retain 95% of the message when they listen it on video instead of text. So audio video is the future and it's really important and that's what we power at Huddle. So if you're not familiar with the Huddle One web app, this is what it looks like.
00:01:07.810 - 00:02:13.510, Speaker A: So once you enter the Huddle Zero One web app, this is what you get. You can have a chat, you can put your NFDS as PFPs, you can even live stream live peer or even live stream it to YouTube, Twitch, et cetera. And we also have a mobile app which you can install on either iOS or Android. So it would be really good if you go ahead and try it out before going into the SDKs, because the Huddle One web app is one of the examples of the SDKs itself because it uses it and once you get familiarized with the platform, it will be much easier for you to understand how the SDK works. So I will strongly recommend to go ahead and check it out. So at Huddle we followed a three pronged approach where we are relying on the DAP which I just showed you, and we have our infrastructure, which is our SDKs and our protocol. So our DAP is a progressively decentralizing meeting platform with all the web three native features like token, gating, NFDS, Spfps and much more.
00:02:13.510 - 00:03:10.650, Speaker A: And our infrastructure, our plug and play SDKs are also there which are supported for multiple platforms for web in which we have support for multiple languages. And then we have our protocol side which we are still working on. And we've recently made quite the development of the crypt economic side as well. Go ahead and check it out on Twitter. So at the end of this workshop you'll learn how to do two things, which is mostly customizing your Huddle iframes to white label your DAP according to your DAOs or NFT communities needs and then you can even tokenate your communication and implement access control to your DAP. So first of all, we'll be going ahead and customizing our Huddle I extremes and I'll first quickly go over the docs and show you a quick walkthrough. Then we'll do a short code along and see what we can do with the Iframe SDKs.
00:03:10.650 - 00:03:55.702, Speaker A: So I'll go head over to the hurdle one docs. So you can head over to Huddle one docs and this is what you get to check out the Iframe part. You can head over to the quick integration and select Iframe here and this is what you get. So these docs are we have support for Vanilla as well as React and you can head over to Vanilla and check out the code. It's pretty simple, you can just include a CDN script and go ahead and use this. So what is possible with the Iframe app will show you real quick. So I've hosted this example app which you can check out here.
00:03:55.702 - 00:04:43.926, Speaker A: I've also pasted the links here so you can head over to this link to check it out. And this is the link for the docs for the Iframe and you can even scan the QR code to head over to there. So once you use the Iframe, what is Achievable? Is this something similar to this? So this is Meet with wallet and they integrated had it over Iframes and they had full customization as to what they can set as background. They can white label their logo and so on. So over here what he has done is that he's made the background transparent and is toggling his dark mode and light mode. So it looks really good and blends really good with the platform. So we are hoping to see some customization relating to the same.
00:04:43.926 - 00:05:19.006, Speaker A: And this was like we did this in a closed way before. We shared it with some clients internally and tested it out. Now we have it out for you as well and you can customize your Iframes using the Iframe SDK. So let's see how we can do that. So this is an Iframe app that we've deployed. So as you can see you have a lot of customization here. You can head over to this link and play around with it so you can have support for different wallets.
00:05:19.006 - 00:06:15.570, Speaker A: So if I say all then you have these many wallets which you can customize, then you can maybe unselect some if you want, just MetaMask say. So you can just check on metawask and you'll have it there. So this is how you can customize your Iframe as well. And if you want to set the background on the Iframe, what you can do is that I'll copy and Lego. So this is a background that I had, this is from the Board Apes website. So if you say you want to build a metawers sort of a thing for Board Apes, what you could do is that you could set a background here and customize a feel for board ape holders and then you can even set avatar URLs for your PFPs from here. Then once you enter the DAP then you'll have some more customization.
00:06:15.570 - 00:06:50.674, Speaker A: So I'll connect my wallet here's and I start meeting. So once I'm in the meeting I have the option to mute myself. So as you can see now I'm muted, I can unmute. Then even I can share my screen. So it will look like this, like that. I'll share real quick and show you. So this is how it works.
00:06:50.674 - 00:07:34.430, Speaker A: So you can control the Huddle One web app from the parent app where the Iframe SDK is installed and control it that way. Then I will disable the share and then I can even add a redirect URL after the meeting ends. So say you want to redirect it somewhere to your own website. So I'll put in the adult one website link. So this is the adult one website and if I put this on the redirect URL and save this. So now what will happen is once I click on End Meeting for all, it will redirect the oval application to 101. I'll show you that and I can even send reactions from there.
00:07:34.430 - 00:08:26.894, Speaker A: So you can select any reaction and send it. So this is how you can control the huddle zero one Iframe from outside of the outside of the Huddle app. And once I click on End Meeting for on see, it redirected me to huddle zero one call. So this is how the Iframe works once you've implemented it. Now we'll be delving into how to code this using the Iframe SDK. So if you're using the vanilla for you to get access to methods for controlling the meeting, you'll have to include the CDN script inside your app and you have to render out this Iframe. And once you do that, you'll get access to this H iframe object on which we have this Iframe API method.
00:08:26.894 - 00:09:20.706, Speaker A: So using this you can set different parameters. Like over here we've set the initialized function where we've entered the background so you can do that and you'll have access to different methods over there. So for today, we'll be going over the react time frame and seeing how it can be implemented on a react app. So the first thing would be to set up a react application. We can quickly do that using next JS. And then the second step would be to install the Iframe SDK onto your dev app. And once you do that, you can just import the hadle iframe react component and paste in the URL for the meeting link.
00:09:20.706 - 00:09:55.760, Speaker A: And you can even give it class names. So it has full CSS support here as well. And once you do that, you'll have access to instance methods from the iframe API which you can directly import from the SDK. And you can then call methods such as initialize. And in the initialize you can send an object where you have different attributes that you can set as we saw before on this application. Like you have these different redirect URL only and background. So these are all the attributes that you can set to the object.
00:09:55.760 - 00:10:36.034, Speaker A: So this is how it works and let's head over to the code. So this is what the code looks like. So this is a basic react page. In NextJS, we have set up a simple NextJS project. And this is the same code as the one I just showed you, this one. So what we're doing here is we are just importing the Huddle Iframe react component from the SDK and rendering out in our markup. And we've pasted the Iframe huddle.com
00:10:36.034 - 00:11:23.610, Speaker A: link here so that you can just host any meeting. So if you'd like to have a specific room ID, you can even do that. You can head over to Iframe huddle one. And if I show you this, so this is Iframe hurdle one. And once I this and create a meeting. So now that this meeting is created, I can simply paste this URL in my code as well. So if I paste this in my code right here, that will also work.
00:11:23.610 - 00:11:57.232, Speaker A: So it'll redirect me to the URL inside the iframe. So this specific room ID, I will be able to join in the Iframe itself. So this is how it's working. And then we have a couple of other things such as Iframe API. So if you check this out, we have this initialized method being called on the iframe. So if I just remove all this, I'll comment this for now. And if I press CTRL space, I have access to these properties.
00:11:57.232 - 00:12:27.224, Speaker A: So you can mention a background here. So I've added this pixel Photos URL, which generates a random image whenever it's spawned. So that's what you see here in the browser. Yeah. So as you can see, we have just a random image popping up here every time we refresh. So this is by the Pixum. Photos API.
00:12:27.224 - 00:13:04.148, Speaker A: So we just paste this as a background URL and it works really good. Then you can even specify different wallets that you want. So if I go ahead and type this so you have access to all the I will show you in code. Yeah, so if you select wallets here and press Control space so you'll have access to different wallets which you want to show. So if you specify star here, it'll show all the wallets that we had. So it'll show something like this. And if I select a specific wallet, then it will show me that particular wallet.
00:13:04.148 - 00:13:40.468, Speaker A: So say I said MetaMask, so it will just show me this MetaMask thing over here. So this is how you can customize the wallets. And you must be thinking what this use event listener part is. So we have different events inside the event listener. So I'll show you how that works. So if I head over back to the browser and the docs, we have different events that you can listen to. So say you want to do a particular side effect on a particular event.
00:13:40.468 - 00:14:55.164, Speaker A: So if you want to do an alert when the room is joined, so you can listen to this room joined event in this format you can import the Use Event Listener from the Iframe SDK and paste the room joined event here and put whatever side effect you want inside the callback and you'll be good to go. So in our code, what we're doing is we're waiting for the lobby to be initialized. So if you head over to the Huddle application, whenever you enter the application, what happens is you see a loader before the lobby. So at that time the wallet is being initialized and other things are happening. So once the lobby is initialized and that loading stops, that's when this event gets fired and you can listen to that event using this Use Event listener. And in the callback we've put the Iframe initialize function where when the lobby is initialized, you can simply initialize the background wallets and other customization in the lobby. So that's what this is for.
00:14:55.164 - 00:15:23.320, Speaker A: So we are hoping to see really good use cases of this. And this is all we have for the Iframe. This is very simple to do. If you just head over to the Docs and try it out, it should be pretty simple, but we don't want just clones that we saw. So we saw the example app, so we don't want that. You just clone this app and just do minimal customization. That's it.
00:15:23.320 - 00:15:55.084, Speaker A: We're open for some really good use cases, so we have different APIs as well. So if you head over to the API reference, you can see we have an Iframe room API. So maybe you can utilize this to create rooms. You can token gate your meetings as well. So if you see, you can even create token gated meetings for Iframes. So if you head over to the Token Gated API, you can do that as well. So we're hoping to see good use cases.
00:15:55.084 - 00:16:47.900, Speaker A: Maybe you can create like create a meeting platform for ape coil holders where if you own an NFT a BA YC NFT, then only you will be able to enter that meeting or something related to the same. But we are hoping to look if you're using the Iframe, we're hoping to look for really good innovative ideas here. So let's head over back to our slides. That was all for iframes. And if you have any doubts related to the Iframes or anything, you can join the Arlovan Discord and ask there, or even the ETH Global Discord as well. So now we'll go ahead and head over to the client SDK. And client SDK is for the users, for the developers who want more customization than the Iframe.
00:16:47.900 - 00:18:12.092, Speaker A: So the Iframe limits you to what you can see in the Huddle One web app and it's good for people who just want a white labeled solution and don't want to code the web app from scratch and just want customization in the web app and have a meeting so you get everything done for you. But if you want more customization and you want things to look and feel the way you have your design in your own web app and you want more custom, like you want to move your viewports around and have a chat move around, something like that. So if you want more customizations, client SDK is the way to go. So we'll go ahead and see how that works. So the Hadlo and SDK offers multiple things, so if you want to bring your own wallet and have your own identity management, you can do that as well. We'll see how that works in the nearest and then we have a state management solution built in in the Hadlow and SDK. So you don't have to build your own state management and handle the state for different peers and all that, we handle all that for you and you have features like recording and live streaming, so you can record a particular instance of your web app.
00:18:12.092 - 00:19:14.080, Speaker A: So if you want that you want to record from time t one to time t ten, then you can record that particular moment by entering a bot so that can be done programmatically, we even have a video out for that, we'll link it somewhere down and then you have communication which is the basis of the SDK. So you can have audio video communication, you can have one too many communication, you can have many too many communication and so on. So we'll be delving into how we can do that. So to understand the SDK, before going to the code, I'll first explain how the architecture of the SDK works. So these states that you can see, the bold ones, so idle, initialized, not joined, joining lobby, these are all the states of the application in which it can be so you can listen to these states. So just remember these. So at one point of time only one state is possible.
00:19:14.080 - 00:20:09.024, Speaker A: So if it's an idle state, it can't be initialized. So if you are in idle state and you call the initialize function, it will go to the initialized state and in that particular initialized state we'll have this not join state and then in that particular initialized state you can call different methods to move around from the states. So say you're in the not joined state and you call the join lobby method. So it will pop you over to the joining lobby and once the lobby is joined, it will pop you over to the joined lobby state. And then if you call the leave lobby function over there, then it will get you right back to the not joint state. So it's all based on a state machine, so you can move from one state to the other and you can't simply jump up a state. So if you're maybe in not joint state and if you want to go into the joint room state, you can't directly go there.
00:20:09.024 - 00:20:48.770, Speaker A: You'll first have to enter the joint lobby state and then move on to the joint one. So it's based on state machines and it is very closed. So you have to follow a proper structure to navigate between different states. So this is how it works. So I think it's pretty clear from the idle to initialize function that you just have to call the initialize and to call the initialize function, you'll also need to supply it with the Project ID. So I'll show you that as well. So if you head over to the docs and you head over to the API key section, you can just connect your wallet here.
00:20:48.770 - 00:21:33.156, Speaker A: And once you connect your wallet so you'll have access to the Project ID, then API key and a white tested domain. So if you're working on local, you won't really need to use the whiteested domain. So you can just skip that. So you can copy your project ID and use it in the initialize function. So if I show you how the initialize function works, so you can head over to the user one hook in which you can get the initialized function. And this is how it works. So you can just import Use Huddle zero one from the React SDK.
00:21:33.156 - 00:22:22.872, Speaker A: And once you get the initialized function, you can call it inside a use effect and put a Project ID there, which you get from the API keys section. So this was the API key section, and if you want to use the Create Room API or maybe a token gating API, and we saw one for iframes as well. So for that, you'll require an API key. So if you want an API key that is also provided here. So you can just copy the API key from here and use it in your app and call different APIs. So this is how this works. So once you initialize your DAP with the Project ID, the next step is to join a meeting room.
00:22:22.872 - 00:23:10.920, Speaker A: So for joining the meeting room, first you have to join the lobby. And to join the lobby, you'll need a room ID. So to get a room ID, you have to call the Create Room API route, which is called using the API key itself. So I'll show you how that works. So over here, what you can see is that we have this API huddle zero one route and we're calling the Create room. So in the Create room, you have to specify your API key in the headers. So it looks something like this.
00:23:10.920 - 00:24:19.624, Speaker A: You can just use X API key authentication and provide the API key value here, which you get from the docs we saw before. And once you call this, you get this room ID back. So using this room ID, you can join a lobby, then join a particular room. So if we head over to the docs, as you can see in the Use Lobby method, you'll find a Join Lobby method here, and in that Join lobby, you have to specify a room ID. So this room ID is the one that you get by calling the Insomnia route and you have to call this route on your back end. So I'd suggest you call this on your Next JS server side and that will be great because you don't want to expose your API key on the front end. If you do that, then your API key will be exposed and someone might use your API key and exhaust the balls.
00:24:19.624 - 00:25:05.420, Speaker A: So I'd suggest you use an XJS server to call this API call and get the Room ID. And then you can communicate the room ID back to your front end. So this Room ID is then used in the Join lobby method to join the lobby. And then we enter the join lobby state and in the join lobby state then you can toggle your cam, your mic, then fetch your video stream and all that. So we also have an example app out for that. I'll show you that. I head over to second.
00:25:05.420 - 00:25:55.286, Speaker A: Let me just get the URL. So if you head over here, this is the example app for react Next JS and you can use this to test it out and how the functionality is working. So it's based on the state machine itself. So right now initially we are in the idle state and to get to the initialized state you can provide the Project ID which you'll get from the docs. So I'll do this again and once I have the Project ID, I can supply it over here and initialize. So as you can see now we're in the initialized not joined state which is this one. So we are initialized but not joined.
00:25:55.286 - 00:26:31.030, Speaker A: So to join the room, what you'll have to do is you have to paste in the room ID which you created using the same project ID. So you put in the room ID and join the lobby. And as you can see, you were in the joining lobby state and now you're in the join lobby state. So you have access to different methods over here. So you can fetch the video stream, fetch the audio stream and all that. Right now I won't be going ahead with that as this meeting is being recorded and my camera is being accessed elsewhere. So it won't work.
00:26:31.030 - 00:27:18.982, Speaker A: So I'll just join the room directly. And as you can see now we are in the joined room state and in this joint room state you'll have access to different, other different methods. So if you would have enabled the audio stream before, you would have access to produce cam and if you've enabled the mic before, then you would have access to produce mic, which basically means like sending your video and audio over to the other peers. So this is how that works and you'll also have access to the start recording method. So this is how the flow works and this is the basic overview of why you need the client SDK. So as you can see, this is all customized. You don't have any UI, this is all just sample code.
00:27:18.982 - 00:28:01.894, Speaker A: So you can just code out your own web app from scratch and have full customization towards what you want to do. So these are some really good client SDK examples we've seen. So, this is one of our clients called Parallax, and they've created this video meeting tab using the client SDK itself. So as you can see, they've customized the whole UI here and they even have chat. And they created the whole UI from scratch and use the client SDK. And they even have a live stream option where you can live stream via some. These are a couple of ideas that we have.
00:28:01.894 - 00:28:54.330, Speaker A: Okay, one idea is missing over here, so I'll quickly paste that in. All right, yeah, for now you can check out these ideas. So a metawers where apecoin holders can join a token gated call, which I mentioned before. So if you're using the Iframe SDK, then you can do pretty cool things with this. And we'll also be seeing what you can do with the client SDK using the Auth package. So let's go over that first. So if I head over to the SDK code, so let me give a quick walkthrough how we're working with that.
00:28:54.330 - 00:29:42.776, Speaker A: So as you can see, we've installed the Huddle and React package here. So if you check out the imports, this is the Huddle and React. And you can even clone this app using the CLI tool. So if you just type in NPX, create Huddle zero one, you'll have access to all these example apps. So you can just import use Huddle zero one from Huddle zero one React. And then what you can do is you have the initialize function as we showed before, and this is how the code flow looks. So one cool thing over here is that in your JSX, what you can do is you can do conditional things based on the methods.
00:29:42.776 - 00:30:19.880, Speaker A: So if I check out any button in my app, okay, let's check this button out. So we have the set display name function. So each and every method in the Hudlov and SDK has an attribute called Is Callable. So if you have you can just check the Is callables value. If it's true, then the function would be Callable. So you can toggle states based on that show a different UI if you want. So as you can see, Join Rome also has this is callable property.
00:30:19.880 - 00:30:57.030, Speaker A: So you can use this to conditionally render UIs and do a lot of stuff. So this is one thing, and I think we went over all the flow for initializing and joining lobby and then eventually joining the room. So you can do that using leave room as well. Like you can leave the room using this method. Once you've joined the room, then we also have event listeners placed. So as we saw before in the Iframe SDK as well, you have access to these events which you can use to have side effects run. So I'll also head over to the Docs and show you that.
00:30:57.030 - 00:31:56.740, Speaker A: So over here, if you go to events, then you have access to all these events inside the React SDK. So you can just listen to this lobby joined event. In this way you will have this use event lister and you can just paste in the event here and call whatever side effect you want inside this callback function. So this is how it's working. And let's also go over how you can have a token gated meeting using the React SDK or the Thrive SDK. If you're using Vanilla, we also have support for that, or even if you're using React native for mobile apps, you can even use that. So, what we'll do is I'll refresh this and we are going to create a token gated drone.
00:31:56.740 - 00:32:57.360, Speaker A: So I'll head back over to Insomnia and over here we'll create a token gated row. So you can call this Create Room route and have these attributes here. So here what we've mentioned is a title. So I have a Puchy penguin, a Puchy little pudgy over here, and quickly show you that. So if I go to NFTs okay, I'll switch this. And now, I hope NFTs NFT. So we're going to use this NFT to token gate the call.
00:32:57.360 - 00:33:33.890, Speaker A: So if you check here, you'll find the contract address of this NFT. You can even use a different API to do that. Okay, I'll share the browser. Yeah. So as you can see in my MetaMask, I have different NFTs. So we're going to tokenate the room using this NFT. You can find the contract address over here, and using this contract address, you'll be able to tokenate the meeting.
00:33:33.890 - 00:34:02.540, Speaker A: So we'll head back over to the Insomnia and here you can see we've mentioned the contract address. So this is the contract address of the NFT. And you can then just send the chain which you want to do it. And you also have to send the token type. So this particular NFD is an ERC 721. So we've got the token type here. And now you can token gate the call.
00:34:02.540 - 00:34:49.046, Speaker A: And if you want to fetch your NFDS, you can even use I'm using NFT port over here. So you can just send this out and paste your address here and get access to the NFDS inside your wallet. So you can even use this. So for now, we'll use this NFT. So now we have this room ID over here and you can use this room ID inside your web app where you're using the client SDK. So I'll head back over to the example app. So this is the example app I've pasted in the room ID here, and if you use the project ID, I'll go ahead and paste.
00:34:49.046 - 00:35:26.498, Speaker A: In my project ID again. So once I get the project ID, I'll paste it here and initialize. So right, you have this access token field here as well. So if you want to implement like right now, I didn't connect my wallet to this tab, so there is no way of knowing that if I am authorized or not. So if I try to join the lobby, it will show me an error. If I do this now, it says join lobby failed. That is because I didn't specify an access token and it is a token gated meeting.
00:35:26.498 - 00:36:17.746, Speaker A: So it threw me an error. So if I want to generate access token for myself using my wallet, you can head over to this author. I'll quickly show you that. So this is an NPM package. So you can go ahead and install this package, and using this package, you'll be able to authorize your user to the Huddle SDK. So it's very simple to use. You just have to install the Auth package and you'll get access to these methods from the Auth package.
00:36:17.746 - 00:37:03.510, Speaker A: And once you get the wallet address of the user, you can then use that wallet address to generate a message. And once you have the message, you can then sign the message using whatever you want. So we've implemented Bark new over here, so you can just use use sign message and sign the message. And once you do that, you get a signature back. And using the signature, you can get an access token by calling the Get access token. So to simulate how this works, I'll show you an example app. So if you head over to the Auth simulator, you can connect your wallet here and disconnect this because it's connected to the wrong wallet.
00:37:03.510 - 00:37:54.592, Speaker A: So this is some other wallet. I will connect it to my main account. Now we're connected to now we're connected to our main account. And once I click on Get message, you get this message and you have to sign this message using the sign message method. And once you do that, a MetaMask notification will pop up and you can sign this. And once you do that, you get the signature and you can use the signature to get an access to open bar. So once you have the access token, now if you head over to your DAP and paste in the access token and join lobby, now you'll be able to join the lobby.
00:37:54.592 - 00:38:52.424, Speaker A: See, now you've joined the lobby as this room was token gated. So using this access token, this access token was created using my wallet, which had that particular contract address. That's how I was able to join this token gated meeting, otherwise I won't be able to. So this is how you can implement token gating on your DAP using the Huddle SDKs. And we are looking forward to seeing really good use cases of this. I think it's a really powerful way to token gator calls and this could be a really good use case for different metaverses as well. So if you create a metaverse where you want to token gate a particular area, you can use this where people can join a particular area only when they have access to an NFT and you can then share the audio video of that particular group of people if they own the NFT or not.
00:38:52.424 - 00:39:46.856, Speaker A: So this is how it works and I hope you've understood all it was a little too much, I believe, but if you have any doubts, you can head over to the discord and ping us whenever you want and we'll try to get right back at you. And yeah, that was all for the code along part. I'll head back to the slides and these are a couple of ideas which you can see. So a metaverse where Aimcoin holders can join a token gated call and interact in the metaverse. Then you can even have a Marketplace platform renting out video conferencing and live streaming event recordings using FVM. So that's a really good use case as well. Then you can even build a social media platform which is built on filecoin maybe.
00:39:46.856 - 00:40:17.312, Speaker A: And you can allow for real time collaboration, file sharing and private communication. So it will be really good use case for data dows as well. So yeah, we missed the second point, but that's all right. You can check these out then. These are some really good projects that we saw in a couple of hackathons before. So if you see check this out. This is a customized Iframe where you have a different background there.
00:40:17.312 - 00:41:02.316, Speaker A: And we like to see some use cases such as this. Then we have different other integrations. This was a client SDK integration, so this is really cool as well. So we'd love to see projects which utilize in an innovative way rather than just cloning the apps and changing a few things. We'd like to see some really good innovative use cases of how the analyst case can be used and where you can conduct audio video calls and have people communicate with each other autonomously. So let's connect. If you have any doubts or if you want to connect with me, here are my socials.
00:41:02.316 - 00:41:15.100, Speaker A: So feel free to connect with me anytime. So that was all for today and I hope you learned something and we hope to see really good projects coming out of hack FS. Kudos.
