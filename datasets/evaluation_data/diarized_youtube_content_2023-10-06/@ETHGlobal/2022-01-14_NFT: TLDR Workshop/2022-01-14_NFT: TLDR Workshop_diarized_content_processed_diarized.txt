00:00:00.330 - 00:00:17.920, Speaker A: For NFT Hack 2022, we have the esteemed Austin Griffith going to do his TLDR workshop. With that, I'll hand it off to Austin. He'll take questions. You can put them in the chat, and we can save some questions to the end, too. All right, take it away.
00:00:18.530 - 00:00:36.662, Speaker B: Awesome. Thank you for having me. Yeah, I'm Austin Griffith. Let's go. I'm just going to share my screen and I'm going to dive in. But my plan was to just do a quick TLDR of just kind of like a high level of NFTs, but the chat is open. I don't know if there's YouTube chat, but I have the Zoom chat here.
00:00:36.662 - 00:01:04.462, Speaker B: So if you want to ask a question, throw it. Throw it in the Zoom chat. And I'll keep my eyes on that. But really, I think what I'll do is just kind of share my screen and go through just the TLDR of NFTs. So too long, didn't read. What is an NFT? It's kind of like an ownership layer in a smart contract, right? We're talking decentralized apps, we're talking smart contracts, we're talking ethereum. I'm assuming that you already are in that far.
00:01:04.462 - 00:01:30.162, Speaker B: So an NFT contract is just like an ownership layer. If we get in here and we see the code, we can see that we're going to keep track of these items one at a time. And instead of with a fungible token, we'd keep track of them. Like, Austin has a balance of ten. In this case, we're going to say there's Token One and Token Two and Token Three. And each of these Tokens has some unique information, and there's an owner to that. Token one is owned by Austin.
00:01:30.162 - 00:02:07.614, Speaker B: Token Two is owned by Andrew. Right? So you have this ownership layer that's almost like a lookup table of who owns what. And then also what is the cool unique information within this Token that you own. And we can kind of get in there and look at that. But that's the Token Uri is what it's called. You kind of just get used to knowing that there's this Token Uri that each Token has that links usually to a JSON manifest that looks kind of something like this, with an image and a description and an external URL. Usually you take that information, you put into IPFS, you get a hashback and you say that's your Token Uri.
00:02:07.614 - 00:02:43.534, Speaker B: And then in here is some kind of link to the image that we would display for that NFT. So what I'm going to do is I'm going to start with Scaffold ETH. If you haven't heard of it yet, of course, I'm here to shill some Scaffold ETH. Scaffold ETH is like a decentralized app template, helps you quickly get your decentralized app up and running. I'm going to dive into a specific subset of Scaffold ETH, the Scaffold ETH challenges, and I will probably throw that into the chat if I can find it. Let's see. Oh, here we go, here we go, here we go.
00:02:43.534 - 00:02:55.470, Speaker B: Oh, yeah. There we go. Boom. Link in the chat. I'll maybe remember to put that in the notes of the YouTube or something. I'll keep a little list there. But here are some challenges.
00:02:55.470 - 00:03:36.426, Speaker B: Basically scaffold ETH. Is this App builder? There's 250 different branches, but what we're going to look at today is just the very first challenge that I put forth. And it's basically just getting you used to Scaffold ETH, but it's also going to teach you through the mental model of setting up an NFT and what that smart contract looks like, where your assets need to go. So let's dive to I already did a Git clone and I've pulled it down. So I've run that command already. I CD in and I check out that specific branch. And then there's a yarn install and that's going to install the dependencies and then yarn chain.
00:03:36.426 - 00:03:56.406, Speaker B: And we'll have our own local blockchain. So this is Hard Hat, and since we're going to deploy a bunch of times or a couple of times, we're going to try things out. We'd rather not do this on a testnet. So at first when you're building, you're going to be talking to your own local blockchain so you can do whatever you want there and it's not too expensive or anything. Okay. And then I got to get this out of the way for a second. There we go.
00:03:56.406 - 00:04:31.170, Speaker B: Then we'll go over here and we will yarn start and that's going to fire up a front end for us. So all of Scaffold ETH comes with both your Hard Hat in the back end and then a react app with a bunch of components and hooks and all these handy things that you'll need to build your app on the front end. And it will load up at Localhost 3000 when it gets here. Now, every Scaffold ETH comes with something like this. You're going to have a contract in your Hard Hat folder. So there's a template contract. And thanks to Open Zeppelin, we can basically just import in the ERC 20 standard.
00:04:31.170 - 00:05:09.262, Speaker B: And it's a little heavy. There's some extra stuff there and you can really dive in and learn some more about this. But this is a TLDR. We're just putting something together here so we can kind of stand on the shoulder of giants. We'll inherit the ERC 721 standard from Open Zeppelin and then it allows us to basically be in control of, okay, what's going to happen when they want to try to mint one of these NFTs? Well, we'll increment the Token ID, right, and we'll safe mint. We'll make sure it works and then we'll set the Token Uri and that's that little hash that we have and then we'll return that token ID. So basically anybody can call this mint function.
00:05:09.262 - 00:05:56.186, Speaker B: And you'll set this up. You'll kind of program your smart contract the way you want and to just dive in on that just to pull that thread a little bit. This is kind of the superpower of ethereum is being able to innovate quickly, make small changes. A single line of solidity in a smart contract can create a whole new financial mechanism. So that's what you're kind of doing here within you kind of start with this standard NFT and you say, okay, what are we going to add here? Are we going to put a price curve? Are we going to maybe have the thing rendered in the contract? Are we going to make an? So it's there's a lot of stuff that you can do and it really happens at this level. This is where the innovation happens. You're going to be changing a little bit of solidity and making a whole new NFT and figuring that out, right? We could even do something I wonder if we could just revert right here or something right here, right? Or throw.
00:05:56.186 - 00:06:14.258, Speaker B: And that would cause it to not be a transfer. So like that right there. I don't know if that's actually going to work. I will have to compile it and see. But I can add a single line in there and say this thing can't be transferred. It's a non transferable NFT, right? And we just added that in one line. So there's a lot we can do here.
00:06:14.258 - 00:06:46.410, Speaker B: Let's get it started and let's get in the kind of like the dev loop where we can yarn deploy, I think is the third step. Let's go look at the yes. So we installed, we brought up the chain, we brought up the front end and then we deployed. And you can see now our contract deploys. Now if I do a yarn deploy here's, a little gotcha here, it's going to reuse that same contract. It's going to try to make sure that if we're deploying to a public network, that it's going to just not over and over deploy. So if you really want to do something like that, you can just yarn deploy, reset.
00:06:46.410 - 00:07:12.246, Speaker B: And it's going to ship that thing again and again and again. And we can because we're on our local testnet and we're not worried about spending gas, we can deploy our smart contract as many times as we want. So here's the front end. Actually, let's do this one more time. Let's go to the debug contract so we can really see that that smart contract is going over and over again. Look over here on the right in the front end here, we should see a new smart contract show up. Let me do that again.
00:07:12.246 - 00:07:36.726, Speaker B: I'm going to deploy it again. Just deploying contracts willy nilly over here. What are we doing? And then now watch that address there our collectible updates, right? So we're redeploying that smart contract every time. And the reason is so we can kind of tinker with this code and we can see it in the front end. And we can poke at it and we can kind of learn how it works and we can add new things and new features, figure out how we want it to work. So here is challenge zero. Let's see.
00:07:36.726 - 00:07:54.610, Speaker B: Let's see where we are. Here we go through and it says open up the front end. Okay, so the first thing we're going to do is learn about gas and wallets within Scaffold ETH. And what it has you do, I think, is open up like an incognito window. That's the way to go. Totally. Okay, so if I open up a new one and I go localhost 3000.
00:07:54.610 - 00:08:25.146, Speaker B: Now what we'll see here is there's a different address. If you look up in the top left here and then we look up in the top right here, there's two different addresses here. See how we got yellow? We have like yellow green guy here. Then we kind of have like purple, pink, blue, blue, pink guy here. So either one of these can just click this button, grab some money from the faucet. You can even grab that and paste it here and get money from the faucet. You can even maybe copy this dude's address and then open up this dude's wallet.
00:08:25.146 - 00:08:54.514, Speaker B: See how there's like that nice blocky preview. Let's send him $10 and ship it, right? And by the way, like, Scaffold ETH comes with all this stuff out of the box. So things like an address input, if I were to say vital whoops, it's not letting me do that. That's a bug. We'll have to fix that vitalik ETH. And it should resolve that. And then let's say I want to send him, like, let's switch it back to dollars and say $10 of testnet ETH.
00:08:54.514 - 00:09:15.920, Speaker B: So you have wallets and you have a lot of other stuff that comes out of the box with Scaffold ETH. Let's get back to the NFTs, though. So we've got an account. We've got yellow guy and he has an account and he has plenty of money. And then we got blue guy over here, blue purple guy over here. And let's just go ahead and mint an NFT with this guy. And that's going to call that mint item function.
00:09:15.920 - 00:09:47.394, Speaker B: And then let's go ahead and copy this guy's address. And now we have this cool NFT on local host, right? It's not out there all the way, but it's running on an EVM compatible network. We've minted this thing, then let's see if we transfer it, we can transfer it over to this guy hopefully, and it shows up over there. Okay, that's basically what you're going to run through in challenge Zero. But I kind of want to dive in depth a little bit more and kind of tinker with what you're actually doing here as you build that thing out. So let's see. Let's go to the challenge.
00:09:47.394 - 00:10:02.430, Speaker B: What else does it do? It has us do some minting sending around. Okay. And then we're deploying. Okay, so let's tinker around a little bit before we do any more deployments. What do we have? About 15 minutes left. Awesome. Which branch did I start with? It's challenge zero.
00:10:02.430 - 00:10:17.026, Speaker B: It's the challenge. Zero branch. If you're looking for that. Let me put it here. There is the branch I started with, right there. Okay, cool. Sent to you.
00:10:17.026 - 00:10:43.194, Speaker B: Okay, so let's look at the bare bones of this. Let's get into this thing, right? Let's look at this token. Uri. If we're going to TLD our NFTs, we kind of got to say, okay, here's a smart contract. It's keeping track of. Basically, this is a Token ID, and it's owned by this one, but it's owned by this address. But what we want to know is how does this Token ID work? How does this token uri work? And so let's just debug this.
00:10:43.194 - 00:11:10.100, Speaker B: Let's go to this debug contract and let's see where it says something about get Token Uri, right? So let's get that Token Uri for number one. So Scaffold Beef lets you kind of poke at your contract and say, what is the Token URL? It's not working. I don't know what the Token Uri is for number one. Do I have to do Token Two or something? What did I do wrong? Try let's try minting another one. Oh, maybe it's Token zero. Maybe it's Token zero. Okay, now, let's try Token one.
00:11:10.100 - 00:11:37.530, Speaker B: Yeah, there we go. Okay, cool. So it must have been Token zero. Yes. Okay, so Token One is going to give us back this address. And what the heck is this thing, right? Well, if we paste it in and go look at it, it is an IPFS hash going to the IPFS gateway, and it'll take a little bit for this to load. And if I was running my own IPFS node over here, let's see, how do I do it? I think it's IPFS Damon.
00:11:37.530 - 00:11:57.074, Speaker B: Let's see if I fire that up, if I can even ask for this information locally, and then I'll say IPFS Get, and then that hash, maybe it's going to try, I don't know. So we're searching right now. So this thing has been uploaded. And actually, I think I have in the front end, we have this. Cool. Yeah. Here we go.
00:11:57.074 - 00:12:25.914, Speaker B: Okay, so this is what that manifest looks like. It's basically a JSON file with a description and an image and an attribute. And we can upload that to IPFS and IPFS gives us back a hash. Then we can put that hash into the NFT. And that's the thing that basically you own, right? You own kind of the link to this manifest of this information. But what happens here? So if we look at this hash, let's just see what it ends with. Nine, 1D.
00:12:25.914 - 00:12:53.762, Speaker B: Let's change just like one little thing, right? Instead of green, let's say the background is red. Now watch what happens when I upload this different hash. Right. So the content that's in IPFS is content addressable. It's basically going to change. It's immutable in terms that you'll save it to IPFS and it'll just be on your machine. You have to figure out how to share it and pin it and incentivize others to share it if you want it to proliferate across the web.
00:12:53.762 - 00:13:27.434, Speaker B: Three, right, but you have it on your local box then. And then if you change any little thing, you're going to get a new hash. And so the content is immutable. And what I'm saying there is, if anything changes, the address to it will change. So by putting this information in IPFS and then putting this hash into my NFT, that data is now immutable and kind of like the link to it is stored on chain. So if any of this information changed, that hash would change and therefore it wouldn't be that NFT, that's on chain. So that's kind of like a good distinction to get into about IPFS.
00:13:27.434 - 00:13:37.530, Speaker B: Oh, look, there's even a download page. Will it download? Oh, look at that. There's the description. Very cool. Did this guy ever finish? He did not. Let's try. Can I download it here? Nice.
00:13:37.530 - 00:14:01.110, Speaker B: So within this, you've got an uploader and a downloader. You'll want to look at the metadata standards and really understand that you can do cool things like putting in YouTube URLs or MP4 s, but that's how you set up. I was going to draw something in Nifty ink too, and make one, but I didn't get to it. Oh, there it was. There it was. Okay, well, it was there. We loaded it from IPFS for a second from the IPFS gateway.
00:14:01.110 - 00:14:53.098, Speaker B: So you can always go to IPFS IO, slash IPFS, and then give it your hash. I probably need to zoom in there, but there's basically the manifest that we're talking about, right? So you'll craft a manifest, you'll upload it to IPFS, you'll get a hash back, and then you'll put that hash in as the token Uri. And what we have here is we have like a little mint UI right? There's a user interface for use so you can connect your wallet and you can mint these NFTs. And the way it's doing it is it'll mint. Basically. There's a set of like ten, and for any given user, it will start from zero and kind of mint through the different images. So this is a really good local way to just tinker and play around with how to build an NFT and it'll get you started.
00:14:53.098 - 00:15:33.094, Speaker B: And it kind of has the artwork there, so it'll kind of have everything ready for you so you can deploy things and just tinker around. You don't have to come up with the artwork, but eventually, yes, of course you should be as an artist bringing in the artwork and uploading it. But in this challenge, basically your job is just to get these things minted, get them sent around. But the whole thing is all about tinkering and figuring out I kind of like that idea of making a non transferable NFT by just like, reverting here. Can I just do that? Is revert legal? Here's how you find out. You make a small change and you go over here and you try to deploy it and you see what happens. Right? I don't know if I can even revert it.
00:15:33.094 - 00:15:54.302, Speaker B: Didn't break. Okay, cool. So now we've deployed a version of this where I'm thinking they're non transferable. So if I try to mint one, does it? Oh, no, it does. Okay, so it won't even mint because it's probably doing a transfer. Okay, so maybe that's not going to work. Maybe we'll have to do something different.
00:15:54.302 - 00:16:15.474, Speaker B: There I was thinking I could break the minting process by changing it by just breaking that, but maybe that mint has to happen. Yeah. So maybe I won't be able to. Let's make sure I can remint and make sure this works again. Okay, it works again. All right, let's make a different change. Let's do this.
00:16:15.474 - 00:16:52.560, Speaker B: Let's make a unit 256, and we'll call it price, and we'll set it equal to 0.1 ether. Okay. And then what we'll do is we'll make this mint function payable, and we'll make the front end have to pay us a little bit of money to put that in. And then we'll do something like price equals well, first we'll have to require right. We need to write a rule here that says the message value the money basically coming in in this transaction needs to be greater than or equal to the price. Or we'll say not enough.
00:16:52.560 - 00:17:24.262, Speaker B: Okay. And then we'll go ahead and do one other thing, and we'll say price equals price times what? 101 divided by one. So it'll go up by one time you purchase something. Let's see if that compiles and deploys. So at first, we just had a little NFT contract that let us click a button and mint NFTs. And with one line of code or maybe two or three lines of code, we added a price curve and we set it up. So now you pay to mint an NFT, and the NFT price goes up by 1% with each mint.
00:17:24.262 - 00:17:52.002, Speaker B: So the last thing we would do here is we would dive into our front end and we would find that mint button, and I have no idea if I could find it in time to figure this out. Yeah, sure. Let's see. What are we doing? Yeah, we're calling that. I think I need to send in a value of, like, 0.1 for that first one. Now what we'd want to do here is probably track the value and make sure we pay the right amount.
00:17:52.002 - 00:18:12.780, Speaker B: But let me see if I can just hack this together to get this first one to it's still saying not enough. Wait, let's see if it still says not enough. Even when I do this. Oh, no, it's underflow. Let's make sure. Underflow. What did I break here? Maybe I need to do something like this.
00:18:12.780 - 00:18:43.090, Speaker B: I don't even know what I broke. Let's try deploying that real quick. We got, like, seven minutes left, and then we can open it up to questions. What I want to do here is finish this off by pushing this out to a live network that kind of mimics a test net somewhere. But I was hoping you know what? I'm going to take the price stuff out just out of simplicity, showing you you can kind of iterate quickly on this stuff. But I'm going to take out that mechanic. I'm going to say we're not going to pay for it right now.
00:18:43.090 - 00:19:03.642, Speaker B: I'm just going to yolo these to a testnet if we can get it to work. Let's see. Okay, good. All right, so it's basically a symbol NFT, where you pay the gas to mint them. The IPFS stuff is loaded up. I think there's, like, a script in here somewhere. You can get in and dig into this code a little bit more and learn a little bit more.
00:19:03.642 - 00:19:43.446, Speaker B: Let me see if I can find a good these upload scripts are pretty handy. No, that's a different one. But what you do usually what you'll do is you'll create a script that loops through your assets and uploads them to IPFS, gives you the hash back, and then you'll put those hashes into your contract somehow. Okay, let's deploy this thing. Let's say you've tinkered with your Scaffold ETH build long enough, you like the way it looks, you're ready to deploy it to a public network. So what do we do? Well, we're going to go and we need to create an account. So you'll have to follow the instructions that does get to this.
00:19:43.446 - 00:20:11.722, Speaker B: And it does have a Yarn generate. Yeah, it does. Okay. But I'm going to just kind of do it on the fly because we don't have too much time here. So I'm going to do a yarn generate, and Yarn generate is going to create a local deployer mnemonic, and then I'm going to say yarn account. And that's going to give me a nice little QR code of my account. And then I'm going to take a handy little punk wallet built with Scaffold ETH, and I'm going to scan that QR code and send some rinkabee.
00:20:11.722 - 00:20:25.550, Speaker B: How much? Send. $599 of rinkabee. Send. I did it wrong. Send. There we go. All right, so some rinkabee is in flight to our deployer.
00:20:25.550 - 00:20:45.386, Speaker B: Now we're ready to go. If I do a yarn account again, hopefully it'll say that we have some rinkabee. I'm just going to assume that the wallet and the send and all that is going to work. Be careful. As a developer, sometimes some of these testnets fall over and you're doing everything over here, like, why isn't this working? It might be the whole testnet, but usually it's you. Okay, here we go. Let's deploy this thing.
00:20:45.386 - 00:21:17.842, Speaker B: So I'm going to say Yarn deploy, and I'm going to say network is Rinkabee. And here we go. Now, that could be mainnet, right? Like, if I would have put mainnet ETH into this account and I said yarn deploy, network, mainnet, it's going to go just like it just went here. And we can go check that stuff out. But here's the change you need to make in your app. So we sort of pointed the satellite, the deployer satellite to Rinkabee. We need to point the app satellite at Rinkabee to go talk to Rinkabee because if we go over here, we can see that we're still talking to localhost.
00:21:17.842 - 00:21:40.122, Speaker B: So let's go to our app and let's find the target network. And let's say rinkabee. One change the one line. I changed one line of code, and now my app is pointed at Rinkabee. Now every address in my app, anywhere there's an address component. If I click that, it's going to go to the Rinkabee Block Explorer. It's going to use all the Rinkabee stuff.
00:21:40.122 - 00:21:58.946, Speaker B: I switch that to mainnet. Everything works on mainnet. So deploying to different EVM compatible networks is going to be very quick. Let's see. Is our contract out here? Is it like on rinkabee? Can we go see it? No, it is not there yet. But maybe just ether scan hasn't found it yet. Like, maybe it's there.
00:21:58.946 - 00:22:12.390, Speaker B: Let's check. I don't know. Let's try to mint an item. Right? Okay. So now you've noticed I haven't done any MetaMask stuff because I've been using Burner wallets. Now that we're on a public network, now is the time to connect your MetaMask. And it's going to say, oh, you're on Main net.
00:22:12.390 - 00:22:34.302, Speaker B: Don't forget you need to be on Rinkobee. Those little network warnings and pointers and this nice little button to make this automatic that comes out of the box with Scaffold ETH. And it's just nice to have here as you go through those challenges. I don't know if our smart contract has deployed. I'm going to try to hit mint here. We're going to see what happens. But I feel like it's like 50 50.
00:22:34.302 - 00:22:59.538, Speaker B: Whether or not this thing is going to actually mint, let's find out. You got the nice block native notifications. Now, if we click that, I bet it'll take us over to a transaction. All right, here we go. Let's see if this thing mints. And so now that we've got the front end built and ready to go, you've deployed your smart contract, you've pointed your front end at Rinkabee. But you need to do one more thing.
00:22:59.538 - 00:23:24.118, Speaker B: You need to do a yarn build. And this is going to create a static version of your site and prepare it to be deployed to some kind of CDN or some kind of, like, static web server. But, oh, look at that. Look at that buffalo on Rinkabee. I bet I can transfer it, too. That was the other thing is let's see if I do Vitalik. We were just tinkering with whether or not we could deploy these things.
00:23:24.118 - 00:23:47.060, Speaker B: I'm going to try transferring this to Vitalik and see if it goes I don't know. Looks like it's going. Looks like it's working. Looks like it's working. And again, this is on a public testnet that mimics mainnet. So if you get in and you figure out how to do this on a test net, it's going to work the same way on a main net, just a little bit more expensive. All right, let's see what we've got.
00:23:47.060 - 00:24:16.014, Speaker B: Anything in the Chat that I need to be I think we're looking pretty good. If you've got questions, drop them into the chat. I think for the last 15 minutes, we'll kind of like, open it up and talk through it. But what I want to do is build this app and actually put it out there live so other folks can go in and spend a little rinkabee and mint yourself your own little buffalo painting. And I'll do that kind of as we go. I think there's a Q and A right now. Maybe there's a Q and A, maybe not.
00:24:16.014 - 00:24:37.362, Speaker B: Maybe we can tinker with some other stuff. I probably could have built that price curve in. I think we're supposed to go for the next 15 minutes. If anybody has any questions, drop them to the chat or just shout them out. I'm down to talk some more. You guys let me know which version of Node? Good question. Let's look.
00:24:37.362 - 00:24:48.358, Speaker B: I think I'm actually, like, on 14 right now. Let's see. I think I just saw someone unmute. If you have a question, shout it out. Yes, I'm on version 14, but twelve works great. What's the question? Let's hear it. Yeah.
00:24:48.358 - 00:25:11.742, Speaker B: How these collections works only if you have collections. Collection is like just contract and that's it. Or there's something else. I would say yes, a collection is a contract. Like, if you have one contract and then a bunch of them are minted from that. But I think OpenSea, like, the way they minted it, they minted it all in a single contract and you could have multiple collections in their contract. But I think the answer to that is yes.
00:25:11.742 - 00:25:33.030, Speaker B: In general, a collection, if we go to OpenSea, in general, a collection is going to be let's go look at the lugies. Oh, it says I'm on a testnet. Oh, wait, we can go look at this on a testnet. That's even cooler. Let's grab our smart contract address and let's leave it on testnets OpenSea. And what do I do? Create. What do I oh, yeah.
00:25:33.030 - 00:26:02.782, Speaker B: Sign in messages. We're signing messages. But yes, I think the answer to that is a collection is almost always a smart contract, just the NFTs deployed from that contract. But I think there is some other situations where you can. Have multiple collections within a contract that's not wait, I want the little thing where it's like you already have deployed. Maybe it's already going to work though, right? Let's go, let's go to my profile. I probably have yep, there we go.
00:26:02.782 - 00:26:11.634, Speaker B: It's already there. There we go. There's my collectible. There's the zebra. Let's see. And if I click on this, it's going to take me to that. And if I paste in the smart contract, that's it.
00:26:11.634 - 00:26:26.710, Speaker B: And this is probably owned by Vitalik. Now that's so cool. And if I look at token number one, it's a zebra. Okay. So, yeah, here's the collection. You can even see some of the properties. The background is blue and the eyes are googly.
00:26:26.710 - 00:26:49.280, Speaker B: The app is about ready to deploy. I'm going to go ahead and ship that while we're waiting. But if you have oh, there's some good questions here. Hold on, hold on, let me read, let me read. Sorry about the mic. Let me read. What's the question regarding IPFS and Uri storage? Hold on.
00:26:49.280 - 00:27:28.034, Speaker B: Okay. How do you automate here we go. No, this is a great question. How do you automate linking the Uris? So basically what you end up doing is you create a deploy script and you deploy your token. But then within your deploy token, you can grab your collectible and you could do something like Mint item or you have some other scripting or you have it built into your contract where whichever. The first one that's minted will use this hash. The second one that's Minted will use this hash.
00:27:28.034 - 00:28:11.134, Speaker B: The third one that's Minted will use this hash. But really, I think the answer there is how do you do it? For 100 is you write a script and you automate the fact that it grabs the image, drops it into IPFS, gets the hash for the image, then crafts the whole manifest, and then puts that into IPFS, gets the hash for that, then it takes that hash and puts it into a handful of different things. It could be directly into the NFT contract. It could be into some kind of merkel tree that says, what are legal Mints? There's a lot of different ways you could do that, like how you get that in. But basically the answer is you write a script to do it and there's scripts here to help out with that. Hopefully that helps answer that question. Oh, royalties.
00:28:11.134 - 00:28:41.500, Speaker B: This is another really good one. So almost always royalties are basically built in and centralized. They're centralized to the marketplace. They're almost never built into the contract because it's a complicated thing. Let's say we built royalties into the contract. We could say something like, okay, well, every time they transfer, we want to send 2% of the royalties, or something like that. If you do that here, the NFT contract itself has to hold value.
00:28:41.500 - 00:29:08.886, Speaker B: And what you could do is just maybe you have a bonding curve. Maybe these things are bought and sold on a bonding curve. And every time they're transferred, you trickle some of the value that's locked up in the bonding curve to the artist just by hooking in right here and doing that right. But without the NFT contract itself holding value, it's hard to build royalties directly into the NFT. It's been done. People are trying it. It's something neat to check out.
00:29:08.886 - 00:29:42.258, Speaker B: Along with SVG NFTs and crafting NFTs and L, two NFTs and so many other gamified cool NFTs that are happening right now. But yes, you could build royalties into your NFTs. And that's a good thing to be thinking about for an NFT hack, is how you could build those NFTs in. Awesome. Okay, so I'm going to yarn surge surge. And this could go anywhere. But we'll do domain and it will be I don't even know Austinnft surge sh.
00:29:42.258 - 00:30:02.918, Speaker B: Let's see if this will even work. It's probably a taken domain. No one owns Austinnft surge sh. So now you at home. You can go to Austinnft surge sh and mint yourself some fantastic rinkabee buffaloes. You can get in here and connect your OOH. Let's do it with wallet connect.
00:30:02.918 - 00:30:17.226, Speaker B: Right? Let's do that. So I'm back to my little punk burner wallet here. Let's go wallet connect. Let's hit scan with our punk wallet. A web wallet that can do wallet connect. That is fancy. Now we're logged in.
00:30:17.226 - 00:30:34.834, Speaker B: Now if I go here and I hit mint NFT, it's not triggering it did. There we go. There's the transaction. And I hit. Go. Yes, I would like to invent that NFT. And now punk Austin Griffith through a punk wallet on my phone through wallet connect.
00:30:34.834 - 00:31:02.586, Speaker B: Minted an NFT on a testnet in a DAP that we created in the last 30 minutes with scaffold e from a tutorial for free. And it's all open source. Can you tell? I love this stuff. Okay, so we minted an NFT. Anybody can go to Austinnft search sh. Anybody can grab this code. This is actually the very first challenge of I'm going to leak some alpha here.
00:31:02.586 - 00:31:35.938, Speaker B: If you've been paying attention this long, you may know about this or you may not. But a great way to learn about ethereum development is speedrunetherium.com. And it's still in beta because we don't have all the auto grading stuff work. So if we get like 1000 submissions, we'll have to do that manually. But this is challenge zero in speedrun ethereum.com. So if you go to speedrunethereum.com and you click quest, you will go through all the same stuff that I just went through here live, but at your own pace, where you can tinker with the code and follow along with the instructions.
00:31:35.938 - 00:31:56.626, Speaker B: And when you're done, you'll submit your challenge. And what's cool is then I can review those submissions and I can see who all's turning in what. And I can see what builders are building what. And you can build up your kind of web3 portfolio of all the cool things you've built. Holy moly. I'm shilling everything here. We've got rinkabee NFTs we're minting the NFTs.
00:31:56.626 - 00:32:13.294, Speaker B: We've learned a little bit about IPFS and how the NFT smart contract works and how Ethereum can. Let's see. Challenge, speedrun. Word. Yeah. Heck yeah. The speed run is getting better and better.
00:32:13.294 - 00:32:43.100, Speaker B: Like I said, we don't have auto grading there, so I kind of shill it on the DL a little bit. But if you've stuck around for 40 minutes, I think I can shill you something. Let's see, there's 25 people watching, all right. And who might watch from home later? Who knows? Who knows? Any more questions, shout them out, let me know. Hit me up. Also, I'm Austin Griffith on Twitter and Telegram. So if you just go to Twitteraustingriffith, you'll see this dude right here? That's me.
00:32:43.470 - 00:32:44.330, Speaker C: Follow along.
00:32:44.400 - 00:32:54.522, Speaker B: Follow me. Holler at me. DMs open. Let's see what else can we get into. Any other questions? Let's see. I think we got about seven minutes left. I've already minted the NFT.
00:32:54.522 - 00:33:25.590, Speaker B: I could remint the NFT. What else could we get into here? Hey, Austin. Great content, man. This super duper. Hey, as far as just the website goes, can you talk a little bit about that as far it looks like it's all next JS, and can you talk about that? Heck yeah. So that's totally like the other half of this, right? Is this front end, right? And like I said, we changed that one variable and the whole front end kind of changed. And now I can click on this and it's going to take me to the Rinkabee address.
00:33:25.590 - 00:34:09.106, Speaker B: Right? So the front end is I think originally it was Create react app. So any Scaffold ETH build is going to be a workspace where you have hard hat and a create react app and then some GraphQL, like graph the graph stuff, and some other services that kind of come along with it. But the front end, let's get into it. Yeah. So the front end is a react app, and it's going to have, like, wallet connect and web, three modal and network warnings and a ton of different components that you're going to use. But what you'll really get into is find that there's all these really handy hooks here, and here's a hook to get the contracts to read from them. This is just a great example of an Ethereum hook, right? Use balance.
00:34:09.106 - 00:34:44.114, Speaker B: Classic ethereum hook there, right? You throw in a provider, you throw in an address, and just in the front end, it's going to keep in your front end state this local balance that you can access whenever you want. Right? So I could grab that local balance and I could go put that in. Let's see, what kind of front end stuff do we have? There's a lot here. So there's this whole react router stuff. And you've got these tabs, right? Up here and then you've got these views here. So here's the mint NFT button for real quick. I'm just going to add that local balance here and just show like a real quick gotcha of the front end where you need to kind of do one of these.
00:34:44.114 - 00:35:01.622, Speaker B: You need to do like what ethers utils format. Ether. And then we put in the local balance. Let's see what that looks like. Okay, so I hit save and our front end should ha reload. And if I go look at the local host version, let's see if we yeah. 0.0.
00:35:01.622 - 00:35:39.954, Speaker B: There is my balance there in what? ETH? Yeah, that's Rinkabee ETH right there. Right? So that's just another variable that's tracked in the local state. So you've got a create react app, you've got a local state, you have a bunch of hooks keeping that local state populated. And then when you want to like let's say we want to I don't know, let's say we want to make a transfer button or we want to have a send button, right? What you would put in there. Where are we editing here? I don't know why we're putting it in here, but let's throw a div in here and let's create an address, right? Just just something along those lines I think you'll probably need. Let's see. Let's go.
00:35:39.954 - 00:35:54.374, Speaker B: Oh no. What did I do? I think you'll probably need to there's a good example. There we go. There we go. So you need to put in an ENS provider. I'm just going to put the ENS provider in there. Let's see.
00:35:54.374 - 00:36:31.438, Speaker B: Let's just do address input and then ENS provider and hit save. And hopefully what that does is create an input field. But it's more than just an input field. It's a web3 input field where it's got a QR code scanner. So if you're running a mobile app, it'll open up your scanner and let you scan for an address. Right? And if you type in here, it starts to give you a blocky preview and it does stuff like ENS resolution. So along with all the stuff I've talked about, there's a bunch of components that are just native to web3 that I found myself needing every time, like every hackathon I set them to build, just like you're about to do for this weekend.
00:36:31.438 - 00:36:58.710, Speaker B: And I always found myself building another address input field with a blocky preview that does ENS resolution. Right? So all that stuff is kind of built into Scaffold ETH. So you can just bring in the stuff that you need and focus on the innovation stuff. Right? Again, I'm going to shout it out forever. The superpower of Ethereum is that you can innovate on top of this decentralized network very easily. You can make small code changes and invent whole new mechanisms. I think we have one more question out.
00:36:58.710 - 00:37:12.866, Speaker B: Hopefully that kind of answers the front end. There's a lot of components there. There's buttons. There's just a ton of components that you'll find that you'll need as you go through. Go ahead. Yeah, let's hear it.
00:37:12.968 - 00:38:06.930, Speaker D: First of all, Austin, you're the best. You work so hard and you're like, teaching is like the foundations for so many other great things, so much respect. So I missed some of this, but I've done your speed run a few times and you're the best. Okay, so here's the question in a nutshell, without revealing too much of my idea, which is I think going to be groundbreaking, but the thing is I don't really understand how to do these external contract calls. Could you demonstrate writing or deploying a separate contract that lets someone do an external call to one of these NFTs and set like an approved transfer? Because I was talking with a mentor and he said this sentence which maybe you'll understand the transfer from safe transfer from calls, both happen atomically in call approved.
00:38:13.190 - 00:38:50.862, Speaker B: We did a TLDR, we got a couple of minutes here, we can talk through it. I think the TLDR there is that you can't just send a token to a contract, okay, like say I want to build a marketplace and I want people to send in tokens that they can sell on that marketplace. You can't just yolo a token. I can't just say transfer from bomb and send it to there unless it has a receiver. And there's a bunch of other things there of creating a receiver. So there's this approved pattern. So you have to make one transaction to the NFT contract saying, I approve this other contract to take you out of there and it to own it.
00:38:50.862 - 00:39:53.378, Speaker B: And then you make a second transaction that says, okay, now on the marketplace, go ahead and go get it now I've approved it. And then we'll do some things like list this thing for one ETH for sale and atomically in that transaction it goes and grabs it and now the NFT contract holds it. And that's the only way for the NFT contract to know like, oh yeah, now I have it, now I can do stuff and then it'll do that other stuff where it sets it up and gets it sold on the marketplace or whatever. So the TLDR there is there's an approve and then a transfer from there are some contracts that hook into and catch this, which is really cool. You set up a receive function and when the transfer happens, it calls the receive function in your contract and you can process some stuff. So check out, I think it's just is it ERC 721 receiver? This receiver you could put into your contract and then yes, there it is. It says on 720 received it returns these specific four bytes that say, yes indeed, that was the right thing to call.
00:39:53.378 - 00:40:32.294, Speaker B: But before you return those bytes, you can actually process and do some things there. So hopefully that made it make sense but just to zoom out real quick again, it's just like you need to tinker and understand this approved pattern, but you also need to understand just contract to contract communication. And the best way to do that is challenge two of Speedrun Ethereum. Challenge two is going to build you deploy an ERC 20 Token. It's very similar. And then you deploy a vendor and you set it up so the vendor talks to the ERC 20 contract. So you have contract to contract interaction for the first time and it shows you how to do that within a contract.
00:40:32.294 - 00:40:45.510, Speaker B: So I kind of answered that at two different angles. Thank you. Hopefully that makes sense. Yeah. But I would also just like for context, I would just speed run this challenge too, that I have here, too, and I'll paste that into the chat.
00:40:45.850 - 00:40:46.454, Speaker D: Awesome.
00:40:46.572 - 00:40:46.950, Speaker B: Yeah.
00:40:47.020 - 00:41:06.010, Speaker D: So you're saying that we can abstract from ERC 20 to 721. It's the same sort of thing. It's not like we could hold the NFT in escrow in the contract. Is that what you're describing or you're pointing in another sure, sure.
00:41:06.080 - 00:41:22.910, Speaker B: You could hold the contract in escrow. I guess maybe. I don't totally understand the question, but I thought it was you were having difficulties let's say you have an Escrow contract and you have an NFT contract and you're having difficulties making those things talk and having the NFT get sent to the escrow contract.
00:41:22.990 - 00:41:23.570, Speaker D: Yeah.
00:41:23.720 - 00:41:57.066, Speaker B: And what you would do is you would make an approved call on the NFT contract telling it that the Escrow contract can take it, and then you would make another transaction on the escrow contract that grabs the NFT. So there's two transactions there. Or you build the escrow contract to have this receive function in it. And when someone safe transfer from the NFT to you, you receive it and you operate and you say, okay, we've got this new thing in Escrow and it creates an escrow there for that. Hopefully that makes sense. You got it. Cool.
00:41:57.088 - 00:41:57.434, Speaker A: Thank you.
00:41:57.472 - 00:42:31.606, Speaker B: Cool. Yep. Hey, Austin, one more question. Can you talk about Chainlink a little bit? I know Chainlink is a big piece of this. What do you use it for? Chainlink I would use for doing if you need verifiable random, like most NFTs that do random, just use like, previous block hash or something similar to that. If you really need really expensive randomness, you can use VRF. You also can use Chainlink for something like, what if I could mint an NFT that looks outside and if it's below freezing, the NFT has snowflakes in it or something like that.
00:42:31.606 - 00:42:49.502, Speaker B: Right. So if you wanted to use like weather data or some kind of other API data, you could use Chainlink to integrate that into your NFT. Thanks, Andrew. We good. We still rocking. I think there's another question there. Yeah, we're still good if you are.
00:42:49.502 - 00:42:57.790, Speaker B: Okay, sure. I think Joanna had her hand up. Go ahead. Oh, you're muted. Careful.
00:42:59.910 - 00:43:36.954, Speaker C: Sorry for my silly question. I am trying to follow you and it's super hard for me. First question. If I can watch again in YouTube in a slow motion, maybe I can use your open source to do my test in my project because I am super overwhelmed. I was doing so many talks yesterday and today and I don't know if this is normal because I cannot find a hacker teammate. I can learn very fast. I can super learn because you are super enjoyable explaining everything.
00:43:36.954 - 00:44:17.066, Speaker C: But it's really hard for me to follow and I need to make an interface to make something super useful. I would like to put the passports on the blockchain NFT passport. I would like to make an interface to connect proof of humanity when people verify their identity with everything, with eyes, with voice, with face, with video. And then they can get directly from OpenSea a digital passport, an NFT passport. So this is not an artist. This is something that I would like to do it. I would like to test in ribbon key like you show.
00:44:17.066 - 00:44:29.820, Speaker C: But it's so hard for me to follow you and I need some suggestions. So yes, Sean, I start to do this because I am feeling that I have to hack solo. I can do it, but I need some support.
00:44:31.230 - 00:44:50.660, Speaker B: I think there's two angles here. First of all, I pasted a simple NFT example so it's an even more simple NFT example. Please run through that. There's a couple of different content where it's like nice and slow and you walk through it. But I think on the other side of it, andrew might be able to help us with this. There's probably like a good support channel and a good discord that we can go to. Is that true, Andrew? Absolutely.
00:44:54.330 - 00:45:03.314, Speaker A: So there's a team formation call coming up at 630 Eastern. So in ten minutes, if you join.
00:45:03.362 - 00:45:04.922, Speaker B: That, it'll be a call like this.
00:45:04.976 - 00:45:19.038, Speaker A: And you can try to form a team. And then there's also team formation channel in the discord. And then there's a mentoring channel, which is the debugging channel. You can ask any question.
00:45:19.124 - 00:45:30.954, Speaker C: Yeah, but I was asking to the last three days I was asking for a teammate and I couldn't find yeah, it's tricky.
00:45:31.002 - 00:45:31.706, Speaker B: It's tricky.
00:45:31.818 - 00:45:36.100, Speaker A: But the next event is the best way to keep moving on that.
00:45:36.470 - 00:45:58.666, Speaker B: Don't be discouraged, just keep building. That's a trick. You almost have to get in the habit of just building and throwing things away. My first eight ideas were your in the just get in the habit of building prototypes, trying them out, seeing how people use them and iterating on that loop and scalable. Great for chill. Yeah. Thank you.
00:45:58.666 - 00:46:02.598, Speaker B: Good luck, hackers. Thank you for having me. Happy bow tie Friday.
00:46:02.774 - 00:46:03.766, Speaker A: Thank you, Austin.
00:46:03.798 - 00:46:04.458, Speaker B: That was awesome.
00:46:04.544 - 00:46:13.400, Speaker A: Once again, we'll close this out and reminding people there's a team formation session. The link is in the discord. See you later, Austin. See.
