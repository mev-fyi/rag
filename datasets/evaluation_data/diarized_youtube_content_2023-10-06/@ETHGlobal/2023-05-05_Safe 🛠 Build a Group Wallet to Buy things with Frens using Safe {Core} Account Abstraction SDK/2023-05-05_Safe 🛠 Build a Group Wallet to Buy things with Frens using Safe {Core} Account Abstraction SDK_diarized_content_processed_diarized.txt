00:00:07.290 - 00:00:40.770, Speaker A: GM Tokyo, everyone. My name is Tommy WA and I work at Safe, and I'm going to talk today about how to make a group wallet for buying things with friends using smart contract accounts and SafeCore account abstraction SDK. So a while back, me and a couple of our friends, we went on a ski trip together. And the trip itself was fun. We went skiing, we had some great food, we had to stay in nice airbnb. But there's one part of the trip that I really didn't like and I found super annoying. Anybody know what it is? Whenever you're gone a trip with a bunch of friends, what is the most annoying part of the trip? Splitting bills.
00:00:40.770 - 00:00:57.120, Speaker A: Exactly. So this is some screenshot that amissage text group chat that we had of trying to organize the payments on the bills. Hey, pay me this for the food. Don't forget to pay me back for the tickets. Airbnb. Why would you pay me back? And I was part of the problem too. About a week after the trip, a friend messaged me saying, hey, you still haven't paid me back.
00:00:57.120 - 00:01:26.166, Speaker A: And so let's figure out why is splitting the bill so hard? So let's say, for example, me. What's your name? Bankless? Brazil. Joan. John, what's your name? Saki. Me, John and Saki want to go on a ski trip to Mount Fuji together in beautiful Tokyo. What do we have to do? Tickets. What else do we have to figure out? Logistics, food, where we're going to stay, right? So just the three of us, we want to go on a trip together.
00:01:26.166 - 00:01:49.486, Speaker A: We have a lot of payments we need to figure out. So maybe I say I'm going to pay for food. John, you're going to pay for housing? Maybe. What's your name again? Masaki. You're going to pay for the tickets, so you pay me back for this, and I pay you back for this, and it's just a huge mess. And this is why we have these kind of text imessage group chats where we're just trying to figure stuff out. Now, what if we could just basically create a group wallet, right? Where you know what? Forget all this stuff.
00:01:49.486 - 00:02:17.030, Speaker A: We just create a shared bank account where we all send our money into and then one of us can say, hey, I'm going to take money out of our shared account and pay for the food. Or you could pay for the housing, you pay for the tickets. And then we can just basically create something like a group wallet. And another name for a group wallet is called a multi SIG. Exactly. And this is a very simple concept where you can actually think about it has very powerful implications. So one example of this is you could do the same thing instead of maybe using it to pay for a trip to Fuji, you buy the US constitution.
00:02:17.030 - 00:02:49.780, Speaker A: Sounds crazy, right? But then a group of people used exactly this same concept to constitution Dow. They raised $42 million in seven days. That's $6 million a day. Let's take it a step even further. What if you created a group wallet for investments? And what if this group wallet had $10 trillion assets under management? What am I talking about? BlackRock. So a lot of people don't think about it, but BlackRock is a $10 trillion investment company that actually has that could basically function exactly like a group wallet. Here's another fun example for you guys.
00:02:49.780 - 00:03:32.480, Speaker A: What if this group wallet at $800 billion, 125,000,000 people contributed to it, and it has 700 signers. Anybody know what kind of wallet I'm talking about? Finn, do you know Japan? Japan is basically a group wallet. It's a multi SIG, right? You have the parliament that's about 700 signers population of 120,000,000 people. You take money out of the account to pay for pension, student loans, military or self defense force, things like this. So with this very powerful concept, you can basically create things all the way from paying for an airbnb trip to basically running an entire country. So how does it work at a fundamental level? Let's make it simpler. Again, back to the group wallet example.
00:03:32.480 - 00:03:53.960, Speaker A: So the first thing we need to do is create a group wallet and propose a transaction. And transaction can literally be anything, which is, I want to pay for food, I want to pay for military. Anything you want to do. You can propose a transaction, someone confirms it. So, for example, I say, hey, John, I want to pay for the tickets for the Tamal Fuji. Then you say, yes, I approve this transaction. It gets executed and the money gets sent out.
00:03:53.960 - 00:04:29.618, Speaker A: So we're going to talk about how to do that using the Safe Core account abstraction SDK. So we're going to be, first of all, start off with the protocol kit. And the beauty of the protocol kit is that who here does not understand solidity very well? Okay, so the beauty of the protocol kit, it allows you to basically deploy smart contracts and even interact with smart contracts without having to write any solidity code. As long as you understand TypeScript, you can basically write not write smart contracts, but interact with smart contracts. Auth kit onramp kit. Auth kit for authenticating. We'll get to these later, but focus on the protocol kit for now and then.
00:04:29.618 - 00:04:52.070, Speaker A: Yeah, so these are all the docs. I'll have some slides up later on that you can link to the QR code. So the first thing is, sometimes one of the things that hold a lot of people back is, hey, I'm looking for a design. I'm looking for a front end developer. You can just clone this repo that we have, which is a super, super simple UI kit that you can basically just use to add in additional features. So that basically takes care of the UI for you. So you can focus on the functionality.
00:04:52.070 - 00:05:08.926, Speaker A: So the first thing you want to do is install some kits. So the Protocol Kit, API Kit for basically interacting with our API service and then the SDK types, if you're using Types script, which I recommend. Also super important if you're going to use Ethers 5.7.26, .0 came out, which is still not compatible with a lot of stuff. I see you're nodding your head. Yeah.
00:05:08.926 - 00:05:23.966, Speaker A: So this is one of those things that if you don't know, it's a very hard bug to fix. So make sure you use 5.7.2. Then you want to basically start using the regular packages. So this is actually outdated. We're not using Safe Service Client anymore. This just changed like literally a couple of days ago. So it's API.
00:05:23.966 - 00:05:47.066, Speaker A: Kit not Safe Service client. And it's going to be protocol. Kit not core SDK. The next thing you want to know is configure the blockchain network. So one super cool thing about Safe is that if you want to basically support polygon inosis chain, and by the way, a little bit of alpha, you probably should, because then you can basically get two bounty prizes. All you have to do to get it qualified for additional bounty prize is one thing. RPC URL, all the rest of your code can be the same.
00:05:47.066 - 00:06:10.126, Speaker A: You can support multiple chains with just that simple thing. This slide says twelve plus Networks. We're actually on more chains as well, but from a UI perspective, these are the chains we support. But if you go to the Safe deployments repo and you can find that linked as well, we support, I think almost 100 chains. So if you guys are trying to get a lot of money, win a lot of bounty prizes, you can easily stack up by deploying on Safe because we support so many different chains. Cello as well. We support Cello as well.
00:06:10.126 - 00:06:34.486, Speaker A: All the different chains that are EVM compatible, we support most of them. So then you import your packages. This part is pretty self explanatory. The next thing you want to do now is basically get the ETH after. So the beauty of Safe is that you don't have to do a lot of connections yourself. If you already have MetaMask installed, this one line of code will basically take care of everything and it'll figure out the chain, the network you're on, things like this. All right, so then first thing we want to do is basically create the wallet.
00:06:34.486 - 00:07:02.750, Speaker A: So like I mentioned earlier on, you want to get access to basically whoever's currently logged in your MetaMask. You basically can get the ETH adapter from that. And then you want to basically then just deploy the Safe. And so as you can see here, once you've gotten the ETH adapter, deploying a Safe is just literally one line of code. Safe Factory deploysfe and then you have your Safe deployed. And then another little pro tip I'll give you guys for when you're debugging your code is put lots of console log statements. So, for example, one thing I always try to do is I have the Block Explorer, the transaction service, and then the Safe app.
00:07:02.750 - 00:07:41.486, Speaker A: So this way, if you're trying to figure out making sure it's actually deployed, you have basically three different sources of truth you can check to make sure that it was actually deployed. So viewing the deployed safe yeah. So then you can check it on the Safe app or then Ether scan. All right, so then back to the example. So now we've created our wallet, but now we need to propose a transaction. But the problem with this is that a lot of this interaction currently right now still requires you to be very familiar with Blockchain Web three technologies. But what if you wanted to create something super simple, like so simple your mom could use it? What if you wanted to create okay, proposal, okay, I got it.
00:07:41.486 - 00:07:58.626, Speaker A: I got a little ahead. So proposing transaction as well. So I can mention earlier on, you have to propose, hey, I want to send money out of this. You have to confirm that, yes, I want to confirm this transaction. And then you want to have someone execute the transaction on the blockchain. And the beauty of this is that none of this stuff actually happened happens on chain until you actually execute the blockchain. So you don't need any gas fees.
00:07:58.626 - 00:08:27.530, Speaker A: Anybody can just basically create a transaction, sign it basically using the following steps. Get the transaction hash, you can sign it afterwards, and then you confirm the transaction. So basically to verify and this is also like a two factor this is like a kind of a way of having two factor authentication, right? Because even if my private keys get hacked, the money can still save because then your private keys are safe. Your private keys are safe. So you can swap owners things like this. So it's basically convenience and security. So you can confirm the transaction using the Safe API kit to get all the pending transactions.
00:08:27.530 - 00:09:03.974, Speaker A: And then you can basically execute the transaction on the blockchain. And like I said, again, when you're writing your code, I really recommend use lots of console log statements. It'll make it a lot easier to debug things. So then you can also get the list of pending transactions to see what you want to confirm or deny. And then again, you can always basically verify things on Safe on our transaction service or on Ether scan as well. So now let's go back to the analogy I mentioned earlier on, right? So with this simple technology, like I said, you can do things like buy the US. Constitution, literally buy the Constitution and run a still.
00:09:03.974 - 00:09:37.540, Speaker A: But again, this still requires you to understand private keys, understand all these kinds of like hive gas, ETH, all these kind of stuff. But what the goal should aim for is that we want to basically create an app. And the challenge I have for all of you hackers here today is, can you make an app that you could just basically take a phone, give it to your mom, and be like, mom, use it? Is that possible right now? Not really. But now with Safe counter traction SDK, it's possible, and I'll tell you how. So, like I mentioned earlier, maybe again, we want to go to Mount Fuji. Maybe instead of Majuki, we work with Majuki's mom. So me, Majuki, Majuki's mom, or you, your mom and your dad want to go, right? So you say, hey, mom, we're going to do a group.
00:09:37.540 - 00:09:59.462, Speaker A: Okay? So you ask your mom, create mom wallet, right? Okay, so do you have a MetaMask? Do you have C face? What's that? Do you have a Google account? Perfect. You can use the Auth kit. Okay, next, we need to send some money. Do you have gas? Do you have a mat? Do you have east? Do you have BNB? No? What's that? Okay. Do you have a credit card? Perfect. Use the onwrap kit. Okay, now it's time to pay for the executed transaction.
00:09:59.462 - 00:10:25.858, Speaker A: You know what gas fees are, right? What are gas fees? Okay, don't worry about that. We use the lottery relay kit. So every single thing that your mom would or you would have to learn to use a Web Three app has been abstracted away. If you can use a bank account, if you can use a WhatsApp account? If you can use a Facebook account, you can use a Web Three blockchain. So it's like web two UX with web3 tech. So let's dive into a bit more detail on how that works. So now we're going to talk about the Auth kit for Authenticating Ourselves on Ram kit.
00:10:25.858 - 00:10:51.498, Speaker A: And they would talk about the relay kit. And I think the beauty of this, too, is that a lot of times people think safe is just for multi sigs. You can even use a Safe for like a one of one. And so, for example, you could have a safe. So why would you do a one on one with a safe? If your private key gets compromised, you can just swap private keys without moving all of your assets out. So let's start with Auth kit, right? So again, maybe your mom doesn't have she doesn't even know what a seed phrase is. She doesn't know what a MetaMask is, but she has a Google account or she has an email address.
00:10:51.498 - 00:11:30.568, Speaker A: Log in with the Auth kit. And again, it's very few lines of code. You can basically customize the modal, use the open login adapter, and then you can just basically initialize. And then once you're initialized with Web Three Auth, you can basically just sign transactions using the provider and the current signer. Okay, now, next part is basically on ramping. So again, the huge problem with crypto is how do you get people on ramped? Well, most of us already have credit cards. So with Stripe and using the Onramp kit, you can basically just use Stripe to basically have easy on ramping, it's only available in yeah, so then you can basically use the onwrap kit.
00:11:30.568 - 00:12:07.950, Speaker A: And again, and this one's even easier because a lot of the work has been taken care of by the Stripe iframe modal. So it's literally just two lines of code really init and open and boom, just like that you can unwrap people with a credit card. And then finally the gasless transaction speech. So again, another huge problem people have is gas fees, right? Even if okay, now I've on ramp with the credit card and I bought USDC. Now I need to have manage, I need to have polygon, I need to have ETH. Well, now, with a sponsored transaction, you don't have to do this. So you can basically just say that anybody who wants to interact with my blockchain, I put maybe three USDC or five USDC, and I say all the transaction fees have been covered so we don't have to worry about this.
00:12:07.950 - 00:12:28.564, Speaker A: And then so this is kind of an idea of what it will look like. So basically here you can basically see the steps involved. So basically just defining the and the beauty of this too, is that when you look at the code, actually everything that you would do to create a regular transaction is going to be the same for Relaying. The only difference is the operation call. I forget where that line of code. Yeah, right here. Operation type call.
00:12:28.564 - 00:13:00.556, Speaker A: Everything else is going to be the exact same as you're passing for a regular transaction. And you probably want to increase the gas limit as well because it's going to be a little bit more complex. But besides that, if you can execute a regular transaction, you can do a sponsored transaction as well. And then this is kind of just like a little bit more detail on what data you're encoding in the execution transaction call. And then this is an example of what it looks like. And again, so the really cool part about this here is you see account three executed this transaction, but they literally had zero match in their bank account. We can still see here the contract was the gelato network.
00:13:00.556 - 00:13:37.450, Speaker A: Relayer basically moves ETH from our multisig to our destination address. Yes. And so with all of that auth kit taken care of, onram kit taken care of, relay kit taken care of, we now have a mom wallet. Mom wallet, get it? Trending, hashtag mom wallet. And then so that kind of concludes the bulk of the talk. And then so now we can have lots of time for questions, answers, things like this. A couple of things I want to give you guys.
00:13:37.450 - 00:14:40.424, Speaker A: These are some developer docs, if you guys want to scan that real quick. Alpha. No one? All right, you want alpha? Okay, I'll give you guys some alpha. First thing is lots of bounties. And I think the super cool thing about building on Safe and why I think all of you should build on Safe is that in terms of bounty stacking and like sponsor stacking, safe is probably one of the best tools for that, right? Like if you build on Safe, you can build on almost anything else. So for example, with Gnosis chain, they're actually giving $2,000 for building on Safe. So if you build on Safe and you build on Gnosis automatic to getting $2,000 in additional bounties polygon as well.
00:14:40.424 - 00:14:54.104, Speaker A: We support Polygon, Mainet. And we partially support Polygon. I mean, we support Polygon Mumbai as well too. So that's another bounty. You can get ethereum foundation, you can get that as well. And also we're deployed on Sello as well too. So you can also get Cello bounties.
00:14:54.104 - 00:15:24.788, Speaker A: So if you're trying to get some bounties, build on Safe. So, yeah, another cool thing about Safe is that we have sponsored transactions on Nosyschain as well too. And actually if you download the Safe space, all the RPC URL transaction service is already there for you. So if you build something on Safe and you actually want to get users and stuff, you can actually get their gas fees covered. And yes, another super cool thing is superfluid. So we're also doing a wave pool with Superfluid. So again, talking about just stacking more and more and more and more bounties.
00:15:24.788 - 00:16:01.990, Speaker A: We're doing a wave pool with Superfluid so you can build something here with Superfluid and Safe. Use it at Ethokyo and then after ETH, Tokyo submit it again for the wave pool. Also, we're hiring, so if anybody's looking for know, apply for jobs at Safe. Great place to work. And that concludes my presentation. Arigato Kasima questions. Yes, John? Yeah, so there's a couple of ways we help with account abstraction.
00:16:01.990 - 00:16:29.150, Speaker A: The way we define account abstraction is that basically abstracting the differences between the web two and the web3 ecosystem. So we help because again, you don't have to worry about gas fees. And actually with the relay kit, you can use gelato or you can basically try to implement four three seven. And I think with 1.4.0 and I think Richard probably can confirm this, we can also support four three seven out the box too now. And it's deployed on girly testnet it. Yes.
00:16:29.150 - 00:16:55.700, Speaker A: So there's two ways you pay yourself. So like, in the previous example, I had a balance up there. So for example, I could say I'm going to cover like $3 worth of gas fees for anybody that interacts with my smart contract, or it could be sponsored by the chain. Right. So again, a lot of these blockchains the same reason people are doing bounties. They're trying to incentivize people to use their chain. So just like we did with Gnosis chain, gnosis chain is basically covering the cost of all transactions on the Gnosis chain network.
00:16:55.700 - 00:17:11.210, Speaker A: So, for example, for me, I would put, like yeah, so I would, like, deposit, like, $3 into the Safe digital auto, like, bank account, like a credit, basically. And then you prepaid. Exactly.
00:17:15.420 - 00:17:23.276, Speaker B: Abstracted account and a dow. So if I want to give a user exit rights, like, rage quit function.
00:17:23.378 - 00:17:24.536, Speaker A: That would be sort of a layer.
00:17:24.568 - 00:17:26.910, Speaker B: On top of an abstracted account, right?
00:17:28.080 - 00:17:32.050, Speaker A: Exit rights, yes. So ask the question again.
00:17:39.140 - 00:17:49.488, Speaker B: That'S just like, a straight multi stick doesn't really have exit rights. Like Mob Chair would giving exit rights to a dow.
00:17:49.584 - 00:17:52.768, Speaker A: In this sort of account extraction framework.
00:17:52.944 - 00:18:01.690, Speaker B: People would just have account extracted wallets, and then they would join a dow with a Molok dow on top of that.
00:18:04.380 - 00:18:17.900, Speaker A: If I understand your question correctly, you as an individual can have an account abstraction, and your dow could also, like, an account abstracted wallet, and the dow could also have an account abstracted wallet. So a dow and a wallet are, like, two separate concepts. A dow uses a wallet, and the wallet can be account abstracted.
00:18:21.200 - 00:18:22.780, Speaker B: That's, I guess, what I'm struggling.
00:18:25.040 - 00:18:53.178, Speaker A: So there's Zodiac. So Zodiac has, like, modules that you can add on to this. So you can Google, like, Gnosis, Zodiac, you'll show up, and you can basically add Zodiac modules onto your safe to add Rachel functionality. Four three seven. Does the volume of being reduced it's still in, like, an experimental stage. So there are some modules that it's not really ready for production use. We can try them out.
00:18:53.178 - 00:19:03.798, Speaker A: And I think if you use, like, 1.4.0, which is on Girly now, you can support four, three, seven. You have to add your mod. Add the modules. Yeah.
00:19:03.964 - 00:19:17.346, Speaker C: How will structure in this? By adding a module. I have got the module. I've got the function, like, related user.
00:19:17.378 - 00:19:19.254, Speaker A: Operation and yeah, but how will how.
00:19:19.292 - 00:19:26.640, Speaker C: Does Entry Point Contract know this is a module? This is a 40 P seven cup up.
00:19:27.010 - 00:19:44.830, Speaker A: I think you'd either have to whitelist it, or I can maybe show you an code example afterwards and I can show you what I'm talking about. Any other questions? Okay, I guess that's the presentation. Thank you very much.
