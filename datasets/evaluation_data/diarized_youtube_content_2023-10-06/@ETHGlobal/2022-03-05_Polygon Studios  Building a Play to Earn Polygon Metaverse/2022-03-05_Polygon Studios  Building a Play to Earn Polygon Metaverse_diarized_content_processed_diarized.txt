00:00:00.410 - 00:00:10.910, Speaker A: So we're good to begin. Hello, everyone. Good afternoon. Good evening. Good morning. Depending on where you are in the world, welcome to our day two of workshops. Here at Build Quest.
00:00:10.910 - 00:00:24.750, Speaker A: We have Siraj Reval from Polygon Studios, who's going to be doing a workshop on building a play to earn polygon metaverse. Questions go into the Zoom chat. And with that being said, I'll pass the mic off to Siraj.
00:00:25.370 - 00:00:49.354, Speaker B: All right, awesome. Thanks, Anna. So hi, everybody. Today I'm here to talk about building a play to earn metaverse with polygon. That's a lot of different very high trending words all at once. I understand that we only have 30 minutes, so we're going to try to pack in a lot of very valuable information into this time period. So let me just start sharing my screen right now so we can get started here.
00:00:49.354 - 00:01:20.422, Speaker B: So if you go to Polygon Technology Ecosystem, this is our brand new web page. It's a landing page that the marketing team has been working on for weeks now. But what we've done is we have compiled our entire DAP ecosystem into one page. So there are over 7000 DApps indexed on this single landing page here. And what we can do that would be related to this talk is to go to the NFT section. So we have categories for all the polygon DApps out there. And we have 157 games right here.
00:01:20.422 - 00:02:08.470, Speaker B: You probably have heard of Decentraland. This is the one that Snoop Dogg bought a house in a mansion and then people started buying houses next to him for that clout, right? You've probably heard of Avagatchi. It's a play on words for Tamagotchi, the famous game from the 90s. Atari, the age old brand in gaming. They have their own DAP, a gaming DAP here. There's a lot of different possibilities here, and I would definitely suggest if you want to learn more about the metaverse and examples of play to earn games. All of these are play to earn games, right? So any type of game that you build that involves using a blockchain, that is a store of value that can be used outside of your system, that is a play to earn game.
00:02:08.470 - 00:02:37.194, Speaker B: Because anything that is connected to that for a player, if they have access to a wallet in the game, they can then use those funds to do whatever they want. And that's what a lot of these games have done. There's so many different strategies. There's so many different types of economies that can be built. We can have assets that are NFTs that can be sold outside of the game. Like is the most popular case for that. It's called axie infinity.
00:02:37.194 - 00:03:09.900, Speaker B: So if we go to Axie Infinity, this is perhaps the most popular play to earn game today. And it's one where people will earn different assets. Players will earn assets, and then they will be able to sell those assets. These NFTs outside of the game on these marketplaces. And this has actually become a full time job for some people in the Philippines and in other parts of the world. But a lot of people don't like Axie Infinity. They say it's like a really bad game.
00:03:09.900 - 00:03:54.742, Speaker B: It's not that fun. But I think that they're looking at it the wrong way because, yes, this is a really bad game, but it's the most fun job. You have to think about it less as a game and more as a job, a means of income, because one of my goals personally is to get to a world where money is irrelevant. So it's not that money doesn't exist, it's just that we don't have to be so focused on it for our day to day lives, like paying rent and all these things and getting to a play to earn gaming reality, where people are playing actual fun games that are also earning them money. That's where we want to get to. And we're not quite there yet. That's what this next stage of R and D evolution is going to get us to.
00:03:54.742 - 00:04:22.442, Speaker B: So let's look at an example of what a play to earn games looks like. Okay, so I want to show you a few tools here altogether. So I'm going to first create this gaming smart contract in Solidity, which is the smart contract language of Ethereum. And that's going to be our blockchain element, okay? Everything else is going to be super standard for building a game. But let me just name this right here. I'm going to call it gamingcontract. Solidity.
00:04:22.442 - 00:04:50.994, Speaker B: Okay? That's all I'm going to call it. And it's an empty file and it's running in the browser in this online IDE integrated developer environment. Okay? So let's see. What kind of game do I want to make? I want to make a game that is really easy and it is a 3D game. And I will be able to collect different objects that are scattered across the map. And these objects are rare collectibles of a kind. They are teddy bears.
00:04:50.994 - 00:05:16.818, Speaker B: Let's say they're teddy bears and there's 100 of them spread across a giant MMORPG map. And it's a 3D game. So how am I going to do this? Well, if I want it to be 3D, I'm going to use my favorite tool for this would be Unity. Unity is more open Sourcey than the other one, but I would use Unity here and I would download Unity. I think unity is free. Not the pro version, but one of them are free. I've done plenty of Unity development myself.
00:05:16.818 - 00:05:37.046, Speaker B: I had a game you can click on Create Your Game. Unity has got all of these very easy ways to get started. So many amazing tutorials on getting started you can agree to download. It's going to be a DMG boom. And there we go. We have Unity hub that's going to set up. It's going to download my game.
00:05:37.046 - 00:06:07.146, Speaker B: I'm going to get set up. So actually, Unity itself is quite a massive download. But I'll just show you this process of adding Unity hub and then opening it up. And it's going to ask me, well, what parts of our stack do you want to install? We have a 3D game creator. We have something that can deploy games to different platforms. We have VR, all of these different things. But you really want to start here from Unity and it's going to ask me, where do you want to install it? 14 gigabyte files.
00:06:07.146 - 00:06:36.454, Speaker B: So this is going to be big, okay? But once it's installed, it's going to open up the editor. And once we have our editor open, we can insert a template. So, like some pre built map, let's say a desert. Okay, there's going to be a lot of those. And if we want to see a place where we can get assets for our game, we can go online to the Unity Assets store and we can find any number of assets. So like I said, we want to collect teddy bears. Let's say it's in a desert.
00:06:36.454 - 00:07:00.654, Speaker B: So here's a desert right here. So it's got all these desert assets, and I will add it to my cart. And then from the Unity hub, it'll connect to my account and all those assets will show up here. And then I'll drag and drop them to the game. So, okay, so I've got this game and I'm in there and I'm collecting different teddy bears alone. Okay? But now I need other people to be involved. Well, then I'm going to need an online element for that, right? I'm going to need an online element.
00:07:00.654 - 00:07:36.110, Speaker B: So what am I going to do for online elements? So if I want an online element for gaming, there are several options here. One that comes to mind is, like, I think it's called Photon. Yeah, Photon. That's what I used last time. So Photon will take this Unity game that's living locally on our machine and we can try it for free. And see it has support for Unity right here. What it will do is we will download this as a plugin to our game, and then we will be able to export a client to a desktop for different Mac, Windows, iOS, whatever you want, Android.
00:07:36.110 - 00:08:29.994, Speaker B: And what this client will do is it will allow people to have user account sign up functionality so anybody can join our game. So this layer, this multiplayer networking layer, we can add on top of Unity once we've built our 3D game. And then on top of that, after that second layer of this is now an interactive online game. That's where we can add the money aspect, the play to earn gaming aspect. So if we look at what a character is in our game, let's say our character is a humanoid with two arms and two legs, and they're trying to get teddy bears and all of us are trying to do that. Okay? So what we're going to do is we're going to have to interface with a smart contract to make this a Play to Earn game. In this case, we want to make it so that the teddy bears are NFTs and these NFTs can be traded on OpenSea.
00:08:29.994 - 00:08:55.830, Speaker B: OpenSea is a public online marketplace for NFTs. It's not controlled by our game. It's not controlled by anybody other than the OpenSea team. But the point is that we can trade our in game assets here all over the place. So there's plenty of these game assets that people have already done this for different games. They're being bought and sold. Death by Robot, all this stuff.
00:08:55.830 - 00:09:21.562, Speaker B: There's just so much. Where do you even begin? Wolfgame ETH. What even is that? Right? We're going to make our own smart contract for our desktop local client to interact with. So this smart contract will live on the Ethereum blockchain. So we can have our Truffle suite ready. We can download truffle. We can download the Ganache blockchain.
00:09:21.562 - 00:09:50.438, Speaker B: So we have a test blockchain to deploy it to before we deploy it to the real blockchain, which requires money. Or we can use something called Hard Hat. So the other option is Hard Hat, and that's the other tech stack option for building a decentralized application, whatever that is. Ethereum development environment for professionals. So which one do I prefer? Well, I actually prefer hard hat. We can install Hard Hat very easily with a single command line command NPM install. And there you go.
00:09:50.438 - 00:10:16.590, Speaker B: We have Hard Hat being installed right there. So now that we have Hard Hat installed, we can create our first Hard Hat project, and then we can add our smart contract to that Hard Hat project. But for the sake of viewability, I'm going to put that smart contract instead. That's what we would normally do. We would have it locally. I'm going to put it instead in the browser so we have something to look at in the browser. Also, feel free to ask questions.
00:10:16.590 - 00:10:57.290, Speaker B: Once I start writing code, I'm going to stop after a bit, and I'm going to answer some questions, okay? But right now, we're going to start writing this gaming smart contract, which we want the back end of the Unity game, which is written in C sharp. Okay? So this game is going to be written unity programs are written in C sharp. We're going to have a C sharp client that's going to be calling this smart contract code. So it's going to be communicating with this solidity code from C Sharp locally on the desktop. So we're going to have Pragma Solidity, and we have a version of our Solidity smart contract that goes at the very top, always. And we're going to call this smart contract. Let's see Teddy collection.
00:10:57.290 - 00:11:24.242, Speaker B: That's the name of our game. Teddy Collection. That's our Play to Earn game that we are building Teddy Collection, and it is of type ERC 721. Now, this is the NFT token standard. It's also an ownable smart contract. What does that mean? That means that we, as the creators of the Smart contract, own the contract and all of the funds that go into and out of it. Now, ideally, this would be a Dao, a distributed autonomous organization.
00:11:24.242 - 00:11:44.346, Speaker B: So a community shared ownership of this. So remember, in our Teddy Collection game, we have a type of character. And this type of character is going to be a this is going to be a humanoid. Remember, that's the word we use. We have a humanoid and then perhaps we have another type. So we give players a choice. They can have two types of humanoids.
00:11:44.346 - 00:12:22.634, Speaker B: Okay, so give players choice of character. That's what this line does. And this defines our main game, Smart Contract. Now, hopefully, this will only be about 50 lines of code. We'll see where we get to, though. So what else we need? We need a counter variable because we're going to be counting through a lot of array indices. And before I write out the parameters that are going to be in the character, the structure of this first character that I'm going to write out.
00:12:22.634 - 00:12:51.940, Speaker B: Before I do that, I'm going to answer some questions. So let's see what we have here. So how does Unity interact with the contract? Is it just like a plugin? Yes, it is. So let me show you that. Let me show you how Unity does it. So if we go to the Unity app store and we go to the Unity app store, I'm sure there's an easier link to get there. But I'm just going to go there the hard way.
00:12:51.940 - 00:13:36.594, Speaker B: There we go. And then I'll type in ethereum and your ethereum manager. So bunch of great developers have built all sorts of plugins for Ethereum directly to Unity. And they have these great video tutorials on Enter Your Seed phrase here in the wallet. And you're basically interacting with this Unity editor. But you have functions that let you perform actions on the Ethereum blockchain from it, which is super cool and just looking a little bit more at this. Okay, so this guy's kind of doing the same thing.
00:13:36.594 - 00:14:00.202, Speaker B: So this is C sharpcode CS, and you're able to interact with the Ethereum blockchain from here. As you can see, it's pretty cool. So I built a game in Unity. I spent actually 70,000 on this game. It didn't work out. But the other alternative to unity was unreal engine. And I tried that one out too.
00:14:00.202 - 00:14:35.378, Speaker B: And I will say that Unreal is way better for graphics quality, but it's also harder to get started with. The learning curve is a lot more intense for Unreal. And I'm not sure what the tech stack for Ethereum looks like in the Unreal ecosystem. I see that there is this NFTI is your in game. Oh, that's super cool. I didn't even know that was a thing. That's a new so this way of structuring programming is really interesting to like.
00:14:35.378 - 00:14:57.994, Speaker B: This is very unreal engine specific, where you're like, building out this left to right. I don't even know what you would call this. This is like a call tree or something. But I think this is cool. So, yeah, like get a user's NFTs by user ID. So all of these tools exist. Pulls the NFT data, initial call.
00:14:57.994 - 00:15:23.700, Speaker B: You want to reuse this over and over again. Okay, so we don't want to have to build this. We'll just reuse what they've already written. Ether linker exec contract method with parameter. So you're literally in this game, you're walking around and you're executing Ethereum functions as an in game 3D humanoid, which is super cool. I actually want to try this now that I'm looking at this Ether linker. This looks cool.
00:15:23.700 - 00:15:39.286, Speaker B: Anyway, so Etherlinker and then coin pickup VFX. So dope I know? Yeah. Unreal. NFT creation. That would be a great tutorial to make. I think that's a good point. I might need to do that.
00:15:39.286 - 00:15:57.470, Speaker B: This one doesn't seem related. This is just coin particles. Anyway, where were we? We were somewhere. We were damn, look at those graphics. Okay, we were writing out code here. Okay, so we were writing out code for our character. So what does our character have? So each of our characters, we can give them any arbitrary parameters.
00:15:57.470 - 00:16:23.062, Speaker B: I'm going to just say that for simplicity's sake, we're going to have a type of character. So that's the first parameter. What type of character is it? It's either going to be a humanoid one or a humanoid two, which we wrote up here. Let me make this bigger. Humanoid one or humanoid two. And that's what we have. And we have one more parameter, which is life.
00:16:23.062 - 00:17:04.402, Speaker B: And life is an integer amount. And when two players fight their life, they destroy each other's life. That's what this smart contract will do. And what we're going to do is we're going to have these characters, they're in our game, and they're going to be finding teddy bears. And if they find one, then we will want to mint that teddy bear as an NFT that we own as a character. So that's where this most important function goes in function mint teddy. Okay, so that's what it would be like.
00:17:04.402 - 00:17:47.870, Speaker B: Function mint teddy. And the parameters for that function would be what type of character is minting this? So that would be type character. We've got to give that variable a name and let's see what else. So we would have another structure, by the way. So we have another structure called Teddy, and that's going to have some value, which is like some boolean value or something like NFT ID or something like that. Something like that. And so this mint teddy gets two parameters.
00:17:47.870 - 00:18:17.766, Speaker B: We want the type character, and then we want this. We want this teddy structure. Yeah, well, actually, that's not going to go in there. I'm just going to keep that over here. So we're going to start with this character, and then we're going to say we're going to use a function that we didn't actually write. It's just going to exist. It's called safe mint.
00:18:17.766 - 00:19:29.710, Speaker B: And Safe Mint is a function that is found in the ERC 721 smart contract. So if we go to Open Zeppelin, which is a library of templates of smart contracts, and we click on contracts, and then we type in Contracts token, ERC 721. This is going to lay out all of these embedded functions for Minting NFTs. Okay, so we are importing that existing template so that we don't have to write the code for Minting. We'll just call it as safe mint? And Safe Mint is going to take whoever is calling this function and the next ID that is going to be in the list, and it's going to mint that as an NFT. So that's the first part. And once we have Minted that, we're going to look at what do we want to do after that? So what are other function calls that we want to do? We might want to sell an NFT.
00:19:29.710 - 00:19:59.686, Speaker B: We might want to what else we want to do? We might want to trade in game, so perhaps trade NFT. And we would have one of those as the parameters as well. There. Now this is just in the browser. We want something that's a little bit more holistic. So let's take a look at GitHub for an actual example that we can download and compile and run. And it's going to be holistic.
00:19:59.686 - 00:20:27.494, Speaker B: So let's search for play to earn I want you guys to get really good at searching on GitHub, just like you do on Google, because GitHub is really a treasure trove of data. So okay, so Play to Earn game protocol right here. This one's really interesting. So this is three months ago. This guy has this Play to Earn protocol. This is a hard hat file. Let's go ahead and download this and see how this works.
00:20:27.494 - 00:20:43.914, Speaker B: We're going to download and we'll open that up. And now we're going to open up terminal. Let's see if there's any question. I agree. This needs more than 30 minutes. That's why I'm just kind of moving here. Okay, let me move that over here.
00:20:43.914 - 00:21:08.482, Speaker B: Okay, so let's make this thing run. Make Play to Earn game run that we found. So we're going to CD into it. We're going to see. All right, well, what are the instructions here? What do you need us to do? Okay, we need to do NPX hard Hat compile. We have to compile this hard hat repository. But it looks like because I have a new MacBook, you're trying to use a non local install hard hat and try again.
00:21:08.482 - 00:21:29.702, Speaker B: Of course. So I'm going to go NPM install. I think it's like NPM install, right? Should be, like, really easy. And then I'll run it. But while that's running, let's take a look at the contract here. Like, what's the big deal? Oh, it's a single solidity file. It is just one solidity file for all of this, and it is about 109 lines of code.
00:21:29.702 - 00:21:40.810, Speaker B: Okay, that's doable. Okay, so we installed Hard hat. Let's go back compile it using Hard Hat. Okay, done. I think that's done. Oh, no, there's an unexpected error. Cannot find module end.
00:21:40.810 - 00:21:57.566, Speaker B: Oh, yeah, I forgot. That's a really easy fix. What was the end one? That was NPM install. Duh. Yeah, that'll do. The NPM install okay. And now we'll go back to Hard hat.
00:21:57.566 - 00:22:25.018, Speaker B: Compile. Okay, so this is a polygon talk. So, by the way, the only thing differently that we have to do for polygon versus regular Ethereum, literally the only thing is deploying it to the polygon network versus Ethereum. All the code is the same. It's all solidity. It's all hardhat and truffle and ganache and everything is the same. You just deploy it to a different blockchain, and then what happens is the polygon validators the network itself.
00:22:25.018 - 00:23:11.974, Speaker B: They're going to take the data from your game, and they're going to post it to the Ethereum blockchain so that you get the immutability and the security and the decentralization of Ethereum, that source of truth that Ethereum is. But you get the speed, the fast transaction times, the low gas fees of polygon. So the Ethereum team, they changed their wording from L one and L two to execution layer and consensus layer. That's what ETH two is. ETH two. They have given up on the idea that one blockchain can do both execution and consensus really well. We need two, and polygon is that execution layer, whereas ethereum is that consensus layer.
00:23:11.974 - 00:23:36.962, Speaker B: So that's why we're deploying to polygon, because it's not that e two will make polygon irrelevant. Polygon is a part of e two scaling strategy okay. As well as other blockchains. But we're the best because I'm biased and I work there, so invalid account. We got to fix the matic thing. Invalid value. Okay.
00:23:36.962 - 00:24:23.140, Speaker B: So we need to fix this configuration. That's the issue with hard hat's configuration. So I'm going to open up this as a wow, I need to install a bunch of things, but I'm going to open this up as a file, and then I'm going to change the code so that the Hard Hat config file is working properly. Right now. This particular configuration file is our issue. I can already tell that's what it is. I'm going to open up Sublime, and I'm going to open up that exact oh, I still got to add the man line hotkey or something.
00:24:23.140 - 00:24:38.280, Speaker B: Yeah. So I don't want to waste everybody's time with this, so that's fine. Yeah, something like that. That's what it is. Yeah. Sublime. No.
00:24:38.280 - 00:25:01.670, Speaker B: Okay, so never mind. All right, whatever. So we're going to look back at this smart contract file and let's just take a look here. Okay, so this person defines two types of characters in a game. The character has an attack defense life Force experience. Great. Okay, it's got all these things, and they're going to define some details for the character.
00:25:01.670 - 00:25:27.862, Speaker B: They have this empty constructor which is there for no reason. They have a get token details which returns the details of every character whenever it's called. And then they have this Mint function, and the Mint function will say, let's see. You want to create a character. So this code actually lets someone create a character as an NFT. They'll mint and remint and remint. And depending on the type of character, there's one of two types, either professor or Lisbon, whatever that is.
00:25:27.862 - 00:26:09.886, Speaker B: It will define the character as a string given these unique integers. So you're minting these character NFTs, boom, boom, boom, boom. You're calling this function from unity? From C sharp? You're calling this every time someone goes to a terminal or clicks on a hotkey or something like that. And then there's this heal function. Okay, so for some reason, this person put a heel function in play to earn gaming smart contract. Why would they do that? Because it seems that the mechanism here that they've encoded into their economy is the fight mechanism. So recall that if we go back up here, we see the Life Force for a character.
00:26:09.886 - 00:27:02.354, Speaker B: Whenever two characters, two token IDs are in a fight, this function is called and whoever has the most Life force wins. So it's a very simple turn based, strategy fighting game that we can just tell from the smart contract. And the winner of this, whoever wins, whoever has the most Life Force, that person is going to get more experience points. Okay, so experience plus plus healing is here because it is an economic activity. The more you heal, the more likely you are to win a fight, which means the more likely you are to win money from the fight because you'll be able to sell the NFT of the character you've defeated on the Internet because you won the battle. So every time you're fighting someone, you earn their NFT and you can sell it on the internet. Now, that's it.
00:27:02.354 - 00:27:33.378, Speaker B: That's all that's in this single repository. Everything else is boilerplate. Nothing special, nothing unique. The rest of this, as you can see, that's the matic, the polygon network. That's where you want to deploy this metaverse to if you want to start out with a lot of speed and low gas fees. I know users don't like paying gas fees, but that's really all that it took. But it's a super crucial component, this smart contract play to earn solidity class file.
00:27:33.378 - 00:27:55.730, Speaker B: There's only one of them. There's not multiple. There's only one. But 90% of your tech stack. Looks like what I was showing you. Unity. You've got unreal engine you've got the plugins to interact with the network Ethereum Plugin, truffle, Ganache, Hard, Hat Marketplaces, Photon for online multiplayer gaming.
00:27:55.730 - 00:28:21.306, Speaker B: All of this stuff, none of it has to do with the actual Solidity code. So remember, Solidity is a very small portion of your game, but in today's environment, it's how you're going to market your game, because that's what people care about. Now. They want play to earn games. They don't want just a regular game. Now everything's play to earn, and I think that's super exciting. That's the kind of world we want to live in.
00:28:21.306 - 00:28:58.342, Speaker B: Let's see if we can make a game that is super fun and you're earning money from it. What does that look like? I mean, we live in a world where I can literally type in Fortnite into this Unity store, and I can probably find an entire replica of Fortnite to build off of Fortnite map. I promise you I will find one. There it is. There's the Battle Arena right there for $20. We live in a world where it's so easy to build off of existing work of brilliant people. So this doesn't have to seem like a very daunting task.
00:28:58.342 - 00:29:37.058, Speaker B: It's just putting the puzzle pieces together. All right, so definitely, if you're interested, check out in learning more about Polygon and the Metaverse. Play to earn Metaverse, go to the Academy. It's what I've been working on at Polygon Academy, polygon technology, and just go top to bottom. And there's even gaming tutorials in here as well, which you can find in all sorts of things. Quadratic voting and art galleries and assignments. No one's completed it yet, so I want to get someone to complete it eventually.
00:29:37.058 - 00:29:44.760, Speaker B: And then I'm going to give them a wizard NFT and I'll make them glorified. Thank you, everybody. Any other questions?
00:29:58.830 - 00:30:01.520, Speaker A: Feel free to come off mute and ask your questions live.
00:30:05.890 - 00:30:13.300, Speaker B: Nice. Thank you, guys. I will go ahead.
00:30:16.230 - 00:30:19.330, Speaker A: Does anyone have any last questions for Siraj?
00:30:23.510 - 00:31:10.482, Speaker C: All right, yeah, I guess I'll jump in. First and foremost, amazing to actually meet you. I've been watching you for years. You're like AI videos back in the day and blockchain as well, so I'm not going to fanboy too heavy, but definitely fanboying. Second of all, thank you so much for the presentation. It was really good. The question that I have is in relation to the battle elements of the game, because right now it looks like you can abstract a lot of the battle elements to the smart contract size.
00:31:10.482 - 00:31:38.460, Speaker C: So through solidity. But can't you also have, for example, like, an NFT character where they have their stats which are on the blockchain, and then you freeze the NFT with the stats of where it's at and then abstract the fighting to, let's say, more unity and C sharp level?
00:31:42.670 - 00:31:51.886, Speaker B: Yeah. Awesome. Yeah. Well, that's awesome. You watch my videos. Thank you. That's really cool.
00:31:51.886 - 00:32:46.178, Speaker B: In terms of the NFTs, one good way I. Like to think about NFTs is like, you can literally make anything into an NFT. So anything that we saw in this constructor file here, this basic gaming contract file, these characters could be NFTs. This function itself could be an NFT. Minting Teddy so if we approach Battle and there's a bunch of functions that are fired event listeners whenever we enter into a battle, per se, one of those event listeners could be a function named Battle Time, which records it's just a timer. It just records the time that I'm battling with somebody else. That could be an NFT, that clock with like a you know, so when it comes to what you were asking a question about, a specific step by step process of like, could you freeze it in time and then mint an NFT of something that was more abstract, not the direct thing.
00:32:46.178 - 00:33:16.410, Speaker B: The answer is like 99% yes. But the real question I think nobody has figured out yet is what is the proper way, what exactly to be selling, what is valuable as an NFT and how is that going to scale very successfully, something like Fortnite or Counterstrike or one of these massive games, how do you scale to that level? I don't think anyone's figured that out yet, but it's a really exciting.
00:33:19.070 - 00:33:33.242, Speaker C: Definitely so. Definitely so because we're looking to make an interoperable NFT where you have your champion and then enable other people or.
00:33:33.316 - 00:33:33.940, Speaker B: Other.
00:33:36.070 - 00:34:22.720, Speaker C: Companies to allow you to do things and learn with them and then upgrade your NFT when you learn with them. So it's like an e learning game and it makes learning more fun and rewarding because it's like going to school and then coming home and your Fortnite character is upgraded. Sorry, I'm not showing my face. It's a bit rude, but yeah, it just makes it a little bit easier for people to learn and incentivize them to do that. And we can perhaps use Polygon to decide who is verified, to actually allow the metadata of the NFT to change as well.
00:34:24.210 - 00:34:26.190, Speaker B: Love it. Love the educational.
00:34:27.810 - 00:34:38.790, Speaker C: Yeah, yeah. A big passion of, yeah, we'll see how it goes, but it'll be awesome to reach out to you and we're building it, see how it develops.
00:34:39.450 - 00:34:43.798, Speaker B: Yeah. DM me on Twitter. Awesome. We'll do. We'll reach out.
00:34:43.884 - 00:34:45.254, Speaker C: Thank you so much again.
00:34:45.452 - 00:34:50.380, Speaker B: Thank you. Hello.
00:34:50.750 - 00:35:39.226, Speaker D: My name is Zuri. I'm a polygon advocate and I was onboarded to Polygon or even introduced to Polygon based on your video. So big shouts to you on that as well. I'm really interested in this project and the way that you taught it, especially with this GitHub repo that you use, because the concept that I'm building out is a Pokemon style battle game for music. So my biggest question up until this point had been how to create the health bar and if the health bar would be somehow incorporated into the NFT. I believe you have that somewhere in this smart contract that you just reviewed, and I wanted to know if it's possible to just kind of scroll up and explain how it's being used currently, if that's possible. I'd appreciate it.
00:35:39.226 - 00:35:40.106, Speaker D: Thank you.
00:35:40.288 - 00:36:42.380, Speaker B: Yeah, we can do that. So, in terms of health bar so the health bar in this case is this two part when it comes to the parameters. So you have Life, which is just a single integer which represents your health. Okay? And then you have these metadata, which they're not exactly health, but they help keep track of history over time, which is what was the last time you healed? When was your last fight? How much experience have you gained? But health is just life. So if we go to fight here, this is where the health is calculated. And so the way it's calculated is you take these experience parameters and you're multiplying the attack by the experience minus the defense divided by four. Now, why did this person choose to add this, what's called magic number in computer science, right? It's like a number with no real definition in the code.
00:36:42.380 - 00:37:08.210, Speaker B: I don't know. They just decided to do that. Could you change it? Yes. Would it have different dynamics? Yes, but that's what this person did. And that gave you this subtract life variable. And then from the subtract life variable, we said, if it's less than zero, then that player is dead. And then give the winner experience points, else do the opposite else.
00:37:08.210 - 00:37:38.030, Speaker B: And so this is like two else statements. Like, if one player kills the other, or the other kills the other, or then both kill each other, add this to their life force. But this is really the main calculating line for the health bar, and it's arbitrary. And I guess if you go into different games, you can see that sometimes they have a user configuration slider where you can change the sensitivity of health and stuff. That's what I think this kind of is. This numbers can be changed for sensitivity.
00:37:41.010 - 00:38:07.602, Speaker D: That's phenomenal. And thank you for the detail. I really do appreciate it. I'm definitely forking this GitHub as we speak. But another thing that I had a question about specifically was I think I got excited about the unreal in particular. But I see that this is uint, which probably is Unity. So could you just review where to get the Unity NFT package? Thank you.
00:38:07.676 - 00:38:23.270, Speaker B: Yeah. No. So uint it doesn't mean unity. This just means unsigned integer. So this is just a solidity definition. This is an ethereum definition. It's not unity.
00:38:23.270 - 00:39:12.560, Speaker B: In terms of unity, though, like Unity versus unreal, I think Unity would be the best place to start. Just like it's the easiest for a beginner who's never done game development before and then move on to unreal. But in terms of next steps is like once we looked at the Unity Hub and then clicking on Install and then you open up the browser and then inside of the browser, you go to the Unity Assets Store, and then you just start downloading all the assets that you want. Ultimately, you want to get to a place where you're at the Unity Assets Store and you're able to download all these interesting NFT tools to turn assets into NFTs like this, which is super cool. Just play around with some of these. It's appreciated. Thank you.
00:39:13.970 - 00:39:20.350, Speaker A: Just one more question from Nikhil in the chat. He says, can we use pre built templates?
00:39:21.890 - 00:39:59.926, Speaker B: Yeah. Yes, we can use pre built templates for smart contracts. If we want to use pre built templates for building Play to earn gaming smart contracts, we can go to Open Zeppelin. Open Zeppelin is literally a collection of pre built templates. If we can go to their docs, we can see some of the contracts, and we can see ERC for NFTs Token Standards 1155, which is like, for gas efficiency, all of these different ones, we can use those, and then we can also use templates for Unity. So many games. You've heard the term white labeling.
00:39:59.926 - 00:40:22.580, Speaker B: When it comes to startups, like Web, two mobile startups, that's the same when it comes to gaming, right? You want to build off of what exists. It's all in the store. You basically go to the store and you put it all together. And as long as there's an app store, there's so many different ways to integrate it. So definitely possible.
00:40:25.770 - 00:40:49.420, Speaker A: Awesome. Unfortunately, that's all the time that we have for this workshop. Sarash, that was super interesting. I'm sure everyone agrees that this is super awesome. So thank you so much for taking the time to do this workshop for Buildquest and for the buildquest hackers. Just a question, what would be the best way for people to reach out to you or Polygon if they have questions?
00:40:51.550 - 00:41:08.994, Speaker B: Yes. So the best way would be on Twitter. At Sirajraval. On Twitter. My DMs are open. If anyone wants to DM me, I will be there on Twitter. And then for Polygon, we have a Discord Channel, which I'm active in as well.
00:41:08.994 - 00:41:17.640, Speaker B: If we go to Zero X Polygon developers on Twitter, you'll find a link to the Polygon discord as well.
00:41:19.450 - 00:41:39.780, Speaker A: Cool. Awesome. Thank you once again for the rest of you. I hope you're having a really great first day of hacking or second day of hacking. Now, we do have a lineup of workshops for later in the day, so would love to see all of you there as well. And with that being said, I hope everyone has a great rest of your day or evening. Thank.
