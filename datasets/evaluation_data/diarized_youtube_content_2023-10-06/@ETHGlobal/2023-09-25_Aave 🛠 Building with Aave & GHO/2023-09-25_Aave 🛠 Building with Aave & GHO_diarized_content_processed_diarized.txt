00:00:07.130 - 00:00:43.318, Speaker A: Hi, everybody. My name is Andrew. Also go by DeFi Spartan. And today we're going to be giving a presentation about building with Aave and Go. And most specifically, this presentation is going to be a lot of focus on Go, because I've noticed that a lot of people have a lot of questions and a lot of interest on building on top of it, which is great. So I want to open up with this question. Why are we actually using distributed ledger? Why are we not just using these centralized products? Why are we actually focused on using these innovative networks and technologies? And really what it boils down to is the formation of agreements, specifically agreements with properties, which are very useful.
00:00:43.318 - 00:01:54.686, Speaker A: Number one, open. Anyone is able to verify and make these agreements between each other, neutral that the agreements are made through code, not through the discretion of one single entity or actor self custodial, where users are able to make agreements on their own behalf. And then finally, verifiable, where if an agreement is made and these terms are set, that anybody is able to check the terms of these agreements and make sure that they're actually executing as intended. So with these agreements in mind, let's look at what are the actual agreements that are happening with a stablecoin. So, number one, it's a token pegged to a certain unit of value, and it has the ability to do two main things, mint and redeem. So when we actually look at these agreements, the things that you have to ask yourself when evaluating a stablecoin, how can it be minted? How can it be redeemed, and how does it maintain its pegged unit price? So we're going to look in depth at exactly how the Go stablecoin fulfills these things and in the process, see how it can be built with. So when we look at the overall stablecoin landscape, it's pretty interesting that almost 90% of the value in these stablecoins, the agreements that are happening through these stablecoins, are not actually occurring through code.
00:01:54.686 - 00:02:36.960, Speaker A: They're occurring through decentralized institutions who basically have the authority over these agreements. And the entire principle of not just Go, but basically all decentralized stablecoins is to, in essence, fulfill the agreements of a stablecoin with the values of the ledgers that they're actually built on top of. So what that means is that the stablecoin itself is open, neutral, self custodial, and verifiable. So with that enters go. So what is Go? In short, it's a stablecoin native to the Aave protocol. And what this means is two things. Number one, it's governed by the Aave Dao, meaning that the decentralized entity, Aave Dao, has the authority to vote on different aspects of Go.
00:02:36.960 - 00:03:13.482, Speaker A: And second is that the initial way that Go is minted and redeemed is through what's called a facilitator. And specifically, this facilitator is the Aave protocol. And we'll go into detail about what exactly that statement means. So the foundation of Go is this facilitator model. If you were to go on etherscan and look at the actual Go token contract, essentially what you would see is this model which I'm about to show on the screen, which is that Go is composed of these different buckets. So a bucket is an address which has the ability to mint Go up to a certain threshold. And there's really just two parameters that do this.
00:03:13.482 - 00:04:15.758, Speaker A: Number one is the capacity, how much is able to be minted, and second is the level, what is the current amount that is able to be minted. So currently today, the two facilitators which have been approved by the Aave Dao are the Ave Protocol facilitator, which we're going to go in detail on, and a flashmit facilitator which sort of mimics the behavior of flash loans in the Aave protocol, if you're familiar with that. But the idea of Go is that it's a flexible facilitator model, which means that in essence, there can be any number of facilitators which have the ability to issue go either through code or different forms of agreements that the Dao agrees upon. So specifically, the Abe Facilitator. So how exactly is go minted or burned through this facilitator? Well, it occurs through methods which are actually pretty accessible to most people. Minting occurs directly through the borrow function and burning the Go token occurs through the repay or liquidation functions. And to show exactly how seamless these actions are, let's actually take a look at a piece of solidity code.
00:04:15.758 - 00:04:57.098, Speaker A: So how do you actually mint go with the Aave facilitator? So maybe some of you are familiar with kind of the core actions of the Aave protocol where you're able to supply collateral and then borrow tokens against this collateral. And this is what the smart contract call looks like for a normal token. In this case, it's borrowing a certain amount of the token wrapped ether. If you were to mint go instead of borrowing wrapped ether, it looks the exact same to the contract developer or to the integrator. Minting go occurs seamlessly through the actual Ave protocol. And this is because the minting of go is actually occurring under the hood of the protocol. So this is a seamless process.
00:04:57.098 - 00:05:52.346, Speaker A: But there actually are several key differences to Go which actually provide some very interesting opportunities for builders. The first are rate mechanics. So this is kind of the model that every single other asset in the Aave protocol uses. Essentially, this is the model of the rate which borrowers are paying to borrow that asset. And it exists as a curve. So essentially the protocol is performing this mathematical calculation every single time an action occurs where it says, okay, what is the total amount supplied, what is the total amount borrowed? And based on that ratio and then the parameters which are determined by the Dao, that is what sets the interest rate for an asset within the Abe Protocol. Go works a little bit differently because go is not an asset which is supplied by other users and then borrowed go is an asset which is minted directly by the protocol, which means that it has a different rate mechanic.
00:05:52.346 - 00:06:45.918, Speaker A: And specifically the way that it works within Aave is that Go has a fixed borrow rate and then there's a separate mechanism for a discount, essentially the regular borrow rate. And then you have a different borrow rate which is accessible based on the amount of staked ave tokens which a wallet holds. And then specifically the way that this is actually implemented is that Aave Governance has control over these three specific parameters. So through the on chain ave governance which is used to govern the exact same governance process which is used for the Aave protocol, they have the ability to establish the fixed borrow rate for go. The amount of go. That is able to be borrowed at a discount based on the amount of staked ave and then also the actual discount that is being given. So in this example, the APY with the max discount is 1.6%.
00:06:45.918 - 00:07:48.900, Speaker A: And this is basically if you hold the maximum amount of staked ave that Ave Governance has set, this is the discount that is applied to the borrow rate. And definitely the easiest way to understand this, if you want to dive deeper into this model, is definitely just to experiment with it yourself. So on Go ave.com, this is the testnet website for Go. And on this website there's actually a calculator on the Go reserve page where you can input amounts of staked ave and go and you can model out exactly what the effective interest rate is and the amount after a certain amount of time. And this is really powerful because if you think back to the regular ave interest rate model, essentially your borrow rate is dependent on the actions of other users. Whereas with Go, as long as the parameters are fixed by Aave Governance, it provides a level of predictability which you just really don't have in a lot of other different types of assets within the Aave protocol or in DeFi in general.
00:07:48.900 - 00:08:31.502, Speaker A: And now we'll talk about something which is definitely a hot topic with forgo and that is the mechanisms of maintaining stability. And really this kind of boils down into two separate categories. So the first category is collateralization. How does the Ave Dao actually enforce that Go is collateralized? Or how does the Ave Dao decide when an address is able to mint or burn go? And this is really based on a very simple mechanism. So I actually pasted the contract code directly here and that is that within the Ave protocol, the price of go is fixed to one dollars. And this does not mean that the market price of go is fixed to $1. That's not the same thing.
00:08:31.502 - 00:09:45.366, Speaker A: What this is saying is that in order to borrow or repay or liquidate go the value of the other tokens inside of your wallet must correspond to this $1. And what this means is that effectively go has a collateral floor where no matter what the market price of go is the Ave protocol says that in order to mint go against your collateral it has to have a value greater than one USD and this is essentially the collateral side of stability. The second is actually the price which you're actually minting and redeeming go. And this is not really a set mechanism but there's a variety of ways that effectively the Dow can use to maintain this peg and the first is interest rate management. So the idea that in order to set a certain target the Dow can either raise or lower interest rates in order to incentivize minting or redemption the second is incentivizing liquidity. Or the strategy that the Dow most commonly uses is coordinating liquidity. So basically providing on the governance forum resources for people to know.
00:09:45.366 - 00:10:52.080, Speaker A: Here are the places where go liquidity currently exists and is able to provide the most stable rate of exchange and lastly is a Peg Stability Facilitator. This has an asterisk because it is not currently live. But there is an update on the Governance Forum as of one week ago that the Peg Stability Facilitator is an audit. And basically what this is, is a way to mint and redeem go at a fixed exchange rate with other tokens. And this is useful not only for maintaining the Peg price of go, but also for a lot of use cases, which we'll touch on in a little bit. So what are the types of applications that you can build with go or incentivize to build with go? The first one would be payment applications. As we touched on earlier almost 90% of the current stablecoin market cap and thus payments utilization is occurring through these centralized stablecoins and so really incentivizing not only the usage of go and payments but also teaching people about why go is useful for payment applications is definitely an area of building an opportunity.
00:10:52.080 - 00:11:55.886, Speaker A: Second would be credit delegation. So credit delegation is a feature of the Abe protocol which essentially allows one user to take collateral and grant another user the ability to borrow against that collateral and this is useful for a lot of different use cases. Probably the two most common ones that come to mind are social applications where essentially one address is able to perform an action with another address that they trust a user that they already trust on chain. And then the second is doing this sort of in autonomous systems where essentially a user is delegating their credit to a smart contract and then that smart contract decides when to borrow for the user and provides basically a way for users to get yield by using their unused borrowing power. And this is something that has currently existed. One of the first implementations was with a wire vault which essentially allowed the users to delegate their credit to the smart contract. And then the smart contract was able to perform these actions.
00:11:55.886 - 00:13:07.282, Speaker A: And then kind of a shared feature between these two payments and credit delegation of things which Go enables and also the Aave protocol enables are methods using signatures. So the ability to abstract gas costs away from an end user is extremely powerful when it comes to especially onboarding new users. If you're building a payment application, you really don't want to have to teach users how to create a wallet and how to fund the wallet with ETH and pay for these transaction gas costs and teach them all of the nuances. And so by using these signature methods, permit is the ability to transfer tokens via signature, approves transfer of tokens via signature and then second, the approved delegation is how you grant a credit delegation allowance to another address with signature. And both of these are ways that you can abstract kind of the web three aspect or abstract the gas cost aspect of web Three from the end user. And the last thing that I'll mention is Visualizations. These are extremely powerful for two reasons because the Aave protocol and Go as a subset of that are predictable and verifiable.
00:13:07.282 - 00:14:02.730, Speaker A: And what this means is that when you're doing a transaction with Go or when you have Go inside of your wallet, the things which are occurring to that position are actually written inside of code. So as a user, I am able to know exactly what is going to happen based off of the current Dow parameters and my current position. And so building Visualizations, I think is a very untapped area within DeFi and Ave and Go specifically just informing users about exactly what is happening when they perform these actions. So specifically within the eGlobal New York hackathon, we've kept the prizes pretty open ended in an effort to not streamline exactly what people are building. It's very open ended. So feel free to innovate. And a lot of different things, not just the things which are covered in this presentation fall under these categories of best uses of Go and the best Aave protocol integrations.
00:14:02.730 - 00:14:47.410, Speaker A: And the last thing that I'll leave you with is a link tree where you can find a ton of different resources about Aave and Go. And the two specific things which I'd like to highlight are the Aave address book. A lot of times, a lot of the pain points of integrating DFI protocols is making sure you have the right addresses, especially if you're working on multiple networks. And what this address book allows you to do is import addresses directly inside of your JavaScript or Solidity code. So instead of copying and pasting addresses, you can import Ave V three Ethereum and have all the addresses right there inside of an object. And then second is the Ave Utilities SDK. This SDK has two main functions the first one is to read data from the protocol so querying on chain.
00:14:47.410 - 00:15:13.850, Speaker A: And the second is it provides very useful methods for actually submitting transactions. So instead of having to find abis find these contract methods, this provides a very streamlined example for how to do that. And lastly, I'll mention for both of these you can actually refer to the open source Aave code base. It uses both of these and is also just a great reference for how to actually interact with the Aave protocol. And yeah, with that, that is the end of the presentation.
