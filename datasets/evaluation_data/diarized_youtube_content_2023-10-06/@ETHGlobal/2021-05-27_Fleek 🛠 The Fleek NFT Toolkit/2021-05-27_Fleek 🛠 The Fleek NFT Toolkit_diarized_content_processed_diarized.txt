00:00:00.250 - 00:00:19.470, Speaker A: Thanks for joining us. Today's first workshop for web3 weekend is the Fleek NFT Toolkit. And taking the session today is Samuel from the Fleek team and I'm going to hand it over to him to introduce himself and kick off the session.
00:00:29.930 - 00:01:43.600, Speaker B: So, like it was said, I am Samuel, I'm from Fleek and I'm here to help you develop NFT applications. These applications work very well with IPFS and we at Fleek deal with IPFS a lot. So we have all kinds of tools that are going to be just very useful to you to make those applications. So if I go to the next slides, there are two main parts that can help you leverage IPFS for NFT application. So the first one is of course, when you create an NFT, you probably have a front end, a DAP that you're going to deploy IPFS, and Fleek can help you with that. I'm going to talk to you how to do it during this presentation and we'll even deploy an application together. And then the second part of this presentation, we're going to talk about the storage because of course, NFTs very often they have files associated with them and we will see why you would want to use IPFS instead of AWS or Google Cloud.
00:01:43.600 - 00:02:28.122, Speaker B: And we'll also use the tools that you can use with Fleek to upload them and interact with them. And we'll take an actual NFT application example that integrates our storage API. So let's get started and talk about hosting. So one of our products at Fleek is Fleek hosting. And what it does is it allows you to host your site, your application on IPFS. This is the front end application on IPFS. There's all kinds of interesting features that come with it.
00:02:28.122 - 00:03:21.338, Speaker B: So how it works is you connect to your GitHub account, connect your repository that contains your code, and we take care of deploying it to IPF. There's an automatic framework detection. I'm going to talk a bit more about this in the next slide, but we support all kinds of frameworks and help guide you to help you deploy it. And there is continuous deployment. So as you know, when you create some software, you have to think about how you're going to deploy it as you push new changes. And with Fleek, it works is when you push a commit to your GitHub repository, we are going to automatically build the site and update it. And also the third point is there's a built in CDN.
00:03:21.338 - 00:04:42.402, Speaker B: So what we mean by that is, yes, we push to IPFS web3, but we understand that you probably also want a web Two URL. So if you use Leak, you're going to have both on IPFS and on web two using. So why would you actually want to host on IPFS? So why not just create a normal centralized website? Well, the first is you want to make your DApps truly centralized. So if you create an NFT application, the smart contract is decentralized, it's probably on Ethereum and anyone can interact with that. And maybe you are using MetaMask or something like that. Basically this part, the blockchain part is decentralized, but you probably got a front end, an interface that the users will have to use in order to interact with your smart contract, your application. And if you are not an ITFs, the alternatives are to use web two, use centralized servers and in that case your decentralized application is not really decentralized because your interface is not decentralized.
00:04:42.402 - 00:05:33.110, Speaker B: And that's why if you have an NFT application, you should really consider using IPFS. Also censorship resistance. Of course, if it's decentralized, there is censorship resistance because anyone can host a site on IPFS on Flick. Also we backup on Filecoin, it's a younger feature that we're going to continue expanding but it's kind of cool that it's there. And finally it's framework agnostic if it is aesthetic site. So just mention quickly like what is IPFS? Right? It's a file system. It is a file system, which means that when you have a site on IPFS, what actually happens is that you talk to the IPFS network and you retrieve files.
00:05:33.110 - 00:06:30.170, Speaker B: And that works really well with static sites, sites that don't rely on a server. So on IPFS you can pretty much deploy any static site, which means that it works with any framework provided that you have the correct settings. So on Fleek you can use any framework that you want. You just need to make sure that your settings are good. So that's a fun plus of pushing to IPFS just using any framework that you want that are static. Also on Fleek, some advantages of using Fleek is you can decentralize the naming, the naming, by that I mean the domain name. So you can use things like ENS which is like DNS, but on Ethereum to decentralize everything.
00:06:30.170 - 00:07:16.310, Speaker B: You got your smart contracts, you got your DAP and now you got even the domain name is centralized and use Ethereum. We also support Handshake, which is another decentralized naming system to talk to your site. And what is interesting is that you can use any of them in combination. You can also have a normal DNS all within your site. So you can have multiple ways to access your site, some decentralized, some less decentralized. And we also take care of whatever domain system that you want to use. We take care of making sure that it is up to date with the latest deployment.
00:07:16.310 - 00:08:09.758, Speaker B: Another thing I want to mention is in the demo that I will show you afterwards, I will not use these tools, but just note that there are a bunch of tools to customize your interaction with Fleek. Like we've got a CLI that allows you to deploy your site locally. So that's very useful. If you don't want to use GitHub, we got an API that allows you to interact programmatically with fleek. It's the same API that we are using in the front end of our application that we'll show you afterwards. So it's pretty powerful. We even have some GitHub actions that's going to allow you to customize your deployments if you don't want to use the deployment option that we're implementing by default on Flick.
00:08:09.758 - 00:08:48.840, Speaker B: So just a lot of tools, a lot of stuff that you can customize if you desire, but it's all optional if you just use the front end on fleet. It's very powerful and simple. Here are some resources. I got a text file with copy them afterwards. But we have a documentation, we got blog posts, and also got a YouTube channel where there's all kinds of content, including how to deploy a react application. Now, let's just do a quick demo. I'm going to move this.
00:08:48.840 - 00:09:31.426, Speaker B: I'm going to open a browser. And what I'm going to do is I want to show you what application we are going to. So I go to Docs Flicker co in examples storage, we see Test is a cryptomuseum project. That is an example project that uses Flick to create basically an NFT application. If you go to cryptomuseumdemo on fleet co, you're actually able to interact with the site. I will show it to you afterwards. But first we'll deploy it.
00:09:31.426 - 00:10:05.280, Speaker B: I will show you how to deploy it. Let me close this. I close the Docs docs Co example storage. And here, this GitHub.com link is the repository of what will deploy. So if you want to follow the code, you can have it here. But now what I'm going to do is I'm going to open a tab to app Flick Co.
00:10:05.280 - 00:10:56.522, Speaker B: So app flick co It's how you can access the Flick front end and you can create an account. And once you create an account, the interface is going to look a little bit like this. So what I want to do is deploy this crypto site. So I'm going to click on add a new site and alter this flow. The first part is, like I said previously, to connect to GitHub, because to use the front end, you need a repository where your site will reside in. So I click on this, select my account. It's called it's loading, I think, crypto Museum.
00:10:56.522 - 00:11:22.194, Speaker B: And I got this one. Yeah. So I want so I can select where I want to host it because we also now allowed hosting an internet computer, but by default, it's IPF, which is the purpose of this presentation. Continue. And now we have arrived to the build setting. So let me just walk you through what these are. So first I select my branch.
00:11:22.194 - 00:12:04.258, Speaker B: So is the master branch. And here I can select the framework. So what is cool is there are some pre built settings if I select a framework. So I'm going to select React app because it's what it is. And as you can see, it already filled all the fields over here. So I'm going to go one by one. The first field is docker image because a docker image so you have to make sure that whatever docker image you're using has all the dependencies that you need.
00:12:04.258 - 00:12:51.378, Speaker B: So if you are in a situation where your site builds locally but then it doesn't build on fleek, you might want to look at the docker image. Also I note that like for example, my project is built with node twelve so I can add a tag like this. It's going to use a node twelve. It's a tag that we're using for all the fleek docker images. The build command that is good yarn and yarn build. Since it is a react site, the build file is going to go in the build directory and I can also select a base directory. The base directory is when you have a repository and there's all kinds of sub projects in it.
00:12:51.378 - 00:13:51.814, Speaker B: You can select the directory of the project in the case of this application territorial the smart contracts and there is a folder that contains the front end and it is in the app directory. So now I can deploy and now it gets this field it is building deploy started image the build command and now it triggers the build and in this little box it's going to show you the console which is very useful like debug if there is a problem. But this build process will last like a minute or two. But let's not wait. I already have a pre built version. It is right here, this one. So once it is built it looks like this.
00:13:51.814 - 00:15:11.364, Speaker B: This becomes blue. The deploy here is get to published if I click here, as you can see, this console items debug we give you like I said by default a web two domain but you can use your own. So if you go to the settings you can change the site name like I can change it to web3 demo confirm and as you can see it's changed the name of my site and also the name of the URL that we're giving you. You can also in domain management add the custom domain. Like if I own the vitalik C domain I could add it add domain and then you would go to your domain name provider and add to settings. And now you add your site connected to your domain. You can add like I said, ethereum name system domains over here and handshake domain names in our YouTube channel.
00:15:11.364 - 00:15:54.960, Speaker B: Just a video on handshake if you want to learn more about that. It's pretty interesting but that is it. Now the site is actually deployed. Let's go back to the presentation. So we just deployed a site. So if you have an NST project that's how you deploy it basically it's pretty easy. But let's get to the second part of the presentation, fleek storage because of course IPFS you can host your site, but it's really good for hosting all kinds of files, like images, videos, anything on Flick.
00:15:54.960 - 00:16:33.116, Speaker B: There are two ways to interact with Flick Storage. The first is through the UI. So on the site I showed you previously app Flick co you could see your site. As you can see over here, there's this storage section which allows you to upload files and interact with them. Or you can use Flick Storage JS which I will demo afterwards. But you can use our JavaScript API to upload to IPFS, get your files, et cetera. And it's the same thing as the sites.
00:16:33.116 - 00:17:28.720, Speaker B: We give you a CDN. So your files are going to be on IPFS, but we understand that you might want to also have a web two solution. So there's ACDM that you can use to access your files. So what are the use cases for the Flick storage product? The first one is distributing your web assets. So when you have a website, you probably have images, you might have videos, things like that. And if you put all these images in your repository, what you will notice is probably it might take a long time to build the site because the framework is going to copy the files and do things like that. And the build process is going to take forever.
00:17:28.720 - 00:18:31.872, Speaker B: Therefore it's better to upload it to a cloud platform, or in this case, the alternative fleek storage. And the idea is like in your image tags and the source, you put the URL instead of having the file in your repo. That's going to save you a lot of time in your build process. It's the best way to do it. But the second use case, which is the focus of this presentation, storing files of NFT, because of course, like for example, art NFTs, there might be a JPEG or a file like that associated to the NFT and you need to store this piece of art somewhere. And IPFS is an excellent way to do yeah, Flickstart JS. Just to mention it, it's our JavaScript API.
00:18:31.872 - 00:19:10.144, Speaker B: To interact with Flick Storage, you can add, remove stuff. It's the recommended way to use NFTs. A piece of art is very often affected with an NFT. Like here on this image foundation app. It's a site where you can buy and sell NFTs. But as you can see, each NFT has a JPEG or an image file associated to it. It's what gives the value to the NFT is that you are the owner of that piece of art.
00:19:10.144 - 00:20:25.000, Speaker B: But how do you actually store that piece of art is very important. And I'm going to make the case right now that you should use IPFS. So the first case here I show you one alternative is to store the art by location, which is a traditional web two way of adding files. For example, if I was to store a file on Imgur, for example, I'm going to get as a URL imgur.com 1234 and I could store my NFT at that URL. But that's a problem because first of all, it is a centralized server, so the file could be lost at any time. Also, maybe in my smart contracts, if I put this URL, what happens if Imgur changes the URL, for example, or this ID over here changes, then I lost the URL that's in the smart contract is invalid.
00:20:25.000 - 00:20:54.470, Speaker B: So there's all kind of problems. If you use web two URLs, you don't want to use that for your NFTs because the file can change, the server could disappear, mgur could go bankrupt. So you don't want to do that. Also, there's no guarantee that they are giving you the right file. That is not a problem. It could be updated, maybe change a few pixel, maybe it is censored something. So that's not good.
00:20:54.470 - 00:21:55.380, Speaker B: Here we show that IPFS ashes are better because IPFS ashes are based on the content. I upload my image on IPFS and it spits out a hash. This hash is unique because if I change even one pixel of the image, the hash is completely different. So in effect, when you're selling an NFT, the person can become the owner of a an IPFS with IPFS, particularly the Ash or the CID, anyone can pin this file, which protects you against censorship. For example, if the government doesn't like the image that is being propagated, they cannot attack the ash. Anyone could have the file. So it's the preferred way to store your NFT art you want on the blockchain to save an IPFS ash.
00:21:55.380 - 00:22:42.804, Speaker B: So I'm going to show you the demo of the Crypto Museum, the apps that we just deployed. So I'm going to open another browser over here. Wait a minute. So it is cryptomuseum demo, so it uses MetaMask. So I'm going to say this, put the password. So here I got a bunch of images that I uploaded. Basically what this app does is that you upload an image and it's going to mint an NFT with that CID connected to it.
00:22:42.804 - 00:23:25.840, Speaker B: So let's just upload an image, mint a new NFT. So I'm going to choose an image and I got this big tree. I'm going to click on create NFT. When I click on create NFT, it's going to connect to Flick storage, upload the image to IPFS, generate a hash, and then create a transaction to Ethereum to create a new NFT with that CID. So I do this. Now it's loading, it's probably uploading to fleek. Now it's uploaded, it's triggering a transaction.
00:23:25.840 - 00:24:02.476, Speaker B: I'm using Rupstone, so it's not real money, luckily. Let me just put a big gas price confirm and now it's minting the new token and it should appear over here. I want to show you the smart contract. So here, that's the smart contract for the NFT. All these images are on IPFS. As you can see here, the tree just appeared. I want to show you that this tree is on the blockchain and it's using IPFS ash.
00:24:02.476 - 00:24:45.820, Speaker B: So here I have the smart contract. I'm going to go in, read contract. Here I can fetch the CID, but it requires a token ID. So here the token ID of this NFT is 79. I'm going to copy that paste query and it spits out an IPFS ash or CID. And I can go to IPFS. I can now see it in a gateway.
00:24:45.820 - 00:25:13.110, Speaker B: Indeed, through the fleek gateway, I can fetch my NFT. So that's really cool. That's like how it works. It pushes the ash to IPFS. And indeed, on the blockchain on Ethereum there was the ash. So that's like the recommended way to upload files on APFS. I'm going to now open this.
00:25:13.110 - 00:25:37.550, Speaker B: So I want to show you the code real quick. Yeah. Now I'm going to make this a little bit bigger. Okay, close this. So this is a smart contract. I'll show you really quick. When you mint a token, this is what it's called.
00:25:37.550 - 00:26:25.480, Speaker B: You pass in the CID and Tan is going to create a new token, mint the token, and we're going to associate the CID to the token. And there's also this function over here, which is the one that we called when we were on Ethereum scan previously, that if I give it a token ID, it's going to give me back the very simple smart contract. The heavy lifting is done by the open zeppelin code. But if I go on app, I want to show you the part where it gets uploaded to a Flick Storage. So here. Crypto museum. So there is this the flick storage NPM package.
00:26:25.480 - 00:26:54.752, Speaker B: You install this in your app. Just search this. And then over here, the uploading is done by this line of code. So you call Flickstorage upload, you pass API key and your API secret, which you can get on the front end. You give it a key, which is the name of your file. And then you pass in the data which is the artwork was applied. And that's it.
00:26:54.752 - 00:27:30.960, Speaker B: Just if one calls the function, you have uploaded your file to Flick Storage, which we pin it ten to IPFS and it generates a hash. It's really that simple. The time is running out. But if you go to the documentation, fixer Edge is composed of very simple function like upload, get, things like that. It's not difficult to use. You don't need like advanced knowledge of IPFF to use it. So I'm going to conclude the presentation.
00:27:30.960 - 00:27:56.804, Speaker B: So we saw the demo, so it's pretty cool. Here's some resources. The docs in the storage section, you can get all kind of information about Flick Storage. The NPM package. We've got the Flick blog and again the YouTube channel. There's all kinds of content, including there's content on Flick Storage to recap. We saw that there's Flick hosting.
00:27:56.804 - 00:28:19.650, Speaker B: You can host your NFT site on FPFS, flick storage to host your web assets, and more importantly, host the piece of art associated with your NFT. I'm going to cancel the presentation, so thank you listening. I know time is running out, but there's some questions.
00:28:23.400 - 00:28:44.840, Speaker A: Thanks, Samuel. Yeah. In the zoom chat, there seems to be two or three questions that we can quickly answer before concluding your session, the first one being from Shrey. You're welcome to unmute yourself and ask the question yourself. Otherwise, I'm also happy to read it out loud.
00:28:45.180 - 00:29:25.028, Speaker B: Awesome. I'm going to go through the questions. So yeah, like you said, when you deploy an app on IPFS with Flik, what exactly gets stored on IPFS? So if I give you the example of a react application, for example, you got your code, you then build your site and it goes into a build folder. That folder is going to contain your index, HTML, your compiled JavaScript and CSS and et cetera. And that build folder is what goes on. So you don't have to use react. You can use any framework.
00:29:25.028 - 00:30:40.540, Speaker B: All the framework generally are going to compile to a folder like that, and it's that folder that will go to IPFS. Rafael Penteau asks what guarantees us that the file will never be lost if nobody is pinning the ash anymore, for example? Indeed, like correctly point out with APFS, if no one pins the file, it cannot be accessed. If you use fleek, we pin everything. So on the hosting, we pin the site, on storage, we pin the files, we take care of the pinning. So it's always available to you. If the government decide to cancel us, then anyone who Pins can continue, like distributing it, but we take care of pinning it so that it never gets lost. Question from YouTube if we build a front end app to upload an image from browser directory to RSS through Fleek Storage API, wouldn't the API keys for Fleeks be exposed on the front end client app? That's a really good observation.
00:30:40.540 - 00:31:15.530, Speaker B: So this application, it was a demo, so it's not like a real life application. In the real life, you would have a back end that would have the API keys, and the back end would take care of doing the calls to Flick storage. So this demo, I wanted to create a firebase backend, but I didn't have the time. So right now it's like that. Eventually I will update it with a firebase backend to create a demo. It's going to be more like it will be in real life, but it's true. Don't make API calls on the front end.
00:31:15.530 - 00:31:41.468, Speaker B: Question for YouTube if the keys are exposed on the front end, this might open. Yeah, exactly the same question. Good observation. In the real life, don't put your API keys on the front end, but for the demo, it's fine. Can we add our own docker images? I'm looking to use only as. Yes. So can you use your own docker images.
00:31:41.468 - 00:31:57.690, Speaker B: On the docker image field, you can type in your docker image and it connects to docker hub. So you can create your own custom docker image and use whatever you want. It's fully customizable. I think that's it for the questions. If there are more.
00:32:01.340 - 00:32:29.550, Speaker A: Great. Thanks so much, Samuel. Yeah, thank you for taking a great workshop and for getting everybody's questions answered. If you want to connect with Samuel, we're going to get him into the Web Three discord space, and he'll be available to take any further questions you may have when working with Fleek. Have a nice day, everybody. And yeah, we've got a full day of workshops planned, so look forward to seeing you in the next couple of hours.
00:32:31.040 - 00:32:34.530, Speaker B: Bye. Awesome. Thank you for inviting me. So have a nice day, everybody.
