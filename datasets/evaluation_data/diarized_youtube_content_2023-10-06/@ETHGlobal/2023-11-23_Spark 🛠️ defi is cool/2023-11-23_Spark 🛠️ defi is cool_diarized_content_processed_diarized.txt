00:00:07.610 - 00:00:34.310, Speaker A: Hey everyone, thank you for having me here. Let's dive in into the different offerings from Spark and what you're able to build on top of them. House cleaning. Spark is part of the maker ecosystem. Our main goal is to to basically encourage and grow the Dai ecosystem. And we're doing that through building DeFi infrastructure. So as of now, there you go.
00:00:34.310 - 00:00:56.666, Speaker A: We have three main offerings. One being spark conduits. This is essentially liquidity for your protocol. Then we have Sparklend, which is a lending marketplace where you're able to borrow Dai at a predictable rate. And I'll go a little bit in depth into that afterwards. And finally STI the savings die or the yield bearing stablecoin based on Dai. Awesome.
00:00:56.666 - 00:01:32.502, Speaker A: Okay, so Spark conduits, this is something that is currently still in development. It will be launched next year in Q Two, but it really is boils down to maker providing liquidity directly to different protocols. Think about this as a non BS LP into your protocol and also at very, very large scale. In essence, you can think of Condits as adapters. It's essentially part of this bigger picture, which is the maker allocation system. And then yellow, that would be the adapter. You would have an adapter per protocol.
00:01:32.502 - 00:02:17.586, Speaker A: And from the point of view it will be a single tone contract, meaning that the different subdows will be using the same conduit to actually provide liquidity to different protocols. Another way of thinking about them is a deposit box. At the end of the day, the only strict requirement that you have when building on the interface is having a deposit and a withdrawal function. That is the base menu level. From there on, you can build either logic on the conduit itself or you can have all that logic pushed into the protocol. The liquidity pool that the conduit is looking at, in very simple terms, a subdow. And for the sake of the hackathon, you can mock this as a simple EOA.
00:02:17.586 - 00:03:24.810, Speaker A: The subdow will make a decision of putting 10 million into the conduit and this conduit will be looking either connected directly into your liquidity pool, let's say you have a lending market, which is the case of Spark lend. The subdou will be providing die directly into the die pool, earning a yield, and then at any point the subdao will call the withdraw function and take it back. If we think about more complex examples, you would look at maybe something with real assets related, where the moment that the Dai goes to the protocol, it actually gets off chain. So there's a bit of like delay in terms of conversions and movement of funds. So that point she needs to kind of take care of logic of how you can do this off ramping, how can the subdao claim back the money or how the protocol can communicate with the subdao in terms of capital requirements or any of that sort. Okay, I'll go a little bit more into depth, in depth into conduits later on, in case there's any specific questions, mainly on the documentation. Now we can jump on to Sparklend.
00:03:24.810 - 00:04:08.774, Speaker A: So, Sparklend is a lending marketplace very similar to all the ones that are out there. The very important thing is that you are able to borrow Dai at a predictable rate. Meaning that really the rate is not based on utilization. So essentially you can borrow on the limited amount of Dai and it's very importantly, the rate changes based on a vote from governance at Maker. So you have a minimum of two weeks notice for the rates that will change and also what rate it will be in the future. This kind of works towards the better user experience when you're borrowing stablecoin. We have two sites, we have Dai and now we also have USDC and USDT.
00:04:08.774 - 00:04:41.346, Speaker A: They're able to provide us on a siloed mode. But also you have ETH and staked ETH on rocket ETH. So you're able to run emote on either side. And again, it's based on the pool construct. You can pretty much build anything. I think the important thing here is take advantage of the predictable rate on Dai market, but you can build on top of it, or you can also build tooling related to the lending marketplace and also works. A good example of this is liquidation bots.
00:04:41.346 - 00:05:12.750, Speaker A: This is something that we're always very interested in encouraging open source work on this. Lastly, we are on mainnet. There's a version on Gurley that is not fully up to date. We're also gnosis chain. We're not on the testnet for Gnosis chain. We're trying to encourage everyone to use local forks rather than running on public testnets. You'll still be able to do everything you want on Gurley.
00:05:12.750 - 00:05:46.010, Speaker A: If you need Dai on Gurley, I found some, I can send you some. But also, if you want to actually run a local testnet, let me know and I'll help you set it up. We couldn't be using turndelly. It's been working out pretty nicely. Yeah, a little bit. Just to shield a little bit on the predictable rates, this is kind of what you're going to be seeing. So this for a lot of integrations that you build on top of lending markets, this actually kind of takes care of a lot of your issues when having to deal with spikes and borrow rates.
00:05:46.010 - 00:06:10.770, Speaker A: All right. SDI or savings? Dai, the final product. This is a yield bearing Stablecoin based on Dai. It's Dai in the DSR module. So let's start first with that section. At Maker, the Dai Savings Rate module has been there since the inception of the protocol. It simply hasn't never been used, because it usually is to encourage more demand of the token.
00:06:10.770 - 00:06:42.378, Speaker A: Maker has actually been struggling for the most part with creating enough supply to meet the current demand. Therefore it hasn't been used. Maker has finally figured out the supply side of the system. Therefore now they're able to increase the rate and actually offer this to users. The yield is coming from the revenues of the protocol. Burr said the profits of the protocol right now two thirds of it are coming from treasury bills and a third of it is coming from ETH vaults. From the maker CDP system or the maker vault.
00:06:42.378 - 00:07:24.570, Speaker A: Classically users have to deposit die into the DSR. This is a very old school contract, so you actually get no receipt back when you deposit. So community members have traditionally created wrappers. Very old school one is called Chai and now the new one based on the standard 46 26 is SDI. Big important caveat here is the standard doesn't impose transfer event emissions at burning and minting. A lot of tokens have used it. Either way you duplicate a bit of gas, but at the same time it's easier to integrate with SDI.
00:07:24.570 - 00:07:49.154, Speaker A: We don't have that meaning that if you're going to be basically depositing, basically if your protocol is going to be involved in minting or burning SDI, you're going to be looking at those two events down there. Deposit and withdraw. That's the only major difference. Everything else is pretty much standard. A couple other things. So it's a vault token, so it doesn't rebase. It simply accrues interest in time.
00:07:49.154 - 00:08:35.370, Speaker A: Therefore basically its value goes up in time when it comes to the hacker. Specifically, it's very easy to integrate a token in your project. But we are very critical of being a very special use case for a yield bearing stablecoin itself. Easy litmus test on this is if you swap SDI for a completely different token, does your project still work? Does it do what is intended to do? If it's a yes, then the integration is not meaningful enough. Just to give you an example for a meaningful integration, lossless donations. So a user deposits 100 die, the protocol swaps it to SDI and then diverts the yield to NGOs. And then when the user withdraws, it's still 100 die.
00:08:35.370 - 00:09:06.940, Speaker A: Therefore haven't lost anything, only the opportunity cost by on this. Please come, reach out. Let's talk about the ideas that you're working on. Happy to jam on them and figure out the best fit for this. I think SDAT should be complete. There's not much to it, just a reminder of the bounties. And now let me is there any questions on this point? If not, I'm going to talk a little bit about the conduits themselves.
00:09:06.940 - 00:09:30.734, Speaker A: Notetakers cool. I'll get a little bit into this. Okay, so conduit still a very ethereal kind of concept. We're kind of working on it as well. So if you have any suggestions on how to explain it better, very thankful for that. The way I like to think about it is a direct pipeline into your protocol. It's liquidity coming from maker.
00:09:30.734 - 00:10:13.998, Speaker A: So rather than you going and doing liquidity mining or marketing to get users to deposit, you are basically going through an assessment process at Maker, where the protocol builds the conduit or the adapter into it. You're connecting the maker allocation system to your protocol. You go through a series of assessments. Again, not part of the hackathon, but once it's live, any subdow can deposit funds into your protocol under this Maker allocation system, where Maker governance essentially has an admin control over the whole system. The main thing here, there's two things here in documentation, we have an overview of what conduits are. And then this is the Sparklet conduit specific implementation. This is not live yet.
00:10:13.998 - 00:11:04.914, Speaker A: Sparkland does get essentially a credit line from Maker today, but it's with the old school system that we call the D three M. The three M simply says it looks at an external contract, says based on this rate on Sparkland, I will provide x amount of liquidity, and it basically runs on that in the future. Conduits are more of a generalized approach. So you can build this same logic into it, but you can also build a bunch of different logics as well as just have no logic whatsoever. And it's simply a very manual process of depositing and withdrawing based on some governance decision, for example. So this will be a real overkill for the hackathon, mainly because this basically takes into account the entire process of the allocation system. For example, the buffer registry, the roles, it's all part of this, all this.
00:11:04.914 - 00:12:24.666, Speaker A: You can just simplify it into an EOA and you simply say, hey, subdoub, send money here and then you could take care of the rest of the product. Quite important is if your protocol won't be able to provide next block liquidity, let's say you're a lending market, the subdoub provides liquidity into you and you're at 100% utilization. The question then comes in, okay, how can the subdao maker be able to pull their liquidity? So caveats into there are kind of what kind of differentiate your project from others when it comes to conduits. Just to give an example, this is currently being scrapped and reworked on, but the team here for Sparkland had a essentially look at withdrawal. But this is not necessarily the best thing, but essentially a request of funds function that it would call this function to the conduit. And basically if there wasn't enough liquidity in the market, it would send a message to Sparkland to increase interest rates, to be able to recoup enough liquidity to then send it back. Turned out there's a lot of edge cases that weren't well created for that.
00:12:24.666 - 00:12:58.630, Speaker A: But this is kind of the idea behind this. You don't need to add too much logic into the contract itself, but you do have to have these scenarios where what's happening in the worst case scenario, what will happen or what would gone essentially. Okay, I think that's all I wanted to say. This is a nice example. It's very simple. And again, it only implements the deposit and withdrawal functions and nothing else. And then just has an invariably testing that we're always very happy to see when people provide to hackathons.
00:12:58.630 - 00:13:55.080, Speaker A: Now, if there's still no questions, I'm going to go and show you some project ideas and pass hackathon examples. Let's go here. All right, hack on those ideas. And these are ideas are basically not based on building directly on top of these three systems, just something around them like more like tooling. So someone that doesn't have protocol engineering background, it's more than design you can do visual mementos. So this is how you can easily what's the best way to communicate or people to share either their positions or information about their SDI or their Sparkline positions. So I'm a personal fan of come on Larry, what's going on? There was a little nice thing that Larry had from a I forget what protocol cool, I can't do this.
00:13:55.080 - 00:14:33.810, Speaker A: Basically showing hey, this is my position, I am plus 50 cent like in profit, something like that. So for some of them that doesn't want to code that, the other one is liquidation bot. My team has built an open source liquidation bot. There's also other versions of it like the paradigm they created like a framework called TERMIS as well. So if you're interested in this also we're very interested in seeing implementations of liquidation bots and how you can deal with them. We currently have a quite basic liquidation system. Essentially if your position goes under, one half of your position gets liquidated.
00:14:33.810 - 00:15:34.790, Speaker A: So anything that can add logic on top of that and make them a little bit better DeFi saver with their auto repayment system or CRV USD, which essentially is the same thing with their Soft liquidations. That will also be a very interesting idea for a hackathon user analytics. I'm a big fan of analytics, so if you want to work on that, only very happy to support that. We can look at things such as from the risk perspective, but also on the growth and churn perspective, how the system is performing comparison against competitors. A big thing for example, that takes a lot of time and effort is parameterization. So deciding what's going to be the kink or the interest rate, I'm going to quickly show you. In every market apart from the So, this is essentially what it looks like, having a stable, predictable rate.
00:15:34.790 - 00:16:04.820, Speaker A: Right? Completely flat. Doesn't care what utilization it has, but for the most part, if you go, for example, to Ethereum, you basically have two curves. You have the first curve, you have the Kink and then you have the second curve. It takes a lot of time to actually build this and modify this. And of course we're in direct competition with Ave and Compound and other lending marketplaces. So in response to someone else changing their rates, we also adjust hours. So a project built on top of that was also extremely interesting.
00:16:04.820 - 00:16:59.330, Speaker A: Yeah, I put here a bunch of examples on user behavior, something I personally want to see. Build is an easy way to call Web three data from Google Sheets. That's also something that I would actually use every day. Then moving on, more on the, let's say, automation or gamma abstraction side. Let's say the simplest implementation for this would be kind of like the one click recursive leverage, similar to what summerfi or Instadap gives you, but then you can also do an unwinding deleveraging on the same side, creating a stop loss system as well. A previous hackathon project was building a univ four hook that act as a stop loss to Sparkline positions. So stuff like that.
00:16:59.330 - 00:17:36.800, Speaker A: Also very interesting. I'm going to stop saying very interesting. Finally, an alerting system. I think right now there's no amazing tool to just simply for a user themselves to create a very easy alert based on what the borrow rate is in the market or a monitoring of their position outside of like a cron job. There's been companies attempting to do this. The most accessible one called Hal XYZ actually got acquired by Infuria, so they're no longer providing the service. So open source competitor would be amazing.
00:17:36.800 - 00:18:16.230, Speaker A: Now quite important and actually more interesting with the idea of bundling different sponsor bounties together. We're particularly interested when it comes to conduits. If you're getting a conduit that links to another sponsor's, liquidity pools and so on, that makes a lot of sense. The very important thing about conduits is it's liquidity at scale. So you can have a great use case, for example, community borrowing and lending, but it does not require 100 million in liquidity into your pool. So this is kind of the way you should think. If you're doing that scale, it should be conduits.
00:18:16.230 - 00:18:35.570, Speaker A: If you're doing a small thing, it should be more like Sparkland or SDI. Yeah, not beautiful. But here are the past hackathon projects. You can check them out. They're a bit mixed between Conduits SDI and Sparkland. I'm going to leave it out there. I'm not going to open all the links.
00:18:35.570 - 00:19:05.914, Speaker A: And now we have about eight minutes of Q and A if you guys have any questions. If not, I'll just ramble on by myself. Okay, set yourself super updated. Meaning by now you're going to be missing. I think nothing is substantial. And yeah, the only substantial thing is in Gurley. You won't have USDC and USCT enabled, which we do have on main net.
00:19:05.914 - 00:19:49.858, Speaker A: I think that's the only main thing. Then you're going to have all parameters, but you don't care too much about that. Yeah, everything's there. It's not bricked yet. Yeah, but your family use stuff if you want to bridge stuff. More than happy to see that, but unfortunately we don't have it available anywhere else apart from garlic. I think there's a previous hackathon winner that bridge the entire thing into, I think, polygon Ckvm or Polygon, which is like I was like, great job, a lot of lift just to show the use case on polygon, but yeah, nothing else.
00:19:49.858 - 00:19:58.510, Speaker A: All right, perfect. Well, thank you very much. I'm going to be at Booth and just hang in here until probably midnight, and also all day tomorrow, so, yeah, happy hacking.
