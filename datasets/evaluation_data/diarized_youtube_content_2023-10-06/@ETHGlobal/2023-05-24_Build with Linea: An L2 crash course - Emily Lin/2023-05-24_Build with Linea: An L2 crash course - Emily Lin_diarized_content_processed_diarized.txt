00:00:07.210 - 00:00:37.880, Speaker A: Hi, guys. I am Emily. I am the developer advocate for linear. So linear is a ZK roll up. I'll be going literally from ground zero all the way to like, let's talk about Arithmetization. What does that mean? So let's break down the segment, right? Linear will be a type two ZK roll up. What does that mean? So starting from the literal base level, right? So blockchain trilemma is essentially a pick two situation, right? So you have scalability, decentralization and security.
00:00:37.880 - 00:01:09.362, Speaker A: Essentially, you have to pick two of the three, right? So in the case of ethereum, what they've done is they've chosen decentralization and security. What does this mean then? If we're sacrificing scalability, that is what causes high transaction fees as well as like, what do you call it, slow speed. Right? So how do we fix this moving forward? This is the layer two solution. So we've started from the ground. We are going one layer up. Well, actually, I guess one layer up from blockchain trilemma. But now we're talking about layer one.
00:01:09.362 - 00:01:56.062, Speaker A: So layer one is the underlying foundation and base blockchain, right? So layer ones take care of your node operators, the producers, the transaction data and the consensus mechanism. So examples, you might have heard of bitcoin ethereum. I hope you've heard of these avalanche, et cetera. Right? And so when we go into layer two, so linear is a layer two. This is a completely separate blockchain, right? So this is the part where we're solving scalability. One thing to note specifically is this piece of data availability, right? So the way roll ups work is they're going to roll up a bunch of transactions and the thing that makes them different is they actually post that transaction data back to ethereum. So something people often get confused by is like if you've heard of polygon.
00:01:56.062 - 00:02:16.470, Speaker A: Polygon is a side chain. So polygon has its own consensus mechanisms. That data is not posted back to ethereum, so you're not deriving its security. Obviously, this has changed. Now with polygon zkebm, that is a layer two. But Polygon proof of stake is not a layer two. So that is basically the layer two solution.
00:02:16.470 - 00:02:47.550, Speaker A: There are multiple different implementations of layer twos, but right now roll ups are the most popular. So now that we know what layer twos are, let's actually get into the roll up space, right? So what exactly is a roll up? What is it made out of? So, roll up has a few different components. The first piece is they have an on chain contract. So this is a roll up contract that exists on ethereum. This stores the roll up box, monitors the state, tracks the deposits. I'll get into deposits and withdrawals. Later, you have the off chain VM.
00:02:47.550 - 00:03:16.086, Speaker A: So like I mentioned before, roll ups, layer twos help with scalability. The way they do this is they take the execution layer off of ethereum. So they do all of this through the off chain virtual machine. And the last piece is like it's a bunch of things operators, validators, aggregators, sequencers. But essentially you can think of them as the people who take all the transactions and then publish that block. So this is the anatomy of a roll up. Like I said, I was going to touch on deposits and withdrawals.
00:03:16.086 - 00:03:46.974, Speaker A: So this becomes extremely relevant when we start talking about optimistic versus ZK proofs, right? So asset transfer process. The way roll ups essentially work is you basically lock up ETH on this roll up contract and then equivalent amount of ETH is minted on the L two. So then that's when you start using linear ETH or I guess like scroll ETH or whatever, ETH on that L two. The other piece is when you go backwards. So now it's like I've done all this stuff on linear. I actually want to withdraw it back on Ethereum. What is that called? It's called withdrawal.
00:03:46.974 - 00:04:21.290, Speaker A: The way that works is it's brought onto the ETH on the L two, is burned and then released to your account. This is super key when we start to talk about optimistic versus ZK roll ups. So now let's talk about optimistic roll ups, right? So with roll ups we're posting that data back to Ethereum. What does that mean is before we do that, ethereum needs to know whether or not this is true or false, right? So there's different ways of doing it. Optimistic roll ups use something called fraud proofs. So here specifically, they're called optimistic roll ups because they just assume it's valid. That is a less secure trust assumption.
00:04:21.290 - 00:04:53.066, Speaker A: The way they get around this is they say, hey, there's a seven day challenge period, right? And so in seven days someone can post a fraud proof to say, hey, this doesn't look right. Let's prove it true or false. And if it turns out to be false, that will be rolled back. If it turns out to be true, it will be push down. So again, this is really problematic for immediate liquidity, right? Because of that challenge period, there are existing solutions like trusted bridges that will do that immediately for you. The problem again is this is a bridge. The other piece is they haven't solved the use case for how do I immediately withdraw, like an NFT, for example.
00:04:53.066 - 00:05:29.022, Speaker A: So things you have heard of are like optimism arbitram base which is built on top of optimism's super stack. So now we're talking about zero knowledge roll ups. So this becomes relevant for linear, right? So instead of using a fraud proof, you're using something called a validity proof. Specifically, when we're talking about zero knowledge roll ups, that validity proof is a zero knowledge proof. They don't require a challenge period. That information is essentially sent into that proof, generated and then submitted down. I want to know when I talk to a lot of people who kind of aren't familiar with the space they hear zero knowledge and they immediately think privacy.
00:05:29.022 - 00:06:13.202, Speaker A: That's not the case. Zero knowledge proofs in this case for roll ups are just helping for compression of the data, whereas zero knowledge in other cases, that's going to be a privacy thing. So don't get the two confused. I can talk about that a little bit like offline or you can ask a question later. But examples include like obviously linear but Zksync, polygon, Zke EDM scroll and Snarknet. So now we've covered layer twos roll up, zero knowledge. What do I mean when I say a type two ZK roll up? So first off we need to talk about what is a Zke EVM? So Zkevm is that virtual machine that will take that smart contract transaction, utilize the Ethereum infrastructure and also translate that into a way ZK proofs can understand.
00:06:13.202 - 00:06:49.422, Speaker A: So this is actually when I talk about Arithmetization, this is also why ZK rollups came out after optimistic rollups, right? Because ultimately what is ZK proof is a math proof. How do you translate, what do you call it, computer programs into polynomials that math can prove. That's really hard, right? And then alongside that, Ethereum itself is not very compatible to being able to translate into these math parts. So this is where the Zkevm comes from. This is where we also start to have the different types. So I'm going to touch on the different types. So at the highest type that's a type four.
00:06:49.422 - 00:07:23.814, Speaker A: This is high level language equivalent. So for those of you who are Ethereum devs, that's going to be writing in Solidity, that's writing in Viper. This is actually going to be written, compiled down into kind of a different VM, right? So it's not bytecode compatible. What this means for you as a developer is your tools will change a little bit. So how many of you have deployed a smart contract before? Okay, so most of you, right? So you might be familiar with like hard hat, foundry, stuff like that. They are not natively able to handle type four Zke EVM. The workaround there is these people actually have plugins.
00:07:23.814 - 00:08:00.680, Speaker A: So you might have seen like a ZK sync hard hat plugin, right? That is because they are not bytecode equivalent. Their thesis is like, hey, actually Ethereum is not great for ZK proofs. We're going to be faster because we're changing it. Right? The next piece is type three is kind of a transitionary stage. This is where most of the type two roll ups are right now. And so by that I mean Stark or not Stark, that polygon, Zkbm, linear, scroll are all going for type two. So what that means is we are language level equivalent, we are also bytecode equivalent, right? So we are the closest to Ethereum, which is a type one.
00:08:00.680 - 00:08:32.414, Speaker A: Then I guess if you say as you go farther away. So in terms of, I think the thesis of people or the projects that are chasing type two Zkedms is you're taking advantage of the existing developer tooling space. You can change the fastest as ethereum changes because it is constantly changing. Right. And yeah, that's kind of the different types. So kind of in the sphere of is it still not? Okay, cool. You can pretend that you saw this.
00:08:32.414 - 00:08:48.410, Speaker A: Oh, yeah, okay, whatever. It's there. No, well, hopefully you have good memory. So you saw what that meant. But it's basically a graph of, I guess, compatibility versus performance. Right. So the assertion is essentially the less compatible it is, the easier it is to make it performant.
00:08:48.410 - 00:09:13.260, Speaker A: The more compatible it is. It is harder to make it performant. That is true. I'm going to say, I think within the ZK space, the tech is changing. I don't think the assertion that being farther away will make you faster if you just take social proof of people didn't even think ZK roll ups could exist. We are at a place where people are building type twos. There are projects that are also building type ones.
00:09:13.260 - 00:09:41.298, Speaker A: That's not the case. Anyways, I'm going to move to the next slide and you're not going to see it, which is really sad because I have another really cute Kermit GIF. But essentially the slide says the same thing from the beginning. Linear will be a type two ZK roll up. Hopefully all of you know what that means now, right? And so now I'm going to talk about exactly what linear is specifically. Right. So linear is the product of four years of research and development at consensus.
00:09:41.298 - 00:10:08.638, Speaker A: We actually started out just doing ZK for kind of like, what do you call it, payment privacy. And then kind of as we were working on that ZK research, we realized, hey, actually the tech we're building is really compatible for roll ups. And that's kind of how we moved into that space. Like I said, we are on the way to Zkedm. It's really interesting because our approver is powered by an award winning ZK circuit library called Vinarc. It is open sourced. It's used by other projects as well.
00:10:08.638 - 00:10:37.206, Speaker A: We went public testnet in end of March. At this point, we have over 11 million transactions, 1 million wallet addresses, 196,000 deployed contracts. So the engagement is huge. Right, cool. So kind of like, that's the overview of linear, kind of where you build. So I think something I get a lot is like, there's so many roll ups, how do I choose? So there's a few factors to consider. Right.
00:10:37.206 - 00:11:01.834, Speaker A: So the piece I said finality, how is that transaction? When can you withdraw it? That's the optimistic versus ZK kind of question. Right. So challenge periods, optimistic roll ups have that. That's not the best thing for immediate liquidity. When I talk about liquidity, it's like how much people have already bridged onto the roll up. So my users who are on the roll up already, how easy is it for them to get stuff and interact, et cetera. The other piece I said is network effects.
00:11:01.834 - 00:11:32.262, Speaker A: So this is a lot more so in the sense of as a builder, how easy it is for you to basically develop adapt. There is a really robust ecosystem around Ethereum already. If you've heard of projects like StarkNet, for example, that start off in Cairo, that creates a whole new world where someone needs to learn Cairo to do smart contract security auditing. So what we're saying right here is like EVM equivalents compatibility. I think that's the winner of something to think about. The last piece is users. Oh, I have two last pieces.
00:11:32.262 - 00:12:14.806, Speaker A: Users. So how large is my addressable audience? So as an entrepreneur, I obviously want to go where the most people are, right? So that's kind of a thing to consider. And the last piece is security. I think, again, leaning back on trust assumptions, optimistic roll ups aren't as trustworthy. I'm not going to say that I feel like that's really spicy. But the next piece is when we start to talk about centralized sequencers versus decentralized sequencers. Where does that fit into the security narrative? I'm not going to dive into that because we're talking about how to build, but essentially kind of how does linear fit into that system? Those images aren't sitting up exactly, but essentially, like I said, Zkedm type two, I've covered why that's cool.
00:12:14.806 - 00:13:06.194, Speaker A: I think the last piece that is really interesting about Linear specifically, so when we tie into that part about liquidity and user base, right. Linear is a consensus product. We sit within the same ecosystem as MetaMask infura like diligence our own ETH clients. I think that piece with MetaMask is incredibly interesting as like an L. Two proposition is we are there already being able to take advantage of the benefits of the most popular web3 wallet, right? So when you think kind of to the future in that sense, I think that's the highest value prop in what we offer. Please tell me if you guys actually care more about how the prover works than how big the audience is, because that would be a really interesting conversation. But anyways, last piece I guess is I kind of wanted to go over what that looks like specifically when we talk about language equivalents, bytecode equivalents, and then VM.
00:13:06.194 - 00:13:46.558, Speaker A: So as you can see, the farther you get away, the little bit is different. Ultimately, this is kind of where the type two S are living. And the last piece then is, like I said, on the linear side, we actually don't think type fours will be the fastest. So circling back, right, type fours, their thesis is we have to depart in order to be fast. I think linear, what do you call it, our tech. Right now, we're really focusing on the Arithmetization part. So the cool thing about ZK proofs, especially in comparison to optimistic proofs, is you can put a ZK proof on top of a proof on top of a proof on top of a proof and make things smaller and smaller and smaller.
00:13:46.558 - 00:14:14.650, Speaker A: Right. So you get infinite scale with ZK rollups, recursive ZK rollups as compared to, like, a fraud proof, for example. So there's really interesting use cases there. So our thesis is not necessarily that you have to make that decision between type four and type two. So we're going to get into the section of actually how to build on linear. My WiFi has been kind of funky, so I'm not going to do this necessarily live, but I'll just show you kind of the different ways to do it. The slide didn't immediately change.
00:14:14.650 - 00:14:40.786, Speaker A: Oh, here we go. So the first thing you need to do is get linear ETH. So there's a few ways to do it. You can bridge it over to linear girly ETH to linear. The other two second method, it hasn't come out yet, but we are building an inferior faucet to drip test ETH directly onto linear. The third method specifically for you ETH lisbon builders out there is I am a linear ETH whale, so please feel free to leverage me as your faucet. You can find us on Discord.
00:14:40.786 - 00:14:57.274, Speaker A: Reach out to me afterwards. I will literally send it to you right now. Emma's over here, he's BD at linea. He also has a lot, so take advantage of both of yeah, yeah, but only at Lisbon. If you talk to me afterward. I'm just kidding. I'll always be nice to you.
00:14:57.274 - 00:15:28.790, Speaker A: But essentially when I talk about the ease of use with a type two ZK AVM, it's literally just swapping out your RPC, right? So when we talk about Truffle, that's a smart contract tool. If you are starting with Truffle, I recommend using their next JIS box. It's basically a full system of smart contracts connected to a front end with tests and everything. The only thing you need to do actually, maybe I can demo this. I'll show you. Yeah. Okay.
00:15:28.790 - 00:16:04.490, Speaker A: Is this big enough? Okay, so this is Truffle dashboard. You can use this with hard hat as well. Let me open up. Code dev lineademos. Is this where it is? I don't remember. I'm just going to say it was here. Okay.
00:16:04.490 - 00:16:23.870, Speaker A: No, I don't know where I'm at right now. So I'm just going to exit out here. Do this first because I know where that is. Okay, here's a terminal. So I'm going to do a Truffle dashboard. Here is the thing. So this does deployment through your MetaMask wallet.
00:16:23.870 - 00:17:07.018, Speaker A: If you wanted to deploy on Gurley, you would just use Gurley. In this case, you can just switch the network over to linear. I need to click to connect, and the difference here then would just be CD, Truffle, and then Truffle migrate network dashboard. So this is cool because I didn't have to show you my private key at all to deploy, which is really nice this is also usable with hard hat, but as you can see, the difference between Gurley and Linear was literally just switching your MetaMask wallet. Right? So when we go back to kind of the different tools, the same thing. I don't know how many of you guys use Scaffold ETH. It's pretty common, I think, for hackathon devs, literally just change the default network.
00:17:07.018 - 00:17:27.974, Speaker A: Oh, all the screenshots aren't showing up. Okay. I can try and open up the code. We'll see if it's working. Yeah. Okay, so basically, this is the Scaffold repo. You just change your default network, like Gurley versus Linear or something.
00:17:27.974 - 00:17:48.218, Speaker A: You just swap out the RPC URL? So if you look at the girly one, this is what it is. That's a fake infura API. All I did was say, hey, now let me rename this. And that was deploy on Varcat. So kind of the same thing. You can do dashboard with hard hat if you want. And the last piece is Foundry.
00:17:48.218 - 00:17:56.670, Speaker A: Download it again. Wow. So easy. You just swap it out. Damn. No one clapped with me. That's really awkward.
00:17:56.670 - 00:18:17.240, Speaker A: Cool. Okay, so anyways, feel free to get in touch. There was a QR code with my information, but that's fine. Let me know if you have any questions. I don't know if I have time right now. Okay. I have, like, ten minutes for questions, or we can talk privately, but, yeah, that's my information.
00:18:17.240 - 00:18:56.724, Speaker A: Feel free to message me for Linear E. If you are hacking, we have a bounty specifically that says just deploy on Linear. If you're deploying a smart contract, swap out the RPC, ask me or Emma for some linear ETH, and you should be eligible. So, yeah, that is it. Thank you so much for listening. I hope you learned something today. Are there any questions? What's going on? No questions.
00:18:56.724 - 00:19:07.490, Speaker A: Okay. We are good. Thank you so much for listening. I wish you the best of ETH. Lisbon. I hope I recognize your face during judging. Okay.
