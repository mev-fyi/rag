00:00:07.290 - 00:00:43.046, Speaker A: Hi, everyone. Welcome to our presentation. So, today we are going to talk about building secure cross chain applications with chainlink CCIP. So we're very excited to be here today. My name is Harry Papacrusiu, I manage the developer advocates at Chaining Labs. Today I'm joined by my colleague Sol or Solange, and also with co founder and CTO Steve Ellis. So we're very excited today because we launched a new product on Monday called Chainlink CCRP.
00:00:43.046 - 00:01:15.134, Speaker A: It's been in two years in the making and we're very excited to talk to you about it today. But first, we're going to talk about the bounties because that's why everyone's here for. So we have two tracks. In terms of our bounties, we have a track specific to CCIP. So, $2,000 for the best three projects that use CCIP in their submission. And we're going to talk about CCIP in just a couple of minutes. However, we have $1,000 for the four best projects that use another chaining service in their submission.
00:01:15.134 - 00:01:38.540, Speaker A: Right? So if you're building a DFI app, you can use data feeds. If you need randomness, you should look at VRF. If you want to do API calls, you should look at functions. And if you need to automate your smart contract calls, et cetera, you should look at automation. So we're not going to talk about those services today because we only have 25 minutes. However, I urge you to go to the chain docs at docs chain dot link and check them out. So let's go.
00:01:38.540 - 00:02:48.286, Speaker A: So, introducing CCRP. So, before we introduce CCRP yeah, that is a bit bright. I want to talk about the cross chain smart contract, because when everyone talks about smart contracts, it's usually in the context of a specific chain. But what a cross chain smart contract is, when you have smart contracts deployed on multiple blockchains, two or more, and they all talk to each other across each of the networks at the protocol level to create a single unified application that is the cross chain smart contract. And that is what a cross chain protocol such as CCRP enables you to do. So what can you do in CCRP? So the chainly cross chain interoperability protocol launched on Monday, it's now live on testnets for you to use in your submission right now. So, Polia, arbitram, optimism, avalanche, polygon, and you can use it for any of so you can use CCRP to send messages from one smart contract on one blockchain to another smart contract on another blockchain.
00:02:48.286 - 00:03:43.422, Speaker A: You can use it to send tokens. You can send tokens from a wallet on chain A to wallet on chain B, wallet on chain A to smart contract on chain B or smart contract on chain A to wallet on chain B. And you can do what are called programmable token transfers, which is basically combining a message and a token in one. Let's move on. So what are some cool things that you can do with CCRP? You can send tokens, like we said, if you're building DFI apps, you can use collateral on one chain and send it to another chain and make it available on a DFI protocol or a DFI smart contract on that chain. And what CCRP does is it enables what I call true Web Three DFI composability, right? So when we build DFI apps and we talk about money, Legos, it's always in the context of one chain. So you have composability on ethereum, avalanche, optimism.
00:03:43.422 - 00:04:32.034, Speaker A: But with CCRP, you can take all the DFI protocols and have composability across the entire Web Three landscape where a DFI decks on polygon, you can combine that with a lending and borrowing protocol on Arbitrum, right? So DFI composability across the board, you can do cross chain NFTs, can mint an NFT on one chain, make it available on that address on multiple other chains. You can combine the cool features of account abstraction and you can add a blockchain abstraction layer to that as well. Have a think about that. Gaming is really cool. You can have game assets available on Multipes. And when I play games at home on Xbox, a lot of the games I can play against people on PC, web Three games should not be any different. Like, let's say you're building a turn based game that's not real time.
00:04:32.034 - 00:05:03.182, Speaker A: There's no reason why me on Arbitrum shouldn't be able to play a game against Steve on polygon. This is what CCIP enables. So now you know what the cross chain smart contract is, you know what CCRP kind of is, and you think, Well, I've never built something that's cross chain before, why should I try now? Right, so I'll give you a couple of reasons. The first is we have Bounties and that's why everyone's here. We've lost the slide. Yep. That 1 second reason.
00:05:03.182 - 00:05:50.874, Speaker A: This is the most important to me, in my opinion. Right, so we've all had a great week at EthCC and it's now culminated to the ETH Global hackathon here. But guess what? Everyone here is in competition with each other and everyone would love to have their project declared as one of the finalists, right? So there's going to be a lot of great projects, I'm sure yours will be too. But you need an edge, you need something to stand out above everyone else. And application, cross chain application that you deployed on multiple chains that talk to each other across multiple chains, that's a big deal. That's going to impress the judges, not just us. And if they're looking at two projects that they love and they're not sure which one to progress, and one of them is a cross chain application and one of them is not, guess which one they're going to choose.
00:05:50.874 - 00:06:20.082, Speaker A: They're going to choose the cross chain one. Sorry, go back one more time. And one more point I'll make is when you use chainlink in your project, it shows you're serious about security and decentralization and trust minimization, because that's kind of synonymous with the name chainlink, right? DeFi protocols have issues. They have flash loan attacks, price Oracle attacks. And they come to us and they say, hey, can you help us out? We've had this issue and then they use our services and then things work fine. And then the community says, okay, cool, they're using Chainlink now. Things are safe.
00:06:20.082 - 00:07:04.338, Speaker A: So when you use Chainlink, your project automatically inherits those properties, security, trust minimization, reliability, not just at the technical level, but at the social kind of level as well, because you're showing the world you care about security and that you're now powered by Chainlink. And again, so CCRP, we think it's the easiest cross chain protocol to use as a developer. You can go forward. Again, we've taken a lot of time to design it so that you can easily just with just a few lines of solidity. The billing is really easy and seamless. And in terms of developer experience and friction, we've tried to make it as good as possible so that you can use it. And this is important because you guys are on a limited time.
00:07:04.338 - 00:07:16.950, Speaker A: So we're going to talk about a bit more about that in the demo. Let's move on. So now I'm going to introduce our friend Steve Ellis here and he's going to talk a bit more about CCRP. Thanks Harry.
00:07:18.010 - 00:07:58.614, Speaker B: Yeah. So not only we think you should use CCRP, not only because it has the simplest developer experience and the easiest billing model to integrate with quickly, but longer term it is the most secure. And so if something comes of this hackathon project, you want to turn it into something else, you will easily be able to scale up. Use this on a production level application. So just to walk you through some of the security that we have baked into this, so there's essentially three different steps that this goes through. You first send your message to the onramp. At this point, you kind of stop worrying about it.
00:07:58.614 - 00:08:47.966, Speaker B: You just send a message actually router, and the router then routes that it will get picked up by one of our decentralized Oracle networks. These are what power all chainlink products. This is the base level of security for everything that we offer. After that, once the chain has finalized that the message gets written on the other side, the arm network will then confirm that message. We'll talk a little bit more about the arm network later, but the arm network checks that message and then essentially unlocks what the next blesses the message so it can be passed over on the next chain. So it's then unlocked on the destination chain and the executing don picks it up and delivers the message for you on the other side. So pretty much once you there's, lots of security baked in behind the scenes.
00:08:47.966 - 00:09:25.902, Speaker B: You just have to send one message to the router gives you easy pricing. Quote and just to describe the arm network a little bit, the arm network is our security. It is a complementary second don. It is a second client implementation written in rust different language, written by a different team, completely separate. So you're sure that none of the same bugs will like no bugs are going to show up on one side and they'll be caught by the other. So this watches, monitors the network, brings an extra level of security, but hidden behind the scenes from you, you won't have to worry about it. Your application can scale up to however much TVL you want.
00:09:25.902 - 00:09:33.150, Speaker B: And so I'd recommend both easy use and long term usage. I think this is a great way to start getting involved with CCI.
00:09:33.890 - 00:10:01.014, Speaker A: Thank you, Steve. We're pressed for time, so I'm going to move on next slide. So if you want to use token transfers in CCRP, we've got two deployed, ERC, 20 tokens on all the chains that are kind of generic tokens that you can use. One of them is a lock and mint, one is a burn and mint. So the lock and mint token, you can go to the deployed contract and mint as many as you want and it locks up tokens on chain A and then mints them on chain B. And then when you go back, it kind of does the opposite. It burns them and then unlocks.
00:10:01.014 - 00:10:51.994, Speaker A: If you want to use the other deployed generic Yasi token for whatever purpose you want, the burn and mint one, it'll burn it on chain A, mint it on chain B and then backwards going back the other way. So messaging I already talked about, I'm just going to once again say you can send any kind of message you want. It could be instructions, it could be logic or whatever for the receiving block contract to do anything for essentially and programmable token transfers. Once again, you can send tokens as well as a message to say, hey, here are some tokens and by the way, here's what I want you to do with them. Now, in the other smart contract on the other chain, so just last point for myself, the fees is gas cost plus a premium. You pay in link on the source chain and you pay once you pay in link or in native tokens for that chain or the wrapper version. So you pay on that initial transaction.
00:10:51.994 - 00:11:01.680, Speaker A: CCRP will handle the rest. It'll make sure that the other smart contract gets the transaction. Now we're going to see a demo from Sol.
00:11:02.710 - 00:12:08.140, Speaker C: Hello? Yeah, well, I love to do a hands on workshop, so I love to do you doing with me, but I know that I cannot do this in 15 minutes. So I will copy and paste a lot of comments for you, I will copy and paste a lot of links and then you can do this later and all of us will be around to help you. Okay, let me move on from this and here we are. If you'd like to get all that I'm doing, I will be here in this collaborative bed. So take a picture of this, go to this link if you'd like to follow me now or later. Okay. And if you'd like to add your name and country here could be good as well.
00:12:08.140 - 00:13:15.364, Speaker C: And first of all, I read, copy and paste some requirements for you. So to add the Fuji on MetaMask because I'm doing out today from Fuji to Sepolia this was my choice. We have other possibilities, I choose this and if you don't have a Fuji here you can add Fuji to MetaMask you can get tokens on Fuji you don't need to have the Link token but because we can pay fees using Link or using the Fuji but are you paying Link? So if you'd like to have Link tokens as well is this. And my goal is to show you two different ways to do this. First using our had starter kit and then using remix the easiest way. Okay, the had starter kit is this here and from the oh I forgot one thing. Yes.
00:13:15.364 - 00:13:57.604, Speaker C: Let's be sure that this is working. Yes, this is the Hadhat Starter kit, it's good enough. And then from here I'm going exactly to the example three. It's not three, I am not transferred tokens. I'd like to go to example five. No, well but it must be open because I am in a computer that is not in the network of Chain link yes, but he'll be shared with this. So I'm doing the example six.
00:13:57.604 - 00:15:14.630, Speaker C: Here we are. Okay, let's edit this for you as well. And what's the idea of example six is only to send some text, some message and if you'd like to see another a bit complex example doing the same thing but not a message but I did two days ago in ECC and it's transferred. I minted a token on Fuji and the token appear on Sepolia. So in the same way that I can send a message, I can send a comment to another chain. So this is another good idea for you. So to do this now again, I only copy and pasted the instructions for you because if this you get clone compile and we have some so important parts to show you related to encrypted environment because chainlink created developed a new way to have your environment variables in an encrypted file and how you can do this.
00:15:14.630 - 00:15:39.280, Speaker C: First of all, you need to set up a password. And every time that you are open your repo, you need to set up this. And I think this will be sweet. Now better show you. Okay, so I'm here. I need to set up my password again. And because I did this before, I need to use the same password every time that I came here.
00:15:39.280 - 00:16:21.632, Speaker C: Yes, I think I'm right. And after this, you need to set up these variables, these three variables. And like get your private key. I'm going from avalanche for each to Sepolia it. And you run this command and set up each of it. Okay. And following my copy and paste, if you'd like to get the URL directly from chainlist.org.
00:16:21.632 - 00:16:43.916, Speaker C: It's good, it's easy. Okay, this is another trick for you and I have mine done. I can show you here because it's encrypted. You can do nothing with this. And this is the example. What we need to do is this part. So if you can follow me, we are here.
00:16:43.916 - 00:17:20.980, Speaker C: So I deploy the basic message sender on Fuji and I already set up this. Okay. You can see that this is not my contact yet. We need to wait a bit. Yes, this is my contact. Okay. And I can share with you because maybe we'd like to see my content later.
00:17:20.980 - 00:17:43.782, Speaker C: Where? Here, let's put this near. Okay. No, not this. I can see my keyboard. So dark. Okay, this is done. Let's go to the next step that I have here.
00:17:43.782 - 00:18:23.824, Speaker C: My step is here. You need to send to fund because I'm using link, I need to fund with links, my contact. Let's fund it. You don't need to send one link can be less. But to be sure, now I'm sending one link. We are using less than 0.1. So I'm in the right account and I'm sending to this address, not a Vax, but the link token and one link in our starter kit.
00:18:23.824 - 00:19:15.776, Speaker C: You can do this in a comment as well. I'd like to use MetaMask in this point. Okay, now, okay, I have the sender. I will go to the other chain and deploy the receiver. Here we are. I have the comment done. Pending some seconds, I will have the address of my receiver and I can copy the next comment for you as well.
00:19:15.776 - 00:19:47.130, Speaker C: Because after this we are sending the message and I would like to get my transaction. Let's prepare this for you. It's the same and let's see what happened here. Almost done. Wait a bit more. I don't know if it's my Internet. I have another receiver that I did before.
00:19:47.130 - 00:20:30.600, Speaker C: Maybe I can use it to be fast. I use this receiver before and after I have my after I send and after I receive, I have the sender and the receiver. I can send the message. To send the message, I need to fill the sender. This is the sender and I need to fill the receiver. Let's see if my new receiver is here. Not yet.
00:20:30.600 - 00:21:00.652, Speaker C: Let's use the receiver because I not wait. Now this is the receiver and this will be my message. I change my message. My message will be hello, Et Global Pardis and I need paying fees in link. Let's do this. Oh, I need to wait. Okay, so I'm awaiting this.
00:21:00.652 - 00:21:52.140, Speaker C: Let's do another point as well because I told you that I'd like to do another contract using Remix. So the Remix part will be this. We have this tutorial on Remix, the cross chain tokens. And we have, like Harry said before, we have a special token that you can use to test and to transfer to all places. I have this as well and this is some parts that we need to have. I create a special contract to use this that I did some part faster for you. I add my contract here because it is not on the documentation and you can use this content.
00:21:52.140 - 00:22:30.084, Speaker C: You can copy and paste this contract because I put all the information that we need. The outers, everything is here as well and I have the right interface and this concert that it is. Here what I'm doing here. I'm using the outer to do the transfer. I'm using the chain link client, the link token interface and another interface for the token that I told you before. And everything is set up here. This is the outer, this is the link token.
00:22:30.084 - 00:23:15.000, Speaker C: This is the address of the CCAP test token and the destination chain selector where I got this, it's important to you to understand where is this? Like this is the supported networks and here you can see that for example, if you'd like to go to understand Sepolia, this is the chain selector to go to Sepolia. This is how we go to Sepolia to other links. I'm on Fuji. So this is the idea like to go from Fuji to Sepolia. And I have these tokens that I can use in this time. Okay, and what happened here? Oh, finally. Okay, two minutes.
00:23:15.000 - 00:24:05.880, Speaker C: I know I will send my message, but we cannot wait my message to be in the other chain because it used to have four minutes to move from one chain to another. Unfortunately, next time this guy you not talking before me, I start myself and then you calculate it. Yes, and this is my receiver. Now can I add my receiver here? This is my new receiver and I assigned this comment and then we can check the translator in some place. This is the message. And when I got the transaction, I can check this in our CCIP Explorer. Yes, this transaction will save my life.
00:24:05.880 - 00:24:37.540, Speaker C: But this is only a part of the transaction. This is one part and we need to get the other part that is here. Okay, this is my transaction, what I do with this now I'm going to the CCIP Explorer and to conclude my presentation, I will ask only to talk what am waiting here now?
00:24:40.470 - 00:25:03.100, Speaker B: We are waiting for finality on the source chain and then once that source finalizes, then the arm network will sort of bless it to pass through and it'll get picked up. So yeah, right now we're still waiting for chain finality. This is a security mechanism just to make sure token transfers don't roll back.
00:25:05.070 - 00:25:11.950, Speaker C: Yes. And we have three status here. It's certified, finalized, blessed. What is blessed?
00:25:12.370 - 00:25:29.118, Speaker B: Blessed is when the Arm network the second implementation, the second client has said has also verified that this is a separate dawn network that essentially or decentralized Oracle network that checks the one they don't have access to move any funds. They're purely a security mechanism.
00:25:29.294 - 00:25:57.290, Speaker C: Okay, great. And the last stage will be the finalized when you really can check the other chain and see whatever you'd like to see over there can be the message for now, remember that I added this for you. So in two minutes you can check here and see that the message is over there and why we need to wait so long time and why is this timing?
00:25:57.970 - 00:26:10.686, Speaker B: This timing comes from the blockchain's finality. So yeah, in this case it is just how many blocks deep avalanche has to be before it is guaranteed finality.
00:26:10.798 - 00:26:41.998, Speaker C: Okay, yeah. So is this I know that you have here all the contents that we need to check it now, but I know that I couldn't finish if I have you one more minute. I have 1 minute. Yes. Okay, I have another minute. I'm so happy I can go here and using the content that I share with you and I already set up it, I will deploy the content just now. Here we are.
00:26:41.998 - 00:27:17.498, Speaker C: I have others deployed but let's deploy a new one and okay, this is my contact. You can check my contact later. No, this is not my contract. My contact is here. So this is my contact. I need to fund my contact as well with link. So let's go here not from no and send it to this address and send the link again.
00:27:17.498 - 00:28:17.642, Speaker C: Remember that I can pay with AVAX as well and once it's funded, I can see I can send the message. Let's use the order that I did before. This is my example transfer and let's wait this transaction be confirmed contact interaction, confirm it. This is the block explorer. So if I go to our Explorer and see Gist this is the other transaction that I did now and we are waiting for this transaction as well. And this irrelevant minted tokens in one chain and this will be minted in one chain, burned in one chain and appearing another chain. This is how the process let's see, the first is done.
00:28:17.642 - 00:29:14.060, Speaker C: Oh, I'm so happy because now you can see. Let's go. Let's come back here to finish our workshop here I send the message and I can go to the receive address and can see this. Okay, let's edit this for you to be sure that you can see with me. And this is my receiving address that I changed what? My new receiver address because I changed the messaging receiver address. Where are you now? Here is the receive address and let's see our messaging and hello to Global paris. Thank you, everyone.
