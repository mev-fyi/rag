00:00:00.090 - 00:00:09.120, Speaker A: Talk on priceless financial contracts. Building synthetic assets with, uma Hart, welcome to the stream. We'll let you take it from here.
00:00:10.690 - 00:00:31.654, Speaker B: Thanks. Josh, can you hear me? Okay, everybody, all good? All right, cool. Let's get this share started. Okay guys, so thanks for having me as usual. I love these ETH online events. I love this community, I love these hackathons. So this is super fun.
00:00:31.654 - 00:01:22.370, Speaker B: So I want to talk about priceless financial contracts and how we can use this design and this design philosophy to build synthetic assets with Uma. With Uma. And it's really a focus on what the hell this priceless thing? So, okay, let's start with what Uma is. Uma is a protocol for building synthetic assets. So we let developers create priceless financial contracts, which I'll get into what that means and other types of synthetic assets that minimize Oracle usage. And the protocol really has two interwoven components. It has these design templates that are again written pricelessly designed to minimize Oracle usage, and data verification mechanism which is really like our version of an Oracle that's specific or purpose built for this design philosophy.
00:01:22.370 - 00:02:25.734, Speaker B: And our view is that these two technologies combined are really what enable the creation of super fast, efficient, and very secure synthetic assets and other types of financial contracts on Ethereum. So one example that we have is this yield dollar product that we've had live on main net for a couple of months now. And right now this product has over 40 million of total value locked in it the current iteration and it's only expected to have two Oracle calls in a three month period. So I think this is very cool. I think this is a very useful innovation and I'll explain in more detail why, but this is like to kind of give a high level flavor of what this priceless idea is. We can put a huge amount of value locked in these contracts and we can use an Oracle extremely rarely. So how is this possible? How are we doing this? And the answer is this priceless framework.
00:02:25.734 - 00:03:22.874, Speaker B: So our priceless contracts are designed to minimize Oracle usage by really framing the DeFi design pattern or design problem as a challenge response game. What that means is that we're writing DeFi contracts that are designed to be executed or be looked at optimistically, where the baseline assumption is that people are doing what they say they're going to do. And we only use the Oracle in the event of a dispute. And I'll go into some more examples later on. But if you think about traditional legal contracts, they are also written know, if Josh and I write a contract, know our east global agreement, we hope that we are going to follow the terms of that contract without having to go to court. And the court is the enforcement mechanism. So keep that in mind as I keep going here.
00:03:22.874 - 00:04:17.710, Speaker B: Because basically the idea here is we want to default, to assuming people are doing what they say they're going to do. And we want to use the Oracle as a type of enforcement mechanism to enforce or ensure that people do follow the terms of the contract or the agreement. And this looks a lot like layer two solutions for designing DeFi contracts. In fact, we actually owe a bunch of credit to the optimism team and a conversation we had with them a year and a half ago of thinking through optimistic approaches to DeFi contract designs. A lot of that thought process is what led us to this path and to kind of highlight why this is layer two. Like, it's like in a layer two game, things are happening optimistically and you only use the exit game if people cheat. Same idea.
00:04:17.710 - 00:04:58.780, Speaker B: And incidentally, like I said before, this is very similar to how contracts work in the real world. This is like how legal agreements are written. So let's go into a hypothetical example here. Let's assume Alice and Bob make a bet on Bitcoin and we have this contract with a million dollar payout. Alice gets the million bucks if bitcoins above 10,000. At your end, bob gets the million bucks if bitcoins below 10,000. So what should we use as our Oracle? How should we construct this? So it's like a bad joke, but it's a trick question.
00:04:58.780 - 00:06:05.730, Speaker B: The idea is, in the optimistic scenario, we do not need an Oracle if Alice and Bob are in agreement on the outcome of their bet, if they agree that Alice should get the million bucks or Bob should get the million bucks after on deck, any Oracle call at all? No Oracle calls, no Oracle usage, no transactions to the blockchain. Super efficient, everybody's happy. So what we do need though, is we do need an enforcement mechanism to resolve a dispute if Bob and Alice don't agree on who should get the million bucks. And so this is really the whole basis for our priceless philosophy. Oracle calls are disputes. And if we can write contracts that minimize disputes, we can minimize Oracle calls, which leads to greater efficiency, greater scalability, greater security, a whole bunch of problems fall away. We basically solve the quote, unquote Oracle problem by minimizing Oracle usage.
00:06:05.730 - 00:06:37.180, Speaker B: So let's go back for a second and just think of this again as a legal contract. Alice and Bob in the fiat world wrote a legal contract, says one of them is going to get a million bucks. The idea is that both of them will follow this legal contract optimistically in the real world. And if they don't, Alice can sue Bob or Bob can sue Alice. That's how the traditional world works. And incidentally, that's how all kind of financial derivatives in the existing fiat world are enforced too. They're enforced with a court system.
00:06:37.180 - 00:07:22.540, Speaker B: We want to take the same concepts, the same optimistic enforcement concepts, and say, hey, we are only going to call an Oracle to resolve disputes. That's it. That's the whole idea behind this priceless thing. So let's go a little bit more complicated here because this Alice Bob example was pretty trivial. Let's review how synthetic tokens or how a contract like maker's dye system works today. And I'm going to call these just for comparison difference, I'm going to call them price full DeFi contracts versus price list. And so on the left we have like so let's imagine we're talking about maker Die and a CDP and we want to check whether it's correctly collateralized or not.
00:07:22.540 - 00:08:18.538, Speaker B: We really have like two cases. We have the good case which is on the left here where the total collateral locked in the contract is greater than the collateral requirement and we're happy. What is enforcing whether we're in this good state or not is this price feed that's being pushed to the chain every so often. On the right we have the bad state, which is when a contract drops below its collateralization requirement, then the contract gets liquidated, penalty gets assessed, life moves on that liquidation. Whether this contract is in the left or the right state is determined by this price feed that's being pushed on chain. And this works, but it has some problems. So before we get to the problems, let's just actually jump ahead one slide and talk about what the priceless version of this looks like.
00:08:18.538 - 00:09:01.290, Speaker B: And the priceless version means we have no on chain price feed. There's no price feed being pushed at all. And instead we have a same sort of contract where it's like, okay, we have a contract that's supposed to have so much collateral it's got a required collateral amount and then it has the total collateral in it. But here we are optimistically observing this contract to see if it's correctly collateralized or not. So the contract participants on both sides, anyone in the ecosystem can look at the blockchain, can look at the ethereum blockchain and be like, okay, this contract, yes, it has enough value in it or no it doesn't. And we have no on chain price feed. If people think it's correctly collateralized, it is correctly collateralized.
00:09:01.290 - 00:09:50.700, Speaker B: What would happen then in the downside scenario if somebody goes, oh wait, shit, no, I don't think this is correctly collateralized, they then trigger a liquidation and then and only then do we call an Oracle. And I'll go in a little bit more detail how we actually minimize Oracle usage further. But the idea here is that look at it, if everybody's happy with how this is collateralized, we're good. We only need to do anything if people dispute the state of the contract. Okay, let's go back and compare it again to our price full version. Our price full version is really enforced by this price feed. And one of the problems we have here is that the price feed doesn't happen that often.
00:09:50.700 - 00:11:03.534, Speaker B: The performance and the efficiency of this DeFi contract is purely limited by how often I can get prices pushed to the blockchain and validate them. And so we sit here and we keep having checkpoints pushing transactions, making Oracle calls so that the contract can determine whether we're in the good or bad state. And if you just think about this naively, this is hyper inefficient to start with. Like, we're pushing all these transactions to a blockchain that we don't use or don't need, because most of the time, there's no liquidation that happens. Most of these Oracle checkpoints will never actually be used to trigger a liquidation. It's very like an inefficient use case from a transactional perspective. But more importantly, because there's such a gap between these price updates, it also makes the contracts themselves inefficient, because we need to over collateralize our DFI contracts, since we will only be getting prices every 15 minutes, every hour, whatever it might be.
00:11:03.534 - 00:11:56.190, Speaker B: And the bigger the gap between prices, the more we need to over collateralize our contract so things get really capital inefficient. And we have to have greater over collateralization with this design than we would if we could execute these contracts optimistically. So this goes to one of the advantages of this priceless design. We can start doing things that are super capital efficient because we can execute liquidations instantly. The moment that someone says, hey, this thing should get liquidated, we can go and execute a liquidation now. Okay, one nuance to detail about how we actually do this with our current design is when a contract gets liquidated, we don't even call an Oracle. Then a liquidation happens instantly.
00:11:56.190 - 00:12:30.640, Speaker B: But the rewards for that liquidation aren't paid out for a period of time, for 2 hours. And in that period of time, participants can dispute that liquidation. So we actually only send Oracle calls. We only make a call to the Oracle if somebody disputes the liquidation. And you can call this a version of an escalation game where we are having the contracts optimistically enforced. We are having liquidations happen when people think that a contract deserves to be liquidated, and then we are only calling the Oracle. If somebody says, hey, that liquidation was invalid, that was a bad state.
00:12:30.640 - 00:13:20.182, Speaker B: And in doing so, we go back to the first slide here. We can secure a huge amount of value with minimal Oracle calls. So it's hyper efficient and hyper fast, hyper performant. Let's talk on another problem with this priceless design or the priceful design. In the priceful design, we also have a lot, a lot of brittleness. So we have this on chain price feed pushing prices, but any one bad price point and the whole thing, you know, here's a graphic from the BZX like Flash Loan attack. This is the older version of BZX, right, where an Oracle got manipulated.
00:13:20.182 - 00:14:26.626, Speaker B: They were using Kyber as the oracle. And this one bad price point led to somebody stealing a million bucks worth of ETH out of the you know, you're sitting there from a DeFi developer perspective, and this is, like, utterly frightening because you get one bad price feed one bad price point and huge amounts of value can be instantaneously taken and will be taken if people can break this stuff. It feels very brittle. And you can think about another way if you kind of conceptualize these DeFi contracts going back to a court system where this is basically Bob and Alice have a contract and the Oracle call is a dispute. It's going to like the judge saying, hey, is this right or not? In the price full design, it's almost like we're asking a judge to make an instantaneous judgment, like what is the price? What is the price, right? And if you think about that, if we were to take our legal system and try to have instantaneous judgments, it wouldn't work. There's not enough time to gather facts. There's not enough time to see what's going on.
00:14:26.626 - 00:15:26.870, Speaker B: It would be really dangerous and it would lead to all kinds of bad outcomes. The solution for the price list design is to slow things down. So when we frame this as a dispute resolution problem, as something where the Oracle call only happens when there's a dispute, what it lets us do is slow things down and asynchronously resolve this dispute. So when a dispute happens and it gets triggered, we can take our time, we can take our sweet time and understand, okay, who's right here is Alice or Bob, right? And we can slow down those disputes. And it doesn't block the system from functioning because everything else is acting optimistically. It's the other analogy to push on the legal kind of conceptualization. If there's a lawsuit happening about one financial contract, the rest of the world of finance doesn't stop, or the rest of the legal system doesn't stop, all those contracts keep operating.
00:15:26.870 - 00:16:46.490, Speaker B: So we're able to take disputes and solve them asynchronously, which means we can have a much slower, much more decentralized, much just more resilient solution to the Oracle problem when we do need those disputes resolved. So let's talk for a second then about practically what does this mean for ethereum DeFi developers or for people in the space? What can you actually use this priceless thing for? And so my point here is that it's more resilient, right? And it's more efficient. It lets us do more capital efficient things. And this lets us build some really cool shit. Actually, I'll make another point here, because we don't have an on chain price feed, we can actually support long tail assets, things that we wouldn't want to push a price on chain very often for. And so here are some examples of things just that pulled from recent hackathons and current development ideas of what we can build. One thing that I'm super excited about is gas futures.
00:16:46.490 - 00:18:25.920, Speaker B: So right now if you were to join our discord, there's a bunch of people talking about how to build a synthetic token that will expire every month, so month of January, month of February, whatever, with the average price of gas paid, of the ethereum gas paid that month. And I think it's a pretty cool way where you could actually have people hedge their gas costs so big projects could buy this token to hedge their gas costs. And you could have speculators bet on how expensive gas is going to be in the future and actually have a whole curve, a whole futures curve of what we think the future price of gas and ethereum is going to look like. And we can do this because we can have this whole kind of difficult calculation, you can't really do this instantaneously on chain difficult calculation happen off chain and enforce this with this priceless mechanism. Perlin is a really cool project based mainly out of Singapore that is using the Uma contract and the priceless design to create their own synthetic assets that are collateralized with their own token. And one of the reasons why they can do this is because they can be quite capital efficient or they can secure the value of their token by using this priceless thing to not have a super robust price feed. On chain of the price of their own token versus, say, ETH potion labs came out a hack money hackathon, the ETH global hack money hackathon earlier this year.
00:18:25.920 - 00:19:56.570, Speaker B: And it's a pretty amazing insurance protocol that invented almost a new form of a put option that can protect against price drops in any asset. And the reason why they're able to do this is because they can make it a hyper capital efficient thing because they're not pushing prices on chain all the time and they can also make it super extensible so their design will let you ensure the price drop of any ERC 20 asset, which I find pretty fascinating. And then a couple of other things here that came up earlier, from earlier hackathons. Tom Schmidt came up with this idea of a barf token which was a synthetic token that tracks the price of San Francisco Bay area housing and again, we can do that because we can use a price feed, we don't have to push this price feed on chain. It's kind of hard to get this price data. And in ETH Boston last year, a group of three guys named Will came up with a token called Swandai that would allow to hedge against any dislocation in the price of dai from its peg. This also shows that we could create price identifiers or have a lot of flexibility around the design of this contract because again, we're just looking to only enforce or only dispute we can have a pretty complicated contract in terms of what the payout structure would look like.
00:19:56.570 - 00:20:51.740, Speaker B: That is all evaluated off chain and only resolved with a relatively rare dispute. Okay, so I've ran through this pretty quickly. I want to throw a few links out here in terms of our channels that you guys can reach out to us and where you can get our developer docs. We are actively building and promoting various new ideas and we are trying to be pretty active with our community. We've grown our team quite a bit recently, and we have a bunch of new community people that are very much interested in hearing your ideas and helping you guys build different types of synthetic assets. So please hop in our discord. And with that, Josh, if it's not too early, I will jump into some Q A kind of early on.
00:20:52.110 - 00:21:20.230, Speaker A: That is perfect. Hard we've got a couple of questions. I'm sure we can have an interesting discussion here. So one question right out of the gate, and this is actually from Zubin, who's going to speak next, and I'll just read his question directly. What are your thoughts or your research on how to make priceless Oracles faster going forward? So, for example, removing collateral or liquidating could be a multi day process even in the absence of a dispute, which might be too slow in some cases.
00:21:21.690 - 00:22:13.398, Speaker B: Yes. So my answer to this would be to frame it as an escalation game. So if we basically say, hey, we need a price really fast or really instantly, you can say, hey, I'll give you a price right now and say, hey, this price will stand if nobody disagrees with it in five minutes. And that'll give you a pretty fast resolution to this dispute game. And then if somebody disagrees with it in five minutes, you can be like, okay, well, I'll bet you twice as much and give you another five minutes to disagree with it. And you can actually have a fairly quick escalation game in this process until you get to a point where you're like, holy shit, this really is a legitimate dispute. Maybe we should take it to the full dispute, the full kind of Oracle system.
00:22:13.398 - 00:23:00.440, Speaker B: So it's like, think of it like a court system where you start with your small claims court and you can get a really quick answer and then you keep escalating it through an appeals process until you get to the Supreme Court, which might take a long time. And yeah, my intuition, Josh, is that this general type of approach is going to be the most efficient way to scale this. And it kind of, again, looks like layer two, where we're going to say, hey, let's operate optimistically and then we have a funnel of how bad a dispute is. We operate optimistically. 99% of all things go through without any issue. 1% goes to small claims court and then 1% of that gets appealed and so on.
00:23:01.770 - 00:23:23.040, Speaker A: That actually segues nicely into the next topic, just generally as more and more layer two systems are coming online, what does that change for the synthetic assets marketplace with priceless design specifically, does that open up a lot of new possibilities? Does it change the landscape in some important way for you?
00:23:24.770 - 00:24:46.920, Speaker B: So I think if there's a few angles to that so we think if synthetic assets are ERC 20 assets, if we start there, then layer two or call it like other scalability solutions, they just have this base problem of like, hey, how do we move ERC 20 assets between different side chains, layer two shards, whatever else? And I think that's like a layer two problem of how are we going to solve that Usability thing of moving these assets back and forth if the underlying contract, though, is just being written? Optimistically, if the financial contract that's created these, ERC, 20 assets that can actually live on any shard, any layer two system, any chain, and you can execute all of the same concepts of, hey, watch this thing on layer two on this chart, on that chart, on the base chain, and only trigger a dispute if something goes wrong. And because you slow down these disputes, it's like, for example, if this whole priceless design was operating on a layer two system, if there was a dispute, it's okay. If it takes a while, it could go back to the main chain because it is all resolved asynchronously it's kind of like triggering an exit game.
00:24:49.370 - 00:25:08.910, Speaker A: Okay. And one, I think, last question, unless we have any other new ones in the chat, and this is maybe an easy question for the answer, but what do you want us to get built at the ETH online hackathon? Whether that's on Yuma or that's on something else entirely.
00:25:10.690 - 00:26:10.946, Speaker B: That'S not an easy one to answer. Josh? Josh I have to do that too. What do we want to see build? I got this whole philosophy that I think what's going to be very kind of meta answer of what is so cool about DeFi. It's not bringing traditional financial assets onto DeFi or onto ethereum or even traditional financial concepts like put options or call options. I think it's fundamentally about innovating new shit. And by lowering the barriers to entry to create a financial product, I think it gives us a really big design space to innovate new things. And you can think about it like, someone once told me that if you wanted to start a mutual fund, it basically takes like $100 million of assets raised to make it possible to start a mutual fund.
00:26:10.946 - 00:27:17.430, Speaker B: And so there's a lot of people that can't go and start mutual funds with whatever idea they have because they just can't raise $100 million DeFi. And this whole technology, the barrier to entry to actually create a new financial product is so much lower, I think that it lays the framework, it's the foundation for an explosive amount of innovation in terms of what you can actually do with financial concepts. And Josh, actually, I think Jordy and the team from Potion from the hack, money hackathon, which I am biased because they did build on top of us, but ignoring that entirely, they reimagined a way, at least at the time, and they've changed their thinking a little bit since then. But it was like a different type of put option that actually I'd never seen in traditional financial context, and it made my head hurt. But it was, I think, a really powerful concept of, hey, you give a bunch of smart people a new platform, they can build some really cool shit.
00:27:18.410 - 00:27:57.400, Speaker A: Yeah, that's very interesting. I think just to build on that. One thing that we're seeing, or that we might expect to see using platforms like yours are financial products derivatives of things that never had a market for them before. Right. I mean, like the barf index, obviously, real estate is a traded asset, but it's a different kind of market. And there's all these people out there who might have a lot of expertise in something, whether that's like culture or music or art. And there's going to be synthetic assets that track now a market that exists on that making a whole new set of people financial users where they never had access to convert their knowledge into financial speculation or bets before.
00:27:57.400 - 00:28:02.120, Speaker A: Okay, one last question from sorry, go ahead.
00:28:03.130 - 00:28:09.418, Speaker B: No, I could keep riffing on that, but you actually have an agenda you got to keep that is okay.
00:28:09.584 - 00:28:19.900, Speaker A: There's one more question that came in from Chat. If there is no cost for disputing, why can't you just spam disputes? How do you solve that civil problem?
00:28:20.750 - 00:28:56.790, Speaker B: There is a cost for disputing for that exact reason. Right? And so we actually spent a lot of time I'm not going over it in this sort of high level talk, but we spend a lot of time analyzing exactly that problem. If you make things free, you will get spammed just because some asshole tries to be an asshole. Right? So we spent a lot of time on the game theory of making sure that dispute costs are always unprofitable and it would be unprofitable to spam disputes and very happy to go into a lot more detail on that in our discord or in our various other channels.
00:28:57.450 - 00:29:09.190, Speaker A: Well, so if the person that asked that question is asking, please jump into the Yuma Discord. I'm sure that we can put the link into the chat for you so you can find your way there. Okay, thank you so much.
00:29:09.340 - 00:29:14.638, Speaker B: Discord. Discord. Umaproject.org, easy.
00:29:14.804 - 00:29:15.326, Speaker A: Great.
00:29:15.428 - 00:29:15.774, Speaker B: All right.
00:29:15.812 - 00:29:21.290, Speaker A: Thanks so much. Really enjoy the talk. Enjoy the bright red background. It's giving me life. We're.
